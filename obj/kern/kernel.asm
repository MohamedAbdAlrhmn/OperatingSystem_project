
obj/kern/kernel:     file format elf32-i386


Disassembly of section .text:

f0100000 <start_of_kernel-0xc>:
.long MULTIBOOT_HEADER_FLAGS
.long CHECKSUM

.globl		start_of_kernel
start_of_kernel:
	movw	$0x1234,0x472			# warm boot
f0100000:	02 b0 ad 1b 03 00    	add    0x31bad(%eax),%dh
f0100006:	00 00                	add    %al,(%eax)
f0100008:	fb                   	sti    
f0100009:	4f                   	dec    %edi
f010000a:	52                   	push   %edx
f010000b:	e4                   	.byte 0xe4

f010000c <start_of_kernel>:
f010000c:	66 c7 05 72 04 00 00 	movw   $0x1234,0x472
f0100013:	34 12 

	# Establish our own GDT in place of the boot loader's temporary GDT.
	lgdt	RELOC(mygdtdesc)		# load descriptor table
f0100015:	0f 01 15 18 20 19 00 	lgdtl  0x192018

	# Immediately reload all segment registers (including CS!)
	# with segment selectors from the new GDT.
	movl	$DATA_SEL, %eax			# Data segment selector
f010001c:	b8 10 00 00 00       	mov    $0x10,%eax
	movw	%ax,%ds				# -> DS: Data Segment
f0100021:	8e d8                	mov    %eax,%ds
	movw	%ax,%es				# -> ES: Extra Segment
f0100023:	8e c0                	mov    %eax,%es
	movw	%ax,%ss				# -> SS: Stack Segment
f0100025:	8e d0                	mov    %eax,%ss
	ljmp	$CODE_SEL,$relocated		# reload CS by jumping
f0100027:	ea 2e 00 10 f0 08 00 	ljmp   $0x8,$0xf010002e

f010002e <relocated>:
relocated:

	# Clear the frame pointer register (EBP)
	# so that once we get into debugging C code,
	# stack backtraces will be terminated properly.
	movl	$0x0,%ebp			# nuke frame pointer
f010002e:	bd 00 00 00 00       	mov    $0x0,%ebp

        # Leave a few words on the stack for the user trap frame
	movl	$(ptr_stack_top-SIZEOF_STRUCT_TRAPFRAME),%esp
f0100033:	bc bc 1f 19 f0       	mov    $0xf0191fbc,%esp

	# now to C code
	call	FOS_initialize
f0100038:	e8 22 00 00 00       	call   f010005f <FOS_initialize>

f010003d <spin>:

	# Should never get here, but in case we do, just spin.
spin:	jmp	spin
f010003d:	eb fe                	jmp    f010003d <spin>

f010003f <setKHeapPlacementStrategyFIRSTFIT>:
#define KHP_PLACE_BESTFIT 	0x2
#define KHP_PLACE_NEXTFIT 	0x3
#define KHP_PLACE_WORSTFIT 	0x4

static inline void setKHeapPlacementStrategyCONTALLOC(){_KHeapPlacementStrategy = KHP_PLACE_CONTALLOC;}
static inline void setKHeapPlacementStrategyFIRSTFIT(){_KHeapPlacementStrategy = KHP_PLACE_FIRSTFIT;}
f010003f:	55                   	push   %ebp
f0100040:	89 e5                	mov    %esp,%ebp
f0100042:	c7 05 1c 26 78 f0 01 	movl   $0x1,0xf078261c
f0100049:	00 00 00 
f010004c:	90                   	nop
f010004d:	5d                   	pop    %ebp
f010004e:	c3                   	ret    

f010004f <setUHeapPlacementStrategyFIRSTFIT>:

//***********************************
/*2015*/ //USER HEAP STRATEGIES
uint32 _UHeapPlacementStrategy;

static inline void setUHeapPlacementStrategyFIRSTFIT(){_UHeapPlacementStrategy = UHP_PLACE_FIRSTFIT;}
f010004f:	55                   	push   %ebp
f0100050:	89 e5                	mov    %esp,%ebp
f0100052:	c7 05 f0 25 78 f0 01 	movl   $0x1,0xf07825f0
f0100059:	00 00 00 
f010005c:	90                   	nop
f010005d:	5d                   	pop    %ebp
f010005e:	c3                   	ret    

f010005f <FOS_initialize>:
void print_welcome_message();
//=======================================

//First ever function called in FOS kernel
void FOS_initialize()
{
f010005f:	55                   	push   %ebp
f0100060:	89 e5                	mov    %esp,%ebp
f0100062:	83 ec 18             	sub    $0x18,%esp
	extern char start_of_uninitialized_data_section[], end_of_kernel[];

	// Before doing anything else,
	// clear the uninitialized global data (BSS) section of our program, from start_of_uninitialized_data_section to end_of_kernel
	// This ensures that all static/global variables start with zero value.
	memset(start_of_uninitialized_data_section, 0, end_of_kernel - start_of_uninitialized_data_section);
f0100065:	ba 7c 27 78 f0       	mov    $0xf078277c,%edx
f010006a:	b8 60 1a 78 f0       	mov    $0xf0781a60,%eax
f010006f:	29 c2                	sub    %eax,%edx
f0100071:	89 d0                	mov    %edx,%eax
f0100073:	83 ec 04             	sub    $0x4,%esp
f0100076:	50                   	push   %eax
f0100077:	6a 00                	push   $0x0
f0100079:	68 60 1a 78 f0       	push   $0xf0781a60
f010007e:	e8 5d 13 03 00       	call   f01313e0 <memset>
f0100083:	83 c4 10             	add    $0x10,%esp

	/*2022*/
	scheduler_status = SCH_UNINITIALIZED;
f0100086:	c7 05 18 26 78 f0 ff 	movl   $0xffffffff,0xf0782618
f010008d:	ff ff ff 

	// Initialize the console.
	// Can't call cprintf until after we do this!
	console_initialize();
f0100090:	e8 c5 0b 00 00       	call   f0100c5a <console_initialize>

	//print welcome message
	print_welcome_message();
f0100095:	e8 f2 00 00 00       	call   f010018c <print_welcome_message>

	// Lab 2 memory management initialization functions
	detect_memory();
f010009a:	e8 6d 61 00 00       	call   f010620c <detect_memory>
	initialize_kernel_VM();
f010009f:	e8 f9 5c 00 00       	call   f0105d9d <initialize_kernel_VM>
	initialize_paging();
f01000a4:	e8 7a 64 00 00       	call   f0106523 <initialize_paging>
	//	page_check();

	// Lab 3 user environment initialization functions
	env_init();
f01000a9:	e8 48 9b 00 00       	call   f0109bf6 <env_init>
	idt_init();
f01000ae:	e8 00 b1 00 00       	call   f010b1b3 <idt_init>

	//Project initializations

	setPageReplacmentAlgorithmCLOCK();
f01000b3:	e8 33 dc 00 00       	call   f010dceb <setPageReplacmentAlgorithmCLOCK>
	setUHeapPlacementStrategyFIRSTFIT();
f01000b8:	e8 92 ff ff ff       	call   f010004f <setUHeapPlacementStrategyFIRSTFIT>
	setKHeapPlacementStrategyFIRSTFIT();
f01000bd:	e8 7d ff ff ff       	call   f010003f <setKHeapPlacementStrategyFIRSTFIT>

#if USE_KHEAP
	//2022:
	{
		int freeFrames_before = sys_calculate_free_frames() ;
f01000c2:	e8 d6 ca 00 00       	call   f010cb9d <sys_calculate_free_frames>
f01000c7:	89 45 f4             	mov    %eax,-0xc(%ebp)
		int freeDiskFrames_before = pf_calculate_free_frames() ;
f01000ca:	e8 f9 3c 00 00       	call   f0103dc8 <pf_calculate_free_frames>
f01000cf:	89 45 f0             	mov    %eax,-0x10(%ebp)
		initialize_dyn_block_system();
f01000d2:	e8 f2 75 00 00       	call   f01076c9 <initialize_dyn_block_system>
		int freeFrames_after = sys_calculate_free_frames() ;
f01000d7:	e8 c1 ca 00 00       	call   f010cb9d <sys_calculate_free_frames>
f01000dc:	89 45 ec             	mov    %eax,-0x14(%ebp)
		int freeDiskFrames_after = pf_calculate_free_frames() ;
f01000df:	e8 e4 3c 00 00       	call   f0103dc8 <pf_calculate_free_frames>
f01000e4:	89 45 e8             	mov    %eax,-0x18(%ebp)
		test_initialize_dyn_block_system(freeFrames_before, freeDiskFrames_before, freeFrames_after, freeDiskFrames_after);
f01000e7:	ff 75 e8             	pushl  -0x18(%ebp)
f01000ea:	ff 75 ec             	pushl  -0x14(%ebp)
f01000ed:	ff 75 f0             	pushl  -0x10(%ebp)
f01000f0:	ff 75 f4             	pushl  -0xc(%ebp)
f01000f3:	e8 4b fc 02 00       	call   f012fd43 <test_initialize_dyn_block_system>
f01000f8:	83 c4 10             	add    $0x10,%esp
	}
	MAX_SHARES = (KERNEL_SHARES_ARR_INIT_SIZE) / sizeof(struct Share);
f01000fb:	c7 05 e8 25 78 f0 61 	movl   $0x61,0xf07825e8
f0100102:	00 00 00 
	MAX_SEMAPHORES = (KERNEL_SEMAPHORES_ARR_INIT_SIZE) / sizeof(struct Semaphore);
f0100105:	c7 05 74 25 78 f0 59 	movl   $0x59,0xf0782574
f010010c:	00 00 00 
#endif
	create_shares_array(MAX_SHARES);
f010010f:	a1 e8 25 78 f0       	mov    0xf07825e8,%eax
f0100114:	83 ec 0c             	sub    $0xc,%esp
f0100117:	50                   	push   %eax
f0100118:	e8 e0 6f 00 00       	call   f01070fd <create_shares_array>
f010011d:	83 c4 10             	add    $0x10,%esp
	create_semaphores_array(MAX_SEMAPHORES);
f0100120:	a1 74 25 78 f0       	mov    0xf0782574,%eax
f0100125:	83 ec 0c             	sub    $0xc,%esp
f0100128:	50                   	push   %eax
f0100129:	e8 75 e0 00 00       	call   f010e1a3 <create_semaphores_array>
f010012e:	83 c4 10             	add    $0x10,%esp



	enableBuffering(0);
f0100131:	83 ec 0c             	sub    $0xc,%esp
f0100134:	6a 00                	push   $0x0
f0100136:	e8 bd dc 00 00       	call   f010ddf8 <enableBuffering>
f010013b:	83 c4 10             	add    $0x10,%esp
	enableModifiedBuffer(0) ;
f010013e:	83 ec 0c             	sub    $0xc,%esp
f0100141:	6a 00                	push   $0x0
f0100143:	e8 98 dc 00 00       	call   f010dde0 <enableModifiedBuffer>
f0100148:	83 c4 10             	add    $0x10,%esp
	setModifiedBufferLength(1000);
f010014b:	83 ec 0c             	sub    $0xc,%esp
f010014e:	68 e8 03 00 00       	push   $0x3e8
f0100153:	e8 b8 dc 00 00       	call   f010de10 <setModifiedBufferLength>
f0100158:	83 c4 10             	add    $0x10,%esp

	// Lab 4 multitasking initialization functions
	pic_init();
f010015b:	e8 b7 5a 00 00       	call   f0105c17 <pic_init>
	sched_init() ;
f0100160:	e8 60 47 00 00       	call   f01048c5 <sched_init>
	//Project initializations

	// start the kernel command prompt.
	while (1==1)
	{
		cprintf("\nWelcome to the FOS kernel command prompt!\n");
f0100165:	83 ec 0c             	sub    $0xc,%esp
f0100168:	68 80 34 13 f0       	push   $0xf0133480
f010016d:	e8 9c 0b 00 00       	call   f0100d0e <cprintf>
f0100172:	83 c4 10             	add    $0x10,%esp
		cprintf("Type 'help' for a list of commands.\n");
f0100175:	83 ec 0c             	sub    $0xc,%esp
f0100178:	68 ac 34 13 f0       	push   $0xf01334ac
f010017d:	e8 8c 0b 00 00       	call   f0100d0e <cprintf>
f0100182:	83 c4 10             	add    $0x10,%esp
		run_command_prompt();
f0100185:	e8 aa 0b 00 00       	call   f0100d34 <run_command_prompt>
	}
f010018a:	eb d9                	jmp    f0100165 <FOS_initialize+0x106>

f010018c <print_welcome_message>:
}


void print_welcome_message()
{
f010018c:	55                   	push   %ebp
f010018d:	89 e5                	mov    %esp,%ebp
f010018f:	83 ec 08             	sub    $0x8,%esp
	cprintf("\n\n\n");
f0100192:	83 ec 0c             	sub    $0xc,%esp
f0100195:	68 d1 34 13 f0       	push   $0xf01334d1
f010019a:	e8 6f 0b 00 00       	call   f0100d0e <cprintf>
f010019f:	83 c4 10             	add    $0x10,%esp
	cprintf("\t\t!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n");
f01001a2:	83 ec 0c             	sub    $0xc,%esp
f01001a5:	68 d8 34 13 f0       	push   $0xf01334d8
f01001aa:	e8 5f 0b 00 00       	call   f0100d0e <cprintf>
f01001af:	83 c4 10             	add    $0x10,%esp
	cprintf("\t\t!!                                                             !!\n");
f01001b2:	83 ec 0c             	sub    $0xc,%esp
f01001b5:	68 20 35 13 f0       	push   $0xf0133520
f01001ba:	e8 4f 0b 00 00       	call   f0100d0e <cprintf>
f01001bf:	83 c4 10             	add    $0x10,%esp
	cprintf("\t\t!!                   !! FCIS says HELLO !!                     !!\n");
f01001c2:	83 ec 0c             	sub    $0xc,%esp
f01001c5:	68 68 35 13 f0       	push   $0xf0133568
f01001ca:	e8 3f 0b 00 00       	call   f0100d0e <cprintf>
f01001cf:	83 c4 10             	add    $0x10,%esp
	cprintf("\t\t!!                                                             !!\n");
f01001d2:	83 ec 0c             	sub    $0xc,%esp
f01001d5:	68 20 35 13 f0       	push   $0xf0133520
f01001da:	e8 2f 0b 00 00       	call   f0100d0e <cprintf>
f01001df:	83 c4 10             	add    $0x10,%esp
	cprintf("\t\t!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n");
f01001e2:	83 ec 0c             	sub    $0xc,%esp
f01001e5:	68 d8 34 13 f0       	push   $0xf01334d8
f01001ea:	e8 1f 0b 00 00       	call   f0100d0e <cprintf>
f01001ef:	83 c4 10             	add    $0x10,%esp
	cprintf("\n\n\n\n");
f01001f2:	83 ec 0c             	sub    $0xc,%esp
f01001f5:	68 ad 35 13 f0       	push   $0xf01335ad
f01001fa:	e8 0f 0b 00 00       	call   f0100d0e <cprintf>
f01001ff:	83 c4 10             	add    $0x10,%esp
}
f0100202:	90                   	nop
f0100203:	c9                   	leave  
f0100204:	c3                   	ret    

f0100205 <_panic>:
/*
 * Panic is called on unresolvable fatal errors.
 * It prints "panic: mesg", exit the curenv and schedule the next environment.
 */
void _panic(const char *file, int line, const char *fmt,...)
{
f0100205:	55                   	push   %ebp
f0100206:	89 e5                	mov    %esp,%ebp
f0100208:	83 ec 18             	sub    $0x18,%esp
	va_list ap;

	//if (panicstr)
	//	goto dead;
	panicstr = fmt;
f010020b:	8b 45 10             	mov    0x10(%ebp),%eax
f010020e:	a3 60 1a 78 f0       	mov    %eax,0xf0781a60

	va_start(ap, fmt);
f0100213:	8d 45 10             	lea    0x10(%ebp),%eax
f0100216:	83 c0 04             	add    $0x4,%eax
f0100219:	89 45 f4             	mov    %eax,-0xc(%ebp)
	cprintf("\nkernel panic at %s:%d: ", file, line);
f010021c:	83 ec 04             	sub    $0x4,%esp
f010021f:	ff 75 0c             	pushl  0xc(%ebp)
f0100222:	ff 75 08             	pushl  0x8(%ebp)
f0100225:	68 b2 35 13 f0       	push   $0xf01335b2
f010022a:	e8 df 0a 00 00       	call   f0100d0e <cprintf>
f010022f:	83 c4 10             	add    $0x10,%esp
	vcprintf(fmt, ap);
f0100232:	8b 45 10             	mov    0x10(%ebp),%eax
f0100235:	83 ec 08             	sub    $0x8,%esp
f0100238:	ff 75 f4             	pushl  -0xc(%ebp)
f010023b:	50                   	push   %eax
f010023c:	e8 a4 0a 00 00       	call   f0100ce5 <vcprintf>
f0100241:	83 c4 10             	add    $0x10,%esp
	cprintf("\n");
f0100244:	83 ec 0c             	sub    $0xc,%esp
f0100247:	68 cb 35 13 f0       	push   $0xf01335cb
f010024c:	e8 bd 0a 00 00       	call   f0100d0e <cprintf>
f0100251:	83 c4 10             	add    $0x10,%esp
	va_end(ap);

	dead:
	/* break into the fos scheduler */
	//2013: Check if the panic occur when running an environment
	if (curenv != NULL && curenv->env_status == ENV_RUNNABLE)
f0100254:	a1 b4 1c 78 f0       	mov    0xf0781cb4,%eax
f0100259:	85 c0                	test   %eax,%eax
f010025b:	74 12                	je     f010026f <_panic+0x6a>
f010025d:	a1 b4 1c 78 f0       	mov    0xf0781cb4,%eax
f0100262:	8b 40 54             	mov    0x54(%eax),%eax
f0100265:	83 f8 02             	cmp    $0x2,%eax
f0100268:	75 05                	jne    f010026f <_panic+0x6a>
	{
		//2015
		env_exit();
f010026a:	e8 7c 98 00 00       	call   f0109aeb <env_exit>
		//env_run_cmd_prmpt() ;
	}

	/*2022*///Check if the scheduler is successfully initialized or not
	if (scheduler_status != SCH_UNINITIALIZED)
f010026f:	a1 18 26 78 f0       	mov    0xf0782618,%eax
f0100274:	83 f8 ff             	cmp    $0xffffffff,%eax
f0100277:	74 1b                	je     f0100294 <_panic+0x8f>
	{
		cprintf("scheduler_status=%d\n", scheduler_status);
f0100279:	a1 18 26 78 f0       	mov    0xf0782618,%eax
f010027e:	83 ec 08             	sub    $0x8,%esp
f0100281:	50                   	push   %eax
f0100282:	68 cd 35 13 f0       	push   $0xf01335cd
f0100287:	e8 82 0a 00 00       	call   f0100d0e <cprintf>
f010028c:	83 c4 10             	add    $0x10,%esp
		//2015
		fos_scheduler();
f010028f:	e8 92 44 00 00       	call   f0104726 <fos_scheduler>
	}
	else
	{
		curenv = NULL;
f0100294:	c7 05 b4 1c 78 f0 00 	movl   $0x0,0xf0781cb4
f010029b:	00 00 00 
		lcr3(phys_page_directory);
f010029e:	a1 6c 26 78 f0       	mov    0xf078266c,%eax
f01002a3:	89 45 f0             	mov    %eax,-0x10(%ebp)
}

static __inline void
lcr3(uint32 val)
{
	__asm __volatile("movl %0,%%cr3" : : "r" (val));
f01002a6:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01002a9:	0f 22 d8             	mov    %eax,%cr3
		while (1)
			run_command_prompt(NULL);
f01002ac:	83 ec 0c             	sub    $0xc,%esp
f01002af:	6a 00                	push   $0x0
f01002b1:	e8 7e 0a 00 00       	call   f0100d34 <run_command_prompt>
f01002b6:	83 c4 10             	add    $0x10,%esp
f01002b9:	eb f1                	jmp    f01002ac <_panic+0xa7>

f01002bb <_panic_all>:
/*
 * Panic is called on unresolvable fatal errors.
 * It prints "panic: mesg", exit all env's and then enters the kernel command prompt.
 */
void _panic_all(const char *file, int line, const char *fmt,...)
{
f01002bb:	55                   	push   %ebp
f01002bc:	89 e5                	mov    %esp,%ebp
f01002be:	83 ec 18             	sub    $0x18,%esp
	va_list ap;

	//if (panicstr)
	//	goto dead;
	panicstr = fmt;
f01002c1:	8b 45 10             	mov    0x10(%ebp),%eax
f01002c4:	a3 60 1a 78 f0       	mov    %eax,0xf0781a60

	va_start(ap, fmt);
f01002c9:	8d 45 10             	lea    0x10(%ebp),%eax
f01002cc:	83 c0 04             	add    $0x4,%eax
f01002cf:	89 45 f4             	mov    %eax,-0xc(%ebp)
	cprintf("\nkernel panic at %s:%d: ", file, line);
f01002d2:	83 ec 04             	sub    $0x4,%esp
f01002d5:	ff 75 0c             	pushl  0xc(%ebp)
f01002d8:	ff 75 08             	pushl  0x8(%ebp)
f01002db:	68 b2 35 13 f0       	push   $0xf01335b2
f01002e0:	e8 29 0a 00 00       	call   f0100d0e <cprintf>
f01002e5:	83 c4 10             	add    $0x10,%esp
	vcprintf(fmt, ap);
f01002e8:	8b 45 10             	mov    0x10(%ebp),%eax
f01002eb:	83 ec 08             	sub    $0x8,%esp
f01002ee:	ff 75 f4             	pushl  -0xc(%ebp)
f01002f1:	50                   	push   %eax
f01002f2:	e8 ee 09 00 00       	call   f0100ce5 <vcprintf>
f01002f7:	83 c4 10             	add    $0x10,%esp
	cprintf("\n");
f01002fa:	83 ec 0c             	sub    $0xc,%esp
f01002fd:	68 cb 35 13 f0       	push   $0xf01335cb
f0100302:	e8 07 0a 00 00       	call   f0100d0e <cprintf>
f0100307:	83 c4 10             	add    $0x10,%esp
	va_end(ap);

	dead:
	/* break into the fos scheduler */
	/*2022*///Check if the scheduler is successfully initialized or not
	if (scheduler_status != SCH_UNINITIALIZED)
f010030a:	a1 18 26 78 f0       	mov    0xf0782618,%eax
f010030f:	83 f8 ff             	cmp    $0xffffffff,%eax
f0100312:	74 27                	je     f010033b <_panic_all+0x80>
	{
		//exit all ready env's
		sched_exit_all_ready_envs();
f0100314:	e8 c2 51 00 00       	call   f01054db <sched_exit_all_ready_envs>
		if (curenv != NULL)
f0100319:	a1 b4 1c 78 f0       	mov    0xf0781cb4,%eax
f010031e:	85 c0                	test   %eax,%eax
f0100320:	74 14                	je     f0100336 <_panic_all+0x7b>
		{
			//cprintf("exit curenv...........\n");
			sched_exit_env(curenv->env_id);
f0100322:	a1 b4 1c 78 f0       	mov    0xf0781cb4,%eax
f0100327:	8b 40 4c             	mov    0x4c(%eax),%eax
f010032a:	83 ec 0c             	sub    $0xc,%esp
f010032d:	50                   	push   %eax
f010032e:	e8 6f 4f 00 00       	call   f01052a2 <sched_exit_env>
f0100333:	83 c4 10             	add    $0x10,%esp
			//env_run_cmd_prmpt() ;
		}

		fos_scheduler();
f0100336:	e8 eb 43 00 00       	call   f0104726 <fos_scheduler>
	}
	else
	{
		curenv = NULL;
f010033b:	c7 05 b4 1c 78 f0 00 	movl   $0x0,0xf0781cb4
f0100342:	00 00 00 
		lcr3(phys_page_directory);
f0100345:	a1 6c 26 78 f0       	mov    0xf078266c,%eax
f010034a:	89 45 f0             	mov    %eax,-0x10(%ebp)
f010034d:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0100350:	0f 22 d8             	mov    %eax,%cr3
		while (1)
			run_command_prompt(NULL);
f0100353:	83 ec 0c             	sub    $0xc,%esp
f0100356:	6a 00                	push   $0x0
f0100358:	e8 d7 09 00 00       	call   f0100d34 <run_command_prompt>
f010035d:	83 c4 10             	add    $0x10,%esp
f0100360:	eb f1                	jmp    f0100353 <_panic_all+0x98>

f0100362 <_panic_into_prompt>:
/*
 * Panic is called on unresolvable fatal errors.
 * It prints "panic: mesg", exit the curenv (if any) and break into the command prompt.
 */
void _panic_into_prompt(const char *file, int line, const char *fmt,...)
{
f0100362:	55                   	push   %ebp
f0100363:	89 e5                	mov    %esp,%ebp
f0100365:	83 ec 18             	sub    $0x18,%esp
	va_list ap;

	//if (panicstr)
	//	goto dead;
	panicstr = fmt;
f0100368:	8b 45 10             	mov    0x10(%ebp),%eax
f010036b:	a3 60 1a 78 f0       	mov    %eax,0xf0781a60

	va_start(ap, fmt);
f0100370:	8d 45 10             	lea    0x10(%ebp),%eax
f0100373:	83 c0 04             	add    $0x4,%eax
f0100376:	89 45 f4             	mov    %eax,-0xc(%ebp)
	cprintf("\nkernel panic at %s:%d: ", file, line);
f0100379:	83 ec 04             	sub    $0x4,%esp
f010037c:	ff 75 0c             	pushl  0xc(%ebp)
f010037f:	ff 75 08             	pushl  0x8(%ebp)
f0100382:	68 b2 35 13 f0       	push   $0xf01335b2
f0100387:	e8 82 09 00 00       	call   f0100d0e <cprintf>
f010038c:	83 c4 10             	add    $0x10,%esp
	vcprintf(fmt, ap);
f010038f:	8b 45 10             	mov    0x10(%ebp),%eax
f0100392:	83 ec 08             	sub    $0x8,%esp
f0100395:	ff 75 f4             	pushl  -0xc(%ebp)
f0100398:	50                   	push   %eax
f0100399:	e8 47 09 00 00       	call   f0100ce5 <vcprintf>
f010039e:	83 c4 10             	add    $0x10,%esp
	cprintf("\n");
f01003a1:	83 ec 0c             	sub    $0xc,%esp
f01003a4:	68 cb 35 13 f0       	push   $0xf01335cb
f01003a9:	e8 60 09 00 00       	call   f0100d0e <cprintf>
f01003ae:	83 c4 10             	add    $0x10,%esp
	va_end(ap);

	dead:
	/* break into the fos scheduler */
	//2013: Check if the panic occur when running an environment
	if (curenv != NULL && curenv->env_status == ENV_RUNNABLE)
f01003b1:	a1 b4 1c 78 f0       	mov    0xf0781cb4,%eax
f01003b6:	85 c0                	test   %eax,%eax
f01003b8:	74 28                	je     f01003e2 <_panic_into_prompt+0x80>
f01003ba:	a1 b4 1c 78 f0       	mov    0xf0781cb4,%eax
f01003bf:	8b 40 54             	mov    0x54(%eax),%eax
f01003c2:	83 f8 02             	cmp    $0x2,%eax
f01003c5:	75 1b                	jne    f01003e2 <_panic_into_prompt+0x80>
	{
		sched_insert_exit(curenv);
f01003c7:	a1 b4 1c 78 f0       	mov    0xf0781cb4,%eax
f01003cc:	83 ec 0c             	sub    $0xc,%esp
f01003cf:	50                   	push   %eax
f01003d0:	e8 85 47 00 00       	call   f0104b5a <sched_insert_exit>
f01003d5:	83 c4 10             	add    $0x10,%esp
		curenv = NULL;
f01003d8:	c7 05 b4 1c 78 f0 00 	movl   $0x0,0xf0781cb4
f01003df:	00 00 00 
	}

	lcr3(phys_page_directory);
f01003e2:	a1 6c 26 78 f0       	mov    0xf078266c,%eax
f01003e7:	89 45 f0             	mov    %eax,-0x10(%ebp)
f01003ea:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01003ed:	0f 22 d8             	mov    %eax,%cr3

	/*2022*///Check if the scheduler is successfully initialized or not
	if (scheduler_status != SCH_UNINITIALIZED)
f01003f0:	a1 18 26 78 f0       	mov    0xf0782618,%eax
f01003f5:	83 f8 ff             	cmp    $0xffffffff,%eax
f01003f8:	74 0a                	je     f0100404 <_panic_into_prompt+0xa2>
	{
		scheduler_status = SCH_STOPPED;
f01003fa:	c7 05 18 26 78 f0 00 	movl   $0x0,0xf0782618
f0100401:	00 00 00 
	}
	while (1)
		run_command_prompt(NULL);
f0100404:	83 ec 0c             	sub    $0xc,%esp
f0100407:	6a 00                	push   $0x0
f0100409:	e8 26 09 00 00       	call   f0100d34 <run_command_prompt>
f010040e:	83 c4 10             	add    $0x10,%esp
f0100411:	eb f1                	jmp    f0100404 <_panic_into_prompt+0xa2>

f0100413 <_warn>:
}

/* like panic, but don't enters the kernel command prompt*/
void _warn(const char *file, int line, const char *fmt,...)
{
f0100413:	55                   	push   %ebp
f0100414:	89 e5                	mov    %esp,%ebp
f0100416:	83 ec 18             	sub    $0x18,%esp
	va_list ap;

	va_start(ap, fmt);
f0100419:	8d 45 10             	lea    0x10(%ebp),%eax
f010041c:	83 c0 04             	add    $0x4,%eax
f010041f:	89 45 f4             	mov    %eax,-0xc(%ebp)
	cprintf("\nkernel warning at %s:%d: ", file, line);
f0100422:	83 ec 04             	sub    $0x4,%esp
f0100425:	ff 75 0c             	pushl  0xc(%ebp)
f0100428:	ff 75 08             	pushl  0x8(%ebp)
f010042b:	68 e2 35 13 f0       	push   $0xf01335e2
f0100430:	e8 d9 08 00 00       	call   f0100d0e <cprintf>
f0100435:	83 c4 10             	add    $0x10,%esp
	vcprintf(fmt, ap);
f0100438:	8b 45 10             	mov    0x10(%ebp),%eax
f010043b:	83 ec 08             	sub    $0x8,%esp
f010043e:	ff 75 f4             	pushl  -0xc(%ebp)
f0100441:	50                   	push   %eax
f0100442:	e8 9e 08 00 00       	call   f0100ce5 <vcprintf>
f0100447:	83 c4 10             	add    $0x10,%esp
	cprintf("\n");
f010044a:	83 ec 0c             	sub    $0xc,%esp
f010044d:	68 cb 35 13 f0       	push   $0xf01335cb
f0100452:	e8 b7 08 00 00       	call   f0100d0e <cprintf>
f0100457:	83 c4 10             	add    $0x10,%esp
	va_end(ap);
}
f010045a:	90                   	nop
f010045b:	c9                   	leave  
f010045c:	c3                   	ret    

f010045d <serial_proc_data>:

static bool serial_exists;

int
serial_proc_data(void)
{
f010045d:	55                   	push   %ebp
f010045e:	89 e5                	mov    %esp,%ebp
f0100460:	83 ec 10             	sub    $0x10,%esp
f0100463:	c7 45 f8 fd 03 00 00 	movl   $0x3fd,-0x8(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f010046a:	8b 45 f8             	mov    -0x8(%ebp),%eax
f010046d:	89 c2                	mov    %eax,%edx
f010046f:	ec                   	in     (%dx),%al
f0100470:	88 45 f7             	mov    %al,-0x9(%ebp)
	return data;
f0100473:	8a 45 f7             	mov    -0x9(%ebp),%al
	if (!(inb(COM1+COM_LSR) & COM_LSR_DATA))
f0100476:	0f b6 c0             	movzbl %al,%eax
f0100479:	83 e0 01             	and    $0x1,%eax
f010047c:	85 c0                	test   %eax,%eax
f010047e:	75 07                	jne    f0100487 <serial_proc_data+0x2a>
		return -1;
f0100480:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
f0100485:	eb 16                	jmp    f010049d <serial_proc_data+0x40>
f0100487:	c7 45 fc f8 03 00 00 	movl   $0x3f8,-0x4(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f010048e:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0100491:	89 c2                	mov    %eax,%edx
f0100493:	ec                   	in     (%dx),%al
f0100494:	88 45 f6             	mov    %al,-0xa(%ebp)
	return data;
f0100497:	8a 45 f6             	mov    -0xa(%ebp),%al
	return inb(COM1+COM_RX);
f010049a:	0f b6 c0             	movzbl %al,%eax
}
f010049d:	c9                   	leave  
f010049e:	c3                   	ret    

f010049f <serial_intr>:

void
serial_intr(void)
{
f010049f:	55                   	push   %ebp
f01004a0:	89 e5                	mov    %esp,%ebp
f01004a2:	83 ec 08             	sub    $0x8,%esp
	if (serial_exists)
f01004a5:	a1 80 1a 78 f0       	mov    0xf0781a80,%eax
f01004aa:	85 c0                	test   %eax,%eax
f01004ac:	74 10                	je     f01004be <serial_intr+0x1f>
		cons_intr(serial_proc_data);
f01004ae:	83 ec 0c             	sub    $0xc,%esp
f01004b1:	68 5d 04 10 f0       	push   $0xf010045d
f01004b6:	e8 e4 05 00 00       	call   f0100a9f <cons_intr>
f01004bb:	83 c4 10             	add    $0x10,%esp
}
f01004be:	90                   	nop
f01004bf:	c9                   	leave  
f01004c0:	c3                   	ret    

f01004c1 <serial_init>:

void
serial_init(void)
{
f01004c1:	55                   	push   %ebp
f01004c2:	89 e5                	mov    %esp,%ebp
f01004c4:	83 ec 40             	sub    $0x40,%esp
f01004c7:	c7 45 fc fa 03 00 00 	movl   $0x3fa,-0x4(%ebp)
f01004ce:	c6 45 ce 00          	movb   $0x0,-0x32(%ebp)
}

static __inline void
outb(int port, uint8 data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
f01004d2:	8a 45 ce             	mov    -0x32(%ebp),%al
f01004d5:	8b 55 fc             	mov    -0x4(%ebp),%edx
f01004d8:	ee                   	out    %al,(%dx)
f01004d9:	c7 45 f8 fb 03 00 00 	movl   $0x3fb,-0x8(%ebp)
f01004e0:	c6 45 cf 80          	movb   $0x80,-0x31(%ebp)
f01004e4:	8a 45 cf             	mov    -0x31(%ebp),%al
f01004e7:	8b 55 f8             	mov    -0x8(%ebp),%edx
f01004ea:	ee                   	out    %al,(%dx)
f01004eb:	c7 45 f4 f8 03 00 00 	movl   $0x3f8,-0xc(%ebp)
f01004f2:	c6 45 d0 0c          	movb   $0xc,-0x30(%ebp)
f01004f6:	8a 45 d0             	mov    -0x30(%ebp),%al
f01004f9:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01004fc:	ee                   	out    %al,(%dx)
f01004fd:	c7 45 f0 f9 03 00 00 	movl   $0x3f9,-0x10(%ebp)
f0100504:	c6 45 d1 00          	movb   $0x0,-0x2f(%ebp)
f0100508:	8a 45 d1             	mov    -0x2f(%ebp),%al
f010050b:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010050e:	ee                   	out    %al,(%dx)
f010050f:	c7 45 ec fb 03 00 00 	movl   $0x3fb,-0x14(%ebp)
f0100516:	c6 45 d2 03          	movb   $0x3,-0x2e(%ebp)
f010051a:	8a 45 d2             	mov    -0x2e(%ebp),%al
f010051d:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0100520:	ee                   	out    %al,(%dx)
f0100521:	c7 45 e8 fc 03 00 00 	movl   $0x3fc,-0x18(%ebp)
f0100528:	c6 45 d3 00          	movb   $0x0,-0x2d(%ebp)
f010052c:	8a 45 d3             	mov    -0x2d(%ebp),%al
f010052f:	8b 55 e8             	mov    -0x18(%ebp),%edx
f0100532:	ee                   	out    %al,(%dx)
f0100533:	c7 45 e4 f9 03 00 00 	movl   $0x3f9,-0x1c(%ebp)
f010053a:	c6 45 d4 01          	movb   $0x1,-0x2c(%ebp)
f010053e:	8a 45 d4             	mov    -0x2c(%ebp),%al
f0100541:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f0100544:	ee                   	out    %al,(%dx)
f0100545:	c7 45 e0 fd 03 00 00 	movl   $0x3fd,-0x20(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f010054c:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010054f:	89 c2                	mov    %eax,%edx
f0100551:	ec                   	in     (%dx),%al
f0100552:	88 45 d5             	mov    %al,-0x2b(%ebp)
	return data;
f0100555:	8a 45 d5             	mov    -0x2b(%ebp),%al
	// Enable rcv interrupts
	outb(COM1+COM_IER, COM_IER_RDI);

	// Clear any preexisting overrun indications and interrupts
	// Serial port doesn't exist if COM_LSR returns 0xFF
	serial_exists = (inb(COM1+COM_LSR) != 0xFF);
f0100558:	3c ff                	cmp    $0xff,%al
f010055a:	0f 95 c0             	setne  %al
f010055d:	0f b6 c0             	movzbl %al,%eax
f0100560:	a3 80 1a 78 f0       	mov    %eax,0xf0781a80
f0100565:	c7 45 dc fa 03 00 00 	movl   $0x3fa,-0x24(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f010056c:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010056f:	89 c2                	mov    %eax,%edx
f0100571:	ec                   	in     (%dx),%al
f0100572:	88 45 d6             	mov    %al,-0x2a(%ebp)
f0100575:	c7 45 d8 f8 03 00 00 	movl   $0x3f8,-0x28(%ebp)
f010057c:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010057f:	89 c2                	mov    %eax,%edx
f0100581:	ec                   	in     (%dx),%al
f0100582:	88 45 d7             	mov    %al,-0x29(%ebp)
	(void) inb(COM1+COM_IIR);
	(void) inb(COM1+COM_RX);

}
f0100585:	90                   	nop
f0100586:	c9                   	leave  
f0100587:	c3                   	ret    

f0100588 <delay>:
// page.

// Stupid I/O delay routine necessitated by historical PC design flaws
static void
delay(void)
{
f0100588:	55                   	push   %ebp
f0100589:	89 e5                	mov    %esp,%ebp
f010058b:	83 ec 20             	sub    $0x20,%esp
f010058e:	c7 45 fc 84 00 00 00 	movl   $0x84,-0x4(%ebp)
f0100595:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0100598:	89 c2                	mov    %eax,%edx
f010059a:	ec                   	in     (%dx),%al
f010059b:	88 45 ec             	mov    %al,-0x14(%ebp)
f010059e:	c7 45 f8 84 00 00 00 	movl   $0x84,-0x8(%ebp)
f01005a5:	8b 45 f8             	mov    -0x8(%ebp),%eax
f01005a8:	89 c2                	mov    %eax,%edx
f01005aa:	ec                   	in     (%dx),%al
f01005ab:	88 45 ed             	mov    %al,-0x13(%ebp)
f01005ae:	c7 45 f4 84 00 00 00 	movl   $0x84,-0xc(%ebp)
f01005b5:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01005b8:	89 c2                	mov    %eax,%edx
f01005ba:	ec                   	in     (%dx),%al
f01005bb:	88 45 ee             	mov    %al,-0x12(%ebp)
f01005be:	c7 45 f0 84 00 00 00 	movl   $0x84,-0x10(%ebp)
f01005c5:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01005c8:	89 c2                	mov    %eax,%edx
f01005ca:	ec                   	in     (%dx),%al
f01005cb:	88 45 ef             	mov    %al,-0x11(%ebp)
	inb(0x84);
	inb(0x84);
	inb(0x84);
	inb(0x84);
}
f01005ce:	90                   	nop
f01005cf:	c9                   	leave  
f01005d0:	c3                   	ret    

f01005d1 <lpt_putc>:

static void
lpt_putc(int c)
{
f01005d1:	55                   	push   %ebp
f01005d2:	89 e5                	mov    %esp,%ebp
f01005d4:	83 ec 20             	sub    $0x20,%esp
	int i;

	for (i = 0; !(inb(0x378+1) & 0x80) && i < 2800; i++) //12800
f01005d7:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
f01005de:	eb 08                	jmp    f01005e8 <lpt_putc+0x17>
		delay();
f01005e0:	e8 a3 ff ff ff       	call   f0100588 <delay>
static void
lpt_putc(int c)
{
	int i;

	for (i = 0; !(inb(0x378+1) & 0x80) && i < 2800; i++) //12800
f01005e5:	ff 45 fc             	incl   -0x4(%ebp)
f01005e8:	c7 45 ec 79 03 00 00 	movl   $0x379,-0x14(%ebp)
f01005ef:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01005f2:	89 c2                	mov    %eax,%edx
f01005f4:	ec                   	in     (%dx),%al
f01005f5:	88 45 eb             	mov    %al,-0x15(%ebp)
	return data;
f01005f8:	8a 45 eb             	mov    -0x15(%ebp),%al
f01005fb:	84 c0                	test   %al,%al
f01005fd:	78 09                	js     f0100608 <lpt_putc+0x37>
f01005ff:	81 7d fc ef 0a 00 00 	cmpl   $0xaef,-0x4(%ebp)
f0100606:	7e d8                	jle    f01005e0 <lpt_putc+0xf>
		delay();
	outb(0x378+0, c);
f0100608:	8b 45 08             	mov    0x8(%ebp),%eax
f010060b:	0f b6 c0             	movzbl %al,%eax
f010060e:	c7 45 f4 78 03 00 00 	movl   $0x378,-0xc(%ebp)
f0100615:	88 45 e8             	mov    %al,-0x18(%ebp)
}

static __inline void
outb(int port, uint8 data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
f0100618:	8a 45 e8             	mov    -0x18(%ebp),%al
f010061b:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010061e:	ee                   	out    %al,(%dx)
f010061f:	c7 45 f0 7a 03 00 00 	movl   $0x37a,-0x10(%ebp)
f0100626:	c6 45 e9 0d          	movb   $0xd,-0x17(%ebp)
f010062a:	8a 45 e9             	mov    -0x17(%ebp),%al
f010062d:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0100630:	ee                   	out    %al,(%dx)
f0100631:	c7 45 f8 7a 03 00 00 	movl   $0x37a,-0x8(%ebp)
f0100638:	c6 45 ea 08          	movb   $0x8,-0x16(%ebp)
f010063c:	8a 45 ea             	mov    -0x16(%ebp),%al
f010063f:	8b 55 f8             	mov    -0x8(%ebp),%edx
f0100642:	ee                   	out    %al,(%dx)
	outb(0x378+2, 0x08|0x04|0x01);
	outb(0x378+2, 0x08);
}
f0100643:	90                   	nop
f0100644:	c9                   	leave  
f0100645:	c3                   	ret    

f0100646 <cga_init>:
static uint16 *crt_buf;
static uint16 crt_pos;

void
cga_init(void)
{
f0100646:	55                   	push   %ebp
f0100647:	89 e5                	mov    %esp,%ebp
f0100649:	83 ec 20             	sub    $0x20,%esp
	volatile uint16 *cp;
	uint16 was;
	unsigned pos;

	cp = (uint16*) (KERNEL_BASE + CGA_BUF);
f010064c:	c7 45 fc 00 80 0b f0 	movl   $0xf00b8000,-0x4(%ebp)
	was = *cp;
f0100653:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0100656:	66 8b 00             	mov    (%eax),%ax
f0100659:	66 89 45 fa          	mov    %ax,-0x6(%ebp)
	*cp = (uint16) 0xA55A;
f010065d:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0100660:	66 c7 00 5a a5       	movw   $0xa55a,(%eax)
	if (*cp != 0xA55A) {
f0100665:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0100668:	66 8b 00             	mov    (%eax),%ax
f010066b:	66 3d 5a a5          	cmp    $0xa55a,%ax
f010066f:	74 13                	je     f0100684 <cga_init+0x3e>
		cp = (uint16*) (KERNEL_BASE + MONO_BUF);
f0100671:	c7 45 fc 00 00 0b f0 	movl   $0xf00b0000,-0x4(%ebp)
		addr_6845 = MONO_BASE;
f0100678:	c7 05 84 1a 78 f0 b4 	movl   $0x3b4,0xf0781a84
f010067f:	03 00 00 
f0100682:	eb 14                	jmp    f0100698 <cga_init+0x52>
	} else {
		*cp = was;
f0100684:	8b 55 fc             	mov    -0x4(%ebp),%edx
f0100687:	66 8b 45 fa          	mov    -0x6(%ebp),%ax
f010068b:	66 89 02             	mov    %ax,(%edx)
		addr_6845 = CGA_BASE;
f010068e:	c7 05 84 1a 78 f0 d4 	movl   $0x3d4,0xf0781a84
f0100695:	03 00 00 
	}

	/* Extract cursor location */
	outb(addr_6845, 14);
f0100698:	a1 84 1a 78 f0       	mov    0xf0781a84,%eax
f010069d:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01006a0:	c6 45 e0 0e          	movb   $0xe,-0x20(%ebp)
f01006a4:	8a 45 e0             	mov    -0x20(%ebp),%al
f01006a7:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01006aa:	ee                   	out    %al,(%dx)
	pos = inb(addr_6845 + 1) << 8;
f01006ab:	a1 84 1a 78 f0       	mov    0xf0781a84,%eax
f01006b0:	40                   	inc    %eax
f01006b1:	89 45 ec             	mov    %eax,-0x14(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f01006b4:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01006b7:	89 c2                	mov    %eax,%edx
f01006b9:	ec                   	in     (%dx),%al
f01006ba:	88 45 e1             	mov    %al,-0x1f(%ebp)
	return data;
f01006bd:	8a 45 e1             	mov    -0x1f(%ebp),%al
f01006c0:	0f b6 c0             	movzbl %al,%eax
f01006c3:	c1 e0 08             	shl    $0x8,%eax
f01006c6:	89 45 f0             	mov    %eax,-0x10(%ebp)
	outb(addr_6845, 15);
f01006c9:	a1 84 1a 78 f0       	mov    0xf0781a84,%eax
f01006ce:	89 45 e8             	mov    %eax,-0x18(%ebp)
f01006d1:	c6 45 e2 0f          	movb   $0xf,-0x1e(%ebp)
}

static __inline void
outb(int port, uint8 data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
f01006d5:	8a 45 e2             	mov    -0x1e(%ebp),%al
f01006d8:	8b 55 e8             	mov    -0x18(%ebp),%edx
f01006db:	ee                   	out    %al,(%dx)
	pos |= inb(addr_6845 + 1);
f01006dc:	a1 84 1a 78 f0       	mov    0xf0781a84,%eax
f01006e1:	40                   	inc    %eax
f01006e2:	89 45 e4             	mov    %eax,-0x1c(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f01006e5:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01006e8:	89 c2                	mov    %eax,%edx
f01006ea:	ec                   	in     (%dx),%al
f01006eb:	88 45 e3             	mov    %al,-0x1d(%ebp)
	return data;
f01006ee:	8a 45 e3             	mov    -0x1d(%ebp),%al
f01006f1:	0f b6 c0             	movzbl %al,%eax
f01006f4:	09 45 f0             	or     %eax,-0x10(%ebp)

	crt_buf = (uint16*) cp;
f01006f7:	8b 45 fc             	mov    -0x4(%ebp),%eax
f01006fa:	a3 88 1a 78 f0       	mov    %eax,0xf0781a88
	crt_pos = pos;
f01006ff:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0100702:	66 a3 8c 1a 78 f0    	mov    %ax,0xf0781a8c
}
f0100708:	90                   	nop
f0100709:	c9                   	leave  
f010070a:	c3                   	ret    

f010070b <cga_putc>:



void
cga_putc(int c)
{
f010070b:	55                   	push   %ebp
f010070c:	89 e5                	mov    %esp,%ebp
f010070e:	53                   	push   %ebx
f010070f:	83 ec 24             	sub    $0x24,%esp
	// if no attribute given, then use black on white
	if (!(c & ~0xFF))
f0100712:	8b 45 08             	mov    0x8(%ebp),%eax
f0100715:	b0 00                	mov    $0x0,%al
f0100717:	85 c0                	test   %eax,%eax
f0100719:	75 07                	jne    f0100722 <cga_putc+0x17>
		c |= 0x0700;
f010071b:	81 4d 08 00 07 00 00 	orl    $0x700,0x8(%ebp)

	switch (c & 0xff) {
f0100722:	8b 45 08             	mov    0x8(%ebp),%eax
f0100725:	0f b6 c0             	movzbl %al,%eax
f0100728:	83 f8 09             	cmp    $0x9,%eax
f010072b:	0f 84 94 00 00 00    	je     f01007c5 <cga_putc+0xba>
f0100731:	83 f8 09             	cmp    $0x9,%eax
f0100734:	7f 0a                	jg     f0100740 <cga_putc+0x35>
f0100736:	83 f8 08             	cmp    $0x8,%eax
f0100739:	74 14                	je     f010074f <cga_putc+0x44>
f010073b:	e9 c8 00 00 00       	jmp    f0100808 <cga_putc+0xfd>
f0100740:	83 f8 0a             	cmp    $0xa,%eax
f0100743:	74 49                	je     f010078e <cga_putc+0x83>
f0100745:	83 f8 0d             	cmp    $0xd,%eax
f0100748:	74 53                	je     f010079d <cga_putc+0x92>
f010074a:	e9 b9 00 00 00       	jmp    f0100808 <cga_putc+0xfd>
	case '\b':
		if (crt_pos > 0) {
f010074f:	66 a1 8c 1a 78 f0    	mov    0xf0781a8c,%ax
f0100755:	66 85 c0             	test   %ax,%ax
f0100758:	0f 84 d0 00 00 00    	je     f010082e <cga_putc+0x123>
			crt_pos--;
f010075e:	66 a1 8c 1a 78 f0    	mov    0xf0781a8c,%ax
f0100764:	48                   	dec    %eax
f0100765:	66 a3 8c 1a 78 f0    	mov    %ax,0xf0781a8c
			crt_buf[crt_pos] = (c & ~0xff) | ' ';
f010076b:	8b 15 88 1a 78 f0    	mov    0xf0781a88,%edx
f0100771:	66 a1 8c 1a 78 f0    	mov    0xf0781a8c,%ax
f0100777:	0f b7 c0             	movzwl %ax,%eax
f010077a:	01 c0                	add    %eax,%eax
f010077c:	01 c2                	add    %eax,%edx
f010077e:	8b 45 08             	mov    0x8(%ebp),%eax
f0100781:	b0 00                	mov    $0x0,%al
f0100783:	83 c8 20             	or     $0x20,%eax
f0100786:	66 89 02             	mov    %ax,(%edx)
		}
		break;
f0100789:	e9 a0 00 00 00       	jmp    f010082e <cga_putc+0x123>
	case '\n':
		crt_pos += CRT_COLS;
f010078e:	66 a1 8c 1a 78 f0    	mov    0xf0781a8c,%ax
f0100794:	83 c0 50             	add    $0x50,%eax
f0100797:	66 a3 8c 1a 78 f0    	mov    %ax,0xf0781a8c
		/* fallthru */
	case '\r':
		crt_pos -= (crt_pos % CRT_COLS);
f010079d:	66 8b 0d 8c 1a 78 f0 	mov    0xf0781a8c,%cx
f01007a4:	66 a1 8c 1a 78 f0    	mov    0xf0781a8c,%ax
f01007aa:	bb 50 00 00 00       	mov    $0x50,%ebx
f01007af:	ba 00 00 00 00       	mov    $0x0,%edx
f01007b4:	66 f7 f3             	div    %bx
f01007b7:	89 d0                	mov    %edx,%eax
f01007b9:	29 c1                	sub    %eax,%ecx
f01007bb:	89 c8                	mov    %ecx,%eax
f01007bd:	66 a3 8c 1a 78 f0    	mov    %ax,0xf0781a8c
		break;
f01007c3:	eb 6a                	jmp    f010082f <cga_putc+0x124>
	case '\t':
		cons_putc(' ');
f01007c5:	83 ec 0c             	sub    $0xc,%esp
f01007c8:	6a 20                	push   $0x20
f01007ca:	e8 69 04 00 00       	call   f0100c38 <cons_putc>
f01007cf:	83 c4 10             	add    $0x10,%esp
		cons_putc(' ');
f01007d2:	83 ec 0c             	sub    $0xc,%esp
f01007d5:	6a 20                	push   $0x20
f01007d7:	e8 5c 04 00 00       	call   f0100c38 <cons_putc>
f01007dc:	83 c4 10             	add    $0x10,%esp
		cons_putc(' ');
f01007df:	83 ec 0c             	sub    $0xc,%esp
f01007e2:	6a 20                	push   $0x20
f01007e4:	e8 4f 04 00 00       	call   f0100c38 <cons_putc>
f01007e9:	83 c4 10             	add    $0x10,%esp
		cons_putc(' ');
f01007ec:	83 ec 0c             	sub    $0xc,%esp
f01007ef:	6a 20                	push   $0x20
f01007f1:	e8 42 04 00 00       	call   f0100c38 <cons_putc>
f01007f6:	83 c4 10             	add    $0x10,%esp
		cons_putc(' ');
f01007f9:	83 ec 0c             	sub    $0xc,%esp
f01007fc:	6a 20                	push   $0x20
f01007fe:	e8 35 04 00 00       	call   f0100c38 <cons_putc>
f0100803:	83 c4 10             	add    $0x10,%esp
		break;
f0100806:	eb 27                	jmp    f010082f <cga_putc+0x124>
	default:
		crt_buf[crt_pos++] = c;		/* write the character */
f0100808:	8b 0d 88 1a 78 f0    	mov    0xf0781a88,%ecx
f010080e:	66 a1 8c 1a 78 f0    	mov    0xf0781a8c,%ax
f0100814:	8d 50 01             	lea    0x1(%eax),%edx
f0100817:	66 89 15 8c 1a 78 f0 	mov    %dx,0xf0781a8c
f010081e:	0f b7 c0             	movzwl %ax,%eax
f0100821:	01 c0                	add    %eax,%eax
f0100823:	8d 14 01             	lea    (%ecx,%eax,1),%edx
f0100826:	8b 45 08             	mov    0x8(%ebp),%eax
f0100829:	66 89 02             	mov    %ax,(%edx)
		break;
f010082c:	eb 01                	jmp    f010082f <cga_putc+0x124>
	case '\b':
		if (crt_pos > 0) {
			crt_pos--;
			crt_buf[crt_pos] = (c & ~0xff) | ' ';
		}
		break;
f010082e:	90                   	nop
		crt_buf[crt_pos++] = c;		/* write the character */
		break;
	}

	// What is the purpose of this?
	if (crt_pos >= CRT_SIZE) {
f010082f:	66 a1 8c 1a 78 f0    	mov    0xf0781a8c,%ax
f0100835:	66 3d cf 07          	cmp    $0x7cf,%ax
f0100839:	76 58                	jbe    f0100893 <cga_putc+0x188>
		int i;

		memcpy(crt_buf, crt_buf + CRT_COLS, (CRT_SIZE - CRT_COLS) * sizeof(uint16));
f010083b:	a1 88 1a 78 f0       	mov    0xf0781a88,%eax
f0100840:	8d 90 a0 00 00 00    	lea    0xa0(%eax),%edx
f0100846:	a1 88 1a 78 f0       	mov    0xf0781a88,%eax
f010084b:	83 ec 04             	sub    $0x4,%esp
f010084e:	68 00 0f 00 00       	push   $0xf00
f0100853:	52                   	push   %edx
f0100854:	50                   	push   %eax
f0100855:	e8 b6 0b 03 00       	call   f0131410 <memcpy>
f010085a:	83 c4 10             	add    $0x10,%esp
		for (i = CRT_SIZE - CRT_COLS; i < CRT_SIZE; i++)
f010085d:	c7 45 f4 80 07 00 00 	movl   $0x780,-0xc(%ebp)
f0100864:	eb 15                	jmp    f010087b <cga_putc+0x170>
			crt_buf[i] = 0x0700 | ' ';
f0100866:	8b 15 88 1a 78 f0    	mov    0xf0781a88,%edx
f010086c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010086f:	01 c0                	add    %eax,%eax
f0100871:	01 d0                	add    %edx,%eax
f0100873:	66 c7 00 20 07       	movw   $0x720,(%eax)
	// What is the purpose of this?
	if (crt_pos >= CRT_SIZE) {
		int i;

		memcpy(crt_buf, crt_buf + CRT_COLS, (CRT_SIZE - CRT_COLS) * sizeof(uint16));
		for (i = CRT_SIZE - CRT_COLS; i < CRT_SIZE; i++)
f0100878:	ff 45 f4             	incl   -0xc(%ebp)
f010087b:	81 7d f4 cf 07 00 00 	cmpl   $0x7cf,-0xc(%ebp)
f0100882:	7e e2                	jle    f0100866 <cga_putc+0x15b>
			crt_buf[i] = 0x0700 | ' ';
		crt_pos -= CRT_COLS;
f0100884:	66 a1 8c 1a 78 f0    	mov    0xf0781a8c,%ax
f010088a:	83 e8 50             	sub    $0x50,%eax
f010088d:	66 a3 8c 1a 78 f0    	mov    %ax,0xf0781a8c
	}

	/* move that little blinky thing */
	outb(addr_6845, 14);
f0100893:	a1 84 1a 78 f0       	mov    0xf0781a84,%eax
f0100898:	89 45 f0             	mov    %eax,-0x10(%ebp)
f010089b:	c6 45 e0 0e          	movb   $0xe,-0x20(%ebp)
}

static __inline void
outb(int port, uint8 data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
f010089f:	8a 45 e0             	mov    -0x20(%ebp),%al
f01008a2:	8b 55 f0             	mov    -0x10(%ebp),%edx
f01008a5:	ee                   	out    %al,(%dx)
	outb(addr_6845 + 1, crt_pos >> 8);
f01008a6:	66 a1 8c 1a 78 f0    	mov    0xf0781a8c,%ax
f01008ac:	66 c1 e8 08          	shr    $0x8,%ax
f01008b0:	0f b6 c0             	movzbl %al,%eax
f01008b3:	8b 15 84 1a 78 f0    	mov    0xf0781a84,%edx
f01008b9:	42                   	inc    %edx
f01008ba:	89 55 ec             	mov    %edx,-0x14(%ebp)
f01008bd:	88 45 e1             	mov    %al,-0x1f(%ebp)
f01008c0:	8a 45 e1             	mov    -0x1f(%ebp),%al
f01008c3:	8b 55 ec             	mov    -0x14(%ebp),%edx
f01008c6:	ee                   	out    %al,(%dx)
	outb(addr_6845, 15);
f01008c7:	a1 84 1a 78 f0       	mov    0xf0781a84,%eax
f01008cc:	89 45 e8             	mov    %eax,-0x18(%ebp)
f01008cf:	c6 45 e2 0f          	movb   $0xf,-0x1e(%ebp)
f01008d3:	8a 45 e2             	mov    -0x1e(%ebp),%al
f01008d6:	8b 55 e8             	mov    -0x18(%ebp),%edx
f01008d9:	ee                   	out    %al,(%dx)
	outb(addr_6845 + 1, crt_pos);
f01008da:	66 a1 8c 1a 78 f0    	mov    0xf0781a8c,%ax
f01008e0:	0f b6 c0             	movzbl %al,%eax
f01008e3:	8b 15 84 1a 78 f0    	mov    0xf0781a84,%edx
f01008e9:	42                   	inc    %edx
f01008ea:	89 55 e4             	mov    %edx,-0x1c(%ebp)
f01008ed:	88 45 e3             	mov    %al,-0x1d(%ebp)
f01008f0:	8a 45 e3             	mov    -0x1d(%ebp),%al
f01008f3:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f01008f6:	ee                   	out    %al,(%dx)
}
f01008f7:	90                   	nop
f01008f8:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f01008fb:	c9                   	leave  
f01008fc:	c3                   	ret    

f01008fd <kbd_proc_data>:
 * Get data from the keyboard.  If we finish a character, return it.  Else 0.
 * Return -1 if no data.
 */
static int
kbd_proc_data(void)
{
f01008fd:	55                   	push   %ebp
f01008fe:	89 e5                	mov    %esp,%ebp
f0100900:	83 ec 28             	sub    $0x28,%esp
f0100903:	c7 45 e4 64 00 00 00 	movl   $0x64,-0x1c(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f010090a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010090d:	89 c2                	mov    %eax,%edx
f010090f:	ec                   	in     (%dx),%al
f0100910:	88 45 e3             	mov    %al,-0x1d(%ebp)
	return data;
f0100913:	8a 45 e3             	mov    -0x1d(%ebp),%al
	int c;
	uint8 data;
	static uint32 shift;

	if ((inb(KBSTATP) & KBS_DIB) == 0)
f0100916:	0f b6 c0             	movzbl %al,%eax
f0100919:	83 e0 01             	and    $0x1,%eax
f010091c:	85 c0                	test   %eax,%eax
f010091e:	75 0a                	jne    f010092a <kbd_proc_data+0x2d>
		return -1;
f0100920:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
f0100925:	e9 54 01 00 00       	jmp    f0100a7e <kbd_proc_data+0x181>
f010092a:	c7 45 ec 60 00 00 00 	movl   $0x60,-0x14(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f0100931:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0100934:	89 c2                	mov    %eax,%edx
f0100936:	ec                   	in     (%dx),%al
f0100937:	88 45 e2             	mov    %al,-0x1e(%ebp)
	return data;
f010093a:	8a 45 e2             	mov    -0x1e(%ebp),%al

	data = inb(KBDATAP);
f010093d:	88 45 f3             	mov    %al,-0xd(%ebp)

	if (data == 0xE0) {
f0100940:	80 7d f3 e0          	cmpb   $0xe0,-0xd(%ebp)
f0100944:	75 17                	jne    f010095d <kbd_proc_data+0x60>
		// E0 escape character
		shift |= E0ESC;
f0100946:	a1 a8 1c 78 f0       	mov    0xf0781ca8,%eax
f010094b:	83 c8 40             	or     $0x40,%eax
f010094e:	a3 a8 1c 78 f0       	mov    %eax,0xf0781ca8
		return 0;
f0100953:	b8 00 00 00 00       	mov    $0x0,%eax
f0100958:	e9 21 01 00 00       	jmp    f0100a7e <kbd_proc_data+0x181>
	} else if (data & 0x80) {
f010095d:	8a 45 f3             	mov    -0xd(%ebp),%al
f0100960:	84 c0                	test   %al,%al
f0100962:	79 44                	jns    f01009a8 <kbd_proc_data+0xab>
		// Key released
		data = (shift & E0ESC ? data : data & 0x7F);
f0100964:	a1 a8 1c 78 f0       	mov    0xf0781ca8,%eax
f0100969:	83 e0 40             	and    $0x40,%eax
f010096c:	85 c0                	test   %eax,%eax
f010096e:	75 08                	jne    f0100978 <kbd_proc_data+0x7b>
f0100970:	8a 45 f3             	mov    -0xd(%ebp),%al
f0100973:	83 e0 7f             	and    $0x7f,%eax
f0100976:	eb 03                	jmp    f010097b <kbd_proc_data+0x7e>
f0100978:	8a 45 f3             	mov    -0xd(%ebp),%al
f010097b:	88 45 f3             	mov    %al,-0xd(%ebp)
		shift &= ~(shiftcode[data] | E0ESC);
f010097e:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
f0100982:	8a 80 20 20 19 f0    	mov    -0xfe6dfe0(%eax),%al
f0100988:	83 c8 40             	or     $0x40,%eax
f010098b:	0f b6 c0             	movzbl %al,%eax
f010098e:	f7 d0                	not    %eax
f0100990:	89 c2                	mov    %eax,%edx
f0100992:	a1 a8 1c 78 f0       	mov    0xf0781ca8,%eax
f0100997:	21 d0                	and    %edx,%eax
f0100999:	a3 a8 1c 78 f0       	mov    %eax,0xf0781ca8
		return 0;
f010099e:	b8 00 00 00 00       	mov    $0x0,%eax
f01009a3:	e9 d6 00 00 00       	jmp    f0100a7e <kbd_proc_data+0x181>
	} else if (shift & E0ESC) {
f01009a8:	a1 a8 1c 78 f0       	mov    0xf0781ca8,%eax
f01009ad:	83 e0 40             	and    $0x40,%eax
f01009b0:	85 c0                	test   %eax,%eax
f01009b2:	74 11                	je     f01009c5 <kbd_proc_data+0xc8>
		// Last character was an E0 escape; or with 0x80
		data |= 0x80;
f01009b4:	80 4d f3 80          	orb    $0x80,-0xd(%ebp)
		shift &= ~E0ESC;
f01009b8:	a1 a8 1c 78 f0       	mov    0xf0781ca8,%eax
f01009bd:	83 e0 bf             	and    $0xffffffbf,%eax
f01009c0:	a3 a8 1c 78 f0       	mov    %eax,0xf0781ca8
	}

	shift |= shiftcode[data];
f01009c5:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
f01009c9:	8a 80 20 20 19 f0    	mov    -0xfe6dfe0(%eax),%al
f01009cf:	0f b6 d0             	movzbl %al,%edx
f01009d2:	a1 a8 1c 78 f0       	mov    0xf0781ca8,%eax
f01009d7:	09 d0                	or     %edx,%eax
f01009d9:	a3 a8 1c 78 f0       	mov    %eax,0xf0781ca8
	shift ^= togglecode[data];
f01009de:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
f01009e2:	8a 80 20 21 19 f0    	mov    -0xfe6dee0(%eax),%al
f01009e8:	0f b6 d0             	movzbl %al,%edx
f01009eb:	a1 a8 1c 78 f0       	mov    0xf0781ca8,%eax
f01009f0:	31 d0                	xor    %edx,%eax
f01009f2:	a3 a8 1c 78 f0       	mov    %eax,0xf0781ca8

	c = charcode[shift & (CTL | SHIFT)][data];
f01009f7:	a1 a8 1c 78 f0       	mov    0xf0781ca8,%eax
f01009fc:	83 e0 03             	and    $0x3,%eax
f01009ff:	8b 14 85 20 25 19 f0 	mov    -0xfe6dae0(,%eax,4),%edx
f0100a06:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
f0100a0a:	01 d0                	add    %edx,%eax
f0100a0c:	8a 00                	mov    (%eax),%al
f0100a0e:	0f b6 c0             	movzbl %al,%eax
f0100a11:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if (shift & CAPSLOCK) {
f0100a14:	a1 a8 1c 78 f0       	mov    0xf0781ca8,%eax
f0100a19:	83 e0 08             	and    $0x8,%eax
f0100a1c:	85 c0                	test   %eax,%eax
f0100a1e:	74 22                	je     f0100a42 <kbd_proc_data+0x145>
		if ('a' <= c && c <= 'z')
f0100a20:	83 7d f4 60          	cmpl   $0x60,-0xc(%ebp)
f0100a24:	7e 0c                	jle    f0100a32 <kbd_proc_data+0x135>
f0100a26:	83 7d f4 7a          	cmpl   $0x7a,-0xc(%ebp)
f0100a2a:	7f 06                	jg     f0100a32 <kbd_proc_data+0x135>
			c += 'A' - 'a';
f0100a2c:	83 6d f4 20          	subl   $0x20,-0xc(%ebp)
f0100a30:	eb 10                	jmp    f0100a42 <kbd_proc_data+0x145>
		else if ('A' <= c && c <= 'Z')
f0100a32:	83 7d f4 40          	cmpl   $0x40,-0xc(%ebp)
f0100a36:	7e 0a                	jle    f0100a42 <kbd_proc_data+0x145>
f0100a38:	83 7d f4 5a          	cmpl   $0x5a,-0xc(%ebp)
f0100a3c:	7f 04                	jg     f0100a42 <kbd_proc_data+0x145>
			c += 'a' - 'A';
f0100a3e:	83 45 f4 20          	addl   $0x20,-0xc(%ebp)
	}

	// Process special keys
	// Ctrl-Alt-Del: reboot
	if (!(~shift & (CTL | ALT)) && c == KEY_DEL) {
f0100a42:	a1 a8 1c 78 f0       	mov    0xf0781ca8,%eax
f0100a47:	f7 d0                	not    %eax
f0100a49:	83 e0 06             	and    $0x6,%eax
f0100a4c:	85 c0                	test   %eax,%eax
f0100a4e:	75 2b                	jne    f0100a7b <kbd_proc_data+0x17e>
f0100a50:	81 7d f4 e9 00 00 00 	cmpl   $0xe9,-0xc(%ebp)
f0100a57:	75 22                	jne    f0100a7b <kbd_proc_data+0x17e>
		cprintf("Rebooting!\n");
f0100a59:	83 ec 0c             	sub    $0xc,%esp
f0100a5c:	68 fd 35 13 f0       	push   $0xf01335fd
f0100a61:	e8 a8 02 00 00       	call   f0100d0e <cprintf>
f0100a66:	83 c4 10             	add    $0x10,%esp
f0100a69:	c7 45 e8 92 00 00 00 	movl   $0x92,-0x18(%ebp)
f0100a70:	c6 45 e1 03          	movb   $0x3,-0x1f(%ebp)
}

static __inline void
outb(int port, uint8 data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
f0100a74:	8a 45 e1             	mov    -0x1f(%ebp),%al
f0100a77:	8b 55 e8             	mov    -0x18(%ebp),%edx
f0100a7a:	ee                   	out    %al,(%dx)
		outb(0x92, 0x3); // courtesy of Chris Frost
	}

	return c;
f0100a7b:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f0100a7e:	c9                   	leave  
f0100a7f:	c3                   	ret    

f0100a80 <kbd_intr>:

void
kbd_intr(void)
{
f0100a80:	55                   	push   %ebp
f0100a81:	89 e5                	mov    %esp,%ebp
f0100a83:	83 ec 08             	sub    $0x8,%esp
	cons_intr(kbd_proc_data);
f0100a86:	83 ec 0c             	sub    $0xc,%esp
f0100a89:	68 fd 08 10 f0       	push   $0xf01008fd
f0100a8e:	e8 0c 00 00 00       	call   f0100a9f <cons_intr>
f0100a93:	83 c4 10             	add    $0x10,%esp
}
f0100a96:	90                   	nop
f0100a97:	c9                   	leave  
f0100a98:	c3                   	ret    

f0100a99 <kbd_init>:

void
kbd_init(void)
{
f0100a99:	55                   	push   %ebp
f0100a9a:	89 e5                	mov    %esp,%ebp
}
f0100a9c:	90                   	nop
f0100a9d:	5d                   	pop    %ebp
f0100a9e:	c3                   	ret    

f0100a9f <cons_intr>:

// called by device interrupt routines to feed input characters
// into the circular console input buffer.
void
cons_intr(int (*proc)(void))
{
f0100a9f:	55                   	push   %ebp
f0100aa0:	89 e5                	mov    %esp,%ebp
f0100aa2:	83 ec 18             	sub    $0x18,%esp
	int c;

	while ((c = (*proc)()) != -1) {
f0100aa5:	eb 35                	jmp    f0100adc <cons_intr+0x3d>
		if (c == 0)
f0100aa7:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0100aab:	75 02                	jne    f0100aaf <cons_intr+0x10>
			continue;
f0100aad:	eb 2d                	jmp    f0100adc <cons_intr+0x3d>
		cons.buf[cons.wpos++] = c;
f0100aaf:	a1 a4 1c 78 f0       	mov    0xf0781ca4,%eax
f0100ab4:	8d 50 01             	lea    0x1(%eax),%edx
f0100ab7:	89 15 a4 1c 78 f0    	mov    %edx,0xf0781ca4
f0100abd:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0100ac0:	88 90 a0 1a 78 f0    	mov    %dl,-0xf87e560(%eax)
		if (cons.wpos == CONSBUFSIZE)
f0100ac6:	a1 a4 1c 78 f0       	mov    0xf0781ca4,%eax
f0100acb:	3d 00 02 00 00       	cmp    $0x200,%eax
f0100ad0:	75 0a                	jne    f0100adc <cons_intr+0x3d>
			cons.wpos = 0;
f0100ad2:	c7 05 a4 1c 78 f0 00 	movl   $0x0,0xf0781ca4
f0100ad9:	00 00 00 
void
cons_intr(int (*proc)(void))
{
	int c;

	while ((c = (*proc)()) != -1) {
f0100adc:	8b 45 08             	mov    0x8(%ebp),%eax
f0100adf:	ff d0                	call   *%eax
f0100ae1:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0100ae4:	83 7d f4 ff          	cmpl   $0xffffffff,-0xc(%ebp)
f0100ae8:	75 bd                	jne    f0100aa7 <cons_intr+0x8>
			continue;
		cons.buf[cons.wpos++] = c;
		if (cons.wpos == CONSBUFSIZE)
			cons.wpos = 0;
	}
}
f0100aea:	90                   	nop
f0100aeb:	c9                   	leave  
f0100aec:	c3                   	ret    

f0100aed <cons_getc>:

// return the next input character from the console, or 0 if none waiting
int
cons_getc(void)
{
f0100aed:	55                   	push   %ebp
f0100aee:	89 e5                	mov    %esp,%ebp
f0100af0:	83 ec 18             	sub    $0x18,%esp
	int c;

	// poll for any pending input characters,
	// so that this function works even when interrupts are disabled
	// (e.g., when called from the kernel monitor).
	serial_intr();
f0100af3:	e8 a7 f9 ff ff       	call   f010049f <serial_intr>
	kbd_intr();
f0100af8:	e8 83 ff ff ff       	call   f0100a80 <kbd_intr>

	// grab the next character from the input buffer.
	if (cons.rpos != cons.wpos) {
f0100afd:	8b 15 a0 1c 78 f0    	mov    0xf0781ca0,%edx
f0100b03:	a1 a4 1c 78 f0       	mov    0xf0781ca4,%eax
f0100b08:	39 c2                	cmp    %eax,%edx
f0100b0a:	74 35                	je     f0100b41 <cons_getc+0x54>
		c = cons.buf[cons.rpos++];
f0100b0c:	a1 a0 1c 78 f0       	mov    0xf0781ca0,%eax
f0100b11:	8d 50 01             	lea    0x1(%eax),%edx
f0100b14:	89 15 a0 1c 78 f0    	mov    %edx,0xf0781ca0
f0100b1a:	8a 80 a0 1a 78 f0    	mov    -0xf87e560(%eax),%al
f0100b20:	0f b6 c0             	movzbl %al,%eax
f0100b23:	89 45 f4             	mov    %eax,-0xc(%ebp)
		if (cons.rpos == CONSBUFSIZE)
f0100b26:	a1 a0 1c 78 f0       	mov    0xf0781ca0,%eax
f0100b2b:	3d 00 02 00 00       	cmp    $0x200,%eax
f0100b30:	75 0a                	jne    f0100b3c <cons_getc+0x4f>
			cons.rpos = 0;
f0100b32:	c7 05 a0 1c 78 f0 00 	movl   $0x0,0xf0781ca0
f0100b39:	00 00 00 
		return c;
f0100b3c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0100b3f:	eb 05                	jmp    f0100b46 <cons_getc+0x59>
	}
	return 0;
f0100b41:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0100b46:	c9                   	leave  
f0100b47:	c3                   	ret    

f0100b48 <cons_getc2>:
// return the next input character from the console, or 0 if none waiting
int
cons_getc2(void)
{
f0100b48:	55                   	push   %ebp
f0100b49:	89 e5                	mov    %esp,%ebp
f0100b4b:	83 ec 18             	sub    $0x18,%esp

	// poll for any pending input characters,
	// so that this function works even when interrupts are disabled
	// (e.g., when called from the kernel monitor).

	int c1 = 0;
f0100b4e:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	//serial_intr();
	{
		if (serial_exists)
f0100b55:	a1 80 1a 78 f0       	mov    0xf0781a80,%eax
f0100b5a:	85 c0                	test   %eax,%eax
f0100b5c:	74 41                	je     f0100b9f <cons_getc2+0x57>
		{
			if ((c1 = serial_proc_data()) != -1) {
f0100b5e:	e8 fa f8 ff ff       	call   f010045d <serial_proc_data>
f0100b63:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0100b66:	83 7d f4 ff          	cmpl   $0xffffffff,-0xc(%ebp)
f0100b6a:	74 33                	je     f0100b9f <cons_getc2+0x57>
				if (c1 == 0)
f0100b6c:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0100b70:	74 2d                	je     f0100b9f <cons_getc2+0x57>
				{
					//continue;
				}
				else
				{
					cons.buf[cons.wpos++] = c1;
f0100b72:	a1 a4 1c 78 f0       	mov    0xf0781ca4,%eax
f0100b77:	8d 50 01             	lea    0x1(%eax),%edx
f0100b7a:	89 15 a4 1c 78 f0    	mov    %edx,0xf0781ca4
f0100b80:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0100b83:	88 90 a0 1a 78 f0    	mov    %dl,-0xf87e560(%eax)
					if (cons.wpos == CONSBUFSIZE)
f0100b89:	a1 a4 1c 78 f0       	mov    0xf0781ca4,%eax
f0100b8e:	3d 00 02 00 00       	cmp    $0x200,%eax
f0100b93:	75 0a                	jne    f0100b9f <cons_getc2+0x57>
						cons.wpos = 0;
f0100b95:	c7 05 a4 1c 78 f0 00 	movl   $0x0,0xf0781ca4
f0100b9c:	00 00 00 
				}
			}
		}
	}

	int c2 = 0;
f0100b9f:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	//kbd_intr();
	{
		if ((c2 = kbd_proc_data()) != -1) {
f0100ba6:	e8 52 fd ff ff       	call   f01008fd <kbd_proc_data>
f0100bab:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0100bae:	83 7d f0 ff          	cmpl   $0xffffffff,-0x10(%ebp)
f0100bb2:	74 33                	je     f0100be7 <cons_getc2+0x9f>
			if (c2 == 0)
f0100bb4:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0100bb8:	74 2d                	je     f0100be7 <cons_getc2+0x9f>
			{
				//continue;
			}
			else
			{
				cons.buf[cons.wpos++] = c2;
f0100bba:	a1 a4 1c 78 f0       	mov    0xf0781ca4,%eax
f0100bbf:	8d 50 01             	lea    0x1(%eax),%edx
f0100bc2:	89 15 a4 1c 78 f0    	mov    %edx,0xf0781ca4
f0100bc8:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0100bcb:	88 90 a0 1a 78 f0    	mov    %dl,-0xf87e560(%eax)
				if (cons.wpos == CONSBUFSIZE)
f0100bd1:	a1 a4 1c 78 f0       	mov    0xf0781ca4,%eax
f0100bd6:	3d 00 02 00 00       	cmp    $0x200,%eax
f0100bdb:	75 0a                	jne    f0100be7 <cons_getc2+0x9f>
					cons.wpos = 0;
f0100bdd:	c7 05 a4 1c 78 f0 00 	movl   $0x0,0xf0781ca4
f0100be4:	00 00 00 
	}

	// grab the next character from the input buffer.
	//cprintf("%d, %d \n", c1, c2);
	//if(c1 > 0 && c2 > 0)
	if(c2 > 0)
f0100be7:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0100beb:	7e 44                	jle    f0100c31 <cons_getc2+0xe9>
	{
		if (cons.rpos != cons.wpos) {
f0100bed:	8b 15 a0 1c 78 f0    	mov    0xf0781ca0,%edx
f0100bf3:	a1 a4 1c 78 f0       	mov    0xf0781ca4,%eax
f0100bf8:	39 c2                	cmp    %eax,%edx
f0100bfa:	74 35                	je     f0100c31 <cons_getc2+0xe9>
			c = cons.buf[cons.rpos++];
f0100bfc:	a1 a0 1c 78 f0       	mov    0xf0781ca0,%eax
f0100c01:	8d 50 01             	lea    0x1(%eax),%edx
f0100c04:	89 15 a0 1c 78 f0    	mov    %edx,0xf0781ca0
f0100c0a:	8a 80 a0 1a 78 f0    	mov    -0xf87e560(%eax),%al
f0100c10:	0f b6 c0             	movzbl %al,%eax
f0100c13:	89 45 ec             	mov    %eax,-0x14(%ebp)
			if (cons.rpos == CONSBUFSIZE)
f0100c16:	a1 a0 1c 78 f0       	mov    0xf0781ca0,%eax
f0100c1b:	3d 00 02 00 00       	cmp    $0x200,%eax
f0100c20:	75 0a                	jne    f0100c2c <cons_getc2+0xe4>
				cons.rpos = 0;
f0100c22:	c7 05 a0 1c 78 f0 00 	movl   $0x0,0xf0781ca0
f0100c29:	00 00 00 
			return c;
f0100c2c:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0100c2f:	eb 05                	jmp    f0100c36 <cons_getc2+0xee>
		}
	}
	return 0;
f0100c31:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0100c36:	c9                   	leave  
f0100c37:	c3                   	ret    

f0100c38 <cons_putc>:

// output a character to the console
void
cons_putc(int c)
{
f0100c38:	55                   	push   %ebp
f0100c39:	89 e5                	mov    %esp,%ebp
f0100c3b:	83 ec 08             	sub    $0x8,%esp
	lpt_putc(c);
f0100c3e:	ff 75 08             	pushl  0x8(%ebp)
f0100c41:	e8 8b f9 ff ff       	call   f01005d1 <lpt_putc>
f0100c46:	83 c4 04             	add    $0x4,%esp
	cga_putc(c);
f0100c49:	83 ec 0c             	sub    $0xc,%esp
f0100c4c:	ff 75 08             	pushl  0x8(%ebp)
f0100c4f:	e8 b7 fa ff ff       	call   f010070b <cga_putc>
f0100c54:	83 c4 10             	add    $0x10,%esp
}
f0100c57:	90                   	nop
f0100c58:	c9                   	leave  
f0100c59:	c3                   	ret    

f0100c5a <console_initialize>:

// initialize the console devices
void
console_initialize(void)
{
f0100c5a:	55                   	push   %ebp
f0100c5b:	89 e5                	mov    %esp,%ebp
f0100c5d:	83 ec 08             	sub    $0x8,%esp
	cga_init();
f0100c60:	e8 e1 f9 ff ff       	call   f0100646 <cga_init>
	kbd_init();
f0100c65:	e8 2f fe ff ff       	call   f0100a99 <kbd_init>
	serial_init();
f0100c6a:	e8 52 f8 ff ff       	call   f01004c1 <serial_init>

	if (!serial_exists)
f0100c6f:	a1 80 1a 78 f0       	mov    0xf0781a80,%eax
f0100c74:	85 c0                	test   %eax,%eax
f0100c76:	75 10                	jne    f0100c88 <console_initialize+0x2e>
		cprintf("Serial port does not exist!\n");
f0100c78:	83 ec 0c             	sub    $0xc,%esp
f0100c7b:	68 09 36 13 f0       	push   $0xf0133609
f0100c80:	e8 89 00 00 00       	call   f0100d0e <cprintf>
f0100c85:	83 c4 10             	add    $0x10,%esp
}
f0100c88:	90                   	nop
f0100c89:	c9                   	leave  
f0100c8a:	c3                   	ret    

f0100c8b <cputchar>:

// `High'-level console I/O.  Used by readline and cprintf.

void
cputchar(int c)
{
f0100c8b:	55                   	push   %ebp
f0100c8c:	89 e5                	mov    %esp,%ebp
f0100c8e:	83 ec 08             	sub    $0x8,%esp
	cons_putc(c);
f0100c91:	83 ec 0c             	sub    $0xc,%esp
f0100c94:	ff 75 08             	pushl  0x8(%ebp)
f0100c97:	e8 9c ff ff ff       	call   f0100c38 <cons_putc>
f0100c9c:	83 c4 10             	add    $0x10,%esp
}
f0100c9f:	90                   	nop
f0100ca0:	c9                   	leave  
f0100ca1:	c3                   	ret    

f0100ca2 <getchar>:

int
getchar(void)
{
f0100ca2:	55                   	push   %ebp
f0100ca3:	89 e5                	mov    %esp,%ebp
f0100ca5:	83 ec 18             	sub    $0x18,%esp
	int c;

	while ((c = cons_getc()) == 0)
f0100ca8:	e8 40 fe ff ff       	call   f0100aed <cons_getc>
f0100cad:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0100cb0:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0100cb4:	74 f2                	je     f0100ca8 <getchar+0x6>
		/* do nothing */;
	return c;
f0100cb6:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f0100cb9:	c9                   	leave  
f0100cba:	c3                   	ret    

f0100cbb <iscons>:

int
iscons(int fdnum)
{
f0100cbb:	55                   	push   %ebp
f0100cbc:	89 e5                	mov    %esp,%ebp
	// used by readline
	return 1;
f0100cbe:	b8 01 00 00 00       	mov    $0x1,%eax
}
f0100cc3:	5d                   	pop    %ebp
f0100cc4:	c3                   	ret    

f0100cc5 <putch>:
#include <inc/stdarg.h>


static void
putch(int ch, int *cnt)
{
f0100cc5:	55                   	push   %ebp
f0100cc6:	89 e5                	mov    %esp,%ebp
f0100cc8:	83 ec 08             	sub    $0x8,%esp
	cputchar(ch);
f0100ccb:	83 ec 0c             	sub    $0xc,%esp
f0100cce:	ff 75 08             	pushl  0x8(%ebp)
f0100cd1:	e8 b5 ff ff ff       	call   f0100c8b <cputchar>
f0100cd6:	83 c4 10             	add    $0x10,%esp
	*cnt++;
f0100cd9:	8b 45 0c             	mov    0xc(%ebp),%eax
f0100cdc:	83 c0 04             	add    $0x4,%eax
f0100cdf:	89 45 0c             	mov    %eax,0xc(%ebp)
}
f0100ce2:	90                   	nop
f0100ce3:	c9                   	leave  
f0100ce4:	c3                   	ret    

f0100ce5 <vcprintf>:

int
vcprintf(const char *fmt, va_list ap)
{
f0100ce5:	55                   	push   %ebp
f0100ce6:	89 e5                	mov    %esp,%ebp
f0100ce8:	83 ec 18             	sub    $0x18,%esp
	int cnt = 0;
f0100ceb:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

	vprintfmt((void*)putch, &cnt, fmt, ap);
f0100cf2:	ff 75 0c             	pushl  0xc(%ebp)
f0100cf5:	ff 75 08             	pushl  0x8(%ebp)
f0100cf8:	8d 45 f4             	lea    -0xc(%ebp),%eax
f0100cfb:	50                   	push   %eax
f0100cfc:	68 c5 0c 10 f0       	push   $0xf0100cc5
f0100d01:	e8 3e fe 02 00       	call   f0130b44 <vprintfmt>
f0100d06:	83 c4 10             	add    $0x10,%esp
	return cnt;
f0100d09:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f0100d0c:	c9                   	leave  
f0100d0d:	c3                   	ret    

f0100d0e <cprintf>:

int
cprintf(const char *fmt, ...)
{
f0100d0e:	55                   	push   %ebp
f0100d0f:	89 e5                	mov    %esp,%ebp
f0100d11:	83 ec 18             	sub    $0x18,%esp
	va_list ap;
	int cnt;

	va_start(ap, fmt);
f0100d14:	8d 45 0c             	lea    0xc(%ebp),%eax
f0100d17:	89 45 f4             	mov    %eax,-0xc(%ebp)
	cnt = vcprintf(fmt, ap);
f0100d1a:	8b 45 08             	mov    0x8(%ebp),%eax
f0100d1d:	83 ec 08             	sub    $0x8,%esp
f0100d20:	ff 75 f4             	pushl  -0xc(%ebp)
f0100d23:	50                   	push   %eax
f0100d24:	e8 bc ff ff ff       	call   f0100ce5 <vcprintf>
f0100d29:	83 c4 10             	add    $0x10,%esp
f0100d2c:	89 45 f0             	mov    %eax,-0x10(%ebp)
	va_end(ap);

	return cnt;
f0100d2f:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
f0100d32:	c9                   	leave  
f0100d33:	c3                   	ret    

f0100d34 <run_command_prompt>:

//TODO: [PROJECT MS1] [COMMAND PROMPT] auto-complete

//invoke the command prompt
void run_command_prompt()
{
f0100d34:	55                   	push   %ebp
f0100d35:	89 e5                	mov    %esp,%ebp
f0100d37:	81 ec 08 04 00 00    	sub    $0x408,%esp
	char command_line[1024];

	while (1==1)
	{
		//get command line
		readline("FOS> ", command_line);
f0100d3d:	83 ec 08             	sub    $0x8,%esp
f0100d40:	8d 85 f8 fb ff ff    	lea    -0x408(%ebp),%eax
f0100d46:	50                   	push   %eax
f0100d47:	68 26 36 13 f0       	push   $0xf0133626
f0100d4c:	e8 9b 02 03 00       	call   f0130fec <readline>
f0100d51:	83 c4 10             	add    $0x10,%esp

		//parse and execute the command
		if (command_line != NULL)
			if (execute_command(command_line) < 0)
f0100d54:	83 ec 0c             	sub    $0xc,%esp
f0100d57:	8d 85 f8 fb ff ff    	lea    -0x408(%ebp),%eax
f0100d5d:	50                   	push   %eax
f0100d5e:	e8 0d 00 00 00       	call   f0100d70 <execute_command>
f0100d63:	83 c4 10             	add    $0x10,%esp
f0100d66:	85 c0                	test   %eax,%eax
f0100d68:	78 02                	js     f0100d6c <run_command_prompt+0x38>
				break;
	}
f0100d6a:	eb d1                	jmp    f0100d3d <run_command_prompt+0x9>
		readline("FOS> ", command_line);

		//parse and execute the command
		if (command_line != NULL)
			if (execute_command(command_line) < 0)
				break;
f0100d6c:	90                   	nop
	}
}
f0100d6d:	90                   	nop
f0100d6e:	c9                   	leave  
f0100d6f:	c3                   	ret    

f0100d70 <execute_command>:
#define WHITESPACE "\t\r\n "

//Function to parse any command and execute it
//(simply by calling its corresponding function)
int execute_command(char *command_string)
{
f0100d70:	55                   	push   %ebp
f0100d71:	89 e5                	mov    %esp,%ebp
f0100d73:	81 ec a8 00 00 00    	sub    $0xa8,%esp
	int number_of_arguments;
	//allocate array of char * of size MAX_ARGUMENTS = 16 found in string.h
	char *arguments[MAX_ARGUMENTS];
	char *auto_fun[MAX_ARGUMENTS];

	strsplit(command_string, WHITESPACE, arguments, &number_of_arguments) ;
f0100d79:	8d 45 e0             	lea    -0x20(%ebp),%eax
f0100d7c:	50                   	push   %eax
f0100d7d:	8d 45 a0             	lea    -0x60(%ebp),%eax
f0100d80:	50                   	push   %eax
f0100d81:	68 2c 36 13 f0       	push   $0xf013362c
f0100d86:	ff 75 08             	pushl  0x8(%ebp)
f0100d89:	e8 98 0a 03 00       	call   f0131826 <strsplit>
f0100d8e:	83 c4 10             	add    $0x10,%esp
	if (number_of_arguments == 0)
f0100d91:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0100d94:	85 c0                	test   %eax,%eax
f0100d96:	75 0a                	jne    f0100da2 <execute_command+0x32>
		return 0;
f0100d98:	b8 00 00 00 00       	mov    $0x0,%eax
f0100d9d:	e9 37 01 00 00       	jmp    f0100ed9 <execute_command+0x169>

	// Lookup in the commands array and execute the command
	int command_found = 0;
f0100da2:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	int i ;
	int count = 0;
f0100da9:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
	for (i = 0; i < NUM_OF_COMMANDS; i++)
f0100db0:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f0100db7:	e9 8c 00 00 00       	jmp    f0100e48 <execute_command+0xd8>
	{
		if (strcmp(arguments[0], commands[i].name) == 0)
f0100dbc:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0100dbf:	89 d0                	mov    %edx,%eax
f0100dc1:	01 c0                	add    %eax,%eax
f0100dc3:	01 d0                	add    %edx,%eax
f0100dc5:	c1 e0 02             	shl    $0x2,%eax
f0100dc8:	05 40 25 19 f0       	add    $0xf0192540,%eax
f0100dcd:	8b 10                	mov    (%eax),%edx
f0100dcf:	8b 45 a0             	mov    -0x60(%ebp),%eax
f0100dd2:	83 ec 08             	sub    $0x8,%esp
f0100dd5:	52                   	push   %edx
f0100dd6:	50                   	push   %eax
f0100dd7:	e8 22 05 03 00       	call   f01312fe <strcmp>
f0100ddc:	83 c4 10             	add    $0x10,%esp
f0100ddf:	85 c0                	test   %eax,%eax
f0100de1:	75 09                	jne    f0100dec <execute_command+0x7c>
		{
			command_found = 1;
f0100de3:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
			break;
f0100dea:	eb 6c                	jmp    f0100e58 <execute_command+0xe8>
		}
		else if (strncmp(arguments[0], commands[i].name,strlen(arguments[0])) == 0)
f0100dec:	8b 45 a0             	mov    -0x60(%ebp),%eax
f0100def:	83 ec 0c             	sub    $0xc,%esp
f0100df2:	50                   	push   %eax
f0100df3:	e8 fa 03 03 00       	call   f01311f2 <strlen>
f0100df8:	83 c4 10             	add    $0x10,%esp
f0100dfb:	89 c1                	mov    %eax,%ecx
f0100dfd:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0100e00:	89 d0                	mov    %edx,%eax
f0100e02:	01 c0                	add    %eax,%eax
f0100e04:	01 d0                	add    %edx,%eax
f0100e06:	c1 e0 02             	shl    $0x2,%eax
f0100e09:	05 40 25 19 f0       	add    $0xf0192540,%eax
f0100e0e:	8b 10                	mov    (%eax),%edx
f0100e10:	8b 45 a0             	mov    -0x60(%ebp),%eax
f0100e13:	83 ec 04             	sub    $0x4,%esp
f0100e16:	51                   	push   %ecx
f0100e17:	52                   	push   %edx
f0100e18:	50                   	push   %eax
f0100e19:	e8 18 05 03 00       	call   f0131336 <strncmp>
f0100e1e:	83 c4 10             	add    $0x10,%esp
f0100e21:	85 c0                	test   %eax,%eax
f0100e23:	75 20                	jne    f0100e45 <execute_command+0xd5>
		{
			auto_fun[count] = commands[i].name;
f0100e25:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0100e28:	89 d0                	mov    %edx,%eax
f0100e2a:	01 c0                	add    %eax,%eax
f0100e2c:	01 d0                	add    %edx,%eax
f0100e2e:	c1 e0 02             	shl    $0x2,%eax
f0100e31:	05 40 25 19 f0       	add    $0xf0192540,%eax
f0100e36:	8b 10                	mov    (%eax),%edx
f0100e38:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0100e3b:	89 94 85 60 ff ff ff 	mov    %edx,-0xa0(%ebp,%eax,4)
			count++;
f0100e42:	ff 45 ec             	incl   -0x14(%ebp)

	// Lookup in the commands array and execute the command
	int command_found = 0;
	int i ;
	int count = 0;
	for (i = 0; i < NUM_OF_COMMANDS; i++)
f0100e45:	ff 45 f0             	incl   -0x10(%ebp)
f0100e48:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0100e4b:	a1 ac 28 19 f0       	mov    0xf01928ac,%eax
f0100e50:	39 c2                	cmp    %eax,%edx
f0100e52:	0f 82 64 ff ff ff    	jb     f0100dbc <execute_command+0x4c>
			auto_fun[count] = commands[i].name;
			count++;
		}
	}

	if(command_found)
f0100e58:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0100e5c:	74 2b                	je     f0100e89 <execute_command+0x119>
	{
		int return_value;
		return_value = commands[i].function_to_execute(number_of_arguments, arguments);
f0100e5e:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0100e61:	89 d0                	mov    %edx,%eax
f0100e63:	01 c0                	add    %eax,%eax
f0100e65:	01 d0                	add    %edx,%eax
f0100e67:	c1 e0 02             	shl    $0x2,%eax
f0100e6a:	05 48 25 19 f0       	add    $0xf0192548,%eax
f0100e6f:	8b 00                	mov    (%eax),%eax
f0100e71:	8b 55 e0             	mov    -0x20(%ebp),%edx
f0100e74:	83 ec 08             	sub    $0x8,%esp
f0100e77:	8d 4d a0             	lea    -0x60(%ebp),%ecx
f0100e7a:	51                   	push   %ecx
f0100e7b:	52                   	push   %edx
f0100e7c:	ff d0                	call   *%eax
f0100e7e:	83 c4 10             	add    $0x10,%esp
f0100e81:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		return return_value;
f0100e84:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0100e87:	eb 50                	jmp    f0100ed9 <execute_command+0x169>
	}
	else if (count == 0)
f0100e89:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0100e8d:	75 16                	jne    f0100ea5 <execute_command+0x135>
	{
		//if not found, then it's unknown command
		cprintf("Unknown command '%s'\n", arguments[0]);
f0100e8f:	8b 45 a0             	mov    -0x60(%ebp),%eax
f0100e92:	83 ec 08             	sub    $0x8,%esp
f0100e95:	50                   	push   %eax
f0100e96:	68 31 36 13 f0       	push   $0xf0133631
f0100e9b:	e8 6e fe ff ff       	call   f0100d0e <cprintf>
f0100ea0:	83 c4 10             	add    $0x10,%esp
f0100ea3:	eb 2f                	jmp    f0100ed4 <execute_command+0x164>
	}
	else
	{
		int loop;
		for(loop = 0; loop < count; loop++)
f0100ea5:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
f0100eac:	eb 1e                	jmp    f0100ecc <execute_command+0x15c>
			cprintf("%s\n", auto_fun[loop]);
f0100eae:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0100eb1:	8b 84 85 60 ff ff ff 	mov    -0xa0(%ebp,%eax,4),%eax
f0100eb8:	83 ec 08             	sub    $0x8,%esp
f0100ebb:	50                   	push   %eax
f0100ebc:	68 47 36 13 f0       	push   $0xf0133647
f0100ec1:	e8 48 fe ff ff       	call   f0100d0e <cprintf>
f0100ec6:	83 c4 10             	add    $0x10,%esp
		cprintf("Unknown command '%s'\n", arguments[0]);
	}
	else
	{
		int loop;
		for(loop = 0; loop < count; loop++)
f0100ec9:	ff 45 e8             	incl   -0x18(%ebp)
f0100ecc:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0100ecf:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f0100ed2:	7c da                	jl     f0100eae <execute_command+0x13e>
			cprintf("%s\n", auto_fun[loop]);
	}
	return 0;
f0100ed4:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0100ed9:	c9                   	leave  
f0100eda:	c3                   	ret    

f0100edb <setKHeapPlacementStrategyCONTALLOC>:
#define KHP_PLACE_FIRSTFIT 	0x1
#define KHP_PLACE_BESTFIT 	0x2
#define KHP_PLACE_NEXTFIT 	0x3
#define KHP_PLACE_WORSTFIT 	0x4

static inline void setKHeapPlacementStrategyCONTALLOC(){_KHeapPlacementStrategy = KHP_PLACE_CONTALLOC;}
f0100edb:	55                   	push   %ebp
f0100edc:	89 e5                	mov    %esp,%ebp
f0100ede:	c7 05 1c 26 78 f0 00 	movl   $0x0,0xf078261c
f0100ee5:	00 00 00 
f0100ee8:	90                   	nop
f0100ee9:	5d                   	pop    %ebp
f0100eea:	c3                   	ret    

f0100eeb <setKHeapPlacementStrategyFIRSTFIT>:
static inline void setKHeapPlacementStrategyFIRSTFIT(){_KHeapPlacementStrategy = KHP_PLACE_FIRSTFIT;}
f0100eeb:	55                   	push   %ebp
f0100eec:	89 e5                	mov    %esp,%ebp
f0100eee:	c7 05 1c 26 78 f0 01 	movl   $0x1,0xf078261c
f0100ef5:	00 00 00 
f0100ef8:	90                   	nop
f0100ef9:	5d                   	pop    %ebp
f0100efa:	c3                   	ret    

f0100efb <setKHeapPlacementStrategyBESTFIT>:
static inline void setKHeapPlacementStrategyBESTFIT(){_KHeapPlacementStrategy = KHP_PLACE_BESTFIT;}
f0100efb:	55                   	push   %ebp
f0100efc:	89 e5                	mov    %esp,%ebp
f0100efe:	c7 05 1c 26 78 f0 02 	movl   $0x2,0xf078261c
f0100f05:	00 00 00 
f0100f08:	90                   	nop
f0100f09:	5d                   	pop    %ebp
f0100f0a:	c3                   	ret    

f0100f0b <setKHeapPlacementStrategyNEXTFIT>:
static inline void setKHeapPlacementStrategyNEXTFIT(){_KHeapPlacementStrategy = KHP_PLACE_NEXTFIT;}
f0100f0b:	55                   	push   %ebp
f0100f0c:	89 e5                	mov    %esp,%ebp
f0100f0e:	c7 05 1c 26 78 f0 03 	movl   $0x3,0xf078261c
f0100f15:	00 00 00 
f0100f18:	90                   	nop
f0100f19:	5d                   	pop    %ebp
f0100f1a:	c3                   	ret    

f0100f1b <setKHeapPlacementStrategyWORSTFIT>:
static inline void setKHeapPlacementStrategyWORSTFIT(){_KHeapPlacementStrategy = KHP_PLACE_WORSTFIT;}
f0100f1b:	55                   	push   %ebp
f0100f1c:	89 e5                	mov    %esp,%ebp
f0100f1e:	c7 05 1c 26 78 f0 04 	movl   $0x4,0xf078261c
f0100f25:	00 00 00 
f0100f28:	90                   	nop
f0100f29:	5d                   	pop    %ebp
f0100f2a:	c3                   	ret    

f0100f2b <isKHeapPlacementStrategyCONTALLOC>:

static inline uint8 isKHeapPlacementStrategyCONTALLOC(){if(_KHeapPlacementStrategy == KHP_PLACE_CONTALLOC) return 1; return 0;}
f0100f2b:	55                   	push   %ebp
f0100f2c:	89 e5                	mov    %esp,%ebp
f0100f2e:	a1 1c 26 78 f0       	mov    0xf078261c,%eax
f0100f33:	85 c0                	test   %eax,%eax
f0100f35:	75 04                	jne    f0100f3b <isKHeapPlacementStrategyCONTALLOC+0x10>
f0100f37:	b0 01                	mov    $0x1,%al
f0100f39:	eb 02                	jmp    f0100f3d <isKHeapPlacementStrategyCONTALLOC+0x12>
f0100f3b:	b0 00                	mov    $0x0,%al
f0100f3d:	5d                   	pop    %ebp
f0100f3e:	c3                   	ret    

f0100f3f <isKHeapPlacementStrategyFIRSTFIT>:
static inline uint8 isKHeapPlacementStrategyFIRSTFIT(){if(_KHeapPlacementStrategy == KHP_PLACE_FIRSTFIT) return 1; return 0;}
f0100f3f:	55                   	push   %ebp
f0100f40:	89 e5                	mov    %esp,%ebp
f0100f42:	a1 1c 26 78 f0       	mov    0xf078261c,%eax
f0100f47:	83 f8 01             	cmp    $0x1,%eax
f0100f4a:	75 04                	jne    f0100f50 <isKHeapPlacementStrategyFIRSTFIT+0x11>
f0100f4c:	b0 01                	mov    $0x1,%al
f0100f4e:	eb 02                	jmp    f0100f52 <isKHeapPlacementStrategyFIRSTFIT+0x13>
f0100f50:	b0 00                	mov    $0x0,%al
f0100f52:	5d                   	pop    %ebp
f0100f53:	c3                   	ret    

f0100f54 <isKHeapPlacementStrategyBESTFIT>:
static inline uint8 isKHeapPlacementStrategyBESTFIT(){if(_KHeapPlacementStrategy == KHP_PLACE_BESTFIT) return 1; return 0;}
f0100f54:	55                   	push   %ebp
f0100f55:	89 e5                	mov    %esp,%ebp
f0100f57:	a1 1c 26 78 f0       	mov    0xf078261c,%eax
f0100f5c:	83 f8 02             	cmp    $0x2,%eax
f0100f5f:	75 04                	jne    f0100f65 <isKHeapPlacementStrategyBESTFIT+0x11>
f0100f61:	b0 01                	mov    $0x1,%al
f0100f63:	eb 02                	jmp    f0100f67 <isKHeapPlacementStrategyBESTFIT+0x13>
f0100f65:	b0 00                	mov    $0x0,%al
f0100f67:	5d                   	pop    %ebp
f0100f68:	c3                   	ret    

f0100f69 <isKHeapPlacementStrategyNEXTFIT>:
static inline uint8 isKHeapPlacementStrategyNEXTFIT(){if(_KHeapPlacementStrategy == KHP_PLACE_NEXTFIT) return 1; return 0;}
f0100f69:	55                   	push   %ebp
f0100f6a:	89 e5                	mov    %esp,%ebp
f0100f6c:	a1 1c 26 78 f0       	mov    0xf078261c,%eax
f0100f71:	83 f8 03             	cmp    $0x3,%eax
f0100f74:	75 04                	jne    f0100f7a <isKHeapPlacementStrategyNEXTFIT+0x11>
f0100f76:	b0 01                	mov    $0x1,%al
f0100f78:	eb 02                	jmp    f0100f7c <isKHeapPlacementStrategyNEXTFIT+0x13>
f0100f7a:	b0 00                	mov    $0x0,%al
f0100f7c:	5d                   	pop    %ebp
f0100f7d:	c3                   	ret    

f0100f7e <isKHeapPlacementStrategyWORSTFIT>:
static inline uint8 isKHeapPlacementStrategyWORSTFIT(){if(_KHeapPlacementStrategy == KHP_PLACE_WORSTFIT) return 1; return 0;}
f0100f7e:	55                   	push   %ebp
f0100f7f:	89 e5                	mov    %esp,%ebp
f0100f81:	a1 1c 26 78 f0       	mov    0xf078261c,%eax
f0100f86:	83 f8 04             	cmp    $0x4,%eax
f0100f89:	75 04                	jne    f0100f8f <isKHeapPlacementStrategyWORSTFIT+0x11>
f0100f8b:	b0 01                	mov    $0x1,%al
f0100f8d:	eb 02                	jmp    f0100f91 <isKHeapPlacementStrategyWORSTFIT+0x13>
f0100f8f:	b0 00                	mov    $0x0,%al
f0100f91:	5d                   	pop    %ebp
f0100f92:	c3                   	ret    

f0100f93 <setUHeapPlacementStrategyFIRSTFIT>:

//***********************************
/*2015*/ //USER HEAP STRATEGIES
uint32 _UHeapPlacementStrategy;

static inline void setUHeapPlacementStrategyFIRSTFIT(){_UHeapPlacementStrategy = UHP_PLACE_FIRSTFIT;}
f0100f93:	55                   	push   %ebp
f0100f94:	89 e5                	mov    %esp,%ebp
f0100f96:	c7 05 f0 25 78 f0 01 	movl   $0x1,0xf07825f0
f0100f9d:	00 00 00 
f0100fa0:	90                   	nop
f0100fa1:	5d                   	pop    %ebp
f0100fa2:	c3                   	ret    

f0100fa3 <setUHeapPlacementStrategyBESTFIT>:
static inline void setUHeapPlacementStrategyBESTFIT(){_UHeapPlacementStrategy = UHP_PLACE_BESTFIT;}
f0100fa3:	55                   	push   %ebp
f0100fa4:	89 e5                	mov    %esp,%ebp
f0100fa6:	c7 05 f0 25 78 f0 02 	movl   $0x2,0xf07825f0
f0100fad:	00 00 00 
f0100fb0:	90                   	nop
f0100fb1:	5d                   	pop    %ebp
f0100fb2:	c3                   	ret    

f0100fb3 <setUHeapPlacementStrategyNEXTFIT>:
static inline void setUHeapPlacementStrategyNEXTFIT(){_UHeapPlacementStrategy = UHP_PLACE_NEXTFIT;}
f0100fb3:	55                   	push   %ebp
f0100fb4:	89 e5                	mov    %esp,%ebp
f0100fb6:	c7 05 f0 25 78 f0 03 	movl   $0x3,0xf07825f0
f0100fbd:	00 00 00 
f0100fc0:	90                   	nop
f0100fc1:	5d                   	pop    %ebp
f0100fc2:	c3                   	ret    

f0100fc3 <setUHeapPlacementStrategyWORSTFIT>:
static inline void setUHeapPlacementStrategyWORSTFIT(){_UHeapPlacementStrategy = UHP_PLACE_WORSTFIT;}
f0100fc3:	55                   	push   %ebp
f0100fc4:	89 e5                	mov    %esp,%ebp
f0100fc6:	c7 05 f0 25 78 f0 04 	movl   $0x4,0xf07825f0
f0100fcd:	00 00 00 
f0100fd0:	90                   	nop
f0100fd1:	5d                   	pop    %ebp
f0100fd2:	c3                   	ret    

f0100fd3 <isUHeapPlacementStrategyFIRSTFIT>:

static inline uint8 isUHeapPlacementStrategyFIRSTFIT(){if(_UHeapPlacementStrategy == UHP_PLACE_FIRSTFIT) return 1; return 0;}
f0100fd3:	55                   	push   %ebp
f0100fd4:	89 e5                	mov    %esp,%ebp
f0100fd6:	a1 f0 25 78 f0       	mov    0xf07825f0,%eax
f0100fdb:	83 f8 01             	cmp    $0x1,%eax
f0100fde:	75 04                	jne    f0100fe4 <isUHeapPlacementStrategyFIRSTFIT+0x11>
f0100fe0:	b0 01                	mov    $0x1,%al
f0100fe2:	eb 02                	jmp    f0100fe6 <isUHeapPlacementStrategyFIRSTFIT+0x13>
f0100fe4:	b0 00                	mov    $0x0,%al
f0100fe6:	5d                   	pop    %ebp
f0100fe7:	c3                   	ret    

f0100fe8 <isUHeapPlacementStrategyBESTFIT>:
static inline uint8 isUHeapPlacementStrategyBESTFIT(){if(_UHeapPlacementStrategy == UHP_PLACE_BESTFIT) return 1; return 0;}
f0100fe8:	55                   	push   %ebp
f0100fe9:	89 e5                	mov    %esp,%ebp
f0100feb:	a1 f0 25 78 f0       	mov    0xf07825f0,%eax
f0100ff0:	83 f8 02             	cmp    $0x2,%eax
f0100ff3:	75 04                	jne    f0100ff9 <isUHeapPlacementStrategyBESTFIT+0x11>
f0100ff5:	b0 01                	mov    $0x1,%al
f0100ff7:	eb 02                	jmp    f0100ffb <isUHeapPlacementStrategyBESTFIT+0x13>
f0100ff9:	b0 00                	mov    $0x0,%al
f0100ffb:	5d                   	pop    %ebp
f0100ffc:	c3                   	ret    

f0100ffd <isUHeapPlacementStrategyNEXTFIT>:
static inline uint8 isUHeapPlacementStrategyNEXTFIT(){if(_UHeapPlacementStrategy == UHP_PLACE_NEXTFIT) return 1; return 0;}
f0100ffd:	55                   	push   %ebp
f0100ffe:	89 e5                	mov    %esp,%ebp
f0101000:	a1 f0 25 78 f0       	mov    0xf07825f0,%eax
f0101005:	83 f8 03             	cmp    $0x3,%eax
f0101008:	75 04                	jne    f010100e <isUHeapPlacementStrategyNEXTFIT+0x11>
f010100a:	b0 01                	mov    $0x1,%al
f010100c:	eb 02                	jmp    f0101010 <isUHeapPlacementStrategyNEXTFIT+0x13>
f010100e:	b0 00                	mov    $0x0,%al
f0101010:	5d                   	pop    %ebp
f0101011:	c3                   	ret    

f0101012 <isUHeapPlacementStrategyWORSTFIT>:
static inline uint8 isUHeapPlacementStrategyWORSTFIT(){if(_UHeapPlacementStrategy == UHP_PLACE_WORSTFIT) return 1; return 0;}
f0101012:	55                   	push   %ebp
f0101013:	89 e5                	mov    %esp,%ebp
f0101015:	a1 f0 25 78 f0       	mov    0xf07825f0,%eax
f010101a:	83 f8 04             	cmp    $0x4,%eax
f010101d:	75 04                	jne    f0101023 <isUHeapPlacementStrategyWORSTFIT+0x11>
f010101f:	b0 01                	mov    $0x1,%al
f0101021:	eb 02                	jmp    f0101025 <isUHeapPlacementStrategyWORSTFIT+0x13>
f0101023:	b0 00                	mov    $0x0,%al
f0101025:	5d                   	pop    %ebp
f0101026:	c3                   	ret    

f0101027 <to_frame_info>:
{
	return to_frame_number(ptr_frame_info) << PGSHIFT;
}

static inline struct FrameInfo* to_frame_info(uint32 physical_address)
{
f0101027:	55                   	push   %ebp
f0101028:	89 e5                	mov    %esp,%ebp
f010102a:	83 ec 08             	sub    $0x8,%esp
	if (PPN(physical_address) >= number_of_frames)
f010102d:	8b 45 08             	mov    0x8(%ebp),%eax
f0101030:	c1 e8 0c             	shr    $0xc,%eax
f0101033:	89 c2                	mov    %eax,%edx
f0101035:	a1 d0 25 78 f0       	mov    0xf07825d0,%eax
f010103a:	39 c2                	cmp    %eax,%edx
f010103c:	72 14                	jb     f0101052 <to_frame_info+0x2b>
		panic("to_frame_info called with invalid pa");
f010103e:	83 ec 04             	sub    $0x4,%esp
f0101041:	68 4c 36 13 f0       	push   $0xf013364c
f0101046:	6a 55                	push   $0x55
f0101048:	68 74 36 13 f0       	push   $0xf0133674
f010104d:	e8 b3 f1 ff ff       	call   f0100205 <_panic>
	return &frames_info[PPN(physical_address)];
f0101052:	8b 15 14 26 78 f0    	mov    0xf0782614,%edx
f0101058:	8b 45 08             	mov    0x8(%ebp),%eax
f010105b:	c1 e8 0c             	shr    $0xc,%eax
f010105e:	89 c1                	mov    %eax,%ecx
f0101060:	89 c8                	mov    %ecx,%eax
f0101062:	01 c0                	add    %eax,%eax
f0101064:	01 c8                	add    %ecx,%eax
f0101066:	c1 e0 03             	shl    $0x3,%eax
f0101069:	01 d0                	add    %edx,%eax
}
f010106b:	c9                   	leave  
f010106c:	c3                   	ret    

f010106d <command_help>:

/***** Implementations of basic kernel command prompt commands *****/

//print name and description of each command
int command_help(int number_of_arguments, char **arguments)
{
f010106d:	55                   	push   %ebp
f010106e:	89 e5                	mov    %esp,%ebp
f0101070:	53                   	push   %ebx
f0101071:	83 ec 14             	sub    $0x14,%esp
	int i;
	for (i = 0; i < NUM_OF_COMMANDS; i++)
f0101074:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f010107b:	eb 3b                	jmp    f01010b8 <command_help+0x4b>
		cprintf("%s - %s\n", commands[i].name, commands[i].description);
f010107d:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0101080:	89 d0                	mov    %edx,%eax
f0101082:	01 c0                	add    %eax,%eax
f0101084:	01 d0                	add    %edx,%eax
f0101086:	c1 e0 02             	shl    $0x2,%eax
f0101089:	05 44 25 19 f0       	add    $0xf0192544,%eax
f010108e:	8b 10                	mov    (%eax),%edx
f0101090:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0101093:	89 c8                	mov    %ecx,%eax
f0101095:	01 c0                	add    %eax,%eax
f0101097:	01 c8                	add    %ecx,%eax
f0101099:	c1 e0 02             	shl    $0x2,%eax
f010109c:	05 40 25 19 f0       	add    $0xf0192540,%eax
f01010a1:	8b 00                	mov    (%eax),%eax
f01010a3:	83 ec 04             	sub    $0x4,%esp
f01010a6:	52                   	push   %edx
f01010a7:	50                   	push   %eax
f01010a8:	68 ee 44 13 f0       	push   $0xf01344ee
f01010ad:	e8 5c fc ff ff       	call   f0100d0e <cprintf>
f01010b2:	83 c4 10             	add    $0x10,%esp

//print name and description of each command
int command_help(int number_of_arguments, char **arguments)
{
	int i;
	for (i = 0; i < NUM_OF_COMMANDS; i++)
f01010b5:	ff 45 f4             	incl   -0xc(%ebp)
f01010b8:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01010bb:	a1 ac 28 19 f0       	mov    0xf01928ac,%eax
f01010c0:	39 c2                	cmp    %eax,%edx
f01010c2:	72 b9                	jb     f010107d <command_help+0x10>
		cprintf("%s - %s\n", commands[i].name, commands[i].description);

	cprintf("-------------------\n");
f01010c4:	83 ec 0c             	sub    $0xc,%esp
f01010c7:	68 f7 44 13 f0       	push   $0xf01344f7
f01010cc:	e8 3d fc ff ff       	call   f0100d0e <cprintf>
f01010d1:	83 c4 10             	add    $0x10,%esp

	for (i = 0; i < NUM_USER_PROGS; i++)
f01010d4:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01010db:	eb 42                	jmp    f010111f <command_help+0xb2>
		cprintf("run %s - %s [User Program]\n", ptr_UserPrograms[i].name, ptr_UserPrograms[i].desc);
f01010dd:	8b 0d 14 2d 19 f0    	mov    0xf0192d14,%ecx
f01010e3:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01010e6:	89 d0                	mov    %edx,%eax
f01010e8:	01 c0                	add    %eax,%eax
f01010ea:	01 d0                	add    %edx,%eax
f01010ec:	c1 e0 02             	shl    $0x2,%eax
f01010ef:	01 c8                	add    %ecx,%eax
f01010f1:	8b 50 04             	mov    0x4(%eax),%edx
f01010f4:	8b 1d 14 2d 19 f0    	mov    0xf0192d14,%ebx
f01010fa:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f01010fd:	89 c8                	mov    %ecx,%eax
f01010ff:	01 c0                	add    %eax,%eax
f0101101:	01 c8                	add    %ecx,%eax
f0101103:	c1 e0 02             	shl    $0x2,%eax
f0101106:	01 d8                	add    %ebx,%eax
f0101108:	8b 00                	mov    (%eax),%eax
f010110a:	83 ec 04             	sub    $0x4,%esp
f010110d:	52                   	push   %edx
f010110e:	50                   	push   %eax
f010110f:	68 0c 45 13 f0       	push   $0xf013450c
f0101114:	e8 f5 fb ff ff       	call   f0100d0e <cprintf>
f0101119:	83 c4 10             	add    $0x10,%esp
	for (i = 0; i < NUM_OF_COMMANDS; i++)
		cprintf("%s - %s\n", commands[i].name, commands[i].description);

	cprintf("-------------------\n");

	for (i = 0; i < NUM_USER_PROGS; i++)
f010111c:	ff 45 f4             	incl   -0xc(%ebp)
f010111f:	a1 18 2d 19 f0       	mov    0xf0192d18,%eax
f0101124:	39 45 f4             	cmp    %eax,-0xc(%ebp)
f0101127:	7c b4                	jl     f01010dd <command_help+0x70>
		cprintf("run %s - %s [User Program]\n", ptr_UserPrograms[i].name, ptr_UserPrograms[i].desc);
	return 0;
f0101129:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010112e:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f0101131:	c9                   	leave  
f0101132:	c3                   	ret    

f0101133 <command_kernel_info>:

//print information about kernel addresses and kernel size
int command_kernel_info(int number_of_arguments, char **arguments )
{
f0101133:	55                   	push   %ebp
f0101134:	89 e5                	mov    %esp,%ebp
f0101136:	83 ec 08             	sub    $0x8,%esp
	extern char start_of_kernel[], end_of_kernel_code_section[], start_of_uninitialized_data_section[], end_of_kernel[];

	cprintf("Special kernel symbols:\n");
f0101139:	83 ec 0c             	sub    $0xc,%esp
f010113c:	68 28 45 13 f0       	push   $0xf0134528
f0101141:	e8 c8 fb ff ff       	call   f0100d0e <cprintf>
f0101146:	83 c4 10             	add    $0x10,%esp
	cprintf("  Start Address of the kernel 			%08x (virt)  %08x (phys)\n", start_of_kernel, start_of_kernel - KERNEL_BASE);
f0101149:	b8 0c 00 10 00       	mov    $0x10000c,%eax
f010114e:	83 ec 04             	sub    $0x4,%esp
f0101151:	50                   	push   %eax
f0101152:	68 0c 00 10 f0       	push   $0xf010000c
f0101157:	68 44 45 13 f0       	push   $0xf0134544
f010115c:	e8 ad fb ff ff       	call   f0100d0e <cprintf>
f0101161:	83 c4 10             	add    $0x10,%esp
	cprintf("  End address of kernel code  			%08x (virt)  %08x (phys)\n", end_of_kernel_code_section, end_of_kernel_code_section - KERNEL_BASE);
f0101164:	b8 79 34 13 00       	mov    $0x133479,%eax
f0101169:	83 ec 04             	sub    $0x4,%esp
f010116c:	50                   	push   %eax
f010116d:	68 79 34 13 f0       	push   $0xf0133479
f0101172:	68 80 45 13 f0       	push   $0xf0134580
f0101177:	e8 92 fb ff ff       	call   f0100d0e <cprintf>
f010117c:	83 c4 10             	add    $0x10,%esp
	cprintf("  Start addr. of uninitialized data section 	%08x (virt)  %08x (phys)\n", start_of_uninitialized_data_section, start_of_uninitialized_data_section - KERNEL_BASE);
f010117f:	b8 60 1a 78 00       	mov    $0x781a60,%eax
f0101184:	83 ec 04             	sub    $0x4,%esp
f0101187:	50                   	push   %eax
f0101188:	68 60 1a 78 f0       	push   $0xf0781a60
f010118d:	68 bc 45 13 f0       	push   $0xf01345bc
f0101192:	e8 77 fb ff ff       	call   f0100d0e <cprintf>
f0101197:	83 c4 10             	add    $0x10,%esp
	cprintf("  End address of the kernel   			%08x (virt)  %08x (phys)\n", end_of_kernel, end_of_kernel - KERNEL_BASE);
f010119a:	b8 7c 27 78 00       	mov    $0x78277c,%eax
f010119f:	83 ec 04             	sub    $0x4,%esp
f01011a2:	50                   	push   %eax
f01011a3:	68 7c 27 78 f0       	push   $0xf078277c
f01011a8:	68 04 46 13 f0       	push   $0xf0134604
f01011ad:	e8 5c fb ff ff       	call   f0100d0e <cprintf>
f01011b2:	83 c4 10             	add    $0x10,%esp
	cprintf("Kernel executable memory footprint: %d KB\n",
			(end_of_kernel-start_of_kernel+1023)/1024);
f01011b5:	b8 7c 27 78 f0       	mov    $0xf078277c,%eax
f01011ba:	8d 90 ff 03 00 00    	lea    0x3ff(%eax),%edx
f01011c0:	b8 0c 00 10 f0       	mov    $0xf010000c,%eax
f01011c5:	29 c2                	sub    %eax,%edx
f01011c7:	89 d0                	mov    %edx,%eax
	cprintf("Special kernel symbols:\n");
	cprintf("  Start Address of the kernel 			%08x (virt)  %08x (phys)\n", start_of_kernel, start_of_kernel - KERNEL_BASE);
	cprintf("  End address of kernel code  			%08x (virt)  %08x (phys)\n", end_of_kernel_code_section, end_of_kernel_code_section - KERNEL_BASE);
	cprintf("  Start addr. of uninitialized data section 	%08x (virt)  %08x (phys)\n", start_of_uninitialized_data_section, start_of_uninitialized_data_section - KERNEL_BASE);
	cprintf("  End address of the kernel   			%08x (virt)  %08x (phys)\n", end_of_kernel, end_of_kernel - KERNEL_BASE);
	cprintf("Kernel executable memory footprint: %d KB\n",
f01011c9:	85 c0                	test   %eax,%eax
f01011cb:	79 05                	jns    f01011d2 <command_kernel_info+0x9f>
f01011cd:	05 ff 03 00 00       	add    $0x3ff,%eax
f01011d2:	c1 f8 0a             	sar    $0xa,%eax
f01011d5:	83 ec 08             	sub    $0x8,%esp
f01011d8:	50                   	push   %eax
f01011d9:	68 40 46 13 f0       	push   $0xf0134640
f01011de:	e8 2b fb ff ff       	call   f0100d0e <cprintf>
f01011e3:	83 c4 10             	add    $0x10,%esp
			(end_of_kernel-start_of_kernel+1023)/1024);
	return 0;
f01011e6:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01011eb:	c9                   	leave  
f01011ec:	c3                   	ret    

f01011ed <command_kernel_base_info>:

//===========================================================================
//Lab3.Examples
//=============
int command_kernel_base_info(int number_of_arguments, char **arguments)
{
f01011ed:	55                   	push   %ebp
f01011ee:	89 e5                	mov    %esp,%ebp
f01011f0:	83 ec 08             	sub    $0x8,%esp
	//TODO: LAB3 Example: fill this function. corresponding command name is "ikb"
	//Comment the following line
	panic("Function is not implemented yet!");
f01011f3:	83 ec 04             	sub    $0x4,%esp
f01011f6:	68 6c 46 13 f0       	push   $0xf013466c
f01011fb:	68 b0 00 00 00       	push   $0xb0
f0101200:	68 8d 46 13 f0       	push   $0xf013468d
f0101205:	e8 fb ef ff ff       	call   f0100205 <_panic>

f010120a <command_del_kernel_base>:
	return 0;
}


int command_del_kernel_base(int number_of_arguments, char **arguments)
{
f010120a:	55                   	push   %ebp
f010120b:	89 e5                	mov    %esp,%ebp
f010120d:	83 ec 08             	sub    $0x8,%esp
	//TODO: LAB3 Example: fill this function. corresponding command name is "dkb"
	//Comment the following line
	panic("Function is not implemented yet!");
f0101210:	83 ec 04             	sub    $0x4,%esp
f0101213:	68 6c 46 13 f0       	push   $0xf013466c
f0101218:	68 ba 00 00 00       	push   $0xba
f010121d:	68 8d 46 13 f0       	push   $0xf013468d
f0101222:	e8 de ef ff ff       	call   f0100205 <_panic>

f0101227 <command_share_page>:

	return 0;
}

int command_share_page(int number_of_arguments, char **arguments)
{
f0101227:	55                   	push   %ebp
f0101228:	89 e5                	mov    %esp,%ebp
f010122a:	83 ec 08             	sub    $0x8,%esp
	//TODO: LAB3 Example: fill this function. corresponding command name is "shr"
	//Comment the following line
	panic("Function is not implemented yet!");
f010122d:	83 ec 04             	sub    $0x4,%esp
f0101230:	68 6c 46 13 f0       	push   $0xf013466c
f0101235:	68 c3 00 00 00       	push   $0xc3
f010123a:	68 8d 46 13 f0       	push   $0xf013468d
f010123f:	e8 c1 ef ff ff       	call   f0100205 <_panic>

f0101244 <command_show_mapping>:

//===========================================================================
//Lab4.Hands.On
//=============
int command_show_mapping(int number_of_arguments, char **arguments)
{
f0101244:	55                   	push   %ebp
f0101245:	89 e5                	mov    %esp,%ebp
f0101247:	83 ec 08             	sub    $0x8,%esp
	//TODO: LAB4 Hands-on: fill this function. corresponding command name is "sm"
	//Comment the following line
	panic("Function is not implemented yet!");
f010124a:	83 ec 04             	sub    $0x4,%esp
f010124d:	68 6c 46 13 f0       	push   $0xf013466c
f0101252:	68 cf 00 00 00       	push   $0xcf
f0101257:	68 8d 46 13 f0       	push   $0xf013468d
f010125c:	e8 a4 ef ff ff       	call   f0100205 <_panic>

f0101261 <command_set_permission>:

	return 0 ;
}

int command_set_permission(int number_of_arguments, char **arguments)
{
f0101261:	55                   	push   %ebp
f0101262:	89 e5                	mov    %esp,%ebp
f0101264:	83 ec 08             	sub    $0x8,%esp
	//TODO: LAB4 Hands-on: fill this function. corresponding command name is "sp"
	//Comment the following line
	panic("Function is not implemented yet!");
f0101267:	83 ec 04             	sub    $0x4,%esp
f010126a:	68 6c 46 13 f0       	push   $0xf013466c
f010126f:	68 d8 00 00 00       	push   $0xd8
f0101274:	68 8d 46 13 f0       	push   $0xf013468d
f0101279:	e8 87 ef ff ff       	call   f0100205 <_panic>

f010127e <command_share_range>:

	return 0 ;
}

int command_share_range(int number_of_arguments, char **arguments)
{
f010127e:	55                   	push   %ebp
f010127f:	89 e5                	mov    %esp,%ebp
f0101281:	83 ec 08             	sub    $0x8,%esp
	//TODO: LAB4 Hands-on: fill this function. corresponding command name is "sr"
	//Comment the following line
	panic("Function is not implemented yet!");
f0101284:	83 ec 04             	sub    $0x4,%esp
f0101287:	68 6c 46 13 f0       	push   $0xf013466c
f010128c:	68 e1 00 00 00       	push   $0xe1
f0101291:	68 8d 46 13 f0       	push   $0xf013468d
f0101296:	e8 6a ef ff ff       	call   f0100205 <_panic>

f010129b <command_nr>:
//===========================================================================
//Lab5.Examples
//==============
//[1] Number of references on the given physical address
int command_nr(int number_of_arguments, char **arguments)
{
f010129b:	55                   	push   %ebp
f010129c:	89 e5                	mov    %esp,%ebp
f010129e:	83 ec 08             	sub    $0x8,%esp
	//TODO: LAB5 Example: fill this function. corresponding command name is "nr"
	//Comment the following line
	panic("Function is not implemented yet!");
f01012a1:	83 ec 04             	sub    $0x4,%esp
f01012a4:	68 6c 46 13 f0       	push   $0xf013466c
f01012a9:	68 ee 00 00 00       	push   $0xee
f01012ae:	68 8d 46 13 f0       	push   $0xf013468d
f01012b3:	e8 4d ef ff ff       	call   f0100205 <_panic>

f01012b8 <command_ap>:
	return 0;
}

//[2] Allocate Page: If the given user virtual address is mapped, do nothing. Else, allocate a single frame and map it to a given virtual address in the user space
int command_ap(int number_of_arguments, char **arguments)
{
f01012b8:	55                   	push   %ebp
f01012b9:	89 e5                	mov    %esp,%ebp
f01012bb:	83 ec 18             	sub    $0x18,%esp
	//TODO: LAB5 Example: fill this function. corresponding command name is "ap"
	//Comment the following line
	//panic("Function is not implemented yet!");

	uint32 va = strtol(arguments[1], NULL, 16);
f01012be:	8b 45 0c             	mov    0xc(%ebp),%eax
f01012c1:	83 c0 04             	add    $0x4,%eax
f01012c4:	8b 00                	mov    (%eax),%eax
f01012c6:	83 ec 04             	sub    $0x4,%esp
f01012c9:	6a 10                	push   $0x10
f01012cb:	6a 00                	push   $0x0
f01012cd:	50                   	push   %eax
f01012ce:	e8 7f 02 03 00       	call   f0131552 <strtol>
f01012d3:	83 c4 10             	add    $0x10,%esp
f01012d6:	89 45 f4             	mov    %eax,-0xc(%ebp)
	struct FrameInfo* ptr_frame_info;
	int ret = allocate_frame(&ptr_frame_info) ;
f01012d9:	83 ec 0c             	sub    $0xc,%esp
f01012dc:	8d 45 ec             	lea    -0x14(%ebp),%eax
f01012df:	50                   	push   %eax
f01012e0:	e8 0d 56 00 00       	call   f01068f2 <allocate_frame>
f01012e5:	83 c4 10             	add    $0x10,%esp
f01012e8:	89 45 f0             	mov    %eax,-0x10(%ebp)
	map_frame(ptr_page_directory, ptr_frame_info, va, PERM_USER | PERM_WRITEABLE);
f01012eb:	8b 55 ec             	mov    -0x14(%ebp),%edx
f01012ee:	a1 3c 26 78 f0       	mov    0xf078263c,%eax
f01012f3:	6a 06                	push   $0x6
f01012f5:	ff 75 f4             	pushl  -0xc(%ebp)
f01012f8:	52                   	push   %edx
f01012f9:	50                   	push   %eax
f01012fa:	e8 42 5a 00 00       	call   f0106d41 <map_frame>
f01012ff:	83 c4 10             	add    $0x10,%esp

	return 0 ;
f0101302:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0101307:	c9                   	leave  
f0101308:	c3                   	ret    

f0101309 <command_fp>:

//[3] Free Page: Un-map a single page at the given virtual address in the user space
int command_fp(int number_of_arguments, char **arguments)
{
f0101309:	55                   	push   %ebp
f010130a:	89 e5                	mov    %esp,%ebp
f010130c:	83 ec 18             	sub    $0x18,%esp
	//TODO: LAB5 Example: fill this function. corresponding command name is "fp"
	//Comment the following line
	//panic("Function is not implemented yet!");

	uint32 va = strtol(arguments[1], NULL, 16);
f010130f:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101312:	83 c0 04             	add    $0x4,%eax
f0101315:	8b 00                	mov    (%eax),%eax
f0101317:	83 ec 04             	sub    $0x4,%esp
f010131a:	6a 10                	push   $0x10
f010131c:	6a 00                	push   $0x0
f010131e:	50                   	push   %eax
f010131f:	e8 2e 02 03 00       	call   f0131552 <strtol>
f0101324:	83 c4 10             	add    $0x10,%esp
f0101327:	89 45 f4             	mov    %eax,-0xc(%ebp)
	// Un-map the page at this address
	unmap_frame(ptr_page_directory, va);
f010132a:	a1 3c 26 78 f0       	mov    0xf078263c,%eax
f010132f:	83 ec 08             	sub    $0x8,%esp
f0101332:	ff 75 f4             	pushl  -0xc(%ebp)
f0101335:	50                   	push   %eax
f0101336:	e8 3b 5b 00 00       	call   f0106e76 <unmap_frame>
f010133b:	83 c4 10             	add    $0x10,%esp

	return 0;
f010133e:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0101343:	c9                   	leave  
f0101344:	c3                   	ret    

f0101345 <command_asp>:
//===========================================================================
//Lab5.Hands-on
//==============
//[1] Allocate Shared Pages
int command_asp(int number_of_arguments, char **arguments)
{
f0101345:	55                   	push   %ebp
f0101346:	89 e5                	mov    %esp,%ebp
f0101348:	83 ec 08             	sub    $0x8,%esp
	//TODO: LAB5 Hands-on: fill this function. corresponding command name is "asp"
	//Comment the following line
	panic("Function is not implemented yet!");
f010134b:	83 ec 04             	sub    $0x4,%esp
f010134e:	68 6c 46 13 f0       	push   $0xf013466c
f0101353:	68 18 01 00 00       	push   $0x118
f0101358:	68 8d 46 13 f0       	push   $0xf013468d
f010135d:	e8 a3 ee ff ff       	call   f0100205 <_panic>

f0101362 <command_cfp>:
}


//[2] Count Free Pages in Range
int command_cfp(int number_of_arguments, char **arguments)
{
f0101362:	55                   	push   %ebp
f0101363:	89 e5                	mov    %esp,%ebp
f0101365:	83 ec 08             	sub    $0x8,%esp
	//TODO: LAB5 Hands-on: fill this function. corresponding command name is "cfp"
	//Comment the following line
	panic("Function is not implemented yet!");
f0101368:	83 ec 04             	sub    $0x4,%esp
f010136b:	68 6c 46 13 f0       	push   $0xf013466c
f0101370:	68 23 01 00 00       	push   $0x123
f0101375:	68 8d 46 13 f0       	push   $0xf013468d
f010137a:	e8 86 ee ff ff       	call   f0100205 <_panic>

f010137f <command_ft>:

//===========================================================================
//Lab6.Examples
//=============
int command_ft(int number_of_arguments, char **arguments)
{
f010137f:	55                   	push   %ebp
f0101380:	89 e5                	mov    %esp,%ebp
	//TODO: LAB6 Example: fill this function. corresponding command name is "ft"
	//Comment the following line

	return 0;
f0101382:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0101387:	5d                   	pop    %ebp
f0101388:	c3                   	ret    

f0101389 <command_writeusermem>:

//*****************************************************************************************//
//***************************** PROJECT HELPERS COMMAND ***********************************//
//*****************************************************************************************//
int command_writeusermem(int number_of_arguments, char **arguments)
{
f0101389:	55                   	push   %ebp
f010138a:	89 e5                	mov    %esp,%ebp
f010138c:	83 ec 38             	sub    $0x38,%esp
	//deal with the kernel page directory
	if (number_of_arguments == 3)
f010138f:	83 7d 08 03          	cmpl   $0x3,0x8(%ebp)
f0101393:	75 37                	jne    f01013cc <command_writeusermem+0x43>
	{
		unsigned int address = strtol(arguments[1], NULL, 16);
f0101395:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101398:	83 c0 04             	add    $0x4,%eax
f010139b:	8b 00                	mov    (%eax),%eax
f010139d:	83 ec 04             	sub    $0x4,%esp
f01013a0:	6a 10                	push   $0x10
f01013a2:	6a 00                	push   $0x0
f01013a4:	50                   	push   %eax
f01013a5:	e8 a8 01 03 00       	call   f0131552 <strtol>
f01013aa:	83 c4 10             	add    $0x10,%esp
f01013ad:	89 45 dc             	mov    %eax,-0x24(%ebp)
		unsigned char *ptr = (unsigned char *)(address) ;
f01013b0:	8b 45 dc             	mov    -0x24(%ebp),%eax
f01013b3:	89 45 d8             	mov    %eax,-0x28(%ebp)

		*ptr = arguments[2][0];
f01013b6:	8b 45 0c             	mov    0xc(%ebp),%eax
f01013b9:	83 c0 08             	add    $0x8,%eax
f01013bc:	8b 00                	mov    (%eax),%eax
f01013be:	8a 00                	mov    (%eax),%al
f01013c0:	88 c2                	mov    %al,%dl
f01013c2:	8b 45 d8             	mov    -0x28(%ebp),%eax
f01013c5:	88 10                	mov    %dl,(%eax)
f01013c7:	e9 b9 00 00 00       	jmp    f0101485 <command_writeusermem+0xfc>
	}
	//deal with a page directory of specific environment
	else if (number_of_arguments == 4)
f01013cc:	83 7d 08 04          	cmpl   $0x4,0x8(%ebp)
f01013d0:	0f 85 9f 00 00 00    	jne    f0101475 <command_writeusermem+0xec>
	{
		int32 envId = strtol(arguments[1],NULL, 10);
f01013d6:	8b 45 0c             	mov    0xc(%ebp),%eax
f01013d9:	83 c0 04             	add    $0x4,%eax
f01013dc:	8b 00                	mov    (%eax),%eax
f01013de:	83 ec 04             	sub    $0x4,%esp
f01013e1:	6a 0a                	push   $0xa
f01013e3:	6a 00                	push   $0x0
f01013e5:	50                   	push   %eax
f01013e6:	e8 67 01 03 00       	call   f0131552 <strtol>
f01013eb:	83 c4 10             	add    $0x10,%esp
f01013ee:	89 45 f4             	mov    %eax,-0xc(%ebp)
		struct Env* env = NULL;
f01013f1:	c7 45 d0 00 00 00 00 	movl   $0x0,-0x30(%ebp)
		envid2env(envId, &env, 0 );
f01013f8:	83 ec 04             	sub    $0x4,%esp
f01013fb:	6a 00                	push   $0x0
f01013fd:	8d 45 d0             	lea    -0x30(%ebp),%eax
f0101400:	50                   	push   %eax
f0101401:	ff 75 f4             	pushl  -0xc(%ebp)
f0101404:	e8 01 87 00 00       	call   f0109b0a <envid2env>
f0101409:	83 c4 10             	add    $0x10,%esp

		int address = strtol(arguments[2], NULL, 16);
f010140c:	8b 45 0c             	mov    0xc(%ebp),%eax
f010140f:	83 c0 08             	add    $0x8,%eax
f0101412:	8b 00                	mov    (%eax),%eax
f0101414:	83 ec 04             	sub    $0x4,%esp
f0101417:	6a 10                	push   $0x10
f0101419:	6a 00                	push   $0x0
f010141b:	50                   	push   %eax
f010141c:	e8 31 01 03 00       	call   f0131552 <strtol>
f0101421:	83 c4 10             	add    $0x10,%esp
f0101424:	89 45 f0             	mov    %eax,-0x10(%ebp)

		if(env == NULL) return 0;
f0101427:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010142a:	85 c0                	test   %eax,%eax
f010142c:	75 07                	jne    f0101435 <command_writeusermem+0xac>
f010142e:	b8 00 00 00 00       	mov    $0x0,%eax
f0101433:	eb 55                	jmp    f010148a <command_writeusermem+0x101>

static __inline uint32
rcr3(void)
{
	uint32 val;
	__asm __volatile("movl %%cr3,%0" : "=r" (val));
f0101435:	0f 20 d8             	mov    %cr3,%eax
f0101438:	89 45 e8             	mov    %eax,-0x18(%ebp)
	return val;
f010143b:	8b 45 e8             	mov    -0x18(%ebp),%eax

		uint32 oldDir = rcr3();
f010143e:	89 45 ec             	mov    %eax,-0x14(%ebp)
		//lcr3((uint32) K_PHYSICAL_ADDRESS( env->env_pgdir));
		lcr3((uint32) (env->env_cr3));
f0101441:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0101444:	8b 40 60             	mov    0x60(%eax),%eax
f0101447:	89 45 e0             	mov    %eax,-0x20(%ebp)
}

static __inline void
lcr3(uint32 val)
{
	__asm __volatile("movl %0,%%cr3" : : "r" (val));
f010144a:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010144d:	0f 22 d8             	mov    %eax,%cr3

		unsigned char *ptr = (unsigned char *)(address) ;
f0101450:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0101453:	89 45 e4             	mov    %eax,-0x1c(%ebp)

		//Write the given Character
		*ptr = arguments[3][0];
f0101456:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101459:	83 c0 0c             	add    $0xc,%eax
f010145c:	8b 00                	mov    (%eax),%eax
f010145e:	8a 00                	mov    (%eax),%al
f0101460:	88 c2                	mov    %al,%dl
f0101462:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0101465:	88 10                	mov    %dl,(%eax)
f0101467:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010146a:	89 45 d4             	mov    %eax,-0x2c(%ebp)
f010146d:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0101470:	0f 22 d8             	mov    %eax,%cr3
f0101473:	eb 10                	jmp    f0101485 <command_writeusermem+0xfc>
		lcr3(oldDir);
	}
	else
	{
		cprintf("wum command: invalid number of arguments\n") ;
f0101475:	83 ec 0c             	sub    $0xc,%esp
f0101478:	68 a4 46 13 f0       	push   $0xf01346a4
f010147d:	e8 8c f8 ff ff       	call   f0100d0e <cprintf>
f0101482:	83 c4 10             	add    $0x10,%esp
	}
	return 0;
f0101485:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010148a:	c9                   	leave  
f010148b:	c3                   	ret    

f010148c <command_writemem_k>:

int command_writemem_k(int number_of_arguments, char **arguments)
{
f010148c:	55                   	push   %ebp
f010148d:	89 e5                	mov    %esp,%ebp
f010148f:	83 ec 28             	sub    $0x28,%esp
	unsigned char* address = (unsigned char*)strtol(arguments[1], NULL, 16)+KERNEL_BASE;
f0101492:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101495:	83 c0 04             	add    $0x4,%eax
f0101498:	8b 00                	mov    (%eax),%eax
f010149a:	83 ec 04             	sub    $0x4,%esp
f010149d:	6a 10                	push   $0x10
f010149f:	6a 00                	push   $0x0
f01014a1:	50                   	push   %eax
f01014a2:	e8 ab 00 03 00       	call   f0131552 <strtol>
f01014a7:	83 c4 10             	add    $0x10,%esp
f01014aa:	2d 00 00 00 10       	sub    $0x10000000,%eax
f01014af:	89 45 f4             	mov    %eax,-0xc(%ebp)
	int size = strtol(arguments[2], NULL, 10);
f01014b2:	8b 45 0c             	mov    0xc(%ebp),%eax
f01014b5:	83 c0 08             	add    $0x8,%eax
f01014b8:	8b 00                	mov    (%eax),%eax
f01014ba:	83 ec 04             	sub    $0x4,%esp
f01014bd:	6a 0a                	push   $0xa
f01014bf:	6a 00                	push   $0x0
f01014c1:	50                   	push   %eax
f01014c2:	e8 8b 00 03 00       	call   f0131552 <strtol>
f01014c7:	83 c4 10             	add    $0x10,%esp
f01014ca:	89 45 e8             	mov    %eax,-0x18(%ebp)
	int c, i=0;
f01014cd:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
	int stringLen = strlen(arguments[3]);
f01014d4:	8b 45 0c             	mov    0xc(%ebp),%eax
f01014d7:	83 c0 0c             	add    $0xc,%eax
f01014da:	8b 00                	mov    (%eax),%eax
f01014dc:	83 ec 0c             	sub    $0xc,%esp
f01014df:	50                   	push   %eax
f01014e0:	e8 0d fd 02 00       	call   f01311f2 <strlen>
f01014e5:	83 c4 10             	add    $0x10,%esp
f01014e8:	89 45 e4             	mov    %eax,-0x1c(%ebp)

	for(c=0; c<size; c++)
f01014eb:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f01014f2:	eb 30                	jmp    f0101524 <command_writemem_k+0x98>
	{
		for(i=0;i < stringLen; i++)
f01014f4:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f01014fb:	eb 1c                	jmp    f0101519 <command_writemem_k+0x8d>
		{
			*address = arguments[3][i];
f01014fd:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101500:	83 c0 0c             	add    $0xc,%eax
f0101503:	8b 10                	mov    (%eax),%edx
f0101505:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0101508:	01 d0                	add    %edx,%eax
f010150a:	8a 00                	mov    (%eax),%al
f010150c:	88 c2                	mov    %al,%dl
f010150e:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0101511:	88 10                	mov    %dl,(%eax)
			address++;
f0101513:	ff 45 f4             	incl   -0xc(%ebp)
	int c, i=0;
	int stringLen = strlen(arguments[3]);

	for(c=0; c<size; c++)
	{
		for(i=0;i < stringLen; i++)
f0101516:	ff 45 ec             	incl   -0x14(%ebp)
f0101519:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010151c:	3b 45 e4             	cmp    -0x1c(%ebp),%eax
f010151f:	7c dc                	jl     f01014fd <command_writemem_k+0x71>
	unsigned char* address = (unsigned char*)strtol(arguments[1], NULL, 16)+KERNEL_BASE;
	int size = strtol(arguments[2], NULL, 10);
	int c, i=0;
	int stringLen = strlen(arguments[3]);

	for(c=0; c<size; c++)
f0101521:	ff 45 f0             	incl   -0x10(%ebp)
f0101524:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0101527:	3b 45 e8             	cmp    -0x18(%ebp),%eax
f010152a:	7c c8                	jl     f01014f4 <command_writemem_k+0x68>
		{
			*address = arguments[3][i];
			address++;
		}
	}
	return 0;
f010152c:	b8 00 00 00 00       	mov    $0x0,%eax


}
f0101531:	c9                   	leave  
f0101532:	c3                   	ret    

f0101533 <command_readusermem>:

int command_readusermem(int number_of_arguments, char **arguments)
{
f0101533:	55                   	push   %ebp
f0101534:	89 e5                	mov    %esp,%ebp
f0101536:	83 ec 38             	sub    $0x38,%esp
	//deal with the kernel page directory
	if (number_of_arguments == 2)
f0101539:	83 7d 08 02          	cmpl   $0x2,0x8(%ebp)
f010153d:	75 42                	jne    f0101581 <command_readusermem+0x4e>
	{
		unsigned int address = strtol(arguments[1], NULL, 16);
f010153f:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101542:	83 c0 04             	add    $0x4,%eax
f0101545:	8b 00                	mov    (%eax),%eax
f0101547:	83 ec 04             	sub    $0x4,%esp
f010154a:	6a 10                	push   $0x10
f010154c:	6a 00                	push   $0x0
f010154e:	50                   	push   %eax
f010154f:	e8 fe ff 02 00       	call   f0131552 <strtol>
f0101554:	83 c4 10             	add    $0x10,%esp
f0101557:	89 45 dc             	mov    %eax,-0x24(%ebp)
		unsigned char *ptr = (unsigned char *)(address ) ;
f010155a:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010155d:	89 45 d8             	mov    %eax,-0x28(%ebp)

		cprintf("value at address %x = %c\n", ptr, *ptr);
f0101560:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0101563:	8a 00                	mov    (%eax),%al
f0101565:	0f b6 c0             	movzbl %al,%eax
f0101568:	83 ec 04             	sub    $0x4,%esp
f010156b:	50                   	push   %eax
f010156c:	ff 75 d8             	pushl  -0x28(%ebp)
f010156f:	68 ce 46 13 f0       	push   $0xf01346ce
f0101574:	e8 95 f7 ff ff       	call   f0100d0e <cprintf>
f0101579:	83 c4 10             	add    $0x10,%esp
f010157c:	e9 c4 00 00 00       	jmp    f0101645 <command_readusermem+0x112>
	}
	//deal with a page directory of specific environment
	else if (number_of_arguments == 3)
f0101581:	83 7d 08 03          	cmpl   $0x3,0x8(%ebp)
f0101585:	0f 85 aa 00 00 00    	jne    f0101635 <command_readusermem+0x102>
	{
		int32 envId = strtol(arguments[1],NULL, 10);
f010158b:	8b 45 0c             	mov    0xc(%ebp),%eax
f010158e:	83 c0 04             	add    $0x4,%eax
f0101591:	8b 00                	mov    (%eax),%eax
f0101593:	83 ec 04             	sub    $0x4,%esp
f0101596:	6a 0a                	push   $0xa
f0101598:	6a 00                	push   $0x0
f010159a:	50                   	push   %eax
f010159b:	e8 b2 ff 02 00       	call   f0131552 <strtol>
f01015a0:	83 c4 10             	add    $0x10,%esp
f01015a3:	89 45 f4             	mov    %eax,-0xc(%ebp)
		struct Env* env = NULL;
f01015a6:	c7 45 d0 00 00 00 00 	movl   $0x0,-0x30(%ebp)
		envid2env(envId, &env, 0 );
f01015ad:	83 ec 04             	sub    $0x4,%esp
f01015b0:	6a 00                	push   $0x0
f01015b2:	8d 45 d0             	lea    -0x30(%ebp),%eax
f01015b5:	50                   	push   %eax
f01015b6:	ff 75 f4             	pushl  -0xc(%ebp)
f01015b9:	e8 4c 85 00 00       	call   f0109b0a <envid2env>
f01015be:	83 c4 10             	add    $0x10,%esp

		int address = strtol(arguments[2], NULL, 16);
f01015c1:	8b 45 0c             	mov    0xc(%ebp),%eax
f01015c4:	83 c0 08             	add    $0x8,%eax
f01015c7:	8b 00                	mov    (%eax),%eax
f01015c9:	83 ec 04             	sub    $0x4,%esp
f01015cc:	6a 10                	push   $0x10
f01015ce:	6a 00                	push   $0x0
f01015d0:	50                   	push   %eax
f01015d1:	e8 7c ff 02 00       	call   f0131552 <strtol>
f01015d6:	83 c4 10             	add    $0x10,%esp
f01015d9:	89 45 f0             	mov    %eax,-0x10(%ebp)

		if(env == NULL) return 0;
f01015dc:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01015df:	85 c0                	test   %eax,%eax
f01015e1:	75 07                	jne    f01015ea <command_readusermem+0xb7>
f01015e3:	b8 00 00 00 00       	mov    $0x0,%eax
f01015e8:	eb 60                	jmp    f010164a <command_readusermem+0x117>

static __inline uint32
rcr3(void)
{
	uint32 val;
	__asm __volatile("movl %%cr3,%0" : "=r" (val));
f01015ea:	0f 20 d8             	mov    %cr3,%eax
f01015ed:	89 45 e8             	mov    %eax,-0x18(%ebp)
	return val;
f01015f0:	8b 45 e8             	mov    -0x18(%ebp),%eax

		uint32 oldDir = rcr3();
f01015f3:	89 45 ec             	mov    %eax,-0x14(%ebp)
		//lcr3((uint32) K_PHYSICAL_ADDRESS( env->env_pgdir));
		lcr3((uint32)( env->env_cr3));
f01015f6:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01015f9:	8b 40 60             	mov    0x60(%eax),%eax
f01015fc:	89 45 e0             	mov    %eax,-0x20(%ebp)
}

static __inline void
lcr3(uint32 val)
{
	__asm __volatile("movl %0,%%cr3" : : "r" (val));
f01015ff:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0101602:	0f 22 d8             	mov    %eax,%cr3

		unsigned char *ptr = (unsigned char *)(address) ;
f0101605:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0101608:	89 45 e4             	mov    %eax,-0x1c(%ebp)

		//Write the given Character
		cprintf("value at address %x = %c\n", address, *ptr);
f010160b:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010160e:	8a 00                	mov    (%eax),%al
f0101610:	0f b6 c0             	movzbl %al,%eax
f0101613:	83 ec 04             	sub    $0x4,%esp
f0101616:	50                   	push   %eax
f0101617:	ff 75 f0             	pushl  -0x10(%ebp)
f010161a:	68 ce 46 13 f0       	push   $0xf01346ce
f010161f:	e8 ea f6 ff ff       	call   f0100d0e <cprintf>
f0101624:	83 c4 10             	add    $0x10,%esp
f0101627:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010162a:	89 45 d4             	mov    %eax,-0x2c(%ebp)
f010162d:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0101630:	0f 22 d8             	mov    %eax,%cr3
f0101633:	eb 10                	jmp    f0101645 <command_readusermem+0x112>

		lcr3(oldDir);
	}
	else
	{
		cprintf("rum command: invalid number of arguments\n") ;
f0101635:	83 ec 0c             	sub    $0xc,%esp
f0101638:	68 e8 46 13 f0       	push   $0xf01346e8
f010163d:	e8 cc f6 ff ff       	call   f0100d0e <cprintf>
f0101642:	83 c4 10             	add    $0x10,%esp
	}
	return 0;
f0101645:	b8 00 00 00 00       	mov    $0x0,%eax

}
f010164a:	c9                   	leave  
f010164b:	c3                   	ret    

f010164c <command_readmem_k>:

int command_readmem_k(int number_of_arguments, char **arguments)
{
f010164c:	55                   	push   %ebp
f010164d:	89 e5                	mov    %esp,%ebp
f010164f:	83 ec 18             	sub    $0x18,%esp
	unsigned char* address = (unsigned char*)strtol(arguments[1], NULL, 16)+KERNEL_BASE;
f0101652:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101655:	83 c0 04             	add    $0x4,%eax
f0101658:	8b 00                	mov    (%eax),%eax
f010165a:	83 ec 04             	sub    $0x4,%esp
f010165d:	6a 10                	push   $0x10
f010165f:	6a 00                	push   $0x0
f0101661:	50                   	push   %eax
f0101662:	e8 eb fe 02 00       	call   f0131552 <strtol>
f0101667:	83 c4 10             	add    $0x10,%esp
f010166a:	2d 00 00 00 10       	sub    $0x10000000,%eax
f010166f:	89 45 f4             	mov    %eax,-0xc(%ebp)
	int size = strtol(arguments[2], NULL, 10);
f0101672:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101675:	83 c0 08             	add    $0x8,%eax
f0101678:	8b 00                	mov    (%eax),%eax
f010167a:	83 ec 04             	sub    $0x4,%esp
f010167d:	6a 0a                	push   $0xa
f010167f:	6a 00                	push   $0x0
f0101681:	50                   	push   %eax
f0101682:	e8 cb fe 02 00       	call   f0131552 <strtol>
f0101687:	83 c4 10             	add    $0x10,%esp
f010168a:	89 45 ec             	mov    %eax,-0x14(%ebp)
	int i=0;
f010168d:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	for(;i < size; i++)
f0101694:	eb 22                	jmp    f01016b8 <command_readmem_k+0x6c>
	{
		cprintf("%c",*address++);
f0101696:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0101699:	8d 50 01             	lea    0x1(%eax),%edx
f010169c:	89 55 f4             	mov    %edx,-0xc(%ebp)
f010169f:	8a 00                	mov    (%eax),%al
f01016a1:	0f b6 c0             	movzbl %al,%eax
f01016a4:	83 ec 08             	sub    $0x8,%esp
f01016a7:	50                   	push   %eax
f01016a8:	68 12 47 13 f0       	push   $0xf0134712
f01016ad:	e8 5c f6 ff ff       	call   f0100d0e <cprintf>
f01016b2:	83 c4 10             	add    $0x10,%esp
int command_readmem_k(int number_of_arguments, char **arguments)
{
	unsigned char* address = (unsigned char*)strtol(arguments[1], NULL, 16)+KERNEL_BASE;
	int size = strtol(arguments[2], NULL, 10);
	int i=0;
	for(;i < size; i++)
f01016b5:	ff 45 f0             	incl   -0x10(%ebp)
f01016b8:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01016bb:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f01016be:	7c d6                	jl     f0101696 <command_readmem_k+0x4a>
	{
		cprintf("%c",*address++);
	}
	cprintf("\n");
f01016c0:	83 ec 0c             	sub    $0xc,%esp
f01016c3:	68 15 47 13 f0       	push   $0xf0134715
f01016c8:	e8 41 f6 ff ff       	call   f0100d0e <cprintf>
f01016cd:	83 c4 10             	add    $0x10,%esp
	return 0;
f01016d0:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01016d5:	c9                   	leave  
f01016d6:	c3                   	ret    

f01016d7 <command_readuserblock>:


int command_readuserblock(int number_of_arguments, char **arguments)
{
f01016d7:	55                   	push   %ebp
f01016d8:	89 e5                	mov    %esp,%ebp
f01016da:	83 ec 38             	sub    $0x38,%esp
	int32 envId = strtol(arguments[1],NULL, 10);
f01016dd:	8b 45 0c             	mov    0xc(%ebp),%eax
f01016e0:	83 c0 04             	add    $0x4,%eax
f01016e3:	8b 00                	mov    (%eax),%eax
f01016e5:	83 ec 04             	sub    $0x4,%esp
f01016e8:	6a 0a                	push   $0xa
f01016ea:	6a 00                	push   $0x0
f01016ec:	50                   	push   %eax
f01016ed:	e8 60 fe 02 00       	call   f0131552 <strtol>
f01016f2:	83 c4 10             	add    $0x10,%esp
f01016f5:	89 45 ec             	mov    %eax,-0x14(%ebp)
	struct Env* env = NULL;
f01016f8:	c7 45 d0 00 00 00 00 	movl   $0x0,-0x30(%ebp)
	envid2env(envId, &env, 0 );
f01016ff:	83 ec 04             	sub    $0x4,%esp
f0101702:	6a 00                	push   $0x0
f0101704:	8d 45 d0             	lea    -0x30(%ebp),%eax
f0101707:	50                   	push   %eax
f0101708:	ff 75 ec             	pushl  -0x14(%ebp)
f010170b:	e8 fa 83 00 00       	call   f0109b0a <envid2env>
f0101710:	83 c4 10             	add    $0x10,%esp

	int address = strtol(arguments[2], NULL, 16);
f0101713:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101716:	83 c0 08             	add    $0x8,%eax
f0101719:	8b 00                	mov    (%eax),%eax
f010171b:	83 ec 04             	sub    $0x4,%esp
f010171e:	6a 10                	push   $0x10
f0101720:	6a 00                	push   $0x0
f0101722:	50                   	push   %eax
f0101723:	e8 2a fe 02 00       	call   f0131552 <strtol>
f0101728:	83 c4 10             	add    $0x10,%esp
f010172b:	89 45 e8             	mov    %eax,-0x18(%ebp)
	int nBytes = strtol(arguments[3], NULL, 10);
f010172e:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101731:	83 c0 0c             	add    $0xc,%eax
f0101734:	8b 00                	mov    (%eax),%eax
f0101736:	83 ec 04             	sub    $0x4,%esp
f0101739:	6a 0a                	push   $0xa
f010173b:	6a 00                	push   $0x0
f010173d:	50                   	push   %eax
f010173e:	e8 0f fe 02 00       	call   f0131552 <strtol>
f0101743:	83 c4 10             	add    $0x10,%esp
f0101746:	89 45 e4             	mov    %eax,-0x1c(%ebp)

	unsigned char *ptr = (unsigned char *)(address) ;
f0101749:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010174c:	89 45 f4             	mov    %eax,-0xc(%ebp)
	//Write the given Character

	if(env == NULL) return 0;
f010174f:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0101752:	85 c0                	test   %eax,%eax
f0101754:	75 07                	jne    f010175d <command_readuserblock+0x86>
f0101756:	b8 00 00 00 00       	mov    $0x0,%eax
f010175b:	eb 65                	jmp    f01017c2 <command_readuserblock+0xeb>

static __inline uint32
rcr3(void)
{
	uint32 val;
	__asm __volatile("movl %%cr3,%0" : "=r" (val));
f010175d:	0f 20 d8             	mov    %cr3,%eax
f0101760:	89 45 d8             	mov    %eax,-0x28(%ebp)
	return val;
f0101763:	8b 45 d8             	mov    -0x28(%ebp),%eax

	uint32 oldDir = rcr3();
f0101766:	89 45 dc             	mov    %eax,-0x24(%ebp)
	//lcr3((uint32) K_PHYSICAL_ADDRESS( env->env_pgdir));
	lcr3((uint32)( env->env_cr3));
f0101769:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010176c:	8b 40 60             	mov    0x60(%eax),%eax
f010176f:	89 45 d4             	mov    %eax,-0x2c(%ebp)
}

static __inline void
lcr3(uint32 val)
{
	__asm __volatile("movl %0,%%cr3" : : "r" (val));
f0101772:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0101775:	0f 22 d8             	mov    %eax,%cr3

	int i;
	for(i = 0;i<nBytes; i++)
f0101778:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f010177f:	eb 28                	jmp    f01017a9 <command_readuserblock+0xd2>
	{
		cprintf("%08x : %02x  %c\n", ptr, *ptr, *ptr);
f0101781:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0101784:	8a 00                	mov    (%eax),%al
f0101786:	0f b6 d0             	movzbl %al,%edx
f0101789:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010178c:	8a 00                	mov    (%eax),%al
f010178e:	0f b6 c0             	movzbl %al,%eax
f0101791:	52                   	push   %edx
f0101792:	50                   	push   %eax
f0101793:	ff 75 f4             	pushl  -0xc(%ebp)
f0101796:	68 17 47 13 f0       	push   $0xf0134717
f010179b:	e8 6e f5 ff ff       	call   f0100d0e <cprintf>
f01017a0:	83 c4 10             	add    $0x10,%esp
		ptr++;
f01017a3:	ff 45 f4             	incl   -0xc(%ebp)
	uint32 oldDir = rcr3();
	//lcr3((uint32) K_PHYSICAL_ADDRESS( env->env_pgdir));
	lcr3((uint32)( env->env_cr3));

	int i;
	for(i = 0;i<nBytes; i++)
f01017a6:	ff 45 f0             	incl   -0x10(%ebp)
f01017a9:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01017ac:	3b 45 e4             	cmp    -0x1c(%ebp),%eax
f01017af:	7c d0                	jl     f0101781 <command_readuserblock+0xaa>
f01017b1:	8b 45 dc             	mov    -0x24(%ebp),%eax
f01017b4:	89 45 e0             	mov    %eax,-0x20(%ebp)
f01017b7:	8b 45 e0             	mov    -0x20(%ebp),%eax
f01017ba:	0f 22 d8             	mov    %eax,%cr3
		cprintf("%08x : %02x  %c\n", ptr, *ptr, *ptr);
		ptr++;
	}
	lcr3(oldDir);

	return 0;
f01017bd:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01017c2:	c9                   	leave  
f01017c3:	c3                   	ret    

f01017c4 <command_remove_table>:

int command_remove_table(int number_of_arguments, char **arguments)
{
f01017c4:	55                   	push   %ebp
f01017c5:	89 e5                	mov    %esp,%ebp
f01017c7:	83 ec 28             	sub    $0x28,%esp
	int32 envId = strtol(arguments[1],NULL, 10);
f01017ca:	8b 45 0c             	mov    0xc(%ebp),%eax
f01017cd:	83 c0 04             	add    $0x4,%eax
f01017d0:	8b 00                	mov    (%eax),%eax
f01017d2:	83 ec 04             	sub    $0x4,%esp
f01017d5:	6a 0a                	push   $0xa
f01017d7:	6a 00                	push   $0x0
f01017d9:	50                   	push   %eax
f01017da:	e8 73 fd 02 00       	call   f0131552 <strtol>
f01017df:	83 c4 10             	add    $0x10,%esp
f01017e2:	89 45 f4             	mov    %eax,-0xc(%ebp)
	struct Env* env = NULL;
f01017e5:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
	envid2env(envId, &env, 0 );
f01017ec:	83 ec 04             	sub    $0x4,%esp
f01017ef:	6a 00                	push   $0x0
f01017f1:	8d 45 d8             	lea    -0x28(%ebp),%eax
f01017f4:	50                   	push   %eax
f01017f5:	ff 75 f4             	pushl  -0xc(%ebp)
f01017f8:	e8 0d 83 00 00       	call   f0109b0a <envid2env>
f01017fd:	83 c4 10             	add    $0x10,%esp
	if(env == 0) return 0;
f0101800:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0101803:	85 c0                	test   %eax,%eax
f0101805:	75 0a                	jne    f0101811 <command_remove_table+0x4d>
f0101807:	b8 00 00 00 00       	mov    $0x0,%eax
f010180c:	e9 c7 00 00 00       	jmp    f01018d8 <command_remove_table+0x114>

	uint32 address = strtol(arguments[2], NULL, 16);
f0101811:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101814:	83 c0 08             	add    $0x8,%eax
f0101817:	8b 00                	mov    (%eax),%eax
f0101819:	83 ec 04             	sub    $0x4,%esp
f010181c:	6a 10                	push   $0x10
f010181e:	6a 00                	push   $0x0
f0101820:	50                   	push   %eax
f0101821:	e8 2c fd 02 00       	call   f0131552 <strtol>
f0101826:	83 c4 10             	add    $0x10,%esp
f0101829:	89 45 f0             	mov    %eax,-0x10(%ebp)
	unsigned char *va = (unsigned char *)(address) ;
f010182c:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010182f:	89 45 ec             	mov    %eax,-0x14(%ebp)
	uint32 table_pa = env->env_page_directory[PDX(address)] & 0xFFFFF000;
f0101832:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0101835:	8b 40 5c             	mov    0x5c(%eax),%eax
f0101838:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010183b:	c1 ea 16             	shr    $0x16,%edx
f010183e:	c1 e2 02             	shl    $0x2,%edx
f0101841:	01 d0                	add    %edx,%eax
f0101843:	8b 00                	mov    (%eax),%eax
f0101845:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f010184a:	89 45 e8             	mov    %eax,-0x18(%ebp)

	//remove the table
	if(USE_KHEAP && !CHECK_IF_KERNEL_ADDRESS(va))
f010184d:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0101850:	3d ff ff bf ee       	cmp    $0xeebfffff,%eax
f0101855:	77 1c                	ja     f0101873 <command_remove_table+0xaf>
	{
		kfree((void*)kheap_virtual_address(table_pa));
f0101857:	83 ec 0c             	sub    $0xc,%esp
f010185a:	ff 75 e8             	pushl  -0x18(%ebp)
f010185d:	e8 15 62 00 00       	call   f0107a77 <kheap_virtual_address>
f0101862:	83 c4 10             	add    $0x10,%esp
f0101865:	83 ec 0c             	sub    $0xc,%esp
f0101868:	50                   	push   %eax
f0101869:	e8 e2 60 00 00       	call   f0107950 <kfree>
f010186e:	83 c4 10             	add    $0x10,%esp
f0101871:	eb 28                	jmp    f010189b <command_remove_table+0xd7>
	}
	else
	{
		// get the physical address and FrameInfo of the page table
		struct FrameInfo *table_FrameInfo = to_frame_info(table_pa);
f0101873:	83 ec 0c             	sub    $0xc,%esp
f0101876:	ff 75 e8             	pushl  -0x18(%ebp)
f0101879:	e8 a9 f7 ff ff       	call   f0101027 <to_frame_info>
f010187e:	83 c4 10             	add    $0x10,%esp
f0101881:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		// set references of the table frame to 0 then free it by adding
		// to the free frame list
		table_FrameInfo->references = 0;
f0101884:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0101887:	66 c7 40 08 00 00    	movw   $0x0,0x8(%eax)
		free_frame(table_FrameInfo);
f010188d:	83 ec 0c             	sub    $0xc,%esp
f0101890:	ff 75 e4             	pushl  -0x1c(%ebp)
f0101893:	e8 6f 51 00 00       	call   f0106a07 <free_frame>
f0101898:	83 c4 10             	add    $0x10,%esp
	}

	// set the corresponding entry in the directory to 0
	uint32 dir_index = PDX(va);
f010189b:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010189e:	c1 e8 16             	shr    $0x16,%eax
f01018a1:	89 45 e0             	mov    %eax,-0x20(%ebp)
	env->env_page_directory[dir_index] &= (~PERM_PRESENT);
f01018a4:	8b 45 d8             	mov    -0x28(%ebp),%eax
f01018a7:	8b 40 5c             	mov    0x5c(%eax),%eax
f01018aa:	8b 55 e0             	mov    -0x20(%ebp),%edx
f01018ad:	c1 e2 02             	shl    $0x2,%edx
f01018b0:	01 c2                	add    %eax,%edx
f01018b2:	8b 45 d8             	mov    -0x28(%ebp),%eax
f01018b5:	8b 40 5c             	mov    0x5c(%eax),%eax
f01018b8:	8b 4d e0             	mov    -0x20(%ebp),%ecx
f01018bb:	c1 e1 02             	shl    $0x2,%ecx
f01018be:	01 c8                	add    %ecx,%eax
f01018c0:	8b 00                	mov    (%eax),%eax
f01018c2:	83 e0 fe             	and    $0xfffffffe,%eax
f01018c5:	89 02                	mov    %eax,(%edx)

static __inline void
tlbflush(void)
{
	uint32 cr3;
	__asm __volatile("movl %%cr3,%0" : "=r" (cr3));
f01018c7:	0f 20 d8             	mov    %cr3,%eax
f01018ca:	89 45 dc             	mov    %eax,-0x24(%ebp)
	__asm __volatile("movl %0,%%cr3" : : "r" (cr3));
f01018cd:	8b 45 dc             	mov    -0x24(%ebp),%eax
f01018d0:	0f 22 d8             	mov    %eax,%cr3
	tlbflush();
	return 0;
f01018d3:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01018d8:	c9                   	leave  
f01018d9:	c3                   	ret    

f01018da <command_allocuserpage>:

int command_allocuserpage(int number_of_arguments, char **arguments)
{
f01018da:	55                   	push   %ebp
f01018db:	89 e5                	mov    %esp,%ebp
f01018dd:	83 ec 28             	sub    $0x28,%esp
	if (number_of_arguments < 3 || number_of_arguments > 4)
f01018e0:	83 7d 08 02          	cmpl   $0x2,0x8(%ebp)
f01018e4:	7e 06                	jle    f01018ec <command_allocuserpage+0x12>
f01018e6:	83 7d 08 04          	cmpl   $0x4,0x8(%ebp)
f01018ea:	7e 1a                	jle    f0101906 <command_allocuserpage+0x2c>
	{
		cprintf("aup command: invalid number of arguments\n") ;
f01018ec:	83 ec 0c             	sub    $0xc,%esp
f01018ef:	68 28 47 13 f0       	push   $0xf0134728
f01018f4:	e8 15 f4 ff ff       	call   f0100d0e <cprintf>
f01018f9:	83 c4 10             	add    $0x10,%esp
		return 0;
f01018fc:	b8 00 00 00 00       	mov    $0x0,%eax
f0101901:	e9 46 01 00 00       	jmp    f0101a4c <command_allocuserpage+0x172>
	}
	int32 envId = strtol(arguments[1],NULL, 10);
f0101906:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101909:	83 c0 04             	add    $0x4,%eax
f010190c:	8b 00                	mov    (%eax),%eax
f010190e:	83 ec 04             	sub    $0x4,%esp
f0101911:	6a 0a                	push   $0xa
f0101913:	6a 00                	push   $0x0
f0101915:	50                   	push   %eax
f0101916:	e8 37 fc 02 00       	call   f0131552 <strtol>
f010191b:	83 c4 10             	add    $0x10,%esp
f010191e:	89 45 f0             	mov    %eax,-0x10(%ebp)
	struct Env* env = NULL;
f0101921:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)

	envid2env(envId, &env, 0 );
f0101928:	83 ec 04             	sub    $0x4,%esp
f010192b:	6a 00                	push   $0x0
f010192d:	8d 45 e4             	lea    -0x1c(%ebp),%eax
f0101930:	50                   	push   %eax
f0101931:	ff 75 f0             	pushl  -0x10(%ebp)
f0101934:	e8 d1 81 00 00       	call   f0109b0a <envid2env>
f0101939:	83 c4 10             	add    $0x10,%esp
	if(env == 0) return 0;
f010193c:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010193f:	85 c0                	test   %eax,%eax
f0101941:	75 0a                	jne    f010194d <command_allocuserpage+0x73>
f0101943:	b8 00 00 00 00       	mov    $0x0,%eax
f0101948:	e9 ff 00 00 00       	jmp    f0101a4c <command_allocuserpage+0x172>

	uint32 va = strtol(arguments[2], NULL, 16);
f010194d:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101950:	83 c0 08             	add    $0x8,%eax
f0101953:	8b 00                	mov    (%eax),%eax
f0101955:	83 ec 04             	sub    $0x4,%esp
f0101958:	6a 10                	push   $0x10
f010195a:	6a 00                	push   $0x0
f010195c:	50                   	push   %eax
f010195d:	e8 f0 fb 02 00       	call   f0131552 <strtol>
f0101962:	83 c4 10             	add    $0x10,%esp
f0101965:	89 45 ec             	mov    %eax,-0x14(%ebp)

	// Allocate a single frame from the free frame list
	struct FrameInfo * ptr_FrameInfo ;
	int ret = allocate_frame(&ptr_FrameInfo);
f0101968:	83 ec 0c             	sub    $0xc,%esp
f010196b:	8d 45 e0             	lea    -0x20(%ebp),%eax
f010196e:	50                   	push   %eax
f010196f:	e8 7e 4f 00 00       	call   f01068f2 <allocate_frame>
f0101974:	83 c4 10             	add    $0x10,%esp
f0101977:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if (ret == E_NO_MEM)
f010197a:	83 7d e8 fc          	cmpl   $0xfffffffc,-0x18(%ebp)
f010197e:	75 1a                	jne    f010199a <command_allocuserpage+0xc0>
	{
		cprintf("ERROR: no enough memory\n");
f0101980:	83 ec 0c             	sub    $0xc,%esp
f0101983:	68 52 47 13 f0       	push   $0xf0134752
f0101988:	e8 81 f3 ff ff       	call   f0100d0e <cprintf>
f010198d:	83 c4 10             	add    $0x10,%esp
		return 0;
f0101990:	b8 00 00 00 00       	mov    $0x0,%eax
f0101995:	e9 b2 00 00 00       	jmp    f0101a4c <command_allocuserpage+0x172>
	}

	if (number_of_arguments == 3)
f010199a:	83 7d 08 03          	cmpl   $0x3,0x8(%ebp)
f010199e:	75 1d                	jne    f01019bd <command_allocuserpage+0xe3>
	{
		// Map this frame to the given user virtual address with PERM_WRITEABLE
		map_frame(env->env_page_directory, ptr_FrameInfo, va, PERM_WRITEABLE | PERM_USER);
f01019a0:	8b 55 e0             	mov    -0x20(%ebp),%edx
f01019a3:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01019a6:	8b 40 5c             	mov    0x5c(%eax),%eax
f01019a9:	6a 06                	push   $0x6
f01019ab:	ff 75 ec             	pushl  -0x14(%ebp)
f01019ae:	52                   	push   %edx
f01019af:	50                   	push   %eax
f01019b0:	e8 8c 53 00 00       	call   f0106d41 <map_frame>
f01019b5:	83 c4 10             	add    $0x10,%esp
f01019b8:	e9 8a 00 00 00       	jmp    f0101a47 <command_allocuserpage+0x16d>
	}
	else if (number_of_arguments == 4)
f01019bd:	83 7d 08 04          	cmpl   $0x4,0x8(%ebp)
f01019c1:	0f 85 80 00 00 00    	jne    f0101a47 <command_allocuserpage+0x16d>
	{
		// Map this frame to the given user virtual address with the given permission
		uint32 rw ;
		if (arguments[3][0] == 'r' || arguments[3][0] == 'R')
f01019c7:	8b 45 0c             	mov    0xc(%ebp),%eax
f01019ca:	83 c0 0c             	add    $0xc,%eax
f01019cd:	8b 00                	mov    (%eax),%eax
f01019cf:	8a 00                	mov    (%eax),%al
f01019d1:	3c 72                	cmp    $0x72,%al
f01019d3:	74 0e                	je     f01019e3 <command_allocuserpage+0x109>
f01019d5:	8b 45 0c             	mov    0xc(%ebp),%eax
f01019d8:	83 c0 0c             	add    $0xc,%eax
f01019db:	8b 00                	mov    (%eax),%eax
f01019dd:	8a 00                	mov    (%eax),%al
f01019df:	3c 52                	cmp    $0x52,%al
f01019e1:	75 09                	jne    f01019ec <command_allocuserpage+0x112>
			rw = 0 ;
f01019e3:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01019ea:	eb 3c                	jmp    f0101a28 <command_allocuserpage+0x14e>
		else if (arguments[3][0] == 'w' || arguments[3][0] == 'W')
f01019ec:	8b 45 0c             	mov    0xc(%ebp),%eax
f01019ef:	83 c0 0c             	add    $0xc,%eax
f01019f2:	8b 00                	mov    (%eax),%eax
f01019f4:	8a 00                	mov    (%eax),%al
f01019f6:	3c 77                	cmp    $0x77,%al
f01019f8:	74 0e                	je     f0101a08 <command_allocuserpage+0x12e>
f01019fa:	8b 45 0c             	mov    0xc(%ebp),%eax
f01019fd:	83 c0 0c             	add    $0xc,%eax
f0101a00:	8b 00                	mov    (%eax),%eax
f0101a02:	8a 00                	mov    (%eax),%al
f0101a04:	3c 57                	cmp    $0x57,%al
f0101a06:	75 09                	jne    f0101a11 <command_allocuserpage+0x137>
			rw = PERM_WRITEABLE ;
f0101a08:	c7 45 f4 02 00 00 00 	movl   $0x2,-0xc(%ebp)
f0101a0f:	eb 17                	jmp    f0101a28 <command_allocuserpage+0x14e>
		else
		{
			cprintf("aup command: wrong permission (r/w)... will continue as writable\n") ;
f0101a11:	83 ec 0c             	sub    $0xc,%esp
f0101a14:	68 6c 47 13 f0       	push   $0xf013476c
f0101a19:	e8 f0 f2 ff ff       	call   f0100d0e <cprintf>
f0101a1e:	83 c4 10             	add    $0x10,%esp
			rw = PERM_WRITEABLE ;
f0101a21:	c7 45 f4 02 00 00 00 	movl   $0x2,-0xc(%ebp)
		}

		map_frame(env->env_page_directory, ptr_FrameInfo, va, rw | PERM_USER);
f0101a28:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0101a2b:	83 c8 04             	or     $0x4,%eax
f0101a2e:	89 c1                	mov    %eax,%ecx
f0101a30:	8b 55 e0             	mov    -0x20(%ebp),%edx
f0101a33:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0101a36:	8b 40 5c             	mov    0x5c(%eax),%eax
f0101a39:	51                   	push   %ecx
f0101a3a:	ff 75 ec             	pushl  -0x14(%ebp)
f0101a3d:	52                   	push   %edx
f0101a3e:	50                   	push   %eax
f0101a3f:	e8 fd 52 00 00       	call   f0106d41 <map_frame>
f0101a44:	83 c4 10             	add    $0x10,%esp
	}
	return 0;
f0101a47:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0101a4c:	c9                   	leave  
f0101a4d:	c3                   	ret    

f0101a4e <command_meminfo>:

int command_meminfo(int number_of_arguments, char **arguments)
{
f0101a4e:	55                   	push   %ebp
f0101a4f:	89 e5                	mov    %esp,%ebp
f0101a51:	56                   	push   %esi
f0101a52:	53                   	push   %ebx
f0101a53:	83 ec 10             	sub    $0x10,%esp
	struct freeFramesCounters counters =calculate_available_frames();
f0101a56:	8d 45 ec             	lea    -0x14(%ebp),%eax
f0101a59:	83 ec 0c             	sub    $0xc,%esp
f0101a5c:	50                   	push   %eax
f0101a5d:	e8 79 55 00 00       	call   f0106fdb <calculate_available_frames>
f0101a62:	83 c4 0c             	add    $0xc,%esp
	cprintf("Total available frames = %d\nFree Buffered = %d\nFree Not Buffered = %d\nModified = %d\n",
f0101a65:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0101a68:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0101a6b:	8b 45 ec             	mov    -0x14(%ebp),%eax
			counters.freeBuffered+ counters.freeNotBuffered+ counters.modified, counters.freeBuffered, counters.freeNotBuffered, counters.modified);
f0101a6e:	8b 75 ec             	mov    -0x14(%ebp),%esi
f0101a71:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f0101a74:	01 de                	add    %ebx,%esi
f0101a76:	8b 5d f4             	mov    -0xc(%ebp),%ebx
}

int command_meminfo(int number_of_arguments, char **arguments)
{
	struct freeFramesCounters counters =calculate_available_frames();
	cprintf("Total available frames = %d\nFree Buffered = %d\nFree Not Buffered = %d\nModified = %d\n",
f0101a79:	01 f3                	add    %esi,%ebx
f0101a7b:	83 ec 0c             	sub    $0xc,%esp
f0101a7e:	51                   	push   %ecx
f0101a7f:	52                   	push   %edx
f0101a80:	50                   	push   %eax
f0101a81:	53                   	push   %ebx
f0101a82:	68 b0 47 13 f0       	push   $0xf01347b0
f0101a87:	e8 82 f2 ff ff       	call   f0100d0e <cprintf>
f0101a8c:	83 c4 20             	add    $0x20,%esp
			counters.freeBuffered+ counters.freeNotBuffered+ counters.modified, counters.freeBuffered, counters.freeNotBuffered, counters.modified);

	cprintf("Num of calls for kheap_virtual_address [in last run] = %d\n", numOfKheapVACalls);
f0101a8f:	a1 34 26 78 f0       	mov    0xf0782634,%eax
f0101a94:	83 ec 08             	sub    $0x8,%esp
f0101a97:	50                   	push   %eax
f0101a98:	68 08 48 13 f0       	push   $0xf0134808
f0101a9d:	e8 6c f2 ff ff       	call   f0100d0e <cprintf>
f0101aa2:	83 c4 10             	add    $0x10,%esp

	return 0;
f0101aa5:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0101aaa:	8d 65 f8             	lea    -0x8(%ebp),%esp
f0101aad:	5b                   	pop    %ebx
f0101aae:	5e                   	pop    %esi
f0101aaf:	5d                   	pop    %ebp
f0101ab0:	c3                   	ret    

f0101ab1 <CreateEnv>:

//2020
struct Env * CreateEnv(int number_of_arguments, char **arguments)
{
f0101ab1:	55                   	push   %ebp
f0101ab2:	89 e5                	mov    %esp,%ebp
f0101ab4:	83 ec 18             	sub    $0x18,%esp
	struct Env* env;
	uint32 pageWSSize = __PWS_MAX_SIZE;		//arg#3 default
f0101ab7:	c7 45 f4 88 13 00 00 	movl   $0x1388,-0xc(%ebp)
	uint32 LRUSecondListSize = 0;			//arg#4 default
f0101abe:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	uint32 percent_WS_pages_to_remove = 0;	//arg#5 default
f0101ac5:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
#if USE_KHEAP
	{
		switch (number_of_arguments)
f0101acc:	8b 45 08             	mov    0x8(%ebp),%eax
f0101acf:	83 f8 04             	cmp    $0x4,%eax
f0101ad2:	0f 84 94 00 00 00    	je     f0101b6c <CreateEnv+0xbb>
f0101ad8:	83 f8 05             	cmp    $0x5,%eax
f0101adb:	74 0e                	je     f0101aeb <CreateEnv+0x3a>
f0101add:	83 f8 03             	cmp    $0x3,%eax
f0101ae0:	0f 84 ec 00 00 00    	je     f0101bd2 <CreateEnv+0x121>
f0101ae6:	e9 2f 01 00 00       	jmp    f0101c1a <CreateEnv+0x169>
		{
		case 5:
			if(!isPageReplacmentAlgorithmLRU(PG_REP_LRU_LISTS_APPROX))
f0101aeb:	83 ec 0c             	sub    $0xc,%esp
f0101aee:	6a 02                	push   $0x2
f0101af0:	e8 4e c2 00 00       	call   f010dd43 <isPageReplacmentAlgorithmLRU>
f0101af5:	83 c4 10             	add    $0x10,%esp
f0101af8:	85 c0                	test   %eax,%eax
f0101afa:	75 1a                	jne    f0101b16 <CreateEnv+0x65>
			{
				cprintf("ERROR: Current Replacement is NOT LRU LISTS, invalid number of args\nUsage: <command> <prog_name> <page_WS_size> [<LRU_second_list_size>] [<DYN_LOC_SCOPE_percent_WS_to_remove>]\naborting...\n");
f0101afc:	83 ec 0c             	sub    $0xc,%esp
f0101aff:	68 44 48 13 f0       	push   $0xf0134844
f0101b04:	e8 05 f2 ff ff       	call   f0100d0e <cprintf>
f0101b09:	83 c4 10             	add    $0x10,%esp
				return NULL;
f0101b0c:	b8 00 00 00 00       	mov    $0x0,%eax
f0101b11:	e9 d5 01 00 00       	jmp    f0101ceb <CreateEnv+0x23a>
			}
			percent_WS_pages_to_remove = strtol(arguments[4], NULL, 10);
f0101b16:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101b19:	83 c0 10             	add    $0x10,%eax
f0101b1c:	8b 00                	mov    (%eax),%eax
f0101b1e:	83 ec 04             	sub    $0x4,%esp
f0101b21:	6a 0a                	push   $0xa
f0101b23:	6a 00                	push   $0x0
f0101b25:	50                   	push   %eax
f0101b26:	e8 27 fa 02 00       	call   f0131552 <strtol>
f0101b2b:	83 c4 10             	add    $0x10,%esp
f0101b2e:	89 45 ec             	mov    %eax,-0x14(%ebp)
			LRUSecondListSize = strtol(arguments[3], NULL, 10);
f0101b31:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101b34:	83 c0 0c             	add    $0xc,%eax
f0101b37:	8b 00                	mov    (%eax),%eax
f0101b39:	83 ec 04             	sub    $0x4,%esp
f0101b3c:	6a 0a                	push   $0xa
f0101b3e:	6a 00                	push   $0x0
f0101b40:	50                   	push   %eax
f0101b41:	e8 0c fa 02 00       	call   f0131552 <strtol>
f0101b46:	83 c4 10             	add    $0x10,%esp
f0101b49:	89 45 f0             	mov    %eax,-0x10(%ebp)
			pageWSSize = strtol(arguments[2], NULL, 10);
f0101b4c:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101b4f:	83 c0 08             	add    $0x8,%eax
f0101b52:	8b 00                	mov    (%eax),%eax
f0101b54:	83 ec 04             	sub    $0x4,%esp
f0101b57:	6a 0a                	push   $0xa
f0101b59:	6a 00                	push   $0x0
f0101b5b:	50                   	push   %eax
f0101b5c:	e8 f1 f9 02 00       	call   f0131552 <strtol>
f0101b61:	83 c4 10             	add    $0x10,%esp
f0101b64:	89 45 f4             	mov    %eax,-0xc(%ebp)
			break;
f0101b67:	e9 c8 00 00 00       	jmp    f0101c34 <CreateEnv+0x183>
		case 4:
			if(!isPageReplacmentAlgorithmLRU(PG_REP_LRU_LISTS_APPROX))
f0101b6c:	83 ec 0c             	sub    $0xc,%esp
f0101b6f:	6a 02                	push   $0x2
f0101b71:	e8 cd c1 00 00       	call   f010dd43 <isPageReplacmentAlgorithmLRU>
f0101b76:	83 c4 10             	add    $0x10,%esp
f0101b79:	85 c0                	test   %eax,%eax
f0101b7b:	75 1d                	jne    f0101b9a <CreateEnv+0xe9>
			{
				percent_WS_pages_to_remove = strtol(arguments[3], NULL, 10);
f0101b7d:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101b80:	83 c0 0c             	add    $0xc,%eax
f0101b83:	8b 00                	mov    (%eax),%eax
f0101b85:	83 ec 04             	sub    $0x4,%esp
f0101b88:	6a 0a                	push   $0xa
f0101b8a:	6a 00                	push   $0x0
f0101b8c:	50                   	push   %eax
f0101b8d:	e8 c0 f9 02 00       	call   f0131552 <strtol>
f0101b92:	83 c4 10             	add    $0x10,%esp
f0101b95:	89 45 ec             	mov    %eax,-0x14(%ebp)
f0101b98:	eb 1b                	jmp    f0101bb5 <CreateEnv+0x104>
			}
			else
			{
				LRUSecondListSize = strtol(arguments[3], NULL, 10);
f0101b9a:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101b9d:	83 c0 0c             	add    $0xc,%eax
f0101ba0:	8b 00                	mov    (%eax),%eax
f0101ba2:	83 ec 04             	sub    $0x4,%esp
f0101ba5:	6a 0a                	push   $0xa
f0101ba7:	6a 00                	push   $0x0
f0101ba9:	50                   	push   %eax
f0101baa:	e8 a3 f9 02 00       	call   f0131552 <strtol>
f0101baf:	83 c4 10             	add    $0x10,%esp
f0101bb2:	89 45 f0             	mov    %eax,-0x10(%ebp)
			}
			pageWSSize = strtol(arguments[2], NULL, 10);
f0101bb5:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101bb8:	83 c0 08             	add    $0x8,%eax
f0101bbb:	8b 00                	mov    (%eax),%eax
f0101bbd:	83 ec 04             	sub    $0x4,%esp
f0101bc0:	6a 0a                	push   $0xa
f0101bc2:	6a 00                	push   $0x0
f0101bc4:	50                   	push   %eax
f0101bc5:	e8 88 f9 02 00       	call   f0131552 <strtol>
f0101bca:	83 c4 10             	add    $0x10,%esp
f0101bcd:	89 45 f4             	mov    %eax,-0xc(%ebp)
			break;
f0101bd0:	eb 62                	jmp    f0101c34 <CreateEnv+0x183>
		case 3:
			if(isPageReplacmentAlgorithmLRU(PG_REP_LRU_LISTS_APPROX))
f0101bd2:	83 ec 0c             	sub    $0xc,%esp
f0101bd5:	6a 02                	push   $0x2
f0101bd7:	e8 67 c1 00 00       	call   f010dd43 <isPageReplacmentAlgorithmLRU>
f0101bdc:	83 c4 10             	add    $0x10,%esp
f0101bdf:	85 c0                	test   %eax,%eax
f0101be1:	74 1a                	je     f0101bfd <CreateEnv+0x14c>
			{
				cprintf("ERROR: Current Replacement is LRU LISTS, Please specify a working set size in the 3rd arg and LRU second list size in the 4th arg, aborting.\n");
f0101be3:	83 ec 0c             	sub    $0xc,%esp
f0101be6:	68 04 49 13 f0       	push   $0xf0134904
f0101beb:	e8 1e f1 ff ff       	call   f0100d0e <cprintf>
f0101bf0:	83 c4 10             	add    $0x10,%esp
				return NULL;
f0101bf3:	b8 00 00 00 00       	mov    $0x0,%eax
f0101bf8:	e9 ee 00 00 00       	jmp    f0101ceb <CreateEnv+0x23a>
			}
			pageWSSize = strtol(arguments[2], NULL, 10);
f0101bfd:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101c00:	83 c0 08             	add    $0x8,%eax
f0101c03:	8b 00                	mov    (%eax),%eax
f0101c05:	83 ec 04             	sub    $0x4,%esp
f0101c08:	6a 0a                	push   $0xa
f0101c0a:	6a 00                	push   $0x0
f0101c0c:	50                   	push   %eax
f0101c0d:	e8 40 f9 02 00       	call   f0131552 <strtol>
f0101c12:	83 c4 10             	add    $0x10,%esp
f0101c15:	89 45 f4             	mov    %eax,-0xc(%ebp)
			break;
f0101c18:	eb 1a                	jmp    f0101c34 <CreateEnv+0x183>
		default:
			cprintf("ERROR: invalid number of args\nUsage: <command> <prog_name> <page_WS_size> [<LRU_second_list_size>] [<DYN_LOC_SCOPE_percent_WS_to_remove>]\naborting...\n");
f0101c1a:	83 ec 0c             	sub    $0xc,%esp
f0101c1d:	68 94 49 13 f0       	push   $0xf0134994
f0101c22:	e8 e7 f0 ff ff       	call   f0100d0e <cprintf>
f0101c27:	83 c4 10             	add    $0x10,%esp
			return NULL;
f0101c2a:	b8 00 00 00 00       	mov    $0x0,%eax
f0101c2f:	e9 b7 00 00 00       	jmp    f0101ceb <CreateEnv+0x23a>

			break;
		}
		if(pageWSSize > __PWS_MAX_SIZE)
f0101c34:	81 7d f4 88 13 00 00 	cmpl   $0x1388,-0xc(%ebp)
f0101c3b:	76 1f                	jbe    f0101c5c <CreateEnv+0x1ab>
		{
			cprintf("ERROR: size of WS must be less than or equal to %d... aborting", __PWS_MAX_SIZE);
f0101c3d:	83 ec 08             	sub    $0x8,%esp
f0101c40:	68 88 13 00 00       	push   $0x1388
f0101c45:	68 2c 4a 13 f0       	push   $0xf0134a2c
f0101c4a:	e8 bf f0 ff ff       	call   f0100d0e <cprintf>
f0101c4f:	83 c4 10             	add    $0x10,%esp
			return NULL;
f0101c52:	b8 00 00 00 00       	mov    $0x0,%eax
f0101c57:	e9 8f 00 00 00       	jmp    f0101ceb <CreateEnv+0x23a>
		}
		if(isPageReplacmentAlgorithmLRU(PG_REP_LRU_LISTS_APPROX))
f0101c5c:	83 ec 0c             	sub    $0xc,%esp
f0101c5f:	6a 02                	push   $0x2
f0101c61:	e8 dd c0 00 00       	call   f010dd43 <isPageReplacmentAlgorithmLRU>
f0101c66:	83 c4 10             	add    $0x10,%esp
f0101c69:	85 c0                	test   %eax,%eax
f0101c6b:	74 20                	je     f0101c8d <CreateEnv+0x1dc>
		{
			if (LRUSecondListSize > pageWSSize - 1)
f0101c6d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0101c70:	48                   	dec    %eax
f0101c71:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0101c74:	73 17                	jae    f0101c8d <CreateEnv+0x1dc>
			{
				cprintf("ERROR: size of LRU second list can't equal/exceed the size of the page WS... aborting\n");
f0101c76:	83 ec 0c             	sub    $0xc,%esp
f0101c79:	68 6c 4a 13 f0       	push   $0xf0134a6c
f0101c7e:	e8 8b f0 ff ff       	call   f0100d0e <cprintf>
f0101c83:	83 c4 10             	add    $0x10,%esp
				return NULL;
f0101c86:	b8 00 00 00 00       	mov    $0x0,%eax
f0101c8b:	eb 5e                	jmp    f0101ceb <CreateEnv+0x23a>
			}
		}
		assert(percent_WS_pages_to_remove >= 0 && percent_WS_pages_to_remove <= 100);
f0101c8d:	83 7d ec 64          	cmpl   $0x64,-0x14(%ebp)
f0101c91:	76 19                	jbe    f0101cac <CreateEnv+0x1fb>
f0101c93:	68 c4 4a 13 f0       	push   $0xf0134ac4
f0101c98:	68 09 4b 13 f0       	push   $0xf0134b09
f0101c9d:	68 5a 02 00 00       	push   $0x25a
f0101ca2:	68 8d 46 13 f0       	push   $0xf013468d
f0101ca7:	e8 59 e5 ff ff       	call   f0100205 <_panic>
		{
			LRUSecondListSize = __LRU_SNDLST_SIZE;
		}
	}
#endif
	assert(percent_WS_pages_to_remove >= 0 && percent_WS_pages_to_remove <= 100);
f0101cac:	83 7d ec 64          	cmpl   $0x64,-0x14(%ebp)
f0101cb0:	76 19                	jbe    f0101ccb <CreateEnv+0x21a>
f0101cb2:	68 c4 4a 13 f0       	push   $0xf0134ac4
f0101cb7:	68 09 4b 13 f0       	push   $0xf0134b09
f0101cbc:	68 71 02 00 00       	push   $0x271
f0101cc1:	68 8d 46 13 f0       	push   $0xf013468d
f0101cc6:	e8 3a e5 ff ff       	call   f0100205 <_panic>
	env = env_create(arguments[1], pageWSSize, LRUSecondListSize, percent_WS_pages_to_remove);
f0101ccb:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101cce:	83 c0 04             	add    $0x4,%eax
f0101cd1:	8b 00                	mov    (%eax),%eax
f0101cd3:	ff 75 ec             	pushl  -0x14(%ebp)
f0101cd6:	ff 75 f0             	pushl  -0x10(%ebp)
f0101cd9:	ff 75 f4             	pushl  -0xc(%ebp)
f0101cdc:	50                   	push   %eax
f0101cdd:	e8 81 71 00 00       	call   f0108e63 <env_create>
f0101ce2:	83 c4 10             	add    $0x10,%esp
f0101ce5:	89 45 e8             	mov    %eax,-0x18(%ebp)

	return env;
f0101ce8:	8b 45 e8             	mov    -0x18(%ebp),%eax
}
f0101ceb:	c9                   	leave  
f0101cec:	c3                   	ret    

f0101ced <command_run_program>:

int command_run_program(int number_of_arguments, char **arguments)
{
f0101ced:	55                   	push   %ebp
f0101cee:	89 e5                	mov    %esp,%ebp
f0101cf0:	83 ec 18             	sub    $0x18,%esp
	//[1] Create and initialize a new environment for the program to be run
	struct Env *env = CreateEnv(number_of_arguments, arguments);
f0101cf3:	83 ec 08             	sub    $0x8,%esp
f0101cf6:	ff 75 0c             	pushl  0xc(%ebp)
f0101cf9:	ff 75 08             	pushl  0x8(%ebp)
f0101cfc:	e8 b0 fd ff ff       	call   f0101ab1 <CreateEnv>
f0101d01:	83 c4 10             	add    $0x10,%esp
f0101d04:	89 45 f4             	mov    %eax,-0xc(%ebp)

	if(env == NULL) return 0;
f0101d07:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0101d0b:	75 07                	jne    f0101d14 <command_run_program+0x27>
f0101d0d:	b8 00 00 00 00       	mov    $0x0,%eax
f0101d12:	eb 46                	jmp    f0101d5a <command_run_program+0x6d>
	cprintf("\nEnvironment Id= %d\n",env->env_id);
f0101d14:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0101d17:	8b 40 4c             	mov    0x4c(%eax),%eax
f0101d1a:	83 ec 08             	sub    $0x8,%esp
f0101d1d:	50                   	push   %eax
f0101d1e:	68 1e 4b 13 f0       	push   $0xf0134b1e
f0101d23:	e8 e6 ef ff ff       	call   f0100d0e <cprintf>
f0101d28:	83 c4 10             	add    $0x10,%esp

	numOfKheapVACalls = 0;
f0101d2b:	c7 05 34 26 78 f0 00 	movl   $0x0,0xf0782634
f0101d32:	00 00 00 

	//[2] Run the created environment by adding it to the "ready" queue then invoke the scheduler to execute it
	sched_new_env(env);
f0101d35:	83 ec 0c             	sub    $0xc,%esp
f0101d38:	ff 75 f4             	pushl  -0xc(%ebp)
f0101d3b:	e8 c4 34 00 00       	call   f0105204 <sched_new_env>
f0101d40:	83 c4 10             	add    $0x10,%esp
	sched_run_env(env->env_id);
f0101d43:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0101d46:	8b 40 4c             	mov    0x4c(%eax),%eax
f0101d49:	83 ec 0c             	sub    $0xc,%esp
f0101d4c:	50                   	push   %eax
f0101d4d:	e8 cf 34 00 00       	call   f0105221 <sched_run_env>
f0101d52:	83 c4 10             	add    $0x10,%esp

	return 0;
f0101d55:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0101d5a:	c9                   	leave  
f0101d5b:	c3                   	ret    

f0101d5c <command_kill_program>:

int command_kill_program(int number_of_arguments, char **arguments)
{
f0101d5c:	55                   	push   %ebp
f0101d5d:	89 e5                	mov    %esp,%ebp
f0101d5f:	83 ec 18             	sub    $0x18,%esp
	int32 envId = strtol(arguments[1],NULL, 10);
f0101d62:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101d65:	83 c0 04             	add    $0x4,%eax
f0101d68:	8b 00                	mov    (%eax),%eax
f0101d6a:	83 ec 04             	sub    $0x4,%esp
f0101d6d:	6a 0a                	push   $0xa
f0101d6f:	6a 00                	push   $0x0
f0101d71:	50                   	push   %eax
f0101d72:	e8 db f7 02 00       	call   f0131552 <strtol>
f0101d77:	83 c4 10             	add    $0x10,%esp
f0101d7a:	89 45 f4             	mov    %eax,-0xc(%ebp)

	sched_kill_env(envId);
f0101d7d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0101d80:	83 ec 0c             	sub    $0xc,%esp
f0101d83:	50                   	push   %eax
f0101d84:	e8 b6 38 00 00       	call   f010563f <sched_kill_env>
f0101d89:	83 c4 10             	add    $0x10,%esp

	return 0;
f0101d8c:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0101d91:	c9                   	leave  
f0101d92:	c3                   	ret    

f0101d93 <commnad_load_env>:

int commnad_load_env(int number_of_arguments, char **arguments)
{
f0101d93:	55                   	push   %ebp
f0101d94:	89 e5                	mov    %esp,%ebp
f0101d96:	83 ec 18             	sub    $0x18,%esp
	struct Env *env = CreateEnv(number_of_arguments, arguments);
f0101d99:	83 ec 08             	sub    $0x8,%esp
f0101d9c:	ff 75 0c             	pushl  0xc(%ebp)
f0101d9f:	ff 75 08             	pushl  0x8(%ebp)
f0101da2:	e8 0a fd ff ff       	call   f0101ab1 <CreateEnv>
f0101da7:	83 c4 10             	add    $0x10,%esp
f0101daa:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if (env == NULL)
f0101dad:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0101db1:	75 07                	jne    f0101dba <commnad_load_env+0x27>
		return 0 ;
f0101db3:	b8 00 00 00 00       	mov    $0x0,%eax
f0101db8:	eb 2a                	jmp    f0101de4 <commnad_load_env+0x51>

	sched_new_env(env) ;
f0101dba:	83 ec 0c             	sub    $0xc,%esp
f0101dbd:	ff 75 f4             	pushl  -0xc(%ebp)
f0101dc0:	e8 3f 34 00 00       	call   f0105204 <sched_new_env>
f0101dc5:	83 c4 10             	add    $0x10,%esp

	cprintf("\nEnvironment Id= %d\n",env->env_id);
f0101dc8:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0101dcb:	8b 40 4c             	mov    0x4c(%eax),%eax
f0101dce:	83 ec 08             	sub    $0x8,%esp
f0101dd1:	50                   	push   %eax
f0101dd2:	68 1e 4b 13 f0       	push   $0xf0134b1e
f0101dd7:	e8 32 ef ff ff       	call   f0100d0e <cprintf>
f0101ddc:	83 c4 10             	add    $0x10,%esp
	return 0;
f0101ddf:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0101de4:	c9                   	leave  
f0101de5:	c3                   	ret    

f0101de6 <command_run_all>:

int command_run_all(int number_of_arguments, char **arguments)
{
f0101de6:	55                   	push   %ebp
f0101de7:	89 e5                	mov    %esp,%ebp
f0101de9:	83 ec 08             	sub    $0x8,%esp
	numOfKheapVACalls = 0;
f0101dec:	c7 05 34 26 78 f0 00 	movl   $0x0,0xf0782634
f0101df3:	00 00 00 
	sched_run_all();
f0101df6:	e8 51 30 00 00       	call   f0104e4c <sched_run_all>

	return 0 ;
f0101dfb:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0101e00:	c9                   	leave  
f0101e01:	c3                   	ret    

f0101e02 <command_print_all>:

int command_print_all(int number_of_arguments, char **arguments)
{
f0101e02:	55                   	push   %ebp
f0101e03:	89 e5                	mov    %esp,%ebp
f0101e05:	83 ec 08             	sub    $0x8,%esp
	sched_print_all();
f0101e08:	e8 35 2e 00 00       	call   f0104c42 <sched_print_all>

	return 0 ;
f0101e0d:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0101e12:	c9                   	leave  
f0101e13:	c3                   	ret    

f0101e14 <command_kill_all>:

int command_kill_all(int number_of_arguments, char **arguments)
{
f0101e14:	55                   	push   %ebp
f0101e15:	89 e5                	mov    %esp,%ebp
f0101e17:	83 ec 08             	sub    $0x8,%esp
	sched_kill_all();
f0101e1a:	e8 a0 30 00 00       	call   f0104ebf <sched_kill_all>

	return 0 ;
f0101e1f:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0101e24:	c9                   	leave  
f0101e25:	c3                   	ret    

f0101e26 <command_set_page_rep_LRU>:

int command_set_page_rep_LRU(int number_of_arguments, char **arguments)
{
f0101e26:	55                   	push   %ebp
f0101e27:	89 e5                	mov    %esp,%ebp
f0101e29:	83 ec 18             	sub    $0x18,%esp
	if (number_of_arguments < 2)
f0101e2c:	83 7d 08 01          	cmpl   $0x1,0x8(%ebp)
f0101e30:	7f 1a                	jg     f0101e4c <command_set_page_rep_LRU+0x26>
	{
		cprintf("ERROR: please specify the LRU Approx Type (1: TimeStamp Approx, 2: Lists Approx), aborting...\n");
f0101e32:	83 ec 0c             	sub    $0xc,%esp
f0101e35:	68 34 4b 13 f0       	push   $0xf0134b34
f0101e3a:	e8 cf ee ff ff       	call   f0100d0e <cprintf>
f0101e3f:	83 c4 10             	add    $0x10,%esp
		return 0;
f0101e42:	b8 00 00 00 00       	mov    $0x0,%eax
f0101e47:	e9 83 00 00 00       	jmp    f0101ecf <command_set_page_rep_LRU+0xa9>
	}
	int LRU_TYPE = strtol(arguments[1], NULL, 10) ;
f0101e4c:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101e4f:	83 c0 04             	add    $0x4,%eax
f0101e52:	8b 00                	mov    (%eax),%eax
f0101e54:	83 ec 04             	sub    $0x4,%esp
f0101e57:	6a 0a                	push   $0xa
f0101e59:	6a 00                	push   $0x0
f0101e5b:	50                   	push   %eax
f0101e5c:	e8 f1 f6 02 00       	call   f0131552 <strtol>
f0101e61:	83 c4 10             	add    $0x10,%esp
f0101e64:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if (LRU_TYPE == PG_REP_LRU_TIME_APPROX)
f0101e67:	83 7d f4 01          	cmpl   $0x1,-0xc(%ebp)
f0101e6b:	75 20                	jne    f0101e8d <command_set_page_rep_LRU+0x67>
	{
		setPageReplacmentAlgorithmLRU(LRU_TYPE);
f0101e6d:	83 ec 0c             	sub    $0xc,%esp
f0101e70:	ff 75 f4             	pushl  -0xc(%ebp)
f0101e73:	e8 40 be 00 00       	call   f010dcb8 <setPageReplacmentAlgorithmLRU>
f0101e78:	83 c4 10             	add    $0x10,%esp
		cprintf("Page replacement algorithm is now LRU with TimeStamp approximation\n");
f0101e7b:	83 ec 0c             	sub    $0xc,%esp
f0101e7e:	68 94 4b 13 f0       	push   $0xf0134b94
f0101e83:	e8 86 ee ff ff       	call   f0100d0e <cprintf>
f0101e88:	83 c4 10             	add    $0x10,%esp
f0101e8b:	eb 3d                	jmp    f0101eca <command_set_page_rep_LRU+0xa4>
	}
	else if (LRU_TYPE == PG_REP_LRU_LISTS_APPROX)
f0101e8d:	83 7d f4 02          	cmpl   $0x2,-0xc(%ebp)
f0101e91:	75 20                	jne    f0101eb3 <command_set_page_rep_LRU+0x8d>
	{
		setPageReplacmentAlgorithmLRU(LRU_TYPE);
f0101e93:	83 ec 0c             	sub    $0xc,%esp
f0101e96:	ff 75 f4             	pushl  -0xc(%ebp)
f0101e99:	e8 1a be 00 00       	call   f010dcb8 <setPageReplacmentAlgorithmLRU>
f0101e9e:	83 c4 10             	add    $0x10,%esp
		cprintf("Page replacement algorithm is now LRU with LISTS approximation\n");
f0101ea1:	83 ec 0c             	sub    $0xc,%esp
f0101ea4:	68 d8 4b 13 f0       	push   $0xf0134bd8
f0101ea9:	e8 60 ee ff ff       	call   f0100d0e <cprintf>
f0101eae:	83 c4 10             	add    $0x10,%esp
f0101eb1:	eb 17                	jmp    f0101eca <command_set_page_rep_LRU+0xa4>
	}
	else
	{
		cprintf("ERROR: Invalid LRU Approx Type (1: TimeStamp Approx, 2: Lists Approx), aborting...\n");
f0101eb3:	83 ec 0c             	sub    $0xc,%esp
f0101eb6:	68 18 4c 13 f0       	push   $0xf0134c18
f0101ebb:	e8 4e ee ff ff       	call   f0100d0e <cprintf>
f0101ec0:	83 c4 10             	add    $0x10,%esp
		return 0;
f0101ec3:	b8 00 00 00 00       	mov    $0x0,%eax
f0101ec8:	eb 05                	jmp    f0101ecf <command_set_page_rep_LRU+0xa9>
	}
	return 0;
f0101eca:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0101ecf:	c9                   	leave  
f0101ed0:	c3                   	ret    

f0101ed1 <command_set_page_rep_nthCLOCK>:
//2021
int command_set_page_rep_nthCLOCK(int number_of_arguments, char **arguments)
{
f0101ed1:	55                   	push   %ebp
f0101ed2:	89 e5                	mov    %esp,%ebp
f0101ed4:	83 ec 18             	sub    $0x18,%esp
	uint32 PageWSMaxSweeps = strtol(arguments[1], NULL, 10);
f0101ed7:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101eda:	83 c0 04             	add    $0x4,%eax
f0101edd:	8b 00                	mov    (%eax),%eax
f0101edf:	83 ec 04             	sub    $0x4,%esp
f0101ee2:	6a 0a                	push   $0xa
f0101ee4:	6a 00                	push   $0x0
f0101ee6:	50                   	push   %eax
f0101ee7:	e8 66 f6 02 00       	call   f0131552 <strtol>
f0101eec:	83 c4 10             	add    $0x10,%esp
f0101eef:	89 45 f4             	mov    %eax,-0xc(%ebp)
	setPageReplacmentAlgorithmNchanceCLOCK(PageWSMaxSweeps);
f0101ef2:	83 ec 0c             	sub    $0xc,%esp
f0101ef5:	ff 75 f4             	pushl  -0xc(%ebp)
f0101ef8:	e8 2e be 00 00       	call   f010dd2b <setPageReplacmentAlgorithmNchanceCLOCK>
f0101efd:	83 c4 10             	add    $0x10,%esp
	cprintf("Page replacement algorithm is now N chance CLOCK\n");
f0101f00:	83 ec 0c             	sub    $0xc,%esp
f0101f03:	68 6c 4c 13 f0       	push   $0xf0134c6c
f0101f08:	e8 01 ee ff ff       	call   f0100d0e <cprintf>
f0101f0d:	83 c4 10             	add    $0x10,%esp
	return 0;
f0101f10:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0101f15:	c9                   	leave  
f0101f16:	c3                   	ret    

f0101f17 <command_set_page_rep_CLOCK>:
int command_set_page_rep_CLOCK(int number_of_arguments, char **arguments)
{
f0101f17:	55                   	push   %ebp
f0101f18:	89 e5                	mov    %esp,%ebp
f0101f1a:	83 ec 08             	sub    $0x8,%esp
	setPageReplacmentAlgorithmCLOCK();
f0101f1d:	e8 c9 bd 00 00       	call   f010dceb <setPageReplacmentAlgorithmCLOCK>
	cprintf("Page replacement algorithm is now CLOCK\n");
f0101f22:	83 ec 0c             	sub    $0xc,%esp
f0101f25:	68 a0 4c 13 f0       	push   $0xf0134ca0
f0101f2a:	e8 df ed ff ff       	call   f0100d0e <cprintf>
f0101f2f:	83 c4 10             	add    $0x10,%esp
	return 0;
f0101f32:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0101f37:	c9                   	leave  
f0101f38:	c3                   	ret    

f0101f39 <command_set_page_rep_FIFO>:

int command_set_page_rep_FIFO(int number_of_arguments, char **arguments)
{
f0101f39:	55                   	push   %ebp
f0101f3a:	89 e5                	mov    %esp,%ebp
f0101f3c:	83 ec 08             	sub    $0x8,%esp
	setPageReplacmentAlgorithmFIFO();
f0101f3f:	e8 b7 bd 00 00       	call   f010dcfb <setPageReplacmentAlgorithmFIFO>
	cprintf("Page replacement algorithm is now FIFO\n");
f0101f44:	83 ec 0c             	sub    $0xc,%esp
f0101f47:	68 cc 4c 13 f0       	push   $0xf0134ccc
f0101f4c:	e8 bd ed ff ff       	call   f0100d0e <cprintf>
f0101f51:	83 c4 10             	add    $0x10,%esp
	return 0;
f0101f54:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0101f59:	c9                   	leave  
f0101f5a:	c3                   	ret    

f0101f5b <command_set_page_rep_ModifiedCLOCK>:

int command_set_page_rep_ModifiedCLOCK(int number_of_arguments, char **arguments)
{
f0101f5b:	55                   	push   %ebp
f0101f5c:	89 e5                	mov    %esp,%ebp
f0101f5e:	83 ec 08             	sub    $0x8,%esp
	setPageReplacmentAlgorithmModifiedCLOCK();
f0101f61:	e8 a5 bd 00 00       	call   f010dd0b <setPageReplacmentAlgorithmModifiedCLOCK>
	cprintf("Page replacement algorithm is now Modified CLOCK\n");
f0101f66:	83 ec 0c             	sub    $0xc,%esp
f0101f69:	68 f4 4c 13 f0       	push   $0xf0134cf4
f0101f6e:	e8 9b ed ff ff       	call   f0100d0e <cprintf>
f0101f73:	83 c4 10             	add    $0x10,%esp
	return 0;
f0101f76:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0101f7b:	c9                   	leave  
f0101f7c:	c3                   	ret    

f0101f7d <command_sch_RR>:

/*2018*///BEGIN======================================================
int command_sch_RR(int number_of_arguments, char **arguments)
{
f0101f7d:	55                   	push   %ebp
f0101f7e:	89 e5                	mov    %esp,%ebp
f0101f80:	83 ec 18             	sub    $0x18,%esp
	uint8 quantum = strtol(arguments[1], NULL, 10);
f0101f83:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101f86:	83 c0 04             	add    $0x4,%eax
f0101f89:	8b 00                	mov    (%eax),%eax
f0101f8b:	83 ec 04             	sub    $0x4,%esp
f0101f8e:	6a 0a                	push   $0xa
f0101f90:	6a 00                	push   $0x0
f0101f92:	50                   	push   %eax
f0101f93:	e8 ba f5 02 00       	call   f0131552 <strtol>
f0101f98:	83 c4 10             	add    $0x10,%esp
f0101f9b:	88 45 f7             	mov    %al,-0x9(%ebp)

	sched_init_RR(quantum);
f0101f9e:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
f0101fa2:	83 ec 0c             	sub    $0xc,%esp
f0101fa5:	50                   	push   %eax
f0101fa6:	e8 67 28 00 00       	call   f0104812 <sched_init_RR>
f0101fab:	83 c4 10             	add    $0x10,%esp
	cprintf("Scheduler is now set to Round Robin with quantum %d ms\n", quantums[0]);
f0101fae:	a1 ec 25 78 f0       	mov    0xf07825ec,%eax
f0101fb3:	8a 00                	mov    (%eax),%al
f0101fb5:	0f b6 c0             	movzbl %al,%eax
f0101fb8:	83 ec 08             	sub    $0x8,%esp
f0101fbb:	50                   	push   %eax
f0101fbc:	68 28 4d 13 f0       	push   $0xf0134d28
f0101fc1:	e8 48 ed ff ff       	call   f0100d0e <cprintf>
f0101fc6:	83 c4 10             	add    $0x10,%esp
	return 0;
f0101fc9:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0101fce:	c9                   	leave  
f0101fcf:	c3                   	ret    

f0101fd0 <command_sch_MLFQ>:
int command_sch_MLFQ(int number_of_arguments, char **arguments)
{
f0101fd0:	55                   	push   %ebp
f0101fd1:	89 e5                	mov    %esp,%ebp
f0101fd3:	53                   	push   %ebx
f0101fd4:	83 ec 24             	sub    $0x24,%esp
	uint8 numOfLevels = strtol(arguments[1], NULL, 10);
f0101fd7:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101fda:	83 c0 04             	add    $0x4,%eax
f0101fdd:	8b 00                	mov    (%eax),%eax
f0101fdf:	83 ec 04             	sub    $0x4,%esp
f0101fe2:	6a 0a                	push   $0xa
f0101fe4:	6a 00                	push   $0x0
f0101fe6:	50                   	push   %eax
f0101fe7:	e8 66 f5 02 00       	call   f0131552 <strtol>
f0101fec:	83 c4 10             	add    $0x10,%esp
f0101fef:	88 45 ef             	mov    %al,-0x11(%ebp)
	uint8 quantumOfEachLevel[MAX_ARGUMENTS - 2] ;
	for (int i = 2 ; i < number_of_arguments ; i++)
f0101ff2:	c7 45 f4 02 00 00 00 	movl   $0x2,-0xc(%ebp)
f0101ff9:	eb 2e                	jmp    f0102029 <command_sch_MLFQ+0x59>
	{
		quantumOfEachLevel[i-2] = strtol(arguments[i], NULL, 10);
f0101ffb:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0101ffe:	8d 58 fe             	lea    -0x2(%eax),%ebx
f0102001:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0102004:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f010200b:	8b 45 0c             	mov    0xc(%ebp),%eax
f010200e:	01 d0                	add    %edx,%eax
f0102010:	8b 00                	mov    (%eax),%eax
f0102012:	83 ec 04             	sub    $0x4,%esp
f0102015:	6a 0a                	push   $0xa
f0102017:	6a 00                	push   $0x0
f0102019:	50                   	push   %eax
f010201a:	e8 33 f5 02 00       	call   f0131552 <strtol>
f010201f:	83 c4 10             	add    $0x10,%esp
f0102022:	88 44 1d e1          	mov    %al,-0x1f(%ebp,%ebx,1)
}
int command_sch_MLFQ(int number_of_arguments, char **arguments)
{
	uint8 numOfLevels = strtol(arguments[1], NULL, 10);
	uint8 quantumOfEachLevel[MAX_ARGUMENTS - 2] ;
	for (int i = 2 ; i < number_of_arguments ; i++)
f0102026:	ff 45 f4             	incl   -0xc(%ebp)
f0102029:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010202c:	3b 45 08             	cmp    0x8(%ebp),%eax
f010202f:	7c ca                	jl     f0101ffb <command_sch_MLFQ+0x2b>
	{
		quantumOfEachLevel[i-2] = strtol(arguments[i], NULL, 10);
	}

	sched_init_MLFQ(numOfLevels, quantumOfEachLevel);
f0102031:	0f b6 45 ef          	movzbl -0x11(%ebp),%eax
f0102035:	83 ec 08             	sub    $0x8,%esp
f0102038:	8d 55 e1             	lea    -0x1f(%ebp),%edx
f010203b:	52                   	push   %edx
f010203c:	50                   	push   %eax
f010203d:	e8 5b 28 00 00       	call   f010489d <sched_init_MLFQ>
f0102042:	83 c4 10             	add    $0x10,%esp

	cprintf("Scheduler is now set to MLFQ with quantums: ");
f0102045:	83 ec 0c             	sub    $0xc,%esp
f0102048:	68 60 4d 13 f0       	push   $0xf0134d60
f010204d:	e8 bc ec ff ff       	call   f0100d0e <cprintf>
f0102052:	83 c4 10             	add    $0x10,%esp
	for (int i = 0 ; i < num_of_ready_queues; i++)
f0102055:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f010205c:	eb 24                	jmp    f0102082 <command_sch_MLFQ+0xb2>
	{
		cprintf("%d   ", quantums[i]) ;
f010205e:	8b 15 ec 25 78 f0    	mov    0xf07825ec,%edx
f0102064:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0102067:	01 d0                	add    %edx,%eax
f0102069:	8a 00                	mov    (%eax),%al
f010206b:	0f b6 c0             	movzbl %al,%eax
f010206e:	83 ec 08             	sub    $0x8,%esp
f0102071:	50                   	push   %eax
f0102072:	68 8d 4d 13 f0       	push   $0xf0134d8d
f0102077:	e8 92 ec ff ff       	call   f0100d0e <cprintf>
f010207c:	83 c4 10             	add    $0x10,%esp
	}

	sched_init_MLFQ(numOfLevels, quantumOfEachLevel);

	cprintf("Scheduler is now set to MLFQ with quantums: ");
	for (int i = 0 ; i < num_of_ready_queues; i++)
f010207f:	ff 45 f0             	incl   -0x10(%ebp)
f0102082:	a0 40 26 78 f0       	mov    0xf0782640,%al
f0102087:	0f b6 c0             	movzbl %al,%eax
f010208a:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f010208d:	7f cf                	jg     f010205e <command_sch_MLFQ+0x8e>
	{
		cprintf("%d   ", quantums[i]) ;
	}
	cprintf("\n");
f010208f:	83 ec 0c             	sub    $0xc,%esp
f0102092:	68 15 47 13 f0       	push   $0xf0134715
f0102097:	e8 72 ec ff ff       	call   f0100d0e <cprintf>
f010209c:	83 c4 10             	add    $0x10,%esp
	return 0;
f010209f:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01020a4:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f01020a7:	c9                   	leave  
f01020a8:	c3                   	ret    

f01020a9 <command_print_sch_method>:
int command_print_sch_method(int number_of_arguments, char **arguments)
{
f01020a9:	55                   	push   %ebp
f01020aa:	89 e5                	mov    %esp,%ebp
f01020ac:	83 ec 18             	sub    $0x18,%esp
	if (isSchedMethodMLFQ())
f01020af:	e8 8d 23 00 00       	call   f0104441 <isSchedMethodMLFQ>
f01020b4:	85 c0                	test   %eax,%eax
f01020b6:	74 5c                	je     f0102114 <command_print_sch_method+0x6b>
	{
		cprintf("Current scheduler method is MLFQ with quantums: ");
f01020b8:	83 ec 0c             	sub    $0xc,%esp
f01020bb:	68 94 4d 13 f0       	push   $0xf0134d94
f01020c0:	e8 49 ec ff ff       	call   f0100d0e <cprintf>
f01020c5:	83 c4 10             	add    $0x10,%esp
		for (int i = 0 ; i < num_of_ready_queues; i++)
f01020c8:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01020cf:	eb 24                	jmp    f01020f5 <command_print_sch_method+0x4c>
		{
			cprintf("%d   ", quantums[i]) ;
f01020d1:	8b 15 ec 25 78 f0    	mov    0xf07825ec,%edx
f01020d7:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01020da:	01 d0                	add    %edx,%eax
f01020dc:	8a 00                	mov    (%eax),%al
f01020de:	0f b6 c0             	movzbl %al,%eax
f01020e1:	83 ec 08             	sub    $0x8,%esp
f01020e4:	50                   	push   %eax
f01020e5:	68 8d 4d 13 f0       	push   $0xf0134d8d
f01020ea:	e8 1f ec ff ff       	call   f0100d0e <cprintf>
f01020ef:	83 c4 10             	add    $0x10,%esp
int command_print_sch_method(int number_of_arguments, char **arguments)
{
	if (isSchedMethodMLFQ())
	{
		cprintf("Current scheduler method is MLFQ with quantums: ");
		for (int i = 0 ; i < num_of_ready_queues; i++)
f01020f2:	ff 45 f4             	incl   -0xc(%ebp)
f01020f5:	a0 40 26 78 f0       	mov    0xf0782640,%al
f01020fa:	0f b6 c0             	movzbl %al,%eax
f01020fd:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0102100:	7f cf                	jg     f01020d1 <command_print_sch_method+0x28>
		{
			cprintf("%d   ", quantums[i]) ;
		}
		cprintf("\n");
f0102102:	83 ec 0c             	sub    $0xc,%esp
f0102105:	68 15 47 13 f0       	push   $0xf0134715
f010210a:	e8 ff eb ff ff       	call   f0100d0e <cprintf>
f010210f:	83 c4 10             	add    $0x10,%esp
f0102112:	eb 36                	jmp    f010214a <command_print_sch_method+0xa1>
	}
	else if (isSchedMethodRR())
f0102114:	e8 0e 23 00 00       	call   f0104427 <isSchedMethodRR>
f0102119:	85 c0                	test   %eax,%eax
f010211b:	74 1d                	je     f010213a <command_print_sch_method+0x91>
	{
		cprintf("Current scheduler method is Round Robin with quantum %d ms\n", quantums[0]);
f010211d:	a1 ec 25 78 f0       	mov    0xf07825ec,%eax
f0102122:	8a 00                	mov    (%eax),%al
f0102124:	0f b6 c0             	movzbl %al,%eax
f0102127:	83 ec 08             	sub    $0x8,%esp
f010212a:	50                   	push   %eax
f010212b:	68 c8 4d 13 f0       	push   $0xf0134dc8
f0102130:	e8 d9 eb ff ff       	call   f0100d0e <cprintf>
f0102135:	83 c4 10             	add    $0x10,%esp
f0102138:	eb 10                	jmp    f010214a <command_print_sch_method+0xa1>
	}

	else
		cprintf("Current scheduler method is UNDEFINED\n");
f010213a:	83 ec 0c             	sub    $0xc,%esp
f010213d:	68 04 4e 13 f0       	push   $0xf0134e04
f0102142:	e8 c7 eb ff ff       	call   f0100d0e <cprintf>
f0102147:	83 c4 10             	add    $0x10,%esp

	return 0;
f010214a:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010214f:	c9                   	leave  
f0102150:	c3                   	ret    

f0102151 <command_sch_test>:
int command_sch_test(int number_of_arguments, char **arguments)
{
f0102151:	55                   	push   %ebp
f0102152:	89 e5                	mov    %esp,%ebp
f0102154:	83 ec 18             	sub    $0x18,%esp
	int status  = strtol(arguments[1], NULL, 10);
f0102157:	8b 45 0c             	mov    0xc(%ebp),%eax
f010215a:	83 c0 04             	add    $0x4,%eax
f010215d:	8b 00                	mov    (%eax),%eax
f010215f:	83 ec 04             	sub    $0x4,%esp
f0102162:	6a 0a                	push   $0xa
f0102164:	6a 00                	push   $0x0
f0102166:	50                   	push   %eax
f0102167:	e8 e6 f3 02 00       	call   f0131552 <strtol>
f010216c:	83 c4 10             	add    $0x10,%esp
f010216f:	89 45 f4             	mov    %eax,-0xc(%ebp)
	chksch(status);
f0102172:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0102175:	0f b6 c0             	movzbl %al,%eax
f0102178:	83 ec 0c             	sub    $0xc,%esp
f010217b:	50                   	push   %eax
f010217c:	e8 f7 e2 02 00       	call   f0130478 <chksch>
f0102181:	83 c4 10             	add    $0x10,%esp
	if (status == 0)
f0102184:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0102188:	75 12                	jne    f010219c <command_sch_test+0x4b>
		cprintf("Testing the scheduler is TURNED OFF\n");
f010218a:	83 ec 0c             	sub    $0xc,%esp
f010218d:	68 2c 4e 13 f0       	push   $0xf0134e2c
f0102192:	e8 77 eb ff ff       	call   f0100d0e <cprintf>
f0102197:	83 c4 10             	add    $0x10,%esp
f010219a:	eb 16                	jmp    f01021b2 <command_sch_test+0x61>
	else if (status == 1)
f010219c:	83 7d f4 01          	cmpl   $0x1,-0xc(%ebp)
f01021a0:	75 10                	jne    f01021b2 <command_sch_test+0x61>
		cprintf("Testing the scheduler is TURNED ON\n");
f01021a2:	83 ec 0c             	sub    $0xc,%esp
f01021a5:	68 54 4e 13 f0       	push   $0xf0134e54
f01021aa:	e8 5f eb ff ff       	call   f0100d0e <cprintf>
f01021af:	83 c4 10             	add    $0x10,%esp
	return 0;
f01021b2:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01021b7:	c9                   	leave  
f01021b8:	c3                   	ret    

f01021b9 <command_print_page_rep>:
/*2018*///END======================================================


/*2015*///BEGIN======================================================
int command_print_page_rep(int number_of_arguments, char **arguments)
{
f01021b9:	55                   	push   %ebp
f01021ba:	89 e5                	mov    %esp,%ebp
f01021bc:	83 ec 08             	sub    $0x8,%esp
	if (isPageReplacmentAlgorithmCLOCK())
f01021bf:	e8 95 bb 00 00       	call   f010dd59 <isPageReplacmentAlgorithmCLOCK>
f01021c4:	85 c0                	test   %eax,%eax
f01021c6:	74 15                	je     f01021dd <command_print_page_rep+0x24>
		cprintf("Page replacement algorithm is CLOCK\n");
f01021c8:	83 ec 0c             	sub    $0xc,%esp
f01021cb:	68 78 4e 13 f0       	push   $0xf0134e78
f01021d0:	e8 39 eb ff ff       	call   f0100d0e <cprintf>
f01021d5:	83 c4 10             	add    $0x10,%esp
f01021d8:	e9 8c 00 00 00       	jmp    f0102269 <command_print_page_rep+0xb0>
	else if (isPageReplacmentAlgorithmLRU(PG_REP_LRU_TIME_APPROX))
f01021dd:	83 ec 0c             	sub    $0xc,%esp
f01021e0:	6a 01                	push   $0x1
f01021e2:	e8 5c bb 00 00       	call   f010dd43 <isPageReplacmentAlgorithmLRU>
f01021e7:	83 c4 10             	add    $0x10,%esp
f01021ea:	85 c0                	test   %eax,%eax
f01021ec:	74 12                	je     f0102200 <command_print_page_rep+0x47>
		cprintf("Page replacement algorithm is LRU with TimeStamp approximation\n");
f01021ee:	83 ec 0c             	sub    $0xc,%esp
f01021f1:	68 a0 4e 13 f0       	push   $0xf0134ea0
f01021f6:	e8 13 eb ff ff       	call   f0100d0e <cprintf>
f01021fb:	83 c4 10             	add    $0x10,%esp
f01021fe:	eb 69                	jmp    f0102269 <command_print_page_rep+0xb0>
	else if (isPageReplacmentAlgorithmLRU(PG_REP_LRU_LISTS_APPROX))
f0102200:	83 ec 0c             	sub    $0xc,%esp
f0102203:	6a 02                	push   $0x2
f0102205:	e8 39 bb 00 00       	call   f010dd43 <isPageReplacmentAlgorithmLRU>
f010220a:	83 c4 10             	add    $0x10,%esp
f010220d:	85 c0                	test   %eax,%eax
f010220f:	74 12                	je     f0102223 <command_print_page_rep+0x6a>
		cprintf("Page replacement algorithm is LRU with LISTS approximation\n");
f0102211:	83 ec 0c             	sub    $0xc,%esp
f0102214:	68 e0 4e 13 f0       	push   $0xf0134ee0
f0102219:	e8 f0 ea ff ff       	call   f0100d0e <cprintf>
f010221e:	83 c4 10             	add    $0x10,%esp
f0102221:	eb 46                	jmp    f0102269 <command_print_page_rep+0xb0>
	else if (isPageReplacmentAlgorithmFIFO())
f0102223:	e8 4c bb 00 00       	call   f010dd74 <isPageReplacmentAlgorithmFIFO>
f0102228:	85 c0                	test   %eax,%eax
f010222a:	74 12                	je     f010223e <command_print_page_rep+0x85>
		cprintf("Page replacement algorithm is FIFO\n");
f010222c:	83 ec 0c             	sub    $0xc,%esp
f010222f:	68 1c 4f 13 f0       	push   $0xf0134f1c
f0102234:	e8 d5 ea ff ff       	call   f0100d0e <cprintf>
f0102239:	83 c4 10             	add    $0x10,%esp
f010223c:	eb 2b                	jmp    f0102269 <command_print_page_rep+0xb0>
	else if (isPageReplacmentAlgorithmModifiedCLOCK())
f010223e:	e8 4c bb 00 00       	call   f010dd8f <isPageReplacmentAlgorithmModifiedCLOCK>
f0102243:	85 c0                	test   %eax,%eax
f0102245:	74 12                	je     f0102259 <command_print_page_rep+0xa0>
		cprintf("Page replacement algorithm is Modified CLOCK\n");
f0102247:	83 ec 0c             	sub    $0xc,%esp
f010224a:	68 40 4f 13 f0       	push   $0xf0134f40
f010224f:	e8 ba ea ff ff       	call   f0100d0e <cprintf>
f0102254:	83 c4 10             	add    $0x10,%esp
f0102257:	eb 10                	jmp    f0102269 <command_print_page_rep+0xb0>
	else
		cprintf("Page replacement algorithm is UNDEFINED\n");
f0102259:	83 ec 0c             	sub    $0xc,%esp
f010225c:	68 70 4f 13 f0       	push   $0xf0134f70
f0102261:	e8 a8 ea ff ff       	call   f0100d0e <cprintf>
f0102266:	83 c4 10             	add    $0x10,%esp

	return 0;
f0102269:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010226e:	c9                   	leave  
f010226f:	c3                   	ret    

f0102270 <command_set_uheap_plac_FIRSTFIT>:


int command_set_uheap_plac_FIRSTFIT(int number_of_arguments, char **arguments)
{
f0102270:	55                   	push   %ebp
f0102271:	89 e5                	mov    %esp,%ebp
f0102273:	83 ec 08             	sub    $0x8,%esp
	setUHeapPlacementStrategyFIRSTFIT();
f0102276:	e8 18 ed ff ff       	call   f0100f93 <setUHeapPlacementStrategyFIRSTFIT>
	cprintf("User Heap placement strategy is now FIRST FIT\n");
f010227b:	83 ec 0c             	sub    $0xc,%esp
f010227e:	68 9c 4f 13 f0       	push   $0xf0134f9c
f0102283:	e8 86 ea ff ff       	call   f0100d0e <cprintf>
f0102288:	83 c4 10             	add    $0x10,%esp
	return 0;
f010228b:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102290:	c9                   	leave  
f0102291:	c3                   	ret    

f0102292 <command_set_uheap_plac_BESTFIT>:

int command_set_uheap_plac_BESTFIT(int number_of_arguments, char **arguments)
{
f0102292:	55                   	push   %ebp
f0102293:	89 e5                	mov    %esp,%ebp
f0102295:	83 ec 08             	sub    $0x8,%esp
	setUHeapPlacementStrategyBESTFIT();
f0102298:	e8 06 ed ff ff       	call   f0100fa3 <setUHeapPlacementStrategyBESTFIT>
	cprintf("User Heap placement strategy is now BEST FIT\n");
f010229d:	83 ec 0c             	sub    $0xc,%esp
f01022a0:	68 cc 4f 13 f0       	push   $0xf0134fcc
f01022a5:	e8 64 ea ff ff       	call   f0100d0e <cprintf>
f01022aa:	83 c4 10             	add    $0x10,%esp
	return 0;
f01022ad:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01022b2:	c9                   	leave  
f01022b3:	c3                   	ret    

f01022b4 <command_set_uheap_plac_NEXTFIT>:

int command_set_uheap_plac_NEXTFIT(int number_of_arguments, char **arguments)
{
f01022b4:	55                   	push   %ebp
f01022b5:	89 e5                	mov    %esp,%ebp
f01022b7:	83 ec 08             	sub    $0x8,%esp
	setUHeapPlacementStrategyNEXTFIT();
f01022ba:	e8 f4 ec ff ff       	call   f0100fb3 <setUHeapPlacementStrategyNEXTFIT>
	cprintf("User Heap placement strategy is now NEXT FIT\n");
f01022bf:	83 ec 0c             	sub    $0xc,%esp
f01022c2:	68 fc 4f 13 f0       	push   $0xf0134ffc
f01022c7:	e8 42 ea ff ff       	call   f0100d0e <cprintf>
f01022cc:	83 c4 10             	add    $0x10,%esp
	return 0;
f01022cf:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01022d4:	c9                   	leave  
f01022d5:	c3                   	ret    

f01022d6 <command_set_uheap_plac_WORSTFIT>:
int command_set_uheap_plac_WORSTFIT(int number_of_arguments, char **arguments)
{
f01022d6:	55                   	push   %ebp
f01022d7:	89 e5                	mov    %esp,%ebp
f01022d9:	83 ec 08             	sub    $0x8,%esp
	setUHeapPlacementStrategyWORSTFIT();
f01022dc:	e8 e2 ec ff ff       	call   f0100fc3 <setUHeapPlacementStrategyWORSTFIT>
	cprintf("User Heap placement strategy is now WORST FIT\n");
f01022e1:	83 ec 0c             	sub    $0xc,%esp
f01022e4:	68 2c 50 13 f0       	push   $0xf013502c
f01022e9:	e8 20 ea ff ff       	call   f0100d0e <cprintf>
f01022ee:	83 c4 10             	add    $0x10,%esp
	return 0;
f01022f1:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01022f6:	c9                   	leave  
f01022f7:	c3                   	ret    

f01022f8 <command_print_uheap_plac>:

int command_print_uheap_plac(int number_of_arguments, char **arguments)
{
f01022f8:	55                   	push   %ebp
f01022f9:	89 e5                	mov    %esp,%ebp
f01022fb:	83 ec 08             	sub    $0x8,%esp
	if (isUHeapPlacementStrategyFIRSTFIT())
f01022fe:	e8 d0 ec ff ff       	call   f0100fd3 <isUHeapPlacementStrategyFIRSTFIT>
f0102303:	84 c0                	test   %al,%al
f0102305:	74 12                	je     f0102319 <command_print_uheap_plac+0x21>
		cprintf("User Heap placement strategy is FIRST FIT\n");
f0102307:	83 ec 0c             	sub    $0xc,%esp
f010230a:	68 5c 50 13 f0       	push   $0xf013505c
f010230f:	e8 fa e9 ff ff       	call   f0100d0e <cprintf>
f0102314:	83 c4 10             	add    $0x10,%esp
f0102317:	eb 61                	jmp    f010237a <command_print_uheap_plac+0x82>
	else if (isUHeapPlacementStrategyBESTFIT())
f0102319:	e8 ca ec ff ff       	call   f0100fe8 <isUHeapPlacementStrategyBESTFIT>
f010231e:	84 c0                	test   %al,%al
f0102320:	74 12                	je     f0102334 <command_print_uheap_plac+0x3c>
		cprintf("User Heap placement strategy is BEST FIT\n");
f0102322:	83 ec 0c             	sub    $0xc,%esp
f0102325:	68 88 50 13 f0       	push   $0xf0135088
f010232a:	e8 df e9 ff ff       	call   f0100d0e <cprintf>
f010232f:	83 c4 10             	add    $0x10,%esp
f0102332:	eb 46                	jmp    f010237a <command_print_uheap_plac+0x82>
	else if (isUHeapPlacementStrategyNEXTFIT())
f0102334:	e8 c4 ec ff ff       	call   f0100ffd <isUHeapPlacementStrategyNEXTFIT>
f0102339:	84 c0                	test   %al,%al
f010233b:	74 12                	je     f010234f <command_print_uheap_plac+0x57>
		cprintf("User Heap placement strategy is NEXT FIT\n");
f010233d:	83 ec 0c             	sub    $0xc,%esp
f0102340:	68 b4 50 13 f0       	push   $0xf01350b4
f0102345:	e8 c4 e9 ff ff       	call   f0100d0e <cprintf>
f010234a:	83 c4 10             	add    $0x10,%esp
f010234d:	eb 2b                	jmp    f010237a <command_print_uheap_plac+0x82>
	else if (isUHeapPlacementStrategyWORSTFIT())
f010234f:	e8 be ec ff ff       	call   f0101012 <isUHeapPlacementStrategyWORSTFIT>
f0102354:	84 c0                	test   %al,%al
f0102356:	74 12                	je     f010236a <command_print_uheap_plac+0x72>
		cprintf("User Heap placement strategy is WORST FIT\n");
f0102358:	83 ec 0c             	sub    $0xc,%esp
f010235b:	68 e0 50 13 f0       	push   $0xf01350e0
f0102360:	e8 a9 e9 ff ff       	call   f0100d0e <cprintf>
f0102365:	83 c4 10             	add    $0x10,%esp
f0102368:	eb 10                	jmp    f010237a <command_print_uheap_plac+0x82>
	else
		cprintf("User Heap placement strategy is UNDEFINED\n");
f010236a:	83 ec 0c             	sub    $0xc,%esp
f010236d:	68 0c 51 13 f0       	push   $0xf013510c
f0102372:	e8 97 e9 ff ff       	call   f0100d0e <cprintf>
f0102377:	83 c4 10             	add    $0x10,%esp

	return 0;
f010237a:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010237f:	c9                   	leave  
f0102380:	c3                   	ret    

f0102381 <command_set_kheap_plac_CONTALLOC>:
/*2015*///END======================================================

/*2017*///BEGIN======================================================

int command_set_kheap_plac_CONTALLOC(int number_of_arguments, char **arguments)
{
f0102381:	55                   	push   %ebp
f0102382:	89 e5                	mov    %esp,%ebp
f0102384:	83 ec 08             	sub    $0x8,%esp
	setKHeapPlacementStrategyCONTALLOC();
f0102387:	e8 4f eb ff ff       	call   f0100edb <setKHeapPlacementStrategyCONTALLOC>
	cprintf("Kernel Heap placement strategy is now FIRST FIT\n");
f010238c:	83 ec 0c             	sub    $0xc,%esp
f010238f:	68 38 51 13 f0       	push   $0xf0135138
f0102394:	e8 75 e9 ff ff       	call   f0100d0e <cprintf>
f0102399:	83 c4 10             	add    $0x10,%esp
	return 0;
f010239c:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01023a1:	c9                   	leave  
f01023a2:	c3                   	ret    

f01023a3 <command_set_kheap_plac_FIRSTFIT>:

int command_set_kheap_plac_FIRSTFIT(int number_of_arguments, char **arguments)
{
f01023a3:	55                   	push   %ebp
f01023a4:	89 e5                	mov    %esp,%ebp
f01023a6:	83 ec 08             	sub    $0x8,%esp
	setKHeapPlacementStrategyFIRSTFIT();
f01023a9:	e8 3d eb ff ff       	call   f0100eeb <setKHeapPlacementStrategyFIRSTFIT>
	cprintf("Kernel Heap placement strategy is now FIRST FIT\n");
f01023ae:	83 ec 0c             	sub    $0xc,%esp
f01023b1:	68 38 51 13 f0       	push   $0xf0135138
f01023b6:	e8 53 e9 ff ff       	call   f0100d0e <cprintf>
f01023bb:	83 c4 10             	add    $0x10,%esp
	return 0;
f01023be:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01023c3:	c9                   	leave  
f01023c4:	c3                   	ret    

f01023c5 <command_set_kheap_plac_BESTFIT>:

int command_set_kheap_plac_BESTFIT(int number_of_arguments, char **arguments)
{
f01023c5:	55                   	push   %ebp
f01023c6:	89 e5                	mov    %esp,%ebp
f01023c8:	83 ec 08             	sub    $0x8,%esp
	setKHeapPlacementStrategyBESTFIT();
f01023cb:	e8 2b eb ff ff       	call   f0100efb <setKHeapPlacementStrategyBESTFIT>
	cprintf("Kernel Heap placement strategy is now BEST FIT\n");
f01023d0:	83 ec 0c             	sub    $0xc,%esp
f01023d3:	68 6c 51 13 f0       	push   $0xf013516c
f01023d8:	e8 31 e9 ff ff       	call   f0100d0e <cprintf>
f01023dd:	83 c4 10             	add    $0x10,%esp
	return 0;
f01023e0:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01023e5:	c9                   	leave  
f01023e6:	c3                   	ret    

f01023e7 <command_set_kheap_plac_NEXTFIT>:

int command_set_kheap_plac_NEXTFIT(int number_of_arguments, char **arguments)
{
f01023e7:	55                   	push   %ebp
f01023e8:	89 e5                	mov    %esp,%ebp
f01023ea:	83 ec 08             	sub    $0x8,%esp
	setKHeapPlacementStrategyNEXTFIT();
f01023ed:	e8 19 eb ff ff       	call   f0100f0b <setKHeapPlacementStrategyNEXTFIT>
	cprintf("Kernel Heap placement strategy is now NEXT FIT\n");
f01023f2:	83 ec 0c             	sub    $0xc,%esp
f01023f5:	68 9c 51 13 f0       	push   $0xf013519c
f01023fa:	e8 0f e9 ff ff       	call   f0100d0e <cprintf>
f01023ff:	83 c4 10             	add    $0x10,%esp
	return 0;
f0102402:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102407:	c9                   	leave  
f0102408:	c3                   	ret    

f0102409 <command_set_kheap_plac_WORSTFIT>:
int command_set_kheap_plac_WORSTFIT(int number_of_arguments, char **arguments)
{
f0102409:	55                   	push   %ebp
f010240a:	89 e5                	mov    %esp,%ebp
f010240c:	83 ec 08             	sub    $0x8,%esp
	setKHeapPlacementStrategyWORSTFIT();
f010240f:	e8 07 eb ff ff       	call   f0100f1b <setKHeapPlacementStrategyWORSTFIT>
	cprintf("Kernel Heap placement strategy is now WORST FIT\n");
f0102414:	83 ec 0c             	sub    $0xc,%esp
f0102417:	68 cc 51 13 f0       	push   $0xf01351cc
f010241c:	e8 ed e8 ff ff       	call   f0100d0e <cprintf>
f0102421:	83 c4 10             	add    $0x10,%esp
	return 0;
f0102424:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102429:	c9                   	leave  
f010242a:	c3                   	ret    

f010242b <command_print_kheap_plac>:

int command_print_kheap_plac(int number_of_arguments, char **arguments)
{
f010242b:	55                   	push   %ebp
f010242c:	89 e5                	mov    %esp,%ebp
f010242e:	83 ec 08             	sub    $0x8,%esp
	if (isKHeapPlacementStrategyCONTALLOC())
f0102431:	e8 f5 ea ff ff       	call   f0100f2b <isKHeapPlacementStrategyCONTALLOC>
f0102436:	84 c0                	test   %al,%al
f0102438:	74 12                	je     f010244c <command_print_kheap_plac+0x21>
		cprintf("Kernel Heap placement strategy is CONTINUOUS ALLOCATION\n");
f010243a:	83 ec 0c             	sub    $0xc,%esp
f010243d:	68 00 52 13 f0       	push   $0xf0135200
f0102442:	e8 c7 e8 ff ff       	call   f0100d0e <cprintf>
f0102447:	83 c4 10             	add    $0x10,%esp
f010244a:	eb 7c                	jmp    f01024c8 <command_print_kheap_plac+0x9d>
	else if (isKHeapPlacementStrategyFIRSTFIT())
f010244c:	e8 ee ea ff ff       	call   f0100f3f <isKHeapPlacementStrategyFIRSTFIT>
f0102451:	84 c0                	test   %al,%al
f0102453:	74 12                	je     f0102467 <command_print_kheap_plac+0x3c>
		cprintf("Kernel Heap placement strategy is FIRST FIT\n");
f0102455:	83 ec 0c             	sub    $0xc,%esp
f0102458:	68 3c 52 13 f0       	push   $0xf013523c
f010245d:	e8 ac e8 ff ff       	call   f0100d0e <cprintf>
f0102462:	83 c4 10             	add    $0x10,%esp
f0102465:	eb 61                	jmp    f01024c8 <command_print_kheap_plac+0x9d>
	else if (isKHeapPlacementStrategyBESTFIT())
f0102467:	e8 e8 ea ff ff       	call   f0100f54 <isKHeapPlacementStrategyBESTFIT>
f010246c:	84 c0                	test   %al,%al
f010246e:	74 12                	je     f0102482 <command_print_kheap_plac+0x57>
		cprintf("Kernel Heap placement strategy is BEST FIT\n");
f0102470:	83 ec 0c             	sub    $0xc,%esp
f0102473:	68 6c 52 13 f0       	push   $0xf013526c
f0102478:	e8 91 e8 ff ff       	call   f0100d0e <cprintf>
f010247d:	83 c4 10             	add    $0x10,%esp
f0102480:	eb 46                	jmp    f01024c8 <command_print_kheap_plac+0x9d>
	else if (isKHeapPlacementStrategyNEXTFIT())
f0102482:	e8 e2 ea ff ff       	call   f0100f69 <isKHeapPlacementStrategyNEXTFIT>
f0102487:	84 c0                	test   %al,%al
f0102489:	74 12                	je     f010249d <command_print_kheap_plac+0x72>
		cprintf("Kernel Heap placement strategy is NEXT FIT\n");
f010248b:	83 ec 0c             	sub    $0xc,%esp
f010248e:	68 98 52 13 f0       	push   $0xf0135298
f0102493:	e8 76 e8 ff ff       	call   f0100d0e <cprintf>
f0102498:	83 c4 10             	add    $0x10,%esp
f010249b:	eb 2b                	jmp    f01024c8 <command_print_kheap_plac+0x9d>
	else if (isKHeapPlacementStrategyWORSTFIT())
f010249d:	e8 dc ea ff ff       	call   f0100f7e <isKHeapPlacementStrategyWORSTFIT>
f01024a2:	84 c0                	test   %al,%al
f01024a4:	74 12                	je     f01024b8 <command_print_kheap_plac+0x8d>
		cprintf("Kernel Heap placement strategy is WORST FIT\n");
f01024a6:	83 ec 0c             	sub    $0xc,%esp
f01024a9:	68 c4 52 13 f0       	push   $0xf01352c4
f01024ae:	e8 5b e8 ff ff       	call   f0100d0e <cprintf>
f01024b3:	83 c4 10             	add    $0x10,%esp
f01024b6:	eb 10                	jmp    f01024c8 <command_print_kheap_plac+0x9d>
	else
		cprintf("Kernel Heap placement strategy is UNDEFINED\n");
f01024b8:	83 ec 0c             	sub    $0xc,%esp
f01024bb:	68 f4 52 13 f0       	push   $0xf01352f4
f01024c0:	e8 49 e8 ff ff       	call   f0100d0e <cprintf>
f01024c5:	83 c4 10             	add    $0x10,%esp

	return 0;
f01024c8:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01024cd:	c9                   	leave  
f01024ce:	c3                   	ret    

f01024cf <command_disable_modified_buffer>:

/*2017*///END======================================================

int command_disable_modified_buffer(int number_of_arguments, char **arguments)
{
f01024cf:	55                   	push   %ebp
f01024d0:	89 e5                	mov    %esp,%ebp
f01024d2:	83 ec 08             	sub    $0x8,%esp
	if(!isBufferingEnabled())
f01024d5:	e8 2c b9 00 00       	call   f010de06 <isBufferingEnabled>
f01024da:	84 c0                	test   %al,%al
f01024dc:	75 12                	jne    f01024f0 <command_disable_modified_buffer+0x21>
	{
		cprintf("Buffering is not enabled. Please enable buffering first.\n");
f01024de:	83 ec 0c             	sub    $0xc,%esp
f01024e1:	68 24 53 13 f0       	push   $0xf0135324
f01024e6:	e8 23 e8 ff ff       	call   f0100d0e <cprintf>
f01024eb:	83 c4 10             	add    $0x10,%esp
f01024ee:	eb 1d                	jmp    f010250d <command_disable_modified_buffer+0x3e>
	}
	else
	{
		enableModifiedBuffer(0);
f01024f0:	83 ec 0c             	sub    $0xc,%esp
f01024f3:	6a 00                	push   $0x0
f01024f5:	e8 e6 b8 00 00       	call   f010dde0 <enableModifiedBuffer>
f01024fa:	83 c4 10             	add    $0x10,%esp
		cprintf("Modified Buffer is now DISABLED\n");
f01024fd:	83 ec 0c             	sub    $0xc,%esp
f0102500:	68 60 53 13 f0       	push   $0xf0135360
f0102505:	e8 04 e8 ff ff       	call   f0100d0e <cprintf>
f010250a:	83 c4 10             	add    $0x10,%esp
	}
	return 0;
f010250d:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102512:	c9                   	leave  
f0102513:	c3                   	ret    

f0102514 <command_enable_modified_buffer>:


int command_enable_modified_buffer(int number_of_arguments, char **arguments)
{
f0102514:	55                   	push   %ebp
f0102515:	89 e5                	mov    %esp,%ebp
f0102517:	83 ec 08             	sub    $0x8,%esp
	if(!isBufferingEnabled())
f010251a:	e8 e7 b8 00 00       	call   f010de06 <isBufferingEnabled>
f010251f:	84 c0                	test   %al,%al
f0102521:	75 12                	jne    f0102535 <command_enable_modified_buffer+0x21>
	{
		cprintf("Buffering is not enabled. Please enable buffering first.\n");
f0102523:	83 ec 0c             	sub    $0xc,%esp
f0102526:	68 24 53 13 f0       	push   $0xf0135324
f010252b:	e8 de e7 ff ff       	call   f0100d0e <cprintf>
f0102530:	83 c4 10             	add    $0x10,%esp
f0102533:	eb 1d                	jmp    f0102552 <command_enable_modified_buffer+0x3e>
	}
	else
	{
		enableModifiedBuffer(1);
f0102535:	83 ec 0c             	sub    $0xc,%esp
f0102538:	6a 01                	push   $0x1
f010253a:	e8 a1 b8 00 00       	call   f010dde0 <enableModifiedBuffer>
f010253f:	83 c4 10             	add    $0x10,%esp
		cprintf("Modified Buffer is now ENABLED\n");
f0102542:	83 ec 0c             	sub    $0xc,%esp
f0102545:	68 84 53 13 f0       	push   $0xf0135384
f010254a:	e8 bf e7 ff ff       	call   f0100d0e <cprintf>
f010254f:	83 c4 10             	add    $0x10,%esp
	}
	return 0;
f0102552:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102557:	c9                   	leave  
f0102558:	c3                   	ret    

f0102559 <command_disable_buffering>:

/*2016 ============================================================================*/

int command_disable_buffering(int number_of_arguments, char **arguments)
{
f0102559:	55                   	push   %ebp
f010255a:	89 e5                	mov    %esp,%ebp
f010255c:	83 ec 08             	sub    $0x8,%esp
	enableBuffering(0);
f010255f:	83 ec 0c             	sub    $0xc,%esp
f0102562:	6a 00                	push   $0x0
f0102564:	e8 8f b8 00 00       	call   f010ddf8 <enableBuffering>
f0102569:	83 c4 10             	add    $0x10,%esp
	enableModifiedBuffer(0);
f010256c:	83 ec 0c             	sub    $0xc,%esp
f010256f:	6a 00                	push   $0x0
f0102571:	e8 6a b8 00 00       	call   f010dde0 <enableModifiedBuffer>
f0102576:	83 c4 10             	add    $0x10,%esp
	cprintf("Buffering is now DISABLED\n");
f0102579:	83 ec 0c             	sub    $0xc,%esp
f010257c:	68 a4 53 13 f0       	push   $0xf01353a4
f0102581:	e8 88 e7 ff ff       	call   f0100d0e <cprintf>
f0102586:	83 c4 10             	add    $0x10,%esp
	return 0;
f0102589:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010258e:	c9                   	leave  
f010258f:	c3                   	ret    

f0102590 <command_enable_buffering>:


int command_enable_buffering(int number_of_arguments, char **arguments)
{
f0102590:	55                   	push   %ebp
f0102591:	89 e5                	mov    %esp,%ebp
f0102593:	83 ec 78             	sub    $0x78,%esp
	enableBuffering(1);
f0102596:	83 ec 0c             	sub    $0xc,%esp
f0102599:	6a 01                	push   $0x1
f010259b:	e8 58 b8 00 00       	call   f010ddf8 <enableBuffering>
f01025a0:	83 c4 10             	add    $0x10,%esp
	enableModifiedBuffer(1);
f01025a3:	83 ec 0c             	sub    $0xc,%esp
f01025a6:	6a 01                	push   $0x1
f01025a8:	e8 33 b8 00 00       	call   f010dde0 <enableModifiedBuffer>
f01025ad:	83 c4 10             	add    $0x10,%esp
	if(getModifiedBufferLength() == 0)
f01025b0:	e8 69 b8 00 00       	call   f010de1e <getModifiedBufferLength>
f01025b5:	85 c0                	test   %eax,%eax
f01025b7:	75 59                	jne    f0102612 <command_enable_buffering+0x82>
	{
		cprintf("Modified buffer enabled but with length = 0\n");
f01025b9:	83 ec 0c             	sub    $0xc,%esp
f01025bc:	68 c0 53 13 f0       	push   $0xf01353c0
f01025c1:	e8 48 e7 ff ff       	call   f0100d0e <cprintf>
f01025c6:	83 c4 10             	add    $0x10,%esp
		char str[100];
		readline("Please enter the modified buff length = ", str);
f01025c9:	83 ec 08             	sub    $0x8,%esp
f01025cc:	8d 45 94             	lea    -0x6c(%ebp),%eax
f01025cf:	50                   	push   %eax
f01025d0:	68 f0 53 13 f0       	push   $0xf01353f0
f01025d5:	e8 12 ea 02 00       	call   f0130fec <readline>
f01025da:	83 c4 10             	add    $0x10,%esp
		setModifiedBufferLength(strtol(str, NULL, 10));
f01025dd:	83 ec 04             	sub    $0x4,%esp
f01025e0:	6a 0a                	push   $0xa
f01025e2:	6a 00                	push   $0x0
f01025e4:	8d 45 94             	lea    -0x6c(%ebp),%eax
f01025e7:	50                   	push   %eax
f01025e8:	e8 65 ef 02 00       	call   f0131552 <strtol>
f01025ed:	83 c4 10             	add    $0x10,%esp
f01025f0:	83 ec 0c             	sub    $0xc,%esp
f01025f3:	50                   	push   %eax
f01025f4:	e8 17 b8 00 00       	call   f010de10 <setModifiedBufferLength>
f01025f9:	83 c4 10             	add    $0x10,%esp
		cprintf("Modified buffer length updated = %d\n", getModifiedBufferLength());
f01025fc:	e8 1d b8 00 00       	call   f010de1e <getModifiedBufferLength>
f0102601:	83 ec 08             	sub    $0x8,%esp
f0102604:	50                   	push   %eax
f0102605:	68 1c 54 13 f0       	push   $0xf013541c
f010260a:	e8 ff e6 ff ff       	call   f0100d0e <cprintf>
f010260f:	83 c4 10             	add    $0x10,%esp
	}
	cprintf("Buffering is now ENABLED\n");
f0102612:	83 ec 0c             	sub    $0xc,%esp
f0102615:	68 41 54 13 f0       	push   $0xf0135441
f010261a:	e8 ef e6 ff ff       	call   f0100d0e <cprintf>
f010261f:	83 c4 10             	add    $0x10,%esp
	return 0;
f0102622:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102627:	c9                   	leave  
f0102628:	c3                   	ret    

f0102629 <command_set_modified_buffer_length>:

int command_set_modified_buffer_length(int number_of_arguments, char **arguments)
{
f0102629:	55                   	push   %ebp
f010262a:	89 e5                	mov    %esp,%ebp
f010262c:	83 ec 08             	sub    $0x8,%esp
	if(!isBufferingEnabled())
f010262f:	e8 d2 b7 00 00       	call   f010de06 <isBufferingEnabled>
f0102634:	84 c0                	test   %al,%al
f0102636:	75 12                	jne    f010264a <command_set_modified_buffer_length+0x21>
	{
		cprintf("Buffering is not enabled. Please enable buffering to use the modified buffer.\n");
f0102638:	83 ec 0c             	sub    $0xc,%esp
f010263b:	68 5c 54 13 f0       	push   $0xf013545c
f0102640:	e8 c9 e6 ff ff       	call   f0100d0e <cprintf>
f0102645:	83 c4 10             	add    $0x10,%esp
f0102648:	eb 19                	jmp    f0102663 <command_set_modified_buffer_length+0x3a>
	}
	else if (!isModifiedBufferEnabled())
f010264a:	e8 9f b7 00 00       	call   f010ddee <isModifiedBufferEnabled>
f010264f:	84 c0                	test   %al,%al
f0102651:	75 10                	jne    f0102663 <command_set_modified_buffer_length+0x3a>
	{
		cprintf("Modified Buffering is not enabled. Please enable modified buffering.\n");
f0102653:	83 ec 0c             	sub    $0xc,%esp
f0102656:	68 ac 54 13 f0       	push   $0xf01354ac
f010265b:	e8 ae e6 ff ff       	call   f0100d0e <cprintf>
f0102660:	83 c4 10             	add    $0x10,%esp
	}
	setModifiedBufferLength(strtol(arguments[1], NULL, 10));
f0102663:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102666:	83 c0 04             	add    $0x4,%eax
f0102669:	8b 00                	mov    (%eax),%eax
f010266b:	83 ec 04             	sub    $0x4,%esp
f010266e:	6a 0a                	push   $0xa
f0102670:	6a 00                	push   $0x0
f0102672:	50                   	push   %eax
f0102673:	e8 da ee 02 00       	call   f0131552 <strtol>
f0102678:	83 c4 10             	add    $0x10,%esp
f010267b:	83 ec 0c             	sub    $0xc,%esp
f010267e:	50                   	push   %eax
f010267f:	e8 8c b7 00 00       	call   f010de10 <setModifiedBufferLength>
f0102684:	83 c4 10             	add    $0x10,%esp
	cprintf("Modified buffer length updated = %d\n", getModifiedBufferLength());
f0102687:	e8 92 b7 00 00       	call   f010de1e <getModifiedBufferLength>
f010268c:	83 ec 08             	sub    $0x8,%esp
f010268f:	50                   	push   %eax
f0102690:	68 1c 54 13 f0       	push   $0xf013541c
f0102695:	e8 74 e6 ff ff       	call   f0100d0e <cprintf>
f010269a:	83 c4 10             	add    $0x10,%esp
	return 0;
f010269d:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01026a2:	c9                   	leave  
f01026a3:	c3                   	ret    

f01026a4 <command_get_modified_buffer_length>:

int command_get_modified_buffer_length(int number_of_arguments, char **arguments)
{
f01026a4:	55                   	push   %ebp
f01026a5:	89 e5                	mov    %esp,%ebp
f01026a7:	83 ec 08             	sub    $0x8,%esp
	if(!isBufferingEnabled())
f01026aa:	e8 57 b7 00 00       	call   f010de06 <isBufferingEnabled>
f01026af:	84 c0                	test   %al,%al
f01026b1:	75 12                	jne    f01026c5 <command_get_modified_buffer_length+0x21>
	{
		cprintf("Buffering is not enabled. Please enable buffering to use the modified buffer.\n");
f01026b3:	83 ec 0c             	sub    $0xc,%esp
f01026b6:	68 5c 54 13 f0       	push   $0xf013545c
f01026bb:	e8 4e e6 ff ff       	call   f0100d0e <cprintf>
f01026c0:	83 c4 10             	add    $0x10,%esp
f01026c3:	eb 19                	jmp    f01026de <command_get_modified_buffer_length+0x3a>
	}
	else if (!isModifiedBufferEnabled())
f01026c5:	e8 24 b7 00 00       	call   f010ddee <isModifiedBufferEnabled>
f01026ca:	84 c0                	test   %al,%al
f01026cc:	75 10                	jne    f01026de <command_get_modified_buffer_length+0x3a>
	{
		cprintf("Modified Buffering is not enabled. Please enable modified buffering.\n");
f01026ce:	83 ec 0c             	sub    $0xc,%esp
f01026d1:	68 ac 54 13 f0       	push   $0xf01354ac
f01026d6:	e8 33 e6 ff ff       	call   f0100d0e <cprintf>
f01026db:	83 c4 10             	add    $0x10,%esp
	}
	cprintf("Modified buffer length = %d\n", getModifiedBufferLength());
f01026de:	e8 3b b7 00 00       	call   f010de1e <getModifiedBufferLength>
f01026e3:	83 ec 08             	sub    $0x8,%esp
f01026e6:	50                   	push   %eax
f01026e7:	68 f2 54 13 f0       	push   $0xf01354f2
f01026ec:	e8 1d e6 ff ff       	call   f0100d0e <cprintf>
f01026f1:	83 c4 10             	add    $0x10,%esp
	return 0;
f01026f4:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01026f9:	c9                   	leave  
f01026fa:	c3                   	ret    

f01026fb <command_test_kmalloc>:

/*TESTING Commands*/
int command_test_kmalloc(int number_of_arguments, char **arguments)
{
f01026fb:	55                   	push   %ebp
f01026fc:	89 e5                	mov    %esp,%ebp
f01026fe:	83 ec 18             	sub    $0x18,%esp
	int testNum = 0 ;
f0102701:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	if (number_of_arguments==2)
f0102708:	83 7d 08 02          	cmpl   $0x2,0x8(%ebp)
f010270c:	75 1b                	jne    f0102729 <command_test_kmalloc+0x2e>
		testNum = strtol(arguments[1], NULL, 10);
f010270e:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102711:	83 c0 04             	add    $0x4,%eax
f0102714:	8b 00                	mov    (%eax),%eax
f0102716:	83 ec 04             	sub    $0x4,%esp
f0102719:	6a 0a                	push   $0xa
f010271b:	6a 00                	push   $0x0
f010271d:	50                   	push   %eax
f010271e:	e8 2f ee 02 00       	call   f0131552 <strtol>
f0102723:	83 c4 10             	add    $0x10,%esp
f0102726:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if (isKHeapPlacementStrategyCONTALLOC())
f0102729:	e8 fd e7 ff ff       	call   f0100f2b <isKHeapPlacementStrategyCONTALLOC>
f010272e:	84 c0                	test   %al,%al
f0102730:	74 0a                	je     f010273c <command_test_kmalloc+0x41>
		test_kmalloc();
f0102732:	e8 aa 4f 01 00       	call   f01176e1 <test_kmalloc>
f0102737:	e9 e8 00 00 00       	jmp    f0102824 <command_test_kmalloc+0x129>
	else if (isKHeapPlacementStrategyFIRSTFIT())
f010273c:	e8 fe e7 ff ff       	call   f0100f3f <isKHeapPlacementStrategyFIRSTFIT>
f0102741:	84 c0                	test   %al,%al
f0102743:	74 44                	je     f0102789 <command_test_kmalloc+0x8e>
	{
		if (testNum == 0)
f0102745:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0102749:	75 1a                	jne    f0102765 <command_test_kmalloc+0x6a>
		{
			cprintf("Error: [Kernel.FirstFit] must specify the test number (1 or 2) as an argument\n");
f010274b:	83 ec 0c             	sub    $0xc,%esp
f010274e:	68 10 55 13 f0       	push   $0xf0135510
f0102753:	e8 b6 e5 ff ff       	call   f0100d0e <cprintf>
f0102758:	83 c4 10             	add    $0x10,%esp
			return 0;
f010275b:	b8 00 00 00 00       	mov    $0x0,%eax
f0102760:	e9 c4 00 00 00       	jmp    f0102829 <command_test_kmalloc+0x12e>
		}
		//Test FIRST FIT allocation
		if (testNum == 1)
f0102765:	83 7d f4 01          	cmpl   $0x1,-0xc(%ebp)
f0102769:	75 0a                	jne    f0102775 <command_test_kmalloc+0x7a>
			test_kmalloc_firstfit1();
f010276b:	e8 fa 9d 01 00       	call   f011c56a <test_kmalloc_firstfit1>
f0102770:	e9 af 00 00 00       	jmp    f0102824 <command_test_kmalloc+0x129>
		else if (testNum == 2)
f0102775:	83 7d f4 02          	cmpl   $0x2,-0xc(%ebp)
f0102779:	0f 85 a5 00 00 00    	jne    f0102824 <command_test_kmalloc+0x129>
			test_kmalloc_firstfit2();
f010277f:	e8 88 b1 01 00       	call   f011d90c <test_kmalloc_firstfit2>
f0102784:	e9 9b 00 00 00       	jmp    f0102824 <command_test_kmalloc+0x129>
	}
	else if (isKHeapPlacementStrategyBESTFIT())
f0102789:	e8 c6 e7 ff ff       	call   f0100f54 <isKHeapPlacementStrategyBESTFIT>
f010278e:	84 c0                	test   %al,%al
f0102790:	74 44                	je     f01027d6 <command_test_kmalloc+0xdb>
	{
		if (testNum == 0)
f0102792:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0102796:	75 17                	jne    f01027af <command_test_kmalloc+0xb4>
		{
			cprintf("Error: [Kernel.BestFit] must specify the test number (1, 2, 3) as an argument\n");
f0102798:	83 ec 0c             	sub    $0xc,%esp
f010279b:	68 60 55 13 f0       	push   $0xf0135560
f01027a0:	e8 69 e5 ff ff       	call   f0100d0e <cprintf>
f01027a5:	83 c4 10             	add    $0x10,%esp
			return 0;
f01027a8:	b8 00 00 00 00       	mov    $0x0,%eax
f01027ad:	eb 7a                	jmp    f0102829 <command_test_kmalloc+0x12e>
		}
		if (testNum == 1)
f01027af:	83 7d f4 01          	cmpl   $0x1,-0xc(%ebp)
f01027b3:	75 07                	jne    f01027bc <command_test_kmalloc+0xc1>
			test_kmalloc();
f01027b5:	e8 27 4f 01 00       	call   f01176e1 <test_kmalloc>
f01027ba:	eb 68                	jmp    f0102824 <command_test_kmalloc+0x129>
		else if (testNum == 2)
f01027bc:	83 7d f4 02          	cmpl   $0x2,-0xc(%ebp)
f01027c0:	75 07                	jne    f01027c9 <command_test_kmalloc+0xce>
			test_kmalloc_bestfit1();
f01027c2:	e8 6d 78 01 00       	call   f011a034 <test_kmalloc_bestfit1>
f01027c7:	eb 5b                	jmp    f0102824 <command_test_kmalloc+0x129>
		else if (testNum == 3)
f01027c9:	83 7d f4 03          	cmpl   $0x3,-0xc(%ebp)
f01027cd:	75 55                	jne    f0102824 <command_test_kmalloc+0x129>
			test_kmalloc_bestfit2();
f01027cf:	e8 b6 8a 01 00       	call   f011b28a <test_kmalloc_bestfit2>
f01027d4:	eb 4e                	jmp    f0102824 <command_test_kmalloc+0x129>
	}
	else if (isKHeapPlacementStrategyNEXTFIT())
f01027d6:	e8 8e e7 ff ff       	call   f0100f69 <isKHeapPlacementStrategyNEXTFIT>
f01027db:	84 c0                	test   %al,%al
f01027dd:	74 37                	je     f0102816 <command_test_kmalloc+0x11b>
	{
		if (testNum == 0)
f01027df:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01027e3:	75 17                	jne    f01027fc <command_test_kmalloc+0x101>
		{
			cprintf("Error: [Kernel.NextFit] must specify the test number (1 or 2) as an argument\n");
f01027e5:	83 ec 0c             	sub    $0xc,%esp
f01027e8:	68 b0 55 13 f0       	push   $0xf01355b0
f01027ed:	e8 1c e5 ff ff       	call   f0100d0e <cprintf>
f01027f2:	83 c4 10             	add    $0x10,%esp
			return 0;
f01027f5:	b8 00 00 00 00       	mov    $0x0,%eax
f01027fa:	eb 2d                	jmp    f0102829 <command_test_kmalloc+0x12e>
		}
		//Test cont. allocation
		if (testNum == 1)
f01027fc:	83 7d f4 01          	cmpl   $0x1,-0xc(%ebp)
f0102800:	75 07                	jne    f0102809 <command_test_kmalloc+0x10e>
			test_kmalloc();
f0102802:	e8 da 4e 01 00       	call   f01176e1 <test_kmalloc>
f0102807:	eb 1b                	jmp    f0102824 <command_test_kmalloc+0x129>
		//Test nextfit strategy
		else if (testNum == 2)
f0102809:	83 7d f4 02          	cmpl   $0x2,-0xc(%ebp)
f010280d:	75 15                	jne    f0102824 <command_test_kmalloc+0x129>
			test_kmalloc_nextfit();
f010280f:	e8 2b 61 01 00       	call   f011893f <test_kmalloc_nextfit>
f0102814:	eb 0e                	jmp    f0102824 <command_test_kmalloc+0x129>

	}
	else if (isKHeapPlacementStrategyWORSTFIT())
f0102816:	e8 63 e7 ff ff       	call   f0100f7e <isKHeapPlacementStrategyWORSTFIT>
f010281b:	84 c0                	test   %al,%al
f010281d:	74 05                	je     f0102824 <command_test_kmalloc+0x129>
		test_kmalloc_worstfit();
f010281f:	e8 7d bf 01 00       	call   f011e7a1 <test_kmalloc_worstfit>
	return 0;
f0102824:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102829:	c9                   	leave  
f010282a:	c3                   	ret    

f010282b <command_test_kfree>:
int command_test_kfree(int number_of_arguments, char **arguments)
{
f010282b:	55                   	push   %ebp
f010282c:	89 e5                	mov    %esp,%ebp
f010282e:	83 ec 08             	sub    $0x8,%esp
	if (isKHeapPlacementStrategyBESTFIT() || isKHeapPlacementStrategyFIRSTFIT())
f0102831:	e8 1e e7 ff ff       	call   f0100f54 <isKHeapPlacementStrategyBESTFIT>
f0102836:	84 c0                	test   %al,%al
f0102838:	75 09                	jne    f0102843 <command_test_kfree+0x18>
f010283a:	e8 00 e7 ff ff       	call   f0100f3f <isKHeapPlacementStrategyFIRSTFIT>
f010283f:	84 c0                	test   %al,%al
f0102841:	74 07                	je     f010284a <command_test_kfree+0x1f>
	{
		test_kfree_bestfirstfit();
f0102843:	e8 fb f6 01 00       	call   f0121f43 <test_kfree_bestfirstfit>
f0102848:	eb 05                	jmp    f010284f <command_test_kfree+0x24>
	}
	else //NEXT & CONT
	{
		test_kfree();
f010284a:	e8 a2 d5 01 00       	call   f011fdf1 <test_kfree>
	}
	return 0;
f010284f:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102854:	c9                   	leave  
f0102855:	c3                   	ret    

f0102856 <command_test_kheap_phys_addr>:
int command_test_kheap_phys_addr(int number_of_arguments, char **arguments)
{
f0102856:	55                   	push   %ebp
f0102857:	89 e5                	mov    %esp,%ebp
f0102859:	83 ec 08             	sub    $0x8,%esp
	test_kheap_phys_addr();
f010285c:	e8 de 10 02 00       	call   f012393f <test_kheap_phys_addr>
	return 0;
f0102861:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102866:	c9                   	leave  
f0102867:	c3                   	ret    

f0102868 <command_test_kheap_virt_addr>:
int command_test_kheap_virt_addr(int number_of_arguments, char **arguments)
{
f0102868:	55                   	push   %ebp
f0102869:	89 e5                	mov    %esp,%ebp
f010286b:	83 ec 08             	sub    $0x8,%esp
	test_kheap_virt_addr();
f010286e:	e8 9c 25 02 00       	call   f0124e0f <test_kheap_virt_addr>
	return 0;
f0102873:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102878:	c9                   	leave  
f0102879:	c3                   	ret    

f010287a <command_test_three_creation_functions>:
int command_test_three_creation_functions(int number_of_arguments, char **arguments)
{
f010287a:	55                   	push   %ebp
f010287b:	89 e5                	mov    %esp,%ebp
f010287d:	83 ec 08             	sub    $0x8,%esp
	test_three_creation_functions();
f0102880:	e8 67 3a 02 00       	call   f01262ec <test_three_creation_functions>
	return 0;
f0102885:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010288a:	c9                   	leave  
f010288b:	c3                   	ret    

f010288c <command_test_krealloc>:

int command_test_krealloc(int number_of_arguments, char **arguments) {
f010288c:	55                   	push   %ebp
f010288d:	89 e5                	mov    %esp,%ebp
f010288f:	83 ec 08             	sub    $0x8,%esp
	if (isKHeapPlacementStrategyNEXTFIT())
f0102892:	e8 d2 e6 ff ff       	call   f0100f69 <isKHeapPlacementStrategyNEXTFIT>
f0102897:	84 c0                	test   %al,%al
f0102899:	74 07                	je     f01028a2 <command_test_krealloc+0x16>
		test_krealloc();
f010289b:	e8 63 94 02 00       	call   f012bd03 <test_krealloc>
f01028a0:	eb 0e                	jmp    f01028b0 <command_test_krealloc+0x24>
	else if (isKHeapPlacementStrategyBESTFIT())
f01028a2:	e8 ad e6 ff ff       	call   f0100f54 <isKHeapPlacementStrategyBESTFIT>
f01028a7:	84 c0                	test   %al,%al
f01028a9:	74 05                	je     f01028b0 <command_test_krealloc+0x24>
		test_krealloc_BF();
f01028ab:	e8 03 b4 02 00       	call   f012dcb3 <test_krealloc_BF>
	return 0;
f01028b0:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01028b5:	c9                   	leave  
f01028b6:	c3                   	ret    

f01028b7 <command_test_priority1>:

int command_test_priority1(int number_of_arguments, char **arguments)
{
f01028b7:	55                   	push   %ebp
f01028b8:	89 e5                	mov    %esp,%ebp
f01028ba:	83 ec 08             	sub    $0x8,%esp
	test_priority_normal_and_higher();
f01028bd:	e8 34 3a 01 00       	call   f01162f6 <test_priority_normal_and_higher>
	return 0;
f01028c2:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01028c7:	c9                   	leave  
f01028c8:	c3                   	ret    

f01028c9 <command_test_priority2>:

int command_test_priority2(int number_of_arguments, char **arguments)
{
f01028c9:	55                   	push   %ebp
f01028ca:	89 e5                	mov    %esp,%ebp
f01028cc:	83 ec 08             	sub    $0x8,%esp
	test_priority_normal_and_lower();
f01028cf:	e8 08 44 01 00       	call   f0116cdc <test_priority_normal_and_lower>
	return 0;
f01028d4:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01028d9:	c9                   	leave  
f01028da:	c3                   	ret    

f01028db <command_test_kfreeall>:

int command_test_kfreeall(int number_of_arguments, char **arguments)
{
f01028db:	55                   	push   %ebp
f01028dc:	89 e5                	mov    %esp,%ebp
f01028de:	83 ec 08             	sub    $0x8,%esp
	test_kfreeall();
f01028e1:	e8 40 3c 02 00       	call   f0126526 <test_kfreeall>
	return 0;
f01028e6:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01028eb:	c9                   	leave  
f01028ec:	c3                   	ret    

f01028ed <command_test_kexpand>:

int command_test_kexpand(int number_of_arguments, char **arguments)
{
f01028ed:	55                   	push   %ebp
f01028ee:	89 e5                	mov    %esp,%ebp
f01028f0:	83 ec 08             	sub    $0x8,%esp
	test_kexpand();
f01028f3:	e8 1a 53 02 00       	call   f0127c12 <test_kexpand>
	return 0;
f01028f8:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01028fd:	c9                   	leave  
f01028fe:	c3                   	ret    

f01028ff <command_test_kshrink>:

int command_test_kshrink(int number_of_arguments, char **arguments)
{
f01028ff:	55                   	push   %ebp
f0102900:	89 e5                	mov    %esp,%ebp
f0102902:	83 ec 08             	sub    $0x8,%esp
	test_kshrink();
f0102905:	e8 89 60 02 00       	call   f0128993 <test_kshrink>
	return 0;
f010290a:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010290f:	c9                   	leave  
f0102910:	c3                   	ret    

f0102911 <command_test_kfreelast>:

int command_test_kfreelast(int number_of_arguments, char **arguments)
{
f0102911:	55                   	push   %ebp
f0102912:	89 e5                	mov    %esp,%ebp
f0102914:	83 ec 08             	sub    $0x8,%esp
	test_kfreelast();
f0102917:	e8 64 6f 02 00       	call   f0129880 <test_kfreelast>
	return 0;
f010291c:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102921:	c9                   	leave  
f0102922:	c3                   	ret    

f0102923 <command_test_sc_MLFQ>:

int command_test_sc_MLFQ(int number_of_arguments, char **arguments)
{
f0102923:	55                   	push   %ebp
f0102924:	89 e5                	mov    %esp,%ebp
f0102926:	83 ec 18             	sub    $0x18,%esp
	int numOfSlave2 = strtol(arguments[1], NULL, 10);
f0102929:	8b 45 0c             	mov    0xc(%ebp),%eax
f010292c:	83 c0 04             	add    $0x4,%eax
f010292f:	8b 00                	mov    (%eax),%eax
f0102931:	83 ec 04             	sub    $0x4,%esp
f0102934:	6a 0a                	push   $0xa
f0102936:	6a 00                	push   $0x0
f0102938:	50                   	push   %eax
f0102939:	e8 14 ec 02 00       	call   f0131552 <strtol>
f010293e:	83 c4 10             	add    $0x10,%esp
f0102941:	89 45 e8             	mov    %eax,-0x18(%ebp)
	int cnt = 0 ;
f0102944:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	int firstTime = 1;
f010294b:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
	struct Env *e ;
	LIST_FOREACH(e, &env_exit_queue)
f0102952:	a1 b4 25 78 f0       	mov    0xf07825b4,%eax
f0102957:	89 45 ec             	mov    %eax,-0x14(%ebp)
f010295a:	eb 3d                	jmp    f0102999 <command_test_sc_MLFQ+0x76>
	{
		if (strcmp(e->prog_name, "tmlfq_2") == 0)
f010295c:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010295f:	05 5c 05 00 00       	add    $0x55c,%eax
f0102964:	83 ec 08             	sub    $0x8,%esp
f0102967:	68 fe 55 13 f0       	push   $0xf01355fe
f010296c:	50                   	push   %eax
f010296d:	e8 8c e9 02 00       	call   f01312fe <strcmp>
f0102972:	83 c4 10             	add    $0x10,%esp
f0102975:	85 c0                	test   %eax,%eax
f0102977:	75 12                	jne    f010298b <command_test_sc_MLFQ+0x68>
		{
			if (firstTime)
f0102979:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f010297d:	74 07                	je     f0102986 <command_test_sc_MLFQ+0x63>
				firstTime = 0;
f010297f:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
			cnt++ ;
f0102986:	ff 45 f4             	incl   -0xc(%ebp)
f0102989:	eb 06                	jmp    f0102991 <command_test_sc_MLFQ+0x6e>
		}
		else if (!firstTime)
f010298b:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f010298f:	74 31                	je     f01029c2 <command_test_sc_MLFQ+0x9f>
{
	int numOfSlave2 = strtol(arguments[1], NULL, 10);
	int cnt = 0 ;
	int firstTime = 1;
	struct Env *e ;
	LIST_FOREACH(e, &env_exit_queue)
f0102991:	a1 bc 25 78 f0       	mov    0xf07825bc,%eax
f0102996:	89 45 ec             	mov    %eax,-0x14(%ebp)
f0102999:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f010299d:	74 08                	je     f01029a7 <command_test_sc_MLFQ+0x84>
f010299f:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01029a2:	8b 40 44             	mov    0x44(%eax),%eax
f01029a5:	eb 05                	jmp    f01029ac <command_test_sc_MLFQ+0x89>
f01029a7:	b8 00 00 00 00       	mov    $0x0,%eax
f01029ac:	a3 bc 25 78 f0       	mov    %eax,0xf07825bc
f01029b1:	a1 bc 25 78 f0       	mov    0xf07825bc,%eax
f01029b6:	85 c0                	test   %eax,%eax
f01029b8:	75 a2                	jne    f010295c <command_test_sc_MLFQ+0x39>
f01029ba:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f01029be:	75 9c                	jne    f010295c <command_test_sc_MLFQ+0x39>
f01029c0:	eb 01                	jmp    f01029c3 <command_test_sc_MLFQ+0xa0>
			if (firstTime)
				firstTime = 0;
			cnt++ ;
		}
		else if (!firstTime)
			break;
f01029c2:	90                   	nop
	}
	if(cnt == numOfSlave2)
f01029c3:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01029c6:	3b 45 e8             	cmp    -0x18(%ebp),%eax
f01029c9:	75 12                	jne    f01029dd <command_test_sc_MLFQ+0xba>
	{
		cprintf("Congratulations... MLFQScenario# completed successfully\n");
f01029cb:	83 ec 0c             	sub    $0xc,%esp
f01029ce:	68 08 56 13 f0       	push   $0xf0135608
f01029d3:	e8 36 e3 ff ff       	call   f0100d0e <cprintf>
f01029d8:	83 c4 10             	add    $0x10,%esp
f01029db:	eb 17                	jmp    f01029f4 <command_test_sc_MLFQ+0xd1>
	}
	else
	{
		panic("MLFQScenario# failed\n");
f01029dd:	83 ec 04             	sub    $0x4,%esp
f01029e0:	68 41 56 13 f0       	push   $0xf0135641
f01029e5:	68 8b 04 00 00       	push   $0x48b
f01029ea:	68 8d 46 13 f0       	push   $0xf013468d
f01029ef:	e8 11 d8 ff ff       	call   f0100205 <_panic>
	}
	return 0;
f01029f4:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01029f9:	c9                   	leave  
f01029fa:	c3                   	ret    

f01029fb <command_test_autocomplete>:


/*2022*/
int command_test_autocomplete(int number_of_arguments, char **arguments)
{
f01029fb:	55                   	push   %ebp
f01029fc:	89 e5                	mov    %esp,%ebp
f01029fe:	83 ec 18             	sub    $0x18,%esp
	int x = TestAutoCompleteCommand();
f0102a01:	e8 ec e5 00 00       	call   f0110ff2 <TestAutoCompleteCommand>
f0102a06:	89 45 f4             	mov    %eax,-0xc(%ebp)
	return 0;
f0102a09:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102a0e:	c9                   	leave  
f0102a0f:	c3                   	ret    

f0102a10 <command_test_lists>:
int command_test_lists(int number_of_arguments, char **arguments)
{
f0102a10:	55                   	push   %ebp
f0102a11:	89 e5                	mov    %esp,%ebp
f0102a13:	83 ec 08             	sub    $0x8,%esp
	if (number_of_arguments != 2)
f0102a16:	83 7d 08 02          	cmpl   $0x2,0x8(%ebp)
f0102a1a:	74 1a                	je     f0102a36 <command_test_lists+0x26>
	{
		cprintf("Invalid number of arguments! USAGE: tstlsts <testname>\n") ;
f0102a1c:	83 ec 0c             	sub    $0xc,%esp
f0102a1f:	68 58 56 13 f0       	push   $0xf0135658
f0102a24:	e8 e5 e2 ff ff       	call   f0100d0e <cprintf>
f0102a29:	83 c4 10             	add    $0x10,%esp
		return 0;
f0102a2c:	b8 00 00 00 00       	mov    $0x0,%eax
f0102a31:	e9 82 01 00 00       	jmp    f0102bb8 <command_test_lists+0x1a8>
	}
	// Test 1 Example for initialize_MemBlocksList: tstlsts init 5
	if(strcmp(arguments[1], "init") == 0)
f0102a36:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102a39:	83 c0 04             	add    $0x4,%eax
f0102a3c:	8b 00                	mov    (%eax),%eax
f0102a3e:	83 ec 08             	sub    $0x8,%esp
f0102a41:	68 90 56 13 f0       	push   $0xf0135690
f0102a46:	50                   	push   %eax
f0102a47:	e8 b2 e8 02 00       	call   f01312fe <strcmp>
f0102a4c:	83 c4 10             	add    $0x10,%esp
f0102a4f:	85 c0                	test   %eax,%eax
f0102a51:	75 0a                	jne    f0102a5d <command_test_lists+0x4d>
	{
		test_initialize_MemBlocksList();
f0102a53:	e8 44 bb 00 00       	call   f010e59c <test_initialize_MemBlocksList>
f0102a58:	e9 56 01 00 00       	jmp    f0102bb3 <command_test_lists+0x1a3>
	}
	// Test 2 Example for insert_sorted: tstlsts insrt
	else if(strcmp(arguments[1], "insrt") == 0)
f0102a5d:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102a60:	83 c0 04             	add    $0x4,%eax
f0102a63:	8b 00                	mov    (%eax),%eax
f0102a65:	83 ec 08             	sub    $0x8,%esp
f0102a68:	68 95 56 13 f0       	push   $0xf0135695
f0102a6d:	50                   	push   %eax
f0102a6e:	e8 8b e8 02 00       	call   f01312fe <strcmp>
f0102a73:	83 c4 10             	add    $0x10,%esp
f0102a76:	85 c0                	test   %eax,%eax
f0102a78:	75 0a                	jne    f0102a84 <command_test_lists+0x74>
	{
		test_insert_sorted_allocList();
f0102a7a:	e8 31 bc 00 00       	call   f010e6b0 <test_insert_sorted_allocList>
f0102a7f:	e9 2f 01 00 00       	jmp    f0102bb3 <command_test_lists+0x1a3>
	}
	// Test 3 Example for find_block: tstlsts find
	else if(strcmp(arguments[1], "find") == 0)
f0102a84:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102a87:	83 c0 04             	add    $0x4,%eax
f0102a8a:	8b 00                	mov    (%eax),%eax
f0102a8c:	83 ec 08             	sub    $0x8,%esp
f0102a8f:	68 9b 56 13 f0       	push   $0xf013569b
f0102a94:	50                   	push   %eax
f0102a95:	e8 64 e8 02 00       	call   f01312fe <strcmp>
f0102a9a:	83 c4 10             	add    $0x10,%esp
f0102a9d:	85 c0                	test   %eax,%eax
f0102a9f:	75 0a                	jne    f0102aab <command_test_lists+0x9b>
	{
		test_find_block();
f0102aa1:	e8 c8 c0 00 00       	call   f010eb6e <test_find_block>
f0102aa6:	e9 08 01 00 00       	jmp    f0102bb3 <command_test_lists+0x1a3>
	}
	// Test 4 Example for alloc_block_FF: tstlsts FF
	else if(strcmp(arguments[1], "FF") == 0 || strcmp(arguments[1], "ff") == 0)
f0102aab:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102aae:	83 c0 04             	add    $0x4,%eax
f0102ab1:	8b 00                	mov    (%eax),%eax
f0102ab3:	83 ec 08             	sub    $0x8,%esp
f0102ab6:	68 a0 56 13 f0       	push   $0xf01356a0
f0102abb:	50                   	push   %eax
f0102abc:	e8 3d e8 02 00       	call   f01312fe <strcmp>
f0102ac1:	83 c4 10             	add    $0x10,%esp
f0102ac4:	85 c0                	test   %eax,%eax
f0102ac6:	74 1d                	je     f0102ae5 <command_test_lists+0xd5>
f0102ac8:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102acb:	83 c0 04             	add    $0x4,%eax
f0102ace:	8b 00                	mov    (%eax),%eax
f0102ad0:	83 ec 08             	sub    $0x8,%esp
f0102ad3:	68 a3 56 13 f0       	push   $0xf01356a3
f0102ad8:	50                   	push   %eax
f0102ad9:	e8 20 e8 02 00       	call   f01312fe <strcmp>
f0102ade:	83 c4 10             	add    $0x10,%esp
f0102ae1:	85 c0                	test   %eax,%eax
f0102ae3:	75 0a                	jne    f0102aef <command_test_lists+0xdf>
	{
		test_alloc_block_FF();
f0102ae5:	e8 df c3 00 00       	call   f010eec9 <test_alloc_block_FF>
f0102aea:	e9 c4 00 00 00       	jmp    f0102bb3 <command_test_lists+0x1a3>
	}
	// Test 5 Example for alloc_block_BF: tstlsts BF
	else if(strcmp(arguments[1], "BF") == 0 || strcmp(arguments[1], "bf") == 0)
f0102aef:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102af2:	83 c0 04             	add    $0x4,%eax
f0102af5:	8b 00                	mov    (%eax),%eax
f0102af7:	83 ec 08             	sub    $0x8,%esp
f0102afa:	68 a6 56 13 f0       	push   $0xf01356a6
f0102aff:	50                   	push   %eax
f0102b00:	e8 f9 e7 02 00       	call   f01312fe <strcmp>
f0102b05:	83 c4 10             	add    $0x10,%esp
f0102b08:	85 c0                	test   %eax,%eax
f0102b0a:	74 1d                	je     f0102b29 <command_test_lists+0x119>
f0102b0c:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102b0f:	83 c0 04             	add    $0x4,%eax
f0102b12:	8b 00                	mov    (%eax),%eax
f0102b14:	83 ec 08             	sub    $0x8,%esp
f0102b17:	68 a9 56 13 f0       	push   $0xf01356a9
f0102b1c:	50                   	push   %eax
f0102b1d:	e8 dc e7 02 00       	call   f01312fe <strcmp>
f0102b22:	83 c4 10             	add    $0x10,%esp
f0102b25:	85 c0                	test   %eax,%eax
f0102b27:	75 0a                	jne    f0102b33 <command_test_lists+0x123>
	{
		test_alloc_block_BF();
f0102b29:	e8 19 c8 00 00       	call   f010f347 <test_alloc_block_BF>
f0102b2e:	e9 80 00 00 00       	jmp    f0102bb3 <command_test_lists+0x1a3>
	}
	// Test 6 Example for alloc_block_NF: tstlsts NF
	else if(strcmp(arguments[1], "NF") == 0 || strcmp(arguments[1], "nf") == 0)
f0102b33:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102b36:	83 c0 04             	add    $0x4,%eax
f0102b39:	8b 00                	mov    (%eax),%eax
f0102b3b:	83 ec 08             	sub    $0x8,%esp
f0102b3e:	68 ac 56 13 f0       	push   $0xf01356ac
f0102b43:	50                   	push   %eax
f0102b44:	e8 b5 e7 02 00       	call   f01312fe <strcmp>
f0102b49:	83 c4 10             	add    $0x10,%esp
f0102b4c:	85 c0                	test   %eax,%eax
f0102b4e:	74 1d                	je     f0102b6d <command_test_lists+0x15d>
f0102b50:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102b53:	83 c0 04             	add    $0x4,%eax
f0102b56:	8b 00                	mov    (%eax),%eax
f0102b58:	83 ec 08             	sub    $0x8,%esp
f0102b5b:	68 af 56 13 f0       	push   $0xf01356af
f0102b60:	50                   	push   %eax
f0102b61:	e8 98 e7 02 00       	call   f01312fe <strcmp>
f0102b66:	83 c4 10             	add    $0x10,%esp
f0102b69:	85 c0                	test   %eax,%eax
f0102b6b:	75 07                	jne    f0102b74 <command_test_lists+0x164>
	{
		test_alloc_block_NF();
f0102b6d:	e8 5c ce 00 00       	call   f010f9ce <test_alloc_block_NF>
f0102b72:	eb 3f                	jmp    f0102bb3 <command_test_lists+0x1a3>
	}
	// Test 7 Example for alloc_block_NF: tstlsts merge
	else if(strcmp(arguments[1], "MERGE") == 0 || strcmp(arguments[1], "merge") == 0)
f0102b74:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102b77:	83 c0 04             	add    $0x4,%eax
f0102b7a:	8b 00                	mov    (%eax),%eax
f0102b7c:	83 ec 08             	sub    $0x8,%esp
f0102b7f:	68 b2 56 13 f0       	push   $0xf01356b2
f0102b84:	50                   	push   %eax
f0102b85:	e8 74 e7 02 00       	call   f01312fe <strcmp>
f0102b8a:	83 c4 10             	add    $0x10,%esp
f0102b8d:	85 c0                	test   %eax,%eax
f0102b8f:	74 1d                	je     f0102bae <command_test_lists+0x19e>
f0102b91:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102b94:	83 c0 04             	add    $0x4,%eax
f0102b97:	8b 00                	mov    (%eax),%eax
f0102b99:	83 ec 08             	sub    $0x8,%esp
f0102b9c:	68 b8 56 13 f0       	push   $0xf01356b8
f0102ba1:	50                   	push   %eax
f0102ba2:	e8 57 e7 02 00       	call   f01312fe <strcmp>
f0102ba7:	83 c4 10             	add    $0x10,%esp
f0102baa:	85 c0                	test   %eax,%eax
f0102bac:	75 05                	jne    f0102bb3 <command_test_lists+0x1a3>
	{
		test_insert_sorted_with_merge_freeList();
f0102bae:	e8 a9 d6 00 00       	call   f011025c <test_insert_sorted_with_merge_freeList>
	}
	return 0;
f0102bb3:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102bb8:	c9                   	leave  
f0102bb9:	c3                   	ret    

f0102bba <command_test_chunks>:

int command_test_chunks(int number_of_arguments, char **arguments)
{
f0102bba:	55                   	push   %ebp
f0102bbb:	89 e5                	mov    %esp,%ebp
f0102bbd:	83 ec 08             	sub    $0x8,%esp
	if (number_of_arguments != 2)
f0102bc0:	83 7d 08 02          	cmpl   $0x2,0x8(%ebp)
f0102bc4:	74 1a                	je     f0102be0 <command_test_chunks+0x26>
	{
		cprintf("Invalid number of arguments! USAGE: tstchunk <testname>\n") ;
f0102bc6:	83 ec 0c             	sub    $0xc,%esp
f0102bc9:	68 c0 56 13 f0       	push   $0xf01356c0
f0102bce:	e8 3b e1 ff ff       	call   f0100d0e <cprintf>
f0102bd3:	83 c4 10             	add    $0x10,%esp
		return 0;
f0102bd6:	b8 00 00 00 00       	mov    $0x0,%eax
f0102bdb:	e9 e1 00 00 00       	jmp    f0102cc1 <command_test_chunks+0x107>
	}
	// CUT-PASTE Test
	if(strcmp(arguments[1], "cutpaste") == 0)
f0102be0:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102be3:	83 c0 04             	add    $0x4,%eax
f0102be6:	8b 00                	mov    (%eax),%eax
f0102be8:	83 ec 08             	sub    $0x8,%esp
f0102beb:	68 f9 56 13 f0       	push   $0xf01356f9
f0102bf0:	50                   	push   %eax
f0102bf1:	e8 08 e7 02 00       	call   f01312fe <strcmp>
f0102bf6:	83 c4 10             	add    $0x10,%esp
f0102bf9:	85 c0                	test   %eax,%eax
f0102bfb:	75 0a                	jne    f0102c07 <command_test_chunks+0x4d>
	{
		test_cut_paste_pages();
f0102bfd:	e8 84 ee 00 00       	call   f0111a86 <test_cut_paste_pages>
f0102c02:	e9 b5 00 00 00       	jmp    f0102cbc <command_test_chunks+0x102>
	}
	// COPY-PASTE Test
	else if(strcmp(arguments[1], "copypaste") == 0)
f0102c07:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102c0a:	83 c0 04             	add    $0x4,%eax
f0102c0d:	8b 00                	mov    (%eax),%eax
f0102c0f:	83 ec 08             	sub    $0x8,%esp
f0102c12:	68 02 57 13 f0       	push   $0xf0135702
f0102c17:	50                   	push   %eax
f0102c18:	e8 e1 e6 02 00       	call   f01312fe <strcmp>
f0102c1d:	83 c4 10             	add    $0x10,%esp
f0102c20:	85 c0                	test   %eax,%eax
f0102c22:	75 0a                	jne    f0102c2e <command_test_chunks+0x74>
	{
		test_copy_paste_chunk();
f0102c24:	e8 a8 f8 00 00       	call   f01124d1 <test_copy_paste_chunk>
f0102c29:	e9 8e 00 00 00       	jmp    f0102cbc <command_test_chunks+0x102>
	}
	// SHARE Test
	else if(strcmp(arguments[1], "share") == 0)
f0102c2e:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102c31:	83 c0 04             	add    $0x4,%eax
f0102c34:	8b 00                	mov    (%eax),%eax
f0102c36:	83 ec 08             	sub    $0x8,%esp
f0102c39:	68 0c 57 13 f0       	push   $0xf013570c
f0102c3e:	50                   	push   %eax
f0102c3f:	e8 ba e6 02 00       	call   f01312fe <strcmp>
f0102c44:	83 c4 10             	add    $0x10,%esp
f0102c47:	85 c0                	test   %eax,%eax
f0102c49:	75 07                	jne    f0102c52 <command_test_chunks+0x98>
	{
		test_share_chunk();
f0102c4b:	e8 7f 09 01 00       	call   f01135cf <test_share_chunk>
f0102c50:	eb 6a                	jmp    f0102cbc <command_test_chunks+0x102>
	}
	// ALLOCATE Test
	else if(strcmp(arguments[1], "allocate") == 0)
f0102c52:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102c55:	83 c0 04             	add    $0x4,%eax
f0102c58:	8b 00                	mov    (%eax),%eax
f0102c5a:	83 ec 08             	sub    $0x8,%esp
f0102c5d:	68 12 57 13 f0       	push   $0xf0135712
f0102c62:	50                   	push   %eax
f0102c63:	e8 96 e6 02 00       	call   f01312fe <strcmp>
f0102c68:	83 c4 10             	add    $0x10,%esp
f0102c6b:	85 c0                	test   %eax,%eax
f0102c6d:	75 07                	jne    f0102c76 <command_test_chunks+0xbc>
	{
		test_allocate_chunk();
f0102c6f:	e8 83 13 01 00       	call   f0113ff7 <test_allocate_chunk>
f0102c74:	eb 46                	jmp    f0102cbc <command_test_chunks+0x102>
	}
	// REQUIRED SPACE Test
	else if(strcmp(arguments[1], "required_space") == 0)
f0102c76:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102c79:	83 c0 04             	add    $0x4,%eax
f0102c7c:	8b 00                	mov    (%eax),%eax
f0102c7e:	83 ec 08             	sub    $0x8,%esp
f0102c81:	68 1b 57 13 f0       	push   $0xf013571b
f0102c86:	50                   	push   %eax
f0102c87:	e8 72 e6 02 00       	call   f01312fe <strcmp>
f0102c8c:	83 c4 10             	add    $0x10,%esp
f0102c8f:	85 c0                	test   %eax,%eax
f0102c91:	75 07                	jne    f0102c9a <command_test_chunks+0xe0>
	{
		test_calculate_required_frames();
f0102c93:	e8 0e 1c 01 00       	call   f01148a6 <test_calculate_required_frames>
f0102c98:	eb 22                	jmp    f0102cbc <command_test_chunks+0x102>
	}
	// ALLOCATED SPACE Test
	else if(strcmp(arguments[1], "allocated_space") == 0)
f0102c9a:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102c9d:	83 c0 04             	add    $0x4,%eax
f0102ca0:	8b 00                	mov    (%eax),%eax
f0102ca2:	83 ec 08             	sub    $0x8,%esp
f0102ca5:	68 2a 57 13 f0       	push   $0xf013572a
f0102caa:	50                   	push   %eax
f0102cab:	e8 4e e6 02 00       	call   f01312fe <strcmp>
f0102cb0:	83 c4 10             	add    $0x10,%esp
f0102cb3:	85 c0                	test   %eax,%eax
f0102cb5:	75 05                	jne    f0102cbc <command_test_chunks+0x102>
	{
		test_calculate_allocated_space();
f0102cb7:	e8 5e 24 01 00       	call   f011511a <test_calculate_allocated_space>
	}
	return 0;
f0102cbc:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102cc1:	c9                   	leave  
f0102cc2:	c3                   	ret    

f0102cc3 <command_test_paging_manipulation>:

int command_test_paging_manipulation(int number_of_arguments, char **arguments)
{
f0102cc3:	55                   	push   %ebp
f0102cc4:	89 e5                	mov    %esp,%ebp
f0102cc6:	83 ec 08             	sub    $0x8,%esp
	if (number_of_arguments != 2)
f0102cc9:	83 7d 08 02          	cmpl   $0x2,0x8(%ebp)
f0102ccd:	74 1a                	je     f0102ce9 <command_test_paging_manipulation+0x26>
	{
		cprintf("Invalid number of arguments! USAGE: tstpg <testname>\n") ;
f0102ccf:	83 ec 0c             	sub    $0xc,%esp
f0102cd2:	68 3c 57 13 f0       	push   $0xf013573c
f0102cd7:	e8 32 e0 ff ff       	call   f0100d0e <cprintf>
f0102cdc:	83 c4 10             	add    $0x10,%esp
		return 0;
f0102cdf:	b8 00 00 00 00       	mov    $0x0,%eax
f0102ce4:	e9 e1 00 00 00       	jmp    f0102dca <command_test_paging_manipulation+0x107>
	}
	// Test 1.1-Set/Clear permissions: tstpg scperm1
	if(strcmp(arguments[1], "scperm1") == 0)
f0102ce9:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102cec:	83 c0 04             	add    $0x4,%eax
f0102cef:	8b 00                	mov    (%eax),%eax
f0102cf1:	83 ec 08             	sub    $0x8,%esp
f0102cf4:	68 72 57 13 f0       	push   $0xf0135772
f0102cf9:	50                   	push   %eax
f0102cfa:	e8 ff e5 02 00       	call   f01312fe <strcmp>
f0102cff:	83 c4 10             	add    $0x10,%esp
f0102d02:	85 c0                	test   %eax,%eax
f0102d04:	75 0a                	jne    f0102d10 <command_test_paging_manipulation+0x4d>
	{
		test_pt_set_page_permissions();
f0102d06:	e8 6c e4 00 00       	call   f0111177 <test_pt_set_page_permissions>
f0102d0b:	e9 b5 00 00 00       	jmp    f0102dc5 <command_test_paging_manipulation+0x102>
	}
	// Test 1.2-Set/Clear permissions: tstpg scperm2
	else if(strcmp(arguments[1], "scperm2") == 0)
f0102d10:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102d13:	83 c0 04             	add    $0x4,%eax
f0102d16:	8b 00                	mov    (%eax),%eax
f0102d18:	83 ec 08             	sub    $0x8,%esp
f0102d1b:	68 7a 57 13 f0       	push   $0xf013577a
f0102d20:	50                   	push   %eax
f0102d21:	e8 d8 e5 02 00       	call   f01312fe <strcmp>
f0102d26:	83 c4 10             	add    $0x10,%esp
f0102d29:	85 c0                	test   %eax,%eax
f0102d2b:	75 0a                	jne    f0102d37 <command_test_paging_manipulation+0x74>
	{
		test_pt_set_page_permissions_invalid_va();
f0102d2d:	e8 a8 e6 00 00       	call   f01113da <test_pt_set_page_permissions_invalid_va>
f0102d32:	e9 8e 00 00 00       	jmp    f0102dc5 <command_test_paging_manipulation+0x102>
	}
	// Test 2-Get permissions: tstpg getperm
	else if(strcmp(arguments[1], "getperm") == 0)
f0102d37:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102d3a:	83 c0 04             	add    $0x4,%eax
f0102d3d:	8b 00                	mov    (%eax),%eax
f0102d3f:	83 ec 08             	sub    $0x8,%esp
f0102d42:	68 82 57 13 f0       	push   $0xf0135782
f0102d47:	50                   	push   %eax
f0102d48:	e8 b1 e5 02 00       	call   f01312fe <strcmp>
f0102d4d:	83 c4 10             	add    $0x10,%esp
f0102d50:	85 c0                	test   %eax,%eax
f0102d52:	75 07                	jne    f0102d5b <command_test_paging_manipulation+0x98>
	{
		test_pt_get_page_permissions();
f0102d54:	e8 ca e6 00 00       	call   f0111423 <test_pt_get_page_permissions>
f0102d59:	eb 6a                	jmp    f0102dc5 <command_test_paging_manipulation+0x102>
	}
	// Test 3.1-Clear entry: tstpg clear1
	else if(strcmp(arguments[1], "clear1") == 0)
f0102d5b:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102d5e:	83 c0 04             	add    $0x4,%eax
f0102d61:	8b 00                	mov    (%eax),%eax
f0102d63:	83 ec 08             	sub    $0x8,%esp
f0102d66:	68 8a 57 13 f0       	push   $0xf013578a
f0102d6b:	50                   	push   %eax
f0102d6c:	e8 8d e5 02 00       	call   f01312fe <strcmp>
f0102d71:	83 c4 10             	add    $0x10,%esp
f0102d74:	85 c0                	test   %eax,%eax
f0102d76:	75 07                	jne    f0102d7f <command_test_paging_manipulation+0xbc>
	{
		test_pt_clear_page_table_entry();
f0102d78:	e8 ea e7 00 00       	call   f0111567 <test_pt_clear_page_table_entry>
f0102d7d:	eb 46                	jmp    f0102dc5 <command_test_paging_manipulation+0x102>
	}
	// Test 3.2-Clear entry: tstpg clear2
	else if(strcmp(arguments[1], "clear2") == 0)
f0102d7f:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102d82:	83 c0 04             	add    $0x4,%eax
f0102d85:	8b 00                	mov    (%eax),%eax
f0102d87:	83 ec 08             	sub    $0x8,%esp
f0102d8a:	68 91 57 13 f0       	push   $0xf0135791
f0102d8f:	50                   	push   %eax
f0102d90:	e8 69 e5 02 00       	call   f01312fe <strcmp>
f0102d95:	83 c4 10             	add    $0x10,%esp
f0102d98:	85 c0                	test   %eax,%eax
f0102d9a:	75 07                	jne    f0102da3 <command_test_paging_manipulation+0xe0>
	{
		test_pt_clear_page_table_entry_invalid_va();
f0102d9c:	e8 1f e9 00 00       	call   f01116c0 <test_pt_clear_page_table_entry_invalid_va>
f0102da1:	eb 22                	jmp    f0102dc5 <command_test_paging_manipulation+0x102>
	}
	// Test 4-Convert virtual to physical: tstpg v2p
	else if(strcmp(arguments[1], "v2p") == 0)
f0102da3:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102da6:	83 c0 04             	add    $0x4,%eax
f0102da9:	8b 00                	mov    (%eax),%eax
f0102dab:	83 ec 08             	sub    $0x8,%esp
f0102dae:	68 98 57 13 f0       	push   $0xf0135798
f0102db3:	50                   	push   %eax
f0102db4:	e8 45 e5 02 00       	call   f01312fe <strcmp>
f0102db9:	83 c4 10             	add    $0x10,%esp
f0102dbc:	85 c0                	test   %eax,%eax
f0102dbe:	75 05                	jne    f0102dc5 <command_test_paging_manipulation+0x102>
	{
		test_virtual_to_physical();
f0102dc0:	e8 33 e9 00 00       	call   f01116f8 <test_virtual_to_physical>
	}
	return 0;
f0102dc5:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102dca:	c9                   	leave  
f0102dcb:	c3                   	ret    

f0102dcc <command_test_kheap>:

int command_test_kheap(int number_of_arguments, char **arguments)
{
f0102dcc:	55                   	push   %ebp
f0102dcd:	89 e5                	mov    %esp,%ebp
f0102dcf:	83 ec 18             	sub    $0x18,%esp
	// Parameters Validation Checking
	if (strcmp(arguments[2], "kmalloc") == 0 && number_of_arguments != 4)
f0102dd2:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102dd5:	83 c0 08             	add    $0x8,%eax
f0102dd8:	8b 00                	mov    (%eax),%eax
f0102dda:	83 ec 08             	sub    $0x8,%esp
f0102ddd:	68 9c 57 13 f0       	push   $0xf013579c
f0102de2:	50                   	push   %eax
f0102de3:	e8 16 e5 02 00       	call   f01312fe <strcmp>
f0102de8:	83 c4 10             	add    $0x10,%esp
f0102deb:	85 c0                	test   %eax,%eax
f0102ded:	75 20                	jne    f0102e0f <command_test_kheap+0x43>
f0102def:	83 7d 08 04          	cmpl   $0x4,0x8(%ebp)
f0102df3:	74 1a                	je     f0102e0f <command_test_kheap+0x43>
	{
		cprintf("Invalid number of arguments! USAGE: tstkheap <Strategy> kmalloc <1 or 2 or 3>\n") ;
f0102df5:	83 ec 0c             	sub    $0xc,%esp
f0102df8:	68 a4 57 13 f0       	push   $0xf01357a4
f0102dfd:	e8 0c df ff ff       	call   f0100d0e <cprintf>
f0102e02:	83 c4 10             	add    $0x10,%esp
		return 0;
f0102e05:	b8 00 00 00 00       	mov    $0x0,%eax
f0102e0a:	e9 33 03 00 00       	jmp    f0103142 <command_test_kheap+0x376>
	}
	if (strcmp(arguments[2], "kmalloc") != 0 && number_of_arguments != 3)
f0102e0f:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102e12:	83 c0 08             	add    $0x8,%eax
f0102e15:	8b 00                	mov    (%eax),%eax
f0102e17:	83 ec 08             	sub    $0x8,%esp
f0102e1a:	68 9c 57 13 f0       	push   $0xf013579c
f0102e1f:	50                   	push   %eax
f0102e20:	e8 d9 e4 02 00       	call   f01312fe <strcmp>
f0102e25:	83 c4 10             	add    $0x10,%esp
f0102e28:	85 c0                	test   %eax,%eax
f0102e2a:	74 20                	je     f0102e4c <command_test_kheap+0x80>
f0102e2c:	83 7d 08 03          	cmpl   $0x3,0x8(%ebp)
f0102e30:	74 1a                	je     f0102e4c <command_test_kheap+0x80>
	{
		cprintf("Invalid number of arguments! USAGE: tstkheap <Strategy> <testname>\n") ;
f0102e32:	83 ec 0c             	sub    $0xc,%esp
f0102e35:	68 f4 57 13 f0       	push   $0xf01357f4
f0102e3a:	e8 cf de ff ff       	call   f0100d0e <cprintf>
f0102e3f:	83 c4 10             	add    $0x10,%esp
		return 0;
f0102e42:	b8 00 00 00 00       	mov    $0x0,%eax
f0102e47:	e9 f6 02 00 00       	jmp    f0103142 <command_test_kheap+0x376>
	}

	// Setting Strategy
	if(strcmp(arguments[1], "FF") == 0 || strcmp(arguments[1], "ff") == 0)
f0102e4c:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102e4f:	83 c0 04             	add    $0x4,%eax
f0102e52:	8b 00                	mov    (%eax),%eax
f0102e54:	83 ec 08             	sub    $0x8,%esp
f0102e57:	68 a0 56 13 f0       	push   $0xf01356a0
f0102e5c:	50                   	push   %eax
f0102e5d:	e8 9c e4 02 00       	call   f01312fe <strcmp>
f0102e62:	83 c4 10             	add    $0x10,%esp
f0102e65:	85 c0                	test   %eax,%eax
f0102e67:	74 1d                	je     f0102e86 <command_test_kheap+0xba>
f0102e69:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102e6c:	83 c0 04             	add    $0x4,%eax
f0102e6f:	8b 00                	mov    (%eax),%eax
f0102e71:	83 ec 08             	sub    $0x8,%esp
f0102e74:	68 a3 56 13 f0       	push   $0xf01356a3
f0102e79:	50                   	push   %eax
f0102e7a:	e8 7f e4 02 00       	call   f01312fe <strcmp>
f0102e7f:	83 c4 10             	add    $0x10,%esp
f0102e82:	85 c0                	test   %eax,%eax
f0102e84:	75 1a                	jne    f0102ea0 <command_test_kheap+0xd4>
	{
		setKHeapPlacementStrategyFIRSTFIT();
f0102e86:	e8 60 e0 ff ff       	call   f0100eeb <setKHeapPlacementStrategyFIRSTFIT>
		cprintf("Kernel Heap placement strategy is FIRST FIT\n");
f0102e8b:	83 ec 0c             	sub    $0xc,%esp
f0102e8e:	68 3c 52 13 f0       	push   $0xf013523c
f0102e93:	e8 76 de ff ff       	call   f0100d0e <cprintf>
f0102e98:	83 c4 10             	add    $0x10,%esp
f0102e9b:	e9 a0 00 00 00       	jmp    f0102f40 <command_test_kheap+0x174>
	}
	else if(strcmp(arguments[1], "BF") == 0 || strcmp(arguments[1], "bf") == 0)
f0102ea0:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102ea3:	83 c0 04             	add    $0x4,%eax
f0102ea6:	8b 00                	mov    (%eax),%eax
f0102ea8:	83 ec 08             	sub    $0x8,%esp
f0102eab:	68 a6 56 13 f0       	push   $0xf01356a6
f0102eb0:	50                   	push   %eax
f0102eb1:	e8 48 e4 02 00       	call   f01312fe <strcmp>
f0102eb6:	83 c4 10             	add    $0x10,%esp
f0102eb9:	85 c0                	test   %eax,%eax
f0102ebb:	74 1d                	je     f0102eda <command_test_kheap+0x10e>
f0102ebd:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102ec0:	83 c0 04             	add    $0x4,%eax
f0102ec3:	8b 00                	mov    (%eax),%eax
f0102ec5:	83 ec 08             	sub    $0x8,%esp
f0102ec8:	68 a9 56 13 f0       	push   $0xf01356a9
f0102ecd:	50                   	push   %eax
f0102ece:	e8 2b e4 02 00       	call   f01312fe <strcmp>
f0102ed3:	83 c4 10             	add    $0x10,%esp
f0102ed6:	85 c0                	test   %eax,%eax
f0102ed8:	75 17                	jne    f0102ef1 <command_test_kheap+0x125>
	{
		setKHeapPlacementStrategyBESTFIT();
f0102eda:	e8 1c e0 ff ff       	call   f0100efb <setKHeapPlacementStrategyBESTFIT>
		cprintf("Kernel Heap placement strategy is BEST FIT\n");
f0102edf:	83 ec 0c             	sub    $0xc,%esp
f0102ee2:	68 6c 52 13 f0       	push   $0xf013526c
f0102ee7:	e8 22 de ff ff       	call   f0100d0e <cprintf>
f0102eec:	83 c4 10             	add    $0x10,%esp
f0102eef:	eb 4f                	jmp    f0102f40 <command_test_kheap+0x174>
	}
	else if(strcmp(arguments[1], "NF") == 0 || strcmp(arguments[1], "nf") == 0)
f0102ef1:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102ef4:	83 c0 04             	add    $0x4,%eax
f0102ef7:	8b 00                	mov    (%eax),%eax
f0102ef9:	83 ec 08             	sub    $0x8,%esp
f0102efc:	68 ac 56 13 f0       	push   $0xf01356ac
f0102f01:	50                   	push   %eax
f0102f02:	e8 f7 e3 02 00       	call   f01312fe <strcmp>
f0102f07:	83 c4 10             	add    $0x10,%esp
f0102f0a:	85 c0                	test   %eax,%eax
f0102f0c:	74 1d                	je     f0102f2b <command_test_kheap+0x15f>
f0102f0e:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102f11:	83 c0 04             	add    $0x4,%eax
f0102f14:	8b 00                	mov    (%eax),%eax
f0102f16:	83 ec 08             	sub    $0x8,%esp
f0102f19:	68 af 56 13 f0       	push   $0xf01356af
f0102f1e:	50                   	push   %eax
f0102f1f:	e8 da e3 02 00       	call   f01312fe <strcmp>
f0102f24:	83 c4 10             	add    $0x10,%esp
f0102f27:	85 c0                	test   %eax,%eax
f0102f29:	75 15                	jne    f0102f40 <command_test_kheap+0x174>
	{
		setKHeapPlacementStrategyNEXTFIT();
f0102f2b:	e8 db df ff ff       	call   f0100f0b <setKHeapPlacementStrategyNEXTFIT>
		cprintf("Kernel Heap placement strategy is NEXT FIT\n");
f0102f30:	83 ec 0c             	sub    $0xc,%esp
f0102f33:	68 98 52 13 f0       	push   $0xf0135298
f0102f38:	e8 d1 dd ff ff       	call   f0100d0e <cprintf>
f0102f3d:	83 c4 10             	add    $0x10,%esp
	}

	// Test 1-kmalloc: tstkheap FF kmalloc 1
	if(strcmp(arguments[2], "kmalloc") == 0)
f0102f40:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102f43:	83 c0 08             	add    $0x8,%eax
f0102f46:	8b 00                	mov    (%eax),%eax
f0102f48:	83 ec 08             	sub    $0x8,%esp
f0102f4b:	68 9c 57 13 f0       	push   $0xf013579c
f0102f50:	50                   	push   %eax
f0102f51:	e8 a8 e3 02 00       	call   f01312fe <strcmp>
f0102f56:	83 c4 10             	add    $0x10,%esp
f0102f59:	85 c0                	test   %eax,%eax
f0102f5b:	0f 85 13 01 00 00    	jne    f0103074 <command_test_kheap+0x2a8>
	{
		uint32 testNum = strtol(arguments[3], NULL, 10);
f0102f61:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102f64:	83 c0 0c             	add    $0xc,%eax
f0102f67:	8b 00                	mov    (%eax),%eax
f0102f69:	83 ec 04             	sub    $0x4,%esp
f0102f6c:	6a 0a                	push   $0xa
f0102f6e:	6a 00                	push   $0x0
f0102f70:	50                   	push   %eax
f0102f71:	e8 dc e5 02 00       	call   f0131552 <strtol>
f0102f76:	83 c4 10             	add    $0x10,%esp
f0102f79:	89 45 f4             	mov    %eax,-0xc(%ebp)
		if(isKHeapPlacementStrategyFIRSTFIT())
f0102f7c:	e8 be df ff ff       	call   f0100f3f <isKHeapPlacementStrategyFIRSTFIT>
f0102f81:	84 c0                	test   %al,%al
f0102f83:	74 54                	je     f0102fd9 <command_test_kheap+0x20d>
		{
			if (testNum == 0)
f0102f85:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0102f89:	75 1a                	jne    f0102fa5 <command_test_kheap+0x1d9>
			{
				cprintf("Error: [Kernel.FirstFit] must specify the test number (1 or 2) as an argument\n");
f0102f8b:	83 ec 0c             	sub    $0xc,%esp
f0102f8e:	68 10 55 13 f0       	push   $0xf0135510
f0102f93:	e8 76 dd ff ff       	call   f0100d0e <cprintf>
f0102f98:	83 c4 10             	add    $0x10,%esp
				return 0;
f0102f9b:	b8 00 00 00 00       	mov    $0x0,%eax
f0102fa0:	e9 9d 01 00 00       	jmp    f0103142 <command_test_kheap+0x376>
			}
			//Test FIRST FIT allocation
			if (testNum == 1)
f0102fa5:	83 7d f4 01          	cmpl   $0x1,-0xc(%ebp)
f0102fa9:	75 0a                	jne    f0102fb5 <command_test_kheap+0x1e9>
				test_kmalloc();
f0102fab:	e8 31 47 01 00       	call   f01176e1 <test_kmalloc>
f0102fb0:	e9 b5 00 00 00       	jmp    f010306a <command_test_kheap+0x29e>
			else if (testNum == 2)
f0102fb5:	83 7d f4 02          	cmpl   $0x2,-0xc(%ebp)
f0102fb9:	75 0a                	jne    f0102fc5 <command_test_kheap+0x1f9>
				test_kmalloc_firstfit1();
f0102fbb:	e8 aa 95 01 00       	call   f011c56a <test_kmalloc_firstfit1>
f0102fc0:	e9 a5 00 00 00       	jmp    f010306a <command_test_kheap+0x29e>
			else if (testNum == 3)
f0102fc5:	83 7d f4 03          	cmpl   $0x3,-0xc(%ebp)
f0102fc9:	0f 85 9b 00 00 00    	jne    f010306a <command_test_kheap+0x29e>
				test_kmalloc_firstfit2();
f0102fcf:	e8 38 a9 01 00       	call   f011d90c <test_kmalloc_firstfit2>
f0102fd4:	e9 91 00 00 00       	jmp    f010306a <command_test_kheap+0x29e>
		}
		else if(isKHeapPlacementStrategyBESTFIT())
f0102fd9:	e8 76 df ff ff       	call   f0100f54 <isKHeapPlacementStrategyBESTFIT>
f0102fde:	84 c0                	test   %al,%al
f0102fe0:	74 47                	je     f0103029 <command_test_kheap+0x25d>
		{
			if (testNum == 0)
f0102fe2:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0102fe6:	75 1a                	jne    f0103002 <command_test_kheap+0x236>
			{
				cprintf("Error: [Kernel.BestFit] must specify the test number (1, 2, 3) as an argument\n");
f0102fe8:	83 ec 0c             	sub    $0xc,%esp
f0102feb:	68 60 55 13 f0       	push   $0xf0135560
f0102ff0:	e8 19 dd ff ff       	call   f0100d0e <cprintf>
f0102ff5:	83 c4 10             	add    $0x10,%esp
				return 0;
f0102ff8:	b8 00 00 00 00       	mov    $0x0,%eax
f0102ffd:	e9 40 01 00 00       	jmp    f0103142 <command_test_kheap+0x376>
			}
			if (testNum == 1)
f0103002:	83 7d f4 01          	cmpl   $0x1,-0xc(%ebp)
f0103006:	75 07                	jne    f010300f <command_test_kheap+0x243>
				test_kmalloc();
f0103008:	e8 d4 46 01 00       	call   f01176e1 <test_kmalloc>
f010300d:	eb 5b                	jmp    f010306a <command_test_kheap+0x29e>
			else if (testNum == 2)
f010300f:	83 7d f4 02          	cmpl   $0x2,-0xc(%ebp)
f0103013:	75 07                	jne    f010301c <command_test_kheap+0x250>
				test_kmalloc_bestfit1();
f0103015:	e8 1a 70 01 00       	call   f011a034 <test_kmalloc_bestfit1>
f010301a:	eb 4e                	jmp    f010306a <command_test_kheap+0x29e>
			else if (testNum == 3)
f010301c:	83 7d f4 03          	cmpl   $0x3,-0xc(%ebp)
f0103020:	75 48                	jne    f010306a <command_test_kheap+0x29e>
				test_kmalloc_bestfit2();
f0103022:	e8 63 82 01 00       	call   f011b28a <test_kmalloc_bestfit2>
f0103027:	eb 41                	jmp    f010306a <command_test_kheap+0x29e>
		}
		else if(isKHeapPlacementStrategyNEXTFIT())
f0103029:	e8 3b df ff ff       	call   f0100f69 <isKHeapPlacementStrategyNEXTFIT>
f010302e:	84 c0                	test   %al,%al
f0103030:	74 38                	je     f010306a <command_test_kheap+0x29e>
		{
			if (testNum == 0)
f0103032:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0103036:	75 1a                	jne    f0103052 <command_test_kheap+0x286>
			{
				cprintf("Error: [Kernel.NextFit] must specify the test number (1 or 2) as an argument\n");
f0103038:	83 ec 0c             	sub    $0xc,%esp
f010303b:	68 b0 55 13 f0       	push   $0xf01355b0
f0103040:	e8 c9 dc ff ff       	call   f0100d0e <cprintf>
f0103045:	83 c4 10             	add    $0x10,%esp
				return 0;
f0103048:	b8 00 00 00 00       	mov    $0x0,%eax
f010304d:	e9 f0 00 00 00       	jmp    f0103142 <command_test_kheap+0x376>
			}
			//Test cont. allocation
			if (testNum == 1)
f0103052:	83 7d f4 01          	cmpl   $0x1,-0xc(%ebp)
f0103056:	75 07                	jne    f010305f <command_test_kheap+0x293>
				test_kmalloc();
f0103058:	e8 84 46 01 00       	call   f01176e1 <test_kmalloc>
f010305d:	eb 0b                	jmp    f010306a <command_test_kheap+0x29e>
			//Test nextfit strategy
			else if (testNum == 2)
f010305f:	83 7d f4 02          	cmpl   $0x2,-0xc(%ebp)
f0103063:	75 05                	jne    f010306a <command_test_kheap+0x29e>
				test_kmalloc_nextfit();
f0103065:	e8 d5 58 01 00       	call   f011893f <test_kmalloc_nextfit>
		}
		return 0;
f010306a:	b8 00 00 00 00       	mov    $0x0,%eax
f010306f:	e9 ce 00 00 00       	jmp    f0103142 <command_test_kheap+0x376>
	}
	// Test 2-kfree: tstkheap FF kfree
	else if(strcmp(arguments[2], "kfree") == 0)
f0103074:	8b 45 0c             	mov    0xc(%ebp),%eax
f0103077:	83 c0 08             	add    $0x8,%eax
f010307a:	8b 00                	mov    (%eax),%eax
f010307c:	83 ec 08             	sub    $0x8,%esp
f010307f:	68 38 58 13 f0       	push   $0xf0135838
f0103084:	50                   	push   %eax
f0103085:	e8 74 e2 02 00       	call   f01312fe <strcmp>
f010308a:	83 c4 10             	add    $0x10,%esp
f010308d:	85 c0                	test   %eax,%eax
f010308f:	75 28                	jne    f01030b9 <command_test_kheap+0x2ed>
	{
		if (isKHeapPlacementStrategyBESTFIT() || isKHeapPlacementStrategyFIRSTFIT())
f0103091:	e8 be de ff ff       	call   f0100f54 <isKHeapPlacementStrategyBESTFIT>
f0103096:	84 c0                	test   %al,%al
f0103098:	75 09                	jne    f01030a3 <command_test_kheap+0x2d7>
f010309a:	e8 a0 de ff ff       	call   f0100f3f <isKHeapPlacementStrategyFIRSTFIT>
f010309f:	84 c0                	test   %al,%al
f01030a1:	74 07                	je     f01030aa <command_test_kheap+0x2de>
		{
			test_kfree_bestfirstfit();
f01030a3:	e8 9b ee 01 00       	call   f0121f43 <test_kfree_bestfirstfit>
f01030a8:	eb 05                	jmp    f01030af <command_test_kheap+0x2e3>
		}
		else //NEXT & CONT
		{
			test_kfree();
f01030aa:	e8 42 cd 01 00       	call   f011fdf1 <test_kfree>
		}
		return 0;
f01030af:	b8 00 00 00 00       	mov    $0x0,%eax
f01030b4:	e9 89 00 00 00       	jmp    f0103142 <command_test_kheap+0x376>
	}
	// Test 3-kphysaddr: tstkheap FF kphysaddr
	else if(strcmp(arguments[2], "kphysaddr") == 0)
f01030b9:	8b 45 0c             	mov    0xc(%ebp),%eax
f01030bc:	83 c0 08             	add    $0x8,%eax
f01030bf:	8b 00                	mov    (%eax),%eax
f01030c1:	83 ec 08             	sub    $0x8,%esp
f01030c4:	68 3e 58 13 f0       	push   $0xf013583e
f01030c9:	50                   	push   %eax
f01030ca:	e8 2f e2 02 00       	call   f01312fe <strcmp>
f01030cf:	83 c4 10             	add    $0x10,%esp
f01030d2:	85 c0                	test   %eax,%eax
f01030d4:	75 0c                	jne    f01030e2 <command_test_kheap+0x316>
	{
		test_kheap_phys_addr();
f01030d6:	e8 64 08 02 00       	call   f012393f <test_kheap_phys_addr>
		return 0;
f01030db:	b8 00 00 00 00       	mov    $0x0,%eax
f01030e0:	eb 60                	jmp    f0103142 <command_test_kheap+0x376>
	}
	// Test 4-kvirtaddr: tstkheap FF kvirtaddr
	else if(strcmp(arguments[2], "kvirtaddr") == 0)
f01030e2:	8b 45 0c             	mov    0xc(%ebp),%eax
f01030e5:	83 c0 08             	add    $0x8,%eax
f01030e8:	8b 00                	mov    (%eax),%eax
f01030ea:	83 ec 08             	sub    $0x8,%esp
f01030ed:	68 48 58 13 f0       	push   $0xf0135848
f01030f2:	50                   	push   %eax
f01030f3:	e8 06 e2 02 00       	call   f01312fe <strcmp>
f01030f8:	83 c4 10             	add    $0x10,%esp
f01030fb:	85 c0                	test   %eax,%eax
f01030fd:	75 0c                	jne    f010310b <command_test_kheap+0x33f>
	{
		test_kheap_virt_addr();
f01030ff:	e8 0b 1d 02 00       	call   f0124e0f <test_kheap_virt_addr>
		return 0;
f0103104:	b8 00 00 00 00       	mov    $0x0,%eax
f0103109:	eb 37                	jmp    f0103142 <command_test_kheap+0x376>
	}
	// Test 5-krealloc: tstkheap BF krealloc
	else if(strcmp(arguments[2], "krealloc") == 0)
f010310b:	8b 45 0c             	mov    0xc(%ebp),%eax
f010310e:	83 c0 08             	add    $0x8,%eax
f0103111:	8b 00                	mov    (%eax),%eax
f0103113:	83 ec 08             	sub    $0x8,%esp
f0103116:	68 52 58 13 f0       	push   $0xf0135852
f010311b:	50                   	push   %eax
f010311c:	e8 dd e1 02 00       	call   f01312fe <strcmp>
f0103121:	83 c4 10             	add    $0x10,%esp
f0103124:	85 c0                	test   %eax,%eax
f0103126:	75 15                	jne    f010313d <command_test_kheap+0x371>
	{
		if (isKHeapPlacementStrategyBESTFIT())
f0103128:	e8 27 de ff ff       	call   f0100f54 <isKHeapPlacementStrategyBESTFIT>
f010312d:	84 c0                	test   %al,%al
f010312f:	74 05                	je     f0103136 <command_test_kheap+0x36a>
		{
			test_krealloc_BF();
f0103131:	e8 7d ab 02 00       	call   f012dcb3 <test_krealloc_BF>
		}
		return 0;
f0103136:	b8 00 00 00 00       	mov    $0x0,%eax
f010313b:	eb 05                	jmp    f0103142 <command_test_kheap+0x376>
	}
	return 0;
f010313d:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0103142:	c9                   	leave  
f0103143:	c3                   	ret    

f0103144 <read_disk_page>:
void __pf_remove_env_all_tables(struct Env* ptr_env);
void __pf_remove_env_table(struct Env* ptr_env, uint32 virtual_address);


int read_disk_page(uint32 dfn, void* va)
{
f0103144:	55                   	push   %ebp
f0103145:	89 e5                	mov    %esp,%ebp
f0103147:	83 ec 18             	sub    $0x18,%esp
	uint32 df_start_sector = PAGE_FILE_START_SECTOR+dfn*SECTOR_PER_PAGE;
f010314a:	8b 45 08             	mov    0x8(%ebp),%eax
f010314d:	05 00 14 00 00       	add    $0x1400,%eax
f0103152:	c1 e0 03             	shl    $0x3,%eax
f0103155:	89 45 f4             	mov    %eax,-0xc(%ebp)

	//LOG_STATMENT( cprintf("reading from disk to mem addr %x at sector %d\n",va,df_start_sector);  );
	int success = ide_read(df_start_sector, (void*)va, SECTOR_PER_PAGE);
f0103158:	83 ec 04             	sub    $0x4,%esp
f010315b:	6a 08                	push   $0x8
f010315d:	ff 75 0c             	pushl  0xc(%ebp)
f0103160:	ff 75 f4             	pushl  -0xc(%ebp)
f0103163:	e8 dd e7 02 00       	call   f0131945 <ide_read>
f0103168:	83 c4 10             	add    $0x10,%esp
f010316b:	89 45 f0             	mov    %eax,-0x10(%ebp)
	//LOG_STATMENT( if(success==0) {cprintf("read from disk successuflly.\n");} else {cprintf("read from disk failed !!\n");} );

	return success;
f010316e:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
f0103171:	c9                   	leave  
f0103172:	c3                   	ret    

f0103173 <write_disk_page>:


int write_disk_page(uint32 dfn, void* va)
{
f0103173:	55                   	push   %ebp
f0103174:	89 e5                	mov    %esp,%ebp
f0103176:	83 ec 18             	sub    $0x18,%esp
	//write disk at wanted frame
	uint32 df_start_sector = PAGE_FILE_START_SECTOR+dfn*SECTOR_PER_PAGE;
f0103179:	8b 45 08             	mov    0x8(%ebp),%eax
f010317c:	05 00 14 00 00       	add    $0x1400,%eax
f0103181:	c1 e0 03             	shl    $0x3,%eax
f0103184:	89 45 f4             	mov    %eax,-0xc(%ebp)

	//LOG_STATMENT( cprintf(">>> writing to disk from mem addr %x at sector %d\n",va,df_start_sector);  );
	int success = ide_write(df_start_sector, (void*)va, SECTOR_PER_PAGE);
f0103187:	83 ec 04             	sub    $0x4,%esp
f010318a:	6a 08                	push   $0x8
f010318c:	ff 75 0c             	pushl  0xc(%ebp)
f010318f:	ff 75 f4             	pushl  -0xc(%ebp)
f0103192:	e8 ee e8 02 00       	call   f0131a85 <ide_write>
f0103197:	83 c4 10             	add    $0x10,%esp
f010319a:	89 45 f0             	mov    %eax,-0x10(%ebp)
	//LOG_STATMENT( if(success==0) {cprintf(">>> written to disk successfully.\n");} else {cprintf(">>> written to disk failed !!\n");} );

	if(success != 0)
f010319d:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f01031a1:	74 14                	je     f01031b7 <write_disk_page+0x44>
		panic("Error writing on disk\n");
f01031a3:	83 ec 04             	sub    $0x4,%esp
f01031a6:	68 5c 58 13 f0       	push   $0xf013585c
f01031ab:	6a 2e                	push   $0x2e
f01031ad:	68 73 58 13 f0       	push   $0xf0135873
f01031b2:	e8 4e d0 ff ff       	call   f0100205 <_panic>
	return success;
f01031b7:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
f01031ba:	c9                   	leave  
f01031bb:	c3                   	ret    

f01031bc <initialize_disk_page_file>:
// After this point, ONLY use the functions below
// to allocate and deallocate physical memory via the disk_free_frame_list,
// and NEVER use boot_allocate_space() or the related boot-time functions above.
//
void initialize_disk_page_file()
{
f01031bc:	55                   	push   %ebp
f01031bd:	89 e5                	mov    %esp,%ebp
f01031bf:	53                   	push   %ebx
f01031c0:	83 ec 14             	sub    $0x14,%esp
	int i;
	LIST_INIT(&disk_free_frame_list);
f01031c3:	c7 05 78 26 78 f0 00 	movl   $0x0,0xf0782678
f01031ca:	00 00 00 
f01031cd:	c7 05 7c 26 78 f0 00 	movl   $0x0,0xf078267c
f01031d4:	00 00 00 
f01031d7:	c7 05 84 26 78 f0 00 	movl   $0x0,0xf0782684
f01031de:	00 00 00 

	//LOG_STATMENT(cprintf("PAGES_PER_FILE = %d, PAGE_FILE_START_SECTOR = %d\n",PAGES_PER_FILE,PAGE_FILE_START_SECTOR););
	for (i = 1; i < PAGES_PER_FILE; i++)
f01031e1:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
f01031e8:	e9 e8 00 00 00       	jmp    f01032d5 <initialize_disk_page_file+0x119>
	{
		initialize_frame_info(&(disk_frames_info[i]));
f01031ed:	8b 0d 9c 25 78 f0    	mov    0xf078259c,%ecx
f01031f3:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01031f6:	89 d0                	mov    %edx,%eax
f01031f8:	01 c0                	add    %eax,%eax
f01031fa:	01 d0                	add    %edx,%eax
f01031fc:	c1 e0 03             	shl    $0x3,%eax
f01031ff:	01 c8                	add    %ecx,%eax
f0103201:	83 ec 0c             	sub    $0xc,%esp
f0103204:	50                   	push   %eax
f0103205:	e8 cd 36 00 00       	call   f01068d7 <initialize_frame_info>
f010320a:	83 c4 10             	add    $0x10,%esp

		//disk_frames_info[i].references = 0;
		LIST_INSERT_HEAD(&disk_free_frame_list, &disk_frames_info[i]);
f010320d:	8b 0d 9c 25 78 f0    	mov    0xf078259c,%ecx
f0103213:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0103216:	89 d0                	mov    %edx,%eax
f0103218:	01 c0                	add    %eax,%eax
f010321a:	01 d0                	add    %edx,%eax
f010321c:	c1 e0 03             	shl    $0x3,%eax
f010321f:	01 c8                	add    %ecx,%eax
f0103221:	85 c0                	test   %eax,%eax
f0103223:	75 14                	jne    f0103239 <initialize_disk_page_file+0x7d>
f0103225:	83 ec 04             	sub    $0x4,%esp
f0103228:	68 90 58 13 f0       	push   $0xf0135890
f010322d:	6a 59                	push   $0x59
f010322f:	68 73 58 13 f0       	push   $0xf0135873
f0103234:	e8 cc cf ff ff       	call   f0100205 <_panic>
f0103239:	8b 0d 9c 25 78 f0    	mov    0xf078259c,%ecx
f010323f:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0103242:	89 d0                	mov    %edx,%eax
f0103244:	01 c0                	add    %eax,%eax
f0103246:	01 d0                	add    %edx,%eax
f0103248:	c1 e0 03             	shl    $0x3,%eax
f010324b:	01 c8                	add    %ecx,%eax
f010324d:	8b 15 78 26 78 f0    	mov    0xf0782678,%edx
f0103253:	89 10                	mov    %edx,(%eax)
f0103255:	8b 00                	mov    (%eax),%eax
f0103257:	85 c0                	test   %eax,%eax
f0103259:	74 1f                	je     f010327a <initialize_disk_page_file+0xbe>
f010325b:	8b 15 78 26 78 f0    	mov    0xf0782678,%edx
f0103261:	8b 1d 9c 25 78 f0    	mov    0xf078259c,%ebx
f0103267:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f010326a:	89 c8                	mov    %ecx,%eax
f010326c:	01 c0                	add    %eax,%eax
f010326e:	01 c8                	add    %ecx,%eax
f0103270:	c1 e0 03             	shl    $0x3,%eax
f0103273:	01 d8                	add    %ebx,%eax
f0103275:	89 42 04             	mov    %eax,0x4(%edx)
f0103278:	eb 19                	jmp    f0103293 <initialize_disk_page_file+0xd7>
f010327a:	8b 0d 9c 25 78 f0    	mov    0xf078259c,%ecx
f0103280:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0103283:	89 d0                	mov    %edx,%eax
f0103285:	01 c0                	add    %eax,%eax
f0103287:	01 d0                	add    %edx,%eax
f0103289:	c1 e0 03             	shl    $0x3,%eax
f010328c:	01 c8                	add    %ecx,%eax
f010328e:	a3 7c 26 78 f0       	mov    %eax,0xf078267c
f0103293:	8b 0d 9c 25 78 f0    	mov    0xf078259c,%ecx
f0103299:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010329c:	89 d0                	mov    %edx,%eax
f010329e:	01 c0                	add    %eax,%eax
f01032a0:	01 d0                	add    %edx,%eax
f01032a2:	c1 e0 03             	shl    $0x3,%eax
f01032a5:	01 c8                	add    %ecx,%eax
f01032a7:	a3 78 26 78 f0       	mov    %eax,0xf0782678
f01032ac:	8b 0d 9c 25 78 f0    	mov    0xf078259c,%ecx
f01032b2:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01032b5:	89 d0                	mov    %edx,%eax
f01032b7:	01 c0                	add    %eax,%eax
f01032b9:	01 d0                	add    %edx,%eax
f01032bb:	c1 e0 03             	shl    $0x3,%eax
f01032be:	01 c8                	add    %ecx,%eax
f01032c0:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f01032c7:	a1 84 26 78 f0       	mov    0xf0782684,%eax
f01032cc:	40                   	inc    %eax
f01032cd:	a3 84 26 78 f0       	mov    %eax,0xf0782684
{
	int i;
	LIST_INIT(&disk_free_frame_list);

	//LOG_STATMENT(cprintf("PAGES_PER_FILE = %d, PAGE_FILE_START_SECTOR = %d\n",PAGES_PER_FILE,PAGE_FILE_START_SECTOR););
	for (i = 1; i < PAGES_PER_FILE; i++)
f01032d2:	ff 45 f4             	incl   -0xc(%ebp)
f01032d5:	81 7d f4 ff 07 02 00 	cmpl   $0x207ff,-0xc(%ebp)
f01032dc:	0f 8e 0b ff ff ff    	jle    f01031ed <initialize_disk_page_file+0x31>
		initialize_frame_info(&(disk_frames_info[i]));

		//disk_frames_info[i].references = 0;
		LIST_INSERT_HEAD(&disk_free_frame_list, &disk_frames_info[i]);
	}
}
f01032e2:	90                   	nop
f01032e3:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f01032e6:	c9                   	leave  
f01032e7:	c3                   	ret    

f01032e8 <to_disk_frame_number>:
// Initialize a Frame_Info structure.
// The result has null links and 0 references.
// Note that the corresponding physical frame is NOT initialized!
//
static inline uint32 to_disk_frame_number(struct FrameInfo *ptr_frame_info)
{
f01032e8:	55                   	push   %ebp
f01032e9:	89 e5                	mov    %esp,%ebp
	return ptr_frame_info - disk_frames_info;
f01032eb:	8b 45 08             	mov    0x8(%ebp),%eax
f01032ee:	8b 15 9c 25 78 f0    	mov    0xf078259c,%edx
f01032f4:	29 d0                	sub    %edx,%eax
f01032f6:	c1 f8 03             	sar    $0x3,%eax
f01032f9:	89 c2                	mov    %eax,%edx
f01032fb:	89 d0                	mov    %edx,%eax
f01032fd:	c1 e0 02             	shl    $0x2,%eax
f0103300:	01 d0                	add    %edx,%eax
f0103302:	c1 e0 02             	shl    $0x2,%eax
f0103305:	01 d0                	add    %edx,%eax
f0103307:	c1 e0 02             	shl    $0x2,%eax
f010330a:	01 d0                	add    %edx,%eax
f010330c:	89 c1                	mov    %eax,%ecx
f010330e:	c1 e1 08             	shl    $0x8,%ecx
f0103311:	01 c8                	add    %ecx,%eax
f0103313:	89 c1                	mov    %eax,%ecx
f0103315:	c1 e1 10             	shl    $0x10,%ecx
f0103318:	01 c8                	add    %ecx,%eax
f010331a:	01 c0                	add    %eax,%eax
f010331c:	01 d0                	add    %edx,%eax
}
f010331e:	5d                   	pop    %ebp
f010331f:	c3                   	ret    

f0103320 <allocate_disk_frame>:
// RETURNS
//   0 -- on success
//   E_NO_PAGE_FILE_SPACE -- otherwise
//
int allocate_disk_frame(uint32 *dfn)
{
f0103320:	55                   	push   %ebp
f0103321:	89 e5                	mov    %esp,%ebp
f0103323:	83 ec 18             	sub    $0x18,%esp
	// Fill this function in
	struct FrameInfo *ptr_frame_info = LIST_FIRST(&disk_free_frame_list);
f0103326:	a1 78 26 78 f0       	mov    0xf0782678,%eax
f010332b:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if(ptr_frame_info == NULL)
f010332e:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0103332:	75 0a                	jne    f010333e <allocate_disk_frame+0x1e>
		return E_NO_PAGE_FILE_SPACE;
f0103334:	b8 f8 ff ff ff       	mov    $0xfffffff8,%eax
f0103339:	e9 a7 00 00 00       	jmp    f01033e5 <allocate_disk_frame+0xc5>

	LIST_REMOVE(&disk_free_frame_list, ptr_frame_info);
f010333e:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0103342:	75 14                	jne    f0103358 <allocate_disk_frame+0x38>
f0103344:	83 ec 04             	sub    $0x4,%esp
f0103347:	68 b3 58 13 f0       	push   $0xf01358b3
f010334c:	6a 78                	push   $0x78
f010334e:	68 73 58 13 f0       	push   $0xf0135873
f0103353:	e8 ad ce ff ff       	call   f0100205 <_panic>
f0103358:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010335b:	8b 00                	mov    (%eax),%eax
f010335d:	85 c0                	test   %eax,%eax
f010335f:	74 10                	je     f0103371 <allocate_disk_frame+0x51>
f0103361:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0103364:	8b 00                	mov    (%eax),%eax
f0103366:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0103369:	8b 52 04             	mov    0x4(%edx),%edx
f010336c:	89 50 04             	mov    %edx,0x4(%eax)
f010336f:	eb 0b                	jmp    f010337c <allocate_disk_frame+0x5c>
f0103371:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0103374:	8b 40 04             	mov    0x4(%eax),%eax
f0103377:	a3 7c 26 78 f0       	mov    %eax,0xf078267c
f010337c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010337f:	8b 40 04             	mov    0x4(%eax),%eax
f0103382:	85 c0                	test   %eax,%eax
f0103384:	74 0f                	je     f0103395 <allocate_disk_frame+0x75>
f0103386:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0103389:	8b 40 04             	mov    0x4(%eax),%eax
f010338c:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010338f:	8b 12                	mov    (%edx),%edx
f0103391:	89 10                	mov    %edx,(%eax)
f0103393:	eb 0a                	jmp    f010339f <allocate_disk_frame+0x7f>
f0103395:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0103398:	8b 00                	mov    (%eax),%eax
f010339a:	a3 78 26 78 f0       	mov    %eax,0xf0782678
f010339f:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01033a2:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f01033a8:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01033ab:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f01033b2:	a1 84 26 78 f0       	mov    0xf0782684,%eax
f01033b7:	48                   	dec    %eax
f01033b8:	a3 84 26 78 f0       	mov    %eax,0xf0782684
	initialize_frame_info(ptr_frame_info);
f01033bd:	83 ec 0c             	sub    $0xc,%esp
f01033c0:	ff 75 f4             	pushl  -0xc(%ebp)
f01033c3:	e8 0f 35 00 00       	call   f01068d7 <initialize_frame_info>
f01033c8:	83 c4 10             	add    $0x10,%esp
	*dfn = to_disk_frame_number(ptr_frame_info);
f01033cb:	83 ec 0c             	sub    $0xc,%esp
f01033ce:	ff 75 f4             	pushl  -0xc(%ebp)
f01033d1:	e8 12 ff ff ff       	call   f01032e8 <to_disk_frame_number>
f01033d6:	83 c4 10             	add    $0x10,%esp
f01033d9:	89 c2                	mov    %eax,%edx
f01033db:	8b 45 08             	mov    0x8(%ebp),%eax
f01033de:	89 10                	mov    %edx,(%eax)
	return 0;
f01033e0:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01033e5:	c9                   	leave  
f01033e6:	c3                   	ret    

f01033e7 <free_disk_frame>:

//
// Return a frame to the disk_free_frame_list.
//
inline void free_disk_frame(uint32 dfn)
{
f01033e7:	55                   	push   %ebp
f01033e8:	89 e5                	mov    %esp,%ebp
f01033ea:	53                   	push   %ebx
f01033eb:	83 ec 04             	sub    $0x4,%esp
	// Fill this function in
	if(dfn == 0) return;
f01033ee:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f01033f2:	0f 84 ca 00 00 00    	je     f01034c2 <free_disk_frame+0xdb>
	LIST_INSERT_HEAD(&disk_free_frame_list, &disk_frames_info[dfn]);
f01033f8:	8b 0d 9c 25 78 f0    	mov    0xf078259c,%ecx
f01033fe:	8b 55 08             	mov    0x8(%ebp),%edx
f0103401:	89 d0                	mov    %edx,%eax
f0103403:	01 c0                	add    %eax,%eax
f0103405:	01 d0                	add    %edx,%eax
f0103407:	c1 e0 03             	shl    $0x3,%eax
f010340a:	01 c8                	add    %ecx,%eax
f010340c:	85 c0                	test   %eax,%eax
f010340e:	75 17                	jne    f0103427 <free_disk_frame+0x40>
f0103410:	83 ec 04             	sub    $0x4,%esp
f0103413:	68 90 58 13 f0       	push   $0xf0135890
f0103418:	68 85 00 00 00       	push   $0x85
f010341d:	68 73 58 13 f0       	push   $0xf0135873
f0103422:	e8 de cd ff ff       	call   f0100205 <_panic>
f0103427:	8b 0d 9c 25 78 f0    	mov    0xf078259c,%ecx
f010342d:	8b 55 08             	mov    0x8(%ebp),%edx
f0103430:	89 d0                	mov    %edx,%eax
f0103432:	01 c0                	add    %eax,%eax
f0103434:	01 d0                	add    %edx,%eax
f0103436:	c1 e0 03             	shl    $0x3,%eax
f0103439:	01 c8                	add    %ecx,%eax
f010343b:	8b 15 78 26 78 f0    	mov    0xf0782678,%edx
f0103441:	89 10                	mov    %edx,(%eax)
f0103443:	8b 00                	mov    (%eax),%eax
f0103445:	85 c0                	test   %eax,%eax
f0103447:	74 1f                	je     f0103468 <free_disk_frame+0x81>
f0103449:	8b 15 78 26 78 f0    	mov    0xf0782678,%edx
f010344f:	8b 1d 9c 25 78 f0    	mov    0xf078259c,%ebx
f0103455:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0103458:	89 c8                	mov    %ecx,%eax
f010345a:	01 c0                	add    %eax,%eax
f010345c:	01 c8                	add    %ecx,%eax
f010345e:	c1 e0 03             	shl    $0x3,%eax
f0103461:	01 d8                	add    %ebx,%eax
f0103463:	89 42 04             	mov    %eax,0x4(%edx)
f0103466:	eb 19                	jmp    f0103481 <free_disk_frame+0x9a>
f0103468:	8b 0d 9c 25 78 f0    	mov    0xf078259c,%ecx
f010346e:	8b 55 08             	mov    0x8(%ebp),%edx
f0103471:	89 d0                	mov    %edx,%eax
f0103473:	01 c0                	add    %eax,%eax
f0103475:	01 d0                	add    %edx,%eax
f0103477:	c1 e0 03             	shl    $0x3,%eax
f010347a:	01 c8                	add    %ecx,%eax
f010347c:	a3 7c 26 78 f0       	mov    %eax,0xf078267c
f0103481:	8b 0d 9c 25 78 f0    	mov    0xf078259c,%ecx
f0103487:	8b 55 08             	mov    0x8(%ebp),%edx
f010348a:	89 d0                	mov    %edx,%eax
f010348c:	01 c0                	add    %eax,%eax
f010348e:	01 d0                	add    %edx,%eax
f0103490:	c1 e0 03             	shl    $0x3,%eax
f0103493:	01 c8                	add    %ecx,%eax
f0103495:	a3 78 26 78 f0       	mov    %eax,0xf0782678
f010349a:	8b 0d 9c 25 78 f0    	mov    0xf078259c,%ecx
f01034a0:	8b 55 08             	mov    0x8(%ebp),%edx
f01034a3:	89 d0                	mov    %edx,%eax
f01034a5:	01 c0                	add    %eax,%eax
f01034a7:	01 d0                	add    %edx,%eax
f01034a9:	c1 e0 03             	shl    $0x3,%eax
f01034ac:	01 c8                	add    %ecx,%eax
f01034ae:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f01034b5:	a1 84 26 78 f0       	mov    0xf0782684,%eax
f01034ba:	40                   	inc    %eax
f01034bb:	a3 84 26 78 f0       	mov    %eax,0xf0782684
f01034c0:	eb 01                	jmp    f01034c3 <free_disk_frame+0xdc>
// Return a frame to the disk_free_frame_list.
//
inline void free_disk_frame(uint32 dfn)
{
	// Fill this function in
	if(dfn == 0) return;
f01034c2:	90                   	nop
	LIST_INSERT_HEAD(&disk_free_frame_list, &disk_frames_info[dfn]);
}
f01034c3:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f01034c6:	c9                   	leave  
f01034c7:	c3                   	ret    

f01034c8 <get_disk_page_table>:

int get_disk_page_table(uint32 *ptr_disk_page_directory, const uint32 virtual_address, int create, uint32 **ptr_disk_page_table)
{
f01034c8:	55                   	push   %ebp
f01034c9:	89 e5                	mov    %esp,%ebp
f01034cb:	53                   	push   %ebx
f01034cc:	83 ec 14             	sub    $0x14,%esp
	// Fill this function in
	uint32 disk_page_directory_entry = ptr_disk_page_directory[PDX(virtual_address)];
f01034cf:	8b 45 0c             	mov    0xc(%ebp),%eax
f01034d2:	c1 e8 16             	shr    $0x16,%eax
f01034d5:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f01034dc:	8b 45 08             	mov    0x8(%ebp),%eax
f01034df:	01 d0                	add    %edx,%eax
f01034e1:	8b 00                	mov    (%eax),%eax
f01034e3:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if(USE_KHEAP && !CHECK_IF_KERNEL_ADDRESS(virtual_address))
f01034e6:	81 7d 0c ff ff bf ee 	cmpl   $0xeebfffff,0xc(%ebp)
f01034ed:	77 1d                	ja     f010350c <get_disk_page_table+0x44>
	{
		*ptr_disk_page_table = (uint32*)kheap_virtual_address(EXTRACT_ADDRESS(disk_page_directory_entry));
f01034ef:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01034f2:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f01034f7:	83 ec 0c             	sub    $0xc,%esp
f01034fa:	50                   	push   %eax
f01034fb:	e8 77 45 00 00       	call   f0107a77 <kheap_virtual_address>
f0103500:	83 c4 10             	add    $0x10,%esp
f0103503:	89 c2                	mov    %eax,%edx
f0103505:	8b 45 14             	mov    0x14(%ebp),%eax
f0103508:	89 10                	mov    %edx,(%eax)
f010350a:	eb 44                	jmp    f0103550 <get_disk_page_table+0x88>
	}
	else
	{
		*ptr_disk_page_table = STATIC_KERNEL_VIRTUAL_ADDRESS(EXTRACT_ADDRESS(disk_page_directory_entry)) ;
f010350c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010350f:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0103514:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0103517:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010351a:	c1 e8 0c             	shr    $0xc,%eax
f010351d:	89 45 ec             	mov    %eax,-0x14(%ebp)
f0103520:	a1 d0 25 78 f0       	mov    0xf07825d0,%eax
f0103525:	39 45 ec             	cmp    %eax,-0x14(%ebp)
f0103528:	72 17                	jb     f0103541 <get_disk_page_table+0x79>
f010352a:	ff 75 f0             	pushl  -0x10(%ebp)
f010352d:	68 d4 58 13 f0       	push   $0xf01358d4
f0103532:	68 92 00 00 00       	push   $0x92
f0103537:	68 73 58 13 f0       	push   $0xf0135873
f010353c:	e8 c4 cc ff ff       	call   f0100205 <_panic>
f0103541:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0103544:	2d 00 00 00 10       	sub    $0x10000000,%eax
f0103549:	89 c2                	mov    %eax,%edx
f010354b:	8b 45 14             	mov    0x14(%ebp),%eax
f010354e:	89 10                	mov    %edx,(%eax)
	}

	if (disk_page_directory_entry == 0)
f0103550:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0103554:	0f 85 80 00 00 00    	jne    f01035da <get_disk_page_table+0x112>
	{
		//LOG_STATMENT(cprintf("get_disk_page_table: disk directory at %x",ptr_disk_page_directory));
		//LOG_STATMENT(cprintf("get_disk_page_table: page table not found "));
		if (create)
f010355a:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
f010355e:	74 6a                	je     f01035ca <get_disk_page_table+0x102>
		{

#if USE_KHEAP
			{
				*ptr_disk_page_table = (uint32*)kmalloc(PAGE_SIZE);
f0103560:	83 ec 0c             	sub    $0xc,%esp
f0103563:	68 00 10 00 00       	push   $0x1000
f0103568:	e8 18 43 00 00       	call   f0107885 <kmalloc>
f010356d:	83 c4 10             	add    $0x10,%esp
f0103570:	89 c2                	mov    %eax,%edx
f0103572:	8b 45 14             	mov    0x14(%ebp),%eax
f0103575:	89 10                	mov    %edx,(%eax)
				if(*ptr_disk_page_table == NULL)
f0103577:	8b 45 14             	mov    0x14(%ebp),%eax
f010357a:	8b 00                	mov    (%eax),%eax
f010357c:	85 c0                	test   %eax,%eax
f010357e:	75 07                	jne    f0103587 <get_disk_page_table+0xbf>
				{
					return E_NO_VM;
f0103580:	b8 ec ff ff ff       	mov    $0xffffffec,%eax
f0103585:	eb 58                	jmp    f01035df <get_disk_page_table+0x117>
				}
				ptr_disk_page_directory[PDX(virtual_address)] = CONSTRUCT_ENTRY(
f0103587:	8b 45 0c             	mov    0xc(%ebp),%eax
f010358a:	c1 e8 16             	shr    $0x16,%eax
f010358d:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0103594:	8b 45 08             	mov    0x8(%ebp),%eax
f0103597:	8d 1c 02             	lea    (%edx,%eax,1),%ebx
f010359a:	8b 45 14             	mov    0x14(%ebp),%eax
f010359d:	8b 00                	mov    (%eax),%eax
f010359f:	83 ec 0c             	sub    $0xc,%esp
f01035a2:	50                   	push   %eax
f01035a3:	e8 fb 44 00 00       	call   f0107aa3 <kheap_physical_address>
f01035a8:	83 c4 10             	add    $0x10,%esp
f01035ab:	83 c8 01             	or     $0x1,%eax
f01035ae:	89 03                	mov    %eax,(%ebx)
				ptr_frame_info->references = 1;
				ptr_disk_page_directory[PDX(virtual_address)] = CONSTRUCT_ENTRY(phys_page_table,PERM_PRESENT);
			}
#endif
			//initialize new page table by 0's
			memset(*ptr_disk_page_table , 0, PAGE_SIZE);
f01035b0:	8b 45 14             	mov    0x14(%ebp),%eax
f01035b3:	8b 00                	mov    (%eax),%eax
f01035b5:	83 ec 04             	sub    $0x4,%esp
f01035b8:	68 00 10 00 00       	push   $0x1000
f01035bd:	6a 00                	push   $0x0
f01035bf:	50                   	push   %eax
f01035c0:	e8 1b de 02 00       	call   f01313e0 <memset>
f01035c5:	83 c4 10             	add    $0x10,%esp
f01035c8:	eb 10                	jmp    f01035da <get_disk_page_table+0x112>
			//virtual_address, ptr_disk_page_directory[PDX(virtual_address)]));
		}
		else
		{
			//LOG_STATMENT(cprintf("NOT creating table ..."));
			*ptr_disk_page_table = 0;
f01035ca:	8b 45 14             	mov    0x14(%ebp),%eax
f01035cd:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
			return 0;
f01035d3:	b8 00 00 00 00       	mov    $0x0,%eax
f01035d8:	eb 05                	jmp    f01035df <get_disk_page_table+0x117>
		}
	}
	//LOG_STATMENT(cprintf("found table at %x", *ptr_disk_page_table));
	return 0;
f01035da:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01035df:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f01035e2:	c9                   	leave  
f01035e3:	c3                   	ret    

f01035e4 <pf_add_empty_env_page>:

int pf_add_empty_env_page( struct Env* ptr_env, uint32 virtual_address, uint8 initializeByZero)
{
f01035e4:	55                   	push   %ebp
f01035e5:	89 e5                	mov    %esp,%ebp
f01035e7:	83 ec 28             	sub    $0x28,%esp
f01035ea:	8b 45 10             	mov    0x10(%ebp),%eax
f01035ed:	88 45 e4             	mov    %al,-0x1c(%ebp)
	//2016: FIX:
	if (initializeByZero)
f01035f0:	80 7d e4 00          	cmpb   $0x0,-0x1c(%ebp)
f01035f4:	74 75                	je     f010366b <pf_add_empty_env_page+0x87>
	{
		//2020
		if (virtual_address > USTACKBOTTOM && virtual_address < USTACKTOP - ptr_env->initNumStackPages * PAGE_SIZE)
f01035f6:	c7 45 f4 00 10 00 00 	movl   $0x1000,-0xc(%ebp)
f01035fd:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0103600:	2d 01 e0 f9 5f       	sub    $0x5ff9e001,%eax
f0103605:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0103608:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010360b:	ba 00 00 00 00       	mov    $0x0,%edx
f0103610:	f7 75 f4             	divl   -0xc(%ebp)
f0103613:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0103616:	29 d0                	sub    %edx,%eax
f0103618:	3b 45 0c             	cmp    0xc(%ebp),%eax
f010361b:	73 32                	jae    f010364f <pf_add_empty_env_page+0x6b>
f010361d:	8b 45 08             	mov    0x8(%ebp),%eax
f0103620:	8b 90 58 05 00 00    	mov    0x558(%eax),%edx
f0103626:	b8 00 00 00 00       	mov    $0x0,%eax
f010362b:	29 d0                	sub    %edx,%eax
f010362d:	c1 e0 0c             	shl    $0xc,%eax
f0103630:	2d 00 20 40 11       	sub    $0x11402000,%eax
f0103635:	3b 45 0c             	cmp    0xc(%ebp),%eax
f0103638:	76 15                	jbe    f010364f <pf_add_empty_env_page+0x6b>
			ptr_env->nNewPageAdded++ ;
f010363a:	8b 45 08             	mov    0x8(%ebp),%eax
f010363d:	8b 80 54 05 00 00    	mov    0x554(%eax),%eax
f0103643:	8d 50 01             	lea    0x1(%eax),%edx
f0103646:	8b 45 08             	mov    0x8(%ebp),%eax
f0103649:	89 90 54 05 00 00    	mov    %edx,0x554(%eax)
		//======================
		return pf_add_env_page(ptr_env, virtual_address, ptr_zero_page);
f010364f:	a1 20 26 78 f0       	mov    0xf0782620,%eax
f0103654:	83 ec 04             	sub    $0x4,%esp
f0103657:	50                   	push   %eax
f0103658:	ff 75 0c             	pushl  0xc(%ebp)
f010365b:	ff 75 08             	pushl  0x8(%ebp)
f010365e:	e8 b2 00 00 00       	call   f0103715 <pf_add_env_page>
f0103663:	83 c4 10             	add    $0x10,%esp
f0103666:	e9 a8 00 00 00       	jmp    f0103713 <pf_add_empty_env_page+0x12f>
	}

	uint32 *ptr_disk_page_table;
	assert((uint32)virtual_address < KERNEL_BASE);
f010366b:	81 7d 0c ff ff ff ef 	cmpl   $0xefffffff,0xc(%ebp)
f0103672:	76 19                	jbe    f010368d <pf_add_empty_env_page+0xa9>
f0103674:	68 04 59 13 f0       	push   $0xf0135904
f0103679:	68 2a 59 13 f0       	push   $0xf013592a
f010367e:	68 d1 00 00 00       	push   $0xd1
f0103683:	68 73 58 13 f0       	push   $0xf0135873
f0103688:	e8 78 cb ff ff       	call   f0100205 <_panic>

	get_disk_page_directory(ptr_env, &(ptr_env->disk_env_pgdir)) ;
f010368d:	8b 45 08             	mov    0x8(%ebp),%eax
f0103690:	83 c0 64             	add    $0x64,%eax
f0103693:	83 ec 08             	sub    $0x8,%esp
f0103696:	50                   	push   %eax
f0103697:	ff 75 08             	pushl  0x8(%ebp)
f010369a:	e8 10 06 00 00       	call   f0103caf <get_disk_page_directory>
f010369f:	83 c4 10             	add    $0x10,%esp

	get_disk_page_table(ptr_env->disk_env_pgdir,  virtual_address, 1, &ptr_disk_page_table) ;
f01036a2:	8b 45 08             	mov    0x8(%ebp),%eax
f01036a5:	8b 40 64             	mov    0x64(%eax),%eax
f01036a8:	8d 55 ec             	lea    -0x14(%ebp),%edx
f01036ab:	52                   	push   %edx
f01036ac:	6a 01                	push   $0x1
f01036ae:	ff 75 0c             	pushl  0xc(%ebp)
f01036b1:	50                   	push   %eax
f01036b2:	e8 11 fe ff ff       	call   f01034c8 <get_disk_page_table>
f01036b7:	83 c4 10             	add    $0x10,%esp

	uint32 dfn=ptr_disk_page_table[PTX(virtual_address)];
f01036ba:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01036bd:	8b 55 0c             	mov    0xc(%ebp),%edx
f01036c0:	c1 ea 0c             	shr    $0xc,%edx
f01036c3:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f01036c9:	c1 e2 02             	shl    $0x2,%edx
f01036cc:	01 d0                	add    %edx,%eax
f01036ce:	8b 00                	mov    (%eax),%eax
f01036d0:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if( dfn == 0)
f01036d3:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01036d6:	85 c0                	test   %eax,%eax
f01036d8:	75 34                	jne    f010370e <pf_add_empty_env_page+0x12a>
	{
		if( allocate_disk_frame(&dfn) == E_NO_PAGE_FILE_SPACE) return E_NO_PAGE_FILE_SPACE;
f01036da:	83 ec 0c             	sub    $0xc,%esp
f01036dd:	8d 45 e8             	lea    -0x18(%ebp),%eax
f01036e0:	50                   	push   %eax
f01036e1:	e8 3a fc ff ff       	call   f0103320 <allocate_disk_frame>
f01036e6:	83 c4 10             	add    $0x10,%esp
f01036e9:	83 f8 f8             	cmp    $0xfffffff8,%eax
f01036ec:	75 07                	jne    f01036f5 <pf_add_empty_env_page+0x111>
f01036ee:	b8 f8 ff ff ff       	mov    $0xfffffff8,%eax
f01036f3:	eb 1e                	jmp    f0103713 <pf_add_empty_env_page+0x12f>
		ptr_disk_page_table[PTX(virtual_address)] = dfn;
f01036f5:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01036f8:	8b 55 0c             	mov    0xc(%ebp),%edx
f01036fb:	c1 ea 0c             	shr    $0xc,%edx
f01036fe:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0103704:	c1 e2 02             	shl    $0x2,%edx
f0103707:	01 c2                	add    %eax,%edx
f0103709:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010370c:	89 02                	mov    %eax,(%edx)
	}

	return 0;
f010370e:	b8 00 00 00 00       	mov    $0x0,%eax

}
f0103713:	c9                   	leave  
f0103714:	c3                   	ret    

f0103715 <pf_add_env_page>:

int pf_add_env_page( struct Env* ptr_env, uint32 virtual_address, void* dataSrc)
{
f0103715:	55                   	push   %ebp
f0103716:	89 e5                	mov    %esp,%ebp
f0103718:	83 ec 18             	sub    $0x18,%esp
	//LOG_STRING("========================== create_env_page");
	uint32 *ptr_disk_page_table;
	assert((uint32)virtual_address < KERNEL_BASE);
f010371b:	81 7d 0c ff ff ff ef 	cmpl   $0xefffffff,0xc(%ebp)
f0103722:	76 19                	jbe    f010373d <pf_add_env_page+0x28>
f0103724:	68 04 59 13 f0       	push   $0xf0135904
f0103729:	68 2a 59 13 f0       	push   $0xf013592a
f010372e:	68 e6 00 00 00       	push   $0xe6
f0103733:	68 73 58 13 f0       	push   $0xf0135873
f0103738:	e8 c8 ca ff ff       	call   f0100205 <_panic>

	get_disk_page_directory(ptr_env, &(ptr_env->disk_env_pgdir)) ;
f010373d:	8b 45 08             	mov    0x8(%ebp),%eax
f0103740:	83 c0 64             	add    $0x64,%eax
f0103743:	83 ec 08             	sub    $0x8,%esp
f0103746:	50                   	push   %eax
f0103747:	ff 75 08             	pushl  0x8(%ebp)
f010374a:	e8 60 05 00 00       	call   f0103caf <get_disk_page_directory>
f010374f:	83 c4 10             	add    $0x10,%esp

	get_disk_page_table(ptr_env->disk_env_pgdir,  virtual_address, 1, &ptr_disk_page_table) ;
f0103752:	8b 45 08             	mov    0x8(%ebp),%eax
f0103755:	8b 40 64             	mov    0x64(%eax),%eax
f0103758:	8d 55 f0             	lea    -0x10(%ebp),%edx
f010375b:	52                   	push   %edx
f010375c:	6a 01                	push   $0x1
f010375e:	ff 75 0c             	pushl  0xc(%ebp)
f0103761:	50                   	push   %eax
f0103762:	e8 61 fd ff ff       	call   f01034c8 <get_disk_page_table>
f0103767:	83 c4 10             	add    $0x10,%esp

	uint32 dfn=ptr_disk_page_table[PTX(virtual_address)];
f010376a:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010376d:	8b 55 0c             	mov    0xc(%ebp),%edx
f0103770:	c1 ea 0c             	shr    $0xc,%edx
f0103773:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0103779:	c1 e2 02             	shl    $0x2,%edx
f010377c:	01 d0                	add    %edx,%eax
f010377e:	8b 00                	mov    (%eax),%eax
f0103780:	89 45 ec             	mov    %eax,-0x14(%ebp)
	if( dfn == 0)
f0103783:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0103786:	85 c0                	test   %eax,%eax
f0103788:	75 34                	jne    f01037be <pf_add_env_page+0xa9>
	{
		if( allocate_disk_frame(&dfn) == E_NO_PAGE_FILE_SPACE) return E_NO_PAGE_FILE_SPACE;
f010378a:	83 ec 0c             	sub    $0xc,%esp
f010378d:	8d 45 ec             	lea    -0x14(%ebp),%eax
f0103790:	50                   	push   %eax
f0103791:	e8 8a fb ff ff       	call   f0103320 <allocate_disk_frame>
f0103796:	83 c4 10             	add    $0x10,%esp
f0103799:	83 f8 f8             	cmp    $0xfffffff8,%eax
f010379c:	75 07                	jne    f01037a5 <pf_add_env_page+0x90>
f010379e:	b8 f8 ff ff ff       	mov    $0xfffffff8,%eax
f01037a3:	eb 31                	jmp    f01037d6 <pf_add_env_page+0xc1>
		ptr_disk_page_table[PTX(virtual_address)] = dfn;
f01037a5:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01037a8:	8b 55 0c             	mov    0xc(%ebp),%edx
f01037ab:	c1 ea 0c             	shr    $0xc,%edx
f01037ae:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f01037b4:	c1 e2 02             	shl    $0x2,%edx
f01037b7:	01 c2                	add    %eax,%edx
f01037b9:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01037bc:	89 02                	mov    %eax,(%edx)
	//	uint32 oldDir = rcr3();
	//	lcr3(K_PHYSICAL_ADDRESS(ptr_env->env_pgdir));
	//	int ret = write_disk_page(dfn, (void*)dataSrc);
	//	lcr3(oldDir);

	int ret = write_disk_page(dfn, (void*)dataSrc);
f01037be:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01037c1:	83 ec 08             	sub    $0x8,%esp
f01037c4:	ff 75 10             	pushl  0x10(%ebp)
f01037c7:	50                   	push   %eax
f01037c8:	e8 a6 f9 ff ff       	call   f0103173 <write_disk_page>
f01037cd:	83 c4 10             	add    $0x10,%esp
f01037d0:	89 45 f4             	mov    %eax,-0xc(%ebp)
	return ret;
f01037d3:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f01037d6:	c9                   	leave  
f01037d7:	c3                   	ret    

f01037d8 <pf_update_env_page>:

int pf_update_env_page(struct Env* ptr_env, uint32 virtual_address, struct FrameInfo* modified_page_frame_info)
{
f01037d8:	55                   	push   %ebp
f01037d9:	89 e5                	mov    %esp,%ebp
f01037db:	83 ec 38             	sub    $0x38,%esp
	int ret;
	uint32 *ptr_disk_page_table;
	//ROUND DOWN it on 4 KB boundary in order to update the entire page starting from its first address.
	//virtual_address = ROUNDDOWN(virtual_address, PAGE_SIZE);

	assert((uint32)virtual_address < KERNEL_BASE);
f01037de:	81 7d 0c ff ff ff ef 	cmpl   $0xefffffff,0xc(%ebp)
f01037e5:	76 19                	jbe    f0103800 <pf_update_env_page+0x28>
f01037e7:	68 04 59 13 f0       	push   $0xf0135904
f01037ec:	68 2a 59 13 f0       	push   $0xf013592a
f01037f1:	68 08 01 00 00       	push   $0x108
f01037f6:	68 73 58 13 f0       	push   $0xf0135873
f01037fb:	e8 05 ca ff ff       	call   f0100205 <_panic>
	//char c = *((char*)virtual_address);
	//Get/Create the directory table
	get_disk_page_directory(ptr_env, &(ptr_env->disk_env_pgdir)) ;
f0103800:	8b 45 08             	mov    0x8(%ebp),%eax
f0103803:	83 c0 64             	add    $0x64,%eax
f0103806:	83 ec 08             	sub    $0x8,%esp
f0103809:	50                   	push   %eax
f010380a:	ff 75 08             	pushl  0x8(%ebp)
f010380d:	e8 9d 04 00 00       	call   f0103caf <get_disk_page_directory>
f0103812:	83 c4 10             	add    $0x10,%esp

	get_disk_page_table(ptr_env->disk_env_pgdir, virtual_address, 0, &ptr_disk_page_table);
f0103815:	8b 45 08             	mov    0x8(%ebp),%eax
f0103818:	8b 40 64             	mov    0x64(%eax),%eax
f010381b:	8d 55 d8             	lea    -0x28(%ebp),%edx
f010381e:	52                   	push   %edx
f010381f:	6a 00                	push   $0x0
f0103821:	ff 75 0c             	pushl  0xc(%ebp)
f0103824:	50                   	push   %eax
f0103825:	e8 9e fc ff ff       	call   f01034c8 <get_disk_page_table>
f010382a:	83 c4 10             	add    $0x10,%esp

	/*2022*///==========
	if(ptr_disk_page_table == NULL || (ptr_disk_page_table != NULL && ptr_disk_page_table[PTX(virtual_address)]== 0))
f010382d:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0103830:	85 c0                	test   %eax,%eax
f0103832:	74 29                	je     f010385d <pf_update_env_page+0x85>
f0103834:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0103837:	85 c0                	test   %eax,%eax
f0103839:	0f 84 43 01 00 00    	je     f0103982 <pf_update_env_page+0x1aa>
f010383f:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0103842:	8b 55 0c             	mov    0xc(%ebp),%edx
f0103845:	c1 ea 0c             	shr    $0xc,%edx
f0103848:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f010384e:	c1 e2 02             	shl    $0x2,%edx
f0103851:	01 d0                	add    %edx,%eax
f0103853:	8b 00                	mov    (%eax),%eax
f0103855:	85 c0                	test   %eax,%eax
f0103857:	0f 85 25 01 00 00    	jne    f0103982 <pf_update_env_page+0x1aa>
	{
		uint32 VA = (uint32)virtual_address ;
f010385d:	8b 45 0c             	mov    0xc(%ebp),%eax
f0103860:	89 45 f4             	mov    %eax,-0xc(%ebp)
		if ((VA >= USER_HEAP_START && VA < USER_HEAP_MAX) || (VA >= USTACKBOTTOM && VA < USTACKTOP))
f0103863:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0103866:	85 c0                	test   %eax,%eax
f0103868:	79 09                	jns    f0103873 <pf_update_env_page+0x9b>
f010386a:	81 7d f4 ff ff ff 9f 	cmpl   $0x9fffffff,-0xc(%ebp)
f0103871:	76 38                	jbe    f01038ab <pf_update_env_page+0xd3>
f0103873:	c7 45 f0 00 10 00 00 	movl   $0x1000,-0x10(%ebp)
f010387a:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010387d:	2d 01 e0 f9 5f       	sub    $0x5ff9e001,%eax
f0103882:	89 45 ec             	mov    %eax,-0x14(%ebp)
f0103885:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0103888:	ba 00 00 00 00       	mov    $0x0,%edx
f010388d:	f7 75 f0             	divl   -0x10(%ebp)
f0103890:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0103893:	29 d0                	sub    %edx,%eax
f0103895:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0103898:	0f 87 cd 00 00 00    	ja     f010396b <pf_update_env_page+0x193>
f010389e:	81 7d f4 ff df bf ee 	cmpl   $0xeebfdfff,-0xc(%ebp)
f01038a5:	0f 87 c0 00 00 00    	ja     f010396b <pf_update_env_page+0x193>
		{
			uint32 *ptr_table ;
			struct FrameInfo* ptr_fi = get_frame_info(ptr_env->env_page_directory, virtual_address, &ptr_table);
f01038ab:	8b 45 08             	mov    0x8(%ebp),%eax
f01038ae:	8b 40 5c             	mov    0x5c(%eax),%eax
f01038b1:	83 ec 04             	sub    $0x4,%esp
f01038b4:	8d 55 d4             	lea    -0x2c(%ebp),%edx
f01038b7:	52                   	push   %edx
f01038b8:	ff 75 0c             	pushl  0xc(%ebp)
f01038bb:	50                   	push   %eax
f01038bc:	e8 45 35 00 00       	call   f0106e06 <get_frame_info>
f01038c1:	83 c4 10             	add    $0x10,%esp
f01038c4:	89 45 e8             	mov    %eax,-0x18(%ebp)
			//if VA already mapped on the same modified_page_frame_info, then write it directly from the VA
			if (ptr_fi == modified_page_frame_info)
f01038c7:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01038ca:	3b 45 10             	cmp    0x10(%ebp),%eax
f01038cd:	75 52                	jne    f0103921 <pf_update_env_page+0x149>
			{
				ret = pf_add_env_page(ptr_env, VA, (void*)virtual_address) ;
f01038cf:	8b 45 0c             	mov    0xc(%ebp),%eax
f01038d2:	83 ec 04             	sub    $0x4,%esp
f01038d5:	50                   	push   %eax
f01038d6:	ff 75 f4             	pushl  -0xc(%ebp)
f01038d9:	ff 75 08             	pushl  0x8(%ebp)
f01038dc:	e8 34 fe ff ff       	call   f0103715 <pf_add_env_page>
f01038e1:	83 c4 10             	add    $0x10,%esp
f01038e4:	89 45 e4             	mov    %eax,-0x1c(%ebp)
				if (ret == E_NO_PAGE_FILE_SPACE)
f01038e7:	83 7d e4 f8          	cmpl   $0xfffffff8,-0x1c(%ebp)
f01038eb:	75 17                	jne    f0103904 <pf_update_env_page+0x12c>
				{
					panic("pf_update_env_page: page file out of space!") ;
f01038ed:	83 ec 04             	sub    $0x4,%esp
f01038f0:	68 40 59 13 f0       	push   $0xf0135940
f01038f5:	68 1d 01 00 00       	push   $0x11d
f01038fa:	68 73 58 13 f0       	push   $0xf0135873
f01038ff:	e8 01 c9 ff ff       	call   f0100205 <_panic>
				}
				ptr_env->nNewPageAdded++ ;
f0103904:	8b 45 08             	mov    0x8(%ebp),%eax
f0103907:	8b 80 54 05 00 00    	mov    0x554(%eax),%eax
f010390d:	8d 50 01             	lea    0x1(%eax),%edx
f0103910:	8b 45 08             	mov    0x8(%ebp),%eax
f0103913:	89 90 54 05 00 00    	mov    %edx,0x554(%eax)
				return ret ;
f0103919:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010391c:	e9 17 01 00 00       	jmp    f0103a38 <pf_update_env_page+0x260>
			}
			//Else, just add a new empty page to the page file, then update it with the given modified_page_frame_info in the below code
			else
			{
				ret = pf_add_empty_env_page(ptr_env, VA, 0);
f0103921:	83 ec 04             	sub    $0x4,%esp
f0103924:	6a 00                	push   $0x0
f0103926:	ff 75 f4             	pushl  -0xc(%ebp)
f0103929:	ff 75 08             	pushl  0x8(%ebp)
f010392c:	e8 b3 fc ff ff       	call   f01035e4 <pf_add_empty_env_page>
f0103931:	83 c4 10             	add    $0x10,%esp
f0103934:	89 45 e4             	mov    %eax,-0x1c(%ebp)
				if (ret == E_NO_PAGE_FILE_SPACE)
f0103937:	83 7d e4 f8          	cmpl   $0xfffffff8,-0x1c(%ebp)
f010393b:	75 17                	jne    f0103954 <pf_update_env_page+0x17c>
				{
					panic("pf_update_env_page: attempt to add a new page, but page file out of space!") ;
f010393d:	83 ec 04             	sub    $0x4,%esp
f0103940:	68 6c 59 13 f0       	push   $0xf013596c
f0103945:	68 28 01 00 00       	push   $0x128
f010394a:	68 73 58 13 f0       	push   $0xf0135873
f010394f:	e8 b1 c8 ff ff       	call   f0100205 <_panic>
				}
				ptr_env->nNewPageAdded++ ;
f0103954:	8b 45 08             	mov    0x8(%ebp),%eax
f0103957:	8b 80 54 05 00 00    	mov    0x554(%eax),%eax
f010395d:	8d 50 01             	lea    0x1(%eax),%edx
f0103960:	8b 45 08             	mov    0x8(%ebp),%eax
f0103963:	89 90 54 05 00 00    	mov    %edx,0x554(%eax)
	/*2022*///==========
	if(ptr_disk_page_table == NULL || (ptr_disk_page_table != NULL && ptr_disk_page_table[PTX(virtual_address)]== 0))
	{
		uint32 VA = (uint32)virtual_address ;
		if ((VA >= USER_HEAP_START && VA < USER_HEAP_MAX) || (VA >= USTACKBOTTOM && VA < USTACKTOP))
		{
f0103969:	eb 17                	jmp    f0103982 <pf_update_env_page+0x1aa>
				ptr_env->nNewPageAdded++ ;
			}
		}
		else
		{
			panic("pf_update_env_page: Invalid Access - Attempt to add a new page to page file that's outside the USER HEAP and USER STACK!");
f010396b:	83 ec 04             	sub    $0x4,%esp
f010396e:	68 b8 59 13 f0       	push   $0xf01359b8
f0103973:	68 2f 01 00 00       	push   $0x12f
f0103978:	68 73 58 13 f0       	push   $0xf0135873
f010397d:	e8 83 c8 ff ff       	call   f0100205 <_panic>
		}
	}
	//2022 END========================================

	get_disk_page_table(ptr_env->disk_env_pgdir, virtual_address, 0, &ptr_disk_page_table);
f0103982:	8b 45 08             	mov    0x8(%ebp),%eax
f0103985:	8b 40 64             	mov    0x64(%eax),%eax
f0103988:	8d 55 d8             	lea    -0x28(%ebp),%edx
f010398b:	52                   	push   %edx
f010398c:	6a 00                	push   $0x0
f010398e:	ff 75 0c             	pushl  0xc(%ebp)
f0103991:	50                   	push   %eax
f0103992:	e8 31 fb ff ff       	call   f01034c8 <get_disk_page_table>
f0103997:	83 c4 10             	add    $0x10,%esp
	uint32 dfn=ptr_disk_page_table[PTX(virtual_address)];
f010399a:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010399d:	8b 55 0c             	mov    0xc(%ebp),%edx
f01039a0:	c1 ea 0c             	shr    $0xc,%edx
f01039a3:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f01039a9:	c1 e2 02             	shl    $0x2,%edx
f01039ac:	01 d0                	add    %edx,%eax
f01039ae:	8b 00                	mov    (%eax),%eax
f01039b0:	89 45 e0             	mov    %eax,-0x20(%ebp)
#if USE_KHEAP
	{
		//FIX: we should implement a better solution for this, but for now
		//		we are using an unused VA in the invalid area of kernel at 0xef800000 (the current USER_LIMIT)
		//		to do temp initialization of a frame.
		map_frame(ptr_env->env_page_directory, modified_page_frame_info, USER_LIMIT, 0);
f01039b3:	8b 45 08             	mov    0x8(%ebp),%eax
f01039b6:	8b 40 5c             	mov    0x5c(%eax),%eax
f01039b9:	6a 00                	push   $0x0
f01039bb:	68 00 00 80 ef       	push   $0xef800000
f01039c0:	ff 75 10             	pushl  0x10(%ebp)
f01039c3:	50                   	push   %eax
f01039c4:	e8 78 33 00 00       	call   f0106d41 <map_frame>
f01039c9:	83 c4 10             	add    $0x10,%esp
		ret = write_disk_page(dfn, (void*)ROUNDDOWN(USER_LIMIT, PAGE_SIZE));
f01039cc:	c7 45 dc 00 00 80 ef 	movl   $0xef800000,-0x24(%ebp)
f01039d3:	8b 45 dc             	mov    -0x24(%ebp),%eax
f01039d6:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f01039db:	83 ec 08             	sub    $0x8,%esp
f01039de:	50                   	push   %eax
f01039df:	ff 75 e0             	pushl  -0x20(%ebp)
f01039e2:	e8 8c f7 ff ff       	call   f0103173 <write_disk_page>
f01039e7:	83 c4 10             	add    $0x10,%esp
f01039ea:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		// TEMPORARILY increase the references to prevent unmap_frame from removing the frame
		modified_page_frame_info->references += 1;
f01039ed:	8b 45 10             	mov    0x10(%ebp),%eax
f01039f0:	8b 40 08             	mov    0x8(%eax),%eax
f01039f3:	40                   	inc    %eax
f01039f4:	8b 55 10             	mov    0x10(%ebp),%edx
f01039f7:	66 89 42 08          	mov    %ax,0x8(%edx)
		unmap_frame(ptr_env->env_page_directory, USER_LIMIT);
f01039fb:	8b 45 08             	mov    0x8(%ebp),%eax
f01039fe:	8b 40 5c             	mov    0x5c(%eax),%eax
f0103a01:	83 ec 08             	sub    $0x8,%esp
f0103a04:	68 00 00 80 ef       	push   $0xef800000
f0103a09:	50                   	push   %eax
f0103a0a:	e8 67 34 00 00       	call   f0106e76 <unmap_frame>
f0103a0f:	83 c4 10             	add    $0x10,%esp
		// Return it to its original status
		modified_page_frame_info->references -= 1;
f0103a12:	8b 45 10             	mov    0x10(%ebp),%eax
f0103a15:	8b 40 08             	mov    0x8(%eax),%eax
f0103a18:	48                   	dec    %eax
f0103a19:	8b 55 10             	mov    0x10(%ebp),%edx
f0103a1c:	66 89 42 08          	mov    %ax,0x8(%edx)
		ret = write_disk_page(dfn, STATIC_KERNEL_VIRTUAL_ADDRESS(to_physical_address(modified_page_frame_info)));
		//cprintf("[%s] finished updating page\n",ptr_env->prog_name);
	}
#endif
	//2020
	ptr_env->nPageOut++ ;
f0103a20:	8b 45 08             	mov    0x8(%ebp),%eax
f0103a23:	8b 80 50 05 00 00    	mov    0x550(%eax),%eax
f0103a29:	8d 50 01             	lea    0x1(%eax),%edx
f0103a2c:	8b 45 08             	mov    0x8(%ebp),%eax
f0103a2f:	89 90 50 05 00 00    	mov    %edx,0x550(%eax)
	//======================

	return ret;
f0103a35:	8b 45 e4             	mov    -0x1c(%ebp),%eax
}
f0103a38:	c9                   	leave  
f0103a39:	c3                   	ret    

f0103a3a <pf_read_env_page>:

int pf_read_env_page(struct Env* ptr_env, void* virtual_address)
{
f0103a3a:	55                   	push   %ebp
f0103a3b:	89 e5                	mov    %esp,%ebp
f0103a3d:	83 ec 18             	sub    $0x18,%esp
	uint32 *ptr_disk_page_table;

	//ROUND DOWN it on 4 KB boundary in order to read the entire page starting from its first address.
	virtual_address = ROUNDDOWN(virtual_address, PAGE_SIZE);
f0103a40:	8b 45 0c             	mov    0xc(%ebp),%eax
f0103a43:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0103a46:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0103a49:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0103a4e:	89 45 0c             	mov    %eax,0xc(%ebp)

	if( ptr_env->disk_env_pgdir == 0) return E_PAGE_NOT_EXIST_IN_PF;
f0103a51:	8b 45 08             	mov    0x8(%ebp),%eax
f0103a54:	8b 40 64             	mov    0x64(%eax),%eax
f0103a57:	85 c0                	test   %eax,%eax
f0103a59:	75 0a                	jne    f0103a65 <pf_read_env_page+0x2b>
f0103a5b:	b8 f7 ff ff ff       	mov    $0xfffffff7,%eax
f0103a60:	e9 90 00 00 00       	jmp    f0103af5 <pf_read_env_page+0xbb>

	get_disk_page_table(ptr_env->disk_env_pgdir, (uint32) virtual_address, 0, &ptr_disk_page_table);
f0103a65:	8b 55 0c             	mov    0xc(%ebp),%edx
f0103a68:	8b 45 08             	mov    0x8(%ebp),%eax
f0103a6b:	8b 40 64             	mov    0x64(%eax),%eax
f0103a6e:	8d 4d e8             	lea    -0x18(%ebp),%ecx
f0103a71:	51                   	push   %ecx
f0103a72:	6a 00                	push   $0x0
f0103a74:	52                   	push   %edx
f0103a75:	50                   	push   %eax
f0103a76:	e8 4d fa ff ff       	call   f01034c8 <get_disk_page_table>
f0103a7b:	83 c4 10             	add    $0x10,%esp
	if(ptr_disk_page_table == 0) return E_PAGE_NOT_EXIST_IN_PF;
f0103a7e:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0103a81:	85 c0                	test   %eax,%eax
f0103a83:	75 07                	jne    f0103a8c <pf_read_env_page+0x52>
f0103a85:	b8 f7 ff ff ff       	mov    $0xfffffff7,%eax
f0103a8a:	eb 69                	jmp    f0103af5 <pf_read_env_page+0xbb>

	uint32 dfn=ptr_disk_page_table[PTX(virtual_address)];
f0103a8c:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0103a8f:	8b 55 0c             	mov    0xc(%ebp),%edx
f0103a92:	c1 ea 0c             	shr    $0xc,%edx
f0103a95:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0103a9b:	c1 e2 02             	shl    $0x2,%edx
f0103a9e:	01 d0                	add    %edx,%eax
f0103aa0:	8b 00                	mov    (%eax),%eax
f0103aa2:	89 45 f0             	mov    %eax,-0x10(%ebp)

	if( dfn == 0) return E_PAGE_NOT_EXIST_IN_PF;
f0103aa5:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0103aa9:	75 07                	jne    f0103ab2 <pf_read_env_page+0x78>
f0103aab:	b8 f7 ff ff ff       	mov    $0xfffffff7,%eax
f0103ab0:	eb 43                	jmp    f0103af5 <pf_read_env_page+0xbb>

	int disk_read_error = read_disk_page(dfn, virtual_address);
f0103ab2:	83 ec 08             	sub    $0x8,%esp
f0103ab5:	ff 75 0c             	pushl  0xc(%ebp)
f0103ab8:	ff 75 f0             	pushl  -0x10(%ebp)
f0103abb:	e8 84 f6 ff ff       	call   f0103144 <read_disk_page>
f0103ac0:	83 c4 10             	add    $0x10,%esp
f0103ac3:	89 45 ec             	mov    %eax,-0x14(%ebp)

	//reset modified bit to 0: because FOS copies the placed or replaced page from
	//HD to memory, the page modified bit is set to 1, but we want the modified bit to be
	// affected only by "user code" modifications, not our (FOS kernel) modifications
	pt_set_page_permissions(ptr_env->env_page_directory, (uint32)virtual_address, 0, PERM_MODIFIED);
f0103ac6:	8b 55 0c             	mov    0xc(%ebp),%edx
f0103ac9:	8b 45 08             	mov    0x8(%ebp),%eax
f0103acc:	8b 40 5c             	mov    0x5c(%eax),%eax
f0103acf:	6a 40                	push   $0x40
f0103ad1:	6a 00                	push   $0x0
f0103ad3:	52                   	push   %edx
f0103ad4:	50                   	push   %eax
f0103ad5:	e8 d3 40 00 00       	call   f0107bad <pt_set_page_permissions>
f0103ada:	83 c4 10             	add    $0x10,%esp

	//2020
	ptr_env->nPageIn++ ;
f0103add:	8b 45 08             	mov    0x8(%ebp),%eax
f0103ae0:	8b 80 4c 05 00 00    	mov    0x54c(%eax),%eax
f0103ae6:	8d 50 01             	lea    0x1(%eax),%edx
f0103ae9:	8b 45 08             	mov    0x8(%ebp),%eax
f0103aec:	89 90 4c 05 00 00    	mov    %edx,0x54c(%eax)
	//======================

	return disk_read_error;
f0103af2:	8b 45 ec             	mov    -0x14(%ebp),%eax
}
f0103af5:	c9                   	leave  
f0103af6:	c3                   	ret    

f0103af7 <pf_remove_env_page>:

void pf_remove_env_page(struct Env* ptr_env, uint32 virtual_address)
{
f0103af7:	55                   	push   %ebp
f0103af8:	89 e5                	mov    %esp,%ebp
f0103afa:	83 ec 18             	sub    $0x18,%esp
	//LOG_STRING("pf_remove_env_page: 0");
	uint32 *ptr_disk_page_table;

	//LOG_STATMENT(cprintf("ptr_env = %x",ptr_env));
	if( ptr_env->disk_env_pgdir == 0) return;
f0103afd:	8b 45 08             	mov    0x8(%ebp),%eax
f0103b00:	8b 40 64             	mov    0x64(%eax),%eax
f0103b03:	85 c0                	test   %eax,%eax
f0103b05:	74 62                	je     f0103b69 <pf_remove_env_page+0x72>

	//LOG_STRING("pf_remove_env_page: 1");
	get_disk_page_table(ptr_env->disk_env_pgdir, virtual_address, 0, &ptr_disk_page_table);
f0103b07:	8b 45 08             	mov    0x8(%ebp),%eax
f0103b0a:	8b 40 64             	mov    0x64(%eax),%eax
f0103b0d:	8d 55 f0             	lea    -0x10(%ebp),%edx
f0103b10:	52                   	push   %edx
f0103b11:	6a 00                	push   $0x0
f0103b13:	ff 75 0c             	pushl  0xc(%ebp)
f0103b16:	50                   	push   %eax
f0103b17:	e8 ac f9 ff ff       	call   f01034c8 <get_disk_page_table>
f0103b1c:	83 c4 10             	add    $0x10,%esp
	if(ptr_disk_page_table == 0) return;
f0103b1f:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0103b22:	85 c0                	test   %eax,%eax
f0103b24:	74 46                	je     f0103b6c <pf_remove_env_page+0x75>

	//LOG_STRING("pf_remove_env_page: 2");
	uint32 dfn=ptr_disk_page_table[PTX(virtual_address)];
f0103b26:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0103b29:	8b 55 0c             	mov    0xc(%ebp),%edx
f0103b2c:	c1 ea 0c             	shr    $0xc,%edx
f0103b2f:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0103b35:	c1 e2 02             	shl    $0x2,%edx
f0103b38:	01 d0                	add    %edx,%eax
f0103b3a:	8b 00                	mov    (%eax),%eax
f0103b3c:	89 45 f4             	mov    %eax,-0xc(%ebp)
	ptr_disk_page_table[PTX(virtual_address)] = 0;
f0103b3f:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0103b42:	8b 55 0c             	mov    0xc(%ebp),%edx
f0103b45:	c1 ea 0c             	shr    $0xc,%edx
f0103b48:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0103b4e:	c1 e2 02             	shl    $0x2,%edx
f0103b51:	01 d0                	add    %edx,%eax
f0103b53:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	free_disk_frame(dfn);
f0103b59:	83 ec 0c             	sub    $0xc,%esp
f0103b5c:	ff 75 f4             	pushl  -0xc(%ebp)
f0103b5f:	e8 83 f8 ff ff       	call   f01033e7 <free_disk_frame>
f0103b64:	83 c4 10             	add    $0x10,%esp
f0103b67:	eb 04                	jmp    f0103b6d <pf_remove_env_page+0x76>
{
	//LOG_STRING("pf_remove_env_page: 0");
	uint32 *ptr_disk_page_table;

	//LOG_STATMENT(cprintf("ptr_env = %x",ptr_env));
	if( ptr_env->disk_env_pgdir == 0) return;
f0103b69:	90                   	nop
f0103b6a:	eb 01                	jmp    f0103b6d <pf_remove_env_page+0x76>

	//LOG_STRING("pf_remove_env_page: 1");
	get_disk_page_table(ptr_env->disk_env_pgdir, virtual_address, 0, &ptr_disk_page_table);
	if(ptr_disk_page_table == 0) return;
f0103b6c:	90                   	nop
	//LOG_STRING("pf_remove_env_page: 2");
	uint32 dfn=ptr_disk_page_table[PTX(virtual_address)];
	ptr_disk_page_table[PTX(virtual_address)] = 0;
	free_disk_frame(dfn);
	//LOG_STRING("pf_remove_env_page: 3");
}
f0103b6d:	c9                   	leave  
f0103b6e:	c3                   	ret    

f0103b6f <pf_free_env>:

void pf_free_env(struct Env* ptr_env)
{
f0103b6f:	55                   	push   %ebp
f0103b70:	89 e5                	mov    %esp,%ebp
f0103b72:	83 ec 28             	sub    $0x28,%esp
	uint32 pdeno;

	for (pdeno = 0; pdeno < PDX(USER_TOP) ; pdeno++)
f0103b75:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0103b7c:	e9 b8 00 00 00       	jmp    f0103c39 <pf_free_env+0xca>
	{
		// only look at mapped page tables
		if (!(ptr_env->disk_env_pgdir[pdeno] & PERM_PRESENT))
f0103b81:	8b 45 08             	mov    0x8(%ebp),%eax
f0103b84:	8b 40 64             	mov    0x64(%eax),%eax
f0103b87:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0103b8a:	c1 e2 02             	shl    $0x2,%edx
f0103b8d:	01 d0                	add    %edx,%eax
f0103b8f:	8b 00                	mov    (%eax),%eax
f0103b91:	83 e0 01             	and    $0x1,%eax
f0103b94:	85 c0                	test   %eax,%eax
f0103b96:	0f 84 99 00 00 00    	je     f0103c35 <pf_free_env+0xc6>
			continue;

		// find the pa and va of the page table
		uint32 pa = EXTRACT_ADDRESS(ptr_env->disk_env_pgdir[pdeno]);
f0103b9c:	8b 45 08             	mov    0x8(%ebp),%eax
f0103b9f:	8b 40 64             	mov    0x64(%eax),%eax
f0103ba2:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0103ba5:	c1 e2 02             	shl    $0x2,%edx
f0103ba8:	01 d0                	add    %edx,%eax
f0103baa:	8b 00                	mov    (%eax),%eax
f0103bac:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0103bb1:	89 45 ec             	mov    %eax,-0x14(%ebp)
		uint32 *pt;
#if USE_KHEAP
		{
			pt = (uint32*) kheap_virtual_address(pa);
f0103bb4:	83 ec 0c             	sub    $0xc,%esp
f0103bb7:	ff 75 ec             	pushl  -0x14(%ebp)
f0103bba:	e8 b8 3e 00 00       	call   f0107a77 <kheap_virtual_address>
f0103bbf:	83 c4 10             	add    $0x10,%esp
f0103bc2:	89 45 e8             	mov    %eax,-0x18(%ebp)
			pt = (uint32*) STATIC_KERNEL_VIRTUAL_ADDRESS(pa);
		}
#endif
		// unmap all PTEs in this page table
		uint32 pteno;
		for (pteno = 0; pteno < 1024; pteno++)
f0103bc5:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f0103bcc:	eb 3a                	jmp    f0103c08 <pf_free_env+0x99>
		{
			// remove the disk page from disk page table
			uint32 dfn=pt[pteno];
f0103bce:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0103bd1:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0103bd8:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0103bdb:	01 d0                	add    %edx,%eax
f0103bdd:	8b 00                	mov    (%eax),%eax
f0103bdf:	89 45 e4             	mov    %eax,-0x1c(%ebp)
			pt[pteno] = 0;
f0103be2:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0103be5:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0103bec:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0103bef:	01 d0                	add    %edx,%eax
f0103bf1:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
			// and declare it free
			free_disk_frame(dfn);
f0103bf7:	83 ec 0c             	sub    $0xc,%esp
f0103bfa:	ff 75 e4             	pushl  -0x1c(%ebp)
f0103bfd:	e8 e5 f7 ff ff       	call   f01033e7 <free_disk_frame>
f0103c02:	83 c4 10             	add    $0x10,%esp
			pt = (uint32*) STATIC_KERNEL_VIRTUAL_ADDRESS(pa);
		}
#endif
		// unmap all PTEs in this page table
		uint32 pteno;
		for (pteno = 0; pteno < 1024; pteno++)
f0103c05:	ff 45 f0             	incl   -0x10(%ebp)
f0103c08:	81 7d f0 ff 03 00 00 	cmpl   $0x3ff,-0x10(%ebp)
f0103c0f:	76 bd                	jbe    f0103bce <pf_free_env+0x5f>
			// and declare it free
			free_disk_frame(dfn);
		}

		// free the disk page table itself
		ptr_env->disk_env_pgdir[pdeno] = 0;
f0103c11:	8b 45 08             	mov    0x8(%ebp),%eax
f0103c14:	8b 40 64             	mov    0x64(%eax),%eax
f0103c17:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0103c1a:	c1 e2 02             	shl    $0x2,%edx
f0103c1d:	01 d0                	add    %edx,%eax
f0103c1f:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
#if USE_KHEAP
		{
			kfree(pt);
f0103c25:	83 ec 0c             	sub    $0xc,%esp
f0103c28:	ff 75 e8             	pushl  -0x18(%ebp)
f0103c2b:	e8 20 3d 00 00       	call   f0107950 <kfree>
f0103c30:	83 c4 10             	add    $0x10,%esp
f0103c33:	eb 01                	jmp    f0103c36 <pf_free_env+0xc7>

	for (pdeno = 0; pdeno < PDX(USER_TOP) ; pdeno++)
	{
		// only look at mapped page tables
		if (!(ptr_env->disk_env_pgdir[pdeno] & PERM_PRESENT))
			continue;
f0103c35:	90                   	nop

void pf_free_env(struct Env* ptr_env)
{
	uint32 pdeno;

	for (pdeno = 0; pdeno < PDX(USER_TOP) ; pdeno++)
f0103c36:	ff 45 f4             	incl   -0xc(%ebp)
f0103c39:	81 7d f4 ba 03 00 00 	cmpl   $0x3ba,-0xc(%ebp)
f0103c40:	0f 86 3b ff ff ff    	jbe    f0103b81 <pf_free_env+0x12>
	}

	// free the disk page directory of the environment
#if USE_KHEAP
	{
		kfree(ptr_env->disk_env_pgdir);
f0103c46:	8b 45 08             	mov    0x8(%ebp),%eax
f0103c49:	8b 40 64             	mov    0x64(%eax),%eax
f0103c4c:	83 ec 0c             	sub    $0xc,%esp
f0103c4f:	50                   	push   %eax
f0103c50:	e8 fb 3c 00 00       	call   f0107950 <kfree>
f0103c55:	83 c4 10             	add    $0x10,%esp
#else
	{
		decrement_references(to_frame_info(ptr_env->disk_env_pgdir_PA));
	}
#endif
	ptr_env->disk_env_pgdir = 0;
f0103c58:	8b 45 08             	mov    0x8(%ebp),%eax
f0103c5b:	c7 40 64 00 00 00 00 	movl   $0x0,0x64(%eax)
	ptr_env->disk_env_pgdir_PA = 0;
f0103c62:	8b 45 08             	mov    0x8(%ebp),%eax
f0103c65:	c7 40 68 00 00 00 00 	movl   $0x0,0x68(%eax)


	// remove all tables and the disk table
	if (ptr_env->disk_env_tabledir == 0)
f0103c6c:	8b 45 08             	mov    0x8(%ebp),%eax
f0103c6f:	8b 40 6c             	mov    0x6c(%eax),%eax
f0103c72:	85 c0                	test   %eax,%eax
f0103c74:	74 36                	je     f0103cac <pf_free_env+0x13d>
		return;
	__pf_remove_env_all_tables(ptr_env);
f0103c76:	83 ec 0c             	sub    $0xc,%esp
f0103c79:	ff 75 08             	pushl  0x8(%ebp)
f0103c7c:	e8 05 03 00 00       	call   f0103f86 <__pf_remove_env_all_tables>
f0103c81:	83 c4 10             	add    $0x10,%esp


#if USE_KHEAP
	{
		kfree(ptr_env->disk_env_tabledir);
f0103c84:	8b 45 08             	mov    0x8(%ebp),%eax
f0103c87:	8b 40 6c             	mov    0x6c(%eax),%eax
f0103c8a:	83 ec 0c             	sub    $0xc,%esp
f0103c8d:	50                   	push   %eax
f0103c8e:	e8 bd 3c 00 00       	call   f0107950 <kfree>
f0103c93:	83 c4 10             	add    $0x10,%esp
#else
	{
		decrement_references(to_frame_info(ptr_env->disk_env_tabledir_PA));
	}
#endif
	ptr_env->disk_env_tabledir = 0;
f0103c96:	8b 45 08             	mov    0x8(%ebp),%eax
f0103c99:	c7 40 6c 00 00 00 00 	movl   $0x0,0x6c(%eax)
	ptr_env->disk_env_tabledir_PA = 0;
f0103ca0:	8b 45 08             	mov    0x8(%ebp),%eax
f0103ca3:	c7 40 70 00 00 00 00 	movl   $0x0,0x70(%eax)
f0103caa:	eb 01                	jmp    f0103cad <pf_free_env+0x13e>
	ptr_env->disk_env_pgdir_PA = 0;


	// remove all tables and the disk table
	if (ptr_env->disk_env_tabledir == 0)
		return;
f0103cac:	90                   	nop
	}
#endif
	ptr_env->disk_env_tabledir = 0;
	ptr_env->disk_env_tabledir_PA = 0;

}
f0103cad:	c9                   	leave  
f0103cae:	c3                   	ret    

f0103caf <get_disk_page_directory>:


int get_disk_page_directory(struct Env* ptr_env, uint32** ptr_disk_page_directory)
{
f0103caf:	55                   	push   %ebp
f0103cb0:	89 e5                	mov    %esp,%ebp
f0103cb2:	83 ec 08             	sub    $0x8,%esp
	*ptr_disk_page_directory = ptr_env->disk_env_pgdir;
f0103cb5:	8b 45 08             	mov    0x8(%ebp),%eax
f0103cb8:	8b 50 64             	mov    0x64(%eax),%edx
f0103cbb:	8b 45 0c             	mov    0xc(%ebp),%eax
f0103cbe:	89 10                	mov    %edx,(%eax)
	if(*ptr_disk_page_directory == 0)
f0103cc0:	8b 45 0c             	mov    0xc(%ebp),%eax
f0103cc3:	8b 00                	mov    (%eax),%eax
f0103cc5:	85 c0                	test   %eax,%eax
f0103cc7:	75 58                	jne    f0103d21 <get_disk_page_directory+0x72>
	{
		//	LOG_STATMENT(cprintf(">>>>>>>>>>>>>> disk directory not found, creating one ...\n"););
#if USE_KHEAP
		{
			*ptr_disk_page_directory = kmalloc(PAGE_SIZE);
f0103cc9:	83 ec 0c             	sub    $0xc,%esp
f0103ccc:	68 00 10 00 00       	push   $0x1000
f0103cd1:	e8 af 3b 00 00       	call   f0107885 <kmalloc>
f0103cd6:	83 c4 10             	add    $0x10,%esp
f0103cd9:	89 c2                	mov    %eax,%edx
f0103cdb:	8b 45 0c             	mov    0xc(%ebp),%eax
f0103cde:	89 10                	mov    %edx,(%eax)
			if(*ptr_disk_page_directory == NULL)
f0103ce0:	8b 45 0c             	mov    0xc(%ebp),%eax
f0103ce3:	8b 00                	mov    (%eax),%eax
f0103ce5:	85 c0                	test   %eax,%eax
f0103ce7:	75 07                	jne    f0103cf0 <get_disk_page_directory+0x41>
			{
				return E_NO_VM;
f0103ce9:	b8 ec ff ff ff       	mov    $0xffffffec,%eax
f0103cee:	eb 36                	jmp    f0103d26 <get_disk_page_directory+0x77>
			}
			ptr_env->disk_env_pgdir_PA = kheap_physical_address((unsigned int)*ptr_disk_page_directory);
f0103cf0:	8b 45 0c             	mov    0xc(%ebp),%eax
f0103cf3:	8b 00                	mov    (%eax),%eax
f0103cf5:	83 ec 0c             	sub    $0xc,%esp
f0103cf8:	50                   	push   %eax
f0103cf9:	e8 a5 3d 00 00       	call   f0107aa3 <kheap_physical_address>
f0103cfe:	83 c4 10             	add    $0x10,%esp
f0103d01:	89 c2                	mov    %eax,%edx
f0103d03:	8b 45 08             	mov    0x8(%ebp),%eax
f0103d06:	89 50 68             	mov    %edx,0x68(%eax)
			// Hint: use "initialize_environment" function
			*ptr_disk_page_directory = STATIC_KERNEL_VIRTUAL_ADDRESS(to_physical_address(p));
			ptr_env->disk_env_pgdir_PA = to_physical_address(p);
		}
#endif
		memset(*ptr_disk_page_directory , 0, PAGE_SIZE);
f0103d09:	8b 45 0c             	mov    0xc(%ebp),%eax
f0103d0c:	8b 00                	mov    (%eax),%eax
f0103d0e:	83 ec 04             	sub    $0x4,%esp
f0103d11:	68 00 10 00 00       	push   $0x1000
f0103d16:	6a 00                	push   $0x0
f0103d18:	50                   	push   %eax
f0103d19:	e8 c2 d6 02 00       	call   f01313e0 <memset>
f0103d1e:	83 c4 10             	add    $0x10,%esp

		//	LOG_STATMENT(cprintf(">>>>>>>>>>>>>> Disk directory created at %x", *ptr_disk_page_directory));
	}
	return 0;
f0103d21:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0103d26:	c9                   	leave  
f0103d27:	c3                   	ret    

f0103d28 <pf_calculate_allocated_pages>:

int pf_calculate_allocated_pages(struct Env* ptr_env)
{
f0103d28:	55                   	push   %ebp
f0103d29:	89 e5                	mov    %esp,%ebp
f0103d2b:	83 ec 28             	sub    $0x28,%esp
	uint32 *pt;
	uint32 pdIndex;
	uint32 pa;
	uint32 counter=0;
f0103d2e:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)

	for (pdIndex = 0; pdIndex < PDX(USER_TOP) ; pdIndex++)
f0103d35:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0103d3c:	eb 78                	jmp    f0103db6 <pf_calculate_allocated_pages+0x8e>
	{
		// only look at mapped page tables
		if (!(ptr_env->disk_env_pgdir[pdIndex] & PERM_PRESENT))
f0103d3e:	8b 45 08             	mov    0x8(%ebp),%eax
f0103d41:	8b 40 64             	mov    0x64(%eax),%eax
f0103d44:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0103d47:	c1 e2 02             	shl    $0x2,%edx
f0103d4a:	01 d0                	add    %edx,%eax
f0103d4c:	8b 00                	mov    (%eax),%eax
f0103d4e:	83 e0 01             	and    $0x1,%eax
f0103d51:	85 c0                	test   %eax,%eax
f0103d53:	74 5d                	je     f0103db2 <pf_calculate_allocated_pages+0x8a>
			continue;

		// find the pa and va of the page table
		pa = EXTRACT_ADDRESS(ptr_env->disk_env_pgdir[pdIndex]);
f0103d55:	8b 45 08             	mov    0x8(%ebp),%eax
f0103d58:	8b 40 64             	mov    0x64(%eax),%eax
f0103d5b:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0103d5e:	c1 e2 02             	shl    $0x2,%edx
f0103d61:	01 d0                	add    %edx,%eax
f0103d63:	8b 00                	mov    (%eax),%eax
f0103d65:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0103d6a:	89 45 e8             	mov    %eax,-0x18(%ebp)
#if USE_KHEAP
		{
			pt = (uint32*) kheap_virtual_address(pa);
f0103d6d:	83 ec 0c             	sub    $0xc,%esp
f0103d70:	ff 75 e8             	pushl  -0x18(%ebp)
f0103d73:	e8 ff 3c 00 00       	call   f0107a77 <kheap_virtual_address>
f0103d78:	83 c4 10             	add    $0x10,%esp
f0103d7b:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		}
#endif

		// unmap all PTEs in this page table
		uint32 ptIndex;
		for (ptIndex = 0; ptIndex < 1024; ptIndex++)
f0103d7e:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f0103d85:	eb 20                	jmp    f0103da7 <pf_calculate_allocated_pages+0x7f>
		{
			// remove the disk page from disk page table
			uint32 dfn=pt[ptIndex];
f0103d87:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0103d8a:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0103d91:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0103d94:	01 d0                	add    %edx,%eax
f0103d96:	8b 00                	mov    (%eax),%eax
f0103d98:	89 45 e0             	mov    %eax,-0x20(%ebp)
			if(dfn != 0)
f0103d9b:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0103d9f:	74 03                	je     f0103da4 <pf_calculate_allocated_pages+0x7c>
				counter ++;
f0103da1:	ff 45 f0             	incl   -0x10(%ebp)
		}
#endif

		// unmap all PTEs in this page table
		uint32 ptIndex;
		for (ptIndex = 0; ptIndex < 1024; ptIndex++)
f0103da4:	ff 45 ec             	incl   -0x14(%ebp)
f0103da7:	81 7d ec ff 03 00 00 	cmpl   $0x3ff,-0x14(%ebp)
f0103dae:	76 d7                	jbe    f0103d87 <pf_calculate_allocated_pages+0x5f>
f0103db0:	eb 01                	jmp    f0103db3 <pf_calculate_allocated_pages+0x8b>

	for (pdIndex = 0; pdIndex < PDX(USER_TOP) ; pdIndex++)
	{
		// only look at mapped page tables
		if (!(ptr_env->disk_env_pgdir[pdIndex] & PERM_PRESENT))
			continue;
f0103db2:	90                   	nop
	uint32 *pt;
	uint32 pdIndex;
	uint32 pa;
	uint32 counter=0;

	for (pdIndex = 0; pdIndex < PDX(USER_TOP) ; pdIndex++)
f0103db3:	ff 45 f4             	incl   -0xc(%ebp)
f0103db6:	81 7d f4 ba 03 00 00 	cmpl   $0x3ba,-0xc(%ebp)
f0103dbd:	0f 86 7b ff ff ff    	jbe    f0103d3e <pf_calculate_allocated_pages+0x16>
			if(dfn != 0)
				counter ++;
		}
	}

	return counter;
f0103dc3:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
f0103dc6:	c9                   	leave  
f0103dc7:	c3                   	ret    

f0103dc8 <pf_calculate_free_frames>:

//2016:
//calculate the disk free frames from the disk free frame list
int pf_calculate_free_frames()
{
f0103dc8:	55                   	push   %ebp
f0103dc9:	89 e5                	mov    %esp,%ebp
f0103dcb:	83 ec 10             	sub    $0x10,%esp
	struct FrameInfo *ptr;
	uint32 totalFreeDiskFrames = 0 ;
f0103dce:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)

	LIST_FOREACH(ptr, &disk_free_frame_list)
f0103dd5:	a1 78 26 78 f0       	mov    0xf0782678,%eax
f0103dda:	89 45 fc             	mov    %eax,-0x4(%ebp)
f0103ddd:	eb 0b                	jmp    f0103dea <pf_calculate_free_frames+0x22>
	{
		totalFreeDiskFrames++ ;
f0103ddf:	ff 45 f8             	incl   -0x8(%ebp)
int pf_calculate_free_frames()
{
	struct FrameInfo *ptr;
	uint32 totalFreeDiskFrames = 0 ;

	LIST_FOREACH(ptr, &disk_free_frame_list)
f0103de2:	a1 80 26 78 f0       	mov    0xf0782680,%eax
f0103de7:	89 45 fc             	mov    %eax,-0x4(%ebp)
f0103dea:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
f0103dee:	74 07                	je     f0103df7 <pf_calculate_free_frames+0x2f>
f0103df0:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0103df3:	8b 00                	mov    (%eax),%eax
f0103df5:	eb 05                	jmp    f0103dfc <pf_calculate_free_frames+0x34>
f0103df7:	b8 00 00 00 00       	mov    $0x0,%eax
f0103dfc:	a3 80 26 78 f0       	mov    %eax,0xf0782680
f0103e01:	a1 80 26 78 f0       	mov    0xf0782680,%eax
f0103e06:	85 c0                	test   %eax,%eax
f0103e08:	75 d5                	jne    f0103ddf <pf_calculate_free_frames+0x17>
f0103e0a:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
f0103e0e:	75 cf                	jne    f0103ddf <pf_calculate_free_frames+0x17>
	{
		totalFreeDiskFrames++ ;
	}
	return totalFreeDiskFrames;
f0103e10:	8b 45 f8             	mov    -0x8(%ebp),%eax
}
f0103e13:	c9                   	leave  
f0103e14:	c3                   	ret    

f0103e15 <get_disk_table_directory>:



/*========================== TABLE FILE MANAGMENT ==============================*/
int get_disk_table_directory(struct Env* ptr_env, uint32** ptr_disk_table_directory)
{
f0103e15:	55                   	push   %ebp
f0103e16:	89 e5                	mov    %esp,%ebp
f0103e18:	83 ec 08             	sub    $0x8,%esp
	*ptr_disk_table_directory = ptr_env->disk_env_tabledir;
f0103e1b:	8b 45 08             	mov    0x8(%ebp),%eax
f0103e1e:	8b 50 6c             	mov    0x6c(%eax),%edx
f0103e21:	8b 45 0c             	mov    0xc(%ebp),%eax
f0103e24:	89 10                	mov    %edx,(%eax)
	if(*ptr_disk_table_directory == 0)
f0103e26:	8b 45 0c             	mov    0xc(%ebp),%eax
f0103e29:	8b 00                	mov    (%eax),%eax
f0103e2b:	85 c0                	test   %eax,%eax
f0103e2d:	75 58                	jne    f0103e87 <get_disk_table_directory+0x72>
	{
		//	LOG_STATMENT(cprintf(">>>>>>>>>>>>>> disk directory not found, creating one ...\n"););
#if USE_KHEAP
		{
			*ptr_disk_table_directory = kmalloc(PAGE_SIZE);
f0103e2f:	83 ec 0c             	sub    $0xc,%esp
f0103e32:	68 00 10 00 00       	push   $0x1000
f0103e37:	e8 49 3a 00 00       	call   f0107885 <kmalloc>
f0103e3c:	83 c4 10             	add    $0x10,%esp
f0103e3f:	89 c2                	mov    %eax,%edx
f0103e41:	8b 45 0c             	mov    0xc(%ebp),%eax
f0103e44:	89 10                	mov    %edx,(%eax)
			if(*ptr_disk_table_directory == NULL)
f0103e46:	8b 45 0c             	mov    0xc(%ebp),%eax
f0103e49:	8b 00                	mov    (%eax),%eax
f0103e4b:	85 c0                	test   %eax,%eax
f0103e4d:	75 07                	jne    f0103e56 <get_disk_table_directory+0x41>
			{
				return E_NO_VM;
f0103e4f:	b8 ec ff ff ff       	mov    $0xffffffec,%eax
f0103e54:	eb 36                	jmp    f0103e8c <get_disk_table_directory+0x77>
			}
			ptr_env->disk_env_tabledir_PA = kheap_physical_address((uint32)*ptr_disk_table_directory);
f0103e56:	8b 45 0c             	mov    0xc(%ebp),%eax
f0103e59:	8b 00                	mov    (%eax),%eax
f0103e5b:	83 ec 0c             	sub    $0xc,%esp
f0103e5e:	50                   	push   %eax
f0103e5f:	e8 3f 3c 00 00       	call   f0107aa3 <kheap_physical_address>
f0103e64:	83 c4 10             	add    $0x10,%esp
f0103e67:	89 c2                	mov    %eax,%edx
f0103e69:	8b 45 08             	mov    0x8(%ebp),%eax
f0103e6c:	89 50 70             	mov    %edx,0x70(%eax)
			// Hint: use "initialize_environment" function
			*ptr_disk_table_directory = STATIC_KERNEL_VIRTUAL_ADDRESS(to_physical_address(p));
			ptr_env->disk_env_tabledir_PA = to_physical_address(p);
		}
#endif
		memset(*ptr_disk_table_directory , 0, PAGE_SIZE);
f0103e6f:	8b 45 0c             	mov    0xc(%ebp),%eax
f0103e72:	8b 00                	mov    (%eax),%eax
f0103e74:	83 ec 04             	sub    $0x4,%esp
f0103e77:	68 00 10 00 00       	push   $0x1000
f0103e7c:	6a 00                	push   $0x0
f0103e7e:	50                   	push   %eax
f0103e7f:	e8 5c d5 02 00       	call   f01313e0 <memset>
f0103e84:	83 c4 10             	add    $0x10,%esp

		//	LOG_STATMENT(cprintf(">>>>>>>>>>>>>> Disk directory created at %x", *ptr_disk_page_directory));
	}
	return 0;
f0103e87:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0103e8c:	c9                   	leave  
f0103e8d:	c3                   	ret    

f0103e8e <__pf_write_env_table>:

int __pf_write_env_table( struct Env* ptr_env, uint32 virtual_address, uint32* tableKVirtualAddress)
{
f0103e8e:	55                   	push   %ebp
f0103e8f:	89 e5                	mov    %esp,%ebp
f0103e91:	83 ec 18             	sub    $0x18,%esp
	//LOG_STRING("========================== create_env_page");
	assert((uint32)virtual_address < KERNEL_BASE);
f0103e94:	81 7d 0c ff ff ff ef 	cmpl   $0xefffffff,0xc(%ebp)
f0103e9b:	76 19                	jbe    f0103eb6 <__pf_write_env_table+0x28>
f0103e9d:	68 04 59 13 f0       	push   $0xf0135904
f0103ea2:	68 2a 59 13 f0       	push   $0xf013592a
f0103ea7:	68 5a 02 00 00       	push   $0x25a
f0103eac:	68 73 58 13 f0       	push   $0xf0135873
f0103eb1:	e8 4f c3 ff ff       	call   f0100205 <_panic>

	get_disk_table_directory(ptr_env, &(ptr_env->disk_env_tabledir)) ;
f0103eb6:	8b 45 08             	mov    0x8(%ebp),%eax
f0103eb9:	83 c0 6c             	add    $0x6c,%eax
f0103ebc:	83 ec 08             	sub    $0x8,%esp
f0103ebf:	50                   	push   %eax
f0103ec0:	ff 75 08             	pushl  0x8(%ebp)
f0103ec3:	e8 4d ff ff ff       	call   f0103e15 <get_disk_table_directory>
f0103ec8:	83 c4 10             	add    $0x10,%esp

	uint32 dfn=ptr_env->disk_env_tabledir[PDX(virtual_address)];
f0103ecb:	8b 45 08             	mov    0x8(%ebp),%eax
f0103ece:	8b 40 6c             	mov    0x6c(%eax),%eax
f0103ed1:	8b 55 0c             	mov    0xc(%ebp),%edx
f0103ed4:	c1 ea 16             	shr    $0x16,%edx
f0103ed7:	c1 e2 02             	shl    $0x2,%edx
f0103eda:	01 d0                	add    %edx,%eax
f0103edc:	8b 00                	mov    (%eax),%eax
f0103ede:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if( dfn == 0)
f0103ee1:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0103ee4:	85 c0                	test   %eax,%eax
f0103ee6:	75 31                	jne    f0103f19 <__pf_write_env_table+0x8b>
	{
		if( allocate_disk_frame(&dfn) == E_NO_PAGE_FILE_SPACE) return E_NO_PAGE_FILE_SPACE;
f0103ee8:	83 ec 0c             	sub    $0xc,%esp
f0103eeb:	8d 45 f0             	lea    -0x10(%ebp),%eax
f0103eee:	50                   	push   %eax
f0103eef:	e8 2c f4 ff ff       	call   f0103320 <allocate_disk_frame>
f0103ef4:	83 c4 10             	add    $0x10,%esp
f0103ef7:	83 f8 f8             	cmp    $0xfffffff8,%eax
f0103efa:	75 07                	jne    f0103f03 <__pf_write_env_table+0x75>
f0103efc:	b8 f8 ff ff ff       	mov    $0xfffffff8,%eax
f0103f01:	eb 2e                	jmp    f0103f31 <__pf_write_env_table+0xa3>
		ptr_env->disk_env_tabledir[PDX(virtual_address)] = dfn;
f0103f03:	8b 45 08             	mov    0x8(%ebp),%eax
f0103f06:	8b 40 6c             	mov    0x6c(%eax),%eax
f0103f09:	8b 55 0c             	mov    0xc(%ebp),%edx
f0103f0c:	c1 ea 16             	shr    $0x16,%edx
f0103f0f:	c1 e2 02             	shl    $0x2,%edx
f0103f12:	01 c2                	add    %eax,%edx
f0103f14:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0103f17:	89 02                	mov    %eax,(%edx)
	//	lcr3(oldDir);

	//We already read it from the KERNEL mapping instead of the USER mapping

	//cprintf("[%s] writing table\n",ptr_env->prog_name);
	int ret = write_disk_page(dfn, (void*)tableKVirtualAddress);
f0103f19:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0103f1c:	83 ec 08             	sub    $0x8,%esp
f0103f1f:	ff 75 10             	pushl  0x10(%ebp)
f0103f22:	50                   	push   %eax
f0103f23:	e8 4b f2 ff ff       	call   f0103173 <write_disk_page>
f0103f28:	83 c4 10             	add    $0x10,%esp
f0103f2b:	89 45 f4             	mov    %eax,-0xc(%ebp)
	//cprintf("[%s] finished writing table\n",ptr_env->prog_name);
	return ret;
f0103f2e:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f0103f31:	c9                   	leave  
f0103f32:	c3                   	ret    

f0103f33 <__pf_read_env_table>:

int __pf_read_env_table(struct Env* ptr_env, uint32 virtual_address, uint32* tableKVirtualAddress)
{
f0103f33:	55                   	push   %ebp
f0103f34:	89 e5                	mov    %esp,%ebp
f0103f36:	83 ec 18             	sub    $0x18,%esp
	if( ptr_env->disk_env_tabledir == 0) return E_TABLE_NOT_EXIST_IN_PF;
f0103f39:	8b 45 08             	mov    0x8(%ebp),%eax
f0103f3c:	8b 40 6c             	mov    0x6c(%eax),%eax
f0103f3f:	85 c0                	test   %eax,%eax
f0103f41:	75 07                	jne    f0103f4a <__pf_read_env_table+0x17>
f0103f43:	b8 f6 ff ff ff       	mov    $0xfffffff6,%eax
f0103f48:	eb 3a                	jmp    f0103f84 <__pf_read_env_table+0x51>

	uint32 dfn=ptr_env->disk_env_tabledir[PDX(virtual_address)];
f0103f4a:	8b 45 08             	mov    0x8(%ebp),%eax
f0103f4d:	8b 40 6c             	mov    0x6c(%eax),%eax
f0103f50:	8b 55 0c             	mov    0xc(%ebp),%edx
f0103f53:	c1 ea 16             	shr    $0x16,%edx
f0103f56:	c1 e2 02             	shl    $0x2,%edx
f0103f59:	01 d0                	add    %edx,%eax
f0103f5b:	8b 00                	mov    (%eax),%eax
f0103f5d:	89 45 f4             	mov    %eax,-0xc(%ebp)

	if( dfn == 0) return E_TABLE_NOT_EXIST_IN_PF;
f0103f60:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0103f64:	75 07                	jne    f0103f6d <__pf_read_env_table+0x3a>
f0103f66:	b8 f6 ff ff ff       	mov    $0xfffffff6,%eax
f0103f6b:	eb 17                	jmp    f0103f84 <__pf_read_env_table+0x51>

	int disk_read_error = read_disk_page(dfn, tableKVirtualAddress);
f0103f6d:	83 ec 08             	sub    $0x8,%esp
f0103f70:	ff 75 10             	pushl  0x10(%ebp)
f0103f73:	ff 75 f4             	pushl  -0xc(%ebp)
f0103f76:	e8 c9 f1 ff ff       	call   f0103144 <read_disk_page>
f0103f7b:	83 c4 10             	add    $0x10,%esp
f0103f7e:	89 45 f0             	mov    %eax,-0x10(%ebp)

	return disk_read_error;
f0103f81:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
f0103f84:	c9                   	leave  
f0103f85:	c3                   	ret    

f0103f86 <__pf_remove_env_all_tables>:

void __pf_remove_env_all_tables(struct Env* ptr_env)
{
f0103f86:	55                   	push   %ebp
f0103f87:	89 e5                	mov    %esp,%ebp
f0103f89:	83 ec 18             	sub    $0x18,%esp
	//LOG_STRING("pf_remove_env_page: 0");

	//LOG_STATMENT(cprintf("ptr_env = %x",ptr_env));
	if( ptr_env->disk_env_tabledir == 0) return;
f0103f8c:	8b 45 08             	mov    0x8(%ebp),%eax
f0103f8f:	8b 40 6c             	mov    0x6c(%eax),%eax
f0103f92:	85 c0                	test   %eax,%eax
f0103f94:	74 4c                	je     f0103fe2 <__pf_remove_env_all_tables+0x5c>

	uint32 pdeno;
	for (pdeno = 0; pdeno < PDX(USER_TOP) ; pdeno++)
f0103f96:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0103f9d:	eb 38                	jmp    f0103fd7 <__pf_remove_env_all_tables+0x51>
	{
		uint32 dfn=ptr_env->disk_env_tabledir[pdeno];
f0103f9f:	8b 45 08             	mov    0x8(%ebp),%eax
f0103fa2:	8b 40 6c             	mov    0x6c(%eax),%eax
f0103fa5:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0103fa8:	c1 e2 02             	shl    $0x2,%edx
f0103fab:	01 d0                	add    %edx,%eax
f0103fad:	8b 00                	mov    (%eax),%eax
f0103faf:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_env->disk_env_tabledir[pdeno] = 0;
f0103fb2:	8b 45 08             	mov    0x8(%ebp),%eax
f0103fb5:	8b 40 6c             	mov    0x6c(%eax),%eax
f0103fb8:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0103fbb:	c1 e2 02             	shl    $0x2,%edx
f0103fbe:	01 d0                	add    %edx,%eax
f0103fc0:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
		free_disk_frame(dfn);
f0103fc6:	83 ec 0c             	sub    $0xc,%esp
f0103fc9:	ff 75 f0             	pushl  -0x10(%ebp)
f0103fcc:	e8 16 f4 ff ff       	call   f01033e7 <free_disk_frame>
f0103fd1:	83 c4 10             	add    $0x10,%esp

	//LOG_STATMENT(cprintf("ptr_env = %x",ptr_env));
	if( ptr_env->disk_env_tabledir == 0) return;

	uint32 pdeno;
	for (pdeno = 0; pdeno < PDX(USER_TOP) ; pdeno++)
f0103fd4:	ff 45 f4             	incl   -0xc(%ebp)
f0103fd7:	81 7d f4 ba 03 00 00 	cmpl   $0x3ba,-0xc(%ebp)
f0103fde:	76 bf                	jbe    f0103f9f <__pf_remove_env_all_tables+0x19>
f0103fe0:	eb 01                	jmp    f0103fe3 <__pf_remove_env_all_tables+0x5d>
void __pf_remove_env_all_tables(struct Env* ptr_env)
{
	//LOG_STRING("pf_remove_env_page: 0");

	//LOG_STATMENT(cprintf("ptr_env = %x",ptr_env));
	if( ptr_env->disk_env_tabledir == 0) return;
f0103fe2:	90                   	nop
		uint32 dfn=ptr_env->disk_env_tabledir[pdeno];
		ptr_env->disk_env_tabledir[pdeno] = 0;
		free_disk_frame(dfn);
	}
	//LOG_STRING("pf_remove_env_page: 3");
}
f0103fe3:	c9                   	leave  
f0103fe4:	c3                   	ret    

f0103fe5 <__pf_remove_env_table>:

void __pf_remove_env_table(struct Env* ptr_env, uint32 virtual_address)
{
f0103fe5:	55                   	push   %ebp
f0103fe6:	89 e5                	mov    %esp,%ebp
f0103fe8:	83 ec 18             	sub    $0x18,%esp
	if (virtual_address == 0)
f0103feb:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
f0103fef:	75 10                	jne    f0104001 <__pf_remove_env_table+0x1c>
		cprintf("REMOVING table 0 from page file\n");
f0103ff1:	83 ec 0c             	sub    $0xc,%esp
f0103ff4:	68 34 5a 13 f0       	push   $0xf0135a34
f0103ff9:	e8 10 cd ff ff       	call   f0100d0e <cprintf>
f0103ffe:	83 c4 10             	add    $0x10,%esp
	if( ptr_env->disk_env_tabledir == 0) return;
f0104001:	8b 45 08             	mov    0x8(%ebp),%eax
f0104004:	8b 40 6c             	mov    0x6c(%eax),%eax
f0104007:	85 c0                	test   %eax,%eax
f0104009:	74 3d                	je     f0104048 <__pf_remove_env_table+0x63>

	uint32 dfn=ptr_env->disk_env_tabledir[PDX(virtual_address)];
f010400b:	8b 45 08             	mov    0x8(%ebp),%eax
f010400e:	8b 40 6c             	mov    0x6c(%eax),%eax
f0104011:	8b 55 0c             	mov    0xc(%ebp),%edx
f0104014:	c1 ea 16             	shr    $0x16,%edx
f0104017:	c1 e2 02             	shl    $0x2,%edx
f010401a:	01 d0                	add    %edx,%eax
f010401c:	8b 00                	mov    (%eax),%eax
f010401e:	89 45 f4             	mov    %eax,-0xc(%ebp)
	ptr_env->disk_env_tabledir[PDX(virtual_address)] = 0;
f0104021:	8b 45 08             	mov    0x8(%ebp),%eax
f0104024:	8b 40 6c             	mov    0x6c(%eax),%eax
f0104027:	8b 55 0c             	mov    0xc(%ebp),%edx
f010402a:	c1 ea 16             	shr    $0x16,%edx
f010402d:	c1 e2 02             	shl    $0x2,%edx
f0104030:	01 d0                	add    %edx,%eax
f0104032:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	free_disk_frame(dfn);
f0104038:	83 ec 0c             	sub    $0xc,%esp
f010403b:	ff 75 f4             	pushl  -0xc(%ebp)
f010403e:	e8 a4 f3 ff ff       	call   f01033e7 <free_disk_frame>
f0104043:	83 c4 10             	add    $0x10,%esp
f0104046:	eb 01                	jmp    f0104049 <__pf_remove_env_table+0x64>

void __pf_remove_env_table(struct Env* ptr_env, uint32 virtual_address)
{
	if (virtual_address == 0)
		cprintf("REMOVING table 0 from page file\n");
	if( ptr_env->disk_env_tabledir == 0) return;
f0104048:	90                   	nop

	uint32 dfn=ptr_env->disk_env_tabledir[PDX(virtual_address)];
	ptr_env->disk_env_tabledir[PDX(virtual_address)] = 0;
	free_disk_frame(dfn);
}
f0104049:	c9                   	leave  
f010404a:	c3                   	ret    

f010404b <test_disk_01>:
///========================== END OF TABLE FILE MANAGMENT =============================


void test_disk_01(void *virtual_address)
{
f010404b:	55                   	push   %ebp
f010404c:	89 e5                	mov    %esp,%ebp
f010404e:	83 ec 18             	sub    $0x18,%esp
	LOG_STATMENT(cprintf("doing tests for ide_write()\n"));
	int i=90157;
f0104051:	c7 45 f4 2d 60 01 00 	movl   $0x1602d,-0xc(%ebp)
	for(;i<140000;i += 500)
f0104058:	eb 1f                	jmp    f0104079 <test_disk_01+0x2e>
	{
		if(ide_write(i,(void *)virtual_address,8) != 0)
f010405a:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010405d:	83 ec 04             	sub    $0x4,%esp
f0104060:	6a 08                	push   $0x8
f0104062:	ff 75 08             	pushl  0x8(%ebp)
f0104065:	50                   	push   %eax
f0104066:	e8 1a da 02 00       	call   f0131a85 <ide_write>
f010406b:	83 c4 10             	add    $0x10,%esp
f010406e:	85 c0                	test   %eax,%eax
f0104070:	75 12                	jne    f0104084 <test_disk_01+0x39>

void test_disk_01(void *virtual_address)
{
	LOG_STATMENT(cprintf("doing tests for ide_write()\n"));
	int i=90157;
	for(;i<140000;i += 500)
f0104072:	81 45 f4 f4 01 00 00 	addl   $0x1f4,-0xc(%ebp)
f0104079:	81 7d f4 df 22 02 00 	cmpl   $0x222df,-0xc(%ebp)
f0104080:	7e d8                	jle    f010405a <test_disk_01+0xf>
		{
			//LOG_STATMENT(cprintf("written at sector %d\n",i););
		}
	}
	LOG_STATMENT(cprintf("ide_write() test done\n"););
}
f0104082:	eb 01                	jmp    f0104085 <test_disk_01+0x3a>
	for(;i<140000;i += 500)
	{
		if(ide_write(i,(void *)virtual_address,8) != 0)
		{
			LOG_STATMENT(cprintf("FAILURE to write sector %d\n",i););
			break;
f0104084:	90                   	nop
		{
			//LOG_STATMENT(cprintf("written at sector %d\n",i););
		}
	}
	LOG_STATMENT(cprintf("ide_write() test done\n"););
}
f0104085:	90                   	nop
f0104086:	c9                   	leave  
f0104087:	c3                   	ret    

f0104088 <mc146818_read>:
#include <kern/cpu/picirq.h>


unsigned
mc146818_read(unsigned reg)
{
f0104088:	55                   	push   %ebp
f0104089:	89 e5                	mov    %esp,%ebp
f010408b:	83 ec 10             	sub    $0x10,%esp
	outb(IO_RTC, reg);
f010408e:	8b 45 08             	mov    0x8(%ebp),%eax
f0104091:	0f b6 c0             	movzbl %al,%eax
f0104094:	c7 45 fc 70 00 00 00 	movl   $0x70,-0x4(%ebp)
f010409b:	88 45 f6             	mov    %al,-0xa(%ebp)
}

static __inline void
outb(int port, uint8 data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
f010409e:	8a 45 f6             	mov    -0xa(%ebp),%al
f01040a1:	8b 55 fc             	mov    -0x4(%ebp),%edx
f01040a4:	ee                   	out    %al,(%dx)
f01040a5:	c7 45 f8 71 00 00 00 	movl   $0x71,-0x8(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f01040ac:	8b 45 f8             	mov    -0x8(%ebp),%eax
f01040af:	89 c2                	mov    %eax,%edx
f01040b1:	ec                   	in     (%dx),%al
f01040b2:	88 45 f7             	mov    %al,-0x9(%ebp)
	return data;
f01040b5:	8a 45 f7             	mov    -0x9(%ebp),%al
	return inb(IO_RTC+1);
f01040b8:	0f b6 c0             	movzbl %al,%eax
}
f01040bb:	c9                   	leave  
f01040bc:	c3                   	ret    

f01040bd <mc146818_write>:

void
mc146818_write(unsigned reg, unsigned datum)
{
f01040bd:	55                   	push   %ebp
f01040be:	89 e5                	mov    %esp,%ebp
f01040c0:	83 ec 10             	sub    $0x10,%esp
	outb(IO_RTC, reg);
f01040c3:	8b 45 08             	mov    0x8(%ebp),%eax
f01040c6:	0f b6 c0             	movzbl %al,%eax
f01040c9:	c7 45 fc 70 00 00 00 	movl   $0x70,-0x4(%ebp)
f01040d0:	88 45 f6             	mov    %al,-0xa(%ebp)
}

static __inline void
outb(int port, uint8 data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
f01040d3:	8a 45 f6             	mov    -0xa(%ebp),%al
f01040d6:	8b 55 fc             	mov    -0x4(%ebp),%edx
f01040d9:	ee                   	out    %al,(%dx)
	outb(IO_RTC+1, datum);
f01040da:	8b 45 0c             	mov    0xc(%ebp),%eax
f01040dd:	0f b6 c0             	movzbl %al,%eax
f01040e0:	c7 45 f8 71 00 00 00 	movl   $0x71,-0x8(%ebp)
f01040e7:	88 45 f7             	mov    %al,-0x9(%ebp)
f01040ea:	8a 45 f7             	mov    -0x9(%ebp),%al
f01040ed:	8b 55 f8             	mov    -0x8(%ebp),%edx
f01040f0:	ee                   	out    %al,(%dx)
}
f01040f1:	90                   	nop
f01040f2:	c9                   	leave  
f01040f3:	c3                   	ret    

f01040f4 <kclock_start>:


void
kclock_start(uint8 quantum_in_ms)
{
f01040f4:	55                   	push   %ebp
f01040f5:	89 e5                	mov    %esp,%ebp
f01040f7:	53                   	push   %ebx
f01040f8:	83 ec 24             	sub    $0x24,%esp
f01040fb:	8b 45 08             	mov    0x8(%ebp),%eax
f01040fe:	88 45 e4             	mov    %al,-0x1c(%ebp)
f0104101:	c7 45 f0 43 00 00 00 	movl   $0x43,-0x10(%ebp)
f0104108:	c6 45 ef 34          	movb   $0x34,-0x11(%ebp)
f010410c:	8a 45 ef             	mov    -0x11(%ebp),%al
f010410f:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0104112:	ee                   	out    %al,(%dx)
	outb(TIMER_MODE, TIMER_SEL0 | TIMER_RATEGEN | TIMER_16BIT);

	//2017
//	outb(TIMER_CNTR0, TIMER_DIV((1000/CLOCK_INTERVAL_IN_MS)) % 256);
//	outb(TIMER_CNTR0, TIMER_DIV((1000/CLOCK_INTERVAL_IN_MS)) / 256);
	if (IS_VALID_QUANTUM(quantum_in_ms))
f0104113:	80 7d e4 35          	cmpb   $0x35,-0x1c(%ebp)
f0104117:	77 48                	ja     f0104161 <kclock_start+0x6d>
f0104119:	c7 45 f4 43 00 00 00 	movl   $0x43,-0xc(%ebp)
f0104120:	c6 45 ee 34          	movb   $0x34,-0x12(%ebp)
f0104124:	8a 45 ee             	mov    -0x12(%ebp),%al
f0104127:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010412a:	ee                   	out    %al,(%dx)
	{
		outb(TIMER_MODE, TIMER_SEL0 | TIMER_RATEGEN | TIMER_16BIT);
		kclock_write_cnt0_LSB_first(TIMER_DIV((1000/quantum_in_ms))) ;
f010412b:	0f b6 5d e4          	movzbl -0x1c(%ebp),%ebx
f010412f:	b8 f4 01 00 00       	mov    $0x1f4,%eax
f0104134:	99                   	cltd   
f0104135:	f7 fb                	idiv   %ebx
f0104137:	8d 88 de 34 12 00    	lea    0x1234de(%eax),%ecx
f010413d:	0f b6 5d e4          	movzbl -0x1c(%ebp),%ebx
f0104141:	b8 e8 03 00 00       	mov    $0x3e8,%eax
f0104146:	99                   	cltd   
f0104147:	f7 fb                	idiv   %ebx
f0104149:	89 c3                	mov    %eax,%ebx
f010414b:	89 c8                	mov    %ecx,%eax
f010414d:	99                   	cltd   
f010414e:	f7 fb                	idiv   %ebx
f0104150:	0f b7 c0             	movzwl %ax,%eax
f0104153:	83 ec 0c             	sub    $0xc,%esp
f0104156:	50                   	push   %eax
f0104157:	e8 b8 01 00 00       	call   f0104314 <kclock_write_cnt0_LSB_first>
f010415c:	83 c4 10             	add    $0x10,%esp
f010415f:	eb 13                	jmp    f0104174 <kclock_start+0x80>
	}
	else
	{
		panic("attempt to set the CPU quantum by too large value. Quantum should be between 1 ms and %d ms", QUANTUM_LIMIT - 1);
f0104161:	6a 35                	push   $0x35
f0104163:	68 58 5a 13 f0       	push   $0xf0135a58
f0104168:	6a 33                	push   $0x33
f010416a:	68 b4 5a 13 f0       	push   $0xf0135ab4
f010416f:	e8 91 c0 ff ff       	call   f0100205 <_panic>
//	cprintf("c = %d\n", c) ;

//	uint16 cnt0_after = kclock_read_cnt0() ;

	//cprintf("	Setup timer interrupts via 8259A\n");
	irq_setmask_8259A(irq_mask_8259A & ~(1<<0));
f0104174:	66 a1 b0 28 19 f0    	mov    0xf01928b0,%ax
f010417a:	0f b7 c0             	movzwl %ax,%eax
f010417d:	25 fe ff 00 00       	and    $0xfffe,%eax
f0104182:	83 ec 0c             	sub    $0xc,%esp
f0104185:	50                   	push   %eax
f0104186:	e8 bc 1b 00 00       	call   f0105d47 <irq_setmask_8259A>
f010418b:	83 c4 10             	add    $0x10,%esp
	//cprintf("	unmasked timer interrupt\n");

	//cprintf("Timer STARTED: Counter0 Before Lag = %d, After lag = %d\n", cnt0_before, cnt0_after );

}
f010418e:	90                   	nop
f010418f:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f0104192:	c9                   	leave  
f0104193:	c3                   	ret    

f0104194 <kclock_stop>:

void
kclock_stop(void)
{
f0104194:	55                   	push   %ebp
f0104195:	89 e5                	mov    %esp,%ebp
f0104197:	83 ec 18             	sub    $0x18,%esp
f010419a:	c7 45 f4 43 00 00 00 	movl   $0x43,-0xc(%ebp)
f01041a1:	c6 45 f3 34          	movb   $0x34,-0xd(%ebp)
f01041a5:	8a 45 f3             	mov    -0xd(%ebp),%al
f01041a8:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01041ab:	ee                   	out    %al,(%dx)
//	for (int i = 0 ; i <20; i++)
//	{
//		cnt0 = kclock_read_cnt0();
//		cprintf("STOP AFTER: cnt0 = %d\n",cnt0);
//	}
	irq_setmask_8259A(0xFFFF);
f01041ac:	83 ec 0c             	sub    $0xc,%esp
f01041af:	68 ff ff 00 00       	push   $0xffff
f01041b4:	e8 8e 1b 00 00       	call   f0105d47 <irq_setmask_8259A>
f01041b9:	83 c4 10             	add    $0x10,%esp
//	uint16 cnt0 = kclock_read_cnt0() ;
//	cprintf("Timer STOPPED: Counter0 Value = %x\n", cnt0 );
	//cprintf("Timer STOPPED: Status Value = %x\n", status);


}
f01041bc:	90                   	nop
f01041bd:	c9                   	leave  
f01041be:	c3                   	ret    

f01041bf <kclock_resume>:

void
kclock_resume(void)
{
f01041bf:	55                   	push   %ebp
f01041c0:	89 e5                	mov    %esp,%ebp
f01041c2:	83 ec 18             	sub    $0x18,%esp
	uint16 cnt0 = kclock_read_cnt0() ;
f01041c5:	e8 8c 01 00 00       	call   f0104356 <kclock_read_cnt0>
f01041ca:	66 89 45 f6          	mov    %ax,-0xa(%ebp)
	//2017: if the remaining time is small, then increase it a bit to avoid invoking the CLOCK INT
	//		before returning back to the environment (this cause INT inside INT!!!) el7 :)
	if (cnt0 < 20)
f01041ce:	66 83 7d f6 13       	cmpw   $0x13,-0xa(%ebp)
f01041d3:	77 06                	ja     f01041db <kclock_resume+0x1c>
	{
		cnt0 = 20;
f01041d5:	66 c7 45 f6 14 00    	movw   $0x14,-0xa(%ebp)
	}

	if (cnt0 % 2 == 1)
f01041db:	66 8b 45 f6          	mov    -0xa(%ebp),%ax
f01041df:	83 e0 01             	and    $0x1,%eax
f01041e2:	66 85 c0             	test   %ax,%ax
f01041e5:	74 09                	je     f01041f0 <kclock_resume+0x31>
		cnt0++;
f01041e7:	66 8b 45 f6          	mov    -0xa(%ebp),%ax
f01041eb:	40                   	inc    %eax
f01041ec:	66 89 45 f6          	mov    %ax,-0xa(%ebp)
f01041f0:	c7 45 f0 43 00 00 00 	movl   $0x43,-0x10(%ebp)
f01041f7:	c6 45 ef 34          	movb   $0x34,-0x11(%ebp)
f01041fb:	8a 45 ef             	mov    -0x11(%ebp),%al
f01041fe:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0104201:	ee                   	out    %al,(%dx)

	outb(TIMER_MODE, TIMER_SEL0 | TIMER_RATEGEN | TIMER_16BIT);
	kclock_write_cnt0_LSB_first(cnt0) ;
f0104202:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
f0104206:	83 ec 0c             	sub    $0xc,%esp
f0104209:	50                   	push   %eax
f010420a:	e8 05 01 00 00       	call   f0104314 <kclock_write_cnt0_LSB_first>
f010420f:	83 c4 10             	add    $0x10,%esp
//	uint16 cnt0_after = kclock_read_cnt0() ;
//	cprintf("Timer RESUMED: Counter0 Before Lag = %d, After lag = %d\n", cnt0_before, cnt0_after );


	//cprintf("	Setup timer interrupts via 8259A\n");
	irq_setmask_8259A(irq_mask_8259A & ~(1<<0));
f0104212:	66 a1 b0 28 19 f0    	mov    0xf01928b0,%ax
f0104218:	0f b7 c0             	movzwl %ax,%eax
f010421b:	25 fe ff 00 00       	and    $0xfffe,%eax
f0104220:	83 ec 0c             	sub    $0xc,%esp
f0104223:	50                   	push   %eax
f0104224:	e8 1e 1b 00 00       	call   f0105d47 <irq_setmask_8259A>
f0104229:	83 c4 10             	add    $0x10,%esp
	//cprintf("	unmasked timer interrupt\n");
}
f010422c:	90                   	nop
f010422d:	c9                   	leave  
f010422e:	c3                   	ret    

f010422f <kclock_start_counter>:


//==============

void kclock_start_counter(uint8 cnt0)
{
f010422f:	55                   	push   %ebp
f0104230:	89 e5                	mov    %esp,%ebp
f0104232:	83 ec 28             	sub    $0x28,%esp
f0104235:	8b 45 08             	mov    0x8(%ebp),%eax
f0104238:	88 45 e4             	mov    %al,-0x1c(%ebp)
f010423b:	c7 45 f4 43 00 00 00 	movl   $0x43,-0xc(%ebp)
f0104242:	c6 45 f3 34          	movb   $0x34,-0xd(%ebp)
f0104246:	8a 45 f3             	mov    -0xd(%ebp),%al
f0104249:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010424c:	ee                   	out    %al,(%dx)
	outb(TIMER_MODE, TIMER_SEL0 | TIMER_RATEGEN | TIMER_16BIT);
	kclock_write_cnt0_LSB_first(cnt0) ;
f010424d:	0f b6 45 e4          	movzbl -0x1c(%ebp),%eax
f0104251:	83 ec 0c             	sub    $0xc,%esp
f0104254:	50                   	push   %eax
f0104255:	e8 ba 00 00 00       	call   f0104314 <kclock_write_cnt0_LSB_first>
f010425a:	83 c4 10             	add    $0x10,%esp
	irq_setmask_8259A(irq_mask_8259A & ~(1<<0));
f010425d:	66 a1 b0 28 19 f0    	mov    0xf01928b0,%ax
f0104263:	0f b7 c0             	movzwl %ax,%eax
f0104266:	25 fe ff 00 00       	and    $0xfffe,%eax
f010426b:	83 ec 0c             	sub    $0xc,%esp
f010426e:	50                   	push   %eax
f010426f:	e8 d3 1a 00 00       	call   f0105d47 <irq_setmask_8259A>
f0104274:	83 c4 10             	add    $0x10,%esp

}
f0104277:	90                   	nop
f0104278:	c9                   	leave  
f0104279:	c3                   	ret    

f010427a <kclock_set_quantum>:
//2018
//Reset the CNT0 to the given quantum value without affecting the interrupt status
void kclock_set_quantum(uint8 quantum_in_ms)
{
f010427a:	55                   	push   %ebp
f010427b:	89 e5                	mov    %esp,%ebp
f010427d:	53                   	push   %ebx
f010427e:	83 ec 24             	sub    $0x24,%esp
f0104281:	8b 45 08             	mov    0x8(%ebp),%eax
f0104284:	88 45 e4             	mov    %al,-0x1c(%ebp)
	if (IS_VALID_QUANTUM(quantum_in_ms))
f0104287:	80 7d e4 35          	cmpb   $0x35,-0x1c(%ebp)
f010428b:	77 6c                	ja     f01042f9 <kclock_set_quantum+0x7f>
	{
		int cnt = TIMER_DIV((1000/quantum_in_ms));
f010428d:	0f b6 5d e4          	movzbl -0x1c(%ebp),%ebx
f0104291:	b8 f4 01 00 00       	mov    $0x1f4,%eax
f0104296:	99                   	cltd   
f0104297:	f7 fb                	idiv   %ebx
f0104299:	8d 88 de 34 12 00    	lea    0x1234de(%eax),%ecx
f010429f:	0f b6 5d e4          	movzbl -0x1c(%ebp),%ebx
f01042a3:	b8 e8 03 00 00       	mov    $0x3e8,%eax
f01042a8:	99                   	cltd   
f01042a9:	f7 fb                	idiv   %ebx
f01042ab:	89 c3                	mov    %eax,%ebx
f01042ad:	89 c8                	mov    %ecx,%eax
f01042af:	99                   	cltd   
f01042b0:	f7 fb                	idiv   %ebx
f01042b2:	89 45 f4             	mov    %eax,-0xc(%ebp)
		if (cnt%2 == 1)
f01042b5:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01042b8:	25 01 00 00 80       	and    $0x80000001,%eax
f01042bd:	85 c0                	test   %eax,%eax
f01042bf:	79 05                	jns    f01042c6 <kclock_set_quantum+0x4c>
f01042c1:	48                   	dec    %eax
f01042c2:	83 c8 fe             	or     $0xfffffffe,%eax
f01042c5:	40                   	inc    %eax
f01042c6:	83 f8 01             	cmp    $0x1,%eax
f01042c9:	75 03                	jne    f01042ce <kclock_set_quantum+0x54>
			cnt++;
f01042cb:	ff 45 f4             	incl   -0xc(%ebp)
f01042ce:	c7 45 f0 43 00 00 00 	movl   $0x43,-0x10(%ebp)
f01042d5:	c6 45 ef 34          	movb   $0x34,-0x11(%ebp)
f01042d9:	8a 45 ef             	mov    -0x11(%ebp),%al
f01042dc:	8b 55 f0             	mov    -0x10(%ebp),%edx
f01042df:	ee                   	out    %al,(%dx)

		//cprintf("QUANTUM is set to %d ms (%d)\n", quantum_in_ms, TIMER_DIV((1000/quantum_in_ms)));
		outb(TIMER_MODE, TIMER_SEL0 | TIMER_RATEGEN | TIMER_16BIT);
		kclock_write_cnt0_LSB_first(cnt) ;
f01042e0:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01042e3:	0f b7 c0             	movzwl %ax,%eax
f01042e6:	83 ec 0c             	sub    $0xc,%esp
f01042e9:	50                   	push   %eax
f01042ea:	e8 25 00 00 00       	call   f0104314 <kclock_write_cnt0_LSB_first>
f01042ef:	83 c4 10             	add    $0x10,%esp
		kclock_stop();
f01042f2:	e8 9d fe ff ff       	call   f0104194 <kclock_stop>
	}
	else
	{
		panic("attempt to set the CPU quantum by too large value. Quantum should be between 1 ms and %d ms", QUANTUM_LIMIT - 1);
	}
}
f01042f7:	eb 16                	jmp    f010430f <kclock_set_quantum+0x95>
		kclock_stop();
		//uint16 cnt0 = kclock_read_cnt0_latch() ; //read after write to ensure it's set to the desired value
	}
	else
	{
		panic("attempt to set the CPU quantum by too large value. Quantum should be between 1 ms and %d ms", QUANTUM_LIMIT - 1);
f01042f9:	6a 35                	push   $0x35
f01042fb:	68 58 5a 13 f0       	push   $0xf0135a58
f0104300:	68 c9 00 00 00       	push   $0xc9
f0104305:	68 b4 5a 13 f0       	push   $0xf0135ab4
f010430a:	e8 f6 be ff ff       	call   f0100205 <_panic>
	}
}
f010430f:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f0104312:	c9                   	leave  
f0104313:	c3                   	ret    

f0104314 <kclock_write_cnt0_LSB_first>:


//2017
void
kclock_write_cnt0_LSB_first(uint16 val)
{
f0104314:	55                   	push   %ebp
f0104315:	89 e5                	mov    %esp,%ebp
f0104317:	83 ec 14             	sub    $0x14,%esp
f010431a:	8b 45 08             	mov    0x8(%ebp),%eax
f010431d:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
	outb(TIMER_CNTR0, (uint8)(val & 0x00FF));
f0104321:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0104324:	0f b6 c0             	movzbl %al,%eax
f0104327:	c7 45 fc 40 00 00 00 	movl   $0x40,-0x4(%ebp)
f010432e:	88 45 f6             	mov    %al,-0xa(%ebp)
f0104331:	8a 45 f6             	mov    -0xa(%ebp),%al
f0104334:	8b 55 fc             	mov    -0x4(%ebp),%edx
f0104337:	ee                   	out    %al,(%dx)
	outb(TIMER_CNTR0, (uint8)((val>>8) & 0x00FF));
f0104338:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010433b:	66 c1 e8 08          	shr    $0x8,%ax
f010433f:	0f b6 c0             	movzbl %al,%eax
f0104342:	c7 45 f8 40 00 00 00 	movl   $0x40,-0x8(%ebp)
f0104349:	88 45 f7             	mov    %al,-0x9(%ebp)
f010434c:	8a 45 f7             	mov    -0x9(%ebp),%al
f010434f:	8b 55 f8             	mov    -0x8(%ebp),%edx
f0104352:	ee                   	out    %al,(%dx)
}
f0104353:	90                   	nop
f0104354:	c9                   	leave  
f0104355:	c3                   	ret    

f0104356 <kclock_read_cnt0>:
//==============


uint16
kclock_read_cnt0(void)
{
f0104356:	55                   	push   %ebp
f0104357:	89 e5                	mov    %esp,%ebp
f0104359:	83 ec 20             	sub    $0x20,%esp
f010435c:	c7 45 f8 40 00 00 00 	movl   $0x40,-0x8(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f0104363:	8b 45 f8             	mov    -0x8(%ebp),%eax
f0104366:	89 c2                	mov    %eax,%edx
f0104368:	ec                   	in     (%dx),%al
f0104369:	88 45 ee             	mov    %al,-0x12(%ebp)
	return data;
f010436c:	8a 45 ee             	mov    -0x12(%ebp),%al
	uint8 cnt0_lo =  inb(TIMER_CNTR0);
f010436f:	88 45 ff             	mov    %al,-0x1(%ebp)
f0104372:	c7 45 f0 40 00 00 00 	movl   $0x40,-0x10(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f0104379:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010437c:	89 c2                	mov    %eax,%edx
f010437e:	ec                   	in     (%dx),%al
f010437f:	88 45 ef             	mov    %al,-0x11(%ebp)
	return data;
f0104382:	8a 45 ef             	mov    -0x11(%ebp),%al
	uint8 cnt0_hi =  inb(TIMER_CNTR0);
f0104385:	88 45 f7             	mov    %al,-0x9(%ebp)
	uint16 cnt0 = (cnt0_hi << 8) | cnt0_lo ;
f0104388:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
f010438c:	c1 e0 08             	shl    $0x8,%eax
f010438f:	89 c2                	mov    %eax,%edx
f0104391:	0f b6 45 ff          	movzbl -0x1(%ebp),%eax
f0104395:	09 d0                	or     %edx,%eax
f0104397:	66 89 45 f4          	mov    %ax,-0xc(%ebp)
	return cnt0 ;
f010439b:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f010439e:	c9                   	leave  
f010439f:	c3                   	ret    

f01043a0 <kclock_read_cnt0_latch>:


uint16
kclock_read_cnt0_latch(void)
{
f01043a0:	55                   	push   %ebp
f01043a1:	89 e5                	mov    %esp,%ebp
f01043a3:	83 ec 30             	sub    $0x30,%esp
f01043a6:	c7 45 f8 43 00 00 00 	movl   $0x43,-0x8(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f01043ad:	8b 45 f8             	mov    -0x8(%ebp),%eax
f01043b0:	89 c2                	mov    %eax,%edx
f01043b2:	ec                   	in     (%dx),%al
f01043b3:	88 45 db             	mov    %al,-0x25(%ebp)
	return data;
f01043b6:	8a 45 db             	mov    -0x25(%ebp),%al
	uint8 old_mode = inb(TIMER_MODE) ;
f01043b9:	88 45 ff             	mov    %al,-0x1(%ebp)
f01043bc:	c7 45 f4 43 00 00 00 	movl   $0x43,-0xc(%ebp)
f01043c3:	c6 45 dc 00          	movb   $0x0,-0x24(%ebp)
}

static __inline void
outb(int port, uint8 data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
f01043c7:	8a 45 dc             	mov    -0x24(%ebp),%al
f01043ca:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01043cd:	ee                   	out    %al,(%dx)
f01043ce:	c7 45 ec 40 00 00 00 	movl   $0x40,-0x14(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f01043d5:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01043d8:	89 c2                	mov    %eax,%edx
f01043da:	ec                   	in     (%dx),%al
f01043db:	88 45 dd             	mov    %al,-0x23(%ebp)
	return data;
f01043de:	8a 45 dd             	mov    -0x23(%ebp),%al
	outb(TIMER_MODE, TIMER_SEL0 | TIMER_LATCH);

	uint8 cnt0_lo =  inb(TIMER_CNTR0);
f01043e1:	88 45 f3             	mov    %al,-0xd(%ebp)
f01043e4:	c7 45 e4 40 00 00 00 	movl   $0x40,-0x1c(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f01043eb:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01043ee:	89 c2                	mov    %eax,%edx
f01043f0:	ec                   	in     (%dx),%al
f01043f1:	88 45 de             	mov    %al,-0x22(%ebp)
	return data;
f01043f4:	8a 45 de             	mov    -0x22(%ebp),%al
	uint8 cnt0_hi =  inb(TIMER_CNTR0);
f01043f7:	88 45 eb             	mov    %al,-0x15(%ebp)
	uint16 cnt0 = (cnt0_hi << 8) | cnt0_lo ;
f01043fa:	0f b6 45 eb          	movzbl -0x15(%ebp),%eax
f01043fe:	c1 e0 08             	shl    $0x8,%eax
f0104401:	89 c2                	mov    %eax,%edx
f0104403:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
f0104407:	09 d0                	or     %edx,%eax
f0104409:	66 89 45 e8          	mov    %ax,-0x18(%ebp)
	outb(TIMER_MODE, old_mode);
f010440d:	0f b6 45 ff          	movzbl -0x1(%ebp),%eax
f0104411:	c7 45 e0 43 00 00 00 	movl   $0x43,-0x20(%ebp)
f0104418:	88 45 df             	mov    %al,-0x21(%ebp)
}

static __inline void
outb(int port, uint8 data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
f010441b:	8a 45 df             	mov    -0x21(%ebp),%al
f010441e:	8b 55 e0             	mov    -0x20(%ebp),%edx
f0104421:	ee                   	out    %al,(%dx)

	return cnt0 ;
f0104422:	8b 45 e8             	mov    -0x18(%ebp),%eax
}
f0104425:	c9                   	leave  
f0104426:	c3                   	ret    

f0104427 <isSchedMethodRR>:
//void on_clock_update_WS_time_stamps();
extern void cleanup_buffers(struct Env* e);
//================

void sched_delete_ready_queues() ;
uint32 isSchedMethodRR(){if(scheduler_method == SCH_RR) return 1; return 0;}
f0104427:	55                   	push   %ebp
f0104428:	89 e5                	mov    %esp,%ebp
f010442a:	a1 0c 26 78 f0       	mov    0xf078260c,%eax
f010442f:	85 c0                	test   %eax,%eax
f0104431:	75 07                	jne    f010443a <isSchedMethodRR+0x13>
f0104433:	b8 01 00 00 00       	mov    $0x1,%eax
f0104438:	eb 05                	jmp    f010443f <isSchedMethodRR+0x18>
f010443a:	b8 00 00 00 00       	mov    $0x0,%eax
f010443f:	5d                   	pop    %ebp
f0104440:	c3                   	ret    

f0104441 <isSchedMethodMLFQ>:
uint32 isSchedMethodMLFQ(){if(scheduler_method == SCH_MLFQ) return 1; return 0;}
f0104441:	55                   	push   %ebp
f0104442:	89 e5                	mov    %esp,%ebp
f0104444:	a1 0c 26 78 f0       	mov    0xf078260c,%eax
f0104449:	83 f8 01             	cmp    $0x1,%eax
f010444c:	75 07                	jne    f0104455 <isSchedMethodMLFQ+0x14>
f010444e:	b8 01 00 00 00       	mov    $0x1,%eax
f0104453:	eb 05                	jmp    f010445a <isSchedMethodMLFQ+0x19>
f0104455:	b8 00 00 00 00       	mov    $0x0,%eax
f010445a:	5d                   	pop    %ebp
f010445b:	c3                   	ret    

f010445c <init_queue>:

//==================================================================================//
//============================== HELPER FUNCTIONS ==================================//
//==================================================================================//
void init_queue(struct Env_Queue* queue)
{
f010445c:	55                   	push   %ebp
f010445d:	89 e5                	mov    %esp,%ebp
	if(queue != NULL)
f010445f:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0104463:	74 1d                	je     f0104482 <init_queue+0x26>
	{
		LIST_INIT(queue);
f0104465:	8b 45 08             	mov    0x8(%ebp),%eax
f0104468:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f010446e:	8b 45 08             	mov    0x8(%ebp),%eax
f0104471:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f0104478:	8b 45 08             	mov    0x8(%ebp),%eax
f010447b:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
	}
}
f0104482:	90                   	nop
f0104483:	5d                   	pop    %ebp
f0104484:	c3                   	ret    

f0104485 <queue_size>:

int queue_size(struct Env_Queue* queue)
{
f0104485:	55                   	push   %ebp
f0104486:	89 e5                	mov    %esp,%ebp
	if(queue != NULL)
f0104488:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f010448c:	74 08                	je     f0104496 <queue_size+0x11>
	{
		return LIST_SIZE(queue);
f010448e:	8b 45 08             	mov    0x8(%ebp),%eax
f0104491:	8b 40 0c             	mov    0xc(%eax),%eax
f0104494:	eb 05                	jmp    f010449b <queue_size+0x16>
	}
	else
	{
		return 0;
f0104496:	b8 00 00 00 00       	mov    $0x0,%eax
	}
}
f010449b:	5d                   	pop    %ebp
f010449c:	c3                   	ret    

f010449d <enqueue>:

void enqueue(struct Env_Queue* queue, struct Env* env)
{
f010449d:	55                   	push   %ebp
f010449e:	89 e5                	mov    %esp,%ebp
f01044a0:	83 ec 08             	sub    $0x8,%esp
	assert(queue != NULL)	;
f01044a3:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f01044a7:	75 16                	jne    f01044bf <enqueue+0x22>
f01044a9:	68 c8 5a 13 f0       	push   $0xf0135ac8
f01044ae:	68 d6 5a 13 f0       	push   $0xf0135ad6
f01044b3:	6a 2d                	push   $0x2d
f01044b5:	68 eb 5a 13 f0       	push   $0xf0135aeb
f01044ba:	e8 46 bd ff ff       	call   f0100205 <_panic>
	if(env != NULL)
f01044bf:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
f01044c3:	74 66                	je     f010452b <enqueue+0x8e>
	{
		LIST_INSERT_HEAD(queue, env);
f01044c5:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
f01044c9:	75 14                	jne    f01044df <enqueue+0x42>
f01044cb:	83 ec 04             	sub    $0x4,%esp
f01044ce:	68 fc 5a 13 f0       	push   $0xf0135afc
f01044d3:	6a 30                	push   $0x30
f01044d5:	68 eb 5a 13 f0       	push   $0xf0135aeb
f01044da:	e8 26 bd ff ff       	call   f0100205 <_panic>
f01044df:	8b 45 08             	mov    0x8(%ebp),%eax
f01044e2:	8b 10                	mov    (%eax),%edx
f01044e4:	8b 45 0c             	mov    0xc(%ebp),%eax
f01044e7:	89 50 44             	mov    %edx,0x44(%eax)
f01044ea:	8b 45 0c             	mov    0xc(%ebp),%eax
f01044ed:	8b 40 44             	mov    0x44(%eax),%eax
f01044f0:	85 c0                	test   %eax,%eax
f01044f2:	74 0d                	je     f0104501 <enqueue+0x64>
f01044f4:	8b 45 08             	mov    0x8(%ebp),%eax
f01044f7:	8b 00                	mov    (%eax),%eax
f01044f9:	8b 55 0c             	mov    0xc(%ebp),%edx
f01044fc:	89 50 48             	mov    %edx,0x48(%eax)
f01044ff:	eb 09                	jmp    f010450a <enqueue+0x6d>
f0104501:	8b 45 08             	mov    0x8(%ebp),%eax
f0104504:	8b 55 0c             	mov    0xc(%ebp),%edx
f0104507:	89 50 04             	mov    %edx,0x4(%eax)
f010450a:	8b 45 08             	mov    0x8(%ebp),%eax
f010450d:	8b 55 0c             	mov    0xc(%ebp),%edx
f0104510:	89 10                	mov    %edx,(%eax)
f0104512:	8b 45 0c             	mov    0xc(%ebp),%eax
f0104515:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f010451c:	8b 45 08             	mov    0x8(%ebp),%eax
f010451f:	8b 40 0c             	mov    0xc(%eax),%eax
f0104522:	8d 50 01             	lea    0x1(%eax),%edx
f0104525:	8b 45 08             	mov    0x8(%ebp),%eax
f0104528:	89 50 0c             	mov    %edx,0xc(%eax)
	}
}
f010452b:	90                   	nop
f010452c:	c9                   	leave  
f010452d:	c3                   	ret    

f010452e <dequeue>:

struct Env* dequeue(struct Env_Queue* queue)
{
f010452e:	55                   	push   %ebp
f010452f:	89 e5                	mov    %esp,%ebp
f0104531:	83 ec 18             	sub    $0x18,%esp
	if (queue == NULL) return NULL;
f0104534:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0104538:	75 0a                	jne    f0104544 <dequeue+0x16>
f010453a:	b8 00 00 00 00       	mov    $0x0,%eax
f010453f:	e9 a0 00 00 00       	jmp    f01045e4 <dequeue+0xb6>
	struct Env* envItem = LIST_LAST(queue);
f0104544:	8b 45 08             	mov    0x8(%ebp),%eax
f0104547:	8b 40 04             	mov    0x4(%eax),%eax
f010454a:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if (envItem != NULL)
f010454d:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0104551:	0f 84 8a 00 00 00    	je     f01045e1 <dequeue+0xb3>
	{
		LIST_REMOVE(queue, envItem);
f0104557:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010455b:	75 14                	jne    f0104571 <dequeue+0x43>
f010455d:	83 ec 04             	sub    $0x4,%esp
f0104560:	68 1f 5b 13 f0       	push   $0xf0135b1f
f0104565:	6a 3a                	push   $0x3a
f0104567:	68 eb 5a 13 f0       	push   $0xf0135aeb
f010456c:	e8 94 bc ff ff       	call   f0100205 <_panic>
f0104571:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104574:	8b 40 44             	mov    0x44(%eax),%eax
f0104577:	85 c0                	test   %eax,%eax
f0104579:	74 11                	je     f010458c <dequeue+0x5e>
f010457b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010457e:	8b 40 44             	mov    0x44(%eax),%eax
f0104581:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0104584:	8b 52 48             	mov    0x48(%edx),%edx
f0104587:	89 50 48             	mov    %edx,0x48(%eax)
f010458a:	eb 0c                	jmp    f0104598 <dequeue+0x6a>
f010458c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010458f:	8b 50 48             	mov    0x48(%eax),%edx
f0104592:	8b 45 08             	mov    0x8(%ebp),%eax
f0104595:	89 50 04             	mov    %edx,0x4(%eax)
f0104598:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010459b:	8b 40 48             	mov    0x48(%eax),%eax
f010459e:	85 c0                	test   %eax,%eax
f01045a0:	74 11                	je     f01045b3 <dequeue+0x85>
f01045a2:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01045a5:	8b 40 48             	mov    0x48(%eax),%eax
f01045a8:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01045ab:	8b 52 44             	mov    0x44(%edx),%edx
f01045ae:	89 50 44             	mov    %edx,0x44(%eax)
f01045b1:	eb 0b                	jmp    f01045be <dequeue+0x90>
f01045b3:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01045b6:	8b 50 44             	mov    0x44(%eax),%edx
f01045b9:	8b 45 08             	mov    0x8(%ebp),%eax
f01045bc:	89 10                	mov    %edx,(%eax)
f01045be:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01045c1:	c7 40 44 00 00 00 00 	movl   $0x0,0x44(%eax)
f01045c8:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01045cb:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f01045d2:	8b 45 08             	mov    0x8(%ebp),%eax
f01045d5:	8b 40 0c             	mov    0xc(%eax),%eax
f01045d8:	8d 50 ff             	lea    -0x1(%eax),%edx
f01045db:	8b 45 08             	mov    0x8(%ebp),%eax
f01045de:	89 50 0c             	mov    %edx,0xc(%eax)
	}
	return envItem;
f01045e1:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f01045e4:	c9                   	leave  
f01045e5:	c3                   	ret    

f01045e6 <remove_from_queue>:

void remove_from_queue(struct Env_Queue* queue, struct Env* e)
{
f01045e6:	55                   	push   %ebp
f01045e7:	89 e5                	mov    %esp,%ebp
f01045e9:	83 ec 08             	sub    $0x8,%esp
	assert(queue != NULL)	;
f01045ec:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f01045f0:	75 16                	jne    f0104608 <remove_from_queue+0x22>
f01045f2:	68 c8 5a 13 f0       	push   $0xf0135ac8
f01045f7:	68 d6 5a 13 f0       	push   $0xf0135ad6
f01045fc:	6a 41                	push   $0x41
f01045fe:	68 eb 5a 13 f0       	push   $0xf0135aeb
f0104603:	e8 fd bb ff ff       	call   f0100205 <_panic>

	if (e != NULL)
f0104608:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
f010460c:	0f 84 8a 00 00 00    	je     f010469c <remove_from_queue+0xb6>
	{
		LIST_REMOVE(queue, e);
f0104612:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
f0104616:	75 14                	jne    f010462c <remove_from_queue+0x46>
f0104618:	83 ec 04             	sub    $0x4,%esp
f010461b:	68 1f 5b 13 f0       	push   $0xf0135b1f
f0104620:	6a 45                	push   $0x45
f0104622:	68 eb 5a 13 f0       	push   $0xf0135aeb
f0104627:	e8 d9 bb ff ff       	call   f0100205 <_panic>
f010462c:	8b 45 0c             	mov    0xc(%ebp),%eax
f010462f:	8b 40 44             	mov    0x44(%eax),%eax
f0104632:	85 c0                	test   %eax,%eax
f0104634:	74 11                	je     f0104647 <remove_from_queue+0x61>
f0104636:	8b 45 0c             	mov    0xc(%ebp),%eax
f0104639:	8b 40 44             	mov    0x44(%eax),%eax
f010463c:	8b 55 0c             	mov    0xc(%ebp),%edx
f010463f:	8b 52 48             	mov    0x48(%edx),%edx
f0104642:	89 50 48             	mov    %edx,0x48(%eax)
f0104645:	eb 0c                	jmp    f0104653 <remove_from_queue+0x6d>
f0104647:	8b 45 0c             	mov    0xc(%ebp),%eax
f010464a:	8b 50 48             	mov    0x48(%eax),%edx
f010464d:	8b 45 08             	mov    0x8(%ebp),%eax
f0104650:	89 50 04             	mov    %edx,0x4(%eax)
f0104653:	8b 45 0c             	mov    0xc(%ebp),%eax
f0104656:	8b 40 48             	mov    0x48(%eax),%eax
f0104659:	85 c0                	test   %eax,%eax
f010465b:	74 11                	je     f010466e <remove_from_queue+0x88>
f010465d:	8b 45 0c             	mov    0xc(%ebp),%eax
f0104660:	8b 40 48             	mov    0x48(%eax),%eax
f0104663:	8b 55 0c             	mov    0xc(%ebp),%edx
f0104666:	8b 52 44             	mov    0x44(%edx),%edx
f0104669:	89 50 44             	mov    %edx,0x44(%eax)
f010466c:	eb 0b                	jmp    f0104679 <remove_from_queue+0x93>
f010466e:	8b 45 0c             	mov    0xc(%ebp),%eax
f0104671:	8b 50 44             	mov    0x44(%eax),%edx
f0104674:	8b 45 08             	mov    0x8(%ebp),%eax
f0104677:	89 10                	mov    %edx,(%eax)
f0104679:	8b 45 0c             	mov    0xc(%ebp),%eax
f010467c:	c7 40 44 00 00 00 00 	movl   $0x0,0x44(%eax)
f0104683:	8b 45 0c             	mov    0xc(%ebp),%eax
f0104686:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f010468d:	8b 45 08             	mov    0x8(%ebp),%eax
f0104690:	8b 40 0c             	mov    0xc(%eax),%eax
f0104693:	8d 50 ff             	lea    -0x1(%eax),%edx
f0104696:	8b 45 08             	mov    0x8(%ebp),%eax
f0104699:	89 50 0c             	mov    %edx,0xc(%eax)
	}
}
f010469c:	90                   	nop
f010469d:	c9                   	leave  
f010469e:	c3                   	ret    

f010469f <find_env_in_queue>:

struct Env* find_env_in_queue(struct Env_Queue* queue, uint32 envID)
{
f010469f:	55                   	push   %ebp
f01046a0:	89 e5                	mov    %esp,%ebp
f01046a2:	83 ec 10             	sub    $0x10,%esp
	if (queue == NULL) return NULL;
f01046a5:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f01046a9:	75 07                	jne    f01046b2 <find_env_in_queue+0x13>
f01046ab:	b8 00 00 00 00       	mov    $0x0,%eax
f01046b0:	eb 58                	jmp    f010470a <find_env_in_queue+0x6b>

	struct Env * ptr_env=NULL;
f01046b2:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
	LIST_FOREACH(ptr_env, queue)
f01046b9:	8b 45 08             	mov    0x8(%ebp),%eax
f01046bc:	8b 00                	mov    (%eax),%eax
f01046be:	89 45 fc             	mov    %eax,-0x4(%ebp)
f01046c1:	eb 19                	jmp    f01046dc <find_env_in_queue+0x3d>
	{
		if(ptr_env->env_id == envID)
f01046c3:	8b 45 fc             	mov    -0x4(%ebp),%eax
f01046c6:	8b 40 4c             	mov    0x4c(%eax),%eax
f01046c9:	3b 45 0c             	cmp    0xc(%ebp),%eax
f01046cc:	75 05                	jne    f01046d3 <find_env_in_queue+0x34>
		{
			return ptr_env;
f01046ce:	8b 45 fc             	mov    -0x4(%ebp),%eax
f01046d1:	eb 37                	jmp    f010470a <find_env_in_queue+0x6b>
struct Env* find_env_in_queue(struct Env_Queue* queue, uint32 envID)
{
	if (queue == NULL) return NULL;

	struct Env * ptr_env=NULL;
	LIST_FOREACH(ptr_env, queue)
f01046d3:	8b 45 08             	mov    0x8(%ebp),%eax
f01046d6:	8b 40 08             	mov    0x8(%eax),%eax
f01046d9:	89 45 fc             	mov    %eax,-0x4(%ebp)
f01046dc:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
f01046e0:	74 08                	je     f01046ea <find_env_in_queue+0x4b>
f01046e2:	8b 45 fc             	mov    -0x4(%ebp),%eax
f01046e5:	8b 40 44             	mov    0x44(%eax),%eax
f01046e8:	eb 05                	jmp    f01046ef <find_env_in_queue+0x50>
f01046ea:	b8 00 00 00 00       	mov    $0x0,%eax
f01046ef:	8b 55 08             	mov    0x8(%ebp),%edx
f01046f2:	89 42 08             	mov    %eax,0x8(%edx)
f01046f5:	8b 45 08             	mov    0x8(%ebp),%eax
f01046f8:	8b 40 08             	mov    0x8(%eax),%eax
f01046fb:	85 c0                	test   %eax,%eax
f01046fd:	75 c4                	jne    f01046c3 <find_env_in_queue+0x24>
f01046ff:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
f0104703:	75 be                	jne    f01046c3 <find_env_in_queue+0x24>
		if(ptr_env->env_id == envID)
		{
			return ptr_env;
		}
	}
	return NULL;
f0104705:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010470a:	c9                   	leave  
f010470b:	c3                   	ret    

f010470c <fos_scheduler_MLFQ>:
//==================================================================================//

struct Env* fos_scheduler_MLFQ()
{
f010470c:	55                   	push   %ebp
f010470d:	89 e5                	mov    %esp,%ebp
f010470f:	83 ec 08             	sub    $0x8,%esp
	//Apply the MLFQ with the specified levels to pick up the next environment
	//Note: the "curenv" (if exist) should be placed in its correct queue
	// your code is here, remove the panic and write your code
	panic("fos_scheduler_MLFQ() is not implemented yet...!!");
f0104712:	83 ec 04             	sub    $0x4,%esp
f0104715:	68 40 5b 13 f0       	push   $0xf0135b40
f010471a:	6a 5e                	push   $0x5e
f010471c:	68 eb 5a 13 f0       	push   $0xf0135aeb
f0104721:	e8 df ba ff ff       	call   f0100205 <_panic>

f0104726 <fos_scheduler>:

}

void
fos_scheduler(void)
{
f0104726:	55                   	push   %ebp
f0104727:	89 e5                	mov    %esp,%ebp
f0104729:	83 ec 18             	sub    $0x18,%esp
	chk1();
f010472c:	e8 80 bd 02 00       	call   f01304b1 <chk1>
	scheduler_status = SCH_STARTED;
f0104731:	c7 05 18 26 78 f0 01 	movl   $0x1,0xf0782618
f0104738:	00 00 00 

	//This variable should be set to the next environment to be run (if any)
	struct Env* next_env = NULL;
f010473b:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

	if (scheduler_method == SCH_RR)
f0104742:	a1 0c 26 78 f0       	mov    0xf078260c,%eax
f0104747:	85 c0                	test   %eax,%eax
f0104749:	75 4d                	jne    f0104798 <fos_scheduler+0x72>
		// and switch to such environment if found.
		// It's OK to choose the previously running env if no other env
		// is runnable.

		//If the curenv is still exist, then insert it again in the ready queue
		if (curenv != NULL)
f010474b:	a1 b4 1c 78 f0       	mov    0xf0781cb4,%eax
f0104750:	85 c0                	test   %eax,%eax
f0104752:	74 18                	je     f010476c <fos_scheduler+0x46>
		{
			enqueue(&(env_ready_queues[0]), curenv);
f0104754:	8b 15 b4 1c 78 f0    	mov    0xf0781cb4,%edx
f010475a:	a1 a8 25 78 f0       	mov    0xf07825a8,%eax
f010475f:	83 ec 08             	sub    $0x8,%esp
f0104762:	52                   	push   %edx
f0104763:	50                   	push   %eax
f0104764:	e8 34 fd ff ff       	call   f010449d <enqueue>
f0104769:	83 c4 10             	add    $0x10,%esp
		}

		//Pick the next environment from the ready queue
		next_env = dequeue(&(env_ready_queues[0]));
f010476c:	a1 a8 25 78 f0       	mov    0xf07825a8,%eax
f0104771:	83 ec 0c             	sub    $0xc,%esp
f0104774:	50                   	push   %eax
f0104775:	e8 b4 fd ff ff       	call   f010452e <dequeue>
f010477a:	83 c4 10             	add    $0x10,%esp
f010477d:	89 45 f4             	mov    %eax,-0xc(%ebp)

		//Reset the quantum
		//2017: Reset the value of CNT0 for the next clock interval
		kclock_set_quantum(quantums[0]);
f0104780:	a1 ec 25 78 f0       	mov    0xf07825ec,%eax
f0104785:	8a 00                	mov    (%eax),%al
f0104787:	0f b6 c0             	movzbl %al,%eax
f010478a:	83 ec 0c             	sub    $0xc,%esp
f010478d:	50                   	push   %eax
f010478e:	e8 e7 fa ff ff       	call   f010427a <kclock_set_quantum>
f0104793:	83 c4 10             	add    $0x10,%esp
f0104796:	eb 12                	jmp    f01047aa <fos_scheduler+0x84>
		//uint16 cnt0 = kclock_read_cnt0_latch() ;
		//cprintf("CLOCK INTERRUPT AFTER RESET: Counter0 Value = %d\n", cnt0 );

	}
	else if (scheduler_method == SCH_MLFQ)
f0104798:	a1 0c 26 78 f0       	mov    0xf078260c,%eax
f010479d:	83 f8 01             	cmp    $0x1,%eax
f01047a0:	75 08                	jne    f01047aa <fos_scheduler+0x84>
	{
		next_env = fos_scheduler_MLFQ();
f01047a2:	e8 65 ff ff ff       	call   f010470c <fos_scheduler_MLFQ>
f01047a7:	89 45 f4             	mov    %eax,-0xc(%ebp)
	}


	//temporarily set the curenv by the next env JUST for checking the scheduler
	//Then: reset it again
	struct Env* old_curenv = curenv;
f01047aa:	a1 b4 1c 78 f0       	mov    0xf0781cb4,%eax
f01047af:	89 45 f0             	mov    %eax,-0x10(%ebp)
	curenv = next_env ;
f01047b2:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01047b5:	a3 b4 1c 78 f0       	mov    %eax,0xf0781cb4
	chk2(next_env) ;
f01047ba:	83 ec 0c             	sub    $0xc,%esp
f01047bd:	ff 75 f4             	pushl  -0xc(%ebp)
f01047c0:	e8 29 bd 02 00       	call   f01304ee <chk2>
f01047c5:	83 c4 10             	add    $0x10,%esp
	curenv = old_curenv;
f01047c8:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01047cb:	a3 b4 1c 78 f0       	mov    %eax,0xf0781cb4

	//sched_print_all();

	if(next_env != NULL)
f01047d0:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01047d4:	74 0b                	je     f01047e1 <fos_scheduler+0xbb>
	{
//		cprintf("\nScheduler select program '%s' [%d]... counter = %d\n", next_env->prog_name, next_env->env_id, kclock_read_cnt0());
//		cprintf("Q0 = %d, Q1 = %d, Q2 = %d, Q3 = %d\n", queue_size(&(env_ready_queues[0])), queue_size(&(env_ready_queues[1])), queue_size(&(env_ready_queues[2])), queue_size(&(env_ready_queues[3])));
		env_run(next_env);
f01047d6:	83 ec 0c             	sub    $0xc,%esp
f01047d9:	ff 75 f4             	pushl  -0xc(%ebp)
f01047dc:	e8 8b 52 00 00       	call   f0109a6c <env_run>
	}
	else
	{
		/*2015*///No more envs... curenv doesn't exist any more! return back to command prompt
		curenv = NULL;
f01047e1:	c7 05 b4 1c 78 f0 00 	movl   $0x0,0xf0781cb4
f01047e8:	00 00 00 
		//lcr3(K_PHYSICAL_ADDRESS(ptr_page_directory));
		lcr3(phys_page_directory);
f01047eb:	a1 6c 26 78 f0       	mov    0xf078266c,%eax
f01047f0:	89 45 ec             	mov    %eax,-0x14(%ebp)
}

static __inline void
lcr3(uint32 val)
{
	__asm __volatile("movl %0,%%cr3" : : "r" (val));
f01047f3:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01047f6:	0f 22 d8             	mov    %eax,%cr3

		//cprintf("SP = %x\n", read_esp());

		scheduler_status = SCH_STOPPED;
f01047f9:	c7 05 18 26 78 f0 00 	movl   $0x0,0xf0782618
f0104800:	00 00 00 
		//cprintf("[sched] no envs - nothing more to do!\n");
		while (1)
			run_command_prompt(NULL);
f0104803:	83 ec 0c             	sub    $0xc,%esp
f0104806:	6a 00                	push   $0x0
f0104808:	e8 27 c5 ff ff       	call   f0100d34 <run_command_prompt>
f010480d:	83 c4 10             	add    $0x10,%esp
f0104810:	eb f1                	jmp    f0104803 <fos_scheduler+0xdd>

f0104812 <sched_init_RR>:

	}
}

void sched_init_RR(uint8 quantum)
{
f0104812:	55                   	push   %ebp
f0104813:	89 e5                	mov    %esp,%ebp
f0104815:	83 ec 18             	sub    $0x18,%esp
f0104818:	8b 45 08             	mov    0x8(%ebp),%eax
f010481b:	88 45 f4             	mov    %al,-0xc(%ebp)


	// Create 1 ready queue for the RR
	num_of_ready_queues = 1;
f010481e:	c6 05 40 26 78 f0 01 	movb   $0x1,0xf0782640
#if USE_KHEAP
	sched_delete_ready_queues();
f0104825:	e8 e5 00 00 00       	call   f010490f <sched_delete_ready_queues>
	env_ready_queues = kmalloc(sizeof(struct Env_Queue));
f010482a:	83 ec 0c             	sub    $0xc,%esp
f010482d:	6a 10                	push   $0x10
f010482f:	e8 51 30 00 00       	call   f0107885 <kmalloc>
f0104834:	83 c4 10             	add    $0x10,%esp
f0104837:	a3 a8 25 78 f0       	mov    %eax,0xf07825a8
	quantums = kmalloc(num_of_ready_queues * sizeof(uint8)) ;
f010483c:	a0 40 26 78 f0       	mov    0xf0782640,%al
f0104841:	0f b6 c0             	movzbl %al,%eax
f0104844:	83 ec 0c             	sub    $0xc,%esp
f0104847:	50                   	push   %eax
f0104848:	e8 38 30 00 00       	call   f0107885 <kmalloc>
f010484d:	83 c4 10             	add    $0x10,%esp
f0104850:	a3 ec 25 78 f0       	mov    %eax,0xf07825ec
#endif
	quantums[0] = quantum;
f0104855:	a1 ec 25 78 f0       	mov    0xf07825ec,%eax
f010485a:	8a 55 f4             	mov    -0xc(%ebp),%dl
f010485d:	88 10                	mov    %dl,(%eax)
	kclock_set_quantum(quantums[0]);
f010485f:	a1 ec 25 78 f0       	mov    0xf07825ec,%eax
f0104864:	8a 00                	mov    (%eax),%al
f0104866:	0f b6 c0             	movzbl %al,%eax
f0104869:	83 ec 0c             	sub    $0xc,%esp
f010486c:	50                   	push   %eax
f010486d:	e8 08 fa ff ff       	call   f010427a <kclock_set_quantum>
f0104872:	83 c4 10             	add    $0x10,%esp
	init_queue(&(env_ready_queues[0]));
f0104875:	a1 a8 25 78 f0       	mov    0xf07825a8,%eax
f010487a:	83 ec 0c             	sub    $0xc,%esp
f010487d:	50                   	push   %eax
f010487e:	e8 d9 fb ff ff       	call   f010445c <init_queue>
f0104883:	83 c4 10             	add    $0x10,%esp

	//=========================================
	//DON'T CHANGE THESE LINES=================
	scheduler_status = SCH_STOPPED;
f0104886:	c7 05 18 26 78 f0 00 	movl   $0x0,0xf0782618
f010488d:	00 00 00 
	scheduler_method = SCH_RR;
f0104890:	c7 05 0c 26 78 f0 00 	movl   $0x0,0xf078260c
f0104897:	00 00 00 
	//=========================================
	//=========================================
}
f010489a:	90                   	nop
f010489b:	c9                   	leave  
f010489c:	c3                   	ret    

f010489d <sched_init_MLFQ>:

void sched_init_MLFQ(uint8 numOfLevels, uint8 *quantumOfEachLevel)
{
f010489d:	55                   	push   %ebp
f010489e:	89 e5                	mov    %esp,%ebp
f01048a0:	83 ec 18             	sub    $0x18,%esp
f01048a3:	8b 45 08             	mov    0x8(%ebp),%eax
f01048a6:	88 45 f4             	mov    %al,-0xc(%ebp)
#if USE_KHEAP
	//=========================================
	//DON'T CHANGE THESE LINES=================
	sched_delete_ready_queues();
f01048a9:	e8 61 00 00 00       	call   f010490f <sched_delete_ready_queues>

	//=========================================
	//=========================================
	// your code is here, remove the panic and write your code
	panic("sched_init_MLFQ() is not implemented yet...!!");
f01048ae:	83 ec 04             	sub    $0x4,%esp
f01048b1:	68 74 5b 13 f0       	push   $0xf0135b74
f01048b6:	68 d1 00 00 00       	push   $0xd1
f01048bb:	68 eb 5a 13 f0       	push   $0xf0135aeb
f01048c0:	e8 40 b9 ff ff       	call   f0100205 <_panic>

f01048c5 <sched_init>:

}


void sched_init()
{
f01048c5:	55                   	push   %ebp
f01048c6:	89 e5                	mov    %esp,%ebp
f01048c8:	83 ec 08             	sub    $0x8,%esp
	old_pf_counter = 0;
f01048cb:	c7 05 c8 25 78 f0 00 	movl   $0x0,0xf07825c8
f01048d2:	00 00 00 

	sched_init_RR(CLOCK_INTERVAL_IN_MS);
f01048d5:	83 ec 0c             	sub    $0xc,%esp
f01048d8:	6a 0a                	push   $0xa
f01048da:	e8 33 ff ff ff       	call   f0104812 <sched_init_RR>
f01048df:	83 c4 10             	add    $0x10,%esp

	init_queue(&env_new_queue);
f01048e2:	83 ec 0c             	sub    $0xc,%esp
f01048e5:	68 fc 25 78 f0       	push   $0xf07825fc
f01048ea:	e8 6d fb ff ff       	call   f010445c <init_queue>
f01048ef:	83 c4 10             	add    $0x10,%esp
	init_queue(&env_exit_queue);
f01048f2:	83 ec 0c             	sub    $0xc,%esp
f01048f5:	68 b4 25 78 f0       	push   $0xf07825b4
f01048fa:	e8 5d fb ff ff       	call   f010445c <init_queue>
f01048ff:	83 c4 10             	add    $0x10,%esp
	scheduler_status = SCH_STOPPED;
f0104902:	c7 05 18 26 78 f0 00 	movl   $0x0,0xf0782618
f0104909:	00 00 00 
}
f010490c:	90                   	nop
f010490d:	c9                   	leave  
f010490e:	c3                   	ret    

f010490f <sched_delete_ready_queues>:

void sched_delete_ready_queues()
{
f010490f:	55                   	push   %ebp
f0104910:	89 e5                	mov    %esp,%ebp
f0104912:	83 ec 08             	sub    $0x8,%esp
#if USE_KHEAP
	if (env_ready_queues != NULL)
f0104915:	a1 a8 25 78 f0       	mov    0xf07825a8,%eax
f010491a:	85 c0                	test   %eax,%eax
f010491c:	74 11                	je     f010492f <sched_delete_ready_queues+0x20>
		kfree(env_ready_queues);
f010491e:	a1 a8 25 78 f0       	mov    0xf07825a8,%eax
f0104923:	83 ec 0c             	sub    $0xc,%esp
f0104926:	50                   	push   %eax
f0104927:	e8 24 30 00 00       	call   f0107950 <kfree>
f010492c:	83 c4 10             	add    $0x10,%esp
	if (quantums != NULL)
f010492f:	a1 ec 25 78 f0       	mov    0xf07825ec,%eax
f0104934:	85 c0                	test   %eax,%eax
f0104936:	74 11                	je     f0104949 <sched_delete_ready_queues+0x3a>
		kfree(quantums);
f0104938:	a1 ec 25 78 f0       	mov    0xf07825ec,%eax
f010493d:	83 ec 0c             	sub    $0xc,%esp
f0104940:	50                   	push   %eax
f0104941:	e8 0a 30 00 00       	call   f0107950 <kfree>
f0104946:	83 c4 10             	add    $0x10,%esp
#endif
}
f0104949:	90                   	nop
f010494a:	c9                   	leave  
f010494b:	c3                   	ret    

f010494c <sched_insert_ready>:
void sched_insert_ready(struct Env* env)
{
f010494c:	55                   	push   %ebp
f010494d:	89 e5                	mov    %esp,%ebp
f010494f:	83 ec 08             	sub    $0x8,%esp
	if(env != NULL)
f0104952:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0104956:	74 1e                	je     f0104976 <sched_insert_ready+0x2a>
	{
		env->env_status = ENV_READY ;
f0104958:	8b 45 08             	mov    0x8(%ebp),%eax
f010495b:	c7 40 54 01 00 00 00 	movl   $0x1,0x54(%eax)
		enqueue(&(env_ready_queues[0]), env);
f0104962:	a1 a8 25 78 f0       	mov    0xf07825a8,%eax
f0104967:	83 ec 08             	sub    $0x8,%esp
f010496a:	ff 75 08             	pushl  0x8(%ebp)
f010496d:	50                   	push   %eax
f010496e:	e8 2a fb ff ff       	call   f010449d <enqueue>
f0104973:	83 c4 10             	add    $0x10,%esp
	}
}
f0104976:	90                   	nop
f0104977:	c9                   	leave  
f0104978:	c3                   	ret    

f0104979 <sched_remove_ready>:


void sched_remove_ready(struct Env* env)
{
f0104979:	55                   	push   %ebp
f010497a:	89 e5                	mov    %esp,%ebp
f010497c:	83 ec 18             	sub    $0x18,%esp
	if(env != NULL)
f010497f:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0104983:	0f 84 fe 00 00 00    	je     f0104a87 <sched_remove_ready+0x10e>
	{
		for (int i = 0 ; i < num_of_ready_queues ; i++)
f0104989:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0104990:	e9 e1 00 00 00       	jmp    f0104a76 <sched_remove_ready+0xfd>
		{
			struct Env * ptr_env = find_env_in_queue(&(env_ready_queues[i]), env->env_id);
f0104995:	8b 45 08             	mov    0x8(%ebp),%eax
f0104998:	8b 40 4c             	mov    0x4c(%eax),%eax
f010499b:	89 c2                	mov    %eax,%edx
f010499d:	a1 a8 25 78 f0       	mov    0xf07825a8,%eax
f01049a2:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f01049a5:	c1 e1 04             	shl    $0x4,%ecx
f01049a8:	01 c8                	add    %ecx,%eax
f01049aa:	52                   	push   %edx
f01049ab:	50                   	push   %eax
f01049ac:	e8 ee fc ff ff       	call   f010469f <find_env_in_queue>
f01049b1:	83 c4 08             	add    $0x8,%esp
f01049b4:	89 45 f0             	mov    %eax,-0x10(%ebp)
			if (ptr_env != NULL)
f01049b7:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f01049bb:	0f 84 b2 00 00 00    	je     f0104a73 <sched_remove_ready+0xfa>
			{
				LIST_REMOVE(&(env_ready_queues[i]), env);
f01049c1:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f01049c5:	75 17                	jne    f01049de <sched_remove_ready+0x65>
f01049c7:	83 ec 04             	sub    $0x4,%esp
f01049ca:	68 1f 5b 13 f0       	push   $0xf0135b1f
f01049cf:	68 0b 01 00 00       	push   $0x10b
f01049d4:	68 eb 5a 13 f0       	push   $0xf0135aeb
f01049d9:	e8 27 b8 ff ff       	call   f0100205 <_panic>
f01049de:	8b 45 08             	mov    0x8(%ebp),%eax
f01049e1:	8b 40 44             	mov    0x44(%eax),%eax
f01049e4:	85 c0                	test   %eax,%eax
f01049e6:	74 11                	je     f01049f9 <sched_remove_ready+0x80>
f01049e8:	8b 45 08             	mov    0x8(%ebp),%eax
f01049eb:	8b 40 44             	mov    0x44(%eax),%eax
f01049ee:	8b 55 08             	mov    0x8(%ebp),%edx
f01049f1:	8b 52 48             	mov    0x48(%edx),%edx
f01049f4:	89 50 48             	mov    %edx,0x48(%eax)
f01049f7:	eb 16                	jmp    f0104a0f <sched_remove_ready+0x96>
f01049f9:	a1 a8 25 78 f0       	mov    0xf07825a8,%eax
f01049fe:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0104a01:	c1 e2 04             	shl    $0x4,%edx
f0104a04:	01 c2                	add    %eax,%edx
f0104a06:	8b 45 08             	mov    0x8(%ebp),%eax
f0104a09:	8b 40 48             	mov    0x48(%eax),%eax
f0104a0c:	89 42 04             	mov    %eax,0x4(%edx)
f0104a0f:	8b 45 08             	mov    0x8(%ebp),%eax
f0104a12:	8b 40 48             	mov    0x48(%eax),%eax
f0104a15:	85 c0                	test   %eax,%eax
f0104a17:	74 11                	je     f0104a2a <sched_remove_ready+0xb1>
f0104a19:	8b 45 08             	mov    0x8(%ebp),%eax
f0104a1c:	8b 40 48             	mov    0x48(%eax),%eax
f0104a1f:	8b 55 08             	mov    0x8(%ebp),%edx
f0104a22:	8b 52 44             	mov    0x44(%edx),%edx
f0104a25:	89 50 44             	mov    %edx,0x44(%eax)
f0104a28:	eb 15                	jmp    f0104a3f <sched_remove_ready+0xc6>
f0104a2a:	a1 a8 25 78 f0       	mov    0xf07825a8,%eax
f0104a2f:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0104a32:	c1 e2 04             	shl    $0x4,%edx
f0104a35:	01 c2                	add    %eax,%edx
f0104a37:	8b 45 08             	mov    0x8(%ebp),%eax
f0104a3a:	8b 40 44             	mov    0x44(%eax),%eax
f0104a3d:	89 02                	mov    %eax,(%edx)
f0104a3f:	8b 45 08             	mov    0x8(%ebp),%eax
f0104a42:	c7 40 44 00 00 00 00 	movl   $0x0,0x44(%eax)
f0104a49:	8b 45 08             	mov    0x8(%ebp),%eax
f0104a4c:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f0104a53:	a1 a8 25 78 f0       	mov    0xf07825a8,%eax
f0104a58:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0104a5b:	c1 e2 04             	shl    $0x4,%edx
f0104a5e:	01 d0                	add    %edx,%eax
f0104a60:	8b 50 0c             	mov    0xc(%eax),%edx
f0104a63:	4a                   	dec    %edx
f0104a64:	89 50 0c             	mov    %edx,0xc(%eax)
				env->env_status = ENV_UNKNOWN;
f0104a67:	8b 45 08             	mov    0x8(%ebp),%eax
f0104a6a:	c7 40 54 06 00 00 00 	movl   $0x6,0x54(%eax)
				return;
f0104a71:	eb 14                	jmp    f0104a87 <sched_remove_ready+0x10e>

void sched_remove_ready(struct Env* env)
{
	if(env != NULL)
	{
		for (int i = 0 ; i < num_of_ready_queues ; i++)
f0104a73:	ff 45 f4             	incl   -0xc(%ebp)
f0104a76:	a0 40 26 78 f0       	mov    0xf0782640,%al
f0104a7b:	0f b6 c0             	movzbl %al,%eax
f0104a7e:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0104a81:	0f 8f 0e ff ff ff    	jg     f0104995 <sched_remove_ready+0x1c>
				env->env_status = ENV_UNKNOWN;
				return;
			}
		}
	}
}
f0104a87:	c9                   	leave  
f0104a88:	c3                   	ret    

f0104a89 <sched_insert_new>:

void sched_insert_new(struct Env* env)
{
f0104a89:	55                   	push   %ebp
f0104a8a:	89 e5                	mov    %esp,%ebp
f0104a8c:	83 ec 08             	sub    $0x8,%esp
	if(env != NULL)
f0104a8f:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0104a93:	74 1d                	je     f0104ab2 <sched_insert_new+0x29>
	{
		env->env_status = ENV_NEW ;
f0104a95:	8b 45 08             	mov    0x8(%ebp),%eax
f0104a98:	c7 40 54 04 00 00 00 	movl   $0x4,0x54(%eax)
		enqueue(&env_new_queue, env);
f0104a9f:	83 ec 08             	sub    $0x8,%esp
f0104aa2:	ff 75 08             	pushl  0x8(%ebp)
f0104aa5:	68 fc 25 78 f0       	push   $0xf07825fc
f0104aaa:	e8 ee f9 ff ff       	call   f010449d <enqueue>
f0104aaf:	83 c4 10             	add    $0x10,%esp
	}
}
f0104ab2:	90                   	nop
f0104ab3:	c9                   	leave  
f0104ab4:	c3                   	ret    

f0104ab5 <sched_remove_new>:
void sched_remove_new(struct Env* env)
{
f0104ab5:	55                   	push   %ebp
f0104ab6:	89 e5                	mov    %esp,%ebp
f0104ab8:	83 ec 08             	sub    $0x8,%esp
	if(env != NULL)
f0104abb:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0104abf:	0f 84 92 00 00 00    	je     f0104b57 <sched_remove_new+0xa2>
	{
		LIST_REMOVE(&env_new_queue, env) ;
f0104ac5:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0104ac9:	75 17                	jne    f0104ae2 <sched_remove_new+0x2d>
f0104acb:	83 ec 04             	sub    $0x4,%esp
f0104ace:	68 1f 5b 13 f0       	push   $0xf0135b1f
f0104ad3:	68 1f 01 00 00       	push   $0x11f
f0104ad8:	68 eb 5a 13 f0       	push   $0xf0135aeb
f0104add:	e8 23 b7 ff ff       	call   f0100205 <_panic>
f0104ae2:	8b 45 08             	mov    0x8(%ebp),%eax
f0104ae5:	8b 40 44             	mov    0x44(%eax),%eax
f0104ae8:	85 c0                	test   %eax,%eax
f0104aea:	74 11                	je     f0104afd <sched_remove_new+0x48>
f0104aec:	8b 45 08             	mov    0x8(%ebp),%eax
f0104aef:	8b 40 44             	mov    0x44(%eax),%eax
f0104af2:	8b 55 08             	mov    0x8(%ebp),%edx
f0104af5:	8b 52 48             	mov    0x48(%edx),%edx
f0104af8:	89 50 48             	mov    %edx,0x48(%eax)
f0104afb:	eb 0b                	jmp    f0104b08 <sched_remove_new+0x53>
f0104afd:	8b 45 08             	mov    0x8(%ebp),%eax
f0104b00:	8b 40 48             	mov    0x48(%eax),%eax
f0104b03:	a3 00 26 78 f0       	mov    %eax,0xf0782600
f0104b08:	8b 45 08             	mov    0x8(%ebp),%eax
f0104b0b:	8b 40 48             	mov    0x48(%eax),%eax
f0104b0e:	85 c0                	test   %eax,%eax
f0104b10:	74 11                	je     f0104b23 <sched_remove_new+0x6e>
f0104b12:	8b 45 08             	mov    0x8(%ebp),%eax
f0104b15:	8b 40 48             	mov    0x48(%eax),%eax
f0104b18:	8b 55 08             	mov    0x8(%ebp),%edx
f0104b1b:	8b 52 44             	mov    0x44(%edx),%edx
f0104b1e:	89 50 44             	mov    %edx,0x44(%eax)
f0104b21:	eb 0b                	jmp    f0104b2e <sched_remove_new+0x79>
f0104b23:	8b 45 08             	mov    0x8(%ebp),%eax
f0104b26:	8b 40 44             	mov    0x44(%eax),%eax
f0104b29:	a3 fc 25 78 f0       	mov    %eax,0xf07825fc
f0104b2e:	8b 45 08             	mov    0x8(%ebp),%eax
f0104b31:	c7 40 44 00 00 00 00 	movl   $0x0,0x44(%eax)
f0104b38:	8b 45 08             	mov    0x8(%ebp),%eax
f0104b3b:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f0104b42:	a1 08 26 78 f0       	mov    0xf0782608,%eax
f0104b47:	48                   	dec    %eax
f0104b48:	a3 08 26 78 f0       	mov    %eax,0xf0782608
		env->env_status = ENV_UNKNOWN;
f0104b4d:	8b 45 08             	mov    0x8(%ebp),%eax
f0104b50:	c7 40 54 06 00 00 00 	movl   $0x6,0x54(%eax)
	}
}
f0104b57:	90                   	nop
f0104b58:	c9                   	leave  
f0104b59:	c3                   	ret    

f0104b5a <sched_insert_exit>:

void sched_insert_exit(struct Env* env)
{
f0104b5a:	55                   	push   %ebp
f0104b5b:	89 e5                	mov    %esp,%ebp
f0104b5d:	83 ec 08             	sub    $0x8,%esp
	if(env != NULL)
f0104b60:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0104b64:	74 34                	je     f0104b9a <sched_insert_exit+0x40>
	{
		if(isBufferingEnabled()) {cleanup_buffers(env);}
f0104b66:	e8 9b 92 00 00       	call   f010de06 <isBufferingEnabled>
f0104b6b:	84 c0                	test   %al,%al
f0104b6d:	74 0e                	je     f0104b7d <sched_insert_exit+0x23>
f0104b6f:	83 ec 0c             	sub    $0xc,%esp
f0104b72:	ff 75 08             	pushl  0x8(%ebp)
f0104b75:	e8 60 63 00 00       	call   f010aeda <cleanup_buffers>
f0104b7a:	83 c4 10             	add    $0x10,%esp
		env->env_status = ENV_EXIT ;
f0104b7d:	8b 45 08             	mov    0x8(%ebp),%eax
f0104b80:	c7 40 54 05 00 00 00 	movl   $0x5,0x54(%eax)
		enqueue(&env_exit_queue, env);
f0104b87:	83 ec 08             	sub    $0x8,%esp
f0104b8a:	ff 75 08             	pushl  0x8(%ebp)
f0104b8d:	68 b4 25 78 f0       	push   $0xf07825b4
f0104b92:	e8 06 f9 ff ff       	call   f010449d <enqueue>
f0104b97:	83 c4 10             	add    $0x10,%esp
	}
}
f0104b9a:	90                   	nop
f0104b9b:	c9                   	leave  
f0104b9c:	c3                   	ret    

f0104b9d <sched_remove_exit>:
void sched_remove_exit(struct Env* env)
{
f0104b9d:	55                   	push   %ebp
f0104b9e:	89 e5                	mov    %esp,%ebp
f0104ba0:	83 ec 08             	sub    $0x8,%esp
	if(env != NULL)
f0104ba3:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0104ba7:	0f 84 92 00 00 00    	je     f0104c3f <sched_remove_exit+0xa2>
	{
		LIST_REMOVE(&env_exit_queue, env) ;
f0104bad:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0104bb1:	75 17                	jne    f0104bca <sched_remove_exit+0x2d>
f0104bb3:	83 ec 04             	sub    $0x4,%esp
f0104bb6:	68 1f 5b 13 f0       	push   $0xf0135b1f
f0104bbb:	68 31 01 00 00       	push   $0x131
f0104bc0:	68 eb 5a 13 f0       	push   $0xf0135aeb
f0104bc5:	e8 3b b6 ff ff       	call   f0100205 <_panic>
f0104bca:	8b 45 08             	mov    0x8(%ebp),%eax
f0104bcd:	8b 40 44             	mov    0x44(%eax),%eax
f0104bd0:	85 c0                	test   %eax,%eax
f0104bd2:	74 11                	je     f0104be5 <sched_remove_exit+0x48>
f0104bd4:	8b 45 08             	mov    0x8(%ebp),%eax
f0104bd7:	8b 40 44             	mov    0x44(%eax),%eax
f0104bda:	8b 55 08             	mov    0x8(%ebp),%edx
f0104bdd:	8b 52 48             	mov    0x48(%edx),%edx
f0104be0:	89 50 48             	mov    %edx,0x48(%eax)
f0104be3:	eb 0b                	jmp    f0104bf0 <sched_remove_exit+0x53>
f0104be5:	8b 45 08             	mov    0x8(%ebp),%eax
f0104be8:	8b 40 48             	mov    0x48(%eax),%eax
f0104beb:	a3 b8 25 78 f0       	mov    %eax,0xf07825b8
f0104bf0:	8b 45 08             	mov    0x8(%ebp),%eax
f0104bf3:	8b 40 48             	mov    0x48(%eax),%eax
f0104bf6:	85 c0                	test   %eax,%eax
f0104bf8:	74 11                	je     f0104c0b <sched_remove_exit+0x6e>
f0104bfa:	8b 45 08             	mov    0x8(%ebp),%eax
f0104bfd:	8b 40 48             	mov    0x48(%eax),%eax
f0104c00:	8b 55 08             	mov    0x8(%ebp),%edx
f0104c03:	8b 52 44             	mov    0x44(%edx),%edx
f0104c06:	89 50 44             	mov    %edx,0x44(%eax)
f0104c09:	eb 0b                	jmp    f0104c16 <sched_remove_exit+0x79>
f0104c0b:	8b 45 08             	mov    0x8(%ebp),%eax
f0104c0e:	8b 40 44             	mov    0x44(%eax),%eax
f0104c11:	a3 b4 25 78 f0       	mov    %eax,0xf07825b4
f0104c16:	8b 45 08             	mov    0x8(%ebp),%eax
f0104c19:	c7 40 44 00 00 00 00 	movl   $0x0,0x44(%eax)
f0104c20:	8b 45 08             	mov    0x8(%ebp),%eax
f0104c23:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f0104c2a:	a1 c0 25 78 f0       	mov    0xf07825c0,%eax
f0104c2f:	48                   	dec    %eax
f0104c30:	a3 c0 25 78 f0       	mov    %eax,0xf07825c0
		env->env_status = ENV_UNKNOWN;
f0104c35:	8b 45 08             	mov    0x8(%ebp),%eax
f0104c38:	c7 40 54 06 00 00 00 	movl   $0x6,0x54(%eax)
	}
}
f0104c3f:	90                   	nop
f0104c40:	c9                   	leave  
f0104c41:	c3                   	ret    

f0104c42 <sched_print_all>:

void sched_print_all()
{
f0104c42:	55                   	push   %ebp
f0104c43:	89 e5                	mov    %esp,%ebp
f0104c45:	83 ec 18             	sub    $0x18,%esp
	struct Env* ptr_env ;
	if (!LIST_EMPTY(&env_new_queue))
f0104c48:	a1 fc 25 78 f0       	mov    0xf07825fc,%eax
f0104c4d:	85 c0                	test   %eax,%eax
f0104c4f:	74 6c                	je     f0104cbd <sched_print_all+0x7b>
	{
		cprintf("\nThe processes in NEW queue are:\n");
f0104c51:	83 ec 0c             	sub    $0xc,%esp
f0104c54:	68 a4 5b 13 f0       	push   $0xf0135ba4
f0104c59:	e8 b0 c0 ff ff       	call   f0100d0e <cprintf>
f0104c5e:	83 c4 10             	add    $0x10,%esp
		LIST_FOREACH(ptr_env, &env_new_queue)
f0104c61:	a1 fc 25 78 f0       	mov    0xf07825fc,%eax
f0104c66:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0104c69:	eb 29                	jmp    f0104c94 <sched_print_all+0x52>
		{
			cprintf("	[%d] %s\n", ptr_env->env_id, ptr_env->prog_name);
f0104c6b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104c6e:	8d 90 5c 05 00 00    	lea    0x55c(%eax),%edx
f0104c74:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104c77:	8b 40 4c             	mov    0x4c(%eax),%eax
f0104c7a:	83 ec 04             	sub    $0x4,%esp
f0104c7d:	52                   	push   %edx
f0104c7e:	50                   	push   %eax
f0104c7f:	68 c6 5b 13 f0       	push   $0xf0135bc6
f0104c84:	e8 85 c0 ff ff       	call   f0100d0e <cprintf>
f0104c89:	83 c4 10             	add    $0x10,%esp
{
	struct Env* ptr_env ;
	if (!LIST_EMPTY(&env_new_queue))
	{
		cprintf("\nThe processes in NEW queue are:\n");
		LIST_FOREACH(ptr_env, &env_new_queue)
f0104c8c:	a1 04 26 78 f0       	mov    0xf0782604,%eax
f0104c91:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0104c94:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0104c98:	74 08                	je     f0104ca2 <sched_print_all+0x60>
f0104c9a:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104c9d:	8b 40 44             	mov    0x44(%eax),%eax
f0104ca0:	eb 05                	jmp    f0104ca7 <sched_print_all+0x65>
f0104ca2:	b8 00 00 00 00       	mov    $0x0,%eax
f0104ca7:	a3 04 26 78 f0       	mov    %eax,0xf0782604
f0104cac:	a1 04 26 78 f0       	mov    0xf0782604,%eax
f0104cb1:	85 c0                	test   %eax,%eax
f0104cb3:	75 b6                	jne    f0104c6b <sched_print_all+0x29>
f0104cb5:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0104cb9:	75 b0                	jne    f0104c6b <sched_print_all+0x29>
f0104cbb:	eb 10                	jmp    f0104ccd <sched_print_all+0x8b>
			cprintf("	[%d] %s\n", ptr_env->env_id, ptr_env->prog_name);
		}
	}
	else
	{
		cprintf("\nNo processes in NEW queue\n");
f0104cbd:	83 ec 0c             	sub    $0xc,%esp
f0104cc0:	68 d0 5b 13 f0       	push   $0xf0135bd0
f0104cc5:	e8 44 c0 ff ff       	call   f0100d0e <cprintf>
f0104cca:	83 c4 10             	add    $0x10,%esp
	}
	cprintf("================================================\n");
f0104ccd:	83 ec 0c             	sub    $0xc,%esp
f0104cd0:	68 ec 5b 13 f0       	push   $0xf0135bec
f0104cd5:	e8 34 c0 ff ff       	call   f0100d0e <cprintf>
f0104cda:	83 c4 10             	add    $0x10,%esp
	for (int i = 0 ; i < num_of_ready_queues ; i++)
f0104cdd:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f0104ce4:	e9 ca 00 00 00       	jmp    f0104db3 <sched_print_all+0x171>
	{
		if (!LIST_EMPTY(&(env_ready_queues[i])))
f0104ce9:	a1 a8 25 78 f0       	mov    0xf07825a8,%eax
f0104cee:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0104cf1:	c1 e2 04             	shl    $0x4,%edx
f0104cf4:	01 d0                	add    %edx,%eax
f0104cf6:	8b 00                	mov    (%eax),%eax
f0104cf8:	85 c0                	test   %eax,%eax
f0104cfa:	0f 84 8d 00 00 00    	je     f0104d8d <sched_print_all+0x14b>
		{
			cprintf("The processes in READY queue #%d are:\n", i);
f0104d00:	83 ec 08             	sub    $0x8,%esp
f0104d03:	ff 75 f0             	pushl  -0x10(%ebp)
f0104d06:	68 20 5c 13 f0       	push   $0xf0135c20
f0104d0b:	e8 fe bf ff ff       	call   f0100d0e <cprintf>
f0104d10:	83 c4 10             	add    $0x10,%esp
			LIST_FOREACH(ptr_env, &(env_ready_queues[i]))
f0104d13:	a1 a8 25 78 f0       	mov    0xf07825a8,%eax
f0104d18:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0104d1b:	c1 e2 04             	shl    $0x4,%edx
f0104d1e:	01 d0                	add    %edx,%eax
f0104d20:	8b 00                	mov    (%eax),%eax
f0104d22:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0104d25:	eb 34                	jmp    f0104d5b <sched_print_all+0x119>
			{
				cprintf("	[%d] %s\n", ptr_env->env_id, ptr_env->prog_name);
f0104d27:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104d2a:	8d 90 5c 05 00 00    	lea    0x55c(%eax),%edx
f0104d30:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104d33:	8b 40 4c             	mov    0x4c(%eax),%eax
f0104d36:	83 ec 04             	sub    $0x4,%esp
f0104d39:	52                   	push   %edx
f0104d3a:	50                   	push   %eax
f0104d3b:	68 c6 5b 13 f0       	push   $0xf0135bc6
f0104d40:	e8 c9 bf ff ff       	call   f0100d0e <cprintf>
f0104d45:	83 c4 10             	add    $0x10,%esp
	for (int i = 0 ; i < num_of_ready_queues ; i++)
	{
		if (!LIST_EMPTY(&(env_ready_queues[i])))
		{
			cprintf("The processes in READY queue #%d are:\n", i);
			LIST_FOREACH(ptr_env, &(env_ready_queues[i]))
f0104d48:	a1 a8 25 78 f0       	mov    0xf07825a8,%eax
f0104d4d:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0104d50:	c1 e2 04             	shl    $0x4,%edx
f0104d53:	01 d0                	add    %edx,%eax
f0104d55:	8b 40 08             	mov    0x8(%eax),%eax
f0104d58:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0104d5b:	a1 a8 25 78 f0       	mov    0xf07825a8,%eax
f0104d60:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0104d63:	c1 e2 04             	shl    $0x4,%edx
f0104d66:	01 d0                	add    %edx,%eax
f0104d68:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0104d6c:	74 08                	je     f0104d76 <sched_print_all+0x134>
f0104d6e:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0104d71:	8b 52 44             	mov    0x44(%edx),%edx
f0104d74:	eb 05                	jmp    f0104d7b <sched_print_all+0x139>
f0104d76:	ba 00 00 00 00       	mov    $0x0,%edx
f0104d7b:	89 50 08             	mov    %edx,0x8(%eax)
f0104d7e:	8b 40 08             	mov    0x8(%eax),%eax
f0104d81:	85 c0                	test   %eax,%eax
f0104d83:	75 a2                	jne    f0104d27 <sched_print_all+0xe5>
f0104d85:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0104d89:	75 9c                	jne    f0104d27 <sched_print_all+0xe5>
f0104d8b:	eb 13                	jmp    f0104da0 <sched_print_all+0x15e>
				cprintf("	[%d] %s\n", ptr_env->env_id, ptr_env->prog_name);
			}
		}
		else
		{
			cprintf("No processes in READY queue #%d\n", i);
f0104d8d:	83 ec 08             	sub    $0x8,%esp
f0104d90:	ff 75 f0             	pushl  -0x10(%ebp)
f0104d93:	68 48 5c 13 f0       	push   $0xf0135c48
f0104d98:	e8 71 bf ff ff       	call   f0100d0e <cprintf>
f0104d9d:	83 c4 10             	add    $0x10,%esp
		}
		cprintf("================================================\n");
f0104da0:	83 ec 0c             	sub    $0xc,%esp
f0104da3:	68 ec 5b 13 f0       	push   $0xf0135bec
f0104da8:	e8 61 bf ff ff       	call   f0100d0e <cprintf>
f0104dad:	83 c4 10             	add    $0x10,%esp
	else
	{
		cprintf("\nNo processes in NEW queue\n");
	}
	cprintf("================================================\n");
	for (int i = 0 ; i < num_of_ready_queues ; i++)
f0104db0:	ff 45 f0             	incl   -0x10(%ebp)
f0104db3:	a0 40 26 78 f0       	mov    0xf0782640,%al
f0104db8:	0f b6 c0             	movzbl %al,%eax
f0104dbb:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0104dbe:	0f 8f 25 ff ff ff    	jg     f0104ce9 <sched_print_all+0xa7>
		{
			cprintf("No processes in READY queue #%d\n", i);
		}
		cprintf("================================================\n");
	}
	if (!LIST_EMPTY(&env_exit_queue))
f0104dc4:	a1 b4 25 78 f0       	mov    0xf07825b4,%eax
f0104dc9:	85 c0                	test   %eax,%eax
f0104dcb:	74 6c                	je     f0104e39 <sched_print_all+0x1f7>
	{
		cprintf("The processes in EXIT queue are:\n");
f0104dcd:	83 ec 0c             	sub    $0xc,%esp
f0104dd0:	68 6c 5c 13 f0       	push   $0xf0135c6c
f0104dd5:	e8 34 bf ff ff       	call   f0100d0e <cprintf>
f0104dda:	83 c4 10             	add    $0x10,%esp
		LIST_FOREACH(ptr_env, &env_exit_queue)
f0104ddd:	a1 b4 25 78 f0       	mov    0xf07825b4,%eax
f0104de2:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0104de5:	eb 29                	jmp    f0104e10 <sched_print_all+0x1ce>
		{
			cprintf("	[%d] %s\n", ptr_env->env_id, ptr_env->prog_name);
f0104de7:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104dea:	8d 90 5c 05 00 00    	lea    0x55c(%eax),%edx
f0104df0:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104df3:	8b 40 4c             	mov    0x4c(%eax),%eax
f0104df6:	83 ec 04             	sub    $0x4,%esp
f0104df9:	52                   	push   %edx
f0104dfa:	50                   	push   %eax
f0104dfb:	68 c6 5b 13 f0       	push   $0xf0135bc6
f0104e00:	e8 09 bf ff ff       	call   f0100d0e <cprintf>
f0104e05:	83 c4 10             	add    $0x10,%esp
		cprintf("================================================\n");
	}
	if (!LIST_EMPTY(&env_exit_queue))
	{
		cprintf("The processes in EXIT queue are:\n");
		LIST_FOREACH(ptr_env, &env_exit_queue)
f0104e08:	a1 bc 25 78 f0       	mov    0xf07825bc,%eax
f0104e0d:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0104e10:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0104e14:	74 08                	je     f0104e1e <sched_print_all+0x1dc>
f0104e16:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104e19:	8b 40 44             	mov    0x44(%eax),%eax
f0104e1c:	eb 05                	jmp    f0104e23 <sched_print_all+0x1e1>
f0104e1e:	b8 00 00 00 00       	mov    $0x0,%eax
f0104e23:	a3 bc 25 78 f0       	mov    %eax,0xf07825bc
f0104e28:	a1 bc 25 78 f0       	mov    0xf07825bc,%eax
f0104e2d:	85 c0                	test   %eax,%eax
f0104e2f:	75 b6                	jne    f0104de7 <sched_print_all+0x1a5>
f0104e31:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0104e35:	75 b0                	jne    f0104de7 <sched_print_all+0x1a5>
	}
	else
	{
		cprintf("No processes in EXIT queue\n");
	}
}
f0104e37:	eb 10                	jmp    f0104e49 <sched_print_all+0x207>
			cprintf("	[%d] %s\n", ptr_env->env_id, ptr_env->prog_name);
		}
	}
	else
	{
		cprintf("No processes in EXIT queue\n");
f0104e39:	83 ec 0c             	sub    $0xc,%esp
f0104e3c:	68 8e 5c 13 f0       	push   $0xf0135c8e
f0104e41:	e8 c8 be ff ff       	call   f0100d0e <cprintf>
f0104e46:	83 c4 10             	add    $0x10,%esp
	}
}
f0104e49:	90                   	nop
f0104e4a:	c9                   	leave  
f0104e4b:	c3                   	ret    

f0104e4c <sched_run_all>:

void sched_run_all()
{
f0104e4c:	55                   	push   %ebp
f0104e4d:	89 e5                	mov    %esp,%ebp
f0104e4f:	83 ec 18             	sub    $0x18,%esp
	struct Env* ptr_env=NULL;
f0104e52:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	LIST_FOREACH(ptr_env, &env_new_queue)
f0104e59:	a1 fc 25 78 f0       	mov    0xf07825fc,%eax
f0104e5e:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0104e61:	eb 24                	jmp    f0104e87 <sched_run_all+0x3b>
	{
		sched_remove_new(ptr_env);
f0104e63:	83 ec 0c             	sub    $0xc,%esp
f0104e66:	ff 75 f4             	pushl  -0xc(%ebp)
f0104e69:	e8 47 fc ff ff       	call   f0104ab5 <sched_remove_new>
f0104e6e:	83 c4 10             	add    $0x10,%esp
		sched_insert_ready(ptr_env);
f0104e71:	83 ec 0c             	sub    $0xc,%esp
f0104e74:	ff 75 f4             	pushl  -0xc(%ebp)
f0104e77:	e8 d0 fa ff ff       	call   f010494c <sched_insert_ready>
f0104e7c:	83 c4 10             	add    $0x10,%esp
}

void sched_run_all()
{
	struct Env* ptr_env=NULL;
	LIST_FOREACH(ptr_env, &env_new_queue)
f0104e7f:	a1 04 26 78 f0       	mov    0xf0782604,%eax
f0104e84:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0104e87:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0104e8b:	74 08                	je     f0104e95 <sched_run_all+0x49>
f0104e8d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104e90:	8b 40 44             	mov    0x44(%eax),%eax
f0104e93:	eb 05                	jmp    f0104e9a <sched_run_all+0x4e>
f0104e95:	b8 00 00 00 00       	mov    $0x0,%eax
f0104e9a:	a3 04 26 78 f0       	mov    %eax,0xf0782604
f0104e9f:	a1 04 26 78 f0       	mov    0xf0782604,%eax
f0104ea4:	85 c0                	test   %eax,%eax
f0104ea6:	75 bb                	jne    f0104e63 <sched_run_all+0x17>
f0104ea8:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0104eac:	75 b5                	jne    f0104e63 <sched_run_all+0x17>
	{
		sched_remove_new(ptr_env);
		sched_insert_ready(ptr_env);
	}
	/*2015*///if scheduler not run yet, then invoke it!
	if (scheduler_status == SCH_STOPPED)
f0104eae:	a1 18 26 78 f0       	mov    0xf0782618,%eax
f0104eb3:	85 c0                	test   %eax,%eax
f0104eb5:	75 05                	jne    f0104ebc <sched_run_all+0x70>
		fos_scheduler();
f0104eb7:	e8 6a f8 ff ff       	call   f0104726 <fos_scheduler>
}
f0104ebc:	90                   	nop
f0104ebd:	c9                   	leave  
f0104ebe:	c3                   	ret    

f0104ebf <sched_kill_all>:

void sched_kill_all()
{
f0104ebf:	55                   	push   %ebp
f0104ec0:	89 e5                	mov    %esp,%ebp
f0104ec2:	83 ec 18             	sub    $0x18,%esp
	struct Env* ptr_env ;
	if (!LIST_EMPTY(&env_new_queue))
f0104ec5:	a1 fc 25 78 f0       	mov    0xf07825fc,%eax
f0104eca:	85 c0                	test   %eax,%eax
f0104ecc:	0f 84 98 00 00 00    	je     f0104f6a <sched_kill_all+0xab>
	{
		cprintf("\nKILLING the processes in the NEW queue...\n");
f0104ed2:	83 ec 0c             	sub    $0xc,%esp
f0104ed5:	68 ac 5c 13 f0       	push   $0xf0135cac
f0104eda:	e8 2f be ff ff       	call   f0100d0e <cprintf>
f0104edf:	83 c4 10             	add    $0x10,%esp
		LIST_FOREACH(ptr_env, &env_new_queue)
f0104ee2:	a1 fc 25 78 f0       	mov    0xf07825fc,%eax
f0104ee7:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0104eea:	eb 55                	jmp    f0104f41 <sched_kill_all+0x82>
		{
			cprintf("	killing[%d] %s...", ptr_env->env_id, ptr_env->prog_name);
f0104eec:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104eef:	8d 90 5c 05 00 00    	lea    0x55c(%eax),%edx
f0104ef5:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104ef8:	8b 40 4c             	mov    0x4c(%eax),%eax
f0104efb:	83 ec 04             	sub    $0x4,%esp
f0104efe:	52                   	push   %edx
f0104eff:	50                   	push   %eax
f0104f00:	68 d8 5c 13 f0       	push   $0xf0135cd8
f0104f05:	e8 04 be ff ff       	call   f0100d0e <cprintf>
f0104f0a:	83 c4 10             	add    $0x10,%esp
			sched_remove_new(ptr_env);
f0104f0d:	83 ec 0c             	sub    $0xc,%esp
f0104f10:	ff 75 f4             	pushl  -0xc(%ebp)
f0104f13:	e8 9d fb ff ff       	call   f0104ab5 <sched_remove_new>
f0104f18:	83 c4 10             	add    $0x10,%esp
			env_free(ptr_env);
f0104f1b:	83 ec 0c             	sub    $0xc,%esp
f0104f1e:	ff 75 f4             	pushl  -0xc(%ebp)
f0104f21:	e8 9a 4b 00 00       	call   f0109ac0 <env_free>
f0104f26:	83 c4 10             	add    $0x10,%esp
			cprintf("DONE\n");
f0104f29:	83 ec 0c             	sub    $0xc,%esp
f0104f2c:	68 eb 5c 13 f0       	push   $0xf0135ceb
f0104f31:	e8 d8 bd ff ff       	call   f0100d0e <cprintf>
f0104f36:	83 c4 10             	add    $0x10,%esp
{
	struct Env* ptr_env ;
	if (!LIST_EMPTY(&env_new_queue))
	{
		cprintf("\nKILLING the processes in the NEW queue...\n");
		LIST_FOREACH(ptr_env, &env_new_queue)
f0104f39:	a1 04 26 78 f0       	mov    0xf0782604,%eax
f0104f3e:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0104f41:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0104f45:	74 08                	je     f0104f4f <sched_kill_all+0x90>
f0104f47:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104f4a:	8b 40 44             	mov    0x44(%eax),%eax
f0104f4d:	eb 05                	jmp    f0104f54 <sched_kill_all+0x95>
f0104f4f:	b8 00 00 00 00       	mov    $0x0,%eax
f0104f54:	a3 04 26 78 f0       	mov    %eax,0xf0782604
f0104f59:	a1 04 26 78 f0       	mov    0xf0782604,%eax
f0104f5e:	85 c0                	test   %eax,%eax
f0104f60:	75 8a                	jne    f0104eec <sched_kill_all+0x2d>
f0104f62:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0104f66:	75 84                	jne    f0104eec <sched_kill_all+0x2d>
f0104f68:	eb 10                	jmp    f0104f7a <sched_kill_all+0xbb>
			cprintf("DONE\n");
		}
	}
	else
	{
		cprintf("No processes in NEW queue\n");
f0104f6a:	83 ec 0c             	sub    $0xc,%esp
f0104f6d:	68 f1 5c 13 f0       	push   $0xf0135cf1
f0104f72:	e8 97 bd ff ff       	call   f0100d0e <cprintf>
f0104f77:	83 c4 10             	add    $0x10,%esp
	}
	cprintf("================================================\n");
f0104f7a:	83 ec 0c             	sub    $0xc,%esp
f0104f7d:	68 ec 5b 13 f0       	push   $0xf0135bec
f0104f82:	e8 87 bd ff ff       	call   f0100d0e <cprintf>
f0104f87:	83 c4 10             	add    $0x10,%esp
	for (int i = 0 ; i < num_of_ready_queues ; i++)
f0104f8a:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f0104f91:	e9 99 01 00 00       	jmp    f010512f <sched_kill_all+0x270>
	{
		if (!LIST_EMPTY(&(env_ready_queues[i])))
f0104f96:	a1 a8 25 78 f0       	mov    0xf07825a8,%eax
f0104f9b:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0104f9e:	c1 e2 04             	shl    $0x4,%edx
f0104fa1:	01 d0                	add    %edx,%eax
f0104fa3:	8b 00                	mov    (%eax),%eax
f0104fa5:	85 c0                	test   %eax,%eax
f0104fa7:	0f 84 5c 01 00 00    	je     f0105109 <sched_kill_all+0x24a>
		{
			cprintf("KILLING the processes in the READY queue #%d...\n", i);
f0104fad:	83 ec 08             	sub    $0x8,%esp
f0104fb0:	ff 75 f0             	pushl  -0x10(%ebp)
f0104fb3:	68 0c 5d 13 f0       	push   $0xf0135d0c
f0104fb8:	e8 51 bd ff ff       	call   f0100d0e <cprintf>
f0104fbd:	83 c4 10             	add    $0x10,%esp
			LIST_FOREACH(ptr_env, &(env_ready_queues[i]))
f0104fc0:	a1 a8 25 78 f0       	mov    0xf07825a8,%eax
f0104fc5:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0104fc8:	c1 e2 04             	shl    $0x4,%edx
f0104fcb:	01 d0                	add    %edx,%eax
f0104fcd:	8b 00                	mov    (%eax),%eax
f0104fcf:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0104fd2:	e9 f8 00 00 00       	jmp    f01050cf <sched_kill_all+0x210>
			{
				cprintf("	killing[%d] %s...", ptr_env->env_id, ptr_env->prog_name);
f0104fd7:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104fda:	8d 90 5c 05 00 00    	lea    0x55c(%eax),%edx
f0104fe0:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104fe3:	8b 40 4c             	mov    0x4c(%eax),%eax
f0104fe6:	83 ec 04             	sub    $0x4,%esp
f0104fe9:	52                   	push   %edx
f0104fea:	50                   	push   %eax
f0104feb:	68 d8 5c 13 f0       	push   $0xf0135cd8
f0104ff0:	e8 19 bd ff ff       	call   f0100d0e <cprintf>
f0104ff5:	83 c4 10             	add    $0x10,%esp
				LIST_REMOVE(&(env_ready_queues[i]), ptr_env);
f0104ff8:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0104ffc:	75 17                	jne    f0105015 <sched_kill_all+0x156>
f0104ffe:	83 ec 04             	sub    $0x4,%esp
f0105001:	68 1f 5b 13 f0       	push   $0xf0135b1f
f0105006:	68 8c 01 00 00       	push   $0x18c
f010500b:	68 eb 5a 13 f0       	push   $0xf0135aeb
f0105010:	e8 f0 b1 ff ff       	call   f0100205 <_panic>
f0105015:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105018:	8b 40 44             	mov    0x44(%eax),%eax
f010501b:	85 c0                	test   %eax,%eax
f010501d:	74 11                	je     f0105030 <sched_kill_all+0x171>
f010501f:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105022:	8b 40 44             	mov    0x44(%eax),%eax
f0105025:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0105028:	8b 52 48             	mov    0x48(%edx),%edx
f010502b:	89 50 48             	mov    %edx,0x48(%eax)
f010502e:	eb 16                	jmp    f0105046 <sched_kill_all+0x187>
f0105030:	a1 a8 25 78 f0       	mov    0xf07825a8,%eax
f0105035:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0105038:	c1 e2 04             	shl    $0x4,%edx
f010503b:	01 c2                	add    %eax,%edx
f010503d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105040:	8b 40 48             	mov    0x48(%eax),%eax
f0105043:	89 42 04             	mov    %eax,0x4(%edx)
f0105046:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105049:	8b 40 48             	mov    0x48(%eax),%eax
f010504c:	85 c0                	test   %eax,%eax
f010504e:	74 11                	je     f0105061 <sched_kill_all+0x1a2>
f0105050:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105053:	8b 40 48             	mov    0x48(%eax),%eax
f0105056:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0105059:	8b 52 44             	mov    0x44(%edx),%edx
f010505c:	89 50 44             	mov    %edx,0x44(%eax)
f010505f:	eb 15                	jmp    f0105076 <sched_kill_all+0x1b7>
f0105061:	a1 a8 25 78 f0       	mov    0xf07825a8,%eax
f0105066:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0105069:	c1 e2 04             	shl    $0x4,%edx
f010506c:	01 c2                	add    %eax,%edx
f010506e:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105071:	8b 40 44             	mov    0x44(%eax),%eax
f0105074:	89 02                	mov    %eax,(%edx)
f0105076:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105079:	c7 40 44 00 00 00 00 	movl   $0x0,0x44(%eax)
f0105080:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105083:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f010508a:	a1 a8 25 78 f0       	mov    0xf07825a8,%eax
f010508f:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0105092:	c1 e2 04             	shl    $0x4,%edx
f0105095:	01 d0                	add    %edx,%eax
f0105097:	8b 50 0c             	mov    0xc(%eax),%edx
f010509a:	4a                   	dec    %edx
f010509b:	89 50 0c             	mov    %edx,0xc(%eax)
				env_free(ptr_env);
f010509e:	83 ec 0c             	sub    $0xc,%esp
f01050a1:	ff 75 f4             	pushl  -0xc(%ebp)
f01050a4:	e8 17 4a 00 00       	call   f0109ac0 <env_free>
f01050a9:	83 c4 10             	add    $0x10,%esp
				cprintf("DONE\n");
f01050ac:	83 ec 0c             	sub    $0xc,%esp
f01050af:	68 eb 5c 13 f0       	push   $0xf0135ceb
f01050b4:	e8 55 bc ff ff       	call   f0100d0e <cprintf>
f01050b9:	83 c4 10             	add    $0x10,%esp
	for (int i = 0 ; i < num_of_ready_queues ; i++)
	{
		if (!LIST_EMPTY(&(env_ready_queues[i])))
		{
			cprintf("KILLING the processes in the READY queue #%d...\n", i);
			LIST_FOREACH(ptr_env, &(env_ready_queues[i]))
f01050bc:	a1 a8 25 78 f0       	mov    0xf07825a8,%eax
f01050c1:	8b 55 f0             	mov    -0x10(%ebp),%edx
f01050c4:	c1 e2 04             	shl    $0x4,%edx
f01050c7:	01 d0                	add    %edx,%eax
f01050c9:	8b 40 08             	mov    0x8(%eax),%eax
f01050cc:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01050cf:	a1 a8 25 78 f0       	mov    0xf07825a8,%eax
f01050d4:	8b 55 f0             	mov    -0x10(%ebp),%edx
f01050d7:	c1 e2 04             	shl    $0x4,%edx
f01050da:	01 d0                	add    %edx,%eax
f01050dc:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01050e0:	74 08                	je     f01050ea <sched_kill_all+0x22b>
f01050e2:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01050e5:	8b 52 44             	mov    0x44(%edx),%edx
f01050e8:	eb 05                	jmp    f01050ef <sched_kill_all+0x230>
f01050ea:	ba 00 00 00 00       	mov    $0x0,%edx
f01050ef:	89 50 08             	mov    %edx,0x8(%eax)
f01050f2:	8b 40 08             	mov    0x8(%eax),%eax
f01050f5:	85 c0                	test   %eax,%eax
f01050f7:	0f 85 da fe ff ff    	jne    f0104fd7 <sched_kill_all+0x118>
f01050fd:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0105101:	0f 85 d0 fe ff ff    	jne    f0104fd7 <sched_kill_all+0x118>
f0105107:	eb 13                	jmp    f010511c <sched_kill_all+0x25d>
				cprintf("DONE\n");
			}
		}
		else
		{
			cprintf("No processes in READY queue #%d\n",i);
f0105109:	83 ec 08             	sub    $0x8,%esp
f010510c:	ff 75 f0             	pushl  -0x10(%ebp)
f010510f:	68 48 5c 13 f0       	push   $0xf0135c48
f0105114:	e8 f5 bb ff ff       	call   f0100d0e <cprintf>
f0105119:	83 c4 10             	add    $0x10,%esp
		}
		cprintf("================================================\n");
f010511c:	83 ec 0c             	sub    $0xc,%esp
f010511f:	68 ec 5b 13 f0       	push   $0xf0135bec
f0105124:	e8 e5 bb ff ff       	call   f0100d0e <cprintf>
f0105129:	83 c4 10             	add    $0x10,%esp
	else
	{
		cprintf("No processes in NEW queue\n");
	}
	cprintf("================================================\n");
	for (int i = 0 ; i < num_of_ready_queues ; i++)
f010512c:	ff 45 f0             	incl   -0x10(%ebp)
f010512f:	a0 40 26 78 f0       	mov    0xf0782640,%al
f0105134:	0f b6 c0             	movzbl %al,%eax
f0105137:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f010513a:	0f 8f 56 fe ff ff    	jg     f0104f96 <sched_kill_all+0xd7>
			cprintf("No processes in READY queue #%d\n",i);
		}
		cprintf("================================================\n");
	}

	if (!LIST_EMPTY(&env_exit_queue))
f0105140:	a1 b4 25 78 f0       	mov    0xf07825b4,%eax
f0105145:	85 c0                	test   %eax,%eax
f0105147:	0f 84 98 00 00 00    	je     f01051e5 <sched_kill_all+0x326>
	{
		cprintf("KILLING the processes in the EXIT queue...\n");
f010514d:	83 ec 0c             	sub    $0xc,%esp
f0105150:	68 40 5d 13 f0       	push   $0xf0135d40
f0105155:	e8 b4 bb ff ff       	call   f0100d0e <cprintf>
f010515a:	83 c4 10             	add    $0x10,%esp
		LIST_FOREACH(ptr_env, &env_exit_queue)
f010515d:	a1 b4 25 78 f0       	mov    0xf07825b4,%eax
f0105162:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0105165:	eb 55                	jmp    f01051bc <sched_kill_all+0x2fd>
		{
			cprintf("	killing[%d] %s...", ptr_env->env_id, ptr_env->prog_name);
f0105167:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010516a:	8d 90 5c 05 00 00    	lea    0x55c(%eax),%edx
f0105170:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105173:	8b 40 4c             	mov    0x4c(%eax),%eax
f0105176:	83 ec 04             	sub    $0x4,%esp
f0105179:	52                   	push   %edx
f010517a:	50                   	push   %eax
f010517b:	68 d8 5c 13 f0       	push   $0xf0135cd8
f0105180:	e8 89 bb ff ff       	call   f0100d0e <cprintf>
f0105185:	83 c4 10             	add    $0x10,%esp
			sched_remove_exit(ptr_env);
f0105188:	83 ec 0c             	sub    $0xc,%esp
f010518b:	ff 75 f4             	pushl  -0xc(%ebp)
f010518e:	e8 0a fa ff ff       	call   f0104b9d <sched_remove_exit>
f0105193:	83 c4 10             	add    $0x10,%esp
			env_free(ptr_env);
f0105196:	83 ec 0c             	sub    $0xc,%esp
f0105199:	ff 75 f4             	pushl  -0xc(%ebp)
f010519c:	e8 1f 49 00 00       	call   f0109ac0 <env_free>
f01051a1:	83 c4 10             	add    $0x10,%esp
			cprintf("DONE\n");
f01051a4:	83 ec 0c             	sub    $0xc,%esp
f01051a7:	68 eb 5c 13 f0       	push   $0xf0135ceb
f01051ac:	e8 5d bb ff ff       	call   f0100d0e <cprintf>
f01051b1:	83 c4 10             	add    $0x10,%esp
	}

	if (!LIST_EMPTY(&env_exit_queue))
	{
		cprintf("KILLING the processes in the EXIT queue...\n");
		LIST_FOREACH(ptr_env, &env_exit_queue)
f01051b4:	a1 bc 25 78 f0       	mov    0xf07825bc,%eax
f01051b9:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01051bc:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01051c0:	74 08                	je     f01051ca <sched_kill_all+0x30b>
f01051c2:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01051c5:	8b 40 44             	mov    0x44(%eax),%eax
f01051c8:	eb 05                	jmp    f01051cf <sched_kill_all+0x310>
f01051ca:	b8 00 00 00 00       	mov    $0x0,%eax
f01051cf:	a3 bc 25 78 f0       	mov    %eax,0xf07825bc
f01051d4:	a1 bc 25 78 f0       	mov    0xf07825bc,%eax
f01051d9:	85 c0                	test   %eax,%eax
f01051db:	75 8a                	jne    f0105167 <sched_kill_all+0x2a8>
f01051dd:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01051e1:	75 84                	jne    f0105167 <sched_kill_all+0x2a8>
f01051e3:	eb 10                	jmp    f01051f5 <sched_kill_all+0x336>
			cprintf("DONE\n");
		}
	}
	else
	{
		cprintf("No processes in EXIT queue\n");
f01051e5:	83 ec 0c             	sub    $0xc,%esp
f01051e8:	68 8e 5c 13 f0       	push   $0xf0135c8e
f01051ed:	e8 1c bb ff ff       	call   f0100d0e <cprintf>
f01051f2:	83 c4 10             	add    $0x10,%esp
	}

	//reinvoke the scheduler since there're no env to return back to it
	curenv = NULL;
f01051f5:	c7 05 b4 1c 78 f0 00 	movl   $0x0,0xf0781cb4
f01051fc:	00 00 00 
	fos_scheduler();
f01051ff:	e8 22 f5 ff ff       	call   f0104726 <fos_scheduler>

f0105204 <sched_new_env>:
}


void sched_new_env(struct Env* e)
{
f0105204:	55                   	push   %ebp
f0105205:	89 e5                	mov    %esp,%ebp
f0105207:	83 ec 08             	sub    $0x8,%esp
	//add the given env to the scheduler NEW queue
	if (e!=NULL)
f010520a:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f010520e:	74 0e                	je     f010521e <sched_new_env+0x1a>
	{
		sched_insert_new(e);
f0105210:	83 ec 0c             	sub    $0xc,%esp
f0105213:	ff 75 08             	pushl  0x8(%ebp)
f0105216:	e8 6e f8 ff ff       	call   f0104a89 <sched_insert_new>
f010521b:	83 c4 10             	add    $0x10,%esp
	}
}
f010521e:	90                   	nop
f010521f:	c9                   	leave  
f0105220:	c3                   	ret    

f0105221 <sched_run_env>:
	sched_insert_new(e);
}
 */

void sched_run_env(uint32 envId)
{
f0105221:	55                   	push   %ebp
f0105222:	89 e5                	mov    %esp,%ebp
f0105224:	83 ec 18             	sub    $0x18,%esp
	struct Env* ptr_env=NULL;
f0105227:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	LIST_FOREACH(ptr_env, &env_new_queue)
f010522e:	a1 fc 25 78 f0       	mov    0xf07825fc,%eax
f0105233:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0105236:	eb 3d                	jmp    f0105275 <sched_run_env+0x54>
	{
		if(ptr_env->env_id == envId)
f0105238:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010523b:	8b 40 4c             	mov    0x4c(%eax),%eax
f010523e:	3b 45 08             	cmp    0x8(%ebp),%eax
f0105241:	75 2a                	jne    f010526d <sched_run_env+0x4c>
		{
			sched_remove_new(ptr_env);
f0105243:	83 ec 0c             	sub    $0xc,%esp
f0105246:	ff 75 f4             	pushl  -0xc(%ebp)
f0105249:	e8 67 f8 ff ff       	call   f0104ab5 <sched_remove_new>
f010524e:	83 c4 10             	add    $0x10,%esp
			sched_insert_ready(ptr_env);
f0105251:	83 ec 0c             	sub    $0xc,%esp
f0105254:	ff 75 f4             	pushl  -0xc(%ebp)
f0105257:	e8 f0 f6 ff ff       	call   f010494c <sched_insert_ready>
f010525c:	83 c4 10             	add    $0x10,%esp

			/*2015*///if scheduler not run yet, then invoke it!
			if (scheduler_status == SCH_STOPPED)
f010525f:	a1 18 26 78 f0       	mov    0xf0782618,%eax
f0105264:	85 c0                	test   %eax,%eax
f0105266:	75 36                	jne    f010529e <sched_run_env+0x7d>
			{
				fos_scheduler();
f0105268:	e8 b9 f4 ff ff       	call   f0104726 <fos_scheduler>
 */

void sched_run_env(uint32 envId)
{
	struct Env* ptr_env=NULL;
	LIST_FOREACH(ptr_env, &env_new_queue)
f010526d:	a1 04 26 78 f0       	mov    0xf0782604,%eax
f0105272:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0105275:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0105279:	74 08                	je     f0105283 <sched_run_env+0x62>
f010527b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010527e:	8b 40 44             	mov    0x44(%eax),%eax
f0105281:	eb 05                	jmp    f0105288 <sched_run_env+0x67>
f0105283:	b8 00 00 00 00       	mov    $0x0,%eax
f0105288:	a3 04 26 78 f0       	mov    %eax,0xf0782604
f010528d:	a1 04 26 78 f0       	mov    0xf0782604,%eax
f0105292:	85 c0                	test   %eax,%eax
f0105294:	75 a2                	jne    f0105238 <sched_run_env+0x17>
f0105296:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010529a:	75 9c                	jne    f0105238 <sched_run_env+0x17>
	//	LIST_FOREACH(ptr_env, &env_ready_queue)
	//	{
	//		cprintf("%s - %d\n", ptr_env->prog_name, ptr_env->env_id);
	//	}

}
f010529c:	eb 01                	jmp    f010529f <sched_run_env+0x7e>
			/*2015*///if scheduler not run yet, then invoke it!
			if (scheduler_status == SCH_STOPPED)
			{
				fos_scheduler();
			}
			break;
f010529e:	90                   	nop
	//	LIST_FOREACH(ptr_env, &env_ready_queue)
	//	{
	//		cprintf("%s - %d\n", ptr_env->prog_name, ptr_env->env_id);
	//	}

}
f010529f:	90                   	nop
f01052a0:	c9                   	leave  
f01052a1:	c3                   	ret    

f01052a2 <sched_exit_env>:

void sched_exit_env(uint32 envId)
{
f01052a2:	55                   	push   %ebp
f01052a3:	89 e5                	mov    %esp,%ebp
f01052a5:	83 ec 18             	sub    $0x18,%esp
	struct Env* ptr_env=NULL;
f01052a8:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	int found = 0;
f01052af:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	if (!found)
f01052b6:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f01052ba:	75 59                	jne    f0105315 <sched_exit_env+0x73>
	{
		LIST_FOREACH(ptr_env, &env_new_queue)
f01052bc:	a1 fc 25 78 f0       	mov    0xf07825fc,%eax
f01052c1:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01052c4:	eb 28                	jmp    f01052ee <sched_exit_env+0x4c>
				{
			if(ptr_env->env_id == envId)
f01052c6:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01052c9:	8b 40 4c             	mov    0x4c(%eax),%eax
f01052cc:	3b 45 08             	cmp    0x8(%ebp),%eax
f01052cf:	75 15                	jne    f01052e6 <sched_exit_env+0x44>
			{
				sched_remove_new(ptr_env);
f01052d1:	83 ec 0c             	sub    $0xc,%esp
f01052d4:	ff 75 f4             	pushl  -0xc(%ebp)
f01052d7:	e8 d9 f7 ff ff       	call   f0104ab5 <sched_remove_new>
f01052dc:	83 c4 10             	add    $0x10,%esp
				found = 1;
f01052df:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
{
	struct Env* ptr_env=NULL;
	int found = 0;
	if (!found)
	{
		LIST_FOREACH(ptr_env, &env_new_queue)
f01052e6:	a1 04 26 78 f0       	mov    0xf0782604,%eax
f01052eb:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01052ee:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01052f2:	74 08                	je     f01052fc <sched_exit_env+0x5a>
f01052f4:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01052f7:	8b 40 44             	mov    0x44(%eax),%eax
f01052fa:	eb 05                	jmp    f0105301 <sched_exit_env+0x5f>
f01052fc:	b8 00 00 00 00       	mov    $0x0,%eax
f0105301:	a3 04 26 78 f0       	mov    %eax,0xf0782604
f0105306:	a1 04 26 78 f0       	mov    0xf0782604,%eax
f010530b:	85 c0                	test   %eax,%eax
f010530d:	75 b7                	jne    f01052c6 <sched_exit_env+0x24>
f010530f:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0105313:	75 b1                	jne    f01052c6 <sched_exit_env+0x24>
				found = 1;
				//			return;
			}
				}
	}
	if (!found)
f0105315:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0105319:	0f 85 67 01 00 00    	jne    f0105486 <sched_exit_env+0x1e4>
	{
		for (int i = 0 ; i < num_of_ready_queues ; i++)
f010531f:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f0105326:	e9 47 01 00 00       	jmp    f0105472 <sched_exit_env+0x1d0>
		{
			if (!LIST_EMPTY(&(env_ready_queues[i])))
f010532b:	a1 a8 25 78 f0       	mov    0xf07825a8,%eax
f0105330:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0105333:	c1 e2 04             	shl    $0x4,%edx
f0105336:	01 d0                	add    %edx,%eax
f0105338:	8b 00                	mov    (%eax),%eax
f010533a:	85 c0                	test   %eax,%eax
f010533c:	0f 84 27 01 00 00    	je     f0105469 <sched_exit_env+0x1c7>
			{
				ptr_env=NULL;
f0105342:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
				LIST_FOREACH(ptr_env, &(env_ready_queues[i]))
f0105349:	a1 a8 25 78 f0       	mov    0xf07825a8,%eax
f010534e:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0105351:	c1 e2 04             	shl    $0x4,%edx
f0105354:	01 d0                	add    %edx,%eax
f0105356:	8b 00                	mov    (%eax),%eax
f0105358:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010535b:	e9 d1 00 00 00       	jmp    f0105431 <sched_exit_env+0x18f>
				{
					if(ptr_env->env_id == envId)
f0105360:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105363:	8b 40 4c             	mov    0x4c(%eax),%eax
f0105366:	3b 45 08             	cmp    0x8(%ebp),%eax
f0105369:	0f 85 af 00 00 00    	jne    f010541e <sched_exit_env+0x17c>
					{
						LIST_REMOVE(&(env_ready_queues[i]), ptr_env);
f010536f:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0105373:	75 17                	jne    f010538c <sched_exit_env+0xea>
f0105375:	83 ec 04             	sub    $0x4,%esp
f0105378:	68 1f 5b 13 f0       	push   $0xf0135b1f
f010537d:	68 f7 01 00 00       	push   $0x1f7
f0105382:	68 eb 5a 13 f0       	push   $0xf0135aeb
f0105387:	e8 79 ae ff ff       	call   f0100205 <_panic>
f010538c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010538f:	8b 40 44             	mov    0x44(%eax),%eax
f0105392:	85 c0                	test   %eax,%eax
f0105394:	74 11                	je     f01053a7 <sched_exit_env+0x105>
f0105396:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105399:	8b 40 44             	mov    0x44(%eax),%eax
f010539c:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010539f:	8b 52 48             	mov    0x48(%edx),%edx
f01053a2:	89 50 48             	mov    %edx,0x48(%eax)
f01053a5:	eb 16                	jmp    f01053bd <sched_exit_env+0x11b>
f01053a7:	a1 a8 25 78 f0       	mov    0xf07825a8,%eax
f01053ac:	8b 55 ec             	mov    -0x14(%ebp),%edx
f01053af:	c1 e2 04             	shl    $0x4,%edx
f01053b2:	01 c2                	add    %eax,%edx
f01053b4:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01053b7:	8b 40 48             	mov    0x48(%eax),%eax
f01053ba:	89 42 04             	mov    %eax,0x4(%edx)
f01053bd:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01053c0:	8b 40 48             	mov    0x48(%eax),%eax
f01053c3:	85 c0                	test   %eax,%eax
f01053c5:	74 11                	je     f01053d8 <sched_exit_env+0x136>
f01053c7:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01053ca:	8b 40 48             	mov    0x48(%eax),%eax
f01053cd:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01053d0:	8b 52 44             	mov    0x44(%edx),%edx
f01053d3:	89 50 44             	mov    %edx,0x44(%eax)
f01053d6:	eb 15                	jmp    f01053ed <sched_exit_env+0x14b>
f01053d8:	a1 a8 25 78 f0       	mov    0xf07825a8,%eax
f01053dd:	8b 55 ec             	mov    -0x14(%ebp),%edx
f01053e0:	c1 e2 04             	shl    $0x4,%edx
f01053e3:	01 c2                	add    %eax,%edx
f01053e5:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01053e8:	8b 40 44             	mov    0x44(%eax),%eax
f01053eb:	89 02                	mov    %eax,(%edx)
f01053ed:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01053f0:	c7 40 44 00 00 00 00 	movl   $0x0,0x44(%eax)
f01053f7:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01053fa:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f0105401:	a1 a8 25 78 f0       	mov    0xf07825a8,%eax
f0105406:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0105409:	c1 e2 04             	shl    $0x4,%edx
f010540c:	01 d0                	add    %edx,%eax
f010540e:	8b 50 0c             	mov    0xc(%eax),%edx
f0105411:	4a                   	dec    %edx
f0105412:	89 50 0c             	mov    %edx,0xc(%eax)
						found = 1;
f0105415:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
						break;
f010541c:	eb 4b                	jmp    f0105469 <sched_exit_env+0x1c7>
		for (int i = 0 ; i < num_of_ready_queues ; i++)
		{
			if (!LIST_EMPTY(&(env_ready_queues[i])))
			{
				ptr_env=NULL;
				LIST_FOREACH(ptr_env, &(env_ready_queues[i]))
f010541e:	a1 a8 25 78 f0       	mov    0xf07825a8,%eax
f0105423:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0105426:	c1 e2 04             	shl    $0x4,%edx
f0105429:	01 d0                	add    %edx,%eax
f010542b:	8b 40 08             	mov    0x8(%eax),%eax
f010542e:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0105431:	a1 a8 25 78 f0       	mov    0xf07825a8,%eax
f0105436:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0105439:	c1 e2 04             	shl    $0x4,%edx
f010543c:	01 d0                	add    %edx,%eax
f010543e:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0105442:	74 08                	je     f010544c <sched_exit_env+0x1aa>
f0105444:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0105447:	8b 52 44             	mov    0x44(%edx),%edx
f010544a:	eb 05                	jmp    f0105451 <sched_exit_env+0x1af>
f010544c:	ba 00 00 00 00       	mov    $0x0,%edx
f0105451:	89 50 08             	mov    %edx,0x8(%eax)
f0105454:	8b 40 08             	mov    0x8(%eax),%eax
f0105457:	85 c0                	test   %eax,%eax
f0105459:	0f 85 01 ff ff ff    	jne    f0105360 <sched_exit_env+0xbe>
f010545f:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0105463:	0f 85 f7 fe ff ff    	jne    f0105360 <sched_exit_env+0xbe>
						found = 1;
						break;
					}
				}
			}
			if (found)
f0105469:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f010546d:	75 16                	jne    f0105485 <sched_exit_env+0x1e3>
			}
				}
	}
	if (!found)
	{
		for (int i = 0 ; i < num_of_ready_queues ; i++)
f010546f:	ff 45 ec             	incl   -0x14(%ebp)
f0105472:	a0 40 26 78 f0       	mov    0xf0782640,%al
f0105477:	0f b6 c0             	movzbl %al,%eax
f010547a:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f010547d:	0f 8f a8 fe ff ff    	jg     f010532b <sched_exit_env+0x89>
f0105483:	eb 01                	jmp    f0105486 <sched_exit_env+0x1e4>
						break;
					}
				}
			}
			if (found)
				break;
f0105485:	90                   	nop
		}
	}
	if (!found)
f0105486:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f010548a:	75 1c                	jne    f01054a8 <sched_exit_env+0x206>
	{
		if (curenv->env_id == envId)
f010548c:	a1 b4 1c 78 f0       	mov    0xf0781cb4,%eax
f0105491:	8b 40 4c             	mov    0x4c(%eax),%eax
f0105494:	3b 45 08             	cmp    0x8(%ebp),%eax
f0105497:	75 0f                	jne    f01054a8 <sched_exit_env+0x206>
		{
			ptr_env = curenv;
f0105499:	a1 b4 1c 78 f0       	mov    0xf0781cb4,%eax
f010549e:	89 45 f4             	mov    %eax,-0xc(%ebp)
			found = 1;
f01054a1:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
		}
	}

	if (found)
f01054a8:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f01054ac:	74 2a                	je     f01054d8 <sched_exit_env+0x236>
	{
		sched_insert_exit(ptr_env);
f01054ae:	83 ec 0c             	sub    $0xc,%esp
f01054b1:	ff 75 f4             	pushl  -0xc(%ebp)
f01054b4:	e8 a1 f6 ff ff       	call   f0104b5a <sched_insert_exit>
f01054b9:	83 c4 10             	add    $0x10,%esp

		//If it's the curenv, then reinvoke the scheduler as there's no meaning to return back to an exited env
		if (curenv->env_id == envId)
f01054bc:	a1 b4 1c 78 f0       	mov    0xf0781cb4,%eax
f01054c1:	8b 40 4c             	mov    0x4c(%eax),%eax
f01054c4:	3b 45 08             	cmp    0x8(%ebp),%eax
f01054c7:	75 0f                	jne    f01054d8 <sched_exit_env+0x236>
		{
			curenv = NULL;
f01054c9:	c7 05 b4 1c 78 f0 00 	movl   $0x0,0xf0781cb4
f01054d0:	00 00 00 
			fos_scheduler();
f01054d3:	e8 4e f2 ff ff       	call   f0104726 <fos_scheduler>
		}
	}
}
f01054d8:	90                   	nop
f01054d9:	c9                   	leave  
f01054da:	c3                   	ret    

f01054db <sched_exit_all_ready_envs>:

/*2018*/
void sched_exit_all_ready_envs()
{
f01054db:	55                   	push   %ebp
f01054dc:	89 e5                	mov    %esp,%ebp
f01054de:	83 ec 18             	sub    $0x18,%esp
	struct Env* ptr_env=NULL;
f01054e1:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	for (int i = 0 ; i < num_of_ready_queues ; i++)
f01054e8:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f01054ef:	e9 37 01 00 00       	jmp    f010562b <sched_exit_all_ready_envs+0x150>
	{
		if (!LIST_EMPTY(&(env_ready_queues[i])))
f01054f4:	a1 a8 25 78 f0       	mov    0xf07825a8,%eax
f01054f9:	8b 55 f0             	mov    -0x10(%ebp),%edx
f01054fc:	c1 e2 04             	shl    $0x4,%edx
f01054ff:	01 d0                	add    %edx,%eax
f0105501:	8b 00                	mov    (%eax),%eax
f0105503:	85 c0                	test   %eax,%eax
f0105505:	0f 84 1d 01 00 00    	je     f0105628 <sched_exit_all_ready_envs+0x14d>
		{
			ptr_env=NULL;
f010550b:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
			LIST_FOREACH(ptr_env, &(env_ready_queues[i]))
f0105512:	a1 a8 25 78 f0       	mov    0xf07825a8,%eax
f0105517:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010551a:	c1 e2 04             	shl    $0x4,%edx
f010551d:	01 d0                	add    %edx,%eax
f010551f:	8b 00                	mov    (%eax),%eax
f0105521:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0105524:	e9 c7 00 00 00       	jmp    f01055f0 <sched_exit_all_ready_envs+0x115>
			{
				LIST_REMOVE(&(env_ready_queues[i]), ptr_env);
f0105529:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010552d:	75 17                	jne    f0105546 <sched_exit_all_ready_envs+0x6b>
f010552f:	83 ec 04             	sub    $0x4,%esp
f0105532:	68 1f 5b 13 f0       	push   $0xf0135b1f
f0105537:	68 22 02 00 00       	push   $0x222
f010553c:	68 eb 5a 13 f0       	push   $0xf0135aeb
f0105541:	e8 bf ac ff ff       	call   f0100205 <_panic>
f0105546:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105549:	8b 40 44             	mov    0x44(%eax),%eax
f010554c:	85 c0                	test   %eax,%eax
f010554e:	74 11                	je     f0105561 <sched_exit_all_ready_envs+0x86>
f0105550:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105553:	8b 40 44             	mov    0x44(%eax),%eax
f0105556:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0105559:	8b 52 48             	mov    0x48(%edx),%edx
f010555c:	89 50 48             	mov    %edx,0x48(%eax)
f010555f:	eb 16                	jmp    f0105577 <sched_exit_all_ready_envs+0x9c>
f0105561:	a1 a8 25 78 f0       	mov    0xf07825a8,%eax
f0105566:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0105569:	c1 e2 04             	shl    $0x4,%edx
f010556c:	01 c2                	add    %eax,%edx
f010556e:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105571:	8b 40 48             	mov    0x48(%eax),%eax
f0105574:	89 42 04             	mov    %eax,0x4(%edx)
f0105577:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010557a:	8b 40 48             	mov    0x48(%eax),%eax
f010557d:	85 c0                	test   %eax,%eax
f010557f:	74 11                	je     f0105592 <sched_exit_all_ready_envs+0xb7>
f0105581:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105584:	8b 40 48             	mov    0x48(%eax),%eax
f0105587:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010558a:	8b 52 44             	mov    0x44(%edx),%edx
f010558d:	89 50 44             	mov    %edx,0x44(%eax)
f0105590:	eb 15                	jmp    f01055a7 <sched_exit_all_ready_envs+0xcc>
f0105592:	a1 a8 25 78 f0       	mov    0xf07825a8,%eax
f0105597:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010559a:	c1 e2 04             	shl    $0x4,%edx
f010559d:	01 c2                	add    %eax,%edx
f010559f:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01055a2:	8b 40 44             	mov    0x44(%eax),%eax
f01055a5:	89 02                	mov    %eax,(%edx)
f01055a7:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01055aa:	c7 40 44 00 00 00 00 	movl   $0x0,0x44(%eax)
f01055b1:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01055b4:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f01055bb:	a1 a8 25 78 f0       	mov    0xf07825a8,%eax
f01055c0:	8b 55 f0             	mov    -0x10(%ebp),%edx
f01055c3:	c1 e2 04             	shl    $0x4,%edx
f01055c6:	01 d0                	add    %edx,%eax
f01055c8:	8b 50 0c             	mov    0xc(%eax),%edx
f01055cb:	4a                   	dec    %edx
f01055cc:	89 50 0c             	mov    %edx,0xc(%eax)
				sched_insert_exit(ptr_env);
f01055cf:	83 ec 0c             	sub    $0xc,%esp
f01055d2:	ff 75 f4             	pushl  -0xc(%ebp)
f01055d5:	e8 80 f5 ff ff       	call   f0104b5a <sched_insert_exit>
f01055da:	83 c4 10             	add    $0x10,%esp
	for (int i = 0 ; i < num_of_ready_queues ; i++)
	{
		if (!LIST_EMPTY(&(env_ready_queues[i])))
		{
			ptr_env=NULL;
			LIST_FOREACH(ptr_env, &(env_ready_queues[i]))
f01055dd:	a1 a8 25 78 f0       	mov    0xf07825a8,%eax
f01055e2:	8b 55 f0             	mov    -0x10(%ebp),%edx
f01055e5:	c1 e2 04             	shl    $0x4,%edx
f01055e8:	01 d0                	add    %edx,%eax
f01055ea:	8b 40 08             	mov    0x8(%eax),%eax
f01055ed:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01055f0:	a1 a8 25 78 f0       	mov    0xf07825a8,%eax
f01055f5:	8b 55 f0             	mov    -0x10(%ebp),%edx
f01055f8:	c1 e2 04             	shl    $0x4,%edx
f01055fb:	01 d0                	add    %edx,%eax
f01055fd:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0105601:	74 08                	je     f010560b <sched_exit_all_ready_envs+0x130>
f0105603:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0105606:	8b 52 44             	mov    0x44(%edx),%edx
f0105609:	eb 05                	jmp    f0105610 <sched_exit_all_ready_envs+0x135>
f010560b:	ba 00 00 00 00       	mov    $0x0,%edx
f0105610:	89 50 08             	mov    %edx,0x8(%eax)
f0105613:	8b 40 08             	mov    0x8(%eax),%eax
f0105616:	85 c0                	test   %eax,%eax
f0105618:	0f 85 0b ff ff ff    	jne    f0105529 <sched_exit_all_ready_envs+0x4e>
f010561e:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0105622:	0f 85 01 ff ff ff    	jne    f0105529 <sched_exit_all_ready_envs+0x4e>

/*2018*/
void sched_exit_all_ready_envs()
{
	struct Env* ptr_env=NULL;
	for (int i = 0 ; i < num_of_ready_queues ; i++)
f0105628:	ff 45 f0             	incl   -0x10(%ebp)
f010562b:	a0 40 26 78 f0       	mov    0xf0782640,%al
f0105630:	0f b6 c0             	movzbl %al,%eax
f0105633:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0105636:	0f 8f b8 fe ff ff    	jg     f01054f4 <sched_exit_all_ready_envs+0x19>
				LIST_REMOVE(&(env_ready_queues[i]), ptr_env);
				sched_insert_exit(ptr_env);
			}
		}
	}
}
f010563c:	90                   	nop
f010563d:	c9                   	leave  
f010563e:	c3                   	ret    

f010563f <sched_kill_env>:

/*2015*/
void sched_kill_env(uint32 envId)
{
f010563f:	55                   	push   %ebp
f0105640:	89 e5                	mov    %esp,%ebp
f0105642:	83 ec 18             	sub    $0x18,%esp
	struct Env* ptr_env=NULL;
f0105645:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	int found = 0;
f010564c:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	if (!found)
f0105653:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0105657:	0f 85 a0 00 00 00    	jne    f01056fd <sched_kill_env+0xbe>
	{
		LIST_FOREACH(ptr_env, &env_new_queue)
f010565d:	a1 fc 25 78 f0       	mov    0xf07825fc,%eax
f0105662:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0105665:	eb 67                	jmp    f01056ce <sched_kill_env+0x8f>
					{
			if(ptr_env->env_id == envId)
f0105667:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010566a:	8b 40 4c             	mov    0x4c(%eax),%eax
f010566d:	3b 45 08             	cmp    0x8(%ebp),%eax
f0105670:	75 54                	jne    f01056c6 <sched_kill_env+0x87>
			{
				cprintf("killing[%d] %s from the NEW queue...", ptr_env->env_id, ptr_env->prog_name);
f0105672:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105675:	8d 90 5c 05 00 00    	lea    0x55c(%eax),%edx
f010567b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010567e:	8b 40 4c             	mov    0x4c(%eax),%eax
f0105681:	83 ec 04             	sub    $0x4,%esp
f0105684:	52                   	push   %edx
f0105685:	50                   	push   %eax
f0105686:	68 6c 5d 13 f0       	push   $0xf0135d6c
f010568b:	e8 7e b6 ff ff       	call   f0100d0e <cprintf>
f0105690:	83 c4 10             	add    $0x10,%esp
				sched_remove_new(ptr_env);
f0105693:	83 ec 0c             	sub    $0xc,%esp
f0105696:	ff 75 f4             	pushl  -0xc(%ebp)
f0105699:	e8 17 f4 ff ff       	call   f0104ab5 <sched_remove_new>
f010569e:	83 c4 10             	add    $0x10,%esp
				env_free(ptr_env);
f01056a1:	83 ec 0c             	sub    $0xc,%esp
f01056a4:	ff 75 f4             	pushl  -0xc(%ebp)
f01056a7:	e8 14 44 00 00       	call   f0109ac0 <env_free>
f01056ac:	83 c4 10             	add    $0x10,%esp
				cprintf("DONE\n");
f01056af:	83 ec 0c             	sub    $0xc,%esp
f01056b2:	68 eb 5c 13 f0       	push   $0xf0135ceb
f01056b7:	e8 52 b6 ff ff       	call   f0100d0e <cprintf>
f01056bc:	83 c4 10             	add    $0x10,%esp
				found = 1;
f01056bf:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
{
	struct Env* ptr_env=NULL;
	int found = 0;
	if (!found)
	{
		LIST_FOREACH(ptr_env, &env_new_queue)
f01056c6:	a1 04 26 78 f0       	mov    0xf0782604,%eax
f01056cb:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01056ce:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01056d2:	74 08                	je     f01056dc <sched_kill_env+0x9d>
f01056d4:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01056d7:	8b 40 44             	mov    0x44(%eax),%eax
f01056da:	eb 05                	jmp    f01056e1 <sched_kill_env+0xa2>
f01056dc:	b8 00 00 00 00       	mov    $0x0,%eax
f01056e1:	a3 04 26 78 f0       	mov    %eax,0xf0782604
f01056e6:	a1 04 26 78 f0       	mov    0xf0782604,%eax
f01056eb:	85 c0                	test   %eax,%eax
f01056ed:	0f 85 74 ff ff ff    	jne    f0105667 <sched_kill_env+0x28>
f01056f3:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01056f7:	0f 85 6a ff ff ff    	jne    f0105667 <sched_kill_env+0x28>
				found = 1;
				//			return;
			}
					}
	}
	if (!found)
f01056fd:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0105701:	0f 85 a6 01 00 00    	jne    f01058ad <sched_kill_env+0x26e>
	{
		for (int i = 0 ; i < num_of_ready_queues ; i++)
f0105707:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f010570e:	e9 86 01 00 00       	jmp    f0105899 <sched_kill_env+0x25a>
		{
			if (!LIST_EMPTY(&(env_ready_queues[i])))
f0105713:	a1 a8 25 78 f0       	mov    0xf07825a8,%eax
f0105718:	8b 55 ec             	mov    -0x14(%ebp),%edx
f010571b:	c1 e2 04             	shl    $0x4,%edx
f010571e:	01 d0                	add    %edx,%eax
f0105720:	8b 00                	mov    (%eax),%eax
f0105722:	85 c0                	test   %eax,%eax
f0105724:	0f 84 66 01 00 00    	je     f0105890 <sched_kill_env+0x251>
			{
				ptr_env=NULL;
f010572a:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
				LIST_FOREACH(ptr_env, &(env_ready_queues[i]))
f0105731:	a1 a8 25 78 f0       	mov    0xf07825a8,%eax
f0105736:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0105739:	c1 e2 04             	shl    $0x4,%edx
f010573c:	01 d0                	add    %edx,%eax
f010573e:	8b 00                	mov    (%eax),%eax
f0105740:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0105743:	e9 10 01 00 00       	jmp    f0105858 <sched_kill_env+0x219>
				{
					if(ptr_env->env_id == envId)
f0105748:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010574b:	8b 40 4c             	mov    0x4c(%eax),%eax
f010574e:	3b 45 08             	cmp    0x8(%ebp),%eax
f0105751:	0f 85 ee 00 00 00    	jne    f0105845 <sched_kill_env+0x206>
					{
						cprintf("killing[%d] %s from the READY queue #%d...", ptr_env->env_id, ptr_env->prog_name, i);
f0105757:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010575a:	8d 90 5c 05 00 00    	lea    0x55c(%eax),%edx
f0105760:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105763:	8b 40 4c             	mov    0x4c(%eax),%eax
f0105766:	ff 75 ec             	pushl  -0x14(%ebp)
f0105769:	52                   	push   %edx
f010576a:	50                   	push   %eax
f010576b:	68 94 5d 13 f0       	push   $0xf0135d94
f0105770:	e8 99 b5 ff ff       	call   f0100d0e <cprintf>
f0105775:	83 c4 10             	add    $0x10,%esp
						LIST_REMOVE(&(env_ready_queues[i]), ptr_env);
f0105778:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010577c:	75 17                	jne    f0105795 <sched_kill_env+0x156>
f010577e:	83 ec 04             	sub    $0x4,%esp
f0105781:	68 1f 5b 13 f0       	push   $0xf0135b1f
f0105786:	68 49 02 00 00       	push   $0x249
f010578b:	68 eb 5a 13 f0       	push   $0xf0135aeb
f0105790:	e8 70 aa ff ff       	call   f0100205 <_panic>
f0105795:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105798:	8b 40 44             	mov    0x44(%eax),%eax
f010579b:	85 c0                	test   %eax,%eax
f010579d:	74 11                	je     f01057b0 <sched_kill_env+0x171>
f010579f:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01057a2:	8b 40 44             	mov    0x44(%eax),%eax
f01057a5:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01057a8:	8b 52 48             	mov    0x48(%edx),%edx
f01057ab:	89 50 48             	mov    %edx,0x48(%eax)
f01057ae:	eb 16                	jmp    f01057c6 <sched_kill_env+0x187>
f01057b0:	a1 a8 25 78 f0       	mov    0xf07825a8,%eax
f01057b5:	8b 55 ec             	mov    -0x14(%ebp),%edx
f01057b8:	c1 e2 04             	shl    $0x4,%edx
f01057bb:	01 c2                	add    %eax,%edx
f01057bd:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01057c0:	8b 40 48             	mov    0x48(%eax),%eax
f01057c3:	89 42 04             	mov    %eax,0x4(%edx)
f01057c6:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01057c9:	8b 40 48             	mov    0x48(%eax),%eax
f01057cc:	85 c0                	test   %eax,%eax
f01057ce:	74 11                	je     f01057e1 <sched_kill_env+0x1a2>
f01057d0:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01057d3:	8b 40 48             	mov    0x48(%eax),%eax
f01057d6:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01057d9:	8b 52 44             	mov    0x44(%edx),%edx
f01057dc:	89 50 44             	mov    %edx,0x44(%eax)
f01057df:	eb 15                	jmp    f01057f6 <sched_kill_env+0x1b7>
f01057e1:	a1 a8 25 78 f0       	mov    0xf07825a8,%eax
f01057e6:	8b 55 ec             	mov    -0x14(%ebp),%edx
f01057e9:	c1 e2 04             	shl    $0x4,%edx
f01057ec:	01 c2                	add    %eax,%edx
f01057ee:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01057f1:	8b 40 44             	mov    0x44(%eax),%eax
f01057f4:	89 02                	mov    %eax,(%edx)
f01057f6:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01057f9:	c7 40 44 00 00 00 00 	movl   $0x0,0x44(%eax)
f0105800:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105803:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f010580a:	a1 a8 25 78 f0       	mov    0xf07825a8,%eax
f010580f:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0105812:	c1 e2 04             	shl    $0x4,%edx
f0105815:	01 d0                	add    %edx,%eax
f0105817:	8b 50 0c             	mov    0xc(%eax),%edx
f010581a:	4a                   	dec    %edx
f010581b:	89 50 0c             	mov    %edx,0xc(%eax)
						env_free(ptr_env);
f010581e:	83 ec 0c             	sub    $0xc,%esp
f0105821:	ff 75 f4             	pushl  -0xc(%ebp)
f0105824:	e8 97 42 00 00       	call   f0109ac0 <env_free>
f0105829:	83 c4 10             	add    $0x10,%esp
						cprintf("DONE\n");
f010582c:	83 ec 0c             	sub    $0xc,%esp
f010582f:	68 eb 5c 13 f0       	push   $0xf0135ceb
f0105834:	e8 d5 b4 ff ff       	call   f0100d0e <cprintf>
f0105839:	83 c4 10             	add    $0x10,%esp
						found = 1;
f010583c:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
						break;
f0105843:	eb 4b                	jmp    f0105890 <sched_kill_env+0x251>
		for (int i = 0 ; i < num_of_ready_queues ; i++)
		{
			if (!LIST_EMPTY(&(env_ready_queues[i])))
			{
				ptr_env=NULL;
				LIST_FOREACH(ptr_env, &(env_ready_queues[i]))
f0105845:	a1 a8 25 78 f0       	mov    0xf07825a8,%eax
f010584a:	8b 55 ec             	mov    -0x14(%ebp),%edx
f010584d:	c1 e2 04             	shl    $0x4,%edx
f0105850:	01 d0                	add    %edx,%eax
f0105852:	8b 40 08             	mov    0x8(%eax),%eax
f0105855:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0105858:	a1 a8 25 78 f0       	mov    0xf07825a8,%eax
f010585d:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0105860:	c1 e2 04             	shl    $0x4,%edx
f0105863:	01 d0                	add    %edx,%eax
f0105865:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0105869:	74 08                	je     f0105873 <sched_kill_env+0x234>
f010586b:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010586e:	8b 52 44             	mov    0x44(%edx),%edx
f0105871:	eb 05                	jmp    f0105878 <sched_kill_env+0x239>
f0105873:	ba 00 00 00 00       	mov    $0x0,%edx
f0105878:	89 50 08             	mov    %edx,0x8(%eax)
f010587b:	8b 40 08             	mov    0x8(%eax),%eax
f010587e:	85 c0                	test   %eax,%eax
f0105880:	0f 85 c2 fe ff ff    	jne    f0105748 <sched_kill_env+0x109>
f0105886:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010588a:	0f 85 b8 fe ff ff    	jne    f0105748 <sched_kill_env+0x109>
						break;
						//return;
					}
				}
			}
			if (found)
f0105890:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0105894:	75 16                	jne    f01058ac <sched_kill_env+0x26d>
			}
					}
	}
	if (!found)
	{
		for (int i = 0 ; i < num_of_ready_queues ; i++)
f0105896:	ff 45 ec             	incl   -0x14(%ebp)
f0105899:	a0 40 26 78 f0       	mov    0xf0782640,%al
f010589e:	0f b6 c0             	movzbl %al,%eax
f01058a1:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f01058a4:	0f 8f 69 fe ff ff    	jg     f0105713 <sched_kill_env+0xd4>
f01058aa:	eb 01                	jmp    f01058ad <sched_kill_env+0x26e>
						//return;
					}
				}
			}
			if (found)
				break;
f01058ac:	90                   	nop
		}
	}
	if (!found)
f01058ad:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f01058b1:	0f 85 a7 00 00 00    	jne    f010595e <sched_kill_env+0x31f>
	{
		ptr_env=NULL;
f01058b7:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
		LIST_FOREACH(ptr_env, &env_exit_queue)
f01058be:	a1 b4 25 78 f0       	mov    0xf07825b4,%eax
f01058c3:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01058c6:	eb 67                	jmp    f010592f <sched_kill_env+0x2f0>
		{
			if(ptr_env->env_id == envId)
f01058c8:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01058cb:	8b 40 4c             	mov    0x4c(%eax),%eax
f01058ce:	3b 45 08             	cmp    0x8(%ebp),%eax
f01058d1:	75 54                	jne    f0105927 <sched_kill_env+0x2e8>
			{
				cprintf("killing[%d] %s from the EXIT queue...", ptr_env->env_id, ptr_env->prog_name);
f01058d3:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01058d6:	8d 90 5c 05 00 00    	lea    0x55c(%eax),%edx
f01058dc:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01058df:	8b 40 4c             	mov    0x4c(%eax),%eax
f01058e2:	83 ec 04             	sub    $0x4,%esp
f01058e5:	52                   	push   %edx
f01058e6:	50                   	push   %eax
f01058e7:	68 c0 5d 13 f0       	push   $0xf0135dc0
f01058ec:	e8 1d b4 ff ff       	call   f0100d0e <cprintf>
f01058f1:	83 c4 10             	add    $0x10,%esp
				sched_remove_exit(ptr_env);
f01058f4:	83 ec 0c             	sub    $0xc,%esp
f01058f7:	ff 75 f4             	pushl  -0xc(%ebp)
f01058fa:	e8 9e f2 ff ff       	call   f0104b9d <sched_remove_exit>
f01058ff:	83 c4 10             	add    $0x10,%esp
				env_free(ptr_env);
f0105902:	83 ec 0c             	sub    $0xc,%esp
f0105905:	ff 75 f4             	pushl  -0xc(%ebp)
f0105908:	e8 b3 41 00 00       	call   f0109ac0 <env_free>
f010590d:	83 c4 10             	add    $0x10,%esp
				cprintf("DONE\n");
f0105910:	83 ec 0c             	sub    $0xc,%esp
f0105913:	68 eb 5c 13 f0       	push   $0xf0135ceb
f0105918:	e8 f1 b3 ff ff       	call   f0100d0e <cprintf>
f010591d:	83 c4 10             	add    $0x10,%esp
				found = 1;
f0105920:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
		}
	}
	if (!found)
	{
		ptr_env=NULL;
		LIST_FOREACH(ptr_env, &env_exit_queue)
f0105927:	a1 bc 25 78 f0       	mov    0xf07825bc,%eax
f010592c:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010592f:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0105933:	74 08                	je     f010593d <sched_kill_env+0x2fe>
f0105935:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105938:	8b 40 44             	mov    0x44(%eax),%eax
f010593b:	eb 05                	jmp    f0105942 <sched_kill_env+0x303>
f010593d:	b8 00 00 00 00       	mov    $0x0,%eax
f0105942:	a3 bc 25 78 f0       	mov    %eax,0xf07825bc
f0105947:	a1 bc 25 78 f0       	mov    0xf07825bc,%eax
f010594c:	85 c0                	test   %eax,%eax
f010594e:	0f 85 74 ff ff ff    	jne    f01058c8 <sched_kill_env+0x289>
f0105954:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0105958:	0f 85 6a ff ff ff    	jne    f01058c8 <sched_kill_env+0x289>
				//return;
			}
		}
	}

	if (!found)
f010595e:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0105962:	0f 85 a0 00 00 00    	jne    f0105a08 <sched_kill_env+0x3c9>
	{
		if (curenv->env_id == envId)
f0105968:	a1 b4 1c 78 f0       	mov    0xf0781cb4,%eax
f010596d:	8b 40 4c             	mov    0x4c(%eax),%eax
f0105970:	3b 45 08             	cmp    0x8(%ebp),%eax
f0105973:	0f 85 8f 00 00 00    	jne    f0105a08 <sched_kill_env+0x3c9>
		{
			ptr_env = curenv;
f0105979:	a1 b4 1c 78 f0       	mov    0xf0781cb4,%eax
f010597e:	89 45 f4             	mov    %eax,-0xc(%ebp)
			assert(ptr_env->env_id == ENV_RUNNABLE);
f0105981:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105984:	8b 40 4c             	mov    0x4c(%eax),%eax
f0105987:	83 f8 02             	cmp    $0x2,%eax
f010598a:	74 19                	je     f01059a5 <sched_kill_env+0x366>
f010598c:	68 e8 5d 13 f0       	push   $0xf0135de8
f0105991:	68 d6 5a 13 f0       	push   $0xf0135ad6
f0105996:	68 6c 02 00 00       	push   $0x26c
f010599b:	68 eb 5a 13 f0       	push   $0xf0135aeb
f01059a0:	e8 60 a8 ff ff       	call   f0100205 <_panic>
			cprintf("killing a RUNNABLE environment [%d] %s...", ptr_env->env_id, ptr_env->prog_name);
f01059a5:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01059a8:	8d 90 5c 05 00 00    	lea    0x55c(%eax),%edx
f01059ae:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01059b1:	8b 40 4c             	mov    0x4c(%eax),%eax
f01059b4:	83 ec 04             	sub    $0x4,%esp
f01059b7:	52                   	push   %edx
f01059b8:	50                   	push   %eax
f01059b9:	68 08 5e 13 f0       	push   $0xf0135e08
f01059be:	e8 4b b3 ff ff       	call   f0100d0e <cprintf>
f01059c3:	83 c4 10             	add    $0x10,%esp
			env_free(ptr_env);
f01059c6:	83 ec 0c             	sub    $0xc,%esp
f01059c9:	ff 75 f4             	pushl  -0xc(%ebp)
f01059cc:	e8 ef 40 00 00       	call   f0109ac0 <env_free>
f01059d1:	83 c4 10             	add    $0x10,%esp
			cprintf("DONE\n");
f01059d4:	83 ec 0c             	sub    $0xc,%esp
f01059d7:	68 eb 5c 13 f0       	push   $0xf0135ceb
f01059dc:	e8 2d b3 ff ff       	call   f0100d0e <cprintf>
f01059e1:	83 c4 10             	add    $0x10,%esp
			found = 1;
f01059e4:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
			//If it's the curenv, then reset it and reinvoke the scheduler
			//as there's no meaning to return back to a killed env
			//lcr3(K_PHYSICAL_ADDRESS(ptr_page_directory));
			lcr3(phys_page_directory);
f01059eb:	a1 6c 26 78 f0       	mov    0xf078266c,%eax
f01059f0:	89 45 e8             	mov    %eax,-0x18(%ebp)
f01059f3:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01059f6:	0f 22 d8             	mov    %eax,%cr3
			curenv = NULL;
f01059f9:	c7 05 b4 1c 78 f0 00 	movl   $0x0,0xf0781cb4
f0105a00:	00 00 00 
			fos_scheduler();
f0105a03:	e8 1e ed ff ff       	call   f0104726 <fos_scheduler>
		}
	}
}
f0105a08:	90                   	nop
f0105a09:	c9                   	leave  
f0105a0a:	c3                   	ret    

f0105a0b <clock_interrupt_handler>:


void clock_interrupt_handler()
{
f0105a0b:	55                   	push   %ebp
f0105a0c:	89 e5                	mov    %esp,%ebp
f0105a0e:	83 ec 08             	sub    $0x8,%esp
	//cputchar('i');

	if(isPageReplacmentAlgorithmLRU(PG_REP_LRU_TIME_APPROX))
f0105a11:	83 ec 0c             	sub    $0xc,%esp
f0105a14:	6a 01                	push   $0x1
f0105a16:	e8 28 83 00 00       	call   f010dd43 <isPageReplacmentAlgorithmLRU>
f0105a1b:	83 c4 10             	add    $0x10,%esp
f0105a1e:	85 c0                	test   %eax,%eax
f0105a20:	74 05                	je     f0105a27 <clock_interrupt_handler+0x1c>
	{
		update_WS_time_stamps();
f0105a22:	e8 05 00 00 00       	call   f0105a2c <update_WS_time_stamps>
	}
	//cprintf("Clock Handler\n") ;
	fos_scheduler();
f0105a27:	e8 fa ec ff ff       	call   f0104726 <fos_scheduler>

f0105a2c <update_WS_time_stamps>:
}

void update_WS_time_stamps()
{
f0105a2c:	55                   	push   %ebp
f0105a2d:	89 e5                	mov    %esp,%ebp
f0105a2f:	53                   	push   %ebx
f0105a30:	83 ec 24             	sub    $0x24,%esp
	struct Env *curr_env_ptr = curenv;
f0105a33:	a1 b4 1c 78 f0       	mov    0xf0781cb4,%eax
f0105a38:	89 45 ec             	mov    %eax,-0x14(%ebp)

	if(curr_env_ptr != NULL)
f0105a3b:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0105a3f:	0f 84 cc 01 00 00    	je     f0105c11 <update_WS_time_stamps+0x1e5>
	{
		{
			int i ;
			for (i = 0 ; i < (curr_env_ptr->page_WS_max_size); i++)
f0105a45:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0105a4c:	e9 cf 00 00 00       	jmp    f0105b20 <update_WS_time_stamps+0xf4>
			{
				if( curr_env_ptr->ptr_pageWorkingSet[i].empty != 1)
f0105a51:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0105a54:	8b 48 78             	mov    0x78(%eax),%ecx
f0105a57:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0105a5a:	89 d0                	mov    %edx,%eax
f0105a5c:	01 c0                	add    %eax,%eax
f0105a5e:	01 d0                	add    %edx,%eax
f0105a60:	c1 e0 03             	shl    $0x3,%eax
f0105a63:	01 c8                	add    %ecx,%eax
f0105a65:	8a 40 04             	mov    0x4(%eax),%al
f0105a68:	3c 01                	cmp    $0x1,%al
f0105a6a:	0f 84 ad 00 00 00    	je     f0105b1d <update_WS_time_stamps+0xf1>
				{
					//update the time if the page was referenced
					uint32 page_va = curr_env_ptr->ptr_pageWorkingSet[i].virtual_address ;
f0105a70:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0105a73:	8b 48 78             	mov    0x78(%eax),%ecx
f0105a76:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0105a79:	89 d0                	mov    %edx,%eax
f0105a7b:	01 c0                	add    %eax,%eax
f0105a7d:	01 d0                	add    %edx,%eax
f0105a7f:	c1 e0 03             	shl    $0x3,%eax
f0105a82:	01 c8                	add    %ecx,%eax
f0105a84:	8b 00                	mov    (%eax),%eax
f0105a86:	89 45 e8             	mov    %eax,-0x18(%ebp)
					uint32 perm = pt_get_page_permissions(curr_env_ptr->env_page_directory, page_va) ;
f0105a89:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0105a8c:	8b 40 5c             	mov    0x5c(%eax),%eax
f0105a8f:	83 ec 08             	sub    $0x8,%esp
f0105a92:	ff 75 e8             	pushl  -0x18(%ebp)
f0105a95:	50                   	push   %eax
f0105a96:	e8 c6 21 00 00       	call   f0107c61 <pt_get_page_permissions>
f0105a9b:	83 c4 10             	add    $0x10,%esp
f0105a9e:	89 45 e4             	mov    %eax,-0x1c(%ebp)
					uint32 oldTimeStamp = curr_env_ptr->ptr_pageWorkingSet[i].time_stamp;
f0105aa1:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0105aa4:	8b 48 78             	mov    0x78(%eax),%ecx
f0105aa7:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0105aaa:	89 d0                	mov    %edx,%eax
f0105aac:	01 c0                	add    %eax,%eax
f0105aae:	01 d0                	add    %edx,%eax
f0105ab0:	c1 e0 03             	shl    $0x3,%eax
f0105ab3:	01 c8                	add    %ecx,%eax
f0105ab5:	8b 40 08             	mov    0x8(%eax),%eax
f0105ab8:	89 45 e0             	mov    %eax,-0x20(%ebp)

					if (perm & PERM_USED)
f0105abb:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0105abe:	83 e0 20             	and    $0x20,%eax
f0105ac1:	85 c0                	test   %eax,%eax
f0105ac3:	74 3b                	je     f0105b00 <update_WS_time_stamps+0xd4>
					{
						curr_env_ptr->ptr_pageWorkingSet[i].time_stamp = (oldTimeStamp>>2) | 0x80000000;
f0105ac5:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0105ac8:	8b 48 78             	mov    0x78(%eax),%ecx
f0105acb:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0105ace:	89 d0                	mov    %edx,%eax
f0105ad0:	01 c0                	add    %eax,%eax
f0105ad2:	01 d0                	add    %edx,%eax
f0105ad4:	c1 e0 03             	shl    $0x3,%eax
f0105ad7:	01 c8                	add    %ecx,%eax
f0105ad9:	8b 55 e0             	mov    -0x20(%ebp),%edx
f0105adc:	c1 ea 02             	shr    $0x2,%edx
f0105adf:	81 ca 00 00 00 80    	or     $0x80000000,%edx
f0105ae5:	89 50 08             	mov    %edx,0x8(%eax)
						pt_set_page_permissions(curr_env_ptr->env_page_directory, page_va, 0 , PERM_USED) ;
f0105ae8:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0105aeb:	8b 40 5c             	mov    0x5c(%eax),%eax
f0105aee:	6a 20                	push   $0x20
f0105af0:	6a 00                	push   $0x0
f0105af2:	ff 75 e8             	pushl  -0x18(%ebp)
f0105af5:	50                   	push   %eax
f0105af6:	e8 b2 20 00 00       	call   f0107bad <pt_set_page_permissions>
f0105afb:	83 c4 10             	add    $0x10,%esp
f0105afe:	eb 1d                	jmp    f0105b1d <update_WS_time_stamps+0xf1>
					}
					else
					{
						curr_env_ptr->ptr_pageWorkingSet[i].time_stamp = (oldTimeStamp>>2);
f0105b00:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0105b03:	8b 48 78             	mov    0x78(%eax),%ecx
f0105b06:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0105b09:	89 d0                	mov    %edx,%eax
f0105b0b:	01 c0                	add    %eax,%eax
f0105b0d:	01 d0                	add    %edx,%eax
f0105b0f:	c1 e0 03             	shl    $0x3,%eax
f0105b12:	01 c8                	add    %ecx,%eax
f0105b14:	8b 55 e0             	mov    -0x20(%ebp),%edx
f0105b17:	c1 ea 02             	shr    $0x2,%edx
f0105b1a:	89 50 08             	mov    %edx,0x8(%eax)

	if(curr_env_ptr != NULL)
	{
		{
			int i ;
			for (i = 0 ; i < (curr_env_ptr->page_WS_max_size); i++)
f0105b1d:	ff 45 f4             	incl   -0xc(%ebp)
f0105b20:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0105b23:	8b 50 74             	mov    0x74(%eax),%edx
f0105b26:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105b29:	39 c2                	cmp    %eax,%edx
f0105b2b:	0f 87 20 ff ff ff    	ja     f0105a51 <update_WS_time_stamps+0x25>
			}
		}

		{
			int t ;
			for (t = 0 ; t < __TWS_MAX_SIZE; t++)
f0105b31:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f0105b38:	e9 ca 00 00 00       	jmp    f0105c07 <update_WS_time_stamps+0x1db>
			{
				if( curr_env_ptr->__ptr_tws[t].empty != 1)
f0105b3d:	8b 4d ec             	mov    -0x14(%ebp),%ecx
f0105b40:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0105b43:	89 d0                	mov    %edx,%eax
f0105b45:	01 c0                	add    %eax,%eax
f0105b47:	01 d0                	add    %edx,%eax
f0105b49:	c1 e0 03             	shl    $0x3,%eax
f0105b4c:	01 c8                	add    %ecx,%eax
f0105b4e:	83 e8 80             	sub    $0xffffff80,%eax
f0105b51:	8a 00                	mov    (%eax),%al
f0105b53:	3c 01                	cmp    $0x1,%al
f0105b55:	0f 84 a9 00 00 00    	je     f0105c04 <update_WS_time_stamps+0x1d8>
				{
					//update the time if the page was referenced
					uint32 table_va = curr_env_ptr->__ptr_tws[t].virtual_address;
f0105b5b:	8b 4d ec             	mov    -0x14(%ebp),%ecx
f0105b5e:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0105b61:	89 d0                	mov    %edx,%eax
f0105b63:	01 c0                	add    %eax,%eax
f0105b65:	01 d0                	add    %edx,%eax
f0105b67:	c1 e0 03             	shl    $0x3,%eax
f0105b6a:	01 c8                	add    %ecx,%eax
f0105b6c:	83 c0 7c             	add    $0x7c,%eax
f0105b6f:	8b 00                	mov    (%eax),%eax
f0105b71:	89 45 dc             	mov    %eax,-0x24(%ebp)
					uint32 oldTimeStamp = curr_env_ptr->__ptr_tws[t].time_stamp;
f0105b74:	8b 4d ec             	mov    -0x14(%ebp),%ecx
f0105b77:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0105b7a:	89 d0                	mov    %edx,%eax
f0105b7c:	01 c0                	add    %eax,%eax
f0105b7e:	01 d0                	add    %edx,%eax
f0105b80:	c1 e0 03             	shl    $0x3,%eax
f0105b83:	01 c8                	add    %ecx,%eax
f0105b85:	05 84 00 00 00       	add    $0x84,%eax
f0105b8a:	8b 00                	mov    (%eax),%eax
f0105b8c:	89 45 d8             	mov    %eax,-0x28(%ebp)

					if (pd_is_table_used(curr_env_ptr->env_page_directory, table_va))
f0105b8f:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0105b92:	8b 40 5c             	mov    0x5c(%eax),%eax
f0105b95:	83 ec 08             	sub    $0x8,%esp
f0105b98:	ff 75 dc             	pushl  -0x24(%ebp)
f0105b9b:	50                   	push   %eax
f0105b9c:	e8 df 21 00 00       	call   f0107d80 <pd_is_table_used>
f0105ba1:	83 c4 10             	add    $0x10,%esp
f0105ba4:	85 c0                	test   %eax,%eax
f0105ba6:	74 3c                	je     f0105be4 <update_WS_time_stamps+0x1b8>
					{
						curr_env_ptr->__ptr_tws[t].time_stamp = (oldTimeStamp>>2) | 0x80000000;
f0105ba8:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0105bab:	c1 e8 02             	shr    $0x2,%eax
f0105bae:	0d 00 00 00 80       	or     $0x80000000,%eax
f0105bb3:	89 c1                	mov    %eax,%ecx
f0105bb5:	8b 5d ec             	mov    -0x14(%ebp),%ebx
f0105bb8:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0105bbb:	89 d0                	mov    %edx,%eax
f0105bbd:	01 c0                	add    %eax,%eax
f0105bbf:	01 d0                	add    %edx,%eax
f0105bc1:	c1 e0 03             	shl    $0x3,%eax
f0105bc4:	01 d8                	add    %ebx,%eax
f0105bc6:	05 84 00 00 00       	add    $0x84,%eax
f0105bcb:	89 08                	mov    %ecx,(%eax)
						pd_set_table_unused(curr_env_ptr->env_page_directory, table_va);
f0105bcd:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0105bd0:	8b 40 5c             	mov    0x5c(%eax),%eax
f0105bd3:	83 ec 08             	sub    $0x8,%esp
f0105bd6:	ff 75 dc             	pushl  -0x24(%ebp)
f0105bd9:	50                   	push   %eax
f0105bda:	e8 c5 21 00 00       	call   f0107da4 <pd_set_table_unused>
f0105bdf:	83 c4 10             	add    $0x10,%esp
f0105be2:	eb 20                	jmp    f0105c04 <update_WS_time_stamps+0x1d8>
					}
					else
					{
						curr_env_ptr->__ptr_tws[t].time_stamp = (oldTimeStamp>>2);
f0105be4:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0105be7:	c1 e8 02             	shr    $0x2,%eax
f0105bea:	89 c1                	mov    %eax,%ecx
f0105bec:	8b 5d ec             	mov    -0x14(%ebp),%ebx
f0105bef:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0105bf2:	89 d0                	mov    %edx,%eax
f0105bf4:	01 c0                	add    %eax,%eax
f0105bf6:	01 d0                	add    %edx,%eax
f0105bf8:	c1 e0 03             	shl    $0x3,%eax
f0105bfb:	01 d8                	add    %ebx,%eax
f0105bfd:	05 84 00 00 00       	add    $0x84,%eax
f0105c02:	89 08                	mov    %ecx,(%eax)
			}
		}

		{
			int t ;
			for (t = 0 ; t < __TWS_MAX_SIZE; t++)
f0105c04:	ff 45 f0             	incl   -0x10(%ebp)
f0105c07:	83 7d f0 31          	cmpl   $0x31,-0x10(%ebp)
f0105c0b:	0f 8e 2c ff ff ff    	jle    f0105b3d <update_WS_time_stamps+0x111>
					}
				}
			}
		}
	}
}
f0105c11:	90                   	nop
f0105c12:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f0105c15:	c9                   	leave  
f0105c16:	c3                   	ret    

f0105c17 <pic_init>:
static bool didinit;

/* Initialize the 8259A interrupt controllers. */
void
pic_init(void)
{
f0105c17:	55                   	push   %ebp
f0105c18:	89 e5                	mov    %esp,%ebp
f0105c1a:	83 ec 58             	sub    $0x58,%esp
	didinit = 1;
f0105c1d:	c7 05 ac 1c 78 f0 01 	movl   $0x1,0xf0781cac
f0105c24:	00 00 00 
f0105c27:	c7 45 f4 21 00 00 00 	movl   $0x21,-0xc(%ebp)
f0105c2e:	c6 45 b2 ff          	movb   $0xff,-0x4e(%ebp)
}

static __inline void
outb(int port, uint8 data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
f0105c32:	8a 45 b2             	mov    -0x4e(%ebp),%al
f0105c35:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0105c38:	ee                   	out    %al,(%dx)
f0105c39:	c7 45 f0 a1 00 00 00 	movl   $0xa1,-0x10(%ebp)
f0105c40:	c6 45 b3 ff          	movb   $0xff,-0x4d(%ebp)
f0105c44:	8a 45 b3             	mov    -0x4d(%ebp),%al
f0105c47:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0105c4a:	ee                   	out    %al,(%dx)
f0105c4b:	c7 45 ec 20 00 00 00 	movl   $0x20,-0x14(%ebp)
f0105c52:	c6 45 b4 11          	movb   $0x11,-0x4c(%ebp)
f0105c56:	8a 45 b4             	mov    -0x4c(%ebp),%al
f0105c59:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0105c5c:	ee                   	out    %al,(%dx)
f0105c5d:	c7 45 e8 21 00 00 00 	movl   $0x21,-0x18(%ebp)
f0105c64:	c6 45 b5 20          	movb   $0x20,-0x4b(%ebp)
f0105c68:	8a 45 b5             	mov    -0x4b(%ebp),%al
f0105c6b:	8b 55 e8             	mov    -0x18(%ebp),%edx
f0105c6e:	ee                   	out    %al,(%dx)
f0105c6f:	c7 45 e4 21 00 00 00 	movl   $0x21,-0x1c(%ebp)
f0105c76:	c6 45 b6 04          	movb   $0x4,-0x4a(%ebp)
f0105c7a:	8a 45 b6             	mov    -0x4a(%ebp),%al
f0105c7d:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f0105c80:	ee                   	out    %al,(%dx)
f0105c81:	c7 45 e0 21 00 00 00 	movl   $0x21,-0x20(%ebp)
f0105c88:	c6 45 b7 03          	movb   $0x3,-0x49(%ebp)
f0105c8c:	8a 45 b7             	mov    -0x49(%ebp),%al
f0105c8f:	8b 55 e0             	mov    -0x20(%ebp),%edx
f0105c92:	ee                   	out    %al,(%dx)
f0105c93:	c7 45 dc a0 00 00 00 	movl   $0xa0,-0x24(%ebp)
f0105c9a:	c6 45 b8 11          	movb   $0x11,-0x48(%ebp)
f0105c9e:	8a 45 b8             	mov    -0x48(%ebp),%al
f0105ca1:	8b 55 dc             	mov    -0x24(%ebp),%edx
f0105ca4:	ee                   	out    %al,(%dx)
f0105ca5:	c7 45 d8 a1 00 00 00 	movl   $0xa1,-0x28(%ebp)
f0105cac:	c6 45 b9 28          	movb   $0x28,-0x47(%ebp)
f0105cb0:	8a 45 b9             	mov    -0x47(%ebp),%al
f0105cb3:	8b 55 d8             	mov    -0x28(%ebp),%edx
f0105cb6:	ee                   	out    %al,(%dx)
f0105cb7:	c7 45 d4 a1 00 00 00 	movl   $0xa1,-0x2c(%ebp)
f0105cbe:	c6 45 ba 02          	movb   $0x2,-0x46(%ebp)
f0105cc2:	8a 45 ba             	mov    -0x46(%ebp),%al
f0105cc5:	8b 55 d4             	mov    -0x2c(%ebp),%edx
f0105cc8:	ee                   	out    %al,(%dx)
f0105cc9:	c7 45 d0 a1 00 00 00 	movl   $0xa1,-0x30(%ebp)
f0105cd0:	c6 45 bb 01          	movb   $0x1,-0x45(%ebp)
f0105cd4:	8a 45 bb             	mov    -0x45(%ebp),%al
f0105cd7:	8b 55 d0             	mov    -0x30(%ebp),%edx
f0105cda:	ee                   	out    %al,(%dx)
f0105cdb:	c7 45 cc 20 00 00 00 	movl   $0x20,-0x34(%ebp)
f0105ce2:	c6 45 bc 68          	movb   $0x68,-0x44(%ebp)
f0105ce6:	8a 45 bc             	mov    -0x44(%ebp),%al
f0105ce9:	8b 55 cc             	mov    -0x34(%ebp),%edx
f0105cec:	ee                   	out    %al,(%dx)
f0105ced:	c7 45 c8 20 00 00 00 	movl   $0x20,-0x38(%ebp)
f0105cf4:	c6 45 bd 0a          	movb   $0xa,-0x43(%ebp)
f0105cf8:	8a 45 bd             	mov    -0x43(%ebp),%al
f0105cfb:	8b 55 c8             	mov    -0x38(%ebp),%edx
f0105cfe:	ee                   	out    %al,(%dx)
f0105cff:	c7 45 c4 a0 00 00 00 	movl   $0xa0,-0x3c(%ebp)
f0105d06:	c6 45 be 68          	movb   $0x68,-0x42(%ebp)
f0105d0a:	8a 45 be             	mov    -0x42(%ebp),%al
f0105d0d:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0105d10:	ee                   	out    %al,(%dx)
f0105d11:	c7 45 c0 a0 00 00 00 	movl   $0xa0,-0x40(%ebp)
f0105d18:	c6 45 bf 0a          	movb   $0xa,-0x41(%ebp)
f0105d1c:	8a 45 bf             	mov    -0x41(%ebp),%al
f0105d1f:	8b 55 c0             	mov    -0x40(%ebp),%edx
f0105d22:	ee                   	out    %al,(%dx)
	outb(IO_PIC1, 0x0a);             /* read IRR by default */

	outb(IO_PIC2, 0x68);               /* OCW3 */
	outb(IO_PIC2, 0x0a);               /* OCW3 */

	if (irq_mask_8259A != 0xFFFF)
f0105d23:	66 a1 b0 28 19 f0    	mov    0xf01928b0,%ax
f0105d29:	66 83 f8 ff          	cmp    $0xffff,%ax
f0105d2d:	74 15                	je     f0105d44 <pic_init+0x12d>
		irq_setmask_8259A(irq_mask_8259A);
f0105d2f:	66 a1 b0 28 19 f0    	mov    0xf01928b0,%ax
f0105d35:	0f b7 c0             	movzwl %ax,%eax
f0105d38:	83 ec 0c             	sub    $0xc,%esp
f0105d3b:	50                   	push   %eax
f0105d3c:	e8 06 00 00 00       	call   f0105d47 <irq_setmask_8259A>
f0105d41:	83 c4 10             	add    $0x10,%esp
}
f0105d44:	90                   	nop
f0105d45:	c9                   	leave  
f0105d46:	c3                   	ret    

f0105d47 <irq_setmask_8259A>:

void
irq_setmask_8259A(uint16 mask)
{
f0105d47:	55                   	push   %ebp
f0105d48:	89 e5                	mov    %esp,%ebp
f0105d4a:	83 ec 14             	sub    $0x14,%esp
f0105d4d:	8b 45 08             	mov    0x8(%ebp),%eax
f0105d50:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
	int i;
	irq_mask_8259A = mask;
f0105d54:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0105d57:	66 a3 b0 28 19 f0    	mov    %ax,0xf01928b0
	if (!didinit)
f0105d5d:	a1 ac 1c 78 f0       	mov    0xf0781cac,%eax
f0105d62:	85 c0                	test   %eax,%eax
f0105d64:	74 34                	je     f0105d9a <irq_setmask_8259A+0x53>
		return;
	outb(IO_PIC1+1, (char)mask);
f0105d66:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0105d69:	0f b6 c0             	movzbl %al,%eax
f0105d6c:	c7 45 fc 21 00 00 00 	movl   $0x21,-0x4(%ebp)
f0105d73:	88 45 f6             	mov    %al,-0xa(%ebp)
f0105d76:	8a 45 f6             	mov    -0xa(%ebp),%al
f0105d79:	8b 55 fc             	mov    -0x4(%ebp),%edx
f0105d7c:	ee                   	out    %al,(%dx)
	outb(IO_PIC2+1, (char)(mask >> 8));
f0105d7d:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0105d80:	66 c1 e8 08          	shr    $0x8,%ax
f0105d84:	0f b6 c0             	movzbl %al,%eax
f0105d87:	c7 45 f8 a1 00 00 00 	movl   $0xa1,-0x8(%ebp)
f0105d8e:	88 45 f7             	mov    %al,-0x9(%ebp)
f0105d91:	8a 45 f7             	mov    -0x9(%ebp),%al
f0105d94:	8b 55 f8             	mov    -0x8(%ebp),%edx
f0105d97:	ee                   	out    %al,(%dx)
f0105d98:	eb 01                	jmp    f0105d9b <irq_setmask_8259A+0x54>
irq_setmask_8259A(uint16 mask)
{
	int i;
	irq_mask_8259A = mask;
	if (!didinit)
		return;
f0105d9a:	90                   	nop
	//cprintf("enabled interrupts:");
	//for (i = 0; i < 16; i++)
		//if (~mask & (1<<i))
			//cprintf(" %d", i);
	//cprintf("\n");
}
f0105d9b:	c9                   	leave  
f0105d9c:	c3                   	ret    

f0105d9d <initialize_kernel_VM>:
//
// From USER_TOP to USER_LIMIT, the user is allowed to read but not write.
// Above USER_LIMIT the user cannot read (or write).

void initialize_kernel_VM()
{
f0105d9d:	55                   	push   %ebp
f0105d9e:	89 e5                	mov    %esp,%ebp
f0105da0:	83 ec 38             	sub    $0x38,%esp
	//panic("initialize_kernel_VM: This function is not finished\n");

	//////////////////////////////////////////////////////////////////////
	// create initial page directory.

	ptr_page_directory = boot_allocate_space(PAGE_SIZE, PAGE_SIZE);
f0105da3:	83 ec 08             	sub    $0x8,%esp
f0105da6:	68 00 10 00 00       	push   $0x1000
f0105dab:	68 00 10 00 00       	push   $0x1000
f0105db0:	e8 6a 02 00 00       	call   f010601f <boot_allocate_space>
f0105db5:	83 c4 10             	add    $0x10,%esp
f0105db8:	a3 3c 26 78 f0       	mov    %eax,0xf078263c
	memset(ptr_page_directory, 0, PAGE_SIZE);
f0105dbd:	a1 3c 26 78 f0       	mov    0xf078263c,%eax
f0105dc2:	83 ec 04             	sub    $0x4,%esp
f0105dc5:	68 00 10 00 00       	push   $0x1000
f0105dca:	6a 00                	push   $0x0
f0105dcc:	50                   	push   %eax
f0105dcd:	e8 0e b6 02 00       	call   f01313e0 <memset>
f0105dd2:	83 c4 10             	add    $0x10,%esp
	phys_page_directory = STATIC_KERNEL_PHYSICAL_ADDRESS(ptr_page_directory);
f0105dd5:	a1 3c 26 78 f0       	mov    0xf078263c,%eax
f0105dda:	89 45 e8             	mov    %eax,-0x18(%ebp)
f0105ddd:	81 7d e8 ff ff ff ef 	cmpl   $0xefffffff,-0x18(%ebp)
f0105de4:	77 14                	ja     f0105dfa <initialize_kernel_VM+0x5d>
f0105de6:	ff 75 e8             	pushl  -0x18(%ebp)
f0105de9:	68 34 5e 13 f0       	push   $0xf0135e34
f0105dee:	6a 45                	push   $0x45
f0105df0:	68 68 5e 13 f0       	push   $0xf0135e68
f0105df5:	e8 0b a4 ff ff       	call   f0100205 <_panic>
f0105dfa:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0105dfd:	05 00 00 00 10       	add    $0x10000000,%eax
f0105e02:	a3 6c 26 78 f0       	mov    %eax,0xf078266c
	// Map the kernel stack with VA range :
	//  [KERNEL_STACK_TOP-KERNEL_STACK_SIZE, KERNEL_STACK_TOP),
	// to physical address : "phys_stack_bottom".
	//     Permissions: kernel RW, user NONE
	// Your code goes here:
	boot_map_range(ptr_page_directory, KERNEL_STACK_TOP - KERNEL_STACK_SIZE, KERNEL_STACK_SIZE, STATIC_KERNEL_PHYSICAL_ADDRESS(ptr_stack_bottom), PERM_WRITEABLE) ;
f0105e07:	c7 45 e4 00 a0 18 f0 	movl   $0xf018a000,-0x1c(%ebp)
f0105e0e:	81 7d e4 ff ff ff ef 	cmpl   $0xefffffff,-0x1c(%ebp)
f0105e15:	77 14                	ja     f0105e2b <initialize_kernel_VM+0x8e>
f0105e17:	ff 75 e4             	pushl  -0x1c(%ebp)
f0105e1a:	68 34 5e 13 f0       	push   $0xf0135e34
f0105e1f:	6a 4d                	push   $0x4d
f0105e21:	68 68 5e 13 f0       	push   $0xf0135e68
f0105e26:	e8 da a3 ff ff       	call   f0100205 <_panic>
f0105e2b:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0105e2e:	8d 90 00 00 00 10    	lea    0x10000000(%eax),%edx
f0105e34:	a1 3c 26 78 f0       	mov    0xf078263c,%eax
f0105e39:	83 ec 0c             	sub    $0xc,%esp
f0105e3c:	6a 02                	push   $0x2
f0105e3e:	52                   	push   %edx
f0105e3f:	68 00 80 00 00       	push   $0x8000
f0105e44:	68 00 80 bf ef       	push   $0xefbf8000
f0105e49:	50                   	push   %eax
f0105e4a:	e8 31 02 00 00       	call   f0106080 <boot_map_range>
f0105e4f:	83 c4 20             	add    $0x20,%esp
	// Permissions: kernel RW, user NONE
	// Your code goes here:

	//2016:
	//boot tables
	unsigned long long sva = KERNEL_BASE;
f0105e52:	c7 45 f0 00 00 00 f0 	movl   $0xf0000000,-0x10(%ebp)
f0105e59:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	unsigned int nTables=0;
f0105e60:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
	for (;sva < 0xFFFFFFFF;  sva += PTSIZE)
f0105e67:	eb 25                	jmp    f0105e8e <initialize_kernel_VM+0xf1>
	{
		++nTables;
f0105e69:	ff 45 ec             	incl   -0x14(%ebp)
		boot_get_page_table(ptr_page_directory, (uint32)sva, 1);
f0105e6c:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0105e6f:	a1 3c 26 78 f0       	mov    0xf078263c,%eax
f0105e74:	83 ec 04             	sub    $0x4,%esp
f0105e77:	6a 01                	push   $0x1
f0105e79:	52                   	push   %edx
f0105e7a:	50                   	push   %eax
f0105e7b:	e8 74 02 00 00       	call   f01060f4 <boot_get_page_table>
f0105e80:	83 c4 10             	add    $0x10,%esp

	//2016:
	//boot tables
	unsigned long long sva = KERNEL_BASE;
	unsigned int nTables=0;
	for (;sva < 0xFFFFFFFF;  sva += PTSIZE)
f0105e83:	81 45 f0 00 00 40 00 	addl   $0x400000,-0x10(%ebp)
f0105e8a:	83 55 f4 00          	adcl   $0x0,-0xc(%ebp)
f0105e8e:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0105e92:	72 d5                	jb     f0105e69 <initialize_kernel_VM+0xcc>
f0105e94:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0105e98:	77 06                	ja     f0105ea0 <initialize_kernel_VM+0x103>
f0105e9a:	83 7d f0 fe          	cmpl   $0xfffffffe,-0x10(%ebp)
f0105e9e:	76 c9                	jbe    f0105e69 <initialize_kernel_VM+0xcc>
	//    - frames_info -- kernel RW, user NONE
	//    - the image mapped at READ_ONLY_FRAMES_INFO  -- kernel R, user R
	// Your code goes here:
	//cprintf("size of WorkingSetPage = %d\n",sizeof(struct WorkingSetPage));
	uint32 array_size;
	array_size = number_of_frames * sizeof(struct FrameInfo) ;
f0105ea0:	8b 15 d0 25 78 f0    	mov    0xf07825d0,%edx
f0105ea6:	89 d0                	mov    %edx,%eax
f0105ea8:	01 c0                	add    %eax,%eax
f0105eaa:	01 d0                	add    %edx,%eax
f0105eac:	c1 e0 03             	shl    $0x3,%eax
f0105eaf:	89 45 e0             	mov    %eax,-0x20(%ebp)
	frames_info = boot_allocate_space(array_size, PAGE_SIZE);
f0105eb2:	83 ec 08             	sub    $0x8,%esp
f0105eb5:	68 00 10 00 00       	push   $0x1000
f0105eba:	ff 75 e0             	pushl  -0x20(%ebp)
f0105ebd:	e8 5d 01 00 00       	call   f010601f <boot_allocate_space>
f0105ec2:	83 c4 10             	add    $0x10,%esp
f0105ec5:	a3 14 26 78 f0       	mov    %eax,0xf0782614
	memset(frames_info, 0, array_size);
f0105eca:	a1 14 26 78 f0       	mov    0xf0782614,%eax
f0105ecf:	83 ec 04             	sub    $0x4,%esp
f0105ed2:	ff 75 e0             	pushl  -0x20(%ebp)
f0105ed5:	6a 00                	push   $0x0
f0105ed7:	50                   	push   %eax
f0105ed8:	e8 03 b5 02 00       	call   f01313e0 <memset>
f0105edd:	83 c4 10             	add    $0x10,%esp
	//2016: Not valid any more since the RAM size exceed the 64 MB limit. This lead to the
	// 		size of "frames_info" can exceed the 4 MB space for "READ_ONLY_FRAMES_INFO"
	//boot_map_range(ptr_page_directory, READ_ONLY_FRAMES_INFO, array_size, STATIC_KERNEL_PHYSICAL_ADDRESS(frames_info),PERM_USER) ;


	uint32 disk_array_size = PAGES_PER_FILE * sizeof(struct FrameInfo);
f0105ee0:	c7 45 dc 00 c0 30 00 	movl   $0x30c000,-0x24(%ebp)
	disk_frames_info = boot_allocate_space(disk_array_size , PAGE_SIZE);
f0105ee7:	83 ec 08             	sub    $0x8,%esp
f0105eea:	68 00 10 00 00       	push   $0x1000
f0105eef:	ff 75 dc             	pushl  -0x24(%ebp)
f0105ef2:	e8 28 01 00 00       	call   f010601f <boot_allocate_space>
f0105ef7:	83 c4 10             	add    $0x10,%esp
f0105efa:	a3 9c 25 78 f0       	mov    %eax,0xf078259c
	memset(disk_frames_info , 0, disk_array_size);
f0105eff:	a1 9c 25 78 f0       	mov    0xf078259c,%eax
f0105f04:	83 ec 04             	sub    $0x4,%esp
f0105f07:	ff 75 dc             	pushl  -0x24(%ebp)
f0105f0a:	6a 00                	push   $0x0
f0105f0c:	50                   	push   %eax
f0105f0d:	e8 ce b4 02 00       	call   f01313e0 <memset>
f0105f12:	83 c4 10             	add    $0x10,%esp

	// This allows the kernel & user to access any page table entry using a
	// specified VA for each: VPT for kernel and UVPT for User.
	setup_listing_to_all_page_tables_entries();
f0105f15:	e8 d5 04 00 00       	call   f01063ef <setup_listing_to_all_page_tables_entries>
	// Permissions:
	//    - envs itself -- kernel RW, user NONE
	//    - the image of envs mapped at UENVS  -- kernel R, user R

	// LAB 3: Your code here.
	cprintf("Max Envs = %d, Nearest Pow of 2 = %d\n",NENV, NEARPOW2NENV);
f0105f1a:	83 ec 0c             	sub    $0xc,%esp
f0105f1d:	68 b1 02 00 00       	push   $0x2b1
f0105f22:	e8 3d a0 02 00       	call   f012ff64 <nearest_pow2_ceil>
f0105f27:	83 c4 10             	add    $0x10,%esp
f0105f2a:	83 ec 04             	sub    $0x4,%esp
f0105f2d:	50                   	push   %eax
f0105f2e:	68 b1 02 00 00       	push   $0x2b1
f0105f33:	68 88 5e 13 f0       	push   $0xf0135e88
f0105f38:	e8 d1 ad ff ff       	call   f0100d0e <cprintf>
f0105f3d:	83 c4 10             	add    $0x10,%esp
	int envs_size = NENV * sizeof(struct Env) ;
f0105f40:	c7 45 d8 f0 fa 0f 00 	movl   $0xffaf0,-0x28(%ebp)

	//allocate space for "envs" array aligned on 4KB boundary
	envs = boot_allocate_space(envs_size, PAGE_SIZE);
f0105f47:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0105f4a:	83 ec 08             	sub    $0x8,%esp
f0105f4d:	68 00 10 00 00       	push   $0x1000
f0105f52:	50                   	push   %eax
f0105f53:	e8 c7 00 00 00       	call   f010601f <boot_allocate_space>
f0105f58:	83 c4 10             	add    $0x10,%esp
f0105f5b:	a3 b0 1c 78 f0       	mov    %eax,0xf0781cb0
	memset(envs , 0, envs_size);
f0105f60:	8b 55 d8             	mov    -0x28(%ebp),%edx
f0105f63:	a1 b0 1c 78 f0       	mov    0xf0781cb0,%eax
f0105f68:	83 ec 04             	sub    $0x4,%esp
f0105f6b:	52                   	push   %edx
f0105f6c:	6a 00                	push   $0x0
f0105f6e:	50                   	push   %eax
f0105f6f:	e8 6c b4 02 00       	call   f01313e0 <memset>
f0105f74:	83 c4 10             	add    $0x10,%esp

	//make the user to access this array by mapping it to UPAGES linear address (UPAGES is in User/Kernel space)
	boot_map_range(ptr_page_directory, UENVS, envs_size, STATIC_KERNEL_PHYSICAL_ADDRESS(envs), PERM_USER) ;
f0105f77:	a1 b0 1c 78 f0       	mov    0xf0781cb0,%eax
f0105f7c:	89 45 d4             	mov    %eax,-0x2c(%ebp)
f0105f7f:	81 7d d4 ff ff ff ef 	cmpl   $0xefffffff,-0x2c(%ebp)
f0105f86:	77 17                	ja     f0105f9f <initialize_kernel_VM+0x202>
f0105f88:	ff 75 d4             	pushl  -0x2c(%ebp)
f0105f8b:	68 34 5e 13 f0       	push   $0xf0135e34
f0105f90:	68 96 00 00 00       	push   $0x96
f0105f95:	68 68 5e 13 f0       	push   $0xf0135e68
f0105f9a:	e8 66 a2 ff ff       	call   f0100205 <_panic>
f0105f9f:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0105fa2:	8d 88 00 00 00 10    	lea    0x10000000(%eax),%ecx
f0105fa8:	8b 55 d8             	mov    -0x28(%ebp),%edx
f0105fab:	a1 3c 26 78 f0       	mov    0xf078263c,%eax
f0105fb0:	83 ec 0c             	sub    $0xc,%esp
f0105fb3:	6a 04                	push   $0x4
f0105fb5:	51                   	push   %ecx
f0105fb6:	52                   	push   %edx
f0105fb7:	68 00 00 c0 ee       	push   $0xeec00000
f0105fbc:	50                   	push   %eax
f0105fbd:	e8 be 00 00 00       	call   f0106080 <boot_map_range>
f0105fc2:	83 c4 20             	add    $0x20,%esp

	//update permissions of the corresponding entry in page directory to make it USER with PERMISSION read only
	ptr_page_directory[PDX(UENVS)] = ptr_page_directory[PDX(UENVS)]|(PERM_USER|(PERM_PRESENT & (~PERM_WRITEABLE)));
f0105fc5:	a1 3c 26 78 f0       	mov    0xf078263c,%eax
f0105fca:	05 ec 0e 00 00       	add    $0xeec,%eax
f0105fcf:	8b 15 3c 26 78 f0    	mov    0xf078263c,%edx
f0105fd5:	81 c2 ec 0e 00 00    	add    $0xeec,%edx
f0105fdb:	8b 12                	mov    (%edx),%edx
f0105fdd:	83 ca 05             	or     $0x5,%edx
f0105fe0:	89 10                	mov    %edx,(%eax)
#if USE_KHEAP
	{
		// MAKE SURE THAT THIS MAPPING HAPPENS AFTER ALL BOOT ALLOCATIONS (boot_allocate_space)
		// calls are fininshed, and no remaining data to be allocated for the kernel
		// map all used pages so far for the kernel
		boot_map_range(ptr_page_directory, KERNEL_BASE, (uint32)ptr_free_mem - KERNEL_BASE, 0, PERM_WRITEABLE) ;
f0105fe2:	a1 38 26 78 f0       	mov    0xf0782638,%eax
f0105fe7:	8d 90 00 00 00 10    	lea    0x10000000(%eax),%edx
f0105fed:	a1 3c 26 78 f0       	mov    0xf078263c,%eax
f0105ff2:	83 ec 0c             	sub    $0xc,%esp
f0105ff5:	6a 02                	push   $0x2
f0105ff7:	6a 00                	push   $0x0
f0105ff9:	52                   	push   %edx
f0105ffa:	68 00 00 00 f0       	push   $0xf0000000
f0105fff:	50                   	push   %eax
f0106000:	e8 7b 00 00 00       	call   f0106080 <boot_map_range>
f0106005:	83 c4 20             	add    $0x20,%esp
	{
		boot_map_range(ptr_page_directory, KERNEL_BASE, 0xFFFFFFFF - KERNEL_BASE, 0, PERM_WRITEABLE) ;
	}
#endif
	// Check that the initial page directory has been set up correctly.
	check_boot_pgdir();
f0106008:	e8 3e a7 02 00       	call   f013074b <check_boot_pgdir>

	memory_scarce_threshold_percentage = DEFAULT_MEM_SCARCE_PERCENTAGE;	// Memory remains plentiful till % of free frames gets below 25% of the memory space
f010600d:	c7 05 b0 25 78 f0 19 	movl   $0x19,0xf07825b0
f0106014:	00 00 00 

	/*
	NOW: Turn off the segmentation by setting the segments' base to 0, and
	turn on the paging by setting the corresponding flags in control register 0 (cr0)
	 */
	turn_on_paging() ;
f0106017:	e8 d3 02 00 00       	call   f01062ef <turn_on_paging>
}
f010601c:	90                   	nop
f010601d:	c9                   	leave  
f010601e:	c3                   	ret    

f010601f <boot_allocate_space>:
// It's too early to run out of memory.
// This function may ONLY be used during boot time,
// before the free_frame_list has been set up.
//
void* boot_allocate_space(uint32 size, uint32 align)
{
f010601f:	55                   	push   %ebp
f0106020:	89 e5                	mov    %esp,%ebp
f0106022:	83 ec 10             	sub    $0x10,%esp
	// Initialize ptr_free_mem if this is the first time.
	// 'end_of_kernel' is a symbol automatically generated by the linker,
	// which points to the end of the kernel-
	// i.e., the first virtual address that the linker
	// did not assign to any kernel code or global variables.
	if (ptr_free_mem == 0)
f0106025:	a1 38 26 78 f0       	mov    0xf0782638,%eax
f010602a:	85 c0                	test   %eax,%eax
f010602c:	75 0a                	jne    f0106038 <boot_allocate_space+0x19>
		ptr_free_mem = end_of_kernel;
f010602e:	c7 05 38 26 78 f0 7c 	movl   $0xf078277c,0xf0782638
f0106035:	27 78 f0 

	// Your code here:
	//	Step 1: round ptr_free_mem up to be aligned properly
	ptr_free_mem = ROUNDUP(ptr_free_mem, align) ;
f0106038:	8b 45 0c             	mov    0xc(%ebp),%eax
f010603b:	89 45 fc             	mov    %eax,-0x4(%ebp)
f010603e:	a1 38 26 78 f0       	mov    0xf0782638,%eax
f0106043:	89 c2                	mov    %eax,%edx
f0106045:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0106048:	01 d0                	add    %edx,%eax
f010604a:	48                   	dec    %eax
f010604b:	89 45 f8             	mov    %eax,-0x8(%ebp)
f010604e:	8b 45 f8             	mov    -0x8(%ebp),%eax
f0106051:	ba 00 00 00 00       	mov    $0x0,%edx
f0106056:	f7 75 fc             	divl   -0x4(%ebp)
f0106059:	8b 45 f8             	mov    -0x8(%ebp),%eax
f010605c:	29 d0                	sub    %edx,%eax
f010605e:	a3 38 26 78 f0       	mov    %eax,0xf0782638

	//	Step 2: save current value of ptr_free_mem as allocated space
	void *ptr_allocated_mem;
	ptr_allocated_mem = ptr_free_mem ;
f0106063:	a1 38 26 78 f0       	mov    0xf0782638,%eax
f0106068:	89 45 f4             	mov    %eax,-0xc(%ebp)

	//	Step 3: increase ptr_free_mem to record allocation
	ptr_free_mem += size ;
f010606b:	8b 15 38 26 78 f0    	mov    0xf0782638,%edx
f0106071:	8b 45 08             	mov    0x8(%ebp),%eax
f0106074:	01 d0                	add    %edx,%eax
f0106076:	a3 38 26 78 f0       	mov    %eax,0xf0782638

	//// 2016: Step 3.5: initialize allocated space by ZEROOOOOOOOOOOOOO
	//memset(ptr_allocated_mem, 0, size);

	//	Step 4: return allocated space
	return ptr_allocated_mem ;
f010607b:	8b 45 f4             	mov    -0xc(%ebp),%eax

}
f010607e:	c9                   	leave  
f010607f:	c3                   	ret    

f0106080 <boot_map_range>:
//
// This function may ONLY be used during boot time,
// before the free_frame_list has been set up.
//
void boot_map_range(uint32 *ptr_page_directory, uint32 virtual_address, uint32 size, uint32 physical_address, int perm)
{
f0106080:	55                   	push   %ebp
f0106081:	89 e5                	mov    %esp,%ebp
f0106083:	83 ec 18             	sub    $0x18,%esp
	int i = 0 ;
f0106086:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	//physical_address = ROUNDUP(physical_address, PAGE_SIZE) ;
	///we assume here that all addresses are given divisible by 4 KB, look at boot_allocate_space ...

	for (i = 0 ; i < size ; i += PAGE_SIZE)
f010608d:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0106094:	eb 53                	jmp    f01060e9 <boot_map_range+0x69>
	{
		uint32 *ptr_page_table = boot_get_page_table(ptr_page_directory, virtual_address, 1) ;
f0106096:	83 ec 04             	sub    $0x4,%esp
f0106099:	6a 01                	push   $0x1
f010609b:	ff 75 0c             	pushl  0xc(%ebp)
f010609e:	ff 75 08             	pushl  0x8(%ebp)
f01060a1:	e8 4e 00 00 00       	call   f01060f4 <boot_get_page_table>
f01060a6:	83 c4 10             	add    $0x10,%esp
f01060a9:	89 45 f0             	mov    %eax,-0x10(%ebp)
		uint32 index_page_table = PTX(virtual_address);
f01060ac:	8b 45 0c             	mov    0xc(%ebp),%eax
f01060af:	c1 e8 0c             	shr    $0xc,%eax
f01060b2:	25 ff 03 00 00       	and    $0x3ff,%eax
f01060b7:	89 45 ec             	mov    %eax,-0x14(%ebp)
		//LOG_VARS("\nCONSTRUCT_ENTRY = %x",physical_address);
		ptr_page_table[index_page_table] = CONSTRUCT_ENTRY(physical_address, perm | PERM_PRESENT) ;
f01060ba:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01060bd:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f01060c4:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01060c7:	01 c2                	add    %eax,%edx
f01060c9:	8b 45 18             	mov    0x18(%ebp),%eax
f01060cc:	0b 45 14             	or     0x14(%ebp),%eax
f01060cf:	83 c8 01             	or     $0x1,%eax
f01060d2:	89 02                	mov    %eax,(%edx)

		physical_address += PAGE_SIZE ;
f01060d4:	81 45 14 00 10 00 00 	addl   $0x1000,0x14(%ebp)
		virtual_address += PAGE_SIZE ;
f01060db:	81 45 0c 00 10 00 00 	addl   $0x1000,0xc(%ebp)
{
	int i = 0 ;
	//physical_address = ROUNDUP(physical_address, PAGE_SIZE) ;
	///we assume here that all addresses are given divisible by 4 KB, look at boot_allocate_space ...

	for (i = 0 ; i < size ; i += PAGE_SIZE)
f01060e2:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
f01060e9:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01060ec:	3b 45 10             	cmp    0x10(%ebp),%eax
f01060ef:	72 a5                	jb     f0106096 <boot_map_range+0x16>
		ptr_page_table[index_page_table] = CONSTRUCT_ENTRY(physical_address, perm | PERM_PRESENT) ;

		physical_address += PAGE_SIZE ;
		virtual_address += PAGE_SIZE ;
	}
}
f01060f1:	90                   	nop
f01060f2:	c9                   	leave  
f01060f3:	c3                   	ret    

f01060f4 <boot_get_page_table>:
// boot_get_page_table cannot fail.  It's too early to fail.
// This function may ONLY be used during boot time,
// before the free_frame_list has been set up.
//
uint32* boot_get_page_table(uint32 *ptr_page_directory, uint32 virtual_address, int create)
{
f01060f4:	55                   	push   %ebp
f01060f5:	89 e5                	mov    %esp,%ebp
f01060f7:	83 ec 28             	sub    $0x28,%esp
	uint32 index_page_directory = PDX(virtual_address);
f01060fa:	8b 45 0c             	mov    0xc(%ebp),%eax
f01060fd:	c1 e8 16             	shr    $0x16,%eax
f0106100:	89 45 f4             	mov    %eax,-0xc(%ebp)
	uint32 page_directory_entry = ptr_page_directory[index_page_directory];
f0106103:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0106106:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f010610d:	8b 45 08             	mov    0x8(%ebp),%eax
f0106110:	01 d0                	add    %edx,%eax
f0106112:	8b 00                	mov    (%eax),%eax
f0106114:	89 45 f0             	mov    %eax,-0x10(%ebp)

	//cprintf("boot d ind = %d, entry = %x\n",index_page_directory, page_directory_entry);
	uint32 phys_page_table = EXTRACT_ADDRESS(page_directory_entry);
f0106117:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010611a:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f010611f:	89 45 ec             	mov    %eax,-0x14(%ebp)
	uint32 *ptr_page_table = STATIC_KERNEL_VIRTUAL_ADDRESS(phys_page_table);
f0106122:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0106125:	89 45 e8             	mov    %eax,-0x18(%ebp)
f0106128:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010612b:	c1 e8 0c             	shr    $0xc,%eax
f010612e:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f0106131:	a1 d0 25 78 f0       	mov    0xf07825d0,%eax
f0106136:	39 45 e4             	cmp    %eax,-0x1c(%ebp)
f0106139:	72 17                	jb     f0106152 <boot_get_page_table+0x5e>
f010613b:	ff 75 e8             	pushl  -0x18(%ebp)
f010613e:	68 b0 5e 13 f0       	push   $0xf0135eb0
f0106143:	68 15 01 00 00       	push   $0x115
f0106148:	68 68 5e 13 f0       	push   $0xf0135e68
f010614d:	e8 b3 a0 ff ff       	call   f0100205 <_panic>
f0106152:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0106155:	2d 00 00 00 10       	sub    $0x10000000,%eax
f010615a:	89 45 e0             	mov    %eax,-0x20(%ebp)
	if (phys_page_table == 0)
f010615d:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0106161:	75 72                	jne    f01061d5 <boot_get_page_table+0xe1>
	{
		if (create)
f0106163:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
f0106167:	74 65                	je     f01061ce <boot_get_page_table+0xda>
		{
			ptr_page_table = boot_allocate_space(PAGE_SIZE, PAGE_SIZE) ;
f0106169:	83 ec 08             	sub    $0x8,%esp
f010616c:	68 00 10 00 00       	push   $0x1000
f0106171:	68 00 10 00 00       	push   $0x1000
f0106176:	e8 a4 fe ff ff       	call   f010601f <boot_allocate_space>
f010617b:	83 c4 10             	add    $0x10,%esp
f010617e:	89 45 e0             	mov    %eax,-0x20(%ebp)
			phys_page_table = STATIC_KERNEL_PHYSICAL_ADDRESS(ptr_page_table);
f0106181:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0106184:	89 45 dc             	mov    %eax,-0x24(%ebp)
f0106187:	81 7d dc ff ff ff ef 	cmpl   $0xefffffff,-0x24(%ebp)
f010618e:	77 17                	ja     f01061a7 <boot_get_page_table+0xb3>
f0106190:	ff 75 dc             	pushl  -0x24(%ebp)
f0106193:	68 34 5e 13 f0       	push   $0xf0135e34
f0106198:	68 1b 01 00 00       	push   $0x11b
f010619d:	68 68 5e 13 f0       	push   $0xf0135e68
f01061a2:	e8 5e a0 ff ff       	call   f0100205 <_panic>
f01061a7:	8b 45 dc             	mov    -0x24(%ebp),%eax
f01061aa:	05 00 00 00 10       	add    $0x10000000,%eax
f01061af:	89 45 ec             	mov    %eax,-0x14(%ebp)
			ptr_page_directory[index_page_directory] = CONSTRUCT_ENTRY(phys_page_table, PERM_PRESENT | PERM_WRITEABLE);
f01061b2:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01061b5:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f01061bc:	8b 45 08             	mov    0x8(%ebp),%eax
f01061bf:	01 d0                	add    %edx,%eax
f01061c1:	8b 55 ec             	mov    -0x14(%ebp),%edx
f01061c4:	83 ca 03             	or     $0x3,%edx
f01061c7:	89 10                	mov    %edx,(%eax)
			return ptr_page_table ;
f01061c9:	8b 45 e0             	mov    -0x20(%ebp),%eax
f01061cc:	eb 0a                	jmp    f01061d8 <boot_get_page_table+0xe4>
		}
		else
			return 0 ;
f01061ce:	b8 00 00 00 00       	mov    $0x0,%eax
f01061d3:	eb 03                	jmp    f01061d8 <boot_get_page_table+0xe4>
	}
	return ptr_page_table ;
f01061d5:	8b 45 e0             	mov    -0x20(%ebp),%eax
}
f01061d8:	c9                   	leave  
f01061d9:	c3                   	ret    

f01061da <nvram_read>:


int nvram_read(int r)
{
f01061da:	55                   	push   %ebp
f01061db:	89 e5                	mov    %esp,%ebp
f01061dd:	53                   	push   %ebx
f01061de:	83 ec 04             	sub    $0x4,%esp
	return mc146818_read(r) | (mc146818_read(r + 1) << 8);
f01061e1:	8b 45 08             	mov    0x8(%ebp),%eax
f01061e4:	83 ec 0c             	sub    $0xc,%esp
f01061e7:	50                   	push   %eax
f01061e8:	e8 9b de ff ff       	call   f0104088 <mc146818_read>
f01061ed:	83 c4 10             	add    $0x10,%esp
f01061f0:	89 c3                	mov    %eax,%ebx
f01061f2:	8b 45 08             	mov    0x8(%ebp),%eax
f01061f5:	40                   	inc    %eax
f01061f6:	83 ec 0c             	sub    $0xc,%esp
f01061f9:	50                   	push   %eax
f01061fa:	e8 89 de ff ff       	call   f0104088 <mc146818_read>
f01061ff:	83 c4 10             	add    $0x10,%esp
f0106202:	c1 e0 08             	shl    $0x8,%eax
f0106205:	09 d8                	or     %ebx,%eax
}
f0106207:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f010620a:	c9                   	leave  
f010620b:	c3                   	ret    

f010620c <detect_memory>:

void detect_memory()
{
f010620c:	55                   	push   %ebp
f010620d:	89 e5                	mov    %esp,%ebp
f010620f:	83 ec 28             	sub    $0x28,%esp
	uint32 maxpa;	// Maximum physical address
	uint32 size_of_base_mem;		// Amount of base memory (in bytes)
	uint32 size_of_extended_mem;		// Amount of extended memory (in bytes)

	// CMOS tells us how many kilobytes there are
	size_of_base_mem = ROUNDDOWN(nvram_read(NVRAM_BASELO)*1024, PAGE_SIZE);
f0106212:	83 ec 0c             	sub    $0xc,%esp
f0106215:	6a 15                	push   $0x15
f0106217:	e8 be ff ff ff       	call   f01061da <nvram_read>
f010621c:	83 c4 10             	add    $0x10,%esp
f010621f:	c1 e0 0a             	shl    $0xa,%eax
f0106222:	89 45 ec             	mov    %eax,-0x14(%ebp)
f0106225:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0106228:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f010622d:	89 45 e8             	mov    %eax,-0x18(%ebp)
	size_of_extended_mem = ROUNDDOWN(nvram_read(NVRAM_EXTLO)*1024, PAGE_SIZE);
f0106230:	83 ec 0c             	sub    $0xc,%esp
f0106233:	6a 17                	push   $0x17
f0106235:	e8 a0 ff ff ff       	call   f01061da <nvram_read>
f010623a:	83 c4 10             	add    $0x10,%esp
f010623d:	c1 e0 0a             	shl    $0xa,%eax
f0106240:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f0106243:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0106246:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f010624b:	89 45 f0             	mov    %eax,-0x10(%ebp)
	//2016
	//For physical memory larger than 16MB, we needed to read total memory size
	// from a different register of the MC chip, see here:
	// http://bochs.sourceforge.net/techspec/CMOS-reference.txt
	// "CMOS 34h - AMI -"
	uint32 size_of_other_mem = ROUNDDOWN(nvram_read(0x34)*1024*64, PAGE_SIZE);
f010624e:	83 ec 0c             	sub    $0xc,%esp
f0106251:	6a 34                	push   $0x34
f0106253:	e8 82 ff ff ff       	call   f01061da <nvram_read>
f0106258:	83 c4 10             	add    $0x10,%esp
f010625b:	c1 e0 10             	shl    $0x10,%eax
f010625e:	89 45 e0             	mov    %eax,-0x20(%ebp)
f0106261:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0106264:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0106269:	89 45 dc             	mov    %eax,-0x24(%ebp)
	//cprintf("other mem = %dK\n", size_of_other_mem/1024);

	// Calculate the maximum physical address based on whether
	// or not there is any extended memory.  See comment in ../inc/mmu.h.
	//2016
	if(size_of_other_mem > 0)
f010626c:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f0106270:	74 18                	je     f010628a <detect_memory+0x7e>
	{
		maxpa = size_of_other_mem + 16*1024*1024;
f0106272:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0106275:	05 00 00 00 01       	add    $0x1000000,%eax
f010627a:	89 45 f4             	mov    %eax,-0xc(%ebp)
		size_of_extended_mem = maxpa - PHYS_EXTENDED_MEM;
f010627d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0106280:	2d 00 00 10 00       	sub    $0x100000,%eax
f0106285:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0106288:	eb 19                	jmp    f01062a3 <detect_memory+0x97>
	}
	else
	{
		if (size_of_extended_mem)
f010628a:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f010628e:	74 0d                	je     f010629d <detect_memory+0x91>
			maxpa = PHYS_EXTENDED_MEM + size_of_extended_mem;
f0106290:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0106293:	05 00 00 10 00       	add    $0x100000,%eax
f0106298:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010629b:	eb 06                	jmp    f01062a3 <detect_memory+0x97>
		else
			maxpa = size_of_extended_mem;
f010629d:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01062a0:	89 45 f4             	mov    %eax,-0xc(%ebp)
	}

	uint32 kernel_virtual_area = ((0xFFFFFFFF-KERNEL_BASE)+1);
f01062a3:	c7 45 d8 00 00 00 10 	movl   $0x10000000,-0x28(%ebp)
	{
		cprintf("Error!: Physical memory = %dK larger than kernel virtual area (%dK)\n", maxpa/1024, kernel_virtual_area/1024);
		cprintf("Cannot use physical memory larger than kernel virtual area\nTo enable physical memory larger than virtual kernel area, set USE_KHEAP = 1 in FOS code");
		while(1);
	}
	number_of_frames = maxpa / PAGE_SIZE;
f01062aa:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01062ad:	c1 e8 0c             	shr    $0xc,%eax
f01062b0:	a3 d0 25 78 f0       	mov    %eax,0xf07825d0

	cprintf("Physical memory: %dK available, ", (int)(maxpa/1024));
f01062b5:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01062b8:	c1 e8 0a             	shr    $0xa,%eax
f01062bb:	83 ec 08             	sub    $0x8,%esp
f01062be:	50                   	push   %eax
f01062bf:	68 e0 5e 13 f0       	push   $0xf0135ee0
f01062c4:	e8 45 aa ff ff       	call   f0100d0e <cprintf>
f01062c9:	83 c4 10             	add    $0x10,%esp
	cprintf("base = %dK, extended = %dK\n", (int)(size_of_base_mem/1024), (int)(size_of_extended_mem/1024));
f01062cc:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01062cf:	c1 e8 0a             	shr    $0xa,%eax
f01062d2:	89 c2                	mov    %eax,%edx
f01062d4:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01062d7:	c1 e8 0a             	shr    $0xa,%eax
f01062da:	83 ec 04             	sub    $0x4,%esp
f01062dd:	52                   	push   %edx
f01062de:	50                   	push   %eax
f01062df:	68 01 5f 13 f0       	push   $0xf0135f01
f01062e4:	e8 25 aa ff ff       	call   f0100d0e <cprintf>
f01062e9:	83 c4 10             	add    $0x10,%esp
}
f01062ec:	90                   	nop
f01062ed:	c9                   	leave  
f01062ee:	c3                   	ret    

f01062ef <turn_on_paging>:
// --------------------------------------------------------------
// Set up initial memory mappings and turn on MMU.
// --------------------------------------------------------------

void turn_on_paging()
{
f01062ef:	55                   	push   %ebp
f01062f0:	89 e5                	mov    %esp,%ebp
f01062f2:	83 ec 30             	sub    $0x30,%esp
	// (Limits our kernel to <4MB)

	//2016
	//ptr_page_directory[0] = ptr_page_directory[PDX(KERNEL_BASE)];
	{
		int i = PDX(KERNEL_BASE);
f01062f5:	c7 45 fc c0 03 00 00 	movl   $0x3c0,-0x4(%ebp)
		int j = 0;
f01062fc:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
		for(; i< PDX((uint32)ptr_free_mem); ++i, ++j)
f0106303:	eb 24                	jmp    f0106329 <turn_on_paging+0x3a>
		{
			ptr_page_directory[j] = ptr_page_directory[i];
f0106305:	a1 3c 26 78 f0       	mov    0xf078263c,%eax
f010630a:	8b 55 f8             	mov    -0x8(%ebp),%edx
f010630d:	c1 e2 02             	shl    $0x2,%edx
f0106310:	01 c2                	add    %eax,%edx
f0106312:	a1 3c 26 78 f0       	mov    0xf078263c,%eax
f0106317:	8b 4d fc             	mov    -0x4(%ebp),%ecx
f010631a:	c1 e1 02             	shl    $0x2,%ecx
f010631d:	01 c8                	add    %ecx,%eax
f010631f:	8b 00                	mov    (%eax),%eax
f0106321:	89 02                	mov    %eax,(%edx)
	//2016
	//ptr_page_directory[0] = ptr_page_directory[PDX(KERNEL_BASE)];
	{
		int i = PDX(KERNEL_BASE);
		int j = 0;
		for(; i< PDX((uint32)ptr_free_mem); ++i, ++j)
f0106323:	ff 45 fc             	incl   -0x4(%ebp)
f0106326:	ff 45 f8             	incl   -0x8(%ebp)
f0106329:	a1 38 26 78 f0       	mov    0xf0782638,%eax
f010632e:	c1 e8 16             	shr    $0x16,%eax
f0106331:	89 c2                	mov    %eax,%edx
f0106333:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0106336:	39 c2                	cmp    %eax,%edx
f0106338:	77 cb                	ja     f0106305 <turn_on_paging+0x16>
			ptr_page_directory[j] = ptr_page_directory[i];
		}
	}

	// Install page table.
	lcr3(phys_page_directory);
f010633a:	a1 6c 26 78 f0       	mov    0xf078266c,%eax
f010633f:	89 45 e8             	mov    %eax,-0x18(%ebp)
}

static __inline void
lcr3(uint32 val)
{
	__asm __volatile("movl %0,%%cr3" : : "r" (val));
f0106342:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0106345:	0f 22 d8             	mov    %eax,%cr3

static __inline uint32
rcr0(void)
{
	uint32 val;
	__asm __volatile("movl %%cr0,%0" : "=r" (val));
f0106348:	0f 20 c0             	mov    %cr0,%eax
f010634b:	89 45 e0             	mov    %eax,-0x20(%ebp)
	return val;
f010634e:	8b 45 e0             	mov    -0x20(%ebp),%eax

	// Turn on paging.
	uint32 cr0;
	cr0 = rcr0();
f0106351:	89 45 e4             	mov    %eax,-0x1c(%ebp)
	cr0 |= CR0_PE|CR0_PG|CR0_AM|CR0_WP|CR0_NE|CR0_TS|CR0_EM|CR0_MP;
f0106354:	81 4d e4 2f 00 05 80 	orl    $0x8005002f,-0x1c(%ebp)
	cr0 &= ~(CR0_TS|CR0_EM);
f010635b:	83 65 e4 f3          	andl   $0xfffffff3,-0x1c(%ebp)
f010635f:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0106362:	89 45 dc             	mov    %eax,-0x24(%ebp)
}

static __inline void
lcr0(uint32 val)
{
	__asm __volatile("movl %0,%%cr0" : : "r" (val));
f0106365:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0106368:	0f 22 c0             	mov    %eax,%cr0

	// Current mapping: KERNEL_BASE+x => x => x.
	// (x < 4MB so uses paging ptr_page_directory[0])

	// Reload all segment registers.
	asm volatile("lgdt gdt_pd");
f010636b:	0f 01 15 f0 28 19 f0 	lgdtl  0xf01928f0
	asm volatile("movw %%ax,%%gs" :: "a" (GD_UD|3));
f0106372:	b8 23 00 00 00       	mov    $0x23,%eax
f0106377:	8e e8                	mov    %eax,%gs
	asm volatile("movw %%ax,%%fs" :: "a" (GD_UD|3));
f0106379:	b8 23 00 00 00       	mov    $0x23,%eax
f010637e:	8e e0                	mov    %eax,%fs
	asm volatile("movw %%ax,%%es" :: "a" (GD_KD));
f0106380:	b8 10 00 00 00       	mov    $0x10,%eax
f0106385:	8e c0                	mov    %eax,%es
	asm volatile("movw %%ax,%%ds" :: "a" (GD_KD));
f0106387:	b8 10 00 00 00       	mov    $0x10,%eax
f010638c:	8e d8                	mov    %eax,%ds
	asm volatile("movw %%ax,%%ss" :: "a" (GD_KD));
f010638e:	b8 10 00 00 00       	mov    $0x10,%eax
f0106393:	8e d0                	mov    %eax,%ss
	asm volatile("ljmp %0,$1f\n 1:\n" :: "i" (GD_KT));  // reload cs
f0106395:	ea 9c 63 10 f0 08 00 	ljmp   $0x8,$0xf010639c
	asm volatile("lldt %%ax" :: "a" (0));
f010639c:	b8 00 00 00 00       	mov    $0x0,%eax
f01063a1:	0f 00 d0             	lldt   %ax
	// This mapping was only used after paging was turned on but
	// before the segment registers were reloaded.
	//2016
	//ptr_page_directory[0] = 0;
	{
		int i = PDX(KERNEL_BASE);
f01063a4:	c7 45 f4 c0 03 00 00 	movl   $0x3c0,-0xc(%ebp)
		int j = 0;
f01063ab:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
		for(; i< PDX((uint32)ptr_free_mem); ++i, ++j)
f01063b2:	eb 19                	jmp    f01063cd <turn_on_paging+0xde>
		{
			ptr_page_directory[j] = 0;
f01063b4:	a1 3c 26 78 f0       	mov    0xf078263c,%eax
f01063b9:	8b 55 f0             	mov    -0x10(%ebp),%edx
f01063bc:	c1 e2 02             	shl    $0x2,%edx
f01063bf:	01 d0                	add    %edx,%eax
f01063c1:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	//2016
	//ptr_page_directory[0] = 0;
	{
		int i = PDX(KERNEL_BASE);
		int j = 0;
		for(; i< PDX((uint32)ptr_free_mem); ++i, ++j)
f01063c7:	ff 45 f4             	incl   -0xc(%ebp)
f01063ca:	ff 45 f0             	incl   -0x10(%ebp)
f01063cd:	a1 38 26 78 f0       	mov    0xf0782638,%eax
f01063d2:	c1 e8 16             	shr    $0x16,%eax
f01063d5:	89 c2                	mov    %eax,%edx
f01063d7:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01063da:	39 c2                	cmp    %eax,%edx
f01063dc:	77 d6                	ja     f01063b4 <turn_on_paging+0xc5>
		{
			ptr_page_directory[j] = 0;
		}
	}
	// Flush the TLB for good measure, to kill the ptr_page_directory[0] mapping.
	lcr3(phys_page_directory);
f01063de:	a1 6c 26 78 f0       	mov    0xf078266c,%eax
f01063e3:	89 45 ec             	mov    %eax,-0x14(%ebp)
}

static __inline void
lcr3(uint32 val)
{
	__asm __volatile("movl %0,%%cr3" : : "r" (val));
f01063e6:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01063e9:	0f 22 d8             	mov    %eax,%cr3
}
f01063ec:	90                   	nop
f01063ed:	c9                   	leave  
f01063ee:	c3                   	ret    

f01063ef <setup_listing_to_all_page_tables_entries>:

void setup_listing_to_all_page_tables_entries()
{
f01063ef:	55                   	push   %ebp
f01063f0:	89 e5                	mov    %esp,%ebp
f01063f2:	83 ec 18             	sub    $0x18,%esp
	//////////////////////////////////////////////////////////////////////
	// Recursively insert PD in itself as a page table, to form
	// a virtual page table at virtual address VPT.

	// Permissions: kernel RW, user NONE
	uint32 phys_frame_address = STATIC_KERNEL_PHYSICAL_ADDRESS(ptr_page_directory);
f01063f5:	a1 3c 26 78 f0       	mov    0xf078263c,%eax
f01063fa:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01063fd:	81 7d f4 ff ff ff ef 	cmpl   $0xefffffff,-0xc(%ebp)
f0106404:	77 17                	ja     f010641d <setup_listing_to_all_page_tables_entries+0x2e>
f0106406:	ff 75 f4             	pushl  -0xc(%ebp)
f0106409:	68 34 5e 13 f0       	push   $0xf0135e34
f010640e:	68 ab 01 00 00       	push   $0x1ab
f0106413:	68 68 5e 13 f0       	push   $0xf0135e68
f0106418:	e8 e8 9d ff ff       	call   f0100205 <_panic>
f010641d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0106420:	05 00 00 00 10       	add    $0x10000000,%eax
f0106425:	89 45 f0             	mov    %eax,-0x10(%ebp)
	ptr_page_directory[PDX(VPT)] = CONSTRUCT_ENTRY(phys_frame_address , PERM_PRESENT | PERM_WRITEABLE);
f0106428:	a1 3c 26 78 f0       	mov    0xf078263c,%eax
f010642d:	05 fc 0e 00 00       	add    $0xefc,%eax
f0106432:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0106435:	83 ca 03             	or     $0x3,%edx
f0106438:	89 10                	mov    %edx,(%eax)

	// same for UVPT
	//Permissions: kernel R, user R
	ptr_page_directory[PDX(UVPT)] = STATIC_KERNEL_PHYSICAL_ADDRESS(ptr_page_directory)|PERM_USER|PERM_PRESENT;
f010643a:	a1 3c 26 78 f0       	mov    0xf078263c,%eax
f010643f:	8d 90 f4 0e 00 00    	lea    0xef4(%eax),%edx
f0106445:	a1 3c 26 78 f0       	mov    0xf078263c,%eax
f010644a:	89 45 ec             	mov    %eax,-0x14(%ebp)
f010644d:	81 7d ec ff ff ff ef 	cmpl   $0xefffffff,-0x14(%ebp)
f0106454:	77 17                	ja     f010646d <setup_listing_to_all_page_tables_entries+0x7e>
f0106456:	ff 75 ec             	pushl  -0x14(%ebp)
f0106459:	68 34 5e 13 f0       	push   $0xf0135e34
f010645e:	68 b0 01 00 00       	push   $0x1b0
f0106463:	68 68 5e 13 f0       	push   $0xf0135e68
f0106468:	e8 98 9d ff ff       	call   f0100205 <_panic>
f010646d:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0106470:	05 00 00 00 10       	add    $0x10000000,%eax
f0106475:	83 c8 05             	or     $0x5,%eax
f0106478:	89 02                	mov    %eax,(%edx)

}
f010647a:	90                   	nop
f010647b:	c9                   	leave  
f010647c:	c3                   	ret    

f010647d <to_frame_number>:
struct FrameInfo *get_frame_info(uint32 *ptr_page_directory, uint32 virtual_address, uint32 **ptr_page_table);
void decrement_references(struct FrameInfo* ptr_frame_info);
void initialize_frame_info(struct FrameInfo *ptr_frame_info);

static inline uint32 to_frame_number(struct FrameInfo *ptr_frame_info)
{
f010647d:	55                   	push   %ebp
f010647e:	89 e5                	mov    %esp,%ebp
	return ptr_frame_info - frames_info;
f0106480:	8b 45 08             	mov    0x8(%ebp),%eax
f0106483:	8b 15 14 26 78 f0    	mov    0xf0782614,%edx
f0106489:	29 d0                	sub    %edx,%eax
f010648b:	c1 f8 03             	sar    $0x3,%eax
f010648e:	89 c2                	mov    %eax,%edx
f0106490:	89 d0                	mov    %edx,%eax
f0106492:	c1 e0 02             	shl    $0x2,%eax
f0106495:	01 d0                	add    %edx,%eax
f0106497:	c1 e0 02             	shl    $0x2,%eax
f010649a:	01 d0                	add    %edx,%eax
f010649c:	c1 e0 02             	shl    $0x2,%eax
f010649f:	01 d0                	add    %edx,%eax
f01064a1:	89 c1                	mov    %eax,%ecx
f01064a3:	c1 e1 08             	shl    $0x8,%ecx
f01064a6:	01 c8                	add    %ecx,%eax
f01064a8:	89 c1                	mov    %eax,%ecx
f01064aa:	c1 e1 10             	shl    $0x10,%ecx
f01064ad:	01 c8                	add    %ecx,%eax
f01064af:	01 c0                	add    %eax,%eax
f01064b1:	01 d0                	add    %edx,%eax
}
f01064b3:	5d                   	pop    %ebp
f01064b4:	c3                   	ret    

f01064b5 <to_physical_address>:

static inline uint32 to_physical_address(struct FrameInfo *ptr_frame_info)
{
f01064b5:	55                   	push   %ebp
f01064b6:	89 e5                	mov    %esp,%ebp
	return to_frame_number(ptr_frame_info) << PGSHIFT;
f01064b8:	ff 75 08             	pushl  0x8(%ebp)
f01064bb:	e8 bd ff ff ff       	call   f010647d <to_frame_number>
f01064c0:	83 c4 04             	add    $0x4,%esp
f01064c3:	c1 e0 0c             	shl    $0xc,%eax
}
f01064c6:	c9                   	leave  
f01064c7:	c3                   	ret    

f01064c8 <to_frame_info>:

static inline struct FrameInfo* to_frame_info(uint32 physical_address)
{
f01064c8:	55                   	push   %ebp
f01064c9:	89 e5                	mov    %esp,%ebp
f01064cb:	83 ec 08             	sub    $0x8,%esp
	if (PPN(physical_address) >= number_of_frames)
f01064ce:	8b 45 08             	mov    0x8(%ebp),%eax
f01064d1:	c1 e8 0c             	shr    $0xc,%eax
f01064d4:	89 c2                	mov    %eax,%edx
f01064d6:	a1 d0 25 78 f0       	mov    0xf07825d0,%eax
f01064db:	39 c2                	cmp    %eax,%edx
f01064dd:	72 14                	jb     f01064f3 <to_frame_info+0x2b>
		panic("to_frame_info called with invalid pa");
f01064df:	83 ec 04             	sub    $0x4,%esp
f01064e2:	68 20 5f 13 f0       	push   $0xf0135f20
f01064e7:	6a 55                	push   $0x55
f01064e9:	68 45 5f 13 f0       	push   $0xf0135f45
f01064ee:	e8 12 9d ff ff       	call   f0100205 <_panic>
	return &frames_info[PPN(physical_address)];
f01064f3:	8b 15 14 26 78 f0    	mov    0xf0782614,%edx
f01064f9:	8b 45 08             	mov    0x8(%ebp),%eax
f01064fc:	c1 e8 0c             	shr    $0xc,%eax
f01064ff:	89 c1                	mov    %eax,%ecx
f0106501:	89 c8                	mov    %ecx,%eax
f0106503:	01 c0                	add    %eax,%eax
f0106505:	01 c8                	add    %ecx,%eax
f0106507:	c1 e0 03             	shl    $0x3,%eax
f010650a:	01 d0                	add    %edx,%eax
}
f010650c:	c9                   	leave  
f010650d:	c3                   	ret    

f010650e <tlb_invalidate>:




void tlb_invalidate(uint32 *ptr_page_directory, void *virtual_address)
{
f010650e:	55                   	push   %ebp
f010650f:	89 e5                	mov    %esp,%ebp
f0106511:	83 ec 10             	sub    $0x10,%esp
f0106514:	8b 45 0c             	mov    0xc(%ebp),%eax
f0106517:	89 45 fc             	mov    %eax,-0x4(%ebp)
}

static __inline void 
invlpg(void *addr)
{ 
	__asm __volatile("invlpg (%0)" : : "r" (addr) : "memory");
f010651a:	8b 45 fc             	mov    -0x4(%ebp),%eax
f010651d:	0f 01 38             	invlpg (%eax)
	// Flush the entry only if we're modifying the current address space.
	// For now, there is only one address space, so always invalidate.
	invlpg(virtual_address);
}
f0106520:	90                   	nop
f0106521:	c9                   	leave  
f0106522:	c3                   	ret    

f0106523 <initialize_paging>:
// and NEVER use boot_allocate_space() or the related boot-time functions above.
//

extern void initialize_disk_page_file();
void initialize_paging()
{
f0106523:	55                   	push   %ebp
f0106524:	89 e5                	mov    %esp,%ebp
f0106526:	53                   	push   %ebx
f0106527:	83 ec 24             	sub    $0x24,%esp
	//     Some of it is in use, some is free. Where is the kernel?
	//     Which frames are used for page tables and other data structures?
	//
	// Change the code to reflect this.
	int i;
	LIST_INIT(&free_frame_list);
f010652a:	c7 05 d8 25 78 f0 00 	movl   $0x0,0xf07825d8
f0106531:	00 00 00 
f0106534:	c7 05 dc 25 78 f0 00 	movl   $0x0,0xf07825dc
f010653b:	00 00 00 
f010653e:	c7 05 e4 25 78 f0 00 	movl   $0x0,0xf07825e4
f0106545:	00 00 00 
	LIST_INIT(&modified_frame_list);
f0106548:	c7 05 78 25 78 f0 00 	movl   $0x0,0xf0782578
f010654f:	00 00 00 
f0106552:	c7 05 7c 25 78 f0 00 	movl   $0x0,0xf078257c
f0106559:	00 00 00 
f010655c:	c7 05 84 25 78 f0 00 	movl   $0x0,0xf0782584
f0106563:	00 00 00 

	frames_info[0].references = 1;
f0106566:	a1 14 26 78 f0       	mov    0xf0782614,%eax
f010656b:	66 c7 40 08 01 00    	movw   $0x1,0x8(%eax)
	frames_info[1].references = 1;
f0106571:	a1 14 26 78 f0       	mov    0xf0782614,%eax
f0106576:	83 c0 18             	add    $0x18,%eax
f0106579:	66 c7 40 08 01 00    	movw   $0x1,0x8(%eax)
	frames_info[2].references = 1;
f010657f:	a1 14 26 78 f0       	mov    0xf0782614,%eax
f0106584:	83 c0 30             	add    $0x30,%eax
f0106587:	66 c7 40 08 01 00    	movw   $0x1,0x8(%eax)
	ptr_zero_page = (uint8*) KERNEL_BASE+PAGE_SIZE;
f010658d:	c7 05 20 26 78 f0 00 	movl   $0xf0001000,0xf0782620
f0106594:	10 00 f0 
	ptr_temp_page = (uint8*) KERNEL_BASE+2*PAGE_SIZE;
f0106597:	c7 05 44 26 78 f0 00 	movl   $0xf0002000,0xf0782644
f010659e:	20 00 f0 
	i =0;
f01065a1:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	for(;i<1024; i++)
f01065a8:	eb 1f                	jmp    f01065c9 <initialize_paging+0xa6>
	{
		ptr_zero_page[i]=0;
f01065aa:	8b 15 20 26 78 f0    	mov    0xf0782620,%edx
f01065b0:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01065b3:	01 d0                	add    %edx,%eax
f01065b5:	c6 00 00             	movb   $0x0,(%eax)
		ptr_temp_page[i]=0;
f01065b8:	8b 15 44 26 78 f0    	mov    0xf0782644,%edx
f01065be:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01065c1:	01 d0                	add    %edx,%eax
f01065c3:	c6 00 00             	movb   $0x0,(%eax)
	frames_info[1].references = 1;
	frames_info[2].references = 1;
	ptr_zero_page = (uint8*) KERNEL_BASE+PAGE_SIZE;
	ptr_temp_page = (uint8*) KERNEL_BASE+2*PAGE_SIZE;
	i =0;
	for(;i<1024; i++)
f01065c6:	ff 45 f4             	incl   -0xc(%ebp)
f01065c9:	81 7d f4 ff 03 00 00 	cmpl   $0x3ff,-0xc(%ebp)
f01065d0:	7e d8                	jle    f01065aa <initialize_paging+0x87>
	{
		ptr_zero_page[i]=0;
		ptr_temp_page[i]=0;
	}

	int range_end = ROUNDUP(PHYS_IO_MEM,PAGE_SIZE);
f01065d2:	c7 45 f0 00 10 00 00 	movl   $0x1000,-0x10(%ebp)
f01065d9:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01065dc:	05 ff ff 09 00       	add    $0x9ffff,%eax
f01065e1:	89 45 ec             	mov    %eax,-0x14(%ebp)
f01065e4:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01065e7:	ba 00 00 00 00       	mov    $0x0,%edx
f01065ec:	f7 75 f0             	divl   -0x10(%ebp)
f01065ef:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01065f2:	29 d0                	sub    %edx,%eax
f01065f4:	89 45 e8             	mov    %eax,-0x18(%ebp)

	for (i = 3; i < range_end/PAGE_SIZE; i++)
f01065f7:	c7 45 f4 03 00 00 00 	movl   $0x3,-0xc(%ebp)
f01065fe:	e9 e8 00 00 00       	jmp    f01066eb <initialize_paging+0x1c8>
	{

		initialize_frame_info(&(frames_info[i]));
f0106603:	8b 0d 14 26 78 f0    	mov    0xf0782614,%ecx
f0106609:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010660c:	89 d0                	mov    %edx,%eax
f010660e:	01 c0                	add    %eax,%eax
f0106610:	01 d0                	add    %edx,%eax
f0106612:	c1 e0 03             	shl    $0x3,%eax
f0106615:	01 c8                	add    %ecx,%eax
f0106617:	83 ec 0c             	sub    $0xc,%esp
f010661a:	50                   	push   %eax
f010661b:	e8 b7 02 00 00       	call   f01068d7 <initialize_frame_info>
f0106620:	83 c4 10             	add    $0x10,%esp
		//frames_info[i].references = 0;

		LIST_INSERT_HEAD(&free_frame_list, &frames_info[i]);
f0106623:	8b 0d 14 26 78 f0    	mov    0xf0782614,%ecx
f0106629:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010662c:	89 d0                	mov    %edx,%eax
f010662e:	01 c0                	add    %eax,%eax
f0106630:	01 d0                	add    %edx,%eax
f0106632:	c1 e0 03             	shl    $0x3,%eax
f0106635:	01 c8                	add    %ecx,%eax
f0106637:	85 c0                	test   %eax,%eax
f0106639:	75 14                	jne    f010664f <initialize_paging+0x12c>
f010663b:	83 ec 04             	sub    $0x4,%esp
f010663e:	68 60 5f 13 f0       	push   $0xf0135f60
f0106643:	6a 5c                	push   $0x5c
f0106645:	68 83 5f 13 f0       	push   $0xf0135f83
f010664a:	e8 b6 9b ff ff       	call   f0100205 <_panic>
f010664f:	8b 0d 14 26 78 f0    	mov    0xf0782614,%ecx
f0106655:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0106658:	89 d0                	mov    %edx,%eax
f010665a:	01 c0                	add    %eax,%eax
f010665c:	01 d0                	add    %edx,%eax
f010665e:	c1 e0 03             	shl    $0x3,%eax
f0106661:	01 c8                	add    %ecx,%eax
f0106663:	8b 15 d8 25 78 f0    	mov    0xf07825d8,%edx
f0106669:	89 10                	mov    %edx,(%eax)
f010666b:	8b 00                	mov    (%eax),%eax
f010666d:	85 c0                	test   %eax,%eax
f010666f:	74 1f                	je     f0106690 <initialize_paging+0x16d>
f0106671:	8b 15 d8 25 78 f0    	mov    0xf07825d8,%edx
f0106677:	8b 1d 14 26 78 f0    	mov    0xf0782614,%ebx
f010667d:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0106680:	89 c8                	mov    %ecx,%eax
f0106682:	01 c0                	add    %eax,%eax
f0106684:	01 c8                	add    %ecx,%eax
f0106686:	c1 e0 03             	shl    $0x3,%eax
f0106689:	01 d8                	add    %ebx,%eax
f010668b:	89 42 04             	mov    %eax,0x4(%edx)
f010668e:	eb 19                	jmp    f01066a9 <initialize_paging+0x186>
f0106690:	8b 0d 14 26 78 f0    	mov    0xf0782614,%ecx
f0106696:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0106699:	89 d0                	mov    %edx,%eax
f010669b:	01 c0                	add    %eax,%eax
f010669d:	01 d0                	add    %edx,%eax
f010669f:	c1 e0 03             	shl    $0x3,%eax
f01066a2:	01 c8                	add    %ecx,%eax
f01066a4:	a3 dc 25 78 f0       	mov    %eax,0xf07825dc
f01066a9:	8b 0d 14 26 78 f0    	mov    0xf0782614,%ecx
f01066af:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01066b2:	89 d0                	mov    %edx,%eax
f01066b4:	01 c0                	add    %eax,%eax
f01066b6:	01 d0                	add    %edx,%eax
f01066b8:	c1 e0 03             	shl    $0x3,%eax
f01066bb:	01 c8                	add    %ecx,%eax
f01066bd:	a3 d8 25 78 f0       	mov    %eax,0xf07825d8
f01066c2:	8b 0d 14 26 78 f0    	mov    0xf0782614,%ecx
f01066c8:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01066cb:	89 d0                	mov    %edx,%eax
f01066cd:	01 c0                	add    %eax,%eax
f01066cf:	01 d0                	add    %edx,%eax
f01066d1:	c1 e0 03             	shl    $0x3,%eax
f01066d4:	01 c8                	add    %ecx,%eax
f01066d6:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f01066dd:	a1 e4 25 78 f0       	mov    0xf07825e4,%eax
f01066e2:	40                   	inc    %eax
f01066e3:	a3 e4 25 78 f0       	mov    %eax,0xf07825e4
		ptr_temp_page[i]=0;
	}

	int range_end = ROUNDUP(PHYS_IO_MEM,PAGE_SIZE);

	for (i = 3; i < range_end/PAGE_SIZE; i++)
f01066e8:	ff 45 f4             	incl   -0xc(%ebp)
f01066eb:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01066ee:	85 c0                	test   %eax,%eax
f01066f0:	79 05                	jns    f01066f7 <initialize_paging+0x1d4>
f01066f2:	05 ff 0f 00 00       	add    $0xfff,%eax
f01066f7:	c1 f8 0c             	sar    $0xc,%eax
f01066fa:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01066fd:	0f 8f 00 ff ff ff    	jg     f0106603 <initialize_paging+0xe0>
		//frames_info[i].references = 0;

		LIST_INSERT_HEAD(&free_frame_list, &frames_info[i]);
	}

	for (i = PHYS_IO_MEM/PAGE_SIZE ; i < PHYS_EXTENDED_MEM/PAGE_SIZE; i++)
f0106703:	c7 45 f4 a0 00 00 00 	movl   $0xa0,-0xc(%ebp)
f010670a:	eb 1d                	jmp    f0106729 <initialize_paging+0x206>
	{
		frames_info[i].references = 1;
f010670c:	8b 0d 14 26 78 f0    	mov    0xf0782614,%ecx
f0106712:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0106715:	89 d0                	mov    %edx,%eax
f0106717:	01 c0                	add    %eax,%eax
f0106719:	01 d0                	add    %edx,%eax
f010671b:	c1 e0 03             	shl    $0x3,%eax
f010671e:	01 c8                	add    %ecx,%eax
f0106720:	66 c7 40 08 01 00    	movw   $0x1,0x8(%eax)
		//frames_info[i].references = 0;

		LIST_INSERT_HEAD(&free_frame_list, &frames_info[i]);
	}

	for (i = PHYS_IO_MEM/PAGE_SIZE ; i < PHYS_EXTENDED_MEM/PAGE_SIZE; i++)
f0106726:	ff 45 f4             	incl   -0xc(%ebp)
f0106729:	81 7d f4 ff 00 00 00 	cmpl   $0xff,-0xc(%ebp)
f0106730:	7e da                	jle    f010670c <initialize_paging+0x1e9>
	{
		frames_info[i].references = 1;
	}

	range_end = ROUNDUP(STATIC_KERNEL_PHYSICAL_ADDRESS(ptr_free_mem), PAGE_SIZE);
f0106732:	c7 45 e4 00 10 00 00 	movl   $0x1000,-0x1c(%ebp)
f0106739:	a1 38 26 78 f0       	mov    0xf0782638,%eax
f010673e:	89 45 e0             	mov    %eax,-0x20(%ebp)
f0106741:	81 7d e0 ff ff ff ef 	cmpl   $0xefffffff,-0x20(%ebp)
f0106748:	77 14                	ja     f010675e <initialize_paging+0x23b>
f010674a:	ff 75 e0             	pushl  -0x20(%ebp)
f010674d:	68 a0 5f 13 f0       	push   $0xf0135fa0
f0106752:	6a 64                	push   $0x64
f0106754:	68 83 5f 13 f0       	push   $0xf0135f83
f0106759:	e8 a7 9a ff ff       	call   f0100205 <_panic>
f010675e:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0106761:	8d 90 00 00 00 10    	lea    0x10000000(%eax),%edx
f0106767:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010676a:	01 d0                	add    %edx,%eax
f010676c:	48                   	dec    %eax
f010676d:	89 45 dc             	mov    %eax,-0x24(%ebp)
f0106770:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0106773:	ba 00 00 00 00       	mov    $0x0,%edx
f0106778:	f7 75 e4             	divl   -0x1c(%ebp)
f010677b:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010677e:	29 d0                	sub    %edx,%eax
f0106780:	89 45 e8             	mov    %eax,-0x18(%ebp)

	for (i = PHYS_EXTENDED_MEM/PAGE_SIZE ; i < range_end/PAGE_SIZE; i++)
f0106783:	c7 45 f4 00 01 00 00 	movl   $0x100,-0xc(%ebp)
f010678a:	eb 1d                	jmp    f01067a9 <initialize_paging+0x286>
	{
		frames_info[i].references = 1;
f010678c:	8b 0d 14 26 78 f0    	mov    0xf0782614,%ecx
f0106792:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0106795:	89 d0                	mov    %edx,%eax
f0106797:	01 c0                	add    %eax,%eax
f0106799:	01 d0                	add    %edx,%eax
f010679b:	c1 e0 03             	shl    $0x3,%eax
f010679e:	01 c8                	add    %ecx,%eax
f01067a0:	66 c7 40 08 01 00    	movw   $0x1,0x8(%eax)
		frames_info[i].references = 1;
	}

	range_end = ROUNDUP(STATIC_KERNEL_PHYSICAL_ADDRESS(ptr_free_mem), PAGE_SIZE);

	for (i = PHYS_EXTENDED_MEM/PAGE_SIZE ; i < range_end/PAGE_SIZE; i++)
f01067a6:	ff 45 f4             	incl   -0xc(%ebp)
f01067a9:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01067ac:	85 c0                	test   %eax,%eax
f01067ae:	79 05                	jns    f01067b5 <initialize_paging+0x292>
f01067b0:	05 ff 0f 00 00       	add    $0xfff,%eax
f01067b5:	c1 f8 0c             	sar    $0xc,%eax
f01067b8:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01067bb:	7f cf                	jg     f010678c <initialize_paging+0x269>
	{
		frames_info[i].references = 1;
	}

	for (i = range_end/PAGE_SIZE ; i < number_of_frames; i++)
f01067bd:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01067c0:	85 c0                	test   %eax,%eax
f01067c2:	79 05                	jns    f01067c9 <initialize_paging+0x2a6>
f01067c4:	05 ff 0f 00 00       	add    $0xfff,%eax
f01067c9:	c1 f8 0c             	sar    $0xc,%eax
f01067cc:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01067cf:	e9 e8 00 00 00       	jmp    f01068bc <initialize_paging+0x399>
	{
		initialize_frame_info(&(frames_info[i]));
f01067d4:	8b 0d 14 26 78 f0    	mov    0xf0782614,%ecx
f01067da:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01067dd:	89 d0                	mov    %edx,%eax
f01067df:	01 c0                	add    %eax,%eax
f01067e1:	01 d0                	add    %edx,%eax
f01067e3:	c1 e0 03             	shl    $0x3,%eax
f01067e6:	01 c8                	add    %ecx,%eax
f01067e8:	83 ec 0c             	sub    $0xc,%esp
f01067eb:	50                   	push   %eax
f01067ec:	e8 e6 00 00 00       	call   f01068d7 <initialize_frame_info>
f01067f1:	83 c4 10             	add    $0x10,%esp

		//frames_info[i].references = 0;
		LIST_INSERT_HEAD(&free_frame_list, &frames_info[i]);
f01067f4:	8b 0d 14 26 78 f0    	mov    0xf0782614,%ecx
f01067fa:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01067fd:	89 d0                	mov    %edx,%eax
f01067ff:	01 c0                	add    %eax,%eax
f0106801:	01 d0                	add    %edx,%eax
f0106803:	c1 e0 03             	shl    $0x3,%eax
f0106806:	01 c8                	add    %ecx,%eax
f0106808:	85 c0                	test   %eax,%eax
f010680a:	75 14                	jne    f0106820 <initialize_paging+0x2fd>
f010680c:	83 ec 04             	sub    $0x4,%esp
f010680f:	68 60 5f 13 f0       	push   $0xf0135f60
f0106814:	6a 70                	push   $0x70
f0106816:	68 83 5f 13 f0       	push   $0xf0135f83
f010681b:	e8 e5 99 ff ff       	call   f0100205 <_panic>
f0106820:	8b 0d 14 26 78 f0    	mov    0xf0782614,%ecx
f0106826:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0106829:	89 d0                	mov    %edx,%eax
f010682b:	01 c0                	add    %eax,%eax
f010682d:	01 d0                	add    %edx,%eax
f010682f:	c1 e0 03             	shl    $0x3,%eax
f0106832:	01 c8                	add    %ecx,%eax
f0106834:	8b 15 d8 25 78 f0    	mov    0xf07825d8,%edx
f010683a:	89 10                	mov    %edx,(%eax)
f010683c:	8b 00                	mov    (%eax),%eax
f010683e:	85 c0                	test   %eax,%eax
f0106840:	74 1f                	je     f0106861 <initialize_paging+0x33e>
f0106842:	8b 15 d8 25 78 f0    	mov    0xf07825d8,%edx
f0106848:	8b 1d 14 26 78 f0    	mov    0xf0782614,%ebx
f010684e:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0106851:	89 c8                	mov    %ecx,%eax
f0106853:	01 c0                	add    %eax,%eax
f0106855:	01 c8                	add    %ecx,%eax
f0106857:	c1 e0 03             	shl    $0x3,%eax
f010685a:	01 d8                	add    %ebx,%eax
f010685c:	89 42 04             	mov    %eax,0x4(%edx)
f010685f:	eb 19                	jmp    f010687a <initialize_paging+0x357>
f0106861:	8b 0d 14 26 78 f0    	mov    0xf0782614,%ecx
f0106867:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010686a:	89 d0                	mov    %edx,%eax
f010686c:	01 c0                	add    %eax,%eax
f010686e:	01 d0                	add    %edx,%eax
f0106870:	c1 e0 03             	shl    $0x3,%eax
f0106873:	01 c8                	add    %ecx,%eax
f0106875:	a3 dc 25 78 f0       	mov    %eax,0xf07825dc
f010687a:	8b 0d 14 26 78 f0    	mov    0xf0782614,%ecx
f0106880:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0106883:	89 d0                	mov    %edx,%eax
f0106885:	01 c0                	add    %eax,%eax
f0106887:	01 d0                	add    %edx,%eax
f0106889:	c1 e0 03             	shl    $0x3,%eax
f010688c:	01 c8                	add    %ecx,%eax
f010688e:	a3 d8 25 78 f0       	mov    %eax,0xf07825d8
f0106893:	8b 0d 14 26 78 f0    	mov    0xf0782614,%ecx
f0106899:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010689c:	89 d0                	mov    %edx,%eax
f010689e:	01 c0                	add    %eax,%eax
f01068a0:	01 d0                	add    %edx,%eax
f01068a2:	c1 e0 03             	shl    $0x3,%eax
f01068a5:	01 c8                	add    %ecx,%eax
f01068a7:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f01068ae:	a1 e4 25 78 f0       	mov    0xf07825e4,%eax
f01068b3:	40                   	inc    %eax
f01068b4:	a3 e4 25 78 f0       	mov    %eax,0xf07825e4
	for (i = PHYS_EXTENDED_MEM/PAGE_SIZE ; i < range_end/PAGE_SIZE; i++)
	{
		frames_info[i].references = 1;
	}

	for (i = range_end/PAGE_SIZE ; i < number_of_frames; i++)
f01068b9:	ff 45 f4             	incl   -0xc(%ebp)
f01068bc:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01068bf:	a1 d0 25 78 f0       	mov    0xf07825d0,%eax
f01068c4:	39 c2                	cmp    %eax,%edx
f01068c6:	0f 82 08 ff ff ff    	jb     f01067d4 <initialize_paging+0x2b1>

		//frames_info[i].references = 0;
		LIST_INSERT_HEAD(&free_frame_list, &frames_info[i]);
	}

	initialize_disk_page_file();
f01068cc:	e8 eb c8 ff ff       	call   f01031bc <initialize_disk_page_file>
}
f01068d1:	90                   	nop
f01068d2:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f01068d5:	c9                   	leave  
f01068d6:	c3                   	ret    

f01068d7 <initialize_frame_info>:
// Initialize a Frame_Info structure.
// The result has null links and 0 references.
// Note that the corresponding physical frame is NOT initialized!
//
void initialize_frame_info(struct FrameInfo *ptr_frame_info)
{
f01068d7:	55                   	push   %ebp
f01068d8:	89 e5                	mov    %esp,%ebp
f01068da:	83 ec 08             	sub    $0x8,%esp
	memset(ptr_frame_info, 0, sizeof(*ptr_frame_info));
f01068dd:	83 ec 04             	sub    $0x4,%esp
f01068e0:	6a 18                	push   $0x18
f01068e2:	6a 00                	push   $0x0
f01068e4:	ff 75 08             	pushl  0x8(%ebp)
f01068e7:	e8 f4 aa 02 00       	call   f01313e0 <memset>
f01068ec:	83 c4 10             	add    $0x10,%esp
}
f01068ef:	90                   	nop
f01068f0:	c9                   	leave  
f01068f1:	c3                   	ret    

f01068f2 <allocate_frame>:
// Hint: references should not be incremented

//extern void env_free(struct Env *e);

int allocate_frame(struct FrameInfo **ptr_frame_info)
{
f01068f2:	55                   	push   %ebp
f01068f3:	89 e5                	mov    %esp,%ebp
f01068f5:	83 ec 18             	sub    $0x18,%esp
	*ptr_frame_info = LIST_FIRST(&free_frame_list);
f01068f8:	8b 15 d8 25 78 f0    	mov    0xf07825d8,%edx
f01068fe:	8b 45 08             	mov    0x8(%ebp),%eax
f0106901:	89 10                	mov    %edx,(%eax)
	int c = 0;
f0106903:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	if (*ptr_frame_info == NULL)
f010690a:	8b 45 08             	mov    0x8(%ebp),%eax
f010690d:	8b 00                	mov    (%eax),%eax
f010690f:	85 c0                	test   %eax,%eax
f0106911:	75 17                	jne    f010692a <allocate_frame+0x38>
	{
		//[KERNEL MEM] Free RAM when it's FULL
		// Write your code here, remove the panic and write your code
		panic("ERROR: Kernel run out of memory... allocate_frame cannot find a free frame.\n");
f0106913:	83 ec 04             	sub    $0x4,%esp
f0106916:	68 d4 5f 13 f0       	push   $0xf0135fd4
f010691b:	68 99 00 00 00       	push   $0x99
f0106920:	68 83 5f 13 f0       	push   $0xf0135f83
f0106925:	e8 db 98 ff ff       	call   f0100205 <_panic>
	}

	LIST_REMOVE(&free_frame_list,*ptr_frame_info);
f010692a:	8b 45 08             	mov    0x8(%ebp),%eax
f010692d:	8b 00                	mov    (%eax),%eax
f010692f:	85 c0                	test   %eax,%eax
f0106931:	75 17                	jne    f010694a <allocate_frame+0x58>
f0106933:	83 ec 04             	sub    $0x4,%esp
f0106936:	68 21 60 13 f0       	push   $0xf0136021
f010693b:	68 9c 00 00 00       	push   $0x9c
f0106940:	68 83 5f 13 f0       	push   $0xf0135f83
f0106945:	e8 bb 98 ff ff       	call   f0100205 <_panic>
f010694a:	8b 45 08             	mov    0x8(%ebp),%eax
f010694d:	8b 00                	mov    (%eax),%eax
f010694f:	8b 00                	mov    (%eax),%eax
f0106951:	85 c0                	test   %eax,%eax
f0106953:	74 14                	je     f0106969 <allocate_frame+0x77>
f0106955:	8b 45 08             	mov    0x8(%ebp),%eax
f0106958:	8b 00                	mov    (%eax),%eax
f010695a:	8b 00                	mov    (%eax),%eax
f010695c:	8b 55 08             	mov    0x8(%ebp),%edx
f010695f:	8b 12                	mov    (%edx),%edx
f0106961:	8b 52 04             	mov    0x4(%edx),%edx
f0106964:	89 50 04             	mov    %edx,0x4(%eax)
f0106967:	eb 0d                	jmp    f0106976 <allocate_frame+0x84>
f0106969:	8b 45 08             	mov    0x8(%ebp),%eax
f010696c:	8b 00                	mov    (%eax),%eax
f010696e:	8b 40 04             	mov    0x4(%eax),%eax
f0106971:	a3 dc 25 78 f0       	mov    %eax,0xf07825dc
f0106976:	8b 45 08             	mov    0x8(%ebp),%eax
f0106979:	8b 00                	mov    (%eax),%eax
f010697b:	8b 40 04             	mov    0x4(%eax),%eax
f010697e:	85 c0                	test   %eax,%eax
f0106980:	74 13                	je     f0106995 <allocate_frame+0xa3>
f0106982:	8b 45 08             	mov    0x8(%ebp),%eax
f0106985:	8b 00                	mov    (%eax),%eax
f0106987:	8b 40 04             	mov    0x4(%eax),%eax
f010698a:	8b 55 08             	mov    0x8(%ebp),%edx
f010698d:	8b 12                	mov    (%edx),%edx
f010698f:	8b 12                	mov    (%edx),%edx
f0106991:	89 10                	mov    %edx,(%eax)
f0106993:	eb 0c                	jmp    f01069a1 <allocate_frame+0xaf>
f0106995:	8b 45 08             	mov    0x8(%ebp),%eax
f0106998:	8b 00                	mov    (%eax),%eax
f010699a:	8b 00                	mov    (%eax),%eax
f010699c:	a3 d8 25 78 f0       	mov    %eax,0xf07825d8
f01069a1:	8b 45 08             	mov    0x8(%ebp),%eax
f01069a4:	8b 00                	mov    (%eax),%eax
f01069a6:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f01069ac:	8b 45 08             	mov    0x8(%ebp),%eax
f01069af:	8b 00                	mov    (%eax),%eax
f01069b1:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f01069b8:	a1 e4 25 78 f0       	mov    0xf07825e4,%eax
f01069bd:	48                   	dec    %eax
f01069be:	a3 e4 25 78 f0       	mov    %eax,0xf07825e4

	/******************* PAGE BUFFERING CODE *******************
	 ***********************************************************/

	if((*ptr_frame_info)->isBuffered)
f01069c3:	8b 45 08             	mov    0x8(%ebp),%eax
f01069c6:	8b 00                	mov    (%eax),%eax
f01069c8:	8a 40 14             	mov    0x14(%eax),%al
f01069cb:	84 c0                	test   %al,%al
f01069cd:	74 20                	je     f01069ef <allocate_frame+0xfd>
	{
		pt_clear_page_table_entry((*ptr_frame_info)->environment->env_page_directory,(*ptr_frame_info)->va);
f01069cf:	8b 45 08             	mov    0x8(%ebp),%eax
f01069d2:	8b 00                	mov    (%eax),%eax
f01069d4:	8b 50 0c             	mov    0xc(%eax),%edx
f01069d7:	8b 45 08             	mov    0x8(%ebp),%eax
f01069da:	8b 00                	mov    (%eax),%eax
f01069dc:	8b 40 10             	mov    0x10(%eax),%eax
f01069df:	8b 40 5c             	mov    0x5c(%eax),%eax
f01069e2:	83 ec 08             	sub    $0x8,%esp
f01069e5:	52                   	push   %edx
f01069e6:	50                   	push   %eax
f01069e7:	e8 d0 12 00 00       	call   f0107cbc <pt_clear_page_table_entry>
f01069ec:	83 c4 10             	add    $0x10,%esp
	}

	/**********************************************************
	 ***********************************************************/

	initialize_frame_info(*ptr_frame_info);
f01069ef:	8b 45 08             	mov    0x8(%ebp),%eax
f01069f2:	8b 00                	mov    (%eax),%eax
f01069f4:	83 ec 0c             	sub    $0xc,%esp
f01069f7:	50                   	push   %eax
f01069f8:	e8 da fe ff ff       	call   f01068d7 <initialize_frame_info>
f01069fd:	83 c4 10             	add    $0x10,%esp
	return 0;
f0106a00:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0106a05:	c9                   	leave  
f0106a06:	c3                   	ret    

f0106a07 <free_frame>:
//
// Return a frame to the free_frame_list.
// (This function should only be called when ptr_frame_info->references reaches 0.)
//
void free_frame(struct FrameInfo *ptr_frame_info)
{
f0106a07:	55                   	push   %ebp
f0106a08:	89 e5                	mov    %esp,%ebp
f0106a0a:	83 ec 08             	sub    $0x8,%esp
	/*2012: clear it to ensure that its members (env, isBuffered, ...) become NULL*/
	initialize_frame_info(ptr_frame_info);
f0106a0d:	83 ec 0c             	sub    $0xc,%esp
f0106a10:	ff 75 08             	pushl  0x8(%ebp)
f0106a13:	e8 bf fe ff ff       	call   f01068d7 <initialize_frame_info>
f0106a18:	83 c4 10             	add    $0x10,%esp
	/*=============================================================================*/

	// Fill this function in
	LIST_INSERT_HEAD(&free_frame_list, ptr_frame_info);
f0106a1b:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0106a1f:	75 17                	jne    f0106a38 <free_frame+0x31>
f0106a21:	83 ec 04             	sub    $0x4,%esp
f0106a24:	68 60 5f 13 f0       	push   $0xf0135f60
f0106a29:	68 b9 00 00 00       	push   $0xb9
f0106a2e:	68 83 5f 13 f0       	push   $0xf0135f83
f0106a33:	e8 cd 97 ff ff       	call   f0100205 <_panic>
f0106a38:	8b 15 d8 25 78 f0    	mov    0xf07825d8,%edx
f0106a3e:	8b 45 08             	mov    0x8(%ebp),%eax
f0106a41:	89 10                	mov    %edx,(%eax)
f0106a43:	8b 45 08             	mov    0x8(%ebp),%eax
f0106a46:	8b 00                	mov    (%eax),%eax
f0106a48:	85 c0                	test   %eax,%eax
f0106a4a:	74 0d                	je     f0106a59 <free_frame+0x52>
f0106a4c:	a1 d8 25 78 f0       	mov    0xf07825d8,%eax
f0106a51:	8b 55 08             	mov    0x8(%ebp),%edx
f0106a54:	89 50 04             	mov    %edx,0x4(%eax)
f0106a57:	eb 08                	jmp    f0106a61 <free_frame+0x5a>
f0106a59:	8b 45 08             	mov    0x8(%ebp),%eax
f0106a5c:	a3 dc 25 78 f0       	mov    %eax,0xf07825dc
f0106a61:	8b 45 08             	mov    0x8(%ebp),%eax
f0106a64:	a3 d8 25 78 f0       	mov    %eax,0xf07825d8
f0106a69:	8b 45 08             	mov    0x8(%ebp),%eax
f0106a6c:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f0106a73:	a1 e4 25 78 f0       	mov    0xf07825e4,%eax
f0106a78:	40                   	inc    %eax
f0106a79:	a3 e4 25 78 f0       	mov    %eax,0xf07825e4
	//LOG_STATMENT(cprintf("FN # %d FREED",to_frame_number(ptr_frame_info)));


}
f0106a7e:	90                   	nop
f0106a7f:	c9                   	leave  
f0106a80:	c3                   	ret    

f0106a81 <decrement_references>:
//
// Decrement the reference count on a frame
// freeing it if there are no more references.
//
void decrement_references(struct FrameInfo* ptr_frame_info)
{
f0106a81:	55                   	push   %ebp
f0106a82:	89 e5                	mov    %esp,%ebp
f0106a84:	83 ec 08             	sub    $0x8,%esp
	if (--(ptr_frame_info->references) == 0)
f0106a87:	8b 45 08             	mov    0x8(%ebp),%eax
f0106a8a:	8b 40 08             	mov    0x8(%eax),%eax
f0106a8d:	48                   	dec    %eax
f0106a8e:	8b 55 08             	mov    0x8(%ebp),%edx
f0106a91:	66 89 42 08          	mov    %ax,0x8(%edx)
f0106a95:	8b 45 08             	mov    0x8(%ebp),%eax
f0106a98:	8b 40 08             	mov    0x8(%eax),%eax
f0106a9b:	66 85 c0             	test   %ax,%ax
f0106a9e:	75 0e                	jne    f0106aae <decrement_references+0x2d>
		free_frame(ptr_frame_info);
f0106aa0:	83 ec 0c             	sub    $0xc,%esp
f0106aa3:	ff 75 08             	pushl  0x8(%ebp)
f0106aa6:	e8 5c ff ff ff       	call   f0106a07 <free_frame>
f0106aab:	83 c4 10             	add    $0x10,%esp
}
f0106aae:	90                   	nop
f0106aaf:	c9                   	leave  
f0106ab0:	c3                   	ret    

f0106ab1 <get_page_table>:
//  TABLE_IN_MEMORY : if page table exists in main memory
//	TABLE_NOT_EXIST : if page table doesn't exist,
//

int get_page_table(uint32 *ptr_page_directory, const uint32 virtual_address, uint32 **ptr_page_table)
{
f0106ab1:	55                   	push   %ebp
f0106ab2:	89 e5                	mov    %esp,%ebp
f0106ab4:	83 ec 28             	sub    $0x28,%esp
	//	cprintf("gpt .05\n");
	uint32 page_directory_entry = ptr_page_directory[PDX(virtual_address)];
f0106ab7:	8b 45 0c             	mov    0xc(%ebp),%eax
f0106aba:	c1 e8 16             	shr    $0x16,%eax
f0106abd:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0106ac4:	8b 45 08             	mov    0x8(%ebp),%eax
f0106ac7:	01 d0                	add    %edx,%eax
f0106ac9:	8b 00                	mov    (%eax),%eax
f0106acb:	89 45 f4             	mov    %eax,-0xc(%ebp)

	//2022: check PERM_PRESENT of the table first before calculating its PA
	if ( (page_directory_entry & PERM_PRESENT) == PERM_PRESENT)
f0106ace:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0106ad1:	83 e0 01             	and    $0x1,%eax
f0106ad4:	85 c0                	test   %eax,%eax
f0106ad6:	74 74                	je     f0106b4c <get_page_table+0x9b>
	{
		//	cprintf("gpt .07, page_directory_entry= %x \n",page_directory_entry);
		if(USE_KHEAP && !CHECK_IF_KERNEL_ADDRESS(virtual_address))
f0106ad8:	81 7d 0c ff ff bf ee 	cmpl   $0xeebfffff,0xc(%ebp)
f0106adf:	77 1d                	ja     f0106afe <get_page_table+0x4d>
		{
			*ptr_page_table = (void *)kheap_virtual_address(EXTRACT_ADDRESS(page_directory_entry)) ;
f0106ae1:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0106ae4:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0106ae9:	83 ec 0c             	sub    $0xc,%esp
f0106aec:	50                   	push   %eax
f0106aed:	e8 85 0f 00 00       	call   f0107a77 <kheap_virtual_address>
f0106af2:	83 c4 10             	add    $0x10,%esp
f0106af5:	89 c2                	mov    %eax,%edx
f0106af7:	8b 45 10             	mov    0x10(%ebp),%eax
f0106afa:	89 10                	mov    %edx,(%eax)
f0106afc:	eb 44                	jmp    f0106b42 <get_page_table+0x91>
			//cprintf("===>get_page_table: page_dir_entry = %x ptr_page_table = %x\n", page_directory_entry,*ptr_page_table);
		}
		else
		{
			*ptr_page_table = STATIC_KERNEL_VIRTUAL_ADDRESS(EXTRACT_ADDRESS(page_directory_entry)) ;
f0106afe:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0106b01:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0106b06:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0106b09:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0106b0c:	c1 e8 0c             	shr    $0xc,%eax
f0106b0f:	89 45 ec             	mov    %eax,-0x14(%ebp)
f0106b12:	a1 d0 25 78 f0       	mov    0xf07825d0,%eax
f0106b17:	39 45 ec             	cmp    %eax,-0x14(%ebp)
f0106b1a:	72 17                	jb     f0106b33 <get_page_table+0x82>
f0106b1c:	ff 75 f0             	pushl  -0x10(%ebp)
f0106b1f:	68 40 60 13 f0       	push   $0xf0136040
f0106b24:	68 e2 00 00 00       	push   $0xe2
f0106b29:	68 83 5f 13 f0       	push   $0xf0135f83
f0106b2e:	e8 d2 96 ff ff       	call   f0100205 <_panic>
f0106b33:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0106b36:	2d 00 00 00 10       	sub    $0x10000000,%eax
f0106b3b:	89 c2                	mov    %eax,%edx
f0106b3d:	8b 45 10             	mov    0x10(%ebp),%eax
f0106b40:	89 10                	mov    %edx,(%eax)
		}
		return TABLE_IN_MEMORY;
f0106b42:	b8 00 00 00 00       	mov    $0x0,%eax
f0106b47:	e9 b9 00 00 00       	jmp    f0106c05 <get_page_table+0x154>
	}
	else if (page_directory_entry != 0) //the table exists but not in main mem, so it must be in sec mem
f0106b4c:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0106b50:	0f 84 a1 00 00 00    	je     f0106bf7 <get_page_table+0x146>
f0106b56:	8b 45 0c             	mov    0xc(%ebp),%eax
f0106b59:	89 45 e0             	mov    %eax,-0x20(%ebp)

//Ahmed 2010:
static __inline void
lcr2(uint32 val)
{
	__asm __volatile("movl %0,%%cr2" : : "r" (val));
f0106b5c:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0106b5f:	0f 22 d0             	mov    %eax,%cr2
		// Call the fault_handler() to load the table in memory for us ...
		//		cprintf("gpt .1\n, %x page_directory_entry\n", page_directory_entry);
		lcr2((uint32)virtual_address) ;

		//		cprintf("gpt .12\n");
		fault_handler(NULL);
f0106b62:	83 ec 0c             	sub    $0xc,%esp
f0106b65:	6a 00                	push   $0x0
f0106b67:	e8 43 5b 00 00       	call   f010c6af <fault_handler>
f0106b6c:	83 c4 10             	add    $0x10,%esp

		//		cprintf("gpt .15\n");
		// now the page_fault_handler() should have returned successfully and updated the
		// directory with the new table frame number in memory
		page_directory_entry = ptr_page_directory[PDX(virtual_address)];
f0106b6f:	8b 45 0c             	mov    0xc(%ebp),%eax
f0106b72:	c1 e8 16             	shr    $0x16,%eax
f0106b75:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0106b7c:	8b 45 08             	mov    0x8(%ebp),%eax
f0106b7f:	01 d0                	add    %edx,%eax
f0106b81:	8b 00                	mov    (%eax),%eax
f0106b83:	89 45 f4             	mov    %eax,-0xc(%ebp)
		if(USE_KHEAP && !CHECK_IF_KERNEL_ADDRESS(virtual_address))
f0106b86:	81 7d 0c ff ff bf ee 	cmpl   $0xeebfffff,0xc(%ebp)
f0106b8d:	77 1d                	ja     f0106bac <get_page_table+0xfb>
		{
			*ptr_page_table = (void *)kheap_virtual_address(EXTRACT_ADDRESS(page_directory_entry)) ;
f0106b8f:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0106b92:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0106b97:	83 ec 0c             	sub    $0xc,%esp
f0106b9a:	50                   	push   %eax
f0106b9b:	e8 d7 0e 00 00       	call   f0107a77 <kheap_virtual_address>
f0106ba0:	83 c4 10             	add    $0x10,%esp
f0106ba3:	89 c2                	mov    %eax,%edx
f0106ba5:	8b 45 10             	mov    0x10(%ebp),%eax
f0106ba8:	89 10                	mov    %edx,(%eax)
f0106baa:	eb 44                	jmp    f0106bf0 <get_page_table+0x13f>
		}
		else
		{
			*ptr_page_table = STATIC_KERNEL_VIRTUAL_ADDRESS(EXTRACT_ADDRESS(page_directory_entry)) ;
f0106bac:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0106baf:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0106bb4:	89 45 e8             	mov    %eax,-0x18(%ebp)
f0106bb7:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0106bba:	c1 e8 0c             	shr    $0xc,%eax
f0106bbd:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f0106bc0:	a1 d0 25 78 f0       	mov    0xf07825d0,%eax
f0106bc5:	39 45 e4             	cmp    %eax,-0x1c(%ebp)
f0106bc8:	72 17                	jb     f0106be1 <get_page_table+0x130>
f0106bca:	ff 75 e8             	pushl  -0x18(%ebp)
f0106bcd:	68 40 60 13 f0       	push   $0xf0136040
f0106bd2:	68 fa 00 00 00       	push   $0xfa
f0106bd7:	68 83 5f 13 f0       	push   $0xf0135f83
f0106bdc:	e8 24 96 ff ff       	call   f0100205 <_panic>
f0106be1:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0106be4:	2d 00 00 00 10       	sub    $0x10000000,%eax
f0106be9:	89 c2                	mov    %eax,%edx
f0106beb:	8b 45 10             	mov    0x10(%ebp),%eax
f0106bee:	89 10                	mov    %edx,(%eax)
		}

		return TABLE_IN_MEMORY;
f0106bf0:	b8 00 00 00 00       	mov    $0x0,%eax
f0106bf5:	eb 0e                	jmp    f0106c05 <get_page_table+0x154>
	}
	else // there is no table for this va anywhere. This is a new table required, so check if the user want creation
	{
		//		cprintf("gpt .2\n");
		*ptr_page_table = 0;
f0106bf7:	8b 45 10             	mov    0x10(%ebp),%eax
f0106bfa:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
		return TABLE_NOT_EXIST;
f0106c00:	b8 01 00 00 00       	mov    $0x1,%eax
	}
}
f0106c05:	c9                   	leave  
f0106c06:	c3                   	ret    

f0106c07 <create_page_table>:

void * create_page_table(uint32 *ptr_directory, const uint32 virtual_address)
{
f0106c07:	55                   	push   %ebp
f0106c08:	89 e5                	mov    %esp,%ebp
f0106c0a:	53                   	push   %ebx
f0106c0b:	83 ec 14             	sub    $0x14,%esp
	//	b.	clear the TLB cache (using "tlbflush()")

	//change this "return" according to your answer

#if USE_KHEAP
	uint32 * ptr_page_table = kmalloc(PAGE_SIZE);
f0106c0e:	83 ec 0c             	sub    $0xc,%esp
f0106c11:	68 00 10 00 00       	push   $0x1000
f0106c16:	e8 6a 0c 00 00       	call   f0107885 <kmalloc>
f0106c1b:	83 c4 10             	add    $0x10,%esp
f0106c1e:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if(ptr_page_table == NULL)
f0106c21:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0106c25:	75 17                	jne    f0106c3e <create_page_table+0x37>
	{
		panic("NOT ENOUGH KERNEL HEAP SPACE");
f0106c27:	83 ec 04             	sub    $0x4,%esp
f0106c2a:	68 6f 60 13 f0       	push   $0xf013606f
f0106c2f:	68 18 01 00 00       	push   $0x118
f0106c34:	68 83 5f 13 f0       	push   $0xf0135f83
f0106c39:	e8 c7 95 ff ff       	call   f0100205 <_panic>
	}
	ptr_directory[PDX(virtual_address)] = CONSTRUCT_ENTRY(
f0106c3e:	8b 45 0c             	mov    0xc(%ebp),%eax
f0106c41:	c1 e8 16             	shr    $0x16,%eax
f0106c44:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0106c4b:	8b 45 08             	mov    0x8(%ebp),%eax
f0106c4e:	8d 1c 02             	lea    (%edx,%eax,1),%ebx
f0106c51:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0106c54:	83 ec 0c             	sub    $0xc,%esp
f0106c57:	50                   	push   %eax
f0106c58:	e8 46 0e 00 00       	call   f0107aa3 <kheap_physical_address>
f0106c5d:	83 c4 10             	add    $0x10,%esp
f0106c60:	83 c8 07             	or     $0x7,%eax
f0106c63:	89 03                	mov    %eax,(%ebx)
			kheap_physical_address((unsigned int)ptr_page_table)
			, PERM_PRESENT | PERM_USER | PERM_WRITEABLE);

	//================
	memset(ptr_page_table , 0, PAGE_SIZE);
f0106c65:	83 ec 04             	sub    $0x4,%esp
f0106c68:	68 00 10 00 00       	push   $0x1000
f0106c6d:	6a 00                	push   $0x0
f0106c6f:	ff 75 f4             	pushl  -0xc(%ebp)
f0106c72:	e8 69 a7 02 00       	call   f01313e0 <memset>
f0106c77:	83 c4 10             	add    $0x10,%esp

static __inline void
tlbflush(void)
{
	uint32 cr3;
	__asm __volatile("movl %%cr3,%0" : "=r" (cr3));
f0106c7a:	0f 20 d8             	mov    %cr3,%eax
f0106c7d:	89 45 f0             	mov    %eax,-0x10(%ebp)
	__asm __volatile("movl %0,%%cr3" : : "r" (cr3));
f0106c80:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0106c83:	0f 22 d8             	mov    %eax,%cr3
#else
	uint32 * ptr_page_table ;
	__static_cpt(ptr_directory, virtual_address, &ptr_page_table) ;
#endif

	return ptr_page_table;
f0106c86:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f0106c89:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f0106c8c:	c9                   	leave  
f0106c8d:	c3                   	ret    

f0106c8e <__static_cpt>:

void __static_cpt(uint32 *ptr_directory, const uint32 virtual_address, uint32 **ptr_page_table)
{
f0106c8e:	55                   	push   %ebp
f0106c8f:	89 e5                	mov    %esp,%ebp
f0106c91:	83 ec 28             	sub    $0x28,%esp
	struct FrameInfo* ptr_new_frame_info;
	int err = allocate_frame(&ptr_new_frame_info) ;
f0106c94:	83 ec 0c             	sub    $0xc,%esp
f0106c97:	8d 45 e0             	lea    -0x20(%ebp),%eax
f0106c9a:	50                   	push   %eax
f0106c9b:	e8 52 fc ff ff       	call   f01068f2 <allocate_frame>
f0106ca0:	83 c4 10             	add    $0x10,%esp
f0106ca3:	89 45 f4             	mov    %eax,-0xc(%ebp)

	uint32 phys_page_table = to_physical_address(ptr_new_frame_info);
f0106ca6:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0106ca9:	83 ec 0c             	sub    $0xc,%esp
f0106cac:	50                   	push   %eax
f0106cad:	e8 03 f8 ff ff       	call   f01064b5 <to_physical_address>
f0106cb2:	83 c4 10             	add    $0x10,%esp
f0106cb5:	89 45 f0             	mov    %eax,-0x10(%ebp)
	*ptr_page_table = STATIC_KERNEL_VIRTUAL_ADDRESS(phys_page_table) ;
f0106cb8:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0106cbb:	89 45 ec             	mov    %eax,-0x14(%ebp)
f0106cbe:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0106cc1:	c1 e8 0c             	shr    $0xc,%eax
f0106cc4:	89 45 e8             	mov    %eax,-0x18(%ebp)
f0106cc7:	a1 d0 25 78 f0       	mov    0xf07825d0,%eax
f0106ccc:	39 45 e8             	cmp    %eax,-0x18(%ebp)
f0106ccf:	72 17                	jb     f0106ce8 <__static_cpt+0x5a>
f0106cd1:	ff 75 ec             	pushl  -0x14(%ebp)
f0106cd4:	68 40 60 13 f0       	push   $0xf0136040
f0106cd9:	68 30 01 00 00       	push   $0x130
f0106cde:	68 83 5f 13 f0       	push   $0xf0135f83
f0106ce3:	e8 1d 95 ff ff       	call   f0100205 <_panic>
f0106ce8:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0106ceb:	2d 00 00 00 10       	sub    $0x10000000,%eax
f0106cf0:	89 c2                	mov    %eax,%edx
f0106cf2:	8b 45 10             	mov    0x10(%ebp),%eax
f0106cf5:	89 10                	mov    %edx,(%eax)
	ptr_new_frame_info->references = 1;
f0106cf7:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0106cfa:	66 c7 40 08 01 00    	movw   $0x1,0x8(%eax)
	ptr_directory[PDX(virtual_address)] = CONSTRUCT_ENTRY(phys_page_table, PERM_PRESENT | PERM_USER | PERM_WRITEABLE);
f0106d00:	8b 45 0c             	mov    0xc(%ebp),%eax
f0106d03:	c1 e8 16             	shr    $0x16,%eax
f0106d06:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0106d0d:	8b 45 08             	mov    0x8(%ebp),%eax
f0106d10:	01 d0                	add    %edx,%eax
f0106d12:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0106d15:	83 ca 07             	or     $0x7,%edx
f0106d18:	89 10                	mov    %edx,(%eax)
	//initialize new page table by 0's
	memset(*ptr_page_table , 0, PAGE_SIZE);
f0106d1a:	8b 45 10             	mov    0x10(%ebp),%eax
f0106d1d:	8b 00                	mov    (%eax),%eax
f0106d1f:	83 ec 04             	sub    $0x4,%esp
f0106d22:	68 00 10 00 00       	push   $0x1000
f0106d27:	6a 00                	push   $0x0
f0106d29:	50                   	push   %eax
f0106d2a:	e8 b1 a6 02 00       	call   f01313e0 <memset>
f0106d2f:	83 c4 10             	add    $0x10,%esp

static __inline void
tlbflush(void)
{
	uint32 cr3;
	__asm __volatile("movl %%cr3,%0" : "=r" (cr3));
f0106d32:	0f 20 d8             	mov    %cr3,%eax
f0106d35:	89 45 e4             	mov    %eax,-0x1c(%ebp)
	__asm __volatile("movl %0,%%cr3" : : "r" (cr3));
f0106d38:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0106d3b:	0f 22 d8             	mov    %eax,%cr3
	tlbflush();
}
f0106d3e:	90                   	nop
f0106d3f:	c9                   	leave  
f0106d40:	c3                   	ret    

f0106d41 <map_frame>:
//   0 on success
//
// Hint: implement using get_page_table() and unmap_frame().
//
int map_frame(uint32 *ptr_page_directory, struct FrameInfo *ptr_frame_info, uint32 virtual_address, int perm)
{
f0106d41:	55                   	push   %ebp
f0106d42:	89 e5                	mov    %esp,%ebp
f0106d44:	83 ec 18             	sub    $0x18,%esp
	// Fill this function in
	uint32 physical_address = to_physical_address(ptr_frame_info);
f0106d47:	ff 75 0c             	pushl  0xc(%ebp)
f0106d4a:	e8 66 f7 ff ff       	call   f01064b5 <to_physical_address>
f0106d4f:	83 c4 04             	add    $0x4,%esp
f0106d52:	89 45 f4             	mov    %eax,-0xc(%ebp)
	uint32 *ptr_page_table;
	if( get_page_table(ptr_page_directory, virtual_address, &ptr_page_table) == TABLE_NOT_EXIST)
f0106d55:	83 ec 04             	sub    $0x4,%esp
f0106d58:	8d 45 e8             	lea    -0x18(%ebp),%eax
f0106d5b:	50                   	push   %eax
f0106d5c:	ff 75 10             	pushl  0x10(%ebp)
f0106d5f:	ff 75 08             	pushl  0x8(%ebp)
f0106d62:	e8 4a fd ff ff       	call   f0106ab1 <get_page_table>
f0106d67:	83 c4 10             	add    $0x10,%esp
f0106d6a:	83 f8 01             	cmp    $0x1,%eax
f0106d6d:	75 1b                	jne    f0106d8a <map_frame+0x49>
		//page_directory_entry = ptr_page_directory[PDX(virtual_address)];
		//ptr_page_table = STATIC_KERNEL_VIRTUAL_ADDRESS(EXTRACT_ADDRESS(page_directory_entry)) ;
		=============================================================================================*/
#if USE_KHEAP
		{
			ptr_page_table = create_page_table(ptr_page_directory, (uint32)virtual_address);
f0106d6f:	83 ec 08             	sub    $0x8,%esp
f0106d72:	ff 75 10             	pushl  0x10(%ebp)
f0106d75:	ff 75 08             	pushl  0x8(%ebp)
f0106d78:	e8 8a fe ff ff       	call   f0106c07 <create_page_table>
f0106d7d:	83 c4 10             	add    $0x10,%esp
f0106d80:	89 45 e8             	mov    %eax,-0x18(%ebp)
			//cprintf("======>page table created using kheap for VA %x at dir = %x PT = %x\n", virtual_address, ptr_page_directory[PDX(virtual_address)], ptr_page_table);
			uint32* ptr_page_table2 =NULL;
f0106d83:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
#endif

	}

	//cprintf("NOW .. map add = %x ptr_page_table = %x PTX(virtual_address) = %d\n", virtual_address, ptr_page_table,PTX(virtual_address));
	uint32 page_table_entry = ptr_page_table[PTX(virtual_address)];
f0106d8a:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0106d8d:	8b 55 10             	mov    0x10(%ebp),%edx
f0106d90:	c1 ea 0c             	shr    $0xc,%edx
f0106d93:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0106d99:	c1 e2 02             	shl    $0x2,%edx
f0106d9c:	01 d0                	add    %edx,%eax
f0106d9e:	8b 00                	mov    (%eax),%eax
f0106da0:	89 45 ec             	mov    %eax,-0x14(%ebp)

	}*/

	/*NEW'15 CORRECT SOLUTION*/
	//If already mapped
	if ((page_table_entry & PERM_PRESENT) == PERM_PRESENT)
f0106da3:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0106da6:	83 e0 01             	and    $0x1,%eax
f0106da9:	85 c0                	test   %eax,%eax
f0106dab:	74 25                	je     f0106dd2 <map_frame+0x91>
	{
		//on this pa, then do nothing
		if (EXTRACT_ADDRESS(page_table_entry) == physical_address)
f0106dad:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0106db0:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0106db5:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0106db8:	75 07                	jne    f0106dc1 <map_frame+0x80>
			return 0;
f0106dba:	b8 00 00 00 00       	mov    $0x0,%eax
f0106dbf:	eb 43                	jmp    f0106e04 <map_frame+0xc3>
		//on another pa, then unmap it
		else
			unmap_frame(ptr_page_directory , virtual_address);
f0106dc1:	83 ec 08             	sub    $0x8,%esp
f0106dc4:	ff 75 10             	pushl  0x10(%ebp)
f0106dc7:	ff 75 08             	pushl  0x8(%ebp)
f0106dca:	e8 a7 00 00 00       	call   f0106e76 <unmap_frame>
f0106dcf:	83 c4 10             	add    $0x10,%esp
	}
	ptr_frame_info->references++;
f0106dd2:	8b 45 0c             	mov    0xc(%ebp),%eax
f0106dd5:	8b 40 08             	mov    0x8(%eax),%eax
f0106dd8:	40                   	inc    %eax
f0106dd9:	8b 55 0c             	mov    0xc(%ebp),%edx
f0106ddc:	66 89 42 08          	mov    %ax,0x8(%edx)
	ptr_page_table[PTX(virtual_address)] = CONSTRUCT_ENTRY(physical_address , perm | PERM_PRESENT);
f0106de0:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0106de3:	8b 55 10             	mov    0x10(%ebp),%edx
f0106de6:	c1 ea 0c             	shr    $0xc,%edx
f0106de9:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0106def:	c1 e2 02             	shl    $0x2,%edx
f0106df2:	01 c2                	add    %eax,%edx
f0106df4:	8b 45 14             	mov    0x14(%ebp),%eax
f0106df7:	0b 45 f4             	or     -0xc(%ebp),%eax
f0106dfa:	83 c8 01             	or     $0x1,%eax
f0106dfd:	89 02                	mov    %eax,(%edx)

	return 0;
f0106dff:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0106e04:	c9                   	leave  
f0106e05:	c3                   	ret    

f0106e06 <get_frame_info>:
// Return 0 if there is no frame mapped at virtual_address.
//
// Hint: implement using get_page_table() and get_frame_info().
//
struct FrameInfo * get_frame_info(uint32 *ptr_page_directory, uint32 virtual_address, uint32 **ptr_page_table)
{
f0106e06:	55                   	push   %ebp
f0106e07:	89 e5                	mov    %esp,%ebp
f0106e09:	83 ec 18             	sub    $0x18,%esp
	// Fill this function in
	//cprintf(".gfi .1\n %x, %x, %x, \n", ptr_page_directory, virtual_address, ptr_page_table);
	uint32 ret =  get_page_table(ptr_page_directory, virtual_address, ptr_page_table) ;
f0106e0c:	83 ec 04             	sub    $0x4,%esp
f0106e0f:	ff 75 10             	pushl  0x10(%ebp)
f0106e12:	ff 75 0c             	pushl  0xc(%ebp)
f0106e15:	ff 75 08             	pushl  0x8(%ebp)
f0106e18:	e8 94 fc ff ff       	call   f0106ab1 <get_page_table>
f0106e1d:	83 c4 10             	add    $0x10,%esp
f0106e20:	89 45 f4             	mov    %eax,-0xc(%ebp)
	//cprintf(".gfi .15\n");
	if((*ptr_page_table) != 0)
f0106e23:	8b 45 10             	mov    0x10(%ebp),%eax
f0106e26:	8b 00                	mov    (%eax),%eax
f0106e28:	85 c0                	test   %eax,%eax
f0106e2a:	74 43                	je     f0106e6f <get_frame_info+0x69>
	{
		uint32 index_page_table = PTX(virtual_address);
f0106e2c:	8b 45 0c             	mov    0xc(%ebp),%eax
f0106e2f:	c1 e8 0c             	shr    $0xc,%eax
f0106e32:	25 ff 03 00 00       	and    $0x3ff,%eax
f0106e37:	89 45 f0             	mov    %eax,-0x10(%ebp)
		//cprintf(".gfi .2\n");
		uint32 page_table_entry = (*ptr_page_table)[index_page_table];
f0106e3a:	8b 45 10             	mov    0x10(%ebp),%eax
f0106e3d:	8b 00                	mov    (%eax),%eax
f0106e3f:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0106e42:	c1 e2 02             	shl    $0x2,%edx
f0106e45:	01 d0                	add    %edx,%eax
f0106e47:	8b 00                	mov    (%eax),%eax
f0106e49:	89 45 ec             	mov    %eax,-0x14(%ebp)
		if( page_table_entry != 0)
f0106e4c:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0106e50:	74 16                	je     f0106e68 <get_frame_info+0x62>
		{
			//cprintf(".gfi .3\n");
			return to_frame_info( EXTRACT_ADDRESS ( page_table_entry ) );
f0106e52:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0106e55:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0106e5a:	83 ec 0c             	sub    $0xc,%esp
f0106e5d:	50                   	push   %eax
f0106e5e:	e8 65 f6 ff ff       	call   f01064c8 <to_frame_info>
f0106e63:	83 c4 10             	add    $0x10,%esp
f0106e66:	eb 0c                	jmp    f0106e74 <get_frame_info+0x6e>
		}
		return 0;
f0106e68:	b8 00 00 00 00       	mov    $0x0,%eax
f0106e6d:	eb 05                	jmp    f0106e74 <get_frame_info+0x6e>
	}
	return 0;
f0106e6f:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0106e74:	c9                   	leave  
f0106e75:	c3                   	ret    

f0106e76 <unmap_frame>:
//
// Hint: implement using get_frame_info(),
// 	tlb_invalidate(), and decrement_references().
//
void unmap_frame(uint32 *ptr_page_directory, uint32 virtual_address)
{
f0106e76:	55                   	push   %ebp
f0106e77:	89 e5                	mov    %esp,%ebp
f0106e79:	83 ec 18             	sub    $0x18,%esp
	// Fill this function in
	uint32 *ptr_page_table;
	struct FrameInfo* ptr_frame_info = get_frame_info(ptr_page_directory, virtual_address, &ptr_page_table);
f0106e7c:	83 ec 04             	sub    $0x4,%esp
f0106e7f:	8d 45 f0             	lea    -0x10(%ebp),%eax
f0106e82:	50                   	push   %eax
f0106e83:	ff 75 0c             	pushl  0xc(%ebp)
f0106e86:	ff 75 08             	pushl  0x8(%ebp)
f0106e89:	e8 78 ff ff ff       	call   f0106e06 <get_frame_info>
f0106e8e:	83 c4 10             	add    $0x10,%esp
f0106e91:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if( ptr_frame_info != 0 )
f0106e94:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0106e98:	74 60                	je     f0106efa <unmap_frame+0x84>
	{
		if (ptr_frame_info->isBuffered && !CHECK_IF_KERNEL_ADDRESS((uint32)virtual_address))
f0106e9a:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0106e9d:	8a 40 14             	mov    0x14(%eax),%al
f0106ea0:	84 c0                	test   %al,%al
f0106ea2:	74 1c                	je     f0106ec0 <unmap_frame+0x4a>
f0106ea4:	81 7d 0c ff ff bf ee 	cmpl   $0xeebfffff,0xc(%ebp)
f0106eab:	77 13                	ja     f0106ec0 <unmap_frame+0x4a>
			cprintf("Freeing BUFFERED frame at va %x!!!\n", virtual_address) ;
f0106ead:	83 ec 08             	sub    $0x8,%esp
f0106eb0:	ff 75 0c             	pushl  0xc(%ebp)
f0106eb3:	68 8c 60 13 f0       	push   $0xf013608c
f0106eb8:	e8 51 9e ff ff       	call   f0100d0e <cprintf>
f0106ebd:	83 c4 10             	add    $0x10,%esp
		decrement_references(ptr_frame_info);
f0106ec0:	83 ec 0c             	sub    $0xc,%esp
f0106ec3:	ff 75 f4             	pushl  -0xc(%ebp)
f0106ec6:	e8 b6 fb ff ff       	call   f0106a81 <decrement_references>
f0106ecb:	83 c4 10             	add    $0x10,%esp
		ptr_page_table[PTX(virtual_address)] = 0;
f0106ece:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0106ed1:	8b 55 0c             	mov    0xc(%ebp),%edx
f0106ed4:	c1 ea 0c             	shr    $0xc,%edx
f0106ed7:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0106edd:	c1 e2 02             	shl    $0x2,%edx
f0106ee0:	01 d0                	add    %edx,%eax
f0106ee2:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
		tlb_invalidate(ptr_page_directory, (void *)virtual_address);
f0106ee8:	8b 45 0c             	mov    0xc(%ebp),%eax
f0106eeb:	83 ec 08             	sub    $0x8,%esp
f0106eee:	50                   	push   %eax
f0106eef:	ff 75 08             	pushl  0x8(%ebp)
f0106ef2:	e8 17 f6 ff ff       	call   f010650e <tlb_invalidate>
f0106ef7:	83 c4 10             	add    $0x10,%esp
	}
}
f0106efa:	90                   	nop
f0106efb:	c9                   	leave  
f0106efc:	c3                   	ret    

f0106efd <loadtime_map_frame>:
// RETURNS:
//   0 on success
//
//
int loadtime_map_frame(uint32 *ptr_page_directory, struct FrameInfo *ptr_frame_info, uint32 virtual_address, int perm)
{
f0106efd:	55                   	push   %ebp
f0106efe:	89 e5                	mov    %esp,%ebp
f0106f00:	83 ec 28             	sub    $0x28,%esp
	uint32 physical_address = to_physical_address(ptr_frame_info);
f0106f03:	ff 75 0c             	pushl  0xc(%ebp)
f0106f06:	e8 aa f5 ff ff       	call   f01064b5 <to_physical_address>
f0106f0b:	83 c4 04             	add    $0x4,%esp
f0106f0e:	89 45 f0             	mov    %eax,-0x10(%ebp)
	uint32 *ptr_page_table;

	uint32 page_directory_entry = ptr_page_directory[PDX(virtual_address)];
f0106f11:	8b 45 10             	mov    0x10(%ebp),%eax
f0106f14:	c1 e8 16             	shr    $0x16,%eax
f0106f17:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0106f1e:	8b 45 08             	mov    0x8(%ebp),%eax
f0106f21:	01 d0                	add    %edx,%eax
f0106f23:	8b 00                	mov    (%eax),%eax
f0106f25:	89 45 ec             	mov    %eax,-0x14(%ebp)

	if(USE_KHEAP && !CHECK_IF_KERNEL_ADDRESS(virtual_address))
f0106f28:	81 7d 10 ff ff bf ee 	cmpl   $0xeebfffff,0x10(%ebp)
f0106f2f:	77 19                	ja     f0106f4a <loadtime_map_frame+0x4d>
	{
		ptr_page_table = (uint32*)kheap_virtual_address(EXTRACT_ADDRESS(page_directory_entry)) ;
f0106f31:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0106f34:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0106f39:	83 ec 0c             	sub    $0xc,%esp
f0106f3c:	50                   	push   %eax
f0106f3d:	e8 35 0b 00 00       	call   f0107a77 <kheap_virtual_address>
f0106f42:	83 c4 10             	add    $0x10,%esp
f0106f45:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0106f48:	eb 40                	jmp    f0106f8a <loadtime_map_frame+0x8d>
	}
	else
	{
		ptr_page_table = STATIC_KERNEL_VIRTUAL_ADDRESS(EXTRACT_ADDRESS(page_directory_entry)) ;
f0106f4a:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0106f4d:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0106f52:	89 45 e8             	mov    %eax,-0x18(%ebp)
f0106f55:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0106f58:	c1 e8 0c             	shr    $0xc,%eax
f0106f5b:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f0106f5e:	a1 d0 25 78 f0       	mov    0xf07825d0,%eax
f0106f63:	39 45 e4             	cmp    %eax,-0x1c(%ebp)
f0106f66:	72 17                	jb     f0106f7f <loadtime_map_frame+0x82>
f0106f68:	ff 75 e8             	pushl  -0x18(%ebp)
f0106f6b:	68 40 60 13 f0       	push   $0xf0136040
f0106f70:	68 e6 01 00 00       	push   $0x1e6
f0106f75:	68 83 5f 13 f0       	push   $0xf0135f83
f0106f7a:	e8 86 92 ff ff       	call   f0100205 <_panic>
f0106f7f:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0106f82:	2d 00 00 00 10       	sub    $0x10000000,%eax
f0106f87:	89 45 f4             	mov    %eax,-0xc(%ebp)
	}

	//if page table not exist, create it in memory and link it with the directory
	if (page_directory_entry == 0)
f0106f8a:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0106f8e:	75 14                	jne    f0106fa4 <loadtime_map_frame+0xa7>
	{
#if USE_KHEAP
		{
			ptr_page_table = create_page_table(ptr_page_directory, virtual_address);
f0106f90:	83 ec 08             	sub    $0x8,%esp
f0106f93:	ff 75 10             	pushl  0x10(%ebp)
f0106f96:	ff 75 08             	pushl  0x8(%ebp)
f0106f99:	e8 69 fc ff ff       	call   f0106c07 <create_page_table>
f0106f9e:	83 c4 10             	add    $0x10,%esp
f0106fa1:	89 45 f4             	mov    %eax,-0xc(%ebp)
			__static_cpt(ptr_page_directory, virtual_address, &ptr_page_table);
		}
#endif
	}

	ptr_frame_info->references++;
f0106fa4:	8b 45 0c             	mov    0xc(%ebp),%eax
f0106fa7:	8b 40 08             	mov    0x8(%eax),%eax
f0106faa:	40                   	inc    %eax
f0106fab:	8b 55 0c             	mov    0xc(%ebp),%edx
f0106fae:	66 89 42 08          	mov    %ax,0x8(%edx)
	ptr_page_table[PTX(virtual_address)] = CONSTRUCT_ENTRY(physical_address , perm | PERM_PRESENT);
f0106fb2:	8b 45 10             	mov    0x10(%ebp),%eax
f0106fb5:	c1 e8 0c             	shr    $0xc,%eax
f0106fb8:	25 ff 03 00 00       	and    $0x3ff,%eax
f0106fbd:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0106fc4:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0106fc7:	01 c2                	add    %eax,%edx
f0106fc9:	8b 45 14             	mov    0x14(%ebp),%eax
f0106fcc:	0b 45 f0             	or     -0x10(%ebp),%eax
f0106fcf:	83 c8 01             	or     $0x1,%eax
f0106fd2:	89 02                	mov    %eax,(%edx)

	return 0;
f0106fd4:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0106fd9:	c9                   	leave  
f0106fda:	c3                   	ret    

f0106fdb <calculate_available_frames>:



// calculate_available_frames:
struct freeFramesCounters calculate_available_frames()
{
f0106fdb:	55                   	push   %ebp
f0106fdc:	89 e5                	mov    %esp,%ebp
f0106fde:	57                   	push   %edi
f0106fdf:	56                   	push   %esi
f0106fe0:	53                   	push   %ebx
f0106fe1:	83 ec 20             	sub    $0x20,%esp

	//calculate the free frames from the free frame list
	struct FrameInfo *ptr;
	uint32 totalFreeUnBuffered = 0 ;
f0106fe4:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
	uint32 totalFreeBuffered = 0 ;
f0106feb:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
	uint32 totalModified = 0 ;
f0106ff2:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)

	LIST_FOREACH(ptr, &free_frame_list)
f0106ff9:	a1 d8 25 78 f0       	mov    0xf07825d8,%eax
f0106ffe:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0107001:	eb 1a                	jmp    f010701d <calculate_available_frames+0x42>
	{
		if (ptr->isBuffered)
f0107003:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0107006:	8a 40 14             	mov    0x14(%eax),%al
f0107009:	84 c0                	test   %al,%al
f010700b:	74 05                	je     f0107012 <calculate_available_frames+0x37>
			totalFreeBuffered++ ;
f010700d:	ff 45 e8             	incl   -0x18(%ebp)
f0107010:	eb 03                	jmp    f0107015 <calculate_available_frames+0x3a>
		else
			totalFreeUnBuffered++ ;
f0107012:	ff 45 ec             	incl   -0x14(%ebp)
	struct FrameInfo *ptr;
	uint32 totalFreeUnBuffered = 0 ;
	uint32 totalFreeBuffered = 0 ;
	uint32 totalModified = 0 ;

	LIST_FOREACH(ptr, &free_frame_list)
f0107015:	a1 e0 25 78 f0       	mov    0xf07825e0,%eax
f010701a:	89 45 f0             	mov    %eax,-0x10(%ebp)
f010701d:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0107021:	74 07                	je     f010702a <calculate_available_frames+0x4f>
f0107023:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0107026:	8b 00                	mov    (%eax),%eax
f0107028:	eb 05                	jmp    f010702f <calculate_available_frames+0x54>
f010702a:	b8 00 00 00 00       	mov    $0x0,%eax
f010702f:	a3 e0 25 78 f0       	mov    %eax,0xf07825e0
f0107034:	a1 e0 25 78 f0       	mov    0xf07825e0,%eax
f0107039:	85 c0                	test   %eax,%eax
f010703b:	75 c6                	jne    f0107003 <calculate_available_frames+0x28>
f010703d:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0107041:	75 c0                	jne    f0107003 <calculate_available_frames+0x28>
			totalFreeBuffered++ ;
		else
			totalFreeUnBuffered++ ;
	}

	LIST_FOREACH(ptr, &modified_frame_list)
f0107043:	a1 78 25 78 f0       	mov    0xf0782578,%eax
f0107048:	89 45 f0             	mov    %eax,-0x10(%ebp)
f010704b:	eb 0b                	jmp    f0107058 <calculate_available_frames+0x7d>
	{
		totalModified++ ;
f010704d:	ff 45 e4             	incl   -0x1c(%ebp)
			totalFreeBuffered++ ;
		else
			totalFreeUnBuffered++ ;
	}

	LIST_FOREACH(ptr, &modified_frame_list)
f0107050:	a1 80 25 78 f0       	mov    0xf0782580,%eax
f0107055:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0107058:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f010705c:	74 07                	je     f0107065 <calculate_available_frames+0x8a>
f010705e:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0107061:	8b 00                	mov    (%eax),%eax
f0107063:	eb 05                	jmp    f010706a <calculate_available_frames+0x8f>
f0107065:	b8 00 00 00 00       	mov    $0x0,%eax
f010706a:	a3 80 25 78 f0       	mov    %eax,0xf0782580
f010706f:	a1 80 25 78 f0       	mov    0xf0782580,%eax
f0107074:	85 c0                	test   %eax,%eax
f0107076:	75 d5                	jne    f010704d <calculate_available_frames+0x72>
f0107078:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f010707c:	75 cf                	jne    f010704d <calculate_available_frames+0x72>
	{
		totalModified++ ;
	}

	struct freeFramesCounters counters ;
	counters.freeBuffered = totalFreeBuffered ;
f010707e:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0107081:	89 45 d8             	mov    %eax,-0x28(%ebp)
	counters.freeNotBuffered = totalFreeUnBuffered ;
f0107084:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0107087:	89 45 dc             	mov    %eax,-0x24(%ebp)
	counters.modified = totalModified;
f010708a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010708d:	89 45 e0             	mov    %eax,-0x20(%ebp)
	return counters;
f0107090:	8b 45 08             	mov    0x8(%ebp),%eax
f0107093:	89 c3                	mov    %eax,%ebx
f0107095:	8d 45 d8             	lea    -0x28(%ebp),%eax
f0107098:	ba 03 00 00 00       	mov    $0x3,%edx
f010709d:	89 df                	mov    %ebx,%edi
f010709f:	89 c6                	mov    %eax,%esi
f01070a1:	89 d1                	mov    %edx,%ecx
f01070a3:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
}
f01070a5:	8b 45 08             	mov    0x8(%ebp),%eax
f01070a8:	83 c4 20             	add    $0x20,%esp
f01070ab:	5b                   	pop    %ebx
f01070ac:	5e                   	pop    %esi
f01070ad:	5f                   	pop    %edi
f01070ae:	5d                   	pop    %ebp
f01070af:	c2 04 00             	ret    $0x4

f01070b2 <to_frame_number>:
struct FrameInfo *get_frame_info(uint32 *ptr_page_directory, uint32 virtual_address, uint32 **ptr_page_table);
void decrement_references(struct FrameInfo* ptr_frame_info);
void initialize_frame_info(struct FrameInfo *ptr_frame_info);

static inline uint32 to_frame_number(struct FrameInfo *ptr_frame_info)
{
f01070b2:	55                   	push   %ebp
f01070b3:	89 e5                	mov    %esp,%ebp
	return ptr_frame_info - frames_info;
f01070b5:	8b 45 08             	mov    0x8(%ebp),%eax
f01070b8:	8b 15 14 26 78 f0    	mov    0xf0782614,%edx
f01070be:	29 d0                	sub    %edx,%eax
f01070c0:	c1 f8 03             	sar    $0x3,%eax
f01070c3:	89 c2                	mov    %eax,%edx
f01070c5:	89 d0                	mov    %edx,%eax
f01070c7:	c1 e0 02             	shl    $0x2,%eax
f01070ca:	01 d0                	add    %edx,%eax
f01070cc:	c1 e0 02             	shl    $0x2,%eax
f01070cf:	01 d0                	add    %edx,%eax
f01070d1:	c1 e0 02             	shl    $0x2,%eax
f01070d4:	01 d0                	add    %edx,%eax
f01070d6:	89 c1                	mov    %eax,%ecx
f01070d8:	c1 e1 08             	shl    $0x8,%ecx
f01070db:	01 c8                	add    %ecx,%eax
f01070dd:	89 c1                	mov    %eax,%ecx
f01070df:	c1 e1 10             	shl    $0x10,%ecx
f01070e2:	01 c8                	add    %ecx,%eax
f01070e4:	01 c0                	add    %eax,%eax
f01070e6:	01 d0                	add    %edx,%eax
}
f01070e8:	5d                   	pop    %ebp
f01070e9:	c3                   	ret    

f01070ea <to_physical_address>:

static inline uint32 to_physical_address(struct FrameInfo *ptr_frame_info)
{
f01070ea:	55                   	push   %ebp
f01070eb:	89 e5                	mov    %esp,%ebp
	return to_frame_number(ptr_frame_info) << PGSHIFT;
f01070ed:	ff 75 08             	pushl  0x8(%ebp)
f01070f0:	e8 bd ff ff ff       	call   f01070b2 <to_frame_number>
f01070f5:	83 c4 04             	add    $0x4,%esp
f01070f8:	c1 e0 0c             	shl    $0xc,%eax
}
f01070fb:	c9                   	leave  
f01070fc:	c3                   	ret    

f01070fd <create_shares_array>:
// [1] Create "shares" array:
//===========================
//Dynamically allocate the array of shared objects
//initialize the array of shared objects by 0's and empty = 1
void create_shares_array(uint32 numOfElements)
{
f01070fd:	55                   	push   %ebp
f01070fe:	89 e5                	mov    %esp,%ebp
f0107100:	83 ec 18             	sub    $0x18,%esp
#if USE_KHEAP
	MAX_SHARES  = numOfElements ;
f0107103:	8b 45 08             	mov    0x8(%ebp),%eax
f0107106:	a3 e8 25 78 f0       	mov    %eax,0xf07825e8
	shares = kmalloc(numOfElements*sizeof(struct Share));
f010710b:	8b 55 08             	mov    0x8(%ebp),%edx
f010710e:	89 d0                	mov    %edx,%eax
f0107110:	c1 e0 02             	shl    $0x2,%eax
f0107113:	01 d0                	add    %edx,%eax
f0107115:	c1 e0 02             	shl    $0x2,%eax
f0107118:	01 d0                	add    %edx,%eax
f010711a:	c1 e0 02             	shl    $0x2,%eax
f010711d:	83 ec 0c             	sub    $0xc,%esp
f0107120:	50                   	push   %eax
f0107121:	e8 5f 07 00 00       	call   f0107885 <kmalloc>
f0107126:	83 c4 10             	add    $0x10,%esp
f0107129:	a3 ac 25 78 f0       	mov    %eax,0xf07825ac
	if (shares == NULL)
f010712e:	a1 ac 25 78 f0       	mov    0xf07825ac,%eax
f0107133:	85 c0                	test   %eax,%eax
f0107135:	75 14                	jne    f010714b <create_shares_array+0x4e>
	{
		panic("Kernel runs out of memory\nCan't create the array of shared objects.");
f0107137:	83 ec 04             	sub    $0x4,%esp
f010713a:	68 b0 60 13 f0       	push   $0xf01360b0
f010713f:	6a 21                	push   $0x21
f0107141:	68 f4 60 13 f0       	push   $0xf01360f4
f0107146:	e8 ba 90 ff ff       	call   f0100205 <_panic>
	}
#endif
	for (int i = 0; i < MAX_SHARES; ++i)
f010714b:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0107152:	eb 4b                	jmp    f010719f <create_shares_array+0xa2>
	{
		memset(&(shares[i]), 0, sizeof(struct Share));
f0107154:	8b 0d ac 25 78 f0    	mov    0xf07825ac,%ecx
f010715a:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010715d:	89 d0                	mov    %edx,%eax
f010715f:	c1 e0 02             	shl    $0x2,%eax
f0107162:	01 d0                	add    %edx,%eax
f0107164:	c1 e0 02             	shl    $0x2,%eax
f0107167:	01 d0                	add    %edx,%eax
f0107169:	c1 e0 02             	shl    $0x2,%eax
f010716c:	01 c8                	add    %ecx,%eax
f010716e:	83 ec 04             	sub    $0x4,%esp
f0107171:	6a 54                	push   $0x54
f0107173:	6a 00                	push   $0x0
f0107175:	50                   	push   %eax
f0107176:	e8 65 a2 02 00       	call   f01313e0 <memset>
f010717b:	83 c4 10             	add    $0x10,%esp
		shares[i].empty = 1;
f010717e:	8b 0d ac 25 78 f0    	mov    0xf07825ac,%ecx
f0107184:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0107187:	89 d0                	mov    %edx,%eax
f0107189:	c1 e0 02             	shl    $0x2,%eax
f010718c:	01 d0                	add    %edx,%eax
f010718e:	c1 e0 02             	shl    $0x2,%eax
f0107191:	01 d0                	add    %edx,%eax
f0107193:	c1 e0 02             	shl    $0x2,%eax
f0107196:	01 c8                	add    %ecx,%eax
f0107198:	c6 40 4d 01          	movb   $0x1,0x4d(%eax)
	if (shares == NULL)
	{
		panic("Kernel runs out of memory\nCan't create the array of shared objects.");
	}
#endif
	for (int i = 0; i < MAX_SHARES; ++i)
f010719c:	ff 45 f4             	incl   -0xc(%ebp)
f010719f:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01071a2:	a1 e8 25 78 f0       	mov    0xf07825e8,%eax
f01071a7:	39 c2                	cmp    %eax,%edx
f01071a9:	72 a9                	jb     f0107154 <create_shares_array+0x57>
	{
		memset(&(shares[i]), 0, sizeof(struct Share));
		shares[i].empty = 1;
	}
}
f01071ab:	90                   	nop
f01071ac:	c9                   	leave  
f01071ad:	c3                   	ret    

f01071ae <allocate_share_object>:
//	a) if succeed:
//		1. allocatedObject (pointer to struct Share) passed by reference
//		2. sharedObjectID (its index in the array) as a return parameter
//	b) E_NO_SHARE if the the array of shares is full (i.e. reaches "MAX_SHARES")
int allocate_share_object(struct Share **allocatedObject)
{
f01071ae:	55                   	push   %ebp
f01071af:	89 e5                	mov    %esp,%ebp
f01071b1:	53                   	push   %ebx
f01071b2:	83 ec 14             	sub    $0x14,%esp
	int32 sharedObjectID = -1 ;
f01071b5:	c7 45 f4 ff ff ff ff 	movl   $0xffffffff,-0xc(%ebp)
	for (int i = 0; i < MAX_SHARES; ++i)
f01071bc:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f01071c3:	eb 2c                	jmp    f01071f1 <allocate_share_object+0x43>
	{
		if (shares[i].empty)
f01071c5:	8b 0d ac 25 78 f0    	mov    0xf07825ac,%ecx
f01071cb:	8b 55 f0             	mov    -0x10(%ebp),%edx
f01071ce:	89 d0                	mov    %edx,%eax
f01071d0:	c1 e0 02             	shl    $0x2,%eax
f01071d3:	01 d0                	add    %edx,%eax
f01071d5:	c1 e0 02             	shl    $0x2,%eax
f01071d8:	01 d0                	add    %edx,%eax
f01071da:	c1 e0 02             	shl    $0x2,%eax
f01071dd:	01 c8                	add    %ecx,%eax
f01071df:	8a 40 4d             	mov    0x4d(%eax),%al
f01071e2:	84 c0                	test   %al,%al
f01071e4:	74 08                	je     f01071ee <allocate_share_object+0x40>
		{
			sharedObjectID = i;
f01071e6:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01071e9:	89 45 f4             	mov    %eax,-0xc(%ebp)
			break;
f01071ec:	eb 0f                	jmp    f01071fd <allocate_share_object+0x4f>
//		2. sharedObjectID (its index in the array) as a return parameter
//	b) E_NO_SHARE if the the array of shares is full (i.e. reaches "MAX_SHARES")
int allocate_share_object(struct Share **allocatedObject)
{
	int32 sharedObjectID = -1 ;
	for (int i = 0; i < MAX_SHARES; ++i)
f01071ee:	ff 45 f0             	incl   -0x10(%ebp)
f01071f1:	8b 55 f0             	mov    -0x10(%ebp),%edx
f01071f4:	a1 e8 25 78 f0       	mov    0xf07825e8,%eax
f01071f9:	39 c2                	cmp    %eax,%edx
f01071fb:	72 c8                	jb     f01071c5 <allocate_share_object+0x17>
			sharedObjectID = i;
			break;
		}
	}

	if (sharedObjectID == -1)
f01071fd:	83 7d f4 ff          	cmpl   $0xffffffff,-0xc(%ebp)
f0107201:	75 0a                	jne    f010720d <allocate_share_object+0x5f>
	{
		return E_NO_SHARE ;
f0107203:	b8 f2 ff ff ff       	mov    $0xfffffff2,%eax
f0107208:	e9 94 00 00 00       	jmp    f01072a1 <allocate_share_object+0xf3>
		}
#endif
*/
	}

	*allocatedObject = &(shares[sharedObjectID]);
f010720d:	8b 0d ac 25 78 f0    	mov    0xf07825ac,%ecx
f0107213:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0107216:	89 d0                	mov    %edx,%eax
f0107218:	c1 e0 02             	shl    $0x2,%eax
f010721b:	01 d0                	add    %edx,%eax
f010721d:	c1 e0 02             	shl    $0x2,%eax
f0107220:	01 d0                	add    %edx,%eax
f0107222:	c1 e0 02             	shl    $0x2,%eax
f0107225:	8d 14 01             	lea    (%ecx,%eax,1),%edx
f0107228:	8b 45 08             	mov    0x8(%ebp),%eax
f010722b:	89 10                	mov    %edx,(%eax)
	shares[sharedObjectID].empty = 0;
f010722d:	8b 0d ac 25 78 f0    	mov    0xf07825ac,%ecx
f0107233:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0107236:	89 d0                	mov    %edx,%eax
f0107238:	c1 e0 02             	shl    $0x2,%eax
f010723b:	01 d0                	add    %edx,%eax
f010723d:	c1 e0 02             	shl    $0x2,%eax
f0107240:	01 d0                	add    %edx,%eax
f0107242:	c1 e0 02             	shl    $0x2,%eax
f0107245:	01 c8                	add    %ecx,%eax
f0107247:	c6 40 4d 00          	movb   $0x0,0x4d(%eax)

#if USE_KHEAP
	{
		shares[sharedObjectID].framesStorage = create_frames_storage();
f010724b:	8b 0d ac 25 78 f0    	mov    0xf07825ac,%ecx
f0107251:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0107254:	89 d0                	mov    %edx,%eax
f0107256:	c1 e0 02             	shl    $0x2,%eax
f0107259:	01 d0                	add    %edx,%eax
f010725b:	c1 e0 02             	shl    $0x2,%eax
f010725e:	01 d0                	add    %edx,%eax
f0107260:	c1 e0 02             	shl    $0x2,%eax
f0107263:	8d 1c 01             	lea    (%ecx,%eax,1),%ebx
f0107266:	e8 97 01 00 00       	call   f0107402 <create_frames_storage>
f010726b:	89 43 50             	mov    %eax,0x50(%ebx)
	}
#endif
	memset(shares[sharedObjectID].framesStorage, 0, PAGE_SIZE);
f010726e:	8b 0d ac 25 78 f0    	mov    0xf07825ac,%ecx
f0107274:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0107277:	89 d0                	mov    %edx,%eax
f0107279:	c1 e0 02             	shl    $0x2,%eax
f010727c:	01 d0                	add    %edx,%eax
f010727e:	c1 e0 02             	shl    $0x2,%eax
f0107281:	01 d0                	add    %edx,%eax
f0107283:	c1 e0 02             	shl    $0x2,%eax
f0107286:	01 c8                	add    %ecx,%eax
f0107288:	8b 40 50             	mov    0x50(%eax),%eax
f010728b:	83 ec 04             	sub    $0x4,%esp
f010728e:	68 00 10 00 00       	push   $0x1000
f0107293:	6a 00                	push   $0x0
f0107295:	50                   	push   %eax
f0107296:	e8 45 a1 02 00       	call   f01313e0 <memset>
f010729b:	83 c4 10             	add    $0x10,%esp

	return sharedObjectID;
f010729e:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f01072a1:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f01072a4:	c9                   	leave  
f01072a5:	c3                   	ret    

f01072a6 <get_share_object_ID>:
//Search for the given shared object in the "shares" array
//Return:
//	a) if found: SharedObjectID (index of the shared object in the array)
//	b) else: E_SHARED_MEM_NOT_EXISTS
int get_share_object_ID(int32 ownerID, char* name)
{
f01072a6:	55                   	push   %ebp
f01072a7:	89 e5                	mov    %esp,%ebp
f01072a9:	83 ec 18             	sub    $0x18,%esp
	int i=0;
f01072ac:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

	for(; i< MAX_SHARES; ++i)
f01072b3:	eb 7b                	jmp    f0107330 <get_share_object_ID+0x8a>
	{
		if (shares[i].empty)
f01072b5:	8b 0d ac 25 78 f0    	mov    0xf07825ac,%ecx
f01072bb:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01072be:	89 d0                	mov    %edx,%eax
f01072c0:	c1 e0 02             	shl    $0x2,%eax
f01072c3:	01 d0                	add    %edx,%eax
f01072c5:	c1 e0 02             	shl    $0x2,%eax
f01072c8:	01 d0                	add    %edx,%eax
f01072ca:	c1 e0 02             	shl    $0x2,%eax
f01072cd:	01 c8                	add    %ecx,%eax
f01072cf:	8a 40 4d             	mov    0x4d(%eax),%al
f01072d2:	84 c0                	test   %al,%al
f01072d4:	75 56                	jne    f010732c <get_share_object_ID+0x86>
			continue;

		//cprintf("shared var name = %s compared with %s\n", name, shares[i].name);
		if(shares[i].ownerID == ownerID && strcmp(name, shares[i].name)==0)
f01072d6:	8b 0d ac 25 78 f0    	mov    0xf07825ac,%ecx
f01072dc:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01072df:	89 d0                	mov    %edx,%eax
f01072e1:	c1 e0 02             	shl    $0x2,%eax
f01072e4:	01 d0                	add    %edx,%eax
f01072e6:	c1 e0 02             	shl    $0x2,%eax
f01072e9:	01 d0                	add    %edx,%eax
f01072eb:	c1 e0 02             	shl    $0x2,%eax
f01072ee:	01 c8                	add    %ecx,%eax
f01072f0:	8b 00                	mov    (%eax),%eax
f01072f2:	3b 45 08             	cmp    0x8(%ebp),%eax
f01072f5:	75 36                	jne    f010732d <get_share_object_ID+0x87>
f01072f7:	8b 0d ac 25 78 f0    	mov    0xf07825ac,%ecx
f01072fd:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0107300:	89 d0                	mov    %edx,%eax
f0107302:	c1 e0 02             	shl    $0x2,%eax
f0107305:	01 d0                	add    %edx,%eax
f0107307:	c1 e0 02             	shl    $0x2,%eax
f010730a:	01 d0                	add    %edx,%eax
f010730c:	c1 e0 02             	shl    $0x2,%eax
f010730f:	01 c8                	add    %ecx,%eax
f0107311:	83 c0 04             	add    $0x4,%eax
f0107314:	83 ec 08             	sub    $0x8,%esp
f0107317:	50                   	push   %eax
f0107318:	ff 75 0c             	pushl  0xc(%ebp)
f010731b:	e8 de 9f 02 00       	call   f01312fe <strcmp>
f0107320:	83 c4 10             	add    $0x10,%esp
f0107323:	85 c0                	test   %eax,%eax
f0107325:	75 06                	jne    f010732d <get_share_object_ID+0x87>
		{
			//cprintf("%s found\n", name);
			return i;
f0107327:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010732a:	eb 19                	jmp    f0107345 <get_share_object_ID+0x9f>
	int i=0;

	for(; i< MAX_SHARES; ++i)
	{
		if (shares[i].empty)
			continue;
f010732c:	90                   	nop
//	b) else: E_SHARED_MEM_NOT_EXISTS
int get_share_object_ID(int32 ownerID, char* name)
{
	int i=0;

	for(; i< MAX_SHARES; ++i)
f010732d:	ff 45 f4             	incl   -0xc(%ebp)
f0107330:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0107333:	a1 e8 25 78 f0       	mov    0xf07825e8,%eax
f0107338:	39 c2                	cmp    %eax,%edx
f010733a:	0f 82 75 ff ff ff    	jb     f01072b5 <get_share_object_ID+0xf>
		{
			//cprintf("%s found\n", name);
			return i;
		}
	}
	return E_SHARED_MEM_NOT_EXISTS;
f0107340:	b8 f0 ff ff ff       	mov    $0xfffffff0,%eax
}
f0107345:	c9                   	leave  
f0107346:	c3                   	ret    

f0107347 <free_share_object>:
//delete the given sharedObjectID from the "shares" array
//Return:
//	a) 0 if succeed
//	b) E_SHARED_MEM_NOT_EXISTS if the shared object is not exists
int free_share_object(uint32 sharedObjectID)
{
f0107347:	55                   	push   %ebp
f0107348:	89 e5                	mov    %esp,%ebp
f010734a:	83 ec 08             	sub    $0x8,%esp
	if (sharedObjectID >= MAX_SHARES)
f010734d:	a1 e8 25 78 f0       	mov    0xf07825e8,%eax
f0107352:	39 45 08             	cmp    %eax,0x8(%ebp)
f0107355:	72 0a                	jb     f0107361 <free_share_object+0x1a>
		return E_SHARED_MEM_NOT_EXISTS;
f0107357:	b8 f0 ff ff ff       	mov    $0xfffffff0,%eax
f010735c:	e9 9f 00 00 00       	jmp    f0107400 <free_share_object+0xb9>

	//panic("deleteSharedObject: not implemented yet");
	clear_frames_storage(shares[sharedObjectID].framesStorage);
f0107361:	8b 0d ac 25 78 f0    	mov    0xf07825ac,%ecx
f0107367:	8b 55 08             	mov    0x8(%ebp),%edx
f010736a:	89 d0                	mov    %edx,%eax
f010736c:	c1 e0 02             	shl    $0x2,%eax
f010736f:	01 d0                	add    %edx,%eax
f0107371:	c1 e0 02             	shl    $0x2,%eax
f0107374:	01 d0                	add    %edx,%eax
f0107376:	c1 e0 02             	shl    $0x2,%eax
f0107379:	01 c8                	add    %ecx,%eax
f010737b:	8b 40 50             	mov    0x50(%eax),%eax
f010737e:	83 ec 0c             	sub    $0xc,%esp
f0107381:	50                   	push   %eax
f0107382:	e8 52 01 00 00       	call   f01074d9 <clear_frames_storage>
f0107387:	83 c4 10             	add    $0x10,%esp
#if USE_KHEAP
	kfree(shares[sharedObjectID].framesStorage);
f010738a:	8b 0d ac 25 78 f0    	mov    0xf07825ac,%ecx
f0107390:	8b 55 08             	mov    0x8(%ebp),%edx
f0107393:	89 d0                	mov    %edx,%eax
f0107395:	c1 e0 02             	shl    $0x2,%eax
f0107398:	01 d0                	add    %edx,%eax
f010739a:	c1 e0 02             	shl    $0x2,%eax
f010739d:	01 d0                	add    %edx,%eax
f010739f:	c1 e0 02             	shl    $0x2,%eax
f01073a2:	01 c8                	add    %ecx,%eax
f01073a4:	8b 40 50             	mov    0x50(%eax),%eax
f01073a7:	83 ec 0c             	sub    $0xc,%esp
f01073aa:	50                   	push   %eax
f01073ab:	e8 a0 05 00 00       	call   f0107950 <kfree>
f01073b0:	83 c4 10             	add    $0x10,%esp
#endif
	memset(&(shares[sharedObjectID]), 0, sizeof(struct Share));
f01073b3:	8b 0d ac 25 78 f0    	mov    0xf07825ac,%ecx
f01073b9:	8b 55 08             	mov    0x8(%ebp),%edx
f01073bc:	89 d0                	mov    %edx,%eax
f01073be:	c1 e0 02             	shl    $0x2,%eax
f01073c1:	01 d0                	add    %edx,%eax
f01073c3:	c1 e0 02             	shl    $0x2,%eax
f01073c6:	01 d0                	add    %edx,%eax
f01073c8:	c1 e0 02             	shl    $0x2,%eax
f01073cb:	01 c8                	add    %ecx,%eax
f01073cd:	83 ec 04             	sub    $0x4,%esp
f01073d0:	6a 54                	push   $0x54
f01073d2:	6a 00                	push   $0x0
f01073d4:	50                   	push   %eax
f01073d5:	e8 06 a0 02 00       	call   f01313e0 <memset>
f01073da:	83 c4 10             	add    $0x10,%esp
	shares[sharedObjectID].empty = 1;
f01073dd:	8b 0d ac 25 78 f0    	mov    0xf07825ac,%ecx
f01073e3:	8b 55 08             	mov    0x8(%ebp),%edx
f01073e6:	89 d0                	mov    %edx,%eax
f01073e8:	c1 e0 02             	shl    $0x2,%eax
f01073eb:	01 d0                	add    %edx,%eax
f01073ed:	c1 e0 02             	shl    $0x2,%eax
f01073f0:	01 d0                	add    %edx,%eax
f01073f2:	c1 e0 02             	shl    $0x2,%eax
f01073f5:	01 c8                	add    %ecx,%eax
f01073f7:	c6 40 4d 01          	movb   $0x1,0x4d(%eax)

	return 0;
f01073fb:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0107400:	c9                   	leave  
f0107401:	c3                   	ret    

f0107402 <create_frames_storage>:
//===========================
// [5] Create frames_storage:
//===========================
// if KHEAP = 1: Create the frames_storage by allocating a PAGE for its directory
inline uint32* create_frames_storage()
{
f0107402:	55                   	push   %ebp
f0107403:	89 e5                	mov    %esp,%ebp
f0107405:	83 ec 18             	sub    $0x18,%esp
	uint32* frames_storage = kmalloc(PAGE_SIZE);
f0107408:	83 ec 0c             	sub    $0xc,%esp
f010740b:	68 00 10 00 00       	push   $0x1000
f0107410:	e8 70 04 00 00       	call   f0107885 <kmalloc>
f0107415:	83 c4 10             	add    $0x10,%esp
f0107418:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if(frames_storage == NULL)
f010741b:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010741f:	75 17                	jne    f0107438 <create_frames_storage+0x36>
	{
		panic("NOT ENOUGH KERNEL HEAP SPACE");
f0107421:	83 ec 04             	sub    $0x4,%esp
f0107424:	68 15 61 13 f0       	push   $0xf0136115
f0107429:	68 a5 00 00 00       	push   $0xa5
f010742e:	68 f4 60 13 f0       	push   $0xf01360f4
f0107433:	e8 cd 8d ff ff       	call   f0100205 <_panic>
	}
	return frames_storage;
f0107438:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f010743b:	c9                   	leave  
f010743c:	c3                   	ret    

f010743d <add_frame_to_storage>:
//===========================
// [6] Add frame to storage:
//===========================
// Add a frame info to the storage of frames at the given index
inline void add_frame_to_storage(uint32* frames_storage, struct FrameInfo* ptr_frame_info, uint32 index)
{
f010743d:	55                   	push   %ebp
f010743e:	89 e5                	mov    %esp,%ebp
f0107440:	53                   	push   %ebx
f0107441:	83 ec 14             	sub    $0x14,%esp
	uint32 va = index * PAGE_SIZE ;
f0107444:	8b 45 10             	mov    0x10(%ebp),%eax
f0107447:	c1 e0 0c             	shl    $0xc,%eax
f010744a:	89 45 f4             	mov    %eax,-0xc(%ebp)
	uint32 *ptr_page_table;
	int r = get_page_table(frames_storage,  va, &ptr_page_table);
f010744d:	83 ec 04             	sub    $0x4,%esp
f0107450:	8d 45 ec             	lea    -0x14(%ebp),%eax
f0107453:	50                   	push   %eax
f0107454:	ff 75 f4             	pushl  -0xc(%ebp)
f0107457:	ff 75 08             	pushl  0x8(%ebp)
f010745a:	e8 52 f6 ff ff       	call   f0106ab1 <get_page_table>
f010745f:	83 c4 10             	add    $0x10,%esp
f0107462:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if(r == TABLE_NOT_EXIST)
f0107465:	83 7d f0 01          	cmpl   $0x1,-0x10(%ebp)
f0107469:	75 14                	jne    f010747f <add_frame_to_storage+0x42>
	{
#if USE_KHEAP
		{
			ptr_page_table = create_page_table(frames_storage, (uint32)va);
f010746b:	83 ec 08             	sub    $0x8,%esp
f010746e:	ff 75 f4             	pushl  -0xc(%ebp)
f0107471:	ff 75 08             	pushl  0x8(%ebp)
f0107474:	e8 8e f7 ff ff       	call   f0106c07 <create_page_table>
f0107479:	83 c4 10             	add    $0x10,%esp
f010747c:	89 45 ec             	mov    %eax,-0x14(%ebp)
			__static_cpt(frames_storage, (uint32)va, &ptr_page_table);

		}
#endif
	}
	ptr_page_table[PTX(va)] = CONSTRUCT_ENTRY(to_physical_address(ptr_frame_info), 0 | PERM_PRESENT);
f010747f:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0107482:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0107485:	c1 ea 0c             	shr    $0xc,%edx
f0107488:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f010748e:	c1 e2 02             	shl    $0x2,%edx
f0107491:	8d 1c 10             	lea    (%eax,%edx,1),%ebx
f0107494:	83 ec 0c             	sub    $0xc,%esp
f0107497:	ff 75 0c             	pushl  0xc(%ebp)
f010749a:	e8 4b fc ff ff       	call   f01070ea <to_physical_address>
f010749f:	83 c4 10             	add    $0x10,%esp
f01074a2:	83 c8 01             	or     $0x1,%eax
f01074a5:	89 03                	mov    %eax,(%ebx)
}
f01074a7:	90                   	nop
f01074a8:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f01074ab:	c9                   	leave  
f01074ac:	c3                   	ret    

f01074ad <get_frame_from_storage>:
//===========================
// [7] Get frame from storage:
//===========================
// Get a frame info from the storage of frames at the given index
inline struct FrameInfo* get_frame_from_storage(uint32* frames_storage, uint32 index)
{
f01074ad:	55                   	push   %ebp
f01074ae:	89 e5                	mov    %esp,%ebp
f01074b0:	83 ec 18             	sub    $0x18,%esp
	struct FrameInfo* ptr_frame_info;
	uint32 *ptr_page_table ;
	uint32 va = index * PAGE_SIZE ;
f01074b3:	8b 45 0c             	mov    0xc(%ebp),%eax
f01074b6:	c1 e0 0c             	shl    $0xc,%eax
f01074b9:	89 45 f4             	mov    %eax,-0xc(%ebp)
	ptr_frame_info = get_frame_info(frames_storage,  va, &ptr_page_table);
f01074bc:	83 ec 04             	sub    $0x4,%esp
f01074bf:	8d 45 ec             	lea    -0x14(%ebp),%eax
f01074c2:	50                   	push   %eax
f01074c3:	ff 75 f4             	pushl  -0xc(%ebp)
f01074c6:	ff 75 08             	pushl  0x8(%ebp)
f01074c9:	e8 38 f9 ff ff       	call   f0106e06 <get_frame_info>
f01074ce:	83 c4 10             	add    $0x10,%esp
f01074d1:	89 45 f0             	mov    %eax,-0x10(%ebp)
	return ptr_frame_info;
f01074d4:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
f01074d7:	c9                   	leave  
f01074d8:	c3                   	ret    

f01074d9 <clear_frames_storage>:

//===========================
// [8] Clear the frames_storage:
//===========================
inline void clear_frames_storage(uint32* frames_storage)
{
f01074d9:	55                   	push   %ebp
f01074da:	89 e5                	mov    %esp,%ebp
f01074dc:	83 ec 18             	sub    $0x18,%esp
	int fourMega = 1024 * PAGE_SIZE ;
f01074df:	c7 45 f0 00 00 40 00 	movl   $0x400000,-0x10(%ebp)
	int i ;
	for (i = 0 ; i < 1024 ; i++)
f01074e6:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01074ed:	eb 5b                	jmp    f010754a <clear_frames_storage+0x71>
	{
		if (frames_storage[i] != 0)
f01074ef:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01074f2:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f01074f9:	8b 45 08             	mov    0x8(%ebp),%eax
f01074fc:	01 d0                	add    %edx,%eax
f01074fe:	8b 00                	mov    (%eax),%eax
f0107500:	85 c0                	test   %eax,%eax
f0107502:	74 43                	je     f0107547 <clear_frames_storage+0x6e>
		{
#if USE_KHEAP
			{
				kfree((void*)kheap_virtual_address(EXTRACT_ADDRESS(frames_storage[i])));
f0107504:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0107507:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f010750e:	8b 45 08             	mov    0x8(%ebp),%eax
f0107511:	01 d0                	add    %edx,%eax
f0107513:	8b 00                	mov    (%eax),%eax
f0107515:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f010751a:	83 ec 0c             	sub    $0xc,%esp
f010751d:	50                   	push   %eax
f010751e:	e8 54 05 00 00       	call   f0107a77 <kheap_virtual_address>
f0107523:	83 c4 10             	add    $0x10,%esp
f0107526:	83 ec 0c             	sub    $0xc,%esp
f0107529:	50                   	push   %eax
f010752a:	e8 21 04 00 00       	call   f0107950 <kfree>
f010752f:	83 c4 10             	add    $0x10,%esp
#else
			{
				free_frame(to_frame_info(EXTRACT_ADDRESS(frames_storage[i])));
			}
#endif
			frames_storage[i] = 0;
f0107532:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0107535:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f010753c:	8b 45 08             	mov    0x8(%ebp),%eax
f010753f:	01 d0                	add    %edx,%eax
f0107541:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
//===========================
inline void clear_frames_storage(uint32* frames_storage)
{
	int fourMega = 1024 * PAGE_SIZE ;
	int i ;
	for (i = 0 ; i < 1024 ; i++)
f0107547:	ff 45 f4             	incl   -0xc(%ebp)
f010754a:	81 7d f4 ff 03 00 00 	cmpl   $0x3ff,-0xc(%ebp)
f0107551:	7e 9c                	jle    f01074ef <clear_frames_storage+0x16>
			}
#endif
			frames_storage[i] = 0;
		}
	}
}
f0107553:	90                   	nop
f0107554:	c9                   	leave  
f0107555:	c3                   	ret    

f0107556 <getSizeOfSharedObject>:

//==============================
// [9] Get Size of Share Object:
//==============================
int getSizeOfSharedObject(int32 ownerID, char* shareName)
{
f0107556:	55                   	push   %ebp
f0107557:	89 e5                	mov    %esp,%ebp
f0107559:	83 ec 18             	sub    $0x18,%esp
	// RETURN:
	//	a) If found, return size of shared object
	//	b) Else, return E_SHARED_MEM_NOT_EXISTS
	//

	int shareObjectID = get_share_object_ID(ownerID, shareName);
f010755c:	83 ec 08             	sub    $0x8,%esp
f010755f:	ff 75 0c             	pushl  0xc(%ebp)
f0107562:	ff 75 08             	pushl  0x8(%ebp)
f0107565:	e8 3c fd ff ff       	call   f01072a6 <get_share_object_ID>
f010756a:	83 c4 10             	add    $0x10,%esp
f010756d:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if (shareObjectID == E_SHARED_MEM_NOT_EXISTS)
f0107570:	83 7d f4 f0          	cmpl   $0xfffffff0,-0xc(%ebp)
f0107574:	75 07                	jne    f010757d <getSizeOfSharedObject+0x27>
		return E_SHARED_MEM_NOT_EXISTS;
f0107576:	b8 f0 ff ff ff       	mov    $0xfffffff0,%eax
f010757b:	eb 1d                	jmp    f010759a <getSizeOfSharedObject+0x44>
	else
		return shares[shareObjectID].size;
f010757d:	8b 0d ac 25 78 f0    	mov    0xf07825ac,%ecx
f0107583:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0107586:	89 d0                	mov    %edx,%eax
f0107588:	c1 e0 02             	shl    $0x2,%eax
f010758b:	01 d0                	add    %edx,%eax
f010758d:	c1 e0 02             	shl    $0x2,%eax
f0107590:	01 d0                	add    %edx,%eax
f0107592:	c1 e0 02             	shl    $0x2,%eax
f0107595:	01 c8                	add    %ecx,%eax
f0107597:	8b 40 44             	mov    0x44(%eax),%eax

	return 0;
}
f010759a:	c9                   	leave  
f010759b:	c3                   	ret    

f010759c <createSharedObject>:

//=========================
// [1] Create Share Object:
//=========================
int createSharedObject(int32 ownerID, char* shareName, uint32 size, uint8 isWritable, void* virtual_address)
{
f010759c:	55                   	push   %ebp
f010759d:	89 e5                	mov    %esp,%ebp
f010759f:	83 ec 18             	sub    $0x18,%esp
f01075a2:	8b 45 14             	mov    0x14(%ebp),%eax
f01075a5:	88 45 f4             	mov    %al,-0xc(%ebp)
	//TODO: [PROJECT MS3] [SHARING - KERNEL SIDE] createSharedObject()
	// your code is here, remove the panic and write your code
	panic("createSharedObject() is not implemented yet...!!");
f01075a8:	83 ec 04             	sub    $0x4,%esp
f01075ab:	68 34 61 13 f0       	push   $0xf0136134
f01075b0:	68 10 01 00 00       	push   $0x110
f01075b5:	68 f4 60 13 f0       	push   $0xf01360f4
f01075ba:	e8 46 8c ff ff       	call   f0100205 <_panic>

f01075bf <getSharedObject>:

//======================
// [2] Get Share Object:
//======================
int getSharedObject(int32 ownerID, char* shareName, void* virtual_address)
{
f01075bf:	55                   	push   %ebp
f01075c0:	89 e5                	mov    %esp,%ebp
f01075c2:	83 ec 08             	sub    $0x8,%esp
	//TODO: [PROJECT MS3] [SHARING - KERNEL SIDE] getSharedObject()
	// your code is here, remove the panic and write your code
	panic("getSharedObject() is not implemented yet...!!");
f01075c5:	83 ec 04             	sub    $0x4,%esp
f01075c8:	68 68 61 13 f0       	push   $0xf0136168
f01075cd:	68 23 01 00 00       	push   $0x123
f01075d2:	68 f4 60 13 f0       	push   $0xf01360f4
f01075d7:	e8 29 8c ff ff       	call   f0100205 <_panic>

f01075dc <freeSharedObject>:

//===================
// Free Share Object:
//===================
int freeSharedObject(int32 sharedObjectID, void *startVA)
{
f01075dc:	55                   	push   %ebp
f01075dd:	89 e5                	mov    %esp,%ebp
f01075df:	83 ec 08             	sub    $0x8,%esp
	//TODO: [PROJECT MS3 - BONUS] [SHARING - KERNEL SIDE] freeSharedObject()
	// your code is here, remove the panic and write your code
	panic("freeSharedObject() is not implemented yet...!!");
f01075e2:	83 ec 04             	sub    $0x4,%esp
f01075e5:	68 98 61 13 f0       	push   $0xf0136198
f01075ea:	68 3a 01 00 00       	push   $0x13a
f01075ef:	68 f4 60 13 f0       	push   $0xf01360f4
f01075f4:	e8 0c 8c ff ff       	call   f0100205 <_panic>

f01075f9 <isKHeapPlacementStrategyFIRSTFIT>:
static inline void setKHeapPlacementStrategyBESTFIT(){_KHeapPlacementStrategy = KHP_PLACE_BESTFIT;}
static inline void setKHeapPlacementStrategyNEXTFIT(){_KHeapPlacementStrategy = KHP_PLACE_NEXTFIT;}
static inline void setKHeapPlacementStrategyWORSTFIT(){_KHeapPlacementStrategy = KHP_PLACE_WORSTFIT;}

static inline uint8 isKHeapPlacementStrategyCONTALLOC(){if(_KHeapPlacementStrategy == KHP_PLACE_CONTALLOC) return 1; return 0;}
static inline uint8 isKHeapPlacementStrategyFIRSTFIT(){if(_KHeapPlacementStrategy == KHP_PLACE_FIRSTFIT) return 1; return 0;}
f01075f9:	55                   	push   %ebp
f01075fa:	89 e5                	mov    %esp,%ebp
f01075fc:	a1 1c 26 78 f0       	mov    0xf078261c,%eax
f0107601:	83 f8 01             	cmp    $0x1,%eax
f0107604:	75 04                	jne    f010760a <isKHeapPlacementStrategyFIRSTFIT+0x11>
f0107606:	b0 01                	mov    $0x1,%al
f0107608:	eb 02                	jmp    f010760c <isKHeapPlacementStrategyFIRSTFIT+0x13>
f010760a:	b0 00                	mov    $0x0,%al
f010760c:	5d                   	pop    %ebp
f010760d:	c3                   	ret    

f010760e <isKHeapPlacementStrategyBESTFIT>:
static inline uint8 isKHeapPlacementStrategyBESTFIT(){if(_KHeapPlacementStrategy == KHP_PLACE_BESTFIT) return 1; return 0;}
f010760e:	55                   	push   %ebp
f010760f:	89 e5                	mov    %esp,%ebp
f0107611:	a1 1c 26 78 f0       	mov    0xf078261c,%eax
f0107616:	83 f8 02             	cmp    $0x2,%eax
f0107619:	75 04                	jne    f010761f <isKHeapPlacementStrategyBESTFIT+0x11>
f010761b:	b0 01                	mov    $0x1,%al
f010761d:	eb 02                	jmp    f0107621 <isKHeapPlacementStrategyBESTFIT+0x13>
f010761f:	b0 00                	mov    $0x0,%al
f0107621:	5d                   	pop    %ebp
f0107622:	c3                   	ret    

f0107623 <isKHeapPlacementStrategyNEXTFIT>:
static inline uint8 isKHeapPlacementStrategyNEXTFIT(){if(_KHeapPlacementStrategy == KHP_PLACE_NEXTFIT) return 1; return 0;}
f0107623:	55                   	push   %ebp
f0107624:	89 e5                	mov    %esp,%ebp
f0107626:	a1 1c 26 78 f0       	mov    0xf078261c,%eax
f010762b:	83 f8 03             	cmp    $0x3,%eax
f010762e:	75 04                	jne    f0107634 <isKHeapPlacementStrategyNEXTFIT+0x11>
f0107630:	b0 01                	mov    $0x1,%al
f0107632:	eb 02                	jmp    f0107636 <isKHeapPlacementStrategyNEXTFIT+0x13>
f0107634:	b0 00                	mov    $0x0,%al
f0107636:	5d                   	pop    %ebp
f0107637:	c3                   	ret    

f0107638 <to_frame_number>:
struct FrameInfo *get_frame_info(uint32 *ptr_page_directory, uint32 virtual_address, uint32 **ptr_page_table);
void decrement_references(struct FrameInfo* ptr_frame_info);
void initialize_frame_info(struct FrameInfo *ptr_frame_info);

static inline uint32 to_frame_number(struct FrameInfo *ptr_frame_info)
{
f0107638:	55                   	push   %ebp
f0107639:	89 e5                	mov    %esp,%ebp
	return ptr_frame_info - frames_info;
f010763b:	8b 45 08             	mov    0x8(%ebp),%eax
f010763e:	8b 15 14 26 78 f0    	mov    0xf0782614,%edx
f0107644:	29 d0                	sub    %edx,%eax
f0107646:	c1 f8 03             	sar    $0x3,%eax
f0107649:	89 c2                	mov    %eax,%edx
f010764b:	89 d0                	mov    %edx,%eax
f010764d:	c1 e0 02             	shl    $0x2,%eax
f0107650:	01 d0                	add    %edx,%eax
f0107652:	c1 e0 02             	shl    $0x2,%eax
f0107655:	01 d0                	add    %edx,%eax
f0107657:	c1 e0 02             	shl    $0x2,%eax
f010765a:	01 d0                	add    %edx,%eax
f010765c:	89 c1                	mov    %eax,%ecx
f010765e:	c1 e1 08             	shl    $0x8,%ecx
f0107661:	01 c8                	add    %ecx,%eax
f0107663:	89 c1                	mov    %eax,%ecx
f0107665:	c1 e1 10             	shl    $0x10,%ecx
f0107668:	01 c8                	add    %ecx,%eax
f010766a:	01 c0                	add    %eax,%eax
f010766c:	01 d0                	add    %edx,%eax
}
f010766e:	5d                   	pop    %ebp
f010766f:	c3                   	ret    

f0107670 <to_physical_address>:

static inline uint32 to_physical_address(struct FrameInfo *ptr_frame_info)
{
f0107670:	55                   	push   %ebp
f0107671:	89 e5                	mov    %esp,%ebp
	return to_frame_number(ptr_frame_info) << PGSHIFT;
f0107673:	ff 75 08             	pushl  0x8(%ebp)
f0107676:	e8 bd ff ff ff       	call   f0107638 <to_frame_number>
f010767b:	83 c4 04             	add    $0x4,%esp
f010767e:	c1 e0 0c             	shl    $0xc,%eax
}
f0107681:	c9                   	leave  
f0107682:	c3                   	ret    

f0107683 <to_frame_info>:

static inline struct FrameInfo* to_frame_info(uint32 physical_address)
{
f0107683:	55                   	push   %ebp
f0107684:	89 e5                	mov    %esp,%ebp
f0107686:	83 ec 08             	sub    $0x8,%esp
	if (PPN(physical_address) >= number_of_frames)
f0107689:	8b 45 08             	mov    0x8(%ebp),%eax
f010768c:	c1 e8 0c             	shr    $0xc,%eax
f010768f:	89 c2                	mov    %eax,%edx
f0107691:	a1 d0 25 78 f0       	mov    0xf07825d0,%eax
f0107696:	39 c2                	cmp    %eax,%edx
f0107698:	72 14                	jb     f01076ae <to_frame_info+0x2b>
		panic("to_frame_info called with invalid pa");
f010769a:	83 ec 04             	sub    $0x4,%esp
f010769d:	68 c8 61 13 f0       	push   $0xf01361c8
f01076a2:	6a 55                	push   $0x55
f01076a4:	68 ed 61 13 f0       	push   $0xf01361ed
f01076a9:	e8 57 8b ff ff       	call   f0100205 <_panic>
	return &frames_info[PPN(physical_address)];
f01076ae:	8b 15 14 26 78 f0    	mov    0xf0782614,%edx
f01076b4:	8b 45 08             	mov    0x8(%ebp),%eax
f01076b7:	c1 e8 0c             	shr    $0xc,%eax
f01076ba:	89 c1                	mov    %eax,%ecx
f01076bc:	89 c8                	mov    %ecx,%eax
f01076be:	01 c0                	add    %eax,%eax
f01076c0:	01 c8                	add    %ecx,%eax
f01076c2:	c1 e0 03             	shl    $0x3,%eax
f01076c5:	01 d0                	add    %edx,%eax
}
f01076c7:	c9                   	leave  
f01076c8:	c3                   	ret    

f01076c9 <initialize_dyn_block_system>:
//NOTE: All kernel heap allocations are multiples of PAGE_SIZE (4KB)//
//==================================================================//
//==================================================================//

void initialize_dyn_block_system()
{
f01076c9:	55                   	push   %ebp
f01076ca:	89 e5                	mov    %esp,%ebp
f01076cc:	83 ec 18             	sub    $0x18,%esp
//TODO: [PROJECT MS2] [KERNEL HEAP] initialize_dyn_block_system
	// your code is here, remove the panic and write your code
	//kpanic_into_prompt("initialize_dyn_block_system() is not implemented yet...!!");

	//1.Initialize two lists (AllocMemBlocksList & FreeMemBlocksList) [Hint: use LIST_INIT()]
	LIST_INIT(&AllocMemBlocksList);
f01076cf:	c7 05 88 25 78 f0 00 	movl   $0x0,0xf0782588
f01076d6:	00 00 00 
f01076d9:	c7 05 8c 25 78 f0 00 	movl   $0x0,0xf078258c
f01076e0:	00 00 00 
f01076e3:	c7 05 94 25 78 f0 00 	movl   $0x0,0xf0782594
f01076ea:	00 00 00 
	LIST_INIT(&FreeMemBlocksList);
f01076ed:	c7 05 24 26 78 f0 00 	movl   $0x0,0xf0782624
f01076f4:	00 00 00 
f01076f7:	c7 05 28 26 78 f0 00 	movl   $0x0,0xf0782628
f01076fe:	00 00 00 
f0107701:	c7 05 30 26 78 f0 00 	movl   $0x0,0xf0782630
f0107708:	00 00 00 
	uint32 arr_size = 0;
f010770b:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	//DO NOTHING
#else
	 //Dynamically allocate the array of MemBlockNodes remember to:

	 //2. set MAX_MEM_BLOCK_CNT with the chosen size of the array
	 MAX_MEM_BLOCK_CNT = (KERNEL_HEAP_MAX-KERNEL_HEAP_START)/PAGE_SIZE;
f0107712:	c7 05 c4 25 78 f0 ff 	movl   $0x9fff,0xf07825c4
f0107719:	9f 00 00 

	 //3. assign starting address of MemBlockNodes array
	 MemBlockNodes  =(struct MemBlock*) KERNEL_HEAP_START;
f010771c:	c7 05 98 25 78 f0 00 	movl   $0xf6000000,0xf0782598
f0107723:	00 00 f6 

	 //4.calculate the total size of memory required for the MemBlockNodes array (size of all the Structs)
	 arr_size =  ROUNDUP(MAX_MEM_BLOCK_CNT * sizeof(struct MemBlock), PAGE_SIZE);
f0107726:	c7 45 f0 00 10 00 00 	movl   $0x1000,-0x10(%ebp)
f010772d:	a1 c4 25 78 f0       	mov    0xf07825c4,%eax
f0107732:	c1 e0 04             	shl    $0x4,%eax
f0107735:	89 c2                	mov    %eax,%edx
f0107737:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010773a:	01 d0                	add    %edx,%eax
f010773c:	48                   	dec    %eax
f010773d:	89 45 ec             	mov    %eax,-0x14(%ebp)
f0107740:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0107743:	ba 00 00 00 00       	mov    $0x0,%edx
f0107748:	f7 75 f0             	divl   -0x10(%ebp)
f010774b:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010774e:	29 d0                	sub    %edx,%eax
f0107750:	89 45 f4             	mov    %eax,-0xc(%ebp)

	 //5. allocate_chunk for this total memory size, with correct startAddress
	 allocate_chunk(ptr_page_directory, KERNEL_HEAP_START , arr_size , PERM_WRITEABLE | PERM_PRESENT);
f0107753:	a1 3c 26 78 f0       	mov    0xf078263c,%eax
f0107758:	6a 03                	push   $0x3
f010775a:	ff 75 f4             	pushl  -0xc(%ebp)
f010775d:	68 00 00 00 f6       	push   $0xf6000000
f0107762:	50                   	push   %eax
f0107763:	e8 bd 13 00 00       	call   f0108b25 <allocate_chunk>
f0107768:	83 c4 10             	add    $0x10,%esp
	 //HINT: can use alloc_chunk(...) function
#endif
	//6.Initialize AvailableMemBlocksList by filling it with the MemBlockNodes
	initialize_MemBlocksList(MAX_MEM_BLOCK_CNT);
f010776b:	a1 c4 25 78 f0       	mov    0xf07825c4,%eax
f0107770:	83 ec 0c             	sub    $0xc,%esp
f0107773:	50                   	push   %eax
f0107774:	e8 e3 a5 02 00       	call   f0131d5c <initialize_MemBlocksList>
f0107779:	83 c4 10             	add    $0x10,%esp
	//7. Take a block from the AvailableMemBlocksList and fill its size with all of the heap size (without size allocated for the array) and think what should the start address be?
	struct MemBlock * NewBlock = LIST_FIRST(&AvailableMemBlocksList);
f010777c:	a1 58 26 78 f0       	mov    0xf0782658,%eax
f0107781:	89 45 e8             	mov    %eax,-0x18(%ebp)
	NewBlock->sva = KERNEL_HEAP_START + arr_size;
f0107784:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0107787:	8d 90 00 00 00 f6    	lea    -0xa000000(%eax),%edx
f010778d:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0107790:	89 50 08             	mov    %edx,0x8(%eax)
	NewBlock->size = (KERNEL_HEAP_MAX-KERNEL_HEAP_START) - arr_size;
f0107793:	b8 00 f0 ff 09       	mov    $0x9fff000,%eax
f0107798:	2b 45 f4             	sub    -0xc(%ebp),%eax
f010779b:	89 c2                	mov    %eax,%edx
f010779d:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01077a0:	89 50 0c             	mov    %edx,0xc(%eax)
	LIST_REMOVE(&AvailableMemBlocksList,NewBlock);
f01077a3:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
f01077a7:	75 14                	jne    f01077bd <initialize_dyn_block_system+0xf4>
f01077a9:	83 ec 04             	sub    $0x4,%esp
f01077ac:	68 07 62 13 f0       	push   $0xf0136207
f01077b1:	6a 30                	push   $0x30
f01077b3:	68 25 62 13 f0       	push   $0xf0136225
f01077b8:	e8 48 8a ff ff       	call   f0100205 <_panic>
f01077bd:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01077c0:	8b 00                	mov    (%eax),%eax
f01077c2:	85 c0                	test   %eax,%eax
f01077c4:	74 10                	je     f01077d6 <initialize_dyn_block_system+0x10d>
f01077c6:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01077c9:	8b 00                	mov    (%eax),%eax
f01077cb:	8b 55 e8             	mov    -0x18(%ebp),%edx
f01077ce:	8b 52 04             	mov    0x4(%edx),%edx
f01077d1:	89 50 04             	mov    %edx,0x4(%eax)
f01077d4:	eb 0b                	jmp    f01077e1 <initialize_dyn_block_system+0x118>
f01077d6:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01077d9:	8b 40 04             	mov    0x4(%eax),%eax
f01077dc:	a3 5c 26 78 f0       	mov    %eax,0xf078265c
f01077e1:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01077e4:	8b 40 04             	mov    0x4(%eax),%eax
f01077e7:	85 c0                	test   %eax,%eax
f01077e9:	74 0f                	je     f01077fa <initialize_dyn_block_system+0x131>
f01077eb:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01077ee:	8b 40 04             	mov    0x4(%eax),%eax
f01077f1:	8b 55 e8             	mov    -0x18(%ebp),%edx
f01077f4:	8b 12                	mov    (%edx),%edx
f01077f6:	89 10                	mov    %edx,(%eax)
f01077f8:	eb 0a                	jmp    f0107804 <initialize_dyn_block_system+0x13b>
f01077fa:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01077fd:	8b 00                	mov    (%eax),%eax
f01077ff:	a3 58 26 78 f0       	mov    %eax,0xf0782658
f0107804:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0107807:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f010780d:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0107810:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f0107817:	a1 64 26 78 f0       	mov    0xf0782664,%eax
f010781c:	48                   	dec    %eax
f010781d:	a3 64 26 78 f0       	mov    %eax,0xf0782664
	//8. Insert a new MemBlock with the remaining heap size into the FreeMemBlocksList
	LIST_INSERT_HEAD(&FreeMemBlocksList, NewBlock);
f0107822:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
f0107826:	75 14                	jne    f010783c <initialize_dyn_block_system+0x173>
f0107828:	83 ec 04             	sub    $0x4,%esp
f010782b:	68 38 62 13 f0       	push   $0xf0136238
f0107830:	6a 32                	push   $0x32
f0107832:	68 25 62 13 f0       	push   $0xf0136225
f0107837:	e8 c9 89 ff ff       	call   f0100205 <_panic>
f010783c:	8b 15 24 26 78 f0    	mov    0xf0782624,%edx
f0107842:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0107845:	89 10                	mov    %edx,(%eax)
f0107847:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010784a:	8b 00                	mov    (%eax),%eax
f010784c:	85 c0                	test   %eax,%eax
f010784e:	74 0d                	je     f010785d <initialize_dyn_block_system+0x194>
f0107850:	a1 24 26 78 f0       	mov    0xf0782624,%eax
f0107855:	8b 55 e8             	mov    -0x18(%ebp),%edx
f0107858:	89 50 04             	mov    %edx,0x4(%eax)
f010785b:	eb 08                	jmp    f0107865 <initialize_dyn_block_system+0x19c>
f010785d:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0107860:	a3 28 26 78 f0       	mov    %eax,0xf0782628
f0107865:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0107868:	a3 24 26 78 f0       	mov    %eax,0xf0782624
f010786d:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0107870:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f0107877:	a1 30 26 78 f0       	mov    0xf0782630,%eax
f010787c:	40                   	inc    %eax
f010787d:	a3 30 26 78 f0       	mov    %eax,0xf0782630

}
f0107882:	90                   	nop
f0107883:	c9                   	leave  
f0107884:	c3                   	ret    

f0107885 <kmalloc>:

void* kmalloc(unsigned int size)
{
f0107885:	55                   	push   %ebp
f0107886:	89 e5                	mov    %esp,%ebp
f0107888:	83 ec 28             	sub    $0x28,%esp
	//TODO: [PROJECT MS2] [KERNEL HEAP] kmalloc
	// your code is here, remove the panic and write your code
	//kpanic_into_prompt("kmalloc() is not implemented yet...!!");
	uint32 allocate_size=ROUNDUP(size,PAGE_SIZE);
f010788b:	c7 45 f0 00 10 00 00 	movl   $0x1000,-0x10(%ebp)
f0107892:	8b 55 08             	mov    0x8(%ebp),%edx
f0107895:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0107898:	01 d0                	add    %edx,%eax
f010789a:	48                   	dec    %eax
f010789b:	89 45 ec             	mov    %eax,-0x14(%ebp)
f010789e:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01078a1:	ba 00 00 00 00       	mov    $0x0,%edx
f01078a6:	f7 75 f0             	divl   -0x10(%ebp)
f01078a9:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01078ac:	29 d0                	sub    %edx,%eax
f01078ae:	89 45 e8             	mov    %eax,-0x18(%ebp)
	struct MemBlock * mem_block;

	if(isKHeapPlacementStrategyFIRSTFIT())
f01078b1:	e8 43 fd ff ff       	call   f01075f9 <isKHeapPlacementStrategyFIRSTFIT>
f01078b6:	84 c0                	test   %al,%al
f01078b8:	74 13                	je     f01078cd <kmalloc+0x48>
		mem_block = alloc_block_FF(allocate_size);
f01078ba:	83 ec 0c             	sub    $0xc,%esp
f01078bd:	ff 75 e8             	pushl  -0x18(%ebp)
f01078c0:	e8 59 a8 02 00       	call   f013211e <alloc_block_FF>
f01078c5:	83 c4 10             	add    $0x10,%esp
f01078c8:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01078cb:	eb 36                	jmp    f0107903 <kmalloc+0x7e>
	else if (isKHeapPlacementStrategyBESTFIT())
f01078cd:	e8 3c fd ff ff       	call   f010760e <isKHeapPlacementStrategyBESTFIT>
f01078d2:	84 c0                	test   %al,%al
f01078d4:	74 13                	je     f01078e9 <kmalloc+0x64>
		mem_block = alloc_block_BF(allocate_size);
f01078d6:	83 ec 0c             	sub    $0xc,%esp
f01078d9:	ff 75 e8             	pushl  -0x18(%ebp)
f01078dc:	e8 0a aa 02 00       	call   f01322eb <alloc_block_BF>
f01078e1:	83 c4 10             	add    $0x10,%esp
f01078e4:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01078e7:	eb 1a                	jmp    f0107903 <kmalloc+0x7e>
	else if (isKHeapPlacementStrategyNEXTFIT())
f01078e9:	e8 35 fd ff ff       	call   f0107623 <isKHeapPlacementStrategyNEXTFIT>
f01078ee:	84 c0                	test   %al,%al
f01078f0:	74 11                	je     f0107903 <kmalloc+0x7e>
		mem_block = alloc_block_NF(allocate_size);
f01078f2:	83 ec 0c             	sub    $0xc,%esp
f01078f5:	ff 75 e8             	pushl  -0x18(%ebp)
f01078f8:	e8 ff ab 02 00       	call   f01324fc <alloc_block_NF>
f01078fd:	83 c4 10             	add    $0x10,%esp
f0107900:	89 45 f4             	mov    %eax,-0xc(%ebp)

	if (mem_block != NULL )
f0107903:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0107907:	74 40                	je     f0107949 <kmalloc+0xc4>
	{
		int result = allocate_chunk(ptr_page_directory,mem_block->sva,allocate_size,PERM_WRITEABLE| PERM_PRESENT);
f0107909:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010790c:	8b 50 08             	mov    0x8(%eax),%edx
f010790f:	a1 3c 26 78 f0       	mov    0xf078263c,%eax
f0107914:	6a 03                	push   $0x3
f0107916:	ff 75 e8             	pushl  -0x18(%ebp)
f0107919:	52                   	push   %edx
f010791a:	50                   	push   %eax
f010791b:	e8 05 12 00 00       	call   f0108b25 <allocate_chunk>
f0107920:	83 c4 10             	add    $0x10,%esp
f0107923:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		if (result == 0)
f0107926:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f010792a:	75 16                	jne    f0107942 <kmalloc+0xbd>
		{
			insert_sorted_allocList(mem_block);
f010792c:	83 ec 0c             	sub    $0xc,%esp
f010792f:	ff 75 f4             	pushl  -0xc(%ebp)
f0107932:	e8 5a a5 02 00       	call   f0131e91 <insert_sorted_allocList>
f0107937:	83 c4 10             	add    $0x10,%esp
			return (uint32 *) mem_block->sva;
f010793a:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010793d:	8b 40 08             	mov    0x8(%eax),%eax
f0107940:	eb 0c                	jmp    f010794e <kmalloc+0xc9>
		}
		else
			return 	NULL;
f0107942:	b8 00 00 00 00       	mov    $0x0,%eax
f0107947:	eb 05                	jmp    f010794e <kmalloc+0xc9>
	}
	return NULL;
f0107949:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010794e:	c9                   	leave  
f010794f:	c3                   	ret    

f0107950 <kfree>:
void kfree(void* virtual_address)
{
f0107950:	55                   	push   %ebp
f0107951:	89 e5                	mov    %esp,%ebp
f0107953:	83 ec 28             	sub    $0x28,%esp
	//TODO: [PROJECT MS2] [KERNEL HEAP] kfree
	// Write your code here, remove the panic and write your code
	//panic("kfree() is not implemented yet...!!");
	struct MemBlock * mem_block = find_block(&AllocMemBlocksList,(uint32)virtual_address);
f0107956:	8b 45 08             	mov    0x8(%ebp),%eax
f0107959:	83 ec 08             	sub    $0x8,%esp
f010795c:	50                   	push   %eax
f010795d:	68 88 25 78 f0       	push   $0xf0782588
f0107962:	e8 d2 a4 02 00       	call   f0131e39 <find_block>
f0107967:	83 c4 10             	add    $0x10,%esp
f010796a:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if(mem_block != NULL)
f010796d:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0107971:	0f 84 fd 00 00 00    	je     f0107a74 <kfree+0x124>
	{
		LIST_REMOVE(&AllocMemBlocksList,mem_block);
f0107977:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f010797b:	75 14                	jne    f0107991 <kfree+0x41>
f010797d:	83 ec 04             	sub    $0x4,%esp
f0107980:	68 07 62 13 f0       	push   $0xf0136207
f0107985:	6a 5a                	push   $0x5a
f0107987:	68 25 62 13 f0       	push   $0xf0136225
f010798c:	e8 74 88 ff ff       	call   f0100205 <_panic>
f0107991:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0107994:	8b 00                	mov    (%eax),%eax
f0107996:	85 c0                	test   %eax,%eax
f0107998:	74 10                	je     f01079aa <kfree+0x5a>
f010799a:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010799d:	8b 00                	mov    (%eax),%eax
f010799f:	8b 55 f0             	mov    -0x10(%ebp),%edx
f01079a2:	8b 52 04             	mov    0x4(%edx),%edx
f01079a5:	89 50 04             	mov    %edx,0x4(%eax)
f01079a8:	eb 0b                	jmp    f01079b5 <kfree+0x65>
f01079aa:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01079ad:	8b 40 04             	mov    0x4(%eax),%eax
f01079b0:	a3 8c 25 78 f0       	mov    %eax,0xf078258c
f01079b5:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01079b8:	8b 40 04             	mov    0x4(%eax),%eax
f01079bb:	85 c0                	test   %eax,%eax
f01079bd:	74 0f                	je     f01079ce <kfree+0x7e>
f01079bf:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01079c2:	8b 40 04             	mov    0x4(%eax),%eax
f01079c5:	8b 55 f0             	mov    -0x10(%ebp),%edx
f01079c8:	8b 12                	mov    (%edx),%edx
f01079ca:	89 10                	mov    %edx,(%eax)
f01079cc:	eb 0a                	jmp    f01079d8 <kfree+0x88>
f01079ce:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01079d1:	8b 00                	mov    (%eax),%eax
f01079d3:	a3 88 25 78 f0       	mov    %eax,0xf0782588
f01079d8:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01079db:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f01079e1:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01079e4:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f01079eb:	a1 94 25 78 f0       	mov    0xf0782594,%eax
f01079f0:	48                   	dec    %eax
f01079f1:	a3 94 25 78 f0       	mov    %eax,0xf0782594
		uint32 start = ROUNDDOWN(mem_block->sva,PAGE_SIZE);
f01079f6:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01079f9:	8b 40 08             	mov    0x8(%eax),%eax
f01079fc:	89 45 ec             	mov    %eax,-0x14(%ebp)
f01079ff:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0107a02:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0107a07:	89 45 e8             	mov    %eax,-0x18(%ebp)
		uint32 end = ROUNDUP(mem_block->sva+mem_block->size,PAGE_SIZE);
f0107a0a:	c7 45 e4 00 10 00 00 	movl   $0x1000,-0x1c(%ebp)
f0107a11:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0107a14:	8b 50 08             	mov    0x8(%eax),%edx
f0107a17:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0107a1a:	8b 40 0c             	mov    0xc(%eax),%eax
f0107a1d:	01 c2                	add    %eax,%edx
f0107a1f:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0107a22:	01 d0                	add    %edx,%eax
f0107a24:	48                   	dec    %eax
f0107a25:	89 45 e0             	mov    %eax,-0x20(%ebp)
f0107a28:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0107a2b:	ba 00 00 00 00       	mov    $0x0,%edx
f0107a30:	f7 75 e4             	divl   -0x1c(%ebp)
f0107a33:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0107a36:	29 d0                	sub    %edx,%eax
f0107a38:	89 45 dc             	mov    %eax,-0x24(%ebp)

		for(uint32 i = start ; i < end; i += PAGE_SIZE)
f0107a3b:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0107a3e:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0107a41:	eb 1b                	jmp    f0107a5e <kfree+0x10e>
			unmap_frame(ptr_page_directory , i);
f0107a43:	a1 3c 26 78 f0       	mov    0xf078263c,%eax
f0107a48:	83 ec 08             	sub    $0x8,%esp
f0107a4b:	ff 75 f4             	pushl  -0xc(%ebp)
f0107a4e:	50                   	push   %eax
f0107a4f:	e8 22 f4 ff ff       	call   f0106e76 <unmap_frame>
f0107a54:	83 c4 10             	add    $0x10,%esp
	{
		LIST_REMOVE(&AllocMemBlocksList,mem_block);
		uint32 start = ROUNDDOWN(mem_block->sva,PAGE_SIZE);
		uint32 end = ROUNDUP(mem_block->sva+mem_block->size,PAGE_SIZE);

		for(uint32 i = start ; i < end; i += PAGE_SIZE)
f0107a57:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
f0107a5e:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0107a61:	3b 45 dc             	cmp    -0x24(%ebp),%eax
f0107a64:	72 dd                	jb     f0107a43 <kfree+0xf3>
			unmap_frame(ptr_page_directory , i);

		insert_sorted_with_merge_freeList(mem_block);
f0107a66:	83 ec 0c             	sub    $0xc,%esp
f0107a69:	ff 75 f0             	pushl  -0x10(%ebp)
f0107a6c:	e8 58 b0 02 00       	call   f0132ac9 <insert_sorted_with_merge_freeList>
f0107a71:	83 c4 10             	add    $0x10,%esp
	}
}
f0107a74:	90                   	nop
f0107a75:	c9                   	leave  
f0107a76:	c3                   	ret    

f0107a77 <kheap_virtual_address>:

unsigned int kheap_virtual_address(unsigned int physical_address)
{
f0107a77:	55                   	push   %ebp
f0107a78:	89 e5                	mov    %esp,%ebp
f0107a7a:	83 ec 18             	sub    $0x18,%esp
	//TODO: [PROJECT MS2] [KERNEL HEAP] kheap_virtual_address
	// Write your code here, remove the panic and write your code
//	panic("kheap_virtual_address() is not implemented yet...!!");

	struct FrameInfo *convert_to_va=to_frame_info(physical_address);
f0107a7d:	83 ec 0c             	sub    $0xc,%esp
f0107a80:	ff 75 08             	pushl  0x8(%ebp)
f0107a83:	e8 fb fb ff ff       	call   f0107683 <to_frame_info>
f0107a88:	83 c4 10             	add    $0x10,%esp
f0107a8b:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if(convert_to_va!=NULL)
f0107a8e:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0107a92:	74 08                	je     f0107a9c <kheap_virtual_address+0x25>
		return convert_to_va->va;
f0107a94:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0107a97:	8b 40 0c             	mov    0xc(%eax),%eax
f0107a9a:	eb 05                	jmp    f0107aa1 <kheap_virtual_address+0x2a>
	else
		return 0;
f0107a9c:	b8 00 00 00 00       	mov    $0x0,%eax
	//return the virtual address corresponding to given physical_address
	//refer to the project presentation and documentation for details
	//EFFICIENT IMPLEMENTATION ~O(1) IS REQUIRED ==================
}
f0107aa1:	c9                   	leave  
f0107aa2:	c3                   	ret    

f0107aa3 <kheap_physical_address>:

unsigned int kheap_physical_address(unsigned int virtual_address)
{
f0107aa3:	55                   	push   %ebp
f0107aa4:	89 e5                	mov    %esp,%ebp
f0107aa6:	83 ec 18             	sub    $0x18,%esp
	//TODO: [PROJECT MS2] [KERNEL HEAP] kheap_physical_address
	// Write your code here, remove the panic and write your code
	//panic("kheap_physical_address() is not implemented yet...!!");
	uint32 *ptr_page=NULL;
f0107aa9:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
	struct FrameInfo *frame_of_the_va = get_frame_info(ptr_page_directory,virtual_address,&ptr_page);
f0107ab0:	a1 3c 26 78 f0       	mov    0xf078263c,%eax
f0107ab5:	83 ec 04             	sub    $0x4,%esp
f0107ab8:	8d 55 ec             	lea    -0x14(%ebp),%edx
f0107abb:	52                   	push   %edx
f0107abc:	ff 75 08             	pushl  0x8(%ebp)
f0107abf:	50                   	push   %eax
f0107ac0:	e8 41 f3 ff ff       	call   f0106e06 <get_frame_info>
f0107ac5:	83 c4 10             	add    $0x10,%esp
f0107ac8:	89 45 f4             	mov    %eax,-0xc(%ebp)
	uint32 address_physical=to_physical_address(frame_of_the_va);
f0107acb:	83 ec 0c             	sub    $0xc,%esp
f0107ace:	ff 75 f4             	pushl  -0xc(%ebp)
f0107ad1:	e8 9a fb ff ff       	call   f0107670 <to_physical_address>
f0107ad6:	83 c4 10             	add    $0x10,%esp
f0107ad9:	89 45 f0             	mov    %eax,-0x10(%ebp)

	if(frame_of_the_va != NULL)
f0107adc:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0107ae0:	74 05                	je     f0107ae7 <kheap_physical_address+0x44>
		return address_physical;
f0107ae2:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0107ae5:	eb 05                	jmp    f0107aec <kheap_physical_address+0x49>
	return 0;
f0107ae7:	b8 00 00 00 00       	mov    $0x0,%eax

	//return the physical address corresponding to given virtual_address
	//refer to the project presentation and documentation for details
}
f0107aec:	c9                   	leave  
f0107aed:	c3                   	ret    

f0107aee <kfreeall>:


void kfreeall()
{
f0107aee:	55                   	push   %ebp
f0107aef:	89 e5                	mov    %esp,%ebp
f0107af1:	83 ec 08             	sub    $0x8,%esp
	panic("Not implemented!");
f0107af4:	83 ec 04             	sub    $0x4,%esp
f0107af7:	68 5b 62 13 f0       	push   $0xf013625b
f0107afc:	68 89 00 00 00       	push   $0x89
f0107b01:	68 25 62 13 f0       	push   $0xf0136225
f0107b06:	e8 fa 86 ff ff       	call   f0100205 <_panic>

f0107b0b <kshrink>:

}

void kshrink(uint32 newSize)
{
f0107b0b:	55                   	push   %ebp
f0107b0c:	89 e5                	mov    %esp,%ebp
f0107b0e:	83 ec 08             	sub    $0x8,%esp
	panic("Not implemented!");
f0107b11:	83 ec 04             	sub    $0x4,%esp
f0107b14:	68 5b 62 13 f0       	push   $0xf013625b
f0107b19:	68 8f 00 00 00       	push   $0x8f
f0107b1e:	68 25 62 13 f0       	push   $0xf0136225
f0107b23:	e8 dd 86 ff ff       	call   f0100205 <_panic>

f0107b28 <kexpand>:
}

void kexpand(uint32 newSize)
{
f0107b28:	55                   	push   %ebp
f0107b29:	89 e5                	mov    %esp,%ebp
f0107b2b:	83 ec 08             	sub    $0x8,%esp
	panic("Not implemented!");
f0107b2e:	83 ec 04             	sub    $0x4,%esp
f0107b31:	68 5b 62 13 f0       	push   $0xf013625b
f0107b36:	68 94 00 00 00       	push   $0x94
f0107b3b:	68 25 62 13 f0       	push   $0xf0136225
f0107b40:	e8 c0 86 ff ff       	call   f0100205 <_panic>

f0107b45 <krealloc>:

//	A call with virtual_address = null is equivalent to kmalloc().
//	A call with new_size = zero is equivalent to kfree().

void *krealloc(void *virtual_address, uint32 new_size)
{
f0107b45:	55                   	push   %ebp
f0107b46:	89 e5                	mov    %esp,%ebp
f0107b48:	83 ec 08             	sub    $0x8,%esp
	//TODO: [PROJECT MS2 - BONUS] [KERNEL HEAP] krealloc
	// Write your code here, remove the panic and write your code
	panic("krealloc() is not implemented yet...!!");
f0107b4b:	83 ec 04             	sub    $0x4,%esp
f0107b4e:	68 6c 62 13 f0       	push   $0xf013626c
f0107b53:	68 ab 00 00 00       	push   $0xab
f0107b58:	68 25 62 13 f0       	push   $0xf0136225
f0107b5d:	e8 a3 86 ff ff       	call   f0100205 <_panic>

f0107b62 <to_frame_number>:
struct FrameInfo *get_frame_info(uint32 *ptr_page_directory, uint32 virtual_address, uint32 **ptr_page_table);
void decrement_references(struct FrameInfo* ptr_frame_info);
void initialize_frame_info(struct FrameInfo *ptr_frame_info);

static inline uint32 to_frame_number(struct FrameInfo *ptr_frame_info)
{
f0107b62:	55                   	push   %ebp
f0107b63:	89 e5                	mov    %esp,%ebp
	return ptr_frame_info - frames_info;
f0107b65:	8b 45 08             	mov    0x8(%ebp),%eax
f0107b68:	8b 15 14 26 78 f0    	mov    0xf0782614,%edx
f0107b6e:	29 d0                	sub    %edx,%eax
f0107b70:	c1 f8 03             	sar    $0x3,%eax
f0107b73:	89 c2                	mov    %eax,%edx
f0107b75:	89 d0                	mov    %edx,%eax
f0107b77:	c1 e0 02             	shl    $0x2,%eax
f0107b7a:	01 d0                	add    %edx,%eax
f0107b7c:	c1 e0 02             	shl    $0x2,%eax
f0107b7f:	01 d0                	add    %edx,%eax
f0107b81:	c1 e0 02             	shl    $0x2,%eax
f0107b84:	01 d0                	add    %edx,%eax
f0107b86:	89 c1                	mov    %eax,%ecx
f0107b88:	c1 e1 08             	shl    $0x8,%ecx
f0107b8b:	01 c8                	add    %ecx,%eax
f0107b8d:	89 c1                	mov    %eax,%ecx
f0107b8f:	c1 e1 10             	shl    $0x10,%ecx
f0107b92:	01 c8                	add    %ecx,%eax
f0107b94:	01 c0                	add    %eax,%eax
f0107b96:	01 d0                	add    %edx,%eax
}
f0107b98:	5d                   	pop    %ebp
f0107b99:	c3                   	ret    

f0107b9a <to_physical_address>:

static inline uint32 to_physical_address(struct FrameInfo *ptr_frame_info)
{
f0107b9a:	55                   	push   %ebp
f0107b9b:	89 e5                	mov    %esp,%ebp
	return to_frame_number(ptr_frame_info) << PGSHIFT;
f0107b9d:	ff 75 08             	pushl  0x8(%ebp)
f0107ba0:	e8 bd ff ff ff       	call   f0107b62 <to_frame_number>
f0107ba5:	83 c4 04             	add    $0x4,%esp
f0107ba8:	c1 e0 0c             	shl    $0xc,%eax
}
f0107bab:	c9                   	leave  
f0107bac:	c3                   	ret    

f0107bad <pt_set_page_permissions>:
 */
#include "memory_manager.h"

/*[2.1] PAGE TABLE ENTRIES MANIPULATION */
inline void pt_set_page_permissions(uint32* page_directory, uint32 virtual_address, uint32 permissions_to_set, uint32 permissions_to_clear)
{
f0107bad:	55                   	push   %ebp
f0107bae:	89 e5                	mov    %esp,%ebp
f0107bb0:	83 ec 18             	sub    $0x18,%esp
	//TODO: [PROJECT MS2] [PAGING HELPERS] pt_set_page_permissions
	// Write your code here, remove the panic and write your code
	uint32* page_table_point=NULL;
f0107bb3:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	get_page_table(page_directory,virtual_address,&page_table_point);
f0107bba:	83 ec 04             	sub    $0x4,%esp
f0107bbd:	8d 45 f4             	lea    -0xc(%ebp),%eax
f0107bc0:	50                   	push   %eax
f0107bc1:	ff 75 0c             	pushl  0xc(%ebp)
f0107bc4:	ff 75 08             	pushl  0x8(%ebp)
f0107bc7:	e8 e5 ee ff ff       	call   f0106ab1 <get_page_table>
f0107bcc:	83 c4 10             	add    $0x10,%esp

	if (page_table_point!=NULL)
f0107bcf:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0107bd2:	85 c0                	test   %eax,%eax
f0107bd4:	74 75                	je     f0107c4b <pt_set_page_permissions+0x9e>
	{
		page_table_point[PTX(virtual_address)] &= ~(permissions_to_clear);
f0107bd6:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0107bd9:	8b 55 0c             	mov    0xc(%ebp),%edx
f0107bdc:	c1 ea 0c             	shr    $0xc,%edx
f0107bdf:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0107be5:	c1 e2 02             	shl    $0x2,%edx
f0107be8:	01 d0                	add    %edx,%eax
f0107bea:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0107bed:	8b 4d 0c             	mov    0xc(%ebp),%ecx
f0107bf0:	c1 e9 0c             	shr    $0xc,%ecx
f0107bf3:	81 e1 ff 03 00 00    	and    $0x3ff,%ecx
f0107bf9:	c1 e1 02             	shl    $0x2,%ecx
f0107bfc:	01 ca                	add    %ecx,%edx
f0107bfe:	8b 12                	mov    (%edx),%edx
f0107c00:	8b 4d 14             	mov    0x14(%ebp),%ecx
f0107c03:	f7 d1                	not    %ecx
f0107c05:	21 ca                	and    %ecx,%edx
f0107c07:	89 10                	mov    %edx,(%eax)
		page_table_point[PTX(virtual_address)] |= permissions_to_set;
f0107c09:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0107c0c:	8b 55 0c             	mov    0xc(%ebp),%edx
f0107c0f:	c1 ea 0c             	shr    $0xc,%edx
f0107c12:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0107c18:	c1 e2 02             	shl    $0x2,%edx
f0107c1b:	01 c2                	add    %eax,%edx
f0107c1d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0107c20:	8b 4d 0c             	mov    0xc(%ebp),%ecx
f0107c23:	c1 e9 0c             	shr    $0xc,%ecx
f0107c26:	81 e1 ff 03 00 00    	and    $0x3ff,%ecx
f0107c2c:	c1 e1 02             	shl    $0x2,%ecx
f0107c2f:	01 c8                	add    %ecx,%eax
f0107c31:	8b 00                	mov    (%eax),%eax
f0107c33:	0b 45 10             	or     0x10(%ebp),%eax
f0107c36:	89 02                	mov    %eax,(%edx)
		tlb_invalidate((void *)NULL, (void *)virtual_address);
f0107c38:	8b 45 0c             	mov    0xc(%ebp),%eax
f0107c3b:	83 ec 08             	sub    $0x8,%esp
f0107c3e:	50                   	push   %eax
f0107c3f:	6a 00                	push   $0x0
f0107c41:	e8 c8 e8 ff ff       	call   f010650e <tlb_invalidate>
f0107c46:	83 c4 10             	add    $0x10,%esp
	}
	else
	{
		panic("Page Table doesn't exist...!");
	}
}
f0107c49:	eb 14                	jmp    f0107c5f <pt_set_page_permissions+0xb2>
		page_table_point[PTX(virtual_address)] |= permissions_to_set;
		tlb_invalidate((void *)NULL, (void *)virtual_address);
	}
	else
	{
		panic("Page Table doesn't exist...!");
f0107c4b:	83 ec 04             	sub    $0x4,%esp
f0107c4e:	68 93 62 13 f0       	push   $0xf0136293
f0107c53:	6a 19                	push   $0x19
f0107c55:	68 b0 62 13 f0       	push   $0xf01362b0
f0107c5a:	e8 a6 85 ff ff       	call   f0100205 <_panic>
	}
}
f0107c5f:	c9                   	leave  
f0107c60:	c3                   	ret    

f0107c61 <pt_get_page_permissions>:

inline int pt_get_page_permissions(uint32* page_directory, uint32 virtual_address )
{
f0107c61:	55                   	push   %ebp
f0107c62:	89 e5                	mov    %esp,%ebp
f0107c64:	83 ec 18             	sub    $0x18,%esp
	//TODO: [PROJECT MS2] [PAGING HELPERS] pt_get_page_permissions
	// Write your code here, remove the panic and write your code

	uint32* page_table_point=NULL;
f0107c67:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
	uint32 entry_of_page_table;
	uint32 Permissions_of_entry;
	get_page_table(page_directory,virtual_address,&page_table_point);
f0107c6e:	83 ec 04             	sub    $0x4,%esp
f0107c71:	8d 45 ec             	lea    -0x14(%ebp),%eax
f0107c74:	50                   	push   %eax
f0107c75:	ff 75 0c             	pushl  0xc(%ebp)
f0107c78:	ff 75 08             	pushl  0x8(%ebp)
f0107c7b:	e8 31 ee ff ff       	call   f0106ab1 <get_page_table>
f0107c80:	83 c4 10             	add    $0x10,%esp
	if(page_table_point!=NULL)
f0107c83:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0107c86:	85 c0                	test   %eax,%eax
f0107c88:	74 2b                	je     f0107cb5 <pt_get_page_permissions+0x54>
	{
		entry_of_page_table=page_table_point[PTX(virtual_address)];
f0107c8a:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0107c8d:	8b 55 0c             	mov    0xc(%ebp),%edx
f0107c90:	c1 ea 0c             	shr    $0xc,%edx
f0107c93:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0107c99:	c1 e2 02             	shl    $0x2,%edx
f0107c9c:	01 d0                	add    %edx,%eax
f0107c9e:	8b 00                	mov    (%eax),%eax
f0107ca0:	89 45 f4             	mov    %eax,-0xc(%ebp)
		Permissions_of_entry=entry_of_page_table&=0x00000FFF;
f0107ca3:	81 65 f4 ff 0f 00 00 	andl   $0xfff,-0xc(%ebp)
f0107caa:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0107cad:	89 45 f0             	mov    %eax,-0x10(%ebp)


		return Permissions_of_entry;
f0107cb0:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0107cb3:	eb 05                	jmp    f0107cba <pt_get_page_permissions+0x59>
	}

	else
	{
		return -1;
f0107cb5:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
	}
}
f0107cba:	c9                   	leave  
f0107cbb:	c3                   	ret    

f0107cbc <pt_clear_page_table_entry>:

inline void pt_clear_page_table_entry(uint32* page_directory, uint32 virtual_address)
{
f0107cbc:	55                   	push   %ebp
f0107cbd:	89 e5                	mov    %esp,%ebp
f0107cbf:	83 ec 18             	sub    $0x18,%esp
	//TODO: [PROJECT MS2] [PAGING HELPERS] pt_clear_page_table_entry
	// Write your code here, remove the panic and write your code
	uint32* page_table_point=NULL;
f0107cc2:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	get_page_table(page_directory,virtual_address,&page_table_point);
f0107cc9:	83 ec 04             	sub    $0x4,%esp
f0107ccc:	8d 45 f4             	lea    -0xc(%ebp),%eax
f0107ccf:	50                   	push   %eax
f0107cd0:	ff 75 0c             	pushl  0xc(%ebp)
f0107cd3:	ff 75 08             	pushl  0x8(%ebp)
f0107cd6:	e8 d6 ed ff ff       	call   f0106ab1 <get_page_table>
f0107cdb:	83 c4 10             	add    $0x10,%esp
	if (page_table_point!=NULL)
f0107cde:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0107ce1:	85 c0                	test   %eax,%eax
f0107ce3:	74 2d                	je     f0107d12 <pt_clear_page_table_entry+0x56>
	{
		page_table_point[PTX(virtual_address)] = 0;
f0107ce5:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0107ce8:	8b 55 0c             	mov    0xc(%ebp),%edx
f0107ceb:	c1 ea 0c             	shr    $0xc,%edx
f0107cee:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0107cf4:	c1 e2 02             	shl    $0x2,%edx
f0107cf7:	01 d0                	add    %edx,%eax
f0107cf9:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
		tlb_invalidate((void *)NULL, (void *)virtual_address);
f0107cff:	8b 45 0c             	mov    0xc(%ebp),%eax
f0107d02:	83 ec 08             	sub    $0x8,%esp
f0107d05:	50                   	push   %eax
f0107d06:	6a 00                	push   $0x0
f0107d08:	e8 01 e8 ff ff       	call   f010650e <tlb_invalidate>
f0107d0d:	83 c4 10             	add    $0x10,%esp
	}
	else
	{
		panic("Page Table doesn't exist...!");
	}
}
f0107d10:	eb 14                	jmp    f0107d26 <pt_clear_page_table_entry+0x6a>
		page_table_point[PTX(virtual_address)] = 0;
		tlb_invalidate((void *)NULL, (void *)virtual_address);
	}
	else
	{
		panic("Page Table doesn't exist...!");
f0107d12:	83 ec 04             	sub    $0x4,%esp
f0107d15:	68 93 62 13 f0       	push   $0xf0136293
f0107d1a:	6a 42                	push   $0x42
f0107d1c:	68 b0 62 13 f0       	push   $0xf01362b0
f0107d21:	e8 df 84 ff ff       	call   f0100205 <_panic>
	}
}
f0107d26:	c9                   	leave  
f0107d27:	c3                   	ret    

f0107d28 <virtual_to_physical>:

/***********************************************************************************************/

/*[2.2] ADDRESS CONVERTION*/
inline int virtual_to_physical(uint32* page_directory, uint32 virtual_address)
{
f0107d28:	55                   	push   %ebp
f0107d29:	89 e5                	mov    %esp,%ebp
f0107d2b:	83 ec 18             	sub    $0x18,%esp
	//TODO: [PROJECT MS2] [PAGING HELPERS] virtual_to_physical
	// Write your code here, remove the panic and write your code
	uint32* page_table_point=NULL;
f0107d2e:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	get_page_table(page_directory,virtual_address,&page_table_point);
f0107d35:	83 ec 04             	sub    $0x4,%esp
f0107d38:	8d 45 f0             	lea    -0x10(%ebp),%eax
f0107d3b:	50                   	push   %eax
f0107d3c:	ff 75 0c             	pushl  0xc(%ebp)
f0107d3f:	ff 75 08             	pushl  0x8(%ebp)
f0107d42:	e8 6a ed ff ff       	call   f0106ab1 <get_page_table>
f0107d47:	83 c4 10             	add    $0x10,%esp

	if(page_table_point != NULL)
f0107d4a:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0107d4d:	85 c0                	test   %eax,%eax
f0107d4f:	74 28                	je     f0107d79 <virtual_to_physical+0x51>
	{
		struct FrameInfo * frame_info = get_frame_info(page_directory,virtual_address,&page_table_point);
f0107d51:	83 ec 04             	sub    $0x4,%esp
f0107d54:	8d 45 f0             	lea    -0x10(%ebp),%eax
f0107d57:	50                   	push   %eax
f0107d58:	ff 75 0c             	pushl  0xc(%ebp)
f0107d5b:	ff 75 08             	pushl  0x8(%ebp)
f0107d5e:	e8 a3 f0 ff ff       	call   f0106e06 <get_frame_info>
f0107d63:	83 c4 10             	add    $0x10,%esp
f0107d66:	89 45 f4             	mov    %eax,-0xc(%ebp)
		return to_physical_address(frame_info);
f0107d69:	83 ec 0c             	sub    $0xc,%esp
f0107d6c:	ff 75 f4             	pushl  -0xc(%ebp)
f0107d6f:	e8 26 fe ff ff       	call   f0107b9a <to_physical_address>
f0107d74:	83 c4 10             	add    $0x10,%esp
f0107d77:	eb 05                	jmp    f0107d7e <virtual_to_physical+0x56>
	}
	return -1;
f0107d79:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
f0107d7e:	c9                   	leave  
f0107d7f:	c3                   	ret    

f0107d80 <pd_is_table_used>:

///============================================================================================
/// Dealing with page directory entry flags

inline uint32 pd_is_table_used(uint32* page_directory, uint32 virtual_address)
{
f0107d80:	55                   	push   %ebp
f0107d81:	89 e5                	mov    %esp,%ebp
	return ( (page_directory[PDX(virtual_address)] & PERM_USED) == PERM_USED ? 1 : 0);
f0107d83:	8b 45 0c             	mov    0xc(%ebp),%eax
f0107d86:	c1 e8 16             	shr    $0x16,%eax
f0107d89:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0107d90:	8b 45 08             	mov    0x8(%ebp),%eax
f0107d93:	01 d0                	add    %edx,%eax
f0107d95:	8b 00                	mov    (%eax),%eax
f0107d97:	83 e0 20             	and    $0x20,%eax
f0107d9a:	85 c0                	test   %eax,%eax
f0107d9c:	0f 95 c0             	setne  %al
f0107d9f:	0f b6 c0             	movzbl %al,%eax
}
f0107da2:	5d                   	pop    %ebp
f0107da3:	c3                   	ret    

f0107da4 <pd_set_table_unused>:

inline void pd_set_table_unused(uint32* page_directory, uint32 virtual_address)
{
f0107da4:	55                   	push   %ebp
f0107da5:	89 e5                	mov    %esp,%ebp
f0107da7:	83 ec 08             	sub    $0x8,%esp
	page_directory[PDX(virtual_address)] &= (~PERM_USED);
f0107daa:	8b 45 0c             	mov    0xc(%ebp),%eax
f0107dad:	c1 e8 16             	shr    $0x16,%eax
f0107db0:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0107db7:	8b 45 08             	mov    0x8(%ebp),%eax
f0107dba:	01 d0                	add    %edx,%eax
f0107dbc:	8b 55 0c             	mov    0xc(%ebp),%edx
f0107dbf:	c1 ea 16             	shr    $0x16,%edx
f0107dc2:	8d 0c 95 00 00 00 00 	lea    0x0(,%edx,4),%ecx
f0107dc9:	8b 55 08             	mov    0x8(%ebp),%edx
f0107dcc:	01 ca                	add    %ecx,%edx
f0107dce:	8b 12                	mov    (%edx),%edx
f0107dd0:	83 e2 df             	and    $0xffffffdf,%edx
f0107dd3:	89 10                	mov    %edx,(%eax)
	tlb_invalidate((void *)NULL, (void *)virtual_address);
f0107dd5:	8b 45 0c             	mov    0xc(%ebp),%eax
f0107dd8:	83 ec 08             	sub    $0x8,%esp
f0107ddb:	50                   	push   %eax
f0107ddc:	6a 00                	push   $0x0
f0107dde:	e8 2b e7 ff ff       	call   f010650e <tlb_invalidate>
f0107de3:	83 c4 10             	add    $0x10,%esp
}
f0107de6:	90                   	nop
f0107de7:	c9                   	leave  
f0107de8:	c3                   	ret    

f0107de9 <pd_clear_page_dir_entry>:

inline void pd_clear_page_dir_entry(uint32* page_directory, uint32 virtual_address)
{
f0107de9:	55                   	push   %ebp
f0107dea:	89 e5                	mov    %esp,%ebp
f0107dec:	83 ec 10             	sub    $0x10,%esp
	page_directory[PDX(virtual_address)] = 0 ;
f0107def:	8b 45 0c             	mov    0xc(%ebp),%eax
f0107df2:	c1 e8 16             	shr    $0x16,%eax
f0107df5:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0107dfc:	8b 45 08             	mov    0x8(%ebp),%eax
f0107dff:	01 d0                	add    %edx,%eax
f0107e01:	c7 00 00 00 00 00    	movl   $0x0,(%eax)

static __inline void
tlbflush(void)
{
	uint32 cr3;
	__asm __volatile("movl %%cr3,%0" : "=r" (cr3));
f0107e07:	0f 20 d8             	mov    %cr3,%eax
f0107e0a:	89 45 fc             	mov    %eax,-0x4(%ebp)
	__asm __volatile("movl %0,%%cr3" : : "r" (cr3));
f0107e0d:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0107e10:	0f 22 d8             	mov    %eax,%cr3
	tlbflush();
}
f0107e13:	90                   	nop
f0107e14:	c9                   	leave  
f0107e15:	c3                   	ret    

f0107e16 <env_page_ws_get_size>:

///============================================================================================
/// Dealing with environment working set

inline uint32 env_page_ws_get_size(struct Env *e)
{
f0107e16:	55                   	push   %ebp
f0107e17:	89 e5                	mov    %esp,%ebp
f0107e19:	83 ec 10             	sub    $0x10,%esp
	int i=0, counter=0;
f0107e1c:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
f0107e23:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
	for(;i<e->page_WS_max_size; i++) if(e->ptr_pageWorkingSet[i].empty == 0) counter++;
f0107e2a:	eb 21                	jmp    f0107e4d <env_page_ws_get_size+0x37>
f0107e2c:	8b 45 08             	mov    0x8(%ebp),%eax
f0107e2f:	8b 48 78             	mov    0x78(%eax),%ecx
f0107e32:	8b 55 fc             	mov    -0x4(%ebp),%edx
f0107e35:	89 d0                	mov    %edx,%eax
f0107e37:	01 c0                	add    %eax,%eax
f0107e39:	01 d0                	add    %edx,%eax
f0107e3b:	c1 e0 03             	shl    $0x3,%eax
f0107e3e:	01 c8                	add    %ecx,%eax
f0107e40:	8a 40 04             	mov    0x4(%eax),%al
f0107e43:	84 c0                	test   %al,%al
f0107e45:	75 03                	jne    f0107e4a <env_page_ws_get_size+0x34>
f0107e47:	ff 45 f8             	incl   -0x8(%ebp)
f0107e4a:	ff 45 fc             	incl   -0x4(%ebp)
f0107e4d:	8b 45 08             	mov    0x8(%ebp),%eax
f0107e50:	8b 50 74             	mov    0x74(%eax),%edx
f0107e53:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0107e56:	39 c2                	cmp    %eax,%edx
f0107e58:	77 d2                	ja     f0107e2c <env_page_ws_get_size+0x16>
	return counter;
f0107e5a:	8b 45 f8             	mov    -0x8(%ebp),%eax
}
f0107e5d:	c9                   	leave  
f0107e5e:	c3                   	ret    

f0107e5f <env_page_ws_invalidate>:

inline void env_page_ws_invalidate(struct Env* e, uint32 virtual_address)
{
f0107e5f:	55                   	push   %ebp
f0107e60:	89 e5                	mov    %esp,%ebp
f0107e62:	83 ec 18             	sub    $0x18,%esp
	int i=0;
f0107e65:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	for(;i<e->page_WS_max_size; i++)
f0107e6c:	eb 4c                	jmp    f0107eba <env_page_ws_invalidate+0x5b>
	{
		if(ROUNDDOWN(e->ptr_pageWorkingSet[i].virtual_address,PAGE_SIZE) == ROUNDDOWN(virtual_address,PAGE_SIZE))
f0107e6e:	8b 45 08             	mov    0x8(%ebp),%eax
f0107e71:	8b 48 78             	mov    0x78(%eax),%ecx
f0107e74:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0107e77:	89 d0                	mov    %edx,%eax
f0107e79:	01 c0                	add    %eax,%eax
f0107e7b:	01 d0                	add    %edx,%eax
f0107e7d:	c1 e0 03             	shl    $0x3,%eax
f0107e80:	01 c8                	add    %ecx,%eax
f0107e82:	8b 00                	mov    (%eax),%eax
f0107e84:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0107e87:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0107e8a:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0107e8f:	89 c2                	mov    %eax,%edx
f0107e91:	8b 45 0c             	mov    0xc(%ebp),%eax
f0107e94:	89 45 ec             	mov    %eax,-0x14(%ebp)
f0107e97:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0107e9a:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0107e9f:	39 c2                	cmp    %eax,%edx
f0107ea1:	75 14                	jne    f0107eb7 <env_page_ws_invalidate+0x58>
		{
			env_page_ws_clear_entry(e, i);
f0107ea3:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0107ea6:	83 ec 08             	sub    $0x8,%esp
f0107ea9:	50                   	push   %eax
f0107eaa:	ff 75 08             	pushl  0x8(%ebp)
f0107ead:	e8 b9 00 00 00       	call   f0107f6b <env_page_ws_clear_entry>
f0107eb2:	83 c4 10             	add    $0x10,%esp
			break;
f0107eb5:	eb 10                	jmp    f0107ec7 <env_page_ws_invalidate+0x68>
}

inline void env_page_ws_invalidate(struct Env* e, uint32 virtual_address)
{
	int i=0;
	for(;i<e->page_WS_max_size; i++)
f0107eb7:	ff 45 f4             	incl   -0xc(%ebp)
f0107eba:	8b 45 08             	mov    0x8(%ebp),%eax
f0107ebd:	8b 50 74             	mov    0x74(%eax),%edx
f0107ec0:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0107ec3:	39 c2                	cmp    %eax,%edx
f0107ec5:	77 a7                	ja     f0107e6e <env_page_ws_invalidate+0xf>
		{
			env_page_ws_clear_entry(e, i);
			break;
		}
	}
}
f0107ec7:	90                   	nop
f0107ec8:	c9                   	leave  
f0107ec9:	c3                   	ret    

f0107eca <env_page_ws_set_entry>:

inline void env_page_ws_set_entry(struct Env* e, uint32 entry_index, uint32 virtual_address)
{
f0107eca:	55                   	push   %ebp
f0107ecb:	89 e5                	mov    %esp,%ebp
f0107ecd:	83 ec 18             	sub    $0x18,%esp
	assert(entry_index >= 0 && entry_index < e->page_WS_max_size);
f0107ed0:	8b 45 08             	mov    0x8(%ebp),%eax
f0107ed3:	8b 40 74             	mov    0x74(%eax),%eax
f0107ed6:	3b 45 0c             	cmp    0xc(%ebp),%eax
f0107ed9:	77 16                	ja     f0107ef1 <env_page_ws_set_entry+0x27>
f0107edb:	68 cc 62 13 f0       	push   $0xf01362cc
f0107ee0:	68 02 63 13 f0       	push   $0xf0136302
f0107ee5:	6a 26                	push   $0x26
f0107ee7:	68 18 63 13 f0       	push   $0xf0136318
f0107eec:	e8 14 83 ff ff       	call   f0100205 <_panic>
	assert(virtual_address >= 0 && virtual_address < USER_TOP);
f0107ef1:	81 7d 10 ff ff bf ee 	cmpl   $0xeebfffff,0x10(%ebp)
f0107ef8:	76 16                	jbe    f0107f10 <env_page_ws_set_entry+0x46>
f0107efa:	68 38 63 13 f0       	push   $0xf0136338
f0107eff:	68 02 63 13 f0       	push   $0xf0136302
f0107f04:	6a 27                	push   $0x27
f0107f06:	68 18 63 13 f0       	push   $0xf0136318
f0107f0b:	e8 f5 82 ff ff       	call   f0100205 <_panic>
	e->ptr_pageWorkingSet[entry_index].virtual_address = ROUNDDOWN(virtual_address,PAGE_SIZE);
f0107f10:	8b 45 08             	mov    0x8(%ebp),%eax
f0107f13:	8b 48 78             	mov    0x78(%eax),%ecx
f0107f16:	8b 55 0c             	mov    0xc(%ebp),%edx
f0107f19:	89 d0                	mov    %edx,%eax
f0107f1b:	01 c0                	add    %eax,%eax
f0107f1d:	01 d0                	add    %edx,%eax
f0107f1f:	c1 e0 03             	shl    $0x3,%eax
f0107f22:	8d 14 01             	lea    (%ecx,%eax,1),%edx
f0107f25:	8b 45 10             	mov    0x10(%ebp),%eax
f0107f28:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0107f2b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0107f2e:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0107f33:	89 02                	mov    %eax,(%edx)
	e->ptr_pageWorkingSet[entry_index].empty = 0;
f0107f35:	8b 45 08             	mov    0x8(%ebp),%eax
f0107f38:	8b 48 78             	mov    0x78(%eax),%ecx
f0107f3b:	8b 55 0c             	mov    0xc(%ebp),%edx
f0107f3e:	89 d0                	mov    %edx,%eax
f0107f40:	01 c0                	add    %eax,%eax
f0107f42:	01 d0                	add    %edx,%eax
f0107f44:	c1 e0 03             	shl    $0x3,%eax
f0107f47:	01 c8                	add    %ecx,%eax
f0107f49:	c6 40 04 00          	movb   $0x0,0x4(%eax)

	e->ptr_pageWorkingSet[entry_index].time_stamp = 0x80000000;
f0107f4d:	8b 45 08             	mov    0x8(%ebp),%eax
f0107f50:	8b 48 78             	mov    0x78(%eax),%ecx
f0107f53:	8b 55 0c             	mov    0xc(%ebp),%edx
f0107f56:	89 d0                	mov    %edx,%eax
f0107f58:	01 c0                	add    %eax,%eax
f0107f5a:	01 d0                	add    %edx,%eax
f0107f5c:	c1 e0 03             	shl    $0x3,%eax
f0107f5f:	01 c8                	add    %ecx,%eax
f0107f61:	c7 40 08 00 00 00 80 	movl   $0x80000000,0x8(%eax)
	//e->ptr_pageWorkingSet[entry_index].time_stamp = time;
	return;
f0107f68:	90                   	nop
}
f0107f69:	c9                   	leave  
f0107f6a:	c3                   	ret    

f0107f6b <env_page_ws_clear_entry>:

inline void env_page_ws_clear_entry(struct Env* e, uint32 entry_index)
{
f0107f6b:	55                   	push   %ebp
f0107f6c:	89 e5                	mov    %esp,%ebp
f0107f6e:	83 ec 08             	sub    $0x8,%esp
	assert(entry_index >= 0 && entry_index < (e->page_WS_max_size));
f0107f71:	8b 45 08             	mov    0x8(%ebp),%eax
f0107f74:	8b 40 74             	mov    0x74(%eax),%eax
f0107f77:	3b 45 0c             	cmp    0xc(%ebp),%eax
f0107f7a:	77 16                	ja     f0107f92 <env_page_ws_clear_entry+0x27>
f0107f7c:	68 6c 63 13 f0       	push   $0xf013636c
f0107f81:	68 02 63 13 f0       	push   $0xf0136302
f0107f86:	6a 32                	push   $0x32
f0107f88:	68 18 63 13 f0       	push   $0xf0136318
f0107f8d:	e8 73 82 ff ff       	call   f0100205 <_panic>
	e->ptr_pageWorkingSet[entry_index].virtual_address = 0;
f0107f92:	8b 45 08             	mov    0x8(%ebp),%eax
f0107f95:	8b 48 78             	mov    0x78(%eax),%ecx
f0107f98:	8b 55 0c             	mov    0xc(%ebp),%edx
f0107f9b:	89 d0                	mov    %edx,%eax
f0107f9d:	01 c0                	add    %eax,%eax
f0107f9f:	01 d0                	add    %edx,%eax
f0107fa1:	c1 e0 03             	shl    $0x3,%eax
f0107fa4:	01 c8                	add    %ecx,%eax
f0107fa6:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	e->ptr_pageWorkingSet[entry_index].empty = 1;
f0107fac:	8b 45 08             	mov    0x8(%ebp),%eax
f0107faf:	8b 48 78             	mov    0x78(%eax),%ecx
f0107fb2:	8b 55 0c             	mov    0xc(%ebp),%edx
f0107fb5:	89 d0                	mov    %edx,%eax
f0107fb7:	01 c0                	add    %eax,%eax
f0107fb9:	01 d0                	add    %edx,%eax
f0107fbb:	c1 e0 03             	shl    $0x3,%eax
f0107fbe:	01 c8                	add    %ecx,%eax
f0107fc0:	c6 40 04 01          	movb   $0x1,0x4(%eax)
	e->ptr_pageWorkingSet[entry_index].time_stamp = 0;
f0107fc4:	8b 45 08             	mov    0x8(%ebp),%eax
f0107fc7:	8b 48 78             	mov    0x78(%eax),%ecx
f0107fca:	8b 55 0c             	mov    0xc(%ebp),%edx
f0107fcd:	89 d0                	mov    %edx,%eax
f0107fcf:	01 c0                	add    %eax,%eax
f0107fd1:	01 d0                	add    %edx,%eax
f0107fd3:	c1 e0 03             	shl    $0x3,%eax
f0107fd6:	01 c8                	add    %ecx,%eax
f0107fd8:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
}
f0107fdf:	90                   	nop
f0107fe0:	c9                   	leave  
f0107fe1:	c3                   	ret    

f0107fe2 <env_page_ws_get_virtual_address>:

inline uint32 env_page_ws_get_virtual_address(struct Env* e, uint32 entry_index)
{
f0107fe2:	55                   	push   %ebp
f0107fe3:	89 e5                	mov    %esp,%ebp
f0107fe5:	83 ec 18             	sub    $0x18,%esp
	assert(entry_index >= 0 && entry_index < (e->page_WS_max_size));
f0107fe8:	8b 45 08             	mov    0x8(%ebp),%eax
f0107feb:	8b 40 74             	mov    0x74(%eax),%eax
f0107fee:	3b 45 0c             	cmp    0xc(%ebp),%eax
f0107ff1:	77 16                	ja     f0108009 <env_page_ws_get_virtual_address+0x27>
f0107ff3:	68 6c 63 13 f0       	push   $0xf013636c
f0107ff8:	68 02 63 13 f0       	push   $0xf0136302
f0107ffd:	6a 3a                	push   $0x3a
f0107fff:	68 18 63 13 f0       	push   $0xf0136318
f0108004:	e8 fc 81 ff ff       	call   f0100205 <_panic>
	return ROUNDDOWN(e->ptr_pageWorkingSet[entry_index].virtual_address,PAGE_SIZE);
f0108009:	8b 45 08             	mov    0x8(%ebp),%eax
f010800c:	8b 48 78             	mov    0x78(%eax),%ecx
f010800f:	8b 55 0c             	mov    0xc(%ebp),%edx
f0108012:	89 d0                	mov    %edx,%eax
f0108014:	01 c0                	add    %eax,%eax
f0108016:	01 d0                	add    %edx,%eax
f0108018:	c1 e0 03             	shl    $0x3,%eax
f010801b:	01 c8                	add    %ecx,%eax
f010801d:	8b 00                	mov    (%eax),%eax
f010801f:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0108022:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0108025:	25 00 f0 ff ff       	and    $0xfffff000,%eax
}
f010802a:	c9                   	leave  
f010802b:	c3                   	ret    

f010802c <env_page_ws_get_time_stamp>:

inline uint32 env_page_ws_get_time_stamp(struct Env* e, uint32 entry_index)
{
f010802c:	55                   	push   %ebp
f010802d:	89 e5                	mov    %esp,%ebp
f010802f:	83 ec 08             	sub    $0x8,%esp
	assert(entry_index >= 0 && entry_index < (e->page_WS_max_size));
f0108032:	8b 45 08             	mov    0x8(%ebp),%eax
f0108035:	8b 40 74             	mov    0x74(%eax),%eax
f0108038:	3b 45 0c             	cmp    0xc(%ebp),%eax
f010803b:	77 16                	ja     f0108053 <env_page_ws_get_time_stamp+0x27>
f010803d:	68 6c 63 13 f0       	push   $0xf013636c
f0108042:	68 02 63 13 f0       	push   $0xf0136302
f0108047:	6a 40                	push   $0x40
f0108049:	68 18 63 13 f0       	push   $0xf0136318
f010804e:	e8 b2 81 ff ff       	call   f0100205 <_panic>
	return e->ptr_pageWorkingSet[entry_index].time_stamp;
f0108053:	8b 45 08             	mov    0x8(%ebp),%eax
f0108056:	8b 48 78             	mov    0x78(%eax),%ecx
f0108059:	8b 55 0c             	mov    0xc(%ebp),%edx
f010805c:	89 d0                	mov    %edx,%eax
f010805e:	01 c0                	add    %eax,%eax
f0108060:	01 d0                	add    %edx,%eax
f0108062:	c1 e0 03             	shl    $0x3,%eax
f0108065:	01 c8                	add    %ecx,%eax
f0108067:	8b 40 08             	mov    0x8(%eax),%eax
}
f010806a:	c9                   	leave  
f010806b:	c3                   	ret    

f010806c <env_page_ws_is_entry_empty>:

inline uint32 env_page_ws_is_entry_empty(struct Env* e, uint32 entry_index)
{
f010806c:	55                   	push   %ebp
f010806d:	89 e5                	mov    %esp,%ebp
	return e->ptr_pageWorkingSet[entry_index].empty;
f010806f:	8b 45 08             	mov    0x8(%ebp),%eax
f0108072:	8b 48 78             	mov    0x78(%eax),%ecx
f0108075:	8b 55 0c             	mov    0xc(%ebp),%edx
f0108078:	89 d0                	mov    %edx,%eax
f010807a:	01 c0                	add    %eax,%eax
f010807c:	01 d0                	add    %edx,%eax
f010807e:	c1 e0 03             	shl    $0x3,%eax
f0108081:	01 c8                	add    %ecx,%eax
f0108083:	8a 40 04             	mov    0x4(%eax),%al
f0108086:	0f b6 c0             	movzbl %al,%eax
}
f0108089:	5d                   	pop    %ebp
f010808a:	c3                   	ret    

f010808b <env_page_ws_print>:

void env_page_ws_print(struct Env *e)
{
f010808b:	55                   	push   %ebp
f010808c:	89 e5                	mov    %esp,%ebp
f010808e:	53                   	push   %ebx
f010808f:	83 ec 24             	sub    $0x24,%esp
	if (isPageReplacmentAlgorithmLRU(PG_REP_LRU_LISTS_APPROX))
f0108092:	83 ec 0c             	sub    $0xc,%esp
f0108095:	6a 02                	push   $0x2
f0108097:	e8 a7 5c 00 00       	call   f010dd43 <isPageReplacmentAlgorithmLRU>
f010809c:	83 c4 10             	add    $0x10,%esp
f010809f:	85 c0                	test   %eax,%eax
f01080a1:	0f 84 fe 00 00 00    	je     f01081a5 <env_page_ws_print+0x11a>
	{
		int i = 0;
f01080a7:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
		cprintf("ActiveList:\n============\n") ;
f01080ae:	83 ec 0c             	sub    $0xc,%esp
f01080b1:	68 a4 63 13 f0       	push   $0xf01363a4
f01080b6:	e8 53 8c ff ff       	call   f0100d0e <cprintf>
f01080bb:	83 c4 10             	add    $0x10,%esp
		struct WorkingSetElement * ptr_WS_element ;
		LIST_FOREACH(ptr_WS_element, &(e->ActiveList))
f01080be:	8b 45 08             	mov    0x8(%ebp),%eax
f01080c1:	8b 80 c8 05 00 00    	mov    0x5c8(%eax),%eax
f01080c7:	89 45 f0             	mov    %eax,-0x10(%ebp)
f01080ca:	eb 2c                	jmp    f01080f8 <env_page_ws_print+0x6d>
		{
			cprintf("%d:	%x\n", i++, ptr_WS_element->virtual_address);
f01080cc:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01080cf:	8b 10                	mov    (%eax),%edx
f01080d1:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01080d4:	8d 48 01             	lea    0x1(%eax),%ecx
f01080d7:	89 4d f4             	mov    %ecx,-0xc(%ebp)
f01080da:	83 ec 04             	sub    $0x4,%esp
f01080dd:	52                   	push   %edx
f01080de:	50                   	push   %eax
f01080df:	68 be 63 13 f0       	push   $0xf01363be
f01080e4:	e8 25 8c ff ff       	call   f0100d0e <cprintf>
f01080e9:	83 c4 10             	add    $0x10,%esp
	if (isPageReplacmentAlgorithmLRU(PG_REP_LRU_LISTS_APPROX))
	{
		int i = 0;
		cprintf("ActiveList:\n============\n") ;
		struct WorkingSetElement * ptr_WS_element ;
		LIST_FOREACH(ptr_WS_element, &(e->ActiveList))
f01080ec:	8b 45 08             	mov    0x8(%ebp),%eax
f01080ef:	8b 80 d0 05 00 00    	mov    0x5d0(%eax),%eax
f01080f5:	89 45 f0             	mov    %eax,-0x10(%ebp)
f01080f8:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f01080fc:	74 08                	je     f0108106 <env_page_ws_print+0x7b>
f01080fe:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0108101:	8b 40 10             	mov    0x10(%eax),%eax
f0108104:	eb 05                	jmp    f010810b <env_page_ws_print+0x80>
f0108106:	b8 00 00 00 00       	mov    $0x0,%eax
f010810b:	8b 55 08             	mov    0x8(%ebp),%edx
f010810e:	89 82 d0 05 00 00    	mov    %eax,0x5d0(%edx)
f0108114:	8b 45 08             	mov    0x8(%ebp),%eax
f0108117:	8b 80 d0 05 00 00    	mov    0x5d0(%eax),%eax
f010811d:	85 c0                	test   %eax,%eax
f010811f:	75 ab                	jne    f01080cc <env_page_ws_print+0x41>
f0108121:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0108125:	75 a5                	jne    f01080cc <env_page_ws_print+0x41>
		{
			cprintf("%d:	%x\n", i++, ptr_WS_element->virtual_address);
		}
		cprintf("\nSecondList:\n============\n") ;
f0108127:	83 ec 0c             	sub    $0xc,%esp
f010812a:	68 c6 63 13 f0       	push   $0xf01363c6
f010812f:	e8 da 8b ff ff       	call   f0100d0e <cprintf>
f0108134:	83 c4 10             	add    $0x10,%esp
		LIST_FOREACH(ptr_WS_element, &(e->SecondList))
f0108137:	8b 45 08             	mov    0x8(%ebp),%eax
f010813a:	8b 80 d8 05 00 00    	mov    0x5d8(%eax),%eax
f0108140:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0108143:	eb 2c                	jmp    f0108171 <env_page_ws_print+0xe6>
		{
			cprintf("%d:	%x\n", i++, ptr_WS_element->virtual_address);
f0108145:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0108148:	8b 10                	mov    (%eax),%edx
f010814a:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010814d:	8d 48 01             	lea    0x1(%eax),%ecx
f0108150:	89 4d f4             	mov    %ecx,-0xc(%ebp)
f0108153:	83 ec 04             	sub    $0x4,%esp
f0108156:	52                   	push   %edx
f0108157:	50                   	push   %eax
f0108158:	68 be 63 13 f0       	push   $0xf01363be
f010815d:	e8 ac 8b ff ff       	call   f0100d0e <cprintf>
f0108162:	83 c4 10             	add    $0x10,%esp
		LIST_FOREACH(ptr_WS_element, &(e->ActiveList))
		{
			cprintf("%d:	%x\n", i++, ptr_WS_element->virtual_address);
		}
		cprintf("\nSecondList:\n============\n") ;
		LIST_FOREACH(ptr_WS_element, &(e->SecondList))
f0108165:	8b 45 08             	mov    0x8(%ebp),%eax
f0108168:	8b 80 e0 05 00 00    	mov    0x5e0(%eax),%eax
f010816e:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0108171:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0108175:	74 08                	je     f010817f <env_page_ws_print+0xf4>
f0108177:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010817a:	8b 40 10             	mov    0x10(%eax),%eax
f010817d:	eb 05                	jmp    f0108184 <env_page_ws_print+0xf9>
f010817f:	b8 00 00 00 00       	mov    $0x0,%eax
f0108184:	8b 55 08             	mov    0x8(%ebp),%edx
f0108187:	89 82 e0 05 00 00    	mov    %eax,0x5e0(%edx)
f010818d:	8b 45 08             	mov    0x8(%ebp),%eax
f0108190:	8b 80 e0 05 00 00    	mov    0x5e0(%eax),%eax
f0108196:	85 c0                	test   %eax,%eax
f0108198:	75 ab                	jne    f0108145 <env_page_ws_print+0xba>
f010819a:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f010819e:	75 a5                	jne    f0108145 <env_page_ws_print+0xba>
				cprintf(" <--");
			}
			cprintf("\n");
		}
	}
}
f01081a0:	e9 95 01 00 00       	jmp    f010833a <env_page_ws_print+0x2af>
		}
	}
	else
	{
		uint32 i;
		cprintf("PAGE WS:\n");
f01081a5:	83 ec 0c             	sub    $0xc,%esp
f01081a8:	68 e1 63 13 f0       	push   $0xf01363e1
f01081ad:	e8 5c 8b ff ff       	call   f0100d0e <cprintf>
f01081b2:	83 c4 10             	add    $0x10,%esp
		for(i=0; i< (e->page_WS_max_size); i++ )
f01081b5:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f01081bc:	e9 6a 01 00 00       	jmp    f010832b <env_page_ws_print+0x2a0>
		{
			if (e->ptr_pageWorkingSet[i].empty)
f01081c1:	8b 45 08             	mov    0x8(%ebp),%eax
f01081c4:	8b 48 78             	mov    0x78(%eax),%ecx
f01081c7:	8b 55 ec             	mov    -0x14(%ebp),%edx
f01081ca:	89 d0                	mov    %edx,%eax
f01081cc:	01 c0                	add    %eax,%eax
f01081ce:	01 d0                	add    %edx,%eax
f01081d0:	c1 e0 03             	shl    $0x3,%eax
f01081d3:	01 c8                	add    %ecx,%eax
f01081d5:	8a 40 04             	mov    0x4(%eax),%al
f01081d8:	84 c0                	test   %al,%al
f01081da:	74 43                	je     f010821f <env_page_ws_print+0x194>
			{
				cprintf("EMPTY LOCATION");
f01081dc:	83 ec 0c             	sub    $0xc,%esp
f01081df:	68 eb 63 13 f0       	push   $0xf01363eb
f01081e4:	e8 25 8b ff ff       	call   f0100d0e <cprintf>
f01081e9:	83 c4 10             	add    $0x10,%esp
				if(i==e->page_last_WS_index )
f01081ec:	8b 45 08             	mov    0x8(%ebp),%eax
f01081ef:	8b 80 2c 05 00 00    	mov    0x52c(%eax),%eax
f01081f5:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f01081f8:	75 10                	jne    f010820a <env_page_ws_print+0x17f>
				{
					cprintf("		<--");
f01081fa:	83 ec 0c             	sub    $0xc,%esp
f01081fd:	68 fa 63 13 f0       	push   $0xf01363fa
f0108202:	e8 07 8b ff ff       	call   f0100d0e <cprintf>
f0108207:	83 c4 10             	add    $0x10,%esp
				}
				cprintf("\n");
f010820a:	83 ec 0c             	sub    $0xc,%esp
f010820d:	68 00 64 13 f0       	push   $0xf0136400
f0108212:	e8 f7 8a ff ff       	call   f0100d0e <cprintf>
f0108217:	83 c4 10             	add    $0x10,%esp
				continue;
f010821a:	e9 09 01 00 00       	jmp    f0108328 <env_page_ws_print+0x29d>
			}
			uint32 virtual_address = e->ptr_pageWorkingSet[i].virtual_address;
f010821f:	8b 45 08             	mov    0x8(%ebp),%eax
f0108222:	8b 48 78             	mov    0x78(%eax),%ecx
f0108225:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0108228:	89 d0                	mov    %edx,%eax
f010822a:	01 c0                	add    %eax,%eax
f010822c:	01 d0                	add    %edx,%eax
f010822e:	c1 e0 03             	shl    $0x3,%eax
f0108231:	01 c8                	add    %ecx,%eax
f0108233:	8b 00                	mov    (%eax),%eax
f0108235:	89 45 e8             	mov    %eax,-0x18(%ebp)
			uint32 time_stamp = e->ptr_pageWorkingSet[i].time_stamp;
f0108238:	8b 45 08             	mov    0x8(%ebp),%eax
f010823b:	8b 48 78             	mov    0x78(%eax),%ecx
f010823e:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0108241:	89 d0                	mov    %edx,%eax
f0108243:	01 c0                	add    %eax,%eax
f0108245:	01 d0                	add    %edx,%eax
f0108247:	c1 e0 03             	shl    $0x3,%eax
f010824a:	01 c8                	add    %ecx,%eax
f010824c:	8b 40 08             	mov    0x8(%eax),%eax
f010824f:	89 45 e4             	mov    %eax,-0x1c(%ebp)

			uint32 perm = pt_get_page_permissions(e->env_page_directory, virtual_address) ;
f0108252:	8b 45 08             	mov    0x8(%ebp),%eax
f0108255:	8b 40 5c             	mov    0x5c(%eax),%eax
f0108258:	83 ec 08             	sub    $0x8,%esp
f010825b:	ff 75 e8             	pushl  -0x18(%ebp)
f010825e:	50                   	push   %eax
f010825f:	e8 fd f9 ff ff       	call   f0107c61 <pt_get_page_permissions>
f0108264:	83 c4 10             	add    $0x10,%esp
f0108267:	89 45 e0             	mov    %eax,-0x20(%ebp)
			char isModified = ((perm&PERM_MODIFIED) ? 1 : 0);
f010826a:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010826d:	83 e0 40             	and    $0x40,%eax
f0108270:	85 c0                	test   %eax,%eax
f0108272:	0f 95 c0             	setne  %al
f0108275:	88 45 df             	mov    %al,-0x21(%ebp)
			char isUsed= ((perm&PERM_USED) ? 1 : 0);
f0108278:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010827b:	83 e0 20             	and    $0x20,%eax
f010827e:	85 c0                	test   %eax,%eax
f0108280:	0f 95 c0             	setne  %al
f0108283:	88 45 de             	mov    %al,-0x22(%ebp)
			char isBuffered= ((perm&PERM_BUFFERED) ? 1 : 0);
f0108286:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0108289:	25 00 02 00 00       	and    $0x200,%eax
f010828e:	85 c0                	test   %eax,%eax
f0108290:	0f 95 c0             	setne  %al
f0108293:	88 45 dd             	mov    %al,-0x23(%ebp)


			cprintf("address @ %d = %x",i, e->ptr_pageWorkingSet[i].virtual_address);
f0108296:	8b 45 08             	mov    0x8(%ebp),%eax
f0108299:	8b 48 78             	mov    0x78(%eax),%ecx
f010829c:	8b 55 ec             	mov    -0x14(%ebp),%edx
f010829f:	89 d0                	mov    %edx,%eax
f01082a1:	01 c0                	add    %eax,%eax
f01082a3:	01 d0                	add    %edx,%eax
f01082a5:	c1 e0 03             	shl    $0x3,%eax
f01082a8:	01 c8                	add    %ecx,%eax
f01082aa:	8b 00                	mov    (%eax),%eax
f01082ac:	83 ec 04             	sub    $0x4,%esp
f01082af:	50                   	push   %eax
f01082b0:	ff 75 ec             	pushl  -0x14(%ebp)
f01082b3:	68 02 64 13 f0       	push   $0xf0136402
f01082b8:	e8 51 8a ff ff       	call   f0100d0e <cprintf>
f01082bd:	83 c4 10             	add    $0x10,%esp

			//2021
			cprintf(", used= %d, modified= %d, buffered= %d, time stamp= %x, sweeps_cnt= %d", isUsed, isModified, isBuffered, time_stamp, e->ptr_pageWorkingSet[i].sweeps_counter) ;
f01082c0:	8b 45 08             	mov    0x8(%ebp),%eax
f01082c3:	8b 48 78             	mov    0x78(%eax),%ecx
f01082c6:	8b 55 ec             	mov    -0x14(%ebp),%edx
f01082c9:	89 d0                	mov    %edx,%eax
f01082cb:	01 c0                	add    %eax,%eax
f01082cd:	01 d0                	add    %edx,%eax
f01082cf:	c1 e0 03             	shl    $0x3,%eax
f01082d2:	01 c8                	add    %ecx,%eax
f01082d4:	8b 58 0c             	mov    0xc(%eax),%ebx
f01082d7:	0f be 4d dd          	movsbl -0x23(%ebp),%ecx
f01082db:	0f be 55 df          	movsbl -0x21(%ebp),%edx
f01082df:	0f be 45 de          	movsbl -0x22(%ebp),%eax
f01082e3:	83 ec 08             	sub    $0x8,%esp
f01082e6:	53                   	push   %ebx
f01082e7:	ff 75 e4             	pushl  -0x1c(%ebp)
f01082ea:	51                   	push   %ecx
f01082eb:	52                   	push   %edx
f01082ec:	50                   	push   %eax
f01082ed:	68 14 64 13 f0       	push   $0xf0136414
f01082f2:	e8 17 8a ff ff       	call   f0100d0e <cprintf>
f01082f7:	83 c4 20             	add    $0x20,%esp

			if(i==e->page_last_WS_index )
f01082fa:	8b 45 08             	mov    0x8(%ebp),%eax
f01082fd:	8b 80 2c 05 00 00    	mov    0x52c(%eax),%eax
f0108303:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f0108306:	75 10                	jne    f0108318 <env_page_ws_print+0x28d>
			{
				cprintf(" <--");
f0108308:	83 ec 0c             	sub    $0xc,%esp
f010830b:	68 5b 64 13 f0       	push   $0xf013645b
f0108310:	e8 f9 89 ff ff       	call   f0100d0e <cprintf>
f0108315:	83 c4 10             	add    $0x10,%esp
			}
			cprintf("\n");
f0108318:	83 ec 0c             	sub    $0xc,%esp
f010831b:	68 00 64 13 f0       	push   $0xf0136400
f0108320:	e8 e9 89 ff ff       	call   f0100d0e <cprintf>
f0108325:	83 c4 10             	add    $0x10,%esp
	}
	else
	{
		uint32 i;
		cprintf("PAGE WS:\n");
		for(i=0; i< (e->page_WS_max_size); i++ )
f0108328:	ff 45 ec             	incl   -0x14(%ebp)
f010832b:	8b 45 08             	mov    0x8(%ebp),%eax
f010832e:	8b 40 74             	mov    0x74(%eax),%eax
f0108331:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f0108334:	0f 87 87 fe ff ff    	ja     f01081c1 <env_page_ws_print+0x136>
				cprintf(" <--");
			}
			cprintf("\n");
		}
	}
}
f010833a:	90                   	nop
f010833b:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f010833e:	c9                   	leave  
f010833f:	c3                   	ret    

f0108340 <env_table_ws_print>:

// Table Working Set =========================================================

void env_table_ws_print(struct Env *e)
{
f0108340:	55                   	push   %ebp
f0108341:	89 e5                	mov    %esp,%ebp
f0108343:	53                   	push   %ebx
f0108344:	83 ec 14             	sub    $0x14,%esp
	uint32 i;
	cprintf("---------------------------------------------------\n");
f0108347:	83 ec 0c             	sub    $0xc,%esp
f010834a:	68 60 64 13 f0       	push   $0xf0136460
f010834f:	e8 ba 89 ff ff       	call   f0100d0e <cprintf>
f0108354:	83 c4 10             	add    $0x10,%esp
	cprintf("TABLE WS:\n");
f0108357:	83 ec 0c             	sub    $0xc,%esp
f010835a:	68 95 64 13 f0       	push   $0xf0136495
f010835f:	e8 aa 89 ff ff       	call   f0100d0e <cprintf>
f0108364:	83 c4 10             	add    $0x10,%esp
	for(i=0; i< __TWS_MAX_SIZE; i++ )
f0108367:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f010836e:	e9 10 01 00 00       	jmp    f0108483 <env_table_ws_print+0x143>
	{
		if (e->__ptr_tws[i].empty)
f0108373:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0108376:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0108379:	89 d0                	mov    %edx,%eax
f010837b:	01 c0                	add    %eax,%eax
f010837d:	01 d0                	add    %edx,%eax
f010837f:	c1 e0 03             	shl    $0x3,%eax
f0108382:	01 c8                	add    %ecx,%eax
f0108384:	83 e8 80             	sub    $0xffffff80,%eax
f0108387:	8a 00                	mov    (%eax),%al
f0108389:	84 c0                	test   %al,%al
f010838b:	74 43                	je     f01083d0 <env_table_ws_print+0x90>
		{
			cprintf("EMPTY LOCATION");
f010838d:	83 ec 0c             	sub    $0xc,%esp
f0108390:	68 eb 63 13 f0       	push   $0xf01363eb
f0108395:	e8 74 89 ff ff       	call   f0100d0e <cprintf>
f010839a:	83 c4 10             	add    $0x10,%esp
			if(i==e->table_last_WS_index )
f010839d:	8b 45 08             	mov    0x8(%ebp),%eax
f01083a0:	8b 80 30 05 00 00    	mov    0x530(%eax),%eax
f01083a6:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01083a9:	75 10                	jne    f01083bb <env_table_ws_print+0x7b>
			{
				cprintf("		<--");
f01083ab:	83 ec 0c             	sub    $0xc,%esp
f01083ae:	68 fa 63 13 f0       	push   $0xf01363fa
f01083b3:	e8 56 89 ff ff       	call   f0100d0e <cprintf>
f01083b8:	83 c4 10             	add    $0x10,%esp
			}
			cprintf("\n");
f01083bb:	83 ec 0c             	sub    $0xc,%esp
f01083be:	68 00 64 13 f0       	push   $0xf0136400
f01083c3:	e8 46 89 ff ff       	call   f0100d0e <cprintf>
f01083c8:	83 c4 10             	add    $0x10,%esp
			continue;
f01083cb:	e9 b0 00 00 00       	jmp    f0108480 <env_table_ws_print+0x140>
		}
		uint32 virtual_address = e->__ptr_tws[i].virtual_address;
f01083d0:	8b 4d 08             	mov    0x8(%ebp),%ecx
f01083d3:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01083d6:	89 d0                	mov    %edx,%eax
f01083d8:	01 c0                	add    %eax,%eax
f01083da:	01 d0                	add    %edx,%eax
f01083dc:	c1 e0 03             	shl    $0x3,%eax
f01083df:	01 c8                	add    %ecx,%eax
f01083e1:	83 c0 7c             	add    $0x7c,%eax
f01083e4:	8b 00                	mov    (%eax),%eax
f01083e6:	89 45 f0             	mov    %eax,-0x10(%ebp)
		cprintf("env address at %d = %x",i, e->__ptr_tws[i].virtual_address);
f01083e9:	8b 4d 08             	mov    0x8(%ebp),%ecx
f01083ec:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01083ef:	89 d0                	mov    %edx,%eax
f01083f1:	01 c0                	add    %eax,%eax
f01083f3:	01 d0                	add    %edx,%eax
f01083f5:	c1 e0 03             	shl    $0x3,%eax
f01083f8:	01 c8                	add    %ecx,%eax
f01083fa:	83 c0 7c             	add    $0x7c,%eax
f01083fd:	8b 00                	mov    (%eax),%eax
f01083ff:	83 ec 04             	sub    $0x4,%esp
f0108402:	50                   	push   %eax
f0108403:	ff 75 f4             	pushl  -0xc(%ebp)
f0108406:	68 a0 64 13 f0       	push   $0xf01364a0
f010840b:	e8 fe 88 ff ff       	call   f0100d0e <cprintf>
f0108410:	83 c4 10             	add    $0x10,%esp

		cprintf(", used bit = %d, time stamp = %d", pd_is_table_used(e->env_page_directory, virtual_address), e->__ptr_tws[i].time_stamp);
f0108413:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0108416:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0108419:	89 d0                	mov    %edx,%eax
f010841b:	01 c0                	add    %eax,%eax
f010841d:	01 d0                	add    %edx,%eax
f010841f:	c1 e0 03             	shl    $0x3,%eax
f0108422:	01 c8                	add    %ecx,%eax
f0108424:	05 84 00 00 00       	add    $0x84,%eax
f0108429:	8b 18                	mov    (%eax),%ebx
f010842b:	8b 45 08             	mov    0x8(%ebp),%eax
f010842e:	8b 40 5c             	mov    0x5c(%eax),%eax
f0108431:	83 ec 08             	sub    $0x8,%esp
f0108434:	ff 75 f0             	pushl  -0x10(%ebp)
f0108437:	50                   	push   %eax
f0108438:	e8 43 f9 ff ff       	call   f0107d80 <pd_is_table_used>
f010843d:	83 c4 10             	add    $0x10,%esp
f0108440:	83 ec 04             	sub    $0x4,%esp
f0108443:	53                   	push   %ebx
f0108444:	50                   	push   %eax
f0108445:	68 b8 64 13 f0       	push   $0xf01364b8
f010844a:	e8 bf 88 ff ff       	call   f0100d0e <cprintf>
f010844f:	83 c4 10             	add    $0x10,%esp
		if(i==e->table_last_WS_index )
f0108452:	8b 45 08             	mov    0x8(%ebp),%eax
f0108455:	8b 80 30 05 00 00    	mov    0x530(%eax),%eax
f010845b:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f010845e:	75 10                	jne    f0108470 <env_table_ws_print+0x130>
		{
			cprintf(" <--");
f0108460:	83 ec 0c             	sub    $0xc,%esp
f0108463:	68 5b 64 13 f0       	push   $0xf013645b
f0108468:	e8 a1 88 ff ff       	call   f0100d0e <cprintf>
f010846d:	83 c4 10             	add    $0x10,%esp
		}
		cprintf("\n");
f0108470:	83 ec 0c             	sub    $0xc,%esp
f0108473:	68 00 64 13 f0       	push   $0xf0136400
f0108478:	e8 91 88 ff ff       	call   f0100d0e <cprintf>
f010847d:	83 c4 10             	add    $0x10,%esp
void env_table_ws_print(struct Env *e)
{
	uint32 i;
	cprintf("---------------------------------------------------\n");
	cprintf("TABLE WS:\n");
	for(i=0; i< __TWS_MAX_SIZE; i++ )
f0108480:	ff 45 f4             	incl   -0xc(%ebp)
f0108483:	83 7d f4 31          	cmpl   $0x31,-0xc(%ebp)
f0108487:	0f 86 e6 fe ff ff    	jbe    f0108373 <env_table_ws_print+0x33>
		{
			cprintf(" <--");
		}
		cprintf("\n");
	}
}
f010848d:	90                   	nop
f010848e:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f0108491:	c9                   	leave  
f0108492:	c3                   	ret    

f0108493 <env_table_ws_get_size>:

inline uint32 env_table_ws_get_size(struct Env *e)
{
f0108493:	55                   	push   %ebp
f0108494:	89 e5                	mov    %esp,%ebp
f0108496:	83 ec 10             	sub    $0x10,%esp
	int i=0, counter=0;
f0108499:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
f01084a0:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
	for(;i<__TWS_MAX_SIZE; i++) if(e->__ptr_tws[i].empty == 0) counter++;
f01084a7:	eb 20                	jmp    f01084c9 <env_table_ws_get_size+0x36>
f01084a9:	8b 4d 08             	mov    0x8(%ebp),%ecx
f01084ac:	8b 55 fc             	mov    -0x4(%ebp),%edx
f01084af:	89 d0                	mov    %edx,%eax
f01084b1:	01 c0                	add    %eax,%eax
f01084b3:	01 d0                	add    %edx,%eax
f01084b5:	c1 e0 03             	shl    $0x3,%eax
f01084b8:	01 c8                	add    %ecx,%eax
f01084ba:	83 e8 80             	sub    $0xffffff80,%eax
f01084bd:	8a 00                	mov    (%eax),%al
f01084bf:	84 c0                	test   %al,%al
f01084c1:	75 03                	jne    f01084c6 <env_table_ws_get_size+0x33>
f01084c3:	ff 45 f8             	incl   -0x8(%ebp)
f01084c6:	ff 45 fc             	incl   -0x4(%ebp)
f01084c9:	83 7d fc 31          	cmpl   $0x31,-0x4(%ebp)
f01084cd:	7e da                	jle    f01084a9 <env_table_ws_get_size+0x16>
	return counter;
f01084cf:	8b 45 f8             	mov    -0x8(%ebp),%eax
}
f01084d2:	c9                   	leave  
f01084d3:	c3                   	ret    

f01084d4 <env_table_ws_invalidate>:

inline void env_table_ws_invalidate(struct Env* e, uint32 virtual_address)
{
f01084d4:	55                   	push   %ebp
f01084d5:	89 e5                	mov    %esp,%ebp
f01084d7:	83 ec 18             	sub    $0x18,%esp
	int i=0;
f01084da:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	for(;i<__TWS_MAX_SIZE; i++)
f01084e1:	eb 4c                	jmp    f010852f <env_table_ws_invalidate+0x5b>
	{
		if(ROUNDDOWN(e->__ptr_tws[i].virtual_address,PAGE_SIZE*1024) == ROUNDDOWN(virtual_address,PAGE_SIZE*1024))
f01084e3:	8b 4d 08             	mov    0x8(%ebp),%ecx
f01084e6:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01084e9:	89 d0                	mov    %edx,%eax
f01084eb:	01 c0                	add    %eax,%eax
f01084ed:	01 d0                	add    %edx,%eax
f01084ef:	c1 e0 03             	shl    $0x3,%eax
f01084f2:	01 c8                	add    %ecx,%eax
f01084f4:	83 c0 7c             	add    $0x7c,%eax
f01084f7:	8b 00                	mov    (%eax),%eax
f01084f9:	89 45 f0             	mov    %eax,-0x10(%ebp)
f01084fc:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01084ff:	25 00 00 c0 ff       	and    $0xffc00000,%eax
f0108504:	89 c2                	mov    %eax,%edx
f0108506:	8b 45 0c             	mov    0xc(%ebp),%eax
f0108509:	89 45 ec             	mov    %eax,-0x14(%ebp)
f010850c:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010850f:	25 00 00 c0 ff       	and    $0xffc00000,%eax
f0108514:	39 c2                	cmp    %eax,%edx
f0108516:	75 14                	jne    f010852c <env_table_ws_invalidate+0x58>
		{
			env_table_ws_clear_entry(e, i);
f0108518:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010851b:	83 ec 08             	sub    $0x8,%esp
f010851e:	50                   	push   %eax
f010851f:	ff 75 08             	pushl  0x8(%ebp)
f0108522:	e8 b8 00 00 00       	call   f01085df <env_table_ws_clear_entry>
f0108527:	83 c4 10             	add    $0x10,%esp
			break;
f010852a:	eb 09                	jmp    f0108535 <env_table_ws_invalidate+0x61>
}

inline void env_table_ws_invalidate(struct Env* e, uint32 virtual_address)
{
	int i=0;
	for(;i<__TWS_MAX_SIZE; i++)
f010852c:	ff 45 f4             	incl   -0xc(%ebp)
f010852f:	83 7d f4 31          	cmpl   $0x31,-0xc(%ebp)
f0108533:	7e ae                	jle    f01084e3 <env_table_ws_invalidate+0xf>
		{
			env_table_ws_clear_entry(e, i);
			break;
		}
	}
}
f0108535:	90                   	nop
f0108536:	c9                   	leave  
f0108537:	c3                   	ret    

f0108538 <env_table_ws_set_entry>:

inline void env_table_ws_set_entry(struct Env* e, uint32 entry_index, uint32 virtual_address)
{
f0108538:	55                   	push   %ebp
f0108539:	89 e5                	mov    %esp,%ebp
f010853b:	53                   	push   %ebx
f010853c:	83 ec 14             	sub    $0x14,%esp
	assert(entry_index >= 0 && entry_index < __TWS_MAX_SIZE);
f010853f:	83 7d 0c 31          	cmpl   $0x31,0xc(%ebp)
f0108543:	76 19                	jbe    f010855e <env_table_ws_set_entry+0x26>
f0108545:	68 dc 64 13 f0       	push   $0xf01364dc
f010854a:	68 02 63 13 f0       	push   $0xf0136302
f010854f:	68 b6 00 00 00       	push   $0xb6
f0108554:	68 18 63 13 f0       	push   $0xf0136318
f0108559:	e8 a7 7c ff ff       	call   f0100205 <_panic>
	assert(virtual_address >= 0 && virtual_address < USER_TOP);
f010855e:	81 7d 10 ff ff bf ee 	cmpl   $0xeebfffff,0x10(%ebp)
f0108565:	76 19                	jbe    f0108580 <env_table_ws_set_entry+0x48>
f0108567:	68 38 63 13 f0       	push   $0xf0136338
f010856c:	68 02 63 13 f0       	push   $0xf0136302
f0108571:	68 b7 00 00 00       	push   $0xb7
f0108576:	68 18 63 13 f0       	push   $0xf0136318
f010857b:	e8 85 7c ff ff       	call   f0100205 <_panic>
	e->__ptr_tws[entry_index].virtual_address = ROUNDDOWN(virtual_address,PAGE_SIZE*1024);
f0108580:	8b 45 10             	mov    0x10(%ebp),%eax
f0108583:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0108586:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0108589:	25 00 00 c0 ff       	and    $0xffc00000,%eax
f010858e:	89 c1                	mov    %eax,%ecx
f0108590:	8b 5d 08             	mov    0x8(%ebp),%ebx
f0108593:	8b 55 0c             	mov    0xc(%ebp),%edx
f0108596:	89 d0                	mov    %edx,%eax
f0108598:	01 c0                	add    %eax,%eax
f010859a:	01 d0                	add    %edx,%eax
f010859c:	c1 e0 03             	shl    $0x3,%eax
f010859f:	01 d8                	add    %ebx,%eax
f01085a1:	83 c0 7c             	add    $0x7c,%eax
f01085a4:	89 08                	mov    %ecx,(%eax)
	e->__ptr_tws[entry_index].empty = 0;
f01085a6:	8b 4d 08             	mov    0x8(%ebp),%ecx
f01085a9:	8b 55 0c             	mov    0xc(%ebp),%edx
f01085ac:	89 d0                	mov    %edx,%eax
f01085ae:	01 c0                	add    %eax,%eax
f01085b0:	01 d0                	add    %edx,%eax
f01085b2:	c1 e0 03             	shl    $0x3,%eax
f01085b5:	01 c8                	add    %ecx,%eax
f01085b7:	83 e8 80             	sub    $0xffffff80,%eax
f01085ba:	c6 00 00             	movb   $0x0,(%eax)

	//e->__ptr_tws[entry_index].time_stamp = time;
	e->__ptr_tws[entry_index].time_stamp = 0x80000000;
f01085bd:	8b 4d 08             	mov    0x8(%ebp),%ecx
f01085c0:	8b 55 0c             	mov    0xc(%ebp),%edx
f01085c3:	89 d0                	mov    %edx,%eax
f01085c5:	01 c0                	add    %eax,%eax
f01085c7:	01 d0                	add    %edx,%eax
f01085c9:	c1 e0 03             	shl    $0x3,%eax
f01085cc:	01 c8                	add    %ecx,%eax
f01085ce:	05 84 00 00 00       	add    $0x84,%eax
f01085d3:	c7 00 00 00 00 80    	movl   $0x80000000,(%eax)
	return;
f01085d9:	90                   	nop
}
f01085da:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f01085dd:	c9                   	leave  
f01085de:	c3                   	ret    

f01085df <env_table_ws_clear_entry>:

inline void env_table_ws_clear_entry(struct Env* e, uint32 entry_index)
{
f01085df:	55                   	push   %ebp
f01085e0:	89 e5                	mov    %esp,%ebp
f01085e2:	83 ec 08             	sub    $0x8,%esp
	assert(entry_index >= 0 && entry_index < __TWS_MAX_SIZE);
f01085e5:	83 7d 0c 31          	cmpl   $0x31,0xc(%ebp)
f01085e9:	76 19                	jbe    f0108604 <env_table_ws_clear_entry+0x25>
f01085eb:	68 dc 64 13 f0       	push   $0xf01364dc
f01085f0:	68 02 63 13 f0       	push   $0xf0136302
f01085f5:	68 c2 00 00 00       	push   $0xc2
f01085fa:	68 18 63 13 f0       	push   $0xf0136318
f01085ff:	e8 01 7c ff ff       	call   f0100205 <_panic>
	e->__ptr_tws[entry_index].virtual_address = 0;
f0108604:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0108607:	8b 55 0c             	mov    0xc(%ebp),%edx
f010860a:	89 d0                	mov    %edx,%eax
f010860c:	01 c0                	add    %eax,%eax
f010860e:	01 d0                	add    %edx,%eax
f0108610:	c1 e0 03             	shl    $0x3,%eax
f0108613:	01 c8                	add    %ecx,%eax
f0108615:	83 c0 7c             	add    $0x7c,%eax
f0108618:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	e->__ptr_tws[entry_index].empty = 1;
f010861e:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0108621:	8b 55 0c             	mov    0xc(%ebp),%edx
f0108624:	89 d0                	mov    %edx,%eax
f0108626:	01 c0                	add    %eax,%eax
f0108628:	01 d0                	add    %edx,%eax
f010862a:	c1 e0 03             	shl    $0x3,%eax
f010862d:	01 c8                	add    %ecx,%eax
f010862f:	83 e8 80             	sub    $0xffffff80,%eax
f0108632:	c6 00 01             	movb   $0x1,(%eax)
	e->__ptr_tws[entry_index].time_stamp = 0;
f0108635:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0108638:	8b 55 0c             	mov    0xc(%ebp),%edx
f010863b:	89 d0                	mov    %edx,%eax
f010863d:	01 c0                	add    %eax,%eax
f010863f:	01 d0                	add    %edx,%eax
f0108641:	c1 e0 03             	shl    $0x3,%eax
f0108644:	01 c8                	add    %ecx,%eax
f0108646:	05 84 00 00 00       	add    $0x84,%eax
f010864b:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
}
f0108651:	90                   	nop
f0108652:	c9                   	leave  
f0108653:	c3                   	ret    

f0108654 <env_table_ws_get_virtual_address>:

inline uint32 env_table_ws_get_virtual_address(struct Env* e, uint32 entry_index)
{
f0108654:	55                   	push   %ebp
f0108655:	89 e5                	mov    %esp,%ebp
f0108657:	83 ec 18             	sub    $0x18,%esp
	assert(entry_index >= 0 && entry_index < __TWS_MAX_SIZE);
f010865a:	83 7d 0c 31          	cmpl   $0x31,0xc(%ebp)
f010865e:	76 19                	jbe    f0108679 <env_table_ws_get_virtual_address+0x25>
f0108660:	68 dc 64 13 f0       	push   $0xf01364dc
f0108665:	68 02 63 13 f0       	push   $0xf0136302
f010866a:	68 ca 00 00 00       	push   $0xca
f010866f:	68 18 63 13 f0       	push   $0xf0136318
f0108674:	e8 8c 7b ff ff       	call   f0100205 <_panic>
	return ROUNDDOWN(e->__ptr_tws[entry_index].virtual_address,PAGE_SIZE*1024);
f0108679:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010867c:	8b 55 0c             	mov    0xc(%ebp),%edx
f010867f:	89 d0                	mov    %edx,%eax
f0108681:	01 c0                	add    %eax,%eax
f0108683:	01 d0                	add    %edx,%eax
f0108685:	c1 e0 03             	shl    $0x3,%eax
f0108688:	01 c8                	add    %ecx,%eax
f010868a:	83 c0 7c             	add    $0x7c,%eax
f010868d:	8b 00                	mov    (%eax),%eax
f010868f:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0108692:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0108695:	25 00 00 c0 ff       	and    $0xffc00000,%eax
}
f010869a:	c9                   	leave  
f010869b:	c3                   	ret    

f010869c <env_table_ws_get_time_stamp>:


inline uint32 env_table_ws_get_time_stamp(struct Env* e, uint32 entry_index)
{
f010869c:	55                   	push   %ebp
f010869d:	89 e5                	mov    %esp,%ebp
f010869f:	83 ec 08             	sub    $0x8,%esp
	assert(entry_index >= 0 && entry_index < __TWS_MAX_SIZE);
f01086a2:	83 7d 0c 31          	cmpl   $0x31,0xc(%ebp)
f01086a6:	76 19                	jbe    f01086c1 <env_table_ws_get_time_stamp+0x25>
f01086a8:	68 dc 64 13 f0       	push   $0xf01364dc
f01086ad:	68 02 63 13 f0       	push   $0xf0136302
f01086b2:	68 d1 00 00 00       	push   $0xd1
f01086b7:	68 18 63 13 f0       	push   $0xf0136318
f01086bc:	e8 44 7b ff ff       	call   f0100205 <_panic>
	return e->__ptr_tws[entry_index].time_stamp;
f01086c1:	8b 4d 08             	mov    0x8(%ebp),%ecx
f01086c4:	8b 55 0c             	mov    0xc(%ebp),%edx
f01086c7:	89 d0                	mov    %edx,%eax
f01086c9:	01 c0                	add    %eax,%eax
f01086cb:	01 d0                	add    %edx,%eax
f01086cd:	c1 e0 03             	shl    $0x3,%eax
f01086d0:	01 c8                	add    %ecx,%eax
f01086d2:	05 84 00 00 00       	add    $0x84,%eax
f01086d7:	8b 00                	mov    (%eax),%eax
}
f01086d9:	c9                   	leave  
f01086da:	c3                   	ret    

f01086db <env_table_ws_is_entry_empty>:

inline uint32 env_table_ws_is_entry_empty(struct Env* e, uint32 entry_index)
{
f01086db:	55                   	push   %ebp
f01086dc:	89 e5                	mov    %esp,%ebp
	return e->__ptr_tws[entry_index].empty;
f01086de:	8b 4d 08             	mov    0x8(%ebp),%ecx
f01086e1:	8b 55 0c             	mov    0xc(%ebp),%edx
f01086e4:	89 d0                	mov    %edx,%eax
f01086e6:	01 c0                	add    %eax,%eax
f01086e8:	01 d0                	add    %edx,%eax
f01086ea:	c1 e0 03             	shl    $0x3,%eax
f01086ed:	01 c8                	add    %ecx,%eax
f01086ef:	83 e8 80             	sub    $0xffffff80,%eax
f01086f2:	8a 00                	mov    (%eax),%al
f01086f4:	0f b6 c0             	movzbl %al,%eax
}
f01086f7:	5d                   	pop    %ebp
f01086f8:	c3                   	ret    

f01086f9 <cut_paste_WS>:
///=================================================================================================

// Change WS Sizes For PRIORITY  =========================================================

void cut_paste_WS(struct WorkingSetElement* newWS, int newSize, struct Env* e)
{
f01086f9:	55                   	push   %ebp
f01086fa:	89 e5                	mov    %esp,%ebp
f01086fc:	83 ec 08             	sub    $0x8,%esp
	//[PROGRAM PRIORITY] cut_paste_WS
	//your code is here, remove the panic and write your code
	panic("cut_paste_WS() is not implemented yet...!!");
f01086ff:	83 ec 04             	sub    $0x4,%esp
f0108702:	68 10 65 13 f0       	push   $0xf0136510
f0108707:	68 e5 00 00 00       	push   $0xe5
f010870c:	68 18 63 13 f0       	push   $0xf0136318
f0108711:	e8 ef 7a ff ff       	call   f0100205 <_panic>

f0108716 <double_WS_Size>:
}

void double_WS_Size(struct Env* e, int isOneTimeOnly)
{
f0108716:	55                   	push   %ebp
f0108717:	89 e5                	mov    %esp,%ebp
f0108719:	83 ec 08             	sub    $0x8,%esp
	//[PROGRAM PRIORITY] double_WS_Size
	//your code is here, remove the panic and write your code
	panic("double_WS_Size() is not implemented yet...!!");
f010871c:	83 ec 04             	sub    $0x4,%esp
f010871f:	68 3c 65 13 f0       	push   $0xf013653c
f0108724:	68 ec 00 00 00       	push   $0xec
f0108729:	68 18 63 13 f0       	push   $0xf0136318
f010872e:	e8 d2 7a ff ff       	call   f0100205 <_panic>

f0108733 <half_WS_Size>:
}

void half_WS_Size(struct Env* e, int isImmidiate)
{
f0108733:	55                   	push   %ebp
f0108734:	89 e5                	mov    %esp,%ebp
f0108736:	83 ec 08             	sub    $0x8,%esp
	//[PROGRAM PRIORITY] half_WS_Size
	//your code is here, remove the panic and write your code
	panic("half_WS_Size() is not implemented yet...!!");
f0108739:	83 ec 04             	sub    $0x4,%esp
f010873c:	68 6c 65 13 f0       	push   $0xf013656c
f0108741:	68 f3 00 00 00       	push   $0xf3
f0108746:	68 18 63 13 f0       	push   $0xf0136318
f010874b:	e8 b5 7a ff ff       	call   f0100205 <_panic>

f0108750 <cut_paste_pages>:
//===============================
//This function should cut-paste the given number of pages from source_va to dest_va
//if the page table at any destination page in the range is not exist, it should create it
//Hint: use ROUNDDOWN/ROUNDUP macros to align the addresses
int cut_paste_pages(uint32* page_directory, uint32 source_va, uint32 dest_va, uint32 num_of_pages)
{
f0108750:	55                   	push   %ebp
f0108751:	89 e5                	mov    %esp,%ebp
f0108753:	83 ec 48             	sub    $0x48,%esp
	//TODO: [PROJECT MS2] [CHUNK OPERATIONS] cut_paste_pages
	// Write your code here, remove the panic and write your code
	uint32 new_dest_va = dest_va;
f0108756:	8b 45 10             	mov    0x10(%ebp),%eax
f0108759:	89 45 f4             	mov    %eax,-0xc(%ebp)
	uint32 new_source_va = source_va;
f010875c:	8b 45 0c             	mov    0xc(%ebp),%eax
f010875f:	89 45 f0             	mov    %eax,-0x10(%ebp)

	if(dest_va%PAGE_SIZE!=0)
f0108762:	8b 45 10             	mov    0x10(%ebp),%eax
f0108765:	25 ff 0f 00 00       	and    $0xfff,%eax
f010876a:	85 c0                	test   %eax,%eax
f010876c:	74 11                	je     f010877f <cut_paste_pages+0x2f>
		new_dest_va = ROUNDDOWN(dest_va,PAGE_SIZE);
f010876e:	8b 45 10             	mov    0x10(%ebp),%eax
f0108771:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f0108774:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0108777:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f010877c:	89 45 f4             	mov    %eax,-0xc(%ebp)

	if(source_va%PAGE_SIZE!=0)
f010877f:	8b 45 0c             	mov    0xc(%ebp),%eax
f0108782:	25 ff 0f 00 00       	and    $0xfff,%eax
f0108787:	85 c0                	test   %eax,%eax
f0108789:	74 11                	je     f010879c <cut_paste_pages+0x4c>
		new_source_va = ROUNDDOWN(source_va,PAGE_SIZE);
f010878b:	8b 45 0c             	mov    0xc(%ebp),%eax
f010878e:	89 45 e0             	mov    %eax,-0x20(%ebp)
f0108791:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0108794:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0108799:	89 45 f0             	mov    %eax,-0x10(%ebp)
	uint32 max_size = (PAGE_SIZE * num_of_pages) + new_dest_va;
f010879c:	8b 45 14             	mov    0x14(%ebp),%eax
f010879f:	c1 e0 0c             	shl    $0xc,%eax
f01087a2:	89 c2                	mov    %eax,%edx
f01087a4:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01087a7:	01 d0                	add    %edx,%eax
f01087a9:	89 45 dc             	mov    %eax,-0x24(%ebp)

	for(uint32 i = new_dest_va; i < max_size; i += PAGE_SIZE)
f01087ac:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01087af:	89 45 ec             	mov    %eax,-0x14(%ebp)
f01087b2:	eb 4b                	jmp    f01087ff <cut_paste_pages+0xaf>
	{
		uint32 *ptr_page_table_dest = NULL;
f01087b4:	c7 45 cc 00 00 00 00 	movl   $0x0,-0x34(%ebp)
		get_page_table(page_directory,i,&ptr_page_table_dest);
f01087bb:	83 ec 04             	sub    $0x4,%esp
f01087be:	8d 45 cc             	lea    -0x34(%ebp),%eax
f01087c1:	50                   	push   %eax
f01087c2:	ff 75 ec             	pushl  -0x14(%ebp)
f01087c5:	ff 75 08             	pushl  0x8(%ebp)
f01087c8:	e8 e4 e2 ff ff       	call   f0106ab1 <get_page_table>
f01087cd:	83 c4 10             	add    $0x10,%esp
		struct FrameInfo *dest_frame = get_frame_info(page_directory,i,&ptr_page_table_dest);
f01087d0:	83 ec 04             	sub    $0x4,%esp
f01087d3:	8d 45 cc             	lea    -0x34(%ebp),%eax
f01087d6:	50                   	push   %eax
f01087d7:	ff 75 ec             	pushl  -0x14(%ebp)
f01087da:	ff 75 08             	pushl  0x8(%ebp)
f01087dd:	e8 24 e6 ff ff       	call   f0106e06 <get_frame_info>
f01087e2:	83 c4 10             	add    $0x10,%esp
f01087e5:	89 45 d8             	mov    %eax,-0x28(%ebp)

		if(dest_frame!=NULL)
f01087e8:	83 7d d8 00          	cmpl   $0x0,-0x28(%ebp)
f01087ec:	74 0a                	je     f01087f8 <cut_paste_pages+0xa8>
			return -1;
f01087ee:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
f01087f3:	e9 d4 00 00 00       	jmp    f01088cc <cut_paste_pages+0x17c>

	if(source_va%PAGE_SIZE!=0)
		new_source_va = ROUNDDOWN(source_va,PAGE_SIZE);
	uint32 max_size = (PAGE_SIZE * num_of_pages) + new_dest_va;

	for(uint32 i = new_dest_va; i < max_size; i += PAGE_SIZE)
f01087f8:	81 45 ec 00 10 00 00 	addl   $0x1000,-0x14(%ebp)
f01087ff:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0108802:	3b 45 dc             	cmp    -0x24(%ebp),%eax
f0108805:	72 ad                	jb     f01087b4 <cut_paste_pages+0x64>
		struct FrameInfo *dest_frame = get_frame_info(page_directory,i,&ptr_page_table_dest);

		if(dest_frame!=NULL)
			return -1;
	}
	for(uint32 i = new_dest_va; i < max_size; i += PAGE_SIZE)
f0108807:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010880a:	89 45 e8             	mov    %eax,-0x18(%ebp)
f010880d:	e9 a9 00 00 00       	jmp    f01088bb <cut_paste_pages+0x16b>
	{
		uint32 *ptr_page_table_dest = NULL;
f0108812:	c7 45 c8 00 00 00 00 	movl   $0x0,-0x38(%ebp)
		get_page_table(page_directory,i,&ptr_page_table_dest);
f0108819:	83 ec 04             	sub    $0x4,%esp
f010881c:	8d 45 c8             	lea    -0x38(%ebp),%eax
f010881f:	50                   	push   %eax
f0108820:	ff 75 e8             	pushl  -0x18(%ebp)
f0108823:	ff 75 08             	pushl  0x8(%ebp)
f0108826:	e8 86 e2 ff ff       	call   f0106ab1 <get_page_table>
f010882b:	83 c4 10             	add    $0x10,%esp

		if(ptr_page_table_dest == NULL)
f010882e:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0108831:	85 c0                	test   %eax,%eax
f0108833:	75 14                	jne    f0108849 <cut_paste_pages+0xf9>
			ptr_page_table_dest = create_page_table(page_directory,i);
f0108835:	83 ec 08             	sub    $0x8,%esp
f0108838:	ff 75 e8             	pushl  -0x18(%ebp)
f010883b:	ff 75 08             	pushl  0x8(%ebp)
f010883e:	e8 c4 e3 ff ff       	call   f0106c07 <create_page_table>
f0108843:	83 c4 10             	add    $0x10,%esp
f0108846:	89 45 c8             	mov    %eax,-0x38(%ebp)

		struct FrameInfo *dest_frame = get_frame_info(page_directory,i,&ptr_page_table_dest);
f0108849:	83 ec 04             	sub    $0x4,%esp
f010884c:	8d 45 c8             	lea    -0x38(%ebp),%eax
f010884f:	50                   	push   %eax
f0108850:	ff 75 e8             	pushl  -0x18(%ebp)
f0108853:	ff 75 08             	pushl  0x8(%ebp)
f0108856:	e8 ab e5 ff ff       	call   f0106e06 <get_frame_info>
f010885b:	83 c4 10             	add    $0x10,%esp
f010885e:	89 45 c4             	mov    %eax,-0x3c(%ebp)

		int source_perm = pt_get_page_permissions(page_directory,new_source_va);
f0108861:	83 ec 08             	sub    $0x8,%esp
f0108864:	ff 75 f0             	pushl  -0x10(%ebp)
f0108867:	ff 75 08             	pushl  0x8(%ebp)
f010886a:	e8 f2 f3 ff ff       	call   f0107c61 <pt_get_page_permissions>
f010886f:	83 c4 10             	add    $0x10,%esp
f0108872:	89 45 d4             	mov    %eax,-0x2c(%ebp)

		unmap_frame(page_directory,new_source_va);
f0108875:	83 ec 08             	sub    $0x8,%esp
f0108878:	ff 75 f0             	pushl  -0x10(%ebp)
f010887b:	ff 75 08             	pushl  0x8(%ebp)
f010887e:	e8 f3 e5 ff ff       	call   f0106e76 <unmap_frame>
f0108883:	83 c4 10             	add    $0x10,%esp
		uint32 ret = allocate_frame(&dest_frame);
f0108886:	83 ec 0c             	sub    $0xc,%esp
f0108889:	8d 45 c4             	lea    -0x3c(%ebp),%eax
f010888c:	50                   	push   %eax
f010888d:	e8 60 e0 ff ff       	call   f01068f2 <allocate_frame>
f0108892:	83 c4 10             	add    $0x10,%esp
f0108895:	89 45 d0             	mov    %eax,-0x30(%ebp)
		map_frame(page_directory, dest_frame, i,source_perm);
f0108898:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f010889b:	ff 75 d4             	pushl  -0x2c(%ebp)
f010889e:	ff 75 e8             	pushl  -0x18(%ebp)
f01088a1:	50                   	push   %eax
f01088a2:	ff 75 08             	pushl  0x8(%ebp)
f01088a5:	e8 97 e4 ff ff       	call   f0106d41 <map_frame>
f01088aa:	83 c4 10             	add    $0x10,%esp

		new_source_va += PAGE_SIZE;
f01088ad:	81 45 f0 00 10 00 00 	addl   $0x1000,-0x10(%ebp)
		struct FrameInfo *dest_frame = get_frame_info(page_directory,i,&ptr_page_table_dest);

		if(dest_frame!=NULL)
			return -1;
	}
	for(uint32 i = new_dest_va; i < max_size; i += PAGE_SIZE)
f01088b4:	81 45 e8 00 10 00 00 	addl   $0x1000,-0x18(%ebp)
f01088bb:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01088be:	3b 45 dc             	cmp    -0x24(%ebp),%eax
f01088c1:	0f 82 4b ff ff ff    	jb     f0108812 <cut_paste_pages+0xc2>
		uint32 ret = allocate_frame(&dest_frame);
		map_frame(page_directory, dest_frame, i,source_perm);

		new_source_va += PAGE_SIZE;
	}
	return 0;
f01088c7:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01088cc:	c9                   	leave  
f01088cd:	c3                   	ret    

f01088ce <copy_paste_chunk>:
//===============================
//This function should copy-paste the given size from source_va to dest_va
//if the page table at any destination page in the range is not exist, it should create it
//Hint: use ROUNDDOWN/ROUNDUP macros to align the addresses
int copy_paste_chunk(uint32* page_directory, uint32 source_va, uint32 dest_va, uint32 size)
{
f01088ce:	55                   	push   %ebp
f01088cf:	89 e5                	mov    %esp,%ebp
f01088d1:	83 ec 38             	sub    $0x38,%esp
	//TODO: [PROJECT MS2] [CHUNK OPERATIONS] copy_paste_chunk
	// Write your code here, remove the panic and write your code
	//panic("copy_paste_chunk() is not implemented yet...!!");
	uint32 *page_table=NULL;
f01088d4:	c7 45 d0 00 00 00 00 	movl   $0x0,-0x30(%ebp)
	uint32 new_dest_va = dest_va;
f01088db:	8b 45 10             	mov    0x10(%ebp),%eax
f01088de:	89 45 e0             	mov    %eax,-0x20(%ebp)
	uint32 new_source_va = source_va;
f01088e1:	8b 45 0c             	mov    0xc(%ebp),%eax
f01088e4:	89 45 f4             	mov    %eax,-0xc(%ebp)
	for(uint32 i=dest_va;i<dest_va+size ;i+=PAGE_SIZE)
f01088e7:	8b 45 10             	mov    0x10(%ebp),%eax
f01088ea:	89 45 f0             	mov    %eax,-0x10(%ebp)
f01088ed:	e9 d1 00 00 00       	jmp    f01089c3 <copy_paste_chunk+0xf5>
	{
	   get_page_table(page_directory,i,&page_table);
f01088f2:	83 ec 04             	sub    $0x4,%esp
f01088f5:	8d 45 d0             	lea    -0x30(%ebp),%eax
f01088f8:	50                   	push   %eax
f01088f9:	ff 75 f0             	pushl  -0x10(%ebp)
f01088fc:	ff 75 08             	pushl  0x8(%ebp)
f01088ff:	e8 ad e1 ff ff       	call   f0106ab1 <get_page_table>
f0108904:	83 c4 10             	add    $0x10,%esp
	   if(page_table==NULL)
f0108907:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010890a:	85 c0                	test   %eax,%eax
f010890c:	75 14                	jne    f0108922 <copy_paste_chunk+0x54>
		   page_table=create_page_table(page_directory,i);
f010890e:	83 ec 08             	sub    $0x8,%esp
f0108911:	ff 75 f0             	pushl  -0x10(%ebp)
f0108914:	ff 75 08             	pushl  0x8(%ebp)
f0108917:	e8 eb e2 ff ff       	call   f0106c07 <create_page_table>
f010891c:	83 c4 10             	add    $0x10,%esp
f010891f:	89 45 d0             	mov    %eax,-0x30(%ebp)

	   struct FrameInfo *frame_info=get_frame_info(page_directory,i,&page_table);
f0108922:	83 ec 04             	sub    $0x4,%esp
f0108925:	8d 45 d0             	lea    -0x30(%ebp),%eax
f0108928:	50                   	push   %eax
f0108929:	ff 75 f0             	pushl  -0x10(%ebp)
f010892c:	ff 75 08             	pushl  0x8(%ebp)
f010892f:	e8 d2 e4 ff ff       	call   f0106e06 <get_frame_info>
f0108934:	83 c4 10             	add    $0x10,%esp
f0108937:	89 45 cc             	mov    %eax,-0x34(%ebp)
	   uint32 perm =pt_get_page_permissions(page_directory,i);
f010893a:	83 ec 08             	sub    $0x8,%esp
f010893d:	ff 75 f0             	pushl  -0x10(%ebp)
f0108940:	ff 75 08             	pushl  0x8(%ebp)
f0108943:	e8 19 f3 ff ff       	call   f0107c61 <pt_get_page_permissions>
f0108948:	83 c4 10             	add    $0x10,%esp
f010894b:	89 45 dc             	mov    %eax,-0x24(%ebp)

	   if((frame_info != NULL) && (( perm & PERM_WRITEABLE) !=PERM_WRITEABLE))
f010894e:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0108951:	85 c0                	test   %eax,%eax
f0108953:	74 14                	je     f0108969 <copy_paste_chunk+0x9b>
f0108955:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0108958:	83 e0 02             	and    $0x2,%eax
f010895b:	85 c0                	test   %eax,%eax
f010895d:	75 0a                	jne    f0108969 <copy_paste_chunk+0x9b>
			return -1;
f010895f:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
f0108964:	e9 a7 00 00 00       	jmp    f0108a10 <copy_paste_chunk+0x142>
	   else
	   {
		   if(frame_info == NULL)
f0108969:	8b 45 cc             	mov    -0x34(%ebp),%eax
f010896c:	85 c0                	test   %eax,%eax
f010896e:	75 45                	jne    f01089b5 <copy_paste_chunk+0xe7>
		   {
			   uint32 perms =pt_get_page_permissions(page_directory,new_source_va);
f0108970:	83 ec 08             	sub    $0x8,%esp
f0108973:	ff 75 f4             	pushl  -0xc(%ebp)
f0108976:	ff 75 08             	pushl  0x8(%ebp)
f0108979:	e8 e3 f2 ff ff       	call   f0107c61 <pt_get_page_permissions>
f010897e:	83 c4 10             	add    $0x10,%esp
f0108981:	89 45 d8             	mov    %eax,-0x28(%ebp)
			   uint32 user_perm = (perms & PERM_USER)|PERM_WRITEABLE;
f0108984:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0108987:	83 e0 04             	and    $0x4,%eax
f010898a:	83 c8 02             	or     $0x2,%eax
f010898d:	89 45 d4             	mov    %eax,-0x2c(%ebp)
			   allocate_frame(&frame_info);
f0108990:	83 ec 0c             	sub    $0xc,%esp
f0108993:	8d 45 cc             	lea    -0x34(%ebp),%eax
f0108996:	50                   	push   %eax
f0108997:	e8 56 df ff ff       	call   f01068f2 <allocate_frame>
f010899c:	83 c4 10             	add    $0x10,%esp
			   map_frame(page_directory,frame_info,i,user_perm);
f010899f:	8b 55 d4             	mov    -0x2c(%ebp),%edx
f01089a2:	8b 45 cc             	mov    -0x34(%ebp),%eax
f01089a5:	52                   	push   %edx
f01089a6:	ff 75 f0             	pushl  -0x10(%ebp)
f01089a9:	50                   	push   %eax
f01089aa:	ff 75 08             	pushl  0x8(%ebp)
f01089ad:	e8 8f e3 ff ff       	call   f0106d41 <map_frame>
f01089b2:	83 c4 10             	add    $0x10,%esp
		   }
	   }
	   new_source_va += PAGE_SIZE;
f01089b5:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
	// Write your code here, remove the panic and write your code
	//panic("copy_paste_chunk() is not implemented yet...!!");
	uint32 *page_table=NULL;
	uint32 new_dest_va = dest_va;
	uint32 new_source_va = source_va;
	for(uint32 i=dest_va;i<dest_va+size ;i+=PAGE_SIZE)
f01089bc:	81 45 f0 00 10 00 00 	addl   $0x1000,-0x10(%ebp)
f01089c3:	8b 55 10             	mov    0x10(%ebp),%edx
f01089c6:	8b 45 14             	mov    0x14(%ebp),%eax
f01089c9:	01 d0                	add    %edx,%eax
f01089cb:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f01089ce:	0f 87 1e ff ff ff    	ja     f01088f2 <copy_paste_chunk+0x24>
			   map_frame(page_directory,frame_info,i,user_perm);
		   }
	   }
	   new_source_va += PAGE_SIZE;
	}
	uint32 *frame = (uint32*)dest_va;
f01089d4:	8b 45 10             	mov    0x10(%ebp),%eax
f01089d7:	89 45 ec             	mov    %eax,-0x14(%ebp)
    uint32 *page = (uint32*)source_va;
f01089da:	8b 45 0c             	mov    0xc(%ebp),%eax
f01089dd:	89 45 e8             	mov    %eax,-0x18(%ebp)
    for (uint32 i = source_va; i < source_va+size ;i+=4)
f01089e0:	8b 45 0c             	mov    0xc(%ebp),%eax
f01089e3:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f01089e6:	eb 16                	jmp    f01089fe <copy_paste_chunk+0x130>
    {
	    *frame= *page;
f01089e8:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01089eb:	8b 10                	mov    (%eax),%edx
f01089ed:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01089f0:	89 10                	mov    %edx,(%eax)
	    frame++;
f01089f2:	83 45 ec 04          	addl   $0x4,-0x14(%ebp)
	    page++;
f01089f6:	83 45 e8 04          	addl   $0x4,-0x18(%ebp)
	   }
	   new_source_va += PAGE_SIZE;
	}
	uint32 *frame = (uint32*)dest_va;
    uint32 *page = (uint32*)source_va;
    for (uint32 i = source_va; i < source_va+size ;i+=4)
f01089fa:	83 45 e4 04          	addl   $0x4,-0x1c(%ebp)
f01089fe:	8b 55 0c             	mov    0xc(%ebp),%edx
f0108a01:	8b 45 14             	mov    0x14(%ebp),%eax
f0108a04:	01 d0                	add    %edx,%eax
f0108a06:	3b 45 e4             	cmp    -0x1c(%ebp),%eax
f0108a09:	77 dd                	ja     f01089e8 <copy_paste_chunk+0x11a>
    {
	    *frame= *page;
	    frame++;
	    page++;
    }
	return 0;
f0108a0b:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0108a10:	c9                   	leave  
f0108a11:	c3                   	ret    

f0108a12 <share_chunk>:
// 3) SHARE RANGE IN RAM:
//===============================
//This function should share the given size from dest_va with the source_va
//Hint: use ROUNDDOWN/ROUNDUP macros to align the addresses
int share_chunk(uint32* page_directory, uint32 source_va,uint32 dest_va, uint32 size, uint32 perms)
{
f0108a12:	55                   	push   %ebp
f0108a13:	89 e5                	mov    %esp,%ebp
f0108a15:	83 ec 38             	sub    $0x38,%esp
	//TODO: [PROJECT MS2] [CHUNK OPERATIONS] share_chunk
	// Write your code here, remove the panic and write your code
	uint32 *page_table=NULL;
f0108a18:	c7 45 d4 00 00 00 00 	movl   $0x0,-0x2c(%ebp)
    uint32 va_dest=ROUNDDOWN(dest_va,PAGE_SIZE);
f0108a1f:	8b 45 10             	mov    0x10(%ebp),%eax
f0108a22:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0108a25:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0108a28:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0108a2d:	89 45 ec             	mov    %eax,-0x14(%ebp)
    uint32 max_va_des=ROUNDUP(dest_va+size,PAGE_SIZE);
f0108a30:	c7 45 e8 00 10 00 00 	movl   $0x1000,-0x18(%ebp)
f0108a37:	8b 55 10             	mov    0x10(%ebp),%edx
f0108a3a:	8b 45 14             	mov    0x14(%ebp),%eax
f0108a3d:	01 c2                	add    %eax,%edx
f0108a3f:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0108a42:	01 d0                	add    %edx,%eax
f0108a44:	48                   	dec    %eax
f0108a45:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f0108a48:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0108a4b:	ba 00 00 00 00       	mov    $0x0,%edx
f0108a50:	f7 75 e8             	divl   -0x18(%ebp)
f0108a53:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0108a56:	29 d0                	sub    %edx,%eax
f0108a58:	89 45 e0             	mov    %eax,-0x20(%ebp)



   for(uint32 i=va_dest;i<max_va_des ;i+=PAGE_SIZE)
f0108a5b:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0108a5e:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0108a61:	e9 ac 00 00 00       	jmp    f0108b12 <share_chunk+0x100>
    {
        get_page_table(page_directory,i,&page_table);
f0108a66:	83 ec 04             	sub    $0x4,%esp
f0108a69:	8d 45 d4             	lea    -0x2c(%ebp),%eax
f0108a6c:	50                   	push   %eax
f0108a6d:	ff 75 f4             	pushl  -0xc(%ebp)
f0108a70:	ff 75 08             	pushl  0x8(%ebp)
f0108a73:	e8 39 e0 ff ff       	call   f0106ab1 <get_page_table>
f0108a78:	83 c4 10             	add    $0x10,%esp
        if(page_table==NULL)
f0108a7b:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0108a7e:	85 c0                	test   %eax,%eax
f0108a80:	75 14                	jne    f0108a96 <share_chunk+0x84>
           page_table=create_page_table(page_directory,i);
f0108a82:	83 ec 08             	sub    $0x8,%esp
f0108a85:	ff 75 f4             	pushl  -0xc(%ebp)
f0108a88:	ff 75 08             	pushl  0x8(%ebp)
f0108a8b:	e8 77 e1 ff ff       	call   f0106c07 <create_page_table>
f0108a90:	83 c4 10             	add    $0x10,%esp
f0108a93:	89 45 d4             	mov    %eax,-0x2c(%ebp)



      struct FrameInfo *frame_info=get_frame_info(page_directory,i,&page_table);
f0108a96:	83 ec 04             	sub    $0x4,%esp
f0108a99:	8d 45 d4             	lea    -0x2c(%ebp),%eax
f0108a9c:	50                   	push   %eax
f0108a9d:	ff 75 f4             	pushl  -0xc(%ebp)
f0108aa0:	ff 75 08             	pushl  0x8(%ebp)
f0108aa3:	e8 5e e3 ff ff       	call   f0106e06 <get_frame_info>
f0108aa8:	83 c4 10             	add    $0x10,%esp
f0108aab:	89 45 dc             	mov    %eax,-0x24(%ebp)
       if (frame_info != NULL)
f0108aae:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f0108ab2:	74 07                	je     f0108abb <share_chunk+0xa9>
           return -1;
f0108ab4:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
f0108ab9:	eb 68                	jmp    f0108b23 <share_chunk+0x111>



       uint32 *page_table_source = NULL;
f0108abb:	c7 45 d0 00 00 00 00 	movl   $0x0,-0x30(%ebp)
        get_page_table(page_directory,source_va,&page_table_source);
f0108ac2:	83 ec 04             	sub    $0x4,%esp
f0108ac5:	8d 45 d0             	lea    -0x30(%ebp),%eax
f0108ac8:	50                   	push   %eax
f0108ac9:	ff 75 0c             	pushl  0xc(%ebp)
f0108acc:	ff 75 08             	pushl  0x8(%ebp)
f0108acf:	e8 dd df ff ff       	call   f0106ab1 <get_page_table>
f0108ad4:	83 c4 10             	add    $0x10,%esp
        struct FrameInfo *page_info=get_frame_info(page_directory,source_va,&page_table_source);
f0108ad7:	83 ec 04             	sub    $0x4,%esp
f0108ada:	8d 45 d0             	lea    -0x30(%ebp),%eax
f0108add:	50                   	push   %eax
f0108ade:	ff 75 0c             	pushl  0xc(%ebp)
f0108ae1:	ff 75 08             	pushl  0x8(%ebp)
f0108ae4:	e8 1d e3 ff ff       	call   f0106e06 <get_frame_info>
f0108ae9:	83 c4 10             	add    $0x10,%esp
f0108aec:	89 45 d8             	mov    %eax,-0x28(%ebp)



       map_frame(page_directory,page_info,i,perms);
f0108aef:	8b 45 18             	mov    0x18(%ebp),%eax
f0108af2:	50                   	push   %eax
f0108af3:	ff 75 f4             	pushl  -0xc(%ebp)
f0108af6:	ff 75 d8             	pushl  -0x28(%ebp)
f0108af9:	ff 75 08             	pushl  0x8(%ebp)
f0108afc:	e8 40 e2 ff ff       	call   f0106d41 <map_frame>
f0108b01:	83 c4 10             	add    $0x10,%esp



       source_va += PAGE_SIZE;
f0108b04:	81 45 0c 00 10 00 00 	addl   $0x1000,0xc(%ebp)
    uint32 va_dest=ROUNDDOWN(dest_va,PAGE_SIZE);
    uint32 max_va_des=ROUNDUP(dest_va+size,PAGE_SIZE);



   for(uint32 i=va_dest;i<max_va_des ;i+=PAGE_SIZE)
f0108b0b:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
f0108b12:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0108b15:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f0108b18:	0f 82 48 ff ff ff    	jb     f0108a66 <share_chunk+0x54>



       source_va += PAGE_SIZE;
    }
    return 0;
f0108b1e:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0108b23:	c9                   	leave  
f0108b24:	c3                   	ret    

f0108b25 <allocate_chunk>:
// 4) ALLOCATE CHUNK IN RAM:
//===============================
//This function should allocate in RAM the given range [va, va+size)
//Hint: use ROUNDDOWN/ROUNDUP macros to align the addresses
int allocate_chunk(uint32* page_directory, uint32 va, uint32 size, uint32 perms)
{
f0108b25:	55                   	push   %ebp
f0108b26:	89 e5                	mov    %esp,%ebp
f0108b28:	83 ec 38             	sub    $0x38,%esp
	//TODO: [PROJECT MS2] [CHUNK OPERATIONS] allocate_chunk
	// Write your code here, remove the panic and write your code
	uint32 virtual_address=0;
f0108b2b:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	uint32 range_page=va+size;
f0108b32:	8b 55 0c             	mov    0xc(%ebp),%edx
f0108b35:	8b 45 10             	mov    0x10(%ebp),%eax
f0108b38:	01 d0                	add    %edx,%eax
f0108b3a:	89 45 ec             	mov    %eax,-0x14(%ebp)
	uint32 virtual_range=0;
f0108b3d:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
	struct FrameInfo *sb_chunck= NULL ;
f0108b44:	c7 45 d0 00 00 00 00 	movl   $0x0,-0x30(%ebp)
	uint32 *page_table_point=NULL;
f0108b4b:	c7 45 cc 00 00 00 00 	movl   $0x0,-0x34(%ebp)
    uint32 result=0;
f0108b52:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)

	virtual_address=ROUNDDOWN(va,PAGE_SIZE);
f0108b59:	8b 45 0c             	mov    0xc(%ebp),%eax
f0108b5c:	89 45 e0             	mov    %eax,-0x20(%ebp)
f0108b5f:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0108b62:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0108b67:	89 45 f0             	mov    %eax,-0x10(%ebp)
	virtual_range=ROUNDUP(range_page,PAGE_SIZE);
f0108b6a:	c7 45 dc 00 10 00 00 	movl   $0x1000,-0x24(%ebp)
f0108b71:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0108b74:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0108b77:	01 d0                	add    %edx,%eax
f0108b79:	48                   	dec    %eax
f0108b7a:	89 45 d8             	mov    %eax,-0x28(%ebp)
f0108b7d:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0108b80:	ba 00 00 00 00       	mov    $0x0,%edx
f0108b85:	f7 75 dc             	divl   -0x24(%ebp)
f0108b88:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0108b8b:	29 d0                	sub    %edx,%eax
f0108b8d:	89 45 e8             	mov    %eax,-0x18(%ebp)
	uint32 new_virtual_address;
	for(uint32 count=virtual_address;count<virtual_range;count+=PAGE_SIZE)
f0108b90:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0108b93:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0108b96:	e9 9d 00 00 00       	jmp    f0108c38 <allocate_chunk+0x113>
	{
		new_virtual_address=count;
f0108b9b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0108b9e:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		get_page_table(page_directory,new_virtual_address,&page_table_point);
f0108ba1:	83 ec 04             	sub    $0x4,%esp
f0108ba4:	8d 45 cc             	lea    -0x34(%ebp),%eax
f0108ba7:	50                   	push   %eax
f0108ba8:	ff 75 d4             	pushl  -0x2c(%ebp)
f0108bab:	ff 75 08             	pushl  0x8(%ebp)
f0108bae:	e8 fe de ff ff       	call   f0106ab1 <get_page_table>
f0108bb3:	83 c4 10             	add    $0x10,%esp
		if(page_table_point==NULL)
f0108bb6:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0108bb9:	85 c0                	test   %eax,%eax
f0108bbb:	75 14                	jne    f0108bd1 <allocate_chunk+0xac>
		{
		   page_table_point=create_page_table(page_directory,new_virtual_address);
f0108bbd:	83 ec 08             	sub    $0x8,%esp
f0108bc0:	ff 75 d4             	pushl  -0x2c(%ebp)
f0108bc3:	ff 75 08             	pushl  0x8(%ebp)
f0108bc6:	e8 3c e0 ff ff       	call   f0106c07 <create_page_table>
f0108bcb:	83 c4 10             	add    $0x10,%esp
f0108bce:	89 45 cc             	mov    %eax,-0x34(%ebp)
		}
	    sb_chunck=get_frame_info(page_directory,new_virtual_address,&page_table_point);
f0108bd1:	83 ec 04             	sub    $0x4,%esp
f0108bd4:	8d 45 cc             	lea    -0x34(%ebp),%eax
f0108bd7:	50                   	push   %eax
f0108bd8:	ff 75 d4             	pushl  -0x2c(%ebp)
f0108bdb:	ff 75 08             	pushl  0x8(%ebp)
f0108bde:	e8 23 e2 ff ff       	call   f0106e06 <get_frame_info>
f0108be3:	83 c4 10             	add    $0x10,%esp
f0108be6:	89 45 d0             	mov    %eax,-0x30(%ebp)
		if(sb_chunck!=NULL)
f0108be9:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0108bec:	85 c0                	test   %eax,%eax
f0108bee:	74 07                	je     f0108bf7 <allocate_chunk+0xd2>
		{
			return -1;
f0108bf0:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
f0108bf5:	eb 52                	jmp    f0108c49 <allocate_chunk+0x124>
		}
	    result= allocate_frame(&sb_chunck);
f0108bf7:	83 ec 0c             	sub    $0xc,%esp
f0108bfa:	8d 45 d0             	lea    -0x30(%ebp),%eax
f0108bfd:	50                   	push   %eax
f0108bfe:	e8 ef dc ff ff       	call   f01068f2 <allocate_frame>
f0108c03:	83 c4 10             	add    $0x10,%esp
f0108c06:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		if(result != E_NO_MEM)
f0108c09:	83 7d e4 fc          	cmpl   $0xfffffffc,-0x1c(%ebp)
f0108c0d:	74 22                	je     f0108c31 <allocate_chunk+0x10c>
		{
			sb_chunck->va = new_virtual_address;
f0108c0f:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0108c12:	8b 55 d4             	mov    -0x2c(%ebp),%edx
f0108c15:	89 50 0c             	mov    %edx,0xc(%eax)
			result=map_frame(page_directory,sb_chunck,new_virtual_address,perms);
f0108c18:	8b 55 14             	mov    0x14(%ebp),%edx
f0108c1b:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0108c1e:	52                   	push   %edx
f0108c1f:	ff 75 d4             	pushl  -0x2c(%ebp)
f0108c22:	50                   	push   %eax
f0108c23:	ff 75 08             	pushl  0x8(%ebp)
f0108c26:	e8 16 e1 ff ff       	call   f0106d41 <map_frame>
f0108c2b:	83 c4 10             	add    $0x10,%esp
f0108c2e:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    uint32 result=0;

	virtual_address=ROUNDDOWN(va,PAGE_SIZE);
	virtual_range=ROUNDUP(range_page,PAGE_SIZE);
	uint32 new_virtual_address;
	for(uint32 count=virtual_address;count<virtual_range;count+=PAGE_SIZE)
f0108c31:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
f0108c38:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0108c3b:	3b 45 e8             	cmp    -0x18(%ebp),%eax
f0108c3e:	0f 82 57 ff ff ff    	jb     f0108b9b <allocate_chunk+0x76>
		{
			sb_chunck->va = new_virtual_address;
			result=map_frame(page_directory,sb_chunck,new_virtual_address,perms);
		}
	}
	return 0;
f0108c44:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0108c49:	c9                   	leave  
f0108c4a:	c3                   	ret    

f0108c4b <calculate_allocated_space>:
/*BONUS*/
//=====================================
// 5) CALCULATE ALLOCATED SPACE IN RAM:
//=====================================
void calculate_allocated_space(uint32* page_directory, uint32 sva, uint32 eva, uint32 *num_tables, uint32 *num_pages)
{
f0108c4b:	55                   	push   %ebp
f0108c4c:	89 e5                	mov    %esp,%ebp
f0108c4e:	83 ec 38             	sub    $0x38,%esp
	//TODO: [PROJECT MS2 - BONUS] [CHUNK OPERATIONS] calculate_allocated_space
	// Write your code here, remove the panic and write your code
	//panic("calculate_allocated_space() is not implemented yet...!!");
	uint32 start_address_pt = ROUNDDOWN(sva, PAGE_SIZE*1024);
f0108c51:	8b 45 0c             	mov    0xc(%ebp),%eax
f0108c54:	89 45 e8             	mov    %eax,-0x18(%ebp)
f0108c57:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0108c5a:	25 00 00 c0 ff       	and    $0xffc00000,%eax
f0108c5f:	89 45 f4             	mov    %eax,-0xc(%ebp)
	uint32 start_address = ROUNDDOWN(sva, PAGE_SIZE);
f0108c62:	8b 45 0c             	mov    0xc(%ebp),%eax
f0108c65:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f0108c68:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0108c6b:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0108c70:	89 45 f0             	mov    %eax,-0x10(%ebp)
	uint32 end_address = ROUNDUP(eva, PAGE_SIZE);
f0108c73:	c7 45 e0 00 10 00 00 	movl   $0x1000,-0x20(%ebp)
f0108c7a:	8b 55 10             	mov    0x10(%ebp),%edx
f0108c7d:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0108c80:	01 d0                	add    %edx,%eax
f0108c82:	48                   	dec    %eax
f0108c83:	89 45 dc             	mov    %eax,-0x24(%ebp)
f0108c86:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0108c89:	ba 00 00 00 00       	mov    $0x0,%edx
f0108c8e:	f7 75 e0             	divl   -0x20(%ebp)
f0108c91:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0108c94:	29 d0                	sub    %edx,%eax
f0108c96:	89 45 d8             	mov    %eax,-0x28(%ebp)
	uint32 size = end_address - start_address;
f0108c99:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0108c9c:	2b 45 f0             	sub    -0x10(%ebp),%eax
f0108c9f:	89 45 d4             	mov    %eax,-0x2c(%ebp)
	uint32 check = 0;
f0108ca2:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
	do
		{
			if(start_address_pt %(PAGE_SIZE*1024) == 0)
f0108ca9:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0108cac:	25 ff ff 3f 00       	and    $0x3fffff,%eax
f0108cb1:	85 c0                	test   %eax,%eax
f0108cb3:	75 37                	jne    f0108cec <calculate_allocated_space+0xa1>
			{
				uint32 *ptr_page_table = NULL;
f0108cb5:	c7 45 d0 00 00 00 00 	movl   $0x0,-0x30(%ebp)
				get_page_table(page_directory, start_address_pt, &ptr_page_table);
f0108cbc:	83 ec 04             	sub    $0x4,%esp
f0108cbf:	8d 45 d0             	lea    -0x30(%ebp),%eax
f0108cc2:	50                   	push   %eax
f0108cc3:	ff 75 f4             	pushl  -0xc(%ebp)
f0108cc6:	ff 75 08             	pushl  0x8(%ebp)
f0108cc9:	e8 e3 dd ff ff       	call   f0106ab1 <get_page_table>
f0108cce:	83 c4 10             	add    $0x10,%esp
				if(ptr_page_table != NULL)
f0108cd1:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0108cd4:	85 c0                	test   %eax,%eax
f0108cd6:	74 14                	je     f0108cec <calculate_allocated_space+0xa1>
				{
					(*num_tables)++;
f0108cd8:	8b 45 14             	mov    0x14(%ebp),%eax
f0108cdb:	8b 00                	mov    (%eax),%eax
f0108cdd:	8d 50 01             	lea    0x1(%eax),%edx
f0108ce0:	8b 45 14             	mov    0x14(%ebp),%eax
f0108ce3:	89 10                	mov    %edx,(%eax)
					check = 1;
f0108ce5:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
				}
			}
			if(check == 1)
f0108cec:	83 7d ec 01          	cmpl   $0x1,-0x14(%ebp)
f0108cf0:	75 2d                	jne    f0108d1f <calculate_allocated_space+0xd4>
			{
				uint32 *ptr_page = NULL;
f0108cf2:	c7 45 cc 00 00 00 00 	movl   $0x0,-0x34(%ebp)
				if (get_frame_info(page_directory, start_address, &ptr_page) != 0)
f0108cf9:	83 ec 04             	sub    $0x4,%esp
f0108cfc:	8d 45 cc             	lea    -0x34(%ebp),%eax
f0108cff:	50                   	push   %eax
f0108d00:	ff 75 f0             	pushl  -0x10(%ebp)
f0108d03:	ff 75 08             	pushl  0x8(%ebp)
f0108d06:	e8 fb e0 ff ff       	call   f0106e06 <get_frame_info>
f0108d0b:	83 c4 10             	add    $0x10,%esp
f0108d0e:	85 c0                	test   %eax,%eax
f0108d10:	74 0d                	je     f0108d1f <calculate_allocated_space+0xd4>
					(*num_pages)++;
f0108d12:	8b 45 18             	mov    0x18(%ebp),%eax
f0108d15:	8b 00                	mov    (%eax),%eax
f0108d17:	8d 50 01             	lea    0x1(%eax),%edx
f0108d1a:	8b 45 18             	mov    0x18(%ebp),%eax
f0108d1d:	89 10                	mov    %edx,(%eax)
			}
			start_address += PAGE_SIZE;
f0108d1f:	81 45 f0 00 10 00 00 	addl   $0x1000,-0x10(%ebp)
			start_address_pt = start_address;
f0108d26:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0108d29:	89 45 f4             	mov    %eax,-0xc(%ebp)
		} while (start_address < sva+size);
f0108d2c:	8b 55 0c             	mov    0xc(%ebp),%edx
f0108d2f:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0108d32:	01 d0                	add    %edx,%eax
f0108d34:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0108d37:	0f 87 6c ff ff ff    	ja     f0108ca9 <calculate_allocated_space+0x5e>
}
f0108d3d:	90                   	nop
f0108d3e:	c9                   	leave  
f0108d3f:	c3                   	ret    

f0108d40 <calculate_required_frames>:
// calculate_required_frames:
// calculates the new allocation size required for given address+size,
// we are not interested in knowing if pages or tables actually exist in memory or the page file,
// we are interested in knowing whether they are allocated or not.
uint32 calculate_required_frames(uint32* page_directory, uint32 sva, uint32 size)
{
f0108d40:	55                   	push   %ebp
f0108d41:	89 e5                	mov    %esp,%ebp
f0108d43:	83 ec 28             	sub    $0x28,%esp
	//TODO: [PROJECT MS2 - BONUS] [CHUNK OPERATIONS] calculate_required_frames
	// Write your code here, remove the panic and write your code
	//panic("calculate_required_frames() is not implemented yet...!!");
	uint32 number_of_tables = 0;
f0108d46:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	uint32 number_of_pages = 0;
f0108d4d:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	uint32 start_address_pt = ROUNDDOWN(sva, PAGE_SIZE*1024);
f0108d54:	8b 45 0c             	mov    0xc(%ebp),%eax
f0108d57:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f0108d5a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0108d5d:	25 00 00 c0 ff       	and    $0xffc00000,%eax
f0108d62:	89 45 ec             	mov    %eax,-0x14(%ebp)
	uint32 start_address = ROUNDDOWN(sva, PAGE_SIZE);
f0108d65:	8b 45 0c             	mov    0xc(%ebp),%eax
f0108d68:	89 45 e0             	mov    %eax,-0x20(%ebp)
f0108d6b:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0108d6e:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0108d73:	89 45 e8             	mov    %eax,-0x18(%ebp)
	do
	{
		if(start_address_pt %(PAGE_SIZE*1024) == 0)
f0108d76:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0108d79:	25 ff ff 3f 00       	and    $0x3fffff,%eax
f0108d7e:	85 c0                	test   %eax,%eax
f0108d80:	75 26                	jne    f0108da8 <calculate_required_frames+0x68>
		{
			uint32 *ptr_page_table = NULL;
f0108d82:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
			get_page_table(page_directory, start_address_pt, &ptr_page_table);
f0108d89:	83 ec 04             	sub    $0x4,%esp
f0108d8c:	8d 45 d8             	lea    -0x28(%ebp),%eax
f0108d8f:	50                   	push   %eax
f0108d90:	ff 75 ec             	pushl  -0x14(%ebp)
f0108d93:	ff 75 08             	pushl  0x8(%ebp)
f0108d96:	e8 16 dd ff ff       	call   f0106ab1 <get_page_table>
f0108d9b:	83 c4 10             	add    $0x10,%esp
			if(ptr_page_table == NULL)
f0108d9e:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0108da1:	85 c0                	test   %eax,%eax
f0108da3:	75 03                	jne    f0108da8 <calculate_required_frames+0x68>
				number_of_tables++;
f0108da5:	ff 45 f4             	incl   -0xc(%ebp)
		}
		uint32 *ptr_page = NULL;
f0108da8:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
	    if (get_frame_info(page_directory, start_address, &ptr_page) == 0)
f0108daf:	83 ec 04             	sub    $0x4,%esp
f0108db2:	8d 45 dc             	lea    -0x24(%ebp),%eax
f0108db5:	50                   	push   %eax
f0108db6:	ff 75 e8             	pushl  -0x18(%ebp)
f0108db9:	ff 75 08             	pushl  0x8(%ebp)
f0108dbc:	e8 45 e0 ff ff       	call   f0106e06 <get_frame_info>
f0108dc1:	83 c4 10             	add    $0x10,%esp
f0108dc4:	85 c0                	test   %eax,%eax
f0108dc6:	75 03                	jne    f0108dcb <calculate_required_frames+0x8b>
			number_of_pages++;
f0108dc8:	ff 45 f0             	incl   -0x10(%ebp)

	    start_address += PAGE_SIZE;
f0108dcb:	81 45 e8 00 10 00 00 	addl   $0x1000,-0x18(%ebp)
	    start_address_pt = start_address;
f0108dd2:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0108dd5:	89 45 ec             	mov    %eax,-0x14(%ebp)
	} while (start_address < sva+size);
f0108dd8:	8b 55 0c             	mov    0xc(%ebp),%edx
f0108ddb:	8b 45 10             	mov    0x10(%ebp),%eax
f0108dde:	01 d0                	add    %edx,%eax
f0108de0:	3b 45 e8             	cmp    -0x18(%ebp),%eax
f0108de3:	77 91                	ja     f0108d76 <calculate_required_frames+0x36>
	return number_of_tables + number_of_pages;
f0108de5:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0108de8:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0108deb:	01 d0                	add    %edx,%eax
}
f0108ded:	c9                   	leave  
f0108dee:	c3                   	ret    

f0108def <allocate_user_mem>:

//=====================================
// 1) ALLOCATE USER MEMORY:
//=====================================
void allocate_user_mem(struct Env* e, uint32 virtual_address, uint32 size)
{
f0108def:	55                   	push   %ebp
f0108df0:	89 e5                	mov    %esp,%ebp
f0108df2:	83 ec 08             	sub    $0x8,%esp
	// Write your code here, remove the panic and write your code
	panic("allocate_user_mem() is not implemented yet...!!");
f0108df5:	83 ec 04             	sub    $0x4,%esp
f0108df8:	68 98 65 13 f0       	push   $0xf0136598
f0108dfd:	68 25 01 00 00       	push   $0x125
f0108e02:	68 c8 65 13 f0       	push   $0xf01365c8
f0108e07:	e8 f9 73 ff ff       	call   f0100205 <_panic>

f0108e0c <free_user_mem>:

//=====================================
// 2) FREE USER MEMORY:
//=====================================
void free_user_mem(struct Env* e, uint32 virtual_address, uint32 size)
{
f0108e0c:	55                   	push   %ebp
f0108e0d:	89 e5                	mov    %esp,%ebp
f0108e0f:	83 ec 08             	sub    $0x8,%esp
	//TODO: [PROJECT MS3] [USER HEAP - KERNEL SIDE] free_user_mem
	// Write your code here, remove the panic and write your code
	panic("free_user_mem() is not implemented yet...!!");
f0108e12:	83 ec 04             	sub    $0x4,%esp
f0108e15:	68 e4 65 13 f0       	push   $0xf01365e4
f0108e1a:	68 2f 01 00 00       	push   $0x12f
f0108e1f:	68 c8 65 13 f0       	push   $0xf01365c8
f0108e24:	e8 dc 73 ff ff       	call   f0100205 <_panic>

f0108e29 <__free_user_mem_with_buffering>:

//=====================================
// 2) FREE USER MEMORY (BUFFERING):
//=====================================
void __free_user_mem_with_buffering(struct Env* e, uint32 virtual_address, uint32 size)
{
f0108e29:	55                   	push   %ebp
f0108e2a:	89 e5                	mov    %esp,%ebp
f0108e2c:	83 ec 08             	sub    $0x8,%esp
	// your code is here, remove the panic and write your code
	panic("__free_user_mem_with_buffering() is not implemented yet...!!");
f0108e2f:	83 ec 04             	sub    $0x4,%esp
f0108e32:	68 10 66 13 f0       	push   $0xf0136610
f0108e37:	68 3d 01 00 00       	push   $0x13d
f0108e3c:	68 c8 65 13 f0       	push   $0xf01365c8
f0108e41:	e8 bf 73 ff ff       	call   f0100205 <_panic>

f0108e46 <move_user_mem>:

//=====================================
// 3) MOVE USER MEMORY:
//=====================================
void move_user_mem(struct Env* e, uint32 src_virtual_address, uint32 dst_virtual_address, uint32 size)
{
f0108e46:	55                   	push   %ebp
f0108e47:	89 e5                	mov    %esp,%ebp
f0108e49:	83 ec 08             	sub    $0x8,%esp
	//TODO: [PROJECT MS3 - BONUS] [USER HEAP - KERNEL SIDE] move_user_mem
	//your code is here, remove the panic and write your code
	panic("move_user_mem() is not implemented yet...!!");
f0108e4c:	83 ec 04             	sub    $0x4,%esp
f0108e4f:	68 50 66 13 f0       	push   $0xf0136650
f0108e54:	68 4d 01 00 00       	push   $0x14d
f0108e59:	68 c8 65 13 f0       	push   $0xf01365c8
f0108e5e:	e8 a2 73 ff ff       	call   f0100205 <_panic>

f0108e63 <env_create>:
//===============================
// 1) CREATE NEW ENV & LOAD IT:
//===============================
// Allocates a new env and loads the named user program into it.
struct Env* env_create(char* user_program_name, unsigned int page_WS_size, unsigned int LRU_second_list_size, unsigned int percent_WS_pages_to_remove)
{
f0108e63:	55                   	push   %ebp
f0108e64:	89 e5                	mov    %esp,%ebp
f0108e66:	57                   	push   %edi
f0108e67:	56                   	push   %esi
f0108e68:	53                   	push   %ebx
f0108e69:	81 ec ec 00 00 00    	sub    $0xec,%esp
	//[1] get pointer to the start of the "user_program_name" program in memory
	// Hint: use "get_user_program_info" function,
	// you should set the following "ptr_program_start" by the start address of the user program
	uint8* ptr_program_start = 0;
f0108e6f:	c7 45 b8 00 00 00 00 	movl   $0x0,-0x48(%ebp)

	struct UserProgramInfo* ptr_user_program_info = get_user_program_info(user_program_name);
f0108e76:	83 ec 0c             	sub    $0xc,%esp
f0108e79:	ff 75 08             	pushl  0x8(%ebp)
f0108e7c:	e8 0b 22 00 00       	call   f010b08c <get_user_program_info>
f0108e81:	83 c4 10             	add    $0x10,%esp
f0108e84:	89 45 b4             	mov    %eax,-0x4c(%ebp)
	if(ptr_user_program_info == 0) return NULL;
f0108e87:	83 7d b4 00          	cmpl   $0x0,-0x4c(%ebp)
f0108e8b:	75 0a                	jne    f0108e97 <env_create+0x34>
f0108e8d:	b8 00 00 00 00       	mov    $0x0,%eax
f0108e92:	e9 cd 0b 00 00       	jmp    f0109a64 <env_create+0xc01>
	ptr_program_start = ptr_user_program_info->ptr_start ;
f0108e97:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0108e9a:	8b 40 08             	mov    0x8(%eax),%eax
f0108e9d:	89 45 b8             	mov    %eax,-0x48(%ebp)


	//[2] allocate new environment, (from the free environment list)
	//if there's no one, return NULL
	// Hint: use "allocate_environment" function
	struct Env* e = NULL;
f0108ea0:	c7 85 4c ff ff ff 00 	movl   $0x0,-0xb4(%ebp)
f0108ea7:	00 00 00 
	if(allocate_environment(&e) < 0)
f0108eaa:	83 ec 0c             	sub    $0xc,%esp
f0108ead:	8d 85 4c ff ff ff    	lea    -0xb4(%ebp),%eax
f0108eb3:	50                   	push   %eax
f0108eb4:	e8 d3 0e 00 00       	call   f0109d8c <allocate_environment>
f0108eb9:	83 c4 10             	add    $0x10,%esp
f0108ebc:	85 c0                	test   %eax,%eax
f0108ebe:	79 0a                	jns    f0108eca <env_create+0x67>
	{
		return 0;
f0108ec0:	b8 00 00 00 00       	mov    $0x0,%eax
f0108ec5:	e9 9a 0b 00 00       	jmp    f0109a64 <env_create+0xc01>
	}

	//[2.5 - 2012] Set program name inside the environment
	//e->prog_name = ptr_user_program_info->name ;
	//2017: changed to fixed size array to be abale to access it from user side
	if (strlen(ptr_user_program_info->name) < PROGNAMELEN)
f0108eca:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0108ecd:	8b 00                	mov    (%eax),%eax
f0108ecf:	83 ec 0c             	sub    $0xc,%esp
f0108ed2:	50                   	push   %eax
f0108ed3:	e8 1a 83 02 00       	call   f01311f2 <strlen>
f0108ed8:	83 c4 10             	add    $0x10,%esp
f0108edb:	83 f8 3f             	cmp    $0x3f,%eax
f0108ede:	7f 20                	jg     f0108f00 <env_create+0x9d>
		strcpy(e->prog_name, ptr_user_program_info->name);
f0108ee0:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0108ee3:	8b 00                	mov    (%eax),%eax
f0108ee5:	8b 95 4c ff ff ff    	mov    -0xb4(%ebp),%edx
f0108eeb:	81 c2 5c 05 00 00    	add    $0x55c,%edx
f0108ef1:	83 ec 08             	sub    $0x8,%esp
f0108ef4:	50                   	push   %eax
f0108ef5:	52                   	push   %edx
f0108ef6:	e8 46 83 02 00       	call   f0131241 <strcpy>
f0108efb:	83 c4 10             	add    $0x10,%esp
f0108efe:	eb 20                	jmp    f0108f20 <env_create+0xbd>
	else
		strncpy(e->prog_name, ptr_user_program_info->name, PROGNAMELEN-1);
f0108f00:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0108f03:	8b 00                	mov    (%eax),%eax
f0108f05:	8b 95 4c ff ff ff    	mov    -0xb4(%ebp),%edx
f0108f0b:	81 c2 5c 05 00 00    	add    $0x55c,%edx
f0108f11:	83 ec 04             	sub    $0x4,%esp
f0108f14:	6a 3f                	push   $0x3f
f0108f16:	50                   	push   %eax
f0108f17:	52                   	push   %edx
f0108f18:	e8 52 83 02 00       	call   f013126f <strncpy>
f0108f1d:	83 c4 10             	add    $0x10,%esp
	//REMEMBER: "allocate_frame" should always return a free frame
	uint32* ptr_user_page_directory;
	unsigned int phys_user_page_directory;
#if USE_KHEAP
	{
		ptr_user_page_directory = create_user_directory();
f0108f20:	e8 6d 0f 00 00       	call   f0109e92 <create_user_directory>
f0108f25:	89 45 b0             	mov    %eax,-0x50(%ebp)
		phys_user_page_directory = kheap_physical_address((uint32)ptr_user_page_directory);
f0108f28:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0108f2b:	83 ec 0c             	sub    $0xc,%esp
f0108f2e:	50                   	push   %eax
f0108f2f:	e8 6f eb ff ff       	call   f0107aa3 <kheap_physical_address>
f0108f34:	83 c4 10             	add    $0x10,%esp
f0108f37:	89 45 ac             	mov    %eax,-0x54(%ebp)
#endif
	//[4] initialize the new environment by the virtual address of the page directory
	// Hint: use "initialize_environment" function

	//2016
	e->page_WS_max_size = page_WS_size;
f0108f3a:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0108f40:	8b 55 0c             	mov    0xc(%ebp),%edx
f0108f43:	89 50 74             	mov    %edx,0x74(%eax)

	//2020
	if(isPageReplacmentAlgorithmLRU(PG_REP_LRU_LISTS_APPROX))
f0108f46:	83 ec 0c             	sub    $0xc,%esp
f0108f49:	6a 02                	push   $0x2
f0108f4b:	e8 f3 4d 00 00       	call   f010dd43 <isPageReplacmentAlgorithmLRU>
f0108f50:	83 c4 10             	add    $0x10,%esp
f0108f53:	85 c0                	test   %eax,%eax
f0108f55:	74 21                	je     f0108f78 <env_create+0x115>
	{
		e->SecondListSize = LRU_second_list_size;
f0108f57:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0108f5d:	8b 55 10             	mov    0x10(%ebp),%edx
f0108f60:	89 90 ec 05 00 00    	mov    %edx,0x5ec(%eax)
		e->ActiveListSize = page_WS_size - LRU_second_list_size;
f0108f66:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0108f6c:	8b 55 0c             	mov    0xc(%ebp),%edx
f0108f6f:	2b 55 10             	sub    0x10(%ebp),%edx
f0108f72:	89 90 e8 05 00 00    	mov    %edx,0x5e8(%eax)
	}

	//2018
	if (percent_WS_pages_to_remove == 0)	// If not entered as input, 0 as default value
f0108f78:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
f0108f7c:	75 12                	jne    f0108f90 <env_create+0x12d>
		e->percentage_of_WS_pages_to_be_removed = DEFAULT_PERCENT_OF_PAGE_WS_TO_REMOVE;
f0108f7e:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0108f84:	c7 80 a0 05 00 00 0a 	movl   $0xa,0x5a0(%eax)
f0108f8b:	00 00 00 
f0108f8e:	eb 0f                	jmp    f0108f9f <env_create+0x13c>
	else
		e->percentage_of_WS_pages_to_be_removed = percent_WS_pages_to_remove;
f0108f90:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0108f96:	8b 55 14             	mov    0x14(%ebp),%edx
f0108f99:	89 90 a0 05 00 00    	mov    %edx,0x5a0(%eax)

	initialize_environment(e, ptr_user_page_directory, phys_user_page_directory);
f0108f9f:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0108fa5:	83 ec 04             	sub    $0x4,%esp
f0108fa8:	ff 75 ac             	pushl  -0x54(%ebp)
f0108fab:	ff 75 b0             	pushl  -0x50(%ebp)
f0108fae:	50                   	push   %eax
f0108faf:	e8 fa 15 00 00       	call   f010a5ae <initialize_environment>
f0108fb4:	83 c4 10             	add    $0x10,%esp

static __inline uint32
rcr3(void)
{
	uint32 val;
	__asm __volatile("movl %%cr3,%0" : "=r" (val));
f0108fb7:	0f 20 d8             	mov    %cr3,%eax
f0108fba:	89 45 a0             	mov    %eax,-0x60(%ebp)
	return val;
f0108fbd:	8b 45 a0             	mov    -0x60(%ebp),%eax
	// 	usually size_in_file < or = size_in_memory
	//	4- uint8 *virtual_address: start virtual address that this segment should be copied to it

	//[6] switch to user page directory
	// Hint: use rcr3() and lcr3()
	uint32 kern_phys_pgdir = rcr3() ;
f0108fc0:	89 45 a4             	mov    %eax,-0x5c(%ebp)
	lcr3(e->env_cr3) ;
f0108fc3:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0108fc9:	8b 40 60             	mov    0x60(%eax),%eax
f0108fcc:	89 85 50 ff ff ff    	mov    %eax,-0xb0(%ebp)
}

static __inline void
lcr3(uint32 val)
{
	__asm __volatile("movl %0,%%cr3" : : "r" (val));
f0108fd2:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f0108fd8:	0f 22 d8             	mov    %eax,%cr3

	//[7] load each program segment into user virtual space
	struct ProgramSegment* seg = NULL;  //use inside PROGRAM_SEGMENT_FOREACH as current segment information
f0108fdb:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
	int segment_counter=0;
f0108fe2:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
	uint32 remaining_ws_pages = (e->page_WS_max_size)-1; // we are reserving 1 page of WS for the stack that will be allocated just before the end of this function
f0108fe9:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0108fef:	8b 40 74             	mov    0x74(%eax),%eax
f0108ff2:	48                   	dec    %eax
f0108ff3:	89 45 dc             	mov    %eax,-0x24(%ebp)
	uint32 lastTableNumber=0xffffffff;
f0108ff6:	c7 85 48 ff ff ff ff 	movl   $0xffffffff,-0xb8(%ebp)
f0108ffd:	ff ff ff 

	PROGRAM_SEGMENT_FOREACH(seg, ptr_program_start)
f0109000:	8d 85 08 ff ff ff    	lea    -0xf8(%ebp),%eax
f0109006:	83 ec 08             	sub    $0x8,%esp
f0109009:	ff 75 b8             	pushl  -0x48(%ebp)
f010900c:	50                   	push   %eax
f010900d:	e8 af 1d 00 00       	call   f010adc1 <PROGRAM_SEGMENT_FIRST>
f0109012:	83 c4 0c             	add    $0xc,%esp
f0109015:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f010901b:	8d 95 08 ff ff ff    	lea    -0xf8(%ebp),%edx
f0109021:	b9 05 00 00 00       	mov    $0x5,%ecx
f0109026:	89 c7                	mov    %eax,%edi
f0109028:	89 d6                	mov    %edx,%esi
f010902a:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
f010902c:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f0109032:	89 45 d8             	mov    %eax,-0x28(%ebp)
f0109035:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0109038:	8b 40 10             	mov    0x10(%eax),%eax
f010903b:	83 f8 ff             	cmp    $0xffffffff,%eax
f010903e:	75 07                	jne    f0109047 <env_create+0x1e4>
f0109040:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
f0109047:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010904a:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f010904d:	e9 15 03 00 00       	jmp    f0109367 <env_create+0x504>
	{
		segment_counter++;
f0109052:	ff 45 e0             	incl   -0x20(%ebp)
		LOG_STRING("===============================================================================");
		LOG_STATMENT(cprintf("SEGMENT #%d, size_in_file = %d, size_in_memory= %d, dest va = %x",segment_counter,seg->size_in_file,
				seg->size_in_memory, seg->virtual_address));
		LOG_STRING("===============================================================================");

		uint32 allocated_pages=0;
f0109055:	c7 85 30 ff ff ff 00 	movl   $0x0,-0xd0(%ebp)
f010905c:	00 00 00 
		program_segment_alloc_map_copy_workingset(e, seg, &allocated_pages, remaining_ws_pages, &lastTableNumber);
f010905f:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109065:	83 ec 0c             	sub    $0xc,%esp
f0109068:	8d 95 48 ff ff ff    	lea    -0xb8(%ebp),%edx
f010906e:	52                   	push   %edx
f010906f:	ff 75 dc             	pushl  -0x24(%ebp)
f0109072:	8d 95 30 ff ff ff    	lea    -0xd0(%ebp),%edx
f0109078:	52                   	push   %edx
f0109079:	ff 75 e4             	pushl  -0x1c(%ebp)
f010907c:	50                   	push   %eax
f010907d:	e8 4b 0e 00 00       	call   f0109ecd <program_segment_alloc_map_copy_workingset>
f0109082:	83 c4 20             	add    $0x20,%esp

		remaining_ws_pages -= allocated_pages;
f0109085:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f010908b:	29 45 dc             	sub    %eax,-0x24(%ebp)
		LOG_STATMENT(cprintf("SEGMENT: allocated pages in WS = %d",allocated_pages));
		LOG_STATMENT(cprintf("SEGMENT: remaining WS pages after allocation = %d",remaining_ws_pages));


		///[1] temporary initialize 1st page in memory then writing it on page file
		uint32 dataSrc_va = (uint32) seg->ptr_start;
f010908e:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0109091:	8b 00                	mov    (%eax),%eax
f0109093:	89 45 9c             	mov    %eax,-0x64(%ebp)
		uint32 seg_va = (uint32) seg->virtual_address ;
f0109096:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0109099:	8b 40 0c             	mov    0xc(%eax),%eax
f010909c:	89 45 98             	mov    %eax,-0x68(%ebp)

		uint32 start_first_page = ROUNDDOWN(seg_va , PAGE_SIZE);
f010909f:	8b 45 98             	mov    -0x68(%ebp),%eax
f01090a2:	89 45 94             	mov    %eax,-0x6c(%ebp)
f01090a5:	8b 45 94             	mov    -0x6c(%ebp),%eax
f01090a8:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f01090ad:	89 45 90             	mov    %eax,-0x70(%ebp)
		uint32 end_first_page = ROUNDUP(seg_va , PAGE_SIZE);
f01090b0:	c7 45 8c 00 10 00 00 	movl   $0x1000,-0x74(%ebp)
f01090b7:	8b 55 98             	mov    -0x68(%ebp),%edx
f01090ba:	8b 45 8c             	mov    -0x74(%ebp),%eax
f01090bd:	01 d0                	add    %edx,%eax
f01090bf:	48                   	dec    %eax
f01090c0:	89 45 88             	mov    %eax,-0x78(%ebp)
f01090c3:	8b 45 88             	mov    -0x78(%ebp),%eax
f01090c6:	ba 00 00 00 00       	mov    $0x0,%edx
f01090cb:	f7 75 8c             	divl   -0x74(%ebp)
f01090ce:	8b 45 88             	mov    -0x78(%ebp),%eax
f01090d1:	29 d0                	sub    %edx,%eax
f01090d3:	89 45 84             	mov    %eax,-0x7c(%ebp)
		uint32 offset_first_page = seg_va  - start_first_page ;
f01090d6:	8b 45 98             	mov    -0x68(%ebp),%eax
f01090d9:	2b 45 90             	sub    -0x70(%ebp),%eax
f01090dc:	89 45 80             	mov    %eax,-0x80(%ebp)

		memset(ptr_temp_page , 0, PAGE_SIZE);
f01090df:	a1 44 26 78 f0       	mov    0xf0782644,%eax
f01090e4:	83 ec 04             	sub    $0x4,%esp
f01090e7:	68 00 10 00 00       	push   $0x1000
f01090ec:	6a 00                	push   $0x0
f01090ee:	50                   	push   %eax
f01090ef:	e8 ec 82 02 00       	call   f01313e0 <memset>
f01090f4:	83 c4 10             	add    $0x10,%esp
		uint8 *src_ptr =  (uint8*) dataSrc_va;
f01090f7:	8b 45 9c             	mov    -0x64(%ebp),%eax
f01090fa:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		uint8 *dst_ptr =  (uint8*) (ptr_temp_page + offset_first_page);
f01090fd:	8b 15 44 26 78 f0    	mov    0xf0782644,%edx
f0109103:	8b 45 80             	mov    -0x80(%ebp),%eax
f0109106:	01 d0                	add    %edx,%eax
f0109108:	89 45 d0             	mov    %eax,-0x30(%ebp)
		int i;
		for (i = seg_va ; i < end_first_page ; i++, src_ptr++,dst_ptr++ )
f010910b:	8b 45 98             	mov    -0x68(%ebp),%eax
f010910e:	89 45 cc             	mov    %eax,-0x34(%ebp)
f0109111:	eb 13                	jmp    f0109126 <env_create+0x2c3>
		{
			*dst_ptr = *src_ptr ;
f0109113:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0109116:	8a 10                	mov    (%eax),%dl
f0109118:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010911b:	88 10                	mov    %dl,(%eax)

		memset(ptr_temp_page , 0, PAGE_SIZE);
		uint8 *src_ptr =  (uint8*) dataSrc_va;
		uint8 *dst_ptr =  (uint8*) (ptr_temp_page + offset_first_page);
		int i;
		for (i = seg_va ; i < end_first_page ; i++, src_ptr++,dst_ptr++ )
f010911d:	ff 45 cc             	incl   -0x34(%ebp)
f0109120:	ff 45 d4             	incl   -0x2c(%ebp)
f0109123:	ff 45 d0             	incl   -0x30(%ebp)
f0109126:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0109129:	3b 45 84             	cmp    -0x7c(%ebp),%eax
f010912c:	72 e5                	jb     f0109113 <env_create+0x2b0>
		{
			*dst_ptr = *src_ptr ;
		}

		if (pf_add_env_page(e, start_first_page, ptr_temp_page) == E_NO_PAGE_FILE_SPACE)
f010912e:	8b 15 44 26 78 f0    	mov    0xf0782644,%edx
f0109134:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f010913a:	83 ec 04             	sub    $0x4,%esp
f010913d:	52                   	push   %edx
f010913e:	ff 75 90             	pushl  -0x70(%ebp)
f0109141:	50                   	push   %eax
f0109142:	e8 ce a5 ff ff       	call   f0103715 <pf_add_env_page>
f0109147:	83 c4 10             	add    $0x10,%esp
f010914a:	83 f8 f8             	cmp    $0xfffffff8,%eax
f010914d:	75 17                	jne    f0109166 <env_create+0x303>
			panic("ERROR: Page File OUT OF SPACE. can't load the program in Page file!!");
f010914f:	83 ec 04             	sub    $0x4,%esp
f0109152:	68 7c 66 13 f0       	push   $0xf013667c
f0109157:	68 e1 00 00 00       	push   $0xe1
f010915c:	68 c1 66 13 f0       	push   $0xf01366c1
f0109161:	e8 9f 70 ff ff       	call   f0100205 <_panic>
		//LOG_STRING(" -------------------- PAGE FILE: 1st page is written");


		///[2] Start writing the segment ,from 2nd page until before last page, to page file ...

		uint32 start_last_page = ROUNDDOWN(seg_va  + seg->size_in_file, PAGE_SIZE) ;
f0109166:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0109169:	8b 50 04             	mov    0x4(%eax),%edx
f010916c:	8b 45 98             	mov    -0x68(%ebp),%eax
f010916f:	01 d0                	add    %edx,%eax
f0109171:	89 85 7c ff ff ff    	mov    %eax,-0x84(%ebp)
f0109177:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f010917d:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0109182:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)
		uint32 end_last_page = seg_va  + seg->size_in_file;
f0109188:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010918b:	8b 50 04             	mov    0x4(%eax),%edx
f010918e:	8b 45 98             	mov    -0x68(%ebp),%eax
f0109191:	01 d0                	add    %edx,%eax
f0109193:	89 85 74 ff ff ff    	mov    %eax,-0x8c(%ebp)

		for (i = end_first_page ; i < start_last_page ; i+= PAGE_SIZE, src_ptr+= PAGE_SIZE)
f0109199:	8b 45 84             	mov    -0x7c(%ebp),%eax
f010919c:	89 45 cc             	mov    %eax,-0x34(%ebp)
f010919f:	eb 43                	jmp    f01091e4 <env_create+0x381>
		{
			if (pf_add_env_page(e, i, src_ptr) == E_NO_PAGE_FILE_SPACE)
f01091a1:	8b 55 cc             	mov    -0x34(%ebp),%edx
f01091a4:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f01091aa:	83 ec 04             	sub    $0x4,%esp
f01091ad:	ff 75 d4             	pushl  -0x2c(%ebp)
f01091b0:	52                   	push   %edx
f01091b1:	50                   	push   %eax
f01091b2:	e8 5e a5 ff ff       	call   f0103715 <pf_add_env_page>
f01091b7:	83 c4 10             	add    $0x10,%esp
f01091ba:	83 f8 f8             	cmp    $0xfffffff8,%eax
f01091bd:	75 17                	jne    f01091d6 <env_create+0x373>
				panic("ERROR: Page File OUT OF SPACE. can't load the program in Page file!!");
f01091bf:	83 ec 04             	sub    $0x4,%esp
f01091c2:	68 7c 66 13 f0       	push   $0xf013667c
f01091c7:	68 ee 00 00 00       	push   $0xee
f01091cc:	68 c1 66 13 f0       	push   $0xf01366c1
f01091d1:	e8 2f 70 ff ff       	call   f0100205 <_panic>
		///[2] Start writing the segment ,from 2nd page until before last page, to page file ...

		uint32 start_last_page = ROUNDDOWN(seg_va  + seg->size_in_file, PAGE_SIZE) ;
		uint32 end_last_page = seg_va  + seg->size_in_file;

		for (i = end_first_page ; i < start_last_page ; i+= PAGE_SIZE, src_ptr+= PAGE_SIZE)
f01091d6:	81 45 cc 00 10 00 00 	addl   $0x1000,-0x34(%ebp)
f01091dd:	81 45 d4 00 10 00 00 	addl   $0x1000,-0x2c(%ebp)
f01091e4:	8b 45 cc             	mov    -0x34(%ebp),%eax
f01091e7:	3b 85 78 ff ff ff    	cmp    -0x88(%ebp),%eax
f01091ed:	72 b2                	jb     f01091a1 <env_create+0x33e>
		}
		//LOG_STRING(" -------------------- PAGE FILE: 2nd page --> before last page are written");

		///[3] temporary initialize last page in memory then writing it on page file

		dst_ptr =  (uint8*) ptr_temp_page;
f01091ef:	a1 44 26 78 f0       	mov    0xf0782644,%eax
f01091f4:	89 45 d0             	mov    %eax,-0x30(%ebp)
		memset(dst_ptr, 0, PAGE_SIZE);
f01091f7:	83 ec 04             	sub    $0x4,%esp
f01091fa:	68 00 10 00 00       	push   $0x1000
f01091ff:	6a 00                	push   $0x0
f0109201:	ff 75 d0             	pushl  -0x30(%ebp)
f0109204:	e8 d7 81 02 00       	call   f01313e0 <memset>
f0109209:	83 c4 10             	add    $0x10,%esp

		for (i = start_last_page ; i < end_last_page ; i++, src_ptr++,dst_ptr++ )
f010920c:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f0109212:	89 45 cc             	mov    %eax,-0x34(%ebp)
f0109215:	eb 13                	jmp    f010922a <env_create+0x3c7>
		{
			*dst_ptr = *src_ptr;
f0109217:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f010921a:	8a 10                	mov    (%eax),%dl
f010921c:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010921f:	88 10                	mov    %dl,(%eax)
		///[3] temporary initialize last page in memory then writing it on page file

		dst_ptr =  (uint8*) ptr_temp_page;
		memset(dst_ptr, 0, PAGE_SIZE);

		for (i = start_last_page ; i < end_last_page ; i++, src_ptr++,dst_ptr++ )
f0109221:	ff 45 cc             	incl   -0x34(%ebp)
f0109224:	ff 45 d4             	incl   -0x2c(%ebp)
f0109227:	ff 45 d0             	incl   -0x30(%ebp)
f010922a:	8b 45 cc             	mov    -0x34(%ebp),%eax
f010922d:	3b 85 74 ff ff ff    	cmp    -0x8c(%ebp),%eax
f0109233:	72 e2                	jb     f0109217 <env_create+0x3b4>
		{
			*dst_ptr = *src_ptr;
		}
		if (pf_add_env_page(e, start_last_page, ptr_temp_page) == E_NO_PAGE_FILE_SPACE)
f0109235:	8b 15 44 26 78 f0    	mov    0xf0782644,%edx
f010923b:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109241:	83 ec 04             	sub    $0x4,%esp
f0109244:	52                   	push   %edx
f0109245:	ff b5 78 ff ff ff    	pushl  -0x88(%ebp)
f010924b:	50                   	push   %eax
f010924c:	e8 c4 a4 ff ff       	call   f0103715 <pf_add_env_page>
f0109251:	83 c4 10             	add    $0x10,%esp
f0109254:	83 f8 f8             	cmp    $0xfffffff8,%eax
f0109257:	75 17                	jne    f0109270 <env_create+0x40d>
			panic("ERROR: Page File OUT OF SPACE. can't load the program in Page file!!");
f0109259:	83 ec 04             	sub    $0x4,%esp
f010925c:	68 7c 66 13 f0       	push   $0xf013667c
f0109261:	68 fd 00 00 00       	push   $0xfd
f0109266:	68 c1 66 13 f0       	push   $0xf01366c1
f010926b:	e8 95 6f ff ff       	call   f0100205 <_panic>

		//LOG_STRING(" -------------------- PAGE FILE: last page is written");

		///[4] writing the remaining seg->size_in_memory pages to disk

		uint32 start_remaining_area = ROUNDUP(seg_va + seg->size_in_file,PAGE_SIZE) ;
f0109270:	c7 85 70 ff ff ff 00 	movl   $0x1000,-0x90(%ebp)
f0109277:	10 00 00 
f010927a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010927d:	8b 50 04             	mov    0x4(%eax),%edx
f0109280:	8b 45 98             	mov    -0x68(%ebp),%eax
f0109283:	01 c2                	add    %eax,%edx
f0109285:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f010928b:	01 d0                	add    %edx,%eax
f010928d:	48                   	dec    %eax
f010928e:	89 85 6c ff ff ff    	mov    %eax,-0x94(%ebp)
f0109294:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f010929a:	ba 00 00 00 00       	mov    $0x0,%edx
f010929f:	f7 b5 70 ff ff ff    	divl   -0x90(%ebp)
f01092a5:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f01092ab:	29 d0                	sub    %edx,%eax
f01092ad:	89 45 c8             	mov    %eax,-0x38(%ebp)
		uint32 remainingLength = (seg_va + seg->size_in_memory) - start_remaining_area ;
f01092b0:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01092b3:	8b 50 08             	mov    0x8(%eax),%edx
f01092b6:	8b 45 98             	mov    -0x68(%ebp),%eax
f01092b9:	01 d0                	add    %edx,%eax
f01092bb:	2b 45 c8             	sub    -0x38(%ebp),%eax
f01092be:	89 85 68 ff ff ff    	mov    %eax,-0x98(%ebp)

		for (i=0 ; i < ROUNDUP(remainingLength,PAGE_SIZE) ;i+= PAGE_SIZE, start_remaining_area += PAGE_SIZE)
f01092c4:	c7 45 cc 00 00 00 00 	movl   $0x0,-0x34(%ebp)
f01092cb:	eb 41                	jmp    f010930e <env_create+0x4ab>
		{
			if (pf_add_empty_env_page(e, start_remaining_area, 1) == E_NO_PAGE_FILE_SPACE)
f01092cd:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f01092d3:	83 ec 04             	sub    $0x4,%esp
f01092d6:	6a 01                	push   $0x1
f01092d8:	ff 75 c8             	pushl  -0x38(%ebp)
f01092db:	50                   	push   %eax
f01092dc:	e8 03 a3 ff ff       	call   f01035e4 <pf_add_empty_env_page>
f01092e1:	83 c4 10             	add    $0x10,%esp
f01092e4:	83 f8 f8             	cmp    $0xfffffff8,%eax
f01092e7:	75 17                	jne    f0109300 <env_create+0x49d>
				panic("ERROR: Page File OUT OF SPACE. can't load the program in Page file!!");
f01092e9:	83 ec 04             	sub    $0x4,%esp
f01092ec:	68 7c 66 13 f0       	push   $0xf013667c
f01092f1:	68 0a 01 00 00       	push   $0x10a
f01092f6:	68 c1 66 13 f0       	push   $0xf01366c1
f01092fb:	e8 05 6f ff ff       	call   f0100205 <_panic>
		///[4] writing the remaining seg->size_in_memory pages to disk

		uint32 start_remaining_area = ROUNDUP(seg_va + seg->size_in_file,PAGE_SIZE) ;
		uint32 remainingLength = (seg_va + seg->size_in_memory) - start_remaining_area ;

		for (i=0 ; i < ROUNDUP(remainingLength,PAGE_SIZE) ;i+= PAGE_SIZE, start_remaining_area += PAGE_SIZE)
f0109300:	81 45 cc 00 10 00 00 	addl   $0x1000,-0x34(%ebp)
f0109307:	81 45 c8 00 10 00 00 	addl   $0x1000,-0x38(%ebp)
f010930e:	c7 85 64 ff ff ff 00 	movl   $0x1000,-0x9c(%ebp)
f0109315:	10 00 00 
f0109318:	8b 95 68 ff ff ff    	mov    -0x98(%ebp),%edx
f010931e:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f0109324:	01 d0                	add    %edx,%eax
f0109326:	48                   	dec    %eax
f0109327:	89 85 60 ff ff ff    	mov    %eax,-0xa0(%ebp)
f010932d:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f0109333:	ba 00 00 00 00       	mov    $0x0,%edx
f0109338:	f7 b5 64 ff ff ff    	divl   -0x9c(%ebp)
f010933e:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f0109344:	29 d0                	sub    %edx,%eax
f0109346:	89 c2                	mov    %eax,%edx
f0109348:	8b 45 cc             	mov    -0x34(%ebp),%eax
f010934b:	39 c2                	cmp    %eax,%edx
f010934d:	0f 87 7a ff ff ff    	ja     f01092cd <env_create+0x46a>
	struct ProgramSegment* seg = NULL;  //use inside PROGRAM_SEGMENT_FOREACH as current segment information
	int segment_counter=0;
	uint32 remaining_ws_pages = (e->page_WS_max_size)-1; // we are reserving 1 page of WS for the stack that will be allocated just before the end of this function
	uint32 lastTableNumber=0xffffffff;

	PROGRAM_SEGMENT_FOREACH(seg, ptr_program_start)
f0109353:	83 ec 08             	sub    $0x8,%esp
f0109356:	ff 75 b8             	pushl  -0x48(%ebp)
f0109359:	ff 75 e4             	pushl  -0x1c(%ebp)
f010935c:	e8 55 19 00 00       	call   f010acb6 <PROGRAM_SEGMENT_NEXT>
f0109361:	83 c4 10             	add    $0x10,%esp
f0109364:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f0109367:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f010936b:	0f 85 e1 fc ff ff    	jne    f0109052 <env_create+0x1ef>
		}
		//LOG_STRING(" -------------------- PAGE FILE: segment remaining area is written (the zeros) ");
	}

	/// set the modified bit of each page in the ptr_pageWorkingSet to 0
	int i=0;
f0109371:	c7 45 c4 00 00 00 00 	movl   $0x0,-0x3c(%ebp)
	for(;i<(e->page_WS_max_size); i++)
f0109378:	e9 9d 00 00 00       	jmp    f010941a <env_create+0x5b7>
	{
		if(e->ptr_pageWorkingSet[i].empty == 0)
f010937d:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109383:	8b 48 78             	mov    0x78(%eax),%ecx
f0109386:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0109389:	89 d0                	mov    %edx,%eax
f010938b:	01 c0                	add    %eax,%eax
f010938d:	01 d0                	add    %edx,%eax
f010938f:	c1 e0 03             	shl    $0x3,%eax
f0109392:	01 c8                	add    %ecx,%eax
f0109394:	8a 40 04             	mov    0x4(%eax),%al
f0109397:	84 c0                	test   %al,%al
f0109399:	75 7c                	jne    f0109417 <env_create+0x5b4>
		{
			uint32 virtual_address = e->ptr_pageWorkingSet[i].virtual_address;
f010939b:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f01093a1:	8b 48 78             	mov    0x78(%eax),%ecx
f01093a4:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f01093a7:	89 d0                	mov    %edx,%eax
f01093a9:	01 c0                	add    %eax,%eax
f01093ab:	01 d0                	add    %edx,%eax
f01093ad:	c1 e0 03             	shl    $0x3,%eax
f01093b0:	01 c8                	add    %ecx,%eax
f01093b2:	8b 00                	mov    (%eax),%eax
f01093b4:	89 85 5c ff ff ff    	mov    %eax,-0xa4(%ebp)
			uint32* ptr_page_table;

			//Here, page tables of all working set pages should be exist in memory
			//So, get_page_table should return the existing table
			get_page_table(e->env_page_directory, virtual_address, &ptr_page_table);
f01093ba:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f01093c0:	8b 40 5c             	mov    0x5c(%eax),%eax
f01093c3:	83 ec 04             	sub    $0x4,%esp
f01093c6:	8d 95 2c ff ff ff    	lea    -0xd4(%ebp),%edx
f01093cc:	52                   	push   %edx
f01093cd:	ff b5 5c ff ff ff    	pushl  -0xa4(%ebp)
f01093d3:	50                   	push   %eax
f01093d4:	e8 d8 d6 ff ff       	call   f0106ab1 <get_page_table>
f01093d9:	83 c4 10             	add    $0x10,%esp
			ptr_page_table[PTX(virtual_address)] &= (~PERM_MODIFIED);
f01093dc:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f01093e2:	8b 95 5c ff ff ff    	mov    -0xa4(%ebp),%edx
f01093e8:	c1 ea 0c             	shr    $0xc,%edx
f01093eb:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f01093f1:	c1 e2 02             	shl    $0x2,%edx
f01093f4:	01 d0                	add    %edx,%eax
f01093f6:	8b 95 2c ff ff ff    	mov    -0xd4(%ebp),%edx
f01093fc:	8b 8d 5c ff ff ff    	mov    -0xa4(%ebp),%ecx
f0109402:	c1 e9 0c             	shr    $0xc,%ecx
f0109405:	81 e1 ff 03 00 00    	and    $0x3ff,%ecx
f010940b:	c1 e1 02             	shl    $0x2,%ecx
f010940e:	01 ca                	add    %ecx,%edx
f0109410:	8b 12                	mov    (%edx),%edx
f0109412:	83 e2 bf             	and    $0xffffffbf,%edx
f0109415:	89 10                	mov    %edx,(%eax)
		//LOG_STRING(" -------------------- PAGE FILE: segment remaining area is written (the zeros) ");
	}

	/// set the modified bit of each page in the ptr_pageWorkingSet to 0
	int i=0;
	for(;i<(e->page_WS_max_size); i++)
f0109417:	ff 45 c4             	incl   -0x3c(%ebp)
f010941a:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109420:	8b 50 74             	mov    0x74(%eax),%edx
f0109423:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0109426:	39 c2                	cmp    %eax,%edx
f0109428:	0f 87 4f ff ff ff    	ja     f010937d <env_create+0x51a>
	//unsigned int * ptr = (unsigned int * )0x801084;
	//LOG_STATMENT(cprintf("contents at address %x=%x",0x801084, *ptr));

	//[8] now set the entry point of the environment
	//Hint: use set_environment_entry_point()
	set_environment_entry_point(e, ptr_user_program_info->ptr_start);
f010942e:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0109431:	8b 50 08             	mov    0x8(%eax),%edx
f0109434:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f010943a:	83 ec 08             	sub    $0x8,%esp
f010943d:	52                   	push   %edx
f010943e:	50                   	push   %eax
f010943f:	e8 bc 16 00 00       	call   f010ab00 <set_environment_entry_point>
f0109444:	83 c4 10             	add    $0x10,%esp

	//[9] Allocate and map one page for the program's initial stack
	// at virtual address USTACKTOP - PAGE_SIZE.
	// we assume that the stack is counted in the environment working set

	e->initNumStackPages = 1;
f0109447:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f010944d:	c7 80 58 05 00 00 01 	movl   $0x1,0x558(%eax)
f0109454:	00 00 00 

	// map the allocated page
	uint32 ptr_user_stack_bottom = (USTACKTOP - 1*PAGE_SIZE);
f0109457:	c7 85 58 ff ff ff 00 	movl   $0xeebfd000,-0xa8(%ebp)
f010945e:	d0 bf ee 

	uint32 stackVa = USTACKTOP - PAGE_SIZE;
f0109461:	c7 45 c0 00 d0 bf ee 	movl   $0xeebfd000,-0x40(%ebp)
	for(;stackVa >= ptr_user_stack_bottom; stackVa -= PAGE_SIZE)
f0109468:	e9 53 05 00 00       	jmp    f01099c0 <env_create+0xb5d>
	{
		struct FrameInfo *pp = NULL;
f010946d:	c7 85 28 ff ff ff 00 	movl   $0x0,-0xd8(%ebp)
f0109474:	00 00 00 
		allocate_frame(&pp);
f0109477:	83 ec 0c             	sub    $0xc,%esp
f010947a:	8d 85 28 ff ff ff    	lea    -0xd8(%ebp),%eax
f0109480:	50                   	push   %eax
f0109481:	e8 6c d4 ff ff       	call   f01068f2 <allocate_frame>
f0109486:	83 c4 10             	add    $0x10,%esp

		loadtime_map_frame(e->env_page_directory, pp, stackVa, PERM_USER | PERM_WRITEABLE);
f0109489:	8b 95 28 ff ff ff    	mov    -0xd8(%ebp),%edx
f010948f:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109495:	8b 40 5c             	mov    0x5c(%eax),%eax
f0109498:	6a 06                	push   $0x6
f010949a:	ff 75 c0             	pushl  -0x40(%ebp)
f010949d:	52                   	push   %edx
f010949e:	50                   	push   %eax
f010949f:	e8 59 da ff ff       	call   f0106efd <loadtime_map_frame>
f01094a4:	83 c4 10             	add    $0x10,%esp

		//initialize new page by 0's
		memset((void*)stackVa, 0, PAGE_SIZE);
f01094a7:	8b 45 c0             	mov    -0x40(%ebp),%eax
f01094aa:	83 ec 04             	sub    $0x4,%esp
f01094ad:	68 00 10 00 00       	push   $0x1000
f01094b2:	6a 00                	push   $0x0
f01094b4:	50                   	push   %eax
f01094b5:	e8 26 7f 02 00       	call   f01313e0 <memset>
f01094ba:	83 c4 10             	add    $0x10,%esp

		//now add it to the working set and the page table
		{
			env_page_ws_set_entry(e, e->page_last_WS_index, (uint32) stackVa) ;
f01094bd:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f01094c3:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f01094c9:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f01094cf:	83 ec 04             	sub    $0x4,%esp
f01094d2:	ff 75 c0             	pushl  -0x40(%ebp)
f01094d5:	52                   	push   %edx
f01094d6:	50                   	push   %eax
f01094d7:	e8 ee e9 ff ff       	call   f0107eca <env_page_ws_set_entry>
f01094dc:	83 c4 10             	add    $0x10,%esp

			//2020
			if(isPageReplacmentAlgorithmLRU(PG_REP_LRU_LISTS_APPROX))
f01094df:	83 ec 0c             	sub    $0xc,%esp
f01094e2:	6a 02                	push   $0x2
f01094e4:	e8 5a 48 00 00       	call   f010dd43 <isPageReplacmentAlgorithmLRU>
f01094e9:	83 c4 10             	add    $0x10,%esp
f01094ec:	85 c0                	test   %eax,%eax
f01094ee:	0f 84 6b 04 00 00    	je     f010995f <env_create+0xafc>
			{
				LIST_REMOVE(&(e->PageWorkingSetList), &(e->ptr_pageWorkingSet[e->page_last_WS_index]));
f01094f4:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f01094fa:	8b 48 78             	mov    0x78(%eax),%ecx
f01094fd:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109503:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f0109509:	89 d0                	mov    %edx,%eax
f010950b:	01 c0                	add    %eax,%eax
f010950d:	01 d0                	add    %edx,%eax
f010950f:	c1 e0 03             	shl    $0x3,%eax
f0109512:	01 c8                	add    %ecx,%eax
f0109514:	85 c0                	test   %eax,%eax
f0109516:	75 17                	jne    f010952f <env_create+0x6cc>
f0109518:	83 ec 04             	sub    $0x4,%esp
f010951b:	68 de 66 13 f0       	push   $0xf01366de
f0109520:	68 41 01 00 00       	push   $0x141
f0109525:	68 c1 66 13 f0       	push   $0xf01366c1
f010952a:	e8 d6 6c ff ff       	call   f0100205 <_panic>
f010952f:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109535:	8b 48 78             	mov    0x78(%eax),%ecx
f0109538:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f010953e:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f0109544:	89 d0                	mov    %edx,%eax
f0109546:	01 c0                	add    %eax,%eax
f0109548:	01 d0                	add    %edx,%eax
f010954a:	c1 e0 03             	shl    $0x3,%eax
f010954d:	01 c8                	add    %ecx,%eax
f010954f:	8b 40 10             	mov    0x10(%eax),%eax
f0109552:	85 c0                	test   %eax,%eax
f0109554:	74 4b                	je     f01095a1 <env_create+0x73e>
f0109556:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f010955c:	8b 48 78             	mov    0x78(%eax),%ecx
f010955f:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109565:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f010956b:	89 d0                	mov    %edx,%eax
f010956d:	01 c0                	add    %eax,%eax
f010956f:	01 d0                	add    %edx,%eax
f0109571:	c1 e0 03             	shl    $0x3,%eax
f0109574:	01 c8                	add    %ecx,%eax
f0109576:	8b 50 10             	mov    0x10(%eax),%edx
f0109579:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f010957f:	8b 58 78             	mov    0x78(%eax),%ebx
f0109582:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109588:	8b 88 2c 05 00 00    	mov    0x52c(%eax),%ecx
f010958e:	89 c8                	mov    %ecx,%eax
f0109590:	01 c0                	add    %eax,%eax
f0109592:	01 c8                	add    %ecx,%eax
f0109594:	c1 e0 03             	shl    $0x3,%eax
f0109597:	01 d8                	add    %ebx,%eax
f0109599:	8b 40 14             	mov    0x14(%eax),%eax
f010959c:	89 42 14             	mov    %eax,0x14(%edx)
f010959f:	eb 2f                	jmp    f01095d0 <env_create+0x76d>
f01095a1:	8b 95 4c ff ff ff    	mov    -0xb4(%ebp),%edx
f01095a7:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f01095ad:	8b 58 78             	mov    0x78(%eax),%ebx
f01095b0:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f01095b6:	8b 88 2c 05 00 00    	mov    0x52c(%eax),%ecx
f01095bc:	89 c8                	mov    %ecx,%eax
f01095be:	01 c0                	add    %eax,%eax
f01095c0:	01 c8                	add    %ecx,%eax
f01095c2:	c1 e0 03             	shl    $0x3,%eax
f01095c5:	01 d8                	add    %ebx,%eax
f01095c7:	8b 40 14             	mov    0x14(%eax),%eax
f01095ca:	89 82 bc 05 00 00    	mov    %eax,0x5bc(%edx)
f01095d0:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f01095d6:	8b 48 78             	mov    0x78(%eax),%ecx
f01095d9:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f01095df:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f01095e5:	89 d0                	mov    %edx,%eax
f01095e7:	01 c0                	add    %eax,%eax
f01095e9:	01 d0                	add    %edx,%eax
f01095eb:	c1 e0 03             	shl    $0x3,%eax
f01095ee:	01 c8                	add    %ecx,%eax
f01095f0:	8b 40 14             	mov    0x14(%eax),%eax
f01095f3:	85 c0                	test   %eax,%eax
f01095f5:	74 4b                	je     f0109642 <env_create+0x7df>
f01095f7:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f01095fd:	8b 48 78             	mov    0x78(%eax),%ecx
f0109600:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109606:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f010960c:	89 d0                	mov    %edx,%eax
f010960e:	01 c0                	add    %eax,%eax
f0109610:	01 d0                	add    %edx,%eax
f0109612:	c1 e0 03             	shl    $0x3,%eax
f0109615:	01 c8                	add    %ecx,%eax
f0109617:	8b 50 14             	mov    0x14(%eax),%edx
f010961a:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109620:	8b 58 78             	mov    0x78(%eax),%ebx
f0109623:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109629:	8b 88 2c 05 00 00    	mov    0x52c(%eax),%ecx
f010962f:	89 c8                	mov    %ecx,%eax
f0109631:	01 c0                	add    %eax,%eax
f0109633:	01 c8                	add    %ecx,%eax
f0109635:	c1 e0 03             	shl    $0x3,%eax
f0109638:	01 d8                	add    %ebx,%eax
f010963a:	8b 40 10             	mov    0x10(%eax),%eax
f010963d:	89 42 10             	mov    %eax,0x10(%edx)
f0109640:	eb 2f                	jmp    f0109671 <env_create+0x80e>
f0109642:	8b 95 4c ff ff ff    	mov    -0xb4(%ebp),%edx
f0109648:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f010964e:	8b 58 78             	mov    0x78(%eax),%ebx
f0109651:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109657:	8b 88 2c 05 00 00    	mov    0x52c(%eax),%ecx
f010965d:	89 c8                	mov    %ecx,%eax
f010965f:	01 c0                	add    %eax,%eax
f0109661:	01 c8                	add    %ecx,%eax
f0109663:	c1 e0 03             	shl    $0x3,%eax
f0109666:	01 d8                	add    %ebx,%eax
f0109668:	8b 40 10             	mov    0x10(%eax),%eax
f010966b:	89 82 b8 05 00 00    	mov    %eax,0x5b8(%edx)
f0109671:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109677:	8b 48 78             	mov    0x78(%eax),%ecx
f010967a:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109680:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f0109686:	89 d0                	mov    %edx,%eax
f0109688:	01 c0                	add    %eax,%eax
f010968a:	01 d0                	add    %edx,%eax
f010968c:	c1 e0 03             	shl    $0x3,%eax
f010968f:	01 c8                	add    %ecx,%eax
f0109691:	c7 40 10 00 00 00 00 	movl   $0x0,0x10(%eax)
f0109698:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f010969e:	8b 48 78             	mov    0x78(%eax),%ecx
f01096a1:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f01096a7:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f01096ad:	89 d0                	mov    %edx,%eax
f01096af:	01 c0                	add    %eax,%eax
f01096b1:	01 d0                	add    %edx,%eax
f01096b3:	c1 e0 03             	shl    $0x3,%eax
f01096b6:	01 c8                	add    %ecx,%eax
f01096b8:	c7 40 14 00 00 00 00 	movl   $0x0,0x14(%eax)
f01096bf:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f01096c5:	8b 90 c4 05 00 00    	mov    0x5c4(%eax),%edx
f01096cb:	4a                   	dec    %edx
f01096cc:	89 90 c4 05 00 00    	mov    %edx,0x5c4(%eax)
				//Now: we are sure that at least the top page in the stack will be added to Active list
				//Since we left 1 empty location in the Active list when we loaded the program segments
				if (LIST_SIZE(&(e->ActiveList)) < e->ActiveListSize)
f01096d2:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f01096d8:	8b 90 d4 05 00 00    	mov    0x5d4(%eax),%edx
f01096de:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f01096e4:	8b 80 e8 05 00 00    	mov    0x5e8(%eax),%eax
f01096ea:	39 c2                	cmp    %eax,%edx
f01096ec:	0f 83 39 01 00 00    	jae    f010982b <env_create+0x9c8>
				{
					LIST_INSERT_HEAD(&(e->ActiveList), &(e->ptr_pageWorkingSet[e->page_last_WS_index]));
f01096f2:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f01096f8:	8b 48 78             	mov    0x78(%eax),%ecx
f01096fb:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109701:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f0109707:	89 d0                	mov    %edx,%eax
f0109709:	01 c0                	add    %eax,%eax
f010970b:	01 d0                	add    %edx,%eax
f010970d:	c1 e0 03             	shl    $0x3,%eax
f0109710:	01 c8                	add    %ecx,%eax
f0109712:	85 c0                	test   %eax,%eax
f0109714:	75 17                	jne    f010972d <env_create+0x8ca>
f0109716:	83 ec 04             	sub    $0x4,%esp
f0109719:	68 fc 66 13 f0       	push   $0xf01366fc
f010971e:	68 46 01 00 00       	push   $0x146
f0109723:	68 c1 66 13 f0       	push   $0xf01366c1
f0109728:	e8 d8 6a ff ff       	call   f0100205 <_panic>
f010972d:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109733:	8b 48 78             	mov    0x78(%eax),%ecx
f0109736:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f010973c:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f0109742:	89 d0                	mov    %edx,%eax
f0109744:	01 c0                	add    %eax,%eax
f0109746:	01 d0                	add    %edx,%eax
f0109748:	c1 e0 03             	shl    $0x3,%eax
f010974b:	01 c8                	add    %ecx,%eax
f010974d:	8b 95 4c ff ff ff    	mov    -0xb4(%ebp),%edx
f0109753:	8b 92 c8 05 00 00    	mov    0x5c8(%edx),%edx
f0109759:	89 50 10             	mov    %edx,0x10(%eax)
f010975c:	8b 40 10             	mov    0x10(%eax),%eax
f010975f:	85 c0                	test   %eax,%eax
f0109761:	74 31                	je     f0109794 <env_create+0x931>
f0109763:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109769:	8b 90 c8 05 00 00    	mov    0x5c8(%eax),%edx
f010976f:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109775:	8b 58 78             	mov    0x78(%eax),%ebx
f0109778:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f010977e:	8b 88 2c 05 00 00    	mov    0x52c(%eax),%ecx
f0109784:	89 c8                	mov    %ecx,%eax
f0109786:	01 c0                	add    %eax,%eax
f0109788:	01 c8                	add    %ecx,%eax
f010978a:	c1 e0 03             	shl    $0x3,%eax
f010978d:	01 d8                	add    %ebx,%eax
f010978f:	89 42 14             	mov    %eax,0x14(%edx)
f0109792:	eb 2c                	jmp    f01097c0 <env_create+0x95d>
f0109794:	8b 95 4c ff ff ff    	mov    -0xb4(%ebp),%edx
f010979a:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f01097a0:	8b 58 78             	mov    0x78(%eax),%ebx
f01097a3:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f01097a9:	8b 88 2c 05 00 00    	mov    0x52c(%eax),%ecx
f01097af:	89 c8                	mov    %ecx,%eax
f01097b1:	01 c0                	add    %eax,%eax
f01097b3:	01 c8                	add    %ecx,%eax
f01097b5:	c1 e0 03             	shl    $0x3,%eax
f01097b8:	01 d8                	add    %ebx,%eax
f01097ba:	89 82 cc 05 00 00    	mov    %eax,0x5cc(%edx)
f01097c0:	8b 95 4c ff ff ff    	mov    -0xb4(%ebp),%edx
f01097c6:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f01097cc:	8b 58 78             	mov    0x78(%eax),%ebx
f01097cf:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f01097d5:	8b 88 2c 05 00 00    	mov    0x52c(%eax),%ecx
f01097db:	89 c8                	mov    %ecx,%eax
f01097dd:	01 c0                	add    %eax,%eax
f01097df:	01 c8                	add    %ecx,%eax
f01097e1:	c1 e0 03             	shl    $0x3,%eax
f01097e4:	01 d8                	add    %ebx,%eax
f01097e6:	89 82 c8 05 00 00    	mov    %eax,0x5c8(%edx)
f01097ec:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f01097f2:	8b 48 78             	mov    0x78(%eax),%ecx
f01097f5:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f01097fb:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f0109801:	89 d0                	mov    %edx,%eax
f0109803:	01 c0                	add    %eax,%eax
f0109805:	01 d0                	add    %edx,%eax
f0109807:	c1 e0 03             	shl    $0x3,%eax
f010980a:	01 c8                	add    %ecx,%eax
f010980c:	c7 40 14 00 00 00 00 	movl   $0x0,0x14(%eax)
f0109813:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109819:	8b 90 d4 05 00 00    	mov    0x5d4(%eax),%edx
f010981f:	42                   	inc    %edx
f0109820:	89 90 d4 05 00 00    	mov    %edx,0x5d4(%eax)
f0109826:	e9 34 01 00 00       	jmp    f010995f <env_create+0xafc>
				}
				else
				{
					LIST_INSERT_HEAD(&(e->SecondList), &(e->ptr_pageWorkingSet[e->page_last_WS_index]));
f010982b:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109831:	8b 48 78             	mov    0x78(%eax),%ecx
f0109834:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f010983a:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f0109840:	89 d0                	mov    %edx,%eax
f0109842:	01 c0                	add    %eax,%eax
f0109844:	01 d0                	add    %edx,%eax
f0109846:	c1 e0 03             	shl    $0x3,%eax
f0109849:	01 c8                	add    %ecx,%eax
f010984b:	85 c0                	test   %eax,%eax
f010984d:	75 17                	jne    f0109866 <env_create+0xa03>
f010984f:	83 ec 04             	sub    $0x4,%esp
f0109852:	68 fc 66 13 f0       	push   $0xf01366fc
f0109857:	68 4a 01 00 00       	push   $0x14a
f010985c:	68 c1 66 13 f0       	push   $0xf01366c1
f0109861:	e8 9f 69 ff ff       	call   f0100205 <_panic>
f0109866:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f010986c:	8b 48 78             	mov    0x78(%eax),%ecx
f010986f:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109875:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f010987b:	89 d0                	mov    %edx,%eax
f010987d:	01 c0                	add    %eax,%eax
f010987f:	01 d0                	add    %edx,%eax
f0109881:	c1 e0 03             	shl    $0x3,%eax
f0109884:	01 c8                	add    %ecx,%eax
f0109886:	8b 95 4c ff ff ff    	mov    -0xb4(%ebp),%edx
f010988c:	8b 92 d8 05 00 00    	mov    0x5d8(%edx),%edx
f0109892:	89 50 10             	mov    %edx,0x10(%eax)
f0109895:	8b 40 10             	mov    0x10(%eax),%eax
f0109898:	85 c0                	test   %eax,%eax
f010989a:	74 31                	je     f01098cd <env_create+0xa6a>
f010989c:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f01098a2:	8b 90 d8 05 00 00    	mov    0x5d8(%eax),%edx
f01098a8:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f01098ae:	8b 58 78             	mov    0x78(%eax),%ebx
f01098b1:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f01098b7:	8b 88 2c 05 00 00    	mov    0x52c(%eax),%ecx
f01098bd:	89 c8                	mov    %ecx,%eax
f01098bf:	01 c0                	add    %eax,%eax
f01098c1:	01 c8                	add    %ecx,%eax
f01098c3:	c1 e0 03             	shl    $0x3,%eax
f01098c6:	01 d8                	add    %ebx,%eax
f01098c8:	89 42 14             	mov    %eax,0x14(%edx)
f01098cb:	eb 2c                	jmp    f01098f9 <env_create+0xa96>
f01098cd:	8b 95 4c ff ff ff    	mov    -0xb4(%ebp),%edx
f01098d3:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f01098d9:	8b 58 78             	mov    0x78(%eax),%ebx
f01098dc:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f01098e2:	8b 88 2c 05 00 00    	mov    0x52c(%eax),%ecx
f01098e8:	89 c8                	mov    %ecx,%eax
f01098ea:	01 c0                	add    %eax,%eax
f01098ec:	01 c8                	add    %ecx,%eax
f01098ee:	c1 e0 03             	shl    $0x3,%eax
f01098f1:	01 d8                	add    %ebx,%eax
f01098f3:	89 82 dc 05 00 00    	mov    %eax,0x5dc(%edx)
f01098f9:	8b 95 4c ff ff ff    	mov    -0xb4(%ebp),%edx
f01098ff:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109905:	8b 58 78             	mov    0x78(%eax),%ebx
f0109908:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f010990e:	8b 88 2c 05 00 00    	mov    0x52c(%eax),%ecx
f0109914:	89 c8                	mov    %ecx,%eax
f0109916:	01 c0                	add    %eax,%eax
f0109918:	01 c8                	add    %ecx,%eax
f010991a:	c1 e0 03             	shl    $0x3,%eax
f010991d:	01 d8                	add    %ebx,%eax
f010991f:	89 82 d8 05 00 00    	mov    %eax,0x5d8(%edx)
f0109925:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f010992b:	8b 48 78             	mov    0x78(%eax),%ecx
f010992e:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109934:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f010993a:	89 d0                	mov    %edx,%eax
f010993c:	01 c0                	add    %eax,%eax
f010993e:	01 d0                	add    %edx,%eax
f0109940:	c1 e0 03             	shl    $0x3,%eax
f0109943:	01 c8                	add    %ecx,%eax
f0109945:	c7 40 14 00 00 00 00 	movl   $0x0,0x14(%eax)
f010994c:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109952:	8b 90 e4 05 00 00    	mov    0x5e4(%eax),%edx
f0109958:	42                   	inc    %edx
f0109959:	89 90 e4 05 00 00    	mov    %edx,0x5e4(%eax)
				}
			}
			e->page_last_WS_index ++;
f010995f:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109965:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f010996b:	42                   	inc    %edx
f010996c:	89 90 2c 05 00 00    	mov    %edx,0x52c(%eax)
			e->page_last_WS_index %= (e->page_WS_max_size);
f0109972:	8b 8d 4c ff ff ff    	mov    -0xb4(%ebp),%ecx
f0109978:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f010997e:	8b 80 2c 05 00 00    	mov    0x52c(%eax),%eax
f0109984:	8b 95 4c ff ff ff    	mov    -0xb4(%ebp),%edx
f010998a:	8b 5a 74             	mov    0x74(%edx),%ebx
f010998d:	ba 00 00 00 00       	mov    $0x0,%edx
f0109992:	f7 f3                	div    %ebx
f0109994:	89 d0                	mov    %edx,%eax
f0109996:	89 81 2c 05 00 00    	mov    %eax,0x52c(%ecx)

			//addTableToTableWorkingSet(e, ROUNDDOWN((uint32)stackVa, PAGE_SIZE*1024));

			int success = pf_add_empty_env_page(e, (uint32)stackVa, 1);
f010999c:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f01099a2:	83 ec 04             	sub    $0x4,%esp
f01099a5:	6a 01                	push   $0x1
f01099a7:	ff 75 c0             	pushl  -0x40(%ebp)
f01099aa:	50                   	push   %eax
f01099ab:	e8 34 9c ff ff       	call   f01035e4 <pf_add_empty_env_page>
f01099b0:	83 c4 10             	add    $0x10,%esp
f01099b3:	89 85 54 ff ff ff    	mov    %eax,-0xac(%ebp)

	// map the allocated page
	uint32 ptr_user_stack_bottom = (USTACKTOP - 1*PAGE_SIZE);

	uint32 stackVa = USTACKTOP - PAGE_SIZE;
	for(;stackVa >= ptr_user_stack_bottom; stackVa -= PAGE_SIZE)
f01099b9:	81 6d c0 00 10 00 00 	subl   $0x1000,-0x40(%ebp)
f01099c0:	8b 45 c0             	mov    -0x40(%ebp),%eax
f01099c3:	3b 85 58 ff ff ff    	cmp    -0xa8(%ebp),%eax
f01099c9:	0f 83 9e fa ff ff    	jae    f010946d <env_create+0x60a>

	}

	//2020
	//LRU Lists: Reset PRESENT bit of all pages in Second List
	if (isPageReplacmentAlgorithmLRU(PG_REP_LRU_LISTS_APPROX))
f01099cf:	83 ec 0c             	sub    $0xc,%esp
f01099d2:	6a 02                	push   $0x2
f01099d4:	e8 6a 43 00 00       	call   f010dd43 <isPageReplacmentAlgorithmLRU>
f01099d9:	83 c4 10             	add    $0x10,%esp
f01099dc:	85 c0                	test   %eax,%eax
f01099de:	74 72                	je     f0109a52 <env_create+0xbef>
	{
		struct WorkingSetElement * elm = NULL;
f01099e0:	c7 45 bc 00 00 00 00 	movl   $0x0,-0x44(%ebp)
		LIST_FOREACH(elm, &(e->SecondList))
f01099e7:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f01099ed:	8b 80 d8 05 00 00    	mov    0x5d8(%eax),%eax
f01099f3:	89 45 bc             	mov    %eax,-0x44(%ebp)
f01099f6:	eb 2b                	jmp    f0109a23 <env_create+0xbc0>
		{
			//set it's PRESENT bit to 0
			pt_set_page_permissions(e->env_page_directory, elm->virtual_address, 0, PERM_PRESENT);
f01099f8:	8b 45 bc             	mov    -0x44(%ebp),%eax
f01099fb:	8b 10                	mov    (%eax),%edx
f01099fd:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109a03:	8b 40 5c             	mov    0x5c(%eax),%eax
f0109a06:	6a 01                	push   $0x1
f0109a08:	6a 00                	push   $0x0
f0109a0a:	52                   	push   %edx
f0109a0b:	50                   	push   %eax
f0109a0c:	e8 9c e1 ff ff       	call   f0107bad <pt_set_page_permissions>
f0109a11:	83 c4 10             	add    $0x10,%esp
	//2020
	//LRU Lists: Reset PRESENT bit of all pages in Second List
	if (isPageReplacmentAlgorithmLRU(PG_REP_LRU_LISTS_APPROX))
	{
		struct WorkingSetElement * elm = NULL;
		LIST_FOREACH(elm, &(e->SecondList))
f0109a14:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109a1a:	8b 80 e0 05 00 00    	mov    0x5e0(%eax),%eax
f0109a20:	89 45 bc             	mov    %eax,-0x44(%ebp)
f0109a23:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109a29:	83 7d bc 00          	cmpl   $0x0,-0x44(%ebp)
f0109a2d:	74 08                	je     f0109a37 <env_create+0xbd4>
f0109a2f:	8b 55 bc             	mov    -0x44(%ebp),%edx
f0109a32:	8b 52 10             	mov    0x10(%edx),%edx
f0109a35:	eb 05                	jmp    f0109a3c <env_create+0xbd9>
f0109a37:	ba 00 00 00 00       	mov    $0x0,%edx
f0109a3c:	89 90 e0 05 00 00    	mov    %edx,0x5e0(%eax)
f0109a42:	8b 80 e0 05 00 00    	mov    0x5e0(%eax),%eax
f0109a48:	85 c0                	test   %eax,%eax
f0109a4a:	75 ac                	jne    f01099f8 <env_create+0xb95>
f0109a4c:	83 7d bc 00          	cmpl   $0x0,-0x44(%ebp)
f0109a50:	75 a6                	jne    f01099f8 <env_create+0xb95>
f0109a52:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0109a55:	89 45 a8             	mov    %eax,-0x58(%ebp)
f0109a58:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0109a5b:	0f 22 d8             	mov    %eax,%cr3
	lcr3(kern_phys_pgdir) ;

	//[11] 2012, add the new env we have just created to the scheduler NEW queue
	//	   2015: moved to the scheduler! since env_create() is responsible for creating the env only

	return e;
f0109a5e:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
}
f0109a64:	8d 65 f4             	lea    -0xc(%ebp),%esp
f0109a67:	5b                   	pop    %ebx
f0109a68:	5e                   	pop    %esi
f0109a69:	5f                   	pop    %edi
f0109a6a:	5d                   	pop    %ebp
f0109a6b:	c3                   	ret    

f0109a6c <env_run>:
// Used to run the given environment "e", simply by
// context switch from curenv to env e.
//  (This function does not return.)
//
void env_run(struct Env *e)
{
f0109a6c:	55                   	push   %ebp
f0109a6d:	89 e5                	mov    %esp,%ebp
f0109a6f:	83 ec 18             	sub    $0x18,%esp
	if(curenv != e)
f0109a72:	a1 b4 1c 78 f0       	mov    0xf0781cb4,%eax
f0109a77:	3b 45 08             	cmp    0x8(%ebp),%eax
f0109a7a:	74 25                	je     f0109aa1 <env_run+0x35>
	{
		curenv = e ;
f0109a7c:	8b 45 08             	mov    0x8(%ebp),%eax
f0109a7f:	a3 b4 1c 78 f0       	mov    %eax,0xf0781cb4
		curenv->env_runs++ ;
f0109a84:	a1 b4 1c 78 f0       	mov    0xf0781cb4,%eax
f0109a89:	8b 50 58             	mov    0x58(%eax),%edx
f0109a8c:	42                   	inc    %edx
f0109a8d:	89 50 58             	mov    %edx,0x58(%eax)
		lcr3(curenv->env_cr3) ;
f0109a90:	a1 b4 1c 78 f0       	mov    0xf0781cb4,%eax
f0109a95:	8b 40 60             	mov    0x60(%eax),%eax
f0109a98:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0109a9b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0109a9e:	0f 22 d8             	mov    %eax,%cr3
	}
	curenv->env_status = ENV_RUNNABLE;
f0109aa1:	a1 b4 1c 78 f0       	mov    0xf0781cb4,%eax
f0109aa6:	c7 40 54 02 00 00 00 	movl   $0x2,0x54(%eax)
	//uint16 cnt0 = kclock_read_cnt0();
	//cprintf("env_run %s [%d]: Cnt BEFORE RESUME = %d\n", curenv->prog_name,curenv->env_id, cnt0);
	//kclock_start();

	kclock_resume();
f0109aad:	e8 0d a7 ff ff       	call   f01041bf <kclock_resume>

	//cprintf("env_run %s [%d]: Cnt AFTER RESUME = %d\n", curenv->prog_name,curenv->env_id, cnt0);
	env_pop_tf(&(curenv->env_tf));
f0109ab2:	a1 b4 1c 78 f0       	mov    0xf0781cb4,%eax
f0109ab7:	83 ec 0c             	sub    $0xc,%esp
f0109aba:	50                   	push   %eax
f0109abb:	e8 0f 01 00 00       	call   f0109bcf <env_pop_tf>

f0109ac0 <env_free>:
// 3) FREE ENV FROM THE SYSTEM:
//===============================
// Frees environment "e" and all memory it uses.
//
void env_free(struct Env *e)
{
f0109ac0:	55                   	push   %ebp
f0109ac1:	89 e5                	mov    %esp,%ebp
f0109ac3:	83 ec 08             	sub    $0x8,%esp
	/********DON'T CHANGE THIS LINE***********/
#if USE_KHEAP
	unshare_pws_at_user_space(e);
f0109ac6:	83 ec 0c             	sub    $0xc,%esp
f0109ac9:	ff 75 08             	pushl  0x8(%ebp)
f0109acc:	e8 3e 11 00 00       	call   f010ac0f <unshare_pws_at_user_space>
f0109ad1:	83 c4 10             	add    $0x10,%esp
#endif
	/*****************************************/
	//TODO: [PROJECT MS3 - BONUS] [EXIT ENV] env_free
	// your code is here, remove the panic and write your code
	panic("env_free() is not implemented yet...!!");
f0109ad4:	83 ec 04             	sub    $0x4,%esp
f0109ad7:	68 20 67 13 f0       	push   $0xf0136720
f0109adc:	68 9d 01 00 00       	push   $0x19d
f0109ae1:	68 c1 66 13 f0       	push   $0xf01366c1
f0109ae6:	e8 1a 67 ff ff       	call   f0100205 <_panic>

f0109aeb <env_exit>:
//============================
// 4) PLACE ENV IN EXIT QUEUE:
//============================
/*2015*///Just add the "curenv" to the EXIT list, then reinvoke the scheduler
void env_exit()
{
f0109aeb:	55                   	push   %ebp
f0109aec:	89 e5                	mov    %esp,%ebp
f0109aee:	83 ec 08             	sub    $0x8,%esp
	sched_exit_env(curenv->env_id);
f0109af1:	a1 b4 1c 78 f0       	mov    0xf0781cb4,%eax
f0109af6:	8b 40 4c             	mov    0x4c(%eax),%eax
f0109af9:	83 ec 0c             	sub    $0xc,%esp
f0109afc:	50                   	push   %eax
f0109afd:	e8 a0 b7 ff ff       	call   f01052a2 <sched_exit_env>
f0109b02:	83 c4 10             	add    $0x10,%esp
	fos_scheduler();
f0109b05:	e8 1c ac ff ff       	call   f0104726 <fos_scheduler>

f0109b0a <envid2env>:
//   0 on success, -E_BAD_ENV on error.
//   On success, sets *penv to the environment.
//   On error, sets *penv to NULL.
//
int envid2env(int32  envid, struct Env **env_store, bool checkperm)
{
f0109b0a:	55                   	push   %ebp
f0109b0b:	89 e5                	mov    %esp,%ebp
f0109b0d:	53                   	push   %ebx
f0109b0e:	83 ec 14             	sub    $0x14,%esp
	struct Env *e;

	// If envid is zero, return the current environment.
	if (envid == 0) {
f0109b11:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0109b15:	75 15                	jne    f0109b2c <envid2env+0x22>
		*env_store = curenv;
f0109b17:	8b 15 b4 1c 78 f0    	mov    0xf0781cb4,%edx
f0109b1d:	8b 45 0c             	mov    0xc(%ebp),%eax
f0109b20:	89 10                	mov    %edx,(%eax)
		return 0;
f0109b22:	b8 00 00 00 00       	mov    $0x0,%eax
f0109b27:	e9 9e 00 00 00       	jmp    f0109bca <envid2env+0xc0>
	// Look up the Env structure via the index part of the envid,
	// then check the env_id field in that struct Env
	// to ensure that the envid is not stale
	// (i.e., does not refer to a _previous_ environment
	// that used the same slot in the envs[] array).
	e = &envs[ENVX(envid)];
f0109b2c:	8b 1d b0 1c 78 f0    	mov    0xf0781cb0,%ebx
f0109b32:	83 ec 0c             	sub    $0xc,%esp
f0109b35:	68 b1 02 00 00       	push   $0x2b1
f0109b3a:	e8 25 64 02 00       	call   f012ff64 <nearest_pow2_ceil>
f0109b3f:	83 c4 10             	add    $0x10,%esp
f0109b42:	8d 50 ff             	lea    -0x1(%eax),%edx
f0109b45:	8b 45 08             	mov    0x8(%ebp),%eax
f0109b48:	21 c2                	and    %eax,%edx
f0109b4a:	89 d0                	mov    %edx,%eax
f0109b4c:	c1 e0 03             	shl    $0x3,%eax
f0109b4f:	01 d0                	add    %edx,%eax
f0109b51:	01 c0                	add    %eax,%eax
f0109b53:	01 d0                	add    %edx,%eax
f0109b55:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0109b5c:	01 d0                	add    %edx,%eax
f0109b5e:	c1 e0 04             	shl    $0x4,%eax
f0109b61:	01 d8                	add    %ebx,%eax
f0109b63:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if (e->env_status == ENV_FREE || e->env_id != envid) {
f0109b66:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0109b69:	8b 40 54             	mov    0x54(%eax),%eax
f0109b6c:	85 c0                	test   %eax,%eax
f0109b6e:	74 0b                	je     f0109b7b <envid2env+0x71>
f0109b70:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0109b73:	8b 40 4c             	mov    0x4c(%eax),%eax
f0109b76:	3b 45 08             	cmp    0x8(%ebp),%eax
f0109b79:	74 10                	je     f0109b8b <envid2env+0x81>
		*env_store = 0;
f0109b7b:	8b 45 0c             	mov    0xc(%ebp),%eax
f0109b7e:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
		return E_BAD_ENV;
f0109b84:	b8 fe ff ff ff       	mov    $0xfffffffe,%eax
f0109b89:	eb 3f                	jmp    f0109bca <envid2env+0xc0>
	// Check that the calling environment has legitimate permission
	// to manipulate the specified environment.
	// If checkperm is set, the specified environment
	// must be either the current environment
	// or an immediate child of the current environment.
	if (checkperm && e != curenv && e->env_parent_id != curenv->env_id) {
f0109b8b:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
f0109b8f:	74 2c                	je     f0109bbd <envid2env+0xb3>
f0109b91:	a1 b4 1c 78 f0       	mov    0xf0781cb4,%eax
f0109b96:	39 45 f4             	cmp    %eax,-0xc(%ebp)
f0109b99:	74 22                	je     f0109bbd <envid2env+0xb3>
f0109b9b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0109b9e:	8b 50 50             	mov    0x50(%eax),%edx
f0109ba1:	a1 b4 1c 78 f0       	mov    0xf0781cb4,%eax
f0109ba6:	8b 40 4c             	mov    0x4c(%eax),%eax
f0109ba9:	39 c2                	cmp    %eax,%edx
f0109bab:	74 10                	je     f0109bbd <envid2env+0xb3>
		*env_store = 0;
f0109bad:	8b 45 0c             	mov    0xc(%ebp),%eax
f0109bb0:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
		return E_BAD_ENV;
f0109bb6:	b8 fe ff ff ff       	mov    $0xfffffffe,%eax
f0109bbb:	eb 0d                	jmp    f0109bca <envid2env+0xc0>
	}

	*env_store = e;
f0109bbd:	8b 45 0c             	mov    0xc(%ebp),%eax
f0109bc0:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0109bc3:	89 10                	mov    %edx,(%eax)
	return 0;
f0109bc5:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0109bca:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f0109bcd:	c9                   	leave  
f0109bce:	c3                   	ret    

f0109bcf <env_pop_tf>:
// This exits the kernel and starts executing some environment's code.
// This function does not return.
//
void
env_pop_tf(struct Trapframe *tf)
{
f0109bcf:	55                   	push   %ebp
f0109bd0:	89 e5                	mov    %esp,%ebp
f0109bd2:	83 ec 08             	sub    $0x8,%esp
	__asm __volatile("movl %0,%%esp\n"
f0109bd5:	8b 65 08             	mov    0x8(%ebp),%esp
f0109bd8:	61                   	popa   
f0109bd9:	07                   	pop    %es
f0109bda:	1f                   	pop    %ds
f0109bdb:	83 c4 08             	add    $0x8,%esp
f0109bde:	cf                   	iret   
			"\tpopl %%es\n"
			"\tpopl %%ds\n"
			"\taddl $0x8,%%esp\n" /* skip tf_trapno and tf_errcode */
			"\tiret"
			: : "g" (tf) : "memory");
	panic("iret failed");  /* mostly to placate the compiler */
f0109bdf:	83 ec 04             	sub    $0x4,%esp
f0109be2:	68 47 67 13 f0       	push   $0xf0136747
f0109be7:	68 fd 01 00 00       	push   $0x1fd
f0109bec:	68 c1 66 13 f0       	push   $0xf01366c1
f0109bf1:	e8 0f 66 ff ff       	call   f0100205 <_panic>

f0109bf6 <env_init>:
// Insert in reverse order, so that the first call to allocate_environment()
// returns envs[0].
//

void env_init(void)
{
f0109bf6:	55                   	push   %ebp
f0109bf7:	89 e5                	mov    %esp,%ebp
f0109bf9:	53                   	push   %ebx
f0109bfa:	83 ec 14             	sub    $0x14,%esp
	int iEnv = NENV-1;
f0109bfd:	c7 45 f4 b0 02 00 00 	movl   $0x2b0,-0xc(%ebp)
	for(; iEnv >= 0; iEnv--)
f0109c04:	e9 73 01 00 00       	jmp    f0109d7c <env_init+0x186>
	{
		envs[iEnv].env_status = ENV_FREE;
f0109c09:	8b 0d b0 1c 78 f0    	mov    0xf0781cb0,%ecx
f0109c0f:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0109c12:	89 d0                	mov    %edx,%eax
f0109c14:	c1 e0 03             	shl    $0x3,%eax
f0109c17:	01 d0                	add    %edx,%eax
f0109c19:	01 c0                	add    %eax,%eax
f0109c1b:	01 d0                	add    %edx,%eax
f0109c1d:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0109c24:	01 d0                	add    %edx,%eax
f0109c26:	c1 e0 04             	shl    $0x4,%eax
f0109c29:	01 c8                	add    %ecx,%eax
f0109c2b:	c7 40 54 00 00 00 00 	movl   $0x0,0x54(%eax)
		envs[iEnv].env_id = 0;
f0109c32:	8b 0d b0 1c 78 f0    	mov    0xf0781cb0,%ecx
f0109c38:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0109c3b:	89 d0                	mov    %edx,%eax
f0109c3d:	c1 e0 03             	shl    $0x3,%eax
f0109c40:	01 d0                	add    %edx,%eax
f0109c42:	01 c0                	add    %eax,%eax
f0109c44:	01 d0                	add    %edx,%eax
f0109c46:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0109c4d:	01 d0                	add    %edx,%eax
f0109c4f:	c1 e0 04             	shl    $0x4,%eax
f0109c52:	01 c8                	add    %ecx,%eax
f0109c54:	c7 40 4c 00 00 00 00 	movl   $0x0,0x4c(%eax)
		LIST_INSERT_HEAD(&env_free_list, &envs[iEnv]);
f0109c5b:	8b 0d b0 1c 78 f0    	mov    0xf0781cb0,%ecx
f0109c61:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0109c64:	89 d0                	mov    %edx,%eax
f0109c66:	c1 e0 03             	shl    $0x3,%eax
f0109c69:	01 d0                	add    %edx,%eax
f0109c6b:	01 c0                	add    %eax,%eax
f0109c6d:	01 d0                	add    %edx,%eax
f0109c6f:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0109c76:	01 d0                	add    %edx,%eax
f0109c78:	c1 e0 04             	shl    $0x4,%eax
f0109c7b:	01 c8                	add    %ecx,%eax
f0109c7d:	85 c0                	test   %eax,%eax
f0109c7f:	75 17                	jne    f0109c98 <env_init+0xa2>
f0109c81:	83 ec 04             	sub    $0x4,%esp
f0109c84:	68 fc 66 13 f0       	push   $0xf01366fc
f0109c89:	68 19 02 00 00       	push   $0x219
f0109c8e:	68 c1 66 13 f0       	push   $0xf01366c1
f0109c93:	e8 6d 65 ff ff       	call   f0100205 <_panic>
f0109c98:	8b 0d b0 1c 78 f0    	mov    0xf0781cb0,%ecx
f0109c9e:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0109ca1:	89 d0                	mov    %edx,%eax
f0109ca3:	c1 e0 03             	shl    $0x3,%eax
f0109ca6:	01 d0                	add    %edx,%eax
f0109ca8:	01 c0                	add    %eax,%eax
f0109caa:	01 d0                	add    %edx,%eax
f0109cac:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0109cb3:	01 d0                	add    %edx,%eax
f0109cb5:	c1 e0 04             	shl    $0x4,%eax
f0109cb8:	01 c8                	add    %ecx,%eax
f0109cba:	8b 15 b8 1c 78 f0    	mov    0xf0781cb8,%edx
f0109cc0:	89 50 44             	mov    %edx,0x44(%eax)
f0109cc3:	8b 40 44             	mov    0x44(%eax),%eax
f0109cc6:	85 c0                	test   %eax,%eax
f0109cc8:	74 2d                	je     f0109cf7 <env_init+0x101>
f0109cca:	8b 0d b8 1c 78 f0    	mov    0xf0781cb8,%ecx
f0109cd0:	8b 1d b0 1c 78 f0    	mov    0xf0781cb0,%ebx
f0109cd6:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0109cd9:	89 d0                	mov    %edx,%eax
f0109cdb:	c1 e0 03             	shl    $0x3,%eax
f0109cde:	01 d0                	add    %edx,%eax
f0109ce0:	01 c0                	add    %eax,%eax
f0109ce2:	01 d0                	add    %edx,%eax
f0109ce4:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0109ceb:	01 d0                	add    %edx,%eax
f0109ced:	c1 e0 04             	shl    $0x4,%eax
f0109cf0:	01 d8                	add    %ebx,%eax
f0109cf2:	89 41 48             	mov    %eax,0x48(%ecx)
f0109cf5:	eb 27                	jmp    f0109d1e <env_init+0x128>
f0109cf7:	8b 0d b0 1c 78 f0    	mov    0xf0781cb0,%ecx
f0109cfd:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0109d00:	89 d0                	mov    %edx,%eax
f0109d02:	c1 e0 03             	shl    $0x3,%eax
f0109d05:	01 d0                	add    %edx,%eax
f0109d07:	01 c0                	add    %eax,%eax
f0109d09:	01 d0                	add    %edx,%eax
f0109d0b:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0109d12:	01 d0                	add    %edx,%eax
f0109d14:	c1 e0 04             	shl    $0x4,%eax
f0109d17:	01 c8                	add    %ecx,%eax
f0109d19:	a3 bc 1c 78 f0       	mov    %eax,0xf0781cbc
f0109d1e:	8b 0d b0 1c 78 f0    	mov    0xf0781cb0,%ecx
f0109d24:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0109d27:	89 d0                	mov    %edx,%eax
f0109d29:	c1 e0 03             	shl    $0x3,%eax
f0109d2c:	01 d0                	add    %edx,%eax
f0109d2e:	01 c0                	add    %eax,%eax
f0109d30:	01 d0                	add    %edx,%eax
f0109d32:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0109d39:	01 d0                	add    %edx,%eax
f0109d3b:	c1 e0 04             	shl    $0x4,%eax
f0109d3e:	01 c8                	add    %ecx,%eax
f0109d40:	a3 b8 1c 78 f0       	mov    %eax,0xf0781cb8
f0109d45:	8b 0d b0 1c 78 f0    	mov    0xf0781cb0,%ecx
f0109d4b:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0109d4e:	89 d0                	mov    %edx,%eax
f0109d50:	c1 e0 03             	shl    $0x3,%eax
f0109d53:	01 d0                	add    %edx,%eax
f0109d55:	01 c0                	add    %eax,%eax
f0109d57:	01 d0                	add    %edx,%eax
f0109d59:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0109d60:	01 d0                	add    %edx,%eax
f0109d62:	c1 e0 04             	shl    $0x4,%eax
f0109d65:	01 c8                	add    %ecx,%eax
f0109d67:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f0109d6e:	a1 c4 1c 78 f0       	mov    0xf0781cc4,%eax
f0109d73:	40                   	inc    %eax
f0109d74:	a3 c4 1c 78 f0       	mov    %eax,0xf0781cc4
//

void env_init(void)
{
	int iEnv = NENV-1;
	for(; iEnv >= 0; iEnv--)
f0109d79:	ff 4d f4             	decl   -0xc(%ebp)
f0109d7c:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0109d80:	0f 89 83 fe ff ff    	jns    f0109c09 <env_init+0x13>
	{
		envs[iEnv].env_status = ENV_FREE;
		envs[iEnv].env_id = 0;
		LIST_INSERT_HEAD(&env_free_list, &envs[iEnv]);
	}
}
f0109d86:	90                   	nop
f0109d87:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f0109d8a:	c9                   	leave  
f0109d8b:	c3                   	ret    

f0109d8c <allocate_environment>:
//
// Returns 0 on success, < 0 on failure.  Errors include:
//	E_NO_FREE_ENV if all NENVS environments are allocated
//
int allocate_environment(struct Env** e)
{
f0109d8c:	55                   	push   %ebp
f0109d8d:	89 e5                	mov    %esp,%ebp
	if (!(*e = LIST_FIRST(&env_free_list)))
f0109d8f:	8b 15 b8 1c 78 f0    	mov    0xf0781cb8,%edx
f0109d95:	8b 45 08             	mov    0x8(%ebp),%eax
f0109d98:	89 10                	mov    %edx,(%eax)
f0109d9a:	8b 45 08             	mov    0x8(%ebp),%eax
f0109d9d:	8b 00                	mov    (%eax),%eax
f0109d9f:	85 c0                	test   %eax,%eax
f0109da1:	75 07                	jne    f0109daa <allocate_environment+0x1e>
		return E_NO_FREE_ENV;
f0109da3:	b8 fb ff ff ff       	mov    $0xfffffffb,%eax
f0109da8:	eb 11                	jmp    f0109dbb <allocate_environment+0x2f>
	(*e)->env_status = ENV_UNKNOWN;
f0109daa:	8b 45 08             	mov    0x8(%ebp),%eax
f0109dad:	8b 00                	mov    (%eax),%eax
f0109daf:	c7 40 54 06 00 00 00 	movl   $0x6,0x54(%eax)
	return 0;
f0109db6:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0109dbb:	5d                   	pop    %ebp
f0109dbc:	c3                   	ret    

f0109dbd <free_environment>:
//===============================
// 3) FREE ENV STRUCT:
//===============================
// Free the given environment "e", simply by adding it to the free environment list.
void free_environment(struct Env* e)
{
f0109dbd:	55                   	push   %ebp
f0109dbe:	89 e5                	mov    %esp,%ebp
f0109dc0:	83 ec 08             	sub    $0x8,%esp
	memset(e, 0, sizeof(*e));
f0109dc3:	83 ec 04             	sub    $0x4,%esp
f0109dc6:	68 f0 05 00 00       	push   $0x5f0
f0109dcb:	6a 00                	push   $0x0
f0109dcd:	ff 75 08             	pushl  0x8(%ebp)
f0109dd0:	e8 0b 76 02 00       	call   f01313e0 <memset>
f0109dd5:	83 c4 10             	add    $0x10,%esp
	e->env_status = ENV_FREE;
f0109dd8:	8b 45 08             	mov    0x8(%ebp),%eax
f0109ddb:	c7 40 54 00 00 00 00 	movl   $0x0,0x54(%eax)
	LIST_INSERT_HEAD(&env_free_list, e);
f0109de2:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0109de6:	75 17                	jne    f0109dff <free_environment+0x42>
f0109de8:	83 ec 04             	sub    $0x4,%esp
f0109deb:	68 fc 66 13 f0       	push   $0xf01366fc
f0109df0:	68 36 02 00 00       	push   $0x236
f0109df5:	68 c1 66 13 f0       	push   $0xf01366c1
f0109dfa:	e8 06 64 ff ff       	call   f0100205 <_panic>
f0109dff:	8b 15 b8 1c 78 f0    	mov    0xf0781cb8,%edx
f0109e05:	8b 45 08             	mov    0x8(%ebp),%eax
f0109e08:	89 50 44             	mov    %edx,0x44(%eax)
f0109e0b:	8b 45 08             	mov    0x8(%ebp),%eax
f0109e0e:	8b 40 44             	mov    0x44(%eax),%eax
f0109e11:	85 c0                	test   %eax,%eax
f0109e13:	74 0d                	je     f0109e22 <free_environment+0x65>
f0109e15:	a1 b8 1c 78 f0       	mov    0xf0781cb8,%eax
f0109e1a:	8b 55 08             	mov    0x8(%ebp),%edx
f0109e1d:	89 50 48             	mov    %edx,0x48(%eax)
f0109e20:	eb 08                	jmp    f0109e2a <free_environment+0x6d>
f0109e22:	8b 45 08             	mov    0x8(%ebp),%eax
f0109e25:	a3 bc 1c 78 f0       	mov    %eax,0xf0781cbc
f0109e2a:	8b 45 08             	mov    0x8(%ebp),%eax
f0109e2d:	a3 b8 1c 78 f0       	mov    %eax,0xf0781cb8
f0109e32:	8b 45 08             	mov    0x8(%ebp),%eax
f0109e35:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f0109e3c:	a1 c4 1c 78 f0       	mov    0xf0781cc4,%eax
f0109e41:	40                   	inc    %eax
f0109e42:	a3 c4 1c 78 f0       	mov    %eax,0xf0781cc4
}
f0109e47:	90                   	nop
f0109e48:	c9                   	leave  
f0109e49:	c3                   	ret    

f0109e4a <create_user_page_WS>:

//===============================================
// 4) DYNAMICALLY ALLOCATE SPACE FOR WORKING SET:
//===============================================
void * create_user_page_WS(struct Env * e, unsigned int numOfElements)
{
f0109e4a:	55                   	push   %ebp
f0109e4b:	89 e5                	mov    %esp,%ebp
f0109e4d:	83 ec 18             	sub    $0x18,%esp
	//TODO: [PROJECT MS3] [PROGRAM LOAD] create_user_page_WS()
	// Write your code here, remove the panic and write your code
	//panic("create_user_page_WS() is not implemented yet...!!");
	uint32 nBytes = sizeof(struct WorkingSetElement) * numOfElements;
f0109e50:	8b 55 0c             	mov    0xc(%ebp),%edx
f0109e53:	89 d0                	mov    %edx,%eax
f0109e55:	01 c0                	add    %eax,%eax
f0109e57:	01 d0                	add    %edx,%eax
f0109e59:	c1 e0 03             	shl    $0x3,%eax
f0109e5c:	89 45 f4             	mov    %eax,-0xc(%ebp)
	struct WorkingSetElement* ptr_page_WS = kmalloc(nBytes);
f0109e5f:	83 ec 0c             	sub    $0xc,%esp
f0109e62:	ff 75 f4             	pushl  -0xc(%ebp)
f0109e65:	e8 1b da ff ff       	call   f0107885 <kmalloc>
f0109e6a:	83 c4 10             	add    $0x10,%esp
f0109e6d:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if(ptr_page_WS == NULL)
f0109e70:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0109e74:	75 17                	jne    f0109e8d <create_user_page_WS+0x43>
		panic("NOT ENOUGH KERNEL HEAP SPACE");
f0109e76:	83 ec 04             	sub    $0x4,%esp
f0109e79:	68 53 67 13 f0       	push   $0xf0136753
f0109e7e:	68 44 02 00 00       	push   $0x244
f0109e83:	68 c1 66 13 f0       	push   $0xf01366c1
f0109e88:	e8 78 63 ff ff       	call   f0100205 <_panic>
	return ptr_page_WS;
f0109e8d:	8b 45 f0             	mov    -0x10(%ebp),%eax
	//Use kmalloc() to allocate a new space for a working set with numOfElements elements
}
f0109e90:	c9                   	leave  
f0109e91:	c3                   	ret    

f0109e92 <create_user_directory>:

//==================================================
// 5) DYNAMICALLY ALLOCATE SPACE FOR USER DIRECTORY:
//==================================================
void * create_user_directory()
{
f0109e92:	55                   	push   %ebp
f0109e93:	89 e5                	mov    %esp,%ebp
f0109e95:	83 ec 18             	sub    $0x18,%esp
	//TODO: [PROJECT MS3] [PROGRAM LOAD] create_user_directory()
	// Write your code here, remove the panic and write your code
	//panic("create_user_directory() is not implemented yet...!!");
	uint32* ptr_user_page_directory = kmalloc(PAGE_SIZE);
f0109e98:	83 ec 0c             	sub    $0xc,%esp
f0109e9b:	68 00 10 00 00       	push   $0x1000
f0109ea0:	e8 e0 d9 ff ff       	call   f0107885 <kmalloc>
f0109ea5:	83 c4 10             	add    $0x10,%esp
f0109ea8:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if(ptr_user_page_directory == NULL)
f0109eab:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0109eaf:	75 17                	jne    f0109ec8 <create_user_directory+0x36>
		panic("NOT ENOUGH KERNEL HEAP SPACE");
f0109eb1:	83 ec 04             	sub    $0x4,%esp
f0109eb4:	68 53 67 13 f0       	push   $0xf0136753
f0109eb9:	68 53 02 00 00       	push   $0x253
f0109ebe:	68 c1 66 13 f0       	push   $0xf01366c1
f0109ec3:	e8 3d 63 ff ff       	call   f0100205 <_panic>
	return ptr_user_page_directory;
f0109ec8:	8b 45 f4             	mov    -0xc(%ebp),%eax
	//Use kmalloc() to allocate a new directory
}
f0109ecb:	c9                   	leave  
f0109ecc:	c3                   	ret    

f0109ecd <program_segment_alloc_map_copy_workingset>:
//
// The allocation shouldn't failed
// return 0
//
static int program_segment_alloc_map_copy_workingset(struct Env *e, struct ProgramSegment* seg, uint32* allocated_pages, uint32 remaining_ws_pages, uint32* lastTableNumber)
{
f0109ecd:	55                   	push   %ebp
f0109ece:	89 e5                	mov    %esp,%ebp
f0109ed0:	53                   	push   %ebx
f0109ed1:	83 ec 44             	sub    $0x44,%esp
	void *vaddr = seg->virtual_address;
f0109ed4:	8b 45 0c             	mov    0xc(%ebp),%eax
f0109ed7:	8b 40 0c             	mov    0xc(%eax),%eax
f0109eda:	89 45 e4             	mov    %eax,-0x1c(%ebp)
	uint32 length = seg->size_in_memory;
f0109edd:	8b 45 0c             	mov    0xc(%ebp),%eax
f0109ee0:	8b 40 08             	mov    0x8(%eax),%eax
f0109ee3:	89 45 e0             	mov    %eax,-0x20(%ebp)

	uint32 end_vaddr = ROUNDUP((uint32)vaddr + length,PAGE_SIZE) ;
f0109ee6:	c7 45 dc 00 10 00 00 	movl   $0x1000,-0x24(%ebp)
f0109eed:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f0109ef0:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0109ef3:	01 c2                	add    %eax,%edx
f0109ef5:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0109ef8:	01 d0                	add    %edx,%eax
f0109efa:	48                   	dec    %eax
f0109efb:	89 45 d8             	mov    %eax,-0x28(%ebp)
f0109efe:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0109f01:	ba 00 00 00 00       	mov    $0x0,%edx
f0109f06:	f7 75 dc             	divl   -0x24(%ebp)
f0109f09:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0109f0c:	29 d0                	sub    %edx,%eax
f0109f0e:	89 45 d4             	mov    %eax,-0x2c(%ebp)
	uint32 iVA = ROUNDDOWN((uint32)vaddr,PAGE_SIZE) ;
f0109f11:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0109f14:	89 45 d0             	mov    %eax,-0x30(%ebp)
f0109f17:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0109f1a:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0109f1f:	89 45 f4             	mov    %eax,-0xc(%ebp)
	int r ;
	uint32 i = 0 ;
f0109f22:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	struct FrameInfo *p = NULL;
f0109f29:	c7 45 c0 00 00 00 00 	movl   $0x0,-0x40(%ebp)

	*allocated_pages = 0;
f0109f30:	8b 45 10             	mov    0x10(%ebp),%eax
f0109f33:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	/*2015*/// Load max of 6 pages only for the segment that start with va = 200000 [EXCEPT tpp]
	if (iVA == 0x200000 && strcmp(e->prog_name, "tpp")!=0)
f0109f39:	81 7d f4 00 00 20 00 	cmpl   $0x200000,-0xc(%ebp)
f0109f40:	0f 85 c8 05 00 00    	jne    f010a50e <program_segment_alloc_map_copy_workingset+0x641>
f0109f46:	8b 45 08             	mov    0x8(%ebp),%eax
f0109f49:	05 5c 05 00 00       	add    $0x55c,%eax
f0109f4e:	83 ec 08             	sub    $0x8,%esp
f0109f51:	68 70 67 13 f0       	push   $0xf0136770
f0109f56:	50                   	push   %eax
f0109f57:	e8 a2 73 02 00       	call   f01312fe <strcmp>
f0109f5c:	83 c4 10             	add    $0x10,%esp
f0109f5f:	85 c0                	test   %eax,%eax
f0109f61:	0f 84 a7 05 00 00    	je     f010a50e <program_segment_alloc_map_copy_workingset+0x641>
		remaining_ws_pages = remaining_ws_pages < 6 ? remaining_ws_pages:6 ;
f0109f67:	8b 45 14             	mov    0x14(%ebp),%eax
f0109f6a:	83 f8 06             	cmp    $0x6,%eax
f0109f6d:	76 05                	jbe    f0109f74 <program_segment_alloc_map_copy_workingset+0xa7>
f0109f6f:	b8 06 00 00 00       	mov    $0x6,%eax
f0109f74:	89 45 14             	mov    %eax,0x14(%ebp)
	/*==========================================================================================*/
	for (; iVA < end_vaddr && i<remaining_ws_pages; i++, iVA += PAGE_SIZE)
f0109f77:	e9 92 05 00 00       	jmp    f010a50e <program_segment_alloc_map_copy_workingset+0x641>
	{
		// Allocate a page
		allocate_frame(&p) ;
f0109f7c:	83 ec 0c             	sub    $0xc,%esp
f0109f7f:	8d 45 c0             	lea    -0x40(%ebp),%eax
f0109f82:	50                   	push   %eax
f0109f83:	e8 6a c9 ff ff       	call   f01068f2 <allocate_frame>
f0109f88:	83 c4 10             	add    $0x10,%esp

		LOG_STRING("segment page allocated");
		loadtime_map_frame(e->env_page_directory, p, iVA, PERM_USER | PERM_WRITEABLE);
f0109f8b:	8b 55 c0             	mov    -0x40(%ebp),%edx
f0109f8e:	8b 45 08             	mov    0x8(%ebp),%eax
f0109f91:	8b 40 5c             	mov    0x5c(%eax),%eax
f0109f94:	6a 06                	push   $0x6
f0109f96:	ff 75 f4             	pushl  -0xc(%ebp)
f0109f99:	52                   	push   %edx
f0109f9a:	50                   	push   %eax
f0109f9b:	e8 5d cf ff ff       	call   f0106efd <loadtime_map_frame>
f0109fa0:	83 c4 10             	add    $0x10,%esp
		LOG_STRING("segment page mapped");

		LOG_STATMENT(cprintf("Updating working set entry # %d",e->page_last_WS_index));

		e->ptr_pageWorkingSet[e->page_last_WS_index].virtual_address = iVA;
f0109fa3:	8b 45 08             	mov    0x8(%ebp),%eax
f0109fa6:	8b 48 78             	mov    0x78(%eax),%ecx
f0109fa9:	8b 45 08             	mov    0x8(%ebp),%eax
f0109fac:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f0109fb2:	89 d0                	mov    %edx,%eax
f0109fb4:	01 c0                	add    %eax,%eax
f0109fb6:	01 d0                	add    %edx,%eax
f0109fb8:	c1 e0 03             	shl    $0x3,%eax
f0109fbb:	8d 14 01             	lea    (%ecx,%eax,1),%edx
f0109fbe:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0109fc1:	89 02                	mov    %eax,(%edx)
		e->ptr_pageWorkingSet[e->page_last_WS_index].empty = 0;
f0109fc3:	8b 45 08             	mov    0x8(%ebp),%eax
f0109fc6:	8b 48 78             	mov    0x78(%eax),%ecx
f0109fc9:	8b 45 08             	mov    0x8(%ebp),%eax
f0109fcc:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f0109fd2:	89 d0                	mov    %edx,%eax
f0109fd4:	01 c0                	add    %eax,%eax
f0109fd6:	01 d0                	add    %edx,%eax
f0109fd8:	c1 e0 03             	shl    $0x3,%eax
f0109fdb:	01 c8                	add    %ecx,%eax
f0109fdd:	c6 40 04 00          	movb   $0x0,0x4(%eax)
		e->ptr_pageWorkingSet[e->page_last_WS_index].time_stamp = 0;
f0109fe1:	8b 45 08             	mov    0x8(%ebp),%eax
f0109fe4:	8b 48 78             	mov    0x78(%eax),%ecx
f0109fe7:	8b 45 08             	mov    0x8(%ebp),%eax
f0109fea:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f0109ff0:	89 d0                	mov    %edx,%eax
f0109ff2:	01 c0                	add    %eax,%eax
f0109ff4:	01 d0                	add    %edx,%eax
f0109ff6:	c1 e0 03             	shl    $0x3,%eax
f0109ff9:	01 c8                	add    %ecx,%eax
f0109ffb:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)

		//2020
		if (isPageReplacmentAlgorithmLRU(PG_REP_LRU_LISTS_APPROX))
f010a002:	83 ec 0c             	sub    $0xc,%esp
f010a005:	6a 02                	push   $0x2
f010a007:	e8 37 3d 00 00       	call   f010dd43 <isPageReplacmentAlgorithmLRU>
f010a00c:	83 c4 10             	add    $0x10,%esp
f010a00f:	85 c0                	test   %eax,%eax
f010a011:	0f 84 c8 03 00 00    	je     f010a3df <program_segment_alloc_map_copy_workingset+0x512>
		{
			LIST_REMOVE(&(e->PageWorkingSetList), &(e->ptr_pageWorkingSet[e->page_last_WS_index]));
f010a017:	8b 45 08             	mov    0x8(%ebp),%eax
f010a01a:	8b 48 78             	mov    0x78(%eax),%ecx
f010a01d:	8b 45 08             	mov    0x8(%ebp),%eax
f010a020:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f010a026:	89 d0                	mov    %edx,%eax
f010a028:	01 c0                	add    %eax,%eax
f010a02a:	01 d0                	add    %edx,%eax
f010a02c:	c1 e0 03             	shl    $0x3,%eax
f010a02f:	01 c8                	add    %ecx,%eax
f010a031:	85 c0                	test   %eax,%eax
f010a033:	75 17                	jne    f010a04c <program_segment_alloc_map_copy_workingset+0x17f>
f010a035:	83 ec 04             	sub    $0x4,%esp
f010a038:	68 de 66 13 f0       	push   $0xf01366de
f010a03d:	68 85 02 00 00       	push   $0x285
f010a042:	68 c1 66 13 f0       	push   $0xf01366c1
f010a047:	e8 b9 61 ff ff       	call   f0100205 <_panic>
f010a04c:	8b 45 08             	mov    0x8(%ebp),%eax
f010a04f:	8b 48 78             	mov    0x78(%eax),%ecx
f010a052:	8b 45 08             	mov    0x8(%ebp),%eax
f010a055:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f010a05b:	89 d0                	mov    %edx,%eax
f010a05d:	01 c0                	add    %eax,%eax
f010a05f:	01 d0                	add    %edx,%eax
f010a061:	c1 e0 03             	shl    $0x3,%eax
f010a064:	01 c8                	add    %ecx,%eax
f010a066:	8b 40 10             	mov    0x10(%eax),%eax
f010a069:	85 c0                	test   %eax,%eax
f010a06b:	74 3f                	je     f010a0ac <program_segment_alloc_map_copy_workingset+0x1df>
f010a06d:	8b 45 08             	mov    0x8(%ebp),%eax
f010a070:	8b 48 78             	mov    0x78(%eax),%ecx
f010a073:	8b 45 08             	mov    0x8(%ebp),%eax
f010a076:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f010a07c:	89 d0                	mov    %edx,%eax
f010a07e:	01 c0                	add    %eax,%eax
f010a080:	01 d0                	add    %edx,%eax
f010a082:	c1 e0 03             	shl    $0x3,%eax
f010a085:	01 c8                	add    %ecx,%eax
f010a087:	8b 50 10             	mov    0x10(%eax),%edx
f010a08a:	8b 45 08             	mov    0x8(%ebp),%eax
f010a08d:	8b 58 78             	mov    0x78(%eax),%ebx
f010a090:	8b 45 08             	mov    0x8(%ebp),%eax
f010a093:	8b 88 2c 05 00 00    	mov    0x52c(%eax),%ecx
f010a099:	89 c8                	mov    %ecx,%eax
f010a09b:	01 c0                	add    %eax,%eax
f010a09d:	01 c8                	add    %ecx,%eax
f010a09f:	c1 e0 03             	shl    $0x3,%eax
f010a0a2:	01 d8                	add    %ebx,%eax
f010a0a4:	8b 40 14             	mov    0x14(%eax),%eax
f010a0a7:	89 42 14             	mov    %eax,0x14(%edx)
f010a0aa:	eb 26                	jmp    f010a0d2 <program_segment_alloc_map_copy_workingset+0x205>
f010a0ac:	8b 45 08             	mov    0x8(%ebp),%eax
f010a0af:	8b 48 78             	mov    0x78(%eax),%ecx
f010a0b2:	8b 45 08             	mov    0x8(%ebp),%eax
f010a0b5:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f010a0bb:	89 d0                	mov    %edx,%eax
f010a0bd:	01 c0                	add    %eax,%eax
f010a0bf:	01 d0                	add    %edx,%eax
f010a0c1:	c1 e0 03             	shl    $0x3,%eax
f010a0c4:	01 c8                	add    %ecx,%eax
f010a0c6:	8b 50 14             	mov    0x14(%eax),%edx
f010a0c9:	8b 45 08             	mov    0x8(%ebp),%eax
f010a0cc:	89 90 bc 05 00 00    	mov    %edx,0x5bc(%eax)
f010a0d2:	8b 45 08             	mov    0x8(%ebp),%eax
f010a0d5:	8b 48 78             	mov    0x78(%eax),%ecx
f010a0d8:	8b 45 08             	mov    0x8(%ebp),%eax
f010a0db:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f010a0e1:	89 d0                	mov    %edx,%eax
f010a0e3:	01 c0                	add    %eax,%eax
f010a0e5:	01 d0                	add    %edx,%eax
f010a0e7:	c1 e0 03             	shl    $0x3,%eax
f010a0ea:	01 c8                	add    %ecx,%eax
f010a0ec:	8b 40 14             	mov    0x14(%eax),%eax
f010a0ef:	85 c0                	test   %eax,%eax
f010a0f1:	74 3f                	je     f010a132 <program_segment_alloc_map_copy_workingset+0x265>
f010a0f3:	8b 45 08             	mov    0x8(%ebp),%eax
f010a0f6:	8b 48 78             	mov    0x78(%eax),%ecx
f010a0f9:	8b 45 08             	mov    0x8(%ebp),%eax
f010a0fc:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f010a102:	89 d0                	mov    %edx,%eax
f010a104:	01 c0                	add    %eax,%eax
f010a106:	01 d0                	add    %edx,%eax
f010a108:	c1 e0 03             	shl    $0x3,%eax
f010a10b:	01 c8                	add    %ecx,%eax
f010a10d:	8b 50 14             	mov    0x14(%eax),%edx
f010a110:	8b 45 08             	mov    0x8(%ebp),%eax
f010a113:	8b 58 78             	mov    0x78(%eax),%ebx
f010a116:	8b 45 08             	mov    0x8(%ebp),%eax
f010a119:	8b 88 2c 05 00 00    	mov    0x52c(%eax),%ecx
f010a11f:	89 c8                	mov    %ecx,%eax
f010a121:	01 c0                	add    %eax,%eax
f010a123:	01 c8                	add    %ecx,%eax
f010a125:	c1 e0 03             	shl    $0x3,%eax
f010a128:	01 d8                	add    %ebx,%eax
f010a12a:	8b 40 10             	mov    0x10(%eax),%eax
f010a12d:	89 42 10             	mov    %eax,0x10(%edx)
f010a130:	eb 26                	jmp    f010a158 <program_segment_alloc_map_copy_workingset+0x28b>
f010a132:	8b 45 08             	mov    0x8(%ebp),%eax
f010a135:	8b 48 78             	mov    0x78(%eax),%ecx
f010a138:	8b 45 08             	mov    0x8(%ebp),%eax
f010a13b:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f010a141:	89 d0                	mov    %edx,%eax
f010a143:	01 c0                	add    %eax,%eax
f010a145:	01 d0                	add    %edx,%eax
f010a147:	c1 e0 03             	shl    $0x3,%eax
f010a14a:	01 c8                	add    %ecx,%eax
f010a14c:	8b 50 10             	mov    0x10(%eax),%edx
f010a14f:	8b 45 08             	mov    0x8(%ebp),%eax
f010a152:	89 90 b8 05 00 00    	mov    %edx,0x5b8(%eax)
f010a158:	8b 45 08             	mov    0x8(%ebp),%eax
f010a15b:	8b 48 78             	mov    0x78(%eax),%ecx
f010a15e:	8b 45 08             	mov    0x8(%ebp),%eax
f010a161:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f010a167:	89 d0                	mov    %edx,%eax
f010a169:	01 c0                	add    %eax,%eax
f010a16b:	01 d0                	add    %edx,%eax
f010a16d:	c1 e0 03             	shl    $0x3,%eax
f010a170:	01 c8                	add    %ecx,%eax
f010a172:	c7 40 10 00 00 00 00 	movl   $0x0,0x10(%eax)
f010a179:	8b 45 08             	mov    0x8(%ebp),%eax
f010a17c:	8b 48 78             	mov    0x78(%eax),%ecx
f010a17f:	8b 45 08             	mov    0x8(%ebp),%eax
f010a182:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f010a188:	89 d0                	mov    %edx,%eax
f010a18a:	01 c0                	add    %eax,%eax
f010a18c:	01 d0                	add    %edx,%eax
f010a18e:	c1 e0 03             	shl    $0x3,%eax
f010a191:	01 c8                	add    %ecx,%eax
f010a193:	c7 40 14 00 00 00 00 	movl   $0x0,0x14(%eax)
f010a19a:	8b 45 08             	mov    0x8(%ebp),%eax
f010a19d:	8b 80 c4 05 00 00    	mov    0x5c4(%eax),%eax
f010a1a3:	8d 50 ff             	lea    -0x1(%eax),%edx
f010a1a6:	8b 45 08             	mov    0x8(%ebp),%eax
f010a1a9:	89 90 c4 05 00 00    	mov    %edx,0x5c4(%eax)
			//Always leave 1 page in Active list for the stack
			if (LIST_SIZE(&(e->ActiveList)) < e->ActiveListSize - 1)
f010a1af:	8b 45 08             	mov    0x8(%ebp),%eax
f010a1b2:	8b 90 d4 05 00 00    	mov    0x5d4(%eax),%edx
f010a1b8:	8b 45 08             	mov    0x8(%ebp),%eax
f010a1bb:	8b 80 e8 05 00 00    	mov    0x5e8(%eax),%eax
f010a1c1:	48                   	dec    %eax
f010a1c2:	39 c2                	cmp    %eax,%edx
f010a1c4:	0f 83 0d 01 00 00    	jae    f010a2d7 <program_segment_alloc_map_copy_workingset+0x40a>
			{
				LIST_INSERT_HEAD(&(e->ActiveList), &(e->ptr_pageWorkingSet[e->page_last_WS_index]));
f010a1ca:	8b 45 08             	mov    0x8(%ebp),%eax
f010a1cd:	8b 48 78             	mov    0x78(%eax),%ecx
f010a1d0:	8b 45 08             	mov    0x8(%ebp),%eax
f010a1d3:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f010a1d9:	89 d0                	mov    %edx,%eax
f010a1db:	01 c0                	add    %eax,%eax
f010a1dd:	01 d0                	add    %edx,%eax
f010a1df:	c1 e0 03             	shl    $0x3,%eax
f010a1e2:	01 c8                	add    %ecx,%eax
f010a1e4:	85 c0                	test   %eax,%eax
f010a1e6:	75 17                	jne    f010a1ff <program_segment_alloc_map_copy_workingset+0x332>
f010a1e8:	83 ec 04             	sub    $0x4,%esp
f010a1eb:	68 fc 66 13 f0       	push   $0xf01366fc
f010a1f0:	68 89 02 00 00       	push   $0x289
f010a1f5:	68 c1 66 13 f0       	push   $0xf01366c1
f010a1fa:	e8 06 60 ff ff       	call   f0100205 <_panic>
f010a1ff:	8b 45 08             	mov    0x8(%ebp),%eax
f010a202:	8b 48 78             	mov    0x78(%eax),%ecx
f010a205:	8b 45 08             	mov    0x8(%ebp),%eax
f010a208:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f010a20e:	89 d0                	mov    %edx,%eax
f010a210:	01 c0                	add    %eax,%eax
f010a212:	01 d0                	add    %edx,%eax
f010a214:	c1 e0 03             	shl    $0x3,%eax
f010a217:	01 c8                	add    %ecx,%eax
f010a219:	8b 55 08             	mov    0x8(%ebp),%edx
f010a21c:	8b 92 c8 05 00 00    	mov    0x5c8(%edx),%edx
f010a222:	89 50 10             	mov    %edx,0x10(%eax)
f010a225:	8b 40 10             	mov    0x10(%eax),%eax
f010a228:	85 c0                	test   %eax,%eax
f010a22a:	74 28                	je     f010a254 <program_segment_alloc_map_copy_workingset+0x387>
f010a22c:	8b 45 08             	mov    0x8(%ebp),%eax
f010a22f:	8b 90 c8 05 00 00    	mov    0x5c8(%eax),%edx
f010a235:	8b 45 08             	mov    0x8(%ebp),%eax
f010a238:	8b 58 78             	mov    0x78(%eax),%ebx
f010a23b:	8b 45 08             	mov    0x8(%ebp),%eax
f010a23e:	8b 88 2c 05 00 00    	mov    0x52c(%eax),%ecx
f010a244:	89 c8                	mov    %ecx,%eax
f010a246:	01 c0                	add    %eax,%eax
f010a248:	01 c8                	add    %ecx,%eax
f010a24a:	c1 e0 03             	shl    $0x3,%eax
f010a24d:	01 d8                	add    %ebx,%eax
f010a24f:	89 42 14             	mov    %eax,0x14(%edx)
f010a252:	eb 24                	jmp    f010a278 <program_segment_alloc_map_copy_workingset+0x3ab>
f010a254:	8b 45 08             	mov    0x8(%ebp),%eax
f010a257:	8b 48 78             	mov    0x78(%eax),%ecx
f010a25a:	8b 45 08             	mov    0x8(%ebp),%eax
f010a25d:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f010a263:	89 d0                	mov    %edx,%eax
f010a265:	01 c0                	add    %eax,%eax
f010a267:	01 d0                	add    %edx,%eax
f010a269:	c1 e0 03             	shl    $0x3,%eax
f010a26c:	8d 14 01             	lea    (%ecx,%eax,1),%edx
f010a26f:	8b 45 08             	mov    0x8(%ebp),%eax
f010a272:	89 90 cc 05 00 00    	mov    %edx,0x5cc(%eax)
f010a278:	8b 45 08             	mov    0x8(%ebp),%eax
f010a27b:	8b 48 78             	mov    0x78(%eax),%ecx
f010a27e:	8b 45 08             	mov    0x8(%ebp),%eax
f010a281:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f010a287:	89 d0                	mov    %edx,%eax
f010a289:	01 c0                	add    %eax,%eax
f010a28b:	01 d0                	add    %edx,%eax
f010a28d:	c1 e0 03             	shl    $0x3,%eax
f010a290:	8d 14 01             	lea    (%ecx,%eax,1),%edx
f010a293:	8b 45 08             	mov    0x8(%ebp),%eax
f010a296:	89 90 c8 05 00 00    	mov    %edx,0x5c8(%eax)
f010a29c:	8b 45 08             	mov    0x8(%ebp),%eax
f010a29f:	8b 48 78             	mov    0x78(%eax),%ecx
f010a2a2:	8b 45 08             	mov    0x8(%ebp),%eax
f010a2a5:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f010a2ab:	89 d0                	mov    %edx,%eax
f010a2ad:	01 c0                	add    %eax,%eax
f010a2af:	01 d0                	add    %edx,%eax
f010a2b1:	c1 e0 03             	shl    $0x3,%eax
f010a2b4:	01 c8                	add    %ecx,%eax
f010a2b6:	c7 40 14 00 00 00 00 	movl   $0x0,0x14(%eax)
f010a2bd:	8b 45 08             	mov    0x8(%ebp),%eax
f010a2c0:	8b 80 d4 05 00 00    	mov    0x5d4(%eax),%eax
f010a2c6:	8d 50 01             	lea    0x1(%eax),%edx
f010a2c9:	8b 45 08             	mov    0x8(%ebp),%eax
f010a2cc:	89 90 d4 05 00 00    	mov    %edx,0x5d4(%eax)
f010a2d2:	e9 08 01 00 00       	jmp    f010a3df <program_segment_alloc_map_copy_workingset+0x512>
			}
			else
			{
				//Add to LRU Second list
				LIST_INSERT_HEAD(&(e->SecondList), &(e->ptr_pageWorkingSet[e->page_last_WS_index]));
f010a2d7:	8b 45 08             	mov    0x8(%ebp),%eax
f010a2da:	8b 48 78             	mov    0x78(%eax),%ecx
f010a2dd:	8b 45 08             	mov    0x8(%ebp),%eax
f010a2e0:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f010a2e6:	89 d0                	mov    %edx,%eax
f010a2e8:	01 c0                	add    %eax,%eax
f010a2ea:	01 d0                	add    %edx,%eax
f010a2ec:	c1 e0 03             	shl    $0x3,%eax
f010a2ef:	01 c8                	add    %ecx,%eax
f010a2f1:	85 c0                	test   %eax,%eax
f010a2f3:	75 17                	jne    f010a30c <program_segment_alloc_map_copy_workingset+0x43f>
f010a2f5:	83 ec 04             	sub    $0x4,%esp
f010a2f8:	68 fc 66 13 f0       	push   $0xf01366fc
f010a2fd:	68 8e 02 00 00       	push   $0x28e
f010a302:	68 c1 66 13 f0       	push   $0xf01366c1
f010a307:	e8 f9 5e ff ff       	call   f0100205 <_panic>
f010a30c:	8b 45 08             	mov    0x8(%ebp),%eax
f010a30f:	8b 48 78             	mov    0x78(%eax),%ecx
f010a312:	8b 45 08             	mov    0x8(%ebp),%eax
f010a315:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f010a31b:	89 d0                	mov    %edx,%eax
f010a31d:	01 c0                	add    %eax,%eax
f010a31f:	01 d0                	add    %edx,%eax
f010a321:	c1 e0 03             	shl    $0x3,%eax
f010a324:	01 c8                	add    %ecx,%eax
f010a326:	8b 55 08             	mov    0x8(%ebp),%edx
f010a329:	8b 92 d8 05 00 00    	mov    0x5d8(%edx),%edx
f010a32f:	89 50 10             	mov    %edx,0x10(%eax)
f010a332:	8b 40 10             	mov    0x10(%eax),%eax
f010a335:	85 c0                	test   %eax,%eax
f010a337:	74 28                	je     f010a361 <program_segment_alloc_map_copy_workingset+0x494>
f010a339:	8b 45 08             	mov    0x8(%ebp),%eax
f010a33c:	8b 90 d8 05 00 00    	mov    0x5d8(%eax),%edx
f010a342:	8b 45 08             	mov    0x8(%ebp),%eax
f010a345:	8b 58 78             	mov    0x78(%eax),%ebx
f010a348:	8b 45 08             	mov    0x8(%ebp),%eax
f010a34b:	8b 88 2c 05 00 00    	mov    0x52c(%eax),%ecx
f010a351:	89 c8                	mov    %ecx,%eax
f010a353:	01 c0                	add    %eax,%eax
f010a355:	01 c8                	add    %ecx,%eax
f010a357:	c1 e0 03             	shl    $0x3,%eax
f010a35a:	01 d8                	add    %ebx,%eax
f010a35c:	89 42 14             	mov    %eax,0x14(%edx)
f010a35f:	eb 24                	jmp    f010a385 <program_segment_alloc_map_copy_workingset+0x4b8>
f010a361:	8b 45 08             	mov    0x8(%ebp),%eax
f010a364:	8b 48 78             	mov    0x78(%eax),%ecx
f010a367:	8b 45 08             	mov    0x8(%ebp),%eax
f010a36a:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f010a370:	89 d0                	mov    %edx,%eax
f010a372:	01 c0                	add    %eax,%eax
f010a374:	01 d0                	add    %edx,%eax
f010a376:	c1 e0 03             	shl    $0x3,%eax
f010a379:	8d 14 01             	lea    (%ecx,%eax,1),%edx
f010a37c:	8b 45 08             	mov    0x8(%ebp),%eax
f010a37f:	89 90 dc 05 00 00    	mov    %edx,0x5dc(%eax)
f010a385:	8b 45 08             	mov    0x8(%ebp),%eax
f010a388:	8b 48 78             	mov    0x78(%eax),%ecx
f010a38b:	8b 45 08             	mov    0x8(%ebp),%eax
f010a38e:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f010a394:	89 d0                	mov    %edx,%eax
f010a396:	01 c0                	add    %eax,%eax
f010a398:	01 d0                	add    %edx,%eax
f010a39a:	c1 e0 03             	shl    $0x3,%eax
f010a39d:	8d 14 01             	lea    (%ecx,%eax,1),%edx
f010a3a0:	8b 45 08             	mov    0x8(%ebp),%eax
f010a3a3:	89 90 d8 05 00 00    	mov    %edx,0x5d8(%eax)
f010a3a9:	8b 45 08             	mov    0x8(%ebp),%eax
f010a3ac:	8b 48 78             	mov    0x78(%eax),%ecx
f010a3af:	8b 45 08             	mov    0x8(%ebp),%eax
f010a3b2:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f010a3b8:	89 d0                	mov    %edx,%eax
f010a3ba:	01 c0                	add    %eax,%eax
f010a3bc:	01 d0                	add    %edx,%eax
f010a3be:	c1 e0 03             	shl    $0x3,%eax
f010a3c1:	01 c8                	add    %ecx,%eax
f010a3c3:	c7 40 14 00 00 00 00 	movl   $0x0,0x14(%eax)
f010a3ca:	8b 45 08             	mov    0x8(%ebp),%eax
f010a3cd:	8b 80 e4 05 00 00    	mov    0x5e4(%eax),%eax
f010a3d3:	8d 50 01             	lea    0x1(%eax),%edx
f010a3d6:	8b 45 08             	mov    0x8(%ebp),%eax
f010a3d9:	89 90 e4 05 00 00    	mov    %edx,0x5e4(%eax)
			}
		}
		//=======================
		e->page_last_WS_index ++;
f010a3df:	8b 45 08             	mov    0x8(%ebp),%eax
f010a3e2:	8b 80 2c 05 00 00    	mov    0x52c(%eax),%eax
f010a3e8:	8d 50 01             	lea    0x1(%eax),%edx
f010a3eb:	8b 45 08             	mov    0x8(%ebp),%eax
f010a3ee:	89 90 2c 05 00 00    	mov    %edx,0x52c(%eax)
		e->page_last_WS_index %= (e->page_WS_max_size);
f010a3f4:	8b 45 08             	mov    0x8(%ebp),%eax
f010a3f7:	8b 80 2c 05 00 00    	mov    0x52c(%eax),%eax
f010a3fd:	8b 55 08             	mov    0x8(%ebp),%edx
f010a400:	8b 4a 74             	mov    0x74(%edx),%ecx
f010a403:	ba 00 00 00 00       	mov    $0x0,%edx
f010a408:	f7 f1                	div    %ecx
f010a40a:	8b 45 08             	mov    0x8(%ebp),%eax
f010a40d:	89 90 2c 05 00 00    	mov    %edx,0x52c(%eax)

		//if a new table is created during the mapping, add it to the table working set
		if(PDX(iVA) != (*lastTableNumber))
f010a413:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010a416:	c1 e8 16             	shr    $0x16,%eax
f010a419:	89 c2                	mov    %eax,%edx
f010a41b:	8b 45 18             	mov    0x18(%ebp),%eax
f010a41e:	8b 00                	mov    (%eax),%eax
f010a420:	39 c2                	cmp    %eax,%edx
f010a422:	0f 84 cf 00 00 00    	je     f010a4f7 <program_segment_alloc_map_copy_workingset+0x62a>
		{
			e->__ptr_tws[e->table_last_WS_index].virtual_address = ROUNDDOWN(iVA, PAGE_SIZE*1024);;
f010a428:	8b 45 08             	mov    0x8(%ebp),%eax
f010a42b:	8b 90 30 05 00 00    	mov    0x530(%eax),%edx
f010a431:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010a434:	89 45 cc             	mov    %eax,-0x34(%ebp)
f010a437:	8b 45 cc             	mov    -0x34(%ebp),%eax
f010a43a:	25 00 00 c0 ff       	and    $0xffc00000,%eax
f010a43f:	89 c1                	mov    %eax,%ecx
f010a441:	8b 5d 08             	mov    0x8(%ebp),%ebx
f010a444:	89 d0                	mov    %edx,%eax
f010a446:	01 c0                	add    %eax,%eax
f010a448:	01 d0                	add    %edx,%eax
f010a44a:	c1 e0 03             	shl    $0x3,%eax
f010a44d:	01 d8                	add    %ebx,%eax
f010a44f:	83 c0 7c             	add    $0x7c,%eax
f010a452:	89 08                	mov    %ecx,(%eax)
			e->__ptr_tws[e->table_last_WS_index].empty = 0;
f010a454:	8b 45 08             	mov    0x8(%ebp),%eax
f010a457:	8b 90 30 05 00 00    	mov    0x530(%eax),%edx
f010a45d:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010a460:	89 d0                	mov    %edx,%eax
f010a462:	01 c0                	add    %eax,%eax
f010a464:	01 d0                	add    %edx,%eax
f010a466:	c1 e0 03             	shl    $0x3,%eax
f010a469:	01 c8                	add    %ecx,%eax
f010a46b:	83 e8 80             	sub    $0xffffff80,%eax
f010a46e:	c6 00 00             	movb   $0x0,(%eax)
			e->__ptr_tws[e->table_last_WS_index].time_stamp = 0x00000000;
f010a471:	8b 45 08             	mov    0x8(%ebp),%eax
f010a474:	8b 90 30 05 00 00    	mov    0x530(%eax),%edx
f010a47a:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010a47d:	89 d0                	mov    %edx,%eax
f010a47f:	01 c0                	add    %eax,%eax
f010a481:	01 d0                	add    %edx,%eax
f010a483:	c1 e0 03             	shl    $0x3,%eax
f010a486:	01 c8                	add    %ecx,%eax
f010a488:	05 84 00 00 00       	add    $0x84,%eax
f010a48d:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
			e->table_last_WS_index ++;
f010a493:	8b 45 08             	mov    0x8(%ebp),%eax
f010a496:	8b 80 30 05 00 00    	mov    0x530(%eax),%eax
f010a49c:	8d 50 01             	lea    0x1(%eax),%edx
f010a49f:	8b 45 08             	mov    0x8(%ebp),%eax
f010a4a2:	89 90 30 05 00 00    	mov    %edx,0x530(%eax)
			e->table_last_WS_index %= __TWS_MAX_SIZE;
f010a4a8:	8b 45 08             	mov    0x8(%ebp),%eax
f010a4ab:	8b 80 30 05 00 00    	mov    0x530(%eax),%eax
f010a4b1:	b9 32 00 00 00       	mov    $0x32,%ecx
f010a4b6:	ba 00 00 00 00       	mov    $0x0,%edx
f010a4bb:	f7 f1                	div    %ecx
f010a4bd:	8b 45 08             	mov    0x8(%ebp),%eax
f010a4c0:	89 90 30 05 00 00    	mov    %edx,0x530(%eax)
			if (e->table_last_WS_index == 0)
f010a4c6:	8b 45 08             	mov    0x8(%ebp),%eax
f010a4c9:	8b 80 30 05 00 00    	mov    0x530(%eax),%eax
f010a4cf:	85 c0                	test   %eax,%eax
f010a4d1:	75 17                	jne    f010a4ea <program_segment_alloc_map_copy_workingset+0x61d>
				panic("\nenv_create: Table working set become FULL during the application loading. Please increase the table working set size to be able to load the program successfully\n");
f010a4d3:	83 ec 04             	sub    $0x4,%esp
f010a4d6:	68 74 67 13 f0       	push   $0xf0136774
f010a4db:	68 9e 02 00 00       	push   $0x29e
f010a4e0:	68 c1 66 13 f0       	push   $0xf01366c1
f010a4e5:	e8 1b 5d ff ff       	call   f0100205 <_panic>
			(*lastTableNumber) = PDX(iVA);
f010a4ea:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010a4ed:	c1 e8 16             	shr    $0x16,%eax
f010a4f0:	89 c2                	mov    %eax,%edx
f010a4f2:	8b 45 18             	mov    0x18(%ebp),%eax
f010a4f5:	89 10                	mov    %edx,(%eax)
		}

		/// TAKE CARE !!!! this was an destructive error
		/// DON'T MAKE IT " *allocated_pages ++ " EVER !
		(*allocated_pages) ++;
f010a4f7:	8b 45 10             	mov    0x10(%ebp),%eax
f010a4fa:	8b 00                	mov    (%eax),%eax
f010a4fc:	8d 50 01             	lea    0x1(%eax),%edx
f010a4ff:	8b 45 10             	mov    0x10(%ebp),%eax
f010a502:	89 10                	mov    %edx,(%eax)
	*allocated_pages = 0;
	/*2015*/// Load max of 6 pages only for the segment that start with va = 200000 [EXCEPT tpp]
	if (iVA == 0x200000 && strcmp(e->prog_name, "tpp")!=0)
		remaining_ws_pages = remaining_ws_pages < 6 ? remaining_ws_pages:6 ;
	/*==========================================================================================*/
	for (; iVA < end_vaddr && i<remaining_ws_pages; i++, iVA += PAGE_SIZE)
f010a504:	ff 45 f0             	incl   -0x10(%ebp)
f010a507:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
f010a50e:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010a511:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
f010a514:	73 0c                	jae    f010a522 <program_segment_alloc_map_copy_workingset+0x655>
f010a516:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010a519:	3b 45 14             	cmp    0x14(%ebp),%eax
f010a51c:	0f 82 5a fa ff ff    	jb     f0109f7c <program_segment_alloc_map_copy_workingset+0xaf>
		/// TAKE CARE !!!! this was an destructive error
		/// DON'T MAKE IT " *allocated_pages ++ " EVER !
		(*allocated_pages) ++;
	}

	uint8 *src_ptr = (uint8 *)(seg->ptr_start) ;
f010a522:	8b 45 0c             	mov    0xc(%ebp),%eax
f010a525:	8b 00                	mov    (%eax),%eax
f010a527:	89 45 ec             	mov    %eax,-0x14(%ebp)
	uint8 *dst_ptr = (uint8 *) seg->virtual_address;
f010a52a:	8b 45 0c             	mov    0xc(%ebp),%eax
f010a52d:	8b 40 0c             	mov    0xc(%eax),%eax
f010a530:	89 45 e8             	mov    %eax,-0x18(%ebp)

	//copy program segment page from (seg->ptr_start) to (seg->virtual_address)

	LOG_STATMENT(cprintf("copying data to allocated area VA %x from source %x",dst_ptr,src_ptr));
	while((uint32)dst_ptr < (ROUNDDOWN((uint32)vaddr,PAGE_SIZE) + (*allocated_pages)*PAGE_SIZE) &&
f010a533:	eb 10                	jmp    f010a545 <program_segment_alloc_map_copy_workingset+0x678>
			((uint32)dst_ptr< ((uint32)vaddr+ seg->size_in_file)) )
	{
		*dst_ptr = *src_ptr ;
f010a535:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010a538:	8a 10                	mov    (%eax),%dl
f010a53a:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010a53d:	88 10                	mov    %dl,(%eax)
		dst_ptr++ ;
f010a53f:	ff 45 e8             	incl   -0x18(%ebp)
		src_ptr++ ;
f010a542:	ff 45 ec             	incl   -0x14(%ebp)
	uint8 *dst_ptr = (uint8 *) seg->virtual_address;

	//copy program segment page from (seg->ptr_start) to (seg->virtual_address)

	LOG_STATMENT(cprintf("copying data to allocated area VA %x from source %x",dst_ptr,src_ptr));
	while((uint32)dst_ptr < (ROUNDDOWN((uint32)vaddr,PAGE_SIZE) + (*allocated_pages)*PAGE_SIZE) &&
f010a545:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010a548:	89 45 c8             	mov    %eax,-0x38(%ebp)
f010a54b:	8b 45 c8             	mov    -0x38(%ebp),%eax
f010a54e:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f010a553:	89 c2                	mov    %eax,%edx
f010a555:	8b 45 10             	mov    0x10(%ebp),%eax
f010a558:	8b 00                	mov    (%eax),%eax
f010a55a:	c1 e0 0c             	shl    $0xc,%eax
f010a55d:	01 c2                	add    %eax,%edx
f010a55f:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010a562:	39 c2                	cmp    %eax,%edx
f010a564:	76 1d                	jbe    f010a583 <program_segment_alloc_map_copy_workingset+0x6b6>
			((uint32)dst_ptr< ((uint32)vaddr+ seg->size_in_file)) )
f010a566:	8b 45 0c             	mov    0xc(%ebp),%eax
f010a569:	8b 50 04             	mov    0x4(%eax),%edx
f010a56c:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010a56f:	01 c2                	add    %eax,%edx
f010a571:	8b 45 e8             	mov    -0x18(%ebp),%eax
	uint8 *dst_ptr = (uint8 *) seg->virtual_address;

	//copy program segment page from (seg->ptr_start) to (seg->virtual_address)

	LOG_STATMENT(cprintf("copying data to allocated area VA %x from source %x",dst_ptr,src_ptr));
	while((uint32)dst_ptr < (ROUNDDOWN((uint32)vaddr,PAGE_SIZE) + (*allocated_pages)*PAGE_SIZE) &&
f010a574:	39 c2                	cmp    %eax,%edx
f010a576:	77 bd                	ja     f010a535 <program_segment_alloc_map_copy_workingset+0x668>
		*dst_ptr = *src_ptr ;
		dst_ptr++ ;
		src_ptr++ ;
	}
	LOG_STRING("zeroing remaining page space");
	while((uint32)dst_ptr < (ROUNDDOWN((uint32)vaddr,PAGE_SIZE) + (*allocated_pages)*PAGE_SIZE) )
f010a578:	eb 09                	jmp    f010a583 <program_segment_alloc_map_copy_workingset+0x6b6>
	{
		*dst_ptr = 0;
f010a57a:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010a57d:	c6 00 00             	movb   $0x0,(%eax)
		dst_ptr++ ;
f010a580:	ff 45 e8             	incl   -0x18(%ebp)
		*dst_ptr = *src_ptr ;
		dst_ptr++ ;
		src_ptr++ ;
	}
	LOG_STRING("zeroing remaining page space");
	while((uint32)dst_ptr < (ROUNDDOWN((uint32)vaddr,PAGE_SIZE) + (*allocated_pages)*PAGE_SIZE) )
f010a583:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010a586:	89 45 c4             	mov    %eax,-0x3c(%ebp)
f010a589:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f010a58c:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f010a591:	89 c2                	mov    %eax,%edx
f010a593:	8b 45 10             	mov    0x10(%ebp),%eax
f010a596:	8b 00                	mov    (%eax),%eax
f010a598:	c1 e0 0c             	shl    $0xc,%eax
f010a59b:	01 c2                	add    %eax,%edx
f010a59d:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010a5a0:	39 c2                	cmp    %eax,%edx
f010a5a2:	77 d6                	ja     f010a57a <program_segment_alloc_map_copy_workingset+0x6ad>
	//	{
	//		uint32 *ptr_page_table;
	//		get_page_table(e->env_pgdir, iVA, 1, &ptr_page_table);
	//	}
	//	LOG_STRING("page tables created successfully");
	return 0;
f010a5a4:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010a5a9:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f010a5ac:	c9                   	leave  
f010a5ad:	c3                   	ret    

f010a5ae <initialize_environment>:
// and initialize the kernel portion of the new environment's address space.
// Do NOT (yet) map anything into the user portion
// of the environment's virtual address space.
//
void initialize_environment(struct Env* e, uint32* ptr_user_page_directory, unsigned int phys_user_page_directory)
{
f010a5ae:	55                   	push   %ebp
f010a5af:	89 e5                	mov    %esp,%ebp
f010a5b1:	53                   	push   %ebx
f010a5b2:	83 ec 14             	sub    $0x14,%esp
	//panic("initialize_environment function is not completed yet") ;
	// [1] initialize the kernel portion of the new environment's address space.
	// [2] set e->env_pgdir and e->env_cr3 accordingly,
	int i;
	e->env_page_directory = ptr_user_page_directory;
f010a5b5:	8b 45 08             	mov    0x8(%ebp),%eax
f010a5b8:	8b 55 0c             	mov    0xc(%ebp),%edx
f010a5bb:	89 50 5c             	mov    %edx,0x5c(%eax)
	e->env_cr3 = phys_user_page_directory;
f010a5be:	8b 45 08             	mov    0x8(%ebp),%eax
f010a5c1:	8b 55 10             	mov    0x10(%ebp),%edx
f010a5c4:	89 50 60             	mov    %edx,0x60(%eax)

	//[TODODONE]: copy the kernel area only (to avoid copying the currently shared objects)
	for (i = 0 ; i < PDX(USER_TOP) ; i++)
f010a5c7:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f010a5ce:	eb 17                	jmp    f010a5e7 <initialize_environment+0x39>
	{
		e->env_page_directory[i] = 0 ;
f010a5d0:	8b 45 08             	mov    0x8(%ebp),%eax
f010a5d3:	8b 40 5c             	mov    0x5c(%eax),%eax
f010a5d6:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010a5d9:	c1 e2 02             	shl    $0x2,%edx
f010a5dc:	01 d0                	add    %edx,%eax
f010a5de:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	int i;
	e->env_page_directory = ptr_user_page_directory;
	e->env_cr3 = phys_user_page_directory;

	//[TODODONE]: copy the kernel area only (to avoid copying the currently shared objects)
	for (i = 0 ; i < PDX(USER_TOP) ; i++)
f010a5e4:	ff 45 f4             	incl   -0xc(%ebp)
f010a5e7:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010a5ea:	3d ba 03 00 00       	cmp    $0x3ba,%eax
f010a5ef:	76 df                	jbe    f010a5d0 <initialize_environment+0x22>
	{
		e->env_page_directory[i] = 0 ;
	}

	for (i = PDX(USER_TOP) ; i < 1024 ; i++)
f010a5f1:	c7 45 f4 bb 03 00 00 	movl   $0x3bb,-0xc(%ebp)
f010a5f8:	eb 22                	jmp    f010a61c <initialize_environment+0x6e>
	{
		e->env_page_directory[i] = ptr_page_directory[i] ;
f010a5fa:	8b 45 08             	mov    0x8(%ebp),%eax
f010a5fd:	8b 40 5c             	mov    0x5c(%eax),%eax
f010a600:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010a603:	c1 e2 02             	shl    $0x2,%edx
f010a606:	01 c2                	add    %eax,%edx
f010a608:	a1 3c 26 78 f0       	mov    0xf078263c,%eax
f010a60d:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f010a610:	c1 e1 02             	shl    $0x2,%ecx
f010a613:	01 c8                	add    %ecx,%eax
f010a615:	8b 00                	mov    (%eax),%eax
f010a617:	89 02                	mov    %eax,(%edx)
	for (i = 0 ; i < PDX(USER_TOP) ; i++)
	{
		e->env_page_directory[i] = 0 ;
	}

	for (i = PDX(USER_TOP) ; i < 1024 ; i++)
f010a619:	ff 45 f4             	incl   -0xc(%ebp)
f010a61c:	81 7d f4 ff 03 00 00 	cmpl   $0x3ff,-0xc(%ebp)
f010a623:	7e d5                	jle    f010a5fa <initialize_environment+0x4c>
	}

	// Allocate the page working set for both kernel and user
#if USE_KHEAP == 1
	{
		e->ptr_pageWorkingSet = create_user_page_WS(e, e->page_WS_max_size);
f010a625:	8b 45 08             	mov    0x8(%ebp),%eax
f010a628:	8b 40 74             	mov    0x74(%eax),%eax
f010a62b:	83 ec 08             	sub    $0x8,%esp
f010a62e:	50                   	push   %eax
f010a62f:	ff 75 08             	pushl  0x8(%ebp)
f010a632:	e8 13 f8 ff ff       	call   f0109e4a <create_user_page_WS>
f010a637:	83 c4 10             	add    $0x10,%esp
f010a63a:	89 c2                	mov    %eax,%edx
f010a63c:	8b 45 08             	mov    0x8(%ebp),%eax
f010a63f:	89 50 78             	mov    %edx,0x78(%eax)
		share_pws_at_user_space(e);
f010a642:	83 ec 0c             	sub    $0xc,%esp
f010a645:	ff 75 08             	pushl  0x8(%ebp)
f010a648:	e8 f3 04 00 00       	call   f010ab40 <share_pws_at_user_space>
f010a64d:	83 c4 10             	add    $0x10,%esp
#endif


	//2020
	// Add its elements to the "e->PageWorkingSetList"
	if(isPageReplacmentAlgorithmLRU(PG_REP_LRU_LISTS_APPROX))
f010a650:	83 ec 0c             	sub    $0xc,%esp
f010a653:	6a 02                	push   $0x2
f010a655:	e8 e9 36 00 00       	call   f010dd43 <isPageReplacmentAlgorithmLRU>
f010a65a:	83 c4 10             	add    $0x10,%esp
f010a65d:	85 c0                	test   %eax,%eax
f010a65f:	0f 84 04 01 00 00    	je     f010a769 <initialize_environment+0x1bb>
	{
		for (int i = 0; i < e->page_WS_max_size; ++i)
f010a665:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f010a66c:	e9 e7 00 00 00       	jmp    f010a758 <initialize_environment+0x1aa>
		{
			LIST_INSERT_HEAD(&(e->PageWorkingSetList), &(e->ptr_pageWorkingSet[i]));
f010a671:	8b 45 08             	mov    0x8(%ebp),%eax
f010a674:	8b 48 78             	mov    0x78(%eax),%ecx
f010a677:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010a67a:	89 d0                	mov    %edx,%eax
f010a67c:	01 c0                	add    %eax,%eax
f010a67e:	01 d0                	add    %edx,%eax
f010a680:	c1 e0 03             	shl    $0x3,%eax
f010a683:	01 c8                	add    %ecx,%eax
f010a685:	85 c0                	test   %eax,%eax
f010a687:	75 17                	jne    f010a6a0 <initialize_environment+0xf2>
f010a689:	83 ec 04             	sub    $0x4,%esp
f010a68c:	68 fc 66 13 f0       	push   $0xf01366fc
f010a691:	68 fc 02 00 00       	push   $0x2fc
f010a696:	68 c1 66 13 f0       	push   $0xf01366c1
f010a69b:	e8 65 5b ff ff       	call   f0100205 <_panic>
f010a6a0:	8b 45 08             	mov    0x8(%ebp),%eax
f010a6a3:	8b 48 78             	mov    0x78(%eax),%ecx
f010a6a6:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010a6a9:	89 d0                	mov    %edx,%eax
f010a6ab:	01 c0                	add    %eax,%eax
f010a6ad:	01 d0                	add    %edx,%eax
f010a6af:	c1 e0 03             	shl    $0x3,%eax
f010a6b2:	01 c8                	add    %ecx,%eax
f010a6b4:	8b 55 08             	mov    0x8(%ebp),%edx
f010a6b7:	8b 92 b8 05 00 00    	mov    0x5b8(%edx),%edx
f010a6bd:	89 50 10             	mov    %edx,0x10(%eax)
f010a6c0:	8b 40 10             	mov    0x10(%eax),%eax
f010a6c3:	85 c0                	test   %eax,%eax
f010a6c5:	74 22                	je     f010a6e9 <initialize_environment+0x13b>
f010a6c7:	8b 45 08             	mov    0x8(%ebp),%eax
f010a6ca:	8b 90 b8 05 00 00    	mov    0x5b8(%eax),%edx
f010a6d0:	8b 45 08             	mov    0x8(%ebp),%eax
f010a6d3:	8b 58 78             	mov    0x78(%eax),%ebx
f010a6d6:	8b 4d f0             	mov    -0x10(%ebp),%ecx
f010a6d9:	89 c8                	mov    %ecx,%eax
f010a6db:	01 c0                	add    %eax,%eax
f010a6dd:	01 c8                	add    %ecx,%eax
f010a6df:	c1 e0 03             	shl    $0x3,%eax
f010a6e2:	01 d8                	add    %ebx,%eax
f010a6e4:	89 42 14             	mov    %eax,0x14(%edx)
f010a6e7:	eb 1e                	jmp    f010a707 <initialize_environment+0x159>
f010a6e9:	8b 45 08             	mov    0x8(%ebp),%eax
f010a6ec:	8b 48 78             	mov    0x78(%eax),%ecx
f010a6ef:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010a6f2:	89 d0                	mov    %edx,%eax
f010a6f4:	01 c0                	add    %eax,%eax
f010a6f6:	01 d0                	add    %edx,%eax
f010a6f8:	c1 e0 03             	shl    $0x3,%eax
f010a6fb:	8d 14 01             	lea    (%ecx,%eax,1),%edx
f010a6fe:	8b 45 08             	mov    0x8(%ebp),%eax
f010a701:	89 90 bc 05 00 00    	mov    %edx,0x5bc(%eax)
f010a707:	8b 45 08             	mov    0x8(%ebp),%eax
f010a70a:	8b 48 78             	mov    0x78(%eax),%ecx
f010a70d:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010a710:	89 d0                	mov    %edx,%eax
f010a712:	01 c0                	add    %eax,%eax
f010a714:	01 d0                	add    %edx,%eax
f010a716:	c1 e0 03             	shl    $0x3,%eax
f010a719:	8d 14 01             	lea    (%ecx,%eax,1),%edx
f010a71c:	8b 45 08             	mov    0x8(%ebp),%eax
f010a71f:	89 90 b8 05 00 00    	mov    %edx,0x5b8(%eax)
f010a725:	8b 45 08             	mov    0x8(%ebp),%eax
f010a728:	8b 48 78             	mov    0x78(%eax),%ecx
f010a72b:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010a72e:	89 d0                	mov    %edx,%eax
f010a730:	01 c0                	add    %eax,%eax
f010a732:	01 d0                	add    %edx,%eax
f010a734:	c1 e0 03             	shl    $0x3,%eax
f010a737:	01 c8                	add    %ecx,%eax
f010a739:	c7 40 14 00 00 00 00 	movl   $0x0,0x14(%eax)
f010a740:	8b 45 08             	mov    0x8(%ebp),%eax
f010a743:	8b 80 c4 05 00 00    	mov    0x5c4(%eax),%eax
f010a749:	8d 50 01             	lea    0x1(%eax),%edx
f010a74c:	8b 45 08             	mov    0x8(%ebp),%eax
f010a74f:	89 90 c4 05 00 00    	mov    %edx,0x5c4(%eax)

	//2020
	// Add its elements to the "e->PageWorkingSetList"
	if(isPageReplacmentAlgorithmLRU(PG_REP_LRU_LISTS_APPROX))
	{
		for (int i = 0; i < e->page_WS_max_size; ++i)
f010a755:	ff 45 f0             	incl   -0x10(%ebp)
f010a758:	8b 45 08             	mov    0x8(%ebp),%eax
f010a75b:	8b 50 74             	mov    0x74(%eax),%edx
f010a75e:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010a761:	39 c2                	cmp    %eax,%edx
f010a763:	0f 87 08 ff ff ff    	ja     f010a671 <initialize_environment+0xc3>
			LIST_INSERT_HEAD(&(e->PageWorkingSetList), &(e->ptr_pageWorkingSet[i]));
		}
	}

	//initialize environment working set
	for(i=0; i< (e->page_WS_max_size); i++)
f010a769:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f010a770:	eb 50                	jmp    f010a7c2 <initialize_environment+0x214>
	{
		e->ptr_pageWorkingSet[i].virtual_address = 0;
f010a772:	8b 45 08             	mov    0x8(%ebp),%eax
f010a775:	8b 48 78             	mov    0x78(%eax),%ecx
f010a778:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010a77b:	89 d0                	mov    %edx,%eax
f010a77d:	01 c0                	add    %eax,%eax
f010a77f:	01 d0                	add    %edx,%eax
f010a781:	c1 e0 03             	shl    $0x3,%eax
f010a784:	01 c8                	add    %ecx,%eax
f010a786:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
		e->ptr_pageWorkingSet[i].empty = 1;
f010a78c:	8b 45 08             	mov    0x8(%ebp),%eax
f010a78f:	8b 48 78             	mov    0x78(%eax),%ecx
f010a792:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010a795:	89 d0                	mov    %edx,%eax
f010a797:	01 c0                	add    %eax,%eax
f010a799:	01 d0                	add    %edx,%eax
f010a79b:	c1 e0 03             	shl    $0x3,%eax
f010a79e:	01 c8                	add    %ecx,%eax
f010a7a0:	c6 40 04 01          	movb   $0x1,0x4(%eax)
		e->ptr_pageWorkingSet[i].time_stamp = 0 ;
f010a7a4:	8b 45 08             	mov    0x8(%ebp),%eax
f010a7a7:	8b 48 78             	mov    0x78(%eax),%ecx
f010a7aa:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010a7ad:	89 d0                	mov    %edx,%eax
f010a7af:	01 c0                	add    %eax,%eax
f010a7b1:	01 d0                	add    %edx,%eax
f010a7b3:	c1 e0 03             	shl    $0x3,%eax
f010a7b6:	01 c8                	add    %ecx,%eax
f010a7b8:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
			LIST_INSERT_HEAD(&(e->PageWorkingSetList), &(e->ptr_pageWorkingSet[i]));
		}
	}

	//initialize environment working set
	for(i=0; i< (e->page_WS_max_size); i++)
f010a7bf:	ff 45 f4             	incl   -0xc(%ebp)
f010a7c2:	8b 45 08             	mov    0x8(%ebp),%eax
f010a7c5:	8b 50 74             	mov    0x74(%eax),%edx
f010a7c8:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010a7cb:	39 c2                	cmp    %eax,%edx
f010a7cd:	77 a3                	ja     f010a772 <initialize_environment+0x1c4>
	{
		e->ptr_pageWorkingSet[i].virtual_address = 0;
		e->ptr_pageWorkingSet[i].empty = 1;
		e->ptr_pageWorkingSet[i].time_stamp = 0 ;
	}
	e->page_last_WS_index = 0;
f010a7cf:	8b 45 08             	mov    0x8(%ebp),%eax
f010a7d2:	c7 80 2c 05 00 00 00 	movl   $0x0,0x52c(%eax)
f010a7d9:	00 00 00 

	for(i=0; i< __TWS_MAX_SIZE; i++)
f010a7dc:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f010a7e3:	eb 50                	jmp    f010a835 <initialize_environment+0x287>
	{
		e->__ptr_tws[i].virtual_address = 0;
f010a7e5:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010a7e8:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010a7eb:	89 d0                	mov    %edx,%eax
f010a7ed:	01 c0                	add    %eax,%eax
f010a7ef:	01 d0                	add    %edx,%eax
f010a7f1:	c1 e0 03             	shl    $0x3,%eax
f010a7f4:	01 c8                	add    %ecx,%eax
f010a7f6:	83 c0 7c             	add    $0x7c,%eax
f010a7f9:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
		e->__ptr_tws[i].empty = 1;
f010a7ff:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010a802:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010a805:	89 d0                	mov    %edx,%eax
f010a807:	01 c0                	add    %eax,%eax
f010a809:	01 d0                	add    %edx,%eax
f010a80b:	c1 e0 03             	shl    $0x3,%eax
f010a80e:	01 c8                	add    %ecx,%eax
f010a810:	83 e8 80             	sub    $0xffffff80,%eax
f010a813:	c6 00 01             	movb   $0x1,(%eax)
		e->__ptr_tws[i].time_stamp = 0 ;
f010a816:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010a819:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010a81c:	89 d0                	mov    %edx,%eax
f010a81e:	01 c0                	add    %eax,%eax
f010a820:	01 d0                	add    %edx,%eax
f010a822:	c1 e0 03             	shl    $0x3,%eax
f010a825:	01 c8                	add    %ecx,%eax
f010a827:	05 84 00 00 00       	add    $0x84,%eax
f010a82c:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
		e->ptr_pageWorkingSet[i].empty = 1;
		e->ptr_pageWorkingSet[i].time_stamp = 0 ;
	}
	e->page_last_WS_index = 0;

	for(i=0; i< __TWS_MAX_SIZE; i++)
f010a832:	ff 45 f4             	incl   -0xc(%ebp)
f010a835:	83 7d f4 31          	cmpl   $0x31,-0xc(%ebp)
f010a839:	7e aa                	jle    f010a7e5 <initialize_environment+0x237>
		e->__ptr_tws[i].virtual_address = 0;
		e->__ptr_tws[i].empty = 1;
		e->__ptr_tws[i].time_stamp = 0 ;
	}

	e->table_last_WS_index = 0;
f010a83b:	8b 45 08             	mov    0x8(%ebp),%eax
f010a83e:	c7 80 30 05 00 00 00 	movl   $0x0,0x530(%eax)
f010a845:	00 00 00 

	e->pageFaultsCounter=0;
f010a848:	8b 45 08             	mov    0x8(%ebp),%eax
f010a84b:	c7 80 34 05 00 00 00 	movl   $0x0,0x534(%eax)
f010a852:	00 00 00 
	e->tableFaultsCounter=0;
f010a855:	8b 45 08             	mov    0x8(%ebp),%eax
f010a858:	c7 80 38 05 00 00 00 	movl   $0x0,0x538(%eax)
f010a85f:	00 00 00 

	e->freeingFullWSCounter = 0;
f010a862:	8b 45 08             	mov    0x8(%ebp),%eax
f010a865:	c7 80 3c 05 00 00 00 	movl   $0x0,0x53c(%eax)
f010a86c:	00 00 00 
	e->freeingScarceMemCounter = 0;
f010a86f:	8b 45 08             	mov    0x8(%ebp),%eax
f010a872:	c7 80 40 05 00 00 00 	movl   $0x0,0x540(%eax)
f010a879:	00 00 00 

	e->nModifiedPages=0;
f010a87c:	8b 45 08             	mov    0x8(%ebp),%eax
f010a87f:	c7 80 44 05 00 00 00 	movl   $0x0,0x544(%eax)
f010a886:	00 00 00 
	e->nNotModifiedPages=0;
f010a889:	8b 45 08             	mov    0x8(%ebp),%eax
f010a88c:	c7 80 48 05 00 00 00 	movl   $0x0,0x548(%eax)
f010a893:	00 00 00 
	e->nClocks = 0;
f010a896:	8b 45 08             	mov    0x8(%ebp),%eax
f010a899:	c7 80 a4 05 00 00 00 	movl   $0x0,0x5a4(%eax)
f010a8a0:	00 00 00 

	//2020
	e->nPageIn = 0;
f010a8a3:	8b 45 08             	mov    0x8(%ebp),%eax
f010a8a6:	c7 80 4c 05 00 00 00 	movl   $0x0,0x54c(%eax)
f010a8ad:	00 00 00 
	e->nPageOut = 0;
f010a8b0:	8b 45 08             	mov    0x8(%ebp),%eax
f010a8b3:	c7 80 50 05 00 00 00 	movl   $0x0,0x550(%eax)
f010a8ba:	00 00 00 
	e->nNewPageAdded = 0;
f010a8bd:	8b 45 08             	mov    0x8(%ebp),%eax
f010a8c0:	c7 80 54 05 00 00 00 	movl   $0x0,0x554(%eax)
f010a8c7:	00 00 00 

	//e->shared_free_address = USER_SHARED_MEM_START;

	//Completes other environment initializations, (envID, status and most of registers)
	complete_environment_initialization(e);
f010a8ca:	83 ec 0c             	sub    $0xc,%esp
f010a8cd:	ff 75 08             	pushl  0x8(%ebp)
f010a8d0:	e8 09 00 00 00       	call   f010a8de <complete_environment_initialization>
f010a8d5:	83 c4 10             	add    $0x10,%esp
}
f010a8d8:	90                   	nop
f010a8d9:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f010a8dc:	c9                   	leave  
f010a8dd:	c3                   	ret    

f010a8de <complete_environment_initialization>:

//========================================================
// 8) COMPLETE INITIALIZATION [OTHERS: ID, REGS, STATUS...):
//========================================================
void complete_environment_initialization(struct Env* e)
{
f010a8de:	55                   	push   %ebp
f010a8df:	89 e5                	mov    %esp,%ebp
f010a8e1:	53                   	push   %ebx
f010a8e2:	83 ec 14             	sub    $0x14,%esp
	//VPT and UVPT map the env's own page table, with
	//different permissions.
	e->env_page_directory[PDX(VPT)]  = e->env_cr3 | PERM_PRESENT | PERM_WRITEABLE;
f010a8e5:	8b 45 08             	mov    0x8(%ebp),%eax
f010a8e8:	8b 40 5c             	mov    0x5c(%eax),%eax
f010a8eb:	8d 90 fc 0e 00 00    	lea    0xefc(%eax),%edx
f010a8f1:	8b 45 08             	mov    0x8(%ebp),%eax
f010a8f4:	8b 40 60             	mov    0x60(%eax),%eax
f010a8f7:	83 c8 03             	or     $0x3,%eax
f010a8fa:	89 02                	mov    %eax,(%edx)
	e->env_page_directory[PDX(UVPT)] = e->env_cr3 | PERM_PRESENT | PERM_USER;
f010a8fc:	8b 45 08             	mov    0x8(%ebp),%eax
f010a8ff:	8b 40 5c             	mov    0x5c(%eax),%eax
f010a902:	8d 90 f4 0e 00 00    	lea    0xef4(%eax),%edx
f010a908:	8b 45 08             	mov    0x8(%ebp),%eax
f010a90b:	8b 40 60             	mov    0x60(%eax),%eax
f010a90e:	83 c8 05             	or     $0x5,%eax
f010a911:	89 02                	mov    %eax,(%edx)

	// page file directory initialization
	e->disk_env_pgdir= 0;
f010a913:	8b 45 08             	mov    0x8(%ebp),%eax
f010a916:	c7 40 64 00 00 00 00 	movl   $0x0,0x64(%eax)
	e->disk_env_pgdir_PA= 0;
f010a91d:	8b 45 08             	mov    0x8(%ebp),%eax
f010a920:	c7 40 68 00 00 00 00 	movl   $0x0,0x68(%eax)
	e->disk_env_tabledir = 0;
f010a927:	8b 45 08             	mov    0x8(%ebp),%eax
f010a92a:	c7 40 6c 00 00 00 00 	movl   $0x0,0x6c(%eax)
	e->disk_env_tabledir_PA = 0;
f010a931:	8b 45 08             	mov    0x8(%ebp),%eax
f010a934:	c7 40 70 00 00 00 00 	movl   $0x0,0x70(%eax)

	int32 generation;
	// Generate an env_id for this environment.
	/*2022: UPDATED*/generation = (e->env_id + (1 << ENVGENSHIFT)) & ~(NEARPOW2NENV - 1);
f010a93b:	8b 45 08             	mov    0x8(%ebp),%eax
f010a93e:	8b 58 4c             	mov    0x4c(%eax),%ebx
f010a941:	83 ec 0c             	sub    $0xc,%esp
f010a944:	68 b1 02 00 00       	push   $0x2b1
f010a949:	e8 4b 56 02 00       	call   f012ff99 <log2_ceil>
f010a94e:	83 c4 10             	add    $0x10,%esp
f010a951:	ba 01 00 00 00       	mov    $0x1,%edx
f010a956:	88 c1                	mov    %al,%cl
f010a958:	d3 e2                	shl    %cl,%edx
f010a95a:	89 d0                	mov    %edx,%eax
f010a95c:	01 d8                	add    %ebx,%eax
f010a95e:	89 c3                	mov    %eax,%ebx
f010a960:	83 ec 0c             	sub    $0xc,%esp
f010a963:	68 b1 02 00 00       	push   $0x2b1
f010a968:	e8 f7 55 02 00       	call   f012ff64 <nearest_pow2_ceil>
f010a96d:	83 c4 10             	add    $0x10,%esp
f010a970:	f7 d8                	neg    %eax
f010a972:	21 d8                	and    %ebx,%eax
f010a974:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if (generation <= 0)	// Don't create a negative env_id.
f010a977:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010a97b:	7f 1e                	jg     f010a99b <complete_environment_initialization+0xbd>
		generation = 1 << ENVGENSHIFT;
f010a97d:	83 ec 0c             	sub    $0xc,%esp
f010a980:	68 b1 02 00 00       	push   $0x2b1
f010a985:	e8 0f 56 02 00       	call   f012ff99 <log2_ceil>
f010a98a:	83 c4 10             	add    $0x10,%esp
f010a98d:	ba 01 00 00 00       	mov    $0x1,%edx
f010a992:	88 c1                	mov    %al,%cl
f010a994:	d3 e2                	shl    %cl,%edx
f010a996:	89 d0                	mov    %edx,%eax
f010a998:	89 45 f4             	mov    %eax,-0xc(%ebp)
	e->env_id = generation | (e - envs);
f010a99b:	8b 45 08             	mov    0x8(%ebp),%eax
f010a99e:	8b 15 b0 1c 78 f0    	mov    0xf0781cb0,%edx
f010a9a4:	29 d0                	sub    %edx,%eax
f010a9a6:	c1 f8 04             	sar    $0x4,%eax
f010a9a9:	89 c2                	mov    %eax,%edx
f010a9ab:	89 d0                	mov    %edx,%eax
f010a9ad:	c1 e0 03             	shl    $0x3,%eax
f010a9b0:	01 d0                	add    %edx,%eax
f010a9b2:	01 c0                	add    %eax,%eax
f010a9b4:	01 d0                	add    %edx,%eax
f010a9b6:	c1 e0 03             	shl    $0x3,%eax
f010a9b9:	01 d0                	add    %edx,%eax
f010a9bb:	89 c1                	mov    %eax,%ecx
f010a9bd:	c1 e1 08             	shl    $0x8,%ecx
f010a9c0:	01 c8                	add    %ecx,%eax
f010a9c2:	01 c0                	add    %eax,%eax
f010a9c4:	01 d0                	add    %edx,%eax
f010a9c6:	01 c0                	add    %eax,%eax
f010a9c8:	01 d0                	add    %edx,%eax
f010a9ca:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f010a9d1:	01 d0                	add    %edx,%eax
f010a9d3:	89 c2                	mov    %eax,%edx
f010a9d5:	c1 e2 09             	shl    $0x9,%edx
f010a9d8:	29 c2                	sub    %eax,%edx
f010a9da:	89 d0                	mov    %edx,%eax
f010a9dc:	f7 d8                	neg    %eax
f010a9de:	0b 45 f4             	or     -0xc(%ebp),%eax
f010a9e1:	89 c2                	mov    %eax,%edx
f010a9e3:	8b 45 08             	mov    0x8(%ebp),%eax
f010a9e6:	89 50 4c             	mov    %edx,0x4c(%eax)

	//cprintf("ENV_CREATE: envID = %d, orig index in envs = %d, calc index using ENVX = %d\n", e->env_id, (e - envs), ENVX(e->env_id));

	// Set the basic status variables.
	//2017====================================================
	if (curenv == NULL)
f010a9e9:	a1 b4 1c 78 f0       	mov    0xf0781cb4,%eax
f010a9ee:	85 c0                	test   %eax,%eax
f010a9f0:	75 0c                	jne    f010a9fe <complete_environment_initialization+0x120>
		e->env_parent_id = 0;//no parent;
f010a9f2:	8b 45 08             	mov    0x8(%ebp),%eax
f010a9f5:	c7 40 50 00 00 00 00 	movl   $0x0,0x50(%eax)
f010a9fc:	eb 0e                	jmp    f010aa0c <complete_environment_initialization+0x12e>
	else
		e->env_parent_id = curenv->env_id;//curenv is the parent;
f010a9fe:	a1 b4 1c 78 f0       	mov    0xf0781cb4,%eax
f010aa03:	8b 50 4c             	mov    0x4c(%eax),%edx
f010aa06:	8b 45 08             	mov    0x8(%ebp),%eax
f010aa09:	89 50 50             	mov    %edx,0x50(%eax)
	//========================================================
	e->env_status = ENV_NEW;
f010aa0c:	8b 45 08             	mov    0x8(%ebp),%eax
f010aa0f:	c7 40 54 04 00 00 00 	movl   $0x4,0x54(%eax)
	e->env_runs = 0;
f010aa16:	8b 45 08             	mov    0x8(%ebp),%eax
f010aa19:	c7 40 58 00 00 00 00 	movl   $0x0,0x58(%eax)

	// Clear out all the saved register state,
	// to prevent the register values
	// of a prior environment inhabiting this Env structure
	// from "leaking" into our new environment.
	memset(&e->env_tf, 0, sizeof(e->env_tf));
f010aa20:	8b 45 08             	mov    0x8(%ebp),%eax
f010aa23:	83 ec 04             	sub    $0x4,%esp
f010aa26:	6a 44                	push   $0x44
f010aa28:	6a 00                	push   $0x0
f010aa2a:	50                   	push   %eax
f010aa2b:	e8 b0 69 02 00       	call   f01313e0 <memset>
f010aa30:	83 c4 10             	add    $0x10,%esp
	// GD_UD is the user data segment selector in the GDT, and
	// GD_UT is the user text segment selector (see inc/memlayout.h).
	// The low 2 bits of each segment register contains the
	// Requester Privilege Level (RPL); 3 means user mode.

	e->env_tf.tf_ds = GD_UD | 3;
f010aa33:	8b 45 08             	mov    0x8(%ebp),%eax
f010aa36:	66 c7 40 24 23 00    	movw   $0x23,0x24(%eax)
	e->env_tf.tf_es = GD_UD | 3;
f010aa3c:	8b 45 08             	mov    0x8(%ebp),%eax
f010aa3f:	66 c7 40 20 23 00    	movw   $0x23,0x20(%eax)
	e->env_tf.tf_ss = GD_UD | 3;
f010aa45:	8b 45 08             	mov    0x8(%ebp),%eax
f010aa48:	66 c7 40 40 23 00    	movw   $0x23,0x40(%eax)
	e->env_tf.tf_esp = (uint32*)USTACKTOP;
f010aa4e:	8b 45 08             	mov    0x8(%ebp),%eax
f010aa51:	c7 40 3c 00 e0 bf ee 	movl   $0xeebfe000,0x3c(%eax)
	e->env_tf.tf_cs = GD_UT | 3;
f010aa58:	8b 45 08             	mov    0x8(%ebp),%eax
f010aa5b:	66 c7 40 34 1b 00    	movw   $0x1b,0x34(%eax)
	e->env_tf.tf_eflags |= FL_IF;
f010aa61:	8b 45 08             	mov    0x8(%ebp),%eax
f010aa64:	8b 40 38             	mov    0x38(%eax),%eax
f010aa67:	80 cc 02             	or     $0x2,%ah
f010aa6a:	89 c2                	mov    %eax,%edx
f010aa6c:	8b 45 08             	mov    0x8(%ebp),%eax
f010aa6f:	89 50 38             	mov    %edx,0x38(%eax)

	// You will set e->env_tf.tf_eip later.

	// commit the allocation
	LIST_REMOVE(&env_free_list ,e);
f010aa72:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f010aa76:	75 17                	jne    f010aa8f <complete_environment_initialization+0x1b1>
f010aa78:	83 ec 04             	sub    $0x4,%esp
f010aa7b:	68 de 66 13 f0       	push   $0xf01366de
f010aa80:	68 60 03 00 00       	push   $0x360
f010aa85:	68 c1 66 13 f0       	push   $0xf01366c1
f010aa8a:	e8 76 57 ff ff       	call   f0100205 <_panic>
f010aa8f:	8b 45 08             	mov    0x8(%ebp),%eax
f010aa92:	8b 40 44             	mov    0x44(%eax),%eax
f010aa95:	85 c0                	test   %eax,%eax
f010aa97:	74 11                	je     f010aaaa <complete_environment_initialization+0x1cc>
f010aa99:	8b 45 08             	mov    0x8(%ebp),%eax
f010aa9c:	8b 40 44             	mov    0x44(%eax),%eax
f010aa9f:	8b 55 08             	mov    0x8(%ebp),%edx
f010aaa2:	8b 52 48             	mov    0x48(%edx),%edx
f010aaa5:	89 50 48             	mov    %edx,0x48(%eax)
f010aaa8:	eb 0b                	jmp    f010aab5 <complete_environment_initialization+0x1d7>
f010aaaa:	8b 45 08             	mov    0x8(%ebp),%eax
f010aaad:	8b 40 48             	mov    0x48(%eax),%eax
f010aab0:	a3 bc 1c 78 f0       	mov    %eax,0xf0781cbc
f010aab5:	8b 45 08             	mov    0x8(%ebp),%eax
f010aab8:	8b 40 48             	mov    0x48(%eax),%eax
f010aabb:	85 c0                	test   %eax,%eax
f010aabd:	74 11                	je     f010aad0 <complete_environment_initialization+0x1f2>
f010aabf:	8b 45 08             	mov    0x8(%ebp),%eax
f010aac2:	8b 40 48             	mov    0x48(%eax),%eax
f010aac5:	8b 55 08             	mov    0x8(%ebp),%edx
f010aac8:	8b 52 44             	mov    0x44(%edx),%edx
f010aacb:	89 50 44             	mov    %edx,0x44(%eax)
f010aace:	eb 0b                	jmp    f010aadb <complete_environment_initialization+0x1fd>
f010aad0:	8b 45 08             	mov    0x8(%ebp),%eax
f010aad3:	8b 40 44             	mov    0x44(%eax),%eax
f010aad6:	a3 b8 1c 78 f0       	mov    %eax,0xf0781cb8
f010aadb:	8b 45 08             	mov    0x8(%ebp),%eax
f010aade:	c7 40 44 00 00 00 00 	movl   $0x0,0x44(%eax)
f010aae5:	8b 45 08             	mov    0x8(%ebp),%eax
f010aae8:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f010aaef:	a1 c4 1c 78 f0       	mov    0xf0781cc4,%eax
f010aaf4:	48                   	dec    %eax
f010aaf5:	a3 c4 1c 78 f0       	mov    %eax,0xf0781cc4
	return ;
f010aafa:	90                   	nop
}
f010aafb:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f010aafe:	c9                   	leave  
f010aaff:	c3                   	ret    

f010ab00 <set_environment_entry_point>:

//===============================================
// 9) SET EIP REG VALUE BY ENV ENTRY POINT:
//===============================================
void set_environment_entry_point(struct Env* e, uint8* ptr_program_start)
{
f010ab00:	55                   	push   %ebp
f010ab01:	89 e5                	mov    %esp,%ebp
f010ab03:	83 ec 18             	sub    $0x18,%esp
	struct Elf * pELFHDR = (struct Elf *)ptr_program_start ;
f010ab06:	8b 45 0c             	mov    0xc(%ebp),%eax
f010ab09:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if (pELFHDR->e_magic != ELF_MAGIC)
f010ab0c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010ab0f:	8b 00                	mov    (%eax),%eax
f010ab11:	3d 7f 45 4c 46       	cmp    $0x464c457f,%eax
f010ab16:	74 17                	je     f010ab2f <set_environment_entry_point+0x2f>
		panic("Matafa2nash 3ala Keda");
f010ab18:	83 ec 04             	sub    $0x4,%esp
f010ab1b:	68 17 68 13 f0       	push   $0xf0136817
f010ab20:	68 6c 03 00 00       	push   $0x36c
f010ab25:	68 c1 66 13 f0       	push   $0xf01366c1
f010ab2a:	e8 d6 56 ff ff       	call   f0100205 <_panic>
	e->env_tf.tf_eip = (uint32*)pELFHDR->e_entry ;
f010ab2f:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010ab32:	8b 40 18             	mov    0x18(%eax),%eax
f010ab35:	89 c2                	mov    %eax,%edx
f010ab37:	8b 45 08             	mov    0x8(%ebp),%eax
f010ab3a:	89 50 30             	mov    %edx,0x30(%eax)
}
f010ab3d:	90                   	nop
f010ab3e:	c9                   	leave  
f010ab3f:	c3                   	ret    

f010ab40 <share_pws_at_user_space>:

//===============================================
// 10) SHARE WS AT USER SPACE (READ ONLY):
//===============================================
void share_pws_at_user_space(struct Env* e)
{
f010ab40:	55                   	push   %ebp
f010ab41:	89 e5                	mov    %esp,%ebp
f010ab43:	83 ec 28             	sub    $0x28,%esp
#if USE_KHEAP
	e->__uptr_pws = (struct WorkingSetElement*) USER_PAGES_WS_START;
f010ab46:	8b 45 08             	mov    0x8(%ebp),%eax
f010ab49:	c7 80 9c 05 00 00 00 	movl   $0xa0000000,0x59c(%eax)
f010ab50:	00 00 a0 
	unsigned int sva = (unsigned int) e->ptr_pageWorkingSet;
f010ab53:	8b 45 08             	mov    0x8(%ebp),%eax
f010ab56:	8b 40 78             	mov    0x78(%eax),%eax
f010ab59:	89 45 f4             	mov    %eax,-0xc(%ebp)
	uint32 nBytes = sizeof(struct WorkingSetElement) * e->page_WS_max_size;
f010ab5c:	8b 45 08             	mov    0x8(%ebp),%eax
f010ab5f:	8b 50 74             	mov    0x74(%eax),%edx
f010ab62:	89 d0                	mov    %edx,%eax
f010ab64:	01 c0                	add    %eax,%eax
f010ab66:	01 d0                	add    %edx,%eax
f010ab68:	c1 e0 03             	shl    $0x3,%eax
f010ab6b:	89 45 ec             	mov    %eax,-0x14(%ebp)
	unsigned int dva = (unsigned int) (e->__uptr_pws);
f010ab6e:	8b 45 08             	mov    0x8(%ebp),%eax
f010ab71:	8b 80 9c 05 00 00    	mov    0x59c(%eax),%eax
f010ab77:	89 45 f0             	mov    %eax,-0x10(%ebp)
	for (sva = (uint32) (e->ptr_pageWorkingSet); sva < ((uint32) (e->ptr_pageWorkingSet) + nBytes); sva += PAGE_SIZE, dva += PAGE_SIZE)
f010ab7a:	8b 45 08             	mov    0x8(%ebp),%eax
f010ab7d:	8b 40 78             	mov    0x78(%eax),%eax
f010ab80:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010ab83:	eb 71                	jmp    f010abf6 <share_pws_at_user_space+0xb6>
	{
		//2017: Copy the table entries instead of mapping (to avoid increasing the number of references of corresponding frames)
		//unsigned int pa = kheap_physical_address(sva);
		//map_frame(e->env_page_directory, to_frame_info(pa), dva, PERM_USER);
		uint32 pa = kheap_physical_address(sva);
f010ab85:	83 ec 0c             	sub    $0xc,%esp
f010ab88:	ff 75 f4             	pushl  -0xc(%ebp)
f010ab8b:	e8 13 cf ff ff       	call   f0107aa3 <kheap_physical_address>
f010ab90:	83 c4 10             	add    $0x10,%esp
f010ab93:	89 45 e8             	mov    %eax,-0x18(%ebp)
		uint32* ptr_page_table;
		if (get_page_table(e->env_page_directory,  dva, &ptr_page_table) == TABLE_NOT_EXIST)
f010ab96:	8b 45 08             	mov    0x8(%ebp),%eax
f010ab99:	8b 40 5c             	mov    0x5c(%eax),%eax
f010ab9c:	83 ec 04             	sub    $0x4,%esp
f010ab9f:	8d 55 e4             	lea    -0x1c(%ebp),%edx
f010aba2:	52                   	push   %edx
f010aba3:	ff 75 f0             	pushl  -0x10(%ebp)
f010aba6:	50                   	push   %eax
f010aba7:	e8 05 bf ff ff       	call   f0106ab1 <get_page_table>
f010abac:	83 c4 10             	add    $0x10,%esp
f010abaf:	83 f8 01             	cmp    $0x1,%eax
f010abb2:	75 18                	jne    f010abcc <share_pws_at_user_space+0x8c>
		{
			ptr_page_table = create_page_table(e->env_page_directory, (uint32) dva);
f010abb4:	8b 45 08             	mov    0x8(%ebp),%eax
f010abb7:	8b 40 5c             	mov    0x5c(%eax),%eax
f010abba:	83 ec 08             	sub    $0x8,%esp
f010abbd:	ff 75 f0             	pushl  -0x10(%ebp)
f010abc0:	50                   	push   %eax
f010abc1:	e8 41 c0 ff ff       	call   f0106c07 <create_page_table>
f010abc6:	83 c4 10             	add    $0x10,%esp
f010abc9:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		}
		ptr_page_table[PTX(dva)] = CONSTRUCT_ENTRY(pa, PERM_USER | PERM_PRESENT);
f010abcc:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010abcf:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010abd2:	c1 ea 0c             	shr    $0xc,%edx
f010abd5:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f010abdb:	c1 e2 02             	shl    $0x2,%edx
f010abde:	01 d0                	add    %edx,%eax
f010abe0:	8b 55 e8             	mov    -0x18(%ebp),%edx
f010abe3:	83 ca 05             	or     $0x5,%edx
f010abe6:	89 10                	mov    %edx,(%eax)
#if USE_KHEAP
	e->__uptr_pws = (struct WorkingSetElement*) USER_PAGES_WS_START;
	unsigned int sva = (unsigned int) e->ptr_pageWorkingSet;
	uint32 nBytes = sizeof(struct WorkingSetElement) * e->page_WS_max_size;
	unsigned int dva = (unsigned int) (e->__uptr_pws);
	for (sva = (uint32) (e->ptr_pageWorkingSet); sva < ((uint32) (e->ptr_pageWorkingSet) + nBytes); sva += PAGE_SIZE, dva += PAGE_SIZE)
f010abe8:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
f010abef:	81 45 f0 00 10 00 00 	addl   $0x1000,-0x10(%ebp)
f010abf6:	8b 45 08             	mov    0x8(%ebp),%eax
f010abf9:	8b 40 78             	mov    0x78(%eax),%eax
f010abfc:	89 c2                	mov    %eax,%edx
f010abfe:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010ac01:	01 d0                	add    %edx,%eax
f010ac03:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f010ac06:	0f 87 79 ff ff ff    	ja     f010ab85 <share_pws_at_user_space+0x45>
		ptr_page_table[PTX(dva)] = CONSTRUCT_ENTRY(pa, PERM_USER | PERM_PRESENT);
	}
#else
	panic("share_pws_at_user_space(): should not be called when kernel heap is disabled.");
#endif
}
f010ac0c:	90                   	nop
f010ac0d:	c9                   	leave  
f010ac0e:	c3                   	ret    

f010ac0f <unshare_pws_at_user_space>:

//===============================================
// 11) REMOVE THE SHARED WS FROM USER SPACE:
//===============================================
void unshare_pws_at_user_space(struct Env *e)
{
f010ac0f:	55                   	push   %ebp
f010ac10:	89 e5                	mov    %esp,%ebp
f010ac12:	83 ec 28             	sub    $0x28,%esp
#if USE_KHEAP
	{
		uint32 nBytes = sizeof(struct WorkingSetElement) * e->page_WS_max_size;
f010ac15:	8b 45 08             	mov    0x8(%ebp),%eax
f010ac18:	8b 50 74             	mov    0x74(%eax),%edx
f010ac1b:	89 d0                	mov    %edx,%eax
f010ac1d:	01 c0                	add    %eax,%eax
f010ac1f:	01 d0                	add    %edx,%eax
f010ac21:	c1 e0 03             	shl    $0x3,%eax
f010ac24:	89 45 f0             	mov    %eax,-0x10(%ebp)
		unsigned int sva = (unsigned int) e->__uptr_pws;
f010ac27:	8b 45 08             	mov    0x8(%ebp),%eax
f010ac2a:	8b 80 9c 05 00 00    	mov    0x59c(%eax),%eax
f010ac30:	89 45 ec             	mov    %eax,-0x14(%ebp)
		{
			//unsigned int pa = kheap_physical_address(sva);
			unmap_frame(e->env_page_directory, sva);
		}
		*/
		unsigned int tsva = ROUNDDOWN((unsigned int) e->__uptr_pws, PTSIZE);
f010ac33:	8b 45 08             	mov    0x8(%ebp),%eax
f010ac36:	8b 80 9c 05 00 00    	mov    0x59c(%eax),%eax
f010ac3c:	89 45 e8             	mov    %eax,-0x18(%ebp)
f010ac3f:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010ac42:	25 00 00 c0 ff       	and    $0xffc00000,%eax
f010ac47:	89 45 f4             	mov    %eax,-0xc(%ebp)
		for(; tsva < ((unsigned int) (e->__uptr_pws) + nBytes) ; tsva+=PTSIZE)
f010ac4a:	eb 46                	jmp    f010ac92 <unshare_pws_at_user_space+0x83>
		{
			unsigned int * uws_table;
			get_page_table(e->env_page_directory, tsva, &uws_table );
f010ac4c:	8b 45 08             	mov    0x8(%ebp),%eax
f010ac4f:	8b 40 5c             	mov    0x5c(%eax),%eax
f010ac52:	83 ec 04             	sub    $0x4,%esp
f010ac55:	8d 55 e0             	lea    -0x20(%ebp),%edx
f010ac58:	52                   	push   %edx
f010ac59:	ff 75 f4             	pushl  -0xc(%ebp)
f010ac5c:	50                   	push   %eax
f010ac5d:	e8 4f be ff ff       	call   f0106ab1 <get_page_table>
f010ac62:	83 c4 10             	add    $0x10,%esp
			kfree(uws_table);
f010ac65:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010ac68:	83 ec 0c             	sub    $0xc,%esp
f010ac6b:	50                   	push   %eax
f010ac6c:	e8 df cc ff ff       	call   f0107950 <kfree>
f010ac71:	83 c4 10             	add    $0x10,%esp
			e->env_page_directory[PDX(tsva)] = 0;
f010ac74:	8b 45 08             	mov    0x8(%ebp),%eax
f010ac77:	8b 40 5c             	mov    0x5c(%eax),%eax
f010ac7a:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010ac7d:	c1 ea 16             	shr    $0x16,%edx
f010ac80:	c1 e2 02             	shl    $0x2,%edx
f010ac83:	01 d0                	add    %edx,%eax
f010ac85:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
			//unsigned int pa = kheap_physical_address(sva);
			unmap_frame(e->env_page_directory, sva);
		}
		*/
		unsigned int tsva = ROUNDDOWN((unsigned int) e->__uptr_pws, PTSIZE);
		for(; tsva < ((unsigned int) (e->__uptr_pws) + nBytes) ; tsva+=PTSIZE)
f010ac8b:	81 45 f4 00 00 40 00 	addl   $0x400000,-0xc(%ebp)
f010ac92:	8b 45 08             	mov    0x8(%ebp),%eax
f010ac95:	8b 80 9c 05 00 00    	mov    0x59c(%eax),%eax
f010ac9b:	89 c2                	mov    %eax,%edx
f010ac9d:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010aca0:	01 d0                	add    %edx,%eax
f010aca2:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f010aca5:	77 a5                	ja     f010ac4c <unshare_pws_at_user_space+0x3d>

static __inline void
tlbflush(void)
{
	uint32 cr3;
	__asm __volatile("movl %%cr3,%0" : "=r" (cr3));
f010aca7:	0f 20 d8             	mov    %cr3,%eax
f010acaa:	89 45 e4             	mov    %eax,-0x1c(%ebp)
	__asm __volatile("movl %0,%%cr3" : : "r" (cr3));
f010acad:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010acb0:	0f 22 d8             	mov    %eax,%cr3
		tlbflush();
	}
#else
	panic("__remove_pws_user_pages(): should not be called when kernel heap is disabled.");
#endif
}
f010acb3:	90                   	nop
f010acb4:	c9                   	leave  
f010acb5:	c3                   	ret    

f010acb6 <PROGRAM_SEGMENT_NEXT>:

//===============================================
// 12) SEG NEXT [TO BE USED IN PROG_SEG_FOREACH]:
//===============================================
struct ProgramSegment* PROGRAM_SEGMENT_NEXT(struct ProgramSegment* seg, uint8* ptr_program_start)
{
f010acb6:	55                   	push   %ebp
f010acb7:	89 e5                	mov    %esp,%ebp
f010acb9:	83 ec 18             	sub    $0x18,%esp
	int index = (*seg).segment_id++;
f010acbc:	8b 45 08             	mov    0x8(%ebp),%eax
f010acbf:	8b 40 10             	mov    0x10(%eax),%eax
f010acc2:	8d 48 01             	lea    0x1(%eax),%ecx
f010acc5:	8b 55 08             	mov    0x8(%ebp),%edx
f010acc8:	89 4a 10             	mov    %ecx,0x10(%edx)
f010accb:	89 45 f4             	mov    %eax,-0xc(%ebp)

	struct Proghdr *ph, *eph;
	struct Elf * pELFHDR = (struct Elf *)ptr_program_start ;
f010acce:	8b 45 0c             	mov    0xc(%ebp),%eax
f010acd1:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (pELFHDR->e_magic != ELF_MAGIC)
f010acd4:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010acd7:	8b 00                	mov    (%eax),%eax
f010acd9:	3d 7f 45 4c 46       	cmp    $0x464c457f,%eax
f010acde:	74 17                	je     f010acf7 <PROGRAM_SEGMENT_NEXT+0x41>
		panic("Matafa2nash 3ala Keda");
f010ace0:	83 ec 04             	sub    $0x4,%esp
f010ace3:	68 17 68 13 f0       	push   $0xf0136817
f010ace8:	68 b6 03 00 00       	push   $0x3b6
f010aced:	68 c1 66 13 f0       	push   $0xf01366c1
f010acf2:	e8 0e 55 ff ff       	call   f0100205 <_panic>
	ph = (struct Proghdr *) ( ((uint8 *) ptr_program_start) + pELFHDR->e_phoff);
f010acf7:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010acfa:	8b 50 1c             	mov    0x1c(%eax),%edx
f010acfd:	8b 45 0c             	mov    0xc(%ebp),%eax
f010ad00:	01 d0                	add    %edx,%eax
f010ad02:	89 45 ec             	mov    %eax,-0x14(%ebp)

	while (ph[(*seg).segment_id].p_type != ELF_PROG_LOAD && ((*seg).segment_id < pELFHDR->e_phnum)) (*seg).segment_id++;
f010ad05:	eb 0f                	jmp    f010ad16 <PROGRAM_SEGMENT_NEXT+0x60>
f010ad07:	8b 45 08             	mov    0x8(%ebp),%eax
f010ad0a:	8b 40 10             	mov    0x10(%eax),%eax
f010ad0d:	8d 50 01             	lea    0x1(%eax),%edx
f010ad10:	8b 45 08             	mov    0x8(%ebp),%eax
f010ad13:	89 50 10             	mov    %edx,0x10(%eax)
f010ad16:	8b 45 08             	mov    0x8(%ebp),%eax
f010ad19:	8b 40 10             	mov    0x10(%eax),%eax
f010ad1c:	c1 e0 05             	shl    $0x5,%eax
f010ad1f:	89 c2                	mov    %eax,%edx
f010ad21:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010ad24:	01 d0                	add    %edx,%eax
f010ad26:	8b 00                	mov    (%eax),%eax
f010ad28:	83 f8 01             	cmp    $0x1,%eax
f010ad2b:	74 13                	je     f010ad40 <PROGRAM_SEGMENT_NEXT+0x8a>
f010ad2d:	8b 45 08             	mov    0x8(%ebp),%eax
f010ad30:	8b 50 10             	mov    0x10(%eax),%edx
f010ad33:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010ad36:	8b 40 2c             	mov    0x2c(%eax),%eax
f010ad39:	0f b7 c0             	movzwl %ax,%eax
f010ad3c:	39 c2                	cmp    %eax,%edx
f010ad3e:	72 c7                	jb     f010ad07 <PROGRAM_SEGMENT_NEXT+0x51>
	index = (*seg).segment_id;
f010ad40:	8b 45 08             	mov    0x8(%ebp),%eax
f010ad43:	8b 40 10             	mov    0x10(%eax),%eax
f010ad46:	89 45 f4             	mov    %eax,-0xc(%ebp)

	if(index < pELFHDR->e_phnum)
f010ad49:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010ad4c:	8b 40 2c             	mov    0x2c(%eax),%eax
f010ad4f:	0f b7 c0             	movzwl %ax,%eax
f010ad52:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f010ad55:	7e 63                	jle    f010adba <PROGRAM_SEGMENT_NEXT+0x104>
	{
		(*seg).ptr_start = (uint8 *) ptr_program_start + ph[index].p_offset;
f010ad57:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010ad5a:	c1 e0 05             	shl    $0x5,%eax
f010ad5d:	89 c2                	mov    %eax,%edx
f010ad5f:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010ad62:	01 d0                	add    %edx,%eax
f010ad64:	8b 50 04             	mov    0x4(%eax),%edx
f010ad67:	8b 45 0c             	mov    0xc(%ebp),%eax
f010ad6a:	01 c2                	add    %eax,%edx
f010ad6c:	8b 45 08             	mov    0x8(%ebp),%eax
f010ad6f:	89 10                	mov    %edx,(%eax)
		(*seg).size_in_memory =  ph[index].p_memsz;
f010ad71:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010ad74:	c1 e0 05             	shl    $0x5,%eax
f010ad77:	89 c2                	mov    %eax,%edx
f010ad79:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010ad7c:	01 d0                	add    %edx,%eax
f010ad7e:	8b 50 14             	mov    0x14(%eax),%edx
f010ad81:	8b 45 08             	mov    0x8(%ebp),%eax
f010ad84:	89 50 08             	mov    %edx,0x8(%eax)
		(*seg).size_in_file = ph[index].p_filesz;
f010ad87:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010ad8a:	c1 e0 05             	shl    $0x5,%eax
f010ad8d:	89 c2                	mov    %eax,%edx
f010ad8f:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010ad92:	01 d0                	add    %edx,%eax
f010ad94:	8b 50 10             	mov    0x10(%eax),%edx
f010ad97:	8b 45 08             	mov    0x8(%ebp),%eax
f010ad9a:	89 50 04             	mov    %edx,0x4(%eax)
		(*seg).virtual_address = (uint8*)ph[index].p_va;
f010ad9d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010ada0:	c1 e0 05             	shl    $0x5,%eax
f010ada3:	89 c2                	mov    %eax,%edx
f010ada5:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010ada8:	01 d0                	add    %edx,%eax
f010adaa:	8b 40 08             	mov    0x8(%eax),%eax
f010adad:	89 c2                	mov    %eax,%edx
f010adaf:	8b 45 08             	mov    0x8(%ebp),%eax
f010adb2:	89 50 0c             	mov    %edx,0xc(%eax)
		return seg;
f010adb5:	8b 45 08             	mov    0x8(%ebp),%eax
f010adb8:	eb 05                	jmp    f010adbf <PROGRAM_SEGMENT_NEXT+0x109>
	}
	return 0;
f010adba:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010adbf:	c9                   	leave  
f010adc0:	c3                   	ret    

f010adc1 <PROGRAM_SEGMENT_FIRST>:

//===============================================
// 13) SEG FIRST [TO BE USED IN PROG_SEG_FOREACH]:
//===============================================
struct ProgramSegment PROGRAM_SEGMENT_FIRST( uint8* ptr_program_start)
{
f010adc1:	55                   	push   %ebp
f010adc2:	89 e5                	mov    %esp,%ebp
f010adc4:	57                   	push   %edi
f010adc5:	56                   	push   %esi
f010adc6:	53                   	push   %ebx
f010adc7:	83 ec 2c             	sub    $0x2c,%esp
	struct ProgramSegment seg;
	seg.segment_id = 0;
f010adca:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)

	struct Proghdr *ph, *eph;
	struct Elf * pELFHDR = (struct Elf *)ptr_program_start ;
f010add1:	8b 45 0c             	mov    0xc(%ebp),%eax
f010add4:	89 45 e4             	mov    %eax,-0x1c(%ebp)
	if (pELFHDR->e_magic != ELF_MAGIC)
f010add7:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010adda:	8b 00                	mov    (%eax),%eax
f010addc:	3d 7f 45 4c 46       	cmp    $0x464c457f,%eax
f010ade1:	74 17                	je     f010adfa <PROGRAM_SEGMENT_FIRST+0x39>
		panic("Matafa2nash 3ala Keda");
f010ade3:	83 ec 04             	sub    $0x4,%esp
f010ade6:	68 17 68 13 f0       	push   $0xf0136817
f010adeb:	68 d2 03 00 00       	push   $0x3d2
f010adf0:	68 c1 66 13 f0       	push   $0xf01366c1
f010adf5:	e8 0b 54 ff ff       	call   f0100205 <_panic>
	ph = (struct Proghdr *) ( ((uint8 *) ptr_program_start) + pELFHDR->e_phoff);
f010adfa:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010adfd:	8b 50 1c             	mov    0x1c(%eax),%edx
f010ae00:	8b 45 0c             	mov    0xc(%ebp),%eax
f010ae03:	01 d0                	add    %edx,%eax
f010ae05:	89 45 e0             	mov    %eax,-0x20(%ebp)
	while (ph[(seg).segment_id].p_type != ELF_PROG_LOAD && ((seg).segment_id < pELFHDR->e_phnum)) (seg).segment_id++;
f010ae08:	eb 07                	jmp    f010ae11 <PROGRAM_SEGMENT_FIRST+0x50>
f010ae0a:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010ae0d:	40                   	inc    %eax
f010ae0e:	89 45 d8             	mov    %eax,-0x28(%ebp)
f010ae11:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010ae14:	c1 e0 05             	shl    $0x5,%eax
f010ae17:	89 c2                	mov    %eax,%edx
f010ae19:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010ae1c:	01 d0                	add    %edx,%eax
f010ae1e:	8b 00                	mov    (%eax),%eax
f010ae20:	83 f8 01             	cmp    $0x1,%eax
f010ae23:	74 10                	je     f010ae35 <PROGRAM_SEGMENT_FIRST+0x74>
f010ae25:	8b 55 d8             	mov    -0x28(%ebp),%edx
f010ae28:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010ae2b:	8b 40 2c             	mov    0x2c(%eax),%eax
f010ae2e:	0f b7 c0             	movzwl %ax,%eax
f010ae31:	39 c2                	cmp    %eax,%edx
f010ae33:	72 d5                	jb     f010ae0a <PROGRAM_SEGMENT_FIRST+0x49>
	int index = (seg).segment_id;
f010ae35:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010ae38:	89 45 dc             	mov    %eax,-0x24(%ebp)

	if(index < pELFHDR->e_phnum)
f010ae3b:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010ae3e:	8b 40 2c             	mov    0x2c(%eax),%eax
f010ae41:	0f b7 c0             	movzwl %ax,%eax
f010ae44:	3b 45 dc             	cmp    -0x24(%ebp),%eax
f010ae47:	7e 68                	jle    f010aeb1 <PROGRAM_SEGMENT_FIRST+0xf0>
	{
		(seg).ptr_start = (uint8 *) ptr_program_start + ph[index].p_offset;
f010ae49:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010ae4c:	c1 e0 05             	shl    $0x5,%eax
f010ae4f:	89 c2                	mov    %eax,%edx
f010ae51:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010ae54:	01 d0                	add    %edx,%eax
f010ae56:	8b 50 04             	mov    0x4(%eax),%edx
f010ae59:	8b 45 0c             	mov    0xc(%ebp),%eax
f010ae5c:	01 d0                	add    %edx,%eax
f010ae5e:	89 45 c8             	mov    %eax,-0x38(%ebp)
		(seg).size_in_memory =  ph[index].p_memsz;
f010ae61:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010ae64:	c1 e0 05             	shl    $0x5,%eax
f010ae67:	89 c2                	mov    %eax,%edx
f010ae69:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010ae6c:	01 d0                	add    %edx,%eax
f010ae6e:	8b 40 14             	mov    0x14(%eax),%eax
f010ae71:	89 45 d0             	mov    %eax,-0x30(%ebp)
		(seg).size_in_file = ph[index].p_filesz;
f010ae74:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010ae77:	c1 e0 05             	shl    $0x5,%eax
f010ae7a:	89 c2                	mov    %eax,%edx
f010ae7c:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010ae7f:	01 d0                	add    %edx,%eax
f010ae81:	8b 40 10             	mov    0x10(%eax),%eax
f010ae84:	89 45 cc             	mov    %eax,-0x34(%ebp)
		(seg).virtual_address = (uint8*)ph[index].p_va;
f010ae87:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010ae8a:	c1 e0 05             	shl    $0x5,%eax
f010ae8d:	89 c2                	mov    %eax,%edx
f010ae8f:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010ae92:	01 d0                	add    %edx,%eax
f010ae94:	8b 40 08             	mov    0x8(%eax),%eax
f010ae97:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		return seg;
f010ae9a:	8b 45 08             	mov    0x8(%ebp),%eax
f010ae9d:	89 c3                	mov    %eax,%ebx
f010ae9f:	8d 45 c8             	lea    -0x38(%ebp),%eax
f010aea2:	ba 05 00 00 00       	mov    $0x5,%edx
f010aea7:	89 df                	mov    %ebx,%edi
f010aea9:	89 c6                	mov    %eax,%esi
f010aeab:	89 d1                	mov    %edx,%ecx
f010aead:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
f010aeaf:	eb 1c                	jmp    f010aecd <PROGRAM_SEGMENT_FIRST+0x10c>
	}
	seg.segment_id = -1;
f010aeb1:	c7 45 d8 ff ff ff ff 	movl   $0xffffffff,-0x28(%ebp)
	return seg;
f010aeb8:	8b 45 08             	mov    0x8(%ebp),%eax
f010aebb:	89 c3                	mov    %eax,%ebx
f010aebd:	8d 45 c8             	lea    -0x38(%ebp),%eax
f010aec0:	ba 05 00 00 00       	mov    $0x5,%edx
f010aec5:	89 df                	mov    %ebx,%edi
f010aec7:	89 c6                	mov    %eax,%esi
f010aec9:	89 d1                	mov    %edx,%ecx
f010aecb:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
}
f010aecd:	8b 45 08             	mov    0x8(%ebp),%eax
f010aed0:	8d 65 f4             	lea    -0xc(%ebp),%esp
f010aed3:	5b                   	pop    %ebx
f010aed4:	5e                   	pop    %esi
f010aed5:	5f                   	pop    %edi
f010aed6:	5d                   	pop    %ebp
f010aed7:	c2 04 00             	ret    $0x4

f010aeda <cleanup_buffers>:

//===============================================
// 14) CLEANUP MODIFIED BUFFER [TO BE USED AS LAST STEP WHEN ADD ENV TO EXIT Q]:
//===============================================
void cleanup_buffers(struct Env* e)
{
f010aeda:	55                   	push   %ebp
f010aedb:	89 e5                	mov    %esp,%ebp
f010aedd:	83 ec 18             	sub    $0x18,%esp
	//NEW !! 2016, remove remaining pages in the modified list
	struct FrameInfo *ptr_fi=NULL ;
f010aee0:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

	//	cprintf("[%s] deleting modified at end of env\n", curenv->prog_name);
	//	struct freeFramesCounters ffc = calculate_available_frames();
	//	cprintf("[%s] bef, mod = %d, fb = %d, fnb = %d\n",curenv->prog_name, ffc.modified, ffc.freeBuffered, ffc.freeNotBuffered);

	LIST_FOREACH(ptr_fi, &modified_frame_list)
f010aee7:	a1 78 25 78 f0       	mov    0xf0782578,%eax
f010aeec:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010aeef:	e9 c3 00 00 00       	jmp    f010afb7 <cleanup_buffers+0xdd>
	{
		if(ptr_fi->environment == e)
f010aef4:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010aef7:	8b 40 10             	mov    0x10(%eax),%eax
f010aefa:	3b 45 08             	cmp    0x8(%ebp),%eax
f010aefd:	0f 85 ac 00 00 00    	jne    f010afaf <cleanup_buffers+0xd5>
		{
			pt_clear_page_table_entry(ptr_fi->environment->env_page_directory,ptr_fi->va);
f010af03:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010af06:	8b 50 0c             	mov    0xc(%eax),%edx
f010af09:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010af0c:	8b 40 10             	mov    0x10(%eax),%eax
f010af0f:	8b 40 5c             	mov    0x5c(%eax),%eax
f010af12:	83 ec 08             	sub    $0x8,%esp
f010af15:	52                   	push   %edx
f010af16:	50                   	push   %eax
f010af17:	e8 a0 cd ff ff       	call   f0107cbc <pt_clear_page_table_entry>
f010af1c:	83 c4 10             	add    $0x10,%esp

			//cprintf("==================\n");
			//cprintf("[%s] ptr_fi = %x, ptr_fi next = %x \n",curenv->prog_name, ptr_fi, LIST_NEXT(ptr_fi));
			LIST_REMOVE(&modified_frame_list, ptr_fi);
f010af1f:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010af23:	75 17                	jne    f010af3c <cleanup_buffers+0x62>
f010af25:	83 ec 04             	sub    $0x4,%esp
f010af28:	68 de 66 13 f0       	push   $0xf01366de
f010af2d:	68 f9 03 00 00       	push   $0x3f9
f010af32:	68 c1 66 13 f0       	push   $0xf01366c1
f010af37:	e8 c9 52 ff ff       	call   f0100205 <_panic>
f010af3c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010af3f:	8b 00                	mov    (%eax),%eax
f010af41:	85 c0                	test   %eax,%eax
f010af43:	74 10                	je     f010af55 <cleanup_buffers+0x7b>
f010af45:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010af48:	8b 00                	mov    (%eax),%eax
f010af4a:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010af4d:	8b 52 04             	mov    0x4(%edx),%edx
f010af50:	89 50 04             	mov    %edx,0x4(%eax)
f010af53:	eb 0b                	jmp    f010af60 <cleanup_buffers+0x86>
f010af55:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010af58:	8b 40 04             	mov    0x4(%eax),%eax
f010af5b:	a3 7c 25 78 f0       	mov    %eax,0xf078257c
f010af60:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010af63:	8b 40 04             	mov    0x4(%eax),%eax
f010af66:	85 c0                	test   %eax,%eax
f010af68:	74 0f                	je     f010af79 <cleanup_buffers+0x9f>
f010af6a:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010af6d:	8b 40 04             	mov    0x4(%eax),%eax
f010af70:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010af73:	8b 12                	mov    (%edx),%edx
f010af75:	89 10                	mov    %edx,(%eax)
f010af77:	eb 0a                	jmp    f010af83 <cleanup_buffers+0xa9>
f010af79:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010af7c:	8b 00                	mov    (%eax),%eax
f010af7e:	a3 78 25 78 f0       	mov    %eax,0xf0782578
f010af83:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010af86:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f010af8c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010af8f:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f010af96:	a1 84 25 78 f0       	mov    0xf0782584,%eax
f010af9b:	48                   	dec    %eax
f010af9c:	a3 84 25 78 f0       	mov    %eax,0xf0782584

			free_frame(ptr_fi);
f010afa1:	83 ec 0c             	sub    $0xc,%esp
f010afa4:	ff 75 f4             	pushl  -0xc(%ebp)
f010afa7:	e8 5b ba ff ff       	call   f0106a07 <free_frame>
f010afac:	83 c4 10             	add    $0x10,%esp

	//	cprintf("[%s] deleting modified at end of env\n", curenv->prog_name);
	//	struct freeFramesCounters ffc = calculate_available_frames();
	//	cprintf("[%s] bef, mod = %d, fb = %d, fnb = %d\n",curenv->prog_name, ffc.modified, ffc.freeBuffered, ffc.freeNotBuffered);

	LIST_FOREACH(ptr_fi, &modified_frame_list)
f010afaf:	a1 80 25 78 f0       	mov    0xf0782580,%eax
f010afb4:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010afb7:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010afbb:	74 07                	je     f010afc4 <cleanup_buffers+0xea>
f010afbd:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010afc0:	8b 00                	mov    (%eax),%eax
f010afc2:	eb 05                	jmp    f010afc9 <cleanup_buffers+0xef>
f010afc4:	b8 00 00 00 00       	mov    $0x0,%eax
f010afc9:	a3 80 25 78 f0       	mov    %eax,0xf0782580
f010afce:	a1 80 25 78 f0       	mov    0xf0782580,%eax
f010afd3:	85 c0                	test   %eax,%eax
f010afd5:	0f 85 19 ff ff ff    	jne    f010aef4 <cleanup_buffers+0x1a>
f010afdb:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010afdf:	0f 85 0f ff ff ff    	jne    f010aef4 <cleanup_buffers+0x1a>
	}

	//	cprintf("[%s] finished deleting modified frames at the end of env\n", curenv->prog_name);
	//	struct freeFramesCounters ffc2 = calculate_available_frames();
	//	cprintf("[%s] aft, mod = %d, fb = %d, fnb = %d\n",curenv->prog_name, ffc2.modified, ffc2.freeBuffered, ffc2.freeNotBuffered);
}
f010afe5:	90                   	nop
f010afe6:	c9                   	leave  
f010afe7:	c3                   	ret    

f010afe8 <set_program_priority>:
#include "../disk/pagefile_manager.h"
#include "../mem/kheap.h"
#include "../mem/memory_manager.h"

void set_program_priority(struct Env* env, int priority)
{
f010afe8:	55                   	push   %ebp
f010afe9:	89 e5                	mov    %esp,%ebp
f010afeb:	83 ec 08             	sub    $0x8,%esp
	//[PROGRAM PRIORITY] set_program_priority
	//[ALREADY IMPLEMENTED]

	if(priority < 1 || priority > 5)
f010afee:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
f010aff2:	7e 06                	jle    f010affa <set_program_priority+0x12>
f010aff4:	83 7d 0c 05          	cmpl   $0x5,0xc(%ebp)
f010aff8:	7e 14                	jle    f010b00e <set_program_priority+0x26>
	{
		panic("Please enter valid priority (1->5)\n");
f010affa:	83 ec 04             	sub    $0x4,%esp
f010affd:	68 30 68 13 f0       	push   $0xf0136830
f010b002:	6a 10                	push   $0x10
f010b004:	68 54 68 13 f0       	push   $0xf0136854
f010b009:	e8 f7 51 ff ff       	call   f0100205 <_panic>
		return;
	}
	if(env == NULL)
f010b00e:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f010b012:	74 75                	je     f010b089 <set_program_priority+0xa1>
		return;
	switch(priority)
f010b014:	83 7d 0c 05          	cmpl   $0x5,0xc(%ebp)
f010b018:	77 56                	ja     f010b070 <set_program_priority+0x88>
f010b01a:	8b 45 0c             	mov    0xc(%ebp),%eax
f010b01d:	c1 e0 02             	shl    $0x2,%eax
f010b020:	05 90 68 13 f0       	add    $0xf0136890,%eax
f010b025:	8b 00                	mov    (%eax),%eax
f010b027:	ff e0                	jmp    *%eax
	{
		case PRIORITY_LOW:
			half_WS_Size(env, 1);
f010b029:	83 ec 08             	sub    $0x8,%esp
f010b02c:	6a 01                	push   $0x1
f010b02e:	ff 75 08             	pushl  0x8(%ebp)
f010b031:	e8 fd d6 ff ff       	call   f0108733 <half_WS_Size>
f010b036:	83 c4 10             	add    $0x10,%esp
			break;
f010b039:	eb 35                	jmp    f010b070 <set_program_priority+0x88>
		case PRIORITY_BELOWNORMAL:
			half_WS_Size(env, 0);
f010b03b:	83 ec 08             	sub    $0x8,%esp
f010b03e:	6a 00                	push   $0x0
f010b040:	ff 75 08             	pushl  0x8(%ebp)
f010b043:	e8 eb d6 ff ff       	call   f0108733 <half_WS_Size>
f010b048:	83 c4 10             	add    $0x10,%esp
			break;
f010b04b:	eb 23                	jmp    f010b070 <set_program_priority+0x88>
		case PRIORITY_NORMAL:
			// Do Nothing
			break;
		case PRIORITY_ABOVENORMAL:
			double_WS_Size(env, 1);
f010b04d:	83 ec 08             	sub    $0x8,%esp
f010b050:	6a 01                	push   $0x1
f010b052:	ff 75 08             	pushl  0x8(%ebp)
f010b055:	e8 bc d6 ff ff       	call   f0108716 <double_WS_Size>
f010b05a:	83 c4 10             	add    $0x10,%esp
			break;
f010b05d:	eb 11                	jmp    f010b070 <set_program_priority+0x88>
		case PRIORITY_HIGH:
			double_WS_Size(env, 0);
f010b05f:	83 ec 08             	sub    $0x8,%esp
f010b062:	6a 00                	push   $0x0
f010b064:	ff 75 08             	pushl  0x8(%ebp)
f010b067:	e8 aa d6 ff ff       	call   f0108716 <double_WS_Size>
f010b06c:	83 c4 10             	add    $0x10,%esp
			break;
f010b06f:	90                   	nop
	}

	cprintf("The new size of the ws is %d\n", env->page_WS_max_size);
f010b070:	8b 45 08             	mov    0x8(%ebp),%eax
f010b073:	8b 40 74             	mov    0x74(%eax),%eax
f010b076:	83 ec 08             	sub    $0x8,%esp
f010b079:	50                   	push   %eax
f010b07a:	68 71 68 13 f0       	push   $0xf0136871
f010b07f:	e8 8a 5c ff ff       	call   f0100d0e <cprintf>
f010b084:	83 c4 10             	add    $0x10,%esp
f010b087:	eb 01                	jmp    f010b08a <set_program_priority+0xa2>
	{
		panic("Please enter valid priority (1->5)\n");
		return;
	}
	if(env == NULL)
		return;
f010b089:	90                   	nop
			double_WS_Size(env, 0);
			break;
	}

	cprintf("The new size of the ws is %d\n", env->page_WS_max_size);
}
f010b08a:	c9                   	leave  
f010b08b:	c3                   	ret    

f010b08c <get_user_program_info>:

// Number of user programs in the program table
int NUM_USER_PROGS = (sizeof(userPrograms)/sizeof(userPrograms[0]));

struct UserProgramInfo* get_user_program_info(char* user_program_name)
{
f010b08c:	55                   	push   %ebp
f010b08d:	89 e5                	mov    %esp,%ebp
f010b08f:	83 ec 18             	sub    $0x18,%esp
	int i;
	for (i = 0; i < NUM_USER_PROGS; i++) {
f010b092:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f010b099:	eb 29                	jmp    f010b0c4 <get_user_program_info+0x38>
		if (strcmp(user_program_name, userPrograms[i].name) == 0)
f010b09b:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010b09e:	89 d0                	mov    %edx,%eax
f010b0a0:	01 c0                	add    %eax,%eax
f010b0a2:	01 d0                	add    %edx,%eax
f010b0a4:	c1 e0 02             	shl    $0x2,%eax
f010b0a7:	05 00 29 19 f0       	add    $0xf0192900,%eax
f010b0ac:	8b 00                	mov    (%eax),%eax
f010b0ae:	83 ec 08             	sub    $0x8,%esp
f010b0b1:	50                   	push   %eax
f010b0b2:	ff 75 08             	pushl  0x8(%ebp)
f010b0b5:	e8 44 62 02 00       	call   f01312fe <strcmp>
f010b0ba:	83 c4 10             	add    $0x10,%esp
f010b0bd:	85 c0                	test   %eax,%eax
f010b0bf:	74 0f                	je     f010b0d0 <get_user_program_info+0x44>
int NUM_USER_PROGS = (sizeof(userPrograms)/sizeof(userPrograms[0]));

struct UserProgramInfo* get_user_program_info(char* user_program_name)
{
	int i;
	for (i = 0; i < NUM_USER_PROGS; i++) {
f010b0c1:	ff 45 f4             	incl   -0xc(%ebp)
f010b0c4:	a1 18 2d 19 f0       	mov    0xf0192d18,%eax
f010b0c9:	39 45 f4             	cmp    %eax,-0xc(%ebp)
f010b0cc:	7c cd                	jl     f010b09b <get_user_program_info+0xf>
f010b0ce:	eb 01                	jmp    f010b0d1 <get_user_program_info+0x45>
		if (strcmp(user_program_name, userPrograms[i].name) == 0)
			break;
f010b0d0:	90                   	nop
	}
	if(i==NUM_USER_PROGS)
f010b0d1:	a1 18 2d 19 f0       	mov    0xf0192d18,%eax
f010b0d6:	39 45 f4             	cmp    %eax,-0xc(%ebp)
f010b0d9:	75 1a                	jne    f010b0f5 <get_user_program_info+0x69>
	{
		cprintf("Unknown user program '%s'\n", user_program_name);
f010b0db:	83 ec 08             	sub    $0x8,%esp
f010b0de:	ff 75 08             	pushl  0x8(%ebp)
f010b0e1:	68 25 74 13 f0       	push   $0xf0137425
f010b0e6:	e8 23 5c ff ff       	call   f0100d0e <cprintf>
f010b0eb:	83 c4 10             	add    $0x10,%esp
		return 0;
f010b0ee:	b8 00 00 00 00       	mov    $0x0,%eax
f010b0f3:	eb 11                	jmp    f010b106 <get_user_program_info+0x7a>
	}

	return &userPrograms[i];
f010b0f5:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010b0f8:	89 d0                	mov    %edx,%eax
f010b0fa:	01 c0                	add    %eax,%eax
f010b0fc:	01 d0                	add    %edx,%eax
f010b0fe:	c1 e0 02             	shl    $0x2,%eax
f010b101:	05 00 29 19 f0       	add    $0xf0192900,%eax
}
f010b106:	c9                   	leave  
f010b107:	c3                   	ret    

f010b108 <get_user_program_info_by_env>:

struct UserProgramInfo* get_user_program_info_by_env(struct Env* e)
{
f010b108:	55                   	push   %ebp
f010b109:	89 e5                	mov    %esp,%ebp
f010b10b:	83 ec 18             	sub    $0x18,%esp
	int i;
	for (i = 0; i < NUM_USER_PROGS; i++) {
f010b10e:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f010b115:	eb 30                	jmp    f010b147 <get_user_program_info_by_env+0x3f>
		if ( strcmp( e->prog_name , userPrograms[i].name) ==0)
f010b117:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010b11a:	89 d0                	mov    %edx,%eax
f010b11c:	01 c0                	add    %eax,%eax
f010b11e:	01 d0                	add    %edx,%eax
f010b120:	c1 e0 02             	shl    $0x2,%eax
f010b123:	05 00 29 19 f0       	add    $0xf0192900,%eax
f010b128:	8b 00                	mov    (%eax),%eax
f010b12a:	8b 55 08             	mov    0x8(%ebp),%edx
f010b12d:	81 c2 5c 05 00 00    	add    $0x55c,%edx
f010b133:	83 ec 08             	sub    $0x8,%esp
f010b136:	50                   	push   %eax
f010b137:	52                   	push   %edx
f010b138:	e8 c1 61 02 00       	call   f01312fe <strcmp>
f010b13d:	83 c4 10             	add    $0x10,%esp
f010b140:	85 c0                	test   %eax,%eax
f010b142:	74 0f                	je     f010b153 <get_user_program_info_by_env+0x4b>
}

struct UserProgramInfo* get_user_program_info_by_env(struct Env* e)
{
	int i;
	for (i = 0; i < NUM_USER_PROGS; i++) {
f010b144:	ff 45 f4             	incl   -0xc(%ebp)
f010b147:	a1 18 2d 19 f0       	mov    0xf0192d18,%eax
f010b14c:	39 45 f4             	cmp    %eax,-0xc(%ebp)
f010b14f:	7c c6                	jl     f010b117 <get_user_program_info_by_env+0xf>
f010b151:	eb 01                	jmp    f010b154 <get_user_program_info_by_env+0x4c>
		if ( strcmp( e->prog_name , userPrograms[i].name) ==0)
			break;
f010b153:	90                   	nop
	}
	if(i==NUM_USER_PROGS)
f010b154:	a1 18 2d 19 f0       	mov    0xf0192d18,%eax
f010b159:	39 45 f4             	cmp    %eax,-0xc(%ebp)
f010b15c:	75 17                	jne    f010b175 <get_user_program_info_by_env+0x6d>
	{
		cprintf("Unknown user program \n");
f010b15e:	83 ec 0c             	sub    $0xc,%esp
f010b161:	68 40 74 13 f0       	push   $0xf0137440
f010b166:	e8 a3 5b ff ff       	call   f0100d0e <cprintf>
f010b16b:	83 c4 10             	add    $0x10,%esp
		return 0;
f010b16e:	b8 00 00 00 00       	mov    $0x0,%eax
f010b173:	eb 11                	jmp    f010b186 <get_user_program_info_by_env+0x7e>
	}

	return &userPrograms[i];
f010b175:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010b178:	89 d0                	mov    %edx,%eax
f010b17a:	01 c0                	add    %eax,%eax
f010b17c:	01 d0                	add    %edx,%eax
f010b17e:	c1 e0 02             	shl    $0x2,%eax
f010b181:	05 00 29 19 f0       	add    $0xf0192900,%eax
}
f010b186:	c9                   	leave  
f010b187:	c3                   	ret    

f010b188 <trapname>:
extern  void (*ALL_FAULTS47)();



static const char *trapname(int trapno)
{
f010b188:	55                   	push   %ebp
f010b189:	89 e5                	mov    %esp,%ebp
			"Alignment Check",
			"Machine-Check",
			"SIMD Floating-Point Exception"
	};

	if (trapno < sizeof(excnames)/sizeof(excnames[0]))
f010b18b:	8b 45 08             	mov    0x8(%ebp),%eax
f010b18e:	83 f8 13             	cmp    $0x13,%eax
f010b191:	77 0c                	ja     f010b19f <trapname+0x17>
		return excnames[trapno];
f010b193:	8b 45 08             	mov    0x8(%ebp),%eax
f010b196:	8b 04 85 80 78 13 f0 	mov    -0xfec8780(,%eax,4),%eax
f010b19d:	eb 12                	jmp    f010b1b1 <trapname+0x29>
	if (trapno == T_SYSCALL)
f010b19f:	83 7d 08 30          	cmpl   $0x30,0x8(%ebp)
f010b1a3:	75 07                	jne    f010b1ac <trapname+0x24>
		return "System call";
f010b1a5:	b8 60 74 13 f0       	mov    $0xf0137460,%eax
f010b1aa:	eb 05                	jmp    f010b1b1 <trapname+0x29>
	return "(unknown trap)";
f010b1ac:	b8 6c 74 13 f0       	mov    $0xf013746c,%eax
}
f010b1b1:	5d                   	pop    %ebp
f010b1b2:	c3                   	ret    

f010b1b3 <idt_init>:


void
idt_init(void)
{
f010b1b3:	55                   	push   %ebp
f010b1b4:	89 e5                	mov    %esp,%ebp
f010b1b6:	83 ec 10             	sub    $0x10,%esp
	extern struct Segdesc gdt[];

	// LAB 3: Your code here.
	//initialize idt
	SETGATE(idt[T_PGFLT], 0, GD_KT , &PAGE_FAULT, 0) ;
f010b1b9:	b8 48 c8 10 f0       	mov    $0xf010c848,%eax
f010b1be:	66 a3 50 1d 78 f0    	mov    %ax,0xf0781d50
f010b1c4:	66 c7 05 52 1d 78 f0 	movw   $0x8,0xf0781d52
f010b1cb:	08 00 
f010b1cd:	a0 54 1d 78 f0       	mov    0xf0781d54,%al
f010b1d2:	83 e0 e0             	and    $0xffffffe0,%eax
f010b1d5:	a2 54 1d 78 f0       	mov    %al,0xf0781d54
f010b1da:	a0 54 1d 78 f0       	mov    0xf0781d54,%al
f010b1df:	83 e0 1f             	and    $0x1f,%eax
f010b1e2:	a2 54 1d 78 f0       	mov    %al,0xf0781d54
f010b1e7:	a0 55 1d 78 f0       	mov    0xf0781d55,%al
f010b1ec:	83 e0 f0             	and    $0xfffffff0,%eax
f010b1ef:	83 c8 0e             	or     $0xe,%eax
f010b1f2:	a2 55 1d 78 f0       	mov    %al,0xf0781d55
f010b1f7:	a0 55 1d 78 f0       	mov    0xf0781d55,%al
f010b1fc:	83 e0 ef             	and    $0xffffffef,%eax
f010b1ff:	a2 55 1d 78 f0       	mov    %al,0xf0781d55
f010b204:	a0 55 1d 78 f0       	mov    0xf0781d55,%al
f010b209:	83 e0 9f             	and    $0xffffff9f,%eax
f010b20c:	a2 55 1d 78 f0       	mov    %al,0xf0781d55
f010b211:	a0 55 1d 78 f0       	mov    0xf0781d55,%al
f010b216:	83 c8 80             	or     $0xffffff80,%eax
f010b219:	a2 55 1d 78 f0       	mov    %al,0xf0781d55
f010b21e:	b8 48 c8 10 f0       	mov    $0xf010c848,%eax
f010b223:	c1 e8 10             	shr    $0x10,%eax
f010b226:	66 a3 56 1d 78 f0    	mov    %ax,0xf0781d56
	SETGATE(idt[T_SYSCALL], 0, GD_KT , &SYSCALL_HANDLER, 3) ;
f010b22c:	b8 50 c8 10 f0       	mov    $0xf010c850,%eax
f010b231:	66 a3 60 1e 78 f0    	mov    %ax,0xf0781e60
f010b237:	66 c7 05 62 1e 78 f0 	movw   $0x8,0xf0781e62
f010b23e:	08 00 
f010b240:	a0 64 1e 78 f0       	mov    0xf0781e64,%al
f010b245:	83 e0 e0             	and    $0xffffffe0,%eax
f010b248:	a2 64 1e 78 f0       	mov    %al,0xf0781e64
f010b24d:	a0 64 1e 78 f0       	mov    0xf0781e64,%al
f010b252:	83 e0 1f             	and    $0x1f,%eax
f010b255:	a2 64 1e 78 f0       	mov    %al,0xf0781e64
f010b25a:	a0 65 1e 78 f0       	mov    0xf0781e65,%al
f010b25f:	83 e0 f0             	and    $0xfffffff0,%eax
f010b262:	83 c8 0e             	or     $0xe,%eax
f010b265:	a2 65 1e 78 f0       	mov    %al,0xf0781e65
f010b26a:	a0 65 1e 78 f0       	mov    0xf0781e65,%al
f010b26f:	83 e0 ef             	and    $0xffffffef,%eax
f010b272:	a2 65 1e 78 f0       	mov    %al,0xf0781e65
f010b277:	a0 65 1e 78 f0       	mov    0xf0781e65,%al
f010b27c:	83 c8 60             	or     $0x60,%eax
f010b27f:	a2 65 1e 78 f0       	mov    %al,0xf0781e65
f010b284:	a0 65 1e 78 f0       	mov    0xf0781e65,%al
f010b289:	83 c8 80             	or     $0xffffff80,%eax
f010b28c:	a2 65 1e 78 f0       	mov    %al,0xf0781e65
f010b291:	b8 50 c8 10 f0       	mov    $0xf010c850,%eax
f010b296:	c1 e8 10             	shr    $0x10,%eax
f010b299:	66 a3 66 1e 78 f0    	mov    %ax,0xf0781e66
	SETGATE(idt[T_DBLFLT], 0, GD_KT , &DBL_FAULT, 0) ;
f010b29f:	b8 5a c8 10 f0       	mov    $0xf010c85a,%eax
f010b2a4:	66 a3 20 1d 78 f0    	mov    %ax,0xf0781d20
f010b2aa:	66 c7 05 22 1d 78 f0 	movw   $0x8,0xf0781d22
f010b2b1:	08 00 
f010b2b3:	a0 24 1d 78 f0       	mov    0xf0781d24,%al
f010b2b8:	83 e0 e0             	and    $0xffffffe0,%eax
f010b2bb:	a2 24 1d 78 f0       	mov    %al,0xf0781d24
f010b2c0:	a0 24 1d 78 f0       	mov    0xf0781d24,%al
f010b2c5:	83 e0 1f             	and    $0x1f,%eax
f010b2c8:	a2 24 1d 78 f0       	mov    %al,0xf0781d24
f010b2cd:	a0 25 1d 78 f0       	mov    0xf0781d25,%al
f010b2d2:	83 e0 f0             	and    $0xfffffff0,%eax
f010b2d5:	83 c8 0e             	or     $0xe,%eax
f010b2d8:	a2 25 1d 78 f0       	mov    %al,0xf0781d25
f010b2dd:	a0 25 1d 78 f0       	mov    0xf0781d25,%al
f010b2e2:	83 e0 ef             	and    $0xffffffef,%eax
f010b2e5:	a2 25 1d 78 f0       	mov    %al,0xf0781d25
f010b2ea:	a0 25 1d 78 f0       	mov    0xf0781d25,%al
f010b2ef:	83 e0 9f             	and    $0xffffff9f,%eax
f010b2f2:	a2 25 1d 78 f0       	mov    %al,0xf0781d25
f010b2f7:	a0 25 1d 78 f0       	mov    0xf0781d25,%al
f010b2fc:	83 c8 80             	or     $0xffffff80,%eax
f010b2ff:	a2 25 1d 78 f0       	mov    %al,0xf0781d25
f010b304:	b8 5a c8 10 f0       	mov    $0xf010c85a,%eax
f010b309:	c1 e8 10             	shr    $0x10,%eax
f010b30c:	66 a3 26 1d 78 f0    	mov    %ax,0xf0781d26


	SETGATE(idt[T_DIVIDE   ], 0, GD_KT , &ALL_FAULTS0, 3) ;
f010b312:	b8 62 c8 10 f0       	mov    $0xf010c862,%eax
f010b317:	66 a3 e0 1c 78 f0    	mov    %ax,0xf0781ce0
f010b31d:	66 c7 05 e2 1c 78 f0 	movw   $0x8,0xf0781ce2
f010b324:	08 00 
f010b326:	a0 e4 1c 78 f0       	mov    0xf0781ce4,%al
f010b32b:	83 e0 e0             	and    $0xffffffe0,%eax
f010b32e:	a2 e4 1c 78 f0       	mov    %al,0xf0781ce4
f010b333:	a0 e4 1c 78 f0       	mov    0xf0781ce4,%al
f010b338:	83 e0 1f             	and    $0x1f,%eax
f010b33b:	a2 e4 1c 78 f0       	mov    %al,0xf0781ce4
f010b340:	a0 e5 1c 78 f0       	mov    0xf0781ce5,%al
f010b345:	83 e0 f0             	and    $0xfffffff0,%eax
f010b348:	83 c8 0e             	or     $0xe,%eax
f010b34b:	a2 e5 1c 78 f0       	mov    %al,0xf0781ce5
f010b350:	a0 e5 1c 78 f0       	mov    0xf0781ce5,%al
f010b355:	83 e0 ef             	and    $0xffffffef,%eax
f010b358:	a2 e5 1c 78 f0       	mov    %al,0xf0781ce5
f010b35d:	a0 e5 1c 78 f0       	mov    0xf0781ce5,%al
f010b362:	83 c8 60             	or     $0x60,%eax
f010b365:	a2 e5 1c 78 f0       	mov    %al,0xf0781ce5
f010b36a:	a0 e5 1c 78 f0       	mov    0xf0781ce5,%al
f010b36f:	83 c8 80             	or     $0xffffff80,%eax
f010b372:	a2 e5 1c 78 f0       	mov    %al,0xf0781ce5
f010b377:	b8 62 c8 10 f0       	mov    $0xf010c862,%eax
f010b37c:	c1 e8 10             	shr    $0x10,%eax
f010b37f:	66 a3 e6 1c 78 f0    	mov    %ax,0xf0781ce6
	SETGATE(idt[T_DEBUG    ], 1, GD_KT , &ALL_FAULTS1, 3) ;
f010b385:	b8 6c c8 10 f0       	mov    $0xf010c86c,%eax
f010b38a:	66 a3 e8 1c 78 f0    	mov    %ax,0xf0781ce8
f010b390:	66 c7 05 ea 1c 78 f0 	movw   $0x8,0xf0781cea
f010b397:	08 00 
f010b399:	a0 ec 1c 78 f0       	mov    0xf0781cec,%al
f010b39e:	83 e0 e0             	and    $0xffffffe0,%eax
f010b3a1:	a2 ec 1c 78 f0       	mov    %al,0xf0781cec
f010b3a6:	a0 ec 1c 78 f0       	mov    0xf0781cec,%al
f010b3ab:	83 e0 1f             	and    $0x1f,%eax
f010b3ae:	a2 ec 1c 78 f0       	mov    %al,0xf0781cec
f010b3b3:	a0 ed 1c 78 f0       	mov    0xf0781ced,%al
f010b3b8:	83 c8 0f             	or     $0xf,%eax
f010b3bb:	a2 ed 1c 78 f0       	mov    %al,0xf0781ced
f010b3c0:	a0 ed 1c 78 f0       	mov    0xf0781ced,%al
f010b3c5:	83 e0 ef             	and    $0xffffffef,%eax
f010b3c8:	a2 ed 1c 78 f0       	mov    %al,0xf0781ced
f010b3cd:	a0 ed 1c 78 f0       	mov    0xf0781ced,%al
f010b3d2:	83 c8 60             	or     $0x60,%eax
f010b3d5:	a2 ed 1c 78 f0       	mov    %al,0xf0781ced
f010b3da:	a0 ed 1c 78 f0       	mov    0xf0781ced,%al
f010b3df:	83 c8 80             	or     $0xffffff80,%eax
f010b3e2:	a2 ed 1c 78 f0       	mov    %al,0xf0781ced
f010b3e7:	b8 6c c8 10 f0       	mov    $0xf010c86c,%eax
f010b3ec:	c1 e8 10             	shr    $0x10,%eax
f010b3ef:	66 a3 ee 1c 78 f0    	mov    %ax,0xf0781cee
	SETGATE(idt[T_NMI      ], 0, GD_KT , &ALL_FAULTS2, 3) ;
f010b3f5:	b8 76 c8 10 f0       	mov    $0xf010c876,%eax
f010b3fa:	66 a3 f0 1c 78 f0    	mov    %ax,0xf0781cf0
f010b400:	66 c7 05 f2 1c 78 f0 	movw   $0x8,0xf0781cf2
f010b407:	08 00 
f010b409:	a0 f4 1c 78 f0       	mov    0xf0781cf4,%al
f010b40e:	83 e0 e0             	and    $0xffffffe0,%eax
f010b411:	a2 f4 1c 78 f0       	mov    %al,0xf0781cf4
f010b416:	a0 f4 1c 78 f0       	mov    0xf0781cf4,%al
f010b41b:	83 e0 1f             	and    $0x1f,%eax
f010b41e:	a2 f4 1c 78 f0       	mov    %al,0xf0781cf4
f010b423:	a0 f5 1c 78 f0       	mov    0xf0781cf5,%al
f010b428:	83 e0 f0             	and    $0xfffffff0,%eax
f010b42b:	83 c8 0e             	or     $0xe,%eax
f010b42e:	a2 f5 1c 78 f0       	mov    %al,0xf0781cf5
f010b433:	a0 f5 1c 78 f0       	mov    0xf0781cf5,%al
f010b438:	83 e0 ef             	and    $0xffffffef,%eax
f010b43b:	a2 f5 1c 78 f0       	mov    %al,0xf0781cf5
f010b440:	a0 f5 1c 78 f0       	mov    0xf0781cf5,%al
f010b445:	83 c8 60             	or     $0x60,%eax
f010b448:	a2 f5 1c 78 f0       	mov    %al,0xf0781cf5
f010b44d:	a0 f5 1c 78 f0       	mov    0xf0781cf5,%al
f010b452:	83 c8 80             	or     $0xffffff80,%eax
f010b455:	a2 f5 1c 78 f0       	mov    %al,0xf0781cf5
f010b45a:	b8 76 c8 10 f0       	mov    $0xf010c876,%eax
f010b45f:	c1 e8 10             	shr    $0x10,%eax
f010b462:	66 a3 f6 1c 78 f0    	mov    %ax,0xf0781cf6
	SETGATE(idt[T_BRKPT    ], 1, GD_KT , &ALL_FAULTS3, 3) ;
f010b468:	b8 80 c8 10 f0       	mov    $0xf010c880,%eax
f010b46d:	66 a3 f8 1c 78 f0    	mov    %ax,0xf0781cf8
f010b473:	66 c7 05 fa 1c 78 f0 	movw   $0x8,0xf0781cfa
f010b47a:	08 00 
f010b47c:	a0 fc 1c 78 f0       	mov    0xf0781cfc,%al
f010b481:	83 e0 e0             	and    $0xffffffe0,%eax
f010b484:	a2 fc 1c 78 f0       	mov    %al,0xf0781cfc
f010b489:	a0 fc 1c 78 f0       	mov    0xf0781cfc,%al
f010b48e:	83 e0 1f             	and    $0x1f,%eax
f010b491:	a2 fc 1c 78 f0       	mov    %al,0xf0781cfc
f010b496:	a0 fd 1c 78 f0       	mov    0xf0781cfd,%al
f010b49b:	83 c8 0f             	or     $0xf,%eax
f010b49e:	a2 fd 1c 78 f0       	mov    %al,0xf0781cfd
f010b4a3:	a0 fd 1c 78 f0       	mov    0xf0781cfd,%al
f010b4a8:	83 e0 ef             	and    $0xffffffef,%eax
f010b4ab:	a2 fd 1c 78 f0       	mov    %al,0xf0781cfd
f010b4b0:	a0 fd 1c 78 f0       	mov    0xf0781cfd,%al
f010b4b5:	83 c8 60             	or     $0x60,%eax
f010b4b8:	a2 fd 1c 78 f0       	mov    %al,0xf0781cfd
f010b4bd:	a0 fd 1c 78 f0       	mov    0xf0781cfd,%al
f010b4c2:	83 c8 80             	or     $0xffffff80,%eax
f010b4c5:	a2 fd 1c 78 f0       	mov    %al,0xf0781cfd
f010b4ca:	b8 80 c8 10 f0       	mov    $0xf010c880,%eax
f010b4cf:	c1 e8 10             	shr    $0x10,%eax
f010b4d2:	66 a3 fe 1c 78 f0    	mov    %ax,0xf0781cfe
	SETGATE(idt[T_OFLOW    ], 1, GD_KT , &ALL_FAULTS4, 3) ;
f010b4d8:	b8 8a c8 10 f0       	mov    $0xf010c88a,%eax
f010b4dd:	66 a3 00 1d 78 f0    	mov    %ax,0xf0781d00
f010b4e3:	66 c7 05 02 1d 78 f0 	movw   $0x8,0xf0781d02
f010b4ea:	08 00 
f010b4ec:	a0 04 1d 78 f0       	mov    0xf0781d04,%al
f010b4f1:	83 e0 e0             	and    $0xffffffe0,%eax
f010b4f4:	a2 04 1d 78 f0       	mov    %al,0xf0781d04
f010b4f9:	a0 04 1d 78 f0       	mov    0xf0781d04,%al
f010b4fe:	83 e0 1f             	and    $0x1f,%eax
f010b501:	a2 04 1d 78 f0       	mov    %al,0xf0781d04
f010b506:	a0 05 1d 78 f0       	mov    0xf0781d05,%al
f010b50b:	83 c8 0f             	or     $0xf,%eax
f010b50e:	a2 05 1d 78 f0       	mov    %al,0xf0781d05
f010b513:	a0 05 1d 78 f0       	mov    0xf0781d05,%al
f010b518:	83 e0 ef             	and    $0xffffffef,%eax
f010b51b:	a2 05 1d 78 f0       	mov    %al,0xf0781d05
f010b520:	a0 05 1d 78 f0       	mov    0xf0781d05,%al
f010b525:	83 c8 60             	or     $0x60,%eax
f010b528:	a2 05 1d 78 f0       	mov    %al,0xf0781d05
f010b52d:	a0 05 1d 78 f0       	mov    0xf0781d05,%al
f010b532:	83 c8 80             	or     $0xffffff80,%eax
f010b535:	a2 05 1d 78 f0       	mov    %al,0xf0781d05
f010b53a:	b8 8a c8 10 f0       	mov    $0xf010c88a,%eax
f010b53f:	c1 e8 10             	shr    $0x10,%eax
f010b542:	66 a3 06 1d 78 f0    	mov    %ax,0xf0781d06
	SETGATE(idt[T_BOUND    ], 0, GD_KT , &ALL_FAULTS5, 3) ;
f010b548:	b8 94 c8 10 f0       	mov    $0xf010c894,%eax
f010b54d:	66 a3 08 1d 78 f0    	mov    %ax,0xf0781d08
f010b553:	66 c7 05 0a 1d 78 f0 	movw   $0x8,0xf0781d0a
f010b55a:	08 00 
f010b55c:	a0 0c 1d 78 f0       	mov    0xf0781d0c,%al
f010b561:	83 e0 e0             	and    $0xffffffe0,%eax
f010b564:	a2 0c 1d 78 f0       	mov    %al,0xf0781d0c
f010b569:	a0 0c 1d 78 f0       	mov    0xf0781d0c,%al
f010b56e:	83 e0 1f             	and    $0x1f,%eax
f010b571:	a2 0c 1d 78 f0       	mov    %al,0xf0781d0c
f010b576:	a0 0d 1d 78 f0       	mov    0xf0781d0d,%al
f010b57b:	83 e0 f0             	and    $0xfffffff0,%eax
f010b57e:	83 c8 0e             	or     $0xe,%eax
f010b581:	a2 0d 1d 78 f0       	mov    %al,0xf0781d0d
f010b586:	a0 0d 1d 78 f0       	mov    0xf0781d0d,%al
f010b58b:	83 e0 ef             	and    $0xffffffef,%eax
f010b58e:	a2 0d 1d 78 f0       	mov    %al,0xf0781d0d
f010b593:	a0 0d 1d 78 f0       	mov    0xf0781d0d,%al
f010b598:	83 c8 60             	or     $0x60,%eax
f010b59b:	a2 0d 1d 78 f0       	mov    %al,0xf0781d0d
f010b5a0:	a0 0d 1d 78 f0       	mov    0xf0781d0d,%al
f010b5a5:	83 c8 80             	or     $0xffffff80,%eax
f010b5a8:	a2 0d 1d 78 f0       	mov    %al,0xf0781d0d
f010b5ad:	b8 94 c8 10 f0       	mov    $0xf010c894,%eax
f010b5b2:	c1 e8 10             	shr    $0x10,%eax
f010b5b5:	66 a3 0e 1d 78 f0    	mov    %ax,0xf0781d0e
	SETGATE(idt[T_ILLOP    ], 0, GD_KT , &ALL_FAULTS6, 3) ;
f010b5bb:	b8 9e c8 10 f0       	mov    $0xf010c89e,%eax
f010b5c0:	66 a3 10 1d 78 f0    	mov    %ax,0xf0781d10
f010b5c6:	66 c7 05 12 1d 78 f0 	movw   $0x8,0xf0781d12
f010b5cd:	08 00 
f010b5cf:	a0 14 1d 78 f0       	mov    0xf0781d14,%al
f010b5d4:	83 e0 e0             	and    $0xffffffe0,%eax
f010b5d7:	a2 14 1d 78 f0       	mov    %al,0xf0781d14
f010b5dc:	a0 14 1d 78 f0       	mov    0xf0781d14,%al
f010b5e1:	83 e0 1f             	and    $0x1f,%eax
f010b5e4:	a2 14 1d 78 f0       	mov    %al,0xf0781d14
f010b5e9:	a0 15 1d 78 f0       	mov    0xf0781d15,%al
f010b5ee:	83 e0 f0             	and    $0xfffffff0,%eax
f010b5f1:	83 c8 0e             	or     $0xe,%eax
f010b5f4:	a2 15 1d 78 f0       	mov    %al,0xf0781d15
f010b5f9:	a0 15 1d 78 f0       	mov    0xf0781d15,%al
f010b5fe:	83 e0 ef             	and    $0xffffffef,%eax
f010b601:	a2 15 1d 78 f0       	mov    %al,0xf0781d15
f010b606:	a0 15 1d 78 f0       	mov    0xf0781d15,%al
f010b60b:	83 c8 60             	or     $0x60,%eax
f010b60e:	a2 15 1d 78 f0       	mov    %al,0xf0781d15
f010b613:	a0 15 1d 78 f0       	mov    0xf0781d15,%al
f010b618:	83 c8 80             	or     $0xffffff80,%eax
f010b61b:	a2 15 1d 78 f0       	mov    %al,0xf0781d15
f010b620:	b8 9e c8 10 f0       	mov    $0xf010c89e,%eax
f010b625:	c1 e8 10             	shr    $0x10,%eax
f010b628:	66 a3 16 1d 78 f0    	mov    %ax,0xf0781d16
	SETGATE(idt[T_DEVICE   ], 0, GD_KT , &ALL_FAULTS7, 3) ;
f010b62e:	b8 a8 c8 10 f0       	mov    $0xf010c8a8,%eax
f010b633:	66 a3 18 1d 78 f0    	mov    %ax,0xf0781d18
f010b639:	66 c7 05 1a 1d 78 f0 	movw   $0x8,0xf0781d1a
f010b640:	08 00 
f010b642:	a0 1c 1d 78 f0       	mov    0xf0781d1c,%al
f010b647:	83 e0 e0             	and    $0xffffffe0,%eax
f010b64a:	a2 1c 1d 78 f0       	mov    %al,0xf0781d1c
f010b64f:	a0 1c 1d 78 f0       	mov    0xf0781d1c,%al
f010b654:	83 e0 1f             	and    $0x1f,%eax
f010b657:	a2 1c 1d 78 f0       	mov    %al,0xf0781d1c
f010b65c:	a0 1d 1d 78 f0       	mov    0xf0781d1d,%al
f010b661:	83 e0 f0             	and    $0xfffffff0,%eax
f010b664:	83 c8 0e             	or     $0xe,%eax
f010b667:	a2 1d 1d 78 f0       	mov    %al,0xf0781d1d
f010b66c:	a0 1d 1d 78 f0       	mov    0xf0781d1d,%al
f010b671:	83 e0 ef             	and    $0xffffffef,%eax
f010b674:	a2 1d 1d 78 f0       	mov    %al,0xf0781d1d
f010b679:	a0 1d 1d 78 f0       	mov    0xf0781d1d,%al
f010b67e:	83 c8 60             	or     $0x60,%eax
f010b681:	a2 1d 1d 78 f0       	mov    %al,0xf0781d1d
f010b686:	a0 1d 1d 78 f0       	mov    0xf0781d1d,%al
f010b68b:	83 c8 80             	or     $0xffffff80,%eax
f010b68e:	a2 1d 1d 78 f0       	mov    %al,0xf0781d1d
f010b693:	b8 a8 c8 10 f0       	mov    $0xf010c8a8,%eax
f010b698:	c1 e8 10             	shr    $0x10,%eax
f010b69b:	66 a3 1e 1d 78 f0    	mov    %ax,0xf0781d1e
	//SETGATE(idt[T_DBLFLT   ], 0, GD_KT , &ALL_FAULTS, 3) ;
	//SETGATE(idt[], 0, GD_KT , &ALL_FAULTS, 3) ;
	SETGATE(idt[T_TSS      ], 0, GD_KT , &ALL_FAULTS10, 3) ;
f010b6a1:	b8 b2 c8 10 f0       	mov    $0xf010c8b2,%eax
f010b6a6:	66 a3 30 1d 78 f0    	mov    %ax,0xf0781d30
f010b6ac:	66 c7 05 32 1d 78 f0 	movw   $0x8,0xf0781d32
f010b6b3:	08 00 
f010b6b5:	a0 34 1d 78 f0       	mov    0xf0781d34,%al
f010b6ba:	83 e0 e0             	and    $0xffffffe0,%eax
f010b6bd:	a2 34 1d 78 f0       	mov    %al,0xf0781d34
f010b6c2:	a0 34 1d 78 f0       	mov    0xf0781d34,%al
f010b6c7:	83 e0 1f             	and    $0x1f,%eax
f010b6ca:	a2 34 1d 78 f0       	mov    %al,0xf0781d34
f010b6cf:	a0 35 1d 78 f0       	mov    0xf0781d35,%al
f010b6d4:	83 e0 f0             	and    $0xfffffff0,%eax
f010b6d7:	83 c8 0e             	or     $0xe,%eax
f010b6da:	a2 35 1d 78 f0       	mov    %al,0xf0781d35
f010b6df:	a0 35 1d 78 f0       	mov    0xf0781d35,%al
f010b6e4:	83 e0 ef             	and    $0xffffffef,%eax
f010b6e7:	a2 35 1d 78 f0       	mov    %al,0xf0781d35
f010b6ec:	a0 35 1d 78 f0       	mov    0xf0781d35,%al
f010b6f1:	83 c8 60             	or     $0x60,%eax
f010b6f4:	a2 35 1d 78 f0       	mov    %al,0xf0781d35
f010b6f9:	a0 35 1d 78 f0       	mov    0xf0781d35,%al
f010b6fe:	83 c8 80             	or     $0xffffff80,%eax
f010b701:	a2 35 1d 78 f0       	mov    %al,0xf0781d35
f010b706:	b8 b2 c8 10 f0       	mov    $0xf010c8b2,%eax
f010b70b:	c1 e8 10             	shr    $0x10,%eax
f010b70e:	66 a3 36 1d 78 f0    	mov    %ax,0xf0781d36
	SETGATE(idt[T_SEGNP    ], 0, GD_KT , &ALL_FAULTS11, 3) ;
f010b714:	b8 ba c8 10 f0       	mov    $0xf010c8ba,%eax
f010b719:	66 a3 38 1d 78 f0    	mov    %ax,0xf0781d38
f010b71f:	66 c7 05 3a 1d 78 f0 	movw   $0x8,0xf0781d3a
f010b726:	08 00 
f010b728:	a0 3c 1d 78 f0       	mov    0xf0781d3c,%al
f010b72d:	83 e0 e0             	and    $0xffffffe0,%eax
f010b730:	a2 3c 1d 78 f0       	mov    %al,0xf0781d3c
f010b735:	a0 3c 1d 78 f0       	mov    0xf0781d3c,%al
f010b73a:	83 e0 1f             	and    $0x1f,%eax
f010b73d:	a2 3c 1d 78 f0       	mov    %al,0xf0781d3c
f010b742:	a0 3d 1d 78 f0       	mov    0xf0781d3d,%al
f010b747:	83 e0 f0             	and    $0xfffffff0,%eax
f010b74a:	83 c8 0e             	or     $0xe,%eax
f010b74d:	a2 3d 1d 78 f0       	mov    %al,0xf0781d3d
f010b752:	a0 3d 1d 78 f0       	mov    0xf0781d3d,%al
f010b757:	83 e0 ef             	and    $0xffffffef,%eax
f010b75a:	a2 3d 1d 78 f0       	mov    %al,0xf0781d3d
f010b75f:	a0 3d 1d 78 f0       	mov    0xf0781d3d,%al
f010b764:	83 c8 60             	or     $0x60,%eax
f010b767:	a2 3d 1d 78 f0       	mov    %al,0xf0781d3d
f010b76c:	a0 3d 1d 78 f0       	mov    0xf0781d3d,%al
f010b771:	83 c8 80             	or     $0xffffff80,%eax
f010b774:	a2 3d 1d 78 f0       	mov    %al,0xf0781d3d
f010b779:	b8 ba c8 10 f0       	mov    $0xf010c8ba,%eax
f010b77e:	c1 e8 10             	shr    $0x10,%eax
f010b781:	66 a3 3e 1d 78 f0    	mov    %ax,0xf0781d3e
	SETGATE(idt[T_STACK    ], 0, GD_KT , &ALL_FAULTS12, 3) ;
f010b787:	b8 be c8 10 f0       	mov    $0xf010c8be,%eax
f010b78c:	66 a3 40 1d 78 f0    	mov    %ax,0xf0781d40
f010b792:	66 c7 05 42 1d 78 f0 	movw   $0x8,0xf0781d42
f010b799:	08 00 
f010b79b:	a0 44 1d 78 f0       	mov    0xf0781d44,%al
f010b7a0:	83 e0 e0             	and    $0xffffffe0,%eax
f010b7a3:	a2 44 1d 78 f0       	mov    %al,0xf0781d44
f010b7a8:	a0 44 1d 78 f0       	mov    0xf0781d44,%al
f010b7ad:	83 e0 1f             	and    $0x1f,%eax
f010b7b0:	a2 44 1d 78 f0       	mov    %al,0xf0781d44
f010b7b5:	a0 45 1d 78 f0       	mov    0xf0781d45,%al
f010b7ba:	83 e0 f0             	and    $0xfffffff0,%eax
f010b7bd:	83 c8 0e             	or     $0xe,%eax
f010b7c0:	a2 45 1d 78 f0       	mov    %al,0xf0781d45
f010b7c5:	a0 45 1d 78 f0       	mov    0xf0781d45,%al
f010b7ca:	83 e0 ef             	and    $0xffffffef,%eax
f010b7cd:	a2 45 1d 78 f0       	mov    %al,0xf0781d45
f010b7d2:	a0 45 1d 78 f0       	mov    0xf0781d45,%al
f010b7d7:	83 c8 60             	or     $0x60,%eax
f010b7da:	a2 45 1d 78 f0       	mov    %al,0xf0781d45
f010b7df:	a0 45 1d 78 f0       	mov    0xf0781d45,%al
f010b7e4:	83 c8 80             	or     $0xffffff80,%eax
f010b7e7:	a2 45 1d 78 f0       	mov    %al,0xf0781d45
f010b7ec:	b8 be c8 10 f0       	mov    $0xf010c8be,%eax
f010b7f1:	c1 e8 10             	shr    $0x10,%eax
f010b7f4:	66 a3 46 1d 78 f0    	mov    %ax,0xf0781d46
	SETGATE(idt[T_GPFLT    ], 0, GD_KT , &ALL_FAULTS13, 3) ;
f010b7fa:	b8 c2 c8 10 f0       	mov    $0xf010c8c2,%eax
f010b7ff:	66 a3 48 1d 78 f0    	mov    %ax,0xf0781d48
f010b805:	66 c7 05 4a 1d 78 f0 	movw   $0x8,0xf0781d4a
f010b80c:	08 00 
f010b80e:	a0 4c 1d 78 f0       	mov    0xf0781d4c,%al
f010b813:	83 e0 e0             	and    $0xffffffe0,%eax
f010b816:	a2 4c 1d 78 f0       	mov    %al,0xf0781d4c
f010b81b:	a0 4c 1d 78 f0       	mov    0xf0781d4c,%al
f010b820:	83 e0 1f             	and    $0x1f,%eax
f010b823:	a2 4c 1d 78 f0       	mov    %al,0xf0781d4c
f010b828:	a0 4d 1d 78 f0       	mov    0xf0781d4d,%al
f010b82d:	83 e0 f0             	and    $0xfffffff0,%eax
f010b830:	83 c8 0e             	or     $0xe,%eax
f010b833:	a2 4d 1d 78 f0       	mov    %al,0xf0781d4d
f010b838:	a0 4d 1d 78 f0       	mov    0xf0781d4d,%al
f010b83d:	83 e0 ef             	and    $0xffffffef,%eax
f010b840:	a2 4d 1d 78 f0       	mov    %al,0xf0781d4d
f010b845:	a0 4d 1d 78 f0       	mov    0xf0781d4d,%al
f010b84a:	83 c8 60             	or     $0x60,%eax
f010b84d:	a2 4d 1d 78 f0       	mov    %al,0xf0781d4d
f010b852:	a0 4d 1d 78 f0       	mov    0xf0781d4d,%al
f010b857:	83 c8 80             	or     $0xffffff80,%eax
f010b85a:	a2 4d 1d 78 f0       	mov    %al,0xf0781d4d
f010b85f:	b8 c2 c8 10 f0       	mov    $0xf010c8c2,%eax
f010b864:	c1 e8 10             	shr    $0x10,%eax
f010b867:	66 a3 4e 1d 78 f0    	mov    %ax,0xf0781d4e
	//SETGATE(idt[T_PGFLT    ], 0, GD_KT , &ALL_FAULTS, 3) ;
	//SETGATE(idt[ne T_RES   ], 0, GD_KT , &ALL_FAULTS, 3) ;
	SETGATE(idt[T_FPERR    ], 0, GD_KT , &ALL_FAULTS16, 3) ;
f010b86d:	b8 c6 c8 10 f0       	mov    $0xf010c8c6,%eax
f010b872:	66 a3 60 1d 78 f0    	mov    %ax,0xf0781d60
f010b878:	66 c7 05 62 1d 78 f0 	movw   $0x8,0xf0781d62
f010b87f:	08 00 
f010b881:	a0 64 1d 78 f0       	mov    0xf0781d64,%al
f010b886:	83 e0 e0             	and    $0xffffffe0,%eax
f010b889:	a2 64 1d 78 f0       	mov    %al,0xf0781d64
f010b88e:	a0 64 1d 78 f0       	mov    0xf0781d64,%al
f010b893:	83 e0 1f             	and    $0x1f,%eax
f010b896:	a2 64 1d 78 f0       	mov    %al,0xf0781d64
f010b89b:	a0 65 1d 78 f0       	mov    0xf0781d65,%al
f010b8a0:	83 e0 f0             	and    $0xfffffff0,%eax
f010b8a3:	83 c8 0e             	or     $0xe,%eax
f010b8a6:	a2 65 1d 78 f0       	mov    %al,0xf0781d65
f010b8ab:	a0 65 1d 78 f0       	mov    0xf0781d65,%al
f010b8b0:	83 e0 ef             	and    $0xffffffef,%eax
f010b8b3:	a2 65 1d 78 f0       	mov    %al,0xf0781d65
f010b8b8:	a0 65 1d 78 f0       	mov    0xf0781d65,%al
f010b8bd:	83 c8 60             	or     $0x60,%eax
f010b8c0:	a2 65 1d 78 f0       	mov    %al,0xf0781d65
f010b8c5:	a0 65 1d 78 f0       	mov    0xf0781d65,%al
f010b8ca:	83 c8 80             	or     $0xffffff80,%eax
f010b8cd:	a2 65 1d 78 f0       	mov    %al,0xf0781d65
f010b8d2:	b8 c6 c8 10 f0       	mov    $0xf010c8c6,%eax
f010b8d7:	c1 e8 10             	shr    $0x10,%eax
f010b8da:	66 a3 66 1d 78 f0    	mov    %ax,0xf0781d66
	SETGATE(idt[T_ALIGN    ], 0, GD_KT , &ALL_FAULTS17, 3) ;
f010b8e0:	b8 cc c8 10 f0       	mov    $0xf010c8cc,%eax
f010b8e5:	66 a3 68 1d 78 f0    	mov    %ax,0xf0781d68
f010b8eb:	66 c7 05 6a 1d 78 f0 	movw   $0x8,0xf0781d6a
f010b8f2:	08 00 
f010b8f4:	a0 6c 1d 78 f0       	mov    0xf0781d6c,%al
f010b8f9:	83 e0 e0             	and    $0xffffffe0,%eax
f010b8fc:	a2 6c 1d 78 f0       	mov    %al,0xf0781d6c
f010b901:	a0 6c 1d 78 f0       	mov    0xf0781d6c,%al
f010b906:	83 e0 1f             	and    $0x1f,%eax
f010b909:	a2 6c 1d 78 f0       	mov    %al,0xf0781d6c
f010b90e:	a0 6d 1d 78 f0       	mov    0xf0781d6d,%al
f010b913:	83 e0 f0             	and    $0xfffffff0,%eax
f010b916:	83 c8 0e             	or     $0xe,%eax
f010b919:	a2 6d 1d 78 f0       	mov    %al,0xf0781d6d
f010b91e:	a0 6d 1d 78 f0       	mov    0xf0781d6d,%al
f010b923:	83 e0 ef             	and    $0xffffffef,%eax
f010b926:	a2 6d 1d 78 f0       	mov    %al,0xf0781d6d
f010b92b:	a0 6d 1d 78 f0       	mov    0xf0781d6d,%al
f010b930:	83 c8 60             	or     $0x60,%eax
f010b933:	a2 6d 1d 78 f0       	mov    %al,0xf0781d6d
f010b938:	a0 6d 1d 78 f0       	mov    0xf0781d6d,%al
f010b93d:	83 c8 80             	or     $0xffffff80,%eax
f010b940:	a2 6d 1d 78 f0       	mov    %al,0xf0781d6d
f010b945:	b8 cc c8 10 f0       	mov    $0xf010c8cc,%eax
f010b94a:	c1 e8 10             	shr    $0x10,%eax
f010b94d:	66 a3 6e 1d 78 f0    	mov    %ax,0xf0781d6e
	SETGATE(idt[T_MCHK     ], 0, GD_KT , &ALL_FAULTS18, 3) ;
f010b953:	b8 d0 c8 10 f0       	mov    $0xf010c8d0,%eax
f010b958:	66 a3 70 1d 78 f0    	mov    %ax,0xf0781d70
f010b95e:	66 c7 05 72 1d 78 f0 	movw   $0x8,0xf0781d72
f010b965:	08 00 
f010b967:	a0 74 1d 78 f0       	mov    0xf0781d74,%al
f010b96c:	83 e0 e0             	and    $0xffffffe0,%eax
f010b96f:	a2 74 1d 78 f0       	mov    %al,0xf0781d74
f010b974:	a0 74 1d 78 f0       	mov    0xf0781d74,%al
f010b979:	83 e0 1f             	and    $0x1f,%eax
f010b97c:	a2 74 1d 78 f0       	mov    %al,0xf0781d74
f010b981:	a0 75 1d 78 f0       	mov    0xf0781d75,%al
f010b986:	83 e0 f0             	and    $0xfffffff0,%eax
f010b989:	83 c8 0e             	or     $0xe,%eax
f010b98c:	a2 75 1d 78 f0       	mov    %al,0xf0781d75
f010b991:	a0 75 1d 78 f0       	mov    0xf0781d75,%al
f010b996:	83 e0 ef             	and    $0xffffffef,%eax
f010b999:	a2 75 1d 78 f0       	mov    %al,0xf0781d75
f010b99e:	a0 75 1d 78 f0       	mov    0xf0781d75,%al
f010b9a3:	83 c8 60             	or     $0x60,%eax
f010b9a6:	a2 75 1d 78 f0       	mov    %al,0xf0781d75
f010b9ab:	a0 75 1d 78 f0       	mov    0xf0781d75,%al
f010b9b0:	83 c8 80             	or     $0xffffff80,%eax
f010b9b3:	a2 75 1d 78 f0       	mov    %al,0xf0781d75
f010b9b8:	b8 d0 c8 10 f0       	mov    $0xf010c8d0,%eax
f010b9bd:	c1 e8 10             	shr    $0x10,%eax
f010b9c0:	66 a3 76 1d 78 f0    	mov    %ax,0xf0781d76
	SETGATE(idt[T_SIMDERR  ], 0, GD_KT , &ALL_FAULTS19, 3) ;
f010b9c6:	b8 d6 c8 10 f0       	mov    $0xf010c8d6,%eax
f010b9cb:	66 a3 78 1d 78 f0    	mov    %ax,0xf0781d78
f010b9d1:	66 c7 05 7a 1d 78 f0 	movw   $0x8,0xf0781d7a
f010b9d8:	08 00 
f010b9da:	a0 7c 1d 78 f0       	mov    0xf0781d7c,%al
f010b9df:	83 e0 e0             	and    $0xffffffe0,%eax
f010b9e2:	a2 7c 1d 78 f0       	mov    %al,0xf0781d7c
f010b9e7:	a0 7c 1d 78 f0       	mov    0xf0781d7c,%al
f010b9ec:	83 e0 1f             	and    $0x1f,%eax
f010b9ef:	a2 7c 1d 78 f0       	mov    %al,0xf0781d7c
f010b9f4:	a0 7d 1d 78 f0       	mov    0xf0781d7d,%al
f010b9f9:	83 e0 f0             	and    $0xfffffff0,%eax
f010b9fc:	83 c8 0e             	or     $0xe,%eax
f010b9ff:	a2 7d 1d 78 f0       	mov    %al,0xf0781d7d
f010ba04:	a0 7d 1d 78 f0       	mov    0xf0781d7d,%al
f010ba09:	83 e0 ef             	and    $0xffffffef,%eax
f010ba0c:	a2 7d 1d 78 f0       	mov    %al,0xf0781d7d
f010ba11:	a0 7d 1d 78 f0       	mov    0xf0781d7d,%al
f010ba16:	83 c8 60             	or     $0x60,%eax
f010ba19:	a2 7d 1d 78 f0       	mov    %al,0xf0781d7d
f010ba1e:	a0 7d 1d 78 f0       	mov    0xf0781d7d,%al
f010ba23:	83 c8 80             	or     $0xffffff80,%eax
f010ba26:	a2 7d 1d 78 f0       	mov    %al,0xf0781d7d
f010ba2b:	b8 d6 c8 10 f0       	mov    $0xf010c8d6,%eax
f010ba30:	c1 e8 10             	shr    $0x10,%eax
f010ba33:	66 a3 7e 1d 78 f0    	mov    %ax,0xf0781d7e


	SETGATE(idt[IRQ0_Clock], 0, GD_KT , &ALL_FAULTS32, 3) ;
f010ba39:	b8 dc c8 10 f0       	mov    $0xf010c8dc,%eax
f010ba3e:	66 a3 e0 1d 78 f0    	mov    %ax,0xf0781de0
f010ba44:	66 c7 05 e2 1d 78 f0 	movw   $0x8,0xf0781de2
f010ba4b:	08 00 
f010ba4d:	a0 e4 1d 78 f0       	mov    0xf0781de4,%al
f010ba52:	83 e0 e0             	and    $0xffffffe0,%eax
f010ba55:	a2 e4 1d 78 f0       	mov    %al,0xf0781de4
f010ba5a:	a0 e4 1d 78 f0       	mov    0xf0781de4,%al
f010ba5f:	83 e0 1f             	and    $0x1f,%eax
f010ba62:	a2 e4 1d 78 f0       	mov    %al,0xf0781de4
f010ba67:	a0 e5 1d 78 f0       	mov    0xf0781de5,%al
f010ba6c:	83 e0 f0             	and    $0xfffffff0,%eax
f010ba6f:	83 c8 0e             	or     $0xe,%eax
f010ba72:	a2 e5 1d 78 f0       	mov    %al,0xf0781de5
f010ba77:	a0 e5 1d 78 f0       	mov    0xf0781de5,%al
f010ba7c:	83 e0 ef             	and    $0xffffffef,%eax
f010ba7f:	a2 e5 1d 78 f0       	mov    %al,0xf0781de5
f010ba84:	a0 e5 1d 78 f0       	mov    0xf0781de5,%al
f010ba89:	83 c8 60             	or     $0x60,%eax
f010ba8c:	a2 e5 1d 78 f0       	mov    %al,0xf0781de5
f010ba91:	a0 e5 1d 78 f0       	mov    0xf0781de5,%al
f010ba96:	83 c8 80             	or     $0xffffff80,%eax
f010ba99:	a2 e5 1d 78 f0       	mov    %al,0xf0781de5
f010ba9e:	b8 dc c8 10 f0       	mov    $0xf010c8dc,%eax
f010baa3:	c1 e8 10             	shr    $0x10,%eax
f010baa6:	66 a3 e6 1d 78 f0    	mov    %ax,0xf0781de6
	SETGATE(idt[33], 0, GD_KT , &ALL_FAULTS33, 3) ;
f010baac:	b8 e2 c8 10 f0       	mov    $0xf010c8e2,%eax
f010bab1:	66 a3 e8 1d 78 f0    	mov    %ax,0xf0781de8
f010bab7:	66 c7 05 ea 1d 78 f0 	movw   $0x8,0xf0781dea
f010babe:	08 00 
f010bac0:	a0 ec 1d 78 f0       	mov    0xf0781dec,%al
f010bac5:	83 e0 e0             	and    $0xffffffe0,%eax
f010bac8:	a2 ec 1d 78 f0       	mov    %al,0xf0781dec
f010bacd:	a0 ec 1d 78 f0       	mov    0xf0781dec,%al
f010bad2:	83 e0 1f             	and    $0x1f,%eax
f010bad5:	a2 ec 1d 78 f0       	mov    %al,0xf0781dec
f010bada:	a0 ed 1d 78 f0       	mov    0xf0781ded,%al
f010badf:	83 e0 f0             	and    $0xfffffff0,%eax
f010bae2:	83 c8 0e             	or     $0xe,%eax
f010bae5:	a2 ed 1d 78 f0       	mov    %al,0xf0781ded
f010baea:	a0 ed 1d 78 f0       	mov    0xf0781ded,%al
f010baef:	83 e0 ef             	and    $0xffffffef,%eax
f010baf2:	a2 ed 1d 78 f0       	mov    %al,0xf0781ded
f010baf7:	a0 ed 1d 78 f0       	mov    0xf0781ded,%al
f010bafc:	83 c8 60             	or     $0x60,%eax
f010baff:	a2 ed 1d 78 f0       	mov    %al,0xf0781ded
f010bb04:	a0 ed 1d 78 f0       	mov    0xf0781ded,%al
f010bb09:	83 c8 80             	or     $0xffffff80,%eax
f010bb0c:	a2 ed 1d 78 f0       	mov    %al,0xf0781ded
f010bb11:	b8 e2 c8 10 f0       	mov    $0xf010c8e2,%eax
f010bb16:	c1 e8 10             	shr    $0x10,%eax
f010bb19:	66 a3 ee 1d 78 f0    	mov    %ax,0xf0781dee
	SETGATE(idt[34], 0, GD_KT , &ALL_FAULTS34, 3) ;
f010bb1f:	b8 e8 c8 10 f0       	mov    $0xf010c8e8,%eax
f010bb24:	66 a3 f0 1d 78 f0    	mov    %ax,0xf0781df0
f010bb2a:	66 c7 05 f2 1d 78 f0 	movw   $0x8,0xf0781df2
f010bb31:	08 00 
f010bb33:	a0 f4 1d 78 f0       	mov    0xf0781df4,%al
f010bb38:	83 e0 e0             	and    $0xffffffe0,%eax
f010bb3b:	a2 f4 1d 78 f0       	mov    %al,0xf0781df4
f010bb40:	a0 f4 1d 78 f0       	mov    0xf0781df4,%al
f010bb45:	83 e0 1f             	and    $0x1f,%eax
f010bb48:	a2 f4 1d 78 f0       	mov    %al,0xf0781df4
f010bb4d:	a0 f5 1d 78 f0       	mov    0xf0781df5,%al
f010bb52:	83 e0 f0             	and    $0xfffffff0,%eax
f010bb55:	83 c8 0e             	or     $0xe,%eax
f010bb58:	a2 f5 1d 78 f0       	mov    %al,0xf0781df5
f010bb5d:	a0 f5 1d 78 f0       	mov    0xf0781df5,%al
f010bb62:	83 e0 ef             	and    $0xffffffef,%eax
f010bb65:	a2 f5 1d 78 f0       	mov    %al,0xf0781df5
f010bb6a:	a0 f5 1d 78 f0       	mov    0xf0781df5,%al
f010bb6f:	83 c8 60             	or     $0x60,%eax
f010bb72:	a2 f5 1d 78 f0       	mov    %al,0xf0781df5
f010bb77:	a0 f5 1d 78 f0       	mov    0xf0781df5,%al
f010bb7c:	83 c8 80             	or     $0xffffff80,%eax
f010bb7f:	a2 f5 1d 78 f0       	mov    %al,0xf0781df5
f010bb84:	b8 e8 c8 10 f0       	mov    $0xf010c8e8,%eax
f010bb89:	c1 e8 10             	shr    $0x10,%eax
f010bb8c:	66 a3 f6 1d 78 f0    	mov    %ax,0xf0781df6
	SETGATE(idt[35], 0, GD_KT , &ALL_FAULTS35, 3) ;
f010bb92:	b8 ee c8 10 f0       	mov    $0xf010c8ee,%eax
f010bb97:	66 a3 f8 1d 78 f0    	mov    %ax,0xf0781df8
f010bb9d:	66 c7 05 fa 1d 78 f0 	movw   $0x8,0xf0781dfa
f010bba4:	08 00 
f010bba6:	a0 fc 1d 78 f0       	mov    0xf0781dfc,%al
f010bbab:	83 e0 e0             	and    $0xffffffe0,%eax
f010bbae:	a2 fc 1d 78 f0       	mov    %al,0xf0781dfc
f010bbb3:	a0 fc 1d 78 f0       	mov    0xf0781dfc,%al
f010bbb8:	83 e0 1f             	and    $0x1f,%eax
f010bbbb:	a2 fc 1d 78 f0       	mov    %al,0xf0781dfc
f010bbc0:	a0 fd 1d 78 f0       	mov    0xf0781dfd,%al
f010bbc5:	83 e0 f0             	and    $0xfffffff0,%eax
f010bbc8:	83 c8 0e             	or     $0xe,%eax
f010bbcb:	a2 fd 1d 78 f0       	mov    %al,0xf0781dfd
f010bbd0:	a0 fd 1d 78 f0       	mov    0xf0781dfd,%al
f010bbd5:	83 e0 ef             	and    $0xffffffef,%eax
f010bbd8:	a2 fd 1d 78 f0       	mov    %al,0xf0781dfd
f010bbdd:	a0 fd 1d 78 f0       	mov    0xf0781dfd,%al
f010bbe2:	83 c8 60             	or     $0x60,%eax
f010bbe5:	a2 fd 1d 78 f0       	mov    %al,0xf0781dfd
f010bbea:	a0 fd 1d 78 f0       	mov    0xf0781dfd,%al
f010bbef:	83 c8 80             	or     $0xffffff80,%eax
f010bbf2:	a2 fd 1d 78 f0       	mov    %al,0xf0781dfd
f010bbf7:	b8 ee c8 10 f0       	mov    $0xf010c8ee,%eax
f010bbfc:	c1 e8 10             	shr    $0x10,%eax
f010bbff:	66 a3 fe 1d 78 f0    	mov    %ax,0xf0781dfe
	SETGATE(idt[36], 0, GD_KT , &ALL_FAULTS36, 3) ;
f010bc05:	b8 f4 c8 10 f0       	mov    $0xf010c8f4,%eax
f010bc0a:	66 a3 00 1e 78 f0    	mov    %ax,0xf0781e00
f010bc10:	66 c7 05 02 1e 78 f0 	movw   $0x8,0xf0781e02
f010bc17:	08 00 
f010bc19:	a0 04 1e 78 f0       	mov    0xf0781e04,%al
f010bc1e:	83 e0 e0             	and    $0xffffffe0,%eax
f010bc21:	a2 04 1e 78 f0       	mov    %al,0xf0781e04
f010bc26:	a0 04 1e 78 f0       	mov    0xf0781e04,%al
f010bc2b:	83 e0 1f             	and    $0x1f,%eax
f010bc2e:	a2 04 1e 78 f0       	mov    %al,0xf0781e04
f010bc33:	a0 05 1e 78 f0       	mov    0xf0781e05,%al
f010bc38:	83 e0 f0             	and    $0xfffffff0,%eax
f010bc3b:	83 c8 0e             	or     $0xe,%eax
f010bc3e:	a2 05 1e 78 f0       	mov    %al,0xf0781e05
f010bc43:	a0 05 1e 78 f0       	mov    0xf0781e05,%al
f010bc48:	83 e0 ef             	and    $0xffffffef,%eax
f010bc4b:	a2 05 1e 78 f0       	mov    %al,0xf0781e05
f010bc50:	a0 05 1e 78 f0       	mov    0xf0781e05,%al
f010bc55:	83 c8 60             	or     $0x60,%eax
f010bc58:	a2 05 1e 78 f0       	mov    %al,0xf0781e05
f010bc5d:	a0 05 1e 78 f0       	mov    0xf0781e05,%al
f010bc62:	83 c8 80             	or     $0xffffff80,%eax
f010bc65:	a2 05 1e 78 f0       	mov    %al,0xf0781e05
f010bc6a:	b8 f4 c8 10 f0       	mov    $0xf010c8f4,%eax
f010bc6f:	c1 e8 10             	shr    $0x10,%eax
f010bc72:	66 a3 06 1e 78 f0    	mov    %ax,0xf0781e06
	SETGATE(idt[37], 0, GD_KT , &ALL_FAULTS37, 3) ;
f010bc78:	b8 fa c8 10 f0       	mov    $0xf010c8fa,%eax
f010bc7d:	66 a3 08 1e 78 f0    	mov    %ax,0xf0781e08
f010bc83:	66 c7 05 0a 1e 78 f0 	movw   $0x8,0xf0781e0a
f010bc8a:	08 00 
f010bc8c:	a0 0c 1e 78 f0       	mov    0xf0781e0c,%al
f010bc91:	83 e0 e0             	and    $0xffffffe0,%eax
f010bc94:	a2 0c 1e 78 f0       	mov    %al,0xf0781e0c
f010bc99:	a0 0c 1e 78 f0       	mov    0xf0781e0c,%al
f010bc9e:	83 e0 1f             	and    $0x1f,%eax
f010bca1:	a2 0c 1e 78 f0       	mov    %al,0xf0781e0c
f010bca6:	a0 0d 1e 78 f0       	mov    0xf0781e0d,%al
f010bcab:	83 e0 f0             	and    $0xfffffff0,%eax
f010bcae:	83 c8 0e             	or     $0xe,%eax
f010bcb1:	a2 0d 1e 78 f0       	mov    %al,0xf0781e0d
f010bcb6:	a0 0d 1e 78 f0       	mov    0xf0781e0d,%al
f010bcbb:	83 e0 ef             	and    $0xffffffef,%eax
f010bcbe:	a2 0d 1e 78 f0       	mov    %al,0xf0781e0d
f010bcc3:	a0 0d 1e 78 f0       	mov    0xf0781e0d,%al
f010bcc8:	83 c8 60             	or     $0x60,%eax
f010bccb:	a2 0d 1e 78 f0       	mov    %al,0xf0781e0d
f010bcd0:	a0 0d 1e 78 f0       	mov    0xf0781e0d,%al
f010bcd5:	83 c8 80             	or     $0xffffff80,%eax
f010bcd8:	a2 0d 1e 78 f0       	mov    %al,0xf0781e0d
f010bcdd:	b8 fa c8 10 f0       	mov    $0xf010c8fa,%eax
f010bce2:	c1 e8 10             	shr    $0x10,%eax
f010bce5:	66 a3 0e 1e 78 f0    	mov    %ax,0xf0781e0e
	SETGATE(idt[38], 0, GD_KT , &ALL_FAULTS38, 3) ;
f010bceb:	b8 00 c9 10 f0       	mov    $0xf010c900,%eax
f010bcf0:	66 a3 10 1e 78 f0    	mov    %ax,0xf0781e10
f010bcf6:	66 c7 05 12 1e 78 f0 	movw   $0x8,0xf0781e12
f010bcfd:	08 00 
f010bcff:	a0 14 1e 78 f0       	mov    0xf0781e14,%al
f010bd04:	83 e0 e0             	and    $0xffffffe0,%eax
f010bd07:	a2 14 1e 78 f0       	mov    %al,0xf0781e14
f010bd0c:	a0 14 1e 78 f0       	mov    0xf0781e14,%al
f010bd11:	83 e0 1f             	and    $0x1f,%eax
f010bd14:	a2 14 1e 78 f0       	mov    %al,0xf0781e14
f010bd19:	a0 15 1e 78 f0       	mov    0xf0781e15,%al
f010bd1e:	83 e0 f0             	and    $0xfffffff0,%eax
f010bd21:	83 c8 0e             	or     $0xe,%eax
f010bd24:	a2 15 1e 78 f0       	mov    %al,0xf0781e15
f010bd29:	a0 15 1e 78 f0       	mov    0xf0781e15,%al
f010bd2e:	83 e0 ef             	and    $0xffffffef,%eax
f010bd31:	a2 15 1e 78 f0       	mov    %al,0xf0781e15
f010bd36:	a0 15 1e 78 f0       	mov    0xf0781e15,%al
f010bd3b:	83 c8 60             	or     $0x60,%eax
f010bd3e:	a2 15 1e 78 f0       	mov    %al,0xf0781e15
f010bd43:	a0 15 1e 78 f0       	mov    0xf0781e15,%al
f010bd48:	83 c8 80             	or     $0xffffff80,%eax
f010bd4b:	a2 15 1e 78 f0       	mov    %al,0xf0781e15
f010bd50:	b8 00 c9 10 f0       	mov    $0xf010c900,%eax
f010bd55:	c1 e8 10             	shr    $0x10,%eax
f010bd58:	66 a3 16 1e 78 f0    	mov    %ax,0xf0781e16
	SETGATE(idt[39], 0, GD_KT , &ALL_FAULTS39, 3) ;
f010bd5e:	b8 06 c9 10 f0       	mov    $0xf010c906,%eax
f010bd63:	66 a3 18 1e 78 f0    	mov    %ax,0xf0781e18
f010bd69:	66 c7 05 1a 1e 78 f0 	movw   $0x8,0xf0781e1a
f010bd70:	08 00 
f010bd72:	a0 1c 1e 78 f0       	mov    0xf0781e1c,%al
f010bd77:	83 e0 e0             	and    $0xffffffe0,%eax
f010bd7a:	a2 1c 1e 78 f0       	mov    %al,0xf0781e1c
f010bd7f:	a0 1c 1e 78 f0       	mov    0xf0781e1c,%al
f010bd84:	83 e0 1f             	and    $0x1f,%eax
f010bd87:	a2 1c 1e 78 f0       	mov    %al,0xf0781e1c
f010bd8c:	a0 1d 1e 78 f0       	mov    0xf0781e1d,%al
f010bd91:	83 e0 f0             	and    $0xfffffff0,%eax
f010bd94:	83 c8 0e             	or     $0xe,%eax
f010bd97:	a2 1d 1e 78 f0       	mov    %al,0xf0781e1d
f010bd9c:	a0 1d 1e 78 f0       	mov    0xf0781e1d,%al
f010bda1:	83 e0 ef             	and    $0xffffffef,%eax
f010bda4:	a2 1d 1e 78 f0       	mov    %al,0xf0781e1d
f010bda9:	a0 1d 1e 78 f0       	mov    0xf0781e1d,%al
f010bdae:	83 c8 60             	or     $0x60,%eax
f010bdb1:	a2 1d 1e 78 f0       	mov    %al,0xf0781e1d
f010bdb6:	a0 1d 1e 78 f0       	mov    0xf0781e1d,%al
f010bdbb:	83 c8 80             	or     $0xffffff80,%eax
f010bdbe:	a2 1d 1e 78 f0       	mov    %al,0xf0781e1d
f010bdc3:	b8 06 c9 10 f0       	mov    $0xf010c906,%eax
f010bdc8:	c1 e8 10             	shr    $0x10,%eax
f010bdcb:	66 a3 1e 1e 78 f0    	mov    %ax,0xf0781e1e
	SETGATE(idt[40], 0, GD_KT , &ALL_FAULTS40, 3) ;
f010bdd1:	b8 0c c9 10 f0       	mov    $0xf010c90c,%eax
f010bdd6:	66 a3 20 1e 78 f0    	mov    %ax,0xf0781e20
f010bddc:	66 c7 05 22 1e 78 f0 	movw   $0x8,0xf0781e22
f010bde3:	08 00 
f010bde5:	a0 24 1e 78 f0       	mov    0xf0781e24,%al
f010bdea:	83 e0 e0             	and    $0xffffffe0,%eax
f010bded:	a2 24 1e 78 f0       	mov    %al,0xf0781e24
f010bdf2:	a0 24 1e 78 f0       	mov    0xf0781e24,%al
f010bdf7:	83 e0 1f             	and    $0x1f,%eax
f010bdfa:	a2 24 1e 78 f0       	mov    %al,0xf0781e24
f010bdff:	a0 25 1e 78 f0       	mov    0xf0781e25,%al
f010be04:	83 e0 f0             	and    $0xfffffff0,%eax
f010be07:	83 c8 0e             	or     $0xe,%eax
f010be0a:	a2 25 1e 78 f0       	mov    %al,0xf0781e25
f010be0f:	a0 25 1e 78 f0       	mov    0xf0781e25,%al
f010be14:	83 e0 ef             	and    $0xffffffef,%eax
f010be17:	a2 25 1e 78 f0       	mov    %al,0xf0781e25
f010be1c:	a0 25 1e 78 f0       	mov    0xf0781e25,%al
f010be21:	83 c8 60             	or     $0x60,%eax
f010be24:	a2 25 1e 78 f0       	mov    %al,0xf0781e25
f010be29:	a0 25 1e 78 f0       	mov    0xf0781e25,%al
f010be2e:	83 c8 80             	or     $0xffffff80,%eax
f010be31:	a2 25 1e 78 f0       	mov    %al,0xf0781e25
f010be36:	b8 0c c9 10 f0       	mov    $0xf010c90c,%eax
f010be3b:	c1 e8 10             	shr    $0x10,%eax
f010be3e:	66 a3 26 1e 78 f0    	mov    %ax,0xf0781e26
	SETGATE(idt[41], 0, GD_KT , &ALL_FAULTS41, 3) ;
f010be44:	b8 12 c9 10 f0       	mov    $0xf010c912,%eax
f010be49:	66 a3 28 1e 78 f0    	mov    %ax,0xf0781e28
f010be4f:	66 c7 05 2a 1e 78 f0 	movw   $0x8,0xf0781e2a
f010be56:	08 00 
f010be58:	a0 2c 1e 78 f0       	mov    0xf0781e2c,%al
f010be5d:	83 e0 e0             	and    $0xffffffe0,%eax
f010be60:	a2 2c 1e 78 f0       	mov    %al,0xf0781e2c
f010be65:	a0 2c 1e 78 f0       	mov    0xf0781e2c,%al
f010be6a:	83 e0 1f             	and    $0x1f,%eax
f010be6d:	a2 2c 1e 78 f0       	mov    %al,0xf0781e2c
f010be72:	a0 2d 1e 78 f0       	mov    0xf0781e2d,%al
f010be77:	83 e0 f0             	and    $0xfffffff0,%eax
f010be7a:	83 c8 0e             	or     $0xe,%eax
f010be7d:	a2 2d 1e 78 f0       	mov    %al,0xf0781e2d
f010be82:	a0 2d 1e 78 f0       	mov    0xf0781e2d,%al
f010be87:	83 e0 ef             	and    $0xffffffef,%eax
f010be8a:	a2 2d 1e 78 f0       	mov    %al,0xf0781e2d
f010be8f:	a0 2d 1e 78 f0       	mov    0xf0781e2d,%al
f010be94:	83 c8 60             	or     $0x60,%eax
f010be97:	a2 2d 1e 78 f0       	mov    %al,0xf0781e2d
f010be9c:	a0 2d 1e 78 f0       	mov    0xf0781e2d,%al
f010bea1:	83 c8 80             	or     $0xffffff80,%eax
f010bea4:	a2 2d 1e 78 f0       	mov    %al,0xf0781e2d
f010bea9:	b8 12 c9 10 f0       	mov    $0xf010c912,%eax
f010beae:	c1 e8 10             	shr    $0x10,%eax
f010beb1:	66 a3 2e 1e 78 f0    	mov    %ax,0xf0781e2e
	SETGATE(idt[42], 0, GD_KT , &ALL_FAULTS42, 3) ;
f010beb7:	b8 18 c9 10 f0       	mov    $0xf010c918,%eax
f010bebc:	66 a3 30 1e 78 f0    	mov    %ax,0xf0781e30
f010bec2:	66 c7 05 32 1e 78 f0 	movw   $0x8,0xf0781e32
f010bec9:	08 00 
f010becb:	a0 34 1e 78 f0       	mov    0xf0781e34,%al
f010bed0:	83 e0 e0             	and    $0xffffffe0,%eax
f010bed3:	a2 34 1e 78 f0       	mov    %al,0xf0781e34
f010bed8:	a0 34 1e 78 f0       	mov    0xf0781e34,%al
f010bedd:	83 e0 1f             	and    $0x1f,%eax
f010bee0:	a2 34 1e 78 f0       	mov    %al,0xf0781e34
f010bee5:	a0 35 1e 78 f0       	mov    0xf0781e35,%al
f010beea:	83 e0 f0             	and    $0xfffffff0,%eax
f010beed:	83 c8 0e             	or     $0xe,%eax
f010bef0:	a2 35 1e 78 f0       	mov    %al,0xf0781e35
f010bef5:	a0 35 1e 78 f0       	mov    0xf0781e35,%al
f010befa:	83 e0 ef             	and    $0xffffffef,%eax
f010befd:	a2 35 1e 78 f0       	mov    %al,0xf0781e35
f010bf02:	a0 35 1e 78 f0       	mov    0xf0781e35,%al
f010bf07:	83 c8 60             	or     $0x60,%eax
f010bf0a:	a2 35 1e 78 f0       	mov    %al,0xf0781e35
f010bf0f:	a0 35 1e 78 f0       	mov    0xf0781e35,%al
f010bf14:	83 c8 80             	or     $0xffffff80,%eax
f010bf17:	a2 35 1e 78 f0       	mov    %al,0xf0781e35
f010bf1c:	b8 18 c9 10 f0       	mov    $0xf010c918,%eax
f010bf21:	c1 e8 10             	shr    $0x10,%eax
f010bf24:	66 a3 36 1e 78 f0    	mov    %ax,0xf0781e36
	SETGATE(idt[43], 0, GD_KT , &ALL_FAULTS43, 3) ;
f010bf2a:	b8 1e c9 10 f0       	mov    $0xf010c91e,%eax
f010bf2f:	66 a3 38 1e 78 f0    	mov    %ax,0xf0781e38
f010bf35:	66 c7 05 3a 1e 78 f0 	movw   $0x8,0xf0781e3a
f010bf3c:	08 00 
f010bf3e:	a0 3c 1e 78 f0       	mov    0xf0781e3c,%al
f010bf43:	83 e0 e0             	and    $0xffffffe0,%eax
f010bf46:	a2 3c 1e 78 f0       	mov    %al,0xf0781e3c
f010bf4b:	a0 3c 1e 78 f0       	mov    0xf0781e3c,%al
f010bf50:	83 e0 1f             	and    $0x1f,%eax
f010bf53:	a2 3c 1e 78 f0       	mov    %al,0xf0781e3c
f010bf58:	a0 3d 1e 78 f0       	mov    0xf0781e3d,%al
f010bf5d:	83 e0 f0             	and    $0xfffffff0,%eax
f010bf60:	83 c8 0e             	or     $0xe,%eax
f010bf63:	a2 3d 1e 78 f0       	mov    %al,0xf0781e3d
f010bf68:	a0 3d 1e 78 f0       	mov    0xf0781e3d,%al
f010bf6d:	83 e0 ef             	and    $0xffffffef,%eax
f010bf70:	a2 3d 1e 78 f0       	mov    %al,0xf0781e3d
f010bf75:	a0 3d 1e 78 f0       	mov    0xf0781e3d,%al
f010bf7a:	83 c8 60             	or     $0x60,%eax
f010bf7d:	a2 3d 1e 78 f0       	mov    %al,0xf0781e3d
f010bf82:	a0 3d 1e 78 f0       	mov    0xf0781e3d,%al
f010bf87:	83 c8 80             	or     $0xffffff80,%eax
f010bf8a:	a2 3d 1e 78 f0       	mov    %al,0xf0781e3d
f010bf8f:	b8 1e c9 10 f0       	mov    $0xf010c91e,%eax
f010bf94:	c1 e8 10             	shr    $0x10,%eax
f010bf97:	66 a3 3e 1e 78 f0    	mov    %ax,0xf0781e3e
	SETGATE(idt[44], 0, GD_KT , &ALL_FAULTS44, 3) ;
f010bf9d:	b8 24 c9 10 f0       	mov    $0xf010c924,%eax
f010bfa2:	66 a3 40 1e 78 f0    	mov    %ax,0xf0781e40
f010bfa8:	66 c7 05 42 1e 78 f0 	movw   $0x8,0xf0781e42
f010bfaf:	08 00 
f010bfb1:	a0 44 1e 78 f0       	mov    0xf0781e44,%al
f010bfb6:	83 e0 e0             	and    $0xffffffe0,%eax
f010bfb9:	a2 44 1e 78 f0       	mov    %al,0xf0781e44
f010bfbe:	a0 44 1e 78 f0       	mov    0xf0781e44,%al
f010bfc3:	83 e0 1f             	and    $0x1f,%eax
f010bfc6:	a2 44 1e 78 f0       	mov    %al,0xf0781e44
f010bfcb:	a0 45 1e 78 f0       	mov    0xf0781e45,%al
f010bfd0:	83 e0 f0             	and    $0xfffffff0,%eax
f010bfd3:	83 c8 0e             	or     $0xe,%eax
f010bfd6:	a2 45 1e 78 f0       	mov    %al,0xf0781e45
f010bfdb:	a0 45 1e 78 f0       	mov    0xf0781e45,%al
f010bfe0:	83 e0 ef             	and    $0xffffffef,%eax
f010bfe3:	a2 45 1e 78 f0       	mov    %al,0xf0781e45
f010bfe8:	a0 45 1e 78 f0       	mov    0xf0781e45,%al
f010bfed:	83 c8 60             	or     $0x60,%eax
f010bff0:	a2 45 1e 78 f0       	mov    %al,0xf0781e45
f010bff5:	a0 45 1e 78 f0       	mov    0xf0781e45,%al
f010bffa:	83 c8 80             	or     $0xffffff80,%eax
f010bffd:	a2 45 1e 78 f0       	mov    %al,0xf0781e45
f010c002:	b8 24 c9 10 f0       	mov    $0xf010c924,%eax
f010c007:	c1 e8 10             	shr    $0x10,%eax
f010c00a:	66 a3 46 1e 78 f0    	mov    %ax,0xf0781e46
	SETGATE(idt[45], 0, GD_KT , &ALL_FAULTS45, 3) ;
f010c010:	b8 2a c9 10 f0       	mov    $0xf010c92a,%eax
f010c015:	66 a3 48 1e 78 f0    	mov    %ax,0xf0781e48
f010c01b:	66 c7 05 4a 1e 78 f0 	movw   $0x8,0xf0781e4a
f010c022:	08 00 
f010c024:	a0 4c 1e 78 f0       	mov    0xf0781e4c,%al
f010c029:	83 e0 e0             	and    $0xffffffe0,%eax
f010c02c:	a2 4c 1e 78 f0       	mov    %al,0xf0781e4c
f010c031:	a0 4c 1e 78 f0       	mov    0xf0781e4c,%al
f010c036:	83 e0 1f             	and    $0x1f,%eax
f010c039:	a2 4c 1e 78 f0       	mov    %al,0xf0781e4c
f010c03e:	a0 4d 1e 78 f0       	mov    0xf0781e4d,%al
f010c043:	83 e0 f0             	and    $0xfffffff0,%eax
f010c046:	83 c8 0e             	or     $0xe,%eax
f010c049:	a2 4d 1e 78 f0       	mov    %al,0xf0781e4d
f010c04e:	a0 4d 1e 78 f0       	mov    0xf0781e4d,%al
f010c053:	83 e0 ef             	and    $0xffffffef,%eax
f010c056:	a2 4d 1e 78 f0       	mov    %al,0xf0781e4d
f010c05b:	a0 4d 1e 78 f0       	mov    0xf0781e4d,%al
f010c060:	83 c8 60             	or     $0x60,%eax
f010c063:	a2 4d 1e 78 f0       	mov    %al,0xf0781e4d
f010c068:	a0 4d 1e 78 f0       	mov    0xf0781e4d,%al
f010c06d:	83 c8 80             	or     $0xffffff80,%eax
f010c070:	a2 4d 1e 78 f0       	mov    %al,0xf0781e4d
f010c075:	b8 2a c9 10 f0       	mov    $0xf010c92a,%eax
f010c07a:	c1 e8 10             	shr    $0x10,%eax
f010c07d:	66 a3 4e 1e 78 f0    	mov    %ax,0xf0781e4e
	SETGATE(idt[46], 0, GD_KT , &ALL_FAULTS46, 3) ;
f010c083:	b8 30 c9 10 f0       	mov    $0xf010c930,%eax
f010c088:	66 a3 50 1e 78 f0    	mov    %ax,0xf0781e50
f010c08e:	66 c7 05 52 1e 78 f0 	movw   $0x8,0xf0781e52
f010c095:	08 00 
f010c097:	a0 54 1e 78 f0       	mov    0xf0781e54,%al
f010c09c:	83 e0 e0             	and    $0xffffffe0,%eax
f010c09f:	a2 54 1e 78 f0       	mov    %al,0xf0781e54
f010c0a4:	a0 54 1e 78 f0       	mov    0xf0781e54,%al
f010c0a9:	83 e0 1f             	and    $0x1f,%eax
f010c0ac:	a2 54 1e 78 f0       	mov    %al,0xf0781e54
f010c0b1:	a0 55 1e 78 f0       	mov    0xf0781e55,%al
f010c0b6:	83 e0 f0             	and    $0xfffffff0,%eax
f010c0b9:	83 c8 0e             	or     $0xe,%eax
f010c0bc:	a2 55 1e 78 f0       	mov    %al,0xf0781e55
f010c0c1:	a0 55 1e 78 f0       	mov    0xf0781e55,%al
f010c0c6:	83 e0 ef             	and    $0xffffffef,%eax
f010c0c9:	a2 55 1e 78 f0       	mov    %al,0xf0781e55
f010c0ce:	a0 55 1e 78 f0       	mov    0xf0781e55,%al
f010c0d3:	83 c8 60             	or     $0x60,%eax
f010c0d6:	a2 55 1e 78 f0       	mov    %al,0xf0781e55
f010c0db:	a0 55 1e 78 f0       	mov    0xf0781e55,%al
f010c0e0:	83 c8 80             	or     $0xffffff80,%eax
f010c0e3:	a2 55 1e 78 f0       	mov    %al,0xf0781e55
f010c0e8:	b8 30 c9 10 f0       	mov    $0xf010c930,%eax
f010c0ed:	c1 e8 10             	shr    $0x10,%eax
f010c0f0:	66 a3 56 1e 78 f0    	mov    %ax,0xf0781e56
	SETGATE(idt[47], 0, GD_KT , &ALL_FAULTS47, 3) ;
f010c0f6:	b8 36 c9 10 f0       	mov    $0xf010c936,%eax
f010c0fb:	66 a3 58 1e 78 f0    	mov    %ax,0xf0781e58
f010c101:	66 c7 05 5a 1e 78 f0 	movw   $0x8,0xf0781e5a
f010c108:	08 00 
f010c10a:	a0 5c 1e 78 f0       	mov    0xf0781e5c,%al
f010c10f:	83 e0 e0             	and    $0xffffffe0,%eax
f010c112:	a2 5c 1e 78 f0       	mov    %al,0xf0781e5c
f010c117:	a0 5c 1e 78 f0       	mov    0xf0781e5c,%al
f010c11c:	83 e0 1f             	and    $0x1f,%eax
f010c11f:	a2 5c 1e 78 f0       	mov    %al,0xf0781e5c
f010c124:	a0 5d 1e 78 f0       	mov    0xf0781e5d,%al
f010c129:	83 e0 f0             	and    $0xfffffff0,%eax
f010c12c:	83 c8 0e             	or     $0xe,%eax
f010c12f:	a2 5d 1e 78 f0       	mov    %al,0xf0781e5d
f010c134:	a0 5d 1e 78 f0       	mov    0xf0781e5d,%al
f010c139:	83 e0 ef             	and    $0xffffffef,%eax
f010c13c:	a2 5d 1e 78 f0       	mov    %al,0xf0781e5d
f010c141:	a0 5d 1e 78 f0       	mov    0xf0781e5d,%al
f010c146:	83 c8 60             	or     $0x60,%eax
f010c149:	a2 5d 1e 78 f0       	mov    %al,0xf0781e5d
f010c14e:	a0 5d 1e 78 f0       	mov    0xf0781e5d,%al
f010c153:	83 c8 80             	or     $0xffffff80,%eax
f010c156:	a2 5d 1e 78 f0       	mov    %al,0xf0781e5d
f010c15b:	b8 36 c9 10 f0       	mov    $0xf010c936,%eax
f010c160:	c1 e8 10             	shr    $0x10,%eax
f010c163:	66 a3 5e 1e 78 f0    	mov    %ax,0xf0781e5e



	// Setup a TSS so that we get the right stack
	// when we trap to the kernel.
	ts.ts_esp0 = KERNEL_STACK_TOP;
f010c169:	c7 05 04 25 78 f0 00 	movl   $0xefc00000,0xf0782504
f010c170:	00 c0 ef 
	ts.ts_ss0 = GD_KD;
f010c173:	66 c7 05 08 25 78 f0 	movw   $0x10,0xf0782508
f010c17a:	10 00 

	// Initialize the TSS field of the gdt.
	gdt[GD_TSS >> 3] = SEG16(STS_T32A, (uint32) (&ts),
f010c17c:	66 c7 05 e8 28 19 f0 	movw   $0x68,0xf01928e8
f010c183:	68 00 
f010c185:	b8 00 25 78 f0       	mov    $0xf0782500,%eax
f010c18a:	66 a3 ea 28 19 f0    	mov    %ax,0xf01928ea
f010c190:	b8 00 25 78 f0       	mov    $0xf0782500,%eax
f010c195:	c1 e8 10             	shr    $0x10,%eax
f010c198:	a2 ec 28 19 f0       	mov    %al,0xf01928ec
f010c19d:	a0 ed 28 19 f0       	mov    0xf01928ed,%al
f010c1a2:	83 e0 f0             	and    $0xfffffff0,%eax
f010c1a5:	83 c8 09             	or     $0x9,%eax
f010c1a8:	a2 ed 28 19 f0       	mov    %al,0xf01928ed
f010c1ad:	a0 ed 28 19 f0       	mov    0xf01928ed,%al
f010c1b2:	83 c8 10             	or     $0x10,%eax
f010c1b5:	a2 ed 28 19 f0       	mov    %al,0xf01928ed
f010c1ba:	a0 ed 28 19 f0       	mov    0xf01928ed,%al
f010c1bf:	83 e0 9f             	and    $0xffffff9f,%eax
f010c1c2:	a2 ed 28 19 f0       	mov    %al,0xf01928ed
f010c1c7:	a0 ed 28 19 f0       	mov    0xf01928ed,%al
f010c1cc:	83 c8 80             	or     $0xffffff80,%eax
f010c1cf:	a2 ed 28 19 f0       	mov    %al,0xf01928ed
f010c1d4:	a0 ee 28 19 f0       	mov    0xf01928ee,%al
f010c1d9:	83 e0 f0             	and    $0xfffffff0,%eax
f010c1dc:	a2 ee 28 19 f0       	mov    %al,0xf01928ee
f010c1e1:	a0 ee 28 19 f0       	mov    0xf01928ee,%al
f010c1e6:	83 e0 ef             	and    $0xffffffef,%eax
f010c1e9:	a2 ee 28 19 f0       	mov    %al,0xf01928ee
f010c1ee:	a0 ee 28 19 f0       	mov    0xf01928ee,%al
f010c1f3:	83 e0 df             	and    $0xffffffdf,%eax
f010c1f6:	a2 ee 28 19 f0       	mov    %al,0xf01928ee
f010c1fb:	a0 ee 28 19 f0       	mov    0xf01928ee,%al
f010c200:	83 c8 40             	or     $0x40,%eax
f010c203:	a2 ee 28 19 f0       	mov    %al,0xf01928ee
f010c208:	a0 ee 28 19 f0       	mov    0xf01928ee,%al
f010c20d:	83 e0 7f             	and    $0x7f,%eax
f010c210:	a2 ee 28 19 f0       	mov    %al,0xf01928ee
f010c215:	b8 00 25 78 f0       	mov    $0xf0782500,%eax
f010c21a:	c1 e8 18             	shr    $0x18,%eax
f010c21d:	a2 ef 28 19 f0       	mov    %al,0xf01928ef
			sizeof(struct Taskstate), 0);
	gdt[GD_TSS >> 3].sd_s = 0;
f010c222:	a0 ed 28 19 f0       	mov    0xf01928ed,%al
f010c227:	83 e0 ef             	and    $0xffffffef,%eax
f010c22a:	a2 ed 28 19 f0       	mov    %al,0xf01928ed
f010c22f:	66 c7 45 fe 28 00    	movw   $0x28,-0x2(%ebp)
}

static __inline void
ltr(uint16 sel)
{
	__asm __volatile("ltr %0" : : "r" (sel));
f010c235:	66 8b 45 fe          	mov    -0x2(%ebp),%ax
f010c239:	0f 00 d8             	ltr    %ax

	// Load the TSS
	ltr(GD_TSS);

	// Load the IDT
	asm volatile("lidt idt_pd");
f010c23c:	0f 01 1d 1c 2d 19 f0 	lidtl  0xf0192d1c
}
f010c243:	90                   	nop
f010c244:	c9                   	leave  
f010c245:	c3                   	ret    

f010c246 <print_trapframe>:

void print_trapframe(struct Trapframe *tf)
{
f010c246:	55                   	push   %ebp
f010c247:	89 e5                	mov    %esp,%ebp
f010c249:	53                   	push   %ebx
f010c24a:	83 ec 04             	sub    $0x4,%esp
	cprintf("TRAP frame at %p\n", tf);
f010c24d:	83 ec 08             	sub    $0x8,%esp
f010c250:	ff 75 08             	pushl  0x8(%ebp)
f010c253:	68 7b 74 13 f0       	push   $0xf013747b
f010c258:	e8 b1 4a ff ff       	call   f0100d0e <cprintf>
f010c25d:	83 c4 10             	add    $0x10,%esp
	print_regs(&tf->tf_regs);
f010c260:	8b 45 08             	mov    0x8(%ebp),%eax
f010c263:	83 ec 0c             	sub    $0xc,%esp
f010c266:	50                   	push   %eax
f010c267:	e8 fd 00 00 00       	call   f010c369 <print_regs>
f010c26c:	83 c4 10             	add    $0x10,%esp
	cprintf("  es   0x----%04x\n", tf->tf_es);
f010c26f:	8b 45 08             	mov    0x8(%ebp),%eax
f010c272:	8b 40 20             	mov    0x20(%eax),%eax
f010c275:	0f b7 c0             	movzwl %ax,%eax
f010c278:	83 ec 08             	sub    $0x8,%esp
f010c27b:	50                   	push   %eax
f010c27c:	68 8d 74 13 f0       	push   $0xf013748d
f010c281:	e8 88 4a ff ff       	call   f0100d0e <cprintf>
f010c286:	83 c4 10             	add    $0x10,%esp
	cprintf("  ds   0x----%04x\n", tf->tf_ds);
f010c289:	8b 45 08             	mov    0x8(%ebp),%eax
f010c28c:	8b 40 24             	mov    0x24(%eax),%eax
f010c28f:	0f b7 c0             	movzwl %ax,%eax
f010c292:	83 ec 08             	sub    $0x8,%esp
f010c295:	50                   	push   %eax
f010c296:	68 a0 74 13 f0       	push   $0xf01374a0
f010c29b:	e8 6e 4a ff ff       	call   f0100d0e <cprintf>
f010c2a0:	83 c4 10             	add    $0x10,%esp
	cprintf("  trap 0x%08x %s - %d\n", tf->tf_trapno, trapname(tf->tf_trapno), tf->tf_trapno);
f010c2a3:	8b 45 08             	mov    0x8(%ebp),%eax
f010c2a6:	8b 58 28             	mov    0x28(%eax),%ebx
f010c2a9:	8b 45 08             	mov    0x8(%ebp),%eax
f010c2ac:	8b 40 28             	mov    0x28(%eax),%eax
f010c2af:	83 ec 0c             	sub    $0xc,%esp
f010c2b2:	50                   	push   %eax
f010c2b3:	e8 d0 ee ff ff       	call   f010b188 <trapname>
f010c2b8:	83 c4 10             	add    $0x10,%esp
f010c2bb:	89 c2                	mov    %eax,%edx
f010c2bd:	8b 45 08             	mov    0x8(%ebp),%eax
f010c2c0:	8b 40 28             	mov    0x28(%eax),%eax
f010c2c3:	53                   	push   %ebx
f010c2c4:	52                   	push   %edx
f010c2c5:	50                   	push   %eax
f010c2c6:	68 b3 74 13 f0       	push   $0xf01374b3
f010c2cb:	e8 3e 4a ff ff       	call   f0100d0e <cprintf>
f010c2d0:	83 c4 10             	add    $0x10,%esp
	cprintf("  err  0x%08x\n", tf->tf_err);
f010c2d3:	8b 45 08             	mov    0x8(%ebp),%eax
f010c2d6:	8b 40 2c             	mov    0x2c(%eax),%eax
f010c2d9:	83 ec 08             	sub    $0x8,%esp
f010c2dc:	50                   	push   %eax
f010c2dd:	68 ca 74 13 f0       	push   $0xf01374ca
f010c2e2:	e8 27 4a ff ff       	call   f0100d0e <cprintf>
f010c2e7:	83 c4 10             	add    $0x10,%esp
	cprintf("  eip  0x%08x\n", tf->tf_eip);
f010c2ea:	8b 45 08             	mov    0x8(%ebp),%eax
f010c2ed:	8b 40 30             	mov    0x30(%eax),%eax
f010c2f0:	83 ec 08             	sub    $0x8,%esp
f010c2f3:	50                   	push   %eax
f010c2f4:	68 d9 74 13 f0       	push   $0xf01374d9
f010c2f9:	e8 10 4a ff ff       	call   f0100d0e <cprintf>
f010c2fe:	83 c4 10             	add    $0x10,%esp
	cprintf("  cs   0x----%04x\n", tf->tf_cs);
f010c301:	8b 45 08             	mov    0x8(%ebp),%eax
f010c304:	8b 40 34             	mov    0x34(%eax),%eax
f010c307:	0f b7 c0             	movzwl %ax,%eax
f010c30a:	83 ec 08             	sub    $0x8,%esp
f010c30d:	50                   	push   %eax
f010c30e:	68 e8 74 13 f0       	push   $0xf01374e8
f010c313:	e8 f6 49 ff ff       	call   f0100d0e <cprintf>
f010c318:	83 c4 10             	add    $0x10,%esp
	cprintf("  flag 0x%08x\n", tf->tf_eflags);
f010c31b:	8b 45 08             	mov    0x8(%ebp),%eax
f010c31e:	8b 40 38             	mov    0x38(%eax),%eax
f010c321:	83 ec 08             	sub    $0x8,%esp
f010c324:	50                   	push   %eax
f010c325:	68 fb 74 13 f0       	push   $0xf01374fb
f010c32a:	e8 df 49 ff ff       	call   f0100d0e <cprintf>
f010c32f:	83 c4 10             	add    $0x10,%esp
	cprintf("  esp  0x%08x\n", tf->tf_esp);
f010c332:	8b 45 08             	mov    0x8(%ebp),%eax
f010c335:	8b 40 3c             	mov    0x3c(%eax),%eax
f010c338:	83 ec 08             	sub    $0x8,%esp
f010c33b:	50                   	push   %eax
f010c33c:	68 0a 75 13 f0       	push   $0xf013750a
f010c341:	e8 c8 49 ff ff       	call   f0100d0e <cprintf>
f010c346:	83 c4 10             	add    $0x10,%esp
	cprintf("  ss   0x----%04x\n", tf->tf_ss);
f010c349:	8b 45 08             	mov    0x8(%ebp),%eax
f010c34c:	8b 40 40             	mov    0x40(%eax),%eax
f010c34f:	0f b7 c0             	movzwl %ax,%eax
f010c352:	83 ec 08             	sub    $0x8,%esp
f010c355:	50                   	push   %eax
f010c356:	68 19 75 13 f0       	push   $0xf0137519
f010c35b:	e8 ae 49 ff ff       	call   f0100d0e <cprintf>
f010c360:	83 c4 10             	add    $0x10,%esp
}
f010c363:	90                   	nop
f010c364:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f010c367:	c9                   	leave  
f010c368:	c3                   	ret    

f010c369 <print_regs>:

void print_regs(struct PushRegs *regs)
{
f010c369:	55                   	push   %ebp
f010c36a:	89 e5                	mov    %esp,%ebp
f010c36c:	83 ec 08             	sub    $0x8,%esp
	cprintf("  edi  0x%08x\n", regs->reg_edi);
f010c36f:	8b 45 08             	mov    0x8(%ebp),%eax
f010c372:	8b 00                	mov    (%eax),%eax
f010c374:	83 ec 08             	sub    $0x8,%esp
f010c377:	50                   	push   %eax
f010c378:	68 2c 75 13 f0       	push   $0xf013752c
f010c37d:	e8 8c 49 ff ff       	call   f0100d0e <cprintf>
f010c382:	83 c4 10             	add    $0x10,%esp
	cprintf("  esi  0x%08x\n", regs->reg_esi);
f010c385:	8b 45 08             	mov    0x8(%ebp),%eax
f010c388:	8b 40 04             	mov    0x4(%eax),%eax
f010c38b:	83 ec 08             	sub    $0x8,%esp
f010c38e:	50                   	push   %eax
f010c38f:	68 3b 75 13 f0       	push   $0xf013753b
f010c394:	e8 75 49 ff ff       	call   f0100d0e <cprintf>
f010c399:	83 c4 10             	add    $0x10,%esp
	cprintf("  ebp  0x%08x\n", regs->reg_ebp);
f010c39c:	8b 45 08             	mov    0x8(%ebp),%eax
f010c39f:	8b 40 08             	mov    0x8(%eax),%eax
f010c3a2:	83 ec 08             	sub    $0x8,%esp
f010c3a5:	50                   	push   %eax
f010c3a6:	68 4a 75 13 f0       	push   $0xf013754a
f010c3ab:	e8 5e 49 ff ff       	call   f0100d0e <cprintf>
f010c3b0:	83 c4 10             	add    $0x10,%esp
	cprintf("  oesp 0x%08x\n", regs->reg_oesp);
f010c3b3:	8b 45 08             	mov    0x8(%ebp),%eax
f010c3b6:	8b 40 0c             	mov    0xc(%eax),%eax
f010c3b9:	83 ec 08             	sub    $0x8,%esp
f010c3bc:	50                   	push   %eax
f010c3bd:	68 59 75 13 f0       	push   $0xf0137559
f010c3c2:	e8 47 49 ff ff       	call   f0100d0e <cprintf>
f010c3c7:	83 c4 10             	add    $0x10,%esp
	cprintf("  ebx  0x%08x\n", regs->reg_ebx);
f010c3ca:	8b 45 08             	mov    0x8(%ebp),%eax
f010c3cd:	8b 40 10             	mov    0x10(%eax),%eax
f010c3d0:	83 ec 08             	sub    $0x8,%esp
f010c3d3:	50                   	push   %eax
f010c3d4:	68 68 75 13 f0       	push   $0xf0137568
f010c3d9:	e8 30 49 ff ff       	call   f0100d0e <cprintf>
f010c3de:	83 c4 10             	add    $0x10,%esp
	cprintf("  edx  0x%08x\n", regs->reg_edx);
f010c3e1:	8b 45 08             	mov    0x8(%ebp),%eax
f010c3e4:	8b 40 14             	mov    0x14(%eax),%eax
f010c3e7:	83 ec 08             	sub    $0x8,%esp
f010c3ea:	50                   	push   %eax
f010c3eb:	68 77 75 13 f0       	push   $0xf0137577
f010c3f0:	e8 19 49 ff ff       	call   f0100d0e <cprintf>
f010c3f5:	83 c4 10             	add    $0x10,%esp
	cprintf("  ecx  0x%08x\n", regs->reg_ecx);
f010c3f8:	8b 45 08             	mov    0x8(%ebp),%eax
f010c3fb:	8b 40 18             	mov    0x18(%eax),%eax
f010c3fe:	83 ec 08             	sub    $0x8,%esp
f010c401:	50                   	push   %eax
f010c402:	68 86 75 13 f0       	push   $0xf0137586
f010c407:	e8 02 49 ff ff       	call   f0100d0e <cprintf>
f010c40c:	83 c4 10             	add    $0x10,%esp
	cprintf("  eax  0x%08x\n", regs->reg_eax);
f010c40f:	8b 45 08             	mov    0x8(%ebp),%eax
f010c412:	8b 40 1c             	mov    0x1c(%eax),%eax
f010c415:	83 ec 08             	sub    $0x8,%esp
f010c418:	50                   	push   %eax
f010c419:	68 95 75 13 f0       	push   $0xf0137595
f010c41e:	e8 eb 48 ff ff       	call   f0100d0e <cprintf>
f010c423:	83 c4 10             	add    $0x10,%esp
}
f010c426:	90                   	nop
f010c427:	c9                   	leave  
f010c428:	c3                   	ret    

f010c429 <trap_dispatch>:

static void trap_dispatch(struct Trapframe *tf)
{
f010c429:	55                   	push   %ebp
f010c42a:	89 e5                	mov    %esp,%ebp
f010c42c:	57                   	push   %edi
f010c42d:	56                   	push   %esi
f010c42e:	53                   	push   %ebx
f010c42f:	83 ec 1c             	sub    $0x1c,%esp
	// Handle processor exceptions.
	// LAB 3: Your code here.

	if(tf->tf_trapno == T_PGFLT)
f010c432:	8b 45 08             	mov    0x8(%ebp),%eax
f010c435:	8b 40 28             	mov    0x28(%eax),%eax
f010c438:	83 f8 0e             	cmp    $0xe,%eax
f010c43b:	75 29                	jne    f010c466 <trap_dispatch+0x3d>
	{
		//print_trapframe(tf);
		if(isPageReplacmentAlgorithmLRU(PG_REP_LRU_TIME_APPROX))
f010c43d:	83 ec 0c             	sub    $0xc,%esp
f010c440:	6a 01                	push   $0x1
f010c442:	e8 fc 18 00 00       	call   f010dd43 <isPageReplacmentAlgorithmLRU>
f010c447:	83 c4 10             	add    $0x10,%esp
f010c44a:	85 c0                	test   %eax,%eax
f010c44c:	74 05                	je     f010c453 <trap_dispatch+0x2a>
		{
			//cprintf("===========Table WS before updating time stamp========\n");
			//env_table_ws_print(curenv) ;
			update_WS_time_stamps();
f010c44e:	e8 d9 95 ff ff       	call   f0105a2c <update_WS_time_stamps>
		}
		fault_handler(tf);
f010c453:	83 ec 0c             	sub    $0xc,%esp
f010c456:	ff 75 08             	pushl  0x8(%ebp)
f010c459:	e8 51 02 00 00       	call   f010c6af <fault_handler>
f010c45e:	83 c4 10             	add    $0x10,%esp
			panic("unhandled trap in user program");

			return;
		}
	}
	return;
f010c461:	e9 bb 00 00 00       	jmp    f010c521 <trap_dispatch+0xf8>
			//env_table_ws_print(curenv) ;
			update_WS_time_stamps();
		}
		fault_handler(tf);
	}
	else if (tf->tf_trapno == T_SYSCALL)
f010c466:	8b 45 08             	mov    0x8(%ebp),%eax
f010c469:	8b 40 28             	mov    0x28(%eax),%eax
f010c46c:	83 f8 30             	cmp    $0x30,%eax
f010c46f:	75 42                	jne    f010c4b3 <trap_dispatch+0x8a>
	{
		uint32 ret = syscall(tf->tf_regs.reg_eax
f010c471:	8b 45 08             	mov    0x8(%ebp),%eax
f010c474:	8b 78 04             	mov    0x4(%eax),%edi
f010c477:	8b 45 08             	mov    0x8(%ebp),%eax
f010c47a:	8b 30                	mov    (%eax),%esi
f010c47c:	8b 45 08             	mov    0x8(%ebp),%eax
f010c47f:	8b 58 10             	mov    0x10(%eax),%ebx
f010c482:	8b 45 08             	mov    0x8(%ebp),%eax
f010c485:	8b 48 18             	mov    0x18(%eax),%ecx
f010c488:	8b 45 08             	mov    0x8(%ebp),%eax
f010c48b:	8b 50 14             	mov    0x14(%eax),%edx
f010c48e:	8b 45 08             	mov    0x8(%ebp),%eax
f010c491:	8b 40 1c             	mov    0x1c(%eax),%eax
f010c494:	83 ec 08             	sub    $0x8,%esp
f010c497:	57                   	push   %edi
f010c498:	56                   	push   %esi
f010c499:	53                   	push   %ebx
f010c49a:	51                   	push   %ecx
f010c49b:	52                   	push   %edx
f010c49c:	50                   	push   %eax
f010c49d:	e8 ec 0f 00 00       	call   f010d48e <syscall>
f010c4a2:	83 c4 20             	add    $0x20,%esp
f010c4a5:	89 45 e4             	mov    %eax,-0x1c(%ebp)
				,tf->tf_regs.reg_edx
				,tf->tf_regs.reg_ecx
				,tf->tf_regs.reg_ebx
				,tf->tf_regs.reg_edi
				,tf->tf_regs.reg_esi);
		tf->tf_regs.reg_eax = ret;
f010c4a8:	8b 45 08             	mov    0x8(%ebp),%eax
f010c4ab:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010c4ae:	89 50 1c             	mov    %edx,0x1c(%eax)
			panic("unhandled trap in user program");

			return;
		}
	}
	return;
f010c4b1:	eb 6e                	jmp    f010c521 <trap_dispatch+0xf8>
				,tf->tf_regs.reg_ebx
				,tf->tf_regs.reg_edi
				,tf->tf_regs.reg_esi);
		tf->tf_regs.reg_eax = ret;
	}
	else if(tf->tf_trapno == T_DBLFLT)
f010c4b3:	8b 45 08             	mov    0x8(%ebp),%eax
f010c4b6:	8b 40 28             	mov    0x28(%eax),%eax
f010c4b9:	83 f8 08             	cmp    $0x8,%eax
f010c4bc:	75 17                	jne    f010c4d5 <trap_dispatch+0xac>
	{
		panic("double fault!!");
f010c4be:	83 ec 04             	sub    $0x4,%esp
f010c4c1:	68 a4 75 13 f0       	push   $0xf01375a4
f010c4c6:	68 e7 00 00 00       	push   $0xe7
f010c4cb:	68 b3 75 13 f0       	push   $0xf01375b3
f010c4d0:	e8 30 3d ff ff       	call   f0100205 <_panic>
	}
	else if (tf->tf_trapno == IRQ0_Clock)
f010c4d5:	8b 45 08             	mov    0x8(%ebp),%eax
f010c4d8:	8b 40 28             	mov    0x28(%eax),%eax
f010c4db:	83 f8 20             	cmp    $0x20,%eax
f010c4de:	75 07                	jne    f010c4e7 <trap_dispatch+0xbe>
	{
		clock_interrupt_handler() ;
f010c4e0:	e8 26 95 ff ff       	call   f0105a0b <clock_interrupt_handler>
			panic("unhandled trap in user program");

			return;
		}
	}
	return;
f010c4e5:	eb 3a                	jmp    f010c521 <trap_dispatch+0xf8>

	else
	{
		// Unexpected trap: The user process or the kernel has a bug.
		//print_trapframe(tf);
		if (tf->tf_cs == GD_KT)
f010c4e7:	8b 45 08             	mov    0x8(%ebp),%eax
f010c4ea:	8b 40 34             	mov    0x34(%eax),%eax
f010c4ed:	66 83 f8 08          	cmp    $0x8,%ax
f010c4f1:	75 17                	jne    f010c50a <trap_dispatch+0xe1>
		{
			panic("unhandled trap in kernel");
f010c4f3:	83 ec 04             	sub    $0x4,%esp
f010c4f6:	68 c4 75 13 f0       	push   $0xf01375c4
f010c4fb:	68 f4 00 00 00       	push   $0xf4
f010c500:	68 b3 75 13 f0       	push   $0xf01375b3
f010c505:	e8 fb 3c ff ff       	call   f0100205 <_panic>
		}
		else {
			//env_destroy(curenv);
			panic("unhandled trap in user program");
f010c50a:	83 ec 04             	sub    $0x4,%esp
f010c50d:	68 e0 75 13 f0       	push   $0xf01375e0
f010c512:	68 f8 00 00 00       	push   $0xf8
f010c517:	68 b3 75 13 f0       	push   $0xf01375b3
f010c51c:	e8 e4 3c ff ff       	call   f0100205 <_panic>

			return;
		}
	}
	return;
}
f010c521:	8d 65 f4             	lea    -0xc(%ebp),%esp
f010c524:	5b                   	pop    %ebx
f010c525:	5e                   	pop    %esi
f010c526:	5f                   	pop    %edi
f010c527:	5d                   	pop    %ebp
f010c528:	c3                   	ret    

f010c529 <trap>:

void trap(struct Trapframe *tf)
{
f010c529:	55                   	push   %ebp
f010c52a:	89 e5                	mov    %esp,%ebp
f010c52c:	57                   	push   %edi
f010c52d:	56                   	push   %esi
f010c52e:	53                   	push   %ebx
f010c52f:	83 ec 1c             	sub    $0x1c,%esp
	kclock_stop();
f010c532:	e8 5d 7c ff ff       	call   f0104194 <kclock_stop>

	int userTrap = 0;
f010c537:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
	if ((tf->tf_cs & 3) == 3) {
f010c53e:	8b 45 08             	mov    0x8(%ebp),%eax
f010c541:	8b 40 34             	mov    0x34(%eax),%eax
f010c544:	0f b7 c0             	movzwl %ax,%eax
f010c547:	83 e0 03             	and    $0x3,%eax
f010c54a:	83 f8 03             	cmp    $0x3,%eax
f010c54d:	75 49                	jne    f010c598 <trap+0x6f>
		assert(curenv);
f010c54f:	a1 b4 1c 78 f0       	mov    0xf0781cb4,%eax
f010c554:	85 c0                	test   %eax,%eax
f010c556:	75 19                	jne    f010c571 <trap+0x48>
f010c558:	68 ff 75 13 f0       	push   $0xf01375ff
f010c55d:	68 06 76 13 f0       	push   $0xf0137606
f010c562:	68 06 01 00 00       	push   $0x106
f010c567:	68 b3 75 13 f0       	push   $0xf01375b3
f010c56c:	e8 94 3c ff ff       	call   f0100205 <_panic>
		curenv->env_tf = *tf;
f010c571:	8b 15 b4 1c 78 f0    	mov    0xf0781cb4,%edx
f010c577:	8b 45 08             	mov    0x8(%ebp),%eax
f010c57a:	89 c3                	mov    %eax,%ebx
f010c57c:	b8 11 00 00 00       	mov    $0x11,%eax
f010c581:	89 d7                	mov    %edx,%edi
f010c583:	89 de                	mov    %ebx,%esi
f010c585:	89 c1                	mov    %eax,%ecx
f010c587:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
		tf = &(curenv->env_tf);
f010c589:	a1 b4 1c 78 f0       	mov    0xf0781cb4,%eax
f010c58e:	89 45 08             	mov    %eax,0x8(%ebp)
		userTrap = 1;
f010c591:	c7 45 e4 01 00 00 00 	movl   $0x1,-0x1c(%ebp)
	}
	if(tf->tf_trapno == IRQ0_Clock)
f010c598:	8b 45 08             	mov    0x8(%ebp),%eax
f010c59b:	8b 40 28             	mov    0x28(%eax),%eax
f010c59e:	83 f8 20             	cmp    $0x20,%eax
f010c5a1:	75 40                	jne    f010c5e3 <trap+0xba>
	{
		//		uint16 cnt0 = kclock_read_cnt0() ;
		//		cprintf("CLOCK INTERRUPT: Counter0 Value = %d\n", cnt0 );

		if (userTrap)
f010c5a3:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f010c5a7:	0f 84 a6 00 00 00    	je     f010c653 <trap+0x12a>
		{
			assert(curenv);
f010c5ad:	a1 b4 1c 78 f0       	mov    0xf0781cb4,%eax
f010c5b2:	85 c0                	test   %eax,%eax
f010c5b4:	75 19                	jne    f010c5cf <trap+0xa6>
f010c5b6:	68 ff 75 13 f0       	push   $0xf01375ff
f010c5bb:	68 06 76 13 f0       	push   $0xf0137606
f010c5c0:	68 12 01 00 00       	push   $0x112
f010c5c5:	68 b3 75 13 f0       	push   $0xf01375b3
f010c5ca:	e8 36 3c ff ff       	call   f0100205 <_panic>
			curenv->nClocks++ ;
f010c5cf:	a1 b4 1c 78 f0       	mov    0xf0781cb4,%eax
f010c5d4:	8b 90 a4 05 00 00    	mov    0x5a4(%eax),%edx
f010c5da:	42                   	inc    %edx
f010c5db:	89 90 a4 05 00 00    	mov    %edx,0x5a4(%eax)
f010c5e1:	eb 70                	jmp    f010c653 <trap+0x12a>
		}
	}
	else if (tf->tf_trapno == T_PGFLT){
f010c5e3:	8b 45 08             	mov    0x8(%ebp),%eax
f010c5e6:	8b 40 28             	mov    0x28(%eax),%eax
f010c5e9:	83 f8 0e             	cmp    $0xe,%eax
f010c5ec:	75 65                	jne    f010c653 <trap+0x12a>
		//2016: Bypass the faulted instruction
		if (bypassInstrLength != 0){
f010c5ee:	a0 68 25 78 f0       	mov    0xf0782568,%al
f010c5f3:	84 c0                	test   %al,%al
f010c5f5:	74 5c                	je     f010c653 <trap+0x12a>
			if (userTrap){
f010c5f7:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f010c5fb:	74 2c                	je     f010c629 <trap+0x100>
				curenv->env_tf.tf_eip = (uint32*)((uint32)(curenv->env_tf.tf_eip) + bypassInstrLength);
f010c5fd:	a1 b4 1c 78 f0       	mov    0xf0781cb4,%eax
f010c602:	8b 15 b4 1c 78 f0    	mov    0xf0781cb4,%edx
f010c608:	8b 52 30             	mov    0x30(%edx),%edx
f010c60b:	89 d1                	mov    %edx,%ecx
f010c60d:	8a 15 68 25 78 f0    	mov    0xf0782568,%dl
f010c613:	0f b6 d2             	movzbl %dl,%edx
f010c616:	01 ca                	add    %ecx,%edx
f010c618:	89 50 30             	mov    %edx,0x30(%eax)
				env_run(curenv);
f010c61b:	a1 b4 1c 78 f0       	mov    0xf0781cb4,%eax
f010c620:	83 ec 0c             	sub    $0xc,%esp
f010c623:	50                   	push   %eax
f010c624:	e8 43 d4 ff ff       	call   f0109a6c <env_run>
			}
			else{
				tf->tf_eip = (uint32*)((uint32)(tf->tf_eip) + bypassInstrLength);
f010c629:	8b 45 08             	mov    0x8(%ebp),%eax
f010c62c:	8b 40 30             	mov    0x30(%eax),%eax
f010c62f:	89 c2                	mov    %eax,%edx
f010c631:	a0 68 25 78 f0       	mov    0xf0782568,%al
f010c636:	0f b6 c0             	movzbl %al,%eax
f010c639:	01 d0                	add    %edx,%eax
f010c63b:	89 c2                	mov    %eax,%edx
f010c63d:	8b 45 08             	mov    0x8(%ebp),%eax
f010c640:	89 50 30             	mov    %edx,0x30(%eax)
				kclock_resume();
f010c643:	e8 77 7b ff ff       	call   f01041bf <kclock_resume>
				env_pop_tf(tf);
f010c648:	83 ec 0c             	sub    $0xc,%esp
f010c64b:	ff 75 08             	pushl  0x8(%ebp)
f010c64e:	e8 7c d5 ff ff       	call   f0109bcf <env_pop_tf>
			}
		}
	}
	trap_dispatch(tf);
f010c653:	83 ec 0c             	sub    $0xc,%esp
f010c656:	ff 75 08             	pushl  0x8(%ebp)
f010c659:	e8 cb fd ff ff       	call   f010c429 <trap_dispatch>
f010c65e:	83 c4 10             	add    $0x10,%esp
	if (userTrap)
f010c661:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f010c665:	74 3d                	je     f010c6a4 <trap+0x17b>
	{
		assert(curenv && curenv->env_status == ENV_RUNNABLE);
f010c667:	a1 b4 1c 78 f0       	mov    0xf0781cb4,%eax
f010c66c:	85 c0                	test   %eax,%eax
f010c66e:	74 0d                	je     f010c67d <trap+0x154>
f010c670:	a1 b4 1c 78 f0       	mov    0xf0781cb4,%eax
f010c675:	8b 40 54             	mov    0x54(%eax),%eax
f010c678:	83 f8 02             	cmp    $0x2,%eax
f010c67b:	74 19                	je     f010c696 <trap+0x16d>
f010c67d:	68 1c 76 13 f0       	push   $0xf013761c
f010c682:	68 06 76 13 f0       	push   $0xf0137606
f010c687:	68 27 01 00 00       	push   $0x127
f010c68c:	68 b3 75 13 f0       	push   $0xf01375b3
f010c691:	e8 6f 3b ff ff       	call   f0100205 <_panic>
		env_run(curenv);
f010c696:	a1 b4 1c 78 f0       	mov    0xf0781cb4,%eax
f010c69b:	83 ec 0c             	sub    $0xc,%esp
f010c69e:	50                   	push   %eax
f010c69f:	e8 c8 d3 ff ff       	call   f0109a6c <env_run>
	/* 2019
	 * If trap from kernel, then return to the called kernel function using the passed param "tf" not the user one that's stored in curenv
	 */
	else
	{
		env_pop_tf((tf));
f010c6a4:	83 ec 0c             	sub    $0xc,%esp
f010c6a7:	ff 75 08             	pushl  0x8(%ebp)
f010c6aa:	e8 20 d5 ff ff       	call   f0109bcf <env_pop_tf>

f010c6af <fault_handler>:

/*2022*/
uint32 last_fault_va = 0;
int8 num_repeated_fault  = 0;
void fault_handler(struct Trapframe *tf)
{
f010c6af:	55                   	push   %ebp
f010c6b0:	89 e5                	mov    %esp,%ebp
f010c6b2:	83 ec 28             	sub    $0x28,%esp
	int userTrap = 0;
f010c6b5:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	if ((tf->tf_cs & 3) == 3) {
f010c6bc:	8b 45 08             	mov    0x8(%ebp),%eax
f010c6bf:	8b 40 34             	mov    0x34(%eax),%eax
f010c6c2:	0f b7 c0             	movzwl %ax,%eax
f010c6c5:	83 e0 03             	and    $0x3,%eax
f010c6c8:	83 f8 03             	cmp    $0x3,%eax
f010c6cb:	75 07                	jne    f010c6d4 <fault_handler+0x25>
		userTrap = 1;
f010c6cd:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)

static __inline uint32
rcr2(void)
{
	uint32 val;
	__asm __volatile("movl %%cr2,%0" : "=r" (val));
f010c6d4:	0f 20 d0             	mov    %cr2,%eax
f010c6d7:	89 45 e0             	mov    %eax,-0x20(%ebp)
	return val;
f010c6da:	8b 45 e0             	mov    -0x20(%ebp),%eax
	}
	//print_trapframe(tf);
	uint32 fault_va;

	// Read processor's CR2 register to find the faulting address
	fault_va = rcr2();
f010c6dd:	89 45 ec             	mov    %eax,-0x14(%ebp)
	/******************************************************/
	/*2022*///If same fault va for 3 times, then panic
	if (last_fault_va == fault_va)
f010c6e0:	a1 e0 24 78 f0       	mov    0xf07824e0,%eax
f010c6e5:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f010c6e8:	75 2b                	jne    f010c715 <fault_handler+0x66>
	{
		num_repeated_fault++ ;
f010c6ea:	a0 e4 24 78 f0       	mov    0xf07824e4,%al
f010c6ef:	40                   	inc    %eax
f010c6f0:	a2 e4 24 78 f0       	mov    %al,0xf07824e4
		if (num_repeated_fault == 3)
f010c6f5:	a0 e4 24 78 f0       	mov    0xf07824e4,%al
f010c6fa:	3c 03                	cmp    $0x3,%al
f010c6fc:	75 1e                	jne    f010c71c <fault_handler+0x6d>
			panic("Failed to handle fault at va=%x: same va is faulted for 3 successive times\n", fault_va);
f010c6fe:	ff 75 ec             	pushl  -0x14(%ebp)
f010c701:	68 4c 76 13 f0       	push   $0xf013764c
f010c706:	68 47 01 00 00       	push   $0x147
f010c70b:	68 b3 75 13 f0       	push   $0xf01375b3
f010c710:	e8 f0 3a ff ff       	call   f0100205 <_panic>
	}
	else
	{
		num_repeated_fault = 0;
f010c715:	c6 05 e4 24 78 f0 00 	movb   $0x0,0xf07824e4
	}
	last_fault_va = fault_va ;
f010c71c:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010c71f:	a3 e0 24 78 f0       	mov    %eax,0xf07824e0
	/******************************************************/
	//2017: Check stack overflow for Kernel
	if (!userTrap)
f010c724:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010c728:	75 29                	jne    f010c753 <fault_handler+0xa4>
	{
		if (fault_va < KERNEL_STACK_TOP - KERNEL_STACK_SIZE && fault_va >= USER_LIMIT)
f010c72a:	81 7d ec ff 7f bf ef 	cmpl   $0xefbf7fff,-0x14(%ebp)
f010c731:	77 40                	ja     f010c773 <fault_handler+0xc4>
f010c733:	81 7d ec ff ff 7f ef 	cmpl   $0xef7fffff,-0x14(%ebp)
f010c73a:	76 37                	jbe    f010c773 <fault_handler+0xc4>
			panic("Kernel: stack overflow exception!");
f010c73c:	83 ec 04             	sub    $0x4,%esp
f010c73f:	68 98 76 13 f0       	push   $0xf0137698
f010c744:	68 53 01 00 00       	push   $0x153
f010c749:	68 b3 75 13 f0       	push   $0xf01375b3
f010c74e:	e8 b2 3a ff ff       	call   f0100205 <_panic>
	}
	//2017: Check stack underflow for User
	else
	{
		if (fault_va >= USTACKTOP)
f010c753:	81 7d ec ff df bf ee 	cmpl   $0xeebfdfff,-0x14(%ebp)
f010c75a:	76 17                	jbe    f010c773 <fault_handler+0xc4>
			panic("User: stack underflow exception!");
f010c75c:	83 ec 04             	sub    $0x4,%esp
f010c75f:	68 bc 76 13 f0       	push   $0xf01376bc
f010c764:	68 59 01 00 00       	push   $0x159
f010c769:	68 b3 75 13 f0       	push   $0xf01375b3
f010c76e:	e8 92 3a ff ff       	call   f0100205 <_panic>
	}

	//get a pointer to the environment that caused the fault at runtime
	struct Env* faulted_env = curenv;
f010c773:	a1 b4 1c 78 f0       	mov    0xf0781cb4,%eax
f010c778:	89 45 e8             	mov    %eax,-0x18(%ebp)

	//check the faulted address, is it a table or not ?
	//If the directory entry of the faulted address is NOT PRESENT then
	if ( (faulted_env->env_page_directory[PDX(fault_va)] & PERM_PRESENT) != PERM_PRESENT)
f010c77b:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010c77e:	8b 40 5c             	mov    0x5c(%eax),%eax
f010c781:	8b 55 ec             	mov    -0x14(%ebp),%edx
f010c784:	c1 ea 16             	shr    $0x16,%edx
f010c787:	c1 e2 02             	shl    $0x2,%edx
f010c78a:	01 d0                	add    %edx,%eax
f010c78c:	8b 00                	mov    (%eax),%eax
f010c78e:	83 e0 01             	and    $0x1,%eax
f010c791:	85 c0                	test   %eax,%eax
f010c793:	75 28                	jne    f010c7bd <fault_handler+0x10e>
	{
		// we have a table fault =============================================================
		//cprintf("[%s] user TABLE fault va %08x\n", curenv->prog_name, fault_va);
		faulted_env->tableFaultsCounter ++ ;
f010c795:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010c798:	8b 80 38 05 00 00    	mov    0x538(%eax),%eax
f010c79e:	8d 50 01             	lea    0x1(%eax),%edx
f010c7a1:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010c7a4:	89 90 38 05 00 00    	mov    %edx,0x538(%eax)

		table_fault_handler(faulted_env, fault_va);
f010c7aa:	83 ec 08             	sub    $0x8,%esp
f010c7ad:	ff 75 ec             	pushl  -0x14(%ebp)
f010c7b0:	ff 75 e8             	pushl  -0x18(%ebp)
f010c7b3:	e8 70 16 00 00       	call   f010de28 <table_fault_handler>
f010c7b8:	83 c4 10             	add    $0x10,%esp
f010c7bb:	eb 7b                	jmp    f010c838 <fault_handler+0x189>
	}
	else
	{
		/*2022: Check if fault due to Access Rights */
		int perms = pt_get_page_permissions(faulted_env->env_page_directory, fault_va);
f010c7bd:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010c7c0:	8b 40 5c             	mov    0x5c(%eax),%eax
f010c7c3:	83 ec 08             	sub    $0x8,%esp
f010c7c6:	ff 75 ec             	pushl  -0x14(%ebp)
f010c7c9:	50                   	push   %eax
f010c7ca:	e8 92 b4 ff ff       	call   f0107c61 <pt_get_page_permissions>
f010c7cf:	83 c4 10             	add    $0x10,%esp
f010c7d2:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		if (perms & PERM_PRESENT)
f010c7d5:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010c7d8:	83 e0 01             	and    $0x1,%eax
f010c7db:	85 c0                	test   %eax,%eax
f010c7dd:	74 17                	je     f010c7f6 <fault_handler+0x147>
			panic("Page @va=%x is exist! page fault due to violation of ACCESS RIGHTS\n", fault_va) ;
f010c7df:	ff 75 ec             	pushl  -0x14(%ebp)
f010c7e2:	68 e0 76 13 f0       	push   $0xf01376e0
f010c7e7:	68 6e 01 00 00       	push   $0x16e
f010c7ec:	68 b3 75 13 f0       	push   $0xf01375b3
f010c7f1:	e8 0f 3a ff ff       	call   f0100205 <_panic>
		/*============================================================================================*/


		// we have normal page fault =============================================================
		faulted_env->pageFaultsCounter ++ ;
f010c7f6:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010c7f9:	8b 80 34 05 00 00    	mov    0x534(%eax),%eax
f010c7ff:	8d 50 01             	lea    0x1(%eax),%edx
f010c802:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010c805:	89 90 34 05 00 00    	mov    %edx,0x534(%eax)

		//cprintf("[%08s] user PAGE fault va %08x\n", curenv->prog_name, fault_va);
		//cprintf("\nPage working set BEFORE fault handler...\n");
		//env_page_ws_print(curenv);

		if(isBufferingEnabled())
f010c80b:	e8 f6 15 00 00       	call   f010de06 <isBufferingEnabled>
f010c810:	84 c0                	test   %al,%al
f010c812:	74 13                	je     f010c827 <fault_handler+0x178>
		{
			__page_fault_handler_with_buffering(faulted_env, fault_va);
f010c814:	83 ec 08             	sub    $0x8,%esp
f010c817:	ff 75 ec             	pushl  -0x14(%ebp)
f010c81a:	ff 75 e8             	pushl  -0x18(%ebp)
f010c81d:	e8 64 19 00 00       	call   f010e186 <__page_fault_handler_with_buffering>
f010c822:	83 c4 10             	add    $0x10,%esp
f010c825:	eb 11                	jmp    f010c838 <fault_handler+0x189>
		}
		else
		{
			//page_fault_handler(faulted_env, fault_va);
			page_fault_handler(faulted_env, fault_va);
f010c827:	83 ec 08             	sub    $0x8,%esp
f010c82a:	ff 75 ec             	pushl  -0x14(%ebp)
f010c82d:	ff 75 e8             	pushl  -0x18(%ebp)
f010c830:	e8 14 16 00 00       	call   f010de49 <page_fault_handler>
f010c835:	83 c4 10             	add    $0x10,%esp

static __inline void
tlbflush(void)
{
	uint32 cr3;
	__asm __volatile("movl %%cr3,%0" : "=r" (cr3));
f010c838:	0f 20 d8             	mov    %cr3,%eax
f010c83b:	89 45 f0             	mov    %eax,-0x10(%ebp)
	__asm __volatile("movl %0,%%cr3" : : "r" (cr3));
f010c83e:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010c841:	0f 22 d8             	mov    %eax,%cr3
	/*************************************************************/
	//Refresh the TLB cache
	tlbflush();
	/*************************************************************/

}
f010c844:	90                   	nop
f010c845:	c9                   	leave  
f010c846:	c3                   	ret    
f010c847:	90                   	nop

f010c848 <PAGE_FAULT>:

/*
 * Lab 3: Your code here for generating entry points for the different traps.
 */

TRAPHANDLER(PAGE_FAULT, T_PGFLT)
f010c848:	6a 0e                	push   $0xe
f010c84a:	e9 ed 00 00 00       	jmp    f010c93c <_alltraps>
f010c84f:	90                   	nop

f010c850 <SYSCALL_HANDLER>:

TRAPHANDLER_NOEC(SYSCALL_HANDLER, T_SYSCALL)
f010c850:	6a 00                	push   $0x0
f010c852:	6a 30                	push   $0x30
f010c854:	e9 e3 00 00 00       	jmp    f010c93c <_alltraps>
f010c859:	90                   	nop

f010c85a <DBL_FAULT>:

// FOS 2010
//TRAPHANDLER(GP_FAULT, T_GPFLT)
TRAPHANDLER(DBL_FAULT, T_DBLFLT)
f010c85a:	6a 08                	push   $0x8
f010c85c:	e9 db 00 00 00       	jmp    f010c93c <_alltraps>
f010c861:	90                   	nop

f010c862 <ALL_FAULTS0>:

TRAPHANDLER_NOEC(ALL_FAULTS0, T_DIVIDE)//     0		// divide error
f010c862:	6a 00                	push   $0x0
f010c864:	6a 00                	push   $0x0
f010c866:	e9 d1 00 00 00       	jmp    f010c93c <_alltraps>
f010c86b:	90                   	nop

f010c86c <ALL_FAULTS1>:
TRAPHANDLER_NOEC(ALL_FAULTS1, T_DEBUG   )//   1		// debug exception
f010c86c:	6a 00                	push   $0x0
f010c86e:	6a 01                	push   $0x1
f010c870:	e9 c7 00 00 00       	jmp    f010c93c <_alltraps>
f010c875:	90                   	nop

f010c876 <ALL_FAULTS2>:
TRAPHANDLER_NOEC(ALL_FAULTS2,  T_NMI       )// 2		// non-maskable interrupt
f010c876:	6a 00                	push   $0x0
f010c878:	6a 02                	push   $0x2
f010c87a:	e9 bd 00 00 00       	jmp    f010c93c <_alltraps>
f010c87f:	90                   	nop

f010c880 <ALL_FAULTS3>:
TRAPHANDLER_NOEC(ALL_FAULTS3,  T_BRKPT      )//3		// breakpoint
f010c880:	6a 00                	push   $0x0
f010c882:	6a 03                	push   $0x3
f010c884:	e9 b3 00 00 00       	jmp    f010c93c <_alltraps>
f010c889:	90                   	nop

f010c88a <ALL_FAULTS4>:
TRAPHANDLER_NOEC(ALL_FAULTS4,  T_OFLOW      )//4		// overflow
f010c88a:	6a 00                	push   $0x0
f010c88c:	6a 04                	push   $0x4
f010c88e:	e9 a9 00 00 00       	jmp    f010c93c <_alltraps>
f010c893:	90                   	nop

f010c894 <ALL_FAULTS5>:
TRAPHANDLER_NOEC(ALL_FAULTS5,  T_BOUND      )//5		// bounds check
f010c894:	6a 00                	push   $0x0
f010c896:	6a 05                	push   $0x5
f010c898:	e9 9f 00 00 00       	jmp    f010c93c <_alltraps>
f010c89d:	90                   	nop

f010c89e <ALL_FAULTS6>:
TRAPHANDLER_NOEC(ALL_FAULTS6,  T_ILLOP      )//6		// illegal opcode
f010c89e:	6a 00                	push   $0x0
f010c8a0:	6a 06                	push   $0x6
f010c8a2:	e9 95 00 00 00       	jmp    f010c93c <_alltraps>
f010c8a7:	90                   	nop

f010c8a8 <ALL_FAULTS7>:
TRAPHANDLER_NOEC(ALL_FAULTS7,  T_DEVICE     )//7		// device not available
f010c8a8:	6a 00                	push   $0x0
f010c8aa:	6a 07                	push   $0x7
f010c8ac:	e9 8b 00 00 00       	jmp    f010c93c <_alltraps>
f010c8b1:	90                   	nop

f010c8b2 <ALL_FAULTS10>:
//TRAPHANDLER(ALL_FAULTS,  T_DBLFLT     8		// double fault
//TRAPHANDLER_NOEC(ALL_FAULTS,  9   )//9	// reserved (not generated by recent processors)
TRAPHANDLER(ALL_FAULTS10,  T_TSS       )//10		// invalid task switch segment
f010c8b2:	6a 0a                	push   $0xa
f010c8b4:	e9 83 00 00 00       	jmp    f010c93c <_alltraps>
f010c8b9:	90                   	nop

f010c8ba <ALL_FAULTS11>:
TRAPHANDLER(ALL_FAULTS11,  T_SEGNP     )//11		// segment not present
f010c8ba:	6a 0b                	push   $0xb
f010c8bc:	eb 7e                	jmp    f010c93c <_alltraps>

f010c8be <ALL_FAULTS12>:
TRAPHANDLER(ALL_FAULTS12,  T_STACK     )//12		// stack exception
f010c8be:	6a 0c                	push   $0xc
f010c8c0:	eb 7a                	jmp    f010c93c <_alltraps>

f010c8c2 <ALL_FAULTS13>:
TRAPHANDLER(ALL_FAULTS13,  T_GPFLT     )//13		// General protection fault
f010c8c2:	6a 0d                	push   $0xd
f010c8c4:	eb 76                	jmp    f010c93c <_alltraps>

f010c8c6 <ALL_FAULTS16>:
//TRAPHANDLER(ALL_FAULTS,  T_PGFLT     14		// page fault
//TRAPHANDLER(ALL_FAULTS,  15    )	//15 	// reserved
TRAPHANDLER_NOEC(ALL_FAULTS16,  T_FPERR     )//16		// floating point error
f010c8c6:	6a 00                	push   $0x0
f010c8c8:	6a 10                	push   $0x10
f010c8ca:	eb 70                	jmp    f010c93c <_alltraps>

f010c8cc <ALL_FAULTS17>:
TRAPHANDLER(ALL_FAULTS17,  T_ALIGN     )//17		// Alignment check
f010c8cc:	6a 11                	push   $0x11
f010c8ce:	eb 6c                	jmp    f010c93c <_alltraps>

f010c8d0 <ALL_FAULTS18>:
TRAPHANDLER_NOEC(ALL_FAULTS18,  T_MCHK      )//18		// machine check
f010c8d0:	6a 00                	push   $0x0
f010c8d2:	6a 12                	push   $0x12
f010c8d4:	eb 66                	jmp    f010c93c <_alltraps>

f010c8d6 <ALL_FAULTS19>:
TRAPHANDLER_NOEC(ALL_FAULTS19,  19      )//19		// the last one
f010c8d6:	6a 00                	push   $0x0
f010c8d8:	6a 13                	push   $0x13
f010c8da:	eb 60                	jmp    f010c93c <_alltraps>

f010c8dc <ALL_FAULTS32>:

TRAPHANDLER_NOEC(ALL_FAULTS32,		IRQ0_Clock      )//32 the first IRQ
f010c8dc:	6a 00                	push   $0x0
f010c8de:	6a 20                	push   $0x20
f010c8e0:	eb 5a                	jmp    f010c93c <_alltraps>

f010c8e2 <ALL_FAULTS33>:
TRAPHANDLER_NOEC(ALL_FAULTS33,		33		)//33
f010c8e2:	6a 00                	push   $0x0
f010c8e4:	6a 21                	push   $0x21
f010c8e6:	eb 54                	jmp    f010c93c <_alltraps>

f010c8e8 <ALL_FAULTS34>:
TRAPHANDLER_NOEC(ALL_FAULTS34,      34		)//34
f010c8e8:	6a 00                	push   $0x0
f010c8ea:	6a 22                	push   $0x22
f010c8ec:	eb 4e                	jmp    f010c93c <_alltraps>

f010c8ee <ALL_FAULTS35>:
TRAPHANDLER_NOEC(ALL_FAULTS35,		35		)//35
f010c8ee:	6a 00                	push   $0x0
f010c8f0:	6a 23                	push   $0x23
f010c8f2:	eb 48                	jmp    f010c93c <_alltraps>

f010c8f4 <ALL_FAULTS36>:
TRAPHANDLER_NOEC(ALL_FAULTS36,      36      )//36
f010c8f4:	6a 00                	push   $0x0
f010c8f6:	6a 24                	push   $0x24
f010c8f8:	eb 42                	jmp    f010c93c <_alltraps>

f010c8fa <ALL_FAULTS37>:
TRAPHANDLER_NOEC(ALL_FAULTS37,      37      )//37
f010c8fa:	6a 00                	push   $0x0
f010c8fc:	6a 25                	push   $0x25
f010c8fe:	eb 3c                	jmp    f010c93c <_alltraps>

f010c900 <ALL_FAULTS38>:
TRAPHANDLER_NOEC(ALL_FAULTS38,      38		)//38
f010c900:	6a 00                	push   $0x0
f010c902:	6a 26                	push   $0x26
f010c904:	eb 36                	jmp    f010c93c <_alltraps>

f010c906 <ALL_FAULTS39>:
TRAPHANDLER_NOEC(ALL_FAULTS39,      39		)//39
f010c906:	6a 00                	push   $0x0
f010c908:	6a 27                	push   $0x27
f010c90a:	eb 30                	jmp    f010c93c <_alltraps>

f010c90c <ALL_FAULTS40>:
TRAPHANDLER_NOEC(ALL_FAULTS40,      40		)//40
f010c90c:	6a 00                	push   $0x0
f010c90e:	6a 28                	push   $0x28
f010c910:	eb 2a                	jmp    f010c93c <_alltraps>

f010c912 <ALL_FAULTS41>:
TRAPHANDLER_NOEC(ALL_FAULTS41,      41		)//41
f010c912:	6a 00                	push   $0x0
f010c914:	6a 29                	push   $0x29
f010c916:	eb 24                	jmp    f010c93c <_alltraps>

f010c918 <ALL_FAULTS42>:
TRAPHANDLER_NOEC(ALL_FAULTS42,      42		)//42
f010c918:	6a 00                	push   $0x0
f010c91a:	6a 2a                	push   $0x2a
f010c91c:	eb 1e                	jmp    f010c93c <_alltraps>

f010c91e <ALL_FAULTS43>:
TRAPHANDLER_NOEC(ALL_FAULTS43,      43		)//43
f010c91e:	6a 00                	push   $0x0
f010c920:	6a 2b                	push   $0x2b
f010c922:	eb 18                	jmp    f010c93c <_alltraps>

f010c924 <ALL_FAULTS44>:
TRAPHANDLER_NOEC(ALL_FAULTS44,      44		)//44
f010c924:	6a 00                	push   $0x0
f010c926:	6a 2c                	push   $0x2c
f010c928:	eb 12                	jmp    f010c93c <_alltraps>

f010c92a <ALL_FAULTS45>:
TRAPHANDLER_NOEC(ALL_FAULTS45,      45		)//45
f010c92a:	6a 00                	push   $0x0
f010c92c:	6a 2d                	push   $0x2d
f010c92e:	eb 0c                	jmp    f010c93c <_alltraps>

f010c930 <ALL_FAULTS46>:
TRAPHANDLER_NOEC(ALL_FAULTS46,      46		)//46
f010c930:	6a 00                	push   $0x0
f010c932:	6a 2e                	push   $0x2e
f010c934:	eb 06                	jmp    f010c93c <_alltraps>

f010c936 <ALL_FAULTS47>:
TRAPHANDLER_NOEC(ALL_FAULTS47,      47		)//47 the last IRQ
f010c936:	6a 00                	push   $0x0
f010c938:	6a 2f                	push   $0x2f
f010c93a:	eb 00                	jmp    f010c93c <_alltraps>

f010c93c <_alltraps>:
/*
 * Lab 3: Your code here for _alltraps
 */
_alltraps:

push %ds
f010c93c:	1e                   	push   %ds
push %es
f010c93d:	06                   	push   %es
pushal
f010c93e:	60                   	pusha  

mov $(GD_KD), %ax
f010c93f:	66 b8 10 00          	mov    $0x10,%ax
mov %ax,%ds
f010c943:	8e d8                	mov    %eax,%ds
mov %ax,%es
f010c945:	8e c0                	mov    %eax,%es

push %esp
f010c947:	54                   	push   %esp

call trap
f010c948:	e8 dc fb ff ff       	call   f010c529 <trap>

pop %ecx /* poping the pointer to the tf from the stack so that the stack top is at
f010c94d:	59                   	pop    %ecx
			# the beginning values of the registers pushed by pusha*/
popal
f010c94e:	61                   	popa   
pop %es
f010c94f:	07                   	pop    %es
pop %ds
f010c950:	1f                   	pop    %ds

/*skipping the trap_no and the error code so that the stack top is at the old eip value*/
add $(8),%esp
f010c951:	83 c4 08             	add    $0x8,%esp

iret
f010c954:	cf                   	iret   

f010c955 <to_frame_number>:
struct FrameInfo *get_frame_info(uint32 *ptr_page_directory, uint32 virtual_address, uint32 **ptr_page_table);
void decrement_references(struct FrameInfo* ptr_frame_info);
void initialize_frame_info(struct FrameInfo *ptr_frame_info);

static inline uint32 to_frame_number(struct FrameInfo *ptr_frame_info)
{
f010c955:	55                   	push   %ebp
f010c956:	89 e5                	mov    %esp,%ebp
	return ptr_frame_info - frames_info;
f010c958:	8b 45 08             	mov    0x8(%ebp),%eax
f010c95b:	8b 15 14 26 78 f0    	mov    0xf0782614,%edx
f010c961:	29 d0                	sub    %edx,%eax
f010c963:	c1 f8 03             	sar    $0x3,%eax
f010c966:	89 c2                	mov    %eax,%edx
f010c968:	89 d0                	mov    %edx,%eax
f010c96a:	c1 e0 02             	shl    $0x2,%eax
f010c96d:	01 d0                	add    %edx,%eax
f010c96f:	c1 e0 02             	shl    $0x2,%eax
f010c972:	01 d0                	add    %edx,%eax
f010c974:	c1 e0 02             	shl    $0x2,%eax
f010c977:	01 d0                	add    %edx,%eax
f010c979:	89 c1                	mov    %eax,%ecx
f010c97b:	c1 e1 08             	shl    $0x8,%ecx
f010c97e:	01 c8                	add    %ecx,%eax
f010c980:	89 c1                	mov    %eax,%ecx
f010c982:	c1 e1 10             	shl    $0x10,%ecx
f010c985:	01 c8                	add    %ecx,%eax
f010c987:	01 c0                	add    %eax,%eax
f010c989:	01 d0                	add    %edx,%eax
}
f010c98b:	5d                   	pop    %ebp
f010c98c:	c3                   	ret    

f010c98d <to_physical_address>:

static inline uint32 to_physical_address(struct FrameInfo *ptr_frame_info)
{
f010c98d:	55                   	push   %ebp
f010c98e:	89 e5                	mov    %esp,%ebp
	return to_frame_number(ptr_frame_info) << PGSHIFT;
f010c990:	ff 75 08             	pushl  0x8(%ebp)
f010c993:	e8 bd ff ff ff       	call   f010c955 <to_frame_number>
f010c998:	83 c4 04             	add    $0x4,%esp
f010c99b:	c1 e0 0c             	shl    $0xc,%eax
}
f010c99e:	c9                   	leave  
f010c99f:	c3                   	ret    

f010c9a0 <sys_cputs>:

// Print a string to the system console.
// The string is exactly 'len' characters long.
// Destroys the environment on memory errors.
static void sys_cputs(const char *s, uint32 len, uint8 printProgName)
{
f010c9a0:	55                   	push   %ebp
f010c9a1:	89 e5                	mov    %esp,%ebp
f010c9a3:	83 ec 18             	sub    $0x18,%esp
f010c9a6:	8b 45 10             	mov    0x10(%ebp),%eax
f010c9a9:	88 45 f4             	mov    %al,-0xc(%ebp)
	// Destroy the environment if not.

	// LAB 3: Your code here.

	// Print the string supplied by the user.
	if (printProgName)
f010c9ac:	80 7d f4 00          	cmpb   $0x0,-0xc(%ebp)
f010c9b0:	74 26                	je     f010c9d8 <sys_cputs+0x38>
		cprintf("[%s %d] ",curenv->prog_name, curenv->env_id);
f010c9b2:	a1 b4 1c 78 f0       	mov    0xf0781cb4,%eax
f010c9b7:	8b 40 4c             	mov    0x4c(%eax),%eax
f010c9ba:	8b 15 b4 1c 78 f0    	mov    0xf0781cb4,%edx
f010c9c0:	81 c2 5c 05 00 00    	add    $0x55c,%edx
f010c9c6:	83 ec 04             	sub    $0x4,%esp
f010c9c9:	50                   	push   %eax
f010c9ca:	52                   	push   %edx
f010c9cb:	68 d0 78 13 f0       	push   $0xf01378d0
f010c9d0:	e8 39 43 ff ff       	call   f0100d0e <cprintf>
f010c9d5:	83 c4 10             	add    $0x10,%esp
	cprintf("%.*s",len, s);
f010c9d8:	83 ec 04             	sub    $0x4,%esp
f010c9db:	ff 75 08             	pushl  0x8(%ebp)
f010c9de:	ff 75 0c             	pushl  0xc(%ebp)
f010c9e1:	68 d9 78 13 f0       	push   $0xf01378d9
f010c9e6:	e8 23 43 ff ff       	call   f0100d0e <cprintf>
f010c9eb:	83 c4 10             	add    $0x10,%esp
	//cprintf("%.*s", len, s);
}
f010c9ee:	90                   	nop
f010c9ef:	c9                   	leave  
f010c9f0:	c3                   	ret    

f010c9f1 <sys_cputc>:


// Print a char to the system console.
static void sys_cputc(const char c)
{
f010c9f1:	55                   	push   %ebp
f010c9f2:	89 e5                	mov    %esp,%ebp
f010c9f4:	83 ec 18             	sub    $0x18,%esp
f010c9f7:	8b 45 08             	mov    0x8(%ebp),%eax
f010c9fa:	88 45 f4             	mov    %al,-0xc(%ebp)
	// Print the char supplied by the user.
	cprintf("%c",c);
f010c9fd:	0f be 45 f4          	movsbl -0xc(%ebp),%eax
f010ca01:	83 ec 08             	sub    $0x8,%esp
f010ca04:	50                   	push   %eax
f010ca05:	68 de 78 13 f0       	push   $0xf01378de
f010ca0a:	e8 ff 42 ff ff       	call   f0100d0e <cprintf>
f010ca0f:	83 c4 10             	add    $0x10,%esp
}
f010ca12:	90                   	nop
f010ca13:	c9                   	leave  
f010ca14:	c3                   	ret    

f010ca15 <sys_cgetc>:

// Read a character from the system console.
// Returns the character.
static int
sys_cgetc(void)
{
f010ca15:	55                   	push   %ebp
f010ca16:	89 e5                	mov    %esp,%ebp
f010ca18:	83 ec 18             	sub    $0x18,%esp
	//while ((c = cons_getc()) == 0)
	//2013: instead of busywaiting inside kernel code , we moved the waiting to user code,
	// this allows any other running user programs to run beacause the clock interrupt works in user mode
	// (the kernel system call by default disables the interrupts, so any loops inside the kernel while
	// handling an interrupt will cause the clock interrupt to be disabled)
	c = cons_getc2();
f010ca1b:	e8 28 41 ff ff       	call   f0100b48 <cons_getc2>
f010ca20:	89 45 f4             	mov    %eax,-0xc(%ebp)
	/* do nothing */;

	return c;
f010ca23:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f010ca26:	c9                   	leave  
f010ca27:	c3                   	ret    

f010ca28 <__sys_allocate_page>:
//	E_INVAL if va >= UTOP, or va is not page-aligned.
//	E_INVAL if perm is inappropriate (see above).
//	E_NO_MEM if there's no memory to allocate the new page,
//		or to allocate any necessary page tables.
static int __sys_allocate_page(void *va, int perm)
{
f010ca28:	55                   	push   %ebp
f010ca29:	89 e5                	mov    %esp,%ebp
f010ca2b:	83 ec 18             	sub    $0x18,%esp
	//   parameters for correctness.
	//   If page_insert() fails, remember to free the page you
	//   allocated!

	int r;
	struct Env *e = curenv;
f010ca2e:	a1 b4 1c 78 f0       	mov    0xf0781cb4,%eax
f010ca33:	89 45 f4             	mov    %eax,-0xc(%ebp)

	//if ((r = envid2env(envid, &e, 1)) < 0)
	//return r;

	struct FrameInfo *ptr_frame_info ;
	r = allocate_frame(&ptr_frame_info) ;
f010ca36:	83 ec 0c             	sub    $0xc,%esp
f010ca39:	8d 45 e8             	lea    -0x18(%ebp),%eax
f010ca3c:	50                   	push   %eax
f010ca3d:	e8 b0 9e ff ff       	call   f01068f2 <allocate_frame>
f010ca42:	83 c4 10             	add    $0x10,%esp
f010ca45:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (r == E_NO_MEM)
f010ca48:	83 7d f0 fc          	cmpl   $0xfffffffc,-0x10(%ebp)
f010ca4c:	75 08                	jne    f010ca56 <__sys_allocate_page+0x2e>
		return r ;
f010ca4e:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010ca51:	e9 e9 00 00 00       	jmp    f010cb3f <__sys_allocate_page+0x117>

	//check virtual address to be paged_aligned and < USER_TOP
	if ((uint32)va >= USER_TOP || (uint32)va % PAGE_SIZE != 0)
f010ca56:	8b 45 08             	mov    0x8(%ebp),%eax
f010ca59:	3d ff ff bf ee       	cmp    $0xeebfffff,%eax
f010ca5e:	77 0c                	ja     f010ca6c <__sys_allocate_page+0x44>
f010ca60:	8b 45 08             	mov    0x8(%ebp),%eax
f010ca63:	25 ff 0f 00 00       	and    $0xfff,%eax
f010ca68:	85 c0                	test   %eax,%eax
f010ca6a:	74 0a                	je     f010ca76 <__sys_allocate_page+0x4e>
		return E_INVAL;
f010ca6c:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
f010ca71:	e9 c9 00 00 00       	jmp    f010cb3f <__sys_allocate_page+0x117>

	//check permissions to be appropriate
	if ((perm & (~PERM_AVAILABLE & ~PERM_WRITEABLE)) != (PERM_USER))
f010ca76:	8b 45 0c             	mov    0xc(%ebp),%eax
f010ca79:	25 fd f1 ff ff       	and    $0xfffff1fd,%eax
f010ca7e:	83 f8 04             	cmp    $0x4,%eax
f010ca81:	74 0a                	je     f010ca8d <__sys_allocate_page+0x65>
		return E_INVAL;
f010ca83:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
f010ca88:	e9 b2 00 00 00       	jmp    f010cb3f <__sys_allocate_page+0x117>


	uint32 physical_address = to_physical_address(ptr_frame_info) ;
f010ca8d:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010ca90:	83 ec 0c             	sub    $0xc,%esp
f010ca93:	50                   	push   %eax
f010ca94:	e8 f4 fe ff ff       	call   f010c98d <to_physical_address>
f010ca99:	83 c4 10             	add    $0x10,%esp
f010ca9c:	89 45 ec             	mov    %eax,-0x14(%ebp)
#if USE_KHEAP
	{
		//FIX: we should implement a better solution for this, but for now
		//		we are using an unsed VA in the invalid area of kernel at 0xef800000 (the current USER_LIMIT)
		//		to do temp initialization of a frame.
		map_frame(e->env_page_directory, ptr_frame_info, USER_LIMIT, PERM_WRITEABLE);
f010ca9f:	8b 55 e8             	mov    -0x18(%ebp),%edx
f010caa2:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010caa5:	8b 40 5c             	mov    0x5c(%eax),%eax
f010caa8:	6a 02                	push   $0x2
f010caaa:	68 00 00 80 ef       	push   $0xef800000
f010caaf:	52                   	push   %edx
f010cab0:	50                   	push   %eax
f010cab1:	e8 8b a2 ff ff       	call   f0106d41 <map_frame>
f010cab6:	83 c4 10             	add    $0x10,%esp
		memset((void*)USER_LIMIT, 0, PAGE_SIZE);
f010cab9:	83 ec 04             	sub    $0x4,%esp
f010cabc:	68 00 10 00 00       	push   $0x1000
f010cac1:	6a 00                	push   $0x0
f010cac3:	68 00 00 80 ef       	push   $0xef800000
f010cac8:	e8 13 49 02 00       	call   f01313e0 <memset>
f010cacd:	83 c4 10             	add    $0x10,%esp

		// Temporarily increase the references to prevent unmap_frame from removing the frame
		// we just got from allocate_frame, we will use it for the new page
		ptr_frame_info->references += 1;
f010cad0:	8b 55 e8             	mov    -0x18(%ebp),%edx
f010cad3:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010cad6:	8b 40 08             	mov    0x8(%eax),%eax
f010cad9:	40                   	inc    %eax
f010cada:	66 89 42 08          	mov    %ax,0x8(%edx)
		unmap_frame(e->env_page_directory, USER_LIMIT);
f010cade:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010cae1:	8b 40 5c             	mov    0x5c(%eax),%eax
f010cae4:	83 ec 08             	sub    $0x8,%esp
f010cae7:	68 00 00 80 ef       	push   $0xef800000
f010caec:	50                   	push   %eax
f010caed:	e8 84 a3 ff ff       	call   f0106e76 <unmap_frame>
f010caf2:	83 c4 10             	add    $0x10,%esp

		//return it to the original status
		ptr_frame_info->references -= 1;
f010caf5:	8b 55 e8             	mov    -0x18(%ebp),%edx
f010caf8:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010cafb:	8b 40 08             	mov    0x8(%eax),%eax
f010cafe:	48                   	dec    %eax
f010caff:	66 89 42 08          	mov    %ax,0x8(%edx)
#else
	{
		memset(STATIC_KERNEL_VIRTUAL_ADDRESS(physical_address), 0, PAGE_SIZE);
	}
#endif
	r = map_frame(e->env_page_directory, ptr_frame_info, (uint32)va, perm) ;
f010cb03:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010cb06:	8b 55 e8             	mov    -0x18(%ebp),%edx
f010cb09:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010cb0c:	8b 40 5c             	mov    0x5c(%eax),%eax
f010cb0f:	ff 75 0c             	pushl  0xc(%ebp)
f010cb12:	51                   	push   %ecx
f010cb13:	52                   	push   %edx
f010cb14:	50                   	push   %eax
f010cb15:	e8 27 a2 ff ff       	call   f0106d41 <map_frame>
f010cb1a:	83 c4 10             	add    $0x10,%esp
f010cb1d:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (r == E_NO_MEM)
f010cb20:	83 7d f0 fc          	cmpl   $0xfffffffc,-0x10(%ebp)
f010cb24:	75 14                	jne    f010cb3a <__sys_allocate_page+0x112>
	{
		decrement_references(ptr_frame_info);
f010cb26:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010cb29:	83 ec 0c             	sub    $0xc,%esp
f010cb2c:	50                   	push   %eax
f010cb2d:	e8 4f 9f ff ff       	call   f0106a81 <decrement_references>
f010cb32:	83 c4 10             	add    $0x10,%esp
		return r;
f010cb35:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010cb38:	eb 05                	jmp    f010cb3f <__sys_allocate_page+0x117>
	}
	return 0 ;
f010cb3a:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010cb3f:	c9                   	leave  
f010cb40:	c3                   	ret    

f010cb41 <__sys_map_frame>:
//	-E_INVAL if (perm & PTE_W), but srcva is read-only in srcenvid's
//		address space.
//	-E_NO_MEM if there's no memory to allocate the new page,
//		or to allocate any necessary page tables.
static int __sys_map_frame(int32 srcenvid, void *srcva, int32 dstenvid, void *dstva, int perm)
{
f010cb41:	55                   	push   %ebp
f010cb42:	89 e5                	mov    %esp,%ebp
f010cb44:	83 ec 08             	sub    $0x8,%esp
	//   parameters for correctness.
	//   Use the third argument to page_lookup() to
	//   check the current permissions on the page.

	// LAB 4: Your code here.
	panic("sys_map_frame not implemented");
f010cb47:	83 ec 04             	sub    $0x4,%esp
f010cb4a:	68 e1 78 13 f0       	push   $0xf01378e1
f010cb4f:	68 b3 00 00 00       	push   $0xb3
f010cb54:	68 ff 78 13 f0       	push   $0xf01378ff
f010cb59:	e8 a7 36 ff ff       	call   f0100205 <_panic>

f010cb5e <__sys_unmap_frame>:
// Return 0 on success, < 0 on error.  Errors are:
//	-E_BAD_ENV if environment envid doesn't currently exist,
//		or the caller doesn't have permission to change envid.
//	-E_INVAL if va >= UTOP, or va is not page-aligned.
static int __sys_unmap_frame(int32 envid, void *va)
{
f010cb5e:	55                   	push   %ebp
f010cb5f:	89 e5                	mov    %esp,%ebp
f010cb61:	83 ec 08             	sub    $0x8,%esp
	// Hint: This function is a wrapper around page_remove().

	// LAB 4: Your code here.
	panic("sys_page_unmap not implemented");
f010cb64:	83 ec 04             	sub    $0x4,%esp
f010cb67:	68 14 79 13 f0       	push   $0xf0137914
f010cb6c:	68 c3 00 00 00       	push   $0xc3
f010cb71:	68 ff 78 13 f0       	push   $0xf01378ff
f010cb76:	e8 8a 36 ff ff       	call   f0100205 <_panic>

f010cb7b <sys_calculate_required_frames>:
}

uint32 sys_calculate_required_frames(uint32 start_virtual_address, uint32 size)
{
f010cb7b:	55                   	push   %ebp
f010cb7c:	89 e5                	mov    %esp,%ebp
f010cb7e:	83 ec 08             	sub    $0x8,%esp
	return calculate_required_frames(curenv->env_page_directory, start_virtual_address, size);
f010cb81:	a1 b4 1c 78 f0       	mov    0xf0781cb4,%eax
f010cb86:	8b 40 5c             	mov    0x5c(%eax),%eax
f010cb89:	83 ec 04             	sub    $0x4,%esp
f010cb8c:	ff 75 0c             	pushl  0xc(%ebp)
f010cb8f:	ff 75 08             	pushl  0x8(%ebp)
f010cb92:	50                   	push   %eax
f010cb93:	e8 a8 c1 ff ff       	call   f0108d40 <calculate_required_frames>
f010cb98:	83 c4 10             	add    $0x10,%esp
}
f010cb9b:	c9                   	leave  
f010cb9c:	c3                   	ret    

f010cb9d <sys_calculate_free_frames>:

uint32 sys_calculate_free_frames()
{
f010cb9d:	55                   	push   %ebp
f010cb9e:	89 e5                	mov    %esp,%ebp
f010cba0:	83 ec 18             	sub    $0x18,%esp
	struct freeFramesCounters counters = calculate_available_frames();
f010cba3:	8d 45 ec             	lea    -0x14(%ebp),%eax
f010cba6:	83 ec 0c             	sub    $0xc,%esp
f010cba9:	50                   	push   %eax
f010cbaa:	e8 2c a4 ff ff       	call   f0106fdb <calculate_available_frames>
f010cbaf:	83 c4 0c             	add    $0xc,%esp
	//	cprintf("Free Frames = %d : Buffered = %d, Not Buffered = %d\n", counters.freeBuffered + counters.freeNotBuffered, counters.freeBuffered ,counters.freeNotBuffered);
	return counters.freeBuffered + counters.freeNotBuffered;
f010cbb2:	8b 55 ec             	mov    -0x14(%ebp),%edx
f010cbb5:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010cbb8:	01 d0                	add    %edx,%eax
}
f010cbba:	c9                   	leave  
f010cbbb:	c3                   	ret    

f010cbbc <sys_calculate_modified_frames>:
uint32 sys_calculate_modified_frames()
{
f010cbbc:	55                   	push   %ebp
f010cbbd:	89 e5                	mov    %esp,%ebp
f010cbbf:	83 ec 18             	sub    $0x18,%esp
	struct freeFramesCounters counters = calculate_available_frames();
f010cbc2:	8d 45 ec             	lea    -0x14(%ebp),%eax
f010cbc5:	83 ec 0c             	sub    $0xc,%esp
f010cbc8:	50                   	push   %eax
f010cbc9:	e8 0d a4 ff ff       	call   f0106fdb <calculate_available_frames>
f010cbce:	83 c4 0c             	add    $0xc,%esp
	//	cprintf("================ Modified Frames = %d\n", counters.modified) ;
	return counters.modified;
f010cbd1:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f010cbd4:	c9                   	leave  
f010cbd5:	c3                   	ret    

f010cbd6 <sys_calculate_notmod_frames>:

uint32 sys_calculate_notmod_frames()
{
f010cbd6:	55                   	push   %ebp
f010cbd7:	89 e5                	mov    %esp,%ebp
f010cbd9:	83 ec 18             	sub    $0x18,%esp
	struct freeFramesCounters counters = calculate_available_frames();
f010cbdc:	8d 45 ec             	lea    -0x14(%ebp),%eax
f010cbdf:	83 ec 0c             	sub    $0xc,%esp
f010cbe2:	50                   	push   %eax
f010cbe3:	e8 f3 a3 ff ff       	call   f0106fdb <calculate_available_frames>
f010cbe8:	83 c4 0c             	add    $0xc,%esp
	//	cprintf("================ Not Modified Frames = %d\n", counters.freeBuffered) ;
	return counters.freeBuffered;
f010cbeb:	8b 45 ec             	mov    -0x14(%ebp),%eax
}
f010cbee:	c9                   	leave  
f010cbef:	c3                   	ret    

f010cbf0 <sys_calculate_pages_tobe_removed_ready_exit>:

int sys_calculate_pages_tobe_removed_ready_exit(uint32 WS_or_MEMORY_flag)
{
f010cbf0:	55                   	push   %ebp
f010cbf1:	89 e5                	mov    %esp,%ebp
f010cbf3:	83 ec 08             	sub    $0x8,%esp
	return calc_no_pages_tobe_removed_from_ready_exit_queues(WS_or_MEMORY_flag);
f010cbf6:	83 ec 0c             	sub    $0xc,%esp
f010cbf9:	ff 75 08             	pushl  0x8(%ebp)
f010cbfc:	e8 fc 34 02 00       	call   f01300fd <calc_no_pages_tobe_removed_from_ready_exit_queues>
f010cc01:	83 c4 10             	add    $0x10,%esp
}
f010cc04:	c9                   	leave  
f010cc05:	c3                   	ret    

f010cc06 <sys_scarce_memory>:

void sys_scarce_memory(void)
{
f010cc06:	55                   	push   %ebp
f010cc07:	89 e5                	mov    %esp,%ebp
f010cc09:	83 ec 08             	sub    $0x8,%esp
	scarce_memory();
f010cc0c:	e8 44 34 02 00       	call   f0130055 <scarce_memory>
}
f010cc11:	90                   	nop
f010cc12:	c9                   	leave  
f010cc13:	c3                   	ret    

f010cc14 <sys_clearFFL>:

void sys_clearFFL()
{
f010cc14:	55                   	push   %ebp
f010cc15:	89 e5                	mov    %esp,%ebp
f010cc17:	83 ec 18             	sub    $0x18,%esp
	int size = LIST_SIZE(&free_frame_list) ;
f010cc1a:	a1 e4 25 78 f0       	mov    0xf07825e4,%eax
f010cc1f:	89 45 f0             	mov    %eax,-0x10(%ebp)
	int i = 0 ;
f010cc22:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	struct FrameInfo* ptr_tmp_FI ;
	for (; i < size ; i++)
f010cc29:	eb 12                	jmp    f010cc3d <sys_clearFFL+0x29>
	{
		allocate_frame(&ptr_tmp_FI) ;
f010cc2b:	83 ec 0c             	sub    $0xc,%esp
f010cc2e:	8d 45 ec             	lea    -0x14(%ebp),%eax
f010cc31:	50                   	push   %eax
f010cc32:	e8 bb 9c ff ff       	call   f01068f2 <allocate_frame>
f010cc37:	83 c4 10             	add    $0x10,%esp
void sys_clearFFL()
{
	int size = LIST_SIZE(&free_frame_list) ;
	int i = 0 ;
	struct FrameInfo* ptr_tmp_FI ;
	for (; i < size ; i++)
f010cc3a:	ff 45 f4             	incl   -0xc(%ebp)
f010cc3d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010cc40:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f010cc43:	7c e6                	jl     f010cc2b <sys_clearFFL+0x17>
	{
		allocate_frame(&ptr_tmp_FI) ;
	}
}
f010cc45:	90                   	nop
f010cc46:	c9                   	leave  
f010cc47:	c3                   	ret    

f010cc48 <sys_pf_calculate_allocated_pages>:

/*******************************/
/* PAGE FILE SYSTEM CALLS */
/*******************************/
int sys_pf_calculate_allocated_pages(void)
{
f010cc48:	55                   	push   %ebp
f010cc49:	89 e5                	mov    %esp,%ebp
f010cc4b:	83 ec 08             	sub    $0x8,%esp
	return pf_calculate_allocated_pages(curenv);
f010cc4e:	a1 b4 1c 78 f0       	mov    0xf0781cb4,%eax
f010cc53:	83 ec 0c             	sub    $0xc,%esp
f010cc56:	50                   	push   %eax
f010cc57:	e8 cc 70 ff ff       	call   f0103d28 <pf_calculate_allocated_pages>
f010cc5c:	83 c4 10             	add    $0x10,%esp
}
f010cc5f:	c9                   	leave  
f010cc60:	c3                   	ret    

f010cc61 <sys_free_user_mem>:

/*******************************/
/* USER HEAP SYSTEM CALLS */
/*******************************/
void sys_free_user_mem(uint32 virtual_address, uint32 size)
{
f010cc61:	55                   	push   %ebp
f010cc62:	89 e5                	mov    %esp,%ebp
f010cc64:	83 ec 08             	sub    $0x8,%esp
	if(isBufferingEnabled())
f010cc67:	e8 9a 11 00 00       	call   f010de06 <isBufferingEnabled>
f010cc6c:	84 c0                	test   %al,%al
f010cc6e:	74 19                	je     f010cc89 <sys_free_user_mem+0x28>
	{
		__free_user_mem_with_buffering(curenv, virtual_address, size);
f010cc70:	a1 b4 1c 78 f0       	mov    0xf0781cb4,%eax
f010cc75:	83 ec 04             	sub    $0x4,%esp
f010cc78:	ff 75 0c             	pushl  0xc(%ebp)
f010cc7b:	ff 75 08             	pushl  0x8(%ebp)
f010cc7e:	50                   	push   %eax
f010cc7f:	e8 a5 c1 ff ff       	call   f0108e29 <__free_user_mem_with_buffering>
f010cc84:	83 c4 10             	add    $0x10,%esp
	}
	else
	{
		free_user_mem(curenv, virtual_address, size);
	}
	return;
f010cc87:	eb 18                	jmp    f010cca1 <sys_free_user_mem+0x40>
	{
		__free_user_mem_with_buffering(curenv, virtual_address, size);
	}
	else
	{
		free_user_mem(curenv, virtual_address, size);
f010cc89:	a1 b4 1c 78 f0       	mov    0xf0781cb4,%eax
f010cc8e:	83 ec 04             	sub    $0x4,%esp
f010cc91:	ff 75 0c             	pushl  0xc(%ebp)
f010cc94:	ff 75 08             	pushl  0x8(%ebp)
f010cc97:	50                   	push   %eax
f010cc98:	e8 6f c1 ff ff       	call   f0108e0c <free_user_mem>
f010cc9d:	83 c4 10             	add    $0x10,%esp
	}
	return;
f010cca0:	90                   	nop
}
f010cca1:	c9                   	leave  
f010cca2:	c3                   	ret    

f010cca3 <sys_allocate_user_mem>:

void sys_allocate_user_mem(uint32 virtual_address, uint32 size)
{
f010cca3:	55                   	push   %ebp
f010cca4:	89 e5                	mov    %esp,%ebp
f010cca6:	83 ec 08             	sub    $0x8,%esp
	allocate_user_mem(curenv, virtual_address, size);
f010cca9:	a1 b4 1c 78 f0       	mov    0xf0781cb4,%eax
f010ccae:	83 ec 04             	sub    $0x4,%esp
f010ccb1:	ff 75 0c             	pushl  0xc(%ebp)
f010ccb4:	ff 75 08             	pushl  0x8(%ebp)
f010ccb7:	50                   	push   %eax
f010ccb8:	e8 32 c1 ff ff       	call   f0108def <allocate_user_mem>
f010ccbd:	83 c4 10             	add    $0x10,%esp
	return;
f010ccc0:	90                   	nop
}
f010ccc1:	c9                   	leave  
f010ccc2:	c3                   	ret    

f010ccc3 <sys_allocate_chunk>:

void sys_allocate_chunk(uint32 virtual_address, uint32 size, uint32 perms)
{
f010ccc3:	55                   	push   %ebp
f010ccc4:	89 e5                	mov    %esp,%ebp
f010ccc6:	83 ec 08             	sub    $0x8,%esp
	allocate_chunk(curenv->env_page_directory, virtual_address, size, perms);
f010ccc9:	a1 b4 1c 78 f0       	mov    0xf0781cb4,%eax
f010ccce:	8b 40 5c             	mov    0x5c(%eax),%eax
f010ccd1:	ff 75 10             	pushl  0x10(%ebp)
f010ccd4:	ff 75 0c             	pushl  0xc(%ebp)
f010ccd7:	ff 75 08             	pushl  0x8(%ebp)
f010ccda:	50                   	push   %eax
f010ccdb:	e8 45 be ff ff       	call   f0108b25 <allocate_chunk>
f010cce0:	83 c4 10             	add    $0x10,%esp
	return;
f010cce3:	90                   	nop
}
f010cce4:	c9                   	leave  
f010cce5:	c3                   	ret    

f010cce6 <sys_move_user_mem>:

//2014
void sys_move_user_mem(uint32 src_virtual_address, uint32 dst_virtual_address, uint32 size)
{
f010cce6:	55                   	push   %ebp
f010cce7:	89 e5                	mov    %esp,%ebp
f010cce9:	83 ec 08             	sub    $0x8,%esp
	move_user_mem(curenv, src_virtual_address, dst_virtual_address, size);
f010ccec:	a1 b4 1c 78 f0       	mov    0xf0781cb4,%eax
f010ccf1:	ff 75 10             	pushl  0x10(%ebp)
f010ccf4:	ff 75 0c             	pushl  0xc(%ebp)
f010ccf7:	ff 75 08             	pushl  0x8(%ebp)
f010ccfa:	50                   	push   %eax
f010ccfb:	e8 46 c1 ff ff       	call   f0108e46 <move_user_mem>
f010cd00:	83 c4 10             	add    $0x10,%esp
	return;
f010cd03:	90                   	nop
}
f010cd04:	c9                   	leave  
f010cd05:	c3                   	ret    

f010cd06 <sys_get_heap_strategy>:

//2015
uint32 sys_get_heap_strategy()
{
f010cd06:	55                   	push   %ebp
f010cd07:	89 e5                	mov    %esp,%ebp
	return _UHeapPlacementStrategy ;
f010cd09:	a1 f0 25 78 f0       	mov    0xf07825f0,%eax
}
f010cd0e:	5d                   	pop    %ebp
f010cd0f:	c3                   	ret    

f010cd10 <sys_set_uheap_strategy>:
void sys_set_uheap_strategy(uint32 heapStrategy)
{
f010cd10:	55                   	push   %ebp
f010cd11:	89 e5                	mov    %esp,%ebp
	_UHeapPlacementStrategy = heapStrategy;
f010cd13:	8b 45 08             	mov    0x8(%ebp),%eax
f010cd16:	a3 f0 25 78 f0       	mov    %eax,0xf07825f0
}
f010cd1b:	90                   	nop
f010cd1c:	5d                   	pop    %ebp
f010cd1d:	c3                   	ret    

f010cd1e <sys_disable_interrupt>:
/*******************************/
/* INTERRUPTS SYSTEM CALLS */
/*******************************/
//NEW!! 2012...
void sys_disable_interrupt()
{
f010cd1e:	55                   	push   %ebp
f010cd1f:	89 e5                	mov    %esp,%ebp
	curenv->env_tf.tf_eflags &= ~FL_IF ;
f010cd21:	a1 b4 1c 78 f0       	mov    0xf0781cb4,%eax
f010cd26:	8b 15 b4 1c 78 f0    	mov    0xf0781cb4,%edx
f010cd2c:	8b 52 38             	mov    0x38(%edx),%edx
f010cd2f:	80 e6 fd             	and    $0xfd,%dh
f010cd32:	89 50 38             	mov    %edx,0x38(%eax)
}
f010cd35:	90                   	nop
f010cd36:	5d                   	pop    %ebp
f010cd37:	c3                   	ret    

f010cd38 <sys_enable_interrupt>:
void sys_enable_interrupt()
{
f010cd38:	55                   	push   %ebp
f010cd39:	89 e5                	mov    %esp,%ebp
	curenv->env_tf.tf_eflags |= FL_IF ;
f010cd3b:	a1 b4 1c 78 f0       	mov    0xf0781cb4,%eax
f010cd40:	8b 15 b4 1c 78 f0    	mov    0xf0781cb4,%edx
f010cd46:	8b 52 38             	mov    0x38(%edx),%edx
f010cd49:	80 ce 02             	or     $0x2,%dh
f010cd4c:	89 50 38             	mov    %edx,0x38(%eax)
}
f010cd4f:	90                   	nop
f010cd50:	5d                   	pop    %ebp
f010cd51:	c3                   	ret    

f010cd52 <sys_createSemaphore>:

/*******************************/
/* SEMAPHORES SYSTEM CALLS */
/*******************************/
int sys_createSemaphore(char* semaphoreName, uint32 initialValue)
{
f010cd52:	55                   	push   %ebp
f010cd53:	89 e5                	mov    %esp,%ebp
f010cd55:	83 ec 08             	sub    $0x8,%esp
	return createSemaphore(curenv->env_id, semaphoreName, initialValue);
f010cd58:	a1 b4 1c 78 f0       	mov    0xf0781cb4,%eax
f010cd5d:	8b 40 4c             	mov    0x4c(%eax),%eax
f010cd60:	83 ec 04             	sub    $0x4,%esp
f010cd63:	ff 75 0c             	pushl  0xc(%ebp)
f010cd66:	ff 75 08             	pushl  0x8(%ebp)
f010cd69:	50                   	push   %eax
f010cd6a:	e8 d6 17 00 00       	call   f010e545 <createSemaphore>
f010cd6f:	83 c4 10             	add    $0x10,%esp
}
f010cd72:	c9                   	leave  
f010cd73:	c3                   	ret    

f010cd74 <sys_waitSemaphore>:

void sys_waitSemaphore(int32 ownerEnvID, char* semaphoreName)
{
f010cd74:	55                   	push   %ebp
f010cd75:	89 e5                	mov    %esp,%ebp
f010cd77:	83 ec 08             	sub    $0x8,%esp
	waitSemaphore(ownerEnvID, semaphoreName);
f010cd7a:	83 ec 08             	sub    $0x8,%esp
f010cd7d:	ff 75 0c             	pushl  0xc(%ebp)
f010cd80:	ff 75 08             	pushl  0x8(%ebp)
f010cd83:	e8 da 17 00 00       	call   f010e562 <waitSemaphore>
f010cd88:	83 c4 10             	add    $0x10,%esp
}
f010cd8b:	90                   	nop
f010cd8c:	c9                   	leave  
f010cd8d:	c3                   	ret    

f010cd8e <sys_signalSemaphore>:

void sys_signalSemaphore(int32 ownerEnvID, char* semaphoreName)
{
f010cd8e:	55                   	push   %ebp
f010cd8f:	89 e5                	mov    %esp,%ebp
f010cd91:	83 ec 08             	sub    $0x8,%esp
	signalSemaphore(ownerEnvID, semaphoreName);
f010cd94:	83 ec 08             	sub    $0x8,%esp
f010cd97:	ff 75 0c             	pushl  0xc(%ebp)
f010cd9a:	ff 75 08             	pushl  0x8(%ebp)
f010cd9d:	e8 dd 17 00 00       	call   f010e57f <signalSemaphore>
f010cda2:	83 c4 10             	add    $0x10,%esp
}
f010cda5:	90                   	nop
f010cda6:	c9                   	leave  
f010cda7:	c3                   	ret    

f010cda8 <sys_getSemaphoreValue>:

int sys_getSemaphoreValue(int32 ownerEnvID, char* semaphoreName)
{
f010cda8:	55                   	push   %ebp
f010cda9:	89 e5                	mov    %esp,%ebp
f010cdab:	83 ec 18             	sub    $0x18,%esp
	int semID = get_semaphore_object_ID(ownerEnvID, semaphoreName);
f010cdae:	83 ec 08             	sub    $0x8,%esp
f010cdb1:	ff 75 0c             	pushl  0xc(%ebp)
f010cdb4:	ff 75 08             	pushl  0x8(%ebp)
f010cdb7:	e8 01 16 00 00       	call   f010e3bd <get_semaphore_object_ID>
f010cdbc:	83 c4 10             	add    $0x10,%esp
f010cdbf:	89 45 f4             	mov    %eax,-0xc(%ebp)
	assert(semID >= 0 && semID < MAX_SEMAPHORES) ;
f010cdc2:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010cdc6:	78 0c                	js     f010cdd4 <sys_getSemaphoreValue+0x2c>
f010cdc8:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010cdcb:	a1 74 25 78 f0       	mov    0xf0782574,%eax
f010cdd0:	39 c2                	cmp    %eax,%edx
f010cdd2:	72 19                	jb     f010cded <sys_getSemaphoreValue+0x45>
f010cdd4:	68 34 79 13 f0       	push   $0xf0137934
f010cdd9:	68 59 79 13 f0       	push   $0xf0137959
f010cdde:	68 4a 01 00 00       	push   $0x14a
f010cde3:	68 ff 78 13 f0       	push   $0xf01378ff
f010cde8:	e8 18 34 ff ff       	call   f0100205 <_panic>

	return semaphores[semID].value ;
f010cded:	8b 0d cc 25 78 f0    	mov    0xf07825cc,%ecx
f010cdf3:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010cdf6:	89 d0                	mov    %edx,%eax
f010cdf8:	c1 e0 02             	shl    $0x2,%eax
f010cdfb:	01 d0                	add    %edx,%eax
f010cdfd:	01 c0                	add    %eax,%eax
f010cdff:	01 d0                	add    %edx,%eax
f010ce01:	01 c0                	add    %eax,%eax
f010ce03:	01 d0                	add    %edx,%eax
f010ce05:	c1 e0 02             	shl    $0x2,%eax
f010ce08:	01 c8                	add    %ecx,%eax
f010ce0a:	8b 40 54             	mov    0x54(%eax),%eax
}
f010ce0d:	c9                   	leave  
f010ce0e:	c3                   	ret    

f010ce0f <sys_createSharedObject>:

/*******************************/
/* SHARED MEMORY SYSTEM CALLS */
/*******************************/
int sys_createSharedObject(char* shareName, uint32 size, uint8 isWritable, void* virtual_address)
{
f010ce0f:	55                   	push   %ebp
f010ce10:	89 e5                	mov    %esp,%ebp
f010ce12:	83 ec 18             	sub    $0x18,%esp
f010ce15:	8b 45 10             	mov    0x10(%ebp),%eax
f010ce18:	88 45 f4             	mov    %al,-0xc(%ebp)
	return createSharedObject(curenv->env_id, shareName, size, isWritable, virtual_address);
f010ce1b:	0f b6 55 f4          	movzbl -0xc(%ebp),%edx
f010ce1f:	a1 b4 1c 78 f0       	mov    0xf0781cb4,%eax
f010ce24:	8b 40 4c             	mov    0x4c(%eax),%eax
f010ce27:	83 ec 0c             	sub    $0xc,%esp
f010ce2a:	ff 75 14             	pushl  0x14(%ebp)
f010ce2d:	52                   	push   %edx
f010ce2e:	ff 75 0c             	pushl  0xc(%ebp)
f010ce31:	ff 75 08             	pushl  0x8(%ebp)
f010ce34:	50                   	push   %eax
f010ce35:	e8 62 a7 ff ff       	call   f010759c <createSharedObject>
f010ce3a:	83 c4 20             	add    $0x20,%esp
}
f010ce3d:	c9                   	leave  
f010ce3e:	c3                   	ret    

f010ce3f <sys_getSizeOfSharedObject>:

int sys_getSizeOfSharedObject(int32 ownerID, char* shareName)
{
f010ce3f:	55                   	push   %ebp
f010ce40:	89 e5                	mov    %esp,%ebp
f010ce42:	83 ec 08             	sub    $0x8,%esp
	return getSizeOfSharedObject(ownerID, shareName);
f010ce45:	83 ec 08             	sub    $0x8,%esp
f010ce48:	ff 75 0c             	pushl  0xc(%ebp)
f010ce4b:	ff 75 08             	pushl  0x8(%ebp)
f010ce4e:	e8 03 a7 ff ff       	call   f0107556 <getSizeOfSharedObject>
f010ce53:	83 c4 10             	add    $0x10,%esp
}
f010ce56:	c9                   	leave  
f010ce57:	c3                   	ret    

f010ce58 <sys_getSharedObject>:

int sys_getSharedObject(int32 ownerID, char* shareName, void* virtual_address)
{
f010ce58:	55                   	push   %ebp
f010ce59:	89 e5                	mov    %esp,%ebp
f010ce5b:	83 ec 08             	sub    $0x8,%esp
	return getSharedObject(ownerID, shareName, virtual_address);
f010ce5e:	83 ec 04             	sub    $0x4,%esp
f010ce61:	ff 75 10             	pushl  0x10(%ebp)
f010ce64:	ff 75 0c             	pushl  0xc(%ebp)
f010ce67:	ff 75 08             	pushl  0x8(%ebp)
f010ce6a:	e8 50 a7 ff ff       	call   f01075bf <getSharedObject>
f010ce6f:	83 c4 10             	add    $0x10,%esp
}
f010ce72:	c9                   	leave  
f010ce73:	c3                   	ret    

f010ce74 <sys_freeSharedObject>:

int sys_freeSharedObject(int32 sharedObjectID, void *startVA)
{
f010ce74:	55                   	push   %ebp
f010ce75:	89 e5                	mov    %esp,%ebp
f010ce77:	83 ec 08             	sub    $0x8,%esp
	return freeSharedObject(sharedObjectID, startVA);
f010ce7a:	83 ec 08             	sub    $0x8,%esp
f010ce7d:	ff 75 0c             	pushl  0xc(%ebp)
f010ce80:	ff 75 08             	pushl  0x8(%ebp)
f010ce83:	e8 54 a7 ff ff       	call   f01075dc <freeSharedObject>
f010ce88:	83 c4 10             	add    $0x10,%esp
}
f010ce8b:	c9                   	leave  
f010ce8c:	c3                   	ret    

f010ce8d <sys_getMaxShares>:

uint32 sys_getMaxShares()
{
f010ce8d:	55                   	push   %ebp
f010ce8e:	89 e5                	mov    %esp,%ebp
	return MAX_SHARES;
f010ce90:	a1 e8 25 78 f0       	mov    0xf07825e8,%eax
}
f010ce95:	5d                   	pop    %ebp
f010ce96:	c3                   	ret    

f010ce97 <sys_getenvid>:
/* USER ENVIRONMENT SYSTEM CALLS */
/*********************************/
// Returns the current environment's envid.
//2017
static int32 sys_getenvid(void)
{
f010ce97:	55                   	push   %ebp
f010ce98:	89 e5                	mov    %esp,%ebp
	return curenv->env_id;
f010ce9a:	a1 b4 1c 78 f0       	mov    0xf0781cb4,%eax
f010ce9f:	8b 40 4c             	mov    0x4c(%eax),%eax
}
f010cea2:	5d                   	pop    %ebp
f010cea3:	c3                   	ret    

f010cea4 <sys_getenvindex>:

//2017
static int32 sys_getenvindex(void)
{
f010cea4:	55                   	push   %ebp
f010cea5:	89 e5                	mov    %esp,%ebp
	//return curenv->env_id;
	return (curenv - envs) ;
f010cea7:	a1 b4 1c 78 f0       	mov    0xf0781cb4,%eax
f010ceac:	89 c2                	mov    %eax,%edx
f010ceae:	a1 b0 1c 78 f0       	mov    0xf0781cb0,%eax
f010ceb3:	29 c2                	sub    %eax,%edx
f010ceb5:	89 d0                	mov    %edx,%eax
f010ceb7:	c1 f8 04             	sar    $0x4,%eax
f010ceba:	89 c2                	mov    %eax,%edx
f010cebc:	89 d0                	mov    %edx,%eax
f010cebe:	c1 e0 03             	shl    $0x3,%eax
f010cec1:	01 d0                	add    %edx,%eax
f010cec3:	01 c0                	add    %eax,%eax
f010cec5:	01 d0                	add    %edx,%eax
f010cec7:	c1 e0 03             	shl    $0x3,%eax
f010ceca:	01 d0                	add    %edx,%eax
f010cecc:	89 c1                	mov    %eax,%ecx
f010cece:	c1 e1 08             	shl    $0x8,%ecx
f010ced1:	01 c8                	add    %ecx,%eax
f010ced3:	01 c0                	add    %eax,%eax
f010ced5:	01 d0                	add    %edx,%eax
f010ced7:	01 c0                	add    %eax,%eax
f010ced9:	01 d0                	add    %edx,%eax
f010cedb:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f010cee2:	01 d0                	add    %edx,%eax
f010cee4:	89 c2                	mov    %eax,%edx
f010cee6:	c1 e2 09             	shl    $0x9,%edx
f010cee9:	29 c2                	sub    %eax,%edx
f010ceeb:	89 d0                	mov    %edx,%eax
f010ceed:	f7 d8                	neg    %eax
}
f010ceef:	5d                   	pop    %ebp
f010cef0:	c3                   	ret    

f010cef1 <sys_getparentenvid>:

//2017
static int32 sys_getparentenvid(void)
{
f010cef1:	55                   	push   %ebp
f010cef2:	89 e5                	mov    %esp,%ebp
	return curenv->env_parent_id;
f010cef4:	a1 b4 1c 78 f0       	mov    0xf0781cb4,%eax
f010cef9:	8b 40 50             	mov    0x50(%eax),%eax
}
f010cefc:	5d                   	pop    %ebp
f010cefd:	c3                   	ret    

f010cefe <sys_destroy_env>:
//
// Returns 0 on success, < 0 on error.  Errors are:
//	-E_BAD_ENV if environment envid doesn't currently exist,
//		or the caller doesn't have permission to change envid.
static int sys_destroy_env(int32 envid)
{
f010cefe:	55                   	push   %ebp
f010ceff:	89 e5                	mov    %esp,%ebp
f010cf01:	83 ec 18             	sub    $0x18,%esp
	int r;
	struct Env *e;
	if (envid == 0)
f010cf04:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f010cf08:	75 0a                	jne    f010cf14 <sys_destroy_env+0x16>
	{
		e = curenv ;
f010cf0a:	a1 b4 1c 78 f0       	mov    0xf0781cb4,%eax
f010cf0f:	89 45 f0             	mov    %eax,-0x10(%ebp)
f010cf12:	eb 22                	jmp    f010cf36 <sys_destroy_env+0x38>
	}
	else if ((r = envid2env(envid, &e, 0)) < 0)
f010cf14:	83 ec 04             	sub    $0x4,%esp
f010cf17:	6a 00                	push   $0x0
f010cf19:	8d 45 f0             	lea    -0x10(%ebp),%eax
f010cf1c:	50                   	push   %eax
f010cf1d:	ff 75 08             	pushl  0x8(%ebp)
f010cf20:	e8 e5 cb ff ff       	call   f0109b0a <envid2env>
f010cf25:	83 c4 10             	add    $0x10,%esp
f010cf28:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010cf2b:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010cf2f:	79 05                	jns    f010cf36 <sys_destroy_env+0x38>
	{
		return r;
f010cf31:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010cf34:	eb 5e                	jmp    f010cf94 <sys_destroy_env+0x96>
	}

	if (e == curenv)
f010cf36:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010cf39:	a1 b4 1c 78 f0       	mov    0xf0781cb4,%eax
f010cf3e:	39 c2                	cmp    %eax,%edx
f010cf40:	75 1b                	jne    f010cf5d <sys_destroy_env+0x5f>
	{
		cprintf("[%08x] exiting gracefully\n", curenv->env_id);
f010cf42:	a1 b4 1c 78 f0       	mov    0xf0781cb4,%eax
f010cf47:	8b 40 4c             	mov    0x4c(%eax),%eax
f010cf4a:	83 ec 08             	sub    $0x8,%esp
f010cf4d:	50                   	push   %eax
f010cf4e:	68 6e 79 13 f0       	push   $0xf013796e
f010cf53:	e8 b6 3d ff ff       	call   f0100d0e <cprintf>
f010cf58:	83 c4 10             	add    $0x10,%esp
f010cf5b:	eb 20                	jmp    f010cf7d <sys_destroy_env+0x7f>
	}
	else
	{
		cprintf("[%08x] destroying %08x\n", curenv->env_id, e->env_id);
f010cf5d:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010cf60:	8b 50 4c             	mov    0x4c(%eax),%edx
f010cf63:	a1 b4 1c 78 f0       	mov    0xf0781cb4,%eax
f010cf68:	8b 40 4c             	mov    0x4c(%eax),%eax
f010cf6b:	83 ec 04             	sub    $0x4,%esp
f010cf6e:	52                   	push   %edx
f010cf6f:	50                   	push   %eax
f010cf70:	68 89 79 13 f0       	push   $0xf0137989
f010cf75:	e8 94 3d ff ff       	call   f0100d0e <cprintf>
f010cf7a:	83 c4 10             	add    $0x10,%esp
	}
	//2015
	sched_kill_env(e->env_id);
f010cf7d:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010cf80:	8b 40 4c             	mov    0x4c(%eax),%eax
f010cf83:	83 ec 0c             	sub    $0xc,%esp
f010cf86:	50                   	push   %eax
f010cf87:	e8 b3 86 ff ff       	call   f010563f <sched_kill_env>
f010cf8c:	83 c4 10             	add    $0x10,%esp

	return 0;
f010cf8f:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010cf94:	c9                   	leave  
f010cf95:	c3                   	ret    

f010cf96 <sys_exit_env>:

//Just place the current env into the EXIT queue & schedule the next one
static void sys_exit_env()
{
f010cf96:	55                   	push   %ebp
f010cf97:	89 e5                	mov    %esp,%ebp
f010cf99:	83 ec 08             	sub    $0x8,%esp
	//2015
	env_exit();
f010cf9c:	e8 4a cb ff ff       	call   f0109aeb <env_exit>
	//env_run_cmd_prmpt();
}
f010cfa1:	90                   	nop
f010cfa2:	c9                   	leave  
f010cfa3:	c3                   	ret    

f010cfa4 <sys_create_env>:

//New update in 2020
//Create a new env & add it to the NEW queue
int sys_create_env(char* programName, unsigned int page_WS_size,unsigned int LRU_second_list_size, unsigned int percent_WS_pages_to_remove)
{
f010cfa4:	55                   	push   %ebp
f010cfa5:	89 e5                	mov    %esp,%ebp
f010cfa7:	83 ec 18             	sub    $0x18,%esp
	struct Env* env =  env_create(programName, page_WS_size, LRU_second_list_size, percent_WS_pages_to_remove);
f010cfaa:	ff 75 14             	pushl  0x14(%ebp)
f010cfad:	ff 75 10             	pushl  0x10(%ebp)
f010cfb0:	ff 75 0c             	pushl  0xc(%ebp)
f010cfb3:	ff 75 08             	pushl  0x8(%ebp)
f010cfb6:	e8 a8 be ff ff       	call   f0108e63 <env_create>
f010cfbb:	83 c4 10             	add    $0x10,%esp
f010cfbe:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if(env == NULL)
f010cfc1:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010cfc5:	75 07                	jne    f010cfce <sys_create_env+0x2a>
	{
		return E_ENV_CREATION_ERROR;
f010cfc7:	b8 ef ff ff ff       	mov    $0xffffffef,%eax
f010cfcc:	eb 14                	jmp    f010cfe2 <sys_create_env+0x3e>
	}

	//2015
	sched_new_env(env);
f010cfce:	83 ec 0c             	sub    $0xc,%esp
f010cfd1:	ff 75 f4             	pushl  -0xc(%ebp)
f010cfd4:	e8 2b 82 ff ff       	call   f0105204 <sched_new_env>
f010cfd9:	83 c4 10             	add    $0x10,%esp

	return env->env_id;
f010cfdc:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010cfdf:	8b 40 4c             	mov    0x4c(%eax),%eax
}
f010cfe2:	c9                   	leave  
f010cfe3:	c3                   	ret    

f010cfe4 <sys_run_env>:

//Place a new env into the READY queue
void sys_run_env(int32 envId)
{
f010cfe4:	55                   	push   %ebp
f010cfe5:	89 e5                	mov    %esp,%ebp
f010cfe7:	83 ec 08             	sub    $0x8,%esp
	sched_run_env(envId);
f010cfea:	8b 45 08             	mov    0x8(%ebp),%eax
f010cfed:	83 ec 0c             	sub    $0xc,%esp
f010cff0:	50                   	push   %eax
f010cff1:	e8 2b 82 ff ff       	call   f0105221 <sched_run_env>
f010cff6:	83 c4 10             	add    $0x10,%esp
}
f010cff9:	90                   	nop
f010cffa:	c9                   	leave  
f010cffb:	c3                   	ret    

f010cffc <sys_get_virtual_time>:
/*******************************/
/* ETC... SYSTEM CALLS */
/*******************************/

struct uint64 sys_get_virtual_time()
{
f010cffc:	55                   	push   %ebp
f010cffd:	89 e5                	mov    %esp,%ebp
f010cfff:	83 ec 10             	sub    $0x10,%esp
	//	lcr4(0);


	struct uint64 result;

	__asm __volatile("rdtsc\n"
f010d002:	0f 31                	rdtsc  
f010d004:	89 45 f0             	mov    %eax,-0x10(%ebp)
f010d007:	89 55 f4             	mov    %edx,-0xc(%ebp)
	//ptr[3]=0;
	//cprintf("as str = %s\n", ptr);
	cprintf("ax = %x, bx = %x, cx = %x, dx = %x\n", eaxp,ebxp,ecxp,edxp);
	*/

	return result;
f010d00a:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010d00d:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010d010:	89 45 f8             	mov    %eax,-0x8(%ebp)
f010d013:	89 55 fc             	mov    %edx,-0x4(%ebp)
	struct uint64 t = get_virtual_time();
	return t;
f010d016:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010d019:	8b 45 f8             	mov    -0x8(%ebp),%eax
f010d01c:	8b 55 fc             	mov    -0x4(%ebp),%edx
f010d01f:	89 01                	mov    %eax,(%ecx)
f010d021:	89 51 04             	mov    %edx,0x4(%ecx)
}
f010d024:	8b 45 08             	mov    0x8(%ebp),%eax
f010d027:	c9                   	leave  
f010d028:	c2 04 00             	ret    $0x4

f010d02b <sys_rcr2>:

uint32 sys_rcr2()
{
f010d02b:	55                   	push   %ebp
f010d02c:	89 e5                	mov    %esp,%ebp
f010d02e:	83 ec 10             	sub    $0x10,%esp

static __inline uint32
rcr2(void)
{
	uint32 val;
	__asm __volatile("movl %%cr2,%0" : "=r" (val));
f010d031:	0f 20 d0             	mov    %cr2,%eax
f010d034:	89 45 fc             	mov    %eax,-0x4(%ebp)
	return val;
f010d037:	8b 45 fc             	mov    -0x4(%ebp),%eax
	return rcr2();
f010d03a:	90                   	nop
}
f010d03b:	c9                   	leave  
f010d03c:	c3                   	ret    

f010d03d <sys_bypassPageFault>:
void sys_bypassPageFault(uint8 instrLength)
{
f010d03d:	55                   	push   %ebp
f010d03e:	89 e5                	mov    %esp,%ebp
f010d040:	83 ec 04             	sub    $0x4,%esp
f010d043:	8b 45 08             	mov    0x8(%ebp),%eax
f010d046:	88 45 fc             	mov    %al,-0x4(%ebp)
	bypassInstrLength = instrLength;
f010d049:	8a 45 fc             	mov    -0x4(%ebp),%al
f010d04c:	a2 68 25 78 f0       	mov    %al,0xf0782568
}
f010d051:	90                   	nop
f010d052:	c9                   	leave  
f010d053:	c3                   	ret    

f010d054 <rsttst>:

uint32 tstcnt;
void rsttst()
{
f010d054:	55                   	push   %ebp
f010d055:	89 e5                	mov    %esp,%ebp
	tstcnt = 0;
f010d057:	c7 05 70 27 78 f0 00 	movl   $0x0,0xf0782770
f010d05e:	00 00 00 
}
f010d061:	90                   	nop
f010d062:	5d                   	pop    %ebp
f010d063:	c3                   	ret    

f010d064 <inctst>:
void inctst()
{
f010d064:	55                   	push   %ebp
f010d065:	89 e5                	mov    %esp,%ebp
	tstcnt++;
f010d067:	a1 70 27 78 f0       	mov    0xf0782770,%eax
f010d06c:	40                   	inc    %eax
f010d06d:	a3 70 27 78 f0       	mov    %eax,0xf0782770
}
f010d072:	90                   	nop
f010d073:	5d                   	pop    %ebp
f010d074:	c3                   	ret    

f010d075 <gettst>:
uint32 gettst()
{
f010d075:	55                   	push   %ebp
f010d076:	89 e5                	mov    %esp,%ebp
	return tstcnt;
f010d078:	a1 70 27 78 f0       	mov    0xf0782770,%eax
}
f010d07d:	5d                   	pop    %ebp
f010d07e:	c3                   	ret    

f010d07f <tst>:

void tst(uint32 n, uint32 v1, uint32 v2, char c, int inv)
{
f010d07f:	55                   	push   %ebp
f010d080:	89 e5                	mov    %esp,%ebp
f010d082:	83 ec 28             	sub    $0x28,%esp
f010d085:	8b 45 14             	mov    0x14(%ebp),%eax
f010d088:	88 45 e4             	mov    %al,-0x1c(%ebp)
	int chk = 0;
f010d08b:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	switch (c)
f010d092:	0f be 45 e4          	movsbl -0x1c(%ebp),%eax
f010d096:	83 f8 65             	cmp    $0x65,%eax
f010d099:	74 5d                	je     f010d0f8 <tst+0x79>
f010d09b:	83 f8 65             	cmp    $0x65,%eax
f010d09e:	7f 0a                	jg     f010d0aa <tst+0x2b>
f010d0a0:	83 f8 62             	cmp    $0x62,%eax
f010d0a3:	74 73                	je     f010d118 <tst+0x99>
f010d0a5:	e9 91 00 00 00       	jmp    f010d13b <tst+0xbc>
f010d0aa:	83 f8 67             	cmp    $0x67,%eax
f010d0ad:	74 29                	je     f010d0d8 <tst+0x59>
f010d0af:	83 f8 6c             	cmp    $0x6c,%eax
f010d0b2:	0f 85 83 00 00 00    	jne    f010d13b <tst+0xbc>
	{
	case 'l':
		if (n < v1)
f010d0b8:	8b 45 08             	mov    0x8(%ebp),%eax
f010d0bb:	3b 45 0c             	cmp    0xc(%ebp),%eax
f010d0be:	73 09                	jae    f010d0c9 <tst+0x4a>
			chk = 1;
f010d0c0:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
		else if (inv)
			chk = 1;
		break;
f010d0c7:	eb 68                	jmp    f010d131 <tst+0xb2>
	switch (c)
	{
	case 'l':
		if (n < v1)
			chk = 1;
		else if (inv)
f010d0c9:	83 7d 18 00          	cmpl   $0x0,0x18(%ebp)
f010d0cd:	74 62                	je     f010d131 <tst+0xb2>
			chk = 1;
f010d0cf:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
		break;
f010d0d6:	eb 59                	jmp    f010d131 <tst+0xb2>
	case 'g':
		if (n > v1)
f010d0d8:	8b 45 08             	mov    0x8(%ebp),%eax
f010d0db:	3b 45 0c             	cmp    0xc(%ebp),%eax
f010d0de:	76 09                	jbe    f010d0e9 <tst+0x6a>
			chk = 1;
f010d0e0:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
		else if (inv)
			chk = 1;
		break;
f010d0e7:	eb 4b                	jmp    f010d134 <tst+0xb5>
			chk = 1;
		break;
	case 'g':
		if (n > v1)
			chk = 1;
		else if (inv)
f010d0e9:	83 7d 18 00          	cmpl   $0x0,0x18(%ebp)
f010d0ed:	74 45                	je     f010d134 <tst+0xb5>
			chk = 1;
f010d0ef:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
		break;
f010d0f6:	eb 3c                	jmp    f010d134 <tst+0xb5>
	case 'e':
		if (n == v1)
f010d0f8:	8b 45 08             	mov    0x8(%ebp),%eax
f010d0fb:	3b 45 0c             	cmp    0xc(%ebp),%eax
f010d0fe:	75 09                	jne    f010d109 <tst+0x8a>
			chk = 1;
f010d100:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
		else if (inv)
			chk = 1;
		break;
f010d107:	eb 2e                	jmp    f010d137 <tst+0xb8>
			chk = 1;
		break;
	case 'e':
		if (n == v1)
			chk = 1;
		else if (inv)
f010d109:	83 7d 18 00          	cmpl   $0x0,0x18(%ebp)
f010d10d:	74 28                	je     f010d137 <tst+0xb8>
			chk = 1;
f010d10f:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
		break;
f010d116:	eb 1f                	jmp    f010d137 <tst+0xb8>
	case 'b':
		if (n >= v1 && n <= v1)
f010d118:	8b 45 08             	mov    0x8(%ebp),%eax
f010d11b:	3b 45 0c             	cmp    0xc(%ebp),%eax
f010d11e:	72 1a                	jb     f010d13a <tst+0xbb>
f010d120:	8b 45 08             	mov    0x8(%ebp),%eax
f010d123:	3b 45 0c             	cmp    0xc(%ebp),%eax
f010d126:	77 12                	ja     f010d13a <tst+0xbb>
			chk = 1;
f010d128:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
		break;
f010d12f:	eb 09                	jmp    f010d13a <tst+0xbb>
	case 'l':
		if (n < v1)
			chk = 1;
		else if (inv)
			chk = 1;
		break;
f010d131:	90                   	nop
f010d132:	eb 07                	jmp    f010d13b <tst+0xbc>
	case 'g':
		if (n > v1)
			chk = 1;
		else if (inv)
			chk = 1;
		break;
f010d134:	90                   	nop
f010d135:	eb 04                	jmp    f010d13b <tst+0xbc>
	case 'e':
		if (n == v1)
			chk = 1;
		else if (inv)
			chk = 1;
		break;
f010d137:	90                   	nop
f010d138:	eb 01                	jmp    f010d13b <tst+0xbc>
	case 'b':
		if (n >= v1 && n <= v1)
			chk = 1;
		break;
f010d13a:	90                   	nop
	}

	if (chk == 0) panic("Error!! test fails");
f010d13b:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010d13f:	75 17                	jne    f010d158 <tst+0xd9>
f010d141:	83 ec 04             	sub    $0x4,%esp
f010d144:	68 a1 79 13 f0       	push   $0xf01379a1
f010d149:	68 00 02 00 00       	push   $0x200
f010d14e:	68 ff 78 13 f0       	push   $0xf01378ff
f010d153:	e8 ad 30 ff ff       	call   f0100205 <_panic>
	tstcnt++ ;
f010d158:	a1 70 27 78 f0       	mov    0xf0782770,%eax
f010d15d:	40                   	inc    %eax
f010d15e:	a3 70 27 78 f0       	mov    %eax,0xf0782770
	return;
f010d163:	90                   	nop
}
f010d164:	c9                   	leave  
f010d165:	c3                   	ret    

f010d166 <chktst>:

void chktst(uint32 n)
{
f010d166:	55                   	push   %ebp
f010d167:	89 e5                	mov    %esp,%ebp
f010d169:	83 ec 08             	sub    $0x8,%esp
	if (tstcnt == n)
f010d16c:	a1 70 27 78 f0       	mov    0xf0782770,%eax
f010d171:	3b 45 08             	cmp    0x8(%ebp),%eax
f010d174:	75 12                	jne    f010d188 <chktst+0x22>
		cprintf("\nCongratulations... test runs successfully\n");
f010d176:	83 ec 0c             	sub    $0xc,%esp
f010d179:	68 b4 79 13 f0       	push   $0xf01379b4
f010d17e:	e8 8b 3b ff ff       	call   f0100d0e <cprintf>
f010d183:	83 c4 10             	add    $0x10,%esp
	else
		panic("Error!! test fails at final");
}
f010d186:	eb 17                	jmp    f010d19f <chktst+0x39>
void chktst(uint32 n)
{
	if (tstcnt == n)
		cprintf("\nCongratulations... test runs successfully\n");
	else
		panic("Error!! test fails at final");
f010d188:	83 ec 04             	sub    $0x4,%esp
f010d18b:	68 e0 79 13 f0       	push   $0xf01379e0
f010d190:	68 0a 02 00 00       	push   $0x20a
f010d195:	68 ff 78 13 f0       	push   $0xf01378ff
f010d19a:	e8 66 30 ff ff       	call   f0100205 <_panic>
}
f010d19f:	c9                   	leave  
f010d1a0:	c3                   	ret    

f010d1a1 <sys_check_LRU_lists>:



//2020
int sys_check_LRU_lists(uint32* active_list_content, uint32* second_list_content, int actual_active_list_size, int actual_second_list_size)
{
f010d1a1:	55                   	push   %ebp
f010d1a2:	89 e5                	mov    %esp,%ebp
f010d1a4:	83 ec 30             	sub    $0x30,%esp
	struct Env* env = curenv;
f010d1a7:	a1 b4 1c 78 f0       	mov    0xf0781cb4,%eax
f010d1ac:	89 45 e8             	mov    %eax,-0x18(%ebp)
	int active_list_validation = 1;
f010d1af:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%ebp)
	int second_list_validation = 1;
f010d1b6:	c7 45 f8 01 00 00 00 	movl   $0x1,-0x8(%ebp)
	struct WorkingSetElement* ptr_WS_element;

	//1- Check active list content if not null
	if(active_list_content != NULL)
f010d1bd:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f010d1c1:	0f 84 a5 00 00 00    	je     f010d26c <sys_check_LRU_lists+0xcb>
	{
		int idx_active_list = 0;
f010d1c7:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
		LIST_FOREACH(ptr_WS_element, &(env->ActiveList))
f010d1ce:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010d1d1:	8b 80 c8 05 00 00    	mov    0x5c8(%eax),%eax
f010d1d7:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010d1da:	eb 4a                	jmp    f010d226 <sys_check_LRU_lists+0x85>
		{
			if (ROUNDDOWN(ptr_WS_element->virtual_address, PAGE_SIZE) != ROUNDDOWN(active_list_content[idx_active_list], PAGE_SIZE))
f010d1dc:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010d1df:	8b 00                	mov    (%eax),%eax
f010d1e1:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f010d1e4:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010d1e7:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f010d1ec:	89 c2                	mov    %eax,%edx
f010d1ee:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010d1f1:	8d 0c 85 00 00 00 00 	lea    0x0(,%eax,4),%ecx
f010d1f8:	8b 45 08             	mov    0x8(%ebp),%eax
f010d1fb:	01 c8                	add    %ecx,%eax
f010d1fd:	8b 00                	mov    (%eax),%eax
f010d1ff:	89 45 e0             	mov    %eax,-0x20(%ebp)
f010d202:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010d205:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f010d20a:	39 c2                	cmp    %eax,%edx
f010d20c:	74 09                	je     f010d217 <sys_check_LRU_lists+0x76>
			{
				active_list_validation = 0;
f010d20e:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
				break;
f010d215:	eb 3e                	jmp    f010d255 <sys_check_LRU_lists+0xb4>
			}
			idx_active_list++;
f010d217:	ff 45 f0             	incl   -0x10(%ebp)

	//1- Check active list content if not null
	if(active_list_content != NULL)
	{
		int idx_active_list = 0;
		LIST_FOREACH(ptr_WS_element, &(env->ActiveList))
f010d21a:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010d21d:	8b 80 d0 05 00 00    	mov    0x5d0(%eax),%eax
f010d223:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010d226:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010d22a:	74 08                	je     f010d234 <sys_check_LRU_lists+0x93>
f010d22c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010d22f:	8b 40 10             	mov    0x10(%eax),%eax
f010d232:	eb 05                	jmp    f010d239 <sys_check_LRU_lists+0x98>
f010d234:	b8 00 00 00 00       	mov    $0x0,%eax
f010d239:	8b 55 e8             	mov    -0x18(%ebp),%edx
f010d23c:	89 82 d0 05 00 00    	mov    %eax,0x5d0(%edx)
f010d242:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010d245:	8b 80 d0 05 00 00    	mov    0x5d0(%eax),%eax
f010d24b:	85 c0                	test   %eax,%eax
f010d24d:	75 8d                	jne    f010d1dc <sys_check_LRU_lists+0x3b>
f010d24f:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010d253:	75 87                	jne    f010d1dc <sys_check_LRU_lists+0x3b>
				active_list_validation = 0;
				break;
			}
			idx_active_list++;
		}
		if(LIST_SIZE(&env->ActiveList) != actual_active_list_size)
f010d255:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010d258:	8b 90 d4 05 00 00    	mov    0x5d4(%eax),%edx
f010d25e:	8b 45 10             	mov    0x10(%ebp),%eax
f010d261:	39 c2                	cmp    %eax,%edx
f010d263:	74 07                	je     f010d26c <sys_check_LRU_lists+0xcb>
		{
			active_list_validation = 0;
f010d265:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)

		}
	}

	//2- Check second chance list content if not null
	if(second_list_content != NULL)
f010d26c:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
f010d270:	0f 84 a5 00 00 00    	je     f010d31b <sys_check_LRU_lists+0x17a>
	{
		int idx_second_list = 0;
f010d276:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
		LIST_FOREACH(ptr_WS_element, &(env->SecondList))
f010d27d:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010d280:	8b 80 d8 05 00 00    	mov    0x5d8(%eax),%eax
f010d286:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010d289:	eb 4a                	jmp    f010d2d5 <sys_check_LRU_lists+0x134>
		{
			if (ROUNDDOWN(ptr_WS_element->virtual_address, PAGE_SIZE) != ROUNDDOWN(second_list_content[idx_second_list], PAGE_SIZE))
f010d28b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010d28e:	8b 00                	mov    (%eax),%eax
f010d290:	89 45 dc             	mov    %eax,-0x24(%ebp)
f010d293:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010d296:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f010d29b:	89 c2                	mov    %eax,%edx
f010d29d:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010d2a0:	8d 0c 85 00 00 00 00 	lea    0x0(,%eax,4),%ecx
f010d2a7:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d2aa:	01 c8                	add    %ecx,%eax
f010d2ac:	8b 00                	mov    (%eax),%eax
f010d2ae:	89 45 d8             	mov    %eax,-0x28(%ebp)
f010d2b1:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010d2b4:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f010d2b9:	39 c2                	cmp    %eax,%edx
f010d2bb:	74 09                	je     f010d2c6 <sys_check_LRU_lists+0x125>
			{
				second_list_validation = 0;
f010d2bd:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
				break;
f010d2c4:	eb 3e                	jmp    f010d304 <sys_check_LRU_lists+0x163>
			}
			idx_second_list++;
f010d2c6:	ff 45 ec             	incl   -0x14(%ebp)

	//2- Check second chance list content if not null
	if(second_list_content != NULL)
	{
		int idx_second_list = 0;
		LIST_FOREACH(ptr_WS_element, &(env->SecondList))
f010d2c9:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010d2cc:	8b 80 e0 05 00 00    	mov    0x5e0(%eax),%eax
f010d2d2:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010d2d5:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010d2d9:	74 08                	je     f010d2e3 <sys_check_LRU_lists+0x142>
f010d2db:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010d2de:	8b 40 10             	mov    0x10(%eax),%eax
f010d2e1:	eb 05                	jmp    f010d2e8 <sys_check_LRU_lists+0x147>
f010d2e3:	b8 00 00 00 00       	mov    $0x0,%eax
f010d2e8:	8b 55 e8             	mov    -0x18(%ebp),%edx
f010d2eb:	89 82 e0 05 00 00    	mov    %eax,0x5e0(%edx)
f010d2f1:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010d2f4:	8b 80 e0 05 00 00    	mov    0x5e0(%eax),%eax
f010d2fa:	85 c0                	test   %eax,%eax
f010d2fc:	75 8d                	jne    f010d28b <sys_check_LRU_lists+0xea>
f010d2fe:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010d302:	75 87                	jne    f010d28b <sys_check_LRU_lists+0xea>
				second_list_validation = 0;
				break;
			}
			idx_second_list++;
		}
		if(LIST_SIZE(&env->SecondList) != actual_second_list_size)
f010d304:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010d307:	8b 90 e4 05 00 00    	mov    0x5e4(%eax),%edx
f010d30d:	8b 45 14             	mov    0x14(%ebp),%eax
f010d310:	39 c2                	cmp    %eax,%edx
f010d312:	74 07                	je     f010d31b <sys_check_LRU_lists+0x17a>
			second_list_validation = 0;
f010d314:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
	}
	return active_list_validation&second_list_validation;
f010d31b:	8b 45 fc             	mov    -0x4(%ebp),%eax
f010d31e:	23 45 f8             	and    -0x8(%ebp),%eax
}
f010d321:	c9                   	leave  
f010d322:	c3                   	ret    

f010d323 <sys_check_LRU_lists_free>:



//2020
int sys_check_LRU_lists_free(uint32* list_content, int list_size)
{
f010d323:	55                   	push   %ebp
f010d324:	89 e5                	mov    %esp,%ebp
f010d326:	83 ec 30             	sub    $0x30,%esp
	struct Env* env = curenv;
f010d329:	a1 b4 1c 78 f0       	mov    0xf0781cb4,%eax
f010d32e:	89 45 ec             	mov    %eax,-0x14(%ebp)
	int list_validation_count = 0;
f010d331:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
	struct WorkingSetElement* ptr_WS_element;


	LIST_FOREACH(ptr_WS_element, &(env->ActiveList))
f010d338:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010d33b:	8b 80 c8 05 00 00    	mov    0x5c8(%eax),%eax
f010d341:	89 45 f8             	mov    %eax,-0x8(%ebp)
f010d344:	eb 65                	jmp    f010d3ab <sys_check_LRU_lists_free+0x88>
	{
		for(int var = 0; var < list_size; var++)
f010d346:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f010d34d:	eb 3a                	jmp    f010d389 <sys_check_LRU_lists_free+0x66>
		{
			if (ROUNDDOWN(ptr_WS_element->virtual_address, PAGE_SIZE) == ROUNDDOWN(list_content[var], PAGE_SIZE))
f010d34f:	8b 45 f8             	mov    -0x8(%ebp),%eax
f010d352:	8b 00                	mov    (%eax),%eax
f010d354:	89 45 e0             	mov    %eax,-0x20(%ebp)
f010d357:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010d35a:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f010d35f:	89 c2                	mov    %eax,%edx
f010d361:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010d364:	8d 0c 85 00 00 00 00 	lea    0x0(,%eax,4),%ecx
f010d36b:	8b 45 08             	mov    0x8(%ebp),%eax
f010d36e:	01 c8                	add    %ecx,%eax
f010d370:	8b 00                	mov    (%eax),%eax
f010d372:	89 45 dc             	mov    %eax,-0x24(%ebp)
f010d375:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010d378:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f010d37d:	39 c2                	cmp    %eax,%edx
f010d37f:	75 05                	jne    f010d386 <sys_check_LRU_lists_free+0x63>
			{
				list_validation_count++;
f010d381:	ff 45 fc             	incl   -0x4(%ebp)
				break;
f010d384:	eb 0b                	jmp    f010d391 <sys_check_LRU_lists_free+0x6e>
	struct WorkingSetElement* ptr_WS_element;


	LIST_FOREACH(ptr_WS_element, &(env->ActiveList))
	{
		for(int var = 0; var < list_size; var++)
f010d386:	ff 45 f4             	incl   -0xc(%ebp)
f010d389:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010d38c:	3b 45 0c             	cmp    0xc(%ebp),%eax
f010d38f:	7c be                	jl     f010d34f <sys_check_LRU_lists_free+0x2c>
			{
				list_validation_count++;
				break;
			}
		}
		if(list_validation_count > 0)
f010d391:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
f010d395:	7e 08                	jle    f010d39f <sys_check_LRU_lists_free+0x7c>
			return list_validation_count;
f010d397:	8b 45 fc             	mov    -0x4(%ebp),%eax
f010d39a:	e9 ed 00 00 00       	jmp    f010d48c <sys_check_LRU_lists_free+0x169>
	struct Env* env = curenv;
	int list_validation_count = 0;
	struct WorkingSetElement* ptr_WS_element;


	LIST_FOREACH(ptr_WS_element, &(env->ActiveList))
f010d39f:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010d3a2:	8b 80 d0 05 00 00    	mov    0x5d0(%eax),%eax
f010d3a8:	89 45 f8             	mov    %eax,-0x8(%ebp)
f010d3ab:	83 7d f8 00          	cmpl   $0x0,-0x8(%ebp)
f010d3af:	74 08                	je     f010d3b9 <sys_check_LRU_lists_free+0x96>
f010d3b1:	8b 45 f8             	mov    -0x8(%ebp),%eax
f010d3b4:	8b 40 10             	mov    0x10(%eax),%eax
f010d3b7:	eb 05                	jmp    f010d3be <sys_check_LRU_lists_free+0x9b>
f010d3b9:	b8 00 00 00 00       	mov    $0x0,%eax
f010d3be:	8b 55 ec             	mov    -0x14(%ebp),%edx
f010d3c1:	89 82 d0 05 00 00    	mov    %eax,0x5d0(%edx)
f010d3c7:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010d3ca:	8b 80 d0 05 00 00    	mov    0x5d0(%eax),%eax
f010d3d0:	85 c0                	test   %eax,%eax
f010d3d2:	0f 85 6e ff ff ff    	jne    f010d346 <sys_check_LRU_lists_free+0x23>
f010d3d8:	83 7d f8 00          	cmpl   $0x0,-0x8(%ebp)
f010d3dc:	0f 85 64 ff ff ff    	jne    f010d346 <sys_check_LRU_lists_free+0x23>
		if(list_validation_count > 0)
			return list_validation_count;
	}


	LIST_FOREACH(ptr_WS_element, &(env->SecondList))
f010d3e2:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010d3e5:	8b 80 d8 05 00 00    	mov    0x5d8(%eax),%eax
f010d3eb:	89 45 f8             	mov    %eax,-0x8(%ebp)
f010d3ee:	eb 62                	jmp    f010d452 <sys_check_LRU_lists_free+0x12f>
	{
		for(int var = 0; var < list_size; var++)
f010d3f0:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f010d3f7:	eb 3a                	jmp    f010d433 <sys_check_LRU_lists_free+0x110>
		{
			if (ROUNDDOWN(ptr_WS_element->virtual_address, PAGE_SIZE) == ROUNDDOWN(list_content[var], PAGE_SIZE))
f010d3f9:	8b 45 f8             	mov    -0x8(%ebp),%eax
f010d3fc:	8b 00                	mov    (%eax),%eax
f010d3fe:	89 45 e8             	mov    %eax,-0x18(%ebp)
f010d401:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010d404:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f010d409:	89 c2                	mov    %eax,%edx
f010d40b:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010d40e:	8d 0c 85 00 00 00 00 	lea    0x0(,%eax,4),%ecx
f010d415:	8b 45 08             	mov    0x8(%ebp),%eax
f010d418:	01 c8                	add    %ecx,%eax
f010d41a:	8b 00                	mov    (%eax),%eax
f010d41c:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f010d41f:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010d422:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f010d427:	39 c2                	cmp    %eax,%edx
f010d429:	75 05                	jne    f010d430 <sys_check_LRU_lists_free+0x10d>
			{
				list_validation_count++;
f010d42b:	ff 45 fc             	incl   -0x4(%ebp)
				break;
f010d42e:	eb 0b                	jmp    f010d43b <sys_check_LRU_lists_free+0x118>
	}


	LIST_FOREACH(ptr_WS_element, &(env->SecondList))
	{
		for(int var = 0; var < list_size; var++)
f010d430:	ff 45 f0             	incl   -0x10(%ebp)
f010d433:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010d436:	3b 45 0c             	cmp    0xc(%ebp),%eax
f010d439:	7c be                	jl     f010d3f9 <sys_check_LRU_lists_free+0xd6>
			{
				list_validation_count++;
				break;
			}
		}
		if(list_validation_count > 0)
f010d43b:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
f010d43f:	7e 05                	jle    f010d446 <sys_check_LRU_lists_free+0x123>
			return list_validation_count;
f010d441:	8b 45 fc             	mov    -0x4(%ebp),%eax
f010d444:	eb 46                	jmp    f010d48c <sys_check_LRU_lists_free+0x169>
		if(list_validation_count > 0)
			return list_validation_count;
	}


	LIST_FOREACH(ptr_WS_element, &(env->SecondList))
f010d446:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010d449:	8b 80 e0 05 00 00    	mov    0x5e0(%eax),%eax
f010d44f:	89 45 f8             	mov    %eax,-0x8(%ebp)
f010d452:	83 7d f8 00          	cmpl   $0x0,-0x8(%ebp)
f010d456:	74 08                	je     f010d460 <sys_check_LRU_lists_free+0x13d>
f010d458:	8b 45 f8             	mov    -0x8(%ebp),%eax
f010d45b:	8b 40 10             	mov    0x10(%eax),%eax
f010d45e:	eb 05                	jmp    f010d465 <sys_check_LRU_lists_free+0x142>
f010d460:	b8 00 00 00 00       	mov    $0x0,%eax
f010d465:	8b 55 ec             	mov    -0x14(%ebp),%edx
f010d468:	89 82 e0 05 00 00    	mov    %eax,0x5e0(%edx)
f010d46e:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010d471:	8b 80 e0 05 00 00    	mov    0x5e0(%eax),%eax
f010d477:	85 c0                	test   %eax,%eax
f010d479:	0f 85 71 ff ff ff    	jne    f010d3f0 <sys_check_LRU_lists_free+0xcd>
f010d47f:	83 7d f8 00          	cmpl   $0x0,-0x8(%ebp)
f010d483:	0f 85 67 ff ff ff    	jne    f010d3f0 <sys_check_LRU_lists_free+0xcd>
			return list_validation_count;

	}


	return list_validation_count;
f010d489:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
f010d48c:	c9                   	leave  
f010d48d:	c3                   	ret    

f010d48e <syscall>:
/*****************************************************************************/
/************************* SYSTEM CALLS DISPATCHER ***************************/
/*****************************************************************************/
// Dispatches to the correct kernel function, passing the arguments.
uint32 syscall(uint32 syscallno, uint32 a1, uint32 a2, uint32 a3, uint32 a4, uint32 a5)
{
f010d48e:	55                   	push   %ebp
f010d48f:	89 e5                	mov    %esp,%ebp
f010d491:	56                   	push   %esi
f010d492:	53                   	push   %ebx
f010d493:	83 ec 10             	sub    $0x10,%esp
	// Call the function corresponding to the 'syscallno' parameter.
	// Return any appropriate return value.
	// LAB 3: Your code here.
	switch(syscallno)
f010d496:	83 7d 08 30          	cmpl   $0x30,0x8(%ebp)
f010d49a:	0f 87 0e 04 00 00    	ja     f010d8ae <syscall+0x420>
f010d4a0:	8b 45 08             	mov    0x8(%ebp),%eax
f010d4a3:	c1 e0 02             	shl    $0x2,%eax
f010d4a6:	05 fc 79 13 f0       	add    $0xf01379fc,%eax
f010d4ab:	8b 00                	mov    (%eax),%eax
f010d4ad:	ff e0                	jmp    *%eax
	{
	case SYS_cputs:
		sys_cputs((const char*)a1,a2,(uint8)a3);
f010d4af:	8b 45 14             	mov    0x14(%ebp),%eax
f010d4b2:	0f b6 d0             	movzbl %al,%edx
f010d4b5:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d4b8:	83 ec 04             	sub    $0x4,%esp
f010d4bb:	52                   	push   %edx
f010d4bc:	ff 75 10             	pushl  0x10(%ebp)
f010d4bf:	50                   	push   %eax
f010d4c0:	e8 db f4 ff ff       	call   f010c9a0 <sys_cputs>
f010d4c5:	83 c4 10             	add    $0x10,%esp
		return 0;
f010d4c8:	b8 00 00 00 00       	mov    $0x0,%eax
f010d4cd:	e9 e1 03 00 00       	jmp    f010d8b3 <syscall+0x425>
		break;
	case SYS_cgetc:
		return sys_cgetc();
f010d4d2:	e8 3e f5 ff ff       	call   f010ca15 <sys_cgetc>
f010d4d7:	e9 d7 03 00 00       	jmp    f010d8b3 <syscall+0x425>
		break;
	case SYS_calc_req_frames:
		return sys_calculate_required_frames(a1, a2);
f010d4dc:	83 ec 08             	sub    $0x8,%esp
f010d4df:	ff 75 10             	pushl  0x10(%ebp)
f010d4e2:	ff 75 0c             	pushl  0xc(%ebp)
f010d4e5:	e8 91 f6 ff ff       	call   f010cb7b <sys_calculate_required_frames>
f010d4ea:	83 c4 10             	add    $0x10,%esp
f010d4ed:	e9 c1 03 00 00       	jmp    f010d8b3 <syscall+0x425>
		break;
	case SYS_calc_free_frames:
		return sys_calculate_free_frames();
f010d4f2:	e8 a6 f6 ff ff       	call   f010cb9d <sys_calculate_free_frames>
f010d4f7:	e9 b7 03 00 00       	jmp    f010d8b3 <syscall+0x425>
		break;
	case SYS_calc_modified_frames:
		return sys_calculate_modified_frames();
f010d4fc:	e8 bb f6 ff ff       	call   f010cbbc <sys_calculate_modified_frames>
f010d501:	e9 ad 03 00 00       	jmp    f010d8b3 <syscall+0x425>
		break;
	case SYS_calc_notmod_frames:
		return sys_calculate_notmod_frames();
f010d506:	e8 cb f6 ff ff       	call   f010cbd6 <sys_calculate_notmod_frames>
f010d50b:	e9 a3 03 00 00       	jmp    f010d8b3 <syscall+0x425>
		break;

	case SYS_pf_calc_allocated_pages:
		return sys_pf_calculate_allocated_pages();
f010d510:	e8 33 f7 ff ff       	call   f010cc48 <sys_pf_calculate_allocated_pages>
f010d515:	e9 99 03 00 00       	jmp    f010d8b3 <syscall+0x425>
		break;
	case SYS_calculate_pages_tobe_removed_ready_exit:
		return sys_calculate_pages_tobe_removed_ready_exit(a1);
f010d51a:	83 ec 0c             	sub    $0xc,%esp
f010d51d:	ff 75 0c             	pushl  0xc(%ebp)
f010d520:	e8 cb f6 ff ff       	call   f010cbf0 <sys_calculate_pages_tobe_removed_ready_exit>
f010d525:	83 c4 10             	add    $0x10,%esp
f010d528:	e9 86 03 00 00       	jmp    f010d8b3 <syscall+0x425>
		break;
	case SYS_scarce_memory:
		sys_scarce_memory();
f010d52d:	e8 d4 f6 ff ff       	call   f010cc06 <sys_scarce_memory>
		return 0;
f010d532:	b8 00 00 00 00       	mov    $0x0,%eax
f010d537:	e9 77 03 00 00       	jmp    f010d8b3 <syscall+0x425>
		break;
	case SYS_free_user_mem:
		sys_free_user_mem(a1, a2);
f010d53c:	83 ec 08             	sub    $0x8,%esp
f010d53f:	ff 75 10             	pushl  0x10(%ebp)
f010d542:	ff 75 0c             	pushl  0xc(%ebp)
f010d545:	e8 17 f7 ff ff       	call   f010cc61 <sys_free_user_mem>
f010d54a:	83 c4 10             	add    $0x10,%esp
		return 0;
f010d54d:	b8 00 00 00 00       	mov    $0x0,%eax
f010d552:	e9 5c 03 00 00       	jmp    f010d8b3 <syscall+0x425>
		break;
		//======================
	case SYS_allocate_page:
		__sys_allocate_page((void*)a1, a2);
f010d557:	8b 55 10             	mov    0x10(%ebp),%edx
f010d55a:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d55d:	83 ec 08             	sub    $0x8,%esp
f010d560:	52                   	push   %edx
f010d561:	50                   	push   %eax
f010d562:	e8 c1 f4 ff ff       	call   f010ca28 <__sys_allocate_page>
f010d567:	83 c4 10             	add    $0x10,%esp
		return 0;
f010d56a:	b8 00 00 00 00       	mov    $0x0,%eax
f010d56f:	e9 3f 03 00 00       	jmp    f010d8b3 <syscall+0x425>
		break;
	case SYS_map_frame:
		__sys_map_frame(a1, (void*)a2, a3, (void*)a4, a5);
f010d574:	8b 75 1c             	mov    0x1c(%ebp),%esi
f010d577:	8b 5d 18             	mov    0x18(%ebp),%ebx
f010d57a:	8b 4d 14             	mov    0x14(%ebp),%ecx
f010d57d:	8b 55 10             	mov    0x10(%ebp),%edx
f010d580:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d583:	83 ec 0c             	sub    $0xc,%esp
f010d586:	56                   	push   %esi
f010d587:	53                   	push   %ebx
f010d588:	51                   	push   %ecx
f010d589:	52                   	push   %edx
f010d58a:	50                   	push   %eax
f010d58b:	e8 b1 f5 ff ff       	call   f010cb41 <__sys_map_frame>
f010d590:	83 c4 20             	add    $0x20,%esp
		return 0;
f010d593:	b8 00 00 00 00       	mov    $0x0,%eax
f010d598:	e9 16 03 00 00       	jmp    f010d8b3 <syscall+0x425>
		break;
	case SYS_unmap_frame:
		__sys_unmap_frame(a1, (void*)a2);
f010d59d:	8b 55 10             	mov    0x10(%ebp),%edx
f010d5a0:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d5a3:	83 ec 08             	sub    $0x8,%esp
f010d5a6:	52                   	push   %edx
f010d5a7:	50                   	push   %eax
f010d5a8:	e8 b1 f5 ff ff       	call   f010cb5e <__sys_unmap_frame>
f010d5ad:	83 c4 10             	add    $0x10,%esp
		return 0;
f010d5b0:	b8 00 00 00 00       	mov    $0x0,%eax
f010d5b5:	e9 f9 02 00 00       	jmp    f010d8b3 <syscall+0x425>
		break;

		//2022
	case SYS_allocate_chunk_in_mem:
		sys_allocate_chunk(a1, (uint32)a2, a3);
f010d5ba:	83 ec 04             	sub    $0x4,%esp
f010d5bd:	ff 75 14             	pushl  0x14(%ebp)
f010d5c0:	ff 75 10             	pushl  0x10(%ebp)
f010d5c3:	ff 75 0c             	pushl  0xc(%ebp)
f010d5c6:	e8 f8 f6 ff ff       	call   f010ccc3 <sys_allocate_chunk>
f010d5cb:	83 c4 10             	add    $0x10,%esp
		return 0;
f010d5ce:	b8 00 00 00 00       	mov    $0x0,%eax
f010d5d3:	e9 db 02 00 00       	jmp    f010d8b3 <syscall+0x425>
		break;
	case SYS_disableINTR:
		sys_disable_interrupt();
f010d5d8:	e8 41 f7 ff ff       	call   f010cd1e <sys_disable_interrupt>
		return 0;
f010d5dd:	b8 00 00 00 00       	mov    $0x0,%eax
f010d5e2:	e9 cc 02 00 00       	jmp    f010d8b3 <syscall+0x425>
		break;

	case SYS_enableINTR:
		sys_enable_interrupt();
f010d5e7:	e8 4c f7 ff ff       	call   f010cd38 <sys_enable_interrupt>
		return 0;
f010d5ec:	b8 00 00 00 00       	mov    $0x0,%eax
f010d5f1:	e9 bd 02 00 00       	jmp    f010d8b3 <syscall+0x425>
		break;

	case SYS_cputc:
		sys_cputc((const char)a1);
f010d5f6:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d5f9:	0f be c0             	movsbl %al,%eax
f010d5fc:	83 ec 0c             	sub    $0xc,%esp
f010d5ff:	50                   	push   %eax
f010d600:	e8 ec f3 ff ff       	call   f010c9f1 <sys_cputc>
f010d605:	83 c4 10             	add    $0x10,%esp
		return 0;
f010d608:	b8 00 00 00 00       	mov    $0x0,%eax
f010d60d:	e9 a1 02 00 00       	jmp    f010d8b3 <syscall+0x425>
		break;

	case SYS_clearFFL:
		sys_clearFFL((const char)a1);
f010d612:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d615:	0f be c0             	movsbl %al,%eax
f010d618:	83 ec 0c             	sub    $0xc,%esp
f010d61b:	50                   	push   %eax
f010d61c:	e8 f3 f5 ff ff       	call   f010cc14 <sys_clearFFL>
f010d621:	83 c4 10             	add    $0x10,%esp
		return 0;
f010d624:	b8 00 00 00 00       	mov    $0x0,%eax
f010d629:	e9 85 02 00 00       	jmp    f010d8b3 <syscall+0x425>
		break;

	case SYS_create_semaphore:
		return sys_createSemaphore((char*)a1, a2);
f010d62e:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d631:	83 ec 08             	sub    $0x8,%esp
f010d634:	ff 75 10             	pushl  0x10(%ebp)
f010d637:	50                   	push   %eax
f010d638:	e8 15 f7 ff ff       	call   f010cd52 <sys_createSemaphore>
f010d63d:	83 c4 10             	add    $0x10,%esp
f010d640:	e9 6e 02 00 00       	jmp    f010d8b3 <syscall+0x425>
		break;

	case SYS_wait_semaphore:
		sys_waitSemaphore((int32)a1, (char*)a2);
f010d645:	8b 55 10             	mov    0x10(%ebp),%edx
f010d648:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d64b:	83 ec 08             	sub    $0x8,%esp
f010d64e:	52                   	push   %edx
f010d64f:	50                   	push   %eax
f010d650:	e8 1f f7 ff ff       	call   f010cd74 <sys_waitSemaphore>
f010d655:	83 c4 10             	add    $0x10,%esp
		return 0;
f010d658:	b8 00 00 00 00       	mov    $0x0,%eax
f010d65d:	e9 51 02 00 00       	jmp    f010d8b3 <syscall+0x425>
		break;

	case SYS_signal_semaphore:
		sys_signalSemaphore((int32)a1, (char*)a2);
f010d662:	8b 55 10             	mov    0x10(%ebp),%edx
f010d665:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d668:	83 ec 08             	sub    $0x8,%esp
f010d66b:	52                   	push   %edx
f010d66c:	50                   	push   %eax
f010d66d:	e8 1c f7 ff ff       	call   f010cd8e <sys_signalSemaphore>
f010d672:	83 c4 10             	add    $0x10,%esp
		return 0;
f010d675:	b8 00 00 00 00       	mov    $0x0,%eax
f010d67a:	e9 34 02 00 00       	jmp    f010d8b3 <syscall+0x425>
		break;

	case SYS_get_semaphore_value:
		return sys_getSemaphoreValue((int32)a1, (char*)a2);
f010d67f:	8b 55 10             	mov    0x10(%ebp),%edx
f010d682:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d685:	83 ec 08             	sub    $0x8,%esp
f010d688:	52                   	push   %edx
f010d689:	50                   	push   %eax
f010d68a:	e8 19 f7 ff ff       	call   f010cda8 <sys_getSemaphoreValue>
f010d68f:	83 c4 10             	add    $0x10,%esp
f010d692:	e9 1c 02 00 00       	jmp    f010d8b3 <syscall+0x425>
		break;

	case SYS_create_shared_object:
		return sys_createSharedObject((char*)a1, a2, a3, (void*)a4);
f010d697:	8b 4d 18             	mov    0x18(%ebp),%ecx
f010d69a:	8b 45 14             	mov    0x14(%ebp),%eax
f010d69d:	0f b6 d0             	movzbl %al,%edx
f010d6a0:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d6a3:	51                   	push   %ecx
f010d6a4:	52                   	push   %edx
f010d6a5:	ff 75 10             	pushl  0x10(%ebp)
f010d6a8:	50                   	push   %eax
f010d6a9:	e8 61 f7 ff ff       	call   f010ce0f <sys_createSharedObject>
f010d6ae:	83 c4 10             	add    $0x10,%esp
f010d6b1:	e9 fd 01 00 00       	jmp    f010d8b3 <syscall+0x425>
		break;

	case SYS_get_shared_object:
		return sys_getSharedObject((int32)a1, (char*)a2, (void*)a3);
f010d6b6:	8b 4d 14             	mov    0x14(%ebp),%ecx
f010d6b9:	8b 55 10             	mov    0x10(%ebp),%edx
f010d6bc:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d6bf:	83 ec 04             	sub    $0x4,%esp
f010d6c2:	51                   	push   %ecx
f010d6c3:	52                   	push   %edx
f010d6c4:	50                   	push   %eax
f010d6c5:	e8 8e f7 ff ff       	call   f010ce58 <sys_getSharedObject>
f010d6ca:	83 c4 10             	add    $0x10,%esp
f010d6cd:	e9 e1 01 00 00       	jmp    f010d8b3 <syscall+0x425>
		break;

	case SYS_free_shared_object:
		return sys_freeSharedObject((int32)a1, (void *)a2);
f010d6d2:	8b 55 10             	mov    0x10(%ebp),%edx
f010d6d5:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d6d8:	83 ec 08             	sub    $0x8,%esp
f010d6db:	52                   	push   %edx
f010d6dc:	50                   	push   %eax
f010d6dd:	e8 92 f7 ff ff       	call   f010ce74 <sys_freeSharedObject>
f010d6e2:	83 c4 10             	add    $0x10,%esp
f010d6e5:	e9 c9 01 00 00       	jmp    f010d8b3 <syscall+0x425>
		break;

	case SYS_get_size_of_shared_object:
		return sys_getSizeOfSharedObject((int32)a1, (char*)a2);
f010d6ea:	8b 55 10             	mov    0x10(%ebp),%edx
f010d6ed:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d6f0:	83 ec 08             	sub    $0x8,%esp
f010d6f3:	52                   	push   %edx
f010d6f4:	50                   	push   %eax
f010d6f5:	e8 45 f7 ff ff       	call   f010ce3f <sys_getSizeOfSharedObject>
f010d6fa:	83 c4 10             	add    $0x10,%esp
f010d6fd:	e9 b1 01 00 00       	jmp    f010d8b3 <syscall+0x425>
		break;

	case SYS_get_max_shares:
		return sys_getMaxShares();
f010d702:	e8 86 f7 ff ff       	call   f010ce8d <sys_getMaxShares>
f010d707:	e9 a7 01 00 00       	jmp    f010d8b3 <syscall+0x425>
		break;

	case SYS_create_env:
		return sys_create_env((char*)a1, (uint32)a2, (uint32)a3, (uint32)a4);
f010d70c:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d70f:	ff 75 18             	pushl  0x18(%ebp)
f010d712:	ff 75 14             	pushl  0x14(%ebp)
f010d715:	ff 75 10             	pushl  0x10(%ebp)
f010d718:	50                   	push   %eax
f010d719:	e8 86 f8 ff ff       	call   f010cfa4 <sys_create_env>
f010d71e:	83 c4 10             	add    $0x10,%esp
f010d721:	e9 8d 01 00 00       	jmp    f010d8b3 <syscall+0x425>
		break;

	case SYS_run_env:
		sys_run_env((int32)a1);
f010d726:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d729:	83 ec 0c             	sub    $0xc,%esp
f010d72c:	50                   	push   %eax
f010d72d:	e8 b2 f8 ff ff       	call   f010cfe4 <sys_run_env>
f010d732:	83 c4 10             	add    $0x10,%esp
		return 0;
f010d735:	b8 00 00 00 00       	mov    $0x0,%eax
f010d73a:	e9 74 01 00 00       	jmp    f010d8b3 <syscall+0x425>
		break;
	case SYS_getenvindex:
		return sys_getenvindex();
f010d73f:	e8 60 f7 ff ff       	call   f010cea4 <sys_getenvindex>
f010d744:	e9 6a 01 00 00       	jmp    f010d8b3 <syscall+0x425>
		break;
	case SYS_getenvid:
		return sys_getenvid();
f010d749:	e8 49 f7 ff ff       	call   f010ce97 <sys_getenvid>
f010d74e:	e9 60 01 00 00       	jmp    f010d8b3 <syscall+0x425>
		break;
	case SYS_getparentenvid:
		return sys_getparentenvid();
f010d753:	e8 99 f7 ff ff       	call   f010cef1 <sys_getparentenvid>
f010d758:	e9 56 01 00 00       	jmp    f010d8b3 <syscall+0x425>
		break;
	case SYS_destroy_env:
		return sys_destroy_env(a1);
f010d75d:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d760:	83 ec 0c             	sub    $0xc,%esp
f010d763:	50                   	push   %eax
f010d764:	e8 95 f7 ff ff       	call   f010cefe <sys_destroy_env>
f010d769:	83 c4 10             	add    $0x10,%esp
f010d76c:	e9 42 01 00 00       	jmp    f010d8b3 <syscall+0x425>
		break;
	case SYS_exit_env:
		sys_exit_env();
f010d771:	e8 20 f8 ff ff       	call   f010cf96 <sys_exit_env>
		return 0;
f010d776:	b8 00 00 00 00       	mov    $0x0,%eax
f010d77b:	e9 33 01 00 00       	jmp    f010d8b3 <syscall+0x425>
		break;
	case SYS_get_virtual_time:
	{
		struct uint64 res = sys_get_virtual_time();
f010d780:	8d 45 e8             	lea    -0x18(%ebp),%eax
f010d783:	83 ec 0c             	sub    $0xc,%esp
f010d786:	50                   	push   %eax
f010d787:	e8 70 f8 ff ff       	call   f010cffc <sys_get_virtual_time>
f010d78c:	83 c4 0c             	add    $0xc,%esp
		uint32* ptrlow = ((uint32*)a1);
f010d78f:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d792:	89 45 f4             	mov    %eax,-0xc(%ebp)
		uint32* ptrhi = ((uint32*)a2);
f010d795:	8b 45 10             	mov    0x10(%ebp),%eax
f010d798:	89 45 f0             	mov    %eax,-0x10(%ebp)
		*ptrlow = res.low;
f010d79b:	8b 55 e8             	mov    -0x18(%ebp),%edx
f010d79e:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010d7a1:	89 10                	mov    %edx,(%eax)
		*ptrhi = res.hi;
f010d7a3:	8b 55 ec             	mov    -0x14(%ebp),%edx
f010d7a6:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010d7a9:	89 10                	mov    %edx,(%eax)
		return 0;
f010d7ab:	b8 00 00 00 00       	mov    $0x0,%eax
f010d7b0:	e9 fe 00 00 00       	jmp    f010d8b3 <syscall+0x425>
		break;
	}
	case SYS_move_user_mem:
		sys_move_user_mem(a1, a2, a3);
f010d7b5:	83 ec 04             	sub    $0x4,%esp
f010d7b8:	ff 75 14             	pushl  0x14(%ebp)
f010d7bb:	ff 75 10             	pushl  0x10(%ebp)
f010d7be:	ff 75 0c             	pushl  0xc(%ebp)
f010d7c1:	e8 20 f5 ff ff       	call   f010cce6 <sys_move_user_mem>
f010d7c6:	83 c4 10             	add    $0x10,%esp
		return 0;
f010d7c9:	b8 00 00 00 00       	mov    $0x0,%eax
f010d7ce:	e9 e0 00 00 00       	jmp    f010d8b3 <syscall+0x425>
		break;
	case SYS_rcr2:
		return sys_rcr2();
f010d7d3:	e8 53 f8 ff ff       	call   f010d02b <sys_rcr2>
f010d7d8:	e9 d6 00 00 00       	jmp    f010d8b3 <syscall+0x425>
		break;
	case SYS_bypassPageFault:
		sys_bypassPageFault(a1);
f010d7dd:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d7e0:	0f b6 c0             	movzbl %al,%eax
f010d7e3:	83 ec 0c             	sub    $0xc,%esp
f010d7e6:	50                   	push   %eax
f010d7e7:	e8 51 f8 ff ff       	call   f010d03d <sys_bypassPageFault>
f010d7ec:	83 c4 10             	add    $0x10,%esp
		return 0;
f010d7ef:	b8 00 00 00 00       	mov    $0x0,%eax
f010d7f4:	e9 ba 00 00 00       	jmp    f010d8b3 <syscall+0x425>

	case SYS_rsttst:
		rsttst();
f010d7f9:	e8 56 f8 ff ff       	call   f010d054 <rsttst>
		return 0;
f010d7fe:	b8 00 00 00 00       	mov    $0x0,%eax
f010d803:	e9 ab 00 00 00       	jmp    f010d8b3 <syscall+0x425>
	case SYS_inctst:
		inctst();
f010d808:	e8 57 f8 ff ff       	call   f010d064 <inctst>
		return 0;
f010d80d:	b8 00 00 00 00       	mov    $0x0,%eax
f010d812:	e9 9c 00 00 00       	jmp    f010d8b3 <syscall+0x425>
	case SYS_chktst:
		chktst(a1);
f010d817:	83 ec 0c             	sub    $0xc,%esp
f010d81a:	ff 75 0c             	pushl  0xc(%ebp)
f010d81d:	e8 44 f9 ff ff       	call   f010d166 <chktst>
f010d822:	83 c4 10             	add    $0x10,%esp
		return 0;
f010d825:	b8 00 00 00 00       	mov    $0x0,%eax
f010d82a:	e9 84 00 00 00       	jmp    f010d8b3 <syscall+0x425>
	case SYS_gettst:
		return gettst();
f010d82f:	e8 41 f8 ff ff       	call   f010d075 <gettst>
f010d834:	eb 7d                	jmp    f010d8b3 <syscall+0x425>
	case SYS_testNum:
		tst(a1, a2, a3, (char)a4, a5);
f010d836:	8b 55 1c             	mov    0x1c(%ebp),%edx
f010d839:	8b 45 18             	mov    0x18(%ebp),%eax
f010d83c:	0f be c0             	movsbl %al,%eax
f010d83f:	83 ec 0c             	sub    $0xc,%esp
f010d842:	52                   	push   %edx
f010d843:	50                   	push   %eax
f010d844:	ff 75 14             	pushl  0x14(%ebp)
f010d847:	ff 75 10             	pushl  0x10(%ebp)
f010d84a:	ff 75 0c             	pushl  0xc(%ebp)
f010d84d:	e8 2d f8 ff ff       	call   f010d07f <tst>
f010d852:	83 c4 20             	add    $0x20,%esp
		return 0;
f010d855:	b8 00 00 00 00       	mov    $0x0,%eax
f010d85a:	eb 57                	jmp    f010d8b3 <syscall+0x425>

	case SYS_get_heap_strategy:
		return sys_get_heap_strategy();
f010d85c:	e8 a5 f4 ff ff       	call   f010cd06 <sys_get_heap_strategy>
f010d861:	eb 50                	jmp    f010d8b3 <syscall+0x425>

	case SYS_set_heap_strategy:
		sys_set_uheap_strategy(a1);
f010d863:	83 ec 0c             	sub    $0xc,%esp
f010d866:	ff 75 0c             	pushl  0xc(%ebp)
f010d869:	e8 a2 f4 ff ff       	call   f010cd10 <sys_set_uheap_strategy>
f010d86e:	83 c4 10             	add    $0x10,%esp
		return 0;
f010d871:	b8 00 00 00 00       	mov    $0x0,%eax
f010d876:	eb 3b                	jmp    f010d8b3 <syscall+0x425>

	case SYS_check_LRU_lists:
		return sys_check_LRU_lists((uint32*)a1, (uint32*)a2, (int)a3, (int)a4);
f010d878:	8b 5d 18             	mov    0x18(%ebp),%ebx
f010d87b:	8b 4d 14             	mov    0x14(%ebp),%ecx
f010d87e:	8b 55 10             	mov    0x10(%ebp),%edx
f010d881:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d884:	53                   	push   %ebx
f010d885:	51                   	push   %ecx
f010d886:	52                   	push   %edx
f010d887:	50                   	push   %eax
f010d888:	e8 14 f9 ff ff       	call   f010d1a1 <sys_check_LRU_lists>
f010d88d:	83 c4 10             	add    $0x10,%esp
f010d890:	eb 21                	jmp    f010d8b3 <syscall+0x425>

	case SYS_check_LRU_lists_free:
		return sys_check_LRU_lists_free((uint32*)a1, (int)a2);
f010d892:	8b 55 10             	mov    0x10(%ebp),%edx
f010d895:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d898:	83 ec 08             	sub    $0x8,%esp
f010d89b:	52                   	push   %edx
f010d89c:	50                   	push   %eax
f010d89d:	e8 81 fa ff ff       	call   f010d323 <sys_check_LRU_lists_free>
f010d8a2:	83 c4 10             	add    $0x10,%esp
f010d8a5:	eb 0c                	jmp    f010d8b3 <syscall+0x425>

	case NSYSCALLS:
		return 	-E_INVAL;
f010d8a7:	b8 03 00 00 00       	mov    $0x3,%eax
f010d8ac:	eb 05                	jmp    f010d8b3 <syscall+0x425>
		break;
	}
	//panic("syscall not implemented");
	return -E_INVAL;
f010d8ae:	b8 03 00 00 00       	mov    $0x3,%eax
}
f010d8b3:	8d 65 f8             	lea    -0x8(%ebp),%esp
f010d8b6:	5b                   	pop    %ebx
f010d8b7:	5e                   	pop    %esi
f010d8b8:	5d                   	pop    %ebp
f010d8b9:	c3                   	ret    

f010d8ba <stab_binsearch>:
//	will exit setting left = 118, right = 554.
//
static void
stab_binsearch(const struct Stab *stabs, int *region_left, int *region_right,
	       int type, uint32*  addr)
{
f010d8ba:	55                   	push   %ebp
f010d8bb:	89 e5                	mov    %esp,%ebp
f010d8bd:	83 ec 20             	sub    $0x20,%esp
	int l = *region_left, r = *region_right, any_matches = 0;
f010d8c0:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d8c3:	8b 00                	mov    (%eax),%eax
f010d8c5:	89 45 fc             	mov    %eax,-0x4(%ebp)
f010d8c8:	8b 45 10             	mov    0x10(%ebp),%eax
f010d8cb:	8b 00                	mov    (%eax),%eax
f010d8cd:	89 45 f8             	mov    %eax,-0x8(%ebp)
f010d8d0:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

	while (l <= r) {
f010d8d7:	e9 ca 00 00 00       	jmp    f010d9a6 <stab_binsearch+0xec>
		int true_m = (l + r) / 2, m = true_m;
f010d8dc:	8b 55 fc             	mov    -0x4(%ebp),%edx
f010d8df:	8b 45 f8             	mov    -0x8(%ebp),%eax
f010d8e2:	01 d0                	add    %edx,%eax
f010d8e4:	89 c2                	mov    %eax,%edx
f010d8e6:	c1 ea 1f             	shr    $0x1f,%edx
f010d8e9:	01 d0                	add    %edx,%eax
f010d8eb:	d1 f8                	sar    %eax
f010d8ed:	89 45 ec             	mov    %eax,-0x14(%ebp)
f010d8f0:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010d8f3:	89 45 f0             	mov    %eax,-0x10(%ebp)

		// search for earliest stab with right type
		while (m >= l && stabs[m].n_type != type)
f010d8f6:	eb 03                	jmp    f010d8fb <stab_binsearch+0x41>
			m--;
f010d8f8:	ff 4d f0             	decl   -0x10(%ebp)

	while (l <= r) {
		int true_m = (l + r) / 2, m = true_m;

		// search for earliest stab with right type
		while (m >= l && stabs[m].n_type != type)
f010d8fb:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010d8fe:	3b 45 fc             	cmp    -0x4(%ebp),%eax
f010d901:	7c 1e                	jl     f010d921 <stab_binsearch+0x67>
f010d903:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010d906:	89 d0                	mov    %edx,%eax
f010d908:	01 c0                	add    %eax,%eax
f010d90a:	01 d0                	add    %edx,%eax
f010d90c:	c1 e0 02             	shl    $0x2,%eax
f010d90f:	89 c2                	mov    %eax,%edx
f010d911:	8b 45 08             	mov    0x8(%ebp),%eax
f010d914:	01 d0                	add    %edx,%eax
f010d916:	8a 40 04             	mov    0x4(%eax),%al
f010d919:	0f b6 c0             	movzbl %al,%eax
f010d91c:	3b 45 14             	cmp    0x14(%ebp),%eax
f010d91f:	75 d7                	jne    f010d8f8 <stab_binsearch+0x3e>
			m--;
		if (m < l) {	// no match in [l, m]
f010d921:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010d924:	3b 45 fc             	cmp    -0x4(%ebp),%eax
f010d927:	7d 09                	jge    f010d932 <stab_binsearch+0x78>
			l = true_m + 1;
f010d929:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010d92c:	40                   	inc    %eax
f010d92d:	89 45 fc             	mov    %eax,-0x4(%ebp)
			continue;
f010d930:	eb 74                	jmp    f010d9a6 <stab_binsearch+0xec>
		}

		// actual binary search
		any_matches = 1;
f010d932:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
		if (stabs[m].n_value < addr) {
f010d939:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010d93c:	89 d0                	mov    %edx,%eax
f010d93e:	01 c0                	add    %eax,%eax
f010d940:	01 d0                	add    %edx,%eax
f010d942:	c1 e0 02             	shl    $0x2,%eax
f010d945:	89 c2                	mov    %eax,%edx
f010d947:	8b 45 08             	mov    0x8(%ebp),%eax
f010d94a:	01 d0                	add    %edx,%eax
f010d94c:	8b 40 08             	mov    0x8(%eax),%eax
f010d94f:	3b 45 18             	cmp    0x18(%ebp),%eax
f010d952:	73 11                	jae    f010d965 <stab_binsearch+0xab>
			*region_left = m;
f010d954:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d957:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010d95a:	89 10                	mov    %edx,(%eax)
			l = true_m + 1;
f010d95c:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010d95f:	40                   	inc    %eax
f010d960:	89 45 fc             	mov    %eax,-0x4(%ebp)
f010d963:	eb 41                	jmp    f010d9a6 <stab_binsearch+0xec>
		} else if (stabs[m].n_value > addr) {
f010d965:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010d968:	89 d0                	mov    %edx,%eax
f010d96a:	01 c0                	add    %eax,%eax
f010d96c:	01 d0                	add    %edx,%eax
f010d96e:	c1 e0 02             	shl    $0x2,%eax
f010d971:	89 c2                	mov    %eax,%edx
f010d973:	8b 45 08             	mov    0x8(%ebp),%eax
f010d976:	01 d0                	add    %edx,%eax
f010d978:	8b 40 08             	mov    0x8(%eax),%eax
f010d97b:	3b 45 18             	cmp    0x18(%ebp),%eax
f010d97e:	76 14                	jbe    f010d994 <stab_binsearch+0xda>
			*region_right = m - 1;
f010d980:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010d983:	8d 50 ff             	lea    -0x1(%eax),%edx
f010d986:	8b 45 10             	mov    0x10(%ebp),%eax
f010d989:	89 10                	mov    %edx,(%eax)
			r = m - 1;
f010d98b:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010d98e:	48                   	dec    %eax
f010d98f:	89 45 f8             	mov    %eax,-0x8(%ebp)
f010d992:	eb 12                	jmp    f010d9a6 <stab_binsearch+0xec>
		} else {
			// exact match for 'addr', but continue loop to find
			// *region_right
			*region_left = m;
f010d994:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d997:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010d99a:	89 10                	mov    %edx,(%eax)
			l = m;
f010d99c:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010d99f:	89 45 fc             	mov    %eax,-0x4(%ebp)
			addr++;
f010d9a2:	83 45 18 04          	addl   $0x4,0x18(%ebp)
stab_binsearch(const struct Stab *stabs, int *region_left, int *region_right,
	       int type, uint32*  addr)
{
	int l = *region_left, r = *region_right, any_matches = 0;

	while (l <= r) {
f010d9a6:	8b 45 fc             	mov    -0x4(%ebp),%eax
f010d9a9:	3b 45 f8             	cmp    -0x8(%ebp),%eax
f010d9ac:	0f 8e 2a ff ff ff    	jle    f010d8dc <stab_binsearch+0x22>
			l = m;
			addr++;
		}
	}

	if (!any_matches)
f010d9b2:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010d9b6:	75 0f                	jne    f010d9c7 <stab_binsearch+0x10d>
		*region_right = *region_left - 1;
f010d9b8:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d9bb:	8b 00                	mov    (%eax),%eax
f010d9bd:	8d 50 ff             	lea    -0x1(%eax),%edx
f010d9c0:	8b 45 10             	mov    0x10(%ebp),%eax
f010d9c3:	89 10                	mov    %edx,(%eax)
		     l > *region_left && stabs[l].n_type != type;
		     l--)
			/* do nothing */;
		*region_left = l;
	}
}
f010d9c5:	eb 3d                	jmp    f010da04 <stab_binsearch+0x14a>

	if (!any_matches)
		*region_right = *region_left - 1;
	else {
		// find rightmost region containing 'addr'
		for (l = *region_right;
f010d9c7:	8b 45 10             	mov    0x10(%ebp),%eax
f010d9ca:	8b 00                	mov    (%eax),%eax
f010d9cc:	89 45 fc             	mov    %eax,-0x4(%ebp)
f010d9cf:	eb 03                	jmp    f010d9d4 <stab_binsearch+0x11a>
		     l > *region_left && stabs[l].n_type != type;
		     l--)
f010d9d1:	ff 4d fc             	decl   -0x4(%ebp)
	if (!any_matches)
		*region_right = *region_left - 1;
	else {
		// find rightmost region containing 'addr'
		for (l = *region_right;
		     l > *region_left && stabs[l].n_type != type;
f010d9d4:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d9d7:	8b 00                	mov    (%eax),%eax

	if (!any_matches)
		*region_right = *region_left - 1;
	else {
		// find rightmost region containing 'addr'
		for (l = *region_right;
f010d9d9:	3b 45 fc             	cmp    -0x4(%ebp),%eax
f010d9dc:	7d 1e                	jge    f010d9fc <stab_binsearch+0x142>
		     l > *region_left && stabs[l].n_type != type;
f010d9de:	8b 55 fc             	mov    -0x4(%ebp),%edx
f010d9e1:	89 d0                	mov    %edx,%eax
f010d9e3:	01 c0                	add    %eax,%eax
f010d9e5:	01 d0                	add    %edx,%eax
f010d9e7:	c1 e0 02             	shl    $0x2,%eax
f010d9ea:	89 c2                	mov    %eax,%edx
f010d9ec:	8b 45 08             	mov    0x8(%ebp),%eax
f010d9ef:	01 d0                	add    %edx,%eax
f010d9f1:	8a 40 04             	mov    0x4(%eax),%al
f010d9f4:	0f b6 c0             	movzbl %al,%eax
f010d9f7:	3b 45 14             	cmp    0x14(%ebp),%eax
f010d9fa:	75 d5                	jne    f010d9d1 <stab_binsearch+0x117>
		     l--)
			/* do nothing */;
		*region_left = l;
f010d9fc:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d9ff:	8b 55 fc             	mov    -0x4(%ebp),%edx
f010da02:	89 10                	mov    %edx,(%eax)
	}
}
f010da04:	90                   	nop
f010da05:	c9                   	leave  
f010da06:	c3                   	ret    

f010da07 <debuginfo_eip>:
//	negative if not.  But even if it returns negative it has stored some
//	information into '*info'.
//
int
debuginfo_eip(uint32*  addr, struct Eipdebuginfo *info)
{
f010da07:	55                   	push   %ebp
f010da08:	89 e5                	mov    %esp,%ebp
f010da0a:	83 ec 38             	sub    $0x38,%esp
	const struct Stab *stabs, *stab_end;
	const char *stabstr, *stabstr_end;
	int lfile, rfile, lfun, rfun, lline, rline;

	// Initialize *info
	info->eip_file = "<unknown>";
f010da0d:	8b 45 0c             	mov    0xc(%ebp),%eax
f010da10:	c7 00 c0 7a 13 f0    	movl   $0xf0137ac0,(%eax)
	info->eip_line = 0;
f010da16:	8b 45 0c             	mov    0xc(%ebp),%eax
f010da19:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
	info->eip_fn_name = "<unknown>";
f010da20:	8b 45 0c             	mov    0xc(%ebp),%eax
f010da23:	c7 40 08 c0 7a 13 f0 	movl   $0xf0137ac0,0x8(%eax)
	info->eip_fn_namelen = 9;
f010da2a:	8b 45 0c             	mov    0xc(%ebp),%eax
f010da2d:	c7 40 0c 09 00 00 00 	movl   $0x9,0xc(%eax)
	info->eip_fn_addr = addr;
f010da34:	8b 45 0c             	mov    0xc(%ebp),%eax
f010da37:	8b 55 08             	mov    0x8(%ebp),%edx
f010da3a:	89 50 10             	mov    %edx,0x10(%eax)
	info->eip_fn_narg = 0;
f010da3d:	8b 45 0c             	mov    0xc(%ebp),%eax
f010da40:	c7 40 14 00 00 00 00 	movl   $0x0,0x14(%eax)

	// Find the relevant set of stabs
	if ((uint32)addr >= USER_LIMIT) {
f010da47:	8b 45 08             	mov    0x8(%ebp),%eax
f010da4a:	3d ff ff 7f ef       	cmp    $0xef7fffff,%eax
f010da4f:	76 1e                	jbe    f010da6f <debuginfo_eip+0x68>
		stabs = __STAB_BEGIN__;
f010da51:	c7 45 f4 30 d7 13 f0 	movl   $0xf013d730,-0xc(%ebp)
		stab_end = __STAB_END__;
f010da58:	c7 45 f0 60 d0 17 f0 	movl   $0xf017d060,-0x10(%ebp)
		stabstr = __STABSTR_BEGIN__;
f010da5f:	c7 45 ec 61 d0 17 f0 	movl   $0xf017d061,-0x14(%ebp)
		stabstr_end = __STABSTR_END__;
f010da66:	c7 45 e8 32 9c 18 f0 	movl   $0xf0189c32,-0x18(%ebp)
f010da6d:	eb 2a                	jmp    f010da99 <debuginfo_eip+0x92>
		// The user-application linker script, user/user.ld,
		// puts information about the application's stabs (equivalent
		// to __STAB_BEGIN__, __STAB_END__, __STABSTR_BEGIN__, and
		// __STABSTR_END__) in a structure located at virtual address
		// USTABDATA.
		const struct UserStabData *usd = (const struct UserStabData *) USTABDATA;
f010da6f:	c7 45 e0 00 00 20 00 	movl   $0x200000,-0x20(%ebp)

		// Make sure this memory is valid.
		// Return -1 if it is not.  Hint: Call user_mem_check.
		// LAB 3: Your code here.

		stabs = usd->stabs;
f010da76:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010da79:	8b 00                	mov    (%eax),%eax
f010da7b:	89 45 f4             	mov    %eax,-0xc(%ebp)
		stab_end = usd->stab_end;
f010da7e:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010da81:	8b 40 04             	mov    0x4(%eax),%eax
f010da84:	89 45 f0             	mov    %eax,-0x10(%ebp)
		stabstr = usd->stabstr;
f010da87:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010da8a:	8b 40 08             	mov    0x8(%eax),%eax
f010da8d:	89 45 ec             	mov    %eax,-0x14(%ebp)
		stabstr_end = usd->stabstr_end;
f010da90:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010da93:	8b 40 0c             	mov    0xc(%eax),%eax
f010da96:	89 45 e8             	mov    %eax,-0x18(%ebp)
		// Make sure the STABS and string table memory is valid.
		// LAB 3: Your code here.
	}

	// String table validity checks
	if (stabstr_end <= stabstr || stabstr_end[-1] != 0)
f010da99:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010da9c:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f010da9f:	76 0a                	jbe    f010daab <debuginfo_eip+0xa4>
f010daa1:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010daa4:	48                   	dec    %eax
f010daa5:	8a 00                	mov    (%eax),%al
f010daa7:	84 c0                	test   %al,%al
f010daa9:	74 0a                	je     f010dab5 <debuginfo_eip+0xae>
		return -1;
f010daab:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
f010dab0:	e9 01 02 00 00       	jmp    f010dcb6 <debuginfo_eip+0x2af>
	// 'eip'.  First, we find the basic source file containing 'eip'.
	// Then, we look in that source file for the function.  Then we look
	// for the line number.

	// Search the entire set of stabs for the source file (type N_SO).
	lfile = 0;
f010dab5:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
	rfile = (stab_end - stabs) - 1;
f010dabc:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010dabf:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010dac2:	29 c2                	sub    %eax,%edx
f010dac4:	89 d0                	mov    %edx,%eax
f010dac6:	c1 f8 02             	sar    $0x2,%eax
f010dac9:	89 c2                	mov    %eax,%edx
f010dacb:	89 d0                	mov    %edx,%eax
f010dacd:	c1 e0 02             	shl    $0x2,%eax
f010dad0:	01 d0                	add    %edx,%eax
f010dad2:	c1 e0 02             	shl    $0x2,%eax
f010dad5:	01 d0                	add    %edx,%eax
f010dad7:	c1 e0 02             	shl    $0x2,%eax
f010dada:	01 d0                	add    %edx,%eax
f010dadc:	89 c1                	mov    %eax,%ecx
f010dade:	c1 e1 08             	shl    $0x8,%ecx
f010dae1:	01 c8                	add    %ecx,%eax
f010dae3:	89 c1                	mov    %eax,%ecx
f010dae5:	c1 e1 10             	shl    $0x10,%ecx
f010dae8:	01 c8                	add    %ecx,%eax
f010daea:	01 c0                	add    %eax,%eax
f010daec:	01 d0                	add    %edx,%eax
f010daee:	48                   	dec    %eax
f010daef:	89 45 d4             	mov    %eax,-0x2c(%ebp)
	stab_binsearch(stabs, &lfile, &rfile, N_SO, addr);
f010daf2:	ff 75 08             	pushl  0x8(%ebp)
f010daf5:	6a 64                	push   $0x64
f010daf7:	8d 45 d4             	lea    -0x2c(%ebp),%eax
f010dafa:	50                   	push   %eax
f010dafb:	8d 45 d8             	lea    -0x28(%ebp),%eax
f010dafe:	50                   	push   %eax
f010daff:	ff 75 f4             	pushl  -0xc(%ebp)
f010db02:	e8 b3 fd ff ff       	call   f010d8ba <stab_binsearch>
f010db07:	83 c4 14             	add    $0x14,%esp
	if (lfile == 0)
f010db0a:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010db0d:	85 c0                	test   %eax,%eax
f010db0f:	75 0a                	jne    f010db1b <debuginfo_eip+0x114>
		return -1;
f010db11:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
f010db16:	e9 9b 01 00 00       	jmp    f010dcb6 <debuginfo_eip+0x2af>

	// Search within that file's stabs for the function definition
	// (N_FUN).
	lfun = lfile;
f010db1b:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010db1e:	89 45 d0             	mov    %eax,-0x30(%ebp)
	rfun = rfile;
f010db21:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f010db24:	89 45 cc             	mov    %eax,-0x34(%ebp)
	stab_binsearch(stabs, &lfun, &rfun, N_FUN, addr);
f010db27:	ff 75 08             	pushl  0x8(%ebp)
f010db2a:	6a 24                	push   $0x24
f010db2c:	8d 45 cc             	lea    -0x34(%ebp),%eax
f010db2f:	50                   	push   %eax
f010db30:	8d 45 d0             	lea    -0x30(%ebp),%eax
f010db33:	50                   	push   %eax
f010db34:	ff 75 f4             	pushl  -0xc(%ebp)
f010db37:	e8 7e fd ff ff       	call   f010d8ba <stab_binsearch>
f010db3c:	83 c4 14             	add    $0x14,%esp

	if (lfun <= rfun) {
f010db3f:	8b 55 d0             	mov    -0x30(%ebp),%edx
f010db42:	8b 45 cc             	mov    -0x34(%ebp),%eax
f010db45:	39 c2                	cmp    %eax,%edx
f010db47:	0f 8f 86 00 00 00    	jg     f010dbd3 <debuginfo_eip+0x1cc>
		// stabs[lfun] points to the function name
		// in the string table, but check bounds just in case.
		if (stabs[lfun].n_strx < stabstr_end - stabstr)
f010db4d:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010db50:	89 c2                	mov    %eax,%edx
f010db52:	89 d0                	mov    %edx,%eax
f010db54:	01 c0                	add    %eax,%eax
f010db56:	01 d0                	add    %edx,%eax
f010db58:	c1 e0 02             	shl    $0x2,%eax
f010db5b:	89 c2                	mov    %eax,%edx
f010db5d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010db60:	01 d0                	add    %edx,%eax
f010db62:	8b 00                	mov    (%eax),%eax
f010db64:	8b 4d e8             	mov    -0x18(%ebp),%ecx
f010db67:	8b 55 ec             	mov    -0x14(%ebp),%edx
f010db6a:	29 d1                	sub    %edx,%ecx
f010db6c:	89 ca                	mov    %ecx,%edx
f010db6e:	39 d0                	cmp    %edx,%eax
f010db70:	73 22                	jae    f010db94 <debuginfo_eip+0x18d>
			info->eip_fn_name = stabstr + stabs[lfun].n_strx;
f010db72:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010db75:	89 c2                	mov    %eax,%edx
f010db77:	89 d0                	mov    %edx,%eax
f010db79:	01 c0                	add    %eax,%eax
f010db7b:	01 d0                	add    %edx,%eax
f010db7d:	c1 e0 02             	shl    $0x2,%eax
f010db80:	89 c2                	mov    %eax,%edx
f010db82:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010db85:	01 d0                	add    %edx,%eax
f010db87:	8b 10                	mov    (%eax),%edx
f010db89:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010db8c:	01 c2                	add    %eax,%edx
f010db8e:	8b 45 0c             	mov    0xc(%ebp),%eax
f010db91:	89 50 08             	mov    %edx,0x8(%eax)
		info->eip_fn_addr = (uint32*) stabs[lfun].n_value;
f010db94:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010db97:	89 c2                	mov    %eax,%edx
f010db99:	89 d0                	mov    %edx,%eax
f010db9b:	01 c0                	add    %eax,%eax
f010db9d:	01 d0                	add    %edx,%eax
f010db9f:	c1 e0 02             	shl    $0x2,%eax
f010dba2:	89 c2                	mov    %eax,%edx
f010dba4:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010dba7:	01 d0                	add    %edx,%eax
f010dba9:	8b 50 08             	mov    0x8(%eax),%edx
f010dbac:	8b 45 0c             	mov    0xc(%ebp),%eax
f010dbaf:	89 50 10             	mov    %edx,0x10(%eax)
		addr = (uint32*)(addr - (info->eip_fn_addr));
f010dbb2:	8b 55 08             	mov    0x8(%ebp),%edx
f010dbb5:	8b 45 0c             	mov    0xc(%ebp),%eax
f010dbb8:	8b 40 10             	mov    0x10(%eax),%eax
f010dbbb:	29 c2                	sub    %eax,%edx
f010dbbd:	89 d0                	mov    %edx,%eax
f010dbbf:	c1 f8 02             	sar    $0x2,%eax
f010dbc2:	89 45 08             	mov    %eax,0x8(%ebp)
		// Search within the function definition for the line number.
		lline = lfun;
f010dbc5:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010dbc8:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		rline = rfun;
f010dbcb:	8b 45 cc             	mov    -0x34(%ebp),%eax
f010dbce:	89 45 dc             	mov    %eax,-0x24(%ebp)
f010dbd1:	eb 15                	jmp    f010dbe8 <debuginfo_eip+0x1e1>
	} else {
		// Couldn't find function stab!  Maybe we're in an assembly
		// file.  Search the whole file for the line number.
		info->eip_fn_addr = addr;
f010dbd3:	8b 45 0c             	mov    0xc(%ebp),%eax
f010dbd6:	8b 55 08             	mov    0x8(%ebp),%edx
f010dbd9:	89 50 10             	mov    %edx,0x10(%eax)
		lline = lfile;
f010dbdc:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010dbdf:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		rline = rfile;
f010dbe2:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f010dbe5:	89 45 dc             	mov    %eax,-0x24(%ebp)
	}
	// Ignore stuff after the colon.
	info->eip_fn_namelen = strfind(info->eip_fn_name, ':') - info->eip_fn_name;
f010dbe8:	8b 45 0c             	mov    0xc(%ebp),%eax
f010dbeb:	8b 40 08             	mov    0x8(%eax),%eax
f010dbee:	83 ec 08             	sub    $0x8,%esp
f010dbf1:	6a 3a                	push   $0x3a
f010dbf3:	50                   	push   %eax
f010dbf4:	e8 bb 37 02 00       	call   f01313b4 <strfind>
f010dbf9:	83 c4 10             	add    $0x10,%esp
f010dbfc:	89 c2                	mov    %eax,%edx
f010dbfe:	8b 45 0c             	mov    0xc(%ebp),%eax
f010dc01:	8b 40 08             	mov    0x8(%eax),%eax
f010dc04:	29 c2                	sub    %eax,%edx
f010dc06:	8b 45 0c             	mov    0xc(%ebp),%eax
f010dc09:	89 50 0c             	mov    %edx,0xc(%eax)
	// Search backwards from the line number for the relevant filename
	// stab.
	// We can't just use the "lfile" stab because inlined functions
	// can interpolate code from a different file!
	// Such included source files use the N_SOL stab type.
	while (lline >= lfile
f010dc0c:	eb 03                	jmp    f010dc11 <debuginfo_eip+0x20a>
	       && stabs[lline].n_type != N_SOL
	       && (stabs[lline].n_type != N_SO || !stabs[lline].n_value))
		lline--;
f010dc0e:	ff 4d e4             	decl   -0x1c(%ebp)
	// Search backwards from the line number for the relevant filename
	// stab.
	// We can't just use the "lfile" stab because inlined functions
	// can interpolate code from a different file!
	// Such included source files use the N_SOL stab type.
	while (lline >= lfile
f010dc11:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010dc14:	39 45 e4             	cmp    %eax,-0x1c(%ebp)
f010dc17:	7c 4e                	jl     f010dc67 <debuginfo_eip+0x260>
	       && stabs[lline].n_type != N_SOL
f010dc19:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010dc1c:	89 d0                	mov    %edx,%eax
f010dc1e:	01 c0                	add    %eax,%eax
f010dc20:	01 d0                	add    %edx,%eax
f010dc22:	c1 e0 02             	shl    $0x2,%eax
f010dc25:	89 c2                	mov    %eax,%edx
f010dc27:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010dc2a:	01 d0                	add    %edx,%eax
f010dc2c:	8a 40 04             	mov    0x4(%eax),%al
f010dc2f:	3c 84                	cmp    $0x84,%al
f010dc31:	74 34                	je     f010dc67 <debuginfo_eip+0x260>
	       && (stabs[lline].n_type != N_SO || !stabs[lline].n_value))
f010dc33:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010dc36:	89 d0                	mov    %edx,%eax
f010dc38:	01 c0                	add    %eax,%eax
f010dc3a:	01 d0                	add    %edx,%eax
f010dc3c:	c1 e0 02             	shl    $0x2,%eax
f010dc3f:	89 c2                	mov    %eax,%edx
f010dc41:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010dc44:	01 d0                	add    %edx,%eax
f010dc46:	8a 40 04             	mov    0x4(%eax),%al
f010dc49:	3c 64                	cmp    $0x64,%al
f010dc4b:	75 c1                	jne    f010dc0e <debuginfo_eip+0x207>
f010dc4d:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010dc50:	89 d0                	mov    %edx,%eax
f010dc52:	01 c0                	add    %eax,%eax
f010dc54:	01 d0                	add    %edx,%eax
f010dc56:	c1 e0 02             	shl    $0x2,%eax
f010dc59:	89 c2                	mov    %eax,%edx
f010dc5b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010dc5e:	01 d0                	add    %edx,%eax
f010dc60:	8b 40 08             	mov    0x8(%eax),%eax
f010dc63:	85 c0                	test   %eax,%eax
f010dc65:	74 a7                	je     f010dc0e <debuginfo_eip+0x207>
		lline--;
	if (lline >= lfile && stabs[lline].n_strx < stabstr_end - stabstr)
f010dc67:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010dc6a:	39 45 e4             	cmp    %eax,-0x1c(%ebp)
f010dc6d:	7c 42                	jl     f010dcb1 <debuginfo_eip+0x2aa>
f010dc6f:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010dc72:	89 d0                	mov    %edx,%eax
f010dc74:	01 c0                	add    %eax,%eax
f010dc76:	01 d0                	add    %edx,%eax
f010dc78:	c1 e0 02             	shl    $0x2,%eax
f010dc7b:	89 c2                	mov    %eax,%edx
f010dc7d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010dc80:	01 d0                	add    %edx,%eax
f010dc82:	8b 00                	mov    (%eax),%eax
f010dc84:	8b 4d e8             	mov    -0x18(%ebp),%ecx
f010dc87:	8b 55 ec             	mov    -0x14(%ebp),%edx
f010dc8a:	29 d1                	sub    %edx,%ecx
f010dc8c:	89 ca                	mov    %ecx,%edx
f010dc8e:	39 d0                	cmp    %edx,%eax
f010dc90:	73 1f                	jae    f010dcb1 <debuginfo_eip+0x2aa>
		info->eip_file = stabstr + stabs[lline].n_strx;
f010dc92:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010dc95:	89 d0                	mov    %edx,%eax
f010dc97:	01 c0                	add    %eax,%eax
f010dc99:	01 d0                	add    %edx,%eax
f010dc9b:	c1 e0 02             	shl    $0x2,%eax
f010dc9e:	89 c2                	mov    %eax,%edx
f010dca0:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010dca3:	01 d0                	add    %edx,%eax
f010dca5:	8b 10                	mov    (%eax),%edx
f010dca7:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010dcaa:	01 c2                	add    %eax,%edx
f010dcac:	8b 45 0c             	mov    0xc(%ebp),%eax
f010dcaf:	89 10                	mov    %edx,(%eax)
	// Set eip_fn_narg to the number of arguments taken by the function,
	// or 0 if there was no containing function.
	// Your code here.


	return 0;
f010dcb1:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010dcb6:	c9                   	leave  
f010dcb7:	c3                   	ret    

f010dcb8 <setPageReplacmentAlgorithmLRU>:
//===============================
// REPLACEMENT STRATEGIES
//===============================
//2020
void setPageReplacmentAlgorithmLRU(int LRU_TYPE)
{
f010dcb8:	55                   	push   %ebp
f010dcb9:	89 e5                	mov    %esp,%ebp
f010dcbb:	83 ec 08             	sub    $0x8,%esp
	assert(LRU_TYPE == PG_REP_LRU_TIME_APPROX || LRU_TYPE == PG_REP_LRU_LISTS_APPROX);
f010dcbe:	83 7d 08 01          	cmpl   $0x1,0x8(%ebp)
f010dcc2:	74 1c                	je     f010dce0 <setPageReplacmentAlgorithmLRU+0x28>
f010dcc4:	83 7d 08 02          	cmpl   $0x2,0x8(%ebp)
f010dcc8:	74 16                	je     f010dce0 <setPageReplacmentAlgorithmLRU+0x28>
f010dcca:	68 cc 7a 13 f0       	push   $0xf0137acc
f010dccf:	68 16 7b 13 f0       	push   $0xf0137b16
f010dcd4:	6a 18                	push   $0x18
f010dcd6:	68 2b 7b 13 f0       	push   $0xf0137b2b
f010dcdb:	e8 25 25 ff ff       	call   f0100205 <_panic>
	_PageRepAlgoType = LRU_TYPE ;
f010dce0:	8b 45 08             	mov    0x8(%ebp),%eax
f010dce3:	a3 48 26 78 f0       	mov    %eax,0xf0782648
}
f010dce8:	90                   	nop
f010dce9:	c9                   	leave  
f010dcea:	c3                   	ret    

f010dceb <setPageReplacmentAlgorithmCLOCK>:
void setPageReplacmentAlgorithmCLOCK(){_PageRepAlgoType = PG_REP_CLOCK;}
f010dceb:	55                   	push   %ebp
f010dcec:	89 e5                	mov    %esp,%ebp
f010dcee:	c7 05 48 26 78 f0 03 	movl   $0x3,0xf0782648
f010dcf5:	00 00 00 
f010dcf8:	90                   	nop
f010dcf9:	5d                   	pop    %ebp
f010dcfa:	c3                   	ret    

f010dcfb <setPageReplacmentAlgorithmFIFO>:
void setPageReplacmentAlgorithmFIFO(){_PageRepAlgoType = PG_REP_FIFO;}
f010dcfb:	55                   	push   %ebp
f010dcfc:	89 e5                	mov    %esp,%ebp
f010dcfe:	c7 05 48 26 78 f0 04 	movl   $0x4,0xf0782648
f010dd05:	00 00 00 
f010dd08:	90                   	nop
f010dd09:	5d                   	pop    %ebp
f010dd0a:	c3                   	ret    

f010dd0b <setPageReplacmentAlgorithmModifiedCLOCK>:
void setPageReplacmentAlgorithmModifiedCLOCK(){_PageRepAlgoType = PG_REP_MODIFIEDCLOCK;}
f010dd0b:	55                   	push   %ebp
f010dd0c:	89 e5                	mov    %esp,%ebp
f010dd0e:	c7 05 48 26 78 f0 05 	movl   $0x5,0xf0782648
f010dd15:	00 00 00 
f010dd18:	90                   	nop
f010dd19:	5d                   	pop    %ebp
f010dd1a:	c3                   	ret    

f010dd1b <setPageReplacmentAlgorithmDynamicLocal>:
/*2018*/ void setPageReplacmentAlgorithmDynamicLocal(){_PageRepAlgoType = PG_REP_DYNAMIC_LOCAL;}
f010dd1b:	55                   	push   %ebp
f010dd1c:	89 e5                	mov    %esp,%ebp
f010dd1e:	c7 05 48 26 78 f0 07 	movl   $0x7,0xf0782648
f010dd25:	00 00 00 
f010dd28:	90                   	nop
f010dd29:	5d                   	pop    %ebp
f010dd2a:	c3                   	ret    

f010dd2b <setPageReplacmentAlgorithmNchanceCLOCK>:
/*2021*/ void setPageReplacmentAlgorithmNchanceCLOCK(int PageWSMaxSweeps){_PageRepAlgoType = PG_REP_NchanceCLOCK;  page_WS_max_sweeps = PageWSMaxSweeps;}
f010dd2b:	55                   	push   %ebp
f010dd2c:	89 e5                	mov    %esp,%ebp
f010dd2e:	c7 05 48 26 78 f0 06 	movl   $0x6,0xf0782648
f010dd35:	00 00 00 
f010dd38:	8b 45 08             	mov    0x8(%ebp),%eax
f010dd3b:	a3 a4 25 78 f0       	mov    %eax,0xf07825a4
f010dd40:	90                   	nop
f010dd41:	5d                   	pop    %ebp
f010dd42:	c3                   	ret    

f010dd43 <isPageReplacmentAlgorithmLRU>:

//2020
uint32 isPageReplacmentAlgorithmLRU(int LRU_TYPE){return _PageRepAlgoType == LRU_TYPE ? 1 : 0;}
f010dd43:	55                   	push   %ebp
f010dd44:	89 e5                	mov    %esp,%ebp
f010dd46:	8b 15 48 26 78 f0    	mov    0xf0782648,%edx
f010dd4c:	8b 45 08             	mov    0x8(%ebp),%eax
f010dd4f:	39 c2                	cmp    %eax,%edx
f010dd51:	0f 94 c0             	sete   %al
f010dd54:	0f b6 c0             	movzbl %al,%eax
f010dd57:	5d                   	pop    %ebp
f010dd58:	c3                   	ret    

f010dd59 <isPageReplacmentAlgorithmCLOCK>:
uint32 isPageReplacmentAlgorithmCLOCK(){if(_PageRepAlgoType == PG_REP_CLOCK) return 1; return 0;}
f010dd59:	55                   	push   %ebp
f010dd5a:	89 e5                	mov    %esp,%ebp
f010dd5c:	a1 48 26 78 f0       	mov    0xf0782648,%eax
f010dd61:	83 f8 03             	cmp    $0x3,%eax
f010dd64:	75 07                	jne    f010dd6d <isPageReplacmentAlgorithmCLOCK+0x14>
f010dd66:	b8 01 00 00 00       	mov    $0x1,%eax
f010dd6b:	eb 05                	jmp    f010dd72 <isPageReplacmentAlgorithmCLOCK+0x19>
f010dd6d:	b8 00 00 00 00       	mov    $0x0,%eax
f010dd72:	5d                   	pop    %ebp
f010dd73:	c3                   	ret    

f010dd74 <isPageReplacmentAlgorithmFIFO>:
uint32 isPageReplacmentAlgorithmFIFO(){if(_PageRepAlgoType == PG_REP_FIFO) return 1; return 0;}
f010dd74:	55                   	push   %ebp
f010dd75:	89 e5                	mov    %esp,%ebp
f010dd77:	a1 48 26 78 f0       	mov    0xf0782648,%eax
f010dd7c:	83 f8 04             	cmp    $0x4,%eax
f010dd7f:	75 07                	jne    f010dd88 <isPageReplacmentAlgorithmFIFO+0x14>
f010dd81:	b8 01 00 00 00       	mov    $0x1,%eax
f010dd86:	eb 05                	jmp    f010dd8d <isPageReplacmentAlgorithmFIFO+0x19>
f010dd88:	b8 00 00 00 00       	mov    $0x0,%eax
f010dd8d:	5d                   	pop    %ebp
f010dd8e:	c3                   	ret    

f010dd8f <isPageReplacmentAlgorithmModifiedCLOCK>:
uint32 isPageReplacmentAlgorithmModifiedCLOCK(){if(_PageRepAlgoType == PG_REP_MODIFIEDCLOCK) return 1; return 0;}
f010dd8f:	55                   	push   %ebp
f010dd90:	89 e5                	mov    %esp,%ebp
f010dd92:	a1 48 26 78 f0       	mov    0xf0782648,%eax
f010dd97:	83 f8 05             	cmp    $0x5,%eax
f010dd9a:	75 07                	jne    f010dda3 <isPageReplacmentAlgorithmModifiedCLOCK+0x14>
f010dd9c:	b8 01 00 00 00       	mov    $0x1,%eax
f010dda1:	eb 05                	jmp    f010dda8 <isPageReplacmentAlgorithmModifiedCLOCK+0x19>
f010dda3:	b8 00 00 00 00       	mov    $0x0,%eax
f010dda8:	5d                   	pop    %ebp
f010dda9:	c3                   	ret    

f010ddaa <isPageReplacmentAlgorithmDynamicLocal>:
/*2018*/ uint32 isPageReplacmentAlgorithmDynamicLocal(){if(_PageRepAlgoType == PG_REP_DYNAMIC_LOCAL) return 1; return 0;}
f010ddaa:	55                   	push   %ebp
f010ddab:	89 e5                	mov    %esp,%ebp
f010ddad:	a1 48 26 78 f0       	mov    0xf0782648,%eax
f010ddb2:	83 f8 07             	cmp    $0x7,%eax
f010ddb5:	75 07                	jne    f010ddbe <isPageReplacmentAlgorithmDynamicLocal+0x14>
f010ddb7:	b8 01 00 00 00       	mov    $0x1,%eax
f010ddbc:	eb 05                	jmp    f010ddc3 <isPageReplacmentAlgorithmDynamicLocal+0x19>
f010ddbe:	b8 00 00 00 00       	mov    $0x0,%eax
f010ddc3:	5d                   	pop    %ebp
f010ddc4:	c3                   	ret    

f010ddc5 <isPageReplacmentAlgorithmNchanceCLOCK>:
/*2021*/ uint32 isPageReplacmentAlgorithmNchanceCLOCK(){if(_PageRepAlgoType == PG_REP_NchanceCLOCK) return 1; return 0;}
f010ddc5:	55                   	push   %ebp
f010ddc6:	89 e5                	mov    %esp,%ebp
f010ddc8:	a1 48 26 78 f0       	mov    0xf0782648,%eax
f010ddcd:	83 f8 06             	cmp    $0x6,%eax
f010ddd0:	75 07                	jne    f010ddd9 <isPageReplacmentAlgorithmNchanceCLOCK+0x14>
f010ddd2:	b8 01 00 00 00       	mov    $0x1,%eax
f010ddd7:	eb 05                	jmp    f010ddde <isPageReplacmentAlgorithmNchanceCLOCK+0x19>
f010ddd9:	b8 00 00 00 00       	mov    $0x0,%eax
f010ddde:	5d                   	pop    %ebp
f010dddf:	c3                   	ret    

f010dde0 <enableModifiedBuffer>:

//===============================
// PAGE BUFFERING
//===============================
void enableModifiedBuffer(uint32 enableIt){_EnableModifiedBuffer = enableIt;}
f010dde0:	55                   	push   %ebp
f010dde1:	89 e5                	mov    %esp,%ebp
f010dde3:	8b 45 08             	mov    0x8(%ebp),%eax
f010dde6:	a3 10 26 78 f0       	mov    %eax,0xf0782610
f010ddeb:	90                   	nop
f010ddec:	5d                   	pop    %ebp
f010dded:	c3                   	ret    

f010ddee <isModifiedBufferEnabled>:
uint8 isModifiedBufferEnabled(){  return _EnableModifiedBuffer ; }
f010ddee:	55                   	push   %ebp
f010ddef:	89 e5                	mov    %esp,%ebp
f010ddf1:	a1 10 26 78 f0       	mov    0xf0782610,%eax
f010ddf6:	5d                   	pop    %ebp
f010ddf7:	c3                   	ret    

f010ddf8 <enableBuffering>:

void enableBuffering(uint32 enableIt){_EnableBuffering = enableIt;}
f010ddf8:	55                   	push   %ebp
f010ddf9:	89 e5                	mov    %esp,%ebp
f010ddfb:	8b 45 08             	mov    0x8(%ebp),%eax
f010ddfe:	a3 50 26 78 f0       	mov    %eax,0xf0782650
f010de03:	90                   	nop
f010de04:	5d                   	pop    %ebp
f010de05:	c3                   	ret    

f010de06 <isBufferingEnabled>:
uint8 isBufferingEnabled(){  return _EnableBuffering ; }
f010de06:	55                   	push   %ebp
f010de07:	89 e5                	mov    %esp,%ebp
f010de09:	a1 50 26 78 f0       	mov    0xf0782650,%eax
f010de0e:	5d                   	pop    %ebp
f010de0f:	c3                   	ret    

f010de10 <setModifiedBufferLength>:

void setModifiedBufferLength(uint32 length) { _ModifiedBufferLength = length;}
f010de10:	55                   	push   %ebp
f010de11:	89 e5                	mov    %esp,%ebp
f010de13:	8b 45 08             	mov    0x8(%ebp),%eax
f010de16:	a3 70 26 78 f0       	mov    %eax,0xf0782670
f010de1b:	90                   	nop
f010de1c:	5d                   	pop    %ebp
f010de1d:	c3                   	ret    

f010de1e <getModifiedBufferLength>:
uint32 getModifiedBufferLength() { return _ModifiedBufferLength;}
f010de1e:	55                   	push   %ebp
f010de1f:	89 e5                	mov    %esp,%ebp
f010de21:	a1 70 26 78 f0       	mov    0xf0782670,%eax
f010de26:	5d                   	pop    %ebp
f010de27:	c3                   	ret    

f010de28 <table_fault_handler>:
// FAULT HANDLERS
//===============================

//Handle the table fault
void table_fault_handler(struct Env * curenv, uint32 fault_va)
{
f010de28:	55                   	push   %ebp
f010de29:	89 e5                	mov    %esp,%ebp
f010de2b:	83 ec 18             	sub    $0x18,%esp
	//panic("table_fault_handler() is not implemented yet...!!");
	//Check if it's a stack page
	uint32* ptr_table;
#if USE_KHEAP
	{
		ptr_table = create_page_table(curenv->env_page_directory, (uint32)fault_va);
f010de2e:	8b 45 08             	mov    0x8(%ebp),%eax
f010de31:	8b 40 5c             	mov    0x5c(%eax),%eax
f010de34:	83 ec 08             	sub    $0x8,%esp
f010de37:	ff 75 0c             	pushl  0xc(%ebp)
f010de3a:	50                   	push   %eax
f010de3b:	e8 c7 8d ff ff       	call   f0106c07 <create_page_table>
f010de40:	83 c4 10             	add    $0x10,%esp
f010de43:	89 45 f4             	mov    %eax,-0xc(%ebp)
#else
	{
		__static_cpt(curenv->env_page_directory, (uint32)fault_va, &ptr_table);
	}
#endif
}
f010de46:	90                   	nop
f010de47:	c9                   	leave  
f010de48:	c3                   	ret    

f010de49 <page_fault_handler>:

//Handle the page fault

void page_fault_handler(struct Env * curenv, uint32 fault_va)
{
f010de49:	55                   	push   %ebp
f010de4a:	89 e5                	mov    %esp,%ebp
f010de4c:	83 ec 38             	sub    $0x38,%esp
	//TODO: [PROJECT MS3] [FAULT HANDLER] page_fault_handler
	// Write your code here, remove the panic and write your code
	//panic("page_fault_handler() is not implemented yet...!!");
	uint32 current_env_size = env_page_ws_get_size(curenv);
f010de4f:	83 ec 0c             	sub    $0xc,%esp
f010de52:	ff 75 08             	pushl  0x8(%ebp)
f010de55:	e8 bc 9f ff ff       	call   f0107e16 <env_page_ws_get_size>
f010de5a:	83 c4 10             	add    $0x10,%esp
f010de5d:	89 45 f4             	mov    %eax,-0xc(%ebp)

	if(current_env_size < curenv->page_WS_max_size) //Placement
f010de60:	8b 45 08             	mov    0x8(%ebp),%eax
f010de63:	8b 40 74             	mov    0x74(%eax),%eax
f010de66:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f010de69:	0f 86 fd 00 00 00    	jbe    f010df6c <page_fault_handler+0x123>
	{
		env_page_ws_print(curenv);
f010de6f:	83 ec 0c             	sub    $0xc,%esp
f010de72:	ff 75 08             	pushl  0x8(%ebp)
f010de75:	e8 11 a2 ff ff       	call   f010808b <env_page_ws_print>
f010de7a:	83 c4 10             	add    $0x10,%esp

		int ret = pf_read_env_page(curenv, (void *)fault_va);
f010de7d:	8b 45 0c             	mov    0xc(%ebp),%eax
f010de80:	83 ec 08             	sub    $0x8,%esp
f010de83:	50                   	push   %eax
f010de84:	ff 75 08             	pushl  0x8(%ebp)
f010de87:	e8 ae 5b ff ff       	call   f0103a3a <pf_read_env_page>
f010de8c:	83 c4 10             	add    $0x10,%esp
f010de8f:	89 45 f0             	mov    %eax,-0x10(%ebp)

		if(ret == E_PAGE_NOT_EXIST_IN_PF) // Check if page in Page File
f010de92:	83 7d f0 f7          	cmpl   $0xfffffff7,-0x10(%ebp)
f010de96:	75 54                	jne    f010deec <page_fault_handler+0xa3>
		{
			if(
f010de98:	81 7d 0c ff df bf ee 	cmpl   $0xeebfdfff,0xc(%ebp)
f010de9f:	77 27                	ja     f010dec8 <page_fault_handler+0x7f>
				!((fault_va < USTACKTOP && fault_va >= USTACKBOTTOM) || // Check if page in Stack
f010dea1:	c7 45 ec 00 10 00 00 	movl   $0x1000,-0x14(%ebp)
f010dea8:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010deab:	2d 01 e0 f9 5f       	sub    $0x5ff9e001,%eax
f010deb0:	89 45 e8             	mov    %eax,-0x18(%ebp)
f010deb3:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010deb6:	ba 00 00 00 00       	mov    $0x0,%edx
f010debb:	f7 75 ec             	divl   -0x14(%ebp)
f010debe:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010dec1:	29 d0                	sub    %edx,%eax
f010dec3:	3b 45 0c             	cmp    0xc(%ebp),%eax
f010dec6:	76 24                	jbe    f010deec <page_fault_handler+0xa3>
f010dec8:	81 7d 0c ff ff ff 9f 	cmpl   $0x9fffffff,0xc(%ebp)
f010decf:	77 07                	ja     f010ded8 <page_fault_handler+0x8f>
					(fault_va < USER_HEAP_MAX && fault_va >= USER_HEAP_START)) // Check if page in User Heap
f010ded1:	8b 45 0c             	mov    0xc(%ebp),%eax
f010ded4:	85 c0                	test   %eax,%eax
f010ded6:	78 14                	js     f010deec <page_fault_handler+0xa3>
			)
				panic("ILLEGAL MEMORY ACCESS");
f010ded8:	83 ec 04             	sub    $0x4,%esp
f010dedb:	68 45 7b 13 f0       	push   $0xf0137b45
f010dee0:	6a 5f                	push   $0x5f
f010dee2:	68 2b 7b 13 f0       	push   $0xf0137b2b
f010dee7:	e8 19 23 ff ff       	call   f0100205 <_panic>
		}
		struct FrameInfo *ptr_frame;
		allocate_frame(&ptr_frame);
f010deec:	83 ec 0c             	sub    $0xc,%esp
f010deef:	8d 45 d4             	lea    -0x2c(%ebp),%eax
f010def2:	50                   	push   %eax
f010def3:	e8 fa 89 ff ff       	call   f01068f2 <allocate_frame>
f010def8:	83 c4 10             	add    $0x10,%esp
		map_frame(curenv->env_page_directory,ptr_frame,fault_va, PERM_WRITEABLE|PERM_USER);
f010defb:	8b 55 d4             	mov    -0x2c(%ebp),%edx
f010defe:	8b 45 08             	mov    0x8(%ebp),%eax
f010df01:	8b 40 5c             	mov    0x5c(%eax),%eax
f010df04:	6a 06                	push   $0x6
f010df06:	ff 75 0c             	pushl  0xc(%ebp)
f010df09:	52                   	push   %edx
f010df0a:	50                   	push   %eax
f010df0b:	e8 31 8e ff ff       	call   f0106d41 <map_frame>
f010df10:	83 c4 10             	add    $0x10,%esp
		env_page_ws_set_entry(curenv,curenv->page_last_WS_index,fault_va);
f010df13:	8b 45 08             	mov    0x8(%ebp),%eax
f010df16:	8b 80 2c 05 00 00    	mov    0x52c(%eax),%eax
f010df1c:	83 ec 04             	sub    $0x4,%esp
f010df1f:	ff 75 0c             	pushl  0xc(%ebp)
f010df22:	50                   	push   %eax
f010df23:	ff 75 08             	pushl  0x8(%ebp)
f010df26:	e8 9f 9f ff ff       	call   f0107eca <env_page_ws_set_entry>
f010df2b:	83 c4 10             	add    $0x10,%esp
		curenv->page_last_WS_index++;
f010df2e:	8b 45 08             	mov    0x8(%ebp),%eax
f010df31:	8b 80 2c 05 00 00    	mov    0x52c(%eax),%eax
f010df37:	8d 50 01             	lea    0x1(%eax),%edx
f010df3a:	8b 45 08             	mov    0x8(%ebp),%eax
f010df3d:	89 90 2c 05 00 00    	mov    %edx,0x52c(%eax)
		if(curenv->page_last_WS_index == curenv->page_WS_max_size)
f010df43:	8b 45 08             	mov    0x8(%ebp),%eax
f010df46:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f010df4c:	8b 45 08             	mov    0x8(%ebp),%eax
f010df4f:	8b 40 74             	mov    0x74(%eax),%eax
f010df52:	39 c2                	cmp    %eax,%edx
f010df54:	0f 85 29 02 00 00    	jne    f010e183 <page_fault_handler+0x33a>
			curenv->page_last_WS_index = 0;
f010df5a:	8b 45 08             	mov    0x8(%ebp),%eax
f010df5d:	c7 80 2c 05 00 00 00 	movl   $0x0,0x52c(%eax)
f010df64:	00 00 00 

		env_page_ws_print(curenv);

	}
	//refer to the project presentation and documentation for details
}
f010df67:	e9 17 02 00 00       	jmp    f010e183 <page_fault_handler+0x33a>
			curenv->page_last_WS_index = 0;

	}
	else //Replacement
	{
		uint32 virtual_address = 0;
f010df6c:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
		while(1 == 1)
		{
			env_page_ws_print(curenv);
f010df73:	83 ec 0c             	sub    $0xc,%esp
f010df76:	ff 75 08             	pushl  0x8(%ebp)
f010df79:	e8 0d a1 ff ff       	call   f010808b <env_page_ws_print>
f010df7e:	83 c4 10             	add    $0x10,%esp
			uint32 per = pt_get_page_permissions(curenv->env_page_directory, curenv->ptr_pageWorkingSet[curenv->page_last_WS_index].virtual_address);
f010df81:	8b 45 08             	mov    0x8(%ebp),%eax
f010df84:	8b 48 78             	mov    0x78(%eax),%ecx
f010df87:	8b 45 08             	mov    0x8(%ebp),%eax
f010df8a:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f010df90:	89 d0                	mov    %edx,%eax
f010df92:	01 c0                	add    %eax,%eax
f010df94:	01 d0                	add    %edx,%eax
f010df96:	c1 e0 03             	shl    $0x3,%eax
f010df99:	01 c8                	add    %ecx,%eax
f010df9b:	8b 10                	mov    (%eax),%edx
f010df9d:	8b 45 08             	mov    0x8(%ebp),%eax
f010dfa0:	8b 40 5c             	mov    0x5c(%eax),%eax
f010dfa3:	83 ec 08             	sub    $0x8,%esp
f010dfa6:	52                   	push   %edx
f010dfa7:	50                   	push   %eax
f010dfa8:	e8 b4 9c ff ff       	call   f0107c61 <pt_get_page_permissions>
f010dfad:	83 c4 10             	add    $0x10,%esp
f010dfb0:	89 45 e0             	mov    %eax,-0x20(%ebp)
			cprintf("current per %d\n",per);
f010dfb3:	83 ec 08             	sub    $0x8,%esp
f010dfb6:	ff 75 e0             	pushl  -0x20(%ebp)
f010dfb9:	68 5b 7b 13 f0       	push   $0xf0137b5b
f010dfbe:	e8 4b 2d ff ff       	call   f0100d0e <cprintf>
f010dfc3:	83 c4 10             	add    $0x10,%esp
			if((per&PERM_USED) == PERM_USED)
f010dfc6:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010dfc9:	83 e0 20             	and    $0x20,%eax
f010dfcc:	85 c0                	test   %eax,%eax
f010dfce:	74 4a                	je     f010e01a <page_fault_handler+0x1d1>
				pt_set_page_permissions(curenv->env_page_directory,curenv->ptr_pageWorkingSet[curenv->page_last_WS_index].virtual_address,0,PERM_USED);
f010dfd0:	8b 45 08             	mov    0x8(%ebp),%eax
f010dfd3:	8b 48 78             	mov    0x78(%eax),%ecx
f010dfd6:	8b 45 08             	mov    0x8(%ebp),%eax
f010dfd9:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f010dfdf:	89 d0                	mov    %edx,%eax
f010dfe1:	01 c0                	add    %eax,%eax
f010dfe3:	01 d0                	add    %edx,%eax
f010dfe5:	c1 e0 03             	shl    $0x3,%eax
f010dfe8:	01 c8                	add    %ecx,%eax
f010dfea:	8b 10                	mov    (%eax),%edx
f010dfec:	8b 45 08             	mov    0x8(%ebp),%eax
f010dfef:	8b 40 5c             	mov    0x5c(%eax),%eax
f010dff2:	6a 20                	push   $0x20
f010dff4:	6a 00                	push   $0x0
f010dff6:	52                   	push   %edx
f010dff7:	50                   	push   %eax
f010dff8:	e8 b0 9b ff ff       	call   f0107bad <pt_set_page_permissions>
f010dffd:	83 c4 10             	add    $0x10,%esp
			else
			{
				virtual_address = curenv->ptr_pageWorkingSet[curenv->page_last_WS_index].virtual_address;
				break;
			}
			if( curenv->page_last_WS_index == (curenv->page_WS_max_size - 1))
f010e000:	8b 45 08             	mov    0x8(%ebp),%eax
f010e003:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f010e009:	8b 45 08             	mov    0x8(%ebp),%eax
f010e00c:	8b 40 74             	mov    0x74(%eax),%eax
f010e00f:	48                   	dec    %eax
f010e010:	39 c2                	cmp    %eax,%edx
f010e012:	0f 85 8b 00 00 00    	jne    f010e0a3 <page_fault_handler+0x25a>
f010e018:	eb 77                	jmp    f010e091 <page_fault_handler+0x248>
			cprintf("current per %d\n",per);
			if((per&PERM_USED) == PERM_USED)
				pt_set_page_permissions(curenv->env_page_directory,curenv->ptr_pageWorkingSet[curenv->page_last_WS_index].virtual_address,0,PERM_USED);
			else
			{
				virtual_address = curenv->ptr_pageWorkingSet[curenv->page_last_WS_index].virtual_address;
f010e01a:	8b 45 08             	mov    0x8(%ebp),%eax
f010e01d:	8b 48 78             	mov    0x78(%eax),%ecx
f010e020:	8b 45 08             	mov    0x8(%ebp),%eax
f010e023:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f010e029:	89 d0                	mov    %edx,%eax
f010e02b:	01 c0                	add    %eax,%eax
f010e02d:	01 d0                	add    %edx,%eax
f010e02f:	c1 e0 03             	shl    $0x3,%eax
f010e032:	01 c8                	add    %ecx,%eax
f010e034:	8b 00                	mov    (%eax),%eax
f010e036:	89 45 e4             	mov    %eax,-0x1c(%ebp)
				break;
f010e039:	90                   	nop
			if( curenv->page_last_WS_index == (curenv->page_WS_max_size - 1))
				curenv->page_last_WS_index = 0;
			else
				curenv->page_last_WS_index++;
		}
		cprintf("-----------------");
f010e03a:	83 ec 0c             	sub    $0xc,%esp
f010e03d:	68 6b 7b 13 f0       	push   $0xf0137b6b
f010e042:	e8 c7 2c ff ff       	call   f0100d0e <cprintf>
f010e047:	83 c4 10             	add    $0x10,%esp
		uint32 perm = pt_get_page_permissions(curenv->env_page_directory, virtual_address);
f010e04a:	8b 45 08             	mov    0x8(%ebp),%eax
f010e04d:	8b 40 5c             	mov    0x5c(%eax),%eax
f010e050:	83 ec 08             	sub    $0x8,%esp
f010e053:	ff 75 e4             	pushl  -0x1c(%ebp)
f010e056:	50                   	push   %eax
f010e057:	e8 05 9c ff ff       	call   f0107c61 <pt_get_page_permissions>
f010e05c:	83 c4 10             	add    $0x10,%esp
f010e05f:	89 45 dc             	mov    %eax,-0x24(%ebp)

		uint32 *ptr_page_table = NULL ;
f010e062:	c7 45 d0 00 00 00 00 	movl   $0x0,-0x30(%ebp)
		struct FrameInfo * frame_info = get_frame_info(curenv->env_page_directory, virtual_address,&ptr_page_table);
f010e069:	8b 45 08             	mov    0x8(%ebp),%eax
f010e06c:	8b 40 5c             	mov    0x5c(%eax),%eax
f010e06f:	83 ec 04             	sub    $0x4,%esp
f010e072:	8d 55 d0             	lea    -0x30(%ebp),%edx
f010e075:	52                   	push   %edx
f010e076:	ff 75 e4             	pushl  -0x1c(%ebp)
f010e079:	50                   	push   %eax
f010e07a:	e8 87 8d ff ff       	call   f0106e06 <get_frame_info>
f010e07f:	83 c4 10             	add    $0x10,%esp
f010e082:	89 45 d8             	mov    %eax,-0x28(%ebp)

		if((perm&PERM_MODIFIED)== PERM_MODIFIED)
f010e085:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010e088:	83 e0 40             	and    $0x40,%eax
f010e08b:	85 c0                	test   %eax,%eax
f010e08d:	74 42                	je     f010e0d1 <page_fault_handler+0x288>
f010e08f:	eb 2c                	jmp    f010e0bd <page_fault_handler+0x274>
			{
				virtual_address = curenv->ptr_pageWorkingSet[curenv->page_last_WS_index].virtual_address;
				break;
			}
			if( curenv->page_last_WS_index == (curenv->page_WS_max_size - 1))
				curenv->page_last_WS_index = 0;
f010e091:	8b 45 08             	mov    0x8(%ebp),%eax
f010e094:	c7 80 2c 05 00 00 00 	movl   $0x0,0x52c(%eax)
f010e09b:	00 00 00 
f010e09e:	e9 d0 fe ff ff       	jmp    f010df73 <page_fault_handler+0x12a>
			else
				curenv->page_last_WS_index++;
f010e0a3:	8b 45 08             	mov    0x8(%ebp),%eax
f010e0a6:	8b 80 2c 05 00 00    	mov    0x52c(%eax),%eax
f010e0ac:	8d 50 01             	lea    0x1(%eax),%edx
f010e0af:	8b 45 08             	mov    0x8(%ebp),%eax
f010e0b2:	89 90 2c 05 00 00    	mov    %edx,0x52c(%eax)
		}
f010e0b8:	e9 b6 fe ff ff       	jmp    f010df73 <page_fault_handler+0x12a>
		uint32 *ptr_page_table = NULL ;
		struct FrameInfo * frame_info = get_frame_info(curenv->env_page_directory, virtual_address,&ptr_page_table);

		if((perm&PERM_MODIFIED)== PERM_MODIFIED)
		{
			pf_update_env_page(curenv,virtual_address,frame_info);
f010e0bd:	83 ec 04             	sub    $0x4,%esp
f010e0c0:	ff 75 d8             	pushl  -0x28(%ebp)
f010e0c3:	ff 75 e4             	pushl  -0x1c(%ebp)
f010e0c6:	ff 75 08             	pushl  0x8(%ebp)
f010e0c9:	e8 0a 57 ff ff       	call   f01037d8 <pf_update_env_page>
f010e0ce:	83 c4 10             	add    $0x10,%esp
		}

		free_frame(frame_info);
f010e0d1:	83 ec 0c             	sub    $0xc,%esp
f010e0d4:	ff 75 d8             	pushl  -0x28(%ebp)
f010e0d7:	e8 2b 89 ff ff       	call   f0106a07 <free_frame>
f010e0dc:	83 c4 10             	add    $0x10,%esp
	    // remove from working set
		env_page_ws_invalidate(curenv,virtual_address);
f010e0df:	83 ec 08             	sub    $0x8,%esp
f010e0e2:	ff 75 e4             	pushl  -0x1c(%ebp)
f010e0e5:	ff 75 08             	pushl  0x8(%ebp)
f010e0e8:	e8 72 9d ff ff       	call   f0107e5f <env_page_ws_invalidate>
f010e0ed:	83 c4 10             	add    $0x10,%esp

		env_page_ws_print(curenv);
f010e0f0:	83 ec 0c             	sub    $0xc,%esp
f010e0f3:	ff 75 08             	pushl  0x8(%ebp)
f010e0f6:	e8 90 9f ff ff       	call   f010808b <env_page_ws_print>
f010e0fb:	83 c4 10             	add    $0x10,%esp
		struct FrameInfo *ptr_frame;
		allocate_frame(&ptr_frame);
f010e0fe:	83 ec 0c             	sub    $0xc,%esp
f010e101:	8d 45 cc             	lea    -0x34(%ebp),%eax
f010e104:	50                   	push   %eax
f010e105:	e8 e8 87 ff ff       	call   f01068f2 <allocate_frame>
f010e10a:	83 c4 10             	add    $0x10,%esp
		map_frame(curenv->env_page_directory,ptr_frame,fault_va, PERM_WRITEABLE|PERM_USER);
f010e10d:	8b 55 cc             	mov    -0x34(%ebp),%edx
f010e110:	8b 45 08             	mov    0x8(%ebp),%eax
f010e113:	8b 40 5c             	mov    0x5c(%eax),%eax
f010e116:	6a 06                	push   $0x6
f010e118:	ff 75 0c             	pushl  0xc(%ebp)
f010e11b:	52                   	push   %edx
f010e11c:	50                   	push   %eax
f010e11d:	e8 1f 8c ff ff       	call   f0106d41 <map_frame>
f010e122:	83 c4 10             	add    $0x10,%esp
		env_page_ws_set_entry(curenv,curenv->page_last_WS_index,fault_va);
f010e125:	8b 45 08             	mov    0x8(%ebp),%eax
f010e128:	8b 80 2c 05 00 00    	mov    0x52c(%eax),%eax
f010e12e:	83 ec 04             	sub    $0x4,%esp
f010e131:	ff 75 0c             	pushl  0xc(%ebp)
f010e134:	50                   	push   %eax
f010e135:	ff 75 08             	pushl  0x8(%ebp)
f010e138:	e8 8d 9d ff ff       	call   f0107eca <env_page_ws_set_entry>
f010e13d:	83 c4 10             	add    $0x10,%esp
		curenv->page_last_WS_index++;
f010e140:	8b 45 08             	mov    0x8(%ebp),%eax
f010e143:	8b 80 2c 05 00 00    	mov    0x52c(%eax),%eax
f010e149:	8d 50 01             	lea    0x1(%eax),%edx
f010e14c:	8b 45 08             	mov    0x8(%ebp),%eax
f010e14f:	89 90 2c 05 00 00    	mov    %edx,0x52c(%eax)
		if(curenv->page_last_WS_index == curenv->page_WS_max_size)
f010e155:	8b 45 08             	mov    0x8(%ebp),%eax
f010e158:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f010e15e:	8b 45 08             	mov    0x8(%ebp),%eax
f010e161:	8b 40 74             	mov    0x74(%eax),%eax
f010e164:	39 c2                	cmp    %eax,%edx
f010e166:	75 0d                	jne    f010e175 <page_fault_handler+0x32c>
			curenv->page_last_WS_index = 0;
f010e168:	8b 45 08             	mov    0x8(%ebp),%eax
f010e16b:	c7 80 2c 05 00 00 00 	movl   $0x0,0x52c(%eax)
f010e172:	00 00 00 

		env_page_ws_print(curenv);
f010e175:	83 ec 0c             	sub    $0xc,%esp
f010e178:	ff 75 08             	pushl  0x8(%ebp)
f010e17b:	e8 0b 9f ff ff       	call   f010808b <env_page_ws_print>
f010e180:	83 c4 10             	add    $0x10,%esp

	}
	//refer to the project presentation and documentation for details
}
f010e183:	90                   	nop
f010e184:	c9                   	leave  
f010e185:	c3                   	ret    

f010e186 <__page_fault_handler_with_buffering>:
void __page_fault_handler_with_buffering(struct Env * curenv, uint32 fault_va)
{
f010e186:	55                   	push   %ebp
f010e187:	89 e5                	mov    %esp,%ebp
f010e189:	83 ec 08             	sub    $0x8,%esp
	// Write your code here, remove the panic and write your code
	panic("__page_fault_handler_with_buffering() is not implemented yet...!!");
f010e18c:	83 ec 04             	sub    $0x4,%esp
f010e18f:	68 80 7b 13 f0       	push   $0xf0137b80
f010e194:	68 9e 00 00 00       	push   $0x9e
f010e199:	68 2b 7b 13 f0       	push   $0xf0137b2b
f010e19e:	e8 62 20 ff ff       	call   f0100205 <_panic>

f010e1a3 <create_semaphores_array>:
// [1] Create "semaphores" array:
//===============================
//Dynamically allocate the "semaphores" array
//initialize the "semaphores" array by 0's and empty = 1
void create_semaphores_array(uint32 numOfSemaphores)
{
f010e1a3:	55                   	push   %ebp
f010e1a4:	89 e5                	mov    %esp,%ebp
f010e1a6:	83 ec 18             	sub    $0x18,%esp
#if USE_KHEAP
	MAX_SEMAPHORES = numOfSemaphores ;
f010e1a9:	8b 45 08             	mov    0x8(%ebp),%eax
f010e1ac:	a3 74 25 78 f0       	mov    %eax,0xf0782574
	semaphores = (struct Semaphore*) kmalloc(numOfSemaphores*sizeof(struct Semaphore));
f010e1b1:	8b 55 08             	mov    0x8(%ebp),%edx
f010e1b4:	89 d0                	mov    %edx,%eax
f010e1b6:	c1 e0 02             	shl    $0x2,%eax
f010e1b9:	01 d0                	add    %edx,%eax
f010e1bb:	01 c0                	add    %eax,%eax
f010e1bd:	01 d0                	add    %edx,%eax
f010e1bf:	01 c0                	add    %eax,%eax
f010e1c1:	01 d0                	add    %edx,%eax
f010e1c3:	c1 e0 02             	shl    $0x2,%eax
f010e1c6:	83 ec 0c             	sub    $0xc,%esp
f010e1c9:	50                   	push   %eax
f010e1ca:	e8 b6 96 ff ff       	call   f0107885 <kmalloc>
f010e1cf:	83 c4 10             	add    $0x10,%esp
f010e1d2:	a3 cc 25 78 f0       	mov    %eax,0xf07825cc
	if (semaphores == NULL)
f010e1d7:	a1 cc 25 78 f0       	mov    0xf07825cc,%eax
f010e1dc:	85 c0                	test   %eax,%eax
f010e1de:	75 14                	jne    f010e1f4 <create_semaphores_array+0x51>
	{
		panic("Kernel runs out of memory\nCan't create the array of semaphores.");
f010e1e0:	83 ec 04             	sub    $0x4,%esp
f010e1e3:	68 c4 7b 13 f0       	push   $0xf0137bc4
f010e1e8:	6a 1e                	push   $0x1e
f010e1ea:	68 04 7c 13 f0       	push   $0xf0137c04
f010e1ef:	e8 11 20 ff ff       	call   f0100205 <_panic>
	}
#endif
	for (int i = 0; i < MAX_SEMAPHORES; ++i)
f010e1f4:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f010e1fb:	e9 bd 00 00 00       	jmp    f010e2bd <create_semaphores_array+0x11a>
	{
		memset(&(semaphores[i]), 0, sizeof(struct Semaphore));
f010e200:	8b 0d cc 25 78 f0    	mov    0xf07825cc,%ecx
f010e206:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010e209:	89 d0                	mov    %edx,%eax
f010e20b:	c1 e0 02             	shl    $0x2,%eax
f010e20e:	01 d0                	add    %edx,%eax
f010e210:	01 c0                	add    %eax,%eax
f010e212:	01 d0                	add    %edx,%eax
f010e214:	01 c0                	add    %eax,%eax
f010e216:	01 d0                	add    %edx,%eax
f010e218:	c1 e0 02             	shl    $0x2,%eax
f010e21b:	01 c8                	add    %ecx,%eax
f010e21d:	83 ec 04             	sub    $0x4,%esp
f010e220:	6a 5c                	push   $0x5c
f010e222:	6a 00                	push   $0x0
f010e224:	50                   	push   %eax
f010e225:	e8 b6 31 02 00       	call   f01313e0 <memset>
f010e22a:	83 c4 10             	add    $0x10,%esp
		semaphores[i].empty = 1;
f010e22d:	8b 0d cc 25 78 f0    	mov    0xf07825cc,%ecx
f010e233:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010e236:	89 d0                	mov    %edx,%eax
f010e238:	c1 e0 02             	shl    $0x2,%eax
f010e23b:	01 d0                	add    %edx,%eax
f010e23d:	01 c0                	add    %eax,%eax
f010e23f:	01 d0                	add    %edx,%eax
f010e241:	01 c0                	add    %eax,%eax
f010e243:	01 d0                	add    %edx,%eax
f010e245:	c1 e0 02             	shl    $0x2,%eax
f010e248:	01 c8                	add    %ecx,%eax
f010e24a:	c6 40 58 01          	movb   $0x1,0x58(%eax)
		LIST_INIT(&(semaphores[i].env_queue));
f010e24e:	8b 0d cc 25 78 f0    	mov    0xf07825cc,%ecx
f010e254:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010e257:	89 d0                	mov    %edx,%eax
f010e259:	c1 e0 02             	shl    $0x2,%eax
f010e25c:	01 d0                	add    %edx,%eax
f010e25e:	01 c0                	add    %eax,%eax
f010e260:	01 d0                	add    %edx,%eax
f010e262:	01 c0                	add    %eax,%eax
f010e264:	01 d0                	add    %edx,%eax
f010e266:	c1 e0 02             	shl    $0x2,%eax
f010e269:	01 c8                	add    %ecx,%eax
f010e26b:	c7 40 44 00 00 00 00 	movl   $0x0,0x44(%eax)
f010e272:	8b 0d cc 25 78 f0    	mov    0xf07825cc,%ecx
f010e278:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010e27b:	89 d0                	mov    %edx,%eax
f010e27d:	c1 e0 02             	shl    $0x2,%eax
f010e280:	01 d0                	add    %edx,%eax
f010e282:	01 c0                	add    %eax,%eax
f010e284:	01 d0                	add    %edx,%eax
f010e286:	01 c0                	add    %eax,%eax
f010e288:	01 d0                	add    %edx,%eax
f010e28a:	c1 e0 02             	shl    $0x2,%eax
f010e28d:	01 c8                	add    %ecx,%eax
f010e28f:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f010e296:	8b 0d cc 25 78 f0    	mov    0xf07825cc,%ecx
f010e29c:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010e29f:	89 d0                	mov    %edx,%eax
f010e2a1:	c1 e0 02             	shl    $0x2,%eax
f010e2a4:	01 d0                	add    %edx,%eax
f010e2a6:	01 c0                	add    %eax,%eax
f010e2a8:	01 d0                	add    %edx,%eax
f010e2aa:	01 c0                	add    %eax,%eax
f010e2ac:	01 d0                	add    %edx,%eax
f010e2ae:	c1 e0 02             	shl    $0x2,%eax
f010e2b1:	01 c8                	add    %ecx,%eax
f010e2b3:	c7 40 50 00 00 00 00 	movl   $0x0,0x50(%eax)
	if (semaphores == NULL)
	{
		panic("Kernel runs out of memory\nCan't create the array of semaphores.");
	}
#endif
	for (int i = 0; i < MAX_SEMAPHORES; ++i)
f010e2ba:	ff 45 f4             	incl   -0xc(%ebp)
f010e2bd:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010e2c0:	a1 74 25 78 f0       	mov    0xf0782574,%eax
f010e2c5:	39 c2                	cmp    %eax,%edx
f010e2c7:	0f 82 33 ff ff ff    	jb     f010e200 <create_semaphores_array+0x5d>
		memset(&(semaphores[i]), 0, sizeof(struct Semaphore));
		semaphores[i].empty = 1;
		LIST_INIT(&(semaphores[i].env_queue));
	}

}
f010e2cd:	90                   	nop
f010e2ce:	c9                   	leave  
f010e2cf:	c3                   	ret    

f010e2d0 <allocate_semaphore_object>:
//	a) if succeed:
//		1. allocatedSemaphore (pointer to struct Semaphore) passed by reference
//		2. SempahoreObjectID (its index in the array) as a return parameter
//	b) E_NO_SEMAPHORE if the the array of semaphores is full (i.e. reaches "MAX_SEMAPHORES")
int allocate_semaphore_object(struct Semaphore **allocatedObject)
{
f010e2d0:	55                   	push   %ebp
f010e2d1:	89 e5                	mov    %esp,%ebp
f010e2d3:	83 ec 18             	sub    $0x18,%esp
	int32 semaphoreObjectID = -1 ;
f010e2d6:	c7 45 f4 ff ff ff ff 	movl   $0xffffffff,-0xc(%ebp)
	for (int i = 0; i < MAX_SEMAPHORES; ++i)
f010e2dd:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f010e2e4:	eb 2f                	jmp    f010e315 <allocate_semaphore_object+0x45>
	{
		if (semaphores[i].empty)
f010e2e6:	8b 0d cc 25 78 f0    	mov    0xf07825cc,%ecx
f010e2ec:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010e2ef:	89 d0                	mov    %edx,%eax
f010e2f1:	c1 e0 02             	shl    $0x2,%eax
f010e2f4:	01 d0                	add    %edx,%eax
f010e2f6:	01 c0                	add    %eax,%eax
f010e2f8:	01 d0                	add    %edx,%eax
f010e2fa:	01 c0                	add    %eax,%eax
f010e2fc:	01 d0                	add    %edx,%eax
f010e2fe:	c1 e0 02             	shl    $0x2,%eax
f010e301:	01 c8                	add    %ecx,%eax
f010e303:	8a 40 58             	mov    0x58(%eax),%al
f010e306:	84 c0                	test   %al,%al
f010e308:	74 08                	je     f010e312 <allocate_semaphore_object+0x42>
		{
			semaphoreObjectID = i;
f010e30a:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010e30d:	89 45 f4             	mov    %eax,-0xc(%ebp)
			break;
f010e310:	eb 0f                	jmp    f010e321 <allocate_semaphore_object+0x51>
//		2. SempahoreObjectID (its index in the array) as a return parameter
//	b) E_NO_SEMAPHORE if the the array of semaphores is full (i.e. reaches "MAX_SEMAPHORES")
int allocate_semaphore_object(struct Semaphore **allocatedObject)
{
	int32 semaphoreObjectID = -1 ;
	for (int i = 0; i < MAX_SEMAPHORES; ++i)
f010e312:	ff 45 f0             	incl   -0x10(%ebp)
f010e315:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010e318:	a1 74 25 78 f0       	mov    0xf0782574,%eax
f010e31d:	39 c2                	cmp    %eax,%edx
f010e31f:	72 c5                	jb     f010e2e6 <allocate_semaphore_object+0x16>
			semaphoreObjectID = i;
			break;
		}
	}

	if (semaphoreObjectID == -1)
f010e321:	83 7d f4 ff          	cmpl   $0xffffffff,-0xc(%ebp)
f010e325:	75 4d                	jne    f010e374 <allocate_semaphore_object+0xa4>
	{
		//try to double the size of the "semaphores" array
		#if USE_KHEAP
		{
			semaphores = (struct Semaphore*) krealloc(semaphores, 2*MAX_SEMAPHORES);
f010e327:	a1 74 25 78 f0       	mov    0xf0782574,%eax
f010e32c:	01 c0                	add    %eax,%eax
f010e32e:	89 c2                	mov    %eax,%edx
f010e330:	a1 cc 25 78 f0       	mov    0xf07825cc,%eax
f010e335:	83 ec 08             	sub    $0x8,%esp
f010e338:	52                   	push   %edx
f010e339:	50                   	push   %eax
f010e33a:	e8 06 98 ff ff       	call   f0107b45 <krealloc>
f010e33f:	83 c4 10             	add    $0x10,%esp
f010e342:	a3 cc 25 78 f0       	mov    %eax,0xf07825cc
			if (semaphores == NULL)
f010e347:	a1 cc 25 78 f0       	mov    0xf07825cc,%eax
f010e34c:	85 c0                	test   %eax,%eax
f010e34e:	75 10                	jne    f010e360 <allocate_semaphore_object+0x90>
			{
				*allocatedObject = NULL;
f010e350:	8b 45 08             	mov    0x8(%ebp),%eax
f010e353:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
				return E_NO_SEMAPHORE;
f010e359:	b8 f5 ff ff ff       	mov    $0xfffffff5,%eax
f010e35e:	eb 5b                	jmp    f010e3bb <allocate_semaphore_object+0xeb>
			}
			else
			{
				semaphoreObjectID = MAX_SEMAPHORES;
f010e360:	a1 74 25 78 f0       	mov    0xf0782574,%eax
f010e365:	89 45 f4             	mov    %eax,-0xc(%ebp)
				MAX_SEMAPHORES *= 2;
f010e368:	a1 74 25 78 f0       	mov    0xf0782574,%eax
f010e36d:	01 c0                	add    %eax,%eax
f010e36f:	a3 74 25 78 f0       	mov    %eax,0xf0782574
			return E_NO_SEMAPHORE;
		}
		#endif
	}

	*allocatedObject = &(semaphores[semaphoreObjectID]);
f010e374:	8b 0d cc 25 78 f0    	mov    0xf07825cc,%ecx
f010e37a:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010e37d:	89 d0                	mov    %edx,%eax
f010e37f:	c1 e0 02             	shl    $0x2,%eax
f010e382:	01 d0                	add    %edx,%eax
f010e384:	01 c0                	add    %eax,%eax
f010e386:	01 d0                	add    %edx,%eax
f010e388:	01 c0                	add    %eax,%eax
f010e38a:	01 d0                	add    %edx,%eax
f010e38c:	c1 e0 02             	shl    $0x2,%eax
f010e38f:	8d 14 01             	lea    (%ecx,%eax,1),%edx
f010e392:	8b 45 08             	mov    0x8(%ebp),%eax
f010e395:	89 10                	mov    %edx,(%eax)
	semaphores[semaphoreObjectID].empty = 0;
f010e397:	8b 0d cc 25 78 f0    	mov    0xf07825cc,%ecx
f010e39d:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010e3a0:	89 d0                	mov    %edx,%eax
f010e3a2:	c1 e0 02             	shl    $0x2,%eax
f010e3a5:	01 d0                	add    %edx,%eax
f010e3a7:	01 c0                	add    %eax,%eax
f010e3a9:	01 d0                	add    %edx,%eax
f010e3ab:	01 c0                	add    %eax,%eax
f010e3ad:	01 d0                	add    %edx,%eax
f010e3af:	c1 e0 02             	shl    $0x2,%eax
f010e3b2:	01 c8                	add    %ecx,%eax
f010e3b4:	c6 40 58 00          	movb   $0x0,0x58(%eax)

	return semaphoreObjectID;
f010e3b8:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f010e3bb:	c9                   	leave  
f010e3bc:	c3                   	ret    

f010e3bd <get_semaphore_object_ID>:
//Search for the given semaphore object in the "semaphores" array
//Return:
//	a) if found: SemaphoreObjectID (index of the semaphore object in the array)
//	b) else: E_SEMAPHORE_NOT_EXISTS
int get_semaphore_object_ID(int32 ownerID, char* name)
{
f010e3bd:	55                   	push   %ebp
f010e3be:	89 e5                	mov    %esp,%ebp
f010e3c0:	83 ec 18             	sub    $0x18,%esp
	int i=0;
f010e3c3:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	for(; i < MAX_SEMAPHORES; ++i)
f010e3ca:	e9 84 00 00 00       	jmp    f010e453 <get_semaphore_object_ID+0x96>
	{
		if (semaphores[i].empty)
f010e3cf:	8b 0d cc 25 78 f0    	mov    0xf07825cc,%ecx
f010e3d5:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010e3d8:	89 d0                	mov    %edx,%eax
f010e3da:	c1 e0 02             	shl    $0x2,%eax
f010e3dd:	01 d0                	add    %edx,%eax
f010e3df:	01 c0                	add    %eax,%eax
f010e3e1:	01 d0                	add    %edx,%eax
f010e3e3:	01 c0                	add    %eax,%eax
f010e3e5:	01 d0                	add    %edx,%eax
f010e3e7:	c1 e0 02             	shl    $0x2,%eax
f010e3ea:	01 c8                	add    %ecx,%eax
f010e3ec:	8a 40 58             	mov    0x58(%eax),%al
f010e3ef:	84 c0                	test   %al,%al
f010e3f1:	75 5c                	jne    f010e44f <get_semaphore_object_ID+0x92>
			continue;

		if(semaphores[i].ownerID == ownerID && strcmp(name, semaphores[i].name)==0)
f010e3f3:	8b 0d cc 25 78 f0    	mov    0xf07825cc,%ecx
f010e3f9:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010e3fc:	89 d0                	mov    %edx,%eax
f010e3fe:	c1 e0 02             	shl    $0x2,%eax
f010e401:	01 d0                	add    %edx,%eax
f010e403:	01 c0                	add    %eax,%eax
f010e405:	01 d0                	add    %edx,%eax
f010e407:	01 c0                	add    %eax,%eax
f010e409:	01 d0                	add    %edx,%eax
f010e40b:	c1 e0 02             	shl    $0x2,%eax
f010e40e:	01 c8                	add    %ecx,%eax
f010e410:	8b 00                	mov    (%eax),%eax
f010e412:	3b 45 08             	cmp    0x8(%ebp),%eax
f010e415:	75 39                	jne    f010e450 <get_semaphore_object_ID+0x93>
f010e417:	8b 0d cc 25 78 f0    	mov    0xf07825cc,%ecx
f010e41d:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010e420:	89 d0                	mov    %edx,%eax
f010e422:	c1 e0 02             	shl    $0x2,%eax
f010e425:	01 d0                	add    %edx,%eax
f010e427:	01 c0                	add    %eax,%eax
f010e429:	01 d0                	add    %edx,%eax
f010e42b:	01 c0                	add    %eax,%eax
f010e42d:	01 d0                	add    %edx,%eax
f010e42f:	c1 e0 02             	shl    $0x2,%eax
f010e432:	01 c8                	add    %ecx,%eax
f010e434:	83 c0 04             	add    $0x4,%eax
f010e437:	83 ec 08             	sub    $0x8,%esp
f010e43a:	50                   	push   %eax
f010e43b:	ff 75 0c             	pushl  0xc(%ebp)
f010e43e:	e8 bb 2e 02 00       	call   f01312fe <strcmp>
f010e443:	83 c4 10             	add    $0x10,%esp
f010e446:	85 c0                	test   %eax,%eax
f010e448:	75 06                	jne    f010e450 <get_semaphore_object_ID+0x93>
		{
			return i;
f010e44a:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010e44d:	eb 19                	jmp    f010e468 <get_semaphore_object_ID+0xab>
{
	int i=0;
	for(; i < MAX_SEMAPHORES; ++i)
	{
		if (semaphores[i].empty)
			continue;
f010e44f:	90                   	nop
//	a) if found: SemaphoreObjectID (index of the semaphore object in the array)
//	b) else: E_SEMAPHORE_NOT_EXISTS
int get_semaphore_object_ID(int32 ownerID, char* name)
{
	int i=0;
	for(; i < MAX_SEMAPHORES; ++i)
f010e450:	ff 45 f4             	incl   -0xc(%ebp)
f010e453:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010e456:	a1 74 25 78 f0       	mov    0xf0782574,%eax
f010e45b:	39 c2                	cmp    %eax,%edx
f010e45d:	0f 82 6c ff ff ff    	jb     f010e3cf <get_semaphore_object_ID+0x12>
		if(semaphores[i].ownerID == ownerID && strcmp(name, semaphores[i].name)==0)
		{
			return i;
		}
	}
	return E_SEMAPHORE_NOT_EXISTS;
f010e463:	b8 f3 ff ff ff       	mov    $0xfffffff3,%eax
}
f010e468:	c9                   	leave  
f010e469:	c3                   	ret    

f010e46a <free_semaphore_object>:
//delete the semaphore with the given ID from the "semaphores" array
//Return:
//	a) 0 if succeed
//	b) E_SEMAPHORE_NOT_EXISTS if the semaphore is not exists
int free_semaphore_object(uint32 semaphoreObjectID)
{
f010e46a:	55                   	push   %ebp
f010e46b:	89 e5                	mov    %esp,%ebp
f010e46d:	83 ec 08             	sub    $0x8,%esp
	if (semaphoreObjectID >= MAX_SEMAPHORES)
f010e470:	a1 74 25 78 f0       	mov    0xf0782574,%eax
f010e475:	39 45 08             	cmp    %eax,0x8(%ebp)
f010e478:	72 0a                	jb     f010e484 <free_semaphore_object+0x1a>
		return E_SEMAPHORE_NOT_EXISTS;
f010e47a:	b8 f3 ff ff ff       	mov    $0xfffffff3,%eax
f010e47f:	e9 bf 00 00 00       	jmp    f010e543 <free_semaphore_object+0xd9>

	memset(&(semaphores[semaphoreObjectID]), 0, sizeof(struct Semaphore));
f010e484:	8b 0d cc 25 78 f0    	mov    0xf07825cc,%ecx
f010e48a:	8b 55 08             	mov    0x8(%ebp),%edx
f010e48d:	89 d0                	mov    %edx,%eax
f010e48f:	c1 e0 02             	shl    $0x2,%eax
f010e492:	01 d0                	add    %edx,%eax
f010e494:	01 c0                	add    %eax,%eax
f010e496:	01 d0                	add    %edx,%eax
f010e498:	01 c0                	add    %eax,%eax
f010e49a:	01 d0                	add    %edx,%eax
f010e49c:	c1 e0 02             	shl    $0x2,%eax
f010e49f:	01 c8                	add    %ecx,%eax
f010e4a1:	83 ec 04             	sub    $0x4,%esp
f010e4a4:	6a 5c                	push   $0x5c
f010e4a6:	6a 00                	push   $0x0
f010e4a8:	50                   	push   %eax
f010e4a9:	e8 32 2f 02 00       	call   f01313e0 <memset>
f010e4ae:	83 c4 10             	add    $0x10,%esp
	semaphores[semaphoreObjectID].empty = 1;
f010e4b1:	8b 0d cc 25 78 f0    	mov    0xf07825cc,%ecx
f010e4b7:	8b 55 08             	mov    0x8(%ebp),%edx
f010e4ba:	89 d0                	mov    %edx,%eax
f010e4bc:	c1 e0 02             	shl    $0x2,%eax
f010e4bf:	01 d0                	add    %edx,%eax
f010e4c1:	01 c0                	add    %eax,%eax
f010e4c3:	01 d0                	add    %edx,%eax
f010e4c5:	01 c0                	add    %eax,%eax
f010e4c7:	01 d0                	add    %edx,%eax
f010e4c9:	c1 e0 02             	shl    $0x2,%eax
f010e4cc:	01 c8                	add    %ecx,%eax
f010e4ce:	c6 40 58 01          	movb   $0x1,0x58(%eax)
	LIST_INIT(&(semaphores[semaphoreObjectID].env_queue));
f010e4d2:	8b 0d cc 25 78 f0    	mov    0xf07825cc,%ecx
f010e4d8:	8b 55 08             	mov    0x8(%ebp),%edx
f010e4db:	89 d0                	mov    %edx,%eax
f010e4dd:	c1 e0 02             	shl    $0x2,%eax
f010e4e0:	01 d0                	add    %edx,%eax
f010e4e2:	01 c0                	add    %eax,%eax
f010e4e4:	01 d0                	add    %edx,%eax
f010e4e6:	01 c0                	add    %eax,%eax
f010e4e8:	01 d0                	add    %edx,%eax
f010e4ea:	c1 e0 02             	shl    $0x2,%eax
f010e4ed:	01 c8                	add    %ecx,%eax
f010e4ef:	c7 40 44 00 00 00 00 	movl   $0x0,0x44(%eax)
f010e4f6:	8b 0d cc 25 78 f0    	mov    0xf07825cc,%ecx
f010e4fc:	8b 55 08             	mov    0x8(%ebp),%edx
f010e4ff:	89 d0                	mov    %edx,%eax
f010e501:	c1 e0 02             	shl    $0x2,%eax
f010e504:	01 d0                	add    %edx,%eax
f010e506:	01 c0                	add    %eax,%eax
f010e508:	01 d0                	add    %edx,%eax
f010e50a:	01 c0                	add    %eax,%eax
f010e50c:	01 d0                	add    %edx,%eax
f010e50e:	c1 e0 02             	shl    $0x2,%eax
f010e511:	01 c8                	add    %ecx,%eax
f010e513:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f010e51a:	8b 0d cc 25 78 f0    	mov    0xf07825cc,%ecx
f010e520:	8b 55 08             	mov    0x8(%ebp),%edx
f010e523:	89 d0                	mov    %edx,%eax
f010e525:	c1 e0 02             	shl    $0x2,%eax
f010e528:	01 d0                	add    %edx,%eax
f010e52a:	01 c0                	add    %eax,%eax
f010e52c:	01 d0                	add    %edx,%eax
f010e52e:	01 c0                	add    %eax,%eax
f010e530:	01 d0                	add    %edx,%eax
f010e532:	c1 e0 02             	shl    $0x2,%eax
f010e535:	01 c8                	add    %ecx,%eax
f010e537:	c7 40 50 00 00 00 00 	movl   $0x0,0x50(%eax)

	return 0;
f010e53e:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010e543:	c9                   	leave  
f010e544:	c3                   	ret    

f010e545 <createSemaphore>:

//======================
// [1] Create Semaphore:
//======================
int createSemaphore(int32 ownerEnvID, char* semaphoreName, uint32 initialValue)
{
f010e545:	55                   	push   %ebp
f010e546:	89 e5                	mov    %esp,%ebp
f010e548:	83 ec 08             	sub    $0x8,%esp
	//TODO: [PROJECT MS3] [SEMAPHORES] createSemaphore
	// your code is here, remove the panic and write your code
	panic("createSemaphore() is not implemented yet...!!");
f010e54b:	83 ec 04             	sub    $0x4,%esp
f010e54e:	68 24 7c 13 f0       	push   $0xf0137c24
f010e553:	68 95 00 00 00       	push   $0x95
f010e558:	68 04 7c 13 f0       	push   $0xf0137c04
f010e55d:	e8 a3 1c ff ff       	call   f0100205 <_panic>

f010e562 <waitSemaphore>:

//============
// [2] Wait():
//============
void waitSemaphore(int32 ownerEnvID, char* semaphoreName)
{
f010e562:	55                   	push   %ebp
f010e563:	89 e5                	mov    %esp,%ebp
f010e565:	83 ec 08             	sub    $0x8,%esp
	//TODO: [PROJECT MS3] [SEMAPHORES] waitSemaphore
	// your code is here, remove the panic and write your code
	panic("waitSemaphore() is not implemented yet...!!");
f010e568:	83 ec 04             	sub    $0x4,%esp
f010e56b:	68 54 7c 13 f0       	push   $0xf0137c54
f010e570:	68 a8 00 00 00       	push   $0xa8
f010e575:	68 04 7c 13 f0       	push   $0xf0137c04
f010e57a:	e8 86 1c ff ff       	call   f0100205 <_panic>

f010e57f <signalSemaphore>:

//==============
// [3] Signal():
//==============
void signalSemaphore(int ownerEnvID, char* semaphoreName)
{
f010e57f:	55                   	push   %ebp
f010e580:	89 e5                	mov    %esp,%ebp
f010e582:	83 ec 08             	sub    $0x8,%esp
	//TODO: [PROJECT MS3] [SEMAPHORES] signalSemaphore
	// your code is here, remove the panic and write your code
	panic("signalSemaphore() is not implemented yet...!!");
f010e585:	83 ec 04             	sub    $0x4,%esp
f010e588:	68 80 7c 13 f0       	push   $0xf0137c80
f010e58d:	68 bd 00 00 00       	push   $0xbd
f010e592:	68 04 7c 13 f0       	push   $0xf0137c04
f010e597:	e8 69 1c ff ff       	call   f0100205 <_panic>

f010e59c <test_initialize_MemBlocksList>:

#define Mega  (1024*1024)
#define kilo (1024)

void test_initialize_MemBlocksList()
{
f010e59c:	55                   	push   %ebp
f010e59d:	89 e5                	mov    %esp,%ebp
f010e59f:	83 ec 18             	sub    $0x18,%esp
	uint32 numOfBlocks = 5;
f010e5a2:	c7 45 ec 05 00 00 00 	movl   $0x5,-0x14(%ebp)
	initialize_MemBlocksList(numOfBlocks);
f010e5a9:	83 ec 0c             	sub    $0xc,%esp
f010e5ac:	ff 75 ec             	pushl  -0x14(%ebp)
f010e5af:	e8 a8 37 02 00       	call   f0131d5c <initialize_MemBlocksList>
f010e5b4:	83 c4 10             	add    $0x10,%esp
	//Check 1: Check number of nodes in AvailableMemBlocksList
	if (LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks)
f010e5b7:	a1 64 26 78 f0       	mov    0xf0782664,%eax
f010e5bc:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f010e5bf:	74 17                	je     f010e5d8 <test_initialize_MemBlocksList+0x3c>
	{
		panic("initialize_MemBlocksList: Allocating wrong size for the AvailableMemBlocksList %d\n", LIST_SIZE(&(AvailableMemBlocksList)));
f010e5c1:	a1 64 26 78 f0       	mov    0xf0782664,%eax
f010e5c6:	50                   	push   %eax
f010e5c7:	68 c0 7c 13 f0       	push   $0xf0137cc0
f010e5cc:	6a 1f                	push   $0x1f
f010e5ce:	68 14 7d 13 f0       	push   $0xf0137d14
f010e5d3:	e8 2d 1c ff ff       	call   f0100205 <_panic>
		//assert(LIST_SIZE(&AvailableMemBlocksList) == numOfBlocks);
	}

	//Check 2: Check number of nodes in AllocMemBlocksList
	if (LIST_SIZE(&(AllocMemBlocksList)) != 0)
f010e5d8:	a1 94 25 78 f0       	mov    0xf0782594,%eax
f010e5dd:	85 c0                	test   %eax,%eax
f010e5df:	74 17                	je     f010e5f8 <test_initialize_MemBlocksList+0x5c>
	{
		panic("initialize_MemBlocksList: Allocating wrong size for the AllocMemBlocksList %d\n", LIST_SIZE(&(AllocMemBlocksList)));
f010e5e1:	a1 94 25 78 f0       	mov    0xf0782594,%eax
f010e5e6:	50                   	push   %eax
f010e5e7:	68 38 7d 13 f0       	push   $0xf0137d38
f010e5ec:	6a 26                	push   $0x26
f010e5ee:	68 14 7d 13 f0       	push   $0xf0137d14
f010e5f3:	e8 0d 1c ff ff       	call   f0100205 <_panic>
	}

	//Check 3: Check number of nodes in AvailableMemBlocksList
	if (LIST_SIZE(&(FreeMemBlocksList)) != 0)
f010e5f8:	a1 30 26 78 f0       	mov    0xf0782630,%eax
f010e5fd:	85 c0                	test   %eax,%eax
f010e5ff:	74 17                	je     f010e618 <test_initialize_MemBlocksList+0x7c>
	{
		panic("initialize_MemBlocksList: Allocating wrong size for the FreeMemBlocksList %d\n", LIST_SIZE(&(FreeMemBlocksList)));
f010e601:	a1 30 26 78 f0       	mov    0xf0782630,%eax
f010e606:	50                   	push   %eax
f010e607:	68 88 7d 13 f0       	push   $0xf0137d88
f010e60c:	6a 2c                	push   $0x2c
f010e60e:	68 14 7d 13 f0       	push   $0xf0137d14
f010e613:	e8 ed 1b ff ff       	call   f0100205 <_panic>
	}

	//Check 4: Check the existance of each node and its data in AvailableMemBlocksList
	struct MemBlock* node = NULL;
f010e618:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	uint32 size = 0;
f010e61f:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	LIST_FOREACH(node, &AvailableMemBlocksList)
f010e626:	a1 58 26 78 f0       	mov    0xf0782658,%eax
f010e62b:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010e62e:	eb 29                	jmp    f010e659 <test_initialize_MemBlocksList+0xbd>
	{
		size++;
f010e630:	ff 45 f0             	incl   -0x10(%ebp)
		cprintf("Node data: sva = %x, size = %d\n", node->sva, node->size);
f010e633:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010e636:	8b 50 0c             	mov    0xc(%eax),%edx
f010e639:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010e63c:	8b 40 08             	mov    0x8(%eax),%eax
f010e63f:	83 ec 04             	sub    $0x4,%esp
f010e642:	52                   	push   %edx
f010e643:	50                   	push   %eax
f010e644:	68 d8 7d 13 f0       	push   $0xf0137dd8
f010e649:	e8 c0 26 ff ff       	call   f0100d0e <cprintf>
f010e64e:	83 c4 10             	add    $0x10,%esp
	}

	//Check 4: Check the existance of each node and its data in AvailableMemBlocksList
	struct MemBlock* node = NULL;
	uint32 size = 0;
	LIST_FOREACH(node, &AvailableMemBlocksList)
f010e651:	a1 60 26 78 f0       	mov    0xf0782660,%eax
f010e656:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010e659:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010e65d:	74 07                	je     f010e666 <test_initialize_MemBlocksList+0xca>
f010e65f:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010e662:	8b 00                	mov    (%eax),%eax
f010e664:	eb 05                	jmp    f010e66b <test_initialize_MemBlocksList+0xcf>
f010e666:	b8 00 00 00 00       	mov    $0x0,%eax
f010e66b:	a3 60 26 78 f0       	mov    %eax,0xf0782660
f010e670:	a1 60 26 78 f0       	mov    0xf0782660,%eax
f010e675:	85 c0                	test   %eax,%eax
f010e677:	75 b7                	jne    f010e630 <test_initialize_MemBlocksList+0x94>
f010e679:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010e67d:	75 b1                	jne    f010e630 <test_initialize_MemBlocksList+0x94>
	{
		size++;
		cprintf("Node data: sva = %x, size = %d\n", node->sva, node->size);
	}
	if(LIST_SIZE(&(AvailableMemBlocksList)) != size)
f010e67f:	a1 64 26 78 f0       	mov    0xf0782664,%eax
f010e684:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f010e687:	74 14                	je     f010e69d <test_initialize_MemBlocksList+0x101>
		panic("initialize_MemBlocksList: Some nodes are not created in the initialize_MemBlocksList\n");
f010e689:	83 ec 04             	sub    $0x4,%esp
f010e68c:	68 f8 7d 13 f0       	push   $0xf0137df8
f010e691:	6a 38                	push   $0x38
f010e693:	68 14 7d 13 f0       	push   $0xf0137d14
f010e698:	e8 68 1b ff ff       	call   f0100205 <_panic>
	else
		cprintf("Congratulations!! test initialize_MemBlocksList completed successfully.\n");
f010e69d:	83 ec 0c             	sub    $0xc,%esp
f010e6a0:	68 50 7e 13 f0       	push   $0xf0137e50
f010e6a5:	e8 64 26 ff ff       	call   f0100d0e <cprintf>
f010e6aa:	83 c4 10             	add    $0x10,%esp
}
f010e6ad:	90                   	nop
f010e6ae:	c9                   	leave  
f010e6af:	c3                   	ret    

f010e6b0 <test_insert_sorted_allocList>:

void test_insert_sorted_allocList()
{
f010e6b0:	55                   	push   %ebp
f010e6b1:	89 e5                	mov    %esp,%ebp
f010e6b3:	57                   	push   %edi
f010e6b4:	81 ec 94 00 00 00    	sub    $0x94,%esp
	uint32 numOfBlocks = 5;
f010e6ba:	c7 45 f4 05 00 00 00 	movl   $0x5,-0xc(%ebp)
	initialize_MemBlocksList(numOfBlocks);
f010e6c1:	83 ec 0c             	sub    $0xc,%esp
f010e6c4:	ff 75 f4             	pushl  -0xc(%ebp)
f010e6c7:	e8 90 36 02 00       	call   f0131d5c <initialize_MemBlocksList>
f010e6cc:	83 c4 10             	add    $0x10,%esp
	LIST_INIT(&AllocMemBlocksList);
f010e6cf:	c7 05 88 25 78 f0 00 	movl   $0x0,0xf0782588
f010e6d6:	00 00 00 
f010e6d9:	c7 05 8c 25 78 f0 00 	movl   $0x0,0xf078258c
f010e6e0:	00 00 00 
f010e6e3:	c7 05 94 25 78 f0 00 	movl   $0x0,0xf0782594
f010e6ea:	00 00 00 
	LIST_INIT(&FreeMemBlocksList);
f010e6ed:	c7 05 24 26 78 f0 00 	movl   $0x0,0xf0782624
f010e6f4:	00 00 00 
f010e6f7:	c7 05 28 26 78 f0 00 	movl   $0x0,0xf0782628
f010e6fe:	00 00 00 
f010e701:	c7 05 30 26 78 f0 00 	movl   $0x0,0xf0782630
f010e708:	00 00 00 

	uint32 blocksToInsertSVAs[5]={0,0,0,0,0};
f010e70b:	8d 55 d8             	lea    -0x28(%ebp),%edx
f010e70e:	b9 05 00 00 00       	mov    $0x5,%ecx
f010e713:	b8 00 00 00 00       	mov    $0x0,%eax
f010e718:	89 d7                	mov    %edx,%edi
f010e71a:	f3 ab                	rep stos %eax,%es:(%edi)
	uint32 blocksToInsertSizes[5]={0,0,0,0,0};
f010e71c:	8d 55 c4             	lea    -0x3c(%ebp),%edx
f010e71f:	b9 05 00 00 00       	mov    $0x5,%ecx
f010e724:	b8 00 00 00 00       	mov    $0x0,%eax
f010e729:	89 d7                	mov    %edx,%edi
f010e72b:	f3 ab                	rep stos %eax,%es:(%edi)
	uint32 size = 0;
f010e72d:	c7 45 c0 00 00 00 00 	movl   $0x0,-0x40(%ebp)
	uint32 actualSize = 0;
f010e734:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)


	/*INSERT Scenario 1: Insert BLOCK_1 in the empty AllocMemBlocksList*/
	//BLOCK_1 sva = 8K
	blocksToInsertSVAs[1] = 0x0 + (8*kilo);
f010e73b:	c7 45 dc 00 20 00 00 	movl   $0x2000,-0x24(%ebp)
	blocksToInsertSizes[1] = (4*kilo);
f010e742:	c7 45 c8 00 10 00 00 	movl   $0x1000,-0x38(%ebp)
	struct MemBlock blockToInsert1;
	blockToInsert1.sva = blocksToInsertSVAs[1];
f010e749:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010e74c:	89 45 b8             	mov    %eax,-0x48(%ebp)
	blockToInsert1.size = blocksToInsertSizes[1];
f010e74f:	8b 45 c8             	mov    -0x38(%ebp),%eax
f010e752:	89 45 bc             	mov    %eax,-0x44(%ebp)

	insert_sorted_allocList(&blockToInsert1);
f010e755:	83 ec 0c             	sub    $0xc,%esp
f010e758:	8d 45 b0             	lea    -0x50(%ebp),%eax
f010e75b:	50                   	push   %eax
f010e75c:	e8 30 37 02 00       	call   f0131e91 <insert_sorted_allocList>
f010e761:	83 c4 10             	add    $0x10,%esp

	//Check 1: Check size of the AllocMemBlocksList
	actualSize = 1;
f010e764:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
	if (LIST_SIZE(&(AllocMemBlocksList)) != actualSize) panic("insert_sorted: WRONG ALLOCATION - wrong size for the AllocMemBlocksList.");
f010e76b:	a1 94 25 78 f0       	mov    0xf0782594,%eax
f010e770:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f010e773:	74 14                	je     f010e789 <test_insert_sorted_allocList+0xd9>
f010e775:	83 ec 04             	sub    $0x4,%esp
f010e778:	68 9c 7e 13 f0       	push   $0xf0137e9c
f010e77d:	6a 56                	push   $0x56
f010e77f:	68 14 7d 13 f0       	push   $0xf0137d14
f010e784:	e8 7c 1a ff ff       	call   f0100205 <_panic>

	//Check 2: Check size of the AvailableMemBlocksList
	if (LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks) panic("insert_sorted: WRONG ALLOCATION - wrong size for the AvailableMemBlocksList.");
f010e789:	a1 64 26 78 f0       	mov    0xf0782664,%eax
f010e78e:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f010e791:	74 14                	je     f010e7a7 <test_insert_sorted_allocList+0xf7>
f010e793:	83 ec 04             	sub    $0x4,%esp
f010e796:	68 e8 7e 13 f0       	push   $0xf0137ee8
f010e79b:	6a 59                	push   $0x59
f010e79d:	68 14 7d 13 f0       	push   $0xf0137d14
f010e7a2:	e8 5e 1a ff ff       	call   f0100205 <_panic>

	//Check 3: Check the allocated list content
	int chk = check_list_data(&AllocMemBlocksList, blocksToInsertSVAs, blocksToInsertSizes, &size, actualSize);
f010e7a7:	83 ec 0c             	sub    $0xc,%esp
f010e7aa:	ff 75 f0             	pushl  -0x10(%ebp)
f010e7ad:	8d 45 c0             	lea    -0x40(%ebp),%eax
f010e7b0:	50                   	push   %eax
f010e7b1:	8d 45 c4             	lea    -0x3c(%ebp),%eax
f010e7b4:	50                   	push   %eax
f010e7b5:	8d 45 d8             	lea    -0x28(%ebp),%eax
f010e7b8:	50                   	push   %eax
f010e7b9:	68 88 25 78 f0       	push   $0xf0782588
f010e7be:	e8 7d 26 00 00       	call   f0110e40 <check_list_data>
f010e7c3:	83 c4 20             	add    $0x20,%esp
f010e7c6:	89 45 ec             	mov    %eax,-0x14(%ebp)
	if(chk != 1) panic("insert_sorted: WRONG ALLOCATION .. AllocMemBlocksList content is not correct.");
f010e7c9:	83 7d ec 01          	cmpl   $0x1,-0x14(%ebp)
f010e7cd:	74 14                	je     f010e7e3 <test_insert_sorted_allocList+0x133>
f010e7cf:	83 ec 04             	sub    $0x4,%esp
f010e7d2:	68 38 7f 13 f0       	push   $0xf0137f38
f010e7d7:	6a 5d                	push   $0x5d
f010e7d9:	68 14 7d 13 f0       	push   $0xf0137d14
f010e7de:	e8 22 1a ff ff       	call   f0100205 <_panic>
	if(size != actualSize) panic("insert_sorted: WRONG ALLOCATION .. AllocMemBlocksList size is not correct.");
f010e7e3:	8b 45 c0             	mov    -0x40(%ebp),%eax
f010e7e6:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f010e7e9:	74 14                	je     f010e7ff <test_insert_sorted_allocList+0x14f>
f010e7eb:	83 ec 04             	sub    $0x4,%esp
f010e7ee:	68 88 7f 13 f0       	push   $0xf0137f88
f010e7f3:	6a 5e                	push   $0x5e
f010e7f5:	68 14 7d 13 f0       	push   $0xf0137d14
f010e7fa:	e8 06 1a ff ff       	call   f0100205 <_panic>

	//====================================================================//
	/*INSERT Scenario 2: Insert BLOCK_2 in the AllocMemBlocksList with sva greater than BLOCK_1*/
	//BLOCK_2 sva = 28K
	blocksToInsertSVAs[4] = (28*kilo);
f010e7ff:	c7 45 e8 00 70 00 00 	movl   $0x7000,-0x18(%ebp)
	blocksToInsertSizes[4] = (2*kilo);
f010e806:	c7 45 d4 00 08 00 00 	movl   $0x800,-0x2c(%ebp)
	struct MemBlock blockToInsert2;
	blockToInsert2.sva = blocksToInsertSVAs[4];
f010e80d:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010e810:	89 45 a8             	mov    %eax,-0x58(%ebp)
	blockToInsert2.size = blocksToInsertSizes[4];
f010e813:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f010e816:	89 45 ac             	mov    %eax,-0x54(%ebp)

	insert_sorted_allocList(&blockToInsert2);
f010e819:	83 ec 0c             	sub    $0xc,%esp
f010e81c:	8d 45 a0             	lea    -0x60(%ebp),%eax
f010e81f:	50                   	push   %eax
f010e820:	e8 6c 36 02 00       	call   f0131e91 <insert_sorted_allocList>
f010e825:	83 c4 10             	add    $0x10,%esp

	//Check 1: Check size of the AllocMemBlocksList
	actualSize = 2;
f010e828:	c7 45 f0 02 00 00 00 	movl   $0x2,-0x10(%ebp)
	if (LIST_SIZE(&(AllocMemBlocksList)) != actualSize) panic("insert_sorted: WRONG ALLOCATION - wrong size for the AllocMemBlocksList.");
f010e82f:	a1 94 25 78 f0       	mov    0xf0782594,%eax
f010e834:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f010e837:	74 14                	je     f010e84d <test_insert_sorted_allocList+0x19d>
f010e839:	83 ec 04             	sub    $0x4,%esp
f010e83c:	68 9c 7e 13 f0       	push   $0xf0137e9c
f010e841:	6a 6d                	push   $0x6d
f010e843:	68 14 7d 13 f0       	push   $0xf0137d14
f010e848:	e8 b8 19 ff ff       	call   f0100205 <_panic>

	//Check 2: Check size of the AvailableMemBlocksList
	if (LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks) panic("insert_sorted: WRONG ALLOCATION - wrong size for the AvailableMemBlocksList.");
f010e84d:	a1 64 26 78 f0       	mov    0xf0782664,%eax
f010e852:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f010e855:	74 14                	je     f010e86b <test_insert_sorted_allocList+0x1bb>
f010e857:	83 ec 04             	sub    $0x4,%esp
f010e85a:	68 e8 7e 13 f0       	push   $0xf0137ee8
f010e85f:	6a 70                	push   $0x70
f010e861:	68 14 7d 13 f0       	push   $0xf0137d14
f010e866:	e8 9a 19 ff ff       	call   f0100205 <_panic>

	//Check 3: Check the allocated list content
	size = 0;
f010e86b:	c7 45 c0 00 00 00 00 	movl   $0x0,-0x40(%ebp)
	chk = check_list_data(&AllocMemBlocksList, blocksToInsertSVAs, blocksToInsertSizes, &size, actualSize);
f010e872:	83 ec 0c             	sub    $0xc,%esp
f010e875:	ff 75 f0             	pushl  -0x10(%ebp)
f010e878:	8d 45 c0             	lea    -0x40(%ebp),%eax
f010e87b:	50                   	push   %eax
f010e87c:	8d 45 c4             	lea    -0x3c(%ebp),%eax
f010e87f:	50                   	push   %eax
f010e880:	8d 45 d8             	lea    -0x28(%ebp),%eax
f010e883:	50                   	push   %eax
f010e884:	68 88 25 78 f0       	push   $0xf0782588
f010e889:	e8 b2 25 00 00       	call   f0110e40 <check_list_data>
f010e88e:	83 c4 20             	add    $0x20,%esp
f010e891:	89 45 ec             	mov    %eax,-0x14(%ebp)
	if(chk != 1) panic("insert_sorted: WRONG ALLOCATION .. AllocMemBlocksList content is not correct.");
f010e894:	83 7d ec 01          	cmpl   $0x1,-0x14(%ebp)
f010e898:	74 14                	je     f010e8ae <test_insert_sorted_allocList+0x1fe>
f010e89a:	83 ec 04             	sub    $0x4,%esp
f010e89d:	68 38 7f 13 f0       	push   $0xf0137f38
f010e8a2:	6a 75                	push   $0x75
f010e8a4:	68 14 7d 13 f0       	push   $0xf0137d14
f010e8a9:	e8 57 19 ff ff       	call   f0100205 <_panic>
	if(size != actualSize) panic("insert_sorted: WRONG ALLOCATION .. AllocMemBlocksList size is not correct.");
f010e8ae:	8b 45 c0             	mov    -0x40(%ebp),%eax
f010e8b1:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f010e8b4:	74 14                	je     f010e8ca <test_insert_sorted_allocList+0x21a>
f010e8b6:	83 ec 04             	sub    $0x4,%esp
f010e8b9:	68 88 7f 13 f0       	push   $0xf0137f88
f010e8be:	6a 76                	push   $0x76
f010e8c0:	68 14 7d 13 f0       	push   $0xf0137d14
f010e8c5:	e8 3b 19 ff ff       	call   f0100205 <_panic>

	//====================================================================//
	/*INSERT Scenario 3: Insert BLOCK_3 in the AllocMemBlocksList with sva smaller than BLOCK_2*/
	//BLOCK_3 sva = 16K
	blocksToInsertSVAs[2] = (16*kilo);
f010e8ca:	c7 45 e0 00 40 00 00 	movl   $0x4000,-0x20(%ebp)
	blocksToInsertSizes[2] = (8*kilo);
f010e8d1:	c7 45 cc 00 20 00 00 	movl   $0x2000,-0x34(%ebp)
	struct MemBlock blockToInsert3;
	blockToInsert3.sva = blocksToInsertSVAs[2];
f010e8d8:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010e8db:	89 45 98             	mov    %eax,-0x68(%ebp)
	blockToInsert3.size = blocksToInsertSizes[2];
f010e8de:	8b 45 cc             	mov    -0x34(%ebp),%eax
f010e8e1:	89 45 9c             	mov    %eax,-0x64(%ebp)

	insert_sorted_allocList(&blockToInsert3);
f010e8e4:	83 ec 0c             	sub    $0xc,%esp
f010e8e7:	8d 45 90             	lea    -0x70(%ebp),%eax
f010e8ea:	50                   	push   %eax
f010e8eb:	e8 a1 35 02 00       	call   f0131e91 <insert_sorted_allocList>
f010e8f0:	83 c4 10             	add    $0x10,%esp

	//Check 1: Check size of the AllocMemBlocksList
	actualSize = 3;
f010e8f3:	c7 45 f0 03 00 00 00 	movl   $0x3,-0x10(%ebp)
	if (LIST_SIZE(&(AllocMemBlocksList)) != actualSize) panic("insert_sorted: WRONG ALLOCATION - wrong size for the AllocMemBlocksList.");
f010e8fa:	a1 94 25 78 f0       	mov    0xf0782594,%eax
f010e8ff:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f010e902:	74 17                	je     f010e91b <test_insert_sorted_allocList+0x26b>
f010e904:	83 ec 04             	sub    $0x4,%esp
f010e907:	68 9c 7e 13 f0       	push   $0xf0137e9c
f010e90c:	68 85 00 00 00       	push   $0x85
f010e911:	68 14 7d 13 f0       	push   $0xf0137d14
f010e916:	e8 ea 18 ff ff       	call   f0100205 <_panic>

	//Check 2: Check size of the AvailableMemBlocksList
	if (LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks) panic("insert_sorted: WRONG ALLOCATION - wrong size for the AvailableMemBlocksList\n");
f010e91b:	a1 64 26 78 f0       	mov    0xf0782664,%eax
f010e920:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f010e923:	74 17                	je     f010e93c <test_insert_sorted_allocList+0x28c>
f010e925:	83 ec 04             	sub    $0x4,%esp
f010e928:	68 d4 7f 13 f0       	push   $0xf0137fd4
f010e92d:	68 88 00 00 00       	push   $0x88
f010e932:	68 14 7d 13 f0       	push   $0xf0137d14
f010e937:	e8 c9 18 ff ff       	call   f0100205 <_panic>

	//Check 3: Check the allocated list content
	size = 0;
f010e93c:	c7 45 c0 00 00 00 00 	movl   $0x0,-0x40(%ebp)
	chk = check_list_data(&AllocMemBlocksList, blocksToInsertSVAs, blocksToInsertSizes, &size, actualSize);
f010e943:	83 ec 0c             	sub    $0xc,%esp
f010e946:	ff 75 f0             	pushl  -0x10(%ebp)
f010e949:	8d 45 c0             	lea    -0x40(%ebp),%eax
f010e94c:	50                   	push   %eax
f010e94d:	8d 45 c4             	lea    -0x3c(%ebp),%eax
f010e950:	50                   	push   %eax
f010e951:	8d 45 d8             	lea    -0x28(%ebp),%eax
f010e954:	50                   	push   %eax
f010e955:	68 88 25 78 f0       	push   $0xf0782588
f010e95a:	e8 e1 24 00 00       	call   f0110e40 <check_list_data>
f010e95f:	83 c4 20             	add    $0x20,%esp
f010e962:	89 45 ec             	mov    %eax,-0x14(%ebp)
	if(chk != 1) panic("insert_sorted: WRONG ALLOCATION .. AllocMemBlocksList content is not correct.");
f010e965:	83 7d ec 01          	cmpl   $0x1,-0x14(%ebp)
f010e969:	74 17                	je     f010e982 <test_insert_sorted_allocList+0x2d2>
f010e96b:	83 ec 04             	sub    $0x4,%esp
f010e96e:	68 38 7f 13 f0       	push   $0xf0137f38
f010e973:	68 8d 00 00 00       	push   $0x8d
f010e978:	68 14 7d 13 f0       	push   $0xf0137d14
f010e97d:	e8 83 18 ff ff       	call   f0100205 <_panic>
	if(size != actualSize) panic("insert_sorted: WRONG ALLOCATION .. AllocMemBlocksList size is not correct.");
f010e982:	8b 45 c0             	mov    -0x40(%ebp),%eax
f010e985:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f010e988:	74 17                	je     f010e9a1 <test_insert_sorted_allocList+0x2f1>
f010e98a:	83 ec 04             	sub    $0x4,%esp
f010e98d:	68 88 7f 13 f0       	push   $0xf0137f88
f010e992:	68 8e 00 00 00       	push   $0x8e
f010e997:	68 14 7d 13 f0       	push   $0xf0137d14
f010e99c:	e8 64 18 ff ff       	call   f0100205 <_panic>

	//====================================================================//
	//INSERT Scenario 4: Insert BLOCK_4 in the AllocMemBlocksList with sva smaller than ALL (SHALL BE INSERTED AS HEAD)
	//BLOCK_4 sva = 0x0
	blocksToInsertSVAs[0] = (0x0);
f010e9a1:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
	blocksToInsertSizes[0] = (8*kilo);
f010e9a8:	c7 45 c4 00 20 00 00 	movl   $0x2000,-0x3c(%ebp)
	struct MemBlock blockToInsert4;
	blockToInsert4.sva = blocksToInsertSVAs[0];
f010e9af:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010e9b2:	89 45 88             	mov    %eax,-0x78(%ebp)
	blockToInsert4.size = blocksToInsertSizes[0];
f010e9b5:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f010e9b8:	89 45 8c             	mov    %eax,-0x74(%ebp)
	insert_sorted_allocList(&blockToInsert4);
f010e9bb:	83 ec 0c             	sub    $0xc,%esp
f010e9be:	8d 45 80             	lea    -0x80(%ebp),%eax
f010e9c1:	50                   	push   %eax
f010e9c2:	e8 ca 34 02 00       	call   f0131e91 <insert_sorted_allocList>
f010e9c7:	83 c4 10             	add    $0x10,%esp

	//Check 1: Check size of the AllocMemBlocksList
	actualSize = 4;
f010e9ca:	c7 45 f0 04 00 00 00 	movl   $0x4,-0x10(%ebp)
	if (LIST_SIZE(&(AllocMemBlocksList)) != actualSize) panic("insert_sorted: WRONG ALLOCATION - wrong size for the AllocMemBlocksList.");
f010e9d1:	a1 94 25 78 f0       	mov    0xf0782594,%eax
f010e9d6:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f010e9d9:	74 17                	je     f010e9f2 <test_insert_sorted_allocList+0x342>
f010e9db:	83 ec 04             	sub    $0x4,%esp
f010e9de:	68 9c 7e 13 f0       	push   $0xf0137e9c
f010e9e3:	68 9c 00 00 00       	push   $0x9c
f010e9e8:	68 14 7d 13 f0       	push   $0xf0137d14
f010e9ed:	e8 13 18 ff ff       	call   f0100205 <_panic>

	//Check 2: Check size of the AvailableMemBlocksList
	if (LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks) panic("insert_sorted: WRONG ALLOCATION - wrong size for the AvailableMemBlocksList.");
f010e9f2:	a1 64 26 78 f0       	mov    0xf0782664,%eax
f010e9f7:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f010e9fa:	74 17                	je     f010ea13 <test_insert_sorted_allocList+0x363>
f010e9fc:	83 ec 04             	sub    $0x4,%esp
f010e9ff:	68 e8 7e 13 f0       	push   $0xf0137ee8
f010ea04:	68 9f 00 00 00       	push   $0x9f
f010ea09:	68 14 7d 13 f0       	push   $0xf0137d14
f010ea0e:	e8 f2 17 ff ff       	call   f0100205 <_panic>

	//Check 3: Check the allocated list content
	size = 0;
f010ea13:	c7 45 c0 00 00 00 00 	movl   $0x0,-0x40(%ebp)
	chk = check_list_data(&AllocMemBlocksList, blocksToInsertSVAs, blocksToInsertSizes, &size, actualSize);
f010ea1a:	83 ec 0c             	sub    $0xc,%esp
f010ea1d:	ff 75 f0             	pushl  -0x10(%ebp)
f010ea20:	8d 45 c0             	lea    -0x40(%ebp),%eax
f010ea23:	50                   	push   %eax
f010ea24:	8d 45 c4             	lea    -0x3c(%ebp),%eax
f010ea27:	50                   	push   %eax
f010ea28:	8d 45 d8             	lea    -0x28(%ebp),%eax
f010ea2b:	50                   	push   %eax
f010ea2c:	68 88 25 78 f0       	push   $0xf0782588
f010ea31:	e8 0a 24 00 00       	call   f0110e40 <check_list_data>
f010ea36:	83 c4 20             	add    $0x20,%esp
f010ea39:	89 45 ec             	mov    %eax,-0x14(%ebp)
	if(chk != 1) panic("insert_sorted: WRONG ALLOCATION .. AllocMemBlocksList content is not correct.");
f010ea3c:	83 7d ec 01          	cmpl   $0x1,-0x14(%ebp)
f010ea40:	74 17                	je     f010ea59 <test_insert_sorted_allocList+0x3a9>
f010ea42:	83 ec 04             	sub    $0x4,%esp
f010ea45:	68 38 7f 13 f0       	push   $0xf0137f38
f010ea4a:	68 a4 00 00 00       	push   $0xa4
f010ea4f:	68 14 7d 13 f0       	push   $0xf0137d14
f010ea54:	e8 ac 17 ff ff       	call   f0100205 <_panic>
	if(size != actualSize) panic("insert_sorted: WRONG ALLOCATION .. AllocMemBlocksList size is not correct.");
f010ea59:	8b 45 c0             	mov    -0x40(%ebp),%eax
f010ea5c:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f010ea5f:	74 17                	je     f010ea78 <test_insert_sorted_allocList+0x3c8>
f010ea61:	83 ec 04             	sub    $0x4,%esp
f010ea64:	68 88 7f 13 f0       	push   $0xf0137f88
f010ea69:	68 a5 00 00 00       	push   $0xa5
f010ea6e:	68 14 7d 13 f0       	push   $0xf0137d14
f010ea73:	e8 8d 17 ff ff       	call   f0100205 <_panic>

	//====================================================================//
	//INSERT Scenario 5: Insert BLOCK_5 in the AllocMemBlocksList with sva not greater than the first block only
	//BLOCK_5 sva = 24K
	blocksToInsertSVAs[3] = 24*kilo;
f010ea78:	c7 45 e4 00 60 00 00 	movl   $0x6000,-0x1c(%ebp)
	blocksToInsertSizes[3] = (4*kilo);
f010ea7f:	c7 45 d0 00 10 00 00 	movl   $0x1000,-0x30(%ebp)
	struct MemBlock blockToInsert5;
	blockToInsert5.sva = blocksToInsertSVAs[3];
f010ea86:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010ea89:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)
	blockToInsert5.size = blocksToInsertSizes[3];
f010ea8f:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010ea92:	89 85 7c ff ff ff    	mov    %eax,-0x84(%ebp)
	insert_sorted_allocList(&blockToInsert5);
f010ea98:	83 ec 0c             	sub    $0xc,%esp
f010ea9b:	8d 85 70 ff ff ff    	lea    -0x90(%ebp),%eax
f010eaa1:	50                   	push   %eax
f010eaa2:	e8 ea 33 02 00       	call   f0131e91 <insert_sorted_allocList>
f010eaa7:	83 c4 10             	add    $0x10,%esp

	//Check 1: Check size of the AllocMemBlocksList
	actualSize = 5;
f010eaaa:	c7 45 f0 05 00 00 00 	movl   $0x5,-0x10(%ebp)
	if (LIST_SIZE(&(AllocMemBlocksList)) != actualSize) panic("insert_sorted: WRONG ALLOCATION - wrong size for the AllocMemBlocksList.");
f010eab1:	a1 94 25 78 f0       	mov    0xf0782594,%eax
f010eab6:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f010eab9:	74 17                	je     f010ead2 <test_insert_sorted_allocList+0x422>
f010eabb:	83 ec 04             	sub    $0x4,%esp
f010eabe:	68 9c 7e 13 f0       	push   $0xf0137e9c
f010eac3:	68 b3 00 00 00       	push   $0xb3
f010eac8:	68 14 7d 13 f0       	push   $0xf0137d14
f010eacd:	e8 33 17 ff ff       	call   f0100205 <_panic>

	//Check 2: Check size of the AvailableMemBlocksList
	if (LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks) panic("insert_sorted: WRONG ALLOCATION - wrong size for the AvailableMemBlocksList.");
f010ead2:	a1 64 26 78 f0       	mov    0xf0782664,%eax
f010ead7:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f010eada:	74 17                	je     f010eaf3 <test_insert_sorted_allocList+0x443>
f010eadc:	83 ec 04             	sub    $0x4,%esp
f010eadf:	68 e8 7e 13 f0       	push   $0xf0137ee8
f010eae4:	68 b6 00 00 00       	push   $0xb6
f010eae9:	68 14 7d 13 f0       	push   $0xf0137d14
f010eaee:	e8 12 17 ff ff       	call   f0100205 <_panic>

	//Check 3: Check the allocated list content
	size = 0;
f010eaf3:	c7 45 c0 00 00 00 00 	movl   $0x0,-0x40(%ebp)
	chk = check_list_data(&AllocMemBlocksList, blocksToInsertSVAs, blocksToInsertSizes, &size, actualSize);
f010eafa:	83 ec 0c             	sub    $0xc,%esp
f010eafd:	ff 75 f0             	pushl  -0x10(%ebp)
f010eb00:	8d 45 c0             	lea    -0x40(%ebp),%eax
f010eb03:	50                   	push   %eax
f010eb04:	8d 45 c4             	lea    -0x3c(%ebp),%eax
f010eb07:	50                   	push   %eax
f010eb08:	8d 45 d8             	lea    -0x28(%ebp),%eax
f010eb0b:	50                   	push   %eax
f010eb0c:	68 88 25 78 f0       	push   $0xf0782588
f010eb11:	e8 2a 23 00 00       	call   f0110e40 <check_list_data>
f010eb16:	83 c4 20             	add    $0x20,%esp
f010eb19:	89 45 ec             	mov    %eax,-0x14(%ebp)
	if(chk != 1) panic("insert_sorted: WRONG ALLOCATION .. AllocMemBlocksList content is not correct.");
f010eb1c:	83 7d ec 01          	cmpl   $0x1,-0x14(%ebp)
f010eb20:	74 17                	je     f010eb39 <test_insert_sorted_allocList+0x489>
f010eb22:	83 ec 04             	sub    $0x4,%esp
f010eb25:	68 38 7f 13 f0       	push   $0xf0137f38
f010eb2a:	68 bb 00 00 00       	push   $0xbb
f010eb2f:	68 14 7d 13 f0       	push   $0xf0137d14
f010eb34:	e8 cc 16 ff ff       	call   f0100205 <_panic>
	if(size != actualSize) panic("insert_sorted: WRONG ALLOCATION .. AllocMemBlocksList size is not correct.");
f010eb39:	8b 45 c0             	mov    -0x40(%ebp),%eax
f010eb3c:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f010eb3f:	74 17                	je     f010eb58 <test_insert_sorted_allocList+0x4a8>
f010eb41:	83 ec 04             	sub    $0x4,%esp
f010eb44:	68 88 7f 13 f0       	push   $0xf0137f88
f010eb49:	68 bc 00 00 00       	push   $0xbc
f010eb4e:	68 14 7d 13 f0       	push   $0xf0137d14
f010eb53:	e8 ad 16 ff ff       	call   f0100205 <_panic>
	//====================================================================//
	//====================================================================//
	//show_list_content(&AllocMemBlocksList);

	cprintf("Congratulations!! test insert_sorted completed successfully.\n");
f010eb58:	83 ec 0c             	sub    $0xc,%esp
f010eb5b:	68 24 80 13 f0       	push   $0xf0138024
f010eb60:	e8 a9 21 ff ff       	call   f0100d0e <cprintf>
f010eb65:	83 c4 10             	add    $0x10,%esp
}
f010eb68:	90                   	nop
f010eb69:	8b 7d fc             	mov    -0x4(%ebp),%edi
f010eb6c:	c9                   	leave  
f010eb6d:	c3                   	ret    

f010eb6e <test_find_block>:

void test_find_block()
{
f010eb6e:	55                   	push   %ebp
f010eb6f:	89 e5                	mov    %esp,%ebp
f010eb71:	57                   	push   %edi
f010eb72:	56                   	push   %esi
f010eb73:	53                   	push   %ebx
f010eb74:	81 ec ac 00 00 00    	sub    $0xac,%esp
	uint32 numOfBlocks = 6;
f010eb7a:	c7 45 e0 06 00 00 00 	movl   $0x6,-0x20(%ebp)
	initialize_MemBlocksList(numOfBlocks);
f010eb81:	83 ec 0c             	sub    $0xc,%esp
f010eb84:	ff 75 e0             	pushl  -0x20(%ebp)
f010eb87:	e8 d0 31 02 00       	call   f0131d5c <initialize_MemBlocksList>
f010eb8c:	83 c4 10             	add    $0x10,%esp
	LIST_INIT(&FreeMemBlocksList);
f010eb8f:	c7 05 24 26 78 f0 00 	movl   $0x0,0xf0782624
f010eb96:	00 00 00 
f010eb99:	c7 05 28 26 78 f0 00 	movl   $0x0,0xf0782628
f010eba0:	00 00 00 
f010eba3:	c7 05 30 26 78 f0 00 	movl   $0x0,0xf0782630
f010ebaa:	00 00 00 

	//Fill AllocMemBlocksList with multiple blocks
	#define numOfAllocBlocks  6
	uint32 BlocksSVAs[numOfAllocBlocks] = {0x0, 0x2000, 0x4000, 0x7000, 0x19000, 0x1A400}; //0KB, 8KB, 16KB, 28KB, 100KB, 105KB
f010ebad:	8d 45 c4             	lea    -0x3c(%ebp),%eax
f010ebb0:	bb 9c 81 13 f0       	mov    $0xf013819c,%ebx
f010ebb5:	ba 06 00 00 00       	mov    $0x6,%edx
f010ebba:	89 c7                	mov    %eax,%edi
f010ebbc:	89 de                	mov    %ebx,%esi
f010ebbe:	89 d1                	mov    %edx,%ecx
f010ebc0:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
	uint32 BlocksSizes[numOfAllocBlocks] = {3*kilo, 8*kilo, 1*kilo, 9*kilo, 4*kilo, 2*Mega} ;
f010ebc2:	8d 45 ac             	lea    -0x54(%ebp),%eax
f010ebc5:	bb b4 81 13 f0       	mov    $0xf01381b4,%ebx
f010ebca:	ba 06 00 00 00       	mov    $0x6,%edx
f010ebcf:	89 c7                	mov    %eax,%edi
f010ebd1:	89 de                	mov    %ebx,%esi
f010ebd3:	89 d1                	mov    %edx,%ecx
f010ebd5:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)

	LIST_INIT(&AllocMemBlocksList);
f010ebd7:	c7 05 88 25 78 f0 00 	movl   $0x0,0xf0782588
f010ebde:	00 00 00 
f010ebe1:	c7 05 8c 25 78 f0 00 	movl   $0x0,0xf078258c
f010ebe8:	00 00 00 
f010ebeb:	c7 05 94 25 78 f0 00 	movl   $0x0,0xf0782594
f010ebf2:	00 00 00 
	struct MemBlock blockToInsert[numOfAllocBlocks];
	for (int i = 0; i < numOfAllocBlocks; ++i)
f010ebf5:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
f010ebfc:	e9 5f 01 00 00       	jmp    f010ed60 <test_find_block+0x1f2>
	{
		blockToInsert[i].sva = BlocksSVAs[i];
f010ec01:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010ec04:	8b 44 85 c4          	mov    -0x3c(%ebp,%eax,4),%eax
f010ec08:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010ec0b:	c1 e2 04             	shl    $0x4,%edx
f010ec0e:	8d 5d e8             	lea    -0x18(%ebp),%ebx
f010ec11:	01 da                	add    %ebx,%edx
f010ec13:	81 ea 94 00 00 00    	sub    $0x94,%edx
f010ec19:	89 02                	mov    %eax,(%edx)
		blockToInsert[i].size = BlocksSizes[i];
f010ec1b:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010ec1e:	8b 44 85 ac          	mov    -0x54(%ebp,%eax,4),%eax
f010ec22:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010ec25:	c1 e2 04             	shl    $0x4,%edx
f010ec28:	8d 75 e8             	lea    -0x18(%ebp),%esi
f010ec2b:	01 f2                	add    %esi,%edx
f010ec2d:	81 ea 90 00 00 00    	sub    $0x90,%edx
f010ec33:	89 02                	mov    %eax,(%edx)
		if (i == 0)
f010ec35:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f010ec39:	0f 85 92 00 00 00    	jne    f010ecd1 <test_find_block+0x163>
			LIST_INSERT_HEAD(&AllocMemBlocksList, &(blockToInsert[i]));
f010ec3f:	a1 88 25 78 f0       	mov    0xf0782588,%eax
f010ec44:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010ec47:	c1 e2 04             	shl    $0x4,%edx
f010ec4a:	8d 7d e8             	lea    -0x18(%ebp),%edi
f010ec4d:	01 fa                	add    %edi,%edx
f010ec4f:	81 ea 9c 00 00 00    	sub    $0x9c,%edx
f010ec55:	89 02                	mov    %eax,(%edx)
f010ec57:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010ec5a:	c1 e0 04             	shl    $0x4,%eax
f010ec5d:	8d 5d e8             	lea    -0x18(%ebp),%ebx
f010ec60:	01 d8                	add    %ebx,%eax
f010ec62:	2d 9c 00 00 00       	sub    $0x9c,%eax
f010ec67:	8b 00                	mov    (%eax),%eax
f010ec69:	85 c0                	test   %eax,%eax
f010ec6b:	74 18                	je     f010ec85 <test_find_block+0x117>
f010ec6d:	a1 88 25 78 f0       	mov    0xf0782588,%eax
f010ec72:	8d 95 4c ff ff ff    	lea    -0xb4(%ebp),%edx
f010ec78:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
f010ec7b:	c1 e1 04             	shl    $0x4,%ecx
f010ec7e:	01 ca                	add    %ecx,%edx
f010ec80:	89 50 04             	mov    %edx,0x4(%eax)
f010ec83:	eb 13                	jmp    f010ec98 <test_find_block+0x12a>
f010ec85:	8d 85 4c ff ff ff    	lea    -0xb4(%ebp),%eax
f010ec8b:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010ec8e:	c1 e2 04             	shl    $0x4,%edx
f010ec91:	01 d0                	add    %edx,%eax
f010ec93:	a3 8c 25 78 f0       	mov    %eax,0xf078258c
f010ec98:	8d 85 4c ff ff ff    	lea    -0xb4(%ebp),%eax
f010ec9e:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010eca1:	c1 e2 04             	shl    $0x4,%edx
f010eca4:	01 d0                	add    %edx,%eax
f010eca6:	a3 88 25 78 f0       	mov    %eax,0xf0782588
f010ecab:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010ecae:	c1 e0 04             	shl    $0x4,%eax
f010ecb1:	8d 75 e8             	lea    -0x18(%ebp),%esi
f010ecb4:	01 f0                	add    %esi,%eax
f010ecb6:	2d 98 00 00 00       	sub    $0x98,%eax
f010ecbb:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f010ecc1:	a1 94 25 78 f0       	mov    0xf0782594,%eax
f010ecc6:	40                   	inc    %eax
f010ecc7:	a3 94 25 78 f0       	mov    %eax,0xf0782594
f010eccc:	e9 8c 00 00 00       	jmp    f010ed5d <test_find_block+0x1ef>
		else
			LIST_INSERT_TAIL(&AllocMemBlocksList, &(blockToInsert[i]));
f010ecd1:	a1 8c 25 78 f0       	mov    0xf078258c,%eax
f010ecd6:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010ecd9:	c1 e2 04             	shl    $0x4,%edx
f010ecdc:	8d 7d e8             	lea    -0x18(%ebp),%edi
f010ecdf:	01 fa                	add    %edi,%edx
f010ece1:	81 ea 98 00 00 00    	sub    $0x98,%edx
f010ece7:	89 02                	mov    %eax,(%edx)
f010ece9:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010ecec:	c1 e0 04             	shl    $0x4,%eax
f010ecef:	8d 5d e8             	lea    -0x18(%ebp),%ebx
f010ecf2:	01 d8                	add    %ebx,%eax
f010ecf4:	2d 98 00 00 00       	sub    $0x98,%eax
f010ecf9:	8b 00                	mov    (%eax),%eax
f010ecfb:	85 c0                	test   %eax,%eax
f010ecfd:	74 17                	je     f010ed16 <test_find_block+0x1a8>
f010ecff:	a1 8c 25 78 f0       	mov    0xf078258c,%eax
f010ed04:	8d 95 4c ff ff ff    	lea    -0xb4(%ebp),%edx
f010ed0a:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
f010ed0d:	c1 e1 04             	shl    $0x4,%ecx
f010ed10:	01 ca                	add    %ecx,%edx
f010ed12:	89 10                	mov    %edx,(%eax)
f010ed14:	eb 13                	jmp    f010ed29 <test_find_block+0x1bb>
f010ed16:	8d 85 4c ff ff ff    	lea    -0xb4(%ebp),%eax
f010ed1c:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010ed1f:	c1 e2 04             	shl    $0x4,%edx
f010ed22:	01 d0                	add    %edx,%eax
f010ed24:	a3 88 25 78 f0       	mov    %eax,0xf0782588
f010ed29:	8d 85 4c ff ff ff    	lea    -0xb4(%ebp),%eax
f010ed2f:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010ed32:	c1 e2 04             	shl    $0x4,%edx
f010ed35:	01 d0                	add    %edx,%eax
f010ed37:	a3 8c 25 78 f0       	mov    %eax,0xf078258c
f010ed3c:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010ed3f:	c1 e0 04             	shl    $0x4,%eax
f010ed42:	8d 75 e8             	lea    -0x18(%ebp),%esi
f010ed45:	01 f0                	add    %esi,%eax
f010ed47:	2d 9c 00 00 00       	sub    $0x9c,%eax
f010ed4c:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f010ed52:	a1 94 25 78 f0       	mov    0xf0782594,%eax
f010ed57:	40                   	inc    %eax
f010ed58:	a3 94 25 78 f0       	mov    %eax,0xf0782594
	uint32 BlocksSVAs[numOfAllocBlocks] = {0x0, 0x2000, 0x4000, 0x7000, 0x19000, 0x1A400}; //0KB, 8KB, 16KB, 28KB, 100KB, 105KB
	uint32 BlocksSizes[numOfAllocBlocks] = {3*kilo, 8*kilo, 1*kilo, 9*kilo, 4*kilo, 2*Mega} ;

	LIST_INIT(&AllocMemBlocksList);
	struct MemBlock blockToInsert[numOfAllocBlocks];
	for (int i = 0; i < numOfAllocBlocks; ++i)
f010ed5d:	ff 45 e4             	incl   -0x1c(%ebp)
f010ed60:	83 7d e4 05          	cmpl   $0x5,-0x1c(%ebp)
f010ed64:	0f 8e 97 fe ff ff    	jle    f010ec01 <test_find_block+0x93>
		else
			LIST_INSERT_TAIL(&AllocMemBlocksList, &(blockToInsert[i]));
	}

	/*FIND Scenario 1: Search for a block that doesn't exist (Block with SVA = 4KB)*/
	struct MemBlock * blockToFind = find_block(&AllocMemBlocksList, 0x1000);
f010ed6a:	83 ec 08             	sub    $0x8,%esp
f010ed6d:	68 00 10 00 00       	push   $0x1000
f010ed72:	68 88 25 78 f0       	push   $0xf0782588
f010ed77:	e8 bd 30 02 00       	call   f0131e39 <find_block>
f010ed7c:	83 c4 10             	add    $0x10,%esp
f010ed7f:	89 45 dc             	mov    %eax,-0x24(%ebp)
	if(blockToFind != NULL)
f010ed82:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f010ed86:	74 17                	je     f010ed9f <test_find_block+0x231>
		panic("find_block: WRONG SEARCH - The block you searched for doesn't exist, however find_block find it.");
f010ed88:	83 ec 04             	sub    $0x4,%esp
f010ed8b:	68 64 80 13 f0       	push   $0xf0138064
f010ed90:	68 de 00 00 00       	push   $0xde
f010ed95:	68 14 7d 13 f0       	push   $0xf0137d14
f010ed9a:	e8 66 14 ff ff       	call   f0100205 <_panic>

	/*FIND Scenario 2: Search for a block exist @ the beginning (Block with SVA = 0KB)*/
	blockToFind = find_block(&AllocMemBlocksList, 0x0);
f010ed9f:	83 ec 08             	sub    $0x8,%esp
f010eda2:	6a 00                	push   $0x0
f010eda4:	68 88 25 78 f0       	push   $0xf0782588
f010eda9:	e8 8b 30 02 00       	call   f0131e39 <find_block>
f010edae:	83 c4 10             	add    $0x10,%esp
f010edb1:	89 45 dc             	mov    %eax,-0x24(%ebp)
	if(blockToFind == NULL || blockToFind->size != 3*kilo || blockToFind->sva != 0x0)
f010edb4:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f010edb8:	74 17                	je     f010edd1 <test_find_block+0x263>
f010edba:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010edbd:	8b 40 0c             	mov    0xc(%eax),%eax
f010edc0:	3d 00 0c 00 00       	cmp    $0xc00,%eax
f010edc5:	75 0a                	jne    f010edd1 <test_find_block+0x263>
f010edc7:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010edca:	8b 40 08             	mov    0x8(%eax),%eax
f010edcd:	85 c0                	test   %eax,%eax
f010edcf:	74 17                	je     f010ede8 <test_find_block+0x27a>
		panic("find_block: WRONG SEARCH - You find wrong block.");
f010edd1:	83 ec 04             	sub    $0x4,%esp
f010edd4:	68 c8 80 13 f0       	push   $0xf01380c8
f010edd9:	68 e3 00 00 00       	push   $0xe3
f010edde:	68 14 7d 13 f0       	push   $0xf0137d14
f010ede3:	e8 1d 14 ff ff       	call   f0100205 <_panic>

	/*FIND Scenario 3: Search for a block exist @ the mid (Block with SVA = 0x7000)*/
	blockToFind = find_block(&AllocMemBlocksList, 0x7000);
f010ede8:	83 ec 08             	sub    $0x8,%esp
f010edeb:	68 00 70 00 00       	push   $0x7000
f010edf0:	68 88 25 78 f0       	push   $0xf0782588
f010edf5:	e8 3f 30 02 00       	call   f0131e39 <find_block>
f010edfa:	83 c4 10             	add    $0x10,%esp
f010edfd:	89 45 dc             	mov    %eax,-0x24(%ebp)
	if(blockToFind == NULL || blockToFind->size != 9*kilo || blockToFind->sva != 0x7000)
f010ee00:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f010ee04:	74 1a                	je     f010ee20 <test_find_block+0x2b2>
f010ee06:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010ee09:	8b 40 0c             	mov    0xc(%eax),%eax
f010ee0c:	3d 00 24 00 00       	cmp    $0x2400,%eax
f010ee11:	75 0d                	jne    f010ee20 <test_find_block+0x2b2>
f010ee13:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010ee16:	8b 40 08             	mov    0x8(%eax),%eax
f010ee19:	3d 00 70 00 00       	cmp    $0x7000,%eax
f010ee1e:	74 17                	je     f010ee37 <test_find_block+0x2c9>
		panic("find_block: WRONG SEARCH - You find wrong block.");
f010ee20:	83 ec 04             	sub    $0x4,%esp
f010ee23:	68 c8 80 13 f0       	push   $0xf01380c8
f010ee28:	68 e8 00 00 00       	push   $0xe8
f010ee2d:	68 14 7d 13 f0       	push   $0xf0137d14
f010ee32:	e8 ce 13 ff ff       	call   f0100205 <_panic>

	/*FIND Scenario 4: Search for a block exist @ the end (Block with SVA = 0x7000)*/
	blockToFind = find_block(&AllocMemBlocksList, 0x1A400);
f010ee37:	83 ec 08             	sub    $0x8,%esp
f010ee3a:	68 00 a4 01 00       	push   $0x1a400
f010ee3f:	68 88 25 78 f0       	push   $0xf0782588
f010ee44:	e8 f0 2f 02 00       	call   f0131e39 <find_block>
f010ee49:	83 c4 10             	add    $0x10,%esp
f010ee4c:	89 45 dc             	mov    %eax,-0x24(%ebp)
	if(blockToFind == NULL || blockToFind->size != 2*Mega || blockToFind->sva != 0x1A400)
f010ee4f:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f010ee53:	74 1a                	je     f010ee6f <test_find_block+0x301>
f010ee55:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010ee58:	8b 40 0c             	mov    0xc(%eax),%eax
f010ee5b:	3d 00 00 20 00       	cmp    $0x200000,%eax
f010ee60:	75 0d                	jne    f010ee6f <test_find_block+0x301>
f010ee62:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010ee65:	8b 40 08             	mov    0x8(%eax),%eax
f010ee68:	3d 00 a4 01 00       	cmp    $0x1a400,%eax
f010ee6d:	74 17                	je     f010ee86 <test_find_block+0x318>
		panic("find_block: WRONG SEARCH - You find wrong block.");
f010ee6f:	83 ec 04             	sub    $0x4,%esp
f010ee72:	68 c8 80 13 f0       	push   $0xf01380c8
f010ee77:	68 ed 00 00 00       	push   $0xed
f010ee7c:	68 14 7d 13 f0       	push   $0xf0137d14
f010ee81:	e8 7f 13 ff ff       	call   f0100205 <_panic>

	//Check size of AvailableMemBlocksList & FreeMemBlocksList
	if (LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks || LIST_SIZE(&(FreeMemBlocksList)) != 0 )
f010ee86:	a1 64 26 78 f0       	mov    0xf0782664,%eax
f010ee8b:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f010ee8e:	75 09                	jne    f010ee99 <test_find_block+0x32b>
f010ee90:	a1 30 26 78 f0       	mov    0xf0782630,%eax
f010ee95:	85 c0                	test   %eax,%eax
f010ee97:	74 17                	je     f010eeb0 <test_find_block+0x342>
	{
		panic("find_block: AvailableMemBlocksList and FreeMemBlocksList are affected and this shall not occurred.");
f010ee99:	83 ec 04             	sub    $0x4,%esp
f010ee9c:	68 fc 80 13 f0       	push   $0xf01380fc
f010eea1:	68 f2 00 00 00       	push   $0xf2
f010eea6:	68 14 7d 13 f0       	push   $0xf0137d14
f010eeab:	e8 55 13 ff ff       	call   f0100205 <_panic>
	}

	//show_list_content(&AllocMemBlocksList);
	cprintf("Congratulations!! test find_block completed successfully.\n");
f010eeb0:	83 ec 0c             	sub    $0xc,%esp
f010eeb3:	68 60 81 13 f0       	push   $0xf0138160
f010eeb8:	e8 51 1e ff ff       	call   f0100d0e <cprintf>
f010eebd:	83 c4 10             	add    $0x10,%esp
}
f010eec0:	90                   	nop
f010eec1:	8d 65 f4             	lea    -0xc(%ebp),%esp
f010eec4:	5b                   	pop    %ebx
f010eec5:	5e                   	pop    %esi
f010eec6:	5f                   	pop    %edi
f010eec7:	5d                   	pop    %ebp
f010eec8:	c3                   	ret    

f010eec9 <test_alloc_block_FF>:

void test_alloc_block_FF()
{
f010eec9:	55                   	push   %ebp
f010eeca:	89 e5                	mov    %esp,%ebp
f010eecc:	57                   	push   %edi
f010eecd:	56                   	push   %esi
f010eece:	53                   	push   %ebx
f010eecf:	81 ec ec 00 00 00    	sub    $0xec,%esp
	uint32 numOfBlocks = 10;
f010eed5:	c7 45 e0 0a 00 00 00 	movl   $0xa,-0x20(%ebp)
	initialize_MemBlocksList(numOfBlocks);
f010eedc:	83 ec 0c             	sub    $0xc,%esp
f010eedf:	ff 75 e0             	pushl  -0x20(%ebp)
f010eee2:	e8 75 2e 02 00       	call   f0131d5c <initialize_MemBlocksList>
f010eee7:	83 c4 10             	add    $0x10,%esp
	LIST_INIT(&AllocMemBlocksList);
f010eeea:	c7 05 88 25 78 f0 00 	movl   $0x0,0xf0782588
f010eef1:	00 00 00 
f010eef4:	c7 05 8c 25 78 f0 00 	movl   $0x0,0xf078258c
f010eefb:	00 00 00 
f010eefe:	c7 05 94 25 78 f0 00 	movl   $0x0,0xf0782594
f010ef05:	00 00 00 

	//Fill AllocMemBlocksList with multiple blocks
	#define numOfFreeBlocks_FF  8
	uint32 BlocksSVAs[numOfFreeBlocks_FF] = {0x0, 0x2000, 0x4000, 0x7000, 0x19000, 0x1A400, 0x21B400, 0x31B400}; //0KB, 8KB, 16KB, 28KB, 100KB, 105KB, 2,157KB, 3,181KB
f010ef08:	8d 45 b4             	lea    -0x4c(%ebp),%eax
f010ef0b:	bb 40 84 13 f0       	mov    $0xf0138440,%ebx
f010ef10:	ba 08 00 00 00       	mov    $0x8,%edx
f010ef15:	89 c7                	mov    %eax,%edi
f010ef17:	89 de                	mov    %ebx,%esi
f010ef19:	89 d1                	mov    %edx,%ecx
f010ef1b:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
	uint32 BlocksSizes[numOfFreeBlocks_FF] = {3*kilo, 8*kilo, 1*kilo, 9*kilo, 4*kilo, 2*Mega, 1*Mega, 5*kilo} ;
f010ef1d:	8d 45 94             	lea    -0x6c(%ebp),%eax
f010ef20:	bb 60 84 13 f0       	mov    $0xf0138460,%ebx
f010ef25:	ba 08 00 00 00       	mov    $0x8,%edx
f010ef2a:	89 c7                	mov    %eax,%edi
f010ef2c:	89 de                	mov    %ebx,%esi
f010ef2e:	89 d1                	mov    %edx,%ecx
f010ef30:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)

	LIST_INIT(&FreeMemBlocksList);
f010ef32:	c7 05 24 26 78 f0 00 	movl   $0x0,0xf0782624
f010ef39:	00 00 00 
f010ef3c:	c7 05 28 26 78 f0 00 	movl   $0x0,0xf0782628
f010ef43:	00 00 00 
f010ef46:	c7 05 30 26 78 f0 00 	movl   $0x0,0xf0782630
f010ef4d:	00 00 00 
	struct MemBlock freeBlocks[numOfFreeBlocks_FF];
	for (int i = 0; i < numOfFreeBlocks_FF; ++i)
f010ef50:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
f010ef57:	e9 5f 01 00 00       	jmp    f010f0bb <test_alloc_block_FF+0x1f2>
	{
		freeBlocks[i].sva = BlocksSVAs[i];
f010ef5c:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010ef5f:	8b 44 85 b4          	mov    -0x4c(%ebp,%eax,4),%eax
f010ef63:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010ef66:	c1 e2 04             	shl    $0x4,%edx
f010ef69:	8d 5d e8             	lea    -0x18(%ebp),%ebx
f010ef6c:	01 da                	add    %ebx,%edx
f010ef6e:	81 ea cc 00 00 00    	sub    $0xcc,%edx
f010ef74:	89 02                	mov    %eax,(%edx)
		freeBlocks[i].size = BlocksSizes[i];
f010ef76:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010ef79:	8b 44 85 94          	mov    -0x6c(%ebp,%eax,4),%eax
f010ef7d:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010ef80:	c1 e2 04             	shl    $0x4,%edx
f010ef83:	8d 75 e8             	lea    -0x18(%ebp),%esi
f010ef86:	01 f2                	add    %esi,%edx
f010ef88:	81 ea c8 00 00 00    	sub    $0xc8,%edx
f010ef8e:	89 02                	mov    %eax,(%edx)
		if (i == 0)
f010ef90:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f010ef94:	0f 85 92 00 00 00    	jne    f010f02c <test_alloc_block_FF+0x163>
			LIST_INSERT_HEAD(&FreeMemBlocksList, &(freeBlocks[i]));
f010ef9a:	a1 24 26 78 f0       	mov    0xf0782624,%eax
f010ef9f:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010efa2:	c1 e2 04             	shl    $0x4,%edx
f010efa5:	8d 7d e8             	lea    -0x18(%ebp),%edi
f010efa8:	01 fa                	add    %edi,%edx
f010efaa:	81 ea d4 00 00 00    	sub    $0xd4,%edx
f010efb0:	89 02                	mov    %eax,(%edx)
f010efb2:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010efb5:	c1 e0 04             	shl    $0x4,%eax
f010efb8:	8d 5d e8             	lea    -0x18(%ebp),%ebx
f010efbb:	01 d8                	add    %ebx,%eax
f010efbd:	2d d4 00 00 00       	sub    $0xd4,%eax
f010efc2:	8b 00                	mov    (%eax),%eax
f010efc4:	85 c0                	test   %eax,%eax
f010efc6:	74 18                	je     f010efe0 <test_alloc_block_FF+0x117>
f010efc8:	a1 24 26 78 f0       	mov    0xf0782624,%eax
f010efcd:	8d 95 14 ff ff ff    	lea    -0xec(%ebp),%edx
f010efd3:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
f010efd6:	c1 e1 04             	shl    $0x4,%ecx
f010efd9:	01 ca                	add    %ecx,%edx
f010efdb:	89 50 04             	mov    %edx,0x4(%eax)
f010efde:	eb 13                	jmp    f010eff3 <test_alloc_block_FF+0x12a>
f010efe0:	8d 85 14 ff ff ff    	lea    -0xec(%ebp),%eax
f010efe6:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010efe9:	c1 e2 04             	shl    $0x4,%edx
f010efec:	01 d0                	add    %edx,%eax
f010efee:	a3 28 26 78 f0       	mov    %eax,0xf0782628
f010eff3:	8d 85 14 ff ff ff    	lea    -0xec(%ebp),%eax
f010eff9:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010effc:	c1 e2 04             	shl    $0x4,%edx
f010efff:	01 d0                	add    %edx,%eax
f010f001:	a3 24 26 78 f0       	mov    %eax,0xf0782624
f010f006:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010f009:	c1 e0 04             	shl    $0x4,%eax
f010f00c:	8d 75 e8             	lea    -0x18(%ebp),%esi
f010f00f:	01 f0                	add    %esi,%eax
f010f011:	2d d0 00 00 00       	sub    $0xd0,%eax
f010f016:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f010f01c:	a1 30 26 78 f0       	mov    0xf0782630,%eax
f010f021:	40                   	inc    %eax
f010f022:	a3 30 26 78 f0       	mov    %eax,0xf0782630
f010f027:	e9 8c 00 00 00       	jmp    f010f0b8 <test_alloc_block_FF+0x1ef>
		else
			LIST_INSERT_TAIL(&FreeMemBlocksList, &(freeBlocks[i]));
f010f02c:	a1 28 26 78 f0       	mov    0xf0782628,%eax
f010f031:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010f034:	c1 e2 04             	shl    $0x4,%edx
f010f037:	8d 7d e8             	lea    -0x18(%ebp),%edi
f010f03a:	01 fa                	add    %edi,%edx
f010f03c:	81 ea d0 00 00 00    	sub    $0xd0,%edx
f010f042:	89 02                	mov    %eax,(%edx)
f010f044:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010f047:	c1 e0 04             	shl    $0x4,%eax
f010f04a:	8d 5d e8             	lea    -0x18(%ebp),%ebx
f010f04d:	01 d8                	add    %ebx,%eax
f010f04f:	2d d0 00 00 00       	sub    $0xd0,%eax
f010f054:	8b 00                	mov    (%eax),%eax
f010f056:	85 c0                	test   %eax,%eax
f010f058:	74 17                	je     f010f071 <test_alloc_block_FF+0x1a8>
f010f05a:	a1 28 26 78 f0       	mov    0xf0782628,%eax
f010f05f:	8d 95 14 ff ff ff    	lea    -0xec(%ebp),%edx
f010f065:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
f010f068:	c1 e1 04             	shl    $0x4,%ecx
f010f06b:	01 ca                	add    %ecx,%edx
f010f06d:	89 10                	mov    %edx,(%eax)
f010f06f:	eb 13                	jmp    f010f084 <test_alloc_block_FF+0x1bb>
f010f071:	8d 85 14 ff ff ff    	lea    -0xec(%ebp),%eax
f010f077:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010f07a:	c1 e2 04             	shl    $0x4,%edx
f010f07d:	01 d0                	add    %edx,%eax
f010f07f:	a3 24 26 78 f0       	mov    %eax,0xf0782624
f010f084:	8d 85 14 ff ff ff    	lea    -0xec(%ebp),%eax
f010f08a:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010f08d:	c1 e2 04             	shl    $0x4,%edx
f010f090:	01 d0                	add    %edx,%eax
f010f092:	a3 28 26 78 f0       	mov    %eax,0xf0782628
f010f097:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010f09a:	c1 e0 04             	shl    $0x4,%eax
f010f09d:	8d 75 e8             	lea    -0x18(%ebp),%esi
f010f0a0:	01 f0                	add    %esi,%eax
f010f0a2:	2d d4 00 00 00       	sub    $0xd4,%eax
f010f0a7:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f010f0ad:	a1 30 26 78 f0       	mov    0xf0782630,%eax
f010f0b2:	40                   	inc    %eax
f010f0b3:	a3 30 26 78 f0       	mov    %eax,0xf0782630
	uint32 BlocksSVAs[numOfFreeBlocks_FF] = {0x0, 0x2000, 0x4000, 0x7000, 0x19000, 0x1A400, 0x21B400, 0x31B400}; //0KB, 8KB, 16KB, 28KB, 100KB, 105KB, 2,157KB, 3,181KB
	uint32 BlocksSizes[numOfFreeBlocks_FF] = {3*kilo, 8*kilo, 1*kilo, 9*kilo, 4*kilo, 2*Mega, 1*Mega, 5*kilo} ;

	LIST_INIT(&FreeMemBlocksList);
	struct MemBlock freeBlocks[numOfFreeBlocks_FF];
	for (int i = 0; i < numOfFreeBlocks_FF; ++i)
f010f0b8:	ff 45 e4             	incl   -0x1c(%ebp)
f010f0bb:	83 7d e4 07          	cmpl   $0x7,-0x1c(%ebp)
f010f0bf:	0f 8e 97 fe ff ff    	jle    f010ef5c <test_alloc_block_FF+0x93>
			LIST_INSERT_TAIL(&FreeMemBlocksList, &(freeBlocks[i]));
	}

	//====================================================================//
	/*FF ALLOC Scenario 1: Try to allocate a block with a size greater than the size of any existing free block*/
	struct MemBlock * blockToAlloc = alloc_block_FF(3*Mega);
f010f0c5:	83 ec 0c             	sub    $0xc,%esp
f010f0c8:	68 00 00 30 00       	push   $0x300000
f010f0cd:	e8 4c 30 02 00       	call   f013211e <alloc_block_FF>
f010f0d2:	83 c4 10             	add    $0x10,%esp
f010f0d5:	89 45 dc             	mov    %eax,-0x24(%ebp)

	//Check returned block content
	if(blockToAlloc != NULL) panic("alloc_block_FF: WRONG FF ALLOC - alloc_block_FF find a block instead no existing free blocks with the given size.");
f010f0d8:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f010f0dc:	74 17                	je     f010f0f5 <test_alloc_block_FF+0x22c>
f010f0de:	83 ec 04             	sub    $0x4,%esp
f010f0e1:	68 cc 81 13 f0       	push   $0xf01381cc
f010f0e6:	68 15 01 00 00       	push   $0x115
f010f0eb:	68 14 7d 13 f0       	push   $0xf0137d14
f010f0f0:	e8 10 11 ff ff       	call   f0100205 <_panic>

	//Check size of AvailableMemBlocksList, FreeMemBlocksList & AllocMemBlocksList
	if (LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks || LIST_SIZE(&(FreeMemBlocksList)) != numOfFreeBlocks_FF || LIST_SIZE(&(AllocMemBlocksList)) != 0)
f010f0f5:	a1 64 26 78 f0       	mov    0xf0782664,%eax
f010f0fa:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f010f0fd:	75 13                	jne    f010f112 <test_alloc_block_FF+0x249>
f010f0ff:	a1 30 26 78 f0       	mov    0xf0782630,%eax
f010f104:	83 f8 08             	cmp    $0x8,%eax
f010f107:	75 09                	jne    f010f112 <test_alloc_block_FF+0x249>
f010f109:	a1 94 25 78 f0       	mov    0xf0782594,%eax
f010f10e:	85 c0                	test   %eax,%eax
f010f110:	74 17                	je     f010f129 <test_alloc_block_FF+0x260>
		panic("find_block: AvailableMemBlocksList, FreeMemBlocksList & AllocMemBlocksList are affected and this shall not occurred.");
f010f112:	83 ec 04             	sub    $0x4,%esp
f010f115:	68 40 82 13 f0       	push   $0xf0138240
f010f11a:	68 19 01 00 00       	push   $0x119
f010f11f:	68 14 7d 13 f0       	push   $0xf0137d14
f010f124:	e8 dc 10 ff ff       	call   f0100205 <_panic>

	//====================================================================//
	/*FF ALLOC Scenario 2: Try to allocate a block with a size equal to the size of the first existing free block*/
	blockToAlloc = alloc_block_FF(9*kilo);
f010f129:	83 ec 0c             	sub    $0xc,%esp
f010f12c:	68 00 24 00 00       	push   $0x2400
f010f131:	e8 e8 2f 02 00       	call   f013211e <alloc_block_FF>
f010f136:	83 c4 10             	add    $0x10,%esp
f010f139:	89 45 dc             	mov    %eax,-0x24(%ebp)

	//Check returned block content
	if(blockToAlloc == NULL || blockToAlloc->size != 9*kilo || blockToAlloc->sva != 0x7000)
f010f13c:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f010f140:	74 1a                	je     f010f15c <test_alloc_block_FF+0x293>
f010f142:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010f145:	8b 40 0c             	mov    0xc(%eax),%eax
f010f148:	3d 00 24 00 00       	cmp    $0x2400,%eax
f010f14d:	75 0d                	jne    f010f15c <test_alloc_block_FF+0x293>
f010f14f:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010f152:	8b 40 08             	mov    0x8(%eax),%eax
f010f155:	3d 00 70 00 00       	cmp    $0x7000,%eax
f010f15a:	74 17                	je     f010f173 <test_alloc_block_FF+0x2aa>
		panic("alloc_block_FF: WRONG FF ALLOC - alloc_block_FF find a wrong block.");
f010f15c:	83 ec 04             	sub    $0x4,%esp
f010f15f:	68 b8 82 13 f0       	push   $0xf01382b8
f010f164:	68 21 01 00 00       	push   $0x121
f010f169:	68 14 7d 13 f0       	push   $0xf0137d14
f010f16e:	e8 92 10 ff ff       	call   f0100205 <_panic>

	//Check size of AvailableMemBlocksList, FreeMemBlocksList & AllocMemBlocksList
	if (LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks || LIST_SIZE(&(FreeMemBlocksList)) != numOfFreeBlocks_FF-1 || LIST_SIZE(&(AllocMemBlocksList)) != 0)
f010f173:	a1 64 26 78 f0       	mov    0xf0782664,%eax
f010f178:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f010f17b:	75 13                	jne    f010f190 <test_alloc_block_FF+0x2c7>
f010f17d:	a1 30 26 78 f0       	mov    0xf0782630,%eax
f010f182:	83 f8 07             	cmp    $0x7,%eax
f010f185:	75 09                	jne    f010f190 <test_alloc_block_FF+0x2c7>
f010f187:	a1 94 25 78 f0       	mov    0xf0782594,%eax
f010f18c:	85 c0                	test   %eax,%eax
f010f18e:	74 17                	je     f010f1a7 <test_alloc_block_FF+0x2de>
		panic("alloc_block_FF: Wrong sizes for AvailableMemBlocksList, FreeMemBlocksList and AllocMemBlocksList.");
f010f190:	83 ec 04             	sub    $0x4,%esp
f010f193:	68 fc 82 13 f0       	push   $0xf01382fc
f010f198:	68 25 01 00 00       	push   $0x125
f010f19d:	68 14 7d 13 f0       	push   $0xf0137d14
f010f1a2:	e8 5e 10 ff ff       	call   f0100205 <_panic>

	//Check FreeMemBlocksList content
	uint32 size = 0;
f010f1a7:	c7 85 10 ff ff ff 00 	movl   $0x0,-0xf0(%ebp)
f010f1ae:	00 00 00 
	uint32 actualSize = numOfFreeBlocks_FF-1;
f010f1b1:	c7 45 d8 07 00 00 00 	movl   $0x7,-0x28(%ebp)
	BlocksSVAs[3] = 0;
f010f1b8:	c7 45 c0 00 00 00 00 	movl   $0x0,-0x40(%ebp)
	BlocksSizes[3] = 0;
f010f1bf:	c7 45 a0 00 00 00 00 	movl   $0x0,-0x60(%ebp)
	int chk = check_list_data(&FreeMemBlocksList, BlocksSVAs, BlocksSizes, &size, actualSize);
f010f1c6:	83 ec 0c             	sub    $0xc,%esp
f010f1c9:	ff 75 d8             	pushl  -0x28(%ebp)
f010f1cc:	8d 85 10 ff ff ff    	lea    -0xf0(%ebp),%eax
f010f1d2:	50                   	push   %eax
f010f1d3:	8d 45 94             	lea    -0x6c(%ebp),%eax
f010f1d6:	50                   	push   %eax
f010f1d7:	8d 45 b4             	lea    -0x4c(%ebp),%eax
f010f1da:	50                   	push   %eax
f010f1db:	68 24 26 78 f0       	push   $0xf0782624
f010f1e0:	e8 5b 1c 00 00       	call   f0110e40 <check_list_data>
f010f1e5:	83 c4 20             	add    $0x20,%esp
f010f1e8:	89 45 d4             	mov    %eax,-0x2c(%ebp)
	if(chk != 1) panic("alloc_block_FF: WRONG FF ALLOC .. FreeMemBlocksList content is not correct.");
f010f1eb:	83 7d d4 01          	cmpl   $0x1,-0x2c(%ebp)
f010f1ef:	74 17                	je     f010f208 <test_alloc_block_FF+0x33f>
f010f1f1:	83 ec 04             	sub    $0x4,%esp
f010f1f4:	68 60 83 13 f0       	push   $0xf0138360
f010f1f9:	68 2d 01 00 00       	push   $0x12d
f010f1fe:	68 14 7d 13 f0       	push   $0xf0137d14
f010f203:	e8 fd 0f ff ff       	call   f0100205 <_panic>
	if(size != actualSize) panic("alloc_block_FF: WRONG FF ALLOC .. FreeMemBlocksList size is not correct.");
f010f208:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f010f20e:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f010f211:	74 17                	je     f010f22a <test_alloc_block_FF+0x361>
f010f213:	83 ec 04             	sub    $0x4,%esp
f010f216:	68 ac 83 13 f0       	push   $0xf01383ac
f010f21b:	68 2e 01 00 00       	push   $0x12e
f010f220:	68 14 7d 13 f0       	push   $0xf0137d14
f010f225:	e8 db 0f ff ff       	call   f0100205 <_panic>

	//====================================================================//
	/*FF ALLOC Scenario 3: Try to allocate a block with a size smaller than the size of the first existing free block*/
	blockToAlloc = alloc_block_FF(1*Mega);
f010f22a:	83 ec 0c             	sub    $0xc,%esp
f010f22d:	68 00 00 10 00       	push   $0x100000
f010f232:	e8 e7 2e 02 00       	call   f013211e <alloc_block_FF>
f010f237:	83 c4 10             	add    $0x10,%esp
f010f23a:	89 45 dc             	mov    %eax,-0x24(%ebp)

	//Check returned block content
	if(blockToAlloc == NULL || blockToAlloc->size != 1*Mega || blockToAlloc->sva != 0x1A400)
f010f23d:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f010f241:	74 1a                	je     f010f25d <test_alloc_block_FF+0x394>
f010f243:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010f246:	8b 40 0c             	mov    0xc(%eax),%eax
f010f249:	3d 00 00 10 00       	cmp    $0x100000,%eax
f010f24e:	75 0d                	jne    f010f25d <test_alloc_block_FF+0x394>
f010f250:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010f253:	8b 40 08             	mov    0x8(%eax),%eax
f010f256:	3d 00 a4 01 00       	cmp    $0x1a400,%eax
f010f25b:	74 17                	je     f010f274 <test_alloc_block_FF+0x3ab>
		panic("alloc_block_FF: WRONG FF ALLOC - alloc_block_FF find a wrong block.");
f010f25d:	83 ec 04             	sub    $0x4,%esp
f010f260:	68 b8 82 13 f0       	push   $0xf01382b8
f010f265:	68 36 01 00 00       	push   $0x136
f010f26a:	68 14 7d 13 f0       	push   $0xf0137d14
f010f26f:	e8 91 0f ff ff       	call   f0100205 <_panic>

	//Check size of AvailableMemBlocksList, FreeMemBlocksList & AllocMemBlocksList
	if (LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks-1 || LIST_SIZE(&(FreeMemBlocksList)) != numOfFreeBlocks_FF-1 || LIST_SIZE(&(AllocMemBlocksList)) != 0)
f010f274:	a1 64 26 78 f0       	mov    0xf0782664,%eax
f010f279:	8b 55 e0             	mov    -0x20(%ebp),%edx
f010f27c:	4a                   	dec    %edx
f010f27d:	39 d0                	cmp    %edx,%eax
f010f27f:	75 13                	jne    f010f294 <test_alloc_block_FF+0x3cb>
f010f281:	a1 30 26 78 f0       	mov    0xf0782630,%eax
f010f286:	83 f8 07             	cmp    $0x7,%eax
f010f289:	75 09                	jne    f010f294 <test_alloc_block_FF+0x3cb>
f010f28b:	a1 94 25 78 f0       	mov    0xf0782594,%eax
f010f290:	85 c0                	test   %eax,%eax
f010f292:	74 17                	je     f010f2ab <test_alloc_block_FF+0x3e2>
		panic("alloc_block_FF: Wrong sizes for AvailableMemBlocksList, FreeMemBlocksList and AllocMemBlocksList.");
f010f294:	83 ec 04             	sub    $0x4,%esp
f010f297:	68 fc 82 13 f0       	push   $0xf01382fc
f010f29c:	68 3a 01 00 00       	push   $0x13a
f010f2a1:	68 14 7d 13 f0       	push   $0xf0137d14
f010f2a6:	e8 5a 0f ff ff       	call   f0100205 <_panic>

	//Check FreeMemBlocksList content
	size = 0;
f010f2ab:	c7 85 10 ff ff ff 00 	movl   $0x0,-0xf0(%ebp)
f010f2b2:	00 00 00 
	actualSize = numOfFreeBlocks_FF-1;
f010f2b5:	c7 45 d8 07 00 00 00 	movl   $0x7,-0x28(%ebp)
	BlocksSVAs[5] = 0x11A400;  //105KB + 1Mega = (105*1024)+(1024*1024)
f010f2bc:	c7 45 c8 00 a4 11 00 	movl   $0x11a400,-0x38(%ebp)
	BlocksSizes[5] = 1*Mega;
f010f2c3:	c7 45 a8 00 00 10 00 	movl   $0x100000,-0x58(%ebp)
	chk = check_list_data(&FreeMemBlocksList, BlocksSVAs, BlocksSizes, &size, actualSize);
f010f2ca:	83 ec 0c             	sub    $0xc,%esp
f010f2cd:	ff 75 d8             	pushl  -0x28(%ebp)
f010f2d0:	8d 85 10 ff ff ff    	lea    -0xf0(%ebp),%eax
f010f2d6:	50                   	push   %eax
f010f2d7:	8d 45 94             	lea    -0x6c(%ebp),%eax
f010f2da:	50                   	push   %eax
f010f2db:	8d 45 b4             	lea    -0x4c(%ebp),%eax
f010f2de:	50                   	push   %eax
f010f2df:	68 24 26 78 f0       	push   $0xf0782624
f010f2e4:	e8 57 1b 00 00       	call   f0110e40 <check_list_data>
f010f2e9:	83 c4 20             	add    $0x20,%esp
f010f2ec:	89 45 d4             	mov    %eax,-0x2c(%ebp)
	if(chk != 1) panic("alloc_block_FF: WRONG FF ALLOC .. FreeMemBlocksList content is not correct.");
f010f2ef:	83 7d d4 01          	cmpl   $0x1,-0x2c(%ebp)
f010f2f3:	74 17                	je     f010f30c <test_alloc_block_FF+0x443>
f010f2f5:	83 ec 04             	sub    $0x4,%esp
f010f2f8:	68 60 83 13 f0       	push   $0xf0138360
f010f2fd:	68 42 01 00 00       	push   $0x142
f010f302:	68 14 7d 13 f0       	push   $0xf0137d14
f010f307:	e8 f9 0e ff ff       	call   f0100205 <_panic>
	if(size != actualSize) panic("alloc_block_FF: WRONG FF ALLOC .. FreeMemBlocksList size is not correct.");
f010f30c:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f010f312:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f010f315:	74 17                	je     f010f32e <test_alloc_block_FF+0x465>
f010f317:	83 ec 04             	sub    $0x4,%esp
f010f31a:	68 ac 83 13 f0       	push   $0xf01383ac
f010f31f:	68 43 01 00 00       	push   $0x143
f010f324:	68 14 7d 13 f0       	push   $0xf0137d14
f010f329:	e8 d7 0e ff ff       	call   f0100205 <_panic>

	//====================================================================//
	//show_list_content(&FreeMemBlocksList);
	cprintf("Congratulations!! test alloc_block_FF completed successfully.\n");
f010f32e:	83 ec 0c             	sub    $0xc,%esp
f010f331:	68 f8 83 13 f0       	push   $0xf01383f8
f010f336:	e8 d3 19 ff ff       	call   f0100d0e <cprintf>
f010f33b:	83 c4 10             	add    $0x10,%esp
}
f010f33e:	90                   	nop
f010f33f:	8d 65 f4             	lea    -0xc(%ebp),%esp
f010f342:	5b                   	pop    %ebx
f010f343:	5e                   	pop    %esi
f010f344:	5f                   	pop    %edi
f010f345:	5d                   	pop    %ebp
f010f346:	c3                   	ret    

f010f347 <test_alloc_block_BF>:

void test_alloc_block_BF()
{
f010f347:	55                   	push   %ebp
f010f348:	89 e5                	mov    %esp,%ebp
f010f34a:	57                   	push   %edi
f010f34b:	56                   	push   %esi
f010f34c:	53                   	push   %ebx
f010f34d:	81 ec cc 00 00 00    	sub    $0xcc,%esp
	uint32 numOfBlocks = 10;
f010f353:	c7 45 e0 0a 00 00 00 	movl   $0xa,-0x20(%ebp)
	initialize_MemBlocksList(numOfBlocks);
f010f35a:	83 ec 0c             	sub    $0xc,%esp
f010f35d:	ff 75 e0             	pushl  -0x20(%ebp)
f010f360:	e8 f7 29 02 00       	call   f0131d5c <initialize_MemBlocksList>
f010f365:	83 c4 10             	add    $0x10,%esp
	LIST_INIT(&AllocMemBlocksList);
f010f368:	c7 05 88 25 78 f0 00 	movl   $0x0,0xf0782588
f010f36f:	00 00 00 
f010f372:	c7 05 8c 25 78 f0 00 	movl   $0x0,0xf078258c
f010f379:	00 00 00 
f010f37c:	c7 05 94 25 78 f0 00 	movl   $0x0,0xf0782594
f010f383:	00 00 00 

	//Fill AllocMemBlocksList with multiple blocks
	#define numOfFreeBlocks_BF 7
	uint32 BlocksSVAs[numOfFreeBlocks_BF] = {0x0, 0x2000, 0x4000, 0x7000, 0x19000, 0x1A400, 0x21B400}; //0KB, 8KB, 16KB, 28KB, 100KB, 105KB, 2,157KB
f010f386:	8d 45 b8             	lea    -0x48(%ebp),%eax
f010f389:	bb 74 86 13 f0       	mov    $0xf0138674,%ebx
f010f38e:	ba 07 00 00 00       	mov    $0x7,%edx
f010f393:	89 c7                	mov    %eax,%edi
f010f395:	89 de                	mov    %ebx,%esi
f010f397:	89 d1                	mov    %edx,%ecx
f010f399:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
	uint32 BlocksSizes[numOfFreeBlocks_BF] = {2*kilo, 8*kilo, 1*kilo, 9*kilo, 4*kilo, 2*Mega, 1*Mega} ;
f010f39b:	8d 45 9c             	lea    -0x64(%ebp),%eax
f010f39e:	bb 90 86 13 f0       	mov    $0xf0138690,%ebx
f010f3a3:	ba 07 00 00 00       	mov    $0x7,%edx
f010f3a8:	89 c7                	mov    %eax,%edi
f010f3aa:	89 de                	mov    %ebx,%esi
f010f3ac:	89 d1                	mov    %edx,%ecx
f010f3ae:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)

	LIST_INIT(&FreeMemBlocksList);
f010f3b0:	c7 05 24 26 78 f0 00 	movl   $0x0,0xf0782624
f010f3b7:	00 00 00 
f010f3ba:	c7 05 28 26 78 f0 00 	movl   $0x0,0xf0782628
f010f3c1:	00 00 00 
f010f3c4:	c7 05 30 26 78 f0 00 	movl   $0x0,0xf0782630
f010f3cb:	00 00 00 
	struct MemBlock freeBlocks[numOfFreeBlocks_BF];
	for (int i = 0; i < numOfFreeBlocks_BF; ++i)
f010f3ce:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
f010f3d5:	e9 5f 01 00 00       	jmp    f010f539 <test_alloc_block_BF+0x1f2>
	{
		freeBlocks[i].sva = BlocksSVAs[i];
f010f3da:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010f3dd:	8b 44 85 b8          	mov    -0x48(%ebp,%eax,4),%eax
f010f3e1:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010f3e4:	c1 e2 04             	shl    $0x4,%edx
f010f3e7:	8d 5d e8             	lea    -0x18(%ebp),%ebx
f010f3ea:	01 da                	add    %ebx,%edx
f010f3ec:	81 ea b4 00 00 00    	sub    $0xb4,%edx
f010f3f2:	89 02                	mov    %eax,(%edx)
		freeBlocks[i].size = BlocksSizes[i];
f010f3f4:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010f3f7:	8b 44 85 9c          	mov    -0x64(%ebp,%eax,4),%eax
f010f3fb:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010f3fe:	c1 e2 04             	shl    $0x4,%edx
f010f401:	8d 75 e8             	lea    -0x18(%ebp),%esi
f010f404:	01 f2                	add    %esi,%edx
f010f406:	81 ea b0 00 00 00    	sub    $0xb0,%edx
f010f40c:	89 02                	mov    %eax,(%edx)
		if (i == 0)
f010f40e:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f010f412:	0f 85 92 00 00 00    	jne    f010f4aa <test_alloc_block_BF+0x163>
			LIST_INSERT_HEAD(&FreeMemBlocksList, &(freeBlocks[i]));
f010f418:	a1 24 26 78 f0       	mov    0xf0782624,%eax
f010f41d:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010f420:	c1 e2 04             	shl    $0x4,%edx
f010f423:	8d 7d e8             	lea    -0x18(%ebp),%edi
f010f426:	01 fa                	add    %edi,%edx
f010f428:	81 ea bc 00 00 00    	sub    $0xbc,%edx
f010f42e:	89 02                	mov    %eax,(%edx)
f010f430:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010f433:	c1 e0 04             	shl    $0x4,%eax
f010f436:	8d 5d e8             	lea    -0x18(%ebp),%ebx
f010f439:	01 d8                	add    %ebx,%eax
f010f43b:	2d bc 00 00 00       	sub    $0xbc,%eax
f010f440:	8b 00                	mov    (%eax),%eax
f010f442:	85 c0                	test   %eax,%eax
f010f444:	74 18                	je     f010f45e <test_alloc_block_BF+0x117>
f010f446:	a1 24 26 78 f0       	mov    0xf0782624,%eax
f010f44b:	8d 95 2c ff ff ff    	lea    -0xd4(%ebp),%edx
f010f451:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
f010f454:	c1 e1 04             	shl    $0x4,%ecx
f010f457:	01 ca                	add    %ecx,%edx
f010f459:	89 50 04             	mov    %edx,0x4(%eax)
f010f45c:	eb 13                	jmp    f010f471 <test_alloc_block_BF+0x12a>
f010f45e:	8d 85 2c ff ff ff    	lea    -0xd4(%ebp),%eax
f010f464:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010f467:	c1 e2 04             	shl    $0x4,%edx
f010f46a:	01 d0                	add    %edx,%eax
f010f46c:	a3 28 26 78 f0       	mov    %eax,0xf0782628
f010f471:	8d 85 2c ff ff ff    	lea    -0xd4(%ebp),%eax
f010f477:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010f47a:	c1 e2 04             	shl    $0x4,%edx
f010f47d:	01 d0                	add    %edx,%eax
f010f47f:	a3 24 26 78 f0       	mov    %eax,0xf0782624
f010f484:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010f487:	c1 e0 04             	shl    $0x4,%eax
f010f48a:	8d 75 e8             	lea    -0x18(%ebp),%esi
f010f48d:	01 f0                	add    %esi,%eax
f010f48f:	2d b8 00 00 00       	sub    $0xb8,%eax
f010f494:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f010f49a:	a1 30 26 78 f0       	mov    0xf0782630,%eax
f010f49f:	40                   	inc    %eax
f010f4a0:	a3 30 26 78 f0       	mov    %eax,0xf0782630
f010f4a5:	e9 8c 00 00 00       	jmp    f010f536 <test_alloc_block_BF+0x1ef>
		else
			LIST_INSERT_TAIL(&FreeMemBlocksList, &(freeBlocks[i]));
f010f4aa:	a1 28 26 78 f0       	mov    0xf0782628,%eax
f010f4af:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010f4b2:	c1 e2 04             	shl    $0x4,%edx
f010f4b5:	8d 7d e8             	lea    -0x18(%ebp),%edi
f010f4b8:	01 fa                	add    %edi,%edx
f010f4ba:	81 ea b8 00 00 00    	sub    $0xb8,%edx
f010f4c0:	89 02                	mov    %eax,(%edx)
f010f4c2:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010f4c5:	c1 e0 04             	shl    $0x4,%eax
f010f4c8:	8d 5d e8             	lea    -0x18(%ebp),%ebx
f010f4cb:	01 d8                	add    %ebx,%eax
f010f4cd:	2d b8 00 00 00       	sub    $0xb8,%eax
f010f4d2:	8b 00                	mov    (%eax),%eax
f010f4d4:	85 c0                	test   %eax,%eax
f010f4d6:	74 17                	je     f010f4ef <test_alloc_block_BF+0x1a8>
f010f4d8:	a1 28 26 78 f0       	mov    0xf0782628,%eax
f010f4dd:	8d 95 2c ff ff ff    	lea    -0xd4(%ebp),%edx
f010f4e3:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
f010f4e6:	c1 e1 04             	shl    $0x4,%ecx
f010f4e9:	01 ca                	add    %ecx,%edx
f010f4eb:	89 10                	mov    %edx,(%eax)
f010f4ed:	eb 13                	jmp    f010f502 <test_alloc_block_BF+0x1bb>
f010f4ef:	8d 85 2c ff ff ff    	lea    -0xd4(%ebp),%eax
f010f4f5:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010f4f8:	c1 e2 04             	shl    $0x4,%edx
f010f4fb:	01 d0                	add    %edx,%eax
f010f4fd:	a3 24 26 78 f0       	mov    %eax,0xf0782624
f010f502:	8d 85 2c ff ff ff    	lea    -0xd4(%ebp),%eax
f010f508:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010f50b:	c1 e2 04             	shl    $0x4,%edx
f010f50e:	01 d0                	add    %edx,%eax
f010f510:	a3 28 26 78 f0       	mov    %eax,0xf0782628
f010f515:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010f518:	c1 e0 04             	shl    $0x4,%eax
f010f51b:	8d 75 e8             	lea    -0x18(%ebp),%esi
f010f51e:	01 f0                	add    %esi,%eax
f010f520:	2d bc 00 00 00       	sub    $0xbc,%eax
f010f525:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f010f52b:	a1 30 26 78 f0       	mov    0xf0782630,%eax
f010f530:	40                   	inc    %eax
f010f531:	a3 30 26 78 f0       	mov    %eax,0xf0782630
	uint32 BlocksSVAs[numOfFreeBlocks_BF] = {0x0, 0x2000, 0x4000, 0x7000, 0x19000, 0x1A400, 0x21B400}; //0KB, 8KB, 16KB, 28KB, 100KB, 105KB, 2,157KB
	uint32 BlocksSizes[numOfFreeBlocks_BF] = {2*kilo, 8*kilo, 1*kilo, 9*kilo, 4*kilo, 2*Mega, 1*Mega} ;

	LIST_INIT(&FreeMemBlocksList);
	struct MemBlock freeBlocks[numOfFreeBlocks_BF];
	for (int i = 0; i < numOfFreeBlocks_BF; ++i)
f010f536:	ff 45 e4             	incl   -0x1c(%ebp)
f010f539:	83 7d e4 06          	cmpl   $0x6,-0x1c(%ebp)
f010f53d:	0f 8e 97 fe ff ff    	jle    f010f3da <test_alloc_block_BF+0x93>
			LIST_INSERT_TAIL(&FreeMemBlocksList, &(freeBlocks[i]));
	}

	//====================================================================//
	/*BF ALLOC Scenario 1: Try to allocate a block with a size greater than the size of any existing free block*/
	struct MemBlock * blockToAlloc = alloc_block_BF(4*Mega);
f010f543:	83 ec 0c             	sub    $0xc,%esp
f010f546:	68 00 00 40 00       	push   $0x400000
f010f54b:	e8 9b 2d 02 00       	call   f01322eb <alloc_block_BF>
f010f550:	83 c4 10             	add    $0x10,%esp
f010f553:	89 45 dc             	mov    %eax,-0x24(%ebp)

	//Check returned block content
	if(blockToAlloc != NULL) panic("alloc_block_BF: WRONG BF ALLOC - alloc_block_BF find a block instead no existing free blocks with the given size.");
f010f556:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f010f55a:	74 17                	je     f010f573 <test_alloc_block_BF+0x22c>
f010f55c:	83 ec 04             	sub    $0x4,%esp
f010f55f:	68 80 84 13 f0       	push   $0xf0138480
f010f564:	68 66 01 00 00       	push   $0x166
f010f569:	68 14 7d 13 f0       	push   $0xf0137d14
f010f56e:	e8 92 0c ff ff       	call   f0100205 <_panic>

	//Check size of AvailableMemBlocksList, FreeMemBlocksList & AllocMemBlocksList
	if (LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks || LIST_SIZE(&(FreeMemBlocksList)) != numOfFreeBlocks_BF || LIST_SIZE(&(AllocMemBlocksList)) != 0)
f010f573:	a1 64 26 78 f0       	mov    0xf0782664,%eax
f010f578:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f010f57b:	75 13                	jne    f010f590 <test_alloc_block_BF+0x249>
f010f57d:	a1 30 26 78 f0       	mov    0xf0782630,%eax
f010f582:	83 f8 07             	cmp    $0x7,%eax
f010f585:	75 09                	jne    f010f590 <test_alloc_block_BF+0x249>
f010f587:	a1 94 25 78 f0       	mov    0xf0782594,%eax
f010f58c:	85 c0                	test   %eax,%eax
f010f58e:	74 17                	je     f010f5a7 <test_alloc_block_BF+0x260>
		panic("find_block: AvailableMemBlocksList, FreeMemBlocksList & AllocMemBlocksList are affected and this shall not occurred.");
f010f590:	83 ec 04             	sub    $0x4,%esp
f010f593:	68 40 82 13 f0       	push   $0xf0138240
f010f598:	68 6a 01 00 00       	push   $0x16a
f010f59d:	68 14 7d 13 f0       	push   $0xf0137d14
f010f5a2:	e8 5e 0c ff ff       	call   f0100205 <_panic>

	//====================================================================//
	/*BF ALLOC Scenario 2: Try to allocate a block with a size equal to the size of the one existing free blocks (NOT THE FIRST BLOCK FIT)*/
	blockToAlloc = alloc_block_BF(1*Mega);
f010f5a7:	83 ec 0c             	sub    $0xc,%esp
f010f5aa:	68 00 00 10 00       	push   $0x100000
f010f5af:	e8 37 2d 02 00       	call   f01322eb <alloc_block_BF>
f010f5b4:	83 c4 10             	add    $0x10,%esp
f010f5b7:	89 45 dc             	mov    %eax,-0x24(%ebp)

	//Check returned block content
	if(blockToAlloc == NULL || blockToAlloc->size != 1*Mega || blockToAlloc->sva != 0x21B400)
f010f5ba:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f010f5be:	74 1a                	je     f010f5da <test_alloc_block_BF+0x293>
f010f5c0:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010f5c3:	8b 40 0c             	mov    0xc(%eax),%eax
f010f5c6:	3d 00 00 10 00       	cmp    $0x100000,%eax
f010f5cb:	75 0d                	jne    f010f5da <test_alloc_block_BF+0x293>
f010f5cd:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010f5d0:	8b 40 08             	mov    0x8(%eax),%eax
f010f5d3:	3d 00 b4 21 00       	cmp    $0x21b400,%eax
f010f5d8:	74 17                	je     f010f5f1 <test_alloc_block_BF+0x2aa>
		panic("alloc_block_BF: WRONG BF ALLOC - alloc_block_BF find a wrong block.");
f010f5da:	83 ec 04             	sub    $0x4,%esp
f010f5dd:	68 f4 84 13 f0       	push   $0xf01384f4
f010f5e2:	68 72 01 00 00       	push   $0x172
f010f5e7:	68 14 7d 13 f0       	push   $0xf0137d14
f010f5ec:	e8 14 0c ff ff       	call   f0100205 <_panic>

	//Check size of AvailableMemBlocksList, FreeMemBlocksList & AllocMemBlocksList
	if (LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks || LIST_SIZE(&(FreeMemBlocksList)) != numOfFreeBlocks_BF-1 || LIST_SIZE(&(AllocMemBlocksList)) != 0)
f010f5f1:	a1 64 26 78 f0       	mov    0xf0782664,%eax
f010f5f6:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f010f5f9:	75 13                	jne    f010f60e <test_alloc_block_BF+0x2c7>
f010f5fb:	a1 30 26 78 f0       	mov    0xf0782630,%eax
f010f600:	83 f8 06             	cmp    $0x6,%eax
f010f603:	75 09                	jne    f010f60e <test_alloc_block_BF+0x2c7>
f010f605:	a1 94 25 78 f0       	mov    0xf0782594,%eax
f010f60a:	85 c0                	test   %eax,%eax
f010f60c:	74 17                	je     f010f625 <test_alloc_block_BF+0x2de>
		panic("alloc_block_BF: Wrong sizes for AvailableMemBlocksList, FreeMemBlocksList and AllocMemBlocksList.");
f010f60e:	83 ec 04             	sub    $0x4,%esp
f010f611:	68 38 85 13 f0       	push   $0xf0138538
f010f616:	68 76 01 00 00       	push   $0x176
f010f61b:	68 14 7d 13 f0       	push   $0xf0137d14
f010f620:	e8 e0 0b ff ff       	call   f0100205 <_panic>

	//Check FreeMemBlocksList content
	uint32 size = 0;
f010f625:	c7 85 28 ff ff ff 00 	movl   $0x0,-0xd8(%ebp)
f010f62c:	00 00 00 
	uint32 actualSize = numOfFreeBlocks_BF-1;
f010f62f:	c7 45 d8 06 00 00 00 	movl   $0x6,-0x28(%ebp)
	BlocksSVAs[6] = 0;
f010f636:	c7 45 d0 00 00 00 00 	movl   $0x0,-0x30(%ebp)
	BlocksSizes[6] = 0;
f010f63d:	c7 45 b4 00 00 00 00 	movl   $0x0,-0x4c(%ebp)
	int chk = check_list_data(&FreeMemBlocksList, BlocksSVAs, BlocksSizes, &size, actualSize);
f010f644:	83 ec 0c             	sub    $0xc,%esp
f010f647:	ff 75 d8             	pushl  -0x28(%ebp)
f010f64a:	8d 85 28 ff ff ff    	lea    -0xd8(%ebp),%eax
f010f650:	50                   	push   %eax
f010f651:	8d 45 9c             	lea    -0x64(%ebp),%eax
f010f654:	50                   	push   %eax
f010f655:	8d 45 b8             	lea    -0x48(%ebp),%eax
f010f658:	50                   	push   %eax
f010f659:	68 24 26 78 f0       	push   $0xf0782624
f010f65e:	e8 dd 17 00 00       	call   f0110e40 <check_list_data>
f010f663:	83 c4 20             	add    $0x20,%esp
f010f666:	89 45 d4             	mov    %eax,-0x2c(%ebp)
	if(chk != 1) panic("alloc_block_BF: WRONG BF ALLOC .. FreeMemBlocksList content is not correct.");
f010f669:	83 7d d4 01          	cmpl   $0x1,-0x2c(%ebp)
f010f66d:	74 17                	je     f010f686 <test_alloc_block_BF+0x33f>
f010f66f:	83 ec 04             	sub    $0x4,%esp
f010f672:	68 9c 85 13 f0       	push   $0xf013859c
f010f677:	68 7e 01 00 00       	push   $0x17e
f010f67c:	68 14 7d 13 f0       	push   $0xf0137d14
f010f681:	e8 7f 0b ff ff       	call   f0100205 <_panic>
	if(size != actualSize) panic("alloc_block_BF: WRONG BF ALLOC .. FreeMemBlocksList size is not correct.");
f010f686:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f010f68c:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f010f68f:	74 17                	je     f010f6a8 <test_alloc_block_BF+0x361>
f010f691:	83 ec 04             	sub    $0x4,%esp
f010f694:	68 e8 85 13 f0       	push   $0xf01385e8
f010f699:	68 7f 01 00 00       	push   $0x17f
f010f69e:	68 14 7d 13 f0       	push   $0xf0137d14
f010f6a3:	e8 5d 0b ff ff       	call   f0100205 <_panic>

	//====================================================================//
	/*BF ALLOC Scenario 3: Try to allocate a block with a size smaller than the size of any existing free block (ONLY ONE BLOCK CAN FIT)*/
	blockToAlloc = alloc_block_BF(1*Mega);
f010f6a8:	83 ec 0c             	sub    $0xc,%esp
f010f6ab:	68 00 00 10 00       	push   $0x100000
f010f6b0:	e8 36 2c 02 00       	call   f01322eb <alloc_block_BF>
f010f6b5:	83 c4 10             	add    $0x10,%esp
f010f6b8:	89 45 dc             	mov    %eax,-0x24(%ebp)

	//Check returned block content
	if(blockToAlloc == NULL || blockToAlloc->size != 1*Mega || blockToAlloc->sva != 0x1A400)
f010f6bb:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f010f6bf:	74 1a                	je     f010f6db <test_alloc_block_BF+0x394>
f010f6c1:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010f6c4:	8b 40 0c             	mov    0xc(%eax),%eax
f010f6c7:	3d 00 00 10 00       	cmp    $0x100000,%eax
f010f6cc:	75 0d                	jne    f010f6db <test_alloc_block_BF+0x394>
f010f6ce:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010f6d1:	8b 40 08             	mov    0x8(%eax),%eax
f010f6d4:	3d 00 a4 01 00       	cmp    $0x1a400,%eax
f010f6d9:	74 17                	je     f010f6f2 <test_alloc_block_BF+0x3ab>
		panic("alloc_block_BF: WRONG BF ALLOC - alloc_block_BF find a wrong block.");
f010f6db:	83 ec 04             	sub    $0x4,%esp
f010f6de:	68 f4 84 13 f0       	push   $0xf01384f4
f010f6e3:	68 87 01 00 00       	push   $0x187
f010f6e8:	68 14 7d 13 f0       	push   $0xf0137d14
f010f6ed:	e8 13 0b ff ff       	call   f0100205 <_panic>

	//Check size of AvailableMemBlocksList, FreeMemBlocksList & AllocMemBlocksList
	if (LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks-1 || LIST_SIZE(&(FreeMemBlocksList)) != numOfFreeBlocks_BF-1 || LIST_SIZE(&(AllocMemBlocksList)) != 0)
f010f6f2:	a1 64 26 78 f0       	mov    0xf0782664,%eax
f010f6f7:	8b 55 e0             	mov    -0x20(%ebp),%edx
f010f6fa:	4a                   	dec    %edx
f010f6fb:	39 d0                	cmp    %edx,%eax
f010f6fd:	75 13                	jne    f010f712 <test_alloc_block_BF+0x3cb>
f010f6ff:	a1 30 26 78 f0       	mov    0xf0782630,%eax
f010f704:	83 f8 06             	cmp    $0x6,%eax
f010f707:	75 09                	jne    f010f712 <test_alloc_block_BF+0x3cb>
f010f709:	a1 94 25 78 f0       	mov    0xf0782594,%eax
f010f70e:	85 c0                	test   %eax,%eax
f010f710:	74 17                	je     f010f729 <test_alloc_block_BF+0x3e2>
		panic("alloc_block_BF: Wrong sizes for AvailableMemBlocksList, FreeMemBlocksList and AllocMemBlocksList.");
f010f712:	83 ec 04             	sub    $0x4,%esp
f010f715:	68 38 85 13 f0       	push   $0xf0138538
f010f71a:	68 8b 01 00 00       	push   $0x18b
f010f71f:	68 14 7d 13 f0       	push   $0xf0137d14
f010f724:	e8 dc 0a ff ff       	call   f0100205 <_panic>

	//Check FreeMemBlocksList content
	size = 0;
f010f729:	c7 85 28 ff ff ff 00 	movl   $0x0,-0xd8(%ebp)
f010f730:	00 00 00 
	actualSize = numOfFreeBlocks_BF-1;
f010f733:	c7 45 d8 06 00 00 00 	movl   $0x6,-0x28(%ebp)
	BlocksSVAs[5] = 0x11A400;  //105KB + 1Mega = (105*1024)+(1024*1024)
f010f73a:	c7 45 cc 00 a4 11 00 	movl   $0x11a400,-0x34(%ebp)
	BlocksSizes[5] = 1*Mega;
f010f741:	c7 45 b0 00 00 10 00 	movl   $0x100000,-0x50(%ebp)
	chk = check_list_data(&FreeMemBlocksList, BlocksSVAs, BlocksSizes, &size, actualSize);
f010f748:	83 ec 0c             	sub    $0xc,%esp
f010f74b:	ff 75 d8             	pushl  -0x28(%ebp)
f010f74e:	8d 85 28 ff ff ff    	lea    -0xd8(%ebp),%eax
f010f754:	50                   	push   %eax
f010f755:	8d 45 9c             	lea    -0x64(%ebp),%eax
f010f758:	50                   	push   %eax
f010f759:	8d 45 b8             	lea    -0x48(%ebp),%eax
f010f75c:	50                   	push   %eax
f010f75d:	68 24 26 78 f0       	push   $0xf0782624
f010f762:	e8 d9 16 00 00       	call   f0110e40 <check_list_data>
f010f767:	83 c4 20             	add    $0x20,%esp
f010f76a:	89 45 d4             	mov    %eax,-0x2c(%ebp)
	if(chk != 1) panic("alloc_block_BF: WRONG BF ALLOC .. FreeMemBlocksList content is not correct.");
f010f76d:	83 7d d4 01          	cmpl   $0x1,-0x2c(%ebp)
f010f771:	74 17                	je     f010f78a <test_alloc_block_BF+0x443>
f010f773:	83 ec 04             	sub    $0x4,%esp
f010f776:	68 9c 85 13 f0       	push   $0xf013859c
f010f77b:	68 93 01 00 00       	push   $0x193
f010f780:	68 14 7d 13 f0       	push   $0xf0137d14
f010f785:	e8 7b 0a ff ff       	call   f0100205 <_panic>
	if(size != actualSize) panic("alloc_block_BF: WRONG BF ALLOC .. FreeMemBlocksList size is not correct.");
f010f78a:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f010f790:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f010f793:	74 17                	je     f010f7ac <test_alloc_block_BF+0x465>
f010f795:	83 ec 04             	sub    $0x4,%esp
f010f798:	68 e8 85 13 f0       	push   $0xf01385e8
f010f79d:	68 94 01 00 00       	push   $0x194
f010f7a2:	68 14 7d 13 f0       	push   $0xf0137d14
f010f7a7:	e8 59 0a ff ff       	call   f0100205 <_panic>

	//====================================================================//
	/*BF ALLOC Scenario 4: Try to allocate a block with a size smaller than the size of any existing free block (MORE THAN ONE BLOCK CAN FIT)*/
	blockToAlloc = alloc_block_BF(3*kilo);
f010f7ac:	83 ec 0c             	sub    $0xc,%esp
f010f7af:	68 00 0c 00 00       	push   $0xc00
f010f7b4:	e8 32 2b 02 00       	call   f01322eb <alloc_block_BF>
f010f7b9:	83 c4 10             	add    $0x10,%esp
f010f7bc:	89 45 dc             	mov    %eax,-0x24(%ebp)

	//Check returned block content
	if(blockToAlloc == NULL || blockToAlloc->size != 3*kilo || blockToAlloc->sva != 0x19000)
f010f7bf:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f010f7c3:	74 1a                	je     f010f7df <test_alloc_block_BF+0x498>
f010f7c5:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010f7c8:	8b 40 0c             	mov    0xc(%eax),%eax
f010f7cb:	3d 00 0c 00 00       	cmp    $0xc00,%eax
f010f7d0:	75 0d                	jne    f010f7df <test_alloc_block_BF+0x498>
f010f7d2:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010f7d5:	8b 40 08             	mov    0x8(%eax),%eax
f010f7d8:	3d 00 90 01 00       	cmp    $0x19000,%eax
f010f7dd:	74 17                	je     f010f7f6 <test_alloc_block_BF+0x4af>
		panic("alloc_block_BF: WRONG BF ALLOC - alloc_block_BF find a wrong block.");
f010f7df:	83 ec 04             	sub    $0x4,%esp
f010f7e2:	68 f4 84 13 f0       	push   $0xf01384f4
f010f7e7:	68 9c 01 00 00       	push   $0x19c
f010f7ec:	68 14 7d 13 f0       	push   $0xf0137d14
f010f7f1:	e8 0f 0a ff ff       	call   f0100205 <_panic>

	//Check size of AvailableMemBlocksList, FreeMemBlocksList & AllocMemBlocksList
	if (LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks-2 || LIST_SIZE(&(FreeMemBlocksList)) != numOfFreeBlocks_BF-1 || LIST_SIZE(&(AllocMemBlocksList)) != 0)
f010f7f6:	a1 64 26 78 f0       	mov    0xf0782664,%eax
f010f7fb:	8b 55 e0             	mov    -0x20(%ebp),%edx
f010f7fe:	83 ea 02             	sub    $0x2,%edx
f010f801:	39 d0                	cmp    %edx,%eax
f010f803:	75 13                	jne    f010f818 <test_alloc_block_BF+0x4d1>
f010f805:	a1 30 26 78 f0       	mov    0xf0782630,%eax
f010f80a:	83 f8 06             	cmp    $0x6,%eax
f010f80d:	75 09                	jne    f010f818 <test_alloc_block_BF+0x4d1>
f010f80f:	a1 94 25 78 f0       	mov    0xf0782594,%eax
f010f814:	85 c0                	test   %eax,%eax
f010f816:	74 17                	je     f010f82f <test_alloc_block_BF+0x4e8>
		panic("alloc_block_BF: Wrong sizes for AvailableMemBlocksList, FreeMemBlocksList and AllocMemBlocksList.");
f010f818:	83 ec 04             	sub    $0x4,%esp
f010f81b:	68 38 85 13 f0       	push   $0xf0138538
f010f820:	68 a0 01 00 00       	push   $0x1a0
f010f825:	68 14 7d 13 f0       	push   $0xf0137d14
f010f82a:	e8 d6 09 ff ff       	call   f0100205 <_panic>

	//Check FreeMemBlocksList content
	size = 0;
f010f82f:	c7 85 28 ff ff ff 00 	movl   $0x0,-0xd8(%ebp)
f010f836:	00 00 00 
	actualSize = numOfFreeBlocks_BF-1;
f010f839:	c7 45 d8 06 00 00 00 	movl   $0x6,-0x28(%ebp)
	BlocksSVAs[4] = 0x19C00;  //100KB + 3KB
f010f840:	c7 45 c8 00 9c 01 00 	movl   $0x19c00,-0x38(%ebp)
	BlocksSizes[4] = 1*kilo;
f010f847:	c7 45 ac 00 04 00 00 	movl   $0x400,-0x54(%ebp)
	chk = check_list_data(&FreeMemBlocksList, BlocksSVAs, BlocksSizes, &size, actualSize);
f010f84e:	83 ec 0c             	sub    $0xc,%esp
f010f851:	ff 75 d8             	pushl  -0x28(%ebp)
f010f854:	8d 85 28 ff ff ff    	lea    -0xd8(%ebp),%eax
f010f85a:	50                   	push   %eax
f010f85b:	8d 45 9c             	lea    -0x64(%ebp),%eax
f010f85e:	50                   	push   %eax
f010f85f:	8d 45 b8             	lea    -0x48(%ebp),%eax
f010f862:	50                   	push   %eax
f010f863:	68 24 26 78 f0       	push   $0xf0782624
f010f868:	e8 d3 15 00 00       	call   f0110e40 <check_list_data>
f010f86d:	83 c4 20             	add    $0x20,%esp
f010f870:	89 45 d4             	mov    %eax,-0x2c(%ebp)
	if(chk != 1) panic("alloc_block_BF: WRONG BF ALLOC .. FreeMemBlocksList content is not correct.");
f010f873:	83 7d d4 01          	cmpl   $0x1,-0x2c(%ebp)
f010f877:	74 17                	je     f010f890 <test_alloc_block_BF+0x549>
f010f879:	83 ec 04             	sub    $0x4,%esp
f010f87c:	68 9c 85 13 f0       	push   $0xf013859c
f010f881:	68 a8 01 00 00       	push   $0x1a8
f010f886:	68 14 7d 13 f0       	push   $0xf0137d14
f010f88b:	e8 75 09 ff ff       	call   f0100205 <_panic>
	if(size != actualSize) panic("alloc_block_BF: WRONG BF ALLOC .. FreeMemBlocksList size is not correct.");
f010f890:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f010f896:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f010f899:	74 17                	je     f010f8b2 <test_alloc_block_BF+0x56b>
f010f89b:	83 ec 04             	sub    $0x4,%esp
f010f89e:	68 e8 85 13 f0       	push   $0xf01385e8
f010f8a3:	68 a9 01 00 00       	push   $0x1a9
f010f8a8:	68 14 7d 13 f0       	push   $0xf0137d14
f010f8ad:	e8 53 09 ff ff       	call   f0100205 <_panic>

	//====================================================================//
	/*BF ALLOC Scenario 5: Try to allocate a block @ the head of the free block list */
	blockToAlloc = alloc_block_BF(2*kilo);
f010f8b2:	83 ec 0c             	sub    $0xc,%esp
f010f8b5:	68 00 08 00 00       	push   $0x800
f010f8ba:	e8 2c 2a 02 00       	call   f01322eb <alloc_block_BF>
f010f8bf:	83 c4 10             	add    $0x10,%esp
f010f8c2:	89 45 dc             	mov    %eax,-0x24(%ebp)

	//Check returned block content
	if(blockToAlloc == NULL || blockToAlloc->size != 2*kilo || blockToAlloc->sva != 0x0)
f010f8c5:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f010f8c9:	74 17                	je     f010f8e2 <test_alloc_block_BF+0x59b>
f010f8cb:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010f8ce:	8b 40 0c             	mov    0xc(%eax),%eax
f010f8d1:	3d 00 08 00 00       	cmp    $0x800,%eax
f010f8d6:	75 0a                	jne    f010f8e2 <test_alloc_block_BF+0x59b>
f010f8d8:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010f8db:	8b 40 08             	mov    0x8(%eax),%eax
f010f8de:	85 c0                	test   %eax,%eax
f010f8e0:	74 17                	je     f010f8f9 <test_alloc_block_BF+0x5b2>
		panic("alloc_block_BF: WRONG BF ALLOC - alloc_block_BF find a wrong block.");
f010f8e2:	83 ec 04             	sub    $0x4,%esp
f010f8e5:	68 f4 84 13 f0       	push   $0xf01384f4
f010f8ea:	68 b1 01 00 00       	push   $0x1b1
f010f8ef:	68 14 7d 13 f0       	push   $0xf0137d14
f010f8f4:	e8 0c 09 ff ff       	call   f0100205 <_panic>

	//Check size of AvailableMemBlocksList, FreeMemBlocksList & AllocMemBlocksList
	if (LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks-2 || LIST_SIZE(&(FreeMemBlocksList)) != numOfFreeBlocks_BF-2 || LIST_SIZE(&(AllocMemBlocksList)) != 0)
f010f8f9:	a1 64 26 78 f0       	mov    0xf0782664,%eax
f010f8fe:	8b 55 e0             	mov    -0x20(%ebp),%edx
f010f901:	83 ea 02             	sub    $0x2,%edx
f010f904:	39 d0                	cmp    %edx,%eax
f010f906:	75 13                	jne    f010f91b <test_alloc_block_BF+0x5d4>
f010f908:	a1 30 26 78 f0       	mov    0xf0782630,%eax
f010f90d:	83 f8 05             	cmp    $0x5,%eax
f010f910:	75 09                	jne    f010f91b <test_alloc_block_BF+0x5d4>
f010f912:	a1 94 25 78 f0       	mov    0xf0782594,%eax
f010f917:	85 c0                	test   %eax,%eax
f010f919:	74 17                	je     f010f932 <test_alloc_block_BF+0x5eb>
		panic("alloc_block_BF: Wrong sizes for AvailableMemBlocksList, FreeMemBlocksList and AllocMemBlocksList.");
f010f91b:	83 ec 04             	sub    $0x4,%esp
f010f91e:	68 38 85 13 f0       	push   $0xf0138538
f010f923:	68 b5 01 00 00       	push   $0x1b5
f010f928:	68 14 7d 13 f0       	push   $0xf0137d14
f010f92d:	e8 d3 08 ff ff       	call   f0100205 <_panic>

	//Check FreeMemBlocksList content
	size = 0;
f010f932:	c7 85 28 ff ff ff 00 	movl   $0x0,-0xd8(%ebp)
f010f939:	00 00 00 
	actualSize = numOfFreeBlocks_BF-2;
f010f93c:	c7 45 d8 05 00 00 00 	movl   $0x5,-0x28(%ebp)
	BlocksSVAs[0] = 0x0;
f010f943:	c7 45 b8 00 00 00 00 	movl   $0x0,-0x48(%ebp)
	BlocksSizes[0] = 0;
f010f94a:	c7 45 9c 00 00 00 00 	movl   $0x0,-0x64(%ebp)
	chk = check_list_data(&FreeMemBlocksList, BlocksSVAs, BlocksSizes, &size, actualSize);
f010f951:	83 ec 0c             	sub    $0xc,%esp
f010f954:	ff 75 d8             	pushl  -0x28(%ebp)
f010f957:	8d 85 28 ff ff ff    	lea    -0xd8(%ebp),%eax
f010f95d:	50                   	push   %eax
f010f95e:	8d 45 9c             	lea    -0x64(%ebp),%eax
f010f961:	50                   	push   %eax
f010f962:	8d 45 b8             	lea    -0x48(%ebp),%eax
f010f965:	50                   	push   %eax
f010f966:	68 24 26 78 f0       	push   $0xf0782624
f010f96b:	e8 d0 14 00 00       	call   f0110e40 <check_list_data>
f010f970:	83 c4 20             	add    $0x20,%esp
f010f973:	89 45 d4             	mov    %eax,-0x2c(%ebp)
	if(chk != 1) panic("alloc_block_BF: WRONG BF ALLOC .. FreeMemBlocksList content is not correct.");
f010f976:	83 7d d4 01          	cmpl   $0x1,-0x2c(%ebp)
f010f97a:	74 17                	je     f010f993 <test_alloc_block_BF+0x64c>
f010f97c:	83 ec 04             	sub    $0x4,%esp
f010f97f:	68 9c 85 13 f0       	push   $0xf013859c
f010f984:	68 bd 01 00 00       	push   $0x1bd
f010f989:	68 14 7d 13 f0       	push   $0xf0137d14
f010f98e:	e8 72 08 ff ff       	call   f0100205 <_panic>
	if(size != actualSize) panic("alloc_block_BF: WRONG BF ALLOC .. FreeMemBlocksList size is not correct.");
f010f993:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f010f999:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f010f99c:	74 17                	je     f010f9b5 <test_alloc_block_BF+0x66e>
f010f99e:	83 ec 04             	sub    $0x4,%esp
f010f9a1:	68 e8 85 13 f0       	push   $0xf01385e8
f010f9a6:	68 be 01 00 00       	push   $0x1be
f010f9ab:	68 14 7d 13 f0       	push   $0xf0137d14
f010f9b0:	e8 50 08 ff ff       	call   f0100205 <_panic>

	//====================================================================//
	//show_list_content(&FreeMemBlocksList);
	cprintf("Congratulations!! test alloc_block_BF completed successfully.\n");
f010f9b5:	83 ec 0c             	sub    $0xc,%esp
f010f9b8:	68 34 86 13 f0       	push   $0xf0138634
f010f9bd:	e8 4c 13 ff ff       	call   f0100d0e <cprintf>
f010f9c2:	83 c4 10             	add    $0x10,%esp
}
f010f9c5:	90                   	nop
f010f9c6:	8d 65 f4             	lea    -0xc(%ebp),%esp
f010f9c9:	5b                   	pop    %ebx
f010f9ca:	5e                   	pop    %esi
f010f9cb:	5f                   	pop    %edi
f010f9cc:	5d                   	pop    %ebp
f010f9cd:	c3                   	ret    

f010f9ce <test_alloc_block_NF>:

void test_alloc_block_NF()
{
f010f9ce:	55                   	push   %ebp
f010f9cf:	89 e5                	mov    %esp,%ebp
f010f9d1:	57                   	push   %edi
f010f9d2:	56                   	push   %esi
f010f9d3:	53                   	push   %ebx
f010f9d4:	81 ec ec 00 00 00    	sub    $0xec,%esp
	uint32 numOfBlocks = 10;
f010f9da:	c7 45 e0 0a 00 00 00 	movl   $0xa,-0x20(%ebp)
	initialize_MemBlocksList(numOfBlocks);
f010f9e1:	83 ec 0c             	sub    $0xc,%esp
f010f9e4:	ff 75 e0             	pushl  -0x20(%ebp)
f010f9e7:	e8 70 23 02 00       	call   f0131d5c <initialize_MemBlocksList>
f010f9ec:	83 c4 10             	add    $0x10,%esp
	LIST_INIT(&AllocMemBlocksList);
f010f9ef:	c7 05 88 25 78 f0 00 	movl   $0x0,0xf0782588
f010f9f6:	00 00 00 
f010f9f9:	c7 05 8c 25 78 f0 00 	movl   $0x0,0xf078258c
f010fa00:	00 00 00 
f010fa03:	c7 05 94 25 78 f0 00 	movl   $0x0,0xf0782594
f010fa0a:	00 00 00 

	//Fill AllocMemBlocksList with multiple blocks
	#define numOfFreeBlocks_NF 8
	uint32 BlocksSVAs[numOfFreeBlocks_NF] = {0x0, 0x2000, 0x4000, 0x7000, 0x19000, 0x1A400, 0x21B400, 0x31B400}; //0KB, 8KB, 16KB, 28KB, 100KB, 105KB, 2,157KB, 3,181KB
f010fa0d:	8d 45 b4             	lea    -0x4c(%ebp),%eax
f010fa10:	bb 40 84 13 f0       	mov    $0xf0138440,%ebx
f010fa15:	ba 08 00 00 00       	mov    $0x8,%edx
f010fa1a:	89 c7                	mov    %eax,%edi
f010fa1c:	89 de                	mov    %ebx,%esi
f010fa1e:	89 d1                	mov    %edx,%ecx
f010fa20:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
	uint32 BlocksSizes[numOfFreeBlocks_NF] = {3*kilo, 8*kilo, 1*kilo, 10*kilo, 4*kilo, 2*Mega, 1*Mega, 1*kilo} ;
f010fa22:	8d 45 94             	lea    -0x6c(%ebp),%eax
f010fa25:	bb a0 88 13 f0       	mov    $0xf01388a0,%ebx
f010fa2a:	ba 08 00 00 00       	mov    $0x8,%edx
f010fa2f:	89 c7                	mov    %eax,%edi
f010fa31:	89 de                	mov    %ebx,%esi
f010fa33:	89 d1                	mov    %edx,%ecx
f010fa35:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)

	LIST_INIT(&FreeMemBlocksList);
f010fa37:	c7 05 24 26 78 f0 00 	movl   $0x0,0xf0782624
f010fa3e:	00 00 00 
f010fa41:	c7 05 28 26 78 f0 00 	movl   $0x0,0xf0782628
f010fa48:	00 00 00 
f010fa4b:	c7 05 30 26 78 f0 00 	movl   $0x0,0xf0782630
f010fa52:	00 00 00 
	struct MemBlock freeBlocks[numOfFreeBlocks_NF];
	for (int i = 0; i < numOfFreeBlocks_NF; ++i)
f010fa55:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
f010fa5c:	e9 5f 01 00 00       	jmp    f010fbc0 <test_alloc_block_NF+0x1f2>
	{
		freeBlocks[i].sva = BlocksSVAs[i];
f010fa61:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010fa64:	8b 44 85 b4          	mov    -0x4c(%ebp,%eax,4),%eax
f010fa68:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010fa6b:	c1 e2 04             	shl    $0x4,%edx
f010fa6e:	8d 5d e8             	lea    -0x18(%ebp),%ebx
f010fa71:	01 da                	add    %ebx,%edx
f010fa73:	81 ea cc 00 00 00    	sub    $0xcc,%edx
f010fa79:	89 02                	mov    %eax,(%edx)
		freeBlocks[i].size = BlocksSizes[i];
f010fa7b:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010fa7e:	8b 44 85 94          	mov    -0x6c(%ebp,%eax,4),%eax
f010fa82:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010fa85:	c1 e2 04             	shl    $0x4,%edx
f010fa88:	8d 75 e8             	lea    -0x18(%ebp),%esi
f010fa8b:	01 f2                	add    %esi,%edx
f010fa8d:	81 ea c8 00 00 00    	sub    $0xc8,%edx
f010fa93:	89 02                	mov    %eax,(%edx)
		if (i == 0)
f010fa95:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f010fa99:	0f 85 92 00 00 00    	jne    f010fb31 <test_alloc_block_NF+0x163>
			LIST_INSERT_HEAD(&FreeMemBlocksList, &(freeBlocks[i]));
f010fa9f:	a1 24 26 78 f0       	mov    0xf0782624,%eax
f010faa4:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010faa7:	c1 e2 04             	shl    $0x4,%edx
f010faaa:	8d 7d e8             	lea    -0x18(%ebp),%edi
f010faad:	01 fa                	add    %edi,%edx
f010faaf:	81 ea d4 00 00 00    	sub    $0xd4,%edx
f010fab5:	89 02                	mov    %eax,(%edx)
f010fab7:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010faba:	c1 e0 04             	shl    $0x4,%eax
f010fabd:	8d 5d e8             	lea    -0x18(%ebp),%ebx
f010fac0:	01 d8                	add    %ebx,%eax
f010fac2:	2d d4 00 00 00       	sub    $0xd4,%eax
f010fac7:	8b 00                	mov    (%eax),%eax
f010fac9:	85 c0                	test   %eax,%eax
f010facb:	74 18                	je     f010fae5 <test_alloc_block_NF+0x117>
f010facd:	a1 24 26 78 f0       	mov    0xf0782624,%eax
f010fad2:	8d 95 14 ff ff ff    	lea    -0xec(%ebp),%edx
f010fad8:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
f010fadb:	c1 e1 04             	shl    $0x4,%ecx
f010fade:	01 ca                	add    %ecx,%edx
f010fae0:	89 50 04             	mov    %edx,0x4(%eax)
f010fae3:	eb 13                	jmp    f010faf8 <test_alloc_block_NF+0x12a>
f010fae5:	8d 85 14 ff ff ff    	lea    -0xec(%ebp),%eax
f010faeb:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010faee:	c1 e2 04             	shl    $0x4,%edx
f010faf1:	01 d0                	add    %edx,%eax
f010faf3:	a3 28 26 78 f0       	mov    %eax,0xf0782628
f010faf8:	8d 85 14 ff ff ff    	lea    -0xec(%ebp),%eax
f010fafe:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010fb01:	c1 e2 04             	shl    $0x4,%edx
f010fb04:	01 d0                	add    %edx,%eax
f010fb06:	a3 24 26 78 f0       	mov    %eax,0xf0782624
f010fb0b:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010fb0e:	c1 e0 04             	shl    $0x4,%eax
f010fb11:	8d 75 e8             	lea    -0x18(%ebp),%esi
f010fb14:	01 f0                	add    %esi,%eax
f010fb16:	2d d0 00 00 00       	sub    $0xd0,%eax
f010fb1b:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f010fb21:	a1 30 26 78 f0       	mov    0xf0782630,%eax
f010fb26:	40                   	inc    %eax
f010fb27:	a3 30 26 78 f0       	mov    %eax,0xf0782630
f010fb2c:	e9 8c 00 00 00       	jmp    f010fbbd <test_alloc_block_NF+0x1ef>
		else
			LIST_INSERT_TAIL(&FreeMemBlocksList, &(freeBlocks[i]));
f010fb31:	a1 28 26 78 f0       	mov    0xf0782628,%eax
f010fb36:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010fb39:	c1 e2 04             	shl    $0x4,%edx
f010fb3c:	8d 7d e8             	lea    -0x18(%ebp),%edi
f010fb3f:	01 fa                	add    %edi,%edx
f010fb41:	81 ea d0 00 00 00    	sub    $0xd0,%edx
f010fb47:	89 02                	mov    %eax,(%edx)
f010fb49:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010fb4c:	c1 e0 04             	shl    $0x4,%eax
f010fb4f:	8d 5d e8             	lea    -0x18(%ebp),%ebx
f010fb52:	01 d8                	add    %ebx,%eax
f010fb54:	2d d0 00 00 00       	sub    $0xd0,%eax
f010fb59:	8b 00                	mov    (%eax),%eax
f010fb5b:	85 c0                	test   %eax,%eax
f010fb5d:	74 17                	je     f010fb76 <test_alloc_block_NF+0x1a8>
f010fb5f:	a1 28 26 78 f0       	mov    0xf0782628,%eax
f010fb64:	8d 95 14 ff ff ff    	lea    -0xec(%ebp),%edx
f010fb6a:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
f010fb6d:	c1 e1 04             	shl    $0x4,%ecx
f010fb70:	01 ca                	add    %ecx,%edx
f010fb72:	89 10                	mov    %edx,(%eax)
f010fb74:	eb 13                	jmp    f010fb89 <test_alloc_block_NF+0x1bb>
f010fb76:	8d 85 14 ff ff ff    	lea    -0xec(%ebp),%eax
f010fb7c:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010fb7f:	c1 e2 04             	shl    $0x4,%edx
f010fb82:	01 d0                	add    %edx,%eax
f010fb84:	a3 24 26 78 f0       	mov    %eax,0xf0782624
f010fb89:	8d 85 14 ff ff ff    	lea    -0xec(%ebp),%eax
f010fb8f:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010fb92:	c1 e2 04             	shl    $0x4,%edx
f010fb95:	01 d0                	add    %edx,%eax
f010fb97:	a3 28 26 78 f0       	mov    %eax,0xf0782628
f010fb9c:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010fb9f:	c1 e0 04             	shl    $0x4,%eax
f010fba2:	8d 75 e8             	lea    -0x18(%ebp),%esi
f010fba5:	01 f0                	add    %esi,%eax
f010fba7:	2d d4 00 00 00       	sub    $0xd4,%eax
f010fbac:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f010fbb2:	a1 30 26 78 f0       	mov    0xf0782630,%eax
f010fbb7:	40                   	inc    %eax
f010fbb8:	a3 30 26 78 f0       	mov    %eax,0xf0782630
	uint32 BlocksSVAs[numOfFreeBlocks_NF] = {0x0, 0x2000, 0x4000, 0x7000, 0x19000, 0x1A400, 0x21B400, 0x31B400}; //0KB, 8KB, 16KB, 28KB, 100KB, 105KB, 2,157KB, 3,181KB
	uint32 BlocksSizes[numOfFreeBlocks_NF] = {3*kilo, 8*kilo, 1*kilo, 10*kilo, 4*kilo, 2*Mega, 1*Mega, 1*kilo} ;

	LIST_INIT(&FreeMemBlocksList);
	struct MemBlock freeBlocks[numOfFreeBlocks_NF];
	for (int i = 0; i < numOfFreeBlocks_NF; ++i)
f010fbbd:	ff 45 e4             	incl   -0x1c(%ebp)
f010fbc0:	83 7d e4 07          	cmpl   $0x7,-0x1c(%ebp)
f010fbc4:	0f 8e 97 fe ff ff    	jle    f010fa61 <test_alloc_block_NF+0x93>
			LIST_INSERT_TAIL(&FreeMemBlocksList, &(freeBlocks[i]));
	}

	//====================================================================//
	/*NF ALLOC Scenario 1: Try to allocate a block with a size greater than the size of any existing free block*/
	struct MemBlock * blockToAlloc = alloc_block_NF(10*Mega);
f010fbca:	83 ec 0c             	sub    $0xc,%esp
f010fbcd:	68 00 00 a0 00       	push   $0xa00000
f010fbd2:	e8 25 29 02 00       	call   f01324fc <alloc_block_NF>
f010fbd7:	83 c4 10             	add    $0x10,%esp
f010fbda:	89 45 dc             	mov    %eax,-0x24(%ebp)

	//Check returned block content
	if(blockToAlloc != NULL) panic("alloc_block_NF: WRONG NF ALLOC - alloc_block_NF find a block instead no existing free blocks with the given size.");
f010fbdd:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f010fbe1:	74 17                	je     f010fbfa <test_alloc_block_NF+0x22c>
f010fbe3:	83 ec 04             	sub    $0x4,%esp
f010fbe6:	68 ac 86 13 f0       	push   $0xf01386ac
f010fbeb:	68 e1 01 00 00       	push   $0x1e1
f010fbf0:	68 14 7d 13 f0       	push   $0xf0137d14
f010fbf5:	e8 0b 06 ff ff       	call   f0100205 <_panic>

	//Check size of AvailableMemBlocksList, FreeMemBlocksList & AllocMemBlocksList
	if (LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks || LIST_SIZE(&(FreeMemBlocksList)) != numOfFreeBlocks_NF || LIST_SIZE(&(AllocMemBlocksList)) != 0)
f010fbfa:	a1 64 26 78 f0       	mov    0xf0782664,%eax
f010fbff:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f010fc02:	75 13                	jne    f010fc17 <test_alloc_block_NF+0x249>
f010fc04:	a1 30 26 78 f0       	mov    0xf0782630,%eax
f010fc09:	83 f8 08             	cmp    $0x8,%eax
f010fc0c:	75 09                	jne    f010fc17 <test_alloc_block_NF+0x249>
f010fc0e:	a1 94 25 78 f0       	mov    0xf0782594,%eax
f010fc13:	85 c0                	test   %eax,%eax
f010fc15:	74 17                	je     f010fc2e <test_alloc_block_NF+0x260>
		panic("find_block: AvailableMemBlocksList, FreeMemBlocksList & AllocMemBlocksList are affected and this shall not occurred.");
f010fc17:	83 ec 04             	sub    $0x4,%esp
f010fc1a:	68 40 82 13 f0       	push   $0xf0138240
f010fc1f:	68 e5 01 00 00       	push   $0x1e5
f010fc24:	68 14 7d 13 f0       	push   $0xf0137d14
f010fc29:	e8 d7 05 ff ff       	call   f0100205 <_panic>

	//====================================================================//
	/*NF ALLOC Scenario 2: Try to allocate a block with a size equal to the size of the one existing free blocks (STARTING from 0)*/
	blockToAlloc = alloc_block_NF(10*kilo);
f010fc2e:	83 ec 0c             	sub    $0xc,%esp
f010fc31:	68 00 28 00 00       	push   $0x2800
f010fc36:	e8 c1 28 02 00       	call   f01324fc <alloc_block_NF>
f010fc3b:	83 c4 10             	add    $0x10,%esp
f010fc3e:	89 45 dc             	mov    %eax,-0x24(%ebp)

	//Check returned block content
	if(blockToAlloc == NULL || blockToAlloc->size != 10*kilo || blockToAlloc->sva != 0x7000)
f010fc41:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f010fc45:	74 1a                	je     f010fc61 <test_alloc_block_NF+0x293>
f010fc47:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010fc4a:	8b 40 0c             	mov    0xc(%eax),%eax
f010fc4d:	3d 00 28 00 00       	cmp    $0x2800,%eax
f010fc52:	75 0d                	jne    f010fc61 <test_alloc_block_NF+0x293>
f010fc54:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010fc57:	8b 40 08             	mov    0x8(%eax),%eax
f010fc5a:	3d 00 70 00 00       	cmp    $0x7000,%eax
f010fc5f:	74 17                	je     f010fc78 <test_alloc_block_NF+0x2aa>
		panic("alloc_block_NF: WRONG NF ALLOC - alloc_block_NF find a wrong block.");
f010fc61:	83 ec 04             	sub    $0x4,%esp
f010fc64:	68 20 87 13 f0       	push   $0xf0138720
f010fc69:	68 ed 01 00 00       	push   $0x1ed
f010fc6e:	68 14 7d 13 f0       	push   $0xf0137d14
f010fc73:	e8 8d 05 ff ff       	call   f0100205 <_panic>

	//Check size of AvailableMemBlocksList, FreeMemBlocksList & AllocMemBlocksList
	if (LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks || LIST_SIZE(&(FreeMemBlocksList)) != numOfFreeBlocks_NF-1 || LIST_SIZE(&(AllocMemBlocksList)) != 0)
f010fc78:	a1 64 26 78 f0       	mov    0xf0782664,%eax
f010fc7d:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f010fc80:	75 13                	jne    f010fc95 <test_alloc_block_NF+0x2c7>
f010fc82:	a1 30 26 78 f0       	mov    0xf0782630,%eax
f010fc87:	83 f8 07             	cmp    $0x7,%eax
f010fc8a:	75 09                	jne    f010fc95 <test_alloc_block_NF+0x2c7>
f010fc8c:	a1 94 25 78 f0       	mov    0xf0782594,%eax
f010fc91:	85 c0                	test   %eax,%eax
f010fc93:	74 17                	je     f010fcac <test_alloc_block_NF+0x2de>
		panic("alloc_block_NF: Wrong sizes for AvailableMemBlocksList, FreeMemBlocksList and AllocMemBlocksList.");
f010fc95:	83 ec 04             	sub    $0x4,%esp
f010fc98:	68 64 87 13 f0       	push   $0xf0138764
f010fc9d:	68 f1 01 00 00       	push   $0x1f1
f010fca2:	68 14 7d 13 f0       	push   $0xf0137d14
f010fca7:	e8 59 05 ff ff       	call   f0100205 <_panic>

	//Check FreeMemBlocksList content
	uint32 size = 0;
f010fcac:	c7 85 10 ff ff ff 00 	movl   $0x0,-0xf0(%ebp)
f010fcb3:	00 00 00 
	uint32 actualSize = numOfFreeBlocks_NF-1;
f010fcb6:	c7 45 d8 07 00 00 00 	movl   $0x7,-0x28(%ebp)
	BlocksSVAs[3] = 0;
f010fcbd:	c7 45 c0 00 00 00 00 	movl   $0x0,-0x40(%ebp)
	BlocksSizes[3] = 0;
f010fcc4:	c7 45 a0 00 00 00 00 	movl   $0x0,-0x60(%ebp)
	int chk = check_list_data(&FreeMemBlocksList, BlocksSVAs, BlocksSizes, &size, actualSize);
f010fccb:	83 ec 0c             	sub    $0xc,%esp
f010fcce:	ff 75 d8             	pushl  -0x28(%ebp)
f010fcd1:	8d 85 10 ff ff ff    	lea    -0xf0(%ebp),%eax
f010fcd7:	50                   	push   %eax
f010fcd8:	8d 45 94             	lea    -0x6c(%ebp),%eax
f010fcdb:	50                   	push   %eax
f010fcdc:	8d 45 b4             	lea    -0x4c(%ebp),%eax
f010fcdf:	50                   	push   %eax
f010fce0:	68 24 26 78 f0       	push   $0xf0782624
f010fce5:	e8 56 11 00 00       	call   f0110e40 <check_list_data>
f010fcea:	83 c4 20             	add    $0x20,%esp
f010fced:	89 45 d4             	mov    %eax,-0x2c(%ebp)
	if(chk != 1) panic("alloc_block_NF: WRONG NF ALLOC .. FreeMemBlocksList content is not correct.");
f010fcf0:	83 7d d4 01          	cmpl   $0x1,-0x2c(%ebp)
f010fcf4:	74 17                	je     f010fd0d <test_alloc_block_NF+0x33f>
f010fcf6:	83 ec 04             	sub    $0x4,%esp
f010fcf9:	68 c8 87 13 f0       	push   $0xf01387c8
f010fcfe:	68 f9 01 00 00       	push   $0x1f9
f010fd03:	68 14 7d 13 f0       	push   $0xf0137d14
f010fd08:	e8 f8 04 ff ff       	call   f0100205 <_panic>
	if(size != actualSize) panic("alloc_block_NF: WRONG NF ALLOC .. FreeMemBlocksList size is not correct.");
f010fd0d:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f010fd13:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f010fd16:	74 17                	je     f010fd2f <test_alloc_block_NF+0x361>
f010fd18:	83 ec 04             	sub    $0x4,%esp
f010fd1b:	68 14 88 13 f0       	push   $0xf0138814
f010fd20:	68 fa 01 00 00       	push   $0x1fa
f010fd25:	68 14 7d 13 f0       	push   $0xf0137d14
f010fd2a:	e8 d6 04 ff ff       	call   f0100205 <_panic>

	//====================================================================//
	/*NF ALLOC Scenario 3: Try to allocate a block with a size equal to the size of the one existing free blocks (The first one fit after the last allocated VA)*/
	// Now, lastAllocVA shall EQUAL to 0x7000
	blockToAlloc = alloc_block_NF(2*Mega);
f010fd2f:	83 ec 0c             	sub    $0xc,%esp
f010fd32:	68 00 00 20 00       	push   $0x200000
f010fd37:	e8 c0 27 02 00       	call   f01324fc <alloc_block_NF>
f010fd3c:	83 c4 10             	add    $0x10,%esp
f010fd3f:	89 45 dc             	mov    %eax,-0x24(%ebp)

	//Check returned block content
	if(blockToAlloc == NULL || blockToAlloc->size != 2*Mega || blockToAlloc->sva != 0x1A400)
f010fd42:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f010fd46:	74 1a                	je     f010fd62 <test_alloc_block_NF+0x394>
f010fd48:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010fd4b:	8b 40 0c             	mov    0xc(%eax),%eax
f010fd4e:	3d 00 00 20 00       	cmp    $0x200000,%eax
f010fd53:	75 0d                	jne    f010fd62 <test_alloc_block_NF+0x394>
f010fd55:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010fd58:	8b 40 08             	mov    0x8(%eax),%eax
f010fd5b:	3d 00 a4 01 00       	cmp    $0x1a400,%eax
f010fd60:	74 17                	je     f010fd79 <test_alloc_block_NF+0x3ab>
		panic("alloc_block_NF: WRONG NF ALLOC - alloc_block_NF find a wrong block.");
f010fd62:	83 ec 04             	sub    $0x4,%esp
f010fd65:	68 20 87 13 f0       	push   $0xf0138720
f010fd6a:	68 03 02 00 00       	push   $0x203
f010fd6f:	68 14 7d 13 f0       	push   $0xf0137d14
f010fd74:	e8 8c 04 ff ff       	call   f0100205 <_panic>

	//Check size of AvailableMemBlocksList, FreeMemBlocksList & AllocMemBlocksList
	if (LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks || LIST_SIZE(&(FreeMemBlocksList)) != numOfFreeBlocks_NF-2 || LIST_SIZE(&(AllocMemBlocksList)) != 0)
f010fd79:	a1 64 26 78 f0       	mov    0xf0782664,%eax
f010fd7e:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f010fd81:	75 13                	jne    f010fd96 <test_alloc_block_NF+0x3c8>
f010fd83:	a1 30 26 78 f0       	mov    0xf0782630,%eax
f010fd88:	83 f8 06             	cmp    $0x6,%eax
f010fd8b:	75 09                	jne    f010fd96 <test_alloc_block_NF+0x3c8>
f010fd8d:	a1 94 25 78 f0       	mov    0xf0782594,%eax
f010fd92:	85 c0                	test   %eax,%eax
f010fd94:	74 17                	je     f010fdad <test_alloc_block_NF+0x3df>
		panic("alloc_block_NF: Wrong sizes for AvailableMemBlocksList, FreeMemBlocksList and AllocMemBlocksList.");
f010fd96:	83 ec 04             	sub    $0x4,%esp
f010fd99:	68 64 87 13 f0       	push   $0xf0138764
f010fd9e:	68 07 02 00 00       	push   $0x207
f010fda3:	68 14 7d 13 f0       	push   $0xf0137d14
f010fda8:	e8 58 04 ff ff       	call   f0100205 <_panic>

	//Check FreeMemBlocksList content
	size = 0;
f010fdad:	c7 85 10 ff ff ff 00 	movl   $0x0,-0xf0(%ebp)
f010fdb4:	00 00 00 
	actualSize = numOfFreeBlocks_NF-2;
f010fdb7:	c7 45 d8 06 00 00 00 	movl   $0x6,-0x28(%ebp)
	BlocksSVAs[5] = 0;
f010fdbe:	c7 45 c8 00 00 00 00 	movl   $0x0,-0x38(%ebp)
	BlocksSizes[5] = 0;
f010fdc5:	c7 45 a8 00 00 00 00 	movl   $0x0,-0x58(%ebp)
	chk = check_list_data(&FreeMemBlocksList, BlocksSVAs, BlocksSizes, &size, actualSize);
f010fdcc:	83 ec 0c             	sub    $0xc,%esp
f010fdcf:	ff 75 d8             	pushl  -0x28(%ebp)
f010fdd2:	8d 85 10 ff ff ff    	lea    -0xf0(%ebp),%eax
f010fdd8:	50                   	push   %eax
f010fdd9:	8d 45 94             	lea    -0x6c(%ebp),%eax
f010fddc:	50                   	push   %eax
f010fddd:	8d 45 b4             	lea    -0x4c(%ebp),%eax
f010fde0:	50                   	push   %eax
f010fde1:	68 24 26 78 f0       	push   $0xf0782624
f010fde6:	e8 55 10 00 00       	call   f0110e40 <check_list_data>
f010fdeb:	83 c4 20             	add    $0x20,%esp
f010fdee:	89 45 d4             	mov    %eax,-0x2c(%ebp)
	if(chk != 1) panic("alloc_block_NF: WRONG NF ALLOC .. FreeMemBlocksList content is not correct.");
f010fdf1:	83 7d d4 01          	cmpl   $0x1,-0x2c(%ebp)
f010fdf5:	74 17                	je     f010fe0e <test_alloc_block_NF+0x440>
f010fdf7:	83 ec 04             	sub    $0x4,%esp
f010fdfa:	68 c8 87 13 f0       	push   $0xf01387c8
f010fdff:	68 0f 02 00 00       	push   $0x20f
f010fe04:	68 14 7d 13 f0       	push   $0xf0137d14
f010fe09:	e8 f7 03 ff ff       	call   f0100205 <_panic>
	if(size != actualSize) panic("alloc_block_NF: WRONG NF ALLOC .. FreeMemBlocksList size is not correct.");
f010fe0e:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f010fe14:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f010fe17:	74 17                	je     f010fe30 <test_alloc_block_NF+0x462>
f010fe19:	83 ec 04             	sub    $0x4,%esp
f010fe1c:	68 14 88 13 f0       	push   $0xf0138814
f010fe21:	68 10 02 00 00       	push   $0x210
f010fe26:	68 14 7d 13 f0       	push   $0xf0137d14
f010fe2b:	e8 d5 03 ff ff       	call   f0100205 <_panic>

	//====================================================================//
	/*NF ALLOC Scenario 4: Try to allocate a block with a size smaller than the size of any existing free block (The first one fit after the last allocated VA)*/
	// Now, lastAllocVA shall EQUAL to 0x7000
	blockToAlloc = alloc_block_NF(512*kilo);
f010fe30:	83 ec 0c             	sub    $0xc,%esp
f010fe33:	68 00 00 08 00       	push   $0x80000
f010fe38:	e8 bf 26 02 00       	call   f01324fc <alloc_block_NF>
f010fe3d:	83 c4 10             	add    $0x10,%esp
f010fe40:	89 45 dc             	mov    %eax,-0x24(%ebp)

	//Check returned block content
	if(blockToAlloc == NULL || blockToAlloc->size != 512*kilo || blockToAlloc->sva != 0x21B400)
f010fe43:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f010fe47:	74 1a                	je     f010fe63 <test_alloc_block_NF+0x495>
f010fe49:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010fe4c:	8b 40 0c             	mov    0xc(%eax),%eax
f010fe4f:	3d 00 00 08 00       	cmp    $0x80000,%eax
f010fe54:	75 0d                	jne    f010fe63 <test_alloc_block_NF+0x495>
f010fe56:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010fe59:	8b 40 08             	mov    0x8(%eax),%eax
f010fe5c:	3d 00 b4 21 00       	cmp    $0x21b400,%eax
f010fe61:	74 17                	je     f010fe7a <test_alloc_block_NF+0x4ac>
		panic("alloc_block_NF: WRONG NF ALLOC - alloc_block_NF find a wrong block.");
f010fe63:	83 ec 04             	sub    $0x4,%esp
f010fe66:	68 20 87 13 f0       	push   $0xf0138720
f010fe6b:	68 19 02 00 00       	push   $0x219
f010fe70:	68 14 7d 13 f0       	push   $0xf0137d14
f010fe75:	e8 8b 03 ff ff       	call   f0100205 <_panic>

	//Check size of AvailableMemBlocksList, FreeMemBlocksList & AllocMemBlocksList
	if (LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks-1 || LIST_SIZE(&(FreeMemBlocksList)) != numOfFreeBlocks_NF-2 || LIST_SIZE(&(AllocMemBlocksList)) != 0)
f010fe7a:	a1 64 26 78 f0       	mov    0xf0782664,%eax
f010fe7f:	8b 55 e0             	mov    -0x20(%ebp),%edx
f010fe82:	4a                   	dec    %edx
f010fe83:	39 d0                	cmp    %edx,%eax
f010fe85:	75 13                	jne    f010fe9a <test_alloc_block_NF+0x4cc>
f010fe87:	a1 30 26 78 f0       	mov    0xf0782630,%eax
f010fe8c:	83 f8 06             	cmp    $0x6,%eax
f010fe8f:	75 09                	jne    f010fe9a <test_alloc_block_NF+0x4cc>
f010fe91:	a1 94 25 78 f0       	mov    0xf0782594,%eax
f010fe96:	85 c0                	test   %eax,%eax
f010fe98:	74 17                	je     f010feb1 <test_alloc_block_NF+0x4e3>
		panic("alloc_block_NF: Wrong sizes for AvailableMemBlocksList, FreeMemBlocksList and AllocMemBlocksList.");
f010fe9a:	83 ec 04             	sub    $0x4,%esp
f010fe9d:	68 64 87 13 f0       	push   $0xf0138764
f010fea2:	68 1d 02 00 00       	push   $0x21d
f010fea7:	68 14 7d 13 f0       	push   $0xf0137d14
f010feac:	e8 54 03 ff ff       	call   f0100205 <_panic>

	//Check FreeMemBlocksList content
	size = 0;
f010feb1:	c7 85 10 ff ff ff 00 	movl   $0x0,-0xf0(%ebp)
f010feb8:	00 00 00 
	actualSize = numOfFreeBlocks_NF-2;
f010febb:	c7 45 d8 06 00 00 00 	movl   $0x6,-0x28(%ebp)
	BlocksSVAs[6] = 0x21B400 + 512*kilo;
f010fec2:	c7 45 cc 00 b4 29 00 	movl   $0x29b400,-0x34(%ebp)
	BlocksSizes[6] = 512*kilo;
f010fec9:	c7 45 ac 00 00 08 00 	movl   $0x80000,-0x54(%ebp)
	chk = check_list_data(&FreeMemBlocksList, BlocksSVAs, BlocksSizes, &size, actualSize);
f010fed0:	83 ec 0c             	sub    $0xc,%esp
f010fed3:	ff 75 d8             	pushl  -0x28(%ebp)
f010fed6:	8d 85 10 ff ff ff    	lea    -0xf0(%ebp),%eax
f010fedc:	50                   	push   %eax
f010fedd:	8d 45 94             	lea    -0x6c(%ebp),%eax
f010fee0:	50                   	push   %eax
f010fee1:	8d 45 b4             	lea    -0x4c(%ebp),%eax
f010fee4:	50                   	push   %eax
f010fee5:	68 24 26 78 f0       	push   $0xf0782624
f010feea:	e8 51 0f 00 00       	call   f0110e40 <check_list_data>
f010feef:	83 c4 20             	add    $0x20,%esp
f010fef2:	89 45 d4             	mov    %eax,-0x2c(%ebp)
	if(chk != 1) panic("alloc_block_NF: WRONG NF ALLOC .. FreeMemBlocksList content is not correct.");
f010fef5:	83 7d d4 01          	cmpl   $0x1,-0x2c(%ebp)
f010fef9:	74 17                	je     f010ff12 <test_alloc_block_NF+0x544>
f010fefb:	83 ec 04             	sub    $0x4,%esp
f010fefe:	68 c8 87 13 f0       	push   $0xf01387c8
f010ff03:	68 25 02 00 00       	push   $0x225
f010ff08:	68 14 7d 13 f0       	push   $0xf0137d14
f010ff0d:	e8 f3 02 ff ff       	call   f0100205 <_panic>
	if(size != actualSize) panic("alloc_block_NF: WRONG NF ALLOC .. FreeMemBlocksList size is not correct.");
f010ff12:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f010ff18:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f010ff1b:	74 17                	je     f010ff34 <test_alloc_block_NF+0x566>
f010ff1d:	83 ec 04             	sub    $0x4,%esp
f010ff20:	68 14 88 13 f0       	push   $0xf0138814
f010ff25:	68 26 02 00 00       	push   $0x226
f010ff2a:	68 14 7d 13 f0       	push   $0xf0137d14
f010ff2f:	e8 d1 02 ff ff       	call   f0100205 <_panic>

	//====================================================================//
	/*NF ALLOC Scenario 5: Try to allocate a block with a size smaller than the size of any existing free block (One from the updated blocks before in the free list)*/
	// Now, lastAllocVA shall EQUAL to 0x7000
	blockToAlloc = alloc_block_NF(511*kilo);
f010ff34:	83 ec 0c             	sub    $0xc,%esp
f010ff37:	68 00 fc 07 00       	push   $0x7fc00
f010ff3c:	e8 bb 25 02 00       	call   f01324fc <alloc_block_NF>
f010ff41:	83 c4 10             	add    $0x10,%esp
f010ff44:	89 45 dc             	mov    %eax,-0x24(%ebp)

	//Check returned block content
	if(blockToAlloc == NULL || blockToAlloc->size != 511*kilo || blockToAlloc->sva != (0x21B400 + 512*kilo))
f010ff47:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f010ff4b:	74 1a                	je     f010ff67 <test_alloc_block_NF+0x599>
f010ff4d:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010ff50:	8b 40 0c             	mov    0xc(%eax),%eax
f010ff53:	3d 00 fc 07 00       	cmp    $0x7fc00,%eax
f010ff58:	75 0d                	jne    f010ff67 <test_alloc_block_NF+0x599>
f010ff5a:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010ff5d:	8b 40 08             	mov    0x8(%eax),%eax
f010ff60:	3d 00 b4 29 00       	cmp    $0x29b400,%eax
f010ff65:	74 17                	je     f010ff7e <test_alloc_block_NF+0x5b0>
		panic("alloc_block_NF: WRONG NF ALLOC - alloc_block_NF find a wrong block.");
f010ff67:	83 ec 04             	sub    $0x4,%esp
f010ff6a:	68 20 87 13 f0       	push   $0xf0138720
f010ff6f:	68 2f 02 00 00       	push   $0x22f
f010ff74:	68 14 7d 13 f0       	push   $0xf0137d14
f010ff79:	e8 87 02 ff ff       	call   f0100205 <_panic>

	//Check size of AvailableMemBlocksList, FreeMemBlocksList & AllocMemBlocksList
	if (LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks-2 || LIST_SIZE(&(FreeMemBlocksList)) != numOfFreeBlocks_NF-2 || LIST_SIZE(&(AllocMemBlocksList)) != 0)
f010ff7e:	a1 64 26 78 f0       	mov    0xf0782664,%eax
f010ff83:	8b 55 e0             	mov    -0x20(%ebp),%edx
f010ff86:	83 ea 02             	sub    $0x2,%edx
f010ff89:	39 d0                	cmp    %edx,%eax
f010ff8b:	75 13                	jne    f010ffa0 <test_alloc_block_NF+0x5d2>
f010ff8d:	a1 30 26 78 f0       	mov    0xf0782630,%eax
f010ff92:	83 f8 06             	cmp    $0x6,%eax
f010ff95:	75 09                	jne    f010ffa0 <test_alloc_block_NF+0x5d2>
f010ff97:	a1 94 25 78 f0       	mov    0xf0782594,%eax
f010ff9c:	85 c0                	test   %eax,%eax
f010ff9e:	74 17                	je     f010ffb7 <test_alloc_block_NF+0x5e9>
		panic("alloc_block_NF: Wrong sizes for AvailableMemBlocksList, FreeMemBlocksList and AllocMemBlocksList.");
f010ffa0:	83 ec 04             	sub    $0x4,%esp
f010ffa3:	68 64 87 13 f0       	push   $0xf0138764
f010ffa8:	68 33 02 00 00       	push   $0x233
f010ffad:	68 14 7d 13 f0       	push   $0xf0137d14
f010ffb2:	e8 4e 02 ff ff       	call   f0100205 <_panic>

	//Check FreeMemBlocksList content
	size = 0;
f010ffb7:	c7 85 10 ff ff ff 00 	movl   $0x0,-0xf0(%ebp)
f010ffbe:	00 00 00 
	actualSize = numOfFreeBlocks_NF-2;
f010ffc1:	c7 45 d8 06 00 00 00 	movl   $0x6,-0x28(%ebp)
	BlocksSVAs[6] = 0x21B400 + 512*kilo + (511*kilo);
f010ffc8:	c7 45 cc 00 b0 31 00 	movl   $0x31b000,-0x34(%ebp)
	BlocksSizes[6] = 1*kilo;
f010ffcf:	c7 45 ac 00 04 00 00 	movl   $0x400,-0x54(%ebp)
	chk = check_list_data(&FreeMemBlocksList, BlocksSVAs, BlocksSizes, &size, actualSize);
f010ffd6:	83 ec 0c             	sub    $0xc,%esp
f010ffd9:	ff 75 d8             	pushl  -0x28(%ebp)
f010ffdc:	8d 85 10 ff ff ff    	lea    -0xf0(%ebp),%eax
f010ffe2:	50                   	push   %eax
f010ffe3:	8d 45 94             	lea    -0x6c(%ebp),%eax
f010ffe6:	50                   	push   %eax
f010ffe7:	8d 45 b4             	lea    -0x4c(%ebp),%eax
f010ffea:	50                   	push   %eax
f010ffeb:	68 24 26 78 f0       	push   $0xf0782624
f010fff0:	e8 4b 0e 00 00       	call   f0110e40 <check_list_data>
f010fff5:	83 c4 20             	add    $0x20,%esp
f010fff8:	89 45 d4             	mov    %eax,-0x2c(%ebp)
	if(chk != 1) panic("alloc_block_NF: WRONG NF ALLOC .. FreeMemBlocksList content is not correct.");
f010fffb:	83 7d d4 01          	cmpl   $0x1,-0x2c(%ebp)
f010ffff:	74 17                	je     f0110018 <test_alloc_block_NF+0x64a>
f0110001:	83 ec 04             	sub    $0x4,%esp
f0110004:	68 c8 87 13 f0       	push   $0xf01387c8
f0110009:	68 3b 02 00 00       	push   $0x23b
f011000e:	68 14 7d 13 f0       	push   $0xf0137d14
f0110013:	e8 ed 01 ff ff       	call   f0100205 <_panic>
	if(size != actualSize) panic("alloc_block_NF: WRONG NF ALLOC .. FreeMemBlocksList size is not correct.");
f0110018:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f011001e:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0110021:	74 17                	je     f011003a <test_alloc_block_NF+0x66c>
f0110023:	83 ec 04             	sub    $0x4,%esp
f0110026:	68 14 88 13 f0       	push   $0xf0138814
f011002b:	68 3c 02 00 00       	push   $0x23c
f0110030:	68 14 7d 13 f0       	push   $0xf0137d14
f0110035:	e8 cb 01 ff ff       	call   f0100205 <_panic>

	//====================================================================//
	/*NF ALLOC Scenario 6: Try to allocate a block with a size smaller than ALL the NEXT existing blocks .. Shall start search from the start of the list*/
	// Now, lastAllocVA shall EQUAL to 0x7000
	blockToAlloc = alloc_block_NF(3*kilo);
f011003a:	83 ec 0c             	sub    $0xc,%esp
f011003d:	68 00 0c 00 00       	push   $0xc00
f0110042:	e8 b5 24 02 00       	call   f01324fc <alloc_block_NF>
f0110047:	83 c4 10             	add    $0x10,%esp
f011004a:	89 45 dc             	mov    %eax,-0x24(%ebp)

	//Check returned block content
	if(blockToAlloc == NULL || blockToAlloc->size != 3*kilo || blockToAlloc->sva != 0x0)
f011004d:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f0110051:	74 17                	je     f011006a <test_alloc_block_NF+0x69c>
f0110053:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0110056:	8b 40 0c             	mov    0xc(%eax),%eax
f0110059:	3d 00 0c 00 00       	cmp    $0xc00,%eax
f011005e:	75 0a                	jne    f011006a <test_alloc_block_NF+0x69c>
f0110060:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0110063:	8b 40 08             	mov    0x8(%eax),%eax
f0110066:	85 c0                	test   %eax,%eax
f0110068:	74 17                	je     f0110081 <test_alloc_block_NF+0x6b3>
		panic("alloc_block_NF: WRONG NF ALLOC - alloc_block_NF find a wrong block.");
f011006a:	83 ec 04             	sub    $0x4,%esp
f011006d:	68 20 87 13 f0       	push   $0xf0138720
f0110072:	68 45 02 00 00       	push   $0x245
f0110077:	68 14 7d 13 f0       	push   $0xf0137d14
f011007c:	e8 84 01 ff ff       	call   f0100205 <_panic>

	//Check size of AvailableMemBlocksList, FreeMemBlocksList & AllocMemBlocksList
	if (LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks-2 || LIST_SIZE(&(FreeMemBlocksList)) != numOfFreeBlocks_NF-3 || LIST_SIZE(&(AllocMemBlocksList)) != 0)
f0110081:	a1 64 26 78 f0       	mov    0xf0782664,%eax
f0110086:	8b 55 e0             	mov    -0x20(%ebp),%edx
f0110089:	83 ea 02             	sub    $0x2,%edx
f011008c:	39 d0                	cmp    %edx,%eax
f011008e:	75 13                	jne    f01100a3 <test_alloc_block_NF+0x6d5>
f0110090:	a1 30 26 78 f0       	mov    0xf0782630,%eax
f0110095:	83 f8 05             	cmp    $0x5,%eax
f0110098:	75 09                	jne    f01100a3 <test_alloc_block_NF+0x6d5>
f011009a:	a1 94 25 78 f0       	mov    0xf0782594,%eax
f011009f:	85 c0                	test   %eax,%eax
f01100a1:	74 17                	je     f01100ba <test_alloc_block_NF+0x6ec>
		panic("alloc_block_NF: Wrong sizes for AvailableMemBlocksList, FreeMemBlocksList and AllocMemBlocksList.");
f01100a3:	83 ec 04             	sub    $0x4,%esp
f01100a6:	68 64 87 13 f0       	push   $0xf0138764
f01100ab:	68 49 02 00 00       	push   $0x249
f01100b0:	68 14 7d 13 f0       	push   $0xf0137d14
f01100b5:	e8 4b 01 ff ff       	call   f0100205 <_panic>

	//Check FreeMemBlocksList content
	size = 0;
f01100ba:	c7 85 10 ff ff ff 00 	movl   $0x0,-0xf0(%ebp)
f01100c1:	00 00 00 
	actualSize = numOfFreeBlocks_NF-3;
f01100c4:	c7 45 d8 05 00 00 00 	movl   $0x5,-0x28(%ebp)
	BlocksSVAs[0] = 0;
f01100cb:	c7 45 b4 00 00 00 00 	movl   $0x0,-0x4c(%ebp)
	BlocksSizes[0] = 0;
f01100d2:	c7 45 94 00 00 00 00 	movl   $0x0,-0x6c(%ebp)
	chk = check_list_data(&FreeMemBlocksList, BlocksSVAs, BlocksSizes, &size, actualSize);
f01100d9:	83 ec 0c             	sub    $0xc,%esp
f01100dc:	ff 75 d8             	pushl  -0x28(%ebp)
f01100df:	8d 85 10 ff ff ff    	lea    -0xf0(%ebp),%eax
f01100e5:	50                   	push   %eax
f01100e6:	8d 45 94             	lea    -0x6c(%ebp),%eax
f01100e9:	50                   	push   %eax
f01100ea:	8d 45 b4             	lea    -0x4c(%ebp),%eax
f01100ed:	50                   	push   %eax
f01100ee:	68 24 26 78 f0       	push   $0xf0782624
f01100f3:	e8 48 0d 00 00       	call   f0110e40 <check_list_data>
f01100f8:	83 c4 20             	add    $0x20,%esp
f01100fb:	89 45 d4             	mov    %eax,-0x2c(%ebp)
	if(chk != 1) panic("alloc_block_NF: WRONG NF ALLOC .. FreeMemBlocksList content is not correct.");
f01100fe:	83 7d d4 01          	cmpl   $0x1,-0x2c(%ebp)
f0110102:	74 17                	je     f011011b <test_alloc_block_NF+0x74d>
f0110104:	83 ec 04             	sub    $0x4,%esp
f0110107:	68 c8 87 13 f0       	push   $0xf01387c8
f011010c:	68 51 02 00 00       	push   $0x251
f0110111:	68 14 7d 13 f0       	push   $0xf0137d14
f0110116:	e8 ea 00 ff ff       	call   f0100205 <_panic>
	if(size != actualSize) panic("alloc_block_NF: WRONG NF ALLOC .. FreeMemBlocksList size is not correct.");
f011011b:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f0110121:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0110124:	74 17                	je     f011013d <test_alloc_block_NF+0x76f>
f0110126:	83 ec 04             	sub    $0x4,%esp
f0110129:	68 14 88 13 f0       	push   $0xf0138814
f011012e:	68 52 02 00 00       	push   $0x252
f0110133:	68 14 7d 13 f0       	push   $0xf0137d14
f0110138:	e8 c8 00 ff ff       	call   f0100205 <_panic>

	//====================================================================//
	/*NF ALLOC Scenario 7: Try to allocate a block with a size smaller than the existing blocks .. To try to update head not to remove it*/
	// Now, lastAllocVA shall EQUAL to 0x7000
	blockToAlloc = alloc_block_NF(1*kilo);
f011013d:	83 ec 0c             	sub    $0xc,%esp
f0110140:	68 00 04 00 00       	push   $0x400
f0110145:	e8 b2 23 02 00       	call   f01324fc <alloc_block_NF>
f011014a:	83 c4 10             	add    $0x10,%esp
f011014d:	89 45 dc             	mov    %eax,-0x24(%ebp)

	//Check returned block content
	if(blockToAlloc == NULL || blockToAlloc->size != 1*kilo || blockToAlloc->sva != 0x2000)
f0110150:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f0110154:	74 1a                	je     f0110170 <test_alloc_block_NF+0x7a2>
f0110156:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0110159:	8b 40 0c             	mov    0xc(%eax),%eax
f011015c:	3d 00 04 00 00       	cmp    $0x400,%eax
f0110161:	75 0d                	jne    f0110170 <test_alloc_block_NF+0x7a2>
f0110163:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0110166:	8b 40 08             	mov    0x8(%eax),%eax
f0110169:	3d 00 20 00 00       	cmp    $0x2000,%eax
f011016e:	74 17                	je     f0110187 <test_alloc_block_NF+0x7b9>
		panic("alloc_block_NF: WRONG NF ALLOC - alloc_block_NF find a wrong block.");
f0110170:	83 ec 04             	sub    $0x4,%esp
f0110173:	68 20 87 13 f0       	push   $0xf0138720
f0110178:	68 5b 02 00 00       	push   $0x25b
f011017d:	68 14 7d 13 f0       	push   $0xf0137d14
f0110182:	e8 7e 00 ff ff       	call   f0100205 <_panic>

	//Check size of AvailableMemBlocksList, FreeMemBlocksList & AllocMemBlocksList
	if (LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks-3 || LIST_SIZE(&(FreeMemBlocksList)) != numOfFreeBlocks_NF-3 || LIST_SIZE(&(AllocMemBlocksList)) != 0)
f0110187:	a1 64 26 78 f0       	mov    0xf0782664,%eax
f011018c:	8b 55 e0             	mov    -0x20(%ebp),%edx
f011018f:	83 ea 03             	sub    $0x3,%edx
f0110192:	39 d0                	cmp    %edx,%eax
f0110194:	75 13                	jne    f01101a9 <test_alloc_block_NF+0x7db>
f0110196:	a1 30 26 78 f0       	mov    0xf0782630,%eax
f011019b:	83 f8 05             	cmp    $0x5,%eax
f011019e:	75 09                	jne    f01101a9 <test_alloc_block_NF+0x7db>
f01101a0:	a1 94 25 78 f0       	mov    0xf0782594,%eax
f01101a5:	85 c0                	test   %eax,%eax
f01101a7:	74 17                	je     f01101c0 <test_alloc_block_NF+0x7f2>
		panic("alloc_block_NF: Wrong sizes for AvailableMemBlocksList, FreeMemBlocksList and AllocMemBlocksList.");
f01101a9:	83 ec 04             	sub    $0x4,%esp
f01101ac:	68 64 87 13 f0       	push   $0xf0138764
f01101b1:	68 5f 02 00 00       	push   $0x25f
f01101b6:	68 14 7d 13 f0       	push   $0xf0137d14
f01101bb:	e8 45 00 ff ff       	call   f0100205 <_panic>

	//Check FreeMemBlocksList content
	size = 0;
f01101c0:	c7 85 10 ff ff ff 00 	movl   $0x0,-0xf0(%ebp)
f01101c7:	00 00 00 
	actualSize = numOfFreeBlocks_NF-3;
f01101ca:	c7 45 d8 05 00 00 00 	movl   $0x5,-0x28(%ebp)
	BlocksSVAs[1] = 0x2000 + 1*kilo;
f01101d1:	c7 45 b8 00 24 00 00 	movl   $0x2400,-0x48(%ebp)
	BlocksSizes[1] = 7*kilo;
f01101d8:	c7 45 98 00 1c 00 00 	movl   $0x1c00,-0x68(%ebp)
	chk = check_list_data(&FreeMemBlocksList, BlocksSVAs, BlocksSizes, &size, actualSize);
f01101df:	83 ec 0c             	sub    $0xc,%esp
f01101e2:	ff 75 d8             	pushl  -0x28(%ebp)
f01101e5:	8d 85 10 ff ff ff    	lea    -0xf0(%ebp),%eax
f01101eb:	50                   	push   %eax
f01101ec:	8d 45 94             	lea    -0x6c(%ebp),%eax
f01101ef:	50                   	push   %eax
f01101f0:	8d 45 b4             	lea    -0x4c(%ebp),%eax
f01101f3:	50                   	push   %eax
f01101f4:	68 24 26 78 f0       	push   $0xf0782624
f01101f9:	e8 42 0c 00 00       	call   f0110e40 <check_list_data>
f01101fe:	83 c4 20             	add    $0x20,%esp
f0110201:	89 45 d4             	mov    %eax,-0x2c(%ebp)
	if(chk != 1) panic("alloc_block_NF: WRONG NF ALLOC .. FreeMemBlocksList content is not correct.");
f0110204:	83 7d d4 01          	cmpl   $0x1,-0x2c(%ebp)
f0110208:	74 17                	je     f0110221 <test_alloc_block_NF+0x853>
f011020a:	83 ec 04             	sub    $0x4,%esp
f011020d:	68 c8 87 13 f0       	push   $0xf01387c8
f0110212:	68 67 02 00 00       	push   $0x267
f0110217:	68 14 7d 13 f0       	push   $0xf0137d14
f011021c:	e8 e4 ff fe ff       	call   f0100205 <_panic>
	if(size != actualSize) panic("alloc_block_NF: WRONG NF ALLOC .. FreeMemBlocksList size is not correct.");
f0110221:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f0110227:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011022a:	74 17                	je     f0110243 <test_alloc_block_NF+0x875>
f011022c:	83 ec 04             	sub    $0x4,%esp
f011022f:	68 14 88 13 f0       	push   $0xf0138814
f0110234:	68 68 02 00 00       	push   $0x268
f0110239:	68 14 7d 13 f0       	push   $0xf0137d14
f011023e:	e8 c2 ff fe ff       	call   f0100205 <_panic>

	//====================================================================//
	//show_list_content(&FreeMemBlocksList);
	cprintf("Congratulations!! test alloc_block_NF completed successfully.\n");
f0110243:	83 ec 0c             	sub    $0xc,%esp
f0110246:	68 60 88 13 f0       	push   $0xf0138860
f011024b:	e8 be 0a ff ff       	call   f0100d0e <cprintf>
f0110250:	83 c4 10             	add    $0x10,%esp

}
f0110253:	90                   	nop
f0110254:	8d 65 f4             	lea    -0xc(%ebp),%esp
f0110257:	5b                   	pop    %ebx
f0110258:	5e                   	pop    %esi
f0110259:	5f                   	pop    %edi
f011025a:	5d                   	pop    %ebp
f011025b:	c3                   	ret    

f011025c <test_insert_sorted_with_merge_freeList>:

void test_insert_sorted_with_merge_freeList()
{
f011025c:	55                   	push   %ebp
f011025d:	89 e5                	mov    %esp,%ebp
f011025f:	57                   	push   %edi
f0110260:	81 ec 04 01 00 00    	sub    $0x104,%esp
	uint32 numOfBlocks = 10;
f0110266:	c7 45 f4 0a 00 00 00 	movl   $0xa,-0xc(%ebp)
	initialize_MemBlocksList(numOfBlocks);
f011026d:	83 ec 0c             	sub    $0xc,%esp
f0110270:	ff 75 f4             	pushl  -0xc(%ebp)
f0110273:	e8 e4 1a 02 00       	call   f0131d5c <initialize_MemBlocksList>
f0110278:	83 c4 10             	add    $0x10,%esp
	LIST_INIT(&AllocMemBlocksList);
f011027b:	c7 05 88 25 78 f0 00 	movl   $0x0,0xf0782588
f0110282:	00 00 00 
f0110285:	c7 05 8c 25 78 f0 00 	movl   $0x0,0xf078258c
f011028c:	00 00 00 
f011028f:	c7 05 94 25 78 f0 00 	movl   $0x0,0xf0782594
f0110296:	00 00 00 
	LIST_INIT(&FreeMemBlocksList);
f0110299:	c7 05 24 26 78 f0 00 	movl   $0x0,0xf0782624
f01102a0:	00 00 00 
f01102a3:	c7 05 28 26 78 f0 00 	movl   $0x0,0xf0782628
f01102aa:	00 00 00 
f01102ad:	c7 05 30 26 78 f0 00 	movl   $0x0,0xf0782630
f01102b4:	00 00 00 

	uint32 blocksToInsertSVAs[10]={0,0,0,0,0,0,0,0,0,0};
f01102b7:	8d 55 c0             	lea    -0x40(%ebp),%edx
f01102ba:	b9 0a 00 00 00       	mov    $0xa,%ecx
f01102bf:	b8 00 00 00 00       	mov    $0x0,%eax
f01102c4:	89 d7                	mov    %edx,%edi
f01102c6:	f3 ab                	rep stos %eax,%es:(%edi)
	uint32 blocksToInsertSizes[10]={0,0,0,0,0,0,0,0,0,0};
f01102c8:	8d 55 98             	lea    -0x68(%ebp),%edx
f01102cb:	b9 0a 00 00 00       	mov    $0xa,%ecx
f01102d0:	b8 00 00 00 00       	mov    $0x0,%eax
f01102d5:	89 d7                	mov    %edx,%edi
f01102d7:	f3 ab                	rep stos %eax,%es:(%edi)
	uint32 size = 0;
f01102d9:	c7 45 94 00 00 00 00 	movl   $0x0,-0x6c(%ebp)
	uint32 actualSize = 0;
f01102e0:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)

	/*INSERT_SORTED_WITH MERGE Scenario 1: CASE 0 - Insert BLOCK_1 in the empty FreeMemBlocksList*/
	int idx_blocksToInsert = 3;
f01102e7:	c7 45 ec 03 00 00 00 	movl   $0x3,-0x14(%ebp)
	blocksToInsertSVAs[idx_blocksToInsert] = 8*kilo;
f01102ee:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01102f1:	c7 44 85 c0 00 20 00 	movl   $0x2000,-0x40(%ebp,%eax,4)
f01102f8:	00 
	blocksToInsertSizes[idx_blocksToInsert] = 4*kilo;
f01102f9:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01102fc:	c7 44 85 98 00 10 00 	movl   $0x1000,-0x68(%ebp,%eax,4)
f0110303:	00 
	struct MemBlock blockToInsert1;
	blockToInsert1.sva = blocksToInsertSVAs[idx_blocksToInsert];
f0110304:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110307:	8b 44 85 c0          	mov    -0x40(%ebp,%eax,4),%eax
f011030b:	89 45 8c             	mov    %eax,-0x74(%ebp)
	blockToInsert1.size = blocksToInsertSizes[idx_blocksToInsert];
f011030e:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110311:	8b 44 85 98          	mov    -0x68(%ebp,%eax,4),%eax
f0110315:	89 45 90             	mov    %eax,-0x70(%ebp)

	insert_sorted_with_merge_freeList(&blockToInsert1);
f0110318:	83 ec 0c             	sub    $0xc,%esp
f011031b:	8d 45 84             	lea    -0x7c(%ebp),%eax
f011031e:	50                   	push   %eax
f011031f:	e8 a5 27 02 00       	call   f0132ac9 <insert_sorted_with_merge_freeList>
f0110324:	83 c4 10             	add    $0x10,%esp

	//Check 1: Check size of the AllocMemBlocksList
	if (LIST_SIZE(&(AllocMemBlocksList)) != 0 || LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks || LIST_SIZE(&(FreeMemBlocksList)) != 1)
f0110327:	a1 94 25 78 f0       	mov    0xf0782594,%eax
f011032c:	85 c0                	test   %eax,%eax
f011032e:	75 14                	jne    f0110344 <test_insert_sorted_with_merge_freeList+0xe8>
f0110330:	a1 64 26 78 f0       	mov    0xf0782664,%eax
f0110335:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0110338:	75 0a                	jne    f0110344 <test_insert_sorted_with_merge_freeList+0xe8>
f011033a:	a1 30 26 78 f0       	mov    0xf0782630,%eax
f011033f:	83 f8 01             	cmp    $0x1,%eax
f0110342:	74 17                	je     f011035b <test_insert_sorted_with_merge_freeList+0xff>
		panic("insert_sorted_with_merge: Wrong sizes for AvailableMemBlocksList, FreeMemBlocksList and AllocMemBlocksList.");
f0110344:	83 ec 04             	sub    $0x4,%esp
f0110347:	68 c0 88 13 f0       	push   $0xf01388c0
f011034c:	68 88 02 00 00       	push   $0x288
f0110351:	68 14 7d 13 f0       	push   $0xf0137d14
f0110356:	e8 aa fe fe ff       	call   f0100205 <_panic>

	//Check 2: Check the free list content
	size = 0;
f011035b:	c7 45 94 00 00 00 00 	movl   $0x0,-0x6c(%ebp)
	actualSize = 1;
f0110362:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
	int chk = check_list_data(&FreeMemBlocksList, blocksToInsertSVAs, blocksToInsertSizes, &size, actualSize);
f0110369:	83 ec 0c             	sub    $0xc,%esp
f011036c:	ff 75 f0             	pushl  -0x10(%ebp)
f011036f:	8d 45 94             	lea    -0x6c(%ebp),%eax
f0110372:	50                   	push   %eax
f0110373:	8d 45 98             	lea    -0x68(%ebp),%eax
f0110376:	50                   	push   %eax
f0110377:	8d 45 c0             	lea    -0x40(%ebp),%eax
f011037a:	50                   	push   %eax
f011037b:	68 24 26 78 f0       	push   $0xf0782624
f0110380:	e8 bb 0a 00 00       	call   f0110e40 <check_list_data>
f0110385:	83 c4 20             	add    $0x20,%esp
f0110388:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if(chk != 1) panic("insert_sorted_with_merge: WRONG INSERT .. FreeMemBlocksList content is not correct.");
f011038b:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f011038f:	74 17                	je     f01103a8 <test_insert_sorted_with_merge_freeList+0x14c>
f0110391:	83 ec 04             	sub    $0x4,%esp
f0110394:	68 2c 89 13 f0       	push   $0xf013892c
f0110399:	68 8e 02 00 00       	push   $0x28e
f011039e:	68 14 7d 13 f0       	push   $0xf0137d14
f01103a3:	e8 5d fe fe ff       	call   f0100205 <_panic>
	if(size != actualSize) panic("insert_sorted_with_merge: WRONG INSERT .. FreeMemBlocksList size is not correct.");
f01103a8:	8b 45 94             	mov    -0x6c(%ebp),%eax
f01103ab:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f01103ae:	74 17                	je     f01103c7 <test_insert_sorted_with_merge_freeList+0x16b>
f01103b0:	83 ec 04             	sub    $0x4,%esp
f01103b3:	68 80 89 13 f0       	push   $0xf0138980
f01103b8:	68 8f 02 00 00       	push   $0x28f
f01103bd:	68 14 7d 13 f0       	push   $0xf0137d14
f01103c2:	e8 3e fe fe ff       	call   f0100205 <_panic>

	//====================================================================//
	/*INSERT_SORTED_WITH MERGE Scenario 2: CASE 1 - Insert with NO MERGE in the FreeMemBlocksList (AT THE TAIL)*/
	idx_blocksToInsert = 7;
f01103c7:	c7 45 ec 07 00 00 00 	movl   $0x7,-0x14(%ebp)
	blocksToInsertSVAs[idx_blocksToInsert] = 8*kilo + 4*kilo + 20*kilo;
f01103ce:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01103d1:	c7 44 85 c0 00 80 00 	movl   $0x8000,-0x40(%ebp,%eax,4)
f01103d8:	00 
	blocksToInsertSizes[idx_blocksToInsert] = 7*kilo;
f01103d9:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01103dc:	c7 44 85 98 00 1c 00 	movl   $0x1c00,-0x68(%ebp,%eax,4)
f01103e3:	00 
	struct MemBlock blockToInsert2;
	blockToInsert2.sva = blocksToInsertSVAs[idx_blocksToInsert];
f01103e4:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01103e7:	8b 44 85 c0          	mov    -0x40(%ebp,%eax,4),%eax
f01103eb:	89 85 7c ff ff ff    	mov    %eax,-0x84(%ebp)
	blockToInsert2.size = blocksToInsertSizes[idx_blocksToInsert];
f01103f1:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01103f4:	8b 44 85 98          	mov    -0x68(%ebp,%eax,4),%eax
f01103f8:	89 45 80             	mov    %eax,-0x80(%ebp)

	insert_sorted_with_merge_freeList(&blockToInsert2);
f01103fb:	83 ec 0c             	sub    $0xc,%esp
f01103fe:	8d 85 74 ff ff ff    	lea    -0x8c(%ebp),%eax
f0110404:	50                   	push   %eax
f0110405:	e8 bf 26 02 00       	call   f0132ac9 <insert_sorted_with_merge_freeList>
f011040a:	83 c4 10             	add    $0x10,%esp

	//Check 1: Check size of the AllocMemBlocksList
	if (LIST_SIZE(&(AllocMemBlocksList)) != 0 || LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks || LIST_SIZE(&(FreeMemBlocksList)) != 2)
f011040d:	a1 94 25 78 f0       	mov    0xf0782594,%eax
f0110412:	85 c0                	test   %eax,%eax
f0110414:	75 14                	jne    f011042a <test_insert_sorted_with_merge_freeList+0x1ce>
f0110416:	a1 64 26 78 f0       	mov    0xf0782664,%eax
f011041b:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f011041e:	75 0a                	jne    f011042a <test_insert_sorted_with_merge_freeList+0x1ce>
f0110420:	a1 30 26 78 f0       	mov    0xf0782630,%eax
f0110425:	83 f8 02             	cmp    $0x2,%eax
f0110428:	74 17                	je     f0110441 <test_insert_sorted_with_merge_freeList+0x1e5>
		panic("insert_sorted_with_merge: Wrong sizes for AvailableMemBlocksList, FreeMemBlocksList and AllocMemBlocksList.");
f011042a:	83 ec 04             	sub    $0x4,%esp
f011042d:	68 c0 88 13 f0       	push   $0xf01388c0
f0110432:	68 9e 02 00 00       	push   $0x29e
f0110437:	68 14 7d 13 f0       	push   $0xf0137d14
f011043c:	e8 c4 fd fe ff       	call   f0100205 <_panic>

	//Check 2: Check the FreeMemBlocksList content
	size = 0;
f0110441:	c7 45 94 00 00 00 00 	movl   $0x0,-0x6c(%ebp)
	actualSize = 2;
f0110448:	c7 45 f0 02 00 00 00 	movl   $0x2,-0x10(%ebp)
	chk = check_list_data(&FreeMemBlocksList, blocksToInsertSVAs, blocksToInsertSizes, &size, actualSize);
f011044f:	83 ec 0c             	sub    $0xc,%esp
f0110452:	ff 75 f0             	pushl  -0x10(%ebp)
f0110455:	8d 45 94             	lea    -0x6c(%ebp),%eax
f0110458:	50                   	push   %eax
f0110459:	8d 45 98             	lea    -0x68(%ebp),%eax
f011045c:	50                   	push   %eax
f011045d:	8d 45 c0             	lea    -0x40(%ebp),%eax
f0110460:	50                   	push   %eax
f0110461:	68 24 26 78 f0       	push   $0xf0782624
f0110466:	e8 d5 09 00 00       	call   f0110e40 <check_list_data>
f011046b:	83 c4 20             	add    $0x20,%esp
f011046e:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if(chk != 1) panic("insert_sorted_with_merge: WRONG INSERT .. FreeMemBlocksList content is not correct.");
f0110471:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f0110475:	74 17                	je     f011048e <test_insert_sorted_with_merge_freeList+0x232>
f0110477:	83 ec 04             	sub    $0x4,%esp
f011047a:	68 2c 89 13 f0       	push   $0xf013892c
f011047f:	68 a4 02 00 00       	push   $0x2a4
f0110484:	68 14 7d 13 f0       	push   $0xf0137d14
f0110489:	e8 77 fd fe ff       	call   f0100205 <_panic>
	if(size != actualSize) panic("insert_sorted_with_merge: WRONG INSERT .. FreeMemBlocksList size is not correct.");
f011048e:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0110491:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0110494:	74 17                	je     f01104ad <test_insert_sorted_with_merge_freeList+0x251>
f0110496:	83 ec 04             	sub    $0x4,%esp
f0110499:	68 80 89 13 f0       	push   $0xf0138980
f011049e:	68 a5 02 00 00       	push   $0x2a5
f01104a3:	68 14 7d 13 f0       	push   $0xf0137d14
f01104a8:	e8 58 fd fe ff       	call   f0100205 <_panic>

	//====================================================================//
	/*INSERT_SORTED_WITH MERGE Scenario 3: CASE 1 - Insert with NO MERGE in the FreeMemBlocksList (AT THE HEAD)*/
	idx_blocksToInsert = 1;
f01104ad:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
	blocksToInsertSVAs[idx_blocksToInsert] = 1*kilo;
f01104b4:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01104b7:	c7 44 85 c0 00 04 00 	movl   $0x400,-0x40(%ebp,%eax,4)
f01104be:	00 
	blocksToInsertSizes[idx_blocksToInsert] = 1*kilo;
f01104bf:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01104c2:	c7 44 85 98 00 04 00 	movl   $0x400,-0x68(%ebp,%eax,4)
f01104c9:	00 
	struct MemBlock blockToInsert3;
	blockToInsert3.sva = blocksToInsertSVAs[idx_blocksToInsert];
f01104ca:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01104cd:	8b 44 85 c0          	mov    -0x40(%ebp,%eax,4),%eax
f01104d1:	89 85 6c ff ff ff    	mov    %eax,-0x94(%ebp)
	blockToInsert3.size = blocksToInsertSizes[idx_blocksToInsert];
f01104d7:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01104da:	8b 44 85 98          	mov    -0x68(%ebp,%eax,4),%eax
f01104de:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)

	insert_sorted_with_merge_freeList(&blockToInsert3);
f01104e4:	83 ec 0c             	sub    $0xc,%esp
f01104e7:	8d 85 64 ff ff ff    	lea    -0x9c(%ebp),%eax
f01104ed:	50                   	push   %eax
f01104ee:	e8 d6 25 02 00       	call   f0132ac9 <insert_sorted_with_merge_freeList>
f01104f3:	83 c4 10             	add    $0x10,%esp

	//Check 1: Check size of the AllocMemBlocksList
	if (LIST_SIZE(&(AllocMemBlocksList)) != 0 || LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks || LIST_SIZE(&(FreeMemBlocksList)) != 3)
f01104f6:	a1 94 25 78 f0       	mov    0xf0782594,%eax
f01104fb:	85 c0                	test   %eax,%eax
f01104fd:	75 14                	jne    f0110513 <test_insert_sorted_with_merge_freeList+0x2b7>
f01104ff:	a1 64 26 78 f0       	mov    0xf0782664,%eax
f0110504:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0110507:	75 0a                	jne    f0110513 <test_insert_sorted_with_merge_freeList+0x2b7>
f0110509:	a1 30 26 78 f0       	mov    0xf0782630,%eax
f011050e:	83 f8 03             	cmp    $0x3,%eax
f0110511:	74 17                	je     f011052a <test_insert_sorted_with_merge_freeList+0x2ce>
		panic("insert_sorted_with_merge: Wrong sizes for AvailableMemBlocksList, FreeMemBlocksList and AllocMemBlocksList.");
f0110513:	83 ec 04             	sub    $0x4,%esp
f0110516:	68 c0 88 13 f0       	push   $0xf01388c0
f011051b:	68 b4 02 00 00       	push   $0x2b4
f0110520:	68 14 7d 13 f0       	push   $0xf0137d14
f0110525:	e8 db fc fe ff       	call   f0100205 <_panic>

	//Check 2: Check the FreeMemBlocksList content
	size = 0;
f011052a:	c7 45 94 00 00 00 00 	movl   $0x0,-0x6c(%ebp)
	actualSize = 3;
f0110531:	c7 45 f0 03 00 00 00 	movl   $0x3,-0x10(%ebp)
	chk = check_list_data(&FreeMemBlocksList, blocksToInsertSVAs, blocksToInsertSizes, &size, actualSize);
f0110538:	83 ec 0c             	sub    $0xc,%esp
f011053b:	ff 75 f0             	pushl  -0x10(%ebp)
f011053e:	8d 45 94             	lea    -0x6c(%ebp),%eax
f0110541:	50                   	push   %eax
f0110542:	8d 45 98             	lea    -0x68(%ebp),%eax
f0110545:	50                   	push   %eax
f0110546:	8d 45 c0             	lea    -0x40(%ebp),%eax
f0110549:	50                   	push   %eax
f011054a:	68 24 26 78 f0       	push   $0xf0782624
f011054f:	e8 ec 08 00 00       	call   f0110e40 <check_list_data>
f0110554:	83 c4 20             	add    $0x20,%esp
f0110557:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if(chk != 1) panic("insert_sorted_with_merge: WRONG INSERT .. FreeMemBlocksList content is not correct.");
f011055a:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f011055e:	74 17                	je     f0110577 <test_insert_sorted_with_merge_freeList+0x31b>
f0110560:	83 ec 04             	sub    $0x4,%esp
f0110563:	68 2c 89 13 f0       	push   $0xf013892c
f0110568:	68 ba 02 00 00       	push   $0x2ba
f011056d:	68 14 7d 13 f0       	push   $0xf0137d14
f0110572:	e8 8e fc fe ff       	call   f0100205 <_panic>
	if(size != actualSize) panic("insert_sorted_with_merge: WRONG INSERT .. FreeMemBlocksList size is not correct.");
f0110577:	8b 45 94             	mov    -0x6c(%ebp),%eax
f011057a:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011057d:	74 17                	je     f0110596 <test_insert_sorted_with_merge_freeList+0x33a>
f011057f:	83 ec 04             	sub    $0x4,%esp
f0110582:	68 80 89 13 f0       	push   $0xf0138980
f0110587:	68 bb 02 00 00       	push   $0x2bb
f011058c:	68 14 7d 13 f0       	push   $0xf0137d14
f0110591:	e8 6f fc fe ff       	call   f0100205 <_panic>

	//====================================================================//
	/*INSERT_SORTED_WITH MERGE Scenario 4: CASE 1 - Insert with NO MERGE in the FreeMemBlocksList (between 2 blocks)*/
	idx_blocksToInsert = 6;
f0110596:	c7 45 ec 06 00 00 00 	movl   $0x6,-0x14(%ebp)
	blocksToInsertSVAs[idx_blocksToInsert] = 8*kilo + 4*kilo + 10*kilo;
f011059d:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01105a0:	c7 44 85 c0 00 58 00 	movl   $0x5800,-0x40(%ebp,%eax,4)
f01105a7:	00 
	blocksToInsertSizes[idx_blocksToInsert] = 4*kilo;
f01105a8:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01105ab:	c7 44 85 98 00 10 00 	movl   $0x1000,-0x68(%ebp,%eax,4)
f01105b2:	00 
	struct MemBlock blockToInsert4;
	blockToInsert4.sva = blocksToInsertSVAs[idx_blocksToInsert];
f01105b3:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01105b6:	8b 44 85 c0          	mov    -0x40(%ebp,%eax,4),%eax
f01105ba:	89 85 5c ff ff ff    	mov    %eax,-0xa4(%ebp)
	blockToInsert4.size = blocksToInsertSizes[idx_blocksToInsert];
f01105c0:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01105c3:	8b 44 85 98          	mov    -0x68(%ebp,%eax,4),%eax
f01105c7:	89 85 60 ff ff ff    	mov    %eax,-0xa0(%ebp)

	insert_sorted_with_merge_freeList(&blockToInsert4);
f01105cd:	83 ec 0c             	sub    $0xc,%esp
f01105d0:	8d 85 54 ff ff ff    	lea    -0xac(%ebp),%eax
f01105d6:	50                   	push   %eax
f01105d7:	e8 ed 24 02 00       	call   f0132ac9 <insert_sorted_with_merge_freeList>
f01105dc:	83 c4 10             	add    $0x10,%esp

	//Check 1: Check size of the AllocMemBlocksList
	if (LIST_SIZE(&(AllocMemBlocksList)) != 0 || LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks || LIST_SIZE(&(FreeMemBlocksList)) != 4)
f01105df:	a1 94 25 78 f0       	mov    0xf0782594,%eax
f01105e4:	85 c0                	test   %eax,%eax
f01105e6:	75 14                	jne    f01105fc <test_insert_sorted_with_merge_freeList+0x3a0>
f01105e8:	a1 64 26 78 f0       	mov    0xf0782664,%eax
f01105ed:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01105f0:	75 0a                	jne    f01105fc <test_insert_sorted_with_merge_freeList+0x3a0>
f01105f2:	a1 30 26 78 f0       	mov    0xf0782630,%eax
f01105f7:	83 f8 04             	cmp    $0x4,%eax
f01105fa:	74 17                	je     f0110613 <test_insert_sorted_with_merge_freeList+0x3b7>
		panic("insert_sorted_with_merge: Wrong sizes for AvailableMemBlocksList, FreeMemBlocksList and AllocMemBlocksList.");
f01105fc:	83 ec 04             	sub    $0x4,%esp
f01105ff:	68 c0 88 13 f0       	push   $0xf01388c0
f0110604:	68 ca 02 00 00       	push   $0x2ca
f0110609:	68 14 7d 13 f0       	push   $0xf0137d14
f011060e:	e8 f2 fb fe ff       	call   f0100205 <_panic>

	//Check 2: Check the FreeMemBlocksList content
	size = 0;
f0110613:	c7 45 94 00 00 00 00 	movl   $0x0,-0x6c(%ebp)
	actualSize = 4;
f011061a:	c7 45 f0 04 00 00 00 	movl   $0x4,-0x10(%ebp)
	chk = check_list_data(&FreeMemBlocksList, blocksToInsertSVAs, blocksToInsertSizes, &size, actualSize);
f0110621:	83 ec 0c             	sub    $0xc,%esp
f0110624:	ff 75 f0             	pushl  -0x10(%ebp)
f0110627:	8d 45 94             	lea    -0x6c(%ebp),%eax
f011062a:	50                   	push   %eax
f011062b:	8d 45 98             	lea    -0x68(%ebp),%eax
f011062e:	50                   	push   %eax
f011062f:	8d 45 c0             	lea    -0x40(%ebp),%eax
f0110632:	50                   	push   %eax
f0110633:	68 24 26 78 f0       	push   $0xf0782624
f0110638:	e8 03 08 00 00       	call   f0110e40 <check_list_data>
f011063d:	83 c4 20             	add    $0x20,%esp
f0110640:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if(chk != 1) panic("insert_sorted_with_merge: WRONG INSERT .. FreeMemBlocksList content is not correct.");
f0110643:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f0110647:	74 17                	je     f0110660 <test_insert_sorted_with_merge_freeList+0x404>
f0110649:	83 ec 04             	sub    $0x4,%esp
f011064c:	68 2c 89 13 f0       	push   $0xf013892c
f0110651:	68 d0 02 00 00       	push   $0x2d0
f0110656:	68 14 7d 13 f0       	push   $0xf0137d14
f011065b:	e8 a5 fb fe ff       	call   f0100205 <_panic>
	if(size != actualSize) panic("insert_sorted_with_merge: WRONG INSERT .. FreeMemBlocksList size is not correct.");
f0110660:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0110663:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0110666:	74 17                	je     f011067f <test_insert_sorted_with_merge_freeList+0x423>
f0110668:	83 ec 04             	sub    $0x4,%esp
f011066b:	68 80 89 13 f0       	push   $0xf0138980
f0110670:	68 d1 02 00 00       	push   $0x2d1
f0110675:	68 14 7d 13 f0       	push   $0xf0137d14
f011067a:	e8 86 fb fe ff       	call   f0100205 <_panic>

	//====================================================================//
	/*INSERT_SORTED_WITH MERGE Scenario 5: CASE 2 - Merge with previous ONLY in the FreeMemBlocksList (AT the tail)*/
	idx_blocksToInsert = 8;
f011067f:	c7 45 ec 08 00 00 00 	movl   $0x8,-0x14(%ebp)
	blocksToInsertSVAs[idx_blocksToInsert] = 8*kilo + 4*kilo + 20*kilo + 7*kilo;
f0110686:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110689:	c7 44 85 c0 00 9c 00 	movl   $0x9c00,-0x40(%ebp,%eax,4)
f0110690:	00 
	blocksToInsertSizes[idx_blocksToInsert] = 3*kilo;
f0110691:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110694:	c7 44 85 98 00 0c 00 	movl   $0xc00,-0x68(%ebp,%eax,4)
f011069b:	00 
	struct MemBlock blockToInsert5;
	blockToInsert5.sva = blocksToInsertSVAs[idx_blocksToInsert];
f011069c:	8b 45 ec             	mov    -0x14(%ebp),%eax
f011069f:	8b 44 85 c0          	mov    -0x40(%ebp,%eax,4),%eax
f01106a3:	89 85 4c ff ff ff    	mov    %eax,-0xb4(%ebp)
	blockToInsert5.size = blocksToInsertSizes[idx_blocksToInsert];
f01106a9:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01106ac:	8b 44 85 98          	mov    -0x68(%ebp,%eax,4),%eax
f01106b0:	89 85 50 ff ff ff    	mov    %eax,-0xb0(%ebp)

//	cprintf("===>BEFORE\n");
//	show_list_content(&FreeMemBlocksList);

	insert_sorted_with_merge_freeList(&blockToInsert5);
f01106b6:	83 ec 0c             	sub    $0xc,%esp
f01106b9:	8d 85 44 ff ff ff    	lea    -0xbc(%ebp),%eax
f01106bf:	50                   	push   %eax
f01106c0:	e8 04 24 02 00       	call   f0132ac9 <insert_sorted_with_merge_freeList>
f01106c5:	83 c4 10             	add    $0x10,%esp

	//Check 1: Check size of the AllocMemBlocksList
	if (LIST_SIZE(&(AllocMemBlocksList)) != 0 || LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks + 1 || LIST_SIZE(&(FreeMemBlocksList)) != 4)
f01106c8:	a1 94 25 78 f0       	mov    0xf0782594,%eax
f01106cd:	85 c0                	test   %eax,%eax
f01106cf:	75 17                	jne    f01106e8 <test_insert_sorted_with_merge_freeList+0x48c>
f01106d1:	a1 64 26 78 f0       	mov    0xf0782664,%eax
f01106d6:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01106d9:	42                   	inc    %edx
f01106da:	39 d0                	cmp    %edx,%eax
f01106dc:	75 0a                	jne    f01106e8 <test_insert_sorted_with_merge_freeList+0x48c>
f01106de:	a1 30 26 78 f0       	mov    0xf0782630,%eax
f01106e3:	83 f8 04             	cmp    $0x4,%eax
f01106e6:	74 17                	je     f01106ff <test_insert_sorted_with_merge_freeList+0x4a3>
		panic("insert_sorted_with_merge: Wrong sizes for AvailableMemBlocksList, FreeMemBlocksList and AllocMemBlocksList.");
f01106e8:	83 ec 04             	sub    $0x4,%esp
f01106eb:	68 c0 88 13 f0       	push   $0xf01388c0
f01106f0:	68 e3 02 00 00       	push   $0x2e3
f01106f5:	68 14 7d 13 f0       	push   $0xf0137d14
f01106fa:	e8 06 fb fe ff       	call   f0100205 <_panic>

	//Check 2: Check the FreeMemBlocksList content
	size = 0;
f01106ff:	c7 45 94 00 00 00 00 	movl   $0x0,-0x6c(%ebp)
	actualSize = 4;
f0110706:	c7 45 f0 04 00 00 00 	movl   $0x4,-0x10(%ebp)
	blocksToInsertSizes[idx_blocksToInsert-1] += blocksToInsertSizes[idx_blocksToInsert];
f011070d:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110710:	8d 50 ff             	lea    -0x1(%eax),%edx
f0110713:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110716:	48                   	dec    %eax
f0110717:	8b 4c 85 98          	mov    -0x68(%ebp,%eax,4),%ecx
f011071b:	8b 45 ec             	mov    -0x14(%ebp),%eax
f011071e:	8b 44 85 98          	mov    -0x68(%ebp,%eax,4),%eax
f0110722:	01 c8                	add    %ecx,%eax
f0110724:	89 44 95 98          	mov    %eax,-0x68(%ebp,%edx,4)
	blocksToInsertSVAs[idx_blocksToInsert] = 0x0;
f0110728:	8b 45 ec             	mov    -0x14(%ebp),%eax
f011072b:	c7 44 85 c0 00 00 00 	movl   $0x0,-0x40(%ebp,%eax,4)
f0110732:	00 
	blocksToInsertSizes[idx_blocksToInsert] = 0;
f0110733:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110736:	c7 44 85 98 00 00 00 	movl   $0x0,-0x68(%ebp,%eax,4)
f011073d:	00 
	chk = check_list_data(&FreeMemBlocksList, blocksToInsertSVAs, blocksToInsertSizes, &size, actualSize);
f011073e:	83 ec 0c             	sub    $0xc,%esp
f0110741:	ff 75 f0             	pushl  -0x10(%ebp)
f0110744:	8d 45 94             	lea    -0x6c(%ebp),%eax
f0110747:	50                   	push   %eax
f0110748:	8d 45 98             	lea    -0x68(%ebp),%eax
f011074b:	50                   	push   %eax
f011074c:	8d 45 c0             	lea    -0x40(%ebp),%eax
f011074f:	50                   	push   %eax
f0110750:	68 24 26 78 f0       	push   $0xf0782624
f0110755:	e8 e6 06 00 00       	call   f0110e40 <check_list_data>
f011075a:	83 c4 20             	add    $0x20,%esp
f011075d:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if(chk != 1) panic("insert_sorted_with_merge: WRONG INSERT .. FreeMemBlocksList content is not correct.");
f0110760:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f0110764:	74 17                	je     f011077d <test_insert_sorted_with_merge_freeList+0x521>
f0110766:	83 ec 04             	sub    $0x4,%esp
f0110769:	68 2c 89 13 f0       	push   $0xf013892c
f011076e:	68 ec 02 00 00       	push   $0x2ec
f0110773:	68 14 7d 13 f0       	push   $0xf0137d14
f0110778:	e8 88 fa fe ff       	call   f0100205 <_panic>
	if(size != actualSize) panic("insert_sorted_with_merge: WRONG INSERT .. FreeMemBlocksList size is not correct.");
f011077d:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0110780:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0110783:	74 17                	je     f011079c <test_insert_sorted_with_merge_freeList+0x540>
f0110785:	83 ec 04             	sub    $0x4,%esp
f0110788:	68 80 89 13 f0       	push   $0xf0138980
f011078d:	68 ed 02 00 00       	push   $0x2ed
f0110792:	68 14 7d 13 f0       	push   $0xf0137d14
f0110797:	e8 69 fa fe ff       	call   f0100205 <_panic>

	//Check 3: Check the AvailableMemBlocksList content
	size = 0;
f011079c:	c7 45 94 00 00 00 00 	movl   $0x0,-0x6c(%ebp)
	chk = check_avaliable_list_data(&size);
f01107a3:	83 ec 0c             	sub    $0xc,%esp
f01107a6:	8d 45 94             	lea    -0x6c(%ebp),%eax
f01107a9:	50                   	push   %eax
f01107aa:	e8 5d 07 00 00       	call   f0110f0c <check_avaliable_list_data>
f01107af:	83 c4 10             	add    $0x10,%esp
f01107b2:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if(size != numOfBlocks + 1) panic("insert_sorted_with_merge: WRONG INSERT .. AvailableMemBlocksList size is not correct.");
f01107b5:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01107b8:	8d 50 01             	lea    0x1(%eax),%edx
f01107bb:	8b 45 94             	mov    -0x6c(%ebp),%eax
f01107be:	39 c2                	cmp    %eax,%edx
f01107c0:	74 17                	je     f01107d9 <test_insert_sorted_with_merge_freeList+0x57d>
f01107c2:	83 ec 04             	sub    $0x4,%esp
f01107c5:	68 d4 89 13 f0       	push   $0xf01389d4
f01107ca:	68 f2 02 00 00       	push   $0x2f2
f01107cf:	68 14 7d 13 f0       	push   $0xf0137d14
f01107d4:	e8 2c fa fe ff       	call   f0100205 <_panic>
	if(chk != 1) panic("insert_sorted_with_merge: WRONG INSERT .. AvailableMemBlocksList content is not correct.");
f01107d9:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f01107dd:	74 17                	je     f01107f6 <test_insert_sorted_with_merge_freeList+0x59a>
f01107df:	83 ec 04             	sub    $0x4,%esp
f01107e2:	68 2c 8a 13 f0       	push   $0xf0138a2c
f01107e7:	68 f3 02 00 00       	push   $0x2f3
f01107ec:	68 14 7d 13 f0       	push   $0xf0137d14
f01107f1:	e8 0f fa fe ff       	call   f0100205 <_panic>

	//====================================================================//
	/*INSERT_SORTED_WITH MERGE Scenario 6: CASE 2 - Merge with previous ONLY in the FreeMemBlocksList (between 2 blocks)*/
	idx_blocksToInsert = 4;
f01107f6:	c7 45 ec 04 00 00 00 	movl   $0x4,-0x14(%ebp)
	blocksToInsertSVAs[idx_blocksToInsert] = 8*kilo + 4*kilo;
f01107fd:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110800:	c7 44 85 c0 00 30 00 	movl   $0x3000,-0x40(%ebp,%eax,4)
f0110807:	00 
	blocksToInsertSizes[idx_blocksToInsert] = 1*kilo;
f0110808:	8b 45 ec             	mov    -0x14(%ebp),%eax
f011080b:	c7 44 85 98 00 04 00 	movl   $0x400,-0x68(%ebp,%eax,4)
f0110812:	00 
	struct MemBlock blockToInsert6;
	blockToInsert6.sva = blocksToInsertSVAs[idx_blocksToInsert];
f0110813:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110816:	8b 44 85 c0          	mov    -0x40(%ebp,%eax,4),%eax
f011081a:	89 85 3c ff ff ff    	mov    %eax,-0xc4(%ebp)
	blockToInsert6.size = blocksToInsertSizes[idx_blocksToInsert];
f0110820:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110823:	8b 44 85 98          	mov    -0x68(%ebp,%eax,4),%eax
f0110827:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%ebp)

//	cprintf("===>BEFORE\n");
//	show_list_content(&FreeMemBlocksList);

	insert_sorted_with_merge_freeList(&blockToInsert6);
f011082d:	83 ec 0c             	sub    $0xc,%esp
f0110830:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f0110836:	50                   	push   %eax
f0110837:	e8 8d 22 02 00       	call   f0132ac9 <insert_sorted_with_merge_freeList>
f011083c:	83 c4 10             	add    $0x10,%esp

	//Check 1: Check size of the AllocMemBlocksList
	if (LIST_SIZE(&(AllocMemBlocksList)) != 0 || LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks + 2 || LIST_SIZE(&(FreeMemBlocksList)) != 4)
f011083f:	a1 94 25 78 f0       	mov    0xf0782594,%eax
f0110844:	85 c0                	test   %eax,%eax
f0110846:	75 19                	jne    f0110861 <test_insert_sorted_with_merge_freeList+0x605>
f0110848:	a1 64 26 78 f0       	mov    0xf0782664,%eax
f011084d:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0110850:	83 c2 02             	add    $0x2,%edx
f0110853:	39 d0                	cmp    %edx,%eax
f0110855:	75 0a                	jne    f0110861 <test_insert_sorted_with_merge_freeList+0x605>
f0110857:	a1 30 26 78 f0       	mov    0xf0782630,%eax
f011085c:	83 f8 04             	cmp    $0x4,%eax
f011085f:	74 17                	je     f0110878 <test_insert_sorted_with_merge_freeList+0x61c>
		panic("insert_sorted_with_merge: Wrong sizes for AvailableMemBlocksList, FreeMemBlocksList and AllocMemBlocksList.");
f0110861:	83 ec 04             	sub    $0x4,%esp
f0110864:	68 c0 88 13 f0       	push   $0xf01388c0
f0110869:	68 05 03 00 00       	push   $0x305
f011086e:	68 14 7d 13 f0       	push   $0xf0137d14
f0110873:	e8 8d f9 fe ff       	call   f0100205 <_panic>

	//Check 2: Check the FreeMemBlocksList content
	size = 0;
f0110878:	c7 45 94 00 00 00 00 	movl   $0x0,-0x6c(%ebp)
	actualSize = 4;
f011087f:	c7 45 f0 04 00 00 00 	movl   $0x4,-0x10(%ebp)
	blocksToInsertSizes[idx_blocksToInsert-1] += blocksToInsertSizes[idx_blocksToInsert];
f0110886:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110889:	8d 50 ff             	lea    -0x1(%eax),%edx
f011088c:	8b 45 ec             	mov    -0x14(%ebp),%eax
f011088f:	48                   	dec    %eax
f0110890:	8b 4c 85 98          	mov    -0x68(%ebp,%eax,4),%ecx
f0110894:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110897:	8b 44 85 98          	mov    -0x68(%ebp,%eax,4),%eax
f011089b:	01 c8                	add    %ecx,%eax
f011089d:	89 44 95 98          	mov    %eax,-0x68(%ebp,%edx,4)
	blocksToInsertSVAs[idx_blocksToInsert] = 0x0;
f01108a1:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01108a4:	c7 44 85 c0 00 00 00 	movl   $0x0,-0x40(%ebp,%eax,4)
f01108ab:	00 
	blocksToInsertSizes[idx_blocksToInsert] = 0;
f01108ac:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01108af:	c7 44 85 98 00 00 00 	movl   $0x0,-0x68(%ebp,%eax,4)
f01108b6:	00 
	chk = check_list_data(&FreeMemBlocksList, blocksToInsertSVAs, blocksToInsertSizes, &size, actualSize);
f01108b7:	83 ec 0c             	sub    $0xc,%esp
f01108ba:	ff 75 f0             	pushl  -0x10(%ebp)
f01108bd:	8d 45 94             	lea    -0x6c(%ebp),%eax
f01108c0:	50                   	push   %eax
f01108c1:	8d 45 98             	lea    -0x68(%ebp),%eax
f01108c4:	50                   	push   %eax
f01108c5:	8d 45 c0             	lea    -0x40(%ebp),%eax
f01108c8:	50                   	push   %eax
f01108c9:	68 24 26 78 f0       	push   $0xf0782624
f01108ce:	e8 6d 05 00 00       	call   f0110e40 <check_list_data>
f01108d3:	83 c4 20             	add    $0x20,%esp
f01108d6:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if(chk != 1) panic("insert_sorted_with_merge: WRONG INSERT .. FreeMemBlocksList content is not correct.");
f01108d9:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f01108dd:	74 17                	je     f01108f6 <test_insert_sorted_with_merge_freeList+0x69a>
f01108df:	83 ec 04             	sub    $0x4,%esp
f01108e2:	68 2c 89 13 f0       	push   $0xf013892c
f01108e7:	68 0e 03 00 00       	push   $0x30e
f01108ec:	68 14 7d 13 f0       	push   $0xf0137d14
f01108f1:	e8 0f f9 fe ff       	call   f0100205 <_panic>
	if(size != actualSize) panic("insert_sorted_with_merge: WRONG INSERT .. FreeMemBlocksList size is not correct.");
f01108f6:	8b 45 94             	mov    -0x6c(%ebp),%eax
f01108f9:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f01108fc:	74 17                	je     f0110915 <test_insert_sorted_with_merge_freeList+0x6b9>
f01108fe:	83 ec 04             	sub    $0x4,%esp
f0110901:	68 80 89 13 f0       	push   $0xf0138980
f0110906:	68 0f 03 00 00       	push   $0x30f
f011090b:	68 14 7d 13 f0       	push   $0xf0137d14
f0110910:	e8 f0 f8 fe ff       	call   f0100205 <_panic>

	//Check 3: Check the AvailableMemBlocksList content
	size = 0;
f0110915:	c7 45 94 00 00 00 00 	movl   $0x0,-0x6c(%ebp)
	chk = check_avaliable_list_data(&size);
f011091c:	83 ec 0c             	sub    $0xc,%esp
f011091f:	8d 45 94             	lea    -0x6c(%ebp),%eax
f0110922:	50                   	push   %eax
f0110923:	e8 e4 05 00 00       	call   f0110f0c <check_avaliable_list_data>
f0110928:	83 c4 10             	add    $0x10,%esp
f011092b:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if(size != numOfBlocks + 2) panic("insert_sorted_with_merge: WRONG INSERT .. AvailableMemBlocksList size is not correct.");
f011092e:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0110931:	8d 50 02             	lea    0x2(%eax),%edx
f0110934:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0110937:	39 c2                	cmp    %eax,%edx
f0110939:	74 17                	je     f0110952 <test_insert_sorted_with_merge_freeList+0x6f6>
f011093b:	83 ec 04             	sub    $0x4,%esp
f011093e:	68 d4 89 13 f0       	push   $0xf01389d4
f0110943:	68 14 03 00 00       	push   $0x314
f0110948:	68 14 7d 13 f0       	push   $0xf0137d14
f011094d:	e8 b3 f8 fe ff       	call   f0100205 <_panic>
	if(chk != 1) panic("insert_sorted_with_merge: WRONG INSERT .. AvailableMemBlocksList content is not correct.");
f0110952:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f0110956:	74 17                	je     f011096f <test_insert_sorted_with_merge_freeList+0x713>
f0110958:	83 ec 04             	sub    $0x4,%esp
f011095b:	68 2c 8a 13 f0       	push   $0xf0138a2c
f0110960:	68 15 03 00 00       	push   $0x315
f0110965:	68 14 7d 13 f0       	push   $0xf0137d14
f011096a:	e8 96 f8 fe ff       	call   f0100205 <_panic>

	//====================================================================//
	/*INSERT_SORTED_WITH MERGE Scenario 7: CASE 3 - Merge with next ONLY in the FreeMemBlocksList (AT the head)*/
	idx_blocksToInsert = 0;
f011096f:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
	blocksToInsertSVAs[idx_blocksToInsert] = 0x0;
f0110976:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110979:	c7 44 85 c0 00 00 00 	movl   $0x0,-0x40(%ebp,%eax,4)
f0110980:	00 
	blocksToInsertSizes[idx_blocksToInsert] = 1*kilo;
f0110981:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110984:	c7 44 85 98 00 04 00 	movl   $0x400,-0x68(%ebp,%eax,4)
f011098b:	00 
	struct MemBlock blockToInsert7;
	blockToInsert7.sva = blocksToInsertSVAs[idx_blocksToInsert];
f011098c:	8b 45 ec             	mov    -0x14(%ebp),%eax
f011098f:	8b 44 85 c0          	mov    -0x40(%ebp,%eax,4),%eax
f0110993:	89 85 2c ff ff ff    	mov    %eax,-0xd4(%ebp)
	blockToInsert7.size = blocksToInsertSizes[idx_blocksToInsert];
f0110999:	8b 45 ec             	mov    -0x14(%ebp),%eax
f011099c:	8b 44 85 98          	mov    -0x68(%ebp,%eax,4),%eax
f01109a0:	89 85 30 ff ff ff    	mov    %eax,-0xd0(%ebp)

//	cprintf("===>BEFORE\n");
//	show_list_content(&FreeMemBlocksList);

	insert_sorted_with_merge_freeList(&blockToInsert7);
f01109a6:	83 ec 0c             	sub    $0xc,%esp
f01109a9:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f01109af:	50                   	push   %eax
f01109b0:	e8 14 21 02 00       	call   f0132ac9 <insert_sorted_with_merge_freeList>
f01109b5:	83 c4 10             	add    $0x10,%esp
//	show_list_content(&FreeMemBlocksList);

	//Check 1: Check size of the AllocMemBlocksList
	if (LIST_SIZE(&(AllocMemBlocksList)) != 0 || LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks + 3 || LIST_SIZE(&(FreeMemBlocksList)) != 4)
f01109b8:	a1 94 25 78 f0       	mov    0xf0782594,%eax
f01109bd:	85 c0                	test   %eax,%eax
f01109bf:	75 19                	jne    f01109da <test_insert_sorted_with_merge_freeList+0x77e>
f01109c1:	a1 64 26 78 f0       	mov    0xf0782664,%eax
f01109c6:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01109c9:	83 c2 03             	add    $0x3,%edx
f01109cc:	39 d0                	cmp    %edx,%eax
f01109ce:	75 0a                	jne    f01109da <test_insert_sorted_with_merge_freeList+0x77e>
f01109d0:	a1 30 26 78 f0       	mov    0xf0782630,%eax
f01109d5:	83 f8 04             	cmp    $0x4,%eax
f01109d8:	74 17                	je     f01109f1 <test_insert_sorted_with_merge_freeList+0x795>
		panic("insert_sorted_with_merge: Wrong sizes for AvailableMemBlocksList, FreeMemBlocksList and AllocMemBlocksList.");
f01109da:	83 ec 04             	sub    $0x4,%esp
f01109dd:	68 c0 88 13 f0       	push   $0xf01388c0
f01109e2:	68 28 03 00 00       	push   $0x328
f01109e7:	68 14 7d 13 f0       	push   $0xf0137d14
f01109ec:	e8 14 f8 fe ff       	call   f0100205 <_panic>

	//Check 2: Check the FreeMemBlocksList content
	size = 0;
f01109f1:	c7 45 94 00 00 00 00 	movl   $0x0,-0x6c(%ebp)
	actualSize = 4;
f01109f8:	c7 45 f0 04 00 00 00 	movl   $0x4,-0x10(%ebp)
	blocksToInsertSVAs[idx_blocksToInsert+1] = blocksToInsertSVAs[idx_blocksToInsert];
f01109ff:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110a02:	8d 50 01             	lea    0x1(%eax),%edx
f0110a05:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110a08:	8b 44 85 c0          	mov    -0x40(%ebp,%eax,4),%eax
f0110a0c:	89 44 95 c0          	mov    %eax,-0x40(%ebp,%edx,4)
	blocksToInsertSizes[idx_blocksToInsert+1] += blocksToInsertSizes[idx_blocksToInsert];
f0110a10:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110a13:	8d 50 01             	lea    0x1(%eax),%edx
f0110a16:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110a19:	40                   	inc    %eax
f0110a1a:	8b 4c 85 98          	mov    -0x68(%ebp,%eax,4),%ecx
f0110a1e:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110a21:	8b 44 85 98          	mov    -0x68(%ebp,%eax,4),%eax
f0110a25:	01 c8                	add    %ecx,%eax
f0110a27:	89 44 95 98          	mov    %eax,-0x68(%ebp,%edx,4)
	blocksToInsertSVAs[idx_blocksToInsert] = 0x0;
f0110a2b:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110a2e:	c7 44 85 c0 00 00 00 	movl   $0x0,-0x40(%ebp,%eax,4)
f0110a35:	00 
	blocksToInsertSizes[idx_blocksToInsert] = 0;
f0110a36:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110a39:	c7 44 85 98 00 00 00 	movl   $0x0,-0x68(%ebp,%eax,4)
f0110a40:	00 
	chk = check_list_data(&FreeMemBlocksList, blocksToInsertSVAs, blocksToInsertSizes, &size, actualSize);
f0110a41:	83 ec 0c             	sub    $0xc,%esp
f0110a44:	ff 75 f0             	pushl  -0x10(%ebp)
f0110a47:	8d 45 94             	lea    -0x6c(%ebp),%eax
f0110a4a:	50                   	push   %eax
f0110a4b:	8d 45 98             	lea    -0x68(%ebp),%eax
f0110a4e:	50                   	push   %eax
f0110a4f:	8d 45 c0             	lea    -0x40(%ebp),%eax
f0110a52:	50                   	push   %eax
f0110a53:	68 24 26 78 f0       	push   $0xf0782624
f0110a58:	e8 e3 03 00 00       	call   f0110e40 <check_list_data>
f0110a5d:	83 c4 20             	add    $0x20,%esp
f0110a60:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if(chk != 1) panic("insert_sorted_with_merge: WRONG INSERT .. FreeMemBlocksList content is not correct.");
f0110a63:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f0110a67:	74 17                	je     f0110a80 <test_insert_sorted_with_merge_freeList+0x824>
f0110a69:	83 ec 04             	sub    $0x4,%esp
f0110a6c:	68 2c 89 13 f0       	push   $0xf013892c
f0110a71:	68 32 03 00 00       	push   $0x332
f0110a76:	68 14 7d 13 f0       	push   $0xf0137d14
f0110a7b:	e8 85 f7 fe ff       	call   f0100205 <_panic>
	if(size != actualSize) panic("insert_sorted_with_merge: WRONG INSERT .. FreeMemBlocksList size is not correct.");
f0110a80:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0110a83:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0110a86:	74 17                	je     f0110a9f <test_insert_sorted_with_merge_freeList+0x843>
f0110a88:	83 ec 04             	sub    $0x4,%esp
f0110a8b:	68 80 89 13 f0       	push   $0xf0138980
f0110a90:	68 33 03 00 00       	push   $0x333
f0110a95:	68 14 7d 13 f0       	push   $0xf0137d14
f0110a9a:	e8 66 f7 fe ff       	call   f0100205 <_panic>

	//Check 3: Check the AvailableMemBlocksList content
	size = 0;
f0110a9f:	c7 45 94 00 00 00 00 	movl   $0x0,-0x6c(%ebp)
	chk = check_avaliable_list_data(&size);
f0110aa6:	83 ec 0c             	sub    $0xc,%esp
f0110aa9:	8d 45 94             	lea    -0x6c(%ebp),%eax
f0110aac:	50                   	push   %eax
f0110aad:	e8 5a 04 00 00       	call   f0110f0c <check_avaliable_list_data>
f0110ab2:	83 c4 10             	add    $0x10,%esp
f0110ab5:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if(size != numOfBlocks + 3) panic("insert_sorted_with_merge: WRONG INSERT .. AvailableMemBlocksList size is not correct.");
f0110ab8:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0110abb:	8d 50 03             	lea    0x3(%eax),%edx
f0110abe:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0110ac1:	39 c2                	cmp    %eax,%edx
f0110ac3:	74 17                	je     f0110adc <test_insert_sorted_with_merge_freeList+0x880>
f0110ac5:	83 ec 04             	sub    $0x4,%esp
f0110ac8:	68 d4 89 13 f0       	push   $0xf01389d4
f0110acd:	68 38 03 00 00       	push   $0x338
f0110ad2:	68 14 7d 13 f0       	push   $0xf0137d14
f0110ad7:	e8 29 f7 fe ff       	call   f0100205 <_panic>
	if(chk != 1) panic("insert_sorted_with_merge: WRONG INSERT .. AvailableMemBlocksList content is not correct.");
f0110adc:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f0110ae0:	74 17                	je     f0110af9 <test_insert_sorted_with_merge_freeList+0x89d>
f0110ae2:	83 ec 04             	sub    $0x4,%esp
f0110ae5:	68 2c 8a 13 f0       	push   $0xf0138a2c
f0110aea:	68 39 03 00 00       	push   $0x339
f0110aef:	68 14 7d 13 f0       	push   $0xf0137d14
f0110af4:	e8 0c f7 fe ff       	call   f0100205 <_panic>

	//====================================================================//
	/*INSERT_SORTED_WITH MERGE Scenario 8: CASE 3 - Merge with next ONLY in the FreeMemBlocksList (between 2 blocks)*/
	idx_blocksToInsert = 5;
f0110af9:	c7 45 ec 05 00 00 00 	movl   $0x5,-0x14(%ebp)
	blocksToInsertSVAs[idx_blocksToInsert] = (8*kilo + 4*kilo + 10*kilo) - (4*kilo);
f0110b00:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110b03:	c7 44 85 c0 00 48 00 	movl   $0x4800,-0x40(%ebp,%eax,4)
f0110b0a:	00 
	blocksToInsertSizes[idx_blocksToInsert] = 4*kilo;
f0110b0b:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110b0e:	c7 44 85 98 00 10 00 	movl   $0x1000,-0x68(%ebp,%eax,4)
f0110b15:	00 
	struct MemBlock blockToInsert8;
	blockToInsert8.sva = blocksToInsertSVAs[idx_blocksToInsert];
f0110b16:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110b19:	8b 44 85 c0          	mov    -0x40(%ebp,%eax,4),%eax
f0110b1d:	89 85 1c ff ff ff    	mov    %eax,-0xe4(%ebp)
	blockToInsert8.size = blocksToInsertSizes[idx_blocksToInsert];
f0110b23:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110b26:	8b 44 85 98          	mov    -0x68(%ebp,%eax,4),%eax
f0110b2a:	89 85 20 ff ff ff    	mov    %eax,-0xe0(%ebp)

//	cprintf("===>BEFORE\n");
//	show_list_content(&FreeMemBlocksList);

	insert_sorted_with_merge_freeList(&blockToInsert8);
f0110b30:	83 ec 0c             	sub    $0xc,%esp
f0110b33:	8d 85 14 ff ff ff    	lea    -0xec(%ebp),%eax
f0110b39:	50                   	push   %eax
f0110b3a:	e8 8a 1f 02 00       	call   f0132ac9 <insert_sorted_with_merge_freeList>
f0110b3f:	83 c4 10             	add    $0x10,%esp
//	show_list_content(&FreeMemBlocksList);

	//Check 1: Check size of the AllocMemBlocksList
	if (LIST_SIZE(&(AllocMemBlocksList)) != 0 || LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks + 4 || LIST_SIZE(&(FreeMemBlocksList)) != 4)
f0110b42:	a1 94 25 78 f0       	mov    0xf0782594,%eax
f0110b47:	85 c0                	test   %eax,%eax
f0110b49:	75 19                	jne    f0110b64 <test_insert_sorted_with_merge_freeList+0x908>
f0110b4b:	a1 64 26 78 f0       	mov    0xf0782664,%eax
f0110b50:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0110b53:	83 c2 04             	add    $0x4,%edx
f0110b56:	39 d0                	cmp    %edx,%eax
f0110b58:	75 0a                	jne    f0110b64 <test_insert_sorted_with_merge_freeList+0x908>
f0110b5a:	a1 30 26 78 f0       	mov    0xf0782630,%eax
f0110b5f:	83 f8 04             	cmp    $0x4,%eax
f0110b62:	74 17                	je     f0110b7b <test_insert_sorted_with_merge_freeList+0x91f>
		panic("insert_sorted_with_merge: Wrong sizes for AvailableMemBlocksList, FreeMemBlocksList and AllocMemBlocksList.");
f0110b64:	83 ec 04             	sub    $0x4,%esp
f0110b67:	68 c0 88 13 f0       	push   $0xf01388c0
f0110b6c:	68 4c 03 00 00       	push   $0x34c
f0110b71:	68 14 7d 13 f0       	push   $0xf0137d14
f0110b76:	e8 8a f6 fe ff       	call   f0100205 <_panic>

	//Check 2: Check the FreeMemBlocksList content
	size = 0;
f0110b7b:	c7 45 94 00 00 00 00 	movl   $0x0,-0x6c(%ebp)
	actualSize = 4;
f0110b82:	c7 45 f0 04 00 00 00 	movl   $0x4,-0x10(%ebp)
	blocksToInsertSVAs[idx_blocksToInsert+1] = blocksToInsertSVAs[idx_blocksToInsert];
f0110b89:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110b8c:	8d 50 01             	lea    0x1(%eax),%edx
f0110b8f:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110b92:	8b 44 85 c0          	mov    -0x40(%ebp,%eax,4),%eax
f0110b96:	89 44 95 c0          	mov    %eax,-0x40(%ebp,%edx,4)
	blocksToInsertSizes[idx_blocksToInsert+1] += blocksToInsertSizes[idx_blocksToInsert];
f0110b9a:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110b9d:	8d 50 01             	lea    0x1(%eax),%edx
f0110ba0:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110ba3:	40                   	inc    %eax
f0110ba4:	8b 4c 85 98          	mov    -0x68(%ebp,%eax,4),%ecx
f0110ba8:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110bab:	8b 44 85 98          	mov    -0x68(%ebp,%eax,4),%eax
f0110baf:	01 c8                	add    %ecx,%eax
f0110bb1:	89 44 95 98          	mov    %eax,-0x68(%ebp,%edx,4)
	blocksToInsertSVAs[idx_blocksToInsert] = 0x0;
f0110bb5:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110bb8:	c7 44 85 c0 00 00 00 	movl   $0x0,-0x40(%ebp,%eax,4)
f0110bbf:	00 
	blocksToInsertSizes[idx_blocksToInsert] = 0;
f0110bc0:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110bc3:	c7 44 85 98 00 00 00 	movl   $0x0,-0x68(%ebp,%eax,4)
f0110bca:	00 
	chk = check_list_data(&FreeMemBlocksList, blocksToInsertSVAs, blocksToInsertSizes, &size, actualSize);
f0110bcb:	83 ec 0c             	sub    $0xc,%esp
f0110bce:	ff 75 f0             	pushl  -0x10(%ebp)
f0110bd1:	8d 45 94             	lea    -0x6c(%ebp),%eax
f0110bd4:	50                   	push   %eax
f0110bd5:	8d 45 98             	lea    -0x68(%ebp),%eax
f0110bd8:	50                   	push   %eax
f0110bd9:	8d 45 c0             	lea    -0x40(%ebp),%eax
f0110bdc:	50                   	push   %eax
f0110bdd:	68 24 26 78 f0       	push   $0xf0782624
f0110be2:	e8 59 02 00 00       	call   f0110e40 <check_list_data>
f0110be7:	83 c4 20             	add    $0x20,%esp
f0110bea:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if(chk != 1) panic("insert_sorted_with_merge: WRONG INSERT .. FreeMemBlocksList content is not correct.");
f0110bed:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f0110bf1:	74 17                	je     f0110c0a <test_insert_sorted_with_merge_freeList+0x9ae>
f0110bf3:	83 ec 04             	sub    $0x4,%esp
f0110bf6:	68 2c 89 13 f0       	push   $0xf013892c
f0110bfb:	68 56 03 00 00       	push   $0x356
f0110c00:	68 14 7d 13 f0       	push   $0xf0137d14
f0110c05:	e8 fb f5 fe ff       	call   f0100205 <_panic>
	if(size != actualSize) panic("insert_sorted_with_merge: WRONG INSERT .. FreeMemBlocksList size is not correct.");
f0110c0a:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0110c0d:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0110c10:	74 17                	je     f0110c29 <test_insert_sorted_with_merge_freeList+0x9cd>
f0110c12:	83 ec 04             	sub    $0x4,%esp
f0110c15:	68 80 89 13 f0       	push   $0xf0138980
f0110c1a:	68 57 03 00 00       	push   $0x357
f0110c1f:	68 14 7d 13 f0       	push   $0xf0137d14
f0110c24:	e8 dc f5 fe ff       	call   f0100205 <_panic>

	//Check 3: Check the AvailableMemBlocksList content
	size = 0;
f0110c29:	c7 45 94 00 00 00 00 	movl   $0x0,-0x6c(%ebp)
	chk = check_avaliable_list_data(&size);
f0110c30:	83 ec 0c             	sub    $0xc,%esp
f0110c33:	8d 45 94             	lea    -0x6c(%ebp),%eax
f0110c36:	50                   	push   %eax
f0110c37:	e8 d0 02 00 00       	call   f0110f0c <check_avaliable_list_data>
f0110c3c:	83 c4 10             	add    $0x10,%esp
f0110c3f:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if(size != numOfBlocks + 4) panic("insert_sorted_with_merge: WRONG INSERT .. AvailableMemBlocksList size is not correct.");
f0110c42:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0110c45:	8d 50 04             	lea    0x4(%eax),%edx
f0110c48:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0110c4b:	39 c2                	cmp    %eax,%edx
f0110c4d:	74 17                	je     f0110c66 <test_insert_sorted_with_merge_freeList+0xa0a>
f0110c4f:	83 ec 04             	sub    $0x4,%esp
f0110c52:	68 d4 89 13 f0       	push   $0xf01389d4
f0110c57:	68 5c 03 00 00       	push   $0x35c
f0110c5c:	68 14 7d 13 f0       	push   $0xf0137d14
f0110c61:	e8 9f f5 fe ff       	call   f0100205 <_panic>
	if(chk != 1) panic("insert_sorted_with_merge: WRONG INSERT .. AvailableMemBlocksList content is not correct.");
f0110c66:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f0110c6a:	74 17                	je     f0110c83 <test_insert_sorted_with_merge_freeList+0xa27>
f0110c6c:	83 ec 04             	sub    $0x4,%esp
f0110c6f:	68 2c 8a 13 f0       	push   $0xf0138a2c
f0110c74:	68 5d 03 00 00       	push   $0x35d
f0110c79:	68 14 7d 13 f0       	push   $0xf0137d14
f0110c7e:	e8 82 f5 fe ff       	call   f0100205 <_panic>

	//====================================================================//
	/*INSERT_SORTED_WITH MERGE Scenario 9: CASE 4 - Merge with prev & next in the FreeMemBlocksList */
	idx_blocksToInsert = 2;
f0110c83:	c7 45 ec 02 00 00 00 	movl   $0x2,-0x14(%ebp)
	blocksToInsertSVAs[idx_blocksToInsert] = 2*kilo;
f0110c8a:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110c8d:	c7 44 85 c0 00 08 00 	movl   $0x800,-0x40(%ebp,%eax,4)
f0110c94:	00 
	blocksToInsertSizes[idx_blocksToInsert] = 0x2000 - 2*kilo; //6144
f0110c95:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110c98:	c7 44 85 98 00 18 00 	movl   $0x1800,-0x68(%ebp,%eax,4)
f0110c9f:	00 
	struct MemBlock blockToInsert9;
	blockToInsert9.sva = blocksToInsertSVAs[idx_blocksToInsert];
f0110ca0:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110ca3:	8b 44 85 c0          	mov    -0x40(%ebp,%eax,4),%eax
f0110ca7:	89 85 0c ff ff ff    	mov    %eax,-0xf4(%ebp)
	blockToInsert9.size = blocksToInsertSizes[idx_blocksToInsert];
f0110cad:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110cb0:	8b 44 85 98          	mov    -0x68(%ebp,%eax,4),%eax
f0110cb4:	89 85 10 ff ff ff    	mov    %eax,-0xf0(%ebp)

	//printf("===>BEFORE\n");
	//show_list_content(&FreeMemBlocksList);

	insert_sorted_with_merge_freeList(&blockToInsert9);
f0110cba:	83 ec 0c             	sub    $0xc,%esp
f0110cbd:	8d 85 04 ff ff ff    	lea    -0xfc(%ebp),%eax
f0110cc3:	50                   	push   %eax
f0110cc4:	e8 00 1e 02 00       	call   f0132ac9 <insert_sorted_with_merge_freeList>
f0110cc9:	83 c4 10             	add    $0x10,%esp
	//show_list_content(&FreeMemBlocksList);

	//Check 1: Check size of the AllocMemBlocksList
	if (LIST_SIZE(&(AllocMemBlocksList)) != 0 || LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks + 6 || LIST_SIZE(&(FreeMemBlocksList)) != 3)
f0110ccc:	a1 94 25 78 f0       	mov    0xf0782594,%eax
f0110cd1:	85 c0                	test   %eax,%eax
f0110cd3:	75 19                	jne    f0110cee <test_insert_sorted_with_merge_freeList+0xa92>
f0110cd5:	a1 64 26 78 f0       	mov    0xf0782664,%eax
f0110cda:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0110cdd:	83 c2 06             	add    $0x6,%edx
f0110ce0:	39 d0                	cmp    %edx,%eax
f0110ce2:	75 0a                	jne    f0110cee <test_insert_sorted_with_merge_freeList+0xa92>
f0110ce4:	a1 30 26 78 f0       	mov    0xf0782630,%eax
f0110ce9:	83 f8 03             	cmp    $0x3,%eax
f0110cec:	74 17                	je     f0110d05 <test_insert_sorted_with_merge_freeList+0xaa9>
		panic("insert_sorted_with_merge: Wrong sizes for AvailableMemBlocksList, FreeMemBlocksList and AllocMemBlocksList.");
f0110cee:	83 ec 04             	sub    $0x4,%esp
f0110cf1:	68 c0 88 13 f0       	push   $0xf01388c0
f0110cf6:	68 70 03 00 00       	push   $0x370
f0110cfb:	68 14 7d 13 f0       	push   $0xf0137d14
f0110d00:	e8 00 f5 fe ff       	call   f0100205 <_panic>

	//Check 2: Check the FreeMemBlocksList content
	size = 0;
f0110d05:	c7 45 94 00 00 00 00 	movl   $0x0,-0x6c(%ebp)
	actualSize = 3;
f0110d0c:	c7 45 f0 03 00 00 00 	movl   $0x3,-0x10(%ebp)
	blocksToInsertSVAs[idx_blocksToInsert-1] = 0x0;
f0110d13:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110d16:	48                   	dec    %eax
f0110d17:	c7 44 85 c0 00 00 00 	movl   $0x0,-0x40(%ebp,%eax,4)
f0110d1e:	00 
	blocksToInsertSizes[idx_blocksToInsert-1] = blocksToInsertSizes[idx_blocksToInsert-1] + blocksToInsertSizes[idx_blocksToInsert] + blocksToInsertSizes[idx_blocksToInsert+1];
f0110d1f:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110d22:	8d 50 ff             	lea    -0x1(%eax),%edx
f0110d25:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110d28:	48                   	dec    %eax
f0110d29:	8b 4c 85 98          	mov    -0x68(%ebp,%eax,4),%ecx
f0110d2d:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110d30:	8b 44 85 98          	mov    -0x68(%ebp,%eax,4),%eax
f0110d34:	01 c1                	add    %eax,%ecx
f0110d36:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110d39:	40                   	inc    %eax
f0110d3a:	8b 44 85 98          	mov    -0x68(%ebp,%eax,4),%eax
f0110d3e:	01 c8                	add    %ecx,%eax
f0110d40:	89 44 95 98          	mov    %eax,-0x68(%ebp,%edx,4)
	blocksToInsertSVAs[idx_blocksToInsert] = 0x0;
f0110d44:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110d47:	c7 44 85 c0 00 00 00 	movl   $0x0,-0x40(%ebp,%eax,4)
f0110d4e:	00 
	blocksToInsertSizes[idx_blocksToInsert] = 0;
f0110d4f:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110d52:	c7 44 85 98 00 00 00 	movl   $0x0,-0x68(%ebp,%eax,4)
f0110d59:	00 
	blocksToInsertSVAs[idx_blocksToInsert+1] = 0x0;
f0110d5a:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110d5d:	40                   	inc    %eax
f0110d5e:	c7 44 85 c0 00 00 00 	movl   $0x0,-0x40(%ebp,%eax,4)
f0110d65:	00 
	blocksToInsertSizes[idx_blocksToInsert+1] = 0;
f0110d66:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110d69:	40                   	inc    %eax
f0110d6a:	c7 44 85 98 00 00 00 	movl   $0x0,-0x68(%ebp,%eax,4)
f0110d71:	00 
	chk = check_list_data(&FreeMemBlocksList, blocksToInsertSVAs, blocksToInsertSizes, &size, actualSize);
f0110d72:	83 ec 0c             	sub    $0xc,%esp
f0110d75:	ff 75 f0             	pushl  -0x10(%ebp)
f0110d78:	8d 45 94             	lea    -0x6c(%ebp),%eax
f0110d7b:	50                   	push   %eax
f0110d7c:	8d 45 98             	lea    -0x68(%ebp),%eax
f0110d7f:	50                   	push   %eax
f0110d80:	8d 45 c0             	lea    -0x40(%ebp),%eax
f0110d83:	50                   	push   %eax
f0110d84:	68 24 26 78 f0       	push   $0xf0782624
f0110d89:	e8 b2 00 00 00       	call   f0110e40 <check_list_data>
f0110d8e:	83 c4 20             	add    $0x20,%esp
f0110d91:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if(chk != 1) panic("insert_sorted_with_merge: WRONG INSERT .. FreeMemBlocksList content is not correct.");
f0110d94:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f0110d98:	74 17                	je     f0110db1 <test_insert_sorted_with_merge_freeList+0xb55>
f0110d9a:	83 ec 04             	sub    $0x4,%esp
f0110d9d:	68 2c 89 13 f0       	push   $0xf013892c
f0110da2:	68 7c 03 00 00       	push   $0x37c
f0110da7:	68 14 7d 13 f0       	push   $0xf0137d14
f0110dac:	e8 54 f4 fe ff       	call   f0100205 <_panic>
	if(size != actualSize) panic("insert_sorted_with_merge: WRONG INSERT .. FreeMemBlocksList size is not correct.");
f0110db1:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0110db4:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0110db7:	74 17                	je     f0110dd0 <test_insert_sorted_with_merge_freeList+0xb74>
f0110db9:	83 ec 04             	sub    $0x4,%esp
f0110dbc:	68 80 89 13 f0       	push   $0xf0138980
f0110dc1:	68 7d 03 00 00       	push   $0x37d
f0110dc6:	68 14 7d 13 f0       	push   $0xf0137d14
f0110dcb:	e8 35 f4 fe ff       	call   f0100205 <_panic>

	//Check 3: Check the AvailableMemBlocksList content
	size = 0;
f0110dd0:	c7 45 94 00 00 00 00 	movl   $0x0,-0x6c(%ebp)
	chk = check_avaliable_list_data(&size);
f0110dd7:	83 ec 0c             	sub    $0xc,%esp
f0110dda:	8d 45 94             	lea    -0x6c(%ebp),%eax
f0110ddd:	50                   	push   %eax
f0110dde:	e8 29 01 00 00       	call   f0110f0c <check_avaliable_list_data>
f0110de3:	83 c4 10             	add    $0x10,%esp
f0110de6:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if(size != numOfBlocks + 6) panic("insert_sorted_with_merge: WRONG INSERT .. AvailableMemBlocksList size is not correct.");
f0110de9:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0110dec:	8d 50 06             	lea    0x6(%eax),%edx
f0110def:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0110df2:	39 c2                	cmp    %eax,%edx
f0110df4:	74 17                	je     f0110e0d <test_insert_sorted_with_merge_freeList+0xbb1>
f0110df6:	83 ec 04             	sub    $0x4,%esp
f0110df9:	68 d4 89 13 f0       	push   $0xf01389d4
f0110dfe:	68 82 03 00 00       	push   $0x382
f0110e03:	68 14 7d 13 f0       	push   $0xf0137d14
f0110e08:	e8 f8 f3 fe ff       	call   f0100205 <_panic>
	if(chk != 1) panic("insert_sorted_with_merge: WRONG INSERT .. AvailableMemBlocksList content is not correct.");
f0110e0d:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f0110e11:	74 17                	je     f0110e2a <test_insert_sorted_with_merge_freeList+0xbce>
f0110e13:	83 ec 04             	sub    $0x4,%esp
f0110e16:	68 2c 8a 13 f0       	push   $0xf0138a2c
f0110e1b:	68 83 03 00 00       	push   $0x383
f0110e20:	68 14 7d 13 f0       	push   $0xf0137d14
f0110e25:	e8 db f3 fe ff       	call   f0100205 <_panic>
	//====================================================================//


	//show_list_content(&FreeMemBlocksList);
	cprintf("Congratulations!! test insert_sorted_with_merge_freeList completed successfully.\n");
f0110e2a:	83 ec 0c             	sub    $0xc,%esp
f0110e2d:	68 88 8a 13 f0       	push   $0xf0138a88
f0110e32:	e8 d7 fe fe ff       	call   f0100d0e <cprintf>
f0110e37:	83 c4 10             	add    $0x10,%esp

}
f0110e3a:	90                   	nop
f0110e3b:	8b 7d fc             	mov    -0x4(%ebp),%edi
f0110e3e:	c9                   	leave  
f0110e3f:	c3                   	ret    

f0110e40 <check_list_data>:

/********************Helper Functions***************************/
int check_list_data(struct MemBlock_List* list, uint32* blocksSVAs, uint32* blocksSizes, uint32* size, uint32 actualSize)
{
f0110e40:	55                   	push   %ebp
f0110e41:	89 e5                	mov    %esp,%ebp
f0110e43:	83 ec 10             	sub    $0x10,%esp
	struct MemBlock* node = NULL;
f0110e46:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
	*size = 0;
f0110e4d:	8b 45 14             	mov    0x14(%ebp),%eax
f0110e50:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	int i = 0;
f0110e56:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
	LIST_FOREACH(node, list)
f0110e5d:	8b 45 08             	mov    0x8(%ebp),%eax
f0110e60:	8b 00                	mov    (%eax),%eax
f0110e62:	89 45 fc             	mov    %eax,-0x4(%ebp)
f0110e65:	eb 6e                	jmp    f0110ed5 <check_list_data+0x95>
	{
		while(blocksSizes[i] == 0) //Empty entry in the given ground truth array .. skip it
			i++;
f0110e67:	ff 45 f8             	incl   -0x8(%ebp)
	struct MemBlock* node = NULL;
	*size = 0;
	int i = 0;
	LIST_FOREACH(node, list)
	{
		while(blocksSizes[i] == 0) //Empty entry in the given ground truth array .. skip it
f0110e6a:	8b 45 f8             	mov    -0x8(%ebp),%eax
f0110e6d:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0110e74:	8b 45 10             	mov    0x10(%ebp),%eax
f0110e77:	01 d0                	add    %edx,%eax
f0110e79:	8b 00                	mov    (%eax),%eax
f0110e7b:	85 c0                	test   %eax,%eax
f0110e7d:	74 e8                	je     f0110e67 <check_list_data+0x27>
			i++;
		if(node->sva != blocksSVAs[(i)] || node->size != blocksSizes[i])
f0110e7f:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0110e82:	8b 50 08             	mov    0x8(%eax),%edx
f0110e85:	8b 45 f8             	mov    -0x8(%ebp),%eax
f0110e88:	8d 0c 85 00 00 00 00 	lea    0x0(,%eax,4),%ecx
f0110e8f:	8b 45 0c             	mov    0xc(%ebp),%eax
f0110e92:	01 c8                	add    %ecx,%eax
f0110e94:	8b 00                	mov    (%eax),%eax
f0110e96:	39 c2                	cmp    %eax,%edx
f0110e98:	75 1b                	jne    f0110eb5 <check_list_data+0x75>
f0110e9a:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0110e9d:	8b 50 0c             	mov    0xc(%eax),%edx
f0110ea0:	8b 45 f8             	mov    -0x8(%ebp),%eax
f0110ea3:	8d 0c 85 00 00 00 00 	lea    0x0(,%eax,4),%ecx
f0110eaa:	8b 45 10             	mov    0x10(%ebp),%eax
f0110ead:	01 c8                	add    %ecx,%eax
f0110eaf:	8b 00                	mov    (%eax),%eax
f0110eb1:	39 c2                	cmp    %eax,%edx
f0110eb3:	74 07                	je     f0110ebc <check_list_data+0x7c>
		{
//			cprintf("i = %d .. \n", i);
//			cprintf("Node data: sva = %x, size = %d\n", node->sva, node->size);
//			cprintf("blocks[i] data: sva = %x, size = %d\n", blocksSVAs[(i)], blocksSizes[i]);
			return 0;
f0110eb5:	b8 00 00 00 00       	mov    $0x0,%eax
f0110eba:	eb 4e                	jmp    f0110f0a <check_list_data+0xca>
		}
		(*size)++;
f0110ebc:	8b 45 14             	mov    0x14(%ebp),%eax
f0110ebf:	8b 00                	mov    (%eax),%eax
f0110ec1:	8d 50 01             	lea    0x1(%eax),%edx
f0110ec4:	8b 45 14             	mov    0x14(%ebp),%eax
f0110ec7:	89 10                	mov    %edx,(%eax)
		i++;
f0110ec9:	ff 45 f8             	incl   -0x8(%ebp)
int check_list_data(struct MemBlock_List* list, uint32* blocksSVAs, uint32* blocksSizes, uint32* size, uint32 actualSize)
{
	struct MemBlock* node = NULL;
	*size = 0;
	int i = 0;
	LIST_FOREACH(node, list)
f0110ecc:	8b 45 08             	mov    0x8(%ebp),%eax
f0110ecf:	8b 40 08             	mov    0x8(%eax),%eax
f0110ed2:	89 45 fc             	mov    %eax,-0x4(%ebp)
f0110ed5:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
f0110ed9:	74 07                	je     f0110ee2 <check_list_data+0xa2>
f0110edb:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0110ede:	8b 00                	mov    (%eax),%eax
f0110ee0:	eb 05                	jmp    f0110ee7 <check_list_data+0xa7>
f0110ee2:	b8 00 00 00 00       	mov    $0x0,%eax
f0110ee7:	8b 55 08             	mov    0x8(%ebp),%edx
f0110eea:	89 42 08             	mov    %eax,0x8(%edx)
f0110eed:	8b 45 08             	mov    0x8(%ebp),%eax
f0110ef0:	8b 40 08             	mov    0x8(%eax),%eax
f0110ef3:	85 c0                	test   %eax,%eax
f0110ef5:	0f 85 6f ff ff ff    	jne    f0110e6a <check_list_data+0x2a>
f0110efb:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
f0110eff:	0f 85 65 ff ff ff    	jne    f0110e6a <check_list_data+0x2a>
			return 0;
		}
		(*size)++;
		i++;
	}
	return 1;
f0110f05:	b8 01 00 00 00       	mov    $0x1,%eax
}
f0110f0a:	c9                   	leave  
f0110f0b:	c3                   	ret    

f0110f0c <check_avaliable_list_data>:

int check_avaliable_list_data(uint32* size)
{
f0110f0c:	55                   	push   %ebp
f0110f0d:	89 e5                	mov    %esp,%ebp
f0110f0f:	83 ec 10             	sub    $0x10,%esp
	struct MemBlock* node = NULL;
f0110f12:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
	*size = 0;
f0110f19:	8b 45 08             	mov    0x8(%ebp),%eax
f0110f1c:	c7 00 00 00 00 00    	movl   $0x0,(%eax)

	LIST_FOREACH(node, &AvailableMemBlocksList)
f0110f22:	a1 58 26 78 f0       	mov    0xf0782658,%eax
f0110f27:	89 45 fc             	mov    %eax,-0x4(%ebp)
f0110f2a:	eb 30                	jmp    f0110f5c <check_avaliable_list_data+0x50>
	{
		if(node->sva != 0x0 || node->size != 0)
f0110f2c:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0110f2f:	8b 40 08             	mov    0x8(%eax),%eax
f0110f32:	85 c0                	test   %eax,%eax
f0110f34:	75 0a                	jne    f0110f40 <check_avaliable_list_data+0x34>
f0110f36:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0110f39:	8b 40 0c             	mov    0xc(%eax),%eax
f0110f3c:	85 c0                	test   %eax,%eax
f0110f3e:	74 07                	je     f0110f47 <check_avaliable_list_data+0x3b>
		{
			return 0;
f0110f40:	b8 00 00 00 00       	mov    $0x0,%eax
f0110f45:	eb 40                	jmp    f0110f87 <check_avaliable_list_data+0x7b>
		}
		(*size)++;
f0110f47:	8b 45 08             	mov    0x8(%ebp),%eax
f0110f4a:	8b 00                	mov    (%eax),%eax
f0110f4c:	8d 50 01             	lea    0x1(%eax),%edx
f0110f4f:	8b 45 08             	mov    0x8(%ebp),%eax
f0110f52:	89 10                	mov    %edx,(%eax)
int check_avaliable_list_data(uint32* size)
{
	struct MemBlock* node = NULL;
	*size = 0;

	LIST_FOREACH(node, &AvailableMemBlocksList)
f0110f54:	a1 60 26 78 f0       	mov    0xf0782660,%eax
f0110f59:	89 45 fc             	mov    %eax,-0x4(%ebp)
f0110f5c:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
f0110f60:	74 07                	je     f0110f69 <check_avaliable_list_data+0x5d>
f0110f62:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0110f65:	8b 00                	mov    (%eax),%eax
f0110f67:	eb 05                	jmp    f0110f6e <check_avaliable_list_data+0x62>
f0110f69:	b8 00 00 00 00       	mov    $0x0,%eax
f0110f6e:	a3 60 26 78 f0       	mov    %eax,0xf0782660
f0110f73:	a1 60 26 78 f0       	mov    0xf0782660,%eax
f0110f78:	85 c0                	test   %eax,%eax
f0110f7a:	75 b0                	jne    f0110f2c <check_avaliable_list_data+0x20>
f0110f7c:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
f0110f80:	75 aa                	jne    f0110f2c <check_avaliable_list_data+0x20>
		{
			return 0;
		}
		(*size)++;
	}
	return 1;
f0110f82:	b8 01 00 00 00       	mov    $0x1,%eax
}
f0110f87:	c9                   	leave  
f0110f88:	c3                   	ret    

f0110f89 <show_list_content>:


void show_list_content(struct MemBlock_List* list)
{
f0110f89:	55                   	push   %ebp
f0110f8a:	89 e5                	mov    %esp,%ebp
f0110f8c:	83 ec 18             	sub    $0x18,%esp
	struct MemBlock* node = NULL;
f0110f8f:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	LIST_FOREACH(node, list)
f0110f96:	8b 45 08             	mov    0x8(%ebp),%eax
f0110f99:	8b 00                	mov    (%eax),%eax
f0110f9b:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0110f9e:	eb 27                	jmp    f0110fc7 <show_list_content+0x3e>
	{
		cprintf("Node data: sva = %x, size = %d\n", node->sva, node->size);
f0110fa0:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0110fa3:	8b 50 0c             	mov    0xc(%eax),%edx
f0110fa6:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0110fa9:	8b 40 08             	mov    0x8(%eax),%eax
f0110fac:	83 ec 04             	sub    $0x4,%esp
f0110faf:	52                   	push   %edx
f0110fb0:	50                   	push   %eax
f0110fb1:	68 d8 7d 13 f0       	push   $0xf0137dd8
f0110fb6:	e8 53 fd fe ff       	call   f0100d0e <cprintf>
f0110fbb:	83 c4 10             	add    $0x10,%esp


void show_list_content(struct MemBlock_List* list)
{
	struct MemBlock* node = NULL;
	LIST_FOREACH(node, list)
f0110fbe:	8b 45 08             	mov    0x8(%ebp),%eax
f0110fc1:	8b 40 08             	mov    0x8(%eax),%eax
f0110fc4:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0110fc7:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0110fcb:	74 07                	je     f0110fd4 <show_list_content+0x4b>
f0110fcd:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0110fd0:	8b 00                	mov    (%eax),%eax
f0110fd2:	eb 05                	jmp    f0110fd9 <show_list_content+0x50>
f0110fd4:	b8 00 00 00 00       	mov    $0x0,%eax
f0110fd9:	8b 55 08             	mov    0x8(%ebp),%edx
f0110fdc:	89 42 08             	mov    %eax,0x8(%edx)
f0110fdf:	8b 45 08             	mov    0x8(%ebp),%eax
f0110fe2:	8b 40 08             	mov    0x8(%eax),%eax
f0110fe5:	85 c0                	test   %eax,%eax
f0110fe7:	75 b7                	jne    f0110fa0 <show_list_content+0x17>
f0110fe9:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0110fed:	75 b1                	jne    f0110fa0 <show_list_content+0x17>
	{
		cprintf("Node data: sva = %x, size = %d\n", node->sva, node->size);
	}
}
f0110fef:	90                   	nop
f0110ff0:	c9                   	leave  
f0110ff1:	c3                   	ret    

f0110ff2 <TestAutoCompleteCommand>:
int CP(uint32* pd, uint32 va, uint32 ps, uint32 pc);
int CA(uint32 *ptr_dir, uint32 va);
int CPs(uint32 *ptr_dir, uint32 va, uint32 perms, uint32 which);
int CCP(uint32 *ptr_dir, uint32 ptr1, uint32 ptr2, uint32 size, int ref, uint32 dst_perms, uint32 dst_to_chk, uint32 src_perms, uint32 src_to_chk, uint8 chk_type);
int TestAutoCompleteCommand()
{
f0110ff2:	55                   	push   %ebp
f0110ff3:	89 e5                	mov    %esp,%ebp
f0110ff5:	57                   	push   %edi
f0110ff6:	56                   	push   %esi
f0110ff7:	53                   	push   %ebx
f0110ff8:	81 ec ac 01 00 00    	sub    $0x1ac,%esp
	cprintf("Automatic Testing of Autocomplete:\n");
f0110ffe:	83 ec 0c             	sub    $0xc,%esp
f0111001:	68 dc 8a 13 f0       	push   $0xf0138adc
f0111006:	e8 03 fd fe ff       	call   f0100d0e <cprintf>
f011100b:	83 c4 10             	add    $0x10,%esp
	cprintf("\n========================\n");
f011100e:	83 ec 0c             	sub    $0xc,%esp
f0111011:	68 00 8b 13 f0       	push   $0xf0138b00
f0111016:	e8 f3 fc fe ff       	call   f0100d0e <cprintf>
f011101b:	83 c4 10             	add    $0x10,%esp
	//	cprintf("========================\n");
	//	cprintf("Q2 Test: manually try the test cases in the doc. \n..."
	//			"OR, you can do it automatically by un-commenting the code in this function, it should output the same results in the Examples exist in the MS1 ppt\n");
	//
	//	int retValue = 0;
	int i = 0;
f011101e:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)

	//CASE1:
	//should execute the kernel_info command
	cprintf("==>Testing now AUTOCOMPLETE for: kernel_info\n");
f0111025:	83 ec 0c             	sub    $0xc,%esp
f0111028:	68 1c 8b 13 f0       	push   $0xf0138b1c
f011102d:	e8 dc fc fe ff       	call   f0100d0e <cprintf>
f0111032:	83 c4 10             	add    $0x10,%esp
	char cr0[100] = "kernel_info";
f0111035:	8d 45 80             	lea    -0x80(%ebp),%eax
f0111038:	bb d6 8b 13 f0       	mov    $0xf0138bd6,%ebx
f011103d:	ba 03 00 00 00       	mov    $0x3,%edx
f0111042:	89 c7                	mov    %eax,%edi
f0111044:	89 de                	mov    %ebx,%esi
f0111046:	89 d1                	mov    %edx,%ecx
f0111048:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
f011104a:	8d 55 8c             	lea    -0x74(%ebp),%edx
f011104d:	b9 16 00 00 00       	mov    $0x16,%ecx
f0111052:	b8 00 00 00 00       	mov    $0x0,%eax
f0111057:	89 d7                	mov    %edx,%edi
f0111059:	f3 ab                	rep stos %eax,%es:(%edi)
	execute_command(cr0) ;
f011105b:	83 ec 0c             	sub    $0xc,%esp
f011105e:	8d 45 80             	lea    -0x80(%ebp),%eax
f0111061:	50                   	push   %eax
f0111062:	e8 09 fd fe ff       	call   f0100d70 <execute_command>
f0111067:	83 c4 10             	add    $0x10,%esp
	cprintf("=================\n\n");
f011106a:	83 ec 0c             	sub    $0xc,%esp
f011106d:	68 4a 8b 13 f0       	push   $0xf0138b4a
f0111072:	e8 97 fc fe ff       	call   f0100d0e <cprintf>
f0111077:	83 c4 10             	add    $0x10,%esp

	//CASE2: should print the commands that start with he ---> Shall print (help)
	cprintf("==>Testing now AUTOCOMPLETE for: he\n");
f011107a:	83 ec 0c             	sub    $0xc,%esp
f011107d:	68 60 8b 13 f0       	push   $0xf0138b60
f0111082:	e8 87 fc fe ff       	call   f0100d0e <cprintf>
f0111087:	83 c4 10             	add    $0x10,%esp
	char cr2[100] = "he";
f011108a:	c7 85 1c ff ff ff 68 	movl   $0x6568,-0xe4(%ebp)
f0111091:	65 00 00 
f0111094:	8d 95 20 ff ff ff    	lea    -0xe0(%ebp),%edx
f011109a:	b9 18 00 00 00       	mov    $0x18,%ecx
f011109f:	b8 00 00 00 00       	mov    $0x0,%eax
f01110a4:	89 d7                	mov    %edx,%edi
f01110a6:	f3 ab                	rep stos %eax,%es:(%edi)
	execute_command(cr2) ;
f01110a8:	83 ec 0c             	sub    $0xc,%esp
f01110ab:	8d 85 1c ff ff ff    	lea    -0xe4(%ebp),%eax
f01110b1:	50                   	push   %eax
f01110b2:	e8 b9 fc fe ff       	call   f0100d70 <execute_command>
f01110b7:	83 c4 10             	add    $0x10,%esp
	cprintf("=================\n\n");
f01110ba:	83 ec 0c             	sub    $0xc,%esp
f01110bd:	68 4a 8b 13 f0       	push   $0xf0138b4a
f01110c2:	e8 47 fc fe ff       	call   f0100d0e <cprintf>
f01110c7:	83 c4 10             	add    $0x10,%esp


	//CASE3: should print the commands that start with ru ---> Shall print (rum, rub, rut, run, runall) .. Each in a separate line
	cprintf("==>Testing now AUTOCOMPLETE for: ru\n");
f01110ca:	83 ec 0c             	sub    $0xc,%esp
f01110cd:	68 88 8b 13 f0       	push   $0xf0138b88
f01110d2:	e8 37 fc fe ff       	call   f0100d0e <cprintf>
f01110d7:	83 c4 10             	add    $0x10,%esp
	char cr3[100] = "ru";
f01110da:	c7 85 b8 fe ff ff 72 	movl   $0x7572,-0x148(%ebp)
f01110e1:	75 00 00 
f01110e4:	8d 95 bc fe ff ff    	lea    -0x144(%ebp),%edx
f01110ea:	b9 18 00 00 00       	mov    $0x18,%ecx
f01110ef:	b8 00 00 00 00       	mov    $0x0,%eax
f01110f4:	89 d7                	mov    %edx,%edi
f01110f6:	f3 ab                	rep stos %eax,%es:(%edi)
	execute_command(cr3) ;
f01110f8:	83 ec 0c             	sub    $0xc,%esp
f01110fb:	8d 85 b8 fe ff ff    	lea    -0x148(%ebp),%eax
f0111101:	50                   	push   %eax
f0111102:	e8 69 fc fe ff       	call   f0100d70 <execute_command>
f0111107:	83 c4 10             	add    $0x10,%esp
	cprintf("=================\n\n");
f011110a:	83 ec 0c             	sub    $0xc,%esp
f011110d:	68 4a 8b 13 f0       	push   $0xf0138b4a
f0111112:	e8 f7 fb fe ff       	call   f0100d0e <cprintf>
f0111117:	83 c4 10             	add    $0x10,%esp

	//CASE4: should print unknown command
	cprintf("==>Testing now AUTOCOMPLETE for: smm\n");
f011111a:	83 ec 0c             	sub    $0xc,%esp
f011111d:	68 b0 8b 13 f0       	push   $0xf0138bb0
f0111122:	e8 e7 fb fe ff       	call   f0100d0e <cprintf>
f0111127:	83 c4 10             	add    $0x10,%esp
	char cr4[100] = "smm";
f011112a:	c7 85 54 fe ff ff 73 	movl   $0x6d6d73,-0x1ac(%ebp)
f0111131:	6d 6d 00 
f0111134:	8d 95 58 fe ff ff    	lea    -0x1a8(%ebp),%edx
f011113a:	b9 18 00 00 00       	mov    $0x18,%ecx
f011113f:	b8 00 00 00 00       	mov    $0x0,%eax
f0111144:	89 d7                	mov    %edx,%edi
f0111146:	f3 ab                	rep stos %eax,%es:(%edi)
	execute_command(cr4) ;
f0111148:	83 ec 0c             	sub    $0xc,%esp
f011114b:	8d 85 54 fe ff ff    	lea    -0x1ac(%ebp),%eax
f0111151:	50                   	push   %eax
f0111152:	e8 19 fc fe ff       	call   f0100d70 <execute_command>
f0111157:	83 c4 10             	add    $0x10,%esp
	cprintf("=================\n\n");
f011115a:	83 ec 0c             	sub    $0xc,%esp
f011115d:	68 4a 8b 13 f0       	push   $0xf0138b4a
f0111162:	e8 a7 fb fe ff       	call   f0100d0e <cprintf>
f0111167:	83 c4 10             	add    $0x10,%esp
	return 0;
f011116a:	b8 00 00 00 00       	mov    $0x0,%eax
}
f011116f:	8d 65 f4             	lea    -0xc(%ebp),%esp
f0111172:	5b                   	pop    %ebx
f0111173:	5e                   	pop    %esi
f0111174:	5f                   	pop    %edi
f0111175:	5d                   	pop    %ebp
f0111176:	c3                   	ret    

f0111177 <test_pt_set_page_permissions>:

//=====================================
// 1) TEST SET/CLEAR PAGE PERMISSIONS:
//=====================================
int test_pt_set_page_permissions()
{
f0111177:	55                   	push   %ebp
f0111178:	89 e5                	mov    %esp,%ebp
f011117a:	83 ec 18             	sub    $0x18,%esp
	//Case 1: Check setting a permission
	uint32 va = 0xEF800000;
f011117d:	c7 45 f4 00 00 80 ef 	movl   $0xef800000,-0xc(%ebp)
	uint32 permissions_to_set = PERM_PRESENT;
f0111184:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
	uint32 permissions_to_clear = 0;
f011118b:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
	pt_set_page_permissions(ptr_page_directory, va, permissions_to_set, permissions_to_clear);
f0111192:	a1 3c 26 78 f0       	mov    0xf078263c,%eax
f0111197:	ff 75 ec             	pushl  -0x14(%ebp)
f011119a:	ff 75 f0             	pushl  -0x10(%ebp)
f011119d:	ff 75 f4             	pushl  -0xc(%ebp)
f01111a0:	50                   	push   %eax
f01111a1:	e8 07 6a ff ff       	call   f0107bad <pt_set_page_permissions>
f01111a6:	83 c4 10             	add    $0x10,%esp
	int ret = CP(ptr_page_directory, va, permissions_to_set, permissions_to_clear);
f01111a9:	a1 3c 26 78 f0       	mov    0xf078263c,%eax
f01111ae:	ff 75 ec             	pushl  -0x14(%ebp)
f01111b1:	ff 75 f0             	pushl  -0x10(%ebp)
f01111b4:	ff 75 f4             	pushl  -0xc(%ebp)
f01111b7:	50                   	push   %eax
f01111b8:	e8 9e 4e 00 00       	call   f011605b <CP>
f01111bd:	83 c4 10             	add    $0x10,%esp
f01111c0:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if (ret != 1)
f01111c3:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f01111c7:	74 14                	je     f01111dd <test_pt_set_page_permissions+0x66>
	{
		panic("[EVAL] #1 Set Permission Failed.\n");
f01111c9:	83 ec 04             	sub    $0x4,%esp
f01111cc:	68 3c 8c 13 f0       	push   $0xf0138c3c
f01111d1:	6a 5a                	push   $0x5a
f01111d3:	68 5e 8c 13 f0       	push   $0xf0138c5e
f01111d8:	e8 28 f0 fe ff       	call   f0100205 <_panic>
	}

	//Case 2: Check setting MORE THAN ONE permission
	va = 0xEF801000;
f01111dd:	c7 45 f4 00 10 80 ef 	movl   $0xef801000,-0xc(%ebp)
	permissions_to_set = PERM_MODIFIED|PERM_USER;
f01111e4:	c7 45 f0 44 00 00 00 	movl   $0x44,-0x10(%ebp)
	permissions_to_clear = 0;
f01111eb:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
	pt_set_page_permissions(ptr_page_directory, va, permissions_to_set, permissions_to_clear);
f01111f2:	a1 3c 26 78 f0       	mov    0xf078263c,%eax
f01111f7:	ff 75 ec             	pushl  -0x14(%ebp)
f01111fa:	ff 75 f0             	pushl  -0x10(%ebp)
f01111fd:	ff 75 f4             	pushl  -0xc(%ebp)
f0111200:	50                   	push   %eax
f0111201:	e8 a7 69 ff ff       	call   f0107bad <pt_set_page_permissions>
f0111206:	83 c4 10             	add    $0x10,%esp

	ret = CP(ptr_page_directory, va, permissions_to_set, permissions_to_clear);
f0111209:	a1 3c 26 78 f0       	mov    0xf078263c,%eax
f011120e:	ff 75 ec             	pushl  -0x14(%ebp)
f0111211:	ff 75 f0             	pushl  -0x10(%ebp)
f0111214:	ff 75 f4             	pushl  -0xc(%ebp)
f0111217:	50                   	push   %eax
f0111218:	e8 3e 4e 00 00       	call   f011605b <CP>
f011121d:	83 c4 10             	add    $0x10,%esp
f0111220:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if (ret != 1)
f0111223:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f0111227:	74 14                	je     f011123d <test_pt_set_page_permissions+0xc6>
	{
		panic("[EVAL] #2 Set Permission Failed.\n");
f0111229:	83 ec 04             	sub    $0x4,%esp
f011122c:	68 7c 8c 13 f0       	push   $0xf0138c7c
f0111231:	6a 66                	push   $0x66
f0111233:	68 5e 8c 13 f0       	push   $0xf0138c5e
f0111238:	e8 c8 ef fe ff       	call   f0100205 <_panic>
	}

	va = 0xEF800000;
f011123d:	c7 45 f4 00 00 80 ef 	movl   $0xef800000,-0xc(%ebp)
	permissions_to_set = PERM_MODIFIED|PERM_USER|PERM_USED|PERM_PRESENT;
f0111244:	c7 45 f0 65 00 00 00 	movl   $0x65,-0x10(%ebp)
	permissions_to_clear = 0;
f011124b:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
	pt_set_page_permissions(ptr_page_directory, va, permissions_to_set, permissions_to_clear);
f0111252:	a1 3c 26 78 f0       	mov    0xf078263c,%eax
f0111257:	ff 75 ec             	pushl  -0x14(%ebp)
f011125a:	ff 75 f0             	pushl  -0x10(%ebp)
f011125d:	ff 75 f4             	pushl  -0xc(%ebp)
f0111260:	50                   	push   %eax
f0111261:	e8 47 69 ff ff       	call   f0107bad <pt_set_page_permissions>
f0111266:	83 c4 10             	add    $0x10,%esp

	ret = CP(ptr_page_directory, va, permissions_to_set, permissions_to_clear);
f0111269:	a1 3c 26 78 f0       	mov    0xf078263c,%eax
f011126e:	ff 75 ec             	pushl  -0x14(%ebp)
f0111271:	ff 75 f0             	pushl  -0x10(%ebp)
f0111274:	ff 75 f4             	pushl  -0xc(%ebp)
f0111277:	50                   	push   %eax
f0111278:	e8 de 4d 00 00       	call   f011605b <CP>
f011127d:	83 c4 10             	add    $0x10,%esp
f0111280:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if (ret != 1)
f0111283:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f0111287:	74 14                	je     f011129d <test_pt_set_page_permissions+0x126>
	{
		panic("[EVAL] #3 Set Permission Failed.\n");
f0111289:	83 ec 04             	sub    $0x4,%esp
f011128c:	68 a0 8c 13 f0       	push   $0xf0138ca0
f0111291:	6a 71                	push   $0x71
f0111293:	68 5e 8c 13 f0       	push   $0xf0138c5e
f0111298:	e8 68 ef fe ff       	call   f0100205 <_panic>
	}

	//Case 3: Check clearing a permission
	va = 0xF0000000;
f011129d:	c7 45 f4 00 00 00 f0 	movl   $0xf0000000,-0xc(%ebp)
	permissions_to_set = 0;
f01112a4:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	permissions_to_clear = PERM_PRESENT;
f01112ab:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
	pt_set_page_permissions(ptr_page_directory, va, permissions_to_set, permissions_to_clear);
f01112b2:	a1 3c 26 78 f0       	mov    0xf078263c,%eax
f01112b7:	ff 75 ec             	pushl  -0x14(%ebp)
f01112ba:	ff 75 f0             	pushl  -0x10(%ebp)
f01112bd:	ff 75 f4             	pushl  -0xc(%ebp)
f01112c0:	50                   	push   %eax
f01112c1:	e8 e7 68 ff ff       	call   f0107bad <pt_set_page_permissions>
f01112c6:	83 c4 10             	add    $0x10,%esp

	ret = CP(ptr_page_directory, va, permissions_to_set, permissions_to_clear);
f01112c9:	a1 3c 26 78 f0       	mov    0xf078263c,%eax
f01112ce:	ff 75 ec             	pushl  -0x14(%ebp)
f01112d1:	ff 75 f0             	pushl  -0x10(%ebp)
f01112d4:	ff 75 f4             	pushl  -0xc(%ebp)
f01112d7:	50                   	push   %eax
f01112d8:	e8 7e 4d 00 00       	call   f011605b <CP>
f01112dd:	83 c4 10             	add    $0x10,%esp
f01112e0:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if (ret != 1)
f01112e3:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f01112e7:	74 14                	je     f01112fd <test_pt_set_page_permissions+0x186>
	{
		panic("[EVAL] #4 Clear Permission Failed.\n");
f01112e9:	83 ec 04             	sub    $0x4,%esp
f01112ec:	68 c4 8c 13 f0       	push   $0xf0138cc4
f01112f1:	6a 7d                	push   $0x7d
f01112f3:	68 5e 8c 13 f0       	push   $0xf0138c5e
f01112f8:	e8 08 ef fe ff       	call   f0100205 <_panic>
	}

	//Case 4: Check clearing MORE THAN ONE permission
	va = 0xEF800000;
f01112fd:	c7 45 f4 00 00 80 ef 	movl   $0xef800000,-0xc(%ebp)
	permissions_to_set = 0;
f0111304:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	permissions_to_clear = PERM_MODIFIED|PERM_USER;
f011130b:	c7 45 ec 44 00 00 00 	movl   $0x44,-0x14(%ebp)
	pt_set_page_permissions(ptr_page_directory, va, permissions_to_set, permissions_to_clear);
f0111312:	a1 3c 26 78 f0       	mov    0xf078263c,%eax
f0111317:	ff 75 ec             	pushl  -0x14(%ebp)
f011131a:	ff 75 f0             	pushl  -0x10(%ebp)
f011131d:	ff 75 f4             	pushl  -0xc(%ebp)
f0111320:	50                   	push   %eax
f0111321:	e8 87 68 ff ff       	call   f0107bad <pt_set_page_permissions>
f0111326:	83 c4 10             	add    $0x10,%esp

	ret = CP(ptr_page_directory, va, permissions_to_set, permissions_to_clear);
f0111329:	a1 3c 26 78 f0       	mov    0xf078263c,%eax
f011132e:	ff 75 ec             	pushl  -0x14(%ebp)
f0111331:	ff 75 f0             	pushl  -0x10(%ebp)
f0111334:	ff 75 f4             	pushl  -0xc(%ebp)
f0111337:	50                   	push   %eax
f0111338:	e8 1e 4d 00 00       	call   f011605b <CP>
f011133d:	83 c4 10             	add    $0x10,%esp
f0111340:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if (ret != 1)
f0111343:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f0111347:	74 17                	je     f0111360 <test_pt_set_page_permissions+0x1e9>
	{
		panic("[EVAL] #5 Clear Permission Failed.\n");
f0111349:	83 ec 04             	sub    $0x4,%esp
f011134c:	68 e8 8c 13 f0       	push   $0xf0138ce8
f0111351:	68 89 00 00 00       	push   $0x89
f0111356:	68 5e 8c 13 f0       	push   $0xf0138c5e
f011135b:	e8 a5 ee fe ff       	call   f0100205 <_panic>
	}

	//Case 5: Check settiing & clearing MORE THAN ONE permission together
	va = 0xF0001000;
f0111360:	c7 45 f4 00 10 00 f0 	movl   $0xf0001000,-0xc(%ebp)
	permissions_to_set = PERM_USER|PERM_BUFFERED;
f0111367:	c7 45 f0 04 02 00 00 	movl   $0x204,-0x10(%ebp)
	permissions_to_clear = PERM_WRITEABLE|PERM_USED|PERM_MODIFIED;
f011136e:	c7 45 ec 62 00 00 00 	movl   $0x62,-0x14(%ebp)
	pt_set_page_permissions(ptr_page_directory, va, permissions_to_set, permissions_to_clear);
f0111375:	a1 3c 26 78 f0       	mov    0xf078263c,%eax
f011137a:	ff 75 ec             	pushl  -0x14(%ebp)
f011137d:	ff 75 f0             	pushl  -0x10(%ebp)
f0111380:	ff 75 f4             	pushl  -0xc(%ebp)
f0111383:	50                   	push   %eax
f0111384:	e8 24 68 ff ff       	call   f0107bad <pt_set_page_permissions>
f0111389:	83 c4 10             	add    $0x10,%esp

	ret = CP(ptr_page_directory, va, permissions_to_set, permissions_to_clear);
f011138c:	a1 3c 26 78 f0       	mov    0xf078263c,%eax
f0111391:	ff 75 ec             	pushl  -0x14(%ebp)
f0111394:	ff 75 f0             	pushl  -0x10(%ebp)
f0111397:	ff 75 f4             	pushl  -0xc(%ebp)
f011139a:	50                   	push   %eax
f011139b:	e8 bb 4c 00 00       	call   f011605b <CP>
f01113a0:	83 c4 10             	add    $0x10,%esp
f01113a3:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if (ret != 1)
f01113a6:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f01113aa:	74 17                	je     f01113c3 <test_pt_set_page_permissions+0x24c>
	{
		panic("[EVAL] #6 Set & Clear Permission Failed.\n");
f01113ac:	83 ec 04             	sub    $0x4,%esp
f01113af:	68 0c 8d 13 f0       	push   $0xf0138d0c
f01113b4:	68 95 00 00 00       	push   $0x95
f01113b9:	68 5e 8c 13 f0       	push   $0xf0138c5e
f01113be:	e8 42 ee fe ff       	call   f0100205 <_panic>
	}

	cprintf("Congratulations!! test pt_set&clear_page_permissions completed successfully.\n");
f01113c3:	83 ec 0c             	sub    $0xc,%esp
f01113c6:	68 38 8d 13 f0       	push   $0xf0138d38
f01113cb:	e8 3e f9 fe ff       	call   f0100d0e <cprintf>
f01113d0:	83 c4 10             	add    $0x10,%esp
	return 0;
f01113d3:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01113d8:	c9                   	leave  
f01113d9:	c3                   	ret    

f01113da <test_pt_set_page_permissions_invalid_va>:

int test_pt_set_page_permissions_invalid_va()
{
f01113da:	55                   	push   %ebp
f01113db:	89 e5                	mov    %esp,%ebp
f01113dd:	83 ec 18             	sub    $0x18,%esp
	uint32 va = 0x0;
f01113e0:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	uint32 permissions_to_set = PERM_PRESENT;
f01113e7:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
	uint32 permissions_to_clear = 0;
f01113ee:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
	pt_set_page_permissions(ptr_page_directory, va, permissions_to_set, permissions_to_clear);
f01113f5:	a1 3c 26 78 f0       	mov    0xf078263c,%eax
f01113fa:	ff 75 ec             	pushl  -0x14(%ebp)
f01113fd:	ff 75 f0             	pushl  -0x10(%ebp)
f0111400:	ff 75 f4             	pushl  -0xc(%ebp)
f0111403:	50                   	push   %eax
f0111404:	e8 a4 67 ff ff       	call   f0107bad <pt_set_page_permissions>
f0111409:	83 c4 10             	add    $0x10,%esp
	panic("WRONG PANIC - This test shall panic with your error message. Check handling setting permissions of an invalid virtual address with non existing page table.");
f011140c:	83 ec 04             	sub    $0x4,%esp
f011140f:	68 88 8d 13 f0       	push   $0xf0138d88
f0111414:	68 a2 00 00 00       	push   $0xa2
f0111419:	68 5e 8c 13 f0       	push   $0xf0138c5e
f011141e:	e8 e2 ed fe ff       	call   f0100205 <_panic>

f0111423 <test_pt_get_page_permissions>:

//=====================================
// 2) TEST GET PAGE PERMISSIONS:
//=====================================
int test_pt_get_page_permissions()
{
f0111423:	55                   	push   %ebp
f0111424:	89 e5                	mov    %esp,%ebp
f0111426:	83 ec 18             	sub    $0x18,%esp
	//Case 1: Check getting a permission of a non existing VA with NO table
	uint32 va = 0xeebfe000;
f0111429:	c7 45 f4 00 e0 bf ee 	movl   $0xeebfe000,-0xc(%ebp)
	int ret = pt_get_page_permissions(ptr_page_directory, va);
f0111430:	a1 3c 26 78 f0       	mov    0xf078263c,%eax
f0111435:	83 ec 08             	sub    $0x8,%esp
f0111438:	ff 75 f4             	pushl  -0xc(%ebp)
f011143b:	50                   	push   %eax
f011143c:	e8 20 68 ff ff       	call   f0107c61 <pt_get_page_permissions>
f0111441:	83 c4 10             	add    $0x10,%esp
f0111444:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (ret != -1)
f0111447:	83 7d f0 ff          	cmpl   $0xffffffff,-0x10(%ebp)
f011144b:	74 17                	je     f0111464 <test_pt_get_page_permissions+0x41>
	{
		panic("[EVAL] #1 Get Permission Failed.\n");
f011144d:	83 ec 04             	sub    $0x4,%esp
f0111450:	68 24 8e 13 f0       	push   $0xf0138e24
f0111455:	68 b0 00 00 00       	push   $0xb0
f011145a:	68 5e 8c 13 f0       	push   $0xf0138c5e
f011145f:	e8 a1 ed fe ff       	call   f0100205 <_panic>
	}

	//Case 2: Check getting a permission of a non existing VA with an existing table
	va = 0xEF800000;
f0111464:	c7 45 f4 00 00 80 ef 	movl   $0xef800000,-0xc(%ebp)
	ret = pt_get_page_permissions(ptr_page_directory, va);
f011146b:	a1 3c 26 78 f0       	mov    0xf078263c,%eax
f0111470:	83 ec 08             	sub    $0x8,%esp
f0111473:	ff 75 f4             	pushl  -0xc(%ebp)
f0111476:	50                   	push   %eax
f0111477:	e8 e5 67 ff ff       	call   f0107c61 <pt_get_page_permissions>
f011147c:	83 c4 10             	add    $0x10,%esp
f011147f:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (ret != 0)
f0111482:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0111486:	74 17                	je     f011149f <test_pt_get_page_permissions+0x7c>
	{
		panic("[EVAL] #2 Get Permission Failed.\n");
f0111488:	83 ec 04             	sub    $0x4,%esp
f011148b:	68 48 8e 13 f0       	push   $0xf0138e48
f0111490:	68 b8 00 00 00       	push   $0xb8
f0111495:	68 5e 8c 13 f0       	push   $0xf0138c5e
f011149a:	e8 66 ed fe ff       	call   f0100205 <_panic>
	}

	//Case 3: Check getting a permission of an existing VA with an existing table
	va = 0xf0000000;
f011149f:	c7 45 f4 00 00 00 f0 	movl   $0xf0000000,-0xc(%ebp)
	ret = pt_get_page_permissions(ptr_page_directory, va);
f01114a6:	a1 3c 26 78 f0       	mov    0xf078263c,%eax
f01114ab:	83 ec 08             	sub    $0x8,%esp
f01114ae:	ff 75 f4             	pushl  -0xc(%ebp)
f01114b1:	50                   	push   %eax
f01114b2:	e8 aa 67 ff ff       	call   f0107c61 <pt_get_page_permissions>
f01114b7:	83 c4 10             	add    $0x10,%esp
f01114ba:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (ret != 3)
f01114bd:	83 7d f0 03          	cmpl   $0x3,-0x10(%ebp)
f01114c1:	74 17                	je     f01114da <test_pt_get_page_permissions+0xb7>
	{
		panic("[EVAL] #3 Get Permission Failed.\n");
f01114c3:	83 ec 04             	sub    $0x4,%esp
f01114c6:	68 6c 8e 13 f0       	push   $0xf0138e6c
f01114cb:	68 c0 00 00 00       	push   $0xc0
f01114d0:	68 5e 8c 13 f0       	push   $0xf0138c5e
f01114d5:	e8 2b ed fe ff       	call   f0100205 <_panic>
	}

	va = 0xF1000000;
f01114da:	c7 45 f4 00 00 00 f1 	movl   $0xf1000000,-0xc(%ebp)
	ret = pt_get_page_permissions(ptr_page_directory, va);
f01114e1:	a1 3c 26 78 f0       	mov    0xf078263c,%eax
f01114e6:	83 ec 08             	sub    $0x8,%esp
f01114e9:	ff 75 f4             	pushl  -0xc(%ebp)
f01114ec:	50                   	push   %eax
f01114ed:	e8 6f 67 ff ff       	call   f0107c61 <pt_get_page_permissions>
f01114f2:	83 c4 10             	add    $0x10,%esp
f01114f5:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (ret != 3)
f01114f8:	83 7d f0 03          	cmpl   $0x3,-0x10(%ebp)
f01114fc:	74 17                	je     f0111515 <test_pt_get_page_permissions+0xf2>
	{
		panic("[EVAL] #4 Get Permission Failed.\n");
f01114fe:	83 ec 04             	sub    $0x4,%esp
f0111501:	68 90 8e 13 f0       	push   $0xf0138e90
f0111506:	68 c7 00 00 00       	push   $0xc7
f011150b:	68 5e 8c 13 f0       	push   $0xf0138c5e
f0111510:	e8 f0 ec fe ff       	call   f0100205 <_panic>
	}

	va = 0xF0001000;
f0111515:	c7 45 f4 00 10 00 f0 	movl   $0xf0001000,-0xc(%ebp)
	ret = pt_get_page_permissions(ptr_page_directory, va);
f011151c:	a1 3c 26 78 f0       	mov    0xf078263c,%eax
f0111521:	83 ec 08             	sub    $0x8,%esp
f0111524:	ff 75 f4             	pushl  -0xc(%ebp)
f0111527:	50                   	push   %eax
f0111528:	e8 34 67 ff ff       	call   f0107c61 <pt_get_page_permissions>
f011152d:	83 c4 10             	add    $0x10,%esp
f0111530:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (ret != 99)
f0111533:	83 7d f0 63          	cmpl   $0x63,-0x10(%ebp)
f0111537:	74 17                	je     f0111550 <test_pt_get_page_permissions+0x12d>
	{
		panic("[EVAL] #5 Get Permission Failed.\n");
f0111539:	83 ec 04             	sub    $0x4,%esp
f011153c:	68 b4 8e 13 f0       	push   $0xf0138eb4
f0111541:	68 ce 00 00 00       	push   $0xce
f0111546:	68 5e 8c 13 f0       	push   $0xf0138c5e
f011154b:	e8 b5 ec fe ff       	call   f0100205 <_panic>
	}
	cprintf("Congratulations!! test pt_get_page_permissions completed successfully.\n");
f0111550:	83 ec 0c             	sub    $0xc,%esp
f0111553:	68 d8 8e 13 f0       	push   $0xf0138ed8
f0111558:	e8 b1 f7 fe ff       	call   f0100d0e <cprintf>
f011155d:	83 c4 10             	add    $0x10,%esp
	return 0;
f0111560:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0111565:	c9                   	leave  
f0111566:	c3                   	ret    

f0111567 <test_pt_clear_page_table_entry>:

//=====================================
// 3) TEST CLEAR PAGE TABLE ENTRY:
//=====================================
int test_pt_clear_page_table_entry()
{
f0111567:	55                   	push   %ebp
f0111568:	89 e5                	mov    %esp,%ebp
f011156a:	83 ec 18             	sub    $0x18,%esp
	uint32 va = 0xF1000000;
f011156d:	c7 45 f4 00 00 00 f1 	movl   $0xf1000000,-0xc(%ebp)
	pt_clear_page_table_entry(ptr_page_directory, va);
f0111574:	a1 3c 26 78 f0       	mov    0xf078263c,%eax
f0111579:	83 ec 08             	sub    $0x8,%esp
f011157c:	ff 75 f4             	pushl  -0xc(%ebp)
f011157f:	50                   	push   %eax
f0111580:	e8 37 67 ff ff       	call   f0107cbc <pt_clear_page_table_entry>
f0111585:	83 c4 10             	add    $0x10,%esp
	int ret = CE(ptr_page_directory, va);
f0111588:	a1 3c 26 78 f0       	mov    0xf078263c,%eax
f011158d:	83 ec 08             	sub    $0x8,%esp
f0111590:	ff 75 f4             	pushl  -0xc(%ebp)
f0111593:	50                   	push   %eax
f0111594:	e8 1e 4a 00 00       	call   f0115fb7 <CE>
f0111599:	83 c4 10             	add    $0x10,%esp
f011159c:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (ret != 1)
f011159f:	83 7d f0 01          	cmpl   $0x1,-0x10(%ebp)
f01115a3:	74 17                	je     f01115bc <test_pt_clear_page_table_entry+0x55>
	{
		panic("[EVAL] #1 Clear Page Table Entry Failed.\n");
f01115a5:	83 ec 04             	sub    $0x4,%esp
f01115a8:	68 20 8f 13 f0       	push   $0xf0138f20
f01115ad:	68 de 00 00 00       	push   $0xde
f01115b2:	68 5e 8c 13 f0       	push   $0xf0138c5e
f01115b7:	e8 49 ec fe ff       	call   f0100205 <_panic>
	}

	va = 0xF0001000;
f01115bc:	c7 45 f4 00 10 00 f0 	movl   $0xf0001000,-0xc(%ebp)
	pt_clear_page_table_entry(ptr_page_directory, va);
f01115c3:	a1 3c 26 78 f0       	mov    0xf078263c,%eax
f01115c8:	83 ec 08             	sub    $0x8,%esp
f01115cb:	ff 75 f4             	pushl  -0xc(%ebp)
f01115ce:	50                   	push   %eax
f01115cf:	e8 e8 66 ff ff       	call   f0107cbc <pt_clear_page_table_entry>
f01115d4:	83 c4 10             	add    $0x10,%esp
	ret = CE(ptr_page_directory, va);
f01115d7:	a1 3c 26 78 f0       	mov    0xf078263c,%eax
f01115dc:	83 ec 08             	sub    $0x8,%esp
f01115df:	ff 75 f4             	pushl  -0xc(%ebp)
f01115e2:	50                   	push   %eax
f01115e3:	e8 cf 49 00 00       	call   f0115fb7 <CE>
f01115e8:	83 c4 10             	add    $0x10,%esp
f01115eb:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (ret != 1)
f01115ee:	83 7d f0 01          	cmpl   $0x1,-0x10(%ebp)
f01115f2:	74 17                	je     f011160b <test_pt_clear_page_table_entry+0xa4>
	{
		panic("[EVAL] #2 Clear Page Table Entry Failed.\n");
f01115f4:	83 ec 04             	sub    $0x4,%esp
f01115f7:	68 4c 8f 13 f0       	push   $0xf0138f4c
f01115fc:	68 e6 00 00 00       	push   $0xe6
f0111601:	68 5e 8c 13 f0       	push   $0xf0138c5e
f0111606:	e8 fa eb fe ff       	call   f0100205 <_panic>
	}

	va = 0xEF800000;
f011160b:	c7 45 f4 00 00 80 ef 	movl   $0xef800000,-0xc(%ebp)
	pt_clear_page_table_entry(ptr_page_directory, va);
f0111612:	a1 3c 26 78 f0       	mov    0xf078263c,%eax
f0111617:	83 ec 08             	sub    $0x8,%esp
f011161a:	ff 75 f4             	pushl  -0xc(%ebp)
f011161d:	50                   	push   %eax
f011161e:	e8 99 66 ff ff       	call   f0107cbc <pt_clear_page_table_entry>
f0111623:	83 c4 10             	add    $0x10,%esp
	ret = CE(ptr_page_directory, va);
f0111626:	a1 3c 26 78 f0       	mov    0xf078263c,%eax
f011162b:	83 ec 08             	sub    $0x8,%esp
f011162e:	ff 75 f4             	pushl  -0xc(%ebp)
f0111631:	50                   	push   %eax
f0111632:	e8 80 49 00 00       	call   f0115fb7 <CE>
f0111637:	83 c4 10             	add    $0x10,%esp
f011163a:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (ret != 1)
f011163d:	83 7d f0 01          	cmpl   $0x1,-0x10(%ebp)
f0111641:	74 17                	je     f011165a <test_pt_clear_page_table_entry+0xf3>
	{
		panic("[EVAL] #3 Clear Page Table Entry Failed.\n");
f0111643:	83 ec 04             	sub    $0x4,%esp
f0111646:	68 78 8f 13 f0       	push   $0xf0138f78
f011164b:	68 ee 00 00 00       	push   $0xee
f0111650:	68 5e 8c 13 f0       	push   $0xf0138c5e
f0111655:	e8 ab eb fe ff       	call   f0100205 <_panic>
	}

	va = 0xF0000000;
f011165a:	c7 45 f4 00 00 00 f0 	movl   $0xf0000000,-0xc(%ebp)
	pt_clear_page_table_entry(ptr_page_directory, va);
f0111661:	a1 3c 26 78 f0       	mov    0xf078263c,%eax
f0111666:	83 ec 08             	sub    $0x8,%esp
f0111669:	ff 75 f4             	pushl  -0xc(%ebp)
f011166c:	50                   	push   %eax
f011166d:	e8 4a 66 ff ff       	call   f0107cbc <pt_clear_page_table_entry>
f0111672:	83 c4 10             	add    $0x10,%esp
	ret = CE(ptr_page_directory, va);
f0111675:	a1 3c 26 78 f0       	mov    0xf078263c,%eax
f011167a:	83 ec 08             	sub    $0x8,%esp
f011167d:	ff 75 f4             	pushl  -0xc(%ebp)
f0111680:	50                   	push   %eax
f0111681:	e8 31 49 00 00       	call   f0115fb7 <CE>
f0111686:	83 c4 10             	add    $0x10,%esp
f0111689:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (ret != 1)
f011168c:	83 7d f0 01          	cmpl   $0x1,-0x10(%ebp)
f0111690:	74 17                	je     f01116a9 <test_pt_clear_page_table_entry+0x142>
	{
		panic("[EVAL] #4 Clear Page Table Entry Failed.\n");
f0111692:	83 ec 04             	sub    $0x4,%esp
f0111695:	68 a4 8f 13 f0       	push   $0xf0138fa4
f011169a:	68 f6 00 00 00       	push   $0xf6
f011169f:	68 5e 8c 13 f0       	push   $0xf0138c5e
f01116a4:	e8 5c eb fe ff       	call   f0100205 <_panic>
	}

	cprintf("Congratulations!! test pt_clear_page_table_entry completed successfully.\n");
f01116a9:	83 ec 0c             	sub    $0xc,%esp
f01116ac:	68 d0 8f 13 f0       	push   $0xf0138fd0
f01116b1:	e8 58 f6 fe ff       	call   f0100d0e <cprintf>
f01116b6:	83 c4 10             	add    $0x10,%esp
	return 0;
f01116b9:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01116be:	c9                   	leave  
f01116bf:	c3                   	ret    

f01116c0 <test_pt_clear_page_table_entry_invalid_va>:

int test_pt_clear_page_table_entry_invalid_va()
{
f01116c0:	55                   	push   %ebp
f01116c1:	89 e5                	mov    %esp,%ebp
f01116c3:	83 ec 18             	sub    $0x18,%esp
	uint32 va = 0x1000;
f01116c6:	c7 45 f4 00 10 00 00 	movl   $0x1000,-0xc(%ebp)
	pt_clear_page_table_entry(ptr_page_directory, va);
f01116cd:	a1 3c 26 78 f0       	mov    0xf078263c,%eax
f01116d2:	83 ec 08             	sub    $0x8,%esp
f01116d5:	ff 75 f4             	pushl  -0xc(%ebp)
f01116d8:	50                   	push   %eax
f01116d9:	e8 de 65 ff ff       	call   f0107cbc <pt_clear_page_table_entry>
f01116de:	83 c4 10             	add    $0x10,%esp
	panic("WRONG PANIC - This test shall panic with your error message. Check handling clearing the entry of an invalid virtual address non existing page table.");
f01116e1:	83 ec 04             	sub    $0x4,%esp
f01116e4:	68 1c 90 13 f0       	push   $0xf013901c
f01116e9:	68 01 01 00 00       	push   $0x101
f01116ee:	68 5e 8c 13 f0       	push   $0xf0138c5e
f01116f3:	e8 0d eb fe ff       	call   f0100205 <_panic>

f01116f8 <test_virtual_to_physical>:

//=====================================
// 4) TEST CONVERTING VA 2 PA:
//=====================================
int test_virtual_to_physical()
{
f01116f8:	55                   	push   %ebp
f01116f9:	89 e5                	mov    %esp,%ebp
f01116fb:	57                   	push   %edi
f01116fc:	56                   	push   %esi
f01116fd:	53                   	push   %ebx
f01116fe:	81 ec ac 01 00 00    	sub    $0x1ac,%esp
	int kilo = 1024 ;
f0111704:	c7 45 e4 00 04 00 00 	movl   $0x400,-0x1c(%ebp)
	int mega = 1024*1024 ;
f011170b:	c7 45 e0 00 00 10 00 	movl   $0x100000,-0x20(%ebp)
	uint32 va;
	ClearUserSpace(ptr_page_directory);
f0111712:	a1 3c 26 78 f0       	mov    0xf078263c,%eax
f0111717:	83 ec 0c             	sub    $0xc,%esp
f011171a:	50                   	push   %eax
f011171b:	e8 79 49 00 00       	call   f0116099 <ClearUserSpace>
f0111720:	83 c4 10             	add    $0x10,%esp

	//============================
	//Case 1: Check getting pa of a va with NO table
	va = 0xeebfe000;
f0111723:	c7 45 dc 00 e0 bf ee 	movl   $0xeebfe000,-0x24(%ebp)
	int pa = virtual_to_physical(ptr_page_directory, va);
f011172a:	a1 3c 26 78 f0       	mov    0xf078263c,%eax
f011172f:	83 ec 08             	sub    $0x8,%esp
f0111732:	ff 75 dc             	pushl  -0x24(%ebp)
f0111735:	50                   	push   %eax
f0111736:	e8 ed 65 ff ff       	call   f0107d28 <virtual_to_physical>
f011173b:	83 c4 10             	add    $0x10,%esp
f011173e:	89 45 d8             	mov    %eax,-0x28(%ebp)

	//cprintf("va = %x, pa = %x, ret pa = %d\n", va, CA(ptr_page_directory, va), pa);
	if(pa != -1)
f0111741:	83 7d d8 ff          	cmpl   $0xffffffff,-0x28(%ebp)
f0111745:	74 17                	je     f011175e <test_virtual_to_physical+0x66>
		panic("[EVAL] #1 Test of virtual_to_physical Entry Failed.\n");
f0111747:	83 ec 04             	sub    $0x4,%esp
f011174a:	68 b4 90 13 f0       	push   $0xf01390b4
f011174f:	68 16 01 00 00       	push   $0x116
f0111754:	68 5e 8c 13 f0       	push   $0xf0138c5e
f0111759:	e8 a7 ea fe ff       	call   f0100205 <_panic>

	//============================
	//Case 2: Check getting pa of a va with a table
	va = 0xf0000000;
f011175e:	c7 45 dc 00 00 00 f0 	movl   $0xf0000000,-0x24(%ebp)
	pa = virtual_to_physical(ptr_page_directory, va);
f0111765:	a1 3c 26 78 f0       	mov    0xf078263c,%eax
f011176a:	83 ec 08             	sub    $0x8,%esp
f011176d:	ff 75 dc             	pushl  -0x24(%ebp)
f0111770:	50                   	push   %eax
f0111771:	e8 b2 65 ff ff       	call   f0107d28 <virtual_to_physical>
f0111776:	83 c4 10             	add    $0x10,%esp
f0111779:	89 45 d8             	mov    %eax,-0x28(%ebp)

	//cprintf("va = %x, pa = %x, ret pa = %x\n", va, CA(ptr_page_directory, va), pa);
	if(pa != CA(ptr_page_directory, va))
f011177c:	a1 3c 26 78 f0       	mov    0xf078263c,%eax
f0111781:	83 ec 08             	sub    $0x8,%esp
f0111784:	ff 75 dc             	pushl  -0x24(%ebp)
f0111787:	50                   	push   %eax
f0111788:	e8 0b 48 00 00       	call   f0115f98 <CA>
f011178d:	83 c4 10             	add    $0x10,%esp
f0111790:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0111793:	74 17                	je     f01117ac <test_virtual_to_physical+0xb4>
		panic("[EVAL] #2 Test of virtual_to_physical Entry Failed.\n");
f0111795:	83 ec 04             	sub    $0x4,%esp
f0111798:	68 ec 90 13 f0       	push   $0xf01390ec
f011179d:	68 1f 01 00 00       	push   $0x11f
f01117a2:	68 5e 8c 13 f0       	push   $0xf0138c5e
f01117a7:	e8 59 ea fe ff       	call   f0100205 <_panic>

	//============================
	char ap1[100] = "ap 0x2800000";execute_command(ap1);
f01117ac:	8d 85 74 ff ff ff    	lea    -0x8c(%ebp),%eax
f01117b2:	bb b8 92 13 f0       	mov    $0xf01392b8,%ebx
f01117b7:	ba 0d 00 00 00       	mov    $0xd,%edx
f01117bc:	89 c7                	mov    %eax,%edi
f01117be:	89 de                	mov    %ebx,%esi
f01117c0:	89 d1                	mov    %edx,%ecx
f01117c2:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f01117c4:	8d 55 81             	lea    -0x7f(%ebp),%edx
f01117c7:	b9 57 00 00 00       	mov    $0x57,%ecx
f01117cc:	b0 00                	mov    $0x0,%al
f01117ce:	89 d7                	mov    %edx,%edi
f01117d0:	f3 aa                	rep stos %al,%es:(%edi)
f01117d2:	83 ec 0c             	sub    $0xc,%esp
f01117d5:	8d 85 74 ff ff ff    	lea    -0x8c(%ebp),%eax
f01117db:	50                   	push   %eax
f01117dc:	e8 8f f5 fe ff       	call   f0100d70 <execute_command>
f01117e1:	83 c4 10             	add    $0x10,%esp
	va = 0x2800000;
f01117e4:	c7 45 dc 00 00 80 02 	movl   $0x2800000,-0x24(%ebp)
	pa = virtual_to_physical(ptr_page_directory, va);
f01117eb:	a1 3c 26 78 f0       	mov    0xf078263c,%eax
f01117f0:	83 ec 08             	sub    $0x8,%esp
f01117f3:	ff 75 dc             	pushl  -0x24(%ebp)
f01117f6:	50                   	push   %eax
f01117f7:	e8 2c 65 ff ff       	call   f0107d28 <virtual_to_physical>
f01117fc:	83 c4 10             	add    $0x10,%esp
f01117ff:	89 45 d8             	mov    %eax,-0x28(%ebp)

	//cprintf("va = %x, pa = %x, ret pa = %x\n", va, CA(ptr_page_directory, va), pa);
	if(pa != CA(ptr_page_directory, va))
f0111802:	a1 3c 26 78 f0       	mov    0xf078263c,%eax
f0111807:	83 ec 08             	sub    $0x8,%esp
f011180a:	ff 75 dc             	pushl  -0x24(%ebp)
f011180d:	50                   	push   %eax
f011180e:	e8 85 47 00 00       	call   f0115f98 <CA>
f0111813:	83 c4 10             	add    $0x10,%esp
f0111816:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0111819:	74 17                	je     f0111832 <test_virtual_to_physical+0x13a>
		panic("[EVAL] #3 Test of virtual_to_physical Entry Failed.\n");
f011181b:	83 ec 04             	sub    $0x4,%esp
f011181e:	68 24 91 13 f0       	push   $0xf0139124
f0111823:	68 28 01 00 00       	push   $0x128
f0111828:	68 5e 8c 13 f0       	push   $0xf0138c5e
f011182d:	e8 d3 e9 fe ff       	call   f0100205 <_panic>

	//============================
	char ap2[100] = "ap 0x2801000";execute_command(ap2);
f0111832:	8d 85 10 ff ff ff    	lea    -0xf0(%ebp),%eax
f0111838:	bb 1c 93 13 f0       	mov    $0xf013931c,%ebx
f011183d:	ba 0d 00 00 00       	mov    $0xd,%edx
f0111842:	89 c7                	mov    %eax,%edi
f0111844:	89 de                	mov    %ebx,%esi
f0111846:	89 d1                	mov    %edx,%ecx
f0111848:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f011184a:	8d 95 1d ff ff ff    	lea    -0xe3(%ebp),%edx
f0111850:	b9 57 00 00 00       	mov    $0x57,%ecx
f0111855:	b0 00                	mov    $0x0,%al
f0111857:	89 d7                	mov    %edx,%edi
f0111859:	f3 aa                	rep stos %al,%es:(%edi)
f011185b:	83 ec 0c             	sub    $0xc,%esp
f011185e:	8d 85 10 ff ff ff    	lea    -0xf0(%ebp),%eax
f0111864:	50                   	push   %eax
f0111865:	e8 06 f5 fe ff       	call   f0100d70 <execute_command>
f011186a:	83 c4 10             	add    $0x10,%esp
	va = 0x2801000;
f011186d:	c7 45 dc 00 10 80 02 	movl   $0x2801000,-0x24(%ebp)
	pa = virtual_to_physical(ptr_page_directory, va);
f0111874:	a1 3c 26 78 f0       	mov    0xf078263c,%eax
f0111879:	83 ec 08             	sub    $0x8,%esp
f011187c:	ff 75 dc             	pushl  -0x24(%ebp)
f011187f:	50                   	push   %eax
f0111880:	e8 a3 64 ff ff       	call   f0107d28 <virtual_to_physical>
f0111885:	83 c4 10             	add    $0x10,%esp
f0111888:	89 45 d8             	mov    %eax,-0x28(%ebp)

	//cprintf("va = %x, pa = %x, ret pa = %x\n", va, CA(ptr_page_directory, va), pa);
	if(pa != CA(ptr_page_directory, va))
f011188b:	a1 3c 26 78 f0       	mov    0xf078263c,%eax
f0111890:	83 ec 08             	sub    $0x8,%esp
f0111893:	ff 75 dc             	pushl  -0x24(%ebp)
f0111896:	50                   	push   %eax
f0111897:	e8 fc 46 00 00       	call   f0115f98 <CA>
f011189c:	83 c4 10             	add    $0x10,%esp
f011189f:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f01118a2:	74 17                	je     f01118bb <test_virtual_to_physical+0x1c3>
		panic("[EVAL] #4 Test of virtual_to_physical Entry Failed.\n");
f01118a4:	83 ec 04             	sub    $0x4,%esp
f01118a7:	68 5c 91 13 f0       	push   $0xf013915c
f01118ac:	68 31 01 00 00       	push   $0x131
f01118b1:	68 5e 8c 13 f0       	push   $0xf0138c5e
f01118b6:	e8 4a e9 fe ff       	call   f0100205 <_panic>

	//============================
	char ap3[100] = "ap 0x2802000";execute_command(ap3);
f01118bb:	8d 85 ac fe ff ff    	lea    -0x154(%ebp),%eax
f01118c1:	bb 80 93 13 f0       	mov    $0xf0139380,%ebx
f01118c6:	ba 0d 00 00 00       	mov    $0xd,%edx
f01118cb:	89 c7                	mov    %eax,%edi
f01118cd:	89 de                	mov    %ebx,%esi
f01118cf:	89 d1                	mov    %edx,%ecx
f01118d1:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f01118d3:	8d 95 b9 fe ff ff    	lea    -0x147(%ebp),%edx
f01118d9:	b9 57 00 00 00       	mov    $0x57,%ecx
f01118de:	b0 00                	mov    $0x0,%al
f01118e0:	89 d7                	mov    %edx,%edi
f01118e2:	f3 aa                	rep stos %al,%es:(%edi)
f01118e4:	83 ec 0c             	sub    $0xc,%esp
f01118e7:	8d 85 ac fe ff ff    	lea    -0x154(%ebp),%eax
f01118ed:	50                   	push   %eax
f01118ee:	e8 7d f4 fe ff       	call   f0100d70 <execute_command>
f01118f3:	83 c4 10             	add    $0x10,%esp
	va = 0x2802000;
f01118f6:	c7 45 dc 00 20 80 02 	movl   $0x2802000,-0x24(%ebp)
	pa = virtual_to_physical(ptr_page_directory, va);
f01118fd:	a1 3c 26 78 f0       	mov    0xf078263c,%eax
f0111902:	83 ec 08             	sub    $0x8,%esp
f0111905:	ff 75 dc             	pushl  -0x24(%ebp)
f0111908:	50                   	push   %eax
f0111909:	e8 1a 64 ff ff       	call   f0107d28 <virtual_to_physical>
f011190e:	83 c4 10             	add    $0x10,%esp
f0111911:	89 45 d8             	mov    %eax,-0x28(%ebp)

	//cprintf("va = %x, pa = %x, ret pa = %x\n", va, CA(ptr_page_directory, va), pa);
	if(pa != CA(ptr_page_directory, va))
f0111914:	a1 3c 26 78 f0       	mov    0xf078263c,%eax
f0111919:	83 ec 08             	sub    $0x8,%esp
f011191c:	ff 75 dc             	pushl  -0x24(%ebp)
f011191f:	50                   	push   %eax
f0111920:	e8 73 46 00 00       	call   f0115f98 <CA>
f0111925:	83 c4 10             	add    $0x10,%esp
f0111928:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011192b:	74 17                	je     f0111944 <test_virtual_to_physical+0x24c>
		panic("[EVAL] #5 Test of virtual_to_physical Entry Failed.\n");
f011192d:	83 ec 04             	sub    $0x4,%esp
f0111930:	68 94 91 13 f0       	push   $0xf0139194
f0111935:	68 3a 01 00 00       	push   $0x13a
f011193a:	68 5e 8c 13 f0       	push   $0xf0138c5e
f011193f:	e8 c1 e8 fe ff       	call   f0100205 <_panic>

	//============================
	va = 0xF0001000;
f0111944:	c7 45 dc 00 10 00 f0 	movl   $0xf0001000,-0x24(%ebp)
	pa = virtual_to_physical(ptr_page_directory, va);
f011194b:	a1 3c 26 78 f0       	mov    0xf078263c,%eax
f0111950:	83 ec 08             	sub    $0x8,%esp
f0111953:	ff 75 dc             	pushl  -0x24(%ebp)
f0111956:	50                   	push   %eax
f0111957:	e8 cc 63 ff ff       	call   f0107d28 <virtual_to_physical>
f011195c:	83 c4 10             	add    $0x10,%esp
f011195f:	89 45 d8             	mov    %eax,-0x28(%ebp)

	//cprintf("va = %x, pa = %x, ret pa = %x\n", va, CA(ptr_page_directory, va), pa);
	if(pa != CA(ptr_page_directory, va))
f0111962:	a1 3c 26 78 f0       	mov    0xf078263c,%eax
f0111967:	83 ec 08             	sub    $0x8,%esp
f011196a:	ff 75 dc             	pushl  -0x24(%ebp)
f011196d:	50                   	push   %eax
f011196e:	e8 25 46 00 00       	call   f0115f98 <CA>
f0111973:	83 c4 10             	add    $0x10,%esp
f0111976:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0111979:	74 17                	je     f0111992 <test_virtual_to_physical+0x29a>
		panic("[EVAL] #6 Test of virtual_to_physical Entry Failed.\n");
f011197b:	83 ec 04             	sub    $0x4,%esp
f011197e:	68 cc 91 13 f0       	push   $0xf01391cc
f0111983:	68 42 01 00 00       	push   $0x142
f0111988:	68 5e 8c 13 f0       	push   $0xf0138c5e
f011198d:	e8 73 e8 fe ff       	call   f0100205 <_panic>

	//============================
	va = 0xF0001005;
f0111992:	c7 45 dc 05 10 00 f0 	movl   $0xf0001005,-0x24(%ebp)
	pa = virtual_to_physical(ptr_page_directory, va);
f0111999:	a1 3c 26 78 f0       	mov    0xf078263c,%eax
f011199e:	83 ec 08             	sub    $0x8,%esp
f01119a1:	ff 75 dc             	pushl  -0x24(%ebp)
f01119a4:	50                   	push   %eax
f01119a5:	e8 7e 63 ff ff       	call   f0107d28 <virtual_to_physical>
f01119aa:	83 c4 10             	add    $0x10,%esp
f01119ad:	89 45 d8             	mov    %eax,-0x28(%ebp)

	//cprintf("va = %x, pa = %x, ret pa = %x\n", va, CA(ptr_page_directory, va), pa);
	if(pa != CA(ptr_page_directory, va))
f01119b0:	a1 3c 26 78 f0       	mov    0xf078263c,%eax
f01119b5:	83 ec 08             	sub    $0x8,%esp
f01119b8:	ff 75 dc             	pushl  -0x24(%ebp)
f01119bb:	50                   	push   %eax
f01119bc:	e8 d7 45 00 00       	call   f0115f98 <CA>
f01119c1:	83 c4 10             	add    $0x10,%esp
f01119c4:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f01119c7:	74 17                	je     f01119e0 <test_virtual_to_physical+0x2e8>
		panic("[EVAL] #7 Test of virtual_to_physical Entry Failed.\n");
f01119c9:	83 ec 04             	sub    $0x4,%esp
f01119cc:	68 04 92 13 f0       	push   $0xf0139204
f01119d1:	68 4a 01 00 00       	push   $0x14a
f01119d6:	68 5e 8c 13 f0       	push   $0xf0138c5e
f01119db:	e8 25 e8 fe ff       	call   f0100205 <_panic>

	//============================
	char ap4[100] = "ap 0xeebfe000";execute_command(ap4);
f01119e0:	8d 85 48 fe ff ff    	lea    -0x1b8(%ebp),%eax
f01119e6:	bb e4 93 13 f0       	mov    $0xf01393e4,%ebx
f01119eb:	ba 0e 00 00 00       	mov    $0xe,%edx
f01119f0:	89 c7                	mov    %eax,%edi
f01119f2:	89 de                	mov    %ebx,%esi
f01119f4:	89 d1                	mov    %edx,%ecx
f01119f6:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f01119f8:	8d 95 56 fe ff ff    	lea    -0x1aa(%ebp),%edx
f01119fe:	b9 56 00 00 00       	mov    $0x56,%ecx
f0111a03:	b0 00                	mov    $0x0,%al
f0111a05:	89 d7                	mov    %edx,%edi
f0111a07:	f3 aa                	rep stos %al,%es:(%edi)
f0111a09:	83 ec 0c             	sub    $0xc,%esp
f0111a0c:	8d 85 48 fe ff ff    	lea    -0x1b8(%ebp),%eax
f0111a12:	50                   	push   %eax
f0111a13:	e8 58 f3 fe ff       	call   f0100d70 <execute_command>
f0111a18:	83 c4 10             	add    $0x10,%esp
	va = 0xeebfe000;
f0111a1b:	c7 45 dc 00 e0 bf ee 	movl   $0xeebfe000,-0x24(%ebp)
	pa = virtual_to_physical(ptr_page_directory, va);
f0111a22:	a1 3c 26 78 f0       	mov    0xf078263c,%eax
f0111a27:	83 ec 08             	sub    $0x8,%esp
f0111a2a:	ff 75 dc             	pushl  -0x24(%ebp)
f0111a2d:	50                   	push   %eax
f0111a2e:	e8 f5 62 ff ff       	call   f0107d28 <virtual_to_physical>
f0111a33:	83 c4 10             	add    $0x10,%esp
f0111a36:	89 45 d8             	mov    %eax,-0x28(%ebp)

	//cprintf("va = %x, pa = %x, ret pa = %x\n", va, CA(ptr_page_directory, va), pa);
	if(pa != CA(ptr_page_directory, va))
f0111a39:	a1 3c 26 78 f0       	mov    0xf078263c,%eax
f0111a3e:	83 ec 08             	sub    $0x8,%esp
f0111a41:	ff 75 dc             	pushl  -0x24(%ebp)
f0111a44:	50                   	push   %eax
f0111a45:	e8 4e 45 00 00       	call   f0115f98 <CA>
f0111a4a:	83 c4 10             	add    $0x10,%esp
f0111a4d:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0111a50:	74 17                	je     f0111a69 <test_virtual_to_physical+0x371>
		panic("[EVAL] #8 Test of virtual_to_physical Entry Failed.\n");
f0111a52:	83 ec 04             	sub    $0x4,%esp
f0111a55:	68 3c 92 13 f0       	push   $0xf013923c
f0111a5a:	68 53 01 00 00       	push   $0x153
f0111a5f:	68 5e 8c 13 f0       	push   $0xf0138c5e
f0111a64:	e8 9c e7 fe ff       	call   f0100205 <_panic>

	//============================
	cprintf("Congratulations!! test virtual_to_physical completed successfully.\n");
f0111a69:	83 ec 0c             	sub    $0xc,%esp
f0111a6c:	68 74 92 13 f0       	push   $0xf0139274
f0111a71:	e8 98 f2 fe ff       	call   f0100d0e <cprintf>
f0111a76:	83 c4 10             	add    $0x10,%esp

	return 0;
f0111a79:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0111a7e:	8d 65 f4             	lea    -0xc(%ebp),%esp
f0111a81:	5b                   	pop    %ebx
f0111a82:	5e                   	pop    %esi
f0111a83:	5f                   	pop    %edi
f0111a84:	5d                   	pop    %ebp
f0111a85:	c3                   	ret    

f0111a86 <test_cut_paste_pages>:

//===============================
// 1) TEST CUT-PASTE PAGES:
//===============================
int test_cut_paste_pages()
{
f0111a86:	55                   	push   %ebp
f0111a87:	89 e5                	mov    %esp,%ebp
f0111a89:	57                   	push   %edi
f0111a8a:	56                   	push   %esi
f0111a8b:	53                   	push   %ebx
f0111a8c:	81 ec ec 03 00 00    	sub    $0x3ec,%esp
	//Create a Temp. User Process
	char prog_name[50] = "fos_helloWorld";
f0111a92:	8d 85 5e ff ff ff    	lea    -0xa2(%ebp),%eax
f0111a98:	bb f8 96 13 f0       	mov    $0xf01396f8,%ebx
f0111a9d:	ba 0f 00 00 00       	mov    $0xf,%edx
f0111aa2:	89 c7                	mov    %eax,%edi
f0111aa4:	89 de                	mov    %ebx,%esi
f0111aa6:	89 d1                	mov    %edx,%ecx
f0111aa8:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0111aaa:	8d 95 6d ff ff ff    	lea    -0x93(%ebp),%edx
f0111ab0:	b9 23 00 00 00       	mov    $0x23,%ecx
f0111ab5:	b0 00                	mov    $0x0,%al
f0111ab7:	89 d7                	mov    %edx,%edi
f0111ab9:	f3 aa                	rep stos %al,%es:(%edi)
	struct Env* env = env_create(prog_name, 20, 10, 0);
f0111abb:	6a 00                	push   $0x0
f0111abd:	6a 0a                	push   $0xa
f0111abf:	6a 14                	push   $0x14
f0111ac1:	8d 85 5e ff ff ff    	lea    -0xa2(%ebp),%eax
f0111ac7:	50                   	push   %eax
f0111ac8:	e8 96 73 ff ff       	call   f0108e63 <env_create>
f0111acd:	83 c4 10             	add    $0x10,%esp
f0111ad0:	89 45 d8             	mov    %eax,-0x28(%ebp)
	uint32 *proc_directory = env->env_page_directory ;
f0111ad3:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0111ad6:	8b 40 5c             	mov    0x5c(%eax),%eax
f0111ad9:	89 45 d4             	mov    %eax,-0x2c(%ebp)
	lcr3(env->env_cr3) ;
f0111adc:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0111adf:	8b 40 60             	mov    0x60(%eax),%eax
f0111ae2:	89 45 90             	mov    %eax,-0x70(%ebp)
}

static __inline void
lcr3(uint32 val)
{
	__asm __volatile("movl %0,%%cr3" : : "r" (val));
f0111ae5:	8b 45 90             	mov    -0x70(%ebp),%eax
f0111ae8:	0f 22 d8             	mov    %eax,%cr3
	char aup[20] = "aup " ;
f0111aeb:	c7 85 4a ff ff ff 61 	movl   $0x20707561,-0xb6(%ebp)
f0111af2:	75 70 20 
f0111af5:	c7 85 4e ff ff ff 00 	movl   $0x0,-0xb2(%ebp)
f0111afc:	00 00 00 
f0111aff:	8d 95 52 ff ff ff    	lea    -0xae(%ebp),%edx
f0111b05:	b9 03 00 00 00       	mov    $0x3,%ecx
f0111b0a:	b8 00 00 00 00       	mov    $0x0,%eax
f0111b0f:	89 d7                	mov    %edx,%edi
f0111b11:	f3 ab                	rep stos %eax,%es:(%edi)
	char env_id[20] ; ltostr(env->env_id, env_id) ;
f0111b13:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0111b16:	8b 40 4c             	mov    0x4c(%eax),%eax
f0111b19:	83 ec 08             	sub    $0x8,%esp
f0111b1c:	8d 95 36 ff ff ff    	lea    -0xca(%ebp),%edx
f0111b22:	52                   	push   %edx
f0111b23:	50                   	push   %eax
f0111b24:	e8 6f fb 01 00       	call   f0131698 <ltostr>
f0111b29:	83 c4 10             	add    $0x10,%esp
	char aup_cmd[50];
	strcconcat(aup, env_id, aup_cmd);
f0111b2c:	83 ec 04             	sub    $0x4,%esp
f0111b2f:	8d 85 04 ff ff ff    	lea    -0xfc(%ebp),%eax
f0111b35:	50                   	push   %eax
f0111b36:	8d 85 36 ff ff ff    	lea    -0xca(%ebp),%eax
f0111b3c:	50                   	push   %eax
f0111b3d:	8d 85 4a ff ff ff    	lea    -0xb6(%ebp),%eax
f0111b43:	50                   	push   %eax
f0111b44:	e8 47 fc 01 00       	call   f0131790 <strcconcat>
f0111b49:	83 c4 10             	add    $0x10,%esp
	//===================================================
	int numOfArgs = 0;
f0111b4c:	c7 45 cc 00 00 00 00 	movl   $0x0,-0x34(%ebp)
	char *args[MAX_ARGUMENTS] ;

	char *ptr1, *ptr2, *ptr3, *ptr4, *ptr5, *ptr6;
	int kilo = 1024 ;
f0111b53:	c7 45 c8 00 04 00 00 	movl   $0x400,-0x38(%ebp)
	int mega = 1024*1024 ;
f0111b5a:	c7 45 c4 00 00 10 00 	movl   $0x100000,-0x3c(%ebp)

	ClearUserSpace(proc_directory);
f0111b61:	83 ec 0c             	sub    $0xc,%esp
f0111b64:	ff 75 d4             	pushl  -0x2c(%ebp)
f0111b67:	e8 2d 45 00 00       	call   f0116099 <ClearUserSpace>
f0111b6c:	83 c4 10             	add    $0x10,%esp

	char ap1[100] ;strcconcat(aup_cmd, " 0x2800000", ap1); execute_command(ap1);
f0111b6f:	83 ec 04             	sub    $0x4,%esp
f0111b72:	8d 85 60 fe ff ff    	lea    -0x1a0(%ebp),%eax
f0111b78:	50                   	push   %eax
f0111b79:	68 48 94 13 f0       	push   $0xf0139448
f0111b7e:	8d 85 04 ff ff ff    	lea    -0xfc(%ebp),%eax
f0111b84:	50                   	push   %eax
f0111b85:	e8 06 fc 01 00       	call   f0131790 <strcconcat>
f0111b8a:	83 c4 10             	add    $0x10,%esp
f0111b8d:	83 ec 0c             	sub    $0xc,%esp
f0111b90:	8d 85 60 fe ff ff    	lea    -0x1a0(%ebp),%eax
f0111b96:	50                   	push   %eax
f0111b97:	e8 d4 f1 fe ff       	call   f0100d70 <execute_command>
f0111b9c:	83 c4 10             	add    $0x10,%esp
	char ap2[100] ;strcconcat(aup_cmd, " 0x2801000", ap2); execute_command(ap2);
f0111b9f:	83 ec 04             	sub    $0x4,%esp
f0111ba2:	8d 85 fc fd ff ff    	lea    -0x204(%ebp),%eax
f0111ba8:	50                   	push   %eax
f0111ba9:	68 53 94 13 f0       	push   $0xf0139453
f0111bae:	8d 85 04 ff ff ff    	lea    -0xfc(%ebp),%eax
f0111bb4:	50                   	push   %eax
f0111bb5:	e8 d6 fb 01 00       	call   f0131790 <strcconcat>
f0111bba:	83 c4 10             	add    $0x10,%esp
f0111bbd:	83 ec 0c             	sub    $0xc,%esp
f0111bc0:	8d 85 fc fd ff ff    	lea    -0x204(%ebp),%eax
f0111bc6:	50                   	push   %eax
f0111bc7:	e8 a4 f1 fe ff       	call   f0100d70 <execute_command>
f0111bcc:	83 c4 10             	add    $0x10,%esp
	char ap3[100] ;strcconcat(aup_cmd, " 0x2802000", ap3); execute_command(ap3);
f0111bcf:	83 ec 04             	sub    $0x4,%esp
f0111bd2:	8d 85 98 fd ff ff    	lea    -0x268(%ebp),%eax
f0111bd8:	50                   	push   %eax
f0111bd9:	68 5e 94 13 f0       	push   $0xf013945e
f0111bde:	8d 85 04 ff ff ff    	lea    -0xfc(%ebp),%eax
f0111be4:	50                   	push   %eax
f0111be5:	e8 a6 fb 01 00       	call   f0131790 <strcconcat>
f0111bea:	83 c4 10             	add    $0x10,%esp
f0111bed:	83 ec 0c             	sub    $0xc,%esp
f0111bf0:	8d 85 98 fd ff ff    	lea    -0x268(%ebp),%eax
f0111bf6:	50                   	push   %eax
f0111bf7:	e8 74 f1 fe ff       	call   f0100d70 <execute_command>
f0111bfc:	83 c4 10             	add    $0x10,%esp

	ptr1 = (char*)0x2800000; *ptr1 = 'a';
f0111bff:	c7 45 c0 00 00 80 02 	movl   $0x2800000,-0x40(%ebp)
f0111c06:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0111c09:	c6 00 61             	movb   $0x61,(%eax)
	ptr1 = (char*)0x28017FF; *ptr1 = 'b';
f0111c0c:	c7 45 c0 ff 17 80 02 	movl   $0x28017ff,-0x40(%ebp)
f0111c13:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0111c16:	c6 00 62             	movb   $0x62,(%eax)
	ptr1 = (char*)0x2802FFF; *ptr1 = 'c';
f0111c19:	c7 45 c0 ff 2f 80 02 	movl   $0x2802fff,-0x40(%ebp)
f0111c20:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0111c23:	c6 00 63             	movb   $0x63,(%eax)

	uint32 perms = GP(proc_directory, (uint32)ptr1);
f0111c26:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0111c29:	83 ec 08             	sub    $0x8,%esp
f0111c2c:	50                   	push   %eax
f0111c2d:	ff 75 d4             	pushl  -0x2c(%ebp)
f0111c30:	e8 45 44 00 00       	call   f011607a <GP>
f0111c35:	83 c4 10             	add    $0x10,%esp
f0111c38:	89 45 bc             	mov    %eax,-0x44(%ebp)

	int eval = 0;
f0111c3b:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
	int correct = 1;
f0111c42:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
	int ff1 = sys_calculate_free_frames();
f0111c49:	e8 4f af ff ff       	call   f010cb9d <sys_calculate_free_frames>
f0111c4e:	89 45 b8             	mov    %eax,-0x48(%ebp)

	/*=============================================*/
	/*PART I: Destination Pages Does NOT Exist 60% */
	/*=============================================*/
	cprintf("CASE I: Destination Pages Does NOT Exist [60%]\n") ;
f0111c51:	83 ec 0c             	sub    $0xc,%esp
f0111c54:	68 6c 94 13 f0       	push   $0xf013946c
f0111c59:	e8 b0 f0 fe ff       	call   f0100d0e <cprintf>
f0111c5e:	83 c4 10             	add    $0x10,%esp
	int ret = cut_paste_pages(proc_directory, 0x2800000, 0x2900000, 3) ;
f0111c61:	6a 03                	push   $0x3
f0111c63:	68 00 00 90 02       	push   $0x2900000
f0111c68:	68 00 00 80 02       	push   $0x2800000
f0111c6d:	ff 75 d4             	pushl  -0x2c(%ebp)
f0111c70:	e8 db 6a ff ff       	call   f0108750 <cut_paste_pages>
f0111c75:	83 c4 10             	add    $0x10,%esp
f0111c78:	89 45 b4             	mov    %eax,-0x4c(%ebp)

	int ff2 = sys_calculate_free_frames();
f0111c7b:	e8 1d af ff ff       	call   f010cb9d <sys_calculate_free_frames>
f0111c80:	89 45 b0             	mov    %eax,-0x50(%ebp)

	correct = 1 ;
f0111c83:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
	if (ret != 0 || ff1 != ff2)
f0111c8a:	83 7d b4 00          	cmpl   $0x0,-0x4c(%ebp)
f0111c8e:	75 08                	jne    f0111c98 <test_cut_paste_pages+0x212>
f0111c90:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0111c93:	3b 45 b0             	cmp    -0x50(%ebp),%eax
f0111c96:	74 2b                	je     f0111cc3 <test_cut_paste_pages+0x23d>
	{
		warn("[EVAL] cut_paste_pages: Failed (# allocated frames is not correct) ret=%d diff=%d\n", ret, ff1 - ff2);
f0111c98:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0111c9b:	2b 45 b0             	sub    -0x50(%ebp),%eax
f0111c9e:	83 ec 0c             	sub    $0xc,%esp
f0111ca1:	50                   	push   %eax
f0111ca2:	ff 75 b4             	pushl  -0x4c(%ebp)
f0111ca5:	68 9c 94 13 f0       	push   $0xf013949c
f0111caa:	68 91 01 00 00       	push   $0x191
f0111caf:	68 5e 8c 13 f0       	push   $0xf0138c5e
f0111cb4:	e8 5a e7 fe ff       	call   f0100413 <_warn>
f0111cb9:	83 c4 20             	add    $0x20,%esp
		correct = 0;
f0111cbc:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
	}
	if (correct) eval += 5 ;
f0111cc3:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0111cc7:	74 04                	je     f0111ccd <test_cut_paste_pages+0x247>
f0111cc9:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
	correct = 1 ;
f0111ccd:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

	if (CCP(proc_directory, 0x2800000, 0x2900000, 3*PAGE_SIZE, 1, perms, 0xFFF, 0, 0x001, CHK_CUT_PASTE) != 1)
f0111cd4:	83 ec 08             	sub    $0x8,%esp
f0111cd7:	6a 00                	push   $0x0
f0111cd9:	6a 01                	push   $0x1
f0111cdb:	6a 00                	push   $0x0
f0111cdd:	68 ff 0f 00 00       	push   $0xfff
f0111ce2:	ff 75 bc             	pushl  -0x44(%ebp)
f0111ce5:	6a 01                	push   $0x1
f0111ce7:	68 00 30 00 00       	push   $0x3000
f0111cec:	68 00 00 90 02       	push   $0x2900000
f0111cf1:	68 00 00 80 02       	push   $0x2800000
f0111cf6:	ff 75 d4             	pushl  -0x2c(%ebp)
f0111cf9:	e8 cf 43 00 00       	call   f01160cd <CCP>
f0111cfe:	83 c4 30             	add    $0x30,%esp
f0111d01:	83 f8 01             	cmp    $0x1,%eax
f0111d04:	74 21                	je     f0111d27 <test_cut_paste_pages+0x2a1>
	{
		warn("[EVAL] cut_paste_pages: Failed (problem in permissions and/or references\n");
f0111d06:	83 ec 04             	sub    $0x4,%esp
f0111d09:	68 f0 94 13 f0       	push   $0xf01394f0
f0111d0e:	68 99 01 00 00       	push   $0x199
f0111d13:	68 5e 8c 13 f0       	push   $0xf0138c5e
f0111d18:	e8 f6 e6 fe ff       	call   f0100413 <_warn>
f0111d1d:	83 c4 10             	add    $0x10,%esp
		correct = 0;
f0111d20:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
	}
	if (correct) eval += 15 ;
f0111d27:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0111d2b:	74 04                	je     f0111d31 <test_cut_paste_pages+0x2ab>
f0111d2d:	83 45 e4 0f          	addl   $0xf,-0x1c(%ebp)
	correct = 1 ;
f0111d31:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

	if (CB(proc_directory, 0x2900000, 0) && CB(proc_directory, 0x2901000, 0) && CB(proc_directory, 0x2902000, 0))
f0111d38:	83 ec 04             	sub    $0x4,%esp
f0111d3b:	6a 00                	push   $0x0
f0111d3d:	68 00 00 90 02       	push   $0x2900000
f0111d42:	ff 75 d4             	pushl  -0x2c(%ebp)
f0111d45:	e8 5f 41 00 00       	call   f0115ea9 <CB>
f0111d4a:	83 c4 10             	add    $0x10,%esp
f0111d4d:	85 c0                	test   %eax,%eax
f0111d4f:	0f 84 f6 00 00 00    	je     f0111e4b <test_cut_paste_pages+0x3c5>
f0111d55:	83 ec 04             	sub    $0x4,%esp
f0111d58:	6a 00                	push   $0x0
f0111d5a:	68 00 10 90 02       	push   $0x2901000
f0111d5f:	ff 75 d4             	pushl  -0x2c(%ebp)
f0111d62:	e8 42 41 00 00       	call   f0115ea9 <CB>
f0111d67:	83 c4 10             	add    $0x10,%esp
f0111d6a:	85 c0                	test   %eax,%eax
f0111d6c:	0f 84 d9 00 00 00    	je     f0111e4b <test_cut_paste_pages+0x3c5>
f0111d72:	83 ec 04             	sub    $0x4,%esp
f0111d75:	6a 00                	push   $0x0
f0111d77:	68 00 20 90 02       	push   $0x2902000
f0111d7c:	ff 75 d4             	pushl  -0x2c(%ebp)
f0111d7f:	e8 25 41 00 00       	call   f0115ea9 <CB>
f0111d84:	83 c4 10             	add    $0x10,%esp
f0111d87:	85 c0                	test   %eax,%eax
f0111d89:	0f 84 bc 00 00 00    	je     f0111e4b <test_cut_paste_pages+0x3c5>
	{
		ptr1 = (char*)0x2900000;
f0111d8f:	c7 45 c0 00 00 90 02 	movl   $0x2900000,-0x40(%ebp)
		ptr2 = (char*)0x29017FF;
f0111d96:	c7 45 ac ff 17 90 02 	movl   $0x29017ff,-0x54(%ebp)
		ptr3 = (char*)0x2902FFF;
f0111d9d:	c7 45 a8 ff 2f 90 02 	movl   $0x2902fff,-0x58(%ebp)
		if ((*ptr1) != 'a' || (*ptr2) != 'b' || (*ptr3) != 'c')
f0111da4:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0111da7:	8a 00                	mov    (%eax),%al
f0111da9:	3c 61                	cmp    $0x61,%al
f0111dab:	75 12                	jne    f0111dbf <test_cut_paste_pages+0x339>
f0111dad:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0111db0:	8a 00                	mov    (%eax),%al
f0111db2:	3c 62                	cmp    $0x62,%al
f0111db4:	75 09                	jne    f0111dbf <test_cut_paste_pages+0x339>
f0111db6:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0111db9:	8a 00                	mov    (%eax),%al
f0111dbb:	3c 63                	cmp    $0x63,%al
f0111dbd:	74 21                	je     f0111de0 <test_cut_paste_pages+0x35a>
		{
			warn("[EVAL] cut_paste_pages: Failed (content is not correct)\n");
f0111dbf:	83 ec 04             	sub    $0x4,%esp
f0111dc2:	68 3c 95 13 f0       	push   $0xf013953c
f0111dc7:	68 a6 01 00 00       	push   $0x1a6
f0111dcc:	68 5e 8c 13 f0       	push   $0xf0138c5e
f0111dd1:	e8 3d e6 fe ff       	call   f0100413 <_warn>
f0111dd6:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0111dd9:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		}
		if (correct) eval += 5 ;
f0111de0:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0111de4:	74 04                	je     f0111dea <test_cut_paste_pages+0x364>
f0111de6:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0111dea:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

		if (CB(proc_directory, 0x2901000, 1))
f0111df1:	83 ec 04             	sub    $0x4,%esp
f0111df4:	6a 01                	push   $0x1
f0111df6:	68 00 10 90 02       	push   $0x2901000
f0111dfb:	ff 75 d4             	pushl  -0x2c(%ebp)
f0111dfe:	e8 a6 40 00 00       	call   f0115ea9 <CB>
f0111e03:	83 c4 10             	add    $0x10,%esp
f0111e06:	85 c0                	test   %eax,%eax
f0111e08:	74 41                	je     f0111e4b <test_cut_paste_pages+0x3c5>
		{
			*ptr2 = 'y';
f0111e0a:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0111e0d:	c6 00 79             	movb   $0x79,(%eax)
			if ((*ptr2) != 'y')
f0111e10:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0111e13:	8a 00                	mov    (%eax),%al
f0111e15:	3c 79                	cmp    $0x79,%al
f0111e17:	74 21                	je     f0111e3a <test_cut_paste_pages+0x3b4>
			{
				warn("[EVAL] cut_paste_pages: Failed (content is not correct)\n");
f0111e19:	83 ec 04             	sub    $0x4,%esp
f0111e1c:	68 3c 95 13 f0       	push   $0xf013953c
f0111e21:	68 b1 01 00 00       	push   $0x1b1
f0111e26:	68 5e 8c 13 f0       	push   $0xf0138c5e
f0111e2b:	e8 e3 e5 fe ff       	call   f0100413 <_warn>
f0111e30:	83 c4 10             	add    $0x10,%esp
				correct = 0;
f0111e33:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
			}
			if (correct) eval += 5 ;
f0111e3a:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0111e3e:	74 04                	je     f0111e44 <test_cut_paste_pages+0x3be>
f0111e40:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
			correct = 1 ;
f0111e44:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
		}
	}


	ff1 = ff2 ;
f0111e4b:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0111e4e:	89 45 b8             	mov    %eax,-0x48(%ebp)

	ret = cut_paste_pages(proc_directory, 0x2901000, 0x2BFF000, 2) ;
f0111e51:	6a 02                	push   $0x2
f0111e53:	68 00 f0 bf 02       	push   $0x2bff000
f0111e58:	68 00 10 90 02       	push   $0x2901000
f0111e5d:	ff 75 d4             	pushl  -0x2c(%ebp)
f0111e60:	e8 eb 68 ff ff       	call   f0108750 <cut_paste_pages>
f0111e65:	83 c4 10             	add    $0x10,%esp
f0111e68:	89 45 b4             	mov    %eax,-0x4c(%ebp)

	ff2 = sys_calculate_free_frames();
f0111e6b:	e8 2d ad ff ff       	call   f010cb9d <sys_calculate_free_frames>
f0111e70:	89 45 b0             	mov    %eax,-0x50(%ebp)

	if (ret != 0 || ff1 - ff2 != 1)
f0111e73:	83 7d b4 00          	cmpl   $0x0,-0x4c(%ebp)
f0111e77:	75 0b                	jne    f0111e84 <test_cut_paste_pages+0x3fe>
f0111e79:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0111e7c:	2b 45 b0             	sub    -0x50(%ebp),%eax
f0111e7f:	83 f8 01             	cmp    $0x1,%eax
f0111e82:	74 2b                	je     f0111eaf <test_cut_paste_pages+0x429>
	{
		warn("[EVAL] cut_paste_pages: Failed (# allocated frames is not correct) ret=%d diff=%d\n", ret, ff1 - ff2);
f0111e84:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0111e87:	2b 45 b0             	sub    -0x50(%ebp),%eax
f0111e8a:	83 ec 0c             	sub    $0xc,%esp
f0111e8d:	50                   	push   %eax
f0111e8e:	ff 75 b4             	pushl  -0x4c(%ebp)
f0111e91:	68 9c 94 13 f0       	push   $0xf013949c
f0111e96:	68 c2 01 00 00       	push   $0x1c2
f0111e9b:	68 5e 8c 13 f0       	push   $0xf0138c5e
f0111ea0:	e8 6e e5 fe ff       	call   f0100413 <_warn>
f0111ea5:	83 c4 20             	add    $0x20,%esp
		correct = 0;
f0111ea8:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
	}
	if (correct) eval += 10 ;
f0111eaf:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0111eb3:	74 04                	je     f0111eb9 <test_cut_paste_pages+0x433>
f0111eb5:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
	correct = 1 ;
f0111eb9:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

	if (CCP(proc_directory, 0x2901000, 0x2BFF000, 2*PAGE_SIZE, 1, perms , 0xFFF, 0, 0x001, CHK_CUT_PASTE) != 1)
f0111ec0:	83 ec 08             	sub    $0x8,%esp
f0111ec3:	6a 00                	push   $0x0
f0111ec5:	6a 01                	push   $0x1
f0111ec7:	6a 00                	push   $0x0
f0111ec9:	68 ff 0f 00 00       	push   $0xfff
f0111ece:	ff 75 bc             	pushl  -0x44(%ebp)
f0111ed1:	6a 01                	push   $0x1
f0111ed3:	68 00 20 00 00       	push   $0x2000
f0111ed8:	68 00 f0 bf 02       	push   $0x2bff000
f0111edd:	68 00 10 90 02       	push   $0x2901000
f0111ee2:	ff 75 d4             	pushl  -0x2c(%ebp)
f0111ee5:	e8 e3 41 00 00       	call   f01160cd <CCP>
f0111eea:	83 c4 30             	add    $0x30,%esp
f0111eed:	83 f8 01             	cmp    $0x1,%eax
f0111ef0:	74 21                	je     f0111f13 <test_cut_paste_pages+0x48d>
	{
		warn("[EVAL] cut_paste_pages: Failed (problem in permissions and/or references\n");
f0111ef2:	83 ec 04             	sub    $0x4,%esp
f0111ef5:	68 f0 94 13 f0       	push   $0xf01394f0
f0111efa:	68 ca 01 00 00       	push   $0x1ca
f0111eff:	68 5e 8c 13 f0       	push   $0xf0138c5e
f0111f04:	e8 0a e5 fe ff       	call   f0100413 <_warn>
f0111f09:	83 c4 10             	add    $0x10,%esp
		correct = 0;
f0111f0c:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
	}
	if (correct) eval += 10 ;
f0111f13:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0111f17:	74 04                	je     f0111f1d <test_cut_paste_pages+0x497>
f0111f19:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
	correct = 1 ;
f0111f1d:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

	if (CB(proc_directory, 0x2BFF7FF, 0) && CB(proc_directory, 0x2C00FFF, 0))
f0111f24:	83 ec 04             	sub    $0x4,%esp
f0111f27:	6a 00                	push   $0x0
f0111f29:	68 ff f7 bf 02       	push   $0x2bff7ff
f0111f2e:	ff 75 d4             	pushl  -0x2c(%ebp)
f0111f31:	e8 73 3f 00 00       	call   f0115ea9 <CB>
f0111f36:	83 c4 10             	add    $0x10,%esp
f0111f39:	85 c0                	test   %eax,%eax
f0111f3b:	74 6b                	je     f0111fa8 <test_cut_paste_pages+0x522>
f0111f3d:	83 ec 04             	sub    $0x4,%esp
f0111f40:	6a 00                	push   $0x0
f0111f42:	68 ff 0f c0 02       	push   $0x2c00fff
f0111f47:	ff 75 d4             	pushl  -0x2c(%ebp)
f0111f4a:	e8 5a 3f 00 00       	call   f0115ea9 <CB>
f0111f4f:	83 c4 10             	add    $0x10,%esp
f0111f52:	85 c0                	test   %eax,%eax
f0111f54:	74 52                	je     f0111fa8 <test_cut_paste_pages+0x522>
	{
		ptr1 = (char*)0x2BFF7FF;
f0111f56:	c7 45 c0 ff f7 bf 02 	movl   $0x2bff7ff,-0x40(%ebp)
		ptr2 = (char*)0x2C00FFF;
f0111f5d:	c7 45 ac ff 0f c0 02 	movl   $0x2c00fff,-0x54(%ebp)
		if ((*ptr1) != 'y' || (*ptr2) != 'c')
f0111f64:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0111f67:	8a 00                	mov    (%eax),%al
f0111f69:	3c 79                	cmp    $0x79,%al
f0111f6b:	75 09                	jne    f0111f76 <test_cut_paste_pages+0x4f0>
f0111f6d:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0111f70:	8a 00                	mov    (%eax),%al
f0111f72:	3c 63                	cmp    $0x63,%al
f0111f74:	74 21                	je     f0111f97 <test_cut_paste_pages+0x511>
		{
			warn("[EVAL] cut_paste_pages: Failed (content is not correct)\n");
f0111f76:	83 ec 04             	sub    $0x4,%esp
f0111f79:	68 3c 95 13 f0       	push   $0xf013953c
f0111f7e:	68 d6 01 00 00       	push   $0x1d6
f0111f83:	68 5e 8c 13 f0       	push   $0xf0138c5e
f0111f88:	e8 86 e4 fe ff       	call   f0100413 <_warn>
f0111f8d:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0111f90:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		}
		if (correct) eval += 10 ;
f0111f97:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0111f9b:	74 04                	je     f0111fa1 <test_cut_paste_pages+0x51b>
f0111f9d:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f0111fa1:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
	}
	cprintf("CASE I: END\n") ;
f0111fa8:	83 ec 0c             	sub    $0xc,%esp
f0111fab:	68 75 95 13 f0       	push   $0xf0139575
f0111fb0:	e8 59 ed fe ff       	call   f0100d0e <cprintf>
f0111fb5:	83 c4 10             	add    $0x10,%esp

	/*========================================*/
	/*PART II: Destination Pages Exist 40%	  */
	/*========================================*/
	cprintf("\nCASE II: Destination Pages Exist [40%]\n") ;
f0111fb8:	83 ec 0c             	sub    $0xc,%esp
f0111fbb:	68 84 95 13 f0       	push   $0xf0139584
f0111fc0:	e8 49 ed fe ff       	call   f0100d0e <cprintf>
f0111fc5:	83 c4 10             	add    $0x10,%esp

	char ap4[100] ;strcconcat(aup_cmd, " 0x1400000", ap4); execute_command(ap4);
f0111fc8:	83 ec 04             	sub    $0x4,%esp
f0111fcb:	8d 85 34 fd ff ff    	lea    -0x2cc(%ebp),%eax
f0111fd1:	50                   	push   %eax
f0111fd2:	68 ad 95 13 f0       	push   $0xf01395ad
f0111fd7:	8d 85 04 ff ff ff    	lea    -0xfc(%ebp),%eax
f0111fdd:	50                   	push   %eax
f0111fde:	e8 ad f7 01 00       	call   f0131790 <strcconcat>
f0111fe3:	83 c4 10             	add    $0x10,%esp
f0111fe6:	83 ec 0c             	sub    $0xc,%esp
f0111fe9:	8d 85 34 fd ff ff    	lea    -0x2cc(%ebp),%eax
f0111fef:	50                   	push   %eax
f0111ff0:	e8 7b ed fe ff       	call   f0100d70 <execute_command>
f0111ff5:	83 c4 10             	add    $0x10,%esp
	char ap5[100] ;strcconcat(aup_cmd, " 0x1401000", ap5); execute_command(ap5);
f0111ff8:	83 ec 04             	sub    $0x4,%esp
f0111ffb:	8d 85 d0 fc ff ff    	lea    -0x330(%ebp),%eax
f0112001:	50                   	push   %eax
f0112002:	68 b8 95 13 f0       	push   $0xf01395b8
f0112007:	8d 85 04 ff ff ff    	lea    -0xfc(%ebp),%eax
f011200d:	50                   	push   %eax
f011200e:	e8 7d f7 01 00       	call   f0131790 <strcconcat>
f0112013:	83 c4 10             	add    $0x10,%esp
f0112016:	83 ec 0c             	sub    $0xc,%esp
f0112019:	8d 85 d0 fc ff ff    	lea    -0x330(%ebp),%eax
f011201f:	50                   	push   %eax
f0112020:	e8 4b ed fe ff       	call   f0100d70 <execute_command>
f0112025:	83 c4 10             	add    $0x10,%esp
	char ap6[100] ;strcconcat(aup_cmd, " 0x1402000", ap6); execute_command(ap6);
f0112028:	83 ec 04             	sub    $0x4,%esp
f011202b:	8d 85 6c fc ff ff    	lea    -0x394(%ebp),%eax
f0112031:	50                   	push   %eax
f0112032:	68 c3 95 13 f0       	push   $0xf01395c3
f0112037:	8d 85 04 ff ff ff    	lea    -0xfc(%ebp),%eax
f011203d:	50                   	push   %eax
f011203e:	e8 4d f7 01 00       	call   f0131790 <strcconcat>
f0112043:	83 c4 10             	add    $0x10,%esp
f0112046:	83 ec 0c             	sub    $0xc,%esp
f0112049:	8d 85 6c fc ff ff    	lea    -0x394(%ebp),%eax
f011204f:	50                   	push   %eax
f0112050:	e8 1b ed fe ff       	call   f0100d70 <execute_command>
f0112055:	83 c4 10             	add    $0x10,%esp
	char ap7[100] ;strcconcat(aup_cmd, " 0x1C00000", ap7); execute_command(ap7);
f0112058:	83 ec 04             	sub    $0x4,%esp
f011205b:	8d 85 08 fc ff ff    	lea    -0x3f8(%ebp),%eax
f0112061:	50                   	push   %eax
f0112062:	68 ce 95 13 f0       	push   $0xf01395ce
f0112067:	8d 85 04 ff ff ff    	lea    -0xfc(%ebp),%eax
f011206d:	50                   	push   %eax
f011206e:	e8 1d f7 01 00       	call   f0131790 <strcconcat>
f0112073:	83 c4 10             	add    $0x10,%esp
f0112076:	83 ec 0c             	sub    $0xc,%esp
f0112079:	8d 85 08 fc ff ff    	lea    -0x3f8(%ebp),%eax
f011207f:	50                   	push   %eax
f0112080:	e8 eb ec fe ff       	call   f0100d70 <execute_command>
f0112085:	83 c4 10             	add    $0x10,%esp

	ptr1 = (char*)0x1400000; *ptr1 = 'a';
f0112088:	c7 45 c0 00 00 40 01 	movl   $0x1400000,-0x40(%ebp)
f011208f:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0112092:	c6 00 61             	movb   $0x61,(%eax)
	ptr1 = (char*)0x14007FF; *ptr1 = 'b';
f0112095:	c7 45 c0 ff 07 40 01 	movl   $0x14007ff,-0x40(%ebp)
f011209c:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011209f:	c6 00 62             	movb   $0x62,(%eax)
	ptr1 = (char*)0x1400FFF; *ptr1 = 'c';
f01120a2:	c7 45 c0 ff 0f 40 01 	movl   $0x1400fff,-0x40(%ebp)
f01120a9:	8b 45 c0             	mov    -0x40(%ebp),%eax
f01120ac:	c6 00 63             	movb   $0x63,(%eax)
	ptr1 = (char*)0x1C00000; *ptr1 = 'x';
f01120af:	c7 45 c0 00 00 c0 01 	movl   $0x1c00000,-0x40(%ebp)
f01120b6:	8b 45 c0             	mov    -0x40(%ebp),%eax
f01120b9:	c6 00 78             	movb   $0x78,(%eax)
	ptr1 = (char*)0x1C007FF; *ptr1 = 'y';
f01120bc:	c7 45 c0 ff 07 c0 01 	movl   $0x1c007ff,-0x40(%ebp)
f01120c3:	8b 45 c0             	mov    -0x40(%ebp),%eax
f01120c6:	c6 00 79             	movb   $0x79,(%eax)
	ptr1 = (char*)0x1C00FFF; *ptr1 = 'z';
f01120c9:	c7 45 c0 ff 0f c0 01 	movl   $0x1c00fff,-0x40(%ebp)
f01120d0:	8b 45 c0             	mov    -0x40(%ebp),%eax
f01120d3:	c6 00 7a             	movb   $0x7a,(%eax)
	uint32 srcp = GP(proc_directory, 0x1C00000) ;
f01120d6:	83 ec 08             	sub    $0x8,%esp
f01120d9:	68 00 00 c0 01       	push   $0x1c00000
f01120de:	ff 75 d4             	pushl  -0x2c(%ebp)
f01120e1:	e8 94 3f 00 00       	call   f011607a <GP>
f01120e6:	83 c4 10             	add    $0x10,%esp
f01120e9:	89 45 a4             	mov    %eax,-0x5c(%ebp)
	uint32 dstp = GP(proc_directory, 0x1400000) ;
f01120ec:	83 ec 08             	sub    $0x8,%esp
f01120ef:	68 00 00 40 01       	push   $0x1400000
f01120f4:	ff 75 d4             	pushl  -0x2c(%ebp)
f01120f7:	e8 7e 3f 00 00       	call   f011607a <GP>
f01120fc:	83 c4 10             	add    $0x10,%esp
f01120ff:	89 45 a0             	mov    %eax,-0x60(%ebp)

	ff1 = sys_calculate_free_frames();
f0112102:	e8 96 aa ff ff       	call   f010cb9d <sys_calculate_free_frames>
f0112107:	89 45 b8             	mov    %eax,-0x48(%ebp)

	ret = cut_paste_pages(proc_directory, 0x1C00000, 0x1400000, 1) ;
f011210a:	6a 01                	push   $0x1
f011210c:	68 00 00 40 01       	push   $0x1400000
f0112111:	68 00 00 c0 01       	push   $0x1c00000
f0112116:	ff 75 d4             	pushl  -0x2c(%ebp)
f0112119:	e8 32 66 ff ff       	call   f0108750 <cut_paste_pages>
f011211e:	83 c4 10             	add    $0x10,%esp
f0112121:	89 45 b4             	mov    %eax,-0x4c(%ebp)

	ff2 = sys_calculate_free_frames();
f0112124:	e8 74 aa ff ff       	call   f010cb9d <sys_calculate_free_frames>
f0112129:	89 45 b0             	mov    %eax,-0x50(%ebp)

	if (ret != -1 || ff1 - ff2 != 0)
f011212c:	83 7d b4 ff          	cmpl   $0xffffffff,-0x4c(%ebp)
f0112130:	75 08                	jne    f011213a <test_cut_paste_pages+0x6b4>
f0112132:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0112135:	3b 45 b0             	cmp    -0x50(%ebp),%eax
f0112138:	74 2b                	je     f0112165 <test_cut_paste_pages+0x6df>
	{
		warn("[EVAL] cut_paste_pages: Failed (dest is exist... operation should be denied) ret=%d diff=%d\n", ret, ff1 - ff2);
f011213a:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011213d:	2b 45 b0             	sub    -0x50(%ebp),%eax
f0112140:	83 ec 0c             	sub    $0xc,%esp
f0112143:	50                   	push   %eax
f0112144:	ff 75 b4             	pushl  -0x4c(%ebp)
f0112147:	68 dc 95 13 f0       	push   $0xf01395dc
f011214c:	68 f9 01 00 00       	push   $0x1f9
f0112151:	68 5e 8c 13 f0       	push   $0xf0138c5e
f0112156:	e8 b8 e2 fe ff       	call   f0100413 <_warn>
f011215b:	83 c4 20             	add    $0x20,%esp
		correct = 0;
f011215e:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
	}
	if (correct) eval += 10 ;
f0112165:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0112169:	74 04                	je     f011216f <test_cut_paste_pages+0x6e9>
f011216b:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
	correct = 1 ;
f011216f:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

	int chk_cntnt = 1 ;
f0112176:	c7 45 dc 01 00 00 00 	movl   $0x1,-0x24(%ebp)
	if (CCP(proc_directory, 0x1C00000, 0x1400000, 1*PAGE_SIZE, 1, dstp , 0xFFF, srcp, 0xFFF, CHK_CUT_PASTE) != 1)
f011217d:	83 ec 08             	sub    $0x8,%esp
f0112180:	6a 00                	push   $0x0
f0112182:	68 ff 0f 00 00       	push   $0xfff
f0112187:	ff 75 a4             	pushl  -0x5c(%ebp)
f011218a:	68 ff 0f 00 00       	push   $0xfff
f011218f:	ff 75 a0             	pushl  -0x60(%ebp)
f0112192:	6a 01                	push   $0x1
f0112194:	68 00 10 00 00       	push   $0x1000
f0112199:	68 00 00 40 01       	push   $0x1400000
f011219e:	68 00 00 c0 01       	push   $0x1c00000
f01121a3:	ff 75 d4             	pushl  -0x2c(%ebp)
f01121a6:	e8 22 3f 00 00       	call   f01160cd <CCP>
f01121ab:	83 c4 30             	add    $0x30,%esp
f01121ae:	83 f8 01             	cmp    $0x1,%eax
f01121b1:	74 28                	je     f01121db <test_cut_paste_pages+0x755>
	{
		warn("[EVAL] cut_paste_pages: Failed (problem in permissions and/or references\n");
f01121b3:	83 ec 04             	sub    $0x4,%esp
f01121b6:	68 f0 94 13 f0       	push   $0xf01394f0
f01121bb:	68 02 02 00 00       	push   $0x202
f01121c0:	68 5e 8c 13 f0       	push   $0xf0138c5e
f01121c5:	e8 49 e2 fe ff       	call   f0100413 <_warn>
f01121ca:	83 c4 10             	add    $0x10,%esp
		correct = 0;
f01121cd:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		chk_cntnt = 0;
f01121d4:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
	}
	if (correct) eval += 5 ;
f01121db:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f01121df:	74 04                	je     f01121e5 <test_cut_paste_pages+0x75f>
f01121e1:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
	correct = 1 ;
f01121e5:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

	if (chk_cntnt)
f01121ec:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f01121f0:	0f 84 92 00 00 00    	je     f0112288 <test_cut_paste_pages+0x802>
	{
		ptr1 = (char*)0x1400000;
f01121f6:	c7 45 c0 00 00 40 01 	movl   $0x1400000,-0x40(%ebp)
		ptr2 = (char*)0x1C00000;
f01121fd:	c7 45 ac 00 00 c0 01 	movl   $0x1c00000,-0x54(%ebp)
		ptr3 = (char*)0x14007FF;
f0112204:	c7 45 a8 ff 07 40 01 	movl   $0x14007ff,-0x58(%ebp)
		ptr4 = (char*)0x1C007FF;
f011220b:	c7 45 9c ff 07 c0 01 	movl   $0x1c007ff,-0x64(%ebp)
		ptr5 = (char*)0x1400FFF;
f0112212:	c7 45 98 ff 0f 40 01 	movl   $0x1400fff,-0x68(%ebp)
		ptr6 = (char*)0x1C00FFF;
f0112219:	c7 45 94 ff 0f c0 01 	movl   $0x1c00fff,-0x6c(%ebp)
		if ((*ptr1) != 'a' || (*ptr2) != 'x' || (*ptr3) != 'b' ||
f0112220:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0112223:	8a 00                	mov    (%eax),%al
f0112225:	3c 61                	cmp    $0x61,%al
f0112227:	75 2d                	jne    f0112256 <test_cut_paste_pages+0x7d0>
f0112229:	8b 45 ac             	mov    -0x54(%ebp),%eax
f011222c:	8a 00                	mov    (%eax),%al
f011222e:	3c 78                	cmp    $0x78,%al
f0112230:	75 24                	jne    f0112256 <test_cut_paste_pages+0x7d0>
f0112232:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0112235:	8a 00                	mov    (%eax),%al
f0112237:	3c 62                	cmp    $0x62,%al
f0112239:	75 1b                	jne    f0112256 <test_cut_paste_pages+0x7d0>
				(*ptr4) != 'y'|| (*ptr5) != 'c'|| (*ptr6) != 'z')
f011223b:	8b 45 9c             	mov    -0x64(%ebp),%eax
f011223e:	8a 00                	mov    (%eax),%al
		ptr2 = (char*)0x1C00000;
		ptr3 = (char*)0x14007FF;
		ptr4 = (char*)0x1C007FF;
		ptr5 = (char*)0x1400FFF;
		ptr6 = (char*)0x1C00FFF;
		if ((*ptr1) != 'a' || (*ptr2) != 'x' || (*ptr3) != 'b' ||
f0112240:	3c 79                	cmp    $0x79,%al
f0112242:	75 12                	jne    f0112256 <test_cut_paste_pages+0x7d0>
				(*ptr4) != 'y'|| (*ptr5) != 'c'|| (*ptr6) != 'z')
f0112244:	8b 45 98             	mov    -0x68(%ebp),%eax
f0112247:	8a 00                	mov    (%eax),%al
f0112249:	3c 63                	cmp    $0x63,%al
f011224b:	75 09                	jne    f0112256 <test_cut_paste_pages+0x7d0>
f011224d:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0112250:	8a 00                	mov    (%eax),%al
f0112252:	3c 7a                	cmp    $0x7a,%al
f0112254:	74 21                	je     f0112277 <test_cut_paste_pages+0x7f1>
		{
			warn("[EVAL] cut_paste_pages: Failed (content is not correct)\n");
f0112256:	83 ec 04             	sub    $0x4,%esp
f0112259:	68 3c 95 13 f0       	push   $0xf013953c
f011225e:	68 14 02 00 00       	push   $0x214
f0112263:	68 5e 8c 13 f0       	push   $0xf0138c5e
f0112268:	e8 a6 e1 fe ff       	call   f0100413 <_warn>
f011226d:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0112270:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		}
		if (correct) eval += 5 ;
f0112277:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f011227b:	74 04                	je     f0112281 <test_cut_paste_pages+0x7fb>
f011227d:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0112281:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
	}

	ff1 = sys_calculate_free_frames();
f0112288:	e8 10 a9 ff ff       	call   f010cb9d <sys_calculate_free_frames>
f011228d:	89 45 b8             	mov    %eax,-0x48(%ebp)

	ret = cut_paste_pages(proc_directory, 0x1400000, 0x1BFF000, 3) ;
f0112290:	6a 03                	push   $0x3
f0112292:	68 00 f0 bf 01       	push   $0x1bff000
f0112297:	68 00 00 40 01       	push   $0x1400000
f011229c:	ff 75 d4             	pushl  -0x2c(%ebp)
f011229f:	e8 ac 64 ff ff       	call   f0108750 <cut_paste_pages>
f01122a4:	83 c4 10             	add    $0x10,%esp
f01122a7:	89 45 b4             	mov    %eax,-0x4c(%ebp)

	ff2 = sys_calculate_free_frames();
f01122aa:	e8 ee a8 ff ff       	call   f010cb9d <sys_calculate_free_frames>
f01122af:	89 45 b0             	mov    %eax,-0x50(%ebp)

	if (ret != -1 || ff1 - ff2 != 0)
f01122b2:	83 7d b4 ff          	cmpl   $0xffffffff,-0x4c(%ebp)
f01122b6:	75 08                	jne    f01122c0 <test_cut_paste_pages+0x83a>
f01122b8:	8b 45 b8             	mov    -0x48(%ebp),%eax
f01122bb:	3b 45 b0             	cmp    -0x50(%ebp),%eax
f01122be:	74 2b                	je     f01122eb <test_cut_paste_pages+0x865>
	{
		warn("[EVAL] cut_paste_pages: Failed (dest is exist... operation should be denied) ret=%d diff=%d\n", ret, ff1 - ff2);
f01122c0:	8b 45 b8             	mov    -0x48(%ebp),%eax
f01122c3:	2b 45 b0             	sub    -0x50(%ebp),%eax
f01122c6:	83 ec 0c             	sub    $0xc,%esp
f01122c9:	50                   	push   %eax
f01122ca:	ff 75 b4             	pushl  -0x4c(%ebp)
f01122cd:	68 dc 95 13 f0       	push   $0xf01395dc
f01122d2:	68 23 02 00 00       	push   $0x223
f01122d7:	68 5e 8c 13 f0       	push   $0xf0138c5e
f01122dc:	e8 32 e1 fe ff       	call   f0100413 <_warn>
f01122e1:	83 c4 20             	add    $0x20,%esp
		correct = 0;
f01122e4:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
	}
	if (correct) eval += 10 ;
f01122eb:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f01122ef:	74 04                	je     f01122f5 <test_cut_paste_pages+0x86f>
f01122f1:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
	correct = 1 ;
f01122f5:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
	chk_cntnt = 1;
f01122fc:	c7 45 dc 01 00 00 00 	movl   $0x1,-0x24(%ebp)
	if (CB(proc_directory, 0x1400000, 0) != 1 || CB(proc_directory, 0x1401000, 0) != 1 || CB(proc_directory, 0x1402000, 0) != 1 ||
f0112303:	83 ec 04             	sub    $0x4,%esp
f0112306:	6a 00                	push   $0x0
f0112308:	68 00 00 40 01       	push   $0x1400000
f011230d:	ff 75 d4             	pushl  -0x2c(%ebp)
f0112310:	e8 94 3b 00 00       	call   f0115ea9 <CB>
f0112315:	83 c4 10             	add    $0x10,%esp
f0112318:	83 f8 01             	cmp    $0x1,%eax
f011231b:	0f 85 80 00 00 00    	jne    f01123a1 <test_cut_paste_pages+0x91b>
f0112321:	83 ec 04             	sub    $0x4,%esp
f0112324:	6a 00                	push   $0x0
f0112326:	68 00 10 40 01       	push   $0x1401000
f011232b:	ff 75 d4             	pushl  -0x2c(%ebp)
f011232e:	e8 76 3b 00 00       	call   f0115ea9 <CB>
f0112333:	83 c4 10             	add    $0x10,%esp
f0112336:	83 f8 01             	cmp    $0x1,%eax
f0112339:	75 66                	jne    f01123a1 <test_cut_paste_pages+0x91b>
f011233b:	83 ec 04             	sub    $0x4,%esp
f011233e:	6a 00                	push   $0x0
f0112340:	68 00 20 40 01       	push   $0x1402000
f0112345:	ff 75 d4             	pushl  -0x2c(%ebp)
f0112348:	e8 5c 3b 00 00       	call   f0115ea9 <CB>
f011234d:	83 c4 10             	add    $0x10,%esp
f0112350:	83 f8 01             	cmp    $0x1,%eax
f0112353:	75 4c                	jne    f01123a1 <test_cut_paste_pages+0x91b>
			CB(proc_directory, 0x1BFF000, 0) != 0 || CB(proc_directory, 0x1C00000, 0) != 1 || CB(proc_directory, 0x1C01000, 0) != 0)
f0112355:	83 ec 04             	sub    $0x4,%esp
f0112358:	6a 00                	push   $0x0
f011235a:	68 00 f0 bf 01       	push   $0x1bff000
f011235f:	ff 75 d4             	pushl  -0x2c(%ebp)
f0112362:	e8 42 3b 00 00       	call   f0115ea9 <CB>
f0112367:	83 c4 10             	add    $0x10,%esp
		correct = 0;
	}
	if (correct) eval += 10 ;
	correct = 1 ;
	chk_cntnt = 1;
	if (CB(proc_directory, 0x1400000, 0) != 1 || CB(proc_directory, 0x1401000, 0) != 1 || CB(proc_directory, 0x1402000, 0) != 1 ||
f011236a:	85 c0                	test   %eax,%eax
f011236c:	75 33                	jne    f01123a1 <test_cut_paste_pages+0x91b>
			CB(proc_directory, 0x1BFF000, 0) != 0 || CB(proc_directory, 0x1C00000, 0) != 1 || CB(proc_directory, 0x1C01000, 0) != 0)
f011236e:	83 ec 04             	sub    $0x4,%esp
f0112371:	6a 00                	push   $0x0
f0112373:	68 00 00 c0 01       	push   $0x1c00000
f0112378:	ff 75 d4             	pushl  -0x2c(%ebp)
f011237b:	e8 29 3b 00 00       	call   f0115ea9 <CB>
f0112380:	83 c4 10             	add    $0x10,%esp
f0112383:	83 f8 01             	cmp    $0x1,%eax
f0112386:	75 19                	jne    f01123a1 <test_cut_paste_pages+0x91b>
f0112388:	83 ec 04             	sub    $0x4,%esp
f011238b:	6a 00                	push   $0x0
f011238d:	68 00 10 c0 01       	push   $0x1c01000
f0112392:	ff 75 d4             	pushl  -0x2c(%ebp)
f0112395:	e8 0f 3b 00 00       	call   f0115ea9 <CB>
f011239a:	83 c4 10             	add    $0x10,%esp
f011239d:	85 c0                	test   %eax,%eax
f011239f:	74 28                	je     f01123c9 <test_cut_paste_pages+0x943>
	{
		warn("[EVAL] cut_paste_pages: Failed (problem in permissions)\n");
f01123a1:	83 ec 04             	sub    $0x4,%esp
f01123a4:	68 3c 96 13 f0       	push   $0xf013963c
f01123a9:	68 2c 02 00 00       	push   $0x22c
f01123ae:	68 5e 8c 13 f0       	push   $0xf0138c5e
f01123b3:	e8 5b e0 fe ff       	call   f0100413 <_warn>
f01123b8:	83 c4 10             	add    $0x10,%esp
		correct = 0;
f01123bb:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		chk_cntnt = 0;
f01123c2:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
	}
	if (correct) eval += 5 ;
f01123c9:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f01123cd:	74 04                	je     f01123d3 <test_cut_paste_pages+0x94d>
f01123cf:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
	correct = 1 ;
f01123d3:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

	if (chk_cntnt)
f01123da:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f01123de:	0f 84 99 00 00 00    	je     f011247d <test_cut_paste_pages+0x9f7>
	{
		ptr1 = (char*)0x1400000;
f01123e4:	c7 45 c0 00 00 40 01 	movl   $0x1400000,-0x40(%ebp)
		ptr2 = (char*)0x1C00000;
f01123eb:	c7 45 ac 00 00 c0 01 	movl   $0x1c00000,-0x54(%ebp)
		ptr3 = (char*)0x14007FF;
f01123f2:	c7 45 a8 ff 07 40 01 	movl   $0x14007ff,-0x58(%ebp)
		ptr4 = (char*)0x1C007FF;
f01123f9:	c7 45 9c ff 07 c0 01 	movl   $0x1c007ff,-0x64(%ebp)
		ptr5 = (char*)0x1400FFF;
f0112400:	c7 45 98 ff 0f 40 01 	movl   $0x1400fff,-0x68(%ebp)
		ptr6 = (char*)0x1C00FFF;
f0112407:	c7 45 94 ff 0f c0 01 	movl   $0x1c00fff,-0x6c(%ebp)
		if ((*ptr1) != 'a' || (*ptr2) != 'x' || (*ptr3) != 'b' ||
f011240e:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0112411:	8a 00                	mov    (%eax),%al
f0112413:	3c 61                	cmp    $0x61,%al
f0112415:	75 2d                	jne    f0112444 <test_cut_paste_pages+0x9be>
f0112417:	8b 45 ac             	mov    -0x54(%ebp),%eax
f011241a:	8a 00                	mov    (%eax),%al
f011241c:	3c 78                	cmp    $0x78,%al
f011241e:	75 24                	jne    f0112444 <test_cut_paste_pages+0x9be>
f0112420:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0112423:	8a 00                	mov    (%eax),%al
f0112425:	3c 62                	cmp    $0x62,%al
f0112427:	75 1b                	jne    f0112444 <test_cut_paste_pages+0x9be>
				(*ptr4) != 'y'|| (*ptr5) != 'c'|| (*ptr6) != 'z')
f0112429:	8b 45 9c             	mov    -0x64(%ebp),%eax
f011242c:	8a 00                	mov    (%eax),%al
		ptr2 = (char*)0x1C00000;
		ptr3 = (char*)0x14007FF;
		ptr4 = (char*)0x1C007FF;
		ptr5 = (char*)0x1400FFF;
		ptr6 = (char*)0x1C00FFF;
		if ((*ptr1) != 'a' || (*ptr2) != 'x' || (*ptr3) != 'b' ||
f011242e:	3c 79                	cmp    $0x79,%al
f0112430:	75 12                	jne    f0112444 <test_cut_paste_pages+0x9be>
				(*ptr4) != 'y'|| (*ptr5) != 'c'|| (*ptr6) != 'z')
f0112432:	8b 45 98             	mov    -0x68(%ebp),%eax
f0112435:	8a 00                	mov    (%eax),%al
f0112437:	3c 63                	cmp    $0x63,%al
f0112439:	75 09                	jne    f0112444 <test_cut_paste_pages+0x9be>
f011243b:	8b 45 94             	mov    -0x6c(%ebp),%eax
f011243e:	8a 00                	mov    (%eax),%al
f0112440:	3c 7a                	cmp    $0x7a,%al
f0112442:	74 28                	je     f011246c <test_cut_paste_pages+0x9e6>
		{
			correct = 0;
f0112444:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
			chk_cntnt = 0;
f011244b:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
			warn("[EVAL] cut_paste_pages: Failed (content is not correct)\n");
f0112452:	83 ec 04             	sub    $0x4,%esp
f0112455:	68 3c 95 13 f0       	push   $0xf013953c
f011245a:	68 40 02 00 00       	push   $0x240
f011245f:	68 5e 8c 13 f0       	push   $0xf0138c5e
f0112464:	e8 aa df fe ff       	call   f0100413 <_warn>
f0112469:	83 c4 10             	add    $0x10,%esp
		}
		if (correct) eval += 5 ;
f011246c:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0112470:	74 04                	je     f0112476 <test_cut_paste_pages+0x9f0>
f0112472:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0112476:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
	}

	cprintf("CASE II: END\n") ;
f011247d:	83 ec 0c             	sub    $0xc,%esp
f0112480:	68 75 96 13 f0       	push   $0xf0139675
f0112485:	e8 84 e8 fe ff       	call   f0100d0e <cprintf>
f011248a:	83 c4 10             	add    $0x10,%esp

	cprintf("[EVAL] cut_paste_pages: FINISHED. Evaluation = %d\n", eval);
f011248d:	83 ec 08             	sub    $0x8,%esp
f0112490:	ff 75 e4             	pushl  -0x1c(%ebp)
f0112493:	68 84 96 13 f0       	push   $0xf0139684
f0112498:	e8 71 e8 fe ff       	call   f0100d0e <cprintf>
f011249d:	83 c4 10             	add    $0x10,%esp
	if(eval == 100)
f01124a0:	83 7d e4 64          	cmpl   $0x64,-0x1c(%ebp)
f01124a4:	75 10                	jne    f01124b6 <test_cut_paste_pages+0xa30>
		cprintf("Congratulations!! test cut_paste_pages completed successfully.\n");
f01124a6:	83 ec 0c             	sub    $0xc,%esp
f01124a9:	68 b8 96 13 f0       	push   $0xf01396b8
f01124ae:	e8 5b e8 fe ff       	call   f0100d0e <cprintf>
f01124b3:	83 c4 10             	add    $0x10,%esp

	//return back to the kernel directory
	lcr3(phys_page_directory) ;
f01124b6:	a1 6c 26 78 f0       	mov    0xf078266c,%eax
f01124bb:	89 45 d0             	mov    %eax,-0x30(%ebp)
f01124be:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01124c1:	0f 22 d8             	mov    %eax,%cr3

	return 0;
f01124c4:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01124c9:	8d 65 f4             	lea    -0xc(%ebp),%esp
f01124cc:	5b                   	pop    %ebx
f01124cd:	5e                   	pop    %esi
f01124ce:	5f                   	pop    %edi
f01124cf:	5d                   	pop    %ebp
f01124d0:	c3                   	ret    

f01124d1 <test_copy_paste_chunk>:

//===============================
// 2) TEST COPY-PASTE CHUNK:
//===============================
int test_copy_paste_chunk()
{
f01124d1:	55                   	push   %ebp
f01124d2:	89 e5                	mov    %esp,%ebp
f01124d4:	57                   	push   %edi
f01124d5:	56                   	push   %esi
f01124d6:	53                   	push   %ebx
f01124d7:	81 ec ac 05 00 00    	sub    $0x5ac,%esp
	//Create a Temp. User Process
	char prog_name[50] = "fos_helloWorld";
f01124dd:	8d 85 42 ff ff ff    	lea    -0xbe(%ebp),%eax
f01124e3:	bb f8 96 13 f0       	mov    $0xf01396f8,%ebx
f01124e8:	ba 0f 00 00 00       	mov    $0xf,%edx
f01124ed:	89 c7                	mov    %eax,%edi
f01124ef:	89 de                	mov    %ebx,%esi
f01124f1:	89 d1                	mov    %edx,%ecx
f01124f3:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f01124f5:	8d 95 51 ff ff ff    	lea    -0xaf(%ebp),%edx
f01124fb:	b9 23 00 00 00       	mov    $0x23,%ecx
f0112500:	b0 00                	mov    $0x0,%al
f0112502:	89 d7                	mov    %edx,%edi
f0112504:	f3 aa                	rep stos %al,%es:(%edi)
	struct Env* env = env_create(prog_name, 20, 10, 0);
f0112506:	6a 00                	push   $0x0
f0112508:	6a 0a                	push   $0xa
f011250a:	6a 14                	push   $0x14
f011250c:	8d 85 42 ff ff ff    	lea    -0xbe(%ebp),%eax
f0112512:	50                   	push   %eax
f0112513:	e8 4b 69 ff ff       	call   f0108e63 <env_create>
f0112518:	83 c4 10             	add    $0x10,%esp
f011251b:	89 45 d8             	mov    %eax,-0x28(%ebp)
	uint32 *proc_directory = env->env_page_directory ;
f011251e:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0112521:	8b 40 5c             	mov    0x5c(%eax),%eax
f0112524:	89 45 d4             	mov    %eax,-0x2c(%ebp)
	lcr3(env->env_cr3) ;
f0112527:	8b 45 d8             	mov    -0x28(%ebp),%eax
f011252a:	8b 40 60             	mov    0x60(%eax),%eax
f011252d:	89 85 74 ff ff ff    	mov    %eax,-0x8c(%ebp)
f0112533:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f0112539:	0f 22 d8             	mov    %eax,%cr3
	char aup[20] = "aup " ;
f011253c:	c7 85 2e ff ff ff 61 	movl   $0x20707561,-0xd2(%ebp)
f0112543:	75 70 20 
f0112546:	c7 85 32 ff ff ff 00 	movl   $0x0,-0xce(%ebp)
f011254d:	00 00 00 
f0112550:	8d 95 36 ff ff ff    	lea    -0xca(%ebp),%edx
f0112556:	b9 03 00 00 00       	mov    $0x3,%ecx
f011255b:	b8 00 00 00 00       	mov    $0x0,%eax
f0112560:	89 d7                	mov    %edx,%edi
f0112562:	f3 ab                	rep stos %eax,%es:(%edi)
	char env_id[20] ; ltostr(env->env_id, env_id) ;
f0112564:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0112567:	8b 40 4c             	mov    0x4c(%eax),%eax
f011256a:	83 ec 08             	sub    $0x8,%esp
f011256d:	8d 95 1a ff ff ff    	lea    -0xe6(%ebp),%edx
f0112573:	52                   	push   %edx
f0112574:	50                   	push   %eax
f0112575:	e8 1e f1 01 00       	call   f0131698 <ltostr>
f011257a:	83 c4 10             	add    $0x10,%esp
	char aup_cmd[50];
	strcconcat(aup, env_id, aup_cmd);
f011257d:	83 ec 04             	sub    $0x4,%esp
f0112580:	8d 85 e8 fe ff ff    	lea    -0x118(%ebp),%eax
f0112586:	50                   	push   %eax
f0112587:	8d 85 1a ff ff ff    	lea    -0xe6(%ebp),%eax
f011258d:	50                   	push   %eax
f011258e:	8d 85 2e ff ff ff    	lea    -0xd2(%ebp),%eax
f0112594:	50                   	push   %eax
f0112595:	e8 f6 f1 01 00       	call   f0131790 <strcconcat>
f011259a:	83 c4 10             	add    $0x10,%esp
	//===================================================

	ClearUserSpace(proc_directory);
f011259d:	83 ec 0c             	sub    $0xc,%esp
f01125a0:	ff 75 d4             	pushl  -0x2c(%ebp)
f01125a3:	e8 f1 3a 00 00       	call   f0116099 <ClearUserSpace>
f01125a8:	83 c4 10             	add    $0x10,%esp
	int numOfArgs = 0;
f01125ab:	c7 45 cc 00 00 00 00 	movl   $0x0,-0x34(%ebp)
	char *args[MAX_ARGUMENTS] ;
	uint32 res =0;
f01125b2:	c7 45 c8 00 00 00 00 	movl   $0x0,-0x38(%ebp)
	uint32 eval = 0; int correct = 1 ;
f01125b9:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
f01125c0:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
	uint32 numOfFreeFramesBefore, numOfFreeFramesAfter ;
	char *ch1, *ch2, *ch3, *ch4, *ch5, *ch6, *ch7,*ch8, *ch9, *ch10, *ch11, *ch12 ;
	char tch[13];
	int kilo = 1024 ;
f01125c7:	c7 45 c4 00 04 00 00 	movl   $0x400,-0x3c(%ebp)
	int mega = 1024*1024 ;
f01125ce:	c7 45 c0 00 00 10 00 	movl   $0x100000,-0x40(%ebp)
	/*==================================================*/
	/*PART I: Destination page(s) exist & read only 20% */
	/*==================================================*/
	cprintf("\nCASE I: Destination page(s) exist & read only [20%]\n") ;
f01125d5:	83 ec 0c             	sub    $0xc,%esp
f01125d8:	68 2c 97 13 f0       	push   $0xf013972c
f01125dd:	e8 2c e7 fe ff       	call   f0100d0e <cprintf>
f01125e2:	83 c4 10             	add    $0x10,%esp
	{
		/*allocate page*/char c1[100] ;strcconcat(aup_cmd, " 0x0", c1); execute_command(c1);
f01125e5:	83 ec 04             	sub    $0x4,%esp
f01125e8:	8d 85 4f fa ff ff    	lea    -0x5b1(%ebp),%eax
f01125ee:	50                   	push   %eax
f01125ef:	68 62 97 13 f0       	push   $0xf0139762
f01125f4:	8d 85 e8 fe ff ff    	lea    -0x118(%ebp),%eax
f01125fa:	50                   	push   %eax
f01125fb:	e8 90 f1 01 00       	call   f0131790 <strcconcat>
f0112600:	83 c4 10             	add    $0x10,%esp
f0112603:	83 ec 0c             	sub    $0xc,%esp
f0112606:	8d 85 4f fa ff ff    	lea    -0x5b1(%ebp),%eax
f011260c:	50                   	push   %eax
f011260d:	e8 5e e7 fe ff       	call   f0100d70 <execute_command>
f0112612:	83 c4 10             	add    $0x10,%esp
		/*allocate another page ====*/ strcconcat(aup_cmd, " 0x1000", c1); execute_command(c1);
f0112615:	83 ec 04             	sub    $0x4,%esp
f0112618:	8d 85 4f fa ff ff    	lea    -0x5b1(%ebp),%eax
f011261e:	50                   	push   %eax
f011261f:	68 67 97 13 f0       	push   $0xf0139767
f0112624:	8d 85 e8 fe ff ff    	lea    -0x118(%ebp),%eax
f011262a:	50                   	push   %eax
f011262b:	e8 60 f1 01 00       	call   f0131790 <strcconcat>
f0112630:	83 c4 10             	add    $0x10,%esp
f0112633:	83 ec 0c             	sub    $0xc,%esp
f0112636:	8d 85 4f fa ff ff    	lea    -0x5b1(%ebp),%eax
f011263c:	50                   	push   %eax
f011263d:	e8 2e e7 fe ff       	call   f0100d70 <execute_command>
f0112642:	83 c4 10             	add    $0x10,%esp
		/*write on 1st page*/
		char c2[100] = "wum 0x000000 a";execute_command(c2);
f0112645:	8d 85 b3 fa ff ff    	lea    -0x54d(%ebp),%eax
f011264b:	bb 6d 9a 13 f0       	mov    $0xf0139a6d,%ebx
f0112650:	ba 0f 00 00 00       	mov    $0xf,%edx
f0112655:	89 c7                	mov    %eax,%edi
f0112657:	89 de                	mov    %ebx,%esi
f0112659:	89 d1                	mov    %edx,%ecx
f011265b:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f011265d:	8d 95 c2 fa ff ff    	lea    -0x53e(%ebp),%edx
f0112663:	b9 55 00 00 00       	mov    $0x55,%ecx
f0112668:	b0 00                	mov    $0x0,%al
f011266a:	89 d7                	mov    %edx,%edi
f011266c:	f3 aa                	rep stos %al,%es:(%edi)
f011266e:	83 ec 0c             	sub    $0xc,%esp
f0112671:	8d 85 b3 fa ff ff    	lea    -0x54d(%ebp),%eax
f0112677:	50                   	push   %eax
f0112678:	e8 f3 e6 fe ff       	call   f0100d70 <execute_command>
f011267d:	83 c4 10             	add    $0x10,%esp
		char c3[100] = "wum 0x0007FF b";execute_command(c3);
f0112680:	8d 85 17 fb ff ff    	lea    -0x4e9(%ebp),%eax
f0112686:	bb d1 9a 13 f0       	mov    $0xf0139ad1,%ebx
f011268b:	ba 0f 00 00 00       	mov    $0xf,%edx
f0112690:	89 c7                	mov    %eax,%edi
f0112692:	89 de                	mov    %ebx,%esi
f0112694:	89 d1                	mov    %edx,%ecx
f0112696:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0112698:	8d 95 26 fb ff ff    	lea    -0x4da(%ebp),%edx
f011269e:	b9 55 00 00 00       	mov    $0x55,%ecx
f01126a3:	b0 00                	mov    $0x0,%al
f01126a5:	89 d7                	mov    %edx,%edi
f01126a7:	f3 aa                	rep stos %al,%es:(%edi)
f01126a9:	83 ec 0c             	sub    $0xc,%esp
f01126ac:	8d 85 17 fb ff ff    	lea    -0x4e9(%ebp),%eax
f01126b2:	50                   	push   %eax
f01126b3:	e8 b8 e6 fe ff       	call   f0100d70 <execute_command>
f01126b8:	83 c4 10             	add    $0x10,%esp
		char c4[100] = "wum 0x000FFF c";execute_command(c4);
f01126bb:	8d 85 7b fb ff ff    	lea    -0x485(%ebp),%eax
f01126c1:	bb 35 9b 13 f0       	mov    $0xf0139b35,%ebx
f01126c6:	ba 0f 00 00 00       	mov    $0xf,%edx
f01126cb:	89 c7                	mov    %eax,%edi
f01126cd:	89 de                	mov    %ebx,%esi
f01126cf:	89 d1                	mov    %edx,%ecx
f01126d1:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f01126d3:	8d 95 8a fb ff ff    	lea    -0x476(%ebp),%edx
f01126d9:	b9 55 00 00 00       	mov    $0x55,%ecx
f01126de:	b0 00                	mov    $0x0,%al
f01126e0:	89 d7                	mov    %edx,%edi
f01126e2:	f3 aa                	rep stos %al,%es:(%edi)
f01126e4:	83 ec 0c             	sub    $0xc,%esp
f01126e7:	8d 85 7b fb ff ff    	lea    -0x485(%ebp),%eax
f01126ed:	50                   	push   %eax
f01126ee:	e8 7d e6 fe ff       	call   f0100d70 <execute_command>
f01126f3:	83 c4 10             	add    $0x10,%esp
		/*write on 2nd page*/
		char c22[100] = "wum 0x001000 d";execute_command(c22);
f01126f6:	8d 85 df fb ff ff    	lea    -0x421(%ebp),%eax
f01126fc:	bb 99 9b 13 f0       	mov    $0xf0139b99,%ebx
f0112701:	ba 0f 00 00 00       	mov    $0xf,%edx
f0112706:	89 c7                	mov    %eax,%edi
f0112708:	89 de                	mov    %ebx,%esi
f011270a:	89 d1                	mov    %edx,%ecx
f011270c:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f011270e:	8d 95 ee fb ff ff    	lea    -0x412(%ebp),%edx
f0112714:	b9 55 00 00 00       	mov    $0x55,%ecx
f0112719:	b0 00                	mov    $0x0,%al
f011271b:	89 d7                	mov    %edx,%edi
f011271d:	f3 aa                	rep stos %al,%es:(%edi)
f011271f:	83 ec 0c             	sub    $0xc,%esp
f0112722:	8d 85 df fb ff ff    	lea    -0x421(%ebp),%eax
f0112728:	50                   	push   %eax
f0112729:	e8 42 e6 fe ff       	call   f0100d70 <execute_command>
f011272e:	83 c4 10             	add    $0x10,%esp
		char c23[100] = "wum 0x0017FF e";execute_command(c23);
f0112731:	8d 85 43 fc ff ff    	lea    -0x3bd(%ebp),%eax
f0112737:	bb fd 9b 13 f0       	mov    $0xf0139bfd,%ebx
f011273c:	ba 0f 00 00 00       	mov    $0xf,%edx
f0112741:	89 c7                	mov    %eax,%edi
f0112743:	89 de                	mov    %ebx,%esi
f0112745:	89 d1                	mov    %edx,%ecx
f0112747:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0112749:	8d 95 52 fc ff ff    	lea    -0x3ae(%ebp),%edx
f011274f:	b9 55 00 00 00       	mov    $0x55,%ecx
f0112754:	b0 00                	mov    $0x0,%al
f0112756:	89 d7                	mov    %edx,%edi
f0112758:	f3 aa                	rep stos %al,%es:(%edi)
f011275a:	83 ec 0c             	sub    $0xc,%esp
f011275d:	8d 85 43 fc ff ff    	lea    -0x3bd(%ebp),%eax
f0112763:	50                   	push   %eax
f0112764:	e8 07 e6 fe ff       	call   f0100d70 <execute_command>
f0112769:	83 c4 10             	add    $0x10,%esp
		char c24[100] = "wum 0x001FFF f";execute_command(c24);
f011276c:	8d 85 a7 fc ff ff    	lea    -0x359(%ebp),%eax
f0112772:	bb 61 9c 13 f0       	mov    $0xf0139c61,%ebx
f0112777:	ba 0f 00 00 00       	mov    $0xf,%edx
f011277c:	89 c7                	mov    %eax,%edi
f011277e:	89 de                	mov    %ebx,%esi
f0112780:	89 d1                	mov    %edx,%ecx
f0112782:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0112784:	8d 95 b6 fc ff ff    	lea    -0x34a(%ebp),%edx
f011278a:	b9 55 00 00 00       	mov    $0x55,%ecx
f011278f:	b0 00                	mov    $0x0,%al
f0112791:	89 d7                	mov    %edx,%edi
f0112793:	f3 aa                	rep stos %al,%es:(%edi)
f0112795:	83 ec 0c             	sub    $0xc,%esp
f0112798:	8d 85 a7 fc ff ff    	lea    -0x359(%ebp),%eax
f011279e:	50                   	push   %eax
f011279f:	e8 cc e5 fe ff       	call   f0100d70 <execute_command>
f01127a4:	83 c4 10             	add    $0x10,%esp
		/*allocate page*/char c5[100] ;strcconcat(aup_cmd, " 0x100000", c5); execute_command(c5);
f01127a7:	83 ec 04             	sub    $0x4,%esp
f01127aa:	8d 85 0b fd ff ff    	lea    -0x2f5(%ebp),%eax
f01127b0:	50                   	push   %eax
f01127b1:	68 6f 97 13 f0       	push   $0xf013976f
f01127b6:	8d 85 e8 fe ff ff    	lea    -0x118(%ebp),%eax
f01127bc:	50                   	push   %eax
f01127bd:	e8 ce ef 01 00       	call   f0131790 <strcconcat>
f01127c2:	83 c4 10             	add    $0x10,%esp
f01127c5:	83 ec 0c             	sub    $0xc,%esp
f01127c8:	8d 85 0b fd ff ff    	lea    -0x2f5(%ebp),%eax
f01127ce:	50                   	push   %eax
f01127cf:	e8 9c e5 fe ff       	call   f0100d70 <execute_command>
f01127d4:	83 c4 10             	add    $0x10,%esp
		/*allocate another page ====*/ strcconcat(aup_cmd, " 0x101000 r", c5); execute_command(c5);
f01127d7:	83 ec 04             	sub    $0x4,%esp
f01127da:	8d 85 0b fd ff ff    	lea    -0x2f5(%ebp),%eax
f01127e0:	50                   	push   %eax
f01127e1:	68 79 97 13 f0       	push   $0xf0139779
f01127e6:	8d 85 e8 fe ff ff    	lea    -0x118(%ebp),%eax
f01127ec:	50                   	push   %eax
f01127ed:	e8 9e ef 01 00       	call   f0131790 <strcconcat>
f01127f2:	83 c4 10             	add    $0x10,%esp
f01127f5:	83 ec 0c             	sub    $0xc,%esp
f01127f8:	8d 85 0b fd ff ff    	lea    -0x2f5(%ebp),%eax
f01127fe:	50                   	push   %eax
f01127ff:	e8 6c e5 fe ff       	call   f0100d70 <execute_command>
f0112804:	83 c4 10             	add    $0x10,%esp
		char c6[100] = "wum 0x100000 x";execute_command(c6);
f0112807:	8d 85 6f fd ff ff    	lea    -0x291(%ebp),%eax
f011280d:	bb c5 9c 13 f0       	mov    $0xf0139cc5,%ebx
f0112812:	ba 0f 00 00 00       	mov    $0xf,%edx
f0112817:	89 c7                	mov    %eax,%edi
f0112819:	89 de                	mov    %ebx,%esi
f011281b:	89 d1                	mov    %edx,%ecx
f011281d:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f011281f:	8d 95 7e fd ff ff    	lea    -0x282(%ebp),%edx
f0112825:	b9 55 00 00 00       	mov    $0x55,%ecx
f011282a:	b0 00                	mov    $0x0,%al
f011282c:	89 d7                	mov    %edx,%edi
f011282e:	f3 aa                	rep stos %al,%es:(%edi)
f0112830:	83 ec 0c             	sub    $0xc,%esp
f0112833:	8d 85 6f fd ff ff    	lea    -0x291(%ebp),%eax
f0112839:	50                   	push   %eax
f011283a:	e8 31 e5 fe ff       	call   f0100d70 <execute_command>
f011283f:	83 c4 10             	add    $0x10,%esp
		char c7[100] = "wum 0x1007FF y";execute_command(c7);
f0112842:	8d 85 d3 fd ff ff    	lea    -0x22d(%ebp),%eax
f0112848:	bb 29 9d 13 f0       	mov    $0xf0139d29,%ebx
f011284d:	ba 0f 00 00 00       	mov    $0xf,%edx
f0112852:	89 c7                	mov    %eax,%edi
f0112854:	89 de                	mov    %ebx,%esi
f0112856:	89 d1                	mov    %edx,%ecx
f0112858:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f011285a:	8d 95 e2 fd ff ff    	lea    -0x21e(%ebp),%edx
f0112860:	b9 55 00 00 00       	mov    $0x55,%ecx
f0112865:	b0 00                	mov    $0x0,%al
f0112867:	89 d7                	mov    %edx,%edi
f0112869:	f3 aa                	rep stos %al,%es:(%edi)
f011286b:	83 ec 0c             	sub    $0xc,%esp
f011286e:	8d 85 d3 fd ff ff    	lea    -0x22d(%ebp),%eax
f0112874:	50                   	push   %eax
f0112875:	e8 f6 e4 fe ff       	call   f0100d70 <execute_command>
f011287a:	83 c4 10             	add    $0x10,%esp
		char c8[100] = "wum 0x100FFF z";execute_command(c8);
f011287d:	8d 85 37 fe ff ff    	lea    -0x1c9(%ebp),%eax
f0112883:	bb 8d 9d 13 f0       	mov    $0xf0139d8d,%ebx
f0112888:	ba 0f 00 00 00       	mov    $0xf,%edx
f011288d:	89 c7                	mov    %eax,%edi
f011288f:	89 de                	mov    %ebx,%esi
f0112891:	89 d1                	mov    %edx,%ecx
f0112893:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0112895:	8d 95 46 fe ff ff    	lea    -0x1ba(%ebp),%edx
f011289b:	b9 55 00 00 00       	mov    $0x55,%ecx
f01128a0:	b0 00                	mov    $0x0,%al
f01128a2:	89 d7                	mov    %edx,%edi
f01128a4:	f3 aa                	rep stos %al,%es:(%edi)
f01128a6:	83 ec 0c             	sub    $0xc,%esp
f01128a9:	8d 85 37 fe ff ff    	lea    -0x1c9(%ebp),%eax
f01128af:	50                   	push   %eax
f01128b0:	e8 bb e4 fe ff       	call   f0100d70 <execute_command>
f01128b5:	83 c4 10             	add    $0x10,%esp

		ch1 = (char*)0x000000; ch2 = (char*)0x100000;
f01128b8:	c7 45 bc 00 00 00 00 	movl   $0x0,-0x44(%ebp)
f01128bf:	c7 45 b8 00 00 10 00 	movl   $0x100000,-0x48(%ebp)
		ch3 = (char*)0x0007FF; ch4 = (char*)0x1007FF;
f01128c6:	c7 45 b4 ff 07 00 00 	movl   $0x7ff,-0x4c(%ebp)
f01128cd:	c7 45 b0 ff 07 10 00 	movl   $0x1007ff,-0x50(%ebp)
		ch5 = (char*)0x000FFF; ch6 = (char*)0x100FFF;
f01128d4:	c7 45 ac ff 0f 00 00 	movl   $0xfff,-0x54(%ebp)
f01128db:	c7 45 a8 ff 0f 10 00 	movl   $0x100fff,-0x58(%ebp)
		ch7 = (char*)0x001000; ch8 = (char*)0x101000;
f01128e2:	c7 45 a4 00 10 00 00 	movl   $0x1000,-0x5c(%ebp)
f01128e9:	c7 45 a0 00 10 10 00 	movl   $0x101000,-0x60(%ebp)
		ch9 = (char*)0x0017FF; ch10= (char*)0x1017FF;
f01128f0:	c7 45 9c ff 17 00 00 	movl   $0x17ff,-0x64(%ebp)
f01128f7:	c7 45 98 ff 17 10 00 	movl   $0x1017ff,-0x68(%ebp)
		ch11= (char*)0x001FFF; ch12= (char*)0x101FFF;
f01128fe:	c7 45 94 ff 1f 00 00 	movl   $0x1fff,-0x6c(%ebp)
f0112905:	c7 45 90 ff 1f 10 00 	movl   $0x101fff,-0x70(%ebp)

		tch[8] = *ch8 ;tch[10] = *ch10 ;tch[12] = *ch12 ;
f011290c:	8b 45 a0             	mov    -0x60(%ebp),%eax
f011290f:	8a 00                	mov    (%eax),%al
f0112911:	88 85 a3 fe ff ff    	mov    %al,-0x15d(%ebp)
f0112917:	8b 45 98             	mov    -0x68(%ebp),%eax
f011291a:	8a 00                	mov    (%eax),%al
f011291c:	88 85 a5 fe ff ff    	mov    %al,-0x15b(%ebp)
f0112922:	8b 45 90             	mov    -0x70(%ebp),%eax
f0112925:	8a 00                	mov    (%eax),%al
f0112927:	88 85 a7 fe ff ff    	mov    %al,-0x159(%ebp)

		numOfFreeFramesBefore = sys_calculate_free_frames();
f011292d:	e8 6b a2 ff ff       	call   f010cb9d <sys_calculate_free_frames>
f0112932:	89 45 8c             	mov    %eax,-0x74(%ebp)

		int ret = copy_paste_chunk(proc_directory, 0x0, 0x100000, 6*kilo);
f0112935:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0112938:	89 d0                	mov    %edx,%eax
f011293a:	01 c0                	add    %eax,%eax
f011293c:	01 d0                	add    %edx,%eax
f011293e:	01 c0                	add    %eax,%eax
f0112940:	50                   	push   %eax
f0112941:	68 00 00 10 00       	push   $0x100000
f0112946:	6a 00                	push   $0x0
f0112948:	ff 75 d4             	pushl  -0x2c(%ebp)
f011294b:	e8 7e 5f ff ff       	call   f01088ce <copy_paste_chunk>
f0112950:	83 c4 10             	add    $0x10,%esp
f0112953:	89 45 88             	mov    %eax,-0x78(%ebp)

		numOfFreeFramesAfter = sys_calculate_free_frames();
f0112956:	e8 42 a2 ff ff       	call   f010cb9d <sys_calculate_free_frames>
f011295b:	89 45 84             	mov    %eax,-0x7c(%ebp)

		correct = 1 ;
f011295e:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
		if (ret != -1 || numOfFreeFramesBefore != numOfFreeFramesAfter)
f0112965:	83 7d 88 ff          	cmpl   $0xffffffff,-0x78(%ebp)
f0112969:	75 08                	jne    f0112973 <test_copy_paste_chunk+0x4a2>
f011296b:	8b 45 8c             	mov    -0x74(%ebp),%eax
f011296e:	3b 45 84             	cmp    -0x7c(%ebp),%eax
f0112971:	74 2b                	je     f011299e <test_copy_paste_chunk+0x4cd>
		{
			warn("[EVAL] copy_paste_chunk: Failed (dest is read-only... operation should be denied) ret=%d diff=%d\n", ret, numOfFreeFramesBefore - numOfFreeFramesAfter);
f0112973:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0112976:	2b 45 84             	sub    -0x7c(%ebp),%eax
f0112979:	83 ec 0c             	sub    $0xc,%esp
f011297c:	50                   	push   %eax
f011297d:	ff 75 88             	pushl  -0x78(%ebp)
f0112980:	68 88 97 13 f0       	push   $0xf0139788
f0112985:	68 93 02 00 00       	push   $0x293
f011298a:	68 5e 8c 13 f0       	push   $0xf0138c5e
f011298f:	e8 7f da fe ff       	call   f0100413 <_warn>
f0112994:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0112997:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		}
		if (correct) eval += 10 ;
f011299e:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f01129a2:	74 04                	je     f01129a8 <test_copy_paste_chunk+0x4d7>
f01129a4:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f01129a8:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

		if (*ch1 != 'a' || *ch2 != 'x' || *ch3 != 'b' || *ch4 != 'y' || *ch5 != 'c' || *ch6 != 'z'
f01129af:	8b 45 bc             	mov    -0x44(%ebp),%eax
f01129b2:	8a 00                	mov    (%eax),%al
f01129b4:	3c 61                	cmp    $0x61,%al
f01129b6:	75 75                	jne    f0112a2d <test_copy_paste_chunk+0x55c>
f01129b8:	8b 45 b8             	mov    -0x48(%ebp),%eax
f01129bb:	8a 00                	mov    (%eax),%al
f01129bd:	3c 78                	cmp    $0x78,%al
f01129bf:	75 6c                	jne    f0112a2d <test_copy_paste_chunk+0x55c>
f01129c1:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01129c4:	8a 00                	mov    (%eax),%al
f01129c6:	3c 62                	cmp    $0x62,%al
f01129c8:	75 63                	jne    f0112a2d <test_copy_paste_chunk+0x55c>
f01129ca:	8b 45 b0             	mov    -0x50(%ebp),%eax
f01129cd:	8a 00                	mov    (%eax),%al
f01129cf:	3c 79                	cmp    $0x79,%al
f01129d1:	75 5a                	jne    f0112a2d <test_copy_paste_chunk+0x55c>
f01129d3:	8b 45 ac             	mov    -0x54(%ebp),%eax
f01129d6:	8a 00                	mov    (%eax),%al
f01129d8:	3c 63                	cmp    $0x63,%al
f01129da:	75 51                	jne    f0112a2d <test_copy_paste_chunk+0x55c>
f01129dc:	8b 45 a8             	mov    -0x58(%ebp),%eax
f01129df:	8a 00                	mov    (%eax),%al
f01129e1:	3c 7a                	cmp    $0x7a,%al
f01129e3:	75 48                	jne    f0112a2d <test_copy_paste_chunk+0x55c>
				||  *ch7 != 'd' || *ch8 != tch[8] || *ch9 != 'e' || *ch10 != tch[10] || *ch11!= 'f' || *ch12 != tch[12])
f01129e5:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f01129e8:	8a 00                	mov    (%eax),%al
f01129ea:	3c 64                	cmp    $0x64,%al
f01129ec:	75 3f                	jne    f0112a2d <test_copy_paste_chunk+0x55c>
f01129ee:	8b 45 a0             	mov    -0x60(%ebp),%eax
f01129f1:	8a 10                	mov    (%eax),%dl
f01129f3:	8a 85 a3 fe ff ff    	mov    -0x15d(%ebp),%al
f01129f9:	38 c2                	cmp    %al,%dl
f01129fb:	75 30                	jne    f0112a2d <test_copy_paste_chunk+0x55c>
f01129fd:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0112a00:	8a 00                	mov    (%eax),%al
f0112a02:	3c 65                	cmp    $0x65,%al
f0112a04:	75 27                	jne    f0112a2d <test_copy_paste_chunk+0x55c>
f0112a06:	8b 45 98             	mov    -0x68(%ebp),%eax
f0112a09:	8a 10                	mov    (%eax),%dl
f0112a0b:	8a 85 a5 fe ff ff    	mov    -0x15b(%ebp),%al
f0112a11:	38 c2                	cmp    %al,%dl
f0112a13:	75 18                	jne    f0112a2d <test_copy_paste_chunk+0x55c>
f0112a15:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0112a18:	8a 00                	mov    (%eax),%al
f0112a1a:	3c 66                	cmp    $0x66,%al
f0112a1c:	75 0f                	jne    f0112a2d <test_copy_paste_chunk+0x55c>
f0112a1e:	8b 45 90             	mov    -0x70(%ebp),%eax
f0112a21:	8a 10                	mov    (%eax),%dl
f0112a23:	8a 85 a7 fe ff ff    	mov    -0x159(%ebp),%al
f0112a29:	38 c2                	cmp    %al,%dl
f0112a2b:	74 21                	je     f0112a4e <test_copy_paste_chunk+0x57d>
		{
			warn("[EVAL] copy_paste_chunk: Failed (content is not correct)\n");
f0112a2d:	83 ec 04             	sub    $0x4,%esp
f0112a30:	68 ec 97 13 f0       	push   $0xf01397ec
f0112a35:	68 9c 02 00 00       	push   $0x29c
f0112a3a:	68 5e 8c 13 f0       	push   $0xf0138c5e
f0112a3f:	e8 cf d9 fe ff       	call   f0100413 <_warn>
f0112a44:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0112a47:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		}
		if (correct) eval += 10 ;
f0112a4e:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0112a52:	74 04                	je     f0112a58 <test_copy_paste_chunk+0x587>
f0112a54:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f0112a58:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

	}
	cprintf("\nCASE I: END \n") ;
f0112a5f:	83 ec 0c             	sub    $0xc,%esp
f0112a62:	68 26 98 13 f0       	push   $0xf0139826
f0112a67:	e8 a2 e2 fe ff       	call   f0100d0e <cprintf>
f0112a6c:	83 c4 10             	add    $0x10,%esp

	/*==================================================*/
	/*PART II: Destination page(s) exist & writable 40% */
	/*==================================================*/
	cprintf("\nCASE II: Destination page(s) exist & writable [40%]\n") ;
f0112a6f:	83 ec 0c             	sub    $0xc,%esp
f0112a72:	68 38 98 13 f0       	push   $0xf0139838
f0112a77:	e8 92 e2 fe ff       	call   f0100d0e <cprintf>
f0112a7c:	83 c4 10             	add    $0x10,%esp
	{
		/*allocate page*/char c1[100] ;strcconcat(aup_cmd, " 0x200000", c1); execute_command(c1);
f0112a7f:	83 ec 04             	sub    $0x4,%esp
f0112a82:	8d 85 4f fa ff ff    	lea    -0x5b1(%ebp),%eax
f0112a88:	50                   	push   %eax
f0112a89:	68 6e 98 13 f0       	push   $0xf013986e
f0112a8e:	8d 85 e8 fe ff ff    	lea    -0x118(%ebp),%eax
f0112a94:	50                   	push   %eax
f0112a95:	e8 f6 ec 01 00       	call   f0131790 <strcconcat>
f0112a9a:	83 c4 10             	add    $0x10,%esp
f0112a9d:	83 ec 0c             	sub    $0xc,%esp
f0112aa0:	8d 85 4f fa ff ff    	lea    -0x5b1(%ebp),%eax
f0112aa6:	50                   	push   %eax
f0112aa7:	e8 c4 e2 fe ff       	call   f0100d70 <execute_command>
f0112aac:	83 c4 10             	add    $0x10,%esp
		/*allocate another page ====*/ strcconcat(aup_cmd, " 0x201000", c1); execute_command(c1);
f0112aaf:	83 ec 04             	sub    $0x4,%esp
f0112ab2:	8d 85 4f fa ff ff    	lea    -0x5b1(%ebp),%eax
f0112ab8:	50                   	push   %eax
f0112ab9:	68 78 98 13 f0       	push   $0xf0139878
f0112abe:	8d 85 e8 fe ff ff    	lea    -0x118(%ebp),%eax
f0112ac4:	50                   	push   %eax
f0112ac5:	e8 c6 ec 01 00       	call   f0131790 <strcconcat>
f0112aca:	83 c4 10             	add    $0x10,%esp
f0112acd:	83 ec 0c             	sub    $0xc,%esp
f0112ad0:	8d 85 4f fa ff ff    	lea    -0x5b1(%ebp),%eax
f0112ad6:	50                   	push   %eax
f0112ad7:	e8 94 e2 fe ff       	call   f0100d70 <execute_command>
f0112adc:	83 c4 10             	add    $0x10,%esp
		/*write on 1st page*/
		char c2[100] = "wum 0x200000 a";execute_command(c2);
f0112adf:	8d 85 b3 fa ff ff    	lea    -0x54d(%ebp),%eax
f0112ae5:	bb f1 9d 13 f0       	mov    $0xf0139df1,%ebx
f0112aea:	ba 0f 00 00 00       	mov    $0xf,%edx
f0112aef:	89 c7                	mov    %eax,%edi
f0112af1:	89 de                	mov    %ebx,%esi
f0112af3:	89 d1                	mov    %edx,%ecx
f0112af5:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0112af7:	8d 95 c2 fa ff ff    	lea    -0x53e(%ebp),%edx
f0112afd:	b9 55 00 00 00       	mov    $0x55,%ecx
f0112b02:	b0 00                	mov    $0x0,%al
f0112b04:	89 d7                	mov    %edx,%edi
f0112b06:	f3 aa                	rep stos %al,%es:(%edi)
f0112b08:	83 ec 0c             	sub    $0xc,%esp
f0112b0b:	8d 85 b3 fa ff ff    	lea    -0x54d(%ebp),%eax
f0112b11:	50                   	push   %eax
f0112b12:	e8 59 e2 fe ff       	call   f0100d70 <execute_command>
f0112b17:	83 c4 10             	add    $0x10,%esp
		char c3[100] = "wum 0x2007FF b";execute_command(c3);
f0112b1a:	8d 85 17 fb ff ff    	lea    -0x4e9(%ebp),%eax
f0112b20:	bb 55 9e 13 f0       	mov    $0xf0139e55,%ebx
f0112b25:	ba 0f 00 00 00       	mov    $0xf,%edx
f0112b2a:	89 c7                	mov    %eax,%edi
f0112b2c:	89 de                	mov    %ebx,%esi
f0112b2e:	89 d1                	mov    %edx,%ecx
f0112b30:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0112b32:	8d 95 26 fb ff ff    	lea    -0x4da(%ebp),%edx
f0112b38:	b9 55 00 00 00       	mov    $0x55,%ecx
f0112b3d:	b0 00                	mov    $0x0,%al
f0112b3f:	89 d7                	mov    %edx,%edi
f0112b41:	f3 aa                	rep stos %al,%es:(%edi)
f0112b43:	83 ec 0c             	sub    $0xc,%esp
f0112b46:	8d 85 17 fb ff ff    	lea    -0x4e9(%ebp),%eax
f0112b4c:	50                   	push   %eax
f0112b4d:	e8 1e e2 fe ff       	call   f0100d70 <execute_command>
f0112b52:	83 c4 10             	add    $0x10,%esp
		char c4[100] = "wum 0x200FFF c";execute_command(c4);
f0112b55:	8d 85 7b fb ff ff    	lea    -0x485(%ebp),%eax
f0112b5b:	bb b9 9e 13 f0       	mov    $0xf0139eb9,%ebx
f0112b60:	ba 0f 00 00 00       	mov    $0xf,%edx
f0112b65:	89 c7                	mov    %eax,%edi
f0112b67:	89 de                	mov    %ebx,%esi
f0112b69:	89 d1                	mov    %edx,%ecx
f0112b6b:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0112b6d:	8d 95 8a fb ff ff    	lea    -0x476(%ebp),%edx
f0112b73:	b9 55 00 00 00       	mov    $0x55,%ecx
f0112b78:	b0 00                	mov    $0x0,%al
f0112b7a:	89 d7                	mov    %edx,%edi
f0112b7c:	f3 aa                	rep stos %al,%es:(%edi)
f0112b7e:	83 ec 0c             	sub    $0xc,%esp
f0112b81:	8d 85 7b fb ff ff    	lea    -0x485(%ebp),%eax
f0112b87:	50                   	push   %eax
f0112b88:	e8 e3 e1 fe ff       	call   f0100d70 <execute_command>
f0112b8d:	83 c4 10             	add    $0x10,%esp
		/*write on 2nd page*/
		char c22[100] = "wum 0x201000 d";execute_command(c22);
f0112b90:	8d 85 df fb ff ff    	lea    -0x421(%ebp),%eax
f0112b96:	bb 1d 9f 13 f0       	mov    $0xf0139f1d,%ebx
f0112b9b:	ba 0f 00 00 00       	mov    $0xf,%edx
f0112ba0:	89 c7                	mov    %eax,%edi
f0112ba2:	89 de                	mov    %ebx,%esi
f0112ba4:	89 d1                	mov    %edx,%ecx
f0112ba6:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0112ba8:	8d 95 ee fb ff ff    	lea    -0x412(%ebp),%edx
f0112bae:	b9 55 00 00 00       	mov    $0x55,%ecx
f0112bb3:	b0 00                	mov    $0x0,%al
f0112bb5:	89 d7                	mov    %edx,%edi
f0112bb7:	f3 aa                	rep stos %al,%es:(%edi)
f0112bb9:	83 ec 0c             	sub    $0xc,%esp
f0112bbc:	8d 85 df fb ff ff    	lea    -0x421(%ebp),%eax
f0112bc2:	50                   	push   %eax
f0112bc3:	e8 a8 e1 fe ff       	call   f0100d70 <execute_command>
f0112bc8:	83 c4 10             	add    $0x10,%esp
		char c23[100] = "wum 0x2017FF e";execute_command(c23);
f0112bcb:	8d 85 43 fc ff ff    	lea    -0x3bd(%ebp),%eax
f0112bd1:	bb 81 9f 13 f0       	mov    $0xf0139f81,%ebx
f0112bd6:	ba 0f 00 00 00       	mov    $0xf,%edx
f0112bdb:	89 c7                	mov    %eax,%edi
f0112bdd:	89 de                	mov    %ebx,%esi
f0112bdf:	89 d1                	mov    %edx,%ecx
f0112be1:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0112be3:	8d 95 52 fc ff ff    	lea    -0x3ae(%ebp),%edx
f0112be9:	b9 55 00 00 00       	mov    $0x55,%ecx
f0112bee:	b0 00                	mov    $0x0,%al
f0112bf0:	89 d7                	mov    %edx,%edi
f0112bf2:	f3 aa                	rep stos %al,%es:(%edi)
f0112bf4:	83 ec 0c             	sub    $0xc,%esp
f0112bf7:	8d 85 43 fc ff ff    	lea    -0x3bd(%ebp),%eax
f0112bfd:	50                   	push   %eax
f0112bfe:	e8 6d e1 fe ff       	call   f0100d70 <execute_command>
f0112c03:	83 c4 10             	add    $0x10,%esp
		char c24[100] = "wum 0x201FFF f";execute_command(c24);
f0112c06:	8d 85 a7 fc ff ff    	lea    -0x359(%ebp),%eax
f0112c0c:	bb e5 9f 13 f0       	mov    $0xf0139fe5,%ebx
f0112c11:	ba 0f 00 00 00       	mov    $0xf,%edx
f0112c16:	89 c7                	mov    %eax,%edi
f0112c18:	89 de                	mov    %ebx,%esi
f0112c1a:	89 d1                	mov    %edx,%ecx
f0112c1c:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0112c1e:	8d 95 b6 fc ff ff    	lea    -0x34a(%ebp),%edx
f0112c24:	b9 55 00 00 00       	mov    $0x55,%ecx
f0112c29:	b0 00                	mov    $0x0,%al
f0112c2b:	89 d7                	mov    %edx,%edi
f0112c2d:	f3 aa                	rep stos %al,%es:(%edi)
f0112c2f:	83 ec 0c             	sub    $0xc,%esp
f0112c32:	8d 85 a7 fc ff ff    	lea    -0x359(%ebp),%eax
f0112c38:	50                   	push   %eax
f0112c39:	e8 32 e1 fe ff       	call   f0100d70 <execute_command>
f0112c3e:	83 c4 10             	add    $0x10,%esp
		/*allocate page*/char c5[100] ;strcconcat(aup_cmd, " 0x400000", c5); execute_command(c5);
f0112c41:	83 ec 04             	sub    $0x4,%esp
f0112c44:	8d 85 0b fd ff ff    	lea    -0x2f5(%ebp),%eax
f0112c4a:	50                   	push   %eax
f0112c4b:	68 82 98 13 f0       	push   $0xf0139882
f0112c50:	8d 85 e8 fe ff ff    	lea    -0x118(%ebp),%eax
f0112c56:	50                   	push   %eax
f0112c57:	e8 34 eb 01 00       	call   f0131790 <strcconcat>
f0112c5c:	83 c4 10             	add    $0x10,%esp
f0112c5f:	83 ec 0c             	sub    $0xc,%esp
f0112c62:	8d 85 0b fd ff ff    	lea    -0x2f5(%ebp),%eax
f0112c68:	50                   	push   %eax
f0112c69:	e8 02 e1 fe ff       	call   f0100d70 <execute_command>
f0112c6e:	83 c4 10             	add    $0x10,%esp
		/*allocate another page ====*/ strcconcat(aup_cmd, " 0x401000", c5); execute_command(c5);
f0112c71:	83 ec 04             	sub    $0x4,%esp
f0112c74:	8d 85 0b fd ff ff    	lea    -0x2f5(%ebp),%eax
f0112c7a:	50                   	push   %eax
f0112c7b:	68 8c 98 13 f0       	push   $0xf013988c
f0112c80:	8d 85 e8 fe ff ff    	lea    -0x118(%ebp),%eax
f0112c86:	50                   	push   %eax
f0112c87:	e8 04 eb 01 00       	call   f0131790 <strcconcat>
f0112c8c:	83 c4 10             	add    $0x10,%esp
f0112c8f:	83 ec 0c             	sub    $0xc,%esp
f0112c92:	8d 85 0b fd ff ff    	lea    -0x2f5(%ebp),%eax
f0112c98:	50                   	push   %eax
f0112c99:	e8 d2 e0 fe ff       	call   f0100d70 <execute_command>
f0112c9e:	83 c4 10             	add    $0x10,%esp
		char c6[100] = "wum 0x400000 x";execute_command(c6);
f0112ca1:	8d 85 6f fd ff ff    	lea    -0x291(%ebp),%eax
f0112ca7:	bb 49 a0 13 f0       	mov    $0xf013a049,%ebx
f0112cac:	ba 0f 00 00 00       	mov    $0xf,%edx
f0112cb1:	89 c7                	mov    %eax,%edi
f0112cb3:	89 de                	mov    %ebx,%esi
f0112cb5:	89 d1                	mov    %edx,%ecx
f0112cb7:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0112cb9:	8d 95 7e fd ff ff    	lea    -0x282(%ebp),%edx
f0112cbf:	b9 55 00 00 00       	mov    $0x55,%ecx
f0112cc4:	b0 00                	mov    $0x0,%al
f0112cc6:	89 d7                	mov    %edx,%edi
f0112cc8:	f3 aa                	rep stos %al,%es:(%edi)
f0112cca:	83 ec 0c             	sub    $0xc,%esp
f0112ccd:	8d 85 6f fd ff ff    	lea    -0x291(%ebp),%eax
f0112cd3:	50                   	push   %eax
f0112cd4:	e8 97 e0 fe ff       	call   f0100d70 <execute_command>
f0112cd9:	83 c4 10             	add    $0x10,%esp
		char c7[100] = "wum 0x4007FF y";execute_command(c7);
f0112cdc:	8d 85 d3 fd ff ff    	lea    -0x22d(%ebp),%eax
f0112ce2:	bb ad a0 13 f0       	mov    $0xf013a0ad,%ebx
f0112ce7:	ba 0f 00 00 00       	mov    $0xf,%edx
f0112cec:	89 c7                	mov    %eax,%edi
f0112cee:	89 de                	mov    %ebx,%esi
f0112cf0:	89 d1                	mov    %edx,%ecx
f0112cf2:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0112cf4:	8d 95 e2 fd ff ff    	lea    -0x21e(%ebp),%edx
f0112cfa:	b9 55 00 00 00       	mov    $0x55,%ecx
f0112cff:	b0 00                	mov    $0x0,%al
f0112d01:	89 d7                	mov    %edx,%edi
f0112d03:	f3 aa                	rep stos %al,%es:(%edi)
f0112d05:	83 ec 0c             	sub    $0xc,%esp
f0112d08:	8d 85 d3 fd ff ff    	lea    -0x22d(%ebp),%eax
f0112d0e:	50                   	push   %eax
f0112d0f:	e8 5c e0 fe ff       	call   f0100d70 <execute_command>
f0112d14:	83 c4 10             	add    $0x10,%esp
		char c8[100] = "wum 0x400FFF z";execute_command(c8);
f0112d17:	8d 85 37 fe ff ff    	lea    -0x1c9(%ebp),%eax
f0112d1d:	bb 11 a1 13 f0       	mov    $0xf013a111,%ebx
f0112d22:	ba 0f 00 00 00       	mov    $0xf,%edx
f0112d27:	89 c7                	mov    %eax,%edi
f0112d29:	89 de                	mov    %ebx,%esi
f0112d2b:	89 d1                	mov    %edx,%ecx
f0112d2d:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0112d2f:	8d 95 46 fe ff ff    	lea    -0x1ba(%ebp),%edx
f0112d35:	b9 55 00 00 00       	mov    $0x55,%ecx
f0112d3a:	b0 00                	mov    $0x0,%al
f0112d3c:	89 d7                	mov    %edx,%edi
f0112d3e:	f3 aa                	rep stos %al,%es:(%edi)
f0112d40:	83 ec 0c             	sub    $0xc,%esp
f0112d43:	8d 85 37 fe ff ff    	lea    -0x1c9(%ebp),%eax
f0112d49:	50                   	push   %eax
f0112d4a:	e8 21 e0 fe ff       	call   f0100d70 <execute_command>
f0112d4f:	83 c4 10             	add    $0x10,%esp

		//Test1
		ch1 = (char*)0x200000; ch2 = (char*)0x400000;
f0112d52:	c7 45 bc 00 00 20 00 	movl   $0x200000,-0x44(%ebp)
f0112d59:	c7 45 b8 00 00 40 00 	movl   $0x400000,-0x48(%ebp)
		ch3 = (char*)0x2007FF; ch4 = (char*)0x4007FF;
f0112d60:	c7 45 b4 ff 07 20 00 	movl   $0x2007ff,-0x4c(%ebp)
f0112d67:	c7 45 b0 ff 07 40 00 	movl   $0x4007ff,-0x50(%ebp)
		ch5 = (char*)0x200FFF; ch6 = (char*)0x400FFF;
f0112d6e:	c7 45 ac ff 0f 20 00 	movl   $0x200fff,-0x54(%ebp)
f0112d75:	c7 45 a8 ff 0f 40 00 	movl   $0x400fff,-0x58(%ebp)
		ch7 = (char*)0x201000; ch8 = (char*)0x401000;
f0112d7c:	c7 45 a4 00 10 20 00 	movl   $0x201000,-0x5c(%ebp)
f0112d83:	c7 45 a0 00 10 40 00 	movl   $0x401000,-0x60(%ebp)
		ch9 = (char*)0x2017FF; ch10= (char*)0x4017FF;
f0112d8a:	c7 45 9c ff 17 20 00 	movl   $0x2017ff,-0x64(%ebp)
f0112d91:	c7 45 98 ff 17 40 00 	movl   $0x4017ff,-0x68(%ebp)
		ch11= (char*)0x201FFF; ch12= (char*)0x401FFF;
f0112d98:	c7 45 94 ff 1f 20 00 	movl   $0x201fff,-0x6c(%ebp)
f0112d9f:	c7 45 90 ff 1f 40 00 	movl   $0x401fff,-0x70(%ebp)

		tch[12] = *ch12 ;
f0112da6:	8b 45 90             	mov    -0x70(%ebp),%eax
f0112da9:	8a 00                	mov    (%eax),%al
f0112dab:	88 85 a7 fe ff ff    	mov    %al,-0x159(%ebp)
		numOfFreeFramesBefore = sys_calculate_free_frames();
f0112db1:	e8 e7 9d ff ff       	call   f010cb9d <sys_calculate_free_frames>
f0112db6:	89 45 8c             	mov    %eax,-0x74(%ebp)

		int ret = copy_paste_chunk(proc_directory, 0x200000, 0x400000, 6*kilo);
f0112db9:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0112dbc:	89 d0                	mov    %edx,%eax
f0112dbe:	01 c0                	add    %eax,%eax
f0112dc0:	01 d0                	add    %edx,%eax
f0112dc2:	01 c0                	add    %eax,%eax
f0112dc4:	50                   	push   %eax
f0112dc5:	68 00 00 40 00       	push   $0x400000
f0112dca:	68 00 00 20 00       	push   $0x200000
f0112dcf:	ff 75 d4             	pushl  -0x2c(%ebp)
f0112dd2:	e8 f7 5a ff ff       	call   f01088ce <copy_paste_chunk>
f0112dd7:	83 c4 10             	add    $0x10,%esp
f0112dda:	89 45 80             	mov    %eax,-0x80(%ebp)

		numOfFreeFramesAfter = sys_calculate_free_frames();
f0112ddd:	e8 bb 9d ff ff       	call   f010cb9d <sys_calculate_free_frames>
f0112de2:	89 45 84             	mov    %eax,-0x7c(%ebp)

		correct = 1 ;
f0112de5:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
		if (ret != 0 || numOfFreeFramesBefore != numOfFreeFramesAfter)
f0112dec:	83 7d 80 00          	cmpl   $0x0,-0x80(%ebp)
f0112df0:	75 08                	jne    f0112dfa <test_copy_paste_chunk+0x929>
f0112df2:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0112df5:	3b 45 84             	cmp    -0x7c(%ebp),%eax
f0112df8:	74 2b                	je     f0112e25 <test_copy_paste_chunk+0x954>
		{
			warn("[EVAL] copy_paste_chunk: Failed (# allocated frames is not correct) ret=%d diff=%d\n", ret, numOfFreeFramesBefore - numOfFreeFramesAfter);
f0112dfa:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0112dfd:	2b 45 84             	sub    -0x7c(%ebp),%eax
f0112e00:	83 ec 0c             	sub    $0xc,%esp
f0112e03:	50                   	push   %eax
f0112e04:	ff 75 80             	pushl  -0x80(%ebp)
f0112e07:	68 98 98 13 f0       	push   $0xf0139898
f0112e0c:	68 cc 02 00 00       	push   $0x2cc
f0112e11:	68 5e 8c 13 f0       	push   $0xf0138c5e
f0112e16:	e8 f8 d5 fe ff       	call   f0100413 <_warn>
f0112e1b:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0112e1e:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		}
		if (correct) eval += 5 ;
f0112e25:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0112e29:	74 04                	je     f0112e2f <test_copy_paste_chunk+0x95e>
f0112e2b:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0112e2f:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

		int chkcnt = 1;
f0112e36:	c7 85 7c ff ff ff 01 	movl   $0x1,-0x84(%ebp)
f0112e3d:	00 00 00 
		if (CCP(proc_directory, 0x200000, 0x400000, 2*PAGE_SIZE, 1, 0x007, 0x007, 0x007, 0x007, CHK_COPY_PASTE) != 1)
f0112e40:	83 ec 08             	sub    $0x8,%esp
f0112e43:	6a 01                	push   $0x1
f0112e45:	6a 07                	push   $0x7
f0112e47:	6a 07                	push   $0x7
f0112e49:	6a 07                	push   $0x7
f0112e4b:	6a 07                	push   $0x7
f0112e4d:	6a 01                	push   $0x1
f0112e4f:	68 00 20 00 00       	push   $0x2000
f0112e54:	68 00 00 40 00       	push   $0x400000
f0112e59:	68 00 00 20 00       	push   $0x200000
f0112e5e:	ff 75 d4             	pushl  -0x2c(%ebp)
f0112e61:	e8 67 32 00 00       	call   f01160cd <CCP>
f0112e66:	83 c4 30             	add    $0x30,%esp
f0112e69:	83 f8 01             	cmp    $0x1,%eax
f0112e6c:	74 2b                	je     f0112e99 <test_copy_paste_chunk+0x9c8>
		{
			warn("[EVAL] copy_paste_chunk: Failed (problem in permissions and/or references)\n");
f0112e6e:	83 ec 04             	sub    $0x4,%esp
f0112e71:	68 ec 98 13 f0       	push   $0xf01398ec
f0112e76:	68 d5 02 00 00       	push   $0x2d5
f0112e7b:	68 5e 8c 13 f0       	push   $0xf0138c5e
f0112e80:	e8 8e d5 fe ff       	call   f0100413 <_warn>
f0112e85:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0112e88:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
			chkcnt = 0;
f0112e8f:	c7 85 7c ff ff ff 00 	movl   $0x0,-0x84(%ebp)
f0112e96:	00 00 00 
		}
		if (correct) eval += 5 ;
f0112e99:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0112e9d:	74 04                	je     f0112ea3 <test_copy_paste_chunk+0x9d2>
f0112e9f:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0112ea3:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

		*ch3 = 'y' ;	// wum 0x2007FF y
f0112eaa:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0112ead:	c6 00 79             	movb   $0x79,(%eax)
		*ch6 = 'z' ;	// wum 0x400FFF z
f0112eb0:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0112eb3:	c6 00 7a             	movb   $0x7a,(%eax)
		*ch7 = 'w' ;	// wum 0x201000 w
f0112eb6:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0112eb9:	c6 00 77             	movb   $0x77,(%eax)

		if (*ch1 != 'a' || *ch2 != 'a' || *ch3 != 'y' || *ch4 != 'b' || *ch5 != 'c' || *ch6 != 'z'
f0112ebc:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0112ebf:	8a 00                	mov    (%eax),%al
f0112ec1:	3c 61                	cmp    $0x61,%al
f0112ec3:	75 69                	jne    f0112f2e <test_copy_paste_chunk+0xa5d>
f0112ec5:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0112ec8:	8a 00                	mov    (%eax),%al
f0112eca:	3c 61                	cmp    $0x61,%al
f0112ecc:	75 60                	jne    f0112f2e <test_copy_paste_chunk+0xa5d>
f0112ece:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0112ed1:	8a 00                	mov    (%eax),%al
f0112ed3:	3c 79                	cmp    $0x79,%al
f0112ed5:	75 57                	jne    f0112f2e <test_copy_paste_chunk+0xa5d>
f0112ed7:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0112eda:	8a 00                	mov    (%eax),%al
f0112edc:	3c 62                	cmp    $0x62,%al
f0112ede:	75 4e                	jne    f0112f2e <test_copy_paste_chunk+0xa5d>
f0112ee0:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0112ee3:	8a 00                	mov    (%eax),%al
f0112ee5:	3c 63                	cmp    $0x63,%al
f0112ee7:	75 45                	jne    f0112f2e <test_copy_paste_chunk+0xa5d>
f0112ee9:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0112eec:	8a 00                	mov    (%eax),%al
f0112eee:	3c 7a                	cmp    $0x7a,%al
f0112ef0:	75 3c                	jne    f0112f2e <test_copy_paste_chunk+0xa5d>
				||  *ch7 != 'w' || *ch8 != 'd' || *ch9 != 'e' || *ch10!= 'e' || *ch11!= 'f' || *ch12 != tch[12])
f0112ef2:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0112ef5:	8a 00                	mov    (%eax),%al
f0112ef7:	3c 77                	cmp    $0x77,%al
f0112ef9:	75 33                	jne    f0112f2e <test_copy_paste_chunk+0xa5d>
f0112efb:	8b 45 a0             	mov    -0x60(%ebp),%eax
f0112efe:	8a 00                	mov    (%eax),%al
f0112f00:	3c 64                	cmp    $0x64,%al
f0112f02:	75 2a                	jne    f0112f2e <test_copy_paste_chunk+0xa5d>
f0112f04:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0112f07:	8a 00                	mov    (%eax),%al
f0112f09:	3c 65                	cmp    $0x65,%al
f0112f0b:	75 21                	jne    f0112f2e <test_copy_paste_chunk+0xa5d>
f0112f0d:	8b 45 98             	mov    -0x68(%ebp),%eax
f0112f10:	8a 00                	mov    (%eax),%al
f0112f12:	3c 65                	cmp    $0x65,%al
f0112f14:	75 18                	jne    f0112f2e <test_copy_paste_chunk+0xa5d>
f0112f16:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0112f19:	8a 00                	mov    (%eax),%al
f0112f1b:	3c 66                	cmp    $0x66,%al
f0112f1d:	75 0f                	jne    f0112f2e <test_copy_paste_chunk+0xa5d>
f0112f1f:	8b 45 90             	mov    -0x70(%ebp),%eax
f0112f22:	8a 10                	mov    (%eax),%dl
f0112f24:	8a 85 a7 fe ff ff    	mov    -0x159(%ebp),%al
f0112f2a:	38 c2                	cmp    %al,%dl
f0112f2c:	74 21                	je     f0112f4f <test_copy_paste_chunk+0xa7e>
		{
			warn("[EVAL] copy_paste_chunk: Failed (content is not correct)\n");
f0112f2e:	83 ec 04             	sub    $0x4,%esp
f0112f31:	68 ec 97 13 f0       	push   $0xf01397ec
f0112f36:	68 e3 02 00 00       	push   $0x2e3
f0112f3b:	68 5e 8c 13 f0       	push   $0xf0138c5e
f0112f40:	e8 ce d4 fe ff       	call   f0100413 <_warn>
f0112f45:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0112f48:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		}
		if (correct) eval += 10 ;
f0112f4f:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0112f53:	74 04                	je     f0112f59 <test_copy_paste_chunk+0xa88>
f0112f55:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f0112f59:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

		//Test2
		*ch10 = 'x';	// wum 0x4017FF y
f0112f60:	8b 45 98             	mov    -0x68(%ebp),%eax
f0112f63:	c6 00 78             	movb   $0x78,(%eax)
		numOfFreeFramesBefore = sys_calculate_free_frames();
f0112f66:	e8 32 9c ff ff       	call   f010cb9d <sys_calculate_free_frames>
f0112f6b:	89 45 8c             	mov    %eax,-0x74(%ebp)

		ret = copy_paste_chunk(proc_directory, 0x400800, 0x200800, 3*kilo);
f0112f6e:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0112f71:	89 c2                	mov    %eax,%edx
f0112f73:	01 d2                	add    %edx,%edx
f0112f75:	01 d0                	add    %edx,%eax
f0112f77:	50                   	push   %eax
f0112f78:	68 00 08 20 00       	push   $0x200800
f0112f7d:	68 00 08 40 00       	push   $0x400800
f0112f82:	ff 75 d4             	pushl  -0x2c(%ebp)
f0112f85:	e8 44 59 ff ff       	call   f01088ce <copy_paste_chunk>
f0112f8a:	83 c4 10             	add    $0x10,%esp
f0112f8d:	89 45 80             	mov    %eax,-0x80(%ebp)

		numOfFreeFramesAfter = sys_calculate_free_frames();
f0112f90:	e8 08 9c ff ff       	call   f010cb9d <sys_calculate_free_frames>
f0112f95:	89 45 84             	mov    %eax,-0x7c(%ebp)

		if (ret != 0 || numOfFreeFramesBefore != numOfFreeFramesAfter)
f0112f98:	83 7d 80 00          	cmpl   $0x0,-0x80(%ebp)
f0112f9c:	75 08                	jne    f0112fa6 <test_copy_paste_chunk+0xad5>
f0112f9e:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0112fa1:	3b 45 84             	cmp    -0x7c(%ebp),%eax
f0112fa4:	74 2b                	je     f0112fd1 <test_copy_paste_chunk+0xb00>
		{
			warn("[EVAL] copy_paste_chunk: Failed (# allocated frames is not correct) ret=%d diff=%d\n", ret, numOfFreeFramesBefore - numOfFreeFramesAfter);
f0112fa6:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0112fa9:	2b 45 84             	sub    -0x7c(%ebp),%eax
f0112fac:	83 ec 0c             	sub    $0xc,%esp
f0112faf:	50                   	push   %eax
f0112fb0:	ff 75 80             	pushl  -0x80(%ebp)
f0112fb3:	68 98 98 13 f0       	push   $0xf0139898
f0112fb8:	68 f3 02 00 00       	push   $0x2f3
f0112fbd:	68 5e 8c 13 f0       	push   $0xf0138c5e
f0112fc2:	e8 4c d4 fe ff       	call   f0100413 <_warn>
f0112fc7:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0112fca:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		}
		if (correct) eval += 5 ;
f0112fd1:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0112fd5:	74 04                	je     f0112fdb <test_copy_paste_chunk+0xb0a>
f0112fd7:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0112fdb:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

		if (CCP(proc_directory, 0x400000, 0x200000, 2*PAGE_SIZE, 1, 0x007, 0x007, 0x007, 0x007, CHK_COPY_PASTE) != 1)
f0112fe2:	83 ec 08             	sub    $0x8,%esp
f0112fe5:	6a 01                	push   $0x1
f0112fe7:	6a 07                	push   $0x7
f0112fe9:	6a 07                	push   $0x7
f0112feb:	6a 07                	push   $0x7
f0112fed:	6a 07                	push   $0x7
f0112fef:	6a 01                	push   $0x1
f0112ff1:	68 00 20 00 00       	push   $0x2000
f0112ff6:	68 00 00 20 00       	push   $0x200000
f0112ffb:	68 00 00 40 00       	push   $0x400000
f0113000:	ff 75 d4             	pushl  -0x2c(%ebp)
f0113003:	e8 c5 30 00 00       	call   f01160cd <CCP>
f0113008:	83 c4 30             	add    $0x30,%esp
f011300b:	83 f8 01             	cmp    $0x1,%eax
f011300e:	74 21                	je     f0113031 <test_copy_paste_chunk+0xb60>
		{
			warn("[EVAL] copy_paste_chunk: Failed (problem in permissions and/or references\n");
f0113010:	83 ec 04             	sub    $0x4,%esp
f0113013:	68 38 99 13 f0       	push   $0xf0139938
f0113018:	68 fb 02 00 00       	push   $0x2fb
f011301d:	68 5e 8c 13 f0       	push   $0xf0138c5e
f0113022:	e8 ec d3 fe ff       	call   f0100413 <_warn>
f0113027:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f011302a:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		}
		if (correct) eval += 5 ;
f0113031:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0113035:	74 04                	je     f011303b <test_copy_paste_chunk+0xb6a>
f0113037:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f011303b:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

		if (*ch1 != 'a' || *ch2 != 'a' || *ch3 != 'y' || *ch4 != 'b' || *ch5 != 'z' || *ch6 != 'z' ||
f0113042:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0113045:	8a 00                	mov    (%eax),%al
f0113047:	3c 61                	cmp    $0x61,%al
f0113049:	75 69                	jne    f01130b4 <test_copy_paste_chunk+0xbe3>
f011304b:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011304e:	8a 00                	mov    (%eax),%al
f0113050:	3c 61                	cmp    $0x61,%al
f0113052:	75 60                	jne    f01130b4 <test_copy_paste_chunk+0xbe3>
f0113054:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0113057:	8a 00                	mov    (%eax),%al
f0113059:	3c 79                	cmp    $0x79,%al
f011305b:	75 57                	jne    f01130b4 <test_copy_paste_chunk+0xbe3>
f011305d:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0113060:	8a 00                	mov    (%eax),%al
f0113062:	3c 62                	cmp    $0x62,%al
f0113064:	75 4e                	jne    f01130b4 <test_copy_paste_chunk+0xbe3>
f0113066:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0113069:	8a 00                	mov    (%eax),%al
f011306b:	3c 7a                	cmp    $0x7a,%al
f011306d:	75 45                	jne    f01130b4 <test_copy_paste_chunk+0xbe3>
f011306f:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0113072:	8a 00                	mov    (%eax),%al
f0113074:	3c 7a                	cmp    $0x7a,%al
f0113076:	75 3c                	jne    f01130b4 <test_copy_paste_chunk+0xbe3>
				*ch7 != 'd' || *ch8 != 'd' || *ch9 != 'e' || *ch10!= 'x' || *ch11!= 'f'  || *ch12 != tch[12])
f0113078:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f011307b:	8a 00                	mov    (%eax),%al
			correct = 0;
		}
		if (correct) eval += 5 ;
		correct = 1 ;

		if (*ch1 != 'a' || *ch2 != 'a' || *ch3 != 'y' || *ch4 != 'b' || *ch5 != 'z' || *ch6 != 'z' ||
f011307d:	3c 64                	cmp    $0x64,%al
f011307f:	75 33                	jne    f01130b4 <test_copy_paste_chunk+0xbe3>
				*ch7 != 'd' || *ch8 != 'd' || *ch9 != 'e' || *ch10!= 'x' || *ch11!= 'f'  || *ch12 != tch[12])
f0113081:	8b 45 a0             	mov    -0x60(%ebp),%eax
f0113084:	8a 00                	mov    (%eax),%al
f0113086:	3c 64                	cmp    $0x64,%al
f0113088:	75 2a                	jne    f01130b4 <test_copy_paste_chunk+0xbe3>
f011308a:	8b 45 9c             	mov    -0x64(%ebp),%eax
f011308d:	8a 00                	mov    (%eax),%al
f011308f:	3c 65                	cmp    $0x65,%al
f0113091:	75 21                	jne    f01130b4 <test_copy_paste_chunk+0xbe3>
f0113093:	8b 45 98             	mov    -0x68(%ebp),%eax
f0113096:	8a 00                	mov    (%eax),%al
f0113098:	3c 78                	cmp    $0x78,%al
f011309a:	75 18                	jne    f01130b4 <test_copy_paste_chunk+0xbe3>
f011309c:	8b 45 94             	mov    -0x6c(%ebp),%eax
f011309f:	8a 00                	mov    (%eax),%al
f01130a1:	3c 66                	cmp    $0x66,%al
f01130a3:	75 0f                	jne    f01130b4 <test_copy_paste_chunk+0xbe3>
f01130a5:	8b 45 90             	mov    -0x70(%ebp),%eax
f01130a8:	8a 10                	mov    (%eax),%dl
f01130aa:	8a 85 a7 fe ff ff    	mov    -0x159(%ebp),%al
f01130b0:	38 c2                	cmp    %al,%dl
f01130b2:	74 21                	je     f01130d5 <test_copy_paste_chunk+0xc04>
		{
			warn("[EVAL] copy_paste_chunk: Failed (content is not correct)\n");
f01130b4:	83 ec 04             	sub    $0x4,%esp
f01130b7:	68 ec 97 13 f0       	push   $0xf01397ec
f01130bc:	68 04 03 00 00       	push   $0x304
f01130c1:	68 5e 8c 13 f0       	push   $0xf0138c5e
f01130c6:	e8 48 d3 fe ff       	call   f0100413 <_warn>
f01130cb:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f01130ce:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		}
		if (correct) eval += 10 ;
f01130d5:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f01130d9:	74 04                	je     f01130df <test_copy_paste_chunk+0xc0e>
f01130db:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f01130df:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

	}
	cprintf("\nCASE II: END\n") ;
f01130e6:	83 ec 0c             	sub    $0xc,%esp
f01130e9:	68 83 99 13 f0       	push   $0xf0139983
f01130ee:	e8 1b dc fe ff       	call   f0100d0e <cprintf>
f01130f3:	83 c4 10             	add    $0x10,%esp

	/*================================================*/
	/*PART III: Destination page(s) doesn't exist 40% */
	/*================================================*/
	cprintf("\nCASE III: Destination page(s) doesn't exist [40%]\n") ;
f01130f6:	83 ec 0c             	sub    $0xc,%esp
f01130f9:	68 94 99 13 f0       	push   $0xf0139994
f01130fe:	e8 0b dc fe ff       	call   f0100d0e <cprintf>
f0113103:	83 c4 10             	add    $0x10,%esp
	{
		/*allocate page*/char c1[100] ;strcconcat(aup_cmd, " 0x800000", c1); execute_command(c1);
f0113106:	83 ec 04             	sub    $0x4,%esp
f0113109:	8d 85 0b fd ff ff    	lea    -0x2f5(%ebp),%eax
f011310f:	50                   	push   %eax
f0113110:	68 c8 99 13 f0       	push   $0xf01399c8
f0113115:	8d 85 e8 fe ff ff    	lea    -0x118(%ebp),%eax
f011311b:	50                   	push   %eax
f011311c:	e8 6f e6 01 00       	call   f0131790 <strcconcat>
f0113121:	83 c4 10             	add    $0x10,%esp
f0113124:	83 ec 0c             	sub    $0xc,%esp
f0113127:	8d 85 0b fd ff ff    	lea    -0x2f5(%ebp),%eax
f011312d:	50                   	push   %eax
f011312e:	e8 3d dc fe ff       	call   f0100d70 <execute_command>
f0113133:	83 c4 10             	add    $0x10,%esp
		/*allocate another page ====*/ strcconcat(aup_cmd, " 0x801000", c1); execute_command(c1);
f0113136:	83 ec 04             	sub    $0x4,%esp
f0113139:	8d 85 0b fd ff ff    	lea    -0x2f5(%ebp),%eax
f011313f:	50                   	push   %eax
f0113140:	68 d2 99 13 f0       	push   $0xf01399d2
f0113145:	8d 85 e8 fe ff ff    	lea    -0x118(%ebp),%eax
f011314b:	50                   	push   %eax
f011314c:	e8 3f e6 01 00       	call   f0131790 <strcconcat>
f0113151:	83 c4 10             	add    $0x10,%esp
f0113154:	83 ec 0c             	sub    $0xc,%esp
f0113157:	8d 85 0b fd ff ff    	lea    -0x2f5(%ebp),%eax
f011315d:	50                   	push   %eax
f011315e:	e8 0d dc fe ff       	call   f0100d70 <execute_command>
f0113163:	83 c4 10             	add    $0x10,%esp
		/*allocate another page ====*/ strcconcat(aup_cmd, " 0x802000", c1); execute_command(c1);
f0113166:	83 ec 04             	sub    $0x4,%esp
f0113169:	8d 85 0b fd ff ff    	lea    -0x2f5(%ebp),%eax
f011316f:	50                   	push   %eax
f0113170:	68 dc 99 13 f0       	push   $0xf01399dc
f0113175:	8d 85 e8 fe ff ff    	lea    -0x118(%ebp),%eax
f011317b:	50                   	push   %eax
f011317c:	e8 0f e6 01 00       	call   f0131790 <strcconcat>
f0113181:	83 c4 10             	add    $0x10,%esp
f0113184:	83 ec 0c             	sub    $0xc,%esp
f0113187:	8d 85 0b fd ff ff    	lea    -0x2f5(%ebp),%eax
f011318d:	50                   	push   %eax
f011318e:	e8 dd db fe ff       	call   f0100d70 <execute_command>
f0113193:	83 c4 10             	add    $0x10,%esp
		char c14[100] = "wum 0x800000 a"; execute_command(c14);
f0113196:	8d 85 6f fd ff ff    	lea    -0x291(%ebp),%eax
f011319c:	bb 75 a1 13 f0       	mov    $0xf013a175,%ebx
f01131a1:	ba 0f 00 00 00       	mov    $0xf,%edx
f01131a6:	89 c7                	mov    %eax,%edi
f01131a8:	89 de                	mov    %ebx,%esi
f01131aa:	89 d1                	mov    %edx,%ecx
f01131ac:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f01131ae:	8d 95 7e fd ff ff    	lea    -0x282(%ebp),%edx
f01131b4:	b9 55 00 00 00       	mov    $0x55,%ecx
f01131b9:	b0 00                	mov    $0x0,%al
f01131bb:	89 d7                	mov    %edx,%edi
f01131bd:	f3 aa                	rep stos %al,%es:(%edi)
f01131bf:	83 ec 0c             	sub    $0xc,%esp
f01131c2:	8d 85 6f fd ff ff    	lea    -0x291(%ebp),%eax
f01131c8:	50                   	push   %eax
f01131c9:	e8 a2 db fe ff       	call   f0100d70 <execute_command>
f01131ce:	83 c4 10             	add    $0x10,%esp
		char c15[100] = "wum 0x8017FF b"; execute_command(c15);
f01131d1:	8d 85 d3 fd ff ff    	lea    -0x22d(%ebp),%eax
f01131d7:	bb d9 a1 13 f0       	mov    $0xf013a1d9,%ebx
f01131dc:	ba 0f 00 00 00       	mov    $0xf,%edx
f01131e1:	89 c7                	mov    %eax,%edi
f01131e3:	89 de                	mov    %ebx,%esi
f01131e5:	89 d1                	mov    %edx,%ecx
f01131e7:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f01131e9:	8d 95 e2 fd ff ff    	lea    -0x21e(%ebp),%edx
f01131ef:	b9 55 00 00 00       	mov    $0x55,%ecx
f01131f4:	b0 00                	mov    $0x0,%al
f01131f6:	89 d7                	mov    %edx,%edi
f01131f8:	f3 aa                	rep stos %al,%es:(%edi)
f01131fa:	83 ec 0c             	sub    $0xc,%esp
f01131fd:	8d 85 d3 fd ff ff    	lea    -0x22d(%ebp),%eax
f0113203:	50                   	push   %eax
f0113204:	e8 67 db fe ff       	call   f0100d70 <execute_command>
f0113209:	83 c4 10             	add    $0x10,%esp
		char c16[100] = "wum 0x802FFF c"; execute_command(c16);
f011320c:	8d 85 37 fe ff ff    	lea    -0x1c9(%ebp),%eax
f0113212:	bb 3d a2 13 f0       	mov    $0xf013a23d,%ebx
f0113217:	ba 0f 00 00 00       	mov    $0xf,%edx
f011321c:	89 c7                	mov    %eax,%edi
f011321e:	89 de                	mov    %ebx,%esi
f0113220:	89 d1                	mov    %edx,%ecx
f0113222:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0113224:	8d 95 46 fe ff ff    	lea    -0x1ba(%ebp),%edx
f011322a:	b9 55 00 00 00       	mov    $0x55,%ecx
f011322f:	b0 00                	mov    $0x0,%al
f0113231:	89 d7                	mov    %edx,%edi
f0113233:	f3 aa                	rep stos %al,%es:(%edi)
f0113235:	83 ec 0c             	sub    $0xc,%esp
f0113238:	8d 85 37 fe ff ff    	lea    -0x1c9(%ebp),%eax
f011323e:	50                   	push   %eax
f011323f:	e8 2c db fe ff       	call   f0100d70 <execute_command>
f0113244:	83 c4 10             	add    $0x10,%esp

		//Test3
		numOfFreeFramesBefore = sys_calculate_free_frames();
f0113247:	e8 51 99 ff ff       	call   f010cb9d <sys_calculate_free_frames>
f011324c:	89 45 8c             	mov    %eax,-0x74(%ebp)

		int ret = copy_paste_chunk(proc_directory, 0x800000, 0x900000, 12*kilo);
f011324f:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0113252:	89 d0                	mov    %edx,%eax
f0113254:	01 c0                	add    %eax,%eax
f0113256:	01 d0                	add    %edx,%eax
f0113258:	c1 e0 02             	shl    $0x2,%eax
f011325b:	50                   	push   %eax
f011325c:	68 00 00 90 00       	push   $0x900000
f0113261:	68 00 00 80 00       	push   $0x800000
f0113266:	ff 75 d4             	pushl  -0x2c(%ebp)
f0113269:	e8 60 56 ff ff       	call   f01088ce <copy_paste_chunk>
f011326e:	83 c4 10             	add    $0x10,%esp
f0113271:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)

		numOfFreeFramesAfter = sys_calculate_free_frames();
f0113277:	e8 21 99 ff ff       	call   f010cb9d <sys_calculate_free_frames>
f011327c:	89 45 84             	mov    %eax,-0x7c(%ebp)

		if (ret != 0 || (numOfFreeFramesBefore - numOfFreeFramesAfter) != 3)
f011327f:	83 bd 78 ff ff ff 00 	cmpl   $0x0,-0x88(%ebp)
f0113286:	75 0b                	jne    f0113293 <test_copy_paste_chunk+0xdc2>
f0113288:	8b 45 8c             	mov    -0x74(%ebp),%eax
f011328b:	2b 45 84             	sub    -0x7c(%ebp),%eax
f011328e:	83 f8 03             	cmp    $0x3,%eax
f0113291:	74 2e                	je     f01132c1 <test_copy_paste_chunk+0xdf0>
		{
			warn("[EVAL] copy_paste_chunk: Failed (# allocated frames is not correct) ret=%d diff=%d\n", ret, numOfFreeFramesBefore - numOfFreeFramesAfter);
f0113293:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0113296:	2b 45 84             	sub    -0x7c(%ebp),%eax
f0113299:	83 ec 0c             	sub    $0xc,%esp
f011329c:	50                   	push   %eax
f011329d:	ff b5 78 ff ff ff    	pushl  -0x88(%ebp)
f01132a3:	68 98 98 13 f0       	push   $0xf0139898
f01132a8:	68 22 03 00 00       	push   $0x322
f01132ad:	68 5e 8c 13 f0       	push   $0xf0138c5e
f01132b2:	e8 5c d1 fe ff       	call   f0100413 <_warn>
f01132b7:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f01132ba:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		}
		if (correct) eval += 5 ;
f01132c1:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f01132c5:	74 04                	je     f01132cb <test_copy_paste_chunk+0xdfa>
f01132c7:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f01132cb:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

		int chkcnt = 1 ;
f01132d2:	c7 45 dc 01 00 00 00 	movl   $0x1,-0x24(%ebp)
		if (CCP(proc_directory, 0x800000, 0x900000, 3*PAGE_SIZE, 1, 0x007, 0x007, 0x007, 0x007, CHK_COPY_PASTE) != 1)
f01132d9:	83 ec 08             	sub    $0x8,%esp
f01132dc:	6a 01                	push   $0x1
f01132de:	6a 07                	push   $0x7
f01132e0:	6a 07                	push   $0x7
f01132e2:	6a 07                	push   $0x7
f01132e4:	6a 07                	push   $0x7
f01132e6:	6a 01                	push   $0x1
f01132e8:	68 00 30 00 00       	push   $0x3000
f01132ed:	68 00 00 90 00       	push   $0x900000
f01132f2:	68 00 00 80 00       	push   $0x800000
f01132f7:	ff 75 d4             	pushl  -0x2c(%ebp)
f01132fa:	e8 ce 2d 00 00       	call   f01160cd <CCP>
f01132ff:	83 c4 30             	add    $0x30,%esp
f0113302:	83 f8 01             	cmp    $0x1,%eax
f0113305:	74 28                	je     f011332f <test_copy_paste_chunk+0xe5e>
		{
			warn("[EVAL] copy_paste_chunk: Failed (problem in permissions and/or references\n");
f0113307:	83 ec 04             	sub    $0x4,%esp
f011330a:	68 38 99 13 f0       	push   $0xf0139938
f011330f:	68 2b 03 00 00       	push   $0x32b
f0113314:	68 5e 8c 13 f0       	push   $0xf0138c5e
f0113319:	e8 f5 d0 fe ff       	call   f0100413 <_warn>
f011331e:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0113321:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
			chkcnt = 0 ;
f0113328:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
		}
		if (correct) eval += 5 ;
f011332f:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0113333:	74 04                	je     f0113339 <test_copy_paste_chunk+0xe68>
f0113335:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0113339:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

		if (chkcnt)
f0113340:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f0113344:	0f 84 9e 00 00 00    	je     f01133e8 <test_copy_paste_chunk+0xf17>
		{
			ch1 = (char*)0x800000; ch2 = (char*)0x900000;
f011334a:	c7 45 bc 00 00 80 00 	movl   $0x800000,-0x44(%ebp)
f0113351:	c7 45 b8 00 00 90 00 	movl   $0x900000,-0x48(%ebp)
			ch3 = (char*)0x8017FF; ch4 = (char*)0x9017FF;
f0113358:	c7 45 b4 ff 17 80 00 	movl   $0x8017ff,-0x4c(%ebp)
f011335f:	c7 45 b0 ff 17 90 00 	movl   $0x9017ff,-0x50(%ebp)
			ch5 = (char*)0x802FFF; ch6 = (char*)0x902FFF;
f0113366:	c7 45 ac ff 2f 80 00 	movl   $0x802fff,-0x54(%ebp)
f011336d:	c7 45 a8 ff 2f 90 00 	movl   $0x902fff,-0x58(%ebp)

			*ch3 = 'y';	//wum 0x8017FF y
f0113374:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0113377:	c6 00 79             	movb   $0x79,(%eax)
			*ch6 = 'z';	//wum 0x902FFF z
f011337a:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011337d:	c6 00 7a             	movb   $0x7a,(%eax)

			if (*ch1 != 'a' || *ch2 != 'a' || *ch3 != 'y' || *ch4 != 'b' || *ch5 != 'c' || *ch6 != 'z')
f0113380:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0113383:	8a 00                	mov    (%eax),%al
f0113385:	3c 61                	cmp    $0x61,%al
f0113387:	75 2d                	jne    f01133b6 <test_copy_paste_chunk+0xee5>
f0113389:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011338c:	8a 00                	mov    (%eax),%al
f011338e:	3c 61                	cmp    $0x61,%al
f0113390:	75 24                	jne    f01133b6 <test_copy_paste_chunk+0xee5>
f0113392:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0113395:	8a 00                	mov    (%eax),%al
f0113397:	3c 79                	cmp    $0x79,%al
f0113399:	75 1b                	jne    f01133b6 <test_copy_paste_chunk+0xee5>
f011339b:	8b 45 b0             	mov    -0x50(%ebp),%eax
f011339e:	8a 00                	mov    (%eax),%al
f01133a0:	3c 62                	cmp    $0x62,%al
f01133a2:	75 12                	jne    f01133b6 <test_copy_paste_chunk+0xee5>
f01133a4:	8b 45 ac             	mov    -0x54(%ebp),%eax
f01133a7:	8a 00                	mov    (%eax),%al
f01133a9:	3c 63                	cmp    $0x63,%al
f01133ab:	75 09                	jne    f01133b6 <test_copy_paste_chunk+0xee5>
f01133ad:	8b 45 a8             	mov    -0x58(%ebp),%eax
f01133b0:	8a 00                	mov    (%eax),%al
f01133b2:	3c 7a                	cmp    $0x7a,%al
f01133b4:	74 21                	je     f01133d7 <test_copy_paste_chunk+0xf06>
			{
				warn("[EVAL] copy_paste_chunk: Failed (content is not correct)\n");
f01133b6:	83 ec 04             	sub    $0x4,%esp
f01133b9:	68 ec 97 13 f0       	push   $0xf01397ec
f01133be:	68 3d 03 00 00       	push   $0x33d
f01133c3:	68 5e 8c 13 f0       	push   $0xf0138c5e
f01133c8:	e8 46 d0 fe ff       	call   f0100413 <_warn>
f01133cd:	83 c4 10             	add    $0x10,%esp
				correct = 0;
f01133d0:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
			}
			if (correct) eval += 10 ;
f01133d7:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f01133db:	74 04                	je     f01133e1 <test_copy_paste_chunk+0xf10>
f01133dd:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
			correct = 1 ;
f01133e1:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
		}
		//Test4
		numOfFreeFramesBefore = sys_calculate_free_frames();
f01133e8:	e8 b0 97 ff ff       	call   f010cb9d <sys_calculate_free_frames>
f01133ed:	89 45 8c             	mov    %eax,-0x74(%ebp)
		SB(proc_directory, 0x901000, 2 , 0) ;
f01133f0:	6a 00                	push   $0x0
f01133f2:	6a 02                	push   $0x2
f01133f4:	68 00 10 90 00       	push   $0x901000
f01133f9:	ff 75 d4             	pushl  -0x2c(%ebp)
f01133fc:	e8 59 2b 00 00       	call   f0115f5a <SB>
f0113401:	83 c4 10             	add    $0x10,%esp
		SB(proc_directory, 0x902000, 2 , 0) ;
f0113404:	6a 00                	push   $0x0
f0113406:	6a 02                	push   $0x2
f0113408:	68 00 20 90 00       	push   $0x902000
f011340d:	ff 75 d4             	pushl  -0x2c(%ebp)
f0113410:	e8 45 2b 00 00       	call   f0115f5a <SB>
f0113415:	83 c4 10             	add    $0x10,%esp

		ret = copy_paste_chunk(proc_directory, 0x901000, 0xBFF000, 8*kilo);
f0113418:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f011341b:	c1 e0 03             	shl    $0x3,%eax
f011341e:	50                   	push   %eax
f011341f:	68 00 f0 bf 00       	push   $0xbff000
f0113424:	68 00 10 90 00       	push   $0x901000
f0113429:	ff 75 d4             	pushl  -0x2c(%ebp)
f011342c:	e8 9d 54 ff ff       	call   f01088ce <copy_paste_chunk>
f0113431:	83 c4 10             	add    $0x10,%esp
f0113434:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)

		numOfFreeFramesAfter = sys_calculate_free_frames();
f011343a:	e8 5e 97 ff ff       	call   f010cb9d <sys_calculate_free_frames>
f011343f:	89 45 84             	mov    %eax,-0x7c(%ebp)
		if (ret != 0 || (numOfFreeFramesBefore - numOfFreeFramesAfter) != 3)
f0113442:	83 bd 78 ff ff ff 00 	cmpl   $0x0,-0x88(%ebp)
f0113449:	75 0b                	jne    f0113456 <test_copy_paste_chunk+0xf85>
f011344b:	8b 45 8c             	mov    -0x74(%ebp),%eax
f011344e:	2b 45 84             	sub    -0x7c(%ebp),%eax
f0113451:	83 f8 03             	cmp    $0x3,%eax
f0113454:	74 2e                	je     f0113484 <test_copy_paste_chunk+0xfb3>
		{
			warn("[EVAL] copy_paste_chunk: Failed (# allocated frames is not correct) ret=%d diff=%d\n", ret, numOfFreeFramesBefore - numOfFreeFramesAfter);
f0113456:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0113459:	2b 45 84             	sub    -0x7c(%ebp),%eax
f011345c:	83 ec 0c             	sub    $0xc,%esp
f011345f:	50                   	push   %eax
f0113460:	ff b5 78 ff ff ff    	pushl  -0x88(%ebp)
f0113466:	68 98 98 13 f0       	push   $0xf0139898
f011346b:	68 4d 03 00 00       	push   $0x34d
f0113470:	68 5e 8c 13 f0       	push   $0xf0138c5e
f0113475:	e8 99 cf fe ff       	call   f0100413 <_warn>
f011347a:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f011347d:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		}
		if (correct) eval += 5 ;
f0113484:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0113488:	74 04                	je     f011348e <test_copy_paste_chunk+0xfbd>
f011348a:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f011348e:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

		chkcnt = 1 ;
f0113495:	c7 45 dc 01 00 00 00 	movl   $0x1,-0x24(%ebp)
		if (CCP(proc_directory, 0x901000, 0xBFF000, 2*PAGE_SIZE, 1, 0x003, 0x007, 0x003, 0x007, CHK_COPY_PASTE) != 1)
f011349c:	83 ec 08             	sub    $0x8,%esp
f011349f:	6a 01                	push   $0x1
f01134a1:	6a 07                	push   $0x7
f01134a3:	6a 03                	push   $0x3
f01134a5:	6a 07                	push   $0x7
f01134a7:	6a 03                	push   $0x3
f01134a9:	6a 01                	push   $0x1
f01134ab:	68 00 20 00 00       	push   $0x2000
f01134b0:	68 00 f0 bf 00       	push   $0xbff000
f01134b5:	68 00 10 90 00       	push   $0x901000
f01134ba:	ff 75 d4             	pushl  -0x2c(%ebp)
f01134bd:	e8 0b 2c 00 00       	call   f01160cd <CCP>
f01134c2:	83 c4 30             	add    $0x30,%esp
f01134c5:	83 f8 01             	cmp    $0x1,%eax
f01134c8:	74 28                	je     f01134f2 <test_copy_paste_chunk+0x1021>
		{
			warn("[EVAL] copy_paste_chunk: Failed (problem in permissions and/or references\n");
f01134ca:	83 ec 04             	sub    $0x4,%esp
f01134cd:	68 38 99 13 f0       	push   $0xf0139938
f01134d2:	68 56 03 00 00       	push   $0x356
f01134d7:	68 5e 8c 13 f0       	push   $0xf0138c5e
f01134dc:	e8 32 cf fe ff       	call   f0100413 <_warn>
f01134e1:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f01134e4:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
			chkcnt = 0 ;
f01134eb:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
		}
		if (correct) eval += 10 ;
f01134f2:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f01134f6:	74 04                	je     f01134fc <test_copy_paste_chunk+0x102b>
f01134f8:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f01134fc:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

		if (chkcnt)
f0113503:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f0113507:	74 72                	je     f011357b <test_copy_paste_chunk+0x10aa>
		{
			ch1 = (char*)0x9017FF; ch2 = (char*)0xBFF7FF; ch3 = (char*)0x902FFF;ch4 = (char*)0xC00FFF;
f0113509:	c7 45 bc ff 17 90 00 	movl   $0x9017ff,-0x44(%ebp)
f0113510:	c7 45 b8 ff f7 bf 00 	movl   $0xbff7ff,-0x48(%ebp)
f0113517:	c7 45 b4 ff 2f 90 00 	movl   $0x902fff,-0x4c(%ebp)
f011351e:	c7 45 b0 ff 0f c0 00 	movl   $0xc00fff,-0x50(%ebp)
			if (*ch1 != 'b' || *ch2 != 'b' || *ch3 != 'z' || *ch4 != 'z')
f0113525:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0113528:	8a 00                	mov    (%eax),%al
f011352a:	3c 62                	cmp    $0x62,%al
f011352c:	75 1b                	jne    f0113549 <test_copy_paste_chunk+0x1078>
f011352e:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0113531:	8a 00                	mov    (%eax),%al
f0113533:	3c 62                	cmp    $0x62,%al
f0113535:	75 12                	jne    f0113549 <test_copy_paste_chunk+0x1078>
f0113537:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f011353a:	8a 00                	mov    (%eax),%al
f011353c:	3c 7a                	cmp    $0x7a,%al
f011353e:	75 09                	jne    f0113549 <test_copy_paste_chunk+0x1078>
f0113540:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0113543:	8a 00                	mov    (%eax),%al
f0113545:	3c 7a                	cmp    $0x7a,%al
f0113547:	74 21                	je     f011356a <test_copy_paste_chunk+0x1099>
			{
				warn("[EVAL] copy_paste_chunk: Failed (content is not correct)\n");
f0113549:	83 ec 04             	sub    $0x4,%esp
f011354c:	68 ec 97 13 f0       	push   $0xf01397ec
f0113551:	68 62 03 00 00       	push   $0x362
f0113556:	68 5e 8c 13 f0       	push   $0xf0138c5e
f011355b:	e8 b3 ce fe ff       	call   f0100413 <_warn>
f0113560:	83 c4 10             	add    $0x10,%esp
				correct = 0;
f0113563:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
			}
			if (correct) eval += 5 ;
f011356a:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f011356e:	74 04                	je     f0113574 <test_copy_paste_chunk+0x10a3>
f0113570:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
			correct = 1 ;
f0113574:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
		}
	}
	cprintf("\nCASE III: END\n") ;
f011357b:	83 ec 0c             	sub    $0xc,%esp
f011357e:	68 e6 99 13 f0       	push   $0xf01399e6
f0113583:	e8 86 d7 fe ff       	call   f0100d0e <cprintf>
f0113588:	83 c4 10             	add    $0x10,%esp

	cprintf("[EVAL] copy_paste_chunk: FINISHED. Evaluation = %d\n", eval);
f011358b:	83 ec 08             	sub    $0x8,%esp
f011358e:	ff 75 e4             	pushl  -0x1c(%ebp)
f0113591:	68 f8 99 13 f0       	push   $0xf01399f8
f0113596:	e8 73 d7 fe ff       	call   f0100d0e <cprintf>
f011359b:	83 c4 10             	add    $0x10,%esp
	if(eval == 100)
f011359e:	83 7d e4 64          	cmpl   $0x64,-0x1c(%ebp)
f01135a2:	75 10                	jne    f01135b4 <test_copy_paste_chunk+0x10e3>
		cprintf("Congratulations!! test copy_paste_chunk completed successfully.\n");
f01135a4:	83 ec 0c             	sub    $0xc,%esp
f01135a7:	68 2c 9a 13 f0       	push   $0xf0139a2c
f01135ac:	e8 5d d7 fe ff       	call   f0100d0e <cprintf>
f01135b1:	83 c4 10             	add    $0x10,%esp

	//return back to the kernel directory
	lcr3(phys_page_directory) ;
f01135b4:	a1 6c 26 78 f0       	mov    0xf078266c,%eax
f01135b9:	89 45 d0             	mov    %eax,-0x30(%ebp)
f01135bc:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01135bf:	0f 22 d8             	mov    %eax,%cr3

	return 0;
f01135c2:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01135c7:	8d 65 f4             	lea    -0xc(%ebp),%esp
f01135ca:	5b                   	pop    %ebx
f01135cb:	5e                   	pop    %esi
f01135cc:	5f                   	pop    %edi
f01135cd:	5d                   	pop    %ebp
f01135ce:	c3                   	ret    

f01135cf <test_share_chunk>:

//===============================
// 3) TEST SHARE CHUNK:
//===============================
int test_share_chunk()
{
f01135cf:	55                   	push   %ebp
f01135d0:	89 e5                	mov    %esp,%ebp
f01135d2:	57                   	push   %edi
f01135d3:	56                   	push   %esi
f01135d4:	53                   	push   %ebx
f01135d5:	81 ec bc 00 00 00    	sub    $0xbc,%esp
	//Create a Temp. User Process
	char prog_name[50] = "fos_helloWorld";
f01135db:	8d 85 4e ff ff ff    	lea    -0xb2(%ebp),%eax
f01135e1:	bb f8 96 13 f0       	mov    $0xf01396f8,%ebx
f01135e6:	ba 0f 00 00 00       	mov    $0xf,%edx
f01135eb:	89 c7                	mov    %eax,%edi
f01135ed:	89 de                	mov    %ebx,%esi
f01135ef:	89 d1                	mov    %edx,%ecx
f01135f1:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f01135f3:	8d 95 5d ff ff ff    	lea    -0xa3(%ebp),%edx
f01135f9:	b9 23 00 00 00       	mov    $0x23,%ecx
f01135fe:	b0 00                	mov    $0x0,%al
f0113600:	89 d7                	mov    %edx,%edi
f0113602:	f3 aa                	rep stos %al,%es:(%edi)
	struct Env* env = env_create(prog_name, 20, 10, 0);
f0113604:	6a 00                	push   $0x0
f0113606:	6a 0a                	push   $0xa
f0113608:	6a 14                	push   $0x14
f011360a:	8d 85 4e ff ff ff    	lea    -0xb2(%ebp),%eax
f0113610:	50                   	push   %eax
f0113611:	e8 4d 58 ff ff       	call   f0108e63 <env_create>
f0113616:	83 c4 10             	add    $0x10,%esp
f0113619:	89 45 d0             	mov    %eax,-0x30(%ebp)
	uint32 *proc_directory = env->env_page_directory ;
f011361c:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011361f:	8b 40 5c             	mov    0x5c(%eax),%eax
f0113622:	89 45 cc             	mov    %eax,-0x34(%ebp)
	lcr3(env->env_cr3) ;
f0113625:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0113628:	8b 40 60             	mov    0x60(%eax),%eax
f011362b:	89 45 80             	mov    %eax,-0x80(%ebp)
f011362e:	8b 45 80             	mov    -0x80(%ebp),%eax
f0113631:	0f 22 d8             	mov    %eax,%cr3
	//===================================================

	ClearUserSpace(proc_directory);
f0113634:	83 ec 0c             	sub    $0xc,%esp
f0113637:	ff 75 cc             	pushl  -0x34(%ebp)
f011363a:	e8 5a 2a 00 00       	call   f0116099 <ClearUserSpace>
f011363f:	83 c4 10             	add    $0x10,%esp

	char *ptr1, *ptr2, *ptr3, *ptr4, *ptr5, *ptr6, *ptr7, *ptr8;
	char tptr[10] ;
	int kilo = 1024 ;
f0113642:	c7 45 c4 00 04 00 00 	movl   $0x400,-0x3c(%ebp)
	int mega = 1024*1024 ;
f0113649:	c7 45 c0 00 00 10 00 	movl   $0x100000,-0x40(%ebp)
	uint32 eval = 0;
f0113650:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
	uint8 correct =1 ;
f0113657:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	extern char end_of_kernel[];

	/*======================================*/
	/*PART I: Destination page(s) exist 20% */
	/*======================================*/
	cprintf("\nCASE I: Destination page(s) exist [20%]\n") ;
f011365b:	83 ec 0c             	sub    $0xc,%esp
f011365e:	68 a4 a2 13 f0       	push   $0xf013a2a4
f0113663:	e8 a6 d6 fe ff       	call   f0100d0e <cprintf>
f0113668:	83 c4 10             	add    $0x10,%esp
	{
		ptr1 = (char*)0xF0100000;
f011366b:	c7 45 bc 00 00 10 f0 	movl   $0xf0100000,-0x44(%ebp)
		ptr2 = (char*)0xF1004000;
f0113672:	c7 45 b8 00 40 00 f1 	movl   $0xf1004000,-0x48(%ebp)
		tptr[1] = *ptr1 ;
f0113679:	8b 45 bc             	mov    -0x44(%ebp),%eax
f011367c:	8a 00                	mov    (%eax),%al
f011367e:	88 85 45 ff ff ff    	mov    %al,-0xbb(%ebp)
		tptr[2] = *ptr2 ;
f0113684:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0113687:	8a 00                	mov    (%eax),%al
f0113689:	88 85 46 ff ff ff    	mov    %al,-0xba(%ebp)

		numOfFreeFramesBefore = sys_calculate_free_frames();
f011368f:	e8 09 95 ff ff       	call   f010cb9d <sys_calculate_free_frames>
f0113694:	89 45 b4             	mov    %eax,-0x4c(%ebp)

		int ret = share_chunk(proc_directory, 0xF0100000,0xF0104000, 6*kilo, PERM_WRITEABLE) ;
f0113697:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f011369a:	89 d0                	mov    %edx,%eax
f011369c:	01 c0                	add    %eax,%eax
f011369e:	01 d0                	add    %edx,%eax
f01136a0:	01 c0                	add    %eax,%eax
f01136a2:	83 ec 0c             	sub    $0xc,%esp
f01136a5:	6a 02                	push   $0x2
f01136a7:	50                   	push   %eax
f01136a8:	68 00 40 10 f0       	push   $0xf0104000
f01136ad:	68 00 00 10 f0       	push   $0xf0100000
f01136b2:	ff 75 cc             	pushl  -0x34(%ebp)
f01136b5:	e8 58 53 ff ff       	call   f0108a12 <share_chunk>
f01136ba:	83 c4 20             	add    $0x20,%esp
f01136bd:	89 45 b0             	mov    %eax,-0x50(%ebp)

		numOfFreeFramesAfter = sys_calculate_free_frames();
f01136c0:	e8 d8 94 ff ff       	call   f010cb9d <sys_calculate_free_frames>
f01136c5:	89 45 ac             	mov    %eax,-0x54(%ebp)

		if (ret != -1 || (numOfFreeFramesBefore - numOfFreeFramesAfter) != 0)
f01136c8:	83 7d b0 ff          	cmpl   $0xffffffff,-0x50(%ebp)
f01136cc:	75 08                	jne    f01136d6 <test_share_chunk+0x107>
f01136ce:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01136d1:	3b 45 ac             	cmp    -0x54(%ebp),%eax
f01136d4:	74 28                	je     f01136fe <test_share_chunk+0x12f>
		{
			warn("[EVAL] share_chunk: Failed (dest is exist... operation should be denied) ret=%d diff=%d\n", ret, (numOfFreeFramesBefore - numOfFreeFramesAfter));
f01136d6:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01136d9:	2b 45 ac             	sub    -0x54(%ebp),%eax
f01136dc:	83 ec 0c             	sub    $0xc,%esp
f01136df:	50                   	push   %eax
f01136e0:	ff 75 b0             	pushl  -0x50(%ebp)
f01136e3:	68 d0 a2 13 f0       	push   $0xf013a2d0
f01136e8:	68 9e 03 00 00       	push   $0x39e
f01136ed:	68 5e 8c 13 f0       	push   $0xf0138c5e
f01136f2:	e8 1c cd fe ff       	call   f0100413 <_warn>
f01136f7:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f01136fa:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 10 ;
f01136fe:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0113702:	74 04                	je     f0113708 <test_share_chunk+0x139>
f0113704:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f0113708:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		if (CCP(proc_directory, 0xF0100000, 0xF0104000, 8*kilo, 1, 0x003, 0x007, 0x003, 0x007, ~CHK_SHARE) == 0)
f011370c:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f011370f:	c1 e0 03             	shl    $0x3,%eax
f0113712:	83 ec 08             	sub    $0x8,%esp
f0113715:	68 fd 00 00 00       	push   $0xfd
f011371a:	6a 07                	push   $0x7
f011371c:	6a 03                	push   $0x3
f011371e:	6a 07                	push   $0x7
f0113720:	6a 03                	push   $0x3
f0113722:	6a 01                	push   $0x1
f0113724:	50                   	push   %eax
f0113725:	68 00 40 10 f0       	push   $0xf0104000
f011372a:	68 00 00 10 f0       	push   $0xf0100000
f011372f:	ff 75 cc             	pushl  -0x34(%ebp)
f0113732:	e8 96 29 00 00       	call   f01160cd <CCP>
f0113737:	83 c4 30             	add    $0x30,%esp
f011373a:	85 c0                	test   %eax,%eax
f011373c:	75 1e                	jne    f011375c <test_share_chunk+0x18d>
		{
			warn("[EVAL] share_chunk: Failed (problem in permissions and/or references\n");
f011373e:	83 ec 04             	sub    $0x4,%esp
f0113741:	68 2c a3 13 f0       	push   $0xf013a32c
f0113746:	68 a6 03 00 00       	push   $0x3a6
f011374b:	68 5e 8c 13 f0       	push   $0xf0138c5e
f0113750:	e8 be cc fe ff       	call   f0100413 <_warn>
f0113755:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0113758:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f011375c:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0113760:	74 04                	je     f0113766 <test_share_chunk+0x197>
f0113762:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)

		*ptr1 = 'A' ;
f0113766:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0113769:	c6 00 41             	movb   $0x41,(%eax)
		*ptr2 = 'B' ;
f011376c:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011376f:	c6 00 42             	movb   $0x42,(%eax)

		if ((*ptr1) != 'A' || (*ptr2) != 'B')
f0113772:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0113775:	8a 00                	mov    (%eax),%al
f0113777:	3c 41                	cmp    $0x41,%al
f0113779:	75 09                	jne    f0113784 <test_share_chunk+0x1b5>
f011377b:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011377e:	8a 00                	mov    (%eax),%al
f0113780:	3c 42                	cmp    $0x42,%al
f0113782:	74 1e                	je     f01137a2 <test_share_chunk+0x1d3>
		{
			warn("[EVAL] share_chunk: Failed (content is not correct)\n");
f0113784:	83 ec 04             	sub    $0x4,%esp
f0113787:	68 74 a3 13 f0       	push   $0xf013a374
f011378c:	68 b0 03 00 00       	push   $0x3b0
f0113791:	68 5e 8c 13 f0       	push   $0xf0138c5e
f0113796:	e8 78 cc fe ff       	call   f0100413 <_warn>
f011379b:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f011379e:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f01137a2:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f01137a6:	74 04                	je     f01137ac <test_share_chunk+0x1dd>
f01137a8:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f01137ac:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		*ptr1 = tptr[1] ;
f01137b0:	8a 95 45 ff ff ff    	mov    -0xbb(%ebp),%dl
f01137b6:	8b 45 bc             	mov    -0x44(%ebp),%eax
f01137b9:	88 10                	mov    %dl,(%eax)
		*ptr2 = tptr[2] ;
f01137bb:	8a 95 46 ff ff ff    	mov    -0xba(%ebp),%dl
f01137c1:	8b 45 b8             	mov    -0x48(%ebp),%eax
f01137c4:	88 10                	mov    %dl,(%eax)
	}
	cprintf("\nCASE I: END\n") ;
f01137c6:	83 ec 0c             	sub    $0xc,%esp
f01137c9:	68 a9 a3 13 f0       	push   $0xf013a3a9
f01137ce:	e8 3b d5 fe ff       	call   f0100d0e <cprintf>
f01137d3:	83 c4 10             	add    $0x10,%esp

	/*========================================================*/
	/*PART II: Destination page(s) not exist [Supervisor] 25% */
	/*========================================================*/
	cprintf("\nCASE II: Destination page(s) not exist [Supervisor] [25%]\n") ;
f01137d6:	83 ec 0c             	sub    $0xc,%esp
f01137d9:	68 b8 a3 13 f0       	push   $0xf013a3b8
f01137de:	e8 2b d5 fe ff       	call   f0100d0e <cprintf>
f01137e3:	83 c4 10             	add    $0x10,%esp
	{
		numOfFreeFramesBefore = sys_calculate_free_frames();
f01137e6:	e8 b2 93 ff ff       	call   f010cb9d <sys_calculate_free_frames>
f01137eb:	89 45 b4             	mov    %eax,-0x4c(%ebp)

		int ret = share_chunk(proc_directory, 0xF0000000,0x40000000, 32*mega, PERM_WRITEABLE | PERM_AVAILABLE) ;
f01137ee:	8b 45 c0             	mov    -0x40(%ebp),%eax
f01137f1:	c1 e0 05             	shl    $0x5,%eax
f01137f4:	83 ec 0c             	sub    $0xc,%esp
f01137f7:	68 02 0e 00 00       	push   $0xe02
f01137fc:	50                   	push   %eax
f01137fd:	68 00 00 00 40       	push   $0x40000000
f0113802:	68 00 00 00 f0       	push   $0xf0000000
f0113807:	ff 75 cc             	pushl  -0x34(%ebp)
f011380a:	e8 03 52 ff ff       	call   f0108a12 <share_chunk>
f011380f:	83 c4 20             	add    $0x20,%esp
f0113812:	89 45 a8             	mov    %eax,-0x58(%ebp)

		numOfFreeFramesAfter = sys_calculate_free_frames();
f0113815:	e8 83 93 ff ff       	call   f010cb9d <sys_calculate_free_frames>
f011381a:	89 45 ac             	mov    %eax,-0x54(%ebp)

		if (ret != 0 || (numOfFreeFramesBefore - numOfFreeFramesAfter) != (32*mega) / (4*mega))
f011381d:	83 7d a8 00          	cmpl   $0x0,-0x58(%ebp)
f0113821:	75 1f                	jne    f0113842 <test_share_chunk+0x273>
f0113823:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0113826:	2b 45 ac             	sub    -0x54(%ebp),%eax
f0113829:	89 c1                	mov    %eax,%ecx
f011382b:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011382e:	c1 e0 05             	shl    $0x5,%eax
f0113831:	8b 55 c0             	mov    -0x40(%ebp),%edx
f0113834:	8d 1c 95 00 00 00 00 	lea    0x0(,%edx,4),%ebx
f011383b:	99                   	cltd   
f011383c:	f7 fb                	idiv   %ebx
f011383e:	39 c1                	cmp    %eax,%ecx
f0113840:	74 28                	je     f011386a <test_share_chunk+0x29b>
		{
			warn("[EVAL] share_chunk: Failed (# allocated frames is not correct) ret=%d diff=%d\n", ret, numOfFreeFramesBefore - numOfFreeFramesAfter);
f0113842:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0113845:	2b 45 ac             	sub    -0x54(%ebp),%eax
f0113848:	83 ec 0c             	sub    $0xc,%esp
f011384b:	50                   	push   %eax
f011384c:	ff 75 a8             	pushl  -0x58(%ebp)
f011384f:	68 f4 a3 13 f0       	push   $0xf013a3f4
f0113854:	68 c8 03 00 00       	push   $0x3c8
f0113859:	68 5e 8c 13 f0       	push   $0xf0138c5e
f011385e:	e8 b0 cb fe ff       	call   f0100413 <_warn>
f0113863:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0113866:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f011386a:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f011386e:	74 04                	je     f0113874 <test_share_chunk+0x2a5>
f0113870:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0113874:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		int chk_cnt = 1 ;
f0113878:	c7 45 dc 01 00 00 00 	movl   $0x1,-0x24(%ebp)
		if (CCP(proc_directory, 0xF0000000, 0x40000000, 32*mega, -1, 0xE03, 0xE07, 0x003, 0x007, CHK_SHARE) == 0)
f011387f:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0113882:	c1 e0 05             	shl    $0x5,%eax
f0113885:	83 ec 08             	sub    $0x8,%esp
f0113888:	6a 02                	push   $0x2
f011388a:	6a 07                	push   $0x7
f011388c:	6a 03                	push   $0x3
f011388e:	68 07 0e 00 00       	push   $0xe07
f0113893:	68 03 0e 00 00       	push   $0xe03
f0113898:	6a ff                	push   $0xffffffff
f011389a:	50                   	push   %eax
f011389b:	68 00 00 00 40       	push   $0x40000000
f01138a0:	68 00 00 00 f0       	push   $0xf0000000
f01138a5:	ff 75 cc             	pushl  -0x34(%ebp)
f01138a8:	e8 20 28 00 00       	call   f01160cd <CCP>
f01138ad:	83 c4 30             	add    $0x30,%esp
f01138b0:	85 c0                	test   %eax,%eax
f01138b2:	75 25                	jne    f01138d9 <test_share_chunk+0x30a>
		{
			warn("[EVAL] share_chunk: Failed (problem in permissions and/or references\n");
f01138b4:	83 ec 04             	sub    $0x4,%esp
f01138b7:	68 2c a3 13 f0       	push   $0xf013a32c
f01138bc:	68 d1 03 00 00       	push   $0x3d1
f01138c1:	68 5e 8c 13 f0       	push   $0xf0138c5e
f01138c6:	e8 48 cb fe ff       	call   f0100413 <_warn>
f01138cb:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f01138ce:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
			chk_cnt = 0 ;
f01138d2:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
		}

		if (CCP(proc_directory, 0xF0000000, 0x40000000, 12*kilo, 2, 0xE03, 0xE07, 0x003, 0x007, CHK_SHARE) == 0)
f01138d9:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f01138dc:	89 d0                	mov    %edx,%eax
f01138de:	01 c0                	add    %eax,%eax
f01138e0:	01 d0                	add    %edx,%eax
f01138e2:	c1 e0 02             	shl    $0x2,%eax
f01138e5:	83 ec 08             	sub    $0x8,%esp
f01138e8:	6a 02                	push   $0x2
f01138ea:	6a 07                	push   $0x7
f01138ec:	6a 03                	push   $0x3
f01138ee:	68 07 0e 00 00       	push   $0xe07
f01138f3:	68 03 0e 00 00       	push   $0xe03
f01138f8:	6a 02                	push   $0x2
f01138fa:	50                   	push   %eax
f01138fb:	68 00 00 00 40       	push   $0x40000000
f0113900:	68 00 00 00 f0       	push   $0xf0000000
f0113905:	ff 75 cc             	pushl  -0x34(%ebp)
f0113908:	e8 c0 27 00 00       	call   f01160cd <CCP>
f011390d:	83 c4 30             	add    $0x30,%esp
f0113910:	85 c0                	test   %eax,%eax
f0113912:	75 1e                	jne    f0113932 <test_share_chunk+0x363>
		{
			warn("[EVAL] share_chunk: Failed (problem in permissions and/or references\n");
f0113914:	83 ec 04             	sub    $0x4,%esp
f0113917:	68 2c a3 13 f0       	push   $0xf013a32c
f011391c:	68 d8 03 00 00       	push   $0x3d8
f0113921:	68 5e 8c 13 f0       	push   $0xf0138c5e
f0113926:	e8 e8 ca fe ff       	call   f0100413 <_warn>
f011392b:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f011392e:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0113932:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0113936:	74 04                	je     f011393c <test_share_chunk+0x36d>
f0113938:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f011393c:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		extern char end_of_kernel[];
		uint32 endRange = ((uint32)end_of_kernel - KERNEL_BASE);
f0113940:	b8 7c 27 78 f0       	mov    $0xf078277c,%eax
f0113945:	05 00 00 00 10       	add    $0x10000000,%eax
f011394a:	89 45 a4             	mov    %eax,-0x5c(%ebp)
		if (CCP(proc_directory, 0xF0000000+PHYS_IO_MEM, 0x40000000+PHYS_IO_MEM, endRange - PHYS_IO_MEM, 2, 0xE03, 0xE07, 0x003, 0x007, CHK_SHARE) == 0)
f011394d:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0113950:	2d 00 00 0a 00       	sub    $0xa0000,%eax
f0113955:	83 ec 08             	sub    $0x8,%esp
f0113958:	6a 02                	push   $0x2
f011395a:	6a 07                	push   $0x7
f011395c:	6a 03                	push   $0x3
f011395e:	68 07 0e 00 00       	push   $0xe07
f0113963:	68 03 0e 00 00       	push   $0xe03
f0113968:	6a 02                	push   $0x2
f011396a:	50                   	push   %eax
f011396b:	68 00 00 0a 40       	push   $0x400a0000
f0113970:	68 00 00 0a f0       	push   $0xf00a0000
f0113975:	ff 75 cc             	pushl  -0x34(%ebp)
f0113978:	e8 50 27 00 00       	call   f01160cd <CCP>
f011397d:	83 c4 30             	add    $0x30,%esp
f0113980:	85 c0                	test   %eax,%eax
f0113982:	75 1e                	jne    f01139a2 <test_share_chunk+0x3d3>
		{
			warn("[EVAL] share_chunk: Failed (problem in permissions and/or references\n");
f0113984:	83 ec 04             	sub    $0x4,%esp
f0113987:	68 2c a3 13 f0       	push   $0xf013a32c
f011398c:	68 e2 03 00 00       	push   $0x3e2
f0113991:	68 5e 8c 13 f0       	push   $0xf0138c5e
f0113996:	e8 78 ca fe ff       	call   f0100413 <_warn>
f011399b:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f011399e:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f01139a2:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f01139a6:	74 04                	je     f01139ac <test_share_chunk+0x3dd>
f01139a8:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f01139ac:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		if (chk_cnt)
f01139b0:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f01139b4:	0f 84 a4 00 00 00    	je     f0113a5e <test_share_chunk+0x48f>
		{
			ptr1 = (char*)0xF00007FF; *ptr1 = 'A' ;
f01139ba:	c7 45 bc ff 07 00 f0 	movl   $0xf00007ff,-0x44(%ebp)
f01139c1:	8b 45 bc             	mov    -0x44(%ebp),%eax
f01139c4:	c6 00 41             	movb   $0x41,(%eax)
			ptr2 = (char*)0x400007FF;
f01139c7:	c7 45 b8 ff 07 00 40 	movl   $0x400007ff,-0x48(%ebp)

			if ((*ptr1) != 'A' || (*ptr2) != 'A')
f01139ce:	8b 45 bc             	mov    -0x44(%ebp),%eax
f01139d1:	8a 00                	mov    (%eax),%al
f01139d3:	3c 41                	cmp    $0x41,%al
f01139d5:	75 09                	jne    f01139e0 <test_share_chunk+0x411>
f01139d7:	8b 45 b8             	mov    -0x48(%ebp),%eax
f01139da:	8a 00                	mov    (%eax),%al
f01139dc:	3c 41                	cmp    $0x41,%al
f01139de:	74 1e                	je     f01139fe <test_share_chunk+0x42f>
			{
				warn("[EVAL] share_chunk: Failed (content is not correct)\n");
f01139e0:	83 ec 04             	sub    $0x4,%esp
f01139e3:	68 74 a3 13 f0       	push   $0xf013a374
f01139e8:	68 ef 03 00 00       	push   $0x3ef
f01139ed:	68 5e 8c 13 f0       	push   $0xf0138c5e
f01139f2:	e8 1c ca fe ff       	call   f0100413 <_warn>
f01139f7:	83 c4 10             	add    $0x10,%esp
				correct = 0;
f01139fa:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
			}
			if (correct) eval += 5 ;
f01139fe:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0113a02:	74 04                	je     f0113a08 <test_share_chunk+0x439>
f0113a04:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
			correct = 1 ;
f0113a08:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

			ptr1 = (char*)0x41000FFF; *ptr1 = 'C' ;
f0113a0c:	c7 45 bc ff 0f 00 41 	movl   $0x41000fff,-0x44(%ebp)
f0113a13:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0113a16:	c6 00 43             	movb   $0x43,(%eax)
			ptr2 = (char*)0xF1000FFF;
f0113a19:	c7 45 b8 ff 0f 00 f1 	movl   $0xf1000fff,-0x48(%ebp)

			if ((*ptr1) != 'C' || (*ptr2) != 'C')
f0113a20:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0113a23:	8a 00                	mov    (%eax),%al
f0113a25:	3c 43                	cmp    $0x43,%al
f0113a27:	75 09                	jne    f0113a32 <test_share_chunk+0x463>
f0113a29:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0113a2c:	8a 00                	mov    (%eax),%al
f0113a2e:	3c 43                	cmp    $0x43,%al
f0113a30:	74 1e                	je     f0113a50 <test_share_chunk+0x481>
			{
				warn("[EVAL] share_chunk: Failed (content is not correct)\n");
f0113a32:	83 ec 04             	sub    $0x4,%esp
f0113a35:	68 74 a3 13 f0       	push   $0xf013a374
f0113a3a:	68 fa 03 00 00       	push   $0x3fa
f0113a3f:	68 5e 8c 13 f0       	push   $0xf0138c5e
f0113a44:	e8 ca c9 fe ff       	call   f0100413 <_warn>
f0113a49:	83 c4 10             	add    $0x10,%esp
				correct = 0;
f0113a4c:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
			}
			if (correct) eval += 5 ;
f0113a50:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0113a54:	74 04                	je     f0113a5a <test_share_chunk+0x48b>
f0113a56:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
			correct = 1 ;
f0113a5a:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
		}
	}
	cprintf("\nCASE II: END\n") ;
f0113a5e:	83 ec 0c             	sub    $0xc,%esp
f0113a61:	68 83 99 13 f0       	push   $0xf0139983
f0113a66:	e8 a3 d2 fe ff       	call   f0100d0e <cprintf>
f0113a6b:	83 c4 10             	add    $0x10,%esp

	/*========================================================*/
	/*PART III: Destination page(s) not exist [User r/w] 25%  */
	/*========================================================*/
	cprintf("\nCASE III: Destination page(s) not exist [User r/w] [25%]\n") ;
f0113a6e:	83 ec 0c             	sub    $0xc,%esp
f0113a71:	68 44 a4 13 f0       	push   $0xf013a444
f0113a76:	e8 93 d2 fe ff       	call   f0100d0e <cprintf>
f0113a7b:	83 c4 10             	add    $0x10,%esp
	{
		numOfFreeFramesBefore = sys_calculate_free_frames();
f0113a7e:	e8 1a 91 ff ff       	call   f010cb9d <sys_calculate_free_frames>
f0113a83:	89 45 b4             	mov    %eax,-0x4c(%ebp)

		int ret = share_chunk(proc_directory, 0x40000000,0x0, 648*kilo, PERM_WRITEABLE|PERM_USER) ;
f0113a86:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0113a89:	89 d0                	mov    %edx,%eax
f0113a8b:	c1 e0 03             	shl    $0x3,%eax
f0113a8e:	01 d0                	add    %edx,%eax
f0113a90:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f0113a97:	01 d0                	add    %edx,%eax
f0113a99:	c1 e0 03             	shl    $0x3,%eax
f0113a9c:	83 ec 0c             	sub    $0xc,%esp
f0113a9f:	6a 06                	push   $0x6
f0113aa1:	50                   	push   %eax
f0113aa2:	6a 00                	push   $0x0
f0113aa4:	68 00 00 00 40       	push   $0x40000000
f0113aa9:	ff 75 cc             	pushl  -0x34(%ebp)
f0113aac:	e8 61 4f ff ff       	call   f0108a12 <share_chunk>
f0113ab1:	83 c4 20             	add    $0x20,%esp
f0113ab4:	89 45 a0             	mov    %eax,-0x60(%ebp)

		numOfFreeFramesAfter = sys_calculate_free_frames();
f0113ab7:	e8 e1 90 ff ff       	call   f010cb9d <sys_calculate_free_frames>
f0113abc:	89 45 ac             	mov    %eax,-0x54(%ebp)

		if (ret != 0 || (numOfFreeFramesBefore - numOfFreeFramesAfter) != 1)
f0113abf:	83 7d a0 00          	cmpl   $0x0,-0x60(%ebp)
f0113ac3:	75 0b                	jne    f0113ad0 <test_share_chunk+0x501>
f0113ac5:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0113ac8:	2b 45 ac             	sub    -0x54(%ebp),%eax
f0113acb:	83 f8 01             	cmp    $0x1,%eax
f0113ace:	74 28                	je     f0113af8 <test_share_chunk+0x529>
		{
			warn("[EVAL] share_chunk: Failed (# allocated frames is not correct) ret=%d diff=%d\n", ret, numOfFreeFramesBefore - numOfFreeFramesAfter);
f0113ad0:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0113ad3:	2b 45 ac             	sub    -0x54(%ebp),%eax
f0113ad6:	83 ec 0c             	sub    $0xc,%esp
f0113ad9:	50                   	push   %eax
f0113ada:	ff 75 a0             	pushl  -0x60(%ebp)
f0113add:	68 f4 a3 13 f0       	push   $0xf013a3f4
f0113ae2:	68 10 04 00 00       	push   $0x410
f0113ae7:	68 5e 8c 13 f0       	push   $0xf0138c5e
f0113aec:	e8 22 c9 fe ff       	call   f0100413 <_warn>
f0113af1:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0113af4:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0113af8:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0113afc:	74 04                	je     f0113b02 <test_share_chunk+0x533>
f0113afe:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0113b02:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		int chk_cnt = 1 ;
f0113b06:	c7 45 d8 01 00 00 00 	movl   $0x1,-0x28(%ebp)
		if (CCP(proc_directory, 0x40000000, 0x0, PHYS_IO_MEM + 4*kilo, -1, 0x007, 0x007, 0x003, 0x007, CHK_SHARE) == 0)
f0113b0d:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0113b10:	05 00 80 02 00       	add    $0x28000,%eax
f0113b15:	c1 e0 02             	shl    $0x2,%eax
f0113b18:	83 ec 08             	sub    $0x8,%esp
f0113b1b:	6a 02                	push   $0x2
f0113b1d:	6a 07                	push   $0x7
f0113b1f:	6a 03                	push   $0x3
f0113b21:	6a 07                	push   $0x7
f0113b23:	6a 07                	push   $0x7
f0113b25:	6a ff                	push   $0xffffffff
f0113b27:	50                   	push   %eax
f0113b28:	6a 00                	push   $0x0
f0113b2a:	68 00 00 00 40       	push   $0x40000000
f0113b2f:	ff 75 cc             	pushl  -0x34(%ebp)
f0113b32:	e8 96 25 00 00       	call   f01160cd <CCP>
f0113b37:	83 c4 30             	add    $0x30,%esp
f0113b3a:	85 c0                	test   %eax,%eax
f0113b3c:	75 25                	jne    f0113b63 <test_share_chunk+0x594>
		{
			warn("[EVAL] share_chunk: Failed (problem in permissions and/or references\n");
f0113b3e:	83 ec 04             	sub    $0x4,%esp
f0113b41:	68 2c a3 13 f0       	push   $0xf013a32c
f0113b46:	68 19 04 00 00       	push   $0x419
f0113b4b:	68 5e 8c 13 f0       	push   $0xf0138c5e
f0113b50:	e8 be c8 fe ff       	call   f0100413 <_warn>
f0113b55:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0113b58:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
			chk_cnt = 0 ;
f0113b5c:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
		}

		if (CCP(proc_directory, 0x40000000, 0x0, 12*kilo, 3, 0x007, 0x007, 0x003, 0x007, CHK_SHARE) == 0)
f0113b63:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0113b66:	89 d0                	mov    %edx,%eax
f0113b68:	01 c0                	add    %eax,%eax
f0113b6a:	01 d0                	add    %edx,%eax
f0113b6c:	c1 e0 02             	shl    $0x2,%eax
f0113b6f:	83 ec 08             	sub    $0x8,%esp
f0113b72:	6a 02                	push   $0x2
f0113b74:	6a 07                	push   $0x7
f0113b76:	6a 03                	push   $0x3
f0113b78:	6a 07                	push   $0x7
f0113b7a:	6a 07                	push   $0x7
f0113b7c:	6a 03                	push   $0x3
f0113b7e:	50                   	push   %eax
f0113b7f:	6a 00                	push   $0x0
f0113b81:	68 00 00 00 40       	push   $0x40000000
f0113b86:	ff 75 cc             	pushl  -0x34(%ebp)
f0113b89:	e8 3f 25 00 00       	call   f01160cd <CCP>
f0113b8e:	83 c4 30             	add    $0x30,%esp
f0113b91:	85 c0                	test   %eax,%eax
f0113b93:	75 1e                	jne    f0113bb3 <test_share_chunk+0x5e4>
		{
			warn("[EVAL] share_chunk: Failed (problem in permissions and/or references\n");
f0113b95:	83 ec 04             	sub    $0x4,%esp
f0113b98:	68 2c a3 13 f0       	push   $0xf013a32c
f0113b9d:	68 20 04 00 00       	push   $0x420
f0113ba2:	68 5e 8c 13 f0       	push   $0xf0138c5e
f0113ba7:	e8 67 c8 fe ff       	call   f0100413 <_warn>
f0113bac:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0113baf:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0113bb3:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0113bb7:	74 04                	je     f0113bbd <test_share_chunk+0x5ee>
f0113bb9:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0113bbd:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		if (CCP(proc_directory, 0x40003000, 0x3000, PHYS_IO_MEM - 12*kilo, 2, 0x007, 0x007, 0x003, 0x007, CHK_SHARE) == 0)
f0113bc1:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0113bc4:	89 d0                	mov    %edx,%eax
f0113bc6:	01 c0                	add    %eax,%eax
f0113bc8:	01 d0                	add    %edx,%eax
f0113bca:	c1 e0 02             	shl    $0x2,%eax
f0113bcd:	f7 d8                	neg    %eax
f0113bcf:	05 00 00 0a 00       	add    $0xa0000,%eax
f0113bd4:	83 ec 08             	sub    $0x8,%esp
f0113bd7:	6a 02                	push   $0x2
f0113bd9:	6a 07                	push   $0x7
f0113bdb:	6a 03                	push   $0x3
f0113bdd:	6a 07                	push   $0x7
f0113bdf:	6a 07                	push   $0x7
f0113be1:	6a 02                	push   $0x2
f0113be3:	50                   	push   %eax
f0113be4:	68 00 30 00 00       	push   $0x3000
f0113be9:	68 00 30 00 40       	push   $0x40003000
f0113bee:	ff 75 cc             	pushl  -0x34(%ebp)
f0113bf1:	e8 d7 24 00 00       	call   f01160cd <CCP>
f0113bf6:	83 c4 30             	add    $0x30,%esp
f0113bf9:	85 c0                	test   %eax,%eax
f0113bfb:	75 1e                	jne    f0113c1b <test_share_chunk+0x64c>
		{
			warn("[EVAL] share_chunk: Failed (problem in permissions and/or references\n");
f0113bfd:	83 ec 04             	sub    $0x4,%esp
f0113c00:	68 2c a3 13 f0       	push   $0xf013a32c
f0113c05:	68 28 04 00 00       	push   $0x428
f0113c0a:	68 5e 8c 13 f0       	push   $0xf0138c5e
f0113c0f:	e8 ff c7 fe ff       	call   f0100413 <_warn>
f0113c14:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0113c17:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0113c1b:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0113c1f:	74 04                	je     f0113c25 <test_share_chunk+0x656>
f0113c21:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0113c25:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		if (CCP(proc_directory, 0x40000000+PHYS_IO_MEM, PHYS_IO_MEM, 4*kilo, 3, 0x007, 0x007, 0x003, 0x007, CHK_SHARE) == 0)
f0113c29:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0113c2c:	c1 e0 02             	shl    $0x2,%eax
f0113c2f:	83 ec 08             	sub    $0x8,%esp
f0113c32:	6a 02                	push   $0x2
f0113c34:	6a 07                	push   $0x7
f0113c36:	6a 03                	push   $0x3
f0113c38:	6a 07                	push   $0x7
f0113c3a:	6a 07                	push   $0x7
f0113c3c:	6a 03                	push   $0x3
f0113c3e:	50                   	push   %eax
f0113c3f:	68 00 00 0a 00       	push   $0xa0000
f0113c44:	68 00 00 0a 40       	push   $0x400a0000
f0113c49:	ff 75 cc             	pushl  -0x34(%ebp)
f0113c4c:	e8 7c 24 00 00       	call   f01160cd <CCP>
f0113c51:	83 c4 30             	add    $0x30,%esp
f0113c54:	85 c0                	test   %eax,%eax
f0113c56:	75 1e                	jne    f0113c76 <test_share_chunk+0x6a7>
		{
			warn("[EVAL] share_chunk: Failed (problem in permissions and/or references\n");
f0113c58:	83 ec 04             	sub    $0x4,%esp
f0113c5b:	68 2c a3 13 f0       	push   $0xf013a32c
f0113c60:	68 30 04 00 00       	push   $0x430
f0113c65:	68 5e 8c 13 f0       	push   $0xf0138c5e
f0113c6a:	e8 a4 c7 fe ff       	call   f0100413 <_warn>
f0113c6f:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0113c72:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0113c76:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0113c7a:	74 04                	je     f0113c80 <test_share_chunk+0x6b1>
f0113c7c:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0113c80:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		if (chk_cnt)
f0113c84:	83 7d d8 00          	cmpl   $0x0,-0x28(%ebp)
f0113c88:	0f 84 92 00 00 00    	je     f0113d20 <test_share_chunk+0x751>
		{
			ptr1 = (char*)0x7FF;
f0113c8e:	c7 45 bc ff 07 00 00 	movl   $0x7ff,-0x44(%ebp)
			ptr2 = (char*)0xF00007FF;
f0113c95:	c7 45 b8 ff 07 00 f0 	movl   $0xf00007ff,-0x48(%ebp)
			ptr3 = (char*)0x400007FF;
f0113c9c:	c7 45 9c ff 07 00 40 	movl   $0x400007ff,-0x64(%ebp)
			ptr4 = (char*)0x9FFFF; *ptr4 = 'D';
f0113ca3:	c7 45 98 ff ff 09 00 	movl   $0x9ffff,-0x68(%ebp)
f0113caa:	8b 45 98             	mov    -0x68(%ebp),%eax
f0113cad:	c6 00 44             	movb   $0x44,(%eax)
			ptr5 = (char*)0xF009FFFF;
f0113cb0:	c7 45 94 ff ff 09 f0 	movl   $0xf009ffff,-0x6c(%ebp)
			ptr6 = (char*)0x4009FFFF;
f0113cb7:	c7 45 90 ff ff 09 40 	movl   $0x4009ffff,-0x70(%ebp)

			if ((*ptr1) != 'A' || (*ptr2) != 'A' || (*ptr3) != 'A' ||
f0113cbe:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0113cc1:	8a 00                	mov    (%eax),%al
f0113cc3:	3c 41                	cmp    $0x41,%al
f0113cc5:	75 2d                	jne    f0113cf4 <test_share_chunk+0x725>
f0113cc7:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0113cca:	8a 00                	mov    (%eax),%al
f0113ccc:	3c 41                	cmp    $0x41,%al
f0113cce:	75 24                	jne    f0113cf4 <test_share_chunk+0x725>
f0113cd0:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0113cd3:	8a 00                	mov    (%eax),%al
f0113cd5:	3c 41                	cmp    $0x41,%al
f0113cd7:	75 1b                	jne    f0113cf4 <test_share_chunk+0x725>
					(*ptr4) != 'D' || (*ptr5) != 'D'|| (*ptr6) != 'D')
f0113cd9:	8b 45 98             	mov    -0x68(%ebp),%eax
f0113cdc:	8a 00                	mov    (%eax),%al
			ptr3 = (char*)0x400007FF;
			ptr4 = (char*)0x9FFFF; *ptr4 = 'D';
			ptr5 = (char*)0xF009FFFF;
			ptr6 = (char*)0x4009FFFF;

			if ((*ptr1) != 'A' || (*ptr2) != 'A' || (*ptr3) != 'A' ||
f0113cde:	3c 44                	cmp    $0x44,%al
f0113ce0:	75 12                	jne    f0113cf4 <test_share_chunk+0x725>
					(*ptr4) != 'D' || (*ptr5) != 'D'|| (*ptr6) != 'D')
f0113ce2:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0113ce5:	8a 00                	mov    (%eax),%al
f0113ce7:	3c 44                	cmp    $0x44,%al
f0113ce9:	75 09                	jne    f0113cf4 <test_share_chunk+0x725>
f0113ceb:	8b 45 90             	mov    -0x70(%ebp),%eax
f0113cee:	8a 00                	mov    (%eax),%al
f0113cf0:	3c 44                	cmp    $0x44,%al
f0113cf2:	74 1e                	je     f0113d12 <test_share_chunk+0x743>
			{
				warn("[EVAL] share_chunk: Failed (content is not correct)\n");
f0113cf4:	83 ec 04             	sub    $0x4,%esp
f0113cf7:	68 74 a3 13 f0       	push   $0xf013a374
f0113cfc:	68 42 04 00 00       	push   $0x442
f0113d01:	68 5e 8c 13 f0       	push   $0xf0138c5e
f0113d06:	e8 08 c7 fe ff       	call   f0100413 <_warn>
f0113d0b:	83 c4 10             	add    $0x10,%esp
				correct = 0;
f0113d0e:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
			}
			if (correct) eval += 5 ;
f0113d12:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0113d16:	74 04                	je     f0113d1c <test_share_chunk+0x74d>
f0113d18:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
			correct = 1 ;
f0113d1c:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
		}
	}
	cprintf("\nCASE III: END\n") ;
f0113d20:	83 ec 0c             	sub    $0xc,%esp
f0113d23:	68 e6 99 13 f0       	push   $0xf01399e6
f0113d28:	e8 e1 cf fe ff       	call   f0100d0e <cprintf>
f0113d2d:	83 c4 10             	add    $0x10,%esp

	/*========================================================*/
	/*PART IV: Destination page(s) not exist [User r] 30%     */
	/*========================================================*/
	cprintf("\nCASE IV: Destination page(s) not exist [User r] [30%]\n") ;
f0113d30:	83 ec 0c             	sub    $0xc,%esp
f0113d33:	68 80 a4 13 f0       	push   $0xf013a480
f0113d38:	e8 d1 cf fe ff       	call   f0100d0e <cprintf>
f0113d3d:	83 c4 10             	add    $0x10,%esp
	{
		numOfFreeFramesBefore = sys_calculate_free_frames();
f0113d40:	e8 58 8e ff ff       	call   f010cb9d <sys_calculate_free_frames>
f0113d45:	89 45 b4             	mov    %eax,-0x4c(%ebp)

		int ret = share_chunk(proc_directory, 0x9FC00,0x3FFC00, 7*kilo, PERM_USER) ;
f0113d48:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0113d4b:	89 d0                	mov    %edx,%eax
f0113d4d:	01 c0                	add    %eax,%eax
f0113d4f:	01 d0                	add    %edx,%eax
f0113d51:	01 c0                	add    %eax,%eax
f0113d53:	01 d0                	add    %edx,%eax
f0113d55:	83 ec 0c             	sub    $0xc,%esp
f0113d58:	6a 04                	push   $0x4
f0113d5a:	50                   	push   %eax
f0113d5b:	68 00 fc 3f 00       	push   $0x3ffc00
f0113d60:	68 00 fc 09 00       	push   $0x9fc00
f0113d65:	ff 75 cc             	pushl  -0x34(%ebp)
f0113d68:	e8 a5 4c ff ff       	call   f0108a12 <share_chunk>
f0113d6d:	83 c4 20             	add    $0x20,%esp
f0113d70:	89 45 8c             	mov    %eax,-0x74(%ebp)

		numOfFreeFramesAfter = sys_calculate_free_frames();
f0113d73:	e8 25 8e ff ff       	call   f010cb9d <sys_calculate_free_frames>
f0113d78:	89 45 ac             	mov    %eax,-0x54(%ebp)

		if (ret != 0 || (numOfFreeFramesBefore - numOfFreeFramesAfter) != 1)
f0113d7b:	83 7d 8c 00          	cmpl   $0x0,-0x74(%ebp)
f0113d7f:	75 0b                	jne    f0113d8c <test_share_chunk+0x7bd>
f0113d81:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0113d84:	2b 45 ac             	sub    -0x54(%ebp),%eax
f0113d87:	83 f8 01             	cmp    $0x1,%eax
f0113d8a:	74 28                	je     f0113db4 <test_share_chunk+0x7e5>
		{
			warn("[EVAL] share_chunk: Failed (# allocated frames is not correct) ret=%d diff=%d\n", ret, numOfFreeFramesBefore - numOfFreeFramesAfter);
f0113d8c:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0113d8f:	2b 45 ac             	sub    -0x54(%ebp),%eax
f0113d92:	83 ec 0c             	sub    $0xc,%esp
f0113d95:	50                   	push   %eax
f0113d96:	ff 75 8c             	pushl  -0x74(%ebp)
f0113d99:	68 f4 a3 13 f0       	push   $0xf013a3f4
f0113d9e:	68 58 04 00 00       	push   $0x458
f0113da3:	68 5e 8c 13 f0       	push   $0xf0138c5e
f0113da8:	e8 66 c6 fe ff       	call   f0100413 <_warn>
f0113dad:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0113db0:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 10 ;
f0113db4:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0113db8:	74 04                	je     f0113dbe <test_share_chunk+0x7ef>
f0113dba:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f0113dbe:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		int chk_cnt = 1 ;
f0113dc2:	c7 45 d4 01 00 00 00 	movl   $0x1,-0x2c(%ebp)
		if (CCP(proc_directory, 0x9F000, 0x3FF000, 12*kilo, -1, 0x005, 0x007, 0x007, 0x007, CHK_SHARE) == 0)
f0113dc9:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0113dcc:	89 d0                	mov    %edx,%eax
f0113dce:	01 c0                	add    %eax,%eax
f0113dd0:	01 d0                	add    %edx,%eax
f0113dd2:	c1 e0 02             	shl    $0x2,%eax
f0113dd5:	83 ec 08             	sub    $0x8,%esp
f0113dd8:	6a 02                	push   $0x2
f0113dda:	6a 07                	push   $0x7
f0113ddc:	6a 07                	push   $0x7
f0113dde:	6a 07                	push   $0x7
f0113de0:	6a 05                	push   $0x5
f0113de2:	6a ff                	push   $0xffffffff
f0113de4:	50                   	push   %eax
f0113de5:	68 00 f0 3f 00       	push   $0x3ff000
f0113dea:	68 00 f0 09 00       	push   $0x9f000
f0113def:	ff 75 cc             	pushl  -0x34(%ebp)
f0113df2:	e8 d6 22 00 00       	call   f01160cd <CCP>
f0113df7:	83 c4 30             	add    $0x30,%esp
f0113dfa:	85 c0                	test   %eax,%eax
f0113dfc:	75 25                	jne    f0113e23 <test_share_chunk+0x854>
		{
			warn("[EVAL] share_chunk: Failed (problem in permissions and/or references\n");
f0113dfe:	83 ec 04             	sub    $0x4,%esp
f0113e01:	68 2c a3 13 f0       	push   $0xf013a32c
f0113e06:	68 61 04 00 00       	push   $0x461
f0113e0b:	68 5e 8c 13 f0       	push   $0xf0138c5e
f0113e10:	e8 fe c5 fe ff       	call   f0100413 <_warn>
f0113e15:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0113e18:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
			chk_cnt = 0 ;
f0113e1c:	c7 45 d4 00 00 00 00 	movl   $0x0,-0x2c(%ebp)
		}
		if (correct) eval += 5 ;
f0113e23:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0113e27:	74 04                	je     f0113e2d <test_share_chunk+0x85e>
f0113e29:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0113e2d:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		if (CCP(proc_directory, 0x9F000, 0x3FF000, 4*kilo, 3, 0x005, 0x007, 0x007, 0x007, CHK_SHARE) == 0)
f0113e31:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0113e34:	c1 e0 02             	shl    $0x2,%eax
f0113e37:	83 ec 08             	sub    $0x8,%esp
f0113e3a:	6a 02                	push   $0x2
f0113e3c:	6a 07                	push   $0x7
f0113e3e:	6a 07                	push   $0x7
f0113e40:	6a 07                	push   $0x7
f0113e42:	6a 05                	push   $0x5
f0113e44:	6a 03                	push   $0x3
f0113e46:	50                   	push   %eax
f0113e47:	68 00 f0 3f 00       	push   $0x3ff000
f0113e4c:	68 00 f0 09 00       	push   $0x9f000
f0113e51:	ff 75 cc             	pushl  -0x34(%ebp)
f0113e54:	e8 74 22 00 00       	call   f01160cd <CCP>
f0113e59:	83 c4 30             	add    $0x30,%esp
f0113e5c:	85 c0                	test   %eax,%eax
f0113e5e:	75 1e                	jne    f0113e7e <test_share_chunk+0x8af>
		{
			warn("[EVAL] share_chunk: Failed (problem in permissions and/or references\n");
f0113e60:	83 ec 04             	sub    $0x4,%esp
f0113e63:	68 2c a3 13 f0       	push   $0xf013a32c
f0113e68:	68 6a 04 00 00       	push   $0x46a
f0113e6d:	68 5e 8c 13 f0       	push   $0xf0138c5e
f0113e72:	e8 9c c5 fe ff       	call   f0100413 <_warn>
f0113e77:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0113e7a:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0113e7e:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0113e82:	74 04                	je     f0113e88 <test_share_chunk+0x8b9>
f0113e84:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0113e88:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		if (CCP(proc_directory, 0xA0000, 0x400000, 8*kilo, 4, 0x005, 0x007, 0x007, 0x007, CHK_SHARE) == 0)
f0113e8c:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0113e8f:	c1 e0 03             	shl    $0x3,%eax
f0113e92:	83 ec 08             	sub    $0x8,%esp
f0113e95:	6a 02                	push   $0x2
f0113e97:	6a 07                	push   $0x7
f0113e99:	6a 07                	push   $0x7
f0113e9b:	6a 07                	push   $0x7
f0113e9d:	6a 05                	push   $0x5
f0113e9f:	6a 04                	push   $0x4
f0113ea1:	50                   	push   %eax
f0113ea2:	68 00 00 40 00       	push   $0x400000
f0113ea7:	68 00 00 0a 00       	push   $0xa0000
f0113eac:	ff 75 cc             	pushl  -0x34(%ebp)
f0113eaf:	e8 19 22 00 00       	call   f01160cd <CCP>
f0113eb4:	83 c4 30             	add    $0x30,%esp
f0113eb7:	85 c0                	test   %eax,%eax
f0113eb9:	75 1e                	jne    f0113ed9 <test_share_chunk+0x90a>
		{
			warn("[EVAL] share_chunk: Failed (problem in permissions and/or references\n");
f0113ebb:	83 ec 04             	sub    $0x4,%esp
f0113ebe:	68 2c a3 13 f0       	push   $0xf013a32c
f0113ec3:	68 72 04 00 00       	push   $0x472
f0113ec8:	68 5e 8c 13 f0       	push   $0xf0138c5e
f0113ecd:	e8 41 c5 fe ff       	call   f0100413 <_warn>
f0113ed2:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0113ed5:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0113ed9:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0113edd:	74 04                	je     f0113ee3 <test_share_chunk+0x914>
f0113edf:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0113ee3:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		if (chk_cnt)
f0113ee7:	83 7d d4 00          	cmpl   $0x0,-0x2c(%ebp)
f0113eeb:	0f 84 b2 00 00 00    	je     f0113fa3 <test_share_chunk+0x9d4>
		{
			ptr1 = (char*)0x0009FFFF;
f0113ef1:	c7 45 bc ff ff 09 00 	movl   $0x9ffff,-0x44(%ebp)
			ptr2 = (char*)0x003FFFFF;
f0113ef8:	c7 45 b8 ff ff 3f 00 	movl   $0x3fffff,-0x48(%ebp)
			ptr3 = (char*)0x4009FFFF;
f0113eff:	c7 45 9c ff ff 09 40 	movl   $0x4009ffff,-0x64(%ebp)
			ptr4 = (char*)0xF009FFFF;
f0113f06:	c7 45 98 ff ff 09 f0 	movl   $0xf009ffff,-0x68(%ebp)

			ptr5 = (char*)0x000A1001;
f0113f0d:	c7 45 94 01 10 0a 00 	movl   $0xa1001,-0x6c(%ebp)
			ptr6 = (char*)0x00401001;
f0113f14:	c7 45 90 01 10 40 00 	movl   $0x401001,-0x70(%ebp)
			ptr7 = (char*)0x400A1001;
f0113f1b:	c7 45 88 01 10 0a 40 	movl   $0x400a1001,-0x78(%ebp)
			ptr8 = (char*)0xF00A1001;
f0113f22:	c7 45 84 01 10 0a f0 	movl   $0xf00a1001,-0x7c(%ebp)

			if ((*ptr1) != 'D' || (*ptr2) != 'D' || (*ptr3) != 'D' || (*ptr4) != 'D' ||
f0113f29:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0113f2c:	8a 00                	mov    (%eax),%al
f0113f2e:	3c 44                	cmp    $0x44,%al
f0113f30:	75 45                	jne    f0113f77 <test_share_chunk+0x9a8>
f0113f32:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0113f35:	8a 00                	mov    (%eax),%al
f0113f37:	3c 44                	cmp    $0x44,%al
f0113f39:	75 3c                	jne    f0113f77 <test_share_chunk+0x9a8>
f0113f3b:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0113f3e:	8a 00                	mov    (%eax),%al
f0113f40:	3c 44                	cmp    $0x44,%al
f0113f42:	75 33                	jne    f0113f77 <test_share_chunk+0x9a8>
f0113f44:	8b 45 98             	mov    -0x68(%ebp),%eax
f0113f47:	8a 00                	mov    (%eax),%al
f0113f49:	3c 44                	cmp    $0x44,%al
f0113f4b:	75 2a                	jne    f0113f77 <test_share_chunk+0x9a8>
					(*ptr5) != (*ptr6) || (*ptr5) != (*ptr7) ||(*ptr5) != (*ptr8))
f0113f4d:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0113f50:	8a 10                	mov    (%eax),%dl
f0113f52:	8b 45 90             	mov    -0x70(%ebp),%eax
f0113f55:	8a 00                	mov    (%eax),%al
			ptr5 = (char*)0x000A1001;
			ptr6 = (char*)0x00401001;
			ptr7 = (char*)0x400A1001;
			ptr8 = (char*)0xF00A1001;

			if ((*ptr1) != 'D' || (*ptr2) != 'D' || (*ptr3) != 'D' || (*ptr4) != 'D' ||
f0113f57:	38 c2                	cmp    %al,%dl
f0113f59:	75 1c                	jne    f0113f77 <test_share_chunk+0x9a8>
					(*ptr5) != (*ptr6) || (*ptr5) != (*ptr7) ||(*ptr5) != (*ptr8))
f0113f5b:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0113f5e:	8a 10                	mov    (%eax),%dl
f0113f60:	8b 45 88             	mov    -0x78(%ebp),%eax
f0113f63:	8a 00                	mov    (%eax),%al
f0113f65:	38 c2                	cmp    %al,%dl
f0113f67:	75 0e                	jne    f0113f77 <test_share_chunk+0x9a8>
f0113f69:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0113f6c:	8a 10                	mov    (%eax),%dl
f0113f6e:	8b 45 84             	mov    -0x7c(%ebp),%eax
f0113f71:	8a 00                	mov    (%eax),%al
f0113f73:	38 c2                	cmp    %al,%dl
f0113f75:	74 1e                	je     f0113f95 <test_share_chunk+0x9c6>
			{
				warn("[EVAL] share_chunk: Failed (content is not correct)\n");
f0113f77:	83 ec 04             	sub    $0x4,%esp
f0113f7a:	68 74 a3 13 f0       	push   $0xf013a374
f0113f7f:	68 87 04 00 00       	push   $0x487
f0113f84:	68 5e 8c 13 f0       	push   $0xf0138c5e
f0113f89:	e8 85 c4 fe ff       	call   f0100413 <_warn>
f0113f8e:	83 c4 10             	add    $0x10,%esp
				correct = 0;
f0113f91:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
			}
			if (correct) eval += 5 ;
f0113f95:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0113f99:	74 04                	je     f0113f9f <test_share_chunk+0x9d0>
f0113f9b:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
			correct = 1 ;
f0113f9f:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
		}
	}
	cprintf("\nCASE IV: END\n") ;
f0113fa3:	83 ec 0c             	sub    $0xc,%esp
f0113fa6:	68 b8 a4 13 f0       	push   $0xf013a4b8
f0113fab:	e8 5e cd fe ff       	call   f0100d0e <cprintf>
f0113fb0:	83 c4 10             	add    $0x10,%esp

	cprintf("[EVAL] share_chunk: FINISHED. Evaluation = %d\n", eval);
f0113fb3:	83 ec 08             	sub    $0x8,%esp
f0113fb6:	ff 75 e4             	pushl  -0x1c(%ebp)
f0113fb9:	68 c8 a4 13 f0       	push   $0xf013a4c8
f0113fbe:	e8 4b cd fe ff       	call   f0100d0e <cprintf>
f0113fc3:	83 c4 10             	add    $0x10,%esp
	if(eval == 100)
f0113fc6:	83 7d e4 64          	cmpl   $0x64,-0x1c(%ebp)
f0113fca:	75 10                	jne    f0113fdc <test_share_chunk+0xa0d>
		cprintf("Congratulations!! test share_chunk completed successfully.\n");
f0113fcc:	83 ec 0c             	sub    $0xc,%esp
f0113fcf:	68 f8 a4 13 f0       	push   $0xf013a4f8
f0113fd4:	e8 35 cd fe ff       	call   f0100d0e <cprintf>
f0113fd9:	83 c4 10             	add    $0x10,%esp

	//return back to the kernel directory
	lcr3(phys_page_directory) ;
f0113fdc:	a1 6c 26 78 f0       	mov    0xf078266c,%eax
f0113fe1:	89 45 c8             	mov    %eax,-0x38(%ebp)
f0113fe4:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0113fe7:	0f 22 d8             	mov    %eax,%cr3

	return 0;
f0113fea:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0113fef:	8d 65 f4             	lea    -0xc(%ebp),%esp
f0113ff2:	5b                   	pop    %ebx
f0113ff3:	5e                   	pop    %esi
f0113ff4:	5f                   	pop    %edi
f0113ff5:	5d                   	pop    %ebp
f0113ff6:	c3                   	ret    

f0113ff7 <test_allocate_chunk>:

//===============================
// 4) TEST ALLOCATE CHUNK:
//===============================
int test_allocate_chunk()
{
f0113ff7:	55                   	push   %ebp
f0113ff8:	89 e5                	mov    %esp,%ebp
f0113ffa:	57                   	push   %edi
f0113ffb:	56                   	push   %esi
f0113ffc:	53                   	push   %ebx
f0113ffd:	81 ec ac 00 00 00    	sub    $0xac,%esp
	//Create a Temp. User Process
	char prog_name[50] = "fos_helloWorld";
f0114003:	8d 85 5e ff ff ff    	lea    -0xa2(%ebp),%eax
f0114009:	bb f8 96 13 f0       	mov    $0xf01396f8,%ebx
f011400e:	ba 0f 00 00 00       	mov    $0xf,%edx
f0114013:	89 c7                	mov    %eax,%edi
f0114015:	89 de                	mov    %ebx,%esi
f0114017:	89 d1                	mov    %edx,%ecx
f0114019:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f011401b:	8d 95 6d ff ff ff    	lea    -0x93(%ebp),%edx
f0114021:	b9 23 00 00 00       	mov    $0x23,%ecx
f0114026:	b0 00                	mov    $0x0,%al
f0114028:	89 d7                	mov    %edx,%edi
f011402a:	f3 aa                	rep stos %al,%es:(%edi)
	struct Env* env = env_create(prog_name, 20, 10, 0);
f011402c:	6a 00                	push   $0x0
f011402e:	6a 0a                	push   $0xa
f0114030:	6a 14                	push   $0x14
f0114032:	8d 85 5e ff ff ff    	lea    -0xa2(%ebp),%eax
f0114038:	50                   	push   %eax
f0114039:	e8 25 4e ff ff       	call   f0108e63 <env_create>
f011403e:	83 c4 10             	add    $0x10,%esp
f0114041:	89 45 d4             	mov    %eax,-0x2c(%ebp)
	uint32 *proc_directory = env->env_page_directory ;
f0114044:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0114047:	8b 40 5c             	mov    0x5c(%eax),%eax
f011404a:	89 45 d0             	mov    %eax,-0x30(%ebp)
	lcr3(env->env_cr3) ;
f011404d:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0114050:	8b 40 60             	mov    0x60(%eax),%eax
f0114053:	89 45 90             	mov    %eax,-0x70(%ebp)
f0114056:	8b 45 90             	mov    -0x70(%ebp),%eax
f0114059:	0f 22 d8             	mov    %eax,%cr3
	//===================================================

	ClearUserSpace(proc_directory);
f011405c:	83 ec 0c             	sub    $0xc,%esp
f011405f:	ff 75 d0             	pushl  -0x30(%ebp)
f0114062:	e8 32 20 00 00       	call   f0116099 <ClearUserSpace>
f0114067:	83 c4 10             	add    $0x10,%esp

	char *ptr1, *ptr2, *ptr3, *ptr4, *ptr5, *ptr6, *ptr7, *ptr8;
	char tptr[10] ;
	int kilo = 1024 ;
f011406a:	c7 45 c8 00 04 00 00 	movl   $0x400,-0x38(%ebp)
	int mega = 1024*1024 ;
f0114071:	c7 45 c4 00 00 10 00 	movl   $0x100000,-0x3c(%ebp)
	uint32 eval = 0;
f0114078:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
	uint8 correct =1 ;
f011407f:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	extern char end_of_kernel[];

	/*======================================*/
	/*PART I: Destination page(s) exist 30% */
	/*======================================*/
	cprintf("\nCASE I: Destination page(s) exist [30%]\n") ;
f0114083:	83 ec 0c             	sub    $0xc,%esp
f0114086:	68 34 a5 13 f0       	push   $0xf013a534
f011408b:	e8 7e cc fe ff       	call   f0100d0e <cprintf>
f0114090:	83 c4 10             	add    $0x10,%esp
	{
		ptr1 = (char*)KERNEL_STACK_TOP - 1;
f0114093:	c7 45 c0 ff ff bf ef 	movl   $0xefbfffff,-0x40(%ebp)
		ptr2 = (char*)KERNEL_STACK_TOP - 2;
f011409a:	c7 45 bc fe ff bf ef 	movl   $0xefbffffe,-0x44(%ebp)
		tptr[1] = *ptr1 ;
f01140a1:	8b 45 c0             	mov    -0x40(%ebp),%eax
f01140a4:	8a 00                	mov    (%eax),%al
f01140a6:	88 85 55 ff ff ff    	mov    %al,-0xab(%ebp)
		tptr[2] = *ptr2 ;
f01140ac:	8b 45 bc             	mov    -0x44(%ebp),%eax
f01140af:	8a 00                	mov    (%eax),%al
f01140b1:	88 85 56 ff ff ff    	mov    %al,-0xaa(%ebp)
		uint32 old_perms = GP(proc_directory, KERNEL_STACK_TOP - 1*PAGE_SIZE) ;
f01140b7:	83 ec 08             	sub    $0x8,%esp
f01140ba:	68 00 f0 bf ef       	push   $0xefbff000
f01140bf:	ff 75 d0             	pushl  -0x30(%ebp)
f01140c2:	e8 b3 1f 00 00       	call   f011607a <GP>
f01140c7:	83 c4 10             	add    $0x10,%esp
f01140ca:	89 45 b8             	mov    %eax,-0x48(%ebp)
		numOfFreeFramesBefore = sys_calculate_free_frames();
f01140cd:	e8 cb 8a ff ff       	call   f010cb9d <sys_calculate_free_frames>
f01140d2:	89 45 b4             	mov    %eax,-0x4c(%ebp)

		int ret = allocate_chunk(proc_directory, KERNEL_STACK_TOP - 1*PAGE_SIZE, 4*kilo, PERM_WRITEABLE) ;
f01140d5:	8b 45 c8             	mov    -0x38(%ebp),%eax
f01140d8:	c1 e0 02             	shl    $0x2,%eax
f01140db:	6a 02                	push   $0x2
f01140dd:	50                   	push   %eax
f01140de:	68 00 f0 bf ef       	push   $0xefbff000
f01140e3:	ff 75 d0             	pushl  -0x30(%ebp)
f01140e6:	e8 3a 4a ff ff       	call   f0108b25 <allocate_chunk>
f01140eb:	83 c4 10             	add    $0x10,%esp
f01140ee:	89 45 b0             	mov    %eax,-0x50(%ebp)

		numOfFreeFramesAfter = sys_calculate_free_frames();
f01140f1:	e8 a7 8a ff ff       	call   f010cb9d <sys_calculate_free_frames>
f01140f6:	89 45 ac             	mov    %eax,-0x54(%ebp)

		if (ret != -1 || (numOfFreeFramesBefore - numOfFreeFramesAfter) != 0)
f01140f9:	83 7d b0 ff          	cmpl   $0xffffffff,-0x50(%ebp)
f01140fd:	75 08                	jne    f0114107 <test_allocate_chunk+0x110>
f01140ff:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0114102:	3b 45 ac             	cmp    -0x54(%ebp),%eax
f0114105:	74 2a                	je     f0114131 <test_allocate_chunk+0x13a>
		{
			warn("[EVAL] allocate_chunk: Failed (dest is exist... operation should be denied) ret=%d diff=%d expected=%d\n", ret, (numOfFreeFramesBefore - numOfFreeFramesAfter), 0);
f0114107:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f011410a:	2b 45 ac             	sub    -0x54(%ebp),%eax
f011410d:	83 ec 08             	sub    $0x8,%esp
f0114110:	6a 00                	push   $0x0
f0114112:	50                   	push   %eax
f0114113:	ff 75 b0             	pushl  -0x50(%ebp)
f0114116:	68 60 a5 13 f0       	push   $0xf013a560
f011411b:	68 c3 04 00 00       	push   $0x4c3
f0114120:	68 5e 8c 13 f0       	push   $0xf0138c5e
f0114125:	e8 e9 c2 fe ff       	call   f0100413 <_warn>
f011412a:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f011412d:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 10 ;
f0114131:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0114135:	74 04                	je     f011413b <test_allocate_chunk+0x144>
f0114137:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f011413b:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		numOfFreeFramesBefore = sys_calculate_free_frames();
f011413f:	e8 59 8a ff ff       	call   f010cb9d <sys_calculate_free_frames>
f0114144:	89 45 b4             	mov    %eax,-0x4c(%ebp)

		ret = allocate_chunk(proc_directory, KERNEL_STACK_TOP - 5*kilo, 2*kilo, PERM_WRITEABLE) ;
f0114147:	8b 45 c8             	mov    -0x38(%ebp),%eax
f011414a:	01 c0                	add    %eax,%eax
f011414c:	89 c1                	mov    %eax,%ecx
f011414e:	8b 55 c8             	mov    -0x38(%ebp),%edx
f0114151:	89 d0                	mov    %edx,%eax
f0114153:	c1 e0 02             	shl    $0x2,%eax
f0114156:	01 d0                	add    %edx,%eax
f0114158:	f7 d8                	neg    %eax
f011415a:	2d 00 00 40 10       	sub    $0x10400000,%eax
f011415f:	6a 02                	push   $0x2
f0114161:	51                   	push   %ecx
f0114162:	50                   	push   %eax
f0114163:	ff 75 d0             	pushl  -0x30(%ebp)
f0114166:	e8 ba 49 ff ff       	call   f0108b25 <allocate_chunk>
f011416b:	83 c4 10             	add    $0x10,%esp
f011416e:	89 45 b0             	mov    %eax,-0x50(%ebp)

		numOfFreeFramesAfter = sys_calculate_free_frames();
f0114171:	e8 27 8a ff ff       	call   f010cb9d <sys_calculate_free_frames>
f0114176:	89 45 ac             	mov    %eax,-0x54(%ebp)

		if (ret != -1 || (numOfFreeFramesBefore - numOfFreeFramesAfter) != 0)
f0114179:	83 7d b0 ff          	cmpl   $0xffffffff,-0x50(%ebp)
f011417d:	75 08                	jne    f0114187 <test_allocate_chunk+0x190>
f011417f:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0114182:	3b 45 ac             	cmp    -0x54(%ebp),%eax
f0114185:	74 2a                	je     f01141b1 <test_allocate_chunk+0x1ba>
		{
			warn("[EVAL] allocate_chunk: Failed (dest is exist... operation should be denied) ret=%d diff=%d expected=%d\n", ret, (numOfFreeFramesBefore - numOfFreeFramesAfter), 0);
f0114187:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f011418a:	2b 45 ac             	sub    -0x54(%ebp),%eax
f011418d:	83 ec 08             	sub    $0x8,%esp
f0114190:	6a 00                	push   $0x0
f0114192:	50                   	push   %eax
f0114193:	ff 75 b0             	pushl  -0x50(%ebp)
f0114196:	68 60 a5 13 f0       	push   $0xf013a560
f011419b:	68 d1 04 00 00       	push   $0x4d1
f01141a0:	68 5e 8c 13 f0       	push   $0xf0138c5e
f01141a5:	e8 69 c2 fe ff       	call   f0100413 <_warn>
f01141aa:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f01141ad:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 10 ;
f01141b1:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f01141b5:	74 04                	je     f01141bb <test_allocate_chunk+0x1c4>
f01141b7:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f01141bb:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		if (CCP(proc_directory, 0, KERNEL_STACK_TOP-1*PAGE_SIZE, 4*kilo, 1, old_perms, 0xFFF, 0, 0, CHK_ALLOC) == 0)
f01141bf:	8b 45 c8             	mov    -0x38(%ebp),%eax
f01141c2:	c1 e0 02             	shl    $0x2,%eax
f01141c5:	83 ec 08             	sub    $0x8,%esp
f01141c8:	6a 03                	push   $0x3
f01141ca:	6a 00                	push   $0x0
f01141cc:	6a 00                	push   $0x0
f01141ce:	68 ff 0f 00 00       	push   $0xfff
f01141d3:	ff 75 b8             	pushl  -0x48(%ebp)
f01141d6:	6a 01                	push   $0x1
f01141d8:	50                   	push   %eax
f01141d9:	68 00 f0 bf ef       	push   $0xefbff000
f01141de:	6a 00                	push   $0x0
f01141e0:	ff 75 d0             	pushl  -0x30(%ebp)
f01141e3:	e8 e5 1e 00 00       	call   f01160cd <CCP>
f01141e8:	83 c4 30             	add    $0x30,%esp
f01141eb:	85 c0                	test   %eax,%eax
f01141ed:	75 1e                	jne    f011420d <test_allocate_chunk+0x216>
		{
			warn("[EVAL] allocate_chunk: Failed (problem in permissions and/or references\n");
f01141ef:	83 ec 04             	sub    $0x4,%esp
f01141f2:	68 c8 a5 13 f0       	push   $0xf013a5c8
f01141f7:	68 d9 04 00 00       	push   $0x4d9
f01141fc:	68 5e 8c 13 f0       	push   $0xf0138c5e
f0114201:	e8 0d c2 fe ff       	call   f0100413 <_warn>
f0114206:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0114209:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f011420d:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0114211:	74 04                	je     f0114217 <test_allocate_chunk+0x220>
f0114213:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0114217:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		if ((*ptr1) != tptr[1] || (*ptr2) != tptr[2])
f011421b:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011421e:	8a 10                	mov    (%eax),%dl
f0114220:	8a 85 55 ff ff ff    	mov    -0xab(%ebp),%al
f0114226:	38 c2                	cmp    %al,%dl
f0114228:	75 0f                	jne    f0114239 <test_allocate_chunk+0x242>
f011422a:	8b 45 bc             	mov    -0x44(%ebp),%eax
f011422d:	8a 10                	mov    (%eax),%dl
f011422f:	8a 85 56 ff ff ff    	mov    -0xaa(%ebp),%al
f0114235:	38 c2                	cmp    %al,%dl
f0114237:	74 1e                	je     f0114257 <test_allocate_chunk+0x260>
		{
			warn("[EVAL] allocate_chunk: Failed (content is not correct)\n");
f0114239:	83 ec 04             	sub    $0x4,%esp
f011423c:	68 14 a6 13 f0       	push   $0xf013a614
f0114241:	68 e1 04 00 00       	push   $0x4e1
f0114246:	68 5e 8c 13 f0       	push   $0xf0138c5e
f011424b:	e8 c3 c1 fe ff       	call   f0100413 <_warn>
f0114250:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0114253:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0114257:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f011425b:	74 04                	je     f0114261 <test_allocate_chunk+0x26a>
f011425d:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0114261:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	}
	cprintf("\nCASE I: END\n") ;
f0114265:	83 ec 0c             	sub    $0xc,%esp
f0114268:	68 a9 a3 13 f0       	push   $0xf013a3a9
f011426d:	e8 9c ca fe ff       	call   f0100d0e <cprintf>
f0114272:	83 c4 10             	add    $0x10,%esp

	/*============================================================*/
	/*PART II: Destination page(s) not exist [Supervisor r/w] 20% */
	/*============================================================*/
	cprintf("\nCASE II: Destination page(s) not exist [Supervisor r/w] [20%]\n") ;
f0114275:	83 ec 0c             	sub    $0xc,%esp
f0114278:	68 4c a6 13 f0       	push   $0xf013a64c
f011427d:	e8 8c ca fe ff       	call   f0100d0e <cprintf>
f0114282:	83 c4 10             	add    $0x10,%esp
	{
		numOfFreeFramesBefore = sys_calculate_free_frames();
f0114285:	e8 13 89 ff ff       	call   f010cb9d <sys_calculate_free_frames>
f011428a:	89 45 b4             	mov    %eax,-0x4c(%ebp)

		int ret = allocate_chunk(proc_directory, 0x0, 32*mega, PERM_WRITEABLE | PERM_AVAILABLE) ;
f011428d:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0114290:	c1 e0 05             	shl    $0x5,%eax
f0114293:	68 02 0e 00 00       	push   $0xe02
f0114298:	50                   	push   %eax
f0114299:	6a 00                	push   $0x0
f011429b:	ff 75 d0             	pushl  -0x30(%ebp)
f011429e:	e8 82 48 ff ff       	call   f0108b25 <allocate_chunk>
f01142a3:	83 c4 10             	add    $0x10,%esp
f01142a6:	89 45 a8             	mov    %eax,-0x58(%ebp)

		numOfFreeFramesAfter = sys_calculate_free_frames();
f01142a9:	e8 ef 88 ff ff       	call   f010cb9d <sys_calculate_free_frames>
f01142ae:	89 45 ac             	mov    %eax,-0x54(%ebp)

		if (ret != 0 || (numOfFreeFramesBefore - numOfFreeFramesAfter) != ((32*mega)/(4*mega) + (32*mega)/(4*kilo)))
f01142b1:	83 7d a8 00          	cmpl   $0x0,-0x58(%ebp)
f01142b5:	75 36                	jne    f01142ed <test_allocate_chunk+0x2f6>
f01142b7:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01142ba:	2b 45 ac             	sub    -0x54(%ebp),%eax
f01142bd:	89 c1                	mov    %eax,%ecx
f01142bf:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f01142c2:	c1 e0 05             	shl    $0x5,%eax
f01142c5:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f01142c8:	8d 34 95 00 00 00 00 	lea    0x0(,%edx,4),%esi
f01142cf:	99                   	cltd   
f01142d0:	f7 fe                	idiv   %esi
f01142d2:	89 c3                	mov    %eax,%ebx
f01142d4:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f01142d7:	c1 e0 05             	shl    $0x5,%eax
f01142da:	8b 55 c8             	mov    -0x38(%ebp),%edx
f01142dd:	8d 34 95 00 00 00 00 	lea    0x0(,%edx,4),%esi
f01142e4:	99                   	cltd   
f01142e5:	f7 fe                	idiv   %esi
f01142e7:	01 d8                	add    %ebx,%eax
f01142e9:	39 c1                	cmp    %eax,%ecx
f01142eb:	74 54                	je     f0114341 <test_allocate_chunk+0x34a>
		{
			warn("[EVAL] allocate_chunk: Failed (# allocated frames is not correct) ret=%d diff=%d expected=%d\n", ret, numOfFreeFramesBefore - numOfFreeFramesAfter, ((32*mega)/(4*mega) + (32*mega)/(4*kilo)));
f01142ed:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f01142f0:	c1 e0 05             	shl    $0x5,%eax
f01142f3:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f01142f6:	8d 3c 95 00 00 00 00 	lea    0x0(,%edx,4),%edi
f01142fd:	99                   	cltd   
f01142fe:	f7 ff                	idiv   %edi
f0114300:	89 c1                	mov    %eax,%ecx
f0114302:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0114305:	c1 e0 05             	shl    $0x5,%eax
f0114308:	8b 55 c8             	mov    -0x38(%ebp),%edx
f011430b:	8d 34 95 00 00 00 00 	lea    0x0(,%edx,4),%esi
f0114312:	99                   	cltd   
f0114313:	f7 fe                	idiv   %esi
f0114315:	8d 14 01             	lea    (%ecx,%eax,1),%edx
f0114318:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f011431b:	2b 45 ac             	sub    -0x54(%ebp),%eax
f011431e:	83 ec 08             	sub    $0x8,%esp
f0114321:	52                   	push   %edx
f0114322:	50                   	push   %eax
f0114323:	ff 75 a8             	pushl  -0x58(%ebp)
f0114326:	68 8c a6 13 f0       	push   $0xf013a68c
f011432b:	68 f6 04 00 00       	push   $0x4f6
f0114330:	68 5e 8c 13 f0       	push   $0xf0138c5e
f0114335:	e8 d9 c0 fe ff       	call   f0100413 <_warn>
f011433a:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f011433d:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0114341:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0114345:	74 04                	je     f011434b <test_allocate_chunk+0x354>
f0114347:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f011434b:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		int chk_cnt = 1 ;
f011434f:	c7 45 dc 01 00 00 00 	movl   $0x1,-0x24(%ebp)
		if (CCP(proc_directory, 0, 0x0, 32*mega, 1, 0xE03, 0xE07, 0, 0, CHK_ALLOC) == 0)
f0114356:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0114359:	c1 e0 05             	shl    $0x5,%eax
f011435c:	83 ec 08             	sub    $0x8,%esp
f011435f:	6a 03                	push   $0x3
f0114361:	6a 00                	push   $0x0
f0114363:	6a 00                	push   $0x0
f0114365:	68 07 0e 00 00       	push   $0xe07
f011436a:	68 03 0e 00 00       	push   $0xe03
f011436f:	6a 01                	push   $0x1
f0114371:	50                   	push   %eax
f0114372:	6a 00                	push   $0x0
f0114374:	6a 00                	push   $0x0
f0114376:	ff 75 d0             	pushl  -0x30(%ebp)
f0114379:	e8 4f 1d 00 00       	call   f01160cd <CCP>
f011437e:	83 c4 30             	add    $0x30,%esp
f0114381:	85 c0                	test   %eax,%eax
f0114383:	75 25                	jne    f01143aa <test_allocate_chunk+0x3b3>
		{
			warn("[EVAL] allocate_chunk: Failed (problem in permissions and/or references\n");
f0114385:	83 ec 04             	sub    $0x4,%esp
f0114388:	68 c8 a5 13 f0       	push   $0xf013a5c8
f011438d:	68 ff 04 00 00       	push   $0x4ff
f0114392:	68 5e 8c 13 f0       	push   $0xf0138c5e
f0114397:	e8 77 c0 fe ff       	call   f0100413 <_warn>
f011439c:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f011439f:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
			chk_cnt = 0 ;
f01143a3:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
		}
		if (correct) eval += 10 ;
f01143aa:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f01143ae:	74 04                	je     f01143b4 <test_allocate_chunk+0x3bd>
f01143b0:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f01143b4:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		if (chk_cnt)
f01143b8:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f01143bc:	74 5a                	je     f0114418 <test_allocate_chunk+0x421>
		{
			ptr1 = (char*)(0x0+2*kilo); *ptr1 = 'K' ;
f01143be:	8b 45 c8             	mov    -0x38(%ebp),%eax
f01143c1:	01 c0                	add    %eax,%eax
f01143c3:	89 45 c0             	mov    %eax,-0x40(%ebp)
f01143c6:	8b 45 c0             	mov    -0x40(%ebp),%eax
f01143c9:	c6 00 4b             	movb   $0x4b,(%eax)
			ptr2 = (char*)(0x0+2*mega); *ptr2 = 'M' ;
f01143cc:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f01143cf:	01 c0                	add    %eax,%eax
f01143d1:	89 45 bc             	mov    %eax,-0x44(%ebp)
f01143d4:	8b 45 bc             	mov    -0x44(%ebp),%eax
f01143d7:	c6 00 4d             	movb   $0x4d,(%eax)

			if ((*ptr1) != 'K' || (*ptr2) != 'M')
f01143da:	8b 45 c0             	mov    -0x40(%ebp),%eax
f01143dd:	8a 00                	mov    (%eax),%al
f01143df:	3c 4b                	cmp    $0x4b,%al
f01143e1:	75 09                	jne    f01143ec <test_allocate_chunk+0x3f5>
f01143e3:	8b 45 bc             	mov    -0x44(%ebp),%eax
f01143e6:	8a 00                	mov    (%eax),%al
f01143e8:	3c 4d                	cmp    $0x4d,%al
f01143ea:	74 1e                	je     f011440a <test_allocate_chunk+0x413>
			{
				warn("[EVAL] allocate_chunk: Failed (content is not correct)\n");
f01143ec:	83 ec 04             	sub    $0x4,%esp
f01143ef:	68 14 a6 13 f0       	push   $0xf013a614
f01143f4:	68 0d 05 00 00       	push   $0x50d
f01143f9:	68 5e 8c 13 f0       	push   $0xf0138c5e
f01143fe:	e8 10 c0 fe ff       	call   f0100413 <_warn>
f0114403:	83 c4 10             	add    $0x10,%esp
				correct = 0;
f0114406:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
			}
			if (correct) eval += 5 ;
f011440a:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f011440e:	74 04                	je     f0114414 <test_allocate_chunk+0x41d>
f0114410:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
			correct = 1 ;
f0114414:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
		}
	}
	cprintf("\nCASE II: END\n") ;
f0114418:	83 ec 0c             	sub    $0xc,%esp
f011441b:	68 83 99 13 f0       	push   $0xf0139983
f0114420:	e8 e9 c8 fe ff       	call   f0100d0e <cprintf>
f0114425:	83 c4 10             	add    $0x10,%esp

	/*============================================================*/
	/*PART III: Destination page(s) not exist [Supervisor r] 15%  */
	/*============================================================*/
	cprintf("\nCASE III: Destination page(s) not exist [Supervisor r] [15%]\n") ;
f0114428:	83 ec 0c             	sub    $0xc,%esp
f011442b:	68 ec a6 13 f0       	push   $0xf013a6ec
f0114430:	e8 d9 c8 fe ff       	call   f0100d0e <cprintf>
f0114435:	83 c4 10             	add    $0x10,%esp
	{
		numOfFreeFramesBefore = sys_calculate_free_frames();
f0114438:	e8 60 87 ff ff       	call   f010cb9d <sys_calculate_free_frames>
f011443d:	89 45 b4             	mov    %eax,-0x4c(%ebp)

		int ret = allocate_chunk(proc_directory, 0x0+32*mega, 64*mega, 0) ;
f0114440:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0114443:	c1 e0 06             	shl    $0x6,%eax
f0114446:	89 c2                	mov    %eax,%edx
f0114448:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f011444b:	c1 e0 05             	shl    $0x5,%eax
f011444e:	6a 00                	push   $0x0
f0114450:	52                   	push   %edx
f0114451:	50                   	push   %eax
f0114452:	ff 75 d0             	pushl  -0x30(%ebp)
f0114455:	e8 cb 46 ff ff       	call   f0108b25 <allocate_chunk>
f011445a:	83 c4 10             	add    $0x10,%esp
f011445d:	89 45 a4             	mov    %eax,-0x5c(%ebp)

		numOfFreeFramesAfter = sys_calculate_free_frames();
f0114460:	e8 38 87 ff ff       	call   f010cb9d <sys_calculate_free_frames>
f0114465:	89 45 ac             	mov    %eax,-0x54(%ebp)

		if (ret != 0 || (numOfFreeFramesBefore - numOfFreeFramesAfter) != ((64*mega)/(4*mega) + (64*mega)/(4*kilo)))
f0114468:	83 7d a4 00          	cmpl   $0x0,-0x5c(%ebp)
f011446c:	75 36                	jne    f01144a4 <test_allocate_chunk+0x4ad>
f011446e:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0114471:	2b 45 ac             	sub    -0x54(%ebp),%eax
f0114474:	89 c1                	mov    %eax,%ecx
f0114476:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0114479:	c1 e0 06             	shl    $0x6,%eax
f011447c:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f011447f:	8d 3c 95 00 00 00 00 	lea    0x0(,%edx,4),%edi
f0114486:	99                   	cltd   
f0114487:	f7 ff                	idiv   %edi
f0114489:	89 c3                	mov    %eax,%ebx
f011448b:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f011448e:	c1 e0 06             	shl    $0x6,%eax
f0114491:	8b 55 c8             	mov    -0x38(%ebp),%edx
f0114494:	8d 34 95 00 00 00 00 	lea    0x0(,%edx,4),%esi
f011449b:	99                   	cltd   
f011449c:	f7 fe                	idiv   %esi
f011449e:	01 d8                	add    %ebx,%eax
f01144a0:	39 c1                	cmp    %eax,%ecx
f01144a2:	74 54                	je     f01144f8 <test_allocate_chunk+0x501>
		{
			warn("[EVAL] allocate_chunk: Failed (# allocated frames is not correct) ret=%d diff=%d expected=%d\n", ret, numOfFreeFramesBefore - numOfFreeFramesAfter, ((64*mega)/(4*mega) + (64*mega)/(4*kilo)));
f01144a4:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f01144a7:	c1 e0 06             	shl    $0x6,%eax
f01144aa:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f01144ad:	8d 1c 95 00 00 00 00 	lea    0x0(,%edx,4),%ebx
f01144b4:	99                   	cltd   
f01144b5:	f7 fb                	idiv   %ebx
f01144b7:	89 c1                	mov    %eax,%ecx
f01144b9:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f01144bc:	c1 e0 06             	shl    $0x6,%eax
f01144bf:	8b 55 c8             	mov    -0x38(%ebp),%edx
f01144c2:	8d 3c 95 00 00 00 00 	lea    0x0(,%edx,4),%edi
f01144c9:	99                   	cltd   
f01144ca:	f7 ff                	idiv   %edi
f01144cc:	8d 14 01             	lea    (%ecx,%eax,1),%edx
f01144cf:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01144d2:	2b 45 ac             	sub    -0x54(%ebp),%eax
f01144d5:	83 ec 08             	sub    $0x8,%esp
f01144d8:	52                   	push   %edx
f01144d9:	50                   	push   %eax
f01144da:	ff 75 a4             	pushl  -0x5c(%ebp)
f01144dd:	68 8c a6 13 f0       	push   $0xf013a68c
f01144e2:	68 23 05 00 00       	push   $0x523
f01144e7:	68 5e 8c 13 f0       	push   $0xf0138c5e
f01144ec:	e8 22 bf fe ff       	call   f0100413 <_warn>
f01144f1:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f01144f4:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f01144f8:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f01144fc:	74 04                	je     f0114502 <test_allocate_chunk+0x50b>
f01144fe:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0114502:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		int chk_cnt = 1 ;
f0114506:	c7 45 a0 01 00 00 00 	movl   $0x1,-0x60(%ebp)
		if (CCP(proc_directory, 0, 0x0+32*mega, 64*mega, 1, 0x001, 0xE07, 0, 0, CHK_ALLOC) == 0)
f011450d:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0114510:	c1 e0 06             	shl    $0x6,%eax
f0114513:	89 c2                	mov    %eax,%edx
f0114515:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0114518:	c1 e0 05             	shl    $0x5,%eax
f011451b:	83 ec 08             	sub    $0x8,%esp
f011451e:	6a 03                	push   $0x3
f0114520:	6a 00                	push   $0x0
f0114522:	6a 00                	push   $0x0
f0114524:	68 07 0e 00 00       	push   $0xe07
f0114529:	6a 01                	push   $0x1
f011452b:	6a 01                	push   $0x1
f011452d:	52                   	push   %edx
f011452e:	50                   	push   %eax
f011452f:	6a 00                	push   $0x0
f0114531:	ff 75 d0             	pushl  -0x30(%ebp)
f0114534:	e8 94 1b 00 00       	call   f01160cd <CCP>
f0114539:	83 c4 30             	add    $0x30,%esp
f011453c:	85 c0                	test   %eax,%eax
f011453e:	75 25                	jne    f0114565 <test_allocate_chunk+0x56e>
		{
			warn("[EVAL] allocate_chunk: Failed (problem in permissions and/or references\n");
f0114540:	83 ec 04             	sub    $0x4,%esp
f0114543:	68 c8 a5 13 f0       	push   $0xf013a5c8
f0114548:	68 2c 05 00 00       	push   $0x52c
f011454d:	68 5e 8c 13 f0       	push   $0xf0138c5e
f0114552:	e8 bc be fe ff       	call   f0100413 <_warn>
f0114557:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f011455a:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
			chk_cnt = 0 ;
f011455e:	c7 45 a0 00 00 00 00 	movl   $0x0,-0x60(%ebp)
		}
		if (correct) eval += 10 ;
f0114565:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0114569:	74 04                	je     f011456f <test_allocate_chunk+0x578>
f011456b:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f011456f:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	}
	cprintf("\nCASE III: END\n") ;
f0114573:	83 ec 0c             	sub    $0xc,%esp
f0114576:	68 e6 99 13 f0       	push   $0xf01399e6
f011457b:	e8 8e c7 fe ff       	call   f0100d0e <cprintf>
f0114580:	83 c4 10             	add    $0x10,%esp

	/*========================================================*/
	/*PART IV: Destination page(s) not exist [User r/w] 20%  */
	/*========================================================*/
	cprintf("\nCASE IV: Destination page(s) not exist [User r/w] [20%]\n") ;
f0114583:	83 ec 0c             	sub    $0xc,%esp
f0114586:	68 2c a7 13 f0       	push   $0xf013a72c
f011458b:	e8 7e c7 fe ff       	call   f0100d0e <cprintf>
f0114590:	83 c4 10             	add    $0x10,%esp
	{
		numOfFreeFramesBefore = sys_calculate_free_frames();
f0114593:	e8 05 86 ff ff       	call   f010cb9d <sys_calculate_free_frames>
f0114598:	89 45 b4             	mov    %eax,-0x4c(%ebp)

		int ret = allocate_chunk(proc_directory, USER_HEAP_START, 64*mega, PERM_WRITEABLE|PERM_USER|PERM_AVAILABLE) ;
f011459b:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f011459e:	c1 e0 06             	shl    $0x6,%eax
f01145a1:	68 06 0e 00 00       	push   $0xe06
f01145a6:	50                   	push   %eax
f01145a7:	68 00 00 00 80       	push   $0x80000000
f01145ac:	ff 75 d0             	pushl  -0x30(%ebp)
f01145af:	e8 71 45 ff ff       	call   f0108b25 <allocate_chunk>
f01145b4:	83 c4 10             	add    $0x10,%esp
f01145b7:	89 45 9c             	mov    %eax,-0x64(%ebp)

		numOfFreeFramesAfter = sys_calculate_free_frames();
f01145ba:	e8 de 85 ff ff       	call   f010cb9d <sys_calculate_free_frames>
f01145bf:	89 45 ac             	mov    %eax,-0x54(%ebp)

		if (ret != 0 || (numOfFreeFramesBefore - numOfFreeFramesAfter) != ((64*mega)/(4*kilo)+(64*mega)/(4*mega)))
f01145c2:	83 7d 9c 00          	cmpl   $0x0,-0x64(%ebp)
f01145c6:	75 36                	jne    f01145fe <test_allocate_chunk+0x607>
f01145c8:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01145cb:	2b 45 ac             	sub    -0x54(%ebp),%eax
f01145ce:	89 c1                	mov    %eax,%ecx
f01145d0:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f01145d3:	c1 e0 06             	shl    $0x6,%eax
f01145d6:	8b 55 c8             	mov    -0x38(%ebp),%edx
f01145d9:	8d 1c 95 00 00 00 00 	lea    0x0(,%edx,4),%ebx
f01145e0:	99                   	cltd   
f01145e1:	f7 fb                	idiv   %ebx
f01145e3:	89 c3                	mov    %eax,%ebx
f01145e5:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f01145e8:	c1 e0 06             	shl    $0x6,%eax
f01145eb:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f01145ee:	8d 34 95 00 00 00 00 	lea    0x0(,%edx,4),%esi
f01145f5:	99                   	cltd   
f01145f6:	f7 fe                	idiv   %esi
f01145f8:	01 d8                	add    %ebx,%eax
f01145fa:	39 c1                	cmp    %eax,%ecx
f01145fc:	74 54                	je     f0114652 <test_allocate_chunk+0x65b>
		{
			warn("[EVAL] allocate_chunk: Failed (# allocated frames is not correct) ret=%d diff=%d expected=%d\n", ret, numOfFreeFramesBefore - numOfFreeFramesAfter, ((64*mega)/(4*kilo)+(64*mega)/(4*mega)));
f01145fe:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0114601:	c1 e0 06             	shl    $0x6,%eax
f0114604:	8b 55 c8             	mov    -0x38(%ebp),%edx
f0114607:	8d 3c 95 00 00 00 00 	lea    0x0(,%edx,4),%edi
f011460e:	99                   	cltd   
f011460f:	f7 ff                	idiv   %edi
f0114611:	89 c1                	mov    %eax,%ecx
f0114613:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0114616:	c1 e0 06             	shl    $0x6,%eax
f0114619:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f011461c:	8d 1c 95 00 00 00 00 	lea    0x0(,%edx,4),%ebx
f0114623:	99                   	cltd   
f0114624:	f7 fb                	idiv   %ebx
f0114626:	8d 14 01             	lea    (%ecx,%eax,1),%edx
f0114629:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f011462c:	2b 45 ac             	sub    -0x54(%ebp),%eax
f011462f:	83 ec 08             	sub    $0x8,%esp
f0114632:	52                   	push   %edx
f0114633:	50                   	push   %eax
f0114634:	ff 75 9c             	pushl  -0x64(%ebp)
f0114637:	68 8c a6 13 f0       	push   $0xf013a68c
f011463c:	68 42 05 00 00       	push   $0x542
f0114641:	68 5e 8c 13 f0       	push   $0xf0138c5e
f0114646:	e8 c8 bd fe ff       	call   f0100413 <_warn>
f011464b:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f011464e:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0114652:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0114656:	74 04                	je     f011465c <test_allocate_chunk+0x665>
f0114658:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f011465c:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		int chk_cnt = 1 ;
f0114660:	c7 45 d8 01 00 00 00 	movl   $0x1,-0x28(%ebp)
		if (CCP(proc_directory, 0, USER_HEAP_START, 64*mega, 1, 0xE07, 0xE07, 0, 0, CHK_ALLOC) == 0)
f0114667:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f011466a:	c1 e0 06             	shl    $0x6,%eax
f011466d:	83 ec 08             	sub    $0x8,%esp
f0114670:	6a 03                	push   $0x3
f0114672:	6a 00                	push   $0x0
f0114674:	6a 00                	push   $0x0
f0114676:	68 07 0e 00 00       	push   $0xe07
f011467b:	68 07 0e 00 00       	push   $0xe07
f0114680:	6a 01                	push   $0x1
f0114682:	50                   	push   %eax
f0114683:	68 00 00 00 80       	push   $0x80000000
f0114688:	6a 00                	push   $0x0
f011468a:	ff 75 d0             	pushl  -0x30(%ebp)
f011468d:	e8 3b 1a 00 00       	call   f01160cd <CCP>
f0114692:	83 c4 30             	add    $0x30,%esp
f0114695:	85 c0                	test   %eax,%eax
f0114697:	75 25                	jne    f01146be <test_allocate_chunk+0x6c7>
		{
			warn("[EVAL] allocate_chunk: Failed (problem in permissions and/or references\n");
f0114699:	83 ec 04             	sub    $0x4,%esp
f011469c:	68 c8 a5 13 f0       	push   $0xf013a5c8
f01146a1:	68 4b 05 00 00       	push   $0x54b
f01146a6:	68 5e 8c 13 f0       	push   $0xf0138c5e
f01146ab:	e8 63 bd fe ff       	call   f0100413 <_warn>
f01146b0:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f01146b3:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
			chk_cnt = 0 ;
f01146b7:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
		}
		if (correct) eval += 10 ;
f01146be:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f01146c2:	74 04                	je     f01146c8 <test_allocate_chunk+0x6d1>
f01146c4:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f01146c8:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		if (chk_cnt)
f01146cc:	83 7d d8 00          	cmpl   $0x0,-0x28(%ebp)
f01146d0:	74 6f                	je     f0114741 <test_allocate_chunk+0x74a>
		{
			ptr1 = (char*)(USER_HEAP_START+2*kilo); *ptr1 = 'K' ;
f01146d2:	8b 45 c8             	mov    -0x38(%ebp),%eax
f01146d5:	01 c0                	add    %eax,%eax
f01146d7:	05 00 00 00 80       	add    $0x80000000,%eax
f01146dc:	89 45 c0             	mov    %eax,-0x40(%ebp)
f01146df:	8b 45 c0             	mov    -0x40(%ebp),%eax
f01146e2:	c6 00 4b             	movb   $0x4b,(%eax)
			ptr2 = (char*)(USER_HEAP_START+22*mega);*ptr2 = 'M' ;
f01146e5:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f01146e8:	89 d0                	mov    %edx,%eax
f01146ea:	c1 e0 02             	shl    $0x2,%eax
f01146ed:	01 d0                	add    %edx,%eax
f01146ef:	01 c0                	add    %eax,%eax
f01146f1:	01 d0                	add    %edx,%eax
f01146f3:	01 c0                	add    %eax,%eax
f01146f5:	05 00 00 00 80       	add    $0x80000000,%eax
f01146fa:	89 45 bc             	mov    %eax,-0x44(%ebp)
f01146fd:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0114700:	c6 00 4d             	movb   $0x4d,(%eax)

			if ((*ptr1) != 'K' || (*ptr2) != 'M')
f0114703:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0114706:	8a 00                	mov    (%eax),%al
f0114708:	3c 4b                	cmp    $0x4b,%al
f011470a:	75 09                	jne    f0114715 <test_allocate_chunk+0x71e>
f011470c:	8b 45 bc             	mov    -0x44(%ebp),%eax
f011470f:	8a 00                	mov    (%eax),%al
f0114711:	3c 4d                	cmp    $0x4d,%al
f0114713:	74 1e                	je     f0114733 <test_allocate_chunk+0x73c>
			{
				warn("[EVAL] allocate_chunk: Failed (content is not correct)\n");
f0114715:	83 ec 04             	sub    $0x4,%esp
f0114718:	68 14 a6 13 f0       	push   $0xf013a614
f011471d:	68 59 05 00 00       	push   $0x559
f0114722:	68 5e 8c 13 f0       	push   $0xf0138c5e
f0114727:	e8 e7 bc fe ff       	call   f0100413 <_warn>
f011472c:	83 c4 10             	add    $0x10,%esp
				correct = 0;
f011472f:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
			}
			if (correct) eval += 5 ;
f0114733:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0114737:	74 04                	je     f011473d <test_allocate_chunk+0x746>
f0114739:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
			correct = 1 ;
f011473d:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		}
	}
	cprintf("\nCASE IV: END\n") ;
f0114741:	83 ec 0c             	sub    $0xc,%esp
f0114744:	68 b8 a4 13 f0       	push   $0xf013a4b8
f0114749:	e8 c0 c5 fe ff       	call   f0100d0e <cprintf>
f011474e:	83 c4 10             	add    $0x10,%esp

	/*========================================================*/
	/*PART V: Destination page(s) not exist [User r] 15%     */
	/*========================================================*/
	cprintf("\nCASE V: Destination page(s) not exist [User r] [15%]\n") ;
f0114751:	83 ec 0c             	sub    $0xc,%esp
f0114754:	68 68 a7 13 f0       	push   $0xf013a768
f0114759:	e8 b0 c5 fe ff       	call   f0100d0e <cprintf>
f011475e:	83 c4 10             	add    $0x10,%esp
	{
		numOfFreeFramesBefore = sys_calculate_free_frames();
f0114761:	e8 37 84 ff ff       	call   f010cb9d <sys_calculate_free_frames>
f0114766:	89 45 b4             	mov    %eax,-0x4c(%ebp)

		int ret = allocate_chunk(proc_directory,0x403FFC00, 7*kilo, PERM_USER|PERM_AVAILABLE) ;
f0114769:	8b 55 c8             	mov    -0x38(%ebp),%edx
f011476c:	89 d0                	mov    %edx,%eax
f011476e:	01 c0                	add    %eax,%eax
f0114770:	01 d0                	add    %edx,%eax
f0114772:	01 c0                	add    %eax,%eax
f0114774:	01 d0                	add    %edx,%eax
f0114776:	68 04 0e 00 00       	push   $0xe04
f011477b:	50                   	push   %eax
f011477c:	68 00 fc 3f 40       	push   $0x403ffc00
f0114781:	ff 75 d0             	pushl  -0x30(%ebp)
f0114784:	e8 9c 43 ff ff       	call   f0108b25 <allocate_chunk>
f0114789:	83 c4 10             	add    $0x10,%esp
f011478c:	89 45 98             	mov    %eax,-0x68(%ebp)

		numOfFreeFramesAfter = sys_calculate_free_frames();
f011478f:	e8 09 84 ff ff       	call   f010cb9d <sys_calculate_free_frames>
f0114794:	89 45 ac             	mov    %eax,-0x54(%ebp)

		if (ret != 0 || (numOfFreeFramesBefore - numOfFreeFramesAfter) != (3+2))
f0114797:	83 7d 98 00          	cmpl   $0x0,-0x68(%ebp)
f011479b:	75 0b                	jne    f01147a8 <test_allocate_chunk+0x7b1>
f011479d:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01147a0:	2b 45 ac             	sub    -0x54(%ebp),%eax
f01147a3:	83 f8 05             	cmp    $0x5,%eax
f01147a6:	74 2a                	je     f01147d2 <test_allocate_chunk+0x7db>
		{
			warn("[EVAL] allocate_chunk: Failed (# allocated frames is not correct) ret=%d diff=%d expected=%d\n", ret, numOfFreeFramesBefore - numOfFreeFramesAfter, (3+2));
f01147a8:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01147ab:	2b 45 ac             	sub    -0x54(%ebp),%eax
f01147ae:	83 ec 08             	sub    $0x8,%esp
f01147b1:	6a 05                	push   $0x5
f01147b3:	50                   	push   %eax
f01147b4:	ff 75 98             	pushl  -0x68(%ebp)
f01147b7:	68 8c a6 13 f0       	push   $0xf013a68c
f01147bc:	68 70 05 00 00       	push   $0x570
f01147c1:	68 5e 8c 13 f0       	push   $0xf0138c5e
f01147c6:	e8 48 bc fe ff       	call   f0100413 <_warn>
f01147cb:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f01147ce:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 10 ;
f01147d2:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f01147d6:	74 04                	je     f01147dc <test_allocate_chunk+0x7e5>
f01147d8:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f01147dc:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		int chk_cnt = 1 ;
f01147e0:	c7 45 94 01 00 00 00 	movl   $0x1,-0x6c(%ebp)
		if (CCP(proc_directory, 0, 0x403FF000, 12*kilo, 1, 0xE05, 0xE07, 0, 0, CHK_ALLOC) == 0)
f01147e7:	8b 55 c8             	mov    -0x38(%ebp),%edx
f01147ea:	89 d0                	mov    %edx,%eax
f01147ec:	01 c0                	add    %eax,%eax
f01147ee:	01 d0                	add    %edx,%eax
f01147f0:	c1 e0 02             	shl    $0x2,%eax
f01147f3:	83 ec 08             	sub    $0x8,%esp
f01147f6:	6a 03                	push   $0x3
f01147f8:	6a 00                	push   $0x0
f01147fa:	6a 00                	push   $0x0
f01147fc:	68 07 0e 00 00       	push   $0xe07
f0114801:	68 05 0e 00 00       	push   $0xe05
f0114806:	6a 01                	push   $0x1
f0114808:	50                   	push   %eax
f0114809:	68 00 f0 3f 40       	push   $0x403ff000
f011480e:	6a 00                	push   $0x0
f0114810:	ff 75 d0             	pushl  -0x30(%ebp)
f0114813:	e8 b5 18 00 00       	call   f01160cd <CCP>
f0114818:	83 c4 30             	add    $0x30,%esp
f011481b:	85 c0                	test   %eax,%eax
f011481d:	75 25                	jne    f0114844 <test_allocate_chunk+0x84d>
		{
			warn("[EVAL] allocate_chunk: Failed (problem in permissions and/or references\n");
f011481f:	83 ec 04             	sub    $0x4,%esp
f0114822:	68 c8 a5 13 f0       	push   $0xf013a5c8
f0114827:	68 79 05 00 00       	push   $0x579
f011482c:	68 5e 8c 13 f0       	push   $0xf0138c5e
f0114831:	e8 dd bb fe ff       	call   f0100413 <_warn>
f0114836:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0114839:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
			chk_cnt = 0 ;
f011483d:	c7 45 94 00 00 00 00 	movl   $0x0,-0x6c(%ebp)
		}
		if (correct) eval += 5 ;
f0114844:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0114848:	74 04                	je     f011484e <test_allocate_chunk+0x857>
f011484a:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f011484e:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

	}
	cprintf("\nCASE V: END\n") ;
f0114852:	83 ec 0c             	sub    $0xc,%esp
f0114855:	68 9f a7 13 f0       	push   $0xf013a79f
f011485a:	e8 af c4 fe ff       	call   f0100d0e <cprintf>
f011485f:	83 c4 10             	add    $0x10,%esp

	cprintf("[EVAL] allocate_chunk: FINISHED. Evaluation = %d\n", eval);
f0114862:	83 ec 08             	sub    $0x8,%esp
f0114865:	ff 75 e4             	pushl  -0x1c(%ebp)
f0114868:	68 b0 a7 13 f0       	push   $0xf013a7b0
f011486d:	e8 9c c4 fe ff       	call   f0100d0e <cprintf>
f0114872:	83 c4 10             	add    $0x10,%esp
	if(eval == 100)
f0114875:	83 7d e4 64          	cmpl   $0x64,-0x1c(%ebp)
f0114879:	75 10                	jne    f011488b <test_allocate_chunk+0x894>
		cprintf("Congratulations!! test allocate_chunk completed successfully.\n");
f011487b:	83 ec 0c             	sub    $0xc,%esp
f011487e:	68 e4 a7 13 f0       	push   $0xf013a7e4
f0114883:	e8 86 c4 fe ff       	call   f0100d0e <cprintf>
f0114888:	83 c4 10             	add    $0x10,%esp

	//return back to the kernel directory
	lcr3(phys_page_directory) ;
f011488b:	a1 6c 26 78 f0       	mov    0xf078266c,%eax
f0114890:	89 45 cc             	mov    %eax,-0x34(%ebp)
f0114893:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0114896:	0f 22 d8             	mov    %eax,%cr3

	return 0;
f0114899:	b8 00 00 00 00       	mov    $0x0,%eax
}
f011489e:	8d 65 f4             	lea    -0xc(%ebp),%esp
f01148a1:	5b                   	pop    %ebx
f01148a2:	5e                   	pop    %esi
f01148a3:	5f                   	pop    %edi
f01148a4:	5d                   	pop    %ebp
f01148a5:	c3                   	ret    

f01148a6 <test_calculate_required_frames>:

//======================================
// 5) [+]TEST CALCULATE REQUIRED FRAMES:
//======================================
int test_calculate_required_frames()
{
f01148a6:	55                   	push   %ebp
f01148a7:	89 e5                	mov    %esp,%ebp
f01148a9:	57                   	push   %edi
f01148aa:	56                   	push   %esi
f01148ab:	53                   	push   %ebx
f01148ac:	81 ec fc 01 00 00    	sub    $0x1fc,%esp
	//Create a Temp. User Process
	char prog_name[50] = "fos_helloWorld";
f01148b2:	8d 45 8e             	lea    -0x72(%ebp),%eax
f01148b5:	bb f8 96 13 f0       	mov    $0xf01396f8,%ebx
f01148ba:	ba 0f 00 00 00       	mov    $0xf,%edx
f01148bf:	89 c7                	mov    %eax,%edi
f01148c1:	89 de                	mov    %ebx,%esi
f01148c3:	89 d1                	mov    %edx,%ecx
f01148c5:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f01148c7:	8d 55 9d             	lea    -0x63(%ebp),%edx
f01148ca:	b9 23 00 00 00       	mov    $0x23,%ecx
f01148cf:	b0 00                	mov    $0x0,%al
f01148d1:	89 d7                	mov    %edx,%edi
f01148d3:	f3 aa                	rep stos %al,%es:(%edi)
	struct Env* env = env_create(prog_name, 20, 10, 0);
f01148d5:	6a 00                	push   $0x0
f01148d7:	6a 0a                	push   $0xa
f01148d9:	6a 14                	push   $0x14
f01148db:	8d 45 8e             	lea    -0x72(%ebp),%eax
f01148de:	50                   	push   %eax
f01148df:	e8 7f 45 ff ff       	call   f0108e63 <env_create>
f01148e4:	83 c4 10             	add    $0x10,%esp
f01148e7:	89 45 dc             	mov    %eax,-0x24(%ebp)
	uint32 *proc_directory = env->env_page_directory ;
f01148ea:	8b 45 dc             	mov    -0x24(%ebp),%eax
f01148ed:	8b 40 5c             	mov    0x5c(%eax),%eax
f01148f0:	89 45 d8             	mov    %eax,-0x28(%ebp)
	lcr3(env->env_cr3) ;
f01148f3:	8b 45 dc             	mov    -0x24(%ebp),%eax
f01148f6:	8b 40 60             	mov    0x60(%eax),%eax
f01148f9:	89 45 c0             	mov    %eax,-0x40(%ebp)
f01148fc:	8b 45 c0             	mov    -0x40(%ebp),%eax
f01148ff:	0f 22 d8             	mov    %eax,%cr3
	char aup[20] = "aup " ;
f0114902:	c7 85 7a ff ff ff 61 	movl   $0x20707561,-0x86(%ebp)
f0114909:	75 70 20 
f011490c:	c7 85 7e ff ff ff 00 	movl   $0x0,-0x82(%ebp)
f0114913:	00 00 00 
f0114916:	8d 55 82             	lea    -0x7e(%ebp),%edx
f0114919:	b9 03 00 00 00       	mov    $0x3,%ecx
f011491e:	b8 00 00 00 00       	mov    $0x0,%eax
f0114923:	89 d7                	mov    %edx,%edi
f0114925:	f3 ab                	rep stos %eax,%es:(%edi)
	char env_id[20] ; ltostr(env->env_id, env_id) ;
f0114927:	8b 45 dc             	mov    -0x24(%ebp),%eax
f011492a:	8b 40 4c             	mov    0x4c(%eax),%eax
f011492d:	83 ec 08             	sub    $0x8,%esp
f0114930:	8d 95 66 ff ff ff    	lea    -0x9a(%ebp),%edx
f0114936:	52                   	push   %edx
f0114937:	50                   	push   %eax
f0114938:	e8 5b cd 01 00       	call   f0131698 <ltostr>
f011493d:	83 c4 10             	add    $0x10,%esp
	char aup_cmd[50];
	strcconcat(aup, env_id, aup_cmd);
f0114940:	83 ec 04             	sub    $0x4,%esp
f0114943:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f0114949:	50                   	push   %eax
f011494a:	8d 85 66 ff ff ff    	lea    -0x9a(%ebp),%eax
f0114950:	50                   	push   %eax
f0114951:	8d 85 7a ff ff ff    	lea    -0x86(%ebp),%eax
f0114957:	50                   	push   %eax
f0114958:	e8 33 ce 01 00       	call   f0131790 <strcconcat>
f011495d:	83 c4 10             	add    $0x10,%esp
	//===================================================

	char *ptr1, *ptr2, *ptr3, *ptr4, *ptr5, *ptr6, *ptr7, *ptr8;
	char tptr[10] ;
	int kilo = 1024 ;
f0114960:	c7 45 d0 00 04 00 00 	movl   $0x400,-0x30(%ebp)
	int mega = 1024*1024 ;
f0114967:	c7 45 cc 00 00 10 00 	movl   $0x100000,-0x34(%ebp)
	uint32 eval = 0;
f011496e:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
	uint32 res =0;
f0114975:	c7 45 c8 00 00 00 00 	movl   $0x0,-0x38(%ebp)
	uint8 correct = 1;
f011497c:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	uint32 expected;
	uint32 numOfFreeFramesBefore, numOfFreeFramesAfter;

	ClearUserSpace(proc_directory);
f0114980:	83 ec 0c             	sub    $0xc,%esp
f0114983:	ff 75 d8             	pushl  -0x28(%ebp)
f0114986:	e8 0e 17 00 00       	call   f0116099 <ClearUserSpace>
f011498b:	83 c4 10             	add    $0x10,%esp

	/*================================================*/
	/*PART I: ALL pages and tables are not exist 50%  */
	/*================================================*/
	cprintf("\nCASE I: ALL pages and tables are not exist [50%]\n") ;
f011498e:	83 ec 0c             	sub    $0xc,%esp
f0114991:	68 24 a8 13 f0       	push   $0xf013a824
f0114996:	e8 73 c3 fe ff       	call   f0100d0e <cprintf>
f011499b:	83 c4 10             	add    $0x10,%esp
	{
		//Test1
		res = calculate_required_frames(proc_directory, 0x0, 8*kilo);
f011499e:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01149a1:	c1 e0 03             	shl    $0x3,%eax
f01149a4:	83 ec 04             	sub    $0x4,%esp
f01149a7:	50                   	push   %eax
f01149a8:	6a 00                	push   $0x0
f01149aa:	ff 75 d8             	pushl  -0x28(%ebp)
f01149ad:	e8 8e 43 ff ff       	call   f0108d40 <calculate_required_frames>
f01149b2:	83 c4 10             	add    $0x10,%esp
f01149b5:	89 45 c8             	mov    %eax,-0x38(%ebp)
		if (res != 3)
f01149b8:	83 7d c8 03          	cmpl   $0x3,-0x38(%ebp)
f01149bc:	74 23                	je     f01149e1 <test_calculate_required_frames+0x13b>
		{
			warn("[EVAL] calculate_required_frames: Failed (count is not correct). res=%d, expected=%d\n", res, 3);
f01149be:	83 ec 0c             	sub    $0xc,%esp
f01149c1:	6a 03                	push   $0x3
f01149c3:	ff 75 c8             	pushl  -0x38(%ebp)
f01149c6:	68 58 a8 13 f0       	push   $0xf013a858
f01149cb:	68 b2 05 00 00       	push   $0x5b2
f01149d0:	68 5e 8c 13 f0       	push   $0xf0138c5e
f01149d5:	e8 39 ba fe ff       	call   f0100413 <_warn>
f01149da:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f01149dd:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f01149e1:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f01149e5:	74 04                	je     f01149eb <test_calculate_required_frames+0x145>
f01149e7:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f01149eb:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		//Test2
		res = calculate_required_frames(proc_directory, 0x0, 4*mega);
f01149ef:	8b 45 cc             	mov    -0x34(%ebp),%eax
f01149f2:	c1 e0 02             	shl    $0x2,%eax
f01149f5:	83 ec 04             	sub    $0x4,%esp
f01149f8:	50                   	push   %eax
f01149f9:	6a 00                	push   $0x0
f01149fb:	ff 75 d8             	pushl  -0x28(%ebp)
f01149fe:	e8 3d 43 ff ff       	call   f0108d40 <calculate_required_frames>
f0114a03:	83 c4 10             	add    $0x10,%esp
f0114a06:	89 45 c8             	mov    %eax,-0x38(%ebp)
		if (res != 1025)
f0114a09:	81 7d c8 01 04 00 00 	cmpl   $0x401,-0x38(%ebp)
f0114a10:	74 26                	je     f0114a38 <test_calculate_required_frames+0x192>
		{
			warn("[EVAL] calculate_required_frames: Failed (count is not correct). res=%d, expected=%d\n", res, 1025);
f0114a12:	83 ec 0c             	sub    $0xc,%esp
f0114a15:	68 01 04 00 00       	push   $0x401
f0114a1a:	ff 75 c8             	pushl  -0x38(%ebp)
f0114a1d:	68 58 a8 13 f0       	push   $0xf013a858
f0114a22:	68 bc 05 00 00       	push   $0x5bc
f0114a27:	68 5e 8c 13 f0       	push   $0xf0138c5e
f0114a2c:	e8 e2 b9 fe ff       	call   f0100413 <_warn>
f0114a31:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0114a34:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0114a38:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0114a3c:	74 04                	je     f0114a42 <test_calculate_required_frames+0x19c>
f0114a3e:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0114a42:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		//Test3
		res = calculate_required_frames(proc_directory, 0x0, 1024*mega);
f0114a46:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0114a49:	c1 e0 0a             	shl    $0xa,%eax
f0114a4c:	83 ec 04             	sub    $0x4,%esp
f0114a4f:	50                   	push   %eax
f0114a50:	6a 00                	push   $0x0
f0114a52:	ff 75 d8             	pushl  -0x28(%ebp)
f0114a55:	e8 e6 42 ff ff       	call   f0108d40 <calculate_required_frames>
f0114a5a:	83 c4 10             	add    $0x10,%esp
f0114a5d:	89 45 c8             	mov    %eax,-0x38(%ebp)
		if (res != ((1024*mega)/(4*mega) + (1024*mega)/(4*kilo)))
f0114a60:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0114a63:	c1 e0 0a             	shl    $0xa,%eax
f0114a66:	8b 55 cc             	mov    -0x34(%ebp),%edx
f0114a69:	8d 1c 95 00 00 00 00 	lea    0x0(,%edx,4),%ebx
f0114a70:	99                   	cltd   
f0114a71:	f7 fb                	idiv   %ebx
f0114a73:	89 c1                	mov    %eax,%ecx
f0114a75:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0114a78:	c1 e0 0a             	shl    $0xa,%eax
f0114a7b:	8b 55 d0             	mov    -0x30(%ebp),%edx
f0114a7e:	8d 34 95 00 00 00 00 	lea    0x0(,%edx,4),%esi
f0114a85:	99                   	cltd   
f0114a86:	f7 fe                	idiv   %esi
f0114a88:	01 c8                	add    %ecx,%eax
f0114a8a:	3b 45 c8             	cmp    -0x38(%ebp),%eax
f0114a8d:	74 4c                	je     f0114adb <test_calculate_required_frames+0x235>
		{
			warn("[EVAL] calculate_required_frames: Failed (count is not correct). res=%d, expected=%d\n", res, ((1024*mega)/(4*mega) + (1024*mega)/(4*kilo)));
f0114a8f:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0114a92:	c1 e0 0a             	shl    $0xa,%eax
f0114a95:	8b 55 cc             	mov    -0x34(%ebp),%edx
f0114a98:	8d 1c 95 00 00 00 00 	lea    0x0(,%edx,4),%ebx
f0114a9f:	99                   	cltd   
f0114aa0:	f7 fb                	idiv   %ebx
f0114aa2:	89 c1                	mov    %eax,%ecx
f0114aa4:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0114aa7:	c1 e0 0a             	shl    $0xa,%eax
f0114aaa:	8b 55 d0             	mov    -0x30(%ebp),%edx
f0114aad:	8d 34 95 00 00 00 00 	lea    0x0(,%edx,4),%esi
f0114ab4:	99                   	cltd   
f0114ab5:	f7 fe                	idiv   %esi
f0114ab7:	01 c8                	add    %ecx,%eax
f0114ab9:	83 ec 0c             	sub    $0xc,%esp
f0114abc:	50                   	push   %eax
f0114abd:	ff 75 c8             	pushl  -0x38(%ebp)
f0114ac0:	68 58 a8 13 f0       	push   $0xf013a858
f0114ac5:	68 c6 05 00 00       	push   $0x5c6
f0114aca:	68 5e 8c 13 f0       	push   $0xf0138c5e
f0114acf:	e8 3f b9 fe ff       	call   f0100413 <_warn>
f0114ad4:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0114ad7:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0114adb:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0114adf:	74 04                	je     f0114ae5 <test_calculate_required_frames+0x23f>
f0114ae1:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0114ae5:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	}

	{
		//Test4
		res = calculate_required_frames(proc_directory, 0x1000, 6*kilo);
f0114ae9:	8b 55 d0             	mov    -0x30(%ebp),%edx
f0114aec:	89 d0                	mov    %edx,%eax
f0114aee:	01 c0                	add    %eax,%eax
f0114af0:	01 d0                	add    %edx,%eax
f0114af2:	01 c0                	add    %eax,%eax
f0114af4:	83 ec 04             	sub    $0x4,%esp
f0114af7:	50                   	push   %eax
f0114af8:	68 00 10 00 00       	push   $0x1000
f0114afd:	ff 75 d8             	pushl  -0x28(%ebp)
f0114b00:	e8 3b 42 ff ff       	call   f0108d40 <calculate_required_frames>
f0114b05:	83 c4 10             	add    $0x10,%esp
f0114b08:	89 45 c8             	mov    %eax,-0x38(%ebp)
		if (res != 3)
f0114b0b:	83 7d c8 03          	cmpl   $0x3,-0x38(%ebp)
f0114b0f:	74 23                	je     f0114b34 <test_calculate_required_frames+0x28e>
		{
			warn("[EVAL] calculate_required_frames: Failed (count is not correct). res=%d, expected=%d\n", res, 3);
f0114b11:	83 ec 0c             	sub    $0xc,%esp
f0114b14:	6a 03                	push   $0x3
f0114b16:	ff 75 c8             	pushl  -0x38(%ebp)
f0114b19:	68 58 a8 13 f0       	push   $0xf013a858
f0114b1e:	68 d2 05 00 00       	push   $0x5d2
f0114b23:	68 5e 8c 13 f0       	push   $0xf0138c5e
f0114b28:	e8 e6 b8 fe ff       	call   f0100413 <_warn>
f0114b2d:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0114b30:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0114b34:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0114b38:	74 04                	je     f0114b3e <test_calculate_required_frames+0x298>
f0114b3a:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0114b3e:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		//Test5
		res = calculate_required_frames(proc_directory, 0x1800, 3*kilo);
f0114b42:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0114b45:	89 c2                	mov    %eax,%edx
f0114b47:	01 d2                	add    %edx,%edx
f0114b49:	01 d0                	add    %edx,%eax
f0114b4b:	83 ec 04             	sub    $0x4,%esp
f0114b4e:	50                   	push   %eax
f0114b4f:	68 00 18 00 00       	push   $0x1800
f0114b54:	ff 75 d8             	pushl  -0x28(%ebp)
f0114b57:	e8 e4 41 ff ff       	call   f0108d40 <calculate_required_frames>
f0114b5c:	83 c4 10             	add    $0x10,%esp
f0114b5f:	89 45 c8             	mov    %eax,-0x38(%ebp)
		if (res != 3)
f0114b62:	83 7d c8 03          	cmpl   $0x3,-0x38(%ebp)
f0114b66:	74 23                	je     f0114b8b <test_calculate_required_frames+0x2e5>
		{
			warn("[EVAL] calculate_required_frames: Failed (count is not correct). res=%d, expected=%d\n", res, 3);
f0114b68:	83 ec 0c             	sub    $0xc,%esp
f0114b6b:	6a 03                	push   $0x3
f0114b6d:	ff 75 c8             	pushl  -0x38(%ebp)
f0114b70:	68 58 a8 13 f0       	push   $0xf013a858
f0114b75:	68 dc 05 00 00       	push   $0x5dc
f0114b7a:	68 5e 8c 13 f0       	push   $0xf0138c5e
f0114b7f:	e8 8f b8 fe ff       	call   f0100413 <_warn>
f0114b84:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0114b87:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0114b8b:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0114b8f:	74 04                	je     f0114b95 <test_calculate_required_frames+0x2ef>
f0114b91:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0114b95:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		//Test6
		res = calculate_required_frames(proc_directory, 0x400000, 10*mega);
f0114b99:	8b 55 cc             	mov    -0x34(%ebp),%edx
f0114b9c:	89 d0                	mov    %edx,%eax
f0114b9e:	c1 e0 02             	shl    $0x2,%eax
f0114ba1:	01 d0                	add    %edx,%eax
f0114ba3:	01 c0                	add    %eax,%eax
f0114ba5:	83 ec 04             	sub    $0x4,%esp
f0114ba8:	50                   	push   %eax
f0114ba9:	68 00 00 40 00       	push   $0x400000
f0114bae:	ff 75 d8             	pushl  -0x28(%ebp)
f0114bb1:	e8 8a 41 ff ff       	call   f0108d40 <calculate_required_frames>
f0114bb6:	83 c4 10             	add    $0x10,%esp
f0114bb9:	89 45 c8             	mov    %eax,-0x38(%ebp)
		if (res != 2563)
f0114bbc:	81 7d c8 03 0a 00 00 	cmpl   $0xa03,-0x38(%ebp)
f0114bc3:	74 26                	je     f0114beb <test_calculate_required_frames+0x345>
		{
			warn("[EVAL] calculate_required_frames: Failed (count is not correct). res=%d, expected=%d\n", res, 2563);
f0114bc5:	83 ec 0c             	sub    $0xc,%esp
f0114bc8:	68 03 0a 00 00       	push   $0xa03
f0114bcd:	ff 75 c8             	pushl  -0x38(%ebp)
f0114bd0:	68 58 a8 13 f0       	push   $0xf013a858
f0114bd5:	68 e6 05 00 00       	push   $0x5e6
f0114bda:	68 5e 8c 13 f0       	push   $0xf0138c5e
f0114bdf:	e8 2f b8 fe ff       	call   f0100413 <_warn>
f0114be4:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0114be7:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0114beb:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0114bef:	74 04                	je     f0114bf5 <test_calculate_required_frames+0x34f>
f0114bf1:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0114bf5:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	}

	{
		//Test7
		res = calculate_required_frames(proc_directory, 0x700000, 2*mega);
f0114bf9:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0114bfc:	01 c0                	add    %eax,%eax
f0114bfe:	83 ec 04             	sub    $0x4,%esp
f0114c01:	50                   	push   %eax
f0114c02:	68 00 00 70 00       	push   $0x700000
f0114c07:	ff 75 d8             	pushl  -0x28(%ebp)
f0114c0a:	e8 31 41 ff ff       	call   f0108d40 <calculate_required_frames>
f0114c0f:	83 c4 10             	add    $0x10,%esp
f0114c12:	89 45 c8             	mov    %eax,-0x38(%ebp)
		if (res != 514)
f0114c15:	81 7d c8 02 02 00 00 	cmpl   $0x202,-0x38(%ebp)
f0114c1c:	74 26                	je     f0114c44 <test_calculate_required_frames+0x39e>
		{
			warn("[EVAL] calculate_required_frames: Failed (count is not correct). res=%d, expected=%d\n", res, 514);
f0114c1e:	83 ec 0c             	sub    $0xc,%esp
f0114c21:	68 02 02 00 00       	push   $0x202
f0114c26:	ff 75 c8             	pushl  -0x38(%ebp)
f0114c29:	68 58 a8 13 f0       	push   $0xf013a858
f0114c2e:	68 f2 05 00 00       	push   $0x5f2
f0114c33:	68 5e 8c 13 f0       	push   $0xf0138c5e
f0114c38:	e8 d6 b7 fe ff       	call   f0100413 <_warn>
f0114c3d:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0114c40:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 10 ;
f0114c44:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0114c48:	74 04                	je     f0114c4e <test_calculate_required_frames+0x3a8>
f0114c4a:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f0114c4e:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		//Test8
		res = calculate_required_frames(proc_directory, 0x3FFFFF, 1*kilo);
f0114c52:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0114c55:	83 ec 04             	sub    $0x4,%esp
f0114c58:	50                   	push   %eax
f0114c59:	68 ff ff 3f 00       	push   $0x3fffff
f0114c5e:	ff 75 d8             	pushl  -0x28(%ebp)
f0114c61:	e8 da 40 ff ff       	call   f0108d40 <calculate_required_frames>
f0114c66:	83 c4 10             	add    $0x10,%esp
f0114c69:	89 45 c8             	mov    %eax,-0x38(%ebp)
		if (res != 4)
f0114c6c:	83 7d c8 04          	cmpl   $0x4,-0x38(%ebp)
f0114c70:	74 23                	je     f0114c95 <test_calculate_required_frames+0x3ef>
		{
			warn("[EVAL] calculate_required_frames: Failed (count is not correct). res=%d, expected=%d\n", res, 4);
f0114c72:	83 ec 0c             	sub    $0xc,%esp
f0114c75:	6a 04                	push   $0x4
f0114c77:	ff 75 c8             	pushl  -0x38(%ebp)
f0114c7a:	68 58 a8 13 f0       	push   $0xf013a858
f0114c7f:	68 fc 05 00 00       	push   $0x5fc
f0114c84:	68 5e 8c 13 f0       	push   $0xf0138c5e
f0114c89:	e8 85 b7 fe ff       	call   f0100413 <_warn>
f0114c8e:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0114c91:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 10 ;
f0114c95:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0114c99:	74 04                	je     f0114c9f <test_calculate_required_frames+0x3f9>
f0114c9b:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f0114c9f:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	}
	cprintf("\nCASE I: END\n") ;
f0114ca3:	83 ec 0c             	sub    $0xc,%esp
f0114ca6:	68 a9 a3 13 f0       	push   $0xf013a3a9
f0114cab:	e8 5e c0 fe ff       	call   f0100d0e <cprintf>
f0114cb0:	83 c4 10             	add    $0x10,%esp

	/*==================================================*/
	/*PART II: SOME pages and/or tables are exist [50%] */
	/*==================================================*/
	cprintf("\nCASE II: SOME pages and/or tables are exist [50%]\n") ;
f0114cb3:	83 ec 0c             	sub    $0xc,%esp
f0114cb6:	68 b0 a8 13 f0       	push   $0xf013a8b0
f0114cbb:	e8 4e c0 fe ff       	call   f0100d0e <cprintf>
f0114cc0:	83 c4 10             	add    $0x10,%esp
	{
		//Test1
		/*allocate page*/char c1[100] ;strcconcat(aup_cmd, " 0x0", c1); execute_command(c1);
f0114cc3:	83 ec 04             	sub    $0x4,%esp
f0114cc6:	8d 85 fe fd ff ff    	lea    -0x202(%ebp),%eax
f0114ccc:	50                   	push   %eax
f0114ccd:	68 62 97 13 f0       	push   $0xf0139762
f0114cd2:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f0114cd8:	50                   	push   %eax
f0114cd9:	e8 b2 ca 01 00       	call   f0131790 <strcconcat>
f0114cde:	83 c4 10             	add    $0x10,%esp
f0114ce1:	83 ec 0c             	sub    $0xc,%esp
f0114ce4:	8d 85 fe fd ff ff    	lea    -0x202(%ebp),%eax
f0114cea:	50                   	push   %eax
f0114ceb:	e8 80 c0 fe ff       	call   f0100d70 <execute_command>
f0114cf0:	83 c4 10             	add    $0x10,%esp

		res = calculate_required_frames(proc_directory, 0x0, 8*kilo);
f0114cf3:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0114cf6:	c1 e0 03             	shl    $0x3,%eax
f0114cf9:	83 ec 04             	sub    $0x4,%esp
f0114cfc:	50                   	push   %eax
f0114cfd:	6a 00                	push   $0x0
f0114cff:	ff 75 d8             	pushl  -0x28(%ebp)
f0114d02:	e8 39 40 ff ff       	call   f0108d40 <calculate_required_frames>
f0114d07:	83 c4 10             	add    $0x10,%esp
f0114d0a:	89 45 c8             	mov    %eax,-0x38(%ebp)
		expected = 1 ;
f0114d0d:	c7 45 c4 01 00 00 00 	movl   $0x1,-0x3c(%ebp)
		if (res != expected)
f0114d14:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0114d17:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f0114d1a:	74 24                	je     f0114d40 <test_calculate_required_frames+0x49a>
		{
			warn("[EVAL] calculate_required_frames: Failed (count is not correct). res=%d, expected=%d\n", res, expected);
f0114d1c:	83 ec 0c             	sub    $0xc,%esp
f0114d1f:	ff 75 c4             	pushl  -0x3c(%ebp)
f0114d22:	ff 75 c8             	pushl  -0x38(%ebp)
f0114d25:	68 58 a8 13 f0       	push   $0xf013a858
f0114d2a:	68 10 06 00 00       	push   $0x610
f0114d2f:	68 5e 8c 13 f0       	push   $0xf0138c5e
f0114d34:	e8 da b6 fe ff       	call   f0100413 <_warn>
f0114d39:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0114d3c:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0114d40:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0114d44:	74 04                	je     f0114d4a <test_calculate_required_frames+0x4a4>
f0114d46:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0114d4a:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		/*allocate page*/char c2[100] ;strcconcat(aup_cmd, " 0x100000", c2); execute_command(c2);
f0114d4e:	83 ec 04             	sub    $0x4,%esp
f0114d51:	8d 85 62 fe ff ff    	lea    -0x19e(%ebp),%eax
f0114d57:	50                   	push   %eax
f0114d58:	68 6f 97 13 f0       	push   $0xf013976f
f0114d5d:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f0114d63:	50                   	push   %eax
f0114d64:	e8 27 ca 01 00       	call   f0131790 <strcconcat>
f0114d69:	83 c4 10             	add    $0x10,%esp
f0114d6c:	83 ec 0c             	sub    $0xc,%esp
f0114d6f:	8d 85 62 fe ff ff    	lea    -0x19e(%ebp),%eax
f0114d75:	50                   	push   %eax
f0114d76:	e8 f5 bf fe ff       	call   f0100d70 <execute_command>
f0114d7b:	83 c4 10             	add    $0x10,%esp
		/*allocate page*/char c3[100] ;strcconcat(aup_cmd, " 0x10000000", c3); execute_command(c3);
f0114d7e:	83 ec 04             	sub    $0x4,%esp
f0114d81:	8d 85 c6 fe ff ff    	lea    -0x13a(%ebp),%eax
f0114d87:	50                   	push   %eax
f0114d88:	68 e4 a8 13 f0       	push   $0xf013a8e4
f0114d8d:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f0114d93:	50                   	push   %eax
f0114d94:	e8 f7 c9 01 00       	call   f0131790 <strcconcat>
f0114d99:	83 c4 10             	add    $0x10,%esp
f0114d9c:	83 ec 0c             	sub    $0xc,%esp
f0114d9f:	8d 85 c6 fe ff ff    	lea    -0x13a(%ebp),%eax
f0114da5:	50                   	push   %eax
f0114da6:	e8 c5 bf fe ff       	call   f0100d70 <execute_command>
f0114dab:	83 c4 10             	add    $0x10,%esp

		//Test2
		res = calculate_required_frames(proc_directory, 0x0, 8*mega);
f0114dae:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0114db1:	c1 e0 03             	shl    $0x3,%eax
f0114db4:	83 ec 04             	sub    $0x4,%esp
f0114db7:	50                   	push   %eax
f0114db8:	6a 00                	push   $0x0
f0114dba:	ff 75 d8             	pushl  -0x28(%ebp)
f0114dbd:	e8 7e 3f ff ff       	call   f0108d40 <calculate_required_frames>
f0114dc2:	83 c4 10             	add    $0x10,%esp
f0114dc5:	89 45 c8             	mov    %eax,-0x38(%ebp)
		expected = 2047;
f0114dc8:	c7 45 c4 ff 07 00 00 	movl   $0x7ff,-0x3c(%ebp)
		if (res != expected)
f0114dcf:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0114dd2:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f0114dd5:	74 24                	je     f0114dfb <test_calculate_required_frames+0x555>
		{
			warn("[EVAL] calculate_required_frames: Failed (count is not correct). res=%d, expected=%d\n", res, expected);
f0114dd7:	83 ec 0c             	sub    $0xc,%esp
f0114dda:	ff 75 c4             	pushl  -0x3c(%ebp)
f0114ddd:	ff 75 c8             	pushl  -0x38(%ebp)
f0114de0:	68 58 a8 13 f0       	push   $0xf013a858
f0114de5:	68 1e 06 00 00       	push   $0x61e
f0114dea:	68 5e 8c 13 f0       	push   $0xf0138c5e
f0114def:	e8 1f b6 fe ff       	call   f0100413 <_warn>
f0114df4:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0114df7:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0114dfb:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0114dff:	74 04                	je     f0114e05 <test_calculate_required_frames+0x55f>
f0114e01:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0114e05:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		//Test3
		res = calculate_required_frames(proc_directory, 0x0, 1024*mega);
f0114e09:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0114e0c:	c1 e0 0a             	shl    $0xa,%eax
f0114e0f:	83 ec 04             	sub    $0x4,%esp
f0114e12:	50                   	push   %eax
f0114e13:	6a 00                	push   $0x0
f0114e15:	ff 75 d8             	pushl  -0x28(%ebp)
f0114e18:	e8 23 3f ff ff       	call   f0108d40 <calculate_required_frames>
f0114e1d:	83 c4 10             	add    $0x10,%esp
f0114e20:	89 45 c8             	mov    %eax,-0x38(%ebp)
		expected = ((1024*mega)/(4*mega) + (1024*mega)/(4*kilo)) - 2 - 1 - 2;
f0114e23:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0114e26:	c1 e0 0a             	shl    $0xa,%eax
f0114e29:	8b 55 cc             	mov    -0x34(%ebp),%edx
f0114e2c:	8d 1c 95 00 00 00 00 	lea    0x0(,%edx,4),%ebx
f0114e33:	99                   	cltd   
f0114e34:	f7 fb                	idiv   %ebx
f0114e36:	89 c1                	mov    %eax,%ecx
f0114e38:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0114e3b:	c1 e0 0a             	shl    $0xa,%eax
f0114e3e:	8b 55 d0             	mov    -0x30(%ebp),%edx
f0114e41:	8d 34 95 00 00 00 00 	lea    0x0(,%edx,4),%esi
f0114e48:	99                   	cltd   
f0114e49:	f7 fe                	idiv   %esi
f0114e4b:	01 c8                	add    %ecx,%eax
f0114e4d:	83 e8 05             	sub    $0x5,%eax
f0114e50:	89 45 c4             	mov    %eax,-0x3c(%ebp)
		if (res != expected)
f0114e53:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0114e56:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f0114e59:	74 24                	je     f0114e7f <test_calculate_required_frames+0x5d9>
		{
			warn("[EVAL] calculate_required_frames: Failed (count is not correct). res=%d, expected=%d\n", res, expected);
f0114e5b:	83 ec 0c             	sub    $0xc,%esp
f0114e5e:	ff 75 c4             	pushl  -0x3c(%ebp)
f0114e61:	ff 75 c8             	pushl  -0x38(%ebp)
f0114e64:	68 58 a8 13 f0       	push   $0xf013a858
f0114e69:	68 29 06 00 00       	push   $0x629
f0114e6e:	68 5e 8c 13 f0       	push   $0xf0138c5e
f0114e73:	e8 9b b5 fe ff       	call   f0100413 <_warn>
f0114e78:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0114e7b:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 10 ;
f0114e7f:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0114e83:	74 04                	je     f0114e89 <test_calculate_required_frames+0x5e3>
f0114e85:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f0114e89:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	}

	{
		/*allocate page*/char c3[100] ;strcconcat(aup_cmd, " 0x2000", c3); execute_command(c3);
f0114e8d:	83 ec 04             	sub    $0x4,%esp
f0114e90:	8d 85 62 fe ff ff    	lea    -0x19e(%ebp),%eax
f0114e96:	50                   	push   %eax
f0114e97:	68 f0 a8 13 f0       	push   $0xf013a8f0
f0114e9c:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f0114ea2:	50                   	push   %eax
f0114ea3:	e8 e8 c8 01 00       	call   f0131790 <strcconcat>
f0114ea8:	83 c4 10             	add    $0x10,%esp
f0114eab:	83 ec 0c             	sub    $0xc,%esp
f0114eae:	8d 85 62 fe ff ff    	lea    -0x19e(%ebp),%eax
f0114eb4:	50                   	push   %eax
f0114eb5:	e8 b6 be fe ff       	call   f0100d70 <execute_command>
f0114eba:	83 c4 10             	add    $0x10,%esp

		//Test4
		res = calculate_required_frames(proc_directory, 0x1800, 3*kilo);
f0114ebd:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0114ec0:	89 c2                	mov    %eax,%edx
f0114ec2:	01 d2                	add    %edx,%edx
f0114ec4:	01 d0                	add    %edx,%eax
f0114ec6:	83 ec 04             	sub    $0x4,%esp
f0114ec9:	50                   	push   %eax
f0114eca:	68 00 18 00 00       	push   $0x1800
f0114ecf:	ff 75 d8             	pushl  -0x28(%ebp)
f0114ed2:	e8 69 3e ff ff       	call   f0108d40 <calculate_required_frames>
f0114ed7:	83 c4 10             	add    $0x10,%esp
f0114eda:	89 45 c8             	mov    %eax,-0x38(%ebp)
		expected = 1 ;
f0114edd:	c7 45 c4 01 00 00 00 	movl   $0x1,-0x3c(%ebp)
		if (res != expected)
f0114ee4:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0114ee7:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f0114eea:	74 24                	je     f0114f10 <test_calculate_required_frames+0x66a>
		{
			warn("[EVAL] calculate_required_frames: Failed (count is not correct). res=%d, expected=%d\n", res, expected);
f0114eec:	83 ec 0c             	sub    $0xc,%esp
f0114eef:	ff 75 c4             	pushl  -0x3c(%ebp)
f0114ef2:	ff 75 c8             	pushl  -0x38(%ebp)
f0114ef5:	68 58 a8 13 f0       	push   $0xf013a858
f0114efa:	68 38 06 00 00       	push   $0x638
f0114eff:	68 5e 8c 13 f0       	push   $0xf0138c5e
f0114f04:	e8 0a b5 fe ff       	call   f0100413 <_warn>
f0114f09:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0114f0c:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0114f10:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0114f14:	74 04                	je     f0114f1a <test_calculate_required_frames+0x674>
f0114f16:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0114f1a:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		/*allocate page*/char c4[100] ;strcconcat(aup_cmd, " 0x800000", c4); execute_command(c4);
f0114f1e:	83 ec 04             	sub    $0x4,%esp
f0114f21:	8d 85 c6 fe ff ff    	lea    -0x13a(%ebp),%eax
f0114f27:	50                   	push   %eax
f0114f28:	68 c8 99 13 f0       	push   $0xf01399c8
f0114f2d:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f0114f33:	50                   	push   %eax
f0114f34:	e8 57 c8 01 00       	call   f0131790 <strcconcat>
f0114f39:	83 c4 10             	add    $0x10,%esp
f0114f3c:	83 ec 0c             	sub    $0xc,%esp
f0114f3f:	8d 85 c6 fe ff ff    	lea    -0x13a(%ebp),%eax
f0114f45:	50                   	push   %eax
f0114f46:	e8 25 be fe ff       	call   f0100d70 <execute_command>
f0114f4b:	83 c4 10             	add    $0x10,%esp

		//Test5
		res = calculate_required_frames(proc_directory, 0x400000, 10*mega);
f0114f4e:	8b 55 cc             	mov    -0x34(%ebp),%edx
f0114f51:	89 d0                	mov    %edx,%eax
f0114f53:	c1 e0 02             	shl    $0x2,%eax
f0114f56:	01 d0                	add    %edx,%eax
f0114f58:	01 c0                	add    %eax,%eax
f0114f5a:	83 ec 04             	sub    $0x4,%esp
f0114f5d:	50                   	push   %eax
f0114f5e:	68 00 00 40 00       	push   $0x400000
f0114f63:	ff 75 d8             	pushl  -0x28(%ebp)
f0114f66:	e8 d5 3d ff ff       	call   f0108d40 <calculate_required_frames>
f0114f6b:	83 c4 10             	add    $0x10,%esp
f0114f6e:	89 45 c8             	mov    %eax,-0x38(%ebp)
		if (res != 2561)
f0114f71:	81 7d c8 01 0a 00 00 	cmpl   $0xa01,-0x38(%ebp)
f0114f78:	74 26                	je     f0114fa0 <test_calculate_required_frames+0x6fa>
		{
			warn("[EVAL] calculate_required_frames: Failed (count is not correct). res=%d, expected=%d\n", res, 2563);
f0114f7a:	83 ec 0c             	sub    $0xc,%esp
f0114f7d:	68 03 0a 00 00       	push   $0xa03
f0114f82:	ff 75 c8             	pushl  -0x38(%ebp)
f0114f85:	68 58 a8 13 f0       	push   $0xf013a858
f0114f8a:	68 44 06 00 00       	push   $0x644
f0114f8f:	68 5e 8c 13 f0       	push   $0xf0138c5e
f0114f94:	e8 7a b4 fe ff       	call   f0100413 <_warn>
f0114f99:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0114f9c:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0114fa0:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0114fa4:	74 04                	je     f0114faa <test_calculate_required_frames+0x704>
f0114fa6:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0114faa:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	}

	{
		/*allocate page*/char c3[100] ;strcconcat(aup_cmd, " 0x801000", c3); execute_command(c3);
f0114fae:	83 ec 04             	sub    $0x4,%esp
f0114fb1:	8d 85 62 fe ff ff    	lea    -0x19e(%ebp),%eax
f0114fb7:	50                   	push   %eax
f0114fb8:	68 d2 99 13 f0       	push   $0xf01399d2
f0114fbd:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f0114fc3:	50                   	push   %eax
f0114fc4:	e8 c7 c7 01 00       	call   f0131790 <strcconcat>
f0114fc9:	83 c4 10             	add    $0x10,%esp
f0114fcc:	83 ec 0c             	sub    $0xc,%esp
f0114fcf:	8d 85 62 fe ff ff    	lea    -0x19e(%ebp),%eax
f0114fd5:	50                   	push   %eax
f0114fd6:	e8 95 bd fe ff       	call   f0100d70 <execute_command>
f0114fdb:	83 c4 10             	add    $0x10,%esp
		/*allocate page*/char c4[100] ;strcconcat(aup_cmd, " 0x810000", c4); execute_command(c4);
f0114fde:	83 ec 04             	sub    $0x4,%esp
f0114fe1:	8d 85 c6 fe ff ff    	lea    -0x13a(%ebp),%eax
f0114fe7:	50                   	push   %eax
f0114fe8:	68 f8 a8 13 f0       	push   $0xf013a8f8
f0114fed:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f0114ff3:	50                   	push   %eax
f0114ff4:	e8 97 c7 01 00       	call   f0131790 <strcconcat>
f0114ff9:	83 c4 10             	add    $0x10,%esp
f0114ffc:	83 ec 0c             	sub    $0xc,%esp
f0114fff:	8d 85 c6 fe ff ff    	lea    -0x13a(%ebp),%eax
f0115005:	50                   	push   %eax
f0115006:	e8 65 bd fe ff       	call   f0100d70 <execute_command>
f011500b:	83 c4 10             	add    $0x10,%esp

		//Test7
		res = calculate_required_frames(proc_directory, 0x700000, 2*mega);
f011500e:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0115011:	01 c0                	add    %eax,%eax
f0115013:	83 ec 04             	sub    $0x4,%esp
f0115016:	50                   	push   %eax
f0115017:	68 00 00 70 00       	push   $0x700000
f011501c:	ff 75 d8             	pushl  -0x28(%ebp)
f011501f:	e8 1c 3d ff ff       	call   f0108d40 <calculate_required_frames>
f0115024:	83 c4 10             	add    $0x10,%esp
f0115027:	89 45 c8             	mov    %eax,-0x38(%ebp)
		expected = 510 ;
f011502a:	c7 45 c4 fe 01 00 00 	movl   $0x1fe,-0x3c(%ebp)
		if (res != expected)
f0115031:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0115034:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f0115037:	74 24                	je     f011505d <test_calculate_required_frames+0x7b7>
		{
			warn("[EVAL] calculate_required_frames: Failed (count is not correct). res=%d, expected=%d\n", res, expected);
f0115039:	83 ec 0c             	sub    $0xc,%esp
f011503c:	ff 75 c4             	pushl  -0x3c(%ebp)
f011503f:	ff 75 c8             	pushl  -0x38(%ebp)
f0115042:	68 58 a8 13 f0       	push   $0xf013a858
f0115047:	68 54 06 00 00       	push   $0x654
f011504c:	68 5e 8c 13 f0       	push   $0xf0138c5e
f0115051:	e8 bd b3 fe ff       	call   f0100413 <_warn>
f0115056:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0115059:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 10 ;
f011505d:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0115061:	74 04                	je     f0115067 <test_calculate_required_frames+0x7c1>
f0115063:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f0115067:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		//Test8
		res = calculate_required_frames(proc_directory, 0x3FFFFF, 1*kilo);
f011506b:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011506e:	83 ec 04             	sub    $0x4,%esp
f0115071:	50                   	push   %eax
f0115072:	68 ff ff 3f 00       	push   $0x3fffff
f0115077:	ff 75 d8             	pushl  -0x28(%ebp)
f011507a:	e8 c1 3c ff ff       	call   f0108d40 <calculate_required_frames>
f011507f:	83 c4 10             	add    $0x10,%esp
f0115082:	89 45 c8             	mov    %eax,-0x38(%ebp)
		expected = 3 ;
f0115085:	c7 45 c4 03 00 00 00 	movl   $0x3,-0x3c(%ebp)
		if (res != expected)
f011508c:	8b 45 c8             	mov    -0x38(%ebp),%eax
f011508f:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f0115092:	74 24                	je     f01150b8 <test_calculate_required_frames+0x812>
		{
			warn("[EVAL] calculate_required_frames: Failed (count is not correct). res=%d, expected=%d\n", res, expected);
f0115094:	83 ec 0c             	sub    $0xc,%esp
f0115097:	ff 75 c4             	pushl  -0x3c(%ebp)
f011509a:	ff 75 c8             	pushl  -0x38(%ebp)
f011509d:	68 58 a8 13 f0       	push   $0xf013a858
f01150a2:	68 5f 06 00 00       	push   $0x65f
f01150a7:	68 5e 8c 13 f0       	push   $0xf0138c5e
f01150ac:	e8 62 b3 fe ff       	call   f0100413 <_warn>
f01150b1:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f01150b4:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 10 ;
f01150b8:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f01150bc:	74 04                	je     f01150c2 <test_calculate_required_frames+0x81c>
f01150be:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f01150c2:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	}
	cprintf("\nCASE II: END\n") ;
f01150c6:	83 ec 0c             	sub    $0xc,%esp
f01150c9:	68 83 99 13 f0       	push   $0xf0139983
f01150ce:	e8 3b bc fe ff       	call   f0100d0e <cprintf>
f01150d3:	83 c4 10             	add    $0x10,%esp

	cprintf("[EVAL] calculate_required_frames: FINISHED. Evaluation = %d\n", eval);
f01150d6:	83 ec 08             	sub    $0x8,%esp
f01150d9:	ff 75 e4             	pushl  -0x1c(%ebp)
f01150dc:	68 04 a9 13 f0       	push   $0xf013a904
f01150e1:	e8 28 bc fe ff       	call   f0100d0e <cprintf>
f01150e6:	83 c4 10             	add    $0x10,%esp
	if(eval == 100)
f01150e9:	83 7d e4 64          	cmpl   $0x64,-0x1c(%ebp)
f01150ed:	75 10                	jne    f01150ff <test_calculate_required_frames+0x859>
		cprintf("Congratulations!! test calculate_required_frames completed successfully.\n");
f01150ef:	83 ec 0c             	sub    $0xc,%esp
f01150f2:	68 44 a9 13 f0       	push   $0xf013a944
f01150f7:	e8 12 bc fe ff       	call   f0100d0e <cprintf>
f01150fc:	83 c4 10             	add    $0x10,%esp

	//return back to the kernel directory
	lcr3(phys_page_directory) ;
f01150ff:	a1 6c 26 78 f0       	mov    0xf078266c,%eax
f0115104:	89 45 d4             	mov    %eax,-0x2c(%ebp)
f0115107:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f011510a:	0f 22 d8             	mov    %eax,%cr3

	return 0;
f011510d:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0115112:	8d 65 f4             	lea    -0xc(%ebp),%esp
f0115115:	5b                   	pop    %ebx
f0115116:	5e                   	pop    %esi
f0115117:	5f                   	pop    %edi
f0115118:	5d                   	pop    %ebp
f0115119:	c3                   	ret    

f011511a <test_calculate_allocated_space>:

int test_calculate_allocated_space()
{
f011511a:	55                   	push   %ebp
f011511b:	89 e5                	mov    %esp,%ebp
f011511d:	57                   	push   %edi
f011511e:	56                   	push   %esi
f011511f:	53                   	push   %ebx
f0115120:	81 ec 0c 02 00 00    	sub    $0x20c,%esp
	//Create a Temp. User Process
	char prog_name[50] = "fos_helloWorld";
f0115126:	8d 45 8e             	lea    -0x72(%ebp),%eax
f0115129:	bb f8 96 13 f0       	mov    $0xf01396f8,%ebx
f011512e:	ba 0f 00 00 00       	mov    $0xf,%edx
f0115133:	89 c7                	mov    %eax,%edi
f0115135:	89 de                	mov    %ebx,%esi
f0115137:	89 d1                	mov    %edx,%ecx
f0115139:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f011513b:	8d 55 9d             	lea    -0x63(%ebp),%edx
f011513e:	b9 23 00 00 00       	mov    $0x23,%ecx
f0115143:	b0 00                	mov    $0x0,%al
f0115145:	89 d7                	mov    %edx,%edi
f0115147:	f3 aa                	rep stos %al,%es:(%edi)
	struct Env* env = env_create(prog_name, 20, 10, 0);
f0115149:	6a 00                	push   $0x0
f011514b:	6a 0a                	push   $0xa
f011514d:	6a 14                	push   $0x14
f011514f:	8d 45 8e             	lea    -0x72(%ebp),%eax
f0115152:	50                   	push   %eax
f0115153:	e8 0b 3d ff ff       	call   f0108e63 <env_create>
f0115158:	83 c4 10             	add    $0x10,%esp
f011515b:	89 45 dc             	mov    %eax,-0x24(%ebp)
	uint32 *proc_directory = env->env_page_directory ;
f011515e:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0115161:	8b 40 5c             	mov    0x5c(%eax),%eax
f0115164:	89 45 d8             	mov    %eax,-0x28(%ebp)
	lcr3(env->env_cr3) ;
f0115167:	8b 45 dc             	mov    -0x24(%ebp),%eax
f011516a:	8b 40 60             	mov    0x60(%eax),%eax
f011516d:	89 45 c0             	mov    %eax,-0x40(%ebp)
f0115170:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0115173:	0f 22 d8             	mov    %eax,%cr3
	char aup[20] = "aup " ;
f0115176:	c7 85 7a ff ff ff 61 	movl   $0x20707561,-0x86(%ebp)
f011517d:	75 70 20 
f0115180:	c7 85 7e ff ff ff 00 	movl   $0x0,-0x82(%ebp)
f0115187:	00 00 00 
f011518a:	8d 55 82             	lea    -0x7e(%ebp),%edx
f011518d:	b9 03 00 00 00       	mov    $0x3,%ecx
f0115192:	b8 00 00 00 00       	mov    $0x0,%eax
f0115197:	89 d7                	mov    %edx,%edi
f0115199:	f3 ab                	rep stos %eax,%es:(%edi)
	char env_id[20] ; ltostr(env->env_id, env_id) ;
f011519b:	8b 45 dc             	mov    -0x24(%ebp),%eax
f011519e:	8b 40 4c             	mov    0x4c(%eax),%eax
f01151a1:	83 ec 08             	sub    $0x8,%esp
f01151a4:	8d 95 66 ff ff ff    	lea    -0x9a(%ebp),%edx
f01151aa:	52                   	push   %edx
f01151ab:	50                   	push   %eax
f01151ac:	e8 e7 c4 01 00       	call   f0131698 <ltostr>
f01151b1:	83 c4 10             	add    $0x10,%esp
	char aup_cmd[50];
	strcconcat(aup, env_id, aup_cmd);
f01151b4:	83 ec 04             	sub    $0x4,%esp
f01151b7:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f01151bd:	50                   	push   %eax
f01151be:	8d 85 66 ff ff ff    	lea    -0x9a(%ebp),%eax
f01151c4:	50                   	push   %eax
f01151c5:	8d 85 7a ff ff ff    	lea    -0x86(%ebp),%eax
f01151cb:	50                   	push   %eax
f01151cc:	e8 bf c5 01 00       	call   f0131790 <strcconcat>
f01151d1:	83 c4 10             	add    $0x10,%esp
	//===================================================

	char *ptr1, *ptr2, *ptr3, *ptr4, *ptr5, *ptr6, *ptr7, *ptr8;
	char tptr[10] ;
	int kilo = 1024 ;
f01151d4:	c7 45 d0 00 04 00 00 	movl   $0x400,-0x30(%ebp)
	int mega = 1024*1024 ;
f01151db:	c7 45 cc 00 00 10 00 	movl   $0x100000,-0x34(%ebp)
	uint32 eval = 0;
f01151e2:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
	uint8 correct = 1;
f01151e9:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	uint32 expected_num_pages;
	uint32 expected_num_tables;
	uint32 numOfFreeFramesBefore, numOfFreeFramesAfter;
	uint32 num_pages = 0;
f01151ed:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f01151f4:	00 00 00 
	uint32 num_tables = 0;
f01151f7:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f01151fe:	00 00 00 
	ClearUserSpace(proc_directory);
f0115201:	83 ec 0c             	sub    $0xc,%esp
f0115204:	ff 75 d8             	pushl  -0x28(%ebp)
f0115207:	e8 8d 0e 00 00       	call   f0116099 <ClearUserSpace>
f011520c:	83 c4 10             	add    $0x10,%esp

	/*================================================*/
	/*PART I: ALL pages and tables are not exist 50%  */
	/*================================================*/
	cprintf("\nCASE I: ALL pages and tables are not exist [50%]\n") ;
f011520f:	83 ec 0c             	sub    $0xc,%esp
f0115212:	68 24 a8 13 f0       	push   $0xf013a824
f0115217:	e8 f2 ba fe ff       	call   f0100d0e <cprintf>
f011521c:	83 c4 10             	add    $0x10,%esp
	{
		//Test1
		calculate_allocated_space(proc_directory, 0x0, 0x0+8*kilo, &num_tables, &num_pages);
f011521f:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0115222:	c1 e0 03             	shl    $0x3,%eax
f0115225:	89 c2                	mov    %eax,%edx
f0115227:	83 ec 0c             	sub    $0xc,%esp
f011522a:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f0115230:	50                   	push   %eax
f0115231:	8d 85 20 ff ff ff    	lea    -0xe0(%ebp),%eax
f0115237:	50                   	push   %eax
f0115238:	52                   	push   %edx
f0115239:	6a 00                	push   $0x0
f011523b:	ff 75 d8             	pushl  -0x28(%ebp)
f011523e:	e8 08 3a ff ff       	call   f0108c4b <calculate_allocated_space>
f0115243:	83 c4 20             	add    $0x20,%esp
		if (num_tables != 0)
f0115246:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f011524c:	85 c0                	test   %eax,%eax
f011524e:	74 27                	je     f0115277 <test_calculate_allocated_space+0x15d>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Tables count is not correct). res=%d, expected=%d\n", num_tables, 0);
f0115250:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0115256:	83 ec 0c             	sub    $0xc,%esp
f0115259:	6a 00                	push   $0x0
f011525b:	50                   	push   %eax
f011525c:	68 90 a9 13 f0       	push   $0xf013a990
f0115261:	68 94 06 00 00       	push   $0x694
f0115266:	68 5e 8c 13 f0       	push   $0xf0138c5e
f011526b:	e8 a3 b1 fe ff       	call   f0100413 <_warn>
f0115270:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0115273:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (num_pages != 0)
f0115277:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011527d:	85 c0                	test   %eax,%eax
f011527f:	74 27                	je     f01152a8 <test_calculate_allocated_space+0x18e>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Pages count is not correct). res=%d, expected=%d\n", num_pages, 0);
f0115281:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0115287:	83 ec 0c             	sub    $0xc,%esp
f011528a:	6a 00                	push   $0x0
f011528c:	50                   	push   %eax
f011528d:	68 f0 a9 13 f0       	push   $0xf013a9f0
f0115292:	68 99 06 00 00       	push   $0x699
f0115297:	68 5e 8c 13 f0       	push   $0xf0138c5e
f011529c:	e8 72 b1 fe ff       	call   f0100413 <_warn>
f01152a1:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f01152a4:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f01152a8:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f01152ac:	74 04                	je     f01152b2 <test_calculate_allocated_space+0x198>
f01152ae:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f01152b2:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		//Test2
		num_tables = 0;
f01152b6:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f01152bd:	00 00 00 
		num_pages = 0;
f01152c0:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f01152c7:	00 00 00 
		calculate_allocated_space(proc_directory, 0x0, 0x0+4*mega, &num_tables, &num_pages);
f01152ca:	8b 45 cc             	mov    -0x34(%ebp),%eax
f01152cd:	c1 e0 02             	shl    $0x2,%eax
f01152d0:	89 c2                	mov    %eax,%edx
f01152d2:	83 ec 0c             	sub    $0xc,%esp
f01152d5:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f01152db:	50                   	push   %eax
f01152dc:	8d 85 20 ff ff ff    	lea    -0xe0(%ebp),%eax
f01152e2:	50                   	push   %eax
f01152e3:	52                   	push   %edx
f01152e4:	6a 00                	push   $0x0
f01152e6:	ff 75 d8             	pushl  -0x28(%ebp)
f01152e9:	e8 5d 39 ff ff       	call   f0108c4b <calculate_allocated_space>
f01152ee:	83 c4 20             	add    $0x20,%esp
		if (num_tables != 0)
f01152f1:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f01152f7:	85 c0                	test   %eax,%eax
f01152f9:	74 27                	je     f0115322 <test_calculate_allocated_space+0x208>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Tables count is not correct). res=%d, expected=%d\n", num_tables, 0);
f01152fb:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0115301:	83 ec 0c             	sub    $0xc,%esp
f0115304:	6a 00                	push   $0x0
f0115306:	50                   	push   %eax
f0115307:	68 90 a9 13 f0       	push   $0xf013a990
f011530c:	68 a5 06 00 00       	push   $0x6a5
f0115311:	68 5e 8c 13 f0       	push   $0xf0138c5e
f0115316:	e8 f8 b0 fe ff       	call   f0100413 <_warn>
f011531b:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f011531e:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (num_pages != 0)
f0115322:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0115328:	85 c0                	test   %eax,%eax
f011532a:	74 27                	je     f0115353 <test_calculate_allocated_space+0x239>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Pages count is not correct). res=%d, expected=%d\n", num_pages, 0);
f011532c:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0115332:	83 ec 0c             	sub    $0xc,%esp
f0115335:	6a 00                	push   $0x0
f0115337:	50                   	push   %eax
f0115338:	68 f0 a9 13 f0       	push   $0xf013a9f0
f011533d:	68 aa 06 00 00       	push   $0x6aa
f0115342:	68 5e 8c 13 f0       	push   $0xf0138c5e
f0115347:	e8 c7 b0 fe ff       	call   f0100413 <_warn>
f011534c:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f011534f:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0115353:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0115357:	74 04                	je     f011535d <test_calculate_allocated_space+0x243>
f0115359:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f011535d:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		//Test3
		num_tables = 0;
f0115361:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f0115368:	00 00 00 
		num_pages = 0;
f011536b:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f0115372:	00 00 00 
		calculate_allocated_space(proc_directory, 0x0, 0x0+1024*mega, &num_tables, &num_pages);
f0115375:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0115378:	c1 e0 0a             	shl    $0xa,%eax
f011537b:	89 c2                	mov    %eax,%edx
f011537d:	83 ec 0c             	sub    $0xc,%esp
f0115380:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f0115386:	50                   	push   %eax
f0115387:	8d 85 20 ff ff ff    	lea    -0xe0(%ebp),%eax
f011538d:	50                   	push   %eax
f011538e:	52                   	push   %edx
f011538f:	6a 00                	push   $0x0
f0115391:	ff 75 d8             	pushl  -0x28(%ebp)
f0115394:	e8 b2 38 ff ff       	call   f0108c4b <calculate_allocated_space>
f0115399:	83 c4 20             	add    $0x20,%esp
		if (num_tables != 0)
f011539c:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f01153a2:	85 c0                	test   %eax,%eax
f01153a4:	74 27                	je     f01153cd <test_calculate_allocated_space+0x2b3>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Tables count is not correct). res=%d, expected=%d\n", num_tables, 0);
f01153a6:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f01153ac:	83 ec 0c             	sub    $0xc,%esp
f01153af:	6a 00                	push   $0x0
f01153b1:	50                   	push   %eax
f01153b2:	68 90 a9 13 f0       	push   $0xf013a990
f01153b7:	68 b6 06 00 00       	push   $0x6b6
f01153bc:	68 5e 8c 13 f0       	push   $0xf0138c5e
f01153c1:	e8 4d b0 fe ff       	call   f0100413 <_warn>
f01153c6:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f01153c9:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (num_pages != 0)
f01153cd:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f01153d3:	85 c0                	test   %eax,%eax
f01153d5:	74 27                	je     f01153fe <test_calculate_allocated_space+0x2e4>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Pages count is not correct). res=%d, expected=%d\n", num_pages, 0);
f01153d7:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f01153dd:	83 ec 0c             	sub    $0xc,%esp
f01153e0:	6a 00                	push   $0x0
f01153e2:	50                   	push   %eax
f01153e3:	68 f0 a9 13 f0       	push   $0xf013a9f0
f01153e8:	68 bb 06 00 00       	push   $0x6bb
f01153ed:	68 5e 8c 13 f0       	push   $0xf0138c5e
f01153f2:	e8 1c b0 fe ff       	call   f0100413 <_warn>
f01153f7:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f01153fa:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f01153fe:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0115402:	74 04                	je     f0115408 <test_calculate_allocated_space+0x2ee>
f0115404:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0115408:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	}
	{
		//Test4
		num_tables = 0;
f011540c:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f0115413:	00 00 00 
		num_pages = 0;
f0115416:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f011541d:	00 00 00 
		calculate_allocated_space(proc_directory, 0x1000, 0x1000+6*kilo, &num_tables, &num_pages);
f0115420:	8b 55 d0             	mov    -0x30(%ebp),%edx
f0115423:	89 d0                	mov    %edx,%eax
f0115425:	01 c0                	add    %eax,%eax
f0115427:	01 d0                	add    %edx,%eax
f0115429:	01 c0                	add    %eax,%eax
f011542b:	05 00 10 00 00       	add    $0x1000,%eax
f0115430:	89 c2                	mov    %eax,%edx
f0115432:	83 ec 0c             	sub    $0xc,%esp
f0115435:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f011543b:	50                   	push   %eax
f011543c:	8d 85 20 ff ff ff    	lea    -0xe0(%ebp),%eax
f0115442:	50                   	push   %eax
f0115443:	52                   	push   %edx
f0115444:	68 00 10 00 00       	push   $0x1000
f0115449:	ff 75 d8             	pushl  -0x28(%ebp)
f011544c:	e8 fa 37 ff ff       	call   f0108c4b <calculate_allocated_space>
f0115451:	83 c4 20             	add    $0x20,%esp
		if (num_tables != 0)
f0115454:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f011545a:	85 c0                	test   %eax,%eax
f011545c:	74 27                	je     f0115485 <test_calculate_allocated_space+0x36b>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Tables count is not correct). res=%d, expected=%d\n", num_tables, 0);
f011545e:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0115464:	83 ec 0c             	sub    $0xc,%esp
f0115467:	6a 00                	push   $0x0
f0115469:	50                   	push   %eax
f011546a:	68 90 a9 13 f0       	push   $0xf013a990
f011546f:	68 c8 06 00 00       	push   $0x6c8
f0115474:	68 5e 8c 13 f0       	push   $0xf0138c5e
f0115479:	e8 95 af fe ff       	call   f0100413 <_warn>
f011547e:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0115481:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (num_pages != 0)
f0115485:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011548b:	85 c0                	test   %eax,%eax
f011548d:	74 27                	je     f01154b6 <test_calculate_allocated_space+0x39c>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Pages count is not correct). res=%d, expected=%d\n", num_pages, 0);
f011548f:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0115495:	83 ec 0c             	sub    $0xc,%esp
f0115498:	6a 00                	push   $0x0
f011549a:	50                   	push   %eax
f011549b:	68 f0 a9 13 f0       	push   $0xf013a9f0
f01154a0:	68 cd 06 00 00       	push   $0x6cd
f01154a5:	68 5e 8c 13 f0       	push   $0xf0138c5e
f01154aa:	e8 64 af fe ff       	call   f0100413 <_warn>
f01154af:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f01154b2:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f01154b6:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f01154ba:	74 04                	je     f01154c0 <test_calculate_allocated_space+0x3a6>
f01154bc:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f01154c0:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		//Test5
		num_tables = 0;
f01154c4:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f01154cb:	00 00 00 
		num_pages = 0;
f01154ce:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f01154d5:	00 00 00 
		calculate_allocated_space(proc_directory, 0x1800, 0x1800+3*kilo, &num_tables, &num_pages);
f01154d8:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01154db:	89 c2                	mov    %eax,%edx
f01154dd:	01 d2                	add    %edx,%edx
f01154df:	01 d0                	add    %edx,%eax
f01154e1:	05 00 18 00 00       	add    $0x1800,%eax
f01154e6:	89 c2                	mov    %eax,%edx
f01154e8:	83 ec 0c             	sub    $0xc,%esp
f01154eb:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f01154f1:	50                   	push   %eax
f01154f2:	8d 85 20 ff ff ff    	lea    -0xe0(%ebp),%eax
f01154f8:	50                   	push   %eax
f01154f9:	52                   	push   %edx
f01154fa:	68 00 18 00 00       	push   $0x1800
f01154ff:	ff 75 d8             	pushl  -0x28(%ebp)
f0115502:	e8 44 37 ff ff       	call   f0108c4b <calculate_allocated_space>
f0115507:	83 c4 20             	add    $0x20,%esp
		if (num_tables != 0)
f011550a:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0115510:	85 c0                	test   %eax,%eax
f0115512:	74 27                	je     f011553b <test_calculate_allocated_space+0x421>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Tables count is not correct). res=%d, expected=%d\n", num_tables, 0);
f0115514:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f011551a:	83 ec 0c             	sub    $0xc,%esp
f011551d:	6a 00                	push   $0x0
f011551f:	50                   	push   %eax
f0115520:	68 90 a9 13 f0       	push   $0xf013a990
f0115525:	68 d9 06 00 00       	push   $0x6d9
f011552a:	68 5e 8c 13 f0       	push   $0xf0138c5e
f011552f:	e8 df ae fe ff       	call   f0100413 <_warn>
f0115534:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0115537:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (num_pages != 0)
f011553b:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0115541:	85 c0                	test   %eax,%eax
f0115543:	74 27                	je     f011556c <test_calculate_allocated_space+0x452>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Pages count is not correct). res=%d, expected=%d\n", num_pages, 0);
f0115545:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011554b:	83 ec 0c             	sub    $0xc,%esp
f011554e:	6a 00                	push   $0x0
f0115550:	50                   	push   %eax
f0115551:	68 f0 a9 13 f0       	push   $0xf013a9f0
f0115556:	68 de 06 00 00       	push   $0x6de
f011555b:	68 5e 8c 13 f0       	push   $0xf0138c5e
f0115560:	e8 ae ae fe ff       	call   f0100413 <_warn>
f0115565:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0115568:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f011556c:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0115570:	74 04                	je     f0115576 <test_calculate_allocated_space+0x45c>
f0115572:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0115576:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		//Test6
		num_tables = 0;
f011557a:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f0115581:	00 00 00 
		num_pages = 0;
f0115584:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f011558b:	00 00 00 
		calculate_allocated_space(proc_directory, 0x400000, 0x400000+10*mega, &num_tables, &num_pages);
f011558e:	8b 55 cc             	mov    -0x34(%ebp),%edx
f0115591:	89 d0                	mov    %edx,%eax
f0115593:	c1 e0 02             	shl    $0x2,%eax
f0115596:	01 d0                	add    %edx,%eax
f0115598:	01 c0                	add    %eax,%eax
f011559a:	05 00 00 40 00       	add    $0x400000,%eax
f011559f:	89 c2                	mov    %eax,%edx
f01155a1:	83 ec 0c             	sub    $0xc,%esp
f01155a4:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f01155aa:	50                   	push   %eax
f01155ab:	8d 85 20 ff ff ff    	lea    -0xe0(%ebp),%eax
f01155b1:	50                   	push   %eax
f01155b2:	52                   	push   %edx
f01155b3:	68 00 00 40 00       	push   $0x400000
f01155b8:	ff 75 d8             	pushl  -0x28(%ebp)
f01155bb:	e8 8b 36 ff ff       	call   f0108c4b <calculate_allocated_space>
f01155c0:	83 c4 20             	add    $0x20,%esp
		if (num_tables != 0)
f01155c3:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f01155c9:	85 c0                	test   %eax,%eax
f01155cb:	74 27                	je     f01155f4 <test_calculate_allocated_space+0x4da>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Tables count is not correct). res=%d, expected=%d\n", num_tables, 0);
f01155cd:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f01155d3:	83 ec 0c             	sub    $0xc,%esp
f01155d6:	6a 00                	push   $0x0
f01155d8:	50                   	push   %eax
f01155d9:	68 90 a9 13 f0       	push   $0xf013a990
f01155de:	68 ea 06 00 00       	push   $0x6ea
f01155e3:	68 5e 8c 13 f0       	push   $0xf0138c5e
f01155e8:	e8 26 ae fe ff       	call   f0100413 <_warn>
f01155ed:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f01155f0:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (num_pages != 0)
f01155f4:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f01155fa:	85 c0                	test   %eax,%eax
f01155fc:	74 27                	je     f0115625 <test_calculate_allocated_space+0x50b>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Pages count is not correct). res=%d, expected=%d\n", num_pages, 0);
f01155fe:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0115604:	83 ec 0c             	sub    $0xc,%esp
f0115607:	6a 00                	push   $0x0
f0115609:	50                   	push   %eax
f011560a:	68 f0 a9 13 f0       	push   $0xf013a9f0
f011560f:	68 ef 06 00 00       	push   $0x6ef
f0115614:	68 5e 8c 13 f0       	push   $0xf0138c5e
f0115619:	e8 f5 ad fe ff       	call   f0100413 <_warn>
f011561e:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0115621:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0115625:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0115629:	74 04                	je     f011562f <test_calculate_allocated_space+0x515>
f011562b:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f011562f:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	}
	{
		//Test7
		num_tables = 0;
f0115633:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f011563a:	00 00 00 
		num_pages = 0;
f011563d:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f0115644:	00 00 00 
		calculate_allocated_space(proc_directory, 0x700000, 0x700000+2*mega, &num_tables, &num_pages);
f0115647:	8b 45 cc             	mov    -0x34(%ebp),%eax
f011564a:	05 00 00 38 00       	add    $0x380000,%eax
f011564f:	01 c0                	add    %eax,%eax
f0115651:	89 c2                	mov    %eax,%edx
f0115653:	83 ec 0c             	sub    $0xc,%esp
f0115656:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f011565c:	50                   	push   %eax
f011565d:	8d 85 20 ff ff ff    	lea    -0xe0(%ebp),%eax
f0115663:	50                   	push   %eax
f0115664:	52                   	push   %edx
f0115665:	68 00 00 70 00       	push   $0x700000
f011566a:	ff 75 d8             	pushl  -0x28(%ebp)
f011566d:	e8 d9 35 ff ff       	call   f0108c4b <calculate_allocated_space>
f0115672:	83 c4 20             	add    $0x20,%esp
		if (num_tables != 0)
f0115675:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f011567b:	85 c0                	test   %eax,%eax
f011567d:	74 27                	je     f01156a6 <test_calculate_allocated_space+0x58c>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Tables count is not correct). res=%d, expected=%d\n", num_tables, 0);
f011567f:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0115685:	83 ec 0c             	sub    $0xc,%esp
f0115688:	6a 00                	push   $0x0
f011568a:	50                   	push   %eax
f011568b:	68 90 a9 13 f0       	push   $0xf013a990
f0115690:	68 fc 06 00 00       	push   $0x6fc
f0115695:	68 5e 8c 13 f0       	push   $0xf0138c5e
f011569a:	e8 74 ad fe ff       	call   f0100413 <_warn>
f011569f:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f01156a2:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (num_pages != 0)
f01156a6:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f01156ac:	85 c0                	test   %eax,%eax
f01156ae:	74 27                	je     f01156d7 <test_calculate_allocated_space+0x5bd>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Pages count is not correct). res=%d, expected=%d\n", num_pages, 0);
f01156b0:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f01156b6:	83 ec 0c             	sub    $0xc,%esp
f01156b9:	6a 00                	push   $0x0
f01156bb:	50                   	push   %eax
f01156bc:	68 f0 a9 13 f0       	push   $0xf013a9f0
f01156c1:	68 01 07 00 00       	push   $0x701
f01156c6:	68 5e 8c 13 f0       	push   $0xf0138c5e
f01156cb:	e8 43 ad fe ff       	call   f0100413 <_warn>
f01156d0:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f01156d3:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 10 ;
f01156d7:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f01156db:	74 04                	je     f01156e1 <test_calculate_allocated_space+0x5c7>
f01156dd:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f01156e1:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		//Test8
		num_tables = 0;
f01156e5:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f01156ec:	00 00 00 
		num_pages = 0;
f01156ef:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f01156f6:	00 00 00 
		calculate_allocated_space(proc_directory, 0x3FFFFF, 0x3FFFFF+1*kilo, &num_tables, &num_pages);
f01156f9:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01156fc:	05 ff ff 3f 00       	add    $0x3fffff,%eax
f0115701:	89 c2                	mov    %eax,%edx
f0115703:	83 ec 0c             	sub    $0xc,%esp
f0115706:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f011570c:	50                   	push   %eax
f011570d:	8d 85 20 ff ff ff    	lea    -0xe0(%ebp),%eax
f0115713:	50                   	push   %eax
f0115714:	52                   	push   %edx
f0115715:	68 ff ff 3f 00       	push   $0x3fffff
f011571a:	ff 75 d8             	pushl  -0x28(%ebp)
f011571d:	e8 29 35 ff ff       	call   f0108c4b <calculate_allocated_space>
f0115722:	83 c4 20             	add    $0x20,%esp
		if (num_tables != 0)
f0115725:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f011572b:	85 c0                	test   %eax,%eax
f011572d:	74 27                	je     f0115756 <test_calculate_allocated_space+0x63c>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Tables count is not correct). res=%d, expected=%d\n", num_tables, 0);
f011572f:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0115735:	83 ec 0c             	sub    $0xc,%esp
f0115738:	6a 00                	push   $0x0
f011573a:	50                   	push   %eax
f011573b:	68 90 a9 13 f0       	push   $0xf013a990
f0115740:	68 0d 07 00 00       	push   $0x70d
f0115745:	68 5e 8c 13 f0       	push   $0xf0138c5e
f011574a:	e8 c4 ac fe ff       	call   f0100413 <_warn>
f011574f:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0115752:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (num_pages != 0)
f0115756:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011575c:	85 c0                	test   %eax,%eax
f011575e:	74 27                	je     f0115787 <test_calculate_allocated_space+0x66d>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Pages count is not correct). res=%d, expected=%d\n", num_pages, 0);
f0115760:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0115766:	83 ec 0c             	sub    $0xc,%esp
f0115769:	6a 00                	push   $0x0
f011576b:	50                   	push   %eax
f011576c:	68 f0 a9 13 f0       	push   $0xf013a9f0
f0115771:	68 12 07 00 00       	push   $0x712
f0115776:	68 5e 8c 13 f0       	push   $0xf0138c5e
f011577b:	e8 93 ac fe ff       	call   f0100413 <_warn>
f0115780:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0115783:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 10 ;
f0115787:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f011578b:	74 04                	je     f0115791 <test_calculate_allocated_space+0x677>
f011578d:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f0115791:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	}
	cprintf("\nCASE I: END\n") ;
f0115795:	83 ec 0c             	sub    $0xc,%esp
f0115798:	68 a9 a3 13 f0       	push   $0xf013a3a9
f011579d:	e8 6c b5 fe ff       	call   f0100d0e <cprintf>
f01157a2:	83 c4 10             	add    $0x10,%esp

	/*==================================================*/
	/*PART II: SOME pages and/or tables are exist [50%] */
	/*==================================================*/
	cprintf("\nCASE II: SOME pages and/or tables are exist [50%]\n") ;
f01157a5:	83 ec 0c             	sub    $0xc,%esp
f01157a8:	68 b0 a8 13 f0       	push   $0xf013a8b0
f01157ad:	e8 5c b5 fe ff       	call   f0100d0e <cprintf>
f01157b2:	83 c4 10             	add    $0x10,%esp
	{
		//Test1
		/*allocate page*/char c1[100] ;strcconcat(aup_cmd, " 0x0", c1); execute_command(c1);
f01157b5:	83 ec 04             	sub    $0x4,%esp
f01157b8:	8d 85 f4 fd ff ff    	lea    -0x20c(%ebp),%eax
f01157be:	50                   	push   %eax
f01157bf:	68 62 97 13 f0       	push   $0xf0139762
f01157c4:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f01157ca:	50                   	push   %eax
f01157cb:	e8 c0 bf 01 00       	call   f0131790 <strcconcat>
f01157d0:	83 c4 10             	add    $0x10,%esp
f01157d3:	83 ec 0c             	sub    $0xc,%esp
f01157d6:	8d 85 f4 fd ff ff    	lea    -0x20c(%ebp),%eax
f01157dc:	50                   	push   %eax
f01157dd:	e8 8e b5 fe ff       	call   f0100d70 <execute_command>
f01157e2:	83 c4 10             	add    $0x10,%esp

		num_tables = 0;
f01157e5:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f01157ec:	00 00 00 
		num_pages = 0;
f01157ef:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f01157f6:	00 00 00 
		calculate_allocated_space(proc_directory, 0x0, 0x0+8*kilo, &num_tables, &num_pages);
f01157f9:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01157fc:	c1 e0 03             	shl    $0x3,%eax
f01157ff:	89 c2                	mov    %eax,%edx
f0115801:	83 ec 0c             	sub    $0xc,%esp
f0115804:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f011580a:	50                   	push   %eax
f011580b:	8d 85 20 ff ff ff    	lea    -0xe0(%ebp),%eax
f0115811:	50                   	push   %eax
f0115812:	52                   	push   %edx
f0115813:	6a 00                	push   $0x0
f0115815:	ff 75 d8             	pushl  -0x28(%ebp)
f0115818:	e8 2e 34 ff ff       	call   f0108c4b <calculate_allocated_space>
f011581d:	83 c4 20             	add    $0x20,%esp
		expected_num_tables = 1 ;
f0115820:	c7 45 c8 01 00 00 00 	movl   $0x1,-0x38(%ebp)
		expected_num_pages = 1 ;
f0115827:	c7 45 c4 01 00 00 00 	movl   $0x1,-0x3c(%ebp)
		if (num_tables != expected_num_tables)
f011582e:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0115834:	3b 45 c8             	cmp    -0x38(%ebp),%eax
f0115837:	74 28                	je     f0115861 <test_calculate_allocated_space+0x747>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Tables count is not correct). res=%d, expected=%d\n", num_tables, expected_num_tables);
f0115839:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f011583f:	83 ec 0c             	sub    $0xc,%esp
f0115842:	ff 75 c8             	pushl  -0x38(%ebp)
f0115845:	50                   	push   %eax
f0115846:	68 90 a9 13 f0       	push   $0xf013a990
f011584b:	68 29 07 00 00       	push   $0x729
f0115850:	68 5e 8c 13 f0       	push   $0xf0138c5e
f0115855:	e8 b9 ab fe ff       	call   f0100413 <_warn>
f011585a:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f011585d:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (num_pages != expected_num_pages)
f0115861:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0115867:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f011586a:	74 28                	je     f0115894 <test_calculate_allocated_space+0x77a>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Pages count is not correct). res=%d, expected=%d\n", num_pages, expected_num_pages);
f011586c:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0115872:	83 ec 0c             	sub    $0xc,%esp
f0115875:	ff 75 c4             	pushl  -0x3c(%ebp)
f0115878:	50                   	push   %eax
f0115879:	68 f0 a9 13 f0       	push   $0xf013a9f0
f011587e:	68 2e 07 00 00       	push   $0x72e
f0115883:	68 5e 8c 13 f0       	push   $0xf0138c5e
f0115888:	e8 86 ab fe ff       	call   f0100413 <_warn>
f011588d:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0115890:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0115894:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0115898:	74 04                	je     f011589e <test_calculate_allocated_space+0x784>
f011589a:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f011589e:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		/*allocate page*/char c2[100] ;strcconcat(aup_cmd, " 0x100000", c2); execute_command(c2);
f01158a2:	83 ec 04             	sub    $0x4,%esp
f01158a5:	8d 85 58 fe ff ff    	lea    -0x1a8(%ebp),%eax
f01158ab:	50                   	push   %eax
f01158ac:	68 6f 97 13 f0       	push   $0xf013976f
f01158b1:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f01158b7:	50                   	push   %eax
f01158b8:	e8 d3 be 01 00       	call   f0131790 <strcconcat>
f01158bd:	83 c4 10             	add    $0x10,%esp
f01158c0:	83 ec 0c             	sub    $0xc,%esp
f01158c3:	8d 85 58 fe ff ff    	lea    -0x1a8(%ebp),%eax
f01158c9:	50                   	push   %eax
f01158ca:	e8 a1 b4 fe ff       	call   f0100d70 <execute_command>
f01158cf:	83 c4 10             	add    $0x10,%esp
		/*allocate page*/char c3[100] ;strcconcat(aup_cmd, " 0x10000000", c3); execute_command(c3);
f01158d2:	83 ec 04             	sub    $0x4,%esp
f01158d5:	8d 85 bc fe ff ff    	lea    -0x144(%ebp),%eax
f01158db:	50                   	push   %eax
f01158dc:	68 e4 a8 13 f0       	push   $0xf013a8e4
f01158e1:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f01158e7:	50                   	push   %eax
f01158e8:	e8 a3 be 01 00       	call   f0131790 <strcconcat>
f01158ed:	83 c4 10             	add    $0x10,%esp
f01158f0:	83 ec 0c             	sub    $0xc,%esp
f01158f3:	8d 85 bc fe ff ff    	lea    -0x144(%ebp),%eax
f01158f9:	50                   	push   %eax
f01158fa:	e8 71 b4 fe ff       	call   f0100d70 <execute_command>
f01158ff:	83 c4 10             	add    $0x10,%esp

		//Test2
		num_tables = 0;
f0115902:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f0115909:	00 00 00 
		num_pages = 0;
f011590c:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f0115913:	00 00 00 
		calculate_allocated_space(proc_directory, 0x0, 0x0+8*mega, &num_tables, &num_pages);
f0115916:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0115919:	c1 e0 03             	shl    $0x3,%eax
f011591c:	89 c2                	mov    %eax,%edx
f011591e:	83 ec 0c             	sub    $0xc,%esp
f0115921:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f0115927:	50                   	push   %eax
f0115928:	8d 85 20 ff ff ff    	lea    -0xe0(%ebp),%eax
f011592e:	50                   	push   %eax
f011592f:	52                   	push   %edx
f0115930:	6a 00                	push   $0x0
f0115932:	ff 75 d8             	pushl  -0x28(%ebp)
f0115935:	e8 11 33 ff ff       	call   f0108c4b <calculate_allocated_space>
f011593a:	83 c4 20             	add    $0x20,%esp
		expected_num_tables = 1 ;
f011593d:	c7 45 c8 01 00 00 00 	movl   $0x1,-0x38(%ebp)
		expected_num_pages = 2 ;
f0115944:	c7 45 c4 02 00 00 00 	movl   $0x2,-0x3c(%ebp)
		if (num_tables != expected_num_tables)
f011594b:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0115951:	3b 45 c8             	cmp    -0x38(%ebp),%eax
f0115954:	74 28                	je     f011597e <test_calculate_allocated_space+0x864>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Tables count is not correct). res=%d, expected=%d\n", num_tables, expected_num_tables);
f0115956:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f011595c:	83 ec 0c             	sub    $0xc,%esp
f011595f:	ff 75 c8             	pushl  -0x38(%ebp)
f0115962:	50                   	push   %eax
f0115963:	68 90 a9 13 f0       	push   $0xf013a990
f0115968:	68 3f 07 00 00       	push   $0x73f
f011596d:	68 5e 8c 13 f0       	push   $0xf0138c5e
f0115972:	e8 9c aa fe ff       	call   f0100413 <_warn>
f0115977:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f011597a:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (num_pages != expected_num_pages)
f011597e:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0115984:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f0115987:	74 28                	je     f01159b1 <test_calculate_allocated_space+0x897>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Pages count is not correct). res=%d, expected=%d\n", num_pages, expected_num_pages);
f0115989:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011598f:	83 ec 0c             	sub    $0xc,%esp
f0115992:	ff 75 c4             	pushl  -0x3c(%ebp)
f0115995:	50                   	push   %eax
f0115996:	68 f0 a9 13 f0       	push   $0xf013a9f0
f011599b:	68 44 07 00 00       	push   $0x744
f01159a0:	68 5e 8c 13 f0       	push   $0xf0138c5e
f01159a5:	e8 69 aa fe ff       	call   f0100413 <_warn>
f01159aa:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f01159ad:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f01159b1:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f01159b5:	74 04                	je     f01159bb <test_calculate_allocated_space+0x8a1>
f01159b7:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f01159bb:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		//Test3
		num_tables = 0;
f01159bf:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f01159c6:	00 00 00 
		num_pages = 0;
f01159c9:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f01159d0:	00 00 00 
		calculate_allocated_space(proc_directory, 0x0, 0x0+1024*mega, &num_tables, &num_pages);
f01159d3:	8b 45 cc             	mov    -0x34(%ebp),%eax
f01159d6:	c1 e0 0a             	shl    $0xa,%eax
f01159d9:	89 c2                	mov    %eax,%edx
f01159db:	83 ec 0c             	sub    $0xc,%esp
f01159de:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f01159e4:	50                   	push   %eax
f01159e5:	8d 85 20 ff ff ff    	lea    -0xe0(%ebp),%eax
f01159eb:	50                   	push   %eax
f01159ec:	52                   	push   %edx
f01159ed:	6a 00                	push   $0x0
f01159ef:	ff 75 d8             	pushl  -0x28(%ebp)
f01159f2:	e8 54 32 ff ff       	call   f0108c4b <calculate_allocated_space>
f01159f7:	83 c4 20             	add    $0x20,%esp
		expected_num_tables = 1 + 1;
f01159fa:	c7 45 c8 02 00 00 00 	movl   $0x2,-0x38(%ebp)
		expected_num_pages = 1 + 1 + 1;
f0115a01:	c7 45 c4 03 00 00 00 	movl   $0x3,-0x3c(%ebp)
		if (num_tables != expected_num_tables)
f0115a08:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0115a0e:	3b 45 c8             	cmp    -0x38(%ebp),%eax
f0115a11:	74 28                	je     f0115a3b <test_calculate_allocated_space+0x921>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Tables count is not correct). res=%d, expected=%d\n", num_tables, expected_num_tables);
f0115a13:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0115a19:	83 ec 0c             	sub    $0xc,%esp
f0115a1c:	ff 75 c8             	pushl  -0x38(%ebp)
f0115a1f:	50                   	push   %eax
f0115a20:	68 90 a9 13 f0       	push   $0xf013a990
f0115a25:	68 52 07 00 00       	push   $0x752
f0115a2a:	68 5e 8c 13 f0       	push   $0xf0138c5e
f0115a2f:	e8 df a9 fe ff       	call   f0100413 <_warn>
f0115a34:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0115a37:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (num_pages != expected_num_pages)
f0115a3b:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0115a41:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f0115a44:	74 28                	je     f0115a6e <test_calculate_allocated_space+0x954>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Pages count is not correct). res=%d, expected=%d\n", num_pages, expected_num_pages);
f0115a46:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0115a4c:	83 ec 0c             	sub    $0xc,%esp
f0115a4f:	ff 75 c4             	pushl  -0x3c(%ebp)
f0115a52:	50                   	push   %eax
f0115a53:	68 f0 a9 13 f0       	push   $0xf013a9f0
f0115a58:	68 57 07 00 00       	push   $0x757
f0115a5d:	68 5e 8c 13 f0       	push   $0xf0138c5e
f0115a62:	e8 ac a9 fe ff       	call   f0100413 <_warn>
f0115a67:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0115a6a:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 10 ;
f0115a6e:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0115a72:	74 04                	je     f0115a78 <test_calculate_allocated_space+0x95e>
f0115a74:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f0115a78:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	}
	{
		/*allocate page*/char c3[100] ;strcconcat(aup_cmd, " 0x2000", c3); execute_command(c3);
f0115a7c:	83 ec 04             	sub    $0x4,%esp
f0115a7f:	8d 85 58 fe ff ff    	lea    -0x1a8(%ebp),%eax
f0115a85:	50                   	push   %eax
f0115a86:	68 f0 a8 13 f0       	push   $0xf013a8f0
f0115a8b:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f0115a91:	50                   	push   %eax
f0115a92:	e8 f9 bc 01 00       	call   f0131790 <strcconcat>
f0115a97:	83 c4 10             	add    $0x10,%esp
f0115a9a:	83 ec 0c             	sub    $0xc,%esp
f0115a9d:	8d 85 58 fe ff ff    	lea    -0x1a8(%ebp),%eax
f0115aa3:	50                   	push   %eax
f0115aa4:	e8 c7 b2 fe ff       	call   f0100d70 <execute_command>
f0115aa9:	83 c4 10             	add    $0x10,%esp

		//Test4
		num_tables = 0;
f0115aac:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f0115ab3:	00 00 00 
		num_pages = 0;
f0115ab6:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f0115abd:	00 00 00 
		calculate_allocated_space(proc_directory, 0x1800, 0x1800+3*kilo, &num_tables, &num_pages);
f0115ac0:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0115ac3:	89 c2                	mov    %eax,%edx
f0115ac5:	01 d2                	add    %edx,%edx
f0115ac7:	01 d0                	add    %edx,%eax
f0115ac9:	05 00 18 00 00       	add    $0x1800,%eax
f0115ace:	89 c2                	mov    %eax,%edx
f0115ad0:	83 ec 0c             	sub    $0xc,%esp
f0115ad3:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f0115ad9:	50                   	push   %eax
f0115ada:	8d 85 20 ff ff ff    	lea    -0xe0(%ebp),%eax
f0115ae0:	50                   	push   %eax
f0115ae1:	52                   	push   %edx
f0115ae2:	68 00 18 00 00       	push   $0x1800
f0115ae7:	ff 75 d8             	pushl  -0x28(%ebp)
f0115aea:	e8 5c 31 ff ff       	call   f0108c4b <calculate_allocated_space>
f0115aef:	83 c4 20             	add    $0x20,%esp
		expected_num_tables = 1;
f0115af2:	c7 45 c8 01 00 00 00 	movl   $0x1,-0x38(%ebp)
		expected_num_pages = 1;
f0115af9:	c7 45 c4 01 00 00 00 	movl   $0x1,-0x3c(%ebp)
		if (num_tables != expected_num_tables)
f0115b00:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0115b06:	3b 45 c8             	cmp    -0x38(%ebp),%eax
f0115b09:	74 28                	je     f0115b33 <test_calculate_allocated_space+0xa19>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Tables count is not correct). res=%d, expected=%d\n", num_tables, expected_num_tables);
f0115b0b:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0115b11:	83 ec 0c             	sub    $0xc,%esp
f0115b14:	ff 75 c8             	pushl  -0x38(%ebp)
f0115b17:	50                   	push   %eax
f0115b18:	68 90 a9 13 f0       	push   $0xf013a990
f0115b1d:	68 68 07 00 00       	push   $0x768
f0115b22:	68 5e 8c 13 f0       	push   $0xf0138c5e
f0115b27:	e8 e7 a8 fe ff       	call   f0100413 <_warn>
f0115b2c:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0115b2f:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (num_pages != expected_num_pages)
f0115b33:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0115b39:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f0115b3c:	74 28                	je     f0115b66 <test_calculate_allocated_space+0xa4c>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Pages count is not correct). res=%d, expected=%d\n", num_pages, expected_num_pages);
f0115b3e:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0115b44:	83 ec 0c             	sub    $0xc,%esp
f0115b47:	ff 75 c4             	pushl  -0x3c(%ebp)
f0115b4a:	50                   	push   %eax
f0115b4b:	68 f0 a9 13 f0       	push   $0xf013a9f0
f0115b50:	68 6d 07 00 00       	push   $0x76d
f0115b55:	68 5e 8c 13 f0       	push   $0xf0138c5e
f0115b5a:	e8 b4 a8 fe ff       	call   f0100413 <_warn>
f0115b5f:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0115b62:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0115b66:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0115b6a:	74 04                	je     f0115b70 <test_calculate_allocated_space+0xa56>
f0115b6c:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0115b70:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		/*allocate page*/char c4[100] ;strcconcat(aup_cmd, " 0x800000", c4); execute_command(c4);
f0115b74:	83 ec 04             	sub    $0x4,%esp
f0115b77:	8d 85 bc fe ff ff    	lea    -0x144(%ebp),%eax
f0115b7d:	50                   	push   %eax
f0115b7e:	68 c8 99 13 f0       	push   $0xf01399c8
f0115b83:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f0115b89:	50                   	push   %eax
f0115b8a:	e8 01 bc 01 00       	call   f0131790 <strcconcat>
f0115b8f:	83 c4 10             	add    $0x10,%esp
f0115b92:	83 ec 0c             	sub    $0xc,%esp
f0115b95:	8d 85 bc fe ff ff    	lea    -0x144(%ebp),%eax
f0115b9b:	50                   	push   %eax
f0115b9c:	e8 cf b1 fe ff       	call   f0100d70 <execute_command>
f0115ba1:	83 c4 10             	add    $0x10,%esp

		//Test5
		num_tables = 0;
f0115ba4:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f0115bab:	00 00 00 
		num_pages = 0;
f0115bae:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f0115bb5:	00 00 00 
		calculate_allocated_space(proc_directory, 0x400000, 0x400000+10*mega, &num_tables, &num_pages);
f0115bb8:	8b 55 cc             	mov    -0x34(%ebp),%edx
f0115bbb:	89 d0                	mov    %edx,%eax
f0115bbd:	c1 e0 02             	shl    $0x2,%eax
f0115bc0:	01 d0                	add    %edx,%eax
f0115bc2:	01 c0                	add    %eax,%eax
f0115bc4:	05 00 00 40 00       	add    $0x400000,%eax
f0115bc9:	89 c2                	mov    %eax,%edx
f0115bcb:	83 ec 0c             	sub    $0xc,%esp
f0115bce:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f0115bd4:	50                   	push   %eax
f0115bd5:	8d 85 20 ff ff ff    	lea    -0xe0(%ebp),%eax
f0115bdb:	50                   	push   %eax
f0115bdc:	52                   	push   %edx
f0115bdd:	68 00 00 40 00       	push   $0x400000
f0115be2:	ff 75 d8             	pushl  -0x28(%ebp)
f0115be5:	e8 61 30 ff ff       	call   f0108c4b <calculate_allocated_space>
f0115bea:	83 c4 20             	add    $0x20,%esp
		expected_num_tables = 1;
f0115bed:	c7 45 c8 01 00 00 00 	movl   $0x1,-0x38(%ebp)
		expected_num_pages = 1;
f0115bf4:	c7 45 c4 01 00 00 00 	movl   $0x1,-0x3c(%ebp)
		if (num_tables != expected_num_tables)
f0115bfb:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0115c01:	3b 45 c8             	cmp    -0x38(%ebp),%eax
f0115c04:	74 28                	je     f0115c2e <test_calculate_allocated_space+0xb14>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Tables count is not correct). res=%d, expected=%d\n", num_tables, expected_num_tables);
f0115c06:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0115c0c:	83 ec 0c             	sub    $0xc,%esp
f0115c0f:	ff 75 c8             	pushl  -0x38(%ebp)
f0115c12:	50                   	push   %eax
f0115c13:	68 90 a9 13 f0       	push   $0xf013a990
f0115c18:	68 7d 07 00 00       	push   $0x77d
f0115c1d:	68 5e 8c 13 f0       	push   $0xf0138c5e
f0115c22:	e8 ec a7 fe ff       	call   f0100413 <_warn>
f0115c27:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0115c2a:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (num_pages != expected_num_pages)
f0115c2e:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0115c34:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f0115c37:	74 28                	je     f0115c61 <test_calculate_allocated_space+0xb47>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Pages count is not correct). res=%d, expected=%d\n", num_pages, expected_num_pages);
f0115c39:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0115c3f:	83 ec 0c             	sub    $0xc,%esp
f0115c42:	ff 75 c4             	pushl  -0x3c(%ebp)
f0115c45:	50                   	push   %eax
f0115c46:	68 f0 a9 13 f0       	push   $0xf013a9f0
f0115c4b:	68 82 07 00 00       	push   $0x782
f0115c50:	68 5e 8c 13 f0       	push   $0xf0138c5e
f0115c55:	e8 b9 a7 fe ff       	call   f0100413 <_warn>
f0115c5a:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0115c5d:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0115c61:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0115c65:	74 04                	je     f0115c6b <test_calculate_allocated_space+0xb51>
f0115c67:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0115c6b:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	}
	{
		/*allocate page*/char c3[100] ;strcconcat(aup_cmd, " 0x801000", c3); execute_command(c3);
f0115c6f:	83 ec 04             	sub    $0x4,%esp
f0115c72:	8d 85 58 fe ff ff    	lea    -0x1a8(%ebp),%eax
f0115c78:	50                   	push   %eax
f0115c79:	68 d2 99 13 f0       	push   $0xf01399d2
f0115c7e:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f0115c84:	50                   	push   %eax
f0115c85:	e8 06 bb 01 00       	call   f0131790 <strcconcat>
f0115c8a:	83 c4 10             	add    $0x10,%esp
f0115c8d:	83 ec 0c             	sub    $0xc,%esp
f0115c90:	8d 85 58 fe ff ff    	lea    -0x1a8(%ebp),%eax
f0115c96:	50                   	push   %eax
f0115c97:	e8 d4 b0 fe ff       	call   f0100d70 <execute_command>
f0115c9c:	83 c4 10             	add    $0x10,%esp
		/*allocate page*/char c4[100] ;strcconcat(aup_cmd, " 0x810000", c4); execute_command(c4);
f0115c9f:	83 ec 04             	sub    $0x4,%esp
f0115ca2:	8d 85 bc fe ff ff    	lea    -0x144(%ebp),%eax
f0115ca8:	50                   	push   %eax
f0115ca9:	68 f8 a8 13 f0       	push   $0xf013a8f8
f0115cae:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f0115cb4:	50                   	push   %eax
f0115cb5:	e8 d6 ba 01 00       	call   f0131790 <strcconcat>
f0115cba:	83 c4 10             	add    $0x10,%esp
f0115cbd:	83 ec 0c             	sub    $0xc,%esp
f0115cc0:	8d 85 bc fe ff ff    	lea    -0x144(%ebp),%eax
f0115cc6:	50                   	push   %eax
f0115cc7:	e8 a4 b0 fe ff       	call   f0100d70 <execute_command>
f0115ccc:	83 c4 10             	add    $0x10,%esp

		//Test6
		num_tables = 0;
f0115ccf:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f0115cd6:	00 00 00 
		num_pages = 0;
f0115cd9:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f0115ce0:	00 00 00 
		calculate_allocated_space(proc_directory, 0x700000, 0x700000+2*mega, &num_tables, &num_pages);
f0115ce3:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0115ce6:	05 00 00 38 00       	add    $0x380000,%eax
f0115ceb:	01 c0                	add    %eax,%eax
f0115ced:	89 c2                	mov    %eax,%edx
f0115cef:	83 ec 0c             	sub    $0xc,%esp
f0115cf2:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f0115cf8:	50                   	push   %eax
f0115cf9:	8d 85 20 ff ff ff    	lea    -0xe0(%ebp),%eax
f0115cff:	50                   	push   %eax
f0115d00:	52                   	push   %edx
f0115d01:	68 00 00 70 00       	push   $0x700000
f0115d06:	ff 75 d8             	pushl  -0x28(%ebp)
f0115d09:	e8 3d 2f ff ff       	call   f0108c4b <calculate_allocated_space>
f0115d0e:	83 c4 20             	add    $0x20,%esp
		expected_num_tables = 1;
f0115d11:	c7 45 c8 01 00 00 00 	movl   $0x1,-0x38(%ebp)
		expected_num_pages = 3;
f0115d18:	c7 45 c4 03 00 00 00 	movl   $0x3,-0x3c(%ebp)
		if (num_tables != expected_num_tables)
f0115d1f:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0115d25:	3b 45 c8             	cmp    -0x38(%ebp),%eax
f0115d28:	74 28                	je     f0115d52 <test_calculate_allocated_space+0xc38>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Tables count is not correct). res=%d, expected=%d\n", num_tables, expected_num_tables);
f0115d2a:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0115d30:	83 ec 0c             	sub    $0xc,%esp
f0115d33:	ff 75 c8             	pushl  -0x38(%ebp)
f0115d36:	50                   	push   %eax
f0115d37:	68 90 a9 13 f0       	push   $0xf013a990
f0115d3c:	68 94 07 00 00       	push   $0x794
f0115d41:	68 5e 8c 13 f0       	push   $0xf0138c5e
f0115d46:	e8 c8 a6 fe ff       	call   f0100413 <_warn>
f0115d4b:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0115d4e:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (num_pages != expected_num_pages)
f0115d52:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0115d58:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f0115d5b:	74 28                	je     f0115d85 <test_calculate_allocated_space+0xc6b>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Pages count is not correct). res=%d, expected=%d\n", num_pages, expected_num_pages);
f0115d5d:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0115d63:	83 ec 0c             	sub    $0xc,%esp
f0115d66:	ff 75 c4             	pushl  -0x3c(%ebp)
f0115d69:	50                   	push   %eax
f0115d6a:	68 f0 a9 13 f0       	push   $0xf013a9f0
f0115d6f:	68 99 07 00 00       	push   $0x799
f0115d74:	68 5e 8c 13 f0       	push   $0xf0138c5e
f0115d79:	e8 95 a6 fe ff       	call   f0100413 <_warn>
f0115d7e:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0115d81:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 10 ;
f0115d85:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0115d89:	74 04                	je     f0115d8f <test_calculate_allocated_space+0xc75>
f0115d8b:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f0115d8f:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		//Test7
		num_tables = 0;
f0115d93:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f0115d9a:	00 00 00 
		num_pages = 0;
f0115d9d:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f0115da4:	00 00 00 
		calculate_allocated_space(proc_directory, 0x3FFFFF, 0x3FFFFF+1*kilo, &num_tables, &num_pages);
f0115da7:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0115daa:	05 ff ff 3f 00       	add    $0x3fffff,%eax
f0115daf:	89 c2                	mov    %eax,%edx
f0115db1:	83 ec 0c             	sub    $0xc,%esp
f0115db4:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f0115dba:	50                   	push   %eax
f0115dbb:	8d 85 20 ff ff ff    	lea    -0xe0(%ebp),%eax
f0115dc1:	50                   	push   %eax
f0115dc2:	52                   	push   %edx
f0115dc3:	68 ff ff 3f 00       	push   $0x3fffff
f0115dc8:	ff 75 d8             	pushl  -0x28(%ebp)
f0115dcb:	e8 7b 2e ff ff       	call   f0108c4b <calculate_allocated_space>
f0115dd0:	83 c4 20             	add    $0x20,%esp
		expected_num_tables = 1;
f0115dd3:	c7 45 c8 01 00 00 00 	movl   $0x1,-0x38(%ebp)
		expected_num_pages = 0;
f0115dda:	c7 45 c4 00 00 00 00 	movl   $0x0,-0x3c(%ebp)
		if (num_tables != expected_num_tables)
f0115de1:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0115de7:	3b 45 c8             	cmp    -0x38(%ebp),%eax
f0115dea:	74 28                	je     f0115e14 <test_calculate_allocated_space+0xcfa>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Tables count is not correct). res=%d, expected=%d\n", num_tables, expected_num_tables);
f0115dec:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0115df2:	83 ec 0c             	sub    $0xc,%esp
f0115df5:	ff 75 c8             	pushl  -0x38(%ebp)
f0115df8:	50                   	push   %eax
f0115df9:	68 90 a9 13 f0       	push   $0xf013a990
f0115dfe:	68 a7 07 00 00       	push   $0x7a7
f0115e03:	68 5e 8c 13 f0       	push   $0xf0138c5e
f0115e08:	e8 06 a6 fe ff       	call   f0100413 <_warn>
f0115e0d:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0115e10:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (num_pages != expected_num_pages)
f0115e14:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0115e1a:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f0115e1d:	74 28                	je     f0115e47 <test_calculate_allocated_space+0xd2d>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Pages count is not correct). res=%d, expected=%d\n", num_pages, expected_num_pages);
f0115e1f:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0115e25:	83 ec 0c             	sub    $0xc,%esp
f0115e28:	ff 75 c4             	pushl  -0x3c(%ebp)
f0115e2b:	50                   	push   %eax
f0115e2c:	68 f0 a9 13 f0       	push   $0xf013a9f0
f0115e31:	68 ac 07 00 00       	push   $0x7ac
f0115e36:	68 5e 8c 13 f0       	push   $0xf0138c5e
f0115e3b:	e8 d3 a5 fe ff       	call   f0100413 <_warn>
f0115e40:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0115e43:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 10 ;
f0115e47:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0115e4b:	74 04                	je     f0115e51 <test_calculate_allocated_space+0xd37>
f0115e4d:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f0115e51:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	}
	cprintf("\nCASE II: END\n") ;
f0115e55:	83 ec 0c             	sub    $0xc,%esp
f0115e58:	68 83 99 13 f0       	push   $0xf0139983
f0115e5d:	e8 ac ae fe ff       	call   f0100d0e <cprintf>
f0115e62:	83 c4 10             	add    $0x10,%esp

	cprintf("[EVAL] calculate_allocated_space: FINISHED. Evaluation = %d\n", eval);
f0115e65:	83 ec 08             	sub    $0x8,%esp
f0115e68:	ff 75 e4             	pushl  -0x1c(%ebp)
f0115e6b:	68 4c aa 13 f0       	push   $0xf013aa4c
f0115e70:	e8 99 ae fe ff       	call   f0100d0e <cprintf>
f0115e75:	83 c4 10             	add    $0x10,%esp
	if(eval == 100)
f0115e78:	83 7d e4 64          	cmpl   $0x64,-0x1c(%ebp)
f0115e7c:	75 10                	jne    f0115e8e <test_calculate_allocated_space+0xd74>
		cprintf("Congratulations!! test calculate_allocated_space completed successfully.\n");
f0115e7e:	83 ec 0c             	sub    $0xc,%esp
f0115e81:	68 8c aa 13 f0       	push   $0xf013aa8c
f0115e86:	e8 83 ae fe ff       	call   f0100d0e <cprintf>
f0115e8b:	83 c4 10             	add    $0x10,%esp

	//return back to the kernel directory
	lcr3(phys_page_directory) ;
f0115e8e:	a1 6c 26 78 f0       	mov    0xf078266c,%eax
f0115e93:	89 45 d4             	mov    %eax,-0x2c(%ebp)
f0115e96:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0115e99:	0f 22 d8             	mov    %eax,%cr3

	return 0;
f0115e9c:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0115ea1:	8d 65 f4             	lea    -0xc(%ebp),%esp
f0115ea4:	5b                   	pop    %ebx
f0115ea5:	5e                   	pop    %esi
f0115ea6:	5f                   	pop    %edi
f0115ea7:	5d                   	pop    %ebp
f0115ea8:	c3                   	ret    

f0115ea9 <CB>:
//===========================================================================
//===========================================================================
//===========================================================================

int CB(uint32 *ptr_dir, uint32 va, int bn)
{
f0115ea9:	55                   	push   %ebp
f0115eaa:	89 e5                	mov    %esp,%ebp
f0115eac:	83 ec 18             	sub    $0x18,%esp
	//assert(USE_KHEAP == 0) ;
	uint32 mask = 1<<bn;
f0115eaf:	8b 45 10             	mov    0x10(%ebp),%eax
f0115eb2:	ba 01 00 00 00       	mov    $0x1,%edx
f0115eb7:	88 c1                	mov    %al,%cl
f0115eb9:	d3 e2                	shl    %cl,%edx
f0115ebb:	89 d0                	mov    %edx,%eax
f0115ebd:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if (!(ptr_dir[((((uint32) (va)) >> 22) & 0x3FF)] & 1)) return 0;
f0115ec0:	8b 45 0c             	mov    0xc(%ebp),%eax
f0115ec3:	c1 e8 16             	shr    $0x16,%eax
f0115ec6:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0115ecd:	8b 45 08             	mov    0x8(%ebp),%eax
f0115ed0:	01 d0                	add    %edx,%eax
f0115ed2:	8b 00                	mov    (%eax),%eax
f0115ed4:	83 e0 01             	and    $0x1,%eax
f0115ed7:	85 c0                	test   %eax,%eax
f0115ed9:	75 07                	jne    f0115ee2 <CB+0x39>
f0115edb:	b8 00 00 00 00       	mov    $0x0,%eax
f0115ee0:	eb 76                	jmp    f0115f58 <CB+0xaf>
	uint32 *table = (STATIC_KERNEL_VIRTUAL_ADDRESS(ptr_dir[((((uint32) (va)) >> 22) & 0x3FF)] & ~0xFFF));
f0115ee2:	8b 45 0c             	mov    0xc(%ebp),%eax
f0115ee5:	c1 e8 16             	shr    $0x16,%eax
f0115ee8:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0115eef:	8b 45 08             	mov    0x8(%ebp),%eax
f0115ef2:	01 d0                	add    %edx,%eax
f0115ef4:	8b 00                	mov    (%eax),%eax
f0115ef6:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0115efb:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0115efe:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0115f01:	c1 e8 0c             	shr    $0xc,%eax
f0115f04:	89 45 ec             	mov    %eax,-0x14(%ebp)
f0115f07:	a1 d0 25 78 f0       	mov    0xf07825d0,%eax
f0115f0c:	39 45 ec             	cmp    %eax,-0x14(%ebp)
f0115f0f:	72 17                	jb     f0115f28 <CB+0x7f>
f0115f11:	ff 75 f0             	pushl  -0x10(%ebp)
f0115f14:	68 d8 aa 13 f0       	push   $0xf013aad8
f0115f19:	68 c7 07 00 00       	push   $0x7c7
f0115f1e:	68 5e 8c 13 f0       	push   $0xf0138c5e
f0115f23:	e8 dd a2 fe ff       	call   f0100205 <_panic>
f0115f28:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0115f2b:	2d 00 00 00 10       	sub    $0x10000000,%eax
f0115f30:	89 45 e8             	mov    %eax,-0x18(%ebp)
	return ((table[((((uint32) (va)) >> 12) & 0x3FF)]&mask) == mask)? 1 : 0 ;
f0115f33:	8b 45 0c             	mov    0xc(%ebp),%eax
f0115f36:	c1 e8 0c             	shr    $0xc,%eax
f0115f39:	25 ff 03 00 00       	and    $0x3ff,%eax
f0115f3e:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0115f45:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0115f48:	01 d0                	add    %edx,%eax
f0115f4a:	8b 00                	mov    (%eax),%eax
f0115f4c:	23 45 f4             	and    -0xc(%ebp),%eax
f0115f4f:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0115f52:	0f 94 c0             	sete   %al
f0115f55:	0f b6 c0             	movzbl %al,%eax
}
f0115f58:	c9                   	leave  
f0115f59:	c3                   	ret    

f0115f5a <SB>:
int SB(uint32 *ptr_dir, uint32 va, int bn , int v)
{
f0115f5a:	55                   	push   %ebp
f0115f5b:	89 e5                	mov    %esp,%ebp
f0115f5d:	83 ec 08             	sub    $0x8,%esp
	assert(USE_KHEAP == 0) ;
f0115f60:	68 07 ab 13 f0       	push   $0xf013ab07
f0115f65:	68 16 ab 13 f0       	push   $0xf013ab16
f0115f6a:	68 cc 07 00 00       	push   $0x7cc
f0115f6f:	68 5e 8c 13 f0       	push   $0xf0138c5e
f0115f74:	e8 8c a2 fe ff       	call   f0100205 <_panic>

f0115f79 <CPs>:
	if (~v) table[((((uint32) (va)) >> 12) & 0x3FF)] &= ~mask ;
	else 	table[((((uint32) (va)) >> 12) & 0x3FF)] |= mask ;
	return 0;
}
int CPs(uint32 *ptr_dir, uint32 va, uint32 perms, uint32 which)
{
f0115f79:	55                   	push   %ebp
f0115f7a:	89 e5                	mov    %esp,%ebp
f0115f7c:	83 ec 08             	sub    $0x8,%esp
	assert(USE_KHEAP == 0) ;
f0115f7f:	68 07 ab 13 f0       	push   $0xf013ab07
f0115f84:	68 16 ab 13 f0       	push   $0xf013ab16
f0115f89:	68 d6 07 00 00       	push   $0x7d6
f0115f8e:	68 5e 8c 13 f0       	push   $0xf0138c5e
f0115f93:	e8 6d a2 fe ff       	call   f0100205 <_panic>

f0115f98 <CA>:
	}
	return 1;
}

int CA(uint32 *ptr_dir, uint32 va)
{
f0115f98:	55                   	push   %ebp
f0115f99:	89 e5                	mov    %esp,%ebp
f0115f9b:	83 ec 08             	sub    $0x8,%esp
	assert(USE_KHEAP == 0) ;
f0115f9e:	68 07 ab 13 f0       	push   $0xf013ab07
f0115fa3:	68 16 ab 13 f0       	push   $0xf013ab16
f0115fa8:	68 e5 07 00 00       	push   $0x7e5
f0115fad:	68 5e 8c 13 f0       	push   $0xf0138c5e
f0115fb2:	e8 4e a2 fe ff       	call   f0100205 <_panic>

f0115fb7 <CE>:
	uint32 *table = (STATIC_KERNEL_VIRTUAL_ADDRESS(ptr_dir[((((uint32) (va)) >> 22) & 0x3FF)] & ~0xFFF));
	return table[((((uint32) (va)) >> 12) & 0x3FF)]&~0x00000FFF;
}

int CE(uint32 *_d, uint32 va)
{
f0115fb7:	55                   	push   %ebp
f0115fb8:	89 e5                	mov    %esp,%ebp
f0115fba:	83 ec 18             	sub    $0x18,%esp
	if (!(_d[((((uint32) (va)) >> 22) & 0x3FF)] & 1)) return 0;
f0115fbd:	8b 45 0c             	mov    0xc(%ebp),%eax
f0115fc0:	c1 e8 16             	shr    $0x16,%eax
f0115fc3:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0115fca:	8b 45 08             	mov    0x8(%ebp),%eax
f0115fcd:	01 d0                	add    %edx,%eax
f0115fcf:	8b 00                	mov    (%eax),%eax
f0115fd1:	83 e0 01             	and    $0x1,%eax
f0115fd4:	85 c0                	test   %eax,%eax
f0115fd6:	75 07                	jne    f0115fdf <CE+0x28>
f0115fd8:	b8 00 00 00 00       	mov    $0x0,%eax
f0115fdd:	eb 7a                	jmp    f0116059 <CE+0xa2>
	uint32 *_t = (STATIC_KERNEL_VIRTUAL_ADDRESS(_d[((((uint32) (va)) >> 22) & 0x3FF)] & ~0xFFF));
f0115fdf:	8b 45 0c             	mov    0xc(%ebp),%eax
f0115fe2:	c1 e8 16             	shr    $0x16,%eax
f0115fe5:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0115fec:	8b 45 08             	mov    0x8(%ebp),%eax
f0115fef:	01 d0                	add    %edx,%eax
f0115ff1:	8b 00                	mov    (%eax),%eax
f0115ff3:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0115ff8:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0115ffb:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0115ffe:	c1 e8 0c             	shr    $0xc,%eax
f0116001:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0116004:	a1 d0 25 78 f0       	mov    0xf07825d0,%eax
f0116009:	39 45 f0             	cmp    %eax,-0x10(%ebp)
f011600c:	72 17                	jb     f0116025 <CE+0x6e>
f011600e:	ff 75 f4             	pushl  -0xc(%ebp)
f0116011:	68 d8 aa 13 f0       	push   $0xf013aad8
f0116016:	68 ee 07 00 00       	push   $0x7ee
f011601b:	68 5e 8c 13 f0       	push   $0xf0138c5e
f0116020:	e8 e0 a1 fe ff       	call   f0100205 <_panic>
f0116025:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0116028:	2d 00 00 00 10       	sub    $0x10000000,%eax
f011602d:	89 45 ec             	mov    %eax,-0x14(%ebp)
	if ((_t[((((uint32) (va)) >> 12) & 0x3FF)])!=0) return 0;
f0116030:	8b 45 0c             	mov    0xc(%ebp),%eax
f0116033:	c1 e8 0c             	shr    $0xc,%eax
f0116036:	25 ff 03 00 00       	and    $0x3ff,%eax
f011603b:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0116042:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0116045:	01 d0                	add    %edx,%eax
f0116047:	8b 00                	mov    (%eax),%eax
f0116049:	85 c0                	test   %eax,%eax
f011604b:	74 07                	je     f0116054 <CE+0x9d>
f011604d:	b8 00 00 00 00       	mov    $0x0,%eax
f0116052:	eb 05                	jmp    f0116059 <CE+0xa2>
	return 1;
f0116054:	b8 01 00 00 00       	mov    $0x1,%eax
}
f0116059:	c9                   	leave  
f011605a:	c3                   	ret    

f011605b <CP>:

int CP(uint32* pd, uint32 va, uint32 ps, uint32 pc)
{
f011605b:	55                   	push   %ebp
f011605c:	89 e5                	mov    %esp,%ebp
f011605e:	83 ec 08             	sub    $0x8,%esp
	assert(USE_KHEAP == 0) ;
f0116061:	68 07 ab 13 f0       	push   $0xf013ab07
f0116066:	68 16 ab 13 f0       	push   $0xf013ab16
f011606b:	68 f5 07 00 00       	push   $0x7f5
f0116070:	68 5e 8c 13 f0       	push   $0xf0138c5e
f0116075:	e8 8b a1 fe ff       	call   f0100205 <_panic>

f011607a <GP>:
	}
	return 0;
}

uint32 GP(uint32 *ptr_dir, uint32 va)
{
f011607a:	55                   	push   %ebp
f011607b:	89 e5                	mov    %esp,%ebp
f011607d:	83 ec 08             	sub    $0x8,%esp
	assert(USE_KHEAP == 0) ;
f0116080:	68 07 ab 13 f0       	push   $0xf013ab07
f0116085:	68 16 ab 13 f0       	push   $0xf013ab16
f011608a:	68 05 08 00 00       	push   $0x805
f011608f:	68 5e 8c 13 f0       	push   $0xf0138c5e
f0116094:	e8 6c a1 fe ff       	call   f0100205 <_panic>

f0116099 <ClearUserSpace>:
	uint32 *table = (STATIC_KERNEL_VIRTUAL_ADDRESS(ptr_dir[((((uint32) (va)) >> 22) & 0x3FF)] & ~0xFFF));
	return table[((((uint32) (va)) >> 12) & 0x3FF)] & 0xFFF;
}

void ClearUserSpace(uint32 *ptr_dir)
{
f0116099:	55                   	push   %ebp
f011609a:	89 e5                	mov    %esp,%ebp
f011609c:	83 ec 10             	sub    $0x10,%esp
	for (int i = 0; i < PDX(USER_TOP); ++i) {
f011609f:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
f01160a6:	eb 18                	jmp    f01160c0 <ClearUserSpace+0x27>
		ptr_dir[i] = 0;
f01160a8:	8b 45 fc             	mov    -0x4(%ebp),%eax
f01160ab:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f01160b2:	8b 45 08             	mov    0x8(%ebp),%eax
f01160b5:	01 d0                	add    %edx,%eax
f01160b7:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	return table[((((uint32) (va)) >> 12) & 0x3FF)] & 0xFFF;
}

void ClearUserSpace(uint32 *ptr_dir)
{
	for (int i = 0; i < PDX(USER_TOP); ++i) {
f01160bd:	ff 45 fc             	incl   -0x4(%ebp)
f01160c0:	8b 45 fc             	mov    -0x4(%ebp),%eax
f01160c3:	3d ba 03 00 00       	cmp    $0x3ba,%eax
f01160c8:	76 de                	jbe    f01160a8 <ClearUserSpace+0xf>
		ptr_dir[i] = 0;
	}
}
f01160ca:	90                   	nop
f01160cb:	c9                   	leave  
f01160cc:	c3                   	ret    

f01160cd <CCP>:

int CCP(uint32 *ptr_dir, uint32 ptr1, uint32 ptr2, uint32 size, int ref, uint32 dst_perms, uint32 dst_to_chk, uint32 src_perms, uint32 src_to_chk, uint8 chk_type)
{
f01160cd:	55                   	push   %ebp
f01160ce:	89 e5                	mov    %esp,%ebp
f01160d0:	83 ec 38             	sub    $0x38,%esp
f01160d3:	8b 45 2c             	mov    0x2c(%ebp),%eax
f01160d6:	88 45 d4             	mov    %al,-0x2c(%ebp)
	void* ptrTemp1 = (void*)(ptr1 - ptr1 % (4096));
f01160d9:	8b 45 0c             	mov    0xc(%ebp),%eax
f01160dc:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f01160e1:	89 45 f4             	mov    %eax,-0xc(%ebp)
	void* ptrTemp2 = (void*)(ptr2 - ptr2 % (4096));
f01160e4:	8b 45 10             	mov    0x10(%ebp),%eax
f01160e7:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f01160ec:	89 45 f0             	mov    %eax,-0x10(%ebp)

	for( ;ptrTemp2 < (void*)(ptr2+size); ptrTemp2+=PAGE_SIZE)
f01160ef:	e9 ea 01 00 00       	jmp    f01162de <CCP+0x211>
	{
		uint32* ptr_table1;
		uint32* ptr_table2;
		struct FrameInfo * pfi1 ;
		struct FrameInfo * pfi2 ;
		if (chk_type != CHK_ALLOC)
f01160f4:	80 7d d4 03          	cmpb   $0x3,-0x2c(%ebp)
f01160f8:	74 44                	je     f011613e <CCP+0x71>
		{
			pfi1 = get_frame_info(ptr_dir, (uint32)ptrTemp1, &ptr_table1);
f01160fa:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01160fd:	83 ec 04             	sub    $0x4,%esp
f0116100:	8d 55 dc             	lea    -0x24(%ebp),%edx
f0116103:	52                   	push   %edx
f0116104:	50                   	push   %eax
f0116105:	ff 75 08             	pushl  0x8(%ebp)
f0116108:	e8 f9 0c ff ff       	call   f0106e06 <get_frame_info>
f011610d:	83 c4 10             	add    $0x10,%esp
f0116110:	89 45 e0             	mov    %eax,-0x20(%ebp)
			if (ptr_table1 == NULL)
f0116113:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0116116:	85 c0                	test   %eax,%eax
f0116118:	75 24                	jne    f011613e <CCP+0x71>
			{
				warn("[EVAL] Failed. Table of address 1 = NULL\n");
f011611a:	83 ec 04             	sub    $0x4,%esp
f011611d:	68 2c ab 13 f0       	push   $0xf013ab2c
f0116122:	68 22 08 00 00       	push   $0x822
f0116127:	68 5e 8c 13 f0       	push   $0xf0138c5e
f011612c:	e8 e2 a2 fe ff       	call   f0100413 <_warn>
f0116131:	83 c4 10             	add    $0x10,%esp
				return 0;
f0116134:	b8 00 00 00 00       	mov    $0x0,%eax
f0116139:	e9 b6 01 00 00       	jmp    f01162f4 <CCP+0x227>
			}
		}
		pfi2 = get_frame_info(ptr_dir, (uint32)ptrTemp2, &ptr_table2);
f011613e:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0116141:	83 ec 04             	sub    $0x4,%esp
f0116144:	8d 55 d8             	lea    -0x28(%ebp),%edx
f0116147:	52                   	push   %edx
f0116148:	50                   	push   %eax
f0116149:	ff 75 08             	pushl  0x8(%ebp)
f011614c:	e8 b5 0c ff ff       	call   f0106e06 <get_frame_info>
f0116151:	83 c4 10             	add    $0x10,%esp
f0116154:	89 45 ec             	mov    %eax,-0x14(%ebp)
		if (ptr_table2 == NULL)
f0116157:	8b 45 d8             	mov    -0x28(%ebp),%eax
f011615a:	85 c0                	test   %eax,%eax
f011615c:	75 24                	jne    f0116182 <CCP+0xb5>
		{
			warn("[EVAL] Failed. Table of address 2 = NULL\n");
f011615e:	83 ec 04             	sub    $0x4,%esp
f0116161:	68 58 ab 13 f0       	push   $0xf013ab58
f0116166:	68 29 08 00 00       	push   $0x829
f011616b:	68 5e 8c 13 f0       	push   $0xf0138c5e
f0116170:	e8 9e a2 fe ff       	call   f0100413 <_warn>
f0116175:	83 c4 10             	add    $0x10,%esp
			return 0;
f0116178:	b8 00 00 00 00       	mov    $0x0,%eax
f011617d:	e9 72 01 00 00       	jmp    f01162f4 <CCP+0x227>
		}
		if (chk_type == CHK_SHARE)
f0116182:	80 7d d4 02          	cmpb   $0x2,-0x2c(%ebp)
f0116186:	75 70                	jne    f01161f8 <CCP+0x12b>
		{
			uint32 fn1 = ptr_table1[PTX(ptrTemp1)] >> 12 ;
f0116188:	8b 45 dc             	mov    -0x24(%ebp),%eax
f011618b:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011618e:	c1 ea 0c             	shr    $0xc,%edx
f0116191:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0116197:	c1 e2 02             	shl    $0x2,%edx
f011619a:	01 d0                	add    %edx,%eax
f011619c:	8b 00                	mov    (%eax),%eax
f011619e:	c1 e8 0c             	shr    $0xc,%eax
f01161a1:	89 45 e8             	mov    %eax,-0x18(%ebp)
			uint32 fn2 = ptr_table2[PTX(ptrTemp2)] >> 12 ;
f01161a4:	8b 45 d8             	mov    -0x28(%ebp),%eax
f01161a7:	8b 55 f0             	mov    -0x10(%ebp),%edx
f01161aa:	c1 ea 0c             	shr    $0xc,%edx
f01161ad:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f01161b3:	c1 e2 02             	shl    $0x2,%edx
f01161b6:	01 d0                	add    %edx,%eax
f01161b8:	8b 00                	mov    (%eax),%eax
f01161ba:	c1 e8 0c             	shr    $0xc,%eax
f01161bd:	89 45 e4             	mov    %eax,-0x1c(%ebp)

			if(fn1 != fn2)
f01161c0:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01161c3:	3b 45 e4             	cmp    -0x1c(%ebp),%eax
f01161c6:	74 30                	je     f01161f8 <CCP+0x12b>
			{
				warn("[EVAL] Failed. Frame numbers not equal in the whole range!\nva1=%x, va2=%x, fn1=%x, fn2=%x\n", ptrTemp1, ptrTemp2, fn1, fn2);
f01161c8:	83 ec 04             	sub    $0x4,%esp
f01161cb:	ff 75 e4             	pushl  -0x1c(%ebp)
f01161ce:	ff 75 e8             	pushl  -0x18(%ebp)
f01161d1:	ff 75 f0             	pushl  -0x10(%ebp)
f01161d4:	ff 75 f4             	pushl  -0xc(%ebp)
f01161d7:	68 84 ab 13 f0       	push   $0xf013ab84
f01161dc:	68 33 08 00 00       	push   $0x833
f01161e1:	68 5e 8c 13 f0       	push   $0xf0138c5e
f01161e6:	e8 28 a2 fe ff       	call   f0100413 <_warn>
f01161eb:	83 c4 20             	add    $0x20,%esp
				return 0;
f01161ee:	b8 00 00 00 00       	mov    $0x0,%eax
f01161f3:	e9 fc 00 00 00       	jmp    f01162f4 <CCP+0x227>
			}
		}
		if (ref != -1)
f01161f8:	83 7d 18 ff          	cmpl   $0xffffffff,0x18(%ebp)
f01161fc:	74 52                	je     f0116250 <CCP+0x183>
		{
			if (pfi2 == NULL || (*pfi2).references != ref)
f01161fe:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0116202:	74 0e                	je     f0116212 <CCP+0x145>
f0116204:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0116207:	8b 40 08             	mov    0x8(%eax),%eax
f011620a:	0f b7 c0             	movzwl %ax,%eax
f011620d:	3b 45 18             	cmp    0x18(%ebp),%eax
f0116210:	74 3e                	je     f0116250 <CCP+0x183>
			{
				warn("[EVAL] Failed. Num of frame references is not correct. MAKE SURE to use the functions of LAB5! va2=%x, ref2=%d\n", ptrTemp2, pfi2==NULL? 0 : (*pfi2).references);
f0116212:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0116216:	74 0b                	je     f0116223 <CCP+0x156>
f0116218:	8b 45 ec             	mov    -0x14(%ebp),%eax
f011621b:	8b 40 08             	mov    0x8(%eax),%eax
f011621e:	0f b7 c0             	movzwl %ax,%eax
f0116221:	eb 05                	jmp    f0116228 <CCP+0x15b>
f0116223:	b8 00 00 00 00       	mov    $0x0,%eax
f0116228:	83 ec 0c             	sub    $0xc,%esp
f011622b:	50                   	push   %eax
f011622c:	ff 75 f0             	pushl  -0x10(%ebp)
f011622f:	68 e0 ab 13 f0       	push   $0xf013abe0
f0116234:	68 3b 08 00 00       	push   $0x83b
f0116239:	68 5e 8c 13 f0       	push   $0xf0138c5e
f011623e:	e8 d0 a1 fe ff       	call   f0100413 <_warn>
f0116243:	83 c4 20             	add    $0x20,%esp
				return 0;
f0116246:	b8 00 00 00 00       	mov    $0x0,%eax
f011624b:	e9 a4 00 00 00       	jmp    f01162f4 <CCP+0x227>
			}
		}
		if (CPs(ptr_dir, (uint32)ptrTemp2, dst_perms, dst_to_chk) <= 0)
f0116250:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0116253:	ff 75 20             	pushl  0x20(%ebp)
f0116256:	ff 75 1c             	pushl  0x1c(%ebp)
f0116259:	50                   	push   %eax
f011625a:	ff 75 08             	pushl  0x8(%ebp)
f011625d:	e8 17 fd ff ff       	call   f0115f79 <CPs>
f0116262:	83 c4 10             	add    $0x10,%esp
f0116265:	85 c0                	test   %eax,%eax
f0116267:	7f 21                	jg     f011628a <CCP+0x1bd>
		{
			warn("[EVAL] Failed. one or more permission in destination is not correct\n");
f0116269:	83 ec 04             	sub    $0x4,%esp
f011626c:	68 50 ac 13 f0       	push   $0xf013ac50
f0116271:	68 41 08 00 00       	push   $0x841
f0116276:	68 5e 8c 13 f0       	push   $0xf0138c5e
f011627b:	e8 93 a1 fe ff       	call   f0100413 <_warn>
f0116280:	83 c4 10             	add    $0x10,%esp
			return 0;
f0116283:	b8 00 00 00 00       	mov    $0x0,%eax
f0116288:	eb 6a                	jmp    f01162f4 <CCP+0x227>
		}
		if (chk_type != CHK_ALLOC)
f011628a:	80 7d d4 03          	cmpb   $0x3,-0x2c(%ebp)
f011628e:	74 3a                	je     f01162ca <CCP+0x1fd>
		{
			if (CPs(ptr_dir, (uint32)ptrTemp1, src_perms, src_to_chk) <= 0)
f0116290:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0116293:	ff 75 28             	pushl  0x28(%ebp)
f0116296:	ff 75 24             	pushl  0x24(%ebp)
f0116299:	50                   	push   %eax
f011629a:	ff 75 08             	pushl  0x8(%ebp)
f011629d:	e8 d7 fc ff ff       	call   f0115f79 <CPs>
f01162a2:	83 c4 10             	add    $0x10,%esp
f01162a5:	85 c0                	test   %eax,%eax
f01162a7:	7f 21                	jg     f01162ca <CCP+0x1fd>
			{
				warn("[EVAL] Failed. one or more permission in source is not correct\n");
f01162a9:	83 ec 04             	sub    $0x4,%esp
f01162ac:	68 98 ac 13 f0       	push   $0xf013ac98
f01162b1:	68 48 08 00 00       	push   $0x848
f01162b6:	68 5e 8c 13 f0       	push   $0xf0138c5e
f01162bb:	e8 53 a1 fe ff       	call   f0100413 <_warn>
f01162c0:	83 c4 10             	add    $0x10,%esp
				return 0;
f01162c3:	b8 00 00 00 00       	mov    $0x0,%eax
f01162c8:	eb 2a                	jmp    f01162f4 <CCP+0x227>
			}
		}
		if (chk_type != CHK_ALLOC)
f01162ca:	80 7d d4 03          	cmpb   $0x3,-0x2c(%ebp)
f01162ce:	74 07                	je     f01162d7 <CCP+0x20a>
		{
			ptrTemp1 += PAGE_SIZE;
f01162d0:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
int CCP(uint32 *ptr_dir, uint32 ptr1, uint32 ptr2, uint32 size, int ref, uint32 dst_perms, uint32 dst_to_chk, uint32 src_perms, uint32 src_to_chk, uint8 chk_type)
{
	void* ptrTemp1 = (void*)(ptr1 - ptr1 % (4096));
	void* ptrTemp2 = (void*)(ptr2 - ptr2 % (4096));

	for( ;ptrTemp2 < (void*)(ptr2+size); ptrTemp2+=PAGE_SIZE)
f01162d7:	81 45 f0 00 10 00 00 	addl   $0x1000,-0x10(%ebp)
f01162de:	8b 55 10             	mov    0x10(%ebp),%edx
f01162e1:	8b 45 14             	mov    0x14(%ebp),%eax
f01162e4:	01 d0                	add    %edx,%eax
f01162e6:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f01162e9:	0f 87 05 fe ff ff    	ja     f01160f4 <CCP+0x27>
		{
			ptrTemp1 += PAGE_SIZE;
		}
	}

	return 1;
f01162ef:	b8 01 00 00 00       	mov    $0x1,%eax
}
f01162f4:	c9                   	leave  
f01162f5:	c3                   	ret    

f01162f6 <test_priority_normal_and_higher>:

extern int sys_calculate_free_frames();

uint8 firstTime = 1;
void test_priority_normal_and_higher()
{
f01162f6:	55                   	push   %ebp
f01162f7:	89 e5                	mov    %esp,%ebp
f01162f9:	57                   	push   %edi
f01162fa:	56                   	push   %esi
f01162fb:	53                   	push   %ebx
f01162fc:	81 ec 4c 03 00 00    	sub    $0x34c,%esp
	if(firstTime)
f0116302:	a0 22 2d 19 f0       	mov    0xf0192d22,%al
f0116307:	84 c0                	test   %al,%al
f0116309:	0f 84 b4 09 00 00    	je     f0116cc3 <test_priority_normal_and_higher+0x9cd>
		uint32 fact_WS[15];
		uint32 fact_TimeStamp[15];
		uint32 hello_WS[10];
		uint32 hello_TimeStamp[10];

		firstTime = 0;
f011630f:	c6 05 22 2d 19 f0 00 	movb   $0x0,0xf0192d22
		char command[100] = "load fos_add 20";
f0116316:	8d 85 14 fe ff ff    	lea    -0x1ec(%ebp),%eax
f011631c:	bb 38 af 13 f0       	mov    $0xf013af38,%ebx
f0116321:	ba 04 00 00 00       	mov    $0x4,%edx
f0116326:	89 c7                	mov    %eax,%edi
f0116328:	89 de                	mov    %ebx,%esi
f011632a:	89 d1                	mov    %edx,%ecx
f011632c:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
f011632e:	8d 95 24 fe ff ff    	lea    -0x1dc(%ebp),%edx
f0116334:	b9 15 00 00 00       	mov    $0x15,%ecx
f0116339:	b8 00 00 00 00       	mov    $0x0,%eax
f011633e:	89 d7                	mov    %edx,%edi
f0116340:	f3 ab                	rep stos %eax,%es:(%edi)
		execute_command(command);
f0116342:	83 ec 0c             	sub    $0xc,%esp
f0116345:	8d 85 14 fe ff ff    	lea    -0x1ec(%ebp),%eax
f011634b:	50                   	push   %eax
f011634c:	e8 1f aa fe ff       	call   f0100d70 <execute_command>
f0116351:	83 c4 10             	add    $0x10,%esp
		char command2[100] = "load fact 15";
f0116354:	8d 85 78 fe ff ff    	lea    -0x188(%ebp),%eax
f011635a:	bb 9c af 13 f0       	mov    $0xf013af9c,%ebx
f011635f:	ba 0d 00 00 00       	mov    $0xd,%edx
f0116364:	89 c7                	mov    %eax,%edi
f0116366:	89 de                	mov    %ebx,%esi
f0116368:	89 d1                	mov    %edx,%ecx
f011636a:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f011636c:	8d 95 85 fe ff ff    	lea    -0x17b(%ebp),%edx
f0116372:	b9 57 00 00 00       	mov    $0x57,%ecx
f0116377:	b0 00                	mov    $0x0,%al
f0116379:	89 d7                	mov    %edx,%edi
f011637b:	f3 aa                	rep stos %al,%es:(%edi)
		execute_command(command2);
f011637d:	83 ec 0c             	sub    $0xc,%esp
f0116380:	8d 85 78 fe ff ff    	lea    -0x188(%ebp),%eax
f0116386:	50                   	push   %eax
f0116387:	e8 e4 a9 fe ff       	call   f0100d70 <execute_command>
f011638c:	83 c4 10             	add    $0x10,%esp
		char command3[100] = "load fos_helloWorld 10";
f011638f:	8d 85 dc fe ff ff    	lea    -0x124(%ebp),%eax
f0116395:	bb 00 b0 13 f0       	mov    $0xf013b000,%ebx
f011639a:	ba 17 00 00 00       	mov    $0x17,%edx
f011639f:	89 c7                	mov    %eax,%edi
f01163a1:	89 de                	mov    %ebx,%esi
f01163a3:	89 d1                	mov    %edx,%ecx
f01163a5:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f01163a7:	8d 95 f3 fe ff ff    	lea    -0x10d(%ebp),%edx
f01163ad:	b9 4d 00 00 00       	mov    $0x4d,%ecx
f01163b2:	b0 00                	mov    $0x0,%al
f01163b4:	89 d7                	mov    %edx,%edi
f01163b6:	f3 aa                	rep stos %al,%es:(%edi)
		execute_command(command3);
f01163b8:	83 ec 0c             	sub    $0xc,%esp
f01163bb:	8d 85 dc fe ff ff    	lea    -0x124(%ebp),%eax
f01163c1:	50                   	push   %eax
f01163c2:	e8 a9 a9 fe ff       	call   f0100d70 <execute_command>
f01163c7:	83 c4 10             	add    $0x10,%esp

		struct Env * addEnv;
		struct Env * factEnv;
		struct Env * helloEnv;
		envid2env(4096, &addEnv, 0);
f01163ca:	83 ec 04             	sub    $0x4,%esp
f01163cd:	6a 00                	push   $0x0
f01163cf:	8d 45 ac             	lea    -0x54(%ebp),%eax
f01163d2:	50                   	push   %eax
f01163d3:	68 00 10 00 00       	push   $0x1000
f01163d8:	e8 2d 37 ff ff       	call   f0109b0a <envid2env>
f01163dd:	83 c4 10             	add    $0x10,%esp
		envid2env(4097, &factEnv, 0);
f01163e0:	83 ec 04             	sub    $0x4,%esp
f01163e3:	6a 00                	push   $0x0
f01163e5:	8d 45 a8             	lea    -0x58(%ebp),%eax
f01163e8:	50                   	push   %eax
f01163e9:	68 01 10 00 00       	push   $0x1001
f01163ee:	e8 17 37 ff ff       	call   f0109b0a <envid2env>
f01163f3:	83 c4 10             	add    $0x10,%esp
		envid2env(4098, &helloEnv, 0);
f01163f6:	83 ec 04             	sub    $0x4,%esp
f01163f9:	6a 00                	push   $0x0
f01163fb:	8d 45 a4             	lea    -0x5c(%ebp),%eax
f01163fe:	50                   	push   %eax
f01163ff:	68 02 10 00 00       	push   $0x1002
f0116404:	e8 01 37 ff ff       	call   f0109b0a <envid2env>
f0116409:	83 c4 10             	add    $0x10,%esp

		if(addEnv == NULL || factEnv == NULL || helloEnv == NULL)
f011640c:	8b 45 ac             	mov    -0x54(%ebp),%eax
f011640f:	85 c0                	test   %eax,%eax
f0116411:	74 0e                	je     f0116421 <test_priority_normal_and_higher+0x12b>
f0116413:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0116416:	85 c0                	test   %eax,%eax
f0116418:	74 07                	je     f0116421 <test_priority_normal_and_higher+0x12b>
f011641a:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f011641d:	85 c0                	test   %eax,%eax
f011641f:	75 14                	jne    f0116435 <test_priority_normal_and_higher+0x13f>
			panic("Loading programs failed\n");
f0116421:	83 ec 04             	sub    $0x4,%esp
f0116424:	68 d8 ac 13 f0       	push   $0xf013acd8
f0116429:	6a 26                	push   $0x26
f011642b:	68 f1 ac 13 f0       	push   $0xf013acf1
f0116430:	e8 d0 9d fe ff       	call   f0100205 <_panic>

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 15 || helloEnv->page_WS_max_size != 10)
f0116435:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0116438:	8b 40 74             	mov    0x74(%eax),%eax
f011643b:	83 f8 14             	cmp    $0x14,%eax
f011643e:	75 16                	jne    f0116456 <test_priority_normal_and_higher+0x160>
f0116440:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0116443:	8b 40 74             	mov    0x74(%eax),%eax
f0116446:	83 f8 0f             	cmp    $0xf,%eax
f0116449:	75 0b                	jne    f0116456 <test_priority_normal_and_higher+0x160>
f011644b:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f011644e:	8b 40 74             	mov    0x74(%eax),%eax
f0116451:	83 f8 0a             	cmp    $0xa,%eax
f0116454:	74 14                	je     f011646a <test_priority_normal_and_higher+0x174>
			panic("The programs should be initially loaded with the given working set size\n");
f0116456:	83 ec 04             	sub    $0x4,%esp
f0116459:	68 0c ad 13 f0       	push   $0xf013ad0c
f011645e:	6a 29                	push   $0x29
f0116460:	68 f1 ac 13 f0       	push   $0xf013acf1
f0116465:	e8 9b 9d fe ff       	call   f0100205 <_panic>

		for(int i = 0; i < 20; i++)
f011646a:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
f0116471:	eb 44                	jmp    f01164b7 <test_priority_normal_and_higher+0x1c1>
		{
			add_WS[i] = addEnv->ptr_pageWorkingSet[i].virtual_address;
f0116473:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0116476:	8b 48 78             	mov    0x78(%eax),%ecx
f0116479:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f011647c:	89 d0                	mov    %edx,%eax
f011647e:	01 c0                	add    %eax,%eax
f0116480:	01 d0                	add    %edx,%eax
f0116482:	c1 e0 03             	shl    $0x3,%eax
f0116485:	01 c8                	add    %ecx,%eax
f0116487:	8b 10                	mov    (%eax),%edx
f0116489:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f011648c:	89 94 85 74 fd ff ff 	mov    %edx,-0x28c(%ebp,%eax,4)
			add_TimeStamp[i] = addEnv->ptr_pageWorkingSet[i].time_stamp;
f0116493:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0116496:	8b 48 78             	mov    0x78(%eax),%ecx
f0116499:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f011649c:	89 d0                	mov    %edx,%eax
f011649e:	01 c0                	add    %eax,%eax
f01164a0:	01 d0                	add    %edx,%eax
f01164a2:	c1 e0 03             	shl    $0x3,%eax
f01164a5:	01 c8                	add    %ecx,%eax
f01164a7:	8b 50 08             	mov    0x8(%eax),%edx
f01164aa:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01164ad:	89 94 85 c4 fd ff ff 	mov    %edx,-0x23c(%ebp,%eax,4)
			panic("Loading programs failed\n");

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 15 || helloEnv->page_WS_max_size != 10)
			panic("The programs should be initially loaded with the given working set size\n");

		for(int i = 0; i < 20; i++)
f01164b4:	ff 45 e4             	incl   -0x1c(%ebp)
f01164b7:	83 7d e4 13          	cmpl   $0x13,-0x1c(%ebp)
f01164bb:	7e b6                	jle    f0116473 <test_priority_normal_and_higher+0x17d>
		{
			add_WS[i] = addEnv->ptr_pageWorkingSet[i].virtual_address;
			add_TimeStamp[i] = addEnv->ptr_pageWorkingSet[i].time_stamp;
		}

		for(int i = 0; i < 15; i++)
f01164bd:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
f01164c4:	eb 44                	jmp    f011650a <test_priority_normal_and_higher+0x214>
		{
			fact_WS[i] = factEnv->ptr_pageWorkingSet[i].virtual_address;
f01164c6:	8b 45 a8             	mov    -0x58(%ebp),%eax
f01164c9:	8b 48 78             	mov    0x78(%eax),%ecx
f01164cc:	8b 55 e0             	mov    -0x20(%ebp),%edx
f01164cf:	89 d0                	mov    %edx,%eax
f01164d1:	01 c0                	add    %eax,%eax
f01164d3:	01 d0                	add    %edx,%eax
f01164d5:	c1 e0 03             	shl    $0x3,%eax
f01164d8:	01 c8                	add    %ecx,%eax
f01164da:	8b 10                	mov    (%eax),%edx
f01164dc:	8b 45 e0             	mov    -0x20(%ebp),%eax
f01164df:	89 94 85 fc fc ff ff 	mov    %edx,-0x304(%ebp,%eax,4)
			fact_TimeStamp[i] = factEnv->ptr_pageWorkingSet[i].time_stamp;
f01164e6:	8b 45 a8             	mov    -0x58(%ebp),%eax
f01164e9:	8b 48 78             	mov    0x78(%eax),%ecx
f01164ec:	8b 55 e0             	mov    -0x20(%ebp),%edx
f01164ef:	89 d0                	mov    %edx,%eax
f01164f1:	01 c0                	add    %eax,%eax
f01164f3:	01 d0                	add    %edx,%eax
f01164f5:	c1 e0 03             	shl    $0x3,%eax
f01164f8:	01 c8                	add    %ecx,%eax
f01164fa:	8b 50 08             	mov    0x8(%eax),%edx
f01164fd:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0116500:	89 94 85 38 fd ff ff 	mov    %edx,-0x2c8(%ebp,%eax,4)
		{
			add_WS[i] = addEnv->ptr_pageWorkingSet[i].virtual_address;
			add_TimeStamp[i] = addEnv->ptr_pageWorkingSet[i].time_stamp;
		}

		for(int i = 0; i < 15; i++)
f0116507:	ff 45 e0             	incl   -0x20(%ebp)
f011650a:	83 7d e0 0e          	cmpl   $0xe,-0x20(%ebp)
f011650e:	7e b6                	jle    f01164c6 <test_priority_normal_and_higher+0x1d0>
		{
			fact_WS[i] = factEnv->ptr_pageWorkingSet[i].virtual_address;
			fact_TimeStamp[i] = factEnv->ptr_pageWorkingSet[i].time_stamp;
		}

		for(int i = 0; i < 10; i++)
f0116510:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
f0116517:	eb 44                	jmp    f011655d <test_priority_normal_and_higher+0x267>
		{
			hello_WS[i] = helloEnv->ptr_pageWorkingSet[i].virtual_address;
f0116519:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f011651c:	8b 48 78             	mov    0x78(%eax),%ecx
f011651f:	8b 55 dc             	mov    -0x24(%ebp),%edx
f0116522:	89 d0                	mov    %edx,%eax
f0116524:	01 c0                	add    %eax,%eax
f0116526:	01 d0                	add    %edx,%eax
f0116528:	c1 e0 03             	shl    $0x3,%eax
f011652b:	01 c8                	add    %ecx,%eax
f011652d:	8b 10                	mov    (%eax),%edx
f011652f:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0116532:	89 94 85 ac fc ff ff 	mov    %edx,-0x354(%ebp,%eax,4)
			hello_TimeStamp[i] = helloEnv->ptr_pageWorkingSet[i].time_stamp;
f0116539:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f011653c:	8b 48 78             	mov    0x78(%eax),%ecx
f011653f:	8b 55 dc             	mov    -0x24(%ebp),%edx
f0116542:	89 d0                	mov    %edx,%eax
f0116544:	01 c0                	add    %eax,%eax
f0116546:	01 d0                	add    %edx,%eax
f0116548:	c1 e0 03             	shl    $0x3,%eax
f011654b:	01 c8                	add    %ecx,%eax
f011654d:	8b 50 08             	mov    0x8(%eax),%edx
f0116550:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0116553:	89 94 85 d4 fc ff ff 	mov    %edx,-0x32c(%ebp,%eax,4)
		{
			fact_WS[i] = factEnv->ptr_pageWorkingSet[i].virtual_address;
			fact_TimeStamp[i] = factEnv->ptr_pageWorkingSet[i].time_stamp;
		}

		for(int i = 0; i < 10; i++)
f011655a:	ff 45 dc             	incl   -0x24(%ebp)
f011655d:	83 7d dc 09          	cmpl   $0x9,-0x24(%ebp)
f0116561:	7e b6                	jle    f0116519 <test_priority_normal_and_higher+0x223>
		{
			hello_WS[i] = helloEnv->ptr_pageWorkingSet[i].virtual_address;
			hello_TimeStamp[i] = helloEnv->ptr_pageWorkingSet[i].time_stamp;
		}

		int freeFrames = sys_calculate_free_frames();
f0116563:	e8 35 66 ff ff       	call   f010cb9d <sys_calculate_free_frames>
f0116568:	89 45 b4             	mov    %eax,-0x4c(%ebp)
		int freeDiskFrames = pf_calculate_free_frames();
f011656b:	e8 58 d8 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0116570:	89 45 b0             	mov    %eax,-0x50(%ebp)

		// Set Priority To Normal // Should change nothing
		set_program_priority(addEnv, 3);
f0116573:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0116576:	83 ec 08             	sub    $0x8,%esp
f0116579:	6a 03                	push   $0x3
f011657b:	50                   	push   %eax
f011657c:	e8 67 4a ff ff       	call   f010afe8 <set_program_priority>
f0116581:	83 c4 10             	add    $0x10,%esp
		set_program_priority(factEnv, 3);
f0116584:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0116587:	83 ec 08             	sub    $0x8,%esp
f011658a:	6a 03                	push   $0x3
f011658c:	50                   	push   %eax
f011658d:	e8 56 4a ff ff       	call   f010afe8 <set_program_priority>
f0116592:	83 c4 10             	add    $0x10,%esp
		set_program_priority(helloEnv, 3);
f0116595:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0116598:	83 ec 08             	sub    $0x8,%esp
f011659b:	6a 03                	push   $0x3
f011659d:	50                   	push   %eax
f011659e:	e8 45 4a ff ff       	call   f010afe8 <set_program_priority>
f01165a3:	83 c4 10             	add    $0x10,%esp

		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Old working set should be removed properly\n");
f01165a6:	e8 1d d8 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f01165ab:	3b 45 b0             	cmp    -0x50(%ebp),%eax
f01165ae:	74 14                	je     f01165c4 <test_priority_normal_and_higher+0x2ce>
f01165b0:	83 ec 04             	sub    $0x4,%esp
f01165b3:	68 58 ad 13 f0       	push   $0xf013ad58
f01165b8:	6a 45                	push   $0x45
f01165ba:	68 f1 ac 13 f0       	push   $0xf013acf1
f01165bf:	e8 41 9c fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Old working set should be removed properly\n");
f01165c4:	e8 d4 65 ff ff       	call   f010cb9d <sys_calculate_free_frames>
f01165c9:	3b 45 b4             	cmp    -0x4c(%ebp),%eax
f01165cc:	74 14                	je     f01165e2 <test_priority_normal_and_higher+0x2ec>
f01165ce:	83 ec 04             	sub    $0x4,%esp
f01165d1:	68 58 ad 13 f0       	push   $0xf013ad58
f01165d6:	6a 46                	push   $0x46
f01165d8:	68 f1 ac 13 f0       	push   $0xf013acf1
f01165dd:	e8 23 9c fe ff       	call   f0100205 <_panic>

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 15 || helloEnv->page_WS_max_size != 10)
f01165e2:	8b 45 ac             	mov    -0x54(%ebp),%eax
f01165e5:	8b 40 74             	mov    0x74(%eax),%eax
f01165e8:	83 f8 14             	cmp    $0x14,%eax
f01165eb:	75 16                	jne    f0116603 <test_priority_normal_and_higher+0x30d>
f01165ed:	8b 45 a8             	mov    -0x58(%ebp),%eax
f01165f0:	8b 40 74             	mov    0x74(%eax),%eax
f01165f3:	83 f8 0f             	cmp    $0xf,%eax
f01165f6:	75 0b                	jne    f0116603 <test_priority_normal_and_higher+0x30d>
f01165f8:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f01165fb:	8b 40 74             	mov    0x74(%eax),%eax
f01165fe:	83 f8 0a             	cmp    $0xa,%eax
f0116601:	74 14                	je     f0116617 <test_priority_normal_and_higher+0x321>
			panic("The programs' working set size should not change after setting priority to normal\n");
f0116603:	83 ec 04             	sub    $0x4,%esp
f0116606:	68 84 ad 13 f0       	push   $0xf013ad84
f011660b:	6a 49                	push   $0x49
f011660d:	68 f1 ac 13 f0       	push   $0xf013acf1
f0116612:	e8 ee 9b fe ff       	call   f0100205 <_panic>

		freeFrames = sys_calculate_free_frames();
f0116617:	e8 81 65 ff ff       	call   f010cb9d <sys_calculate_free_frames>
f011661c:	89 45 b4             	mov    %eax,-0x4c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011661f:	e8 a4 d7 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0116624:	89 45 b0             	mov    %eax,-0x50(%ebp)

		// Set Priority To Above Normal // Should change only helloWorld as none of the rest is full
		set_program_priority(addEnv, 4);
f0116627:	8b 45 ac             	mov    -0x54(%ebp),%eax
f011662a:	83 ec 08             	sub    $0x8,%esp
f011662d:	6a 04                	push   $0x4
f011662f:	50                   	push   %eax
f0116630:	e8 b3 49 ff ff       	call   f010afe8 <set_program_priority>
f0116635:	83 c4 10             	add    $0x10,%esp
		set_program_priority(factEnv, 4);
f0116638:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011663b:	83 ec 08             	sub    $0x8,%esp
f011663e:	6a 04                	push   $0x4
f0116640:	50                   	push   %eax
f0116641:	e8 a2 49 ff ff       	call   f010afe8 <set_program_priority>
f0116646:	83 c4 10             	add    $0x10,%esp
		set_program_priority(helloEnv, 4);
f0116649:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f011664c:	83 ec 08             	sub    $0x8,%esp
f011664f:	6a 04                	push   $0x4
f0116651:	50                   	push   %eax
f0116652:	e8 91 49 ff ff       	call   f010afe8 <set_program_priority>
f0116657:	83 c4 10             	add    $0x10,%esp

		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Old working set should be removed properly\n");
f011665a:	e8 69 d7 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011665f:	3b 45 b0             	cmp    -0x50(%ebp),%eax
f0116662:	74 14                	je     f0116678 <test_priority_normal_and_higher+0x382>
f0116664:	83 ec 04             	sub    $0x4,%esp
f0116667:	68 58 ad 13 f0       	push   $0xf013ad58
f011666c:	6a 53                	push   $0x53
f011666e:	68 f1 ac 13 f0       	push   $0xf013acf1
f0116673:	e8 8d 9b fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Old working set should be removed properly%x\n");
f0116678:	e8 20 65 ff ff       	call   f010cb9d <sys_calculate_free_frames>
f011667d:	3b 45 b4             	cmp    -0x4c(%ebp),%eax
f0116680:	74 14                	je     f0116696 <test_priority_normal_and_higher+0x3a0>
f0116682:	83 ec 04             	sub    $0x4,%esp
f0116685:	68 d8 ad 13 f0       	push   $0xf013add8
f011668a:	6a 54                	push   $0x54
f011668c:	68 f1 ac 13 f0       	push   $0xf013acf1
f0116691:	e8 6f 9b fe ff       	call   f0100205 <_panic>

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 15 || helloEnv->page_WS_max_size != 20)
f0116696:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0116699:	8b 40 74             	mov    0x74(%eax),%eax
f011669c:	83 f8 14             	cmp    $0x14,%eax
f011669f:	75 16                	jne    f01166b7 <test_priority_normal_and_higher+0x3c1>
f01166a1:	8b 45 a8             	mov    -0x58(%ebp),%eax
f01166a4:	8b 40 74             	mov    0x74(%eax),%eax
f01166a7:	83 f8 0f             	cmp    $0xf,%eax
f01166aa:	75 0b                	jne    f01166b7 <test_priority_normal_and_higher+0x3c1>
f01166ac:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f01166af:	8b 40 74             	mov    0x74(%eax),%eax
f01166b2:	83 f8 14             	cmp    $0x14,%eax
f01166b5:	74 14                	je     f01166cb <test_priority_normal_and_higher+0x3d5>
			panic("The programs' working set size should be doubled only if it is full\n");
f01166b7:	83 ec 04             	sub    $0x4,%esp
f01166ba:	68 08 ae 13 f0       	push   $0xf013ae08
f01166bf:	6a 57                	push   $0x57
f01166c1:	68 f1 ac 13 f0       	push   $0xf013acf1
f01166c6:	e8 3a 9b fe ff       	call   f0100205 <_panic>

		freeFrames = sys_calculate_free_frames();
f01166cb:	e8 cd 64 ff ff       	call   f010cb9d <sys_calculate_free_frames>
f01166d0:	89 45 b4             	mov    %eax,-0x4c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01166d3:	e8 f0 d6 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f01166d8:	89 45 b0             	mov    %eax,-0x50(%ebp)

		// Set priority to above normal --> nothing should change (1 time only)
		set_program_priority(helloEnv, 4);
f01166db:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f01166de:	83 ec 08             	sub    $0x8,%esp
f01166e1:	6a 04                	push   $0x4
f01166e3:	50                   	push   %eax
f01166e4:	e8 ff 48 ff ff       	call   f010afe8 <set_program_priority>
f01166e9:	83 c4 10             	add    $0x10,%esp

		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Old working set should be removed properly\n");
f01166ec:	e8 d7 d6 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f01166f1:	3b 45 b0             	cmp    -0x50(%ebp),%eax
f01166f4:	74 14                	je     f011670a <test_priority_normal_and_higher+0x414>
f01166f6:	83 ec 04             	sub    $0x4,%esp
f01166f9:	68 58 ad 13 f0       	push   $0xf013ad58
f01166fe:	6a 5f                	push   $0x5f
f0116700:	68 f1 ac 13 f0       	push   $0xf013acf1
f0116705:	e8 fb 9a fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Old working set should be removed properly\n");
f011670a:	e8 8e 64 ff ff       	call   f010cb9d <sys_calculate_free_frames>
f011670f:	3b 45 b4             	cmp    -0x4c(%ebp),%eax
f0116712:	74 14                	je     f0116728 <test_priority_normal_and_higher+0x432>
f0116714:	83 ec 04             	sub    $0x4,%esp
f0116717:	68 58 ad 13 f0       	push   $0xf013ad58
f011671c:	6a 60                	push   $0x60
f011671e:	68 f1 ac 13 f0       	push   $0xf013acf1
f0116723:	e8 dd 9a fe ff       	call   f0100205 <_panic>

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 15 || helloEnv->page_WS_max_size != 20)
f0116728:	8b 45 ac             	mov    -0x54(%ebp),%eax
f011672b:	8b 40 74             	mov    0x74(%eax),%eax
f011672e:	83 f8 14             	cmp    $0x14,%eax
f0116731:	75 16                	jne    f0116749 <test_priority_normal_and_higher+0x453>
f0116733:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0116736:	8b 40 74             	mov    0x74(%eax),%eax
f0116739:	83 f8 0f             	cmp    $0xf,%eax
f011673c:	75 0b                	jne    f0116749 <test_priority_normal_and_higher+0x453>
f011673e:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0116741:	8b 40 74             	mov    0x74(%eax),%eax
f0116744:	83 f8 14             	cmp    $0x14,%eax
f0116747:	74 14                	je     f011675d <test_priority_normal_and_higher+0x467>
			panic("The programs' working set size should be doubled only once\n");
f0116749:	83 ec 04             	sub    $0x4,%esp
f011674c:	68 50 ae 13 f0       	push   $0xf013ae50
f0116751:	6a 63                	push   $0x63
f0116753:	68 f1 ac 13 f0       	push   $0xf013acf1
f0116758:	e8 a8 9a fe ff       	call   f0100205 <_panic>


		// Manipulate WS to seem as full
		for(int i = 10; i < 20; i++)
f011675d:	c7 45 d8 0a 00 00 00 	movl   $0xa,-0x28(%ebp)
f0116764:	eb 1b                	jmp    f0116781 <test_priority_normal_and_higher+0x48b>
		{
			helloEnv->ptr_pageWorkingSet[i].empty = 0;
f0116766:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0116769:	8b 48 78             	mov    0x78(%eax),%ecx
f011676c:	8b 55 d8             	mov    -0x28(%ebp),%edx
f011676f:	89 d0                	mov    %edx,%eax
f0116771:	01 c0                	add    %eax,%eax
f0116773:	01 d0                	add    %edx,%eax
f0116775:	c1 e0 03             	shl    $0x3,%eax
f0116778:	01 c8                	add    %ecx,%eax
f011677a:	c6 40 04 00          	movb   $0x0,0x4(%eax)
		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 15 || helloEnv->page_WS_max_size != 20)
			panic("The programs' working set size should be doubled only once\n");


		// Manipulate WS to seem as full
		for(int i = 10; i < 20; i++)
f011677e:	ff 45 d8             	incl   -0x28(%ebp)
f0116781:	83 7d d8 13          	cmpl   $0x13,-0x28(%ebp)
f0116785:	7e df                	jle    f0116766 <test_priority_normal_and_higher+0x470>
		{
			helloEnv->ptr_pageWorkingSet[i].empty = 0;
		}

		freeFrames = sys_calculate_free_frames();
f0116787:	e8 11 64 ff ff       	call   f010cb9d <sys_calculate_free_frames>
f011678c:	89 45 b4             	mov    %eax,-0x4c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011678f:	e8 34 d6 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0116794:	89 45 b0             	mov    %eax,-0x50(%ebp)

		set_program_priority(helloEnv, 4);
f0116797:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f011679a:	83 ec 08             	sub    $0x8,%esp
f011679d:	6a 04                	push   $0x4
f011679f:	50                   	push   %eax
f01167a0:	e8 43 48 ff ff       	call   f010afe8 <set_program_priority>
f01167a5:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Old working set should be removed properly\n");
f01167a8:	e8 1b d6 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f01167ad:	3b 45 b0             	cmp    -0x50(%ebp),%eax
f01167b0:	74 14                	je     f01167c6 <test_priority_normal_and_higher+0x4d0>
f01167b2:	83 ec 04             	sub    $0x4,%esp
f01167b5:	68 58 ad 13 f0       	push   $0xf013ad58
f01167ba:	6a 70                	push   $0x70
f01167bc:	68 f1 ac 13 f0       	push   $0xf013acf1
f01167c1:	e8 3f 9a fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Old working set should be removed properly\n");
f01167c6:	e8 d2 63 ff ff       	call   f010cb9d <sys_calculate_free_frames>
f01167cb:	3b 45 b4             	cmp    -0x4c(%ebp),%eax
f01167ce:	74 14                	je     f01167e4 <test_priority_normal_and_higher+0x4ee>
f01167d0:	83 ec 04             	sub    $0x4,%esp
f01167d3:	68 58 ad 13 f0       	push   $0xf013ad58
f01167d8:	6a 71                	push   $0x71
f01167da:	68 f1 ac 13 f0       	push   $0xf013acf1
f01167df:	e8 21 9a fe ff       	call   f0100205 <_panic>

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 15 || helloEnv->page_WS_max_size != 20)
f01167e4:	8b 45 ac             	mov    -0x54(%ebp),%eax
f01167e7:	8b 40 74             	mov    0x74(%eax),%eax
f01167ea:	83 f8 14             	cmp    $0x14,%eax
f01167ed:	75 16                	jne    f0116805 <test_priority_normal_and_higher+0x50f>
f01167ef:	8b 45 a8             	mov    -0x58(%ebp),%eax
f01167f2:	8b 40 74             	mov    0x74(%eax),%eax
f01167f5:	83 f8 0f             	cmp    $0xf,%eax
f01167f8:	75 0b                	jne    f0116805 <test_priority_normal_and_higher+0x50f>
f01167fa:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f01167fd:	8b 40 74             	mov    0x74(%eax),%eax
f0116800:	83 f8 14             	cmp    $0x14,%eax
f0116803:	74 14                	je     f0116819 <test_priority_normal_and_higher+0x523>
			panic("The programs' working set size should be doubled only once\n");
f0116805:	83 ec 04             	sub    $0x4,%esp
f0116808:	68 50 ae 13 f0       	push   $0xf013ae50
f011680d:	6a 74                	push   $0x74
f011680f:	68 f1 ac 13 f0       	push   $0xf013acf1
f0116814:	e8 ec 99 fe ff       	call   f0100205 <_panic>

		for(int i = 10; i < 15; i++)
f0116819:	c7 45 d4 0a 00 00 00 	movl   $0xa,-0x2c(%ebp)
f0116820:	eb 1b                	jmp    f011683d <test_priority_normal_and_higher+0x547>
		{
			factEnv->ptr_pageWorkingSet[i].empty = 0;
f0116822:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0116825:	8b 48 78             	mov    0x78(%eax),%ecx
f0116828:	8b 55 d4             	mov    -0x2c(%ebp),%edx
f011682b:	89 d0                	mov    %edx,%eax
f011682d:	01 c0                	add    %eax,%eax
f011682f:	01 d0                	add    %edx,%eax
f0116831:	c1 e0 03             	shl    $0x3,%eax
f0116834:	01 c8                	add    %ecx,%eax
f0116836:	c6 40 04 00          	movb   $0x0,0x4(%eax)
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Old working set should be removed properly\n");

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 15 || helloEnv->page_WS_max_size != 20)
			panic("The programs' working set size should be doubled only once\n");

		for(int i = 10; i < 15; i++)
f011683a:	ff 45 d4             	incl   -0x2c(%ebp)
f011683d:	83 7d d4 0e          	cmpl   $0xe,-0x2c(%ebp)
f0116841:	7e df                	jle    f0116822 <test_priority_normal_and_higher+0x52c>
		{
			factEnv->ptr_pageWorkingSet[i].empty = 0;
		}

		freeFrames = sys_calculate_free_frames();
f0116843:	e8 55 63 ff ff       	call   f010cb9d <sys_calculate_free_frames>
f0116848:	89 45 b4             	mov    %eax,-0x4c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011684b:	e8 78 d5 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0116850:	89 45 b0             	mov    %eax,-0x50(%ebp)
		set_program_priority(factEnv, 5);
f0116853:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0116856:	83 ec 08             	sub    $0x8,%esp
f0116859:	6a 05                	push   $0x5
f011685b:	50                   	push   %eax
f011685c:	e8 87 47 ff ff       	call   f010afe8 <set_program_priority>
f0116861:	83 c4 10             	add    $0x10,%esp
		set_program_priority(helloEnv, 5);
f0116864:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0116867:	83 ec 08             	sub    $0x8,%esp
f011686a:	6a 05                	push   $0x5
f011686c:	50                   	push   %eax
f011686d:	e8 76 47 ff ff       	call   f010afe8 <set_program_priority>
f0116872:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Old working set should be removed properly\n");
f0116875:	e8 4e d5 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011687a:	3b 45 b0             	cmp    -0x50(%ebp),%eax
f011687d:	74 14                	je     f0116893 <test_priority_normal_and_higher+0x59d>
f011687f:	83 ec 04             	sub    $0x4,%esp
f0116882:	68 58 ad 13 f0       	push   $0xf013ad58
f0116887:	6a 7f                	push   $0x7f
f0116889:	68 f1 ac 13 f0       	push   $0xf013acf1
f011688e:	e8 72 99 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Old working set should be removed properly\n");
f0116893:	e8 05 63 ff ff       	call   f010cb9d <sys_calculate_free_frames>
f0116898:	3b 45 b4             	cmp    -0x4c(%ebp),%eax
f011689b:	74 17                	je     f01168b4 <test_priority_normal_and_higher+0x5be>
f011689d:	83 ec 04             	sub    $0x4,%esp
f01168a0:	68 58 ad 13 f0       	push   $0xf013ad58
f01168a5:	68 80 00 00 00       	push   $0x80
f01168aa:	68 f1 ac 13 f0       	push   $0xf013acf1
f01168af:	e8 51 99 fe ff       	call   f0100205 <_panic>

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 30 || helloEnv->page_WS_max_size != 40)
f01168b4:	8b 45 ac             	mov    -0x54(%ebp),%eax
f01168b7:	8b 40 74             	mov    0x74(%eax),%eax
f01168ba:	83 f8 14             	cmp    $0x14,%eax
f01168bd:	75 16                	jne    f01168d5 <test_priority_normal_and_higher+0x5df>
f01168bf:	8b 45 a8             	mov    -0x58(%ebp),%eax
f01168c2:	8b 40 74             	mov    0x74(%eax),%eax
f01168c5:	83 f8 1e             	cmp    $0x1e,%eax
f01168c8:	75 0b                	jne    f01168d5 <test_priority_normal_and_higher+0x5df>
f01168ca:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f01168cd:	8b 40 74             	mov    0x74(%eax),%eax
f01168d0:	83 f8 28             	cmp    $0x28,%eax
f01168d3:	74 17                	je     f01168ec <test_priority_normal_and_higher+0x5f6>
			panic("The programs' working set size should be doubled if full\n");
f01168d5:	83 ec 04             	sub    $0x4,%esp
f01168d8:	68 8c ae 13 f0       	push   $0xf013ae8c
f01168dd:	68 83 00 00 00       	push   $0x83
f01168e2:	68 f1 ac 13 f0       	push   $0xf013acf1
f01168e7:	e8 19 99 fe ff       	call   f0100205 <_panic>

		for(int i = 20; i < 40; i++)
f01168ec:	c7 45 d0 14 00 00 00 	movl   $0x14,-0x30(%ebp)
f01168f3:	eb 1b                	jmp    f0116910 <test_priority_normal_and_higher+0x61a>
		{
			helloEnv->ptr_pageWorkingSet[i].empty = 0;
f01168f5:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f01168f8:	8b 48 78             	mov    0x78(%eax),%ecx
f01168fb:	8b 55 d0             	mov    -0x30(%ebp),%edx
f01168fe:	89 d0                	mov    %edx,%eax
f0116900:	01 c0                	add    %eax,%eax
f0116902:	01 d0                	add    %edx,%eax
f0116904:	c1 e0 03             	shl    $0x3,%eax
f0116907:	01 c8                	add    %ecx,%eax
f0116909:	c6 40 04 00          	movb   $0x0,0x4(%eax)
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Old working set should be removed properly\n");

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 30 || helloEnv->page_WS_max_size != 40)
			panic("The programs' working set size should be doubled if full\n");

		for(int i = 20; i < 40; i++)
f011690d:	ff 45 d0             	incl   -0x30(%ebp)
f0116910:	83 7d d0 27          	cmpl   $0x27,-0x30(%ebp)
f0116914:	7e df                	jle    f01168f5 <test_priority_normal_and_higher+0x5ff>
		{
			helloEnv->ptr_pageWorkingSet[i].empty = 0;
		}

		freeFrames = sys_calculate_free_frames();
f0116916:	e8 82 62 ff ff       	call   f010cb9d <sys_calculate_free_frames>
f011691b:	89 45 b4             	mov    %eax,-0x4c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011691e:	e8 a5 d4 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0116923:	89 45 b0             	mov    %eax,-0x50(%ebp)
		set_program_priority(factEnv, 5);
f0116926:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0116929:	83 ec 08             	sub    $0x8,%esp
f011692c:	6a 05                	push   $0x5
f011692e:	50                   	push   %eax
f011692f:	e8 b4 46 ff ff       	call   f010afe8 <set_program_priority>
f0116934:	83 c4 10             	add    $0x10,%esp
		set_program_priority(helloEnv, 4);
f0116937:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f011693a:	83 ec 08             	sub    $0x8,%esp
f011693d:	6a 04                	push   $0x4
f011693f:	50                   	push   %eax
f0116940:	e8 a3 46 ff ff       	call   f010afe8 <set_program_priority>
f0116945:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Old working set should be removed properly\n");
f0116948:	e8 7b d4 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011694d:	3b 45 b0             	cmp    -0x50(%ebp),%eax
f0116950:	74 17                	je     f0116969 <test_priority_normal_and_higher+0x673>
f0116952:	83 ec 04             	sub    $0x4,%esp
f0116955:	68 58 ad 13 f0       	push   $0xf013ad58
f011695a:	68 8e 00 00 00       	push   $0x8e
f011695f:	68 f1 ac 13 f0       	push   $0xf013acf1
f0116964:	e8 9c 98 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Old working set should be removed properly\n");
f0116969:	e8 2f 62 ff ff       	call   f010cb9d <sys_calculate_free_frames>
f011696e:	3b 45 b4             	cmp    -0x4c(%ebp),%eax
f0116971:	74 17                	je     f011698a <test_priority_normal_and_higher+0x694>
f0116973:	83 ec 04             	sub    $0x4,%esp
f0116976:	68 58 ad 13 f0       	push   $0xf013ad58
f011697b:	68 8f 00 00 00       	push   $0x8f
f0116980:	68 f1 ac 13 f0       	push   $0xf013acf1
f0116985:	e8 7b 98 fe ff       	call   f0100205 <_panic>

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 30 || helloEnv->page_WS_max_size != 40)
f011698a:	8b 45 ac             	mov    -0x54(%ebp),%eax
f011698d:	8b 40 74             	mov    0x74(%eax),%eax
f0116990:	83 f8 14             	cmp    $0x14,%eax
f0116993:	75 16                	jne    f01169ab <test_priority_normal_and_higher+0x6b5>
f0116995:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0116998:	8b 40 74             	mov    0x74(%eax),%eax
f011699b:	83 f8 1e             	cmp    $0x1e,%eax
f011699e:	75 0b                	jne    f01169ab <test_priority_normal_and_higher+0x6b5>
f01169a0:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f01169a3:	8b 40 74             	mov    0x74(%eax),%eax
f01169a6:	83 f8 28             	cmp    $0x28,%eax
f01169a9:	74 17                	je     f01169c2 <test_priority_normal_and_higher+0x6cc>
			panic("The programs' working set size should be doubled if full\n");
f01169ab:	83 ec 04             	sub    $0x4,%esp
f01169ae:	68 8c ae 13 f0       	push   $0xf013ae8c
f01169b3:	68 92 00 00 00       	push   $0x92
f01169b8:	68 f1 ac 13 f0       	push   $0xf013acf1
f01169bd:	e8 43 98 fe ff       	call   f0100205 <_panic>

		for(int i = 15; i < 30; i++)
f01169c2:	c7 45 cc 0f 00 00 00 	movl   $0xf,-0x34(%ebp)
f01169c9:	eb 1b                	jmp    f01169e6 <test_priority_normal_and_higher+0x6f0>
		{
			factEnv->ptr_pageWorkingSet[i].empty = 0;
f01169cb:	8b 45 a8             	mov    -0x58(%ebp),%eax
f01169ce:	8b 48 78             	mov    0x78(%eax),%ecx
f01169d1:	8b 55 cc             	mov    -0x34(%ebp),%edx
f01169d4:	89 d0                	mov    %edx,%eax
f01169d6:	01 c0                	add    %eax,%eax
f01169d8:	01 d0                	add    %edx,%eax
f01169da:	c1 e0 03             	shl    $0x3,%eax
f01169dd:	01 c8                	add    %ecx,%eax
f01169df:	c6 40 04 00          	movb   $0x0,0x4(%eax)
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Old working set should be removed properly\n");

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 30 || helloEnv->page_WS_max_size != 40)
			panic("The programs' working set size should be doubled if full\n");

		for(int i = 15; i < 30; i++)
f01169e3:	ff 45 cc             	incl   -0x34(%ebp)
f01169e6:	83 7d cc 1d          	cmpl   $0x1d,-0x34(%ebp)
f01169ea:	7e df                	jle    f01169cb <test_priority_normal_and_higher+0x6d5>
		{
			factEnv->ptr_pageWorkingSet[i].empty = 0;
		}

		freeFrames = sys_calculate_free_frames();
f01169ec:	e8 ac 61 ff ff       	call   f010cb9d <sys_calculate_free_frames>
f01169f1:	89 45 b4             	mov    %eax,-0x4c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01169f4:	e8 cf d3 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f01169f9:	89 45 b0             	mov    %eax,-0x50(%ebp)
		set_program_priority(factEnv, 5);
f01169fc:	8b 45 a8             	mov    -0x58(%ebp),%eax
f01169ff:	83 ec 08             	sub    $0x8,%esp
f0116a02:	6a 05                	push   $0x5
f0116a04:	50                   	push   %eax
f0116a05:	e8 de 45 ff ff       	call   f010afe8 <set_program_priority>
f0116a0a:	83 c4 10             	add    $0x10,%esp
		set_program_priority(helloEnv, 4);
f0116a0d:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0116a10:	83 ec 08             	sub    $0x8,%esp
f0116a13:	6a 04                	push   $0x4
f0116a15:	50                   	push   %eax
f0116a16:	e8 cd 45 ff ff       	call   f010afe8 <set_program_priority>
f0116a1b:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Old working set should be removed properly\n");
f0116a1e:	e8 a5 d3 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0116a23:	3b 45 b0             	cmp    -0x50(%ebp),%eax
f0116a26:	74 17                	je     f0116a3f <test_priority_normal_and_higher+0x749>
f0116a28:	83 ec 04             	sub    $0x4,%esp
f0116a2b:	68 58 ad 13 f0       	push   $0xf013ad58
f0116a30:	68 9d 00 00 00       	push   $0x9d
f0116a35:	68 f1 ac 13 f0       	push   $0xf013acf1
f0116a3a:	e8 c6 97 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Old working set should be removed properly\n");
f0116a3f:	e8 59 61 ff ff       	call   f010cb9d <sys_calculate_free_frames>
f0116a44:	3b 45 b4             	cmp    -0x4c(%ebp),%eax
f0116a47:	74 17                	je     f0116a60 <test_priority_normal_and_higher+0x76a>
f0116a49:	83 ec 04             	sub    $0x4,%esp
f0116a4c:	68 58 ad 13 f0       	push   $0xf013ad58
f0116a51:	68 9e 00 00 00       	push   $0x9e
f0116a56:	68 f1 ac 13 f0       	push   $0xf013acf1
f0116a5b:	e8 a5 97 fe ff       	call   f0100205 <_panic>

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 60 || helloEnv->page_WS_max_size != 40)
f0116a60:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0116a63:	8b 40 74             	mov    0x74(%eax),%eax
f0116a66:	83 f8 14             	cmp    $0x14,%eax
f0116a69:	75 16                	jne    f0116a81 <test_priority_normal_and_higher+0x78b>
f0116a6b:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0116a6e:	8b 40 74             	mov    0x74(%eax),%eax
f0116a71:	83 f8 3c             	cmp    $0x3c,%eax
f0116a74:	75 0b                	jne    f0116a81 <test_priority_normal_and_higher+0x78b>
f0116a76:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0116a79:	8b 40 74             	mov    0x74(%eax),%eax
f0116a7c:	83 f8 28             	cmp    $0x28,%eax
f0116a7f:	74 17                	je     f0116a98 <test_priority_normal_and_higher+0x7a2>
			panic("The programs' working set size should be doubled if full\n");
f0116a81:	83 ec 04             	sub    $0x4,%esp
f0116a84:	68 8c ae 13 f0       	push   $0xf013ae8c
f0116a89:	68 a1 00 00 00       	push   $0xa1
f0116a8e:	68 f1 ac 13 f0       	push   $0xf013acf1
f0116a93:	e8 6d 97 fe ff       	call   f0100205 <_panic>

		for(int i = 15; i < 60; i++)
f0116a98:	c7 45 c8 0f 00 00 00 	movl   $0xf,-0x38(%ebp)
f0116a9f:	eb 1b                	jmp    f0116abc <test_priority_normal_and_higher+0x7c6>
		{
			factEnv->ptr_pageWorkingSet[i].empty = 1;
f0116aa1:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0116aa4:	8b 48 78             	mov    0x78(%eax),%ecx
f0116aa7:	8b 55 c8             	mov    -0x38(%ebp),%edx
f0116aaa:	89 d0                	mov    %edx,%eax
f0116aac:	01 c0                	add    %eax,%eax
f0116aae:	01 d0                	add    %edx,%eax
f0116ab0:	c1 e0 03             	shl    $0x3,%eax
f0116ab3:	01 c8                	add    %ecx,%eax
f0116ab5:	c6 40 04 01          	movb   $0x1,0x4(%eax)
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Old working set should be removed properly\n");

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 60 || helloEnv->page_WS_max_size != 40)
			panic("The programs' working set size should be doubled if full\n");

		for(int i = 15; i < 60; i++)
f0116ab9:	ff 45 c8             	incl   -0x38(%ebp)
f0116abc:	83 7d c8 3b          	cmpl   $0x3b,-0x38(%ebp)
f0116ac0:	7e df                	jle    f0116aa1 <test_priority_normal_and_higher+0x7ab>
		{
			factEnv->ptr_pageWorkingSet[i].empty = 1;
		}
		for(int i = 10; i < 40; i++)
f0116ac2:	c7 45 c4 0a 00 00 00 	movl   $0xa,-0x3c(%ebp)
f0116ac9:	eb 1b                	jmp    f0116ae6 <test_priority_normal_and_higher+0x7f0>
		{
			helloEnv->ptr_pageWorkingSet[i].empty = 1;
f0116acb:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0116ace:	8b 48 78             	mov    0x78(%eax),%ecx
f0116ad1:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0116ad4:	89 d0                	mov    %edx,%eax
f0116ad6:	01 c0                	add    %eax,%eax
f0116ad8:	01 d0                	add    %edx,%eax
f0116ada:	c1 e0 03             	shl    $0x3,%eax
f0116add:	01 c8                	add    %ecx,%eax
f0116adf:	c6 40 04 01          	movb   $0x1,0x4(%eax)

		for(int i = 15; i < 60; i++)
		{
			factEnv->ptr_pageWorkingSet[i].empty = 1;
		}
		for(int i = 10; i < 40; i++)
f0116ae3:	ff 45 c4             	incl   -0x3c(%ebp)
f0116ae6:	83 7d c4 27          	cmpl   $0x27,-0x3c(%ebp)
f0116aea:	7e df                	jle    f0116acb <test_priority_normal_and_higher+0x7d5>
		{
			helloEnv->ptr_pageWorkingSet[i].empty = 1;
		}

		for(int i = 0; i < 20; i++)
f0116aec:	c7 45 c0 00 00 00 00 	movl   $0x0,-0x40(%ebp)
f0116af3:	eb 7a                	jmp    f0116b6f <test_priority_normal_and_higher+0x879>
		{
			if(add_WS[i] != addEnv->ptr_pageWorkingSet[i].virtual_address)
f0116af5:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0116af8:	8b 8c 85 74 fd ff ff 	mov    -0x28c(%ebp,%eax,4),%ecx
f0116aff:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0116b02:	8b 58 78             	mov    0x78(%eax),%ebx
f0116b05:	8b 55 c0             	mov    -0x40(%ebp),%edx
f0116b08:	89 d0                	mov    %edx,%eax
f0116b0a:	01 c0                	add    %eax,%eax
f0116b0c:	01 d0                	add    %edx,%eax
f0116b0e:	c1 e0 03             	shl    $0x3,%eax
f0116b11:	01 d8                	add    %ebx,%eax
f0116b13:	8b 00                	mov    (%eax),%eax
f0116b15:	39 c1                	cmp    %eax,%ecx
f0116b17:	74 17                	je     f0116b30 <test_priority_normal_and_higher+0x83a>
				panic("Working set should be moved properly to the new one");
f0116b19:	83 ec 04             	sub    $0x4,%esp
f0116b1c:	68 c8 ae 13 f0       	push   $0xf013aec8
f0116b21:	68 af 00 00 00       	push   $0xaf
f0116b26:	68 f1 ac 13 f0       	push   $0xf013acf1
f0116b2b:	e8 d5 96 fe ff       	call   f0100205 <_panic>

			if(add_TimeStamp[i] != addEnv->ptr_pageWorkingSet[i].time_stamp)
f0116b30:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0116b33:	8b 8c 85 c4 fd ff ff 	mov    -0x23c(%ebp,%eax,4),%ecx
f0116b3a:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0116b3d:	8b 58 78             	mov    0x78(%eax),%ebx
f0116b40:	8b 55 c0             	mov    -0x40(%ebp),%edx
f0116b43:	89 d0                	mov    %edx,%eax
f0116b45:	01 c0                	add    %eax,%eax
f0116b47:	01 d0                	add    %edx,%eax
f0116b49:	c1 e0 03             	shl    $0x3,%eax
f0116b4c:	01 d8                	add    %ebx,%eax
f0116b4e:	8b 40 08             	mov    0x8(%eax),%eax
f0116b51:	39 c1                	cmp    %eax,%ecx
f0116b53:	74 17                	je     f0116b6c <test_priority_normal_and_higher+0x876>
				panic("Working set should be moved properly to the new one");
f0116b55:	83 ec 04             	sub    $0x4,%esp
f0116b58:	68 c8 ae 13 f0       	push   $0xf013aec8
f0116b5d:	68 b2 00 00 00       	push   $0xb2
f0116b62:	68 f1 ac 13 f0       	push   $0xf013acf1
f0116b67:	e8 99 96 fe ff       	call   f0100205 <_panic>
		for(int i = 10; i < 40; i++)
		{
			helloEnv->ptr_pageWorkingSet[i].empty = 1;
		}

		for(int i = 0; i < 20; i++)
f0116b6c:	ff 45 c0             	incl   -0x40(%ebp)
f0116b6f:	83 7d c0 13          	cmpl   $0x13,-0x40(%ebp)
f0116b73:	7e 80                	jle    f0116af5 <test_priority_normal_and_higher+0x7ff>

			if(add_TimeStamp[i] != addEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one");
		}

		for(int i = 0; i < 15; i++)
f0116b75:	c7 45 bc 00 00 00 00 	movl   $0x0,-0x44(%ebp)
f0116b7c:	eb 7a                	jmp    f0116bf8 <test_priority_normal_and_higher+0x902>
		{
			if(fact_WS[i] != factEnv->ptr_pageWorkingSet[i].virtual_address)
f0116b7e:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0116b81:	8b 8c 85 fc fc ff ff 	mov    -0x304(%ebp,%eax,4),%ecx
f0116b88:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0116b8b:	8b 58 78             	mov    0x78(%eax),%ebx
f0116b8e:	8b 55 bc             	mov    -0x44(%ebp),%edx
f0116b91:	89 d0                	mov    %edx,%eax
f0116b93:	01 c0                	add    %eax,%eax
f0116b95:	01 d0                	add    %edx,%eax
f0116b97:	c1 e0 03             	shl    $0x3,%eax
f0116b9a:	01 d8                	add    %ebx,%eax
f0116b9c:	8b 00                	mov    (%eax),%eax
f0116b9e:	39 c1                	cmp    %eax,%ecx
f0116ba0:	74 17                	je     f0116bb9 <test_priority_normal_and_higher+0x8c3>
				panic("Working set should be moved properly to the new one");
f0116ba2:	83 ec 04             	sub    $0x4,%esp
f0116ba5:	68 c8 ae 13 f0       	push   $0xf013aec8
f0116baa:	68 b8 00 00 00       	push   $0xb8
f0116baf:	68 f1 ac 13 f0       	push   $0xf013acf1
f0116bb4:	e8 4c 96 fe ff       	call   f0100205 <_panic>

			if(fact_TimeStamp[i] != factEnv->ptr_pageWorkingSet[i].time_stamp)
f0116bb9:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0116bbc:	8b 8c 85 38 fd ff ff 	mov    -0x2c8(%ebp,%eax,4),%ecx
f0116bc3:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0116bc6:	8b 58 78             	mov    0x78(%eax),%ebx
f0116bc9:	8b 55 bc             	mov    -0x44(%ebp),%edx
f0116bcc:	89 d0                	mov    %edx,%eax
f0116bce:	01 c0                	add    %eax,%eax
f0116bd0:	01 d0                	add    %edx,%eax
f0116bd2:	c1 e0 03             	shl    $0x3,%eax
f0116bd5:	01 d8                	add    %ebx,%eax
f0116bd7:	8b 40 08             	mov    0x8(%eax),%eax
f0116bda:	39 c1                	cmp    %eax,%ecx
f0116bdc:	74 17                	je     f0116bf5 <test_priority_normal_and_higher+0x8ff>
				panic("Working set should be moved properly to the new one");
f0116bde:	83 ec 04             	sub    $0x4,%esp
f0116be1:	68 c8 ae 13 f0       	push   $0xf013aec8
f0116be6:	68 bb 00 00 00       	push   $0xbb
f0116beb:	68 f1 ac 13 f0       	push   $0xf013acf1
f0116bf0:	e8 10 96 fe ff       	call   f0100205 <_panic>

			if(add_TimeStamp[i] != addEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one");
		}

		for(int i = 0; i < 15; i++)
f0116bf5:	ff 45 bc             	incl   -0x44(%ebp)
f0116bf8:	83 7d bc 0e          	cmpl   $0xe,-0x44(%ebp)
f0116bfc:	7e 80                	jle    f0116b7e <test_priority_normal_and_higher+0x888>

			if(fact_TimeStamp[i] != factEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one");
		}

		for(int i = 0; i < 10; i++)
f0116bfe:	c7 45 b8 00 00 00 00 	movl   $0x0,-0x48(%ebp)
f0116c05:	eb 7a                	jmp    f0116c81 <test_priority_normal_and_higher+0x98b>
		{
			if(hello_WS[i] != helloEnv->ptr_pageWorkingSet[i].virtual_address)
f0116c07:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0116c0a:	8b 8c 85 ac fc ff ff 	mov    -0x354(%ebp,%eax,4),%ecx
f0116c11:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0116c14:	8b 58 78             	mov    0x78(%eax),%ebx
f0116c17:	8b 55 b8             	mov    -0x48(%ebp),%edx
f0116c1a:	89 d0                	mov    %edx,%eax
f0116c1c:	01 c0                	add    %eax,%eax
f0116c1e:	01 d0                	add    %edx,%eax
f0116c20:	c1 e0 03             	shl    $0x3,%eax
f0116c23:	01 d8                	add    %ebx,%eax
f0116c25:	8b 00                	mov    (%eax),%eax
f0116c27:	39 c1                	cmp    %eax,%ecx
f0116c29:	74 17                	je     f0116c42 <test_priority_normal_and_higher+0x94c>
				panic("Working set should be moved properly to the new one");
f0116c2b:	83 ec 04             	sub    $0x4,%esp
f0116c2e:	68 c8 ae 13 f0       	push   $0xf013aec8
f0116c33:	68 c1 00 00 00       	push   $0xc1
f0116c38:	68 f1 ac 13 f0       	push   $0xf013acf1
f0116c3d:	e8 c3 95 fe ff       	call   f0100205 <_panic>

			if(hello_TimeStamp[i] != helloEnv->ptr_pageWorkingSet[i].time_stamp)
f0116c42:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0116c45:	8b 8c 85 d4 fc ff ff 	mov    -0x32c(%ebp,%eax,4),%ecx
f0116c4c:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0116c4f:	8b 58 78             	mov    0x78(%eax),%ebx
f0116c52:	8b 55 b8             	mov    -0x48(%ebp),%edx
f0116c55:	89 d0                	mov    %edx,%eax
f0116c57:	01 c0                	add    %eax,%eax
f0116c59:	01 d0                	add    %edx,%eax
f0116c5b:	c1 e0 03             	shl    $0x3,%eax
f0116c5e:	01 d8                	add    %ebx,%eax
f0116c60:	8b 40 08             	mov    0x8(%eax),%eax
f0116c63:	39 c1                	cmp    %eax,%ecx
f0116c65:	74 17                	je     f0116c7e <test_priority_normal_and_higher+0x988>
				panic("Working set should be moved properly to the new one");
f0116c67:	83 ec 04             	sub    $0x4,%esp
f0116c6a:	68 c8 ae 13 f0       	push   $0xf013aec8
f0116c6f:	68 c4 00 00 00       	push   $0xc4
f0116c74:	68 f1 ac 13 f0       	push   $0xf013acf1
f0116c79:	e8 87 95 fe ff       	call   f0100205 <_panic>

			if(fact_TimeStamp[i] != factEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one");
		}

		for(int i = 0; i < 10; i++)
f0116c7e:	ff 45 b8             	incl   -0x48(%ebp)
f0116c81:	83 7d b8 09          	cmpl   $0x9,-0x48(%ebp)
f0116c85:	7e 80                	jle    f0116c07 <test_priority_normal_and_higher+0x911>

			if(hello_TimeStamp[i] != helloEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one");
		}

		char command4[100] = "runall";
f0116c87:	c7 85 40 ff ff ff 72 	movl   $0x616e7572,-0xc0(%ebp)
f0116c8e:	75 6e 61 
f0116c91:	c7 85 44 ff ff ff 6c 	movl   $0x6c6c,-0xbc(%ebp)
f0116c98:	6c 00 00 
f0116c9b:	8d 95 48 ff ff ff    	lea    -0xb8(%ebp),%edx
f0116ca1:	b9 17 00 00 00       	mov    $0x17,%ecx
f0116ca6:	b8 00 00 00 00       	mov    $0x0,%eax
f0116cab:	89 d7                	mov    %edx,%edi
f0116cad:	f3 ab                	rep stos %eax,%es:(%edi)
		execute_command(command4);
f0116caf:	83 ec 0c             	sub    $0xc,%esp
f0116cb2:	8d 85 40 ff ff ff    	lea    -0xc0(%ebp),%eax
f0116cb8:	50                   	push   %eax
f0116cb9:	e8 b2 a0 fe ff       	call   f0100d70 <execute_command>
f0116cbe:	83 c4 10             	add    $0x10,%esp
	}
	else
	{
		cprintf("\nCongratulations!! test priority 1 completed successfully.\n");
	}
}
f0116cc1:	eb 10                	jmp    f0116cd3 <test_priority_normal_and_higher+0x9dd>
		char command4[100] = "runall";
		execute_command(command4);
	}
	else
	{
		cprintf("\nCongratulations!! test priority 1 completed successfully.\n");
f0116cc3:	83 ec 0c             	sub    $0xc,%esp
f0116cc6:	68 fc ae 13 f0       	push   $0xf013aefc
f0116ccb:	e8 3e a0 fe ff       	call   f0100d0e <cprintf>
f0116cd0:	83 c4 10             	add    $0x10,%esp
	}
}
f0116cd3:	90                   	nop
f0116cd4:	8d 65 f4             	lea    -0xc(%ebp),%esp
f0116cd7:	5b                   	pop    %ebx
f0116cd8:	5e                   	pop    %esi
f0116cd9:	5f                   	pop    %edi
f0116cda:	5d                   	pop    %ebp
f0116cdb:	c3                   	ret    

f0116cdc <test_priority_normal_and_lower>:

void test_priority_normal_and_lower()
{
f0116cdc:	55                   	push   %ebp
f0116cdd:	89 e5                	mov    %esp,%ebp
f0116cdf:	57                   	push   %edi
f0116ce0:	56                   	push   %esi
f0116ce1:	53                   	push   %ebx
f0116ce2:	81 ec ac 04 00 00    	sub    $0x4ac,%esp
	if(firstTime)
f0116ce8:	a0 22 2d 19 f0       	mov    0xf0192d22,%al
f0116ced:	84 c0                	test   %al,%al
f0116cef:	0f 84 be 09 00 00    	je     f01176b3 <test_priority_normal_and_lower+0x9d7>
		uint32 fact_WS[30];
		uint32 fact_TimeStamp[30];
		uint32 hello_WS[40];
		uint32 hello_TimeStamp[40];

		firstTime = 0;
f0116cf5:	c6 05 22 2d 19 f0 00 	movb   $0x0,0xf0192d22
		char command[100] = "load fos_add 20";
f0116cfc:	8d 85 f0 fb ff ff    	lea    -0x410(%ebp),%eax
f0116d02:	bb 38 af 13 f0       	mov    $0xf013af38,%ebx
f0116d07:	ba 04 00 00 00       	mov    $0x4,%edx
f0116d0c:	89 c7                	mov    %eax,%edi
f0116d0e:	89 de                	mov    %ebx,%esi
f0116d10:	89 d1                	mov    %edx,%ecx
f0116d12:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
f0116d14:	8d 95 00 fc ff ff    	lea    -0x400(%ebp),%edx
f0116d1a:	b9 15 00 00 00       	mov    $0x15,%ecx
f0116d1f:	b8 00 00 00 00       	mov    $0x0,%eax
f0116d24:	89 d7                	mov    %edx,%edi
f0116d26:	f3 ab                	rep stos %eax,%es:(%edi)
		execute_command(command);
f0116d28:	83 ec 0c             	sub    $0xc,%esp
f0116d2b:	8d 85 f0 fb ff ff    	lea    -0x410(%ebp),%eax
f0116d31:	50                   	push   %eax
f0116d32:	e8 39 a0 fe ff       	call   f0100d70 <execute_command>
f0116d37:	83 c4 10             	add    $0x10,%esp
		char command2[100] = "load fact 30";
f0116d3a:	8d 85 54 fc ff ff    	lea    -0x3ac(%ebp),%eax
f0116d40:	bb f4 b1 13 f0       	mov    $0xf013b1f4,%ebx
f0116d45:	ba 0d 00 00 00       	mov    $0xd,%edx
f0116d4a:	89 c7                	mov    %eax,%edi
f0116d4c:	89 de                	mov    %ebx,%esi
f0116d4e:	89 d1                	mov    %edx,%ecx
f0116d50:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0116d52:	8d 95 61 fc ff ff    	lea    -0x39f(%ebp),%edx
f0116d58:	b9 57 00 00 00       	mov    $0x57,%ecx
f0116d5d:	b0 00                	mov    $0x0,%al
f0116d5f:	89 d7                	mov    %edx,%edi
f0116d61:	f3 aa                	rep stos %al,%es:(%edi)
		execute_command(command2);
f0116d63:	83 ec 0c             	sub    $0xc,%esp
f0116d66:	8d 85 54 fc ff ff    	lea    -0x3ac(%ebp),%eax
f0116d6c:	50                   	push   %eax
f0116d6d:	e8 fe 9f fe ff       	call   f0100d70 <execute_command>
f0116d72:	83 c4 10             	add    $0x10,%esp
		char command3[100] = "load fos_helloWorld 40";
f0116d75:	8d 85 b8 fc ff ff    	lea    -0x348(%ebp),%eax
f0116d7b:	bb 58 b2 13 f0       	mov    $0xf013b258,%ebx
f0116d80:	ba 17 00 00 00       	mov    $0x17,%edx
f0116d85:	89 c7                	mov    %eax,%edi
f0116d87:	89 de                	mov    %ebx,%esi
f0116d89:	89 d1                	mov    %edx,%ecx
f0116d8b:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0116d8d:	8d 95 cf fc ff ff    	lea    -0x331(%ebp),%edx
f0116d93:	b9 4d 00 00 00       	mov    $0x4d,%ecx
f0116d98:	b0 00                	mov    $0x0,%al
f0116d9a:	89 d7                	mov    %edx,%edi
f0116d9c:	f3 aa                	rep stos %al,%es:(%edi)
		execute_command(command3);
f0116d9e:	83 ec 0c             	sub    $0xc,%esp
f0116da1:	8d 85 b8 fc ff ff    	lea    -0x348(%ebp),%eax
f0116da7:	50                   	push   %eax
f0116da8:	e8 c3 9f fe ff       	call   f0100d70 <execute_command>
f0116dad:	83 c4 10             	add    $0x10,%esp

		struct Env * addEnv;
		struct Env * factEnv;
		struct Env * helloEnv;
		envid2env(4096, &addEnv, 0);
f0116db0:	83 ec 04             	sub    $0x4,%esp
f0116db3:	6a 00                	push   $0x0
f0116db5:	8d 45 b8             	lea    -0x48(%ebp),%eax
f0116db8:	50                   	push   %eax
f0116db9:	68 00 10 00 00       	push   $0x1000
f0116dbe:	e8 47 2d ff ff       	call   f0109b0a <envid2env>
f0116dc3:	83 c4 10             	add    $0x10,%esp
		envid2env(4097, &factEnv, 0);
f0116dc6:	83 ec 04             	sub    $0x4,%esp
f0116dc9:	6a 00                	push   $0x0
f0116dcb:	8d 45 b4             	lea    -0x4c(%ebp),%eax
f0116dce:	50                   	push   %eax
f0116dcf:	68 01 10 00 00       	push   $0x1001
f0116dd4:	e8 31 2d ff ff       	call   f0109b0a <envid2env>
f0116dd9:	83 c4 10             	add    $0x10,%esp
		envid2env(4098, &helloEnv, 0);
f0116ddc:	83 ec 04             	sub    $0x4,%esp
f0116ddf:	6a 00                	push   $0x0
f0116de1:	8d 45 b0             	lea    -0x50(%ebp),%eax
f0116de4:	50                   	push   %eax
f0116de5:	68 02 10 00 00       	push   $0x1002
f0116dea:	e8 1b 2d ff ff       	call   f0109b0a <envid2env>
f0116def:	83 c4 10             	add    $0x10,%esp

		if(addEnv == NULL || factEnv == NULL || helloEnv == NULL)
f0116df2:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0116df5:	85 c0                	test   %eax,%eax
f0116df7:	74 0e                	je     f0116e07 <test_priority_normal_and_lower+0x12b>
f0116df9:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0116dfc:	85 c0                	test   %eax,%eax
f0116dfe:	74 07                	je     f0116e07 <test_priority_normal_and_lower+0x12b>
f0116e00:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0116e03:	85 c0                	test   %eax,%eax
f0116e05:	75 17                	jne    f0116e1e <test_priority_normal_and_lower+0x142>
			panic("Loading programs failed\n");
f0116e07:	83 ec 04             	sub    $0x4,%esp
f0116e0a:	68 d8 ac 13 f0       	push   $0xf013acd8
f0116e0f:	68 eb 00 00 00       	push   $0xeb
f0116e14:	68 f1 ac 13 f0       	push   $0xf013acf1
f0116e19:	e8 e7 93 fe ff       	call   f0100205 <_panic>

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 30 || helloEnv->page_WS_max_size != 40)
f0116e1e:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0116e21:	8b 40 74             	mov    0x74(%eax),%eax
f0116e24:	83 f8 14             	cmp    $0x14,%eax
f0116e27:	75 16                	jne    f0116e3f <test_priority_normal_and_lower+0x163>
f0116e29:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0116e2c:	8b 40 74             	mov    0x74(%eax),%eax
f0116e2f:	83 f8 1e             	cmp    $0x1e,%eax
f0116e32:	75 0b                	jne    f0116e3f <test_priority_normal_and_lower+0x163>
f0116e34:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0116e37:	8b 40 74             	mov    0x74(%eax),%eax
f0116e3a:	83 f8 28             	cmp    $0x28,%eax
f0116e3d:	74 17                	je     f0116e56 <test_priority_normal_and_lower+0x17a>
			panic("The programs should be initially loaded with the given working set size\n");
f0116e3f:	83 ec 04             	sub    $0x4,%esp
f0116e42:	68 0c ad 13 f0       	push   $0xf013ad0c
f0116e47:	68 ee 00 00 00       	push   $0xee
f0116e4c:	68 f1 ac 13 f0       	push   $0xf013acf1
f0116e51:	e8 af 93 fe ff       	call   f0100205 <_panic>

		for(int i = 0; i < 20; i++)
f0116e56:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
f0116e5d:	eb 44                	jmp    f0116ea3 <test_priority_normal_and_lower+0x1c7>
		{
			add_WS[i] = addEnv->ptr_pageWorkingSet[i].virtual_address;
f0116e5f:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0116e62:	8b 48 78             	mov    0x78(%eax),%ecx
f0116e65:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f0116e68:	89 d0                	mov    %edx,%eax
f0116e6a:	01 c0                	add    %eax,%eax
f0116e6c:	01 d0                	add    %edx,%eax
f0116e6e:	c1 e0 03             	shl    $0x3,%eax
f0116e71:	01 c8                	add    %ecx,%eax
f0116e73:	8b 10                	mov    (%eax),%edx
f0116e75:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0116e78:	89 94 85 50 fb ff ff 	mov    %edx,-0x4b0(%ebp,%eax,4)
			add_TimeStamp[i] = addEnv->ptr_pageWorkingSet[i].time_stamp;
f0116e7f:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0116e82:	8b 48 78             	mov    0x78(%eax),%ecx
f0116e85:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f0116e88:	89 d0                	mov    %edx,%eax
f0116e8a:	01 c0                	add    %eax,%eax
f0116e8c:	01 d0                	add    %edx,%eax
f0116e8e:	c1 e0 03             	shl    $0x3,%eax
f0116e91:	01 c8                	add    %ecx,%eax
f0116e93:	8b 50 08             	mov    0x8(%eax),%edx
f0116e96:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0116e99:	89 94 85 a0 fb ff ff 	mov    %edx,-0x460(%ebp,%eax,4)
			panic("Loading programs failed\n");

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 30 || helloEnv->page_WS_max_size != 40)
			panic("The programs should be initially loaded with the given working set size\n");

		for(int i = 0; i < 20; i++)
f0116ea0:	ff 45 e4             	incl   -0x1c(%ebp)
f0116ea3:	83 7d e4 13          	cmpl   $0x13,-0x1c(%ebp)
f0116ea7:	7e b6                	jle    f0116e5f <test_priority_normal_and_lower+0x183>
		{
			add_WS[i] = addEnv->ptr_pageWorkingSet[i].virtual_address;
			add_TimeStamp[i] = addEnv->ptr_pageWorkingSet[i].time_stamp;
		}

		for(int i = 0; i < 30; i++)
f0116ea9:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
f0116eb0:	eb 44                	jmp    f0116ef6 <test_priority_normal_and_lower+0x21a>
		{
			fact_WS[i] = factEnv->ptr_pageWorkingSet[i].virtual_address;
f0116eb2:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0116eb5:	8b 48 78             	mov    0x78(%eax),%ecx
f0116eb8:	8b 55 e0             	mov    -0x20(%ebp),%edx
f0116ebb:	89 d0                	mov    %edx,%eax
f0116ebd:	01 c0                	add    %eax,%eax
f0116ebf:	01 d0                	add    %edx,%eax
f0116ec1:	c1 e0 03             	shl    $0x3,%eax
f0116ec4:	01 c8                	add    %ecx,%eax
f0116ec6:	8b 10                	mov    (%eax),%edx
f0116ec8:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0116ecb:	89 94 85 80 fd ff ff 	mov    %edx,-0x280(%ebp,%eax,4)
			fact_TimeStamp[i] = factEnv->ptr_pageWorkingSet[i].time_stamp;
f0116ed2:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0116ed5:	8b 48 78             	mov    0x78(%eax),%ecx
f0116ed8:	8b 55 e0             	mov    -0x20(%ebp),%edx
f0116edb:	89 d0                	mov    %edx,%eax
f0116edd:	01 c0                	add    %eax,%eax
f0116edf:	01 d0                	add    %edx,%eax
f0116ee1:	c1 e0 03             	shl    $0x3,%eax
f0116ee4:	01 c8                	add    %ecx,%eax
f0116ee6:	8b 50 08             	mov    0x8(%eax),%edx
f0116ee9:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0116eec:	89 94 85 f8 fd ff ff 	mov    %edx,-0x208(%ebp,%eax,4)
		{
			add_WS[i] = addEnv->ptr_pageWorkingSet[i].virtual_address;
			add_TimeStamp[i] = addEnv->ptr_pageWorkingSet[i].time_stamp;
		}

		for(int i = 0; i < 30; i++)
f0116ef3:	ff 45 e0             	incl   -0x20(%ebp)
f0116ef6:	83 7d e0 1d          	cmpl   $0x1d,-0x20(%ebp)
f0116efa:	7e b6                	jle    f0116eb2 <test_priority_normal_and_lower+0x1d6>
		{
			fact_WS[i] = factEnv->ptr_pageWorkingSet[i].virtual_address;
			fact_TimeStamp[i] = factEnv->ptr_pageWorkingSet[i].time_stamp;
		}

		for(int i = 0; i < 40; i++)
f0116efc:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
f0116f03:	eb 44                	jmp    f0116f49 <test_priority_normal_and_lower+0x26d>
		{
			hello_WS[i] = helloEnv->ptr_pageWorkingSet[i].virtual_address;
f0116f05:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0116f08:	8b 48 78             	mov    0x78(%eax),%ecx
f0116f0b:	8b 55 dc             	mov    -0x24(%ebp),%edx
f0116f0e:	89 d0                	mov    %edx,%eax
f0116f10:	01 c0                	add    %eax,%eax
f0116f12:	01 d0                	add    %edx,%eax
f0116f14:	c1 e0 03             	shl    $0x3,%eax
f0116f17:	01 c8                	add    %ecx,%eax
f0116f19:	8b 10                	mov    (%eax),%edx
f0116f1b:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0116f1e:	89 94 85 70 fe ff ff 	mov    %edx,-0x190(%ebp,%eax,4)
			hello_TimeStamp[i] = helloEnv->ptr_pageWorkingSet[i].time_stamp;
f0116f25:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0116f28:	8b 48 78             	mov    0x78(%eax),%ecx
f0116f2b:	8b 55 dc             	mov    -0x24(%ebp),%edx
f0116f2e:	89 d0                	mov    %edx,%eax
f0116f30:	01 c0                	add    %eax,%eax
f0116f32:	01 d0                	add    %edx,%eax
f0116f34:	c1 e0 03             	shl    $0x3,%eax
f0116f37:	01 c8                	add    %ecx,%eax
f0116f39:	8b 50 08             	mov    0x8(%eax),%edx
f0116f3c:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0116f3f:	89 94 85 10 ff ff ff 	mov    %edx,-0xf0(%ebp,%eax,4)
		{
			fact_WS[i] = factEnv->ptr_pageWorkingSet[i].virtual_address;
			fact_TimeStamp[i] = factEnv->ptr_pageWorkingSet[i].time_stamp;
		}

		for(int i = 0; i < 40; i++)
f0116f46:	ff 45 dc             	incl   -0x24(%ebp)
f0116f49:	83 7d dc 27          	cmpl   $0x27,-0x24(%ebp)
f0116f4d:	7e b6                	jle    f0116f05 <test_priority_normal_and_lower+0x229>
		{
			hello_WS[i] = helloEnv->ptr_pageWorkingSet[i].virtual_address;
			hello_TimeStamp[i] = helloEnv->ptr_pageWorkingSet[i].time_stamp;
		}

		int freeFrames = sys_calculate_free_frames();
f0116f4f:	e8 49 5c ff ff       	call   f010cb9d <sys_calculate_free_frames>
f0116f54:	89 45 c0             	mov    %eax,-0x40(%ebp)
		int freeDiskFrames = pf_calculate_free_frames() ;
f0116f57:	e8 6c ce fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0116f5c:	89 45 bc             	mov    %eax,-0x44(%ebp)

		// Set Priority To Normal // Should change nothing
		set_program_priority(addEnv, 3);
f0116f5f:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0116f62:	83 ec 08             	sub    $0x8,%esp
f0116f65:	6a 03                	push   $0x3
f0116f67:	50                   	push   %eax
f0116f68:	e8 7b 40 ff ff       	call   f010afe8 <set_program_priority>
f0116f6d:	83 c4 10             	add    $0x10,%esp
		set_program_priority(factEnv, 3);
f0116f70:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0116f73:	83 ec 08             	sub    $0x8,%esp
f0116f76:	6a 03                	push   $0x3
f0116f78:	50                   	push   %eax
f0116f79:	e8 6a 40 ff ff       	call   f010afe8 <set_program_priority>
f0116f7e:	83 c4 10             	add    $0x10,%esp
		set_program_priority(helloEnv, 3);
f0116f81:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0116f84:	83 ec 08             	sub    $0x8,%esp
f0116f87:	6a 03                	push   $0x3
f0116f89:	50                   	push   %eax
f0116f8a:	e8 59 40 ff ff       	call   f010afe8 <set_program_priority>
f0116f8f:	83 c4 10             	add    $0x10,%esp

		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Old working set should be removed properly\n");
f0116f92:	e8 31 ce fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0116f97:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f0116f9a:	74 17                	je     f0116fb3 <test_priority_normal_and_lower+0x2d7>
f0116f9c:	83 ec 04             	sub    $0x4,%esp
f0116f9f:	68 58 ad 13 f0       	push   $0xf013ad58
f0116fa4:	68 0a 01 00 00       	push   $0x10a
f0116fa9:	68 f1 ac 13 f0       	push   $0xf013acf1
f0116fae:	e8 52 92 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Old working set should be removed properly\n");
f0116fb3:	e8 e5 5b ff ff       	call   f010cb9d <sys_calculate_free_frames>
f0116fb8:	3b 45 c0             	cmp    -0x40(%ebp),%eax
f0116fbb:	74 17                	je     f0116fd4 <test_priority_normal_and_lower+0x2f8>
f0116fbd:	83 ec 04             	sub    $0x4,%esp
f0116fc0:	68 58 ad 13 f0       	push   $0xf013ad58
f0116fc5:	68 0b 01 00 00       	push   $0x10b
f0116fca:	68 f1 ac 13 f0       	push   $0xf013acf1
f0116fcf:	e8 31 92 fe ff       	call   f0100205 <_panic>

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 30 || helloEnv->page_WS_max_size != 40)
f0116fd4:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0116fd7:	8b 40 74             	mov    0x74(%eax),%eax
f0116fda:	83 f8 14             	cmp    $0x14,%eax
f0116fdd:	75 16                	jne    f0116ff5 <test_priority_normal_and_lower+0x319>
f0116fdf:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0116fe2:	8b 40 74             	mov    0x74(%eax),%eax
f0116fe5:	83 f8 1e             	cmp    $0x1e,%eax
f0116fe8:	75 0b                	jne    f0116ff5 <test_priority_normal_and_lower+0x319>
f0116fea:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0116fed:	8b 40 74             	mov    0x74(%eax),%eax
f0116ff0:	83 f8 28             	cmp    $0x28,%eax
f0116ff3:	74 17                	je     f011700c <test_priority_normal_and_lower+0x330>
			panic("The programs' working set size should not change after setting priority to normal\n");
f0116ff5:	83 ec 04             	sub    $0x4,%esp
f0116ff8:	68 84 ad 13 f0       	push   $0xf013ad84
f0116ffd:	68 0e 01 00 00       	push   $0x10e
f0117002:	68 f1 ac 13 f0       	push   $0xf013acf1
f0117007:	e8 f9 91 fe ff       	call   f0100205 <_panic>

		freeFrames = sys_calculate_free_frames();
f011700c:	e8 8c 5b ff ff       	call   f010cb9d <sys_calculate_free_frames>
f0117011:	89 45 c0             	mov    %eax,-0x40(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0117014:	e8 af cd fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0117019:	89 45 bc             	mov    %eax,-0x44(%ebp)

		// Set Priority To Below Normal // Should change only if half is free
		set_program_priority(addEnv, 2);
f011701c:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011701f:	83 ec 08             	sub    $0x8,%esp
f0117022:	6a 02                	push   $0x2
f0117024:	50                   	push   %eax
f0117025:	e8 be 3f ff ff       	call   f010afe8 <set_program_priority>
f011702a:	83 c4 10             	add    $0x10,%esp
		set_program_priority(factEnv, 2);
f011702d:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0117030:	83 ec 08             	sub    $0x8,%esp
f0117033:	6a 02                	push   $0x2
f0117035:	50                   	push   %eax
f0117036:	e8 ad 3f ff ff       	call   f010afe8 <set_program_priority>
f011703b:	83 c4 10             	add    $0x10,%esp
		set_program_priority(helloEnv, 2);
f011703e:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0117041:	83 ec 08             	sub    $0x8,%esp
f0117044:	6a 02                	push   $0x2
f0117046:	50                   	push   %eax
f0117047:	e8 9c 3f ff ff       	call   f010afe8 <set_program_priority>
f011704c:	83 c4 10             	add    $0x10,%esp

		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Old working set should be removed properly\n");
f011704f:	e8 74 cd fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0117054:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f0117057:	74 17                	je     f0117070 <test_priority_normal_and_lower+0x394>
f0117059:	83 ec 04             	sub    $0x4,%esp
f011705c:	68 58 ad 13 f0       	push   $0xf013ad58
f0117061:	68 18 01 00 00       	push   $0x118
f0117066:	68 f1 ac 13 f0       	push   $0xf013acf1
f011706b:	e8 95 91 fe ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 0) panic("Old working set should be removed properly%x\n", (freeFrames - sys_calculate_free_frames()));
f0117070:	e8 28 5b ff ff       	call   f010cb9d <sys_calculate_free_frames>
f0117075:	3b 45 c0             	cmp    -0x40(%ebp),%eax
f0117078:	74 21                	je     f011709b <test_priority_normal_and_lower+0x3bf>
f011707a:	e8 1e 5b ff ff       	call   f010cb9d <sys_calculate_free_frames>
f011707f:	8b 55 c0             	mov    -0x40(%ebp),%edx
f0117082:	29 c2                	sub    %eax,%edx
f0117084:	89 d0                	mov    %edx,%eax
f0117086:	50                   	push   %eax
f0117087:	68 d8 ad 13 f0       	push   $0xf013add8
f011708c:	68 19 01 00 00       	push   $0x119
f0117091:	68 f1 ac 13 f0       	push   $0xf013acf1
f0117096:	e8 6a 91 fe ff       	call   f0100205 <_panic>

		if(addEnv->page_WS_max_size != 10 || factEnv->page_WS_max_size != 15 || helloEnv->page_WS_max_size != 20)
f011709b:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011709e:	8b 40 74             	mov    0x74(%eax),%eax
f01170a1:	83 f8 0a             	cmp    $0xa,%eax
f01170a4:	75 16                	jne    f01170bc <test_priority_normal_and_lower+0x3e0>
f01170a6:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01170a9:	8b 40 74             	mov    0x74(%eax),%eax
f01170ac:	83 f8 0f             	cmp    $0xf,%eax
f01170af:	75 0b                	jne    f01170bc <test_priority_normal_and_lower+0x3e0>
f01170b1:	8b 45 b0             	mov    -0x50(%ebp),%eax
f01170b4:	8b 40 74             	mov    0x74(%eax),%eax
f01170b7:	83 f8 14             	cmp    $0x14,%eax
f01170ba:	74 17                	je     f01170d3 <test_priority_normal_and_lower+0x3f7>
			panic("The programs' working set size should be doubled only if it is full\n");
f01170bc:	83 ec 04             	sub    $0x4,%esp
f01170bf:	68 08 ae 13 f0       	push   $0xf013ae08
f01170c4:	68 1c 01 00 00       	push   $0x11c
f01170c9:	68 f1 ac 13 f0       	push   $0xf013acf1
f01170ce:	e8 32 91 fe ff       	call   f0100205 <_panic>

		freeFrames = sys_calculate_free_frames();
f01170d3:	e8 c5 5a ff ff       	call   f010cb9d <sys_calculate_free_frames>
f01170d8:	89 45 c0             	mov    %eax,-0x40(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01170db:	e8 e8 cc fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f01170e0:	89 45 bc             	mov    %eax,-0x44(%ebp)

		// Set Priority To Below Normal // Should change only if half is free
		set_program_priority(addEnv, 2);
f01170e3:	8b 45 b8             	mov    -0x48(%ebp),%eax
f01170e6:	83 ec 08             	sub    $0x8,%esp
f01170e9:	6a 02                	push   $0x2
f01170eb:	50                   	push   %eax
f01170ec:	e8 f7 3e ff ff       	call   f010afe8 <set_program_priority>
f01170f1:	83 c4 10             	add    $0x10,%esp
		set_program_priority(factEnv, 2);
f01170f4:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01170f7:	83 ec 08             	sub    $0x8,%esp
f01170fa:	6a 02                	push   $0x2
f01170fc:	50                   	push   %eax
f01170fd:	e8 e6 3e ff ff       	call   f010afe8 <set_program_priority>
f0117102:	83 c4 10             	add    $0x10,%esp
		set_program_priority(helloEnv, 2);
f0117105:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0117108:	83 ec 08             	sub    $0x8,%esp
f011710b:	6a 02                	push   $0x2
f011710d:	50                   	push   %eax
f011710e:	e8 d5 3e ff ff       	call   f010afe8 <set_program_priority>
f0117113:	83 c4 10             	add    $0x10,%esp

		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Old working set should be removed properly\n");
f0117116:	e8 ad cc fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011711b:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f011711e:	74 17                	je     f0117137 <test_priority_normal_and_lower+0x45b>
f0117120:	83 ec 04             	sub    $0x4,%esp
f0117123:	68 58 ad 13 f0       	push   $0xf013ad58
f0117128:	68 26 01 00 00       	push   $0x126
f011712d:	68 f1 ac 13 f0       	push   $0xf013acf1
f0117132:	e8 ce 90 fe ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 0) panic("Old working set should be removed properly%x\n", (freeFrames - sys_calculate_free_frames()));
f0117137:	e8 61 5a ff ff       	call   f010cb9d <sys_calculate_free_frames>
f011713c:	3b 45 c0             	cmp    -0x40(%ebp),%eax
f011713f:	74 21                	je     f0117162 <test_priority_normal_and_lower+0x486>
f0117141:	e8 57 5a ff ff       	call   f010cb9d <sys_calculate_free_frames>
f0117146:	8b 55 c0             	mov    -0x40(%ebp),%edx
f0117149:	29 c2                	sub    %eax,%edx
f011714b:	89 d0                	mov    %edx,%eax
f011714d:	50                   	push   %eax
f011714e:	68 d8 ad 13 f0       	push   $0xf013add8
f0117153:	68 27 01 00 00       	push   $0x127
f0117158:	68 f1 ac 13 f0       	push   $0xf013acf1
f011715d:	e8 a3 90 fe ff       	call   f0100205 <_panic>

		if(addEnv->page_WS_max_size != 10 || factEnv->page_WS_max_size != 15 || helloEnv->page_WS_max_size != 10)
f0117162:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0117165:	8b 40 74             	mov    0x74(%eax),%eax
f0117168:	83 f8 0a             	cmp    $0xa,%eax
f011716b:	75 16                	jne    f0117183 <test_priority_normal_and_lower+0x4a7>
f011716d:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0117170:	8b 40 74             	mov    0x74(%eax),%eax
f0117173:	83 f8 0f             	cmp    $0xf,%eax
f0117176:	75 0b                	jne    f0117183 <test_priority_normal_and_lower+0x4a7>
f0117178:	8b 45 b0             	mov    -0x50(%ebp),%eax
f011717b:	8b 40 74             	mov    0x74(%eax),%eax
f011717e:	83 f8 0a             	cmp    $0xa,%eax
f0117181:	74 17                	je     f011719a <test_priority_normal_and_lower+0x4be>
			panic("The programs' working set size should be doubled only if it is full\n");
f0117183:	83 ec 04             	sub    $0x4,%esp
f0117186:	68 08 ae 13 f0       	push   $0xf013ae08
f011718b:	68 2a 01 00 00       	push   $0x12a
f0117190:	68 f1 ac 13 f0       	push   $0xf013acf1
f0117195:	e8 6b 90 fe ff       	call   f0100205 <_panic>

		for(int i = 0; i < 10; i++)
f011719a:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
f01171a1:	eb 7a                	jmp    f011721d <test_priority_normal_and_lower+0x541>
		{
			if(add_WS[i] != addEnv->ptr_pageWorkingSet[i].virtual_address)
f01171a3:	8b 45 d8             	mov    -0x28(%ebp),%eax
f01171a6:	8b 8c 85 50 fb ff ff 	mov    -0x4b0(%ebp,%eax,4),%ecx
f01171ad:	8b 45 b8             	mov    -0x48(%ebp),%eax
f01171b0:	8b 58 78             	mov    0x78(%eax),%ebx
f01171b3:	8b 55 d8             	mov    -0x28(%ebp),%edx
f01171b6:	89 d0                	mov    %edx,%eax
f01171b8:	01 c0                	add    %eax,%eax
f01171ba:	01 d0                	add    %edx,%eax
f01171bc:	c1 e0 03             	shl    $0x3,%eax
f01171bf:	01 d8                	add    %ebx,%eax
f01171c1:	8b 00                	mov    (%eax),%eax
f01171c3:	39 c1                	cmp    %eax,%ecx
f01171c5:	74 17                	je     f01171de <test_priority_normal_and_lower+0x502>
				panic("Working set should be moved properly to the new one");
f01171c7:	83 ec 04             	sub    $0x4,%esp
f01171ca:	68 c8 ae 13 f0       	push   $0xf013aec8
f01171cf:	68 2f 01 00 00       	push   $0x12f
f01171d4:	68 f1 ac 13 f0       	push   $0xf013acf1
f01171d9:	e8 27 90 fe ff       	call   f0100205 <_panic>

			if(add_TimeStamp[i] != addEnv->ptr_pageWorkingSet[i].time_stamp)
f01171de:	8b 45 d8             	mov    -0x28(%ebp),%eax
f01171e1:	8b 8c 85 a0 fb ff ff 	mov    -0x460(%ebp,%eax,4),%ecx
f01171e8:	8b 45 b8             	mov    -0x48(%ebp),%eax
f01171eb:	8b 58 78             	mov    0x78(%eax),%ebx
f01171ee:	8b 55 d8             	mov    -0x28(%ebp),%edx
f01171f1:	89 d0                	mov    %edx,%eax
f01171f3:	01 c0                	add    %eax,%eax
f01171f5:	01 d0                	add    %edx,%eax
f01171f7:	c1 e0 03             	shl    $0x3,%eax
f01171fa:	01 d8                	add    %ebx,%eax
f01171fc:	8b 40 08             	mov    0x8(%eax),%eax
f01171ff:	39 c1                	cmp    %eax,%ecx
f0117201:	74 17                	je     f011721a <test_priority_normal_and_lower+0x53e>
				panic("Working set should be moved properly to the new one");
f0117203:	83 ec 04             	sub    $0x4,%esp
f0117206:	68 c8 ae 13 f0       	push   $0xf013aec8
f011720b:	68 32 01 00 00       	push   $0x132
f0117210:	68 f1 ac 13 f0       	push   $0xf013acf1
f0117215:	e8 eb 8f fe ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 0) panic("Old working set should be removed properly%x\n", (freeFrames - sys_calculate_free_frames()));

		if(addEnv->page_WS_max_size != 10 || factEnv->page_WS_max_size != 15 || helloEnv->page_WS_max_size != 10)
			panic("The programs' working set size should be doubled only if it is full\n");

		for(int i = 0; i < 10; i++)
f011721a:	ff 45 d8             	incl   -0x28(%ebp)
f011721d:	83 7d d8 09          	cmpl   $0x9,-0x28(%ebp)
f0117221:	7e 80                	jle    f01171a3 <test_priority_normal_and_lower+0x4c7>

			if(add_TimeStamp[i] != addEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one");
		}

		for(int i = 0; i < 15; i++)
f0117223:	c7 45 d4 00 00 00 00 	movl   $0x0,-0x2c(%ebp)
f011722a:	eb 7a                	jmp    f01172a6 <test_priority_normal_and_lower+0x5ca>
		{
			if(fact_WS[i] != factEnv->ptr_pageWorkingSet[i].virtual_address)
f011722c:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f011722f:	8b 8c 85 80 fd ff ff 	mov    -0x280(%ebp,%eax,4),%ecx
f0117236:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0117239:	8b 58 78             	mov    0x78(%eax),%ebx
f011723c:	8b 55 d4             	mov    -0x2c(%ebp),%edx
f011723f:	89 d0                	mov    %edx,%eax
f0117241:	01 c0                	add    %eax,%eax
f0117243:	01 d0                	add    %edx,%eax
f0117245:	c1 e0 03             	shl    $0x3,%eax
f0117248:	01 d8                	add    %ebx,%eax
f011724a:	8b 00                	mov    (%eax),%eax
f011724c:	39 c1                	cmp    %eax,%ecx
f011724e:	74 17                	je     f0117267 <test_priority_normal_and_lower+0x58b>
				panic("Working set should be moved properly to the new one");
f0117250:	83 ec 04             	sub    $0x4,%esp
f0117253:	68 c8 ae 13 f0       	push   $0xf013aec8
f0117258:	68 38 01 00 00       	push   $0x138
f011725d:	68 f1 ac 13 f0       	push   $0xf013acf1
f0117262:	e8 9e 8f fe ff       	call   f0100205 <_panic>

			if(fact_TimeStamp[i] != factEnv->ptr_pageWorkingSet[i].time_stamp)
f0117267:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f011726a:	8b 8c 85 f8 fd ff ff 	mov    -0x208(%ebp,%eax,4),%ecx
f0117271:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0117274:	8b 58 78             	mov    0x78(%eax),%ebx
f0117277:	8b 55 d4             	mov    -0x2c(%ebp),%edx
f011727a:	89 d0                	mov    %edx,%eax
f011727c:	01 c0                	add    %eax,%eax
f011727e:	01 d0                	add    %edx,%eax
f0117280:	c1 e0 03             	shl    $0x3,%eax
f0117283:	01 d8                	add    %ebx,%eax
f0117285:	8b 40 08             	mov    0x8(%eax),%eax
f0117288:	39 c1                	cmp    %eax,%ecx
f011728a:	74 17                	je     f01172a3 <test_priority_normal_and_lower+0x5c7>
				panic("Working set should be moved properly to the new one");
f011728c:	83 ec 04             	sub    $0x4,%esp
f011728f:	68 c8 ae 13 f0       	push   $0xf013aec8
f0117294:	68 3b 01 00 00       	push   $0x13b
f0117299:	68 f1 ac 13 f0       	push   $0xf013acf1
f011729e:	e8 62 8f fe ff       	call   f0100205 <_panic>

			if(add_TimeStamp[i] != addEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one");
		}

		for(int i = 0; i < 15; i++)
f01172a3:	ff 45 d4             	incl   -0x2c(%ebp)
f01172a6:	83 7d d4 0e          	cmpl   $0xe,-0x2c(%ebp)
f01172aa:	7e 80                	jle    f011722c <test_priority_normal_and_lower+0x550>

			if(fact_TimeStamp[i] != factEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one");
		}

		for(int i = 0; i < 10; i++)
f01172ac:	c7 45 d0 00 00 00 00 	movl   $0x0,-0x30(%ebp)
f01172b3:	eb 7a                	jmp    f011732f <test_priority_normal_and_lower+0x653>
		{
			if(hello_WS[i] != helloEnv->ptr_pageWorkingSet[i].virtual_address)
f01172b5:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01172b8:	8b 8c 85 70 fe ff ff 	mov    -0x190(%ebp,%eax,4),%ecx
f01172bf:	8b 45 b0             	mov    -0x50(%ebp),%eax
f01172c2:	8b 58 78             	mov    0x78(%eax),%ebx
f01172c5:	8b 55 d0             	mov    -0x30(%ebp),%edx
f01172c8:	89 d0                	mov    %edx,%eax
f01172ca:	01 c0                	add    %eax,%eax
f01172cc:	01 d0                	add    %edx,%eax
f01172ce:	c1 e0 03             	shl    $0x3,%eax
f01172d1:	01 d8                	add    %ebx,%eax
f01172d3:	8b 00                	mov    (%eax),%eax
f01172d5:	39 c1                	cmp    %eax,%ecx
f01172d7:	74 17                	je     f01172f0 <test_priority_normal_and_lower+0x614>
				panic("Working set should be moved properly to the new one");
f01172d9:	83 ec 04             	sub    $0x4,%esp
f01172dc:	68 c8 ae 13 f0       	push   $0xf013aec8
f01172e1:	68 41 01 00 00       	push   $0x141
f01172e6:	68 f1 ac 13 f0       	push   $0xf013acf1
f01172eb:	e8 15 8f fe ff       	call   f0100205 <_panic>

			if(hello_TimeStamp[i] != helloEnv->ptr_pageWorkingSet[i].time_stamp)
f01172f0:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01172f3:	8b 8c 85 10 ff ff ff 	mov    -0xf0(%ebp,%eax,4),%ecx
f01172fa:	8b 45 b0             	mov    -0x50(%ebp),%eax
f01172fd:	8b 58 78             	mov    0x78(%eax),%ebx
f0117300:	8b 55 d0             	mov    -0x30(%ebp),%edx
f0117303:	89 d0                	mov    %edx,%eax
f0117305:	01 c0                	add    %eax,%eax
f0117307:	01 d0                	add    %edx,%eax
f0117309:	c1 e0 03             	shl    $0x3,%eax
f011730c:	01 d8                	add    %ebx,%eax
f011730e:	8b 40 08             	mov    0x8(%eax),%eax
f0117311:	39 c1                	cmp    %eax,%ecx
f0117313:	74 17                	je     f011732c <test_priority_normal_and_lower+0x650>
				panic("Working set should be moved properly to the new one");
f0117315:	83 ec 04             	sub    $0x4,%esp
f0117318:	68 c8 ae 13 f0       	push   $0xf013aec8
f011731d:	68 44 01 00 00       	push   $0x144
f0117322:	68 f1 ac 13 f0       	push   $0xf013acf1
f0117327:	e8 d9 8e fe ff       	call   f0100205 <_panic>

			if(fact_TimeStamp[i] != factEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one");
		}

		for(int i = 0; i < 10; i++)
f011732c:	ff 45 d0             	incl   -0x30(%ebp)
f011732f:	83 7d d0 09          	cmpl   $0x9,-0x30(%ebp)
f0117333:	7e 80                	jle    f01172b5 <test_priority_normal_and_lower+0x5d9>
			if(hello_TimeStamp[i] != helloEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one");
		}

		// Set priority to low
		freeFrames = sys_calculate_free_frames();
f0117335:	e8 63 58 ff ff       	call   f010cb9d <sys_calculate_free_frames>
f011733a:	89 45 c0             	mov    %eax,-0x40(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011733d:	e8 86 ca fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0117342:	89 45 bc             	mov    %eax,-0x44(%ebp)
		set_program_priority(addEnv, 1);
f0117345:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0117348:	83 ec 08             	sub    $0x8,%esp
f011734b:	6a 01                	push   $0x1
f011734d:	50                   	push   %eax
f011734e:	e8 95 3c ff ff       	call   f010afe8 <set_program_priority>
f0117353:	83 c4 10             	add    $0x10,%esp
		set_program_priority(factEnv, 1);
f0117356:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0117359:	83 ec 08             	sub    $0x8,%esp
f011735c:	6a 01                	push   $0x1
f011735e:	50                   	push   %eax
f011735f:	e8 84 3c ff ff       	call   f010afe8 <set_program_priority>
f0117364:	83 c4 10             	add    $0x10,%esp
		set_program_priority(helloEnv, 1);
f0117367:	8b 45 b0             	mov    -0x50(%ebp),%eax
f011736a:	83 ec 08             	sub    $0x8,%esp
f011736d:	6a 01                	push   $0x1
f011736f:	50                   	push   %eax
f0117370:	e8 73 3c ff ff       	call   f010afe8 <set_program_priority>
f0117375:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Old working set should be removed properly\n");
f0117378:	e8 4b ca fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011737d:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f0117380:	74 17                	je     f0117399 <test_priority_normal_and_lower+0x6bd>
f0117382:	83 ec 04             	sub    $0x4,%esp
f0117385:	68 58 ad 13 f0       	push   $0xf013ad58
f011738a:	68 4d 01 00 00       	push   $0x14d
f011738f:	68 f1 ac 13 f0       	push   $0xf013acf1
f0117394:	e8 6c 8e fe ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != (5+3+5)) panic("Old working set and extra pages in WS should be removed properly %d\n");
f0117399:	e8 ff 57 ff ff       	call   f010cb9d <sys_calculate_free_frames>
f011739e:	2b 45 c0             	sub    -0x40(%ebp),%eax
f01173a1:	83 f8 0d             	cmp    $0xd,%eax
f01173a4:	74 17                	je     f01173bd <test_priority_normal_and_lower+0x6e1>
f01173a6:	83 ec 04             	sub    $0x4,%esp
f01173a9:	68 64 b0 13 f0       	push   $0xf013b064
f01173ae:	68 4e 01 00 00       	push   $0x14e
f01173b3:	68 f1 ac 13 f0       	push   $0xf013acf1
f01173b8:	e8 48 8e fe ff       	call   f0100205 <_panic>

		if(addEnv->page_WS_max_size != 5 || factEnv->page_WS_max_size != 7 || helloEnv->page_WS_max_size != 5)
f01173bd:	8b 45 b8             	mov    -0x48(%ebp),%eax
f01173c0:	8b 40 74             	mov    0x74(%eax),%eax
f01173c3:	83 f8 05             	cmp    $0x5,%eax
f01173c6:	75 16                	jne    f01173de <test_priority_normal_and_lower+0x702>
f01173c8:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01173cb:	8b 40 74             	mov    0x74(%eax),%eax
f01173ce:	83 f8 07             	cmp    $0x7,%eax
f01173d1:	75 0b                	jne    f01173de <test_priority_normal_and_lower+0x702>
f01173d3:	8b 45 b0             	mov    -0x50(%ebp),%eax
f01173d6:	8b 40 74             	mov    0x74(%eax),%eax
f01173d9:	83 f8 05             	cmp    $0x5,%eax
f01173dc:	74 17                	je     f01173f5 <test_priority_normal_and_lower+0x719>
			panic("The programs' working set size should be half\n");
f01173de:	83 ec 04             	sub    $0x4,%esp
f01173e1:	68 ac b0 13 f0       	push   $0xf013b0ac
f01173e6:	68 51 01 00 00       	push   $0x151
f01173eb:	68 f1 ac 13 f0       	push   $0xf013acf1
f01173f0:	e8 10 8e fe ff       	call   f0100205 <_panic>


		freeFrames = sys_calculate_free_frames();
f01173f5:	e8 a3 57 ff ff       	call   f010cb9d <sys_calculate_free_frames>
f01173fa:	89 45 c0             	mov    %eax,-0x40(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01173fd:	e8 c6 c9 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0117402:	89 45 bc             	mov    %eax,-0x44(%ebp)
		set_program_priority(addEnv, 1);
f0117405:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0117408:	83 ec 08             	sub    $0x8,%esp
f011740b:	6a 01                	push   $0x1
f011740d:	50                   	push   %eax
f011740e:	e8 d5 3b ff ff       	call   f010afe8 <set_program_priority>
f0117413:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Old working set should be removed properly\n");
f0117416:	e8 ad c9 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011741b:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f011741e:	74 17                	je     f0117437 <test_priority_normal_and_lower+0x75b>
f0117420:	83 ec 04             	sub    $0x4,%esp
f0117423:	68 58 ad 13 f0       	push   $0xf013ad58
f0117428:	68 57 01 00 00       	push   $0x157
f011742d:	68 f1 ac 13 f0       	push   $0xf013acf1
f0117432:	e8 ce 8d fe ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 3) panic("Old working set should be removed properly\n");
f0117437:	e8 61 57 ff ff       	call   f010cb9d <sys_calculate_free_frames>
f011743c:	2b 45 c0             	sub    -0x40(%ebp),%eax
f011743f:	83 f8 03             	cmp    $0x3,%eax
f0117442:	74 17                	je     f011745b <test_priority_normal_and_lower+0x77f>
f0117444:	83 ec 04             	sub    $0x4,%esp
f0117447:	68 58 ad 13 f0       	push   $0xf013ad58
f011744c:	68 58 01 00 00       	push   $0x158
f0117451:	68 f1 ac 13 f0       	push   $0xf013acf1
f0117456:	e8 aa 8d fe ff       	call   f0100205 <_panic>

		if(addEnv->page_WS_max_size != 2 || factEnv->page_WS_max_size != 7 || helloEnv->page_WS_max_size != 5)
f011745b:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011745e:	8b 40 74             	mov    0x74(%eax),%eax
f0117461:	83 f8 02             	cmp    $0x2,%eax
f0117464:	75 16                	jne    f011747c <test_priority_normal_and_lower+0x7a0>
f0117466:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0117469:	8b 40 74             	mov    0x74(%eax),%eax
f011746c:	83 f8 07             	cmp    $0x7,%eax
f011746f:	75 0b                	jne    f011747c <test_priority_normal_and_lower+0x7a0>
f0117471:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0117474:	8b 40 74             	mov    0x74(%eax),%eax
f0117477:	83 f8 05             	cmp    $0x5,%eax
f011747a:	74 17                	je     f0117493 <test_priority_normal_and_lower+0x7b7>
			panic("The programs' working set size should be doubled if full\n");
f011747c:	83 ec 04             	sub    $0x4,%esp
f011747f:	68 8c ae 13 f0       	push   $0xf013ae8c
f0117484:	68 5b 01 00 00       	push   $0x15b
f0117489:	68 f1 ac 13 f0       	push   $0xf013acf1
f011748e:	e8 72 8d fe ff       	call   f0100205 <_panic>

		for(int i = 0; i < 2; i++)
f0117493:	c7 45 cc 00 00 00 00 	movl   $0x0,-0x34(%ebp)
f011749a:	e9 80 00 00 00       	jmp    f011751f <test_priority_normal_and_lower+0x843>
		{
			if(add_WS[i+8] != addEnv->ptr_pageWorkingSet[i].virtual_address)
f011749f:	8b 45 cc             	mov    -0x34(%ebp),%eax
f01174a2:	83 c0 08             	add    $0x8,%eax
f01174a5:	8b 8c 85 50 fb ff ff 	mov    -0x4b0(%ebp,%eax,4),%ecx
f01174ac:	8b 45 b8             	mov    -0x48(%ebp),%eax
f01174af:	8b 58 78             	mov    0x78(%eax),%ebx
f01174b2:	8b 55 cc             	mov    -0x34(%ebp),%edx
f01174b5:	89 d0                	mov    %edx,%eax
f01174b7:	01 c0                	add    %eax,%eax
f01174b9:	01 d0                	add    %edx,%eax
f01174bb:	c1 e0 03             	shl    $0x3,%eax
f01174be:	01 d8                	add    %ebx,%eax
f01174c0:	8b 00                	mov    (%eax),%eax
f01174c2:	39 c1                	cmp    %eax,%ecx
f01174c4:	74 17                	je     f01174dd <test_priority_normal_and_lower+0x801>
				panic("Working set should be moved properly to the new one, removed pages are chosen based on replacement policy");
f01174c6:	83 ec 04             	sub    $0x4,%esp
f01174c9:	68 dc b0 13 f0       	push   $0xf013b0dc
f01174ce:	68 60 01 00 00       	push   $0x160
f01174d3:	68 f1 ac 13 f0       	push   $0xf013acf1
f01174d8:	e8 28 8d fe ff       	call   f0100205 <_panic>

			if(add_TimeStamp[i+8] != addEnv->ptr_pageWorkingSet[i].time_stamp)
f01174dd:	8b 45 cc             	mov    -0x34(%ebp),%eax
f01174e0:	83 c0 08             	add    $0x8,%eax
f01174e3:	8b 8c 85 a0 fb ff ff 	mov    -0x460(%ebp,%eax,4),%ecx
f01174ea:	8b 45 b8             	mov    -0x48(%ebp),%eax
f01174ed:	8b 58 78             	mov    0x78(%eax),%ebx
f01174f0:	8b 55 cc             	mov    -0x34(%ebp),%edx
f01174f3:	89 d0                	mov    %edx,%eax
f01174f5:	01 c0                	add    %eax,%eax
f01174f7:	01 d0                	add    %edx,%eax
f01174f9:	c1 e0 03             	shl    $0x3,%eax
f01174fc:	01 d8                	add    %ebx,%eax
f01174fe:	8b 40 08             	mov    0x8(%eax),%eax
f0117501:	39 c1                	cmp    %eax,%ecx
f0117503:	74 17                	je     f011751c <test_priority_normal_and_lower+0x840>
				panic("Working set should be moved properly to the new one, removed pages are chosen based on replacement policy");
f0117505:	83 ec 04             	sub    $0x4,%esp
f0117508:	68 dc b0 13 f0       	push   $0xf013b0dc
f011750d:	68 63 01 00 00       	push   $0x163
f0117512:	68 f1 ac 13 f0       	push   $0xf013acf1
f0117517:	e8 e9 8c fe ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 3) panic("Old working set should be removed properly\n");

		if(addEnv->page_WS_max_size != 2 || factEnv->page_WS_max_size != 7 || helloEnv->page_WS_max_size != 5)
			panic("The programs' working set size should be doubled if full\n");

		for(int i = 0; i < 2; i++)
f011751c:	ff 45 cc             	incl   -0x34(%ebp)
f011751f:	83 7d cc 01          	cmpl   $0x1,-0x34(%ebp)
f0117523:	0f 8e 76 ff ff ff    	jle    f011749f <test_priority_normal_and_lower+0x7c3>

			if(add_TimeStamp[i+8] != addEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one, removed pages are chosen based on replacement policy");
		}

		for(int i = 0; i < 7; i++)
f0117529:	c7 45 c8 00 00 00 00 	movl   $0x0,-0x38(%ebp)
f0117530:	e9 80 00 00 00       	jmp    f01175b5 <test_priority_normal_and_lower+0x8d9>
		{
			if(fact_WS[i+3] != factEnv->ptr_pageWorkingSet[i].virtual_address)
f0117535:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0117538:	83 c0 03             	add    $0x3,%eax
f011753b:	8b 8c 85 80 fd ff ff 	mov    -0x280(%ebp,%eax,4),%ecx
f0117542:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0117545:	8b 58 78             	mov    0x78(%eax),%ebx
f0117548:	8b 55 c8             	mov    -0x38(%ebp),%edx
f011754b:	89 d0                	mov    %edx,%eax
f011754d:	01 c0                	add    %eax,%eax
f011754f:	01 d0                	add    %edx,%eax
f0117551:	c1 e0 03             	shl    $0x3,%eax
f0117554:	01 d8                	add    %ebx,%eax
f0117556:	8b 00                	mov    (%eax),%eax
f0117558:	39 c1                	cmp    %eax,%ecx
f011755a:	74 17                	je     f0117573 <test_priority_normal_and_lower+0x897>
				panic("%d Working set should be moved properly to the new one, removed pages are chosen based on replacement policy", i);
f011755c:	ff 75 c8             	pushl  -0x38(%ebp)
f011755f:	68 48 b1 13 f0       	push   $0xf013b148
f0117564:	68 69 01 00 00       	push   $0x169
f0117569:	68 f1 ac 13 f0       	push   $0xf013acf1
f011756e:	e8 92 8c fe ff       	call   f0100205 <_panic>

			if(fact_TimeStamp[i+3] != factEnv->ptr_pageWorkingSet[i].time_stamp)
f0117573:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0117576:	83 c0 03             	add    $0x3,%eax
f0117579:	8b 8c 85 f8 fd ff ff 	mov    -0x208(%ebp,%eax,4),%ecx
f0117580:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0117583:	8b 58 78             	mov    0x78(%eax),%ebx
f0117586:	8b 55 c8             	mov    -0x38(%ebp),%edx
f0117589:	89 d0                	mov    %edx,%eax
f011758b:	01 c0                	add    %eax,%eax
f011758d:	01 d0                	add    %edx,%eax
f011758f:	c1 e0 03             	shl    $0x3,%eax
f0117592:	01 d8                	add    %ebx,%eax
f0117594:	8b 40 08             	mov    0x8(%eax),%eax
f0117597:	39 c1                	cmp    %eax,%ecx
f0117599:	74 17                	je     f01175b2 <test_priority_normal_and_lower+0x8d6>
				panic("Working set should be moved properly to the new one, removed pages are chosen based on replacement policy");
f011759b:	83 ec 04             	sub    $0x4,%esp
f011759e:	68 dc b0 13 f0       	push   $0xf013b0dc
f01175a3:	68 6c 01 00 00       	push   $0x16c
f01175a8:	68 f1 ac 13 f0       	push   $0xf013acf1
f01175ad:	e8 53 8c fe ff       	call   f0100205 <_panic>

			if(add_TimeStamp[i+8] != addEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one, removed pages are chosen based on replacement policy");
		}

		for(int i = 0; i < 7; i++)
f01175b2:	ff 45 c8             	incl   -0x38(%ebp)
f01175b5:	83 7d c8 06          	cmpl   $0x6,-0x38(%ebp)
f01175b9:	0f 8e 76 ff ff ff    	jle    f0117535 <test_priority_normal_and_lower+0x859>

			if(fact_TimeStamp[i+3] != factEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one, removed pages are chosen based on replacement policy");
		}

		for(int i = 0; i < 5; i++)
f01175bf:	c7 45 c4 00 00 00 00 	movl   $0x0,-0x3c(%ebp)
f01175c6:	e9 80 00 00 00       	jmp    f011764b <test_priority_normal_and_lower+0x96f>
		{
			if(hello_WS[i+5] != helloEnv->ptr_pageWorkingSet[i].virtual_address)
f01175cb:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f01175ce:	83 c0 05             	add    $0x5,%eax
f01175d1:	8b 8c 85 70 fe ff ff 	mov    -0x190(%ebp,%eax,4),%ecx
f01175d8:	8b 45 b0             	mov    -0x50(%ebp),%eax
f01175db:	8b 58 78             	mov    0x78(%eax),%ebx
f01175de:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f01175e1:	89 d0                	mov    %edx,%eax
f01175e3:	01 c0                	add    %eax,%eax
f01175e5:	01 d0                	add    %edx,%eax
f01175e7:	c1 e0 03             	shl    $0x3,%eax
f01175ea:	01 d8                	add    %ebx,%eax
f01175ec:	8b 00                	mov    (%eax),%eax
f01175ee:	39 c1                	cmp    %eax,%ecx
f01175f0:	74 17                	je     f0117609 <test_priority_normal_and_lower+0x92d>
				panic("Working set should be moved properly to the new one, removed pages are chosen based on replacement policy");
f01175f2:	83 ec 04             	sub    $0x4,%esp
f01175f5:	68 dc b0 13 f0       	push   $0xf013b0dc
f01175fa:	68 72 01 00 00       	push   $0x172
f01175ff:	68 f1 ac 13 f0       	push   $0xf013acf1
f0117604:	e8 fc 8b fe ff       	call   f0100205 <_panic>

			if(hello_TimeStamp[i+5] != helloEnv->ptr_pageWorkingSet[i].time_stamp)
f0117609:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f011760c:	83 c0 05             	add    $0x5,%eax
f011760f:	8b 8c 85 10 ff ff ff 	mov    -0xf0(%ebp,%eax,4),%ecx
f0117616:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0117619:	8b 58 78             	mov    0x78(%eax),%ebx
f011761c:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f011761f:	89 d0                	mov    %edx,%eax
f0117621:	01 c0                	add    %eax,%eax
f0117623:	01 d0                	add    %edx,%eax
f0117625:	c1 e0 03             	shl    $0x3,%eax
f0117628:	01 d8                	add    %ebx,%eax
f011762a:	8b 40 08             	mov    0x8(%eax),%eax
f011762d:	39 c1                	cmp    %eax,%ecx
f011762f:	74 17                	je     f0117648 <test_priority_normal_and_lower+0x96c>
				panic("Working set should be moved properly to the new one, removed pages are chosen based on replacement policy");
f0117631:	83 ec 04             	sub    $0x4,%esp
f0117634:	68 dc b0 13 f0       	push   $0xf013b0dc
f0117639:	68 75 01 00 00       	push   $0x175
f011763e:	68 f1 ac 13 f0       	push   $0xf013acf1
f0117643:	e8 bd 8b fe ff       	call   f0100205 <_panic>

			if(fact_TimeStamp[i+3] != factEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one, removed pages are chosen based on replacement policy");
		}

		for(int i = 0; i < 5; i++)
f0117648:	ff 45 c4             	incl   -0x3c(%ebp)
f011764b:	83 7d c4 04          	cmpl   $0x4,-0x3c(%ebp)
f011764f:	0f 8e 76 ff ff ff    	jle    f01175cb <test_priority_normal_and_lower+0x8ef>

			if(hello_TimeStamp[i+5] != helloEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one, removed pages are chosen based on replacement policy");
		}

		set_program_priority(addEnv, 5);
f0117655:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0117658:	83 ec 08             	sub    $0x8,%esp
f011765b:	6a 05                	push   $0x5
f011765d:	50                   	push   %eax
f011765e:	e8 85 39 ff ff       	call   f010afe8 <set_program_priority>
f0117663:	83 c4 10             	add    $0x10,%esp
		set_program_priority(addEnv, 5);
f0117666:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0117669:	83 ec 08             	sub    $0x8,%esp
f011766c:	6a 05                	push   $0x5
f011766e:	50                   	push   %eax
f011766f:	e8 74 39 ff ff       	call   f010afe8 <set_program_priority>
f0117674:	83 c4 10             	add    $0x10,%esp

		char command4[100] = "runall";
f0117677:	c7 85 1c fd ff ff 72 	movl   $0x616e7572,-0x2e4(%ebp)
f011767e:	75 6e 61 
f0117681:	c7 85 20 fd ff ff 6c 	movl   $0x6c6c,-0x2e0(%ebp)
f0117688:	6c 00 00 
f011768b:	8d 95 24 fd ff ff    	lea    -0x2dc(%ebp),%edx
f0117691:	b9 17 00 00 00       	mov    $0x17,%ecx
f0117696:	b8 00 00 00 00       	mov    $0x0,%eax
f011769b:	89 d7                	mov    %edx,%edi
f011769d:	f3 ab                	rep stos %eax,%es:(%edi)
		execute_command(command4);
f011769f:	83 ec 0c             	sub    $0xc,%esp
f01176a2:	8d 85 1c fd ff ff    	lea    -0x2e4(%ebp),%eax
f01176a8:	50                   	push   %eax
f01176a9:	e8 c2 96 fe ff       	call   f0100d70 <execute_command>
f01176ae:	83 c4 10             	add    $0x10,%esp
	}
	else
	{
		cprintf("\nCongratulations!! test priority 2 completed successfully.\n");
	}
}
f01176b1:	eb 10                	jmp    f01176c3 <test_priority_normal_and_lower+0x9e7>
		char command4[100] = "runall";
		execute_command(command4);
	}
	else
	{
		cprintf("\nCongratulations!! test priority 2 completed successfully.\n");
f01176b3:	83 ec 0c             	sub    $0xc,%esp
f01176b6:	68 b8 b1 13 f0       	push   $0xf013b1b8
f01176bb:	e8 4e 96 fe ff       	call   f0100d0e <cprintf>
f01176c0:	83 c4 10             	add    $0x10,%esp
	}
}
f01176c3:	90                   	nop
f01176c4:	8d 65 f4             	lea    -0xc(%ebp),%esp
f01176c7:	5b                   	pop    %ebx
f01176c8:	5e                   	pop    %esi
f01176c9:	5f                   	pop    %edi
f01176ca:	5d                   	pop    %ebp
f01176cb:	c3                   	ret    

f01176cc <isKHeapPlacementStrategyNEXTFIT>:
static inline void setKHeapPlacementStrategyWORSTFIT(){_KHeapPlacementStrategy = KHP_PLACE_WORSTFIT;}

static inline uint8 isKHeapPlacementStrategyCONTALLOC(){if(_KHeapPlacementStrategy == KHP_PLACE_CONTALLOC) return 1; return 0;}
static inline uint8 isKHeapPlacementStrategyFIRSTFIT(){if(_KHeapPlacementStrategy == KHP_PLACE_FIRSTFIT) return 1; return 0;}
static inline uint8 isKHeapPlacementStrategyBESTFIT(){if(_KHeapPlacementStrategy == KHP_PLACE_BESTFIT) return 1; return 0;}
static inline uint8 isKHeapPlacementStrategyNEXTFIT(){if(_KHeapPlacementStrategy == KHP_PLACE_NEXTFIT) return 1; return 0;}
f01176cc:	55                   	push   %ebp
f01176cd:	89 e5                	mov    %esp,%ebp
f01176cf:	a1 1c 26 78 f0       	mov    0xf078261c,%eax
f01176d4:	83 f8 03             	cmp    $0x3,%eax
f01176d7:	75 04                	jne    f01176dd <isKHeapPlacementStrategyNEXTFIT+0x11>
f01176d9:	b0 01                	mov    $0x1,%al
f01176db:	eb 02                	jmp    f01176df <isKHeapPlacementStrategyNEXTFIT+0x13>
f01176dd:	b0 00                	mov    $0x0,%al
f01176df:	5d                   	pop    %ebp
f01176e0:	c3                   	ret    

f01176e1 <test_kmalloc>:
	int c;
};


int test_kmalloc()
{
f01176e1:	55                   	push   %ebp
f01176e2:	89 e5                	mov    %esp,%ebp
f01176e4:	57                   	push   %edi
f01176e5:	53                   	push   %ebx
f01176e6:	81 ec c0 01 00 00    	sub    $0x1c0,%esp
	cprintf("==============================================\n");
f01176ec:	83 ec 0c             	sub    $0xc,%esp
f01176ef:	68 bc b2 13 f0       	push   $0xf013b2bc
f01176f4:	e8 15 96 fe ff       	call   f0100d0e <cprintf>
f01176f9:	83 c4 10             	add    $0x10,%esp
	cprintf("MAKE SURE to have a FRESH RUN for this test\n(i.e. don't run any program/test before it)\n");
f01176fc:	83 ec 0c             	sub    $0xc,%esp
f01176ff:	68 ec b2 13 f0       	push   $0xf013b2ec
f0117704:	e8 05 96 fe ff       	call   f0100d0e <cprintf>
f0117709:	83 c4 10             	add    $0x10,%esp
	cprintf("==============================================\n");
f011770c:	83 ec 0c             	sub    $0xc,%esp
f011770f:	68 bc b2 13 f0       	push   $0xf013b2bc
f0117714:	e8 f5 95 fe ff       	call   f0100d0e <cprintf>
f0117719:	83 c4 10             	add    $0x10,%esp

	char minByte = 1<<7;
f011771c:	c6 45 f3 80          	movb   $0x80,-0xd(%ebp)
	char maxByte = 0x7F;
f0117720:	c6 45 f2 7f          	movb   $0x7f,-0xe(%ebp)
	short minShort = 1<<15 ;
f0117724:	66 c7 45 f0 00 80    	movw   $0x8000,-0x10(%ebp)
	short maxShort = 0x7FFF;
f011772a:	66 c7 45 ee ff 7f    	movw   $0x7fff,-0x12(%ebp)
	int minInt = 1<<31 ;
f0117730:	c7 45 e8 00 00 00 80 	movl   $0x80000000,-0x18(%ebp)
	int maxInt = 0x7FFFFFFF;
f0117737:	c7 45 e4 ff ff ff 7f 	movl   $0x7fffffff,-0x1c(%ebp)
	char *byteArr, *byteArr2 ;
	short *shortArr, *shortArr2 ;
	int *intArr;
	struct MyStruct *structArr ;
	int lastIndexOfByte, lastIndexOfByte2, lastIndexOfShort, lastIndexOfShort2, lastIndexOfInt, lastIndexOfStruct;
	int start_freeFrames = sys_calculate_free_frames() ;
f011773e:	e8 5a 54 ff ff       	call   f010cb9d <sys_calculate_free_frames>
f0117743:	89 45 e0             	mov    %eax,-0x20(%ebp)

	void* ptr_allocations[20] = {0};
f0117746:	8d 95 40 fe ff ff    	lea    -0x1c0(%ebp),%edx
f011774c:	b9 14 00 00 00       	mov    $0x14,%ecx
f0117751:	b8 00 00 00 00       	mov    $0x0,%eax
f0117756:	89 d7                	mov    %edx,%edi
f0117758:	f3 ab                	rep stos %eax,%es:(%edi)
	{
		//Insufficient space
		int freeFrames = sys_calculate_free_frames() ;
f011775a:	e8 3e 54 ff ff       	call   f010cb9d <sys_calculate_free_frames>
f011775f:	89 45 dc             	mov    %eax,-0x24(%ebp)
		int freeDiskFrames = pf_calculate_free_frames() ;
f0117762:	e8 61 c6 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0117767:	89 45 d8             	mov    %eax,-0x28(%ebp)
		uint32 sizeOfKHeap = (KERNEL_HEAP_MAX - ACTUAL_START + 1) ;
f011776a:	c7 45 d4 00 10 00 00 	movl   $0x1000,-0x2c(%ebp)
f0117771:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0117774:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0117779:	89 45 d0             	mov    %eax,-0x30(%ebp)
f011777c:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011777f:	ba 00 00 00 00       	mov    $0x0,%edx
f0117784:	f7 75 d4             	divl   -0x2c(%ebp)
f0117787:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011778a:	29 d0                	sub    %edx,%eax
f011778c:	89 c1                	mov    %eax,%ecx
f011778e:	c7 45 cc 00 10 00 00 	movl   $0x1000,-0x34(%ebp)
f0117795:	a0 40 26 78 f0       	mov    0xf0782640,%al
f011779a:	0f b6 d0             	movzbl %al,%edx
f011779d:	8b 45 cc             	mov    -0x34(%ebp),%eax
f01177a0:	01 d0                	add    %edx,%eax
f01177a2:	48                   	dec    %eax
f01177a3:	89 45 c8             	mov    %eax,-0x38(%ebp)
f01177a6:	8b 45 c8             	mov    -0x38(%ebp),%eax
f01177a9:	ba 00 00 00 00       	mov    $0x0,%edx
f01177ae:	f7 75 cc             	divl   -0x34(%ebp)
f01177b1:	8b 45 c8             	mov    -0x38(%ebp),%eax
f01177b4:	29 d0                	sub    %edx,%eax
f01177b6:	01 c1                	add    %eax,%ecx
f01177b8:	c7 45 c4 00 10 00 00 	movl   $0x1000,-0x3c(%ebp)
f01177bf:	a0 40 26 78 f0       	mov    0xf0782640,%al
f01177c4:	0f b6 c0             	movzbl %al,%eax
f01177c7:	c1 e0 04             	shl    $0x4,%eax
f01177ca:	89 c2                	mov    %eax,%edx
f01177cc:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f01177cf:	01 d0                	add    %edx,%eax
f01177d1:	48                   	dec    %eax
f01177d2:	89 45 c0             	mov    %eax,-0x40(%ebp)
f01177d5:	8b 45 c0             	mov    -0x40(%ebp),%eax
f01177d8:	ba 00 00 00 00       	mov    $0x0,%edx
f01177dd:	f7 75 c4             	divl   -0x3c(%ebp)
f01177e0:	8b 45 c0             	mov    -0x40(%ebp),%eax
f01177e3:	29 d0                	sub    %edx,%eax
f01177e5:	01 c8                	add    %ecx,%eax
f01177e7:	ba 01 b0 ff 09       	mov    $0x9ffb001,%edx
f01177ec:	29 c2                	sub    %eax,%edx
f01177ee:	89 d0                	mov    %edx,%eax
f01177f0:	89 45 bc             	mov    %eax,-0x44(%ebp)
		ptr_allocations[0] = kmalloc(sizeOfKHeap);
f01177f3:	83 ec 0c             	sub    $0xc,%esp
f01177f6:	ff 75 bc             	pushl  -0x44(%ebp)
f01177f9:	e8 87 00 ff ff       	call   f0107885 <kmalloc>
f01177fe:	83 c4 10             	add    $0x10,%esp
f0117801:	89 85 40 fe ff ff    	mov    %eax,-0x1c0(%ebp)
		if (ptr_allocations[0] != NULL) panic("Allocating insufficient space: should return NULL");
f0117807:	8b 85 40 fe ff ff    	mov    -0x1c0(%ebp),%eax
f011780d:	85 c0                	test   %eax,%eax
f011780f:	74 14                	je     f0117825 <test_kmalloc+0x144>
f0117811:	83 ec 04             	sub    $0x4,%esp
f0117814:	68 48 b3 13 f0       	push   $0xf013b348
f0117819:	6a 40                	push   $0x40
f011781b:	68 7a b3 13 f0       	push   $0xf013b37a
f0117820:	e8 e0 89 fe ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0117825:	e8 9e c5 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011782a:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011782d:	74 14                	je     f0117843 <test_kmalloc+0x162>
f011782f:	83 ec 04             	sub    $0x4,%esp
f0117832:	68 94 b3 13 f0       	push   $0xf013b394
f0117837:	6a 41                	push   $0x41
f0117839:	68 7a b3 13 f0       	push   $0xf013b37a
f011783e:	e8 c2 89 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Wrong allocation: pages are not loaded successfully into memory");
f0117843:	e8 55 53 ff ff       	call   f010cb9d <sys_calculate_free_frames>
f0117848:	89 c2                	mov    %eax,%edx
f011784a:	8b 45 dc             	mov    -0x24(%ebp),%eax
f011784d:	39 c2                	cmp    %eax,%edx
f011784f:	74 14                	je     f0117865 <test_kmalloc+0x184>
f0117851:	83 ec 04             	sub    $0x4,%esp
f0117854:	68 fc b3 13 f0       	push   $0xf013b3fc
f0117859:	6a 42                	push   $0x42
f011785b:	68 7a b3 13 f0       	push   $0xf013b37a
f0117860:	e8 a0 89 fe ff       	call   f0100205 <_panic>

		cprintf("\nkmalloc: current evaluation = 10%");
f0117865:	83 ec 0c             	sub    $0xc,%esp
f0117868:	68 3c b4 13 f0       	push   $0xf013b43c
f011786d:	e8 9c 94 fe ff       	call   f0100d0e <cprintf>
f0117872:	83 c4 10             	add    $0x10,%esp
		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f0117875:	e8 23 53 ff ff       	call   f010cb9d <sys_calculate_free_frames>
f011787a:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011787d:	e8 46 c5 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0117882:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[0] = kmalloc(2*Mega-kilo);
f0117885:	83 ec 0c             	sub    $0xc,%esp
f0117888:	68 00 fc 1f 00       	push   $0x1ffc00
f011788d:	e8 f3 ff fe ff       	call   f0107885 <kmalloc>
f0117892:	83 c4 10             	add    $0x10,%esp
f0117895:	89 85 40 fe ff ff    	mov    %eax,-0x1c0(%ebp)
		if ((uint32) ptr_allocations[0] !=  (ACTUAL_START)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f011789b:	8b 85 40 fe ff ff    	mov    -0x1c0(%ebp),%eax
f01178a1:	89 c1                	mov    %eax,%ecx
f01178a3:	c7 45 b8 00 10 00 00 	movl   $0x1000,-0x48(%ebp)
f01178aa:	8b 45 b8             	mov    -0x48(%ebp),%eax
f01178ad:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01178b2:	89 45 b4             	mov    %eax,-0x4c(%ebp)
f01178b5:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01178b8:	ba 00 00 00 00       	mov    $0x0,%edx
f01178bd:	f7 75 b8             	divl   -0x48(%ebp)
f01178c0:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01178c3:	29 d0                	sub    %edx,%eax
f01178c5:	89 c3                	mov    %eax,%ebx
f01178c7:	c7 45 b0 00 10 00 00 	movl   $0x1000,-0x50(%ebp)
f01178ce:	a0 40 26 78 f0       	mov    0xf0782640,%al
f01178d3:	0f b6 d0             	movzbl %al,%edx
f01178d6:	8b 45 b0             	mov    -0x50(%ebp),%eax
f01178d9:	01 d0                	add    %edx,%eax
f01178db:	48                   	dec    %eax
f01178dc:	89 45 ac             	mov    %eax,-0x54(%ebp)
f01178df:	8b 45 ac             	mov    -0x54(%ebp),%eax
f01178e2:	ba 00 00 00 00       	mov    $0x0,%edx
f01178e7:	f7 75 b0             	divl   -0x50(%ebp)
f01178ea:	8b 45 ac             	mov    -0x54(%ebp),%eax
f01178ed:	29 d0                	sub    %edx,%eax
f01178ef:	01 c3                	add    %eax,%ebx
f01178f1:	c7 45 a8 00 10 00 00 	movl   $0x1000,-0x58(%ebp)
f01178f8:	a0 40 26 78 f0       	mov    0xf0782640,%al
f01178fd:	0f b6 c0             	movzbl %al,%eax
f0117900:	c1 e0 04             	shl    $0x4,%eax
f0117903:	89 c2                	mov    %eax,%edx
f0117905:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0117908:	01 d0                	add    %edx,%eax
f011790a:	48                   	dec    %eax
f011790b:	89 45 a4             	mov    %eax,-0x5c(%ebp)
f011790e:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0117911:	ba 00 00 00 00       	mov    $0x0,%edx
f0117916:	f7 75 a8             	divl   -0x58(%ebp)
f0117919:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f011791c:	29 d0                	sub    %edx,%eax
f011791e:	01 d8                	add    %ebx,%eax
f0117920:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f0117925:	39 c1                	cmp    %eax,%ecx
f0117927:	74 14                	je     f011793d <test_kmalloc+0x25c>
f0117929:	83 ec 04             	sub    $0x4,%esp
f011792c:	68 60 b4 13 f0       	push   $0xf013b460
f0117931:	6a 49                	push   $0x49
f0117933:	68 7a b3 13 f0       	push   $0xf013b37a
f0117938:	e8 c8 88 fe ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011793d:	e8 86 c4 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0117942:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0117945:	74 14                	je     f011795b <test_kmalloc+0x27a>
f0117947:	83 ec 04             	sub    $0x4,%esp
f011794a:	68 94 b3 13 f0       	push   $0xf013b394
f011794f:	6a 4a                	push   $0x4a
f0117951:	68 7a b3 13 f0       	push   $0xf013b37a
f0117956:	e8 aa 88 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f011795b:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f011795e:	e8 3a 52 ff ff       	call   f010cb9d <sys_calculate_free_frames>
f0117963:	29 c3                	sub    %eax,%ebx
f0117965:	89 d8                	mov    %ebx,%eax
f0117967:	3d 00 02 00 00       	cmp    $0x200,%eax
f011796c:	74 14                	je     f0117982 <test_kmalloc+0x2a1>
f011796e:	83 ec 04             	sub    $0x4,%esp
f0117971:	68 fc b3 13 f0       	push   $0xf013b3fc
f0117976:	6a 4b                	push   $0x4b
f0117978:	68 7a b3 13 f0       	push   $0xf013b37a
f011797d:	e8 83 88 fe ff       	call   f0100205 <_panic>

		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f0117982:	e8 16 52 ff ff       	call   f010cb9d <sys_calculate_free_frames>
f0117987:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011798a:	e8 39 c4 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011798f:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[1] = kmalloc(2*Mega-kilo);
f0117992:	83 ec 0c             	sub    $0xc,%esp
f0117995:	68 00 fc 1f 00       	push   $0x1ffc00
f011799a:	e8 e6 fe fe ff       	call   f0107885 <kmalloc>
f011799f:	83 c4 10             	add    $0x10,%esp
f01179a2:	89 85 44 fe ff ff    	mov    %eax,-0x1bc(%ebp)
		if ((uint32) ptr_allocations[1] != (ACTUAL_START + 2*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01179a8:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f01179ae:	89 c1                	mov    %eax,%ecx
f01179b0:	c7 45 a0 00 10 00 00 	movl   $0x1000,-0x60(%ebp)
f01179b7:	8b 45 a0             	mov    -0x60(%ebp),%eax
f01179ba:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01179bf:	89 45 9c             	mov    %eax,-0x64(%ebp)
f01179c2:	8b 45 9c             	mov    -0x64(%ebp),%eax
f01179c5:	ba 00 00 00 00       	mov    $0x0,%edx
f01179ca:	f7 75 a0             	divl   -0x60(%ebp)
f01179cd:	8b 45 9c             	mov    -0x64(%ebp),%eax
f01179d0:	29 d0                	sub    %edx,%eax
f01179d2:	89 c3                	mov    %eax,%ebx
f01179d4:	c7 45 98 00 10 00 00 	movl   $0x1000,-0x68(%ebp)
f01179db:	a0 40 26 78 f0       	mov    0xf0782640,%al
f01179e0:	0f b6 d0             	movzbl %al,%edx
f01179e3:	8b 45 98             	mov    -0x68(%ebp),%eax
f01179e6:	01 d0                	add    %edx,%eax
f01179e8:	48                   	dec    %eax
f01179e9:	89 45 94             	mov    %eax,-0x6c(%ebp)
f01179ec:	8b 45 94             	mov    -0x6c(%ebp),%eax
f01179ef:	ba 00 00 00 00       	mov    $0x0,%edx
f01179f4:	f7 75 98             	divl   -0x68(%ebp)
f01179f7:	8b 45 94             	mov    -0x6c(%ebp),%eax
f01179fa:	29 d0                	sub    %edx,%eax
f01179fc:	01 c3                	add    %eax,%ebx
f01179fe:	c7 45 90 00 10 00 00 	movl   $0x1000,-0x70(%ebp)
f0117a05:	a0 40 26 78 f0       	mov    0xf0782640,%al
f0117a0a:	0f b6 c0             	movzbl %al,%eax
f0117a0d:	c1 e0 04             	shl    $0x4,%eax
f0117a10:	89 c2                	mov    %eax,%edx
f0117a12:	8b 45 90             	mov    -0x70(%ebp),%eax
f0117a15:	01 d0                	add    %edx,%eax
f0117a17:	48                   	dec    %eax
f0117a18:	89 45 8c             	mov    %eax,-0x74(%ebp)
f0117a1b:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0117a1e:	ba 00 00 00 00       	mov    $0x0,%edx
f0117a23:	f7 75 90             	divl   -0x70(%ebp)
f0117a26:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0117a29:	29 d0                	sub    %edx,%eax
f0117a2b:	01 d8                	add    %ebx,%eax
f0117a2d:	2d 00 c0 df 09       	sub    $0x9dfc000,%eax
f0117a32:	39 c1                	cmp    %eax,%ecx
f0117a34:	74 14                	je     f0117a4a <test_kmalloc+0x369>
f0117a36:	83 ec 04             	sub    $0x4,%esp
f0117a39:	68 60 b4 13 f0       	push   $0xf013b460
f0117a3e:	6a 51                	push   $0x51
f0117a40:	68 7a b3 13 f0       	push   $0xf013b37a
f0117a45:	e8 bb 87 fe ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0117a4a:	e8 79 c3 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0117a4f:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0117a52:	74 14                	je     f0117a68 <test_kmalloc+0x387>
f0117a54:	83 ec 04             	sub    $0x4,%esp
f0117a57:	68 94 b3 13 f0       	push   $0xf013b394
f0117a5c:	6a 52                	push   $0x52
f0117a5e:	68 7a b3 13 f0       	push   $0xf013b37a
f0117a63:	e8 9d 87 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f0117a68:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f0117a6b:	e8 2d 51 ff ff       	call   f010cb9d <sys_calculate_free_frames>
f0117a70:	29 c3                	sub    %eax,%ebx
f0117a72:	89 d8                	mov    %ebx,%eax
f0117a74:	3d 00 02 00 00       	cmp    $0x200,%eax
f0117a79:	74 14                	je     f0117a8f <test_kmalloc+0x3ae>
f0117a7b:	83 ec 04             	sub    $0x4,%esp
f0117a7e:	68 fc b3 13 f0       	push   $0xf013b3fc
f0117a83:	6a 53                	push   $0x53
f0117a85:	68 7a b3 13 f0       	push   $0xf013b37a
f0117a8a:	e8 76 87 fe ff       	call   f0100205 <_panic>

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f0117a8f:	e8 09 51 ff ff       	call   f010cb9d <sys_calculate_free_frames>
f0117a94:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0117a97:	e8 2c c3 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0117a9c:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[2] = kmalloc(2*kilo);
f0117a9f:	83 ec 0c             	sub    $0xc,%esp
f0117aa2:	68 00 08 00 00       	push   $0x800
f0117aa7:	e8 d9 fd fe ff       	call   f0107885 <kmalloc>
f0117aac:	83 c4 10             	add    $0x10,%esp
f0117aaf:	89 85 48 fe ff ff    	mov    %eax,-0x1b8(%ebp)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0117ab5:	8b 85 48 fe ff ff    	mov    -0x1b8(%ebp),%eax
f0117abb:	89 c1                	mov    %eax,%ecx
f0117abd:	c7 45 88 00 10 00 00 	movl   $0x1000,-0x78(%ebp)
f0117ac4:	8b 45 88             	mov    -0x78(%ebp),%eax
f0117ac7:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0117acc:	89 45 84             	mov    %eax,-0x7c(%ebp)
f0117acf:	8b 45 84             	mov    -0x7c(%ebp),%eax
f0117ad2:	ba 00 00 00 00       	mov    $0x0,%edx
f0117ad7:	f7 75 88             	divl   -0x78(%ebp)
f0117ada:	8b 45 84             	mov    -0x7c(%ebp),%eax
f0117add:	29 d0                	sub    %edx,%eax
f0117adf:	89 c3                	mov    %eax,%ebx
f0117ae1:	c7 45 80 00 10 00 00 	movl   $0x1000,-0x80(%ebp)
f0117ae8:	a0 40 26 78 f0       	mov    0xf0782640,%al
f0117aed:	0f b6 d0             	movzbl %al,%edx
f0117af0:	8b 45 80             	mov    -0x80(%ebp),%eax
f0117af3:	01 d0                	add    %edx,%eax
f0117af5:	48                   	dec    %eax
f0117af6:	89 85 7c ff ff ff    	mov    %eax,-0x84(%ebp)
f0117afc:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f0117b02:	ba 00 00 00 00       	mov    $0x0,%edx
f0117b07:	f7 75 80             	divl   -0x80(%ebp)
f0117b0a:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f0117b10:	29 d0                	sub    %edx,%eax
f0117b12:	01 c3                	add    %eax,%ebx
f0117b14:	c7 85 78 ff ff ff 00 	movl   $0x1000,-0x88(%ebp)
f0117b1b:	10 00 00 
f0117b1e:	a0 40 26 78 f0       	mov    0xf0782640,%al
f0117b23:	0f b6 c0             	movzbl %al,%eax
f0117b26:	c1 e0 04             	shl    $0x4,%eax
f0117b29:	89 c2                	mov    %eax,%edx
f0117b2b:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f0117b31:	01 d0                	add    %edx,%eax
f0117b33:	48                   	dec    %eax
f0117b34:	89 85 74 ff ff ff    	mov    %eax,-0x8c(%ebp)
f0117b3a:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f0117b40:	ba 00 00 00 00       	mov    $0x0,%edx
f0117b45:	f7 b5 78 ff ff ff    	divl   -0x88(%ebp)
f0117b4b:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f0117b51:	29 d0                	sub    %edx,%eax
f0117b53:	01 d8                	add    %ebx,%eax
f0117b55:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
f0117b5a:	39 c1                	cmp    %eax,%ecx
f0117b5c:	74 14                	je     f0117b72 <test_kmalloc+0x491>
f0117b5e:	83 ec 04             	sub    $0x4,%esp
f0117b61:	68 60 b4 13 f0       	push   $0xf013b460
f0117b66:	6a 59                	push   $0x59
f0117b68:	68 7a b3 13 f0       	push   $0xf013b37a
f0117b6d:	e8 93 86 fe ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0117b72:	e8 51 c2 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0117b77:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0117b7a:	74 14                	je     f0117b90 <test_kmalloc+0x4af>
f0117b7c:	83 ec 04             	sub    $0x4,%esp
f0117b7f:	68 94 b3 13 f0       	push   $0xf013b394
f0117b84:	6a 5a                	push   $0x5a
f0117b86:	68 7a b3 13 f0       	push   $0xf013b37a
f0117b8b:	e8 75 86 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f0117b90:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f0117b93:	e8 05 50 ff ff       	call   f010cb9d <sys_calculate_free_frames>
f0117b98:	29 c3                	sub    %eax,%ebx
f0117b9a:	89 d8                	mov    %ebx,%eax
f0117b9c:	83 f8 01             	cmp    $0x1,%eax
f0117b9f:	74 14                	je     f0117bb5 <test_kmalloc+0x4d4>
f0117ba1:	83 ec 04             	sub    $0x4,%esp
f0117ba4:	68 fc b3 13 f0       	push   $0xf013b3fc
f0117ba9:	6a 5b                	push   $0x5b
f0117bab:	68 7a b3 13 f0       	push   $0xf013b37a
f0117bb0:	e8 50 86 fe ff       	call   f0100205 <_panic>

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f0117bb5:	e8 e3 4f ff ff       	call   f010cb9d <sys_calculate_free_frames>
f0117bba:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0117bbd:	e8 06 c2 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0117bc2:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[3] = kmalloc(2*kilo);
f0117bc5:	83 ec 0c             	sub    $0xc,%esp
f0117bc8:	68 00 08 00 00       	push   $0x800
f0117bcd:	e8 b3 fc fe ff       	call   f0107885 <kmalloc>
f0117bd2:	83 c4 10             	add    $0x10,%esp
f0117bd5:	89 85 4c fe ff ff    	mov    %eax,-0x1b4(%ebp)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0117bdb:	8b 85 4c fe ff ff    	mov    -0x1b4(%ebp),%eax
f0117be1:	89 c1                	mov    %eax,%ecx
f0117be3:	c7 85 70 ff ff ff 00 	movl   $0x1000,-0x90(%ebp)
f0117bea:	10 00 00 
f0117bed:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f0117bf3:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0117bf8:	89 85 6c ff ff ff    	mov    %eax,-0x94(%ebp)
f0117bfe:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f0117c04:	ba 00 00 00 00       	mov    $0x0,%edx
f0117c09:	f7 b5 70 ff ff ff    	divl   -0x90(%ebp)
f0117c0f:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f0117c15:	29 d0                	sub    %edx,%eax
f0117c17:	89 c3                	mov    %eax,%ebx
f0117c19:	c7 85 68 ff ff ff 00 	movl   $0x1000,-0x98(%ebp)
f0117c20:	10 00 00 
f0117c23:	a0 40 26 78 f0       	mov    0xf0782640,%al
f0117c28:	0f b6 d0             	movzbl %al,%edx
f0117c2b:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f0117c31:	01 d0                	add    %edx,%eax
f0117c33:	48                   	dec    %eax
f0117c34:	89 85 64 ff ff ff    	mov    %eax,-0x9c(%ebp)
f0117c3a:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f0117c40:	ba 00 00 00 00       	mov    $0x0,%edx
f0117c45:	f7 b5 68 ff ff ff    	divl   -0x98(%ebp)
f0117c4b:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f0117c51:	29 d0                	sub    %edx,%eax
f0117c53:	01 c3                	add    %eax,%ebx
f0117c55:	c7 85 60 ff ff ff 00 	movl   $0x1000,-0xa0(%ebp)
f0117c5c:	10 00 00 
f0117c5f:	a0 40 26 78 f0       	mov    0xf0782640,%al
f0117c64:	0f b6 c0             	movzbl %al,%eax
f0117c67:	c1 e0 04             	shl    $0x4,%eax
f0117c6a:	89 c2                	mov    %eax,%edx
f0117c6c:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f0117c72:	01 d0                	add    %edx,%eax
f0117c74:	48                   	dec    %eax
f0117c75:	89 85 5c ff ff ff    	mov    %eax,-0xa4(%ebp)
f0117c7b:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f0117c81:	ba 00 00 00 00       	mov    $0x0,%edx
f0117c86:	f7 b5 60 ff ff ff    	divl   -0xa0(%ebp)
f0117c8c:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f0117c92:	29 d0                	sub    %edx,%eax
f0117c94:	01 d8                	add    %ebx,%eax
f0117c96:	2d 00 b0 bf 09       	sub    $0x9bfb000,%eax
f0117c9b:	39 c1                	cmp    %eax,%ecx
f0117c9d:	74 14                	je     f0117cb3 <test_kmalloc+0x5d2>
f0117c9f:	83 ec 04             	sub    $0x4,%esp
f0117ca2:	68 60 b4 13 f0       	push   $0xf013b460
f0117ca7:	6a 61                	push   $0x61
f0117ca9:	68 7a b3 13 f0       	push   $0xf013b37a
f0117cae:	e8 52 85 fe ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0117cb3:	e8 10 c1 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0117cb8:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0117cbb:	74 14                	je     f0117cd1 <test_kmalloc+0x5f0>
f0117cbd:	83 ec 04             	sub    $0x4,%esp
f0117cc0:	68 94 b3 13 f0       	push   $0xf013b394
f0117cc5:	6a 62                	push   $0x62
f0117cc7:	68 7a b3 13 f0       	push   $0xf013b37a
f0117ccc:	e8 34 85 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f0117cd1:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f0117cd4:	e8 c4 4e ff ff       	call   f010cb9d <sys_calculate_free_frames>
f0117cd9:	29 c3                	sub    %eax,%ebx
f0117cdb:	89 d8                	mov    %ebx,%eax
f0117cdd:	83 f8 01             	cmp    $0x1,%eax
f0117ce0:	74 14                	je     f0117cf6 <test_kmalloc+0x615>
f0117ce2:	83 ec 04             	sub    $0x4,%esp
f0117ce5:	68 fc b3 13 f0       	push   $0xf013b3fc
f0117cea:	6a 63                	push   $0x63
f0117cec:	68 7a b3 13 f0       	push   $0xf013b37a
f0117cf1:	e8 0f 85 fe ff       	call   f0100205 <_panic>

		//7 KB
		freeFrames = sys_calculate_free_frames() ;
f0117cf6:	e8 a2 4e ff ff       	call   f010cb9d <sys_calculate_free_frames>
f0117cfb:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0117cfe:	e8 c5 c0 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0117d03:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[4] = kmalloc(7*kilo);
f0117d06:	83 ec 0c             	sub    $0xc,%esp
f0117d09:	68 00 1c 00 00       	push   $0x1c00
f0117d0e:	e8 72 fb fe ff       	call   f0107885 <kmalloc>
f0117d13:	83 c4 10             	add    $0x10,%esp
f0117d16:	89 85 50 fe ff ff    	mov    %eax,-0x1b0(%ebp)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0117d1c:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f0117d22:	89 c1                	mov    %eax,%ecx
f0117d24:	c7 85 58 ff ff ff 00 	movl   $0x1000,-0xa8(%ebp)
f0117d2b:	10 00 00 
f0117d2e:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f0117d34:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0117d39:	89 85 54 ff ff ff    	mov    %eax,-0xac(%ebp)
f0117d3f:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f0117d45:	ba 00 00 00 00       	mov    $0x0,%edx
f0117d4a:	f7 b5 58 ff ff ff    	divl   -0xa8(%ebp)
f0117d50:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f0117d56:	29 d0                	sub    %edx,%eax
f0117d58:	89 c3                	mov    %eax,%ebx
f0117d5a:	c7 85 50 ff ff ff 00 	movl   $0x1000,-0xb0(%ebp)
f0117d61:	10 00 00 
f0117d64:	a0 40 26 78 f0       	mov    0xf0782640,%al
f0117d69:	0f b6 d0             	movzbl %al,%edx
f0117d6c:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f0117d72:	01 d0                	add    %edx,%eax
f0117d74:	48                   	dec    %eax
f0117d75:	89 85 4c ff ff ff    	mov    %eax,-0xb4(%ebp)
f0117d7b:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0117d81:	ba 00 00 00 00       	mov    $0x0,%edx
f0117d86:	f7 b5 50 ff ff ff    	divl   -0xb0(%ebp)
f0117d8c:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0117d92:	29 d0                	sub    %edx,%eax
f0117d94:	01 c3                	add    %eax,%ebx
f0117d96:	c7 85 48 ff ff ff 00 	movl   $0x1000,-0xb8(%ebp)
f0117d9d:	10 00 00 
f0117da0:	a0 40 26 78 f0       	mov    0xf0782640,%al
f0117da5:	0f b6 c0             	movzbl %al,%eax
f0117da8:	c1 e0 04             	shl    $0x4,%eax
f0117dab:	89 c2                	mov    %eax,%edx
f0117dad:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f0117db3:	01 d0                	add    %edx,%eax
f0117db5:	48                   	dec    %eax
f0117db6:	89 85 44 ff ff ff    	mov    %eax,-0xbc(%ebp)
f0117dbc:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0117dc2:	ba 00 00 00 00       	mov    $0x0,%edx
f0117dc7:	f7 b5 48 ff ff ff    	divl   -0xb8(%ebp)
f0117dcd:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0117dd3:	29 d0                	sub    %edx,%eax
f0117dd5:	01 d8                	add    %ebx,%eax
f0117dd7:	2d 00 a0 bf 09       	sub    $0x9bfa000,%eax
f0117ddc:	39 c1                	cmp    %eax,%ecx
f0117dde:	74 14                	je     f0117df4 <test_kmalloc+0x713>
f0117de0:	83 ec 04             	sub    $0x4,%esp
f0117de3:	68 60 b4 13 f0       	push   $0xf013b460
f0117de8:	6a 69                	push   $0x69
f0117dea:	68 7a b3 13 f0       	push   $0xf013b37a
f0117def:	e8 11 84 fe ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0117df4:	e8 cf bf fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0117df9:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0117dfc:	74 14                	je     f0117e12 <test_kmalloc+0x731>
f0117dfe:	83 ec 04             	sub    $0x4,%esp
f0117e01:	68 94 b3 13 f0       	push   $0xf013b394
f0117e06:	6a 6a                	push   $0x6a
f0117e08:	68 7a b3 13 f0       	push   $0xf013b37a
f0117e0d:	e8 f3 83 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: pages are not loaded successfully into memory");
f0117e12:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f0117e15:	e8 83 4d ff ff       	call   f010cb9d <sys_calculate_free_frames>
f0117e1a:	29 c3                	sub    %eax,%ebx
f0117e1c:	89 d8                	mov    %ebx,%eax
f0117e1e:	83 f8 02             	cmp    $0x2,%eax
f0117e21:	74 14                	je     f0117e37 <test_kmalloc+0x756>
f0117e23:	83 ec 04             	sub    $0x4,%esp
f0117e26:	68 fc b3 13 f0       	push   $0xf013b3fc
f0117e2b:	6a 6b                	push   $0x6b
f0117e2d:	68 7a b3 13 f0       	push   $0xf013b37a
f0117e32:	e8 ce 83 fe ff       	call   f0100205 <_panic>

		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f0117e37:	e8 61 4d ff ff       	call   f010cb9d <sys_calculate_free_frames>
f0117e3c:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0117e3f:	e8 84 bf fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0117e44:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[5] = kmalloc(3*Mega-kilo);
f0117e47:	83 ec 0c             	sub    $0xc,%esp
f0117e4a:	68 00 fc 2f 00       	push   $0x2ffc00
f0117e4f:	e8 31 fa fe ff       	call   f0107885 <kmalloc>
f0117e54:	83 c4 10             	add    $0x10,%esp
f0117e57:	89 85 54 fe ff ff    	mov    %eax,-0x1ac(%ebp)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo) ) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0117e5d:	8b 85 54 fe ff ff    	mov    -0x1ac(%ebp),%eax
f0117e63:	89 c1                	mov    %eax,%ecx
f0117e65:	c7 85 40 ff ff ff 00 	movl   $0x1000,-0xc0(%ebp)
f0117e6c:	10 00 00 
f0117e6f:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0117e75:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0117e7a:	89 85 3c ff ff ff    	mov    %eax,-0xc4(%ebp)
f0117e80:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f0117e86:	ba 00 00 00 00       	mov    $0x0,%edx
f0117e8b:	f7 b5 40 ff ff ff    	divl   -0xc0(%ebp)
f0117e91:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f0117e97:	29 d0                	sub    %edx,%eax
f0117e99:	89 c3                	mov    %eax,%ebx
f0117e9b:	c7 85 38 ff ff ff 00 	movl   $0x1000,-0xc8(%ebp)
f0117ea2:	10 00 00 
f0117ea5:	a0 40 26 78 f0       	mov    0xf0782640,%al
f0117eaa:	0f b6 d0             	movzbl %al,%edx
f0117ead:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f0117eb3:	01 d0                	add    %edx,%eax
f0117eb5:	48                   	dec    %eax
f0117eb6:	89 85 34 ff ff ff    	mov    %eax,-0xcc(%ebp)
f0117ebc:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f0117ec2:	ba 00 00 00 00       	mov    $0x0,%edx
f0117ec7:	f7 b5 38 ff ff ff    	divl   -0xc8(%ebp)
f0117ecd:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f0117ed3:	29 d0                	sub    %edx,%eax
f0117ed5:	01 c3                	add    %eax,%ebx
f0117ed7:	c7 85 30 ff ff ff 00 	movl   $0x1000,-0xd0(%ebp)
f0117ede:	10 00 00 
f0117ee1:	a0 40 26 78 f0       	mov    0xf0782640,%al
f0117ee6:	0f b6 c0             	movzbl %al,%eax
f0117ee9:	c1 e0 04             	shl    $0x4,%eax
f0117eec:	89 c2                	mov    %eax,%edx
f0117eee:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f0117ef4:	01 d0                	add    %edx,%eax
f0117ef6:	48                   	dec    %eax
f0117ef7:	89 85 2c ff ff ff    	mov    %eax,-0xd4(%ebp)
f0117efd:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f0117f03:	ba 00 00 00 00       	mov    $0x0,%edx
f0117f08:	f7 b5 30 ff ff ff    	divl   -0xd0(%ebp)
f0117f0e:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f0117f14:	29 d0                	sub    %edx,%eax
f0117f16:	01 d8                	add    %ebx,%eax
f0117f18:	2d 00 80 bf 09       	sub    $0x9bf8000,%eax
f0117f1d:	39 c1                	cmp    %eax,%ecx
f0117f1f:	74 14                	je     f0117f35 <test_kmalloc+0x854>
f0117f21:	83 ec 04             	sub    $0x4,%esp
f0117f24:	68 60 b4 13 f0       	push   $0xf013b460
f0117f29:	6a 71                	push   $0x71
f0117f2b:	68 7a b3 13 f0       	push   $0xf013b37a
f0117f30:	e8 d0 82 fe ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0117f35:	e8 8e be fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0117f3a:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0117f3d:	74 14                	je     f0117f53 <test_kmalloc+0x872>
f0117f3f:	83 ec 04             	sub    $0x4,%esp
f0117f42:	68 94 b3 13 f0       	push   $0xf013b394
f0117f47:	6a 72                	push   $0x72
f0117f49:	68 7a b3 13 f0       	push   $0xf013b37a
f0117f4e:	e8 b2 82 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
f0117f53:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f0117f56:	e8 42 4c ff ff       	call   f010cb9d <sys_calculate_free_frames>
f0117f5b:	29 c3                	sub    %eax,%ebx
f0117f5d:	89 d8                	mov    %ebx,%eax
f0117f5f:	3d 00 03 00 00       	cmp    $0x300,%eax
f0117f64:	74 14                	je     f0117f7a <test_kmalloc+0x899>
f0117f66:	83 ec 04             	sub    $0x4,%esp
f0117f69:	68 fc b3 13 f0       	push   $0xf013b3fc
f0117f6e:	6a 73                	push   $0x73
f0117f70:	68 7a b3 13 f0       	push   $0xf013b37a
f0117f75:	e8 8b 82 fe ff       	call   f0100205 <_panic>

		//6 MB
		freeFrames = sys_calculate_free_frames() ;
f0117f7a:	e8 1e 4c ff ff       	call   f010cb9d <sys_calculate_free_frames>
f0117f7f:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0117f82:	e8 41 be fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0117f87:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[6] = kmalloc(6*Mega-kilo);
f0117f8a:	83 ec 0c             	sub    $0xc,%esp
f0117f8d:	68 00 fc 5f 00       	push   $0x5ffc00
f0117f92:	e8 ee f8 fe ff       	call   f0107885 <kmalloc>
f0117f97:	83 c4 10             	add    $0x10,%esp
f0117f9a:	89 85 58 fe ff ff    	mov    %eax,-0x1a8(%ebp)
		if ((uint32) ptr_allocations[6] != (ACTUAL_START + 7*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0117fa0:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f0117fa6:	89 c1                	mov    %eax,%ecx
f0117fa8:	c7 85 28 ff ff ff 00 	movl   $0x1000,-0xd8(%ebp)
f0117faf:	10 00 00 
f0117fb2:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f0117fb8:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0117fbd:	89 85 24 ff ff ff    	mov    %eax,-0xdc(%ebp)
f0117fc3:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0117fc9:	ba 00 00 00 00       	mov    $0x0,%edx
f0117fce:	f7 b5 28 ff ff ff    	divl   -0xd8(%ebp)
f0117fd4:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0117fda:	29 d0                	sub    %edx,%eax
f0117fdc:	89 c3                	mov    %eax,%ebx
f0117fde:	c7 85 20 ff ff ff 00 	movl   $0x1000,-0xe0(%ebp)
f0117fe5:	10 00 00 
f0117fe8:	a0 40 26 78 f0       	mov    0xf0782640,%al
f0117fed:	0f b6 d0             	movzbl %al,%edx
f0117ff0:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0117ff6:	01 d0                	add    %edx,%eax
f0117ff8:	48                   	dec    %eax
f0117ff9:	89 85 1c ff ff ff    	mov    %eax,-0xe4(%ebp)
f0117fff:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f0118005:	ba 00 00 00 00       	mov    $0x0,%edx
f011800a:	f7 b5 20 ff ff ff    	divl   -0xe0(%ebp)
f0118010:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f0118016:	29 d0                	sub    %edx,%eax
f0118018:	01 c3                	add    %eax,%ebx
f011801a:	c7 85 18 ff ff ff 00 	movl   $0x1000,-0xe8(%ebp)
f0118021:	10 00 00 
f0118024:	a0 40 26 78 f0       	mov    0xf0782640,%al
f0118029:	0f b6 c0             	movzbl %al,%eax
f011802c:	c1 e0 04             	shl    $0x4,%eax
f011802f:	89 c2                	mov    %eax,%edx
f0118031:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f0118037:	01 d0                	add    %edx,%eax
f0118039:	48                   	dec    %eax
f011803a:	89 85 14 ff ff ff    	mov    %eax,-0xec(%ebp)
f0118040:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f0118046:	ba 00 00 00 00       	mov    $0x0,%edx
f011804b:	f7 b5 18 ff ff ff    	divl   -0xe8(%ebp)
f0118051:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f0118057:	29 d0                	sub    %edx,%eax
f0118059:	01 d8                	add    %ebx,%eax
f011805b:	2d 00 80 8f 09       	sub    $0x98f8000,%eax
f0118060:	39 c1                	cmp    %eax,%ecx
f0118062:	74 14                	je     f0118078 <test_kmalloc+0x997>
f0118064:	83 ec 04             	sub    $0x4,%esp
f0118067:	68 60 b4 13 f0       	push   $0xf013b460
f011806c:	6a 79                	push   $0x79
f011806e:	68 7a b3 13 f0       	push   $0xf013b37a
f0118073:	e8 8d 81 fe ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0118078:	e8 4b bd fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011807d:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0118080:	74 14                	je     f0118096 <test_kmalloc+0x9b5>
f0118082:	83 ec 04             	sub    $0x4,%esp
f0118085:	68 94 b3 13 f0       	push   $0xf013b394
f011808a:	6a 7a                	push   $0x7a
f011808c:	68 7a b3 13 f0       	push   $0xf013b37a
f0118091:	e8 6f 81 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1536) panic("Wrong allocation: pages are not loaded successfully into memory");
f0118096:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f0118099:	e8 ff 4a ff ff       	call   f010cb9d <sys_calculate_free_frames>
f011809e:	29 c3                	sub    %eax,%ebx
f01180a0:	89 d8                	mov    %ebx,%eax
f01180a2:	3d 00 06 00 00       	cmp    $0x600,%eax
f01180a7:	74 14                	je     f01180bd <test_kmalloc+0x9dc>
f01180a9:	83 ec 04             	sub    $0x4,%esp
f01180ac:	68 fc b3 13 f0       	push   $0xf013b3fc
f01180b1:	6a 7b                	push   $0x7b
f01180b3:	68 7a b3 13 f0       	push   $0xf013b37a
f01180b8:	e8 48 81 fe ff       	call   f0100205 <_panic>

		//14 KB
		freeFrames = sys_calculate_free_frames() ;
f01180bd:	e8 db 4a ff ff       	call   f010cb9d <sys_calculate_free_frames>
f01180c2:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01180c5:	e8 fe bc fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f01180ca:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[7] = kmalloc(14*kilo);
f01180cd:	83 ec 0c             	sub    $0xc,%esp
f01180d0:	68 00 38 00 00       	push   $0x3800
f01180d5:	e8 ab f7 fe ff       	call   f0107885 <kmalloc>
f01180da:	83 c4 10             	add    $0x10,%esp
f01180dd:	89 85 5c fe ff ff    	mov    %eax,-0x1a4(%ebp)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 13*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01180e3:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f01180e9:	89 c1                	mov    %eax,%ecx
f01180eb:	c7 85 10 ff ff ff 00 	movl   $0x1000,-0xf0(%ebp)
f01180f2:	10 00 00 
f01180f5:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f01180fb:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0118100:	89 85 0c ff ff ff    	mov    %eax,-0xf4(%ebp)
f0118106:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f011810c:	ba 00 00 00 00       	mov    $0x0,%edx
f0118111:	f7 b5 10 ff ff ff    	divl   -0xf0(%ebp)
f0118117:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f011811d:	29 d0                	sub    %edx,%eax
f011811f:	89 c3                	mov    %eax,%ebx
f0118121:	c7 85 08 ff ff ff 00 	movl   $0x1000,-0xf8(%ebp)
f0118128:	10 00 00 
f011812b:	a0 40 26 78 f0       	mov    0xf0782640,%al
f0118130:	0f b6 d0             	movzbl %al,%edx
f0118133:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f0118139:	01 d0                	add    %edx,%eax
f011813b:	48                   	dec    %eax
f011813c:	89 85 04 ff ff ff    	mov    %eax,-0xfc(%ebp)
f0118142:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f0118148:	ba 00 00 00 00       	mov    $0x0,%edx
f011814d:	f7 b5 08 ff ff ff    	divl   -0xf8(%ebp)
f0118153:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f0118159:	29 d0                	sub    %edx,%eax
f011815b:	01 c3                	add    %eax,%ebx
f011815d:	c7 85 00 ff ff ff 00 	movl   $0x1000,-0x100(%ebp)
f0118164:	10 00 00 
f0118167:	a0 40 26 78 f0       	mov    0xf0782640,%al
f011816c:	0f b6 c0             	movzbl %al,%eax
f011816f:	c1 e0 04             	shl    $0x4,%eax
f0118172:	89 c2                	mov    %eax,%edx
f0118174:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f011817a:	01 d0                	add    %edx,%eax
f011817c:	48                   	dec    %eax
f011817d:	89 85 fc fe ff ff    	mov    %eax,-0x104(%ebp)
f0118183:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f0118189:	ba 00 00 00 00       	mov    $0x0,%edx
f011818e:	f7 b5 00 ff ff ff    	divl   -0x100(%ebp)
f0118194:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f011819a:	29 d0                	sub    %edx,%eax
f011819c:	01 d8                	add    %ebx,%eax
f011819e:	2d 00 80 2f 09       	sub    $0x92f8000,%eax
f01181a3:	39 c1                	cmp    %eax,%ecx
f01181a5:	74 17                	je     f01181be <test_kmalloc+0xadd>
f01181a7:	83 ec 04             	sub    $0x4,%esp
f01181aa:	68 60 b4 13 f0       	push   $0xf013b460
f01181af:	68 81 00 00 00       	push   $0x81
f01181b4:	68 7a b3 13 f0       	push   $0xf013b37a
f01181b9:	e8 47 80 fe ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01181be:	e8 05 bc fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f01181c3:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f01181c6:	74 17                	je     f01181df <test_kmalloc+0xafe>
f01181c8:	83 ec 04             	sub    $0x4,%esp
f01181cb:	68 94 b3 13 f0       	push   $0xf013b394
f01181d0:	68 82 00 00 00       	push   $0x82
f01181d5:	68 7a b3 13 f0       	push   $0xf013b37a
f01181da:	e8 26 80 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 4) panic("Wrong allocation: pages are not loaded successfully into memory");
f01181df:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f01181e2:	e8 b6 49 ff ff       	call   f010cb9d <sys_calculate_free_frames>
f01181e7:	29 c3                	sub    %eax,%ebx
f01181e9:	89 d8                	mov    %ebx,%eax
f01181eb:	83 f8 04             	cmp    $0x4,%eax
f01181ee:	74 17                	je     f0118207 <test_kmalloc+0xb26>
f01181f0:	83 ec 04             	sub    $0x4,%esp
f01181f3:	68 fc b3 13 f0       	push   $0xf013b3fc
f01181f8:	68 83 00 00 00       	push   $0x83
f01181fd:	68 7a b3 13 f0       	push   $0xf013b37a
f0118202:	e8 fe 7f fe ff       	call   f0100205 <_panic>

		cprintf("\b\b\b50%");
f0118207:	83 ec 0c             	sub    $0xc,%esp
f011820a:	68 c6 b4 13 f0       	push   $0xf013b4c6
f011820f:	e8 fa 8a fe ff       	call   f0100d0e <cprintf>
f0118214:	83 c4 10             	add    $0x10,%esp
		//Checking read/write on the allocated spaces
		{
			freeFrames = sys_calculate_free_frames() ;
f0118217:	e8 81 49 ff ff       	call   f010cb9d <sys_calculate_free_frames>
f011821c:	89 45 dc             	mov    %eax,-0x24(%ebp)
			freeDiskFrames = pf_calculate_free_frames() ;
f011821f:	e8 a4 bb fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0118224:	89 45 d8             	mov    %eax,-0x28(%ebp)

			//Write values
			//In 1st 2 MB
			lastIndexOfByte = (2*Mega-kilo)/sizeof(char) - 1;
f0118227:	c7 85 f8 fe ff ff ff 	movl   $0x1ffbff,-0x108(%ebp)
f011822e:	fb 1f 00 
			byteArr = (char *) ptr_allocations[0];
f0118231:	8b 85 40 fe ff ff    	mov    -0x1c0(%ebp),%eax
f0118237:	89 85 f4 fe ff ff    	mov    %eax,-0x10c(%ebp)
			byteArr[0] = minByte ;
f011823d:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f0118243:	8a 55 f3             	mov    -0xd(%ebp),%dl
f0118246:	88 10                	mov    %dl,(%eax)
			byteArr[lastIndexOfByte] = maxByte ;
f0118248:	8b 95 f8 fe ff ff    	mov    -0x108(%ebp),%edx
f011824e:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f0118254:	01 c2                	add    %eax,%edx
f0118256:	8a 45 f2             	mov    -0xe(%ebp),%al
f0118259:	88 02                	mov    %al,(%edx)

			//In 2nd 2 MB
			shortArr = (short *) ptr_allocations[1];
f011825b:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f0118261:	89 85 f0 fe ff ff    	mov    %eax,-0x110(%ebp)
			lastIndexOfShort = (2*Mega-kilo)/sizeof(short) - 1;
f0118267:	c7 85 ec fe ff ff ff 	movl   $0xffdff,-0x114(%ebp)
f011826e:	fd 0f 00 
			shortArr[0] = minShort;
f0118271:	8b 95 f0 fe ff ff    	mov    -0x110(%ebp),%edx
f0118277:	8b 45 f0             	mov    -0x10(%ebp),%eax
f011827a:	66 89 02             	mov    %ax,(%edx)
			shortArr[lastIndexOfShort] = maxShort;
f011827d:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f0118283:	01 c0                	add    %eax,%eax
f0118285:	89 c2                	mov    %eax,%edx
f0118287:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f011828d:	01 c2                	add    %eax,%edx
f011828f:	66 8b 45 ee          	mov    -0x12(%ebp),%ax
f0118293:	66 89 02             	mov    %ax,(%edx)

			//In next 2 KB
			intArr = (int *) ptr_allocations[2];
f0118296:	8b 85 48 fe ff ff    	mov    -0x1b8(%ebp),%eax
f011829c:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)
			lastIndexOfInt = (2*kilo)/sizeof(int) - 1;
f01182a2:	c7 85 e4 fe ff ff ff 	movl   $0x1ff,-0x11c(%ebp)
f01182a9:	01 00 00 
			intArr[0] = minInt;
f01182ac:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f01182b2:	8b 55 e8             	mov    -0x18(%ebp),%edx
f01182b5:	89 10                	mov    %edx,(%eax)
			intArr[lastIndexOfInt] = maxInt;
f01182b7:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f01182bd:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f01182c4:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f01182ca:	01 c2                	add    %eax,%edx
f01182cc:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01182cf:	89 02                	mov    %eax,(%edx)

			//In 7 KB
			structArr = (struct MyStruct *) ptr_allocations[4];
f01182d1:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f01182d7:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
			lastIndexOfStruct = (7*kilo)/sizeof(struct MyStruct) - 1;
f01182dd:	c7 85 dc fe ff ff 7f 	movl   $0x37f,-0x124(%ebp)
f01182e4:	03 00 00 
			structArr[0].a = minByte; structArr[0].b = minShort; structArr[0].c = minInt;
f01182e7:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f01182ed:	8a 55 f3             	mov    -0xd(%ebp),%dl
f01182f0:	88 10                	mov    %dl,(%eax)
f01182f2:	8b 95 e0 fe ff ff    	mov    -0x120(%ebp),%edx
f01182f8:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01182fb:	66 89 42 02          	mov    %ax,0x2(%edx)
f01182ff:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f0118305:	8b 55 e8             	mov    -0x18(%ebp),%edx
f0118308:	89 50 04             	mov    %edx,0x4(%eax)
			structArr[lastIndexOfStruct].a = maxByte; structArr[lastIndexOfStruct].b = maxShort; structArr[lastIndexOfStruct].c = maxInt;
f011830b:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f0118311:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f0118318:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f011831e:	01 c2                	add    %eax,%edx
f0118320:	8a 45 f2             	mov    -0xe(%ebp),%al
f0118323:	88 02                	mov    %al,(%edx)
f0118325:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f011832b:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f0118332:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f0118338:	01 c2                	add    %eax,%edx
f011833a:	66 8b 45 ee          	mov    -0x12(%ebp),%ax
f011833e:	66 89 42 02          	mov    %ax,0x2(%edx)
f0118342:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f0118348:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f011834f:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f0118355:	01 c2                	add    %eax,%edx
f0118357:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f011835a:	89 42 04             	mov    %eax,0x4(%edx)

			//In 6 MB
			lastIndexOfByte2 = (6*Mega-kilo)/sizeof(char) - 1;
f011835d:	c7 85 d8 fe ff ff ff 	movl   $0x5ffbff,-0x128(%ebp)
f0118364:	fb 5f 00 
			byteArr2 = (char *) ptr_allocations[6];
f0118367:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f011836d:	89 85 d4 fe ff ff    	mov    %eax,-0x12c(%ebp)
			byteArr2[0] = minByte ;
f0118373:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f0118379:	8a 55 f3             	mov    -0xd(%ebp),%dl
f011837c:	88 10                	mov    %dl,(%eax)
			byteArr2[lastIndexOfByte2 / 2] = maxByte / 2;
f011837e:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f0118384:	89 c2                	mov    %eax,%edx
f0118386:	c1 ea 1f             	shr    $0x1f,%edx
f0118389:	01 d0                	add    %edx,%eax
f011838b:	d1 f8                	sar    %eax
f011838d:	89 c2                	mov    %eax,%edx
f011838f:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f0118395:	01 c2                	add    %eax,%edx
f0118397:	8a 45 f2             	mov    -0xe(%ebp),%al
f011839a:	88 c1                	mov    %al,%cl
f011839c:	c0 e9 07             	shr    $0x7,%cl
f011839f:	01 c8                	add    %ecx,%eax
f01183a1:	d0 f8                	sar    %al
f01183a3:	88 02                	mov    %al,(%edx)
			byteArr2[lastIndexOfByte2] = maxByte ;
f01183a5:	8b 95 d8 fe ff ff    	mov    -0x128(%ebp),%edx
f01183ab:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f01183b1:	01 c2                	add    %eax,%edx
f01183b3:	8a 45 f2             	mov    -0xe(%ebp),%al
f01183b6:	88 02                	mov    %al,(%edx)

			//In 14 KB
			shortArr2 = (short *) ptr_allocations[7];
f01183b8:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f01183be:	89 85 d0 fe ff ff    	mov    %eax,-0x130(%ebp)
			lastIndexOfShort2 = (14*kilo)/sizeof(short) - 1;
f01183c4:	c7 85 cc fe ff ff ff 	movl   $0x1bff,-0x134(%ebp)
f01183cb:	1b 00 00 
			shortArr2[0] = minShort;
f01183ce:	8b 95 d0 fe ff ff    	mov    -0x130(%ebp),%edx
f01183d4:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01183d7:	66 89 02             	mov    %ax,(%edx)
			shortArr2[lastIndexOfShort2] = maxShort;
f01183da:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f01183e0:	01 c0                	add    %eax,%eax
f01183e2:	89 c2                	mov    %eax,%edx
f01183e4:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f01183ea:	01 c2                	add    %eax,%edx
f01183ec:	66 8b 45 ee          	mov    -0x12(%ebp),%ax
f01183f0:	66 89 02             	mov    %ax,(%edx)

			//Read values: check that the values are successfully written
			if (byteArr[0] 	!= minByte 	|| byteArr[lastIndexOfByte] 	!= maxByte) panic("Wrong allocation: stored values are wrongly changed!");
f01183f3:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f01183f9:	8a 00                	mov    (%eax),%al
f01183fb:	3a 45 f3             	cmp    -0xd(%ebp),%al
f01183fe:	75 15                	jne    f0118415 <test_kmalloc+0xd34>
f0118400:	8b 95 f8 fe ff ff    	mov    -0x108(%ebp),%edx
f0118406:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f011840c:	01 d0                	add    %edx,%eax
f011840e:	8a 00                	mov    (%eax),%al
f0118410:	3a 45 f2             	cmp    -0xe(%ebp),%al
f0118413:	74 17                	je     f011842c <test_kmalloc+0xd4b>
f0118415:	83 ec 04             	sub    $0x4,%esp
f0118418:	68 d0 b4 13 f0       	push   $0xf013b4d0
f011841d:	68 b2 00 00 00       	push   $0xb2
f0118422:	68 7a b3 13 f0       	push   $0xf013b37a
f0118427:	e8 d9 7d fe ff       	call   f0100205 <_panic>
			if (shortArr[0] != minShort || shortArr[lastIndexOfShort] 	!= maxShort) panic("Wrong allocation: stored values are wrongly changed!");
f011842c:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f0118432:	66 8b 00             	mov    (%eax),%ax
f0118435:	66 3b 45 f0          	cmp    -0x10(%ebp),%ax
f0118439:	75 1b                	jne    f0118456 <test_kmalloc+0xd75>
f011843b:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f0118441:	01 c0                	add    %eax,%eax
f0118443:	89 c2                	mov    %eax,%edx
f0118445:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f011844b:	01 d0                	add    %edx,%eax
f011844d:	66 8b 00             	mov    (%eax),%ax
f0118450:	66 3b 45 ee          	cmp    -0x12(%ebp),%ax
f0118454:	74 17                	je     f011846d <test_kmalloc+0xd8c>
f0118456:	83 ec 04             	sub    $0x4,%esp
f0118459:	68 d0 b4 13 f0       	push   $0xf013b4d0
f011845e:	68 b3 00 00 00       	push   $0xb3
f0118463:	68 7a b3 13 f0       	push   $0xf013b37a
f0118468:	e8 98 7d fe ff       	call   f0100205 <_panic>
			if (intArr[0] 	!= minInt 	|| intArr[lastIndexOfInt] 		!= maxInt) panic("Wrong allocation: stored values are wrongly changed!");
f011846d:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f0118473:	8b 00                	mov    (%eax),%eax
f0118475:	3b 45 e8             	cmp    -0x18(%ebp),%eax
f0118478:	75 1c                	jne    f0118496 <test_kmalloc+0xdb5>
f011847a:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f0118480:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0118487:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f011848d:	01 d0                	add    %edx,%eax
f011848f:	8b 00                	mov    (%eax),%eax
f0118491:	3b 45 e4             	cmp    -0x1c(%ebp),%eax
f0118494:	74 17                	je     f01184ad <test_kmalloc+0xdcc>
f0118496:	83 ec 04             	sub    $0x4,%esp
f0118499:	68 d0 b4 13 f0       	push   $0xf013b4d0
f011849e:	68 b4 00 00 00       	push   $0xb4
f01184a3:	68 7a b3 13 f0       	push   $0xf013b37a
f01184a8:	e8 58 7d fe ff       	call   f0100205 <_panic>

			if (structArr[0].a != minByte 	|| structArr[lastIndexOfStruct].a != maxByte) 	panic("Wrong allocation: stored values are wrongly changed!");
f01184ad:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f01184b3:	8a 00                	mov    (%eax),%al
f01184b5:	3a 45 f3             	cmp    -0xd(%ebp),%al
f01184b8:	75 1c                	jne    f01184d6 <test_kmalloc+0xdf5>
f01184ba:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f01184c0:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f01184c7:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f01184cd:	01 d0                	add    %edx,%eax
f01184cf:	8a 00                	mov    (%eax),%al
f01184d1:	3a 45 f2             	cmp    -0xe(%ebp),%al
f01184d4:	74 17                	je     f01184ed <test_kmalloc+0xe0c>
f01184d6:	83 ec 04             	sub    $0x4,%esp
f01184d9:	68 d0 b4 13 f0       	push   $0xf013b4d0
f01184de:	68 b6 00 00 00       	push   $0xb6
f01184e3:	68 7a b3 13 f0       	push   $0xf013b37a
f01184e8:	e8 18 7d fe ff       	call   f0100205 <_panic>
			if (structArr[0].b != minShort 	|| structArr[lastIndexOfStruct].b != maxShort) 	panic("Wrong allocation: stored values are wrongly changed!");
f01184ed:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f01184f3:	66 8b 40 02          	mov    0x2(%eax),%ax
f01184f7:	66 3b 45 f0          	cmp    -0x10(%ebp),%ax
f01184fb:	75 1f                	jne    f011851c <test_kmalloc+0xe3b>
f01184fd:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f0118503:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f011850a:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f0118510:	01 d0                	add    %edx,%eax
f0118512:	66 8b 40 02          	mov    0x2(%eax),%ax
f0118516:	66 3b 45 ee          	cmp    -0x12(%ebp),%ax
f011851a:	74 17                	je     f0118533 <test_kmalloc+0xe52>
f011851c:	83 ec 04             	sub    $0x4,%esp
f011851f:	68 d0 b4 13 f0       	push   $0xf013b4d0
f0118524:	68 b7 00 00 00       	push   $0xb7
f0118529:	68 7a b3 13 f0       	push   $0xf013b37a
f011852e:	e8 d2 7c fe ff       	call   f0100205 <_panic>
			if (structArr[0].c != minInt 	|| structArr[lastIndexOfStruct].c != maxInt) 	panic("Wrong allocation: stored values are wrongly changed!");
f0118533:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f0118539:	8b 40 04             	mov    0x4(%eax),%eax
f011853c:	3b 45 e8             	cmp    -0x18(%ebp),%eax
f011853f:	75 1d                	jne    f011855e <test_kmalloc+0xe7d>
f0118541:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f0118547:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f011854e:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f0118554:	01 d0                	add    %edx,%eax
f0118556:	8b 40 04             	mov    0x4(%eax),%eax
f0118559:	3b 45 e4             	cmp    -0x1c(%ebp),%eax
f011855c:	74 17                	je     f0118575 <test_kmalloc+0xe94>
f011855e:	83 ec 04             	sub    $0x4,%esp
f0118561:	68 d0 b4 13 f0       	push   $0xf013b4d0
f0118566:	68 b8 00 00 00       	push   $0xb8
f011856b:	68 7a b3 13 f0       	push   $0xf013b37a
f0118570:	e8 90 7c fe ff       	call   f0100205 <_panic>

			if (byteArr2[0] != minByte || byteArr2[lastIndexOfByte2/2] != maxByte/2 || byteArr2[lastIndexOfByte2] != maxByte) panic("Wrong allocation: stored values are wrongly changed!");
f0118575:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f011857b:	8a 00                	mov    (%eax),%al
f011857d:	3a 45 f3             	cmp    -0xd(%ebp),%al
f0118580:	75 40                	jne    f01185c2 <test_kmalloc+0xee1>
f0118582:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f0118588:	89 c2                	mov    %eax,%edx
f011858a:	c1 ea 1f             	shr    $0x1f,%edx
f011858d:	01 d0                	add    %edx,%eax
f011858f:	d1 f8                	sar    %eax
f0118591:	89 c2                	mov    %eax,%edx
f0118593:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f0118599:	01 d0                	add    %edx,%eax
f011859b:	8a 10                	mov    (%eax),%dl
f011859d:	8a 45 f2             	mov    -0xe(%ebp),%al
f01185a0:	88 c1                	mov    %al,%cl
f01185a2:	c0 e9 07             	shr    $0x7,%cl
f01185a5:	01 c8                	add    %ecx,%eax
f01185a7:	d0 f8                	sar    %al
f01185a9:	38 c2                	cmp    %al,%dl
f01185ab:	75 15                	jne    f01185c2 <test_kmalloc+0xee1>
f01185ad:	8b 95 d8 fe ff ff    	mov    -0x128(%ebp),%edx
f01185b3:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f01185b9:	01 d0                	add    %edx,%eax
f01185bb:	8a 00                	mov    (%eax),%al
f01185bd:	3a 45 f2             	cmp    -0xe(%ebp),%al
f01185c0:	74 17                	je     f01185d9 <test_kmalloc+0xef8>
f01185c2:	83 ec 04             	sub    $0x4,%esp
f01185c5:	68 d0 b4 13 f0       	push   $0xf013b4d0
f01185ca:	68 ba 00 00 00       	push   $0xba
f01185cf:	68 7a b3 13 f0       	push   $0xf013b37a
f01185d4:	e8 2c 7c fe ff       	call   f0100205 <_panic>
			if (shortArr2[0] != minShort || shortArr2[lastIndexOfShort2] != maxShort) panic("Wrong allocation: stored values are wrongly changed!");
f01185d9:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f01185df:	66 8b 00             	mov    (%eax),%ax
f01185e2:	66 3b 45 f0          	cmp    -0x10(%ebp),%ax
f01185e6:	75 1b                	jne    f0118603 <test_kmalloc+0xf22>
f01185e8:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f01185ee:	01 c0                	add    %eax,%eax
f01185f0:	89 c2                	mov    %eax,%edx
f01185f2:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f01185f8:	01 d0                	add    %edx,%eax
f01185fa:	66 8b 00             	mov    (%eax),%ax
f01185fd:	66 3b 45 ee          	cmp    -0x12(%ebp),%ax
f0118601:	74 17                	je     f011861a <test_kmalloc+0xf39>
f0118603:	83 ec 04             	sub    $0x4,%esp
f0118606:	68 d0 b4 13 f0       	push   $0xf013b4d0
f011860b:	68 bb 00 00 00       	push   $0xbb
f0118610:	68 7a b3 13 f0       	push   $0xf013b37a
f0118615:	e8 eb 7b fe ff       	call   f0100205 <_panic>

			if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Wrong allocation: pages are not loaded successfully into memory");
f011861a:	e8 7e 45 ff ff       	call   f010cb9d <sys_calculate_free_frames>
f011861f:	89 c2                	mov    %eax,%edx
f0118621:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0118624:	39 c2                	cmp    %eax,%edx
f0118626:	74 17                	je     f011863f <test_kmalloc+0xf5e>
f0118628:	83 ec 04             	sub    $0x4,%esp
f011862b:	68 fc b3 13 f0       	push   $0xf013b3fc
f0118630:	68 bd 00 00 00       	push   $0xbd
f0118635:	68 7a b3 13 f0       	push   $0xf013b37a
f011863a:	e8 c6 7b fe ff       	call   f0100205 <_panic>
			if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011863f:	e8 84 b7 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0118644:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0118647:	74 17                	je     f0118660 <test_kmalloc+0xf7f>
f0118649:	83 ec 04             	sub    $0x4,%esp
f011864c:	68 94 b3 13 f0       	push   $0xf013b394
f0118651:	68 be 00 00 00       	push   $0xbe
f0118656:	68 7a b3 13 f0       	push   $0xf013b37a
f011865b:	e8 a5 7b fe ff       	call   f0100205 <_panic>
		}

		cprintf("\b\b\b80%");
f0118660:	83 ec 0c             	sub    $0xc,%esp
f0118663:	68 05 b5 13 f0       	push   $0xf013b505
f0118668:	e8 a1 86 fe ff       	call   f0100d0e <cprintf>
f011866d:	83 c4 10             	add    $0x10,%esp

		//Insufficient space again
		freeFrames = sys_calculate_free_frames() ;
f0118670:	e8 28 45 ff ff       	call   f010cb9d <sys_calculate_free_frames>
f0118675:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0118678:	e8 4b b7 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011867d:	89 45 d8             	mov    %eax,-0x28(%ebp)
		uint32 restOfKHeap = (KERNEL_HEAP_MAX - ACTUAL_START + 2*PAGE_SIZE) - (2*Mega+2*Mega+4*kilo+4*kilo+8*kilo+3*Mega+6*Mega+16*kilo) ;
f0118680:	c7 85 c8 fe ff ff 00 	movl   $0x1000,-0x138(%ebp)
f0118687:	10 00 00 
f011868a:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f0118690:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0118695:	89 85 c4 fe ff ff    	mov    %eax,-0x13c(%ebp)
f011869b:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f01186a1:	ba 00 00 00 00       	mov    $0x0,%edx
f01186a6:	f7 b5 c8 fe ff ff    	divl   -0x138(%ebp)
f01186ac:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f01186b2:	29 d0                	sub    %edx,%eax
f01186b4:	89 c1                	mov    %eax,%ecx
f01186b6:	c7 85 c0 fe ff ff 00 	movl   $0x1000,-0x140(%ebp)
f01186bd:	10 00 00 
f01186c0:	a0 40 26 78 f0       	mov    0xf0782640,%al
f01186c5:	0f b6 d0             	movzbl %al,%edx
f01186c8:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f01186ce:	01 d0                	add    %edx,%eax
f01186d0:	48                   	dec    %eax
f01186d1:	89 85 bc fe ff ff    	mov    %eax,-0x144(%ebp)
f01186d7:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f01186dd:	ba 00 00 00 00       	mov    $0x0,%edx
f01186e2:	f7 b5 c0 fe ff ff    	divl   -0x140(%ebp)
f01186e8:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f01186ee:	29 d0                	sub    %edx,%eax
f01186f0:	01 c1                	add    %eax,%ecx
f01186f2:	c7 85 b8 fe ff ff 00 	movl   $0x1000,-0x148(%ebp)
f01186f9:	10 00 00 
f01186fc:	a0 40 26 78 f0       	mov    0xf0782640,%al
f0118701:	0f b6 c0             	movzbl %al,%eax
f0118704:	c1 e0 04             	shl    $0x4,%eax
f0118707:	89 c2                	mov    %eax,%edx
f0118709:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f011870f:	01 d0                	add    %edx,%eax
f0118711:	48                   	dec    %eax
f0118712:	89 85 b4 fe ff ff    	mov    %eax,-0x14c(%ebp)
f0118718:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f011871e:	ba 00 00 00 00       	mov    $0x0,%edx
f0118723:	f7 b5 b8 fe ff ff    	divl   -0x148(%ebp)
f0118729:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f011872f:	29 d0                	sub    %edx,%eax
f0118731:	01 c8                	add    %ecx,%eax
f0118733:	ba 00 50 2f 09       	mov    $0x92f5000,%edx
f0118738:	29 c2                	sub    %eax,%edx
f011873a:	89 d0                	mov    %edx,%eax
f011873c:	89 85 b0 fe ff ff    	mov    %eax,-0x150(%ebp)
		ptr_allocations[8] = kmalloc(restOfKHeap);
f0118742:	83 ec 0c             	sub    $0xc,%esp
f0118745:	ff b5 b0 fe ff ff    	pushl  -0x150(%ebp)
f011874b:	e8 35 f1 fe ff       	call   f0107885 <kmalloc>
f0118750:	83 c4 10             	add    $0x10,%esp
f0118753:	89 85 60 fe ff ff    	mov    %eax,-0x1a0(%ebp)
		if (ptr_allocations[8] != NULL) panic("Allocating insufficient space: should return NULL");
f0118759:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f011875f:	85 c0                	test   %eax,%eax
f0118761:	74 17                	je     f011877a <test_kmalloc+0x1099>
f0118763:	83 ec 04             	sub    $0x4,%esp
f0118766:	68 48 b3 13 f0       	push   $0xf013b348
f011876b:	68 c8 00 00 00       	push   $0xc8
f0118770:	68 7a b3 13 f0       	push   $0xf013b37a
f0118775:	e8 8b 7a fe ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011877a:	e8 49 b6 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011877f:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0118782:	74 17                	je     f011879b <test_kmalloc+0x10ba>
f0118784:	83 ec 04             	sub    $0x4,%esp
f0118787:	68 94 b3 13 f0       	push   $0xf013b394
f011878c:	68 c9 00 00 00       	push   $0xc9
f0118791:	68 7a b3 13 f0       	push   $0xf013b37a
f0118796:	e8 6a 7a fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Wrong allocation: pages are not loaded successfully into memory");
f011879b:	e8 fd 43 ff ff       	call   f010cb9d <sys_calculate_free_frames>
f01187a0:	89 c2                	mov    %eax,%edx
f01187a2:	8b 45 dc             	mov    -0x24(%ebp),%eax
f01187a5:	39 c2                	cmp    %eax,%edx
f01187a7:	74 17                	je     f01187c0 <test_kmalloc+0x10df>
f01187a9:	83 ec 04             	sub    $0x4,%esp
f01187ac:	68 fc b3 13 f0       	push   $0xf013b3fc
f01187b1:	68 ca 00 00 00       	push   $0xca
f01187b6:	68 7a b3 13 f0       	push   $0xf013b37a
f01187bb:	e8 45 7a fe ff       	call   f0100205 <_panic>

		cprintf("\b\b\b90%");
f01187c0:	83 ec 0c             	sub    $0xc,%esp
f01187c3:	68 0c b5 13 f0       	push   $0xf013b50c
f01187c8:	e8 41 85 fe ff       	call   f0100d0e <cprintf>
f01187cd:	83 c4 10             	add    $0x10,%esp

		//permissions
		uint32 lastAllocAddress = (uint32)ptr_allocations[7] + 16*kilo ;
f01187d0:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f01187d6:	05 00 40 00 00       	add    $0x4000,%eax
f01187db:	89 85 ac fe ff ff    	mov    %eax,-0x154(%ebp)
		uint32 va;
		for (va = ACTUAL_START; va < lastAllocAddress; va+=PAGE_SIZE)
f01187e1:	c7 85 a8 fe ff ff 00 	movl   $0x1000,-0x158(%ebp)
f01187e8:	10 00 00 
f01187eb:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f01187f1:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01187f6:	89 85 a4 fe ff ff    	mov    %eax,-0x15c(%ebp)
f01187fc:	8b 85 a4 fe ff ff    	mov    -0x15c(%ebp),%eax
f0118802:	ba 00 00 00 00       	mov    $0x0,%edx
f0118807:	f7 b5 a8 fe ff ff    	divl   -0x158(%ebp)
f011880d:	8b 85 a4 fe ff ff    	mov    -0x15c(%ebp),%eax
f0118813:	29 d0                	sub    %edx,%eax
f0118815:	89 c1                	mov    %eax,%ecx
f0118817:	c7 85 a0 fe ff ff 00 	movl   $0x1000,-0x160(%ebp)
f011881e:	10 00 00 
f0118821:	a0 40 26 78 f0       	mov    0xf0782640,%al
f0118826:	0f b6 d0             	movzbl %al,%edx
f0118829:	8b 85 a0 fe ff ff    	mov    -0x160(%ebp),%eax
f011882f:	01 d0                	add    %edx,%eax
f0118831:	48                   	dec    %eax
f0118832:	89 85 9c fe ff ff    	mov    %eax,-0x164(%ebp)
f0118838:	8b 85 9c fe ff ff    	mov    -0x164(%ebp),%eax
f011883e:	ba 00 00 00 00       	mov    $0x0,%edx
f0118843:	f7 b5 a0 fe ff ff    	divl   -0x160(%ebp)
f0118849:	8b 85 9c fe ff ff    	mov    -0x164(%ebp),%eax
f011884f:	29 d0                	sub    %edx,%eax
f0118851:	01 c1                	add    %eax,%ecx
f0118853:	c7 85 98 fe ff ff 00 	movl   $0x1000,-0x168(%ebp)
f011885a:	10 00 00 
f011885d:	a0 40 26 78 f0       	mov    0xf0782640,%al
f0118862:	0f b6 c0             	movzbl %al,%eax
f0118865:	c1 e0 04             	shl    $0x4,%eax
f0118868:	89 c2                	mov    %eax,%edx
f011886a:	8b 85 98 fe ff ff    	mov    -0x168(%ebp),%eax
f0118870:	01 d0                	add    %edx,%eax
f0118872:	48                   	dec    %eax
f0118873:	89 85 94 fe ff ff    	mov    %eax,-0x16c(%ebp)
f0118879:	8b 85 94 fe ff ff    	mov    -0x16c(%ebp),%eax
f011887f:	ba 00 00 00 00       	mov    $0x0,%edx
f0118884:	f7 b5 98 fe ff ff    	divl   -0x168(%ebp)
f011888a:	8b 85 94 fe ff ff    	mov    -0x16c(%ebp),%eax
f0118890:	29 d0                	sub    %edx,%eax
f0118892:	01 c8                	add    %ecx,%eax
f0118894:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f0118899:	89 45 f4             	mov    %eax,-0xc(%ebp)
f011889c:	eb 6a                	jmp    f0118908 <test_kmalloc+0x1227>
		{
			unsigned int * table;
			get_page_table(ptr_page_directory, va, &table);
f011889e:	a1 3c 26 78 f0       	mov    0xf078263c,%eax
f01188a3:	83 ec 04             	sub    $0x4,%esp
f01188a6:	8d 95 3c fe ff ff    	lea    -0x1c4(%ebp),%edx
f01188ac:	52                   	push   %edx
f01188ad:	ff 75 f4             	pushl  -0xc(%ebp)
f01188b0:	50                   	push   %eax
f01188b1:	e8 fb e1 fe ff       	call   f0106ab1 <get_page_table>
f01188b6:	83 c4 10             	add    $0x10,%esp
			uint32 perm = table[PTX(va)] & 0xFFF;
f01188b9:	8b 85 3c fe ff ff    	mov    -0x1c4(%ebp),%eax
f01188bf:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01188c2:	c1 ea 0c             	shr    $0xc,%edx
f01188c5:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f01188cb:	c1 e2 02             	shl    $0x2,%edx
f01188ce:	01 d0                	add    %edx,%eax
f01188d0:	8b 00                	mov    (%eax),%eax
f01188d2:	25 ff 0f 00 00       	and    $0xfff,%eax
f01188d7:	89 85 90 fe ff ff    	mov    %eax,-0x170(%ebp)
			if ((perm & PERM_USER) == PERM_USER)
f01188dd:	8b 85 90 fe ff ff    	mov    -0x170(%ebp),%eax
f01188e3:	83 e0 04             	and    $0x4,%eax
f01188e6:	85 c0                	test   %eax,%eax
f01188e8:	74 17                	je     f0118901 <test_kmalloc+0x1220>
				panic("Wrong permissions: pages should be mapped with Supervisor permission only");
f01188ea:	83 ec 04             	sub    $0x4,%esp
f01188ed:	68 14 b5 13 f0       	push   $0xf013b514
f01188f2:	68 d7 00 00 00       	push   $0xd7
f01188f7:	68 7a b3 13 f0       	push   $0xf013b37a
f01188fc:	e8 04 79 fe ff       	call   f0100205 <_panic>
		cprintf("\b\b\b90%");

		//permissions
		uint32 lastAllocAddress = (uint32)ptr_allocations[7] + 16*kilo ;
		uint32 va;
		for (va = ACTUAL_START; va < lastAllocAddress; va+=PAGE_SIZE)
f0118901:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
f0118908:	8b 45 f4             	mov    -0xc(%ebp),%eax
f011890b:	3b 85 ac fe ff ff    	cmp    -0x154(%ebp),%eax
f0118911:	72 8b                	jb     f011889e <test_kmalloc+0x11bd>
			uint32 perm = table[PTX(va)] & 0xFFF;
			if ((perm & PERM_USER) == PERM_USER)
				panic("Wrong permissions: pages should be mapped with Supervisor permission only");
		}

		cprintf("\b\b\b100%\n");
f0118913:	83 ec 0c             	sub    $0xc,%esp
f0118916:	68 5e b5 13 f0       	push   $0xf013b55e
f011891b:	e8 ee 83 fe ff       	call   f0100d0e <cprintf>
f0118920:	83 c4 10             	add    $0x10,%esp

	}

	cprintf("\nCongratulations!! test kmalloc completed successfully.\n");
f0118923:	83 ec 0c             	sub    $0xc,%esp
f0118926:	68 68 b5 13 f0       	push   $0xf013b568
f011892b:	e8 de 83 fe ff       	call   f0100d0e <cprintf>
f0118930:	83 c4 10             	add    $0x10,%esp

	return 1;
f0118933:	b8 01 00 00 00       	mov    $0x1,%eax

}
f0118938:	8d 65 f8             	lea    -0x8(%ebp),%esp
f011893b:	5b                   	pop    %ebx
f011893c:	5f                   	pop    %edi
f011893d:	5d                   	pop    %ebp
f011893e:	c3                   	ret    

f011893f <test_kmalloc_nextfit>:

int test_kmalloc_nextfit()
{
f011893f:	55                   	push   %ebp
f0118940:	89 e5                	mov    %esp,%ebp
f0118942:	57                   	push   %edi
f0118943:	53                   	push   %ebx
f0118944:	81 ec 70 04 00 00    	sub    $0x470,%esp
	cprintf("==============================================\n");
f011894a:	83 ec 0c             	sub    $0xc,%esp
f011894d:	68 bc b2 13 f0       	push   $0xf013b2bc
f0118952:	e8 b7 83 fe ff       	call   f0100d0e <cprintf>
f0118957:	83 c4 10             	add    $0x10,%esp
	cprintf("MAKE SURE to have a FRESH RUN for this test\n(i.e. don't run any program/test before it)\n");
f011895a:	83 ec 0c             	sub    $0xc,%esp
f011895d:	68 ec b2 13 f0       	push   $0xf013b2ec
f0118962:	e8 a7 83 fe ff       	call   f0100d0e <cprintf>
f0118967:	83 c4 10             	add    $0x10,%esp
	cprintf("==============================================\n");
f011896a:	83 ec 0c             	sub    $0xc,%esp
f011896d:	68 bc b2 13 f0       	push   $0xf013b2bc
f0118972:	e8 97 83 fe ff       	call   f0100d0e <cprintf>
f0118977:	83 c4 10             	add    $0x10,%esp

	void* ptr_allocations[160] = {0};
f011897a:	8d 95 88 fb ff ff    	lea    -0x478(%ebp),%edx
f0118980:	b9 a0 00 00 00       	mov    $0xa0,%ecx
f0118985:	b8 00 00 00 00       	mov    $0x0,%eax
f011898a:	89 d7                	mov    %edx,%edi
f011898c:	f3 ab                	rep stos %eax,%es:(%edi)
	cprintf("This test has THREE cases. A pass message will be displayed after each one.\n");
f011898e:	83 ec 0c             	sub    $0xc,%esp
f0118991:	68 a4 b5 13 f0       	push   $0xf013b5a4
f0118996:	e8 73 83 fe ff       	call   f0100d0e <cprintf>
f011899b:	83 c4 10             	add    $0x10,%esp

	// allocate pages
	int freeFrames = sys_calculate_free_frames() ;
f011899e:	e8 fa 41 ff ff       	call   f010cb9d <sys_calculate_free_frames>
f01189a3:	89 45 f0             	mov    %eax,-0x10(%ebp)
	int freeDiskFrames = pf_calculate_free_frames() ;
f01189a6:	e8 1d b4 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f01189ab:	89 45 ec             	mov    %eax,-0x14(%ebp)

	int i;
	//ptr_allocations[0] = kmalloc(2*Mega - KERNEL_SHARES_ARR_INIT_SIZE - KERNEL_SEMAPHORES_ARR_INIT_SIZE);
	for(i = 0; i< 79 ;i++)
f01189ae:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01189b5:	eb 1f                	jmp    f01189d6 <test_kmalloc_nextfit+0x97>
	{
		ptr_allocations[i] = kmalloc(2*Mega);
f01189b7:	83 ec 0c             	sub    $0xc,%esp
f01189ba:	68 00 00 20 00       	push   $0x200000
f01189bf:	e8 c1 ee fe ff       	call   f0107885 <kmalloc>
f01189c4:	83 c4 10             	add    $0x10,%esp
f01189c7:	89 c2                	mov    %eax,%edx
f01189c9:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01189cc:	89 94 85 88 fb ff ff 	mov    %edx,-0x478(%ebp,%eax,4)
	int freeFrames = sys_calculate_free_frames() ;
	int freeDiskFrames = pf_calculate_free_frames() ;

	int i;
	//ptr_allocations[0] = kmalloc(2*Mega - KERNEL_SHARES_ARR_INIT_SIZE - KERNEL_SEMAPHORES_ARR_INIT_SIZE);
	for(i = 0; i< 79 ;i++)
f01189d3:	ff 45 f4             	incl   -0xc(%ebp)
f01189d6:	83 7d f4 4e          	cmpl   $0x4e,-0xc(%ebp)
f01189da:	7e db                	jle    f01189b7 <test_kmalloc_nextfit+0x78>
	{
		ptr_allocations[i] = kmalloc(2*Mega);
	}
	ptr_allocations[79] = kmalloc(2*Mega - PAGE_SIZE - INITIAL_KHEAP_ALLOCATIONS);
f01189dc:	c7 45 e8 00 10 00 00 	movl   $0x1000,-0x18(%ebp)
f01189e3:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01189e6:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01189eb:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f01189ee:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01189f1:	ba 00 00 00 00       	mov    $0x0,%edx
f01189f6:	f7 75 e8             	divl   -0x18(%ebp)
f01189f9:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01189fc:	29 d0                	sub    %edx,%eax
f01189fe:	89 c1                	mov    %eax,%ecx
f0118a00:	c7 45 e0 00 10 00 00 	movl   $0x1000,-0x20(%ebp)
f0118a07:	a0 40 26 78 f0       	mov    0xf0782640,%al
f0118a0c:	0f b6 d0             	movzbl %al,%edx
f0118a0f:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0118a12:	01 d0                	add    %edx,%eax
f0118a14:	48                   	dec    %eax
f0118a15:	89 45 dc             	mov    %eax,-0x24(%ebp)
f0118a18:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0118a1b:	ba 00 00 00 00       	mov    $0x0,%edx
f0118a20:	f7 75 e0             	divl   -0x20(%ebp)
f0118a23:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0118a26:	29 d0                	sub    %edx,%eax
f0118a28:	01 c1                	add    %eax,%ecx
f0118a2a:	c7 45 d8 00 10 00 00 	movl   $0x1000,-0x28(%ebp)
f0118a31:	a0 40 26 78 f0       	mov    0xf0782640,%al
f0118a36:	0f b6 c0             	movzbl %al,%eax
f0118a39:	c1 e0 04             	shl    $0x4,%eax
f0118a3c:	89 c2                	mov    %eax,%edx
f0118a3e:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0118a41:	01 d0                	add    %edx,%eax
f0118a43:	48                   	dec    %eax
f0118a44:	89 45 d4             	mov    %eax,-0x2c(%ebp)
f0118a47:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0118a4a:	ba 00 00 00 00       	mov    $0x0,%edx
f0118a4f:	f7 75 d8             	divl   -0x28(%ebp)
f0118a52:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0118a55:	29 d0                	sub    %edx,%eax
f0118a57:	01 c8                	add    %ecx,%eax
f0118a59:	ba 00 b0 1f 00       	mov    $0x1fb000,%edx
f0118a5e:	29 c2                	sub    %eax,%edx
f0118a60:	89 d0                	mov    %edx,%eax
f0118a62:	83 ec 0c             	sub    $0xc,%esp
f0118a65:	50                   	push   %eax
f0118a66:	e8 1a ee fe ff       	call   f0107885 <kmalloc>
f0118a6b:	83 c4 10             	add    $0x10,%esp
f0118a6e:	89 85 c4 fc ff ff    	mov    %eax,-0x33c(%ebp)


	// randomly check the addresses of the allocation
	if( 	(uint32)ptr_allocations[0] != ACTUAL_START ||
f0118a74:	8b 85 88 fb ff ff    	mov    -0x478(%ebp),%eax
f0118a7a:	89 c1                	mov    %eax,%ecx
f0118a7c:	c7 45 d0 00 10 00 00 	movl   $0x1000,-0x30(%ebp)
f0118a83:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0118a86:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0118a8b:	89 45 cc             	mov    %eax,-0x34(%ebp)
f0118a8e:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0118a91:	ba 00 00 00 00       	mov    $0x0,%edx
f0118a96:	f7 75 d0             	divl   -0x30(%ebp)
f0118a99:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0118a9c:	29 d0                	sub    %edx,%eax
f0118a9e:	89 c3                	mov    %eax,%ebx
f0118aa0:	c7 45 c8 00 10 00 00 	movl   $0x1000,-0x38(%ebp)
f0118aa7:	a0 40 26 78 f0       	mov    0xf0782640,%al
f0118aac:	0f b6 d0             	movzbl %al,%edx
f0118aaf:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0118ab2:	01 d0                	add    %edx,%eax
f0118ab4:	48                   	dec    %eax
f0118ab5:	89 45 c4             	mov    %eax,-0x3c(%ebp)
f0118ab8:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0118abb:	ba 00 00 00 00       	mov    $0x0,%edx
f0118ac0:	f7 75 c8             	divl   -0x38(%ebp)
f0118ac3:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0118ac6:	29 d0                	sub    %edx,%eax
f0118ac8:	01 c3                	add    %eax,%ebx
f0118aca:	c7 45 c0 00 10 00 00 	movl   $0x1000,-0x40(%ebp)
f0118ad1:	a0 40 26 78 f0       	mov    0xf0782640,%al
f0118ad6:	0f b6 c0             	movzbl %al,%eax
f0118ad9:	c1 e0 04             	shl    $0x4,%eax
f0118adc:	89 c2                	mov    %eax,%edx
f0118ade:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0118ae1:	01 d0                	add    %edx,%eax
f0118ae3:	48                   	dec    %eax
f0118ae4:	89 45 bc             	mov    %eax,-0x44(%ebp)
f0118ae7:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0118aea:	ba 00 00 00 00       	mov    $0x0,%edx
f0118aef:	f7 75 c0             	divl   -0x40(%ebp)
f0118af2:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0118af5:	29 d0                	sub    %edx,%eax
f0118af7:	01 d8                	add    %ebx,%eax
f0118af9:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f0118afe:	39 c1                	cmp    %eax,%ecx
f0118b00:	0f 85 ed 04 00 00    	jne    f0118ff3 <test_kmalloc_nextfit+0x6b4>
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
f0118b06:	8b 85 90 fb ff ff    	mov    -0x470(%ebp),%eax
f0118b0c:	89 c1                	mov    %eax,%ecx
f0118b0e:	c7 45 b8 00 10 00 00 	movl   $0x1000,-0x48(%ebp)
f0118b15:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0118b18:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0118b1d:	89 45 b4             	mov    %eax,-0x4c(%ebp)
f0118b20:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0118b23:	ba 00 00 00 00       	mov    $0x0,%edx
f0118b28:	f7 75 b8             	divl   -0x48(%ebp)
f0118b2b:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0118b2e:	29 d0                	sub    %edx,%eax
f0118b30:	89 c3                	mov    %eax,%ebx
f0118b32:	c7 45 b0 00 10 00 00 	movl   $0x1000,-0x50(%ebp)
f0118b39:	a0 40 26 78 f0       	mov    0xf0782640,%al
f0118b3e:	0f b6 d0             	movzbl %al,%edx
f0118b41:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0118b44:	01 d0                	add    %edx,%eax
f0118b46:	48                   	dec    %eax
f0118b47:	89 45 ac             	mov    %eax,-0x54(%ebp)
f0118b4a:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0118b4d:	ba 00 00 00 00       	mov    $0x0,%edx
f0118b52:	f7 75 b0             	divl   -0x50(%ebp)
f0118b55:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0118b58:	29 d0                	sub    %edx,%eax
f0118b5a:	01 c3                	add    %eax,%ebx
f0118b5c:	c7 45 a8 00 10 00 00 	movl   $0x1000,-0x58(%ebp)
f0118b63:	a0 40 26 78 f0       	mov    0xf0782640,%al
f0118b68:	0f b6 c0             	movzbl %al,%eax
f0118b6b:	c1 e0 04             	shl    $0x4,%eax
f0118b6e:	89 c2                	mov    %eax,%edx
f0118b70:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0118b73:	01 d0                	add    %edx,%eax
f0118b75:	48                   	dec    %eax
f0118b76:	89 45 a4             	mov    %eax,-0x5c(%ebp)
f0118b79:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0118b7c:	ba 00 00 00 00       	mov    $0x0,%edx
f0118b81:	f7 75 a8             	divl   -0x58(%ebp)
f0118b84:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0118b87:	29 d0                	sub    %edx,%eax
f0118b89:	01 d8                	add    %ebx,%eax
f0118b8b:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
	}
	ptr_allocations[79] = kmalloc(2*Mega - PAGE_SIZE - INITIAL_KHEAP_ALLOCATIONS);


	// randomly check the addresses of the allocation
	if( 	(uint32)ptr_allocations[0] != ACTUAL_START ||
f0118b90:	39 c1                	cmp    %eax,%ecx
f0118b92:	0f 85 5b 04 00 00    	jne    f0118ff3 <test_kmalloc_nextfit+0x6b4>
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
			(uint32)ptr_allocations[8] != (ACTUAL_START + 16*Mega) ||
f0118b98:	8b 85 a8 fb ff ff    	mov    -0x458(%ebp),%eax
f0118b9e:	89 c1                	mov    %eax,%ecx
f0118ba0:	c7 45 a0 00 10 00 00 	movl   $0x1000,-0x60(%ebp)
f0118ba7:	8b 45 a0             	mov    -0x60(%ebp),%eax
f0118baa:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0118baf:	89 45 9c             	mov    %eax,-0x64(%ebp)
f0118bb2:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0118bb5:	ba 00 00 00 00       	mov    $0x0,%edx
f0118bba:	f7 75 a0             	divl   -0x60(%ebp)
f0118bbd:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0118bc0:	29 d0                	sub    %edx,%eax
f0118bc2:	89 c3                	mov    %eax,%ebx
f0118bc4:	c7 45 98 00 10 00 00 	movl   $0x1000,-0x68(%ebp)
f0118bcb:	a0 40 26 78 f0       	mov    0xf0782640,%al
f0118bd0:	0f b6 d0             	movzbl %al,%edx
f0118bd3:	8b 45 98             	mov    -0x68(%ebp),%eax
f0118bd6:	01 d0                	add    %edx,%eax
f0118bd8:	48                   	dec    %eax
f0118bd9:	89 45 94             	mov    %eax,-0x6c(%ebp)
f0118bdc:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0118bdf:	ba 00 00 00 00       	mov    $0x0,%edx
f0118be4:	f7 75 98             	divl   -0x68(%ebp)
f0118be7:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0118bea:	29 d0                	sub    %edx,%eax
f0118bec:	01 c3                	add    %eax,%ebx
f0118bee:	c7 45 90 00 10 00 00 	movl   $0x1000,-0x70(%ebp)
f0118bf5:	a0 40 26 78 f0       	mov    0xf0782640,%al
f0118bfa:	0f b6 c0             	movzbl %al,%eax
f0118bfd:	c1 e0 04             	shl    $0x4,%eax
f0118c00:	89 c2                	mov    %eax,%edx
f0118c02:	8b 45 90             	mov    -0x70(%ebp),%eax
f0118c05:	01 d0                	add    %edx,%eax
f0118c07:	48                   	dec    %eax
f0118c08:	89 45 8c             	mov    %eax,-0x74(%ebp)
f0118c0b:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0118c0e:	ba 00 00 00 00       	mov    $0x0,%edx
f0118c13:	f7 75 90             	divl   -0x70(%ebp)
f0118c16:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0118c19:	29 d0                	sub    %edx,%eax
f0118c1b:	01 d8                	add    %ebx,%eax
f0118c1d:	2d 00 c0 ff 08       	sub    $0x8ffc000,%eax
	ptr_allocations[79] = kmalloc(2*Mega - PAGE_SIZE - INITIAL_KHEAP_ALLOCATIONS);


	// randomly check the addresses of the allocation
	if( 	(uint32)ptr_allocations[0] != ACTUAL_START ||
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
f0118c22:	39 c1                	cmp    %eax,%ecx
f0118c24:	0f 85 c9 03 00 00    	jne    f0118ff3 <test_kmalloc_nextfit+0x6b4>
			(uint32)ptr_allocations[8] != (ACTUAL_START + 16*Mega) ||
			(uint32)ptr_allocations[10] != (ACTUAL_START + 20*Mega) ||
f0118c2a:	8b 85 b0 fb ff ff    	mov    -0x450(%ebp),%eax
f0118c30:	89 c1                	mov    %eax,%ecx
f0118c32:	c7 45 88 00 10 00 00 	movl   $0x1000,-0x78(%ebp)
f0118c39:	8b 45 88             	mov    -0x78(%ebp),%eax
f0118c3c:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0118c41:	89 45 84             	mov    %eax,-0x7c(%ebp)
f0118c44:	8b 45 84             	mov    -0x7c(%ebp),%eax
f0118c47:	ba 00 00 00 00       	mov    $0x0,%edx
f0118c4c:	f7 75 88             	divl   -0x78(%ebp)
f0118c4f:	8b 45 84             	mov    -0x7c(%ebp),%eax
f0118c52:	29 d0                	sub    %edx,%eax
f0118c54:	89 c3                	mov    %eax,%ebx
f0118c56:	c7 45 80 00 10 00 00 	movl   $0x1000,-0x80(%ebp)
f0118c5d:	a0 40 26 78 f0       	mov    0xf0782640,%al
f0118c62:	0f b6 d0             	movzbl %al,%edx
f0118c65:	8b 45 80             	mov    -0x80(%ebp),%eax
f0118c68:	01 d0                	add    %edx,%eax
f0118c6a:	48                   	dec    %eax
f0118c6b:	89 85 7c ff ff ff    	mov    %eax,-0x84(%ebp)
f0118c71:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f0118c77:	ba 00 00 00 00       	mov    $0x0,%edx
f0118c7c:	f7 75 80             	divl   -0x80(%ebp)
f0118c7f:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f0118c85:	29 d0                	sub    %edx,%eax
f0118c87:	01 c3                	add    %eax,%ebx
f0118c89:	c7 85 78 ff ff ff 00 	movl   $0x1000,-0x88(%ebp)
f0118c90:	10 00 00 
f0118c93:	a0 40 26 78 f0       	mov    0xf0782640,%al
f0118c98:	0f b6 c0             	movzbl %al,%eax
f0118c9b:	c1 e0 04             	shl    $0x4,%eax
f0118c9e:	89 c2                	mov    %eax,%edx
f0118ca0:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f0118ca6:	01 d0                	add    %edx,%eax
f0118ca8:	48                   	dec    %eax
f0118ca9:	89 85 74 ff ff ff    	mov    %eax,-0x8c(%ebp)
f0118caf:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f0118cb5:	ba 00 00 00 00       	mov    $0x0,%edx
f0118cba:	f7 b5 78 ff ff ff    	divl   -0x88(%ebp)
f0118cc0:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f0118cc6:	29 d0                	sub    %edx,%eax
f0118cc8:	01 d8                	add    %ebx,%eax
f0118cca:	2d 00 c0 bf 08       	sub    $0x8bfc000,%eax


	// randomly check the addresses of the allocation
	if( 	(uint32)ptr_allocations[0] != ACTUAL_START ||
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
			(uint32)ptr_allocations[8] != (ACTUAL_START + 16*Mega) ||
f0118ccf:	39 c1                	cmp    %eax,%ecx
f0118cd1:	0f 85 1c 03 00 00    	jne    f0118ff3 <test_kmalloc_nextfit+0x6b4>
			(uint32)ptr_allocations[10] != (ACTUAL_START + 20*Mega) ||
			(uint32)ptr_allocations[15] != (ACTUAL_START + 30*Mega) ||
f0118cd7:	8b 85 c4 fb ff ff    	mov    -0x43c(%ebp),%eax
f0118cdd:	89 c1                	mov    %eax,%ecx
f0118cdf:	c7 85 70 ff ff ff 00 	movl   $0x1000,-0x90(%ebp)
f0118ce6:	10 00 00 
f0118ce9:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f0118cef:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0118cf4:	89 85 6c ff ff ff    	mov    %eax,-0x94(%ebp)
f0118cfa:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f0118d00:	ba 00 00 00 00       	mov    $0x0,%edx
f0118d05:	f7 b5 70 ff ff ff    	divl   -0x90(%ebp)
f0118d0b:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f0118d11:	29 d0                	sub    %edx,%eax
f0118d13:	89 c3                	mov    %eax,%ebx
f0118d15:	c7 85 68 ff ff ff 00 	movl   $0x1000,-0x98(%ebp)
f0118d1c:	10 00 00 
f0118d1f:	a0 40 26 78 f0       	mov    0xf0782640,%al
f0118d24:	0f b6 d0             	movzbl %al,%edx
f0118d27:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f0118d2d:	01 d0                	add    %edx,%eax
f0118d2f:	48                   	dec    %eax
f0118d30:	89 85 64 ff ff ff    	mov    %eax,-0x9c(%ebp)
f0118d36:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f0118d3c:	ba 00 00 00 00       	mov    $0x0,%edx
f0118d41:	f7 b5 68 ff ff ff    	divl   -0x98(%ebp)
f0118d47:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f0118d4d:	29 d0                	sub    %edx,%eax
f0118d4f:	01 c3                	add    %eax,%ebx
f0118d51:	c7 85 60 ff ff ff 00 	movl   $0x1000,-0xa0(%ebp)
f0118d58:	10 00 00 
f0118d5b:	a0 40 26 78 f0       	mov    0xf0782640,%al
f0118d60:	0f b6 c0             	movzbl %al,%eax
f0118d63:	c1 e0 04             	shl    $0x4,%eax
f0118d66:	89 c2                	mov    %eax,%edx
f0118d68:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f0118d6e:	01 d0                	add    %edx,%eax
f0118d70:	48                   	dec    %eax
f0118d71:	89 85 5c ff ff ff    	mov    %eax,-0xa4(%ebp)
f0118d77:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f0118d7d:	ba 00 00 00 00       	mov    $0x0,%edx
f0118d82:	f7 b5 60 ff ff ff    	divl   -0xa0(%ebp)
f0118d88:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f0118d8e:	29 d0                	sub    %edx,%eax
f0118d90:	01 d8                	add    %ebx,%eax
f0118d92:	2d 00 c0 1f 08       	sub    $0x81fc000,%eax

	// randomly check the addresses of the allocation
	if( 	(uint32)ptr_allocations[0] != ACTUAL_START ||
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
			(uint32)ptr_allocations[8] != (ACTUAL_START + 16*Mega) ||
			(uint32)ptr_allocations[10] != (ACTUAL_START + 20*Mega) ||
f0118d97:	39 c1                	cmp    %eax,%ecx
f0118d99:	0f 85 54 02 00 00    	jne    f0118ff3 <test_kmalloc_nextfit+0x6b4>
			(uint32)ptr_allocations[15] != (ACTUAL_START + 30*Mega) ||
			(uint32)ptr_allocations[20] != (ACTUAL_START + 40*Mega) ||
f0118d9f:	8b 85 d8 fb ff ff    	mov    -0x428(%ebp),%eax
f0118da5:	89 c1                	mov    %eax,%ecx
f0118da7:	c7 85 58 ff ff ff 00 	movl   $0x1000,-0xa8(%ebp)
f0118dae:	10 00 00 
f0118db1:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f0118db7:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0118dbc:	89 85 54 ff ff ff    	mov    %eax,-0xac(%ebp)
f0118dc2:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f0118dc8:	ba 00 00 00 00       	mov    $0x0,%edx
f0118dcd:	f7 b5 58 ff ff ff    	divl   -0xa8(%ebp)
f0118dd3:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f0118dd9:	29 d0                	sub    %edx,%eax
f0118ddb:	89 c3                	mov    %eax,%ebx
f0118ddd:	c7 85 50 ff ff ff 00 	movl   $0x1000,-0xb0(%ebp)
f0118de4:	10 00 00 
f0118de7:	a0 40 26 78 f0       	mov    0xf0782640,%al
f0118dec:	0f b6 d0             	movzbl %al,%edx
f0118def:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f0118df5:	01 d0                	add    %edx,%eax
f0118df7:	48                   	dec    %eax
f0118df8:	89 85 4c ff ff ff    	mov    %eax,-0xb4(%ebp)
f0118dfe:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0118e04:	ba 00 00 00 00       	mov    $0x0,%edx
f0118e09:	f7 b5 50 ff ff ff    	divl   -0xb0(%ebp)
f0118e0f:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0118e15:	29 d0                	sub    %edx,%eax
f0118e17:	01 c3                	add    %eax,%ebx
f0118e19:	c7 85 48 ff ff ff 00 	movl   $0x1000,-0xb8(%ebp)
f0118e20:	10 00 00 
f0118e23:	a0 40 26 78 f0       	mov    0xf0782640,%al
f0118e28:	0f b6 c0             	movzbl %al,%eax
f0118e2b:	c1 e0 04             	shl    $0x4,%eax
f0118e2e:	89 c2                	mov    %eax,%edx
f0118e30:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f0118e36:	01 d0                	add    %edx,%eax
f0118e38:	48                   	dec    %eax
f0118e39:	89 85 44 ff ff ff    	mov    %eax,-0xbc(%ebp)
f0118e3f:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0118e45:	ba 00 00 00 00       	mov    $0x0,%edx
f0118e4a:	f7 b5 48 ff ff ff    	divl   -0xb8(%ebp)
f0118e50:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0118e56:	29 d0                	sub    %edx,%eax
f0118e58:	01 d8                	add    %ebx,%eax
f0118e5a:	2d 00 c0 7f 07       	sub    $0x77fc000,%eax
	// randomly check the addresses of the allocation
	if( 	(uint32)ptr_allocations[0] != ACTUAL_START ||
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
			(uint32)ptr_allocations[8] != (ACTUAL_START + 16*Mega) ||
			(uint32)ptr_allocations[10] != (ACTUAL_START + 20*Mega) ||
			(uint32)ptr_allocations[15] != (ACTUAL_START + 30*Mega) ||
f0118e5f:	39 c1                	cmp    %eax,%ecx
f0118e61:	0f 85 8c 01 00 00    	jne    f0118ff3 <test_kmalloc_nextfit+0x6b4>
			(uint32)ptr_allocations[20] != (ACTUAL_START + 40*Mega) ||
			(uint32)ptr_allocations[25] != (ACTUAL_START + 50*Mega) ||
f0118e67:	8b 85 ec fb ff ff    	mov    -0x414(%ebp),%eax
f0118e6d:	89 c1                	mov    %eax,%ecx
f0118e6f:	c7 85 40 ff ff ff 00 	movl   $0x1000,-0xc0(%ebp)
f0118e76:	10 00 00 
f0118e79:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0118e7f:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0118e84:	89 85 3c ff ff ff    	mov    %eax,-0xc4(%ebp)
f0118e8a:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f0118e90:	ba 00 00 00 00       	mov    $0x0,%edx
f0118e95:	f7 b5 40 ff ff ff    	divl   -0xc0(%ebp)
f0118e9b:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f0118ea1:	29 d0                	sub    %edx,%eax
f0118ea3:	89 c3                	mov    %eax,%ebx
f0118ea5:	c7 85 38 ff ff ff 00 	movl   $0x1000,-0xc8(%ebp)
f0118eac:	10 00 00 
f0118eaf:	a0 40 26 78 f0       	mov    0xf0782640,%al
f0118eb4:	0f b6 d0             	movzbl %al,%edx
f0118eb7:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f0118ebd:	01 d0                	add    %edx,%eax
f0118ebf:	48                   	dec    %eax
f0118ec0:	89 85 34 ff ff ff    	mov    %eax,-0xcc(%ebp)
f0118ec6:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f0118ecc:	ba 00 00 00 00       	mov    $0x0,%edx
f0118ed1:	f7 b5 38 ff ff ff    	divl   -0xc8(%ebp)
f0118ed7:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f0118edd:	29 d0                	sub    %edx,%eax
f0118edf:	01 c3                	add    %eax,%ebx
f0118ee1:	c7 85 30 ff ff ff 00 	movl   $0x1000,-0xd0(%ebp)
f0118ee8:	10 00 00 
f0118eeb:	a0 40 26 78 f0       	mov    0xf0782640,%al
f0118ef0:	0f b6 c0             	movzbl %al,%eax
f0118ef3:	c1 e0 04             	shl    $0x4,%eax
f0118ef6:	89 c2                	mov    %eax,%edx
f0118ef8:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f0118efe:	01 d0                	add    %edx,%eax
f0118f00:	48                   	dec    %eax
f0118f01:	89 85 2c ff ff ff    	mov    %eax,-0xd4(%ebp)
f0118f07:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f0118f0d:	ba 00 00 00 00       	mov    $0x0,%edx
f0118f12:	f7 b5 30 ff ff ff    	divl   -0xd0(%ebp)
f0118f18:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f0118f1e:	29 d0                	sub    %edx,%eax
f0118f20:	01 d8                	add    %ebx,%eax
f0118f22:	2d 00 c0 df 06       	sub    $0x6dfc000,%eax
	if( 	(uint32)ptr_allocations[0] != ACTUAL_START ||
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
			(uint32)ptr_allocations[8] != (ACTUAL_START + 16*Mega) ||
			(uint32)ptr_allocations[10] != (ACTUAL_START + 20*Mega) ||
			(uint32)ptr_allocations[15] != (ACTUAL_START + 30*Mega) ||
			(uint32)ptr_allocations[20] != (ACTUAL_START + 40*Mega) ||
f0118f27:	39 c1                	cmp    %eax,%ecx
f0118f29:	0f 85 c4 00 00 00    	jne    f0118ff3 <test_kmalloc_nextfit+0x6b4>
			(uint32)ptr_allocations[25] != (ACTUAL_START + 50*Mega) ||
			(uint32)ptr_allocations[79] != (ACTUAL_START + 158*Mega ))
f0118f2f:	8b 85 c4 fc ff ff    	mov    -0x33c(%ebp),%eax
f0118f35:	89 c1                	mov    %eax,%ecx
f0118f37:	c7 85 28 ff ff ff 00 	movl   $0x1000,-0xd8(%ebp)
f0118f3e:	10 00 00 
f0118f41:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f0118f47:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0118f4c:	89 85 24 ff ff ff    	mov    %eax,-0xdc(%ebp)
f0118f52:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0118f58:	ba 00 00 00 00       	mov    $0x0,%edx
f0118f5d:	f7 b5 28 ff ff ff    	divl   -0xd8(%ebp)
f0118f63:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0118f69:	29 d0                	sub    %edx,%eax
f0118f6b:	89 c3                	mov    %eax,%ebx
f0118f6d:	c7 85 20 ff ff ff 00 	movl   $0x1000,-0xe0(%ebp)
f0118f74:	10 00 00 
f0118f77:	a0 40 26 78 f0       	mov    0xf0782640,%al
f0118f7c:	0f b6 d0             	movzbl %al,%edx
f0118f7f:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0118f85:	01 d0                	add    %edx,%eax
f0118f87:	48                   	dec    %eax
f0118f88:	89 85 1c ff ff ff    	mov    %eax,-0xe4(%ebp)
f0118f8e:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f0118f94:	ba 00 00 00 00       	mov    $0x0,%edx
f0118f99:	f7 b5 20 ff ff ff    	divl   -0xe0(%ebp)
f0118f9f:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f0118fa5:	29 d0                	sub    %edx,%eax
f0118fa7:	01 c3                	add    %eax,%ebx
f0118fa9:	c7 85 18 ff ff ff 00 	movl   $0x1000,-0xe8(%ebp)
f0118fb0:	10 00 00 
f0118fb3:	a0 40 26 78 f0       	mov    0xf0782640,%al
f0118fb8:	0f b6 c0             	movzbl %al,%eax
f0118fbb:	c1 e0 04             	shl    $0x4,%eax
f0118fbe:	89 c2                	mov    %eax,%edx
f0118fc0:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f0118fc6:	01 d0                	add    %edx,%eax
f0118fc8:	48                   	dec    %eax
f0118fc9:	89 85 14 ff ff ff    	mov    %eax,-0xec(%ebp)
f0118fcf:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f0118fd5:	ba 00 00 00 00       	mov    $0x0,%edx
f0118fda:	f7 b5 18 ff ff ff    	divl   -0xe8(%ebp)
f0118fe0:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f0118fe6:	29 d0                	sub    %edx,%eax
f0118fe8:	01 d8                	add    %ebx,%eax
f0118fea:	2d 00 c0 1f 00       	sub    $0x1fc000,%eax
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
			(uint32)ptr_allocations[8] != (ACTUAL_START + 16*Mega) ||
			(uint32)ptr_allocations[10] != (ACTUAL_START + 20*Mega) ||
			(uint32)ptr_allocations[15] != (ACTUAL_START + 30*Mega) ||
			(uint32)ptr_allocations[20] != (ACTUAL_START + 40*Mega) ||
			(uint32)ptr_allocations[25] != (ACTUAL_START + 50*Mega) ||
f0118fef:	39 c1                	cmp    %eax,%ecx
f0118ff1:	74 17                	je     f011900a <test_kmalloc_nextfit+0x6cb>
			(uint32)ptr_allocations[79] != (ACTUAL_START + 158*Mega ))
		panic("Wrong allocation, Check next fitting strategy is working correctly");
f0118ff3:	83 ec 04             	sub    $0x4,%esp
f0118ff6:	68 f4 b5 13 f0       	push   $0xf013b5f4
f0118ffb:	68 03 01 00 00       	push   $0x103
f0119000:	68 7a b3 13 f0       	push   $0xf013b37a
f0119005:	e8 fb 71 fe ff       	call   f0100205 <_panic>

	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011900a:	e8 b9 ad fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011900f:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f0119012:	74 17                	je     f011902b <test_kmalloc_nextfit+0x6ec>
f0119014:	83 ec 04             	sub    $0x4,%esp
f0119017:	68 94 b3 13 f0       	push   $0xf013b394
f011901c:	68 05 01 00 00       	push   $0x105
f0119021:	68 7a b3 13 f0       	push   $0xf013b37a
f0119026:	e8 da 71 fe ff       	call   f0100205 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) != (160*Mega - PAGE_SIZE - INITIAL_KHEAP_ALLOCATIONS)/(PAGE_SIZE) ) panic("Wrong allocation");
f011902b:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f011902e:	e8 6a 3b ff ff       	call   f010cb9d <sys_calculate_free_frames>
f0119033:	29 c3                	sub    %eax,%ebx
f0119035:	89 d9                	mov    %ebx,%ecx
f0119037:	c7 85 10 ff ff ff 00 	movl   $0x1000,-0xf0(%ebp)
f011903e:	10 00 00 
f0119041:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f0119047:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011904c:	89 85 0c ff ff ff    	mov    %eax,-0xf4(%ebp)
f0119052:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f0119058:	ba 00 00 00 00       	mov    $0x0,%edx
f011905d:	f7 b5 10 ff ff ff    	divl   -0xf0(%ebp)
f0119063:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f0119069:	29 d0                	sub    %edx,%eax
f011906b:	89 c3                	mov    %eax,%ebx
f011906d:	c7 85 08 ff ff ff 00 	movl   $0x1000,-0xf8(%ebp)
f0119074:	10 00 00 
f0119077:	a0 40 26 78 f0       	mov    0xf0782640,%al
f011907c:	0f b6 d0             	movzbl %al,%edx
f011907f:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f0119085:	01 d0                	add    %edx,%eax
f0119087:	48                   	dec    %eax
f0119088:	89 85 04 ff ff ff    	mov    %eax,-0xfc(%ebp)
f011908e:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f0119094:	ba 00 00 00 00       	mov    $0x0,%edx
f0119099:	f7 b5 08 ff ff ff    	divl   -0xf8(%ebp)
f011909f:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f01190a5:	29 d0                	sub    %edx,%eax
f01190a7:	01 c3                	add    %eax,%ebx
f01190a9:	c7 85 00 ff ff ff 00 	movl   $0x1000,-0x100(%ebp)
f01190b0:	10 00 00 
f01190b3:	a0 40 26 78 f0       	mov    0xf0782640,%al
f01190b8:	0f b6 c0             	movzbl %al,%eax
f01190bb:	c1 e0 04             	shl    $0x4,%eax
f01190be:	89 c2                	mov    %eax,%edx
f01190c0:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f01190c6:	01 d0                	add    %edx,%eax
f01190c8:	48                   	dec    %eax
f01190c9:	89 85 fc fe ff ff    	mov    %eax,-0x104(%ebp)
f01190cf:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f01190d5:	ba 00 00 00 00       	mov    $0x0,%edx
f01190da:	f7 b5 00 ff ff ff    	divl   -0x100(%ebp)
f01190e0:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f01190e6:	29 d0                	sub    %edx,%eax
f01190e8:	01 d8                	add    %ebx,%eax
f01190ea:	ba 00 b0 ff 09       	mov    $0x9ffb000,%edx
f01190ef:	29 c2                	sub    %eax,%edx
f01190f1:	89 d0                	mov    %edx,%eax
f01190f3:	c1 e8 0c             	shr    $0xc,%eax
f01190f6:	39 c1                	cmp    %eax,%ecx
f01190f8:	74 17                	je     f0119111 <test_kmalloc_nextfit+0x7d2>
f01190fa:	83 ec 04             	sub    $0x4,%esp
f01190fd:	68 37 b6 13 f0       	push   $0xf013b637
f0119102:	68 06 01 00 00       	push   $0x106
f0119107:	68 7a b3 13 f0       	push   $0xf013b37a
f011910c:	e8 f4 70 fe ff       	call   f0100205 <_panic>

	// Make memory holes.
	freeDiskFrames = pf_calculate_free_frames() ;
f0119111:	e8 b2 ac fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0119116:	89 45 ec             	mov    %eax,-0x14(%ebp)
	freeFrames = sys_calculate_free_frames() ;
f0119119:	e8 7f 3a ff ff       	call   f010cb9d <sys_calculate_free_frames>
f011911e:	89 45 f0             	mov    %eax,-0x10(%ebp)

	kfree(ptr_allocations[0]);		// Hole 1 = 2 M
f0119121:	8b 85 88 fb ff ff    	mov    -0x478(%ebp),%eax
f0119127:	83 ec 0c             	sub    $0xc,%esp
f011912a:	50                   	push   %eax
f011912b:	e8 20 e8 fe ff       	call   f0107950 <kfree>
f0119130:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[2]);		// Hole 2 = 4 M
f0119133:	8b 85 90 fb ff ff    	mov    -0x470(%ebp),%eax
f0119139:	83 ec 0c             	sub    $0xc,%esp
f011913c:	50                   	push   %eax
f011913d:	e8 0e e8 fe ff       	call   f0107950 <kfree>
f0119142:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[3]);
f0119145:	8b 85 94 fb ff ff    	mov    -0x46c(%ebp),%eax
f011914b:	83 ec 0c             	sub    $0xc,%esp
f011914e:	50                   	push   %eax
f011914f:	e8 fc e7 fe ff       	call   f0107950 <kfree>
f0119154:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[5]);		// Hole 3 = 2 M
f0119157:	8b 85 9c fb ff ff    	mov    -0x464(%ebp),%eax
f011915d:	83 ec 0c             	sub    $0xc,%esp
f0119160:	50                   	push   %eax
f0119161:	e8 ea e7 fe ff       	call   f0107950 <kfree>
f0119166:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[10]);		// Hole 4 = 6 M
f0119169:	8b 85 b0 fb ff ff    	mov    -0x450(%ebp),%eax
f011916f:	83 ec 0c             	sub    $0xc,%esp
f0119172:	50                   	push   %eax
f0119173:	e8 d8 e7 fe ff       	call   f0107950 <kfree>
f0119178:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[12]);
f011917b:	8b 85 b8 fb ff ff    	mov    -0x448(%ebp),%eax
f0119181:	83 ec 0c             	sub    $0xc,%esp
f0119184:	50                   	push   %eax
f0119185:	e8 c6 e7 fe ff       	call   f0107950 <kfree>
f011918a:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[11]);
f011918d:	8b 85 b4 fb ff ff    	mov    -0x44c(%ebp),%eax
f0119193:	83 ec 0c             	sub    $0xc,%esp
f0119196:	50                   	push   %eax
f0119197:	e8 b4 e7 fe ff       	call   f0107950 <kfree>
f011919c:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[20]);		// Hole 5 = 2 M
f011919f:	8b 85 d8 fb ff ff    	mov    -0x428(%ebp),%eax
f01191a5:	83 ec 0c             	sub    $0xc,%esp
f01191a8:	50                   	push   %eax
f01191a9:	e8 a2 e7 fe ff       	call   f0107950 <kfree>
f01191ae:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[25]);		// Hole 6 = 2 M
f01191b1:	8b 85 ec fb ff ff    	mov    -0x414(%ebp),%eax
f01191b7:	83 ec 0c             	sub    $0xc,%esp
f01191ba:	50                   	push   %eax
f01191bb:	e8 90 e7 fe ff       	call   f0107950 <kfree>
f01191c0:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[79]);		// Hole 7 = 2 M - 4 KB
f01191c3:	8b 85 c4 fc ff ff    	mov    -0x33c(%ebp),%eax
f01191c9:	83 ec 0c             	sub    $0xc,%esp
f01191cc:	50                   	push   %eax
f01191cd:	e8 7e e7 fe ff       	call   f0107950 <kfree>
f01191d2:	83 c4 10             	add    $0x10,%esp

	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01191d5:	e8 ee ab fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f01191da:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f01191dd:	74 17                	je     f01191f6 <test_kmalloc_nextfit+0x8b7>
f01191df:	83 ec 04             	sub    $0x4,%esp
f01191e2:	68 94 b3 13 f0       	push   $0xf013b394
f01191e7:	68 17 01 00 00       	push   $0x117
f01191ec:	68 7a b3 13 f0       	push   $0xf013b37a
f01191f1:	e8 0f 70 fe ff       	call   f0100205 <_panic>
	if ((sys_calculate_free_frames() - freeFrames) != ((10*2*Mega) - PAGE_SIZE - INITIAL_KHEAP_ALLOCATIONS)/PAGE_SIZE) panic("Wrong free: Extra or less pages are removed from main memory");
f01191f6:	e8 a2 39 ff ff       	call   f010cb9d <sys_calculate_free_frames>
f01191fb:	89 c2                	mov    %eax,%edx
f01191fd:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0119200:	89 d1                	mov    %edx,%ecx
f0119202:	29 c1                	sub    %eax,%ecx
f0119204:	c7 85 f8 fe ff ff 00 	movl   $0x1000,-0x108(%ebp)
f011920b:	10 00 00 
f011920e:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f0119214:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0119219:	89 85 f4 fe ff ff    	mov    %eax,-0x10c(%ebp)
f011921f:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f0119225:	ba 00 00 00 00       	mov    $0x0,%edx
f011922a:	f7 b5 f8 fe ff ff    	divl   -0x108(%ebp)
f0119230:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f0119236:	29 d0                	sub    %edx,%eax
f0119238:	89 c3                	mov    %eax,%ebx
f011923a:	c7 85 f0 fe ff ff 00 	movl   $0x1000,-0x110(%ebp)
f0119241:	10 00 00 
f0119244:	a0 40 26 78 f0       	mov    0xf0782640,%al
f0119249:	0f b6 d0             	movzbl %al,%edx
f011924c:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f0119252:	01 d0                	add    %edx,%eax
f0119254:	48                   	dec    %eax
f0119255:	89 85 ec fe ff ff    	mov    %eax,-0x114(%ebp)
f011925b:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f0119261:	ba 00 00 00 00       	mov    $0x0,%edx
f0119266:	f7 b5 f0 fe ff ff    	divl   -0x110(%ebp)
f011926c:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f0119272:	29 d0                	sub    %edx,%eax
f0119274:	01 c3                	add    %eax,%ebx
f0119276:	c7 85 e8 fe ff ff 00 	movl   $0x1000,-0x118(%ebp)
f011927d:	10 00 00 
f0119280:	a0 40 26 78 f0       	mov    0xf0782640,%al
f0119285:	0f b6 c0             	movzbl %al,%eax
f0119288:	c1 e0 04             	shl    $0x4,%eax
f011928b:	89 c2                	mov    %eax,%edx
f011928d:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f0119293:	01 d0                	add    %edx,%eax
f0119295:	48                   	dec    %eax
f0119296:	89 85 e4 fe ff ff    	mov    %eax,-0x11c(%ebp)
f011929c:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f01192a2:	ba 00 00 00 00       	mov    $0x0,%edx
f01192a7:	f7 b5 e8 fe ff ff    	divl   -0x118(%ebp)
f01192ad:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f01192b3:	29 d0                	sub    %edx,%eax
f01192b5:	01 d8                	add    %ebx,%eax
f01192b7:	ba 00 b0 3f 01       	mov    $0x13fb000,%edx
f01192bc:	29 c2                	sub    %eax,%edx
f01192be:	89 d0                	mov    %edx,%eax
f01192c0:	c1 e8 0c             	shr    $0xc,%eax
f01192c3:	39 c1                	cmp    %eax,%ecx
f01192c5:	74 17                	je     f01192de <test_kmalloc_nextfit+0x99f>
f01192c7:	83 ec 04             	sub    $0x4,%esp
f01192ca:	68 48 b6 13 f0       	push   $0xf013b648
f01192cf:	68 18 01 00 00       	push   $0x118
f01192d4:	68 7a b3 13 f0       	push   $0xf013b37a
f01192d9:	e8 27 6f fe ff       	call   f0100205 <_panic>

	// Test next fit
	freeDiskFrames = pf_calculate_free_frames() ;
f01192de:	e8 e5 aa fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f01192e3:	89 45 ec             	mov    %eax,-0x14(%ebp)
	freeFrames = sys_calculate_free_frames() ;
f01192e6:	e8 b2 38 ff ff       	call   f010cb9d <sys_calculate_free_frames>
f01192eb:	89 45 f0             	mov    %eax,-0x10(%ebp)
	void* tempAddress = kmalloc(Mega-kilo);		// Use Hole 1 -> Hole 1 = 1 M
f01192ee:	83 ec 0c             	sub    $0xc,%esp
f01192f1:	68 00 fc 0f 00       	push   $0xffc00
f01192f6:	e8 8a e5 fe ff       	call   f0107885 <kmalloc>
f01192fb:	83 c4 10             	add    $0x10,%esp
f01192fe:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
	if((uint32)tempAddress != ACTUAL_START)
f0119304:	c7 85 dc fe ff ff 00 	movl   $0x1000,-0x124(%ebp)
f011930b:	10 00 00 
f011930e:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f0119314:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0119319:	89 85 d8 fe ff ff    	mov    %eax,-0x128(%ebp)
f011931f:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f0119325:	ba 00 00 00 00       	mov    $0x0,%edx
f011932a:	f7 b5 dc fe ff ff    	divl   -0x124(%ebp)
f0119330:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f0119336:	29 d0                	sub    %edx,%eax
f0119338:	89 c1                	mov    %eax,%ecx
f011933a:	c7 85 d4 fe ff ff 00 	movl   $0x1000,-0x12c(%ebp)
f0119341:	10 00 00 
f0119344:	a0 40 26 78 f0       	mov    0xf0782640,%al
f0119349:	0f b6 d0             	movzbl %al,%edx
f011934c:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f0119352:	01 d0                	add    %edx,%eax
f0119354:	48                   	dec    %eax
f0119355:	89 85 d0 fe ff ff    	mov    %eax,-0x130(%ebp)
f011935b:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f0119361:	ba 00 00 00 00       	mov    $0x0,%edx
f0119366:	f7 b5 d4 fe ff ff    	divl   -0x12c(%ebp)
f011936c:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f0119372:	29 d0                	sub    %edx,%eax
f0119374:	01 c1                	add    %eax,%ecx
f0119376:	c7 85 cc fe ff ff 00 	movl   $0x1000,-0x134(%ebp)
f011937d:	10 00 00 
f0119380:	a0 40 26 78 f0       	mov    0xf0782640,%al
f0119385:	0f b6 c0             	movzbl %al,%eax
f0119388:	c1 e0 04             	shl    $0x4,%eax
f011938b:	89 c2                	mov    %eax,%edx
f011938d:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f0119393:	01 d0                	add    %edx,%eax
f0119395:	48                   	dec    %eax
f0119396:	89 85 c8 fe ff ff    	mov    %eax,-0x138(%ebp)
f011939c:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f01193a2:	ba 00 00 00 00       	mov    $0x0,%edx
f01193a7:	f7 b5 cc fe ff ff    	divl   -0x134(%ebp)
f01193ad:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f01193b3:	29 d0                	sub    %edx,%eax
f01193b5:	01 c8                	add    %ecx,%eax
f01193b7:	8d 90 00 40 00 f6    	lea    -0x9ffc000(%eax),%edx
f01193bd:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f01193c3:	39 c2                	cmp    %eax,%edx
f01193c5:	74 17                	je     f01193de <test_kmalloc_nextfit+0xa9f>
		panic("Next Fit not working correctly");
f01193c7:	83 ec 04             	sub    $0x4,%esp
f01193ca:	68 88 b6 13 f0       	push   $0xf013b688
f01193cf:	68 1f 01 00 00       	push   $0x11f
f01193d4:	68 7a b3 13 f0       	push   $0xf013b37a
f01193d9:	e8 27 6e fe ff       	call   f0100205 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01193de:	e8 e5 a9 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f01193e3:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f01193e6:	74 17                	je     f01193ff <test_kmalloc_nextfit+0xac0>
f01193e8:	83 ec 04             	sub    $0x4,%esp
f01193eb:	68 94 b3 13 f0       	push   $0xf013b394
f01193f0:	68 20 01 00 00       	push   $0x120
f01193f5:	68 7a b3 13 f0       	push   $0xf013b37a
f01193fa:	e8 06 6e fe ff       	call   f0100205 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) != (1*Mega)/PAGE_SIZE) panic("Wrong allocation");
f01193ff:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f0119402:	e8 96 37 ff ff       	call   f010cb9d <sys_calculate_free_frames>
f0119407:	29 c3                	sub    %eax,%ebx
f0119409:	89 d8                	mov    %ebx,%eax
f011940b:	3d 00 01 00 00       	cmp    $0x100,%eax
f0119410:	74 17                	je     f0119429 <test_kmalloc_nextfit+0xaea>
f0119412:	83 ec 04             	sub    $0x4,%esp
f0119415:	68 37 b6 13 f0       	push   $0xf013b637
f011941a:	68 21 01 00 00       	push   $0x121
f011941f:	68 7a b3 13 f0       	push   $0xf013b37a
f0119424:	e8 dc 6d fe ff       	call   f0100205 <_panic>

	freeDiskFrames = pf_calculate_free_frames() ;
f0119429:	e8 9a a9 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011942e:	89 45 ec             	mov    %eax,-0x14(%ebp)
	freeFrames = sys_calculate_free_frames() ;
f0119431:	e8 67 37 ff ff       	call   f010cb9d <sys_calculate_free_frames>
f0119436:	89 45 f0             	mov    %eax,-0x10(%ebp)
	tempAddress = kmalloc(kilo);					// Use Hole 1 -> Hole 1 = 1 M - Kilo -> requires one page only
f0119439:	83 ec 0c             	sub    $0xc,%esp
f011943c:	68 00 04 00 00       	push   $0x400
f0119441:	e8 3f e4 fe ff       	call   f0107885 <kmalloc>
f0119446:	83 c4 10             	add    $0x10,%esp
f0119449:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x00100000)
f011944f:	c7 85 c4 fe ff ff 00 	movl   $0x1000,-0x13c(%ebp)
f0119456:	10 00 00 
f0119459:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f011945f:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0119464:	89 85 c0 fe ff ff    	mov    %eax,-0x140(%ebp)
f011946a:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f0119470:	ba 00 00 00 00       	mov    $0x0,%edx
f0119475:	f7 b5 c4 fe ff ff    	divl   -0x13c(%ebp)
f011947b:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f0119481:	29 d0                	sub    %edx,%eax
f0119483:	89 c1                	mov    %eax,%ecx
f0119485:	c7 85 bc fe ff ff 00 	movl   $0x1000,-0x144(%ebp)
f011948c:	10 00 00 
f011948f:	a0 40 26 78 f0       	mov    0xf0782640,%al
f0119494:	0f b6 d0             	movzbl %al,%edx
f0119497:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f011949d:	01 d0                	add    %edx,%eax
f011949f:	48                   	dec    %eax
f01194a0:	89 85 b8 fe ff ff    	mov    %eax,-0x148(%ebp)
f01194a6:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f01194ac:	ba 00 00 00 00       	mov    $0x0,%edx
f01194b1:	f7 b5 bc fe ff ff    	divl   -0x144(%ebp)
f01194b7:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f01194bd:	29 d0                	sub    %edx,%eax
f01194bf:	01 c1                	add    %eax,%ecx
f01194c1:	c7 85 b4 fe ff ff 00 	movl   $0x1000,-0x14c(%ebp)
f01194c8:	10 00 00 
f01194cb:	a0 40 26 78 f0       	mov    0xf0782640,%al
f01194d0:	0f b6 c0             	movzbl %al,%eax
f01194d3:	c1 e0 04             	shl    $0x4,%eax
f01194d6:	89 c2                	mov    %eax,%edx
f01194d8:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f01194de:	01 d0                	add    %edx,%eax
f01194e0:	48                   	dec    %eax
f01194e1:	89 85 b0 fe ff ff    	mov    %eax,-0x150(%ebp)
f01194e7:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f01194ed:	ba 00 00 00 00       	mov    $0x0,%edx
f01194f2:	f7 b5 b4 fe ff ff    	divl   -0x14c(%ebp)
f01194f8:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f01194fe:	29 d0                	sub    %edx,%eax
f0119500:	01 c8                	add    %ecx,%eax
f0119502:	8d 90 00 40 10 f6    	lea    -0x9efc000(%eax),%edx
f0119508:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f011950e:	39 c2                	cmp    %eax,%edx
f0119510:	74 17                	je     f0119529 <test_kmalloc_nextfit+0xbea>
		panic("Next Fit not working correctly");
f0119512:	83 ec 04             	sub    $0x4,%esp
f0119515:	68 88 b6 13 f0       	push   $0xf013b688
f011951a:	68 27 01 00 00       	push   $0x127
f011951f:	68 7a b3 13 f0       	push   $0xf013b37a
f0119524:	e8 dc 6c fe ff       	call   f0100205 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0119529:	e8 9a a8 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011952e:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f0119531:	74 17                	je     f011954a <test_kmalloc_nextfit+0xc0b>
f0119533:	83 ec 04             	sub    $0x4,%esp
f0119536:	68 94 b3 13 f0       	push   $0xf013b394
f011953b:	68 28 01 00 00       	push   $0x128
f0119540:	68 7a b3 13 f0       	push   $0xf013b37a
f0119545:	e8 bb 6c fe ff       	call   f0100205 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation");
f011954a:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f011954d:	e8 4b 36 ff ff       	call   f010cb9d <sys_calculate_free_frames>
f0119552:	29 c3                	sub    %eax,%ebx
f0119554:	89 d8                	mov    %ebx,%eax
f0119556:	83 f8 01             	cmp    $0x1,%eax
f0119559:	74 17                	je     f0119572 <test_kmalloc_nextfit+0xc33>
f011955b:	83 ec 04             	sub    $0x4,%esp
f011955e:	68 37 b6 13 f0       	push   $0xf013b637
f0119563:	68 29 01 00 00       	push   $0x129
f0119568:	68 7a b3 13 f0       	push   $0xf013b37a
f011956d:	e8 93 6c fe ff       	call   f0100205 <_panic>

	freeDiskFrames = pf_calculate_free_frames() ;
f0119572:	e8 51 a8 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0119577:	89 45 ec             	mov    %eax,-0x14(%ebp)
	freeFrames = sys_calculate_free_frames() ;
f011957a:	e8 1e 36 ff ff       	call   f010cb9d <sys_calculate_free_frames>
f011957f:	89 45 f0             	mov    %eax,-0x10(%ebp)
	tempAddress = kmalloc(5*Mega); 			   // Use Hole 4 -> Hole 4 = 1 M
f0119582:	83 ec 0c             	sub    $0xc,%esp
f0119585:	68 00 00 50 00       	push   $0x500000
f011958a:	e8 f6 e2 fe ff       	call   f0107885 <kmalloc>
f011958f:	83 c4 10             	add    $0x10,%esp
f0119592:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x01400000)
f0119598:	c7 85 ac fe ff ff 00 	movl   $0x1000,-0x154(%ebp)
f011959f:	10 00 00 
f01195a2:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f01195a8:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01195ad:	89 85 a8 fe ff ff    	mov    %eax,-0x158(%ebp)
f01195b3:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f01195b9:	ba 00 00 00 00       	mov    $0x0,%edx
f01195be:	f7 b5 ac fe ff ff    	divl   -0x154(%ebp)
f01195c4:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f01195ca:	29 d0                	sub    %edx,%eax
f01195cc:	89 c1                	mov    %eax,%ecx
f01195ce:	c7 85 a4 fe ff ff 00 	movl   $0x1000,-0x15c(%ebp)
f01195d5:	10 00 00 
f01195d8:	a0 40 26 78 f0       	mov    0xf0782640,%al
f01195dd:	0f b6 d0             	movzbl %al,%edx
f01195e0:	8b 85 a4 fe ff ff    	mov    -0x15c(%ebp),%eax
f01195e6:	01 d0                	add    %edx,%eax
f01195e8:	48                   	dec    %eax
f01195e9:	89 85 a0 fe ff ff    	mov    %eax,-0x160(%ebp)
f01195ef:	8b 85 a0 fe ff ff    	mov    -0x160(%ebp),%eax
f01195f5:	ba 00 00 00 00       	mov    $0x0,%edx
f01195fa:	f7 b5 a4 fe ff ff    	divl   -0x15c(%ebp)
f0119600:	8b 85 a0 fe ff ff    	mov    -0x160(%ebp),%eax
f0119606:	29 d0                	sub    %edx,%eax
f0119608:	01 c1                	add    %eax,%ecx
f011960a:	c7 85 9c fe ff ff 00 	movl   $0x1000,-0x164(%ebp)
f0119611:	10 00 00 
f0119614:	a0 40 26 78 f0       	mov    0xf0782640,%al
f0119619:	0f b6 c0             	movzbl %al,%eax
f011961c:	c1 e0 04             	shl    $0x4,%eax
f011961f:	89 c2                	mov    %eax,%edx
f0119621:	8b 85 9c fe ff ff    	mov    -0x164(%ebp),%eax
f0119627:	01 d0                	add    %edx,%eax
f0119629:	48                   	dec    %eax
f011962a:	89 85 98 fe ff ff    	mov    %eax,-0x168(%ebp)
f0119630:	8b 85 98 fe ff ff    	mov    -0x168(%ebp),%eax
f0119636:	ba 00 00 00 00       	mov    $0x0,%edx
f011963b:	f7 b5 9c fe ff ff    	divl   -0x164(%ebp)
f0119641:	8b 85 98 fe ff ff    	mov    -0x168(%ebp),%eax
f0119647:	29 d0                	sub    %edx,%eax
f0119649:	01 c8                	add    %ecx,%eax
f011964b:	8d 90 00 40 40 f7    	lea    -0x8bfc000(%eax),%edx
f0119651:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f0119657:	39 c2                	cmp    %eax,%edx
f0119659:	74 17                	je     f0119672 <test_kmalloc_nextfit+0xd33>
		panic("Next Fit not working correctly");
f011965b:	83 ec 04             	sub    $0x4,%esp
f011965e:	68 88 b6 13 f0       	push   $0xf013b688
f0119663:	68 2f 01 00 00       	push   $0x12f
f0119668:	68 7a b3 13 f0       	push   $0xf013b37a
f011966d:	e8 93 6b fe ff       	call   f0100205 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0119672:	e8 51 a7 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0119677:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011967a:	74 17                	je     f0119693 <test_kmalloc_nextfit+0xd54>
f011967c:	83 ec 04             	sub    $0x4,%esp
f011967f:	68 94 b3 13 f0       	push   $0xf013b394
f0119684:	68 30 01 00 00       	push   $0x130
f0119689:	68 7a b3 13 f0       	push   $0xf013b37a
f011968e:	e8 72 6b fe ff       	call   f0100205 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) != (5*Mega)/PAGE_SIZE) panic("Wrong allocation");
f0119693:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f0119696:	e8 02 35 ff ff       	call   f010cb9d <sys_calculate_free_frames>
f011969b:	29 c3                	sub    %eax,%ebx
f011969d:	89 d8                	mov    %ebx,%eax
f011969f:	3d 00 05 00 00       	cmp    $0x500,%eax
f01196a4:	74 17                	je     f01196bd <test_kmalloc_nextfit+0xd7e>
f01196a6:	83 ec 04             	sub    $0x4,%esp
f01196a9:	68 37 b6 13 f0       	push   $0xf013b637
f01196ae:	68 31 01 00 00       	push   $0x131
f01196b3:	68 7a b3 13 f0       	push   $0xf013b37a
f01196b8:	e8 48 6b fe ff       	call   f0100205 <_panic>

	freeDiskFrames = pf_calculate_free_frames() ;
f01196bd:	e8 06 a7 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f01196c2:	89 45 ec             	mov    %eax,-0x14(%ebp)
	freeFrames = sys_calculate_free_frames() ;
f01196c5:	e8 d3 34 ff ff       	call   f010cb9d <sys_calculate_free_frames>
f01196ca:	89 45 f0             	mov    %eax,-0x10(%ebp)
	tempAddress = kmalloc(1*Mega); 			   // Use Hole 4 -> Hole 4 = 0 M
f01196cd:	83 ec 0c             	sub    $0xc,%esp
f01196d0:	68 00 00 10 00       	push   $0x100000
f01196d5:	e8 ab e1 fe ff       	call   f0107885 <kmalloc>
f01196da:	83 c4 10             	add    $0x10,%esp
f01196dd:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x01900000)
f01196e3:	c7 85 94 fe ff ff 00 	movl   $0x1000,-0x16c(%ebp)
f01196ea:	10 00 00 
f01196ed:	8b 85 94 fe ff ff    	mov    -0x16c(%ebp),%eax
f01196f3:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01196f8:	89 85 90 fe ff ff    	mov    %eax,-0x170(%ebp)
f01196fe:	8b 85 90 fe ff ff    	mov    -0x170(%ebp),%eax
f0119704:	ba 00 00 00 00       	mov    $0x0,%edx
f0119709:	f7 b5 94 fe ff ff    	divl   -0x16c(%ebp)
f011970f:	8b 85 90 fe ff ff    	mov    -0x170(%ebp),%eax
f0119715:	29 d0                	sub    %edx,%eax
f0119717:	89 c1                	mov    %eax,%ecx
f0119719:	c7 85 8c fe ff ff 00 	movl   $0x1000,-0x174(%ebp)
f0119720:	10 00 00 
f0119723:	a0 40 26 78 f0       	mov    0xf0782640,%al
f0119728:	0f b6 d0             	movzbl %al,%edx
f011972b:	8b 85 8c fe ff ff    	mov    -0x174(%ebp),%eax
f0119731:	01 d0                	add    %edx,%eax
f0119733:	48                   	dec    %eax
f0119734:	89 85 88 fe ff ff    	mov    %eax,-0x178(%ebp)
f011973a:	8b 85 88 fe ff ff    	mov    -0x178(%ebp),%eax
f0119740:	ba 00 00 00 00       	mov    $0x0,%edx
f0119745:	f7 b5 8c fe ff ff    	divl   -0x174(%ebp)
f011974b:	8b 85 88 fe ff ff    	mov    -0x178(%ebp),%eax
f0119751:	29 d0                	sub    %edx,%eax
f0119753:	01 c1                	add    %eax,%ecx
f0119755:	c7 85 84 fe ff ff 00 	movl   $0x1000,-0x17c(%ebp)
f011975c:	10 00 00 
f011975f:	a0 40 26 78 f0       	mov    0xf0782640,%al
f0119764:	0f b6 c0             	movzbl %al,%eax
f0119767:	c1 e0 04             	shl    $0x4,%eax
f011976a:	89 c2                	mov    %eax,%edx
f011976c:	8b 85 84 fe ff ff    	mov    -0x17c(%ebp),%eax
f0119772:	01 d0                	add    %edx,%eax
f0119774:	48                   	dec    %eax
f0119775:	89 85 80 fe ff ff    	mov    %eax,-0x180(%ebp)
f011977b:	8b 85 80 fe ff ff    	mov    -0x180(%ebp),%eax
f0119781:	ba 00 00 00 00       	mov    $0x0,%edx
f0119786:	f7 b5 84 fe ff ff    	divl   -0x17c(%ebp)
f011978c:	8b 85 80 fe ff ff    	mov    -0x180(%ebp),%eax
f0119792:	29 d0                	sub    %edx,%eax
f0119794:	01 c8                	add    %ecx,%eax
f0119796:	8d 90 00 40 90 f7    	lea    -0x86fc000(%eax),%edx
f011979c:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f01197a2:	39 c2                	cmp    %eax,%edx
f01197a4:	74 17                	je     f01197bd <test_kmalloc_nextfit+0xe7e>
		panic("Next Fit not working correctly");
f01197a6:	83 ec 04             	sub    $0x4,%esp
f01197a9:	68 88 b6 13 f0       	push   $0xf013b688
f01197ae:	68 37 01 00 00       	push   $0x137
f01197b3:	68 7a b3 13 f0       	push   $0xf013b37a
f01197b8:	e8 48 6a fe ff       	call   f0100205 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01197bd:	e8 06 a6 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f01197c2:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f01197c5:	74 17                	je     f01197de <test_kmalloc_nextfit+0xe9f>
f01197c7:	83 ec 04             	sub    $0x4,%esp
f01197ca:	68 94 b3 13 f0       	push   $0xf013b394
f01197cf:	68 38 01 00 00       	push   $0x138
f01197d4:	68 7a b3 13 f0       	push   $0xf013b37a
f01197d9:	e8 27 6a fe ff       	call   f0100205 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) != (1*Mega)/PAGE_SIZE) panic("Wrong allocation");
f01197de:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f01197e1:	e8 b7 33 ff ff       	call   f010cb9d <sys_calculate_free_frames>
f01197e6:	29 c3                	sub    %eax,%ebx
f01197e8:	89 d8                	mov    %ebx,%eax
f01197ea:	3d 00 01 00 00       	cmp    $0x100,%eax
f01197ef:	74 17                	je     f0119808 <test_kmalloc_nextfit+0xec9>
f01197f1:	83 ec 04             	sub    $0x4,%esp
f01197f4:	68 37 b6 13 f0       	push   $0xf013b637
f01197f9:	68 39 01 00 00       	push   $0x139
f01197fe:	68 7a b3 13 f0       	push   $0xf013b37a
f0119803:	e8 fd 69 fe ff       	call   f0100205 <_panic>

	freeDiskFrames = pf_calculate_free_frames() ;
f0119808:	e8 bb a5 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011980d:	89 45 ec             	mov    %eax,-0x14(%ebp)
	freeFrames = sys_calculate_free_frames() ;
f0119810:	e8 88 33 ff ff       	call   f010cb9d <sys_calculate_free_frames>
f0119815:	89 45 f0             	mov    %eax,-0x10(%ebp)
	kfree(ptr_allocations[15]);					// Make a new hole => 2 M
f0119818:	8b 85 c4 fb ff ff    	mov    -0x43c(%ebp),%eax
f011981e:	83 ec 0c             	sub    $0xc,%esp
f0119821:	50                   	push   %eax
f0119822:	e8 29 e1 fe ff       	call   f0107950 <kfree>
f0119827:	83 c4 10             	add    $0x10,%esp
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011982a:	e8 99 a5 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011982f:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f0119832:	74 17                	je     f011984b <test_kmalloc_nextfit+0xf0c>
f0119834:	83 ec 04             	sub    $0x4,%esp
f0119837:	68 94 b3 13 f0       	push   $0xf013b394
f011983c:	68 3e 01 00 00       	push   $0x13e
f0119841:	68 7a b3 13 f0       	push   $0xf013b37a
f0119846:	e8 ba 69 fe ff       	call   f0100205 <_panic>
	if ((sys_calculate_free_frames() - freeFrames) !=  (2*Mega)/PAGE_SIZE) panic("Wrong free: Extra or less pages are removed from main memory");
f011984b:	e8 4d 33 ff ff       	call   f010cb9d <sys_calculate_free_frames>
f0119850:	89 c2                	mov    %eax,%edx
f0119852:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0119855:	29 c2                	sub    %eax,%edx
f0119857:	89 d0                	mov    %edx,%eax
f0119859:	3d 00 02 00 00       	cmp    $0x200,%eax
f011985e:	74 17                	je     f0119877 <test_kmalloc_nextfit+0xf38>
f0119860:	83 ec 04             	sub    $0x4,%esp
f0119863:	68 48 b6 13 f0       	push   $0xf013b648
f0119868:	68 3f 01 00 00       	push   $0x13f
f011986d:	68 7a b3 13 f0       	push   $0xf013b37a
f0119872:	e8 8e 69 fe ff       	call   f0100205 <_panic>

	freeDiskFrames = pf_calculate_free_frames() ;
f0119877:	e8 4c a5 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011987c:	89 45 ec             	mov    %eax,-0x14(%ebp)
	freeFrames = sys_calculate_free_frames() ;
f011987f:	e8 19 33 ff ff       	call   f010cb9d <sys_calculate_free_frames>
f0119884:	89 45 f0             	mov    %eax,-0x10(%ebp)
	tempAddress = kmalloc(kilo); 			   // Use new Hole = 2 M - 4 kilo
f0119887:	83 ec 0c             	sub    $0xc,%esp
f011988a:	68 00 04 00 00       	push   $0x400
f011988f:	e8 f1 df fe ff       	call   f0107885 <kmalloc>
f0119894:	83 c4 10             	add    $0x10,%esp
f0119897:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x01E00000)
f011989d:	c7 85 7c fe ff ff 00 	movl   $0x1000,-0x184(%ebp)
f01198a4:	10 00 00 
f01198a7:	8b 85 7c fe ff ff    	mov    -0x184(%ebp),%eax
f01198ad:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01198b2:	89 85 78 fe ff ff    	mov    %eax,-0x188(%ebp)
f01198b8:	8b 85 78 fe ff ff    	mov    -0x188(%ebp),%eax
f01198be:	ba 00 00 00 00       	mov    $0x0,%edx
f01198c3:	f7 b5 7c fe ff ff    	divl   -0x184(%ebp)
f01198c9:	8b 85 78 fe ff ff    	mov    -0x188(%ebp),%eax
f01198cf:	29 d0                	sub    %edx,%eax
f01198d1:	89 c1                	mov    %eax,%ecx
f01198d3:	c7 85 74 fe ff ff 00 	movl   $0x1000,-0x18c(%ebp)
f01198da:	10 00 00 
f01198dd:	a0 40 26 78 f0       	mov    0xf0782640,%al
f01198e2:	0f b6 d0             	movzbl %al,%edx
f01198e5:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f01198eb:	01 d0                	add    %edx,%eax
f01198ed:	48                   	dec    %eax
f01198ee:	89 85 70 fe ff ff    	mov    %eax,-0x190(%ebp)
f01198f4:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f01198fa:	ba 00 00 00 00       	mov    $0x0,%edx
f01198ff:	f7 b5 74 fe ff ff    	divl   -0x18c(%ebp)
f0119905:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f011990b:	29 d0                	sub    %edx,%eax
f011990d:	01 c1                	add    %eax,%ecx
f011990f:	c7 85 6c fe ff ff 00 	movl   $0x1000,-0x194(%ebp)
f0119916:	10 00 00 
f0119919:	a0 40 26 78 f0       	mov    0xf0782640,%al
f011991e:	0f b6 c0             	movzbl %al,%eax
f0119921:	c1 e0 04             	shl    $0x4,%eax
f0119924:	89 c2                	mov    %eax,%edx
f0119926:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f011992c:	01 d0                	add    %edx,%eax
f011992e:	48                   	dec    %eax
f011992f:	89 85 68 fe ff ff    	mov    %eax,-0x198(%ebp)
f0119935:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f011993b:	ba 00 00 00 00       	mov    $0x0,%edx
f0119940:	f7 b5 6c fe ff ff    	divl   -0x194(%ebp)
f0119946:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f011994c:	29 d0                	sub    %edx,%eax
f011994e:	01 c8                	add    %ecx,%eax
f0119950:	8d 90 00 40 e0 f7    	lea    -0x81fc000(%eax),%edx
f0119956:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f011995c:	39 c2                	cmp    %eax,%edx
f011995e:	74 17                	je     f0119977 <test_kmalloc_nextfit+0x1038>
		panic("Next Fit not working correctly");
f0119960:	83 ec 04             	sub    $0x4,%esp
f0119963:	68 88 b6 13 f0       	push   $0xf013b688
f0119968:	68 45 01 00 00       	push   $0x145
f011996d:	68 7a b3 13 f0       	push   $0xf013b37a
f0119972:	e8 8e 68 fe ff       	call   f0100205 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0119977:	e8 4c a4 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011997c:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011997f:	74 17                	je     f0119998 <test_kmalloc_nextfit+0x1059>
f0119981:	83 ec 04             	sub    $0x4,%esp
f0119984:	68 94 b3 13 f0       	push   $0xf013b394
f0119989:	68 46 01 00 00       	push   $0x146
f011998e:	68 7a b3 13 f0       	push   $0xf013b37a
f0119993:	e8 6d 68 fe ff       	call   f0100205 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation");
f0119998:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f011999b:	e8 fd 31 ff ff       	call   f010cb9d <sys_calculate_free_frames>
f01199a0:	29 c3                	sub    %eax,%ebx
f01199a2:	89 d8                	mov    %ebx,%eax
f01199a4:	83 f8 01             	cmp    $0x1,%eax
f01199a7:	74 17                	je     f01199c0 <test_kmalloc_nextfit+0x1081>
f01199a9:	83 ec 04             	sub    $0x4,%esp
f01199ac:	68 37 b6 13 f0       	push   $0xf013b637
f01199b1:	68 47 01 00 00       	push   $0x147
f01199b6:	68 7a b3 13 f0       	push   $0xf013b37a
f01199bb:	e8 45 68 fe ff       	call   f0100205 <_panic>

	freeDiskFrames = pf_calculate_free_frames() ;
f01199c0:	e8 03 a4 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f01199c5:	89 45 ec             	mov    %eax,-0x14(%ebp)
	freeFrames = sys_calculate_free_frames() ;
f01199c8:	e8 d0 31 ff ff       	call   f010cb9d <sys_calculate_free_frames>
f01199cd:	89 45 f0             	mov    %eax,-0x10(%ebp)
	tempAddress = kmalloc(Mega + 1016*kilo); 	// Use new Hole = 4 kilo
f01199d0:	83 ec 0c             	sub    $0xc,%esp
f01199d3:	68 00 e0 1f 00       	push   $0x1fe000
f01199d8:	e8 a8 de fe ff       	call   f0107885 <kmalloc>
f01199dd:	83 c4 10             	add    $0x10,%esp
f01199e0:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x01E01000)
f01199e6:	c7 85 64 fe ff ff 00 	movl   $0x1000,-0x19c(%ebp)
f01199ed:	10 00 00 
f01199f0:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f01199f6:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01199fb:	89 85 60 fe ff ff    	mov    %eax,-0x1a0(%ebp)
f0119a01:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f0119a07:	ba 00 00 00 00       	mov    $0x0,%edx
f0119a0c:	f7 b5 64 fe ff ff    	divl   -0x19c(%ebp)
f0119a12:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f0119a18:	29 d0                	sub    %edx,%eax
f0119a1a:	89 c1                	mov    %eax,%ecx
f0119a1c:	c7 85 5c fe ff ff 00 	movl   $0x1000,-0x1a4(%ebp)
f0119a23:	10 00 00 
f0119a26:	a0 40 26 78 f0       	mov    0xf0782640,%al
f0119a2b:	0f b6 d0             	movzbl %al,%edx
f0119a2e:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f0119a34:	01 d0                	add    %edx,%eax
f0119a36:	48                   	dec    %eax
f0119a37:	89 85 58 fe ff ff    	mov    %eax,-0x1a8(%ebp)
f0119a3d:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f0119a43:	ba 00 00 00 00       	mov    $0x0,%edx
f0119a48:	f7 b5 5c fe ff ff    	divl   -0x1a4(%ebp)
f0119a4e:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f0119a54:	29 d0                	sub    %edx,%eax
f0119a56:	01 c1                	add    %eax,%ecx
f0119a58:	c7 85 54 fe ff ff 00 	movl   $0x1000,-0x1ac(%ebp)
f0119a5f:	10 00 00 
f0119a62:	a0 40 26 78 f0       	mov    0xf0782640,%al
f0119a67:	0f b6 c0             	movzbl %al,%eax
f0119a6a:	c1 e0 04             	shl    $0x4,%eax
f0119a6d:	89 c2                	mov    %eax,%edx
f0119a6f:	8b 85 54 fe ff ff    	mov    -0x1ac(%ebp),%eax
f0119a75:	01 d0                	add    %edx,%eax
f0119a77:	48                   	dec    %eax
f0119a78:	89 85 50 fe ff ff    	mov    %eax,-0x1b0(%ebp)
f0119a7e:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f0119a84:	ba 00 00 00 00       	mov    $0x0,%edx
f0119a89:	f7 b5 54 fe ff ff    	divl   -0x1ac(%ebp)
f0119a8f:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f0119a95:	29 d0                	sub    %edx,%eax
f0119a97:	01 c8                	add    %ecx,%eax
f0119a99:	8d 90 00 50 e0 f7    	lea    -0x81fb000(%eax),%edx
f0119a9f:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f0119aa5:	39 c2                	cmp    %eax,%edx
f0119aa7:	74 17                	je     f0119ac0 <test_kmalloc_nextfit+0x1181>
		panic("Next Fit not working correctly");
f0119aa9:	83 ec 04             	sub    $0x4,%esp
f0119aac:	68 88 b6 13 f0       	push   $0xf013b688
f0119ab1:	68 4d 01 00 00       	push   $0x14d
f0119ab6:	68 7a b3 13 f0       	push   $0xf013b37a
f0119abb:	e8 45 67 fe ff       	call   f0100205 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0119ac0:	e8 03 a3 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0119ac5:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f0119ac8:	74 17                	je     f0119ae1 <test_kmalloc_nextfit+0x11a2>
f0119aca:	83 ec 04             	sub    $0x4,%esp
f0119acd:	68 94 b3 13 f0       	push   $0xf013b394
f0119ad2:	68 4e 01 00 00       	push   $0x14e
f0119ad7:	68 7a b3 13 f0       	push   $0xf013b37a
f0119adc:	e8 24 67 fe ff       	call   f0100205 <_panic>

	if ((freeFrames - sys_calculate_free_frames()) != (1*Mega+1016*kilo)/PAGE_SIZE) panic("Wrong allocation");
f0119ae1:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f0119ae4:	e8 b4 30 ff ff       	call   f010cb9d <sys_calculate_free_frames>
f0119ae9:	29 c3                	sub    %eax,%ebx
f0119aeb:	89 d8                	mov    %ebx,%eax
f0119aed:	3d fe 01 00 00       	cmp    $0x1fe,%eax
f0119af2:	74 17                	je     f0119b0b <test_kmalloc_nextfit+0x11cc>
f0119af4:	83 ec 04             	sub    $0x4,%esp
f0119af7:	68 37 b6 13 f0       	push   $0xf013b637
f0119afc:	68 50 01 00 00       	push   $0x150
f0119b01:	68 7a b3 13 f0       	push   $0xf013b37a
f0119b06:	e8 fa 66 fe ff       	call   f0100205 <_panic>

	freeDiskFrames = pf_calculate_free_frames() ;
f0119b0b:	e8 b8 a2 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0119b10:	89 45 ec             	mov    %eax,-0x14(%ebp)
	freeFrames = sys_calculate_free_frames() ;
f0119b13:	e8 85 30 ff ff       	call   f010cb9d <sys_calculate_free_frames>
f0119b18:	89 45 f0             	mov    %eax,-0x10(%ebp)
	tempAddress = kmalloc(512*kilo); 			   // Use Hole 5 -> Hole 5 = 1.5 M
f0119b1b:	83 ec 0c             	sub    $0xc,%esp
f0119b1e:	68 00 00 08 00       	push   $0x80000
f0119b23:	e8 5d dd fe ff       	call   f0107885 <kmalloc>
f0119b28:	83 c4 10             	add    $0x10,%esp
f0119b2b:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x02800000)
f0119b31:	c7 85 4c fe ff ff 00 	movl   $0x1000,-0x1b4(%ebp)
f0119b38:	10 00 00 
f0119b3b:	8b 85 4c fe ff ff    	mov    -0x1b4(%ebp),%eax
f0119b41:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0119b46:	89 85 48 fe ff ff    	mov    %eax,-0x1b8(%ebp)
f0119b4c:	8b 85 48 fe ff ff    	mov    -0x1b8(%ebp),%eax
f0119b52:	ba 00 00 00 00       	mov    $0x0,%edx
f0119b57:	f7 b5 4c fe ff ff    	divl   -0x1b4(%ebp)
f0119b5d:	8b 85 48 fe ff ff    	mov    -0x1b8(%ebp),%eax
f0119b63:	29 d0                	sub    %edx,%eax
f0119b65:	89 c1                	mov    %eax,%ecx
f0119b67:	c7 85 44 fe ff ff 00 	movl   $0x1000,-0x1bc(%ebp)
f0119b6e:	10 00 00 
f0119b71:	a0 40 26 78 f0       	mov    0xf0782640,%al
f0119b76:	0f b6 d0             	movzbl %al,%edx
f0119b79:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f0119b7f:	01 d0                	add    %edx,%eax
f0119b81:	48                   	dec    %eax
f0119b82:	89 85 40 fe ff ff    	mov    %eax,-0x1c0(%ebp)
f0119b88:	8b 85 40 fe ff ff    	mov    -0x1c0(%ebp),%eax
f0119b8e:	ba 00 00 00 00       	mov    $0x0,%edx
f0119b93:	f7 b5 44 fe ff ff    	divl   -0x1bc(%ebp)
f0119b99:	8b 85 40 fe ff ff    	mov    -0x1c0(%ebp),%eax
f0119b9f:	29 d0                	sub    %edx,%eax
f0119ba1:	01 c1                	add    %eax,%ecx
f0119ba3:	c7 85 3c fe ff ff 00 	movl   $0x1000,-0x1c4(%ebp)
f0119baa:	10 00 00 
f0119bad:	a0 40 26 78 f0       	mov    0xf0782640,%al
f0119bb2:	0f b6 c0             	movzbl %al,%eax
f0119bb5:	c1 e0 04             	shl    $0x4,%eax
f0119bb8:	89 c2                	mov    %eax,%edx
f0119bba:	8b 85 3c fe ff ff    	mov    -0x1c4(%ebp),%eax
f0119bc0:	01 d0                	add    %edx,%eax
f0119bc2:	48                   	dec    %eax
f0119bc3:	89 85 38 fe ff ff    	mov    %eax,-0x1c8(%ebp)
f0119bc9:	8b 85 38 fe ff ff    	mov    -0x1c8(%ebp),%eax
f0119bcf:	ba 00 00 00 00       	mov    $0x0,%edx
f0119bd4:	f7 b5 3c fe ff ff    	divl   -0x1c4(%ebp)
f0119bda:	8b 85 38 fe ff ff    	mov    -0x1c8(%ebp),%eax
f0119be0:	29 d0                	sub    %edx,%eax
f0119be2:	01 c8                	add    %ecx,%eax
f0119be4:	8d 90 00 40 80 f8    	lea    -0x77fc000(%eax),%edx
f0119bea:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f0119bf0:	39 c2                	cmp    %eax,%edx
f0119bf2:	74 17                	je     f0119c0b <test_kmalloc_nextfit+0x12cc>
		panic("Next Fit not working correctly");
f0119bf4:	83 ec 04             	sub    $0x4,%esp
f0119bf7:	68 88 b6 13 f0       	push   $0xf013b688
f0119bfc:	68 56 01 00 00       	push   $0x156
f0119c01:	68 7a b3 13 f0       	push   $0xf013b37a
f0119c06:	e8 fa 65 fe ff       	call   f0100205 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0119c0b:	e8 b8 a1 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0119c10:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f0119c13:	74 17                	je     f0119c2c <test_kmalloc_nextfit+0x12ed>
f0119c15:	83 ec 04             	sub    $0x4,%esp
f0119c18:	68 94 b3 13 f0       	push   $0xf013b394
f0119c1d:	68 57 01 00 00       	push   $0x157
f0119c22:	68 7a b3 13 f0       	push   $0xf013b37a
f0119c27:	e8 d9 65 fe ff       	call   f0100205 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) != (512*kilo)/PAGE_SIZE) panic("Wrong allocation");
f0119c2c:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f0119c2f:	e8 69 2f ff ff       	call   f010cb9d <sys_calculate_free_frames>
f0119c34:	29 c3                	sub    %eax,%ebx
f0119c36:	89 d8                	mov    %ebx,%eax
f0119c38:	3d 80 00 00 00       	cmp    $0x80,%eax
f0119c3d:	74 17                	je     f0119c56 <test_kmalloc_nextfit+0x1317>
f0119c3f:	83 ec 04             	sub    $0x4,%esp
f0119c42:	68 37 b6 13 f0       	push   $0xf013b637
f0119c47:	68 58 01 00 00       	push   $0x158
f0119c4c:	68 7a b3 13 f0       	push   $0xf013b37a
f0119c51:	e8 af 65 fe ff       	call   f0100205 <_panic>

	cprintf("\nCASE1: (next fit without looping back) is succeeded...\n") ;
f0119c56:	83 ec 0c             	sub    $0xc,%esp
f0119c59:	68 a8 b6 13 f0       	push   $0xf013b6a8
f0119c5e:	e8 ab 70 fe ff       	call   f0100d0e <cprintf>
f0119c63:	83 c4 10             	add    $0x10,%esp
	/******************************/

	// Check that next fit is looping back to check for free space
	freeDiskFrames = pf_calculate_free_frames() ;
f0119c66:	e8 5d a1 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0119c6b:	89 45 ec             	mov    %eax,-0x14(%ebp)
	freeFrames = sys_calculate_free_frames() ;
f0119c6e:	e8 2a 2f ff ff       	call   f010cb9d <sys_calculate_free_frames>
f0119c73:	89 45 f0             	mov    %eax,-0x10(%ebp)
	tempAddress = kmalloc(3*Mega + 512*kilo); 			   // Use Hole 2 -> Hole 2 = 0.5 M
f0119c76:	83 ec 0c             	sub    $0xc,%esp
f0119c79:	68 00 00 38 00       	push   $0x380000
f0119c7e:	e8 02 dc fe ff       	call   f0107885 <kmalloc>
f0119c83:	83 c4 10             	add    $0x10,%esp
f0119c86:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x00400000)
f0119c8c:	c7 85 34 fe ff ff 00 	movl   $0x1000,-0x1cc(%ebp)
f0119c93:	10 00 00 
f0119c96:	8b 85 34 fe ff ff    	mov    -0x1cc(%ebp),%eax
f0119c9c:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0119ca1:	89 85 30 fe ff ff    	mov    %eax,-0x1d0(%ebp)
f0119ca7:	8b 85 30 fe ff ff    	mov    -0x1d0(%ebp),%eax
f0119cad:	ba 00 00 00 00       	mov    $0x0,%edx
f0119cb2:	f7 b5 34 fe ff ff    	divl   -0x1cc(%ebp)
f0119cb8:	8b 85 30 fe ff ff    	mov    -0x1d0(%ebp),%eax
f0119cbe:	29 d0                	sub    %edx,%eax
f0119cc0:	89 c1                	mov    %eax,%ecx
f0119cc2:	c7 85 2c fe ff ff 00 	movl   $0x1000,-0x1d4(%ebp)
f0119cc9:	10 00 00 
f0119ccc:	a0 40 26 78 f0       	mov    0xf0782640,%al
f0119cd1:	0f b6 d0             	movzbl %al,%edx
f0119cd4:	8b 85 2c fe ff ff    	mov    -0x1d4(%ebp),%eax
f0119cda:	01 d0                	add    %edx,%eax
f0119cdc:	48                   	dec    %eax
f0119cdd:	89 85 28 fe ff ff    	mov    %eax,-0x1d8(%ebp)
f0119ce3:	8b 85 28 fe ff ff    	mov    -0x1d8(%ebp),%eax
f0119ce9:	ba 00 00 00 00       	mov    $0x0,%edx
f0119cee:	f7 b5 2c fe ff ff    	divl   -0x1d4(%ebp)
f0119cf4:	8b 85 28 fe ff ff    	mov    -0x1d8(%ebp),%eax
f0119cfa:	29 d0                	sub    %edx,%eax
f0119cfc:	01 c1                	add    %eax,%ecx
f0119cfe:	c7 85 24 fe ff ff 00 	movl   $0x1000,-0x1dc(%ebp)
f0119d05:	10 00 00 
f0119d08:	a0 40 26 78 f0       	mov    0xf0782640,%al
f0119d0d:	0f b6 c0             	movzbl %al,%eax
f0119d10:	c1 e0 04             	shl    $0x4,%eax
f0119d13:	89 c2                	mov    %eax,%edx
f0119d15:	8b 85 24 fe ff ff    	mov    -0x1dc(%ebp),%eax
f0119d1b:	01 d0                	add    %edx,%eax
f0119d1d:	48                   	dec    %eax
f0119d1e:	89 85 20 fe ff ff    	mov    %eax,-0x1e0(%ebp)
f0119d24:	8b 85 20 fe ff ff    	mov    -0x1e0(%ebp),%eax
f0119d2a:	ba 00 00 00 00       	mov    $0x0,%edx
f0119d2f:	f7 b5 24 fe ff ff    	divl   -0x1dc(%ebp)
f0119d35:	8b 85 20 fe ff ff    	mov    -0x1e0(%ebp),%eax
f0119d3b:	29 d0                	sub    %edx,%eax
f0119d3d:	01 c8                	add    %ecx,%eax
f0119d3f:	8d 90 00 40 40 f6    	lea    -0x9bfc000(%eax),%edx
f0119d45:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f0119d4b:	39 c2                	cmp    %eax,%edx
f0119d4d:	74 17                	je     f0119d66 <test_kmalloc_nextfit+0x1427>
		panic("Next Fit not working correctly");
f0119d4f:	83 ec 04             	sub    $0x4,%esp
f0119d52:	68 88 b6 13 f0       	push   $0xf013b688
f0119d57:	68 62 01 00 00       	push   $0x162
f0119d5c:	68 7a b3 13 f0       	push   $0xf013b37a
f0119d61:	e8 9f 64 fe ff       	call   f0100205 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0119d66:	e8 5d a0 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0119d6b:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f0119d6e:	74 17                	je     f0119d87 <test_kmalloc_nextfit+0x1448>
f0119d70:	83 ec 04             	sub    $0x4,%esp
f0119d73:	68 94 b3 13 f0       	push   $0xf013b394
f0119d78:	68 63 01 00 00       	push   $0x163
f0119d7d:	68 7a b3 13 f0       	push   $0xf013b37a
f0119d82:	e8 7e 64 fe ff       	call   f0100205 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) != (3*Mega+512*kilo)/PAGE_SIZE) panic("Wrong allocation");
f0119d87:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f0119d8a:	e8 0e 2e ff ff       	call   f010cb9d <sys_calculate_free_frames>
f0119d8f:	29 c3                	sub    %eax,%ebx
f0119d91:	89 d8                	mov    %ebx,%eax
f0119d93:	3d 80 03 00 00       	cmp    $0x380,%eax
f0119d98:	74 17                	je     f0119db1 <test_kmalloc_nextfit+0x1472>
f0119d9a:	83 ec 04             	sub    $0x4,%esp
f0119d9d:	68 37 b6 13 f0       	push   $0xf013b637
f0119da2:	68 64 01 00 00       	push   $0x164
f0119da7:	68 7a b3 13 f0       	push   $0xf013b37a
f0119dac:	e8 54 64 fe ff       	call   f0100205 <_panic>

	freeDiskFrames = pf_calculate_free_frames() ;
f0119db1:	e8 12 a0 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0119db6:	89 45 ec             	mov    %eax,-0x14(%ebp)
	freeFrames = sys_calculate_free_frames() ;
f0119db9:	e8 df 2d ff ff       	call   f010cb9d <sys_calculate_free_frames>
f0119dbe:	89 45 f0             	mov    %eax,-0x10(%ebp)
	kfree(ptr_allocations[24]);		// Increase size of Hole 6 to 4 M
f0119dc1:	8b 85 e8 fb ff ff    	mov    -0x418(%ebp),%eax
f0119dc7:	83 ec 0c             	sub    $0xc,%esp
f0119dca:	50                   	push   %eax
f0119dcb:	e8 80 db fe ff       	call   f0107950 <kfree>
f0119dd0:	83 c4 10             	add    $0x10,%esp
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0119dd3:	e8 f0 9f fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0119dd8:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f0119ddb:	74 17                	je     f0119df4 <test_kmalloc_nextfit+0x14b5>
f0119ddd:	83 ec 04             	sub    $0x4,%esp
f0119de0:	68 94 b3 13 f0       	push   $0xf013b394
f0119de5:	68 69 01 00 00       	push   $0x169
f0119dea:	68 7a b3 13 f0       	push   $0xf013b37a
f0119def:	e8 11 64 fe ff       	call   f0100205 <_panic>
	if ((sys_calculate_free_frames() - freeFrames) != (2*Mega)/PAGE_SIZE) panic("Wrong free: Extra or less pages are removed from main memory");
f0119df4:	e8 a4 2d ff ff       	call   f010cb9d <sys_calculate_free_frames>
f0119df9:	89 c2                	mov    %eax,%edx
f0119dfb:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0119dfe:	29 c2                	sub    %eax,%edx
f0119e00:	89 d0                	mov    %edx,%eax
f0119e02:	3d 00 02 00 00       	cmp    $0x200,%eax
f0119e07:	74 17                	je     f0119e20 <test_kmalloc_nextfit+0x14e1>
f0119e09:	83 ec 04             	sub    $0x4,%esp
f0119e0c:	68 48 b6 13 f0       	push   $0xf013b648
f0119e11:	68 6a 01 00 00       	push   $0x16a
f0119e16:	68 7a b3 13 f0       	push   $0xf013b37a
f0119e1b:	e8 e5 63 fe ff       	call   f0100205 <_panic>

	freeDiskFrames = pf_calculate_free_frames() ;
f0119e20:	e8 a3 9f fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0119e25:	89 45 ec             	mov    %eax,-0x14(%ebp)
	freeFrames = sys_calculate_free_frames() ;
f0119e28:	e8 70 2d ff ff       	call   f010cb9d <sys_calculate_free_frames>
f0119e2d:	89 45 f0             	mov    %eax,-0x10(%ebp)
	tempAddress = kmalloc(4*Mega-kilo);		// Use Hole 6 -> Hole 6 = 0 M
f0119e30:	83 ec 0c             	sub    $0xc,%esp
f0119e33:	68 00 fc 3f 00       	push   $0x3ffc00
f0119e38:	e8 48 da fe ff       	call   f0107885 <kmalloc>
f0119e3d:	83 c4 10             	add    $0x10,%esp
f0119e40:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x03000000)
f0119e46:	c7 85 1c fe ff ff 00 	movl   $0x1000,-0x1e4(%ebp)
f0119e4d:	10 00 00 
f0119e50:	8b 85 1c fe ff ff    	mov    -0x1e4(%ebp),%eax
f0119e56:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0119e5b:	89 85 18 fe ff ff    	mov    %eax,-0x1e8(%ebp)
f0119e61:	8b 85 18 fe ff ff    	mov    -0x1e8(%ebp),%eax
f0119e67:	ba 00 00 00 00       	mov    $0x0,%edx
f0119e6c:	f7 b5 1c fe ff ff    	divl   -0x1e4(%ebp)
f0119e72:	8b 85 18 fe ff ff    	mov    -0x1e8(%ebp),%eax
f0119e78:	29 d0                	sub    %edx,%eax
f0119e7a:	89 c1                	mov    %eax,%ecx
f0119e7c:	c7 85 14 fe ff ff 00 	movl   $0x1000,-0x1ec(%ebp)
f0119e83:	10 00 00 
f0119e86:	a0 40 26 78 f0       	mov    0xf0782640,%al
f0119e8b:	0f b6 d0             	movzbl %al,%edx
f0119e8e:	8b 85 14 fe ff ff    	mov    -0x1ec(%ebp),%eax
f0119e94:	01 d0                	add    %edx,%eax
f0119e96:	48                   	dec    %eax
f0119e97:	89 85 10 fe ff ff    	mov    %eax,-0x1f0(%ebp)
f0119e9d:	8b 85 10 fe ff ff    	mov    -0x1f0(%ebp),%eax
f0119ea3:	ba 00 00 00 00       	mov    $0x0,%edx
f0119ea8:	f7 b5 14 fe ff ff    	divl   -0x1ec(%ebp)
f0119eae:	8b 85 10 fe ff ff    	mov    -0x1f0(%ebp),%eax
f0119eb4:	29 d0                	sub    %edx,%eax
f0119eb6:	01 c1                	add    %eax,%ecx
f0119eb8:	c7 85 0c fe ff ff 00 	movl   $0x1000,-0x1f4(%ebp)
f0119ebf:	10 00 00 
f0119ec2:	a0 40 26 78 f0       	mov    0xf0782640,%al
f0119ec7:	0f b6 c0             	movzbl %al,%eax
f0119eca:	c1 e0 04             	shl    $0x4,%eax
f0119ecd:	89 c2                	mov    %eax,%edx
f0119ecf:	8b 85 0c fe ff ff    	mov    -0x1f4(%ebp),%eax
f0119ed5:	01 d0                	add    %edx,%eax
f0119ed7:	48                   	dec    %eax
f0119ed8:	89 85 08 fe ff ff    	mov    %eax,-0x1f8(%ebp)
f0119ede:	8b 85 08 fe ff ff    	mov    -0x1f8(%ebp),%eax
f0119ee4:	ba 00 00 00 00       	mov    $0x0,%edx
f0119ee9:	f7 b5 0c fe ff ff    	divl   -0x1f4(%ebp)
f0119eef:	8b 85 08 fe ff ff    	mov    -0x1f8(%ebp),%eax
f0119ef5:	29 d0                	sub    %edx,%eax
f0119ef7:	01 c8                	add    %ecx,%eax
f0119ef9:	8d 90 00 40 00 f9    	lea    -0x6ffc000(%eax),%edx
f0119eff:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f0119f05:	39 c2                	cmp    %eax,%edx
f0119f07:	74 17                	je     f0119f20 <test_kmalloc_nextfit+0x15e1>
		panic("Next Fit not working correctly");
f0119f09:	83 ec 04             	sub    $0x4,%esp
f0119f0c:	68 88 b6 13 f0       	push   $0xf013b688
f0119f11:	68 70 01 00 00       	push   $0x170
f0119f16:	68 7a b3 13 f0       	push   $0xf013b37a
f0119f1b:	e8 e5 62 fe ff       	call   f0100205 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0119f20:	e8 a3 9e fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0119f25:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f0119f28:	74 17                	je     f0119f41 <test_kmalloc_nextfit+0x1602>
f0119f2a:	83 ec 04             	sub    $0x4,%esp
f0119f2d:	68 94 b3 13 f0       	push   $0xf013b394
f0119f32:	68 71 01 00 00       	push   $0x171
f0119f37:	68 7a b3 13 f0       	push   $0xf013b37a
f0119f3c:	e8 c4 62 fe ff       	call   f0100205 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) != (4*Mega)/PAGE_SIZE) panic("Wrong allocation");
f0119f41:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f0119f44:	e8 54 2c ff ff       	call   f010cb9d <sys_calculate_free_frames>
f0119f49:	29 c3                	sub    %eax,%ebx
f0119f4b:	89 d8                	mov    %ebx,%eax
f0119f4d:	3d 00 04 00 00       	cmp    $0x400,%eax
f0119f52:	74 17                	je     f0119f6b <test_kmalloc_nextfit+0x162c>
f0119f54:	83 ec 04             	sub    $0x4,%esp
f0119f57:	68 37 b6 13 f0       	push   $0xf013b637
f0119f5c:	68 72 01 00 00       	push   $0x172
f0119f61:	68 7a b3 13 f0       	push   $0xf013b37a
f0119f66:	e8 9a 62 fe ff       	call   f0100205 <_panic>

	cprintf("\nCASE2: (next fit WITH looping back) is succeeded...\n") ;
f0119f6b:	83 ec 0c             	sub    $0xc,%esp
f0119f6e:	68 e4 b6 13 f0       	push   $0xf013b6e4
f0119f73:	e8 96 6d fe ff       	call   f0100d0e <cprintf>
f0119f78:	83 c4 10             	add    $0x10,%esp
	/******************************/

	// Check that next fit returns null in case all holes are not free
	freeDiskFrames = pf_calculate_free_frames() ;
f0119f7b:	e8 48 9e fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0119f80:	89 45 ec             	mov    %eax,-0x14(%ebp)
	freeFrames = sys_calculate_free_frames() ;
f0119f83:	e8 15 2c ff ff       	call   f010cb9d <sys_calculate_free_frames>
f0119f88:	89 45 f0             	mov    %eax,-0x10(%ebp)
	tempAddress = kmalloc(6*Mega); 			   // No Suitable Hole is available
f0119f8b:	83 ec 0c             	sub    $0xc,%esp
f0119f8e:	68 00 00 60 00       	push   $0x600000
f0119f93:	e8 ed d8 fe ff       	call   f0107885 <kmalloc>
f0119f98:	83 c4 10             	add    $0x10,%esp
f0119f9b:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
	if((uint32)tempAddress != 0x0)
f0119fa1:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f0119fa7:	85 c0                	test   %eax,%eax
f0119fa9:	74 17                	je     f0119fc2 <test_kmalloc_nextfit+0x1683>
		panic("Next Fit not working correctly");
f0119fab:	83 ec 04             	sub    $0x4,%esp
f0119fae:	68 88 b6 13 f0       	push   $0xf013b688
f0119fb3:	68 7c 01 00 00       	push   $0x17c
f0119fb8:	68 7a b3 13 f0       	push   $0xf013b37a
f0119fbd:	e8 43 62 fe ff       	call   f0100205 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0119fc2:	e8 01 9e fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0119fc7:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f0119fca:	74 17                	je     f0119fe3 <test_kmalloc_nextfit+0x16a4>
f0119fcc:	83 ec 04             	sub    $0x4,%esp
f0119fcf:	68 94 b3 13 f0       	push   $0xf013b394
f0119fd4:	68 7d 01 00 00       	push   $0x17d
f0119fd9:	68 7a b3 13 f0       	push   $0xf013b37a
f0119fde:	e8 22 62 fe ff       	call   f0100205 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Wrong allocation");
f0119fe3:	e8 b5 2b ff ff       	call   f010cb9d <sys_calculate_free_frames>
f0119fe8:	89 c2                	mov    %eax,%edx
f0119fea:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0119fed:	39 c2                	cmp    %eax,%edx
f0119fef:	74 17                	je     f011a008 <test_kmalloc_nextfit+0x16c9>
f0119ff1:	83 ec 04             	sub    $0x4,%esp
f0119ff4:	68 37 b6 13 f0       	push   $0xf013b637
f0119ff9:	68 7e 01 00 00       	push   $0x17e
f0119ffe:	68 7a b3 13 f0       	push   $0xf013b37a
f011a003:	e8 fd 61 fe ff       	call   f0100205 <_panic>

	cprintf("\nCASE3: (next fit with insufficient space) is succeeded...\n") ;
f011a008:	83 ec 0c             	sub    $0xc,%esp
f011a00b:	68 1c b7 13 f0       	push   $0xf013b71c
f011a010:	e8 f9 6c fe ff       	call   f0100d0e <cprintf>
f011a015:	83 c4 10             	add    $0x10,%esp
	/******************************/

	cprintf("Congratulations!! test Next Fit completed successfully.\n");
f011a018:	83 ec 0c             	sub    $0xc,%esp
f011a01b:	68 58 b7 13 f0       	push   $0xf013b758
f011a020:	e8 e9 6c fe ff       	call   f0100d0e <cprintf>
f011a025:	83 c4 10             	add    $0x10,%esp
	return 1;
f011a028:	b8 01 00 00 00       	mov    $0x1,%eax

}
f011a02d:	8d 65 f8             	lea    -0x8(%ebp),%esp
f011a030:	5b                   	pop    %ebx
f011a031:	5f                   	pop    %edi
f011a032:	5d                   	pop    %ebp
f011a033:	c3                   	ret    

f011a034 <test_kmalloc_bestfit1>:

int test_kmalloc_bestfit1()
{
f011a034:	55                   	push   %ebp
f011a035:	89 e5                	mov    %esp,%ebp
f011a037:	57                   	push   %edi
f011a038:	53                   	push   %ebx
f011a039:	81 ec 90 01 00 00    	sub    $0x190,%esp
	cprintf("==============================================\n");
f011a03f:	83 ec 0c             	sub    $0xc,%esp
f011a042:	68 bc b2 13 f0       	push   $0xf013b2bc
f011a047:	e8 c2 6c fe ff       	call   f0100d0e <cprintf>
f011a04c:	83 c4 10             	add    $0x10,%esp
	cprintf("MAKE SURE to have a FRESH RUN for this test\n(i.e. don't run any program/test before it)\n");
f011a04f:	83 ec 0c             	sub    $0xc,%esp
f011a052:	68 ec b2 13 f0       	push   $0xf013b2ec
f011a057:	e8 b2 6c fe ff       	call   f0100d0e <cprintf>
f011a05c:	83 c4 10             	add    $0x10,%esp
	cprintf("==============================================\n");
f011a05f:	83 ec 0c             	sub    $0xc,%esp
f011a062:	68 bc b2 13 f0       	push   $0xf013b2bc
f011a067:	e8 a2 6c fe ff       	call   f0100d0e <cprintf>
f011a06c:	83 c4 10             	add    $0x10,%esp

	void* ptr_allocations[20] = {0};
f011a06f:	8d 95 68 fe ff ff    	lea    -0x198(%ebp),%edx
f011a075:	b9 14 00 00 00       	mov    $0x14,%ecx
f011a07a:	b8 00 00 00 00       	mov    $0x0,%eax
f011a07f:	89 d7                	mov    %edx,%edi
f011a081:	f3 ab                	rep stos %eax,%es:(%edi)
	uint32 freeDiskFrames;

	//[1] Allocate all
	{
		//Allocate 3 MB
		freeFrames = sys_calculate_free_frames() ;
f011a083:	e8 15 2b ff ff       	call   f010cb9d <sys_calculate_free_frames>
f011a088:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011a08b:	e8 38 9d fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011a090:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[0] = kmalloc(3*Mega-kilo);
f011a093:	83 ec 0c             	sub    $0xc,%esp
f011a096:	68 00 fc 2f 00       	push   $0x2ffc00
f011a09b:	e8 e5 d7 fe ff       	call   f0107885 <kmalloc>
f011a0a0:	83 c4 10             	add    $0x10,%esp
f011a0a3:	89 85 68 fe ff ff    	mov    %eax,-0x198(%ebp)
		if ((uint32) ptr_allocations[0] != (ACTUAL_START)) panic("Wrong start address for the allocated space... ");
f011a0a9:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f011a0af:	89 c1                	mov    %eax,%ecx
f011a0b1:	c7 45 ec 00 10 00 00 	movl   $0x1000,-0x14(%ebp)
f011a0b8:	8b 45 ec             	mov    -0x14(%ebp),%eax
f011a0bb:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011a0c0:	89 45 e8             	mov    %eax,-0x18(%ebp)
f011a0c3:	8b 45 e8             	mov    -0x18(%ebp),%eax
f011a0c6:	ba 00 00 00 00       	mov    $0x0,%edx
f011a0cb:	f7 75 ec             	divl   -0x14(%ebp)
f011a0ce:	8b 45 e8             	mov    -0x18(%ebp),%eax
f011a0d1:	29 d0                	sub    %edx,%eax
f011a0d3:	89 c3                	mov    %eax,%ebx
f011a0d5:	c7 45 e4 00 10 00 00 	movl   $0x1000,-0x1c(%ebp)
f011a0dc:	a0 40 26 78 f0       	mov    0xf0782640,%al
f011a0e1:	0f b6 d0             	movzbl %al,%edx
f011a0e4:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f011a0e7:	01 d0                	add    %edx,%eax
f011a0e9:	48                   	dec    %eax
f011a0ea:	89 45 e0             	mov    %eax,-0x20(%ebp)
f011a0ed:	8b 45 e0             	mov    -0x20(%ebp),%eax
f011a0f0:	ba 00 00 00 00       	mov    $0x0,%edx
f011a0f5:	f7 75 e4             	divl   -0x1c(%ebp)
f011a0f8:	8b 45 e0             	mov    -0x20(%ebp),%eax
f011a0fb:	29 d0                	sub    %edx,%eax
f011a0fd:	01 c3                	add    %eax,%ebx
f011a0ff:	c7 45 dc 00 10 00 00 	movl   $0x1000,-0x24(%ebp)
f011a106:	a0 40 26 78 f0       	mov    0xf0782640,%al
f011a10b:	0f b6 c0             	movzbl %al,%eax
f011a10e:	c1 e0 04             	shl    $0x4,%eax
f011a111:	89 c2                	mov    %eax,%edx
f011a113:	8b 45 dc             	mov    -0x24(%ebp),%eax
f011a116:	01 d0                	add    %edx,%eax
f011a118:	48                   	dec    %eax
f011a119:	89 45 d8             	mov    %eax,-0x28(%ebp)
f011a11c:	8b 45 d8             	mov    -0x28(%ebp),%eax
f011a11f:	ba 00 00 00 00       	mov    $0x0,%edx
f011a124:	f7 75 dc             	divl   -0x24(%ebp)
f011a127:	8b 45 d8             	mov    -0x28(%ebp),%eax
f011a12a:	29 d0                	sub    %edx,%eax
f011a12c:	01 d8                	add    %ebx,%eax
f011a12e:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f011a133:	39 c1                	cmp    %eax,%ecx
f011a135:	74 17                	je     f011a14e <test_kmalloc_bestfit1+0x11a>
f011a137:	83 ec 04             	sub    $0x4,%esp
f011a13a:	68 94 b7 13 f0       	push   $0xf013b794
f011a13f:	68 98 01 00 00       	push   $0x198
f011a144:	68 7a b3 13 f0       	push   $0xf013b37a
f011a149:	e8 b7 60 fe ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011a14e:	e8 75 9c fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011a153:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011a156:	74 17                	je     f011a16f <test_kmalloc_bestfit1+0x13b>
f011a158:	83 ec 04             	sub    $0x4,%esp
f011a15b:	68 94 b3 13 f0       	push   $0xf013b394
f011a160:	68 99 01 00 00       	push   $0x199
f011a165:	68 7a b3 13 f0       	push   $0xf013b37a
f011a16a:	e8 96 60 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != ((3*Mega)/PAGE_SIZE)) panic("Wrong allocation: ");
f011a16f:	e8 29 2a ff ff       	call   f010cb9d <sys_calculate_free_frames>
f011a174:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011a177:	29 c2                	sub    %eax,%edx
f011a179:	89 d0                	mov    %edx,%eax
f011a17b:	3d 00 03 00 00       	cmp    $0x300,%eax
f011a180:	74 17                	je     f011a199 <test_kmalloc_bestfit1+0x165>
f011a182:	83 ec 04             	sub    $0x4,%esp
f011a185:	68 c4 b7 13 f0       	push   $0xf013b7c4
f011a18a:	68 9a 01 00 00       	push   $0x19a
f011a18f:	68 7a b3 13 f0       	push   $0xf013b37a
f011a194:	e8 6c 60 fe ff       	call   f0100205 <_panic>

		//Allocate 3 MB
		freeFrames = sys_calculate_free_frames() ;
f011a199:	e8 ff 29 ff ff       	call   f010cb9d <sys_calculate_free_frames>
f011a19e:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011a1a1:	e8 22 9c fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011a1a6:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[1] = kmalloc(3*Mega-kilo);
f011a1a9:	83 ec 0c             	sub    $0xc,%esp
f011a1ac:	68 00 fc 2f 00       	push   $0x2ffc00
f011a1b1:	e8 cf d6 fe ff       	call   f0107885 <kmalloc>
f011a1b6:	83 c4 10             	add    $0x10,%esp
f011a1b9:	89 85 6c fe ff ff    	mov    %eax,-0x194(%ebp)
		if ((uint32) ptr_allocations[1] !=  (ACTUAL_START + 3*Mega)) panic("Wrong start address for the allocated space... ");
f011a1bf:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f011a1c5:	89 c1                	mov    %eax,%ecx
f011a1c7:	c7 45 d4 00 10 00 00 	movl   $0x1000,-0x2c(%ebp)
f011a1ce:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f011a1d1:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011a1d6:	89 45 d0             	mov    %eax,-0x30(%ebp)
f011a1d9:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011a1dc:	ba 00 00 00 00       	mov    $0x0,%edx
f011a1e1:	f7 75 d4             	divl   -0x2c(%ebp)
f011a1e4:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011a1e7:	29 d0                	sub    %edx,%eax
f011a1e9:	89 c3                	mov    %eax,%ebx
f011a1eb:	c7 45 cc 00 10 00 00 	movl   $0x1000,-0x34(%ebp)
f011a1f2:	a0 40 26 78 f0       	mov    0xf0782640,%al
f011a1f7:	0f b6 d0             	movzbl %al,%edx
f011a1fa:	8b 45 cc             	mov    -0x34(%ebp),%eax
f011a1fd:	01 d0                	add    %edx,%eax
f011a1ff:	48                   	dec    %eax
f011a200:	89 45 c8             	mov    %eax,-0x38(%ebp)
f011a203:	8b 45 c8             	mov    -0x38(%ebp),%eax
f011a206:	ba 00 00 00 00       	mov    $0x0,%edx
f011a20b:	f7 75 cc             	divl   -0x34(%ebp)
f011a20e:	8b 45 c8             	mov    -0x38(%ebp),%eax
f011a211:	29 d0                	sub    %edx,%eax
f011a213:	01 c3                	add    %eax,%ebx
f011a215:	c7 45 c4 00 10 00 00 	movl   $0x1000,-0x3c(%ebp)
f011a21c:	a0 40 26 78 f0       	mov    0xf0782640,%al
f011a221:	0f b6 c0             	movzbl %al,%eax
f011a224:	c1 e0 04             	shl    $0x4,%eax
f011a227:	89 c2                	mov    %eax,%edx
f011a229:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f011a22c:	01 d0                	add    %edx,%eax
f011a22e:	48                   	dec    %eax
f011a22f:	89 45 c0             	mov    %eax,-0x40(%ebp)
f011a232:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011a235:	ba 00 00 00 00       	mov    $0x0,%edx
f011a23a:	f7 75 c4             	divl   -0x3c(%ebp)
f011a23d:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011a240:	29 d0                	sub    %edx,%eax
f011a242:	01 d8                	add    %ebx,%eax
f011a244:	2d 00 c0 cf 09       	sub    $0x9cfc000,%eax
f011a249:	39 c1                	cmp    %eax,%ecx
f011a24b:	74 17                	je     f011a264 <test_kmalloc_bestfit1+0x230>
f011a24d:	83 ec 04             	sub    $0x4,%esp
f011a250:	68 94 b7 13 f0       	push   $0xf013b794
f011a255:	68 a0 01 00 00       	push   $0x1a0
f011a25a:	68 7a b3 13 f0       	push   $0xf013b37a
f011a25f:	e8 a1 5f fe ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011a264:	e8 5f 9b fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011a269:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011a26c:	74 17                	je     f011a285 <test_kmalloc_bestfit1+0x251>
f011a26e:	83 ec 04             	sub    $0x4,%esp
f011a271:	68 94 b3 13 f0       	push   $0xf013b394
f011a276:	68 a1 01 00 00       	push   $0x1a1
f011a27b:	68 7a b3 13 f0       	push   $0xf013b37a
f011a280:	e8 80 5f fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != ((3*Mega)/PAGE_SIZE)) panic("Wrong allocation: ");
f011a285:	e8 13 29 ff ff       	call   f010cb9d <sys_calculate_free_frames>
f011a28a:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011a28d:	29 c2                	sub    %eax,%edx
f011a28f:	89 d0                	mov    %edx,%eax
f011a291:	3d 00 03 00 00       	cmp    $0x300,%eax
f011a296:	74 17                	je     f011a2af <test_kmalloc_bestfit1+0x27b>
f011a298:	83 ec 04             	sub    $0x4,%esp
f011a29b:	68 c4 b7 13 f0       	push   $0xf013b7c4
f011a2a0:	68 a2 01 00 00       	push   $0x1a2
f011a2a5:	68 7a b3 13 f0       	push   $0xf013b37a
f011a2aa:	e8 56 5f fe ff       	call   f0100205 <_panic>

		//Allocate 2 MB
		freeFrames = sys_calculate_free_frames() ;
f011a2af:	e8 e9 28 ff ff       	call   f010cb9d <sys_calculate_free_frames>
f011a2b4:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011a2b7:	e8 0c 9b fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011a2bc:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[2] = kmalloc(2*Mega-kilo);
f011a2bf:	83 ec 0c             	sub    $0xc,%esp
f011a2c2:	68 00 fc 1f 00       	push   $0x1ffc00
f011a2c7:	e8 b9 d5 fe ff       	call   f0107885 <kmalloc>
f011a2cc:	83 c4 10             	add    $0x10,%esp
f011a2cf:	89 85 70 fe ff ff    	mov    %eax,-0x190(%ebp)
		if ((uint32) ptr_allocations[2] !=  (ACTUAL_START + 6*Mega)) panic("Wrong start address for the allocated space... ");
f011a2d5:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f011a2db:	89 c1                	mov    %eax,%ecx
f011a2dd:	c7 45 bc 00 10 00 00 	movl   $0x1000,-0x44(%ebp)
f011a2e4:	8b 45 bc             	mov    -0x44(%ebp),%eax
f011a2e7:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011a2ec:	89 45 b8             	mov    %eax,-0x48(%ebp)
f011a2ef:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011a2f2:	ba 00 00 00 00       	mov    $0x0,%edx
f011a2f7:	f7 75 bc             	divl   -0x44(%ebp)
f011a2fa:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011a2fd:	29 d0                	sub    %edx,%eax
f011a2ff:	89 c3                	mov    %eax,%ebx
f011a301:	c7 45 b4 00 10 00 00 	movl   $0x1000,-0x4c(%ebp)
f011a308:	a0 40 26 78 f0       	mov    0xf0782640,%al
f011a30d:	0f b6 d0             	movzbl %al,%edx
f011a310:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f011a313:	01 d0                	add    %edx,%eax
f011a315:	48                   	dec    %eax
f011a316:	89 45 b0             	mov    %eax,-0x50(%ebp)
f011a319:	8b 45 b0             	mov    -0x50(%ebp),%eax
f011a31c:	ba 00 00 00 00       	mov    $0x0,%edx
f011a321:	f7 75 b4             	divl   -0x4c(%ebp)
f011a324:	8b 45 b0             	mov    -0x50(%ebp),%eax
f011a327:	29 d0                	sub    %edx,%eax
f011a329:	01 c3                	add    %eax,%ebx
f011a32b:	c7 45 ac 00 10 00 00 	movl   $0x1000,-0x54(%ebp)
f011a332:	a0 40 26 78 f0       	mov    0xf0782640,%al
f011a337:	0f b6 c0             	movzbl %al,%eax
f011a33a:	c1 e0 04             	shl    $0x4,%eax
f011a33d:	89 c2                	mov    %eax,%edx
f011a33f:	8b 45 ac             	mov    -0x54(%ebp),%eax
f011a342:	01 d0                	add    %edx,%eax
f011a344:	48                   	dec    %eax
f011a345:	89 45 a8             	mov    %eax,-0x58(%ebp)
f011a348:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011a34b:	ba 00 00 00 00       	mov    $0x0,%edx
f011a350:	f7 75 ac             	divl   -0x54(%ebp)
f011a353:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011a356:	29 d0                	sub    %edx,%eax
f011a358:	01 d8                	add    %ebx,%eax
f011a35a:	2d 00 c0 9f 09       	sub    $0x99fc000,%eax
f011a35f:	39 c1                	cmp    %eax,%ecx
f011a361:	74 17                	je     f011a37a <test_kmalloc_bestfit1+0x346>
f011a363:	83 ec 04             	sub    $0x4,%esp
f011a366:	68 94 b7 13 f0       	push   $0xf013b794
f011a36b:	68 a8 01 00 00       	push   $0x1a8
f011a370:	68 7a b3 13 f0       	push   $0xf013b37a
f011a375:	e8 8b 5e fe ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011a37a:	e8 49 9a fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011a37f:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011a382:	74 17                	je     f011a39b <test_kmalloc_bestfit1+0x367>
f011a384:	83 ec 04             	sub    $0x4,%esp
f011a387:	68 94 b3 13 f0       	push   $0xf013b394
f011a38c:	68 a9 01 00 00       	push   $0x1a9
f011a391:	68 7a b3 13 f0       	push   $0xf013b37a
f011a396:	e8 6a 5e fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != ((2*Mega)/PAGE_SIZE)) panic("Wrong allocation: ");
f011a39b:	e8 fd 27 ff ff       	call   f010cb9d <sys_calculate_free_frames>
f011a3a0:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011a3a3:	29 c2                	sub    %eax,%edx
f011a3a5:	89 d0                	mov    %edx,%eax
f011a3a7:	3d 00 02 00 00       	cmp    $0x200,%eax
f011a3ac:	74 17                	je     f011a3c5 <test_kmalloc_bestfit1+0x391>
f011a3ae:	83 ec 04             	sub    $0x4,%esp
f011a3b1:	68 c4 b7 13 f0       	push   $0xf013b7c4
f011a3b6:	68 aa 01 00 00       	push   $0x1aa
f011a3bb:	68 7a b3 13 f0       	push   $0xf013b37a
f011a3c0:	e8 40 5e fe ff       	call   f0100205 <_panic>

		//Allocate 2 MB
		freeFrames = sys_calculate_free_frames() ;
f011a3c5:	e8 d3 27 ff ff       	call   f010cb9d <sys_calculate_free_frames>
f011a3ca:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011a3cd:	e8 f6 99 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011a3d2:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[3] = kmalloc(2*Mega-kilo);
f011a3d5:	83 ec 0c             	sub    $0xc,%esp
f011a3d8:	68 00 fc 1f 00       	push   $0x1ffc00
f011a3dd:	e8 a3 d4 fe ff       	call   f0107885 <kmalloc>
f011a3e2:	83 c4 10             	add    $0x10,%esp
f011a3e5:	89 85 74 fe ff ff    	mov    %eax,-0x18c(%ebp)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 8*Mega)) panic("Wrong start address for the allocated space... ");
f011a3eb:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f011a3f1:	89 c1                	mov    %eax,%ecx
f011a3f3:	c7 45 a4 00 10 00 00 	movl   $0x1000,-0x5c(%ebp)
f011a3fa:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f011a3fd:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011a402:	89 45 a0             	mov    %eax,-0x60(%ebp)
f011a405:	8b 45 a0             	mov    -0x60(%ebp),%eax
f011a408:	ba 00 00 00 00       	mov    $0x0,%edx
f011a40d:	f7 75 a4             	divl   -0x5c(%ebp)
f011a410:	8b 45 a0             	mov    -0x60(%ebp),%eax
f011a413:	29 d0                	sub    %edx,%eax
f011a415:	89 c3                	mov    %eax,%ebx
f011a417:	c7 45 9c 00 10 00 00 	movl   $0x1000,-0x64(%ebp)
f011a41e:	a0 40 26 78 f0       	mov    0xf0782640,%al
f011a423:	0f b6 d0             	movzbl %al,%edx
f011a426:	8b 45 9c             	mov    -0x64(%ebp),%eax
f011a429:	01 d0                	add    %edx,%eax
f011a42b:	48                   	dec    %eax
f011a42c:	89 45 98             	mov    %eax,-0x68(%ebp)
f011a42f:	8b 45 98             	mov    -0x68(%ebp),%eax
f011a432:	ba 00 00 00 00       	mov    $0x0,%edx
f011a437:	f7 75 9c             	divl   -0x64(%ebp)
f011a43a:	8b 45 98             	mov    -0x68(%ebp),%eax
f011a43d:	29 d0                	sub    %edx,%eax
f011a43f:	01 c3                	add    %eax,%ebx
f011a441:	c7 45 94 00 10 00 00 	movl   $0x1000,-0x6c(%ebp)
f011a448:	a0 40 26 78 f0       	mov    0xf0782640,%al
f011a44d:	0f b6 c0             	movzbl %al,%eax
f011a450:	c1 e0 04             	shl    $0x4,%eax
f011a453:	89 c2                	mov    %eax,%edx
f011a455:	8b 45 94             	mov    -0x6c(%ebp),%eax
f011a458:	01 d0                	add    %edx,%eax
f011a45a:	48                   	dec    %eax
f011a45b:	89 45 90             	mov    %eax,-0x70(%ebp)
f011a45e:	8b 45 90             	mov    -0x70(%ebp),%eax
f011a461:	ba 00 00 00 00       	mov    $0x0,%edx
f011a466:	f7 75 94             	divl   -0x6c(%ebp)
f011a469:	8b 45 90             	mov    -0x70(%ebp),%eax
f011a46c:	29 d0                	sub    %edx,%eax
f011a46e:	01 d8                	add    %ebx,%eax
f011a470:	2d 00 c0 7f 09       	sub    $0x97fc000,%eax
f011a475:	39 c1                	cmp    %eax,%ecx
f011a477:	74 17                	je     f011a490 <test_kmalloc_bestfit1+0x45c>
f011a479:	83 ec 04             	sub    $0x4,%esp
f011a47c:	68 94 b7 13 f0       	push   $0xf013b794
f011a481:	68 b0 01 00 00       	push   $0x1b0
f011a486:	68 7a b3 13 f0       	push   $0xf013b37a
f011a48b:	e8 75 5d fe ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011a490:	e8 33 99 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011a495:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011a498:	74 17                	je     f011a4b1 <test_kmalloc_bestfit1+0x47d>
f011a49a:	83 ec 04             	sub    $0x4,%esp
f011a49d:	68 94 b3 13 f0       	push   $0xf013b394
f011a4a2:	68 b1 01 00 00       	push   $0x1b1
f011a4a7:	68 7a b3 13 f0       	push   $0xf013b37a
f011a4ac:	e8 54 5d fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=  ((2*Mega)/PAGE_SIZE)) panic("Wrong allocation: ");
f011a4b1:	e8 e7 26 ff ff       	call   f010cb9d <sys_calculate_free_frames>
f011a4b6:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011a4b9:	29 c2                	sub    %eax,%edx
f011a4bb:	89 d0                	mov    %edx,%eax
f011a4bd:	3d 00 02 00 00       	cmp    $0x200,%eax
f011a4c2:	74 17                	je     f011a4db <test_kmalloc_bestfit1+0x4a7>
f011a4c4:	83 ec 04             	sub    $0x4,%esp
f011a4c7:	68 c4 b7 13 f0       	push   $0xf013b7c4
f011a4cc:	68 b2 01 00 00       	push   $0x1b2
f011a4d1:	68 7a b3 13 f0       	push   $0xf013b37a
f011a4d6:	e8 2a 5d fe ff       	call   f0100205 <_panic>

		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames() ;
f011a4db:	e8 bd 26 ff ff       	call   f010cb9d <sys_calculate_free_frames>
f011a4e0:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011a4e3:	e8 e0 98 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011a4e8:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[4] = kmalloc(1*Mega-kilo);
f011a4eb:	83 ec 0c             	sub    $0xc,%esp
f011a4ee:	68 00 fc 0f 00       	push   $0xffc00
f011a4f3:	e8 8d d3 fe ff       	call   f0107885 <kmalloc>
f011a4f8:	83 c4 10             	add    $0x10,%esp
f011a4fb:	89 85 78 fe ff ff    	mov    %eax,-0x188(%ebp)
		if ((uint32) ptr_allocations[4] !=  (ACTUAL_START + 10*Mega)) panic("Wrong start address for the allocated space... ");
f011a501:	8b 85 78 fe ff ff    	mov    -0x188(%ebp),%eax
f011a507:	89 c1                	mov    %eax,%ecx
f011a509:	c7 45 8c 00 10 00 00 	movl   $0x1000,-0x74(%ebp)
f011a510:	8b 45 8c             	mov    -0x74(%ebp),%eax
f011a513:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011a518:	89 45 88             	mov    %eax,-0x78(%ebp)
f011a51b:	8b 45 88             	mov    -0x78(%ebp),%eax
f011a51e:	ba 00 00 00 00       	mov    $0x0,%edx
f011a523:	f7 75 8c             	divl   -0x74(%ebp)
f011a526:	8b 45 88             	mov    -0x78(%ebp),%eax
f011a529:	29 d0                	sub    %edx,%eax
f011a52b:	89 c3                	mov    %eax,%ebx
f011a52d:	c7 45 84 00 10 00 00 	movl   $0x1000,-0x7c(%ebp)
f011a534:	a0 40 26 78 f0       	mov    0xf0782640,%al
f011a539:	0f b6 d0             	movzbl %al,%edx
f011a53c:	8b 45 84             	mov    -0x7c(%ebp),%eax
f011a53f:	01 d0                	add    %edx,%eax
f011a541:	48                   	dec    %eax
f011a542:	89 45 80             	mov    %eax,-0x80(%ebp)
f011a545:	8b 45 80             	mov    -0x80(%ebp),%eax
f011a548:	ba 00 00 00 00       	mov    $0x0,%edx
f011a54d:	f7 75 84             	divl   -0x7c(%ebp)
f011a550:	8b 45 80             	mov    -0x80(%ebp),%eax
f011a553:	29 d0                	sub    %edx,%eax
f011a555:	01 c3                	add    %eax,%ebx
f011a557:	c7 85 7c ff ff ff 00 	movl   $0x1000,-0x84(%ebp)
f011a55e:	10 00 00 
f011a561:	a0 40 26 78 f0       	mov    0xf0782640,%al
f011a566:	0f b6 c0             	movzbl %al,%eax
f011a569:	c1 e0 04             	shl    $0x4,%eax
f011a56c:	89 c2                	mov    %eax,%edx
f011a56e:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f011a574:	01 d0                	add    %edx,%eax
f011a576:	48                   	dec    %eax
f011a577:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)
f011a57d:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f011a583:	ba 00 00 00 00       	mov    $0x0,%edx
f011a588:	f7 b5 7c ff ff ff    	divl   -0x84(%ebp)
f011a58e:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f011a594:	29 d0                	sub    %edx,%eax
f011a596:	01 d8                	add    %ebx,%eax
f011a598:	2d 00 c0 5f 09       	sub    $0x95fc000,%eax
f011a59d:	39 c1                	cmp    %eax,%ecx
f011a59f:	74 17                	je     f011a5b8 <test_kmalloc_bestfit1+0x584>
f011a5a1:	83 ec 04             	sub    $0x4,%esp
f011a5a4:	68 94 b7 13 f0       	push   $0xf013b794
f011a5a9:	68 b8 01 00 00       	push   $0x1b8
f011a5ae:	68 7a b3 13 f0       	push   $0xf013b37a
f011a5b3:	e8 4d 5c fe ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011a5b8:	e8 0b 98 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011a5bd:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011a5c0:	74 17                	je     f011a5d9 <test_kmalloc_bestfit1+0x5a5>
f011a5c2:	83 ec 04             	sub    $0x4,%esp
f011a5c5:	68 94 b3 13 f0       	push   $0xf013b394
f011a5ca:	68 b9 01 00 00       	push   $0x1b9
f011a5cf:	68 7a b3 13 f0       	push   $0xf013b37a
f011a5d4:	e8 2c 5c fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: ");
f011a5d9:	e8 bf 25 ff ff       	call   f010cb9d <sys_calculate_free_frames>
f011a5de:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011a5e1:	29 c2                	sub    %eax,%edx
f011a5e3:	89 d0                	mov    %edx,%eax
f011a5e5:	3d 00 01 00 00       	cmp    $0x100,%eax
f011a5ea:	74 17                	je     f011a603 <test_kmalloc_bestfit1+0x5cf>
f011a5ec:	83 ec 04             	sub    $0x4,%esp
f011a5ef:	68 c4 b7 13 f0       	push   $0xf013b7c4
f011a5f4:	68 ba 01 00 00       	push   $0x1ba
f011a5f9:	68 7a b3 13 f0       	push   $0xf013b37a
f011a5fe:	e8 02 5c fe ff       	call   f0100205 <_panic>

		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames() ;
f011a603:	e8 95 25 ff ff       	call   f010cb9d <sys_calculate_free_frames>
f011a608:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011a60b:	e8 b8 97 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011a610:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[5] = kmalloc(1*Mega-kilo);
f011a613:	83 ec 0c             	sub    $0xc,%esp
f011a616:	68 00 fc 0f 00       	push   $0xffc00
f011a61b:	e8 65 d2 fe ff       	call   f0107885 <kmalloc>
f011a620:	83 c4 10             	add    $0x10,%esp
f011a623:	89 85 7c fe ff ff    	mov    %eax,-0x184(%ebp)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 11*Mega)) panic("Wrong start address for the allocated space... ");
f011a629:	8b 85 7c fe ff ff    	mov    -0x184(%ebp),%eax
f011a62f:	89 c1                	mov    %eax,%ecx
f011a631:	c7 85 74 ff ff ff 00 	movl   $0x1000,-0x8c(%ebp)
f011a638:	10 00 00 
f011a63b:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f011a641:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011a646:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
f011a64c:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f011a652:	ba 00 00 00 00       	mov    $0x0,%edx
f011a657:	f7 b5 74 ff ff ff    	divl   -0x8c(%ebp)
f011a65d:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f011a663:	29 d0                	sub    %edx,%eax
f011a665:	89 c3                	mov    %eax,%ebx
f011a667:	c7 85 6c ff ff ff 00 	movl   $0x1000,-0x94(%ebp)
f011a66e:	10 00 00 
f011a671:	a0 40 26 78 f0       	mov    0xf0782640,%al
f011a676:	0f b6 d0             	movzbl %al,%edx
f011a679:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f011a67f:	01 d0                	add    %edx,%eax
f011a681:	48                   	dec    %eax
f011a682:	89 85 68 ff ff ff    	mov    %eax,-0x98(%ebp)
f011a688:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f011a68e:	ba 00 00 00 00       	mov    $0x0,%edx
f011a693:	f7 b5 6c ff ff ff    	divl   -0x94(%ebp)
f011a699:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f011a69f:	29 d0                	sub    %edx,%eax
f011a6a1:	01 c3                	add    %eax,%ebx
f011a6a3:	c7 85 64 ff ff ff 00 	movl   $0x1000,-0x9c(%ebp)
f011a6aa:	10 00 00 
f011a6ad:	a0 40 26 78 f0       	mov    0xf0782640,%al
f011a6b2:	0f b6 c0             	movzbl %al,%eax
f011a6b5:	c1 e0 04             	shl    $0x4,%eax
f011a6b8:	89 c2                	mov    %eax,%edx
f011a6ba:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f011a6c0:	01 d0                	add    %edx,%eax
f011a6c2:	48                   	dec    %eax
f011a6c3:	89 85 60 ff ff ff    	mov    %eax,-0xa0(%ebp)
f011a6c9:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f011a6cf:	ba 00 00 00 00       	mov    $0x0,%edx
f011a6d4:	f7 b5 64 ff ff ff    	divl   -0x9c(%ebp)
f011a6da:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f011a6e0:	29 d0                	sub    %edx,%eax
f011a6e2:	01 d8                	add    %ebx,%eax
f011a6e4:	2d 00 c0 4f 09       	sub    $0x94fc000,%eax
f011a6e9:	39 c1                	cmp    %eax,%ecx
f011a6eb:	74 17                	je     f011a704 <test_kmalloc_bestfit1+0x6d0>
f011a6ed:	83 ec 04             	sub    $0x4,%esp
f011a6f0:	68 94 b7 13 f0       	push   $0xf013b794
f011a6f5:	68 c0 01 00 00       	push   $0x1c0
f011a6fa:	68 7a b3 13 f0       	push   $0xf013b37a
f011a6ff:	e8 01 5b fe ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011a704:	e8 bf 96 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011a709:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011a70c:	74 17                	je     f011a725 <test_kmalloc_bestfit1+0x6f1>
f011a70e:	83 ec 04             	sub    $0x4,%esp
f011a711:	68 94 b3 13 f0       	push   $0xf013b394
f011a716:	68 c1 01 00 00       	push   $0x1c1
f011a71b:	68 7a b3 13 f0       	push   $0xf013b37a
f011a720:	e8 e0 5a fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: ");
f011a725:	e8 73 24 ff ff       	call   f010cb9d <sys_calculate_free_frames>
f011a72a:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011a72d:	29 c2                	sub    %eax,%edx
f011a72f:	89 d0                	mov    %edx,%eax
f011a731:	3d 00 01 00 00       	cmp    $0x100,%eax
f011a736:	74 17                	je     f011a74f <test_kmalloc_bestfit1+0x71b>
f011a738:	83 ec 04             	sub    $0x4,%esp
f011a73b:	68 c4 b7 13 f0       	push   $0xf013b7c4
f011a740:	68 c2 01 00 00       	push   $0x1c2
f011a745:	68 7a b3 13 f0       	push   $0xf013b37a
f011a74a:	e8 b6 5a fe ff       	call   f0100205 <_panic>

		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames() ;
f011a74f:	e8 49 24 ff ff       	call   f010cb9d <sys_calculate_free_frames>
f011a754:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011a757:	e8 6c 96 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011a75c:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[6] = kmalloc(1*Mega-kilo);
f011a75f:	83 ec 0c             	sub    $0xc,%esp
f011a762:	68 00 fc 0f 00       	push   $0xffc00
f011a767:	e8 19 d1 fe ff       	call   f0107885 <kmalloc>
f011a76c:	83 c4 10             	add    $0x10,%esp
f011a76f:	89 85 80 fe ff ff    	mov    %eax,-0x180(%ebp)
		if ((uint32) ptr_allocations[6] != (ACTUAL_START + 12*Mega)) panic("Wrong start address for the allocated space... ");
f011a775:	8b 85 80 fe ff ff    	mov    -0x180(%ebp),%eax
f011a77b:	89 c1                	mov    %eax,%ecx
f011a77d:	c7 85 5c ff ff ff 00 	movl   $0x1000,-0xa4(%ebp)
f011a784:	10 00 00 
f011a787:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f011a78d:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011a792:	89 85 58 ff ff ff    	mov    %eax,-0xa8(%ebp)
f011a798:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f011a79e:	ba 00 00 00 00       	mov    $0x0,%edx
f011a7a3:	f7 b5 5c ff ff ff    	divl   -0xa4(%ebp)
f011a7a9:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f011a7af:	29 d0                	sub    %edx,%eax
f011a7b1:	89 c3                	mov    %eax,%ebx
f011a7b3:	c7 85 54 ff ff ff 00 	movl   $0x1000,-0xac(%ebp)
f011a7ba:	10 00 00 
f011a7bd:	a0 40 26 78 f0       	mov    0xf0782640,%al
f011a7c2:	0f b6 d0             	movzbl %al,%edx
f011a7c5:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f011a7cb:	01 d0                	add    %edx,%eax
f011a7cd:	48                   	dec    %eax
f011a7ce:	89 85 50 ff ff ff    	mov    %eax,-0xb0(%ebp)
f011a7d4:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f011a7da:	ba 00 00 00 00       	mov    $0x0,%edx
f011a7df:	f7 b5 54 ff ff ff    	divl   -0xac(%ebp)
f011a7e5:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f011a7eb:	29 d0                	sub    %edx,%eax
f011a7ed:	01 c3                	add    %eax,%ebx
f011a7ef:	c7 85 4c ff ff ff 00 	movl   $0x1000,-0xb4(%ebp)
f011a7f6:	10 00 00 
f011a7f9:	a0 40 26 78 f0       	mov    0xf0782640,%al
f011a7fe:	0f b6 c0             	movzbl %al,%eax
f011a801:	c1 e0 04             	shl    $0x4,%eax
f011a804:	89 c2                	mov    %eax,%edx
f011a806:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f011a80c:	01 d0                	add    %edx,%eax
f011a80e:	48                   	dec    %eax
f011a80f:	89 85 48 ff ff ff    	mov    %eax,-0xb8(%ebp)
f011a815:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f011a81b:	ba 00 00 00 00       	mov    $0x0,%edx
f011a820:	f7 b5 4c ff ff ff    	divl   -0xb4(%ebp)
f011a826:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f011a82c:	29 d0                	sub    %edx,%eax
f011a82e:	01 d8                	add    %ebx,%eax
f011a830:	2d 00 c0 3f 09       	sub    $0x93fc000,%eax
f011a835:	39 c1                	cmp    %eax,%ecx
f011a837:	74 17                	je     f011a850 <test_kmalloc_bestfit1+0x81c>
f011a839:	83 ec 04             	sub    $0x4,%esp
f011a83c:	68 94 b7 13 f0       	push   $0xf013b794
f011a841:	68 c8 01 00 00       	push   $0x1c8
f011a846:	68 7a b3 13 f0       	push   $0xf013b37a
f011a84b:	e8 b5 59 fe ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011a850:	e8 73 95 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011a855:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011a858:	74 17                	je     f011a871 <test_kmalloc_bestfit1+0x83d>
f011a85a:	83 ec 04             	sub    $0x4,%esp
f011a85d:	68 94 b3 13 f0       	push   $0xf013b394
f011a862:	68 c9 01 00 00       	push   $0x1c9
f011a867:	68 7a b3 13 f0       	push   $0xf013b37a
f011a86c:	e8 94 59 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: ");
f011a871:	e8 27 23 ff ff       	call   f010cb9d <sys_calculate_free_frames>
f011a876:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011a879:	29 c2                	sub    %eax,%edx
f011a87b:	89 d0                	mov    %edx,%eax
f011a87d:	3d 00 01 00 00       	cmp    $0x100,%eax
f011a882:	74 17                	je     f011a89b <test_kmalloc_bestfit1+0x867>
f011a884:	83 ec 04             	sub    $0x4,%esp
f011a887:	68 c4 b7 13 f0       	push   $0xf013b7c4
f011a88c:	68 ca 01 00 00       	push   $0x1ca
f011a891:	68 7a b3 13 f0       	push   $0xf013b37a
f011a896:	e8 6a 59 fe ff       	call   f0100205 <_panic>

		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames() ;
f011a89b:	e8 fd 22 ff ff       	call   f010cb9d <sys_calculate_free_frames>
f011a8a0:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011a8a3:	e8 20 95 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011a8a8:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[7] = kmalloc(1*Mega-kilo);
f011a8ab:	83 ec 0c             	sub    $0xc,%esp
f011a8ae:	68 00 fc 0f 00       	push   $0xffc00
f011a8b3:	e8 cd cf fe ff       	call   f0107885 <kmalloc>
f011a8b8:	83 c4 10             	add    $0x10,%esp
f011a8bb:	89 85 84 fe ff ff    	mov    %eax,-0x17c(%ebp)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 13*Mega)) panic("Wrong start address for the allocated space... ");
f011a8c1:	8b 85 84 fe ff ff    	mov    -0x17c(%ebp),%eax
f011a8c7:	89 c1                	mov    %eax,%ecx
f011a8c9:	c7 85 44 ff ff ff 00 	movl   $0x1000,-0xbc(%ebp)
f011a8d0:	10 00 00 
f011a8d3:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f011a8d9:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011a8de:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%ebp)
f011a8e4:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f011a8ea:	ba 00 00 00 00       	mov    $0x0,%edx
f011a8ef:	f7 b5 44 ff ff ff    	divl   -0xbc(%ebp)
f011a8f5:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f011a8fb:	29 d0                	sub    %edx,%eax
f011a8fd:	89 c3                	mov    %eax,%ebx
f011a8ff:	c7 85 3c ff ff ff 00 	movl   $0x1000,-0xc4(%ebp)
f011a906:	10 00 00 
f011a909:	a0 40 26 78 f0       	mov    0xf0782640,%al
f011a90e:	0f b6 d0             	movzbl %al,%edx
f011a911:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f011a917:	01 d0                	add    %edx,%eax
f011a919:	48                   	dec    %eax
f011a91a:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
f011a920:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f011a926:	ba 00 00 00 00       	mov    $0x0,%edx
f011a92b:	f7 b5 3c ff ff ff    	divl   -0xc4(%ebp)
f011a931:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f011a937:	29 d0                	sub    %edx,%eax
f011a939:	01 c3                	add    %eax,%ebx
f011a93b:	c7 85 34 ff ff ff 00 	movl   $0x1000,-0xcc(%ebp)
f011a942:	10 00 00 
f011a945:	a0 40 26 78 f0       	mov    0xf0782640,%al
f011a94a:	0f b6 c0             	movzbl %al,%eax
f011a94d:	c1 e0 04             	shl    $0x4,%eax
f011a950:	89 c2                	mov    %eax,%edx
f011a952:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f011a958:	01 d0                	add    %edx,%eax
f011a95a:	48                   	dec    %eax
f011a95b:	89 85 30 ff ff ff    	mov    %eax,-0xd0(%ebp)
f011a961:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f011a967:	ba 00 00 00 00       	mov    $0x0,%edx
f011a96c:	f7 b5 34 ff ff ff    	divl   -0xcc(%ebp)
f011a972:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f011a978:	29 d0                	sub    %edx,%eax
f011a97a:	01 d8                	add    %ebx,%eax
f011a97c:	2d 00 c0 2f 09       	sub    $0x92fc000,%eax
f011a981:	39 c1                	cmp    %eax,%ecx
f011a983:	74 17                	je     f011a99c <test_kmalloc_bestfit1+0x968>
f011a985:	83 ec 04             	sub    $0x4,%esp
f011a988:	68 94 b7 13 f0       	push   $0xf013b794
f011a98d:	68 d0 01 00 00       	push   $0x1d0
f011a992:	68 7a b3 13 f0       	push   $0xf013b37a
f011a997:	e8 69 58 fe ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011a99c:	e8 27 94 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011a9a1:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011a9a4:	74 17                	je     f011a9bd <test_kmalloc_bestfit1+0x989>
f011a9a6:	83 ec 04             	sub    $0x4,%esp
f011a9a9:	68 94 b3 13 f0       	push   $0xf013b394
f011a9ae:	68 d1 01 00 00       	push   $0x1d1
f011a9b3:	68 7a b3 13 f0       	push   $0xf013b37a
f011a9b8:	e8 48 58 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: ");
f011a9bd:	e8 db 21 ff ff       	call   f010cb9d <sys_calculate_free_frames>
f011a9c2:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011a9c5:	29 c2                	sub    %eax,%edx
f011a9c7:	89 d0                	mov    %edx,%eax
f011a9c9:	3d 00 01 00 00       	cmp    $0x100,%eax
f011a9ce:	74 17                	je     f011a9e7 <test_kmalloc_bestfit1+0x9b3>
f011a9d0:	83 ec 04             	sub    $0x4,%esp
f011a9d3:	68 c4 b7 13 f0       	push   $0xf013b7c4
f011a9d8:	68 d2 01 00 00       	push   $0x1d2
f011a9dd:	68 7a b3 13 f0       	push   $0xf013b37a
f011a9e2:	e8 1e 58 fe ff       	call   f0100205 <_panic>
	}

	//[2] Free some to create holes
	{
		//3 MB Hole
		freeFrames = sys_calculate_free_frames() ;
f011a9e7:	e8 b1 21 ff ff       	call   f010cb9d <sys_calculate_free_frames>
f011a9ec:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011a9ef:	e8 d4 93 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011a9f4:	89 45 f0             	mov    %eax,-0x10(%ebp)
		kfree(ptr_allocations[1]);
f011a9f7:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f011a9fd:	83 ec 0c             	sub    $0xc,%esp
f011aa00:	50                   	push   %eax
f011aa01:	e8 4a cf fe ff       	call   f0107950 <kfree>
f011aa06:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011aa09:	e8 ba 93 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011aa0e:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011aa11:	74 17                	je     f011aa2a <test_kmalloc_bestfit1+0x9f6>
f011aa13:	83 ec 04             	sub    $0x4,%esp
f011aa16:	68 94 b3 13 f0       	push   $0xf013b394
f011aa1b:	68 db 01 00 00       	push   $0x1db
f011aa20:	68 7a b3 13 f0       	push   $0xf013b37a
f011aa25:	e8 db 57 fe ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != ((3*Mega)/PAGE_SIZE)) panic("Wrong free: ");
f011aa2a:	e8 6e 21 ff ff       	call   f010cb9d <sys_calculate_free_frames>
f011aa2f:	2b 45 f4             	sub    -0xc(%ebp),%eax
f011aa32:	3d 00 03 00 00       	cmp    $0x300,%eax
f011aa37:	74 17                	je     f011aa50 <test_kmalloc_bestfit1+0xa1c>
f011aa39:	83 ec 04             	sub    $0x4,%esp
f011aa3c:	68 d7 b7 13 f0       	push   $0xf013b7d7
f011aa41:	68 dc 01 00 00       	push   $0x1dc
f011aa46:	68 7a b3 13 f0       	push   $0xf013b37a
f011aa4b:	e8 b5 57 fe ff       	call   f0100205 <_panic>

		//2 MB Hole
		freeFrames = sys_calculate_free_frames() ;
f011aa50:	e8 48 21 ff ff       	call   f010cb9d <sys_calculate_free_frames>
f011aa55:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011aa58:	e8 6b 93 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011aa5d:	89 45 f0             	mov    %eax,-0x10(%ebp)
		kfree(ptr_allocations[3]);
f011aa60:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f011aa66:	83 ec 0c             	sub    $0xc,%esp
f011aa69:	50                   	push   %eax
f011aa6a:	e8 e1 ce fe ff       	call   f0107950 <kfree>
f011aa6f:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011aa72:	e8 51 93 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011aa77:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011aa7a:	74 17                	je     f011aa93 <test_kmalloc_bestfit1+0xa5f>
f011aa7c:	83 ec 04             	sub    $0x4,%esp
f011aa7f:	68 94 b3 13 f0       	push   $0xf013b394
f011aa84:	68 e2 01 00 00       	push   $0x1e2
f011aa89:	68 7a b3 13 f0       	push   $0xf013b37a
f011aa8e:	e8 72 57 fe ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != ((2*Mega)/PAGE_SIZE)) panic("Wrong free: ");
f011aa93:	e8 05 21 ff ff       	call   f010cb9d <sys_calculate_free_frames>
f011aa98:	2b 45 f4             	sub    -0xc(%ebp),%eax
f011aa9b:	3d 00 02 00 00       	cmp    $0x200,%eax
f011aaa0:	74 17                	je     f011aab9 <test_kmalloc_bestfit1+0xa85>
f011aaa2:	83 ec 04             	sub    $0x4,%esp
f011aaa5:	68 d7 b7 13 f0       	push   $0xf013b7d7
f011aaaa:	68 e3 01 00 00       	push   $0x1e3
f011aaaf:	68 7a b3 13 f0       	push   $0xf013b37a
f011aab4:	e8 4c 57 fe ff       	call   f0100205 <_panic>

		//1 MB Hole
		freeFrames = sys_calculate_free_frames() ;
f011aab9:	e8 df 20 ff ff       	call   f010cb9d <sys_calculate_free_frames>
f011aabe:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011aac1:	e8 02 93 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011aac6:	89 45 f0             	mov    %eax,-0x10(%ebp)
		kfree(ptr_allocations[5]);
f011aac9:	8b 85 7c fe ff ff    	mov    -0x184(%ebp),%eax
f011aacf:	83 ec 0c             	sub    $0xc,%esp
f011aad2:	50                   	push   %eax
f011aad3:	e8 78 ce fe ff       	call   f0107950 <kfree>
f011aad8:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011aadb:	e8 e8 92 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011aae0:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011aae3:	74 17                	je     f011aafc <test_kmalloc_bestfit1+0xac8>
f011aae5:	83 ec 04             	sub    $0x4,%esp
f011aae8:	68 94 b3 13 f0       	push   $0xf013b394
f011aaed:	68 e9 01 00 00       	push   $0x1e9
f011aaf2:	68 7a b3 13 f0       	push   $0xf013b37a
f011aaf7:	e8 09 57 fe ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 256) panic("Wrong free: ");
f011aafc:	e8 9c 20 ff ff       	call   f010cb9d <sys_calculate_free_frames>
f011ab01:	2b 45 f4             	sub    -0xc(%ebp),%eax
f011ab04:	3d 00 01 00 00       	cmp    $0x100,%eax
f011ab09:	74 17                	je     f011ab22 <test_kmalloc_bestfit1+0xaee>
f011ab0b:	83 ec 04             	sub    $0x4,%esp
f011ab0e:	68 d7 b7 13 f0       	push   $0xf013b7d7
f011ab13:	68 ea 01 00 00       	push   $0x1ea
f011ab18:	68 7a b3 13 f0       	push   $0xf013b37a
f011ab1d:	e8 e3 56 fe ff       	call   f0100205 <_panic>
	}

	//[3] Allocate again [test best fit]
	{
		//Allocate 512 KB - should be placed in 3rd hole
		freeFrames = sys_calculate_free_frames() ;
f011ab22:	e8 76 20 ff ff       	call   f010cb9d <sys_calculate_free_frames>
f011ab27:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011ab2a:	e8 99 92 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011ab2f:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[8] = kmalloc(512*kilo);
f011ab32:	83 ec 0c             	sub    $0xc,%esp
f011ab35:	68 00 00 08 00       	push   $0x80000
f011ab3a:	e8 46 cd fe ff       	call   f0107885 <kmalloc>
f011ab3f:	83 c4 10             	add    $0x10,%esp
f011ab42:	89 85 88 fe ff ff    	mov    %eax,-0x178(%ebp)
		if ((uint32) ptr_allocations[8] !=  (ACTUAL_START + 11*Mega)) panic("Wrong start address for the allocated space... ");
f011ab48:	8b 85 88 fe ff ff    	mov    -0x178(%ebp),%eax
f011ab4e:	89 c1                	mov    %eax,%ecx
f011ab50:	c7 85 2c ff ff ff 00 	movl   $0x1000,-0xd4(%ebp)
f011ab57:	10 00 00 
f011ab5a:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f011ab60:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011ab65:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%ebp)
f011ab6b:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f011ab71:	ba 00 00 00 00       	mov    $0x0,%edx
f011ab76:	f7 b5 2c ff ff ff    	divl   -0xd4(%ebp)
f011ab7c:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f011ab82:	29 d0                	sub    %edx,%eax
f011ab84:	89 c3                	mov    %eax,%ebx
f011ab86:	c7 85 24 ff ff ff 00 	movl   $0x1000,-0xdc(%ebp)
f011ab8d:	10 00 00 
f011ab90:	a0 40 26 78 f0       	mov    0xf0782640,%al
f011ab95:	0f b6 d0             	movzbl %al,%edx
f011ab98:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011ab9e:	01 d0                	add    %edx,%eax
f011aba0:	48                   	dec    %eax
f011aba1:	89 85 20 ff ff ff    	mov    %eax,-0xe0(%ebp)
f011aba7:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f011abad:	ba 00 00 00 00       	mov    $0x0,%edx
f011abb2:	f7 b5 24 ff ff ff    	divl   -0xdc(%ebp)
f011abb8:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f011abbe:	29 d0                	sub    %edx,%eax
f011abc0:	01 c3                	add    %eax,%ebx
f011abc2:	c7 85 1c ff ff ff 00 	movl   $0x1000,-0xe4(%ebp)
f011abc9:	10 00 00 
f011abcc:	a0 40 26 78 f0       	mov    0xf0782640,%al
f011abd1:	0f b6 c0             	movzbl %al,%eax
f011abd4:	c1 e0 04             	shl    $0x4,%eax
f011abd7:	89 c2                	mov    %eax,%edx
f011abd9:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f011abdf:	01 d0                	add    %edx,%eax
f011abe1:	48                   	dec    %eax
f011abe2:	89 85 18 ff ff ff    	mov    %eax,-0xe8(%ebp)
f011abe8:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f011abee:	ba 00 00 00 00       	mov    $0x0,%edx
f011abf3:	f7 b5 1c ff ff ff    	divl   -0xe4(%ebp)
f011abf9:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f011abff:	29 d0                	sub    %edx,%eax
f011ac01:	01 d8                	add    %ebx,%eax
f011ac03:	2d 00 c0 4f 09       	sub    $0x94fc000,%eax
f011ac08:	39 c1                	cmp    %eax,%ecx
f011ac0a:	74 17                	je     f011ac23 <test_kmalloc_bestfit1+0xbef>
f011ac0c:	83 ec 04             	sub    $0x4,%esp
f011ac0f:	68 94 b7 13 f0       	push   $0xf013b794
f011ac14:	68 f3 01 00 00       	push   $0x1f3
f011ac19:	68 7a b3 13 f0       	push   $0xf013b37a
f011ac1e:	e8 e2 55 fe ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011ac23:	e8 a0 91 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011ac28:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011ac2b:	74 17                	je     f011ac44 <test_kmalloc_bestfit1+0xc10>
f011ac2d:	83 ec 04             	sub    $0x4,%esp
f011ac30:	68 94 b3 13 f0       	push   $0xf013b394
f011ac35:	68 f4 01 00 00       	push   $0x1f4
f011ac3a:	68 7a b3 13 f0       	push   $0xf013b37a
f011ac3f:	e8 c1 55 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 128) panic("Wrong allocation: ");
f011ac44:	e8 54 1f ff ff       	call   f010cb9d <sys_calculate_free_frames>
f011ac49:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011ac4c:	29 c2                	sub    %eax,%edx
f011ac4e:	89 d0                	mov    %edx,%eax
f011ac50:	3d 80 00 00 00       	cmp    $0x80,%eax
f011ac55:	74 17                	je     f011ac6e <test_kmalloc_bestfit1+0xc3a>
f011ac57:	83 ec 04             	sub    $0x4,%esp
f011ac5a:	68 c4 b7 13 f0       	push   $0xf013b7c4
f011ac5f:	68 f5 01 00 00       	push   $0x1f5
f011ac64:	68 7a b3 13 f0       	push   $0xf013b37a
f011ac69:	e8 97 55 fe ff       	call   f0100205 <_panic>

		//Allocate 1 MB - should be placed in 2nd hole
		freeFrames = sys_calculate_free_frames() ;
f011ac6e:	e8 2a 1f ff ff       	call   f010cb9d <sys_calculate_free_frames>
f011ac73:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011ac76:	e8 4d 91 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011ac7b:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[9] = kmalloc(1*Mega - kilo);
f011ac7e:	83 ec 0c             	sub    $0xc,%esp
f011ac81:	68 00 fc 0f 00       	push   $0xffc00
f011ac86:	e8 fa cb fe ff       	call   f0107885 <kmalloc>
f011ac8b:	83 c4 10             	add    $0x10,%esp
f011ac8e:	89 85 8c fe ff ff    	mov    %eax,-0x174(%ebp)
		if ((uint32) ptr_allocations[9] !=  (ACTUAL_START + 8*Mega)) panic("Wrong start address for the allocated space... ");
f011ac94:	8b 85 8c fe ff ff    	mov    -0x174(%ebp),%eax
f011ac9a:	89 c1                	mov    %eax,%ecx
f011ac9c:	c7 85 14 ff ff ff 00 	movl   $0x1000,-0xec(%ebp)
f011aca3:	10 00 00 
f011aca6:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f011acac:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011acb1:	89 85 10 ff ff ff    	mov    %eax,-0xf0(%ebp)
f011acb7:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f011acbd:	ba 00 00 00 00       	mov    $0x0,%edx
f011acc2:	f7 b5 14 ff ff ff    	divl   -0xec(%ebp)
f011acc8:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f011acce:	29 d0                	sub    %edx,%eax
f011acd0:	89 c3                	mov    %eax,%ebx
f011acd2:	c7 85 0c ff ff ff 00 	movl   $0x1000,-0xf4(%ebp)
f011acd9:	10 00 00 
f011acdc:	a0 40 26 78 f0       	mov    0xf0782640,%al
f011ace1:	0f b6 d0             	movzbl %al,%edx
f011ace4:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f011acea:	01 d0                	add    %edx,%eax
f011acec:	48                   	dec    %eax
f011aced:	89 85 08 ff ff ff    	mov    %eax,-0xf8(%ebp)
f011acf3:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f011acf9:	ba 00 00 00 00       	mov    $0x0,%edx
f011acfe:	f7 b5 0c ff ff ff    	divl   -0xf4(%ebp)
f011ad04:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f011ad0a:	29 d0                	sub    %edx,%eax
f011ad0c:	01 c3                	add    %eax,%ebx
f011ad0e:	c7 85 04 ff ff ff 00 	movl   $0x1000,-0xfc(%ebp)
f011ad15:	10 00 00 
f011ad18:	a0 40 26 78 f0       	mov    0xf0782640,%al
f011ad1d:	0f b6 c0             	movzbl %al,%eax
f011ad20:	c1 e0 04             	shl    $0x4,%eax
f011ad23:	89 c2                	mov    %eax,%edx
f011ad25:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f011ad2b:	01 d0                	add    %edx,%eax
f011ad2d:	48                   	dec    %eax
f011ad2e:	89 85 00 ff ff ff    	mov    %eax,-0x100(%ebp)
f011ad34:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f011ad3a:	ba 00 00 00 00       	mov    $0x0,%edx
f011ad3f:	f7 b5 04 ff ff ff    	divl   -0xfc(%ebp)
f011ad45:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f011ad4b:	29 d0                	sub    %edx,%eax
f011ad4d:	01 d8                	add    %ebx,%eax
f011ad4f:	2d 00 c0 7f 09       	sub    $0x97fc000,%eax
f011ad54:	39 c1                	cmp    %eax,%ecx
f011ad56:	74 17                	je     f011ad6f <test_kmalloc_bestfit1+0xd3b>
f011ad58:	83 ec 04             	sub    $0x4,%esp
f011ad5b:	68 94 b7 13 f0       	push   $0xf013b794
f011ad60:	68 fb 01 00 00       	push   $0x1fb
f011ad65:	68 7a b3 13 f0       	push   $0xf013b37a
f011ad6a:	e8 96 54 fe ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011ad6f:	e8 54 90 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011ad74:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011ad77:	74 17                	je     f011ad90 <test_kmalloc_bestfit1+0xd5c>
f011ad79:	83 ec 04             	sub    $0x4,%esp
f011ad7c:	68 94 b3 13 f0       	push   $0xf013b394
f011ad81:	68 fc 01 00 00       	push   $0x1fc
f011ad86:	68 7a b3 13 f0       	push   $0xf013b37a
f011ad8b:	e8 75 54 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: ");
f011ad90:	e8 08 1e ff ff       	call   f010cb9d <sys_calculate_free_frames>
f011ad95:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011ad98:	29 c2                	sub    %eax,%edx
f011ad9a:	89 d0                	mov    %edx,%eax
f011ad9c:	3d 00 01 00 00       	cmp    $0x100,%eax
f011ada1:	74 17                	je     f011adba <test_kmalloc_bestfit1+0xd86>
f011ada3:	83 ec 04             	sub    $0x4,%esp
f011ada6:	68 c4 b7 13 f0       	push   $0xf013b7c4
f011adab:	68 fd 01 00 00       	push   $0x1fd
f011adb0:	68 7a b3 13 f0       	push   $0xf013b37a
f011adb5:	e8 4b 54 fe ff       	call   f0100205 <_panic>

		//Allocate 256 KB - should be placed in remaining of 3rd hole
		freeFrames = sys_calculate_free_frames() ;
f011adba:	e8 de 1d ff ff       	call   f010cb9d <sys_calculate_free_frames>
f011adbf:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011adc2:	e8 01 90 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011adc7:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[10] = kmalloc(256*kilo - kilo);
f011adca:	83 ec 0c             	sub    $0xc,%esp
f011adcd:	68 00 fc 03 00       	push   $0x3fc00
f011add2:	e8 ae ca fe ff       	call   f0107885 <kmalloc>
f011add7:	83 c4 10             	add    $0x10,%esp
f011adda:	89 85 90 fe ff ff    	mov    %eax,-0x170(%ebp)
		if ((uint32) ptr_allocations[10] !=  (ACTUAL_START + 11*Mega + 512*kilo)) panic("Wrong start address for the allocated space... ");
f011ade0:	8b 85 90 fe ff ff    	mov    -0x170(%ebp),%eax
f011ade6:	89 c1                	mov    %eax,%ecx
f011ade8:	c7 85 fc fe ff ff 00 	movl   $0x1000,-0x104(%ebp)
f011adef:	10 00 00 
f011adf2:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f011adf8:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011adfd:	89 85 f8 fe ff ff    	mov    %eax,-0x108(%ebp)
f011ae03:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f011ae09:	ba 00 00 00 00       	mov    $0x0,%edx
f011ae0e:	f7 b5 fc fe ff ff    	divl   -0x104(%ebp)
f011ae14:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f011ae1a:	29 d0                	sub    %edx,%eax
f011ae1c:	89 c3                	mov    %eax,%ebx
f011ae1e:	c7 85 f4 fe ff ff 00 	movl   $0x1000,-0x10c(%ebp)
f011ae25:	10 00 00 
f011ae28:	a0 40 26 78 f0       	mov    0xf0782640,%al
f011ae2d:	0f b6 d0             	movzbl %al,%edx
f011ae30:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f011ae36:	01 d0                	add    %edx,%eax
f011ae38:	48                   	dec    %eax
f011ae39:	89 85 f0 fe ff ff    	mov    %eax,-0x110(%ebp)
f011ae3f:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f011ae45:	ba 00 00 00 00       	mov    $0x0,%edx
f011ae4a:	f7 b5 f4 fe ff ff    	divl   -0x10c(%ebp)
f011ae50:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f011ae56:	29 d0                	sub    %edx,%eax
f011ae58:	01 c3                	add    %eax,%ebx
f011ae5a:	c7 85 ec fe ff ff 00 	movl   $0x1000,-0x114(%ebp)
f011ae61:	10 00 00 
f011ae64:	a0 40 26 78 f0       	mov    0xf0782640,%al
f011ae69:	0f b6 c0             	movzbl %al,%eax
f011ae6c:	c1 e0 04             	shl    $0x4,%eax
f011ae6f:	89 c2                	mov    %eax,%edx
f011ae71:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f011ae77:	01 d0                	add    %edx,%eax
f011ae79:	48                   	dec    %eax
f011ae7a:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)
f011ae80:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f011ae86:	ba 00 00 00 00       	mov    $0x0,%edx
f011ae8b:	f7 b5 ec fe ff ff    	divl   -0x114(%ebp)
f011ae91:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f011ae97:	29 d0                	sub    %edx,%eax
f011ae99:	01 d8                	add    %ebx,%eax
f011ae9b:	2d 00 c0 47 09       	sub    $0x947c000,%eax
f011aea0:	39 c1                	cmp    %eax,%ecx
f011aea2:	74 17                	je     f011aebb <test_kmalloc_bestfit1+0xe87>
f011aea4:	83 ec 04             	sub    $0x4,%esp
f011aea7:	68 94 b7 13 f0       	push   $0xf013b794
f011aeac:	68 03 02 00 00       	push   $0x203
f011aeb1:	68 7a b3 13 f0       	push   $0xf013b37a
f011aeb6:	e8 4a 53 fe ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011aebb:	e8 08 8f fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011aec0:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011aec3:	74 17                	je     f011aedc <test_kmalloc_bestfit1+0xea8>
f011aec5:	83 ec 04             	sub    $0x4,%esp
f011aec8:	68 94 b3 13 f0       	push   $0xf013b394
f011aecd:	68 04 02 00 00       	push   $0x204
f011aed2:	68 7a b3 13 f0       	push   $0xf013b37a
f011aed7:	e8 29 53 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 64) panic("Wrong allocation: ");
f011aedc:	e8 bc 1c ff ff       	call   f010cb9d <sys_calculate_free_frames>
f011aee1:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011aee4:	29 c2                	sub    %eax,%edx
f011aee6:	89 d0                	mov    %edx,%eax
f011aee8:	83 f8 40             	cmp    $0x40,%eax
f011aeeb:	74 17                	je     f011af04 <test_kmalloc_bestfit1+0xed0>
f011aeed:	83 ec 04             	sub    $0x4,%esp
f011aef0:	68 c4 b7 13 f0       	push   $0xf013b7c4
f011aef5:	68 05 02 00 00       	push   $0x205
f011aefa:	68 7a b3 13 f0       	push   $0xf013b37a
f011aeff:	e8 01 53 fe ff       	call   f0100205 <_panic>

		//Allocate 4 MB - should be placed in end of all allocations
		freeFrames = sys_calculate_free_frames() ;
f011af04:	e8 94 1c ff ff       	call   f010cb9d <sys_calculate_free_frames>
f011af09:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011af0c:	e8 b7 8e fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011af11:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[11] = kmalloc(4*Mega - kilo);
f011af14:	83 ec 0c             	sub    $0xc,%esp
f011af17:	68 00 fc 3f 00       	push   $0x3ffc00
f011af1c:	e8 64 c9 fe ff       	call   f0107885 <kmalloc>
f011af21:	83 c4 10             	add    $0x10,%esp
f011af24:	89 85 94 fe ff ff    	mov    %eax,-0x16c(%ebp)
		if ((uint32) ptr_allocations[11] != (ACTUAL_START + 14*Mega)) panic("Wrong start address for the allocated space... ");
f011af2a:	8b 85 94 fe ff ff    	mov    -0x16c(%ebp),%eax
f011af30:	89 c1                	mov    %eax,%ecx
f011af32:	c7 85 e4 fe ff ff 00 	movl   $0x1000,-0x11c(%ebp)
f011af39:	10 00 00 
f011af3c:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f011af42:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011af47:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
f011af4d:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f011af53:	ba 00 00 00 00       	mov    $0x0,%edx
f011af58:	f7 b5 e4 fe ff ff    	divl   -0x11c(%ebp)
f011af5e:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f011af64:	29 d0                	sub    %edx,%eax
f011af66:	89 c3                	mov    %eax,%ebx
f011af68:	c7 85 dc fe ff ff 00 	movl   $0x1000,-0x124(%ebp)
f011af6f:	10 00 00 
f011af72:	a0 40 26 78 f0       	mov    0xf0782640,%al
f011af77:	0f b6 d0             	movzbl %al,%edx
f011af7a:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f011af80:	01 d0                	add    %edx,%eax
f011af82:	48                   	dec    %eax
f011af83:	89 85 d8 fe ff ff    	mov    %eax,-0x128(%ebp)
f011af89:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f011af8f:	ba 00 00 00 00       	mov    $0x0,%edx
f011af94:	f7 b5 dc fe ff ff    	divl   -0x124(%ebp)
f011af9a:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f011afa0:	29 d0                	sub    %edx,%eax
f011afa2:	01 c3                	add    %eax,%ebx
f011afa4:	c7 85 d4 fe ff ff 00 	movl   $0x1000,-0x12c(%ebp)
f011afab:	10 00 00 
f011afae:	a0 40 26 78 f0       	mov    0xf0782640,%al
f011afb3:	0f b6 c0             	movzbl %al,%eax
f011afb6:	c1 e0 04             	shl    $0x4,%eax
f011afb9:	89 c2                	mov    %eax,%edx
f011afbb:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f011afc1:	01 d0                	add    %edx,%eax
f011afc3:	48                   	dec    %eax
f011afc4:	89 85 d0 fe ff ff    	mov    %eax,-0x130(%ebp)
f011afca:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f011afd0:	ba 00 00 00 00       	mov    $0x0,%edx
f011afd5:	f7 b5 d4 fe ff ff    	divl   -0x12c(%ebp)
f011afdb:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f011afe1:	29 d0                	sub    %edx,%eax
f011afe3:	01 d8                	add    %ebx,%eax
f011afe5:	2d 00 c0 1f 09       	sub    $0x91fc000,%eax
f011afea:	39 c1                	cmp    %eax,%ecx
f011afec:	74 17                	je     f011b005 <test_kmalloc_bestfit1+0xfd1>
f011afee:	83 ec 04             	sub    $0x4,%esp
f011aff1:	68 94 b7 13 f0       	push   $0xf013b794
f011aff6:	68 0b 02 00 00       	push   $0x20b
f011affb:	68 7a b3 13 f0       	push   $0xf013b37a
f011b000:	e8 00 52 fe ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011b005:	e8 be 8d fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011b00a:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011b00d:	74 17                	je     f011b026 <test_kmalloc_bestfit1+0xff2>
f011b00f:	83 ec 04             	sub    $0x4,%esp
f011b012:	68 94 b3 13 f0       	push   $0xf013b394
f011b017:	68 0c 02 00 00       	push   $0x20c
f011b01c:	68 7a b3 13 f0       	push   $0xf013b37a
f011b021:	e8 df 51 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1024) panic("Wrong allocation: ");
f011b026:	e8 72 1b ff ff       	call   f010cb9d <sys_calculate_free_frames>
f011b02b:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011b02e:	29 c2                	sub    %eax,%edx
f011b030:	89 d0                	mov    %edx,%eax
f011b032:	3d 00 04 00 00       	cmp    $0x400,%eax
f011b037:	74 17                	je     f011b050 <test_kmalloc_bestfit1+0x101c>
f011b039:	83 ec 04             	sub    $0x4,%esp
f011b03c:	68 c4 b7 13 f0       	push   $0xf013b7c4
f011b041:	68 0d 02 00 00       	push   $0x20d
f011b046:	68 7a b3 13 f0       	push   $0xf013b37a
f011b04b:	e8 b5 51 fe ff       	call   f0100205 <_panic>
	}

	//[4] Free contiguous allocations
	{
		//1M Hole appended to already existing 1M hole in the middle
		freeFrames = sys_calculate_free_frames() ;
f011b050:	e8 48 1b ff ff       	call   f010cb9d <sys_calculate_free_frames>
f011b055:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011b058:	e8 6b 8d fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011b05d:	89 45 f0             	mov    %eax,-0x10(%ebp)
		kfree(ptr_allocations[4]);
f011b060:	8b 85 78 fe ff ff    	mov    -0x188(%ebp),%eax
f011b066:	83 ec 0c             	sub    $0xc,%esp
f011b069:	50                   	push   %eax
f011b06a:	e8 e1 c8 fe ff       	call   f0107950 <kfree>
f011b06f:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011b072:	e8 51 8d fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011b077:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011b07a:	74 17                	je     f011b093 <test_kmalloc_bestfit1+0x105f>
f011b07c:	83 ec 04             	sub    $0x4,%esp
f011b07f:	68 94 b3 13 f0       	push   $0xf013b394
f011b084:	68 16 02 00 00       	push   $0x216
f011b089:	68 7a b3 13 f0       	push   $0xf013b37a
f011b08e:	e8 72 51 fe ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 256) panic("Wrong free: ");
f011b093:	e8 05 1b ff ff       	call   f010cb9d <sys_calculate_free_frames>
f011b098:	2b 45 f4             	sub    -0xc(%ebp),%eax
f011b09b:	3d 00 01 00 00       	cmp    $0x100,%eax
f011b0a0:	74 17                	je     f011b0b9 <test_kmalloc_bestfit1+0x1085>
f011b0a2:	83 ec 04             	sub    $0x4,%esp
f011b0a5:	68 d7 b7 13 f0       	push   $0xf013b7d7
f011b0aa:	68 17 02 00 00       	push   $0x217
f011b0af:	68 7a b3 13 f0       	push   $0xf013b37a
f011b0b4:	e8 4c 51 fe ff       	call   f0100205 <_panic>

		//another 512 KB Hole appended to the hole
		freeFrames = sys_calculate_free_frames() ;
f011b0b9:	e8 df 1a ff ff       	call   f010cb9d <sys_calculate_free_frames>
f011b0be:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011b0c1:	e8 02 8d fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011b0c6:	89 45 f0             	mov    %eax,-0x10(%ebp)
		kfree(ptr_allocations[8]);
f011b0c9:	8b 85 88 fe ff ff    	mov    -0x178(%ebp),%eax
f011b0cf:	83 ec 0c             	sub    $0xc,%esp
f011b0d2:	50                   	push   %eax
f011b0d3:	e8 78 c8 fe ff       	call   f0107950 <kfree>
f011b0d8:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011b0db:	e8 e8 8c fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011b0e0:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011b0e3:	74 17                	je     f011b0fc <test_kmalloc_bestfit1+0x10c8>
f011b0e5:	83 ec 04             	sub    $0x4,%esp
f011b0e8:	68 94 b3 13 f0       	push   $0xf013b394
f011b0ed:	68 1d 02 00 00       	push   $0x21d
f011b0f2:	68 7a b3 13 f0       	push   $0xf013b37a
f011b0f7:	e8 09 51 fe ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 128) panic("Wrong free: ");
f011b0fc:	e8 9c 1a ff ff       	call   f010cb9d <sys_calculate_free_frames>
f011b101:	2b 45 f4             	sub    -0xc(%ebp),%eax
f011b104:	3d 80 00 00 00       	cmp    $0x80,%eax
f011b109:	74 17                	je     f011b122 <test_kmalloc_bestfit1+0x10ee>
f011b10b:	83 ec 04             	sub    $0x4,%esp
f011b10e:	68 d7 b7 13 f0       	push   $0xf013b7d7
f011b113:	68 1e 02 00 00       	push   $0x21e
f011b118:	68 7a b3 13 f0       	push   $0xf013b37a
f011b11d:	e8 e3 50 fe ff       	call   f0100205 <_panic>
	}

	//[5] Allocate again [test best fit]
	{
		//Allocate 2 MB - should be placed in the contiguous hole (2 MB + 512 KB)
		freeFrames = sys_calculate_free_frames();
f011b122:	e8 76 1a ff ff       	call   f010cb9d <sys_calculate_free_frames>
f011b127:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011b12a:	e8 99 8c fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011b12f:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[12] = kmalloc(2*Mega - kilo);
f011b132:	83 ec 0c             	sub    $0xc,%esp
f011b135:	68 00 fc 1f 00       	push   $0x1ffc00
f011b13a:	e8 46 c7 fe ff       	call   f0107885 <kmalloc>
f011b13f:	83 c4 10             	add    $0x10,%esp
f011b142:	89 85 98 fe ff ff    	mov    %eax,-0x168(%ebp)
		if ((uint32) ptr_allocations[12] != (ACTUAL_START + 9*Mega)) panic("Wrong start address for the allocated space... ");
f011b148:	8b 85 98 fe ff ff    	mov    -0x168(%ebp),%eax
f011b14e:	89 c1                	mov    %eax,%ecx
f011b150:	c7 85 cc fe ff ff 00 	movl   $0x1000,-0x134(%ebp)
f011b157:	10 00 00 
f011b15a:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f011b160:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011b165:	89 85 c8 fe ff ff    	mov    %eax,-0x138(%ebp)
f011b16b:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f011b171:	ba 00 00 00 00       	mov    $0x0,%edx
f011b176:	f7 b5 cc fe ff ff    	divl   -0x134(%ebp)
f011b17c:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f011b182:	29 d0                	sub    %edx,%eax
f011b184:	89 c3                	mov    %eax,%ebx
f011b186:	c7 85 c4 fe ff ff 00 	movl   $0x1000,-0x13c(%ebp)
f011b18d:	10 00 00 
f011b190:	a0 40 26 78 f0       	mov    0xf0782640,%al
f011b195:	0f b6 d0             	movzbl %al,%edx
f011b198:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f011b19e:	01 d0                	add    %edx,%eax
f011b1a0:	48                   	dec    %eax
f011b1a1:	89 85 c0 fe ff ff    	mov    %eax,-0x140(%ebp)
f011b1a7:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f011b1ad:	ba 00 00 00 00       	mov    $0x0,%edx
f011b1b2:	f7 b5 c4 fe ff ff    	divl   -0x13c(%ebp)
f011b1b8:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f011b1be:	29 d0                	sub    %edx,%eax
f011b1c0:	01 c3                	add    %eax,%ebx
f011b1c2:	c7 85 bc fe ff ff 00 	movl   $0x1000,-0x144(%ebp)
f011b1c9:	10 00 00 
f011b1cc:	a0 40 26 78 f0       	mov    0xf0782640,%al
f011b1d1:	0f b6 c0             	movzbl %al,%eax
f011b1d4:	c1 e0 04             	shl    $0x4,%eax
f011b1d7:	89 c2                	mov    %eax,%edx
f011b1d9:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f011b1df:	01 d0                	add    %edx,%eax
f011b1e1:	48                   	dec    %eax
f011b1e2:	89 85 b8 fe ff ff    	mov    %eax,-0x148(%ebp)
f011b1e8:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f011b1ee:	ba 00 00 00 00       	mov    $0x0,%edx
f011b1f3:	f7 b5 bc fe ff ff    	divl   -0x144(%ebp)
f011b1f9:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f011b1ff:	29 d0                	sub    %edx,%eax
f011b201:	01 d8                	add    %ebx,%eax
f011b203:	2d 00 c0 6f 09       	sub    $0x96fc000,%eax
f011b208:	39 c1                	cmp    %eax,%ecx
f011b20a:	74 17                	je     f011b223 <test_kmalloc_bestfit1+0x11ef>
f011b20c:	83 ec 04             	sub    $0x4,%esp
f011b20f:	68 94 b7 13 f0       	push   $0xf013b794
f011b214:	68 27 02 00 00       	push   $0x227
f011b219:	68 7a b3 13 f0       	push   $0xf013b37a
f011b21e:	e8 e2 4f fe ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011b223:	e8 a0 8b fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011b228:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011b22b:	74 17                	je     f011b244 <test_kmalloc_bestfit1+0x1210>
f011b22d:	83 ec 04             	sub    $0x4,%esp
f011b230:	68 94 b3 13 f0       	push   $0xf013b394
f011b235:	68 28 02 00 00       	push   $0x228
f011b23a:	68 7a b3 13 f0       	push   $0xf013b37a
f011b23f:	e8 c1 4f fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: ");
f011b244:	e8 54 19 ff ff       	call   f010cb9d <sys_calculate_free_frames>
f011b249:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011b24c:	29 c2                	sub    %eax,%edx
f011b24e:	89 d0                	mov    %edx,%eax
f011b250:	3d 00 02 00 00       	cmp    $0x200,%eax
f011b255:	74 17                	je     f011b26e <test_kmalloc_bestfit1+0x123a>
f011b257:	83 ec 04             	sub    $0x4,%esp
f011b25a:	68 c4 b7 13 f0       	push   $0xf013b7c4
f011b25f:	68 29 02 00 00       	push   $0x229
f011b264:	68 7a b3 13 f0       	push   $0xf013b37a
f011b269:	e8 97 4f fe ff       	call   f0100205 <_panic>
	}

	cprintf("Congratulations!! test BEST FIT allocation (1) completed successfully.\n");
f011b26e:	83 ec 0c             	sub    $0xc,%esp
f011b271:	68 e4 b7 13 f0       	push   $0xf013b7e4
f011b276:	e8 93 5a fe ff       	call   f0100d0e <cprintf>
f011b27b:	83 c4 10             	add    $0x10,%esp

	return 1;
f011b27e:	b8 01 00 00 00       	mov    $0x1,%eax

}
f011b283:	8d 65 f8             	lea    -0x8(%ebp),%esp
f011b286:	5b                   	pop    %ebx
f011b287:	5f                   	pop    %edi
f011b288:	5d                   	pop    %ebp
f011b289:	c3                   	ret    

f011b28a <test_kmalloc_bestfit2>:

int test_kmalloc_bestfit2()
{
f011b28a:	55                   	push   %ebp
f011b28b:	89 e5                	mov    %esp,%ebp
f011b28d:	57                   	push   %edi
f011b28e:	53                   	push   %ebx
f011b28f:	81 ec b0 01 00 00    	sub    $0x1b0,%esp
	cprintf("==============================================\n");
f011b295:	83 ec 0c             	sub    $0xc,%esp
f011b298:	68 bc b2 13 f0       	push   $0xf013b2bc
f011b29d:	e8 6c 5a fe ff       	call   f0100d0e <cprintf>
f011b2a2:	83 c4 10             	add    $0x10,%esp
	cprintf("MAKE SURE to have a FRESH RUN for this test\n(i.e. don't run any program/test before it)\n");
f011b2a5:	83 ec 0c             	sub    $0xc,%esp
f011b2a8:	68 ec b2 13 f0       	push   $0xf013b2ec
f011b2ad:	e8 5c 5a fe ff       	call   f0100d0e <cprintf>
f011b2b2:	83 c4 10             	add    $0x10,%esp
	cprintf("==============================================\n");
f011b2b5:	83 ec 0c             	sub    $0xc,%esp
f011b2b8:	68 bc b2 13 f0       	push   $0xf013b2bc
f011b2bd:	e8 4c 5a fe ff       	call   f0100d0e <cprintf>
f011b2c2:	83 c4 10             	add    $0x10,%esp

	void* ptr_allocations[20] = {0};
f011b2c5:	8d 95 50 fe ff ff    	lea    -0x1b0(%ebp),%edx
f011b2cb:	b9 14 00 00 00       	mov    $0x14,%ecx
f011b2d0:	b8 00 00 00 00       	mov    $0x0,%eax
f011b2d5:	89 d7                	mov    %edx,%edi
f011b2d7:	f3 ab                	rep stos %eax,%es:(%edi)
	uint32 freeFrames;
	uint32 freeDiskFrames;

	//[1] Attempt to allocate more than heap size
	{
		ptr_allocations[0] = kmalloc(KERNEL_HEAP_MAX - ACTUAL_START + 1);
f011b2d9:	c7 45 f4 00 10 00 00 	movl   $0x1000,-0xc(%ebp)
f011b2e0:	8b 45 f4             	mov    -0xc(%ebp),%eax
f011b2e3:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011b2e8:	89 45 f0             	mov    %eax,-0x10(%ebp)
f011b2eb:	8b 45 f0             	mov    -0x10(%ebp),%eax
f011b2ee:	ba 00 00 00 00       	mov    $0x0,%edx
f011b2f3:	f7 75 f4             	divl   -0xc(%ebp)
f011b2f6:	8b 45 f0             	mov    -0x10(%ebp),%eax
f011b2f9:	29 d0                	sub    %edx,%eax
f011b2fb:	89 c1                	mov    %eax,%ecx
f011b2fd:	c7 45 ec 00 10 00 00 	movl   $0x1000,-0x14(%ebp)
f011b304:	a0 40 26 78 f0       	mov    0xf0782640,%al
f011b309:	0f b6 d0             	movzbl %al,%edx
f011b30c:	8b 45 ec             	mov    -0x14(%ebp),%eax
f011b30f:	01 d0                	add    %edx,%eax
f011b311:	48                   	dec    %eax
f011b312:	89 45 e8             	mov    %eax,-0x18(%ebp)
f011b315:	8b 45 e8             	mov    -0x18(%ebp),%eax
f011b318:	ba 00 00 00 00       	mov    $0x0,%edx
f011b31d:	f7 75 ec             	divl   -0x14(%ebp)
f011b320:	8b 45 e8             	mov    -0x18(%ebp),%eax
f011b323:	29 d0                	sub    %edx,%eax
f011b325:	01 c1                	add    %eax,%ecx
f011b327:	c7 45 e4 00 10 00 00 	movl   $0x1000,-0x1c(%ebp)
f011b32e:	a0 40 26 78 f0       	mov    0xf0782640,%al
f011b333:	0f b6 c0             	movzbl %al,%eax
f011b336:	c1 e0 04             	shl    $0x4,%eax
f011b339:	89 c2                	mov    %eax,%edx
f011b33b:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f011b33e:	01 d0                	add    %edx,%eax
f011b340:	48                   	dec    %eax
f011b341:	89 45 e0             	mov    %eax,-0x20(%ebp)
f011b344:	8b 45 e0             	mov    -0x20(%ebp),%eax
f011b347:	ba 00 00 00 00       	mov    $0x0,%edx
f011b34c:	f7 75 e4             	divl   -0x1c(%ebp)
f011b34f:	8b 45 e0             	mov    -0x20(%ebp),%eax
f011b352:	29 d0                	sub    %edx,%eax
f011b354:	01 c8                	add    %ecx,%eax
f011b356:	ba 01 b0 ff 09       	mov    $0x9ffb001,%edx
f011b35b:	29 c2                	sub    %eax,%edx
f011b35d:	89 d0                	mov    %edx,%eax
f011b35f:	83 ec 0c             	sub    $0xc,%esp
f011b362:	50                   	push   %eax
f011b363:	e8 1d c5 fe ff       	call   f0107885 <kmalloc>
f011b368:	83 c4 10             	add    $0x10,%esp
f011b36b:	89 85 50 fe ff ff    	mov    %eax,-0x1b0(%ebp)
		if (ptr_allocations[0] != NULL) panic("Kmalloc: Attempt to allocate more than heap size, should return NULL");
f011b371:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f011b377:	85 c0                	test   %eax,%eax
f011b379:	74 17                	je     f011b392 <test_kmalloc_bestfit2+0x108>
f011b37b:	83 ec 04             	sub    $0x4,%esp
f011b37e:	68 2c b8 13 f0       	push   $0xf013b82c
f011b383:	68 3f 02 00 00       	push   $0x23f
f011b388:	68 7a b3 13 f0       	push   $0xf013b37a
f011b38d:	e8 73 4e fe ff       	call   f0100205 <_panic>

	//[2] Attempt to allocate space more than any available fragment
	//	a) Create Fragments
	{
		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f011b392:	e8 06 18 ff ff       	call   f010cb9d <sys_calculate_free_frames>
f011b397:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011b39a:	e8 29 8a fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011b39f:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[0] = kmalloc(2*Mega-kilo);
f011b3a2:	83 ec 0c             	sub    $0xc,%esp
f011b3a5:	68 00 fc 1f 00       	push   $0x1ffc00
f011b3aa:	e8 d6 c4 fe ff       	call   f0107885 <kmalloc>
f011b3af:	83 c4 10             	add    $0x10,%esp
f011b3b2:	89 85 50 fe ff ff    	mov    %eax,-0x1b0(%ebp)
		if ((uint32) ptr_allocations[0] != (ACTUAL_START)) panic("Wrong start address for the allocated space... ");
f011b3b8:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f011b3be:	89 c1                	mov    %eax,%ecx
f011b3c0:	c7 45 d4 00 10 00 00 	movl   $0x1000,-0x2c(%ebp)
f011b3c7:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f011b3ca:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011b3cf:	89 45 d0             	mov    %eax,-0x30(%ebp)
f011b3d2:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011b3d5:	ba 00 00 00 00       	mov    $0x0,%edx
f011b3da:	f7 75 d4             	divl   -0x2c(%ebp)
f011b3dd:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011b3e0:	29 d0                	sub    %edx,%eax
f011b3e2:	89 c3                	mov    %eax,%ebx
f011b3e4:	c7 45 cc 00 10 00 00 	movl   $0x1000,-0x34(%ebp)
f011b3eb:	a0 40 26 78 f0       	mov    0xf0782640,%al
f011b3f0:	0f b6 d0             	movzbl %al,%edx
f011b3f3:	8b 45 cc             	mov    -0x34(%ebp),%eax
f011b3f6:	01 d0                	add    %edx,%eax
f011b3f8:	48                   	dec    %eax
f011b3f9:	89 45 c8             	mov    %eax,-0x38(%ebp)
f011b3fc:	8b 45 c8             	mov    -0x38(%ebp),%eax
f011b3ff:	ba 00 00 00 00       	mov    $0x0,%edx
f011b404:	f7 75 cc             	divl   -0x34(%ebp)
f011b407:	8b 45 c8             	mov    -0x38(%ebp),%eax
f011b40a:	29 d0                	sub    %edx,%eax
f011b40c:	01 c3                	add    %eax,%ebx
f011b40e:	c7 45 c4 00 10 00 00 	movl   $0x1000,-0x3c(%ebp)
f011b415:	a0 40 26 78 f0       	mov    0xf0782640,%al
f011b41a:	0f b6 c0             	movzbl %al,%eax
f011b41d:	c1 e0 04             	shl    $0x4,%eax
f011b420:	89 c2                	mov    %eax,%edx
f011b422:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f011b425:	01 d0                	add    %edx,%eax
f011b427:	48                   	dec    %eax
f011b428:	89 45 c0             	mov    %eax,-0x40(%ebp)
f011b42b:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011b42e:	ba 00 00 00 00       	mov    $0x0,%edx
f011b433:	f7 75 c4             	divl   -0x3c(%ebp)
f011b436:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011b439:	29 d0                	sub    %edx,%eax
f011b43b:	01 d8                	add    %ebx,%eax
f011b43d:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f011b442:	39 c1                	cmp    %eax,%ecx
f011b444:	74 17                	je     f011b45d <test_kmalloc_bestfit2+0x1d3>
f011b446:	83 ec 04             	sub    $0x4,%esp
f011b449:	68 94 b7 13 f0       	push   $0xf013b794
f011b44e:	68 49 02 00 00       	push   $0x249
f011b453:	68 7a b3 13 f0       	push   $0xf013b37a
f011b458:	e8 a8 4d fe ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011b45d:	e8 66 89 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011b462:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011b465:	74 17                	je     f011b47e <test_kmalloc_bestfit2+0x1f4>
f011b467:	83 ec 04             	sub    $0x4,%esp
f011b46a:	68 94 b3 13 f0       	push   $0xf013b394
f011b46f:	68 4a 02 00 00       	push   $0x24a
f011b474:	68 7a b3 13 f0       	push   $0xf013b37a
f011b479:	e8 87 4d fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=  512) panic("Wrong allocation: ");
f011b47e:	e8 1a 17 ff ff       	call   f010cb9d <sys_calculate_free_frames>
f011b483:	8b 55 dc             	mov    -0x24(%ebp),%edx
f011b486:	29 c2                	sub    %eax,%edx
f011b488:	89 d0                	mov    %edx,%eax
f011b48a:	3d 00 02 00 00       	cmp    $0x200,%eax
f011b48f:	74 17                	je     f011b4a8 <test_kmalloc_bestfit2+0x21e>
f011b491:	83 ec 04             	sub    $0x4,%esp
f011b494:	68 c4 b7 13 f0       	push   $0xf013b7c4
f011b499:	68 4b 02 00 00       	push   $0x24b
f011b49e:	68 7a b3 13 f0       	push   $0xf013b37a
f011b4a3:	e8 5d 4d fe ff       	call   f0100205 <_panic>

		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f011b4a8:	e8 f0 16 ff ff       	call   f010cb9d <sys_calculate_free_frames>
f011b4ad:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011b4b0:	e8 13 89 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011b4b5:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[1] = kmalloc(2*Mega-kilo);
f011b4b8:	83 ec 0c             	sub    $0xc,%esp
f011b4bb:	68 00 fc 1f 00       	push   $0x1ffc00
f011b4c0:	e8 c0 c3 fe ff       	call   f0107885 <kmalloc>
f011b4c5:	83 c4 10             	add    $0x10,%esp
f011b4c8:	89 85 54 fe ff ff    	mov    %eax,-0x1ac(%ebp)
		if ((uint32) ptr_allocations[1] != (ACTUAL_START + 2*Mega)) panic("Wrong start address for the allocated space... ");
f011b4ce:	8b 85 54 fe ff ff    	mov    -0x1ac(%ebp),%eax
f011b4d4:	89 c1                	mov    %eax,%ecx
f011b4d6:	c7 45 bc 00 10 00 00 	movl   $0x1000,-0x44(%ebp)
f011b4dd:	8b 45 bc             	mov    -0x44(%ebp),%eax
f011b4e0:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011b4e5:	89 45 b8             	mov    %eax,-0x48(%ebp)
f011b4e8:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011b4eb:	ba 00 00 00 00       	mov    $0x0,%edx
f011b4f0:	f7 75 bc             	divl   -0x44(%ebp)
f011b4f3:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011b4f6:	29 d0                	sub    %edx,%eax
f011b4f8:	89 c3                	mov    %eax,%ebx
f011b4fa:	c7 45 b4 00 10 00 00 	movl   $0x1000,-0x4c(%ebp)
f011b501:	a0 40 26 78 f0       	mov    0xf0782640,%al
f011b506:	0f b6 d0             	movzbl %al,%edx
f011b509:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f011b50c:	01 d0                	add    %edx,%eax
f011b50e:	48                   	dec    %eax
f011b50f:	89 45 b0             	mov    %eax,-0x50(%ebp)
f011b512:	8b 45 b0             	mov    -0x50(%ebp),%eax
f011b515:	ba 00 00 00 00       	mov    $0x0,%edx
f011b51a:	f7 75 b4             	divl   -0x4c(%ebp)
f011b51d:	8b 45 b0             	mov    -0x50(%ebp),%eax
f011b520:	29 d0                	sub    %edx,%eax
f011b522:	01 c3                	add    %eax,%ebx
f011b524:	c7 45 ac 00 10 00 00 	movl   $0x1000,-0x54(%ebp)
f011b52b:	a0 40 26 78 f0       	mov    0xf0782640,%al
f011b530:	0f b6 c0             	movzbl %al,%eax
f011b533:	c1 e0 04             	shl    $0x4,%eax
f011b536:	89 c2                	mov    %eax,%edx
f011b538:	8b 45 ac             	mov    -0x54(%ebp),%eax
f011b53b:	01 d0                	add    %edx,%eax
f011b53d:	48                   	dec    %eax
f011b53e:	89 45 a8             	mov    %eax,-0x58(%ebp)
f011b541:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011b544:	ba 00 00 00 00       	mov    $0x0,%edx
f011b549:	f7 75 ac             	divl   -0x54(%ebp)
f011b54c:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011b54f:	29 d0                	sub    %edx,%eax
f011b551:	01 d8                	add    %ebx,%eax
f011b553:	2d 00 c0 df 09       	sub    $0x9dfc000,%eax
f011b558:	39 c1                	cmp    %eax,%ecx
f011b55a:	74 17                	je     f011b573 <test_kmalloc_bestfit2+0x2e9>
f011b55c:	83 ec 04             	sub    $0x4,%esp
f011b55f:	68 94 b7 13 f0       	push   $0xf013b794
f011b564:	68 51 02 00 00       	push   $0x251
f011b569:	68 7a b3 13 f0       	push   $0xf013b37a
f011b56e:	e8 92 4c fe ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011b573:	e8 50 88 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011b578:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011b57b:	74 17                	je     f011b594 <test_kmalloc_bestfit2+0x30a>
f011b57d:	83 ec 04             	sub    $0x4,%esp
f011b580:	68 94 b3 13 f0       	push   $0xf013b394
f011b585:	68 52 02 00 00       	push   $0x252
f011b58a:	68 7a b3 13 f0       	push   $0xf013b37a
f011b58f:	e8 71 4c fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=  512) panic("Wrong allocation: ");
f011b594:	e8 04 16 ff ff       	call   f010cb9d <sys_calculate_free_frames>
f011b599:	8b 55 dc             	mov    -0x24(%ebp),%edx
f011b59c:	29 c2                	sub    %eax,%edx
f011b59e:	89 d0                	mov    %edx,%eax
f011b5a0:	3d 00 02 00 00       	cmp    $0x200,%eax
f011b5a5:	74 17                	je     f011b5be <test_kmalloc_bestfit2+0x334>
f011b5a7:	83 ec 04             	sub    $0x4,%esp
f011b5aa:	68 c4 b7 13 f0       	push   $0xf013b7c4
f011b5af:	68 53 02 00 00       	push   $0x253
f011b5b4:	68 7a b3 13 f0       	push   $0xf013b37a
f011b5b9:	e8 47 4c fe ff       	call   f0100205 <_panic>

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f011b5be:	e8 da 15 ff ff       	call   f010cb9d <sys_calculate_free_frames>
f011b5c3:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011b5c6:	e8 fd 87 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011b5cb:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[2] = kmalloc(2*kilo);
f011b5ce:	83 ec 0c             	sub    $0xc,%esp
f011b5d1:	68 00 08 00 00       	push   $0x800
f011b5d6:	e8 aa c2 fe ff       	call   f0107885 <kmalloc>
f011b5db:	83 c4 10             	add    $0x10,%esp
f011b5de:	89 85 58 fe ff ff    	mov    %eax,-0x1a8(%ebp)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... ");
f011b5e4:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f011b5ea:	89 c1                	mov    %eax,%ecx
f011b5ec:	c7 45 a4 00 10 00 00 	movl   $0x1000,-0x5c(%ebp)
f011b5f3:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f011b5f6:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011b5fb:	89 45 a0             	mov    %eax,-0x60(%ebp)
f011b5fe:	8b 45 a0             	mov    -0x60(%ebp),%eax
f011b601:	ba 00 00 00 00       	mov    $0x0,%edx
f011b606:	f7 75 a4             	divl   -0x5c(%ebp)
f011b609:	8b 45 a0             	mov    -0x60(%ebp),%eax
f011b60c:	29 d0                	sub    %edx,%eax
f011b60e:	89 c3                	mov    %eax,%ebx
f011b610:	c7 45 9c 00 10 00 00 	movl   $0x1000,-0x64(%ebp)
f011b617:	a0 40 26 78 f0       	mov    0xf0782640,%al
f011b61c:	0f b6 d0             	movzbl %al,%edx
f011b61f:	8b 45 9c             	mov    -0x64(%ebp),%eax
f011b622:	01 d0                	add    %edx,%eax
f011b624:	48                   	dec    %eax
f011b625:	89 45 98             	mov    %eax,-0x68(%ebp)
f011b628:	8b 45 98             	mov    -0x68(%ebp),%eax
f011b62b:	ba 00 00 00 00       	mov    $0x0,%edx
f011b630:	f7 75 9c             	divl   -0x64(%ebp)
f011b633:	8b 45 98             	mov    -0x68(%ebp),%eax
f011b636:	29 d0                	sub    %edx,%eax
f011b638:	01 c3                	add    %eax,%ebx
f011b63a:	c7 45 94 00 10 00 00 	movl   $0x1000,-0x6c(%ebp)
f011b641:	a0 40 26 78 f0       	mov    0xf0782640,%al
f011b646:	0f b6 c0             	movzbl %al,%eax
f011b649:	c1 e0 04             	shl    $0x4,%eax
f011b64c:	89 c2                	mov    %eax,%edx
f011b64e:	8b 45 94             	mov    -0x6c(%ebp),%eax
f011b651:	01 d0                	add    %edx,%eax
f011b653:	48                   	dec    %eax
f011b654:	89 45 90             	mov    %eax,-0x70(%ebp)
f011b657:	8b 45 90             	mov    -0x70(%ebp),%eax
f011b65a:	ba 00 00 00 00       	mov    $0x0,%edx
f011b65f:	f7 75 94             	divl   -0x6c(%ebp)
f011b662:	8b 45 90             	mov    -0x70(%ebp),%eax
f011b665:	29 d0                	sub    %edx,%eax
f011b667:	01 d8                	add    %ebx,%eax
f011b669:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
f011b66e:	39 c1                	cmp    %eax,%ecx
f011b670:	74 17                	je     f011b689 <test_kmalloc_bestfit2+0x3ff>
f011b672:	83 ec 04             	sub    $0x4,%esp
f011b675:	68 94 b7 13 f0       	push   $0xf013b794
f011b67a:	68 59 02 00 00       	push   $0x259
f011b67f:	68 7a b3 13 f0       	push   $0xf013b37a
f011b684:	e8 7c 4b fe ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011b689:	e8 3a 87 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011b68e:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011b691:	74 17                	je     f011b6aa <test_kmalloc_bestfit2+0x420>
f011b693:	83 ec 04             	sub    $0x4,%esp
f011b696:	68 94 b3 13 f0       	push   $0xf013b394
f011b69b:	68 5a 02 00 00       	push   $0x25a
f011b6a0:	68 7a b3 13 f0       	push   $0xf013b37a
f011b6a5:	e8 5b 4b fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=  1) panic("Wrong allocation: ");
f011b6aa:	e8 ee 14 ff ff       	call   f010cb9d <sys_calculate_free_frames>
f011b6af:	8b 55 dc             	mov    -0x24(%ebp),%edx
f011b6b2:	29 c2                	sub    %eax,%edx
f011b6b4:	89 d0                	mov    %edx,%eax
f011b6b6:	83 f8 01             	cmp    $0x1,%eax
f011b6b9:	74 17                	je     f011b6d2 <test_kmalloc_bestfit2+0x448>
f011b6bb:	83 ec 04             	sub    $0x4,%esp
f011b6be:	68 c4 b7 13 f0       	push   $0xf013b7c4
f011b6c3:	68 5b 02 00 00       	push   $0x25b
f011b6c8:	68 7a b3 13 f0       	push   $0xf013b37a
f011b6cd:	e8 33 4b fe ff       	call   f0100205 <_panic>

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f011b6d2:	e8 c6 14 ff ff       	call   f010cb9d <sys_calculate_free_frames>
f011b6d7:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011b6da:	e8 e9 86 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011b6df:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[3] = kmalloc(2*kilo);
f011b6e2:	83 ec 0c             	sub    $0xc,%esp
f011b6e5:	68 00 08 00 00       	push   $0x800
f011b6ea:	e8 96 c1 fe ff       	call   f0107885 <kmalloc>
f011b6ef:	83 c4 10             	add    $0x10,%esp
f011b6f2:	89 85 5c fe ff ff    	mov    %eax,-0x1a4(%ebp)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... ");
f011b6f8:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f011b6fe:	89 c1                	mov    %eax,%ecx
f011b700:	c7 45 8c 00 10 00 00 	movl   $0x1000,-0x74(%ebp)
f011b707:	8b 45 8c             	mov    -0x74(%ebp),%eax
f011b70a:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011b70f:	89 45 88             	mov    %eax,-0x78(%ebp)
f011b712:	8b 45 88             	mov    -0x78(%ebp),%eax
f011b715:	ba 00 00 00 00       	mov    $0x0,%edx
f011b71a:	f7 75 8c             	divl   -0x74(%ebp)
f011b71d:	8b 45 88             	mov    -0x78(%ebp),%eax
f011b720:	29 d0                	sub    %edx,%eax
f011b722:	89 c3                	mov    %eax,%ebx
f011b724:	c7 45 84 00 10 00 00 	movl   $0x1000,-0x7c(%ebp)
f011b72b:	a0 40 26 78 f0       	mov    0xf0782640,%al
f011b730:	0f b6 d0             	movzbl %al,%edx
f011b733:	8b 45 84             	mov    -0x7c(%ebp),%eax
f011b736:	01 d0                	add    %edx,%eax
f011b738:	48                   	dec    %eax
f011b739:	89 45 80             	mov    %eax,-0x80(%ebp)
f011b73c:	8b 45 80             	mov    -0x80(%ebp),%eax
f011b73f:	ba 00 00 00 00       	mov    $0x0,%edx
f011b744:	f7 75 84             	divl   -0x7c(%ebp)
f011b747:	8b 45 80             	mov    -0x80(%ebp),%eax
f011b74a:	29 d0                	sub    %edx,%eax
f011b74c:	01 c3                	add    %eax,%ebx
f011b74e:	c7 85 7c ff ff ff 00 	movl   $0x1000,-0x84(%ebp)
f011b755:	10 00 00 
f011b758:	a0 40 26 78 f0       	mov    0xf0782640,%al
f011b75d:	0f b6 c0             	movzbl %al,%eax
f011b760:	c1 e0 04             	shl    $0x4,%eax
f011b763:	89 c2                	mov    %eax,%edx
f011b765:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f011b76b:	01 d0                	add    %edx,%eax
f011b76d:	48                   	dec    %eax
f011b76e:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)
f011b774:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f011b77a:	ba 00 00 00 00       	mov    $0x0,%edx
f011b77f:	f7 b5 7c ff ff ff    	divl   -0x84(%ebp)
f011b785:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f011b78b:	29 d0                	sub    %edx,%eax
f011b78d:	01 d8                	add    %ebx,%eax
f011b78f:	2d 00 b0 bf 09       	sub    $0x9bfb000,%eax
f011b794:	39 c1                	cmp    %eax,%ecx
f011b796:	74 17                	je     f011b7af <test_kmalloc_bestfit2+0x525>
f011b798:	83 ec 04             	sub    $0x4,%esp
f011b79b:	68 94 b7 13 f0       	push   $0xf013b794
f011b7a0:	68 61 02 00 00       	push   $0x261
f011b7a5:	68 7a b3 13 f0       	push   $0xf013b37a
f011b7aa:	e8 56 4a fe ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011b7af:	e8 14 86 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011b7b4:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011b7b7:	74 17                	je     f011b7d0 <test_kmalloc_bestfit2+0x546>
f011b7b9:	83 ec 04             	sub    $0x4,%esp
f011b7bc:	68 94 b3 13 f0       	push   $0xf013b394
f011b7c1:	68 62 02 00 00       	push   $0x262
f011b7c6:	68 7a b3 13 f0       	push   $0xf013b37a
f011b7cb:	e8 35 4a fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=  1) panic("Wrong allocation: ");
f011b7d0:	e8 c8 13 ff ff       	call   f010cb9d <sys_calculate_free_frames>
f011b7d5:	8b 55 dc             	mov    -0x24(%ebp),%edx
f011b7d8:	29 c2                	sub    %eax,%edx
f011b7da:	89 d0                	mov    %edx,%eax
f011b7dc:	83 f8 01             	cmp    $0x1,%eax
f011b7df:	74 17                	je     f011b7f8 <test_kmalloc_bestfit2+0x56e>
f011b7e1:	83 ec 04             	sub    $0x4,%esp
f011b7e4:	68 c4 b7 13 f0       	push   $0xf013b7c4
f011b7e9:	68 63 02 00 00       	push   $0x263
f011b7ee:	68 7a b3 13 f0       	push   $0xf013b37a
f011b7f3:	e8 0d 4a fe ff       	call   f0100205 <_panic>

		//4 KB Hole
		freeFrames = sys_calculate_free_frames() ;
f011b7f8:	e8 a0 13 ff ff       	call   f010cb9d <sys_calculate_free_frames>
f011b7fd:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011b800:	e8 c3 85 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011b805:	89 45 d8             	mov    %eax,-0x28(%ebp)
		kfree(ptr_allocations[2]);
f011b808:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f011b80e:	83 ec 0c             	sub    $0xc,%esp
f011b811:	50                   	push   %eax
f011b812:	e8 39 c1 fe ff       	call   f0107950 <kfree>
f011b817:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011b81a:	e8 a9 85 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011b81f:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011b822:	74 17                	je     f011b83b <test_kmalloc_bestfit2+0x5b1>
f011b824:	83 ec 04             	sub    $0x4,%esp
f011b827:	68 94 b3 13 f0       	push   $0xf013b394
f011b82c:	68 69 02 00 00       	push   $0x269
f011b831:	68 7a b3 13 f0       	push   $0xf013b37a
f011b836:	e8 ca 49 fe ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 1) panic("Wrong allocation: ");
f011b83b:	e8 5d 13 ff ff       	call   f010cb9d <sys_calculate_free_frames>
f011b840:	2b 45 dc             	sub    -0x24(%ebp),%eax
f011b843:	83 f8 01             	cmp    $0x1,%eax
f011b846:	74 17                	je     f011b85f <test_kmalloc_bestfit2+0x5d5>
f011b848:	83 ec 04             	sub    $0x4,%esp
f011b84b:	68 c4 b7 13 f0       	push   $0xf013b7c4
f011b850:	68 6a 02 00 00       	push   $0x26a
f011b855:	68 7a b3 13 f0       	push   $0xf013b37a
f011b85a:	e8 a6 49 fe ff       	call   f0100205 <_panic>

		//7 KB
		freeFrames = sys_calculate_free_frames() ;
f011b85f:	e8 39 13 ff ff       	call   f010cb9d <sys_calculate_free_frames>
f011b864:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011b867:	e8 5c 85 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011b86c:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[4] = kmalloc(7*kilo);
f011b86f:	83 ec 0c             	sub    $0xc,%esp
f011b872:	68 00 1c 00 00       	push   $0x1c00
f011b877:	e8 09 c0 fe ff       	call   f0107885 <kmalloc>
f011b87c:	83 c4 10             	add    $0x10,%esp
f011b87f:	89 85 60 fe ff ff    	mov    %eax,-0x1a0(%ebp)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... ");
f011b885:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f011b88b:	89 c1                	mov    %eax,%ecx
f011b88d:	c7 85 74 ff ff ff 00 	movl   $0x1000,-0x8c(%ebp)
f011b894:	10 00 00 
f011b897:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f011b89d:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011b8a2:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
f011b8a8:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f011b8ae:	ba 00 00 00 00       	mov    $0x0,%edx
f011b8b3:	f7 b5 74 ff ff ff    	divl   -0x8c(%ebp)
f011b8b9:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f011b8bf:	29 d0                	sub    %edx,%eax
f011b8c1:	89 c3                	mov    %eax,%ebx
f011b8c3:	c7 85 6c ff ff ff 00 	movl   $0x1000,-0x94(%ebp)
f011b8ca:	10 00 00 
f011b8cd:	a0 40 26 78 f0       	mov    0xf0782640,%al
f011b8d2:	0f b6 d0             	movzbl %al,%edx
f011b8d5:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f011b8db:	01 d0                	add    %edx,%eax
f011b8dd:	48                   	dec    %eax
f011b8de:	89 85 68 ff ff ff    	mov    %eax,-0x98(%ebp)
f011b8e4:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f011b8ea:	ba 00 00 00 00       	mov    $0x0,%edx
f011b8ef:	f7 b5 6c ff ff ff    	divl   -0x94(%ebp)
f011b8f5:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f011b8fb:	29 d0                	sub    %edx,%eax
f011b8fd:	01 c3                	add    %eax,%ebx
f011b8ff:	c7 85 64 ff ff ff 00 	movl   $0x1000,-0x9c(%ebp)
f011b906:	10 00 00 
f011b909:	a0 40 26 78 f0       	mov    0xf0782640,%al
f011b90e:	0f b6 c0             	movzbl %al,%eax
f011b911:	c1 e0 04             	shl    $0x4,%eax
f011b914:	89 c2                	mov    %eax,%edx
f011b916:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f011b91c:	01 d0                	add    %edx,%eax
f011b91e:	48                   	dec    %eax
f011b91f:	89 85 60 ff ff ff    	mov    %eax,-0xa0(%ebp)
f011b925:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f011b92b:	ba 00 00 00 00       	mov    $0x0,%edx
f011b930:	f7 b5 64 ff ff ff    	divl   -0x9c(%ebp)
f011b936:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f011b93c:	29 d0                	sub    %edx,%eax
f011b93e:	01 d8                	add    %ebx,%eax
f011b940:	2d 00 a0 bf 09       	sub    $0x9bfa000,%eax
f011b945:	39 c1                	cmp    %eax,%ecx
f011b947:	74 17                	je     f011b960 <test_kmalloc_bestfit2+0x6d6>
f011b949:	83 ec 04             	sub    $0x4,%esp
f011b94c:	68 94 b7 13 f0       	push   $0xf013b794
f011b951:	68 70 02 00 00       	push   $0x270
f011b956:	68 7a b3 13 f0       	push   $0xf013b37a
f011b95b:	e8 a5 48 fe ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011b960:	e8 63 84 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011b965:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011b968:	74 17                	je     f011b981 <test_kmalloc_bestfit2+0x6f7>
f011b96a:	83 ec 04             	sub    $0x4,%esp
f011b96d:	68 94 b3 13 f0       	push   $0xf013b394
f011b972:	68 71 02 00 00       	push   $0x271
f011b977:	68 7a b3 13 f0       	push   $0xf013b37a
f011b97c:	e8 84 48 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=  2) panic("Wrong allocation: ");
f011b981:	e8 17 12 ff ff       	call   f010cb9d <sys_calculate_free_frames>
f011b986:	8b 55 dc             	mov    -0x24(%ebp),%edx
f011b989:	29 c2                	sub    %eax,%edx
f011b98b:	89 d0                	mov    %edx,%eax
f011b98d:	83 f8 02             	cmp    $0x2,%eax
f011b990:	74 17                	je     f011b9a9 <test_kmalloc_bestfit2+0x71f>
f011b992:	83 ec 04             	sub    $0x4,%esp
f011b995:	68 c4 b7 13 f0       	push   $0xf013b7c4
f011b99a:	68 72 02 00 00       	push   $0x272
f011b99f:	68 7a b3 13 f0       	push   $0xf013b37a
f011b9a4:	e8 5c 48 fe ff       	call   f0100205 <_panic>

		//2 MB Hole
		freeFrames = sys_calculate_free_frames() ;
f011b9a9:	e8 ef 11 ff ff       	call   f010cb9d <sys_calculate_free_frames>
f011b9ae:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011b9b1:	e8 12 84 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011b9b6:	89 45 d8             	mov    %eax,-0x28(%ebp)
		kfree(ptr_allocations[0]);
f011b9b9:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f011b9bf:	83 ec 0c             	sub    $0xc,%esp
f011b9c2:	50                   	push   %eax
f011b9c3:	e8 88 bf fe ff       	call   f0107950 <kfree>
f011b9c8:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011b9cb:	e8 f8 83 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011b9d0:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011b9d3:	74 17                	je     f011b9ec <test_kmalloc_bestfit2+0x762>
f011b9d5:	83 ec 04             	sub    $0x4,%esp
f011b9d8:	68 94 b3 13 f0       	push   $0xf013b394
f011b9dd:	68 78 02 00 00       	push   $0x278
f011b9e2:	68 7a b3 13 f0       	push   $0xf013b37a
f011b9e7:	e8 19 48 fe ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512) panic("Wrong free: Extra or less pages are removed from main memory");
f011b9ec:	e8 ac 11 ff ff       	call   f010cb9d <sys_calculate_free_frames>
f011b9f1:	2b 45 dc             	sub    -0x24(%ebp),%eax
f011b9f4:	3d 00 02 00 00       	cmp    $0x200,%eax
f011b9f9:	74 17                	je     f011ba12 <test_kmalloc_bestfit2+0x788>
f011b9fb:	83 ec 04             	sub    $0x4,%esp
f011b9fe:	68 48 b6 13 f0       	push   $0xf013b648
f011ba03:	68 79 02 00 00       	push   $0x279
f011ba08:	68 7a b3 13 f0       	push   $0xf013b37a
f011ba0d:	e8 f3 47 fe ff       	call   f0100205 <_panic>

		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f011ba12:	e8 86 11 ff ff       	call   f010cb9d <sys_calculate_free_frames>
f011ba17:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011ba1a:	e8 a9 83 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011ba1f:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[5] = kmalloc(3*Mega-kilo);
f011ba22:	83 ec 0c             	sub    $0xc,%esp
f011ba25:	68 00 fc 2f 00       	push   $0x2ffc00
f011ba2a:	e8 56 be fe ff       	call   f0107885 <kmalloc>
f011ba2f:	83 c4 10             	add    $0x10,%esp
f011ba32:	89 85 64 fe ff ff    	mov    %eax,-0x19c(%ebp)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo)) panic("Wrong start address for the allocated space... ");
f011ba38:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f011ba3e:	89 c1                	mov    %eax,%ecx
f011ba40:	c7 85 5c ff ff ff 00 	movl   $0x1000,-0xa4(%ebp)
f011ba47:	10 00 00 
f011ba4a:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f011ba50:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011ba55:	89 85 58 ff ff ff    	mov    %eax,-0xa8(%ebp)
f011ba5b:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f011ba61:	ba 00 00 00 00       	mov    $0x0,%edx
f011ba66:	f7 b5 5c ff ff ff    	divl   -0xa4(%ebp)
f011ba6c:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f011ba72:	29 d0                	sub    %edx,%eax
f011ba74:	89 c3                	mov    %eax,%ebx
f011ba76:	c7 85 54 ff ff ff 00 	movl   $0x1000,-0xac(%ebp)
f011ba7d:	10 00 00 
f011ba80:	a0 40 26 78 f0       	mov    0xf0782640,%al
f011ba85:	0f b6 d0             	movzbl %al,%edx
f011ba88:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f011ba8e:	01 d0                	add    %edx,%eax
f011ba90:	48                   	dec    %eax
f011ba91:	89 85 50 ff ff ff    	mov    %eax,-0xb0(%ebp)
f011ba97:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f011ba9d:	ba 00 00 00 00       	mov    $0x0,%edx
f011baa2:	f7 b5 54 ff ff ff    	divl   -0xac(%ebp)
f011baa8:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f011baae:	29 d0                	sub    %edx,%eax
f011bab0:	01 c3                	add    %eax,%ebx
f011bab2:	c7 85 4c ff ff ff 00 	movl   $0x1000,-0xb4(%ebp)
f011bab9:	10 00 00 
f011babc:	a0 40 26 78 f0       	mov    0xf0782640,%al
f011bac1:	0f b6 c0             	movzbl %al,%eax
f011bac4:	c1 e0 04             	shl    $0x4,%eax
f011bac7:	89 c2                	mov    %eax,%edx
f011bac9:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f011bacf:	01 d0                	add    %edx,%eax
f011bad1:	48                   	dec    %eax
f011bad2:	89 85 48 ff ff ff    	mov    %eax,-0xb8(%ebp)
f011bad8:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f011bade:	ba 00 00 00 00       	mov    $0x0,%edx
f011bae3:	f7 b5 4c ff ff ff    	divl   -0xb4(%ebp)
f011bae9:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f011baef:	29 d0                	sub    %edx,%eax
f011baf1:	01 d8                	add    %ebx,%eax
f011baf3:	2d 00 80 bf 09       	sub    $0x9bf8000,%eax
f011baf8:	39 c1                	cmp    %eax,%ecx
f011bafa:	74 17                	je     f011bb13 <test_kmalloc_bestfit2+0x889>
f011bafc:	83 ec 04             	sub    $0x4,%esp
f011baff:	68 94 b7 13 f0       	push   $0xf013b794
f011bb04:	68 7f 02 00 00       	push   $0x27f
f011bb09:	68 7a b3 13 f0       	push   $0xf013b37a
f011bb0e:	e8 f2 46 fe ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011bb13:	e8 b0 82 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011bb18:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011bb1b:	74 17                	je     f011bb34 <test_kmalloc_bestfit2+0x8aa>
f011bb1d:	83 ec 04             	sub    $0x4,%esp
f011bb20:	68 94 b3 13 f0       	push   $0xf013b394
f011bb25:	68 80 02 00 00       	push   $0x280
f011bb2a:	68 7a b3 13 f0       	push   $0xf013b37a
f011bb2f:	e8 d1 46 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=  768) panic("Wrong allocation: ");
f011bb34:	e8 64 10 ff ff       	call   f010cb9d <sys_calculate_free_frames>
f011bb39:	8b 55 dc             	mov    -0x24(%ebp),%edx
f011bb3c:	29 c2                	sub    %eax,%edx
f011bb3e:	89 d0                	mov    %edx,%eax
f011bb40:	3d 00 03 00 00       	cmp    $0x300,%eax
f011bb45:	74 17                	je     f011bb5e <test_kmalloc_bestfit2+0x8d4>
f011bb47:	83 ec 04             	sub    $0x4,%esp
f011bb4a:	68 c4 b7 13 f0       	push   $0xf013b7c4
f011bb4f:	68 81 02 00 00       	push   $0x281
f011bb54:	68 7a b3 13 f0       	push   $0xf013b37a
f011bb59:	e8 a7 46 fe ff       	call   f0100205 <_panic>

		//2 MB + 6 KB
		freeFrames = sys_calculate_free_frames() ;
f011bb5e:	e8 3a 10 ff ff       	call   f010cb9d <sys_calculate_free_frames>
f011bb63:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011bb66:	e8 5d 82 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011bb6b:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[6] = kmalloc(2*Mega + 6*kilo);
f011bb6e:	83 ec 0c             	sub    $0xc,%esp
f011bb71:	68 00 18 20 00       	push   $0x201800
f011bb76:	e8 0a bd fe ff       	call   f0107885 <kmalloc>
f011bb7b:	83 c4 10             	add    $0x10,%esp
f011bb7e:	89 85 68 fe ff ff    	mov    %eax,-0x198(%ebp)
		if ((uint32) ptr_allocations[6] != (ACTUAL_START + 7*Mega + 16*kilo)) panic("Wrong start address for the allocated space... ");
f011bb84:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f011bb8a:	89 c1                	mov    %eax,%ecx
f011bb8c:	c7 85 44 ff ff ff 00 	movl   $0x1000,-0xbc(%ebp)
f011bb93:	10 00 00 
f011bb96:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f011bb9c:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011bba1:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%ebp)
f011bba7:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f011bbad:	ba 00 00 00 00       	mov    $0x0,%edx
f011bbb2:	f7 b5 44 ff ff ff    	divl   -0xbc(%ebp)
f011bbb8:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f011bbbe:	29 d0                	sub    %edx,%eax
f011bbc0:	89 c3                	mov    %eax,%ebx
f011bbc2:	c7 85 3c ff ff ff 00 	movl   $0x1000,-0xc4(%ebp)
f011bbc9:	10 00 00 
f011bbcc:	a0 40 26 78 f0       	mov    0xf0782640,%al
f011bbd1:	0f b6 d0             	movzbl %al,%edx
f011bbd4:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f011bbda:	01 d0                	add    %edx,%eax
f011bbdc:	48                   	dec    %eax
f011bbdd:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
f011bbe3:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f011bbe9:	ba 00 00 00 00       	mov    $0x0,%edx
f011bbee:	f7 b5 3c ff ff ff    	divl   -0xc4(%ebp)
f011bbf4:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f011bbfa:	29 d0                	sub    %edx,%eax
f011bbfc:	01 c3                	add    %eax,%ebx
f011bbfe:	c7 85 34 ff ff ff 00 	movl   $0x1000,-0xcc(%ebp)
f011bc05:	10 00 00 
f011bc08:	a0 40 26 78 f0       	mov    0xf0782640,%al
f011bc0d:	0f b6 c0             	movzbl %al,%eax
f011bc10:	c1 e0 04             	shl    $0x4,%eax
f011bc13:	89 c2                	mov    %eax,%edx
f011bc15:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f011bc1b:	01 d0                	add    %edx,%eax
f011bc1d:	48                   	dec    %eax
f011bc1e:	89 85 30 ff ff ff    	mov    %eax,-0xd0(%ebp)
f011bc24:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f011bc2a:	ba 00 00 00 00       	mov    $0x0,%edx
f011bc2f:	f7 b5 34 ff ff ff    	divl   -0xcc(%ebp)
f011bc35:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f011bc3b:	29 d0                	sub    %edx,%eax
f011bc3d:	01 d8                	add    %ebx,%eax
f011bc3f:	2d 00 80 8f 09       	sub    $0x98f8000,%eax
f011bc44:	39 c1                	cmp    %eax,%ecx
f011bc46:	74 17                	je     f011bc5f <test_kmalloc_bestfit2+0x9d5>
f011bc48:	83 ec 04             	sub    $0x4,%esp
f011bc4b:	68 94 b7 13 f0       	push   $0xf013b794
f011bc50:	68 87 02 00 00       	push   $0x287
f011bc55:	68 7a b3 13 f0       	push   $0xf013b37a
f011bc5a:	e8 a6 45 fe ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011bc5f:	e8 64 81 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011bc64:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011bc67:	74 17                	je     f011bc80 <test_kmalloc_bestfit2+0x9f6>
f011bc69:	83 ec 04             	sub    $0x4,%esp
f011bc6c:	68 94 b3 13 f0       	push   $0xf013b394
f011bc71:	68 88 02 00 00       	push   $0x288
f011bc76:	68 7a b3 13 f0       	push   $0xf013b37a
f011bc7b:	e8 85 45 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=  514) panic("Wrong allocation: ");
f011bc80:	e8 18 0f ff ff       	call   f010cb9d <sys_calculate_free_frames>
f011bc85:	8b 55 dc             	mov    -0x24(%ebp),%edx
f011bc88:	29 c2                	sub    %eax,%edx
f011bc8a:	89 d0                	mov    %edx,%eax
f011bc8c:	3d 02 02 00 00       	cmp    $0x202,%eax
f011bc91:	74 17                	je     f011bcaa <test_kmalloc_bestfit2+0xa20>
f011bc93:	83 ec 04             	sub    $0x4,%esp
f011bc96:	68 c4 b7 13 f0       	push   $0xf013b7c4
f011bc9b:	68 89 02 00 00       	push   $0x289
f011bca0:	68 7a b3 13 f0       	push   $0xf013b37a
f011bca5:	e8 5b 45 fe ff       	call   f0100205 <_panic>

		//5 MB
		freeFrames = sys_calculate_free_frames() ;
f011bcaa:	e8 ee 0e ff ff       	call   f010cb9d <sys_calculate_free_frames>
f011bcaf:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011bcb2:	e8 11 81 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011bcb7:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[7] = kmalloc(5*Mega-kilo);
f011bcba:	83 ec 0c             	sub    $0xc,%esp
f011bcbd:	68 00 fc 4f 00       	push   $0x4ffc00
f011bcc2:	e8 be bb fe ff       	call   f0107885 <kmalloc>
f011bcc7:	83 c4 10             	add    $0x10,%esp
f011bcca:	89 85 6c fe ff ff    	mov    %eax,-0x194(%ebp)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 9*Mega + 24*kilo)) panic("Wrong start address for the allocated space... ");
f011bcd0:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f011bcd6:	89 c1                	mov    %eax,%ecx
f011bcd8:	c7 85 2c ff ff ff 00 	movl   $0x1000,-0xd4(%ebp)
f011bcdf:	10 00 00 
f011bce2:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f011bce8:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011bced:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%ebp)
f011bcf3:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f011bcf9:	ba 00 00 00 00       	mov    $0x0,%edx
f011bcfe:	f7 b5 2c ff ff ff    	divl   -0xd4(%ebp)
f011bd04:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f011bd0a:	29 d0                	sub    %edx,%eax
f011bd0c:	89 c3                	mov    %eax,%ebx
f011bd0e:	c7 85 24 ff ff ff 00 	movl   $0x1000,-0xdc(%ebp)
f011bd15:	10 00 00 
f011bd18:	a0 40 26 78 f0       	mov    0xf0782640,%al
f011bd1d:	0f b6 d0             	movzbl %al,%edx
f011bd20:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011bd26:	01 d0                	add    %edx,%eax
f011bd28:	48                   	dec    %eax
f011bd29:	89 85 20 ff ff ff    	mov    %eax,-0xe0(%ebp)
f011bd2f:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f011bd35:	ba 00 00 00 00       	mov    $0x0,%edx
f011bd3a:	f7 b5 24 ff ff ff    	divl   -0xdc(%ebp)
f011bd40:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f011bd46:	29 d0                	sub    %edx,%eax
f011bd48:	01 c3                	add    %eax,%ebx
f011bd4a:	c7 85 1c ff ff ff 00 	movl   $0x1000,-0xe4(%ebp)
f011bd51:	10 00 00 
f011bd54:	a0 40 26 78 f0       	mov    0xf0782640,%al
f011bd59:	0f b6 c0             	movzbl %al,%eax
f011bd5c:	c1 e0 04             	shl    $0x4,%eax
f011bd5f:	89 c2                	mov    %eax,%edx
f011bd61:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f011bd67:	01 d0                	add    %edx,%eax
f011bd69:	48                   	dec    %eax
f011bd6a:	89 85 18 ff ff ff    	mov    %eax,-0xe8(%ebp)
f011bd70:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f011bd76:	ba 00 00 00 00       	mov    $0x0,%edx
f011bd7b:	f7 b5 1c ff ff ff    	divl   -0xe4(%ebp)
f011bd81:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f011bd87:	29 d0                	sub    %edx,%eax
f011bd89:	01 d8                	add    %ebx,%eax
f011bd8b:	2d 00 60 6f 09       	sub    $0x96f6000,%eax
f011bd90:	39 c1                	cmp    %eax,%ecx
f011bd92:	74 17                	je     f011bdab <test_kmalloc_bestfit2+0xb21>
f011bd94:	83 ec 04             	sub    $0x4,%esp
f011bd97:	68 94 b7 13 f0       	push   $0xf013b794
f011bd9c:	68 8f 02 00 00       	push   $0x28f
f011bda1:	68 7a b3 13 f0       	push   $0xf013b37a
f011bda6:	e8 5a 44 fe ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011bdab:	e8 18 80 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011bdb0:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011bdb3:	74 17                	je     f011bdcc <test_kmalloc_bestfit2+0xb42>
f011bdb5:	83 ec 04             	sub    $0x4,%esp
f011bdb8:	68 94 b3 13 f0       	push   $0xf013b394
f011bdbd:	68 90 02 00 00       	push   $0x290
f011bdc2:	68 7a b3 13 f0       	push   $0xf013b37a
f011bdc7:	e8 39 44 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=  ((5*Mega)/PAGE_SIZE)) panic("Wrong allocation: ");
f011bdcc:	e8 cc 0d ff ff       	call   f010cb9d <sys_calculate_free_frames>
f011bdd1:	8b 55 dc             	mov    -0x24(%ebp),%edx
f011bdd4:	29 c2                	sub    %eax,%edx
f011bdd6:	89 d0                	mov    %edx,%eax
f011bdd8:	3d 00 05 00 00       	cmp    $0x500,%eax
f011bddd:	74 17                	je     f011bdf6 <test_kmalloc_bestfit2+0xb6c>
f011bddf:	83 ec 04             	sub    $0x4,%esp
f011bde2:	68 c4 b7 13 f0       	push   $0xf013b7c4
f011bde7:	68 91 02 00 00       	push   $0x291
f011bdec:	68 7a b3 13 f0       	push   $0xf013b37a
f011bdf1:	e8 0f 44 fe ff       	call   f0100205 <_panic>

		//2 MB + 8 KB Hole
		freeFrames = sys_calculate_free_frames() ;
f011bdf6:	e8 a2 0d ff ff       	call   f010cb9d <sys_calculate_free_frames>
f011bdfb:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011bdfe:	e8 c5 7f fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011be03:	89 45 d8             	mov    %eax,-0x28(%ebp)
		kfree(ptr_allocations[6]);
f011be06:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f011be0c:	83 ec 0c             	sub    $0xc,%esp
f011be0f:	50                   	push   %eax
f011be10:	e8 3b bb fe ff       	call   f0107950 <kfree>
f011be15:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011be18:	e8 ab 7f fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011be1d:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011be20:	74 17                	je     f011be39 <test_kmalloc_bestfit2+0xbaf>
f011be22:	83 ec 04             	sub    $0x4,%esp
f011be25:	68 94 b3 13 f0       	push   $0xf013b394
f011be2a:	68 97 02 00 00       	push   $0x297
f011be2f:	68 7a b3 13 f0       	push   $0xf013b37a
f011be34:	e8 cc 43 fe ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) !=  514) panic("Wrong free: Extra or less pages are removed from main memory");
f011be39:	e8 5f 0d ff ff       	call   f010cb9d <sys_calculate_free_frames>
f011be3e:	2b 45 dc             	sub    -0x24(%ebp),%eax
f011be41:	3d 02 02 00 00       	cmp    $0x202,%eax
f011be46:	74 17                	je     f011be5f <test_kmalloc_bestfit2+0xbd5>
f011be48:	83 ec 04             	sub    $0x4,%esp
f011be4b:	68 48 b6 13 f0       	push   $0xf013b648
f011be50:	68 98 02 00 00       	push   $0x298
f011be55:	68 7a b3 13 f0       	push   $0xf013b37a
f011be5a:	e8 a6 43 fe ff       	call   f0100205 <_panic>

		//2 MB Hole
		freeFrames = sys_calculate_free_frames() ;
f011be5f:	e8 39 0d ff ff       	call   f010cb9d <sys_calculate_free_frames>
f011be64:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011be67:	e8 5c 7f fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011be6c:	89 45 d8             	mov    %eax,-0x28(%ebp)
		kfree(ptr_allocations[1]);
f011be6f:	8b 85 54 fe ff ff    	mov    -0x1ac(%ebp),%eax
f011be75:	83 ec 0c             	sub    $0xc,%esp
f011be78:	50                   	push   %eax
f011be79:	e8 d2 ba fe ff       	call   f0107950 <kfree>
f011be7e:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011be81:	e8 42 7f fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011be86:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011be89:	74 17                	je     f011bea2 <test_kmalloc_bestfit2+0xc18>
f011be8b:	83 ec 04             	sub    $0x4,%esp
f011be8e:	68 94 b3 13 f0       	push   $0xf013b394
f011be93:	68 9e 02 00 00       	push   $0x29e
f011be98:	68 7a b3 13 f0       	push   $0xf013b37a
f011be9d:	e8 63 43 fe ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) !=  512) panic("Wrong free: Extra or less pages are removed from main memory.");
f011bea2:	e8 f6 0c ff ff       	call   f010cb9d <sys_calculate_free_frames>
f011bea7:	2b 45 dc             	sub    -0x24(%ebp),%eax
f011beaa:	3d 00 02 00 00       	cmp    $0x200,%eax
f011beaf:	74 17                	je     f011bec8 <test_kmalloc_bestfit2+0xc3e>
f011beb1:	83 ec 04             	sub    $0x4,%esp
f011beb4:	68 74 b8 13 f0       	push   $0xf013b874
f011beb9:	68 9f 02 00 00       	push   $0x29f
f011bebe:	68 7a b3 13 f0       	push   $0xf013b37a
f011bec3:	e8 3d 43 fe ff       	call   f0100205 <_panic>

		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f011bec8:	e8 d0 0c ff ff       	call   f010cb9d <sys_calculate_free_frames>
f011becd:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011bed0:	e8 f3 7e fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011bed5:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[8] = kmalloc(2*Mega-kilo);
f011bed8:	83 ec 0c             	sub    $0xc,%esp
f011bedb:	68 00 fc 1f 00       	push   $0x1ffc00
f011bee0:	e8 a0 b9 fe ff       	call   f0107885 <kmalloc>
f011bee5:	83 c4 10             	add    $0x10,%esp
f011bee8:	89 85 70 fe ff ff    	mov    %eax,-0x190(%ebp)
		if ((uint32) ptr_allocations[8] != (ACTUAL_START + 7*Mega + 16*kilo)) panic("Wrong start address for the allocated space... ");
f011beee:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f011bef4:	89 c1                	mov    %eax,%ecx
f011bef6:	c7 85 14 ff ff ff 00 	movl   $0x1000,-0xec(%ebp)
f011befd:	10 00 00 
f011bf00:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f011bf06:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011bf0b:	89 85 10 ff ff ff    	mov    %eax,-0xf0(%ebp)
f011bf11:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f011bf17:	ba 00 00 00 00       	mov    $0x0,%edx
f011bf1c:	f7 b5 14 ff ff ff    	divl   -0xec(%ebp)
f011bf22:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f011bf28:	29 d0                	sub    %edx,%eax
f011bf2a:	89 c3                	mov    %eax,%ebx
f011bf2c:	c7 85 0c ff ff ff 00 	movl   $0x1000,-0xf4(%ebp)
f011bf33:	10 00 00 
f011bf36:	a0 40 26 78 f0       	mov    0xf0782640,%al
f011bf3b:	0f b6 d0             	movzbl %al,%edx
f011bf3e:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f011bf44:	01 d0                	add    %edx,%eax
f011bf46:	48                   	dec    %eax
f011bf47:	89 85 08 ff ff ff    	mov    %eax,-0xf8(%ebp)
f011bf4d:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f011bf53:	ba 00 00 00 00       	mov    $0x0,%edx
f011bf58:	f7 b5 0c ff ff ff    	divl   -0xf4(%ebp)
f011bf5e:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f011bf64:	29 d0                	sub    %edx,%eax
f011bf66:	01 c3                	add    %eax,%ebx
f011bf68:	c7 85 04 ff ff ff 00 	movl   $0x1000,-0xfc(%ebp)
f011bf6f:	10 00 00 
f011bf72:	a0 40 26 78 f0       	mov    0xf0782640,%al
f011bf77:	0f b6 c0             	movzbl %al,%eax
f011bf7a:	c1 e0 04             	shl    $0x4,%eax
f011bf7d:	89 c2                	mov    %eax,%edx
f011bf7f:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f011bf85:	01 d0                	add    %edx,%eax
f011bf87:	48                   	dec    %eax
f011bf88:	89 85 00 ff ff ff    	mov    %eax,-0x100(%ebp)
f011bf8e:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f011bf94:	ba 00 00 00 00       	mov    $0x0,%edx
f011bf99:	f7 b5 04 ff ff ff    	divl   -0xfc(%ebp)
f011bf9f:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f011bfa5:	29 d0                	sub    %edx,%eax
f011bfa7:	01 d8                	add    %ebx,%eax
f011bfa9:	2d 00 80 8f 09       	sub    $0x98f8000,%eax
f011bfae:	39 c1                	cmp    %eax,%ecx
f011bfb0:	74 17                	je     f011bfc9 <test_kmalloc_bestfit2+0xd3f>
f011bfb2:	83 ec 04             	sub    $0x4,%esp
f011bfb5:	68 94 b7 13 f0       	push   $0xf013b794
f011bfba:	68 a5 02 00 00       	push   $0x2a5
f011bfbf:	68 7a b3 13 f0       	push   $0xf013b37a
f011bfc4:	e8 3c 42 fe ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011bfc9:	e8 fa 7d fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011bfce:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011bfd1:	74 17                	je     f011bfea <test_kmalloc_bestfit2+0xd60>
f011bfd3:	83 ec 04             	sub    $0x4,%esp
f011bfd6:	68 94 b3 13 f0       	push   $0xf013b394
f011bfdb:	68 a6 02 00 00       	push   $0x2a6
f011bfe0:	68 7a b3 13 f0       	push   $0xf013b37a
f011bfe5:	e8 1b 42 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=  512) panic("Wrong allocation:");
f011bfea:	e8 ae 0b ff ff       	call   f010cb9d <sys_calculate_free_frames>
f011bfef:	8b 55 dc             	mov    -0x24(%ebp),%edx
f011bff2:	29 c2                	sub    %eax,%edx
f011bff4:	89 d0                	mov    %edx,%eax
f011bff6:	3d 00 02 00 00       	cmp    $0x200,%eax
f011bffb:	74 17                	je     f011c014 <test_kmalloc_bestfit2+0xd8a>
f011bffd:	83 ec 04             	sub    $0x4,%esp
f011c000:	68 b2 b8 13 f0       	push   $0xf013b8b2
f011c005:	68 a7 02 00 00       	push   $0x2a7
f011c00a:	68 7a b3 13 f0       	push   $0xf013b37a
f011c00f:	e8 f1 41 fe ff       	call   f0100205 <_panic>

		//6 KB
		freeFrames = sys_calculate_free_frames() ;
f011c014:	e8 84 0b ff ff       	call   f010cb9d <sys_calculate_free_frames>
f011c019:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011c01c:	e8 a7 7d fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011c021:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[9] = kmalloc(6*kilo);
f011c024:	83 ec 0c             	sub    $0xc,%esp
f011c027:	68 00 18 00 00       	push   $0x1800
f011c02c:	e8 54 b8 fe ff       	call   f0107885 <kmalloc>
f011c031:	83 c4 10             	add    $0x10,%esp
f011c034:	89 85 74 fe ff ff    	mov    %eax,-0x18c(%ebp)
		if ((uint32) ptr_allocations[9] != (ACTUAL_START + 9*Mega + 16*kilo)) panic("Wrong start address for the allocated space... ");
f011c03a:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f011c040:	89 c1                	mov    %eax,%ecx
f011c042:	c7 85 fc fe ff ff 00 	movl   $0x1000,-0x104(%ebp)
f011c049:	10 00 00 
f011c04c:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f011c052:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011c057:	89 85 f8 fe ff ff    	mov    %eax,-0x108(%ebp)
f011c05d:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f011c063:	ba 00 00 00 00       	mov    $0x0,%edx
f011c068:	f7 b5 fc fe ff ff    	divl   -0x104(%ebp)
f011c06e:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f011c074:	29 d0                	sub    %edx,%eax
f011c076:	89 c3                	mov    %eax,%ebx
f011c078:	c7 85 f4 fe ff ff 00 	movl   $0x1000,-0x10c(%ebp)
f011c07f:	10 00 00 
f011c082:	a0 40 26 78 f0       	mov    0xf0782640,%al
f011c087:	0f b6 d0             	movzbl %al,%edx
f011c08a:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f011c090:	01 d0                	add    %edx,%eax
f011c092:	48                   	dec    %eax
f011c093:	89 85 f0 fe ff ff    	mov    %eax,-0x110(%ebp)
f011c099:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f011c09f:	ba 00 00 00 00       	mov    $0x0,%edx
f011c0a4:	f7 b5 f4 fe ff ff    	divl   -0x10c(%ebp)
f011c0aa:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f011c0b0:	29 d0                	sub    %edx,%eax
f011c0b2:	01 c3                	add    %eax,%ebx
f011c0b4:	c7 85 ec fe ff ff 00 	movl   $0x1000,-0x114(%ebp)
f011c0bb:	10 00 00 
f011c0be:	a0 40 26 78 f0       	mov    0xf0782640,%al
f011c0c3:	0f b6 c0             	movzbl %al,%eax
f011c0c6:	c1 e0 04             	shl    $0x4,%eax
f011c0c9:	89 c2                	mov    %eax,%edx
f011c0cb:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f011c0d1:	01 d0                	add    %edx,%eax
f011c0d3:	48                   	dec    %eax
f011c0d4:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)
f011c0da:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f011c0e0:	ba 00 00 00 00       	mov    $0x0,%edx
f011c0e5:	f7 b5 ec fe ff ff    	divl   -0x114(%ebp)
f011c0eb:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f011c0f1:	29 d0                	sub    %edx,%eax
f011c0f3:	01 d8                	add    %ebx,%eax
f011c0f5:	2d 00 80 6f 09       	sub    $0x96f8000,%eax
f011c0fa:	39 c1                	cmp    %eax,%ecx
f011c0fc:	74 17                	je     f011c115 <test_kmalloc_bestfit2+0xe8b>
f011c0fe:	83 ec 04             	sub    $0x4,%esp
f011c101:	68 94 b7 13 f0       	push   $0xf013b794
f011c106:	68 ad 02 00 00       	push   $0x2ad
f011c10b:	68 7a b3 13 f0       	push   $0xf013b37a
f011c110:	e8 f0 40 fe ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011c115:	e8 ae 7c fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011c11a:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011c11d:	74 17                	je     f011c136 <test_kmalloc_bestfit2+0xeac>
f011c11f:	83 ec 04             	sub    $0x4,%esp
f011c122:	68 94 b3 13 f0       	push   $0xf013b394
f011c127:	68 ae 02 00 00       	push   $0x2ae
f011c12c:	68 7a b3 13 f0       	push   $0xf013b37a
f011c131:	e8 cf 40 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=  2) panic("Wrong allocation:");
f011c136:	e8 62 0a ff ff       	call   f010cb9d <sys_calculate_free_frames>
f011c13b:	8b 55 dc             	mov    -0x24(%ebp),%edx
f011c13e:	29 c2                	sub    %eax,%edx
f011c140:	89 d0                	mov    %edx,%eax
f011c142:	83 f8 02             	cmp    $0x2,%eax
f011c145:	74 17                	je     f011c15e <test_kmalloc_bestfit2+0xed4>
f011c147:	83 ec 04             	sub    $0x4,%esp
f011c14a:	68 b2 b8 13 f0       	push   $0xf013b8b2
f011c14f:	68 af 02 00 00       	push   $0x2af
f011c154:	68 7a b3 13 f0       	push   $0xf013b37a
f011c159:	e8 a7 40 fe ff       	call   f0100205 <_panic>

		//3 MB Hole
		freeFrames = sys_calculate_free_frames() ;
f011c15e:	e8 3a 0a ff ff       	call   f010cb9d <sys_calculate_free_frames>
f011c163:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011c166:	e8 5d 7c fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011c16b:	89 45 d8             	mov    %eax,-0x28(%ebp)
		kfree(ptr_allocations[5]);
f011c16e:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f011c174:	83 ec 0c             	sub    $0xc,%esp
f011c177:	50                   	push   %eax
f011c178:	e8 d3 b7 fe ff       	call   f0107950 <kfree>
f011c17d:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011c180:	e8 43 7c fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011c185:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011c188:	74 17                	je     f011c1a1 <test_kmalloc_bestfit2+0xf17>
f011c18a:	83 ec 04             	sub    $0x4,%esp
f011c18d:	68 94 b3 13 f0       	push   $0xf013b394
f011c192:	68 b5 02 00 00       	push   $0x2b5
f011c197:	68 7a b3 13 f0       	push   $0xf013b37a
f011c19c:	e8 64 40 fe ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) !=  768) panic("Wrong free: Extra or less pages are removed from main memory.");
f011c1a1:	e8 f7 09 ff ff       	call   f010cb9d <sys_calculate_free_frames>
f011c1a6:	2b 45 dc             	sub    -0x24(%ebp),%eax
f011c1a9:	3d 00 03 00 00       	cmp    $0x300,%eax
f011c1ae:	74 17                	je     f011c1c7 <test_kmalloc_bestfit2+0xf3d>
f011c1b0:	83 ec 04             	sub    $0x4,%esp
f011c1b3:	68 74 b8 13 f0       	push   $0xf013b874
f011c1b8:	68 b6 02 00 00       	push   $0x2b6
f011c1bd:	68 7a b3 13 f0       	push   $0xf013b37a
f011c1c2:	e8 3e 40 fe ff       	call   f0100205 <_panic>

		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f011c1c7:	e8 d1 09 ff ff       	call   f010cb9d <sys_calculate_free_frames>
f011c1cc:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011c1cf:	e8 f4 7b fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011c1d4:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[10] = kmalloc(3*Mega-kilo);
f011c1d7:	83 ec 0c             	sub    $0xc,%esp
f011c1da:	68 00 fc 2f 00       	push   $0x2ffc00
f011c1df:	e8 a1 b6 fe ff       	call   f0107885 <kmalloc>
f011c1e4:	83 c4 10             	add    $0x10,%esp
f011c1e7:	89 85 78 fe ff ff    	mov    %eax,-0x188(%ebp)
		if ((uint32) ptr_allocations[10] != (ACTUAL_START + 4*Mega + 16*kilo)) panic("Wrong start address for the allocated space... ");
f011c1ed:	8b 85 78 fe ff ff    	mov    -0x188(%ebp),%eax
f011c1f3:	89 c1                	mov    %eax,%ecx
f011c1f5:	c7 85 e4 fe ff ff 00 	movl   $0x1000,-0x11c(%ebp)
f011c1fc:	10 00 00 
f011c1ff:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f011c205:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011c20a:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
f011c210:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f011c216:	ba 00 00 00 00       	mov    $0x0,%edx
f011c21b:	f7 b5 e4 fe ff ff    	divl   -0x11c(%ebp)
f011c221:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f011c227:	29 d0                	sub    %edx,%eax
f011c229:	89 c3                	mov    %eax,%ebx
f011c22b:	c7 85 dc fe ff ff 00 	movl   $0x1000,-0x124(%ebp)
f011c232:	10 00 00 
f011c235:	a0 40 26 78 f0       	mov    0xf0782640,%al
f011c23a:	0f b6 d0             	movzbl %al,%edx
f011c23d:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f011c243:	01 d0                	add    %edx,%eax
f011c245:	48                   	dec    %eax
f011c246:	89 85 d8 fe ff ff    	mov    %eax,-0x128(%ebp)
f011c24c:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f011c252:	ba 00 00 00 00       	mov    $0x0,%edx
f011c257:	f7 b5 dc fe ff ff    	divl   -0x124(%ebp)
f011c25d:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f011c263:	29 d0                	sub    %edx,%eax
f011c265:	01 c3                	add    %eax,%ebx
f011c267:	c7 85 d4 fe ff ff 00 	movl   $0x1000,-0x12c(%ebp)
f011c26e:	10 00 00 
f011c271:	a0 40 26 78 f0       	mov    0xf0782640,%al
f011c276:	0f b6 c0             	movzbl %al,%eax
f011c279:	c1 e0 04             	shl    $0x4,%eax
f011c27c:	89 c2                	mov    %eax,%edx
f011c27e:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f011c284:	01 d0                	add    %edx,%eax
f011c286:	48                   	dec    %eax
f011c287:	89 85 d0 fe ff ff    	mov    %eax,-0x130(%ebp)
f011c28d:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f011c293:	ba 00 00 00 00       	mov    $0x0,%edx
f011c298:	f7 b5 d4 fe ff ff    	divl   -0x12c(%ebp)
f011c29e:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f011c2a4:	29 d0                	sub    %edx,%eax
f011c2a6:	01 d8                	add    %ebx,%eax
f011c2a8:	2d 00 80 bf 09       	sub    $0x9bf8000,%eax
f011c2ad:	39 c1                	cmp    %eax,%ecx
f011c2af:	74 17                	je     f011c2c8 <test_kmalloc_bestfit2+0x103e>
f011c2b1:	83 ec 04             	sub    $0x4,%esp
f011c2b4:	68 94 b7 13 f0       	push   $0xf013b794
f011c2b9:	68 bc 02 00 00       	push   $0x2bc
f011c2be:	68 7a b3 13 f0       	push   $0xf013b37a
f011c2c3:	e8 3d 3f fe ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011c2c8:	e8 fb 7a fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011c2cd:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011c2d0:	74 17                	je     f011c2e9 <test_kmalloc_bestfit2+0x105f>
f011c2d2:	83 ec 04             	sub    $0x4,%esp
f011c2d5:	68 94 b3 13 f0       	push   $0xf013b394
f011c2da:	68 bd 02 00 00       	push   $0x2bd
f011c2df:	68 7a b3 13 f0       	push   $0xf013b37a
f011c2e4:	e8 1c 3f fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=  ((3*Mega)/4096)) panic("Wrong free: Extra or less pages are removed from main memory.");
f011c2e9:	e8 af 08 ff ff       	call   f010cb9d <sys_calculate_free_frames>
f011c2ee:	8b 55 dc             	mov    -0x24(%ebp),%edx
f011c2f1:	29 c2                	sub    %eax,%edx
f011c2f3:	89 d0                	mov    %edx,%eax
f011c2f5:	3d 00 03 00 00       	cmp    $0x300,%eax
f011c2fa:	74 17                	je     f011c313 <test_kmalloc_bestfit2+0x1089>
f011c2fc:	83 ec 04             	sub    $0x4,%esp
f011c2ff:	68 74 b8 13 f0       	push   $0xf013b874
f011c304:	68 be 02 00 00       	push   $0x2be
f011c309:	68 7a b3 13 f0       	push   $0xf013b37a
f011c30e:	e8 f2 3e fe ff       	call   f0100205 <_panic>

		//4 MB
		freeFrames = sys_calculate_free_frames() ;
f011c313:	e8 85 08 ff ff       	call   f010cb9d <sys_calculate_free_frames>
f011c318:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011c31b:	e8 a8 7a fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011c320:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[11] = kmalloc(4*Mega-kilo);
f011c323:	83 ec 0c             	sub    $0xc,%esp
f011c326:	68 00 fc 3f 00       	push   $0x3ffc00
f011c32b:	e8 55 b5 fe ff       	call   f0107885 <kmalloc>
f011c330:	83 c4 10             	add    $0x10,%esp
f011c333:	89 85 7c fe ff ff    	mov    %eax,-0x184(%ebp)
		if ((uint32) ptr_allocations[11] != (ACTUAL_START)) panic("Wrong start address for the allocated space... ");
f011c339:	8b 85 7c fe ff ff    	mov    -0x184(%ebp),%eax
f011c33f:	89 c1                	mov    %eax,%ecx
f011c341:	c7 85 cc fe ff ff 00 	movl   $0x1000,-0x134(%ebp)
f011c348:	10 00 00 
f011c34b:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f011c351:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011c356:	89 85 c8 fe ff ff    	mov    %eax,-0x138(%ebp)
f011c35c:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f011c362:	ba 00 00 00 00       	mov    $0x0,%edx
f011c367:	f7 b5 cc fe ff ff    	divl   -0x134(%ebp)
f011c36d:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f011c373:	29 d0                	sub    %edx,%eax
f011c375:	89 c3                	mov    %eax,%ebx
f011c377:	c7 85 c4 fe ff ff 00 	movl   $0x1000,-0x13c(%ebp)
f011c37e:	10 00 00 
f011c381:	a0 40 26 78 f0       	mov    0xf0782640,%al
f011c386:	0f b6 d0             	movzbl %al,%edx
f011c389:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f011c38f:	01 d0                	add    %edx,%eax
f011c391:	48                   	dec    %eax
f011c392:	89 85 c0 fe ff ff    	mov    %eax,-0x140(%ebp)
f011c398:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f011c39e:	ba 00 00 00 00       	mov    $0x0,%edx
f011c3a3:	f7 b5 c4 fe ff ff    	divl   -0x13c(%ebp)
f011c3a9:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f011c3af:	29 d0                	sub    %edx,%eax
f011c3b1:	01 c3                	add    %eax,%ebx
f011c3b3:	c7 85 bc fe ff ff 00 	movl   $0x1000,-0x144(%ebp)
f011c3ba:	10 00 00 
f011c3bd:	a0 40 26 78 f0       	mov    0xf0782640,%al
f011c3c2:	0f b6 c0             	movzbl %al,%eax
f011c3c5:	c1 e0 04             	shl    $0x4,%eax
f011c3c8:	89 c2                	mov    %eax,%edx
f011c3ca:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f011c3d0:	01 d0                	add    %edx,%eax
f011c3d2:	48                   	dec    %eax
f011c3d3:	89 85 b8 fe ff ff    	mov    %eax,-0x148(%ebp)
f011c3d9:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f011c3df:	ba 00 00 00 00       	mov    $0x0,%edx
f011c3e4:	f7 b5 bc fe ff ff    	divl   -0x144(%ebp)
f011c3ea:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f011c3f0:	29 d0                	sub    %edx,%eax
f011c3f2:	01 d8                	add    %ebx,%eax
f011c3f4:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f011c3f9:	39 c1                	cmp    %eax,%ecx
f011c3fb:	74 17                	je     f011c414 <test_kmalloc_bestfit2+0x118a>
f011c3fd:	83 ec 04             	sub    $0x4,%esp
f011c400:	68 94 b7 13 f0       	push   $0xf013b794
f011c405:	68 c4 02 00 00       	push   $0x2c4
f011c40a:	68 7a b3 13 f0       	push   $0xf013b37a
f011c40f:	e8 f1 3d fe ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011c414:	e8 af 79 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011c419:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011c41c:	74 17                	je     f011c435 <test_kmalloc_bestfit2+0x11ab>
f011c41e:	83 ec 04             	sub    $0x4,%esp
f011c421:	68 94 b3 13 f0       	push   $0xf013b394
f011c426:	68 c5 02 00 00       	push   $0x2c5
f011c42b:	68 7a b3 13 f0       	push   $0xf013b37a
f011c430:	e8 d0 3d fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != ((4*Mega)/4096)) panic("Wrong free: Extra or less pages are removed from main memory.");
f011c435:	e8 63 07 ff ff       	call   f010cb9d <sys_calculate_free_frames>
f011c43a:	8b 55 dc             	mov    -0x24(%ebp),%edx
f011c43d:	29 c2                	sub    %eax,%edx
f011c43f:	89 d0                	mov    %edx,%eax
f011c441:	3d 00 04 00 00       	cmp    $0x400,%eax
f011c446:	74 17                	je     f011c45f <test_kmalloc_bestfit2+0x11d5>
f011c448:	83 ec 04             	sub    $0x4,%esp
f011c44b:	68 74 b8 13 f0       	push   $0xf013b874
f011c450:	68 c6 02 00 00       	push   $0x2c6
f011c455:	68 7a b3 13 f0       	push   $0xf013b37a
f011c45a:	e8 a6 3d fe ff       	call   f0100205 <_panic>
	}

	//	b) Attempt to allocate large segment with no suitable fragment to fit on
	{
		//Large Allocation
		ptr_allocations[12] = kmalloc((KERNEL_HEAP_MAX - ACTUAL_START - 14*Mega));
f011c45f:	c7 85 b4 fe ff ff 00 	movl   $0x1000,-0x14c(%ebp)
f011c466:	10 00 00 
f011c469:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f011c46f:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011c474:	89 85 b0 fe ff ff    	mov    %eax,-0x150(%ebp)
f011c47a:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f011c480:	ba 00 00 00 00       	mov    $0x0,%edx
f011c485:	f7 b5 b4 fe ff ff    	divl   -0x14c(%ebp)
f011c48b:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f011c491:	29 d0                	sub    %edx,%eax
f011c493:	89 c1                	mov    %eax,%ecx
f011c495:	c7 85 ac fe ff ff 00 	movl   $0x1000,-0x154(%ebp)
f011c49c:	10 00 00 
f011c49f:	a0 40 26 78 f0       	mov    0xf0782640,%al
f011c4a4:	0f b6 d0             	movzbl %al,%edx
f011c4a7:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f011c4ad:	01 d0                	add    %edx,%eax
f011c4af:	48                   	dec    %eax
f011c4b0:	89 85 a8 fe ff ff    	mov    %eax,-0x158(%ebp)
f011c4b6:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f011c4bc:	ba 00 00 00 00       	mov    $0x0,%edx
f011c4c1:	f7 b5 ac fe ff ff    	divl   -0x154(%ebp)
f011c4c7:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f011c4cd:	29 d0                	sub    %edx,%eax
f011c4cf:	01 c1                	add    %eax,%ecx
f011c4d1:	c7 85 a4 fe ff ff 00 	movl   $0x1000,-0x15c(%ebp)
f011c4d8:	10 00 00 
f011c4db:	a0 40 26 78 f0       	mov    0xf0782640,%al
f011c4e0:	0f b6 c0             	movzbl %al,%eax
f011c4e3:	c1 e0 04             	shl    $0x4,%eax
f011c4e6:	89 c2                	mov    %eax,%edx
f011c4e8:	8b 85 a4 fe ff ff    	mov    -0x15c(%ebp),%eax
f011c4ee:	01 d0                	add    %edx,%eax
f011c4f0:	48                   	dec    %eax
f011c4f1:	89 85 a0 fe ff ff    	mov    %eax,-0x160(%ebp)
f011c4f7:	8b 85 a0 fe ff ff    	mov    -0x160(%ebp),%eax
f011c4fd:	ba 00 00 00 00       	mov    $0x0,%edx
f011c502:	f7 b5 a4 fe ff ff    	divl   -0x15c(%ebp)
f011c508:	8b 85 a0 fe ff ff    	mov    -0x160(%ebp),%eax
f011c50e:	29 d0                	sub    %edx,%eax
f011c510:	01 c8                	add    %ecx,%eax
f011c512:	ba 00 b0 1f 09       	mov    $0x91fb000,%edx
f011c517:	29 c2                	sub    %eax,%edx
f011c519:	89 d0                	mov    %edx,%eax
f011c51b:	83 ec 0c             	sub    $0xc,%esp
f011c51e:	50                   	push   %eax
f011c51f:	e8 61 b3 fe ff       	call   f0107885 <kmalloc>
f011c524:	83 c4 10             	add    $0x10,%esp
f011c527:	89 85 80 fe ff ff    	mov    %eax,-0x180(%ebp)
		if (ptr_allocations[12] != NULL) panic("Kmalloc: Attempt to allocate large segment with no suitable fragment to fit on, should return NULL");
f011c52d:	8b 85 80 fe ff ff    	mov    -0x180(%ebp),%eax
f011c533:	85 c0                	test   %eax,%eax
f011c535:	74 17                	je     f011c54e <test_kmalloc_bestfit2+0x12c4>
f011c537:	83 ec 04             	sub    $0x4,%esp
f011c53a:	68 c4 b8 13 f0       	push   $0xf013b8c4
f011c53f:	68 ce 02 00 00       	push   $0x2ce
f011c544:	68 7a b3 13 f0       	push   $0xf013b37a
f011c549:	e8 b7 3c fe ff       	call   f0100205 <_panic>

		cprintf("Congratulations!! test BEST FIT allocation (2) completed successfully.\n");
f011c54e:	83 ec 0c             	sub    $0xc,%esp
f011c551:	68 28 b9 13 f0       	push   $0xf013b928
f011c556:	e8 b3 47 fe ff       	call   f0100d0e <cprintf>
f011c55b:	83 c4 10             	add    $0x10,%esp
	}
	return 1;
f011c55e:	b8 01 00 00 00       	mov    $0x1,%eax

}
f011c563:	8d 65 f8             	lea    -0x8(%ebp),%esp
f011c566:	5b                   	pop    %ebx
f011c567:	5f                   	pop    %edi
f011c568:	5d                   	pop    %ebp
f011c569:	c3                   	ret    

f011c56a <test_kmalloc_firstfit1>:

int test_kmalloc_firstfit1()
{
f011c56a:	55                   	push   %ebp
f011c56b:	89 e5                	mov    %esp,%ebp
f011c56d:	57                   	push   %edi
f011c56e:	53                   	push   %ebx
f011c56f:	81 ec b0 01 00 00    	sub    $0x1b0,%esp
	cprintf("==============================================\n");
f011c575:	83 ec 0c             	sub    $0xc,%esp
f011c578:	68 bc b2 13 f0       	push   $0xf013b2bc
f011c57d:	e8 8c 47 fe ff       	call   f0100d0e <cprintf>
f011c582:	83 c4 10             	add    $0x10,%esp
	cprintf("MAKE SURE to have a FRESH RUN for this test\n(i.e. don't run any program/test before it)\n");
f011c585:	83 ec 0c             	sub    $0xc,%esp
f011c588:	68 ec b2 13 f0       	push   $0xf013b2ec
f011c58d:	e8 7c 47 fe ff       	call   f0100d0e <cprintf>
f011c592:	83 c4 10             	add    $0x10,%esp
	cprintf("==============================================\n");
f011c595:	83 ec 0c             	sub    $0xc,%esp
f011c598:	68 bc b2 13 f0       	push   $0xf013b2bc
f011c59d:	e8 6c 47 fe ff       	call   f0100d0e <cprintf>
f011c5a2:	83 c4 10             	add    $0x10,%esp

	void* ptr_allocations[20] = {0};
f011c5a5:	8d 95 50 fe ff ff    	lea    -0x1b0(%ebp),%edx
f011c5ab:	b9 14 00 00 00       	mov    $0x14,%ecx
f011c5b0:	b8 00 00 00 00       	mov    $0x0,%eax
f011c5b5:	89 d7                	mov    %edx,%edi
f011c5b7:	f3 ab                	rep stos %eax,%es:(%edi)
	uint32 freeDiskFrames;

	//[1] Allocate all
	{
		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames() ;
f011c5b9:	e8 df 05 ff ff       	call   f010cb9d <sys_calculate_free_frames>
f011c5be:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011c5c1:	e8 02 78 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011c5c6:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[0] = kmalloc(1*Mega-kilo);
f011c5c9:	83 ec 0c             	sub    $0xc,%esp
f011c5cc:	68 00 fc 0f 00       	push   $0xffc00
f011c5d1:	e8 af b2 fe ff       	call   f0107885 <kmalloc>
f011c5d6:	83 c4 10             	add    $0x10,%esp
f011c5d9:	89 85 50 fe ff ff    	mov    %eax,-0x1b0(%ebp)
		if ((uint32) ptr_allocations[0] != (ACTUAL_START)) panic("Wrong start address for the allocated space... ");
f011c5df:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f011c5e5:	89 c1                	mov    %eax,%ecx
f011c5e7:	c7 45 ec 00 10 00 00 	movl   $0x1000,-0x14(%ebp)
f011c5ee:	8b 45 ec             	mov    -0x14(%ebp),%eax
f011c5f1:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011c5f6:	89 45 e8             	mov    %eax,-0x18(%ebp)
f011c5f9:	8b 45 e8             	mov    -0x18(%ebp),%eax
f011c5fc:	ba 00 00 00 00       	mov    $0x0,%edx
f011c601:	f7 75 ec             	divl   -0x14(%ebp)
f011c604:	8b 45 e8             	mov    -0x18(%ebp),%eax
f011c607:	29 d0                	sub    %edx,%eax
f011c609:	89 c3                	mov    %eax,%ebx
f011c60b:	c7 45 e4 00 10 00 00 	movl   $0x1000,-0x1c(%ebp)
f011c612:	a0 40 26 78 f0       	mov    0xf0782640,%al
f011c617:	0f b6 d0             	movzbl %al,%edx
f011c61a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f011c61d:	01 d0                	add    %edx,%eax
f011c61f:	48                   	dec    %eax
f011c620:	89 45 e0             	mov    %eax,-0x20(%ebp)
f011c623:	8b 45 e0             	mov    -0x20(%ebp),%eax
f011c626:	ba 00 00 00 00       	mov    $0x0,%edx
f011c62b:	f7 75 e4             	divl   -0x1c(%ebp)
f011c62e:	8b 45 e0             	mov    -0x20(%ebp),%eax
f011c631:	29 d0                	sub    %edx,%eax
f011c633:	01 c3                	add    %eax,%ebx
f011c635:	c7 45 dc 00 10 00 00 	movl   $0x1000,-0x24(%ebp)
f011c63c:	a0 40 26 78 f0       	mov    0xf0782640,%al
f011c641:	0f b6 c0             	movzbl %al,%eax
f011c644:	c1 e0 04             	shl    $0x4,%eax
f011c647:	89 c2                	mov    %eax,%edx
f011c649:	8b 45 dc             	mov    -0x24(%ebp),%eax
f011c64c:	01 d0                	add    %edx,%eax
f011c64e:	48                   	dec    %eax
f011c64f:	89 45 d8             	mov    %eax,-0x28(%ebp)
f011c652:	8b 45 d8             	mov    -0x28(%ebp),%eax
f011c655:	ba 00 00 00 00       	mov    $0x0,%edx
f011c65a:	f7 75 dc             	divl   -0x24(%ebp)
f011c65d:	8b 45 d8             	mov    -0x28(%ebp),%eax
f011c660:	29 d0                	sub    %edx,%eax
f011c662:	01 d8                	add    %ebx,%eax
f011c664:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f011c669:	39 c1                	cmp    %eax,%ecx
f011c66b:	74 17                	je     f011c684 <test_kmalloc_firstfit1+0x11a>
f011c66d:	83 ec 04             	sub    $0x4,%esp
f011c670:	68 94 b7 13 f0       	push   $0xf013b794
f011c675:	68 e6 02 00 00       	push   $0x2e6
f011c67a:	68 7a b3 13 f0       	push   $0xf013b37a
f011c67f:	e8 81 3b fe ff       	call   f0100205 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011c684:	e8 3f 77 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011c689:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011c68c:	74 17                	je     f011c6a5 <test_kmalloc_firstfit1+0x13b>
f011c68e:	83 ec 04             	sub    $0x4,%esp
f011c691:	68 94 b3 13 f0       	push   $0xf013b394
f011c696:	68 e7 02 00 00       	push   $0x2e7
f011c69b:	68 7a b3 13 f0       	push   $0xf013b37a
f011c6a0:	e8 60 3b fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: ");
f011c6a5:	e8 f3 04 ff ff       	call   f010cb9d <sys_calculate_free_frames>
f011c6aa:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011c6ad:	29 c2                	sub    %eax,%edx
f011c6af:	89 d0                	mov    %edx,%eax
f011c6b1:	3d 00 01 00 00       	cmp    $0x100,%eax
f011c6b6:	74 17                	je     f011c6cf <test_kmalloc_firstfit1+0x165>
f011c6b8:	83 ec 04             	sub    $0x4,%esp
f011c6bb:	68 c4 b7 13 f0       	push   $0xf013b7c4
f011c6c0:	68 e8 02 00 00       	push   $0x2e8
f011c6c5:	68 7a b3 13 f0       	push   $0xf013b37a
f011c6ca:	e8 36 3b fe ff       	call   f0100205 <_panic>

		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames() ;
f011c6cf:	e8 c9 04 ff ff       	call   f010cb9d <sys_calculate_free_frames>
f011c6d4:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011c6d7:	e8 ec 76 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011c6dc:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[1] = kmalloc(1*Mega-kilo);
f011c6df:	83 ec 0c             	sub    $0xc,%esp
f011c6e2:	68 00 fc 0f 00       	push   $0xffc00
f011c6e7:	e8 99 b1 fe ff       	call   f0107885 <kmalloc>
f011c6ec:	83 c4 10             	add    $0x10,%esp
f011c6ef:	89 85 54 fe ff ff    	mov    %eax,-0x1ac(%ebp)
		if ((uint32) ptr_allocations[1] != (ACTUAL_START + 1*Mega)) panic("Wrong start address for the allocated space... ");
f011c6f5:	8b 85 54 fe ff ff    	mov    -0x1ac(%ebp),%eax
f011c6fb:	89 c1                	mov    %eax,%ecx
f011c6fd:	c7 45 d4 00 10 00 00 	movl   $0x1000,-0x2c(%ebp)
f011c704:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f011c707:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011c70c:	89 45 d0             	mov    %eax,-0x30(%ebp)
f011c70f:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011c712:	ba 00 00 00 00       	mov    $0x0,%edx
f011c717:	f7 75 d4             	divl   -0x2c(%ebp)
f011c71a:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011c71d:	29 d0                	sub    %edx,%eax
f011c71f:	89 c3                	mov    %eax,%ebx
f011c721:	c7 45 cc 00 10 00 00 	movl   $0x1000,-0x34(%ebp)
f011c728:	a0 40 26 78 f0       	mov    0xf0782640,%al
f011c72d:	0f b6 d0             	movzbl %al,%edx
f011c730:	8b 45 cc             	mov    -0x34(%ebp),%eax
f011c733:	01 d0                	add    %edx,%eax
f011c735:	48                   	dec    %eax
f011c736:	89 45 c8             	mov    %eax,-0x38(%ebp)
f011c739:	8b 45 c8             	mov    -0x38(%ebp),%eax
f011c73c:	ba 00 00 00 00       	mov    $0x0,%edx
f011c741:	f7 75 cc             	divl   -0x34(%ebp)
f011c744:	8b 45 c8             	mov    -0x38(%ebp),%eax
f011c747:	29 d0                	sub    %edx,%eax
f011c749:	01 c3                	add    %eax,%ebx
f011c74b:	c7 45 c4 00 10 00 00 	movl   $0x1000,-0x3c(%ebp)
f011c752:	a0 40 26 78 f0       	mov    0xf0782640,%al
f011c757:	0f b6 c0             	movzbl %al,%eax
f011c75a:	c1 e0 04             	shl    $0x4,%eax
f011c75d:	89 c2                	mov    %eax,%edx
f011c75f:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f011c762:	01 d0                	add    %edx,%eax
f011c764:	48                   	dec    %eax
f011c765:	89 45 c0             	mov    %eax,-0x40(%ebp)
f011c768:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011c76b:	ba 00 00 00 00       	mov    $0x0,%edx
f011c770:	f7 75 c4             	divl   -0x3c(%ebp)
f011c773:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011c776:	29 d0                	sub    %edx,%eax
f011c778:	01 d8                	add    %ebx,%eax
f011c77a:	2d 00 c0 ef 09       	sub    $0x9efc000,%eax
f011c77f:	39 c1                	cmp    %eax,%ecx
f011c781:	74 17                	je     f011c79a <test_kmalloc_firstfit1+0x230>
f011c783:	83 ec 04             	sub    $0x4,%esp
f011c786:	68 94 b7 13 f0       	push   $0xf013b794
f011c78b:	68 ee 02 00 00       	push   $0x2ee
f011c790:	68 7a b3 13 f0       	push   $0xf013b37a
f011c795:	e8 6b 3a fe ff       	call   f0100205 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011c79a:	e8 29 76 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011c79f:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011c7a2:	74 17                	je     f011c7bb <test_kmalloc_firstfit1+0x251>
f011c7a4:	83 ec 04             	sub    $0x4,%esp
f011c7a7:	68 94 b3 13 f0       	push   $0xf013b394
f011c7ac:	68 ef 02 00 00       	push   $0x2ef
f011c7b1:	68 7a b3 13 f0       	push   $0xf013b37a
f011c7b6:	e8 4a 3a fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: ");
f011c7bb:	e8 dd 03 ff ff       	call   f010cb9d <sys_calculate_free_frames>
f011c7c0:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011c7c3:	29 c2                	sub    %eax,%edx
f011c7c5:	89 d0                	mov    %edx,%eax
f011c7c7:	3d 00 01 00 00       	cmp    $0x100,%eax
f011c7cc:	74 17                	je     f011c7e5 <test_kmalloc_firstfit1+0x27b>
f011c7ce:	83 ec 04             	sub    $0x4,%esp
f011c7d1:	68 c4 b7 13 f0       	push   $0xf013b7c4
f011c7d6:	68 f0 02 00 00       	push   $0x2f0
f011c7db:	68 7a b3 13 f0       	push   $0xf013b37a
f011c7e0:	e8 20 3a fe ff       	call   f0100205 <_panic>

		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames() ;
f011c7e5:	e8 b3 03 ff ff       	call   f010cb9d <sys_calculate_free_frames>
f011c7ea:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011c7ed:	e8 d6 75 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011c7f2:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[2] = kmalloc(1*Mega-kilo);
f011c7f5:	83 ec 0c             	sub    $0xc,%esp
f011c7f8:	68 00 fc 0f 00       	push   $0xffc00
f011c7fd:	e8 83 b0 fe ff       	call   f0107885 <kmalloc>
f011c802:	83 c4 10             	add    $0x10,%esp
f011c805:	89 85 58 fe ff ff    	mov    %eax,-0x1a8(%ebp)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 2*Mega)) panic("Wrong start address for the allocated space... ");
f011c80b:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f011c811:	89 c1                	mov    %eax,%ecx
f011c813:	c7 45 bc 00 10 00 00 	movl   $0x1000,-0x44(%ebp)
f011c81a:	8b 45 bc             	mov    -0x44(%ebp),%eax
f011c81d:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011c822:	89 45 b8             	mov    %eax,-0x48(%ebp)
f011c825:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011c828:	ba 00 00 00 00       	mov    $0x0,%edx
f011c82d:	f7 75 bc             	divl   -0x44(%ebp)
f011c830:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011c833:	29 d0                	sub    %edx,%eax
f011c835:	89 c3                	mov    %eax,%ebx
f011c837:	c7 45 b4 00 10 00 00 	movl   $0x1000,-0x4c(%ebp)
f011c83e:	a0 40 26 78 f0       	mov    0xf0782640,%al
f011c843:	0f b6 d0             	movzbl %al,%edx
f011c846:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f011c849:	01 d0                	add    %edx,%eax
f011c84b:	48                   	dec    %eax
f011c84c:	89 45 b0             	mov    %eax,-0x50(%ebp)
f011c84f:	8b 45 b0             	mov    -0x50(%ebp),%eax
f011c852:	ba 00 00 00 00       	mov    $0x0,%edx
f011c857:	f7 75 b4             	divl   -0x4c(%ebp)
f011c85a:	8b 45 b0             	mov    -0x50(%ebp),%eax
f011c85d:	29 d0                	sub    %edx,%eax
f011c85f:	01 c3                	add    %eax,%ebx
f011c861:	c7 45 ac 00 10 00 00 	movl   $0x1000,-0x54(%ebp)
f011c868:	a0 40 26 78 f0       	mov    0xf0782640,%al
f011c86d:	0f b6 c0             	movzbl %al,%eax
f011c870:	c1 e0 04             	shl    $0x4,%eax
f011c873:	89 c2                	mov    %eax,%edx
f011c875:	8b 45 ac             	mov    -0x54(%ebp),%eax
f011c878:	01 d0                	add    %edx,%eax
f011c87a:	48                   	dec    %eax
f011c87b:	89 45 a8             	mov    %eax,-0x58(%ebp)
f011c87e:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011c881:	ba 00 00 00 00       	mov    $0x0,%edx
f011c886:	f7 75 ac             	divl   -0x54(%ebp)
f011c889:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011c88c:	29 d0                	sub    %edx,%eax
f011c88e:	01 d8                	add    %ebx,%eax
f011c890:	2d 00 c0 df 09       	sub    $0x9dfc000,%eax
f011c895:	39 c1                	cmp    %eax,%ecx
f011c897:	74 17                	je     f011c8b0 <test_kmalloc_firstfit1+0x346>
f011c899:	83 ec 04             	sub    $0x4,%esp
f011c89c:	68 94 b7 13 f0       	push   $0xf013b794
f011c8a1:	68 f6 02 00 00       	push   $0x2f6
f011c8a6:	68 7a b3 13 f0       	push   $0xf013b37a
f011c8ab:	e8 55 39 fe ff       	call   f0100205 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011c8b0:	e8 13 75 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011c8b5:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011c8b8:	74 17                	je     f011c8d1 <test_kmalloc_firstfit1+0x367>
f011c8ba:	83 ec 04             	sub    $0x4,%esp
f011c8bd:	68 94 b3 13 f0       	push   $0xf013b394
f011c8c2:	68 f7 02 00 00       	push   $0x2f7
f011c8c7:	68 7a b3 13 f0       	push   $0xf013b37a
f011c8cc:	e8 34 39 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: ");
f011c8d1:	e8 c7 02 ff ff       	call   f010cb9d <sys_calculate_free_frames>
f011c8d6:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011c8d9:	29 c2                	sub    %eax,%edx
f011c8db:	89 d0                	mov    %edx,%eax
f011c8dd:	3d 00 01 00 00       	cmp    $0x100,%eax
f011c8e2:	74 17                	je     f011c8fb <test_kmalloc_firstfit1+0x391>
f011c8e4:	83 ec 04             	sub    $0x4,%esp
f011c8e7:	68 c4 b7 13 f0       	push   $0xf013b7c4
f011c8ec:	68 f8 02 00 00       	push   $0x2f8
f011c8f1:	68 7a b3 13 f0       	push   $0xf013b37a
f011c8f6:	e8 0a 39 fe ff       	call   f0100205 <_panic>

		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames() ;
f011c8fb:	e8 9d 02 ff ff       	call   f010cb9d <sys_calculate_free_frames>
f011c900:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011c903:	e8 c0 74 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011c908:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[3] = kmalloc(1*Mega-kilo);
f011c90b:	83 ec 0c             	sub    $0xc,%esp
f011c90e:	68 00 fc 0f 00       	push   $0xffc00
f011c913:	e8 6d af fe ff       	call   f0107885 <kmalloc>
f011c918:	83 c4 10             	add    $0x10,%esp
f011c91b:	89 85 5c fe ff ff    	mov    %eax,-0x1a4(%ebp)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 3*Mega)) panic("Wrong start address for the allocated space... ");
f011c921:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f011c927:	89 c1                	mov    %eax,%ecx
f011c929:	c7 45 a4 00 10 00 00 	movl   $0x1000,-0x5c(%ebp)
f011c930:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f011c933:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011c938:	89 45 a0             	mov    %eax,-0x60(%ebp)
f011c93b:	8b 45 a0             	mov    -0x60(%ebp),%eax
f011c93e:	ba 00 00 00 00       	mov    $0x0,%edx
f011c943:	f7 75 a4             	divl   -0x5c(%ebp)
f011c946:	8b 45 a0             	mov    -0x60(%ebp),%eax
f011c949:	29 d0                	sub    %edx,%eax
f011c94b:	89 c3                	mov    %eax,%ebx
f011c94d:	c7 45 9c 00 10 00 00 	movl   $0x1000,-0x64(%ebp)
f011c954:	a0 40 26 78 f0       	mov    0xf0782640,%al
f011c959:	0f b6 d0             	movzbl %al,%edx
f011c95c:	8b 45 9c             	mov    -0x64(%ebp),%eax
f011c95f:	01 d0                	add    %edx,%eax
f011c961:	48                   	dec    %eax
f011c962:	89 45 98             	mov    %eax,-0x68(%ebp)
f011c965:	8b 45 98             	mov    -0x68(%ebp),%eax
f011c968:	ba 00 00 00 00       	mov    $0x0,%edx
f011c96d:	f7 75 9c             	divl   -0x64(%ebp)
f011c970:	8b 45 98             	mov    -0x68(%ebp),%eax
f011c973:	29 d0                	sub    %edx,%eax
f011c975:	01 c3                	add    %eax,%ebx
f011c977:	c7 45 94 00 10 00 00 	movl   $0x1000,-0x6c(%ebp)
f011c97e:	a0 40 26 78 f0       	mov    0xf0782640,%al
f011c983:	0f b6 c0             	movzbl %al,%eax
f011c986:	c1 e0 04             	shl    $0x4,%eax
f011c989:	89 c2                	mov    %eax,%edx
f011c98b:	8b 45 94             	mov    -0x6c(%ebp),%eax
f011c98e:	01 d0                	add    %edx,%eax
f011c990:	48                   	dec    %eax
f011c991:	89 45 90             	mov    %eax,-0x70(%ebp)
f011c994:	8b 45 90             	mov    -0x70(%ebp),%eax
f011c997:	ba 00 00 00 00       	mov    $0x0,%edx
f011c99c:	f7 75 94             	divl   -0x6c(%ebp)
f011c99f:	8b 45 90             	mov    -0x70(%ebp),%eax
f011c9a2:	29 d0                	sub    %edx,%eax
f011c9a4:	01 d8                	add    %ebx,%eax
f011c9a6:	2d 00 c0 cf 09       	sub    $0x9cfc000,%eax
f011c9ab:	39 c1                	cmp    %eax,%ecx
f011c9ad:	74 17                	je     f011c9c6 <test_kmalloc_firstfit1+0x45c>
f011c9af:	83 ec 04             	sub    $0x4,%esp
f011c9b2:	68 94 b7 13 f0       	push   $0xf013b794
f011c9b7:	68 fe 02 00 00       	push   $0x2fe
f011c9bc:	68 7a b3 13 f0       	push   $0xf013b37a
f011c9c1:	e8 3f 38 fe ff       	call   f0100205 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011c9c6:	e8 fd 73 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011c9cb:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011c9ce:	74 17                	je     f011c9e7 <test_kmalloc_firstfit1+0x47d>
f011c9d0:	83 ec 04             	sub    $0x4,%esp
f011c9d3:	68 94 b3 13 f0       	push   $0xf013b394
f011c9d8:	68 ff 02 00 00       	push   $0x2ff
f011c9dd:	68 7a b3 13 f0       	push   $0xf013b37a
f011c9e2:	e8 1e 38 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: ");
f011c9e7:	e8 b1 01 ff ff       	call   f010cb9d <sys_calculate_free_frames>
f011c9ec:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011c9ef:	29 c2                	sub    %eax,%edx
f011c9f1:	89 d0                	mov    %edx,%eax
f011c9f3:	3d 00 01 00 00       	cmp    $0x100,%eax
f011c9f8:	74 17                	je     f011ca11 <test_kmalloc_firstfit1+0x4a7>
f011c9fa:	83 ec 04             	sub    $0x4,%esp
f011c9fd:	68 c4 b7 13 f0       	push   $0xf013b7c4
f011ca02:	68 00 03 00 00       	push   $0x300
f011ca07:	68 7a b3 13 f0       	push   $0xf013b37a
f011ca0c:	e8 f4 37 fe ff       	call   f0100205 <_panic>

		//Allocate 2 MB
		freeFrames = sys_calculate_free_frames() ;
f011ca11:	e8 87 01 ff ff       	call   f010cb9d <sys_calculate_free_frames>
f011ca16:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011ca19:	e8 aa 73 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011ca1e:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[4] = kmalloc(2*Mega-kilo);
f011ca21:	83 ec 0c             	sub    $0xc,%esp
f011ca24:	68 00 fc 1f 00       	push   $0x1ffc00
f011ca29:	e8 57 ae fe ff       	call   f0107885 <kmalloc>
f011ca2e:	83 c4 10             	add    $0x10,%esp
f011ca31:	89 85 60 fe ff ff    	mov    %eax,-0x1a0(%ebp)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... ");
f011ca37:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f011ca3d:	89 c1                	mov    %eax,%ecx
f011ca3f:	c7 45 8c 00 10 00 00 	movl   $0x1000,-0x74(%ebp)
f011ca46:	8b 45 8c             	mov    -0x74(%ebp),%eax
f011ca49:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011ca4e:	89 45 88             	mov    %eax,-0x78(%ebp)
f011ca51:	8b 45 88             	mov    -0x78(%ebp),%eax
f011ca54:	ba 00 00 00 00       	mov    $0x0,%edx
f011ca59:	f7 75 8c             	divl   -0x74(%ebp)
f011ca5c:	8b 45 88             	mov    -0x78(%ebp),%eax
f011ca5f:	29 d0                	sub    %edx,%eax
f011ca61:	89 c3                	mov    %eax,%ebx
f011ca63:	c7 45 84 00 10 00 00 	movl   $0x1000,-0x7c(%ebp)
f011ca6a:	a0 40 26 78 f0       	mov    0xf0782640,%al
f011ca6f:	0f b6 d0             	movzbl %al,%edx
f011ca72:	8b 45 84             	mov    -0x7c(%ebp),%eax
f011ca75:	01 d0                	add    %edx,%eax
f011ca77:	48                   	dec    %eax
f011ca78:	89 45 80             	mov    %eax,-0x80(%ebp)
f011ca7b:	8b 45 80             	mov    -0x80(%ebp),%eax
f011ca7e:	ba 00 00 00 00       	mov    $0x0,%edx
f011ca83:	f7 75 84             	divl   -0x7c(%ebp)
f011ca86:	8b 45 80             	mov    -0x80(%ebp),%eax
f011ca89:	29 d0                	sub    %edx,%eax
f011ca8b:	01 c3                	add    %eax,%ebx
f011ca8d:	c7 85 7c ff ff ff 00 	movl   $0x1000,-0x84(%ebp)
f011ca94:	10 00 00 
f011ca97:	a0 40 26 78 f0       	mov    0xf0782640,%al
f011ca9c:	0f b6 c0             	movzbl %al,%eax
f011ca9f:	c1 e0 04             	shl    $0x4,%eax
f011caa2:	89 c2                	mov    %eax,%edx
f011caa4:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f011caaa:	01 d0                	add    %edx,%eax
f011caac:	48                   	dec    %eax
f011caad:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)
f011cab3:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f011cab9:	ba 00 00 00 00       	mov    $0x0,%edx
f011cabe:	f7 b5 7c ff ff ff    	divl   -0x84(%ebp)
f011cac4:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f011caca:	29 d0                	sub    %edx,%eax
f011cacc:	01 d8                	add    %ebx,%eax
f011cace:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
f011cad3:	39 c1                	cmp    %eax,%ecx
f011cad5:	74 17                	je     f011caee <test_kmalloc_firstfit1+0x584>
f011cad7:	83 ec 04             	sub    $0x4,%esp
f011cada:	68 94 b7 13 f0       	push   $0xf013b794
f011cadf:	68 06 03 00 00       	push   $0x306
f011cae4:	68 7a b3 13 f0       	push   $0xf013b37a
f011cae9:	e8 17 37 fe ff       	call   f0100205 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011caee:	e8 d5 72 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011caf3:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011caf6:	74 17                	je     f011cb0f <test_kmalloc_firstfit1+0x5a5>
f011caf8:	83 ec 04             	sub    $0x4,%esp
f011cafb:	68 94 b3 13 f0       	push   $0xf013b394
f011cb00:	68 07 03 00 00       	push   $0x307
f011cb05:	68 7a b3 13 f0       	push   $0xf013b37a
f011cb0a:	e8 f6 36 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: ");
f011cb0f:	e8 89 00 ff ff       	call   f010cb9d <sys_calculate_free_frames>
f011cb14:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011cb17:	29 c2                	sub    %eax,%edx
f011cb19:	89 d0                	mov    %edx,%eax
f011cb1b:	3d 00 02 00 00       	cmp    $0x200,%eax
f011cb20:	74 17                	je     f011cb39 <test_kmalloc_firstfit1+0x5cf>
f011cb22:	83 ec 04             	sub    $0x4,%esp
f011cb25:	68 c4 b7 13 f0       	push   $0xf013b7c4
f011cb2a:	68 08 03 00 00       	push   $0x308
f011cb2f:	68 7a b3 13 f0       	push   $0xf013b37a
f011cb34:	e8 cc 36 fe ff       	call   f0100205 <_panic>

		//Allocate 2 MB
		freeFrames = sys_calculate_free_frames() ;
f011cb39:	e8 5f 00 ff ff       	call   f010cb9d <sys_calculate_free_frames>
f011cb3e:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011cb41:	e8 82 72 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011cb46:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[5] = kmalloc(2*Mega-kilo);
f011cb49:	83 ec 0c             	sub    $0xc,%esp
f011cb4c:	68 00 fc 1f 00       	push   $0x1ffc00
f011cb51:	e8 2f ad fe ff       	call   f0107885 <kmalloc>
f011cb56:	83 c4 10             	add    $0x10,%esp
f011cb59:	89 85 64 fe ff ff    	mov    %eax,-0x19c(%ebp)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 6*Mega)) panic("Wrong start address for the allocated space... ");
f011cb5f:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f011cb65:	89 c1                	mov    %eax,%ecx
f011cb67:	c7 85 74 ff ff ff 00 	movl   $0x1000,-0x8c(%ebp)
f011cb6e:	10 00 00 
f011cb71:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f011cb77:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011cb7c:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
f011cb82:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f011cb88:	ba 00 00 00 00       	mov    $0x0,%edx
f011cb8d:	f7 b5 74 ff ff ff    	divl   -0x8c(%ebp)
f011cb93:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f011cb99:	29 d0                	sub    %edx,%eax
f011cb9b:	89 c3                	mov    %eax,%ebx
f011cb9d:	c7 85 6c ff ff ff 00 	movl   $0x1000,-0x94(%ebp)
f011cba4:	10 00 00 
f011cba7:	a0 40 26 78 f0       	mov    0xf0782640,%al
f011cbac:	0f b6 d0             	movzbl %al,%edx
f011cbaf:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f011cbb5:	01 d0                	add    %edx,%eax
f011cbb7:	48                   	dec    %eax
f011cbb8:	89 85 68 ff ff ff    	mov    %eax,-0x98(%ebp)
f011cbbe:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f011cbc4:	ba 00 00 00 00       	mov    $0x0,%edx
f011cbc9:	f7 b5 6c ff ff ff    	divl   -0x94(%ebp)
f011cbcf:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f011cbd5:	29 d0                	sub    %edx,%eax
f011cbd7:	01 c3                	add    %eax,%ebx
f011cbd9:	c7 85 64 ff ff ff 00 	movl   $0x1000,-0x9c(%ebp)
f011cbe0:	10 00 00 
f011cbe3:	a0 40 26 78 f0       	mov    0xf0782640,%al
f011cbe8:	0f b6 c0             	movzbl %al,%eax
f011cbeb:	c1 e0 04             	shl    $0x4,%eax
f011cbee:	89 c2                	mov    %eax,%edx
f011cbf0:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f011cbf6:	01 d0                	add    %edx,%eax
f011cbf8:	48                   	dec    %eax
f011cbf9:	89 85 60 ff ff ff    	mov    %eax,-0xa0(%ebp)
f011cbff:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f011cc05:	ba 00 00 00 00       	mov    $0x0,%edx
f011cc0a:	f7 b5 64 ff ff ff    	divl   -0x9c(%ebp)
f011cc10:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f011cc16:	29 d0                	sub    %edx,%eax
f011cc18:	01 d8                	add    %ebx,%eax
f011cc1a:	2d 00 c0 9f 09       	sub    $0x99fc000,%eax
f011cc1f:	39 c1                	cmp    %eax,%ecx
f011cc21:	74 17                	je     f011cc3a <test_kmalloc_firstfit1+0x6d0>
f011cc23:	83 ec 04             	sub    $0x4,%esp
f011cc26:	68 94 b7 13 f0       	push   $0xf013b794
f011cc2b:	68 0e 03 00 00       	push   $0x30e
f011cc30:	68 7a b3 13 f0       	push   $0xf013b37a
f011cc35:	e8 cb 35 fe ff       	call   f0100205 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011cc3a:	e8 89 71 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011cc3f:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011cc42:	74 17                	je     f011cc5b <test_kmalloc_firstfit1+0x6f1>
f011cc44:	83 ec 04             	sub    $0x4,%esp
f011cc47:	68 94 b3 13 f0       	push   $0xf013b394
f011cc4c:	68 0f 03 00 00       	push   $0x30f
f011cc51:	68 7a b3 13 f0       	push   $0xf013b37a
f011cc56:	e8 aa 35 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: ");
f011cc5b:	e8 3d ff fe ff       	call   f010cb9d <sys_calculate_free_frames>
f011cc60:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011cc63:	29 c2                	sub    %eax,%edx
f011cc65:	89 d0                	mov    %edx,%eax
f011cc67:	3d 00 02 00 00       	cmp    $0x200,%eax
f011cc6c:	74 17                	je     f011cc85 <test_kmalloc_firstfit1+0x71b>
f011cc6e:	83 ec 04             	sub    $0x4,%esp
f011cc71:	68 c4 b7 13 f0       	push   $0xf013b7c4
f011cc76:	68 10 03 00 00       	push   $0x310
f011cc7b:	68 7a b3 13 f0       	push   $0xf013b37a
f011cc80:	e8 80 35 fe ff       	call   f0100205 <_panic>

		//Allocate 3 MB
		freeFrames = sys_calculate_free_frames() ;
f011cc85:	e8 13 ff fe ff       	call   f010cb9d <sys_calculate_free_frames>
f011cc8a:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011cc8d:	e8 36 71 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011cc92:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[6] = kmalloc(3*Mega-kilo);
f011cc95:	83 ec 0c             	sub    $0xc,%esp
f011cc98:	68 00 fc 2f 00       	push   $0x2ffc00
f011cc9d:	e8 e3 ab fe ff       	call   f0107885 <kmalloc>
f011cca2:	83 c4 10             	add    $0x10,%esp
f011cca5:	89 85 68 fe ff ff    	mov    %eax,-0x198(%ebp)
		if ((uint32) ptr_allocations[6] !=  (ACTUAL_START + 8*Mega)) panic("Wrong start address for the allocated space... ");
f011ccab:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f011ccb1:	89 c1                	mov    %eax,%ecx
f011ccb3:	c7 85 5c ff ff ff 00 	movl   $0x1000,-0xa4(%ebp)
f011ccba:	10 00 00 
f011ccbd:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f011ccc3:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011ccc8:	89 85 58 ff ff ff    	mov    %eax,-0xa8(%ebp)
f011ccce:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f011ccd4:	ba 00 00 00 00       	mov    $0x0,%edx
f011ccd9:	f7 b5 5c ff ff ff    	divl   -0xa4(%ebp)
f011ccdf:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f011cce5:	29 d0                	sub    %edx,%eax
f011cce7:	89 c3                	mov    %eax,%ebx
f011cce9:	c7 85 54 ff ff ff 00 	movl   $0x1000,-0xac(%ebp)
f011ccf0:	10 00 00 
f011ccf3:	a0 40 26 78 f0       	mov    0xf0782640,%al
f011ccf8:	0f b6 d0             	movzbl %al,%edx
f011ccfb:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f011cd01:	01 d0                	add    %edx,%eax
f011cd03:	48                   	dec    %eax
f011cd04:	89 85 50 ff ff ff    	mov    %eax,-0xb0(%ebp)
f011cd0a:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f011cd10:	ba 00 00 00 00       	mov    $0x0,%edx
f011cd15:	f7 b5 54 ff ff ff    	divl   -0xac(%ebp)
f011cd1b:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f011cd21:	29 d0                	sub    %edx,%eax
f011cd23:	01 c3                	add    %eax,%ebx
f011cd25:	c7 85 4c ff ff ff 00 	movl   $0x1000,-0xb4(%ebp)
f011cd2c:	10 00 00 
f011cd2f:	a0 40 26 78 f0       	mov    0xf0782640,%al
f011cd34:	0f b6 c0             	movzbl %al,%eax
f011cd37:	c1 e0 04             	shl    $0x4,%eax
f011cd3a:	89 c2                	mov    %eax,%edx
f011cd3c:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f011cd42:	01 d0                	add    %edx,%eax
f011cd44:	48                   	dec    %eax
f011cd45:	89 85 48 ff ff ff    	mov    %eax,-0xb8(%ebp)
f011cd4b:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f011cd51:	ba 00 00 00 00       	mov    $0x0,%edx
f011cd56:	f7 b5 4c ff ff ff    	divl   -0xb4(%ebp)
f011cd5c:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f011cd62:	29 d0                	sub    %edx,%eax
f011cd64:	01 d8                	add    %ebx,%eax
f011cd66:	2d 00 c0 7f 09       	sub    $0x97fc000,%eax
f011cd6b:	39 c1                	cmp    %eax,%ecx
f011cd6d:	74 17                	je     f011cd86 <test_kmalloc_firstfit1+0x81c>
f011cd6f:	83 ec 04             	sub    $0x4,%esp
f011cd72:	68 94 b7 13 f0       	push   $0xf013b794
f011cd77:	68 16 03 00 00       	push   $0x316
f011cd7c:	68 7a b3 13 f0       	push   $0xf013b37a
f011cd81:	e8 7f 34 fe ff       	call   f0100205 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011cd86:	e8 3d 70 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011cd8b:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011cd8e:	74 17                	je     f011cda7 <test_kmalloc_firstfit1+0x83d>
f011cd90:	83 ec 04             	sub    $0x4,%esp
f011cd93:	68 94 b3 13 f0       	push   $0xf013b394
f011cd98:	68 17 03 00 00       	push   $0x317
f011cd9d:	68 7a b3 13 f0       	push   $0xf013b37a
f011cda2:	e8 5e 34 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: ");
f011cda7:	e8 f1 fd fe ff       	call   f010cb9d <sys_calculate_free_frames>
f011cdac:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011cdaf:	29 c2                	sub    %eax,%edx
f011cdb1:	89 d0                	mov    %edx,%eax
f011cdb3:	3d 00 03 00 00       	cmp    $0x300,%eax
f011cdb8:	74 17                	je     f011cdd1 <test_kmalloc_firstfit1+0x867>
f011cdba:	83 ec 04             	sub    $0x4,%esp
f011cdbd:	68 c4 b7 13 f0       	push   $0xf013b7c4
f011cdc2:	68 18 03 00 00       	push   $0x318
f011cdc7:	68 7a b3 13 f0       	push   $0xf013b37a
f011cdcc:	e8 34 34 fe ff       	call   f0100205 <_panic>

		//Allocate 3 MB
		freeFrames = sys_calculate_free_frames() ;
f011cdd1:	e8 c7 fd fe ff       	call   f010cb9d <sys_calculate_free_frames>
f011cdd6:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011cdd9:	e8 ea 6f fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011cdde:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[7] = kmalloc(3*Mega-kilo);
f011cde1:	83 ec 0c             	sub    $0xc,%esp
f011cde4:	68 00 fc 2f 00       	push   $0x2ffc00
f011cde9:	e8 97 aa fe ff       	call   f0107885 <kmalloc>
f011cdee:	83 c4 10             	add    $0x10,%esp
f011cdf1:	89 85 6c fe ff ff    	mov    %eax,-0x194(%ebp)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 11*Mega)) panic("Wrong start address for the allocated space... ");
f011cdf7:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f011cdfd:	89 c1                	mov    %eax,%ecx
f011cdff:	c7 85 44 ff ff ff 00 	movl   $0x1000,-0xbc(%ebp)
f011ce06:	10 00 00 
f011ce09:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f011ce0f:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011ce14:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%ebp)
f011ce1a:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f011ce20:	ba 00 00 00 00       	mov    $0x0,%edx
f011ce25:	f7 b5 44 ff ff ff    	divl   -0xbc(%ebp)
f011ce2b:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f011ce31:	29 d0                	sub    %edx,%eax
f011ce33:	89 c3                	mov    %eax,%ebx
f011ce35:	c7 85 3c ff ff ff 00 	movl   $0x1000,-0xc4(%ebp)
f011ce3c:	10 00 00 
f011ce3f:	a0 40 26 78 f0       	mov    0xf0782640,%al
f011ce44:	0f b6 d0             	movzbl %al,%edx
f011ce47:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f011ce4d:	01 d0                	add    %edx,%eax
f011ce4f:	48                   	dec    %eax
f011ce50:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
f011ce56:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f011ce5c:	ba 00 00 00 00       	mov    $0x0,%edx
f011ce61:	f7 b5 3c ff ff ff    	divl   -0xc4(%ebp)
f011ce67:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f011ce6d:	29 d0                	sub    %edx,%eax
f011ce6f:	01 c3                	add    %eax,%ebx
f011ce71:	c7 85 34 ff ff ff 00 	movl   $0x1000,-0xcc(%ebp)
f011ce78:	10 00 00 
f011ce7b:	a0 40 26 78 f0       	mov    0xf0782640,%al
f011ce80:	0f b6 c0             	movzbl %al,%eax
f011ce83:	c1 e0 04             	shl    $0x4,%eax
f011ce86:	89 c2                	mov    %eax,%edx
f011ce88:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f011ce8e:	01 d0                	add    %edx,%eax
f011ce90:	48                   	dec    %eax
f011ce91:	89 85 30 ff ff ff    	mov    %eax,-0xd0(%ebp)
f011ce97:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f011ce9d:	ba 00 00 00 00       	mov    $0x0,%edx
f011cea2:	f7 b5 34 ff ff ff    	divl   -0xcc(%ebp)
f011cea8:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f011ceae:	29 d0                	sub    %edx,%eax
f011ceb0:	01 d8                	add    %ebx,%eax
f011ceb2:	2d 00 c0 4f 09       	sub    $0x94fc000,%eax
f011ceb7:	39 c1                	cmp    %eax,%ecx
f011ceb9:	74 17                	je     f011ced2 <test_kmalloc_firstfit1+0x968>
f011cebb:	83 ec 04             	sub    $0x4,%esp
f011cebe:	68 94 b7 13 f0       	push   $0xf013b794
f011cec3:	68 1e 03 00 00       	push   $0x31e
f011cec8:	68 7a b3 13 f0       	push   $0xf013b37a
f011cecd:	e8 33 33 fe ff       	call   f0100205 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011ced2:	e8 f1 6e fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011ced7:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011ceda:	74 17                	je     f011cef3 <test_kmalloc_firstfit1+0x989>
f011cedc:	83 ec 04             	sub    $0x4,%esp
f011cedf:	68 94 b3 13 f0       	push   $0xf013b394
f011cee4:	68 1f 03 00 00       	push   $0x31f
f011cee9:	68 7a b3 13 f0       	push   $0xf013b37a
f011ceee:	e8 12 33 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: ");
f011cef3:	e8 a5 fc fe ff       	call   f010cb9d <sys_calculate_free_frames>
f011cef8:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011cefb:	29 c2                	sub    %eax,%edx
f011cefd:	89 d0                	mov    %edx,%eax
f011ceff:	3d 00 03 00 00       	cmp    $0x300,%eax
f011cf04:	74 17                	je     f011cf1d <test_kmalloc_firstfit1+0x9b3>
f011cf06:	83 ec 04             	sub    $0x4,%esp
f011cf09:	68 c4 b7 13 f0       	push   $0xf013b7c4
f011cf0e:	68 20 03 00 00       	push   $0x320
f011cf13:	68 7a b3 13 f0       	push   $0xf013b37a
f011cf18:	e8 e8 32 fe ff       	call   f0100205 <_panic>
	}

	//[2] Free some to create holes
	{
		//1 MB Hole
		freeFrames = sys_calculate_free_frames() ;
f011cf1d:	e8 7b fc fe ff       	call   f010cb9d <sys_calculate_free_frames>
f011cf22:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011cf25:	e8 9e 6e fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011cf2a:	89 45 f0             	mov    %eax,-0x10(%ebp)
		kfree(ptr_allocations[1]);
f011cf2d:	8b 85 54 fe ff ff    	mov    -0x1ac(%ebp),%eax
f011cf33:	83 ec 0c             	sub    $0xc,%esp
f011cf36:	50                   	push   %eax
f011cf37:	e8 14 aa fe ff       	call   f0107950 <kfree>
f011cf3c:	83 c4 10             	add    $0x10,%esp
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011cf3f:	e8 84 6e fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011cf44:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011cf47:	74 17                	je     f011cf60 <test_kmalloc_firstfit1+0x9f6>
f011cf49:	83 ec 04             	sub    $0x4,%esp
f011cf4c:	68 94 b3 13 f0       	push   $0xf013b394
f011cf51:	68 29 03 00 00       	push   $0x329
f011cf56:	68 7a b3 13 f0       	push   $0xf013b37a
f011cf5b:	e8 a5 32 fe ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 256) panic("Wrong free: ");
f011cf60:	e8 38 fc fe ff       	call   f010cb9d <sys_calculate_free_frames>
f011cf65:	2b 45 f4             	sub    -0xc(%ebp),%eax
f011cf68:	3d 00 01 00 00       	cmp    $0x100,%eax
f011cf6d:	74 17                	je     f011cf86 <test_kmalloc_firstfit1+0xa1c>
f011cf6f:	83 ec 04             	sub    $0x4,%esp
f011cf72:	68 d7 b7 13 f0       	push   $0xf013b7d7
f011cf77:	68 2a 03 00 00       	push   $0x32a
f011cf7c:	68 7a b3 13 f0       	push   $0xf013b37a
f011cf81:	e8 7f 32 fe ff       	call   f0100205 <_panic>

		//2 MB Hole
		freeFrames = sys_calculate_free_frames() ;
f011cf86:	e8 12 fc fe ff       	call   f010cb9d <sys_calculate_free_frames>
f011cf8b:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011cf8e:	e8 35 6e fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011cf93:	89 45 f0             	mov    %eax,-0x10(%ebp)
		kfree(ptr_allocations[4]);
f011cf96:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f011cf9c:	83 ec 0c             	sub    $0xc,%esp
f011cf9f:	50                   	push   %eax
f011cfa0:	e8 ab a9 fe ff       	call   f0107950 <kfree>
f011cfa5:	83 c4 10             	add    $0x10,%esp
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011cfa8:	e8 1b 6e fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011cfad:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011cfb0:	74 17                	je     f011cfc9 <test_kmalloc_firstfit1+0xa5f>
f011cfb2:	83 ec 04             	sub    $0x4,%esp
f011cfb5:	68 94 b3 13 f0       	push   $0xf013b394
f011cfba:	68 30 03 00 00       	push   $0x330
f011cfbf:	68 7a b3 13 f0       	push   $0xf013b37a
f011cfc4:	e8 3c 32 fe ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512) panic("Wrong free: ");
f011cfc9:	e8 cf fb fe ff       	call   f010cb9d <sys_calculate_free_frames>
f011cfce:	2b 45 f4             	sub    -0xc(%ebp),%eax
f011cfd1:	3d 00 02 00 00       	cmp    $0x200,%eax
f011cfd6:	74 17                	je     f011cfef <test_kmalloc_firstfit1+0xa85>
f011cfd8:	83 ec 04             	sub    $0x4,%esp
f011cfdb:	68 d7 b7 13 f0       	push   $0xf013b7d7
f011cfe0:	68 31 03 00 00       	push   $0x331
f011cfe5:	68 7a b3 13 f0       	push   $0xf013b37a
f011cfea:	e8 16 32 fe ff       	call   f0100205 <_panic>

		//3 MB Hole
		freeFrames = sys_calculate_free_frames() ;
f011cfef:	e8 a9 fb fe ff       	call   f010cb9d <sys_calculate_free_frames>
f011cff4:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011cff7:	e8 cc 6d fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011cffc:	89 45 f0             	mov    %eax,-0x10(%ebp)
		kfree(ptr_allocations[6]);
f011cfff:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f011d005:	83 ec 0c             	sub    $0xc,%esp
f011d008:	50                   	push   %eax
f011d009:	e8 42 a9 fe ff       	call   f0107950 <kfree>
f011d00e:	83 c4 10             	add    $0x10,%esp
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011d011:	e8 b2 6d fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011d016:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011d019:	74 17                	je     f011d032 <test_kmalloc_firstfit1+0xac8>
f011d01b:	83 ec 04             	sub    $0x4,%esp
f011d01e:	68 94 b3 13 f0       	push   $0xf013b394
f011d023:	68 37 03 00 00       	push   $0x337
f011d028:	68 7a b3 13 f0       	push   $0xf013b37a
f011d02d:	e8 d3 31 fe ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 768) panic("Wrong free: ");
f011d032:	e8 66 fb fe ff       	call   f010cb9d <sys_calculate_free_frames>
f011d037:	2b 45 f4             	sub    -0xc(%ebp),%eax
f011d03a:	3d 00 03 00 00       	cmp    $0x300,%eax
f011d03f:	74 17                	je     f011d058 <test_kmalloc_firstfit1+0xaee>
f011d041:	83 ec 04             	sub    $0x4,%esp
f011d044:	68 d7 b7 13 f0       	push   $0xf013b7d7
f011d049:	68 38 03 00 00       	push   $0x338
f011d04e:	68 7a b3 13 f0       	push   $0xf013b37a
f011d053:	e8 ad 31 fe ff       	call   f0100205 <_panic>
	}

	//[3] Allocate again [test first fit]
	{
		//Allocate 512 KB - should be placed in 1st hole
		freeFrames = sys_calculate_free_frames() ;
f011d058:	e8 40 fb fe ff       	call   f010cb9d <sys_calculate_free_frames>
f011d05d:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011d060:	e8 63 6d fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011d065:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[8] = kmalloc(512*kilo - kilo);
f011d068:	83 ec 0c             	sub    $0xc,%esp
f011d06b:	68 00 fc 07 00       	push   $0x7fc00
f011d070:	e8 10 a8 fe ff       	call   f0107885 <kmalloc>
f011d075:	83 c4 10             	add    $0x10,%esp
f011d078:	89 85 70 fe ff ff    	mov    %eax,-0x190(%ebp)
		if ((uint32) ptr_allocations[8] != (ACTUAL_START + 1*Mega)) panic("Wrong start address for the allocated space... ");
f011d07e:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f011d084:	89 c1                	mov    %eax,%ecx
f011d086:	c7 85 2c ff ff ff 00 	movl   $0x1000,-0xd4(%ebp)
f011d08d:	10 00 00 
f011d090:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f011d096:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011d09b:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%ebp)
f011d0a1:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f011d0a7:	ba 00 00 00 00       	mov    $0x0,%edx
f011d0ac:	f7 b5 2c ff ff ff    	divl   -0xd4(%ebp)
f011d0b2:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f011d0b8:	29 d0                	sub    %edx,%eax
f011d0ba:	89 c3                	mov    %eax,%ebx
f011d0bc:	c7 85 24 ff ff ff 00 	movl   $0x1000,-0xdc(%ebp)
f011d0c3:	10 00 00 
f011d0c6:	a0 40 26 78 f0       	mov    0xf0782640,%al
f011d0cb:	0f b6 d0             	movzbl %al,%edx
f011d0ce:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011d0d4:	01 d0                	add    %edx,%eax
f011d0d6:	48                   	dec    %eax
f011d0d7:	89 85 20 ff ff ff    	mov    %eax,-0xe0(%ebp)
f011d0dd:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f011d0e3:	ba 00 00 00 00       	mov    $0x0,%edx
f011d0e8:	f7 b5 24 ff ff ff    	divl   -0xdc(%ebp)
f011d0ee:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f011d0f4:	29 d0                	sub    %edx,%eax
f011d0f6:	01 c3                	add    %eax,%ebx
f011d0f8:	c7 85 1c ff ff ff 00 	movl   $0x1000,-0xe4(%ebp)
f011d0ff:	10 00 00 
f011d102:	a0 40 26 78 f0       	mov    0xf0782640,%al
f011d107:	0f b6 c0             	movzbl %al,%eax
f011d10a:	c1 e0 04             	shl    $0x4,%eax
f011d10d:	89 c2                	mov    %eax,%edx
f011d10f:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f011d115:	01 d0                	add    %edx,%eax
f011d117:	48                   	dec    %eax
f011d118:	89 85 18 ff ff ff    	mov    %eax,-0xe8(%ebp)
f011d11e:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f011d124:	ba 00 00 00 00       	mov    $0x0,%edx
f011d129:	f7 b5 1c ff ff ff    	divl   -0xe4(%ebp)
f011d12f:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f011d135:	29 d0                	sub    %edx,%eax
f011d137:	01 d8                	add    %ebx,%eax
f011d139:	2d 00 c0 ef 09       	sub    $0x9efc000,%eax
f011d13e:	39 c1                	cmp    %eax,%ecx
f011d140:	74 17                	je     f011d159 <test_kmalloc_firstfit1+0xbef>
f011d142:	83 ec 04             	sub    $0x4,%esp
f011d145:	68 94 b7 13 f0       	push   $0xf013b794
f011d14a:	68 41 03 00 00       	push   $0x341
f011d14f:	68 7a b3 13 f0       	push   $0xf013b37a
f011d154:	e8 ac 30 fe ff       	call   f0100205 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011d159:	e8 6a 6c fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011d15e:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011d161:	74 17                	je     f011d17a <test_kmalloc_firstfit1+0xc10>
f011d163:	83 ec 04             	sub    $0x4,%esp
f011d166:	68 94 b3 13 f0       	push   $0xf013b394
f011d16b:	68 42 03 00 00       	push   $0x342
f011d170:	68 7a b3 13 f0       	push   $0xf013b37a
f011d175:	e8 8b 30 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 128) panic("Wrong allocation: ");
f011d17a:	e8 1e fa fe ff       	call   f010cb9d <sys_calculate_free_frames>
f011d17f:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011d182:	29 c2                	sub    %eax,%edx
f011d184:	89 d0                	mov    %edx,%eax
f011d186:	3d 80 00 00 00       	cmp    $0x80,%eax
f011d18b:	74 17                	je     f011d1a4 <test_kmalloc_firstfit1+0xc3a>
f011d18d:	83 ec 04             	sub    $0x4,%esp
f011d190:	68 c4 b7 13 f0       	push   $0xf013b7c4
f011d195:	68 43 03 00 00       	push   $0x343
f011d19a:	68 7a b3 13 f0       	push   $0xf013b37a
f011d19f:	e8 61 30 fe ff       	call   f0100205 <_panic>

		//Allocate 1 MB - should be placed in 2nd hole
		freeFrames = sys_calculate_free_frames() ;
f011d1a4:	e8 f4 f9 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f011d1a9:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011d1ac:	e8 17 6c fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011d1b1:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[9] = kmalloc(1*Mega - kilo);
f011d1b4:	83 ec 0c             	sub    $0xc,%esp
f011d1b7:	68 00 fc 0f 00       	push   $0xffc00
f011d1bc:	e8 c4 a6 fe ff       	call   f0107885 <kmalloc>
f011d1c1:	83 c4 10             	add    $0x10,%esp
f011d1c4:	89 85 74 fe ff ff    	mov    %eax,-0x18c(%ebp)
		if ((uint32) ptr_allocations[9] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... ");
f011d1ca:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f011d1d0:	89 c1                	mov    %eax,%ecx
f011d1d2:	c7 85 14 ff ff ff 00 	movl   $0x1000,-0xec(%ebp)
f011d1d9:	10 00 00 
f011d1dc:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f011d1e2:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011d1e7:	89 85 10 ff ff ff    	mov    %eax,-0xf0(%ebp)
f011d1ed:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f011d1f3:	ba 00 00 00 00       	mov    $0x0,%edx
f011d1f8:	f7 b5 14 ff ff ff    	divl   -0xec(%ebp)
f011d1fe:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f011d204:	29 d0                	sub    %edx,%eax
f011d206:	89 c3                	mov    %eax,%ebx
f011d208:	c7 85 0c ff ff ff 00 	movl   $0x1000,-0xf4(%ebp)
f011d20f:	10 00 00 
f011d212:	a0 40 26 78 f0       	mov    0xf0782640,%al
f011d217:	0f b6 d0             	movzbl %al,%edx
f011d21a:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f011d220:	01 d0                	add    %edx,%eax
f011d222:	48                   	dec    %eax
f011d223:	89 85 08 ff ff ff    	mov    %eax,-0xf8(%ebp)
f011d229:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f011d22f:	ba 00 00 00 00       	mov    $0x0,%edx
f011d234:	f7 b5 0c ff ff ff    	divl   -0xf4(%ebp)
f011d23a:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f011d240:	29 d0                	sub    %edx,%eax
f011d242:	01 c3                	add    %eax,%ebx
f011d244:	c7 85 04 ff ff ff 00 	movl   $0x1000,-0xfc(%ebp)
f011d24b:	10 00 00 
f011d24e:	a0 40 26 78 f0       	mov    0xf0782640,%al
f011d253:	0f b6 c0             	movzbl %al,%eax
f011d256:	c1 e0 04             	shl    $0x4,%eax
f011d259:	89 c2                	mov    %eax,%edx
f011d25b:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f011d261:	01 d0                	add    %edx,%eax
f011d263:	48                   	dec    %eax
f011d264:	89 85 00 ff ff ff    	mov    %eax,-0x100(%ebp)
f011d26a:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f011d270:	ba 00 00 00 00       	mov    $0x0,%edx
f011d275:	f7 b5 04 ff ff ff    	divl   -0xfc(%ebp)
f011d27b:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f011d281:	29 d0                	sub    %edx,%eax
f011d283:	01 d8                	add    %ebx,%eax
f011d285:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
f011d28a:	39 c1                	cmp    %eax,%ecx
f011d28c:	74 17                	je     f011d2a5 <test_kmalloc_firstfit1+0xd3b>
f011d28e:	83 ec 04             	sub    $0x4,%esp
f011d291:	68 94 b7 13 f0       	push   $0xf013b794
f011d296:	68 49 03 00 00       	push   $0x349
f011d29b:	68 7a b3 13 f0       	push   $0xf013b37a
f011d2a0:	e8 60 2f fe ff       	call   f0100205 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011d2a5:	e8 1e 6b fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011d2aa:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011d2ad:	74 17                	je     f011d2c6 <test_kmalloc_firstfit1+0xd5c>
f011d2af:	83 ec 04             	sub    $0x4,%esp
f011d2b2:	68 94 b3 13 f0       	push   $0xf013b394
f011d2b7:	68 4a 03 00 00       	push   $0x34a
f011d2bc:	68 7a b3 13 f0       	push   $0xf013b37a
f011d2c1:	e8 3f 2f fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: ");
f011d2c6:	e8 d2 f8 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f011d2cb:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011d2ce:	29 c2                	sub    %eax,%edx
f011d2d0:	89 d0                	mov    %edx,%eax
f011d2d2:	3d 00 01 00 00       	cmp    $0x100,%eax
f011d2d7:	74 17                	je     f011d2f0 <test_kmalloc_firstfit1+0xd86>
f011d2d9:	83 ec 04             	sub    $0x4,%esp
f011d2dc:	68 c4 b7 13 f0       	push   $0xf013b7c4
f011d2e1:	68 4b 03 00 00       	push   $0x34b
f011d2e6:	68 7a b3 13 f0       	push   $0xf013b37a
f011d2eb:	e8 15 2f fe ff       	call   f0100205 <_panic>


		//Allocate 256 KB - should be placed in remaining of 1st hole
		freeFrames = sys_calculate_free_frames() ;
f011d2f0:	e8 a8 f8 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f011d2f5:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011d2f8:	e8 cb 6a fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011d2fd:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[10] = kmalloc(256*kilo - kilo);
f011d300:	83 ec 0c             	sub    $0xc,%esp
f011d303:	68 00 fc 03 00       	push   $0x3fc00
f011d308:	e8 78 a5 fe ff       	call   f0107885 <kmalloc>
f011d30d:	83 c4 10             	add    $0x10,%esp
f011d310:	89 85 78 fe ff ff    	mov    %eax,-0x188(%ebp)
		if ((uint32) ptr_allocations[10] != (ACTUAL_START + 1*Mega + 512*kilo)) panic("Wrong start address for the allocated space... ");
f011d316:	8b 85 78 fe ff ff    	mov    -0x188(%ebp),%eax
f011d31c:	89 c1                	mov    %eax,%ecx
f011d31e:	c7 85 fc fe ff ff 00 	movl   $0x1000,-0x104(%ebp)
f011d325:	10 00 00 
f011d328:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f011d32e:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011d333:	89 85 f8 fe ff ff    	mov    %eax,-0x108(%ebp)
f011d339:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f011d33f:	ba 00 00 00 00       	mov    $0x0,%edx
f011d344:	f7 b5 fc fe ff ff    	divl   -0x104(%ebp)
f011d34a:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f011d350:	29 d0                	sub    %edx,%eax
f011d352:	89 c3                	mov    %eax,%ebx
f011d354:	c7 85 f4 fe ff ff 00 	movl   $0x1000,-0x10c(%ebp)
f011d35b:	10 00 00 
f011d35e:	a0 40 26 78 f0       	mov    0xf0782640,%al
f011d363:	0f b6 d0             	movzbl %al,%edx
f011d366:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f011d36c:	01 d0                	add    %edx,%eax
f011d36e:	48                   	dec    %eax
f011d36f:	89 85 f0 fe ff ff    	mov    %eax,-0x110(%ebp)
f011d375:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f011d37b:	ba 00 00 00 00       	mov    $0x0,%edx
f011d380:	f7 b5 f4 fe ff ff    	divl   -0x10c(%ebp)
f011d386:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f011d38c:	29 d0                	sub    %edx,%eax
f011d38e:	01 c3                	add    %eax,%ebx
f011d390:	c7 85 ec fe ff ff 00 	movl   $0x1000,-0x114(%ebp)
f011d397:	10 00 00 
f011d39a:	a0 40 26 78 f0       	mov    0xf0782640,%al
f011d39f:	0f b6 c0             	movzbl %al,%eax
f011d3a2:	c1 e0 04             	shl    $0x4,%eax
f011d3a5:	89 c2                	mov    %eax,%edx
f011d3a7:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f011d3ad:	01 d0                	add    %edx,%eax
f011d3af:	48                   	dec    %eax
f011d3b0:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)
f011d3b6:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f011d3bc:	ba 00 00 00 00       	mov    $0x0,%edx
f011d3c1:	f7 b5 ec fe ff ff    	divl   -0x114(%ebp)
f011d3c7:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f011d3cd:	29 d0                	sub    %edx,%eax
f011d3cf:	01 d8                	add    %ebx,%eax
f011d3d1:	2d 00 c0 e7 09       	sub    $0x9e7c000,%eax
f011d3d6:	39 c1                	cmp    %eax,%ecx
f011d3d8:	74 17                	je     f011d3f1 <test_kmalloc_firstfit1+0xe87>
f011d3da:	83 ec 04             	sub    $0x4,%esp
f011d3dd:	68 94 b7 13 f0       	push   $0xf013b794
f011d3e2:	68 52 03 00 00       	push   $0x352
f011d3e7:	68 7a b3 13 f0       	push   $0xf013b37a
f011d3ec:	e8 14 2e fe ff       	call   f0100205 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011d3f1:	e8 d2 69 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011d3f6:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011d3f9:	74 17                	je     f011d412 <test_kmalloc_firstfit1+0xea8>
f011d3fb:	83 ec 04             	sub    $0x4,%esp
f011d3fe:	68 94 b3 13 f0       	push   $0xf013b394
f011d403:	68 53 03 00 00       	push   $0x353
f011d408:	68 7a b3 13 f0       	push   $0xf013b37a
f011d40d:	e8 f3 2d fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 64) panic("Wrong allocation: ");
f011d412:	e8 86 f7 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f011d417:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011d41a:	29 c2                	sub    %eax,%edx
f011d41c:	89 d0                	mov    %edx,%eax
f011d41e:	83 f8 40             	cmp    $0x40,%eax
f011d421:	74 17                	je     f011d43a <test_kmalloc_firstfit1+0xed0>
f011d423:	83 ec 04             	sub    $0x4,%esp
f011d426:	68 c4 b7 13 f0       	push   $0xf013b7c4
f011d42b:	68 54 03 00 00       	push   $0x354
f011d430:	68 7a b3 13 f0       	push   $0xf013b37a
f011d435:	e8 cb 2d fe ff       	call   f0100205 <_panic>

		//Allocate 2 MB - should be placed in 3rd hole
		freeFrames = sys_calculate_free_frames() ;
f011d43a:	e8 5e f7 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f011d43f:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011d442:	e8 81 69 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011d447:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[11] = kmalloc(2*Mega);
f011d44a:	83 ec 0c             	sub    $0xc,%esp
f011d44d:	68 00 00 20 00       	push   $0x200000
f011d452:	e8 2e a4 fe ff       	call   f0107885 <kmalloc>
f011d457:	83 c4 10             	add    $0x10,%esp
f011d45a:	89 85 7c fe ff ff    	mov    %eax,-0x184(%ebp)
		if ((uint32) ptr_allocations[11] != (ACTUAL_START + 8*Mega)) panic("Wrong start address for the allocated space... ");
f011d460:	8b 85 7c fe ff ff    	mov    -0x184(%ebp),%eax
f011d466:	89 c1                	mov    %eax,%ecx
f011d468:	c7 85 e4 fe ff ff 00 	movl   $0x1000,-0x11c(%ebp)
f011d46f:	10 00 00 
f011d472:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f011d478:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011d47d:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
f011d483:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f011d489:	ba 00 00 00 00       	mov    $0x0,%edx
f011d48e:	f7 b5 e4 fe ff ff    	divl   -0x11c(%ebp)
f011d494:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f011d49a:	29 d0                	sub    %edx,%eax
f011d49c:	89 c3                	mov    %eax,%ebx
f011d49e:	c7 85 dc fe ff ff 00 	movl   $0x1000,-0x124(%ebp)
f011d4a5:	10 00 00 
f011d4a8:	a0 40 26 78 f0       	mov    0xf0782640,%al
f011d4ad:	0f b6 d0             	movzbl %al,%edx
f011d4b0:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f011d4b6:	01 d0                	add    %edx,%eax
f011d4b8:	48                   	dec    %eax
f011d4b9:	89 85 d8 fe ff ff    	mov    %eax,-0x128(%ebp)
f011d4bf:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f011d4c5:	ba 00 00 00 00       	mov    $0x0,%edx
f011d4ca:	f7 b5 dc fe ff ff    	divl   -0x124(%ebp)
f011d4d0:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f011d4d6:	29 d0                	sub    %edx,%eax
f011d4d8:	01 c3                	add    %eax,%ebx
f011d4da:	c7 85 d4 fe ff ff 00 	movl   $0x1000,-0x12c(%ebp)
f011d4e1:	10 00 00 
f011d4e4:	a0 40 26 78 f0       	mov    0xf0782640,%al
f011d4e9:	0f b6 c0             	movzbl %al,%eax
f011d4ec:	c1 e0 04             	shl    $0x4,%eax
f011d4ef:	89 c2                	mov    %eax,%edx
f011d4f1:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f011d4f7:	01 d0                	add    %edx,%eax
f011d4f9:	48                   	dec    %eax
f011d4fa:	89 85 d0 fe ff ff    	mov    %eax,-0x130(%ebp)
f011d500:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f011d506:	ba 00 00 00 00       	mov    $0x0,%edx
f011d50b:	f7 b5 d4 fe ff ff    	divl   -0x12c(%ebp)
f011d511:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f011d517:	29 d0                	sub    %edx,%eax
f011d519:	01 d8                	add    %ebx,%eax
f011d51b:	2d 00 c0 7f 09       	sub    $0x97fc000,%eax
f011d520:	39 c1                	cmp    %eax,%ecx
f011d522:	74 17                	je     f011d53b <test_kmalloc_firstfit1+0xfd1>
f011d524:	83 ec 04             	sub    $0x4,%esp
f011d527:	68 94 b7 13 f0       	push   $0xf013b794
f011d52c:	68 5a 03 00 00       	push   $0x35a
f011d531:	68 7a b3 13 f0       	push   $0xf013b37a
f011d536:	e8 ca 2c fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: ");
f011d53b:	e8 5d f6 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f011d540:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011d543:	29 c2                	sub    %eax,%edx
f011d545:	89 d0                	mov    %edx,%eax
f011d547:	3d 00 02 00 00       	cmp    $0x200,%eax
f011d54c:	74 17                	je     f011d565 <test_kmalloc_firstfit1+0xffb>
f011d54e:	83 ec 04             	sub    $0x4,%esp
f011d551:	68 c4 b7 13 f0       	push   $0xf013b7c4
f011d556:	68 5b 03 00 00       	push   $0x35b
f011d55b:	68 7a b3 13 f0       	push   $0xf013b37a
f011d560:	e8 a0 2c fe ff       	call   f0100205 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011d565:	e8 5e 68 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011d56a:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011d56d:	74 17                	je     f011d586 <test_kmalloc_firstfit1+0x101c>
f011d56f:	83 ec 04             	sub    $0x4,%esp
f011d572:	68 94 b3 13 f0       	push   $0xf013b394
f011d577:	68 5c 03 00 00       	push   $0x35c
f011d57c:	68 7a b3 13 f0       	push   $0xf013b37a
f011d581:	e8 7f 2c fe ff       	call   f0100205 <_panic>


		//Allocate 4 MB - should be placed in end of all allocations
		freeFrames = sys_calculate_free_frames() ;
f011d586:	e8 12 f6 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f011d58b:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011d58e:	e8 35 68 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011d593:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[12] = kmalloc(4*Mega - kilo);
f011d596:	83 ec 0c             	sub    $0xc,%esp
f011d599:	68 00 fc 3f 00       	push   $0x3ffc00
f011d59e:	e8 e2 a2 fe ff       	call   f0107885 <kmalloc>
f011d5a3:	83 c4 10             	add    $0x10,%esp
f011d5a6:	89 85 80 fe ff ff    	mov    %eax,-0x180(%ebp)
		if ((uint32) ptr_allocations[12] != (ACTUAL_START + 14*Mega)) panic("Wrong start address for the allocated space... ");
f011d5ac:	8b 85 80 fe ff ff    	mov    -0x180(%ebp),%eax
f011d5b2:	89 c1                	mov    %eax,%ecx
f011d5b4:	c7 85 cc fe ff ff 00 	movl   $0x1000,-0x134(%ebp)
f011d5bb:	10 00 00 
f011d5be:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f011d5c4:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011d5c9:	89 85 c8 fe ff ff    	mov    %eax,-0x138(%ebp)
f011d5cf:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f011d5d5:	ba 00 00 00 00       	mov    $0x0,%edx
f011d5da:	f7 b5 cc fe ff ff    	divl   -0x134(%ebp)
f011d5e0:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f011d5e6:	29 d0                	sub    %edx,%eax
f011d5e8:	89 c3                	mov    %eax,%ebx
f011d5ea:	c7 85 c4 fe ff ff 00 	movl   $0x1000,-0x13c(%ebp)
f011d5f1:	10 00 00 
f011d5f4:	a0 40 26 78 f0       	mov    0xf0782640,%al
f011d5f9:	0f b6 d0             	movzbl %al,%edx
f011d5fc:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f011d602:	01 d0                	add    %edx,%eax
f011d604:	48                   	dec    %eax
f011d605:	89 85 c0 fe ff ff    	mov    %eax,-0x140(%ebp)
f011d60b:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f011d611:	ba 00 00 00 00       	mov    $0x0,%edx
f011d616:	f7 b5 c4 fe ff ff    	divl   -0x13c(%ebp)
f011d61c:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f011d622:	29 d0                	sub    %edx,%eax
f011d624:	01 c3                	add    %eax,%ebx
f011d626:	c7 85 bc fe ff ff 00 	movl   $0x1000,-0x144(%ebp)
f011d62d:	10 00 00 
f011d630:	a0 40 26 78 f0       	mov    0xf0782640,%al
f011d635:	0f b6 c0             	movzbl %al,%eax
f011d638:	c1 e0 04             	shl    $0x4,%eax
f011d63b:	89 c2                	mov    %eax,%edx
f011d63d:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f011d643:	01 d0                	add    %edx,%eax
f011d645:	48                   	dec    %eax
f011d646:	89 85 b8 fe ff ff    	mov    %eax,-0x148(%ebp)
f011d64c:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f011d652:	ba 00 00 00 00       	mov    $0x0,%edx
f011d657:	f7 b5 bc fe ff ff    	divl   -0x144(%ebp)
f011d65d:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f011d663:	29 d0                	sub    %edx,%eax
f011d665:	01 d8                	add    %ebx,%eax
f011d667:	2d 00 c0 1f 09       	sub    $0x91fc000,%eax
f011d66c:	39 c1                	cmp    %eax,%ecx
f011d66e:	74 17                	je     f011d687 <test_kmalloc_firstfit1+0x111d>
f011d670:	83 ec 04             	sub    $0x4,%esp
f011d673:	68 94 b7 13 f0       	push   $0xf013b794
f011d678:	68 63 03 00 00       	push   $0x363
f011d67d:	68 7a b3 13 f0       	push   $0xf013b37a
f011d682:	e8 7e 2b fe ff       	call   f0100205 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011d687:	e8 3c 67 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011d68c:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011d68f:	74 17                	je     f011d6a8 <test_kmalloc_firstfit1+0x113e>
f011d691:	83 ec 04             	sub    $0x4,%esp
f011d694:	68 94 b3 13 f0       	push   $0xf013b394
f011d699:	68 64 03 00 00       	push   $0x364
f011d69e:	68 7a b3 13 f0       	push   $0xf013b37a
f011d6a3:	e8 5d 2b fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1024) panic("Wrong allocation: ");
f011d6a8:	e8 f0 f4 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f011d6ad:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011d6b0:	29 c2                	sub    %eax,%edx
f011d6b2:	89 d0                	mov    %edx,%eax
f011d6b4:	3d 00 04 00 00       	cmp    $0x400,%eax
f011d6b9:	74 17                	je     f011d6d2 <test_kmalloc_firstfit1+0x1168>
f011d6bb:	83 ec 04             	sub    $0x4,%esp
f011d6be:	68 c4 b7 13 f0       	push   $0xf013b7c4
f011d6c3:	68 65 03 00 00       	push   $0x365
f011d6c8:	68 7a b3 13 f0       	push   $0xf013b37a
f011d6cd:	e8 33 2b fe ff       	call   f0100205 <_panic>
	}

	//[4] Free contiguous allocations
	{
		//1 MB Hole appended to previous 256 KB hole
		freeFrames = sys_calculate_free_frames() ;
f011d6d2:	e8 c6 f4 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f011d6d7:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011d6da:	e8 e9 66 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011d6df:	89 45 f0             	mov    %eax,-0x10(%ebp)
		kfree(ptr_allocations[2]);
f011d6e2:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f011d6e8:	83 ec 0c             	sub    $0xc,%esp
f011d6eb:	50                   	push   %eax
f011d6ec:	e8 5f a2 fe ff       	call   f0107950 <kfree>
f011d6f1:	83 c4 10             	add    $0x10,%esp
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011d6f4:	e8 cf 66 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011d6f9:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011d6fc:	74 17                	je     f011d715 <test_kmalloc_firstfit1+0x11ab>
f011d6fe:	83 ec 04             	sub    $0x4,%esp
f011d701:	68 94 b3 13 f0       	push   $0xf013b394
f011d706:	68 6e 03 00 00       	push   $0x36e
f011d70b:	68 7a b3 13 f0       	push   $0xf013b37a
f011d710:	e8 f0 2a fe ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 256) panic("Wrong free: ");
f011d715:	e8 83 f4 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f011d71a:	2b 45 f4             	sub    -0xc(%ebp),%eax
f011d71d:	3d 00 01 00 00       	cmp    $0x100,%eax
f011d722:	74 17                	je     f011d73b <test_kmalloc_firstfit1+0x11d1>
f011d724:	83 ec 04             	sub    $0x4,%esp
f011d727:	68 d7 b7 13 f0       	push   $0xf013b7d7
f011d72c:	68 6f 03 00 00       	push   $0x36f
f011d731:	68 7a b3 13 f0       	push   $0xf013b37a
f011d736:	e8 ca 2a fe ff       	call   f0100205 <_panic>

		//Next 1 MB Hole appended also
		freeFrames = sys_calculate_free_frames() ;
f011d73b:	e8 5d f4 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f011d740:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011d743:	e8 80 66 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011d748:	89 45 f0             	mov    %eax,-0x10(%ebp)
		kfree(ptr_allocations[3]);
f011d74b:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f011d751:	83 ec 0c             	sub    $0xc,%esp
f011d754:	50                   	push   %eax
f011d755:	e8 f6 a1 fe ff       	call   f0107950 <kfree>
f011d75a:	83 c4 10             	add    $0x10,%esp
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011d75d:	e8 66 66 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011d762:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011d765:	74 17                	je     f011d77e <test_kmalloc_firstfit1+0x1214>
f011d767:	83 ec 04             	sub    $0x4,%esp
f011d76a:	68 94 b3 13 f0       	push   $0xf013b394
f011d76f:	68 75 03 00 00       	push   $0x375
f011d774:	68 7a b3 13 f0       	push   $0xf013b37a
f011d779:	e8 87 2a fe ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 256) panic("Wrong free: ");
f011d77e:	e8 1a f4 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f011d783:	2b 45 f4             	sub    -0xc(%ebp),%eax
f011d786:	3d 00 01 00 00       	cmp    $0x100,%eax
f011d78b:	74 17                	je     f011d7a4 <test_kmalloc_firstfit1+0x123a>
f011d78d:	83 ec 04             	sub    $0x4,%esp
f011d790:	68 d7 b7 13 f0       	push   $0xf013b7d7
f011d795:	68 76 03 00 00       	push   $0x376
f011d79a:	68 7a b3 13 f0       	push   $0xf013b37a
f011d79f:	e8 61 2a fe ff       	call   f0100205 <_panic>

	//[5] Allocate again [test first fit]
	{
		//[FIRST FIT Case]
		//Allocate 1 MB - should be placed in the contiguous hole (256 KB + 2 MB)
		freeFrames = sys_calculate_free_frames() ;
f011d7a4:	e8 f4 f3 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f011d7a9:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011d7ac:	e8 17 66 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011d7b1:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[13] = kmalloc(1*Mega);
f011d7b4:	83 ec 0c             	sub    $0xc,%esp
f011d7b7:	68 00 00 10 00       	push   $0x100000
f011d7bc:	e8 c4 a0 fe ff       	call   f0107885 <kmalloc>
f011d7c1:	83 c4 10             	add    $0x10,%esp
f011d7c4:	89 85 84 fe ff ff    	mov    %eax,-0x17c(%ebp)
		if ((uint32) ptr_allocations[13] != (ACTUAL_START + 1*Mega + 768*kilo)) panic("Wrong start address for the allocated space... ");
f011d7ca:	8b 85 84 fe ff ff    	mov    -0x17c(%ebp),%eax
f011d7d0:	89 c1                	mov    %eax,%ecx
f011d7d2:	c7 85 b4 fe ff ff 00 	movl   $0x1000,-0x14c(%ebp)
f011d7d9:	10 00 00 
f011d7dc:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f011d7e2:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011d7e7:	89 85 b0 fe ff ff    	mov    %eax,-0x150(%ebp)
f011d7ed:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f011d7f3:	ba 00 00 00 00       	mov    $0x0,%edx
f011d7f8:	f7 b5 b4 fe ff ff    	divl   -0x14c(%ebp)
f011d7fe:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f011d804:	29 d0                	sub    %edx,%eax
f011d806:	89 c3                	mov    %eax,%ebx
f011d808:	c7 85 ac fe ff ff 00 	movl   $0x1000,-0x154(%ebp)
f011d80f:	10 00 00 
f011d812:	a0 40 26 78 f0       	mov    0xf0782640,%al
f011d817:	0f b6 d0             	movzbl %al,%edx
f011d81a:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f011d820:	01 d0                	add    %edx,%eax
f011d822:	48                   	dec    %eax
f011d823:	89 85 a8 fe ff ff    	mov    %eax,-0x158(%ebp)
f011d829:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f011d82f:	ba 00 00 00 00       	mov    $0x0,%edx
f011d834:	f7 b5 ac fe ff ff    	divl   -0x154(%ebp)
f011d83a:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f011d840:	29 d0                	sub    %edx,%eax
f011d842:	01 c3                	add    %eax,%ebx
f011d844:	c7 85 a4 fe ff ff 00 	movl   $0x1000,-0x15c(%ebp)
f011d84b:	10 00 00 
f011d84e:	a0 40 26 78 f0       	mov    0xf0782640,%al
f011d853:	0f b6 c0             	movzbl %al,%eax
f011d856:	c1 e0 04             	shl    $0x4,%eax
f011d859:	89 c2                	mov    %eax,%edx
f011d85b:	8b 85 a4 fe ff ff    	mov    -0x15c(%ebp),%eax
f011d861:	01 d0                	add    %edx,%eax
f011d863:	48                   	dec    %eax
f011d864:	89 85 a0 fe ff ff    	mov    %eax,-0x160(%ebp)
f011d86a:	8b 85 a0 fe ff ff    	mov    -0x160(%ebp),%eax
f011d870:	ba 00 00 00 00       	mov    $0x0,%edx
f011d875:	f7 b5 a4 fe ff ff    	divl   -0x15c(%ebp)
f011d87b:	8b 85 a0 fe ff ff    	mov    -0x160(%ebp),%eax
f011d881:	29 d0                	sub    %edx,%eax
f011d883:	01 d8                	add    %ebx,%eax
f011d885:	2d 00 c0 e3 09       	sub    $0x9e3c000,%eax
f011d88a:	39 c1                	cmp    %eax,%ecx
f011d88c:	74 17                	je     f011d8a5 <test_kmalloc_firstfit1+0x133b>
f011d88e:	83 ec 04             	sub    $0x4,%esp
f011d891:	68 94 b7 13 f0       	push   $0xf013b794
f011d896:	68 80 03 00 00       	push   $0x380
f011d89b:	68 7a b3 13 f0       	push   $0xf013b37a
f011d8a0:	e8 60 29 fe ff       	call   f0100205 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011d8a5:	e8 1e 65 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011d8aa:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011d8ad:	74 17                	je     f011d8c6 <test_kmalloc_firstfit1+0x135c>
f011d8af:	83 ec 04             	sub    $0x4,%esp
f011d8b2:	68 94 b3 13 f0       	push   $0xf013b394
f011d8b7:	68 81 03 00 00       	push   $0x381
f011d8bc:	68 7a b3 13 f0       	push   $0xf013b37a
f011d8c1:	e8 3f 29 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: ");
f011d8c6:	e8 d2 f2 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f011d8cb:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011d8ce:	29 c2                	sub    %eax,%edx
f011d8d0:	89 d0                	mov    %edx,%eax
f011d8d2:	3d 00 01 00 00       	cmp    $0x100,%eax
f011d8d7:	74 17                	je     f011d8f0 <test_kmalloc_firstfit1+0x1386>
f011d8d9:	83 ec 04             	sub    $0x4,%esp
f011d8dc:	68 c4 b7 13 f0       	push   $0xf013b7c4
f011d8e1:	68 82 03 00 00       	push   $0x382
f011d8e6:	68 7a b3 13 f0       	push   $0xf013b37a
f011d8eb:	e8 15 29 fe ff       	call   f0100205 <_panic>
	}

	cprintf("Congratulations!! test FIRST FIT allocation (1) completed successfully.\n");
f011d8f0:	83 ec 0c             	sub    $0xc,%esp
f011d8f3:	68 70 b9 13 f0       	push   $0xf013b970
f011d8f8:	e8 11 34 fe ff       	call   f0100d0e <cprintf>
f011d8fd:	83 c4 10             	add    $0x10,%esp

	return 1;
f011d900:	b8 01 00 00 00       	mov    $0x1,%eax
}
f011d905:	8d 65 f8             	lea    -0x8(%ebp),%esp
f011d908:	5b                   	pop    %ebx
f011d909:	5f                   	pop    %edi
f011d90a:	5d                   	pop    %ebp
f011d90b:	c3                   	ret    

f011d90c <test_kmalloc_firstfit2>:

int test_kmalloc_firstfit2()
{
f011d90c:	55                   	push   %ebp
f011d90d:	89 e5                	mov    %esp,%ebp
f011d90f:	57                   	push   %edi
f011d910:	53                   	push   %ebx
f011d911:	81 ec 60 01 00 00    	sub    $0x160,%esp
	cprintf("==============================================\n");
f011d917:	83 ec 0c             	sub    $0xc,%esp
f011d91a:	68 bc b2 13 f0       	push   $0xf013b2bc
f011d91f:	e8 ea 33 fe ff       	call   f0100d0e <cprintf>
f011d924:	83 c4 10             	add    $0x10,%esp
	cprintf("MAKE SURE to have a FRESH RUN for this test\n(i.e. don't run any program/test before it)\n");
f011d927:	83 ec 0c             	sub    $0xc,%esp
f011d92a:	68 ec b2 13 f0       	push   $0xf013b2ec
f011d92f:	e8 da 33 fe ff       	call   f0100d0e <cprintf>
f011d934:	83 c4 10             	add    $0x10,%esp
	cprintf("==============================================\n");
f011d937:	83 ec 0c             	sub    $0xc,%esp
f011d93a:	68 bc b2 13 f0       	push   $0xf013b2bc
f011d93f:	e8 ca 33 fe ff       	call   f0100d0e <cprintf>
f011d944:	83 c4 10             	add    $0x10,%esp

	void* ptr_allocations[20] = {0};
f011d947:	8d 95 98 fe ff ff    	lea    -0x168(%ebp),%edx
f011d94d:	b9 14 00 00 00       	mov    $0x14,%ecx
f011d952:	b8 00 00 00 00       	mov    $0x0,%eax
f011d957:	89 d7                	mov    %edx,%edi
f011d959:	f3 ab                	rep stos %eax,%es:(%edi)
	uint32 freeFrames;
	uint32 freeDiskFrames;

	//[1] Attempt to allocate more than heap size
	{
		ptr_allocations[0] = kmalloc(KERNEL_HEAP_MAX - ACTUAL_START + 1);
f011d95b:	c7 45 f4 00 10 00 00 	movl   $0x1000,-0xc(%ebp)
f011d962:	8b 45 f4             	mov    -0xc(%ebp),%eax
f011d965:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011d96a:	89 45 f0             	mov    %eax,-0x10(%ebp)
f011d96d:	8b 45 f0             	mov    -0x10(%ebp),%eax
f011d970:	ba 00 00 00 00       	mov    $0x0,%edx
f011d975:	f7 75 f4             	divl   -0xc(%ebp)
f011d978:	8b 45 f0             	mov    -0x10(%ebp),%eax
f011d97b:	29 d0                	sub    %edx,%eax
f011d97d:	89 c1                	mov    %eax,%ecx
f011d97f:	c7 45 ec 00 10 00 00 	movl   $0x1000,-0x14(%ebp)
f011d986:	a0 40 26 78 f0       	mov    0xf0782640,%al
f011d98b:	0f b6 d0             	movzbl %al,%edx
f011d98e:	8b 45 ec             	mov    -0x14(%ebp),%eax
f011d991:	01 d0                	add    %edx,%eax
f011d993:	48                   	dec    %eax
f011d994:	89 45 e8             	mov    %eax,-0x18(%ebp)
f011d997:	8b 45 e8             	mov    -0x18(%ebp),%eax
f011d99a:	ba 00 00 00 00       	mov    $0x0,%edx
f011d99f:	f7 75 ec             	divl   -0x14(%ebp)
f011d9a2:	8b 45 e8             	mov    -0x18(%ebp),%eax
f011d9a5:	29 d0                	sub    %edx,%eax
f011d9a7:	01 c1                	add    %eax,%ecx
f011d9a9:	c7 45 e4 00 10 00 00 	movl   $0x1000,-0x1c(%ebp)
f011d9b0:	a0 40 26 78 f0       	mov    0xf0782640,%al
f011d9b5:	0f b6 c0             	movzbl %al,%eax
f011d9b8:	c1 e0 04             	shl    $0x4,%eax
f011d9bb:	89 c2                	mov    %eax,%edx
f011d9bd:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f011d9c0:	01 d0                	add    %edx,%eax
f011d9c2:	48                   	dec    %eax
f011d9c3:	89 45 e0             	mov    %eax,-0x20(%ebp)
f011d9c6:	8b 45 e0             	mov    -0x20(%ebp),%eax
f011d9c9:	ba 00 00 00 00       	mov    $0x0,%edx
f011d9ce:	f7 75 e4             	divl   -0x1c(%ebp)
f011d9d1:	8b 45 e0             	mov    -0x20(%ebp),%eax
f011d9d4:	29 d0                	sub    %edx,%eax
f011d9d6:	01 c8                	add    %ecx,%eax
f011d9d8:	ba 01 b0 ff 09       	mov    $0x9ffb001,%edx
f011d9dd:	29 c2                	sub    %eax,%edx
f011d9df:	89 d0                	mov    %edx,%eax
f011d9e1:	83 ec 0c             	sub    $0xc,%esp
f011d9e4:	50                   	push   %eax
f011d9e5:	e8 9b 9e fe ff       	call   f0107885 <kmalloc>
f011d9ea:	83 c4 10             	add    $0x10,%esp
f011d9ed:	89 85 98 fe ff ff    	mov    %eax,-0x168(%ebp)
		if (ptr_allocations[0] != NULL) panic("kmalloc: Attempt to allocate more than heap size, should return NULL");
f011d9f3:	8b 85 98 fe ff ff    	mov    -0x168(%ebp),%eax
f011d9f9:	85 c0                	test   %eax,%eax
f011d9fb:	74 17                	je     f011da14 <test_kmalloc_firstfit2+0x108>
f011d9fd:	83 ec 04             	sub    $0x4,%esp
f011da00:	68 bc b9 13 f0       	push   $0xf013b9bc
f011da05:	68 97 03 00 00       	push   $0x397
f011da0a:	68 7a b3 13 f0       	push   $0xf013b37a
f011da0f:	e8 f1 27 fe ff       	call   f0100205 <_panic>

	//[2] Attempt to allocate space more than any available fragment
	//	a) Create Fragments
	{
		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f011da14:	e8 84 f1 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f011da19:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011da1c:	e8 a7 63 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011da21:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[0] = kmalloc(2*Mega-kilo);
f011da24:	83 ec 0c             	sub    $0xc,%esp
f011da27:	68 00 fc 1f 00       	push   $0x1ffc00
f011da2c:	e8 54 9e fe ff       	call   f0107885 <kmalloc>
f011da31:	83 c4 10             	add    $0x10,%esp
f011da34:	89 85 98 fe ff ff    	mov    %eax,-0x168(%ebp)
		if ((uint32) ptr_allocations[0] != (ACTUAL_START)) panic("Wrong start address for the allocated space... ");
f011da3a:	8b 85 98 fe ff ff    	mov    -0x168(%ebp),%eax
f011da40:	89 c1                	mov    %eax,%ecx
f011da42:	c7 45 d4 00 10 00 00 	movl   $0x1000,-0x2c(%ebp)
f011da49:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f011da4c:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011da51:	89 45 d0             	mov    %eax,-0x30(%ebp)
f011da54:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011da57:	ba 00 00 00 00       	mov    $0x0,%edx
f011da5c:	f7 75 d4             	divl   -0x2c(%ebp)
f011da5f:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011da62:	29 d0                	sub    %edx,%eax
f011da64:	89 c3                	mov    %eax,%ebx
f011da66:	c7 45 cc 00 10 00 00 	movl   $0x1000,-0x34(%ebp)
f011da6d:	a0 40 26 78 f0       	mov    0xf0782640,%al
f011da72:	0f b6 d0             	movzbl %al,%edx
f011da75:	8b 45 cc             	mov    -0x34(%ebp),%eax
f011da78:	01 d0                	add    %edx,%eax
f011da7a:	48                   	dec    %eax
f011da7b:	89 45 c8             	mov    %eax,-0x38(%ebp)
f011da7e:	8b 45 c8             	mov    -0x38(%ebp),%eax
f011da81:	ba 00 00 00 00       	mov    $0x0,%edx
f011da86:	f7 75 cc             	divl   -0x34(%ebp)
f011da89:	8b 45 c8             	mov    -0x38(%ebp),%eax
f011da8c:	29 d0                	sub    %edx,%eax
f011da8e:	01 c3                	add    %eax,%ebx
f011da90:	c7 45 c4 00 10 00 00 	movl   $0x1000,-0x3c(%ebp)
f011da97:	a0 40 26 78 f0       	mov    0xf0782640,%al
f011da9c:	0f b6 c0             	movzbl %al,%eax
f011da9f:	c1 e0 04             	shl    $0x4,%eax
f011daa2:	89 c2                	mov    %eax,%edx
f011daa4:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f011daa7:	01 d0                	add    %edx,%eax
f011daa9:	48                   	dec    %eax
f011daaa:	89 45 c0             	mov    %eax,-0x40(%ebp)
f011daad:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011dab0:	ba 00 00 00 00       	mov    $0x0,%edx
f011dab5:	f7 75 c4             	divl   -0x3c(%ebp)
f011dab8:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011dabb:	29 d0                	sub    %edx,%eax
f011dabd:	01 d8                	add    %ebx,%eax
f011dabf:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f011dac4:	39 c1                	cmp    %eax,%ecx
f011dac6:	74 17                	je     f011dadf <test_kmalloc_firstfit2+0x1d3>
f011dac8:	83 ec 04             	sub    $0x4,%esp
f011dacb:	68 94 b7 13 f0       	push   $0xf013b794
f011dad0:	68 a1 03 00 00       	push   $0x3a1
f011dad5:	68 7a b3 13 f0       	push   $0xf013b37a
f011dada:	e8 26 27 fe ff       	call   f0100205 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011dadf:	e8 e4 62 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011dae4:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011dae7:	74 17                	je     f011db00 <test_kmalloc_firstfit2+0x1f4>
f011dae9:	83 ec 04             	sub    $0x4,%esp
f011daec:	68 94 b3 13 f0       	push   $0xf013b394
f011daf1:	68 a2 03 00 00       	push   $0x3a2
f011daf6:	68 7a b3 13 f0       	push   $0xf013b37a
f011dafb:	e8 05 27 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: ");
f011db00:	e8 98 f0 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f011db05:	8b 55 dc             	mov    -0x24(%ebp),%edx
f011db08:	29 c2                	sub    %eax,%edx
f011db0a:	89 d0                	mov    %edx,%eax
f011db0c:	3d 00 02 00 00       	cmp    $0x200,%eax
f011db11:	74 17                	je     f011db2a <test_kmalloc_firstfit2+0x21e>
f011db13:	83 ec 04             	sub    $0x4,%esp
f011db16:	68 c4 b7 13 f0       	push   $0xf013b7c4
f011db1b:	68 a3 03 00 00       	push   $0x3a3
f011db20:	68 7a b3 13 f0       	push   $0xf013b37a
f011db25:	e8 db 26 fe ff       	call   f0100205 <_panic>

		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f011db2a:	e8 6e f0 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f011db2f:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011db32:	e8 91 62 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011db37:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[1] = kmalloc(2*Mega-kilo);
f011db3a:	83 ec 0c             	sub    $0xc,%esp
f011db3d:	68 00 fc 1f 00       	push   $0x1ffc00
f011db42:	e8 3e 9d fe ff       	call   f0107885 <kmalloc>
f011db47:	83 c4 10             	add    $0x10,%esp
f011db4a:	89 85 9c fe ff ff    	mov    %eax,-0x164(%ebp)
		if ((uint32) ptr_allocations[1] != (ACTUAL_START + 2*Mega)) panic("Wrong start address for the allocated space... ");
f011db50:	8b 85 9c fe ff ff    	mov    -0x164(%ebp),%eax
f011db56:	89 c1                	mov    %eax,%ecx
f011db58:	c7 45 bc 00 10 00 00 	movl   $0x1000,-0x44(%ebp)
f011db5f:	8b 45 bc             	mov    -0x44(%ebp),%eax
f011db62:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011db67:	89 45 b8             	mov    %eax,-0x48(%ebp)
f011db6a:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011db6d:	ba 00 00 00 00       	mov    $0x0,%edx
f011db72:	f7 75 bc             	divl   -0x44(%ebp)
f011db75:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011db78:	29 d0                	sub    %edx,%eax
f011db7a:	89 c3                	mov    %eax,%ebx
f011db7c:	c7 45 b4 00 10 00 00 	movl   $0x1000,-0x4c(%ebp)
f011db83:	a0 40 26 78 f0       	mov    0xf0782640,%al
f011db88:	0f b6 d0             	movzbl %al,%edx
f011db8b:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f011db8e:	01 d0                	add    %edx,%eax
f011db90:	48                   	dec    %eax
f011db91:	89 45 b0             	mov    %eax,-0x50(%ebp)
f011db94:	8b 45 b0             	mov    -0x50(%ebp),%eax
f011db97:	ba 00 00 00 00       	mov    $0x0,%edx
f011db9c:	f7 75 b4             	divl   -0x4c(%ebp)
f011db9f:	8b 45 b0             	mov    -0x50(%ebp),%eax
f011dba2:	29 d0                	sub    %edx,%eax
f011dba4:	01 c3                	add    %eax,%ebx
f011dba6:	c7 45 ac 00 10 00 00 	movl   $0x1000,-0x54(%ebp)
f011dbad:	a0 40 26 78 f0       	mov    0xf0782640,%al
f011dbb2:	0f b6 c0             	movzbl %al,%eax
f011dbb5:	c1 e0 04             	shl    $0x4,%eax
f011dbb8:	89 c2                	mov    %eax,%edx
f011dbba:	8b 45 ac             	mov    -0x54(%ebp),%eax
f011dbbd:	01 d0                	add    %edx,%eax
f011dbbf:	48                   	dec    %eax
f011dbc0:	89 45 a8             	mov    %eax,-0x58(%ebp)
f011dbc3:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011dbc6:	ba 00 00 00 00       	mov    $0x0,%edx
f011dbcb:	f7 75 ac             	divl   -0x54(%ebp)
f011dbce:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011dbd1:	29 d0                	sub    %edx,%eax
f011dbd3:	01 d8                	add    %ebx,%eax
f011dbd5:	2d 00 c0 df 09       	sub    $0x9dfc000,%eax
f011dbda:	39 c1                	cmp    %eax,%ecx
f011dbdc:	74 17                	je     f011dbf5 <test_kmalloc_firstfit2+0x2e9>
f011dbde:	83 ec 04             	sub    $0x4,%esp
f011dbe1:	68 94 b7 13 f0       	push   $0xf013b794
f011dbe6:	68 a9 03 00 00       	push   $0x3a9
f011dbeb:	68 7a b3 13 f0       	push   $0xf013b37a
f011dbf0:	e8 10 26 fe ff       	call   f0100205 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011dbf5:	e8 ce 61 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011dbfa:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011dbfd:	74 17                	je     f011dc16 <test_kmalloc_firstfit2+0x30a>
f011dbff:	83 ec 04             	sub    $0x4,%esp
f011dc02:	68 94 b3 13 f0       	push   $0xf013b394
f011dc07:	68 aa 03 00 00       	push   $0x3aa
f011dc0c:	68 7a b3 13 f0       	push   $0xf013b37a
f011dc11:	e8 ef 25 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: ");
f011dc16:	e8 82 ef fe ff       	call   f010cb9d <sys_calculate_free_frames>
f011dc1b:	8b 55 dc             	mov    -0x24(%ebp),%edx
f011dc1e:	29 c2                	sub    %eax,%edx
f011dc20:	89 d0                	mov    %edx,%eax
f011dc22:	3d 00 02 00 00       	cmp    $0x200,%eax
f011dc27:	74 17                	je     f011dc40 <test_kmalloc_firstfit2+0x334>
f011dc29:	83 ec 04             	sub    $0x4,%esp
f011dc2c:	68 c4 b7 13 f0       	push   $0xf013b7c4
f011dc31:	68 ab 03 00 00       	push   $0x3ab
f011dc36:	68 7a b3 13 f0       	push   $0xf013b37a
f011dc3b:	e8 c5 25 fe ff       	call   f0100205 <_panic>

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f011dc40:	e8 58 ef fe ff       	call   f010cb9d <sys_calculate_free_frames>
f011dc45:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011dc48:	e8 7b 61 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011dc4d:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[2] = kmalloc(2*kilo);
f011dc50:	83 ec 0c             	sub    $0xc,%esp
f011dc53:	68 00 08 00 00       	push   $0x800
f011dc58:	e8 28 9c fe ff       	call   f0107885 <kmalloc>
f011dc5d:	83 c4 10             	add    $0x10,%esp
f011dc60:	89 85 a0 fe ff ff    	mov    %eax,-0x160(%ebp)
		if ((uint32) ptr_allocations[2] < (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... ");
f011dc66:	8b 85 a0 fe ff ff    	mov    -0x160(%ebp),%eax
f011dc6c:	89 c1                	mov    %eax,%ecx
f011dc6e:	c7 45 a4 00 10 00 00 	movl   $0x1000,-0x5c(%ebp)
f011dc75:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f011dc78:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011dc7d:	89 45 a0             	mov    %eax,-0x60(%ebp)
f011dc80:	8b 45 a0             	mov    -0x60(%ebp),%eax
f011dc83:	ba 00 00 00 00       	mov    $0x0,%edx
f011dc88:	f7 75 a4             	divl   -0x5c(%ebp)
f011dc8b:	8b 45 a0             	mov    -0x60(%ebp),%eax
f011dc8e:	29 d0                	sub    %edx,%eax
f011dc90:	89 c3                	mov    %eax,%ebx
f011dc92:	c7 45 9c 00 10 00 00 	movl   $0x1000,-0x64(%ebp)
f011dc99:	a0 40 26 78 f0       	mov    0xf0782640,%al
f011dc9e:	0f b6 d0             	movzbl %al,%edx
f011dca1:	8b 45 9c             	mov    -0x64(%ebp),%eax
f011dca4:	01 d0                	add    %edx,%eax
f011dca6:	48                   	dec    %eax
f011dca7:	89 45 98             	mov    %eax,-0x68(%ebp)
f011dcaa:	8b 45 98             	mov    -0x68(%ebp),%eax
f011dcad:	ba 00 00 00 00       	mov    $0x0,%edx
f011dcb2:	f7 75 9c             	divl   -0x64(%ebp)
f011dcb5:	8b 45 98             	mov    -0x68(%ebp),%eax
f011dcb8:	29 d0                	sub    %edx,%eax
f011dcba:	01 c3                	add    %eax,%ebx
f011dcbc:	c7 45 94 00 10 00 00 	movl   $0x1000,-0x6c(%ebp)
f011dcc3:	a0 40 26 78 f0       	mov    0xf0782640,%al
f011dcc8:	0f b6 c0             	movzbl %al,%eax
f011dccb:	c1 e0 04             	shl    $0x4,%eax
f011dcce:	89 c2                	mov    %eax,%edx
f011dcd0:	8b 45 94             	mov    -0x6c(%ebp),%eax
f011dcd3:	01 d0                	add    %edx,%eax
f011dcd5:	48                   	dec    %eax
f011dcd6:	89 45 90             	mov    %eax,-0x70(%ebp)
f011dcd9:	8b 45 90             	mov    -0x70(%ebp),%eax
f011dcdc:	ba 00 00 00 00       	mov    $0x0,%edx
f011dce1:	f7 75 94             	divl   -0x6c(%ebp)
f011dce4:	8b 45 90             	mov    -0x70(%ebp),%eax
f011dce7:	29 d0                	sub    %edx,%eax
f011dce9:	01 d8                	add    %ebx,%eax
f011dceb:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
f011dcf0:	39 c1                	cmp    %eax,%ecx
f011dcf2:	73 17                	jae    f011dd0b <test_kmalloc_firstfit2+0x3ff>
f011dcf4:	83 ec 04             	sub    $0x4,%esp
f011dcf7:	68 94 b7 13 f0       	push   $0xf013b794
f011dcfc:	68 b1 03 00 00       	push   $0x3b1
f011dd01:	68 7a b3 13 f0       	push   $0xf013b37a
f011dd06:	e8 fa 24 fe ff       	call   f0100205 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011dd0b:	e8 b8 60 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011dd10:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011dd13:	74 17                	je     f011dd2c <test_kmalloc_firstfit2+0x420>
f011dd15:	83 ec 04             	sub    $0x4,%esp
f011dd18:	68 94 b3 13 f0       	push   $0xf013b394
f011dd1d:	68 b2 03 00 00       	push   $0x3b2
f011dd22:	68 7a b3 13 f0       	push   $0xf013b37a
f011dd27:	e8 d9 24 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: ");
f011dd2c:	e8 6c ee fe ff       	call   f010cb9d <sys_calculate_free_frames>
f011dd31:	8b 55 dc             	mov    -0x24(%ebp),%edx
f011dd34:	29 c2                	sub    %eax,%edx
f011dd36:	89 d0                	mov    %edx,%eax
f011dd38:	83 f8 01             	cmp    $0x1,%eax
f011dd3b:	74 17                	je     f011dd54 <test_kmalloc_firstfit2+0x448>
f011dd3d:	83 ec 04             	sub    $0x4,%esp
f011dd40:	68 c4 b7 13 f0       	push   $0xf013b7c4
f011dd45:	68 b3 03 00 00       	push   $0x3b3
f011dd4a:	68 7a b3 13 f0       	push   $0xf013b37a
f011dd4f:	e8 b1 24 fe ff       	call   f0100205 <_panic>

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f011dd54:	e8 44 ee fe ff       	call   f010cb9d <sys_calculate_free_frames>
f011dd59:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011dd5c:	e8 67 60 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011dd61:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[3] = kmalloc(2*kilo);
f011dd64:	83 ec 0c             	sub    $0xc,%esp
f011dd67:	68 00 08 00 00       	push   $0x800
f011dd6c:	e8 14 9b fe ff       	call   f0107885 <kmalloc>
f011dd71:	83 c4 10             	add    $0x10,%esp
f011dd74:	89 85 a4 fe ff ff    	mov    %eax,-0x15c(%ebp)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... ");
f011dd7a:	8b 85 a4 fe ff ff    	mov    -0x15c(%ebp),%eax
f011dd80:	89 c1                	mov    %eax,%ecx
f011dd82:	c7 45 8c 00 10 00 00 	movl   $0x1000,-0x74(%ebp)
f011dd89:	8b 45 8c             	mov    -0x74(%ebp),%eax
f011dd8c:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011dd91:	89 45 88             	mov    %eax,-0x78(%ebp)
f011dd94:	8b 45 88             	mov    -0x78(%ebp),%eax
f011dd97:	ba 00 00 00 00       	mov    $0x0,%edx
f011dd9c:	f7 75 8c             	divl   -0x74(%ebp)
f011dd9f:	8b 45 88             	mov    -0x78(%ebp),%eax
f011dda2:	29 d0                	sub    %edx,%eax
f011dda4:	89 c3                	mov    %eax,%ebx
f011dda6:	c7 45 84 00 10 00 00 	movl   $0x1000,-0x7c(%ebp)
f011ddad:	a0 40 26 78 f0       	mov    0xf0782640,%al
f011ddb2:	0f b6 d0             	movzbl %al,%edx
f011ddb5:	8b 45 84             	mov    -0x7c(%ebp),%eax
f011ddb8:	01 d0                	add    %edx,%eax
f011ddba:	48                   	dec    %eax
f011ddbb:	89 45 80             	mov    %eax,-0x80(%ebp)
f011ddbe:	8b 45 80             	mov    -0x80(%ebp),%eax
f011ddc1:	ba 00 00 00 00       	mov    $0x0,%edx
f011ddc6:	f7 75 84             	divl   -0x7c(%ebp)
f011ddc9:	8b 45 80             	mov    -0x80(%ebp),%eax
f011ddcc:	29 d0                	sub    %edx,%eax
f011ddce:	01 c3                	add    %eax,%ebx
f011ddd0:	c7 85 7c ff ff ff 00 	movl   $0x1000,-0x84(%ebp)
f011ddd7:	10 00 00 
f011ddda:	a0 40 26 78 f0       	mov    0xf0782640,%al
f011dddf:	0f b6 c0             	movzbl %al,%eax
f011dde2:	c1 e0 04             	shl    $0x4,%eax
f011dde5:	89 c2                	mov    %eax,%edx
f011dde7:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f011dded:	01 d0                	add    %edx,%eax
f011ddef:	48                   	dec    %eax
f011ddf0:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)
f011ddf6:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f011ddfc:	ba 00 00 00 00       	mov    $0x0,%edx
f011de01:	f7 b5 7c ff ff ff    	divl   -0x84(%ebp)
f011de07:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f011de0d:	29 d0                	sub    %edx,%eax
f011de0f:	01 d8                	add    %ebx,%eax
f011de11:	2d 00 b0 bf 09       	sub    $0x9bfb000,%eax
f011de16:	39 c1                	cmp    %eax,%ecx
f011de18:	74 17                	je     f011de31 <test_kmalloc_firstfit2+0x525>
f011de1a:	83 ec 04             	sub    $0x4,%esp
f011de1d:	68 94 b7 13 f0       	push   $0xf013b794
f011de22:	68 b9 03 00 00       	push   $0x3b9
f011de27:	68 7a b3 13 f0       	push   $0xf013b37a
f011de2c:	e8 d4 23 fe ff       	call   f0100205 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011de31:	e8 92 5f fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011de36:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011de39:	74 17                	je     f011de52 <test_kmalloc_firstfit2+0x546>
f011de3b:	83 ec 04             	sub    $0x4,%esp
f011de3e:	68 94 b3 13 f0       	push   $0xf013b394
f011de43:	68 ba 03 00 00       	push   $0x3ba
f011de48:	68 7a b3 13 f0       	push   $0xf013b37a
f011de4d:	e8 b3 23 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: ");
f011de52:	e8 46 ed fe ff       	call   f010cb9d <sys_calculate_free_frames>
f011de57:	8b 55 dc             	mov    -0x24(%ebp),%edx
f011de5a:	29 c2                	sub    %eax,%edx
f011de5c:	89 d0                	mov    %edx,%eax
f011de5e:	83 f8 01             	cmp    $0x1,%eax
f011de61:	74 17                	je     f011de7a <test_kmalloc_firstfit2+0x56e>
f011de63:	83 ec 04             	sub    $0x4,%esp
f011de66:	68 c4 b7 13 f0       	push   $0xf013b7c4
f011de6b:	68 bb 03 00 00       	push   $0x3bb
f011de70:	68 7a b3 13 f0       	push   $0xf013b37a
f011de75:	e8 8b 23 fe ff       	call   f0100205 <_panic>

		//4 KB Hole
		freeFrames = sys_calculate_free_frames() ;
f011de7a:	e8 1e ed fe ff       	call   f010cb9d <sys_calculate_free_frames>
f011de7f:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011de82:	e8 41 5f fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011de87:	89 45 d8             	mov    %eax,-0x28(%ebp)
		kfree(ptr_allocations[2]);
f011de8a:	8b 85 a0 fe ff ff    	mov    -0x160(%ebp),%eax
f011de90:	83 ec 0c             	sub    $0xc,%esp
f011de93:	50                   	push   %eax
f011de94:	e8 b7 9a fe ff       	call   f0107950 <kfree>
f011de99:	83 c4 10             	add    $0x10,%esp
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011de9c:	e8 27 5f fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011dea1:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011dea4:	74 17                	je     f011debd <test_kmalloc_firstfit2+0x5b1>
f011dea6:	83 ec 04             	sub    $0x4,%esp
f011dea9:	68 94 b3 13 f0       	push   $0xf013b394
f011deae:	68 c1 03 00 00       	push   $0x3c1
f011deb3:	68 7a b3 13 f0       	push   $0xf013b37a
f011deb8:	e8 48 23 fe ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 1) panic("Wrong free: ");
f011debd:	e8 db ec fe ff       	call   f010cb9d <sys_calculate_free_frames>
f011dec2:	2b 45 dc             	sub    -0x24(%ebp),%eax
f011dec5:	83 f8 01             	cmp    $0x1,%eax
f011dec8:	74 17                	je     f011dee1 <test_kmalloc_firstfit2+0x5d5>
f011deca:	83 ec 04             	sub    $0x4,%esp
f011decd:	68 d7 b7 13 f0       	push   $0xf013b7d7
f011ded2:	68 c2 03 00 00       	push   $0x3c2
f011ded7:	68 7a b3 13 f0       	push   $0xf013b37a
f011dedc:	e8 24 23 fe ff       	call   f0100205 <_panic>

		//7 KB
		freeFrames = sys_calculate_free_frames() ;
f011dee1:	e8 b7 ec fe ff       	call   f010cb9d <sys_calculate_free_frames>
f011dee6:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011dee9:	e8 da 5e fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011deee:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[4] = kmalloc(7*kilo);
f011def1:	83 ec 0c             	sub    $0xc,%esp
f011def4:	68 00 1c 00 00       	push   $0x1c00
f011def9:	e8 87 99 fe ff       	call   f0107885 <kmalloc>
f011defe:	83 c4 10             	add    $0x10,%esp
f011df01:	89 85 a8 fe ff ff    	mov    %eax,-0x158(%ebp)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... ");
f011df07:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f011df0d:	89 c1                	mov    %eax,%ecx
f011df0f:	c7 85 74 ff ff ff 00 	movl   $0x1000,-0x8c(%ebp)
f011df16:	10 00 00 
f011df19:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f011df1f:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011df24:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
f011df2a:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f011df30:	ba 00 00 00 00       	mov    $0x0,%edx
f011df35:	f7 b5 74 ff ff ff    	divl   -0x8c(%ebp)
f011df3b:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f011df41:	29 d0                	sub    %edx,%eax
f011df43:	89 c3                	mov    %eax,%ebx
f011df45:	c7 85 6c ff ff ff 00 	movl   $0x1000,-0x94(%ebp)
f011df4c:	10 00 00 
f011df4f:	a0 40 26 78 f0       	mov    0xf0782640,%al
f011df54:	0f b6 d0             	movzbl %al,%edx
f011df57:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f011df5d:	01 d0                	add    %edx,%eax
f011df5f:	48                   	dec    %eax
f011df60:	89 85 68 ff ff ff    	mov    %eax,-0x98(%ebp)
f011df66:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f011df6c:	ba 00 00 00 00       	mov    $0x0,%edx
f011df71:	f7 b5 6c ff ff ff    	divl   -0x94(%ebp)
f011df77:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f011df7d:	29 d0                	sub    %edx,%eax
f011df7f:	01 c3                	add    %eax,%ebx
f011df81:	c7 85 64 ff ff ff 00 	movl   $0x1000,-0x9c(%ebp)
f011df88:	10 00 00 
f011df8b:	a0 40 26 78 f0       	mov    0xf0782640,%al
f011df90:	0f b6 c0             	movzbl %al,%eax
f011df93:	c1 e0 04             	shl    $0x4,%eax
f011df96:	89 c2                	mov    %eax,%edx
f011df98:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f011df9e:	01 d0                	add    %edx,%eax
f011dfa0:	48                   	dec    %eax
f011dfa1:	89 85 60 ff ff ff    	mov    %eax,-0xa0(%ebp)
f011dfa7:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f011dfad:	ba 00 00 00 00       	mov    $0x0,%edx
f011dfb2:	f7 b5 64 ff ff ff    	divl   -0x9c(%ebp)
f011dfb8:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f011dfbe:	29 d0                	sub    %edx,%eax
f011dfc0:	01 d8                	add    %ebx,%eax
f011dfc2:	2d 00 a0 bf 09       	sub    $0x9bfa000,%eax
f011dfc7:	39 c1                	cmp    %eax,%ecx
f011dfc9:	74 17                	je     f011dfe2 <test_kmalloc_firstfit2+0x6d6>
f011dfcb:	83 ec 04             	sub    $0x4,%esp
f011dfce:	68 94 b7 13 f0       	push   $0xf013b794
f011dfd3:	68 c8 03 00 00       	push   $0x3c8
f011dfd8:	68 7a b3 13 f0       	push   $0xf013b37a
f011dfdd:	e8 23 22 fe ff       	call   f0100205 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011dfe2:	e8 e1 5d fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011dfe7:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011dfea:	74 17                	je     f011e003 <test_kmalloc_firstfit2+0x6f7>
f011dfec:	83 ec 04             	sub    $0x4,%esp
f011dfef:	68 94 b3 13 f0       	push   $0xf013b394
f011dff4:	68 c9 03 00 00       	push   $0x3c9
f011dff9:	68 7a b3 13 f0       	push   $0xf013b37a
f011dffe:	e8 02 22 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: ");
f011e003:	e8 95 eb fe ff       	call   f010cb9d <sys_calculate_free_frames>
f011e008:	8b 55 dc             	mov    -0x24(%ebp),%edx
f011e00b:	29 c2                	sub    %eax,%edx
f011e00d:	89 d0                	mov    %edx,%eax
f011e00f:	83 f8 02             	cmp    $0x2,%eax
f011e012:	74 17                	je     f011e02b <test_kmalloc_firstfit2+0x71f>
f011e014:	83 ec 04             	sub    $0x4,%esp
f011e017:	68 c4 b7 13 f0       	push   $0xf013b7c4
f011e01c:	68 ca 03 00 00       	push   $0x3ca
f011e021:	68 7a b3 13 f0       	push   $0xf013b37a
f011e026:	e8 da 21 fe ff       	call   f0100205 <_panic>

		//2 MB Hole
		freeFrames = sys_calculate_free_frames() ;
f011e02b:	e8 6d eb fe ff       	call   f010cb9d <sys_calculate_free_frames>
f011e030:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011e033:	e8 90 5d fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011e038:	89 45 d8             	mov    %eax,-0x28(%ebp)
		kfree(ptr_allocations[0]);
f011e03b:	8b 85 98 fe ff ff    	mov    -0x168(%ebp),%eax
f011e041:	83 ec 0c             	sub    $0xc,%esp
f011e044:	50                   	push   %eax
f011e045:	e8 06 99 fe ff       	call   f0107950 <kfree>
f011e04a:	83 c4 10             	add    $0x10,%esp
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011e04d:	e8 76 5d fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011e052:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011e055:	74 17                	je     f011e06e <test_kmalloc_firstfit2+0x762>
f011e057:	83 ec 04             	sub    $0x4,%esp
f011e05a:	68 94 b3 13 f0       	push   $0xf013b394
f011e05f:	68 d0 03 00 00       	push   $0x3d0
f011e064:	68 7a b3 13 f0       	push   $0xf013b37a
f011e069:	e8 97 21 fe ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512) panic("Wrong free: ");
f011e06e:	e8 2a eb fe ff       	call   f010cb9d <sys_calculate_free_frames>
f011e073:	2b 45 dc             	sub    -0x24(%ebp),%eax
f011e076:	3d 00 02 00 00       	cmp    $0x200,%eax
f011e07b:	74 17                	je     f011e094 <test_kmalloc_firstfit2+0x788>
f011e07d:	83 ec 04             	sub    $0x4,%esp
f011e080:	68 d7 b7 13 f0       	push   $0xf013b7d7
f011e085:	68 d1 03 00 00       	push   $0x3d1
f011e08a:	68 7a b3 13 f0       	push   $0xf013b37a
f011e08f:	e8 71 21 fe ff       	call   f0100205 <_panic>

		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f011e094:	e8 04 eb fe ff       	call   f010cb9d <sys_calculate_free_frames>
f011e099:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011e09c:	e8 27 5d fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011e0a1:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[5] = kmalloc(3*Mega-kilo);
f011e0a4:	83 ec 0c             	sub    $0xc,%esp
f011e0a7:	68 00 fc 2f 00       	push   $0x2ffc00
f011e0ac:	e8 d4 97 fe ff       	call   f0107885 <kmalloc>
f011e0b1:	83 c4 10             	add    $0x10,%esp
f011e0b4:	89 85 ac fe ff ff    	mov    %eax,-0x154(%ebp)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo)) panic("Wrong start address for the allocated space... ");
f011e0ba:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f011e0c0:	89 c1                	mov    %eax,%ecx
f011e0c2:	c7 85 5c ff ff ff 00 	movl   $0x1000,-0xa4(%ebp)
f011e0c9:	10 00 00 
f011e0cc:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f011e0d2:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011e0d7:	89 85 58 ff ff ff    	mov    %eax,-0xa8(%ebp)
f011e0dd:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f011e0e3:	ba 00 00 00 00       	mov    $0x0,%edx
f011e0e8:	f7 b5 5c ff ff ff    	divl   -0xa4(%ebp)
f011e0ee:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f011e0f4:	29 d0                	sub    %edx,%eax
f011e0f6:	89 c3                	mov    %eax,%ebx
f011e0f8:	c7 85 54 ff ff ff 00 	movl   $0x1000,-0xac(%ebp)
f011e0ff:	10 00 00 
f011e102:	a0 40 26 78 f0       	mov    0xf0782640,%al
f011e107:	0f b6 d0             	movzbl %al,%edx
f011e10a:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f011e110:	01 d0                	add    %edx,%eax
f011e112:	48                   	dec    %eax
f011e113:	89 85 50 ff ff ff    	mov    %eax,-0xb0(%ebp)
f011e119:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f011e11f:	ba 00 00 00 00       	mov    $0x0,%edx
f011e124:	f7 b5 54 ff ff ff    	divl   -0xac(%ebp)
f011e12a:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f011e130:	29 d0                	sub    %edx,%eax
f011e132:	01 c3                	add    %eax,%ebx
f011e134:	c7 85 4c ff ff ff 00 	movl   $0x1000,-0xb4(%ebp)
f011e13b:	10 00 00 
f011e13e:	a0 40 26 78 f0       	mov    0xf0782640,%al
f011e143:	0f b6 c0             	movzbl %al,%eax
f011e146:	c1 e0 04             	shl    $0x4,%eax
f011e149:	89 c2                	mov    %eax,%edx
f011e14b:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f011e151:	01 d0                	add    %edx,%eax
f011e153:	48                   	dec    %eax
f011e154:	89 85 48 ff ff ff    	mov    %eax,-0xb8(%ebp)
f011e15a:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f011e160:	ba 00 00 00 00       	mov    $0x0,%edx
f011e165:	f7 b5 4c ff ff ff    	divl   -0xb4(%ebp)
f011e16b:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f011e171:	29 d0                	sub    %edx,%eax
f011e173:	01 d8                	add    %ebx,%eax
f011e175:	2d 00 80 bf 09       	sub    $0x9bf8000,%eax
f011e17a:	39 c1                	cmp    %eax,%ecx
f011e17c:	74 17                	je     f011e195 <test_kmalloc_firstfit2+0x889>
f011e17e:	83 ec 04             	sub    $0x4,%esp
f011e181:	68 94 b7 13 f0       	push   $0xf013b794
f011e186:	68 d7 03 00 00       	push   $0x3d7
f011e18b:	68 7a b3 13 f0       	push   $0xf013b37a
f011e190:	e8 70 20 fe ff       	call   f0100205 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011e195:	e8 2e 5c fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011e19a:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011e19d:	74 17                	je     f011e1b6 <test_kmalloc_firstfit2+0x8aa>
f011e19f:	83 ec 04             	sub    $0x4,%esp
f011e1a2:	68 94 b3 13 f0       	push   $0xf013b394
f011e1a7:	68 d8 03 00 00       	push   $0x3d8
f011e1ac:	68 7a b3 13 f0       	push   $0xf013b37a
f011e1b1:	e8 4f 20 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=  3*Mega/PAGE_SIZE) panic("Wrong allocation: ");
f011e1b6:	e8 e2 e9 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f011e1bb:	8b 55 dc             	mov    -0x24(%ebp),%edx
f011e1be:	29 c2                	sub    %eax,%edx
f011e1c0:	89 d0                	mov    %edx,%eax
f011e1c2:	3d 00 03 00 00       	cmp    $0x300,%eax
f011e1c7:	74 17                	je     f011e1e0 <test_kmalloc_firstfit2+0x8d4>
f011e1c9:	83 ec 04             	sub    $0x4,%esp
f011e1cc:	68 c4 b7 13 f0       	push   $0xf013b7c4
f011e1d1:	68 d9 03 00 00       	push   $0x3d9
f011e1d6:	68 7a b3 13 f0       	push   $0xf013b37a
f011e1db:	e8 25 20 fe ff       	call   f0100205 <_panic>

		//2 MB + 6 KB
		freeFrames = sys_calculate_free_frames() ;
f011e1e0:	e8 b8 e9 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f011e1e5:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011e1e8:	e8 db 5b fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011e1ed:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[6] = kmalloc(2*Mega + 6*kilo);
f011e1f0:	83 ec 0c             	sub    $0xc,%esp
f011e1f3:	68 00 18 20 00       	push   $0x201800
f011e1f8:	e8 88 96 fe ff       	call   f0107885 <kmalloc>
f011e1fd:	83 c4 10             	add    $0x10,%esp
f011e200:	89 85 b0 fe ff ff    	mov    %eax,-0x150(%ebp)
		if ((uint32) ptr_allocations[6] != (ACTUAL_START + 7*Mega + 16*kilo)) panic("Wrong start address for the allocated space... ");
f011e206:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f011e20c:	89 c1                	mov    %eax,%ecx
f011e20e:	c7 85 44 ff ff ff 00 	movl   $0x1000,-0xbc(%ebp)
f011e215:	10 00 00 
f011e218:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f011e21e:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011e223:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%ebp)
f011e229:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f011e22f:	ba 00 00 00 00       	mov    $0x0,%edx
f011e234:	f7 b5 44 ff ff ff    	divl   -0xbc(%ebp)
f011e23a:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f011e240:	29 d0                	sub    %edx,%eax
f011e242:	89 c3                	mov    %eax,%ebx
f011e244:	c7 85 3c ff ff ff 00 	movl   $0x1000,-0xc4(%ebp)
f011e24b:	10 00 00 
f011e24e:	a0 40 26 78 f0       	mov    0xf0782640,%al
f011e253:	0f b6 d0             	movzbl %al,%edx
f011e256:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f011e25c:	01 d0                	add    %edx,%eax
f011e25e:	48                   	dec    %eax
f011e25f:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
f011e265:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f011e26b:	ba 00 00 00 00       	mov    $0x0,%edx
f011e270:	f7 b5 3c ff ff ff    	divl   -0xc4(%ebp)
f011e276:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f011e27c:	29 d0                	sub    %edx,%eax
f011e27e:	01 c3                	add    %eax,%ebx
f011e280:	c7 85 34 ff ff ff 00 	movl   $0x1000,-0xcc(%ebp)
f011e287:	10 00 00 
f011e28a:	a0 40 26 78 f0       	mov    0xf0782640,%al
f011e28f:	0f b6 c0             	movzbl %al,%eax
f011e292:	c1 e0 04             	shl    $0x4,%eax
f011e295:	89 c2                	mov    %eax,%edx
f011e297:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f011e29d:	01 d0                	add    %edx,%eax
f011e29f:	48                   	dec    %eax
f011e2a0:	89 85 30 ff ff ff    	mov    %eax,-0xd0(%ebp)
f011e2a6:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f011e2ac:	ba 00 00 00 00       	mov    $0x0,%edx
f011e2b1:	f7 b5 34 ff ff ff    	divl   -0xcc(%ebp)
f011e2b7:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f011e2bd:	29 d0                	sub    %edx,%eax
f011e2bf:	01 d8                	add    %ebx,%eax
f011e2c1:	2d 00 80 8f 09       	sub    $0x98f8000,%eax
f011e2c6:	39 c1                	cmp    %eax,%ecx
f011e2c8:	74 17                	je     f011e2e1 <test_kmalloc_firstfit2+0x9d5>
f011e2ca:	83 ec 04             	sub    $0x4,%esp
f011e2cd:	68 94 b7 13 f0       	push   $0xf013b794
f011e2d2:	68 df 03 00 00       	push   $0x3df
f011e2d7:	68 7a b3 13 f0       	push   $0xf013b37a
f011e2dc:	e8 24 1f fe ff       	call   f0100205 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011e2e1:	e8 e2 5a fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011e2e6:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011e2e9:	74 17                	je     f011e302 <test_kmalloc_firstfit2+0x9f6>
f011e2eb:	83 ec 04             	sub    $0x4,%esp
f011e2ee:	68 94 b3 13 f0       	push   $0xf013b394
f011e2f3:	68 e0 03 00 00       	push   $0x3e0
f011e2f8:	68 7a b3 13 f0       	push   $0xf013b37a
f011e2fd:	e8 03 1f fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=  514) panic("Wrong allocation: ");
f011e302:	e8 96 e8 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f011e307:	8b 55 dc             	mov    -0x24(%ebp),%edx
f011e30a:	29 c2                	sub    %eax,%edx
f011e30c:	89 d0                	mov    %edx,%eax
f011e30e:	3d 02 02 00 00       	cmp    $0x202,%eax
f011e313:	74 17                	je     f011e32c <test_kmalloc_firstfit2+0xa20>
f011e315:	83 ec 04             	sub    $0x4,%esp
f011e318:	68 c4 b7 13 f0       	push   $0xf013b7c4
f011e31d:	68 e1 03 00 00       	push   $0x3e1
f011e322:	68 7a b3 13 f0       	push   $0xf013b37a
f011e327:	e8 d9 1e fe ff       	call   f0100205 <_panic>

		//3 MB Hole
		freeFrames = sys_calculate_free_frames() ;
f011e32c:	e8 6c e8 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f011e331:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011e334:	e8 8f 5a fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011e339:	89 45 d8             	mov    %eax,-0x28(%ebp)
		kfree(ptr_allocations[5]);
f011e33c:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f011e342:	83 ec 0c             	sub    $0xc,%esp
f011e345:	50                   	push   %eax
f011e346:	e8 05 96 fe ff       	call   f0107950 <kfree>
f011e34b:	83 c4 10             	add    $0x10,%esp
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011e34e:	e8 75 5a fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011e353:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011e356:	74 17                	je     f011e36f <test_kmalloc_firstfit2+0xa63>
f011e358:	83 ec 04             	sub    $0x4,%esp
f011e35b:	68 94 b3 13 f0       	push   $0xf013b394
f011e360:	68 e7 03 00 00       	push   $0x3e7
f011e365:	68 7a b3 13 f0       	push   $0xf013b37a
f011e36a:	e8 96 1e fe ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 768) panic("Wrong free: ");
f011e36f:	e8 29 e8 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f011e374:	2b 45 dc             	sub    -0x24(%ebp),%eax
f011e377:	3d 00 03 00 00       	cmp    $0x300,%eax
f011e37c:	74 17                	je     f011e395 <test_kmalloc_firstfit2+0xa89>
f011e37e:	83 ec 04             	sub    $0x4,%esp
f011e381:	68 d7 b7 13 f0       	push   $0xf013b7d7
f011e386:	68 e8 03 00 00       	push   $0x3e8
f011e38b:	68 7a b3 13 f0       	push   $0xf013b37a
f011e390:	e8 70 1e fe ff       	call   f0100205 <_panic>

		//2 MB Hole [Resulting Hole = 2 MB + 2 MB + 4 KB = 4 MB + 4 KB]
		freeFrames = sys_calculate_free_frames() ;
f011e395:	e8 03 e8 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f011e39a:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011e39d:	e8 26 5a fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011e3a2:	89 45 d8             	mov    %eax,-0x28(%ebp)
		kfree(ptr_allocations[1]);
f011e3a5:	8b 85 9c fe ff ff    	mov    -0x164(%ebp),%eax
f011e3ab:	83 ec 0c             	sub    $0xc,%esp
f011e3ae:	50                   	push   %eax
f011e3af:	e8 9c 95 fe ff       	call   f0107950 <kfree>
f011e3b4:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 512) panic("Wrong free: ");
f011e3b7:	e8 e1 e7 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f011e3bc:	2b 45 dc             	sub    -0x24(%ebp),%eax
f011e3bf:	3d 00 02 00 00       	cmp    $0x200,%eax
f011e3c4:	74 17                	je     f011e3dd <test_kmalloc_firstfit2+0xad1>
f011e3c6:	83 ec 04             	sub    $0x4,%esp
f011e3c9:	68 d7 b7 13 f0       	push   $0xf013b7d7
f011e3ce:	68 ee 03 00 00       	push   $0x3ee
f011e3d3:	68 7a b3 13 f0       	push   $0xf013b37a
f011e3d8:	e8 28 1e fe ff       	call   f0100205 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011e3dd:	e8 e6 59 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011e3e2:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011e3e5:	74 17                	je     f011e3fe <test_kmalloc_firstfit2+0xaf2>
f011e3e7:	83 ec 04             	sub    $0x4,%esp
f011e3ea:	68 94 b3 13 f0       	push   $0xf013b394
f011e3ef:	68 ef 03 00 00       	push   $0x3ef
f011e3f4:	68 7a b3 13 f0       	push   $0xf013b37a
f011e3f9:	e8 07 1e fe ff       	call   f0100205 <_panic>

		//5 MB
		freeFrames = sys_calculate_free_frames() ;
f011e3fe:	e8 9a e7 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f011e403:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011e406:	e8 bd 59 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011e40b:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[7] = kmalloc(5*Mega-kilo);
f011e40e:	83 ec 0c             	sub    $0xc,%esp
f011e411:	68 00 fc 4f 00       	push   $0x4ffc00
f011e416:	e8 6a 94 fe ff       	call   f0107885 <kmalloc>
f011e41b:	83 c4 10             	add    $0x10,%esp
f011e41e:	89 85 b4 fe ff ff    	mov    %eax,-0x14c(%ebp)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 9*Mega + 24*kilo)) panic("Wrong start address for the allocated space... ");
f011e424:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f011e42a:	89 c1                	mov    %eax,%ecx
f011e42c:	c7 85 2c ff ff ff 00 	movl   $0x1000,-0xd4(%ebp)
f011e433:	10 00 00 
f011e436:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f011e43c:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011e441:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%ebp)
f011e447:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f011e44d:	ba 00 00 00 00       	mov    $0x0,%edx
f011e452:	f7 b5 2c ff ff ff    	divl   -0xd4(%ebp)
f011e458:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f011e45e:	29 d0                	sub    %edx,%eax
f011e460:	89 c3                	mov    %eax,%ebx
f011e462:	c7 85 24 ff ff ff 00 	movl   $0x1000,-0xdc(%ebp)
f011e469:	10 00 00 
f011e46c:	a0 40 26 78 f0       	mov    0xf0782640,%al
f011e471:	0f b6 d0             	movzbl %al,%edx
f011e474:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011e47a:	01 d0                	add    %edx,%eax
f011e47c:	48                   	dec    %eax
f011e47d:	89 85 20 ff ff ff    	mov    %eax,-0xe0(%ebp)
f011e483:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f011e489:	ba 00 00 00 00       	mov    $0x0,%edx
f011e48e:	f7 b5 24 ff ff ff    	divl   -0xdc(%ebp)
f011e494:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f011e49a:	29 d0                	sub    %edx,%eax
f011e49c:	01 c3                	add    %eax,%ebx
f011e49e:	c7 85 1c ff ff ff 00 	movl   $0x1000,-0xe4(%ebp)
f011e4a5:	10 00 00 
f011e4a8:	a0 40 26 78 f0       	mov    0xf0782640,%al
f011e4ad:	0f b6 c0             	movzbl %al,%eax
f011e4b0:	c1 e0 04             	shl    $0x4,%eax
f011e4b3:	89 c2                	mov    %eax,%edx
f011e4b5:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f011e4bb:	01 d0                	add    %edx,%eax
f011e4bd:	48                   	dec    %eax
f011e4be:	89 85 18 ff ff ff    	mov    %eax,-0xe8(%ebp)
f011e4c4:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f011e4ca:	ba 00 00 00 00       	mov    $0x0,%edx
f011e4cf:	f7 b5 1c ff ff ff    	divl   -0xe4(%ebp)
f011e4d5:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f011e4db:	29 d0                	sub    %edx,%eax
f011e4dd:	01 d8                	add    %ebx,%eax
f011e4df:	2d 00 60 6f 09       	sub    $0x96f6000,%eax
f011e4e4:	39 c1                	cmp    %eax,%ecx
f011e4e6:	74 17                	je     f011e4ff <test_kmalloc_firstfit2+0xbf3>
f011e4e8:	83 ec 04             	sub    $0x4,%esp
f011e4eb:	68 94 b7 13 f0       	push   $0xf013b794
f011e4f0:	68 f5 03 00 00       	push   $0x3f5
f011e4f5:	68 7a b3 13 f0       	push   $0xf013b37a
f011e4fa:	e8 06 1d fe ff       	call   f0100205 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011e4ff:	e8 c4 58 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011e504:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011e507:	74 17                	je     f011e520 <test_kmalloc_firstfit2+0xc14>
f011e509:	83 ec 04             	sub    $0x4,%esp
f011e50c:	68 94 b3 13 f0       	push   $0xf013b394
f011e511:	68 f6 03 00 00       	push   $0x3f6
f011e516:	68 7a b3 13 f0       	push   $0xf013b37a
f011e51b:	e8 e5 1c fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=   5*Mega/PAGE_SIZE) panic("Wrong allocation: ");
f011e520:	e8 78 e6 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f011e525:	8b 55 dc             	mov    -0x24(%ebp),%edx
f011e528:	29 c2                	sub    %eax,%edx
f011e52a:	89 d0                	mov    %edx,%eax
f011e52c:	3d 00 05 00 00       	cmp    $0x500,%eax
f011e531:	74 17                	je     f011e54a <test_kmalloc_firstfit2+0xc3e>
f011e533:	83 ec 04             	sub    $0x4,%esp
f011e536:	68 c4 b7 13 f0       	push   $0xf013b7c4
f011e53b:	68 f7 03 00 00       	push   $0x3f7
f011e540:	68 7a b3 13 f0       	push   $0xf013b37a
f011e545:	e8 bb 1c fe ff       	call   f0100205 <_panic>
//		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
//		if ((sys_calculate_free_frames() - freeFrames) != 514) panic("Wrong free: ");

		//[FIRST FIT Case]
		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f011e54a:	e8 4e e6 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f011e54f:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011e552:	e8 71 58 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011e557:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[8] = kmalloc(3*Mega-kilo);
f011e55a:	83 ec 0c             	sub    $0xc,%esp
f011e55d:	68 00 fc 2f 00       	push   $0x2ffc00
f011e562:	e8 1e 93 fe ff       	call   f0107885 <kmalloc>
f011e567:	83 c4 10             	add    $0x10,%esp
f011e56a:	89 85 b8 fe ff ff    	mov    %eax,-0x148(%ebp)
		if ((uint32) ptr_allocations[8] != (ACTUAL_START)) panic("Wrong start address for the allocated space... ");
f011e570:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f011e576:	89 c1                	mov    %eax,%ecx
f011e578:	c7 85 14 ff ff ff 00 	movl   $0x1000,-0xec(%ebp)
f011e57f:	10 00 00 
f011e582:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f011e588:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011e58d:	89 85 10 ff ff ff    	mov    %eax,-0xf0(%ebp)
f011e593:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f011e599:	ba 00 00 00 00       	mov    $0x0,%edx
f011e59e:	f7 b5 14 ff ff ff    	divl   -0xec(%ebp)
f011e5a4:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f011e5aa:	29 d0                	sub    %edx,%eax
f011e5ac:	89 c3                	mov    %eax,%ebx
f011e5ae:	c7 85 0c ff ff ff 00 	movl   $0x1000,-0xf4(%ebp)
f011e5b5:	10 00 00 
f011e5b8:	a0 40 26 78 f0       	mov    0xf0782640,%al
f011e5bd:	0f b6 d0             	movzbl %al,%edx
f011e5c0:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f011e5c6:	01 d0                	add    %edx,%eax
f011e5c8:	48                   	dec    %eax
f011e5c9:	89 85 08 ff ff ff    	mov    %eax,-0xf8(%ebp)
f011e5cf:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f011e5d5:	ba 00 00 00 00       	mov    $0x0,%edx
f011e5da:	f7 b5 0c ff ff ff    	divl   -0xf4(%ebp)
f011e5e0:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f011e5e6:	29 d0                	sub    %edx,%eax
f011e5e8:	01 c3                	add    %eax,%ebx
f011e5ea:	c7 85 04 ff ff ff 00 	movl   $0x1000,-0xfc(%ebp)
f011e5f1:	10 00 00 
f011e5f4:	a0 40 26 78 f0       	mov    0xf0782640,%al
f011e5f9:	0f b6 c0             	movzbl %al,%eax
f011e5fc:	c1 e0 04             	shl    $0x4,%eax
f011e5ff:	89 c2                	mov    %eax,%edx
f011e601:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f011e607:	01 d0                	add    %edx,%eax
f011e609:	48                   	dec    %eax
f011e60a:	89 85 00 ff ff ff    	mov    %eax,-0x100(%ebp)
f011e610:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f011e616:	ba 00 00 00 00       	mov    $0x0,%edx
f011e61b:	f7 b5 04 ff ff ff    	divl   -0xfc(%ebp)
f011e621:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f011e627:	29 d0                	sub    %edx,%eax
f011e629:	01 d8                	add    %ebx,%eax
f011e62b:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f011e630:	39 c1                	cmp    %eax,%ecx
f011e632:	74 17                	je     f011e64b <test_kmalloc_firstfit2+0xd3f>
f011e634:	83 ec 04             	sub    $0x4,%esp
f011e637:	68 94 b7 13 f0       	push   $0xf013b794
f011e63c:	68 05 04 00 00       	push   $0x405
f011e641:	68 7a b3 13 f0       	push   $0xf013b37a
f011e646:	e8 ba 1b fe ff       	call   f0100205 <_panic>
		if((freeDiskFrames - pf_calculate_free_frames()) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011e64b:	e8 78 57 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011e650:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011e653:	74 17                	je     f011e66c <test_kmalloc_firstfit2+0xd60>
f011e655:	83 ec 04             	sub    $0x4,%esp
f011e658:	68 94 b3 13 f0       	push   $0xf013b394
f011e65d:	68 06 04 00 00       	push   $0x406
f011e662:	68 7a b3 13 f0       	push   $0xf013b37a
f011e667:	e8 99 1b fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=   3*Mega/PAGE_SIZE) panic("Wrong allocation: ");
f011e66c:	e8 2c e5 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f011e671:	8b 55 dc             	mov    -0x24(%ebp),%edx
f011e674:	29 c2                	sub    %eax,%edx
f011e676:	89 d0                	mov    %edx,%eax
f011e678:	3d 00 03 00 00       	cmp    $0x300,%eax
f011e67d:	74 17                	je     f011e696 <test_kmalloc_firstfit2+0xd8a>
f011e67f:	83 ec 04             	sub    $0x4,%esp
f011e682:	68 c4 b7 13 f0       	push   $0xf013b7c4
f011e687:	68 07 04 00 00       	push   $0x407
f011e68c:	68 7a b3 13 f0       	push   $0xf013b37a
f011e691:	e8 6f 1b fe ff       	call   f0100205 <_panic>
	}
	//	b) Attempt to allocate large segment with no suitable fragment to fit on
	{
		//Large Allocation
		ptr_allocations[9] = kmalloc((KERNEL_HEAP_MAX - ACTUAL_START - 14*Mega));
f011e696:	c7 85 fc fe ff ff 00 	movl   $0x1000,-0x104(%ebp)
f011e69d:	10 00 00 
f011e6a0:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f011e6a6:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011e6ab:	89 85 f8 fe ff ff    	mov    %eax,-0x108(%ebp)
f011e6b1:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f011e6b7:	ba 00 00 00 00       	mov    $0x0,%edx
f011e6bc:	f7 b5 fc fe ff ff    	divl   -0x104(%ebp)
f011e6c2:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f011e6c8:	29 d0                	sub    %edx,%eax
f011e6ca:	89 c1                	mov    %eax,%ecx
f011e6cc:	c7 85 f4 fe ff ff 00 	movl   $0x1000,-0x10c(%ebp)
f011e6d3:	10 00 00 
f011e6d6:	a0 40 26 78 f0       	mov    0xf0782640,%al
f011e6db:	0f b6 d0             	movzbl %al,%edx
f011e6de:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f011e6e4:	01 d0                	add    %edx,%eax
f011e6e6:	48                   	dec    %eax
f011e6e7:	89 85 f0 fe ff ff    	mov    %eax,-0x110(%ebp)
f011e6ed:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f011e6f3:	ba 00 00 00 00       	mov    $0x0,%edx
f011e6f8:	f7 b5 f4 fe ff ff    	divl   -0x10c(%ebp)
f011e6fe:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f011e704:	29 d0                	sub    %edx,%eax
f011e706:	01 c1                	add    %eax,%ecx
f011e708:	c7 85 ec fe ff ff 00 	movl   $0x1000,-0x114(%ebp)
f011e70f:	10 00 00 
f011e712:	a0 40 26 78 f0       	mov    0xf0782640,%al
f011e717:	0f b6 c0             	movzbl %al,%eax
f011e71a:	c1 e0 04             	shl    $0x4,%eax
f011e71d:	89 c2                	mov    %eax,%edx
f011e71f:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f011e725:	01 d0                	add    %edx,%eax
f011e727:	48                   	dec    %eax
f011e728:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)
f011e72e:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f011e734:	ba 00 00 00 00       	mov    $0x0,%edx
f011e739:	f7 b5 ec fe ff ff    	divl   -0x114(%ebp)
f011e73f:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f011e745:	29 d0                	sub    %edx,%eax
f011e747:	01 c8                	add    %ecx,%eax
f011e749:	ba 00 b0 1f 09       	mov    $0x91fb000,%edx
f011e74e:	29 c2                	sub    %eax,%edx
f011e750:	89 d0                	mov    %edx,%eax
f011e752:	83 ec 0c             	sub    $0xc,%esp
f011e755:	50                   	push   %eax
f011e756:	e8 2a 91 fe ff       	call   f0107885 <kmalloc>
f011e75b:	83 c4 10             	add    $0x10,%esp
f011e75e:	89 85 bc fe ff ff    	mov    %eax,-0x144(%ebp)
		if (ptr_allocations[9] != NULL) panic("Kmalloc: Attempt to allocate large segment with no suitable fragment to fit on, should return NULL");
f011e764:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f011e76a:	85 c0                	test   %eax,%eax
f011e76c:	74 17                	je     f011e785 <test_kmalloc_firstfit2+0xe79>
f011e76e:	83 ec 04             	sub    $0x4,%esp
f011e771:	68 c4 b8 13 f0       	push   $0xf013b8c4
f011e776:	68 0d 04 00 00       	push   $0x40d
f011e77b:	68 7a b3 13 f0       	push   $0xf013b37a
f011e780:	e8 80 1a fe ff       	call   f0100205 <_panic>

		cprintf("Congratulations!! test FIRST FIT allocation (2) completed successfully.\n");
f011e785:	83 ec 0c             	sub    $0xc,%esp
f011e788:	68 04 ba 13 f0       	push   $0xf013ba04
f011e78d:	e8 7c 25 fe ff       	call   f0100d0e <cprintf>
f011e792:	83 c4 10             	add    $0x10,%esp
	}
	return 1;
f011e795:	b8 01 00 00 00       	mov    $0x1,%eax
}
f011e79a:	8d 65 f8             	lea    -0x8(%ebp),%esp
f011e79d:	5b                   	pop    %ebx
f011e79e:	5f                   	pop    %edi
f011e79f:	5d                   	pop    %ebp
f011e7a0:	c3                   	ret    

f011e7a1 <test_kmalloc_worstfit>:

int test_kmalloc_worstfit()
{
f011e7a1:	55                   	push   %ebp
f011e7a2:	89 e5                	mov    %esp,%ebp
f011e7a4:	57                   	push   %edi
f011e7a5:	53                   	push   %ebx
f011e7a6:	81 ec 50 04 00 00    	sub    $0x450,%esp
	cprintf("==============================================\n");
f011e7ac:	83 ec 0c             	sub    $0xc,%esp
f011e7af:	68 bc b2 13 f0       	push   $0xf013b2bc
f011e7b4:	e8 55 25 fe ff       	call   f0100d0e <cprintf>
f011e7b9:	83 c4 10             	add    $0x10,%esp
	cprintf("MAKE SURE to have a FRESH RUN for this test\n(i.e. don't run any program/test before it)\n");
f011e7bc:	83 ec 0c             	sub    $0xc,%esp
f011e7bf:	68 ec b2 13 f0       	push   $0xf013b2ec
f011e7c4:	e8 45 25 fe ff       	call   f0100d0e <cprintf>
f011e7c9:	83 c4 10             	add    $0x10,%esp
	cprintf("==============================================\n");
f011e7cc:	83 ec 0c             	sub    $0xc,%esp
f011e7cf:	68 bc b2 13 f0       	push   $0xf013b2bc
f011e7d4:	e8 35 25 fe ff       	call   f0100d0e <cprintf>
f011e7d9:	83 c4 10             	add    $0x10,%esp

	void* ptr_allocations[160] = {0};
f011e7dc:	8d 95 b4 fb ff ff    	lea    -0x44c(%ebp),%edx
f011e7e2:	b9 a0 00 00 00       	mov    $0xa0,%ecx
f011e7e7:	b8 00 00 00 00       	mov    $0x0,%eax
f011e7ec:	89 d7                	mov    %edx,%edi
f011e7ee:	f3 ab                	rep stos %eax,%es:(%edi)

	// allocate pages
	int freeFrames = sys_calculate_free_frames() ;
f011e7f0:	e8 a8 e3 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f011e7f5:	89 45 f0             	mov    %eax,-0x10(%ebp)
	int freeDiskFrames = pf_calculate_free_frames() ;
f011e7f8:	e8 cb 55 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011e7fd:	89 45 ec             	mov    %eax,-0x14(%ebp)

	int count = 0;
f011e800:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
	int i;
	for(i = 0; i< 79 ;i++)
f011e807:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f011e80e:	eb 1f                	jmp    f011e82f <test_kmalloc_worstfit+0x8e>
	{
		ptr_allocations[i] = kmalloc(2*Mega);
f011e810:	83 ec 0c             	sub    $0xc,%esp
f011e813:	68 00 00 20 00       	push   $0x200000
f011e818:	e8 68 90 fe ff       	call   f0107885 <kmalloc>
f011e81d:	83 c4 10             	add    $0x10,%esp
f011e820:	89 c2                	mov    %eax,%edx
f011e822:	8b 45 f4             	mov    -0xc(%ebp),%eax
f011e825:	89 94 85 b4 fb ff ff 	mov    %edx,-0x44c(%ebp,%eax,4)
	int freeFrames = sys_calculate_free_frames() ;
	int freeDiskFrames = pf_calculate_free_frames() ;

	int count = 0;
	int i;
	for(i = 0; i< 79 ;i++)
f011e82c:	ff 45 f4             	incl   -0xc(%ebp)
f011e82f:	83 7d f4 4e          	cmpl   $0x4e,-0xc(%ebp)
f011e833:	7e db                	jle    f011e810 <test_kmalloc_worstfit+0x6f>
	{
		ptr_allocations[i] = kmalloc(2*Mega);
	}
	ptr_allocations[79] = kmalloc(2*Mega - PAGE_SIZE - KERNEL_SHARES_ARR_INIT_SIZE - KERNEL_SEMAPHORES_ARR_INIT_SIZE);
f011e835:	83 ec 0c             	sub    $0xc,%esp
f011e838:	68 00 b0 1f 00       	push   $0x1fb000
f011e83d:	e8 43 90 fe ff       	call   f0107885 <kmalloc>
f011e842:	83 c4 10             	add    $0x10,%esp
f011e845:	89 85 f0 fc ff ff    	mov    %eax,-0x310(%ebp)

	// randomly check the addresses of the allocation
	if( 	(uint32)ptr_allocations[0] != ACTUAL_START ||
f011e84b:	8b 85 b4 fb ff ff    	mov    -0x44c(%ebp),%eax
f011e851:	89 c1                	mov    %eax,%ecx
f011e853:	c7 45 e4 00 10 00 00 	movl   $0x1000,-0x1c(%ebp)
f011e85a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f011e85d:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011e862:	89 45 e0             	mov    %eax,-0x20(%ebp)
f011e865:	8b 45 e0             	mov    -0x20(%ebp),%eax
f011e868:	ba 00 00 00 00       	mov    $0x0,%edx
f011e86d:	f7 75 e4             	divl   -0x1c(%ebp)
f011e870:	8b 45 e0             	mov    -0x20(%ebp),%eax
f011e873:	29 d0                	sub    %edx,%eax
f011e875:	89 c3                	mov    %eax,%ebx
f011e877:	c7 45 dc 00 10 00 00 	movl   $0x1000,-0x24(%ebp)
f011e87e:	a0 40 26 78 f0       	mov    0xf0782640,%al
f011e883:	0f b6 d0             	movzbl %al,%edx
f011e886:	8b 45 dc             	mov    -0x24(%ebp),%eax
f011e889:	01 d0                	add    %edx,%eax
f011e88b:	48                   	dec    %eax
f011e88c:	89 45 d8             	mov    %eax,-0x28(%ebp)
f011e88f:	8b 45 d8             	mov    -0x28(%ebp),%eax
f011e892:	ba 00 00 00 00       	mov    $0x0,%edx
f011e897:	f7 75 dc             	divl   -0x24(%ebp)
f011e89a:	8b 45 d8             	mov    -0x28(%ebp),%eax
f011e89d:	29 d0                	sub    %edx,%eax
f011e89f:	01 c3                	add    %eax,%ebx
f011e8a1:	c7 45 d4 00 10 00 00 	movl   $0x1000,-0x2c(%ebp)
f011e8a8:	a0 40 26 78 f0       	mov    0xf0782640,%al
f011e8ad:	0f b6 c0             	movzbl %al,%eax
f011e8b0:	c1 e0 04             	shl    $0x4,%eax
f011e8b3:	89 c2                	mov    %eax,%edx
f011e8b5:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f011e8b8:	01 d0                	add    %edx,%eax
f011e8ba:	48                   	dec    %eax
f011e8bb:	89 45 d0             	mov    %eax,-0x30(%ebp)
f011e8be:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011e8c1:	ba 00 00 00 00       	mov    $0x0,%edx
f011e8c6:	f7 75 d4             	divl   -0x2c(%ebp)
f011e8c9:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011e8cc:	29 d0                	sub    %edx,%eax
f011e8ce:	01 d8                	add    %ebx,%eax
f011e8d0:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f011e8d5:	39 c1                	cmp    %eax,%ecx
f011e8d7:	0f 85 c0 04 00 00    	jne    f011ed9d <test_kmalloc_worstfit+0x5fc>
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
f011e8dd:	8b 85 bc fb ff ff    	mov    -0x444(%ebp),%eax
f011e8e3:	89 c1                	mov    %eax,%ecx
f011e8e5:	c7 45 cc 00 10 00 00 	movl   $0x1000,-0x34(%ebp)
f011e8ec:	8b 45 cc             	mov    -0x34(%ebp),%eax
f011e8ef:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011e8f4:	89 45 c8             	mov    %eax,-0x38(%ebp)
f011e8f7:	8b 45 c8             	mov    -0x38(%ebp),%eax
f011e8fa:	ba 00 00 00 00       	mov    $0x0,%edx
f011e8ff:	f7 75 cc             	divl   -0x34(%ebp)
f011e902:	8b 45 c8             	mov    -0x38(%ebp),%eax
f011e905:	29 d0                	sub    %edx,%eax
f011e907:	89 c3                	mov    %eax,%ebx
f011e909:	c7 45 c4 00 10 00 00 	movl   $0x1000,-0x3c(%ebp)
f011e910:	a0 40 26 78 f0       	mov    0xf0782640,%al
f011e915:	0f b6 d0             	movzbl %al,%edx
f011e918:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f011e91b:	01 d0                	add    %edx,%eax
f011e91d:	48                   	dec    %eax
f011e91e:	89 45 c0             	mov    %eax,-0x40(%ebp)
f011e921:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011e924:	ba 00 00 00 00       	mov    $0x0,%edx
f011e929:	f7 75 c4             	divl   -0x3c(%ebp)
f011e92c:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011e92f:	29 d0                	sub    %edx,%eax
f011e931:	01 c3                	add    %eax,%ebx
f011e933:	c7 45 bc 00 10 00 00 	movl   $0x1000,-0x44(%ebp)
f011e93a:	a0 40 26 78 f0       	mov    0xf0782640,%al
f011e93f:	0f b6 c0             	movzbl %al,%eax
f011e942:	c1 e0 04             	shl    $0x4,%eax
f011e945:	89 c2                	mov    %eax,%edx
f011e947:	8b 45 bc             	mov    -0x44(%ebp),%eax
f011e94a:	01 d0                	add    %edx,%eax
f011e94c:	48                   	dec    %eax
f011e94d:	89 45 b8             	mov    %eax,-0x48(%ebp)
f011e950:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011e953:	ba 00 00 00 00       	mov    $0x0,%edx
f011e958:	f7 75 bc             	divl   -0x44(%ebp)
f011e95b:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011e95e:	29 d0                	sub    %edx,%eax
f011e960:	01 d8                	add    %ebx,%eax
f011e962:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
		ptr_allocations[i] = kmalloc(2*Mega);
	}
	ptr_allocations[79] = kmalloc(2*Mega - PAGE_SIZE - KERNEL_SHARES_ARR_INIT_SIZE - KERNEL_SEMAPHORES_ARR_INIT_SIZE);

	// randomly check the addresses of the allocation
	if( 	(uint32)ptr_allocations[0] != ACTUAL_START ||
f011e967:	39 c1                	cmp    %eax,%ecx
f011e969:	0f 85 2e 04 00 00    	jne    f011ed9d <test_kmalloc_worstfit+0x5fc>
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
			(uint32)ptr_allocations[8] != (ACTUAL_START + 16*Mega) ||
f011e96f:	8b 85 d4 fb ff ff    	mov    -0x42c(%ebp),%eax
f011e975:	89 c1                	mov    %eax,%ecx
f011e977:	c7 45 b4 00 10 00 00 	movl   $0x1000,-0x4c(%ebp)
f011e97e:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f011e981:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011e986:	89 45 b0             	mov    %eax,-0x50(%ebp)
f011e989:	8b 45 b0             	mov    -0x50(%ebp),%eax
f011e98c:	ba 00 00 00 00       	mov    $0x0,%edx
f011e991:	f7 75 b4             	divl   -0x4c(%ebp)
f011e994:	8b 45 b0             	mov    -0x50(%ebp),%eax
f011e997:	29 d0                	sub    %edx,%eax
f011e999:	89 c3                	mov    %eax,%ebx
f011e99b:	c7 45 ac 00 10 00 00 	movl   $0x1000,-0x54(%ebp)
f011e9a2:	a0 40 26 78 f0       	mov    0xf0782640,%al
f011e9a7:	0f b6 d0             	movzbl %al,%edx
f011e9aa:	8b 45 ac             	mov    -0x54(%ebp),%eax
f011e9ad:	01 d0                	add    %edx,%eax
f011e9af:	48                   	dec    %eax
f011e9b0:	89 45 a8             	mov    %eax,-0x58(%ebp)
f011e9b3:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011e9b6:	ba 00 00 00 00       	mov    $0x0,%edx
f011e9bb:	f7 75 ac             	divl   -0x54(%ebp)
f011e9be:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011e9c1:	29 d0                	sub    %edx,%eax
f011e9c3:	01 c3                	add    %eax,%ebx
f011e9c5:	c7 45 a4 00 10 00 00 	movl   $0x1000,-0x5c(%ebp)
f011e9cc:	a0 40 26 78 f0       	mov    0xf0782640,%al
f011e9d1:	0f b6 c0             	movzbl %al,%eax
f011e9d4:	c1 e0 04             	shl    $0x4,%eax
f011e9d7:	89 c2                	mov    %eax,%edx
f011e9d9:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f011e9dc:	01 d0                	add    %edx,%eax
f011e9de:	48                   	dec    %eax
f011e9df:	89 45 a0             	mov    %eax,-0x60(%ebp)
f011e9e2:	8b 45 a0             	mov    -0x60(%ebp),%eax
f011e9e5:	ba 00 00 00 00       	mov    $0x0,%edx
f011e9ea:	f7 75 a4             	divl   -0x5c(%ebp)
f011e9ed:	8b 45 a0             	mov    -0x60(%ebp),%eax
f011e9f0:	29 d0                	sub    %edx,%eax
f011e9f2:	01 d8                	add    %ebx,%eax
f011e9f4:	2d 00 c0 ff 08       	sub    $0x8ffc000,%eax
	}
	ptr_allocations[79] = kmalloc(2*Mega - PAGE_SIZE - KERNEL_SHARES_ARR_INIT_SIZE - KERNEL_SEMAPHORES_ARR_INIT_SIZE);

	// randomly check the addresses of the allocation
	if( 	(uint32)ptr_allocations[0] != ACTUAL_START ||
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
f011e9f9:	39 c1                	cmp    %eax,%ecx
f011e9fb:	0f 85 9c 03 00 00    	jne    f011ed9d <test_kmalloc_worstfit+0x5fc>
			(uint32)ptr_allocations[8] != (ACTUAL_START + 16*Mega) ||
			(uint32)ptr_allocations[10] != (ACTUAL_START + 20*Mega) ||
f011ea01:	8b 85 dc fb ff ff    	mov    -0x424(%ebp),%eax
f011ea07:	89 c1                	mov    %eax,%ecx
f011ea09:	c7 45 9c 00 10 00 00 	movl   $0x1000,-0x64(%ebp)
f011ea10:	8b 45 9c             	mov    -0x64(%ebp),%eax
f011ea13:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011ea18:	89 45 98             	mov    %eax,-0x68(%ebp)
f011ea1b:	8b 45 98             	mov    -0x68(%ebp),%eax
f011ea1e:	ba 00 00 00 00       	mov    $0x0,%edx
f011ea23:	f7 75 9c             	divl   -0x64(%ebp)
f011ea26:	8b 45 98             	mov    -0x68(%ebp),%eax
f011ea29:	29 d0                	sub    %edx,%eax
f011ea2b:	89 c3                	mov    %eax,%ebx
f011ea2d:	c7 45 94 00 10 00 00 	movl   $0x1000,-0x6c(%ebp)
f011ea34:	a0 40 26 78 f0       	mov    0xf0782640,%al
f011ea39:	0f b6 d0             	movzbl %al,%edx
f011ea3c:	8b 45 94             	mov    -0x6c(%ebp),%eax
f011ea3f:	01 d0                	add    %edx,%eax
f011ea41:	48                   	dec    %eax
f011ea42:	89 45 90             	mov    %eax,-0x70(%ebp)
f011ea45:	8b 45 90             	mov    -0x70(%ebp),%eax
f011ea48:	ba 00 00 00 00       	mov    $0x0,%edx
f011ea4d:	f7 75 94             	divl   -0x6c(%ebp)
f011ea50:	8b 45 90             	mov    -0x70(%ebp),%eax
f011ea53:	29 d0                	sub    %edx,%eax
f011ea55:	01 c3                	add    %eax,%ebx
f011ea57:	c7 45 8c 00 10 00 00 	movl   $0x1000,-0x74(%ebp)
f011ea5e:	a0 40 26 78 f0       	mov    0xf0782640,%al
f011ea63:	0f b6 c0             	movzbl %al,%eax
f011ea66:	c1 e0 04             	shl    $0x4,%eax
f011ea69:	89 c2                	mov    %eax,%edx
f011ea6b:	8b 45 8c             	mov    -0x74(%ebp),%eax
f011ea6e:	01 d0                	add    %edx,%eax
f011ea70:	48                   	dec    %eax
f011ea71:	89 45 88             	mov    %eax,-0x78(%ebp)
f011ea74:	8b 45 88             	mov    -0x78(%ebp),%eax
f011ea77:	ba 00 00 00 00       	mov    $0x0,%edx
f011ea7c:	f7 75 8c             	divl   -0x74(%ebp)
f011ea7f:	8b 45 88             	mov    -0x78(%ebp),%eax
f011ea82:	29 d0                	sub    %edx,%eax
f011ea84:	01 d8                	add    %ebx,%eax
f011ea86:	2d 00 c0 bf 08       	sub    $0x8bfc000,%eax
	ptr_allocations[79] = kmalloc(2*Mega - PAGE_SIZE - KERNEL_SHARES_ARR_INIT_SIZE - KERNEL_SEMAPHORES_ARR_INIT_SIZE);

	// randomly check the addresses of the allocation
	if( 	(uint32)ptr_allocations[0] != ACTUAL_START ||
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
			(uint32)ptr_allocations[8] != (ACTUAL_START + 16*Mega) ||
f011ea8b:	39 c1                	cmp    %eax,%ecx
f011ea8d:	0f 85 0a 03 00 00    	jne    f011ed9d <test_kmalloc_worstfit+0x5fc>
			(uint32)ptr_allocations[10] != (ACTUAL_START + 20*Mega) ||
			(uint32)ptr_allocations[15] != (ACTUAL_START + 30*Mega) ||
f011ea93:	8b 85 f0 fb ff ff    	mov    -0x410(%ebp),%eax
f011ea99:	89 c1                	mov    %eax,%ecx
f011ea9b:	c7 45 84 00 10 00 00 	movl   $0x1000,-0x7c(%ebp)
f011eaa2:	8b 45 84             	mov    -0x7c(%ebp),%eax
f011eaa5:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011eaaa:	89 45 80             	mov    %eax,-0x80(%ebp)
f011eaad:	8b 45 80             	mov    -0x80(%ebp),%eax
f011eab0:	ba 00 00 00 00       	mov    $0x0,%edx
f011eab5:	f7 75 84             	divl   -0x7c(%ebp)
f011eab8:	8b 45 80             	mov    -0x80(%ebp),%eax
f011eabb:	29 d0                	sub    %edx,%eax
f011eabd:	89 c3                	mov    %eax,%ebx
f011eabf:	c7 85 7c ff ff ff 00 	movl   $0x1000,-0x84(%ebp)
f011eac6:	10 00 00 
f011eac9:	a0 40 26 78 f0       	mov    0xf0782640,%al
f011eace:	0f b6 d0             	movzbl %al,%edx
f011ead1:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f011ead7:	01 d0                	add    %edx,%eax
f011ead9:	48                   	dec    %eax
f011eada:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)
f011eae0:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f011eae6:	ba 00 00 00 00       	mov    $0x0,%edx
f011eaeb:	f7 b5 7c ff ff ff    	divl   -0x84(%ebp)
f011eaf1:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f011eaf7:	29 d0                	sub    %edx,%eax
f011eaf9:	01 c3                	add    %eax,%ebx
f011eafb:	c7 85 74 ff ff ff 00 	movl   $0x1000,-0x8c(%ebp)
f011eb02:	10 00 00 
f011eb05:	a0 40 26 78 f0       	mov    0xf0782640,%al
f011eb0a:	0f b6 c0             	movzbl %al,%eax
f011eb0d:	c1 e0 04             	shl    $0x4,%eax
f011eb10:	89 c2                	mov    %eax,%edx
f011eb12:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f011eb18:	01 d0                	add    %edx,%eax
f011eb1a:	48                   	dec    %eax
f011eb1b:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
f011eb21:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f011eb27:	ba 00 00 00 00       	mov    $0x0,%edx
f011eb2c:	f7 b5 74 ff ff ff    	divl   -0x8c(%ebp)
f011eb32:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f011eb38:	29 d0                	sub    %edx,%eax
f011eb3a:	01 d8                	add    %ebx,%eax
f011eb3c:	2d 00 c0 1f 08       	sub    $0x81fc000,%eax

	// randomly check the addresses of the allocation
	if( 	(uint32)ptr_allocations[0] != ACTUAL_START ||
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
			(uint32)ptr_allocations[8] != (ACTUAL_START + 16*Mega) ||
			(uint32)ptr_allocations[10] != (ACTUAL_START + 20*Mega) ||
f011eb41:	39 c1                	cmp    %eax,%ecx
f011eb43:	0f 85 54 02 00 00    	jne    f011ed9d <test_kmalloc_worstfit+0x5fc>
			(uint32)ptr_allocations[15] != (ACTUAL_START + 30*Mega) ||
			(uint32)ptr_allocations[20] != (ACTUAL_START + 40*Mega) ||
f011eb49:	8b 85 04 fc ff ff    	mov    -0x3fc(%ebp),%eax
f011eb4f:	89 c1                	mov    %eax,%ecx
f011eb51:	c7 85 6c ff ff ff 00 	movl   $0x1000,-0x94(%ebp)
f011eb58:	10 00 00 
f011eb5b:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f011eb61:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011eb66:	89 85 68 ff ff ff    	mov    %eax,-0x98(%ebp)
f011eb6c:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f011eb72:	ba 00 00 00 00       	mov    $0x0,%edx
f011eb77:	f7 b5 6c ff ff ff    	divl   -0x94(%ebp)
f011eb7d:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f011eb83:	29 d0                	sub    %edx,%eax
f011eb85:	89 c3                	mov    %eax,%ebx
f011eb87:	c7 85 64 ff ff ff 00 	movl   $0x1000,-0x9c(%ebp)
f011eb8e:	10 00 00 
f011eb91:	a0 40 26 78 f0       	mov    0xf0782640,%al
f011eb96:	0f b6 d0             	movzbl %al,%edx
f011eb99:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f011eb9f:	01 d0                	add    %edx,%eax
f011eba1:	48                   	dec    %eax
f011eba2:	89 85 60 ff ff ff    	mov    %eax,-0xa0(%ebp)
f011eba8:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f011ebae:	ba 00 00 00 00       	mov    $0x0,%edx
f011ebb3:	f7 b5 64 ff ff ff    	divl   -0x9c(%ebp)
f011ebb9:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f011ebbf:	29 d0                	sub    %edx,%eax
f011ebc1:	01 c3                	add    %eax,%ebx
f011ebc3:	c7 85 5c ff ff ff 00 	movl   $0x1000,-0xa4(%ebp)
f011ebca:	10 00 00 
f011ebcd:	a0 40 26 78 f0       	mov    0xf0782640,%al
f011ebd2:	0f b6 c0             	movzbl %al,%eax
f011ebd5:	c1 e0 04             	shl    $0x4,%eax
f011ebd8:	89 c2                	mov    %eax,%edx
f011ebda:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f011ebe0:	01 d0                	add    %edx,%eax
f011ebe2:	48                   	dec    %eax
f011ebe3:	89 85 58 ff ff ff    	mov    %eax,-0xa8(%ebp)
f011ebe9:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f011ebef:	ba 00 00 00 00       	mov    $0x0,%edx
f011ebf4:	f7 b5 5c ff ff ff    	divl   -0xa4(%ebp)
f011ebfa:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f011ec00:	29 d0                	sub    %edx,%eax
f011ec02:	01 d8                	add    %ebx,%eax
f011ec04:	2d 00 c0 7f 07       	sub    $0x77fc000,%eax
	// randomly check the addresses of the allocation
	if( 	(uint32)ptr_allocations[0] != ACTUAL_START ||
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
			(uint32)ptr_allocations[8] != (ACTUAL_START + 16*Mega) ||
			(uint32)ptr_allocations[10] != (ACTUAL_START + 20*Mega) ||
			(uint32)ptr_allocations[15] != (ACTUAL_START + 30*Mega) ||
f011ec09:	39 c1                	cmp    %eax,%ecx
f011ec0b:	0f 85 8c 01 00 00    	jne    f011ed9d <test_kmalloc_worstfit+0x5fc>
			(uint32)ptr_allocations[20] != (ACTUAL_START + 40*Mega) ||
			(uint32)ptr_allocations[50] != (ACTUAL_START + 100*Mega) ||
f011ec11:	8b 85 7c fc ff ff    	mov    -0x384(%ebp),%eax
f011ec17:	89 c1                	mov    %eax,%ecx
f011ec19:	c7 85 54 ff ff ff 00 	movl   $0x1000,-0xac(%ebp)
f011ec20:	10 00 00 
f011ec23:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f011ec29:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011ec2e:	89 85 50 ff ff ff    	mov    %eax,-0xb0(%ebp)
f011ec34:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f011ec3a:	ba 00 00 00 00       	mov    $0x0,%edx
f011ec3f:	f7 b5 54 ff ff ff    	divl   -0xac(%ebp)
f011ec45:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f011ec4b:	29 d0                	sub    %edx,%eax
f011ec4d:	89 c3                	mov    %eax,%ebx
f011ec4f:	c7 85 4c ff ff ff 00 	movl   $0x1000,-0xb4(%ebp)
f011ec56:	10 00 00 
f011ec59:	a0 40 26 78 f0       	mov    0xf0782640,%al
f011ec5e:	0f b6 d0             	movzbl %al,%edx
f011ec61:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f011ec67:	01 d0                	add    %edx,%eax
f011ec69:	48                   	dec    %eax
f011ec6a:	89 85 48 ff ff ff    	mov    %eax,-0xb8(%ebp)
f011ec70:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f011ec76:	ba 00 00 00 00       	mov    $0x0,%edx
f011ec7b:	f7 b5 4c ff ff ff    	divl   -0xb4(%ebp)
f011ec81:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f011ec87:	29 d0                	sub    %edx,%eax
f011ec89:	01 c3                	add    %eax,%ebx
f011ec8b:	c7 85 44 ff ff ff 00 	movl   $0x1000,-0xbc(%ebp)
f011ec92:	10 00 00 
f011ec95:	a0 40 26 78 f0       	mov    0xf0782640,%al
f011ec9a:	0f b6 c0             	movzbl %al,%eax
f011ec9d:	c1 e0 04             	shl    $0x4,%eax
f011eca0:	89 c2                	mov    %eax,%edx
f011eca2:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f011eca8:	01 d0                	add    %edx,%eax
f011ecaa:	48                   	dec    %eax
f011ecab:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%ebp)
f011ecb1:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f011ecb7:	ba 00 00 00 00       	mov    $0x0,%edx
f011ecbc:	f7 b5 44 ff ff ff    	divl   -0xbc(%ebp)
f011ecc2:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f011ecc8:	29 d0                	sub    %edx,%eax
f011ecca:	01 d8                	add    %ebx,%eax
f011eccc:	2d 00 c0 bf 03       	sub    $0x3bfc000,%eax
	if( 	(uint32)ptr_allocations[0] != ACTUAL_START ||
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
			(uint32)ptr_allocations[8] != (ACTUAL_START + 16*Mega) ||
			(uint32)ptr_allocations[10] != (ACTUAL_START + 20*Mega) ||
			(uint32)ptr_allocations[15] != (ACTUAL_START + 30*Mega) ||
			(uint32)ptr_allocations[20] != (ACTUAL_START + 40*Mega) ||
f011ecd1:	39 c1                	cmp    %eax,%ecx
f011ecd3:	0f 85 c4 00 00 00    	jne    f011ed9d <test_kmalloc_worstfit+0x5fc>
			(uint32)ptr_allocations[50] != (ACTUAL_START + 100*Mega) ||
			(uint32)ptr_allocations[79] != (ACTUAL_START + 158*Mega))
f011ecd9:	8b 85 f0 fc ff ff    	mov    -0x310(%ebp),%eax
f011ecdf:	89 c1                	mov    %eax,%ecx
f011ece1:	c7 85 3c ff ff ff 00 	movl   $0x1000,-0xc4(%ebp)
f011ece8:	10 00 00 
f011eceb:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f011ecf1:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011ecf6:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
f011ecfc:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f011ed02:	ba 00 00 00 00       	mov    $0x0,%edx
f011ed07:	f7 b5 3c ff ff ff    	divl   -0xc4(%ebp)
f011ed0d:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f011ed13:	29 d0                	sub    %edx,%eax
f011ed15:	89 c3                	mov    %eax,%ebx
f011ed17:	c7 85 34 ff ff ff 00 	movl   $0x1000,-0xcc(%ebp)
f011ed1e:	10 00 00 
f011ed21:	a0 40 26 78 f0       	mov    0xf0782640,%al
f011ed26:	0f b6 d0             	movzbl %al,%edx
f011ed29:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f011ed2f:	01 d0                	add    %edx,%eax
f011ed31:	48                   	dec    %eax
f011ed32:	89 85 30 ff ff ff    	mov    %eax,-0xd0(%ebp)
f011ed38:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f011ed3e:	ba 00 00 00 00       	mov    $0x0,%edx
f011ed43:	f7 b5 34 ff ff ff    	divl   -0xcc(%ebp)
f011ed49:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f011ed4f:	29 d0                	sub    %edx,%eax
f011ed51:	01 c3                	add    %eax,%ebx
f011ed53:	c7 85 2c ff ff ff 00 	movl   $0x1000,-0xd4(%ebp)
f011ed5a:	10 00 00 
f011ed5d:	a0 40 26 78 f0       	mov    0xf0782640,%al
f011ed62:	0f b6 c0             	movzbl %al,%eax
f011ed65:	c1 e0 04             	shl    $0x4,%eax
f011ed68:	89 c2                	mov    %eax,%edx
f011ed6a:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f011ed70:	01 d0                	add    %edx,%eax
f011ed72:	48                   	dec    %eax
f011ed73:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%ebp)
f011ed79:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f011ed7f:	ba 00 00 00 00       	mov    $0x0,%edx
f011ed84:	f7 b5 2c ff ff ff    	divl   -0xd4(%ebp)
f011ed8a:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f011ed90:	29 d0                	sub    %edx,%eax
f011ed92:	01 d8                	add    %ebx,%eax
f011ed94:	2d 00 c0 1f 00       	sub    $0x1fc000,%eax
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
			(uint32)ptr_allocations[8] != (ACTUAL_START + 16*Mega) ||
			(uint32)ptr_allocations[10] != (ACTUAL_START + 20*Mega) ||
			(uint32)ptr_allocations[15] != (ACTUAL_START + 30*Mega) ||
			(uint32)ptr_allocations[20] != (ACTUAL_START + 40*Mega) ||
			(uint32)ptr_allocations[50] != (ACTUAL_START + 100*Mega) ||
f011ed99:	39 c1                	cmp    %eax,%ecx
f011ed9b:	74 17                	je     f011edb4 <test_kmalloc_worstfit+0x613>
			(uint32)ptr_allocations[79] != (ACTUAL_START + 158*Mega))
		panic("Wrong allocation, Check worst fitting strategy is working correctly");
f011ed9d:	83 ec 04             	sub    $0x4,%esp
f011eda0:	68 50 ba 13 f0       	push   $0xf013ba50
f011eda5:	68 31 04 00 00       	push   $0x431
f011edaa:	68 7a b3 13 f0       	push   $0xf013b37a
f011edaf:	e8 51 14 fe ff       	call   f0100205 <_panic>

	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011edb4:	e8 0f 50 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011edb9:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011edbc:	74 17                	je     f011edd5 <test_kmalloc_worstfit+0x634>
f011edbe:	83 ec 04             	sub    $0x4,%esp
f011edc1:	68 94 b3 13 f0       	push   $0xf013b394
f011edc6:	68 33 04 00 00       	push   $0x433
f011edcb:	68 7a b3 13 f0       	push   $0xf013b37a
f011edd0:	e8 30 14 fe ff       	call   f0100205 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) != (160*Mega - PAGE_SIZE - KERNEL_SHARES_ARR_INIT_SIZE - KERNEL_SEMAPHORES_ARR_INIT_SIZE)/(PAGE_SIZE) ) panic("Wrong allocation");
f011edd5:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f011edd8:	e8 c0 dd fe ff       	call   f010cb9d <sys_calculate_free_frames>
f011eddd:	29 c3                	sub    %eax,%ebx
f011eddf:	89 d8                	mov    %ebx,%eax
f011ede1:	3d fb 9f 00 00       	cmp    $0x9ffb,%eax
f011ede6:	74 17                	je     f011edff <test_kmalloc_worstfit+0x65e>
f011ede8:	83 ec 04             	sub    $0x4,%esp
f011edeb:	68 37 b6 13 f0       	push   $0xf013b637
f011edf0:	68 34 04 00 00       	push   $0x434
f011edf5:	68 7a b3 13 f0       	push   $0xf013b37a
f011edfa:	e8 06 14 fe ff       	call   f0100205 <_panic>

	//make memory holes
	freeFrames = sys_calculate_free_frames() ;
f011edff:	e8 99 dd fe ff       	call   f010cb9d <sys_calculate_free_frames>
f011ee04:	89 45 f0             	mov    %eax,-0x10(%ebp)
	freeDiskFrames = pf_calculate_free_frames() ;
f011ee07:	e8 bc 4f fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011ee0c:	89 45 ec             	mov    %eax,-0x14(%ebp)

	kfree(ptr_allocations[0]);		//Hole 1 = 2 M
f011ee0f:	8b 85 b4 fb ff ff    	mov    -0x44c(%ebp),%eax
f011ee15:	83 ec 0c             	sub    $0xc,%esp
f011ee18:	50                   	push   %eax
f011ee19:	e8 32 8b fe ff       	call   f0107950 <kfree>
f011ee1e:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[2]);		//Hole 2 = 4 M
f011ee21:	8b 85 bc fb ff ff    	mov    -0x444(%ebp),%eax
f011ee27:	83 ec 0c             	sub    $0xc,%esp
f011ee2a:	50                   	push   %eax
f011ee2b:	e8 20 8b fe ff       	call   f0107950 <kfree>
f011ee30:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[3]);
f011ee33:	8b 85 c0 fb ff ff    	mov    -0x440(%ebp),%eax
f011ee39:	83 ec 0c             	sub    $0xc,%esp
f011ee3c:	50                   	push   %eax
f011ee3d:	e8 0e 8b fe ff       	call   f0107950 <kfree>
f011ee42:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[10]);		//Hole 3 = 6 M
f011ee45:	8b 85 dc fb ff ff    	mov    -0x424(%ebp),%eax
f011ee4b:	83 ec 0c             	sub    $0xc,%esp
f011ee4e:	50                   	push   %eax
f011ee4f:	e8 fc 8a fe ff       	call   f0107950 <kfree>
f011ee54:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[12]);
f011ee57:	8b 85 e4 fb ff ff    	mov    -0x41c(%ebp),%eax
f011ee5d:	83 ec 0c             	sub    $0xc,%esp
f011ee60:	50                   	push   %eax
f011ee61:	e8 ea 8a fe ff       	call   f0107950 <kfree>
f011ee66:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[11]);
f011ee69:	8b 85 e0 fb ff ff    	mov    -0x420(%ebp),%eax
f011ee6f:	83 ec 0c             	sub    $0xc,%esp
f011ee72:	50                   	push   %eax
f011ee73:	e8 d8 8a fe ff       	call   f0107950 <kfree>
f011ee78:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[30]);		//Hole 4 = 10 M
f011ee7b:	8b 85 2c fc ff ff    	mov    -0x3d4(%ebp),%eax
f011ee81:	83 ec 0c             	sub    $0xc,%esp
f011ee84:	50                   	push   %eax
f011ee85:	e8 c6 8a fe ff       	call   f0107950 <kfree>
f011ee8a:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[31]);
f011ee8d:	8b 85 30 fc ff ff    	mov    -0x3d0(%ebp),%eax
f011ee93:	83 ec 0c             	sub    $0xc,%esp
f011ee96:	50                   	push   %eax
f011ee97:	e8 b4 8a fe ff       	call   f0107950 <kfree>
f011ee9c:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[32]);
f011ee9f:	8b 85 34 fc ff ff    	mov    -0x3cc(%ebp),%eax
f011eea5:	83 ec 0c             	sub    $0xc,%esp
f011eea8:	50                   	push   %eax
f011eea9:	e8 a2 8a fe ff       	call   f0107950 <kfree>
f011eeae:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[33]);
f011eeb1:	8b 85 38 fc ff ff    	mov    -0x3c8(%ebp),%eax
f011eeb7:	83 ec 0c             	sub    $0xc,%esp
f011eeba:	50                   	push   %eax
f011eebb:	e8 90 8a fe ff       	call   f0107950 <kfree>
f011eec0:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[34]);
f011eec3:	8b 85 3c fc ff ff    	mov    -0x3c4(%ebp),%eax
f011eec9:	83 ec 0c             	sub    $0xc,%esp
f011eecc:	50                   	push   %eax
f011eecd:	e8 7e 8a fe ff       	call   f0107950 <kfree>
f011eed2:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[70]); 	//Hole 5 = 8 M
f011eed5:	8b 85 cc fc ff ff    	mov    -0x334(%ebp),%eax
f011eedb:	83 ec 0c             	sub    $0xc,%esp
f011eede:	50                   	push   %eax
f011eedf:	e8 6c 8a fe ff       	call   f0107950 <kfree>
f011eee4:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[71]);
f011eee7:	8b 85 d0 fc ff ff    	mov    -0x330(%ebp),%eax
f011eeed:	83 ec 0c             	sub    $0xc,%esp
f011eef0:	50                   	push   %eax
f011eef1:	e8 5a 8a fe ff       	call   f0107950 <kfree>
f011eef6:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[72]);
f011eef9:	8b 85 d4 fc ff ff    	mov    -0x32c(%ebp),%eax
f011eeff:	83 ec 0c             	sub    $0xc,%esp
f011ef02:	50                   	push   %eax
f011ef03:	e8 48 8a fe ff       	call   f0107950 <kfree>
f011ef08:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[73]);
f011ef0b:	8b 85 d8 fc ff ff    	mov    -0x328(%ebp),%eax
f011ef11:	83 ec 0c             	sub    $0xc,%esp
f011ef14:	50                   	push   %eax
f011ef15:	e8 36 8a fe ff       	call   f0107950 <kfree>
f011ef1a:	83 c4 10             	add    $0x10,%esp

	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011ef1d:	e8 a6 4e fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011ef22:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011ef25:	74 17                	je     f011ef3e <test_kmalloc_worstfit+0x79d>
f011ef27:	83 ec 04             	sub    $0x4,%esp
f011ef2a:	68 94 b3 13 f0       	push   $0xf013b394
f011ef2f:	68 4a 04 00 00       	push   $0x44a
f011ef34:	68 7a b3 13 f0       	push   $0xf013b37a
f011ef39:	e8 c7 12 fe ff       	call   f0100205 <_panic>
	if ((sys_calculate_free_frames() - freeFrames) != ((15*2*Mega))/PAGE_SIZE) panic("Wrong free: Extra or less pages are removed from main memory");
f011ef3e:	e8 5a dc fe ff       	call   f010cb9d <sys_calculate_free_frames>
f011ef43:	89 c2                	mov    %eax,%edx
f011ef45:	8b 45 f0             	mov    -0x10(%ebp),%eax
f011ef48:	29 c2                	sub    %eax,%edx
f011ef4a:	89 d0                	mov    %edx,%eax
f011ef4c:	3d 00 1e 00 00       	cmp    $0x1e00,%eax
f011ef51:	74 17                	je     f011ef6a <test_kmalloc_worstfit+0x7c9>
f011ef53:	83 ec 04             	sub    $0x4,%esp
f011ef56:	68 48 b6 13 f0       	push   $0xf013b648
f011ef5b:	68 4b 04 00 00       	push   $0x44b
f011ef60:	68 7a b3 13 f0       	push   $0xf013b37a
f011ef65:	e8 9b 12 fe ff       	call   f0100205 <_panic>

	// Test worst fit
	freeFrames = sys_calculate_free_frames() ;
f011ef6a:	e8 2e dc fe ff       	call   f010cb9d <sys_calculate_free_frames>
f011ef6f:	89 45 f0             	mov    %eax,-0x10(%ebp)
	freeDiskFrames = pf_calculate_free_frames();
f011ef72:	e8 51 4e fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011ef77:	89 45 ec             	mov    %eax,-0x14(%ebp)
	void* tempAddress = kmalloc(Mega);		//Use Hole 4 -> Hole 4 = 9 M
f011ef7a:	83 ec 0c             	sub    $0xc,%esp
f011ef7d:	68 00 00 10 00       	push   $0x100000
f011ef82:	e8 fe 88 fe ff       	call   f0107885 <kmalloc>
f011ef87:	83 c4 10             	add    $0x10,%esp
f011ef8a:	89 85 24 ff ff ff    	mov    %eax,-0xdc(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x03C00000)
f011ef90:	c7 85 20 ff ff ff 00 	movl   $0x1000,-0xe0(%ebp)
f011ef97:	10 00 00 
f011ef9a:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f011efa0:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011efa5:	89 85 1c ff ff ff    	mov    %eax,-0xe4(%ebp)
f011efab:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f011efb1:	ba 00 00 00 00       	mov    $0x0,%edx
f011efb6:	f7 b5 20 ff ff ff    	divl   -0xe0(%ebp)
f011efbc:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f011efc2:	29 d0                	sub    %edx,%eax
f011efc4:	89 c1                	mov    %eax,%ecx
f011efc6:	c7 85 18 ff ff ff 00 	movl   $0x1000,-0xe8(%ebp)
f011efcd:	10 00 00 
f011efd0:	a0 40 26 78 f0       	mov    0xf0782640,%al
f011efd5:	0f b6 d0             	movzbl %al,%edx
f011efd8:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f011efde:	01 d0                	add    %edx,%eax
f011efe0:	48                   	dec    %eax
f011efe1:	89 85 14 ff ff ff    	mov    %eax,-0xec(%ebp)
f011efe7:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f011efed:	ba 00 00 00 00       	mov    $0x0,%edx
f011eff2:	f7 b5 18 ff ff ff    	divl   -0xe8(%ebp)
f011eff8:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f011effe:	29 d0                	sub    %edx,%eax
f011f000:	01 c1                	add    %eax,%ecx
f011f002:	c7 85 10 ff ff ff 00 	movl   $0x1000,-0xf0(%ebp)
f011f009:	10 00 00 
f011f00c:	a0 40 26 78 f0       	mov    0xf0782640,%al
f011f011:	0f b6 c0             	movzbl %al,%eax
f011f014:	c1 e0 04             	shl    $0x4,%eax
f011f017:	89 c2                	mov    %eax,%edx
f011f019:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f011f01f:	01 d0                	add    %edx,%eax
f011f021:	48                   	dec    %eax
f011f022:	89 85 0c ff ff ff    	mov    %eax,-0xf4(%ebp)
f011f028:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f011f02e:	ba 00 00 00 00       	mov    $0x0,%edx
f011f033:	f7 b5 10 ff ff ff    	divl   -0xf0(%ebp)
f011f039:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f011f03f:	29 d0                	sub    %edx,%eax
f011f041:	01 c8                	add    %ecx,%eax
f011f043:	8d 90 00 40 c0 f9    	lea    -0x63fc000(%eax),%edx
f011f049:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011f04f:	39 c2                	cmp    %eax,%edx
f011f051:	74 17                	je     f011f06a <test_kmalloc_worstfit+0x8c9>
		panic("Worst Fit not working correctly");
f011f053:	83 ec 04             	sub    $0x4,%esp
f011f056:	68 94 ba 13 f0       	push   $0xf013ba94
f011f05b:	68 52 04 00 00       	push   $0x452
f011f060:	68 7a b3 13 f0       	push   $0xf013b37a
f011f065:	e8 9b 11 fe ff       	call   f0100205 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011f06a:	e8 59 4d fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011f06f:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011f072:	74 17                	je     f011f08b <test_kmalloc_worstfit+0x8ea>
f011f074:	83 ec 04             	sub    $0x4,%esp
f011f077:	68 94 b3 13 f0       	push   $0xf013b394
f011f07c:	68 53 04 00 00       	push   $0x453
f011f081:	68 7a b3 13 f0       	push   $0xf013b37a
f011f086:	e8 7a 11 fe ff       	call   f0100205 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) !=  1*Mega/PAGE_SIZE) panic("Wrong allocation:");
f011f08b:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f011f08e:	e8 0a db fe ff       	call   f010cb9d <sys_calculate_free_frames>
f011f093:	29 c3                	sub    %eax,%ebx
f011f095:	89 d8                	mov    %ebx,%eax
f011f097:	3d 00 01 00 00       	cmp    $0x100,%eax
f011f09c:	74 17                	je     f011f0b5 <test_kmalloc_worstfit+0x914>
f011f09e:	83 ec 04             	sub    $0x4,%esp
f011f0a1:	68 b2 b8 13 f0       	push   $0xf013b8b2
f011f0a6:	68 54 04 00 00       	push   $0x454
f011f0ab:	68 7a b3 13 f0       	push   $0xf013b37a
f011f0b0:	e8 50 11 fe ff       	call   f0100205 <_panic>
	cprintf("Test %d Passed \n", ++count);
f011f0b5:	ff 45 e8             	incl   -0x18(%ebp)
f011f0b8:	83 ec 08             	sub    $0x8,%esp
f011f0bb:	ff 75 e8             	pushl  -0x18(%ebp)
f011f0be:	68 b4 ba 13 f0       	push   $0xf013bab4
f011f0c3:	e8 46 1c fe ff       	call   f0100d0e <cprintf>
f011f0c8:	83 c4 10             	add    $0x10,%esp

	freeFrames = sys_calculate_free_frames() ;
f011f0cb:	e8 cd da fe ff       	call   f010cb9d <sys_calculate_free_frames>
f011f0d0:	89 45 f0             	mov    %eax,-0x10(%ebp)
	freeDiskFrames = pf_calculate_free_frames();
f011f0d3:	e8 f0 4c fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011f0d8:	89 45 ec             	mov    %eax,-0x14(%ebp)
	tempAddress = kmalloc(4 * Mega);			//Use Hole 4 -> Hole 4 = 5 M
f011f0db:	83 ec 0c             	sub    $0xc,%esp
f011f0de:	68 00 00 40 00       	push   $0x400000
f011f0e3:	e8 9d 87 fe ff       	call   f0107885 <kmalloc>
f011f0e8:	83 c4 10             	add    $0x10,%esp
f011f0eb:	89 85 24 ff ff ff    	mov    %eax,-0xdc(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x03D00000)
f011f0f1:	c7 85 08 ff ff ff 00 	movl   $0x1000,-0xf8(%ebp)
f011f0f8:	10 00 00 
f011f0fb:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f011f101:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011f106:	89 85 04 ff ff ff    	mov    %eax,-0xfc(%ebp)
f011f10c:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f011f112:	ba 00 00 00 00       	mov    $0x0,%edx
f011f117:	f7 b5 08 ff ff ff    	divl   -0xf8(%ebp)
f011f11d:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f011f123:	29 d0                	sub    %edx,%eax
f011f125:	89 c1                	mov    %eax,%ecx
f011f127:	c7 85 00 ff ff ff 00 	movl   $0x1000,-0x100(%ebp)
f011f12e:	10 00 00 
f011f131:	a0 40 26 78 f0       	mov    0xf0782640,%al
f011f136:	0f b6 d0             	movzbl %al,%edx
f011f139:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f011f13f:	01 d0                	add    %edx,%eax
f011f141:	48                   	dec    %eax
f011f142:	89 85 fc fe ff ff    	mov    %eax,-0x104(%ebp)
f011f148:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f011f14e:	ba 00 00 00 00       	mov    $0x0,%edx
f011f153:	f7 b5 00 ff ff ff    	divl   -0x100(%ebp)
f011f159:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f011f15f:	29 d0                	sub    %edx,%eax
f011f161:	01 c1                	add    %eax,%ecx
f011f163:	c7 85 f8 fe ff ff 00 	movl   $0x1000,-0x108(%ebp)
f011f16a:	10 00 00 
f011f16d:	a0 40 26 78 f0       	mov    0xf0782640,%al
f011f172:	0f b6 c0             	movzbl %al,%eax
f011f175:	c1 e0 04             	shl    $0x4,%eax
f011f178:	89 c2                	mov    %eax,%edx
f011f17a:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f011f180:	01 d0                	add    %edx,%eax
f011f182:	48                   	dec    %eax
f011f183:	89 85 f4 fe ff ff    	mov    %eax,-0x10c(%ebp)
f011f189:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f011f18f:	ba 00 00 00 00       	mov    $0x0,%edx
f011f194:	f7 b5 f8 fe ff ff    	divl   -0x108(%ebp)
f011f19a:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f011f1a0:	29 d0                	sub    %edx,%eax
f011f1a2:	01 c8                	add    %ecx,%eax
f011f1a4:	8d 90 00 40 d0 f9    	lea    -0x62fc000(%eax),%edx
f011f1aa:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011f1b0:	39 c2                	cmp    %eax,%edx
f011f1b2:	74 17                	je     f011f1cb <test_kmalloc_worstfit+0xa2a>
		panic("Worst Fit not working correctly");
f011f1b4:	83 ec 04             	sub    $0x4,%esp
f011f1b7:	68 94 ba 13 f0       	push   $0xf013ba94
f011f1bc:	68 5b 04 00 00       	push   $0x45b
f011f1c1:	68 7a b3 13 f0       	push   $0xf013b37a
f011f1c6:	e8 3a 10 fe ff       	call   f0100205 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011f1cb:	e8 f8 4b fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011f1d0:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011f1d3:	74 17                	je     f011f1ec <test_kmalloc_worstfit+0xa4b>
f011f1d5:	83 ec 04             	sub    $0x4,%esp
f011f1d8:	68 94 b3 13 f0       	push   $0xf013b394
f011f1dd:	68 5c 04 00 00       	push   $0x45c
f011f1e2:	68 7a b3 13 f0       	push   $0xf013b37a
f011f1e7:	e8 19 10 fe ff       	call   f0100205 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) !=  4*Mega/PAGE_SIZE) panic("Wrong allocation:");
f011f1ec:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f011f1ef:	e8 a9 d9 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f011f1f4:	29 c3                	sub    %eax,%ebx
f011f1f6:	89 d8                	mov    %ebx,%eax
f011f1f8:	3d 00 04 00 00       	cmp    $0x400,%eax
f011f1fd:	74 17                	je     f011f216 <test_kmalloc_worstfit+0xa75>
f011f1ff:	83 ec 04             	sub    $0x4,%esp
f011f202:	68 b2 b8 13 f0       	push   $0xf013b8b2
f011f207:	68 5d 04 00 00       	push   $0x45d
f011f20c:	68 7a b3 13 f0       	push   $0xf013b37a
f011f211:	e8 ef 0f fe ff       	call   f0100205 <_panic>
	cprintf("Test %d Passed \n", ++count);
f011f216:	ff 45 e8             	incl   -0x18(%ebp)
f011f219:	83 ec 08             	sub    $0x8,%esp
f011f21c:	ff 75 e8             	pushl  -0x18(%ebp)
f011f21f:	68 b4 ba 13 f0       	push   $0xf013bab4
f011f224:	e8 e5 1a fe ff       	call   f0100d0e <cprintf>
f011f229:	83 c4 10             	add    $0x10,%esp

	freeFrames = sys_calculate_free_frames() ;
f011f22c:	e8 6c d9 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f011f231:	89 45 f0             	mov    %eax,-0x10(%ebp)
	freeDiskFrames = pf_calculate_free_frames();
f011f234:	e8 8f 4b fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011f239:	89 45 ec             	mov    %eax,-0x14(%ebp)
	tempAddress = kmalloc(6*Mega); 			   //Use Hole 5 -> Hole 5 = 2 M
f011f23c:	83 ec 0c             	sub    $0xc,%esp
f011f23f:	68 00 00 60 00       	push   $0x600000
f011f244:	e8 3c 86 fe ff       	call   f0107885 <kmalloc>
f011f249:	83 c4 10             	add    $0x10,%esp
f011f24c:	89 85 24 ff ff ff    	mov    %eax,-0xdc(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x08C00000)
f011f252:	c7 85 f0 fe ff ff 00 	movl   $0x1000,-0x110(%ebp)
f011f259:	10 00 00 
f011f25c:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f011f262:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011f267:	89 85 ec fe ff ff    	mov    %eax,-0x114(%ebp)
f011f26d:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f011f273:	ba 00 00 00 00       	mov    $0x0,%edx
f011f278:	f7 b5 f0 fe ff ff    	divl   -0x110(%ebp)
f011f27e:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f011f284:	29 d0                	sub    %edx,%eax
f011f286:	89 c1                	mov    %eax,%ecx
f011f288:	c7 85 e8 fe ff ff 00 	movl   $0x1000,-0x118(%ebp)
f011f28f:	10 00 00 
f011f292:	a0 40 26 78 f0       	mov    0xf0782640,%al
f011f297:	0f b6 d0             	movzbl %al,%edx
f011f29a:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f011f2a0:	01 d0                	add    %edx,%eax
f011f2a2:	48                   	dec    %eax
f011f2a3:	89 85 e4 fe ff ff    	mov    %eax,-0x11c(%ebp)
f011f2a9:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f011f2af:	ba 00 00 00 00       	mov    $0x0,%edx
f011f2b4:	f7 b5 e8 fe ff ff    	divl   -0x118(%ebp)
f011f2ba:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f011f2c0:	29 d0                	sub    %edx,%eax
f011f2c2:	01 c1                	add    %eax,%ecx
f011f2c4:	c7 85 e0 fe ff ff 00 	movl   $0x1000,-0x120(%ebp)
f011f2cb:	10 00 00 
f011f2ce:	a0 40 26 78 f0       	mov    0xf0782640,%al
f011f2d3:	0f b6 c0             	movzbl %al,%eax
f011f2d6:	c1 e0 04             	shl    $0x4,%eax
f011f2d9:	89 c2                	mov    %eax,%edx
f011f2db:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f011f2e1:	01 d0                	add    %edx,%eax
f011f2e3:	48                   	dec    %eax
f011f2e4:	89 85 dc fe ff ff    	mov    %eax,-0x124(%ebp)
f011f2ea:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f011f2f0:	ba 00 00 00 00       	mov    $0x0,%edx
f011f2f5:	f7 b5 e0 fe ff ff    	divl   -0x120(%ebp)
f011f2fb:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f011f301:	29 d0                	sub    %edx,%eax
f011f303:	01 c8                	add    %ecx,%eax
f011f305:	8d 90 00 40 c0 fe    	lea    -0x13fc000(%eax),%edx
f011f30b:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011f311:	39 c2                	cmp    %eax,%edx
f011f313:	74 17                	je     f011f32c <test_kmalloc_worstfit+0xb8b>
		panic("Worst Fit not working correctly");
f011f315:	83 ec 04             	sub    $0x4,%esp
f011f318:	68 94 ba 13 f0       	push   $0xf013ba94
f011f31d:	68 64 04 00 00       	push   $0x464
f011f322:	68 7a b3 13 f0       	push   $0xf013b37a
f011f327:	e8 d9 0e fe ff       	call   f0100205 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011f32c:	e8 97 4a fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011f331:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011f334:	74 17                	je     f011f34d <test_kmalloc_worstfit+0xbac>
f011f336:	83 ec 04             	sub    $0x4,%esp
f011f339:	68 94 b3 13 f0       	push   $0xf013b394
f011f33e:	68 65 04 00 00       	push   $0x465
f011f343:	68 7a b3 13 f0       	push   $0xf013b37a
f011f348:	e8 b8 0e fe ff       	call   f0100205 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) !=  6*Mega/PAGE_SIZE) panic("Wrong allocation:");
f011f34d:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f011f350:	e8 48 d8 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f011f355:	29 c3                	sub    %eax,%ebx
f011f357:	89 d8                	mov    %ebx,%eax
f011f359:	3d 00 06 00 00       	cmp    $0x600,%eax
f011f35e:	74 17                	je     f011f377 <test_kmalloc_worstfit+0xbd6>
f011f360:	83 ec 04             	sub    $0x4,%esp
f011f363:	68 b2 b8 13 f0       	push   $0xf013b8b2
f011f368:	68 66 04 00 00       	push   $0x466
f011f36d:	68 7a b3 13 f0       	push   $0xf013b37a
f011f372:	e8 8e 0e fe ff       	call   f0100205 <_panic>
	cprintf("Test %d Passed \n", ++count);
f011f377:	ff 45 e8             	incl   -0x18(%ebp)
f011f37a:	83 ec 08             	sub    $0x8,%esp
f011f37d:	ff 75 e8             	pushl  -0x18(%ebp)
f011f380:	68 b4 ba 13 f0       	push   $0xf013bab4
f011f385:	e8 84 19 fe ff       	call   f0100d0e <cprintf>
f011f38a:	83 c4 10             	add    $0x10,%esp

	freeFrames = sys_calculate_free_frames() ;
f011f38d:	e8 0b d8 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f011f392:	89 45 f0             	mov    %eax,-0x10(%ebp)
	freeDiskFrames = pf_calculate_free_frames();
f011f395:	e8 2e 4a fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011f39a:	89 45 ec             	mov    %eax,-0x14(%ebp)
	tempAddress = kmalloc(5*Mega); 			   //Use Hole 3 -> Hole 3 = 1 M
f011f39d:	83 ec 0c             	sub    $0xc,%esp
f011f3a0:	68 00 00 50 00       	push   $0x500000
f011f3a5:	e8 db 84 fe ff       	call   f0107885 <kmalloc>
f011f3aa:	83 c4 10             	add    $0x10,%esp
f011f3ad:	89 85 24 ff ff ff    	mov    %eax,-0xdc(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x01400000)
f011f3b3:	c7 85 d8 fe ff ff 00 	movl   $0x1000,-0x128(%ebp)
f011f3ba:	10 00 00 
f011f3bd:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f011f3c3:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011f3c8:	89 85 d4 fe ff ff    	mov    %eax,-0x12c(%ebp)
f011f3ce:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f011f3d4:	ba 00 00 00 00       	mov    $0x0,%edx
f011f3d9:	f7 b5 d8 fe ff ff    	divl   -0x128(%ebp)
f011f3df:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f011f3e5:	29 d0                	sub    %edx,%eax
f011f3e7:	89 c1                	mov    %eax,%ecx
f011f3e9:	c7 85 d0 fe ff ff 00 	movl   $0x1000,-0x130(%ebp)
f011f3f0:	10 00 00 
f011f3f3:	a0 40 26 78 f0       	mov    0xf0782640,%al
f011f3f8:	0f b6 d0             	movzbl %al,%edx
f011f3fb:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f011f401:	01 d0                	add    %edx,%eax
f011f403:	48                   	dec    %eax
f011f404:	89 85 cc fe ff ff    	mov    %eax,-0x134(%ebp)
f011f40a:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f011f410:	ba 00 00 00 00       	mov    $0x0,%edx
f011f415:	f7 b5 d0 fe ff ff    	divl   -0x130(%ebp)
f011f41b:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f011f421:	29 d0                	sub    %edx,%eax
f011f423:	01 c1                	add    %eax,%ecx
f011f425:	c7 85 c8 fe ff ff 00 	movl   $0x1000,-0x138(%ebp)
f011f42c:	10 00 00 
f011f42f:	a0 40 26 78 f0       	mov    0xf0782640,%al
f011f434:	0f b6 c0             	movzbl %al,%eax
f011f437:	c1 e0 04             	shl    $0x4,%eax
f011f43a:	89 c2                	mov    %eax,%edx
f011f43c:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f011f442:	01 d0                	add    %edx,%eax
f011f444:	48                   	dec    %eax
f011f445:	89 85 c4 fe ff ff    	mov    %eax,-0x13c(%ebp)
f011f44b:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f011f451:	ba 00 00 00 00       	mov    $0x0,%edx
f011f456:	f7 b5 c8 fe ff ff    	divl   -0x138(%ebp)
f011f45c:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f011f462:	29 d0                	sub    %edx,%eax
f011f464:	01 c8                	add    %ecx,%eax
f011f466:	8d 90 00 40 40 f7    	lea    -0x8bfc000(%eax),%edx
f011f46c:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011f472:	39 c2                	cmp    %eax,%edx
f011f474:	74 17                	je     f011f48d <test_kmalloc_worstfit+0xcec>
		panic("Worst Fit not working correctly");
f011f476:	83 ec 04             	sub    $0x4,%esp
f011f479:	68 94 ba 13 f0       	push   $0xf013ba94
f011f47e:	68 6d 04 00 00       	push   $0x46d
f011f483:	68 7a b3 13 f0       	push   $0xf013b37a
f011f488:	e8 78 0d fe ff       	call   f0100205 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011f48d:	e8 36 49 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011f492:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011f495:	74 17                	je     f011f4ae <test_kmalloc_worstfit+0xd0d>
f011f497:	83 ec 04             	sub    $0x4,%esp
f011f49a:	68 94 b3 13 f0       	push   $0xf013b394
f011f49f:	68 6e 04 00 00       	push   $0x46e
f011f4a4:	68 7a b3 13 f0       	push   $0xf013b37a
f011f4a9:	e8 57 0d fe ff       	call   f0100205 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) !=  5*Mega/PAGE_SIZE) panic("Wrong allocation:");
f011f4ae:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f011f4b1:	e8 e7 d6 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f011f4b6:	29 c3                	sub    %eax,%ebx
f011f4b8:	89 d8                	mov    %ebx,%eax
f011f4ba:	3d 00 05 00 00       	cmp    $0x500,%eax
f011f4bf:	74 17                	je     f011f4d8 <test_kmalloc_worstfit+0xd37>
f011f4c1:	83 ec 04             	sub    $0x4,%esp
f011f4c4:	68 b2 b8 13 f0       	push   $0xf013b8b2
f011f4c9:	68 6f 04 00 00       	push   $0x46f
f011f4ce:	68 7a b3 13 f0       	push   $0xf013b37a
f011f4d3:	e8 2d 0d fe ff       	call   f0100205 <_panic>
	cprintf("Test %d Passed \n", ++count);
f011f4d8:	ff 45 e8             	incl   -0x18(%ebp)
f011f4db:	83 ec 08             	sub    $0x8,%esp
f011f4de:	ff 75 e8             	pushl  -0x18(%ebp)
f011f4e1:	68 b4 ba 13 f0       	push   $0xf013bab4
f011f4e6:	e8 23 18 fe ff       	call   f0100d0e <cprintf>
f011f4eb:	83 c4 10             	add    $0x10,%esp

	freeFrames = sys_calculate_free_frames() ;
f011f4ee:	e8 aa d6 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f011f4f3:	89 45 f0             	mov    %eax,-0x10(%ebp)
	freeDiskFrames = pf_calculate_free_frames();
f011f4f6:	e8 cd 48 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011f4fb:	89 45 ec             	mov    %eax,-0x14(%ebp)
	tempAddress = kmalloc(4*Mega); 			   // Use Hole 4 -> Hole 4 = 1 M
f011f4fe:	83 ec 0c             	sub    $0xc,%esp
f011f501:	68 00 00 40 00       	push   $0x400000
f011f506:	e8 7a 83 fe ff       	call   f0107885 <kmalloc>
f011f50b:	83 c4 10             	add    $0x10,%esp
f011f50e:	89 85 24 ff ff ff    	mov    %eax,-0xdc(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x04100000)
f011f514:	c7 85 c0 fe ff ff 00 	movl   $0x1000,-0x140(%ebp)
f011f51b:	10 00 00 
f011f51e:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f011f524:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011f529:	89 85 bc fe ff ff    	mov    %eax,-0x144(%ebp)
f011f52f:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f011f535:	ba 00 00 00 00       	mov    $0x0,%edx
f011f53a:	f7 b5 c0 fe ff ff    	divl   -0x140(%ebp)
f011f540:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f011f546:	29 d0                	sub    %edx,%eax
f011f548:	89 c1                	mov    %eax,%ecx
f011f54a:	c7 85 b8 fe ff ff 00 	movl   $0x1000,-0x148(%ebp)
f011f551:	10 00 00 
f011f554:	a0 40 26 78 f0       	mov    0xf0782640,%al
f011f559:	0f b6 d0             	movzbl %al,%edx
f011f55c:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f011f562:	01 d0                	add    %edx,%eax
f011f564:	48                   	dec    %eax
f011f565:	89 85 b4 fe ff ff    	mov    %eax,-0x14c(%ebp)
f011f56b:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f011f571:	ba 00 00 00 00       	mov    $0x0,%edx
f011f576:	f7 b5 b8 fe ff ff    	divl   -0x148(%ebp)
f011f57c:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f011f582:	29 d0                	sub    %edx,%eax
f011f584:	01 c1                	add    %eax,%ecx
f011f586:	c7 85 b0 fe ff ff 00 	movl   $0x1000,-0x150(%ebp)
f011f58d:	10 00 00 
f011f590:	a0 40 26 78 f0       	mov    0xf0782640,%al
f011f595:	0f b6 c0             	movzbl %al,%eax
f011f598:	c1 e0 04             	shl    $0x4,%eax
f011f59b:	89 c2                	mov    %eax,%edx
f011f59d:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f011f5a3:	01 d0                	add    %edx,%eax
f011f5a5:	48                   	dec    %eax
f011f5a6:	89 85 ac fe ff ff    	mov    %eax,-0x154(%ebp)
f011f5ac:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f011f5b2:	ba 00 00 00 00       	mov    $0x0,%edx
f011f5b7:	f7 b5 b0 fe ff ff    	divl   -0x150(%ebp)
f011f5bd:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f011f5c3:	29 d0                	sub    %edx,%eax
f011f5c5:	01 c8                	add    %ecx,%eax
f011f5c7:	8d 90 00 40 10 fa    	lea    -0x5efc000(%eax),%edx
f011f5cd:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011f5d3:	39 c2                	cmp    %eax,%edx
f011f5d5:	74 17                	je     f011f5ee <test_kmalloc_worstfit+0xe4d>
		panic("Worst Fit not working correctly");
f011f5d7:	83 ec 04             	sub    $0x4,%esp
f011f5da:	68 94 ba 13 f0       	push   $0xf013ba94
f011f5df:	68 76 04 00 00       	push   $0x476
f011f5e4:	68 7a b3 13 f0       	push   $0xf013b37a
f011f5e9:	e8 17 0c fe ff       	call   f0100205 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011f5ee:	e8 d5 47 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011f5f3:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011f5f6:	74 17                	je     f011f60f <test_kmalloc_worstfit+0xe6e>
f011f5f8:	83 ec 04             	sub    $0x4,%esp
f011f5fb:	68 94 b3 13 f0       	push   $0xf013b394
f011f600:	68 77 04 00 00       	push   $0x477
f011f605:	68 7a b3 13 f0       	push   $0xf013b37a
f011f60a:	e8 f6 0b fe ff       	call   f0100205 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) !=  4*Mega/PAGE_SIZE) panic("Wrong allocation:");
f011f60f:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f011f612:	e8 86 d5 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f011f617:	29 c3                	sub    %eax,%ebx
f011f619:	89 d8                	mov    %ebx,%eax
f011f61b:	3d 00 04 00 00       	cmp    $0x400,%eax
f011f620:	74 17                	je     f011f639 <test_kmalloc_worstfit+0xe98>
f011f622:	83 ec 04             	sub    $0x4,%esp
f011f625:	68 b2 b8 13 f0       	push   $0xf013b8b2
f011f62a:	68 78 04 00 00       	push   $0x478
f011f62f:	68 7a b3 13 f0       	push   $0xf013b37a
f011f634:	e8 cc 0b fe ff       	call   f0100205 <_panic>
	cprintf("Test %d Passed \n", ++count);
f011f639:	ff 45 e8             	incl   -0x18(%ebp)
f011f63c:	83 ec 08             	sub    $0x8,%esp
f011f63f:	ff 75 e8             	pushl  -0x18(%ebp)
f011f642:	68 b4 ba 13 f0       	push   $0xf013bab4
f011f647:	e8 c2 16 fe ff       	call   f0100d0e <cprintf>
f011f64c:	83 c4 10             	add    $0x10,%esp

	freeFrames = sys_calculate_free_frames() ;
f011f64f:	e8 49 d5 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f011f654:	89 45 f0             	mov    %eax,-0x10(%ebp)
	freeDiskFrames = pf_calculate_free_frames();
f011f657:	e8 6c 47 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011f65c:	89 45 ec             	mov    %eax,-0x14(%ebp)
	tempAddress = kmalloc(2 * Mega); 			// Use Hole 2 -> Hole 2 = 2 M
f011f65f:	83 ec 0c             	sub    $0xc,%esp
f011f662:	68 00 00 20 00       	push   $0x200000
f011f667:	e8 19 82 fe ff       	call   f0107885 <kmalloc>
f011f66c:	83 c4 10             	add    $0x10,%esp
f011f66f:	89 85 24 ff ff ff    	mov    %eax,-0xdc(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x00400000)
f011f675:	c7 85 a8 fe ff ff 00 	movl   $0x1000,-0x158(%ebp)
f011f67c:	10 00 00 
f011f67f:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f011f685:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011f68a:	89 85 a4 fe ff ff    	mov    %eax,-0x15c(%ebp)
f011f690:	8b 85 a4 fe ff ff    	mov    -0x15c(%ebp),%eax
f011f696:	ba 00 00 00 00       	mov    $0x0,%edx
f011f69b:	f7 b5 a8 fe ff ff    	divl   -0x158(%ebp)
f011f6a1:	8b 85 a4 fe ff ff    	mov    -0x15c(%ebp),%eax
f011f6a7:	29 d0                	sub    %edx,%eax
f011f6a9:	89 c1                	mov    %eax,%ecx
f011f6ab:	c7 85 a0 fe ff ff 00 	movl   $0x1000,-0x160(%ebp)
f011f6b2:	10 00 00 
f011f6b5:	a0 40 26 78 f0       	mov    0xf0782640,%al
f011f6ba:	0f b6 d0             	movzbl %al,%edx
f011f6bd:	8b 85 a0 fe ff ff    	mov    -0x160(%ebp),%eax
f011f6c3:	01 d0                	add    %edx,%eax
f011f6c5:	48                   	dec    %eax
f011f6c6:	89 85 9c fe ff ff    	mov    %eax,-0x164(%ebp)
f011f6cc:	8b 85 9c fe ff ff    	mov    -0x164(%ebp),%eax
f011f6d2:	ba 00 00 00 00       	mov    $0x0,%edx
f011f6d7:	f7 b5 a0 fe ff ff    	divl   -0x160(%ebp)
f011f6dd:	8b 85 9c fe ff ff    	mov    -0x164(%ebp),%eax
f011f6e3:	29 d0                	sub    %edx,%eax
f011f6e5:	01 c1                	add    %eax,%ecx
f011f6e7:	c7 85 98 fe ff ff 00 	movl   $0x1000,-0x168(%ebp)
f011f6ee:	10 00 00 
f011f6f1:	a0 40 26 78 f0       	mov    0xf0782640,%al
f011f6f6:	0f b6 c0             	movzbl %al,%eax
f011f6f9:	c1 e0 04             	shl    $0x4,%eax
f011f6fc:	89 c2                	mov    %eax,%edx
f011f6fe:	8b 85 98 fe ff ff    	mov    -0x168(%ebp),%eax
f011f704:	01 d0                	add    %edx,%eax
f011f706:	48                   	dec    %eax
f011f707:	89 85 94 fe ff ff    	mov    %eax,-0x16c(%ebp)
f011f70d:	8b 85 94 fe ff ff    	mov    -0x16c(%ebp),%eax
f011f713:	ba 00 00 00 00       	mov    $0x0,%edx
f011f718:	f7 b5 98 fe ff ff    	divl   -0x168(%ebp)
f011f71e:	8b 85 94 fe ff ff    	mov    -0x16c(%ebp),%eax
f011f724:	29 d0                	sub    %edx,%eax
f011f726:	01 c8                	add    %ecx,%eax
f011f728:	8d 90 00 40 40 f6    	lea    -0x9bfc000(%eax),%edx
f011f72e:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011f734:	39 c2                	cmp    %eax,%edx
f011f736:	74 17                	je     f011f74f <test_kmalloc_worstfit+0xfae>
		panic("Worst Fit not working correctly");
f011f738:	83 ec 04             	sub    $0x4,%esp
f011f73b:	68 94 ba 13 f0       	push   $0xf013ba94
f011f740:	68 7f 04 00 00       	push   $0x47f
f011f745:	68 7a b3 13 f0       	push   $0xf013b37a
f011f74a:	e8 b6 0a fe ff       	call   f0100205 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011f74f:	e8 74 46 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011f754:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011f757:	74 17                	je     f011f770 <test_kmalloc_worstfit+0xfcf>
f011f759:	83 ec 04             	sub    $0x4,%esp
f011f75c:	68 94 b3 13 f0       	push   $0xf013b394
f011f761:	68 80 04 00 00       	push   $0x480
f011f766:	68 7a b3 13 f0       	push   $0xf013b37a
f011f76b:	e8 95 0a fe ff       	call   f0100205 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) !=  2*Mega/PAGE_SIZE) panic("Wrong allocation:");
f011f770:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f011f773:	e8 25 d4 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f011f778:	29 c3                	sub    %eax,%ebx
f011f77a:	89 d8                	mov    %ebx,%eax
f011f77c:	3d 00 02 00 00       	cmp    $0x200,%eax
f011f781:	74 17                	je     f011f79a <test_kmalloc_worstfit+0xff9>
f011f783:	83 ec 04             	sub    $0x4,%esp
f011f786:	68 b2 b8 13 f0       	push   $0xf013b8b2
f011f78b:	68 81 04 00 00       	push   $0x481
f011f790:	68 7a b3 13 f0       	push   $0xf013b37a
f011f795:	e8 6b 0a fe ff       	call   f0100205 <_panic>
	cprintf("Test %d Passed \n", ++count);
f011f79a:	ff 45 e8             	incl   -0x18(%ebp)
f011f79d:	83 ec 08             	sub    $0x8,%esp
f011f7a0:	ff 75 e8             	pushl  -0x18(%ebp)
f011f7a3:	68 b4 ba 13 f0       	push   $0xf013bab4
f011f7a8:	e8 61 15 fe ff       	call   f0100d0e <cprintf>
f011f7ad:	83 c4 10             	add    $0x10,%esp

	freeFrames = sys_calculate_free_frames() ;
f011f7b0:	e8 e8 d3 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f011f7b5:	89 45 f0             	mov    %eax,-0x10(%ebp)
	freeDiskFrames = pf_calculate_free_frames();
f011f7b8:	e8 0b 46 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011f7bd:	89 45 ec             	mov    %eax,-0x14(%ebp)
	tempAddress = kmalloc(1*Mega + 512*kilo);    // Use Hole 1 -> Hole 1 = 0.5 M
f011f7c0:	83 ec 0c             	sub    $0xc,%esp
f011f7c3:	68 00 00 18 00       	push   $0x180000
f011f7c8:	e8 b8 80 fe ff       	call   f0107885 <kmalloc>
f011f7cd:	83 c4 10             	add    $0x10,%esp
f011f7d0:	89 85 24 ff ff ff    	mov    %eax,-0xdc(%ebp)
	if((uint32)tempAddress != ACTUAL_START)
f011f7d6:	c7 85 90 fe ff ff 00 	movl   $0x1000,-0x170(%ebp)
f011f7dd:	10 00 00 
f011f7e0:	8b 85 90 fe ff ff    	mov    -0x170(%ebp),%eax
f011f7e6:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011f7eb:	89 85 8c fe ff ff    	mov    %eax,-0x174(%ebp)
f011f7f1:	8b 85 8c fe ff ff    	mov    -0x174(%ebp),%eax
f011f7f7:	ba 00 00 00 00       	mov    $0x0,%edx
f011f7fc:	f7 b5 90 fe ff ff    	divl   -0x170(%ebp)
f011f802:	8b 85 8c fe ff ff    	mov    -0x174(%ebp),%eax
f011f808:	29 d0                	sub    %edx,%eax
f011f80a:	89 c1                	mov    %eax,%ecx
f011f80c:	c7 85 88 fe ff ff 00 	movl   $0x1000,-0x178(%ebp)
f011f813:	10 00 00 
f011f816:	a0 40 26 78 f0       	mov    0xf0782640,%al
f011f81b:	0f b6 d0             	movzbl %al,%edx
f011f81e:	8b 85 88 fe ff ff    	mov    -0x178(%ebp),%eax
f011f824:	01 d0                	add    %edx,%eax
f011f826:	48                   	dec    %eax
f011f827:	89 85 84 fe ff ff    	mov    %eax,-0x17c(%ebp)
f011f82d:	8b 85 84 fe ff ff    	mov    -0x17c(%ebp),%eax
f011f833:	ba 00 00 00 00       	mov    $0x0,%edx
f011f838:	f7 b5 88 fe ff ff    	divl   -0x178(%ebp)
f011f83e:	8b 85 84 fe ff ff    	mov    -0x17c(%ebp),%eax
f011f844:	29 d0                	sub    %edx,%eax
f011f846:	01 c1                	add    %eax,%ecx
f011f848:	c7 85 80 fe ff ff 00 	movl   $0x1000,-0x180(%ebp)
f011f84f:	10 00 00 
f011f852:	a0 40 26 78 f0       	mov    0xf0782640,%al
f011f857:	0f b6 c0             	movzbl %al,%eax
f011f85a:	c1 e0 04             	shl    $0x4,%eax
f011f85d:	89 c2                	mov    %eax,%edx
f011f85f:	8b 85 80 fe ff ff    	mov    -0x180(%ebp),%eax
f011f865:	01 d0                	add    %edx,%eax
f011f867:	48                   	dec    %eax
f011f868:	89 85 7c fe ff ff    	mov    %eax,-0x184(%ebp)
f011f86e:	8b 85 7c fe ff ff    	mov    -0x184(%ebp),%eax
f011f874:	ba 00 00 00 00       	mov    $0x0,%edx
f011f879:	f7 b5 80 fe ff ff    	divl   -0x180(%ebp)
f011f87f:	8b 85 7c fe ff ff    	mov    -0x184(%ebp),%eax
f011f885:	29 d0                	sub    %edx,%eax
f011f887:	01 c8                	add    %ecx,%eax
f011f889:	8d 90 00 40 00 f6    	lea    -0x9ffc000(%eax),%edx
f011f88f:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011f895:	39 c2                	cmp    %eax,%edx
f011f897:	74 17                	je     f011f8b0 <test_kmalloc_worstfit+0x110f>
		panic("Worst Fit not working correctly");
f011f899:	83 ec 04             	sub    $0x4,%esp
f011f89c:	68 94 ba 13 f0       	push   $0xf013ba94
f011f8a1:	68 88 04 00 00       	push   $0x488
f011f8a6:	68 7a b3 13 f0       	push   $0xf013b37a
f011f8ab:	e8 55 09 fe ff       	call   f0100205 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011f8b0:	e8 13 45 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011f8b5:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011f8b8:	74 17                	je     f011f8d1 <test_kmalloc_worstfit+0x1130>
f011f8ba:	83 ec 04             	sub    $0x4,%esp
f011f8bd:	68 94 b3 13 f0       	push   $0xf013b394
f011f8c2:	68 89 04 00 00       	push   $0x489
f011f8c7:	68 7a b3 13 f0       	push   $0xf013b37a
f011f8cc:	e8 34 09 fe ff       	call   f0100205 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) !=  (1*Mega + 512*kilo)/PAGE_SIZE) panic("Wrong allocation:");
f011f8d1:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f011f8d4:	e8 c4 d2 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f011f8d9:	29 c3                	sub    %eax,%ebx
f011f8db:	89 d8                	mov    %ebx,%eax
f011f8dd:	3d 80 01 00 00       	cmp    $0x180,%eax
f011f8e2:	74 17                	je     f011f8fb <test_kmalloc_worstfit+0x115a>
f011f8e4:	83 ec 04             	sub    $0x4,%esp
f011f8e7:	68 b2 b8 13 f0       	push   $0xf013b8b2
f011f8ec:	68 8a 04 00 00       	push   $0x48a
f011f8f1:	68 7a b3 13 f0       	push   $0xf013b37a
f011f8f6:	e8 0a 09 fe ff       	call   f0100205 <_panic>
	cprintf("Test %d Passed \n", ++count);
f011f8fb:	ff 45 e8             	incl   -0x18(%ebp)
f011f8fe:	83 ec 08             	sub    $0x8,%esp
f011f901:	ff 75 e8             	pushl  -0x18(%ebp)
f011f904:	68 b4 ba 13 f0       	push   $0xf013bab4
f011f909:	e8 00 14 fe ff       	call   f0100d0e <cprintf>
f011f90e:	83 c4 10             	add    $0x10,%esp

	freeFrames = sys_calculate_free_frames() ;
f011f911:	e8 87 d2 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f011f916:	89 45 f0             	mov    %eax,-0x10(%ebp)
	freeDiskFrames = pf_calculate_free_frames();
f011f919:	e8 aa 44 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011f91e:	89 45 ec             	mov    %eax,-0x14(%ebp)
	tempAddress = kmalloc(512*kilo); 			   // Use Hole 2 -> Hole 2 = 1.5 M
f011f921:	83 ec 0c             	sub    $0xc,%esp
f011f924:	68 00 00 08 00       	push   $0x80000
f011f929:	e8 57 7f fe ff       	call   f0107885 <kmalloc>
f011f92e:	83 c4 10             	add    $0x10,%esp
f011f931:	89 85 24 ff ff ff    	mov    %eax,-0xdc(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x00600000)
f011f937:	c7 85 78 fe ff ff 00 	movl   $0x1000,-0x188(%ebp)
f011f93e:	10 00 00 
f011f941:	8b 85 78 fe ff ff    	mov    -0x188(%ebp),%eax
f011f947:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011f94c:	89 85 74 fe ff ff    	mov    %eax,-0x18c(%ebp)
f011f952:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f011f958:	ba 00 00 00 00       	mov    $0x0,%edx
f011f95d:	f7 b5 78 fe ff ff    	divl   -0x188(%ebp)
f011f963:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f011f969:	29 d0                	sub    %edx,%eax
f011f96b:	89 c1                	mov    %eax,%ecx
f011f96d:	c7 85 70 fe ff ff 00 	movl   $0x1000,-0x190(%ebp)
f011f974:	10 00 00 
f011f977:	a0 40 26 78 f0       	mov    0xf0782640,%al
f011f97c:	0f b6 d0             	movzbl %al,%edx
f011f97f:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f011f985:	01 d0                	add    %edx,%eax
f011f987:	48                   	dec    %eax
f011f988:	89 85 6c fe ff ff    	mov    %eax,-0x194(%ebp)
f011f98e:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f011f994:	ba 00 00 00 00       	mov    $0x0,%edx
f011f999:	f7 b5 70 fe ff ff    	divl   -0x190(%ebp)
f011f99f:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f011f9a5:	29 d0                	sub    %edx,%eax
f011f9a7:	01 c1                	add    %eax,%ecx
f011f9a9:	c7 85 68 fe ff ff 00 	movl   $0x1000,-0x198(%ebp)
f011f9b0:	10 00 00 
f011f9b3:	a0 40 26 78 f0       	mov    0xf0782640,%al
f011f9b8:	0f b6 c0             	movzbl %al,%eax
f011f9bb:	c1 e0 04             	shl    $0x4,%eax
f011f9be:	89 c2                	mov    %eax,%edx
f011f9c0:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f011f9c6:	01 d0                	add    %edx,%eax
f011f9c8:	48                   	dec    %eax
f011f9c9:	89 85 64 fe ff ff    	mov    %eax,-0x19c(%ebp)
f011f9cf:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f011f9d5:	ba 00 00 00 00       	mov    $0x0,%edx
f011f9da:	f7 b5 68 fe ff ff    	divl   -0x198(%ebp)
f011f9e0:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f011f9e6:	29 d0                	sub    %edx,%eax
f011f9e8:	01 c8                	add    %ecx,%eax
f011f9ea:	8d 90 00 40 60 f6    	lea    -0x99fc000(%eax),%edx
f011f9f0:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011f9f6:	39 c2                	cmp    %eax,%edx
f011f9f8:	74 17                	je     f011fa11 <test_kmalloc_worstfit+0x1270>
		panic("Worst Fit not working correctly");
f011f9fa:	83 ec 04             	sub    $0x4,%esp
f011f9fd:	68 94 ba 13 f0       	push   $0xf013ba94
f011fa02:	68 91 04 00 00       	push   $0x491
f011fa07:	68 7a b3 13 f0       	push   $0xf013b37a
f011fa0c:	e8 f4 07 fe ff       	call   f0100205 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011fa11:	e8 b2 43 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011fa16:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011fa19:	74 17                	je     f011fa32 <test_kmalloc_worstfit+0x1291>
f011fa1b:	83 ec 04             	sub    $0x4,%esp
f011fa1e:	68 94 b3 13 f0       	push   $0xf013b394
f011fa23:	68 92 04 00 00       	push   $0x492
f011fa28:	68 7a b3 13 f0       	push   $0xf013b37a
f011fa2d:	e8 d3 07 fe ff       	call   f0100205 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) !=  (512*kilo)/PAGE_SIZE) panic("Wrong allocation:");
f011fa32:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f011fa35:	e8 63 d1 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f011fa3a:	29 c3                	sub    %eax,%ebx
f011fa3c:	89 d8                	mov    %ebx,%eax
f011fa3e:	3d 80 00 00 00       	cmp    $0x80,%eax
f011fa43:	74 17                	je     f011fa5c <test_kmalloc_worstfit+0x12bb>
f011fa45:	83 ec 04             	sub    $0x4,%esp
f011fa48:	68 b2 b8 13 f0       	push   $0xf013b8b2
f011fa4d:	68 93 04 00 00       	push   $0x493
f011fa52:	68 7a b3 13 f0       	push   $0xf013b37a
f011fa57:	e8 a9 07 fe ff       	call   f0100205 <_panic>
	cprintf("Test %d Passed \n", ++count);
f011fa5c:	ff 45 e8             	incl   -0x18(%ebp)
f011fa5f:	83 ec 08             	sub    $0x8,%esp
f011fa62:	ff 75 e8             	pushl  -0x18(%ebp)
f011fa65:	68 b4 ba 13 f0       	push   $0xf013bab4
f011fa6a:	e8 9f 12 fe ff       	call   f0100d0e <cprintf>
f011fa6f:	83 c4 10             	add    $0x10,%esp

	freeFrames = sys_calculate_free_frames() ;
f011fa72:	e8 26 d1 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f011fa77:	89 45 f0             	mov    %eax,-0x10(%ebp)
	freeDiskFrames = pf_calculate_free_frames();
f011fa7a:	e8 49 43 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011fa7f:	89 45 ec             	mov    %eax,-0x14(%ebp)
	tempAddress = kmalloc(kilo); 			   // Use Hole 5 -> Hole 5 = 2 M - K
f011fa82:	83 ec 0c             	sub    $0xc,%esp
f011fa85:	68 00 04 00 00       	push   $0x400
f011fa8a:	e8 f6 7d fe ff       	call   f0107885 <kmalloc>
f011fa8f:	83 c4 10             	add    $0x10,%esp
f011fa92:	89 85 24 ff ff ff    	mov    %eax,-0xdc(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x09200000)
f011fa98:	c7 85 60 fe ff ff 00 	movl   $0x1000,-0x1a0(%ebp)
f011fa9f:	10 00 00 
f011faa2:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f011faa8:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011faad:	89 85 5c fe ff ff    	mov    %eax,-0x1a4(%ebp)
f011fab3:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f011fab9:	ba 00 00 00 00       	mov    $0x0,%edx
f011fabe:	f7 b5 60 fe ff ff    	divl   -0x1a0(%ebp)
f011fac4:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f011faca:	29 d0                	sub    %edx,%eax
f011facc:	89 c1                	mov    %eax,%ecx
f011face:	c7 85 58 fe ff ff 00 	movl   $0x1000,-0x1a8(%ebp)
f011fad5:	10 00 00 
f011fad8:	a0 40 26 78 f0       	mov    0xf0782640,%al
f011fadd:	0f b6 d0             	movzbl %al,%edx
f011fae0:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f011fae6:	01 d0                	add    %edx,%eax
f011fae8:	48                   	dec    %eax
f011fae9:	89 85 54 fe ff ff    	mov    %eax,-0x1ac(%ebp)
f011faef:	8b 85 54 fe ff ff    	mov    -0x1ac(%ebp),%eax
f011faf5:	ba 00 00 00 00       	mov    $0x0,%edx
f011fafa:	f7 b5 58 fe ff ff    	divl   -0x1a8(%ebp)
f011fb00:	8b 85 54 fe ff ff    	mov    -0x1ac(%ebp),%eax
f011fb06:	29 d0                	sub    %edx,%eax
f011fb08:	01 c1                	add    %eax,%ecx
f011fb0a:	c7 85 50 fe ff ff 00 	movl   $0x1000,-0x1b0(%ebp)
f011fb11:	10 00 00 
f011fb14:	a0 40 26 78 f0       	mov    0xf0782640,%al
f011fb19:	0f b6 c0             	movzbl %al,%eax
f011fb1c:	c1 e0 04             	shl    $0x4,%eax
f011fb1f:	89 c2                	mov    %eax,%edx
f011fb21:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f011fb27:	01 d0                	add    %edx,%eax
f011fb29:	48                   	dec    %eax
f011fb2a:	89 85 4c fe ff ff    	mov    %eax,-0x1b4(%ebp)
f011fb30:	8b 85 4c fe ff ff    	mov    -0x1b4(%ebp),%eax
f011fb36:	ba 00 00 00 00       	mov    $0x0,%edx
f011fb3b:	f7 b5 50 fe ff ff    	divl   -0x1b0(%ebp)
f011fb41:	8b 85 4c fe ff ff    	mov    -0x1b4(%ebp),%eax
f011fb47:	29 d0                	sub    %edx,%eax
f011fb49:	01 c8                	add    %ecx,%eax
f011fb4b:	8d 90 00 40 20 ff    	lea    -0xdfc000(%eax),%edx
f011fb51:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011fb57:	39 c2                	cmp    %eax,%edx
f011fb59:	74 17                	je     f011fb72 <test_kmalloc_worstfit+0x13d1>
		panic("Worst Fit not working correctly");
f011fb5b:	83 ec 04             	sub    $0x4,%esp
f011fb5e:	68 94 ba 13 f0       	push   $0xf013ba94
f011fb63:	68 9a 04 00 00       	push   $0x49a
f011fb68:	68 7a b3 13 f0       	push   $0xf013b37a
f011fb6d:	e8 93 06 fe ff       	call   f0100205 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011fb72:	e8 51 42 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011fb77:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011fb7a:	74 17                	je     f011fb93 <test_kmalloc_worstfit+0x13f2>
f011fb7c:	83 ec 04             	sub    $0x4,%esp
f011fb7f:	68 94 b3 13 f0       	push   $0xf013b394
f011fb84:	68 9b 04 00 00       	push   $0x49b
f011fb89:	68 7a b3 13 f0       	push   $0xf013b37a
f011fb8e:	e8 72 06 fe ff       	call   f0100205 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) !=  (4*kilo)/PAGE_SIZE) panic("Wrong allocation:");
f011fb93:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f011fb96:	e8 02 d0 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f011fb9b:	29 c3                	sub    %eax,%ebx
f011fb9d:	89 d8                	mov    %ebx,%eax
f011fb9f:	83 f8 01             	cmp    $0x1,%eax
f011fba2:	74 17                	je     f011fbbb <test_kmalloc_worstfit+0x141a>
f011fba4:	83 ec 04             	sub    $0x4,%esp
f011fba7:	68 b2 b8 13 f0       	push   $0xf013b8b2
f011fbac:	68 9c 04 00 00       	push   $0x49c
f011fbb1:	68 7a b3 13 f0       	push   $0xf013b37a
f011fbb6:	e8 4a 06 fe ff       	call   f0100205 <_panic>
	cprintf("Test %d Passed \n", ++count);
f011fbbb:	ff 45 e8             	incl   -0x18(%ebp)
f011fbbe:	83 ec 08             	sub    $0x8,%esp
f011fbc1:	ff 75 e8             	pushl  -0x18(%ebp)
f011fbc4:	68 b4 ba 13 f0       	push   $0xf013bab4
f011fbc9:	e8 40 11 fe ff       	call   f0100d0e <cprintf>
f011fbce:	83 c4 10             	add    $0x10,%esp

	freeFrames = sys_calculate_free_frames() ;
f011fbd1:	e8 c7 cf fe ff       	call   f010cb9d <sys_calculate_free_frames>
f011fbd6:	89 45 f0             	mov    %eax,-0x10(%ebp)
	freeDiskFrames = pf_calculate_free_frames();
f011fbd9:	e8 ea 41 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011fbde:	89 45 ec             	mov    %eax,-0x14(%ebp)
	tempAddress = kmalloc(2*Mega - 4*kilo); 		// Use Hole 5 -> Hole 5 = 0
f011fbe1:	83 ec 0c             	sub    $0xc,%esp
f011fbe4:	68 00 f0 1f 00       	push   $0x1ff000
f011fbe9:	e8 97 7c fe ff       	call   f0107885 <kmalloc>
f011fbee:	83 c4 10             	add    $0x10,%esp
f011fbf1:	89 85 24 ff ff ff    	mov    %eax,-0xdc(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x09201000)
f011fbf7:	c7 85 48 fe ff ff 00 	movl   $0x1000,-0x1b8(%ebp)
f011fbfe:	10 00 00 
f011fc01:	8b 85 48 fe ff ff    	mov    -0x1b8(%ebp),%eax
f011fc07:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011fc0c:	89 85 44 fe ff ff    	mov    %eax,-0x1bc(%ebp)
f011fc12:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f011fc18:	ba 00 00 00 00       	mov    $0x0,%edx
f011fc1d:	f7 b5 48 fe ff ff    	divl   -0x1b8(%ebp)
f011fc23:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f011fc29:	29 d0                	sub    %edx,%eax
f011fc2b:	89 c1                	mov    %eax,%ecx
f011fc2d:	c7 85 40 fe ff ff 00 	movl   $0x1000,-0x1c0(%ebp)
f011fc34:	10 00 00 
f011fc37:	a0 40 26 78 f0       	mov    0xf0782640,%al
f011fc3c:	0f b6 d0             	movzbl %al,%edx
f011fc3f:	8b 85 40 fe ff ff    	mov    -0x1c0(%ebp),%eax
f011fc45:	01 d0                	add    %edx,%eax
f011fc47:	48                   	dec    %eax
f011fc48:	89 85 3c fe ff ff    	mov    %eax,-0x1c4(%ebp)
f011fc4e:	8b 85 3c fe ff ff    	mov    -0x1c4(%ebp),%eax
f011fc54:	ba 00 00 00 00       	mov    $0x0,%edx
f011fc59:	f7 b5 40 fe ff ff    	divl   -0x1c0(%ebp)
f011fc5f:	8b 85 3c fe ff ff    	mov    -0x1c4(%ebp),%eax
f011fc65:	29 d0                	sub    %edx,%eax
f011fc67:	01 c1                	add    %eax,%ecx
f011fc69:	c7 85 38 fe ff ff 00 	movl   $0x1000,-0x1c8(%ebp)
f011fc70:	10 00 00 
f011fc73:	a0 40 26 78 f0       	mov    0xf0782640,%al
f011fc78:	0f b6 c0             	movzbl %al,%eax
f011fc7b:	c1 e0 04             	shl    $0x4,%eax
f011fc7e:	89 c2                	mov    %eax,%edx
f011fc80:	8b 85 38 fe ff ff    	mov    -0x1c8(%ebp),%eax
f011fc86:	01 d0                	add    %edx,%eax
f011fc88:	48                   	dec    %eax
f011fc89:	89 85 34 fe ff ff    	mov    %eax,-0x1cc(%ebp)
f011fc8f:	8b 85 34 fe ff ff    	mov    -0x1cc(%ebp),%eax
f011fc95:	ba 00 00 00 00       	mov    $0x0,%edx
f011fc9a:	f7 b5 38 fe ff ff    	divl   -0x1c8(%ebp)
f011fca0:	8b 85 34 fe ff ff    	mov    -0x1cc(%ebp),%eax
f011fca6:	29 d0                	sub    %edx,%eax
f011fca8:	01 c8                	add    %ecx,%eax
f011fcaa:	8d 90 00 50 20 ff    	lea    -0xdfb000(%eax),%edx
f011fcb0:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011fcb6:	39 c2                	cmp    %eax,%edx
f011fcb8:	74 17                	je     f011fcd1 <test_kmalloc_worstfit+0x1530>
		panic("Worst Fit not working correctly");
f011fcba:	83 ec 04             	sub    $0x4,%esp
f011fcbd:	68 94 ba 13 f0       	push   $0xf013ba94
f011fcc2:	68 a3 04 00 00       	push   $0x4a3
f011fcc7:	68 7a b3 13 f0       	push   $0xf013b37a
f011fccc:	e8 34 05 fe ff       	call   f0100205 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011fcd1:	e8 f2 40 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011fcd6:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011fcd9:	74 17                	je     f011fcf2 <test_kmalloc_worstfit+0x1551>
f011fcdb:	83 ec 04             	sub    $0x4,%esp
f011fcde:	68 94 b3 13 f0       	push   $0xf013b394
f011fce3:	68 a4 04 00 00       	push   $0x4a4
f011fce8:	68 7a b3 13 f0       	push   $0xf013b37a
f011fced:	e8 13 05 fe ff       	call   f0100205 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) !=  (2*Mega - 4*kilo)/PAGE_SIZE) panic("Wrong allocation:");
f011fcf2:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f011fcf5:	e8 a3 ce fe ff       	call   f010cb9d <sys_calculate_free_frames>
f011fcfa:	29 c3                	sub    %eax,%ebx
f011fcfc:	89 d8                	mov    %ebx,%eax
f011fcfe:	3d ff 01 00 00       	cmp    $0x1ff,%eax
f011fd03:	74 17                	je     f011fd1c <test_kmalloc_worstfit+0x157b>
f011fd05:	83 ec 04             	sub    $0x4,%esp
f011fd08:	68 b2 b8 13 f0       	push   $0xf013b8b2
f011fd0d:	68 a5 04 00 00       	push   $0x4a5
f011fd12:	68 7a b3 13 f0       	push   $0xf013b37a
f011fd17:	e8 e9 04 fe ff       	call   f0100205 <_panic>
	cprintf("Test %d Passed \n", ++count);
f011fd1c:	ff 45 e8             	incl   -0x18(%ebp)
f011fd1f:	83 ec 08             	sub    $0x8,%esp
f011fd22:	ff 75 e8             	pushl  -0x18(%ebp)
f011fd25:	68 b4 ba 13 f0       	push   $0xf013bab4
f011fd2a:	e8 df 0f fe ff       	call   f0100d0e <cprintf>
f011fd2f:	83 c4 10             	add    $0x10,%esp

	// Check that worst fit returns null in case all holes are not free
	freeFrames = sys_calculate_free_frames() ;
f011fd32:	e8 66 ce fe ff       	call   f010cb9d <sys_calculate_free_frames>
f011fd37:	89 45 f0             	mov    %eax,-0x10(%ebp)
	freeDiskFrames = pf_calculate_free_frames();
f011fd3a:	e8 89 40 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011fd3f:	89 45 ec             	mov    %eax,-0x14(%ebp)
	tempAddress = kmalloc(4*Mega); 		//No Suitable hole
f011fd42:	83 ec 0c             	sub    $0xc,%esp
f011fd45:	68 00 00 40 00       	push   $0x400000
f011fd4a:	e8 36 7b fe ff       	call   f0107885 <kmalloc>
f011fd4f:	83 c4 10             	add    $0x10,%esp
f011fd52:	89 85 24 ff ff ff    	mov    %eax,-0xdc(%ebp)
	if((uint32)tempAddress != 0x0)
f011fd58:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011fd5e:	85 c0                	test   %eax,%eax
f011fd60:	74 17                	je     f011fd79 <test_kmalloc_worstfit+0x15d8>
		panic("Worst Fit not working correctly");
f011fd62:	83 ec 04             	sub    $0x4,%esp
f011fd65:	68 94 ba 13 f0       	push   $0xf013ba94
f011fd6a:	68 ad 04 00 00       	push   $0x4ad
f011fd6f:	68 7a b3 13 f0       	push   $0xf013b37a
f011fd74:	e8 8c 04 fe ff       	call   f0100205 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011fd79:	e8 4a 40 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011fd7e:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011fd81:	74 17                	je     f011fd9a <test_kmalloc_worstfit+0x15f9>
f011fd83:	83 ec 04             	sub    $0x4,%esp
f011fd86:	68 94 b3 13 f0       	push   $0xf013b394
f011fd8b:	68 ae 04 00 00       	push   $0x4ae
f011fd90:	68 7a b3 13 f0       	push   $0xf013b37a
f011fd95:	e8 6b 04 fe ff       	call   f0100205 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) !=  0) panic("Wrong allocation:");
f011fd9a:	e8 fe cd fe ff       	call   f010cb9d <sys_calculate_free_frames>
f011fd9f:	89 c2                	mov    %eax,%edx
f011fda1:	8b 45 f0             	mov    -0x10(%ebp),%eax
f011fda4:	39 c2                	cmp    %eax,%edx
f011fda6:	74 17                	je     f011fdbf <test_kmalloc_worstfit+0x161e>
f011fda8:	83 ec 04             	sub    $0x4,%esp
f011fdab:	68 b2 b8 13 f0       	push   $0xf013b8b2
f011fdb0:	68 af 04 00 00       	push   $0x4af
f011fdb5:	68 7a b3 13 f0       	push   $0xf013b37a
f011fdba:	e8 46 04 fe ff       	call   f0100205 <_panic>
	cprintf("Test %d Passed \n", ++count);
f011fdbf:	ff 45 e8             	incl   -0x18(%ebp)
f011fdc2:	83 ec 08             	sub    $0x8,%esp
f011fdc5:	ff 75 e8             	pushl  -0x18(%ebp)
f011fdc8:	68 b4 ba 13 f0       	push   $0xf013bab4
f011fdcd:	e8 3c 0f fe ff       	call   f0100d0e <cprintf>
f011fdd2:	83 c4 10             	add    $0x10,%esp

	cprintf("Congratulations!! test Worst Fit completed successfully.\n");
f011fdd5:	83 ec 0c             	sub    $0xc,%esp
f011fdd8:	68 c8 ba 13 f0       	push   $0xf013bac8
f011fddd:	e8 2c 0f fe ff       	call   f0100d0e <cprintf>
f011fde2:	83 c4 10             	add    $0x10,%esp


	return 1;
f011fde5:	b8 01 00 00 00       	mov    $0x1,%eax
}
f011fdea:	8d 65 f8             	lea    -0x8(%ebp),%esp
f011fded:	5b                   	pop    %ebx
f011fdee:	5f                   	pop    %edi
f011fdef:	5d                   	pop    %ebp
f011fdf0:	c3                   	ret    

f011fdf1 <test_kfree>:

int test_kfree()
{
f011fdf1:	55                   	push   %ebp
f011fdf2:	89 e5                	mov    %esp,%ebp
f011fdf4:	57                   	push   %edi
f011fdf5:	53                   	push   %ebx
f011fdf6:	81 ec c0 02 00 00    	sub    $0x2c0,%esp
	cprintf("==============================================\n");
f011fdfc:	83 ec 0c             	sub    $0xc,%esp
f011fdff:	68 bc b2 13 f0       	push   $0xf013b2bc
f011fe04:	e8 05 0f fe ff       	call   f0100d0e <cprintf>
f011fe09:	83 c4 10             	add    $0x10,%esp
	cprintf("MAKE SURE to have a FRESH RUN for this test\n(i.e. don't run any program/test before it)\n");
f011fe0c:	83 ec 0c             	sub    $0xc,%esp
f011fe0f:	68 ec b2 13 f0       	push   $0xf013b2ec
f011fe14:	e8 f5 0e fe ff       	call   f0100d0e <cprintf>
f011fe19:	83 c4 10             	add    $0x10,%esp
	cprintf("==============================================\n");
f011fe1c:	83 ec 0c             	sub    $0xc,%esp
f011fe1f:	68 bc b2 13 f0       	push   $0xf013b2bc
f011fe24:	e8 e5 0e fe ff       	call   f0100d0e <cprintf>
f011fe29:	83 c4 10             	add    $0x10,%esp

	char minByte = 1<<7;
f011fe2c:	c6 45 e7 80          	movb   $0x80,-0x19(%ebp)
	char maxByte = 0x7F;
f011fe30:	c6 45 e6 7f          	movb   $0x7f,-0x1a(%ebp)
	short minShort = 1<<15 ;
f011fe34:	66 c7 45 e4 00 80    	movw   $0x8000,-0x1c(%ebp)
	short maxShort = 0x7FFF;
f011fe3a:	66 c7 45 e2 ff 7f    	movw   $0x7fff,-0x1e(%ebp)
	int minInt = 1<<31 ;
f011fe40:	c7 45 dc 00 00 00 80 	movl   $0x80000000,-0x24(%ebp)
	int maxInt = 0x7FFFFFFF;
f011fe47:	c7 45 d8 ff ff ff 7f 	movl   $0x7fffffff,-0x28(%ebp)
	char *byteArr, *byteArr2 ;
	short *shortArr, *shortArr2 ;
	int *intArr;
	struct MyStruct *structArr ;
	int lastIndexOfByte, lastIndexOfByte2, lastIndexOfShort, lastIndexOfShort2, lastIndexOfInt, lastIndexOfStruct;
	int start_freeFrames = sys_calculate_free_frames() ;
f011fe4e:	e8 4a cd fe ff       	call   f010cb9d <sys_calculate_free_frames>
f011fe53:	89 45 d4             	mov    %eax,-0x2c(%ebp)

	//malloc some spaces
	int i, freeFrames, freeDiskFrames ;
	char* ptr;
	int lastIndices[20] = {0};
f011fe56:	8d 95 e8 fd ff ff    	lea    -0x218(%ebp),%edx
f011fe5c:	b9 14 00 00 00       	mov    $0x14,%ecx
f011fe61:	b8 00 00 00 00       	mov    $0x0,%eax
f011fe66:	89 d7                	mov    %edx,%edi
f011fe68:	f3 ab                	rep stos %eax,%es:(%edi)
	int sums[20] = {0};
f011fe6a:	8d 95 98 fd ff ff    	lea    -0x268(%ebp),%edx
f011fe70:	b9 14 00 00 00       	mov    $0x14,%ecx
f011fe75:	b8 00 00 00 00       	mov    $0x0,%eax
f011fe7a:	89 d7                	mov    %edx,%edi
f011fe7c:	f3 ab                	rep stos %eax,%es:(%edi)
	void* ptr_allocations[20] = {0};
f011fe7e:	8d 95 48 fd ff ff    	lea    -0x2b8(%ebp),%edx
f011fe84:	b9 14 00 00 00       	mov    $0x14,%ecx
f011fe89:	b8 00 00 00 00       	mov    $0x0,%eax
f011fe8e:	89 d7                	mov    %edx,%edi
f011fe90:	f3 ab                	rep stos %eax,%es:(%edi)
	{
		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f011fe92:	e8 06 cd fe ff       	call   f010cb9d <sys_calculate_free_frames>
f011fe97:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011fe9a:	e8 29 3f fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011fe9f:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[0] = kmalloc(2*Mega-kilo);
f011fea2:	83 ec 0c             	sub    $0xc,%esp
f011fea5:	68 00 fc 1f 00       	push   $0x1ffc00
f011feaa:	e8 d6 79 fe ff       	call   f0107885 <kmalloc>
f011feaf:	83 c4 10             	add    $0x10,%esp
f011feb2:	89 85 48 fd ff ff    	mov    %eax,-0x2b8(%ebp)
		if ((uint32) ptr_allocations[0] !=  (ACTUAL_START)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f011feb8:	8b 85 48 fd ff ff    	mov    -0x2b8(%ebp),%eax
f011febe:	89 c1                	mov    %eax,%ecx
f011fec0:	c7 45 c8 00 10 00 00 	movl   $0x1000,-0x38(%ebp)
f011fec7:	8b 45 c8             	mov    -0x38(%ebp),%eax
f011feca:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011fecf:	89 45 c4             	mov    %eax,-0x3c(%ebp)
f011fed2:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f011fed5:	ba 00 00 00 00       	mov    $0x0,%edx
f011feda:	f7 75 c8             	divl   -0x38(%ebp)
f011fedd:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f011fee0:	29 d0                	sub    %edx,%eax
f011fee2:	89 c3                	mov    %eax,%ebx
f011fee4:	c7 45 c0 00 10 00 00 	movl   $0x1000,-0x40(%ebp)
f011feeb:	a0 40 26 78 f0       	mov    0xf0782640,%al
f011fef0:	0f b6 d0             	movzbl %al,%edx
f011fef3:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011fef6:	01 d0                	add    %edx,%eax
f011fef8:	48                   	dec    %eax
f011fef9:	89 45 bc             	mov    %eax,-0x44(%ebp)
f011fefc:	8b 45 bc             	mov    -0x44(%ebp),%eax
f011feff:	ba 00 00 00 00       	mov    $0x0,%edx
f011ff04:	f7 75 c0             	divl   -0x40(%ebp)
f011ff07:	8b 45 bc             	mov    -0x44(%ebp),%eax
f011ff0a:	29 d0                	sub    %edx,%eax
f011ff0c:	01 c3                	add    %eax,%ebx
f011ff0e:	c7 45 b8 00 10 00 00 	movl   $0x1000,-0x48(%ebp)
f011ff15:	a0 40 26 78 f0       	mov    0xf0782640,%al
f011ff1a:	0f b6 c0             	movzbl %al,%eax
f011ff1d:	c1 e0 04             	shl    $0x4,%eax
f011ff20:	89 c2                	mov    %eax,%edx
f011ff22:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011ff25:	01 d0                	add    %edx,%eax
f011ff27:	48                   	dec    %eax
f011ff28:	89 45 b4             	mov    %eax,-0x4c(%ebp)
f011ff2b:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f011ff2e:	ba 00 00 00 00       	mov    $0x0,%edx
f011ff33:	f7 75 b8             	divl   -0x48(%ebp)
f011ff36:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f011ff39:	29 d0                	sub    %edx,%eax
f011ff3b:	01 d8                	add    %ebx,%eax
f011ff3d:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f011ff42:	39 c1                	cmp    %eax,%ecx
f011ff44:	74 17                	je     f011ff5d <test_kfree+0x16c>
f011ff46:	83 ec 04             	sub    $0x4,%esp
f011ff49:	68 60 b4 13 f0       	push   $0xf013b460
f011ff4e:	68 d7 04 00 00       	push   $0x4d7
f011ff53:	68 7a b3 13 f0       	push   $0xf013b37a
f011ff58:	e8 a8 02 fe ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011ff5d:	e8 66 3e fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011ff62:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f011ff65:	74 17                	je     f011ff7e <test_kfree+0x18d>
f011ff67:	83 ec 04             	sub    $0x4,%esp
f011ff6a:	68 94 b3 13 f0       	push   $0xf013b394
f011ff6f:	68 d8 04 00 00       	push   $0x4d8
f011ff74:	68 7a b3 13 f0       	push   $0xf013b37a
f011ff79:	e8 87 02 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f011ff7e:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f011ff81:	e8 17 cc fe ff       	call   f010cb9d <sys_calculate_free_frames>
f011ff86:	29 c3                	sub    %eax,%ebx
f011ff88:	89 d8                	mov    %ebx,%eax
f011ff8a:	3d 00 02 00 00       	cmp    $0x200,%eax
f011ff8f:	74 17                	je     f011ffa8 <test_kfree+0x1b7>
f011ff91:	83 ec 04             	sub    $0x4,%esp
f011ff94:	68 fc b3 13 f0       	push   $0xf013b3fc
f011ff99:	68 d9 04 00 00       	push   $0x4d9
f011ff9e:	68 7a b3 13 f0       	push   $0xf013b37a
f011ffa3:	e8 5d 02 fe ff       	call   f0100205 <_panic>
		lastIndices[0] = (2*Mega-kilo)/sizeof(char) - 1;
f011ffa8:	c7 85 e8 fd ff ff ff 	movl   $0x1ffbff,-0x218(%ebp)
f011ffaf:	fb 1f 00 

		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f011ffb2:	e8 e6 cb fe ff       	call   f010cb9d <sys_calculate_free_frames>
f011ffb7:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011ffba:	e8 09 3e fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011ffbf:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[1] = kmalloc(2*Mega-kilo);
f011ffc2:	83 ec 0c             	sub    $0xc,%esp
f011ffc5:	68 00 fc 1f 00       	push   $0x1ffc00
f011ffca:	e8 b6 78 fe ff       	call   f0107885 <kmalloc>
f011ffcf:	83 c4 10             	add    $0x10,%esp
f011ffd2:	89 85 4c fd ff ff    	mov    %eax,-0x2b4(%ebp)
		if ((uint32) ptr_allocations[1] != (ACTUAL_START + 2*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f011ffd8:	8b 85 4c fd ff ff    	mov    -0x2b4(%ebp),%eax
f011ffde:	89 c1                	mov    %eax,%ecx
f011ffe0:	c7 45 b0 00 10 00 00 	movl   $0x1000,-0x50(%ebp)
f011ffe7:	8b 45 b0             	mov    -0x50(%ebp),%eax
f011ffea:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011ffef:	89 45 ac             	mov    %eax,-0x54(%ebp)
f011fff2:	8b 45 ac             	mov    -0x54(%ebp),%eax
f011fff5:	ba 00 00 00 00       	mov    $0x0,%edx
f011fffa:	f7 75 b0             	divl   -0x50(%ebp)
f011fffd:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0120000:	29 d0                	sub    %edx,%eax
f0120002:	89 c3                	mov    %eax,%ebx
f0120004:	c7 45 a8 00 10 00 00 	movl   $0x1000,-0x58(%ebp)
f012000b:	a0 40 26 78 f0       	mov    0xf0782640,%al
f0120010:	0f b6 d0             	movzbl %al,%edx
f0120013:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0120016:	01 d0                	add    %edx,%eax
f0120018:	48                   	dec    %eax
f0120019:	89 45 a4             	mov    %eax,-0x5c(%ebp)
f012001c:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f012001f:	ba 00 00 00 00       	mov    $0x0,%edx
f0120024:	f7 75 a8             	divl   -0x58(%ebp)
f0120027:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f012002a:	29 d0                	sub    %edx,%eax
f012002c:	01 c3                	add    %eax,%ebx
f012002e:	c7 45 a0 00 10 00 00 	movl   $0x1000,-0x60(%ebp)
f0120035:	a0 40 26 78 f0       	mov    0xf0782640,%al
f012003a:	0f b6 c0             	movzbl %al,%eax
f012003d:	c1 e0 04             	shl    $0x4,%eax
f0120040:	89 c2                	mov    %eax,%edx
f0120042:	8b 45 a0             	mov    -0x60(%ebp),%eax
f0120045:	01 d0                	add    %edx,%eax
f0120047:	48                   	dec    %eax
f0120048:	89 45 9c             	mov    %eax,-0x64(%ebp)
f012004b:	8b 45 9c             	mov    -0x64(%ebp),%eax
f012004e:	ba 00 00 00 00       	mov    $0x0,%edx
f0120053:	f7 75 a0             	divl   -0x60(%ebp)
f0120056:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0120059:	29 d0                	sub    %edx,%eax
f012005b:	01 d8                	add    %ebx,%eax
f012005d:	2d 00 c0 df 09       	sub    $0x9dfc000,%eax
f0120062:	39 c1                	cmp    %eax,%ecx
f0120064:	74 17                	je     f012007d <test_kfree+0x28c>
f0120066:	83 ec 04             	sub    $0x4,%esp
f0120069:	68 60 b4 13 f0       	push   $0xf013b460
f012006e:	68 e0 04 00 00       	push   $0x4e0
f0120073:	68 7a b3 13 f0       	push   $0xf013b37a
f0120078:	e8 88 01 fe ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012007d:	e8 46 3d fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0120082:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0120085:	74 17                	je     f012009e <test_kfree+0x2ad>
f0120087:	83 ec 04             	sub    $0x4,%esp
f012008a:	68 94 b3 13 f0       	push   $0xf013b394
f012008f:	68 e1 04 00 00       	push   $0x4e1
f0120094:	68 7a b3 13 f0       	push   $0xf013b37a
f0120099:	e8 67 01 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f012009e:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f01200a1:	e8 f7 ca fe ff       	call   f010cb9d <sys_calculate_free_frames>
f01200a6:	29 c3                	sub    %eax,%ebx
f01200a8:	89 d8                	mov    %ebx,%eax
f01200aa:	3d 00 02 00 00       	cmp    $0x200,%eax
f01200af:	74 17                	je     f01200c8 <test_kfree+0x2d7>
f01200b1:	83 ec 04             	sub    $0x4,%esp
f01200b4:	68 fc b3 13 f0       	push   $0xf013b3fc
f01200b9:	68 e2 04 00 00       	push   $0x4e2
f01200be:	68 7a b3 13 f0       	push   $0xf013b37a
f01200c3:	e8 3d 01 fe ff       	call   f0100205 <_panic>
		lastIndices[1] = (2*Mega-kilo)/sizeof(char) - 1;
f01200c8:	c7 85 ec fd ff ff ff 	movl   $0x1ffbff,-0x214(%ebp)
f01200cf:	fb 1f 00 

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f01200d2:	e8 c6 ca fe ff       	call   f010cb9d <sys_calculate_free_frames>
f01200d7:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01200da:	e8 e9 3c fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f01200df:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[2] = kmalloc(2*kilo);
f01200e2:	83 ec 0c             	sub    $0xc,%esp
f01200e5:	68 00 08 00 00       	push   $0x800
f01200ea:	e8 96 77 fe ff       	call   f0107885 <kmalloc>
f01200ef:	83 c4 10             	add    $0x10,%esp
f01200f2:	89 85 50 fd ff ff    	mov    %eax,-0x2b0(%ebp)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01200f8:	8b 85 50 fd ff ff    	mov    -0x2b0(%ebp),%eax
f01200fe:	89 c1                	mov    %eax,%ecx
f0120100:	c7 45 98 00 10 00 00 	movl   $0x1000,-0x68(%ebp)
f0120107:	8b 45 98             	mov    -0x68(%ebp),%eax
f012010a:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012010f:	89 45 94             	mov    %eax,-0x6c(%ebp)
f0120112:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0120115:	ba 00 00 00 00       	mov    $0x0,%edx
f012011a:	f7 75 98             	divl   -0x68(%ebp)
f012011d:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0120120:	29 d0                	sub    %edx,%eax
f0120122:	89 c3                	mov    %eax,%ebx
f0120124:	c7 45 90 00 10 00 00 	movl   $0x1000,-0x70(%ebp)
f012012b:	a0 40 26 78 f0       	mov    0xf0782640,%al
f0120130:	0f b6 d0             	movzbl %al,%edx
f0120133:	8b 45 90             	mov    -0x70(%ebp),%eax
f0120136:	01 d0                	add    %edx,%eax
f0120138:	48                   	dec    %eax
f0120139:	89 45 8c             	mov    %eax,-0x74(%ebp)
f012013c:	8b 45 8c             	mov    -0x74(%ebp),%eax
f012013f:	ba 00 00 00 00       	mov    $0x0,%edx
f0120144:	f7 75 90             	divl   -0x70(%ebp)
f0120147:	8b 45 8c             	mov    -0x74(%ebp),%eax
f012014a:	29 d0                	sub    %edx,%eax
f012014c:	01 c3                	add    %eax,%ebx
f012014e:	c7 45 88 00 10 00 00 	movl   $0x1000,-0x78(%ebp)
f0120155:	a0 40 26 78 f0       	mov    0xf0782640,%al
f012015a:	0f b6 c0             	movzbl %al,%eax
f012015d:	c1 e0 04             	shl    $0x4,%eax
f0120160:	89 c2                	mov    %eax,%edx
f0120162:	8b 45 88             	mov    -0x78(%ebp),%eax
f0120165:	01 d0                	add    %edx,%eax
f0120167:	48                   	dec    %eax
f0120168:	89 45 84             	mov    %eax,-0x7c(%ebp)
f012016b:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012016e:	ba 00 00 00 00       	mov    $0x0,%edx
f0120173:	f7 75 88             	divl   -0x78(%ebp)
f0120176:	8b 45 84             	mov    -0x7c(%ebp),%eax
f0120179:	29 d0                	sub    %edx,%eax
f012017b:	01 d8                	add    %ebx,%eax
f012017d:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
f0120182:	39 c1                	cmp    %eax,%ecx
f0120184:	74 17                	je     f012019d <test_kfree+0x3ac>
f0120186:	83 ec 04             	sub    $0x4,%esp
f0120189:	68 60 b4 13 f0       	push   $0xf013b460
f012018e:	68 e9 04 00 00       	push   $0x4e9
f0120193:	68 7a b3 13 f0       	push   $0xf013b37a
f0120198:	e8 68 00 fe ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012019d:	e8 26 3c fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f01201a2:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f01201a5:	74 17                	je     f01201be <test_kfree+0x3cd>
f01201a7:	83 ec 04             	sub    $0x4,%esp
f01201aa:	68 94 b3 13 f0       	push   $0xf013b394
f01201af:	68 ea 04 00 00       	push   $0x4ea
f01201b4:	68 7a b3 13 f0       	push   $0xf013b37a
f01201b9:	e8 47 00 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f01201be:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f01201c1:	e8 d7 c9 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f01201c6:	29 c3                	sub    %eax,%ebx
f01201c8:	89 d8                	mov    %ebx,%eax
f01201ca:	83 f8 01             	cmp    $0x1,%eax
f01201cd:	74 17                	je     f01201e6 <test_kfree+0x3f5>
f01201cf:	83 ec 04             	sub    $0x4,%esp
f01201d2:	68 fc b3 13 f0       	push   $0xf013b3fc
f01201d7:	68 eb 04 00 00       	push   $0x4eb
f01201dc:	68 7a b3 13 f0       	push   $0xf013b37a
f01201e1:	e8 1f 00 fe ff       	call   f0100205 <_panic>
		lastIndices[2] = (2*kilo)/sizeof(char) - 1;
f01201e6:	c7 85 f0 fd ff ff ff 	movl   $0x7ff,-0x210(%ebp)
f01201ed:	07 00 00 
		ptr = (char*)ptr_allocations[2];
f01201f0:	8b 85 50 fd ff ff    	mov    -0x2b0(%ebp),%eax
f01201f6:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[2]; ++i)
f01201f9:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0120200:	eb 0e                	jmp    f0120210 <test_kfree+0x41f>
		{
			ptr[i] = 2 ;
f0120202:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0120205:	8b 45 80             	mov    -0x80(%ebp),%eax
f0120208:	01 d0                	add    %edx,%eax
f012020a:	c6 00 02             	movb   $0x2,(%eax)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[2] = (2*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[2];
		for (i = 0; i < lastIndices[2]; ++i)
f012020d:	ff 45 f4             	incl   -0xc(%ebp)
f0120210:	8b 85 f0 fd ff ff    	mov    -0x210(%ebp),%eax
f0120216:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0120219:	7f e7                	jg     f0120202 <test_kfree+0x411>
		{
			ptr[i] = 2 ;
		}

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f012021b:	e8 7d c9 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0120220:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0120223:	e8 a0 3b fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0120228:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[3] = kmalloc(2*kilo);
f012022b:	83 ec 0c             	sub    $0xc,%esp
f012022e:	68 00 08 00 00       	push   $0x800
f0120233:	e8 4d 76 fe ff       	call   f0107885 <kmalloc>
f0120238:	83 c4 10             	add    $0x10,%esp
f012023b:	89 85 54 fd ff ff    	mov    %eax,-0x2ac(%ebp)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0120241:	8b 85 54 fd ff ff    	mov    -0x2ac(%ebp),%eax
f0120247:	89 c1                	mov    %eax,%ecx
f0120249:	c7 85 7c ff ff ff 00 	movl   $0x1000,-0x84(%ebp)
f0120250:	10 00 00 
f0120253:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f0120259:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012025e:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)
f0120264:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f012026a:	ba 00 00 00 00       	mov    $0x0,%edx
f012026f:	f7 b5 7c ff ff ff    	divl   -0x84(%ebp)
f0120275:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f012027b:	29 d0                	sub    %edx,%eax
f012027d:	89 c3                	mov    %eax,%ebx
f012027f:	c7 85 74 ff ff ff 00 	movl   $0x1000,-0x8c(%ebp)
f0120286:	10 00 00 
f0120289:	a0 40 26 78 f0       	mov    0xf0782640,%al
f012028e:	0f b6 d0             	movzbl %al,%edx
f0120291:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f0120297:	01 d0                	add    %edx,%eax
f0120299:	48                   	dec    %eax
f012029a:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
f01202a0:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f01202a6:	ba 00 00 00 00       	mov    $0x0,%edx
f01202ab:	f7 b5 74 ff ff ff    	divl   -0x8c(%ebp)
f01202b1:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f01202b7:	29 d0                	sub    %edx,%eax
f01202b9:	01 c3                	add    %eax,%ebx
f01202bb:	c7 85 6c ff ff ff 00 	movl   $0x1000,-0x94(%ebp)
f01202c2:	10 00 00 
f01202c5:	a0 40 26 78 f0       	mov    0xf0782640,%al
f01202ca:	0f b6 c0             	movzbl %al,%eax
f01202cd:	c1 e0 04             	shl    $0x4,%eax
f01202d0:	89 c2                	mov    %eax,%edx
f01202d2:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f01202d8:	01 d0                	add    %edx,%eax
f01202da:	48                   	dec    %eax
f01202db:	89 85 68 ff ff ff    	mov    %eax,-0x98(%ebp)
f01202e1:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f01202e7:	ba 00 00 00 00       	mov    $0x0,%edx
f01202ec:	f7 b5 6c ff ff ff    	divl   -0x94(%ebp)
f01202f2:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f01202f8:	29 d0                	sub    %edx,%eax
f01202fa:	01 d8                	add    %ebx,%eax
f01202fc:	2d 00 b0 bf 09       	sub    $0x9bfb000,%eax
f0120301:	39 c1                	cmp    %eax,%ecx
f0120303:	74 17                	je     f012031c <test_kfree+0x52b>
f0120305:	83 ec 04             	sub    $0x4,%esp
f0120308:	68 60 b4 13 f0       	push   $0xf013b460
f012030d:	68 f7 04 00 00       	push   $0x4f7
f0120312:	68 7a b3 13 f0       	push   $0xf013b37a
f0120317:	e8 e9 fe fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012031c:	e8 a7 3a fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0120321:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0120324:	74 17                	je     f012033d <test_kfree+0x54c>
f0120326:	83 ec 04             	sub    $0x4,%esp
f0120329:	68 94 b3 13 f0       	push   $0xf013b394
f012032e:	68 f8 04 00 00       	push   $0x4f8
f0120333:	68 7a b3 13 f0       	push   $0xf013b37a
f0120338:	e8 c8 fe fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f012033d:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0120340:	e8 58 c8 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0120345:	29 c3                	sub    %eax,%ebx
f0120347:	89 d8                	mov    %ebx,%eax
f0120349:	83 f8 01             	cmp    $0x1,%eax
f012034c:	74 17                	je     f0120365 <test_kfree+0x574>
f012034e:	83 ec 04             	sub    $0x4,%esp
f0120351:	68 fc b3 13 f0       	push   $0xf013b3fc
f0120356:	68 f9 04 00 00       	push   $0x4f9
f012035b:	68 7a b3 13 f0       	push   $0xf013b37a
f0120360:	e8 a0 fe fd ff       	call   f0100205 <_panic>
		lastIndices[3] = (2*kilo)/sizeof(char) - 1;
f0120365:	c7 85 f4 fd ff ff ff 	movl   $0x7ff,-0x20c(%ebp)
f012036c:	07 00 00 
		ptr = (char*)ptr_allocations[3];
f012036f:	8b 85 54 fd ff ff    	mov    -0x2ac(%ebp),%eax
f0120375:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[3]; ++i)
f0120378:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012037f:	eb 0e                	jmp    f012038f <test_kfree+0x59e>
		{
			ptr[i] = 3 ;
f0120381:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0120384:	8b 45 80             	mov    -0x80(%ebp),%eax
f0120387:	01 d0                	add    %edx,%eax
f0120389:	c6 00 03             	movb   $0x3,(%eax)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[3] = (2*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[3];
		for (i = 0; i < lastIndices[3]; ++i)
f012038c:	ff 45 f4             	incl   -0xc(%ebp)
f012038f:	8b 85 f4 fd ff ff    	mov    -0x20c(%ebp),%eax
f0120395:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0120398:	7f e7                	jg     f0120381 <test_kfree+0x590>
		{
			ptr[i] = 3 ;
		}

		//7 KB
		freeFrames = sys_calculate_free_frames() ;
f012039a:	e8 fe c7 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f012039f:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01203a2:	e8 21 3a fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f01203a7:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[4] = kmalloc(7*kilo);
f01203aa:	83 ec 0c             	sub    $0xc,%esp
f01203ad:	68 00 1c 00 00       	push   $0x1c00
f01203b2:	e8 ce 74 fe ff       	call   f0107885 <kmalloc>
f01203b7:	83 c4 10             	add    $0x10,%esp
f01203ba:	89 85 58 fd ff ff    	mov    %eax,-0x2a8(%ebp)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01203c0:	8b 85 58 fd ff ff    	mov    -0x2a8(%ebp),%eax
f01203c6:	89 c1                	mov    %eax,%ecx
f01203c8:	c7 85 64 ff ff ff 00 	movl   $0x1000,-0x9c(%ebp)
f01203cf:	10 00 00 
f01203d2:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f01203d8:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01203dd:	89 85 60 ff ff ff    	mov    %eax,-0xa0(%ebp)
f01203e3:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f01203e9:	ba 00 00 00 00       	mov    $0x0,%edx
f01203ee:	f7 b5 64 ff ff ff    	divl   -0x9c(%ebp)
f01203f4:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f01203fa:	29 d0                	sub    %edx,%eax
f01203fc:	89 c3                	mov    %eax,%ebx
f01203fe:	c7 85 5c ff ff ff 00 	movl   $0x1000,-0xa4(%ebp)
f0120405:	10 00 00 
f0120408:	a0 40 26 78 f0       	mov    0xf0782640,%al
f012040d:	0f b6 d0             	movzbl %al,%edx
f0120410:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f0120416:	01 d0                	add    %edx,%eax
f0120418:	48                   	dec    %eax
f0120419:	89 85 58 ff ff ff    	mov    %eax,-0xa8(%ebp)
f012041f:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f0120425:	ba 00 00 00 00       	mov    $0x0,%edx
f012042a:	f7 b5 5c ff ff ff    	divl   -0xa4(%ebp)
f0120430:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f0120436:	29 d0                	sub    %edx,%eax
f0120438:	01 c3                	add    %eax,%ebx
f012043a:	c7 85 54 ff ff ff 00 	movl   $0x1000,-0xac(%ebp)
f0120441:	10 00 00 
f0120444:	a0 40 26 78 f0       	mov    0xf0782640,%al
f0120449:	0f b6 c0             	movzbl %al,%eax
f012044c:	c1 e0 04             	shl    $0x4,%eax
f012044f:	89 c2                	mov    %eax,%edx
f0120451:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f0120457:	01 d0                	add    %edx,%eax
f0120459:	48                   	dec    %eax
f012045a:	89 85 50 ff ff ff    	mov    %eax,-0xb0(%ebp)
f0120460:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f0120466:	ba 00 00 00 00       	mov    $0x0,%edx
f012046b:	f7 b5 54 ff ff ff    	divl   -0xac(%ebp)
f0120471:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f0120477:	29 d0                	sub    %edx,%eax
f0120479:	01 d8                	add    %ebx,%eax
f012047b:	2d 00 a0 bf 09       	sub    $0x9bfa000,%eax
f0120480:	39 c1                	cmp    %eax,%ecx
f0120482:	74 17                	je     f012049b <test_kfree+0x6aa>
f0120484:	83 ec 04             	sub    $0x4,%esp
f0120487:	68 60 b4 13 f0       	push   $0xf013b460
f012048c:	68 05 05 00 00       	push   $0x505
f0120491:	68 7a b3 13 f0       	push   $0xf013b37a
f0120496:	e8 6a fd fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012049b:	e8 28 39 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f01204a0:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f01204a3:	74 17                	je     f01204bc <test_kfree+0x6cb>
f01204a5:	83 ec 04             	sub    $0x4,%esp
f01204a8:	68 94 b3 13 f0       	push   $0xf013b394
f01204ad:	68 06 05 00 00       	push   $0x506
f01204b2:	68 7a b3 13 f0       	push   $0xf013b37a
f01204b7:	e8 49 fd fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: pages are not loaded successfully into memory");
f01204bc:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f01204bf:	e8 d9 c6 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f01204c4:	29 c3                	sub    %eax,%ebx
f01204c6:	89 d8                	mov    %ebx,%eax
f01204c8:	83 f8 02             	cmp    $0x2,%eax
f01204cb:	74 17                	je     f01204e4 <test_kfree+0x6f3>
f01204cd:	83 ec 04             	sub    $0x4,%esp
f01204d0:	68 fc b3 13 f0       	push   $0xf013b3fc
f01204d5:	68 07 05 00 00       	push   $0x507
f01204da:	68 7a b3 13 f0       	push   $0xf013b37a
f01204df:	e8 21 fd fd ff       	call   f0100205 <_panic>
		lastIndices[4] = (7*kilo)/sizeof(char) - 1;
f01204e4:	c7 85 f8 fd ff ff ff 	movl   $0x1bff,-0x208(%ebp)
f01204eb:	1b 00 00 
		ptr = (char*)ptr_allocations[4];
f01204ee:	8b 85 58 fd ff ff    	mov    -0x2a8(%ebp),%eax
f01204f4:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[4]; ++i)
f01204f7:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01204fe:	eb 0e                	jmp    f012050e <test_kfree+0x71d>
		{
			ptr[i] = 4 ;
f0120500:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0120503:	8b 45 80             	mov    -0x80(%ebp),%eax
f0120506:	01 d0                	add    %edx,%eax
f0120508:	c6 00 04             	movb   $0x4,(%eax)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[4] = (7*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[4];
		for (i = 0; i < lastIndices[4]; ++i)
f012050b:	ff 45 f4             	incl   -0xc(%ebp)
f012050e:	8b 85 f8 fd ff ff    	mov    -0x208(%ebp),%eax
f0120514:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0120517:	7f e7                	jg     f0120500 <test_kfree+0x70f>
		{
			ptr[i] = 4 ;
		}

		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f0120519:	e8 7f c6 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f012051e:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0120521:	e8 a2 38 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0120526:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[5] = kmalloc(3*Mega-kilo);
f0120529:	83 ec 0c             	sub    $0xc,%esp
f012052c:	68 00 fc 2f 00       	push   $0x2ffc00
f0120531:	e8 4f 73 fe ff       	call   f0107885 <kmalloc>
f0120536:	83 c4 10             	add    $0x10,%esp
f0120539:	89 85 5c fd ff ff    	mov    %eax,-0x2a4(%ebp)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo) ) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f012053f:	8b 85 5c fd ff ff    	mov    -0x2a4(%ebp),%eax
f0120545:	89 c1                	mov    %eax,%ecx
f0120547:	c7 85 4c ff ff ff 00 	movl   $0x1000,-0xb4(%ebp)
f012054e:	10 00 00 
f0120551:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0120557:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012055c:	89 85 48 ff ff ff    	mov    %eax,-0xb8(%ebp)
f0120562:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f0120568:	ba 00 00 00 00       	mov    $0x0,%edx
f012056d:	f7 b5 4c ff ff ff    	divl   -0xb4(%ebp)
f0120573:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f0120579:	29 d0                	sub    %edx,%eax
f012057b:	89 c3                	mov    %eax,%ebx
f012057d:	c7 85 44 ff ff ff 00 	movl   $0x1000,-0xbc(%ebp)
f0120584:	10 00 00 
f0120587:	a0 40 26 78 f0       	mov    0xf0782640,%al
f012058c:	0f b6 d0             	movzbl %al,%edx
f012058f:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0120595:	01 d0                	add    %edx,%eax
f0120597:	48                   	dec    %eax
f0120598:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%ebp)
f012059e:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f01205a4:	ba 00 00 00 00       	mov    $0x0,%edx
f01205a9:	f7 b5 44 ff ff ff    	divl   -0xbc(%ebp)
f01205af:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f01205b5:	29 d0                	sub    %edx,%eax
f01205b7:	01 c3                	add    %eax,%ebx
f01205b9:	c7 85 3c ff ff ff 00 	movl   $0x1000,-0xc4(%ebp)
f01205c0:	10 00 00 
f01205c3:	a0 40 26 78 f0       	mov    0xf0782640,%al
f01205c8:	0f b6 c0             	movzbl %al,%eax
f01205cb:	c1 e0 04             	shl    $0x4,%eax
f01205ce:	89 c2                	mov    %eax,%edx
f01205d0:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f01205d6:	01 d0                	add    %edx,%eax
f01205d8:	48                   	dec    %eax
f01205d9:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
f01205df:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f01205e5:	ba 00 00 00 00       	mov    $0x0,%edx
f01205ea:	f7 b5 3c ff ff ff    	divl   -0xc4(%ebp)
f01205f0:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f01205f6:	29 d0                	sub    %edx,%eax
f01205f8:	01 d8                	add    %ebx,%eax
f01205fa:	2d 00 80 bf 09       	sub    $0x9bf8000,%eax
f01205ff:	39 c1                	cmp    %eax,%ecx
f0120601:	74 17                	je     f012061a <test_kfree+0x829>
f0120603:	83 ec 04             	sub    $0x4,%esp
f0120606:	68 60 b4 13 f0       	push   $0xf013b460
f012060b:	68 13 05 00 00       	push   $0x513
f0120610:	68 7a b3 13 f0       	push   $0xf013b37a
f0120615:	e8 eb fb fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012061a:	e8 a9 37 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f012061f:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0120622:	74 17                	je     f012063b <test_kfree+0x84a>
f0120624:	83 ec 04             	sub    $0x4,%esp
f0120627:	68 94 b3 13 f0       	push   $0xf013b394
f012062c:	68 14 05 00 00       	push   $0x514
f0120631:	68 7a b3 13 f0       	push   $0xf013b37a
f0120636:	e8 ca fb fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
f012063b:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f012063e:	e8 5a c5 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0120643:	29 c3                	sub    %eax,%ebx
f0120645:	89 d8                	mov    %ebx,%eax
f0120647:	3d 00 03 00 00       	cmp    $0x300,%eax
f012064c:	74 17                	je     f0120665 <test_kfree+0x874>
f012064e:	83 ec 04             	sub    $0x4,%esp
f0120651:	68 fc b3 13 f0       	push   $0xf013b3fc
f0120656:	68 15 05 00 00       	push   $0x515
f012065b:	68 7a b3 13 f0       	push   $0xf013b37a
f0120660:	e8 a0 fb fd ff       	call   f0100205 <_panic>
		lastIndices[5] = (3*Mega-kilo)/sizeof(char) - 1;
f0120665:	c7 85 fc fd ff ff ff 	movl   $0x2ffbff,-0x204(%ebp)
f012066c:	fb 2f 00 
		ptr = (char*)ptr_allocations[5];
f012066f:	8b 85 5c fd ff ff    	mov    -0x2a4(%ebp),%eax
f0120675:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[5]; ++i)
f0120678:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012067f:	eb 0e                	jmp    f012068f <test_kfree+0x89e>
		{
			ptr[i] = 5 ;
f0120681:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0120684:	8b 45 80             	mov    -0x80(%ebp),%eax
f0120687:	01 d0                	add    %edx,%eax
f0120689:	c6 00 05             	movb   $0x5,(%eax)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo) ) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[5] = (3*Mega-kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[5];
		for (i = 0; i < lastIndices[5]; ++i)
f012068c:	ff 45 f4             	incl   -0xc(%ebp)
f012068f:	8b 85 fc fd ff ff    	mov    -0x204(%ebp),%eax
f0120695:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0120698:	7f e7                	jg     f0120681 <test_kfree+0x890>
		{
			ptr[i] = 5 ;
		}

		//6 MB
		freeFrames = sys_calculate_free_frames() ;
f012069a:	e8 fe c4 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f012069f:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01206a2:	e8 21 37 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f01206a7:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[6] = kmalloc(6*Mega-kilo);
f01206aa:	83 ec 0c             	sub    $0xc,%esp
f01206ad:	68 00 fc 5f 00       	push   $0x5ffc00
f01206b2:	e8 ce 71 fe ff       	call   f0107885 <kmalloc>
f01206b7:	83 c4 10             	add    $0x10,%esp
f01206ba:	89 85 60 fd ff ff    	mov    %eax,-0x2a0(%ebp)
		if ((uint32) ptr_allocations[6] != (ACTUAL_START + 7*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01206c0:	8b 85 60 fd ff ff    	mov    -0x2a0(%ebp),%eax
f01206c6:	89 c1                	mov    %eax,%ecx
f01206c8:	c7 85 34 ff ff ff 00 	movl   $0x1000,-0xcc(%ebp)
f01206cf:	10 00 00 
f01206d2:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f01206d8:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01206dd:	89 85 30 ff ff ff    	mov    %eax,-0xd0(%ebp)
f01206e3:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f01206e9:	ba 00 00 00 00       	mov    $0x0,%edx
f01206ee:	f7 b5 34 ff ff ff    	divl   -0xcc(%ebp)
f01206f4:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f01206fa:	29 d0                	sub    %edx,%eax
f01206fc:	89 c3                	mov    %eax,%ebx
f01206fe:	c7 85 2c ff ff ff 00 	movl   $0x1000,-0xd4(%ebp)
f0120705:	10 00 00 
f0120708:	a0 40 26 78 f0       	mov    0xf0782640,%al
f012070d:	0f b6 d0             	movzbl %al,%edx
f0120710:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f0120716:	01 d0                	add    %edx,%eax
f0120718:	48                   	dec    %eax
f0120719:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%ebp)
f012071f:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f0120725:	ba 00 00 00 00       	mov    $0x0,%edx
f012072a:	f7 b5 2c ff ff ff    	divl   -0xd4(%ebp)
f0120730:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f0120736:	29 d0                	sub    %edx,%eax
f0120738:	01 c3                	add    %eax,%ebx
f012073a:	c7 85 24 ff ff ff 00 	movl   $0x1000,-0xdc(%ebp)
f0120741:	10 00 00 
f0120744:	a0 40 26 78 f0       	mov    0xf0782640,%al
f0120749:	0f b6 c0             	movzbl %al,%eax
f012074c:	c1 e0 04             	shl    $0x4,%eax
f012074f:	89 c2                	mov    %eax,%edx
f0120751:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0120757:	01 d0                	add    %edx,%eax
f0120759:	48                   	dec    %eax
f012075a:	89 85 20 ff ff ff    	mov    %eax,-0xe0(%ebp)
f0120760:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0120766:	ba 00 00 00 00       	mov    $0x0,%edx
f012076b:	f7 b5 24 ff ff ff    	divl   -0xdc(%ebp)
f0120771:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0120777:	29 d0                	sub    %edx,%eax
f0120779:	01 d8                	add    %ebx,%eax
f012077b:	2d 00 80 8f 09       	sub    $0x98f8000,%eax
f0120780:	39 c1                	cmp    %eax,%ecx
f0120782:	74 17                	je     f012079b <test_kfree+0x9aa>
f0120784:	83 ec 04             	sub    $0x4,%esp
f0120787:	68 60 b4 13 f0       	push   $0xf013b460
f012078c:	68 21 05 00 00       	push   $0x521
f0120791:	68 7a b3 13 f0       	push   $0xf013b37a
f0120796:	e8 6a fa fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012079b:	e8 28 36 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f01207a0:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f01207a3:	74 17                	je     f01207bc <test_kfree+0x9cb>
f01207a5:	83 ec 04             	sub    $0x4,%esp
f01207a8:	68 94 b3 13 f0       	push   $0xf013b394
f01207ad:	68 22 05 00 00       	push   $0x522
f01207b2:	68 7a b3 13 f0       	push   $0xf013b37a
f01207b7:	e8 49 fa fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1536) panic("Wrong allocation: pages are not loaded successfully into memory");
f01207bc:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f01207bf:	e8 d9 c3 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f01207c4:	29 c3                	sub    %eax,%ebx
f01207c6:	89 d8                	mov    %ebx,%eax
f01207c8:	3d 00 06 00 00       	cmp    $0x600,%eax
f01207cd:	74 17                	je     f01207e6 <test_kfree+0x9f5>
f01207cf:	83 ec 04             	sub    $0x4,%esp
f01207d2:	68 fc b3 13 f0       	push   $0xf013b3fc
f01207d7:	68 23 05 00 00       	push   $0x523
f01207dc:	68 7a b3 13 f0       	push   $0xf013b37a
f01207e1:	e8 1f fa fd ff       	call   f0100205 <_panic>
		lastIndices[6] = (6*Mega-kilo)/sizeof(char) - 1;
f01207e6:	c7 85 00 fe ff ff ff 	movl   $0x5ffbff,-0x200(%ebp)
f01207ed:	fb 5f 00 

		//14 KB
		freeFrames = sys_calculate_free_frames() ;
f01207f0:	e8 a8 c3 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f01207f5:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01207f8:	e8 cb 35 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f01207fd:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[7] = kmalloc(14*kilo);
f0120800:	83 ec 0c             	sub    $0xc,%esp
f0120803:	68 00 38 00 00       	push   $0x3800
f0120808:	e8 78 70 fe ff       	call   f0107885 <kmalloc>
f012080d:	83 c4 10             	add    $0x10,%esp
f0120810:	89 85 64 fd ff ff    	mov    %eax,-0x29c(%ebp)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 13*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0120816:	8b 85 64 fd ff ff    	mov    -0x29c(%ebp),%eax
f012081c:	89 c1                	mov    %eax,%ecx
f012081e:	c7 85 1c ff ff ff 00 	movl   $0x1000,-0xe4(%ebp)
f0120825:	10 00 00 
f0120828:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f012082e:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0120833:	89 85 18 ff ff ff    	mov    %eax,-0xe8(%ebp)
f0120839:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f012083f:	ba 00 00 00 00       	mov    $0x0,%edx
f0120844:	f7 b5 1c ff ff ff    	divl   -0xe4(%ebp)
f012084a:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f0120850:	29 d0                	sub    %edx,%eax
f0120852:	89 c3                	mov    %eax,%ebx
f0120854:	c7 85 14 ff ff ff 00 	movl   $0x1000,-0xec(%ebp)
f012085b:	10 00 00 
f012085e:	a0 40 26 78 f0       	mov    0xf0782640,%al
f0120863:	0f b6 d0             	movzbl %al,%edx
f0120866:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f012086c:	01 d0                	add    %edx,%eax
f012086e:	48                   	dec    %eax
f012086f:	89 85 10 ff ff ff    	mov    %eax,-0xf0(%ebp)
f0120875:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f012087b:	ba 00 00 00 00       	mov    $0x0,%edx
f0120880:	f7 b5 14 ff ff ff    	divl   -0xec(%ebp)
f0120886:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f012088c:	29 d0                	sub    %edx,%eax
f012088e:	01 c3                	add    %eax,%ebx
f0120890:	c7 85 0c ff ff ff 00 	movl   $0x1000,-0xf4(%ebp)
f0120897:	10 00 00 
f012089a:	a0 40 26 78 f0       	mov    0xf0782640,%al
f012089f:	0f b6 c0             	movzbl %al,%eax
f01208a2:	c1 e0 04             	shl    $0x4,%eax
f01208a5:	89 c2                	mov    %eax,%edx
f01208a7:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f01208ad:	01 d0                	add    %edx,%eax
f01208af:	48                   	dec    %eax
f01208b0:	89 85 08 ff ff ff    	mov    %eax,-0xf8(%ebp)
f01208b6:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f01208bc:	ba 00 00 00 00       	mov    $0x0,%edx
f01208c1:	f7 b5 0c ff ff ff    	divl   -0xf4(%ebp)
f01208c7:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f01208cd:	29 d0                	sub    %edx,%eax
f01208cf:	01 d8                	add    %ebx,%eax
f01208d1:	2d 00 80 2f 09       	sub    $0x92f8000,%eax
f01208d6:	39 c1                	cmp    %eax,%ecx
f01208d8:	74 17                	je     f01208f1 <test_kfree+0xb00>
f01208da:	83 ec 04             	sub    $0x4,%esp
f01208dd:	68 60 b4 13 f0       	push   $0xf013b460
f01208e2:	68 2a 05 00 00       	push   $0x52a
f01208e7:	68 7a b3 13 f0       	push   $0xf013b37a
f01208ec:	e8 14 f9 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01208f1:	e8 d2 34 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f01208f6:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f01208f9:	74 17                	je     f0120912 <test_kfree+0xb21>
f01208fb:	83 ec 04             	sub    $0x4,%esp
f01208fe:	68 94 b3 13 f0       	push   $0xf013b394
f0120903:	68 2b 05 00 00       	push   $0x52b
f0120908:	68 7a b3 13 f0       	push   $0xf013b37a
f012090d:	e8 f3 f8 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 4) panic("Wrong allocation: pages are not loaded successfully into memory");
f0120912:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0120915:	e8 83 c2 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f012091a:	29 c3                	sub    %eax,%ebx
f012091c:	89 d8                	mov    %ebx,%eax
f012091e:	83 f8 04             	cmp    $0x4,%eax
f0120921:	74 17                	je     f012093a <test_kfree+0xb49>
f0120923:	83 ec 04             	sub    $0x4,%esp
f0120926:	68 fc b3 13 f0       	push   $0xf013b3fc
f012092b:	68 2c 05 00 00       	push   $0x52c
f0120930:	68 7a b3 13 f0       	push   $0xf013b37a
f0120935:	e8 cb f8 fd ff       	call   f0100205 <_panic>
		lastIndices[7] = (14*kilo)/sizeof(char) - 1;
f012093a:	c7 85 04 fe ff ff ff 	movl   $0x37ff,-0x1fc(%ebp)
f0120941:	37 00 00 
		ptr = (char*)ptr_allocations[7];
f0120944:	8b 85 64 fd ff ff    	mov    -0x29c(%ebp),%eax
f012094a:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[7]; ++i)
f012094d:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0120954:	eb 0e                	jmp    f0120964 <test_kfree+0xb73>
		{
			ptr[i] = 7 ;
f0120956:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0120959:	8b 45 80             	mov    -0x80(%ebp),%eax
f012095c:	01 d0                	add    %edx,%eax
f012095e:	c6 00 07             	movb   $0x7,(%eax)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 13*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 4) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[7] = (14*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[7];
		for (i = 0; i < lastIndices[7]; ++i)
f0120961:	ff 45 f4             	incl   -0xc(%ebp)
f0120964:	8b 85 04 fe ff ff    	mov    -0x1fc(%ebp),%eax
f012096a:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012096d:	7f e7                	jg     f0120956 <test_kfree+0xb65>
	}

	//kfree some of the allocated spaces [15%]
	{
		//kfree 1st 2 MB
		int freeFrames = sys_calculate_free_frames() ;
f012096f:	e8 29 c2 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0120974:	89 85 04 ff ff ff    	mov    %eax,-0xfc(%ebp)
		int freeDiskFrames = pf_calculate_free_frames() ;
f012097a:	e8 49 34 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f012097f:	89 85 00 ff ff ff    	mov    %eax,-0x100(%ebp)
		kfree(ptr_allocations[0]);
f0120985:	8b 85 48 fd ff ff    	mov    -0x2b8(%ebp),%eax
f012098b:	83 ec 0c             	sub    $0xc,%esp
f012098e:	50                   	push   %eax
f012098f:	e8 bc 6f fe ff       	call   f0107950 <kfree>
f0120994:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0120997:	e8 2c 34 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f012099c:	3b 85 00 ff ff ff    	cmp    -0x100(%ebp),%eax
f01209a2:	74 17                	je     f01209bb <test_kfree+0xbca>
f01209a4:	83 ec 04             	sub    $0x4,%esp
f01209a7:	68 94 b3 13 f0       	push   $0xf013b394
f01209ac:	68 3b 05 00 00       	push   $0x53b
f01209b1:	68 7a b3 13 f0       	push   $0xf013b37a
f01209b6:	e8 4a f8 fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512 ) panic("Wrong kfree: pages in memory are not freed correctly");
f01209bb:	e8 dd c1 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f01209c0:	89 c2                	mov    %eax,%edx
f01209c2:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f01209c8:	29 c2                	sub    %eax,%edx
f01209ca:	89 d0                	mov    %edx,%eax
f01209cc:	3d 00 02 00 00       	cmp    $0x200,%eax
f01209d1:	74 17                	je     f01209ea <test_kfree+0xbf9>
f01209d3:	83 ec 04             	sub    $0x4,%esp
f01209d6:	68 04 bb 13 f0       	push   $0xf013bb04
f01209db:	68 3c 05 00 00       	push   $0x53c
f01209e0:	68 7a b3 13 f0       	push   $0xf013b37a
f01209e5:	e8 1b f8 fd ff       	call   f0100205 <_panic>

		//kfree 1st 2 KB
		freeFrames = sys_calculate_free_frames() ;
f01209ea:	e8 ae c1 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f01209ef:	89 85 04 ff ff ff    	mov    %eax,-0xfc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01209f5:	e8 ce 33 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f01209fa:	89 85 00 ff ff ff    	mov    %eax,-0x100(%ebp)
		kfree(ptr_allocations[2]);
f0120a00:	8b 85 50 fd ff ff    	mov    -0x2b0(%ebp),%eax
f0120a06:	83 ec 0c             	sub    $0xc,%esp
f0120a09:	50                   	push   %eax
f0120a0a:	e8 41 6f fe ff       	call   f0107950 <kfree>
f0120a0f:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0120a12:	e8 b1 33 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0120a17:	3b 85 00 ff ff ff    	cmp    -0x100(%ebp),%eax
f0120a1d:	74 17                	je     f0120a36 <test_kfree+0xc45>
f0120a1f:	83 ec 04             	sub    $0x4,%esp
f0120a22:	68 94 b3 13 f0       	push   $0xf013b394
f0120a27:	68 42 05 00 00       	push   $0x542
f0120a2c:	68 7a b3 13 f0       	push   $0xf013b37a
f0120a31:	e8 cf f7 fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 1 ) panic("Wrong kfree: pages in memory are not freed correctly");
f0120a36:	e8 62 c1 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0120a3b:	89 c2                	mov    %eax,%edx
f0120a3d:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f0120a43:	29 c2                	sub    %eax,%edx
f0120a45:	89 d0                	mov    %edx,%eax
f0120a47:	83 f8 01             	cmp    $0x1,%eax
f0120a4a:	74 17                	je     f0120a63 <test_kfree+0xc72>
f0120a4c:	83 ec 04             	sub    $0x4,%esp
f0120a4f:	68 04 bb 13 f0       	push   $0xf013bb04
f0120a54:	68 43 05 00 00       	push   $0x543
f0120a59:	68 7a b3 13 f0       	push   $0xf013b37a
f0120a5e:	e8 a2 f7 fd ff       	call   f0100205 <_panic>

		//kfree 2nd 2 MB
		freeFrames = sys_calculate_free_frames() ;
f0120a63:	e8 35 c1 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0120a68:	89 85 04 ff ff ff    	mov    %eax,-0xfc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0120a6e:	e8 55 33 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0120a73:	89 85 00 ff ff ff    	mov    %eax,-0x100(%ebp)
		kfree(ptr_allocations[1]);
f0120a79:	8b 85 4c fd ff ff    	mov    -0x2b4(%ebp),%eax
f0120a7f:	83 ec 0c             	sub    $0xc,%esp
f0120a82:	50                   	push   %eax
f0120a83:	e8 c8 6e fe ff       	call   f0107950 <kfree>
f0120a88:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0120a8b:	e8 38 33 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0120a90:	3b 85 00 ff ff ff    	cmp    -0x100(%ebp),%eax
f0120a96:	74 17                	je     f0120aaf <test_kfree+0xcbe>
f0120a98:	83 ec 04             	sub    $0x4,%esp
f0120a9b:	68 94 b3 13 f0       	push   $0xf013b394
f0120aa0:	68 49 05 00 00       	push   $0x549
f0120aa5:	68 7a b3 13 f0       	push   $0xf013b37a
f0120aaa:	e8 56 f7 fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512) panic("Wrong kfree: pages in memory are not freed correctly");
f0120aaf:	e8 e9 c0 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0120ab4:	89 c2                	mov    %eax,%edx
f0120ab6:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f0120abc:	29 c2                	sub    %eax,%edx
f0120abe:	89 d0                	mov    %edx,%eax
f0120ac0:	3d 00 02 00 00       	cmp    $0x200,%eax
f0120ac5:	74 17                	je     f0120ade <test_kfree+0xced>
f0120ac7:	83 ec 04             	sub    $0x4,%esp
f0120aca:	68 04 bb 13 f0       	push   $0xf013bb04
f0120acf:	68 4a 05 00 00       	push   $0x54a
f0120ad4:	68 7a b3 13 f0       	push   $0xf013b37a
f0120ad9:	e8 27 f7 fd ff       	call   f0100205 <_panic>

		//kfree 6 MB
		freeFrames = sys_calculate_free_frames() ;
f0120ade:	e8 ba c0 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0120ae3:	89 85 04 ff ff ff    	mov    %eax,-0xfc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0120ae9:	e8 da 32 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0120aee:	89 85 00 ff ff ff    	mov    %eax,-0x100(%ebp)
		kfree(ptr_allocations[6]);
f0120af4:	8b 85 60 fd ff ff    	mov    -0x2a0(%ebp),%eax
f0120afa:	83 ec 0c             	sub    $0xc,%esp
f0120afd:	50                   	push   %eax
f0120afe:	e8 4d 6e fe ff       	call   f0107950 <kfree>
f0120b03:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0120b06:	e8 bd 32 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0120b0b:	3b 85 00 ff ff ff    	cmp    -0x100(%ebp),%eax
f0120b11:	74 17                	je     f0120b2a <test_kfree+0xd39>
f0120b13:	83 ec 04             	sub    $0x4,%esp
f0120b16:	68 94 b3 13 f0       	push   $0xf013b394
f0120b1b:	68 50 05 00 00       	push   $0x550
f0120b20:	68 7a b3 13 f0       	push   $0xf013b37a
f0120b25:	e8 db f6 fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 6*Mega/4096) panic("Wrong kfree: pages in memory are not freed correctly");
f0120b2a:	e8 6e c0 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0120b2f:	89 c2                	mov    %eax,%edx
f0120b31:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f0120b37:	29 c2                	sub    %eax,%edx
f0120b39:	89 d0                	mov    %edx,%eax
f0120b3b:	3d 00 06 00 00       	cmp    $0x600,%eax
f0120b40:	74 17                	je     f0120b59 <test_kfree+0xd68>
f0120b42:	83 ec 04             	sub    $0x4,%esp
f0120b45:	68 04 bb 13 f0       	push   $0xf013bb04
f0120b4a:	68 51 05 00 00       	push   $0x551
f0120b4f:	68 7a b3 13 f0       	push   $0xf013b37a
f0120b54:	e8 ac f6 fd ff       	call   f0100205 <_panic>
	}

	cprintf("\nkfree: current evaluation = 15%");
f0120b59:	83 ec 0c             	sub    $0xc,%esp
f0120b5c:	68 3c bb 13 f0       	push   $0xf013bb3c
f0120b61:	e8 a8 01 fe ff       	call   f0100d0e <cprintf>
f0120b66:	83 c4 10             	add    $0x10,%esp

	//Check memory access after kfree [15%]
	{
		//2 KB
		ptr = (char*)ptr_allocations[3];
f0120b69:	8b 85 54 fd ff ff    	mov    -0x2ac(%ebp),%eax
f0120b6f:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[3]; ++i)
f0120b72:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0120b79:	eb 1e                	jmp    f0120b99 <test_kfree+0xda8>
		{
			sums[3] += ptr[i] ;
f0120b7b:	8b 95 a4 fd ff ff    	mov    -0x25c(%ebp),%edx
f0120b81:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0120b84:	8b 45 80             	mov    -0x80(%ebp),%eax
f0120b87:	01 c8                	add    %ecx,%eax
f0120b89:	8a 00                	mov    (%eax),%al
f0120b8b:	0f be c0             	movsbl %al,%eax
f0120b8e:	01 d0                	add    %edx,%eax
f0120b90:	89 85 a4 fd ff ff    	mov    %eax,-0x25c(%ebp)

	//Check memory access after kfree [15%]
	{
		//2 KB
		ptr = (char*)ptr_allocations[3];
		for (i = 0; i < lastIndices[3]; ++i)
f0120b96:	ff 45 f4             	incl   -0xc(%ebp)
f0120b99:	8b 85 f4 fd ff ff    	mov    -0x20c(%ebp),%eax
f0120b9f:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0120ba2:	7f d7                	jg     f0120b7b <test_kfree+0xd8a>
		{
			sums[3] += ptr[i] ;
		}
		if (sums[3] != 3*lastIndices[3])	panic("kfree: invalid read after freeing some allocations");
f0120ba4:	8b 95 a4 fd ff ff    	mov    -0x25c(%ebp),%edx
f0120baa:	8b 85 f4 fd ff ff    	mov    -0x20c(%ebp),%eax
f0120bb0:	89 c1                	mov    %eax,%ecx
f0120bb2:	01 c9                	add    %ecx,%ecx
f0120bb4:	01 c8                	add    %ecx,%eax
f0120bb6:	39 c2                	cmp    %eax,%edx
f0120bb8:	74 17                	je     f0120bd1 <test_kfree+0xde0>
f0120bba:	83 ec 04             	sub    $0x4,%esp
f0120bbd:	68 60 bb 13 f0       	push   $0xf013bb60
f0120bc2:	68 5e 05 00 00       	push   $0x55e
f0120bc7:	68 7a b3 13 f0       	push   $0xf013b37a
f0120bcc:	e8 34 f6 fd ff       	call   f0100205 <_panic>

		//7 KB
		ptr = (char*)ptr_allocations[4];
f0120bd1:	8b 85 58 fd ff ff    	mov    -0x2a8(%ebp),%eax
f0120bd7:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[4]; ++i)
f0120bda:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0120be1:	eb 1e                	jmp    f0120c01 <test_kfree+0xe10>
		{
			sums[4] += ptr[i] ;
f0120be3:	8b 95 a8 fd ff ff    	mov    -0x258(%ebp),%edx
f0120be9:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0120bec:	8b 45 80             	mov    -0x80(%ebp),%eax
f0120bef:	01 c8                	add    %ecx,%eax
f0120bf1:	8a 00                	mov    (%eax),%al
f0120bf3:	0f be c0             	movsbl %al,%eax
f0120bf6:	01 d0                	add    %edx,%eax
f0120bf8:	89 85 a8 fd ff ff    	mov    %eax,-0x258(%ebp)
		}
		if (sums[3] != 3*lastIndices[3])	panic("kfree: invalid read after freeing some allocations");

		//7 KB
		ptr = (char*)ptr_allocations[4];
		for (i = 0; i < lastIndices[4]; ++i)
f0120bfe:	ff 45 f4             	incl   -0xc(%ebp)
f0120c01:	8b 85 f8 fd ff ff    	mov    -0x208(%ebp),%eax
f0120c07:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0120c0a:	7f d7                	jg     f0120be3 <test_kfree+0xdf2>
		{
			sums[4] += ptr[i] ;
		}
		if (sums[4] != 4*lastIndices[4])	panic("kfree: invalid read after freeing some allocations");
f0120c0c:	8b 85 a8 fd ff ff    	mov    -0x258(%ebp),%eax
f0120c12:	8b 95 f8 fd ff ff    	mov    -0x208(%ebp),%edx
f0120c18:	c1 e2 02             	shl    $0x2,%edx
f0120c1b:	39 d0                	cmp    %edx,%eax
f0120c1d:	74 17                	je     f0120c36 <test_kfree+0xe45>
f0120c1f:	83 ec 04             	sub    $0x4,%esp
f0120c22:	68 60 bb 13 f0       	push   $0xf013bb60
f0120c27:	68 66 05 00 00       	push   $0x566
f0120c2c:	68 7a b3 13 f0       	push   $0xf013b37a
f0120c31:	e8 cf f5 fd ff       	call   f0100205 <_panic>

		//3 MB
		ptr = (char*)ptr_allocations[5];
f0120c36:	8b 85 5c fd ff ff    	mov    -0x2a4(%ebp),%eax
f0120c3c:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[5]; ++i)
f0120c3f:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0120c46:	eb 1e                	jmp    f0120c66 <test_kfree+0xe75>
		{
			sums[5] += ptr[i] ;
f0120c48:	8b 95 ac fd ff ff    	mov    -0x254(%ebp),%edx
f0120c4e:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0120c51:	8b 45 80             	mov    -0x80(%ebp),%eax
f0120c54:	01 c8                	add    %ecx,%eax
f0120c56:	8a 00                	mov    (%eax),%al
f0120c58:	0f be c0             	movsbl %al,%eax
f0120c5b:	01 d0                	add    %edx,%eax
f0120c5d:	89 85 ac fd ff ff    	mov    %eax,-0x254(%ebp)
		}
		if (sums[4] != 4*lastIndices[4])	panic("kfree: invalid read after freeing some allocations");

		//3 MB
		ptr = (char*)ptr_allocations[5];
		for (i = 0; i < lastIndices[5]; ++i)
f0120c63:	ff 45 f4             	incl   -0xc(%ebp)
f0120c66:	8b 85 fc fd ff ff    	mov    -0x204(%ebp),%eax
f0120c6c:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0120c6f:	7f d7                	jg     f0120c48 <test_kfree+0xe57>
		{
			sums[5] += ptr[i] ;
		}
		if (sums[5] != 5*lastIndices[5])	panic("kfree: invalid read after freeing some allocations");
f0120c71:	8b 8d ac fd ff ff    	mov    -0x254(%ebp),%ecx
f0120c77:	8b 95 fc fd ff ff    	mov    -0x204(%ebp),%edx
f0120c7d:	89 d0                	mov    %edx,%eax
f0120c7f:	c1 e0 02             	shl    $0x2,%eax
f0120c82:	01 d0                	add    %edx,%eax
f0120c84:	39 c1                	cmp    %eax,%ecx
f0120c86:	74 17                	je     f0120c9f <test_kfree+0xeae>
f0120c88:	83 ec 04             	sub    $0x4,%esp
f0120c8b:	68 60 bb 13 f0       	push   $0xf013bb60
f0120c90:	68 6e 05 00 00       	push   $0x56e
f0120c95:	68 7a b3 13 f0       	push   $0xf013b37a
f0120c9a:	e8 66 f5 fd ff       	call   f0100205 <_panic>

		//14 KB
		ptr = (char*)ptr_allocations[7];
f0120c9f:	8b 85 64 fd ff ff    	mov    -0x29c(%ebp),%eax
f0120ca5:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[7]; ++i)
f0120ca8:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0120caf:	eb 1e                	jmp    f0120ccf <test_kfree+0xede>
		{
			sums[7] += ptr[i] ;
f0120cb1:	8b 95 b4 fd ff ff    	mov    -0x24c(%ebp),%edx
f0120cb7:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0120cba:	8b 45 80             	mov    -0x80(%ebp),%eax
f0120cbd:	01 c8                	add    %ecx,%eax
f0120cbf:	8a 00                	mov    (%eax),%al
f0120cc1:	0f be c0             	movsbl %al,%eax
f0120cc4:	01 d0                	add    %edx,%eax
f0120cc6:	89 85 b4 fd ff ff    	mov    %eax,-0x24c(%ebp)
		}
		if (sums[5] != 5*lastIndices[5])	panic("kfree: invalid read after freeing some allocations");

		//14 KB
		ptr = (char*)ptr_allocations[7];
		for (i = 0; i < lastIndices[7]; ++i)
f0120ccc:	ff 45 f4             	incl   -0xc(%ebp)
f0120ccf:	8b 85 04 fe ff ff    	mov    -0x1fc(%ebp),%eax
f0120cd5:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0120cd8:	7f d7                	jg     f0120cb1 <test_kfree+0xec0>
		{
			sums[7] += ptr[i] ;
		}
		if (sums[7] != 7*lastIndices[7])	panic("kfree: invalid read after freeing some allocations");
f0120cda:	8b 8d b4 fd ff ff    	mov    -0x24c(%ebp),%ecx
f0120ce0:	8b 95 04 fe ff ff    	mov    -0x1fc(%ebp),%edx
f0120ce6:	89 d0                	mov    %edx,%eax
f0120ce8:	01 c0                	add    %eax,%eax
f0120cea:	01 d0                	add    %edx,%eax
f0120cec:	01 c0                	add    %eax,%eax
f0120cee:	01 d0                	add    %edx,%eax
f0120cf0:	39 c1                	cmp    %eax,%ecx
f0120cf2:	74 17                	je     f0120d0b <test_kfree+0xf1a>
f0120cf4:	83 ec 04             	sub    $0x4,%esp
f0120cf7:	68 60 bb 13 f0       	push   $0xf013bb60
f0120cfc:	68 76 05 00 00       	push   $0x576
f0120d01:	68 7a b3 13 f0       	push   $0xf013b37a
f0120d06:	e8 fa f4 fd ff       	call   f0100205 <_panic>
	}
	cprintf("\b\b\b30%");
f0120d0b:	83 ec 0c             	sub    $0xc,%esp
f0120d0e:	68 93 bb 13 f0       	push   $0xf013bb93
f0120d13:	e8 f6 ff fd ff       	call   f0100d0e <cprintf>
f0120d18:	83 c4 10             	add    $0x10,%esp

	//Allocate after kfree [15%]
	{
		//20 KB
		freeFrames = sys_calculate_free_frames() ;
f0120d1b:	e8 7d be fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0120d20:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0120d23:	e8 a0 30 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0120d28:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[8] = kmalloc(20*kilo);
f0120d2b:	83 ec 0c             	sub    $0xc,%esp
f0120d2e:	68 00 50 00 00       	push   $0x5000
f0120d33:	e8 4d 6b fe ff       	call   f0107885 <kmalloc>
f0120d38:	83 c4 10             	add    $0x10,%esp
f0120d3b:	89 85 68 fd ff ff    	mov    %eax,-0x298(%ebp)
		if ((uint32) ptr_allocations[8] != (ACTUAL_START + 13*Mega + 32*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0120d41:	8b 85 68 fd ff ff    	mov    -0x298(%ebp),%eax
f0120d47:	89 c1                	mov    %eax,%ecx
f0120d49:	c7 85 fc fe ff ff 00 	movl   $0x1000,-0x104(%ebp)
f0120d50:	10 00 00 
f0120d53:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f0120d59:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0120d5e:	89 85 f8 fe ff ff    	mov    %eax,-0x108(%ebp)
f0120d64:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f0120d6a:	ba 00 00 00 00       	mov    $0x0,%edx
f0120d6f:	f7 b5 fc fe ff ff    	divl   -0x104(%ebp)
f0120d75:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f0120d7b:	29 d0                	sub    %edx,%eax
f0120d7d:	89 c3                	mov    %eax,%ebx
f0120d7f:	c7 85 f4 fe ff ff 00 	movl   $0x1000,-0x10c(%ebp)
f0120d86:	10 00 00 
f0120d89:	a0 40 26 78 f0       	mov    0xf0782640,%al
f0120d8e:	0f b6 d0             	movzbl %al,%edx
f0120d91:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f0120d97:	01 d0                	add    %edx,%eax
f0120d99:	48                   	dec    %eax
f0120d9a:	89 85 f0 fe ff ff    	mov    %eax,-0x110(%ebp)
f0120da0:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f0120da6:	ba 00 00 00 00       	mov    $0x0,%edx
f0120dab:	f7 b5 f4 fe ff ff    	divl   -0x10c(%ebp)
f0120db1:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f0120db7:	29 d0                	sub    %edx,%eax
f0120db9:	01 c3                	add    %eax,%ebx
f0120dbb:	c7 85 ec fe ff ff 00 	movl   $0x1000,-0x114(%ebp)
f0120dc2:	10 00 00 
f0120dc5:	a0 40 26 78 f0       	mov    0xf0782640,%al
f0120dca:	0f b6 c0             	movzbl %al,%eax
f0120dcd:	c1 e0 04             	shl    $0x4,%eax
f0120dd0:	89 c2                	mov    %eax,%edx
f0120dd2:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f0120dd8:	01 d0                	add    %edx,%eax
f0120dda:	48                   	dec    %eax
f0120ddb:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)
f0120de1:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f0120de7:	ba 00 00 00 00       	mov    $0x0,%edx
f0120dec:	f7 b5 ec fe ff ff    	divl   -0x114(%ebp)
f0120df2:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f0120df8:	29 d0                	sub    %edx,%eax
f0120dfa:	01 d8                	add    %ebx,%eax
f0120dfc:	2d 00 40 2f 09       	sub    $0x92f4000,%eax
f0120e01:	39 c1                	cmp    %eax,%ecx
f0120e03:	74 17                	je     f0120e1c <test_kfree+0x102b>
f0120e05:	83 ec 04             	sub    $0x4,%esp
f0120e08:	68 60 b4 13 f0       	push   $0xf013b460
f0120e0d:	68 80 05 00 00       	push   $0x580
f0120e12:	68 7a b3 13 f0       	push   $0xf013b37a
f0120e17:	e8 e9 f3 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0120e1c:	e8 a7 2f fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0120e21:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0120e24:	74 17                	je     f0120e3d <test_kfree+0x104c>
f0120e26:	83 ec 04             	sub    $0x4,%esp
f0120e29:	68 94 b3 13 f0       	push   $0xf013b394
f0120e2e:	68 81 05 00 00       	push   $0x581
f0120e33:	68 7a b3 13 f0       	push   $0xf013b37a
f0120e38:	e8 c8 f3 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 5) panic("Wrong allocation: pages are not loaded successfully into memory");
f0120e3d:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0120e40:	e8 58 bd fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0120e45:	29 c3                	sub    %eax,%ebx
f0120e47:	89 d8                	mov    %ebx,%eax
f0120e49:	83 f8 05             	cmp    $0x5,%eax
f0120e4c:	74 17                	je     f0120e65 <test_kfree+0x1074>
f0120e4e:	83 ec 04             	sub    $0x4,%esp
f0120e51:	68 fc b3 13 f0       	push   $0xf013b3fc
f0120e56:	68 82 05 00 00       	push   $0x582
f0120e5b:	68 7a b3 13 f0       	push   $0xf013b37a
f0120e60:	e8 a0 f3 fd ff       	call   f0100205 <_panic>
		lastIndices[8] = (20*kilo)/sizeof(char) - 1;
f0120e65:	c7 85 08 fe ff ff ff 	movl   $0x4fff,-0x1f8(%ebp)
f0120e6c:	4f 00 00 
		ptr = (char*)ptr_allocations[8];
f0120e6f:	8b 85 68 fd ff ff    	mov    -0x298(%ebp),%eax
f0120e75:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[8]; ++i)
f0120e78:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0120e7f:	eb 0e                	jmp    f0120e8f <test_kfree+0x109e>
		{
			ptr[i] = 8 ;
f0120e81:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0120e84:	8b 45 80             	mov    -0x80(%ebp),%eax
f0120e87:	01 d0                	add    %edx,%eax
f0120e89:	c6 00 08             	movb   $0x8,(%eax)
		if ((uint32) ptr_allocations[8] != (ACTUAL_START + 13*Mega + 32*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 5) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[8] = (20*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[8];
		for (i = 0; i < lastIndices[8]; ++i)
f0120e8c:	ff 45 f4             	incl   -0xc(%ebp)
f0120e8f:	8b 85 08 fe ff ff    	mov    -0x1f8(%ebp),%eax
f0120e95:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0120e98:	7f e7                	jg     f0120e81 <test_kfree+0x1090>
		{
			ptr[i] = 8 ;
		}

		//1 MB
		freeFrames = sys_calculate_free_frames() ;
f0120e9a:	e8 fe bc fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0120e9f:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0120ea2:	e8 21 2f fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0120ea7:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[9] = kmalloc(1*Mega);
f0120eaa:	83 ec 0c             	sub    $0xc,%esp
f0120ead:	68 00 00 10 00       	push   $0x100000
f0120eb2:	e8 ce 69 fe ff       	call   f0107885 <kmalloc>
f0120eb7:	83 c4 10             	add    $0x10,%esp
f0120eba:	89 85 6c fd ff ff    	mov    %eax,-0x294(%ebp)
		if ((uint32) ptr_allocations[9] != (ACTUAL_START + 13*Mega + 52*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0120ec0:	8b 85 6c fd ff ff    	mov    -0x294(%ebp),%eax
f0120ec6:	89 c1                	mov    %eax,%ecx
f0120ec8:	c7 85 e4 fe ff ff 00 	movl   $0x1000,-0x11c(%ebp)
f0120ecf:	10 00 00 
f0120ed2:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f0120ed8:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0120edd:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
f0120ee3:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f0120ee9:	ba 00 00 00 00       	mov    $0x0,%edx
f0120eee:	f7 b5 e4 fe ff ff    	divl   -0x11c(%ebp)
f0120ef4:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f0120efa:	29 d0                	sub    %edx,%eax
f0120efc:	89 c3                	mov    %eax,%ebx
f0120efe:	c7 85 dc fe ff ff 00 	movl   $0x1000,-0x124(%ebp)
f0120f05:	10 00 00 
f0120f08:	a0 40 26 78 f0       	mov    0xf0782640,%al
f0120f0d:	0f b6 d0             	movzbl %al,%edx
f0120f10:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f0120f16:	01 d0                	add    %edx,%eax
f0120f18:	48                   	dec    %eax
f0120f19:	89 85 d8 fe ff ff    	mov    %eax,-0x128(%ebp)
f0120f1f:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f0120f25:	ba 00 00 00 00       	mov    $0x0,%edx
f0120f2a:	f7 b5 dc fe ff ff    	divl   -0x124(%ebp)
f0120f30:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f0120f36:	29 d0                	sub    %edx,%eax
f0120f38:	01 c3                	add    %eax,%ebx
f0120f3a:	c7 85 d4 fe ff ff 00 	movl   $0x1000,-0x12c(%ebp)
f0120f41:	10 00 00 
f0120f44:	a0 40 26 78 f0       	mov    0xf0782640,%al
f0120f49:	0f b6 c0             	movzbl %al,%eax
f0120f4c:	c1 e0 04             	shl    $0x4,%eax
f0120f4f:	89 c2                	mov    %eax,%edx
f0120f51:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f0120f57:	01 d0                	add    %edx,%eax
f0120f59:	48                   	dec    %eax
f0120f5a:	89 85 d0 fe ff ff    	mov    %eax,-0x130(%ebp)
f0120f60:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f0120f66:	ba 00 00 00 00       	mov    $0x0,%edx
f0120f6b:	f7 b5 d4 fe ff ff    	divl   -0x12c(%ebp)
f0120f71:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f0120f77:	29 d0                	sub    %edx,%eax
f0120f79:	01 d8                	add    %ebx,%eax
f0120f7b:	2d 00 f0 2e 09       	sub    $0x92ef000,%eax
f0120f80:	39 c1                	cmp    %eax,%ecx
f0120f82:	74 17                	je     f0120f9b <test_kfree+0x11aa>
f0120f84:	83 ec 04             	sub    $0x4,%esp
f0120f87:	68 60 b4 13 f0       	push   $0xf013b460
f0120f8c:	68 8e 05 00 00       	push   $0x58e
f0120f91:	68 7a b3 13 f0       	push   $0xf013b37a
f0120f96:	e8 6a f2 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0120f9b:	e8 28 2e fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0120fa0:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0120fa3:	74 17                	je     f0120fbc <test_kfree+0x11cb>
f0120fa5:	83 ec 04             	sub    $0x4,%esp
f0120fa8:	68 94 b3 13 f0       	push   $0xf013b394
f0120fad:	68 8f 05 00 00       	push   $0x58f
f0120fb2:	68 7a b3 13 f0       	push   $0xf013b37a
f0120fb7:	e8 49 f2 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: pages are not loaded successfully into memory");
f0120fbc:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0120fbf:	e8 d9 bb fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0120fc4:	29 c3                	sub    %eax,%ebx
f0120fc6:	89 d8                	mov    %ebx,%eax
f0120fc8:	3d 00 01 00 00       	cmp    $0x100,%eax
f0120fcd:	74 17                	je     f0120fe6 <test_kfree+0x11f5>
f0120fcf:	83 ec 04             	sub    $0x4,%esp
f0120fd2:	68 fc b3 13 f0       	push   $0xf013b3fc
f0120fd7:	68 90 05 00 00       	push   $0x590
f0120fdc:	68 7a b3 13 f0       	push   $0xf013b37a
f0120fe1:	e8 1f f2 fd ff       	call   f0100205 <_panic>
		lastIndices[9] = (1*Mega)/sizeof(char) - 1;
f0120fe6:	c7 85 0c fe ff ff ff 	movl   $0xfffff,-0x1f4(%ebp)
f0120fed:	ff 0f 00 
		ptr = (char*)ptr_allocations[9];
f0120ff0:	8b 85 6c fd ff ff    	mov    -0x294(%ebp),%eax
f0120ff6:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[9]; ++i)
f0120ff9:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0121000:	eb 0e                	jmp    f0121010 <test_kfree+0x121f>
		{
			ptr[i] = 9 ;
f0121002:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0121005:	8b 45 80             	mov    -0x80(%ebp),%eax
f0121008:	01 d0                	add    %edx,%eax
f012100a:	c6 00 09             	movb   $0x9,(%eax)
		if ((uint32) ptr_allocations[9] != (ACTUAL_START + 13*Mega + 52*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[9] = (1*Mega)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[9];
		for (i = 0; i < lastIndices[9]; ++i)
f012100d:	ff 45 f4             	incl   -0xc(%ebp)
f0121010:	8b 85 0c fe ff ff    	mov    -0x1f4(%ebp),%eax
f0121016:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0121019:	7f e7                	jg     f0121002 <test_kfree+0x1211>
		{
			ptr[i] = 9 ;
		}

		if (isKHeapPlacementStrategyNEXTFIT())
f012101b:	e8 ac 66 ff ff       	call   f01176cc <isKHeapPlacementStrategyNEXTFIT>
f0121020:	84 c0                	test   %al,%al
f0121022:	0f 84 ac 06 00 00    	je     f01216d4 <test_kfree+0x18e3>
		{
			//Allocate Remaining MBs
			freeFrames = sys_calculate_free_frames() ;
f0121028:	e8 70 bb fe ff       	call   f010cb9d <sys_calculate_free_frames>
f012102d:	89 45 d0             	mov    %eax,-0x30(%ebp)
			freeDiskFrames = pf_calculate_free_frames() ;
f0121030:	e8 93 2d fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0121035:	89 45 cc             	mov    %eax,-0x34(%ebp)
			uint32 reqAllocatedSpace = KERNEL_HEAP_MAX - (ACTUAL_START + 13*Mega + 52*kilo + 1*Mega);
f0121038:	c7 85 cc fe ff ff 00 	movl   $0x1000,-0x134(%ebp)
f012103f:	10 00 00 
f0121042:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f0121048:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012104d:	89 85 c8 fe ff ff    	mov    %eax,-0x138(%ebp)
f0121053:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f0121059:	ba 00 00 00 00       	mov    $0x0,%edx
f012105e:	f7 b5 cc fe ff ff    	divl   -0x134(%ebp)
f0121064:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f012106a:	29 d0                	sub    %edx,%eax
f012106c:	89 c1                	mov    %eax,%ecx
f012106e:	c7 85 c4 fe ff ff 00 	movl   $0x1000,-0x13c(%ebp)
f0121075:	10 00 00 
f0121078:	a0 40 26 78 f0       	mov    0xf0782640,%al
f012107d:	0f b6 d0             	movzbl %al,%edx
f0121080:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f0121086:	01 d0                	add    %edx,%eax
f0121088:	48                   	dec    %eax
f0121089:	89 85 c0 fe ff ff    	mov    %eax,-0x140(%ebp)
f012108f:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f0121095:	ba 00 00 00 00       	mov    $0x0,%edx
f012109a:	f7 b5 c4 fe ff ff    	divl   -0x13c(%ebp)
f01210a0:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f01210a6:	29 d0                	sub    %edx,%eax
f01210a8:	01 c1                	add    %eax,%ecx
f01210aa:	c7 85 bc fe ff ff 00 	movl   $0x1000,-0x144(%ebp)
f01210b1:	10 00 00 
f01210b4:	a0 40 26 78 f0       	mov    0xf0782640,%al
f01210b9:	0f b6 c0             	movzbl %al,%eax
f01210bc:	c1 e0 04             	shl    $0x4,%eax
f01210bf:	89 c2                	mov    %eax,%edx
f01210c1:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f01210c7:	01 d0                	add    %edx,%eax
f01210c9:	48                   	dec    %eax
f01210ca:	89 85 b8 fe ff ff    	mov    %eax,-0x148(%ebp)
f01210d0:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f01210d6:	ba 00 00 00 00       	mov    $0x0,%edx
f01210db:	f7 b5 bc fe ff ff    	divl   -0x144(%ebp)
f01210e1:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f01210e7:	29 d0                	sub    %edx,%eax
f01210e9:	01 c8                	add    %ecx,%eax
f01210eb:	ba 00 e0 1e 09       	mov    $0x91ee000,%edx
f01210f0:	29 c2                	sub    %eax,%edx
f01210f2:	89 d0                	mov    %edx,%eax
f01210f4:	89 85 b4 fe ff ff    	mov    %eax,-0x14c(%ebp)
			ptr_allocations[10] = kmalloc(reqAllocatedSpace);
f01210fa:	83 ec 0c             	sub    $0xc,%esp
f01210fd:	ff b5 b4 fe ff ff    	pushl  -0x14c(%ebp)
f0121103:	e8 7d 67 fe ff       	call   f0107885 <kmalloc>
f0121108:	83 c4 10             	add    $0x10,%esp
f012110b:	89 85 70 fd ff ff    	mov    %eax,-0x290(%ebp)
			if ((uint32) ptr_allocations[10] != (ACTUAL_START + 13*Mega + 52*kilo + 1*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0121111:	8b 85 70 fd ff ff    	mov    -0x290(%ebp),%eax
f0121117:	89 c1                	mov    %eax,%ecx
f0121119:	c7 85 b0 fe ff ff 00 	movl   $0x1000,-0x150(%ebp)
f0121120:	10 00 00 
f0121123:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f0121129:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012112e:	89 85 ac fe ff ff    	mov    %eax,-0x154(%ebp)
f0121134:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f012113a:	ba 00 00 00 00       	mov    $0x0,%edx
f012113f:	f7 b5 b0 fe ff ff    	divl   -0x150(%ebp)
f0121145:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f012114b:	29 d0                	sub    %edx,%eax
f012114d:	89 c3                	mov    %eax,%ebx
f012114f:	c7 85 a8 fe ff ff 00 	movl   $0x1000,-0x158(%ebp)
f0121156:	10 00 00 
f0121159:	a0 40 26 78 f0       	mov    0xf0782640,%al
f012115e:	0f b6 d0             	movzbl %al,%edx
f0121161:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f0121167:	01 d0                	add    %edx,%eax
f0121169:	48                   	dec    %eax
f012116a:	89 85 a4 fe ff ff    	mov    %eax,-0x15c(%ebp)
f0121170:	8b 85 a4 fe ff ff    	mov    -0x15c(%ebp),%eax
f0121176:	ba 00 00 00 00       	mov    $0x0,%edx
f012117b:	f7 b5 a8 fe ff ff    	divl   -0x158(%ebp)
f0121181:	8b 85 a4 fe ff ff    	mov    -0x15c(%ebp),%eax
f0121187:	29 d0                	sub    %edx,%eax
f0121189:	01 c3                	add    %eax,%ebx
f012118b:	c7 85 a0 fe ff ff 00 	movl   $0x1000,-0x160(%ebp)
f0121192:	10 00 00 
f0121195:	a0 40 26 78 f0       	mov    0xf0782640,%al
f012119a:	0f b6 c0             	movzbl %al,%eax
f012119d:	c1 e0 04             	shl    $0x4,%eax
f01211a0:	89 c2                	mov    %eax,%edx
f01211a2:	8b 85 a0 fe ff ff    	mov    -0x160(%ebp),%eax
f01211a8:	01 d0                	add    %edx,%eax
f01211aa:	48                   	dec    %eax
f01211ab:	89 85 9c fe ff ff    	mov    %eax,-0x164(%ebp)
f01211b1:	8b 85 9c fe ff ff    	mov    -0x164(%ebp),%eax
f01211b7:	ba 00 00 00 00       	mov    $0x0,%edx
f01211bc:	f7 b5 a0 fe ff ff    	divl   -0x160(%ebp)
f01211c2:	8b 85 9c fe ff ff    	mov    -0x164(%ebp),%eax
f01211c8:	29 d0                	sub    %edx,%eax
f01211ca:	01 d8                	add    %ebx,%eax
f01211cc:	2d 00 f0 1e 09       	sub    $0x91ef000,%eax
f01211d1:	39 c1                	cmp    %eax,%ecx
f01211d3:	74 17                	je     f01211ec <test_kfree+0x13fb>
f01211d5:	83 ec 04             	sub    $0x4,%esp
f01211d8:	68 60 b4 13 f0       	push   $0xf013b460
f01211dd:	68 9f 05 00 00       	push   $0x59f
f01211e2:	68 7a b3 13 f0       	push   $0xf013b37a
f01211e7:	e8 19 f0 fd ff       	call   f0100205 <_panic>
			if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01211ec:	e8 d7 2b fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f01211f1:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f01211f4:	74 17                	je     f012120d <test_kfree+0x141c>
f01211f6:	83 ec 04             	sub    $0x4,%esp
f01211f9:	68 94 b3 13 f0       	push   $0xf013b394
f01211fe:	68 a0 05 00 00       	push   $0x5a0
f0121203:	68 7a b3 13 f0       	push   $0xf013b37a
f0121208:	e8 f8 ef fd ff       	call   f0100205 <_panic>
			if ((freeFrames - sys_calculate_free_frames()) != reqAllocatedSpace/PAGE_SIZE) panic("Wrong allocation: pages are not loaded successfully into memory");
f012120d:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0121210:	e8 88 b9 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0121215:	29 c3                	sub    %eax,%ebx
f0121217:	89 da                	mov    %ebx,%edx
f0121219:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f012121f:	c1 e8 0c             	shr    $0xc,%eax
f0121222:	39 c2                	cmp    %eax,%edx
f0121224:	74 17                	je     f012123d <test_kfree+0x144c>
f0121226:	83 ec 04             	sub    $0x4,%esp
f0121229:	68 fc b3 13 f0       	push   $0xf013b3fc
f012122e:	68 a1 05 00 00       	push   $0x5a1
f0121233:	68 7a b3 13 f0       	push   $0xf013b37a
f0121238:	e8 c8 ef fd ff       	call   f0100205 <_panic>
			lastIndices[10] = (reqAllocatedSpace)/sizeof(char) - 1;
f012123d:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f0121243:	48                   	dec    %eax
f0121244:	89 85 10 fe ff ff    	mov    %eax,-0x1f0(%ebp)
			ptr = (char*)ptr_allocations[10];
f012124a:	8b 85 70 fd ff ff    	mov    -0x290(%ebp),%eax
f0121250:	89 45 80             	mov    %eax,-0x80(%ebp)
//				ptr[i] = 10;
//			}

			//Allocate in merged freed space FROM the beginning
			//3 MB
			freeFrames = sys_calculate_free_frames() ;
f0121253:	e8 45 b9 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0121258:	89 45 d0             	mov    %eax,-0x30(%ebp)
			freeDiskFrames = pf_calculate_free_frames() ;
f012125b:	e8 68 2b fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0121260:	89 45 cc             	mov    %eax,-0x34(%ebp)
			ptr_allocations[11] = kmalloc(3*Mega);
f0121263:	83 ec 0c             	sub    $0xc,%esp
f0121266:	68 00 00 30 00       	push   $0x300000
f012126b:	e8 15 66 fe ff       	call   f0107885 <kmalloc>
f0121270:	83 c4 10             	add    $0x10,%esp
f0121273:	89 85 74 fd ff ff    	mov    %eax,-0x28c(%ebp)
			if ((uint32) ptr_allocations[11] != (ACTUAL_START)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0121279:	8b 85 74 fd ff ff    	mov    -0x28c(%ebp),%eax
f012127f:	89 c1                	mov    %eax,%ecx
f0121281:	c7 85 98 fe ff ff 00 	movl   $0x1000,-0x168(%ebp)
f0121288:	10 00 00 
f012128b:	8b 85 98 fe ff ff    	mov    -0x168(%ebp),%eax
f0121291:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0121296:	89 85 94 fe ff ff    	mov    %eax,-0x16c(%ebp)
f012129c:	8b 85 94 fe ff ff    	mov    -0x16c(%ebp),%eax
f01212a2:	ba 00 00 00 00       	mov    $0x0,%edx
f01212a7:	f7 b5 98 fe ff ff    	divl   -0x168(%ebp)
f01212ad:	8b 85 94 fe ff ff    	mov    -0x16c(%ebp),%eax
f01212b3:	29 d0                	sub    %edx,%eax
f01212b5:	89 c3                	mov    %eax,%ebx
f01212b7:	c7 85 90 fe ff ff 00 	movl   $0x1000,-0x170(%ebp)
f01212be:	10 00 00 
f01212c1:	a0 40 26 78 f0       	mov    0xf0782640,%al
f01212c6:	0f b6 d0             	movzbl %al,%edx
f01212c9:	8b 85 90 fe ff ff    	mov    -0x170(%ebp),%eax
f01212cf:	01 d0                	add    %edx,%eax
f01212d1:	48                   	dec    %eax
f01212d2:	89 85 8c fe ff ff    	mov    %eax,-0x174(%ebp)
f01212d8:	8b 85 8c fe ff ff    	mov    -0x174(%ebp),%eax
f01212de:	ba 00 00 00 00       	mov    $0x0,%edx
f01212e3:	f7 b5 90 fe ff ff    	divl   -0x170(%ebp)
f01212e9:	8b 85 8c fe ff ff    	mov    -0x174(%ebp),%eax
f01212ef:	29 d0                	sub    %edx,%eax
f01212f1:	01 c3                	add    %eax,%ebx
f01212f3:	c7 85 88 fe ff ff 00 	movl   $0x1000,-0x178(%ebp)
f01212fa:	10 00 00 
f01212fd:	a0 40 26 78 f0       	mov    0xf0782640,%al
f0121302:	0f b6 c0             	movzbl %al,%eax
f0121305:	c1 e0 04             	shl    $0x4,%eax
f0121308:	89 c2                	mov    %eax,%edx
f012130a:	8b 85 88 fe ff ff    	mov    -0x178(%ebp),%eax
f0121310:	01 d0                	add    %edx,%eax
f0121312:	48                   	dec    %eax
f0121313:	89 85 84 fe ff ff    	mov    %eax,-0x17c(%ebp)
f0121319:	8b 85 84 fe ff ff    	mov    -0x17c(%ebp),%eax
f012131f:	ba 00 00 00 00       	mov    $0x0,%edx
f0121324:	f7 b5 88 fe ff ff    	divl   -0x178(%ebp)
f012132a:	8b 85 84 fe ff ff    	mov    -0x17c(%ebp),%eax
f0121330:	29 d0                	sub    %edx,%eax
f0121332:	01 d8                	add    %ebx,%eax
f0121334:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f0121339:	39 c1                	cmp    %eax,%ecx
f012133b:	74 17                	je     f0121354 <test_kfree+0x1563>
f012133d:	83 ec 04             	sub    $0x4,%esp
f0121340:	68 60 b4 13 f0       	push   $0xf013b460
f0121345:	68 ae 05 00 00       	push   $0x5ae
f012134a:	68 7a b3 13 f0       	push   $0xf013b37a
f012134f:	e8 b1 ee fd ff       	call   f0100205 <_panic>
			if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0121354:	e8 6f 2a fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0121359:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f012135c:	74 17                	je     f0121375 <test_kfree+0x1584>
f012135e:	83 ec 04             	sub    $0x4,%esp
f0121361:	68 94 b3 13 f0       	push   $0xf013b394
f0121366:	68 af 05 00 00       	push   $0x5af
f012136b:	68 7a b3 13 f0       	push   $0xf013b37a
f0121370:	e8 90 ee fd ff       	call   f0100205 <_panic>
			if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
f0121375:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0121378:	e8 20 b8 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f012137d:	29 c3                	sub    %eax,%ebx
f012137f:	89 d8                	mov    %ebx,%eax
f0121381:	3d 00 03 00 00       	cmp    $0x300,%eax
f0121386:	74 17                	je     f012139f <test_kfree+0x15ae>
f0121388:	83 ec 04             	sub    $0x4,%esp
f012138b:	68 fc b3 13 f0       	push   $0xf013b3fc
f0121390:	68 b0 05 00 00       	push   $0x5b0
f0121395:	68 7a b3 13 f0       	push   $0xf013b37a
f012139a:	e8 66 ee fd ff       	call   f0100205 <_panic>
			lastIndices[11] = (3*Mega)/sizeof(char) - 1;
f012139f:	c7 85 14 fe ff ff ff 	movl   $0x2fffff,-0x1ec(%ebp)
f01213a6:	ff 2f 00 
			ptr = (char*)ptr_allocations[11];
f01213a9:	8b 85 74 fd ff ff    	mov    -0x28c(%ebp),%eax
f01213af:	89 45 80             	mov    %eax,-0x80(%ebp)
			for (i = 0; i < lastIndices[11]; ++i)
f01213b2:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01213b9:	eb 0e                	jmp    f01213c9 <test_kfree+0x15d8>
			{
				ptr[i] = 8 ;
f01213bb:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01213be:	8b 45 80             	mov    -0x80(%ebp),%eax
f01213c1:	01 d0                	add    %edx,%eax
f01213c3:	c6 00 08             	movb   $0x8,(%eax)
			if ((uint32) ptr_allocations[11] != (ACTUAL_START)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
			if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
			if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
			lastIndices[11] = (3*Mega)/sizeof(char) - 1;
			ptr = (char*)ptr_allocations[11];
			for (i = 0; i < lastIndices[11]; ++i)
f01213c6:	ff 45 f4             	incl   -0xc(%ebp)
f01213c9:	8b 85 14 fe ff ff    	mov    -0x1ec(%ebp),%eax
f01213cf:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01213d2:	7f e7                	jg     f01213bb <test_kfree+0x15ca>
			{
				ptr[i] = 8 ;
			}

			//2 KB
			freeFrames = sys_calculate_free_frames() ;
f01213d4:	e8 c4 b7 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f01213d9:	89 45 d0             	mov    %eax,-0x30(%ebp)
			freeDiskFrames = pf_calculate_free_frames() ;
f01213dc:	e8 e7 29 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f01213e1:	89 45 cc             	mov    %eax,-0x34(%ebp)
			ptr_allocations[12] = kmalloc(2*kilo);
f01213e4:	83 ec 0c             	sub    $0xc,%esp
f01213e7:	68 00 08 00 00       	push   $0x800
f01213ec:	e8 94 64 fe ff       	call   f0107885 <kmalloc>
f01213f1:	83 c4 10             	add    $0x10,%esp
f01213f4:	89 85 78 fd ff ff    	mov    %eax,-0x288(%ebp)
			if ((uint32) ptr_allocations[12] != (ACTUAL_START + 3*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01213fa:	8b 85 78 fd ff ff    	mov    -0x288(%ebp),%eax
f0121400:	89 c1                	mov    %eax,%ecx
f0121402:	c7 85 80 fe ff ff 00 	movl   $0x1000,-0x180(%ebp)
f0121409:	10 00 00 
f012140c:	8b 85 80 fe ff ff    	mov    -0x180(%ebp),%eax
f0121412:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0121417:	89 85 7c fe ff ff    	mov    %eax,-0x184(%ebp)
f012141d:	8b 85 7c fe ff ff    	mov    -0x184(%ebp),%eax
f0121423:	ba 00 00 00 00       	mov    $0x0,%edx
f0121428:	f7 b5 80 fe ff ff    	divl   -0x180(%ebp)
f012142e:	8b 85 7c fe ff ff    	mov    -0x184(%ebp),%eax
f0121434:	29 d0                	sub    %edx,%eax
f0121436:	89 c3                	mov    %eax,%ebx
f0121438:	c7 85 78 fe ff ff 00 	movl   $0x1000,-0x188(%ebp)
f012143f:	10 00 00 
f0121442:	a0 40 26 78 f0       	mov    0xf0782640,%al
f0121447:	0f b6 d0             	movzbl %al,%edx
f012144a:	8b 85 78 fe ff ff    	mov    -0x188(%ebp),%eax
f0121450:	01 d0                	add    %edx,%eax
f0121452:	48                   	dec    %eax
f0121453:	89 85 74 fe ff ff    	mov    %eax,-0x18c(%ebp)
f0121459:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f012145f:	ba 00 00 00 00       	mov    $0x0,%edx
f0121464:	f7 b5 78 fe ff ff    	divl   -0x188(%ebp)
f012146a:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f0121470:	29 d0                	sub    %edx,%eax
f0121472:	01 c3                	add    %eax,%ebx
f0121474:	c7 85 70 fe ff ff 00 	movl   $0x1000,-0x190(%ebp)
f012147b:	10 00 00 
f012147e:	a0 40 26 78 f0       	mov    0xf0782640,%al
f0121483:	0f b6 c0             	movzbl %al,%eax
f0121486:	c1 e0 04             	shl    $0x4,%eax
f0121489:	89 c2                	mov    %eax,%edx
f012148b:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f0121491:	01 d0                	add    %edx,%eax
f0121493:	48                   	dec    %eax
f0121494:	89 85 6c fe ff ff    	mov    %eax,-0x194(%ebp)
f012149a:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f01214a0:	ba 00 00 00 00       	mov    $0x0,%edx
f01214a5:	f7 b5 70 fe ff ff    	divl   -0x190(%ebp)
f01214ab:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f01214b1:	29 d0                	sub    %edx,%eax
f01214b3:	01 d8                	add    %ebx,%eax
f01214b5:	2d 00 c0 cf 09       	sub    $0x9cfc000,%eax
f01214ba:	39 c1                	cmp    %eax,%ecx
f01214bc:	74 17                	je     f01214d5 <test_kfree+0x16e4>
f01214be:	83 ec 04             	sub    $0x4,%esp
f01214c1:	68 60 b4 13 f0       	push   $0xf013b460
f01214c6:	68 bc 05 00 00       	push   $0x5bc
f01214cb:	68 7a b3 13 f0       	push   $0xf013b37a
f01214d0:	e8 30 ed fd ff       	call   f0100205 <_panic>
			if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01214d5:	e8 ee 28 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f01214da:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f01214dd:	74 17                	je     f01214f6 <test_kfree+0x1705>
f01214df:	83 ec 04             	sub    $0x4,%esp
f01214e2:	68 94 b3 13 f0       	push   $0xf013b394
f01214e7:	68 bd 05 00 00       	push   $0x5bd
f01214ec:	68 7a b3 13 f0       	push   $0xf013b37a
f01214f1:	e8 0f ed fd ff       	call   f0100205 <_panic>
			if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f01214f6:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f01214f9:	e8 9f b6 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f01214fe:	29 c3                	sub    %eax,%ebx
f0121500:	89 d8                	mov    %ebx,%eax
f0121502:	83 f8 01             	cmp    $0x1,%eax
f0121505:	74 17                	je     f012151e <test_kfree+0x172d>
f0121507:	83 ec 04             	sub    $0x4,%esp
f012150a:	68 fc b3 13 f0       	push   $0xf013b3fc
f012150f:	68 be 05 00 00       	push   $0x5be
f0121514:	68 7a b3 13 f0       	push   $0xf013b37a
f0121519:	e8 e7 ec fd ff       	call   f0100205 <_panic>
			lastIndices[12] = (2*kilo)/sizeof(char) - 1;
f012151e:	c7 85 18 fe ff ff ff 	movl   $0x7ff,-0x1e8(%ebp)
f0121525:	07 00 00 
			ptr = (char*)ptr_allocations[12];
f0121528:	8b 85 78 fd ff ff    	mov    -0x288(%ebp),%eax
f012152e:	89 45 80             	mov    %eax,-0x80(%ebp)
			for (i = 0; i < lastIndices[12]; ++i)
f0121531:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0121538:	eb 0e                	jmp    f0121548 <test_kfree+0x1757>
			{
				ptr[i] = 9 ;
f012153a:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012153d:	8b 45 80             	mov    -0x80(%ebp),%eax
f0121540:	01 d0                	add    %edx,%eax
f0121542:	c6 00 09             	movb   $0x9,(%eax)
			if ((uint32) ptr_allocations[12] != (ACTUAL_START + 3*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
			if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
			if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
			lastIndices[12] = (2*kilo)/sizeof(char) - 1;
			ptr = (char*)ptr_allocations[12];
			for (i = 0; i < lastIndices[12]; ++i)
f0121545:	ff 45 f4             	incl   -0xc(%ebp)
f0121548:	8b 85 18 fe ff ff    	mov    -0x1e8(%ebp),%eax
f012154e:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0121551:	7f e7                	jg     f012153a <test_kfree+0x1749>
			{
				ptr[i] = 9 ;
			}

			//1 MB
			freeFrames = sys_calculate_free_frames() ;
f0121553:	e8 45 b6 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0121558:	89 45 d0             	mov    %eax,-0x30(%ebp)
			freeDiskFrames = pf_calculate_free_frames() ;
f012155b:	e8 68 28 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0121560:	89 45 cc             	mov    %eax,-0x34(%ebp)
			ptr_allocations[13] = kmalloc(1*Mega);
f0121563:	83 ec 0c             	sub    $0xc,%esp
f0121566:	68 00 00 10 00       	push   $0x100000
f012156b:	e8 15 63 fe ff       	call   f0107885 <kmalloc>
f0121570:	83 c4 10             	add    $0x10,%esp
f0121573:	89 85 7c fd ff ff    	mov    %eax,-0x284(%ebp)
			if ((uint32) ptr_allocations[13] != (ACTUAL_START + 3*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0121579:	8b 85 7c fd ff ff    	mov    -0x284(%ebp),%eax
f012157f:	89 c1                	mov    %eax,%ecx
f0121581:	c7 85 68 fe ff ff 00 	movl   $0x1000,-0x198(%ebp)
f0121588:	10 00 00 
f012158b:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f0121591:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0121596:	89 85 64 fe ff ff    	mov    %eax,-0x19c(%ebp)
f012159c:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f01215a2:	ba 00 00 00 00       	mov    $0x0,%edx
f01215a7:	f7 b5 68 fe ff ff    	divl   -0x198(%ebp)
f01215ad:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f01215b3:	29 d0                	sub    %edx,%eax
f01215b5:	89 c3                	mov    %eax,%ebx
f01215b7:	c7 85 60 fe ff ff 00 	movl   $0x1000,-0x1a0(%ebp)
f01215be:	10 00 00 
f01215c1:	a0 40 26 78 f0       	mov    0xf0782640,%al
f01215c6:	0f b6 d0             	movzbl %al,%edx
f01215c9:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f01215cf:	01 d0                	add    %edx,%eax
f01215d1:	48                   	dec    %eax
f01215d2:	89 85 5c fe ff ff    	mov    %eax,-0x1a4(%ebp)
f01215d8:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f01215de:	ba 00 00 00 00       	mov    $0x0,%edx
f01215e3:	f7 b5 60 fe ff ff    	divl   -0x1a0(%ebp)
f01215e9:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f01215ef:	29 d0                	sub    %edx,%eax
f01215f1:	01 c3                	add    %eax,%ebx
f01215f3:	c7 85 58 fe ff ff 00 	movl   $0x1000,-0x1a8(%ebp)
f01215fa:	10 00 00 
f01215fd:	a0 40 26 78 f0       	mov    0xf0782640,%al
f0121602:	0f b6 c0             	movzbl %al,%eax
f0121605:	c1 e0 04             	shl    $0x4,%eax
f0121608:	89 c2                	mov    %eax,%edx
f012160a:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f0121610:	01 d0                	add    %edx,%eax
f0121612:	48                   	dec    %eax
f0121613:	89 85 54 fe ff ff    	mov    %eax,-0x1ac(%ebp)
f0121619:	8b 85 54 fe ff ff    	mov    -0x1ac(%ebp),%eax
f012161f:	ba 00 00 00 00       	mov    $0x0,%edx
f0121624:	f7 b5 58 fe ff ff    	divl   -0x1a8(%ebp)
f012162a:	8b 85 54 fe ff ff    	mov    -0x1ac(%ebp),%eax
f0121630:	29 d0                	sub    %edx,%eax
f0121632:	01 d8                	add    %ebx,%eax
f0121634:	2d 00 b0 cf 09       	sub    $0x9cfb000,%eax
f0121639:	39 c1                	cmp    %eax,%ecx
f012163b:	74 17                	je     f0121654 <test_kfree+0x1863>
f012163d:	83 ec 04             	sub    $0x4,%esp
f0121640:	68 60 b4 13 f0       	push   $0xf013b460
f0121645:	68 ca 05 00 00       	push   $0x5ca
f012164a:	68 7a b3 13 f0       	push   $0xf013b37a
f012164f:	e8 b1 eb fd ff       	call   f0100205 <_panic>
			if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0121654:	e8 6f 27 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0121659:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f012165c:	74 17                	je     f0121675 <test_kfree+0x1884>
f012165e:	83 ec 04             	sub    $0x4,%esp
f0121661:	68 94 b3 13 f0       	push   $0xf013b394
f0121666:	68 cb 05 00 00       	push   $0x5cb
f012166b:	68 7a b3 13 f0       	push   $0xf013b37a
f0121670:	e8 90 eb fd ff       	call   f0100205 <_panic>
			if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: pages are not loaded successfully into memory");
f0121675:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0121678:	e8 20 b5 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f012167d:	29 c3                	sub    %eax,%ebx
f012167f:	89 d8                	mov    %ebx,%eax
f0121681:	3d 00 01 00 00       	cmp    $0x100,%eax
f0121686:	74 17                	je     f012169f <test_kfree+0x18ae>
f0121688:	83 ec 04             	sub    $0x4,%esp
f012168b:	68 fc b3 13 f0       	push   $0xf013b3fc
f0121690:	68 cc 05 00 00       	push   $0x5cc
f0121695:	68 7a b3 13 f0       	push   $0xf013b37a
f012169a:	e8 66 eb fd ff       	call   f0100205 <_panic>
			lastIndices[13] = (1*Mega)/sizeof(char) - 1;
f012169f:	c7 85 1c fe ff ff ff 	movl   $0xfffff,-0x1e4(%ebp)
f01216a6:	ff 0f 00 
			ptr = (char*)ptr_allocations[13];
f01216a9:	8b 85 7c fd ff ff    	mov    -0x284(%ebp),%eax
f01216af:	89 45 80             	mov    %eax,-0x80(%ebp)
			for (i = 0; i < lastIndices[13]; ++i)
f01216b2:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01216b9:	eb 0e                	jmp    f01216c9 <test_kfree+0x18d8>
			{
				ptr[i] = 10 ;
f01216bb:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01216be:	8b 45 80             	mov    -0x80(%ebp),%eax
f01216c1:	01 d0                	add    %edx,%eax
f01216c3:	c6 00 0a             	movb   $0xa,(%eax)
			if ((uint32) ptr_allocations[13] != (ACTUAL_START + 3*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
			if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
			if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: pages are not loaded successfully into memory");
			lastIndices[13] = (1*Mega)/sizeof(char) - 1;
			ptr = (char*)ptr_allocations[13];
			for (i = 0; i < lastIndices[13]; ++i)
f01216c6:	ff 45 f4             	incl   -0xc(%ebp)
f01216c9:	8b 85 1c fe ff ff    	mov    -0x1e4(%ebp),%eax
f01216cf:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01216d2:	7f e7                	jg     f01216bb <test_kfree+0x18ca>
			{
				ptr[i] = 10 ;
			}
		}
	}
	cprintf("\b\b\b45%");
f01216d4:	83 ec 0c             	sub    $0xc,%esp
f01216d7:	68 9a bb 13 f0       	push   $0xf013bb9a
f01216dc:	e8 2d f6 fd ff       	call   f0100d0e <cprintf>
f01216e1:	83 c4 10             	add    $0x10,%esp

	//kfree remaining allocated spaces [15%]
	{
		//kfree 7 KB
		freeFrames = sys_calculate_free_frames() ;
f01216e4:	e8 b4 b4 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f01216e9:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01216ec:	e8 d7 26 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f01216f1:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[4]);
f01216f4:	8b 85 58 fd ff ff    	mov    -0x2a8(%ebp),%eax
f01216fa:	83 ec 0c             	sub    $0xc,%esp
f01216fd:	50                   	push   %eax
f01216fe:	e8 4d 62 fe ff       	call   f0107950 <kfree>
f0121703:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0121706:	e8 bd 26 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f012170b:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f012170e:	74 17                	je     f0121727 <test_kfree+0x1936>
f0121710:	83 ec 04             	sub    $0x4,%esp
f0121713:	68 94 b3 13 f0       	push   $0xf013b394
f0121718:	68 dd 05 00 00       	push   $0x5dd
f012171d:	68 7a b3 13 f0       	push   $0xf013b37a
f0121722:	e8 de ea fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 2) panic("Wrong kfree: pages in memory are not freed correctly");
f0121727:	e8 71 b4 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f012172c:	89 c2                	mov    %eax,%edx
f012172e:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0121731:	29 c2                	sub    %eax,%edx
f0121733:	89 d0                	mov    %edx,%eax
f0121735:	83 f8 02             	cmp    $0x2,%eax
f0121738:	74 17                	je     f0121751 <test_kfree+0x1960>
f012173a:	83 ec 04             	sub    $0x4,%esp
f012173d:	68 04 bb 13 f0       	push   $0xf013bb04
f0121742:	68 de 05 00 00       	push   $0x5de
f0121747:	68 7a b3 13 f0       	push   $0xf013b37a
f012174c:	e8 b4 ea fd ff       	call   f0100205 <_panic>

		//kfree 3 MB
		freeFrames = sys_calculate_free_frames() ;
f0121751:	e8 47 b4 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0121756:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0121759:	e8 6a 26 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f012175e:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[5]);
f0121761:	8b 85 5c fd ff ff    	mov    -0x2a4(%ebp),%eax
f0121767:	83 ec 0c             	sub    $0xc,%esp
f012176a:	50                   	push   %eax
f012176b:	e8 e0 61 fe ff       	call   f0107950 <kfree>
f0121770:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0121773:	e8 50 26 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0121778:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f012177b:	74 17                	je     f0121794 <test_kfree+0x19a3>
f012177d:	83 ec 04             	sub    $0x4,%esp
f0121780:	68 94 b3 13 f0       	push   $0xf013b394
f0121785:	68 e4 05 00 00       	push   $0x5e4
f012178a:	68 7a b3 13 f0       	push   $0xf013b37a
f012178f:	e8 71 ea fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 3*Mega/4096) panic("Wrong kfree: pages in memory are not freed correctly");
f0121794:	e8 04 b4 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0121799:	89 c2                	mov    %eax,%edx
f012179b:	8b 45 d0             	mov    -0x30(%ebp),%eax
f012179e:	29 c2                	sub    %eax,%edx
f01217a0:	89 d0                	mov    %edx,%eax
f01217a2:	3d 00 03 00 00       	cmp    $0x300,%eax
f01217a7:	74 17                	je     f01217c0 <test_kfree+0x19cf>
f01217a9:	83 ec 04             	sub    $0x4,%esp
f01217ac:	68 04 bb 13 f0       	push   $0xf013bb04
f01217b1:	68 e5 05 00 00       	push   $0x5e5
f01217b6:	68 7a b3 13 f0       	push   $0xf013b37a
f01217bb:	e8 45 ea fd ff       	call   f0100205 <_panic>

		//kfree 2nd 2 KB
		freeFrames = sys_calculate_free_frames() ;
f01217c0:	e8 d8 b3 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f01217c5:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01217c8:	e8 fb 25 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f01217cd:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[3]);
f01217d0:	8b 85 54 fd ff ff    	mov    -0x2ac(%ebp),%eax
f01217d6:	83 ec 0c             	sub    $0xc,%esp
f01217d9:	50                   	push   %eax
f01217da:	e8 71 61 fe ff       	call   f0107950 <kfree>
f01217df:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01217e2:	e8 e1 25 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f01217e7:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f01217ea:	74 17                	je     f0121803 <test_kfree+0x1a12>
f01217ec:	83 ec 04             	sub    $0x4,%esp
f01217ef:	68 94 b3 13 f0       	push   $0xf013b394
f01217f4:	68 eb 05 00 00       	push   $0x5eb
f01217f9:	68 7a b3 13 f0       	push   $0xf013b37a
f01217fe:	e8 02 ea fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 1) panic("Wrong kfree: pages in memory are not freed correctly");
f0121803:	e8 95 b3 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0121808:	89 c2                	mov    %eax,%edx
f012180a:	8b 45 d0             	mov    -0x30(%ebp),%eax
f012180d:	29 c2                	sub    %eax,%edx
f012180f:	89 d0                	mov    %edx,%eax
f0121811:	83 f8 01             	cmp    $0x1,%eax
f0121814:	74 17                	je     f012182d <test_kfree+0x1a3c>
f0121816:	83 ec 04             	sub    $0x4,%esp
f0121819:	68 04 bb 13 f0       	push   $0xf013bb04
f012181e:	68 ec 05 00 00       	push   $0x5ec
f0121823:	68 7a b3 13 f0       	push   $0xf013b37a
f0121828:	e8 d8 e9 fd ff       	call   f0100205 <_panic>

		//kfree 14 KB
		freeFrames = sys_calculate_free_frames() ;
f012182d:	e8 6b b3 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0121832:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0121835:	e8 8e 25 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f012183a:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[7]);
f012183d:	8b 85 64 fd ff ff    	mov    -0x29c(%ebp),%eax
f0121843:	83 ec 0c             	sub    $0xc,%esp
f0121846:	50                   	push   %eax
f0121847:	e8 04 61 fe ff       	call   f0107950 <kfree>
f012184c:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012184f:	e8 74 25 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0121854:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0121857:	74 17                	je     f0121870 <test_kfree+0x1a7f>
f0121859:	83 ec 04             	sub    $0x4,%esp
f012185c:	68 94 b3 13 f0       	push   $0xf013b394
f0121861:	68 f2 05 00 00       	push   $0x5f2
f0121866:	68 7a b3 13 f0       	push   $0xf013b37a
f012186b:	e8 95 e9 fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 4) panic("Wrong kfree: pages in memory are not freed correctly");
f0121870:	e8 28 b3 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0121875:	89 c2                	mov    %eax,%edx
f0121877:	8b 45 d0             	mov    -0x30(%ebp),%eax
f012187a:	29 c2                	sub    %eax,%edx
f012187c:	89 d0                	mov    %edx,%eax
f012187e:	83 f8 04             	cmp    $0x4,%eax
f0121881:	74 17                	je     f012189a <test_kfree+0x1aa9>
f0121883:	83 ec 04             	sub    $0x4,%esp
f0121886:	68 04 bb 13 f0       	push   $0xf013bb04
f012188b:	68 f3 05 00 00       	push   $0x5f3
f0121890:	68 7a b3 13 f0       	push   $0xf013b37a
f0121895:	e8 6b e9 fd ff       	call   f0100205 <_panic>

		//kfree 20 KB
		freeFrames = sys_calculate_free_frames() ;
f012189a:	e8 fe b2 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f012189f:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01218a2:	e8 21 25 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f01218a7:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[8]);
f01218aa:	8b 85 68 fd ff ff    	mov    -0x298(%ebp),%eax
f01218b0:	83 ec 0c             	sub    $0xc,%esp
f01218b3:	50                   	push   %eax
f01218b4:	e8 97 60 fe ff       	call   f0107950 <kfree>
f01218b9:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01218bc:	e8 07 25 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f01218c1:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f01218c4:	74 17                	je     f01218dd <test_kfree+0x1aec>
f01218c6:	83 ec 04             	sub    $0x4,%esp
f01218c9:	68 94 b3 13 f0       	push   $0xf013b394
f01218ce:	68 f9 05 00 00       	push   $0x5f9
f01218d3:	68 7a b3 13 f0       	push   $0xf013b37a
f01218d8:	e8 28 e9 fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 5) panic("Wrong kfree: pages in memory are not freed correctly");
f01218dd:	e8 bb b2 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f01218e2:	89 c2                	mov    %eax,%edx
f01218e4:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01218e7:	29 c2                	sub    %eax,%edx
f01218e9:	89 d0                	mov    %edx,%eax
f01218eb:	83 f8 05             	cmp    $0x5,%eax
f01218ee:	74 17                	je     f0121907 <test_kfree+0x1b16>
f01218f0:	83 ec 04             	sub    $0x4,%esp
f01218f3:	68 04 bb 13 f0       	push   $0xf013bb04
f01218f8:	68 fa 05 00 00       	push   $0x5fa
f01218fd:	68 7a b3 13 f0       	push   $0xf013b37a
f0121902:	e8 fe e8 fd ff       	call   f0100205 <_panic>

		//kfree 1 MB
		freeFrames = sys_calculate_free_frames() ;
f0121907:	e8 91 b2 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f012190c:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012190f:	e8 b4 24 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0121914:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[9]);
f0121917:	8b 85 6c fd ff ff    	mov    -0x294(%ebp),%eax
f012191d:	83 ec 0c             	sub    $0xc,%esp
f0121920:	50                   	push   %eax
f0121921:	e8 2a 60 fe ff       	call   f0107950 <kfree>
f0121926:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0121929:	e8 9a 24 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f012192e:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0121931:	74 17                	je     f012194a <test_kfree+0x1b59>
f0121933:	83 ec 04             	sub    $0x4,%esp
f0121936:	68 94 b3 13 f0       	push   $0xf013b394
f012193b:	68 00 06 00 00       	push   $0x600
f0121940:	68 7a b3 13 f0       	push   $0xf013b37a
f0121945:	e8 bb e8 fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 256) panic("Wrong kfree: pages in memory are not freed correctly");
f012194a:	e8 4e b2 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f012194f:	89 c2                	mov    %eax,%edx
f0121951:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0121954:	29 c2                	sub    %eax,%edx
f0121956:	89 d0                	mov    %edx,%eax
f0121958:	3d 00 01 00 00       	cmp    $0x100,%eax
f012195d:	74 17                	je     f0121976 <test_kfree+0x1b85>
f012195f:	83 ec 04             	sub    $0x4,%esp
f0121962:	68 04 bb 13 f0       	push   $0xf013bb04
f0121967:	68 01 06 00 00       	push   $0x601
f012196c:	68 7a b3 13 f0       	push   $0xf013b37a
f0121971:	e8 8f e8 fd ff       	call   f0100205 <_panic>

		if (isKHeapPlacementStrategyNEXTFIT())
f0121976:	e8 51 5d ff ff       	call   f01176cc <isKHeapPlacementStrategyNEXTFIT>
f012197b:	84 c0                	test   %al,%al
f012197d:	0f 84 80 02 00 00    	je     f0121c03 <test_kfree+0x1e12>
		{
			//cprintf("FREE in NEXT FIT\n");
			//kfree Remaining MBs
			freeFrames = sys_calculate_free_frames() ;
f0121983:	e8 15 b2 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0121988:	89 45 d0             	mov    %eax,-0x30(%ebp)
			freeDiskFrames = pf_calculate_free_frames() ;
f012198b:	e8 38 24 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0121990:	89 45 cc             	mov    %eax,-0x34(%ebp)
			kfree(ptr_allocations[10]);
f0121993:	8b 85 70 fd ff ff    	mov    -0x290(%ebp),%eax
f0121999:	83 ec 0c             	sub    $0xc,%esp
f012199c:	50                   	push   %eax
f012199d:	e8 ae 5f fe ff       	call   f0107950 <kfree>
f01219a2:	83 c4 10             	add    $0x10,%esp
			uint32 reqAllocatedSpace = KERNEL_HEAP_MAX - (ACTUAL_START + 13*Mega + 52*kilo + 1*Mega);
f01219a5:	c7 85 50 fe ff ff 00 	movl   $0x1000,-0x1b0(%ebp)
f01219ac:	10 00 00 
f01219af:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f01219b5:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01219ba:	89 85 4c fe ff ff    	mov    %eax,-0x1b4(%ebp)
f01219c0:	8b 85 4c fe ff ff    	mov    -0x1b4(%ebp),%eax
f01219c6:	ba 00 00 00 00       	mov    $0x0,%edx
f01219cb:	f7 b5 50 fe ff ff    	divl   -0x1b0(%ebp)
f01219d1:	8b 85 4c fe ff ff    	mov    -0x1b4(%ebp),%eax
f01219d7:	29 d0                	sub    %edx,%eax
f01219d9:	89 c1                	mov    %eax,%ecx
f01219db:	c7 85 48 fe ff ff 00 	movl   $0x1000,-0x1b8(%ebp)
f01219e2:	10 00 00 
f01219e5:	a0 40 26 78 f0       	mov    0xf0782640,%al
f01219ea:	0f b6 d0             	movzbl %al,%edx
f01219ed:	8b 85 48 fe ff ff    	mov    -0x1b8(%ebp),%eax
f01219f3:	01 d0                	add    %edx,%eax
f01219f5:	48                   	dec    %eax
f01219f6:	89 85 44 fe ff ff    	mov    %eax,-0x1bc(%ebp)
f01219fc:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f0121a02:	ba 00 00 00 00       	mov    $0x0,%edx
f0121a07:	f7 b5 48 fe ff ff    	divl   -0x1b8(%ebp)
f0121a0d:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f0121a13:	29 d0                	sub    %edx,%eax
f0121a15:	01 c1                	add    %eax,%ecx
f0121a17:	c7 85 40 fe ff ff 00 	movl   $0x1000,-0x1c0(%ebp)
f0121a1e:	10 00 00 
f0121a21:	a0 40 26 78 f0       	mov    0xf0782640,%al
f0121a26:	0f b6 c0             	movzbl %al,%eax
f0121a29:	c1 e0 04             	shl    $0x4,%eax
f0121a2c:	89 c2                	mov    %eax,%edx
f0121a2e:	8b 85 40 fe ff ff    	mov    -0x1c0(%ebp),%eax
f0121a34:	01 d0                	add    %edx,%eax
f0121a36:	48                   	dec    %eax
f0121a37:	89 85 3c fe ff ff    	mov    %eax,-0x1c4(%ebp)
f0121a3d:	8b 85 3c fe ff ff    	mov    -0x1c4(%ebp),%eax
f0121a43:	ba 00 00 00 00       	mov    $0x0,%edx
f0121a48:	f7 b5 40 fe ff ff    	divl   -0x1c0(%ebp)
f0121a4e:	8b 85 3c fe ff ff    	mov    -0x1c4(%ebp),%eax
f0121a54:	29 d0                	sub    %edx,%eax
f0121a56:	01 c8                	add    %ecx,%eax
f0121a58:	ba 00 e0 1e 09       	mov    $0x91ee000,%edx
f0121a5d:	29 c2                	sub    %eax,%edx
f0121a5f:	89 d0                	mov    %edx,%eax
f0121a61:	89 85 38 fe ff ff    	mov    %eax,-0x1c8(%ebp)
			if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0121a67:	e8 5c 23 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0121a6c:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0121a6f:	74 17                	je     f0121a88 <test_kfree+0x1c97>
f0121a71:	83 ec 04             	sub    $0x4,%esp
f0121a74:	68 94 b3 13 f0       	push   $0xf013b394
f0121a79:	68 0b 06 00 00       	push   $0x60b
f0121a7e:	68 7a b3 13 f0       	push   $0xf013b37a
f0121a83:	e8 7d e7 fd ff       	call   f0100205 <_panic>
			if ((sys_calculate_free_frames() - freeFrames) != reqAllocatedSpace/PAGE_SIZE) panic("Wrong kfree: pages in memory are not freed correctly");
f0121a88:	e8 10 b1 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0121a8d:	89 c2                	mov    %eax,%edx
f0121a8f:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0121a92:	29 c2                	sub    %eax,%edx
f0121a94:	8b 85 38 fe ff ff    	mov    -0x1c8(%ebp),%eax
f0121a9a:	c1 e8 0c             	shr    $0xc,%eax
f0121a9d:	39 c2                	cmp    %eax,%edx
f0121a9f:	74 17                	je     f0121ab8 <test_kfree+0x1cc7>
f0121aa1:	83 ec 04             	sub    $0x4,%esp
f0121aa4:	68 04 bb 13 f0       	push   $0xf013bb04
f0121aa9:	68 0c 06 00 00       	push   $0x60c
f0121aae:	68 7a b3 13 f0       	push   $0xf013b37a
f0121ab3:	e8 4d e7 fd ff       	call   f0100205 <_panic>

			//kfree 3 MB
			freeFrames = sys_calculate_free_frames() ;
f0121ab8:	e8 e0 b0 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0121abd:	89 45 d0             	mov    %eax,-0x30(%ebp)
			freeDiskFrames = pf_calculate_free_frames() ;
f0121ac0:	e8 03 23 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0121ac5:	89 45 cc             	mov    %eax,-0x34(%ebp)
			kfree(ptr_allocations[11]);
f0121ac8:	8b 85 74 fd ff ff    	mov    -0x28c(%ebp),%eax
f0121ace:	83 ec 0c             	sub    $0xc,%esp
f0121ad1:	50                   	push   %eax
f0121ad2:	e8 79 5e fe ff       	call   f0107950 <kfree>
f0121ad7:	83 c4 10             	add    $0x10,%esp
			if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0121ada:	e8 e9 22 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0121adf:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0121ae2:	74 17                	je     f0121afb <test_kfree+0x1d0a>
f0121ae4:	83 ec 04             	sub    $0x4,%esp
f0121ae7:	68 94 b3 13 f0       	push   $0xf013b394
f0121aec:	68 12 06 00 00       	push   $0x612
f0121af1:	68 7a b3 13 f0       	push   $0xf013b37a
f0121af6:	e8 0a e7 fd ff       	call   f0100205 <_panic>
			if ((sys_calculate_free_frames() - freeFrames) != 3*Mega/4096) panic("Wrong kfree: pages in memory are not freed correctly");
f0121afb:	e8 9d b0 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0121b00:	89 c2                	mov    %eax,%edx
f0121b02:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0121b05:	29 c2                	sub    %eax,%edx
f0121b07:	89 d0                	mov    %edx,%eax
f0121b09:	3d 00 03 00 00       	cmp    $0x300,%eax
f0121b0e:	74 17                	je     f0121b27 <test_kfree+0x1d36>
f0121b10:	83 ec 04             	sub    $0x4,%esp
f0121b13:	68 04 bb 13 f0       	push   $0xf013bb04
f0121b18:	68 13 06 00 00       	push   $0x613
f0121b1d:	68 7a b3 13 f0       	push   $0xf013b37a
f0121b22:	e8 de e6 fd ff       	call   f0100205 <_panic>

			//kfree 2 KB
			freeFrames = sys_calculate_free_frames() ;
f0121b27:	e8 71 b0 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0121b2c:	89 45 d0             	mov    %eax,-0x30(%ebp)
			freeDiskFrames = pf_calculate_free_frames() ;
f0121b2f:	e8 94 22 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0121b34:	89 45 cc             	mov    %eax,-0x34(%ebp)
			kfree(ptr_allocations[12]);
f0121b37:	8b 85 78 fd ff ff    	mov    -0x288(%ebp),%eax
f0121b3d:	83 ec 0c             	sub    $0xc,%esp
f0121b40:	50                   	push   %eax
f0121b41:	e8 0a 5e fe ff       	call   f0107950 <kfree>
f0121b46:	83 c4 10             	add    $0x10,%esp
			if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0121b49:	e8 7a 22 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0121b4e:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0121b51:	74 17                	je     f0121b6a <test_kfree+0x1d79>
f0121b53:	83 ec 04             	sub    $0x4,%esp
f0121b56:	68 94 b3 13 f0       	push   $0xf013b394
f0121b5b:	68 19 06 00 00       	push   $0x619
f0121b60:	68 7a b3 13 f0       	push   $0xf013b37a
f0121b65:	e8 9b e6 fd ff       	call   f0100205 <_panic>
			if ((sys_calculate_free_frames() - freeFrames) != 1) panic("Wrong kfree: pages in memory are not freed correctly");
f0121b6a:	e8 2e b0 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0121b6f:	89 c2                	mov    %eax,%edx
f0121b71:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0121b74:	29 c2                	sub    %eax,%edx
f0121b76:	89 d0                	mov    %edx,%eax
f0121b78:	83 f8 01             	cmp    $0x1,%eax
f0121b7b:	74 17                	je     f0121b94 <test_kfree+0x1da3>
f0121b7d:	83 ec 04             	sub    $0x4,%esp
f0121b80:	68 04 bb 13 f0       	push   $0xf013bb04
f0121b85:	68 1a 06 00 00       	push   $0x61a
f0121b8a:	68 7a b3 13 f0       	push   $0xf013b37a
f0121b8f:	e8 71 e6 fd ff       	call   f0100205 <_panic>

			//kfree 1 MB
			freeFrames = sys_calculate_free_frames() ;
f0121b94:	e8 04 b0 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0121b99:	89 45 d0             	mov    %eax,-0x30(%ebp)
			freeDiskFrames = pf_calculate_free_frames() ;
f0121b9c:	e8 27 22 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0121ba1:	89 45 cc             	mov    %eax,-0x34(%ebp)
			kfree(ptr_allocations[13]);
f0121ba4:	8b 85 7c fd ff ff    	mov    -0x284(%ebp),%eax
f0121baa:	83 ec 0c             	sub    $0xc,%esp
f0121bad:	50                   	push   %eax
f0121bae:	e8 9d 5d fe ff       	call   f0107950 <kfree>
f0121bb3:	83 c4 10             	add    $0x10,%esp
			if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0121bb6:	e8 0d 22 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0121bbb:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0121bbe:	74 17                	je     f0121bd7 <test_kfree+0x1de6>
f0121bc0:	83 ec 04             	sub    $0x4,%esp
f0121bc3:	68 94 b3 13 f0       	push   $0xf013b394
f0121bc8:	68 20 06 00 00       	push   $0x620
f0121bcd:	68 7a b3 13 f0       	push   $0xf013b37a
f0121bd2:	e8 2e e6 fd ff       	call   f0100205 <_panic>
			if ((sys_calculate_free_frames() - freeFrames) != 1*Mega/4096) panic("Wrong kfree: pages in memory are not freed correctly");
f0121bd7:	e8 c1 af fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0121bdc:	89 c2                	mov    %eax,%edx
f0121bde:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0121be1:	29 c2                	sub    %eax,%edx
f0121be3:	89 d0                	mov    %edx,%eax
f0121be5:	3d 00 01 00 00       	cmp    $0x100,%eax
f0121bea:	74 17                	je     f0121c03 <test_kfree+0x1e12>
f0121bec:	83 ec 04             	sub    $0x4,%esp
f0121bef:	68 04 bb 13 f0       	push   $0xf013bb04
f0121bf4:	68 21 06 00 00       	push   $0x621
f0121bf9:	68 7a b3 13 f0       	push   $0xf013b37a
f0121bfe:	e8 02 e6 fd ff       	call   f0100205 <_panic>

		}
		if(start_freeFrames != (sys_calculate_free_frames())) {panic("Wrong kfree: not all pages removed correctly at end");}
f0121c03:	e8 95 af fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0121c08:	89 c2                	mov    %eax,%edx
f0121c0a:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0121c0d:	39 c2                	cmp    %eax,%edx
f0121c0f:	74 17                	je     f0121c28 <test_kfree+0x1e37>
f0121c11:	83 ec 04             	sub    $0x4,%esp
f0121c14:	68 a4 bb 13 f0       	push   $0xf013bba4
f0121c19:	68 24 06 00 00       	push   $0x624
f0121c1e:	68 7a b3 13 f0       	push   $0xf013b37a
f0121c23:	e8 dd e5 fd ff       	call   f0100205 <_panic>
	}
	cprintf("\b\b\b60%");
f0121c28:	83 ec 0c             	sub    $0xc,%esp
f0121c2b:	68 d8 bb 13 f0       	push   $0xf013bbd8
f0121c30:	e8 d9 f0 fd ff       	call   f0100d0e <cprintf>
f0121c35:	83 c4 10             	add    $0x10,%esp

	//Check memory access after kfree [15%]
	{
		//Bypass the PAGE FAULT on <MOVB immediate, reg> instruction by setting its length
		//and continue executing the remaining code
		sys_bypassPageFault(3);
f0121c38:	83 ec 0c             	sub    $0xc,%esp
f0121c3b:	6a 03                	push   $0x3
f0121c3d:	e8 fb b3 fe ff       	call   f010d03d <sys_bypassPageFault>
f0121c42:	83 c4 10             	add    $0x10,%esp

		for (i = 0; i < 10; ++i)
f0121c45:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0121c4c:	e9 82 00 00 00       	jmp    f0121cd3 <test_kfree+0x1ee2>
		{
			ptr = (char *) ptr_allocations[i];
f0121c51:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0121c54:	8b 84 85 48 fd ff ff 	mov    -0x2b8(%ebp,%eax,4),%eax
f0121c5b:	89 45 80             	mov    %eax,-0x80(%ebp)
			ptr[0] = 10;
f0121c5e:	8b 45 80             	mov    -0x80(%ebp),%eax
f0121c61:	c6 00 0a             	movb   $0xa,(%eax)
			//cprintf("\n\ncr2 = %x, faulted addr = %x", sys_rcr2(), (uint32)&(ptr[0]));
			if (sys_rcr2() != (uint32)&(ptr[0])) panic("kfree: successful access to freed space!! it should not be succeeded");
f0121c64:	e8 c2 b3 fe ff       	call   f010d02b <sys_rcr2>
f0121c69:	89 c2                	mov    %eax,%edx
f0121c6b:	8b 45 80             	mov    -0x80(%ebp),%eax
f0121c6e:	39 c2                	cmp    %eax,%edx
f0121c70:	74 17                	je     f0121c89 <test_kfree+0x1e98>
f0121c72:	83 ec 04             	sub    $0x4,%esp
f0121c75:	68 e0 bb 13 f0       	push   $0xf013bbe0
f0121c7a:	68 33 06 00 00       	push   $0x633
f0121c7f:	68 7a b3 13 f0       	push   $0xf013b37a
f0121c84:	e8 7c e5 fd ff       	call   f0100205 <_panic>
			ptr[lastIndices[i]] = 10;
f0121c89:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0121c8c:	8b 84 85 e8 fd ff ff 	mov    -0x218(%ebp,%eax,4),%eax
f0121c93:	89 c2                	mov    %eax,%edx
f0121c95:	8b 45 80             	mov    -0x80(%ebp),%eax
f0121c98:	01 d0                	add    %edx,%eax
f0121c9a:	c6 00 0a             	movb   $0xa,(%eax)
			if (sys_rcr2() != (uint32)&(ptr[lastIndices[i]])) panic("kfree: successful access to freed space!! it should not be succeeded");
f0121c9d:	e8 89 b3 fe ff       	call   f010d02b <sys_rcr2>
f0121ca2:	89 c2                	mov    %eax,%edx
f0121ca4:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0121ca7:	8b 84 85 e8 fd ff ff 	mov    -0x218(%ebp,%eax,4),%eax
f0121cae:	89 c1                	mov    %eax,%ecx
f0121cb0:	8b 45 80             	mov    -0x80(%ebp),%eax
f0121cb3:	01 c8                	add    %ecx,%eax
f0121cb5:	39 c2                	cmp    %eax,%edx
f0121cb7:	74 17                	je     f0121cd0 <test_kfree+0x1edf>
f0121cb9:	83 ec 04             	sub    $0x4,%esp
f0121cbc:	68 e0 bb 13 f0       	push   $0xf013bbe0
f0121cc1:	68 35 06 00 00       	push   $0x635
f0121cc6:	68 7a b3 13 f0       	push   $0xf013b37a
f0121ccb:	e8 35 e5 fd ff       	call   f0100205 <_panic>
	{
		//Bypass the PAGE FAULT on <MOVB immediate, reg> instruction by setting its length
		//and continue executing the remaining code
		sys_bypassPageFault(3);

		for (i = 0; i < 10; ++i)
f0121cd0:	ff 45 f4             	incl   -0xc(%ebp)
f0121cd3:	83 7d f4 09          	cmpl   $0x9,-0xc(%ebp)
f0121cd7:	0f 8e 74 ff ff ff    	jle    f0121c51 <test_kfree+0x1e60>
			ptr[lastIndices[i]] = 10;
			if (sys_rcr2() != (uint32)&(ptr[lastIndices[i]])) panic("kfree: successful access to freed space!! it should not be succeeded");
		}

		//set it to 0 again to cancel the bypassing option
		sys_bypassPageFault(0);
f0121cdd:	83 ec 0c             	sub    $0xc,%esp
f0121ce0:	6a 00                	push   $0x0
f0121ce2:	e8 56 b3 fe ff       	call   f010d03d <sys_bypassPageFault>
f0121ce7:	83 c4 10             	add    $0x10,%esp
	}
	cprintf("\b\b\b75%");
f0121cea:	83 ec 0c             	sub    $0xc,%esp
f0121ced:	68 25 bc 13 f0       	push   $0xf013bc25
f0121cf2:	e8 17 f0 fd ff       	call   f0100d0e <cprintf>
f0121cf7:	83 c4 10             	add    $0x10,%esp

	//kfree non-exist item [10%]
	{
		//kfree 2 MB
		freeFrames = sys_calculate_free_frames() ;
f0121cfa:	e8 9e ae fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0121cff:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0121d02:	e8 c1 20 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0121d07:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[0]);
f0121d0a:	8b 85 48 fd ff ff    	mov    -0x2b8(%ebp),%eax
f0121d10:	83 ec 0c             	sub    $0xc,%esp
f0121d13:	50                   	push   %eax
f0121d14:	e8 37 5c fe ff       	call   f0107950 <kfree>
f0121d19:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0121d1c:	e8 a7 20 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0121d21:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0121d24:	74 17                	je     f0121d3d <test_kfree+0x1f4c>
f0121d26:	83 ec 04             	sub    $0x4,%esp
f0121d29:	68 94 b3 13 f0       	push   $0xf013b394
f0121d2e:	68 43 06 00 00       	push   $0x643
f0121d33:	68 7a b3 13 f0       	push   $0xf013b37a
f0121d38:	e8 c8 e4 fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 0) panic("Wrong kfree: attempt to kfree a non-existing ptr. It should do nothing");
f0121d3d:	e8 5b ae fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0121d42:	89 c2                	mov    %eax,%edx
f0121d44:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0121d47:	39 c2                	cmp    %eax,%edx
f0121d49:	74 17                	je     f0121d62 <test_kfree+0x1f71>
f0121d4b:	83 ec 04             	sub    $0x4,%esp
f0121d4e:	68 2c bc 13 f0       	push   $0xf013bc2c
f0121d53:	68 44 06 00 00       	push   $0x644
f0121d58:	68 7a b3 13 f0       	push   $0xf013b37a
f0121d5d:	e8 a3 e4 fd ff       	call   f0100205 <_panic>

		//kfree 2 KB
		freeFrames = sys_calculate_free_frames() ;
f0121d62:	e8 36 ae fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0121d67:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0121d6a:	e8 59 20 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0121d6f:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[2]);
f0121d72:	8b 85 50 fd ff ff    	mov    -0x2b0(%ebp),%eax
f0121d78:	83 ec 0c             	sub    $0xc,%esp
f0121d7b:	50                   	push   %eax
f0121d7c:	e8 cf 5b fe ff       	call   f0107950 <kfree>
f0121d81:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0121d84:	e8 3f 20 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0121d89:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0121d8c:	74 17                	je     f0121da5 <test_kfree+0x1fb4>
f0121d8e:	83 ec 04             	sub    $0x4,%esp
f0121d91:	68 94 b3 13 f0       	push   $0xf013b394
f0121d96:	68 4a 06 00 00       	push   $0x64a
f0121d9b:	68 7a b3 13 f0       	push   $0xf013b37a
f0121da0:	e8 60 e4 fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 0) panic("Wrong kfree: attempt to kfree a non-existing ptr. It should do nothing");
f0121da5:	e8 f3 ad fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0121daa:	89 c2                	mov    %eax,%edx
f0121dac:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0121daf:	39 c2                	cmp    %eax,%edx
f0121db1:	74 17                	je     f0121dca <test_kfree+0x1fd9>
f0121db3:	83 ec 04             	sub    $0x4,%esp
f0121db6:	68 2c bc 13 f0       	push   $0xf013bc2c
f0121dbb:	68 4b 06 00 00       	push   $0x64b
f0121dc0:	68 7a b3 13 f0       	push   $0xf013b37a
f0121dc5:	e8 3b e4 fd ff       	call   f0100205 <_panic>

		//kfree 20 KB
		freeFrames = sys_calculate_free_frames() ;
f0121dca:	e8 ce ad fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0121dcf:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0121dd2:	e8 f1 1f fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0121dd7:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[8]);
f0121dda:	8b 85 68 fd ff ff    	mov    -0x298(%ebp),%eax
f0121de0:	83 ec 0c             	sub    $0xc,%esp
f0121de3:	50                   	push   %eax
f0121de4:	e8 67 5b fe ff       	call   f0107950 <kfree>
f0121de9:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0121dec:	e8 d7 1f fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0121df1:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0121df4:	74 17                	je     f0121e0d <test_kfree+0x201c>
f0121df6:	83 ec 04             	sub    $0x4,%esp
f0121df9:	68 94 b3 13 f0       	push   $0xf013b394
f0121dfe:	68 51 06 00 00       	push   $0x651
f0121e03:	68 7a b3 13 f0       	push   $0xf013b37a
f0121e08:	e8 f8 e3 fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 0) panic("Wrong kfree: attempt to kfree a non-existing ptr. It should do nothing");
f0121e0d:	e8 8b ad fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0121e12:	89 c2                	mov    %eax,%edx
f0121e14:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0121e17:	39 c2                	cmp    %eax,%edx
f0121e19:	74 17                	je     f0121e32 <test_kfree+0x2041>
f0121e1b:	83 ec 04             	sub    $0x4,%esp
f0121e1e:	68 2c bc 13 f0       	push   $0xf013bc2c
f0121e23:	68 52 06 00 00       	push   $0x652
f0121e28:	68 7a b3 13 f0       	push   $0xf013b37a
f0121e2d:	e8 d3 e3 fd ff       	call   f0100205 <_panic>

		//kfree 1 MB
		freeFrames = sys_calculate_free_frames() ;
f0121e32:	e8 66 ad fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0121e37:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0121e3a:	e8 89 1f fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0121e3f:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[9]);
f0121e42:	8b 85 6c fd ff ff    	mov    -0x294(%ebp),%eax
f0121e48:	83 ec 0c             	sub    $0xc,%esp
f0121e4b:	50                   	push   %eax
f0121e4c:	e8 ff 5a fe ff       	call   f0107950 <kfree>
f0121e51:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0121e54:	e8 6f 1f fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0121e59:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0121e5c:	74 17                	je     f0121e75 <test_kfree+0x2084>
f0121e5e:	83 ec 04             	sub    $0x4,%esp
f0121e61:	68 94 b3 13 f0       	push   $0xf013b394
f0121e66:	68 58 06 00 00       	push   $0x658
f0121e6b:	68 7a b3 13 f0       	push   $0xf013b37a
f0121e70:	e8 90 e3 fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 0) panic("Wrong kfree: attempt to kfree a non-existing ptr. It should do nothing");
f0121e75:	e8 23 ad fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0121e7a:	89 c2                	mov    %eax,%edx
f0121e7c:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0121e7f:	39 c2                	cmp    %eax,%edx
f0121e81:	74 17                	je     f0121e9a <test_kfree+0x20a9>
f0121e83:	83 ec 04             	sub    $0x4,%esp
f0121e86:	68 2c bc 13 f0       	push   $0xf013bc2c
f0121e8b:	68 59 06 00 00       	push   $0x659
f0121e90:	68 7a b3 13 f0       	push   $0xf013b37a
f0121e95:	e8 6b e3 fd ff       	call   f0100205 <_panic>

	}
	cprintf("\b\b\b85%");
f0121e9a:	83 ec 0c             	sub    $0xc,%esp
f0121e9d:	68 73 bc 13 f0       	push   $0xf013bc73
f0121ea2:	e8 67 ee fd ff       	call   f0100d0e <cprintf>
f0121ea7:	83 c4 10             	add    $0x10,%esp

	//check tables	[15%]
	{
		long long va;
		for (va = KERNEL_HEAP_START; va < (long long)KERNEL_HEAP_MAX; va+=PTSIZE)
f0121eaa:	c7 45 e8 00 00 00 f6 	movl   $0xf6000000,-0x18(%ebp)
f0121eb1:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f0121eb8:	eb 48                	jmp    f0121f02 <test_kfree+0x2111>
		{
			uint32 *ptr_table ;
			get_page_table(ptr_page_directory, (uint32)va, &ptr_table);
f0121eba:	8b 55 e8             	mov    -0x18(%ebp),%edx
f0121ebd:	a1 3c 26 78 f0       	mov    0xf078263c,%eax
f0121ec2:	83 ec 04             	sub    $0x4,%esp
f0121ec5:	8d 8d 44 fd ff ff    	lea    -0x2bc(%ebp),%ecx
f0121ecb:	51                   	push   %ecx
f0121ecc:	52                   	push   %edx
f0121ecd:	50                   	push   %eax
f0121ece:	e8 de 4b fe ff       	call   f0106ab1 <get_page_table>
f0121ed3:	83 c4 10             	add    $0x10,%esp
			if (ptr_table == NULL)
f0121ed6:	8b 85 44 fd ff ff    	mov    -0x2bc(%ebp),%eax
f0121edc:	85 c0                	test   %eax,%eax
f0121ede:	75 17                	jne    f0121ef7 <test_kfree+0x2106>
			{
				panic("Wrong kfree: one of the kernel tables is wrongly removed! Tables should not be removed here in kfree");
f0121ee0:	83 ec 04             	sub    $0x4,%esp
f0121ee3:	68 7c bc 13 f0       	push   $0xf013bc7c
f0121ee8:	68 67 06 00 00       	push   $0x667
f0121eed:	68 7a b3 13 f0       	push   $0xf013b37a
f0121ef2:	e8 0e e3 fd ff       	call   f0100205 <_panic>
	cprintf("\b\b\b85%");

	//check tables	[15%]
	{
		long long va;
		for (va = KERNEL_HEAP_START; va < (long long)KERNEL_HEAP_MAX; va+=PTSIZE)
f0121ef7:	81 45 e8 00 00 40 00 	addl   $0x400000,-0x18(%ebp)
f0121efe:	83 55 ec 00          	adcl   $0x0,-0x14(%ebp)
f0121f02:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0121f06:	78 b2                	js     f0121eba <test_kfree+0x20c9>
f0121f08:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0121f0c:	7f 09                	jg     f0121f17 <test_kfree+0x2126>
f0121f0e:	81 7d e8 ff ef ff ff 	cmpl   $0xffffefff,-0x18(%ebp)
f0121f15:	76 a3                	jbe    f0121eba <test_kfree+0x20c9>
				panic("Wrong kfree: one of the kernel tables is wrongly removed! Tables should not be removed here in kfree");
			}
		}
	}

	cprintf("\b\b\b100%\n");
f0121f17:	83 ec 0c             	sub    $0xc,%esp
f0121f1a:	68 5e b5 13 f0       	push   $0xf013b55e
f0121f1f:	e8 ea ed fd ff       	call   f0100d0e <cprintf>
f0121f24:	83 c4 10             	add    $0x10,%esp



	cprintf("\nCongratulations!! test kfree completed successfully.\n");
f0121f27:	83 ec 0c             	sub    $0xc,%esp
f0121f2a:	68 e4 bc 13 f0       	push   $0xf013bce4
f0121f2f:	e8 da ed fd ff       	call   f0100d0e <cprintf>
f0121f34:	83 c4 10             	add    $0x10,%esp

	return 1;
f0121f37:	b8 01 00 00 00       	mov    $0x1,%eax

}
f0121f3c:	8d 65 f8             	lea    -0x8(%ebp),%esp
f0121f3f:	5b                   	pop    %ebx
f0121f40:	5f                   	pop    %edi
f0121f41:	5d                   	pop    %ebp
f0121f42:	c3                   	ret    

f0121f43 <test_kfree_bestfirstfit>:

int test_kfree_bestfirstfit()
{
f0121f43:	55                   	push   %ebp
f0121f44:	89 e5                	mov    %esp,%ebp
f0121f46:	57                   	push   %edi
f0121f47:	53                   	push   %ebx
f0121f48:	81 ec 40 02 00 00    	sub    $0x240,%esp
	cprintf("==============================================\n");
f0121f4e:	83 ec 0c             	sub    $0xc,%esp
f0121f51:	68 bc b2 13 f0       	push   $0xf013b2bc
f0121f56:	e8 b3 ed fd ff       	call   f0100d0e <cprintf>
f0121f5b:	83 c4 10             	add    $0x10,%esp
	cprintf("MAKE SURE to have a FRESH RUN for this test\n(i.e. don't run any program/test before it)\n");
f0121f5e:	83 ec 0c             	sub    $0xc,%esp
f0121f61:	68 ec b2 13 f0       	push   $0xf013b2ec
f0121f66:	e8 a3 ed fd ff       	call   f0100d0e <cprintf>
f0121f6b:	83 c4 10             	add    $0x10,%esp
	cprintf("==============================================\n");
f0121f6e:	83 ec 0c             	sub    $0xc,%esp
f0121f71:	68 bc b2 13 f0       	push   $0xf013b2bc
f0121f76:	e8 93 ed fd ff       	call   f0100d0e <cprintf>
f0121f7b:	83 c4 10             	add    $0x10,%esp

	char minByte = 1<<7;
f0121f7e:	c6 45 e7 80          	movb   $0x80,-0x19(%ebp)
	char maxByte = 0x7F;
f0121f82:	c6 45 e6 7f          	movb   $0x7f,-0x1a(%ebp)
	short minShort = 1<<15 ;
f0121f86:	66 c7 45 e4 00 80    	movw   $0x8000,-0x1c(%ebp)
	short maxShort = 0x7FFF;
f0121f8c:	66 c7 45 e2 ff 7f    	movw   $0x7fff,-0x1e(%ebp)
	int minInt = 1<<31 ;
f0121f92:	c7 45 dc 00 00 00 80 	movl   $0x80000000,-0x24(%ebp)
	int maxInt = 0x7FFFFFFF;
f0121f99:	c7 45 d8 ff ff ff 7f 	movl   $0x7fffffff,-0x28(%ebp)
	char *byteArr, *byteArr2 ;
	short *shortArr, *shortArr2 ;
	int *intArr;
	struct MyStruct *structArr ;
	int lastIndexOfByte, lastIndexOfByte2, lastIndexOfShort, lastIndexOfShort2, lastIndexOfInt, lastIndexOfStruct;
	int start_freeFrames = sys_calculate_free_frames() ;
f0121fa0:	e8 f8 ab fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0121fa5:	89 45 d4             	mov    %eax,-0x2c(%ebp)

	//malloc some spaces
	int i, freeFrames, freeDiskFrames ;
	char* ptr;
	int lastIndices[20] = {0};
f0121fa8:	8d 95 68 fe ff ff    	lea    -0x198(%ebp),%edx
f0121fae:	b9 14 00 00 00       	mov    $0x14,%ecx
f0121fb3:	b8 00 00 00 00       	mov    $0x0,%eax
f0121fb8:	89 d7                	mov    %edx,%edi
f0121fba:	f3 ab                	rep stos %eax,%es:(%edi)
	int sums[20] = {0};
f0121fbc:	8d 95 18 fe ff ff    	lea    -0x1e8(%ebp),%edx
f0121fc2:	b9 14 00 00 00       	mov    $0x14,%ecx
f0121fc7:	b8 00 00 00 00       	mov    $0x0,%eax
f0121fcc:	89 d7                	mov    %edx,%edi
f0121fce:	f3 ab                	rep stos %eax,%es:(%edi)
	void* ptr_allocations[20] = {0};
f0121fd0:	8d 95 c8 fd ff ff    	lea    -0x238(%ebp),%edx
f0121fd6:	b9 14 00 00 00       	mov    $0x14,%ecx
f0121fdb:	b8 00 00 00 00       	mov    $0x0,%eax
f0121fe0:	89 d7                	mov    %edx,%edi
f0121fe2:	f3 ab                	rep stos %eax,%es:(%edi)
	{
		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f0121fe4:	e8 b4 ab fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0121fe9:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0121fec:	e8 d7 1d fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0121ff1:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[0] = kmalloc(2*Mega-kilo);
f0121ff4:	83 ec 0c             	sub    $0xc,%esp
f0121ff7:	68 00 fc 1f 00       	push   $0x1ffc00
f0121ffc:	e8 84 58 fe ff       	call   f0107885 <kmalloc>
f0122001:	83 c4 10             	add    $0x10,%esp
f0122004:	89 85 c8 fd ff ff    	mov    %eax,-0x238(%ebp)
		if ((uint32) ptr_allocations[0] !=  (ACTUAL_START)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f012200a:	8b 85 c8 fd ff ff    	mov    -0x238(%ebp),%eax
f0122010:	89 c1                	mov    %eax,%ecx
f0122012:	c7 45 c8 00 10 00 00 	movl   $0x1000,-0x38(%ebp)
f0122019:	8b 45 c8             	mov    -0x38(%ebp),%eax
f012201c:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0122021:	89 45 c4             	mov    %eax,-0x3c(%ebp)
f0122024:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0122027:	ba 00 00 00 00       	mov    $0x0,%edx
f012202c:	f7 75 c8             	divl   -0x38(%ebp)
f012202f:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0122032:	29 d0                	sub    %edx,%eax
f0122034:	89 c3                	mov    %eax,%ebx
f0122036:	c7 45 c0 00 10 00 00 	movl   $0x1000,-0x40(%ebp)
f012203d:	a0 40 26 78 f0       	mov    0xf0782640,%al
f0122042:	0f b6 d0             	movzbl %al,%edx
f0122045:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0122048:	01 d0                	add    %edx,%eax
f012204a:	48                   	dec    %eax
f012204b:	89 45 bc             	mov    %eax,-0x44(%ebp)
f012204e:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0122051:	ba 00 00 00 00       	mov    $0x0,%edx
f0122056:	f7 75 c0             	divl   -0x40(%ebp)
f0122059:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012205c:	29 d0                	sub    %edx,%eax
f012205e:	01 c3                	add    %eax,%ebx
f0122060:	c7 45 b8 00 10 00 00 	movl   $0x1000,-0x48(%ebp)
f0122067:	a0 40 26 78 f0       	mov    0xf0782640,%al
f012206c:	0f b6 c0             	movzbl %al,%eax
f012206f:	c1 e0 04             	shl    $0x4,%eax
f0122072:	89 c2                	mov    %eax,%edx
f0122074:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0122077:	01 d0                	add    %edx,%eax
f0122079:	48                   	dec    %eax
f012207a:	89 45 b4             	mov    %eax,-0x4c(%ebp)
f012207d:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0122080:	ba 00 00 00 00       	mov    $0x0,%edx
f0122085:	f7 75 b8             	divl   -0x48(%ebp)
f0122088:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f012208b:	29 d0                	sub    %edx,%eax
f012208d:	01 d8                	add    %ebx,%eax
f012208f:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f0122094:	39 c1                	cmp    %eax,%ecx
f0122096:	74 17                	je     f01220af <test_kfree_bestfirstfit+0x16c>
f0122098:	83 ec 04             	sub    $0x4,%esp
f012209b:	68 60 b4 13 f0       	push   $0xf013b460
f01220a0:	68 95 06 00 00       	push   $0x695
f01220a5:	68 7a b3 13 f0       	push   $0xf013b37a
f01220aa:	e8 56 e1 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01220af:	e8 14 1d fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f01220b4:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f01220b7:	74 17                	je     f01220d0 <test_kfree_bestfirstfit+0x18d>
f01220b9:	83 ec 04             	sub    $0x4,%esp
f01220bc:	68 94 b3 13 f0       	push   $0xf013b394
f01220c1:	68 96 06 00 00       	push   $0x696
f01220c6:	68 7a b3 13 f0       	push   $0xf013b37a
f01220cb:	e8 35 e1 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f01220d0:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f01220d3:	e8 c5 aa fe ff       	call   f010cb9d <sys_calculate_free_frames>
f01220d8:	29 c3                	sub    %eax,%ebx
f01220da:	89 d8                	mov    %ebx,%eax
f01220dc:	3d 00 02 00 00       	cmp    $0x200,%eax
f01220e1:	74 17                	je     f01220fa <test_kfree_bestfirstfit+0x1b7>
f01220e3:	83 ec 04             	sub    $0x4,%esp
f01220e6:	68 fc b3 13 f0       	push   $0xf013b3fc
f01220eb:	68 97 06 00 00       	push   $0x697
f01220f0:	68 7a b3 13 f0       	push   $0xf013b37a
f01220f5:	e8 0b e1 fd ff       	call   f0100205 <_panic>
		lastIndices[0] = (2*Mega-kilo)/sizeof(char) - 1;
f01220fa:	c7 85 68 fe ff ff ff 	movl   $0x1ffbff,-0x198(%ebp)
f0122101:	fb 1f 00 

		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f0122104:	e8 94 aa fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0122109:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012210c:	e8 b7 1c fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0122111:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[1] = kmalloc(2*Mega-kilo);
f0122114:	83 ec 0c             	sub    $0xc,%esp
f0122117:	68 00 fc 1f 00       	push   $0x1ffc00
f012211c:	e8 64 57 fe ff       	call   f0107885 <kmalloc>
f0122121:	83 c4 10             	add    $0x10,%esp
f0122124:	89 85 cc fd ff ff    	mov    %eax,-0x234(%ebp)
		if ((uint32) ptr_allocations[1] != (ACTUAL_START + 2*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f012212a:	8b 85 cc fd ff ff    	mov    -0x234(%ebp),%eax
f0122130:	89 c1                	mov    %eax,%ecx
f0122132:	c7 45 b0 00 10 00 00 	movl   $0x1000,-0x50(%ebp)
f0122139:	8b 45 b0             	mov    -0x50(%ebp),%eax
f012213c:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0122141:	89 45 ac             	mov    %eax,-0x54(%ebp)
f0122144:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0122147:	ba 00 00 00 00       	mov    $0x0,%edx
f012214c:	f7 75 b0             	divl   -0x50(%ebp)
f012214f:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0122152:	29 d0                	sub    %edx,%eax
f0122154:	89 c3                	mov    %eax,%ebx
f0122156:	c7 45 a8 00 10 00 00 	movl   $0x1000,-0x58(%ebp)
f012215d:	a0 40 26 78 f0       	mov    0xf0782640,%al
f0122162:	0f b6 d0             	movzbl %al,%edx
f0122165:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0122168:	01 d0                	add    %edx,%eax
f012216a:	48                   	dec    %eax
f012216b:	89 45 a4             	mov    %eax,-0x5c(%ebp)
f012216e:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0122171:	ba 00 00 00 00       	mov    $0x0,%edx
f0122176:	f7 75 a8             	divl   -0x58(%ebp)
f0122179:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f012217c:	29 d0                	sub    %edx,%eax
f012217e:	01 c3                	add    %eax,%ebx
f0122180:	c7 45 a0 00 10 00 00 	movl   $0x1000,-0x60(%ebp)
f0122187:	a0 40 26 78 f0       	mov    0xf0782640,%al
f012218c:	0f b6 c0             	movzbl %al,%eax
f012218f:	c1 e0 04             	shl    $0x4,%eax
f0122192:	89 c2                	mov    %eax,%edx
f0122194:	8b 45 a0             	mov    -0x60(%ebp),%eax
f0122197:	01 d0                	add    %edx,%eax
f0122199:	48                   	dec    %eax
f012219a:	89 45 9c             	mov    %eax,-0x64(%ebp)
f012219d:	8b 45 9c             	mov    -0x64(%ebp),%eax
f01221a0:	ba 00 00 00 00       	mov    $0x0,%edx
f01221a5:	f7 75 a0             	divl   -0x60(%ebp)
f01221a8:	8b 45 9c             	mov    -0x64(%ebp),%eax
f01221ab:	29 d0                	sub    %edx,%eax
f01221ad:	01 d8                	add    %ebx,%eax
f01221af:	2d 00 c0 df 09       	sub    $0x9dfc000,%eax
f01221b4:	39 c1                	cmp    %eax,%ecx
f01221b6:	74 17                	je     f01221cf <test_kfree_bestfirstfit+0x28c>
f01221b8:	83 ec 04             	sub    $0x4,%esp
f01221bb:	68 60 b4 13 f0       	push   $0xf013b460
f01221c0:	68 9e 06 00 00       	push   $0x69e
f01221c5:	68 7a b3 13 f0       	push   $0xf013b37a
f01221ca:	e8 36 e0 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01221cf:	e8 f4 1b fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f01221d4:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f01221d7:	74 17                	je     f01221f0 <test_kfree_bestfirstfit+0x2ad>
f01221d9:	83 ec 04             	sub    $0x4,%esp
f01221dc:	68 94 b3 13 f0       	push   $0xf013b394
f01221e1:	68 9f 06 00 00       	push   $0x69f
f01221e6:	68 7a b3 13 f0       	push   $0xf013b37a
f01221eb:	e8 15 e0 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f01221f0:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f01221f3:	e8 a5 a9 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f01221f8:	29 c3                	sub    %eax,%ebx
f01221fa:	89 d8                	mov    %ebx,%eax
f01221fc:	3d 00 02 00 00       	cmp    $0x200,%eax
f0122201:	74 17                	je     f012221a <test_kfree_bestfirstfit+0x2d7>
f0122203:	83 ec 04             	sub    $0x4,%esp
f0122206:	68 fc b3 13 f0       	push   $0xf013b3fc
f012220b:	68 a0 06 00 00       	push   $0x6a0
f0122210:	68 7a b3 13 f0       	push   $0xf013b37a
f0122215:	e8 eb df fd ff       	call   f0100205 <_panic>
		lastIndices[1] = (2*Mega-kilo)/sizeof(char) - 1;
f012221a:	c7 85 6c fe ff ff ff 	movl   $0x1ffbff,-0x194(%ebp)
f0122221:	fb 1f 00 

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f0122224:	e8 74 a9 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0122229:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012222c:	e8 97 1b fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0122231:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[2] = kmalloc(2*kilo);
f0122234:	83 ec 0c             	sub    $0xc,%esp
f0122237:	68 00 08 00 00       	push   $0x800
f012223c:	e8 44 56 fe ff       	call   f0107885 <kmalloc>
f0122241:	83 c4 10             	add    $0x10,%esp
f0122244:	89 85 d0 fd ff ff    	mov    %eax,-0x230(%ebp)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f012224a:	8b 85 d0 fd ff ff    	mov    -0x230(%ebp),%eax
f0122250:	89 c1                	mov    %eax,%ecx
f0122252:	c7 45 98 00 10 00 00 	movl   $0x1000,-0x68(%ebp)
f0122259:	8b 45 98             	mov    -0x68(%ebp),%eax
f012225c:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0122261:	89 45 94             	mov    %eax,-0x6c(%ebp)
f0122264:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0122267:	ba 00 00 00 00       	mov    $0x0,%edx
f012226c:	f7 75 98             	divl   -0x68(%ebp)
f012226f:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0122272:	29 d0                	sub    %edx,%eax
f0122274:	89 c3                	mov    %eax,%ebx
f0122276:	c7 45 90 00 10 00 00 	movl   $0x1000,-0x70(%ebp)
f012227d:	a0 40 26 78 f0       	mov    0xf0782640,%al
f0122282:	0f b6 d0             	movzbl %al,%edx
f0122285:	8b 45 90             	mov    -0x70(%ebp),%eax
f0122288:	01 d0                	add    %edx,%eax
f012228a:	48                   	dec    %eax
f012228b:	89 45 8c             	mov    %eax,-0x74(%ebp)
f012228e:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0122291:	ba 00 00 00 00       	mov    $0x0,%edx
f0122296:	f7 75 90             	divl   -0x70(%ebp)
f0122299:	8b 45 8c             	mov    -0x74(%ebp),%eax
f012229c:	29 d0                	sub    %edx,%eax
f012229e:	01 c3                	add    %eax,%ebx
f01222a0:	c7 45 88 00 10 00 00 	movl   $0x1000,-0x78(%ebp)
f01222a7:	a0 40 26 78 f0       	mov    0xf0782640,%al
f01222ac:	0f b6 c0             	movzbl %al,%eax
f01222af:	c1 e0 04             	shl    $0x4,%eax
f01222b2:	89 c2                	mov    %eax,%edx
f01222b4:	8b 45 88             	mov    -0x78(%ebp),%eax
f01222b7:	01 d0                	add    %edx,%eax
f01222b9:	48                   	dec    %eax
f01222ba:	89 45 84             	mov    %eax,-0x7c(%ebp)
f01222bd:	8b 45 84             	mov    -0x7c(%ebp),%eax
f01222c0:	ba 00 00 00 00       	mov    $0x0,%edx
f01222c5:	f7 75 88             	divl   -0x78(%ebp)
f01222c8:	8b 45 84             	mov    -0x7c(%ebp),%eax
f01222cb:	29 d0                	sub    %edx,%eax
f01222cd:	01 d8                	add    %ebx,%eax
f01222cf:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
f01222d4:	39 c1                	cmp    %eax,%ecx
f01222d6:	74 17                	je     f01222ef <test_kfree_bestfirstfit+0x3ac>
f01222d8:	83 ec 04             	sub    $0x4,%esp
f01222db:	68 60 b4 13 f0       	push   $0xf013b460
f01222e0:	68 a7 06 00 00       	push   $0x6a7
f01222e5:	68 7a b3 13 f0       	push   $0xf013b37a
f01222ea:	e8 16 df fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01222ef:	e8 d4 1a fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f01222f4:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f01222f7:	74 17                	je     f0122310 <test_kfree_bestfirstfit+0x3cd>
f01222f9:	83 ec 04             	sub    $0x4,%esp
f01222fc:	68 94 b3 13 f0       	push   $0xf013b394
f0122301:	68 a8 06 00 00       	push   $0x6a8
f0122306:	68 7a b3 13 f0       	push   $0xf013b37a
f012230b:	e8 f5 de fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f0122310:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0122313:	e8 85 a8 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0122318:	29 c3                	sub    %eax,%ebx
f012231a:	89 d8                	mov    %ebx,%eax
f012231c:	83 f8 01             	cmp    $0x1,%eax
f012231f:	74 17                	je     f0122338 <test_kfree_bestfirstfit+0x3f5>
f0122321:	83 ec 04             	sub    $0x4,%esp
f0122324:	68 fc b3 13 f0       	push   $0xf013b3fc
f0122329:	68 a9 06 00 00       	push   $0x6a9
f012232e:	68 7a b3 13 f0       	push   $0xf013b37a
f0122333:	e8 cd de fd ff       	call   f0100205 <_panic>
		lastIndices[2] = (2*kilo)/sizeof(char) - 1;
f0122338:	c7 85 70 fe ff ff ff 	movl   $0x7ff,-0x190(%ebp)
f012233f:	07 00 00 
		ptr = (char*)ptr_allocations[2];
f0122342:	8b 85 d0 fd ff ff    	mov    -0x230(%ebp),%eax
f0122348:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[2]; ++i)
f012234b:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0122352:	eb 0e                	jmp    f0122362 <test_kfree_bestfirstfit+0x41f>
		{
			ptr[i] = 2 ;
f0122354:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0122357:	8b 45 80             	mov    -0x80(%ebp),%eax
f012235a:	01 d0                	add    %edx,%eax
f012235c:	c6 00 02             	movb   $0x2,(%eax)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[2] = (2*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[2];
		for (i = 0; i < lastIndices[2]; ++i)
f012235f:	ff 45 f4             	incl   -0xc(%ebp)
f0122362:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f0122368:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012236b:	7f e7                	jg     f0122354 <test_kfree_bestfirstfit+0x411>
		{
			ptr[i] = 2 ;
		}

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f012236d:	e8 2b a8 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0122372:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0122375:	e8 4e 1a fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f012237a:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[3] = kmalloc(2*kilo);
f012237d:	83 ec 0c             	sub    $0xc,%esp
f0122380:	68 00 08 00 00       	push   $0x800
f0122385:	e8 fb 54 fe ff       	call   f0107885 <kmalloc>
f012238a:	83 c4 10             	add    $0x10,%esp
f012238d:	89 85 d4 fd ff ff    	mov    %eax,-0x22c(%ebp)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0122393:	8b 85 d4 fd ff ff    	mov    -0x22c(%ebp),%eax
f0122399:	89 c1                	mov    %eax,%ecx
f012239b:	c7 85 7c ff ff ff 00 	movl   $0x1000,-0x84(%ebp)
f01223a2:	10 00 00 
f01223a5:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f01223ab:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01223b0:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)
f01223b6:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f01223bc:	ba 00 00 00 00       	mov    $0x0,%edx
f01223c1:	f7 b5 7c ff ff ff    	divl   -0x84(%ebp)
f01223c7:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f01223cd:	29 d0                	sub    %edx,%eax
f01223cf:	89 c3                	mov    %eax,%ebx
f01223d1:	c7 85 74 ff ff ff 00 	movl   $0x1000,-0x8c(%ebp)
f01223d8:	10 00 00 
f01223db:	a0 40 26 78 f0       	mov    0xf0782640,%al
f01223e0:	0f b6 d0             	movzbl %al,%edx
f01223e3:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f01223e9:	01 d0                	add    %edx,%eax
f01223eb:	48                   	dec    %eax
f01223ec:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
f01223f2:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f01223f8:	ba 00 00 00 00       	mov    $0x0,%edx
f01223fd:	f7 b5 74 ff ff ff    	divl   -0x8c(%ebp)
f0122403:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f0122409:	29 d0                	sub    %edx,%eax
f012240b:	01 c3                	add    %eax,%ebx
f012240d:	c7 85 6c ff ff ff 00 	movl   $0x1000,-0x94(%ebp)
f0122414:	10 00 00 
f0122417:	a0 40 26 78 f0       	mov    0xf0782640,%al
f012241c:	0f b6 c0             	movzbl %al,%eax
f012241f:	c1 e0 04             	shl    $0x4,%eax
f0122422:	89 c2                	mov    %eax,%edx
f0122424:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f012242a:	01 d0                	add    %edx,%eax
f012242c:	48                   	dec    %eax
f012242d:	89 85 68 ff ff ff    	mov    %eax,-0x98(%ebp)
f0122433:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f0122439:	ba 00 00 00 00       	mov    $0x0,%edx
f012243e:	f7 b5 6c ff ff ff    	divl   -0x94(%ebp)
f0122444:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f012244a:	29 d0                	sub    %edx,%eax
f012244c:	01 d8                	add    %ebx,%eax
f012244e:	2d 00 b0 bf 09       	sub    $0x9bfb000,%eax
f0122453:	39 c1                	cmp    %eax,%ecx
f0122455:	74 17                	je     f012246e <test_kfree_bestfirstfit+0x52b>
f0122457:	83 ec 04             	sub    $0x4,%esp
f012245a:	68 60 b4 13 f0       	push   $0xf013b460
f012245f:	68 b5 06 00 00       	push   $0x6b5
f0122464:	68 7a b3 13 f0       	push   $0xf013b37a
f0122469:	e8 97 dd fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012246e:	e8 55 19 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0122473:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0122476:	74 17                	je     f012248f <test_kfree_bestfirstfit+0x54c>
f0122478:	83 ec 04             	sub    $0x4,%esp
f012247b:	68 94 b3 13 f0       	push   $0xf013b394
f0122480:	68 b6 06 00 00       	push   $0x6b6
f0122485:	68 7a b3 13 f0       	push   $0xf013b37a
f012248a:	e8 76 dd fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f012248f:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0122492:	e8 06 a7 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0122497:	29 c3                	sub    %eax,%ebx
f0122499:	89 d8                	mov    %ebx,%eax
f012249b:	83 f8 01             	cmp    $0x1,%eax
f012249e:	74 17                	je     f01224b7 <test_kfree_bestfirstfit+0x574>
f01224a0:	83 ec 04             	sub    $0x4,%esp
f01224a3:	68 fc b3 13 f0       	push   $0xf013b3fc
f01224a8:	68 b7 06 00 00       	push   $0x6b7
f01224ad:	68 7a b3 13 f0       	push   $0xf013b37a
f01224b2:	e8 4e dd fd ff       	call   f0100205 <_panic>
		lastIndices[3] = (2*kilo)/sizeof(char) - 1;
f01224b7:	c7 85 74 fe ff ff ff 	movl   $0x7ff,-0x18c(%ebp)
f01224be:	07 00 00 
		ptr = (char*)ptr_allocations[3];
f01224c1:	8b 85 d4 fd ff ff    	mov    -0x22c(%ebp),%eax
f01224c7:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[3]; ++i)
f01224ca:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01224d1:	eb 0e                	jmp    f01224e1 <test_kfree_bestfirstfit+0x59e>
		{
			ptr[i] = 3 ;
f01224d3:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01224d6:	8b 45 80             	mov    -0x80(%ebp),%eax
f01224d9:	01 d0                	add    %edx,%eax
f01224db:	c6 00 03             	movb   $0x3,(%eax)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[3] = (2*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[3];
		for (i = 0; i < lastIndices[3]; ++i)
f01224de:	ff 45 f4             	incl   -0xc(%ebp)
f01224e1:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f01224e7:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01224ea:	7f e7                	jg     f01224d3 <test_kfree_bestfirstfit+0x590>
		{
			ptr[i] = 3 ;
		}

		//7 KB
		freeFrames = sys_calculate_free_frames() ;
f01224ec:	e8 ac a6 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f01224f1:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01224f4:	e8 cf 18 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f01224f9:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[4] = kmalloc(7*kilo);
f01224fc:	83 ec 0c             	sub    $0xc,%esp
f01224ff:	68 00 1c 00 00       	push   $0x1c00
f0122504:	e8 7c 53 fe ff       	call   f0107885 <kmalloc>
f0122509:	83 c4 10             	add    $0x10,%esp
f012250c:	89 85 d8 fd ff ff    	mov    %eax,-0x228(%ebp)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0122512:	8b 85 d8 fd ff ff    	mov    -0x228(%ebp),%eax
f0122518:	89 c1                	mov    %eax,%ecx
f012251a:	c7 85 64 ff ff ff 00 	movl   $0x1000,-0x9c(%ebp)
f0122521:	10 00 00 
f0122524:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f012252a:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012252f:	89 85 60 ff ff ff    	mov    %eax,-0xa0(%ebp)
f0122535:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f012253b:	ba 00 00 00 00       	mov    $0x0,%edx
f0122540:	f7 b5 64 ff ff ff    	divl   -0x9c(%ebp)
f0122546:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f012254c:	29 d0                	sub    %edx,%eax
f012254e:	89 c3                	mov    %eax,%ebx
f0122550:	c7 85 5c ff ff ff 00 	movl   $0x1000,-0xa4(%ebp)
f0122557:	10 00 00 
f012255a:	a0 40 26 78 f0       	mov    0xf0782640,%al
f012255f:	0f b6 d0             	movzbl %al,%edx
f0122562:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f0122568:	01 d0                	add    %edx,%eax
f012256a:	48                   	dec    %eax
f012256b:	89 85 58 ff ff ff    	mov    %eax,-0xa8(%ebp)
f0122571:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f0122577:	ba 00 00 00 00       	mov    $0x0,%edx
f012257c:	f7 b5 5c ff ff ff    	divl   -0xa4(%ebp)
f0122582:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f0122588:	29 d0                	sub    %edx,%eax
f012258a:	01 c3                	add    %eax,%ebx
f012258c:	c7 85 54 ff ff ff 00 	movl   $0x1000,-0xac(%ebp)
f0122593:	10 00 00 
f0122596:	a0 40 26 78 f0       	mov    0xf0782640,%al
f012259b:	0f b6 c0             	movzbl %al,%eax
f012259e:	c1 e0 04             	shl    $0x4,%eax
f01225a1:	89 c2                	mov    %eax,%edx
f01225a3:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f01225a9:	01 d0                	add    %edx,%eax
f01225ab:	48                   	dec    %eax
f01225ac:	89 85 50 ff ff ff    	mov    %eax,-0xb0(%ebp)
f01225b2:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f01225b8:	ba 00 00 00 00       	mov    $0x0,%edx
f01225bd:	f7 b5 54 ff ff ff    	divl   -0xac(%ebp)
f01225c3:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f01225c9:	29 d0                	sub    %edx,%eax
f01225cb:	01 d8                	add    %ebx,%eax
f01225cd:	2d 00 a0 bf 09       	sub    $0x9bfa000,%eax
f01225d2:	39 c1                	cmp    %eax,%ecx
f01225d4:	74 17                	je     f01225ed <test_kfree_bestfirstfit+0x6aa>
f01225d6:	83 ec 04             	sub    $0x4,%esp
f01225d9:	68 60 b4 13 f0       	push   $0xf013b460
f01225de:	68 c3 06 00 00       	push   $0x6c3
f01225e3:	68 7a b3 13 f0       	push   $0xf013b37a
f01225e8:	e8 18 dc fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01225ed:	e8 d6 17 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f01225f2:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f01225f5:	74 17                	je     f012260e <test_kfree_bestfirstfit+0x6cb>
f01225f7:	83 ec 04             	sub    $0x4,%esp
f01225fa:	68 94 b3 13 f0       	push   $0xf013b394
f01225ff:	68 c4 06 00 00       	push   $0x6c4
f0122604:	68 7a b3 13 f0       	push   $0xf013b37a
f0122609:	e8 f7 db fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: pages are not loaded successfully into memory");
f012260e:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0122611:	e8 87 a5 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0122616:	29 c3                	sub    %eax,%ebx
f0122618:	89 d8                	mov    %ebx,%eax
f012261a:	83 f8 02             	cmp    $0x2,%eax
f012261d:	74 17                	je     f0122636 <test_kfree_bestfirstfit+0x6f3>
f012261f:	83 ec 04             	sub    $0x4,%esp
f0122622:	68 fc b3 13 f0       	push   $0xf013b3fc
f0122627:	68 c5 06 00 00       	push   $0x6c5
f012262c:	68 7a b3 13 f0       	push   $0xf013b37a
f0122631:	e8 cf db fd ff       	call   f0100205 <_panic>
		lastIndices[4] = (7*kilo)/sizeof(char) - 1;
f0122636:	c7 85 78 fe ff ff ff 	movl   $0x1bff,-0x188(%ebp)
f012263d:	1b 00 00 
		ptr = (char*)ptr_allocations[4];
f0122640:	8b 85 d8 fd ff ff    	mov    -0x228(%ebp),%eax
f0122646:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[4]; ++i)
f0122649:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0122650:	eb 0e                	jmp    f0122660 <test_kfree_bestfirstfit+0x71d>
		{
			ptr[i] = 4 ;
f0122652:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0122655:	8b 45 80             	mov    -0x80(%ebp),%eax
f0122658:	01 d0                	add    %edx,%eax
f012265a:	c6 00 04             	movb   $0x4,(%eax)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[4] = (7*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[4];
		for (i = 0; i < lastIndices[4]; ++i)
f012265d:	ff 45 f4             	incl   -0xc(%ebp)
f0122660:	8b 85 78 fe ff ff    	mov    -0x188(%ebp),%eax
f0122666:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0122669:	7f e7                	jg     f0122652 <test_kfree_bestfirstfit+0x70f>
		{
			ptr[i] = 4 ;
		}

		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f012266b:	e8 2d a5 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0122670:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0122673:	e8 50 17 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0122678:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[5] = kmalloc(3*Mega-kilo);
f012267b:	83 ec 0c             	sub    $0xc,%esp
f012267e:	68 00 fc 2f 00       	push   $0x2ffc00
f0122683:	e8 fd 51 fe ff       	call   f0107885 <kmalloc>
f0122688:	83 c4 10             	add    $0x10,%esp
f012268b:	89 85 dc fd ff ff    	mov    %eax,-0x224(%ebp)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo) ) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0122691:	8b 85 dc fd ff ff    	mov    -0x224(%ebp),%eax
f0122697:	89 c1                	mov    %eax,%ecx
f0122699:	c7 85 4c ff ff ff 00 	movl   $0x1000,-0xb4(%ebp)
f01226a0:	10 00 00 
f01226a3:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f01226a9:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01226ae:	89 85 48 ff ff ff    	mov    %eax,-0xb8(%ebp)
f01226b4:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f01226ba:	ba 00 00 00 00       	mov    $0x0,%edx
f01226bf:	f7 b5 4c ff ff ff    	divl   -0xb4(%ebp)
f01226c5:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f01226cb:	29 d0                	sub    %edx,%eax
f01226cd:	89 c3                	mov    %eax,%ebx
f01226cf:	c7 85 44 ff ff ff 00 	movl   $0x1000,-0xbc(%ebp)
f01226d6:	10 00 00 
f01226d9:	a0 40 26 78 f0       	mov    0xf0782640,%al
f01226de:	0f b6 d0             	movzbl %al,%edx
f01226e1:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f01226e7:	01 d0                	add    %edx,%eax
f01226e9:	48                   	dec    %eax
f01226ea:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%ebp)
f01226f0:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f01226f6:	ba 00 00 00 00       	mov    $0x0,%edx
f01226fb:	f7 b5 44 ff ff ff    	divl   -0xbc(%ebp)
f0122701:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0122707:	29 d0                	sub    %edx,%eax
f0122709:	01 c3                	add    %eax,%ebx
f012270b:	c7 85 3c ff ff ff 00 	movl   $0x1000,-0xc4(%ebp)
f0122712:	10 00 00 
f0122715:	a0 40 26 78 f0       	mov    0xf0782640,%al
f012271a:	0f b6 c0             	movzbl %al,%eax
f012271d:	c1 e0 04             	shl    $0x4,%eax
f0122720:	89 c2                	mov    %eax,%edx
f0122722:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f0122728:	01 d0                	add    %edx,%eax
f012272a:	48                   	dec    %eax
f012272b:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
f0122731:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f0122737:	ba 00 00 00 00       	mov    $0x0,%edx
f012273c:	f7 b5 3c ff ff ff    	divl   -0xc4(%ebp)
f0122742:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f0122748:	29 d0                	sub    %edx,%eax
f012274a:	01 d8                	add    %ebx,%eax
f012274c:	2d 00 80 bf 09       	sub    $0x9bf8000,%eax
f0122751:	39 c1                	cmp    %eax,%ecx
f0122753:	74 17                	je     f012276c <test_kfree_bestfirstfit+0x829>
f0122755:	83 ec 04             	sub    $0x4,%esp
f0122758:	68 60 b4 13 f0       	push   $0xf013b460
f012275d:	68 d1 06 00 00       	push   $0x6d1
f0122762:	68 7a b3 13 f0       	push   $0xf013b37a
f0122767:	e8 99 da fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012276c:	e8 57 16 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0122771:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0122774:	74 17                	je     f012278d <test_kfree_bestfirstfit+0x84a>
f0122776:	83 ec 04             	sub    $0x4,%esp
f0122779:	68 94 b3 13 f0       	push   $0xf013b394
f012277e:	68 d2 06 00 00       	push   $0x6d2
f0122783:	68 7a b3 13 f0       	push   $0xf013b37a
f0122788:	e8 78 da fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
f012278d:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0122790:	e8 08 a4 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0122795:	29 c3                	sub    %eax,%ebx
f0122797:	89 d8                	mov    %ebx,%eax
f0122799:	3d 00 03 00 00       	cmp    $0x300,%eax
f012279e:	74 17                	je     f01227b7 <test_kfree_bestfirstfit+0x874>
f01227a0:	83 ec 04             	sub    $0x4,%esp
f01227a3:	68 fc b3 13 f0       	push   $0xf013b3fc
f01227a8:	68 d3 06 00 00       	push   $0x6d3
f01227ad:	68 7a b3 13 f0       	push   $0xf013b37a
f01227b2:	e8 4e da fd ff       	call   f0100205 <_panic>
		lastIndices[5] = (3*Mega-kilo)/sizeof(char) - 1;
f01227b7:	c7 85 7c fe ff ff ff 	movl   $0x2ffbff,-0x184(%ebp)
f01227be:	fb 2f 00 
		ptr = (char*)ptr_allocations[5];
f01227c1:	8b 85 dc fd ff ff    	mov    -0x224(%ebp),%eax
f01227c7:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[5]; ++i)
f01227ca:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01227d1:	eb 0e                	jmp    f01227e1 <test_kfree_bestfirstfit+0x89e>
		{
			ptr[i] = 5 ;
f01227d3:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01227d6:	8b 45 80             	mov    -0x80(%ebp),%eax
f01227d9:	01 d0                	add    %edx,%eax
f01227db:	c6 00 05             	movb   $0x5,(%eax)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo) ) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[5] = (3*Mega-kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[5];
		for (i = 0; i < lastIndices[5]; ++i)
f01227de:	ff 45 f4             	incl   -0xc(%ebp)
f01227e1:	8b 85 7c fe ff ff    	mov    -0x184(%ebp),%eax
f01227e7:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01227ea:	7f e7                	jg     f01227d3 <test_kfree_bestfirstfit+0x890>
		{
			ptr[i] = 5 ;
		}

		//6 MB
		freeFrames = sys_calculate_free_frames() ;
f01227ec:	e8 ac a3 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f01227f1:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01227f4:	e8 cf 15 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f01227f9:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[6] = kmalloc(6*Mega-kilo);
f01227fc:	83 ec 0c             	sub    $0xc,%esp
f01227ff:	68 00 fc 5f 00       	push   $0x5ffc00
f0122804:	e8 7c 50 fe ff       	call   f0107885 <kmalloc>
f0122809:	83 c4 10             	add    $0x10,%esp
f012280c:	89 85 e0 fd ff ff    	mov    %eax,-0x220(%ebp)
		if ((uint32) ptr_allocations[6] != (ACTUAL_START + 7*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0122812:	8b 85 e0 fd ff ff    	mov    -0x220(%ebp),%eax
f0122818:	89 c1                	mov    %eax,%ecx
f012281a:	c7 85 34 ff ff ff 00 	movl   $0x1000,-0xcc(%ebp)
f0122821:	10 00 00 
f0122824:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f012282a:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012282f:	89 85 30 ff ff ff    	mov    %eax,-0xd0(%ebp)
f0122835:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f012283b:	ba 00 00 00 00       	mov    $0x0,%edx
f0122840:	f7 b5 34 ff ff ff    	divl   -0xcc(%ebp)
f0122846:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f012284c:	29 d0                	sub    %edx,%eax
f012284e:	89 c3                	mov    %eax,%ebx
f0122850:	c7 85 2c ff ff ff 00 	movl   $0x1000,-0xd4(%ebp)
f0122857:	10 00 00 
f012285a:	a0 40 26 78 f0       	mov    0xf0782640,%al
f012285f:	0f b6 d0             	movzbl %al,%edx
f0122862:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f0122868:	01 d0                	add    %edx,%eax
f012286a:	48                   	dec    %eax
f012286b:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%ebp)
f0122871:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f0122877:	ba 00 00 00 00       	mov    $0x0,%edx
f012287c:	f7 b5 2c ff ff ff    	divl   -0xd4(%ebp)
f0122882:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f0122888:	29 d0                	sub    %edx,%eax
f012288a:	01 c3                	add    %eax,%ebx
f012288c:	c7 85 24 ff ff ff 00 	movl   $0x1000,-0xdc(%ebp)
f0122893:	10 00 00 
f0122896:	a0 40 26 78 f0       	mov    0xf0782640,%al
f012289b:	0f b6 c0             	movzbl %al,%eax
f012289e:	c1 e0 04             	shl    $0x4,%eax
f01228a1:	89 c2                	mov    %eax,%edx
f01228a3:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f01228a9:	01 d0                	add    %edx,%eax
f01228ab:	48                   	dec    %eax
f01228ac:	89 85 20 ff ff ff    	mov    %eax,-0xe0(%ebp)
f01228b2:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f01228b8:	ba 00 00 00 00       	mov    $0x0,%edx
f01228bd:	f7 b5 24 ff ff ff    	divl   -0xdc(%ebp)
f01228c3:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f01228c9:	29 d0                	sub    %edx,%eax
f01228cb:	01 d8                	add    %ebx,%eax
f01228cd:	2d 00 80 8f 09       	sub    $0x98f8000,%eax
f01228d2:	39 c1                	cmp    %eax,%ecx
f01228d4:	74 17                	je     f01228ed <test_kfree_bestfirstfit+0x9aa>
f01228d6:	83 ec 04             	sub    $0x4,%esp
f01228d9:	68 60 b4 13 f0       	push   $0xf013b460
f01228de:	68 df 06 00 00       	push   $0x6df
f01228e3:	68 7a b3 13 f0       	push   $0xf013b37a
f01228e8:	e8 18 d9 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01228ed:	e8 d6 14 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f01228f2:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f01228f5:	74 17                	je     f012290e <test_kfree_bestfirstfit+0x9cb>
f01228f7:	83 ec 04             	sub    $0x4,%esp
f01228fa:	68 94 b3 13 f0       	push   $0xf013b394
f01228ff:	68 e0 06 00 00       	push   $0x6e0
f0122904:	68 7a b3 13 f0       	push   $0xf013b37a
f0122909:	e8 f7 d8 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1536) panic("Wrong allocation: pages are not loaded successfully into memory");
f012290e:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0122911:	e8 87 a2 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0122916:	29 c3                	sub    %eax,%ebx
f0122918:	89 d8                	mov    %ebx,%eax
f012291a:	3d 00 06 00 00       	cmp    $0x600,%eax
f012291f:	74 17                	je     f0122938 <test_kfree_bestfirstfit+0x9f5>
f0122921:	83 ec 04             	sub    $0x4,%esp
f0122924:	68 fc b3 13 f0       	push   $0xf013b3fc
f0122929:	68 e1 06 00 00       	push   $0x6e1
f012292e:	68 7a b3 13 f0       	push   $0xf013b37a
f0122933:	e8 cd d8 fd ff       	call   f0100205 <_panic>
		lastIndices[6] = (6*Mega-kilo)/sizeof(char) - 1;
f0122938:	c7 85 80 fe ff ff ff 	movl   $0x5ffbff,-0x180(%ebp)
f012293f:	fb 5f 00 

		//14 KB
		freeFrames = sys_calculate_free_frames() ;
f0122942:	e8 56 a2 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0122947:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012294a:	e8 79 14 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f012294f:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[7] = kmalloc(14*kilo);
f0122952:	83 ec 0c             	sub    $0xc,%esp
f0122955:	68 00 38 00 00       	push   $0x3800
f012295a:	e8 26 4f fe ff       	call   f0107885 <kmalloc>
f012295f:	83 c4 10             	add    $0x10,%esp
f0122962:	89 85 e4 fd ff ff    	mov    %eax,-0x21c(%ebp)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 13*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0122968:	8b 85 e4 fd ff ff    	mov    -0x21c(%ebp),%eax
f012296e:	89 c1                	mov    %eax,%ecx
f0122970:	c7 85 1c ff ff ff 00 	movl   $0x1000,-0xe4(%ebp)
f0122977:	10 00 00 
f012297a:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f0122980:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0122985:	89 85 18 ff ff ff    	mov    %eax,-0xe8(%ebp)
f012298b:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f0122991:	ba 00 00 00 00       	mov    $0x0,%edx
f0122996:	f7 b5 1c ff ff ff    	divl   -0xe4(%ebp)
f012299c:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f01229a2:	29 d0                	sub    %edx,%eax
f01229a4:	89 c3                	mov    %eax,%ebx
f01229a6:	c7 85 14 ff ff ff 00 	movl   $0x1000,-0xec(%ebp)
f01229ad:	10 00 00 
f01229b0:	a0 40 26 78 f0       	mov    0xf0782640,%al
f01229b5:	0f b6 d0             	movzbl %al,%edx
f01229b8:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f01229be:	01 d0                	add    %edx,%eax
f01229c0:	48                   	dec    %eax
f01229c1:	89 85 10 ff ff ff    	mov    %eax,-0xf0(%ebp)
f01229c7:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f01229cd:	ba 00 00 00 00       	mov    $0x0,%edx
f01229d2:	f7 b5 14 ff ff ff    	divl   -0xec(%ebp)
f01229d8:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f01229de:	29 d0                	sub    %edx,%eax
f01229e0:	01 c3                	add    %eax,%ebx
f01229e2:	c7 85 0c ff ff ff 00 	movl   $0x1000,-0xf4(%ebp)
f01229e9:	10 00 00 
f01229ec:	a0 40 26 78 f0       	mov    0xf0782640,%al
f01229f1:	0f b6 c0             	movzbl %al,%eax
f01229f4:	c1 e0 04             	shl    $0x4,%eax
f01229f7:	89 c2                	mov    %eax,%edx
f01229f9:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f01229ff:	01 d0                	add    %edx,%eax
f0122a01:	48                   	dec    %eax
f0122a02:	89 85 08 ff ff ff    	mov    %eax,-0xf8(%ebp)
f0122a08:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f0122a0e:	ba 00 00 00 00       	mov    $0x0,%edx
f0122a13:	f7 b5 0c ff ff ff    	divl   -0xf4(%ebp)
f0122a19:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f0122a1f:	29 d0                	sub    %edx,%eax
f0122a21:	01 d8                	add    %ebx,%eax
f0122a23:	2d 00 80 2f 09       	sub    $0x92f8000,%eax
f0122a28:	39 c1                	cmp    %eax,%ecx
f0122a2a:	74 17                	je     f0122a43 <test_kfree_bestfirstfit+0xb00>
f0122a2c:	83 ec 04             	sub    $0x4,%esp
f0122a2f:	68 60 b4 13 f0       	push   $0xf013b460
f0122a34:	68 e8 06 00 00       	push   $0x6e8
f0122a39:	68 7a b3 13 f0       	push   $0xf013b37a
f0122a3e:	e8 c2 d7 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0122a43:	e8 80 13 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0122a48:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0122a4b:	74 17                	je     f0122a64 <test_kfree_bestfirstfit+0xb21>
f0122a4d:	83 ec 04             	sub    $0x4,%esp
f0122a50:	68 94 b3 13 f0       	push   $0xf013b394
f0122a55:	68 e9 06 00 00       	push   $0x6e9
f0122a5a:	68 7a b3 13 f0       	push   $0xf013b37a
f0122a5f:	e8 a1 d7 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 4) panic("Wrong allocation: pages are not loaded successfully into memory");
f0122a64:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0122a67:	e8 31 a1 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0122a6c:	29 c3                	sub    %eax,%ebx
f0122a6e:	89 d8                	mov    %ebx,%eax
f0122a70:	83 f8 04             	cmp    $0x4,%eax
f0122a73:	74 17                	je     f0122a8c <test_kfree_bestfirstfit+0xb49>
f0122a75:	83 ec 04             	sub    $0x4,%esp
f0122a78:	68 fc b3 13 f0       	push   $0xf013b3fc
f0122a7d:	68 ea 06 00 00       	push   $0x6ea
f0122a82:	68 7a b3 13 f0       	push   $0xf013b37a
f0122a87:	e8 79 d7 fd ff       	call   f0100205 <_panic>
		lastIndices[7] = (14*kilo)/sizeof(char) - 1;
f0122a8c:	c7 85 84 fe ff ff ff 	movl   $0x37ff,-0x17c(%ebp)
f0122a93:	37 00 00 
		ptr = (char*)ptr_allocations[7];
f0122a96:	8b 85 e4 fd ff ff    	mov    -0x21c(%ebp),%eax
f0122a9c:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[7]; ++i)
f0122a9f:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0122aa6:	eb 0e                	jmp    f0122ab6 <test_kfree_bestfirstfit+0xb73>
		{
			ptr[i] = 7 ;
f0122aa8:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0122aab:	8b 45 80             	mov    -0x80(%ebp),%eax
f0122aae:	01 d0                	add    %edx,%eax
f0122ab0:	c6 00 07             	movb   $0x7,(%eax)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 13*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 4) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[7] = (14*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[7];
		for (i = 0; i < lastIndices[7]; ++i)
f0122ab3:	ff 45 f4             	incl   -0xc(%ebp)
f0122ab6:	8b 85 84 fe ff ff    	mov    -0x17c(%ebp),%eax
f0122abc:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0122abf:	7f e7                	jg     f0122aa8 <test_kfree_bestfirstfit+0xb65>
	}

	//kfree some of the allocated spaces [15%]
	{
		//kfree 1st 2 MB
		int freeFrames = sys_calculate_free_frames() ;
f0122ac1:	e8 d7 a0 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0122ac6:	89 85 04 ff ff ff    	mov    %eax,-0xfc(%ebp)
		int freeDiskFrames = pf_calculate_free_frames() ;
f0122acc:	e8 f7 12 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0122ad1:	89 85 00 ff ff ff    	mov    %eax,-0x100(%ebp)
		kfree(ptr_allocations[0]);
f0122ad7:	8b 85 c8 fd ff ff    	mov    -0x238(%ebp),%eax
f0122add:	83 ec 0c             	sub    $0xc,%esp
f0122ae0:	50                   	push   %eax
f0122ae1:	e8 6a 4e fe ff       	call   f0107950 <kfree>
f0122ae6:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0122ae9:	e8 da 12 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0122aee:	3b 85 00 ff ff ff    	cmp    -0x100(%ebp),%eax
f0122af4:	74 17                	je     f0122b0d <test_kfree_bestfirstfit+0xbca>
f0122af6:	83 ec 04             	sub    $0x4,%esp
f0122af9:	68 94 b3 13 f0       	push   $0xf013b394
f0122afe:	68 f9 06 00 00       	push   $0x6f9
f0122b03:	68 7a b3 13 f0       	push   $0xf013b37a
f0122b08:	e8 f8 d6 fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512 ) panic("Wrong kfree: pages in memory are not freed correctly");
f0122b0d:	e8 8b a0 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0122b12:	89 c2                	mov    %eax,%edx
f0122b14:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f0122b1a:	29 c2                	sub    %eax,%edx
f0122b1c:	89 d0                	mov    %edx,%eax
f0122b1e:	3d 00 02 00 00       	cmp    $0x200,%eax
f0122b23:	74 17                	je     f0122b3c <test_kfree_bestfirstfit+0xbf9>
f0122b25:	83 ec 04             	sub    $0x4,%esp
f0122b28:	68 04 bb 13 f0       	push   $0xf013bb04
f0122b2d:	68 fa 06 00 00       	push   $0x6fa
f0122b32:	68 7a b3 13 f0       	push   $0xf013b37a
f0122b37:	e8 c9 d6 fd ff       	call   f0100205 <_panic>

		//kfree 1st 2 KB
		freeFrames = sys_calculate_free_frames() ;
f0122b3c:	e8 5c a0 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0122b41:	89 85 04 ff ff ff    	mov    %eax,-0xfc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0122b47:	e8 7c 12 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0122b4c:	89 85 00 ff ff ff    	mov    %eax,-0x100(%ebp)
		kfree(ptr_allocations[2]);
f0122b52:	8b 85 d0 fd ff ff    	mov    -0x230(%ebp),%eax
f0122b58:	83 ec 0c             	sub    $0xc,%esp
f0122b5b:	50                   	push   %eax
f0122b5c:	e8 ef 4d fe ff       	call   f0107950 <kfree>
f0122b61:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0122b64:	e8 5f 12 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0122b69:	3b 85 00 ff ff ff    	cmp    -0x100(%ebp),%eax
f0122b6f:	74 17                	je     f0122b88 <test_kfree_bestfirstfit+0xc45>
f0122b71:	83 ec 04             	sub    $0x4,%esp
f0122b74:	68 94 b3 13 f0       	push   $0xf013b394
f0122b79:	68 00 07 00 00       	push   $0x700
f0122b7e:	68 7a b3 13 f0       	push   $0xf013b37a
f0122b83:	e8 7d d6 fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 1 ) panic("Wrong kfree: pages in memory are not freed correctly");
f0122b88:	e8 10 a0 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0122b8d:	89 c2                	mov    %eax,%edx
f0122b8f:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f0122b95:	29 c2                	sub    %eax,%edx
f0122b97:	89 d0                	mov    %edx,%eax
f0122b99:	83 f8 01             	cmp    $0x1,%eax
f0122b9c:	74 17                	je     f0122bb5 <test_kfree_bestfirstfit+0xc72>
f0122b9e:	83 ec 04             	sub    $0x4,%esp
f0122ba1:	68 04 bb 13 f0       	push   $0xf013bb04
f0122ba6:	68 01 07 00 00       	push   $0x701
f0122bab:	68 7a b3 13 f0       	push   $0xf013b37a
f0122bb0:	e8 50 d6 fd ff       	call   f0100205 <_panic>

		//kfree 2nd 2 MB
		freeFrames = sys_calculate_free_frames() ;
f0122bb5:	e8 e3 9f fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0122bba:	89 85 04 ff ff ff    	mov    %eax,-0xfc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0122bc0:	e8 03 12 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0122bc5:	89 85 00 ff ff ff    	mov    %eax,-0x100(%ebp)
		kfree(ptr_allocations[1]);
f0122bcb:	8b 85 cc fd ff ff    	mov    -0x234(%ebp),%eax
f0122bd1:	83 ec 0c             	sub    $0xc,%esp
f0122bd4:	50                   	push   %eax
f0122bd5:	e8 76 4d fe ff       	call   f0107950 <kfree>
f0122bda:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0122bdd:	e8 e6 11 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0122be2:	3b 85 00 ff ff ff    	cmp    -0x100(%ebp),%eax
f0122be8:	74 17                	je     f0122c01 <test_kfree_bestfirstfit+0xcbe>
f0122bea:	83 ec 04             	sub    $0x4,%esp
f0122bed:	68 94 b3 13 f0       	push   $0xf013b394
f0122bf2:	68 07 07 00 00       	push   $0x707
f0122bf7:	68 7a b3 13 f0       	push   $0xf013b37a
f0122bfc:	e8 04 d6 fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512) panic("Wrong kfree: pages in memory are not freed correctly");
f0122c01:	e8 97 9f fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0122c06:	89 c2                	mov    %eax,%edx
f0122c08:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f0122c0e:	29 c2                	sub    %eax,%edx
f0122c10:	89 d0                	mov    %edx,%eax
f0122c12:	3d 00 02 00 00       	cmp    $0x200,%eax
f0122c17:	74 17                	je     f0122c30 <test_kfree_bestfirstfit+0xced>
f0122c19:	83 ec 04             	sub    $0x4,%esp
f0122c1c:	68 04 bb 13 f0       	push   $0xf013bb04
f0122c21:	68 08 07 00 00       	push   $0x708
f0122c26:	68 7a b3 13 f0       	push   $0xf013b37a
f0122c2b:	e8 d5 d5 fd ff       	call   f0100205 <_panic>

		//kfree 6 MB
		freeFrames = sys_calculate_free_frames() ;
f0122c30:	e8 68 9f fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0122c35:	89 85 04 ff ff ff    	mov    %eax,-0xfc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0122c3b:	e8 88 11 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0122c40:	89 85 00 ff ff ff    	mov    %eax,-0x100(%ebp)
		kfree(ptr_allocations[6]);
f0122c46:	8b 85 e0 fd ff ff    	mov    -0x220(%ebp),%eax
f0122c4c:	83 ec 0c             	sub    $0xc,%esp
f0122c4f:	50                   	push   %eax
f0122c50:	e8 fb 4c fe ff       	call   f0107950 <kfree>
f0122c55:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0122c58:	e8 6b 11 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0122c5d:	3b 85 00 ff ff ff    	cmp    -0x100(%ebp),%eax
f0122c63:	74 17                	je     f0122c7c <test_kfree_bestfirstfit+0xd39>
f0122c65:	83 ec 04             	sub    $0x4,%esp
f0122c68:	68 94 b3 13 f0       	push   $0xf013b394
f0122c6d:	68 0e 07 00 00       	push   $0x70e
f0122c72:	68 7a b3 13 f0       	push   $0xf013b37a
f0122c77:	e8 89 d5 fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 6*Mega/4096) panic("Wrong kfree: pages in memory are not freed correctly");
f0122c7c:	e8 1c 9f fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0122c81:	89 c2                	mov    %eax,%edx
f0122c83:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f0122c89:	29 c2                	sub    %eax,%edx
f0122c8b:	89 d0                	mov    %edx,%eax
f0122c8d:	3d 00 06 00 00       	cmp    $0x600,%eax
f0122c92:	74 17                	je     f0122cab <test_kfree_bestfirstfit+0xd68>
f0122c94:	83 ec 04             	sub    $0x4,%esp
f0122c97:	68 04 bb 13 f0       	push   $0xf013bb04
f0122c9c:	68 0f 07 00 00       	push   $0x70f
f0122ca1:	68 7a b3 13 f0       	push   $0xf013b37a
f0122ca6:	e8 5a d5 fd ff       	call   f0100205 <_panic>
	}

	cprintf("\nkfree: current evaluation = 15%");
f0122cab:	83 ec 0c             	sub    $0xc,%esp
f0122cae:	68 3c bb 13 f0       	push   $0xf013bb3c
f0122cb3:	e8 56 e0 fd ff       	call   f0100d0e <cprintf>
f0122cb8:	83 c4 10             	add    $0x10,%esp

	//Check memory access after kfree [15%]
	{
		//2 KB
		ptr = (char*)ptr_allocations[3];
f0122cbb:	8b 85 d4 fd ff ff    	mov    -0x22c(%ebp),%eax
f0122cc1:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[3]; ++i)
f0122cc4:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0122ccb:	eb 1e                	jmp    f0122ceb <test_kfree_bestfirstfit+0xda8>
		{
			sums[3] += ptr[i] ;
f0122ccd:	8b 95 24 fe ff ff    	mov    -0x1dc(%ebp),%edx
f0122cd3:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0122cd6:	8b 45 80             	mov    -0x80(%ebp),%eax
f0122cd9:	01 c8                	add    %ecx,%eax
f0122cdb:	8a 00                	mov    (%eax),%al
f0122cdd:	0f be c0             	movsbl %al,%eax
f0122ce0:	01 d0                	add    %edx,%eax
f0122ce2:	89 85 24 fe ff ff    	mov    %eax,-0x1dc(%ebp)

	//Check memory access after kfree [15%]
	{
		//2 KB
		ptr = (char*)ptr_allocations[3];
		for (i = 0; i < lastIndices[3]; ++i)
f0122ce8:	ff 45 f4             	incl   -0xc(%ebp)
f0122ceb:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f0122cf1:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0122cf4:	7f d7                	jg     f0122ccd <test_kfree_bestfirstfit+0xd8a>
		{
			sums[3] += ptr[i] ;
		}
		if (sums[3] != 3*lastIndices[3])	panic("kfree: invalid read after freeing some allocations");
f0122cf6:	8b 95 24 fe ff ff    	mov    -0x1dc(%ebp),%edx
f0122cfc:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f0122d02:	89 c1                	mov    %eax,%ecx
f0122d04:	01 c9                	add    %ecx,%ecx
f0122d06:	01 c8                	add    %ecx,%eax
f0122d08:	39 c2                	cmp    %eax,%edx
f0122d0a:	74 17                	je     f0122d23 <test_kfree_bestfirstfit+0xde0>
f0122d0c:	83 ec 04             	sub    $0x4,%esp
f0122d0f:	68 60 bb 13 f0       	push   $0xf013bb60
f0122d14:	68 1c 07 00 00       	push   $0x71c
f0122d19:	68 7a b3 13 f0       	push   $0xf013b37a
f0122d1e:	e8 e2 d4 fd ff       	call   f0100205 <_panic>

		//7 KB
		ptr = (char*)ptr_allocations[4];
f0122d23:	8b 85 d8 fd ff ff    	mov    -0x228(%ebp),%eax
f0122d29:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[4]; ++i)
f0122d2c:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0122d33:	eb 1e                	jmp    f0122d53 <test_kfree_bestfirstfit+0xe10>
		{
			sums[4] += ptr[i] ;
f0122d35:	8b 95 28 fe ff ff    	mov    -0x1d8(%ebp),%edx
f0122d3b:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0122d3e:	8b 45 80             	mov    -0x80(%ebp),%eax
f0122d41:	01 c8                	add    %ecx,%eax
f0122d43:	8a 00                	mov    (%eax),%al
f0122d45:	0f be c0             	movsbl %al,%eax
f0122d48:	01 d0                	add    %edx,%eax
f0122d4a:	89 85 28 fe ff ff    	mov    %eax,-0x1d8(%ebp)
		}
		if (sums[3] != 3*lastIndices[3])	panic("kfree: invalid read after freeing some allocations");

		//7 KB
		ptr = (char*)ptr_allocations[4];
		for (i = 0; i < lastIndices[4]; ++i)
f0122d50:	ff 45 f4             	incl   -0xc(%ebp)
f0122d53:	8b 85 78 fe ff ff    	mov    -0x188(%ebp),%eax
f0122d59:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0122d5c:	7f d7                	jg     f0122d35 <test_kfree_bestfirstfit+0xdf2>
		{
			sums[4] += ptr[i] ;
		}
		if (sums[4] != 4*lastIndices[4])	panic("kfree: invalid read after freeing some allocations");
f0122d5e:	8b 85 28 fe ff ff    	mov    -0x1d8(%ebp),%eax
f0122d64:	8b 95 78 fe ff ff    	mov    -0x188(%ebp),%edx
f0122d6a:	c1 e2 02             	shl    $0x2,%edx
f0122d6d:	39 d0                	cmp    %edx,%eax
f0122d6f:	74 17                	je     f0122d88 <test_kfree_bestfirstfit+0xe45>
f0122d71:	83 ec 04             	sub    $0x4,%esp
f0122d74:	68 60 bb 13 f0       	push   $0xf013bb60
f0122d79:	68 24 07 00 00       	push   $0x724
f0122d7e:	68 7a b3 13 f0       	push   $0xf013b37a
f0122d83:	e8 7d d4 fd ff       	call   f0100205 <_panic>

		//3 MB
		ptr = (char*)ptr_allocations[5];
f0122d88:	8b 85 dc fd ff ff    	mov    -0x224(%ebp),%eax
f0122d8e:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[5]; ++i)
f0122d91:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0122d98:	eb 1e                	jmp    f0122db8 <test_kfree_bestfirstfit+0xe75>
		{
			sums[5] += ptr[i] ;
f0122d9a:	8b 95 2c fe ff ff    	mov    -0x1d4(%ebp),%edx
f0122da0:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0122da3:	8b 45 80             	mov    -0x80(%ebp),%eax
f0122da6:	01 c8                	add    %ecx,%eax
f0122da8:	8a 00                	mov    (%eax),%al
f0122daa:	0f be c0             	movsbl %al,%eax
f0122dad:	01 d0                	add    %edx,%eax
f0122daf:	89 85 2c fe ff ff    	mov    %eax,-0x1d4(%ebp)
		}
		if (sums[4] != 4*lastIndices[4])	panic("kfree: invalid read after freeing some allocations");

		//3 MB
		ptr = (char*)ptr_allocations[5];
		for (i = 0; i < lastIndices[5]; ++i)
f0122db5:	ff 45 f4             	incl   -0xc(%ebp)
f0122db8:	8b 85 7c fe ff ff    	mov    -0x184(%ebp),%eax
f0122dbe:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0122dc1:	7f d7                	jg     f0122d9a <test_kfree_bestfirstfit+0xe57>
		{
			sums[5] += ptr[i] ;
		}
		if (sums[5] != 5*lastIndices[5])	panic("kfree: invalid read after freeing some allocations");
f0122dc3:	8b 8d 2c fe ff ff    	mov    -0x1d4(%ebp),%ecx
f0122dc9:	8b 95 7c fe ff ff    	mov    -0x184(%ebp),%edx
f0122dcf:	89 d0                	mov    %edx,%eax
f0122dd1:	c1 e0 02             	shl    $0x2,%eax
f0122dd4:	01 d0                	add    %edx,%eax
f0122dd6:	39 c1                	cmp    %eax,%ecx
f0122dd8:	74 17                	je     f0122df1 <test_kfree_bestfirstfit+0xeae>
f0122dda:	83 ec 04             	sub    $0x4,%esp
f0122ddd:	68 60 bb 13 f0       	push   $0xf013bb60
f0122de2:	68 2c 07 00 00       	push   $0x72c
f0122de7:	68 7a b3 13 f0       	push   $0xf013b37a
f0122dec:	e8 14 d4 fd ff       	call   f0100205 <_panic>

		//14 KB
		ptr = (char*)ptr_allocations[7];
f0122df1:	8b 85 e4 fd ff ff    	mov    -0x21c(%ebp),%eax
f0122df7:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[7]; ++i)
f0122dfa:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0122e01:	eb 1e                	jmp    f0122e21 <test_kfree_bestfirstfit+0xede>
		{
			sums[7] += ptr[i] ;
f0122e03:	8b 95 34 fe ff ff    	mov    -0x1cc(%ebp),%edx
f0122e09:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0122e0c:	8b 45 80             	mov    -0x80(%ebp),%eax
f0122e0f:	01 c8                	add    %ecx,%eax
f0122e11:	8a 00                	mov    (%eax),%al
f0122e13:	0f be c0             	movsbl %al,%eax
f0122e16:	01 d0                	add    %edx,%eax
f0122e18:	89 85 34 fe ff ff    	mov    %eax,-0x1cc(%ebp)
		}
		if (sums[5] != 5*lastIndices[5])	panic("kfree: invalid read after freeing some allocations");

		//14 KB
		ptr = (char*)ptr_allocations[7];
		for (i = 0; i < lastIndices[7]; ++i)
f0122e1e:	ff 45 f4             	incl   -0xc(%ebp)
f0122e21:	8b 85 84 fe ff ff    	mov    -0x17c(%ebp),%eax
f0122e27:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0122e2a:	7f d7                	jg     f0122e03 <test_kfree_bestfirstfit+0xec0>
		{
			sums[7] += ptr[i] ;
		}
		if (sums[7] != 7*lastIndices[7])	panic("kfree: invalid read after freeing some allocations");
f0122e2c:	8b 8d 34 fe ff ff    	mov    -0x1cc(%ebp),%ecx
f0122e32:	8b 95 84 fe ff ff    	mov    -0x17c(%ebp),%edx
f0122e38:	89 d0                	mov    %edx,%eax
f0122e3a:	01 c0                	add    %eax,%eax
f0122e3c:	01 d0                	add    %edx,%eax
f0122e3e:	01 c0                	add    %eax,%eax
f0122e40:	01 d0                	add    %edx,%eax
f0122e42:	39 c1                	cmp    %eax,%ecx
f0122e44:	74 17                	je     f0122e5d <test_kfree_bestfirstfit+0xf1a>
f0122e46:	83 ec 04             	sub    $0x4,%esp
f0122e49:	68 60 bb 13 f0       	push   $0xf013bb60
f0122e4e:	68 34 07 00 00       	push   $0x734
f0122e53:	68 7a b3 13 f0       	push   $0xf013b37a
f0122e58:	e8 a8 d3 fd ff       	call   f0100205 <_panic>
	}
	cprintf("\b\b\b30%");
f0122e5d:	83 ec 0c             	sub    $0xc,%esp
f0122e60:	68 93 bb 13 f0       	push   $0xf013bb93
f0122e65:	e8 a4 de fd ff       	call   f0100d0e <cprintf>
f0122e6a:	83 c4 10             	add    $0x10,%esp

	//Allocate after kfree [15%]
	{
		//Allocate in merged freed space
		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f0122e6d:	e8 2b 9d fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0122e72:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0122e75:	e8 4e 0f fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0122e7a:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[8] = kmalloc(3*Mega);
f0122e7d:	83 ec 0c             	sub    $0xc,%esp
f0122e80:	68 00 00 30 00       	push   $0x300000
f0122e85:	e8 fb 49 fe ff       	call   f0107885 <kmalloc>
f0122e8a:	83 c4 10             	add    $0x10,%esp
f0122e8d:	89 85 e8 fd ff ff    	mov    %eax,-0x218(%ebp)
		if ((uint32) ptr_allocations[8] != (ACTUAL_START)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0122e93:	8b 85 e8 fd ff ff    	mov    -0x218(%ebp),%eax
f0122e99:	89 c1                	mov    %eax,%ecx
f0122e9b:	c7 85 fc fe ff ff 00 	movl   $0x1000,-0x104(%ebp)
f0122ea2:	10 00 00 
f0122ea5:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f0122eab:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0122eb0:	89 85 f8 fe ff ff    	mov    %eax,-0x108(%ebp)
f0122eb6:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f0122ebc:	ba 00 00 00 00       	mov    $0x0,%edx
f0122ec1:	f7 b5 fc fe ff ff    	divl   -0x104(%ebp)
f0122ec7:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f0122ecd:	29 d0                	sub    %edx,%eax
f0122ecf:	89 c3                	mov    %eax,%ebx
f0122ed1:	c7 85 f4 fe ff ff 00 	movl   $0x1000,-0x10c(%ebp)
f0122ed8:	10 00 00 
f0122edb:	a0 40 26 78 f0       	mov    0xf0782640,%al
f0122ee0:	0f b6 d0             	movzbl %al,%edx
f0122ee3:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f0122ee9:	01 d0                	add    %edx,%eax
f0122eeb:	48                   	dec    %eax
f0122eec:	89 85 f0 fe ff ff    	mov    %eax,-0x110(%ebp)
f0122ef2:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f0122ef8:	ba 00 00 00 00       	mov    $0x0,%edx
f0122efd:	f7 b5 f4 fe ff ff    	divl   -0x10c(%ebp)
f0122f03:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f0122f09:	29 d0                	sub    %edx,%eax
f0122f0b:	01 c3                	add    %eax,%ebx
f0122f0d:	c7 85 ec fe ff ff 00 	movl   $0x1000,-0x114(%ebp)
f0122f14:	10 00 00 
f0122f17:	a0 40 26 78 f0       	mov    0xf0782640,%al
f0122f1c:	0f b6 c0             	movzbl %al,%eax
f0122f1f:	c1 e0 04             	shl    $0x4,%eax
f0122f22:	89 c2                	mov    %eax,%edx
f0122f24:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f0122f2a:	01 d0                	add    %edx,%eax
f0122f2c:	48                   	dec    %eax
f0122f2d:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)
f0122f33:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f0122f39:	ba 00 00 00 00       	mov    $0x0,%edx
f0122f3e:	f7 b5 ec fe ff ff    	divl   -0x114(%ebp)
f0122f44:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f0122f4a:	29 d0                	sub    %edx,%eax
f0122f4c:	01 d8                	add    %ebx,%eax
f0122f4e:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f0122f53:	39 c1                	cmp    %eax,%ecx
f0122f55:	74 17                	je     f0122f6e <test_kfree_bestfirstfit+0x102b>
f0122f57:	83 ec 04             	sub    $0x4,%esp
f0122f5a:	68 60 b4 13 f0       	push   $0xf013b460
f0122f5f:	68 3f 07 00 00       	push   $0x73f
f0122f64:	68 7a b3 13 f0       	push   $0xf013b37a
f0122f69:	e8 97 d2 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0122f6e:	e8 55 0e fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0122f73:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0122f76:	74 17                	je     f0122f8f <test_kfree_bestfirstfit+0x104c>
f0122f78:	83 ec 04             	sub    $0x4,%esp
f0122f7b:	68 94 b3 13 f0       	push   $0xf013b394
f0122f80:	68 40 07 00 00       	push   $0x740
f0122f85:	68 7a b3 13 f0       	push   $0xf013b37a
f0122f8a:	e8 76 d2 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
f0122f8f:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0122f92:	e8 06 9c fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0122f97:	29 c3                	sub    %eax,%ebx
f0122f99:	89 d8                	mov    %ebx,%eax
f0122f9b:	3d 00 03 00 00       	cmp    $0x300,%eax
f0122fa0:	74 17                	je     f0122fb9 <test_kfree_bestfirstfit+0x1076>
f0122fa2:	83 ec 04             	sub    $0x4,%esp
f0122fa5:	68 fc b3 13 f0       	push   $0xf013b3fc
f0122faa:	68 41 07 00 00       	push   $0x741
f0122faf:	68 7a b3 13 f0       	push   $0xf013b37a
f0122fb4:	e8 4c d2 fd ff       	call   f0100205 <_panic>
		lastIndices[8] = (3*Mega)/sizeof(char) - 1;
f0122fb9:	c7 85 88 fe ff ff ff 	movl   $0x2fffff,-0x178(%ebp)
f0122fc0:	ff 2f 00 
		ptr = (char*)ptr_allocations[8];
f0122fc3:	8b 85 e8 fd ff ff    	mov    -0x218(%ebp),%eax
f0122fc9:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[8]; ++i)
f0122fcc:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0122fd3:	eb 0e                	jmp    f0122fe3 <test_kfree_bestfirstfit+0x10a0>
		{
			ptr[i] = 8 ;
f0122fd5:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0122fd8:	8b 45 80             	mov    -0x80(%ebp),%eax
f0122fdb:	01 d0                	add    %edx,%eax
f0122fdd:	c6 00 08             	movb   $0x8,(%eax)
		if ((uint32) ptr_allocations[8] != (ACTUAL_START)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[8] = (3*Mega)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[8];
		for (i = 0; i < lastIndices[8]; ++i)
f0122fe0:	ff 45 f4             	incl   -0xc(%ebp)
f0122fe3:	8b 85 88 fe ff ff    	mov    -0x178(%ebp),%eax
f0122fe9:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0122fec:	7f e7                	jg     f0122fd5 <test_kfree_bestfirstfit+0x1092>
		{
			ptr[i] = 8 ;
		}

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f0122fee:	e8 aa 9b fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0122ff3:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0122ff6:	e8 cd 0d fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0122ffb:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[9] = kmalloc(2*kilo);
f0122ffe:	83 ec 0c             	sub    $0xc,%esp
f0123001:	68 00 08 00 00       	push   $0x800
f0123006:	e8 7a 48 fe ff       	call   f0107885 <kmalloc>
f012300b:	83 c4 10             	add    $0x10,%esp
f012300e:	89 85 ec fd ff ff    	mov    %eax,-0x214(%ebp)
		if ((uint32) ptr_allocations[9] != (ACTUAL_START + 3*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0123014:	8b 85 ec fd ff ff    	mov    -0x214(%ebp),%eax
f012301a:	89 c1                	mov    %eax,%ecx
f012301c:	c7 85 e4 fe ff ff 00 	movl   $0x1000,-0x11c(%ebp)
f0123023:	10 00 00 
f0123026:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f012302c:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0123031:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
f0123037:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012303d:	ba 00 00 00 00       	mov    $0x0,%edx
f0123042:	f7 b5 e4 fe ff ff    	divl   -0x11c(%ebp)
f0123048:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012304e:	29 d0                	sub    %edx,%eax
f0123050:	89 c3                	mov    %eax,%ebx
f0123052:	c7 85 dc fe ff ff 00 	movl   $0x1000,-0x124(%ebp)
f0123059:	10 00 00 
f012305c:	a0 40 26 78 f0       	mov    0xf0782640,%al
f0123061:	0f b6 d0             	movzbl %al,%edx
f0123064:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f012306a:	01 d0                	add    %edx,%eax
f012306c:	48                   	dec    %eax
f012306d:	89 85 d8 fe ff ff    	mov    %eax,-0x128(%ebp)
f0123073:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f0123079:	ba 00 00 00 00       	mov    $0x0,%edx
f012307e:	f7 b5 dc fe ff ff    	divl   -0x124(%ebp)
f0123084:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f012308a:	29 d0                	sub    %edx,%eax
f012308c:	01 c3                	add    %eax,%ebx
f012308e:	c7 85 d4 fe ff ff 00 	movl   $0x1000,-0x12c(%ebp)
f0123095:	10 00 00 
f0123098:	a0 40 26 78 f0       	mov    0xf0782640,%al
f012309d:	0f b6 c0             	movzbl %al,%eax
f01230a0:	c1 e0 04             	shl    $0x4,%eax
f01230a3:	89 c2                	mov    %eax,%edx
f01230a5:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f01230ab:	01 d0                	add    %edx,%eax
f01230ad:	48                   	dec    %eax
f01230ae:	89 85 d0 fe ff ff    	mov    %eax,-0x130(%ebp)
f01230b4:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f01230ba:	ba 00 00 00 00       	mov    $0x0,%edx
f01230bf:	f7 b5 d4 fe ff ff    	divl   -0x12c(%ebp)
f01230c5:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f01230cb:	29 d0                	sub    %edx,%eax
f01230cd:	01 d8                	add    %ebx,%eax
f01230cf:	2d 00 c0 cf 09       	sub    $0x9cfc000,%eax
f01230d4:	39 c1                	cmp    %eax,%ecx
f01230d6:	74 17                	je     f01230ef <test_kfree_bestfirstfit+0x11ac>
f01230d8:	83 ec 04             	sub    $0x4,%esp
f01230db:	68 60 b4 13 f0       	push   $0xf013b460
f01230e0:	68 4d 07 00 00       	push   $0x74d
f01230e5:	68 7a b3 13 f0       	push   $0xf013b37a
f01230ea:	e8 16 d1 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01230ef:	e8 d4 0c fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f01230f4:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f01230f7:	74 17                	je     f0123110 <test_kfree_bestfirstfit+0x11cd>
f01230f9:	83 ec 04             	sub    $0x4,%esp
f01230fc:	68 94 b3 13 f0       	push   $0xf013b394
f0123101:	68 4e 07 00 00       	push   $0x74e
f0123106:	68 7a b3 13 f0       	push   $0xf013b37a
f012310b:	e8 f5 d0 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f0123110:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0123113:	e8 85 9a fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0123118:	29 c3                	sub    %eax,%ebx
f012311a:	89 d8                	mov    %ebx,%eax
f012311c:	83 f8 01             	cmp    $0x1,%eax
f012311f:	74 17                	je     f0123138 <test_kfree_bestfirstfit+0x11f5>
f0123121:	83 ec 04             	sub    $0x4,%esp
f0123124:	68 fc b3 13 f0       	push   $0xf013b3fc
f0123129:	68 4f 07 00 00       	push   $0x74f
f012312e:	68 7a b3 13 f0       	push   $0xf013b37a
f0123133:	e8 cd d0 fd ff       	call   f0100205 <_panic>
		lastIndices[9] = (2*kilo)/sizeof(char) - 1;
f0123138:	c7 85 8c fe ff ff ff 	movl   $0x7ff,-0x174(%ebp)
f012313f:	07 00 00 
		ptr = (char*)ptr_allocations[9];
f0123142:	8b 85 ec fd ff ff    	mov    -0x214(%ebp),%eax
f0123148:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[9]; ++i)
f012314b:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0123152:	eb 0e                	jmp    f0123162 <test_kfree_bestfirstfit+0x121f>
		{
			ptr[i] = 9 ;
f0123154:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0123157:	8b 45 80             	mov    -0x80(%ebp),%eax
f012315a:	01 d0                	add    %edx,%eax
f012315c:	c6 00 09             	movb   $0x9,(%eax)
		if ((uint32) ptr_allocations[9] != (ACTUAL_START + 3*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[9] = (2*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[9];
		for (i = 0; i < lastIndices[9]; ++i)
f012315f:	ff 45 f4             	incl   -0xc(%ebp)
f0123162:	8b 85 8c fe ff ff    	mov    -0x174(%ebp),%eax
f0123168:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012316b:	7f e7                	jg     f0123154 <test_kfree_bestfirstfit+0x1211>
		{
			ptr[i] = 9 ;
		}

		//1 MB
		freeFrames = sys_calculate_free_frames() ;
f012316d:	e8 2b 9a fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0123172:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0123175:	e8 4e 0c fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f012317a:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[10] = kmalloc(1*Mega);
f012317d:	83 ec 0c             	sub    $0xc,%esp
f0123180:	68 00 00 10 00       	push   $0x100000
f0123185:	e8 fb 46 fe ff       	call   f0107885 <kmalloc>
f012318a:	83 c4 10             	add    $0x10,%esp
f012318d:	89 85 f0 fd ff ff    	mov    %eax,-0x210(%ebp)
		if ((uint32) ptr_allocations[10] != (ACTUAL_START + 3*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0123193:	8b 85 f0 fd ff ff    	mov    -0x210(%ebp),%eax
f0123199:	89 c1                	mov    %eax,%ecx
f012319b:	c7 85 cc fe ff ff 00 	movl   $0x1000,-0x134(%ebp)
f01231a2:	10 00 00 
f01231a5:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f01231ab:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01231b0:	89 85 c8 fe ff ff    	mov    %eax,-0x138(%ebp)
f01231b6:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f01231bc:	ba 00 00 00 00       	mov    $0x0,%edx
f01231c1:	f7 b5 cc fe ff ff    	divl   -0x134(%ebp)
f01231c7:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f01231cd:	29 d0                	sub    %edx,%eax
f01231cf:	89 c3                	mov    %eax,%ebx
f01231d1:	c7 85 c4 fe ff ff 00 	movl   $0x1000,-0x13c(%ebp)
f01231d8:	10 00 00 
f01231db:	a0 40 26 78 f0       	mov    0xf0782640,%al
f01231e0:	0f b6 d0             	movzbl %al,%edx
f01231e3:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f01231e9:	01 d0                	add    %edx,%eax
f01231eb:	48                   	dec    %eax
f01231ec:	89 85 c0 fe ff ff    	mov    %eax,-0x140(%ebp)
f01231f2:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f01231f8:	ba 00 00 00 00       	mov    $0x0,%edx
f01231fd:	f7 b5 c4 fe ff ff    	divl   -0x13c(%ebp)
f0123203:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f0123209:	29 d0                	sub    %edx,%eax
f012320b:	01 c3                	add    %eax,%ebx
f012320d:	c7 85 bc fe ff ff 00 	movl   $0x1000,-0x144(%ebp)
f0123214:	10 00 00 
f0123217:	a0 40 26 78 f0       	mov    0xf0782640,%al
f012321c:	0f b6 c0             	movzbl %al,%eax
f012321f:	c1 e0 04             	shl    $0x4,%eax
f0123222:	89 c2                	mov    %eax,%edx
f0123224:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f012322a:	01 d0                	add    %edx,%eax
f012322c:	48                   	dec    %eax
f012322d:	89 85 b8 fe ff ff    	mov    %eax,-0x148(%ebp)
f0123233:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f0123239:	ba 00 00 00 00       	mov    $0x0,%edx
f012323e:	f7 b5 bc fe ff ff    	divl   -0x144(%ebp)
f0123244:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f012324a:	29 d0                	sub    %edx,%eax
f012324c:	01 d8                	add    %ebx,%eax
f012324e:	2d 00 b0 cf 09       	sub    $0x9cfb000,%eax
f0123253:	39 c1                	cmp    %eax,%ecx
f0123255:	74 17                	je     f012326e <test_kfree_bestfirstfit+0x132b>
f0123257:	83 ec 04             	sub    $0x4,%esp
f012325a:	68 60 b4 13 f0       	push   $0xf013b460
f012325f:	68 5b 07 00 00       	push   $0x75b
f0123264:	68 7a b3 13 f0       	push   $0xf013b37a
f0123269:	e8 97 cf fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012326e:	e8 55 0b fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0123273:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0123276:	74 17                	je     f012328f <test_kfree_bestfirstfit+0x134c>
f0123278:	83 ec 04             	sub    $0x4,%esp
f012327b:	68 94 b3 13 f0       	push   $0xf013b394
f0123280:	68 5c 07 00 00       	push   $0x75c
f0123285:	68 7a b3 13 f0       	push   $0xf013b37a
f012328a:	e8 76 cf fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: pages are not loaded successfully into memory");
f012328f:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0123292:	e8 06 99 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0123297:	29 c3                	sub    %eax,%ebx
f0123299:	89 d8                	mov    %ebx,%eax
f012329b:	3d 00 01 00 00       	cmp    $0x100,%eax
f01232a0:	74 17                	je     f01232b9 <test_kfree_bestfirstfit+0x1376>
f01232a2:	83 ec 04             	sub    $0x4,%esp
f01232a5:	68 fc b3 13 f0       	push   $0xf013b3fc
f01232aa:	68 5d 07 00 00       	push   $0x75d
f01232af:	68 7a b3 13 f0       	push   $0xf013b37a
f01232b4:	e8 4c cf fd ff       	call   f0100205 <_panic>
		lastIndices[10] = (1*Mega)/sizeof(char) - 1;
f01232b9:	c7 85 90 fe ff ff ff 	movl   $0xfffff,-0x170(%ebp)
f01232c0:	ff 0f 00 
		ptr = (char*)ptr_allocations[10];
f01232c3:	8b 85 f0 fd ff ff    	mov    -0x210(%ebp),%eax
f01232c9:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[10]; ++i)
f01232cc:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01232d3:	eb 0e                	jmp    f01232e3 <test_kfree_bestfirstfit+0x13a0>
		{
			ptr[i] = 10 ;
f01232d5:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01232d8:	8b 45 80             	mov    -0x80(%ebp),%eax
f01232db:	01 d0                	add    %edx,%eax
f01232dd:	c6 00 0a             	movb   $0xa,(%eax)
		if ((uint32) ptr_allocations[10] != (ACTUAL_START + 3*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[10] = (1*Mega)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[10];
		for (i = 0; i < lastIndices[10]; ++i)
f01232e0:	ff 45 f4             	incl   -0xc(%ebp)
f01232e3:	8b 85 90 fe ff ff    	mov    -0x170(%ebp),%eax
f01232e9:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01232ec:	7f e7                	jg     f01232d5 <test_kfree_bestfirstfit+0x1392>
		{
			ptr[i] = 10 ;
		}
	}
	cprintf("\b\b\b45%");
f01232ee:	83 ec 0c             	sub    $0xc,%esp
f01232f1:	68 9a bb 13 f0       	push   $0xf013bb9a
f01232f6:	e8 13 da fd ff       	call   f0100d0e <cprintf>
f01232fb:	83 c4 10             	add    $0x10,%esp

	//kfree remaining allocated spaces [15%]
	{
		//kfree 7 KB
		freeFrames = sys_calculate_free_frames() ;
f01232fe:	e8 9a 98 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0123303:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0123306:	e8 bd 0a fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f012330b:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[4]);
f012330e:	8b 85 d8 fd ff ff    	mov    -0x228(%ebp),%eax
f0123314:	83 ec 0c             	sub    $0xc,%esp
f0123317:	50                   	push   %eax
f0123318:	e8 33 46 fe ff       	call   f0107950 <kfree>
f012331d:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0123320:	e8 a3 0a fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0123325:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0123328:	74 17                	je     f0123341 <test_kfree_bestfirstfit+0x13fe>
f012332a:	83 ec 04             	sub    $0x4,%esp
f012332d:	68 94 b3 13 f0       	push   $0xf013b394
f0123332:	68 6d 07 00 00       	push   $0x76d
f0123337:	68 7a b3 13 f0       	push   $0xf013b37a
f012333c:	e8 c4 ce fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 2) panic("Wrong kfree: pages in memory are not freed correctly");
f0123341:	e8 57 98 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0123346:	89 c2                	mov    %eax,%edx
f0123348:	8b 45 d0             	mov    -0x30(%ebp),%eax
f012334b:	29 c2                	sub    %eax,%edx
f012334d:	89 d0                	mov    %edx,%eax
f012334f:	83 f8 02             	cmp    $0x2,%eax
f0123352:	74 17                	je     f012336b <test_kfree_bestfirstfit+0x1428>
f0123354:	83 ec 04             	sub    $0x4,%esp
f0123357:	68 04 bb 13 f0       	push   $0xf013bb04
f012335c:	68 6e 07 00 00       	push   $0x76e
f0123361:	68 7a b3 13 f0       	push   $0xf013b37a
f0123366:	e8 9a ce fd ff       	call   f0100205 <_panic>

		//kfree 3 MB
		freeFrames = sys_calculate_free_frames() ;
f012336b:	e8 2d 98 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0123370:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0123373:	e8 50 0a fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0123378:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[5]);
f012337b:	8b 85 dc fd ff ff    	mov    -0x224(%ebp),%eax
f0123381:	83 ec 0c             	sub    $0xc,%esp
f0123384:	50                   	push   %eax
f0123385:	e8 c6 45 fe ff       	call   f0107950 <kfree>
f012338a:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012338d:	e8 36 0a fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0123392:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0123395:	74 17                	je     f01233ae <test_kfree_bestfirstfit+0x146b>
f0123397:	83 ec 04             	sub    $0x4,%esp
f012339a:	68 94 b3 13 f0       	push   $0xf013b394
f012339f:	68 74 07 00 00       	push   $0x774
f01233a4:	68 7a b3 13 f0       	push   $0xf013b37a
f01233a9:	e8 57 ce fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 3*Mega/4096) panic("Wrong kfree: pages in memory are not freed correctly");
f01233ae:	e8 ea 97 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f01233b3:	89 c2                	mov    %eax,%edx
f01233b5:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01233b8:	29 c2                	sub    %eax,%edx
f01233ba:	89 d0                	mov    %edx,%eax
f01233bc:	3d 00 03 00 00       	cmp    $0x300,%eax
f01233c1:	74 17                	je     f01233da <test_kfree_bestfirstfit+0x1497>
f01233c3:	83 ec 04             	sub    $0x4,%esp
f01233c6:	68 04 bb 13 f0       	push   $0xf013bb04
f01233cb:	68 75 07 00 00       	push   $0x775
f01233d0:	68 7a b3 13 f0       	push   $0xf013b37a
f01233d5:	e8 2b ce fd ff       	call   f0100205 <_panic>

		//kfree 2nd 2 KB
		freeFrames = sys_calculate_free_frames() ;
f01233da:	e8 be 97 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f01233df:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01233e2:	e8 e1 09 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f01233e7:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[3]);
f01233ea:	8b 85 d4 fd ff ff    	mov    -0x22c(%ebp),%eax
f01233f0:	83 ec 0c             	sub    $0xc,%esp
f01233f3:	50                   	push   %eax
f01233f4:	e8 57 45 fe ff       	call   f0107950 <kfree>
f01233f9:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01233fc:	e8 c7 09 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0123401:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0123404:	74 17                	je     f012341d <test_kfree_bestfirstfit+0x14da>
f0123406:	83 ec 04             	sub    $0x4,%esp
f0123409:	68 94 b3 13 f0       	push   $0xf013b394
f012340e:	68 7b 07 00 00       	push   $0x77b
f0123413:	68 7a b3 13 f0       	push   $0xf013b37a
f0123418:	e8 e8 cd fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 1) panic("Wrong kfree: pages in memory are not freed correctly");
f012341d:	e8 7b 97 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0123422:	89 c2                	mov    %eax,%edx
f0123424:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0123427:	29 c2                	sub    %eax,%edx
f0123429:	89 d0                	mov    %edx,%eax
f012342b:	83 f8 01             	cmp    $0x1,%eax
f012342e:	74 17                	je     f0123447 <test_kfree_bestfirstfit+0x1504>
f0123430:	83 ec 04             	sub    $0x4,%esp
f0123433:	68 04 bb 13 f0       	push   $0xf013bb04
f0123438:	68 7c 07 00 00       	push   $0x77c
f012343d:	68 7a b3 13 f0       	push   $0xf013b37a
f0123442:	e8 be cd fd ff       	call   f0100205 <_panic>

		//kfree 14 KB
		freeFrames = sys_calculate_free_frames() ;
f0123447:	e8 51 97 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f012344c:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012344f:	e8 74 09 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0123454:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[7]);
f0123457:	8b 85 e4 fd ff ff    	mov    -0x21c(%ebp),%eax
f012345d:	83 ec 0c             	sub    $0xc,%esp
f0123460:	50                   	push   %eax
f0123461:	e8 ea 44 fe ff       	call   f0107950 <kfree>
f0123466:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0123469:	e8 5a 09 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f012346e:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0123471:	74 17                	je     f012348a <test_kfree_bestfirstfit+0x1547>
f0123473:	83 ec 04             	sub    $0x4,%esp
f0123476:	68 94 b3 13 f0       	push   $0xf013b394
f012347b:	68 82 07 00 00       	push   $0x782
f0123480:	68 7a b3 13 f0       	push   $0xf013b37a
f0123485:	e8 7b cd fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 4) panic("Wrong kfree: pages in memory are not freed correctly");
f012348a:	e8 0e 97 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f012348f:	89 c2                	mov    %eax,%edx
f0123491:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0123494:	29 c2                	sub    %eax,%edx
f0123496:	89 d0                	mov    %edx,%eax
f0123498:	83 f8 04             	cmp    $0x4,%eax
f012349b:	74 17                	je     f01234b4 <test_kfree_bestfirstfit+0x1571>
f012349d:	83 ec 04             	sub    $0x4,%esp
f01234a0:	68 04 bb 13 f0       	push   $0xf013bb04
f01234a5:	68 83 07 00 00       	push   $0x783
f01234aa:	68 7a b3 13 f0       	push   $0xf013b37a
f01234af:	e8 51 cd fd ff       	call   f0100205 <_panic>

		//kfree 3 MB
		freeFrames = sys_calculate_free_frames() ;
f01234b4:	e8 e4 96 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f01234b9:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01234bc:	e8 07 09 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f01234c1:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[8]);
f01234c4:	8b 85 e8 fd ff ff    	mov    -0x218(%ebp),%eax
f01234ca:	83 ec 0c             	sub    $0xc,%esp
f01234cd:	50                   	push   %eax
f01234ce:	e8 7d 44 fe ff       	call   f0107950 <kfree>
f01234d3:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01234d6:	e8 ed 08 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f01234db:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f01234de:	74 17                	je     f01234f7 <test_kfree_bestfirstfit+0x15b4>
f01234e0:	83 ec 04             	sub    $0x4,%esp
f01234e3:	68 94 b3 13 f0       	push   $0xf013b394
f01234e8:	68 89 07 00 00       	push   $0x789
f01234ed:	68 7a b3 13 f0       	push   $0xf013b37a
f01234f2:	e8 0e cd fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 3*Mega/4096) panic("Wrong kfree: pages in memory are not freed correctly");
f01234f7:	e8 a1 96 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f01234fc:	89 c2                	mov    %eax,%edx
f01234fe:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0123501:	29 c2                	sub    %eax,%edx
f0123503:	89 d0                	mov    %edx,%eax
f0123505:	3d 00 03 00 00       	cmp    $0x300,%eax
f012350a:	74 17                	je     f0123523 <test_kfree_bestfirstfit+0x15e0>
f012350c:	83 ec 04             	sub    $0x4,%esp
f012350f:	68 04 bb 13 f0       	push   $0xf013bb04
f0123514:	68 8a 07 00 00       	push   $0x78a
f0123519:	68 7a b3 13 f0       	push   $0xf013b37a
f012351e:	e8 e2 cc fd ff       	call   f0100205 <_panic>

		//kfree 2 KB
		freeFrames = sys_calculate_free_frames() ;
f0123523:	e8 75 96 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0123528:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012352b:	e8 98 08 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0123530:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[9]);
f0123533:	8b 85 ec fd ff ff    	mov    -0x214(%ebp),%eax
f0123539:	83 ec 0c             	sub    $0xc,%esp
f012353c:	50                   	push   %eax
f012353d:	e8 0e 44 fe ff       	call   f0107950 <kfree>
f0123542:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0123545:	e8 7e 08 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f012354a:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f012354d:	74 17                	je     f0123566 <test_kfree_bestfirstfit+0x1623>
f012354f:	83 ec 04             	sub    $0x4,%esp
f0123552:	68 94 b3 13 f0       	push   $0xf013b394
f0123557:	68 90 07 00 00       	push   $0x790
f012355c:	68 7a b3 13 f0       	push   $0xf013b37a
f0123561:	e8 9f cc fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 1) panic("Wrong kfree: pages in memory are not freed correctly");
f0123566:	e8 32 96 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f012356b:	89 c2                	mov    %eax,%edx
f012356d:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0123570:	29 c2                	sub    %eax,%edx
f0123572:	89 d0                	mov    %edx,%eax
f0123574:	83 f8 01             	cmp    $0x1,%eax
f0123577:	74 17                	je     f0123590 <test_kfree_bestfirstfit+0x164d>
f0123579:	83 ec 04             	sub    $0x4,%esp
f012357c:	68 04 bb 13 f0       	push   $0xf013bb04
f0123581:	68 91 07 00 00       	push   $0x791
f0123586:	68 7a b3 13 f0       	push   $0xf013b37a
f012358b:	e8 75 cc fd ff       	call   f0100205 <_panic>

		//kfree 1 MB
		freeFrames = sys_calculate_free_frames() ;
f0123590:	e8 08 96 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0123595:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0123598:	e8 2b 08 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f012359d:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[10]);
f01235a0:	8b 85 f0 fd ff ff    	mov    -0x210(%ebp),%eax
f01235a6:	83 ec 0c             	sub    $0xc,%esp
f01235a9:	50                   	push   %eax
f01235aa:	e8 a1 43 fe ff       	call   f0107950 <kfree>
f01235af:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01235b2:	e8 11 08 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f01235b7:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f01235ba:	74 17                	je     f01235d3 <test_kfree_bestfirstfit+0x1690>
f01235bc:	83 ec 04             	sub    $0x4,%esp
f01235bf:	68 94 b3 13 f0       	push   $0xf013b394
f01235c4:	68 97 07 00 00       	push   $0x797
f01235c9:	68 7a b3 13 f0       	push   $0xf013b37a
f01235ce:	e8 32 cc fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 1*Mega/4096) panic("Wrong kfree: pages in memory are not freed correctly");
f01235d3:	e8 c5 95 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f01235d8:	89 c2                	mov    %eax,%edx
f01235da:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01235dd:	29 c2                	sub    %eax,%edx
f01235df:	89 d0                	mov    %edx,%eax
f01235e1:	3d 00 01 00 00       	cmp    $0x100,%eax
f01235e6:	74 17                	je     f01235ff <test_kfree_bestfirstfit+0x16bc>
f01235e8:	83 ec 04             	sub    $0x4,%esp
f01235eb:	68 04 bb 13 f0       	push   $0xf013bb04
f01235f0:	68 98 07 00 00       	push   $0x798
f01235f5:	68 7a b3 13 f0       	push   $0xf013b37a
f01235fa:	e8 06 cc fd ff       	call   f0100205 <_panic>

		if(start_freeFrames != (sys_calculate_free_frames())) {panic("Wrong kfree: not all pages removed correctly at end");}
f01235ff:	e8 99 95 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0123604:	89 c2                	mov    %eax,%edx
f0123606:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0123609:	39 c2                	cmp    %eax,%edx
f012360b:	74 17                	je     f0123624 <test_kfree_bestfirstfit+0x16e1>
f012360d:	83 ec 04             	sub    $0x4,%esp
f0123610:	68 a4 bb 13 f0       	push   $0xf013bba4
f0123615:	68 9a 07 00 00       	push   $0x79a
f012361a:	68 7a b3 13 f0       	push   $0xf013b37a
f012361f:	e8 e1 cb fd ff       	call   f0100205 <_panic>
	}
	cprintf("\b\b\b60%");
f0123624:	83 ec 0c             	sub    $0xc,%esp
f0123627:	68 d8 bb 13 f0       	push   $0xf013bbd8
f012362c:	e8 dd d6 fd ff       	call   f0100d0e <cprintf>
f0123631:	83 c4 10             	add    $0x10,%esp

	//Check memory access after kfree [15%]
	{
		//Bypass the PAGE FAULT on <MOVB immediate, reg> instruction by setting its length
		//and continue executing the remaining code
		sys_bypassPageFault(3);
f0123634:	83 ec 0c             	sub    $0xc,%esp
f0123637:	6a 03                	push   $0x3
f0123639:	e8 ff 99 fe ff       	call   f010d03d <sys_bypassPageFault>
f012363e:	83 c4 10             	add    $0x10,%esp

		for (i = 0; i < 10; ++i)
f0123641:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0123648:	e9 82 00 00 00       	jmp    f01236cf <test_kfree_bestfirstfit+0x178c>
		{
			ptr = (char *) ptr_allocations[i];
f012364d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0123650:	8b 84 85 c8 fd ff ff 	mov    -0x238(%ebp,%eax,4),%eax
f0123657:	89 45 80             	mov    %eax,-0x80(%ebp)
			ptr[0] = 10;
f012365a:	8b 45 80             	mov    -0x80(%ebp),%eax
f012365d:	c6 00 0a             	movb   $0xa,(%eax)
			//cprintf("\n\ncr2 = %x, faulted addr = %x", sys_rcr2(), (uint32)&(ptr[0]));
			if (sys_rcr2() != (uint32)&(ptr[0])) panic("kfree: successful access to freed space!! it should not be succeeded");
f0123660:	e8 c6 99 fe ff       	call   f010d02b <sys_rcr2>
f0123665:	89 c2                	mov    %eax,%edx
f0123667:	8b 45 80             	mov    -0x80(%ebp),%eax
f012366a:	39 c2                	cmp    %eax,%edx
f012366c:	74 17                	je     f0123685 <test_kfree_bestfirstfit+0x1742>
f012366e:	83 ec 04             	sub    $0x4,%esp
f0123671:	68 e0 bb 13 f0       	push   $0xf013bbe0
f0123676:	68 a9 07 00 00       	push   $0x7a9
f012367b:	68 7a b3 13 f0       	push   $0xf013b37a
f0123680:	e8 80 cb fd ff       	call   f0100205 <_panic>
			ptr[lastIndices[i]] = 10;
f0123685:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0123688:	8b 84 85 68 fe ff ff 	mov    -0x198(%ebp,%eax,4),%eax
f012368f:	89 c2                	mov    %eax,%edx
f0123691:	8b 45 80             	mov    -0x80(%ebp),%eax
f0123694:	01 d0                	add    %edx,%eax
f0123696:	c6 00 0a             	movb   $0xa,(%eax)
			if (sys_rcr2() != (uint32)&(ptr[lastIndices[i]])) panic("kfree: successful access to freed space!! it should not be succeeded");
f0123699:	e8 8d 99 fe ff       	call   f010d02b <sys_rcr2>
f012369e:	89 c2                	mov    %eax,%edx
f01236a0:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01236a3:	8b 84 85 68 fe ff ff 	mov    -0x198(%ebp,%eax,4),%eax
f01236aa:	89 c1                	mov    %eax,%ecx
f01236ac:	8b 45 80             	mov    -0x80(%ebp),%eax
f01236af:	01 c8                	add    %ecx,%eax
f01236b1:	39 c2                	cmp    %eax,%edx
f01236b3:	74 17                	je     f01236cc <test_kfree_bestfirstfit+0x1789>
f01236b5:	83 ec 04             	sub    $0x4,%esp
f01236b8:	68 e0 bb 13 f0       	push   $0xf013bbe0
f01236bd:	68 ab 07 00 00       	push   $0x7ab
f01236c2:	68 7a b3 13 f0       	push   $0xf013b37a
f01236c7:	e8 39 cb fd ff       	call   f0100205 <_panic>
	{
		//Bypass the PAGE FAULT on <MOVB immediate, reg> instruction by setting its length
		//and continue executing the remaining code
		sys_bypassPageFault(3);

		for (i = 0; i < 10; ++i)
f01236cc:	ff 45 f4             	incl   -0xc(%ebp)
f01236cf:	83 7d f4 09          	cmpl   $0x9,-0xc(%ebp)
f01236d3:	0f 8e 74 ff ff ff    	jle    f012364d <test_kfree_bestfirstfit+0x170a>
			ptr[lastIndices[i]] = 10;
			if (sys_rcr2() != (uint32)&(ptr[lastIndices[i]])) panic("kfree: successful access to freed space!! it should not be succeeded");
		}

		//set it to 0 again to cancel the bypassing option
		sys_bypassPageFault(0);
f01236d9:	83 ec 0c             	sub    $0xc,%esp
f01236dc:	6a 00                	push   $0x0
f01236de:	e8 5a 99 fe ff       	call   f010d03d <sys_bypassPageFault>
f01236e3:	83 c4 10             	add    $0x10,%esp
	}
	cprintf("\b\b\b75%");
f01236e6:	83 ec 0c             	sub    $0xc,%esp
f01236e9:	68 25 bc 13 f0       	push   $0xf013bc25
f01236ee:	e8 1b d6 fd ff       	call   f0100d0e <cprintf>
f01236f3:	83 c4 10             	add    $0x10,%esp

	//kfree non-exist item [10%]
	{
		//kfree 2 MB
		freeFrames = sys_calculate_free_frames() ;
f01236f6:	e8 a2 94 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f01236fb:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01236fe:	e8 c5 06 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0123703:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[0]);
f0123706:	8b 85 c8 fd ff ff    	mov    -0x238(%ebp),%eax
f012370c:	83 ec 0c             	sub    $0xc,%esp
f012370f:	50                   	push   %eax
f0123710:	e8 3b 42 fe ff       	call   f0107950 <kfree>
f0123715:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0123718:	e8 ab 06 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f012371d:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0123720:	74 17                	je     f0123739 <test_kfree_bestfirstfit+0x17f6>
f0123722:	83 ec 04             	sub    $0x4,%esp
f0123725:	68 94 b3 13 f0       	push   $0xf013b394
f012372a:	68 b9 07 00 00       	push   $0x7b9
f012372f:	68 7a b3 13 f0       	push   $0xf013b37a
f0123734:	e8 cc ca fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 0) panic("Wrong kfree: attempt to kfree a non-existing ptr. It should do nothing");
f0123739:	e8 5f 94 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f012373e:	89 c2                	mov    %eax,%edx
f0123740:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0123743:	39 c2                	cmp    %eax,%edx
f0123745:	74 17                	je     f012375e <test_kfree_bestfirstfit+0x181b>
f0123747:	83 ec 04             	sub    $0x4,%esp
f012374a:	68 2c bc 13 f0       	push   $0xf013bc2c
f012374f:	68 ba 07 00 00       	push   $0x7ba
f0123754:	68 7a b3 13 f0       	push   $0xf013b37a
f0123759:	e8 a7 ca fd ff       	call   f0100205 <_panic>

		//kfree 2 KB
		freeFrames = sys_calculate_free_frames() ;
f012375e:	e8 3a 94 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0123763:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0123766:	e8 5d 06 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f012376b:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[2]);
f012376e:	8b 85 d0 fd ff ff    	mov    -0x230(%ebp),%eax
f0123774:	83 ec 0c             	sub    $0xc,%esp
f0123777:	50                   	push   %eax
f0123778:	e8 d3 41 fe ff       	call   f0107950 <kfree>
f012377d:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0123780:	e8 43 06 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0123785:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0123788:	74 17                	je     f01237a1 <test_kfree_bestfirstfit+0x185e>
f012378a:	83 ec 04             	sub    $0x4,%esp
f012378d:	68 94 b3 13 f0       	push   $0xf013b394
f0123792:	68 c0 07 00 00       	push   $0x7c0
f0123797:	68 7a b3 13 f0       	push   $0xf013b37a
f012379c:	e8 64 ca fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 0) panic("Wrong kfree: attempt to kfree a non-existing ptr. It should do nothing");
f01237a1:	e8 f7 93 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f01237a6:	89 c2                	mov    %eax,%edx
f01237a8:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01237ab:	39 c2                	cmp    %eax,%edx
f01237ad:	74 17                	je     f01237c6 <test_kfree_bestfirstfit+0x1883>
f01237af:	83 ec 04             	sub    $0x4,%esp
f01237b2:	68 2c bc 13 f0       	push   $0xf013bc2c
f01237b7:	68 c1 07 00 00       	push   $0x7c1
f01237bc:	68 7a b3 13 f0       	push   $0xf013b37a
f01237c1:	e8 3f ca fd ff       	call   f0100205 <_panic>

		//kfree 20 KB
		freeFrames = sys_calculate_free_frames() ;
f01237c6:	e8 d2 93 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f01237cb:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01237ce:	e8 f5 05 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f01237d3:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[8]);
f01237d6:	8b 85 e8 fd ff ff    	mov    -0x218(%ebp),%eax
f01237dc:	83 ec 0c             	sub    $0xc,%esp
f01237df:	50                   	push   %eax
f01237e0:	e8 6b 41 fe ff       	call   f0107950 <kfree>
f01237e5:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01237e8:	e8 db 05 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f01237ed:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f01237f0:	74 17                	je     f0123809 <test_kfree_bestfirstfit+0x18c6>
f01237f2:	83 ec 04             	sub    $0x4,%esp
f01237f5:	68 94 b3 13 f0       	push   $0xf013b394
f01237fa:	68 c7 07 00 00       	push   $0x7c7
f01237ff:	68 7a b3 13 f0       	push   $0xf013b37a
f0123804:	e8 fc c9 fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 0) panic("Wrong kfree: attempt to kfree a non-existing ptr. It should do nothing");
f0123809:	e8 8f 93 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f012380e:	89 c2                	mov    %eax,%edx
f0123810:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0123813:	39 c2                	cmp    %eax,%edx
f0123815:	74 17                	je     f012382e <test_kfree_bestfirstfit+0x18eb>
f0123817:	83 ec 04             	sub    $0x4,%esp
f012381a:	68 2c bc 13 f0       	push   $0xf013bc2c
f012381f:	68 c8 07 00 00       	push   $0x7c8
f0123824:	68 7a b3 13 f0       	push   $0xf013b37a
f0123829:	e8 d7 c9 fd ff       	call   f0100205 <_panic>

		//kfree 1 MB
		freeFrames = sys_calculate_free_frames() ;
f012382e:	e8 6a 93 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0123833:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0123836:	e8 8d 05 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f012383b:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[9]);
f012383e:	8b 85 ec fd ff ff    	mov    -0x214(%ebp),%eax
f0123844:	83 ec 0c             	sub    $0xc,%esp
f0123847:	50                   	push   %eax
f0123848:	e8 03 41 fe ff       	call   f0107950 <kfree>
f012384d:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0123850:	e8 73 05 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0123855:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0123858:	74 17                	je     f0123871 <test_kfree_bestfirstfit+0x192e>
f012385a:	83 ec 04             	sub    $0x4,%esp
f012385d:	68 94 b3 13 f0       	push   $0xf013b394
f0123862:	68 ce 07 00 00       	push   $0x7ce
f0123867:	68 7a b3 13 f0       	push   $0xf013b37a
f012386c:	e8 94 c9 fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 0) panic("Wrong kfree: attempt to kfree a non-existing ptr. It should do nothing");
f0123871:	e8 27 93 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0123876:	89 c2                	mov    %eax,%edx
f0123878:	8b 45 d0             	mov    -0x30(%ebp),%eax
f012387b:	39 c2                	cmp    %eax,%edx
f012387d:	74 17                	je     f0123896 <test_kfree_bestfirstfit+0x1953>
f012387f:	83 ec 04             	sub    $0x4,%esp
f0123882:	68 2c bc 13 f0       	push   $0xf013bc2c
f0123887:	68 cf 07 00 00       	push   $0x7cf
f012388c:	68 7a b3 13 f0       	push   $0xf013b37a
f0123891:	e8 6f c9 fd ff       	call   f0100205 <_panic>

	}
	cprintf("\b\b\b85%");
f0123896:	83 ec 0c             	sub    $0xc,%esp
f0123899:	68 73 bc 13 f0       	push   $0xf013bc73
f012389e:	e8 6b d4 fd ff       	call   f0100d0e <cprintf>
f01238a3:	83 c4 10             	add    $0x10,%esp

	//check tables	[15%]
	{
		long long va;
		for (va = KERNEL_HEAP_START; va < (long long)KERNEL_HEAP_MAX; va+=PTSIZE)
f01238a6:	c7 45 e8 00 00 00 f6 	movl   $0xf6000000,-0x18(%ebp)
f01238ad:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f01238b4:	eb 48                	jmp    f01238fe <test_kfree_bestfirstfit+0x19bb>
		{
			uint32 *ptr_table ;
			get_page_table(ptr_page_directory, (uint32)va, &ptr_table);
f01238b6:	8b 55 e8             	mov    -0x18(%ebp),%edx
f01238b9:	a1 3c 26 78 f0       	mov    0xf078263c,%eax
f01238be:	83 ec 04             	sub    $0x4,%esp
f01238c1:	8d 8d c4 fd ff ff    	lea    -0x23c(%ebp),%ecx
f01238c7:	51                   	push   %ecx
f01238c8:	52                   	push   %edx
f01238c9:	50                   	push   %eax
f01238ca:	e8 e2 31 fe ff       	call   f0106ab1 <get_page_table>
f01238cf:	83 c4 10             	add    $0x10,%esp
			if (ptr_table == NULL)
f01238d2:	8b 85 c4 fd ff ff    	mov    -0x23c(%ebp),%eax
f01238d8:	85 c0                	test   %eax,%eax
f01238da:	75 17                	jne    f01238f3 <test_kfree_bestfirstfit+0x19b0>
			{
				panic("Wrong kfree: one of the kernel tables is wrongly removed! Tables should not be removed here in kfree");
f01238dc:	83 ec 04             	sub    $0x4,%esp
f01238df:	68 7c bc 13 f0       	push   $0xf013bc7c
f01238e4:	68 dd 07 00 00       	push   $0x7dd
f01238e9:	68 7a b3 13 f0       	push   $0xf013b37a
f01238ee:	e8 12 c9 fd ff       	call   f0100205 <_panic>
	cprintf("\b\b\b85%");

	//check tables	[15%]
	{
		long long va;
		for (va = KERNEL_HEAP_START; va < (long long)KERNEL_HEAP_MAX; va+=PTSIZE)
f01238f3:	81 45 e8 00 00 40 00 	addl   $0x400000,-0x18(%ebp)
f01238fa:	83 55 ec 00          	adcl   $0x0,-0x14(%ebp)
f01238fe:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0123902:	78 b2                	js     f01238b6 <test_kfree_bestfirstfit+0x1973>
f0123904:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0123908:	7f 09                	jg     f0123913 <test_kfree_bestfirstfit+0x19d0>
f012390a:	81 7d e8 ff ef ff ff 	cmpl   $0xffffefff,-0x18(%ebp)
f0123911:	76 a3                	jbe    f01238b6 <test_kfree_bestfirstfit+0x1973>
			{
				panic("Wrong kfree: one of the kernel tables is wrongly removed! Tables should not be removed here in kfree");
			}
		}
	}
	cprintf("\b\b\b100%\n");
f0123913:	83 ec 0c             	sub    $0xc,%esp
f0123916:	68 5e b5 13 f0       	push   $0xf013b55e
f012391b:	e8 ee d3 fd ff       	call   f0100d0e <cprintf>
f0123920:	83 c4 10             	add    $0x10,%esp



	cprintf("\nCongratulations!! test kfree completed successfully.\n");
f0123923:	83 ec 0c             	sub    $0xc,%esp
f0123926:	68 e4 bc 13 f0       	push   $0xf013bce4
f012392b:	e8 de d3 fd ff       	call   f0100d0e <cprintf>
f0123930:	83 c4 10             	add    $0x10,%esp

	return 1;
f0123933:	b8 01 00 00 00       	mov    $0x1,%eax

}
f0123938:	8d 65 f8             	lea    -0x8(%ebp),%esp
f012393b:	5b                   	pop    %ebx
f012393c:	5f                   	pop    %edi
f012393d:	5d                   	pop    %ebp
f012393e:	c3                   	ret    

f012393f <test_kheap_phys_addr>:

int test_kheap_phys_addr()
{
f012393f:	55                   	push   %ebp
f0123940:	89 e5                	mov    %esp,%ebp
f0123942:	57                   	push   %edi
f0123943:	56                   	push   %esi
f0123944:	53                   	push   %ebx
f0123945:	81 ec dc 02 00 00    	sub    $0x2dc,%esp
	cprintf("==============================================\n");
f012394b:	83 ec 0c             	sub    $0xc,%esp
f012394e:	68 bc b2 13 f0       	push   $0xf013b2bc
f0123953:	e8 b6 d3 fd ff       	call   f0100d0e <cprintf>
f0123958:	83 c4 10             	add    $0x10,%esp
	cprintf("MAKE SURE to have a FRESH RUN for this test\n(i.e. don't run any program/test before it)\n");
f012395b:	83 ec 0c             	sub    $0xc,%esp
f012395e:	68 ec b2 13 f0       	push   $0xf013b2ec
f0123963:	e8 a6 d3 fd ff       	call   f0100d0e <cprintf>
f0123968:	83 c4 10             	add    $0x10,%esp
	cprintf("==============================================\n");
f012396b:	83 ec 0c             	sub    $0xc,%esp
f012396e:	68 bc b2 13 f0       	push   $0xf013b2bc
f0123973:	e8 96 d3 fd ff       	call   f0100d0e <cprintf>
f0123978:	83 c4 10             	add    $0x10,%esp

	char minByte = 1<<7;
f012397b:	c6 45 bf 80          	movb   $0x80,-0x41(%ebp)
	char maxByte = 0x7F;
f012397f:	c6 45 be 7f          	movb   $0x7f,-0x42(%ebp)
	short minShort = 1<<15 ;
f0123983:	66 c7 45 bc 00 80    	movw   $0x8000,-0x44(%ebp)
	short maxShort = 0x7FFF;
f0123989:	66 c7 45 ba ff 7f    	movw   $0x7fff,-0x46(%ebp)
	int minInt = 1<<31 ;
f012398f:	c7 45 b4 00 00 00 80 	movl   $0x80000000,-0x4c(%ebp)
	int maxInt = 0x7FFFFFFF;
f0123996:	c7 45 b0 ff ff ff 7f 	movl   $0x7fffffff,-0x50(%ebp)
	char *byteArr, *byteArr2 ;
	short *shortArr, *shortArr2 ;
	int *intArr;
	struct MyStruct *structArr ;
	int lastIndexOfByte, lastIndexOfByte2, lastIndexOfShort, lastIndexOfShort2, lastIndexOfInt, lastIndexOfStruct;
	int start_freeFrames = sys_calculate_free_frames() ;
f012399d:	e8 fb 91 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f01239a2:	89 45 ac             	mov    %eax,-0x54(%ebp)

	//malloc some spaces
	int i, freeFrames, freeDiskFrames ;
	char* ptr;
	int lastIndices[20] = {0};
f01239a5:	8d 95 c4 fd ff ff    	lea    -0x23c(%ebp),%edx
f01239ab:	b9 14 00 00 00       	mov    $0x14,%ecx
f01239b0:	b8 00 00 00 00       	mov    $0x0,%eax
f01239b5:	89 d7                	mov    %edx,%edi
f01239b7:	f3 ab                	rep stos %eax,%es:(%edi)
	int sums[20] = {0};
f01239b9:	8d 95 74 fd ff ff    	lea    -0x28c(%ebp),%edx
f01239bf:	b9 14 00 00 00       	mov    $0x14,%ecx
f01239c4:	b8 00 00 00 00       	mov    $0x0,%eax
f01239c9:	89 d7                	mov    %edx,%edi
f01239cb:	f3 ab                	rep stos %eax,%es:(%edi)
	void* ptr_allocations[20] = {0};
f01239cd:	8d 95 24 fd ff ff    	lea    -0x2dc(%ebp),%edx
f01239d3:	b9 14 00 00 00       	mov    $0x14,%ecx
f01239d8:	b8 00 00 00 00       	mov    $0x0,%eax
f01239dd:	89 d7                	mov    %edx,%edi
f01239df:	f3 ab                	rep stos %eax,%es:(%edi)
	{
		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f01239e1:	e8 b7 91 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f01239e6:	89 45 a8             	mov    %eax,-0x58(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01239e9:	e8 da 03 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f01239ee:	89 45 a4             	mov    %eax,-0x5c(%ebp)
		ptr_allocations[0] = kmalloc(2*Mega-kilo);
f01239f1:	83 ec 0c             	sub    $0xc,%esp
f01239f4:	68 00 fc 1f 00       	push   $0x1ffc00
f01239f9:	e8 87 3e fe ff       	call   f0107885 <kmalloc>
f01239fe:	83 c4 10             	add    $0x10,%esp
f0123a01:	89 85 24 fd ff ff    	mov    %eax,-0x2dc(%ebp)
		if ((uint32) ptr_allocations[0] !=  (ACTUAL_START)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0123a07:	8b 85 24 fd ff ff    	mov    -0x2dc(%ebp),%eax
f0123a0d:	89 c1                	mov    %eax,%ecx
f0123a0f:	c7 45 a0 00 10 00 00 	movl   $0x1000,-0x60(%ebp)
f0123a16:	8b 45 a0             	mov    -0x60(%ebp),%eax
f0123a19:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0123a1e:	89 45 9c             	mov    %eax,-0x64(%ebp)
f0123a21:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0123a24:	ba 00 00 00 00       	mov    $0x0,%edx
f0123a29:	f7 75 a0             	divl   -0x60(%ebp)
f0123a2c:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0123a2f:	29 d0                	sub    %edx,%eax
f0123a31:	89 c3                	mov    %eax,%ebx
f0123a33:	c7 45 98 00 10 00 00 	movl   $0x1000,-0x68(%ebp)
f0123a3a:	a0 40 26 78 f0       	mov    0xf0782640,%al
f0123a3f:	0f b6 d0             	movzbl %al,%edx
f0123a42:	8b 45 98             	mov    -0x68(%ebp),%eax
f0123a45:	01 d0                	add    %edx,%eax
f0123a47:	48                   	dec    %eax
f0123a48:	89 45 94             	mov    %eax,-0x6c(%ebp)
f0123a4b:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0123a4e:	ba 00 00 00 00       	mov    $0x0,%edx
f0123a53:	f7 75 98             	divl   -0x68(%ebp)
f0123a56:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0123a59:	29 d0                	sub    %edx,%eax
f0123a5b:	01 c3                	add    %eax,%ebx
f0123a5d:	c7 45 90 00 10 00 00 	movl   $0x1000,-0x70(%ebp)
f0123a64:	a0 40 26 78 f0       	mov    0xf0782640,%al
f0123a69:	0f b6 c0             	movzbl %al,%eax
f0123a6c:	c1 e0 04             	shl    $0x4,%eax
f0123a6f:	89 c2                	mov    %eax,%edx
f0123a71:	8b 45 90             	mov    -0x70(%ebp),%eax
f0123a74:	01 d0                	add    %edx,%eax
f0123a76:	48                   	dec    %eax
f0123a77:	89 45 8c             	mov    %eax,-0x74(%ebp)
f0123a7a:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0123a7d:	ba 00 00 00 00       	mov    $0x0,%edx
f0123a82:	f7 75 90             	divl   -0x70(%ebp)
f0123a85:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0123a88:	29 d0                	sub    %edx,%eax
f0123a8a:	01 d8                	add    %ebx,%eax
f0123a8c:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f0123a91:	39 c1                	cmp    %eax,%ecx
f0123a93:	74 17                	je     f0123aac <test_kheap_phys_addr+0x16d>
f0123a95:	83 ec 04             	sub    $0x4,%esp
f0123a98:	68 60 b4 13 f0       	push   $0xf013b460
f0123a9d:	68 0a 08 00 00       	push   $0x80a
f0123aa2:	68 7a b3 13 f0       	push   $0xf013b37a
f0123aa7:	e8 59 c7 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0123aac:	e8 17 03 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0123ab1:	3b 45 a4             	cmp    -0x5c(%ebp),%eax
f0123ab4:	74 17                	je     f0123acd <test_kheap_phys_addr+0x18e>
f0123ab6:	83 ec 04             	sub    $0x4,%esp
f0123ab9:	68 94 b3 13 f0       	push   $0xf013b394
f0123abe:	68 0b 08 00 00       	push   $0x80b
f0123ac3:	68 7a b3 13 f0       	push   $0xf013b37a
f0123ac8:	e8 38 c7 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f0123acd:	8b 5d a8             	mov    -0x58(%ebp),%ebx
f0123ad0:	e8 c8 90 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0123ad5:	29 c3                	sub    %eax,%ebx
f0123ad7:	89 d8                	mov    %ebx,%eax
f0123ad9:	3d 00 02 00 00       	cmp    $0x200,%eax
f0123ade:	74 17                	je     f0123af7 <test_kheap_phys_addr+0x1b8>
f0123ae0:	83 ec 04             	sub    $0x4,%esp
f0123ae3:	68 fc b3 13 f0       	push   $0xf013b3fc
f0123ae8:	68 0c 08 00 00       	push   $0x80c
f0123aed:	68 7a b3 13 f0       	push   $0xf013b37a
f0123af2:	e8 0e c7 fd ff       	call   f0100205 <_panic>

		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f0123af7:	e8 a1 90 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0123afc:	89 45 a8             	mov    %eax,-0x58(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0123aff:	e8 c4 02 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0123b04:	89 45 a4             	mov    %eax,-0x5c(%ebp)
		ptr_allocations[1] = kmalloc(2*Mega-kilo);
f0123b07:	83 ec 0c             	sub    $0xc,%esp
f0123b0a:	68 00 fc 1f 00       	push   $0x1ffc00
f0123b0f:	e8 71 3d fe ff       	call   f0107885 <kmalloc>
f0123b14:	83 c4 10             	add    $0x10,%esp
f0123b17:	89 85 28 fd ff ff    	mov    %eax,-0x2d8(%ebp)
		if ((uint32) ptr_allocations[1] != (ACTUAL_START + 2*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0123b1d:	8b 85 28 fd ff ff    	mov    -0x2d8(%ebp),%eax
f0123b23:	89 c1                	mov    %eax,%ecx
f0123b25:	c7 45 88 00 10 00 00 	movl   $0x1000,-0x78(%ebp)
f0123b2c:	8b 45 88             	mov    -0x78(%ebp),%eax
f0123b2f:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0123b34:	89 45 84             	mov    %eax,-0x7c(%ebp)
f0123b37:	8b 45 84             	mov    -0x7c(%ebp),%eax
f0123b3a:	ba 00 00 00 00       	mov    $0x0,%edx
f0123b3f:	f7 75 88             	divl   -0x78(%ebp)
f0123b42:	8b 45 84             	mov    -0x7c(%ebp),%eax
f0123b45:	29 d0                	sub    %edx,%eax
f0123b47:	89 c3                	mov    %eax,%ebx
f0123b49:	c7 45 80 00 10 00 00 	movl   $0x1000,-0x80(%ebp)
f0123b50:	a0 40 26 78 f0       	mov    0xf0782640,%al
f0123b55:	0f b6 d0             	movzbl %al,%edx
f0123b58:	8b 45 80             	mov    -0x80(%ebp),%eax
f0123b5b:	01 d0                	add    %edx,%eax
f0123b5d:	48                   	dec    %eax
f0123b5e:	89 85 7c ff ff ff    	mov    %eax,-0x84(%ebp)
f0123b64:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f0123b6a:	ba 00 00 00 00       	mov    $0x0,%edx
f0123b6f:	f7 75 80             	divl   -0x80(%ebp)
f0123b72:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f0123b78:	29 d0                	sub    %edx,%eax
f0123b7a:	01 c3                	add    %eax,%ebx
f0123b7c:	c7 85 78 ff ff ff 00 	movl   $0x1000,-0x88(%ebp)
f0123b83:	10 00 00 
f0123b86:	a0 40 26 78 f0       	mov    0xf0782640,%al
f0123b8b:	0f b6 c0             	movzbl %al,%eax
f0123b8e:	c1 e0 04             	shl    $0x4,%eax
f0123b91:	89 c2                	mov    %eax,%edx
f0123b93:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f0123b99:	01 d0                	add    %edx,%eax
f0123b9b:	48                   	dec    %eax
f0123b9c:	89 85 74 ff ff ff    	mov    %eax,-0x8c(%ebp)
f0123ba2:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f0123ba8:	ba 00 00 00 00       	mov    $0x0,%edx
f0123bad:	f7 b5 78 ff ff ff    	divl   -0x88(%ebp)
f0123bb3:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f0123bb9:	29 d0                	sub    %edx,%eax
f0123bbb:	01 d8                	add    %ebx,%eax
f0123bbd:	2d 00 c0 df 09       	sub    $0x9dfc000,%eax
f0123bc2:	39 c1                	cmp    %eax,%ecx
f0123bc4:	74 17                	je     f0123bdd <test_kheap_phys_addr+0x29e>
f0123bc6:	83 ec 04             	sub    $0x4,%esp
f0123bc9:	68 60 b4 13 f0       	push   $0xf013b460
f0123bce:	68 12 08 00 00       	push   $0x812
f0123bd3:	68 7a b3 13 f0       	push   $0xf013b37a
f0123bd8:	e8 28 c6 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0123bdd:	e8 e6 01 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0123be2:	3b 45 a4             	cmp    -0x5c(%ebp),%eax
f0123be5:	74 17                	je     f0123bfe <test_kheap_phys_addr+0x2bf>
f0123be7:	83 ec 04             	sub    $0x4,%esp
f0123bea:	68 94 b3 13 f0       	push   $0xf013b394
f0123bef:	68 13 08 00 00       	push   $0x813
f0123bf4:	68 7a b3 13 f0       	push   $0xf013b37a
f0123bf9:	e8 07 c6 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f0123bfe:	8b 5d a8             	mov    -0x58(%ebp),%ebx
f0123c01:	e8 97 8f fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0123c06:	29 c3                	sub    %eax,%ebx
f0123c08:	89 d8                	mov    %ebx,%eax
f0123c0a:	3d 00 02 00 00       	cmp    $0x200,%eax
f0123c0f:	74 17                	je     f0123c28 <test_kheap_phys_addr+0x2e9>
f0123c11:	83 ec 04             	sub    $0x4,%esp
f0123c14:	68 fc b3 13 f0       	push   $0xf013b3fc
f0123c19:	68 14 08 00 00       	push   $0x814
f0123c1e:	68 7a b3 13 f0       	push   $0xf013b37a
f0123c23:	e8 dd c5 fd ff       	call   f0100205 <_panic>

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f0123c28:	e8 70 8f fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0123c2d:	89 45 a8             	mov    %eax,-0x58(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0123c30:	e8 93 01 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0123c35:	89 45 a4             	mov    %eax,-0x5c(%ebp)
		ptr_allocations[2] = kmalloc(2*kilo);
f0123c38:	83 ec 0c             	sub    $0xc,%esp
f0123c3b:	68 00 08 00 00       	push   $0x800
f0123c40:	e8 40 3c fe ff       	call   f0107885 <kmalloc>
f0123c45:	83 c4 10             	add    $0x10,%esp
f0123c48:	89 85 2c fd ff ff    	mov    %eax,-0x2d4(%ebp)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0123c4e:	8b 85 2c fd ff ff    	mov    -0x2d4(%ebp),%eax
f0123c54:	89 c1                	mov    %eax,%ecx
f0123c56:	c7 85 70 ff ff ff 00 	movl   $0x1000,-0x90(%ebp)
f0123c5d:	10 00 00 
f0123c60:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f0123c66:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0123c6b:	89 85 6c ff ff ff    	mov    %eax,-0x94(%ebp)
f0123c71:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f0123c77:	ba 00 00 00 00       	mov    $0x0,%edx
f0123c7c:	f7 b5 70 ff ff ff    	divl   -0x90(%ebp)
f0123c82:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f0123c88:	29 d0                	sub    %edx,%eax
f0123c8a:	89 c3                	mov    %eax,%ebx
f0123c8c:	c7 85 68 ff ff ff 00 	movl   $0x1000,-0x98(%ebp)
f0123c93:	10 00 00 
f0123c96:	a0 40 26 78 f0       	mov    0xf0782640,%al
f0123c9b:	0f b6 d0             	movzbl %al,%edx
f0123c9e:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f0123ca4:	01 d0                	add    %edx,%eax
f0123ca6:	48                   	dec    %eax
f0123ca7:	89 85 64 ff ff ff    	mov    %eax,-0x9c(%ebp)
f0123cad:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f0123cb3:	ba 00 00 00 00       	mov    $0x0,%edx
f0123cb8:	f7 b5 68 ff ff ff    	divl   -0x98(%ebp)
f0123cbe:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f0123cc4:	29 d0                	sub    %edx,%eax
f0123cc6:	01 c3                	add    %eax,%ebx
f0123cc8:	c7 85 60 ff ff ff 00 	movl   $0x1000,-0xa0(%ebp)
f0123ccf:	10 00 00 
f0123cd2:	a0 40 26 78 f0       	mov    0xf0782640,%al
f0123cd7:	0f b6 c0             	movzbl %al,%eax
f0123cda:	c1 e0 04             	shl    $0x4,%eax
f0123cdd:	89 c2                	mov    %eax,%edx
f0123cdf:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f0123ce5:	01 d0                	add    %edx,%eax
f0123ce7:	48                   	dec    %eax
f0123ce8:	89 85 5c ff ff ff    	mov    %eax,-0xa4(%ebp)
f0123cee:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f0123cf4:	ba 00 00 00 00       	mov    $0x0,%edx
f0123cf9:	f7 b5 60 ff ff ff    	divl   -0xa0(%ebp)
f0123cff:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f0123d05:	29 d0                	sub    %edx,%eax
f0123d07:	01 d8                	add    %ebx,%eax
f0123d09:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
f0123d0e:	39 c1                	cmp    %eax,%ecx
f0123d10:	74 17                	je     f0123d29 <test_kheap_phys_addr+0x3ea>
f0123d12:	83 ec 04             	sub    $0x4,%esp
f0123d15:	68 60 b4 13 f0       	push   $0xf013b460
f0123d1a:	68 1a 08 00 00       	push   $0x81a
f0123d1f:	68 7a b3 13 f0       	push   $0xf013b37a
f0123d24:	e8 dc c4 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0123d29:	e8 9a 00 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0123d2e:	3b 45 a4             	cmp    -0x5c(%ebp),%eax
f0123d31:	74 17                	je     f0123d4a <test_kheap_phys_addr+0x40b>
f0123d33:	83 ec 04             	sub    $0x4,%esp
f0123d36:	68 94 b3 13 f0       	push   $0xf013b394
f0123d3b:	68 1b 08 00 00       	push   $0x81b
f0123d40:	68 7a b3 13 f0       	push   $0xf013b37a
f0123d45:	e8 bb c4 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f0123d4a:	8b 5d a8             	mov    -0x58(%ebp),%ebx
f0123d4d:	e8 4b 8e fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0123d52:	29 c3                	sub    %eax,%ebx
f0123d54:	89 d8                	mov    %ebx,%eax
f0123d56:	83 f8 01             	cmp    $0x1,%eax
f0123d59:	74 17                	je     f0123d72 <test_kheap_phys_addr+0x433>
f0123d5b:	83 ec 04             	sub    $0x4,%esp
f0123d5e:	68 fc b3 13 f0       	push   $0xf013b3fc
f0123d63:	68 1c 08 00 00       	push   $0x81c
f0123d68:	68 7a b3 13 f0       	push   $0xf013b37a
f0123d6d:	e8 93 c4 fd ff       	call   f0100205 <_panic>

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f0123d72:	e8 26 8e fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0123d77:	89 45 a8             	mov    %eax,-0x58(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0123d7a:	e8 49 00 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0123d7f:	89 45 a4             	mov    %eax,-0x5c(%ebp)
		ptr_allocations[3] = kmalloc(2*kilo);
f0123d82:	83 ec 0c             	sub    $0xc,%esp
f0123d85:	68 00 08 00 00       	push   $0x800
f0123d8a:	e8 f6 3a fe ff       	call   f0107885 <kmalloc>
f0123d8f:	83 c4 10             	add    $0x10,%esp
f0123d92:	89 85 30 fd ff ff    	mov    %eax,-0x2d0(%ebp)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0123d98:	8b 85 30 fd ff ff    	mov    -0x2d0(%ebp),%eax
f0123d9e:	89 c1                	mov    %eax,%ecx
f0123da0:	c7 85 58 ff ff ff 00 	movl   $0x1000,-0xa8(%ebp)
f0123da7:	10 00 00 
f0123daa:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f0123db0:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0123db5:	89 85 54 ff ff ff    	mov    %eax,-0xac(%ebp)
f0123dbb:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f0123dc1:	ba 00 00 00 00       	mov    $0x0,%edx
f0123dc6:	f7 b5 58 ff ff ff    	divl   -0xa8(%ebp)
f0123dcc:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f0123dd2:	29 d0                	sub    %edx,%eax
f0123dd4:	89 c3                	mov    %eax,%ebx
f0123dd6:	c7 85 50 ff ff ff 00 	movl   $0x1000,-0xb0(%ebp)
f0123ddd:	10 00 00 
f0123de0:	a0 40 26 78 f0       	mov    0xf0782640,%al
f0123de5:	0f b6 d0             	movzbl %al,%edx
f0123de8:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f0123dee:	01 d0                	add    %edx,%eax
f0123df0:	48                   	dec    %eax
f0123df1:	89 85 4c ff ff ff    	mov    %eax,-0xb4(%ebp)
f0123df7:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0123dfd:	ba 00 00 00 00       	mov    $0x0,%edx
f0123e02:	f7 b5 50 ff ff ff    	divl   -0xb0(%ebp)
f0123e08:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0123e0e:	29 d0                	sub    %edx,%eax
f0123e10:	01 c3                	add    %eax,%ebx
f0123e12:	c7 85 48 ff ff ff 00 	movl   $0x1000,-0xb8(%ebp)
f0123e19:	10 00 00 
f0123e1c:	a0 40 26 78 f0       	mov    0xf0782640,%al
f0123e21:	0f b6 c0             	movzbl %al,%eax
f0123e24:	c1 e0 04             	shl    $0x4,%eax
f0123e27:	89 c2                	mov    %eax,%edx
f0123e29:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f0123e2f:	01 d0                	add    %edx,%eax
f0123e31:	48                   	dec    %eax
f0123e32:	89 85 44 ff ff ff    	mov    %eax,-0xbc(%ebp)
f0123e38:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0123e3e:	ba 00 00 00 00       	mov    $0x0,%edx
f0123e43:	f7 b5 48 ff ff ff    	divl   -0xb8(%ebp)
f0123e49:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0123e4f:	29 d0                	sub    %edx,%eax
f0123e51:	01 d8                	add    %ebx,%eax
f0123e53:	2d 00 b0 bf 09       	sub    $0x9bfb000,%eax
f0123e58:	39 c1                	cmp    %eax,%ecx
f0123e5a:	74 17                	je     f0123e73 <test_kheap_phys_addr+0x534>
f0123e5c:	83 ec 04             	sub    $0x4,%esp
f0123e5f:	68 60 b4 13 f0       	push   $0xf013b460
f0123e64:	68 22 08 00 00       	push   $0x822
f0123e69:	68 7a b3 13 f0       	push   $0xf013b37a
f0123e6e:	e8 92 c3 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0123e73:	e8 50 ff fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0123e78:	3b 45 a4             	cmp    -0x5c(%ebp),%eax
f0123e7b:	74 17                	je     f0123e94 <test_kheap_phys_addr+0x555>
f0123e7d:	83 ec 04             	sub    $0x4,%esp
f0123e80:	68 94 b3 13 f0       	push   $0xf013b394
f0123e85:	68 23 08 00 00       	push   $0x823
f0123e8a:	68 7a b3 13 f0       	push   $0xf013b37a
f0123e8f:	e8 71 c3 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f0123e94:	8b 5d a8             	mov    -0x58(%ebp),%ebx
f0123e97:	e8 01 8d fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0123e9c:	29 c3                	sub    %eax,%ebx
f0123e9e:	89 d8                	mov    %ebx,%eax
f0123ea0:	83 f8 01             	cmp    $0x1,%eax
f0123ea3:	74 17                	je     f0123ebc <test_kheap_phys_addr+0x57d>
f0123ea5:	83 ec 04             	sub    $0x4,%esp
f0123ea8:	68 fc b3 13 f0       	push   $0xf013b3fc
f0123ead:	68 24 08 00 00       	push   $0x824
f0123eb2:	68 7a b3 13 f0       	push   $0xf013b37a
f0123eb7:	e8 49 c3 fd ff       	call   f0100205 <_panic>

		//7 KB
		freeFrames = sys_calculate_free_frames() ;
f0123ebc:	e8 dc 8c fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0123ec1:	89 45 a8             	mov    %eax,-0x58(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0123ec4:	e8 ff fe fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0123ec9:	89 45 a4             	mov    %eax,-0x5c(%ebp)
		ptr_allocations[4] = kmalloc(7*kilo);
f0123ecc:	83 ec 0c             	sub    $0xc,%esp
f0123ecf:	68 00 1c 00 00       	push   $0x1c00
f0123ed4:	e8 ac 39 fe ff       	call   f0107885 <kmalloc>
f0123ed9:	83 c4 10             	add    $0x10,%esp
f0123edc:	89 85 34 fd ff ff    	mov    %eax,-0x2cc(%ebp)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0123ee2:	8b 85 34 fd ff ff    	mov    -0x2cc(%ebp),%eax
f0123ee8:	89 c1                	mov    %eax,%ecx
f0123eea:	c7 85 40 ff ff ff 00 	movl   $0x1000,-0xc0(%ebp)
f0123ef1:	10 00 00 
f0123ef4:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0123efa:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0123eff:	89 85 3c ff ff ff    	mov    %eax,-0xc4(%ebp)
f0123f05:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f0123f0b:	ba 00 00 00 00       	mov    $0x0,%edx
f0123f10:	f7 b5 40 ff ff ff    	divl   -0xc0(%ebp)
f0123f16:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f0123f1c:	29 d0                	sub    %edx,%eax
f0123f1e:	89 c3                	mov    %eax,%ebx
f0123f20:	c7 85 38 ff ff ff 00 	movl   $0x1000,-0xc8(%ebp)
f0123f27:	10 00 00 
f0123f2a:	a0 40 26 78 f0       	mov    0xf0782640,%al
f0123f2f:	0f b6 d0             	movzbl %al,%edx
f0123f32:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f0123f38:	01 d0                	add    %edx,%eax
f0123f3a:	48                   	dec    %eax
f0123f3b:	89 85 34 ff ff ff    	mov    %eax,-0xcc(%ebp)
f0123f41:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f0123f47:	ba 00 00 00 00       	mov    $0x0,%edx
f0123f4c:	f7 b5 38 ff ff ff    	divl   -0xc8(%ebp)
f0123f52:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f0123f58:	29 d0                	sub    %edx,%eax
f0123f5a:	01 c3                	add    %eax,%ebx
f0123f5c:	c7 85 30 ff ff ff 00 	movl   $0x1000,-0xd0(%ebp)
f0123f63:	10 00 00 
f0123f66:	a0 40 26 78 f0       	mov    0xf0782640,%al
f0123f6b:	0f b6 c0             	movzbl %al,%eax
f0123f6e:	c1 e0 04             	shl    $0x4,%eax
f0123f71:	89 c2                	mov    %eax,%edx
f0123f73:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f0123f79:	01 d0                	add    %edx,%eax
f0123f7b:	48                   	dec    %eax
f0123f7c:	89 85 2c ff ff ff    	mov    %eax,-0xd4(%ebp)
f0123f82:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f0123f88:	ba 00 00 00 00       	mov    $0x0,%edx
f0123f8d:	f7 b5 30 ff ff ff    	divl   -0xd0(%ebp)
f0123f93:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f0123f99:	29 d0                	sub    %edx,%eax
f0123f9b:	01 d8                	add    %ebx,%eax
f0123f9d:	2d 00 a0 bf 09       	sub    $0x9bfa000,%eax
f0123fa2:	39 c1                	cmp    %eax,%ecx
f0123fa4:	74 17                	je     f0123fbd <test_kheap_phys_addr+0x67e>
f0123fa6:	83 ec 04             	sub    $0x4,%esp
f0123fa9:	68 60 b4 13 f0       	push   $0xf013b460
f0123fae:	68 2a 08 00 00       	push   $0x82a
f0123fb3:	68 7a b3 13 f0       	push   $0xf013b37a
f0123fb8:	e8 48 c2 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0123fbd:	e8 06 fe fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0123fc2:	3b 45 a4             	cmp    -0x5c(%ebp),%eax
f0123fc5:	74 17                	je     f0123fde <test_kheap_phys_addr+0x69f>
f0123fc7:	83 ec 04             	sub    $0x4,%esp
f0123fca:	68 94 b3 13 f0       	push   $0xf013b394
f0123fcf:	68 2b 08 00 00       	push   $0x82b
f0123fd4:	68 7a b3 13 f0       	push   $0xf013b37a
f0123fd9:	e8 27 c2 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: pages are not loaded successfully into memory");
f0123fde:	8b 5d a8             	mov    -0x58(%ebp),%ebx
f0123fe1:	e8 b7 8b fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0123fe6:	29 c3                	sub    %eax,%ebx
f0123fe8:	89 d8                	mov    %ebx,%eax
f0123fea:	83 f8 02             	cmp    $0x2,%eax
f0123fed:	74 17                	je     f0124006 <test_kheap_phys_addr+0x6c7>
f0123fef:	83 ec 04             	sub    $0x4,%esp
f0123ff2:	68 fc b3 13 f0       	push   $0xf013b3fc
f0123ff7:	68 2c 08 00 00       	push   $0x82c
f0123ffc:	68 7a b3 13 f0       	push   $0xf013b37a
f0124001:	e8 ff c1 fd ff       	call   f0100205 <_panic>

		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f0124006:	e8 92 8b fe ff       	call   f010cb9d <sys_calculate_free_frames>
f012400b:	89 45 a8             	mov    %eax,-0x58(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012400e:	e8 b5 fd fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0124013:	89 45 a4             	mov    %eax,-0x5c(%ebp)
		ptr_allocations[5] = kmalloc(3*Mega-kilo);
f0124016:	83 ec 0c             	sub    $0xc,%esp
f0124019:	68 00 fc 2f 00       	push   $0x2ffc00
f012401e:	e8 62 38 fe ff       	call   f0107885 <kmalloc>
f0124023:	83 c4 10             	add    $0x10,%esp
f0124026:	89 85 38 fd ff ff    	mov    %eax,-0x2c8(%ebp)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo) ) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f012402c:	8b 85 38 fd ff ff    	mov    -0x2c8(%ebp),%eax
f0124032:	89 c1                	mov    %eax,%ecx
f0124034:	c7 85 28 ff ff ff 00 	movl   $0x1000,-0xd8(%ebp)
f012403b:	10 00 00 
f012403e:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f0124044:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0124049:	89 85 24 ff ff ff    	mov    %eax,-0xdc(%ebp)
f012404f:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0124055:	ba 00 00 00 00       	mov    $0x0,%edx
f012405a:	f7 b5 28 ff ff ff    	divl   -0xd8(%ebp)
f0124060:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0124066:	29 d0                	sub    %edx,%eax
f0124068:	89 c3                	mov    %eax,%ebx
f012406a:	c7 85 20 ff ff ff 00 	movl   $0x1000,-0xe0(%ebp)
f0124071:	10 00 00 
f0124074:	a0 40 26 78 f0       	mov    0xf0782640,%al
f0124079:	0f b6 d0             	movzbl %al,%edx
f012407c:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0124082:	01 d0                	add    %edx,%eax
f0124084:	48                   	dec    %eax
f0124085:	89 85 1c ff ff ff    	mov    %eax,-0xe4(%ebp)
f012408b:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f0124091:	ba 00 00 00 00       	mov    $0x0,%edx
f0124096:	f7 b5 20 ff ff ff    	divl   -0xe0(%ebp)
f012409c:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f01240a2:	29 d0                	sub    %edx,%eax
f01240a4:	01 c3                	add    %eax,%ebx
f01240a6:	c7 85 18 ff ff ff 00 	movl   $0x1000,-0xe8(%ebp)
f01240ad:	10 00 00 
f01240b0:	a0 40 26 78 f0       	mov    0xf0782640,%al
f01240b5:	0f b6 c0             	movzbl %al,%eax
f01240b8:	c1 e0 04             	shl    $0x4,%eax
f01240bb:	89 c2                	mov    %eax,%edx
f01240bd:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f01240c3:	01 d0                	add    %edx,%eax
f01240c5:	48                   	dec    %eax
f01240c6:	89 85 14 ff ff ff    	mov    %eax,-0xec(%ebp)
f01240cc:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f01240d2:	ba 00 00 00 00       	mov    $0x0,%edx
f01240d7:	f7 b5 18 ff ff ff    	divl   -0xe8(%ebp)
f01240dd:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f01240e3:	29 d0                	sub    %edx,%eax
f01240e5:	01 d8                	add    %ebx,%eax
f01240e7:	2d 00 80 bf 09       	sub    $0x9bf8000,%eax
f01240ec:	39 c1                	cmp    %eax,%ecx
f01240ee:	74 17                	je     f0124107 <test_kheap_phys_addr+0x7c8>
f01240f0:	83 ec 04             	sub    $0x4,%esp
f01240f3:	68 60 b4 13 f0       	push   $0xf013b460
f01240f8:	68 32 08 00 00       	push   $0x832
f01240fd:	68 7a b3 13 f0       	push   $0xf013b37a
f0124102:	e8 fe c0 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0124107:	e8 bc fc fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012410c:	3b 45 a4             	cmp    -0x5c(%ebp),%eax
f012410f:	74 17                	je     f0124128 <test_kheap_phys_addr+0x7e9>
f0124111:	83 ec 04             	sub    $0x4,%esp
f0124114:	68 94 b3 13 f0       	push   $0xf013b394
f0124119:	68 33 08 00 00       	push   $0x833
f012411e:	68 7a b3 13 f0       	push   $0xf013b37a
f0124123:	e8 dd c0 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
f0124128:	8b 5d a8             	mov    -0x58(%ebp),%ebx
f012412b:	e8 6d 8a fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0124130:	29 c3                	sub    %eax,%ebx
f0124132:	89 d8                	mov    %ebx,%eax
f0124134:	3d 00 03 00 00       	cmp    $0x300,%eax
f0124139:	74 17                	je     f0124152 <test_kheap_phys_addr+0x813>
f012413b:	83 ec 04             	sub    $0x4,%esp
f012413e:	68 fc b3 13 f0       	push   $0xf013b3fc
f0124143:	68 34 08 00 00       	push   $0x834
f0124148:	68 7a b3 13 f0       	push   $0xf013b37a
f012414d:	e8 b3 c0 fd ff       	call   f0100205 <_panic>

		//6 MB
		freeFrames = sys_calculate_free_frames() ;
f0124152:	e8 46 8a fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0124157:	89 45 a8             	mov    %eax,-0x58(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012415a:	e8 69 fc fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012415f:	89 45 a4             	mov    %eax,-0x5c(%ebp)
		ptr_allocations[6] = kmalloc(6*Mega-kilo);
f0124162:	83 ec 0c             	sub    $0xc,%esp
f0124165:	68 00 fc 5f 00       	push   $0x5ffc00
f012416a:	e8 16 37 fe ff       	call   f0107885 <kmalloc>
f012416f:	83 c4 10             	add    $0x10,%esp
f0124172:	89 85 3c fd ff ff    	mov    %eax,-0x2c4(%ebp)
		if ((uint32) ptr_allocations[6] != (ACTUAL_START + 7*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0124178:	8b 85 3c fd ff ff    	mov    -0x2c4(%ebp),%eax
f012417e:	89 c1                	mov    %eax,%ecx
f0124180:	c7 85 10 ff ff ff 00 	movl   $0x1000,-0xf0(%ebp)
f0124187:	10 00 00 
f012418a:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f0124190:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0124195:	89 85 0c ff ff ff    	mov    %eax,-0xf4(%ebp)
f012419b:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f01241a1:	ba 00 00 00 00       	mov    $0x0,%edx
f01241a6:	f7 b5 10 ff ff ff    	divl   -0xf0(%ebp)
f01241ac:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f01241b2:	29 d0                	sub    %edx,%eax
f01241b4:	89 c3                	mov    %eax,%ebx
f01241b6:	c7 85 08 ff ff ff 00 	movl   $0x1000,-0xf8(%ebp)
f01241bd:	10 00 00 
f01241c0:	a0 40 26 78 f0       	mov    0xf0782640,%al
f01241c5:	0f b6 d0             	movzbl %al,%edx
f01241c8:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f01241ce:	01 d0                	add    %edx,%eax
f01241d0:	48                   	dec    %eax
f01241d1:	89 85 04 ff ff ff    	mov    %eax,-0xfc(%ebp)
f01241d7:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f01241dd:	ba 00 00 00 00       	mov    $0x0,%edx
f01241e2:	f7 b5 08 ff ff ff    	divl   -0xf8(%ebp)
f01241e8:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f01241ee:	29 d0                	sub    %edx,%eax
f01241f0:	01 c3                	add    %eax,%ebx
f01241f2:	c7 85 00 ff ff ff 00 	movl   $0x1000,-0x100(%ebp)
f01241f9:	10 00 00 
f01241fc:	a0 40 26 78 f0       	mov    0xf0782640,%al
f0124201:	0f b6 c0             	movzbl %al,%eax
f0124204:	c1 e0 04             	shl    $0x4,%eax
f0124207:	89 c2                	mov    %eax,%edx
f0124209:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f012420f:	01 d0                	add    %edx,%eax
f0124211:	48                   	dec    %eax
f0124212:	89 85 fc fe ff ff    	mov    %eax,-0x104(%ebp)
f0124218:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f012421e:	ba 00 00 00 00       	mov    $0x0,%edx
f0124223:	f7 b5 00 ff ff ff    	divl   -0x100(%ebp)
f0124229:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f012422f:	29 d0                	sub    %edx,%eax
f0124231:	01 d8                	add    %ebx,%eax
f0124233:	2d 00 80 8f 09       	sub    $0x98f8000,%eax
f0124238:	39 c1                	cmp    %eax,%ecx
f012423a:	74 17                	je     f0124253 <test_kheap_phys_addr+0x914>
f012423c:	83 ec 04             	sub    $0x4,%esp
f012423f:	68 60 b4 13 f0       	push   $0xf013b460
f0124244:	68 3a 08 00 00       	push   $0x83a
f0124249:	68 7a b3 13 f0       	push   $0xf013b37a
f012424e:	e8 b2 bf fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0124253:	e8 70 fb fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0124258:	3b 45 a4             	cmp    -0x5c(%ebp),%eax
f012425b:	74 17                	je     f0124274 <test_kheap_phys_addr+0x935>
f012425d:	83 ec 04             	sub    $0x4,%esp
f0124260:	68 94 b3 13 f0       	push   $0xf013b394
f0124265:	68 3b 08 00 00       	push   $0x83b
f012426a:	68 7a b3 13 f0       	push   $0xf013b37a
f012426f:	e8 91 bf fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1536) panic("Wrong allocation: pages are not loaded successfully into memory");
f0124274:	8b 5d a8             	mov    -0x58(%ebp),%ebx
f0124277:	e8 21 89 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f012427c:	29 c3                	sub    %eax,%ebx
f012427e:	89 d8                	mov    %ebx,%eax
f0124280:	3d 00 06 00 00       	cmp    $0x600,%eax
f0124285:	74 17                	je     f012429e <test_kheap_phys_addr+0x95f>
f0124287:	83 ec 04             	sub    $0x4,%esp
f012428a:	68 fc b3 13 f0       	push   $0xf013b3fc
f012428f:	68 3c 08 00 00       	push   $0x83c
f0124294:	68 7a b3 13 f0       	push   $0xf013b37a
f0124299:	e8 67 bf fd ff       	call   f0100205 <_panic>

		//14 KB
		freeFrames = sys_calculate_free_frames() ;
f012429e:	e8 fa 88 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f01242a3:	89 45 a8             	mov    %eax,-0x58(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01242a6:	e8 1d fb fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f01242ab:	89 45 a4             	mov    %eax,-0x5c(%ebp)
		ptr_allocations[7] = kmalloc(14*kilo);
f01242ae:	83 ec 0c             	sub    $0xc,%esp
f01242b1:	68 00 38 00 00       	push   $0x3800
f01242b6:	e8 ca 35 fe ff       	call   f0107885 <kmalloc>
f01242bb:	83 c4 10             	add    $0x10,%esp
f01242be:	89 85 40 fd ff ff    	mov    %eax,-0x2c0(%ebp)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 13*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01242c4:	8b 85 40 fd ff ff    	mov    -0x2c0(%ebp),%eax
f01242ca:	89 c1                	mov    %eax,%ecx
f01242cc:	c7 85 f8 fe ff ff 00 	movl   $0x1000,-0x108(%ebp)
f01242d3:	10 00 00 
f01242d6:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f01242dc:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01242e1:	89 85 f4 fe ff ff    	mov    %eax,-0x10c(%ebp)
f01242e7:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f01242ed:	ba 00 00 00 00       	mov    $0x0,%edx
f01242f2:	f7 b5 f8 fe ff ff    	divl   -0x108(%ebp)
f01242f8:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f01242fe:	29 d0                	sub    %edx,%eax
f0124300:	89 c3                	mov    %eax,%ebx
f0124302:	c7 85 f0 fe ff ff 00 	movl   $0x1000,-0x110(%ebp)
f0124309:	10 00 00 
f012430c:	a0 40 26 78 f0       	mov    0xf0782640,%al
f0124311:	0f b6 d0             	movzbl %al,%edx
f0124314:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f012431a:	01 d0                	add    %edx,%eax
f012431c:	48                   	dec    %eax
f012431d:	89 85 ec fe ff ff    	mov    %eax,-0x114(%ebp)
f0124323:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f0124329:	ba 00 00 00 00       	mov    $0x0,%edx
f012432e:	f7 b5 f0 fe ff ff    	divl   -0x110(%ebp)
f0124334:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f012433a:	29 d0                	sub    %edx,%eax
f012433c:	01 c3                	add    %eax,%ebx
f012433e:	c7 85 e8 fe ff ff 00 	movl   $0x1000,-0x118(%ebp)
f0124345:	10 00 00 
f0124348:	a0 40 26 78 f0       	mov    0xf0782640,%al
f012434d:	0f b6 c0             	movzbl %al,%eax
f0124350:	c1 e0 04             	shl    $0x4,%eax
f0124353:	89 c2                	mov    %eax,%edx
f0124355:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f012435b:	01 d0                	add    %edx,%eax
f012435d:	48                   	dec    %eax
f012435e:	89 85 e4 fe ff ff    	mov    %eax,-0x11c(%ebp)
f0124364:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f012436a:	ba 00 00 00 00       	mov    $0x0,%edx
f012436f:	f7 b5 e8 fe ff ff    	divl   -0x118(%ebp)
f0124375:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f012437b:	29 d0                	sub    %edx,%eax
f012437d:	01 d8                	add    %ebx,%eax
f012437f:	2d 00 80 2f 09       	sub    $0x92f8000,%eax
f0124384:	39 c1                	cmp    %eax,%ecx
f0124386:	74 17                	je     f012439f <test_kheap_phys_addr+0xa60>
f0124388:	83 ec 04             	sub    $0x4,%esp
f012438b:	68 60 b4 13 f0       	push   $0xf013b460
f0124390:	68 42 08 00 00       	push   $0x842
f0124395:	68 7a b3 13 f0       	push   $0xf013b37a
f012439a:	e8 66 be fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012439f:	e8 24 fa fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f01243a4:	3b 45 a4             	cmp    -0x5c(%ebp),%eax
f01243a7:	74 17                	je     f01243c0 <test_kheap_phys_addr+0xa81>
f01243a9:	83 ec 04             	sub    $0x4,%esp
f01243ac:	68 94 b3 13 f0       	push   $0xf013b394
f01243b1:	68 43 08 00 00       	push   $0x843
f01243b6:	68 7a b3 13 f0       	push   $0xf013b37a
f01243bb:	e8 45 be fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 4) panic("Wrong allocation: pages are not loaded successfully into memory");
f01243c0:	8b 5d a8             	mov    -0x58(%ebp),%ebx
f01243c3:	e8 d5 87 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f01243c8:	29 c3                	sub    %eax,%ebx
f01243ca:	89 d8                	mov    %ebx,%eax
f01243cc:	83 f8 04             	cmp    $0x4,%eax
f01243cf:	74 17                	je     f01243e8 <test_kheap_phys_addr+0xaa9>
f01243d1:	83 ec 04             	sub    $0x4,%esp
f01243d4:	68 fc b3 13 f0       	push   $0xf013b3fc
f01243d9:	68 44 08 00 00       	push   $0x844
f01243de:	68 7a b3 13 f0       	push   $0xf013b37a
f01243e3:	e8 1d be fd ff       	call   f0100205 <_panic>
	}

	//test kheap_physical_address after kmalloc only [40%]
	{
f01243e8:	89 e0                	mov    %esp,%eax
f01243ea:	89 c6                	mov    %eax,%esi
		uint32 va;
		uint32 endVA = ACTUAL_START + 13*Mega + 32*kilo;
f01243ec:	c7 85 e0 fe ff ff 00 	movl   $0x1000,-0x120(%ebp)
f01243f3:	10 00 00 
f01243f6:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f01243fc:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0124401:	89 85 dc fe ff ff    	mov    %eax,-0x124(%ebp)
f0124407:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f012440d:	ba 00 00 00 00       	mov    $0x0,%edx
f0124412:	f7 b5 e0 fe ff ff    	divl   -0x120(%ebp)
f0124418:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f012441e:	29 d0                	sub    %edx,%eax
f0124420:	89 c1                	mov    %eax,%ecx
f0124422:	c7 85 d8 fe ff ff 00 	movl   $0x1000,-0x128(%ebp)
f0124429:	10 00 00 
f012442c:	a0 40 26 78 f0       	mov    0xf0782640,%al
f0124431:	0f b6 d0             	movzbl %al,%edx
f0124434:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f012443a:	01 d0                	add    %edx,%eax
f012443c:	48                   	dec    %eax
f012443d:	89 85 d4 fe ff ff    	mov    %eax,-0x12c(%ebp)
f0124443:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f0124449:	ba 00 00 00 00       	mov    $0x0,%edx
f012444e:	f7 b5 d8 fe ff ff    	divl   -0x128(%ebp)
f0124454:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f012445a:	29 d0                	sub    %edx,%eax
f012445c:	01 c1                	add    %eax,%ecx
f012445e:	c7 85 d0 fe ff ff 00 	movl   $0x1000,-0x130(%ebp)
f0124465:	10 00 00 
f0124468:	a0 40 26 78 f0       	mov    0xf0782640,%al
f012446d:	0f b6 c0             	movzbl %al,%eax
f0124470:	c1 e0 04             	shl    $0x4,%eax
f0124473:	89 c2                	mov    %eax,%edx
f0124475:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f012447b:	01 d0                	add    %edx,%eax
f012447d:	48                   	dec    %eax
f012447e:	89 85 cc fe ff ff    	mov    %eax,-0x134(%ebp)
f0124484:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f012448a:	ba 00 00 00 00       	mov    $0x0,%edx
f012448f:	f7 b5 d0 fe ff ff    	divl   -0x130(%ebp)
f0124495:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f012449b:	29 d0                	sub    %edx,%eax
f012449d:	01 c8                	add    %ecx,%eax
f012449f:	2d 00 40 2f 09       	sub    $0x92f4000,%eax
f01244a4:	89 85 c8 fe ff ff    	mov    %eax,-0x138(%ebp)
		uint32 allPAs[(13*Mega + 32*kilo+INITIAL_KHEAP_ALLOCATIONS)/PAGE_SIZE] ;
f01244aa:	c7 85 c4 fe ff ff 00 	movl   $0x1000,-0x13c(%ebp)
f01244b1:	10 00 00 
f01244b4:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f01244ba:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01244bf:	89 85 c0 fe ff ff    	mov    %eax,-0x140(%ebp)
f01244c5:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f01244cb:	ba 00 00 00 00       	mov    $0x0,%edx
f01244d0:	f7 b5 c4 fe ff ff    	divl   -0x13c(%ebp)
f01244d6:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f01244dc:	29 d0                	sub    %edx,%eax
f01244de:	89 c1                	mov    %eax,%ecx
f01244e0:	c7 85 bc fe ff ff 00 	movl   $0x1000,-0x144(%ebp)
f01244e7:	10 00 00 
f01244ea:	a0 40 26 78 f0       	mov    0xf0782640,%al
f01244ef:	0f b6 d0             	movzbl %al,%edx
f01244f2:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f01244f8:	01 d0                	add    %edx,%eax
f01244fa:	48                   	dec    %eax
f01244fb:	89 85 b8 fe ff ff    	mov    %eax,-0x148(%ebp)
f0124501:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f0124507:	ba 00 00 00 00       	mov    $0x0,%edx
f012450c:	f7 b5 bc fe ff ff    	divl   -0x144(%ebp)
f0124512:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f0124518:	29 d0                	sub    %edx,%eax
f012451a:	01 c1                	add    %eax,%ecx
f012451c:	c7 85 b4 fe ff ff 00 	movl   $0x1000,-0x14c(%ebp)
f0124523:	10 00 00 
f0124526:	a0 40 26 78 f0       	mov    0xf0782640,%al
f012452b:	0f b6 c0             	movzbl %al,%eax
f012452e:	c1 e0 04             	shl    $0x4,%eax
f0124531:	89 c2                	mov    %eax,%edx
f0124533:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f0124539:	01 d0                	add    %edx,%eax
f012453b:	48                   	dec    %eax
f012453c:	89 85 b0 fe ff ff    	mov    %eax,-0x150(%ebp)
f0124542:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f0124548:	ba 00 00 00 00       	mov    $0x0,%edx
f012454d:	f7 b5 b4 fe ff ff    	divl   -0x14c(%ebp)
f0124553:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f0124559:	29 d0                	sub    %edx,%eax
f012455b:	01 c8                	add    %ecx,%eax
f012455d:	05 00 c0 d0 00       	add    $0xd0c000,%eax
f0124562:	c1 e8 0c             	shr    $0xc,%eax
f0124565:	89 c2                	mov    %eax,%edx
f0124567:	4a                   	dec    %edx
f0124568:	89 95 ac fe ff ff    	mov    %edx,-0x154(%ebp)
f012456e:	c1 e0 02             	shl    $0x2,%eax
f0124571:	8d 50 03             	lea    0x3(%eax),%edx
f0124574:	b8 10 00 00 00       	mov    $0x10,%eax
f0124579:	48                   	dec    %eax
f012457a:	01 d0                	add    %edx,%eax
f012457c:	bf 10 00 00 00       	mov    $0x10,%edi
f0124581:	ba 00 00 00 00       	mov    $0x0,%edx
f0124586:	f7 f7                	div    %edi
f0124588:	6b c0 10             	imul   $0x10,%eax,%eax
f012458b:	29 c4                	sub    %eax,%esp
f012458d:	89 e0                	mov    %esp,%eax
f012458f:	83 c0 03             	add    $0x3,%eax
f0124592:	c1 e8 02             	shr    $0x2,%eax
f0124595:	c1 e0 02             	shl    $0x2,%eax
f0124598:	89 85 a8 fe ff ff    	mov    %eax,-0x158(%ebp)
		i = 0;
f012459e:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
		for (va = (KERNEL_HEAP_START + DYNAMIC_ALLOCATOR_DS); va < endVA; va+=PAGE_SIZE)
f01245a5:	c7 85 a4 fe ff ff 00 	movl   $0x1000,-0x15c(%ebp)
f01245ac:	10 00 00 
f01245af:	8b 85 a4 fe ff ff    	mov    -0x15c(%ebp),%eax
f01245b5:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01245ba:	89 85 a0 fe ff ff    	mov    %eax,-0x160(%ebp)
f01245c0:	8b 85 a0 fe ff ff    	mov    -0x160(%ebp),%eax
f01245c6:	ba 00 00 00 00       	mov    $0x0,%edx
f01245cb:	f7 b5 a4 fe ff ff    	divl   -0x15c(%ebp)
f01245d1:	8b 85 a0 fe ff ff    	mov    -0x160(%ebp),%eax
f01245d7:	29 d0                	sub    %edx,%eax
f01245d9:	2d 00 00 00 0a       	sub    $0xa000000,%eax
f01245de:	89 45 e0             	mov    %eax,-0x20(%ebp)
f01245e1:	eb 29                	jmp    f012460c <test_kheap_phys_addr+0xccd>
		{
			allPAs[i++] = kheap_physical_address(va);
f01245e3:	8b 5d e4             	mov    -0x1c(%ebp),%ebx
f01245e6:	8d 43 01             	lea    0x1(%ebx),%eax
f01245e9:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f01245ec:	83 ec 0c             	sub    $0xc,%esp
f01245ef:	ff 75 e0             	pushl  -0x20(%ebp)
f01245f2:	e8 ac 34 fe ff       	call   f0107aa3 <kheap_physical_address>
f01245f7:	83 c4 10             	add    $0x10,%esp
f01245fa:	89 c2                	mov    %eax,%edx
f01245fc:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f0124602:	89 14 98             	mov    %edx,(%eax,%ebx,4)
	{
		uint32 va;
		uint32 endVA = ACTUAL_START + 13*Mega + 32*kilo;
		uint32 allPAs[(13*Mega + 32*kilo+INITIAL_KHEAP_ALLOCATIONS)/PAGE_SIZE] ;
		i = 0;
		for (va = (KERNEL_HEAP_START + DYNAMIC_ALLOCATOR_DS); va < endVA; va+=PAGE_SIZE)
f0124605:	81 45 e0 00 10 00 00 	addl   $0x1000,-0x20(%ebp)
f012460c:	8b 45 e0             	mov    -0x20(%ebp),%eax
f012460f:	3b 85 c8 fe ff ff    	cmp    -0x138(%ebp),%eax
f0124615:	72 cc                	jb     f01245e3 <test_kheap_phys_addr+0xca4>
		{
			allPAs[i++] = kheap_physical_address(va);
		}
		int ii = i ;
f0124617:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f012461a:	89 85 9c fe ff ff    	mov    %eax,-0x164(%ebp)
		i = 0;
f0124620:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
		int j;
		for (va = (KERNEL_HEAP_START + DYNAMIC_ALLOCATOR_DS); va < endVA; )
f0124627:	c7 85 98 fe ff ff 00 	movl   $0x1000,-0x168(%ebp)
f012462e:	10 00 00 
f0124631:	8b 85 98 fe ff ff    	mov    -0x168(%ebp),%eax
f0124637:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012463c:	89 85 94 fe ff ff    	mov    %eax,-0x16c(%ebp)
f0124642:	8b 85 94 fe ff ff    	mov    -0x16c(%ebp),%eax
f0124648:	ba 00 00 00 00       	mov    $0x0,%edx
f012464d:	f7 b5 98 fe ff ff    	divl   -0x168(%ebp)
f0124653:	8b 85 94 fe ff ff    	mov    -0x16c(%ebp),%eax
f0124659:	29 d0                	sub    %edx,%eax
f012465b:	2d 00 00 00 0a       	sub    $0xa000000,%eax
f0124660:	89 45 e0             	mov    %eax,-0x20(%ebp)
f0124663:	e9 ab 00 00 00       	jmp    f0124713 <test_kheap_phys_addr+0xdd4>
		{
			uint32 *ptr_table ;
			get_page_table(ptr_page_directory, va, &ptr_table);
f0124668:	a1 3c 26 78 f0       	mov    0xf078263c,%eax
f012466d:	83 ec 04             	sub    $0x4,%esp
f0124670:	8d 95 20 fd ff ff    	lea    -0x2e0(%ebp),%edx
f0124676:	52                   	push   %edx
f0124677:	ff 75 e0             	pushl  -0x20(%ebp)
f012467a:	50                   	push   %eax
f012467b:	e8 31 24 fe ff       	call   f0106ab1 <get_page_table>
f0124680:	83 c4 10             	add    $0x10,%esp
			if (ptr_table == NULL)
f0124683:	8b 85 20 fd ff ff    	mov    -0x2e0(%ebp),%eax
f0124689:	85 c0                	test   %eax,%eax
f012468b:	75 17                	jne    f01246a4 <test_kheap_phys_addr+0xd65>
				panic("one of the kernel tables is wrongly removed! Tables of Kernel Heap should not be removed");
f012468d:	83 ec 04             	sub    $0x4,%esp
f0124690:	68 1c bd 13 f0       	push   $0xf013bd1c
f0124695:	68 59 08 00 00       	push   $0x859
f012469a:	68 7a b3 13 f0       	push   $0xf013b37a
f012469f:	e8 61 bb fd ff       	call   f0100205 <_panic>

			for (j = PTX(va); i < ii && j < 1024; ++j, ++i)
f01246a4:	8b 45 e0             	mov    -0x20(%ebp),%eax
f01246a7:	c1 e8 0c             	shr    $0xc,%eax
f01246aa:	25 ff 03 00 00       	and    $0x3ff,%eax
f01246af:	89 45 dc             	mov    %eax,-0x24(%ebp)
f01246b2:	eb 4b                	jmp    f01246ff <test_kheap_phys_addr+0xdc0>
			{
				if ((ptr_table[j] & 0xFFFFF000) != allPAs[i])
f01246b4:	8b 85 20 fd ff ff    	mov    -0x2e0(%ebp),%eax
f01246ba:	8b 55 dc             	mov    -0x24(%ebp),%edx
f01246bd:	c1 e2 02             	shl    $0x2,%edx
f01246c0:	01 d0                	add    %edx,%eax
f01246c2:	8b 00                	mov    (%eax),%eax
f01246c4:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f01246c9:	89 c1                	mov    %eax,%ecx
f01246cb:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f01246d1:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f01246d4:	8b 04 90             	mov    (%eax,%edx,4),%eax
f01246d7:	39 c1                	cmp    %eax,%ecx
f01246d9:	74 17                	je     f01246f2 <test_kheap_phys_addr+0xdb3>
				{
					//cprintf("\nVA = %x, table entry = %x, khep_pa = %x\n",va + j*PAGE_SIZE, (ptr_table[j] & 0xFFFFF000) , allPAs[i]);
					panic("Wrong kheap_physical_address");
f01246db:	83 ec 04             	sub    $0x4,%esp
f01246de:	68 75 bd 13 f0       	push   $0xf013bd75
f01246e3:	68 60 08 00 00       	push   $0x860
f01246e8:	68 7a b3 13 f0       	push   $0xf013b37a
f01246ed:	e8 13 bb fd ff       	call   f0100205 <_panic>
				}
				va+=PAGE_SIZE;
f01246f2:	81 45 e0 00 10 00 00 	addl   $0x1000,-0x20(%ebp)
			uint32 *ptr_table ;
			get_page_table(ptr_page_directory, va, &ptr_table);
			if (ptr_table == NULL)
				panic("one of the kernel tables is wrongly removed! Tables of Kernel Heap should not be removed");

			for (j = PTX(va); i < ii && j < 1024; ++j, ++i)
f01246f9:	ff 45 dc             	incl   -0x24(%ebp)
f01246fc:	ff 45 e4             	incl   -0x1c(%ebp)
f01246ff:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0124702:	3b 85 9c fe ff ff    	cmp    -0x164(%ebp),%eax
f0124708:	7d 09                	jge    f0124713 <test_kheap_phys_addr+0xdd4>
f012470a:	81 7d dc ff 03 00 00 	cmpl   $0x3ff,-0x24(%ebp)
f0124711:	7e a1                	jle    f01246b4 <test_kheap_phys_addr+0xd75>
			allPAs[i++] = kheap_physical_address(va);
		}
		int ii = i ;
		i = 0;
		int j;
		for (va = (KERNEL_HEAP_START + DYNAMIC_ALLOCATOR_DS); va < endVA; )
f0124713:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0124716:	3b 85 c8 fe ff ff    	cmp    -0x138(%ebp),%eax
f012471c:	0f 82 46 ff ff ff    	jb     f0124668 <test_kheap_phys_addr+0xd29>
f0124722:	89 f4                	mov    %esi,%esp
				}
				va+=PAGE_SIZE;
			}
		}
	}
	cprintf("\nkheap_physical_address: current evaluation = 40%");
f0124724:	83 ec 0c             	sub    $0xc,%esp
f0124727:	68 94 bd 13 f0       	push   $0xf013bd94
f012472c:	e8 dd c5 fd ff       	call   f0100d0e <cprintf>
f0124731:	83 c4 10             	add    $0x10,%esp

	//kfree some of the allocated spaces
	{
		//kfree 1st 2 MB
		int freeFrames = sys_calculate_free_frames() ;
f0124734:	e8 64 84 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0124739:	89 85 90 fe ff ff    	mov    %eax,-0x170(%ebp)
		int freeDiskFrames = pf_calculate_free_frames() ;
f012473f:	e8 84 f6 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0124744:	89 85 8c fe ff ff    	mov    %eax,-0x174(%ebp)
		kfree(ptr_allocations[0]);
f012474a:	8b 85 24 fd ff ff    	mov    -0x2dc(%ebp),%eax
f0124750:	83 ec 0c             	sub    $0xc,%esp
f0124753:	50                   	push   %eax
f0124754:	e8 f7 31 fe ff       	call   f0107950 <kfree>
f0124759:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012475c:	e8 67 f6 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0124761:	3b 85 8c fe ff ff    	cmp    -0x174(%ebp),%eax
f0124767:	74 17                	je     f0124780 <test_kheap_phys_addr+0xe41>
f0124769:	83 ec 04             	sub    $0x4,%esp
f012476c:	68 94 b3 13 f0       	push   $0xf013b394
f0124771:	68 6e 08 00 00       	push   $0x86e
f0124776:	68 7a b3 13 f0       	push   $0xf013b37a
f012477b:	e8 85 ba fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512 ) panic("Wrong kfree: pages in memory are not freed correctly");
f0124780:	e8 18 84 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0124785:	89 c2                	mov    %eax,%edx
f0124787:	8b 85 90 fe ff ff    	mov    -0x170(%ebp),%eax
f012478d:	29 c2                	sub    %eax,%edx
f012478f:	89 d0                	mov    %edx,%eax
f0124791:	3d 00 02 00 00       	cmp    $0x200,%eax
f0124796:	74 17                	je     f01247af <test_kheap_phys_addr+0xe70>
f0124798:	83 ec 04             	sub    $0x4,%esp
f012479b:	68 04 bb 13 f0       	push   $0xf013bb04
f01247a0:	68 6f 08 00 00       	push   $0x86f
f01247a5:	68 7a b3 13 f0       	push   $0xf013b37a
f01247aa:	e8 56 ba fd ff       	call   f0100205 <_panic>

		//kfree 2nd 2 MB
		freeFrames = sys_calculate_free_frames() ;
f01247af:	e8 e9 83 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f01247b4:	89 85 90 fe ff ff    	mov    %eax,-0x170(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01247ba:	e8 09 f6 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f01247bf:	89 85 8c fe ff ff    	mov    %eax,-0x174(%ebp)
		kfree(ptr_allocations[1]);
f01247c5:	8b 85 28 fd ff ff    	mov    -0x2d8(%ebp),%eax
f01247cb:	83 ec 0c             	sub    $0xc,%esp
f01247ce:	50                   	push   %eax
f01247cf:	e8 7c 31 fe ff       	call   f0107950 <kfree>
f01247d4:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01247d7:	e8 ec f5 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f01247dc:	3b 85 8c fe ff ff    	cmp    -0x174(%ebp),%eax
f01247e2:	74 17                	je     f01247fb <test_kheap_phys_addr+0xebc>
f01247e4:	83 ec 04             	sub    $0x4,%esp
f01247e7:	68 94 b3 13 f0       	push   $0xf013b394
f01247ec:	68 75 08 00 00       	push   $0x875
f01247f1:	68 7a b3 13 f0       	push   $0xf013b37a
f01247f6:	e8 0a ba fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512) panic("Wrong kfree: pages in memory are not freed correctly");
f01247fb:	e8 9d 83 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0124800:	89 c2                	mov    %eax,%edx
f0124802:	8b 85 90 fe ff ff    	mov    -0x170(%ebp),%eax
f0124808:	29 c2                	sub    %eax,%edx
f012480a:	89 d0                	mov    %edx,%eax
f012480c:	3d 00 02 00 00       	cmp    $0x200,%eax
f0124811:	74 17                	je     f012482a <test_kheap_phys_addr+0xeeb>
f0124813:	83 ec 04             	sub    $0x4,%esp
f0124816:	68 04 bb 13 f0       	push   $0xf013bb04
f012481b:	68 76 08 00 00       	push   $0x876
f0124820:	68 7a b3 13 f0       	push   $0xf013b37a
f0124825:	e8 db b9 fd ff       	call   f0100205 <_panic>

		//kfree 6 MB
		freeFrames = sys_calculate_free_frames() ;
f012482a:	e8 6e 83 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f012482f:	89 85 90 fe ff ff    	mov    %eax,-0x170(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0124835:	e8 8e f5 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012483a:	89 85 8c fe ff ff    	mov    %eax,-0x174(%ebp)
		kfree(ptr_allocations[6]);
f0124840:	8b 85 3c fd ff ff    	mov    -0x2c4(%ebp),%eax
f0124846:	83 ec 0c             	sub    $0xc,%esp
f0124849:	50                   	push   %eax
f012484a:	e8 01 31 fe ff       	call   f0107950 <kfree>
f012484f:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0124852:	e8 71 f5 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0124857:	3b 85 8c fe ff ff    	cmp    -0x174(%ebp),%eax
f012485d:	74 17                	je     f0124876 <test_kheap_phys_addr+0xf37>
f012485f:	83 ec 04             	sub    $0x4,%esp
f0124862:	68 94 b3 13 f0       	push   $0xf013b394
f0124867:	68 7c 08 00 00       	push   $0x87c
f012486c:	68 7a b3 13 f0       	push   $0xf013b37a
f0124871:	e8 8f b9 fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 6*Mega/4096) panic("Wrong kfree: pages in memory are not freed correctly");
f0124876:	e8 22 83 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f012487b:	89 c2                	mov    %eax,%edx
f012487d:	8b 85 90 fe ff ff    	mov    -0x170(%ebp),%eax
f0124883:	29 c2                	sub    %eax,%edx
f0124885:	89 d0                	mov    %edx,%eax
f0124887:	3d 00 06 00 00       	cmp    $0x600,%eax
f012488c:	74 17                	je     f01248a5 <test_kheap_phys_addr+0xf66>
f012488e:	83 ec 04             	sub    $0x4,%esp
f0124891:	68 04 bb 13 f0       	push   $0xf013bb04
f0124896:	68 7d 08 00 00       	push   $0x87d
f012489b:	68 7a b3 13 f0       	push   $0xf013b37a
f01248a0:	e8 60 b9 fd ff       	call   f0100205 <_panic>
	}


	//test kheap_physical_address after kmalloc and kfree [40%]
	{
f01248a5:	89 e0                	mov    %esp,%eax
f01248a7:	89 c6                	mov    %eax,%esi
		uint32 va;
		uint32 endVA = ACTUAL_START + 13*Mega + 32*kilo;
f01248a9:	c7 85 88 fe ff ff 00 	movl   $0x1000,-0x178(%ebp)
f01248b0:	10 00 00 
f01248b3:	8b 85 88 fe ff ff    	mov    -0x178(%ebp),%eax
f01248b9:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01248be:	89 85 84 fe ff ff    	mov    %eax,-0x17c(%ebp)
f01248c4:	8b 85 84 fe ff ff    	mov    -0x17c(%ebp),%eax
f01248ca:	ba 00 00 00 00       	mov    $0x0,%edx
f01248cf:	f7 b5 88 fe ff ff    	divl   -0x178(%ebp)
f01248d5:	8b 85 84 fe ff ff    	mov    -0x17c(%ebp),%eax
f01248db:	29 d0                	sub    %edx,%eax
f01248dd:	89 c1                	mov    %eax,%ecx
f01248df:	c7 85 80 fe ff ff 00 	movl   $0x1000,-0x180(%ebp)
f01248e6:	10 00 00 
f01248e9:	a0 40 26 78 f0       	mov    0xf0782640,%al
f01248ee:	0f b6 d0             	movzbl %al,%edx
f01248f1:	8b 85 80 fe ff ff    	mov    -0x180(%ebp),%eax
f01248f7:	01 d0                	add    %edx,%eax
f01248f9:	48                   	dec    %eax
f01248fa:	89 85 7c fe ff ff    	mov    %eax,-0x184(%ebp)
f0124900:	8b 85 7c fe ff ff    	mov    -0x184(%ebp),%eax
f0124906:	ba 00 00 00 00       	mov    $0x0,%edx
f012490b:	f7 b5 80 fe ff ff    	divl   -0x180(%ebp)
f0124911:	8b 85 7c fe ff ff    	mov    -0x184(%ebp),%eax
f0124917:	29 d0                	sub    %edx,%eax
f0124919:	01 c1                	add    %eax,%ecx
f012491b:	c7 85 78 fe ff ff 00 	movl   $0x1000,-0x188(%ebp)
f0124922:	10 00 00 
f0124925:	a0 40 26 78 f0       	mov    0xf0782640,%al
f012492a:	0f b6 c0             	movzbl %al,%eax
f012492d:	c1 e0 04             	shl    $0x4,%eax
f0124930:	89 c2                	mov    %eax,%edx
f0124932:	8b 85 78 fe ff ff    	mov    -0x188(%ebp),%eax
f0124938:	01 d0                	add    %edx,%eax
f012493a:	48                   	dec    %eax
f012493b:	89 85 74 fe ff ff    	mov    %eax,-0x18c(%ebp)
f0124941:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f0124947:	ba 00 00 00 00       	mov    $0x0,%edx
f012494c:	f7 b5 78 fe ff ff    	divl   -0x188(%ebp)
f0124952:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f0124958:	29 d0                	sub    %edx,%eax
f012495a:	01 c8                	add    %ecx,%eax
f012495c:	2d 00 40 2f 09       	sub    $0x92f4000,%eax
f0124961:	89 85 70 fe ff ff    	mov    %eax,-0x190(%ebp)
		uint32 allPAs[(13*Mega + 32*kilo+INITIAL_KHEAP_ALLOCATIONS)/PAGE_SIZE] ;
f0124967:	c7 85 6c fe ff ff 00 	movl   $0x1000,-0x194(%ebp)
f012496e:	10 00 00 
f0124971:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f0124977:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012497c:	89 85 68 fe ff ff    	mov    %eax,-0x198(%ebp)
f0124982:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f0124988:	ba 00 00 00 00       	mov    $0x0,%edx
f012498d:	f7 b5 6c fe ff ff    	divl   -0x194(%ebp)
f0124993:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f0124999:	29 d0                	sub    %edx,%eax
f012499b:	89 c1                	mov    %eax,%ecx
f012499d:	c7 85 64 fe ff ff 00 	movl   $0x1000,-0x19c(%ebp)
f01249a4:	10 00 00 
f01249a7:	a0 40 26 78 f0       	mov    0xf0782640,%al
f01249ac:	0f b6 d0             	movzbl %al,%edx
f01249af:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f01249b5:	01 d0                	add    %edx,%eax
f01249b7:	48                   	dec    %eax
f01249b8:	89 85 60 fe ff ff    	mov    %eax,-0x1a0(%ebp)
f01249be:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f01249c4:	ba 00 00 00 00       	mov    $0x0,%edx
f01249c9:	f7 b5 64 fe ff ff    	divl   -0x19c(%ebp)
f01249cf:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f01249d5:	29 d0                	sub    %edx,%eax
f01249d7:	01 c1                	add    %eax,%ecx
f01249d9:	c7 85 5c fe ff ff 00 	movl   $0x1000,-0x1a4(%ebp)
f01249e0:	10 00 00 
f01249e3:	a0 40 26 78 f0       	mov    0xf0782640,%al
f01249e8:	0f b6 c0             	movzbl %al,%eax
f01249eb:	c1 e0 04             	shl    $0x4,%eax
f01249ee:	89 c2                	mov    %eax,%edx
f01249f0:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f01249f6:	01 d0                	add    %edx,%eax
f01249f8:	48                   	dec    %eax
f01249f9:	89 85 58 fe ff ff    	mov    %eax,-0x1a8(%ebp)
f01249ff:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f0124a05:	ba 00 00 00 00       	mov    $0x0,%edx
f0124a0a:	f7 b5 5c fe ff ff    	divl   -0x1a4(%ebp)
f0124a10:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f0124a16:	29 d0                	sub    %edx,%eax
f0124a18:	01 c8                	add    %ecx,%eax
f0124a1a:	05 00 c0 d0 00       	add    $0xd0c000,%eax
f0124a1f:	c1 e8 0c             	shr    $0xc,%eax
f0124a22:	89 c2                	mov    %eax,%edx
f0124a24:	4a                   	dec    %edx
f0124a25:	89 95 54 fe ff ff    	mov    %edx,-0x1ac(%ebp)
f0124a2b:	c1 e0 02             	shl    $0x2,%eax
f0124a2e:	8d 50 03             	lea    0x3(%eax),%edx
f0124a31:	b8 10 00 00 00       	mov    $0x10,%eax
f0124a36:	48                   	dec    %eax
f0124a37:	01 d0                	add    %edx,%eax
f0124a39:	bf 10 00 00 00       	mov    $0x10,%edi
f0124a3e:	ba 00 00 00 00       	mov    $0x0,%edx
f0124a43:	f7 f7                	div    %edi
f0124a45:	6b c0 10             	imul   $0x10,%eax,%eax
f0124a48:	29 c4                	sub    %eax,%esp
f0124a4a:	89 e0                	mov    %esp,%eax
f0124a4c:	83 c0 03             	add    $0x3,%eax
f0124a4f:	c1 e8 02             	shr    $0x2,%eax
f0124a52:	c1 e0 02             	shl    $0x2,%eax
f0124a55:	89 85 50 fe ff ff    	mov    %eax,-0x1b0(%ebp)
		i = 0;
f0124a5b:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
		for (va = (KERNEL_HEAP_START + DYNAMIC_ALLOCATOR_DS); va < endVA; va+=PAGE_SIZE)
f0124a62:	c7 85 4c fe ff ff 00 	movl   $0x1000,-0x1b4(%ebp)
f0124a69:	10 00 00 
f0124a6c:	8b 85 4c fe ff ff    	mov    -0x1b4(%ebp),%eax
f0124a72:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0124a77:	89 85 48 fe ff ff    	mov    %eax,-0x1b8(%ebp)
f0124a7d:	8b 85 48 fe ff ff    	mov    -0x1b8(%ebp),%eax
f0124a83:	ba 00 00 00 00       	mov    $0x0,%edx
f0124a88:	f7 b5 4c fe ff ff    	divl   -0x1b4(%ebp)
f0124a8e:	8b 85 48 fe ff ff    	mov    -0x1b8(%ebp),%eax
f0124a94:	29 d0                	sub    %edx,%eax
f0124a96:	2d 00 00 00 0a       	sub    $0xa000000,%eax
f0124a9b:	89 45 d8             	mov    %eax,-0x28(%ebp)
f0124a9e:	eb 29                	jmp    f0124ac9 <test_kheap_phys_addr+0x118a>
		{
			allPAs[i++] = kheap_physical_address(va);
f0124aa0:	8b 5d e4             	mov    -0x1c(%ebp),%ebx
f0124aa3:	8d 43 01             	lea    0x1(%ebx),%eax
f0124aa6:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f0124aa9:	83 ec 0c             	sub    $0xc,%esp
f0124aac:	ff 75 d8             	pushl  -0x28(%ebp)
f0124aaf:	e8 ef 2f fe ff       	call   f0107aa3 <kheap_physical_address>
f0124ab4:	83 c4 10             	add    $0x10,%esp
f0124ab7:	89 c2                	mov    %eax,%edx
f0124ab9:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f0124abf:	89 14 98             	mov    %edx,(%eax,%ebx,4)
	{
		uint32 va;
		uint32 endVA = ACTUAL_START + 13*Mega + 32*kilo;
		uint32 allPAs[(13*Mega + 32*kilo+INITIAL_KHEAP_ALLOCATIONS)/PAGE_SIZE] ;
		i = 0;
		for (va = (KERNEL_HEAP_START + DYNAMIC_ALLOCATOR_DS); va < endVA; va+=PAGE_SIZE)
f0124ac2:	81 45 d8 00 10 00 00 	addl   $0x1000,-0x28(%ebp)
f0124ac9:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0124acc:	3b 85 70 fe ff ff    	cmp    -0x190(%ebp),%eax
f0124ad2:	72 cc                	jb     f0124aa0 <test_kheap_phys_addr+0x1161>
		{
			allPAs[i++] = kheap_physical_address(va);
		}
		int ii = i ;
f0124ad4:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0124ad7:	89 85 44 fe ff ff    	mov    %eax,-0x1bc(%ebp)
		i = 0;
f0124add:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
		int j;
		for (va = (KERNEL_HEAP_START + DYNAMIC_ALLOCATOR_DS); va < endVA; )
f0124ae4:	c7 85 40 fe ff ff 00 	movl   $0x1000,-0x1c0(%ebp)
f0124aeb:	10 00 00 
f0124aee:	8b 85 40 fe ff ff    	mov    -0x1c0(%ebp),%eax
f0124af4:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0124af9:	89 85 3c fe ff ff    	mov    %eax,-0x1c4(%ebp)
f0124aff:	8b 85 3c fe ff ff    	mov    -0x1c4(%ebp),%eax
f0124b05:	ba 00 00 00 00       	mov    $0x0,%edx
f0124b0a:	f7 b5 40 fe ff ff    	divl   -0x1c0(%ebp)
f0124b10:	8b 85 3c fe ff ff    	mov    -0x1c4(%ebp),%eax
f0124b16:	29 d0                	sub    %edx,%eax
f0124b18:	2d 00 00 00 0a       	sub    $0xa000000,%eax
f0124b1d:	89 45 d8             	mov    %eax,-0x28(%ebp)
f0124b20:	e9 ab 00 00 00       	jmp    f0124bd0 <test_kheap_phys_addr+0x1291>
		{
			uint32 *ptr_table ;
			get_page_table(ptr_page_directory, va, &ptr_table);
f0124b25:	a1 3c 26 78 f0       	mov    0xf078263c,%eax
f0124b2a:	83 ec 04             	sub    $0x4,%esp
f0124b2d:	8d 95 1c fd ff ff    	lea    -0x2e4(%ebp),%edx
f0124b33:	52                   	push   %edx
f0124b34:	ff 75 d8             	pushl  -0x28(%ebp)
f0124b37:	50                   	push   %eax
f0124b38:	e8 74 1f fe ff       	call   f0106ab1 <get_page_table>
f0124b3d:	83 c4 10             	add    $0x10,%esp
			if (ptr_table == NULL)
f0124b40:	8b 85 1c fd ff ff    	mov    -0x2e4(%ebp),%eax
f0124b46:	85 c0                	test   %eax,%eax
f0124b48:	75 17                	jne    f0124b61 <test_kheap_phys_addr+0x1222>
				panic("one of the kernel tables is wrongly removed! Tables of Kernel Heap should not be removed");
f0124b4a:	83 ec 04             	sub    $0x4,%esp
f0124b4d:	68 1c bd 13 f0       	push   $0xf013bd1c
f0124b52:	68 93 08 00 00       	push   $0x893
f0124b57:	68 7a b3 13 f0       	push   $0xf013b37a
f0124b5c:	e8 a4 b6 fd ff       	call   f0100205 <_panic>

			for (j = PTX(va); i < ii && j < 1024; ++j, ++i)
f0124b61:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0124b64:	c1 e8 0c             	shr    $0xc,%eax
f0124b67:	25 ff 03 00 00       	and    $0x3ff,%eax
f0124b6c:	89 45 d4             	mov    %eax,-0x2c(%ebp)
f0124b6f:	eb 4b                	jmp    f0124bbc <test_kheap_phys_addr+0x127d>
			{
				if ((ptr_table[j] & 0xFFFFF000) != allPAs[i])
f0124b71:	8b 85 1c fd ff ff    	mov    -0x2e4(%ebp),%eax
f0124b77:	8b 55 d4             	mov    -0x2c(%ebp),%edx
f0124b7a:	c1 e2 02             	shl    $0x2,%edx
f0124b7d:	01 d0                	add    %edx,%eax
f0124b7f:	8b 00                	mov    (%eax),%eax
f0124b81:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0124b86:	89 c1                	mov    %eax,%ecx
f0124b88:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f0124b8e:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f0124b91:	8b 04 90             	mov    (%eax,%edx,4),%eax
f0124b94:	39 c1                	cmp    %eax,%ecx
f0124b96:	74 17                	je     f0124baf <test_kheap_phys_addr+0x1270>
				{
					//cprintf("\nVA = %x, table entry = %x, khep_pa = %x\n",va + j*PAGE_SIZE, (ptr_table[j] & 0xFFFFF000) , allPAs[i]);
					panic("Wrong kheap_physical_address");
f0124b98:	83 ec 04             	sub    $0x4,%esp
f0124b9b:	68 75 bd 13 f0       	push   $0xf013bd75
f0124ba0:	68 9a 08 00 00       	push   $0x89a
f0124ba5:	68 7a b3 13 f0       	push   $0xf013b37a
f0124baa:	e8 56 b6 fd ff       	call   f0100205 <_panic>
				}
				va += PAGE_SIZE;
f0124baf:	81 45 d8 00 10 00 00 	addl   $0x1000,-0x28(%ebp)
			uint32 *ptr_table ;
			get_page_table(ptr_page_directory, va, &ptr_table);
			if (ptr_table == NULL)
				panic("one of the kernel tables is wrongly removed! Tables of Kernel Heap should not be removed");

			for (j = PTX(va); i < ii && j < 1024; ++j, ++i)
f0124bb6:	ff 45 d4             	incl   -0x2c(%ebp)
f0124bb9:	ff 45 e4             	incl   -0x1c(%ebp)
f0124bbc:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0124bbf:	3b 85 44 fe ff ff    	cmp    -0x1bc(%ebp),%eax
f0124bc5:	7d 09                	jge    f0124bd0 <test_kheap_phys_addr+0x1291>
f0124bc7:	81 7d d4 ff 03 00 00 	cmpl   $0x3ff,-0x2c(%ebp)
f0124bce:	7e a1                	jle    f0124b71 <test_kheap_phys_addr+0x1232>
			allPAs[i++] = kheap_physical_address(va);
		}
		int ii = i ;
		i = 0;
		int j;
		for (va = (KERNEL_HEAP_START + DYNAMIC_ALLOCATOR_DS); va < endVA; )
f0124bd0:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0124bd3:	3b 85 70 fe ff ff    	cmp    -0x190(%ebp),%eax
f0124bd9:	0f 82 46 ff ff ff    	jb     f0124b25 <test_kheap_phys_addr+0x11e6>
f0124bdf:	89 f4                	mov    %esi,%esp
				va += PAGE_SIZE;
			}
		}
	}

	cprintf("\b\b\b80%");
f0124be1:	83 ec 0c             	sub    $0xc,%esp
f0124be4:	68 05 b5 13 f0       	push   $0xf013b505
f0124be9:	e8 20 c1 fd ff       	call   f0100d0e <cprintf>
f0124bee:	83 c4 10             	add    $0x10,%esp

	//test kheap_physical_address on non-mapped area [20%]
	{
		uint32 va;
		uint32 startVA = ACTUAL_START + 16*Mega;
f0124bf1:	c7 85 38 fe ff ff 00 	movl   $0x1000,-0x1c8(%ebp)
f0124bf8:	10 00 00 
f0124bfb:	8b 85 38 fe ff ff    	mov    -0x1c8(%ebp),%eax
f0124c01:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0124c06:	89 85 34 fe ff ff    	mov    %eax,-0x1cc(%ebp)
f0124c0c:	8b 85 34 fe ff ff    	mov    -0x1cc(%ebp),%eax
f0124c12:	ba 00 00 00 00       	mov    $0x0,%edx
f0124c17:	f7 b5 38 fe ff ff    	divl   -0x1c8(%ebp)
f0124c1d:	8b 85 34 fe ff ff    	mov    -0x1cc(%ebp),%eax
f0124c23:	29 d0                	sub    %edx,%eax
f0124c25:	89 c1                	mov    %eax,%ecx
f0124c27:	c7 85 30 fe ff ff 00 	movl   $0x1000,-0x1d0(%ebp)
f0124c2e:	10 00 00 
f0124c31:	a0 40 26 78 f0       	mov    0xf0782640,%al
f0124c36:	0f b6 d0             	movzbl %al,%edx
f0124c39:	8b 85 30 fe ff ff    	mov    -0x1d0(%ebp),%eax
f0124c3f:	01 d0                	add    %edx,%eax
f0124c41:	48                   	dec    %eax
f0124c42:	89 85 2c fe ff ff    	mov    %eax,-0x1d4(%ebp)
f0124c48:	8b 85 2c fe ff ff    	mov    -0x1d4(%ebp),%eax
f0124c4e:	ba 00 00 00 00       	mov    $0x0,%edx
f0124c53:	f7 b5 30 fe ff ff    	divl   -0x1d0(%ebp)
f0124c59:	8b 85 2c fe ff ff    	mov    -0x1d4(%ebp),%eax
f0124c5f:	29 d0                	sub    %edx,%eax
f0124c61:	01 c1                	add    %eax,%ecx
f0124c63:	c7 85 28 fe ff ff 00 	movl   $0x1000,-0x1d8(%ebp)
f0124c6a:	10 00 00 
f0124c6d:	a0 40 26 78 f0       	mov    0xf0782640,%al
f0124c72:	0f b6 c0             	movzbl %al,%eax
f0124c75:	c1 e0 04             	shl    $0x4,%eax
f0124c78:	89 c2                	mov    %eax,%edx
f0124c7a:	8b 85 28 fe ff ff    	mov    -0x1d8(%ebp),%eax
f0124c80:	01 d0                	add    %edx,%eax
f0124c82:	48                   	dec    %eax
f0124c83:	89 85 24 fe ff ff    	mov    %eax,-0x1dc(%ebp)
f0124c89:	8b 85 24 fe ff ff    	mov    -0x1dc(%ebp),%eax
f0124c8f:	ba 00 00 00 00       	mov    $0x0,%edx
f0124c94:	f7 b5 28 fe ff ff    	divl   -0x1d8(%ebp)
f0124c9a:	8b 85 24 fe ff ff    	mov    -0x1dc(%ebp),%eax
f0124ca0:	29 d0                	sub    %edx,%eax
f0124ca2:	01 c8                	add    %ecx,%eax
f0124ca4:	2d 00 c0 ff 08       	sub    $0x8ffc000,%eax
f0124ca9:	89 85 20 fe ff ff    	mov    %eax,-0x1e0(%ebp)
		i = 0;
f0124caf:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
		for (va = startVA; va < KERNEL_HEAP_MAX; va+=PAGE_SIZE)
f0124cb6:	8b 85 20 fe ff ff    	mov    -0x1e0(%ebp),%eax
f0124cbc:	89 45 d0             	mov    %eax,-0x30(%ebp)
f0124cbf:	eb 0a                	jmp    f0124ccb <test_kheap_phys_addr+0x138c>
		{
			i++;
f0124cc1:	ff 45 e4             	incl   -0x1c(%ebp)
	//test kheap_physical_address on non-mapped area [20%]
	{
		uint32 va;
		uint32 startVA = ACTUAL_START + 16*Mega;
		i = 0;
		for (va = startVA; va < KERNEL_HEAP_MAX; va+=PAGE_SIZE)
f0124cc4:	81 45 d0 00 10 00 00 	addl   $0x1000,-0x30(%ebp)
f0124ccb:	81 7d d0 ff ef ff ff 	cmpl   $0xffffefff,-0x30(%ebp)
f0124cd2:	76 ed                	jbe    f0124cc1 <test_kheap_phys_addr+0x1382>
		{
			i++;
		}
		int ii = i ;
f0124cd4:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0124cd7:	89 85 1c fe ff ff    	mov    %eax,-0x1e4(%ebp)
		i = 0;
f0124cdd:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
		int j;
		long long va2;
		for (va2 = startVA; va2 < (long long)KERNEL_HEAP_MAX; va2+=PTSIZE)
f0124ce4:	8b 85 20 fe ff ff    	mov    -0x1e0(%ebp),%eax
f0124cea:	89 45 c0             	mov    %eax,-0x40(%ebp)
f0124ced:	c7 45 c4 00 00 00 00 	movl   $0x0,-0x3c(%ebp)
f0124cf4:	e9 cc 00 00 00       	jmp    f0124dc5 <test_kheap_phys_addr+0x1486>
		{
			uint32 *ptr_table ;
			get_page_table(ptr_page_directory, (uint32)va2, &ptr_table);
f0124cf9:	8b 55 c0             	mov    -0x40(%ebp),%edx
f0124cfc:	a1 3c 26 78 f0       	mov    0xf078263c,%eax
f0124d01:	83 ec 04             	sub    $0x4,%esp
f0124d04:	8d 8d 18 fd ff ff    	lea    -0x2e8(%ebp),%ecx
f0124d0a:	51                   	push   %ecx
f0124d0b:	52                   	push   %edx
f0124d0c:	50                   	push   %eax
f0124d0d:	e8 9f 1d fe ff       	call   f0106ab1 <get_page_table>
f0124d12:	83 c4 10             	add    $0x10,%esp
			if (ptr_table == NULL)
f0124d15:	8b 85 18 fd ff ff    	mov    -0x2e8(%ebp),%eax
f0124d1b:	85 c0                	test   %eax,%eax
f0124d1d:	75 17                	jne    f0124d36 <test_kheap_phys_addr+0x13f7>
			{
				panic("one of the kernel tables is wrongly removed! Tables of Kernel Heap should not be removed");
f0124d1f:	83 ec 04             	sub    $0x4,%esp
f0124d22:	68 1c bd 13 f0       	push   $0xf013bd1c
f0124d27:	68 b6 08 00 00       	push   $0x8b6
f0124d2c:	68 7a b3 13 f0       	push   $0xf013b37a
f0124d31:	e8 cf b4 fd ff       	call   f0100205 <_panic>
			}
			for (j = 0; i < ii && j < 1024; ++j, ++i)
f0124d36:	c7 45 cc 00 00 00 00 	movl   $0x0,-0x34(%ebp)
f0124d3d:	eb 67                	jmp    f0124da6 <test_kheap_phys_addr+0x1467>
			{
				//if ((ptr_table[j] & 0xFFFFF000) != allPAs[i])
				unsigned int page_va = startVA+i*PAGE_SIZE;
f0124d3f:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0124d42:	c1 e0 0c             	shl    $0xc,%eax
f0124d45:	89 c2                	mov    %eax,%edx
f0124d47:	8b 85 20 fe ff ff    	mov    -0x1e0(%ebp),%eax
f0124d4d:	01 d0                	add    %edx,%eax
f0124d4f:	89 85 18 fe ff ff    	mov    %eax,-0x1e8(%ebp)
				unsigned int supposed_kheap_phys_add = kheap_physical_address(page_va);
f0124d55:	83 ec 0c             	sub    $0xc,%esp
f0124d58:	ff b5 18 fe ff ff    	pushl  -0x1e8(%ebp)
f0124d5e:	e8 40 2d fe ff       	call   f0107aa3 <kheap_physical_address>
f0124d63:	83 c4 10             	add    $0x10,%esp
f0124d66:	89 85 14 fe ff ff    	mov    %eax,-0x1ec(%ebp)
				if ((ptr_table[j] & 0xFFFFF000) != supposed_kheap_phys_add)
f0124d6c:	8b 85 18 fd ff ff    	mov    -0x2e8(%ebp),%eax
f0124d72:	8b 55 cc             	mov    -0x34(%ebp),%edx
f0124d75:	c1 e2 02             	shl    $0x2,%edx
f0124d78:	01 d0                	add    %edx,%eax
f0124d7a:	8b 00                	mov    (%eax),%eax
f0124d7c:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0124d81:	3b 85 14 fe ff ff    	cmp    -0x1ec(%ebp),%eax
f0124d87:	74 17                	je     f0124da0 <test_kheap_phys_addr+0x1461>
				{
					//cprintf("\nVA = %x, table entry = %x, khep_pa = %x\n",va2 + j*PAGE_SIZE, (ptr_table[j] & 0xFFFFF000) , allPAs[i]);
					panic("Wrong kheap_physical_address");
f0124d89:	83 ec 04             	sub    $0x4,%esp
f0124d8c:	68 75 bd 13 f0       	push   $0xf013bd75
f0124d91:	68 c0 08 00 00       	push   $0x8c0
f0124d96:	68 7a b3 13 f0       	push   $0xf013b37a
f0124d9b:	e8 65 b4 fd ff       	call   f0100205 <_panic>
			get_page_table(ptr_page_directory, (uint32)va2, &ptr_table);
			if (ptr_table == NULL)
			{
				panic("one of the kernel tables is wrongly removed! Tables of Kernel Heap should not be removed");
			}
			for (j = 0; i < ii && j < 1024; ++j, ++i)
f0124da0:	ff 45 cc             	incl   -0x34(%ebp)
f0124da3:	ff 45 e4             	incl   -0x1c(%ebp)
f0124da6:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0124da9:	3b 85 1c fe ff ff    	cmp    -0x1e4(%ebp),%eax
f0124daf:	7d 09                	jge    f0124dba <test_kheap_phys_addr+0x147b>
f0124db1:	81 7d cc ff 03 00 00 	cmpl   $0x3ff,-0x34(%ebp)
f0124db8:	7e 85                	jle    f0124d3f <test_kheap_phys_addr+0x1400>
		}
		int ii = i ;
		i = 0;
		int j;
		long long va2;
		for (va2 = startVA; va2 < (long long)KERNEL_HEAP_MAX; va2+=PTSIZE)
f0124dba:	81 45 c0 00 00 40 00 	addl   $0x400000,-0x40(%ebp)
f0124dc1:	83 55 c4 00          	adcl   $0x0,-0x3c(%ebp)
f0124dc5:	83 7d c4 00          	cmpl   $0x0,-0x3c(%ebp)
f0124dc9:	0f 88 2a ff ff ff    	js     f0124cf9 <test_kheap_phys_addr+0x13ba>
f0124dcf:	83 7d c4 00          	cmpl   $0x0,-0x3c(%ebp)
f0124dd3:	7f 0d                	jg     f0124de2 <test_kheap_phys_addr+0x14a3>
f0124dd5:	81 7d c0 ff ef ff ff 	cmpl   $0xffffefff,-0x40(%ebp)
f0124ddc:	0f 86 17 ff ff ff    	jbe    f0124cf9 <test_kheap_phys_addr+0x13ba>
				}
			}
		}
	}

	cprintf("\b\b\b100%\n");
f0124de2:	83 ec 0c             	sub    $0xc,%esp
f0124de5:	68 5e b5 13 f0       	push   $0xf013b55e
f0124dea:	e8 1f bf fd ff       	call   f0100d0e <cprintf>
f0124def:	83 c4 10             	add    $0x10,%esp

	cprintf("\nCongratulations!! test kheap_physical_address completed successfully.\n");
f0124df2:	83 ec 0c             	sub    $0xc,%esp
f0124df5:	68 c8 bd 13 f0       	push   $0xf013bdc8
f0124dfa:	e8 0f bf fd ff       	call   f0100d0e <cprintf>
f0124dff:	83 c4 10             	add    $0x10,%esp

	return 1;
f0124e02:	b8 01 00 00 00       	mov    $0x1,%eax

}
f0124e07:	8d 65 f4             	lea    -0xc(%ebp),%esp
f0124e0a:	5b                   	pop    %ebx
f0124e0b:	5e                   	pop    %esi
f0124e0c:	5f                   	pop    %edi
f0124e0d:	5d                   	pop    %ebp
f0124e0e:	c3                   	ret    

f0124e0f <test_kheap_virt_addr>:

int test_kheap_virt_addr()
{
f0124e0f:	55                   	push   %ebp
f0124e10:	89 e5                	mov    %esp,%ebp
f0124e12:	57                   	push   %edi
f0124e13:	56                   	push   %esi
f0124e14:	53                   	push   %ebx
f0124e15:	81 ec dc 02 00 00    	sub    $0x2dc,%esp
f0124e1b:	89 e0                	mov    %esp,%eax
f0124e1d:	89 c6                	mov    %eax,%esi
	cprintf("==============================================\n");
f0124e1f:	83 ec 0c             	sub    $0xc,%esp
f0124e22:	68 bc b2 13 f0       	push   $0xf013b2bc
f0124e27:	e8 e2 be fd ff       	call   f0100d0e <cprintf>
f0124e2c:	83 c4 10             	add    $0x10,%esp
	cprintf("MAKE SURE to have a FRESH RUN for this test\n(i.e. don't run any program/test before it)\n");
f0124e2f:	83 ec 0c             	sub    $0xc,%esp
f0124e32:	68 ec b2 13 f0       	push   $0xf013b2ec
f0124e37:	e8 d2 be fd ff       	call   f0100d0e <cprintf>
f0124e3c:	83 c4 10             	add    $0x10,%esp
	cprintf("==============================================\n");
f0124e3f:	83 ec 0c             	sub    $0xc,%esp
f0124e42:	68 bc b2 13 f0       	push   $0xf013b2bc
f0124e47:	e8 c2 be fd ff       	call   f0100d0e <cprintf>
f0124e4c:	83 c4 10             	add    $0x10,%esp

	char minByte = 1<<7;
f0124e4f:	c6 45 d3 80          	movb   $0x80,-0x2d(%ebp)
	char maxByte = 0x7F;
f0124e53:	c6 45 d2 7f          	movb   $0x7f,-0x2e(%ebp)
	short minShort = 1<<15 ;
f0124e57:	66 c7 45 d0 00 80    	movw   $0x8000,-0x30(%ebp)
	short maxShort = 0x7FFF;
f0124e5d:	66 c7 45 ce ff 7f    	movw   $0x7fff,-0x32(%ebp)
	int minInt = 1<<31 ;
f0124e63:	c7 45 c8 00 00 00 80 	movl   $0x80000000,-0x38(%ebp)
	int maxInt = 0x7FFFFFFF;
f0124e6a:	c7 45 c4 ff ff ff 7f 	movl   $0x7fffffff,-0x3c(%ebp)
	char *byteArr, *byteArr2 ;
	short *shortArr, *shortArr2 ;
	int *intArr;
	struct MyStruct *structArr ;
	int lastIndexOfByte, lastIndexOfByte2, lastIndexOfShort, lastIndexOfShort2, lastIndexOfInt, lastIndexOfStruct;
	int start_freeFrames = sys_calculate_free_frames() ;
f0124e71:	e8 27 7d fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0124e76:	89 45 c0             	mov    %eax,-0x40(%ebp)

	//malloc some spaces
	int i, freeFrames, freeDiskFrames ;
	char* ptr;
	int lastIndices[20] = {0};
f0124e79:	8d 95 c8 fd ff ff    	lea    -0x238(%ebp),%edx
f0124e7f:	b9 14 00 00 00       	mov    $0x14,%ecx
f0124e84:	b8 00 00 00 00       	mov    $0x0,%eax
f0124e89:	89 d7                	mov    %edx,%edi
f0124e8b:	f3 ab                	rep stos %eax,%es:(%edi)
	int sums[20] = {0};
f0124e8d:	8d 95 78 fd ff ff    	lea    -0x288(%ebp),%edx
f0124e93:	b9 14 00 00 00       	mov    $0x14,%ecx
f0124e98:	b8 00 00 00 00       	mov    $0x0,%eax
f0124e9d:	89 d7                	mov    %edx,%edi
f0124e9f:	f3 ab                	rep stos %eax,%es:(%edi)
	void* ptr_allocations[20] = {0};
f0124ea1:	8d 95 28 fd ff ff    	lea    -0x2d8(%ebp),%edx
f0124ea7:	b9 14 00 00 00       	mov    $0x14,%ecx
f0124eac:	b8 00 00 00 00       	mov    $0x0,%eax
f0124eb1:	89 d7                	mov    %edx,%edi
f0124eb3:	f3 ab                	rep stos %eax,%es:(%edi)
	{
		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f0124eb5:	e8 e3 7c fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0124eba:	89 45 bc             	mov    %eax,-0x44(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0124ebd:	e8 06 ef fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0124ec2:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[0] = kmalloc(2*Mega-kilo);
f0124ec5:	83 ec 0c             	sub    $0xc,%esp
f0124ec8:	68 00 fc 1f 00       	push   $0x1ffc00
f0124ecd:	e8 b3 29 fe ff       	call   f0107885 <kmalloc>
f0124ed2:	83 c4 10             	add    $0x10,%esp
f0124ed5:	89 85 28 fd ff ff    	mov    %eax,-0x2d8(%ebp)
		if ((uint32) ptr_allocations[0] !=  (ACTUAL_START)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0124edb:	8b 85 28 fd ff ff    	mov    -0x2d8(%ebp),%eax
f0124ee1:	89 c1                	mov    %eax,%ecx
f0124ee3:	c7 45 b4 00 10 00 00 	movl   $0x1000,-0x4c(%ebp)
f0124eea:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0124eed:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0124ef2:	89 45 b0             	mov    %eax,-0x50(%ebp)
f0124ef5:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0124ef8:	ba 00 00 00 00       	mov    $0x0,%edx
f0124efd:	f7 75 b4             	divl   -0x4c(%ebp)
f0124f00:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0124f03:	29 d0                	sub    %edx,%eax
f0124f05:	89 c3                	mov    %eax,%ebx
f0124f07:	c7 45 ac 00 10 00 00 	movl   $0x1000,-0x54(%ebp)
f0124f0e:	a0 40 26 78 f0       	mov    0xf0782640,%al
f0124f13:	0f b6 d0             	movzbl %al,%edx
f0124f16:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0124f19:	01 d0                	add    %edx,%eax
f0124f1b:	48                   	dec    %eax
f0124f1c:	89 45 a8             	mov    %eax,-0x58(%ebp)
f0124f1f:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0124f22:	ba 00 00 00 00       	mov    $0x0,%edx
f0124f27:	f7 75 ac             	divl   -0x54(%ebp)
f0124f2a:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0124f2d:	29 d0                	sub    %edx,%eax
f0124f2f:	01 c3                	add    %eax,%ebx
f0124f31:	c7 45 a4 00 10 00 00 	movl   $0x1000,-0x5c(%ebp)
f0124f38:	a0 40 26 78 f0       	mov    0xf0782640,%al
f0124f3d:	0f b6 c0             	movzbl %al,%eax
f0124f40:	c1 e0 04             	shl    $0x4,%eax
f0124f43:	89 c2                	mov    %eax,%edx
f0124f45:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0124f48:	01 d0                	add    %edx,%eax
f0124f4a:	48                   	dec    %eax
f0124f4b:	89 45 a0             	mov    %eax,-0x60(%ebp)
f0124f4e:	8b 45 a0             	mov    -0x60(%ebp),%eax
f0124f51:	ba 00 00 00 00       	mov    $0x0,%edx
f0124f56:	f7 75 a4             	divl   -0x5c(%ebp)
f0124f59:	8b 45 a0             	mov    -0x60(%ebp),%eax
f0124f5c:	29 d0                	sub    %edx,%eax
f0124f5e:	01 d8                	add    %ebx,%eax
f0124f60:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f0124f65:	39 c1                	cmp    %eax,%ecx
f0124f67:	74 17                	je     f0124f80 <test_kheap_virt_addr+0x171>
f0124f69:	83 ec 04             	sub    $0x4,%esp
f0124f6c:	68 60 b4 13 f0       	push   $0xf013b460
f0124f71:	68 ed 08 00 00       	push   $0x8ed
f0124f76:	68 7a b3 13 f0       	push   $0xf013b37a
f0124f7b:	e8 85 b2 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0124f80:	e8 43 ee fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0124f85:	3b 45 b8             	cmp    -0x48(%ebp),%eax
f0124f88:	74 17                	je     f0124fa1 <test_kheap_virt_addr+0x192>
f0124f8a:	83 ec 04             	sub    $0x4,%esp
f0124f8d:	68 94 b3 13 f0       	push   $0xf013b394
f0124f92:	68 ee 08 00 00       	push   $0x8ee
f0124f97:	68 7a b3 13 f0       	push   $0xf013b37a
f0124f9c:	e8 64 b2 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f0124fa1:	8b 5d bc             	mov    -0x44(%ebp),%ebx
f0124fa4:	e8 f4 7b fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0124fa9:	29 c3                	sub    %eax,%ebx
f0124fab:	89 d8                	mov    %ebx,%eax
f0124fad:	3d 00 02 00 00       	cmp    $0x200,%eax
f0124fb2:	74 17                	je     f0124fcb <test_kheap_virt_addr+0x1bc>
f0124fb4:	83 ec 04             	sub    $0x4,%esp
f0124fb7:	68 fc b3 13 f0       	push   $0xf013b3fc
f0124fbc:	68 ef 08 00 00       	push   $0x8ef
f0124fc1:	68 7a b3 13 f0       	push   $0xf013b37a
f0124fc6:	e8 3a b2 fd ff       	call   f0100205 <_panic>

		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f0124fcb:	e8 cd 7b fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0124fd0:	89 45 bc             	mov    %eax,-0x44(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0124fd3:	e8 f0 ed fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0124fd8:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[1] = kmalloc(2*Mega-kilo);
f0124fdb:	83 ec 0c             	sub    $0xc,%esp
f0124fde:	68 00 fc 1f 00       	push   $0x1ffc00
f0124fe3:	e8 9d 28 fe ff       	call   f0107885 <kmalloc>
f0124fe8:	83 c4 10             	add    $0x10,%esp
f0124feb:	89 85 2c fd ff ff    	mov    %eax,-0x2d4(%ebp)
		if ((uint32) ptr_allocations[1] != (ACTUAL_START + 2*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0124ff1:	8b 85 2c fd ff ff    	mov    -0x2d4(%ebp),%eax
f0124ff7:	89 c1                	mov    %eax,%ecx
f0124ff9:	c7 45 9c 00 10 00 00 	movl   $0x1000,-0x64(%ebp)
f0125000:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0125003:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0125008:	89 45 98             	mov    %eax,-0x68(%ebp)
f012500b:	8b 45 98             	mov    -0x68(%ebp),%eax
f012500e:	ba 00 00 00 00       	mov    $0x0,%edx
f0125013:	f7 75 9c             	divl   -0x64(%ebp)
f0125016:	8b 45 98             	mov    -0x68(%ebp),%eax
f0125019:	29 d0                	sub    %edx,%eax
f012501b:	89 c3                	mov    %eax,%ebx
f012501d:	c7 45 94 00 10 00 00 	movl   $0x1000,-0x6c(%ebp)
f0125024:	a0 40 26 78 f0       	mov    0xf0782640,%al
f0125029:	0f b6 d0             	movzbl %al,%edx
f012502c:	8b 45 94             	mov    -0x6c(%ebp),%eax
f012502f:	01 d0                	add    %edx,%eax
f0125031:	48                   	dec    %eax
f0125032:	89 45 90             	mov    %eax,-0x70(%ebp)
f0125035:	8b 45 90             	mov    -0x70(%ebp),%eax
f0125038:	ba 00 00 00 00       	mov    $0x0,%edx
f012503d:	f7 75 94             	divl   -0x6c(%ebp)
f0125040:	8b 45 90             	mov    -0x70(%ebp),%eax
f0125043:	29 d0                	sub    %edx,%eax
f0125045:	01 c3                	add    %eax,%ebx
f0125047:	c7 45 8c 00 10 00 00 	movl   $0x1000,-0x74(%ebp)
f012504e:	a0 40 26 78 f0       	mov    0xf0782640,%al
f0125053:	0f b6 c0             	movzbl %al,%eax
f0125056:	c1 e0 04             	shl    $0x4,%eax
f0125059:	89 c2                	mov    %eax,%edx
f012505b:	8b 45 8c             	mov    -0x74(%ebp),%eax
f012505e:	01 d0                	add    %edx,%eax
f0125060:	48                   	dec    %eax
f0125061:	89 45 88             	mov    %eax,-0x78(%ebp)
f0125064:	8b 45 88             	mov    -0x78(%ebp),%eax
f0125067:	ba 00 00 00 00       	mov    $0x0,%edx
f012506c:	f7 75 8c             	divl   -0x74(%ebp)
f012506f:	8b 45 88             	mov    -0x78(%ebp),%eax
f0125072:	29 d0                	sub    %edx,%eax
f0125074:	01 d8                	add    %ebx,%eax
f0125076:	2d 00 c0 df 09       	sub    $0x9dfc000,%eax
f012507b:	39 c1                	cmp    %eax,%ecx
f012507d:	74 17                	je     f0125096 <test_kheap_virt_addr+0x287>
f012507f:	83 ec 04             	sub    $0x4,%esp
f0125082:	68 60 b4 13 f0       	push   $0xf013b460
f0125087:	68 f5 08 00 00       	push   $0x8f5
f012508c:	68 7a b3 13 f0       	push   $0xf013b37a
f0125091:	e8 6f b1 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0125096:	e8 2d ed fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012509b:	3b 45 b8             	cmp    -0x48(%ebp),%eax
f012509e:	74 17                	je     f01250b7 <test_kheap_virt_addr+0x2a8>
f01250a0:	83 ec 04             	sub    $0x4,%esp
f01250a3:	68 94 b3 13 f0       	push   $0xf013b394
f01250a8:	68 f6 08 00 00       	push   $0x8f6
f01250ad:	68 7a b3 13 f0       	push   $0xf013b37a
f01250b2:	e8 4e b1 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f01250b7:	8b 5d bc             	mov    -0x44(%ebp),%ebx
f01250ba:	e8 de 7a fe ff       	call   f010cb9d <sys_calculate_free_frames>
f01250bf:	29 c3                	sub    %eax,%ebx
f01250c1:	89 d8                	mov    %ebx,%eax
f01250c3:	3d 00 02 00 00       	cmp    $0x200,%eax
f01250c8:	74 17                	je     f01250e1 <test_kheap_virt_addr+0x2d2>
f01250ca:	83 ec 04             	sub    $0x4,%esp
f01250cd:	68 fc b3 13 f0       	push   $0xf013b3fc
f01250d2:	68 f7 08 00 00       	push   $0x8f7
f01250d7:	68 7a b3 13 f0       	push   $0xf013b37a
f01250dc:	e8 24 b1 fd ff       	call   f0100205 <_panic>

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f01250e1:	e8 b7 7a fe ff       	call   f010cb9d <sys_calculate_free_frames>
f01250e6:	89 45 bc             	mov    %eax,-0x44(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01250e9:	e8 da ec fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f01250ee:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[2] = kmalloc(2*kilo);
f01250f1:	83 ec 0c             	sub    $0xc,%esp
f01250f4:	68 00 08 00 00       	push   $0x800
f01250f9:	e8 87 27 fe ff       	call   f0107885 <kmalloc>
f01250fe:	83 c4 10             	add    $0x10,%esp
f0125101:	89 85 30 fd ff ff    	mov    %eax,-0x2d0(%ebp)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0125107:	8b 85 30 fd ff ff    	mov    -0x2d0(%ebp),%eax
f012510d:	89 c1                	mov    %eax,%ecx
f012510f:	c7 45 84 00 10 00 00 	movl   $0x1000,-0x7c(%ebp)
f0125116:	8b 45 84             	mov    -0x7c(%ebp),%eax
f0125119:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012511e:	89 45 80             	mov    %eax,-0x80(%ebp)
f0125121:	8b 45 80             	mov    -0x80(%ebp),%eax
f0125124:	ba 00 00 00 00       	mov    $0x0,%edx
f0125129:	f7 75 84             	divl   -0x7c(%ebp)
f012512c:	8b 45 80             	mov    -0x80(%ebp),%eax
f012512f:	29 d0                	sub    %edx,%eax
f0125131:	89 c3                	mov    %eax,%ebx
f0125133:	c7 85 7c ff ff ff 00 	movl   $0x1000,-0x84(%ebp)
f012513a:	10 00 00 
f012513d:	a0 40 26 78 f0       	mov    0xf0782640,%al
f0125142:	0f b6 d0             	movzbl %al,%edx
f0125145:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f012514b:	01 d0                	add    %edx,%eax
f012514d:	48                   	dec    %eax
f012514e:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)
f0125154:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f012515a:	ba 00 00 00 00       	mov    $0x0,%edx
f012515f:	f7 b5 7c ff ff ff    	divl   -0x84(%ebp)
f0125165:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f012516b:	29 d0                	sub    %edx,%eax
f012516d:	01 c3                	add    %eax,%ebx
f012516f:	c7 85 74 ff ff ff 00 	movl   $0x1000,-0x8c(%ebp)
f0125176:	10 00 00 
f0125179:	a0 40 26 78 f0       	mov    0xf0782640,%al
f012517e:	0f b6 c0             	movzbl %al,%eax
f0125181:	c1 e0 04             	shl    $0x4,%eax
f0125184:	89 c2                	mov    %eax,%edx
f0125186:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f012518c:	01 d0                	add    %edx,%eax
f012518e:	48                   	dec    %eax
f012518f:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
f0125195:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f012519b:	ba 00 00 00 00       	mov    $0x0,%edx
f01251a0:	f7 b5 74 ff ff ff    	divl   -0x8c(%ebp)
f01251a6:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f01251ac:	29 d0                	sub    %edx,%eax
f01251ae:	01 d8                	add    %ebx,%eax
f01251b0:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
f01251b5:	39 c1                	cmp    %eax,%ecx
f01251b7:	74 17                	je     f01251d0 <test_kheap_virt_addr+0x3c1>
f01251b9:	83 ec 04             	sub    $0x4,%esp
f01251bc:	68 60 b4 13 f0       	push   $0xf013b460
f01251c1:	68 fd 08 00 00       	push   $0x8fd
f01251c6:	68 7a b3 13 f0       	push   $0xf013b37a
f01251cb:	e8 35 b0 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01251d0:	e8 f3 eb fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f01251d5:	3b 45 b8             	cmp    -0x48(%ebp),%eax
f01251d8:	74 17                	je     f01251f1 <test_kheap_virt_addr+0x3e2>
f01251da:	83 ec 04             	sub    $0x4,%esp
f01251dd:	68 94 b3 13 f0       	push   $0xf013b394
f01251e2:	68 fe 08 00 00       	push   $0x8fe
f01251e7:	68 7a b3 13 f0       	push   $0xf013b37a
f01251ec:	e8 14 b0 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f01251f1:	8b 5d bc             	mov    -0x44(%ebp),%ebx
f01251f4:	e8 a4 79 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f01251f9:	29 c3                	sub    %eax,%ebx
f01251fb:	89 d8                	mov    %ebx,%eax
f01251fd:	83 f8 01             	cmp    $0x1,%eax
f0125200:	74 17                	je     f0125219 <test_kheap_virt_addr+0x40a>
f0125202:	83 ec 04             	sub    $0x4,%esp
f0125205:	68 fc b3 13 f0       	push   $0xf013b3fc
f012520a:	68 ff 08 00 00       	push   $0x8ff
f012520f:	68 7a b3 13 f0       	push   $0xf013b37a
f0125214:	e8 ec af fd ff       	call   f0100205 <_panic>

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f0125219:	e8 7f 79 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f012521e:	89 45 bc             	mov    %eax,-0x44(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0125221:	e8 a2 eb fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0125226:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[3] = kmalloc(2*kilo);
f0125229:	83 ec 0c             	sub    $0xc,%esp
f012522c:	68 00 08 00 00       	push   $0x800
f0125231:	e8 4f 26 fe ff       	call   f0107885 <kmalloc>
f0125236:	83 c4 10             	add    $0x10,%esp
f0125239:	89 85 34 fd ff ff    	mov    %eax,-0x2cc(%ebp)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f012523f:	8b 85 34 fd ff ff    	mov    -0x2cc(%ebp),%eax
f0125245:	89 c1                	mov    %eax,%ecx
f0125247:	c7 85 6c ff ff ff 00 	movl   $0x1000,-0x94(%ebp)
f012524e:	10 00 00 
f0125251:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f0125257:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012525c:	89 85 68 ff ff ff    	mov    %eax,-0x98(%ebp)
f0125262:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f0125268:	ba 00 00 00 00       	mov    $0x0,%edx
f012526d:	f7 b5 6c ff ff ff    	divl   -0x94(%ebp)
f0125273:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f0125279:	29 d0                	sub    %edx,%eax
f012527b:	89 c3                	mov    %eax,%ebx
f012527d:	c7 85 64 ff ff ff 00 	movl   $0x1000,-0x9c(%ebp)
f0125284:	10 00 00 
f0125287:	a0 40 26 78 f0       	mov    0xf0782640,%al
f012528c:	0f b6 d0             	movzbl %al,%edx
f012528f:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f0125295:	01 d0                	add    %edx,%eax
f0125297:	48                   	dec    %eax
f0125298:	89 85 60 ff ff ff    	mov    %eax,-0xa0(%ebp)
f012529e:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f01252a4:	ba 00 00 00 00       	mov    $0x0,%edx
f01252a9:	f7 b5 64 ff ff ff    	divl   -0x9c(%ebp)
f01252af:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f01252b5:	29 d0                	sub    %edx,%eax
f01252b7:	01 c3                	add    %eax,%ebx
f01252b9:	c7 85 5c ff ff ff 00 	movl   $0x1000,-0xa4(%ebp)
f01252c0:	10 00 00 
f01252c3:	a0 40 26 78 f0       	mov    0xf0782640,%al
f01252c8:	0f b6 c0             	movzbl %al,%eax
f01252cb:	c1 e0 04             	shl    $0x4,%eax
f01252ce:	89 c2                	mov    %eax,%edx
f01252d0:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f01252d6:	01 d0                	add    %edx,%eax
f01252d8:	48                   	dec    %eax
f01252d9:	89 85 58 ff ff ff    	mov    %eax,-0xa8(%ebp)
f01252df:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f01252e5:	ba 00 00 00 00       	mov    $0x0,%edx
f01252ea:	f7 b5 5c ff ff ff    	divl   -0xa4(%ebp)
f01252f0:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f01252f6:	29 d0                	sub    %edx,%eax
f01252f8:	01 d8                	add    %ebx,%eax
f01252fa:	2d 00 b0 bf 09       	sub    $0x9bfb000,%eax
f01252ff:	39 c1                	cmp    %eax,%ecx
f0125301:	74 17                	je     f012531a <test_kheap_virt_addr+0x50b>
f0125303:	83 ec 04             	sub    $0x4,%esp
f0125306:	68 60 b4 13 f0       	push   $0xf013b460
f012530b:	68 05 09 00 00       	push   $0x905
f0125310:	68 7a b3 13 f0       	push   $0xf013b37a
f0125315:	e8 eb ae fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012531a:	e8 a9 ea fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012531f:	3b 45 b8             	cmp    -0x48(%ebp),%eax
f0125322:	74 17                	je     f012533b <test_kheap_virt_addr+0x52c>
f0125324:	83 ec 04             	sub    $0x4,%esp
f0125327:	68 94 b3 13 f0       	push   $0xf013b394
f012532c:	68 06 09 00 00       	push   $0x906
f0125331:	68 7a b3 13 f0       	push   $0xf013b37a
f0125336:	e8 ca ae fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f012533b:	8b 5d bc             	mov    -0x44(%ebp),%ebx
f012533e:	e8 5a 78 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0125343:	29 c3                	sub    %eax,%ebx
f0125345:	89 d8                	mov    %ebx,%eax
f0125347:	83 f8 01             	cmp    $0x1,%eax
f012534a:	74 17                	je     f0125363 <test_kheap_virt_addr+0x554>
f012534c:	83 ec 04             	sub    $0x4,%esp
f012534f:	68 fc b3 13 f0       	push   $0xf013b3fc
f0125354:	68 07 09 00 00       	push   $0x907
f0125359:	68 7a b3 13 f0       	push   $0xf013b37a
f012535e:	e8 a2 ae fd ff       	call   f0100205 <_panic>

		//7 KB
		freeFrames = sys_calculate_free_frames() ;
f0125363:	e8 35 78 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0125368:	89 45 bc             	mov    %eax,-0x44(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012536b:	e8 58 ea fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0125370:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[4] = kmalloc(7*kilo);
f0125373:	83 ec 0c             	sub    $0xc,%esp
f0125376:	68 00 1c 00 00       	push   $0x1c00
f012537b:	e8 05 25 fe ff       	call   f0107885 <kmalloc>
f0125380:	83 c4 10             	add    $0x10,%esp
f0125383:	89 85 38 fd ff ff    	mov    %eax,-0x2c8(%ebp)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0125389:	8b 85 38 fd ff ff    	mov    -0x2c8(%ebp),%eax
f012538f:	89 c1                	mov    %eax,%ecx
f0125391:	c7 85 54 ff ff ff 00 	movl   $0x1000,-0xac(%ebp)
f0125398:	10 00 00 
f012539b:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f01253a1:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01253a6:	89 85 50 ff ff ff    	mov    %eax,-0xb0(%ebp)
f01253ac:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f01253b2:	ba 00 00 00 00       	mov    $0x0,%edx
f01253b7:	f7 b5 54 ff ff ff    	divl   -0xac(%ebp)
f01253bd:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f01253c3:	29 d0                	sub    %edx,%eax
f01253c5:	89 c3                	mov    %eax,%ebx
f01253c7:	c7 85 4c ff ff ff 00 	movl   $0x1000,-0xb4(%ebp)
f01253ce:	10 00 00 
f01253d1:	a0 40 26 78 f0       	mov    0xf0782640,%al
f01253d6:	0f b6 d0             	movzbl %al,%edx
f01253d9:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f01253df:	01 d0                	add    %edx,%eax
f01253e1:	48                   	dec    %eax
f01253e2:	89 85 48 ff ff ff    	mov    %eax,-0xb8(%ebp)
f01253e8:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f01253ee:	ba 00 00 00 00       	mov    $0x0,%edx
f01253f3:	f7 b5 4c ff ff ff    	divl   -0xb4(%ebp)
f01253f9:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f01253ff:	29 d0                	sub    %edx,%eax
f0125401:	01 c3                	add    %eax,%ebx
f0125403:	c7 85 44 ff ff ff 00 	movl   $0x1000,-0xbc(%ebp)
f012540a:	10 00 00 
f012540d:	a0 40 26 78 f0       	mov    0xf0782640,%al
f0125412:	0f b6 c0             	movzbl %al,%eax
f0125415:	c1 e0 04             	shl    $0x4,%eax
f0125418:	89 c2                	mov    %eax,%edx
f012541a:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0125420:	01 d0                	add    %edx,%eax
f0125422:	48                   	dec    %eax
f0125423:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%ebp)
f0125429:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f012542f:	ba 00 00 00 00       	mov    $0x0,%edx
f0125434:	f7 b5 44 ff ff ff    	divl   -0xbc(%ebp)
f012543a:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0125440:	29 d0                	sub    %edx,%eax
f0125442:	01 d8                	add    %ebx,%eax
f0125444:	2d 00 a0 bf 09       	sub    $0x9bfa000,%eax
f0125449:	39 c1                	cmp    %eax,%ecx
f012544b:	74 17                	je     f0125464 <test_kheap_virt_addr+0x655>
f012544d:	83 ec 04             	sub    $0x4,%esp
f0125450:	68 60 b4 13 f0       	push   $0xf013b460
f0125455:	68 0d 09 00 00       	push   $0x90d
f012545a:	68 7a b3 13 f0       	push   $0xf013b37a
f012545f:	e8 a1 ad fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0125464:	e8 5f e9 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0125469:	3b 45 b8             	cmp    -0x48(%ebp),%eax
f012546c:	74 17                	je     f0125485 <test_kheap_virt_addr+0x676>
f012546e:	83 ec 04             	sub    $0x4,%esp
f0125471:	68 94 b3 13 f0       	push   $0xf013b394
f0125476:	68 0e 09 00 00       	push   $0x90e
f012547b:	68 7a b3 13 f0       	push   $0xf013b37a
f0125480:	e8 80 ad fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: pages are not loaded successfully into memory");
f0125485:	8b 5d bc             	mov    -0x44(%ebp),%ebx
f0125488:	e8 10 77 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f012548d:	29 c3                	sub    %eax,%ebx
f012548f:	89 d8                	mov    %ebx,%eax
f0125491:	83 f8 02             	cmp    $0x2,%eax
f0125494:	74 17                	je     f01254ad <test_kheap_virt_addr+0x69e>
f0125496:	83 ec 04             	sub    $0x4,%esp
f0125499:	68 fc b3 13 f0       	push   $0xf013b3fc
f012549e:	68 0f 09 00 00       	push   $0x90f
f01254a3:	68 7a b3 13 f0       	push   $0xf013b37a
f01254a8:	e8 58 ad fd ff       	call   f0100205 <_panic>

		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f01254ad:	e8 eb 76 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f01254b2:	89 45 bc             	mov    %eax,-0x44(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01254b5:	e8 0e e9 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f01254ba:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[5] = kmalloc(3*Mega-kilo);
f01254bd:	83 ec 0c             	sub    $0xc,%esp
f01254c0:	68 00 fc 2f 00       	push   $0x2ffc00
f01254c5:	e8 bb 23 fe ff       	call   f0107885 <kmalloc>
f01254ca:	83 c4 10             	add    $0x10,%esp
f01254cd:	89 85 3c fd ff ff    	mov    %eax,-0x2c4(%ebp)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo) ) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01254d3:	8b 85 3c fd ff ff    	mov    -0x2c4(%ebp),%eax
f01254d9:	89 c1                	mov    %eax,%ecx
f01254db:	c7 85 3c ff ff ff 00 	movl   $0x1000,-0xc4(%ebp)
f01254e2:	10 00 00 
f01254e5:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f01254eb:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01254f0:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
f01254f6:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f01254fc:	ba 00 00 00 00       	mov    $0x0,%edx
f0125501:	f7 b5 3c ff ff ff    	divl   -0xc4(%ebp)
f0125507:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f012550d:	29 d0                	sub    %edx,%eax
f012550f:	89 c3                	mov    %eax,%ebx
f0125511:	c7 85 34 ff ff ff 00 	movl   $0x1000,-0xcc(%ebp)
f0125518:	10 00 00 
f012551b:	a0 40 26 78 f0       	mov    0xf0782640,%al
f0125520:	0f b6 d0             	movzbl %al,%edx
f0125523:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f0125529:	01 d0                	add    %edx,%eax
f012552b:	48                   	dec    %eax
f012552c:	89 85 30 ff ff ff    	mov    %eax,-0xd0(%ebp)
f0125532:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f0125538:	ba 00 00 00 00       	mov    $0x0,%edx
f012553d:	f7 b5 34 ff ff ff    	divl   -0xcc(%ebp)
f0125543:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f0125549:	29 d0                	sub    %edx,%eax
f012554b:	01 c3                	add    %eax,%ebx
f012554d:	c7 85 2c ff ff ff 00 	movl   $0x1000,-0xd4(%ebp)
f0125554:	10 00 00 
f0125557:	a0 40 26 78 f0       	mov    0xf0782640,%al
f012555c:	0f b6 c0             	movzbl %al,%eax
f012555f:	c1 e0 04             	shl    $0x4,%eax
f0125562:	89 c2                	mov    %eax,%edx
f0125564:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f012556a:	01 d0                	add    %edx,%eax
f012556c:	48                   	dec    %eax
f012556d:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%ebp)
f0125573:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f0125579:	ba 00 00 00 00       	mov    $0x0,%edx
f012557e:	f7 b5 2c ff ff ff    	divl   -0xd4(%ebp)
f0125584:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f012558a:	29 d0                	sub    %edx,%eax
f012558c:	01 d8                	add    %ebx,%eax
f012558e:	2d 00 80 bf 09       	sub    $0x9bf8000,%eax
f0125593:	39 c1                	cmp    %eax,%ecx
f0125595:	74 17                	je     f01255ae <test_kheap_virt_addr+0x79f>
f0125597:	83 ec 04             	sub    $0x4,%esp
f012559a:	68 60 b4 13 f0       	push   $0xf013b460
f012559f:	68 15 09 00 00       	push   $0x915
f01255a4:	68 7a b3 13 f0       	push   $0xf013b37a
f01255a9:	e8 57 ac fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01255ae:	e8 15 e8 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f01255b3:	3b 45 b8             	cmp    -0x48(%ebp),%eax
f01255b6:	74 17                	je     f01255cf <test_kheap_virt_addr+0x7c0>
f01255b8:	83 ec 04             	sub    $0x4,%esp
f01255bb:	68 94 b3 13 f0       	push   $0xf013b394
f01255c0:	68 16 09 00 00       	push   $0x916
f01255c5:	68 7a b3 13 f0       	push   $0xf013b37a
f01255ca:	e8 36 ac fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
f01255cf:	8b 5d bc             	mov    -0x44(%ebp),%ebx
f01255d2:	e8 c6 75 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f01255d7:	29 c3                	sub    %eax,%ebx
f01255d9:	89 d8                	mov    %ebx,%eax
f01255db:	3d 00 03 00 00       	cmp    $0x300,%eax
f01255e0:	74 17                	je     f01255f9 <test_kheap_virt_addr+0x7ea>
f01255e2:	83 ec 04             	sub    $0x4,%esp
f01255e5:	68 fc b3 13 f0       	push   $0xf013b3fc
f01255ea:	68 17 09 00 00       	push   $0x917
f01255ef:	68 7a b3 13 f0       	push   $0xf013b37a
f01255f4:	e8 0c ac fd ff       	call   f0100205 <_panic>

		//6 MB
		freeFrames = sys_calculate_free_frames() ;
f01255f9:	e8 9f 75 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f01255fe:	89 45 bc             	mov    %eax,-0x44(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0125601:	e8 c2 e7 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0125606:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[6] = kmalloc(6*Mega-kilo);
f0125609:	83 ec 0c             	sub    $0xc,%esp
f012560c:	68 00 fc 5f 00       	push   $0x5ffc00
f0125611:	e8 6f 22 fe ff       	call   f0107885 <kmalloc>
f0125616:	83 c4 10             	add    $0x10,%esp
f0125619:	89 85 40 fd ff ff    	mov    %eax,-0x2c0(%ebp)
		if ((uint32) ptr_allocations[6] != (ACTUAL_START + 7*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f012561f:	8b 85 40 fd ff ff    	mov    -0x2c0(%ebp),%eax
f0125625:	89 c1                	mov    %eax,%ecx
f0125627:	c7 85 24 ff ff ff 00 	movl   $0x1000,-0xdc(%ebp)
f012562e:	10 00 00 
f0125631:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0125637:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012563c:	89 85 20 ff ff ff    	mov    %eax,-0xe0(%ebp)
f0125642:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0125648:	ba 00 00 00 00       	mov    $0x0,%edx
f012564d:	f7 b5 24 ff ff ff    	divl   -0xdc(%ebp)
f0125653:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0125659:	29 d0                	sub    %edx,%eax
f012565b:	89 c3                	mov    %eax,%ebx
f012565d:	c7 85 1c ff ff ff 00 	movl   $0x1000,-0xe4(%ebp)
f0125664:	10 00 00 
f0125667:	a0 40 26 78 f0       	mov    0xf0782640,%al
f012566c:	0f b6 d0             	movzbl %al,%edx
f012566f:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f0125675:	01 d0                	add    %edx,%eax
f0125677:	48                   	dec    %eax
f0125678:	89 85 18 ff ff ff    	mov    %eax,-0xe8(%ebp)
f012567e:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f0125684:	ba 00 00 00 00       	mov    $0x0,%edx
f0125689:	f7 b5 1c ff ff ff    	divl   -0xe4(%ebp)
f012568f:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f0125695:	29 d0                	sub    %edx,%eax
f0125697:	01 c3                	add    %eax,%ebx
f0125699:	c7 85 14 ff ff ff 00 	movl   $0x1000,-0xec(%ebp)
f01256a0:	10 00 00 
f01256a3:	a0 40 26 78 f0       	mov    0xf0782640,%al
f01256a8:	0f b6 c0             	movzbl %al,%eax
f01256ab:	c1 e0 04             	shl    $0x4,%eax
f01256ae:	89 c2                	mov    %eax,%edx
f01256b0:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f01256b6:	01 d0                	add    %edx,%eax
f01256b8:	48                   	dec    %eax
f01256b9:	89 85 10 ff ff ff    	mov    %eax,-0xf0(%ebp)
f01256bf:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f01256c5:	ba 00 00 00 00       	mov    $0x0,%edx
f01256ca:	f7 b5 14 ff ff ff    	divl   -0xec(%ebp)
f01256d0:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f01256d6:	29 d0                	sub    %edx,%eax
f01256d8:	01 d8                	add    %ebx,%eax
f01256da:	2d 00 80 8f 09       	sub    $0x98f8000,%eax
f01256df:	39 c1                	cmp    %eax,%ecx
f01256e1:	74 17                	je     f01256fa <test_kheap_virt_addr+0x8eb>
f01256e3:	83 ec 04             	sub    $0x4,%esp
f01256e6:	68 60 b4 13 f0       	push   $0xf013b460
f01256eb:	68 1d 09 00 00       	push   $0x91d
f01256f0:	68 7a b3 13 f0       	push   $0xf013b37a
f01256f5:	e8 0b ab fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01256fa:	e8 c9 e6 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f01256ff:	3b 45 b8             	cmp    -0x48(%ebp),%eax
f0125702:	74 17                	je     f012571b <test_kheap_virt_addr+0x90c>
f0125704:	83 ec 04             	sub    $0x4,%esp
f0125707:	68 94 b3 13 f0       	push   $0xf013b394
f012570c:	68 1e 09 00 00       	push   $0x91e
f0125711:	68 7a b3 13 f0       	push   $0xf013b37a
f0125716:	e8 ea aa fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1536) panic("Wrong allocation: pages are not loaded successfully into memory");
f012571b:	8b 5d bc             	mov    -0x44(%ebp),%ebx
f012571e:	e8 7a 74 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0125723:	29 c3                	sub    %eax,%ebx
f0125725:	89 d8                	mov    %ebx,%eax
f0125727:	3d 00 06 00 00       	cmp    $0x600,%eax
f012572c:	74 17                	je     f0125745 <test_kheap_virt_addr+0x936>
f012572e:	83 ec 04             	sub    $0x4,%esp
f0125731:	68 fc b3 13 f0       	push   $0xf013b3fc
f0125736:	68 1f 09 00 00       	push   $0x91f
f012573b:	68 7a b3 13 f0       	push   $0xf013b37a
f0125740:	e8 c0 aa fd ff       	call   f0100205 <_panic>

		//14 KB
		freeFrames = sys_calculate_free_frames() ;
f0125745:	e8 53 74 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f012574a:	89 45 bc             	mov    %eax,-0x44(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012574d:	e8 76 e6 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0125752:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[7] = kmalloc(14*kilo);
f0125755:	83 ec 0c             	sub    $0xc,%esp
f0125758:	68 00 38 00 00       	push   $0x3800
f012575d:	e8 23 21 fe ff       	call   f0107885 <kmalloc>
f0125762:	83 c4 10             	add    $0x10,%esp
f0125765:	89 85 44 fd ff ff    	mov    %eax,-0x2bc(%ebp)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 13*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f012576b:	8b 85 44 fd ff ff    	mov    -0x2bc(%ebp),%eax
f0125771:	89 c1                	mov    %eax,%ecx
f0125773:	c7 85 0c ff ff ff 00 	movl   $0x1000,-0xf4(%ebp)
f012577a:	10 00 00 
f012577d:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f0125783:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0125788:	89 85 08 ff ff ff    	mov    %eax,-0xf8(%ebp)
f012578e:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f0125794:	ba 00 00 00 00       	mov    $0x0,%edx
f0125799:	f7 b5 0c ff ff ff    	divl   -0xf4(%ebp)
f012579f:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f01257a5:	29 d0                	sub    %edx,%eax
f01257a7:	89 c3                	mov    %eax,%ebx
f01257a9:	c7 85 04 ff ff ff 00 	movl   $0x1000,-0xfc(%ebp)
f01257b0:	10 00 00 
f01257b3:	a0 40 26 78 f0       	mov    0xf0782640,%al
f01257b8:	0f b6 d0             	movzbl %al,%edx
f01257bb:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f01257c1:	01 d0                	add    %edx,%eax
f01257c3:	48                   	dec    %eax
f01257c4:	89 85 00 ff ff ff    	mov    %eax,-0x100(%ebp)
f01257ca:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f01257d0:	ba 00 00 00 00       	mov    $0x0,%edx
f01257d5:	f7 b5 04 ff ff ff    	divl   -0xfc(%ebp)
f01257db:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f01257e1:	29 d0                	sub    %edx,%eax
f01257e3:	01 c3                	add    %eax,%ebx
f01257e5:	c7 85 fc fe ff ff 00 	movl   $0x1000,-0x104(%ebp)
f01257ec:	10 00 00 
f01257ef:	a0 40 26 78 f0       	mov    0xf0782640,%al
f01257f4:	0f b6 c0             	movzbl %al,%eax
f01257f7:	c1 e0 04             	shl    $0x4,%eax
f01257fa:	89 c2                	mov    %eax,%edx
f01257fc:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f0125802:	01 d0                	add    %edx,%eax
f0125804:	48                   	dec    %eax
f0125805:	89 85 f8 fe ff ff    	mov    %eax,-0x108(%ebp)
f012580b:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f0125811:	ba 00 00 00 00       	mov    $0x0,%edx
f0125816:	f7 b5 fc fe ff ff    	divl   -0x104(%ebp)
f012581c:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f0125822:	29 d0                	sub    %edx,%eax
f0125824:	01 d8                	add    %ebx,%eax
f0125826:	2d 00 80 2f 09       	sub    $0x92f8000,%eax
f012582b:	39 c1                	cmp    %eax,%ecx
f012582d:	74 17                	je     f0125846 <test_kheap_virt_addr+0xa37>
f012582f:	83 ec 04             	sub    $0x4,%esp
f0125832:	68 60 b4 13 f0       	push   $0xf013b460
f0125837:	68 25 09 00 00       	push   $0x925
f012583c:	68 7a b3 13 f0       	push   $0xf013b37a
f0125841:	e8 bf a9 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0125846:	e8 7d e5 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012584b:	3b 45 b8             	cmp    -0x48(%ebp),%eax
f012584e:	74 17                	je     f0125867 <test_kheap_virt_addr+0xa58>
f0125850:	83 ec 04             	sub    $0x4,%esp
f0125853:	68 94 b3 13 f0       	push   $0xf013b394
f0125858:	68 26 09 00 00       	push   $0x926
f012585d:	68 7a b3 13 f0       	push   $0xf013b37a
f0125862:	e8 9e a9 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 4) panic("Wrong allocation: pages are not loaded successfully into memory");
f0125867:	8b 5d bc             	mov    -0x44(%ebp),%ebx
f012586a:	e8 2e 73 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f012586f:	29 c3                	sub    %eax,%ebx
f0125871:	89 d8                	mov    %ebx,%eax
f0125873:	83 f8 04             	cmp    $0x4,%eax
f0125876:	74 17                	je     f012588f <test_kheap_virt_addr+0xa80>
f0125878:	83 ec 04             	sub    $0x4,%esp
f012587b:	68 fc b3 13 f0       	push   $0xf013b3fc
f0125880:	68 27 09 00 00       	push   $0x927
f0125885:	68 7a b3 13 f0       	push   $0xf013b37a
f012588a:	e8 76 a9 fd ff       	call   f0100205 <_panic>
	}

	uint32 allPAs[(13*Mega + 32*kilo+ (INITIAL_KHEAP_ALLOCATIONS-DYNAMIC_ALLOCATOR_DS))/PAGE_SIZE] ;
f012588f:	c7 85 f4 fe ff ff 00 	movl   $0x1000,-0x10c(%ebp)
f0125896:	10 00 00 
f0125899:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f012589f:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01258a4:	89 85 f0 fe ff ff    	mov    %eax,-0x110(%ebp)
f01258aa:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f01258b0:	ba 00 00 00 00       	mov    $0x0,%edx
f01258b5:	f7 b5 f4 fe ff ff    	divl   -0x10c(%ebp)
f01258bb:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f01258c1:	29 d0                	sub    %edx,%eax
f01258c3:	89 c1                	mov    %eax,%ecx
f01258c5:	c7 85 ec fe ff ff 00 	movl   $0x1000,-0x114(%ebp)
f01258cc:	10 00 00 
f01258cf:	a0 40 26 78 f0       	mov    0xf0782640,%al
f01258d4:	0f b6 d0             	movzbl %al,%edx
f01258d7:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f01258dd:	01 d0                	add    %edx,%eax
f01258df:	48                   	dec    %eax
f01258e0:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)
f01258e6:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f01258ec:	ba 00 00 00 00       	mov    $0x0,%edx
f01258f1:	f7 b5 ec fe ff ff    	divl   -0x114(%ebp)
f01258f7:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f01258fd:	29 d0                	sub    %edx,%eax
f01258ff:	01 c1                	add    %eax,%ecx
f0125901:	c7 85 e4 fe ff ff 00 	movl   $0x1000,-0x11c(%ebp)
f0125908:	10 00 00 
f012590b:	a0 40 26 78 f0       	mov    0xf0782640,%al
f0125910:	0f b6 c0             	movzbl %al,%eax
f0125913:	c1 e0 04             	shl    $0x4,%eax
f0125916:	89 c2                	mov    %eax,%edx
f0125918:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f012591e:	01 d0                	add    %edx,%eax
f0125920:	48                   	dec    %eax
f0125921:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
f0125927:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012592d:	ba 00 00 00 00       	mov    $0x0,%edx
f0125932:	f7 b5 e4 fe ff ff    	divl   -0x11c(%ebp)
f0125938:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012593e:	29 d0                	sub    %edx,%eax
f0125940:	01 c1                	add    %eax,%ecx
f0125942:	c7 85 dc fe ff ff 00 	movl   $0x1000,-0x124(%ebp)
f0125949:	10 00 00 
f012594c:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f0125952:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0125957:	89 85 d8 fe ff ff    	mov    %eax,-0x128(%ebp)
f012595d:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f0125963:	ba 00 00 00 00       	mov    $0x0,%edx
f0125968:	f7 b5 dc fe ff ff    	divl   -0x124(%ebp)
f012596e:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f0125974:	29 d0                	sub    %edx,%eax
f0125976:	29 c1                	sub    %eax,%ecx
f0125978:	89 c8                	mov    %ecx,%eax
f012597a:	05 00 c0 d0 00       	add    $0xd0c000,%eax
f012597f:	c1 e8 0c             	shr    $0xc,%eax
f0125982:	89 c2                	mov    %eax,%edx
f0125984:	4a                   	dec    %edx
f0125985:	89 95 d4 fe ff ff    	mov    %edx,-0x12c(%ebp)
f012598b:	c1 e0 02             	shl    $0x2,%eax
f012598e:	8d 50 03             	lea    0x3(%eax),%edx
f0125991:	b8 10 00 00 00       	mov    $0x10,%eax
f0125996:	48                   	dec    %eax
f0125997:	01 d0                	add    %edx,%eax
f0125999:	bf 10 00 00 00       	mov    $0x10,%edi
f012599e:	ba 00 00 00 00       	mov    $0x0,%edx
f01259a3:	f7 f7                	div    %edi
f01259a5:	6b c0 10             	imul   $0x10,%eax,%eax
f01259a8:	29 c4                	sub    %eax,%esp
f01259aa:	89 e0                	mov    %esp,%eax
f01259ac:	83 c0 03             	add    $0x3,%eax
f01259af:	c1 e8 02             	shr    $0x2,%eax
f01259b2:	c1 e0 02             	shl    $0x2,%eax
f01259b5:	89 85 d0 fe ff ff    	mov    %eax,-0x130(%ebp)
	int numOfFrames = (13*Mega + 32*kilo+(INITIAL_KHEAP_ALLOCATIONS-DYNAMIC_ALLOCATOR_DS))/PAGE_SIZE ;
f01259bb:	c7 85 cc fe ff ff 00 	movl   $0x1000,-0x134(%ebp)
f01259c2:	10 00 00 
f01259c5:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f01259cb:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01259d0:	89 85 c8 fe ff ff    	mov    %eax,-0x138(%ebp)
f01259d6:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f01259dc:	ba 00 00 00 00       	mov    $0x0,%edx
f01259e1:	f7 b5 cc fe ff ff    	divl   -0x134(%ebp)
f01259e7:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f01259ed:	29 d0                	sub    %edx,%eax
f01259ef:	89 c1                	mov    %eax,%ecx
f01259f1:	c7 85 c4 fe ff ff 00 	movl   $0x1000,-0x13c(%ebp)
f01259f8:	10 00 00 
f01259fb:	a0 40 26 78 f0       	mov    0xf0782640,%al
f0125a00:	0f b6 d0             	movzbl %al,%edx
f0125a03:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f0125a09:	01 d0                	add    %edx,%eax
f0125a0b:	48                   	dec    %eax
f0125a0c:	89 85 c0 fe ff ff    	mov    %eax,-0x140(%ebp)
f0125a12:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f0125a18:	ba 00 00 00 00       	mov    $0x0,%edx
f0125a1d:	f7 b5 c4 fe ff ff    	divl   -0x13c(%ebp)
f0125a23:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f0125a29:	29 d0                	sub    %edx,%eax
f0125a2b:	01 c1                	add    %eax,%ecx
f0125a2d:	c7 85 bc fe ff ff 00 	movl   $0x1000,-0x144(%ebp)
f0125a34:	10 00 00 
f0125a37:	a0 40 26 78 f0       	mov    0xf0782640,%al
f0125a3c:	0f b6 c0             	movzbl %al,%eax
f0125a3f:	c1 e0 04             	shl    $0x4,%eax
f0125a42:	89 c2                	mov    %eax,%edx
f0125a44:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f0125a4a:	01 d0                	add    %edx,%eax
f0125a4c:	48                   	dec    %eax
f0125a4d:	89 85 b8 fe ff ff    	mov    %eax,-0x148(%ebp)
f0125a53:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f0125a59:	ba 00 00 00 00       	mov    $0x0,%edx
f0125a5e:	f7 b5 bc fe ff ff    	divl   -0x144(%ebp)
f0125a64:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f0125a6a:	29 d0                	sub    %edx,%eax
f0125a6c:	01 c1                	add    %eax,%ecx
f0125a6e:	c7 85 b4 fe ff ff 00 	movl   $0x1000,-0x14c(%ebp)
f0125a75:	10 00 00 
f0125a78:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f0125a7e:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0125a83:	89 85 b0 fe ff ff    	mov    %eax,-0x150(%ebp)
f0125a89:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f0125a8f:	ba 00 00 00 00       	mov    $0x0,%edx
f0125a94:	f7 b5 b4 fe ff ff    	divl   -0x14c(%ebp)
f0125a9a:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f0125aa0:	29 d0                	sub    %edx,%eax
f0125aa2:	29 c1                	sub    %eax,%ecx
f0125aa4:	89 c8                	mov    %ecx,%eax
f0125aa6:	05 00 c0 d0 00       	add    $0xd0c000,%eax
f0125aab:	c1 e8 0c             	shr    $0xc,%eax
f0125aae:	89 85 ac fe ff ff    	mov    %eax,-0x154(%ebp)

	//test kheap_virtual_address after kmalloc only [40%]
	{
		uint32 va;
		uint32 endVA = ACTUAL_START + 13*Mega + 32*kilo;
f0125ab4:	c7 85 a8 fe ff ff 00 	movl   $0x1000,-0x158(%ebp)
f0125abb:	10 00 00 
f0125abe:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f0125ac4:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0125ac9:	89 85 a4 fe ff ff    	mov    %eax,-0x15c(%ebp)
f0125acf:	8b 85 a4 fe ff ff    	mov    -0x15c(%ebp),%eax
f0125ad5:	ba 00 00 00 00       	mov    $0x0,%edx
f0125ada:	f7 b5 a8 fe ff ff    	divl   -0x158(%ebp)
f0125ae0:	8b 85 a4 fe ff ff    	mov    -0x15c(%ebp),%eax
f0125ae6:	29 d0                	sub    %edx,%eax
f0125ae8:	89 c1                	mov    %eax,%ecx
f0125aea:	c7 85 a0 fe ff ff 00 	movl   $0x1000,-0x160(%ebp)
f0125af1:	10 00 00 
f0125af4:	a0 40 26 78 f0       	mov    0xf0782640,%al
f0125af9:	0f b6 d0             	movzbl %al,%edx
f0125afc:	8b 85 a0 fe ff ff    	mov    -0x160(%ebp),%eax
f0125b02:	01 d0                	add    %edx,%eax
f0125b04:	48                   	dec    %eax
f0125b05:	89 85 9c fe ff ff    	mov    %eax,-0x164(%ebp)
f0125b0b:	8b 85 9c fe ff ff    	mov    -0x164(%ebp),%eax
f0125b11:	ba 00 00 00 00       	mov    $0x0,%edx
f0125b16:	f7 b5 a0 fe ff ff    	divl   -0x160(%ebp)
f0125b1c:	8b 85 9c fe ff ff    	mov    -0x164(%ebp),%eax
f0125b22:	29 d0                	sub    %edx,%eax
f0125b24:	01 c1                	add    %eax,%ecx
f0125b26:	c7 85 98 fe ff ff 00 	movl   $0x1000,-0x168(%ebp)
f0125b2d:	10 00 00 
f0125b30:	a0 40 26 78 f0       	mov    0xf0782640,%al
f0125b35:	0f b6 c0             	movzbl %al,%eax
f0125b38:	c1 e0 04             	shl    $0x4,%eax
f0125b3b:	89 c2                	mov    %eax,%edx
f0125b3d:	8b 85 98 fe ff ff    	mov    -0x168(%ebp),%eax
f0125b43:	01 d0                	add    %edx,%eax
f0125b45:	48                   	dec    %eax
f0125b46:	89 85 94 fe ff ff    	mov    %eax,-0x16c(%ebp)
f0125b4c:	8b 85 94 fe ff ff    	mov    -0x16c(%ebp),%eax
f0125b52:	ba 00 00 00 00       	mov    $0x0,%edx
f0125b57:	f7 b5 98 fe ff ff    	divl   -0x168(%ebp)
f0125b5d:	8b 85 94 fe ff ff    	mov    -0x16c(%ebp),%eax
f0125b63:	29 d0                	sub    %edx,%eax
f0125b65:	01 c8                	add    %ecx,%eax
f0125b67:	2d 00 40 2f 09       	sub    $0x92f4000,%eax
f0125b6c:	89 85 90 fe ff ff    	mov    %eax,-0x170(%ebp)
		int i = 0;
f0125b72:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		int j;
		for (va = (KERNEL_HEAP_START + DYNAMIC_ALLOCATOR_DS); va < endVA; )
f0125b79:	c7 85 8c fe ff ff 00 	movl   $0x1000,-0x174(%ebp)
f0125b80:	10 00 00 
f0125b83:	8b 85 8c fe ff ff    	mov    -0x174(%ebp),%eax
f0125b89:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0125b8e:	89 85 88 fe ff ff    	mov    %eax,-0x178(%ebp)
f0125b94:	8b 85 88 fe ff ff    	mov    -0x178(%ebp),%eax
f0125b9a:	ba 00 00 00 00       	mov    $0x0,%edx
f0125b9f:	f7 b5 8c fe ff ff    	divl   -0x174(%ebp)
f0125ba5:	8b 85 88 fe ff ff    	mov    -0x178(%ebp),%eax
f0125bab:	29 d0                	sub    %edx,%eax
f0125bad:	2d 00 00 00 0a       	sub    $0xa000000,%eax
f0125bb2:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f0125bb5:	e9 21 01 00 00       	jmp    f0125cdb <test_kheap_virt_addr+0xecc>
		{
			uint32 *ptr_table ;
			get_page_table(ptr_page_directory, va, &ptr_table);
f0125bba:	a1 3c 26 78 f0       	mov    0xf078263c,%eax
f0125bbf:	83 ec 04             	sub    $0x4,%esp
f0125bc2:	8d 95 24 fd ff ff    	lea    -0x2dc(%ebp),%edx
f0125bc8:	52                   	push   %edx
f0125bc9:	ff 75 e4             	pushl  -0x1c(%ebp)
f0125bcc:	50                   	push   %eax
f0125bcd:	e8 df 0e fe ff       	call   f0106ab1 <get_page_table>
f0125bd2:	83 c4 10             	add    $0x10,%esp
			if (ptr_table == NULL)
f0125bd5:	8b 85 24 fd ff ff    	mov    -0x2dc(%ebp),%eax
f0125bdb:	85 c0                	test   %eax,%eax
f0125bdd:	75 17                	jne    f0125bf6 <test_kheap_virt_addr+0xde7>
				panic("one of the kernel tables is wrongly removed! Tables of Kernel Heap should not be removed");
f0125bdf:	83 ec 04             	sub    $0x4,%esp
f0125be2:	68 1c bd 13 f0       	push   $0xf013bd1c
f0125be7:	68 38 09 00 00       	push   $0x938
f0125bec:	68 7a b3 13 f0       	push   $0xf013b37a
f0125bf1:	e8 0f a6 fd ff       	call   f0100205 <_panic>

			for (j = PTX(va); i < numOfFrames && j < 1024; ++j, ++i)
f0125bf6:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0125bf9:	c1 e8 0c             	shr    $0xc,%eax
f0125bfc:	25 ff 03 00 00       	and    $0x3ff,%eax
f0125c01:	89 45 dc             	mov    %eax,-0x24(%ebp)
f0125c04:	e9 ba 00 00 00       	jmp    f0125cc3 <test_kheap_virt_addr+0xeb4>
			{
				allPAs[i] = (ptr_table[j] & 0xFFFFF000);
f0125c09:	8b 85 24 fd ff ff    	mov    -0x2dc(%ebp),%eax
f0125c0f:	8b 55 dc             	mov    -0x24(%ebp),%edx
f0125c12:	c1 e2 02             	shl    $0x2,%edx
f0125c15:	01 d0                	add    %edx,%eax
f0125c17:	8b 00                	mov    (%eax),%eax
f0125c19:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0125c1e:	89 c1                	mov    %eax,%ecx
f0125c20:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f0125c26:	8b 55 e0             	mov    -0x20(%ebp),%edx
f0125c29:	89 0c 90             	mov    %ecx,(%eax,%edx,4)
				uint32 retrievedVA = kheap_virtual_address(allPAs[i]);
f0125c2c:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f0125c32:	8b 55 e0             	mov    -0x20(%ebp),%edx
f0125c35:	8b 04 90             	mov    (%eax,%edx,4),%eax
f0125c38:	83 ec 0c             	sub    $0xc,%esp
f0125c3b:	50                   	push   %eax
f0125c3c:	e8 36 1e fe ff       	call   f0107a77 <kheap_virtual_address>
f0125c41:	83 c4 10             	add    $0x10,%esp
f0125c44:	89 85 84 fe ff ff    	mov    %eax,-0x17c(%ebp)
				//cprintf("va to check = %x\n", va);
				if (retrievedVA != (va))
f0125c4a:	8b 85 84 fe ff ff    	mov    -0x17c(%ebp),%eax
f0125c50:	3b 45 e4             	cmp    -0x1c(%ebp),%eax
f0125c53:	74 61                	je     f0125cb6 <test_kheap_virt_addr+0xea7>
				{
					cprintf("\nretrievedVA = %x, Actual VA = %x, table entry = %x, khep_pa = %x\n",retrievedVA, va + j*PAGE_SIZE, (ptr_table[j] & 0xFFFFF000) , allPAs[i]);
f0125c55:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f0125c5b:	8b 55 e0             	mov    -0x20(%ebp),%edx
f0125c5e:	8b 04 90             	mov    (%eax,%edx,4),%eax
f0125c61:	8b 95 24 fd ff ff    	mov    -0x2dc(%ebp),%edx
f0125c67:	8b 4d dc             	mov    -0x24(%ebp),%ecx
f0125c6a:	c1 e1 02             	shl    $0x2,%ecx
f0125c6d:	01 ca                	add    %ecx,%edx
f0125c6f:	8b 12                	mov    (%edx),%edx
f0125c71:	89 d1                	mov    %edx,%ecx
f0125c73:	81 e1 00 f0 ff ff    	and    $0xfffff000,%ecx
f0125c79:	8b 55 dc             	mov    -0x24(%ebp),%edx
f0125c7c:	c1 e2 0c             	shl    $0xc,%edx
f0125c7f:	89 d3                	mov    %edx,%ebx
f0125c81:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f0125c84:	01 da                	add    %ebx,%edx
f0125c86:	83 ec 0c             	sub    $0xc,%esp
f0125c89:	50                   	push   %eax
f0125c8a:	51                   	push   %ecx
f0125c8b:	52                   	push   %edx
f0125c8c:	ff b5 84 fe ff ff    	pushl  -0x17c(%ebp)
f0125c92:	68 10 be 13 f0       	push   $0xf013be10
f0125c97:	e8 72 b0 fd ff       	call   f0100d0e <cprintf>
f0125c9c:	83 c4 20             	add    $0x20,%esp
					panic("Wrong kheap_virtual_address");
f0125c9f:	83 ec 04             	sub    $0x4,%esp
f0125ca2:	68 53 be 13 f0       	push   $0xf013be53
f0125ca7:	68 42 09 00 00       	push   $0x942
f0125cac:	68 7a b3 13 f0       	push   $0xf013b37a
f0125cb1:	e8 4f a5 fd ff       	call   f0100205 <_panic>
				}
				va+=PAGE_SIZE;
f0125cb6:	81 45 e4 00 10 00 00 	addl   $0x1000,-0x1c(%ebp)
			uint32 *ptr_table ;
			get_page_table(ptr_page_directory, va, &ptr_table);
			if (ptr_table == NULL)
				panic("one of the kernel tables is wrongly removed! Tables of Kernel Heap should not be removed");

			for (j = PTX(va); i < numOfFrames && j < 1024; ++j, ++i)
f0125cbd:	ff 45 dc             	incl   -0x24(%ebp)
f0125cc0:	ff 45 e0             	incl   -0x20(%ebp)
f0125cc3:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0125cc6:	3b 85 ac fe ff ff    	cmp    -0x154(%ebp),%eax
f0125ccc:	7d 0d                	jge    f0125cdb <test_kheap_virt_addr+0xecc>
f0125cce:	81 7d dc ff 03 00 00 	cmpl   $0x3ff,-0x24(%ebp)
f0125cd5:	0f 8e 2e ff ff ff    	jle    f0125c09 <test_kheap_virt_addr+0xdfa>
	{
		uint32 va;
		uint32 endVA = ACTUAL_START + 13*Mega + 32*kilo;
		int i = 0;
		int j;
		for (va = (KERNEL_HEAP_START + DYNAMIC_ALLOCATOR_DS); va < endVA; )
f0125cdb:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0125cde:	3b 85 90 fe ff ff    	cmp    -0x170(%ebp),%eax
f0125ce4:	0f 82 d0 fe ff ff    	jb     f0125bba <test_kheap_virt_addr+0xdab>
				}
				va+=PAGE_SIZE;
			}
		}
	}
	cprintf("\nkheap_virtual_address: current evaluation = 40%");
f0125cea:	83 ec 0c             	sub    $0xc,%esp
f0125ced:	68 70 be 13 f0       	push   $0xf013be70
f0125cf2:	e8 17 b0 fd ff       	call   f0100d0e <cprintf>
f0125cf7:	83 c4 10             	add    $0x10,%esp

	//kfree some of the allocated spaces
	{
		//kfree 1st 2 MB
		int freeFrames = sys_calculate_free_frames() ;
f0125cfa:	e8 9e 6e fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0125cff:	89 85 80 fe ff ff    	mov    %eax,-0x180(%ebp)
		int freeDiskFrames = pf_calculate_free_frames() ;
f0125d05:	e8 be e0 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0125d0a:	89 85 7c fe ff ff    	mov    %eax,-0x184(%ebp)
		kfree(ptr_allocations[0]);
f0125d10:	8b 85 28 fd ff ff    	mov    -0x2d8(%ebp),%eax
f0125d16:	83 ec 0c             	sub    $0xc,%esp
f0125d19:	50                   	push   %eax
f0125d1a:	e8 31 1c fe ff       	call   f0107950 <kfree>
f0125d1f:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0125d22:	e8 a1 e0 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0125d27:	3b 85 7c fe ff ff    	cmp    -0x184(%ebp),%eax
f0125d2d:	74 17                	je     f0125d46 <test_kheap_virt_addr+0xf37>
f0125d2f:	83 ec 04             	sub    $0x4,%esp
f0125d32:	68 94 b3 13 f0       	push   $0xf013b394
f0125d37:	68 50 09 00 00       	push   $0x950
f0125d3c:	68 7a b3 13 f0       	push   $0xf013b37a
f0125d41:	e8 bf a4 fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512 ) panic("Wrong kfree: pages in memory are not freed correctly");
f0125d46:	e8 52 6e fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0125d4b:	89 c2                	mov    %eax,%edx
f0125d4d:	8b 85 80 fe ff ff    	mov    -0x180(%ebp),%eax
f0125d53:	29 c2                	sub    %eax,%edx
f0125d55:	89 d0                	mov    %edx,%eax
f0125d57:	3d 00 02 00 00       	cmp    $0x200,%eax
f0125d5c:	74 17                	je     f0125d75 <test_kheap_virt_addr+0xf66>
f0125d5e:	83 ec 04             	sub    $0x4,%esp
f0125d61:	68 04 bb 13 f0       	push   $0xf013bb04
f0125d66:	68 51 09 00 00       	push   $0x951
f0125d6b:	68 7a b3 13 f0       	push   $0xf013b37a
f0125d70:	e8 90 a4 fd ff       	call   f0100205 <_panic>

		//kfree 2nd 2 MB
		freeFrames = sys_calculate_free_frames() ;
f0125d75:	e8 23 6e fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0125d7a:	89 85 80 fe ff ff    	mov    %eax,-0x180(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0125d80:	e8 43 e0 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0125d85:	89 85 7c fe ff ff    	mov    %eax,-0x184(%ebp)
		kfree(ptr_allocations[1]);
f0125d8b:	8b 85 2c fd ff ff    	mov    -0x2d4(%ebp),%eax
f0125d91:	83 ec 0c             	sub    $0xc,%esp
f0125d94:	50                   	push   %eax
f0125d95:	e8 b6 1b fe ff       	call   f0107950 <kfree>
f0125d9a:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0125d9d:	e8 26 e0 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0125da2:	3b 85 7c fe ff ff    	cmp    -0x184(%ebp),%eax
f0125da8:	74 17                	je     f0125dc1 <test_kheap_virt_addr+0xfb2>
f0125daa:	83 ec 04             	sub    $0x4,%esp
f0125dad:	68 94 b3 13 f0       	push   $0xf013b394
f0125db2:	68 57 09 00 00       	push   $0x957
f0125db7:	68 7a b3 13 f0       	push   $0xf013b37a
f0125dbc:	e8 44 a4 fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512) panic("Wrong kfree: pages in memory are not freed correctly");
f0125dc1:	e8 d7 6d fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0125dc6:	89 c2                	mov    %eax,%edx
f0125dc8:	8b 85 80 fe ff ff    	mov    -0x180(%ebp),%eax
f0125dce:	29 c2                	sub    %eax,%edx
f0125dd0:	89 d0                	mov    %edx,%eax
f0125dd2:	3d 00 02 00 00       	cmp    $0x200,%eax
f0125dd7:	74 17                	je     f0125df0 <test_kheap_virt_addr+0xfe1>
f0125dd9:	83 ec 04             	sub    $0x4,%esp
f0125ddc:	68 04 bb 13 f0       	push   $0xf013bb04
f0125de1:	68 58 09 00 00       	push   $0x958
f0125de6:	68 7a b3 13 f0       	push   $0xf013b37a
f0125deb:	e8 15 a4 fd ff       	call   f0100205 <_panic>

		//kfree 6 MB
		freeFrames = sys_calculate_free_frames() ;
f0125df0:	e8 a8 6d fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0125df5:	89 85 80 fe ff ff    	mov    %eax,-0x180(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0125dfb:	e8 c8 df fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0125e00:	89 85 7c fe ff ff    	mov    %eax,-0x184(%ebp)
		kfree(ptr_allocations[6]);
f0125e06:	8b 85 40 fd ff ff    	mov    -0x2c0(%ebp),%eax
f0125e0c:	83 ec 0c             	sub    $0xc,%esp
f0125e0f:	50                   	push   %eax
f0125e10:	e8 3b 1b fe ff       	call   f0107950 <kfree>
f0125e15:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0125e18:	e8 ab df fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0125e1d:	3b 85 7c fe ff ff    	cmp    -0x184(%ebp),%eax
f0125e23:	74 17                	je     f0125e3c <test_kheap_virt_addr+0x102d>
f0125e25:	83 ec 04             	sub    $0x4,%esp
f0125e28:	68 94 b3 13 f0       	push   $0xf013b394
f0125e2d:	68 5e 09 00 00       	push   $0x95e
f0125e32:	68 7a b3 13 f0       	push   $0xf013b37a
f0125e37:	e8 c9 a3 fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 6*Mega/4096) panic("Wrong kfree: pages in memory are not freed correctly");
f0125e3c:	e8 5c 6d fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0125e41:	89 c2                	mov    %eax,%edx
f0125e43:	8b 85 80 fe ff ff    	mov    -0x180(%ebp),%eax
f0125e49:	29 c2                	sub    %eax,%edx
f0125e4b:	89 d0                	mov    %edx,%eax
f0125e4d:	3d 00 06 00 00       	cmp    $0x600,%eax
f0125e52:	74 17                	je     f0125e6b <test_kheap_virt_addr+0x105c>
f0125e54:	83 ec 04             	sub    $0x4,%esp
f0125e57:	68 04 bb 13 f0       	push   $0xf013bb04
f0125e5c:	68 5f 09 00 00       	push   $0x95f
f0125e61:	68 7a b3 13 f0       	push   $0xf013b37a
f0125e66:	e8 9a a3 fd ff       	call   f0100205 <_panic>


	//test kheap_virtual_address after kmalloc and kfree [40%]
	{
		uint32 va;
		uint32 endVA = ACTUAL_START + 13*Mega + 32*kilo;
f0125e6b:	c7 85 78 fe ff ff 00 	movl   $0x1000,-0x188(%ebp)
f0125e72:	10 00 00 
f0125e75:	8b 85 78 fe ff ff    	mov    -0x188(%ebp),%eax
f0125e7b:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0125e80:	89 85 74 fe ff ff    	mov    %eax,-0x18c(%ebp)
f0125e86:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f0125e8c:	ba 00 00 00 00       	mov    $0x0,%edx
f0125e91:	f7 b5 78 fe ff ff    	divl   -0x188(%ebp)
f0125e97:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f0125e9d:	29 d0                	sub    %edx,%eax
f0125e9f:	89 c1                	mov    %eax,%ecx
f0125ea1:	c7 85 70 fe ff ff 00 	movl   $0x1000,-0x190(%ebp)
f0125ea8:	10 00 00 
f0125eab:	a0 40 26 78 f0       	mov    0xf0782640,%al
f0125eb0:	0f b6 d0             	movzbl %al,%edx
f0125eb3:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f0125eb9:	01 d0                	add    %edx,%eax
f0125ebb:	48                   	dec    %eax
f0125ebc:	89 85 6c fe ff ff    	mov    %eax,-0x194(%ebp)
f0125ec2:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f0125ec8:	ba 00 00 00 00       	mov    $0x0,%edx
f0125ecd:	f7 b5 70 fe ff ff    	divl   -0x190(%ebp)
f0125ed3:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f0125ed9:	29 d0                	sub    %edx,%eax
f0125edb:	01 c1                	add    %eax,%ecx
f0125edd:	c7 85 68 fe ff ff 00 	movl   $0x1000,-0x198(%ebp)
f0125ee4:	10 00 00 
f0125ee7:	a0 40 26 78 f0       	mov    0xf0782640,%al
f0125eec:	0f b6 c0             	movzbl %al,%eax
f0125eef:	c1 e0 04             	shl    $0x4,%eax
f0125ef2:	89 c2                	mov    %eax,%edx
f0125ef4:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f0125efa:	01 d0                	add    %edx,%eax
f0125efc:	48                   	dec    %eax
f0125efd:	89 85 64 fe ff ff    	mov    %eax,-0x19c(%ebp)
f0125f03:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f0125f09:	ba 00 00 00 00       	mov    $0x0,%edx
f0125f0e:	f7 b5 68 fe ff ff    	divl   -0x198(%ebp)
f0125f14:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f0125f1a:	29 d0                	sub    %edx,%eax
f0125f1c:	01 c8                	add    %ecx,%eax
f0125f1e:	2d 00 40 2f 09       	sub    $0x92f4000,%eax
f0125f23:	89 85 60 fe ff ff    	mov    %eax,-0x1a0(%ebp)
		int i = 0;
f0125f29:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
		int j;
		//frames of first 4 MB
		uint32 startIndex = (INITIAL_KHEAP_ALLOCATIONS - DYNAMIC_ALLOCATOR_DS) / PAGE_SIZE;
f0125f30:	c7 85 5c fe ff ff 00 	movl   $0x1000,-0x1a4(%ebp)
f0125f37:	10 00 00 
f0125f3a:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f0125f40:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0125f45:	89 85 58 fe ff ff    	mov    %eax,-0x1a8(%ebp)
f0125f4b:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f0125f51:	ba 00 00 00 00       	mov    $0x0,%edx
f0125f56:	f7 b5 5c fe ff ff    	divl   -0x1a4(%ebp)
f0125f5c:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f0125f62:	29 d0                	sub    %edx,%eax
f0125f64:	89 c1                	mov    %eax,%ecx
f0125f66:	c7 85 54 fe ff ff 00 	movl   $0x1000,-0x1ac(%ebp)
f0125f6d:	10 00 00 
f0125f70:	a0 40 26 78 f0       	mov    0xf0782640,%al
f0125f75:	0f b6 d0             	movzbl %al,%edx
f0125f78:	8b 85 54 fe ff ff    	mov    -0x1ac(%ebp),%eax
f0125f7e:	01 d0                	add    %edx,%eax
f0125f80:	48                   	dec    %eax
f0125f81:	89 85 50 fe ff ff    	mov    %eax,-0x1b0(%ebp)
f0125f87:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f0125f8d:	ba 00 00 00 00       	mov    $0x0,%edx
f0125f92:	f7 b5 54 fe ff ff    	divl   -0x1ac(%ebp)
f0125f98:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f0125f9e:	29 d0                	sub    %edx,%eax
f0125fa0:	01 c1                	add    %eax,%ecx
f0125fa2:	c7 85 4c fe ff ff 00 	movl   $0x1000,-0x1b4(%ebp)
f0125fa9:	10 00 00 
f0125fac:	a0 40 26 78 f0       	mov    0xf0782640,%al
f0125fb1:	0f b6 c0             	movzbl %al,%eax
f0125fb4:	c1 e0 04             	shl    $0x4,%eax
f0125fb7:	89 c2                	mov    %eax,%edx
f0125fb9:	8b 85 4c fe ff ff    	mov    -0x1b4(%ebp),%eax
f0125fbf:	01 d0                	add    %edx,%eax
f0125fc1:	48                   	dec    %eax
f0125fc2:	89 85 48 fe ff ff    	mov    %eax,-0x1b8(%ebp)
f0125fc8:	8b 85 48 fe ff ff    	mov    -0x1b8(%ebp),%eax
f0125fce:	ba 00 00 00 00       	mov    $0x0,%edx
f0125fd3:	f7 b5 4c fe ff ff    	divl   -0x1b4(%ebp)
f0125fd9:	8b 85 48 fe ff ff    	mov    -0x1b8(%ebp),%eax
f0125fdf:	29 d0                	sub    %edx,%eax
f0125fe1:	01 c1                	add    %eax,%ecx
f0125fe3:	c7 85 44 fe ff ff 00 	movl   $0x1000,-0x1bc(%ebp)
f0125fea:	10 00 00 
f0125fed:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f0125ff3:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0125ff8:	89 85 40 fe ff ff    	mov    %eax,-0x1c0(%ebp)
f0125ffe:	8b 85 40 fe ff ff    	mov    -0x1c0(%ebp),%eax
f0126004:	ba 00 00 00 00       	mov    $0x0,%edx
f0126009:	f7 b5 44 fe ff ff    	divl   -0x1bc(%ebp)
f012600f:	8b 85 40 fe ff ff    	mov    -0x1c0(%ebp),%eax
f0126015:	29 d0                	sub    %edx,%eax
f0126017:	29 c1                	sub    %eax,%ecx
f0126019:	89 c8                	mov    %ecx,%eax
f012601b:	05 00 40 00 00       	add    $0x4000,%eax
f0126020:	c1 e8 0c             	shr    $0xc,%eax
f0126023:	89 85 3c fe ff ff    	mov    %eax,-0x1c4(%ebp)
		for (i = startIndex ; i < startIndex + 4*Mega/PAGE_SIZE; ++i)
f0126029:	8b 85 3c fe ff ff    	mov    -0x1c4(%ebp),%eax
f012602f:	89 45 d8             	mov    %eax,-0x28(%ebp)
f0126032:	eb 41                	jmp    f0126075 <test_kheap_virt_addr+0x1266>
		{
			uint32 retrievedVA = kheap_virtual_address(allPAs[i]);
f0126034:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f012603a:	8b 55 d8             	mov    -0x28(%ebp),%edx
f012603d:	8b 04 90             	mov    (%eax,%edx,4),%eax
f0126040:	83 ec 0c             	sub    $0xc,%esp
f0126043:	50                   	push   %eax
f0126044:	e8 2e 1a fe ff       	call   f0107a77 <kheap_virtual_address>
f0126049:	83 c4 10             	add    $0x10,%esp
f012604c:	89 85 38 fe ff ff    	mov    %eax,-0x1c8(%ebp)
			if (retrievedVA != 0)
f0126052:	83 bd 38 fe ff ff 00 	cmpl   $0x0,-0x1c8(%ebp)
f0126059:	74 17                	je     f0126072 <test_kheap_virt_addr+0x1263>
			{
				panic("Wrong kheap_virtual_address");
f012605b:	83 ec 04             	sub    $0x4,%esp
f012605e:	68 53 be 13 f0       	push   $0xf013be53
f0126063:	68 70 09 00 00       	push   $0x970
f0126068:	68 7a b3 13 f0       	push   $0xf013b37a
f012606d:	e8 93 a1 fd ff       	call   f0100205 <_panic>
		uint32 endVA = ACTUAL_START + 13*Mega + 32*kilo;
		int i = 0;
		int j;
		//frames of first 4 MB
		uint32 startIndex = (INITIAL_KHEAP_ALLOCATIONS - DYNAMIC_ALLOCATOR_DS) / PAGE_SIZE;
		for (i = startIndex ; i < startIndex + 4*Mega/PAGE_SIZE; ++i)
f0126072:	ff 45 d8             	incl   -0x28(%ebp)
f0126075:	8b 85 3c fe ff ff    	mov    -0x1c4(%ebp),%eax
f012607b:	8d 90 00 04 00 00    	lea    0x400(%eax),%edx
f0126081:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0126084:	39 c2                	cmp    %eax,%edx
f0126086:	77 ac                	ja     f0126034 <test_kheap_virt_addr+0x1225>
				panic("Wrong kheap_virtual_address");
			}

		}
		//next frames until 6 MB
		for (i = startIndex + 4*Mega/PAGE_SIZE; i < startIndex + (7*Mega + 16*kilo)/PAGE_SIZE; ++i)
f0126088:	8b 85 3c fe ff ff    	mov    -0x1c4(%ebp),%eax
f012608e:	05 00 04 00 00       	add    $0x400,%eax
f0126093:	89 45 d8             	mov    %eax,-0x28(%ebp)
f0126096:	e9 83 00 00 00       	jmp    f012611e <test_kheap_virt_addr+0x130f>
		{
			uint32 retrievedVA = kheap_virtual_address(allPAs[i]);
f012609b:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f01260a1:	8b 55 d8             	mov    -0x28(%ebp),%edx
f01260a4:	8b 04 90             	mov    (%eax,%edx,4),%eax
f01260a7:	83 ec 0c             	sub    $0xc,%esp
f01260aa:	50                   	push   %eax
f01260ab:	e8 c7 19 fe ff       	call   f0107a77 <kheap_virtual_address>
f01260b0:	83 c4 10             	add    $0x10,%esp
f01260b3:	89 85 34 fe ff ff    	mov    %eax,-0x1cc(%ebp)
			if (retrievedVA != KERNEL_HEAP_START + DYNAMIC_ALLOCATOR_DS + i*PAGE_SIZE)
f01260b9:	c7 85 30 fe ff ff 00 	movl   $0x1000,-0x1d0(%ebp)
f01260c0:	10 00 00 
f01260c3:	8b 85 30 fe ff ff    	mov    -0x1d0(%ebp),%eax
f01260c9:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01260ce:	89 85 2c fe ff ff    	mov    %eax,-0x1d4(%ebp)
f01260d4:	8b 85 2c fe ff ff    	mov    -0x1d4(%ebp),%eax
f01260da:	ba 00 00 00 00       	mov    $0x0,%edx
f01260df:	f7 b5 30 fe ff ff    	divl   -0x1d0(%ebp)
f01260e5:	8b 85 2c fe ff ff    	mov    -0x1d4(%ebp),%eax
f01260eb:	29 d0                	sub    %edx,%eax
f01260ed:	89 c2                	mov    %eax,%edx
f01260ef:	8b 45 d8             	mov    -0x28(%ebp),%eax
f01260f2:	c1 e0 0c             	shl    $0xc,%eax
f01260f5:	01 d0                	add    %edx,%eax
f01260f7:	2d 00 00 00 0a       	sub    $0xa000000,%eax
f01260fc:	3b 85 34 fe ff ff    	cmp    -0x1cc(%ebp),%eax
f0126102:	74 17                	je     f012611b <test_kheap_virt_addr+0x130c>
			{
				panic("Wrong kheap_virtual_address");
f0126104:	83 ec 04             	sub    $0x4,%esp
f0126107:	68 53 be 13 f0       	push   $0xf013be53
f012610c:	68 7a 09 00 00       	push   $0x97a
f0126111:	68 7a b3 13 f0       	push   $0xf013b37a
f0126116:	e8 ea a0 fd ff       	call   f0100205 <_panic>
				panic("Wrong kheap_virtual_address");
			}

		}
		//next frames until 6 MB
		for (i = startIndex + 4*Mega/PAGE_SIZE; i < startIndex + (7*Mega + 16*kilo)/PAGE_SIZE; ++i)
f012611b:	ff 45 d8             	incl   -0x28(%ebp)
f012611e:	8b 85 3c fe ff ff    	mov    -0x1c4(%ebp),%eax
f0126124:	8d 90 04 07 00 00    	lea    0x704(%eax),%edx
f012612a:	8b 45 d8             	mov    -0x28(%ebp),%eax
f012612d:	39 c2                	cmp    %eax,%edx
f012612f:	0f 87 66 ff ff ff    	ja     f012609b <test_kheap_virt_addr+0x128c>
			{
				panic("Wrong kheap_virtual_address");
			}
		}
		//frames of 6 MB
		for (i = startIndex + (7*Mega + 16*kilo)/PAGE_SIZE; i < startIndex + (13*Mega + 16*kilo)/PAGE_SIZE; ++i)
f0126135:	8b 85 3c fe ff ff    	mov    -0x1c4(%ebp),%eax
f012613b:	05 04 07 00 00       	add    $0x704,%eax
f0126140:	89 45 d8             	mov    %eax,-0x28(%ebp)
f0126143:	eb 41                	jmp    f0126186 <test_kheap_virt_addr+0x1377>
		{
			uint32 retrievedVA = kheap_virtual_address(allPAs[i]);
f0126145:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f012614b:	8b 55 d8             	mov    -0x28(%ebp),%edx
f012614e:	8b 04 90             	mov    (%eax,%edx,4),%eax
f0126151:	83 ec 0c             	sub    $0xc,%esp
f0126154:	50                   	push   %eax
f0126155:	e8 1d 19 fe ff       	call   f0107a77 <kheap_virtual_address>
f012615a:	83 c4 10             	add    $0x10,%esp
f012615d:	89 85 28 fe ff ff    	mov    %eax,-0x1d8(%ebp)
			if (retrievedVA != 0)
f0126163:	83 bd 28 fe ff ff 00 	cmpl   $0x0,-0x1d8(%ebp)
f012616a:	74 17                	je     f0126183 <test_kheap_virt_addr+0x1374>
			{
				panic("Wrong kheap_virtual_address");
f012616c:	83 ec 04             	sub    $0x4,%esp
f012616f:	68 53 be 13 f0       	push   $0xf013be53
f0126174:	68 83 09 00 00       	push   $0x983
f0126179:	68 7a b3 13 f0       	push   $0xf013b37a
f012617e:	e8 82 a0 fd ff       	call   f0100205 <_panic>
			{
				panic("Wrong kheap_virtual_address");
			}
		}
		//frames of 6 MB
		for (i = startIndex + (7*Mega + 16*kilo)/PAGE_SIZE; i < startIndex + (13*Mega + 16*kilo)/PAGE_SIZE; ++i)
f0126183:	ff 45 d8             	incl   -0x28(%ebp)
f0126186:	8b 85 3c fe ff ff    	mov    -0x1c4(%ebp),%eax
f012618c:	8d 90 04 0d 00 00    	lea    0xd04(%eax),%edx
f0126192:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0126195:	39 c2                	cmp    %eax,%edx
f0126197:	77 ac                	ja     f0126145 <test_kheap_virt_addr+0x1336>
			{
				panic("Wrong kheap_virtual_address");
			}
		}
		//frames of last allocation (14 KB)
		for (i = startIndex + (13*Mega + 16*kilo)/PAGE_SIZE; i < startIndex + (13*Mega + 32*kilo)/PAGE_SIZE; ++i)
f0126199:	8b 85 3c fe ff ff    	mov    -0x1c4(%ebp),%eax
f012619f:	05 04 0d 00 00       	add    $0xd04,%eax
f01261a4:	89 45 d8             	mov    %eax,-0x28(%ebp)
f01261a7:	e9 83 00 00 00       	jmp    f012622f <test_kheap_virt_addr+0x1420>
		{
			uint32 retrievedVA = kheap_virtual_address(allPAs[i]);
f01261ac:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f01261b2:	8b 55 d8             	mov    -0x28(%ebp),%edx
f01261b5:	8b 04 90             	mov    (%eax,%edx,4),%eax
f01261b8:	83 ec 0c             	sub    $0xc,%esp
f01261bb:	50                   	push   %eax
f01261bc:	e8 b6 18 fe ff       	call   f0107a77 <kheap_virtual_address>
f01261c1:	83 c4 10             	add    $0x10,%esp
f01261c4:	89 85 24 fe ff ff    	mov    %eax,-0x1dc(%ebp)
			if (retrievedVA != KERNEL_HEAP_START + DYNAMIC_ALLOCATOR_DS + i*PAGE_SIZE)
f01261ca:	c7 85 20 fe ff ff 00 	movl   $0x1000,-0x1e0(%ebp)
f01261d1:	10 00 00 
f01261d4:	8b 85 20 fe ff ff    	mov    -0x1e0(%ebp),%eax
f01261da:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01261df:	89 85 1c fe ff ff    	mov    %eax,-0x1e4(%ebp)
f01261e5:	8b 85 1c fe ff ff    	mov    -0x1e4(%ebp),%eax
f01261eb:	ba 00 00 00 00       	mov    $0x0,%edx
f01261f0:	f7 b5 20 fe ff ff    	divl   -0x1e0(%ebp)
f01261f6:	8b 85 1c fe ff ff    	mov    -0x1e4(%ebp),%eax
f01261fc:	29 d0                	sub    %edx,%eax
f01261fe:	89 c2                	mov    %eax,%edx
f0126200:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0126203:	c1 e0 0c             	shl    $0xc,%eax
f0126206:	01 d0                	add    %edx,%eax
f0126208:	2d 00 00 00 0a       	sub    $0xa000000,%eax
f012620d:	3b 85 24 fe ff ff    	cmp    -0x1dc(%ebp),%eax
f0126213:	74 17                	je     f012622c <test_kheap_virt_addr+0x141d>
			{
				panic("Wrong kheap_virtual_address");
f0126215:	83 ec 04             	sub    $0x4,%esp
f0126218:	68 53 be 13 f0       	push   $0xf013be53
f012621d:	68 8c 09 00 00       	push   $0x98c
f0126222:	68 7a b3 13 f0       	push   $0xf013b37a
f0126227:	e8 d9 9f fd ff       	call   f0100205 <_panic>
			{
				panic("Wrong kheap_virtual_address");
			}
		}
		//frames of last allocation (14 KB)
		for (i = startIndex + (13*Mega + 16*kilo)/PAGE_SIZE; i < startIndex + (13*Mega + 32*kilo)/PAGE_SIZE; ++i)
f012622c:	ff 45 d8             	incl   -0x28(%ebp)
f012622f:	8b 85 3c fe ff ff    	mov    -0x1c4(%ebp),%eax
f0126235:	8d 90 08 0d 00 00    	lea    0xd08(%eax),%edx
f012623b:	8b 45 d8             	mov    -0x28(%ebp),%eax
f012623e:	39 c2                	cmp    %eax,%edx
f0126240:	0f 87 66 ff ff ff    	ja     f01261ac <test_kheap_virt_addr+0x139d>
				panic("Wrong kheap_virtual_address");
			}
		}
	}

	cprintf("\b\b\b80%");
f0126246:	83 ec 0c             	sub    $0xc,%esp
f0126249:	68 05 b5 13 f0       	push   $0xf013b505
f012624e:	e8 bb aa fd ff       	call   f0100d0e <cprintf>
f0126253:	83 c4 10             	add    $0x10,%esp

	//test kheap_virtual_address on frames of KERNEL CODE [20%]
	{
		uint32 i;
		for (i = 1*Mega; i < (uint32)(end_of_kernel - KERNEL_BASE); i+=PAGE_SIZE)
f0126256:	c7 45 d4 00 00 10 00 	movl   $0x100000,-0x2c(%ebp)
f012625d:	eb 54                	jmp    f01262b3 <test_kheap_virt_addr+0x14a4>
		{
			uint32 retrievedVA = kheap_virtual_address(i);
f012625f:	83 ec 0c             	sub    $0xc,%esp
f0126262:	ff 75 d4             	pushl  -0x2c(%ebp)
f0126265:	e8 0d 18 fe ff       	call   f0107a77 <kheap_virtual_address>
f012626a:	83 c4 10             	add    $0x10,%esp
f012626d:	89 85 18 fe ff ff    	mov    %eax,-0x1e8(%ebp)
			if (retrievedVA != 0)
f0126273:	83 bd 18 fe ff ff 00 	cmpl   $0x0,-0x1e8(%ebp)
f012627a:	74 30                	je     f01262ac <test_kheap_virt_addr+0x149d>
			{
				cprintf("\nPA = %x, retrievedVA = %x\n", i, retrievedVA);
f012627c:	83 ec 04             	sub    $0x4,%esp
f012627f:	ff b5 18 fe ff ff    	pushl  -0x1e8(%ebp)
f0126285:	ff 75 d4             	pushl  -0x2c(%ebp)
f0126288:	68 a1 be 13 f0       	push   $0xf013bea1
f012628d:	e8 7c aa fd ff       	call   f0100d0e <cprintf>
f0126292:	83 c4 10             	add    $0x10,%esp
				panic("Wrong kheap_virtual_address");
f0126295:	83 ec 04             	sub    $0x4,%esp
f0126298:	68 53 be 13 f0       	push   $0xf013be53
f012629d:	68 9c 09 00 00       	push   $0x99c
f01262a2:	68 7a b3 13 f0       	push   $0xf013b37a
f01262a7:	e8 59 9f fd ff       	call   f0100205 <_panic>
	cprintf("\b\b\b80%");

	//test kheap_virtual_address on frames of KERNEL CODE [20%]
	{
		uint32 i;
		for (i = 1*Mega; i < (uint32)(end_of_kernel - KERNEL_BASE); i+=PAGE_SIZE)
f01262ac:	81 45 d4 00 10 00 00 	addl   $0x1000,-0x2c(%ebp)
f01262b3:	b8 7c 27 78 00       	mov    $0x78277c,%eax
f01262b8:	39 45 d4             	cmp    %eax,-0x2c(%ebp)
f01262bb:	72 a2                	jb     f012625f <test_kheap_virt_addr+0x1450>
				panic("Wrong kheap_virtual_address");
			}
		}
	}

	cprintf("\b\b\b100%\n");
f01262bd:	83 ec 0c             	sub    $0xc,%esp
f01262c0:	68 5e b5 13 f0       	push   $0xf013b55e
f01262c5:	e8 44 aa fd ff       	call   f0100d0e <cprintf>
f01262ca:	83 c4 10             	add    $0x10,%esp

	cprintf("\nCongratulations!! test kheap_virtual_address completed successfully.\n");
f01262cd:	83 ec 0c             	sub    $0xc,%esp
f01262d0:	68 c0 be 13 f0       	push   $0xf013bec0
f01262d5:	e8 34 aa fd ff       	call   f0100d0e <cprintf>
f01262da:	83 c4 10             	add    $0x10,%esp

	return 1;
f01262dd:	b8 01 00 00 00       	mov    $0x1,%eax
f01262e2:	89 f4                	mov    %esi,%esp

}
f01262e4:	8d 65 f4             	lea    -0xc(%ebp),%esp
f01262e7:	5b                   	pop    %ebx
f01262e8:	5e                   	pop    %esi
f01262e9:	5f                   	pop    %edi
f01262ea:	5d                   	pop    %ebp
f01262eb:	c3                   	ret    

f01262ec <test_three_creation_functions>:

int initFreeFrames;
int initFreeDiskFrames ;
uint8 firstCall = 1 ;
int test_three_creation_functions()
{
f01262ec:	55                   	push   %ebp
f01262ed:	89 e5                	mov    %esp,%ebp
f01262ef:	57                   	push   %edi
f01262f0:	56                   	push   %esi
f01262f1:	53                   	push   %ebx
f01262f2:	81 ec ac 00 00 00    	sub    $0xac,%esp
	if (firstCall)
f01262f8:	a0 23 2d 19 f0       	mov    0xf0192d23,%al
f01262fd:	84 c0                	test   %al,%al
f01262ff:	74 56                	je     f0126357 <test_three_creation_functions+0x6b>
	{
		firstCall = 0;
f0126301:	c6 05 23 2d 19 f0 00 	movb   $0x0,0xf0192d23
		initFreeFrames = sys_calculate_free_frames() ;
f0126308:	e8 90 68 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f012630d:	a3 78 27 78 f0       	mov    %eax,0xf0782778
		initFreeDiskFrames = pf_calculate_free_frames() ;
f0126312:	e8 b1 da fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0126317:	a3 74 27 78 f0       	mov    %eax,0xf0782774
		//Run simple user program
		{
			char command[100] = "run fos_add 4096";
f012631c:	8d 85 54 ff ff ff    	lea    -0xac(%ebp),%eax
f0126322:	bb 1d c0 13 f0       	mov    $0xf013c01d,%ebx
f0126327:	ba 11 00 00 00       	mov    $0x11,%edx
f012632c:	89 c7                	mov    %eax,%edi
f012632e:	89 de                	mov    %ebx,%esi
f0126330:	89 d1                	mov    %edx,%ecx
f0126332:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0126334:	8d 95 65 ff ff ff    	lea    -0x9b(%ebp),%edx
f012633a:	b9 53 00 00 00       	mov    $0x53,%ecx
f012633f:	b0 00                	mov    $0x0,%al
f0126341:	89 d7                	mov    %edx,%edi
f0126343:	f3 aa                	rep stos %al,%es:(%edi)
			execute_command(command) ;
f0126345:	83 ec 0c             	sub    $0xc,%esp
f0126348:	8d 85 54 ff ff ff    	lea    -0xac(%ebp),%eax
f012634e:	50                   	push   %eax
f012634f:	e8 1c aa fd ff       	call   f0100d70 <execute_command>
f0126354:	83 c4 10             	add    $0x10,%esp
		}
	}
	//Ensure that the user directory, page WS and page tables are allocated in KERNEL HEAP
	{
		struct Env * e = NULL;
f0126357:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
		struct Env * ptr_env = NULL;
f012635e:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		LIST_FOREACH(ptr_env, &env_exit_queue)
f0126365:	a1 b4 25 78 f0       	mov    0xf07825b4,%eax
f012636a:	89 45 e0             	mov    %eax,-0x20(%ebp)
f012636d:	eb 2d                	jmp    f012639c <test_three_creation_functions+0xb0>
		{
			if (strcmp(ptr_env->prog_name, "fos_add") == 0)
f012636f:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0126372:	05 5c 05 00 00       	add    $0x55c,%eax
f0126377:	83 ec 08             	sub    $0x8,%esp
f012637a:	68 07 bf 13 f0       	push   $0xf013bf07
f012637f:	50                   	push   %eax
f0126380:	e8 79 af 00 00       	call   f01312fe <strcmp>
f0126385:	83 c4 10             	add    $0x10,%esp
f0126388:	85 c0                	test   %eax,%eax
f012638a:	75 08                	jne    f0126394 <test_three_creation_functions+0xa8>
			{
				e = ptr_env ;
f012638c:	8b 45 e0             	mov    -0x20(%ebp),%eax
f012638f:	89 45 e4             	mov    %eax,-0x1c(%ebp)
				break;
f0126392:	eb 2f                	jmp    f01263c3 <test_three_creation_functions+0xd7>
	}
	//Ensure that the user directory, page WS and page tables are allocated in KERNEL HEAP
	{
		struct Env * e = NULL;
		struct Env * ptr_env = NULL;
		LIST_FOREACH(ptr_env, &env_exit_queue)
f0126394:	a1 bc 25 78 f0       	mov    0xf07825bc,%eax
f0126399:	89 45 e0             	mov    %eax,-0x20(%ebp)
f012639c:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f01263a0:	74 08                	je     f01263aa <test_three_creation_functions+0xbe>
f01263a2:	8b 45 e0             	mov    -0x20(%ebp),%eax
f01263a5:	8b 40 44             	mov    0x44(%eax),%eax
f01263a8:	eb 05                	jmp    f01263af <test_three_creation_functions+0xc3>
f01263aa:	b8 00 00 00 00       	mov    $0x0,%eax
f01263af:	a3 bc 25 78 f0       	mov    %eax,0xf07825bc
f01263b4:	a1 bc 25 78 f0       	mov    0xf07825bc,%eax
f01263b9:	85 c0                	test   %eax,%eax
f01263bb:	75 b2                	jne    f012636f <test_three_creation_functions+0x83>
f01263bd:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f01263c1:	75 ac                	jne    f012636f <test_three_creation_functions+0x83>
			{
				e = ptr_env ;
				break;
			}
		}
		if (e->pageFaultsCounter != 0)
f01263c3:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01263c6:	8b 80 34 05 00 00    	mov    0x534(%eax),%eax
f01263cc:	85 c0                	test   %eax,%eax
f01263ce:	74 17                	je     f01263e7 <test_three_creation_functions+0xfb>
			panic("Page fault is occur while not expected to. Review the three creation functions");
f01263d0:	83 ec 04             	sub    $0x4,%esp
f01263d3:	68 10 bf 13 f0       	push   $0xf013bf10
f01263d8:	68 c6 09 00 00       	push   $0x9c6
f01263dd:	68 7a b3 13 f0       	push   $0xf013b37a
f01263e2:	e8 1e 9e fd ff       	call   f0100205 <_panic>

		int pagesInWS = env_page_ws_get_size(e);
f01263e7:	83 ec 0c             	sub    $0xc,%esp
f01263ea:	ff 75 e4             	pushl  -0x1c(%ebp)
f01263ed:	e8 24 1a fe ff       	call   f0107e16 <env_page_ws_get_size>
f01263f2:	83 c4 10             	add    $0x10,%esp
f01263f5:	89 45 dc             	mov    %eax,-0x24(%ebp)
		int curFreeFrames = sys_calculate_free_frames() ;
f01263f8:	e8 a0 67 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f01263fd:	89 45 d8             	mov    %eax,-0x28(%ebp)
		int curFreeDiskFrames = pf_calculate_free_frames() ;
f0126400:	e8 c3 d9 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0126405:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		//cprintf("\ndiff in page file = %d, pages in WS = %d\n", initFreeDiskFrames - curFreeDiskFrames, pagesInWS);
		if ((initFreeDiskFrames - curFreeDiskFrames) != pagesInWS) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0126408:	a1 74 27 78 f0       	mov    0xf0782774,%eax
f012640d:	2b 45 d4             	sub    -0x2c(%ebp),%eax
f0126410:	3b 45 dc             	cmp    -0x24(%ebp),%eax
f0126413:	74 17                	je     f012642c <test_three_creation_functions+0x140>
f0126415:	83 ec 04             	sub    $0x4,%esp
f0126418:	68 94 b3 13 f0       	push   $0xf013b394
f012641d:	68 cc 09 00 00       	push   $0x9cc
f0126422:	68 7a b3 13 f0       	push   $0xf013b37a
f0126427:	e8 d9 9d fd ff       	call   f0100205 <_panic>
		//cprintf("\ndiff in mem frames = %d, pages in WS = %d\n", initFreeFrames - curFreeFrames, pagesInWS);
		if ((initFreeFrames - curFreeFrames) != 12/*WS*/ + 2*1/*DIR*/ + 2*3/*Tables*/ + 1 /*user WS table*/ + pagesInWS) panic("Wrong allocation: pages are not loaded successfully into memory");
f012642c:	a1 78 27 78 f0       	mov    0xf0782778,%eax
f0126431:	2b 45 d8             	sub    -0x28(%ebp),%eax
f0126434:	8b 55 dc             	mov    -0x24(%ebp),%edx
f0126437:	83 c2 15             	add    $0x15,%edx
f012643a:	39 d0                	cmp    %edx,%eax
f012643c:	74 17                	je     f0126455 <test_three_creation_functions+0x169>
f012643e:	83 ec 04             	sub    $0x4,%esp
f0126441:	68 fc b3 13 f0       	push   $0xf013b3fc
f0126446:	68 ce 09 00 00       	push   $0x9ce
f012644b:	68 7a b3 13 f0       	push   $0xf013b37a
f0126450:	e8 b0 9d fd ff       	call   f0100205 <_panic>

		//allocate 4 KB
		char *ptr = kmalloc(4*kilo);
f0126455:	83 ec 0c             	sub    $0xc,%esp
f0126458:	68 00 10 00 00       	push   $0x1000
f012645d:	e8 23 14 fe ff       	call   f0107885 <kmalloc>
f0126462:	83 c4 10             	add    $0x10,%esp
f0126465:	89 45 d0             	mov    %eax,-0x30(%ebp)
		if ((uint32) ptr !=  (ACTUAL_START + (12+2*1+2*3+1)*PAGE_SIZE)) panic("Wrong start address for the allocated space... make sure you create the dir, table and page WS in KERNEL HEAP");
f0126468:	c7 45 cc 00 10 00 00 	movl   $0x1000,-0x34(%ebp)
f012646f:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0126472:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0126477:	89 45 c8             	mov    %eax,-0x38(%ebp)
f012647a:	8b 45 c8             	mov    -0x38(%ebp),%eax
f012647d:	ba 00 00 00 00       	mov    $0x0,%edx
f0126482:	f7 75 cc             	divl   -0x34(%ebp)
f0126485:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0126488:	29 d0                	sub    %edx,%eax
f012648a:	89 c1                	mov    %eax,%ecx
f012648c:	c7 45 c4 00 10 00 00 	movl   $0x1000,-0x3c(%ebp)
f0126493:	a0 40 26 78 f0       	mov    0xf0782640,%al
f0126498:	0f b6 d0             	movzbl %al,%edx
f012649b:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f012649e:	01 d0                	add    %edx,%eax
f01264a0:	48                   	dec    %eax
f01264a1:	89 45 c0             	mov    %eax,-0x40(%ebp)
f01264a4:	8b 45 c0             	mov    -0x40(%ebp),%eax
f01264a7:	ba 00 00 00 00       	mov    $0x0,%edx
f01264ac:	f7 75 c4             	divl   -0x3c(%ebp)
f01264af:	8b 45 c0             	mov    -0x40(%ebp),%eax
f01264b2:	29 d0                	sub    %edx,%eax
f01264b4:	01 c1                	add    %eax,%ecx
f01264b6:	c7 45 bc 00 10 00 00 	movl   $0x1000,-0x44(%ebp)
f01264bd:	a0 40 26 78 f0       	mov    0xf0782640,%al
f01264c2:	0f b6 c0             	movzbl %al,%eax
f01264c5:	c1 e0 04             	shl    $0x4,%eax
f01264c8:	89 c2                	mov    %eax,%edx
f01264ca:	8b 45 bc             	mov    -0x44(%ebp),%eax
f01264cd:	01 d0                	add    %edx,%eax
f01264cf:	48                   	dec    %eax
f01264d0:	89 45 b8             	mov    %eax,-0x48(%ebp)
f01264d3:	8b 45 b8             	mov    -0x48(%ebp),%eax
f01264d6:	ba 00 00 00 00       	mov    $0x0,%edx
f01264db:	f7 75 bc             	divl   -0x44(%ebp)
f01264de:	8b 45 b8             	mov    -0x48(%ebp),%eax
f01264e1:	29 d0                	sub    %edx,%eax
f01264e3:	01 c8                	add    %ecx,%eax
f01264e5:	8d 90 00 90 01 f6    	lea    -0x9fe7000(%eax),%edx
f01264eb:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01264ee:	39 c2                	cmp    %eax,%edx
f01264f0:	74 17                	je     f0126509 <test_three_creation_functions+0x21d>
f01264f2:	83 ec 04             	sub    $0x4,%esp
f01264f5:	68 60 bf 13 f0       	push   $0xf013bf60
f01264fa:	68 d2 09 00 00       	push   $0x9d2
f01264ff:	68 7a b3 13 f0       	push   $0xf013b37a
f0126504:	e8 fc 9c fd ff       	call   f0100205 <_panic>
	}

	cprintf("\nCongratulations!! test the 3 creation functions is completed successfully.\n");
f0126509:	83 ec 0c             	sub    $0xc,%esp
f012650c:	68 d0 bf 13 f0       	push   $0xf013bfd0
f0126511:	e8 f8 a7 fd ff       	call   f0100d0e <cprintf>
f0126516:	83 c4 10             	add    $0x10,%esp

	return 1;
f0126519:	b8 01 00 00 00       	mov    $0x1,%eax
}
f012651e:	8d 65 f4             	lea    -0xc(%ebp),%esp
f0126521:	5b                   	pop    %ebx
f0126522:	5e                   	pop    %esi
f0126523:	5f                   	pop    %edi
f0126524:	5d                   	pop    %ebp
f0126525:	c3                   	ret    

f0126526 <test_kfreeall>:


extern void kfreeall() ;

int test_kfreeall()
{
f0126526:	55                   	push   %ebp
f0126527:	89 e5                	mov    %esp,%ebp
f0126529:	57                   	push   %edi
f012652a:	53                   	push   %ebx
f012652b:	81 ec 40 02 00 00    	sub    $0x240,%esp
	char minByte = 1<<7;
f0126531:	c6 45 e7 80          	movb   $0x80,-0x19(%ebp)
	char maxByte = 0x7F;
f0126535:	c6 45 e6 7f          	movb   $0x7f,-0x1a(%ebp)
	short minShort = 1<<15 ;
f0126539:	66 c7 45 e4 00 80    	movw   $0x8000,-0x1c(%ebp)
	short maxShort = 0x7FFF;
f012653f:	66 c7 45 e2 ff 7f    	movw   $0x7fff,-0x1e(%ebp)
	int minInt = 1<<31 ;
f0126545:	c7 45 dc 00 00 00 80 	movl   $0x80000000,-0x24(%ebp)
	int maxInt = 0x7FFFFFFF;
f012654c:	c7 45 d8 ff ff ff 7f 	movl   $0x7fffffff,-0x28(%ebp)
	char *byteArr, *byteArr2 ;
	short *shortArr, *shortArr2 ;
	int *intArr;
	struct MyStruct *structArr ;
	int lastIndexOfByte, lastIndexOfByte2, lastIndexOfShort, lastIndexOfShort2, lastIndexOfInt, lastIndexOfStruct;
	int start_freeFrames = sys_calculate_free_frames() ;
f0126553:	e8 45 66 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0126558:	89 45 d4             	mov    %eax,-0x2c(%ebp)

	//malloc some spaces
	int i, freeFrames, freeDiskFrames ;
	char* ptr;
	int lastIndices[20] = {0};
f012655b:	8d 95 68 fe ff ff    	lea    -0x198(%ebp),%edx
f0126561:	b9 14 00 00 00       	mov    $0x14,%ecx
f0126566:	b8 00 00 00 00       	mov    $0x0,%eax
f012656b:	89 d7                	mov    %edx,%edi
f012656d:	f3 ab                	rep stos %eax,%es:(%edi)
	int sums[20] = {0};
f012656f:	8d 95 18 fe ff ff    	lea    -0x1e8(%ebp),%edx
f0126575:	b9 14 00 00 00       	mov    $0x14,%ecx
f012657a:	b8 00 00 00 00       	mov    $0x0,%eax
f012657f:	89 d7                	mov    %edx,%edi
f0126581:	f3 ab                	rep stos %eax,%es:(%edi)
	void* ptr_allocations[20] = {0};
f0126583:	8d 95 c8 fd ff ff    	lea    -0x238(%ebp),%edx
f0126589:	b9 14 00 00 00       	mov    $0x14,%ecx
f012658e:	b8 00 00 00 00       	mov    $0x0,%eax
f0126593:	89 d7                	mov    %edx,%edi
f0126595:	f3 ab                	rep stos %eax,%es:(%edi)
	{
		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f0126597:	e8 01 66 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f012659c:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012659f:	e8 24 d8 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f01265a4:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[0] = kmalloc(2*Mega-kilo);
f01265a7:	83 ec 0c             	sub    $0xc,%esp
f01265aa:	68 00 fc 1f 00       	push   $0x1ffc00
f01265af:	e8 d1 12 fe ff       	call   f0107885 <kmalloc>
f01265b4:	83 c4 10             	add    $0x10,%esp
f01265b7:	89 85 c8 fd ff ff    	mov    %eax,-0x238(%ebp)
		if ((uint32) ptr_allocations[0] !=  (ACTUAL_START)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01265bd:	8b 85 c8 fd ff ff    	mov    -0x238(%ebp),%eax
f01265c3:	89 c1                	mov    %eax,%ecx
f01265c5:	c7 45 c8 00 10 00 00 	movl   $0x1000,-0x38(%ebp)
f01265cc:	8b 45 c8             	mov    -0x38(%ebp),%eax
f01265cf:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01265d4:	89 45 c4             	mov    %eax,-0x3c(%ebp)
f01265d7:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f01265da:	ba 00 00 00 00       	mov    $0x0,%edx
f01265df:	f7 75 c8             	divl   -0x38(%ebp)
f01265e2:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f01265e5:	29 d0                	sub    %edx,%eax
f01265e7:	89 c3                	mov    %eax,%ebx
f01265e9:	c7 45 c0 00 10 00 00 	movl   $0x1000,-0x40(%ebp)
f01265f0:	a0 40 26 78 f0       	mov    0xf0782640,%al
f01265f5:	0f b6 d0             	movzbl %al,%edx
f01265f8:	8b 45 c0             	mov    -0x40(%ebp),%eax
f01265fb:	01 d0                	add    %edx,%eax
f01265fd:	48                   	dec    %eax
f01265fe:	89 45 bc             	mov    %eax,-0x44(%ebp)
f0126601:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0126604:	ba 00 00 00 00       	mov    $0x0,%edx
f0126609:	f7 75 c0             	divl   -0x40(%ebp)
f012660c:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012660f:	29 d0                	sub    %edx,%eax
f0126611:	01 c3                	add    %eax,%ebx
f0126613:	c7 45 b8 00 10 00 00 	movl   $0x1000,-0x48(%ebp)
f012661a:	a0 40 26 78 f0       	mov    0xf0782640,%al
f012661f:	0f b6 c0             	movzbl %al,%eax
f0126622:	c1 e0 04             	shl    $0x4,%eax
f0126625:	89 c2                	mov    %eax,%edx
f0126627:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012662a:	01 d0                	add    %edx,%eax
f012662c:	48                   	dec    %eax
f012662d:	89 45 b4             	mov    %eax,-0x4c(%ebp)
f0126630:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0126633:	ba 00 00 00 00       	mov    $0x0,%edx
f0126638:	f7 75 b8             	divl   -0x48(%ebp)
f012663b:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f012663e:	29 d0                	sub    %edx,%eax
f0126640:	01 d8                	add    %ebx,%eax
f0126642:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f0126647:	39 c1                	cmp    %eax,%ecx
f0126649:	74 17                	je     f0126662 <test_kfreeall+0x13c>
f012664b:	83 ec 04             	sub    $0x4,%esp
f012664e:	68 60 b4 13 f0       	push   $0xf013b460
f0126653:	68 f9 09 00 00       	push   $0x9f9
f0126658:	68 7a b3 13 f0       	push   $0xf013b37a
f012665d:	e8 a3 9b fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0126662:	e8 61 d7 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0126667:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f012666a:	74 17                	je     f0126683 <test_kfreeall+0x15d>
f012666c:	83 ec 04             	sub    $0x4,%esp
f012666f:	68 94 b3 13 f0       	push   $0xf013b394
f0126674:	68 fa 09 00 00       	push   $0x9fa
f0126679:	68 7a b3 13 f0       	push   $0xf013b37a
f012667e:	e8 82 9b fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f0126683:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0126686:	e8 12 65 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f012668b:	29 c3                	sub    %eax,%ebx
f012668d:	89 d8                	mov    %ebx,%eax
f012668f:	3d 00 02 00 00       	cmp    $0x200,%eax
f0126694:	74 17                	je     f01266ad <test_kfreeall+0x187>
f0126696:	83 ec 04             	sub    $0x4,%esp
f0126699:	68 fc b3 13 f0       	push   $0xf013b3fc
f012669e:	68 fb 09 00 00       	push   $0x9fb
f01266a3:	68 7a b3 13 f0       	push   $0xf013b37a
f01266a8:	e8 58 9b fd ff       	call   f0100205 <_panic>
		lastIndices[0] = (2*Mega-kilo)/sizeof(char) - 1;
f01266ad:	c7 85 68 fe ff ff ff 	movl   $0x1ffbff,-0x198(%ebp)
f01266b4:	fb 1f 00 

		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f01266b7:	e8 e1 64 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f01266bc:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01266bf:	e8 04 d7 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f01266c4:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[1] = kmalloc(2*Mega-kilo);
f01266c7:	83 ec 0c             	sub    $0xc,%esp
f01266ca:	68 00 fc 1f 00       	push   $0x1ffc00
f01266cf:	e8 b1 11 fe ff       	call   f0107885 <kmalloc>
f01266d4:	83 c4 10             	add    $0x10,%esp
f01266d7:	89 85 cc fd ff ff    	mov    %eax,-0x234(%ebp)
		if ((uint32) ptr_allocations[1] != (ACTUAL_START + 2*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01266dd:	8b 85 cc fd ff ff    	mov    -0x234(%ebp),%eax
f01266e3:	89 c1                	mov    %eax,%ecx
f01266e5:	c7 45 b0 00 10 00 00 	movl   $0x1000,-0x50(%ebp)
f01266ec:	8b 45 b0             	mov    -0x50(%ebp),%eax
f01266ef:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01266f4:	89 45 ac             	mov    %eax,-0x54(%ebp)
f01266f7:	8b 45 ac             	mov    -0x54(%ebp),%eax
f01266fa:	ba 00 00 00 00       	mov    $0x0,%edx
f01266ff:	f7 75 b0             	divl   -0x50(%ebp)
f0126702:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0126705:	29 d0                	sub    %edx,%eax
f0126707:	89 c3                	mov    %eax,%ebx
f0126709:	c7 45 a8 00 10 00 00 	movl   $0x1000,-0x58(%ebp)
f0126710:	a0 40 26 78 f0       	mov    0xf0782640,%al
f0126715:	0f b6 d0             	movzbl %al,%edx
f0126718:	8b 45 a8             	mov    -0x58(%ebp),%eax
f012671b:	01 d0                	add    %edx,%eax
f012671d:	48                   	dec    %eax
f012671e:	89 45 a4             	mov    %eax,-0x5c(%ebp)
f0126721:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0126724:	ba 00 00 00 00       	mov    $0x0,%edx
f0126729:	f7 75 a8             	divl   -0x58(%ebp)
f012672c:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f012672f:	29 d0                	sub    %edx,%eax
f0126731:	01 c3                	add    %eax,%ebx
f0126733:	c7 45 a0 00 10 00 00 	movl   $0x1000,-0x60(%ebp)
f012673a:	a0 40 26 78 f0       	mov    0xf0782640,%al
f012673f:	0f b6 c0             	movzbl %al,%eax
f0126742:	c1 e0 04             	shl    $0x4,%eax
f0126745:	89 c2                	mov    %eax,%edx
f0126747:	8b 45 a0             	mov    -0x60(%ebp),%eax
f012674a:	01 d0                	add    %edx,%eax
f012674c:	48                   	dec    %eax
f012674d:	89 45 9c             	mov    %eax,-0x64(%ebp)
f0126750:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0126753:	ba 00 00 00 00       	mov    $0x0,%edx
f0126758:	f7 75 a0             	divl   -0x60(%ebp)
f012675b:	8b 45 9c             	mov    -0x64(%ebp),%eax
f012675e:	29 d0                	sub    %edx,%eax
f0126760:	01 d8                	add    %ebx,%eax
f0126762:	2d 00 c0 df 09       	sub    $0x9dfc000,%eax
f0126767:	39 c1                	cmp    %eax,%ecx
f0126769:	74 17                	je     f0126782 <test_kfreeall+0x25c>
f012676b:	83 ec 04             	sub    $0x4,%esp
f012676e:	68 60 b4 13 f0       	push   $0xf013b460
f0126773:	68 02 0a 00 00       	push   $0xa02
f0126778:	68 7a b3 13 f0       	push   $0xf013b37a
f012677d:	e8 83 9a fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0126782:	e8 41 d6 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0126787:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f012678a:	74 17                	je     f01267a3 <test_kfreeall+0x27d>
f012678c:	83 ec 04             	sub    $0x4,%esp
f012678f:	68 94 b3 13 f0       	push   $0xf013b394
f0126794:	68 03 0a 00 00       	push   $0xa03
f0126799:	68 7a b3 13 f0       	push   $0xf013b37a
f012679e:	e8 62 9a fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f01267a3:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f01267a6:	e8 f2 63 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f01267ab:	29 c3                	sub    %eax,%ebx
f01267ad:	89 d8                	mov    %ebx,%eax
f01267af:	3d 00 02 00 00       	cmp    $0x200,%eax
f01267b4:	74 17                	je     f01267cd <test_kfreeall+0x2a7>
f01267b6:	83 ec 04             	sub    $0x4,%esp
f01267b9:	68 fc b3 13 f0       	push   $0xf013b3fc
f01267be:	68 04 0a 00 00       	push   $0xa04
f01267c3:	68 7a b3 13 f0       	push   $0xf013b37a
f01267c8:	e8 38 9a fd ff       	call   f0100205 <_panic>
		lastIndices[1] = (2*Mega-kilo)/sizeof(char) - 1;
f01267cd:	c7 85 6c fe ff ff ff 	movl   $0x1ffbff,-0x194(%ebp)
f01267d4:	fb 1f 00 

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f01267d7:	e8 c1 63 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f01267dc:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01267df:	e8 e4 d5 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f01267e4:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[2] = kmalloc(2*kilo);
f01267e7:	83 ec 0c             	sub    $0xc,%esp
f01267ea:	68 00 08 00 00       	push   $0x800
f01267ef:	e8 91 10 fe ff       	call   f0107885 <kmalloc>
f01267f4:	83 c4 10             	add    $0x10,%esp
f01267f7:	89 85 d0 fd ff ff    	mov    %eax,-0x230(%ebp)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01267fd:	8b 85 d0 fd ff ff    	mov    -0x230(%ebp),%eax
f0126803:	89 c1                	mov    %eax,%ecx
f0126805:	c7 45 98 00 10 00 00 	movl   $0x1000,-0x68(%ebp)
f012680c:	8b 45 98             	mov    -0x68(%ebp),%eax
f012680f:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0126814:	89 45 94             	mov    %eax,-0x6c(%ebp)
f0126817:	8b 45 94             	mov    -0x6c(%ebp),%eax
f012681a:	ba 00 00 00 00       	mov    $0x0,%edx
f012681f:	f7 75 98             	divl   -0x68(%ebp)
f0126822:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0126825:	29 d0                	sub    %edx,%eax
f0126827:	89 c3                	mov    %eax,%ebx
f0126829:	c7 45 90 00 10 00 00 	movl   $0x1000,-0x70(%ebp)
f0126830:	a0 40 26 78 f0       	mov    0xf0782640,%al
f0126835:	0f b6 d0             	movzbl %al,%edx
f0126838:	8b 45 90             	mov    -0x70(%ebp),%eax
f012683b:	01 d0                	add    %edx,%eax
f012683d:	48                   	dec    %eax
f012683e:	89 45 8c             	mov    %eax,-0x74(%ebp)
f0126841:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0126844:	ba 00 00 00 00       	mov    $0x0,%edx
f0126849:	f7 75 90             	divl   -0x70(%ebp)
f012684c:	8b 45 8c             	mov    -0x74(%ebp),%eax
f012684f:	29 d0                	sub    %edx,%eax
f0126851:	01 c3                	add    %eax,%ebx
f0126853:	c7 45 88 00 10 00 00 	movl   $0x1000,-0x78(%ebp)
f012685a:	a0 40 26 78 f0       	mov    0xf0782640,%al
f012685f:	0f b6 c0             	movzbl %al,%eax
f0126862:	c1 e0 04             	shl    $0x4,%eax
f0126865:	89 c2                	mov    %eax,%edx
f0126867:	8b 45 88             	mov    -0x78(%ebp),%eax
f012686a:	01 d0                	add    %edx,%eax
f012686c:	48                   	dec    %eax
f012686d:	89 45 84             	mov    %eax,-0x7c(%ebp)
f0126870:	8b 45 84             	mov    -0x7c(%ebp),%eax
f0126873:	ba 00 00 00 00       	mov    $0x0,%edx
f0126878:	f7 75 88             	divl   -0x78(%ebp)
f012687b:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012687e:	29 d0                	sub    %edx,%eax
f0126880:	01 d8                	add    %ebx,%eax
f0126882:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
f0126887:	39 c1                	cmp    %eax,%ecx
f0126889:	74 17                	je     f01268a2 <test_kfreeall+0x37c>
f012688b:	83 ec 04             	sub    $0x4,%esp
f012688e:	68 60 b4 13 f0       	push   $0xf013b460
f0126893:	68 0b 0a 00 00       	push   $0xa0b
f0126898:	68 7a b3 13 f0       	push   $0xf013b37a
f012689d:	e8 63 99 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01268a2:	e8 21 d5 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f01268a7:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f01268aa:	74 17                	je     f01268c3 <test_kfreeall+0x39d>
f01268ac:	83 ec 04             	sub    $0x4,%esp
f01268af:	68 94 b3 13 f0       	push   $0xf013b394
f01268b4:	68 0c 0a 00 00       	push   $0xa0c
f01268b9:	68 7a b3 13 f0       	push   $0xf013b37a
f01268be:	e8 42 99 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f01268c3:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f01268c6:	e8 d2 62 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f01268cb:	29 c3                	sub    %eax,%ebx
f01268cd:	89 d8                	mov    %ebx,%eax
f01268cf:	83 f8 01             	cmp    $0x1,%eax
f01268d2:	74 17                	je     f01268eb <test_kfreeall+0x3c5>
f01268d4:	83 ec 04             	sub    $0x4,%esp
f01268d7:	68 fc b3 13 f0       	push   $0xf013b3fc
f01268dc:	68 0d 0a 00 00       	push   $0xa0d
f01268e1:	68 7a b3 13 f0       	push   $0xf013b37a
f01268e6:	e8 1a 99 fd ff       	call   f0100205 <_panic>
		lastIndices[2] = (2*kilo)/sizeof(char) - 1;
f01268eb:	c7 85 70 fe ff ff ff 	movl   $0x7ff,-0x190(%ebp)
f01268f2:	07 00 00 
		ptr = (char*)ptr_allocations[2];
f01268f5:	8b 85 d0 fd ff ff    	mov    -0x230(%ebp),%eax
f01268fb:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[2]; ++i)
f01268fe:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0126905:	eb 0e                	jmp    f0126915 <test_kfreeall+0x3ef>
		{
			ptr[i] = 2 ;
f0126907:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012690a:	8b 45 80             	mov    -0x80(%ebp),%eax
f012690d:	01 d0                	add    %edx,%eax
f012690f:	c6 00 02             	movb   $0x2,(%eax)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[2] = (2*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[2];
		for (i = 0; i < lastIndices[2]; ++i)
f0126912:	ff 45 f4             	incl   -0xc(%ebp)
f0126915:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f012691b:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012691e:	7f e7                	jg     f0126907 <test_kfreeall+0x3e1>
		{
			ptr[i] = 2 ;
		}

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f0126920:	e8 78 62 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0126925:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0126928:	e8 9b d4 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012692d:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[3] = kmalloc(2*kilo);
f0126930:	83 ec 0c             	sub    $0xc,%esp
f0126933:	68 00 08 00 00       	push   $0x800
f0126938:	e8 48 0f fe ff       	call   f0107885 <kmalloc>
f012693d:	83 c4 10             	add    $0x10,%esp
f0126940:	89 85 d4 fd ff ff    	mov    %eax,-0x22c(%ebp)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0126946:	8b 85 d4 fd ff ff    	mov    -0x22c(%ebp),%eax
f012694c:	89 c1                	mov    %eax,%ecx
f012694e:	c7 85 7c ff ff ff 00 	movl   $0x1000,-0x84(%ebp)
f0126955:	10 00 00 
f0126958:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f012695e:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0126963:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)
f0126969:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f012696f:	ba 00 00 00 00       	mov    $0x0,%edx
f0126974:	f7 b5 7c ff ff ff    	divl   -0x84(%ebp)
f012697a:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f0126980:	29 d0                	sub    %edx,%eax
f0126982:	89 c3                	mov    %eax,%ebx
f0126984:	c7 85 74 ff ff ff 00 	movl   $0x1000,-0x8c(%ebp)
f012698b:	10 00 00 
f012698e:	a0 40 26 78 f0       	mov    0xf0782640,%al
f0126993:	0f b6 d0             	movzbl %al,%edx
f0126996:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f012699c:	01 d0                	add    %edx,%eax
f012699e:	48                   	dec    %eax
f012699f:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
f01269a5:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f01269ab:	ba 00 00 00 00       	mov    $0x0,%edx
f01269b0:	f7 b5 74 ff ff ff    	divl   -0x8c(%ebp)
f01269b6:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f01269bc:	29 d0                	sub    %edx,%eax
f01269be:	01 c3                	add    %eax,%ebx
f01269c0:	c7 85 6c ff ff ff 00 	movl   $0x1000,-0x94(%ebp)
f01269c7:	10 00 00 
f01269ca:	a0 40 26 78 f0       	mov    0xf0782640,%al
f01269cf:	0f b6 c0             	movzbl %al,%eax
f01269d2:	c1 e0 04             	shl    $0x4,%eax
f01269d5:	89 c2                	mov    %eax,%edx
f01269d7:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f01269dd:	01 d0                	add    %edx,%eax
f01269df:	48                   	dec    %eax
f01269e0:	89 85 68 ff ff ff    	mov    %eax,-0x98(%ebp)
f01269e6:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f01269ec:	ba 00 00 00 00       	mov    $0x0,%edx
f01269f1:	f7 b5 6c ff ff ff    	divl   -0x94(%ebp)
f01269f7:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f01269fd:	29 d0                	sub    %edx,%eax
f01269ff:	01 d8                	add    %ebx,%eax
f0126a01:	2d 00 b0 bf 09       	sub    $0x9bfb000,%eax
f0126a06:	39 c1                	cmp    %eax,%ecx
f0126a08:	74 17                	je     f0126a21 <test_kfreeall+0x4fb>
f0126a0a:	83 ec 04             	sub    $0x4,%esp
f0126a0d:	68 60 b4 13 f0       	push   $0xf013b460
f0126a12:	68 19 0a 00 00       	push   $0xa19
f0126a17:	68 7a b3 13 f0       	push   $0xf013b37a
f0126a1c:	e8 e4 97 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0126a21:	e8 a2 d3 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0126a26:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0126a29:	74 17                	je     f0126a42 <test_kfreeall+0x51c>
f0126a2b:	83 ec 04             	sub    $0x4,%esp
f0126a2e:	68 94 b3 13 f0       	push   $0xf013b394
f0126a33:	68 1a 0a 00 00       	push   $0xa1a
f0126a38:	68 7a b3 13 f0       	push   $0xf013b37a
f0126a3d:	e8 c3 97 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f0126a42:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0126a45:	e8 53 61 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0126a4a:	29 c3                	sub    %eax,%ebx
f0126a4c:	89 d8                	mov    %ebx,%eax
f0126a4e:	83 f8 01             	cmp    $0x1,%eax
f0126a51:	74 17                	je     f0126a6a <test_kfreeall+0x544>
f0126a53:	83 ec 04             	sub    $0x4,%esp
f0126a56:	68 fc b3 13 f0       	push   $0xf013b3fc
f0126a5b:	68 1b 0a 00 00       	push   $0xa1b
f0126a60:	68 7a b3 13 f0       	push   $0xf013b37a
f0126a65:	e8 9b 97 fd ff       	call   f0100205 <_panic>
		lastIndices[3] = (2*kilo)/sizeof(char) - 1;
f0126a6a:	c7 85 74 fe ff ff ff 	movl   $0x7ff,-0x18c(%ebp)
f0126a71:	07 00 00 
		ptr = (char*)ptr_allocations[3];
f0126a74:	8b 85 d4 fd ff ff    	mov    -0x22c(%ebp),%eax
f0126a7a:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[3]; ++i)
f0126a7d:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0126a84:	eb 0e                	jmp    f0126a94 <test_kfreeall+0x56e>
		{
			ptr[i] = 3 ;
f0126a86:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0126a89:	8b 45 80             	mov    -0x80(%ebp),%eax
f0126a8c:	01 d0                	add    %edx,%eax
f0126a8e:	c6 00 03             	movb   $0x3,(%eax)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[3] = (2*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[3];
		for (i = 0; i < lastIndices[3]; ++i)
f0126a91:	ff 45 f4             	incl   -0xc(%ebp)
f0126a94:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f0126a9a:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0126a9d:	7f e7                	jg     f0126a86 <test_kfreeall+0x560>
		{
			ptr[i] = 3 ;
		}

		//7 KB
		freeFrames = sys_calculate_free_frames() ;
f0126a9f:	e8 f9 60 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0126aa4:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0126aa7:	e8 1c d3 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0126aac:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[4] = kmalloc(7*kilo);
f0126aaf:	83 ec 0c             	sub    $0xc,%esp
f0126ab2:	68 00 1c 00 00       	push   $0x1c00
f0126ab7:	e8 c9 0d fe ff       	call   f0107885 <kmalloc>
f0126abc:	83 c4 10             	add    $0x10,%esp
f0126abf:	89 85 d8 fd ff ff    	mov    %eax,-0x228(%ebp)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0126ac5:	8b 85 d8 fd ff ff    	mov    -0x228(%ebp),%eax
f0126acb:	89 c1                	mov    %eax,%ecx
f0126acd:	c7 85 64 ff ff ff 00 	movl   $0x1000,-0x9c(%ebp)
f0126ad4:	10 00 00 
f0126ad7:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f0126add:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0126ae2:	89 85 60 ff ff ff    	mov    %eax,-0xa0(%ebp)
f0126ae8:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f0126aee:	ba 00 00 00 00       	mov    $0x0,%edx
f0126af3:	f7 b5 64 ff ff ff    	divl   -0x9c(%ebp)
f0126af9:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f0126aff:	29 d0                	sub    %edx,%eax
f0126b01:	89 c3                	mov    %eax,%ebx
f0126b03:	c7 85 5c ff ff ff 00 	movl   $0x1000,-0xa4(%ebp)
f0126b0a:	10 00 00 
f0126b0d:	a0 40 26 78 f0       	mov    0xf0782640,%al
f0126b12:	0f b6 d0             	movzbl %al,%edx
f0126b15:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f0126b1b:	01 d0                	add    %edx,%eax
f0126b1d:	48                   	dec    %eax
f0126b1e:	89 85 58 ff ff ff    	mov    %eax,-0xa8(%ebp)
f0126b24:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f0126b2a:	ba 00 00 00 00       	mov    $0x0,%edx
f0126b2f:	f7 b5 5c ff ff ff    	divl   -0xa4(%ebp)
f0126b35:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f0126b3b:	29 d0                	sub    %edx,%eax
f0126b3d:	01 c3                	add    %eax,%ebx
f0126b3f:	c7 85 54 ff ff ff 00 	movl   $0x1000,-0xac(%ebp)
f0126b46:	10 00 00 
f0126b49:	a0 40 26 78 f0       	mov    0xf0782640,%al
f0126b4e:	0f b6 c0             	movzbl %al,%eax
f0126b51:	c1 e0 04             	shl    $0x4,%eax
f0126b54:	89 c2                	mov    %eax,%edx
f0126b56:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f0126b5c:	01 d0                	add    %edx,%eax
f0126b5e:	48                   	dec    %eax
f0126b5f:	89 85 50 ff ff ff    	mov    %eax,-0xb0(%ebp)
f0126b65:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f0126b6b:	ba 00 00 00 00       	mov    $0x0,%edx
f0126b70:	f7 b5 54 ff ff ff    	divl   -0xac(%ebp)
f0126b76:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f0126b7c:	29 d0                	sub    %edx,%eax
f0126b7e:	01 d8                	add    %ebx,%eax
f0126b80:	2d 00 a0 bf 09       	sub    $0x9bfa000,%eax
f0126b85:	39 c1                	cmp    %eax,%ecx
f0126b87:	74 17                	je     f0126ba0 <test_kfreeall+0x67a>
f0126b89:	83 ec 04             	sub    $0x4,%esp
f0126b8c:	68 60 b4 13 f0       	push   $0xf013b460
f0126b91:	68 27 0a 00 00       	push   $0xa27
f0126b96:	68 7a b3 13 f0       	push   $0xf013b37a
f0126b9b:	e8 65 96 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0126ba0:	e8 23 d2 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0126ba5:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0126ba8:	74 17                	je     f0126bc1 <test_kfreeall+0x69b>
f0126baa:	83 ec 04             	sub    $0x4,%esp
f0126bad:	68 94 b3 13 f0       	push   $0xf013b394
f0126bb2:	68 28 0a 00 00       	push   $0xa28
f0126bb7:	68 7a b3 13 f0       	push   $0xf013b37a
f0126bbc:	e8 44 96 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: pages are not loaded successfully into memory");
f0126bc1:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0126bc4:	e8 d4 5f fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0126bc9:	29 c3                	sub    %eax,%ebx
f0126bcb:	89 d8                	mov    %ebx,%eax
f0126bcd:	83 f8 02             	cmp    $0x2,%eax
f0126bd0:	74 17                	je     f0126be9 <test_kfreeall+0x6c3>
f0126bd2:	83 ec 04             	sub    $0x4,%esp
f0126bd5:	68 fc b3 13 f0       	push   $0xf013b3fc
f0126bda:	68 29 0a 00 00       	push   $0xa29
f0126bdf:	68 7a b3 13 f0       	push   $0xf013b37a
f0126be4:	e8 1c 96 fd ff       	call   f0100205 <_panic>
		lastIndices[4] = (7*kilo)/sizeof(char) - 1;
f0126be9:	c7 85 78 fe ff ff ff 	movl   $0x1bff,-0x188(%ebp)
f0126bf0:	1b 00 00 
		ptr = (char*)ptr_allocations[4];
f0126bf3:	8b 85 d8 fd ff ff    	mov    -0x228(%ebp),%eax
f0126bf9:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[4]; ++i)
f0126bfc:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0126c03:	eb 0e                	jmp    f0126c13 <test_kfreeall+0x6ed>
		{
			ptr[i] = 4 ;
f0126c05:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0126c08:	8b 45 80             	mov    -0x80(%ebp),%eax
f0126c0b:	01 d0                	add    %edx,%eax
f0126c0d:	c6 00 04             	movb   $0x4,(%eax)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[4] = (7*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[4];
		for (i = 0; i < lastIndices[4]; ++i)
f0126c10:	ff 45 f4             	incl   -0xc(%ebp)
f0126c13:	8b 85 78 fe ff ff    	mov    -0x188(%ebp),%eax
f0126c19:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0126c1c:	7f e7                	jg     f0126c05 <test_kfreeall+0x6df>
		{
			ptr[i] = 4 ;
		}

		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f0126c1e:	e8 7a 5f fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0126c23:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0126c26:	e8 9d d1 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0126c2b:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[5] = kmalloc(3*Mega-kilo);
f0126c2e:	83 ec 0c             	sub    $0xc,%esp
f0126c31:	68 00 fc 2f 00       	push   $0x2ffc00
f0126c36:	e8 4a 0c fe ff       	call   f0107885 <kmalloc>
f0126c3b:	83 c4 10             	add    $0x10,%esp
f0126c3e:	89 85 dc fd ff ff    	mov    %eax,-0x224(%ebp)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo) ) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0126c44:	8b 85 dc fd ff ff    	mov    -0x224(%ebp),%eax
f0126c4a:	89 c1                	mov    %eax,%ecx
f0126c4c:	c7 85 4c ff ff ff 00 	movl   $0x1000,-0xb4(%ebp)
f0126c53:	10 00 00 
f0126c56:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0126c5c:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0126c61:	89 85 48 ff ff ff    	mov    %eax,-0xb8(%ebp)
f0126c67:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f0126c6d:	ba 00 00 00 00       	mov    $0x0,%edx
f0126c72:	f7 b5 4c ff ff ff    	divl   -0xb4(%ebp)
f0126c78:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f0126c7e:	29 d0                	sub    %edx,%eax
f0126c80:	89 c3                	mov    %eax,%ebx
f0126c82:	c7 85 44 ff ff ff 00 	movl   $0x1000,-0xbc(%ebp)
f0126c89:	10 00 00 
f0126c8c:	a0 40 26 78 f0       	mov    0xf0782640,%al
f0126c91:	0f b6 d0             	movzbl %al,%edx
f0126c94:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0126c9a:	01 d0                	add    %edx,%eax
f0126c9c:	48                   	dec    %eax
f0126c9d:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%ebp)
f0126ca3:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0126ca9:	ba 00 00 00 00       	mov    $0x0,%edx
f0126cae:	f7 b5 44 ff ff ff    	divl   -0xbc(%ebp)
f0126cb4:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0126cba:	29 d0                	sub    %edx,%eax
f0126cbc:	01 c3                	add    %eax,%ebx
f0126cbe:	c7 85 3c ff ff ff 00 	movl   $0x1000,-0xc4(%ebp)
f0126cc5:	10 00 00 
f0126cc8:	a0 40 26 78 f0       	mov    0xf0782640,%al
f0126ccd:	0f b6 c0             	movzbl %al,%eax
f0126cd0:	c1 e0 04             	shl    $0x4,%eax
f0126cd3:	89 c2                	mov    %eax,%edx
f0126cd5:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f0126cdb:	01 d0                	add    %edx,%eax
f0126cdd:	48                   	dec    %eax
f0126cde:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
f0126ce4:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f0126cea:	ba 00 00 00 00       	mov    $0x0,%edx
f0126cef:	f7 b5 3c ff ff ff    	divl   -0xc4(%ebp)
f0126cf5:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f0126cfb:	29 d0                	sub    %edx,%eax
f0126cfd:	01 d8                	add    %ebx,%eax
f0126cff:	2d 00 80 bf 09       	sub    $0x9bf8000,%eax
f0126d04:	39 c1                	cmp    %eax,%ecx
f0126d06:	74 17                	je     f0126d1f <test_kfreeall+0x7f9>
f0126d08:	83 ec 04             	sub    $0x4,%esp
f0126d0b:	68 60 b4 13 f0       	push   $0xf013b460
f0126d10:	68 35 0a 00 00       	push   $0xa35
f0126d15:	68 7a b3 13 f0       	push   $0xf013b37a
f0126d1a:	e8 e6 94 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0126d1f:	e8 a4 d0 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0126d24:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0126d27:	74 17                	je     f0126d40 <test_kfreeall+0x81a>
f0126d29:	83 ec 04             	sub    $0x4,%esp
f0126d2c:	68 94 b3 13 f0       	push   $0xf013b394
f0126d31:	68 36 0a 00 00       	push   $0xa36
f0126d36:	68 7a b3 13 f0       	push   $0xf013b37a
f0126d3b:	e8 c5 94 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
f0126d40:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0126d43:	e8 55 5e fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0126d48:	29 c3                	sub    %eax,%ebx
f0126d4a:	89 d8                	mov    %ebx,%eax
f0126d4c:	3d 00 03 00 00       	cmp    $0x300,%eax
f0126d51:	74 17                	je     f0126d6a <test_kfreeall+0x844>
f0126d53:	83 ec 04             	sub    $0x4,%esp
f0126d56:	68 fc b3 13 f0       	push   $0xf013b3fc
f0126d5b:	68 37 0a 00 00       	push   $0xa37
f0126d60:	68 7a b3 13 f0       	push   $0xf013b37a
f0126d65:	e8 9b 94 fd ff       	call   f0100205 <_panic>
		lastIndices[5] = (3*Mega-kilo)/sizeof(char) - 1;
f0126d6a:	c7 85 7c fe ff ff ff 	movl   $0x2ffbff,-0x184(%ebp)
f0126d71:	fb 2f 00 
		ptr = (char*)ptr_allocations[5];
f0126d74:	8b 85 dc fd ff ff    	mov    -0x224(%ebp),%eax
f0126d7a:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[5]; ++i)
f0126d7d:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0126d84:	eb 0e                	jmp    f0126d94 <test_kfreeall+0x86e>
		{
			ptr[i] = 5 ;
f0126d86:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0126d89:	8b 45 80             	mov    -0x80(%ebp),%eax
f0126d8c:	01 d0                	add    %edx,%eax
f0126d8e:	c6 00 05             	movb   $0x5,(%eax)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo) ) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[5] = (3*Mega-kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[5];
		for (i = 0; i < lastIndices[5]; ++i)
f0126d91:	ff 45 f4             	incl   -0xc(%ebp)
f0126d94:	8b 85 7c fe ff ff    	mov    -0x184(%ebp),%eax
f0126d9a:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0126d9d:	7f e7                	jg     f0126d86 <test_kfreeall+0x860>
		{
			ptr[i] = 5 ;
		}

		//6 MB
		freeFrames = sys_calculate_free_frames() ;
f0126d9f:	e8 f9 5d fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0126da4:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0126da7:	e8 1c d0 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0126dac:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[6] = kmalloc(6*Mega-kilo);
f0126daf:	83 ec 0c             	sub    $0xc,%esp
f0126db2:	68 00 fc 5f 00       	push   $0x5ffc00
f0126db7:	e8 c9 0a fe ff       	call   f0107885 <kmalloc>
f0126dbc:	83 c4 10             	add    $0x10,%esp
f0126dbf:	89 85 e0 fd ff ff    	mov    %eax,-0x220(%ebp)
		if ((uint32) ptr_allocations[6] != (ACTUAL_START + 7*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0126dc5:	8b 85 e0 fd ff ff    	mov    -0x220(%ebp),%eax
f0126dcb:	89 c1                	mov    %eax,%ecx
f0126dcd:	c7 85 34 ff ff ff 00 	movl   $0x1000,-0xcc(%ebp)
f0126dd4:	10 00 00 
f0126dd7:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f0126ddd:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0126de2:	89 85 30 ff ff ff    	mov    %eax,-0xd0(%ebp)
f0126de8:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f0126dee:	ba 00 00 00 00       	mov    $0x0,%edx
f0126df3:	f7 b5 34 ff ff ff    	divl   -0xcc(%ebp)
f0126df9:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f0126dff:	29 d0                	sub    %edx,%eax
f0126e01:	89 c3                	mov    %eax,%ebx
f0126e03:	c7 85 2c ff ff ff 00 	movl   $0x1000,-0xd4(%ebp)
f0126e0a:	10 00 00 
f0126e0d:	a0 40 26 78 f0       	mov    0xf0782640,%al
f0126e12:	0f b6 d0             	movzbl %al,%edx
f0126e15:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f0126e1b:	01 d0                	add    %edx,%eax
f0126e1d:	48                   	dec    %eax
f0126e1e:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%ebp)
f0126e24:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f0126e2a:	ba 00 00 00 00       	mov    $0x0,%edx
f0126e2f:	f7 b5 2c ff ff ff    	divl   -0xd4(%ebp)
f0126e35:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f0126e3b:	29 d0                	sub    %edx,%eax
f0126e3d:	01 c3                	add    %eax,%ebx
f0126e3f:	c7 85 24 ff ff ff 00 	movl   $0x1000,-0xdc(%ebp)
f0126e46:	10 00 00 
f0126e49:	a0 40 26 78 f0       	mov    0xf0782640,%al
f0126e4e:	0f b6 c0             	movzbl %al,%eax
f0126e51:	c1 e0 04             	shl    $0x4,%eax
f0126e54:	89 c2                	mov    %eax,%edx
f0126e56:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0126e5c:	01 d0                	add    %edx,%eax
f0126e5e:	48                   	dec    %eax
f0126e5f:	89 85 20 ff ff ff    	mov    %eax,-0xe0(%ebp)
f0126e65:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0126e6b:	ba 00 00 00 00       	mov    $0x0,%edx
f0126e70:	f7 b5 24 ff ff ff    	divl   -0xdc(%ebp)
f0126e76:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0126e7c:	29 d0                	sub    %edx,%eax
f0126e7e:	01 d8                	add    %ebx,%eax
f0126e80:	2d 00 80 8f 09       	sub    $0x98f8000,%eax
f0126e85:	39 c1                	cmp    %eax,%ecx
f0126e87:	74 17                	je     f0126ea0 <test_kfreeall+0x97a>
f0126e89:	83 ec 04             	sub    $0x4,%esp
f0126e8c:	68 60 b4 13 f0       	push   $0xf013b460
f0126e91:	68 43 0a 00 00       	push   $0xa43
f0126e96:	68 7a b3 13 f0       	push   $0xf013b37a
f0126e9b:	e8 65 93 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0126ea0:	e8 23 cf fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0126ea5:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0126ea8:	74 17                	je     f0126ec1 <test_kfreeall+0x99b>
f0126eaa:	83 ec 04             	sub    $0x4,%esp
f0126ead:	68 94 b3 13 f0       	push   $0xf013b394
f0126eb2:	68 44 0a 00 00       	push   $0xa44
f0126eb7:	68 7a b3 13 f0       	push   $0xf013b37a
f0126ebc:	e8 44 93 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1536) panic("Wrong allocation: pages are not loaded successfully into memory");
f0126ec1:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0126ec4:	e8 d4 5c fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0126ec9:	29 c3                	sub    %eax,%ebx
f0126ecb:	89 d8                	mov    %ebx,%eax
f0126ecd:	3d 00 06 00 00       	cmp    $0x600,%eax
f0126ed2:	74 17                	je     f0126eeb <test_kfreeall+0x9c5>
f0126ed4:	83 ec 04             	sub    $0x4,%esp
f0126ed7:	68 fc b3 13 f0       	push   $0xf013b3fc
f0126edc:	68 45 0a 00 00       	push   $0xa45
f0126ee1:	68 7a b3 13 f0       	push   $0xf013b37a
f0126ee6:	e8 1a 93 fd ff       	call   f0100205 <_panic>
		lastIndices[6] = (6*Mega-kilo)/sizeof(char) - 1;
f0126eeb:	c7 85 80 fe ff ff ff 	movl   $0x5ffbff,-0x180(%ebp)
f0126ef2:	fb 5f 00 

		//14 KB
		freeFrames = sys_calculate_free_frames() ;
f0126ef5:	e8 a3 5c fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0126efa:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0126efd:	e8 c6 ce fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0126f02:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[7] = kmalloc(14*kilo);
f0126f05:	83 ec 0c             	sub    $0xc,%esp
f0126f08:	68 00 38 00 00       	push   $0x3800
f0126f0d:	e8 73 09 fe ff       	call   f0107885 <kmalloc>
f0126f12:	83 c4 10             	add    $0x10,%esp
f0126f15:	89 85 e4 fd ff ff    	mov    %eax,-0x21c(%ebp)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 13*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0126f1b:	8b 85 e4 fd ff ff    	mov    -0x21c(%ebp),%eax
f0126f21:	89 c1                	mov    %eax,%ecx
f0126f23:	c7 85 1c ff ff ff 00 	movl   $0x1000,-0xe4(%ebp)
f0126f2a:	10 00 00 
f0126f2d:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f0126f33:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0126f38:	89 85 18 ff ff ff    	mov    %eax,-0xe8(%ebp)
f0126f3e:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f0126f44:	ba 00 00 00 00       	mov    $0x0,%edx
f0126f49:	f7 b5 1c ff ff ff    	divl   -0xe4(%ebp)
f0126f4f:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f0126f55:	29 d0                	sub    %edx,%eax
f0126f57:	89 c3                	mov    %eax,%ebx
f0126f59:	c7 85 14 ff ff ff 00 	movl   $0x1000,-0xec(%ebp)
f0126f60:	10 00 00 
f0126f63:	a0 40 26 78 f0       	mov    0xf0782640,%al
f0126f68:	0f b6 d0             	movzbl %al,%edx
f0126f6b:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f0126f71:	01 d0                	add    %edx,%eax
f0126f73:	48                   	dec    %eax
f0126f74:	89 85 10 ff ff ff    	mov    %eax,-0xf0(%ebp)
f0126f7a:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f0126f80:	ba 00 00 00 00       	mov    $0x0,%edx
f0126f85:	f7 b5 14 ff ff ff    	divl   -0xec(%ebp)
f0126f8b:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f0126f91:	29 d0                	sub    %edx,%eax
f0126f93:	01 c3                	add    %eax,%ebx
f0126f95:	c7 85 0c ff ff ff 00 	movl   $0x1000,-0xf4(%ebp)
f0126f9c:	10 00 00 
f0126f9f:	a0 40 26 78 f0       	mov    0xf0782640,%al
f0126fa4:	0f b6 c0             	movzbl %al,%eax
f0126fa7:	c1 e0 04             	shl    $0x4,%eax
f0126faa:	89 c2                	mov    %eax,%edx
f0126fac:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f0126fb2:	01 d0                	add    %edx,%eax
f0126fb4:	48                   	dec    %eax
f0126fb5:	89 85 08 ff ff ff    	mov    %eax,-0xf8(%ebp)
f0126fbb:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f0126fc1:	ba 00 00 00 00       	mov    $0x0,%edx
f0126fc6:	f7 b5 0c ff ff ff    	divl   -0xf4(%ebp)
f0126fcc:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f0126fd2:	29 d0                	sub    %edx,%eax
f0126fd4:	01 d8                	add    %ebx,%eax
f0126fd6:	2d 00 80 2f 09       	sub    $0x92f8000,%eax
f0126fdb:	39 c1                	cmp    %eax,%ecx
f0126fdd:	74 17                	je     f0126ff6 <test_kfreeall+0xad0>
f0126fdf:	83 ec 04             	sub    $0x4,%esp
f0126fe2:	68 60 b4 13 f0       	push   $0xf013b460
f0126fe7:	68 4c 0a 00 00       	push   $0xa4c
f0126fec:	68 7a b3 13 f0       	push   $0xf013b37a
f0126ff1:	e8 0f 92 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0126ff6:	e8 cd cd fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0126ffb:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0126ffe:	74 17                	je     f0127017 <test_kfreeall+0xaf1>
f0127000:	83 ec 04             	sub    $0x4,%esp
f0127003:	68 94 b3 13 f0       	push   $0xf013b394
f0127008:	68 4d 0a 00 00       	push   $0xa4d
f012700d:	68 7a b3 13 f0       	push   $0xf013b37a
f0127012:	e8 ee 91 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 4) panic("Wrong allocation: pages are not loaded successfully into memory");
f0127017:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f012701a:	e8 7e 5b fe ff       	call   f010cb9d <sys_calculate_free_frames>
f012701f:	29 c3                	sub    %eax,%ebx
f0127021:	89 d8                	mov    %ebx,%eax
f0127023:	83 f8 04             	cmp    $0x4,%eax
f0127026:	74 17                	je     f012703f <test_kfreeall+0xb19>
f0127028:	83 ec 04             	sub    $0x4,%esp
f012702b:	68 fc b3 13 f0       	push   $0xf013b3fc
f0127030:	68 4e 0a 00 00       	push   $0xa4e
f0127035:	68 7a b3 13 f0       	push   $0xf013b37a
f012703a:	e8 c6 91 fd ff       	call   f0100205 <_panic>
		lastIndices[7] = (14*kilo)/sizeof(char) - 1;
f012703f:	c7 85 84 fe ff ff ff 	movl   $0x37ff,-0x17c(%ebp)
f0127046:	37 00 00 
		ptr = (char*)ptr_allocations[7];
f0127049:	8b 85 e4 fd ff ff    	mov    -0x21c(%ebp),%eax
f012704f:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[7]; ++i)
f0127052:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0127059:	eb 0e                	jmp    f0127069 <test_kfreeall+0xb43>
		{
			ptr[i] = 7 ;
f012705b:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012705e:	8b 45 80             	mov    -0x80(%ebp),%eax
f0127061:	01 d0                	add    %edx,%eax
f0127063:	c6 00 07             	movb   $0x7,(%eax)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 13*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 4) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[7] = (14*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[7];
		for (i = 0; i < lastIndices[7]; ++i)
f0127066:	ff 45 f4             	incl   -0xc(%ebp)
f0127069:	8b 85 84 fe ff ff    	mov    -0x17c(%ebp),%eax
f012706f:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0127072:	7f e7                	jg     f012705b <test_kfreeall+0xb35>
	}

	//kfree some of the allocated spaces
	{
		//kfree 1st 2 MB
		int freeFrames = sys_calculate_free_frames() ;
f0127074:	e8 24 5b fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0127079:	89 85 04 ff ff ff    	mov    %eax,-0xfc(%ebp)
		int freeDiskFrames = pf_calculate_free_frames() ;
f012707f:	e8 44 cd fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0127084:	89 85 00 ff ff ff    	mov    %eax,-0x100(%ebp)
		kfree(ptr_allocations[0]);
f012708a:	8b 85 c8 fd ff ff    	mov    -0x238(%ebp),%eax
f0127090:	83 ec 0c             	sub    $0xc,%esp
f0127093:	50                   	push   %eax
f0127094:	e8 b7 08 fe ff       	call   f0107950 <kfree>
f0127099:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012709c:	e8 27 cd fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f01270a1:	3b 85 00 ff ff ff    	cmp    -0x100(%ebp),%eax
f01270a7:	74 17                	je     f01270c0 <test_kfreeall+0xb9a>
f01270a9:	83 ec 04             	sub    $0x4,%esp
f01270ac:	68 94 b3 13 f0       	push   $0xf013b394
f01270b1:	68 5d 0a 00 00       	push   $0xa5d
f01270b6:	68 7a b3 13 f0       	push   $0xf013b37a
f01270bb:	e8 45 91 fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512 ) panic("Wrong kfree: pages in memory are not freed correctly");
f01270c0:	e8 d8 5a fe ff       	call   f010cb9d <sys_calculate_free_frames>
f01270c5:	89 c2                	mov    %eax,%edx
f01270c7:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f01270cd:	29 c2                	sub    %eax,%edx
f01270cf:	89 d0                	mov    %edx,%eax
f01270d1:	3d 00 02 00 00       	cmp    $0x200,%eax
f01270d6:	74 17                	je     f01270ef <test_kfreeall+0xbc9>
f01270d8:	83 ec 04             	sub    $0x4,%esp
f01270db:	68 04 bb 13 f0       	push   $0xf013bb04
f01270e0:	68 5e 0a 00 00       	push   $0xa5e
f01270e5:	68 7a b3 13 f0       	push   $0xf013b37a
f01270ea:	e8 16 91 fd ff       	call   f0100205 <_panic>

		//kfree 2nd 2 MB
		freeFrames = sys_calculate_free_frames() ;
f01270ef:	e8 a9 5a fe ff       	call   f010cb9d <sys_calculate_free_frames>
f01270f4:	89 85 04 ff ff ff    	mov    %eax,-0xfc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01270fa:	e8 c9 cc fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f01270ff:	89 85 00 ff ff ff    	mov    %eax,-0x100(%ebp)
		kfree(ptr_allocations[1]);
f0127105:	8b 85 cc fd ff ff    	mov    -0x234(%ebp),%eax
f012710b:	83 ec 0c             	sub    $0xc,%esp
f012710e:	50                   	push   %eax
f012710f:	e8 3c 08 fe ff       	call   f0107950 <kfree>
f0127114:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0127117:	e8 ac cc fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012711c:	3b 85 00 ff ff ff    	cmp    -0x100(%ebp),%eax
f0127122:	74 17                	je     f012713b <test_kfreeall+0xc15>
f0127124:	83 ec 04             	sub    $0x4,%esp
f0127127:	68 94 b3 13 f0       	push   $0xf013b394
f012712c:	68 64 0a 00 00       	push   $0xa64
f0127131:	68 7a b3 13 f0       	push   $0xf013b37a
f0127136:	e8 ca 90 fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512) panic("Wrong kfree: pages in memory are not freed correctly");
f012713b:	e8 5d 5a fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0127140:	89 c2                	mov    %eax,%edx
f0127142:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f0127148:	29 c2                	sub    %eax,%edx
f012714a:	89 d0                	mov    %edx,%eax
f012714c:	3d 00 02 00 00       	cmp    $0x200,%eax
f0127151:	74 17                	je     f012716a <test_kfreeall+0xc44>
f0127153:	83 ec 04             	sub    $0x4,%esp
f0127156:	68 04 bb 13 f0       	push   $0xf013bb04
f012715b:	68 65 0a 00 00       	push   $0xa65
f0127160:	68 7a b3 13 f0       	push   $0xf013b37a
f0127165:	e8 9b 90 fd ff       	call   f0100205 <_panic>

		//kfree 6 MB
		freeFrames = sys_calculate_free_frames() ;
f012716a:	e8 2e 5a fe ff       	call   f010cb9d <sys_calculate_free_frames>
f012716f:	89 85 04 ff ff ff    	mov    %eax,-0xfc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0127175:	e8 4e cc fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012717a:	89 85 00 ff ff ff    	mov    %eax,-0x100(%ebp)
		kfree(ptr_allocations[6]);
f0127180:	8b 85 e0 fd ff ff    	mov    -0x220(%ebp),%eax
f0127186:	83 ec 0c             	sub    $0xc,%esp
f0127189:	50                   	push   %eax
f012718a:	e8 c1 07 fe ff       	call   f0107950 <kfree>
f012718f:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0127192:	e8 31 cc fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0127197:	3b 85 00 ff ff ff    	cmp    -0x100(%ebp),%eax
f012719d:	74 17                	je     f01271b6 <test_kfreeall+0xc90>
f012719f:	83 ec 04             	sub    $0x4,%esp
f01271a2:	68 94 b3 13 f0       	push   $0xf013b394
f01271a7:	68 6b 0a 00 00       	push   $0xa6b
f01271ac:	68 7a b3 13 f0       	push   $0xf013b37a
f01271b1:	e8 4f 90 fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 6*Mega/4096) panic("Wrong kfree: pages in memory are not freed correctly");
f01271b6:	e8 e2 59 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f01271bb:	89 c2                	mov    %eax,%edx
f01271bd:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f01271c3:	29 c2                	sub    %eax,%edx
f01271c5:	89 d0                	mov    %edx,%eax
f01271c7:	3d 00 06 00 00       	cmp    $0x600,%eax
f01271cc:	74 17                	je     f01271e5 <test_kfreeall+0xcbf>
f01271ce:	83 ec 04             	sub    $0x4,%esp
f01271d1:	68 04 bb 13 f0       	push   $0xf013bb04
f01271d6:	68 6c 0a 00 00       	push   $0xa6c
f01271db:	68 7a b3 13 f0       	push   $0xf013b37a
f01271e0:	e8 20 90 fd ff       	call   f0100205 <_panic>


	//Check memory access after kfree
	{
		//2 KB
		ptr = (char*)ptr_allocations[2];
f01271e5:	8b 85 d0 fd ff ff    	mov    -0x230(%ebp),%eax
f01271eb:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[2]; ++i)
f01271ee:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01271f5:	eb 1e                	jmp    f0127215 <test_kfreeall+0xcef>
		{
			sums[2] += ptr[i] ;
f01271f7:	8b 95 20 fe ff ff    	mov    -0x1e0(%ebp),%edx
f01271fd:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0127200:	8b 45 80             	mov    -0x80(%ebp),%eax
f0127203:	01 c8                	add    %ecx,%eax
f0127205:	8a 00                	mov    (%eax),%al
f0127207:	0f be c0             	movsbl %al,%eax
f012720a:	01 d0                	add    %edx,%eax
f012720c:	89 85 20 fe ff ff    	mov    %eax,-0x1e0(%ebp)

	//Check memory access after kfree
	{
		//2 KB
		ptr = (char*)ptr_allocations[2];
		for (i = 0; i < lastIndices[2]; ++i)
f0127212:	ff 45 f4             	incl   -0xc(%ebp)
f0127215:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f012721b:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012721e:	7f d7                	jg     f01271f7 <test_kfreeall+0xcd1>
		{
			sums[2] += ptr[i] ;
		}
		if (sums[2] != 2*lastIndices[2])	panic("kfree: invalid read after freeing some allocations");
f0127220:	8b 95 20 fe ff ff    	mov    -0x1e0(%ebp),%edx
f0127226:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f012722c:	01 c0                	add    %eax,%eax
f012722e:	39 c2                	cmp    %eax,%edx
f0127230:	74 17                	je     f0127249 <test_kfreeall+0xd23>
f0127232:	83 ec 04             	sub    $0x4,%esp
f0127235:	68 60 bb 13 f0       	push   $0xf013bb60
f012723a:	68 78 0a 00 00       	push   $0xa78
f012723f:	68 7a b3 13 f0       	push   $0xf013b37a
f0127244:	e8 bc 8f fd ff       	call   f0100205 <_panic>

		//2 KB
		ptr = (char*)ptr_allocations[3];
f0127249:	8b 85 d4 fd ff ff    	mov    -0x22c(%ebp),%eax
f012724f:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[3]; ++i)
f0127252:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0127259:	eb 1e                	jmp    f0127279 <test_kfreeall+0xd53>
		{
			sums[3] += ptr[i] ;
f012725b:	8b 95 24 fe ff ff    	mov    -0x1dc(%ebp),%edx
f0127261:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0127264:	8b 45 80             	mov    -0x80(%ebp),%eax
f0127267:	01 c8                	add    %ecx,%eax
f0127269:	8a 00                	mov    (%eax),%al
f012726b:	0f be c0             	movsbl %al,%eax
f012726e:	01 d0                	add    %edx,%eax
f0127270:	89 85 24 fe ff ff    	mov    %eax,-0x1dc(%ebp)
		}
		if (sums[2] != 2*lastIndices[2])	panic("kfree: invalid read after freeing some allocations");

		//2 KB
		ptr = (char*)ptr_allocations[3];
		for (i = 0; i < lastIndices[3]; ++i)
f0127276:	ff 45 f4             	incl   -0xc(%ebp)
f0127279:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f012727f:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0127282:	7f d7                	jg     f012725b <test_kfreeall+0xd35>
		{
			sums[3] += ptr[i] ;
		}
		if (sums[3] != 3*lastIndices[3])	panic("kfree: invalid read after freeing some allocations");
f0127284:	8b 95 24 fe ff ff    	mov    -0x1dc(%ebp),%edx
f012728a:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f0127290:	89 c1                	mov    %eax,%ecx
f0127292:	01 c9                	add    %ecx,%ecx
f0127294:	01 c8                	add    %ecx,%eax
f0127296:	39 c2                	cmp    %eax,%edx
f0127298:	74 17                	je     f01272b1 <test_kfreeall+0xd8b>
f012729a:	83 ec 04             	sub    $0x4,%esp
f012729d:	68 60 bb 13 f0       	push   $0xf013bb60
f01272a2:	68 80 0a 00 00       	push   $0xa80
f01272a7:	68 7a b3 13 f0       	push   $0xf013b37a
f01272ac:	e8 54 8f fd ff       	call   f0100205 <_panic>

		//7 KB
		ptr = (char*)ptr_allocations[4];
f01272b1:	8b 85 d8 fd ff ff    	mov    -0x228(%ebp),%eax
f01272b7:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[4]; ++i)
f01272ba:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01272c1:	eb 1e                	jmp    f01272e1 <test_kfreeall+0xdbb>
		{
			sums[4] += ptr[i] ;
f01272c3:	8b 95 28 fe ff ff    	mov    -0x1d8(%ebp),%edx
f01272c9:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f01272cc:	8b 45 80             	mov    -0x80(%ebp),%eax
f01272cf:	01 c8                	add    %ecx,%eax
f01272d1:	8a 00                	mov    (%eax),%al
f01272d3:	0f be c0             	movsbl %al,%eax
f01272d6:	01 d0                	add    %edx,%eax
f01272d8:	89 85 28 fe ff ff    	mov    %eax,-0x1d8(%ebp)
		}
		if (sums[3] != 3*lastIndices[3])	panic("kfree: invalid read after freeing some allocations");

		//7 KB
		ptr = (char*)ptr_allocations[4];
		for (i = 0; i < lastIndices[4]; ++i)
f01272de:	ff 45 f4             	incl   -0xc(%ebp)
f01272e1:	8b 85 78 fe ff ff    	mov    -0x188(%ebp),%eax
f01272e7:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01272ea:	7f d7                	jg     f01272c3 <test_kfreeall+0xd9d>
		{
			sums[4] += ptr[i] ;
		}
		if (sums[4] != 4*lastIndices[4])	panic("kfree: invalid read after freeing some allocations");
f01272ec:	8b 85 28 fe ff ff    	mov    -0x1d8(%ebp),%eax
f01272f2:	8b 95 78 fe ff ff    	mov    -0x188(%ebp),%edx
f01272f8:	c1 e2 02             	shl    $0x2,%edx
f01272fb:	39 d0                	cmp    %edx,%eax
f01272fd:	74 17                	je     f0127316 <test_kfreeall+0xdf0>
f01272ff:	83 ec 04             	sub    $0x4,%esp
f0127302:	68 60 bb 13 f0       	push   $0xf013bb60
f0127307:	68 88 0a 00 00       	push   $0xa88
f012730c:	68 7a b3 13 f0       	push   $0xf013b37a
f0127311:	e8 ef 8e fd ff       	call   f0100205 <_panic>

		//3 MB
		ptr = (char*)ptr_allocations[5];
f0127316:	8b 85 dc fd ff ff    	mov    -0x224(%ebp),%eax
f012731c:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[5]; ++i)
f012731f:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0127326:	eb 1e                	jmp    f0127346 <test_kfreeall+0xe20>
		{
			sums[5] += ptr[i] ;
f0127328:	8b 95 2c fe ff ff    	mov    -0x1d4(%ebp),%edx
f012732e:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0127331:	8b 45 80             	mov    -0x80(%ebp),%eax
f0127334:	01 c8                	add    %ecx,%eax
f0127336:	8a 00                	mov    (%eax),%al
f0127338:	0f be c0             	movsbl %al,%eax
f012733b:	01 d0                	add    %edx,%eax
f012733d:	89 85 2c fe ff ff    	mov    %eax,-0x1d4(%ebp)
		}
		if (sums[4] != 4*lastIndices[4])	panic("kfree: invalid read after freeing some allocations");

		//3 MB
		ptr = (char*)ptr_allocations[5];
		for (i = 0; i < lastIndices[5]; ++i)
f0127343:	ff 45 f4             	incl   -0xc(%ebp)
f0127346:	8b 85 7c fe ff ff    	mov    -0x184(%ebp),%eax
f012734c:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012734f:	7f d7                	jg     f0127328 <test_kfreeall+0xe02>
		{
			sums[5] += ptr[i] ;
		}
		if (sums[5] != 5*lastIndices[5])	panic("kfree: invalid read after freeing some allocations");
f0127351:	8b 8d 2c fe ff ff    	mov    -0x1d4(%ebp),%ecx
f0127357:	8b 95 7c fe ff ff    	mov    -0x184(%ebp),%edx
f012735d:	89 d0                	mov    %edx,%eax
f012735f:	c1 e0 02             	shl    $0x2,%eax
f0127362:	01 d0                	add    %edx,%eax
f0127364:	39 c1                	cmp    %eax,%ecx
f0127366:	74 17                	je     f012737f <test_kfreeall+0xe59>
f0127368:	83 ec 04             	sub    $0x4,%esp
f012736b:	68 60 bb 13 f0       	push   $0xf013bb60
f0127370:	68 90 0a 00 00       	push   $0xa90
f0127375:	68 7a b3 13 f0       	push   $0xf013b37a
f012737a:	e8 86 8e fd ff       	call   f0100205 <_panic>

		//14 KB
		ptr = (char*)ptr_allocations[7];
f012737f:	8b 85 e4 fd ff ff    	mov    -0x21c(%ebp),%eax
f0127385:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[7]; ++i)
f0127388:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012738f:	eb 1e                	jmp    f01273af <test_kfreeall+0xe89>
		{
			sums[7] += ptr[i] ;
f0127391:	8b 95 34 fe ff ff    	mov    -0x1cc(%ebp),%edx
f0127397:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f012739a:	8b 45 80             	mov    -0x80(%ebp),%eax
f012739d:	01 c8                	add    %ecx,%eax
f012739f:	8a 00                	mov    (%eax),%al
f01273a1:	0f be c0             	movsbl %al,%eax
f01273a4:	01 d0                	add    %edx,%eax
f01273a6:	89 85 34 fe ff ff    	mov    %eax,-0x1cc(%ebp)
		}
		if (sums[5] != 5*lastIndices[5])	panic("kfree: invalid read after freeing some allocations");

		//14 KB
		ptr = (char*)ptr_allocations[7];
		for (i = 0; i < lastIndices[7]; ++i)
f01273ac:	ff 45 f4             	incl   -0xc(%ebp)
f01273af:	8b 85 84 fe ff ff    	mov    -0x17c(%ebp),%eax
f01273b5:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01273b8:	7f d7                	jg     f0127391 <test_kfreeall+0xe6b>
		{
			sums[7] += ptr[i] ;
		}
		if (sums[7] != 7*lastIndices[7])	panic("kfree: invalid read after freeing some allocations");
f01273ba:	8b 8d 34 fe ff ff    	mov    -0x1cc(%ebp),%ecx
f01273c0:	8b 95 84 fe ff ff    	mov    -0x17c(%ebp),%edx
f01273c6:	89 d0                	mov    %edx,%eax
f01273c8:	01 c0                	add    %eax,%eax
f01273ca:	01 d0                	add    %edx,%eax
f01273cc:	01 c0                	add    %eax,%eax
f01273ce:	01 d0                	add    %edx,%eax
f01273d0:	39 c1                	cmp    %eax,%ecx
f01273d2:	74 17                	je     f01273eb <test_kfreeall+0xec5>
f01273d4:	83 ec 04             	sub    $0x4,%esp
f01273d7:	68 60 bb 13 f0       	push   $0xf013bb60
f01273dc:	68 98 0a 00 00       	push   $0xa98
f01273e1:	68 7a b3 13 f0       	push   $0xf013b37a
f01273e6:	e8 1a 8e fd ff       	call   f0100205 <_panic>
	}

	//Allocate after kfree
	{
		//20 KB
		freeFrames = sys_calculate_free_frames() ;
f01273eb:	e8 ad 57 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f01273f0:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01273f3:	e8 d0 c9 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f01273f8:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[8] = kmalloc(20*kilo);
f01273fb:	83 ec 0c             	sub    $0xc,%esp
f01273fe:	68 00 50 00 00       	push   $0x5000
f0127403:	e8 7d 04 fe ff       	call   f0107885 <kmalloc>
f0127408:	83 c4 10             	add    $0x10,%esp
f012740b:	89 85 e8 fd ff ff    	mov    %eax,-0x218(%ebp)
		if ((uint32) ptr_allocations[8] != (ACTUAL_START + 13*Mega + 32*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0127411:	8b 85 e8 fd ff ff    	mov    -0x218(%ebp),%eax
f0127417:	89 c1                	mov    %eax,%ecx
f0127419:	c7 85 fc fe ff ff 00 	movl   $0x1000,-0x104(%ebp)
f0127420:	10 00 00 
f0127423:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f0127429:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012742e:	89 85 f8 fe ff ff    	mov    %eax,-0x108(%ebp)
f0127434:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f012743a:	ba 00 00 00 00       	mov    $0x0,%edx
f012743f:	f7 b5 fc fe ff ff    	divl   -0x104(%ebp)
f0127445:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f012744b:	29 d0                	sub    %edx,%eax
f012744d:	89 c3                	mov    %eax,%ebx
f012744f:	c7 85 f4 fe ff ff 00 	movl   $0x1000,-0x10c(%ebp)
f0127456:	10 00 00 
f0127459:	a0 40 26 78 f0       	mov    0xf0782640,%al
f012745e:	0f b6 d0             	movzbl %al,%edx
f0127461:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f0127467:	01 d0                	add    %edx,%eax
f0127469:	48                   	dec    %eax
f012746a:	89 85 f0 fe ff ff    	mov    %eax,-0x110(%ebp)
f0127470:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f0127476:	ba 00 00 00 00       	mov    $0x0,%edx
f012747b:	f7 b5 f4 fe ff ff    	divl   -0x10c(%ebp)
f0127481:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f0127487:	29 d0                	sub    %edx,%eax
f0127489:	01 c3                	add    %eax,%ebx
f012748b:	c7 85 ec fe ff ff 00 	movl   $0x1000,-0x114(%ebp)
f0127492:	10 00 00 
f0127495:	a0 40 26 78 f0       	mov    0xf0782640,%al
f012749a:	0f b6 c0             	movzbl %al,%eax
f012749d:	c1 e0 04             	shl    $0x4,%eax
f01274a0:	89 c2                	mov    %eax,%edx
f01274a2:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f01274a8:	01 d0                	add    %edx,%eax
f01274aa:	48                   	dec    %eax
f01274ab:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)
f01274b1:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f01274b7:	ba 00 00 00 00       	mov    $0x0,%edx
f01274bc:	f7 b5 ec fe ff ff    	divl   -0x114(%ebp)
f01274c2:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f01274c8:	29 d0                	sub    %edx,%eax
f01274ca:	01 d8                	add    %ebx,%eax
f01274cc:	2d 00 40 2f 09       	sub    $0x92f4000,%eax
f01274d1:	39 c1                	cmp    %eax,%ecx
f01274d3:	74 17                	je     f01274ec <test_kfreeall+0xfc6>
f01274d5:	83 ec 04             	sub    $0x4,%esp
f01274d8:	68 60 b4 13 f0       	push   $0xf013b460
f01274dd:	68 a1 0a 00 00       	push   $0xaa1
f01274e2:	68 7a b3 13 f0       	push   $0xf013b37a
f01274e7:	e8 19 8d fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01274ec:	e8 d7 c8 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f01274f1:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f01274f4:	74 17                	je     f012750d <test_kfreeall+0xfe7>
f01274f6:	83 ec 04             	sub    $0x4,%esp
f01274f9:	68 94 b3 13 f0       	push   $0xf013b394
f01274fe:	68 a2 0a 00 00       	push   $0xaa2
f0127503:	68 7a b3 13 f0       	push   $0xf013b37a
f0127508:	e8 f8 8c fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 5) panic("Wrong allocation: pages are not loaded successfully into memory");
f012750d:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0127510:	e8 88 56 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0127515:	29 c3                	sub    %eax,%ebx
f0127517:	89 d8                	mov    %ebx,%eax
f0127519:	83 f8 05             	cmp    $0x5,%eax
f012751c:	74 17                	je     f0127535 <test_kfreeall+0x100f>
f012751e:	83 ec 04             	sub    $0x4,%esp
f0127521:	68 fc b3 13 f0       	push   $0xf013b3fc
f0127526:	68 a3 0a 00 00       	push   $0xaa3
f012752b:	68 7a b3 13 f0       	push   $0xf013b37a
f0127530:	e8 d0 8c fd ff       	call   f0100205 <_panic>
		lastIndices[8] = (20*kilo)/sizeof(char) - 1;
f0127535:	c7 85 88 fe ff ff ff 	movl   $0x4fff,-0x178(%ebp)
f012753c:	4f 00 00 
		ptr = (char*)ptr_allocations[8];
f012753f:	8b 85 e8 fd ff ff    	mov    -0x218(%ebp),%eax
f0127545:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[8]; ++i)
f0127548:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012754f:	eb 0e                	jmp    f012755f <test_kfreeall+0x1039>
		{
			ptr[i] = 8 ;
f0127551:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0127554:	8b 45 80             	mov    -0x80(%ebp),%eax
f0127557:	01 d0                	add    %edx,%eax
f0127559:	c6 00 08             	movb   $0x8,(%eax)
		if ((uint32) ptr_allocations[8] != (ACTUAL_START + 13*Mega + 32*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 5) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[8] = (20*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[8];
		for (i = 0; i < lastIndices[8]; ++i)
f012755c:	ff 45 f4             	incl   -0xc(%ebp)
f012755f:	8b 85 88 fe ff ff    	mov    -0x178(%ebp),%eax
f0127565:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0127568:	7f e7                	jg     f0127551 <test_kfreeall+0x102b>
		{
			ptr[i] = 8 ;
		}

		//1 MB
		freeFrames = sys_calculate_free_frames() ;
f012756a:	e8 2e 56 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f012756f:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0127572:	e8 51 c8 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0127577:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[9] = kmalloc(1*Mega);
f012757a:	83 ec 0c             	sub    $0xc,%esp
f012757d:	68 00 00 10 00       	push   $0x100000
f0127582:	e8 fe 02 fe ff       	call   f0107885 <kmalloc>
f0127587:	83 c4 10             	add    $0x10,%esp
f012758a:	89 85 ec fd ff ff    	mov    %eax,-0x214(%ebp)
		if ((uint32) ptr_allocations[9] != (ACTUAL_START + 13*Mega + 52*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0127590:	8b 85 ec fd ff ff    	mov    -0x214(%ebp),%eax
f0127596:	89 c1                	mov    %eax,%ecx
f0127598:	c7 85 e4 fe ff ff 00 	movl   $0x1000,-0x11c(%ebp)
f012759f:	10 00 00 
f01275a2:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f01275a8:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01275ad:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
f01275b3:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f01275b9:	ba 00 00 00 00       	mov    $0x0,%edx
f01275be:	f7 b5 e4 fe ff ff    	divl   -0x11c(%ebp)
f01275c4:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f01275ca:	29 d0                	sub    %edx,%eax
f01275cc:	89 c3                	mov    %eax,%ebx
f01275ce:	c7 85 dc fe ff ff 00 	movl   $0x1000,-0x124(%ebp)
f01275d5:	10 00 00 
f01275d8:	a0 40 26 78 f0       	mov    0xf0782640,%al
f01275dd:	0f b6 d0             	movzbl %al,%edx
f01275e0:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f01275e6:	01 d0                	add    %edx,%eax
f01275e8:	48                   	dec    %eax
f01275e9:	89 85 d8 fe ff ff    	mov    %eax,-0x128(%ebp)
f01275ef:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f01275f5:	ba 00 00 00 00       	mov    $0x0,%edx
f01275fa:	f7 b5 dc fe ff ff    	divl   -0x124(%ebp)
f0127600:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f0127606:	29 d0                	sub    %edx,%eax
f0127608:	01 c3                	add    %eax,%ebx
f012760a:	c7 85 d4 fe ff ff 00 	movl   $0x1000,-0x12c(%ebp)
f0127611:	10 00 00 
f0127614:	a0 40 26 78 f0       	mov    0xf0782640,%al
f0127619:	0f b6 c0             	movzbl %al,%eax
f012761c:	c1 e0 04             	shl    $0x4,%eax
f012761f:	89 c2                	mov    %eax,%edx
f0127621:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f0127627:	01 d0                	add    %edx,%eax
f0127629:	48                   	dec    %eax
f012762a:	89 85 d0 fe ff ff    	mov    %eax,-0x130(%ebp)
f0127630:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f0127636:	ba 00 00 00 00       	mov    $0x0,%edx
f012763b:	f7 b5 d4 fe ff ff    	divl   -0x12c(%ebp)
f0127641:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f0127647:	29 d0                	sub    %edx,%eax
f0127649:	01 d8                	add    %ebx,%eax
f012764b:	2d 00 f0 2e 09       	sub    $0x92ef000,%eax
f0127650:	39 c1                	cmp    %eax,%ecx
f0127652:	74 17                	je     f012766b <test_kfreeall+0x1145>
f0127654:	83 ec 04             	sub    $0x4,%esp
f0127657:	68 60 b4 13 f0       	push   $0xf013b460
f012765c:	68 af 0a 00 00       	push   $0xaaf
f0127661:	68 7a b3 13 f0       	push   $0xf013b37a
f0127666:	e8 9a 8b fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012766b:	e8 58 c7 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0127670:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0127673:	74 17                	je     f012768c <test_kfreeall+0x1166>
f0127675:	83 ec 04             	sub    $0x4,%esp
f0127678:	68 94 b3 13 f0       	push   $0xf013b394
f012767d:	68 b0 0a 00 00       	push   $0xab0
f0127682:	68 7a b3 13 f0       	push   $0xf013b37a
f0127687:	e8 79 8b fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: pages are not loaded successfully into memory");
f012768c:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f012768f:	e8 09 55 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0127694:	29 c3                	sub    %eax,%ebx
f0127696:	89 d8                	mov    %ebx,%eax
f0127698:	3d 00 01 00 00       	cmp    $0x100,%eax
f012769d:	74 17                	je     f01276b6 <test_kfreeall+0x1190>
f012769f:	83 ec 04             	sub    $0x4,%esp
f01276a2:	68 fc b3 13 f0       	push   $0xf013b3fc
f01276a7:	68 b1 0a 00 00       	push   $0xab1
f01276ac:	68 7a b3 13 f0       	push   $0xf013b37a
f01276b1:	e8 4f 8b fd ff       	call   f0100205 <_panic>
		lastIndices[9] = (1*Mega)/sizeof(char) - 1;
f01276b6:	c7 85 8c fe ff ff ff 	movl   $0xfffff,-0x174(%ebp)
f01276bd:	ff 0f 00 
		ptr = (char*)ptr_allocations[9];
f01276c0:	8b 85 ec fd ff ff    	mov    -0x214(%ebp),%eax
f01276c6:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[9]; ++i)
f01276c9:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01276d0:	eb 0e                	jmp    f01276e0 <test_kfreeall+0x11ba>
		{
			ptr[i] = 9 ;
f01276d2:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01276d5:	8b 45 80             	mov    -0x80(%ebp),%eax
f01276d8:	01 d0                	add    %edx,%eax
f01276da:	c6 00 09             	movb   $0x9,(%eax)
		if ((uint32) ptr_allocations[9] != (ACTUAL_START + 13*Mega + 52*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[9] = (1*Mega)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[9];
		for (i = 0; i < lastIndices[9]; ++i)
f01276dd:	ff 45 f4             	incl   -0xc(%ebp)
f01276e0:	8b 85 8c fe ff ff    	mov    -0x174(%ebp),%eax
f01276e6:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01276e9:	7f e7                	jg     f01276d2 <test_kfreeall+0x11ac>
		}
	}

	//kfree entire kernel heap
	{
		freeFrames = sys_calculate_free_frames() ;
f01276eb:	e8 ad 54 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f01276f0:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01276f3:	e8 d0 c6 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f01276f8:	89 45 cc             	mov    %eax,-0x34(%ebp)

		kfreeall();
f01276fb:	e8 ee 03 fe ff       	call   f0107aee <kfreeall>

		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0127700:	e8 c3 c6 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0127705:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0127708:	74 17                	je     f0127721 <test_kfreeall+0x11fb>
f012770a:	83 ec 04             	sub    $0x4,%esp
f012770d:	68 94 b3 13 f0       	push   $0xf013b394
f0127712:	68 c1 0a 00 00       	push   $0xac1
f0127717:	68 7a b3 13 f0       	push   $0xf013b37a
f012771c:	e8 e4 8a fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != (INITIAL_KHEAP_ALLOCATIONS)/PAGE_SIZE+ 2 + 3*Mega/4096 + 1 + 1 + 4 + 5 + 256) panic("Wrong kfree: pages in memory are not freed correctly");
f0127721:	e8 77 54 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0127726:	89 c2                	mov    %eax,%edx
f0127728:	8b 45 d0             	mov    -0x30(%ebp),%eax
f012772b:	89 d1                	mov    %edx,%ecx
f012772d:	29 c1                	sub    %eax,%ecx
f012772f:	c7 85 cc fe ff ff 00 	movl   $0x1000,-0x134(%ebp)
f0127736:	10 00 00 
f0127739:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f012773f:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0127744:	89 85 c8 fe ff ff    	mov    %eax,-0x138(%ebp)
f012774a:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f0127750:	ba 00 00 00 00       	mov    $0x0,%edx
f0127755:	f7 b5 cc fe ff ff    	divl   -0x134(%ebp)
f012775b:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f0127761:	29 d0                	sub    %edx,%eax
f0127763:	89 c3                	mov    %eax,%ebx
f0127765:	c7 85 c4 fe ff ff 00 	movl   $0x1000,-0x13c(%ebp)
f012776c:	10 00 00 
f012776f:	a0 40 26 78 f0       	mov    0xf0782640,%al
f0127774:	0f b6 d0             	movzbl %al,%edx
f0127777:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f012777d:	01 d0                	add    %edx,%eax
f012777f:	48                   	dec    %eax
f0127780:	89 85 c0 fe ff ff    	mov    %eax,-0x140(%ebp)
f0127786:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f012778c:	ba 00 00 00 00       	mov    $0x0,%edx
f0127791:	f7 b5 c4 fe ff ff    	divl   -0x13c(%ebp)
f0127797:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f012779d:	29 d0                	sub    %edx,%eax
f012779f:	01 c3                	add    %eax,%ebx
f01277a1:	c7 85 bc fe ff ff 00 	movl   $0x1000,-0x144(%ebp)
f01277a8:	10 00 00 
f01277ab:	a0 40 26 78 f0       	mov    0xf0782640,%al
f01277b0:	0f b6 c0             	movzbl %al,%eax
f01277b3:	c1 e0 04             	shl    $0x4,%eax
f01277b6:	89 c2                	mov    %eax,%edx
f01277b8:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f01277be:	01 d0                	add    %edx,%eax
f01277c0:	48                   	dec    %eax
f01277c1:	89 85 b8 fe ff ff    	mov    %eax,-0x148(%ebp)
f01277c7:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f01277cd:	ba 00 00 00 00       	mov    $0x0,%edx
f01277d2:	f7 b5 bc fe ff ff    	divl   -0x144(%ebp)
f01277d8:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f01277de:	29 d0                	sub    %edx,%eax
f01277e0:	01 d8                	add    %ebx,%eax
f01277e2:	05 00 40 00 00       	add    $0x4000,%eax
f01277e7:	c1 e8 0c             	shr    $0xc,%eax
f01277ea:	05 0d 04 00 00       	add    $0x40d,%eax
f01277ef:	39 c1                	cmp    %eax,%ecx
f01277f1:	74 17                	je     f012780a <test_kfreeall+0x12e4>
f01277f3:	83 ec 04             	sub    $0x4,%esp
f01277f6:	68 04 bb 13 f0       	push   $0xf013bb04
f01277fb:	68 c2 0a 00 00       	push   $0xac2
f0127800:	68 7a b3 13 f0       	push   $0xf013b37a
f0127805:	e8 fb 89 fd ff       	call   f0100205 <_panic>

	//Check memory access after kfreeall
	{
		//Bypass the PAGE FAULT on <MOVB immediate, reg> instruction by setting its length
		//and continue executing the remaining code
		sys_bypassPageFault(3);
f012780a:	83 ec 0c             	sub    $0xc,%esp
f012780d:	6a 03                	push   $0x3
f012780f:	e8 29 58 fe ff       	call   f010d03d <sys_bypassPageFault>
f0127814:	83 c4 10             	add    $0x10,%esp

		for (i = 0; i < 10; ++i)
f0127817:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012781e:	e9 82 00 00 00       	jmp    f01278a5 <test_kfreeall+0x137f>
		{
			ptr = (char *) ptr_allocations[i];
f0127823:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0127826:	8b 84 85 c8 fd ff ff 	mov    -0x238(%ebp,%eax,4),%eax
f012782d:	89 45 80             	mov    %eax,-0x80(%ebp)
			ptr[0] = 10;
f0127830:	8b 45 80             	mov    -0x80(%ebp),%eax
f0127833:	c6 00 0a             	movb   $0xa,(%eax)
			//cprintf("\n\ncr2 = %x, faulted addr = %x", sys_rcr2(), (uint32)&(ptr[0]));
			if (sys_rcr2() != (uint32)&(ptr[0])) panic("kfree: successful access to freed space!! it should not be succeeded");
f0127836:	e8 f0 57 fe ff       	call   f010d02b <sys_rcr2>
f012783b:	89 c2                	mov    %eax,%edx
f012783d:	8b 45 80             	mov    -0x80(%ebp),%eax
f0127840:	39 c2                	cmp    %eax,%edx
f0127842:	74 17                	je     f012785b <test_kfreeall+0x1335>
f0127844:	83 ec 04             	sub    $0x4,%esp
f0127847:	68 e0 bb 13 f0       	push   $0xf013bbe0
f012784c:	68 d0 0a 00 00       	push   $0xad0
f0127851:	68 7a b3 13 f0       	push   $0xf013b37a
f0127856:	e8 aa 89 fd ff       	call   f0100205 <_panic>
			ptr[lastIndices[i]] = 10;
f012785b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012785e:	8b 84 85 68 fe ff ff 	mov    -0x198(%ebp,%eax,4),%eax
f0127865:	89 c2                	mov    %eax,%edx
f0127867:	8b 45 80             	mov    -0x80(%ebp),%eax
f012786a:	01 d0                	add    %edx,%eax
f012786c:	c6 00 0a             	movb   $0xa,(%eax)
			if (sys_rcr2() != (uint32)&(ptr[lastIndices[i]])) panic("kfree: successful access to freed space!! it should not be succeeded");
f012786f:	e8 b7 57 fe ff       	call   f010d02b <sys_rcr2>
f0127874:	89 c2                	mov    %eax,%edx
f0127876:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0127879:	8b 84 85 68 fe ff ff 	mov    -0x198(%ebp,%eax,4),%eax
f0127880:	89 c1                	mov    %eax,%ecx
f0127882:	8b 45 80             	mov    -0x80(%ebp),%eax
f0127885:	01 c8                	add    %ecx,%eax
f0127887:	39 c2                	cmp    %eax,%edx
f0127889:	74 17                	je     f01278a2 <test_kfreeall+0x137c>
f012788b:	83 ec 04             	sub    $0x4,%esp
f012788e:	68 e0 bb 13 f0       	push   $0xf013bbe0
f0127893:	68 d2 0a 00 00       	push   $0xad2
f0127898:	68 7a b3 13 f0       	push   $0xf013b37a
f012789d:	e8 63 89 fd ff       	call   f0100205 <_panic>
	{
		//Bypass the PAGE FAULT on <MOVB immediate, reg> instruction by setting its length
		//and continue executing the remaining code
		sys_bypassPageFault(3);

		for (i = 0; i < 10; ++i)
f01278a2:	ff 45 f4             	incl   -0xc(%ebp)
f01278a5:	83 7d f4 09          	cmpl   $0x9,-0xc(%ebp)
f01278a9:	0f 8e 74 ff ff ff    	jle    f0127823 <test_kfreeall+0x12fd>
			if (sys_rcr2() != (uint32)&(ptr[0])) panic("kfree: successful access to freed space!! it should not be succeeded");
			ptr[lastIndices[i]] = 10;
			if (sys_rcr2() != (uint32)&(ptr[lastIndices[i]])) panic("kfree: successful access to freed space!! it should not be succeeded");
		}
		//set it to 0 again to cancel the bypassing option
		sys_bypassPageFault(0);
f01278af:	83 ec 0c             	sub    $0xc,%esp
f01278b2:	6a 00                	push   $0x0
f01278b4:	e8 84 57 fe ff       	call   f010d03d <sys_bypassPageFault>
f01278b9:	83 c4 10             	add    $0x10,%esp
	}

	//Allocate after kfreeall
	{
		//4 MB
		freeFrames = sys_calculate_free_frames() ;
f01278bc:	e8 dc 52 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f01278c1:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01278c4:	e8 ff c4 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f01278c9:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[10] = kmalloc(4*Mega);
f01278cc:	83 ec 0c             	sub    $0xc,%esp
f01278cf:	68 00 00 40 00       	push   $0x400000
f01278d4:	e8 ac ff fd ff       	call   f0107885 <kmalloc>
f01278d9:	83 c4 10             	add    $0x10,%esp
f01278dc:	89 85 f0 fd ff ff    	mov    %eax,-0x210(%ebp)
		if ((uint32) ptr_allocations[10] != (KERNEL_HEAP_START)) panic("Wrong start address after kfreeall()... check return address updating of heap ptr");
f01278e2:	8b 85 f0 fd ff ff    	mov    -0x210(%ebp),%eax
f01278e8:	3d 00 00 00 f6       	cmp    $0xf6000000,%eax
f01278ed:	74 17                	je     f0127906 <test_kfreeall+0x13e0>
f01278ef:	83 ec 04             	sub    $0x4,%esp
f01278f2:	68 84 c0 13 f0       	push   $0xf013c084
f01278f7:	68 de 0a 00 00       	push   $0xade
f01278fc:	68 7a b3 13 f0       	push   $0xf013b37a
f0127901:	e8 ff 88 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0127906:	e8 bd c4 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012790b:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f012790e:	74 17                	je     f0127927 <test_kfreeall+0x1401>
f0127910:	83 ec 04             	sub    $0x4,%esp
f0127913:	68 94 b3 13 f0       	push   $0xf013b394
f0127918:	68 df 0a 00 00       	push   $0xadf
f012791d:	68 7a b3 13 f0       	push   $0xf013b37a
f0127922:	e8 de 88 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 4*Mega/PAGE_SIZE) panic("Wrong allocation: pages are not loaded successfully into memory");
f0127927:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f012792a:	e8 6e 52 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f012792f:	29 c3                	sub    %eax,%ebx
f0127931:	89 d8                	mov    %ebx,%eax
f0127933:	3d 00 04 00 00       	cmp    $0x400,%eax
f0127938:	74 17                	je     f0127951 <test_kfreeall+0x142b>
f012793a:	83 ec 04             	sub    $0x4,%esp
f012793d:	68 fc b3 13 f0       	push   $0xf013b3fc
f0127942:	68 e0 0a 00 00       	push   $0xae0
f0127947:	68 7a b3 13 f0       	push   $0xf013b37a
f012794c:	e8 b4 88 fd ff       	call   f0100205 <_panic>

		//12 KB
		freeFrames = sys_calculate_free_frames() ;
f0127951:	e8 47 52 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0127956:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0127959:	e8 6a c4 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012795e:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[11] = kmalloc(12*kilo);
f0127961:	83 ec 0c             	sub    $0xc,%esp
f0127964:	68 00 30 00 00       	push   $0x3000
f0127969:	e8 17 ff fd ff       	call   f0107885 <kmalloc>
f012796e:	83 c4 10             	add    $0x10,%esp
f0127971:	89 85 f4 fd ff ff    	mov    %eax,-0x20c(%ebp)
		if ((uint32) ptr_allocations[11] != (KERNEL_HEAP_START + 4*Mega)) panic("Wrong start address after kfreeall()... check return address updating of heap ptr");
f0127977:	8b 85 f4 fd ff ff    	mov    -0x20c(%ebp),%eax
f012797d:	3d 00 00 40 f6       	cmp    $0xf6400000,%eax
f0127982:	74 17                	je     f012799b <test_kfreeall+0x1475>
f0127984:	83 ec 04             	sub    $0x4,%esp
f0127987:	68 84 c0 13 f0       	push   $0xf013c084
f012798c:	68 e6 0a 00 00       	push   $0xae6
f0127991:	68 7a b3 13 f0       	push   $0xf013b37a
f0127996:	e8 6a 88 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012799b:	e8 28 c4 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f01279a0:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f01279a3:	74 17                	je     f01279bc <test_kfreeall+0x1496>
f01279a5:	83 ec 04             	sub    $0x4,%esp
f01279a8:	68 94 b3 13 f0       	push   $0xf013b394
f01279ad:	68 e7 0a 00 00       	push   $0xae7
f01279b2:	68 7a b3 13 f0       	push   $0xf013b37a
f01279b7:	e8 49 88 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 3) panic("Wrong allocation: pages are not loaded successfully into memory");
f01279bc:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f01279bf:	e8 d9 51 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f01279c4:	29 c3                	sub    %eax,%ebx
f01279c6:	89 d8                	mov    %ebx,%eax
f01279c8:	83 f8 03             	cmp    $0x3,%eax
f01279cb:	74 17                	je     f01279e4 <test_kfreeall+0x14be>
f01279cd:	83 ec 04             	sub    $0x4,%esp
f01279d0:	68 fc b3 13 f0       	push   $0xf013b3fc
f01279d5:	68 e8 0a 00 00       	push   $0xae8
f01279da:	68 7a b3 13 f0       	push   $0xf013b37a
f01279df:	e8 21 88 fd ff       	call   f0100205 <_panic>
	}

	//kfree one of the newly allocated space
	{
		//kfree 12 KB
		freeFrames = sys_calculate_free_frames() ;
f01279e4:	e8 b4 51 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f01279e9:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01279ec:	e8 d7 c3 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f01279f1:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[11]);
f01279f4:	8b 85 f4 fd ff ff    	mov    -0x20c(%ebp),%eax
f01279fa:	83 ec 0c             	sub    $0xc,%esp
f01279fd:	50                   	push   %eax
f01279fe:	e8 4d ff fd ff       	call   f0107950 <kfree>
f0127a03:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0127a06:	e8 bd c3 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0127a0b:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0127a0e:	74 17                	je     f0127a27 <test_kfreeall+0x1501>
f0127a10:	83 ec 04             	sub    $0x4,%esp
f0127a13:	68 94 b3 13 f0       	push   $0xf013b394
f0127a18:	68 f2 0a 00 00       	push   $0xaf2
f0127a1d:	68 7a b3 13 f0       	push   $0xf013b37a
f0127a22:	e8 de 87 fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 3) panic("Wrong kfree: attempt to kfree a non-existing ptr. It should do nothing");
f0127a27:	e8 71 51 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0127a2c:	89 c2                	mov    %eax,%edx
f0127a2e:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0127a31:	29 c2                	sub    %eax,%edx
f0127a33:	89 d0                	mov    %edx,%eax
f0127a35:	83 f8 03             	cmp    $0x3,%eax
f0127a38:	74 17                	je     f0127a51 <test_kfreeall+0x152b>
f0127a3a:	83 ec 04             	sub    $0x4,%esp
f0127a3d:	68 2c bc 13 f0       	push   $0xf013bc2c
f0127a42:	68 f3 0a 00 00       	push   $0xaf3
f0127a47:	68 7a b3 13 f0       	push   $0xf013b37a
f0127a4c:	e8 b4 87 fd ff       	call   f0100205 <_panic>
	}

	//kfree non-exist item
	{
		//kfree 2 KB
		freeFrames = sys_calculate_free_frames() ;
f0127a51:	e8 47 51 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0127a56:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0127a59:	e8 6a c3 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0127a5e:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[2]);
f0127a61:	8b 85 d0 fd ff ff    	mov    -0x230(%ebp),%eax
f0127a67:	83 ec 0c             	sub    $0xc,%esp
f0127a6a:	50                   	push   %eax
f0127a6b:	e8 e0 fe fd ff       	call   f0107950 <kfree>
f0127a70:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0127a73:	e8 50 c3 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0127a78:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0127a7b:	74 17                	je     f0127a94 <test_kfreeall+0x156e>
f0127a7d:	83 ec 04             	sub    $0x4,%esp
f0127a80:	68 94 b3 13 f0       	push   $0xf013b394
f0127a85:	68 fc 0a 00 00       	push   $0xafc
f0127a8a:	68 7a b3 13 f0       	push   $0xf013b37a
f0127a8f:	e8 71 87 fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 0) panic("Wrong kfree: attempt to kfree a non-existing ptr. It should do nothing");
f0127a94:	e8 04 51 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0127a99:	89 c2                	mov    %eax,%edx
f0127a9b:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0127a9e:	39 c2                	cmp    %eax,%edx
f0127aa0:	74 17                	je     f0127ab9 <test_kfreeall+0x1593>
f0127aa2:	83 ec 04             	sub    $0x4,%esp
f0127aa5:	68 2c bc 13 f0       	push   $0xf013bc2c
f0127aaa:	68 fd 0a 00 00       	push   $0xafd
f0127aaf:	68 7a b3 13 f0       	push   $0xf013b37a
f0127ab4:	e8 4c 87 fd ff       	call   f0100205 <_panic>

		//kfree 20 KB
		freeFrames = sys_calculate_free_frames() ;
f0127ab9:	e8 df 50 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0127abe:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0127ac1:	e8 02 c3 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0127ac6:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[8]);
f0127ac9:	8b 85 e8 fd ff ff    	mov    -0x218(%ebp),%eax
f0127acf:	83 ec 0c             	sub    $0xc,%esp
f0127ad2:	50                   	push   %eax
f0127ad3:	e8 78 fe fd ff       	call   f0107950 <kfree>
f0127ad8:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0127adb:	e8 e8 c2 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0127ae0:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0127ae3:	74 17                	je     f0127afc <test_kfreeall+0x15d6>
f0127ae5:	83 ec 04             	sub    $0x4,%esp
f0127ae8:	68 94 b3 13 f0       	push   $0xf013b394
f0127aed:	68 03 0b 00 00       	push   $0xb03
f0127af2:	68 7a b3 13 f0       	push   $0xf013b37a
f0127af7:	e8 09 87 fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 0) panic("Wrong kfree: attempt to kfree a non-existing ptr. It should do nothing");
f0127afc:	e8 9c 50 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0127b01:	89 c2                	mov    %eax,%edx
f0127b03:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0127b06:	39 c2                	cmp    %eax,%edx
f0127b08:	74 17                	je     f0127b21 <test_kfreeall+0x15fb>
f0127b0a:	83 ec 04             	sub    $0x4,%esp
f0127b0d:	68 2c bc 13 f0       	push   $0xf013bc2c
f0127b12:	68 04 0b 00 00       	push   $0xb04
f0127b17:	68 7a b3 13 f0       	push   $0xf013b37a
f0127b1c:	e8 e4 86 fd ff       	call   f0100205 <_panic>

		//kfree 1 MB
		freeFrames = sys_calculate_free_frames() ;
f0127b21:	e8 77 50 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0127b26:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0127b29:	e8 9a c2 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0127b2e:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[9]);
f0127b31:	8b 85 ec fd ff ff    	mov    -0x214(%ebp),%eax
f0127b37:	83 ec 0c             	sub    $0xc,%esp
f0127b3a:	50                   	push   %eax
f0127b3b:	e8 10 fe fd ff       	call   f0107950 <kfree>
f0127b40:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0127b43:	e8 80 c2 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0127b48:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0127b4b:	74 17                	je     f0127b64 <test_kfreeall+0x163e>
f0127b4d:	83 ec 04             	sub    $0x4,%esp
f0127b50:	68 94 b3 13 f0       	push   $0xf013b394
f0127b55:	68 0a 0b 00 00       	push   $0xb0a
f0127b5a:	68 7a b3 13 f0       	push   $0xf013b37a
f0127b5f:	e8 a1 86 fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 0) panic("Wrong kfree: attempt to kfree a non-existing ptr. It should do nothing");
f0127b64:	e8 34 50 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0127b69:	89 c2                	mov    %eax,%edx
f0127b6b:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0127b6e:	39 c2                	cmp    %eax,%edx
f0127b70:	74 17                	je     f0127b89 <test_kfreeall+0x1663>
f0127b72:	83 ec 04             	sub    $0x4,%esp
f0127b75:	68 2c bc 13 f0       	push   $0xf013bc2c
f0127b7a:	68 0b 0b 00 00       	push   $0xb0b
f0127b7f:	68 7a b3 13 f0       	push   $0xf013b37a
f0127b84:	e8 7c 86 fd ff       	call   f0100205 <_panic>
	}

	//check tables
	{
		long long va;
		for (va = KERNEL_HEAP_START; va < (long long)KERNEL_HEAP_MAX; va+=PTSIZE)
f0127b89:	c7 45 e8 00 00 00 f6 	movl   $0xf6000000,-0x18(%ebp)
f0127b90:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f0127b97:	eb 48                	jmp    f0127be1 <test_kfreeall+0x16bb>
		{
			uint32 *ptr_table ;
			get_page_table(ptr_page_directory, (uint32)va, &ptr_table);
f0127b99:	8b 55 e8             	mov    -0x18(%ebp),%edx
f0127b9c:	a1 3c 26 78 f0       	mov    0xf078263c,%eax
f0127ba1:	83 ec 04             	sub    $0x4,%esp
f0127ba4:	8d 8d c4 fd ff ff    	lea    -0x23c(%ebp),%ecx
f0127baa:	51                   	push   %ecx
f0127bab:	52                   	push   %edx
f0127bac:	50                   	push   %eax
f0127bad:	e8 ff ee fd ff       	call   f0106ab1 <get_page_table>
f0127bb2:	83 c4 10             	add    $0x10,%esp
			if (ptr_table == NULL)
f0127bb5:	8b 85 c4 fd ff ff    	mov    -0x23c(%ebp),%eax
f0127bbb:	85 c0                	test   %eax,%eax
f0127bbd:	75 17                	jne    f0127bd6 <test_kfreeall+0x16b0>
			{
				panic("Wrong kfree: one of the kernel tables is wrongly removed! Tables should not be removed here in kfree");
f0127bbf:	83 ec 04             	sub    $0x4,%esp
f0127bc2:	68 7c bc 13 f0       	push   $0xf013bc7c
f0127bc7:	68 18 0b 00 00       	push   $0xb18
f0127bcc:	68 7a b3 13 f0       	push   $0xf013b37a
f0127bd1:	e8 2f 86 fd ff       	call   f0100205 <_panic>
	}

	//check tables
	{
		long long va;
		for (va = KERNEL_HEAP_START; va < (long long)KERNEL_HEAP_MAX; va+=PTSIZE)
f0127bd6:	81 45 e8 00 00 40 00 	addl   $0x400000,-0x18(%ebp)
f0127bdd:	83 55 ec 00          	adcl   $0x0,-0x14(%ebp)
f0127be1:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0127be5:	78 b2                	js     f0127b99 <test_kfreeall+0x1673>
f0127be7:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0127beb:	7f 09                	jg     f0127bf6 <test_kfreeall+0x16d0>
f0127bed:	81 7d e8 ff ef ff ff 	cmpl   $0xffffefff,-0x18(%ebp)
f0127bf4:	76 a3                	jbe    f0127b99 <test_kfreeall+0x1673>
			}
		}
	}


	cprintf("\nCongratulations!! your modification is run successfully.\n");
f0127bf6:	83 ec 0c             	sub    $0xc,%esp
f0127bf9:	68 d8 c0 13 f0       	push   $0xf013c0d8
f0127bfe:	e8 0b 91 fd ff       	call   f0100d0e <cprintf>
f0127c03:	83 c4 10             	add    $0x10,%esp

	return 1;
f0127c06:	b8 01 00 00 00       	mov    $0x1,%eax

}
f0127c0b:	8d 65 f8             	lea    -0x8(%ebp),%esp
f0127c0e:	5b                   	pop    %ebx
f0127c0f:	5f                   	pop    %edi
f0127c10:	5d                   	pop    %ebp
f0127c11:	c3                   	ret    

f0127c12 <test_kexpand>:


extern void kexpand(uint32 newSize) ;

int test_kexpand()
{
f0127c12:	55                   	push   %ebp
f0127c13:	89 e5                	mov    %esp,%ebp
f0127c15:	57                   	push   %edi
f0127c16:	53                   	push   %ebx
f0127c17:	81 ec 90 01 00 00    	sub    $0x190,%esp
	char minByte = 1<<7;
f0127c1d:	c6 45 f3 80          	movb   $0x80,-0xd(%ebp)
	char maxByte = 0x7F;
f0127c21:	c6 45 f2 7f          	movb   $0x7f,-0xe(%ebp)
	short minShort = 1<<15 ;
f0127c25:	66 c7 45 f0 00 80    	movw   $0x8000,-0x10(%ebp)
	short maxShort = 0x7FFF;
f0127c2b:	66 c7 45 ee ff 7f    	movw   $0x7fff,-0x12(%ebp)
	int minInt = 1<<31 ;
f0127c31:	c7 45 e8 00 00 00 80 	movl   $0x80000000,-0x18(%ebp)
	int maxInt = 0x7FFFFFFF;
f0127c38:	c7 45 e4 ff ff ff 7f 	movl   $0x7fffffff,-0x1c(%ebp)
	char *byteArr, *byteArr2 ;
	short *shortArr, *shortArr2 ;
	int *intArr;
	struct MyStruct *structArr ;
	int lastIndexOfByte, lastIndexOfByte2, lastIndexOfShort, lastIndexOfShort2, lastIndexOfInt, lastIndexOfStruct;
	int start_freeFrames = sys_calculate_free_frames() ;
f0127c3f:	e8 59 4f fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0127c44:	89 45 e0             	mov    %eax,-0x20(%ebp)

	//malloc some spaces
	int i, freeFrames, freeDiskFrames ;
	char* ptr;
	int lastIndices[20] = {0};
f0127c47:	8d 95 bc fe ff ff    	lea    -0x144(%ebp),%edx
f0127c4d:	b9 14 00 00 00       	mov    $0x14,%ecx
f0127c52:	b8 00 00 00 00       	mov    $0x0,%eax
f0127c57:	89 d7                	mov    %edx,%edi
f0127c59:	f3 ab                	rep stos %eax,%es:(%edi)

	uint32 *arr;
	void* ptr_allocations[20] = {0};
f0127c5b:	8d 95 6c fe ff ff    	lea    -0x194(%ebp),%edx
f0127c61:	b9 14 00 00 00       	mov    $0x14,%ecx
f0127c66:	b8 00 00 00 00       	mov    $0x0,%eax
f0127c6b:	89 d7                	mov    %edx,%edi
f0127c6d:	f3 ab                	rep stos %eax,%es:(%edi)
	{
		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f0127c6f:	e8 29 4f fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0127c74:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0127c77:	e8 4c c1 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0127c7c:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[0] = kmalloc(2*Mega-kilo);
f0127c7f:	83 ec 0c             	sub    $0xc,%esp
f0127c82:	68 00 fc 1f 00       	push   $0x1ffc00
f0127c87:	e8 f9 fb fd ff       	call   f0107885 <kmalloc>
f0127c8c:	83 c4 10             	add    $0x10,%esp
f0127c8f:	89 85 6c fe ff ff    	mov    %eax,-0x194(%ebp)
		if ((uint32) ptr_allocations[0] !=  (ACTUAL_START)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0127c95:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f0127c9b:	89 c1                	mov    %eax,%ecx
f0127c9d:	c7 45 d4 00 10 00 00 	movl   $0x1000,-0x2c(%ebp)
f0127ca4:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0127ca7:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0127cac:	89 45 d0             	mov    %eax,-0x30(%ebp)
f0127caf:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0127cb2:	ba 00 00 00 00       	mov    $0x0,%edx
f0127cb7:	f7 75 d4             	divl   -0x2c(%ebp)
f0127cba:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0127cbd:	29 d0                	sub    %edx,%eax
f0127cbf:	89 c3                	mov    %eax,%ebx
f0127cc1:	c7 45 cc 00 10 00 00 	movl   $0x1000,-0x34(%ebp)
f0127cc8:	a0 40 26 78 f0       	mov    0xf0782640,%al
f0127ccd:	0f b6 d0             	movzbl %al,%edx
f0127cd0:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0127cd3:	01 d0                	add    %edx,%eax
f0127cd5:	48                   	dec    %eax
f0127cd6:	89 45 c8             	mov    %eax,-0x38(%ebp)
f0127cd9:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0127cdc:	ba 00 00 00 00       	mov    $0x0,%edx
f0127ce1:	f7 75 cc             	divl   -0x34(%ebp)
f0127ce4:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0127ce7:	29 d0                	sub    %edx,%eax
f0127ce9:	01 c3                	add    %eax,%ebx
f0127ceb:	c7 45 c4 00 10 00 00 	movl   $0x1000,-0x3c(%ebp)
f0127cf2:	a0 40 26 78 f0       	mov    0xf0782640,%al
f0127cf7:	0f b6 c0             	movzbl %al,%eax
f0127cfa:	c1 e0 04             	shl    $0x4,%eax
f0127cfd:	89 c2                	mov    %eax,%edx
f0127cff:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0127d02:	01 d0                	add    %edx,%eax
f0127d04:	48                   	dec    %eax
f0127d05:	89 45 c0             	mov    %eax,-0x40(%ebp)
f0127d08:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0127d0b:	ba 00 00 00 00       	mov    $0x0,%edx
f0127d10:	f7 75 c4             	divl   -0x3c(%ebp)
f0127d13:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0127d16:	29 d0                	sub    %edx,%eax
f0127d18:	01 d8                	add    %ebx,%eax
f0127d1a:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f0127d1f:	39 c1                	cmp    %eax,%ecx
f0127d21:	74 17                	je     f0127d3a <test_kexpand+0x128>
f0127d23:	83 ec 04             	sub    $0x4,%esp
f0127d26:	68 60 b4 13 f0       	push   $0xf013b460
f0127d2b:	68 43 0b 00 00       	push   $0xb43
f0127d30:	68 7a b3 13 f0       	push   $0xf013b37a
f0127d35:	e8 cb 84 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0127d3a:	e8 89 c0 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0127d3f:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0127d42:	74 17                	je     f0127d5b <test_kexpand+0x149>
f0127d44:	83 ec 04             	sub    $0x4,%esp
f0127d47:	68 94 b3 13 f0       	push   $0xf013b394
f0127d4c:	68 44 0b 00 00       	push   $0xb44
f0127d51:	68 7a b3 13 f0       	push   $0xf013b37a
f0127d56:	e8 aa 84 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f0127d5b:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f0127d5e:	e8 3a 4e fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0127d63:	29 c3                	sub    %eax,%ebx
f0127d65:	89 d8                	mov    %ebx,%eax
f0127d67:	3d 00 02 00 00       	cmp    $0x200,%eax
f0127d6c:	74 17                	je     f0127d85 <test_kexpand+0x173>
f0127d6e:	83 ec 04             	sub    $0x4,%esp
f0127d71:	68 fc b3 13 f0       	push   $0xf013b3fc
f0127d76:	68 45 0b 00 00       	push   $0xb45
f0127d7b:	68 7a b3 13 f0       	push   $0xf013b37a
f0127d80:	e8 80 84 fd ff       	call   f0100205 <_panic>
		lastIndices[0] = (2*Mega-kilo)/sizeof(char) - 1;
f0127d85:	c7 85 bc fe ff ff ff 	movl   $0x1ffbff,-0x144(%ebp)
f0127d8c:	fb 1f 00 

		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f0127d8f:	e8 09 4e fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0127d94:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0127d97:	e8 2c c0 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0127d9c:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[1] = kmalloc(2*Mega-kilo);
f0127d9f:	83 ec 0c             	sub    $0xc,%esp
f0127da2:	68 00 fc 1f 00       	push   $0x1ffc00
f0127da7:	e8 d9 fa fd ff       	call   f0107885 <kmalloc>
f0127dac:	83 c4 10             	add    $0x10,%esp
f0127daf:	89 85 70 fe ff ff    	mov    %eax,-0x190(%ebp)
		if ((uint32) ptr_allocations[1] != (ACTUAL_START + 2*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0127db5:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f0127dbb:	89 c1                	mov    %eax,%ecx
f0127dbd:	c7 45 bc 00 10 00 00 	movl   $0x1000,-0x44(%ebp)
f0127dc4:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0127dc7:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0127dcc:	89 45 b8             	mov    %eax,-0x48(%ebp)
f0127dcf:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0127dd2:	ba 00 00 00 00       	mov    $0x0,%edx
f0127dd7:	f7 75 bc             	divl   -0x44(%ebp)
f0127dda:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0127ddd:	29 d0                	sub    %edx,%eax
f0127ddf:	89 c3                	mov    %eax,%ebx
f0127de1:	c7 45 b4 00 10 00 00 	movl   $0x1000,-0x4c(%ebp)
f0127de8:	a0 40 26 78 f0       	mov    0xf0782640,%al
f0127ded:	0f b6 d0             	movzbl %al,%edx
f0127df0:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0127df3:	01 d0                	add    %edx,%eax
f0127df5:	48                   	dec    %eax
f0127df6:	89 45 b0             	mov    %eax,-0x50(%ebp)
f0127df9:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0127dfc:	ba 00 00 00 00       	mov    $0x0,%edx
f0127e01:	f7 75 b4             	divl   -0x4c(%ebp)
f0127e04:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0127e07:	29 d0                	sub    %edx,%eax
f0127e09:	01 c3                	add    %eax,%ebx
f0127e0b:	c7 45 ac 00 10 00 00 	movl   $0x1000,-0x54(%ebp)
f0127e12:	a0 40 26 78 f0       	mov    0xf0782640,%al
f0127e17:	0f b6 c0             	movzbl %al,%eax
f0127e1a:	c1 e0 04             	shl    $0x4,%eax
f0127e1d:	89 c2                	mov    %eax,%edx
f0127e1f:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0127e22:	01 d0                	add    %edx,%eax
f0127e24:	48                   	dec    %eax
f0127e25:	89 45 a8             	mov    %eax,-0x58(%ebp)
f0127e28:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0127e2b:	ba 00 00 00 00       	mov    $0x0,%edx
f0127e30:	f7 75 ac             	divl   -0x54(%ebp)
f0127e33:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0127e36:	29 d0                	sub    %edx,%eax
f0127e38:	01 d8                	add    %ebx,%eax
f0127e3a:	2d 00 c0 df 09       	sub    $0x9dfc000,%eax
f0127e3f:	39 c1                	cmp    %eax,%ecx
f0127e41:	74 17                	je     f0127e5a <test_kexpand+0x248>
f0127e43:	83 ec 04             	sub    $0x4,%esp
f0127e46:	68 60 b4 13 f0       	push   $0xf013b460
f0127e4b:	68 4c 0b 00 00       	push   $0xb4c
f0127e50:	68 7a b3 13 f0       	push   $0xf013b37a
f0127e55:	e8 ab 83 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0127e5a:	e8 69 bf fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0127e5f:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0127e62:	74 17                	je     f0127e7b <test_kexpand+0x269>
f0127e64:	83 ec 04             	sub    $0x4,%esp
f0127e67:	68 94 b3 13 f0       	push   $0xf013b394
f0127e6c:	68 4d 0b 00 00       	push   $0xb4d
f0127e71:	68 7a b3 13 f0       	push   $0xf013b37a
f0127e76:	e8 8a 83 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f0127e7b:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f0127e7e:	e8 1a 4d fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0127e83:	29 c3                	sub    %eax,%ebx
f0127e85:	89 d8                	mov    %ebx,%eax
f0127e87:	3d 00 02 00 00       	cmp    $0x200,%eax
f0127e8c:	74 17                	je     f0127ea5 <test_kexpand+0x293>
f0127e8e:	83 ec 04             	sub    $0x4,%esp
f0127e91:	68 fc b3 13 f0       	push   $0xf013b3fc
f0127e96:	68 4e 0b 00 00       	push   $0xb4e
f0127e9b:	68 7a b3 13 f0       	push   $0xf013b37a
f0127ea0:	e8 60 83 fd ff       	call   f0100205 <_panic>
		lastIndices[1] = (2*Mega-kilo)/sizeof(char) - 1;
f0127ea5:	c7 85 c0 fe ff ff ff 	movl   $0x1ffbff,-0x140(%ebp)
f0127eac:	fb 1f 00 

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f0127eaf:	e8 e9 4c fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0127eb4:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0127eb7:	e8 0c bf fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0127ebc:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[2] = kmalloc(2*kilo);
f0127ebf:	83 ec 0c             	sub    $0xc,%esp
f0127ec2:	68 00 08 00 00       	push   $0x800
f0127ec7:	e8 b9 f9 fd ff       	call   f0107885 <kmalloc>
f0127ecc:	83 c4 10             	add    $0x10,%esp
f0127ecf:	89 85 74 fe ff ff    	mov    %eax,-0x18c(%ebp)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0127ed5:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f0127edb:	89 c1                	mov    %eax,%ecx
f0127edd:	c7 45 a4 00 10 00 00 	movl   $0x1000,-0x5c(%ebp)
f0127ee4:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0127ee7:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0127eec:	89 45 a0             	mov    %eax,-0x60(%ebp)
f0127eef:	8b 45 a0             	mov    -0x60(%ebp),%eax
f0127ef2:	ba 00 00 00 00       	mov    $0x0,%edx
f0127ef7:	f7 75 a4             	divl   -0x5c(%ebp)
f0127efa:	8b 45 a0             	mov    -0x60(%ebp),%eax
f0127efd:	29 d0                	sub    %edx,%eax
f0127eff:	89 c3                	mov    %eax,%ebx
f0127f01:	c7 45 9c 00 10 00 00 	movl   $0x1000,-0x64(%ebp)
f0127f08:	a0 40 26 78 f0       	mov    0xf0782640,%al
f0127f0d:	0f b6 d0             	movzbl %al,%edx
f0127f10:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0127f13:	01 d0                	add    %edx,%eax
f0127f15:	48                   	dec    %eax
f0127f16:	89 45 98             	mov    %eax,-0x68(%ebp)
f0127f19:	8b 45 98             	mov    -0x68(%ebp),%eax
f0127f1c:	ba 00 00 00 00       	mov    $0x0,%edx
f0127f21:	f7 75 9c             	divl   -0x64(%ebp)
f0127f24:	8b 45 98             	mov    -0x68(%ebp),%eax
f0127f27:	29 d0                	sub    %edx,%eax
f0127f29:	01 c3                	add    %eax,%ebx
f0127f2b:	c7 45 94 00 10 00 00 	movl   $0x1000,-0x6c(%ebp)
f0127f32:	a0 40 26 78 f0       	mov    0xf0782640,%al
f0127f37:	0f b6 c0             	movzbl %al,%eax
f0127f3a:	c1 e0 04             	shl    $0x4,%eax
f0127f3d:	89 c2                	mov    %eax,%edx
f0127f3f:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0127f42:	01 d0                	add    %edx,%eax
f0127f44:	48                   	dec    %eax
f0127f45:	89 45 90             	mov    %eax,-0x70(%ebp)
f0127f48:	8b 45 90             	mov    -0x70(%ebp),%eax
f0127f4b:	ba 00 00 00 00       	mov    $0x0,%edx
f0127f50:	f7 75 94             	divl   -0x6c(%ebp)
f0127f53:	8b 45 90             	mov    -0x70(%ebp),%eax
f0127f56:	29 d0                	sub    %edx,%eax
f0127f58:	01 d8                	add    %ebx,%eax
f0127f5a:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
f0127f5f:	39 c1                	cmp    %eax,%ecx
f0127f61:	74 17                	je     f0127f7a <test_kexpand+0x368>
f0127f63:	83 ec 04             	sub    $0x4,%esp
f0127f66:	68 60 b4 13 f0       	push   $0xf013b460
f0127f6b:	68 55 0b 00 00       	push   $0xb55
f0127f70:	68 7a b3 13 f0       	push   $0xf013b37a
f0127f75:	e8 8b 82 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0127f7a:	e8 49 be fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0127f7f:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0127f82:	74 17                	je     f0127f9b <test_kexpand+0x389>
f0127f84:	83 ec 04             	sub    $0x4,%esp
f0127f87:	68 94 b3 13 f0       	push   $0xf013b394
f0127f8c:	68 56 0b 00 00       	push   $0xb56
f0127f91:	68 7a b3 13 f0       	push   $0xf013b37a
f0127f96:	e8 6a 82 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f0127f9b:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f0127f9e:	e8 fa 4b fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0127fa3:	29 c3                	sub    %eax,%ebx
f0127fa5:	89 d8                	mov    %ebx,%eax
f0127fa7:	83 f8 01             	cmp    $0x1,%eax
f0127faa:	74 17                	je     f0127fc3 <test_kexpand+0x3b1>
f0127fac:	83 ec 04             	sub    $0x4,%esp
f0127faf:	68 fc b3 13 f0       	push   $0xf013b3fc
f0127fb4:	68 57 0b 00 00       	push   $0xb57
f0127fb9:	68 7a b3 13 f0       	push   $0xf013b37a
f0127fbe:	e8 42 82 fd ff       	call   f0100205 <_panic>
		lastIndices[2] = (2*kilo)/sizeof(char) - 1;
f0127fc3:	c7 85 c4 fe ff ff ff 	movl   $0x7ff,-0x13c(%ebp)
f0127fca:	07 00 00 
		ptr = (char*)ptr_allocations[2];
f0127fcd:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f0127fd3:	89 45 8c             	mov    %eax,-0x74(%ebp)
		for (i = 0; i < lastIndices[2]; ++i)
f0127fd6:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0127fdd:	eb 0e                	jmp    f0127fed <test_kexpand+0x3db>
		{
			ptr[i] = 2 ;
f0127fdf:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0127fe2:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0127fe5:	01 d0                	add    %edx,%eax
f0127fe7:	c6 00 02             	movb   $0x2,(%eax)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[2] = (2*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[2];
		for (i = 0; i < lastIndices[2]; ++i)
f0127fea:	ff 45 f4             	incl   -0xc(%ebp)
f0127fed:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f0127ff3:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0127ff6:	7f e7                	jg     f0127fdf <test_kexpand+0x3cd>
		{
			ptr[i] = 2 ;
		}

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f0127ff8:	e8 a0 4b fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0127ffd:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0128000:	e8 c3 bd fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0128005:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[3] = kmalloc(2*kilo);
f0128008:	83 ec 0c             	sub    $0xc,%esp
f012800b:	68 00 08 00 00       	push   $0x800
f0128010:	e8 70 f8 fd ff       	call   f0107885 <kmalloc>
f0128015:	83 c4 10             	add    $0x10,%esp
f0128018:	89 85 78 fe ff ff    	mov    %eax,-0x188(%ebp)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f012801e:	8b 85 78 fe ff ff    	mov    -0x188(%ebp),%eax
f0128024:	89 c1                	mov    %eax,%ecx
f0128026:	c7 45 88 00 10 00 00 	movl   $0x1000,-0x78(%ebp)
f012802d:	8b 45 88             	mov    -0x78(%ebp),%eax
f0128030:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0128035:	89 45 84             	mov    %eax,-0x7c(%ebp)
f0128038:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012803b:	ba 00 00 00 00       	mov    $0x0,%edx
f0128040:	f7 75 88             	divl   -0x78(%ebp)
f0128043:	8b 45 84             	mov    -0x7c(%ebp),%eax
f0128046:	29 d0                	sub    %edx,%eax
f0128048:	89 c3                	mov    %eax,%ebx
f012804a:	c7 45 80 00 10 00 00 	movl   $0x1000,-0x80(%ebp)
f0128051:	a0 40 26 78 f0       	mov    0xf0782640,%al
f0128056:	0f b6 d0             	movzbl %al,%edx
f0128059:	8b 45 80             	mov    -0x80(%ebp),%eax
f012805c:	01 d0                	add    %edx,%eax
f012805e:	48                   	dec    %eax
f012805f:	89 85 7c ff ff ff    	mov    %eax,-0x84(%ebp)
f0128065:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f012806b:	ba 00 00 00 00       	mov    $0x0,%edx
f0128070:	f7 75 80             	divl   -0x80(%ebp)
f0128073:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f0128079:	29 d0                	sub    %edx,%eax
f012807b:	01 c3                	add    %eax,%ebx
f012807d:	c7 85 78 ff ff ff 00 	movl   $0x1000,-0x88(%ebp)
f0128084:	10 00 00 
f0128087:	a0 40 26 78 f0       	mov    0xf0782640,%al
f012808c:	0f b6 c0             	movzbl %al,%eax
f012808f:	c1 e0 04             	shl    $0x4,%eax
f0128092:	89 c2                	mov    %eax,%edx
f0128094:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f012809a:	01 d0                	add    %edx,%eax
f012809c:	48                   	dec    %eax
f012809d:	89 85 74 ff ff ff    	mov    %eax,-0x8c(%ebp)
f01280a3:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f01280a9:	ba 00 00 00 00       	mov    $0x0,%edx
f01280ae:	f7 b5 78 ff ff ff    	divl   -0x88(%ebp)
f01280b4:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f01280ba:	29 d0                	sub    %edx,%eax
f01280bc:	01 d8                	add    %ebx,%eax
f01280be:	2d 00 b0 bf 09       	sub    $0x9bfb000,%eax
f01280c3:	39 c1                	cmp    %eax,%ecx
f01280c5:	74 17                	je     f01280de <test_kexpand+0x4cc>
f01280c7:	83 ec 04             	sub    $0x4,%esp
f01280ca:	68 60 b4 13 f0       	push   $0xf013b460
f01280cf:	68 63 0b 00 00       	push   $0xb63
f01280d4:	68 7a b3 13 f0       	push   $0xf013b37a
f01280d9:	e8 27 81 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01280de:	e8 e5 bc fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f01280e3:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f01280e6:	74 17                	je     f01280ff <test_kexpand+0x4ed>
f01280e8:	83 ec 04             	sub    $0x4,%esp
f01280eb:	68 94 b3 13 f0       	push   $0xf013b394
f01280f0:	68 64 0b 00 00       	push   $0xb64
f01280f5:	68 7a b3 13 f0       	push   $0xf013b37a
f01280fa:	e8 06 81 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f01280ff:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f0128102:	e8 96 4a fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0128107:	29 c3                	sub    %eax,%ebx
f0128109:	89 d8                	mov    %ebx,%eax
f012810b:	83 f8 01             	cmp    $0x1,%eax
f012810e:	74 17                	je     f0128127 <test_kexpand+0x515>
f0128110:	83 ec 04             	sub    $0x4,%esp
f0128113:	68 fc b3 13 f0       	push   $0xf013b3fc
f0128118:	68 65 0b 00 00       	push   $0xb65
f012811d:	68 7a b3 13 f0       	push   $0xf013b37a
f0128122:	e8 de 80 fd ff       	call   f0100205 <_panic>
		lastIndices[3] = (2*kilo)/sizeof(char) - 1;
f0128127:	c7 85 c8 fe ff ff ff 	movl   $0x7ff,-0x138(%ebp)
f012812e:	07 00 00 
		ptr = (char*)ptr_allocations[3];
f0128131:	8b 85 78 fe ff ff    	mov    -0x188(%ebp),%eax
f0128137:	89 45 8c             	mov    %eax,-0x74(%ebp)
		for (i = 0; i < lastIndices[3]; ++i)
f012813a:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0128141:	eb 0e                	jmp    f0128151 <test_kexpand+0x53f>
		{
			ptr[i] = 3 ;
f0128143:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0128146:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0128149:	01 d0                	add    %edx,%eax
f012814b:	c6 00 03             	movb   $0x3,(%eax)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[3] = (2*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[3];
		for (i = 0; i < lastIndices[3]; ++i)
f012814e:	ff 45 f4             	incl   -0xc(%ebp)
f0128151:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f0128157:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012815a:	7f e7                	jg     f0128143 <test_kexpand+0x531>
		{
			ptr[i] = 3 ;
		}

		//7 KB
		freeFrames = sys_calculate_free_frames() ;
f012815c:	e8 3c 4a fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0128161:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0128164:	e8 5f bc fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0128169:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[4] = kmalloc(7*kilo);
f012816c:	83 ec 0c             	sub    $0xc,%esp
f012816f:	68 00 1c 00 00       	push   $0x1c00
f0128174:	e8 0c f7 fd ff       	call   f0107885 <kmalloc>
f0128179:	83 c4 10             	add    $0x10,%esp
f012817c:	89 85 7c fe ff ff    	mov    %eax,-0x184(%ebp)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0128182:	8b 85 7c fe ff ff    	mov    -0x184(%ebp),%eax
f0128188:	89 c1                	mov    %eax,%ecx
f012818a:	c7 85 70 ff ff ff 00 	movl   $0x1000,-0x90(%ebp)
f0128191:	10 00 00 
f0128194:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f012819a:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012819f:	89 85 6c ff ff ff    	mov    %eax,-0x94(%ebp)
f01281a5:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f01281ab:	ba 00 00 00 00       	mov    $0x0,%edx
f01281b0:	f7 b5 70 ff ff ff    	divl   -0x90(%ebp)
f01281b6:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f01281bc:	29 d0                	sub    %edx,%eax
f01281be:	89 c3                	mov    %eax,%ebx
f01281c0:	c7 85 68 ff ff ff 00 	movl   $0x1000,-0x98(%ebp)
f01281c7:	10 00 00 
f01281ca:	a0 40 26 78 f0       	mov    0xf0782640,%al
f01281cf:	0f b6 d0             	movzbl %al,%edx
f01281d2:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f01281d8:	01 d0                	add    %edx,%eax
f01281da:	48                   	dec    %eax
f01281db:	89 85 64 ff ff ff    	mov    %eax,-0x9c(%ebp)
f01281e1:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f01281e7:	ba 00 00 00 00       	mov    $0x0,%edx
f01281ec:	f7 b5 68 ff ff ff    	divl   -0x98(%ebp)
f01281f2:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f01281f8:	29 d0                	sub    %edx,%eax
f01281fa:	01 c3                	add    %eax,%ebx
f01281fc:	c7 85 60 ff ff ff 00 	movl   $0x1000,-0xa0(%ebp)
f0128203:	10 00 00 
f0128206:	a0 40 26 78 f0       	mov    0xf0782640,%al
f012820b:	0f b6 c0             	movzbl %al,%eax
f012820e:	c1 e0 04             	shl    $0x4,%eax
f0128211:	89 c2                	mov    %eax,%edx
f0128213:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f0128219:	01 d0                	add    %edx,%eax
f012821b:	48                   	dec    %eax
f012821c:	89 85 5c ff ff ff    	mov    %eax,-0xa4(%ebp)
f0128222:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f0128228:	ba 00 00 00 00       	mov    $0x0,%edx
f012822d:	f7 b5 60 ff ff ff    	divl   -0xa0(%ebp)
f0128233:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f0128239:	29 d0                	sub    %edx,%eax
f012823b:	01 d8                	add    %ebx,%eax
f012823d:	2d 00 a0 bf 09       	sub    $0x9bfa000,%eax
f0128242:	39 c1                	cmp    %eax,%ecx
f0128244:	74 17                	je     f012825d <test_kexpand+0x64b>
f0128246:	83 ec 04             	sub    $0x4,%esp
f0128249:	68 60 b4 13 f0       	push   $0xf013b460
f012824e:	68 71 0b 00 00       	push   $0xb71
f0128253:	68 7a b3 13 f0       	push   $0xf013b37a
f0128258:	e8 a8 7f fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012825d:	e8 66 bb fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0128262:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0128265:	74 17                	je     f012827e <test_kexpand+0x66c>
f0128267:	83 ec 04             	sub    $0x4,%esp
f012826a:	68 94 b3 13 f0       	push   $0xf013b394
f012826f:	68 72 0b 00 00       	push   $0xb72
f0128274:	68 7a b3 13 f0       	push   $0xf013b37a
f0128279:	e8 87 7f fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: pages are not loaded successfully into memory");
f012827e:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f0128281:	e8 17 49 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0128286:	29 c3                	sub    %eax,%ebx
f0128288:	89 d8                	mov    %ebx,%eax
f012828a:	83 f8 02             	cmp    $0x2,%eax
f012828d:	74 17                	je     f01282a6 <test_kexpand+0x694>
f012828f:	83 ec 04             	sub    $0x4,%esp
f0128292:	68 fc b3 13 f0       	push   $0xf013b3fc
f0128297:	68 73 0b 00 00       	push   $0xb73
f012829c:	68 7a b3 13 f0       	push   $0xf013b37a
f01282a1:	e8 5f 7f fd ff       	call   f0100205 <_panic>
		lastIndices[4] = (7*kilo)/sizeof(char) - 1;
f01282a6:	c7 85 cc fe ff ff ff 	movl   $0x1bff,-0x134(%ebp)
f01282ad:	1b 00 00 
		ptr = (char*)ptr_allocations[4];
f01282b0:	8b 85 7c fe ff ff    	mov    -0x184(%ebp),%eax
f01282b6:	89 45 8c             	mov    %eax,-0x74(%ebp)
		for (i = 0; i < lastIndices[4]; ++i)
f01282b9:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01282c0:	eb 0e                	jmp    f01282d0 <test_kexpand+0x6be>
		{
			ptr[i] = 4 ;
f01282c2:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01282c5:	8b 45 8c             	mov    -0x74(%ebp),%eax
f01282c8:	01 d0                	add    %edx,%eax
f01282ca:	c6 00 04             	movb   $0x4,(%eax)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[4] = (7*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[4];
		for (i = 0; i < lastIndices[4]; ++i)
f01282cd:	ff 45 f4             	incl   -0xc(%ebp)
f01282d0:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f01282d6:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01282d9:	7f e7                	jg     f01282c2 <test_kexpand+0x6b0>
		{
			ptr[i] = 4 ;
		}

		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f01282db:	e8 bd 48 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f01282e0:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01282e3:	e8 e0 ba fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f01282e8:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[5] = kmalloc(3*Mega-kilo);
f01282eb:	83 ec 0c             	sub    $0xc,%esp
f01282ee:	68 00 fc 2f 00       	push   $0x2ffc00
f01282f3:	e8 8d f5 fd ff       	call   f0107885 <kmalloc>
f01282f8:	83 c4 10             	add    $0x10,%esp
f01282fb:	89 85 80 fe ff ff    	mov    %eax,-0x180(%ebp)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo) ) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0128301:	8b 85 80 fe ff ff    	mov    -0x180(%ebp),%eax
f0128307:	89 c1                	mov    %eax,%ecx
f0128309:	c7 85 58 ff ff ff 00 	movl   $0x1000,-0xa8(%ebp)
f0128310:	10 00 00 
f0128313:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f0128319:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012831e:	89 85 54 ff ff ff    	mov    %eax,-0xac(%ebp)
f0128324:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f012832a:	ba 00 00 00 00       	mov    $0x0,%edx
f012832f:	f7 b5 58 ff ff ff    	divl   -0xa8(%ebp)
f0128335:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f012833b:	29 d0                	sub    %edx,%eax
f012833d:	89 c3                	mov    %eax,%ebx
f012833f:	c7 85 50 ff ff ff 00 	movl   $0x1000,-0xb0(%ebp)
f0128346:	10 00 00 
f0128349:	a0 40 26 78 f0       	mov    0xf0782640,%al
f012834e:	0f b6 d0             	movzbl %al,%edx
f0128351:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f0128357:	01 d0                	add    %edx,%eax
f0128359:	48                   	dec    %eax
f012835a:	89 85 4c ff ff ff    	mov    %eax,-0xb4(%ebp)
f0128360:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0128366:	ba 00 00 00 00       	mov    $0x0,%edx
f012836b:	f7 b5 50 ff ff ff    	divl   -0xb0(%ebp)
f0128371:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0128377:	29 d0                	sub    %edx,%eax
f0128379:	01 c3                	add    %eax,%ebx
f012837b:	c7 85 48 ff ff ff 00 	movl   $0x1000,-0xb8(%ebp)
f0128382:	10 00 00 
f0128385:	a0 40 26 78 f0       	mov    0xf0782640,%al
f012838a:	0f b6 c0             	movzbl %al,%eax
f012838d:	c1 e0 04             	shl    $0x4,%eax
f0128390:	89 c2                	mov    %eax,%edx
f0128392:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f0128398:	01 d0                	add    %edx,%eax
f012839a:	48                   	dec    %eax
f012839b:	89 85 44 ff ff ff    	mov    %eax,-0xbc(%ebp)
f01283a1:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f01283a7:	ba 00 00 00 00       	mov    $0x0,%edx
f01283ac:	f7 b5 48 ff ff ff    	divl   -0xb8(%ebp)
f01283b2:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f01283b8:	29 d0                	sub    %edx,%eax
f01283ba:	01 d8                	add    %ebx,%eax
f01283bc:	2d 00 80 bf 09       	sub    $0x9bf8000,%eax
f01283c1:	39 c1                	cmp    %eax,%ecx
f01283c3:	74 17                	je     f01283dc <test_kexpand+0x7ca>
f01283c5:	83 ec 04             	sub    $0x4,%esp
f01283c8:	68 60 b4 13 f0       	push   $0xf013b460
f01283cd:	68 7f 0b 00 00       	push   $0xb7f
f01283d2:	68 7a b3 13 f0       	push   $0xf013b37a
f01283d7:	e8 29 7e fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01283dc:	e8 e7 b9 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f01283e1:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f01283e4:	74 17                	je     f01283fd <test_kexpand+0x7eb>
f01283e6:	83 ec 04             	sub    $0x4,%esp
f01283e9:	68 94 b3 13 f0       	push   $0xf013b394
f01283ee:	68 80 0b 00 00       	push   $0xb80
f01283f3:	68 7a b3 13 f0       	push   $0xf013b37a
f01283f8:	e8 08 7e fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
f01283fd:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f0128400:	e8 98 47 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0128405:	29 c3                	sub    %eax,%ebx
f0128407:	89 d8                	mov    %ebx,%eax
f0128409:	3d 00 03 00 00       	cmp    $0x300,%eax
f012840e:	74 17                	je     f0128427 <test_kexpand+0x815>
f0128410:	83 ec 04             	sub    $0x4,%esp
f0128413:	68 fc b3 13 f0       	push   $0xf013b3fc
f0128418:	68 81 0b 00 00       	push   $0xb81
f012841d:	68 7a b3 13 f0       	push   $0xf013b37a
f0128422:	e8 de 7d fd ff       	call   f0100205 <_panic>
		lastIndices[5] = (3*Mega-kilo)/sizeof(char) - 1;
f0128427:	c7 85 d0 fe ff ff ff 	movl   $0x2ffbff,-0x130(%ebp)
f012842e:	fb 2f 00 
		ptr = (char*)ptr_allocations[5];
f0128431:	8b 85 80 fe ff ff    	mov    -0x180(%ebp),%eax
f0128437:	89 45 8c             	mov    %eax,-0x74(%ebp)
		for (i = 0; i < lastIndices[5]; ++i)
f012843a:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0128441:	eb 0e                	jmp    f0128451 <test_kexpand+0x83f>
		{
			ptr[i] = 5 ;
f0128443:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0128446:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0128449:	01 d0                	add    %edx,%eax
f012844b:	c6 00 05             	movb   $0x5,(%eax)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo) ) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[5] = (3*Mega-kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[5];
		for (i = 0; i < lastIndices[5]; ++i)
f012844e:	ff 45 f4             	incl   -0xc(%ebp)
f0128451:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f0128457:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012845a:	7f e7                	jg     f0128443 <test_kexpand+0x831>
		{
			ptr[i] = 5 ;
		}

		//6 MB
		freeFrames = sys_calculate_free_frames() ;
f012845c:	e8 3c 47 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0128461:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0128464:	e8 5f b9 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0128469:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[6] = kmalloc(6*Mega);
f012846c:	83 ec 0c             	sub    $0xc,%esp
f012846f:	68 00 00 60 00       	push   $0x600000
f0128474:	e8 0c f4 fd ff       	call   f0107885 <kmalloc>
f0128479:	83 c4 10             	add    $0x10,%esp
f012847c:	89 85 84 fe ff ff    	mov    %eax,-0x17c(%ebp)
		if ((uint32) ptr_allocations[6] != (ACTUAL_START + 7*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0128482:	8b 85 84 fe ff ff    	mov    -0x17c(%ebp),%eax
f0128488:	89 c1                	mov    %eax,%ecx
f012848a:	c7 85 40 ff ff ff 00 	movl   $0x1000,-0xc0(%ebp)
f0128491:	10 00 00 
f0128494:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f012849a:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012849f:	89 85 3c ff ff ff    	mov    %eax,-0xc4(%ebp)
f01284a5:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f01284ab:	ba 00 00 00 00       	mov    $0x0,%edx
f01284b0:	f7 b5 40 ff ff ff    	divl   -0xc0(%ebp)
f01284b6:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f01284bc:	29 d0                	sub    %edx,%eax
f01284be:	89 c3                	mov    %eax,%ebx
f01284c0:	c7 85 38 ff ff ff 00 	movl   $0x1000,-0xc8(%ebp)
f01284c7:	10 00 00 
f01284ca:	a0 40 26 78 f0       	mov    0xf0782640,%al
f01284cf:	0f b6 d0             	movzbl %al,%edx
f01284d2:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f01284d8:	01 d0                	add    %edx,%eax
f01284da:	48                   	dec    %eax
f01284db:	89 85 34 ff ff ff    	mov    %eax,-0xcc(%ebp)
f01284e1:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f01284e7:	ba 00 00 00 00       	mov    $0x0,%edx
f01284ec:	f7 b5 38 ff ff ff    	divl   -0xc8(%ebp)
f01284f2:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f01284f8:	29 d0                	sub    %edx,%eax
f01284fa:	01 c3                	add    %eax,%ebx
f01284fc:	c7 85 30 ff ff ff 00 	movl   $0x1000,-0xd0(%ebp)
f0128503:	10 00 00 
f0128506:	a0 40 26 78 f0       	mov    0xf0782640,%al
f012850b:	0f b6 c0             	movzbl %al,%eax
f012850e:	c1 e0 04             	shl    $0x4,%eax
f0128511:	89 c2                	mov    %eax,%edx
f0128513:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f0128519:	01 d0                	add    %edx,%eax
f012851b:	48                   	dec    %eax
f012851c:	89 85 2c ff ff ff    	mov    %eax,-0xd4(%ebp)
f0128522:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f0128528:	ba 00 00 00 00       	mov    $0x0,%edx
f012852d:	f7 b5 30 ff ff ff    	divl   -0xd0(%ebp)
f0128533:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f0128539:	29 d0                	sub    %edx,%eax
f012853b:	01 d8                	add    %ebx,%eax
f012853d:	2d 00 80 8f 09       	sub    $0x98f8000,%eax
f0128542:	39 c1                	cmp    %eax,%ecx
f0128544:	74 17                	je     f012855d <test_kexpand+0x94b>
f0128546:	83 ec 04             	sub    $0x4,%esp
f0128549:	68 60 b4 13 f0       	push   $0xf013b460
f012854e:	68 8d 0b 00 00       	push   $0xb8d
f0128553:	68 7a b3 13 f0       	push   $0xf013b37a
f0128558:	e8 a8 7c fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012855d:	e8 66 b8 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0128562:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0128565:	74 17                	je     f012857e <test_kexpand+0x96c>
f0128567:	83 ec 04             	sub    $0x4,%esp
f012856a:	68 94 b3 13 f0       	push   $0xf013b394
f012856f:	68 8e 0b 00 00       	push   $0xb8e
f0128574:	68 7a b3 13 f0       	push   $0xf013b37a
f0128579:	e8 87 7c fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1536) panic("Wrong allocation: pages are not loaded successfully into memory");
f012857e:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f0128581:	e8 17 46 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0128586:	29 c3                	sub    %eax,%ebx
f0128588:	89 d8                	mov    %ebx,%eax
f012858a:	3d 00 06 00 00       	cmp    $0x600,%eax
f012858f:	74 17                	je     f01285a8 <test_kexpand+0x996>
f0128591:	83 ec 04             	sub    $0x4,%esp
f0128594:	68 fc b3 13 f0       	push   $0xf013b3fc
f0128599:	68 8f 0b 00 00       	push   $0xb8f
f012859e:	68 7a b3 13 f0       	push   $0xf013b37a
f01285a3:	e8 5d 7c fd ff       	call   f0100205 <_panic>
		lastIndices[6] = (6*Mega)/sizeof(uint32) - 1;
f01285a8:	c7 85 d4 fe ff ff ff 	movl   $0x17ffff,-0x12c(%ebp)
f01285af:	ff 17 00 
		arr = (uint32*)ptr_allocations[6];
f01285b2:	8b 85 84 fe ff ff    	mov    -0x17c(%ebp),%eax
f01285b8:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%ebp)
		for (i = 0; i <= lastIndices[6]; ++i)
f01285be:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01285c5:	eb 1a                	jmp    f01285e1 <test_kexpand+0x9cf>
		{
			arr[i] = i ;
f01285c7:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01285ca:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f01285d1:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f01285d7:	01 c2                	add    %eax,%edx
f01285d9:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01285dc:	89 02                	mov    %eax,(%edx)
		if ((uint32) ptr_allocations[6] != (ACTUAL_START + 7*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 1536) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[6] = (6*Mega)/sizeof(uint32) - 1;
		arr = (uint32*)ptr_allocations[6];
		for (i = 0; i <= lastIndices[6]; ++i)
f01285de:	ff 45 f4             	incl   -0xc(%ebp)
f01285e1:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f01285e7:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01285ea:	7d db                	jge    f01285c7 <test_kexpand+0x9b5>
			arr[i] = i ;
		}
	}

	//Expand last allocated variable to 7 MB instead of 6 MB
	int newLastIndex = (7*Mega)/sizeof(uint32) - 1;
f01285ec:	c7 85 24 ff ff ff ff 	movl   $0x1bffff,-0xdc(%ebp)
f01285f3:	ff 1b 00 
	{
		freeFrames = sys_calculate_free_frames() ;
f01285f6:	e8 a2 45 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f01285fb:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01285fe:	e8 c5 b7 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0128603:	89 45 d8             	mov    %eax,-0x28(%ebp)

		kexpand(7*Mega) ;
f0128606:	83 ec 0c             	sub    $0xc,%esp
f0128609:	68 00 00 70 00       	push   $0x700000
f012860e:	e8 15 f5 fd ff       	call   f0107b28 <kexpand>
f0128613:	83 c4 10             	add    $0x10,%esp

		assert(pf_calculate_free_frames() - freeDiskFrames == 0) ;
f0128616:	e8 ad b7 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012861b:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f012861e:	74 19                	je     f0128639 <test_kexpand+0xa27>
f0128620:	68 14 c1 13 f0       	push   $0xf013c114
f0128625:	68 45 c1 13 f0       	push   $0xf013c145
f012862a:	68 a0 0b 00 00       	push   $0xba0
f012862f:	68 7a b3 13 f0       	push   $0xf013b37a
f0128634:	e8 cc 7b fd ff       	call   f0100205 <_panic>
		assert(freeFrames - sys_calculate_free_frames() == 256) ;
f0128639:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f012863c:	e8 5c 45 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0128641:	29 c3                	sub    %eax,%ebx
f0128643:	89 d8                	mov    %ebx,%eax
f0128645:	3d 00 01 00 00       	cmp    $0x100,%eax
f012864a:	74 19                	je     f0128665 <test_kexpand+0xa53>
f012864c:	68 5c c1 13 f0       	push   $0xf013c15c
f0128651:	68 45 c1 13 f0       	push   $0xf013c145
f0128656:	68 a1 0b 00 00       	push   $0xba1
f012865b:	68 7a b3 13 f0       	push   $0xf013b37a
f0128660:	e8 a0 7b fd ff       	call   f0100205 <_panic>

		for (i = lastIndices[6]; i < newLastIndex ; ++i)
f0128665:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f012866b:	89 45 f4             	mov    %eax,-0xc(%ebp)
f012866e:	eb 1a                	jmp    f012868a <test_kexpand+0xa78>
		{
			arr[i] = i ;
f0128670:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0128673:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f012867a:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f0128680:	01 c2                	add    %eax,%edx
f0128682:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0128685:	89 02                	mov    %eax,(%edx)
		kexpand(7*Mega) ;

		assert(pf_calculate_free_frames() - freeDiskFrames == 0) ;
		assert(freeFrames - sys_calculate_free_frames() == 256) ;

		for (i = lastIndices[6]; i < newLastIndex ; ++i)
f0128687:	ff 45 f4             	incl   -0xc(%ebp)
f012868a:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012868d:	3b 85 24 ff ff ff    	cmp    -0xdc(%ebp),%eax
f0128693:	7c db                	jl     f0128670 <test_kexpand+0xa5e>
		}
	}

	//Access elements after expansion
	{
		for (i = 0; i < newLastIndex ; ++i)
f0128695:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012869c:	eb 37                	jmp    f01286d5 <test_kexpand+0xac3>
		{
			assert(arr[i] ==i);
f012869e:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01286a1:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f01286a8:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f01286ae:	01 d0                	add    %edx,%eax
f01286b0:	8b 10                	mov    (%eax),%edx
f01286b2:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01286b5:	39 c2                	cmp    %eax,%edx
f01286b7:	74 19                	je     f01286d2 <test_kexpand+0xac0>
f01286b9:	68 8c c1 13 f0       	push   $0xf013c18c
f01286be:	68 45 c1 13 f0       	push   $0xf013c145
f01286c3:	68 ad 0b 00 00       	push   $0xbad
f01286c8:	68 7a b3 13 f0       	push   $0xf013b37a
f01286cd:	e8 33 7b fd ff       	call   f0100205 <_panic>
		}
	}

	//Access elements after expansion
	{
		for (i = 0; i < newLastIndex ; ++i)
f01286d2:	ff 45 f4             	incl   -0xc(%ebp)
f01286d5:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01286d8:	3b 85 24 ff ff ff    	cmp    -0xdc(%ebp),%eax
f01286de:	7c be                	jl     f012869e <test_kexpand+0xa8c>
		}
	}

	//Expand it again to 10 MB instead of 7 MB
	{
		freeFrames = sys_calculate_free_frames() ;
f01286e0:	e8 b8 44 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f01286e5:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01286e8:	e8 db b6 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f01286ed:	89 45 d8             	mov    %eax,-0x28(%ebp)

		kexpand(10*Mega) ;
f01286f0:	83 ec 0c             	sub    $0xc,%esp
f01286f3:	68 00 00 a0 00       	push   $0xa00000
f01286f8:	e8 2b f4 fd ff       	call   f0107b28 <kexpand>
f01286fd:	83 c4 10             	add    $0x10,%esp

		assert(pf_calculate_free_frames() - freeDiskFrames == 0) ;
f0128700:	e8 c3 b6 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0128705:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0128708:	74 19                	je     f0128723 <test_kexpand+0xb11>
f012870a:	68 14 c1 13 f0       	push   $0xf013c114
f012870f:	68 45 c1 13 f0       	push   $0xf013c145
f0128714:	68 b8 0b 00 00       	push   $0xbb8
f0128719:	68 7a b3 13 f0       	push   $0xf013b37a
f012871e:	e8 e2 7a fd ff       	call   f0100205 <_panic>
		assert(freeFrames - sys_calculate_free_frames() == 768) ;
f0128723:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f0128726:	e8 72 44 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f012872b:	29 c3                	sub    %eax,%ebx
f012872d:	89 d8                	mov    %ebx,%eax
f012872f:	3d 00 03 00 00       	cmp    $0x300,%eax
f0128734:	74 19                	je     f012874f <test_kexpand+0xb3d>
f0128736:	68 98 c1 13 f0       	push   $0xf013c198
f012873b:	68 45 c1 13 f0       	push   $0xf013c145
f0128740:	68 b9 0b 00 00       	push   $0xbb9
f0128745:	68 7a b3 13 f0       	push   $0xf013b37a
f012874a:	e8 b6 7a fd ff       	call   f0100205 <_panic>


	//Allocate after expanding last var
	{
		//4 MB
		freeFrames = sys_calculate_free_frames() ;
f012874f:	e8 49 44 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0128754:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0128757:	e8 6c b6 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012875c:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[7] = kmalloc(4*Mega);
f012875f:	83 ec 0c             	sub    $0xc,%esp
f0128762:	68 00 00 40 00       	push   $0x400000
f0128767:	e8 19 f1 fd ff       	call   f0107885 <kmalloc>
f012876c:	83 c4 10             	add    $0x10,%esp
f012876f:	89 85 88 fe ff ff    	mov    %eax,-0x178(%ebp)

		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 7*Mega + 16*kilo + 10*Mega)) panic("Wrong start address after kexpand()... ");
f0128775:	8b 85 88 fe ff ff    	mov    -0x178(%ebp),%eax
f012877b:	89 c1                	mov    %eax,%ecx
f012877d:	c7 85 20 ff ff ff 00 	movl   $0x1000,-0xe0(%ebp)
f0128784:	10 00 00 
f0128787:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012878d:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0128792:	89 85 1c ff ff ff    	mov    %eax,-0xe4(%ebp)
f0128798:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f012879e:	ba 00 00 00 00       	mov    $0x0,%edx
f01287a3:	f7 b5 20 ff ff ff    	divl   -0xe0(%ebp)
f01287a9:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f01287af:	29 d0                	sub    %edx,%eax
f01287b1:	89 c3                	mov    %eax,%ebx
f01287b3:	c7 85 18 ff ff ff 00 	movl   $0x1000,-0xe8(%ebp)
f01287ba:	10 00 00 
f01287bd:	a0 40 26 78 f0       	mov    0xf0782640,%al
f01287c2:	0f b6 d0             	movzbl %al,%edx
f01287c5:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f01287cb:	01 d0                	add    %edx,%eax
f01287cd:	48                   	dec    %eax
f01287ce:	89 85 14 ff ff ff    	mov    %eax,-0xec(%ebp)
f01287d4:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f01287da:	ba 00 00 00 00       	mov    $0x0,%edx
f01287df:	f7 b5 18 ff ff ff    	divl   -0xe8(%ebp)
f01287e5:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f01287eb:	29 d0                	sub    %edx,%eax
f01287ed:	01 c3                	add    %eax,%ebx
f01287ef:	c7 85 10 ff ff ff 00 	movl   $0x1000,-0xf0(%ebp)
f01287f6:	10 00 00 
f01287f9:	a0 40 26 78 f0       	mov    0xf0782640,%al
f01287fe:	0f b6 c0             	movzbl %al,%eax
f0128801:	c1 e0 04             	shl    $0x4,%eax
f0128804:	89 c2                	mov    %eax,%edx
f0128806:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f012880c:	01 d0                	add    %edx,%eax
f012880e:	48                   	dec    %eax
f012880f:	89 85 0c ff ff ff    	mov    %eax,-0xf4(%ebp)
f0128815:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f012881b:	ba 00 00 00 00       	mov    $0x0,%edx
f0128820:	f7 b5 10 ff ff ff    	divl   -0xf0(%ebp)
f0128826:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f012882c:	29 d0                	sub    %edx,%eax
f012882e:	01 d8                	add    %ebx,%eax
f0128830:	2d 00 80 ef 08       	sub    $0x8ef8000,%eax
f0128835:	39 c1                	cmp    %eax,%ecx
f0128837:	74 17                	je     f0128850 <test_kexpand+0xc3e>
f0128839:	83 ec 04             	sub    $0x4,%esp
f012883c:	68 c8 c1 13 f0       	push   $0xf013c1c8
f0128841:	68 c4 0b 00 00       	push   $0xbc4
f0128846:	68 7a b3 13 f0       	push   $0xf013b37a
f012884b:	e8 b5 79 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0128850:	e8 73 b5 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0128855:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0128858:	74 17                	je     f0128871 <test_kexpand+0xc5f>
f012885a:	83 ec 04             	sub    $0x4,%esp
f012885d:	68 94 b3 13 f0       	push   $0xf013b394
f0128862:	68 c5 0b 00 00       	push   $0xbc5
f0128867:	68 7a b3 13 f0       	push   $0xf013b37a
f012886c:	e8 94 79 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 4*Mega/PAGE_SIZE) panic("Wrong allocation: pages are not loaded successfully into memory");
f0128871:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f0128874:	e8 24 43 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0128879:	29 c3                	sub    %eax,%ebx
f012887b:	89 d8                	mov    %ebx,%eax
f012887d:	3d 00 04 00 00       	cmp    $0x400,%eax
f0128882:	74 17                	je     f012889b <test_kexpand+0xc89>
f0128884:	83 ec 04             	sub    $0x4,%esp
f0128887:	68 fc b3 13 f0       	push   $0xf013b3fc
f012888c:	68 c6 0b 00 00       	push   $0xbc6
f0128891:	68 7a b3 13 f0       	push   $0xf013b37a
f0128896:	e8 6a 79 fd ff       	call   f0100205 <_panic>
	}

	//kfree the expanded variable
	{
		//kfree 10 MB (expanded)
		freeFrames = sys_calculate_free_frames() ;
f012889b:	e8 fd 42 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f01288a0:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01288a3:	e8 20 b5 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f01288a8:	89 45 d8             	mov    %eax,-0x28(%ebp)
		kfree(ptr_allocations[6]);
f01288ab:	8b 85 84 fe ff ff    	mov    -0x17c(%ebp),%eax
f01288b1:	83 ec 0c             	sub    $0xc,%esp
f01288b4:	50                   	push   %eax
f01288b5:	e8 96 f0 fd ff       	call   f0107950 <kfree>
f01288ba:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01288bd:	e8 06 b5 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f01288c2:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f01288c5:	74 17                	je     f01288de <test_kexpand+0xccc>
f01288c7:	83 ec 04             	sub    $0x4,%esp
f01288ca:	68 94 b3 13 f0       	push   $0xf013b394
f01288cf:	68 cf 0b 00 00       	push   $0xbcf
f01288d4:	68 7a b3 13 f0       	push   $0xf013b37a
f01288d9:	e8 27 79 fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 10*Mega/PAGE_SIZE) panic("Wrong kfree: attempt to kfree a non-existing ptr. It should do nothing");
f01288de:	e8 ba 42 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f01288e3:	89 c2                	mov    %eax,%edx
f01288e5:	8b 45 dc             	mov    -0x24(%ebp),%eax
f01288e8:	29 c2                	sub    %eax,%edx
f01288ea:	89 d0                	mov    %edx,%eax
f01288ec:	3d 00 0a 00 00       	cmp    $0xa00,%eax
f01288f1:	74 17                	je     f012890a <test_kexpand+0xcf8>
f01288f3:	83 ec 04             	sub    $0x4,%esp
f01288f6:	68 2c bc 13 f0       	push   $0xf013bc2c
f01288fb:	68 d0 0b 00 00       	push   $0xbd0
f0128900:	68 7a b3 13 f0       	push   $0xf013b37a
f0128905:	e8 fb 78 fd ff       	call   f0100205 <_panic>
	}

	//Expand last allocated variable to 4 MB + 20 kilo instead of 4 MB
	{
		freeFrames = sys_calculate_free_frames() ;
f012890a:	e8 8e 42 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f012890f:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0128912:	e8 b1 b4 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0128917:	89 45 d8             	mov    %eax,-0x28(%ebp)

		kexpand(4*Mega + 20*kilo) ;
f012891a:	83 ec 0c             	sub    $0xc,%esp
f012891d:	68 00 50 40 00       	push   $0x405000
f0128922:	e8 01 f2 fd ff       	call   f0107b28 <kexpand>
f0128927:	83 c4 10             	add    $0x10,%esp

		assert(pf_calculate_free_frames() - freeDiskFrames == 0) ;
f012892a:	e8 99 b4 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012892f:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0128932:	74 19                	je     f012894d <test_kexpand+0xd3b>
f0128934:	68 14 c1 13 f0       	push   $0xf013c114
f0128939:	68 45 c1 13 f0       	push   $0xf013c145
f012893e:	68 da 0b 00 00       	push   $0xbda
f0128943:	68 7a b3 13 f0       	push   $0xf013b37a
f0128948:	e8 b8 78 fd ff       	call   f0100205 <_panic>
		assert(freeFrames - sys_calculate_free_frames()  == 5) ;
f012894d:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f0128950:	e8 48 42 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0128955:	29 c3                	sub    %eax,%ebx
f0128957:	89 d8                	mov    %ebx,%eax
f0128959:	83 f8 05             	cmp    $0x5,%eax
f012895c:	74 19                	je     f0128977 <test_kexpand+0xd65>
f012895e:	68 f0 c1 13 f0       	push   $0xf013c1f0
f0128963:	68 45 c1 13 f0       	push   $0xf013c145
f0128968:	68 db 0b 00 00       	push   $0xbdb
f012896d:	68 7a b3 13 f0       	push   $0xf013b37a
f0128972:	e8 8e 78 fd ff       	call   f0100205 <_panic>
	}

	cprintf("\nCongratulations!! your modification is run successfully.\n");
f0128977:	83 ec 0c             	sub    $0xc,%esp
f012897a:	68 d8 c0 13 f0       	push   $0xf013c0d8
f012897f:	e8 8a 83 fd ff       	call   f0100d0e <cprintf>
f0128984:	83 c4 10             	add    $0x10,%esp

	return 1;
f0128987:	b8 01 00 00 00       	mov    $0x1,%eax
}
f012898c:	8d 65 f8             	lea    -0x8(%ebp),%esp
f012898f:	5b                   	pop    %ebx
f0128990:	5f                   	pop    %edi
f0128991:	5d                   	pop    %ebp
f0128992:	c3                   	ret    

f0128993 <test_kshrink>:

extern void kshrink(uint32 newSize) ;

int test_kshrink()
{
f0128993:	55                   	push   %ebp
f0128994:	89 e5                	mov    %esp,%ebp
f0128996:	57                   	push   %edi
f0128997:	53                   	push   %ebx
f0128998:	81 ec b0 01 00 00    	sub    $0x1b0,%esp
	char minByte = 1<<7;
f012899e:	c6 45 f3 80          	movb   $0x80,-0xd(%ebp)
	char maxByte = 0x7F;
f01289a2:	c6 45 f2 7f          	movb   $0x7f,-0xe(%ebp)
	short minShort = 1<<15 ;
f01289a6:	66 c7 45 f0 00 80    	movw   $0x8000,-0x10(%ebp)
	short maxShort = 0x7FFF;
f01289ac:	66 c7 45 ee ff 7f    	movw   $0x7fff,-0x12(%ebp)
	int minInt = 1<<31 ;
f01289b2:	c7 45 e8 00 00 00 80 	movl   $0x80000000,-0x18(%ebp)
	int maxInt = 0x7FFFFFFF;
f01289b9:	c7 45 e4 ff ff ff 7f 	movl   $0x7fffffff,-0x1c(%ebp)
	char *byteArr, *byteArr2 ;
	short *shortArr, *shortArr2 ;
	int *intArr;
	struct MyStruct *structArr ;
	int lastIndexOfByte, lastIndexOfByte2, lastIndexOfShort, lastIndexOfShort2, lastIndexOfInt, lastIndexOfStruct;
	int start_freeFrames = sys_calculate_free_frames() ;
f01289c0:	e8 d8 41 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f01289c5:	89 45 e0             	mov    %eax,-0x20(%ebp)

	//malloc some spaces
	int i, freeFrames, freeDiskFrames ;
	char* ptr;
	int lastIndices[20] = {0};
f01289c8:	8d 95 a4 fe ff ff    	lea    -0x15c(%ebp),%edx
f01289ce:	b9 14 00 00 00       	mov    $0x14,%ecx
f01289d3:	b8 00 00 00 00       	mov    $0x0,%eax
f01289d8:	89 d7                	mov    %edx,%edi
f01289da:	f3 ab                	rep stos %eax,%es:(%edi)

	uint32 *arr;
	void* ptr_allocations[20] = {0};
f01289dc:	8d 95 54 fe ff ff    	lea    -0x1ac(%ebp),%edx
f01289e2:	b9 14 00 00 00       	mov    $0x14,%ecx
f01289e7:	b8 00 00 00 00       	mov    $0x0,%eax
f01289ec:	89 d7                	mov    %edx,%edi
f01289ee:	f3 ab                	rep stos %eax,%es:(%edi)
	{
		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f01289f0:	e8 a8 41 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f01289f5:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01289f8:	e8 cb b3 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f01289fd:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[0] = kmalloc(2*Mega-kilo);
f0128a00:	83 ec 0c             	sub    $0xc,%esp
f0128a03:	68 00 fc 1f 00       	push   $0x1ffc00
f0128a08:	e8 78 ee fd ff       	call   f0107885 <kmalloc>
f0128a0d:	83 c4 10             	add    $0x10,%esp
f0128a10:	89 85 54 fe ff ff    	mov    %eax,-0x1ac(%ebp)
		if ((uint32) ptr_allocations[0] !=  (ACTUAL_START)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0128a16:	8b 85 54 fe ff ff    	mov    -0x1ac(%ebp),%eax
f0128a1c:	89 c1                	mov    %eax,%ecx
f0128a1e:	c7 45 d4 00 10 00 00 	movl   $0x1000,-0x2c(%ebp)
f0128a25:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0128a28:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0128a2d:	89 45 d0             	mov    %eax,-0x30(%ebp)
f0128a30:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0128a33:	ba 00 00 00 00       	mov    $0x0,%edx
f0128a38:	f7 75 d4             	divl   -0x2c(%ebp)
f0128a3b:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0128a3e:	29 d0                	sub    %edx,%eax
f0128a40:	89 c3                	mov    %eax,%ebx
f0128a42:	c7 45 cc 00 10 00 00 	movl   $0x1000,-0x34(%ebp)
f0128a49:	a0 40 26 78 f0       	mov    0xf0782640,%al
f0128a4e:	0f b6 d0             	movzbl %al,%edx
f0128a51:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0128a54:	01 d0                	add    %edx,%eax
f0128a56:	48                   	dec    %eax
f0128a57:	89 45 c8             	mov    %eax,-0x38(%ebp)
f0128a5a:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0128a5d:	ba 00 00 00 00       	mov    $0x0,%edx
f0128a62:	f7 75 cc             	divl   -0x34(%ebp)
f0128a65:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0128a68:	29 d0                	sub    %edx,%eax
f0128a6a:	01 c3                	add    %eax,%ebx
f0128a6c:	c7 45 c4 00 10 00 00 	movl   $0x1000,-0x3c(%ebp)
f0128a73:	a0 40 26 78 f0       	mov    0xf0782640,%al
f0128a78:	0f b6 c0             	movzbl %al,%eax
f0128a7b:	c1 e0 04             	shl    $0x4,%eax
f0128a7e:	89 c2                	mov    %eax,%edx
f0128a80:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0128a83:	01 d0                	add    %edx,%eax
f0128a85:	48                   	dec    %eax
f0128a86:	89 45 c0             	mov    %eax,-0x40(%ebp)
f0128a89:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0128a8c:	ba 00 00 00 00       	mov    $0x0,%edx
f0128a91:	f7 75 c4             	divl   -0x3c(%ebp)
f0128a94:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0128a97:	29 d0                	sub    %edx,%eax
f0128a99:	01 d8                	add    %ebx,%eax
f0128a9b:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f0128aa0:	39 c1                	cmp    %eax,%ecx
f0128aa2:	74 17                	je     f0128abb <test_kshrink+0x128>
f0128aa4:	83 ec 04             	sub    $0x4,%esp
f0128aa7:	68 60 b4 13 f0       	push   $0xf013b460
f0128aac:	68 01 0c 00 00       	push   $0xc01
f0128ab1:	68 7a b3 13 f0       	push   $0xf013b37a
f0128ab6:	e8 4a 77 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0128abb:	e8 08 b3 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0128ac0:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0128ac3:	74 17                	je     f0128adc <test_kshrink+0x149>
f0128ac5:	83 ec 04             	sub    $0x4,%esp
f0128ac8:	68 94 b3 13 f0       	push   $0xf013b394
f0128acd:	68 02 0c 00 00       	push   $0xc02
f0128ad2:	68 7a b3 13 f0       	push   $0xf013b37a
f0128ad7:	e8 29 77 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f0128adc:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f0128adf:	e8 b9 40 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0128ae4:	29 c3                	sub    %eax,%ebx
f0128ae6:	89 d8                	mov    %ebx,%eax
f0128ae8:	3d 00 02 00 00       	cmp    $0x200,%eax
f0128aed:	74 17                	je     f0128b06 <test_kshrink+0x173>
f0128aef:	83 ec 04             	sub    $0x4,%esp
f0128af2:	68 fc b3 13 f0       	push   $0xf013b3fc
f0128af7:	68 03 0c 00 00       	push   $0xc03
f0128afc:	68 7a b3 13 f0       	push   $0xf013b37a
f0128b01:	e8 ff 76 fd ff       	call   f0100205 <_panic>
		lastIndices[0] = (2*Mega-kilo)/sizeof(char) - 1;
f0128b06:	c7 85 a4 fe ff ff ff 	movl   $0x1ffbff,-0x15c(%ebp)
f0128b0d:	fb 1f 00 

		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f0128b10:	e8 88 40 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0128b15:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0128b18:	e8 ab b2 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0128b1d:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[1] = kmalloc(2*Mega-kilo);
f0128b20:	83 ec 0c             	sub    $0xc,%esp
f0128b23:	68 00 fc 1f 00       	push   $0x1ffc00
f0128b28:	e8 58 ed fd ff       	call   f0107885 <kmalloc>
f0128b2d:	83 c4 10             	add    $0x10,%esp
f0128b30:	89 85 58 fe ff ff    	mov    %eax,-0x1a8(%ebp)
		if ((uint32) ptr_allocations[1] != (ACTUAL_START + 2*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0128b36:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f0128b3c:	89 c1                	mov    %eax,%ecx
f0128b3e:	c7 45 bc 00 10 00 00 	movl   $0x1000,-0x44(%ebp)
f0128b45:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0128b48:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0128b4d:	89 45 b8             	mov    %eax,-0x48(%ebp)
f0128b50:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0128b53:	ba 00 00 00 00       	mov    $0x0,%edx
f0128b58:	f7 75 bc             	divl   -0x44(%ebp)
f0128b5b:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0128b5e:	29 d0                	sub    %edx,%eax
f0128b60:	89 c3                	mov    %eax,%ebx
f0128b62:	c7 45 b4 00 10 00 00 	movl   $0x1000,-0x4c(%ebp)
f0128b69:	a0 40 26 78 f0       	mov    0xf0782640,%al
f0128b6e:	0f b6 d0             	movzbl %al,%edx
f0128b71:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0128b74:	01 d0                	add    %edx,%eax
f0128b76:	48                   	dec    %eax
f0128b77:	89 45 b0             	mov    %eax,-0x50(%ebp)
f0128b7a:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0128b7d:	ba 00 00 00 00       	mov    $0x0,%edx
f0128b82:	f7 75 b4             	divl   -0x4c(%ebp)
f0128b85:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0128b88:	29 d0                	sub    %edx,%eax
f0128b8a:	01 c3                	add    %eax,%ebx
f0128b8c:	c7 45 ac 00 10 00 00 	movl   $0x1000,-0x54(%ebp)
f0128b93:	a0 40 26 78 f0       	mov    0xf0782640,%al
f0128b98:	0f b6 c0             	movzbl %al,%eax
f0128b9b:	c1 e0 04             	shl    $0x4,%eax
f0128b9e:	89 c2                	mov    %eax,%edx
f0128ba0:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0128ba3:	01 d0                	add    %edx,%eax
f0128ba5:	48                   	dec    %eax
f0128ba6:	89 45 a8             	mov    %eax,-0x58(%ebp)
f0128ba9:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0128bac:	ba 00 00 00 00       	mov    $0x0,%edx
f0128bb1:	f7 75 ac             	divl   -0x54(%ebp)
f0128bb4:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0128bb7:	29 d0                	sub    %edx,%eax
f0128bb9:	01 d8                	add    %ebx,%eax
f0128bbb:	2d 00 c0 df 09       	sub    $0x9dfc000,%eax
f0128bc0:	39 c1                	cmp    %eax,%ecx
f0128bc2:	74 17                	je     f0128bdb <test_kshrink+0x248>
f0128bc4:	83 ec 04             	sub    $0x4,%esp
f0128bc7:	68 60 b4 13 f0       	push   $0xf013b460
f0128bcc:	68 0a 0c 00 00       	push   $0xc0a
f0128bd1:	68 7a b3 13 f0       	push   $0xf013b37a
f0128bd6:	e8 2a 76 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0128bdb:	e8 e8 b1 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0128be0:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0128be3:	74 17                	je     f0128bfc <test_kshrink+0x269>
f0128be5:	83 ec 04             	sub    $0x4,%esp
f0128be8:	68 94 b3 13 f0       	push   $0xf013b394
f0128bed:	68 0b 0c 00 00       	push   $0xc0b
f0128bf2:	68 7a b3 13 f0       	push   $0xf013b37a
f0128bf7:	e8 09 76 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f0128bfc:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f0128bff:	e8 99 3f fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0128c04:	29 c3                	sub    %eax,%ebx
f0128c06:	89 d8                	mov    %ebx,%eax
f0128c08:	3d 00 02 00 00       	cmp    $0x200,%eax
f0128c0d:	74 17                	je     f0128c26 <test_kshrink+0x293>
f0128c0f:	83 ec 04             	sub    $0x4,%esp
f0128c12:	68 fc b3 13 f0       	push   $0xf013b3fc
f0128c17:	68 0c 0c 00 00       	push   $0xc0c
f0128c1c:	68 7a b3 13 f0       	push   $0xf013b37a
f0128c21:	e8 df 75 fd ff       	call   f0100205 <_panic>
		lastIndices[1] = (2*Mega-kilo)/sizeof(char) - 1;
f0128c26:	c7 85 a8 fe ff ff ff 	movl   $0x1ffbff,-0x158(%ebp)
f0128c2d:	fb 1f 00 

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f0128c30:	e8 68 3f fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0128c35:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0128c38:	e8 8b b1 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0128c3d:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[2] = kmalloc(2*kilo);
f0128c40:	83 ec 0c             	sub    $0xc,%esp
f0128c43:	68 00 08 00 00       	push   $0x800
f0128c48:	e8 38 ec fd ff       	call   f0107885 <kmalloc>
f0128c4d:	83 c4 10             	add    $0x10,%esp
f0128c50:	89 85 5c fe ff ff    	mov    %eax,-0x1a4(%ebp)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0128c56:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f0128c5c:	89 c1                	mov    %eax,%ecx
f0128c5e:	c7 45 a4 00 10 00 00 	movl   $0x1000,-0x5c(%ebp)
f0128c65:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0128c68:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0128c6d:	89 45 a0             	mov    %eax,-0x60(%ebp)
f0128c70:	8b 45 a0             	mov    -0x60(%ebp),%eax
f0128c73:	ba 00 00 00 00       	mov    $0x0,%edx
f0128c78:	f7 75 a4             	divl   -0x5c(%ebp)
f0128c7b:	8b 45 a0             	mov    -0x60(%ebp),%eax
f0128c7e:	29 d0                	sub    %edx,%eax
f0128c80:	89 c3                	mov    %eax,%ebx
f0128c82:	c7 45 9c 00 10 00 00 	movl   $0x1000,-0x64(%ebp)
f0128c89:	a0 40 26 78 f0       	mov    0xf0782640,%al
f0128c8e:	0f b6 d0             	movzbl %al,%edx
f0128c91:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0128c94:	01 d0                	add    %edx,%eax
f0128c96:	48                   	dec    %eax
f0128c97:	89 45 98             	mov    %eax,-0x68(%ebp)
f0128c9a:	8b 45 98             	mov    -0x68(%ebp),%eax
f0128c9d:	ba 00 00 00 00       	mov    $0x0,%edx
f0128ca2:	f7 75 9c             	divl   -0x64(%ebp)
f0128ca5:	8b 45 98             	mov    -0x68(%ebp),%eax
f0128ca8:	29 d0                	sub    %edx,%eax
f0128caa:	01 c3                	add    %eax,%ebx
f0128cac:	c7 45 94 00 10 00 00 	movl   $0x1000,-0x6c(%ebp)
f0128cb3:	a0 40 26 78 f0       	mov    0xf0782640,%al
f0128cb8:	0f b6 c0             	movzbl %al,%eax
f0128cbb:	c1 e0 04             	shl    $0x4,%eax
f0128cbe:	89 c2                	mov    %eax,%edx
f0128cc0:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0128cc3:	01 d0                	add    %edx,%eax
f0128cc5:	48                   	dec    %eax
f0128cc6:	89 45 90             	mov    %eax,-0x70(%ebp)
f0128cc9:	8b 45 90             	mov    -0x70(%ebp),%eax
f0128ccc:	ba 00 00 00 00       	mov    $0x0,%edx
f0128cd1:	f7 75 94             	divl   -0x6c(%ebp)
f0128cd4:	8b 45 90             	mov    -0x70(%ebp),%eax
f0128cd7:	29 d0                	sub    %edx,%eax
f0128cd9:	01 d8                	add    %ebx,%eax
f0128cdb:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
f0128ce0:	39 c1                	cmp    %eax,%ecx
f0128ce2:	74 17                	je     f0128cfb <test_kshrink+0x368>
f0128ce4:	83 ec 04             	sub    $0x4,%esp
f0128ce7:	68 60 b4 13 f0       	push   $0xf013b460
f0128cec:	68 13 0c 00 00       	push   $0xc13
f0128cf1:	68 7a b3 13 f0       	push   $0xf013b37a
f0128cf6:	e8 0a 75 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0128cfb:	e8 c8 b0 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0128d00:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0128d03:	74 17                	je     f0128d1c <test_kshrink+0x389>
f0128d05:	83 ec 04             	sub    $0x4,%esp
f0128d08:	68 94 b3 13 f0       	push   $0xf013b394
f0128d0d:	68 14 0c 00 00       	push   $0xc14
f0128d12:	68 7a b3 13 f0       	push   $0xf013b37a
f0128d17:	e8 e9 74 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f0128d1c:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f0128d1f:	e8 79 3e fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0128d24:	29 c3                	sub    %eax,%ebx
f0128d26:	89 d8                	mov    %ebx,%eax
f0128d28:	83 f8 01             	cmp    $0x1,%eax
f0128d2b:	74 17                	je     f0128d44 <test_kshrink+0x3b1>
f0128d2d:	83 ec 04             	sub    $0x4,%esp
f0128d30:	68 fc b3 13 f0       	push   $0xf013b3fc
f0128d35:	68 15 0c 00 00       	push   $0xc15
f0128d3a:	68 7a b3 13 f0       	push   $0xf013b37a
f0128d3f:	e8 c1 74 fd ff       	call   f0100205 <_panic>
		lastIndices[2] = (2*kilo)/sizeof(char) - 1;
f0128d44:	c7 85 ac fe ff ff ff 	movl   $0x7ff,-0x154(%ebp)
f0128d4b:	07 00 00 
		ptr = (char*)ptr_allocations[2];
f0128d4e:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f0128d54:	89 45 8c             	mov    %eax,-0x74(%ebp)
		for (i = 0; i < lastIndices[2]; ++i)
f0128d57:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0128d5e:	eb 0e                	jmp    f0128d6e <test_kshrink+0x3db>
		{
			ptr[i] = 2 ;
f0128d60:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0128d63:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0128d66:	01 d0                	add    %edx,%eax
f0128d68:	c6 00 02             	movb   $0x2,(%eax)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[2] = (2*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[2];
		for (i = 0; i < lastIndices[2]; ++i)
f0128d6b:	ff 45 f4             	incl   -0xc(%ebp)
f0128d6e:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f0128d74:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0128d77:	7f e7                	jg     f0128d60 <test_kshrink+0x3cd>
		{
			ptr[i] = 2 ;
		}

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f0128d79:	e8 1f 3e fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0128d7e:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0128d81:	e8 42 b0 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0128d86:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[3] = kmalloc(2*kilo);
f0128d89:	83 ec 0c             	sub    $0xc,%esp
f0128d8c:	68 00 08 00 00       	push   $0x800
f0128d91:	e8 ef ea fd ff       	call   f0107885 <kmalloc>
f0128d96:	83 c4 10             	add    $0x10,%esp
f0128d99:	89 85 60 fe ff ff    	mov    %eax,-0x1a0(%ebp)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0128d9f:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f0128da5:	89 c1                	mov    %eax,%ecx
f0128da7:	c7 45 88 00 10 00 00 	movl   $0x1000,-0x78(%ebp)
f0128dae:	8b 45 88             	mov    -0x78(%ebp),%eax
f0128db1:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0128db6:	89 45 84             	mov    %eax,-0x7c(%ebp)
f0128db9:	8b 45 84             	mov    -0x7c(%ebp),%eax
f0128dbc:	ba 00 00 00 00       	mov    $0x0,%edx
f0128dc1:	f7 75 88             	divl   -0x78(%ebp)
f0128dc4:	8b 45 84             	mov    -0x7c(%ebp),%eax
f0128dc7:	29 d0                	sub    %edx,%eax
f0128dc9:	89 c3                	mov    %eax,%ebx
f0128dcb:	c7 45 80 00 10 00 00 	movl   $0x1000,-0x80(%ebp)
f0128dd2:	a0 40 26 78 f0       	mov    0xf0782640,%al
f0128dd7:	0f b6 d0             	movzbl %al,%edx
f0128dda:	8b 45 80             	mov    -0x80(%ebp),%eax
f0128ddd:	01 d0                	add    %edx,%eax
f0128ddf:	48                   	dec    %eax
f0128de0:	89 85 7c ff ff ff    	mov    %eax,-0x84(%ebp)
f0128de6:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f0128dec:	ba 00 00 00 00       	mov    $0x0,%edx
f0128df1:	f7 75 80             	divl   -0x80(%ebp)
f0128df4:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f0128dfa:	29 d0                	sub    %edx,%eax
f0128dfc:	01 c3                	add    %eax,%ebx
f0128dfe:	c7 85 78 ff ff ff 00 	movl   $0x1000,-0x88(%ebp)
f0128e05:	10 00 00 
f0128e08:	a0 40 26 78 f0       	mov    0xf0782640,%al
f0128e0d:	0f b6 c0             	movzbl %al,%eax
f0128e10:	c1 e0 04             	shl    $0x4,%eax
f0128e13:	89 c2                	mov    %eax,%edx
f0128e15:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f0128e1b:	01 d0                	add    %edx,%eax
f0128e1d:	48                   	dec    %eax
f0128e1e:	89 85 74 ff ff ff    	mov    %eax,-0x8c(%ebp)
f0128e24:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f0128e2a:	ba 00 00 00 00       	mov    $0x0,%edx
f0128e2f:	f7 b5 78 ff ff ff    	divl   -0x88(%ebp)
f0128e35:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f0128e3b:	29 d0                	sub    %edx,%eax
f0128e3d:	01 d8                	add    %ebx,%eax
f0128e3f:	2d 00 b0 bf 09       	sub    $0x9bfb000,%eax
f0128e44:	39 c1                	cmp    %eax,%ecx
f0128e46:	74 17                	je     f0128e5f <test_kshrink+0x4cc>
f0128e48:	83 ec 04             	sub    $0x4,%esp
f0128e4b:	68 60 b4 13 f0       	push   $0xf013b460
f0128e50:	68 21 0c 00 00       	push   $0xc21
f0128e55:	68 7a b3 13 f0       	push   $0xf013b37a
f0128e5a:	e8 a6 73 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0128e5f:	e8 64 af fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0128e64:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0128e67:	74 17                	je     f0128e80 <test_kshrink+0x4ed>
f0128e69:	83 ec 04             	sub    $0x4,%esp
f0128e6c:	68 94 b3 13 f0       	push   $0xf013b394
f0128e71:	68 22 0c 00 00       	push   $0xc22
f0128e76:	68 7a b3 13 f0       	push   $0xf013b37a
f0128e7b:	e8 85 73 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f0128e80:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f0128e83:	e8 15 3d fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0128e88:	29 c3                	sub    %eax,%ebx
f0128e8a:	89 d8                	mov    %ebx,%eax
f0128e8c:	83 f8 01             	cmp    $0x1,%eax
f0128e8f:	74 17                	je     f0128ea8 <test_kshrink+0x515>
f0128e91:	83 ec 04             	sub    $0x4,%esp
f0128e94:	68 fc b3 13 f0       	push   $0xf013b3fc
f0128e99:	68 23 0c 00 00       	push   $0xc23
f0128e9e:	68 7a b3 13 f0       	push   $0xf013b37a
f0128ea3:	e8 5d 73 fd ff       	call   f0100205 <_panic>
		lastIndices[3] = (2*kilo)/sizeof(char) - 1;
f0128ea8:	c7 85 b0 fe ff ff ff 	movl   $0x7ff,-0x150(%ebp)
f0128eaf:	07 00 00 
		ptr = (char*)ptr_allocations[3];
f0128eb2:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f0128eb8:	89 45 8c             	mov    %eax,-0x74(%ebp)
		for (i = 0; i < lastIndices[3]; ++i)
f0128ebb:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0128ec2:	eb 0e                	jmp    f0128ed2 <test_kshrink+0x53f>
		{
			ptr[i] = 3 ;
f0128ec4:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0128ec7:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0128eca:	01 d0                	add    %edx,%eax
f0128ecc:	c6 00 03             	movb   $0x3,(%eax)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[3] = (2*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[3];
		for (i = 0; i < lastIndices[3]; ++i)
f0128ecf:	ff 45 f4             	incl   -0xc(%ebp)
f0128ed2:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f0128ed8:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0128edb:	7f e7                	jg     f0128ec4 <test_kshrink+0x531>
		{
			ptr[i] = 3 ;
		}

		//7 KB
		freeFrames = sys_calculate_free_frames() ;
f0128edd:	e8 bb 3c fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0128ee2:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0128ee5:	e8 de ae fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0128eea:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[4] = kmalloc(7*kilo);
f0128eed:	83 ec 0c             	sub    $0xc,%esp
f0128ef0:	68 00 1c 00 00       	push   $0x1c00
f0128ef5:	e8 8b e9 fd ff       	call   f0107885 <kmalloc>
f0128efa:	83 c4 10             	add    $0x10,%esp
f0128efd:	89 85 64 fe ff ff    	mov    %eax,-0x19c(%ebp)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0128f03:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f0128f09:	89 c1                	mov    %eax,%ecx
f0128f0b:	c7 85 70 ff ff ff 00 	movl   $0x1000,-0x90(%ebp)
f0128f12:	10 00 00 
f0128f15:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f0128f1b:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0128f20:	89 85 6c ff ff ff    	mov    %eax,-0x94(%ebp)
f0128f26:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f0128f2c:	ba 00 00 00 00       	mov    $0x0,%edx
f0128f31:	f7 b5 70 ff ff ff    	divl   -0x90(%ebp)
f0128f37:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f0128f3d:	29 d0                	sub    %edx,%eax
f0128f3f:	89 c3                	mov    %eax,%ebx
f0128f41:	c7 85 68 ff ff ff 00 	movl   $0x1000,-0x98(%ebp)
f0128f48:	10 00 00 
f0128f4b:	a0 40 26 78 f0       	mov    0xf0782640,%al
f0128f50:	0f b6 d0             	movzbl %al,%edx
f0128f53:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f0128f59:	01 d0                	add    %edx,%eax
f0128f5b:	48                   	dec    %eax
f0128f5c:	89 85 64 ff ff ff    	mov    %eax,-0x9c(%ebp)
f0128f62:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f0128f68:	ba 00 00 00 00       	mov    $0x0,%edx
f0128f6d:	f7 b5 68 ff ff ff    	divl   -0x98(%ebp)
f0128f73:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f0128f79:	29 d0                	sub    %edx,%eax
f0128f7b:	01 c3                	add    %eax,%ebx
f0128f7d:	c7 85 60 ff ff ff 00 	movl   $0x1000,-0xa0(%ebp)
f0128f84:	10 00 00 
f0128f87:	a0 40 26 78 f0       	mov    0xf0782640,%al
f0128f8c:	0f b6 c0             	movzbl %al,%eax
f0128f8f:	c1 e0 04             	shl    $0x4,%eax
f0128f92:	89 c2                	mov    %eax,%edx
f0128f94:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f0128f9a:	01 d0                	add    %edx,%eax
f0128f9c:	48                   	dec    %eax
f0128f9d:	89 85 5c ff ff ff    	mov    %eax,-0xa4(%ebp)
f0128fa3:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f0128fa9:	ba 00 00 00 00       	mov    $0x0,%edx
f0128fae:	f7 b5 60 ff ff ff    	divl   -0xa0(%ebp)
f0128fb4:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f0128fba:	29 d0                	sub    %edx,%eax
f0128fbc:	01 d8                	add    %ebx,%eax
f0128fbe:	2d 00 a0 bf 09       	sub    $0x9bfa000,%eax
f0128fc3:	39 c1                	cmp    %eax,%ecx
f0128fc5:	74 17                	je     f0128fde <test_kshrink+0x64b>
f0128fc7:	83 ec 04             	sub    $0x4,%esp
f0128fca:	68 60 b4 13 f0       	push   $0xf013b460
f0128fcf:	68 2f 0c 00 00       	push   $0xc2f
f0128fd4:	68 7a b3 13 f0       	push   $0xf013b37a
f0128fd9:	e8 27 72 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0128fde:	e8 e5 ad fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0128fe3:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0128fe6:	74 17                	je     f0128fff <test_kshrink+0x66c>
f0128fe8:	83 ec 04             	sub    $0x4,%esp
f0128feb:	68 94 b3 13 f0       	push   $0xf013b394
f0128ff0:	68 30 0c 00 00       	push   $0xc30
f0128ff5:	68 7a b3 13 f0       	push   $0xf013b37a
f0128ffa:	e8 06 72 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: pages are not loaded successfully into memory");
f0128fff:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f0129002:	e8 96 3b fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0129007:	29 c3                	sub    %eax,%ebx
f0129009:	89 d8                	mov    %ebx,%eax
f012900b:	83 f8 02             	cmp    $0x2,%eax
f012900e:	74 17                	je     f0129027 <test_kshrink+0x694>
f0129010:	83 ec 04             	sub    $0x4,%esp
f0129013:	68 fc b3 13 f0       	push   $0xf013b3fc
f0129018:	68 31 0c 00 00       	push   $0xc31
f012901d:	68 7a b3 13 f0       	push   $0xf013b37a
f0129022:	e8 de 71 fd ff       	call   f0100205 <_panic>
		lastIndices[4] = (7*kilo)/sizeof(char) - 1;
f0129027:	c7 85 b4 fe ff ff ff 	movl   $0x1bff,-0x14c(%ebp)
f012902e:	1b 00 00 
		ptr = (char*)ptr_allocations[4];
f0129031:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f0129037:	89 45 8c             	mov    %eax,-0x74(%ebp)
		for (i = 0; i < lastIndices[4]; ++i)
f012903a:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0129041:	eb 0e                	jmp    f0129051 <test_kshrink+0x6be>
		{
			ptr[i] = 4 ;
f0129043:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0129046:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0129049:	01 d0                	add    %edx,%eax
f012904b:	c6 00 04             	movb   $0x4,(%eax)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[4] = (7*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[4];
		for (i = 0; i < lastIndices[4]; ++i)
f012904e:	ff 45 f4             	incl   -0xc(%ebp)
f0129051:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f0129057:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012905a:	7f e7                	jg     f0129043 <test_kshrink+0x6b0>
		{
			ptr[i] = 4 ;
		}

		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f012905c:	e8 3c 3b fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0129061:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0129064:	e8 5f ad fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0129069:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[5] = kmalloc(3*Mega-kilo);
f012906c:	83 ec 0c             	sub    $0xc,%esp
f012906f:	68 00 fc 2f 00       	push   $0x2ffc00
f0129074:	e8 0c e8 fd ff       	call   f0107885 <kmalloc>
f0129079:	83 c4 10             	add    $0x10,%esp
f012907c:	89 85 68 fe ff ff    	mov    %eax,-0x198(%ebp)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo) ) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0129082:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f0129088:	89 c1                	mov    %eax,%ecx
f012908a:	c7 85 58 ff ff ff 00 	movl   $0x1000,-0xa8(%ebp)
f0129091:	10 00 00 
f0129094:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f012909a:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012909f:	89 85 54 ff ff ff    	mov    %eax,-0xac(%ebp)
f01290a5:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f01290ab:	ba 00 00 00 00       	mov    $0x0,%edx
f01290b0:	f7 b5 58 ff ff ff    	divl   -0xa8(%ebp)
f01290b6:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f01290bc:	29 d0                	sub    %edx,%eax
f01290be:	89 c3                	mov    %eax,%ebx
f01290c0:	c7 85 50 ff ff ff 00 	movl   $0x1000,-0xb0(%ebp)
f01290c7:	10 00 00 
f01290ca:	a0 40 26 78 f0       	mov    0xf0782640,%al
f01290cf:	0f b6 d0             	movzbl %al,%edx
f01290d2:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f01290d8:	01 d0                	add    %edx,%eax
f01290da:	48                   	dec    %eax
f01290db:	89 85 4c ff ff ff    	mov    %eax,-0xb4(%ebp)
f01290e1:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f01290e7:	ba 00 00 00 00       	mov    $0x0,%edx
f01290ec:	f7 b5 50 ff ff ff    	divl   -0xb0(%ebp)
f01290f2:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f01290f8:	29 d0                	sub    %edx,%eax
f01290fa:	01 c3                	add    %eax,%ebx
f01290fc:	c7 85 48 ff ff ff 00 	movl   $0x1000,-0xb8(%ebp)
f0129103:	10 00 00 
f0129106:	a0 40 26 78 f0       	mov    0xf0782640,%al
f012910b:	0f b6 c0             	movzbl %al,%eax
f012910e:	c1 e0 04             	shl    $0x4,%eax
f0129111:	89 c2                	mov    %eax,%edx
f0129113:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f0129119:	01 d0                	add    %edx,%eax
f012911b:	48                   	dec    %eax
f012911c:	89 85 44 ff ff ff    	mov    %eax,-0xbc(%ebp)
f0129122:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0129128:	ba 00 00 00 00       	mov    $0x0,%edx
f012912d:	f7 b5 48 ff ff ff    	divl   -0xb8(%ebp)
f0129133:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0129139:	29 d0                	sub    %edx,%eax
f012913b:	01 d8                	add    %ebx,%eax
f012913d:	2d 00 80 bf 09       	sub    $0x9bf8000,%eax
f0129142:	39 c1                	cmp    %eax,%ecx
f0129144:	74 17                	je     f012915d <test_kshrink+0x7ca>
f0129146:	83 ec 04             	sub    $0x4,%esp
f0129149:	68 60 b4 13 f0       	push   $0xf013b460
f012914e:	68 3d 0c 00 00       	push   $0xc3d
f0129153:	68 7a b3 13 f0       	push   $0xf013b37a
f0129158:	e8 a8 70 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012915d:	e8 66 ac fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0129162:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0129165:	74 17                	je     f012917e <test_kshrink+0x7eb>
f0129167:	83 ec 04             	sub    $0x4,%esp
f012916a:	68 94 b3 13 f0       	push   $0xf013b394
f012916f:	68 3e 0c 00 00       	push   $0xc3e
f0129174:	68 7a b3 13 f0       	push   $0xf013b37a
f0129179:	e8 87 70 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
f012917e:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f0129181:	e8 17 3a fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0129186:	29 c3                	sub    %eax,%ebx
f0129188:	89 d8                	mov    %ebx,%eax
f012918a:	3d 00 03 00 00       	cmp    $0x300,%eax
f012918f:	74 17                	je     f01291a8 <test_kshrink+0x815>
f0129191:	83 ec 04             	sub    $0x4,%esp
f0129194:	68 fc b3 13 f0       	push   $0xf013b3fc
f0129199:	68 3f 0c 00 00       	push   $0xc3f
f012919e:	68 7a b3 13 f0       	push   $0xf013b37a
f01291a3:	e8 5d 70 fd ff       	call   f0100205 <_panic>
		lastIndices[5] = (3*Mega-kilo)/sizeof(char) - 1;
f01291a8:	c7 85 b8 fe ff ff ff 	movl   $0x2ffbff,-0x148(%ebp)
f01291af:	fb 2f 00 
		ptr = (char*)ptr_allocations[5];
f01291b2:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f01291b8:	89 45 8c             	mov    %eax,-0x74(%ebp)
		for (i = 0; i < lastIndices[5]; ++i)
f01291bb:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01291c2:	eb 0e                	jmp    f01291d2 <test_kshrink+0x83f>
		{
			ptr[i] = 5 ;
f01291c4:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01291c7:	8b 45 8c             	mov    -0x74(%ebp),%eax
f01291ca:	01 d0                	add    %edx,%eax
f01291cc:	c6 00 05             	movb   $0x5,(%eax)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo) ) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[5] = (3*Mega-kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[5];
		for (i = 0; i < lastIndices[5]; ++i)
f01291cf:	ff 45 f4             	incl   -0xc(%ebp)
f01291d2:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f01291d8:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01291db:	7f e7                	jg     f01291c4 <test_kshrink+0x831>
		{
			ptr[i] = 5 ;
		}

		//6 MB
		freeFrames = sys_calculate_free_frames() ;
f01291dd:	e8 bb 39 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f01291e2:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01291e5:	e8 de ab fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f01291ea:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[6] = kmalloc(6*Mega);
f01291ed:	83 ec 0c             	sub    $0xc,%esp
f01291f0:	68 00 00 60 00       	push   $0x600000
f01291f5:	e8 8b e6 fd ff       	call   f0107885 <kmalloc>
f01291fa:	83 c4 10             	add    $0x10,%esp
f01291fd:	89 85 6c fe ff ff    	mov    %eax,-0x194(%ebp)
		if ((uint32) ptr_allocations[6] != (ACTUAL_START + 7*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0129203:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f0129209:	89 c1                	mov    %eax,%ecx
f012920b:	c7 85 40 ff ff ff 00 	movl   $0x1000,-0xc0(%ebp)
f0129212:	10 00 00 
f0129215:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f012921b:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0129220:	89 85 3c ff ff ff    	mov    %eax,-0xc4(%ebp)
f0129226:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f012922c:	ba 00 00 00 00       	mov    $0x0,%edx
f0129231:	f7 b5 40 ff ff ff    	divl   -0xc0(%ebp)
f0129237:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f012923d:	29 d0                	sub    %edx,%eax
f012923f:	89 c3                	mov    %eax,%ebx
f0129241:	c7 85 38 ff ff ff 00 	movl   $0x1000,-0xc8(%ebp)
f0129248:	10 00 00 
f012924b:	a0 40 26 78 f0       	mov    0xf0782640,%al
f0129250:	0f b6 d0             	movzbl %al,%edx
f0129253:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f0129259:	01 d0                	add    %edx,%eax
f012925b:	48                   	dec    %eax
f012925c:	89 85 34 ff ff ff    	mov    %eax,-0xcc(%ebp)
f0129262:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f0129268:	ba 00 00 00 00       	mov    $0x0,%edx
f012926d:	f7 b5 38 ff ff ff    	divl   -0xc8(%ebp)
f0129273:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f0129279:	29 d0                	sub    %edx,%eax
f012927b:	01 c3                	add    %eax,%ebx
f012927d:	c7 85 30 ff ff ff 00 	movl   $0x1000,-0xd0(%ebp)
f0129284:	10 00 00 
f0129287:	a0 40 26 78 f0       	mov    0xf0782640,%al
f012928c:	0f b6 c0             	movzbl %al,%eax
f012928f:	c1 e0 04             	shl    $0x4,%eax
f0129292:	89 c2                	mov    %eax,%edx
f0129294:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f012929a:	01 d0                	add    %edx,%eax
f012929c:	48                   	dec    %eax
f012929d:	89 85 2c ff ff ff    	mov    %eax,-0xd4(%ebp)
f01292a3:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f01292a9:	ba 00 00 00 00       	mov    $0x0,%edx
f01292ae:	f7 b5 30 ff ff ff    	divl   -0xd0(%ebp)
f01292b4:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f01292ba:	29 d0                	sub    %edx,%eax
f01292bc:	01 d8                	add    %ebx,%eax
f01292be:	2d 00 80 8f 09       	sub    $0x98f8000,%eax
f01292c3:	39 c1                	cmp    %eax,%ecx
f01292c5:	74 17                	je     f01292de <test_kshrink+0x94b>
f01292c7:	83 ec 04             	sub    $0x4,%esp
f01292ca:	68 60 b4 13 f0       	push   $0xf013b460
f01292cf:	68 4b 0c 00 00       	push   $0xc4b
f01292d4:	68 7a b3 13 f0       	push   $0xf013b37a
f01292d9:	e8 27 6f fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01292de:	e8 e5 aa fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f01292e3:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f01292e6:	74 17                	je     f01292ff <test_kshrink+0x96c>
f01292e8:	83 ec 04             	sub    $0x4,%esp
f01292eb:	68 94 b3 13 f0       	push   $0xf013b394
f01292f0:	68 4c 0c 00 00       	push   $0xc4c
f01292f5:	68 7a b3 13 f0       	push   $0xf013b37a
f01292fa:	e8 06 6f fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1536) panic("Wrong allocation: pages are not loaded successfully into memory");
f01292ff:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f0129302:	e8 96 38 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0129307:	29 c3                	sub    %eax,%ebx
f0129309:	89 d8                	mov    %ebx,%eax
f012930b:	3d 00 06 00 00       	cmp    $0x600,%eax
f0129310:	74 17                	je     f0129329 <test_kshrink+0x996>
f0129312:	83 ec 04             	sub    $0x4,%esp
f0129315:	68 fc b3 13 f0       	push   $0xf013b3fc
f012931a:	68 4d 0c 00 00       	push   $0xc4d
f012931f:	68 7a b3 13 f0       	push   $0xf013b37a
f0129324:	e8 dc 6e fd ff       	call   f0100205 <_panic>
		lastIndices[6] = (6*Mega)/sizeof(uint32) - 1;
f0129329:	c7 85 bc fe ff ff ff 	movl   $0x17ffff,-0x144(%ebp)
f0129330:	ff 17 00 
		arr = (uint32*)ptr_allocations[6];
f0129333:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f0129339:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%ebp)
		for (i = 0; i <= lastIndices[6]; ++i)
f012933f:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0129346:	eb 1a                	jmp    f0129362 <test_kshrink+0x9cf>
		{
			arr[i] = i ;
f0129348:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012934b:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0129352:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f0129358:	01 c2                	add    %eax,%edx
f012935a:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012935d:	89 02                	mov    %eax,(%edx)
		if ((uint32) ptr_allocations[6] != (ACTUAL_START + 7*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 1536) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[6] = (6*Mega)/sizeof(uint32) - 1;
		arr = (uint32*)ptr_allocations[6];
		for (i = 0; i <= lastIndices[6]; ++i)
f012935f:	ff 45 f4             	incl   -0xc(%ebp)
f0129362:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f0129368:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012936b:	7d db                	jge    f0129348 <test_kshrink+0x9b5>
		}
	}

	//Shrink last allocated variable to 5 MB instead of 6 MB
	{
		freeFrames = sys_calculate_free_frames() ;
f012936d:	e8 2b 38 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0129372:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0129375:	e8 4e aa fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012937a:	89 45 d8             	mov    %eax,-0x28(%ebp)

		kshrink(5*Mega) ;
f012937d:	83 ec 0c             	sub    $0xc,%esp
f0129380:	68 00 00 50 00       	push   $0x500000
f0129385:	e8 81 e7 fd ff       	call   f0107b0b <kshrink>
f012938a:	83 c4 10             	add    $0x10,%esp

		assert(pf_calculate_free_frames() - freeDiskFrames == 0) ;
f012938d:	e8 36 aa fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0129392:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0129395:	74 19                	je     f01293b0 <test_kshrink+0xa1d>
f0129397:	68 14 c1 13 f0       	push   $0xf013c114
f012939c:	68 45 c1 13 f0       	push   $0xf013c145
f01293a1:	68 5d 0c 00 00       	push   $0xc5d
f01293a6:	68 7a b3 13 f0       	push   $0xf013b37a
f01293ab:	e8 55 6e fd ff       	call   f0100205 <_panic>
		assert(sys_calculate_free_frames() - freeFrames == 256) ;
f01293b0:	e8 e8 37 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f01293b5:	89 c2                	mov    %eax,%edx
f01293b7:	8b 45 dc             	mov    -0x24(%ebp),%eax
f01293ba:	29 c2                	sub    %eax,%edx
f01293bc:	89 d0                	mov    %edx,%eax
f01293be:	3d 00 01 00 00       	cmp    $0x100,%eax
f01293c3:	74 19                	je     f01293de <test_kshrink+0xa4b>
f01293c5:	68 20 c2 13 f0       	push   $0xf013c220
f01293ca:	68 45 c1 13 f0       	push   $0xf013c145
f01293cf:	68 5e 0c 00 00       	push   $0xc5e
f01293d4:	68 7a b3 13 f0       	push   $0xf013b37a
f01293d9:	e8 27 6e fd ff       	call   f0100205 <_panic>
	}

	//Access elements after shrink
	int newLastIndex = (5*Mega)/sizeof(uint32) - 1;
f01293de:	c7 85 24 ff ff ff ff 	movl   $0x13ffff,-0xdc(%ebp)
f01293e5:	ff 13 00 
	{
		for (i = 0; i <= newLastIndex ; ++i)
f01293e8:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01293ef:	eb 37                	jmp    f0129428 <test_kshrink+0xa95>
		{
			assert(arr[i] == i);
f01293f1:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01293f4:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f01293fb:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f0129401:	01 d0                	add    %edx,%eax
f0129403:	8b 10                	mov    (%eax),%edx
f0129405:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0129408:	39 c2                	cmp    %eax,%edx
f012940a:	74 19                	je     f0129425 <test_kshrink+0xa92>
f012940c:	68 50 c2 13 f0       	push   $0xf013c250
f0129411:	68 45 c1 13 f0       	push   $0xf013c145
f0129416:	68 66 0c 00 00       	push   $0xc66
f012941b:	68 7a b3 13 f0       	push   $0xf013b37a
f0129420:	e8 e0 6d fd ff       	call   f0100205 <_panic>
	}

	//Access elements after shrink
	int newLastIndex = (5*Mega)/sizeof(uint32) - 1;
	{
		for (i = 0; i <= newLastIndex ; ++i)
f0129425:	ff 45 f4             	incl   -0xc(%ebp)
f0129428:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012942b:	3b 85 24 ff ff ff    	cmp    -0xdc(%ebp),%eax
f0129431:	7e be                	jle    f01293f1 <test_kshrink+0xa5e>
			assert(arr[i] == i);
		}

		//Bypass the PAGE FAULT on <MOVB immediate, reg> instruction by setting its length
		//and continue executing the remaining code
		sys_bypassPageFault(3);
f0129433:	83 ec 0c             	sub    $0xc,%esp
f0129436:	6a 03                	push   $0x3
f0129438:	e8 00 3c fe ff       	call   f010d03d <sys_bypassPageFault>
f012943d:	83 c4 10             	add    $0x10,%esp

		ptr = (char *) ptr_allocations[6];
f0129440:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f0129446:	89 45 8c             	mov    %eax,-0x74(%ebp)
		ptr[5*Mega] = 10;
f0129449:	8b 45 8c             	mov    -0x74(%ebp),%eax
f012944c:	05 00 00 50 00       	add    $0x500000,%eax
f0129451:	c6 00 0a             	movb   $0xa,(%eax)
		assert(sys_rcr2() == (uint32)&(ptr[5*Mega])) ;
f0129454:	e8 d2 3b fe ff       	call   f010d02b <sys_rcr2>
f0129459:	8b 55 8c             	mov    -0x74(%ebp),%edx
f012945c:	81 c2 00 00 50 00    	add    $0x500000,%edx
f0129462:	39 d0                	cmp    %edx,%eax
f0129464:	74 19                	je     f012947f <test_kshrink+0xaec>
f0129466:	68 5c c2 13 f0       	push   $0xf013c25c
f012946b:	68 45 c1 13 f0       	push   $0xf013c145
f0129470:	68 6f 0c 00 00       	push   $0xc6f
f0129475:	68 7a b3 13 f0       	push   $0xf013b37a
f012947a:	e8 86 6d fd ff       	call   f0100205 <_panic>

		ptr[5*Mega+4*kilo] = 10;
f012947f:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0129482:	05 00 10 50 00       	add    $0x501000,%eax
f0129487:	c6 00 0a             	movb   $0xa,(%eax)
		assert(sys_rcr2() == (uint32)&(ptr[5*Mega+4*kilo])) ;
f012948a:	e8 9c 3b fe ff       	call   f010d02b <sys_rcr2>
f012948f:	8b 55 8c             	mov    -0x74(%ebp),%edx
f0129492:	81 c2 00 10 50 00    	add    $0x501000,%edx
f0129498:	39 d0                	cmp    %edx,%eax
f012949a:	74 19                	je     f01294b5 <test_kshrink+0xb22>
f012949c:	68 84 c2 13 f0       	push   $0xf013c284
f01294a1:	68 45 c1 13 f0       	push   $0xf013c145
f01294a6:	68 72 0c 00 00       	push   $0xc72
f01294ab:	68 7a b3 13 f0       	push   $0xf013b37a
f01294b0:	e8 50 6d fd ff       	call   f0100205 <_panic>

		ptr[6*Mega - kilo] = 10;
f01294b5:	8b 45 8c             	mov    -0x74(%ebp),%eax
f01294b8:	05 00 fc 5f 00       	add    $0x5ffc00,%eax
f01294bd:	c6 00 0a             	movb   $0xa,(%eax)
		assert(sys_rcr2() == (uint32)&(ptr[6*Mega - kilo])) ;
f01294c0:	e8 66 3b fe ff       	call   f010d02b <sys_rcr2>
f01294c5:	8b 55 8c             	mov    -0x74(%ebp),%edx
f01294c8:	81 c2 00 fc 5f 00    	add    $0x5ffc00,%edx
f01294ce:	39 d0                	cmp    %edx,%eax
f01294d0:	74 19                	je     f01294eb <test_kshrink+0xb58>
f01294d2:	68 b0 c2 13 f0       	push   $0xf013c2b0
f01294d7:	68 45 c1 13 f0       	push   $0xf013c145
f01294dc:	68 75 0c 00 00       	push   $0xc75
f01294e1:	68 7a b3 13 f0       	push   $0xf013b37a
f01294e6:	e8 1a 6d fd ff       	call   f0100205 <_panic>

		//set it to 0 again to cancel the bypassing option
		sys_bypassPageFault(0);
f01294eb:	83 ec 0c             	sub    $0xc,%esp
f01294ee:	6a 00                	push   $0x0
f01294f0:	e8 48 3b fe ff       	call   f010d03d <sys_bypassPageFault>
f01294f5:	83 c4 10             	add    $0x10,%esp
	}

	//Shrink it again to 2 MB instead of 5 MB
	{
		freeFrames = sys_calculate_free_frames() ;
f01294f8:	e8 a0 36 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f01294fd:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0129500:	e8 c3 a8 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0129505:	89 45 d8             	mov    %eax,-0x28(%ebp)

		kshrink(2*Mega) ;
f0129508:	83 ec 0c             	sub    $0xc,%esp
f012950b:	68 00 00 20 00       	push   $0x200000
f0129510:	e8 f6 e5 fd ff       	call   f0107b0b <kshrink>
f0129515:	83 c4 10             	add    $0x10,%esp

		assert(pf_calculate_free_frames() - freeDiskFrames == 0) ;
f0129518:	e8 ab a8 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012951d:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0129520:	74 19                	je     f012953b <test_kshrink+0xba8>
f0129522:	68 14 c1 13 f0       	push   $0xf013c114
f0129527:	68 45 c1 13 f0       	push   $0xf013c145
f012952c:	68 82 0c 00 00       	push   $0xc82
f0129531:	68 7a b3 13 f0       	push   $0xf013b37a
f0129536:	e8 ca 6c fd ff       	call   f0100205 <_panic>
		assert(sys_calculate_free_frames() - freeFrames == 768) ;
f012953b:	e8 5d 36 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0129540:	89 c2                	mov    %eax,%edx
f0129542:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0129545:	29 c2                	sub    %eax,%edx
f0129547:	89 d0                	mov    %edx,%eax
f0129549:	3d 00 03 00 00       	cmp    $0x300,%eax
f012954e:	74 19                	je     f0129569 <test_kshrink+0xbd6>
f0129550:	68 dc c2 13 f0       	push   $0xf013c2dc
f0129555:	68 45 c1 13 f0       	push   $0xf013c145
f012955a:	68 83 0c 00 00       	push   $0xc83
f012955f:	68 7a b3 13 f0       	push   $0xf013b37a
f0129564:	e8 9c 6c fd ff       	call   f0100205 <_panic>


	//Allocate after shrinking last var
	{
		//4 MB
		freeFrames = sys_calculate_free_frames() ;
f0129569:	e8 2f 36 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f012956e:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0129571:	e8 52 a8 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0129576:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[7] = kmalloc(4*Mega);
f0129579:	83 ec 0c             	sub    $0xc,%esp
f012957c:	68 00 00 40 00       	push   $0x400000
f0129581:	e8 ff e2 fd ff       	call   f0107885 <kmalloc>
f0129586:	83 c4 10             	add    $0x10,%esp
f0129589:	89 85 70 fe ff ff    	mov    %eax,-0x190(%ebp)
		cprintf("ACTUAL = %x, DESIRED = %x\n", (uint32) ptr_allocations[7] ,(ACTUAL_START + 7*Mega + 16*kilo + 2*Mega));
f012958f:	c7 85 20 ff ff ff 00 	movl   $0x1000,-0xe0(%ebp)
f0129596:	10 00 00 
f0129599:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012959f:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01295a4:	89 85 1c ff ff ff    	mov    %eax,-0xe4(%ebp)
f01295aa:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f01295b0:	ba 00 00 00 00       	mov    $0x0,%edx
f01295b5:	f7 b5 20 ff ff ff    	divl   -0xe0(%ebp)
f01295bb:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f01295c1:	29 d0                	sub    %edx,%eax
f01295c3:	89 c1                	mov    %eax,%ecx
f01295c5:	c7 85 18 ff ff ff 00 	movl   $0x1000,-0xe8(%ebp)
f01295cc:	10 00 00 
f01295cf:	a0 40 26 78 f0       	mov    0xf0782640,%al
f01295d4:	0f b6 d0             	movzbl %al,%edx
f01295d7:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f01295dd:	01 d0                	add    %edx,%eax
f01295df:	48                   	dec    %eax
f01295e0:	89 85 14 ff ff ff    	mov    %eax,-0xec(%ebp)
f01295e6:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f01295ec:	ba 00 00 00 00       	mov    $0x0,%edx
f01295f1:	f7 b5 18 ff ff ff    	divl   -0xe8(%ebp)
f01295f7:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f01295fd:	29 d0                	sub    %edx,%eax
f01295ff:	01 c1                	add    %eax,%ecx
f0129601:	c7 85 10 ff ff ff 00 	movl   $0x1000,-0xf0(%ebp)
f0129608:	10 00 00 
f012960b:	a0 40 26 78 f0       	mov    0xf0782640,%al
f0129610:	0f b6 c0             	movzbl %al,%eax
f0129613:	c1 e0 04             	shl    $0x4,%eax
f0129616:	89 c2                	mov    %eax,%edx
f0129618:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f012961e:	01 d0                	add    %edx,%eax
f0129620:	48                   	dec    %eax
f0129621:	89 85 0c ff ff ff    	mov    %eax,-0xf4(%ebp)
f0129627:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f012962d:	ba 00 00 00 00       	mov    $0x0,%edx
f0129632:	f7 b5 10 ff ff ff    	divl   -0xf0(%ebp)
f0129638:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f012963e:	29 d0                	sub    %edx,%eax
f0129640:	01 c8                	add    %ecx,%eax
f0129642:	8d 90 00 80 90 f6    	lea    -0x96f8000(%eax),%edx
f0129648:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f012964e:	83 ec 04             	sub    $0x4,%esp
f0129651:	52                   	push   %edx
f0129652:	50                   	push   %eax
f0129653:	68 0c c3 13 f0       	push   $0xf013c30c
f0129658:	e8 b1 76 fd ff       	call   f0100d0e <cprintf>
f012965d:	83 c4 10             	add    $0x10,%esp
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 7*Mega + 16*kilo + 2*Mega)) panic("Wrong start address after kshrink()... check the updating of your data structures");
f0129660:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f0129666:	89 c1                	mov    %eax,%ecx
f0129668:	c7 85 08 ff ff ff 00 	movl   $0x1000,-0xf8(%ebp)
f012966f:	10 00 00 
f0129672:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f0129678:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012967d:	89 85 04 ff ff ff    	mov    %eax,-0xfc(%ebp)
f0129683:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f0129689:	ba 00 00 00 00       	mov    $0x0,%edx
f012968e:	f7 b5 08 ff ff ff    	divl   -0xf8(%ebp)
f0129694:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f012969a:	29 d0                	sub    %edx,%eax
f012969c:	89 c3                	mov    %eax,%ebx
f012969e:	c7 85 00 ff ff ff 00 	movl   $0x1000,-0x100(%ebp)
f01296a5:	10 00 00 
f01296a8:	a0 40 26 78 f0       	mov    0xf0782640,%al
f01296ad:	0f b6 d0             	movzbl %al,%edx
f01296b0:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f01296b6:	01 d0                	add    %edx,%eax
f01296b8:	48                   	dec    %eax
f01296b9:	89 85 fc fe ff ff    	mov    %eax,-0x104(%ebp)
f01296bf:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f01296c5:	ba 00 00 00 00       	mov    $0x0,%edx
f01296ca:	f7 b5 00 ff ff ff    	divl   -0x100(%ebp)
f01296d0:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f01296d6:	29 d0                	sub    %edx,%eax
f01296d8:	01 c3                	add    %eax,%ebx
f01296da:	c7 85 f8 fe ff ff 00 	movl   $0x1000,-0x108(%ebp)
f01296e1:	10 00 00 
f01296e4:	a0 40 26 78 f0       	mov    0xf0782640,%al
f01296e9:	0f b6 c0             	movzbl %al,%eax
f01296ec:	c1 e0 04             	shl    $0x4,%eax
f01296ef:	89 c2                	mov    %eax,%edx
f01296f1:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f01296f7:	01 d0                	add    %edx,%eax
f01296f9:	48                   	dec    %eax
f01296fa:	89 85 f4 fe ff ff    	mov    %eax,-0x10c(%ebp)
f0129700:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f0129706:	ba 00 00 00 00       	mov    $0x0,%edx
f012970b:	f7 b5 f8 fe ff ff    	divl   -0x108(%ebp)
f0129711:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f0129717:	29 d0                	sub    %edx,%eax
f0129719:	01 d8                	add    %ebx,%eax
f012971b:	2d 00 80 6f 09       	sub    $0x96f8000,%eax
f0129720:	39 c1                	cmp    %eax,%ecx
f0129722:	74 17                	je     f012973b <test_kshrink+0xda8>
f0129724:	83 ec 04             	sub    $0x4,%esp
f0129727:	68 28 c3 13 f0       	push   $0xf013c328
f012972c:	68 8e 0c 00 00       	push   $0xc8e
f0129731:	68 7a b3 13 f0       	push   $0xf013b37a
f0129736:	e8 ca 6a fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012973b:	e8 88 a6 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0129740:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0129743:	74 17                	je     f012975c <test_kshrink+0xdc9>
f0129745:	83 ec 04             	sub    $0x4,%esp
f0129748:	68 94 b3 13 f0       	push   $0xf013b394
f012974d:	68 8f 0c 00 00       	push   $0xc8f
f0129752:	68 7a b3 13 f0       	push   $0xf013b37a
f0129757:	e8 a9 6a fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 4*Mega/PAGE_SIZE) panic("Wrong allocation: pages are not loaded successfully into memory");
f012975c:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f012975f:	e8 39 34 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0129764:	29 c3                	sub    %eax,%ebx
f0129766:	89 d8                	mov    %ebx,%eax
f0129768:	3d 00 04 00 00       	cmp    $0x400,%eax
f012976d:	74 17                	je     f0129786 <test_kshrink+0xdf3>
f012976f:	83 ec 04             	sub    $0x4,%esp
f0129772:	68 fc b3 13 f0       	push   $0xf013b3fc
f0129777:	68 90 0c 00 00       	push   $0xc90
f012977c:	68 7a b3 13 f0       	push   $0xf013b37a
f0129781:	e8 7f 6a fd ff       	call   f0100205 <_panic>


	//kfree the shrunk variable
	{
		//kfree 2 MB (shrunk)
		freeFrames = sys_calculate_free_frames() ;
f0129786:	e8 12 34 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f012978b:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012978e:	e8 35 a6 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0129793:	89 45 d8             	mov    %eax,-0x28(%ebp)
		kfree(ptr_allocations[6]);
f0129796:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f012979c:	83 ec 0c             	sub    $0xc,%esp
f012979f:	50                   	push   %eax
f01297a0:	e8 ab e1 fd ff       	call   f0107950 <kfree>
f01297a5:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01297a8:	e8 1b a6 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f01297ad:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f01297b0:	74 17                	je     f01297c9 <test_kshrink+0xe36>
f01297b2:	83 ec 04             	sub    $0x4,%esp
f01297b5:	68 94 b3 13 f0       	push   $0xf013b394
f01297ba:	68 9a 0c 00 00       	push   $0xc9a
f01297bf:	68 7a b3 13 f0       	push   $0xf013b37a
f01297c4:	e8 3c 6a fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512) panic("Wrong kfree: attempt to kfree a non-existing ptr. It should do nothing");
f01297c9:	e8 cf 33 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f01297ce:	89 c2                	mov    %eax,%edx
f01297d0:	8b 45 dc             	mov    -0x24(%ebp),%eax
f01297d3:	29 c2                	sub    %eax,%edx
f01297d5:	89 d0                	mov    %edx,%eax
f01297d7:	3d 00 02 00 00       	cmp    $0x200,%eax
f01297dc:	74 17                	je     f01297f5 <test_kshrink+0xe62>
f01297de:	83 ec 04             	sub    $0x4,%esp
f01297e1:	68 2c bc 13 f0       	push   $0xf013bc2c
f01297e6:	68 9b 0c 00 00       	push   $0xc9b
f01297eb:	68 7a b3 13 f0       	push   $0xf013b37a
f01297f0:	e8 10 6a fd ff       	call   f0100205 <_panic>
	}

	//Shrink last allocated variable to 4 MB - 20 kilo instead of 4 MB
	{
		freeFrames = sys_calculate_free_frames() ;
f01297f5:	e8 a3 33 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f01297fa:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01297fd:	e8 c6 a5 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0129802:	89 45 d8             	mov    %eax,-0x28(%ebp)

		kshrink(4*Mega - 20*kilo) ;
f0129805:	83 ec 0c             	sub    $0xc,%esp
f0129808:	68 00 b0 3f 00       	push   $0x3fb000
f012980d:	e8 f9 e2 fd ff       	call   f0107b0b <kshrink>
f0129812:	83 c4 10             	add    $0x10,%esp

		assert(pf_calculate_free_frames() - freeDiskFrames == 0) ;
f0129815:	e8 ae a5 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012981a:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f012981d:	74 19                	je     f0129838 <test_kshrink+0xea5>
f012981f:	68 14 c1 13 f0       	push   $0xf013c114
f0129824:	68 45 c1 13 f0       	push   $0xf013c145
f0129829:	68 a5 0c 00 00       	push   $0xca5
f012982e:	68 7a b3 13 f0       	push   $0xf013b37a
f0129833:	e8 cd 69 fd ff       	call   f0100205 <_panic>
		assert(sys_calculate_free_frames() - freeFrames == 5) ;
f0129838:	e8 60 33 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f012983d:	89 c2                	mov    %eax,%edx
f012983f:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0129842:	29 c2                	sub    %eax,%edx
f0129844:	89 d0                	mov    %edx,%eax
f0129846:	83 f8 05             	cmp    $0x5,%eax
f0129849:	74 19                	je     f0129864 <test_kshrink+0xed1>
f012984b:	68 7c c3 13 f0       	push   $0xf013c37c
f0129850:	68 45 c1 13 f0       	push   $0xf013c145
f0129855:	68 a6 0c 00 00       	push   $0xca6
f012985a:	68 7a b3 13 f0       	push   $0xf013b37a
f012985f:	e8 a1 69 fd ff       	call   f0100205 <_panic>
	}

	cprintf("\nCongratulations!! your modification is run successfully.\n");
f0129864:	83 ec 0c             	sub    $0xc,%esp
f0129867:	68 d8 c0 13 f0       	push   $0xf013c0d8
f012986c:	e8 9d 74 fd ff       	call   f0100d0e <cprintf>
f0129871:	83 c4 10             	add    $0x10,%esp

	return 1;
f0129874:	b8 01 00 00 00       	mov    $0x1,%eax
}
f0129879:	8d 65 f8             	lea    -0x8(%ebp),%esp
f012987c:	5b                   	pop    %ebx
f012987d:	5f                   	pop    %edi
f012987e:	5d                   	pop    %ebp
f012987f:	c3                   	ret    

f0129880 <test_kfreelast>:


int test_kfreelast()
{
f0129880:	55                   	push   %ebp
f0129881:	89 e5                	mov    %esp,%ebp
f0129883:	57                   	push   %edi
f0129884:	53                   	push   %ebx
f0129885:	81 ec 90 02 00 00    	sub    $0x290,%esp
	char minByte = 1<<7;
f012988b:	c6 45 eb 80          	movb   $0x80,-0x15(%ebp)
	char maxByte = 0x7F;
f012988f:	c6 45 ea 7f          	movb   $0x7f,-0x16(%ebp)
	short minShort = 1<<15 ;
f0129893:	66 c7 45 e8 00 80    	movw   $0x8000,-0x18(%ebp)
	short maxShort = 0x7FFF;
f0129899:	66 c7 45 e6 ff 7f    	movw   $0x7fff,-0x1a(%ebp)
	int minInt = 1<<31 ;
f012989f:	c7 45 e0 00 00 00 80 	movl   $0x80000000,-0x20(%ebp)
	int maxInt = 0x7FFFFFFF;
f01298a6:	c7 45 dc ff ff ff 7f 	movl   $0x7fffffff,-0x24(%ebp)
	char *byteArr, *byteArr2 ;
	short *shortArr, *shortArr2 ;
	int *intArr;
	struct MyStruct *structArr ;
	int lastIndexOfByte, lastIndexOfByte2, lastIndexOfShort, lastIndexOfShort2, lastIndexOfInt, lastIndexOfStruct;
	int start_freeFrames = sys_calculate_free_frames() ;
f01298ad:	e8 eb 32 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f01298b2:	89 45 d8             	mov    %eax,-0x28(%ebp)

	//malloc some spaces
	int i, ce, freeFrames, freeDiskFrames ;
	char* ptr;
	int lastIndices[20] = {0};
f01298b5:	8d 95 0c fe ff ff    	lea    -0x1f4(%ebp),%edx
f01298bb:	b9 14 00 00 00       	mov    $0x14,%ecx
f01298c0:	b8 00 00 00 00       	mov    $0x0,%eax
f01298c5:	89 d7                	mov    %edx,%edi
f01298c7:	f3 ab                	rep stos %eax,%es:(%edi)
	int sums[20] = {0};
f01298c9:	8d 95 bc fd ff ff    	lea    -0x244(%ebp),%edx
f01298cf:	b9 14 00 00 00       	mov    $0x14,%ecx
f01298d4:	b8 00 00 00 00       	mov    $0x0,%eax
f01298d9:	89 d7                	mov    %edx,%edi
f01298db:	f3 ab                	rep stos %eax,%es:(%edi)
	void* ptr_allocations[20] = {0};
f01298dd:	8d 95 6c fd ff ff    	lea    -0x294(%ebp),%edx
f01298e3:	b9 14 00 00 00       	mov    $0x14,%ecx
f01298e8:	b8 00 00 00 00       	mov    $0x0,%eax
f01298ed:	89 d7                	mov    %edx,%edi
f01298ef:	f3 ab                	rep stos %eax,%es:(%edi)
	{
		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f01298f1:	e8 a7 32 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f01298f6:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01298f9:	e8 ca a4 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f01298fe:	89 45 d0             	mov    %eax,-0x30(%ebp)
		ptr_allocations[0] = kmalloc(2*Mega-kilo);
f0129901:	83 ec 0c             	sub    $0xc,%esp
f0129904:	68 00 fc 1f 00       	push   $0x1ffc00
f0129909:	e8 77 df fd ff       	call   f0107885 <kmalloc>
f012990e:	83 c4 10             	add    $0x10,%esp
f0129911:	89 85 6c fd ff ff    	mov    %eax,-0x294(%ebp)
		if ((uint32) ptr_allocations[0] !=  (ACTUAL_START)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0129917:	8b 85 6c fd ff ff    	mov    -0x294(%ebp),%eax
f012991d:	89 c1                	mov    %eax,%ecx
f012991f:	c7 45 cc 00 10 00 00 	movl   $0x1000,-0x34(%ebp)
f0129926:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0129929:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012992e:	89 45 c8             	mov    %eax,-0x38(%ebp)
f0129931:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0129934:	ba 00 00 00 00       	mov    $0x0,%edx
f0129939:	f7 75 cc             	divl   -0x34(%ebp)
f012993c:	8b 45 c8             	mov    -0x38(%ebp),%eax
f012993f:	29 d0                	sub    %edx,%eax
f0129941:	89 c3                	mov    %eax,%ebx
f0129943:	c7 45 c4 00 10 00 00 	movl   $0x1000,-0x3c(%ebp)
f012994a:	a0 40 26 78 f0       	mov    0xf0782640,%al
f012994f:	0f b6 d0             	movzbl %al,%edx
f0129952:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0129955:	01 d0                	add    %edx,%eax
f0129957:	48                   	dec    %eax
f0129958:	89 45 c0             	mov    %eax,-0x40(%ebp)
f012995b:	8b 45 c0             	mov    -0x40(%ebp),%eax
f012995e:	ba 00 00 00 00       	mov    $0x0,%edx
f0129963:	f7 75 c4             	divl   -0x3c(%ebp)
f0129966:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0129969:	29 d0                	sub    %edx,%eax
f012996b:	01 c3                	add    %eax,%ebx
f012996d:	c7 45 bc 00 10 00 00 	movl   $0x1000,-0x44(%ebp)
f0129974:	a0 40 26 78 f0       	mov    0xf0782640,%al
f0129979:	0f b6 c0             	movzbl %al,%eax
f012997c:	c1 e0 04             	shl    $0x4,%eax
f012997f:	89 c2                	mov    %eax,%edx
f0129981:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0129984:	01 d0                	add    %edx,%eax
f0129986:	48                   	dec    %eax
f0129987:	89 45 b8             	mov    %eax,-0x48(%ebp)
f012998a:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012998d:	ba 00 00 00 00       	mov    $0x0,%edx
f0129992:	f7 75 bc             	divl   -0x44(%ebp)
f0129995:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0129998:	29 d0                	sub    %edx,%eax
f012999a:	01 d8                	add    %ebx,%eax
f012999c:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f01299a1:	39 c1                	cmp    %eax,%ecx
f01299a3:	74 17                	je     f01299bc <test_kfreelast+0x13c>
f01299a5:	83 ec 04             	sub    $0x4,%esp
f01299a8:	68 60 b4 13 f0       	push   $0xf013b460
f01299ad:	68 ca 0c 00 00       	push   $0xcca
f01299b2:	68 7a b3 13 f0       	push   $0xf013b37a
f01299b7:	e8 49 68 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01299bc:	e8 07 a4 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f01299c1:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f01299c4:	74 17                	je     f01299dd <test_kfreelast+0x15d>
f01299c6:	83 ec 04             	sub    $0x4,%esp
f01299c9:	68 94 b3 13 f0       	push   $0xf013b394
f01299ce:	68 cb 0c 00 00       	push   $0xccb
f01299d3:	68 7a b3 13 f0       	push   $0xf013b37a
f01299d8:	e8 28 68 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f01299dd:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
f01299e0:	e8 b8 31 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f01299e5:	29 c3                	sub    %eax,%ebx
f01299e7:	89 d8                	mov    %ebx,%eax
f01299e9:	3d 00 02 00 00       	cmp    $0x200,%eax
f01299ee:	74 17                	je     f0129a07 <test_kfreelast+0x187>
f01299f0:	83 ec 04             	sub    $0x4,%esp
f01299f3:	68 fc b3 13 f0       	push   $0xf013b3fc
f01299f8:	68 cc 0c 00 00       	push   $0xccc
f01299fd:	68 7a b3 13 f0       	push   $0xf013b37a
f0129a02:	e8 fe 67 fd ff       	call   f0100205 <_panic>
		lastIndices[0] = (2*Mega-kilo)/sizeof(char) - 1;
f0129a07:	c7 85 0c fe ff ff ff 	movl   $0x1ffbff,-0x1f4(%ebp)
f0129a0e:	fb 1f 00 

		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f0129a11:	e8 87 31 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0129a16:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0129a19:	e8 aa a3 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0129a1e:	89 45 d0             	mov    %eax,-0x30(%ebp)
		ptr_allocations[1] = kmalloc(2*Mega-kilo);
f0129a21:	83 ec 0c             	sub    $0xc,%esp
f0129a24:	68 00 fc 1f 00       	push   $0x1ffc00
f0129a29:	e8 57 de fd ff       	call   f0107885 <kmalloc>
f0129a2e:	83 c4 10             	add    $0x10,%esp
f0129a31:	89 85 70 fd ff ff    	mov    %eax,-0x290(%ebp)
		if ((uint32) ptr_allocations[1] != (ACTUAL_START + 2*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0129a37:	8b 85 70 fd ff ff    	mov    -0x290(%ebp),%eax
f0129a3d:	89 c1                	mov    %eax,%ecx
f0129a3f:	c7 45 b4 00 10 00 00 	movl   $0x1000,-0x4c(%ebp)
f0129a46:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0129a49:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0129a4e:	89 45 b0             	mov    %eax,-0x50(%ebp)
f0129a51:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0129a54:	ba 00 00 00 00       	mov    $0x0,%edx
f0129a59:	f7 75 b4             	divl   -0x4c(%ebp)
f0129a5c:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0129a5f:	29 d0                	sub    %edx,%eax
f0129a61:	89 c3                	mov    %eax,%ebx
f0129a63:	c7 45 ac 00 10 00 00 	movl   $0x1000,-0x54(%ebp)
f0129a6a:	a0 40 26 78 f0       	mov    0xf0782640,%al
f0129a6f:	0f b6 d0             	movzbl %al,%edx
f0129a72:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0129a75:	01 d0                	add    %edx,%eax
f0129a77:	48                   	dec    %eax
f0129a78:	89 45 a8             	mov    %eax,-0x58(%ebp)
f0129a7b:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0129a7e:	ba 00 00 00 00       	mov    $0x0,%edx
f0129a83:	f7 75 ac             	divl   -0x54(%ebp)
f0129a86:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0129a89:	29 d0                	sub    %edx,%eax
f0129a8b:	01 c3                	add    %eax,%ebx
f0129a8d:	c7 45 a4 00 10 00 00 	movl   $0x1000,-0x5c(%ebp)
f0129a94:	a0 40 26 78 f0       	mov    0xf0782640,%al
f0129a99:	0f b6 c0             	movzbl %al,%eax
f0129a9c:	c1 e0 04             	shl    $0x4,%eax
f0129a9f:	89 c2                	mov    %eax,%edx
f0129aa1:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0129aa4:	01 d0                	add    %edx,%eax
f0129aa6:	48                   	dec    %eax
f0129aa7:	89 45 a0             	mov    %eax,-0x60(%ebp)
f0129aaa:	8b 45 a0             	mov    -0x60(%ebp),%eax
f0129aad:	ba 00 00 00 00       	mov    $0x0,%edx
f0129ab2:	f7 75 a4             	divl   -0x5c(%ebp)
f0129ab5:	8b 45 a0             	mov    -0x60(%ebp),%eax
f0129ab8:	29 d0                	sub    %edx,%eax
f0129aba:	01 d8                	add    %ebx,%eax
f0129abc:	2d 00 c0 df 09       	sub    $0x9dfc000,%eax
f0129ac1:	39 c1                	cmp    %eax,%ecx
f0129ac3:	74 17                	je     f0129adc <test_kfreelast+0x25c>
f0129ac5:	83 ec 04             	sub    $0x4,%esp
f0129ac8:	68 60 b4 13 f0       	push   $0xf013b460
f0129acd:	68 d3 0c 00 00       	push   $0xcd3
f0129ad2:	68 7a b3 13 f0       	push   $0xf013b37a
f0129ad7:	e8 29 67 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0129adc:	e8 e7 a2 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0129ae1:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f0129ae4:	74 17                	je     f0129afd <test_kfreelast+0x27d>
f0129ae6:	83 ec 04             	sub    $0x4,%esp
f0129ae9:	68 94 b3 13 f0       	push   $0xf013b394
f0129aee:	68 d4 0c 00 00       	push   $0xcd4
f0129af3:	68 7a b3 13 f0       	push   $0xf013b37a
f0129af8:	e8 08 67 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f0129afd:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
f0129b00:	e8 98 30 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0129b05:	29 c3                	sub    %eax,%ebx
f0129b07:	89 d8                	mov    %ebx,%eax
f0129b09:	3d 00 02 00 00       	cmp    $0x200,%eax
f0129b0e:	74 17                	je     f0129b27 <test_kfreelast+0x2a7>
f0129b10:	83 ec 04             	sub    $0x4,%esp
f0129b13:	68 fc b3 13 f0       	push   $0xf013b3fc
f0129b18:	68 d5 0c 00 00       	push   $0xcd5
f0129b1d:	68 7a b3 13 f0       	push   $0xf013b37a
f0129b22:	e8 de 66 fd ff       	call   f0100205 <_panic>
		lastIndices[1] = (2*Mega-kilo)/sizeof(char) - 1;
f0129b27:	c7 85 10 fe ff ff ff 	movl   $0x1ffbff,-0x1f0(%ebp)
f0129b2e:	fb 1f 00 

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f0129b31:	e8 67 30 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0129b36:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0129b39:	e8 8a a2 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0129b3e:	89 45 d0             	mov    %eax,-0x30(%ebp)
		ptr_allocations[2] = kmalloc(2*kilo);
f0129b41:	83 ec 0c             	sub    $0xc,%esp
f0129b44:	68 00 08 00 00       	push   $0x800
f0129b49:	e8 37 dd fd ff       	call   f0107885 <kmalloc>
f0129b4e:	83 c4 10             	add    $0x10,%esp
f0129b51:	89 85 74 fd ff ff    	mov    %eax,-0x28c(%ebp)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0129b57:	8b 85 74 fd ff ff    	mov    -0x28c(%ebp),%eax
f0129b5d:	89 c1                	mov    %eax,%ecx
f0129b5f:	c7 45 9c 00 10 00 00 	movl   $0x1000,-0x64(%ebp)
f0129b66:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0129b69:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0129b6e:	89 45 98             	mov    %eax,-0x68(%ebp)
f0129b71:	8b 45 98             	mov    -0x68(%ebp),%eax
f0129b74:	ba 00 00 00 00       	mov    $0x0,%edx
f0129b79:	f7 75 9c             	divl   -0x64(%ebp)
f0129b7c:	8b 45 98             	mov    -0x68(%ebp),%eax
f0129b7f:	29 d0                	sub    %edx,%eax
f0129b81:	89 c3                	mov    %eax,%ebx
f0129b83:	c7 45 94 00 10 00 00 	movl   $0x1000,-0x6c(%ebp)
f0129b8a:	a0 40 26 78 f0       	mov    0xf0782640,%al
f0129b8f:	0f b6 d0             	movzbl %al,%edx
f0129b92:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0129b95:	01 d0                	add    %edx,%eax
f0129b97:	48                   	dec    %eax
f0129b98:	89 45 90             	mov    %eax,-0x70(%ebp)
f0129b9b:	8b 45 90             	mov    -0x70(%ebp),%eax
f0129b9e:	ba 00 00 00 00       	mov    $0x0,%edx
f0129ba3:	f7 75 94             	divl   -0x6c(%ebp)
f0129ba6:	8b 45 90             	mov    -0x70(%ebp),%eax
f0129ba9:	29 d0                	sub    %edx,%eax
f0129bab:	01 c3                	add    %eax,%ebx
f0129bad:	c7 45 8c 00 10 00 00 	movl   $0x1000,-0x74(%ebp)
f0129bb4:	a0 40 26 78 f0       	mov    0xf0782640,%al
f0129bb9:	0f b6 c0             	movzbl %al,%eax
f0129bbc:	c1 e0 04             	shl    $0x4,%eax
f0129bbf:	89 c2                	mov    %eax,%edx
f0129bc1:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0129bc4:	01 d0                	add    %edx,%eax
f0129bc6:	48                   	dec    %eax
f0129bc7:	89 45 88             	mov    %eax,-0x78(%ebp)
f0129bca:	8b 45 88             	mov    -0x78(%ebp),%eax
f0129bcd:	ba 00 00 00 00       	mov    $0x0,%edx
f0129bd2:	f7 75 8c             	divl   -0x74(%ebp)
f0129bd5:	8b 45 88             	mov    -0x78(%ebp),%eax
f0129bd8:	29 d0                	sub    %edx,%eax
f0129bda:	01 d8                	add    %ebx,%eax
f0129bdc:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
f0129be1:	39 c1                	cmp    %eax,%ecx
f0129be3:	74 17                	je     f0129bfc <test_kfreelast+0x37c>
f0129be5:	83 ec 04             	sub    $0x4,%esp
f0129be8:	68 60 b4 13 f0       	push   $0xf013b460
f0129bed:	68 dc 0c 00 00       	push   $0xcdc
f0129bf2:	68 7a b3 13 f0       	push   $0xf013b37a
f0129bf7:	e8 09 66 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0129bfc:	e8 c7 a1 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0129c01:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f0129c04:	74 17                	je     f0129c1d <test_kfreelast+0x39d>
f0129c06:	83 ec 04             	sub    $0x4,%esp
f0129c09:	68 94 b3 13 f0       	push   $0xf013b394
f0129c0e:	68 dd 0c 00 00       	push   $0xcdd
f0129c13:	68 7a b3 13 f0       	push   $0xf013b37a
f0129c18:	e8 e8 65 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f0129c1d:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
f0129c20:	e8 78 2f fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0129c25:	29 c3                	sub    %eax,%ebx
f0129c27:	89 d8                	mov    %ebx,%eax
f0129c29:	83 f8 01             	cmp    $0x1,%eax
f0129c2c:	74 17                	je     f0129c45 <test_kfreelast+0x3c5>
f0129c2e:	83 ec 04             	sub    $0x4,%esp
f0129c31:	68 fc b3 13 f0       	push   $0xf013b3fc
f0129c36:	68 de 0c 00 00       	push   $0xcde
f0129c3b:	68 7a b3 13 f0       	push   $0xf013b37a
f0129c40:	e8 c0 65 fd ff       	call   f0100205 <_panic>
		lastIndices[2] = (2*kilo)/sizeof(char) - 1;
f0129c45:	c7 85 14 fe ff ff ff 	movl   $0x7ff,-0x1ec(%ebp)
f0129c4c:	07 00 00 
		ptr = (char*)ptr_allocations[2];
f0129c4f:	8b 85 74 fd ff ff    	mov    -0x28c(%ebp),%eax
f0129c55:	89 45 84             	mov    %eax,-0x7c(%ebp)
		for (i = 0; i < lastIndices[2]; ++i)
f0129c58:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0129c5f:	eb 0e                	jmp    f0129c6f <test_kfreelast+0x3ef>
		{
			ptr[i] = 2 ;
f0129c61:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0129c64:	8b 45 84             	mov    -0x7c(%ebp),%eax
f0129c67:	01 d0                	add    %edx,%eax
f0129c69:	c6 00 02             	movb   $0x2,(%eax)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[2] = (2*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[2];
		for (i = 0; i < lastIndices[2]; ++i)
f0129c6c:	ff 45 f4             	incl   -0xc(%ebp)
f0129c6f:	8b 85 14 fe ff ff    	mov    -0x1ec(%ebp),%eax
f0129c75:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0129c78:	7f e7                	jg     f0129c61 <test_kfreelast+0x3e1>
		{
			ptr[i] = 2 ;
		}

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f0129c7a:	e8 1e 2f fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0129c7f:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0129c82:	e8 41 a1 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0129c87:	89 45 d0             	mov    %eax,-0x30(%ebp)
		ptr_allocations[3] = kmalloc(2*kilo);
f0129c8a:	83 ec 0c             	sub    $0xc,%esp
f0129c8d:	68 00 08 00 00       	push   $0x800
f0129c92:	e8 ee db fd ff       	call   f0107885 <kmalloc>
f0129c97:	83 c4 10             	add    $0x10,%esp
f0129c9a:	89 85 78 fd ff ff    	mov    %eax,-0x288(%ebp)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0129ca0:	8b 85 78 fd ff ff    	mov    -0x288(%ebp),%eax
f0129ca6:	89 c1                	mov    %eax,%ecx
f0129ca8:	c7 45 80 00 10 00 00 	movl   $0x1000,-0x80(%ebp)
f0129caf:	8b 45 80             	mov    -0x80(%ebp),%eax
f0129cb2:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0129cb7:	89 85 7c ff ff ff    	mov    %eax,-0x84(%ebp)
f0129cbd:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f0129cc3:	ba 00 00 00 00       	mov    $0x0,%edx
f0129cc8:	f7 75 80             	divl   -0x80(%ebp)
f0129ccb:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f0129cd1:	29 d0                	sub    %edx,%eax
f0129cd3:	89 c3                	mov    %eax,%ebx
f0129cd5:	c7 85 78 ff ff ff 00 	movl   $0x1000,-0x88(%ebp)
f0129cdc:	10 00 00 
f0129cdf:	a0 40 26 78 f0       	mov    0xf0782640,%al
f0129ce4:	0f b6 d0             	movzbl %al,%edx
f0129ce7:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f0129ced:	01 d0                	add    %edx,%eax
f0129cef:	48                   	dec    %eax
f0129cf0:	89 85 74 ff ff ff    	mov    %eax,-0x8c(%ebp)
f0129cf6:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f0129cfc:	ba 00 00 00 00       	mov    $0x0,%edx
f0129d01:	f7 b5 78 ff ff ff    	divl   -0x88(%ebp)
f0129d07:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f0129d0d:	29 d0                	sub    %edx,%eax
f0129d0f:	01 c3                	add    %eax,%ebx
f0129d11:	c7 85 70 ff ff ff 00 	movl   $0x1000,-0x90(%ebp)
f0129d18:	10 00 00 
f0129d1b:	a0 40 26 78 f0       	mov    0xf0782640,%al
f0129d20:	0f b6 c0             	movzbl %al,%eax
f0129d23:	c1 e0 04             	shl    $0x4,%eax
f0129d26:	89 c2                	mov    %eax,%edx
f0129d28:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f0129d2e:	01 d0                	add    %edx,%eax
f0129d30:	48                   	dec    %eax
f0129d31:	89 85 6c ff ff ff    	mov    %eax,-0x94(%ebp)
f0129d37:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f0129d3d:	ba 00 00 00 00       	mov    $0x0,%edx
f0129d42:	f7 b5 70 ff ff ff    	divl   -0x90(%ebp)
f0129d48:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f0129d4e:	29 d0                	sub    %edx,%eax
f0129d50:	01 d8                	add    %ebx,%eax
f0129d52:	2d 00 b0 bf 09       	sub    $0x9bfb000,%eax
f0129d57:	39 c1                	cmp    %eax,%ecx
f0129d59:	74 17                	je     f0129d72 <test_kfreelast+0x4f2>
f0129d5b:	83 ec 04             	sub    $0x4,%esp
f0129d5e:	68 60 b4 13 f0       	push   $0xf013b460
f0129d63:	68 ea 0c 00 00       	push   $0xcea
f0129d68:	68 7a b3 13 f0       	push   $0xf013b37a
f0129d6d:	e8 93 64 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0129d72:	e8 51 a0 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0129d77:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f0129d7a:	74 17                	je     f0129d93 <test_kfreelast+0x513>
f0129d7c:	83 ec 04             	sub    $0x4,%esp
f0129d7f:	68 94 b3 13 f0       	push   $0xf013b394
f0129d84:	68 eb 0c 00 00       	push   $0xceb
f0129d89:	68 7a b3 13 f0       	push   $0xf013b37a
f0129d8e:	e8 72 64 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f0129d93:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
f0129d96:	e8 02 2e fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0129d9b:	29 c3                	sub    %eax,%ebx
f0129d9d:	89 d8                	mov    %ebx,%eax
f0129d9f:	83 f8 01             	cmp    $0x1,%eax
f0129da2:	74 17                	je     f0129dbb <test_kfreelast+0x53b>
f0129da4:	83 ec 04             	sub    $0x4,%esp
f0129da7:	68 fc b3 13 f0       	push   $0xf013b3fc
f0129dac:	68 ec 0c 00 00       	push   $0xcec
f0129db1:	68 7a b3 13 f0       	push   $0xf013b37a
f0129db6:	e8 4a 64 fd ff       	call   f0100205 <_panic>
		lastIndices[3] = (2*kilo)/sizeof(char) - 1;
f0129dbb:	c7 85 18 fe ff ff ff 	movl   $0x7ff,-0x1e8(%ebp)
f0129dc2:	07 00 00 
		ptr = (char*)ptr_allocations[3];
f0129dc5:	8b 85 78 fd ff ff    	mov    -0x288(%ebp),%eax
f0129dcb:	89 45 84             	mov    %eax,-0x7c(%ebp)
		for (i = 0; i < lastIndices[3]; ++i)
f0129dce:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0129dd5:	eb 0e                	jmp    f0129de5 <test_kfreelast+0x565>
		{
			ptr[i] = 3 ;
f0129dd7:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0129dda:	8b 45 84             	mov    -0x7c(%ebp),%eax
f0129ddd:	01 d0                	add    %edx,%eax
f0129ddf:	c6 00 03             	movb   $0x3,(%eax)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[3] = (2*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[3];
		for (i = 0; i < lastIndices[3]; ++i)
f0129de2:	ff 45 f4             	incl   -0xc(%ebp)
f0129de5:	8b 85 18 fe ff ff    	mov    -0x1e8(%ebp),%eax
f0129deb:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0129dee:	7f e7                	jg     f0129dd7 <test_kfreelast+0x557>
		{
			ptr[i] = 3 ;
		}

		//7 KB
		freeFrames = sys_calculate_free_frames() ;
f0129df0:	e8 a8 2d fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0129df5:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0129df8:	e8 cb 9f fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0129dfd:	89 45 d0             	mov    %eax,-0x30(%ebp)
		ptr_allocations[4] = kmalloc(7*kilo);
f0129e00:	83 ec 0c             	sub    $0xc,%esp
f0129e03:	68 00 1c 00 00       	push   $0x1c00
f0129e08:	e8 78 da fd ff       	call   f0107885 <kmalloc>
f0129e0d:	83 c4 10             	add    $0x10,%esp
f0129e10:	89 85 7c fd ff ff    	mov    %eax,-0x284(%ebp)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0129e16:	8b 85 7c fd ff ff    	mov    -0x284(%ebp),%eax
f0129e1c:	89 c1                	mov    %eax,%ecx
f0129e1e:	c7 85 68 ff ff ff 00 	movl   $0x1000,-0x98(%ebp)
f0129e25:	10 00 00 
f0129e28:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f0129e2e:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0129e33:	89 85 64 ff ff ff    	mov    %eax,-0x9c(%ebp)
f0129e39:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f0129e3f:	ba 00 00 00 00       	mov    $0x0,%edx
f0129e44:	f7 b5 68 ff ff ff    	divl   -0x98(%ebp)
f0129e4a:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f0129e50:	29 d0                	sub    %edx,%eax
f0129e52:	89 c3                	mov    %eax,%ebx
f0129e54:	c7 85 60 ff ff ff 00 	movl   $0x1000,-0xa0(%ebp)
f0129e5b:	10 00 00 
f0129e5e:	a0 40 26 78 f0       	mov    0xf0782640,%al
f0129e63:	0f b6 d0             	movzbl %al,%edx
f0129e66:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f0129e6c:	01 d0                	add    %edx,%eax
f0129e6e:	48                   	dec    %eax
f0129e6f:	89 85 5c ff ff ff    	mov    %eax,-0xa4(%ebp)
f0129e75:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f0129e7b:	ba 00 00 00 00       	mov    $0x0,%edx
f0129e80:	f7 b5 60 ff ff ff    	divl   -0xa0(%ebp)
f0129e86:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f0129e8c:	29 d0                	sub    %edx,%eax
f0129e8e:	01 c3                	add    %eax,%ebx
f0129e90:	c7 85 58 ff ff ff 00 	movl   $0x1000,-0xa8(%ebp)
f0129e97:	10 00 00 
f0129e9a:	a0 40 26 78 f0       	mov    0xf0782640,%al
f0129e9f:	0f b6 c0             	movzbl %al,%eax
f0129ea2:	c1 e0 04             	shl    $0x4,%eax
f0129ea5:	89 c2                	mov    %eax,%edx
f0129ea7:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f0129ead:	01 d0                	add    %edx,%eax
f0129eaf:	48                   	dec    %eax
f0129eb0:	89 85 54 ff ff ff    	mov    %eax,-0xac(%ebp)
f0129eb6:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f0129ebc:	ba 00 00 00 00       	mov    $0x0,%edx
f0129ec1:	f7 b5 58 ff ff ff    	divl   -0xa8(%ebp)
f0129ec7:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f0129ecd:	29 d0                	sub    %edx,%eax
f0129ecf:	01 d8                	add    %ebx,%eax
f0129ed1:	2d 00 a0 bf 09       	sub    $0x9bfa000,%eax
f0129ed6:	39 c1                	cmp    %eax,%ecx
f0129ed8:	74 17                	je     f0129ef1 <test_kfreelast+0x671>
f0129eda:	83 ec 04             	sub    $0x4,%esp
f0129edd:	68 60 b4 13 f0       	push   $0xf013b460
f0129ee2:	68 f8 0c 00 00       	push   $0xcf8
f0129ee7:	68 7a b3 13 f0       	push   $0xf013b37a
f0129eec:	e8 14 63 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0129ef1:	e8 d2 9e fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0129ef6:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f0129ef9:	74 17                	je     f0129f12 <test_kfreelast+0x692>
f0129efb:	83 ec 04             	sub    $0x4,%esp
f0129efe:	68 94 b3 13 f0       	push   $0xf013b394
f0129f03:	68 f9 0c 00 00       	push   $0xcf9
f0129f08:	68 7a b3 13 f0       	push   $0xf013b37a
f0129f0d:	e8 f3 62 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: pages are not loaded successfully into memory");
f0129f12:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
f0129f15:	e8 83 2c fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0129f1a:	29 c3                	sub    %eax,%ebx
f0129f1c:	89 d8                	mov    %ebx,%eax
f0129f1e:	83 f8 02             	cmp    $0x2,%eax
f0129f21:	74 17                	je     f0129f3a <test_kfreelast+0x6ba>
f0129f23:	83 ec 04             	sub    $0x4,%esp
f0129f26:	68 fc b3 13 f0       	push   $0xf013b3fc
f0129f2b:	68 fa 0c 00 00       	push   $0xcfa
f0129f30:	68 7a b3 13 f0       	push   $0xf013b37a
f0129f35:	e8 cb 62 fd ff       	call   f0100205 <_panic>
		lastIndices[4] = (7*kilo)/sizeof(char) - 1;
f0129f3a:	c7 85 1c fe ff ff ff 	movl   $0x1bff,-0x1e4(%ebp)
f0129f41:	1b 00 00 
		ptr = (char*)ptr_allocations[4];
f0129f44:	8b 85 7c fd ff ff    	mov    -0x284(%ebp),%eax
f0129f4a:	89 45 84             	mov    %eax,-0x7c(%ebp)
		for (i = 0; i < lastIndices[4]; ++i)
f0129f4d:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0129f54:	eb 0e                	jmp    f0129f64 <test_kfreelast+0x6e4>
		{
			ptr[i] = 4 ;
f0129f56:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0129f59:	8b 45 84             	mov    -0x7c(%ebp),%eax
f0129f5c:	01 d0                	add    %edx,%eax
f0129f5e:	c6 00 04             	movb   $0x4,(%eax)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[4] = (7*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[4];
		for (i = 0; i < lastIndices[4]; ++i)
f0129f61:	ff 45 f4             	incl   -0xc(%ebp)
f0129f64:	8b 85 1c fe ff ff    	mov    -0x1e4(%ebp),%eax
f0129f6a:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0129f6d:	7f e7                	jg     f0129f56 <test_kfreelast+0x6d6>
		{
			ptr[i] = 4 ;
		}

		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f0129f6f:	e8 29 2c fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0129f74:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0129f77:	e8 4c 9e fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0129f7c:	89 45 d0             	mov    %eax,-0x30(%ebp)
		ptr_allocations[5] = kmalloc(3*Mega-kilo);
f0129f7f:	83 ec 0c             	sub    $0xc,%esp
f0129f82:	68 00 fc 2f 00       	push   $0x2ffc00
f0129f87:	e8 f9 d8 fd ff       	call   f0107885 <kmalloc>
f0129f8c:	83 c4 10             	add    $0x10,%esp
f0129f8f:	89 85 80 fd ff ff    	mov    %eax,-0x280(%ebp)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo) ) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0129f95:	8b 85 80 fd ff ff    	mov    -0x280(%ebp),%eax
f0129f9b:	89 c1                	mov    %eax,%ecx
f0129f9d:	c7 85 50 ff ff ff 00 	movl   $0x1000,-0xb0(%ebp)
f0129fa4:	10 00 00 
f0129fa7:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f0129fad:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0129fb2:	89 85 4c ff ff ff    	mov    %eax,-0xb4(%ebp)
f0129fb8:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0129fbe:	ba 00 00 00 00       	mov    $0x0,%edx
f0129fc3:	f7 b5 50 ff ff ff    	divl   -0xb0(%ebp)
f0129fc9:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0129fcf:	29 d0                	sub    %edx,%eax
f0129fd1:	89 c3                	mov    %eax,%ebx
f0129fd3:	c7 85 48 ff ff ff 00 	movl   $0x1000,-0xb8(%ebp)
f0129fda:	10 00 00 
f0129fdd:	a0 40 26 78 f0       	mov    0xf0782640,%al
f0129fe2:	0f b6 d0             	movzbl %al,%edx
f0129fe5:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f0129feb:	01 d0                	add    %edx,%eax
f0129fed:	48                   	dec    %eax
f0129fee:	89 85 44 ff ff ff    	mov    %eax,-0xbc(%ebp)
f0129ff4:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0129ffa:	ba 00 00 00 00       	mov    $0x0,%edx
f0129fff:	f7 b5 48 ff ff ff    	divl   -0xb8(%ebp)
f012a005:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f012a00b:	29 d0                	sub    %edx,%eax
f012a00d:	01 c3                	add    %eax,%ebx
f012a00f:	c7 85 40 ff ff ff 00 	movl   $0x1000,-0xc0(%ebp)
f012a016:	10 00 00 
f012a019:	a0 40 26 78 f0       	mov    0xf0782640,%al
f012a01e:	0f b6 c0             	movzbl %al,%eax
f012a021:	c1 e0 04             	shl    $0x4,%eax
f012a024:	89 c2                	mov    %eax,%edx
f012a026:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f012a02c:	01 d0                	add    %edx,%eax
f012a02e:	48                   	dec    %eax
f012a02f:	89 85 3c ff ff ff    	mov    %eax,-0xc4(%ebp)
f012a035:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f012a03b:	ba 00 00 00 00       	mov    $0x0,%edx
f012a040:	f7 b5 40 ff ff ff    	divl   -0xc0(%ebp)
f012a046:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f012a04c:	29 d0                	sub    %edx,%eax
f012a04e:	01 d8                	add    %ebx,%eax
f012a050:	2d 00 80 bf 09       	sub    $0x9bf8000,%eax
f012a055:	39 c1                	cmp    %eax,%ecx
f012a057:	74 17                	je     f012a070 <test_kfreelast+0x7f0>
f012a059:	83 ec 04             	sub    $0x4,%esp
f012a05c:	68 60 b4 13 f0       	push   $0xf013b460
f012a061:	68 06 0d 00 00       	push   $0xd06
f012a066:	68 7a b3 13 f0       	push   $0xf013b37a
f012a06b:	e8 95 61 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012a070:	e8 53 9d fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012a075:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012a078:	74 17                	je     f012a091 <test_kfreelast+0x811>
f012a07a:	83 ec 04             	sub    $0x4,%esp
f012a07d:	68 94 b3 13 f0       	push   $0xf013b394
f012a082:	68 07 0d 00 00       	push   $0xd07
f012a087:	68 7a b3 13 f0       	push   $0xf013b37a
f012a08c:	e8 74 61 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
f012a091:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
f012a094:	e8 04 2b fe ff       	call   f010cb9d <sys_calculate_free_frames>
f012a099:	29 c3                	sub    %eax,%ebx
f012a09b:	89 d8                	mov    %ebx,%eax
f012a09d:	3d 00 03 00 00       	cmp    $0x300,%eax
f012a0a2:	74 17                	je     f012a0bb <test_kfreelast+0x83b>
f012a0a4:	83 ec 04             	sub    $0x4,%esp
f012a0a7:	68 fc b3 13 f0       	push   $0xf013b3fc
f012a0ac:	68 08 0d 00 00       	push   $0xd08
f012a0b1:	68 7a b3 13 f0       	push   $0xf013b37a
f012a0b6:	e8 4a 61 fd ff       	call   f0100205 <_panic>
		lastIndices[5] = (3*Mega-kilo)/sizeof(char) - 1;
f012a0bb:	c7 85 20 fe ff ff ff 	movl   $0x2ffbff,-0x1e0(%ebp)
f012a0c2:	fb 2f 00 
		ptr = (char*)ptr_allocations[5];
f012a0c5:	8b 85 80 fd ff ff    	mov    -0x280(%ebp),%eax
f012a0cb:	89 45 84             	mov    %eax,-0x7c(%ebp)
		for (i = 0; i < lastIndices[5]; ++i)
f012a0ce:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012a0d5:	eb 0e                	jmp    f012a0e5 <test_kfreelast+0x865>
		{
			ptr[i] = 5 ;
f012a0d7:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012a0da:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012a0dd:	01 d0                	add    %edx,%eax
f012a0df:	c6 00 05             	movb   $0x5,(%eax)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo) ) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[5] = (3*Mega-kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[5];
		for (i = 0; i < lastIndices[5]; ++i)
f012a0e2:	ff 45 f4             	incl   -0xc(%ebp)
f012a0e5:	8b 85 20 fe ff ff    	mov    -0x1e0(%ebp),%eax
f012a0eb:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012a0ee:	7f e7                	jg     f012a0d7 <test_kfreelast+0x857>
		{
			ptr[i] = 5 ;
		}

		//6 MB
		freeFrames = sys_calculate_free_frames() ;
f012a0f0:	e8 a8 2a fe ff       	call   f010cb9d <sys_calculate_free_frames>
f012a0f5:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012a0f8:	e8 cb 9c fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012a0fd:	89 45 d0             	mov    %eax,-0x30(%ebp)
		ptr_allocations[6] = kmalloc(6*Mega-kilo);
f012a100:	83 ec 0c             	sub    $0xc,%esp
f012a103:	68 00 fc 5f 00       	push   $0x5ffc00
f012a108:	e8 78 d7 fd ff       	call   f0107885 <kmalloc>
f012a10d:	83 c4 10             	add    $0x10,%esp
f012a110:	89 85 84 fd ff ff    	mov    %eax,-0x27c(%ebp)
		if ((uint32) ptr_allocations[6] != (ACTUAL_START + 7*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f012a116:	8b 85 84 fd ff ff    	mov    -0x27c(%ebp),%eax
f012a11c:	89 c1                	mov    %eax,%ecx
f012a11e:	c7 85 38 ff ff ff 00 	movl   $0x1000,-0xc8(%ebp)
f012a125:	10 00 00 
f012a128:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f012a12e:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012a133:	89 85 34 ff ff ff    	mov    %eax,-0xcc(%ebp)
f012a139:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f012a13f:	ba 00 00 00 00       	mov    $0x0,%edx
f012a144:	f7 b5 38 ff ff ff    	divl   -0xc8(%ebp)
f012a14a:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f012a150:	29 d0                	sub    %edx,%eax
f012a152:	89 c3                	mov    %eax,%ebx
f012a154:	c7 85 30 ff ff ff 00 	movl   $0x1000,-0xd0(%ebp)
f012a15b:	10 00 00 
f012a15e:	a0 40 26 78 f0       	mov    0xf0782640,%al
f012a163:	0f b6 d0             	movzbl %al,%edx
f012a166:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f012a16c:	01 d0                	add    %edx,%eax
f012a16e:	48                   	dec    %eax
f012a16f:	89 85 2c ff ff ff    	mov    %eax,-0xd4(%ebp)
f012a175:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f012a17b:	ba 00 00 00 00       	mov    $0x0,%edx
f012a180:	f7 b5 30 ff ff ff    	divl   -0xd0(%ebp)
f012a186:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f012a18c:	29 d0                	sub    %edx,%eax
f012a18e:	01 c3                	add    %eax,%ebx
f012a190:	c7 85 28 ff ff ff 00 	movl   $0x1000,-0xd8(%ebp)
f012a197:	10 00 00 
f012a19a:	a0 40 26 78 f0       	mov    0xf0782640,%al
f012a19f:	0f b6 c0             	movzbl %al,%eax
f012a1a2:	c1 e0 04             	shl    $0x4,%eax
f012a1a5:	89 c2                	mov    %eax,%edx
f012a1a7:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f012a1ad:	01 d0                	add    %edx,%eax
f012a1af:	48                   	dec    %eax
f012a1b0:	89 85 24 ff ff ff    	mov    %eax,-0xdc(%ebp)
f012a1b6:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f012a1bc:	ba 00 00 00 00       	mov    $0x0,%edx
f012a1c1:	f7 b5 28 ff ff ff    	divl   -0xd8(%ebp)
f012a1c7:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f012a1cd:	29 d0                	sub    %edx,%eax
f012a1cf:	01 d8                	add    %ebx,%eax
f012a1d1:	2d 00 80 8f 09       	sub    $0x98f8000,%eax
f012a1d6:	39 c1                	cmp    %eax,%ecx
f012a1d8:	74 17                	je     f012a1f1 <test_kfreelast+0x971>
f012a1da:	83 ec 04             	sub    $0x4,%esp
f012a1dd:	68 60 b4 13 f0       	push   $0xf013b460
f012a1e2:	68 14 0d 00 00       	push   $0xd14
f012a1e7:	68 7a b3 13 f0       	push   $0xf013b37a
f012a1ec:	e8 14 60 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012a1f1:	e8 d2 9b fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012a1f6:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012a1f9:	74 17                	je     f012a212 <test_kfreelast+0x992>
f012a1fb:	83 ec 04             	sub    $0x4,%esp
f012a1fe:	68 94 b3 13 f0       	push   $0xf013b394
f012a203:	68 15 0d 00 00       	push   $0xd15
f012a208:	68 7a b3 13 f0       	push   $0xf013b37a
f012a20d:	e8 f3 5f fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1536) panic("Wrong allocation: pages are not loaded successfully into memory");
f012a212:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
f012a215:	e8 83 29 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f012a21a:	29 c3                	sub    %eax,%ebx
f012a21c:	89 d8                	mov    %ebx,%eax
f012a21e:	3d 00 06 00 00       	cmp    $0x600,%eax
f012a223:	74 17                	je     f012a23c <test_kfreelast+0x9bc>
f012a225:	83 ec 04             	sub    $0x4,%esp
f012a228:	68 fc b3 13 f0       	push   $0xf013b3fc
f012a22d:	68 16 0d 00 00       	push   $0xd16
f012a232:	68 7a b3 13 f0       	push   $0xf013b37a
f012a237:	e8 c9 5f fd ff       	call   f0100205 <_panic>
		lastIndices[6] = (6*Mega-kilo)/sizeof(char) - 1;
f012a23c:	c7 85 24 fe ff ff ff 	movl   $0x5ffbff,-0x1dc(%ebp)
f012a243:	fb 5f 00 

		//14 KB
		freeFrames = sys_calculate_free_frames() ;
f012a246:	e8 52 29 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f012a24b:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012a24e:	e8 75 9b fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012a253:	89 45 d0             	mov    %eax,-0x30(%ebp)
		ptr_allocations[7] = kmalloc(14*kilo);
f012a256:	83 ec 0c             	sub    $0xc,%esp
f012a259:	68 00 38 00 00       	push   $0x3800
f012a25e:	e8 22 d6 fd ff       	call   f0107885 <kmalloc>
f012a263:	83 c4 10             	add    $0x10,%esp
f012a266:	89 85 88 fd ff ff    	mov    %eax,-0x278(%ebp)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 13*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f012a26c:	8b 85 88 fd ff ff    	mov    -0x278(%ebp),%eax
f012a272:	89 c1                	mov    %eax,%ecx
f012a274:	c7 85 20 ff ff ff 00 	movl   $0x1000,-0xe0(%ebp)
f012a27b:	10 00 00 
f012a27e:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012a284:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012a289:	89 85 1c ff ff ff    	mov    %eax,-0xe4(%ebp)
f012a28f:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f012a295:	ba 00 00 00 00       	mov    $0x0,%edx
f012a29a:	f7 b5 20 ff ff ff    	divl   -0xe0(%ebp)
f012a2a0:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f012a2a6:	29 d0                	sub    %edx,%eax
f012a2a8:	89 c3                	mov    %eax,%ebx
f012a2aa:	c7 85 18 ff ff ff 00 	movl   $0x1000,-0xe8(%ebp)
f012a2b1:	10 00 00 
f012a2b4:	a0 40 26 78 f0       	mov    0xf0782640,%al
f012a2b9:	0f b6 d0             	movzbl %al,%edx
f012a2bc:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f012a2c2:	01 d0                	add    %edx,%eax
f012a2c4:	48                   	dec    %eax
f012a2c5:	89 85 14 ff ff ff    	mov    %eax,-0xec(%ebp)
f012a2cb:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f012a2d1:	ba 00 00 00 00       	mov    $0x0,%edx
f012a2d6:	f7 b5 18 ff ff ff    	divl   -0xe8(%ebp)
f012a2dc:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f012a2e2:	29 d0                	sub    %edx,%eax
f012a2e4:	01 c3                	add    %eax,%ebx
f012a2e6:	c7 85 10 ff ff ff 00 	movl   $0x1000,-0xf0(%ebp)
f012a2ed:	10 00 00 
f012a2f0:	a0 40 26 78 f0       	mov    0xf0782640,%al
f012a2f5:	0f b6 c0             	movzbl %al,%eax
f012a2f8:	c1 e0 04             	shl    $0x4,%eax
f012a2fb:	89 c2                	mov    %eax,%edx
f012a2fd:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f012a303:	01 d0                	add    %edx,%eax
f012a305:	48                   	dec    %eax
f012a306:	89 85 0c ff ff ff    	mov    %eax,-0xf4(%ebp)
f012a30c:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f012a312:	ba 00 00 00 00       	mov    $0x0,%edx
f012a317:	f7 b5 10 ff ff ff    	divl   -0xf0(%ebp)
f012a31d:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f012a323:	29 d0                	sub    %edx,%eax
f012a325:	01 d8                	add    %ebx,%eax
f012a327:	2d 00 80 2f 09       	sub    $0x92f8000,%eax
f012a32c:	39 c1                	cmp    %eax,%ecx
f012a32e:	74 17                	je     f012a347 <test_kfreelast+0xac7>
f012a330:	83 ec 04             	sub    $0x4,%esp
f012a333:	68 60 b4 13 f0       	push   $0xf013b460
f012a338:	68 1d 0d 00 00       	push   $0xd1d
f012a33d:	68 7a b3 13 f0       	push   $0xf013b37a
f012a342:	e8 be 5e fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012a347:	e8 7c 9a fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012a34c:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012a34f:	74 17                	je     f012a368 <test_kfreelast+0xae8>
f012a351:	83 ec 04             	sub    $0x4,%esp
f012a354:	68 94 b3 13 f0       	push   $0xf013b394
f012a359:	68 1e 0d 00 00       	push   $0xd1e
f012a35e:	68 7a b3 13 f0       	push   $0xf013b37a
f012a363:	e8 9d 5e fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 4) panic("Wrong allocation: pages are not loaded successfully into memory");
f012a368:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
f012a36b:	e8 2d 28 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f012a370:	29 c3                	sub    %eax,%ebx
f012a372:	89 d8                	mov    %ebx,%eax
f012a374:	83 f8 04             	cmp    $0x4,%eax
f012a377:	74 17                	je     f012a390 <test_kfreelast+0xb10>
f012a379:	83 ec 04             	sub    $0x4,%esp
f012a37c:	68 fc b3 13 f0       	push   $0xf013b3fc
f012a381:	68 1f 0d 00 00       	push   $0xd1f
f012a386:	68 7a b3 13 f0       	push   $0xf013b37a
f012a38b:	e8 75 5e fd ff       	call   f0100205 <_panic>
		lastIndices[7] = (14*kilo)/sizeof(char) - 1;
f012a390:	c7 85 28 fe ff ff ff 	movl   $0x37ff,-0x1d8(%ebp)
f012a397:	37 00 00 
		ptr = (char*)ptr_allocations[7];
f012a39a:	8b 85 88 fd ff ff    	mov    -0x278(%ebp),%eax
f012a3a0:	89 45 84             	mov    %eax,-0x7c(%ebp)
		for (i = 0; i < lastIndices[7]; ++i)
f012a3a3:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012a3aa:	eb 0e                	jmp    f012a3ba <test_kfreelast+0xb3a>
		{
			ptr[i] = 7 ;
f012a3ac:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012a3af:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012a3b2:	01 d0                	add    %edx,%eax
f012a3b4:	c6 00 07             	movb   $0x7,(%eax)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 13*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 4) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[7] = (14*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[7];
		for (i = 0; i < lastIndices[7]; ++i)
f012a3b7:	ff 45 f4             	incl   -0xc(%ebp)
f012a3ba:	8b 85 28 fe ff ff    	mov    -0x1d8(%ebp),%eax
f012a3c0:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012a3c3:	7f e7                	jg     f012a3ac <test_kfreelast+0xb2c>
	}

	//kfree some of the allocated spaces
	{
		//kfree 1st 2 MB
		int freeFrames = sys_calculate_free_frames() ;
f012a3c5:	e8 d3 27 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f012a3ca:	89 85 08 ff ff ff    	mov    %eax,-0xf8(%ebp)
		int freeDiskFrames = pf_calculate_free_frames() ;
f012a3d0:	e8 f3 99 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012a3d5:	89 85 04 ff ff ff    	mov    %eax,-0xfc(%ebp)
		kfree(ptr_allocations[0]);
f012a3db:	8b 85 6c fd ff ff    	mov    -0x294(%ebp),%eax
f012a3e1:	83 ec 0c             	sub    $0xc,%esp
f012a3e4:	50                   	push   %eax
f012a3e5:	e8 66 d5 fd ff       	call   f0107950 <kfree>
f012a3ea:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012a3ed:	e8 d6 99 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012a3f2:	3b 85 04 ff ff ff    	cmp    -0xfc(%ebp),%eax
f012a3f8:	74 17                	je     f012a411 <test_kfreelast+0xb91>
f012a3fa:	83 ec 04             	sub    $0x4,%esp
f012a3fd:	68 94 b3 13 f0       	push   $0xf013b394
f012a402:	68 2e 0d 00 00       	push   $0xd2e
f012a407:	68 7a b3 13 f0       	push   $0xf013b37a
f012a40c:	e8 f4 5d fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512 ) panic("Wrong kfree: pages in memory are not freed correctly");
f012a411:	e8 87 27 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f012a416:	89 c2                	mov    %eax,%edx
f012a418:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f012a41e:	29 c2                	sub    %eax,%edx
f012a420:	89 d0                	mov    %edx,%eax
f012a422:	3d 00 02 00 00       	cmp    $0x200,%eax
f012a427:	74 17                	je     f012a440 <test_kfreelast+0xbc0>
f012a429:	83 ec 04             	sub    $0x4,%esp
f012a42c:	68 04 bb 13 f0       	push   $0xf013bb04
f012a431:	68 2f 0d 00 00       	push   $0xd2f
f012a436:	68 7a b3 13 f0       	push   $0xf013b37a
f012a43b:	e8 c5 5d fd ff       	call   f0100205 <_panic>

		//kfree 2nd 2 MB
		freeFrames = sys_calculate_free_frames() ;
f012a440:	e8 58 27 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f012a445:	89 85 08 ff ff ff    	mov    %eax,-0xf8(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012a44b:	e8 78 99 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012a450:	89 85 04 ff ff ff    	mov    %eax,-0xfc(%ebp)
		kfree(ptr_allocations[1]);
f012a456:	8b 85 70 fd ff ff    	mov    -0x290(%ebp),%eax
f012a45c:	83 ec 0c             	sub    $0xc,%esp
f012a45f:	50                   	push   %eax
f012a460:	e8 eb d4 fd ff       	call   f0107950 <kfree>
f012a465:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012a468:	e8 5b 99 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012a46d:	3b 85 04 ff ff ff    	cmp    -0xfc(%ebp),%eax
f012a473:	74 17                	je     f012a48c <test_kfreelast+0xc0c>
f012a475:	83 ec 04             	sub    $0x4,%esp
f012a478:	68 94 b3 13 f0       	push   $0xf013b394
f012a47d:	68 35 0d 00 00       	push   $0xd35
f012a482:	68 7a b3 13 f0       	push   $0xf013b37a
f012a487:	e8 79 5d fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512) panic("Wrong kfree: pages in memory are not freed correctly");
f012a48c:	e8 0c 27 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f012a491:	89 c2                	mov    %eax,%edx
f012a493:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f012a499:	29 c2                	sub    %eax,%edx
f012a49b:	89 d0                	mov    %edx,%eax
f012a49d:	3d 00 02 00 00       	cmp    $0x200,%eax
f012a4a2:	74 17                	je     f012a4bb <test_kfreelast+0xc3b>
f012a4a4:	83 ec 04             	sub    $0x4,%esp
f012a4a7:	68 04 bb 13 f0       	push   $0xf013bb04
f012a4ac:	68 36 0d 00 00       	push   $0xd36
f012a4b1:	68 7a b3 13 f0       	push   $0xf013b37a
f012a4b6:	e8 4a 5d fd ff       	call   f0100205 <_panic>

		//kfree 6 MB
		freeFrames = sys_calculate_free_frames() ;
f012a4bb:	e8 dd 26 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f012a4c0:	89 85 08 ff ff ff    	mov    %eax,-0xf8(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012a4c6:	e8 fd 98 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012a4cb:	89 85 04 ff ff ff    	mov    %eax,-0xfc(%ebp)
		kfree(ptr_allocations[6]);
f012a4d1:	8b 85 84 fd ff ff    	mov    -0x27c(%ebp),%eax
f012a4d7:	83 ec 0c             	sub    $0xc,%esp
f012a4da:	50                   	push   %eax
f012a4db:	e8 70 d4 fd ff       	call   f0107950 <kfree>
f012a4e0:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012a4e3:	e8 e0 98 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012a4e8:	3b 85 04 ff ff ff    	cmp    -0xfc(%ebp),%eax
f012a4ee:	74 17                	je     f012a507 <test_kfreelast+0xc87>
f012a4f0:	83 ec 04             	sub    $0x4,%esp
f012a4f3:	68 94 b3 13 f0       	push   $0xf013b394
f012a4f8:	68 3c 0d 00 00       	push   $0xd3c
f012a4fd:	68 7a b3 13 f0       	push   $0xf013b37a
f012a502:	e8 fe 5c fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 6*Mega/4096) panic("Wrong kfree: pages in memory are not freed correctly");
f012a507:	e8 91 26 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f012a50c:	89 c2                	mov    %eax,%edx
f012a50e:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f012a514:	29 c2                	sub    %eax,%edx
f012a516:	89 d0                	mov    %edx,%eax
f012a518:	3d 00 06 00 00       	cmp    $0x600,%eax
f012a51d:	74 17                	je     f012a536 <test_kfreelast+0xcb6>
f012a51f:	83 ec 04             	sub    $0x4,%esp
f012a522:	68 04 bb 13 f0       	push   $0xf013bb04
f012a527:	68 3d 0d 00 00       	push   $0xd3d
f012a52c:	68 7a b3 13 f0       	push   $0xf013b37a
f012a531:	e8 cf 5c fd ff       	call   f0100205 <_panic>
	}

	//Check memory access after kfree
	{
		//2 KB
		ptr = (char*)ptr_allocations[2];
f012a536:	8b 85 74 fd ff ff    	mov    -0x28c(%ebp),%eax
f012a53c:	89 45 84             	mov    %eax,-0x7c(%ebp)
		for (i = 0; i < lastIndices[2]; ++i)
f012a53f:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012a546:	eb 1e                	jmp    f012a566 <test_kfreelast+0xce6>
		{
			sums[2] += ptr[i] ;
f012a548:	8b 95 c4 fd ff ff    	mov    -0x23c(%ebp),%edx
f012a54e:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f012a551:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012a554:	01 c8                	add    %ecx,%eax
f012a556:	8a 00                	mov    (%eax),%al
f012a558:	0f be c0             	movsbl %al,%eax
f012a55b:	01 d0                	add    %edx,%eax
f012a55d:	89 85 c4 fd ff ff    	mov    %eax,-0x23c(%ebp)

	//Check memory access after kfree
	{
		//2 KB
		ptr = (char*)ptr_allocations[2];
		for (i = 0; i < lastIndices[2]; ++i)
f012a563:	ff 45 f4             	incl   -0xc(%ebp)
f012a566:	8b 85 14 fe ff ff    	mov    -0x1ec(%ebp),%eax
f012a56c:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012a56f:	7f d7                	jg     f012a548 <test_kfreelast+0xcc8>
		{
			sums[2] += ptr[i] ;
		}
		if (sums[2] != 2*lastIndices[2])	panic("kfree: invalid read after freeing some allocations");
f012a571:	8b 95 c4 fd ff ff    	mov    -0x23c(%ebp),%edx
f012a577:	8b 85 14 fe ff ff    	mov    -0x1ec(%ebp),%eax
f012a57d:	01 c0                	add    %eax,%eax
f012a57f:	39 c2                	cmp    %eax,%edx
f012a581:	74 17                	je     f012a59a <test_kfreelast+0xd1a>
f012a583:	83 ec 04             	sub    $0x4,%esp
f012a586:	68 60 bb 13 f0       	push   $0xf013bb60
f012a58b:	68 48 0d 00 00       	push   $0xd48
f012a590:	68 7a b3 13 f0       	push   $0xf013b37a
f012a595:	e8 6b 5c fd ff       	call   f0100205 <_panic>

		//2 KB
		ptr = (char*)ptr_allocations[3];
f012a59a:	8b 85 78 fd ff ff    	mov    -0x288(%ebp),%eax
f012a5a0:	89 45 84             	mov    %eax,-0x7c(%ebp)
		for (i = 0; i < lastIndices[3]; ++i)
f012a5a3:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012a5aa:	eb 1e                	jmp    f012a5ca <test_kfreelast+0xd4a>
		{
			sums[3] += ptr[i] ;
f012a5ac:	8b 95 c8 fd ff ff    	mov    -0x238(%ebp),%edx
f012a5b2:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f012a5b5:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012a5b8:	01 c8                	add    %ecx,%eax
f012a5ba:	8a 00                	mov    (%eax),%al
f012a5bc:	0f be c0             	movsbl %al,%eax
f012a5bf:	01 d0                	add    %edx,%eax
f012a5c1:	89 85 c8 fd ff ff    	mov    %eax,-0x238(%ebp)
		}
		if (sums[2] != 2*lastIndices[2])	panic("kfree: invalid read after freeing some allocations");

		//2 KB
		ptr = (char*)ptr_allocations[3];
		for (i = 0; i < lastIndices[3]; ++i)
f012a5c7:	ff 45 f4             	incl   -0xc(%ebp)
f012a5ca:	8b 85 18 fe ff ff    	mov    -0x1e8(%ebp),%eax
f012a5d0:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012a5d3:	7f d7                	jg     f012a5ac <test_kfreelast+0xd2c>
		{
			sums[3] += ptr[i] ;
		}
		if (sums[3] != 3*lastIndices[3])	panic("kfree: invalid read after freeing some allocations");
f012a5d5:	8b 95 c8 fd ff ff    	mov    -0x238(%ebp),%edx
f012a5db:	8b 85 18 fe ff ff    	mov    -0x1e8(%ebp),%eax
f012a5e1:	89 c1                	mov    %eax,%ecx
f012a5e3:	01 c9                	add    %ecx,%ecx
f012a5e5:	01 c8                	add    %ecx,%eax
f012a5e7:	39 c2                	cmp    %eax,%edx
f012a5e9:	74 17                	je     f012a602 <test_kfreelast+0xd82>
f012a5eb:	83 ec 04             	sub    $0x4,%esp
f012a5ee:	68 60 bb 13 f0       	push   $0xf013bb60
f012a5f3:	68 50 0d 00 00       	push   $0xd50
f012a5f8:	68 7a b3 13 f0       	push   $0xf013b37a
f012a5fd:	e8 03 5c fd ff       	call   f0100205 <_panic>

		//7 KB
		ptr = (char*)ptr_allocations[4];
f012a602:	8b 85 7c fd ff ff    	mov    -0x284(%ebp),%eax
f012a608:	89 45 84             	mov    %eax,-0x7c(%ebp)
		for (i = 0; i < lastIndices[4]; ++i)
f012a60b:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012a612:	eb 1e                	jmp    f012a632 <test_kfreelast+0xdb2>
		{
			sums[4] += ptr[i] ;
f012a614:	8b 95 cc fd ff ff    	mov    -0x234(%ebp),%edx
f012a61a:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f012a61d:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012a620:	01 c8                	add    %ecx,%eax
f012a622:	8a 00                	mov    (%eax),%al
f012a624:	0f be c0             	movsbl %al,%eax
f012a627:	01 d0                	add    %edx,%eax
f012a629:	89 85 cc fd ff ff    	mov    %eax,-0x234(%ebp)
		}
		if (sums[3] != 3*lastIndices[3])	panic("kfree: invalid read after freeing some allocations");

		//7 KB
		ptr = (char*)ptr_allocations[4];
		for (i = 0; i < lastIndices[4]; ++i)
f012a62f:	ff 45 f4             	incl   -0xc(%ebp)
f012a632:	8b 85 1c fe ff ff    	mov    -0x1e4(%ebp),%eax
f012a638:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012a63b:	7f d7                	jg     f012a614 <test_kfreelast+0xd94>
		{
			sums[4] += ptr[i] ;
		}
		if (sums[4] != 4*lastIndices[4])	panic("kfree: invalid read after freeing some allocations");
f012a63d:	8b 85 cc fd ff ff    	mov    -0x234(%ebp),%eax
f012a643:	8b 95 1c fe ff ff    	mov    -0x1e4(%ebp),%edx
f012a649:	c1 e2 02             	shl    $0x2,%edx
f012a64c:	39 d0                	cmp    %edx,%eax
f012a64e:	74 17                	je     f012a667 <test_kfreelast+0xde7>
f012a650:	83 ec 04             	sub    $0x4,%esp
f012a653:	68 60 bb 13 f0       	push   $0xf013bb60
f012a658:	68 58 0d 00 00       	push   $0xd58
f012a65d:	68 7a b3 13 f0       	push   $0xf013b37a
f012a662:	e8 9e 5b fd ff       	call   f0100205 <_panic>

		//3 MB
		ptr = (char*)ptr_allocations[5];
f012a667:	8b 85 80 fd ff ff    	mov    -0x280(%ebp),%eax
f012a66d:	89 45 84             	mov    %eax,-0x7c(%ebp)
		for (i = 0; i < lastIndices[5]; ++i)
f012a670:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012a677:	eb 1e                	jmp    f012a697 <test_kfreelast+0xe17>
		{
			sums[5] += ptr[i] ;
f012a679:	8b 95 d0 fd ff ff    	mov    -0x230(%ebp),%edx
f012a67f:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f012a682:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012a685:	01 c8                	add    %ecx,%eax
f012a687:	8a 00                	mov    (%eax),%al
f012a689:	0f be c0             	movsbl %al,%eax
f012a68c:	01 d0                	add    %edx,%eax
f012a68e:	89 85 d0 fd ff ff    	mov    %eax,-0x230(%ebp)
		}
		if (sums[4] != 4*lastIndices[4])	panic("kfree: invalid read after freeing some allocations");

		//3 MB
		ptr = (char*)ptr_allocations[5];
		for (i = 0; i < lastIndices[5]; ++i)
f012a694:	ff 45 f4             	incl   -0xc(%ebp)
f012a697:	8b 85 20 fe ff ff    	mov    -0x1e0(%ebp),%eax
f012a69d:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012a6a0:	7f d7                	jg     f012a679 <test_kfreelast+0xdf9>
		{
			sums[5] += ptr[i] ;
		}
		if (sums[5] != 5*lastIndices[5])	panic("kfree: invalid read after freeing some allocations");
f012a6a2:	8b 8d d0 fd ff ff    	mov    -0x230(%ebp),%ecx
f012a6a8:	8b 95 20 fe ff ff    	mov    -0x1e0(%ebp),%edx
f012a6ae:	89 d0                	mov    %edx,%eax
f012a6b0:	c1 e0 02             	shl    $0x2,%eax
f012a6b3:	01 d0                	add    %edx,%eax
f012a6b5:	39 c1                	cmp    %eax,%ecx
f012a6b7:	74 17                	je     f012a6d0 <test_kfreelast+0xe50>
f012a6b9:	83 ec 04             	sub    $0x4,%esp
f012a6bc:	68 60 bb 13 f0       	push   $0xf013bb60
f012a6c1:	68 60 0d 00 00       	push   $0xd60
f012a6c6:	68 7a b3 13 f0       	push   $0xf013b37a
f012a6cb:	e8 35 5b fd ff       	call   f0100205 <_panic>

		//14 KB
		ptr = (char*)ptr_allocations[7];
f012a6d0:	8b 85 88 fd ff ff    	mov    -0x278(%ebp),%eax
f012a6d6:	89 45 84             	mov    %eax,-0x7c(%ebp)
		for (i = 0; i < lastIndices[7]; ++i)
f012a6d9:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012a6e0:	eb 1e                	jmp    f012a700 <test_kfreelast+0xe80>
		{
			sums[7] += ptr[i] ;
f012a6e2:	8b 95 d8 fd ff ff    	mov    -0x228(%ebp),%edx
f012a6e8:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f012a6eb:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012a6ee:	01 c8                	add    %ecx,%eax
f012a6f0:	8a 00                	mov    (%eax),%al
f012a6f2:	0f be c0             	movsbl %al,%eax
f012a6f5:	01 d0                	add    %edx,%eax
f012a6f7:	89 85 d8 fd ff ff    	mov    %eax,-0x228(%ebp)
		}
		if (sums[5] != 5*lastIndices[5])	panic("kfree: invalid read after freeing some allocations");

		//14 KB
		ptr = (char*)ptr_allocations[7];
		for (i = 0; i < lastIndices[7]; ++i)
f012a6fd:	ff 45 f4             	incl   -0xc(%ebp)
f012a700:	8b 85 28 fe ff ff    	mov    -0x1d8(%ebp),%eax
f012a706:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012a709:	7f d7                	jg     f012a6e2 <test_kfreelast+0xe62>
		{
			sums[7] += ptr[i] ;
		}
		if (sums[7] != 7*lastIndices[7])	panic("kfree: invalid read after freeing some allocations");
f012a70b:	8b 8d d8 fd ff ff    	mov    -0x228(%ebp),%ecx
f012a711:	8b 95 28 fe ff ff    	mov    -0x1d8(%ebp),%edx
f012a717:	89 d0                	mov    %edx,%eax
f012a719:	01 c0                	add    %eax,%eax
f012a71b:	01 d0                	add    %edx,%eax
f012a71d:	01 c0                	add    %eax,%eax
f012a71f:	01 d0                	add    %edx,%eax
f012a721:	39 c1                	cmp    %eax,%ecx
f012a723:	74 17                	je     f012a73c <test_kfreelast+0xebc>
f012a725:	83 ec 04             	sub    $0x4,%esp
f012a728:	68 60 bb 13 f0       	push   $0xf013bb60
f012a72d:	68 68 0d 00 00       	push   $0xd68
f012a732:	68 7a b3 13 f0       	push   $0xf013b37a
f012a737:	e8 c9 5a fd ff       	call   f0100205 <_panic>
	}

	//Allocate after kfree
	{
		//20 KB
		freeFrames = sys_calculate_free_frames() ;
f012a73c:	e8 5c 24 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f012a741:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012a744:	e8 7f 96 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012a749:	89 45 d0             	mov    %eax,-0x30(%ebp)
		ptr_allocations[8] = kmalloc(20*kilo);
f012a74c:	83 ec 0c             	sub    $0xc,%esp
f012a74f:	68 00 50 00 00       	push   $0x5000
f012a754:	e8 2c d1 fd ff       	call   f0107885 <kmalloc>
f012a759:	83 c4 10             	add    $0x10,%esp
f012a75c:	89 85 8c fd ff ff    	mov    %eax,-0x274(%ebp)
		if ((uint32) ptr_allocations[8] != (ACTUAL_START + 13*Mega + 32*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f012a762:	8b 85 8c fd ff ff    	mov    -0x274(%ebp),%eax
f012a768:	89 c1                	mov    %eax,%ecx
f012a76a:	c7 85 00 ff ff ff 00 	movl   $0x1000,-0x100(%ebp)
f012a771:	10 00 00 
f012a774:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f012a77a:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012a77f:	89 85 fc fe ff ff    	mov    %eax,-0x104(%ebp)
f012a785:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f012a78b:	ba 00 00 00 00       	mov    $0x0,%edx
f012a790:	f7 b5 00 ff ff ff    	divl   -0x100(%ebp)
f012a796:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f012a79c:	29 d0                	sub    %edx,%eax
f012a79e:	89 c3                	mov    %eax,%ebx
f012a7a0:	c7 85 f8 fe ff ff 00 	movl   $0x1000,-0x108(%ebp)
f012a7a7:	10 00 00 
f012a7aa:	a0 40 26 78 f0       	mov    0xf0782640,%al
f012a7af:	0f b6 d0             	movzbl %al,%edx
f012a7b2:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f012a7b8:	01 d0                	add    %edx,%eax
f012a7ba:	48                   	dec    %eax
f012a7bb:	89 85 f4 fe ff ff    	mov    %eax,-0x10c(%ebp)
f012a7c1:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f012a7c7:	ba 00 00 00 00       	mov    $0x0,%edx
f012a7cc:	f7 b5 f8 fe ff ff    	divl   -0x108(%ebp)
f012a7d2:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f012a7d8:	29 d0                	sub    %edx,%eax
f012a7da:	01 c3                	add    %eax,%ebx
f012a7dc:	c7 85 f0 fe ff ff 00 	movl   $0x1000,-0x110(%ebp)
f012a7e3:	10 00 00 
f012a7e6:	a0 40 26 78 f0       	mov    0xf0782640,%al
f012a7eb:	0f b6 c0             	movzbl %al,%eax
f012a7ee:	c1 e0 04             	shl    $0x4,%eax
f012a7f1:	89 c2                	mov    %eax,%edx
f012a7f3:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f012a7f9:	01 d0                	add    %edx,%eax
f012a7fb:	48                   	dec    %eax
f012a7fc:	89 85 ec fe ff ff    	mov    %eax,-0x114(%ebp)
f012a802:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f012a808:	ba 00 00 00 00       	mov    $0x0,%edx
f012a80d:	f7 b5 f0 fe ff ff    	divl   -0x110(%ebp)
f012a813:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f012a819:	29 d0                	sub    %edx,%eax
f012a81b:	01 d8                	add    %ebx,%eax
f012a81d:	2d 00 40 2f 09       	sub    $0x92f4000,%eax
f012a822:	39 c1                	cmp    %eax,%ecx
f012a824:	74 17                	je     f012a83d <test_kfreelast+0xfbd>
f012a826:	83 ec 04             	sub    $0x4,%esp
f012a829:	68 60 b4 13 f0       	push   $0xf013b460
f012a82e:	68 71 0d 00 00       	push   $0xd71
f012a833:	68 7a b3 13 f0       	push   $0xf013b37a
f012a838:	e8 c8 59 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012a83d:	e8 86 95 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012a842:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012a845:	74 17                	je     f012a85e <test_kfreelast+0xfde>
f012a847:	83 ec 04             	sub    $0x4,%esp
f012a84a:	68 94 b3 13 f0       	push   $0xf013b394
f012a84f:	68 72 0d 00 00       	push   $0xd72
f012a854:	68 7a b3 13 f0       	push   $0xf013b37a
f012a859:	e8 a7 59 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 5) panic("Wrong allocation: pages are not loaded successfully into memory");
f012a85e:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
f012a861:	e8 37 23 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f012a866:	29 c3                	sub    %eax,%ebx
f012a868:	89 d8                	mov    %ebx,%eax
f012a86a:	83 f8 05             	cmp    $0x5,%eax
f012a86d:	74 17                	je     f012a886 <test_kfreelast+0x1006>
f012a86f:	83 ec 04             	sub    $0x4,%esp
f012a872:	68 fc b3 13 f0       	push   $0xf013b3fc
f012a877:	68 73 0d 00 00       	push   $0xd73
f012a87c:	68 7a b3 13 f0       	push   $0xf013b37a
f012a881:	e8 7f 59 fd ff       	call   f0100205 <_panic>
		lastIndices[8] = (20*kilo)/sizeof(char) - 1;
f012a886:	c7 85 2c fe ff ff ff 	movl   $0x4fff,-0x1d4(%ebp)
f012a88d:	4f 00 00 
		ptr = (char*)ptr_allocations[8];
f012a890:	8b 85 8c fd ff ff    	mov    -0x274(%ebp),%eax
f012a896:	89 45 84             	mov    %eax,-0x7c(%ebp)
		for (i = 0; i < lastIndices[8]; ++i)
f012a899:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012a8a0:	eb 0e                	jmp    f012a8b0 <test_kfreelast+0x1030>
		{
			ptr[i] = 8 ;
f012a8a2:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012a8a5:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012a8a8:	01 d0                	add    %edx,%eax
f012a8aa:	c6 00 08             	movb   $0x8,(%eax)
		if ((uint32) ptr_allocations[8] != (ACTUAL_START + 13*Mega + 32*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 5) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[8] = (20*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[8];
		for (i = 0; i < lastIndices[8]; ++i)
f012a8ad:	ff 45 f4             	incl   -0xc(%ebp)
f012a8b0:	8b 85 2c fe ff ff    	mov    -0x1d4(%ebp),%eax
f012a8b6:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012a8b9:	7f e7                	jg     f012a8a2 <test_kfreelast+0x1022>
		{
			ptr[i] = 8 ;
		}

		//1 MB
		freeFrames = sys_calculate_free_frames() ;
f012a8bb:	e8 dd 22 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f012a8c0:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012a8c3:	e8 00 95 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012a8c8:	89 45 d0             	mov    %eax,-0x30(%ebp)
		ptr_allocations[9] = kmalloc(1*Mega);
f012a8cb:	83 ec 0c             	sub    $0xc,%esp
f012a8ce:	68 00 00 10 00       	push   $0x100000
f012a8d3:	e8 ad cf fd ff       	call   f0107885 <kmalloc>
f012a8d8:	83 c4 10             	add    $0x10,%esp
f012a8db:	89 85 90 fd ff ff    	mov    %eax,-0x270(%ebp)
		if ((uint32) ptr_allocations[9] != (ACTUAL_START + 13*Mega + 52*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f012a8e1:	8b 85 90 fd ff ff    	mov    -0x270(%ebp),%eax
f012a8e7:	89 c1                	mov    %eax,%ecx
f012a8e9:	c7 85 e8 fe ff ff 00 	movl   $0x1000,-0x118(%ebp)
f012a8f0:	10 00 00 
f012a8f3:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f012a8f9:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012a8fe:	89 85 e4 fe ff ff    	mov    %eax,-0x11c(%ebp)
f012a904:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f012a90a:	ba 00 00 00 00       	mov    $0x0,%edx
f012a90f:	f7 b5 e8 fe ff ff    	divl   -0x118(%ebp)
f012a915:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f012a91b:	29 d0                	sub    %edx,%eax
f012a91d:	89 c3                	mov    %eax,%ebx
f012a91f:	c7 85 e0 fe ff ff 00 	movl   $0x1000,-0x120(%ebp)
f012a926:	10 00 00 
f012a929:	a0 40 26 78 f0       	mov    0xf0782640,%al
f012a92e:	0f b6 d0             	movzbl %al,%edx
f012a931:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012a937:	01 d0                	add    %edx,%eax
f012a939:	48                   	dec    %eax
f012a93a:	89 85 dc fe ff ff    	mov    %eax,-0x124(%ebp)
f012a940:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f012a946:	ba 00 00 00 00       	mov    $0x0,%edx
f012a94b:	f7 b5 e0 fe ff ff    	divl   -0x120(%ebp)
f012a951:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f012a957:	29 d0                	sub    %edx,%eax
f012a959:	01 c3                	add    %eax,%ebx
f012a95b:	c7 85 d8 fe ff ff 00 	movl   $0x1000,-0x128(%ebp)
f012a962:	10 00 00 
f012a965:	a0 40 26 78 f0       	mov    0xf0782640,%al
f012a96a:	0f b6 c0             	movzbl %al,%eax
f012a96d:	c1 e0 04             	shl    $0x4,%eax
f012a970:	89 c2                	mov    %eax,%edx
f012a972:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f012a978:	01 d0                	add    %edx,%eax
f012a97a:	48                   	dec    %eax
f012a97b:	89 85 d4 fe ff ff    	mov    %eax,-0x12c(%ebp)
f012a981:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f012a987:	ba 00 00 00 00       	mov    $0x0,%edx
f012a98c:	f7 b5 d8 fe ff ff    	divl   -0x128(%ebp)
f012a992:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f012a998:	29 d0                	sub    %edx,%eax
f012a99a:	01 d8                	add    %ebx,%eax
f012a99c:	2d 00 f0 2e 09       	sub    $0x92ef000,%eax
f012a9a1:	39 c1                	cmp    %eax,%ecx
f012a9a3:	74 17                	je     f012a9bc <test_kfreelast+0x113c>
f012a9a5:	83 ec 04             	sub    $0x4,%esp
f012a9a8:	68 60 b4 13 f0       	push   $0xf013b460
f012a9ad:	68 7f 0d 00 00       	push   $0xd7f
f012a9b2:	68 7a b3 13 f0       	push   $0xf013b37a
f012a9b7:	e8 49 58 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012a9bc:	e8 07 94 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012a9c1:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012a9c4:	74 17                	je     f012a9dd <test_kfreelast+0x115d>
f012a9c6:	83 ec 04             	sub    $0x4,%esp
f012a9c9:	68 94 b3 13 f0       	push   $0xf013b394
f012a9ce:	68 80 0d 00 00       	push   $0xd80
f012a9d3:	68 7a b3 13 f0       	push   $0xf013b37a
f012a9d8:	e8 28 58 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: pages are not loaded successfully into memory");
f012a9dd:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
f012a9e0:	e8 b8 21 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f012a9e5:	29 c3                	sub    %eax,%ebx
f012a9e7:	89 d8                	mov    %ebx,%eax
f012a9e9:	3d 00 01 00 00       	cmp    $0x100,%eax
f012a9ee:	74 17                	je     f012aa07 <test_kfreelast+0x1187>
f012a9f0:	83 ec 04             	sub    $0x4,%esp
f012a9f3:	68 fc b3 13 f0       	push   $0xf013b3fc
f012a9f8:	68 81 0d 00 00       	push   $0xd81
f012a9fd:	68 7a b3 13 f0       	push   $0xf013b37a
f012aa02:	e8 fe 57 fd ff       	call   f0100205 <_panic>
		lastIndices[9] = (1*Mega)/sizeof(char) - 1;
f012aa07:	c7 85 30 fe ff ff ff 	movl   $0xfffff,-0x1d0(%ebp)
f012aa0e:	ff 0f 00 
		ptr = (char*)ptr_allocations[9];
f012aa11:	8b 85 90 fd ff ff    	mov    -0x270(%ebp),%eax
f012aa17:	89 45 84             	mov    %eax,-0x7c(%ebp)
		for (i = 0; i < lastIndices[9]; ++i)
f012aa1a:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012aa21:	eb 0e                	jmp    f012aa31 <test_kfreelast+0x11b1>
		{
			ptr[i] = 9 ;
f012aa23:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012aa26:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012aa29:	01 d0                	add    %edx,%eax
f012aa2b:	c6 00 09             	movb   $0x9,(%eax)
		if ((uint32) ptr_allocations[9] != (ACTUAL_START + 13*Mega + 52*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[9] = (1*Mega)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[9];
		for (i = 0; i < lastIndices[9]; ++i)
f012aa2e:	ff 45 f4             	incl   -0xc(%ebp)
f012aa31:	8b 85 30 fe ff ff    	mov    -0x1d0(%ebp),%eax
f012aa37:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012aa3a:	7f e7                	jg     f012aa23 <test_kfreelast+0x11a3>
		{
			ptr[i] = 9 ;
		}
	}

	ce = 0;
f012aa3c:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	//kfree last allocated space
	{
		//kfree 1 MB
		freeFrames = sys_calculate_free_frames() ;
f012aa43:	e8 55 21 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f012aa48:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012aa4b:	e8 78 93 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012aa50:	89 45 d0             	mov    %eax,-0x30(%ebp)
		kfree(ptr_allocations[9]);
f012aa53:	8b 85 90 fd ff ff    	mov    -0x270(%ebp),%eax
f012aa59:	83 ec 0c             	sub    $0xc,%esp
f012aa5c:	50                   	push   %eax
f012aa5d:	e8 ee ce fd ff       	call   f0107950 <kfree>
f012aa62:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012aa65:	e8 5e 93 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012aa6a:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012aa6d:	74 17                	je     f012aa86 <test_kfreelast+0x1206>
f012aa6f:	83 ec 04             	sub    $0x4,%esp
f012aa72:	68 94 b3 13 f0       	push   $0xf013b394
f012aa77:	68 91 0d 00 00       	push   $0xd91
f012aa7c:	68 7a b3 13 f0       	push   $0xf013b37a
f012aa81:	e8 7f 57 fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 256) panic("Wrong kfree: pages in memory are not freed correctly");
f012aa86:	e8 12 21 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f012aa8b:	89 c2                	mov    %eax,%edx
f012aa8d:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f012aa90:	29 c2                	sub    %eax,%edx
f012aa92:	89 d0                	mov    %edx,%eax
f012aa94:	3d 00 01 00 00       	cmp    $0x100,%eax
f012aa99:	74 17                	je     f012aab2 <test_kfreelast+0x1232>
f012aa9b:	83 ec 04             	sub    $0x4,%esp
f012aa9e:	68 04 bb 13 f0       	push   $0xf013bb04
f012aaa3:	68 92 0d 00 00       	push   $0xd92
f012aaa8:	68 7a b3 13 f0       	push   $0xf013b37a
f012aaad:	e8 53 57 fd ff       	call   f0100205 <_panic>
	}

	//Allocate after kfree last [25%]
	{
		//30 KB
		freeFrames = sys_calculate_free_frames() ;
f012aab2:	e8 e6 20 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f012aab7:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012aaba:	e8 09 93 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012aabf:	89 45 d0             	mov    %eax,-0x30(%ebp)
		ptr_allocations[10] = kmalloc(30*kilo);
f012aac2:	83 ec 0c             	sub    $0xc,%esp
f012aac5:	68 00 78 00 00       	push   $0x7800
f012aaca:	e8 b6 cd fd ff       	call   f0107885 <kmalloc>
f012aacf:	83 c4 10             	add    $0x10,%esp
f012aad2:	89 85 94 fd ff ff    	mov    %eax,-0x26c(%ebp)
		if ((uint32) ptr_allocations[10] != (ACTUAL_START + 13*Mega + 52*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f012aad8:	8b 85 94 fd ff ff    	mov    -0x26c(%ebp),%eax
f012aade:	89 c1                	mov    %eax,%ecx
f012aae0:	c7 85 d0 fe ff ff 00 	movl   $0x1000,-0x130(%ebp)
f012aae7:	10 00 00 
f012aaea:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f012aaf0:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012aaf5:	89 85 cc fe ff ff    	mov    %eax,-0x134(%ebp)
f012aafb:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f012ab01:	ba 00 00 00 00       	mov    $0x0,%edx
f012ab06:	f7 b5 d0 fe ff ff    	divl   -0x130(%ebp)
f012ab0c:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f012ab12:	29 d0                	sub    %edx,%eax
f012ab14:	89 c3                	mov    %eax,%ebx
f012ab16:	c7 85 c8 fe ff ff 00 	movl   $0x1000,-0x138(%ebp)
f012ab1d:	10 00 00 
f012ab20:	a0 40 26 78 f0       	mov    0xf0782640,%al
f012ab25:	0f b6 d0             	movzbl %al,%edx
f012ab28:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f012ab2e:	01 d0                	add    %edx,%eax
f012ab30:	48                   	dec    %eax
f012ab31:	89 85 c4 fe ff ff    	mov    %eax,-0x13c(%ebp)
f012ab37:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f012ab3d:	ba 00 00 00 00       	mov    $0x0,%edx
f012ab42:	f7 b5 c8 fe ff ff    	divl   -0x138(%ebp)
f012ab48:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f012ab4e:	29 d0                	sub    %edx,%eax
f012ab50:	01 c3                	add    %eax,%ebx
f012ab52:	c7 85 c0 fe ff ff 00 	movl   $0x1000,-0x140(%ebp)
f012ab59:	10 00 00 
f012ab5c:	a0 40 26 78 f0       	mov    0xf0782640,%al
f012ab61:	0f b6 c0             	movzbl %al,%eax
f012ab64:	c1 e0 04             	shl    $0x4,%eax
f012ab67:	89 c2                	mov    %eax,%edx
f012ab69:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f012ab6f:	01 d0                	add    %edx,%eax
f012ab71:	48                   	dec    %eax
f012ab72:	89 85 bc fe ff ff    	mov    %eax,-0x144(%ebp)
f012ab78:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f012ab7e:	ba 00 00 00 00       	mov    $0x0,%edx
f012ab83:	f7 b5 c0 fe ff ff    	divl   -0x140(%ebp)
f012ab89:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f012ab8f:	29 d0                	sub    %edx,%eax
f012ab91:	01 d8                	add    %ebx,%eax
f012ab93:	2d 00 f0 2e 09       	sub    $0x92ef000,%eax
f012ab98:	39 c1                	cmp    %eax,%ecx
f012ab9a:	74 17                	je     f012abb3 <test_kfreelast+0x1333>
f012ab9c:	83 ec 04             	sub    $0x4,%esp
f012ab9f:	68 60 b4 13 f0       	push   $0xf013b460
f012aba4:	68 9b 0d 00 00       	push   $0xd9b
f012aba9:	68 7a b3 13 f0       	push   $0xf013b37a
f012abae:	e8 52 56 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012abb3:	e8 10 92 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012abb8:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012abbb:	74 17                	je     f012abd4 <test_kfreelast+0x1354>
f012abbd:	83 ec 04             	sub    $0x4,%esp
f012abc0:	68 94 b3 13 f0       	push   $0xf013b394
f012abc5:	68 9c 0d 00 00       	push   $0xd9c
f012abca:	68 7a b3 13 f0       	push   $0xf013b37a
f012abcf:	e8 31 56 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 8) panic("Wrong allocation: pages are not loaded successfully into memory");
f012abd4:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
f012abd7:	e8 c1 1f fe ff       	call   f010cb9d <sys_calculate_free_frames>
f012abdc:	29 c3                	sub    %eax,%ebx
f012abde:	89 d8                	mov    %ebx,%eax
f012abe0:	83 f8 08             	cmp    $0x8,%eax
f012abe3:	74 17                	je     f012abfc <test_kfreelast+0x137c>
f012abe5:	83 ec 04             	sub    $0x4,%esp
f012abe8:	68 fc b3 13 f0       	push   $0xf013b3fc
f012abed:	68 9d 0d 00 00       	push   $0xd9d
f012abf2:	68 7a b3 13 f0       	push   $0xf013b37a
f012abf7:	e8 09 56 fd ff       	call   f0100205 <_panic>
		lastIndices[10] = (30*kilo)/sizeof(char) - 1;
f012abfc:	c7 85 34 fe ff ff ff 	movl   $0x77ff,-0x1cc(%ebp)
f012ac03:	77 00 00 
		ptr = (char*)ptr_allocations[10];
f012ac06:	8b 85 94 fd ff ff    	mov    -0x26c(%ebp),%eax
f012ac0c:	89 45 84             	mov    %eax,-0x7c(%ebp)
		for (i = 0; i < lastIndices[10]; ++i)
f012ac0f:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012ac16:	eb 0e                	jmp    f012ac26 <test_kfreelast+0x13a6>
		{
			ptr[i] = 10 ;
f012ac18:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012ac1b:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012ac1e:	01 d0                	add    %edx,%eax
f012ac20:	c6 00 0a             	movb   $0xa,(%eax)
		if ((uint32) ptr_allocations[10] != (ACTUAL_START + 13*Mega + 52*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 8) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[10] = (30*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[10];
		for (i = 0; i < lastIndices[10]; ++i)
f012ac23:	ff 45 f4             	incl   -0xc(%ebp)
f012ac26:	8b 85 34 fe ff ff    	mov    -0x1cc(%ebp),%eax
f012ac2c:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012ac2f:	7f e7                	jg     f012ac18 <test_kfreelast+0x1398>
		{
			ptr[i] = 10 ;
		}

		//1 MB
		freeFrames = sys_calculate_free_frames() ;
f012ac31:	e8 67 1f fe ff       	call   f010cb9d <sys_calculate_free_frames>
f012ac36:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012ac39:	e8 8a 91 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012ac3e:	89 45 d0             	mov    %eax,-0x30(%ebp)
		ptr_allocations[11] = kmalloc(1*Mega);
f012ac41:	83 ec 0c             	sub    $0xc,%esp
f012ac44:	68 00 00 10 00       	push   $0x100000
f012ac49:	e8 37 cc fd ff       	call   f0107885 <kmalloc>
f012ac4e:	83 c4 10             	add    $0x10,%esp
f012ac51:	89 85 98 fd ff ff    	mov    %eax,-0x268(%ebp)
		if ((uint32) ptr_allocations[11] != (ACTUAL_START + 13*Mega + 84*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f012ac57:	8b 85 98 fd ff ff    	mov    -0x268(%ebp),%eax
f012ac5d:	89 c1                	mov    %eax,%ecx
f012ac5f:	c7 85 b8 fe ff ff 00 	movl   $0x1000,-0x148(%ebp)
f012ac66:	10 00 00 
f012ac69:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f012ac6f:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012ac74:	89 85 b4 fe ff ff    	mov    %eax,-0x14c(%ebp)
f012ac7a:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f012ac80:	ba 00 00 00 00       	mov    $0x0,%edx
f012ac85:	f7 b5 b8 fe ff ff    	divl   -0x148(%ebp)
f012ac8b:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f012ac91:	29 d0                	sub    %edx,%eax
f012ac93:	89 c3                	mov    %eax,%ebx
f012ac95:	c7 85 b0 fe ff ff 00 	movl   $0x1000,-0x150(%ebp)
f012ac9c:	10 00 00 
f012ac9f:	a0 40 26 78 f0       	mov    0xf0782640,%al
f012aca4:	0f b6 d0             	movzbl %al,%edx
f012aca7:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f012acad:	01 d0                	add    %edx,%eax
f012acaf:	48                   	dec    %eax
f012acb0:	89 85 ac fe ff ff    	mov    %eax,-0x154(%ebp)
f012acb6:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f012acbc:	ba 00 00 00 00       	mov    $0x0,%edx
f012acc1:	f7 b5 b0 fe ff ff    	divl   -0x150(%ebp)
f012acc7:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f012accd:	29 d0                	sub    %edx,%eax
f012accf:	01 c3                	add    %eax,%ebx
f012acd1:	c7 85 a8 fe ff ff 00 	movl   $0x1000,-0x158(%ebp)
f012acd8:	10 00 00 
f012acdb:	a0 40 26 78 f0       	mov    0xf0782640,%al
f012ace0:	0f b6 c0             	movzbl %al,%eax
f012ace3:	c1 e0 04             	shl    $0x4,%eax
f012ace6:	89 c2                	mov    %eax,%edx
f012ace8:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f012acee:	01 d0                	add    %edx,%eax
f012acf0:	48                   	dec    %eax
f012acf1:	89 85 a4 fe ff ff    	mov    %eax,-0x15c(%ebp)
f012acf7:	8b 85 a4 fe ff ff    	mov    -0x15c(%ebp),%eax
f012acfd:	ba 00 00 00 00       	mov    $0x0,%edx
f012ad02:	f7 b5 a8 fe ff ff    	divl   -0x158(%ebp)
f012ad08:	8b 85 a4 fe ff ff    	mov    -0x15c(%ebp),%eax
f012ad0e:	29 d0                	sub    %edx,%eax
f012ad10:	01 d8                	add    %ebx,%eax
f012ad12:	2d 00 70 2e 09       	sub    $0x92e7000,%eax
f012ad17:	39 c1                	cmp    %eax,%ecx
f012ad19:	74 17                	je     f012ad32 <test_kfreelast+0x14b2>
f012ad1b:	83 ec 04             	sub    $0x4,%esp
f012ad1e:	68 60 b4 13 f0       	push   $0xf013b460
f012ad23:	68 a9 0d 00 00       	push   $0xda9
f012ad28:	68 7a b3 13 f0       	push   $0xf013b37a
f012ad2d:	e8 d3 54 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012ad32:	e8 91 90 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012ad37:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012ad3a:	74 17                	je     f012ad53 <test_kfreelast+0x14d3>
f012ad3c:	83 ec 04             	sub    $0x4,%esp
f012ad3f:	68 94 b3 13 f0       	push   $0xf013b394
f012ad44:	68 aa 0d 00 00       	push   $0xdaa
f012ad49:	68 7a b3 13 f0       	push   $0xf013b37a
f012ad4e:	e8 b2 54 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: pages are not loaded successfully into memory");
f012ad53:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
f012ad56:	e8 42 1e fe ff       	call   f010cb9d <sys_calculate_free_frames>
f012ad5b:	29 c3                	sub    %eax,%ebx
f012ad5d:	89 d8                	mov    %ebx,%eax
f012ad5f:	3d 00 01 00 00       	cmp    $0x100,%eax
f012ad64:	74 17                	je     f012ad7d <test_kfreelast+0x14fd>
f012ad66:	83 ec 04             	sub    $0x4,%esp
f012ad69:	68 fc b3 13 f0       	push   $0xf013b3fc
f012ad6e:	68 ab 0d 00 00       	push   $0xdab
f012ad73:	68 7a b3 13 f0       	push   $0xf013b37a
f012ad78:	e8 88 54 fd ff       	call   f0100205 <_panic>
		lastIndices[11] = (1*Mega)/sizeof(char) - 1;
f012ad7d:	c7 85 38 fe ff ff ff 	movl   $0xfffff,-0x1c8(%ebp)
f012ad84:	ff 0f 00 
		ptr = (char*)ptr_allocations[11];
f012ad87:	8b 85 98 fd ff ff    	mov    -0x268(%ebp),%eax
f012ad8d:	89 45 84             	mov    %eax,-0x7c(%ebp)
		for (i = 0; i < lastIndices[11]; ++i)
f012ad90:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012ad97:	eb 0e                	jmp    f012ada7 <test_kfreelast+0x1527>
		{
			ptr[i] = 11 ;
f012ad99:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012ad9c:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012ad9f:	01 d0                	add    %edx,%eax
f012ada1:	c6 00 0b             	movb   $0xb,(%eax)
		if ((uint32) ptr_allocations[11] != (ACTUAL_START + 13*Mega + 84*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[11] = (1*Mega)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[11];
		for (i = 0; i < lastIndices[11]; ++i)
f012ada4:	ff 45 f4             	incl   -0xc(%ebp)
f012ada7:	8b 85 38 fe ff ff    	mov    -0x1c8(%ebp),%eax
f012adad:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012adb0:	7f e7                	jg     f012ad99 <test_kfreelast+0x1519>
		{
			ptr[i] = 11 ;
		}
	}
	ce += 25;
f012adb2:	83 45 f0 19          	addl   $0x19,-0x10(%ebp)
	cprintf("\nkfreelast: current evaluation = %d%\n", ce);
f012adb6:	83 ec 08             	sub    $0x8,%esp
f012adb9:	ff 75 f0             	pushl  -0x10(%ebp)
f012adbc:	68 ac c3 13 f0       	push   $0xf013c3ac
f012adc1:	e8 48 5f fd ff       	call   f0100d0e <cprintf>
f012adc6:	83 c4 10             	add    $0x10,%esp

	int f = 0;
f012adc9:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
	//kfree last allocated two spaces
	{
		//kfree 1 MB
		freeFrames = sys_calculate_free_frames() ;
f012add0:	e8 c8 1d fe ff       	call   f010cb9d <sys_calculate_free_frames>
f012add5:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012add8:	e8 eb 8f fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012addd:	89 45 d0             	mov    %eax,-0x30(%ebp)
		kfree(ptr_allocations[11]);
f012ade0:	8b 85 98 fd ff ff    	mov    -0x268(%ebp),%eax
f012ade6:	83 ec 0c             	sub    $0xc,%esp
f012ade9:	50                   	push   %eax
f012adea:	e8 61 cb fd ff       	call   f0107950 <kfree>
f012adef:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f012adf2:	e8 d1 8f fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012adf7:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012adfa:	74 1d                	je     f012ae19 <test_kfreelast+0x1599>
f012adfc:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012ae00:	75 17                	jne    f012ae19 <test_kfreelast+0x1599>
f012ae02:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012ae09:	83 ec 0c             	sub    $0xc,%esp
f012ae0c:	68 d4 c3 13 f0       	push   $0xf013c3d4
f012ae11:	e8 f8 5e fd ff       	call   f0100d0e <cprintf>
f012ae16:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 256) if (!f) {f=1; cprintf("\nWrong kfree: pages in memory are not freed correctly");}
f012ae19:	e8 7f 1d fe ff       	call   f010cb9d <sys_calculate_free_frames>
f012ae1e:	89 c2                	mov    %eax,%edx
f012ae20:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f012ae23:	29 c2                	sub    %eax,%edx
f012ae25:	89 d0                	mov    %edx,%eax
f012ae27:	3d 00 01 00 00       	cmp    $0x100,%eax
f012ae2c:	74 1d                	je     f012ae4b <test_kfreelast+0x15cb>
f012ae2e:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012ae32:	75 17                	jne    f012ae4b <test_kfreelast+0x15cb>
f012ae34:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012ae3b:	83 ec 0c             	sub    $0xc,%esp
f012ae3e:	68 40 c4 13 f0       	push   $0xf013c440
f012ae43:	e8 c6 5e fd ff       	call   f0100d0e <cprintf>
f012ae48:	83 c4 10             	add    $0x10,%esp

		//kfree 30 KB
		freeFrames = sys_calculate_free_frames() ;
f012ae4b:	e8 4d 1d fe ff       	call   f010cb9d <sys_calculate_free_frames>
f012ae50:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012ae53:	e8 70 8f fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012ae58:	89 45 d0             	mov    %eax,-0x30(%ebp)
		kfree(ptr_allocations[10]);
f012ae5b:	8b 85 94 fd ff ff    	mov    -0x26c(%ebp),%eax
f012ae61:	83 ec 0c             	sub    $0xc,%esp
f012ae64:	50                   	push   %eax
f012ae65:	e8 e6 ca fd ff       	call   f0107950 <kfree>
f012ae6a:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f012ae6d:	e8 56 8f fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012ae72:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012ae75:	74 1d                	je     f012ae94 <test_kfreelast+0x1614>
f012ae77:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012ae7b:	75 17                	jne    f012ae94 <test_kfreelast+0x1614>
f012ae7d:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012ae84:	83 ec 0c             	sub    $0xc,%esp
f012ae87:	68 d4 c3 13 f0       	push   $0xf013c3d4
f012ae8c:	e8 7d 5e fd ff       	call   f0100d0e <cprintf>
f012ae91:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 8) if (!f) {f=1; cprintf("\nWrong kfree: pages in memory are not freed correctly");}
f012ae94:	e8 04 1d fe ff       	call   f010cb9d <sys_calculate_free_frames>
f012ae99:	89 c2                	mov    %eax,%edx
f012ae9b:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f012ae9e:	29 c2                	sub    %eax,%edx
f012aea0:	89 d0                	mov    %edx,%eax
f012aea2:	83 f8 08             	cmp    $0x8,%eax
f012aea5:	74 1d                	je     f012aec4 <test_kfreelast+0x1644>
f012aea7:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012aeab:	75 17                	jne    f012aec4 <test_kfreelast+0x1644>
f012aead:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012aeb4:	83 ec 0c             	sub    $0xc,%esp
f012aeb7:	68 40 c4 13 f0       	push   $0xf013c440
f012aebc:	e8 4d 5e fd ff       	call   f0100d0e <cprintf>
f012aec1:	83 c4 10             	add    $0x10,%esp
	}

	//Allocate after kfree last allocated two spaces (in order) [10%]
	{
		//10 KB
		freeFrames = sys_calculate_free_frames() ;
f012aec4:	e8 d4 1c fe ff       	call   f010cb9d <sys_calculate_free_frames>
f012aec9:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012aecc:	e8 f7 8e fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012aed1:	89 45 d0             	mov    %eax,-0x30(%ebp)
		ptr_allocations[12] = kmalloc(10*kilo);
f012aed4:	83 ec 0c             	sub    $0xc,%esp
f012aed7:	68 00 28 00 00       	push   $0x2800
f012aedc:	e8 a4 c9 fd ff       	call   f0107885 <kmalloc>
f012aee1:	83 c4 10             	add    $0x10,%esp
f012aee4:	89 85 9c fd ff ff    	mov    %eax,-0x264(%ebp)
		if ((uint32) ptr_allocations[12] != (ACTUAL_START + 13*Mega + 52*kilo)) if (!f) {f=1; cprintf("\nWrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");}
f012aeea:	8b 85 9c fd ff ff    	mov    -0x264(%ebp),%eax
f012aef0:	89 c1                	mov    %eax,%ecx
f012aef2:	c7 85 a0 fe ff ff 00 	movl   $0x1000,-0x160(%ebp)
f012aef9:	10 00 00 
f012aefc:	8b 85 a0 fe ff ff    	mov    -0x160(%ebp),%eax
f012af02:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012af07:	89 85 9c fe ff ff    	mov    %eax,-0x164(%ebp)
f012af0d:	8b 85 9c fe ff ff    	mov    -0x164(%ebp),%eax
f012af13:	ba 00 00 00 00       	mov    $0x0,%edx
f012af18:	f7 b5 a0 fe ff ff    	divl   -0x160(%ebp)
f012af1e:	8b 85 9c fe ff ff    	mov    -0x164(%ebp),%eax
f012af24:	29 d0                	sub    %edx,%eax
f012af26:	89 c3                	mov    %eax,%ebx
f012af28:	c7 85 98 fe ff ff 00 	movl   $0x1000,-0x168(%ebp)
f012af2f:	10 00 00 
f012af32:	a0 40 26 78 f0       	mov    0xf0782640,%al
f012af37:	0f b6 d0             	movzbl %al,%edx
f012af3a:	8b 85 98 fe ff ff    	mov    -0x168(%ebp),%eax
f012af40:	01 d0                	add    %edx,%eax
f012af42:	48                   	dec    %eax
f012af43:	89 85 94 fe ff ff    	mov    %eax,-0x16c(%ebp)
f012af49:	8b 85 94 fe ff ff    	mov    -0x16c(%ebp),%eax
f012af4f:	ba 00 00 00 00       	mov    $0x0,%edx
f012af54:	f7 b5 98 fe ff ff    	divl   -0x168(%ebp)
f012af5a:	8b 85 94 fe ff ff    	mov    -0x16c(%ebp),%eax
f012af60:	29 d0                	sub    %edx,%eax
f012af62:	01 c3                	add    %eax,%ebx
f012af64:	c7 85 90 fe ff ff 00 	movl   $0x1000,-0x170(%ebp)
f012af6b:	10 00 00 
f012af6e:	a0 40 26 78 f0       	mov    0xf0782640,%al
f012af73:	0f b6 c0             	movzbl %al,%eax
f012af76:	c1 e0 04             	shl    $0x4,%eax
f012af79:	89 c2                	mov    %eax,%edx
f012af7b:	8b 85 90 fe ff ff    	mov    -0x170(%ebp),%eax
f012af81:	01 d0                	add    %edx,%eax
f012af83:	48                   	dec    %eax
f012af84:	89 85 8c fe ff ff    	mov    %eax,-0x174(%ebp)
f012af8a:	8b 85 8c fe ff ff    	mov    -0x174(%ebp),%eax
f012af90:	ba 00 00 00 00       	mov    $0x0,%edx
f012af95:	f7 b5 90 fe ff ff    	divl   -0x170(%ebp)
f012af9b:	8b 85 8c fe ff ff    	mov    -0x174(%ebp),%eax
f012afa1:	29 d0                	sub    %edx,%eax
f012afa3:	01 d8                	add    %ebx,%eax
f012afa5:	2d 00 f0 2e 09       	sub    $0x92ef000,%eax
f012afaa:	39 c1                	cmp    %eax,%ecx
f012afac:	74 1d                	je     f012afcb <test_kfreelast+0x174b>
f012afae:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012afb2:	75 17                	jne    f012afcb <test_kfreelast+0x174b>
f012afb4:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012afbb:	83 ec 0c             	sub    $0xc,%esp
f012afbe:	68 78 c4 13 f0       	push   $0xf013c478
f012afc3:	e8 46 5d fd ff       	call   f0100d0e <cprintf>
f012afc8:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f012afcb:	e8 f8 8d fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012afd0:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012afd3:	74 1d                	je     f012aff2 <test_kfreelast+0x1772>
f012afd5:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012afd9:	75 17                	jne    f012aff2 <test_kfreelast+0x1772>
f012afdb:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012afe2:	83 ec 0c             	sub    $0xc,%esp
f012afe5:	68 d4 c3 13 f0       	push   $0xf013c3d4
f012afea:	e8 1f 5d fd ff       	call   f0100d0e <cprintf>
f012afef:	83 c4 10             	add    $0x10,%esp
		if ((freeFrames - sys_calculate_free_frames()) != 3) if (!f) {f=1; cprintf("\nWrong allocation: pages are not loaded successfully into memory");}
f012aff2:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
f012aff5:	e8 a3 1b fe ff       	call   f010cb9d <sys_calculate_free_frames>
f012affa:	29 c3                	sub    %eax,%ebx
f012affc:	89 d8                	mov    %ebx,%eax
f012affe:	83 f8 03             	cmp    $0x3,%eax
f012b001:	74 1d                	je     f012b020 <test_kfreelast+0x17a0>
f012b003:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012b007:	75 17                	jne    f012b020 <test_kfreelast+0x17a0>
f012b009:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012b010:	83 ec 0c             	sub    $0xc,%esp
f012b013:	68 e0 c4 13 f0       	push   $0xf013c4e0
f012b018:	e8 f1 5c fd ff       	call   f0100d0e <cprintf>
f012b01d:	83 c4 10             	add    $0x10,%esp
		lastIndices[12] = (10*kilo)/sizeof(char) - 1;
f012b020:	c7 85 3c fe ff ff ff 	movl   $0x27ff,-0x1c4(%ebp)
f012b027:	27 00 00 
		ptr = (char*)ptr_allocations[12];
f012b02a:	8b 85 9c fd ff ff    	mov    -0x264(%ebp),%eax
f012b030:	89 45 84             	mov    %eax,-0x7c(%ebp)
		for (i = 0; i < lastIndices[12]; ++i)
f012b033:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012b03a:	eb 0e                	jmp    f012b04a <test_kfreelast+0x17ca>
		{
			ptr[i] = 12 ;
f012b03c:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012b03f:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012b042:	01 d0                	add    %edx,%eax
f012b044:	c6 00 0c             	movb   $0xc,(%eax)
		if ((uint32) ptr_allocations[12] != (ACTUAL_START + 13*Mega + 52*kilo)) if (!f) {f=1; cprintf("\nWrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");}
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
		if ((freeFrames - sys_calculate_free_frames()) != 3) if (!f) {f=1; cprintf("\nWrong allocation: pages are not loaded successfully into memory");}
		lastIndices[12] = (10*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[12];
		for (i = 0; i < lastIndices[12]; ++i)
f012b047:	ff 45 f4             	incl   -0xc(%ebp)
f012b04a:	8b 85 3c fe ff ff    	mov    -0x1c4(%ebp),%eax
f012b050:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012b053:	7f e7                	jg     f012b03c <test_kfreelast+0x17bc>
		{
			ptr[i] = 12 ;
		}
	}

	if (!f) {ce += 10;cprintf("\nkfreelast: current evaluation = %d%\n", ce);} f=0;
f012b055:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012b059:	75 17                	jne    f012b072 <test_kfreelast+0x17f2>
f012b05b:	83 45 f0 0a          	addl   $0xa,-0x10(%ebp)
f012b05f:	83 ec 08             	sub    $0x8,%esp
f012b062:	ff 75 f0             	pushl  -0x10(%ebp)
f012b065:	68 ac c3 13 f0       	push   $0xf013c3ac
f012b06a:	e8 9f 5c fd ff       	call   f0100d0e <cprintf>
f012b06f:	83 c4 10             	add    $0x10,%esp
f012b072:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)

	//Check memory access after kfree last and kalloc [15%]
	{
		//10 KB
		ptr = (char*)ptr_allocations[12];
f012b079:	8b 85 9c fd ff ff    	mov    -0x264(%ebp),%eax
f012b07f:	89 45 84             	mov    %eax,-0x7c(%ebp)
		for (i = 0; i < lastIndices[12]; ++i)
f012b082:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012b089:	eb 1e                	jmp    f012b0a9 <test_kfreelast+0x1829>
		{
			sums[12] += ptr[i] ;
f012b08b:	8b 95 ec fd ff ff    	mov    -0x214(%ebp),%edx
f012b091:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f012b094:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012b097:	01 c8                	add    %ecx,%eax
f012b099:	8a 00                	mov    (%eax),%al
f012b09b:	0f be c0             	movsbl %al,%eax
f012b09e:	01 d0                	add    %edx,%eax
f012b0a0:	89 85 ec fd ff ff    	mov    %eax,-0x214(%ebp)

	//Check memory access after kfree last and kalloc [15%]
	{
		//10 KB
		ptr = (char*)ptr_allocations[12];
		for (i = 0; i < lastIndices[12]; ++i)
f012b0a6:	ff 45 f4             	incl   -0xc(%ebp)
f012b0a9:	8b 85 3c fe ff ff    	mov    -0x1c4(%ebp),%eax
f012b0af:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012b0b2:	7f d7                	jg     f012b08b <test_kfreelast+0x180b>
		{
			sums[12] += ptr[i] ;
		}
		if (sums[12] != 12*lastIndices[12])	if (!f) {f=1; cprintf("\nkfree: invalid read after freeing some allocations");}
f012b0b4:	8b 8d ec fd ff ff    	mov    -0x214(%ebp),%ecx
f012b0ba:	8b 95 3c fe ff ff    	mov    -0x1c4(%ebp),%edx
f012b0c0:	89 d0                	mov    %edx,%eax
f012b0c2:	01 c0                	add    %eax,%eax
f012b0c4:	01 d0                	add    %edx,%eax
f012b0c6:	c1 e0 02             	shl    $0x2,%eax
f012b0c9:	39 c1                	cmp    %eax,%ecx
f012b0cb:	74 1d                	je     f012b0ea <test_kfreelast+0x186a>
f012b0cd:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012b0d1:	75 17                	jne    f012b0ea <test_kfreelast+0x186a>
f012b0d3:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012b0da:	83 ec 0c             	sub    $0xc,%esp
f012b0dd:	68 24 c5 13 f0       	push   $0xf013c524
f012b0e2:	e8 27 5c fd ff       	call   f0100d0e <cprintf>
f012b0e7:	83 c4 10             	add    $0x10,%esp


		//Bypass the PAGE FAULT on <MOVB immediate, reg> instruction by setting its length
		//and continue executing the remaining code
		sys_bypassPageFault(3);
f012b0ea:	83 ec 0c             	sub    $0xc,%esp
f012b0ed:	6a 03                	push   $0x3
f012b0ef:	e8 49 1f fe ff       	call   f010d03d <sys_bypassPageFault>
f012b0f4:	83 c4 10             	add    $0x10,%esp

		ptr = (char *) ptr_allocations[12] + 12*kilo;
f012b0f7:	8b 85 9c fd ff ff    	mov    -0x264(%ebp),%eax
f012b0fd:	05 00 30 00 00       	add    $0x3000,%eax
f012b102:	89 45 84             	mov    %eax,-0x7c(%ebp)

		for (i = 0; i < 30*kilo; ++i)
f012b105:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012b10c:	eb 3c                	jmp    f012b14a <test_kfreelast+0x18ca>
		{
			ptr[i] = 10;
f012b10e:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012b111:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012b114:	01 d0                	add    %edx,%eax
f012b116:	c6 00 0a             	movb   $0xa,(%eax)
			//cprintf("\n\ncr2 = %x, faulted addr = %x", sys_rcr2(), (uint32)&(ptr[0]));
			if (sys_rcr2() != (uint32)&(ptr[i])) if (!f) {f=1; cprintf("\nkfree: successful access to freed space!! it should not be succeeded");}
f012b119:	e8 0d 1f fe ff       	call   f010d02b <sys_rcr2>
f012b11e:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f012b121:	8b 55 84             	mov    -0x7c(%ebp),%edx
f012b124:	01 ca                	add    %ecx,%edx
f012b126:	39 d0                	cmp    %edx,%eax
f012b128:	74 1d                	je     f012b147 <test_kfreelast+0x18c7>
f012b12a:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012b12e:	75 17                	jne    f012b147 <test_kfreelast+0x18c7>
f012b130:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012b137:	83 ec 0c             	sub    $0xc,%esp
f012b13a:	68 58 c5 13 f0       	push   $0xf013c558
f012b13f:	e8 ca 5b fd ff       	call   f0100d0e <cprintf>
f012b144:	83 c4 10             	add    $0x10,%esp
		//and continue executing the remaining code
		sys_bypassPageFault(3);

		ptr = (char *) ptr_allocations[12] + 12*kilo;

		for (i = 0; i < 30*kilo; ++i)
f012b147:	ff 45 f4             	incl   -0xc(%ebp)
f012b14a:	81 7d f4 ff 77 00 00 	cmpl   $0x77ff,-0xc(%ebp)
f012b151:	7e bb                	jle    f012b10e <test_kfreelast+0x188e>
			//cprintf("\n\ncr2 = %x, faulted addr = %x", sys_rcr2(), (uint32)&(ptr[0]));
			if (sys_rcr2() != (uint32)&(ptr[i])) if (!f) {f=1; cprintf("\nkfree: successful access to freed space!! it should not be succeeded");}
		}

		//set it to 0 again to cancel the bypassing option
		sys_bypassPageFault(0);
f012b153:	83 ec 0c             	sub    $0xc,%esp
f012b156:	6a 00                	push   $0x0
f012b158:	e8 e0 1e fe ff       	call   f010d03d <sys_bypassPageFault>
f012b15d:	83 c4 10             	add    $0x10,%esp

	}

	if (!f) {ce += 15;cprintf("\nkfreelast: current evaluation = %d%\n", ce);} f=0;
f012b160:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012b164:	75 17                	jne    f012b17d <test_kfreelast+0x18fd>
f012b166:	83 45 f0 0f          	addl   $0xf,-0x10(%ebp)
f012b16a:	83 ec 08             	sub    $0x8,%esp
f012b16d:	ff 75 f0             	pushl  -0x10(%ebp)
f012b170:	68 ac c3 13 f0       	push   $0xf013c3ac
f012b175:	e8 94 5b fd ff       	call   f0100d0e <cprintf>
f012b17a:	83 c4 10             	add    $0x10,%esp
f012b17d:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)

	//kfree last allocated three spaces [but with different order]
	{
		//kfree 10 KB
		freeFrames = sys_calculate_free_frames() ;
f012b184:	e8 14 1a fe ff       	call   f010cb9d <sys_calculate_free_frames>
f012b189:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012b18c:	e8 37 8c fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012b191:	89 45 d0             	mov    %eax,-0x30(%ebp)
		kfree(ptr_allocations[12]);
f012b194:	8b 85 9c fd ff ff    	mov    -0x264(%ebp),%eax
f012b19a:	83 ec 0c             	sub    $0xc,%esp
f012b19d:	50                   	push   %eax
f012b19e:	e8 ad c7 fd ff       	call   f0107950 <kfree>
f012b1a3:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f012b1a6:	e8 1d 8c fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012b1ab:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012b1ae:	74 1d                	je     f012b1cd <test_kfreelast+0x194d>
f012b1b0:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012b1b4:	75 17                	jne    f012b1cd <test_kfreelast+0x194d>
f012b1b6:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012b1bd:	83 ec 0c             	sub    $0xc,%esp
f012b1c0:	68 d4 c3 13 f0       	push   $0xf013c3d4
f012b1c5:	e8 44 5b fd ff       	call   f0100d0e <cprintf>
f012b1ca:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 3) if (!f) {f=1; cprintf("\nWrong kfree: pages in memory are not freed correctly");}
f012b1cd:	e8 cb 19 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f012b1d2:	89 c2                	mov    %eax,%edx
f012b1d4:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f012b1d7:	29 c2                	sub    %eax,%edx
f012b1d9:	89 d0                	mov    %edx,%eax
f012b1db:	83 f8 03             	cmp    $0x3,%eax
f012b1de:	74 1d                	je     f012b1fd <test_kfreelast+0x197d>
f012b1e0:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012b1e4:	75 17                	jne    f012b1fd <test_kfreelast+0x197d>
f012b1e6:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012b1ed:	83 ec 0c             	sub    $0xc,%esp
f012b1f0:	68 40 c4 13 f0       	push   $0xf013c440
f012b1f5:	e8 14 5b fd ff       	call   f0100d0e <cprintf>
f012b1fa:	83 c4 10             	add    $0x10,%esp

		//kfree 14 KB
		freeFrames = sys_calculate_free_frames() ;
f012b1fd:	e8 9b 19 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f012b202:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012b205:	e8 be 8b fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012b20a:	89 45 d0             	mov    %eax,-0x30(%ebp)
		kfree(ptr_allocations[7]);
f012b20d:	8b 85 88 fd ff ff    	mov    -0x278(%ebp),%eax
f012b213:	83 ec 0c             	sub    $0xc,%esp
f012b216:	50                   	push   %eax
f012b217:	e8 34 c7 fd ff       	call   f0107950 <kfree>
f012b21c:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f012b21f:	e8 a4 8b fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012b224:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012b227:	74 1d                	je     f012b246 <test_kfreelast+0x19c6>
f012b229:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012b22d:	75 17                	jne    f012b246 <test_kfreelast+0x19c6>
f012b22f:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012b236:	83 ec 0c             	sub    $0xc,%esp
f012b239:	68 d4 c3 13 f0       	push   $0xf013c3d4
f012b23e:	e8 cb 5a fd ff       	call   f0100d0e <cprintf>
f012b243:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 4) if (!f) {f=1; cprintf("\nWrong kfree: pages in memory are not freed correctly");}
f012b246:	e8 52 19 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f012b24b:	89 c2                	mov    %eax,%edx
f012b24d:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f012b250:	29 c2                	sub    %eax,%edx
f012b252:	89 d0                	mov    %edx,%eax
f012b254:	83 f8 04             	cmp    $0x4,%eax
f012b257:	74 1d                	je     f012b276 <test_kfreelast+0x19f6>
f012b259:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012b25d:	75 17                	jne    f012b276 <test_kfreelast+0x19f6>
f012b25f:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012b266:	83 ec 0c             	sub    $0xc,%esp
f012b269:	68 40 c4 13 f0       	push   $0xf013c440
f012b26e:	e8 9b 5a fd ff       	call   f0100d0e <cprintf>
f012b273:	83 c4 10             	add    $0x10,%esp

		//kfree 20 KB
		freeFrames = sys_calculate_free_frames() ;
f012b276:	e8 22 19 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f012b27b:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012b27e:	e8 45 8b fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012b283:	89 45 d0             	mov    %eax,-0x30(%ebp)
		kfree(ptr_allocations[8]);
f012b286:	8b 85 8c fd ff ff    	mov    -0x274(%ebp),%eax
f012b28c:	83 ec 0c             	sub    $0xc,%esp
f012b28f:	50                   	push   %eax
f012b290:	e8 bb c6 fd ff       	call   f0107950 <kfree>
f012b295:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f012b298:	e8 2b 8b fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012b29d:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012b2a0:	74 1d                	je     f012b2bf <test_kfreelast+0x1a3f>
f012b2a2:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012b2a6:	75 17                	jne    f012b2bf <test_kfreelast+0x1a3f>
f012b2a8:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012b2af:	83 ec 0c             	sub    $0xc,%esp
f012b2b2:	68 d4 c3 13 f0       	push   $0xf013c3d4
f012b2b7:	e8 52 5a fd ff       	call   f0100d0e <cprintf>
f012b2bc:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 5) if (!f) {f=1; cprintf("\nWrong kfree: pages in memory are not freed correctly");}
f012b2bf:	e8 d9 18 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f012b2c4:	89 c2                	mov    %eax,%edx
f012b2c6:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f012b2c9:	29 c2                	sub    %eax,%edx
f012b2cb:	89 d0                	mov    %edx,%eax
f012b2cd:	83 f8 05             	cmp    $0x5,%eax
f012b2d0:	74 1d                	je     f012b2ef <test_kfreelast+0x1a6f>
f012b2d2:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012b2d6:	75 17                	jne    f012b2ef <test_kfreelast+0x1a6f>
f012b2d8:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012b2df:	83 ec 0c             	sub    $0xc,%esp
f012b2e2:	68 40 c4 13 f0       	push   $0xf013c440
f012b2e7:	e8 22 5a fd ff       	call   f0100d0e <cprintf>
f012b2ec:	83 c4 10             	add    $0x10,%esp


	//Allocate after kfree last allocated 3 spaces with different order [25%]
	{
		//50 KB
		freeFrames = sys_calculate_free_frames() ;
f012b2ef:	e8 a9 18 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f012b2f4:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012b2f7:	e8 cc 8a fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012b2fc:	89 45 d0             	mov    %eax,-0x30(%ebp)
		ptr_allocations[13] = kmalloc(50*kilo);
f012b2ff:	83 ec 0c             	sub    $0xc,%esp
f012b302:	68 00 c8 00 00       	push   $0xc800
f012b307:	e8 79 c5 fd ff       	call   f0107885 <kmalloc>
f012b30c:	83 c4 10             	add    $0x10,%esp
f012b30f:	89 85 a0 fd ff ff    	mov    %eax,-0x260(%ebp)
		if ((uint32) ptr_allocations[13] != (ACTUAL_START + 7*Mega + 16*kilo)) if (!f) {f=1; cprintf("\nWrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");}
f012b315:	8b 85 a0 fd ff ff    	mov    -0x260(%ebp),%eax
f012b31b:	89 c1                	mov    %eax,%ecx
f012b31d:	c7 85 88 fe ff ff 00 	movl   $0x1000,-0x178(%ebp)
f012b324:	10 00 00 
f012b327:	8b 85 88 fe ff ff    	mov    -0x178(%ebp),%eax
f012b32d:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012b332:	89 85 84 fe ff ff    	mov    %eax,-0x17c(%ebp)
f012b338:	8b 85 84 fe ff ff    	mov    -0x17c(%ebp),%eax
f012b33e:	ba 00 00 00 00       	mov    $0x0,%edx
f012b343:	f7 b5 88 fe ff ff    	divl   -0x178(%ebp)
f012b349:	8b 85 84 fe ff ff    	mov    -0x17c(%ebp),%eax
f012b34f:	29 d0                	sub    %edx,%eax
f012b351:	89 c3                	mov    %eax,%ebx
f012b353:	c7 85 80 fe ff ff 00 	movl   $0x1000,-0x180(%ebp)
f012b35a:	10 00 00 
f012b35d:	a0 40 26 78 f0       	mov    0xf0782640,%al
f012b362:	0f b6 d0             	movzbl %al,%edx
f012b365:	8b 85 80 fe ff ff    	mov    -0x180(%ebp),%eax
f012b36b:	01 d0                	add    %edx,%eax
f012b36d:	48                   	dec    %eax
f012b36e:	89 85 7c fe ff ff    	mov    %eax,-0x184(%ebp)
f012b374:	8b 85 7c fe ff ff    	mov    -0x184(%ebp),%eax
f012b37a:	ba 00 00 00 00       	mov    $0x0,%edx
f012b37f:	f7 b5 80 fe ff ff    	divl   -0x180(%ebp)
f012b385:	8b 85 7c fe ff ff    	mov    -0x184(%ebp),%eax
f012b38b:	29 d0                	sub    %edx,%eax
f012b38d:	01 c3                	add    %eax,%ebx
f012b38f:	c7 85 78 fe ff ff 00 	movl   $0x1000,-0x188(%ebp)
f012b396:	10 00 00 
f012b399:	a0 40 26 78 f0       	mov    0xf0782640,%al
f012b39e:	0f b6 c0             	movzbl %al,%eax
f012b3a1:	c1 e0 04             	shl    $0x4,%eax
f012b3a4:	89 c2                	mov    %eax,%edx
f012b3a6:	8b 85 78 fe ff ff    	mov    -0x188(%ebp),%eax
f012b3ac:	01 d0                	add    %edx,%eax
f012b3ae:	48                   	dec    %eax
f012b3af:	89 85 74 fe ff ff    	mov    %eax,-0x18c(%ebp)
f012b3b5:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f012b3bb:	ba 00 00 00 00       	mov    $0x0,%edx
f012b3c0:	f7 b5 78 fe ff ff    	divl   -0x188(%ebp)
f012b3c6:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f012b3cc:	29 d0                	sub    %edx,%eax
f012b3ce:	01 d8                	add    %ebx,%eax
f012b3d0:	2d 00 80 8f 09       	sub    $0x98f8000,%eax
f012b3d5:	39 c1                	cmp    %eax,%ecx
f012b3d7:	74 1d                	je     f012b3f6 <test_kfreelast+0x1b76>
f012b3d9:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012b3dd:	75 17                	jne    f012b3f6 <test_kfreelast+0x1b76>
f012b3df:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012b3e6:	83 ec 0c             	sub    $0xc,%esp
f012b3e9:	68 78 c4 13 f0       	push   $0xf013c478
f012b3ee:	e8 1b 59 fd ff       	call   f0100d0e <cprintf>
f012b3f3:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f012b3f6:	e8 cd 89 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012b3fb:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012b3fe:	74 1d                	je     f012b41d <test_kfreelast+0x1b9d>
f012b400:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012b404:	75 17                	jne    f012b41d <test_kfreelast+0x1b9d>
f012b406:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012b40d:	83 ec 0c             	sub    $0xc,%esp
f012b410:	68 d4 c3 13 f0       	push   $0xf013c3d4
f012b415:	e8 f4 58 fd ff       	call   f0100d0e <cprintf>
f012b41a:	83 c4 10             	add    $0x10,%esp
		if ((freeFrames - sys_calculate_free_frames()) != 13) if (!f) {f=1; cprintf("\nWrong allocation: pages are not loaded successfully into memory");}
f012b41d:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
f012b420:	e8 78 17 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f012b425:	29 c3                	sub    %eax,%ebx
f012b427:	89 d8                	mov    %ebx,%eax
f012b429:	83 f8 0d             	cmp    $0xd,%eax
f012b42c:	74 1d                	je     f012b44b <test_kfreelast+0x1bcb>
f012b42e:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012b432:	75 17                	jne    f012b44b <test_kfreelast+0x1bcb>
f012b434:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012b43b:	83 ec 0c             	sub    $0xc,%esp
f012b43e:	68 e0 c4 13 f0       	push   $0xf013c4e0
f012b443:	e8 c6 58 fd ff       	call   f0100d0e <cprintf>
f012b448:	83 c4 10             	add    $0x10,%esp
		lastIndices[13] = (50*kilo)/sizeof(char) - 1;
f012b44b:	c7 85 40 fe ff ff ff 	movl   $0xc7ff,-0x1c0(%ebp)
f012b452:	c7 00 00 
		ptr = (char*)ptr_allocations[13];
f012b455:	8b 85 a0 fd ff ff    	mov    -0x260(%ebp),%eax
f012b45b:	89 45 84             	mov    %eax,-0x7c(%ebp)
		for (i = 0; i < lastIndices[13]; ++i)
f012b45e:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012b465:	eb 0e                	jmp    f012b475 <test_kfreelast+0x1bf5>
		{
			ptr[i] = 13 ;
f012b467:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012b46a:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012b46d:	01 d0                	add    %edx,%eax
f012b46f:	c6 00 0d             	movb   $0xd,(%eax)
		if ((uint32) ptr_allocations[13] != (ACTUAL_START + 7*Mega + 16*kilo)) if (!f) {f=1; cprintf("\nWrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");}
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
		if ((freeFrames - sys_calculate_free_frames()) != 13) if (!f) {f=1; cprintf("\nWrong allocation: pages are not loaded successfully into memory");}
		lastIndices[13] = (50*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[13];
		for (i = 0; i < lastIndices[13]; ++i)
f012b472:	ff 45 f4             	incl   -0xc(%ebp)
f012b475:	8b 85 40 fe ff ff    	mov    -0x1c0(%ebp),%eax
f012b47b:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012b47e:	7f e7                	jg     f012b467 <test_kfreelast+0x1be7>
		{
			ptr[i] = 13 ;
		}

		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f012b480:	e8 18 17 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f012b485:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012b488:	e8 3b 89 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012b48d:	89 45 d0             	mov    %eax,-0x30(%ebp)
		ptr_allocations[14] = kmalloc(3*Mega-kilo);
f012b490:	83 ec 0c             	sub    $0xc,%esp
f012b493:	68 00 fc 2f 00       	push   $0x2ffc00
f012b498:	e8 e8 c3 fd ff       	call   f0107885 <kmalloc>
f012b49d:	83 c4 10             	add    $0x10,%esp
f012b4a0:	89 85 a4 fd ff ff    	mov    %eax,-0x25c(%ebp)
		if ((uint32) ptr_allocations[14] != (ACTUAL_START + 7*Mega + 68*kilo) ) if (!f) {f=1; cprintf("\nWrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");}
f012b4a6:	8b 85 a4 fd ff ff    	mov    -0x25c(%ebp),%eax
f012b4ac:	89 c1                	mov    %eax,%ecx
f012b4ae:	c7 85 70 fe ff ff 00 	movl   $0x1000,-0x190(%ebp)
f012b4b5:	10 00 00 
f012b4b8:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f012b4be:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012b4c3:	89 85 6c fe ff ff    	mov    %eax,-0x194(%ebp)
f012b4c9:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f012b4cf:	ba 00 00 00 00       	mov    $0x0,%edx
f012b4d4:	f7 b5 70 fe ff ff    	divl   -0x190(%ebp)
f012b4da:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f012b4e0:	29 d0                	sub    %edx,%eax
f012b4e2:	89 c3                	mov    %eax,%ebx
f012b4e4:	c7 85 68 fe ff ff 00 	movl   $0x1000,-0x198(%ebp)
f012b4eb:	10 00 00 
f012b4ee:	a0 40 26 78 f0       	mov    0xf0782640,%al
f012b4f3:	0f b6 d0             	movzbl %al,%edx
f012b4f6:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f012b4fc:	01 d0                	add    %edx,%eax
f012b4fe:	48                   	dec    %eax
f012b4ff:	89 85 64 fe ff ff    	mov    %eax,-0x19c(%ebp)
f012b505:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f012b50b:	ba 00 00 00 00       	mov    $0x0,%edx
f012b510:	f7 b5 68 fe ff ff    	divl   -0x198(%ebp)
f012b516:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f012b51c:	29 d0                	sub    %edx,%eax
f012b51e:	01 c3                	add    %eax,%ebx
f012b520:	c7 85 60 fe ff ff 00 	movl   $0x1000,-0x1a0(%ebp)
f012b527:	10 00 00 
f012b52a:	a0 40 26 78 f0       	mov    0xf0782640,%al
f012b52f:	0f b6 c0             	movzbl %al,%eax
f012b532:	c1 e0 04             	shl    $0x4,%eax
f012b535:	89 c2                	mov    %eax,%edx
f012b537:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f012b53d:	01 d0                	add    %edx,%eax
f012b53f:	48                   	dec    %eax
f012b540:	89 85 5c fe ff ff    	mov    %eax,-0x1a4(%ebp)
f012b546:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f012b54c:	ba 00 00 00 00       	mov    $0x0,%edx
f012b551:	f7 b5 60 fe ff ff    	divl   -0x1a0(%ebp)
f012b557:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f012b55d:	29 d0                	sub    %edx,%eax
f012b55f:	01 d8                	add    %ebx,%eax
f012b561:	2d 00 b0 8e 09       	sub    $0x98eb000,%eax
f012b566:	39 c1                	cmp    %eax,%ecx
f012b568:	74 1d                	je     f012b587 <test_kfreelast+0x1d07>
f012b56a:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012b56e:	75 17                	jne    f012b587 <test_kfreelast+0x1d07>
f012b570:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012b577:	83 ec 0c             	sub    $0xc,%esp
f012b57a:	68 78 c4 13 f0       	push   $0xf013c478
f012b57f:	e8 8a 57 fd ff       	call   f0100d0e <cprintf>
f012b584:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f012b587:	e8 3c 88 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012b58c:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012b58f:	74 1d                	je     f012b5ae <test_kfreelast+0x1d2e>
f012b591:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012b595:	75 17                	jne    f012b5ae <test_kfreelast+0x1d2e>
f012b597:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012b59e:	83 ec 0c             	sub    $0xc,%esp
f012b5a1:	68 d4 c3 13 f0       	push   $0xf013c3d4
f012b5a6:	e8 63 57 fd ff       	call   f0100d0e <cprintf>
f012b5ab:	83 c4 10             	add    $0x10,%esp
		if ((freeFrames - sys_calculate_free_frames()) != 768) if (!f) {f=1; cprintf("\nWrong allocation: pages are not loaded successfully into memory");}
f012b5ae:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
f012b5b1:	e8 e7 15 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f012b5b6:	29 c3                	sub    %eax,%ebx
f012b5b8:	89 d8                	mov    %ebx,%eax
f012b5ba:	3d 00 03 00 00       	cmp    $0x300,%eax
f012b5bf:	74 1d                	je     f012b5de <test_kfreelast+0x1d5e>
f012b5c1:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012b5c5:	75 17                	jne    f012b5de <test_kfreelast+0x1d5e>
f012b5c7:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012b5ce:	83 ec 0c             	sub    $0xc,%esp
f012b5d1:	68 e0 c4 13 f0       	push   $0xf013c4e0
f012b5d6:	e8 33 57 fd ff       	call   f0100d0e <cprintf>
f012b5db:	83 c4 10             	add    $0x10,%esp
		lastIndices[14] = (3*Mega-kilo)/sizeof(char) - 1;
f012b5de:	c7 85 44 fe ff ff ff 	movl   $0x2ffbff,-0x1bc(%ebp)
f012b5e5:	fb 2f 00 
		ptr = (char*)ptr_allocations[14];
f012b5e8:	8b 85 a4 fd ff ff    	mov    -0x25c(%ebp),%eax
f012b5ee:	89 45 84             	mov    %eax,-0x7c(%ebp)
		for (i = 0; i < lastIndices[14]; ++i)
f012b5f1:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012b5f8:	eb 0e                	jmp    f012b608 <test_kfreelast+0x1d88>
		{
			ptr[i] = 14 ;
f012b5fa:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012b5fd:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012b600:	01 d0                	add    %edx,%eax
f012b602:	c6 00 0e             	movb   $0xe,(%eax)
		if ((uint32) ptr_allocations[14] != (ACTUAL_START + 7*Mega + 68*kilo) ) if (!f) {f=1; cprintf("\nWrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");}
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
		if ((freeFrames - sys_calculate_free_frames()) != 768) if (!f) {f=1; cprintf("\nWrong allocation: pages are not loaded successfully into memory");}
		lastIndices[14] = (3*Mega-kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[14];
		for (i = 0; i < lastIndices[14]; ++i)
f012b605:	ff 45 f4             	incl   -0xc(%ebp)
f012b608:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f012b60e:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012b611:	7f e7                	jg     f012b5fa <test_kfreelast+0x1d7a>
		{
			ptr[i] = 14 ;
		}
	}

	if (!f) {ce += 25;cprintf("\nkfreelast: current evaluation = %d%\n", ce);} f=0;
f012b613:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012b617:	75 17                	jne    f012b630 <test_kfreelast+0x1db0>
f012b619:	83 45 f0 19          	addl   $0x19,-0x10(%ebp)
f012b61d:	83 ec 08             	sub    $0x8,%esp
f012b620:	ff 75 f0             	pushl  -0x10(%ebp)
f012b623:	68 ac c3 13 f0       	push   $0xf013c3ac
f012b628:	e8 e1 56 fd ff       	call   f0100d0e <cprintf>
f012b62d:	83 c4 10             	add    $0x10,%esp
f012b630:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)

	//kfree one of the newly allocated space that override a previously allocated one
	{
		//kfree 50 KB
		freeFrames = sys_calculate_free_frames() ;
f012b637:	e8 61 15 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f012b63c:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012b63f:	e8 84 87 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012b644:	89 45 d0             	mov    %eax,-0x30(%ebp)
		kfree(ptr_allocations[13]);
f012b647:	8b 85 a0 fd ff ff    	mov    -0x260(%ebp),%eax
f012b64d:	83 ec 0c             	sub    $0xc,%esp
f012b650:	50                   	push   %eax
f012b651:	e8 fa c2 fd ff       	call   f0107950 <kfree>
f012b656:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f012b659:	e8 6a 87 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012b65e:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012b661:	74 1d                	je     f012b680 <test_kfreelast+0x1e00>
f012b663:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012b667:	75 17                	jne    f012b680 <test_kfreelast+0x1e00>
f012b669:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012b670:	83 ec 0c             	sub    $0xc,%esp
f012b673:	68 d4 c3 13 f0       	push   $0xf013c3d4
f012b678:	e8 91 56 fd ff       	call   f0100d0e <cprintf>
f012b67d:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 13) if (!f) {f=1; cprintf("\nWrong kfree: pages in memory are not freed correctly");}
f012b680:	e8 18 15 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f012b685:	89 c2                	mov    %eax,%edx
f012b687:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f012b68a:	29 c2                	sub    %eax,%edx
f012b68c:	89 d0                	mov    %edx,%eax
f012b68e:	83 f8 0d             	cmp    $0xd,%eax
f012b691:	74 1d                	je     f012b6b0 <test_kfreelast+0x1e30>
f012b693:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012b697:	75 17                	jne    f012b6b0 <test_kfreelast+0x1e30>
f012b699:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012b6a0:	83 ec 0c             	sub    $0xc,%esp
f012b6a3:	68 40 c4 13 f0       	push   $0xf013c440
f012b6a8:	e8 61 56 fd ff       	call   f0100d0e <cprintf>
f012b6ad:	83 c4 10             	add    $0x10,%esp
	{
		//50 KB

		//Bypass the PAGE FAULT on <MOVB immediate, reg> instruction by setting its length
		//and continue executing the remaining code
		sys_bypassPageFault(3);
f012b6b0:	83 ec 0c             	sub    $0xc,%esp
f012b6b3:	6a 03                	push   $0x3
f012b6b5:	e8 83 19 fe ff       	call   f010d03d <sys_bypassPageFault>
f012b6ba:	83 c4 10             	add    $0x10,%esp

		ptr = (char *) ptr_allocations[13];
f012b6bd:	8b 85 a0 fd ff ff    	mov    -0x260(%ebp),%eax
f012b6c3:	89 45 84             	mov    %eax,-0x7c(%ebp)

		for (i = 0; i < 50*kilo; ++i)
f012b6c6:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012b6cd:	eb 3c                	jmp    f012b70b <test_kfreelast+0x1e8b>
		{
			ptr[i] = 10;
f012b6cf:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012b6d2:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012b6d5:	01 d0                	add    %edx,%eax
f012b6d7:	c6 00 0a             	movb   $0xa,(%eax)
			//cprintf("\n\ncr2 = %x, faulted addr = %x", sys_rcr2(), (uint32)&(ptr[0]));
			if (sys_rcr2() != (uint32)&(ptr[i])) if (!f) {f=1; cprintf("\nkfree: successful access to freed space!! it should not be succeeded");}
f012b6da:	e8 4c 19 fe ff       	call   f010d02b <sys_rcr2>
f012b6df:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f012b6e2:	8b 55 84             	mov    -0x7c(%ebp),%edx
f012b6e5:	01 ca                	add    %ecx,%edx
f012b6e7:	39 d0                	cmp    %edx,%eax
f012b6e9:	74 1d                	je     f012b708 <test_kfreelast+0x1e88>
f012b6eb:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012b6ef:	75 17                	jne    f012b708 <test_kfreelast+0x1e88>
f012b6f1:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012b6f8:	83 ec 0c             	sub    $0xc,%esp
f012b6fb:	68 58 c5 13 f0       	push   $0xf013c558
f012b700:	e8 09 56 fd ff       	call   f0100d0e <cprintf>
f012b705:	83 c4 10             	add    $0x10,%esp
		//and continue executing the remaining code
		sys_bypassPageFault(3);

		ptr = (char *) ptr_allocations[13];

		for (i = 0; i < 50*kilo; ++i)
f012b708:	ff 45 f4             	incl   -0xc(%ebp)
f012b70b:	81 7d f4 ff c7 00 00 	cmpl   $0xc7ff,-0xc(%ebp)
f012b712:	7e bb                	jle    f012b6cf <test_kfreelast+0x1e4f>
			//cprintf("\n\ncr2 = %x, faulted addr = %x", sys_rcr2(), (uint32)&(ptr[0]));
			if (sys_rcr2() != (uint32)&(ptr[i])) if (!f) {f=1; cprintf("\nkfree: successful access to freed space!! it should not be succeeded");}
		}

		//set it to 0 again to cancel the bypassing option
		sys_bypassPageFault(0);
f012b714:	83 ec 0c             	sub    $0xc,%esp
f012b717:	6a 00                	push   $0x0
f012b719:	e8 1f 19 fe ff       	call   f010d03d <sys_bypassPageFault>
f012b71e:	83 c4 10             	add    $0x10,%esp


		//3 MB
		ptr = (char*)ptr_allocations[14];
f012b721:	8b 85 a4 fd ff ff    	mov    -0x25c(%ebp),%eax
f012b727:	89 45 84             	mov    %eax,-0x7c(%ebp)
		for (i = 0; i < lastIndices[14]; ++i)
f012b72a:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012b731:	eb 1e                	jmp    f012b751 <test_kfreelast+0x1ed1>
		{
			sums[14] += ptr[i] ;
f012b733:	8b 95 f4 fd ff ff    	mov    -0x20c(%ebp),%edx
f012b739:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f012b73c:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012b73f:	01 c8                	add    %ecx,%eax
f012b741:	8a 00                	mov    (%eax),%al
f012b743:	0f be c0             	movsbl %al,%eax
f012b746:	01 d0                	add    %edx,%eax
f012b748:	89 85 f4 fd ff ff    	mov    %eax,-0x20c(%ebp)
		sys_bypassPageFault(0);


		//3 MB
		ptr = (char*)ptr_allocations[14];
		for (i = 0; i < lastIndices[14]; ++i)
f012b74e:	ff 45 f4             	incl   -0xc(%ebp)
f012b751:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f012b757:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012b75a:	7f d7                	jg     f012b733 <test_kfreelast+0x1eb3>
		{
			sums[14] += ptr[i] ;
		}
		if (sums[14] != 14*lastIndices[14])	if (!f) {f=1; cprintf("\nkfree: invalid read after freeing some allocations");}
f012b75c:	8b 8d f4 fd ff ff    	mov    -0x20c(%ebp),%ecx
f012b762:	8b 95 44 fe ff ff    	mov    -0x1bc(%ebp),%edx
f012b768:	89 d0                	mov    %edx,%eax
f012b76a:	01 c0                	add    %eax,%eax
f012b76c:	01 d0                	add    %edx,%eax
f012b76e:	01 c0                	add    %eax,%eax
f012b770:	01 d0                	add    %edx,%eax
f012b772:	01 c0                	add    %eax,%eax
f012b774:	39 c1                	cmp    %eax,%ecx
f012b776:	74 1d                	je     f012b795 <test_kfreelast+0x1f15>
f012b778:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012b77c:	75 17                	jne    f012b795 <test_kfreelast+0x1f15>
f012b77e:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012b785:	83 ec 0c             	sub    $0xc,%esp
f012b788:	68 24 c5 13 f0       	push   $0xf013c524
f012b78d:	e8 7c 55 fd ff       	call   f0100d0e <cprintf>
f012b792:	83 c4 10             	add    $0x10,%esp
	}

	if (!f) {ce += 15;cprintf("\nkfreelast: current evaluation = %d%\n", ce);} f=0;
f012b795:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012b799:	75 17                	jne    f012b7b2 <test_kfreelast+0x1f32>
f012b79b:	83 45 f0 0f          	addl   $0xf,-0x10(%ebp)
f012b79f:	83 ec 08             	sub    $0x8,%esp
f012b7a2:	ff 75 f0             	pushl  -0x10(%ebp)
f012b7a5:	68 ac c3 13 f0       	push   $0xf013c3ac
f012b7aa:	e8 5f 55 fd ff       	call   f0100d0e <cprintf>
f012b7af:	83 c4 10             	add    $0x10,%esp
f012b7b2:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)

	//kfree all remaining allocations
	{
		//kfree 7 KB
		freeFrames = sys_calculate_free_frames() ;
f012b7b9:	e8 df 13 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f012b7be:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012b7c1:	e8 02 86 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012b7c6:	89 45 d0             	mov    %eax,-0x30(%ebp)
		kfree(ptr_allocations[4]);
f012b7c9:	8b 85 7c fd ff ff    	mov    -0x284(%ebp),%eax
f012b7cf:	83 ec 0c             	sub    $0xc,%esp
f012b7d2:	50                   	push   %eax
f012b7d3:	e8 78 c1 fd ff       	call   f0107950 <kfree>
f012b7d8:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f012b7db:	e8 e8 85 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012b7e0:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012b7e3:	74 1d                	je     f012b802 <test_kfreelast+0x1f82>
f012b7e5:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012b7e9:	75 17                	jne    f012b802 <test_kfreelast+0x1f82>
f012b7eb:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012b7f2:	83 ec 0c             	sub    $0xc,%esp
f012b7f5:	68 d4 c3 13 f0       	push   $0xf013c3d4
f012b7fa:	e8 0f 55 fd ff       	call   f0100d0e <cprintf>
f012b7ff:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 2) if (!f) {f=1; cprintf("\nWrong kfree: pages in memory are not freed correctly");}
f012b802:	e8 96 13 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f012b807:	89 c2                	mov    %eax,%edx
f012b809:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f012b80c:	29 c2                	sub    %eax,%edx
f012b80e:	89 d0                	mov    %edx,%eax
f012b810:	83 f8 02             	cmp    $0x2,%eax
f012b813:	74 1d                	je     f012b832 <test_kfreelast+0x1fb2>
f012b815:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012b819:	75 17                	jne    f012b832 <test_kfreelast+0x1fb2>
f012b81b:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012b822:	83 ec 0c             	sub    $0xc,%esp
f012b825:	68 40 c4 13 f0       	push   $0xf013c440
f012b82a:	e8 df 54 fd ff       	call   f0100d0e <cprintf>
f012b82f:	83 c4 10             	add    $0x10,%esp

		//kfree 2nd 3 MB
		freeFrames = sys_calculate_free_frames() ;
f012b832:	e8 66 13 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f012b837:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012b83a:	e8 89 85 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012b83f:	89 45 d0             	mov    %eax,-0x30(%ebp)
		kfree(ptr_allocations[14]);
f012b842:	8b 85 a4 fd ff ff    	mov    -0x25c(%ebp),%eax
f012b848:	83 ec 0c             	sub    $0xc,%esp
f012b84b:	50                   	push   %eax
f012b84c:	e8 ff c0 fd ff       	call   f0107950 <kfree>
f012b851:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f012b854:	e8 6f 85 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012b859:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012b85c:	74 1d                	je     f012b87b <test_kfreelast+0x1ffb>
f012b85e:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012b862:	75 17                	jne    f012b87b <test_kfreelast+0x1ffb>
f012b864:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012b86b:	83 ec 0c             	sub    $0xc,%esp
f012b86e:	68 d4 c3 13 f0       	push   $0xf013c3d4
f012b873:	e8 96 54 fd ff       	call   f0100d0e <cprintf>
f012b878:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 3*Mega/4096) if (!f) {f=1; cprintf("\nWrong kfree: pages in memory are not freed correctly");}
f012b87b:	e8 1d 13 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f012b880:	89 c2                	mov    %eax,%edx
f012b882:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f012b885:	29 c2                	sub    %eax,%edx
f012b887:	89 d0                	mov    %edx,%eax
f012b889:	3d 00 03 00 00       	cmp    $0x300,%eax
f012b88e:	74 1d                	je     f012b8ad <test_kfreelast+0x202d>
f012b890:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012b894:	75 17                	jne    f012b8ad <test_kfreelast+0x202d>
f012b896:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012b89d:	83 ec 0c             	sub    $0xc,%esp
f012b8a0:	68 40 c4 13 f0       	push   $0xf013c440
f012b8a5:	e8 64 54 fd ff       	call   f0100d0e <cprintf>
f012b8aa:	83 c4 10             	add    $0x10,%esp

		//kfree 1st 3 MB
		freeFrames = sys_calculate_free_frames() ;
f012b8ad:	e8 eb 12 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f012b8b2:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012b8b5:	e8 0e 85 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012b8ba:	89 45 d0             	mov    %eax,-0x30(%ebp)
		kfree(ptr_allocations[5]);
f012b8bd:	8b 85 80 fd ff ff    	mov    -0x280(%ebp),%eax
f012b8c3:	83 ec 0c             	sub    $0xc,%esp
f012b8c6:	50                   	push   %eax
f012b8c7:	e8 84 c0 fd ff       	call   f0107950 <kfree>
f012b8cc:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f012b8cf:	e8 f4 84 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012b8d4:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012b8d7:	74 1d                	je     f012b8f6 <test_kfreelast+0x2076>
f012b8d9:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012b8dd:	75 17                	jne    f012b8f6 <test_kfreelast+0x2076>
f012b8df:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012b8e6:	83 ec 0c             	sub    $0xc,%esp
f012b8e9:	68 d4 c3 13 f0       	push   $0xf013c3d4
f012b8ee:	e8 1b 54 fd ff       	call   f0100d0e <cprintf>
f012b8f3:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 3*Mega/4096) if (!f) {f=1; cprintf("\nWrong kfree: pages in memory are not freed correctly");}
f012b8f6:	e8 a2 12 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f012b8fb:	89 c2                	mov    %eax,%edx
f012b8fd:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f012b900:	29 c2                	sub    %eax,%edx
f012b902:	89 d0                	mov    %edx,%eax
f012b904:	3d 00 03 00 00       	cmp    $0x300,%eax
f012b909:	74 1d                	je     f012b928 <test_kfreelast+0x20a8>
f012b90b:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012b90f:	75 17                	jne    f012b928 <test_kfreelast+0x20a8>
f012b911:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012b918:	83 ec 0c             	sub    $0xc,%esp
f012b91b:	68 40 c4 13 f0       	push   $0xf013c440
f012b920:	e8 e9 53 fd ff       	call   f0100d0e <cprintf>
f012b925:	83 c4 10             	add    $0x10,%esp

		//kfree 1st 2 KB
		freeFrames = sys_calculate_free_frames() ;
f012b928:	e8 70 12 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f012b92d:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012b930:	e8 93 84 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012b935:	89 45 d0             	mov    %eax,-0x30(%ebp)
		kfree(ptr_allocations[2]);
f012b938:	8b 85 74 fd ff ff    	mov    -0x28c(%ebp),%eax
f012b93e:	83 ec 0c             	sub    $0xc,%esp
f012b941:	50                   	push   %eax
f012b942:	e8 09 c0 fd ff       	call   f0107950 <kfree>
f012b947:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f012b94a:	e8 79 84 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012b94f:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012b952:	74 1d                	je     f012b971 <test_kfreelast+0x20f1>
f012b954:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012b958:	75 17                	jne    f012b971 <test_kfreelast+0x20f1>
f012b95a:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012b961:	83 ec 0c             	sub    $0xc,%esp
f012b964:	68 d4 c3 13 f0       	push   $0xf013c3d4
f012b969:	e8 a0 53 fd ff       	call   f0100d0e <cprintf>
f012b96e:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 1) if (!f) {f=1; cprintf("\nWrong kfree: pages in memory are not freed correctly");}
f012b971:	e8 27 12 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f012b976:	89 c2                	mov    %eax,%edx
f012b978:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f012b97b:	29 c2                	sub    %eax,%edx
f012b97d:	89 d0                	mov    %edx,%eax
f012b97f:	83 f8 01             	cmp    $0x1,%eax
f012b982:	74 1d                	je     f012b9a1 <test_kfreelast+0x2121>
f012b984:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012b988:	75 17                	jne    f012b9a1 <test_kfreelast+0x2121>
f012b98a:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012b991:	83 ec 0c             	sub    $0xc,%esp
f012b994:	68 40 c4 13 f0       	push   $0xf013c440
f012b999:	e8 70 53 fd ff       	call   f0100d0e <cprintf>
f012b99e:	83 c4 10             	add    $0x10,%esp

		//kfree 2nd 2 KB
		freeFrames = sys_calculate_free_frames() ;
f012b9a1:	e8 f7 11 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f012b9a6:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012b9a9:	e8 1a 84 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012b9ae:	89 45 d0             	mov    %eax,-0x30(%ebp)
		kfree(ptr_allocations[3]);
f012b9b1:	8b 85 78 fd ff ff    	mov    -0x288(%ebp),%eax
f012b9b7:	83 ec 0c             	sub    $0xc,%esp
f012b9ba:	50                   	push   %eax
f012b9bb:	e8 90 bf fd ff       	call   f0107950 <kfree>
f012b9c0:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f012b9c3:	e8 00 84 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012b9c8:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012b9cb:	74 1d                	je     f012b9ea <test_kfreelast+0x216a>
f012b9cd:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012b9d1:	75 17                	jne    f012b9ea <test_kfreelast+0x216a>
f012b9d3:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012b9da:	83 ec 0c             	sub    $0xc,%esp
f012b9dd:	68 d4 c3 13 f0       	push   $0xf013c3d4
f012b9e2:	e8 27 53 fd ff       	call   f0100d0e <cprintf>
f012b9e7:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 1) if (!f) {f=1; cprintf("\nWrong kfree: pages in memory are not freed correctly");}
f012b9ea:	e8 ae 11 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f012b9ef:	89 c2                	mov    %eax,%edx
f012b9f1:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f012b9f4:	29 c2                	sub    %eax,%edx
f012b9f6:	89 d0                	mov    %edx,%eax
f012b9f8:	83 f8 01             	cmp    $0x1,%eax
f012b9fb:	74 1d                	je     f012ba1a <test_kfreelast+0x219a>
f012b9fd:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012ba01:	75 17                	jne    f012ba1a <test_kfreelast+0x219a>
f012ba03:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012ba0a:	83 ec 0c             	sub    $0xc,%esp
f012ba0d:	68 40 c4 13 f0       	push   $0xf013c440
f012ba12:	e8 f7 52 fd ff       	call   f0100d0e <cprintf>
f012ba17:	83 c4 10             	add    $0x10,%esp

		if(start_freeFrames != (sys_calculate_free_frames())) if (!f) {f=1; cprintf("\nWrong kfree: not all pages removed correctly at end");}
f012ba1a:	e8 7e 11 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f012ba1f:	89 c2                	mov    %eax,%edx
f012ba21:	8b 45 d8             	mov    -0x28(%ebp),%eax
f012ba24:	39 c2                	cmp    %eax,%edx
f012ba26:	74 1d                	je     f012ba45 <test_kfreelast+0x21c5>
f012ba28:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012ba2c:	75 17                	jne    f012ba45 <test_kfreelast+0x21c5>
f012ba2e:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012ba35:	83 ec 0c             	sub    $0xc,%esp
f012ba38:	68 a0 c5 13 f0       	push   $0xf013c5a0
f012ba3d:	e8 cc 52 fd ff       	call   f0100d0e <cprintf>
f012ba42:	83 c4 10             	add    $0x10,%esp

	//Check memory access after kfree
	{
		//Bypass the PAGE FAULT on <MOVB immediate, reg> instruction by setting its length
		//and continue executing the remaining code
		sys_bypassPageFault(3);
f012ba45:	83 ec 0c             	sub    $0xc,%esp
f012ba48:	6a 03                	push   $0x3
f012ba4a:	e8 ee 15 fe ff       	call   f010d03d <sys_bypassPageFault>
f012ba4f:	83 c4 10             	add    $0x10,%esp

		for (i = 0; i < 15; ++i)
f012ba52:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012ba59:	e9 8e 00 00 00       	jmp    f012baec <test_kfreelast+0x226c>
		{
			ptr = (char *) ptr_allocations[i];
f012ba5e:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012ba61:	8b 84 85 6c fd ff ff 	mov    -0x294(%ebp,%eax,4),%eax
f012ba68:	89 45 84             	mov    %eax,-0x7c(%ebp)
			ptr[0] = 10;
f012ba6b:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012ba6e:	c6 00 0a             	movb   $0xa,(%eax)
			//cprintf("\n\ncr2 = %x, faulted addr = %x", sys_rcr2(), (uint32)&(ptr[0]));
			if (sys_rcr2() != (uint32)&(ptr[0])) if (!f) {f=1; cprintf("\nkfree: successful access to freed space!! it should not be succeeded");}
f012ba71:	e8 b5 15 fe ff       	call   f010d02b <sys_rcr2>
f012ba76:	89 c2                	mov    %eax,%edx
f012ba78:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012ba7b:	39 c2                	cmp    %eax,%edx
f012ba7d:	74 1d                	je     f012ba9c <test_kfreelast+0x221c>
f012ba7f:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012ba83:	75 17                	jne    f012ba9c <test_kfreelast+0x221c>
f012ba85:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012ba8c:	83 ec 0c             	sub    $0xc,%esp
f012ba8f:	68 58 c5 13 f0       	push   $0xf013c558
f012ba94:	e8 75 52 fd ff       	call   f0100d0e <cprintf>
f012ba99:	83 c4 10             	add    $0x10,%esp
			ptr[lastIndices[i]] = 10;
f012ba9c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012ba9f:	8b 84 85 0c fe ff ff 	mov    -0x1f4(%ebp,%eax,4),%eax
f012baa6:	89 c2                	mov    %eax,%edx
f012baa8:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012baab:	01 d0                	add    %edx,%eax
f012baad:	c6 00 0a             	movb   $0xa,(%eax)
			if (sys_rcr2() != (uint32)&(ptr[lastIndices[i]])) if (!f) {f=1; cprintf("\nkfree: successful access to freed space!! it should not be succeeded");}
f012bab0:	e8 76 15 fe ff       	call   f010d02b <sys_rcr2>
f012bab5:	89 c2                	mov    %eax,%edx
f012bab7:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012baba:	8b 84 85 0c fe ff ff 	mov    -0x1f4(%ebp,%eax,4),%eax
f012bac1:	89 c1                	mov    %eax,%ecx
f012bac3:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012bac6:	01 c8                	add    %ecx,%eax
f012bac8:	39 c2                	cmp    %eax,%edx
f012baca:	74 1d                	je     f012bae9 <test_kfreelast+0x2269>
f012bacc:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012bad0:	75 17                	jne    f012bae9 <test_kfreelast+0x2269>
f012bad2:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012bad9:	83 ec 0c             	sub    $0xc,%esp
f012badc:	68 58 c5 13 f0       	push   $0xf013c558
f012bae1:	e8 28 52 fd ff       	call   f0100d0e <cprintf>
f012bae6:	83 c4 10             	add    $0x10,%esp
	{
		//Bypass the PAGE FAULT on <MOVB immediate, reg> instruction by setting its length
		//and continue executing the remaining code
		sys_bypassPageFault(3);

		for (i = 0; i < 15; ++i)
f012bae9:	ff 45 f4             	incl   -0xc(%ebp)
f012baec:	83 7d f4 0e          	cmpl   $0xe,-0xc(%ebp)
f012baf0:	0f 8e 68 ff ff ff    	jle    f012ba5e <test_kfreelast+0x21de>
			ptr[lastIndices[i]] = 10;
			if (sys_rcr2() != (uint32)&(ptr[lastIndices[i]])) if (!f) {f=1; cprintf("\nkfree: successful access to freed space!! it should not be succeeded");}
		}

		//set it to 0 again to cancel the bypassing option
		sys_bypassPageFault(0);
f012baf6:	83 ec 0c             	sub    $0xc,%esp
f012baf9:	6a 00                	push   $0x0
f012bafb:	e8 3d 15 fe ff       	call   f010d03d <sys_bypassPageFault>
f012bb00:	83 c4 10             	add    $0x10,%esp
	}

	//kfree non-exist item
	{
		//kfree 2 MB
		freeFrames = sys_calculate_free_frames() ;
f012bb03:	e8 95 10 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f012bb08:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012bb0b:	e8 b8 82 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012bb10:	89 45 d0             	mov    %eax,-0x30(%ebp)
		kfree(ptr_allocations[0]);
f012bb13:	8b 85 6c fd ff ff    	mov    -0x294(%ebp),%eax
f012bb19:	83 ec 0c             	sub    $0xc,%esp
f012bb1c:	50                   	push   %eax
f012bb1d:	e8 2e be fd ff       	call   f0107950 <kfree>
f012bb22:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f012bb25:	e8 9e 82 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012bb2a:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012bb2d:	74 1d                	je     f012bb4c <test_kfreelast+0x22cc>
f012bb2f:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012bb33:	75 17                	jne    f012bb4c <test_kfreelast+0x22cc>
f012bb35:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012bb3c:	83 ec 0c             	sub    $0xc,%esp
f012bb3f:	68 d4 c3 13 f0       	push   $0xf013c3d4
f012bb44:	e8 c5 51 fd ff       	call   f0100d0e <cprintf>
f012bb49:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 0) if (!f) {f=1; cprintf("\nWrong kfree: attempt to kfree a non-existing ptr. It should do nothing");}
f012bb4c:	e8 4c 10 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f012bb51:	89 c2                	mov    %eax,%edx
f012bb53:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f012bb56:	39 c2                	cmp    %eax,%edx
f012bb58:	74 1d                	je     f012bb77 <test_kfreelast+0x22f7>
f012bb5a:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012bb5e:	75 17                	jne    f012bb77 <test_kfreelast+0x22f7>
f012bb60:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012bb67:	83 ec 0c             	sub    $0xc,%esp
f012bb6a:	68 d8 c5 13 f0       	push   $0xf013c5d8
f012bb6f:	e8 9a 51 fd ff       	call   f0100d0e <cprintf>
f012bb74:	83 c4 10             	add    $0x10,%esp

		//kfree 2 KB
		freeFrames = sys_calculate_free_frames() ;
f012bb77:	e8 21 10 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f012bb7c:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012bb7f:	e8 44 82 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012bb84:	89 45 d0             	mov    %eax,-0x30(%ebp)
		kfree(ptr_allocations[2]);
f012bb87:	8b 85 74 fd ff ff    	mov    -0x28c(%ebp),%eax
f012bb8d:	83 ec 0c             	sub    $0xc,%esp
f012bb90:	50                   	push   %eax
f012bb91:	e8 ba bd fd ff       	call   f0107950 <kfree>
f012bb96:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f012bb99:	e8 2a 82 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012bb9e:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012bba1:	74 1d                	je     f012bbc0 <test_kfreelast+0x2340>
f012bba3:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012bba7:	75 17                	jne    f012bbc0 <test_kfreelast+0x2340>
f012bba9:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012bbb0:	83 ec 0c             	sub    $0xc,%esp
f012bbb3:	68 d4 c3 13 f0       	push   $0xf013c3d4
f012bbb8:	e8 51 51 fd ff       	call   f0100d0e <cprintf>
f012bbbd:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 0) if (!f) {f=1; cprintf("\nWrong kfree: attempt to kfree a non-existing ptr. It should do nothing");}
f012bbc0:	e8 d8 0f fe ff       	call   f010cb9d <sys_calculate_free_frames>
f012bbc5:	89 c2                	mov    %eax,%edx
f012bbc7:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f012bbca:	39 c2                	cmp    %eax,%edx
f012bbcc:	74 1d                	je     f012bbeb <test_kfreelast+0x236b>
f012bbce:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012bbd2:	75 17                	jne    f012bbeb <test_kfreelast+0x236b>
f012bbd4:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012bbdb:	83 ec 0c             	sub    $0xc,%esp
f012bbde:	68 d8 c5 13 f0       	push   $0xf013c5d8
f012bbe3:	e8 26 51 fd ff       	call   f0100d0e <cprintf>
f012bbe8:	83 c4 10             	add    $0x10,%esp

		//kfree 20 KB
		freeFrames = sys_calculate_free_frames() ;
f012bbeb:	e8 ad 0f fe ff       	call   f010cb9d <sys_calculate_free_frames>
f012bbf0:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012bbf3:	e8 d0 81 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012bbf8:	89 45 d0             	mov    %eax,-0x30(%ebp)
		kfree(ptr_allocations[8]);
f012bbfb:	8b 85 8c fd ff ff    	mov    -0x274(%ebp),%eax
f012bc01:	83 ec 0c             	sub    $0xc,%esp
f012bc04:	50                   	push   %eax
f012bc05:	e8 46 bd fd ff       	call   f0107950 <kfree>
f012bc0a:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f012bc0d:	e8 b6 81 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012bc12:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012bc15:	74 1d                	je     f012bc34 <test_kfreelast+0x23b4>
f012bc17:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012bc1b:	75 17                	jne    f012bc34 <test_kfreelast+0x23b4>
f012bc1d:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012bc24:	83 ec 0c             	sub    $0xc,%esp
f012bc27:	68 d4 c3 13 f0       	push   $0xf013c3d4
f012bc2c:	e8 dd 50 fd ff       	call   f0100d0e <cprintf>
f012bc31:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 0) if (!f) {f=1; cprintf("\nWrong kfree: attempt to kfree a non-existing ptr. It should do nothing");}
f012bc34:	e8 64 0f fe ff       	call   f010cb9d <sys_calculate_free_frames>
f012bc39:	89 c2                	mov    %eax,%edx
f012bc3b:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f012bc3e:	39 c2                	cmp    %eax,%edx
f012bc40:	74 1d                	je     f012bc5f <test_kfreelast+0x23df>
f012bc42:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012bc46:	75 17                	jne    f012bc5f <test_kfreelast+0x23df>
f012bc48:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012bc4f:	83 ec 0c             	sub    $0xc,%esp
f012bc52:	68 d8 c5 13 f0       	push   $0xf013c5d8
f012bc57:	e8 b2 50 fd ff       	call   f0100d0e <cprintf>
f012bc5c:	83 c4 10             	add    $0x10,%esp

		//kfree 1 MB
		freeFrames = sys_calculate_free_frames() ;
f012bc5f:	e8 39 0f fe ff       	call   f010cb9d <sys_calculate_free_frames>
f012bc64:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012bc67:	e8 5c 81 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012bc6c:	89 45 d0             	mov    %eax,-0x30(%ebp)
		kfree(ptr_allocations[9]);
f012bc6f:	8b 85 90 fd ff ff    	mov    -0x270(%ebp),%eax
f012bc75:	83 ec 0c             	sub    $0xc,%esp
f012bc78:	50                   	push   %eax
f012bc79:	e8 d2 bc fd ff       	call   f0107950 <kfree>
f012bc7e:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f012bc81:	e8 42 81 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012bc86:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012bc89:	74 1d                	je     f012bca8 <test_kfreelast+0x2428>
f012bc8b:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012bc8f:	75 17                	jne    f012bca8 <test_kfreelast+0x2428>
f012bc91:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012bc98:	83 ec 0c             	sub    $0xc,%esp
f012bc9b:	68 d4 c3 13 f0       	push   $0xf013c3d4
f012bca0:	e8 69 50 fd ff       	call   f0100d0e <cprintf>
f012bca5:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 0) if (!f) {f=1; cprintf("\nWrong kfree: attempt to kfree a non-existing ptr. It should do nothing");}
f012bca8:	e8 f0 0e fe ff       	call   f010cb9d <sys_calculate_free_frames>
f012bcad:	89 c2                	mov    %eax,%edx
f012bcaf:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f012bcb2:	39 c2                	cmp    %eax,%edx
f012bcb4:	74 1d                	je     f012bcd3 <test_kfreelast+0x2453>
f012bcb6:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012bcba:	75 17                	jne    f012bcd3 <test_kfreelast+0x2453>
f012bcbc:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012bcc3:	83 ec 0c             	sub    $0xc,%esp
f012bcc6:	68 d8 c5 13 f0       	push   $0xf013c5d8
f012bccb:	e8 3e 50 fd ff       	call   f0100d0e <cprintf>
f012bcd0:	83 c4 10             	add    $0x10,%esp

	}

	if (!f) {ce += 10;cprintf("\nkfreelast: current evaluation = %d%\n", ce);} f=0;
f012bcd3:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012bcd7:	75 17                	jne    f012bcf0 <test_kfreelast+0x2470>
f012bcd9:	83 45 f0 0a          	addl   $0xa,-0x10(%ebp)
f012bcdd:	83 ec 08             	sub    $0x8,%esp
f012bce0:	ff 75 f0             	pushl  -0x10(%ebp)
f012bce3:	68 ac c3 13 f0       	push   $0xf013c3ac
f012bce8:	e8 21 50 fd ff       	call   f0100d0e <cprintf>
f012bced:	83 c4 10             	add    $0x10,%esp
f012bcf0:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)

	//cprintf("\nCongratulations!! your modification is run successfully.\n");

	return 1;
f012bcf7:	b8 01 00 00 00       	mov    $0x1,%eax
}
f012bcfc:	8d 65 f8             	lea    -0x8(%ebp),%esp
f012bcff:	5b                   	pop    %ebx
f012bd00:	5f                   	pop    %edi
f012bd01:	5d                   	pop    %ebp
f012bd02:	c3                   	ret    

f012bd03 <test_krealloc>:

int test_krealloc() {
f012bd03:	55                   	push   %ebp
f012bd04:	89 e5                	mov    %esp,%ebp
f012bd06:	57                   	push   %edi
f012bd07:	53                   	push   %ebx
f012bd08:	81 ec 50 02 00 00    	sub    $0x250,%esp
	cprintf("==============================================\n");
f012bd0e:	83 ec 0c             	sub    $0xc,%esp
f012bd11:	68 bc b2 13 f0       	push   $0xf013b2bc
f012bd16:	e8 f3 4f fd ff       	call   f0100d0e <cprintf>
f012bd1b:	83 c4 10             	add    $0x10,%esp
	cprintf(
f012bd1e:	83 ec 0c             	sub    $0xc,%esp
f012bd21:	68 ec b2 13 f0       	push   $0xf013b2ec
f012bd26:	e8 e3 4f fd ff       	call   f0100d0e <cprintf>
f012bd2b:	83 c4 10             	add    $0x10,%esp
			"MAKE SURE to have a FRESH RUN for this test\n(i.e. don't run any program/test before it)\n");
	cprintf("==============================================\n");
f012bd2e:	83 ec 0c             	sub    $0xc,%esp
f012bd31:	68 bc b2 13 f0       	push   $0xf013b2bc
f012bd36:	e8 d3 4f fd ff       	call   f0100d0e <cprintf>
f012bd3b:	83 c4 10             	add    $0x10,%esp
	char minByte = 1 << 7;
f012bd3e:	c6 45 cf 80          	movb   $0x80,-0x31(%ebp)
	char maxByte = 0x7F;
f012bd42:	c6 45 ce 7f          	movb   $0x7f,-0x32(%ebp)
	short minShort = 1 << 15;
f012bd46:	66 c7 45 cc 00 80    	movw   $0x8000,-0x34(%ebp)
	short maxShort = 0x7FFF;
f012bd4c:	66 c7 45 ca ff 7f    	movw   $0x7fff,-0x36(%ebp)
	int minInt = 1 << 31;
f012bd52:	c7 45 c4 00 00 00 80 	movl   $0x80000000,-0x3c(%ebp)
	int maxInt = 0x7FFFFFFF;
f012bd59:	c7 45 c0 ff ff ff 7f 	movl   $0x7fffffff,-0x40(%ebp)
	int *intArr;
	struct MyStruct *structArr;
	int lastIndexOfByte, lastIndexOfByte2, lastIndexOfShort, lastIndexOfShort2,
			lastIndexOfInt, lastIndexOfStruct;
	//[1] Test calling krealloc with VA = NULL. It should call malloc
	void* ptr_allocations[20] = { 0 };
f012bd60:	8d 95 58 fe ff ff    	lea    -0x1a8(%ebp),%edx
f012bd66:	b9 14 00 00 00       	mov    $0x14,%ecx
f012bd6b:	b8 00 00 00 00       	mov    $0x0,%eax
f012bd70:	89 d7                	mov    %edx,%edi
f012bd72:	f3 ab                	rep stos %eax,%es:(%edi)
	char* ptr;
	void* newAddress = NULL;
f012bd74:	c7 45 bc 00 00 00 00 	movl   $0x0,-0x44(%ebp)
	int freeDiskFrames;


	int lastIndices[20] = { 0 };
f012bd7b:	8d 95 08 fe ff ff    	lea    -0x1f8(%ebp),%edx
f012bd81:	b9 14 00 00 00       	mov    $0x14,%ecx
f012bd86:	b8 00 00 00 00       	mov    $0x0,%eax
f012bd8b:	89 d7                	mov    %edx,%edi
f012bd8d:	f3 ab                	rep stos %eax,%es:(%edi)
	int sums[20] = { 0 };
f012bd8f:	8d 95 b8 fd ff ff    	lea    -0x248(%ebp),%edx
f012bd95:	b9 14 00 00 00       	mov    $0x14,%ecx
f012bd9a:	b8 00 00 00 00       	mov    $0x0,%eax
f012bd9f:	89 d7                	mov    %edx,%edi
f012bda1:	f3 ab                	rep stos %eax,%es:(%edi)
	int freeFrames;
	//[1] Allocate all
	{
		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames();
f012bda3:	e8 f5 0d fe ff       	call   f010cb9d <sys_calculate_free_frames>
f012bda8:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[0] = krealloc(NULL, 1 * Mega - kilo);
f012bdab:	83 ec 08             	sub    $0x8,%esp
f012bdae:	68 00 fc 0f 00       	push   $0xffc00
f012bdb3:	6a 00                	push   $0x0
f012bdb5:	e8 8b bd fd ff       	call   f0107b45 <krealloc>
f012bdba:	83 c4 10             	add    $0x10,%esp
f012bdbd:	89 85 58 fe ff ff    	mov    %eax,-0x1a8(%ebp)
		if ((uint32) ptr_allocations[0] < (KERNEL_HEAP_START))
f012bdc3:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f012bdc9:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012bdce:	77 17                	ja     f012bde7 <test_krealloc+0xe4>
			panic("krealloc: Wrong start address for the allocated space... ");
f012bdd0:	83 ec 04             	sub    $0x4,%esp
f012bdd3:	68 20 c6 13 f0       	push   $0xf013c620
f012bdd8:	68 e2 0e 00 00       	push   $0xee2
f012bddd:	68 7a b3 13 f0       	push   $0xf013b37a
f012bde2:	e8 1e 44 fd ff       	call   f0100205 <_panic>
		if ((uint32) ptr_allocations[0] != ACTUAL_START)
f012bde7:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f012bded:	89 c1                	mov    %eax,%ecx
f012bdef:	c7 45 b4 00 10 00 00 	movl   $0x1000,-0x4c(%ebp)
f012bdf6:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f012bdf9:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012bdfe:	89 45 b0             	mov    %eax,-0x50(%ebp)
f012be01:	8b 45 b0             	mov    -0x50(%ebp),%eax
f012be04:	ba 00 00 00 00       	mov    $0x0,%edx
f012be09:	f7 75 b4             	divl   -0x4c(%ebp)
f012be0c:	8b 45 b0             	mov    -0x50(%ebp),%eax
f012be0f:	29 d0                	sub    %edx,%eax
f012be11:	89 c3                	mov    %eax,%ebx
f012be13:	c7 45 ac 00 10 00 00 	movl   $0x1000,-0x54(%ebp)
f012be1a:	a0 40 26 78 f0       	mov    0xf0782640,%al
f012be1f:	0f b6 d0             	movzbl %al,%edx
f012be22:	8b 45 ac             	mov    -0x54(%ebp),%eax
f012be25:	01 d0                	add    %edx,%eax
f012be27:	48                   	dec    %eax
f012be28:	89 45 a8             	mov    %eax,-0x58(%ebp)
f012be2b:	8b 45 a8             	mov    -0x58(%ebp),%eax
f012be2e:	ba 00 00 00 00       	mov    $0x0,%edx
f012be33:	f7 75 ac             	divl   -0x54(%ebp)
f012be36:	8b 45 a8             	mov    -0x58(%ebp),%eax
f012be39:	29 d0                	sub    %edx,%eax
f012be3b:	01 c3                	add    %eax,%ebx
f012be3d:	c7 45 a4 00 10 00 00 	movl   $0x1000,-0x5c(%ebp)
f012be44:	a0 40 26 78 f0       	mov    0xf0782640,%al
f012be49:	0f b6 c0             	movzbl %al,%eax
f012be4c:	c1 e0 04             	shl    $0x4,%eax
f012be4f:	89 c2                	mov    %eax,%edx
f012be51:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f012be54:	01 d0                	add    %edx,%eax
f012be56:	48                   	dec    %eax
f012be57:	89 45 a0             	mov    %eax,-0x60(%ebp)
f012be5a:	8b 45 a0             	mov    -0x60(%ebp),%eax
f012be5d:	ba 00 00 00 00       	mov    $0x0,%edx
f012be62:	f7 75 a4             	divl   -0x5c(%ebp)
f012be65:	8b 45 a0             	mov    -0x60(%ebp),%eax
f012be68:	29 d0                	sub    %edx,%eax
f012be6a:	01 d8                	add    %ebx,%eax
f012be6c:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f012be71:	39 c1                	cmp    %eax,%ecx
f012be73:	74 17                	je     f012be8c <test_krealloc+0x189>
			panic("krealloc: Wrong start address for allocated space");
f012be75:	83 ec 04             	sub    $0x4,%esp
f012be78:	68 5c c6 13 f0       	push   $0xf013c65c
f012be7d:	68 e4 0e 00 00       	push   $0xee4
f012be82:	68 7a b3 13 f0       	push   $0xf013b37a
f012be87:	e8 79 43 fd ff       	call   f0100205 <_panic>

		if ((freeFrames - sys_calculate_free_frames()) != 256)
f012be8c:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012be8f:	e8 09 0d fe ff       	call   f010cb9d <sys_calculate_free_frames>
f012be94:	29 c3                	sub    %eax,%ebx
f012be96:	89 d8                	mov    %ebx,%eax
f012be98:	3d 00 01 00 00       	cmp    $0x100,%eax
f012be9d:	74 17                	je     f012beb6 <test_krealloc+0x1b3>
			panic("krealloc: Wrong allocation: ");
f012be9f:	83 ec 04             	sub    $0x4,%esp
f012bea2:	68 8e c6 13 f0       	push   $0xf013c68e
f012bea7:	68 e7 0e 00 00       	push   $0xee7
f012beac:	68 7a b3 13 f0       	push   $0xf013b37a
f012beb1:	e8 4f 43 fd ff       	call   f0100205 <_panic>

		lastIndices[0] = (1 * Mega - kilo) / sizeof(char) - 1;
f012beb6:	c7 85 08 fe ff ff ff 	movl   $0xffbff,-0x1f8(%ebp)
f012bebd:	fb 0f 00 

		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames();
f012bec0:	e8 d8 0c fe ff       	call   f010cb9d <sys_calculate_free_frames>
f012bec5:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[1] = krealloc(NULL, 1 * Mega - kilo);
f012bec8:	83 ec 08             	sub    $0x8,%esp
f012becb:	68 00 fc 0f 00       	push   $0xffc00
f012bed0:	6a 00                	push   $0x0
f012bed2:	e8 6e bc fd ff       	call   f0107b45 <krealloc>
f012bed7:	83 c4 10             	add    $0x10,%esp
f012beda:	89 85 5c fe ff ff    	mov    %eax,-0x1a4(%ebp)
		if ((uint32) ptr_allocations[1] < (KERNEL_HEAP_START + 1 * Mega))
f012bee0:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f012bee6:	3d ff ff 0f f6       	cmp    $0xf60fffff,%eax
f012beeb:	77 17                	ja     f012bf04 <test_krealloc+0x201>
			panic("krealloc: Wrong start address for the allocated space... ");
f012beed:	83 ec 04             	sub    $0x4,%esp
f012bef0:	68 20 c6 13 f0       	push   $0xf013c620
f012bef5:	68 ef 0e 00 00       	push   $0xeef
f012befa:	68 7a b3 13 f0       	push   $0xf013b37a
f012beff:	e8 01 43 fd ff       	call   f0100205 <_panic>
		if ((uint32) ptr_allocations[1] != ACTUAL_START + (1 * Mega))
f012bf04:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f012bf0a:	89 c1                	mov    %eax,%ecx
f012bf0c:	c7 45 9c 00 10 00 00 	movl   $0x1000,-0x64(%ebp)
f012bf13:	8b 45 9c             	mov    -0x64(%ebp),%eax
f012bf16:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012bf1b:	89 45 98             	mov    %eax,-0x68(%ebp)
f012bf1e:	8b 45 98             	mov    -0x68(%ebp),%eax
f012bf21:	ba 00 00 00 00       	mov    $0x0,%edx
f012bf26:	f7 75 9c             	divl   -0x64(%ebp)
f012bf29:	8b 45 98             	mov    -0x68(%ebp),%eax
f012bf2c:	29 d0                	sub    %edx,%eax
f012bf2e:	89 c3                	mov    %eax,%ebx
f012bf30:	c7 45 94 00 10 00 00 	movl   $0x1000,-0x6c(%ebp)
f012bf37:	a0 40 26 78 f0       	mov    0xf0782640,%al
f012bf3c:	0f b6 d0             	movzbl %al,%edx
f012bf3f:	8b 45 94             	mov    -0x6c(%ebp),%eax
f012bf42:	01 d0                	add    %edx,%eax
f012bf44:	48                   	dec    %eax
f012bf45:	89 45 90             	mov    %eax,-0x70(%ebp)
f012bf48:	8b 45 90             	mov    -0x70(%ebp),%eax
f012bf4b:	ba 00 00 00 00       	mov    $0x0,%edx
f012bf50:	f7 75 94             	divl   -0x6c(%ebp)
f012bf53:	8b 45 90             	mov    -0x70(%ebp),%eax
f012bf56:	29 d0                	sub    %edx,%eax
f012bf58:	01 c3                	add    %eax,%ebx
f012bf5a:	c7 45 8c 00 10 00 00 	movl   $0x1000,-0x74(%ebp)
f012bf61:	a0 40 26 78 f0       	mov    0xf0782640,%al
f012bf66:	0f b6 c0             	movzbl %al,%eax
f012bf69:	c1 e0 04             	shl    $0x4,%eax
f012bf6c:	89 c2                	mov    %eax,%edx
f012bf6e:	8b 45 8c             	mov    -0x74(%ebp),%eax
f012bf71:	01 d0                	add    %edx,%eax
f012bf73:	48                   	dec    %eax
f012bf74:	89 45 88             	mov    %eax,-0x78(%ebp)
f012bf77:	8b 45 88             	mov    -0x78(%ebp),%eax
f012bf7a:	ba 00 00 00 00       	mov    $0x0,%edx
f012bf7f:	f7 75 8c             	divl   -0x74(%ebp)
f012bf82:	8b 45 88             	mov    -0x78(%ebp),%eax
f012bf85:	29 d0                	sub    %edx,%eax
f012bf87:	01 d8                	add    %ebx,%eax
f012bf89:	2d 00 c0 ef 09       	sub    $0x9efc000,%eax
f012bf8e:	39 c1                	cmp    %eax,%ecx
f012bf90:	74 17                	je     f012bfa9 <test_krealloc+0x2a6>
			panic("krealloc: Wrong start address for allocated space");
f012bf92:	83 ec 04             	sub    $0x4,%esp
f012bf95:	68 5c c6 13 f0       	push   $0xf013c65c
f012bf9a:	68 f1 0e 00 00       	push   $0xef1
f012bf9f:	68 7a b3 13 f0       	push   $0xf013b37a
f012bfa4:	e8 5c 42 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256)
f012bfa9:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012bfac:	e8 ec 0b fe ff       	call   f010cb9d <sys_calculate_free_frames>
f012bfb1:	29 c3                	sub    %eax,%ebx
f012bfb3:	89 d8                	mov    %ebx,%eax
f012bfb5:	3d 00 01 00 00       	cmp    $0x100,%eax
f012bfba:	74 17                	je     f012bfd3 <test_krealloc+0x2d0>
			panic("krealloc: Wrong allocation: ");
f012bfbc:	83 ec 04             	sub    $0x4,%esp
f012bfbf:	68 8e c6 13 f0       	push   $0xf013c68e
f012bfc4:	68 f3 0e 00 00       	push   $0xef3
f012bfc9:	68 7a b3 13 f0       	push   $0xf013b37a
f012bfce:	e8 32 42 fd ff       	call   f0100205 <_panic>

		lastIndices[1] = (1 * Mega - kilo) / sizeof(char) - 1;
f012bfd3:	c7 85 0c fe ff ff ff 	movl   $0xffbff,-0x1f4(%ebp)
f012bfda:	fb 0f 00 

		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames();
f012bfdd:	e8 bb 0b fe ff       	call   f010cb9d <sys_calculate_free_frames>
f012bfe2:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[2] = krealloc(NULL, 1 * Mega - kilo);
f012bfe5:	83 ec 08             	sub    $0x8,%esp
f012bfe8:	68 00 fc 0f 00       	push   $0xffc00
f012bfed:	6a 00                	push   $0x0
f012bfef:	e8 51 bb fd ff       	call   f0107b45 <krealloc>
f012bff4:	83 c4 10             	add    $0x10,%esp
f012bff7:	89 85 60 fe ff ff    	mov    %eax,-0x1a0(%ebp)
		if ((uint32) ptr_allocations[2] < (KERNEL_HEAP_START + 2 * Mega))
f012bffd:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f012c003:	3d ff ff 1f f6       	cmp    $0xf61fffff,%eax
f012c008:	77 17                	ja     f012c021 <test_krealloc+0x31e>
			panic("krealloc: Wrong start address for the allocated space... ");
f012c00a:	83 ec 04             	sub    $0x4,%esp
f012c00d:	68 20 c6 13 f0       	push   $0xf013c620
f012c012:	68 fb 0e 00 00       	push   $0xefb
f012c017:	68 7a b3 13 f0       	push   $0xf013b37a
f012c01c:	e8 e4 41 fd ff       	call   f0100205 <_panic>
		if ((uint32) ptr_allocations[2] != ACTUAL_START + (2 * Mega))
f012c021:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f012c027:	89 c1                	mov    %eax,%ecx
f012c029:	c7 45 84 00 10 00 00 	movl   $0x1000,-0x7c(%ebp)
f012c030:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012c033:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012c038:	89 45 80             	mov    %eax,-0x80(%ebp)
f012c03b:	8b 45 80             	mov    -0x80(%ebp),%eax
f012c03e:	ba 00 00 00 00       	mov    $0x0,%edx
f012c043:	f7 75 84             	divl   -0x7c(%ebp)
f012c046:	8b 45 80             	mov    -0x80(%ebp),%eax
f012c049:	29 d0                	sub    %edx,%eax
f012c04b:	89 c3                	mov    %eax,%ebx
f012c04d:	c7 85 7c ff ff ff 00 	movl   $0x1000,-0x84(%ebp)
f012c054:	10 00 00 
f012c057:	a0 40 26 78 f0       	mov    0xf0782640,%al
f012c05c:	0f b6 d0             	movzbl %al,%edx
f012c05f:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f012c065:	01 d0                	add    %edx,%eax
f012c067:	48                   	dec    %eax
f012c068:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)
f012c06e:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f012c074:	ba 00 00 00 00       	mov    $0x0,%edx
f012c079:	f7 b5 7c ff ff ff    	divl   -0x84(%ebp)
f012c07f:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f012c085:	29 d0                	sub    %edx,%eax
f012c087:	01 c3                	add    %eax,%ebx
f012c089:	c7 85 74 ff ff ff 00 	movl   $0x1000,-0x8c(%ebp)
f012c090:	10 00 00 
f012c093:	a0 40 26 78 f0       	mov    0xf0782640,%al
f012c098:	0f b6 c0             	movzbl %al,%eax
f012c09b:	c1 e0 04             	shl    $0x4,%eax
f012c09e:	89 c2                	mov    %eax,%edx
f012c0a0:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f012c0a6:	01 d0                	add    %edx,%eax
f012c0a8:	48                   	dec    %eax
f012c0a9:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
f012c0af:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f012c0b5:	ba 00 00 00 00       	mov    $0x0,%edx
f012c0ba:	f7 b5 74 ff ff ff    	divl   -0x8c(%ebp)
f012c0c0:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f012c0c6:	29 d0                	sub    %edx,%eax
f012c0c8:	01 d8                	add    %ebx,%eax
f012c0ca:	2d 00 c0 df 09       	sub    $0x9dfc000,%eax
f012c0cf:	39 c1                	cmp    %eax,%ecx
f012c0d1:	74 17                	je     f012c0ea <test_krealloc+0x3e7>
			panic("krealloc: Wrong start address for allocated space");
f012c0d3:	83 ec 04             	sub    $0x4,%esp
f012c0d6:	68 5c c6 13 f0       	push   $0xf013c65c
f012c0db:	68 fd 0e 00 00       	push   $0xefd
f012c0e0:	68 7a b3 13 f0       	push   $0xf013b37a
f012c0e5:	e8 1b 41 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256)
f012c0ea:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012c0ed:	e8 ab 0a fe ff       	call   f010cb9d <sys_calculate_free_frames>
f012c0f2:	29 c3                	sub    %eax,%ebx
f012c0f4:	89 d8                	mov    %ebx,%eax
f012c0f6:	3d 00 01 00 00       	cmp    $0x100,%eax
f012c0fb:	74 17                	je     f012c114 <test_krealloc+0x411>
			panic("krealloc: Wrong allocation: ");
f012c0fd:	83 ec 04             	sub    $0x4,%esp
f012c100:	68 8e c6 13 f0       	push   $0xf013c68e
f012c105:	68 ff 0e 00 00       	push   $0xeff
f012c10a:	68 7a b3 13 f0       	push   $0xf013b37a
f012c10f:	e8 f1 40 fd ff       	call   f0100205 <_panic>
		lastIndices[2] = (1 * Mega - kilo) / sizeof(int) - 1;
f012c114:	c7 85 10 fe ff ff ff 	movl   $0x3feff,-0x1f0(%ebp)
f012c11b:	fe 03 00 

		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames();
f012c11e:	e8 7a 0a fe ff       	call   f010cb9d <sys_calculate_free_frames>
f012c123:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[3] = krealloc(NULL, 1 * Mega - kilo);
f012c126:	83 ec 08             	sub    $0x8,%esp
f012c129:	68 00 fc 0f 00       	push   $0xffc00
f012c12e:	6a 00                	push   $0x0
f012c130:	e8 10 ba fd ff       	call   f0107b45 <krealloc>
f012c135:	83 c4 10             	add    $0x10,%esp
f012c138:	89 85 64 fe ff ff    	mov    %eax,-0x19c(%ebp)
		if ((uint32) ptr_allocations[3] < (KERNEL_HEAP_START + 3 * Mega))
f012c13e:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f012c144:	3d ff ff 2f f6       	cmp    $0xf62fffff,%eax
f012c149:	77 17                	ja     f012c162 <test_krealloc+0x45f>
			panic("krealloc: Wrong start address for the allocated space... ");
f012c14b:	83 ec 04             	sub    $0x4,%esp
f012c14e:	68 20 c6 13 f0       	push   $0xf013c620
f012c153:	68 06 0f 00 00       	push   $0xf06
f012c158:	68 7a b3 13 f0       	push   $0xf013b37a
f012c15d:	e8 a3 40 fd ff       	call   f0100205 <_panic>
		if ((uint32) ptr_allocations[3] != ACTUAL_START + (3 * Mega))
f012c162:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f012c168:	89 c1                	mov    %eax,%ecx
f012c16a:	c7 85 6c ff ff ff 00 	movl   $0x1000,-0x94(%ebp)
f012c171:	10 00 00 
f012c174:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f012c17a:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012c17f:	89 85 68 ff ff ff    	mov    %eax,-0x98(%ebp)
f012c185:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f012c18b:	ba 00 00 00 00       	mov    $0x0,%edx
f012c190:	f7 b5 6c ff ff ff    	divl   -0x94(%ebp)
f012c196:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f012c19c:	29 d0                	sub    %edx,%eax
f012c19e:	89 c3                	mov    %eax,%ebx
f012c1a0:	c7 85 64 ff ff ff 00 	movl   $0x1000,-0x9c(%ebp)
f012c1a7:	10 00 00 
f012c1aa:	a0 40 26 78 f0       	mov    0xf0782640,%al
f012c1af:	0f b6 d0             	movzbl %al,%edx
f012c1b2:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f012c1b8:	01 d0                	add    %edx,%eax
f012c1ba:	48                   	dec    %eax
f012c1bb:	89 85 60 ff ff ff    	mov    %eax,-0xa0(%ebp)
f012c1c1:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f012c1c7:	ba 00 00 00 00       	mov    $0x0,%edx
f012c1cc:	f7 b5 64 ff ff ff    	divl   -0x9c(%ebp)
f012c1d2:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f012c1d8:	29 d0                	sub    %edx,%eax
f012c1da:	01 c3                	add    %eax,%ebx
f012c1dc:	c7 85 5c ff ff ff 00 	movl   $0x1000,-0xa4(%ebp)
f012c1e3:	10 00 00 
f012c1e6:	a0 40 26 78 f0       	mov    0xf0782640,%al
f012c1eb:	0f b6 c0             	movzbl %al,%eax
f012c1ee:	c1 e0 04             	shl    $0x4,%eax
f012c1f1:	89 c2                	mov    %eax,%edx
f012c1f3:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f012c1f9:	01 d0                	add    %edx,%eax
f012c1fb:	48                   	dec    %eax
f012c1fc:	89 85 58 ff ff ff    	mov    %eax,-0xa8(%ebp)
f012c202:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f012c208:	ba 00 00 00 00       	mov    $0x0,%edx
f012c20d:	f7 b5 5c ff ff ff    	divl   -0xa4(%ebp)
f012c213:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f012c219:	29 d0                	sub    %edx,%eax
f012c21b:	01 d8                	add    %ebx,%eax
f012c21d:	2d 00 c0 cf 09       	sub    $0x9cfc000,%eax
f012c222:	39 c1                	cmp    %eax,%ecx
f012c224:	74 17                	je     f012c23d <test_krealloc+0x53a>
			panic("krealloc: Wrong start address for allocated space");
f012c226:	83 ec 04             	sub    $0x4,%esp
f012c229:	68 5c c6 13 f0       	push   $0xf013c65c
f012c22e:	68 08 0f 00 00       	push   $0xf08
f012c233:	68 7a b3 13 f0       	push   $0xf013b37a
f012c238:	e8 c8 3f fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256)
f012c23d:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012c240:	e8 58 09 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f012c245:	29 c3                	sub    %eax,%ebx
f012c247:	89 d8                	mov    %ebx,%eax
f012c249:	3d 00 01 00 00       	cmp    $0x100,%eax
f012c24e:	74 17                	je     f012c267 <test_krealloc+0x564>
			panic("krealloc: Wrong allocation: ");
f012c250:	83 ec 04             	sub    $0x4,%esp
f012c253:	68 8e c6 13 f0       	push   $0xf013c68e
f012c258:	68 0a 0f 00 00       	push   $0xf0a
f012c25d:	68 7a b3 13 f0       	push   $0xf013b37a
f012c262:	e8 9e 3f fd ff       	call   f0100205 <_panic>
		lastIndices[3] = (1 * Mega - kilo) / sizeof(int) - 1;
f012c267:	c7 85 14 fe ff ff ff 	movl   $0x3feff,-0x1ec(%ebp)
f012c26e:	fe 03 00 

		//Allocate 2 MB
		freeFrames = sys_calculate_free_frames();
f012c271:	e8 27 09 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f012c276:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[4] = krealloc(NULL, 2 * Mega - kilo);
f012c279:	83 ec 08             	sub    $0x8,%esp
f012c27c:	68 00 fc 1f 00       	push   $0x1ffc00
f012c281:	6a 00                	push   $0x0
f012c283:	e8 bd b8 fd ff       	call   f0107b45 <krealloc>
f012c288:	83 c4 10             	add    $0x10,%esp
f012c28b:	89 85 68 fe ff ff    	mov    %eax,-0x198(%ebp)
		if ((uint32) ptr_allocations[4] < (KERNEL_HEAP_START + 4 * Mega))
f012c291:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f012c297:	3d ff ff 3f f6       	cmp    $0xf63fffff,%eax
f012c29c:	77 17                	ja     f012c2b5 <test_krealloc+0x5b2>
			panic("krealloc: Wrong start address for the allocated space... ");
f012c29e:	83 ec 04             	sub    $0x4,%esp
f012c2a1:	68 20 c6 13 f0       	push   $0xf013c620
f012c2a6:	68 11 0f 00 00       	push   $0xf11
f012c2ab:	68 7a b3 13 f0       	push   $0xf013b37a
f012c2b0:	e8 50 3f fd ff       	call   f0100205 <_panic>
		if ((uint32) ptr_allocations[4] != ACTUAL_START + (4 * Mega))
f012c2b5:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f012c2bb:	89 c1                	mov    %eax,%ecx
f012c2bd:	c7 85 54 ff ff ff 00 	movl   $0x1000,-0xac(%ebp)
f012c2c4:	10 00 00 
f012c2c7:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f012c2cd:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012c2d2:	89 85 50 ff ff ff    	mov    %eax,-0xb0(%ebp)
f012c2d8:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f012c2de:	ba 00 00 00 00       	mov    $0x0,%edx
f012c2e3:	f7 b5 54 ff ff ff    	divl   -0xac(%ebp)
f012c2e9:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f012c2ef:	29 d0                	sub    %edx,%eax
f012c2f1:	89 c3                	mov    %eax,%ebx
f012c2f3:	c7 85 4c ff ff ff 00 	movl   $0x1000,-0xb4(%ebp)
f012c2fa:	10 00 00 
f012c2fd:	a0 40 26 78 f0       	mov    0xf0782640,%al
f012c302:	0f b6 d0             	movzbl %al,%edx
f012c305:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f012c30b:	01 d0                	add    %edx,%eax
f012c30d:	48                   	dec    %eax
f012c30e:	89 85 48 ff ff ff    	mov    %eax,-0xb8(%ebp)
f012c314:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f012c31a:	ba 00 00 00 00       	mov    $0x0,%edx
f012c31f:	f7 b5 4c ff ff ff    	divl   -0xb4(%ebp)
f012c325:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f012c32b:	29 d0                	sub    %edx,%eax
f012c32d:	01 c3                	add    %eax,%ebx
f012c32f:	c7 85 44 ff ff ff 00 	movl   $0x1000,-0xbc(%ebp)
f012c336:	10 00 00 
f012c339:	a0 40 26 78 f0       	mov    0xf0782640,%al
f012c33e:	0f b6 c0             	movzbl %al,%eax
f012c341:	c1 e0 04             	shl    $0x4,%eax
f012c344:	89 c2                	mov    %eax,%edx
f012c346:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f012c34c:	01 d0                	add    %edx,%eax
f012c34e:	48                   	dec    %eax
f012c34f:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%ebp)
f012c355:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f012c35b:	ba 00 00 00 00       	mov    $0x0,%edx
f012c360:	f7 b5 44 ff ff ff    	divl   -0xbc(%ebp)
f012c366:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f012c36c:	29 d0                	sub    %edx,%eax
f012c36e:	01 d8                	add    %ebx,%eax
f012c370:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
f012c375:	39 c1                	cmp    %eax,%ecx
f012c377:	74 17                	je     f012c390 <test_krealloc+0x68d>
			panic("krealloc: Wrong start address for allocated space");
f012c379:	83 ec 04             	sub    $0x4,%esp
f012c37c:	68 5c c6 13 f0       	push   $0xf013c65c
f012c381:	68 13 0f 00 00       	push   $0xf13
f012c386:	68 7a b3 13 f0       	push   $0xf013b37a
f012c38b:	e8 75 3e fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512)
f012c390:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012c393:	e8 05 08 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f012c398:	29 c3                	sub    %eax,%ebx
f012c39a:	89 d8                	mov    %ebx,%eax
f012c39c:	3d 00 02 00 00       	cmp    $0x200,%eax
f012c3a1:	74 17                	je     f012c3ba <test_krealloc+0x6b7>
			panic("krealloc: Wrong allocation: ");
f012c3a3:	83 ec 04             	sub    $0x4,%esp
f012c3a6:	68 8e c6 13 f0       	push   $0xf013c68e
f012c3ab:	68 15 0f 00 00       	push   $0xf15
f012c3b0:	68 7a b3 13 f0       	push   $0xf013b37a
f012c3b5:	e8 4b 3e fd ff       	call   f0100205 <_panic>
		lastIndices[4] = (2 * Mega - kilo) / sizeof(short) - 1;
f012c3ba:	c7 85 18 fe ff ff ff 	movl   $0xffdff,-0x1e8(%ebp)
f012c3c1:	fd 0f 00 

		//Allocate 2 MB
		freeFrames = sys_calculate_free_frames();
f012c3c4:	e8 d4 07 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f012c3c9:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[5] = krealloc(NULL, 2 * Mega - kilo);
f012c3cc:	83 ec 08             	sub    $0x8,%esp
f012c3cf:	68 00 fc 1f 00       	push   $0x1ffc00
f012c3d4:	6a 00                	push   $0x0
f012c3d6:	e8 6a b7 fd ff       	call   f0107b45 <krealloc>
f012c3db:	83 c4 10             	add    $0x10,%esp
f012c3de:	89 85 6c fe ff ff    	mov    %eax,-0x194(%ebp)
		if ((uint32) ptr_allocations[5] < (KERNEL_HEAP_START + 6 * Mega))
f012c3e4:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f012c3ea:	3d ff ff 5f f6       	cmp    $0xf65fffff,%eax
f012c3ef:	77 17                	ja     f012c408 <test_krealloc+0x705>
			panic("krealloc: Wrong start address for the allocated space... ");
f012c3f1:	83 ec 04             	sub    $0x4,%esp
f012c3f4:	68 20 c6 13 f0       	push   $0xf013c620
f012c3f9:	68 1c 0f 00 00       	push   $0xf1c
f012c3fe:	68 7a b3 13 f0       	push   $0xf013b37a
f012c403:	e8 fd 3d fd ff       	call   f0100205 <_panic>
		if ((uint32) ptr_allocations[5] != ACTUAL_START + (6 * Mega))
f012c408:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f012c40e:	89 c1                	mov    %eax,%ecx
f012c410:	c7 85 3c ff ff ff 00 	movl   $0x1000,-0xc4(%ebp)
f012c417:	10 00 00 
f012c41a:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f012c420:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012c425:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
f012c42b:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f012c431:	ba 00 00 00 00       	mov    $0x0,%edx
f012c436:	f7 b5 3c ff ff ff    	divl   -0xc4(%ebp)
f012c43c:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f012c442:	29 d0                	sub    %edx,%eax
f012c444:	89 c3                	mov    %eax,%ebx
f012c446:	c7 85 34 ff ff ff 00 	movl   $0x1000,-0xcc(%ebp)
f012c44d:	10 00 00 
f012c450:	a0 40 26 78 f0       	mov    0xf0782640,%al
f012c455:	0f b6 d0             	movzbl %al,%edx
f012c458:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f012c45e:	01 d0                	add    %edx,%eax
f012c460:	48                   	dec    %eax
f012c461:	89 85 30 ff ff ff    	mov    %eax,-0xd0(%ebp)
f012c467:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f012c46d:	ba 00 00 00 00       	mov    $0x0,%edx
f012c472:	f7 b5 34 ff ff ff    	divl   -0xcc(%ebp)
f012c478:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f012c47e:	29 d0                	sub    %edx,%eax
f012c480:	01 c3                	add    %eax,%ebx
f012c482:	c7 85 2c ff ff ff 00 	movl   $0x1000,-0xd4(%ebp)
f012c489:	10 00 00 
f012c48c:	a0 40 26 78 f0       	mov    0xf0782640,%al
f012c491:	0f b6 c0             	movzbl %al,%eax
f012c494:	c1 e0 04             	shl    $0x4,%eax
f012c497:	89 c2                	mov    %eax,%edx
f012c499:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f012c49f:	01 d0                	add    %edx,%eax
f012c4a1:	48                   	dec    %eax
f012c4a2:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%ebp)
f012c4a8:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f012c4ae:	ba 00 00 00 00       	mov    $0x0,%edx
f012c4b3:	f7 b5 2c ff ff ff    	divl   -0xd4(%ebp)
f012c4b9:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f012c4bf:	29 d0                	sub    %edx,%eax
f012c4c1:	01 d8                	add    %ebx,%eax
f012c4c3:	2d 00 c0 9f 09       	sub    $0x99fc000,%eax
f012c4c8:	39 c1                	cmp    %eax,%ecx
f012c4ca:	74 17                	je     f012c4e3 <test_krealloc+0x7e0>
			panic("krealloc: Wrong start address for allocated space");
f012c4cc:	83 ec 04             	sub    $0x4,%esp
f012c4cf:	68 5c c6 13 f0       	push   $0xf013c65c
f012c4d4:	68 1e 0f 00 00       	push   $0xf1e
f012c4d9:	68 7a b3 13 f0       	push   $0xf013b37a
f012c4de:	e8 22 3d fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512)
f012c4e3:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012c4e6:	e8 b2 06 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f012c4eb:	29 c3                	sub    %eax,%ebx
f012c4ed:	89 d8                	mov    %ebx,%eax
f012c4ef:	3d 00 02 00 00       	cmp    $0x200,%eax
f012c4f4:	74 17                	je     f012c50d <test_krealloc+0x80a>
			panic("krealloc: Wrong allocation: ");
f012c4f6:	83 ec 04             	sub    $0x4,%esp
f012c4f9:	68 8e c6 13 f0       	push   $0xf013c68e
f012c4fe:	68 20 0f 00 00       	push   $0xf20
f012c503:	68 7a b3 13 f0       	push   $0xf013b37a
f012c508:	e8 f8 3c fd ff       	call   f0100205 <_panic>
		lastIndices[5] = (2 * Mega - kilo) / sizeof(short) - 1;
f012c50d:	c7 85 1c fe ff ff ff 	movl   $0xffdff,-0x1e4(%ebp)
f012c514:	fd 0f 00 

		//Allocate 3 MB
		freeFrames = sys_calculate_free_frames();
f012c517:	e8 81 06 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f012c51c:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[6] = krealloc(NULL, 3 * Mega - kilo);
f012c51f:	83 ec 08             	sub    $0x8,%esp
f012c522:	68 00 fc 2f 00       	push   $0x2ffc00
f012c527:	6a 00                	push   $0x0
f012c529:	e8 17 b6 fd ff       	call   f0107b45 <krealloc>
f012c52e:	83 c4 10             	add    $0x10,%esp
f012c531:	89 85 70 fe ff ff    	mov    %eax,-0x190(%ebp)
		if ((uint32) ptr_allocations[6] < (KERNEL_HEAP_START + 8 * Mega))
f012c537:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f012c53d:	3d ff ff 7f f6       	cmp    $0xf67fffff,%eax
f012c542:	77 17                	ja     f012c55b <test_krealloc+0x858>
			panic("krealloc: Wrong start address for the allocated space... ");
f012c544:	83 ec 04             	sub    $0x4,%esp
f012c547:	68 20 c6 13 f0       	push   $0xf013c620
f012c54c:	68 27 0f 00 00       	push   $0xf27
f012c551:	68 7a b3 13 f0       	push   $0xf013b37a
f012c556:	e8 aa 3c fd ff       	call   f0100205 <_panic>
		if ((uint32) ptr_allocations[6] != ACTUAL_START + (8 * Mega))
f012c55b:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f012c561:	89 c1                	mov    %eax,%ecx
f012c563:	c7 85 24 ff ff ff 00 	movl   $0x1000,-0xdc(%ebp)
f012c56a:	10 00 00 
f012c56d:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f012c573:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012c578:	89 85 20 ff ff ff    	mov    %eax,-0xe0(%ebp)
f012c57e:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012c584:	ba 00 00 00 00       	mov    $0x0,%edx
f012c589:	f7 b5 24 ff ff ff    	divl   -0xdc(%ebp)
f012c58f:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012c595:	29 d0                	sub    %edx,%eax
f012c597:	89 c3                	mov    %eax,%ebx
f012c599:	c7 85 1c ff ff ff 00 	movl   $0x1000,-0xe4(%ebp)
f012c5a0:	10 00 00 
f012c5a3:	a0 40 26 78 f0       	mov    0xf0782640,%al
f012c5a8:	0f b6 d0             	movzbl %al,%edx
f012c5ab:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f012c5b1:	01 d0                	add    %edx,%eax
f012c5b3:	48                   	dec    %eax
f012c5b4:	89 85 18 ff ff ff    	mov    %eax,-0xe8(%ebp)
f012c5ba:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f012c5c0:	ba 00 00 00 00       	mov    $0x0,%edx
f012c5c5:	f7 b5 1c ff ff ff    	divl   -0xe4(%ebp)
f012c5cb:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f012c5d1:	29 d0                	sub    %edx,%eax
f012c5d3:	01 c3                	add    %eax,%ebx
f012c5d5:	c7 85 14 ff ff ff 00 	movl   $0x1000,-0xec(%ebp)
f012c5dc:	10 00 00 
f012c5df:	a0 40 26 78 f0       	mov    0xf0782640,%al
f012c5e4:	0f b6 c0             	movzbl %al,%eax
f012c5e7:	c1 e0 04             	shl    $0x4,%eax
f012c5ea:	89 c2                	mov    %eax,%edx
f012c5ec:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f012c5f2:	01 d0                	add    %edx,%eax
f012c5f4:	48                   	dec    %eax
f012c5f5:	89 85 10 ff ff ff    	mov    %eax,-0xf0(%ebp)
f012c5fb:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f012c601:	ba 00 00 00 00       	mov    $0x0,%edx
f012c606:	f7 b5 14 ff ff ff    	divl   -0xec(%ebp)
f012c60c:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f012c612:	29 d0                	sub    %edx,%eax
f012c614:	01 d8                	add    %ebx,%eax
f012c616:	2d 00 c0 7f 09       	sub    $0x97fc000,%eax
f012c61b:	39 c1                	cmp    %eax,%ecx
f012c61d:	74 17                	je     f012c636 <test_krealloc+0x933>
			panic("krealloc: Wrong start address for allocated space");
f012c61f:	83 ec 04             	sub    $0x4,%esp
f012c622:	68 5c c6 13 f0       	push   $0xf013c65c
f012c627:	68 29 0f 00 00       	push   $0xf29
f012c62c:	68 7a b3 13 f0       	push   $0xf013b37a
f012c631:	e8 cf 3b fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768)
f012c636:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012c639:	e8 5f 05 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f012c63e:	29 c3                	sub    %eax,%ebx
f012c640:	89 d8                	mov    %ebx,%eax
f012c642:	3d 00 03 00 00       	cmp    $0x300,%eax
f012c647:	74 17                	je     f012c660 <test_krealloc+0x95d>
			panic("Wrong allocation: ");
f012c649:	83 ec 04             	sub    $0x4,%esp
f012c64c:	68 c4 b7 13 f0       	push   $0xf013b7c4
f012c651:	68 2b 0f 00 00       	push   $0xf2b
f012c656:	68 7a b3 13 f0       	push   $0xf013b37a
f012c65b:	e8 a5 3b fd ff       	call   f0100205 <_panic>
		lastIndices[6] = (3 * Mega - kilo) / sizeof(struct MyStruct) - 1;
f012c660:	c7 85 20 fe ff ff 7f 	movl   $0x5ff7f,-0x1e0(%ebp)
f012c667:	ff 05 00 

		//Allocate 3 MB
		freeFrames = sys_calculate_free_frames();
f012c66a:	e8 2e 05 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f012c66f:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[7] = krealloc(NULL, 3 * Mega - kilo);
f012c672:	83 ec 08             	sub    $0x8,%esp
f012c675:	68 00 fc 2f 00       	push   $0x2ffc00
f012c67a:	6a 00                	push   $0x0
f012c67c:	e8 c4 b4 fd ff       	call   f0107b45 <krealloc>
f012c681:	83 c4 10             	add    $0x10,%esp
f012c684:	89 85 74 fe ff ff    	mov    %eax,-0x18c(%ebp)
		if ((uint32) ptr_allocations[7] < (KERNEL_HEAP_START + 11 * Mega))
f012c68a:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f012c690:	3d ff ff af f6       	cmp    $0xf6afffff,%eax
f012c695:	77 17                	ja     f012c6ae <test_krealloc+0x9ab>
			panic("krealloc: Wrong start address for the allocated space... ");
f012c697:	83 ec 04             	sub    $0x4,%esp
f012c69a:	68 20 c6 13 f0       	push   $0xf013c620
f012c69f:	68 32 0f 00 00       	push   $0xf32
f012c6a4:	68 7a b3 13 f0       	push   $0xf013b37a
f012c6a9:	e8 57 3b fd ff       	call   f0100205 <_panic>
		if ((uint32) ptr_allocations[7] != ACTUAL_START + (11 * Mega))
f012c6ae:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f012c6b4:	89 c1                	mov    %eax,%ecx
f012c6b6:	c7 85 0c ff ff ff 00 	movl   $0x1000,-0xf4(%ebp)
f012c6bd:	10 00 00 
f012c6c0:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f012c6c6:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012c6cb:	89 85 08 ff ff ff    	mov    %eax,-0xf8(%ebp)
f012c6d1:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f012c6d7:	ba 00 00 00 00       	mov    $0x0,%edx
f012c6dc:	f7 b5 0c ff ff ff    	divl   -0xf4(%ebp)
f012c6e2:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f012c6e8:	29 d0                	sub    %edx,%eax
f012c6ea:	89 c3                	mov    %eax,%ebx
f012c6ec:	c7 85 04 ff ff ff 00 	movl   $0x1000,-0xfc(%ebp)
f012c6f3:	10 00 00 
f012c6f6:	a0 40 26 78 f0       	mov    0xf0782640,%al
f012c6fb:	0f b6 d0             	movzbl %al,%edx
f012c6fe:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f012c704:	01 d0                	add    %edx,%eax
f012c706:	48                   	dec    %eax
f012c707:	89 85 00 ff ff ff    	mov    %eax,-0x100(%ebp)
f012c70d:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f012c713:	ba 00 00 00 00       	mov    $0x0,%edx
f012c718:	f7 b5 04 ff ff ff    	divl   -0xfc(%ebp)
f012c71e:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f012c724:	29 d0                	sub    %edx,%eax
f012c726:	01 c3                	add    %eax,%ebx
f012c728:	c7 85 fc fe ff ff 00 	movl   $0x1000,-0x104(%ebp)
f012c72f:	10 00 00 
f012c732:	a0 40 26 78 f0       	mov    0xf0782640,%al
f012c737:	0f b6 c0             	movzbl %al,%eax
f012c73a:	c1 e0 04             	shl    $0x4,%eax
f012c73d:	89 c2                	mov    %eax,%edx
f012c73f:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f012c745:	01 d0                	add    %edx,%eax
f012c747:	48                   	dec    %eax
f012c748:	89 85 f8 fe ff ff    	mov    %eax,-0x108(%ebp)
f012c74e:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f012c754:	ba 00 00 00 00       	mov    $0x0,%edx
f012c759:	f7 b5 fc fe ff ff    	divl   -0x104(%ebp)
f012c75f:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f012c765:	29 d0                	sub    %edx,%eax
f012c767:	01 d8                	add    %ebx,%eax
f012c769:	2d 00 c0 4f 09       	sub    $0x94fc000,%eax
f012c76e:	39 c1                	cmp    %eax,%ecx
f012c770:	74 17                	je     f012c789 <test_krealloc+0xa86>
			panic("krealloc: Wrong start address for allocated space");
f012c772:	83 ec 04             	sub    $0x4,%esp
f012c775:	68 5c c6 13 f0       	push   $0xf013c65c
f012c77a:	68 34 0f 00 00       	push   $0xf34
f012c77f:	68 7a b3 13 f0       	push   $0xf013b37a
f012c784:	e8 7c 3a fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768)
f012c789:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012c78c:	e8 0c 04 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f012c791:	29 c3                	sub    %eax,%ebx
f012c793:	89 d8                	mov    %ebx,%eax
f012c795:	3d 00 03 00 00       	cmp    $0x300,%eax
f012c79a:	74 17                	je     f012c7b3 <test_krealloc+0xab0>
			panic("krealloc: Wrong allocation: ");
f012c79c:	83 ec 04             	sub    $0x4,%esp
f012c79f:	68 8e c6 13 f0       	push   $0xf013c68e
f012c7a4:	68 36 0f 00 00       	push   $0xf36
f012c7a9:	68 7a b3 13 f0       	push   $0xf013b37a
f012c7ae:	e8 52 3a fd ff       	call   f0100205 <_panic>
		lastIndices[7] = (3 * Mega - kilo) / sizeof(struct MyStruct) - 1;
f012c7b3:	c7 85 24 fe ff ff 7f 	movl   $0x5ff7f,-0x1dc(%ebp)
f012c7ba:	ff 05 00 
	char *byteArr1;
	//[3] Test read write access
	{
		//cprintf("\nTest read write access");
		//Test access for the first 1 MB
		freeFrames = sys_calculate_free_frames();
f012c7bd:	e8 db 03 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f012c7c2:	89 45 b8             	mov    %eax,-0x48(%ebp)

		//Write values
		//In 1st 1 MB
		lastIndexOfByte = (1 * Mega - kilo) / sizeof(char) - 1;
f012c7c5:	c7 85 f4 fe ff ff ff 	movl   $0xffbff,-0x10c(%ebp)
f012c7cc:	fb 0f 00 
		byteArr = (char *) ptr_allocations[0];
f012c7cf:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f012c7d5:	89 85 f0 fe ff ff    	mov    %eax,-0x110(%ebp)
		byteArr[0] = minByte;
f012c7db:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f012c7e1:	8a 55 cf             	mov    -0x31(%ebp),%dl
f012c7e4:	88 10                	mov    %dl,(%eax)
		byteArr[lastIndexOfByte] = maxByte;
f012c7e6:	8b 95 f4 fe ff ff    	mov    -0x10c(%ebp),%edx
f012c7ec:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f012c7f2:	01 c2                	add    %eax,%edx
f012c7f4:	8a 45 ce             	mov    -0x32(%ebp),%al
f012c7f7:	88 02                	mov    %al,(%edx)

		//In 2nd 1 MB
		ptr = (char*) ptr_allocations[1];
f012c7f9:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f012c7ff:	89 85 ec fe ff ff    	mov    %eax,-0x114(%ebp)
		for (int i = 0; i <= lastIndices[1]; ++i) {
f012c805:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012c80c:	eb 11                	jmp    f012c81f <test_krealloc+0xb1c>
			ptr[i] = 2;
f012c80e:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012c811:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f012c817:	01 d0                	add    %edx,%eax
f012c819:	c6 00 02             	movb   $0x2,(%eax)
		byteArr[0] = minByte;
		byteArr[lastIndexOfByte] = maxByte;

		//In 2nd 1 MB
		ptr = (char*) ptr_allocations[1];
		for (int i = 0; i <= lastIndices[1]; ++i) {
f012c81c:	ff 45 f4             	incl   -0xc(%ebp)
f012c81f:	8b 85 0c fe ff ff    	mov    -0x1f4(%ebp),%eax
f012c825:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012c828:	7d e4                	jge    f012c80e <test_krealloc+0xb0b>
			ptr[i] = 2;
		}

		//In 3rd 1 MB
		intArr = (int*) ptr_allocations[2];
f012c82a:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f012c830:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)
		intArr[0] = 3;
f012c836:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f012c83c:	c7 00 03 00 00 00    	movl   $0x3,(%eax)
		intArr[lastIndices[2]] = 3;
f012c842:	8b 85 10 fe ff ff    	mov    -0x1f0(%ebp),%eax
f012c848:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f012c84f:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f012c855:	01 d0                	add    %edx,%eax
f012c857:	c7 00 03 00 00 00    	movl   $0x3,(%eax)

		//In 4th 1 MB
		intArr = (int*) ptr_allocations[3];
f012c85d:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f012c863:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)
		for (int i = 0; i <= lastIndices[3]; ++i) {
f012c869:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f012c870:	eb 1b                	jmp    f012c88d <test_krealloc+0xb8a>
			intArr[i] = 4;
f012c872:	8b 45 f0             	mov    -0x10(%ebp),%eax
f012c875:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f012c87c:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f012c882:	01 d0                	add    %edx,%eax
f012c884:	c7 00 04 00 00 00    	movl   $0x4,(%eax)
		intArr[0] = 3;
		intArr[lastIndices[2]] = 3;

		//In 4th 1 MB
		intArr = (int*) ptr_allocations[3];
		for (int i = 0; i <= lastIndices[3]; ++i) {
f012c88a:	ff 45 f0             	incl   -0x10(%ebp)
f012c88d:	8b 85 14 fe ff ff    	mov    -0x1ec(%ebp),%eax
f012c893:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f012c896:	7d da                	jge    f012c872 <test_krealloc+0xb6f>
			intArr[i] = 4;
		}

		//In 1st 2 MB
		shortArr = (short*) ptr_allocations[4];
f012c898:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f012c89e:	89 85 e4 fe ff ff    	mov    %eax,-0x11c(%ebp)
		for (int i = 0; i <= lastIndices[4]; ++i) {
f012c8a4:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f012c8ab:	eb 17                	jmp    f012c8c4 <test_krealloc+0xbc1>
			shortArr[i] = 5;
f012c8ad:	8b 45 ec             	mov    -0x14(%ebp),%eax
f012c8b0:	01 c0                	add    %eax,%eax
f012c8b2:	89 c2                	mov    %eax,%edx
f012c8b4:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f012c8ba:	01 d0                	add    %edx,%eax
f012c8bc:	66 c7 00 05 00       	movw   $0x5,(%eax)
			intArr[i] = 4;
		}

		//In 1st 2 MB
		shortArr = (short*) ptr_allocations[4];
		for (int i = 0; i <= lastIndices[4]; ++i) {
f012c8c1:	ff 45 ec             	incl   -0x14(%ebp)
f012c8c4:	8b 85 18 fe ff ff    	mov    -0x1e8(%ebp),%eax
f012c8ca:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f012c8cd:	7d de                	jge    f012c8ad <test_krealloc+0xbaa>
			shortArr[i] = 5;
		}

		//In the 2nd 2 MB
		shortArr = (short*) ptr_allocations[5];
f012c8cf:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f012c8d5:	89 85 e4 fe ff ff    	mov    %eax,-0x11c(%ebp)
		shortArr[0] = 6;
f012c8db:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f012c8e1:	66 c7 00 06 00       	movw   $0x6,(%eax)
		shortArr[lastIndices[5]] = 6;
f012c8e6:	8b 85 1c fe ff ff    	mov    -0x1e4(%ebp),%eax
f012c8ec:	01 c0                	add    %eax,%eax
f012c8ee:	89 c2                	mov    %eax,%edx
f012c8f0:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f012c8f6:	01 d0                	add    %edx,%eax
f012c8f8:	66 c7 00 06 00       	movw   $0x6,(%eax)

		//In the 1st 3 MB
		structArr = (struct MyStruct *) ptr_allocations[6];
f012c8fd:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f012c903:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
		for (int i = 0; i <= lastIndices[6]; i++) {
f012c909:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
f012c910:	eb 49                	jmp    f012c95b <test_krealloc+0xc58>
			structArr[i].a = 7;
f012c912:	8b 45 e8             	mov    -0x18(%ebp),%eax
f012c915:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012c91c:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012c922:	01 d0                	add    %edx,%eax
f012c924:	c6 00 07             	movb   $0x7,(%eax)
			structArr[i].b = 7;
f012c927:	8b 45 e8             	mov    -0x18(%ebp),%eax
f012c92a:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012c931:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012c937:	01 d0                	add    %edx,%eax
f012c939:	66 c7 40 02 07 00    	movw   $0x7,0x2(%eax)
			structArr[i].c = 7;
f012c93f:	8b 45 e8             	mov    -0x18(%ebp),%eax
f012c942:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012c949:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012c94f:	01 d0                	add    %edx,%eax
f012c951:	c7 40 04 07 00 00 00 	movl   $0x7,0x4(%eax)
		shortArr[0] = 6;
		shortArr[lastIndices[5]] = 6;

		//In the 1st 3 MB
		structArr = (struct MyStruct *) ptr_allocations[6];
		for (int i = 0; i <= lastIndices[6]; i++) {
f012c958:	ff 45 e8             	incl   -0x18(%ebp)
f012c95b:	8b 85 20 fe ff ff    	mov    -0x1e0(%ebp),%eax
f012c961:	3b 45 e8             	cmp    -0x18(%ebp),%eax
f012c964:	7d ac                	jge    f012c912 <test_krealloc+0xc0f>
			structArr[i].b = 7;
			structArr[i].c = 7;
		}

		//In the last 3 MB
		structArr = (struct MyStruct*) ptr_allocations[7];
f012c966:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f012c96c:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
		structArr[0].a = 8;
f012c972:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012c978:	c6 00 08             	movb   $0x8,(%eax)
		structArr[0].b = 8;
f012c97b:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012c981:	66 c7 40 02 08 00    	movw   $0x8,0x2(%eax)
		structArr[0].c = 8;
f012c987:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012c98d:	c7 40 04 08 00 00 00 	movl   $0x8,0x4(%eax)
		structArr[lastIndices[7]].a = 8;
f012c994:	8b 85 24 fe ff ff    	mov    -0x1dc(%ebp),%eax
f012c99a:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012c9a1:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012c9a7:	01 d0                	add    %edx,%eax
f012c9a9:	c6 00 08             	movb   $0x8,(%eax)
		structArr[lastIndices[7]].b = 8;
f012c9ac:	8b 85 24 fe ff ff    	mov    -0x1dc(%ebp),%eax
f012c9b2:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012c9b9:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012c9bf:	01 d0                	add    %edx,%eax
f012c9c1:	66 c7 40 02 08 00    	movw   $0x8,0x2(%eax)
		structArr[lastIndices[7]].c = 8;
f012c9c7:	8b 85 24 fe ff ff    	mov    -0x1dc(%ebp),%eax
f012c9cd:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012c9d4:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012c9da:	01 d0                	add    %edx,%eax
f012c9dc:	c7 40 04 08 00 00 00 	movl   $0x8,0x4(%eax)

		//Read values: check that the values are successfully written
		if (byteArr[0] != minByte || byteArr[lastIndices[0]] != maxByte)
f012c9e3:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f012c9e9:	8a 00                	mov    (%eax),%al
f012c9eb:	3a 45 cf             	cmp    -0x31(%ebp),%al
f012c9ee:	75 17                	jne    f012ca07 <test_krealloc+0xd04>
f012c9f0:	8b 85 08 fe ff ff    	mov    -0x1f8(%ebp),%eax
f012c9f6:	89 c2                	mov    %eax,%edx
f012c9f8:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f012c9fe:	01 d0                	add    %edx,%eax
f012ca00:	8a 00                	mov    (%eax),%al
f012ca02:	3a 45 ce             	cmp    -0x32(%ebp),%al
f012ca05:	74 17                	je     f012ca1e <test_krealloc+0xd1b>
			panic(
f012ca07:	83 ec 04             	sub    $0x4,%esp
f012ca0a:	68 ac c6 13 f0       	push   $0xf013c6ac
f012ca0f:	68 79 0f 00 00       	push   $0xf79
f012ca14:	68 7a b3 13 f0       	push   $0xf013b37a
f012ca19:	e8 e7 37 fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");

		ptr = (char*) ptr_allocations[1];
f012ca1e:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f012ca24:	89 85 ec fe ff ff    	mov    %eax,-0x114(%ebp)
		if (ptr[0] != 2 || ptr[lastIndices[1]] != 2)
f012ca2a:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f012ca30:	8a 00                	mov    (%eax),%al
f012ca32:	3c 02                	cmp    $0x2,%al
f012ca34:	75 16                	jne    f012ca4c <test_krealloc+0xd49>
f012ca36:	8b 85 0c fe ff ff    	mov    -0x1f4(%ebp),%eax
f012ca3c:	89 c2                	mov    %eax,%edx
f012ca3e:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f012ca44:	01 d0                	add    %edx,%eax
f012ca46:	8a 00                	mov    (%eax),%al
f012ca48:	3c 02                	cmp    $0x2,%al
f012ca4a:	74 20                	je     f012ca6c <test_krealloc+0xd69>
			panic(
f012ca4c:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f012ca52:	8a 00                	mov    (%eax),%al
f012ca54:	0f be c0             	movsbl %al,%eax
f012ca57:	50                   	push   %eax
f012ca58:	68 ec c6 13 f0       	push   $0xf013c6ec
f012ca5d:	68 7f 0f 00 00       	push   $0xf7f
f012ca62:	68 7a b3 13 f0       	push   $0xf013b37a
f012ca67:	e8 99 37 fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!, char = %c",
					ptr[0]);

		intArr = (int*) ptr_allocations[2];
f012ca6c:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f012ca72:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)
		if (intArr[0] != 3 || intArr[lastIndices[2]] != 3)
f012ca78:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f012ca7e:	8b 00                	mov    (%eax),%eax
f012ca80:	83 f8 03             	cmp    $0x3,%eax
f012ca83:	75 1c                	jne    f012caa1 <test_krealloc+0xd9e>
f012ca85:	8b 85 10 fe ff ff    	mov    -0x1f0(%ebp),%eax
f012ca8b:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f012ca92:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f012ca98:	01 d0                	add    %edx,%eax
f012ca9a:	8b 00                	mov    (%eax),%eax
f012ca9c:	83 f8 03             	cmp    $0x3,%eax
f012ca9f:	74 17                	je     f012cab8 <test_krealloc+0xdb5>
			panic("Wrong allocation stored values are wrongly changed!");
f012caa1:	83 ec 04             	sub    $0x4,%esp
f012caa4:	68 38 c7 13 f0       	push   $0xf013c738
f012caa9:	68 83 0f 00 00       	push   $0xf83
f012caae:	68 7a b3 13 f0       	push   $0xf013b37a
f012cab3:	e8 4d 37 fd ff       	call   f0100205 <_panic>

		intArr = (int*) ptr_allocations[3];
f012cab8:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f012cabe:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)
		if (intArr[0] != 4 || intArr[lastIndices[3]] != 4)
f012cac4:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f012caca:	8b 00                	mov    (%eax),%eax
f012cacc:	83 f8 04             	cmp    $0x4,%eax
f012cacf:	75 1c                	jne    f012caed <test_krealloc+0xdea>
f012cad1:	8b 85 14 fe ff ff    	mov    -0x1ec(%ebp),%eax
f012cad7:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f012cade:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f012cae4:	01 d0                	add    %edx,%eax
f012cae6:	8b 00                	mov    (%eax),%eax
f012cae8:	83 f8 04             	cmp    $0x4,%eax
f012caeb:	74 17                	je     f012cb04 <test_krealloc+0xe01>
			panic(
f012caed:	83 ec 04             	sub    $0x4,%esp
f012caf0:	68 ac c6 13 f0       	push   $0xf013c6ac
f012caf5:	68 88 0f 00 00       	push   $0xf88
f012cafa:	68 7a b3 13 f0       	push   $0xf013b37a
f012caff:	e8 01 37 fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");

		shortArr = (short*) ptr_allocations[4];
f012cb04:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f012cb0a:	89 85 e4 fe ff ff    	mov    %eax,-0x11c(%ebp)
		if (shortArr[0] != 5 || shortArr[lastIndices[4]] != 5)
f012cb10:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f012cb16:	66 8b 00             	mov    (%eax),%ax
f012cb19:	66 83 f8 05          	cmp    $0x5,%ax
f012cb1d:	75 1b                	jne    f012cb3a <test_krealloc+0xe37>
f012cb1f:	8b 85 18 fe ff ff    	mov    -0x1e8(%ebp),%eax
f012cb25:	01 c0                	add    %eax,%eax
f012cb27:	89 c2                	mov    %eax,%edx
f012cb29:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f012cb2f:	01 d0                	add    %edx,%eax
f012cb31:	66 8b 00             	mov    (%eax),%ax
f012cb34:	66 83 f8 05          	cmp    $0x5,%ax
f012cb38:	74 17                	je     f012cb51 <test_krealloc+0xe4e>
			panic(
f012cb3a:	83 ec 04             	sub    $0x4,%esp
f012cb3d:	68 ac c6 13 f0       	push   $0xf013c6ac
f012cb42:	68 8d 0f 00 00       	push   $0xf8d
f012cb47:	68 7a b3 13 f0       	push   $0xf013b37a
f012cb4c:	e8 b4 36 fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");

		shortArr = (short*) ptr_allocations[5];
f012cb51:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f012cb57:	89 85 e4 fe ff ff    	mov    %eax,-0x11c(%ebp)
		if (shortArr[0] != 6 || shortArr[lastIndices[5]] != 6)
f012cb5d:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f012cb63:	66 8b 00             	mov    (%eax),%ax
f012cb66:	66 83 f8 06          	cmp    $0x6,%ax
f012cb6a:	75 1b                	jne    f012cb87 <test_krealloc+0xe84>
f012cb6c:	8b 85 1c fe ff ff    	mov    -0x1e4(%ebp),%eax
f012cb72:	01 c0                	add    %eax,%eax
f012cb74:	89 c2                	mov    %eax,%edx
f012cb76:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f012cb7c:	01 d0                	add    %edx,%eax
f012cb7e:	66 8b 00             	mov    (%eax),%ax
f012cb81:	66 83 f8 06          	cmp    $0x6,%ax
f012cb85:	74 17                	je     f012cb9e <test_krealloc+0xe9b>
			panic(
f012cb87:	83 ec 04             	sub    $0x4,%esp
f012cb8a:	68 ac c6 13 f0       	push   $0xf013c6ac
f012cb8f:	68 92 0f 00 00       	push   $0xf92
f012cb94:	68 7a b3 13 f0       	push   $0xf013b37a
f012cb99:	e8 67 36 fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");

		structArr = (struct MyStruct*) ptr_allocations[6];
f012cb9e:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f012cba4:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
		if (structArr[0].a != 7 || structArr[lastIndices[6]].a != 7)
f012cbaa:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012cbb0:	8a 00                	mov    (%eax),%al
f012cbb2:	3c 07                	cmp    $0x7,%al
f012cbb4:	75 1b                	jne    f012cbd1 <test_krealloc+0xece>
f012cbb6:	8b 85 20 fe ff ff    	mov    -0x1e0(%ebp),%eax
f012cbbc:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012cbc3:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012cbc9:	01 d0                	add    %edx,%eax
f012cbcb:	8a 00                	mov    (%eax),%al
f012cbcd:	3c 07                	cmp    $0x7,%al
f012cbcf:	74 17                	je     f012cbe8 <test_krealloc+0xee5>
			panic(
f012cbd1:	83 ec 04             	sub    $0x4,%esp
f012cbd4:	68 ac c6 13 f0       	push   $0xf013c6ac
f012cbd9:	68 97 0f 00 00       	push   $0xf97
f012cbde:	68 7a b3 13 f0       	push   $0xf013b37a
f012cbe3:	e8 1d 36 fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");
		if (structArr[0].b != 7 || structArr[lastIndices[6]].b != 7)
f012cbe8:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012cbee:	66 8b 40 02          	mov    0x2(%eax),%ax
f012cbf2:	66 83 f8 07          	cmp    $0x7,%ax
f012cbf6:	75 1f                	jne    f012cc17 <test_krealloc+0xf14>
f012cbf8:	8b 85 20 fe ff ff    	mov    -0x1e0(%ebp),%eax
f012cbfe:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012cc05:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012cc0b:	01 d0                	add    %edx,%eax
f012cc0d:	66 8b 40 02          	mov    0x2(%eax),%ax
f012cc11:	66 83 f8 07          	cmp    $0x7,%ax
f012cc15:	74 17                	je     f012cc2e <test_krealloc+0xf2b>
			panic(
f012cc17:	83 ec 04             	sub    $0x4,%esp
f012cc1a:	68 ac c6 13 f0       	push   $0xf013c6ac
f012cc1f:	68 9a 0f 00 00       	push   $0xf9a
f012cc24:	68 7a b3 13 f0       	push   $0xf013b37a
f012cc29:	e8 d7 35 fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");
		if (structArr[0].c != 7 || structArr[lastIndices[6]].c != 7)
f012cc2e:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012cc34:	8b 40 04             	mov    0x4(%eax),%eax
f012cc37:	83 f8 07             	cmp    $0x7,%eax
f012cc3a:	75 1d                	jne    f012cc59 <test_krealloc+0xf56>
f012cc3c:	8b 85 20 fe ff ff    	mov    -0x1e0(%ebp),%eax
f012cc42:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012cc49:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012cc4f:	01 d0                	add    %edx,%eax
f012cc51:	8b 40 04             	mov    0x4(%eax),%eax
f012cc54:	83 f8 07             	cmp    $0x7,%eax
f012cc57:	74 17                	je     f012cc70 <test_krealloc+0xf6d>
			panic(
f012cc59:	83 ec 04             	sub    $0x4,%esp
f012cc5c:	68 ac c6 13 f0       	push   $0xf013c6ac
f012cc61:	68 9d 0f 00 00       	push   $0xf9d
f012cc66:	68 7a b3 13 f0       	push   $0xf013b37a
f012cc6b:	e8 95 35 fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");

		structArr = (struct MyStruct*) ptr_allocations[7];
f012cc70:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f012cc76:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
		if (structArr[0].a != 8 || structArr[lastIndices[7]].a != 8)
f012cc7c:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012cc82:	8a 00                	mov    (%eax),%al
f012cc84:	3c 08                	cmp    $0x8,%al
f012cc86:	75 1b                	jne    f012cca3 <test_krealloc+0xfa0>
f012cc88:	8b 85 24 fe ff ff    	mov    -0x1dc(%ebp),%eax
f012cc8e:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012cc95:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012cc9b:	01 d0                	add    %edx,%eax
f012cc9d:	8a 00                	mov    (%eax),%al
f012cc9f:	3c 08                	cmp    $0x8,%al
f012cca1:	74 17                	je     f012ccba <test_krealloc+0xfb7>
			panic(
f012cca3:	83 ec 04             	sub    $0x4,%esp
f012cca6:	68 ac c6 13 f0       	push   $0xf013c6ac
f012ccab:	68 a2 0f 00 00       	push   $0xfa2
f012ccb0:	68 7a b3 13 f0       	push   $0xf013b37a
f012ccb5:	e8 4b 35 fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");
		if (structArr[0].b != 8 || structArr[lastIndices[7]].b != 8)
f012ccba:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012ccc0:	66 8b 40 02          	mov    0x2(%eax),%ax
f012ccc4:	66 83 f8 08          	cmp    $0x8,%ax
f012ccc8:	75 1f                	jne    f012cce9 <test_krealloc+0xfe6>
f012ccca:	8b 85 24 fe ff ff    	mov    -0x1dc(%ebp),%eax
f012ccd0:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012ccd7:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012ccdd:	01 d0                	add    %edx,%eax
f012ccdf:	66 8b 40 02          	mov    0x2(%eax),%ax
f012cce3:	66 83 f8 08          	cmp    $0x8,%ax
f012cce7:	74 17                	je     f012cd00 <test_krealloc+0xffd>
			panic(
f012cce9:	83 ec 04             	sub    $0x4,%esp
f012ccec:	68 ac c6 13 f0       	push   $0xf013c6ac
f012ccf1:	68 a5 0f 00 00       	push   $0xfa5
f012ccf6:	68 7a b3 13 f0       	push   $0xf013b37a
f012ccfb:	e8 05 35 fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");
		if (structArr[0].c != 8 || structArr[lastIndices[7]].c != 8)
f012cd00:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012cd06:	8b 40 04             	mov    0x4(%eax),%eax
f012cd09:	83 f8 08             	cmp    $0x8,%eax
f012cd0c:	75 1d                	jne    f012cd2b <test_krealloc+0x1028>
f012cd0e:	8b 85 24 fe ff ff    	mov    -0x1dc(%ebp),%eax
f012cd14:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012cd1b:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012cd21:	01 d0                	add    %edx,%eax
f012cd23:	8b 40 04             	mov    0x4(%eax),%eax
f012cd26:	83 f8 08             	cmp    $0x8,%eax
f012cd29:	74 17                	je     f012cd42 <test_krealloc+0x103f>
			panic(
f012cd2b:	83 ec 04             	sub    $0x4,%esp
f012cd2e:	68 ac c6 13 f0       	push   $0xf013c6ac
f012cd33:	68 a8 0f 00 00       	push   $0xfa8
f012cd38:	68 7a b3 13 f0       	push   $0xf013b37a
f012cd3d:	e8 c3 34 fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");

		if ((freeFrames - sys_calculate_free_frames()) != 0)
f012cd42:	e8 56 fe fd ff       	call   f010cb9d <sys_calculate_free_frames>
f012cd47:	89 c2                	mov    %eax,%edx
f012cd49:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012cd4c:	39 c2                	cmp    %eax,%edx
f012cd4e:	74 17                	je     f012cd67 <test_krealloc+0x1064>
			panic(
f012cd50:	83 ec 04             	sub    $0x4,%esp
f012cd53:	68 6c c7 13 f0       	push   $0xf013c76c
f012cd58:	68 ac 0f 00 00       	push   $0xfac
f012cd5d:	68 7a b3 13 f0       	push   $0xf013b37a
f012cd62:	e8 9e 34 fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong allocation pages are not loaded successfully into memory");

	}
	cprintf("\nkrealloc: current evaluation = 10%");
f012cd67:	83 ec 0c             	sub    $0xc,%esp
f012cd6a:	68 b8 c7 13 f0       	push   $0xf013c7b8
f012cd6f:	e8 9a 3f fd ff       	call   f0100d0e <cprintf>
f012cd74:	83 c4 10             	add    $0x10,%esp

	//[3] Test krealloc by passing size = 0
	{
		//kfree 1st 1 MB
		freeFrames = sys_calculate_free_frames();
f012cd77:	e8 21 fe fd ff       	call   f010cb9d <sys_calculate_free_frames>
f012cd7c:	89 45 b8             	mov    %eax,-0x48(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f012cd7f:	e8 44 70 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012cd84:	89 85 dc fe ff ff    	mov    %eax,-0x124(%ebp)
		krealloc(ptr_allocations[0], 0);
f012cd8a:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f012cd90:	83 ec 08             	sub    $0x8,%esp
f012cd93:	6a 00                	push   $0x0
f012cd95:	50                   	push   %eax
f012cd96:	e8 aa ad fd ff       	call   f0107b45 <krealloc>
f012cd9b:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0)
f012cd9e:	e8 25 70 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012cda3:	3b 85 dc fe ff ff    	cmp    -0x124(%ebp),%eax
f012cda9:	74 17                	je     f012cdc2 <test_krealloc+0x10bf>
			panic(
f012cdab:	83 ec 04             	sub    $0x4,%esp
f012cdae:	68 dc c7 13 f0       	push   $0xf013c7dc
f012cdb3:	68 b9 0f 00 00       	push   $0xfb9
f012cdb8:	68 7a b3 13 f0       	push   $0xf013b37a
f012cdbd:	e8 43 34 fd ff       	call   f0100205 <_panic>
					"krealloc: Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((sys_calculate_free_frames() - freeFrames) != 256)
f012cdc2:	e8 d6 fd fd ff       	call   f010cb9d <sys_calculate_free_frames>
f012cdc7:	89 c2                	mov    %eax,%edx
f012cdc9:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012cdcc:	29 c2                	sub    %eax,%edx
f012cdce:	89 d0                	mov    %edx,%eax
f012cdd0:	3d 00 01 00 00       	cmp    $0x100,%eax
f012cdd5:	74 17                	je     f012cdee <test_krealloc+0x10eb>
			panic("krealloc: pages in memory are not freed correctly");
f012cdd7:	83 ec 04             	sub    $0x4,%esp
f012cdda:	68 50 c8 13 f0       	push   $0xf013c850
f012cddf:	68 bb 0f 00 00       	push   $0xfbb
f012cde4:	68 7a b3 13 f0       	push   $0xf013b37a
f012cde9:	e8 17 34 fd ff       	call   f0100205 <_panic>

		//kfree 3rd 1 MB
		freeFrames = sys_calculate_free_frames();
f012cdee:	e8 aa fd fd ff       	call   f010cb9d <sys_calculate_free_frames>
f012cdf3:	89 45 b8             	mov    %eax,-0x48(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f012cdf6:	e8 cd 6f fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012cdfb:	89 85 dc fe ff ff    	mov    %eax,-0x124(%ebp)

		krealloc(ptr_allocations[2], 0);
f012ce01:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f012ce07:	83 ec 08             	sub    $0x8,%esp
f012ce0a:	6a 00                	push   $0x0
f012ce0c:	50                   	push   %eax
f012ce0d:	e8 33 ad fd ff       	call   f0107b45 <krealloc>
f012ce12:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0)
f012ce15:	e8 ae 6f fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012ce1a:	3b 85 dc fe ff ff    	cmp    -0x124(%ebp),%eax
f012ce20:	74 17                	je     f012ce39 <test_krealloc+0x1136>
			panic(
f012ce22:	83 ec 04             	sub    $0x4,%esp
f012ce25:	68 dc c7 13 f0       	push   $0xf013c7dc
f012ce2a:	68 c4 0f 00 00       	push   $0xfc4
f012ce2f:	68 7a b3 13 f0       	push   $0xf013b37a
f012ce34:	e8 cc 33 fd ff       	call   f0100205 <_panic>
					"krealloc: Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((sys_calculate_free_frames() - freeFrames) != 256)
f012ce39:	e8 5f fd fd ff       	call   f010cb9d <sys_calculate_free_frames>
f012ce3e:	89 c2                	mov    %eax,%edx
f012ce40:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012ce43:	29 c2                	sub    %eax,%edx
f012ce45:	89 d0                	mov    %edx,%eax
f012ce47:	3d 00 01 00 00       	cmp    $0x100,%eax
f012ce4c:	74 17                	je     f012ce65 <test_krealloc+0x1162>
			panic("krealloc: pages in memory are not freed correctly");
f012ce4e:	83 ec 04             	sub    $0x4,%esp
f012ce51:	68 50 c8 13 f0       	push   $0xf013c850
f012ce56:	68 c6 0f 00 00       	push   $0xfc6
f012ce5b:	68 7a b3 13 f0       	push   $0xf013b37a
f012ce60:	e8 a0 33 fd ff       	call   f0100205 <_panic>

		//kfree 2nd 2 MB
		freeFrames = sys_calculate_free_frames();
f012ce65:	e8 33 fd fd ff       	call   f010cb9d <sys_calculate_free_frames>
f012ce6a:	89 45 b8             	mov    %eax,-0x48(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f012ce6d:	e8 56 6f fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012ce72:	89 85 dc fe ff ff    	mov    %eax,-0x124(%ebp)
		krealloc(ptr_allocations[5], 0);
f012ce78:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f012ce7e:	83 ec 08             	sub    $0x8,%esp
f012ce81:	6a 00                	push   $0x0
f012ce83:	50                   	push   %eax
f012ce84:	e8 bc ac fd ff       	call   f0107b45 <krealloc>
f012ce89:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0)
f012ce8c:	e8 37 6f fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012ce91:	3b 85 dc fe ff ff    	cmp    -0x124(%ebp),%eax
f012ce97:	74 17                	je     f012ceb0 <test_krealloc+0x11ad>
			panic(
f012ce99:	83 ec 04             	sub    $0x4,%esp
f012ce9c:	68 94 b3 13 f0       	push   $0xf013b394
f012cea1:	68 ce 0f 00 00       	push   $0xfce
f012cea6:	68 7a b3 13 f0       	push   $0xf013b37a
f012ceab:	e8 55 33 fd ff       	call   f0100205 <_panic>
					"Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((sys_calculate_free_frames() - freeFrames) != 2 * Mega / PAGE_SIZE)
f012ceb0:	e8 e8 fc fd ff       	call   f010cb9d <sys_calculate_free_frames>
f012ceb5:	89 c2                	mov    %eax,%edx
f012ceb7:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012ceba:	29 c2                	sub    %eax,%edx
f012cebc:	89 d0                	mov    %edx,%eax
f012cebe:	3d 00 02 00 00       	cmp    $0x200,%eax
f012cec3:	74 17                	je     f012cedc <test_krealloc+0x11d9>
			panic("krealloc: pages in memory are not freed correctly");
f012cec5:	83 ec 04             	sub    $0x4,%esp
f012cec8:	68 50 c8 13 f0       	push   $0xf013c850
f012cecd:	68 d0 0f 00 00       	push   $0xfd0
f012ced2:	68 7a b3 13 f0       	push   $0xf013b37a
f012ced7:	e8 29 33 fd ff       	call   f0100205 <_panic>

		//kfree last 3 MB
		freeFrames = sys_calculate_free_frames();
f012cedc:	e8 bc fc fd ff       	call   f010cb9d <sys_calculate_free_frames>
f012cee1:	89 45 b8             	mov    %eax,-0x48(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f012cee4:	e8 df 6e fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012cee9:	89 85 dc fe ff ff    	mov    %eax,-0x124(%ebp)
		krealloc(ptr_allocations[7], 0);
f012ceef:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f012cef5:	83 ec 08             	sub    $0x8,%esp
f012cef8:	6a 00                	push   $0x0
f012cefa:	50                   	push   %eax
f012cefb:	e8 45 ac fd ff       	call   f0107b45 <krealloc>
f012cf00:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0)
f012cf03:	e8 c0 6e fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012cf08:	3b 85 dc fe ff ff    	cmp    -0x124(%ebp),%eax
f012cf0e:	74 17                	je     f012cf27 <test_krealloc+0x1224>
			panic(
f012cf10:	83 ec 04             	sub    $0x4,%esp
f012cf13:	68 dc c7 13 f0       	push   $0xf013c7dc
f012cf18:	68 d8 0f 00 00       	push   $0xfd8
f012cf1d:	68 7a b3 13 f0       	push   $0xf013b37a
f012cf22:	e8 de 32 fd ff       	call   f0100205 <_panic>
					"krealloc: Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((sys_calculate_free_frames() - freeFrames) != 3 * Mega / PAGE_SIZE)
f012cf27:	e8 71 fc fd ff       	call   f010cb9d <sys_calculate_free_frames>
f012cf2c:	89 c2                	mov    %eax,%edx
f012cf2e:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012cf31:	29 c2                	sub    %eax,%edx
f012cf33:	89 d0                	mov    %edx,%eax
f012cf35:	3d 00 03 00 00       	cmp    $0x300,%eax
f012cf3a:	74 17                	je     f012cf53 <test_krealloc+0x1250>
			panic(
f012cf3c:	83 ec 04             	sub    $0x4,%esp
f012cf3f:	68 84 c8 13 f0       	push   $0xf013c884
f012cf44:	68 db 0f 00 00       	push   $0xfdb
f012cf49:	68 7a b3 13 f0       	push   $0xf013b37a
f012cf4e:	e8 b2 32 fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong kfree: pages in memory are not freed correctly");
		//check tables	[15%]
		{
			long long va;
			for (va = KERNEL_HEAP_START; va < (long long) KERNEL_HEAP_MAX; va +=
f012cf53:	c7 45 e0 00 00 00 f6 	movl   $0xf6000000,-0x20(%ebp)
f012cf5a:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
f012cf61:	eb 48                	jmp    f012cfab <test_krealloc+0x12a8>
			PTSIZE)
			{
				uint32 *ptr_table;
				get_page_table(ptr_page_directory,  (uint32) va,
f012cf63:	8b 55 e0             	mov    -0x20(%ebp),%edx
f012cf66:	a1 3c 26 78 f0       	mov    0xf078263c,%eax
f012cf6b:	83 ec 04             	sub    $0x4,%esp
f012cf6e:	8d 8d b4 fd ff ff    	lea    -0x24c(%ebp),%ecx
f012cf74:	51                   	push   %ecx
f012cf75:	52                   	push   %edx
f012cf76:	50                   	push   %eax
f012cf77:	e8 35 9b fd ff       	call   f0106ab1 <get_page_table>
f012cf7c:	83 c4 10             	add    $0x10,%esp
						&ptr_table);
				if (ptr_table == NULL) {
f012cf7f:	8b 85 b4 fd ff ff    	mov    -0x24c(%ebp),%eax
f012cf85:	85 c0                	test   %eax,%eax
f012cf87:	75 17                	jne    f012cfa0 <test_krealloc+0x129d>
					panic(
f012cf89:	83 ec 04             	sub    $0x4,%esp
f012cf8c:	68 7c bc 13 f0       	push   $0xf013bc7c
f012cf91:	68 e7 0f 00 00       	push   $0xfe7
f012cf96:	68 7a b3 13 f0       	push   $0xf013b37a
f012cf9b:	e8 65 32 fd ff       	call   f0100205 <_panic>
			panic(
					"krealloc: Wrong kfree: pages in memory are not freed correctly");
		//check tables	[15%]
		{
			long long va;
			for (va = KERNEL_HEAP_START; va < (long long) KERNEL_HEAP_MAX; va +=
f012cfa0:	81 45 e0 00 00 40 00 	addl   $0x400000,-0x20(%ebp)
f012cfa7:	83 55 e4 00          	adcl   $0x0,-0x1c(%ebp)
f012cfab:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f012cfaf:	78 b2                	js     f012cf63 <test_krealloc+0x1260>
f012cfb1:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f012cfb5:	7f 09                	jg     f012cfc0 <test_krealloc+0x12bd>
f012cfb7:	81 7d e0 ff ef ff ff 	cmpl   $0xffffefff,-0x20(%ebp)
f012cfbe:	76 a3                	jbe    f012cf63 <test_krealloc+0x1260>
							"Wrong kfree: one of the kernel tables is wrongly removed! Tables should not be removed here in kfree");
				}
			}
		}
	}
	cprintf("\b\b\b20%");
f012cfc0:	83 ec 0c             	sub    $0xc,%esp
f012cfc3:	68 c3 c8 13 f0       	push   $0xf013c8c3
f012cfc8:	e8 41 3d fd ff       	call   f0100d0e <cprintf>
f012cfcd:	83 c4 10             	add    $0x10,%esp
	//Check memory access after kfree by checking sum
	{
		//2nd 1 MB
		//cprintf("2nd 1 MB\n");
		ptr = (char*) ptr_allocations[1];
f012cfd0:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f012cfd6:	89 85 ec fe ff ff    	mov    %eax,-0x114(%ebp)
		int i;
		for (i = 0; i <= lastIndices[1]; ++i) {
f012cfdc:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
f012cfe3:	eb 21                	jmp    f012d006 <test_krealloc+0x1303>
			sums[0] += ptr[i];
f012cfe5:	8b 95 b8 fd ff ff    	mov    -0x248(%ebp),%edx
f012cfeb:	8b 4d dc             	mov    -0x24(%ebp),%ecx
f012cfee:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f012cff4:	01 c8                	add    %ecx,%eax
f012cff6:	8a 00                	mov    (%eax),%al
f012cff8:	0f be c0             	movsbl %al,%eax
f012cffb:	01 d0                	add    %edx,%eax
f012cffd:	89 85 b8 fd ff ff    	mov    %eax,-0x248(%ebp)
	{
		//2nd 1 MB
		//cprintf("2nd 1 MB\n");
		ptr = (char*) ptr_allocations[1];
		int i;
		for (i = 0; i <= lastIndices[1]; ++i) {
f012d003:	ff 45 dc             	incl   -0x24(%ebp)
f012d006:	8b 85 0c fe ff ff    	mov    -0x1f4(%ebp),%eax
f012d00c:	3b 45 dc             	cmp    -0x24(%ebp),%eax
f012d00f:	7d d4                	jge    f012cfe5 <test_krealloc+0x12e2>
			sums[0] += ptr[i];

		}
		//cprintf("sum for 2nd 1 MB = %d LIM1 = %d\n", sums[0], (lastIndices[1] - 1));
		if (sums[0] != (lastIndices[1] + 1) * 2)
f012d011:	8b 85 b8 fd ff ff    	mov    -0x248(%ebp),%eax
f012d017:	8b 95 0c fe ff ff    	mov    -0x1f4(%ebp),%edx
f012d01d:	42                   	inc    %edx
f012d01e:	01 d2                	add    %edx,%edx
f012d020:	39 d0                	cmp    %edx,%eax
f012d022:	74 17                	je     f012d03b <test_krealloc+0x1338>
			panic("krealloc: invalid read after freeing some allocations");
f012d024:	83 ec 04             	sub    $0x4,%esp
f012d027:	68 cc c8 13 f0       	push   $0xf013c8cc
f012d02c:	68 f9 0f 00 00       	push   $0xff9
f012d031:	68 7a b3 13 f0       	push   $0xf013b37a
f012d036:	e8 ca 31 fd ff       	call   f0100205 <_panic>

		//4th 1 MB
		//cprintf("4th 1 MB\n");
		intArr = (int*) ptr_allocations[3];
f012d03b:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f012d041:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)

		for (i = 0; i <= lastIndices[3]; ++i) {
f012d047:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
f012d04e:	eb 25                	jmp    f012d075 <test_krealloc+0x1372>
			sums[1] += intArr[i];
f012d050:	8b 95 bc fd ff ff    	mov    -0x244(%ebp),%edx
f012d056:	8b 45 dc             	mov    -0x24(%ebp),%eax
f012d059:	8d 0c 85 00 00 00 00 	lea    0x0(,%eax,4),%ecx
f012d060:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f012d066:	01 c8                	add    %ecx,%eax
f012d068:	8b 00                	mov    (%eax),%eax
f012d06a:	01 d0                	add    %edx,%eax
f012d06c:	89 85 bc fd ff ff    	mov    %eax,-0x244(%ebp)

		//4th 1 MB
		//cprintf("4th 1 MB\n");
		intArr = (int*) ptr_allocations[3];

		for (i = 0; i <= lastIndices[3]; ++i) {
f012d072:	ff 45 dc             	incl   -0x24(%ebp)
f012d075:	8b 85 14 fe ff ff    	mov    -0x1ec(%ebp),%eax
f012d07b:	3b 45 dc             	cmp    -0x24(%ebp),%eax
f012d07e:	7d d0                	jge    f012d050 <test_krealloc+0x134d>
			sums[1] += intArr[i];
		}
		if (sums[1] != (lastIndices[3] + 1) * 4)
f012d080:	8b 85 bc fd ff ff    	mov    -0x244(%ebp),%eax
f012d086:	8b 95 14 fe ff ff    	mov    -0x1ec(%ebp),%edx
f012d08c:	42                   	inc    %edx
f012d08d:	c1 e2 02             	shl    $0x2,%edx
f012d090:	39 d0                	cmp    %edx,%eax
f012d092:	74 17                	je     f012d0ab <test_krealloc+0x13a8>
			panic("krealloc: invalid read after freeing some allocations");
f012d094:	83 ec 04             	sub    $0x4,%esp
f012d097:	68 cc c8 13 f0       	push   $0xf013c8cc
f012d09c:	68 03 10 00 00       	push   $0x1003
f012d0a1:	68 7a b3 13 f0       	push   $0xf013b37a
f012d0a6:	e8 5a 31 fd ff       	call   f0100205 <_panic>

		//1st 2 MB
		//cprintf("1st 2 MB\n");
		shortArr = (short*) ptr_allocations[4];
f012d0ab:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f012d0b1:	89 85 e4 fe ff ff    	mov    %eax,-0x11c(%ebp)

		for (i = 0; i <= lastIndices[4]; ++i) {
f012d0b7:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
f012d0be:	eb 24                	jmp    f012d0e4 <test_krealloc+0x13e1>
			sums[2] += shortArr[i];
f012d0c0:	8b 95 c0 fd ff ff    	mov    -0x240(%ebp),%edx
f012d0c6:	8b 45 dc             	mov    -0x24(%ebp),%eax
f012d0c9:	01 c0                	add    %eax,%eax
f012d0cb:	89 c1                	mov    %eax,%ecx
f012d0cd:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f012d0d3:	01 c8                	add    %ecx,%eax
f012d0d5:	66 8b 00             	mov    (%eax),%ax
f012d0d8:	98                   	cwtl   
f012d0d9:	01 d0                	add    %edx,%eax
f012d0db:	89 85 c0 fd ff ff    	mov    %eax,-0x240(%ebp)

		//1st 2 MB
		//cprintf("1st 2 MB\n");
		shortArr = (short*) ptr_allocations[4];

		for (i = 0; i <= lastIndices[4]; ++i) {
f012d0e1:	ff 45 dc             	incl   -0x24(%ebp)
f012d0e4:	8b 85 18 fe ff ff    	mov    -0x1e8(%ebp),%eax
f012d0ea:	3b 45 dc             	cmp    -0x24(%ebp),%eax
f012d0ed:	7d d1                	jge    f012d0c0 <test_krealloc+0x13bd>
			sums[2] += shortArr[i];
		}
		if (sums[2] != (lastIndices[4] + 1) * 5)
f012d0ef:	8b 95 c0 fd ff ff    	mov    -0x240(%ebp),%edx
f012d0f5:	8b 85 18 fe ff ff    	mov    -0x1e8(%ebp),%eax
f012d0fb:	8d 48 01             	lea    0x1(%eax),%ecx
f012d0fe:	89 c8                	mov    %ecx,%eax
f012d100:	c1 e0 02             	shl    $0x2,%eax
f012d103:	01 c8                	add    %ecx,%eax
f012d105:	39 c2                	cmp    %eax,%edx
f012d107:	74 17                	je     f012d120 <test_krealloc+0x141d>
			panic("krealloc: invalid read after freeing some allocations");
f012d109:	83 ec 04             	sub    $0x4,%esp
f012d10c:	68 cc c8 13 f0       	push   $0xf013c8cc
f012d111:	68 0d 10 00 00       	push   $0x100d
f012d116:	68 7a b3 13 f0       	push   $0xf013b37a
f012d11b:	e8 e5 30 fd ff       	call   f0100205 <_panic>

		//1st 3 MB
		//cprintf("1st 3 MB\n");
		structArr = (struct MyStruct*) ptr_allocations[6];
f012d120:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f012d126:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)

		for (i = 0; i <= lastIndices[6]; ++i) {
f012d12c:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
f012d133:	eb 70                	jmp    f012d1a5 <test_krealloc+0x14a2>
			sums[3] += structArr[i].a;
f012d135:	8b 95 c4 fd ff ff    	mov    -0x23c(%ebp),%edx
f012d13b:	8b 45 dc             	mov    -0x24(%ebp),%eax
f012d13e:	8d 0c c5 00 00 00 00 	lea    0x0(,%eax,8),%ecx
f012d145:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012d14b:	01 c8                	add    %ecx,%eax
f012d14d:	8a 00                	mov    (%eax),%al
f012d14f:	0f be c0             	movsbl %al,%eax
f012d152:	01 d0                	add    %edx,%eax
f012d154:	89 85 c4 fd ff ff    	mov    %eax,-0x23c(%ebp)
			sums[4] += structArr[i].b;
f012d15a:	8b 95 c8 fd ff ff    	mov    -0x238(%ebp),%edx
f012d160:	8b 45 dc             	mov    -0x24(%ebp),%eax
f012d163:	8d 0c c5 00 00 00 00 	lea    0x0(,%eax,8),%ecx
f012d16a:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012d170:	01 c8                	add    %ecx,%eax
f012d172:	66 8b 40 02          	mov    0x2(%eax),%ax
f012d176:	98                   	cwtl   
f012d177:	01 d0                	add    %edx,%eax
f012d179:	89 85 c8 fd ff ff    	mov    %eax,-0x238(%ebp)
			sums[5] += structArr[i].c;
f012d17f:	8b 95 cc fd ff ff    	mov    -0x234(%ebp),%edx
f012d185:	8b 45 dc             	mov    -0x24(%ebp),%eax
f012d188:	8d 0c c5 00 00 00 00 	lea    0x0(,%eax,8),%ecx
f012d18f:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012d195:	01 c8                	add    %ecx,%eax
f012d197:	8b 40 04             	mov    0x4(%eax),%eax
f012d19a:	01 d0                	add    %edx,%eax
f012d19c:	89 85 cc fd ff ff    	mov    %eax,-0x234(%ebp)

		//1st 3 MB
		//cprintf("1st 3 MB\n");
		structArr = (struct MyStruct*) ptr_allocations[6];

		for (i = 0; i <= lastIndices[6]; ++i) {
f012d1a2:	ff 45 dc             	incl   -0x24(%ebp)
f012d1a5:	8b 85 20 fe ff ff    	mov    -0x1e0(%ebp),%eax
f012d1ab:	3b 45 dc             	cmp    -0x24(%ebp),%eax
f012d1ae:	7d 85                	jge    f012d135 <test_krealloc+0x1432>
			sums[3] += structArr[i].a;
			sums[4] += structArr[i].b;
			sums[5] += structArr[i].c;
		}
		if (sums[3] != (lastIndices[6] + 1) * 7
f012d1b0:	8b 8d c4 fd ff ff    	mov    -0x23c(%ebp),%ecx
f012d1b6:	8b 85 20 fe ff ff    	mov    -0x1e0(%ebp),%eax
f012d1bc:	8d 50 01             	lea    0x1(%eax),%edx
f012d1bf:	89 d0                	mov    %edx,%eax
f012d1c1:	01 c0                	add    %eax,%eax
f012d1c3:	01 d0                	add    %edx,%eax
f012d1c5:	01 c0                	add    %eax,%eax
f012d1c7:	01 d0                	add    %edx,%eax
f012d1c9:	39 c1                	cmp    %eax,%ecx
f012d1cb:	75 3a                	jne    f012d207 <test_krealloc+0x1504>
				|| sums[4] != (lastIndices[6] + 1) * 7
f012d1cd:	8b 8d c8 fd ff ff    	mov    -0x238(%ebp),%ecx
f012d1d3:	8b 85 20 fe ff ff    	mov    -0x1e0(%ebp),%eax
f012d1d9:	8d 50 01             	lea    0x1(%eax),%edx
f012d1dc:	89 d0                	mov    %edx,%eax
f012d1de:	01 c0                	add    %eax,%eax
f012d1e0:	01 d0                	add    %edx,%eax
f012d1e2:	01 c0                	add    %eax,%eax
f012d1e4:	01 d0                	add    %edx,%eax
f012d1e6:	39 c1                	cmp    %eax,%ecx
f012d1e8:	75 1d                	jne    f012d207 <test_krealloc+0x1504>
				|| sums[5] != (lastIndices[6] + 1) * 7)
f012d1ea:	8b 8d cc fd ff ff    	mov    -0x234(%ebp),%ecx
f012d1f0:	8b 85 20 fe ff ff    	mov    -0x1e0(%ebp),%eax
f012d1f6:	8d 50 01             	lea    0x1(%eax),%edx
f012d1f9:	89 d0                	mov    %edx,%eax
f012d1fb:	01 c0                	add    %eax,%eax
f012d1fd:	01 d0                	add    %edx,%eax
f012d1ff:	01 c0                	add    %eax,%eax
f012d201:	01 d0                	add    %edx,%eax
f012d203:	39 c1                	cmp    %eax,%ecx
f012d205:	74 17                	je     f012d21e <test_krealloc+0x151b>
			panic("krealloc: invalid read after freeing some allocations");
f012d207:	83 ec 04             	sub    $0x4,%esp
f012d20a:	68 cc c8 13 f0       	push   $0xf013c8cc
f012d20f:	68 1b 10 00 00       	push   $0x101b
f012d214:	68 7a b3 13 f0       	push   $0xf013b37a
f012d219:	e8 e7 2f fd ff       	call   f0100205 <_panic>
	}

	//[4] Test krealloc reallocation with valid and invalid sizes
	{
		int freeDiskFrames;
		void* newAddress = NULL;
f012d21e:	c7 85 d8 fe ff ff 00 	movl   $0x0,-0x128(%ebp)
f012d225:	00 00 00 
		//Try to reallocate 2nd 1 MB with a size smaller than its current size (it should return the same VA and do nothing)
		freeFrames = sys_calculate_free_frames();
f012d228:	e8 70 f9 fd ff       	call   f010cb9d <sys_calculate_free_frames>
f012d22d:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[1], 15 * kilo);
f012d230:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f012d236:	83 ec 08             	sub    $0x8,%esp
f012d239:	68 00 3c 00 00       	push   $0x3c00
f012d23e:	50                   	push   %eax
f012d23f:	e8 01 a9 fd ff       	call   f0107b45 <krealloc>
f012d244:	83 c4 10             	add    $0x10,%esp
f012d247:	89 85 d8 fe ff ff    	mov    %eax,-0x128(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012d24d:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f012d253:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012d258:	77 17                	ja     f012d271 <test_krealloc+0x156e>
			panic("krealloc: Wrong start address for the allocated space... ");
f012d25a:	83 ec 04             	sub    $0x4,%esp
f012d25d:	68 20 c6 13 f0       	push   $0xf013c620
f012d262:	68 27 10 00 00       	push   $0x1027
f012d267:	68 7a b3 13 f0       	push   $0xf013b37a
f012d26c:	e8 94 2f fd ff       	call   f0100205 <_panic>
		if (newAddress != ptr_allocations[1])
f012d271:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f012d277:	3b 85 d8 fe ff ff    	cmp    -0x128(%ebp),%eax
f012d27d:	74 17                	je     f012d296 <test_krealloc+0x1593>
			panic(
f012d27f:	83 ec 04             	sub    $0x4,%esp
f012d282:	68 04 c9 13 f0       	push   $0xf013c904
f012d287:	68 2a 10 00 00       	push   $0x102a
f012d28c:	68 7a b3 13 f0       	push   $0xf013b37a
f012d291:	e8 6f 2f fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong allocation: krealloc reallocated an address with the same size (it should return same VA)");
		if (freeFrames != sys_calculate_free_frames())
f012d296:	e8 02 f9 fd ff       	call   f010cb9d <sys_calculate_free_frames>
f012d29b:	89 c2                	mov    %eax,%edx
f012d29d:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012d2a0:	39 c2                	cmp    %eax,%edx
f012d2a2:	74 17                	je     f012d2bb <test_krealloc+0x15b8>
			panic(
f012d2a4:	83 ec 04             	sub    $0x4,%esp
f012d2a7:	68 70 c9 13 f0       	push   $0xf013c970
f012d2ac:	68 2d 10 00 00       	push   $0x102d
f012d2b1:	68 7a b3 13 f0       	push   $0xf013b37a
f012d2b6:	e8 4a 2f fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong number of frames after krealloc with the same size");

		//Try to reallocate 1st 2 MB with a size smaller than its current size (it should return the same VA and do nothing)
		freeFrames = sys_calculate_free_frames();
f012d2bb:	e8 dd f8 fd ff       	call   f010cb9d <sys_calculate_free_frames>
f012d2c0:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[4], 1 * Mega - kilo);
f012d2c3:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f012d2c9:	83 ec 08             	sub    $0x8,%esp
f012d2cc:	68 00 fc 0f 00       	push   $0xffc00
f012d2d1:	50                   	push   %eax
f012d2d2:	e8 6e a8 fd ff       	call   f0107b45 <krealloc>
f012d2d7:	83 c4 10             	add    $0x10,%esp
f012d2da:	89 85 d8 fe ff ff    	mov    %eax,-0x128(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012d2e0:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f012d2e6:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012d2eb:	77 17                	ja     f012d304 <test_krealloc+0x1601>
			panic("krealloc: Wrong start address for the allocated space... ");
f012d2ed:	83 ec 04             	sub    $0x4,%esp
f012d2f0:	68 20 c6 13 f0       	push   $0xf013c620
f012d2f5:	68 33 10 00 00       	push   $0x1033
f012d2fa:	68 7a b3 13 f0       	push   $0xf013b37a
f012d2ff:	e8 01 2f fd ff       	call   f0100205 <_panic>
		if (newAddress != ptr_allocations[4])
f012d304:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f012d30a:	3b 85 d8 fe ff ff    	cmp    -0x128(%ebp),%eax
f012d310:	74 17                	je     f012d329 <test_krealloc+0x1626>
			panic(
f012d312:	83 ec 04             	sub    $0x4,%esp
f012d315:	68 04 c9 13 f0       	push   $0xf013c904
f012d31a:	68 36 10 00 00       	push   $0x1036
f012d31f:	68 7a b3 13 f0       	push   $0xf013b37a
f012d324:	e8 dc 2e fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong allocation: krealloc reallocated an address with the same size (it should return same VA)");
		if (freeFrames != sys_calculate_free_frames())
f012d329:	e8 6f f8 fd ff       	call   f010cb9d <sys_calculate_free_frames>
f012d32e:	89 c2                	mov    %eax,%edx
f012d330:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012d333:	39 c2                	cmp    %eax,%edx
f012d335:	74 17                	je     f012d34e <test_krealloc+0x164b>
			panic(
f012d337:	83 ec 04             	sub    $0x4,%esp
f012d33a:	68 70 c9 13 f0       	push   $0xf013c970
f012d33f:	68 39 10 00 00       	push   $0x1039
f012d344:	68 7a b3 13 f0       	push   $0xf013b37a
f012d349:	e8 b7 2e fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong number of frames after krealloc with the same size");

		//Try to reallocate 2nd 1 MB with the same size it should return the same VA
		freeFrames = sys_calculate_free_frames();
f012d34e:	e8 4a f8 fd ff       	call   f010cb9d <sys_calculate_free_frames>
f012d353:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[1], 1 * Mega - kilo);
f012d356:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f012d35c:	83 ec 08             	sub    $0x8,%esp
f012d35f:	68 00 fc 0f 00       	push   $0xffc00
f012d364:	50                   	push   %eax
f012d365:	e8 db a7 fd ff       	call   f0107b45 <krealloc>
f012d36a:	83 c4 10             	add    $0x10,%esp
f012d36d:	89 85 d8 fe ff ff    	mov    %eax,-0x128(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012d373:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f012d379:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012d37e:	77 17                	ja     f012d397 <test_krealloc+0x1694>
			panic("krealloc: Wrong start address for the allocated space... ");
f012d380:	83 ec 04             	sub    $0x4,%esp
f012d383:	68 20 c6 13 f0       	push   $0xf013c620
f012d388:	68 3f 10 00 00       	push   $0x103f
f012d38d:	68 7a b3 13 f0       	push   $0xf013b37a
f012d392:	e8 6e 2e fd ff       	call   f0100205 <_panic>
		if (newAddress != ptr_allocations[1])
f012d397:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f012d39d:	3b 85 d8 fe ff ff    	cmp    -0x128(%ebp),%eax
f012d3a3:	74 17                	je     f012d3bc <test_krealloc+0x16b9>
			panic(
f012d3a5:	83 ec 04             	sub    $0x4,%esp
f012d3a8:	68 04 c9 13 f0       	push   $0xf013c904
f012d3ad:	68 42 10 00 00       	push   $0x1042
f012d3b2:	68 7a b3 13 f0       	push   $0xf013b37a
f012d3b7:	e8 49 2e fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong allocation: krealloc reallocated an address with the same size (it should return same VA)");
		if (freeFrames != sys_calculate_free_frames())
f012d3bc:	e8 dc f7 fd ff       	call   f010cb9d <sys_calculate_free_frames>
f012d3c1:	89 c2                	mov    %eax,%edx
f012d3c3:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012d3c6:	39 c2                	cmp    %eax,%edx
f012d3c8:	74 17                	je     f012d3e1 <test_krealloc+0x16de>
			panic(
f012d3ca:	83 ec 04             	sub    $0x4,%esp
f012d3cd:	68 70 c9 13 f0       	push   $0xf013c970
f012d3d2:	68 45 10 00 00       	push   $0x1045
f012d3d7:	68 7a b3 13 f0       	push   $0xf013b37a
f012d3dc:	e8 24 2e fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong number of frames after krealloc with the same size");



		//Try to reallocate 4th 1 MB with the same size it should return the same VA
		freeFrames = sys_calculate_free_frames();
f012d3e1:	e8 b7 f7 fd ff       	call   f010cb9d <sys_calculate_free_frames>
f012d3e6:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[3], 1 * Mega - kilo);
f012d3e9:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f012d3ef:	83 ec 08             	sub    $0x8,%esp
f012d3f2:	68 00 fc 0f 00       	push   $0xffc00
f012d3f7:	50                   	push   %eax
f012d3f8:	e8 48 a7 fd ff       	call   f0107b45 <krealloc>
f012d3fd:	83 c4 10             	add    $0x10,%esp
f012d400:	89 85 d8 fe ff ff    	mov    %eax,-0x128(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012d406:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f012d40c:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012d411:	77 17                	ja     f012d42a <test_krealloc+0x1727>
			panic("krealloc: Wrong start address for the allocated space... ");
f012d413:	83 ec 04             	sub    $0x4,%esp
f012d416:	68 20 c6 13 f0       	push   $0xf013c620
f012d41b:	68 4d 10 00 00       	push   $0x104d
f012d420:	68 7a b3 13 f0       	push   $0xf013b37a
f012d425:	e8 db 2d fd ff       	call   f0100205 <_panic>
		if (newAddress != ptr_allocations[3])
f012d42a:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f012d430:	3b 85 d8 fe ff ff    	cmp    -0x128(%ebp),%eax
f012d436:	74 17                	je     f012d44f <test_krealloc+0x174c>
			panic(
f012d438:	83 ec 04             	sub    $0x4,%esp
f012d43b:	68 b4 c9 13 f0       	push   $0xf013c9b4
f012d440:	68 50 10 00 00       	push   $0x1050
f012d445:	68 7a b3 13 f0       	push   $0xf013b37a
f012d44a:	e8 b6 2d fd ff       	call   f0100205 <_panic>
					"Wrong allocation: krealloc reallocated an address with the same size (it should return same VA)");
		if (freeFrames != sys_calculate_free_frames())
f012d44f:	e8 49 f7 fd ff       	call   f010cb9d <sys_calculate_free_frames>
f012d454:	89 c2                	mov    %eax,%edx
f012d456:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012d459:	39 c2                	cmp    %eax,%edx
f012d45b:	74 17                	je     f012d474 <test_krealloc+0x1771>
			panic(
f012d45d:	83 ec 04             	sub    $0x4,%esp
f012d460:	68 70 c9 13 f0       	push   $0xf013c970
f012d465:	68 53 10 00 00       	push   $0x1053
f012d46a:	68 7a b3 13 f0       	push   $0xf013b37a
f012d46f:	e8 91 2d fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong number of frames after krealloc with the same size");
	}
	cprintf("\b\b\b30%");
f012d474:	83 ec 0c             	sub    $0xc,%esp
f012d477:	68 93 bb 13 f0       	push   $0xf013bb93
f012d47c:	e8 8d 38 fd ff       	call   f0100d0e <cprintf>
f012d481:	83 c4 10             	add    $0x10,%esp
    {
		//Reallocate 2nd 1 MB to 1 MB + 7 KB
		freeFrames = sys_calculate_free_frames();
f012d484:	e8 14 f7 fd ff       	call   f010cb9d <sys_calculate_free_frames>
f012d489:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[1],
f012d48c:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f012d492:	83 ec 08             	sub    $0x8,%esp
f012d495:	68 00 18 10 00       	push   $0x101800
f012d49a:	50                   	push   %eax
f012d49b:	e8 a5 a6 fd ff       	call   f0107b45 <krealloc>
f012d4a0:	83 c4 10             	add    $0x10,%esp
f012d4a3:	89 45 bc             	mov    %eax,-0x44(%ebp)
				(1 * Mega - kilo) + (7 * kilo));
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012d4a6:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012d4a9:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012d4ae:	77 17                	ja     f012d4c7 <test_krealloc+0x17c4>
			panic("krealloc: Wrong start address for the allocated space... ");
f012d4b0:	83 ec 04             	sub    $0x4,%esp
f012d4b3:	68 20 c6 13 f0       	push   $0xf013c620
f012d4b8:	68 5c 10 00 00       	push   $0x105c
f012d4bd:	68 7a b3 13 f0       	push   $0xf013b37a
f012d4c2:	e8 3e 2d fd ff       	call   f0100205 <_panic>
		if (newAddress != ptr_allocations[1])
f012d4c7:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f012d4cd:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f012d4d0:	74 17                	je     f012d4e9 <test_krealloc+0x17e6>
			panic(
f012d4d2:	83 ec 04             	sub    $0x4,%esp
f012d4d5:	68 14 ca 13 f0       	push   $0xf013ca14
f012d4da:	68 5f 10 00 00       	push   $0x105f
f012d4df:	68 7a b3 13 f0       	push   $0xf013b37a
f012d4e4:	e8 1c 2d fd ff       	call   f0100205 <_panic>
					"Wrong allocation: krealloc reallocated a new address while there is a sufficient space after it (it should return same VA)");
		if (freeFrames - sys_calculate_free_frames() != 2)
f012d4e9:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012d4ec:	e8 ac f6 fd ff       	call   f010cb9d <sys_calculate_free_frames>
f012d4f1:	29 c3                	sub    %eax,%ebx
f012d4f3:	89 d8                	mov    %ebx,%eax
f012d4f5:	83 f8 02             	cmp    $0x2,%eax
f012d4f8:	74 17                	je     f012d511 <test_krealloc+0x180e>
			panic("krealloc: pages in memory are not loaded correctly");
f012d4fa:	83 ec 04             	sub    $0x4,%esp
f012d4fd:	68 90 ca 13 f0       	push   $0xf013ca90
f012d502:	68 61 10 00 00       	push   $0x1061
f012d507:	68 7a b3 13 f0       	push   $0xf013b37a
f012d50c:	e8 f4 2c fd ff       	call   f0100205 <_panic>

		//Reallocate 1st 2 MB to 2 MB + 2 MB
		freeFrames = sys_calculate_free_frames();
f012d511:	e8 87 f6 fd ff       	call   f010cb9d <sys_calculate_free_frames>
f012d516:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[4], (4 * Mega - kilo));
f012d519:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f012d51f:	83 ec 08             	sub    $0x8,%esp
f012d522:	68 00 fc 3f 00       	push   $0x3ffc00
f012d527:	50                   	push   %eax
f012d528:	e8 18 a6 fd ff       	call   f0107b45 <krealloc>
f012d52d:	83 c4 10             	add    $0x10,%esp
f012d530:	89 45 bc             	mov    %eax,-0x44(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012d533:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012d536:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012d53b:	77 17                	ja     f012d554 <test_krealloc+0x1851>
			panic("krealloc: Wrong start address for the allocated space... ");
f012d53d:	83 ec 04             	sub    $0x4,%esp
f012d540:	68 20 c6 13 f0       	push   $0xf013c620
f012d545:	68 67 10 00 00       	push   $0x1067
f012d54a:	68 7a b3 13 f0       	push   $0xf013b37a
f012d54f:	e8 b1 2c fd ff       	call   f0100205 <_panic>
		if (newAddress != ptr_allocations[4])
f012d554:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f012d55a:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f012d55d:	74 17                	je     f012d576 <test_krealloc+0x1873>
			panic(
f012d55f:	83 ec 04             	sub    $0x4,%esp
f012d562:	68 14 ca 13 f0       	push   $0xf013ca14
f012d567:	68 6a 10 00 00       	push   $0x106a
f012d56c:	68 7a b3 13 f0       	push   $0xf013b37a
f012d571:	e8 8f 2c fd ff       	call   f0100205 <_panic>
					"Wrong allocation: krealloc reallocated a new address while there is a sufficient space after it (it should return same VA)");
		//2 MB only for the new size
		if (freeFrames - sys_calculate_free_frames() != 512)
f012d576:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012d579:	e8 1f f6 fd ff       	call   f010cb9d <sys_calculate_free_frames>
f012d57e:	29 c3                	sub    %eax,%ebx
f012d580:	89 d8                	mov    %ebx,%eax
f012d582:	3d 00 02 00 00       	cmp    $0x200,%eax
f012d587:	74 17                	je     f012d5a0 <test_krealloc+0x189d>
			panic("krealloc: pages in memory are not loaded correctly");
f012d589:	83 ec 04             	sub    $0x4,%esp
f012d58c:	68 90 ca 13 f0       	push   $0xf013ca90
f012d591:	68 6d 10 00 00       	push   $0x106d
f012d596:	68 7a b3 13 f0       	push   $0xf013b37a
f012d59b:	e8 65 2c fd ff       	call   f0100205 <_panic>


	}
	cprintf("\b\b\b60%");
f012d5a0:	83 ec 0c             	sub    $0xc,%esp
f012d5a3:	68 d8 bb 13 f0       	push   $0xf013bbd8
f012d5a8:	e8 61 37 fd ff       	call   f0100d0e <cprintf>
f012d5ad:	83 c4 10             	add    $0x10,%esp
	//Test krealloc: Cut & paste
	{
		//Reallocate 1st 2 MB (already reallocated to 4 MB) to 10 MB. It should return new VA
		freeFrames = sys_calculate_free_frames();
f012d5b0:	e8 e8 f5 fd ff       	call   f010cb9d <sys_calculate_free_frames>
f012d5b5:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[4], (10 * Mega - kilo));
f012d5b8:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f012d5be:	83 ec 08             	sub    $0x8,%esp
f012d5c1:	68 00 fc 9f 00       	push   $0x9ffc00
f012d5c6:	50                   	push   %eax
f012d5c7:	e8 79 a5 fd ff       	call   f0107b45 <krealloc>
f012d5cc:	83 c4 10             	add    $0x10,%esp
f012d5cf:	89 45 bc             	mov    %eax,-0x44(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012d5d2:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012d5d5:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012d5da:	77 17                	ja     f012d5f3 <test_krealloc+0x18f0>
			panic("krealloc: Wrong start address for the allocated space... ");
f012d5dc:	83 ec 04             	sub    $0x4,%esp
f012d5df:	68 20 c6 13 f0       	push   $0xf013c620
f012d5e4:	68 78 10 00 00       	push   $0x1078
f012d5e9:	68 7a b3 13 f0       	push   $0xf013b37a
f012d5ee:	e8 12 2c fd ff       	call   f0100205 <_panic>
		if ((uint32) newAddress != ACTUAL_START + (14 * Mega))
f012d5f3:	c7 85 d4 fe ff ff 00 	movl   $0x1000,-0x12c(%ebp)
f012d5fa:	10 00 00 
f012d5fd:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f012d603:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012d608:	89 85 d0 fe ff ff    	mov    %eax,-0x130(%ebp)
f012d60e:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f012d614:	ba 00 00 00 00       	mov    $0x0,%edx
f012d619:	f7 b5 d4 fe ff ff    	divl   -0x12c(%ebp)
f012d61f:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f012d625:	29 d0                	sub    %edx,%eax
f012d627:	89 c1                	mov    %eax,%ecx
f012d629:	c7 85 cc fe ff ff 00 	movl   $0x1000,-0x134(%ebp)
f012d630:	10 00 00 
f012d633:	a0 40 26 78 f0       	mov    0xf0782640,%al
f012d638:	0f b6 d0             	movzbl %al,%edx
f012d63b:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f012d641:	01 d0                	add    %edx,%eax
f012d643:	48                   	dec    %eax
f012d644:	89 85 c8 fe ff ff    	mov    %eax,-0x138(%ebp)
f012d64a:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f012d650:	ba 00 00 00 00       	mov    $0x0,%edx
f012d655:	f7 b5 cc fe ff ff    	divl   -0x134(%ebp)
f012d65b:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f012d661:	29 d0                	sub    %edx,%eax
f012d663:	01 c1                	add    %eax,%ecx
f012d665:	c7 85 c4 fe ff ff 00 	movl   $0x1000,-0x13c(%ebp)
f012d66c:	10 00 00 
f012d66f:	a0 40 26 78 f0       	mov    0xf0782640,%al
f012d674:	0f b6 c0             	movzbl %al,%eax
f012d677:	c1 e0 04             	shl    $0x4,%eax
f012d67a:	89 c2                	mov    %eax,%edx
f012d67c:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f012d682:	01 d0                	add    %edx,%eax
f012d684:	48                   	dec    %eax
f012d685:	89 85 c0 fe ff ff    	mov    %eax,-0x140(%ebp)
f012d68b:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f012d691:	ba 00 00 00 00       	mov    $0x0,%edx
f012d696:	f7 b5 c4 fe ff ff    	divl   -0x13c(%ebp)
f012d69c:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f012d6a2:	29 d0                	sub    %edx,%eax
f012d6a4:	01 c8                	add    %ecx,%eax
f012d6a6:	8d 90 00 40 e0 f6    	lea    -0x91fc000(%eax),%edx
f012d6ac:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012d6af:	39 c2                	cmp    %eax,%edx
f012d6b1:	74 18                	je     f012d6cb <test_krealloc+0x19c8>
			panic(
f012d6b3:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012d6b6:	50                   	push   %eax
f012d6b7:	68 c4 ca 13 f0       	push   $0xf013cac4
f012d6bc:	68 7c 10 00 00       	push   $0x107c
f012d6c1:	68 7a b3 13 f0       	push   $0xf013b37a
f012d6c6:	e8 3a 2b fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong start address for reallocated space, NSA = %x\nbbb",
					(uint32 )newAddress);
		if (newAddress == ptr_allocations[4])
f012d6cb:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f012d6d1:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f012d6d4:	75 17                	jne    f012d6ed <test_krealloc+0x19ea>
			panic(
f012d6d6:	83 ec 04             	sub    $0x4,%esp
f012d6d9:	68 08 cb 13 f0       	push   $0xf013cb08
f012d6de:	68 7f 10 00 00       	push   $0x107f
f012d6e3:	68 7a b3 13 f0       	push   $0xf013b37a
f012d6e8:	e8 18 2b fd ff       	call   f0100205 <_panic>
					"Wrong allocation: krealloc reallocated at the same address while there is NO sufficient space after it (it should return new VA)");
		//6 MB only for the new size
		if (freeFrames - sys_calculate_free_frames() != 1536)
f012d6ed:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012d6f0:	e8 a8 f4 fd ff       	call   f010cb9d <sys_calculate_free_frames>
f012d6f5:	29 c3                	sub    %eax,%ebx
f012d6f7:	89 d8                	mov    %ebx,%eax
f012d6f9:	3d 00 06 00 00       	cmp    $0x600,%eax
f012d6fe:	74 17                	je     f012d717 <test_krealloc+0x1a14>
			panic("krealloc: pages in memory are not loaded correctly");
f012d700:	83 ec 04             	sub    $0x4,%esp
f012d703:	68 90 ca 13 f0       	push   $0xf013ca90
f012d708:	68 82 10 00 00       	push   $0x1082
f012d70d:	68 7a b3 13 f0       	push   $0xf013b37a
f012d712:	e8 ee 2a fd ff       	call   f0100205 <_panic>

		ptr_allocations[4] = newAddress;
f012d717:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012d71a:	89 85 68 fe ff ff    	mov    %eax,-0x198(%ebp)
		//lastIndices[4] = (10 * Mega - kilo) / sizeof(short) - 1;

		//Reallocate 1st 3 MB to 6 MB
		freeFrames = sys_calculate_free_frames();
f012d720:	e8 78 f4 fd ff       	call   f010cb9d <sys_calculate_free_frames>
f012d725:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[6], (6 * Mega - kilo));
f012d728:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f012d72e:	83 ec 08             	sub    $0x8,%esp
f012d731:	68 00 fc 5f 00       	push   $0x5ffc00
f012d736:	50                   	push   %eax
f012d737:	e8 09 a4 fd ff       	call   f0107b45 <krealloc>
f012d73c:	83 c4 10             	add    $0x10,%esp
f012d73f:	89 45 bc             	mov    %eax,-0x44(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012d742:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012d745:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012d74a:	77 17                	ja     f012d763 <test_krealloc+0x1a60>
			panic("krealloc: Wrong start address for the allocated space... ");
f012d74c:	83 ec 04             	sub    $0x4,%esp
f012d74f:	68 20 c6 13 f0       	push   $0xf013c620
f012d754:	68 8b 10 00 00       	push   $0x108b
f012d759:	68 7a b3 13 f0       	push   $0xf013b37a
f012d75e:	e8 a2 2a fd ff       	call   f0100205 <_panic>
		if (newAddress != ptr_allocations[6])
f012d763:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f012d769:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f012d76c:	74 17                	je     f012d785 <test_krealloc+0x1a82>
			panic(
f012d76e:	83 ec 04             	sub    $0x4,%esp
f012d771:	68 14 ca 13 f0       	push   $0xf013ca14
f012d776:	68 8e 10 00 00       	push   $0x108e
f012d77b:	68 7a b3 13 f0       	push   $0xf013b37a
f012d780:	e8 80 2a fd ff       	call   f0100205 <_panic>
					"Wrong allocation: krealloc reallocated a new address while there is a sufficient space after it (it should return same VA)");
		//3 MB only for the new size
		if (freeFrames - sys_calculate_free_frames() != 768)
f012d785:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012d788:	e8 10 f4 fd ff       	call   f010cb9d <sys_calculate_free_frames>
f012d78d:	29 c3                	sub    %eax,%ebx
f012d78f:	89 d8                	mov    %ebx,%eax
f012d791:	3d 00 03 00 00       	cmp    $0x300,%eax
f012d796:	74 17                	je     f012d7af <test_krealloc+0x1aac>
			panic("krealloc: pages in memory are not loaded correctly");
f012d798:	83 ec 04             	sub    $0x4,%esp
f012d79b:	68 90 ca 13 f0       	push   $0xf013ca90
f012d7a0:	68 91 10 00 00       	push   $0x1091
f012d7a5:	68 7a b3 13 f0       	push   $0xf013b37a
f012d7aa:	e8 56 2a fd ff       	call   f0100205 <_panic>

		//Reallocate 1st 3 MB (already reallocated to 6 MB) to 20 MB. It should return new VA

		freeFrames = sys_calculate_free_frames();
f012d7af:	e8 e9 f3 fd ff       	call   f010cb9d <sys_calculate_free_frames>
f012d7b4:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[6], (20 * Mega - kilo));
f012d7b7:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f012d7bd:	83 ec 08             	sub    $0x8,%esp
f012d7c0:	68 00 fc 3f 01       	push   $0x13ffc00
f012d7c5:	50                   	push   %eax
f012d7c6:	e8 7a a3 fd ff       	call   f0107b45 <krealloc>
f012d7cb:	83 c4 10             	add    $0x10,%esp
f012d7ce:	89 45 bc             	mov    %eax,-0x44(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012d7d1:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012d7d4:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012d7d9:	77 17                	ja     f012d7f2 <test_krealloc+0x1aef>
			panic("krealloc: Wrong start address for the allocated space... ");
f012d7db:	83 ec 04             	sub    $0x4,%esp
f012d7de:	68 20 c6 13 f0       	push   $0xf013c620
f012d7e3:	68 98 10 00 00       	push   $0x1098
f012d7e8:	68 7a b3 13 f0       	push   $0xf013b37a
f012d7ed:	e8 13 2a fd ff       	call   f0100205 <_panic>
		if (newAddress == ptr_allocations[6])
f012d7f2:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f012d7f8:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f012d7fb:	75 17                	jne    f012d814 <test_krealloc+0x1b11>
			panic(
f012d7fd:	83 ec 04             	sub    $0x4,%esp
f012d800:	68 08 cb 13 f0       	push   $0xf013cb08
f012d805:	68 9b 10 00 00       	push   $0x109b
f012d80a:	68 7a b3 13 f0       	push   $0xf013b37a
f012d80f:	e8 f1 29 fd ff       	call   f0100205 <_panic>
					"Wrong allocation: krealloc reallocated at the same address while there is NO sufficient space after it (it should return new VA)");
		if ((uint32) newAddress != ACTUAL_START + (24 * Mega))
f012d814:	c7 85 bc fe ff ff 00 	movl   $0x1000,-0x144(%ebp)
f012d81b:	10 00 00 
f012d81e:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f012d824:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012d829:	89 85 b8 fe ff ff    	mov    %eax,-0x148(%ebp)
f012d82f:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f012d835:	ba 00 00 00 00       	mov    $0x0,%edx
f012d83a:	f7 b5 bc fe ff ff    	divl   -0x144(%ebp)
f012d840:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f012d846:	29 d0                	sub    %edx,%eax
f012d848:	89 c1                	mov    %eax,%ecx
f012d84a:	c7 85 b4 fe ff ff 00 	movl   $0x1000,-0x14c(%ebp)
f012d851:	10 00 00 
f012d854:	a0 40 26 78 f0       	mov    0xf0782640,%al
f012d859:	0f b6 d0             	movzbl %al,%edx
f012d85c:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f012d862:	01 d0                	add    %edx,%eax
f012d864:	48                   	dec    %eax
f012d865:	89 85 b0 fe ff ff    	mov    %eax,-0x150(%ebp)
f012d86b:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f012d871:	ba 00 00 00 00       	mov    $0x0,%edx
f012d876:	f7 b5 b4 fe ff ff    	divl   -0x14c(%ebp)
f012d87c:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f012d882:	29 d0                	sub    %edx,%eax
f012d884:	01 c1                	add    %eax,%ecx
f012d886:	c7 85 ac fe ff ff 00 	movl   $0x1000,-0x154(%ebp)
f012d88d:	10 00 00 
f012d890:	a0 40 26 78 f0       	mov    0xf0782640,%al
f012d895:	0f b6 c0             	movzbl %al,%eax
f012d898:	c1 e0 04             	shl    $0x4,%eax
f012d89b:	89 c2                	mov    %eax,%edx
f012d89d:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f012d8a3:	01 d0                	add    %edx,%eax
f012d8a5:	48                   	dec    %eax
f012d8a6:	89 85 a8 fe ff ff    	mov    %eax,-0x158(%ebp)
f012d8ac:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f012d8b2:	ba 00 00 00 00       	mov    $0x0,%edx
f012d8b7:	f7 b5 ac fe ff ff    	divl   -0x154(%ebp)
f012d8bd:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f012d8c3:	29 d0                	sub    %edx,%eax
f012d8c5:	01 c8                	add    %ecx,%eax
f012d8c7:	8d 90 00 40 80 f7    	lea    -0x87fc000(%eax),%edx
f012d8cd:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012d8d0:	39 c2                	cmp    %eax,%edx
f012d8d2:	74 17                	je     f012d8eb <test_krealloc+0x1be8>
			panic("krealloc: Wrong start address for reallocated space");
f012d8d4:	83 ec 04             	sub    $0x4,%esp
f012d8d7:	68 8c cb 13 f0       	push   $0xf013cb8c
f012d8dc:	68 9d 10 00 00       	push   $0x109d
f012d8e1:	68 7a b3 13 f0       	push   $0xf013b37a
f012d8e6:	e8 1a 29 fd ff       	call   f0100205 <_panic>
		//3 MB only for the new size
		if (freeFrames - sys_calculate_free_frames() != 3584)
f012d8eb:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012d8ee:	e8 aa f2 fd ff       	call   f010cb9d <sys_calculate_free_frames>
f012d8f3:	29 c3                	sub    %eax,%ebx
f012d8f5:	89 d8                	mov    %ebx,%eax
f012d8f7:	3d 00 0e 00 00       	cmp    $0xe00,%eax
f012d8fc:	74 17                	je     f012d915 <test_krealloc+0x1c12>
			panic("krealloc: pages in memory are not loaded correctly");
f012d8fe:	83 ec 04             	sub    $0x4,%esp
f012d901:	68 90 ca 13 f0       	push   $0xf013ca90
f012d906:	68 a0 10 00 00       	push   $0x10a0
f012d90b:	68 7a b3 13 f0       	push   $0xf013b37a
f012d910:	e8 f0 28 fd ff       	call   f0100205 <_panic>

		ptr_allocations[6] = newAddress;
f012d915:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012d918:	89 85 70 fe ff ff    	mov    %eax,-0x190(%ebp)

		//Test read write access for the new allocated size of 2nd 1 MB
		ptr = (char*) ptr_allocations[1];
f012d91e:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f012d924:	89 85 ec fe ff ff    	mov    %eax,-0x114(%ebp)
		int i;
		sums[0] = 0;
f012d92a:	c7 85 b8 fd ff ff 00 	movl   $0x0,-0x248(%ebp)
f012d931:	00 00 00 
		for (i = 0; i <= lastIndices[1]; ++i) {
f012d934:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
f012d93b:	eb 21                	jmp    f012d95e <test_krealloc+0x1c5b>
			sums[0] += ptr[i];
f012d93d:	8b 95 b8 fd ff ff    	mov    -0x248(%ebp),%edx
f012d943:	8b 4d d8             	mov    -0x28(%ebp),%ecx
f012d946:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f012d94c:	01 c8                	add    %ecx,%eax
f012d94e:	8a 00                	mov    (%eax),%al
f012d950:	0f be c0             	movsbl %al,%eax
f012d953:	01 d0                	add    %edx,%eax
f012d955:	89 85 b8 fd ff ff    	mov    %eax,-0x248(%ebp)

		//Test read write access for the new allocated size of 2nd 1 MB
		ptr = (char*) ptr_allocations[1];
		int i;
		sums[0] = 0;
		for (i = 0; i <= lastIndices[1]; ++i) {
f012d95b:	ff 45 d8             	incl   -0x28(%ebp)
f012d95e:	8b 85 0c fe ff ff    	mov    -0x1f4(%ebp),%eax
f012d964:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f012d967:	7d d4                	jge    f012d93d <test_krealloc+0x1c3a>
			sums[0] += ptr[i];

		}
		//cprintf("sum for 2nd 1 MB = %d LIM1 = %d\n", sums[0], (lastIndices[1] - 1));
		if (sums[0] != (lastIndices[1] + 1) * 2)
f012d969:	8b 85 b8 fd ff ff    	mov    -0x248(%ebp),%eax
f012d96f:	8b 95 0c fe ff ff    	mov    -0x1f4(%ebp),%edx
f012d975:	42                   	inc    %edx
f012d976:	01 d2                	add    %edx,%edx
f012d978:	39 d0                	cmp    %edx,%eax
f012d97a:	74 17                	je     f012d993 <test_krealloc+0x1c90>
			panic("krealloc: invalid read after re-allocations");
f012d97c:	83 ec 04             	sub    $0x4,%esp
f012d97f:	68 c0 cb 13 f0       	push   $0xf013cbc0
f012d984:	68 ae 10 00 00       	push   $0x10ae
f012d989:	68 7a b3 13 f0       	push   $0xf013b37a
f012d98e:	e8 72 28 fd ff       	call   f0100205 <_panic>

		//Test read write access for the new allocated size of 1st 3 MB
		structArr = (struct MyStruct*) ptr_allocations[6];
f012d993:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f012d999:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)

		sums[0] = 0;
f012d99f:	c7 85 b8 fd ff ff 00 	movl   $0x0,-0x248(%ebp)
f012d9a6:	00 00 00 
		sums[1] = 0;
f012d9a9:	c7 85 bc fd ff ff 00 	movl   $0x0,-0x244(%ebp)
f012d9b0:	00 00 00 
		sums[2] = 0;
f012d9b3:	c7 85 c0 fd ff ff 00 	movl   $0x0,-0x240(%ebp)
f012d9ba:	00 00 00 
		for (i = 0; i <= lastIndices[6]; ++i) {
f012d9bd:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
f012d9c4:	eb 70                	jmp    f012da36 <test_krealloc+0x1d33>
			sums[0] += structArr[i].a;
f012d9c6:	8b 95 b8 fd ff ff    	mov    -0x248(%ebp),%edx
f012d9cc:	8b 45 d8             	mov    -0x28(%ebp),%eax
f012d9cf:	8d 0c c5 00 00 00 00 	lea    0x0(,%eax,8),%ecx
f012d9d6:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012d9dc:	01 c8                	add    %ecx,%eax
f012d9de:	8a 00                	mov    (%eax),%al
f012d9e0:	0f be c0             	movsbl %al,%eax
f012d9e3:	01 d0                	add    %edx,%eax
f012d9e5:	89 85 b8 fd ff ff    	mov    %eax,-0x248(%ebp)
			sums[1] += structArr[i].b;
f012d9eb:	8b 95 bc fd ff ff    	mov    -0x244(%ebp),%edx
f012d9f1:	8b 45 d8             	mov    -0x28(%ebp),%eax
f012d9f4:	8d 0c c5 00 00 00 00 	lea    0x0(,%eax,8),%ecx
f012d9fb:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012da01:	01 c8                	add    %ecx,%eax
f012da03:	66 8b 40 02          	mov    0x2(%eax),%ax
f012da07:	98                   	cwtl   
f012da08:	01 d0                	add    %edx,%eax
f012da0a:	89 85 bc fd ff ff    	mov    %eax,-0x244(%ebp)
			sums[2] += structArr[i].c;
f012da10:	8b 95 c0 fd ff ff    	mov    -0x240(%ebp),%edx
f012da16:	8b 45 d8             	mov    -0x28(%ebp),%eax
f012da19:	8d 0c c5 00 00 00 00 	lea    0x0(,%eax,8),%ecx
f012da20:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012da26:	01 c8                	add    %ecx,%eax
f012da28:	8b 40 04             	mov    0x4(%eax),%eax
f012da2b:	01 d0                	add    %edx,%eax
f012da2d:	89 85 c0 fd ff ff    	mov    %eax,-0x240(%ebp)
		structArr = (struct MyStruct*) ptr_allocations[6];

		sums[0] = 0;
		sums[1] = 0;
		sums[2] = 0;
		for (i = 0; i <= lastIndices[6]; ++i) {
f012da33:	ff 45 d8             	incl   -0x28(%ebp)
f012da36:	8b 85 20 fe ff ff    	mov    -0x1e0(%ebp),%eax
f012da3c:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f012da3f:	7d 85                	jge    f012d9c6 <test_krealloc+0x1cc3>
			sums[1] += structArr[i].b;
			sums[2] += structArr[i].c;

		}
		//cprintf("sum for 2nd 1 MB = %d LIM1 = %d\n", sums[0], (lastIndices[1] - 1));
		if (sums[0] != (lastIndices[6] + 1) * 7
f012da41:	8b 8d b8 fd ff ff    	mov    -0x248(%ebp),%ecx
f012da47:	8b 85 20 fe ff ff    	mov    -0x1e0(%ebp),%eax
f012da4d:	8d 50 01             	lea    0x1(%eax),%edx
f012da50:	89 d0                	mov    %edx,%eax
f012da52:	01 c0                	add    %eax,%eax
f012da54:	01 d0                	add    %edx,%eax
f012da56:	01 c0                	add    %eax,%eax
f012da58:	01 d0                	add    %edx,%eax
f012da5a:	39 c1                	cmp    %eax,%ecx
f012da5c:	75 3a                	jne    f012da98 <test_krealloc+0x1d95>
				|| sums[1] != (lastIndices[6] + 1) * 7
f012da5e:	8b 8d bc fd ff ff    	mov    -0x244(%ebp),%ecx
f012da64:	8b 85 20 fe ff ff    	mov    -0x1e0(%ebp),%eax
f012da6a:	8d 50 01             	lea    0x1(%eax),%edx
f012da6d:	89 d0                	mov    %edx,%eax
f012da6f:	01 c0                	add    %eax,%eax
f012da71:	01 d0                	add    %edx,%eax
f012da73:	01 c0                	add    %eax,%eax
f012da75:	01 d0                	add    %edx,%eax
f012da77:	39 c1                	cmp    %eax,%ecx
f012da79:	75 1d                	jne    f012da98 <test_krealloc+0x1d95>
				|| sums[2] != (lastIndices[6] + 1) * 7)
f012da7b:	8b 8d c0 fd ff ff    	mov    -0x240(%ebp),%ecx
f012da81:	8b 85 20 fe ff ff    	mov    -0x1e0(%ebp),%eax
f012da87:	8d 50 01             	lea    0x1(%eax),%edx
f012da8a:	89 d0                	mov    %edx,%eax
f012da8c:	01 c0                	add    %eax,%eax
f012da8e:	01 d0                	add    %edx,%eax
f012da90:	01 c0                	add    %eax,%eax
f012da92:	01 d0                	add    %edx,%eax
f012da94:	39 c1                	cmp    %eax,%ecx
f012da96:	74 17                	je     f012daaf <test_krealloc+0x1dac>
			panic("krealloc: invalid read after re-allocations");
f012da98:	83 ec 04             	sub    $0x4,%esp
f012da9b:	68 c0 cb 13 f0       	push   $0xf013cbc0
f012daa0:	68 c0 10 00 00       	push   $0x10c0
f012daa5:	68 7a b3 13 f0       	push   $0xf013b37a
f012daaa:	e8 56 27 fd ff       	call   f0100205 <_panic>

		//Test read write access for the new allocated size of 1st 2 MB
		shortArr = (short*) ptr_allocations[4];
f012daaf:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f012dab5:	89 85 e4 fe ff ff    	mov    %eax,-0x11c(%ebp)

		sums[0] = 0;
f012dabb:	c7 85 b8 fd ff ff 00 	movl   $0x0,-0x248(%ebp)
f012dac2:	00 00 00 
		for (i = 0; i <= lastIndices[4]; ++i) {
f012dac5:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
f012dacc:	eb 24                	jmp    f012daf2 <test_krealloc+0x1def>
			sums[0] += shortArr[i];
f012dace:	8b 95 b8 fd ff ff    	mov    -0x248(%ebp),%edx
f012dad4:	8b 45 d8             	mov    -0x28(%ebp),%eax
f012dad7:	01 c0                	add    %eax,%eax
f012dad9:	89 c1                	mov    %eax,%ecx
f012dadb:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f012dae1:	01 c8                	add    %ecx,%eax
f012dae3:	66 8b 00             	mov    (%eax),%ax
f012dae6:	98                   	cwtl   
f012dae7:	01 d0                	add    %edx,%eax
f012dae9:	89 85 b8 fd ff ff    	mov    %eax,-0x248(%ebp)

		//Test read write access for the new allocated size of 1st 2 MB
		shortArr = (short*) ptr_allocations[4];

		sums[0] = 0;
		for (i = 0; i <= lastIndices[4]; ++i) {
f012daef:	ff 45 d8             	incl   -0x28(%ebp)
f012daf2:	8b 85 18 fe ff ff    	mov    -0x1e8(%ebp),%eax
f012daf8:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f012dafb:	7d d1                	jge    f012dace <test_krealloc+0x1dcb>
			sums[0] += shortArr[i];
		}
		if (sums[0] != (lastIndices[4] + 1) * 5)
f012dafd:	8b 95 b8 fd ff ff    	mov    -0x248(%ebp),%edx
f012db03:	8b 85 18 fe ff ff    	mov    -0x1e8(%ebp),%eax
f012db09:	8d 48 01             	lea    0x1(%eax),%ecx
f012db0c:	89 c8                	mov    %ecx,%eax
f012db0e:	c1 e0 02             	shl    $0x2,%eax
f012db11:	01 c8                	add    %ecx,%eax
f012db13:	39 c2                	cmp    %eax,%edx
f012db15:	74 17                	je     f012db2e <test_krealloc+0x1e2b>
			panic("krealloc: invalid read after re-allocations");
f012db17:	83 ec 04             	sub    $0x4,%esp
f012db1a:	68 c0 cb 13 f0       	push   $0xf013cbc0
f012db1f:	68 ca 10 00 00       	push   $0x10ca
f012db24:	68 7a b3 13 f0       	push   $0xf013b37a
f012db29:	e8 d7 26 fd ff       	call   f0100205 <_panic>

		//Test krealloc with size = 0 after krealloc 1st 3 MB to 20 MB
		freeFrames = sys_calculate_free_frames();
f012db2e:	e8 6a f0 fd ff       	call   f010cb9d <sys_calculate_free_frames>
f012db33:	89 45 b8             	mov    %eax,-0x48(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f012db36:	e8 8d 62 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012db3b:	89 85 dc fe ff ff    	mov    %eax,-0x124(%ebp)
		krealloc(ptr_allocations[6], 0);
f012db41:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f012db47:	83 ec 08             	sub    $0x8,%esp
f012db4a:	6a 00                	push   $0x0
f012db4c:	50                   	push   %eax
f012db4d:	e8 f3 9f fd ff       	call   f0107b45 <krealloc>
f012db52:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0)
f012db55:	e8 6e 62 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012db5a:	3b 85 dc fe ff ff    	cmp    -0x124(%ebp),%eax
f012db60:	74 17                	je     f012db79 <test_krealloc+0x1e76>
			panic(
f012db62:	83 ec 04             	sub    $0x4,%esp
f012db65:	68 94 b3 13 f0       	push   $0xf013b394
f012db6a:	68 d2 10 00 00       	push   $0x10d2
f012db6f:	68 7a b3 13 f0       	push   $0xf013b37a
f012db74:	e8 8c 26 fd ff       	call   f0100205 <_panic>
					"Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((sys_calculate_free_frames() - freeFrames) != 20 * Mega / PAGE_SIZE)
f012db79:	e8 1f f0 fd ff       	call   f010cb9d <sys_calculate_free_frames>
f012db7e:	89 c2                	mov    %eax,%edx
f012db80:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012db83:	29 c2                	sub    %eax,%edx
f012db85:	89 d0                	mov    %edx,%eax
f012db87:	3d 00 14 00 00       	cmp    $0x1400,%eax
f012db8c:	74 17                	je     f012dba5 <test_krealloc+0x1ea2>
			panic("krealloc: pages in memory are not freed correctly");
f012db8e:	83 ec 04             	sub    $0x4,%esp
f012db91:	68 50 c8 13 f0       	push   $0xf013c850
f012db96:	68 d4 10 00 00       	push   $0x10d4
f012db9b:	68 7a b3 13 f0       	push   $0xf013b37a
f012dba0:	e8 60 26 fd ff       	call   f0100205 <_panic>

		//Test kfree after krealloc 1st 2 MB to 10 MB
		freeFrames = sys_calculate_free_frames();
f012dba5:	e8 f3 ef fd ff       	call   f010cb9d <sys_calculate_free_frames>
f012dbaa:	89 45 b8             	mov    %eax,-0x48(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f012dbad:	e8 16 62 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012dbb2:	89 85 dc fe ff ff    	mov    %eax,-0x124(%ebp)
		kfree(ptr_allocations[4]);
f012dbb8:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f012dbbe:	83 ec 0c             	sub    $0xc,%esp
f012dbc1:	50                   	push   %eax
f012dbc2:	e8 89 9d fd ff       	call   f0107950 <kfree>
f012dbc7:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0)
f012dbca:	e8 f9 61 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012dbcf:	3b 85 dc fe ff ff    	cmp    -0x124(%ebp),%eax
f012dbd5:	74 17                	je     f012dbee <test_krealloc+0x1eeb>
			panic(
f012dbd7:	83 ec 04             	sub    $0x4,%esp
f012dbda:	68 94 b3 13 f0       	push   $0xf013b394
f012dbdf:	68 dc 10 00 00       	push   $0x10dc
f012dbe4:	68 7a b3 13 f0       	push   $0xf013b37a
f012dbe9:	e8 17 26 fd ff       	call   f0100205 <_panic>
					"Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((sys_calculate_free_frames() - freeFrames) != 10 * Mega / PAGE_SIZE)
f012dbee:	e8 aa ef fd ff       	call   f010cb9d <sys_calculate_free_frames>
f012dbf3:	89 c2                	mov    %eax,%edx
f012dbf5:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012dbf8:	29 c2                	sub    %eax,%edx
f012dbfa:	89 d0                	mov    %edx,%eax
f012dbfc:	3d 00 0a 00 00       	cmp    $0xa00,%eax
f012dc01:	74 17                	je     f012dc1a <test_krealloc+0x1f17>
			panic("krealloc: pages in memory are not freed correctly");
f012dc03:	83 ec 04             	sub    $0x4,%esp
f012dc06:	68 50 c8 13 f0       	push   $0xf013c850
f012dc0b:	68 de 10 00 00       	push   $0x10de
f012dc10:	68 7a b3 13 f0       	push   $0xf013b37a
f012dc15:	e8 eb 25 fd ff       	call   f0100205 <_panic>

		//check tables	[15%]
		{
			long long va;
			for (va = KERNEL_HEAP_START; va < (long long) KERNEL_HEAP_MAX; va +=
f012dc1a:	c7 45 d0 00 00 00 f6 	movl   $0xf6000000,-0x30(%ebp)
f012dc21:	c7 45 d4 00 00 00 00 	movl   $0x0,-0x2c(%ebp)
f012dc28:	eb 48                	jmp    f012dc72 <test_krealloc+0x1f6f>
			PTSIZE)
			{
				uint32 *ptr_table;
				get_page_table(ptr_page_directory,  (uint32) va,
f012dc2a:	8b 55 d0             	mov    -0x30(%ebp),%edx
f012dc2d:	a1 3c 26 78 f0       	mov    0xf078263c,%eax
f012dc32:	83 ec 04             	sub    $0x4,%esp
f012dc35:	8d 8d b0 fd ff ff    	lea    -0x250(%ebp),%ecx
f012dc3b:	51                   	push   %ecx
f012dc3c:	52                   	push   %edx
f012dc3d:	50                   	push   %eax
f012dc3e:	e8 6e 8e fd ff       	call   f0106ab1 <get_page_table>
f012dc43:	83 c4 10             	add    $0x10,%esp
						&ptr_table);
				if (ptr_table == NULL) {
f012dc46:	8b 85 b0 fd ff ff    	mov    -0x250(%ebp),%eax
f012dc4c:	85 c0                	test   %eax,%eax
f012dc4e:	75 17                	jne    f012dc67 <test_krealloc+0x1f64>
					panic(
f012dc50:	83 ec 04             	sub    $0x4,%esp
f012dc53:	68 7c bc 13 f0       	push   $0xf013bc7c
f012dc58:	68 eb 10 00 00       	push   $0x10eb
f012dc5d:	68 7a b3 13 f0       	push   $0xf013b37a
f012dc62:	e8 9e 25 fd ff       	call   f0100205 <_panic>
			panic("krealloc: pages in memory are not freed correctly");

		//check tables	[15%]
		{
			long long va;
			for (va = KERNEL_HEAP_START; va < (long long) KERNEL_HEAP_MAX; va +=
f012dc67:	81 45 d0 00 00 40 00 	addl   $0x400000,-0x30(%ebp)
f012dc6e:	83 55 d4 00          	adcl   $0x0,-0x2c(%ebp)
f012dc72:	83 7d d4 00          	cmpl   $0x0,-0x2c(%ebp)
f012dc76:	78 b2                	js     f012dc2a <test_krealloc+0x1f27>
f012dc78:	83 7d d4 00          	cmpl   $0x0,-0x2c(%ebp)
f012dc7c:	7f 09                	jg     f012dc87 <test_krealloc+0x1f84>
f012dc7e:	81 7d d0 ff ef ff ff 	cmpl   $0xffffefff,-0x30(%ebp)
f012dc85:	76 a3                	jbe    f012dc2a <test_krealloc+0x1f27>
			}
		}

	}

	cprintf("\b\b\b100%\n");
f012dc87:	83 ec 0c             	sub    $0xc,%esp
f012dc8a:	68 5e b5 13 f0       	push   $0xf013b55e
f012dc8f:	e8 7a 30 fd ff       	call   f0100d0e <cprintf>
f012dc94:	83 c4 10             	add    $0x10,%esp

	cprintf("\nCongratulations!! test krealloc completed successfully.\n");
f012dc97:	83 ec 0c             	sub    $0xc,%esp
f012dc9a:	68 ec cb 13 f0       	push   $0xf013cbec
f012dc9f:	e8 6a 30 fd ff       	call   f0100d0e <cprintf>
f012dca4:	83 c4 10             	add    $0x10,%esp
	return 0;
f012dca7:	b8 00 00 00 00       	mov    $0x0,%eax
}
f012dcac:	8d 65 f8             	lea    -0x8(%ebp),%esp
f012dcaf:	5b                   	pop    %ebx
f012dcb0:	5f                   	pop    %edi
f012dcb1:	5d                   	pop    %ebp
f012dcb2:	c3                   	ret    

f012dcb3 <test_krealloc_BF>:


int test_krealloc_BF() {
f012dcb3:	55                   	push   %ebp
f012dcb4:	89 e5                	mov    %esp,%ebp
f012dcb6:	57                   	push   %edi
f012dcb7:	53                   	push   %ebx
f012dcb8:	81 ec 60 02 00 00    	sub    $0x260,%esp
	cprintf("==============================================\n");
f012dcbe:	83 ec 0c             	sub    $0xc,%esp
f012dcc1:	68 bc b2 13 f0       	push   $0xf013b2bc
f012dcc6:	e8 43 30 fd ff       	call   f0100d0e <cprintf>
f012dccb:	83 c4 10             	add    $0x10,%esp
	cprintf(
f012dcce:	83 ec 0c             	sub    $0xc,%esp
f012dcd1:	68 ec b2 13 f0       	push   $0xf013b2ec
f012dcd6:	e8 33 30 fd ff       	call   f0100d0e <cprintf>
f012dcdb:	83 c4 10             	add    $0x10,%esp
			"MAKE SURE to have a FRESH RUN for this test\n(i.e. don't run any program/test before it)\n");
	cprintf("==============================================\n");
f012dcde:	83 ec 0c             	sub    $0xc,%esp
f012dce1:	68 bc b2 13 f0       	push   $0xf013b2bc
f012dce6:	e8 23 30 fd ff       	call   f0100d0e <cprintf>
f012dceb:	83 c4 10             	add    $0x10,%esp
	char minByte = 1 << 7;
f012dcee:	c6 45 cf 80          	movb   $0x80,-0x31(%ebp)
	char maxByte = 0x7F;
f012dcf2:	c6 45 ce 7f          	movb   $0x7f,-0x32(%ebp)
	short minShort = 1 << 15;
f012dcf6:	66 c7 45 cc 00 80    	movw   $0x8000,-0x34(%ebp)
	short maxShort = 0x7FFF;
f012dcfc:	66 c7 45 ca ff 7f    	movw   $0x7fff,-0x36(%ebp)
	int minInt = 1 << 31;
f012dd02:	c7 45 c4 00 00 00 80 	movl   $0x80000000,-0x3c(%ebp)
	int maxInt = 0x7FFFFFFF;
f012dd09:	c7 45 c0 ff ff ff 7f 	movl   $0x7fffffff,-0x40(%ebp)
	int *intArr;
	struct MyStruct *structArr;
	int lastIndexOfByte, lastIndexOfByte2, lastIndexOfShort, lastIndexOfShort2,
			lastIndexOfInt, lastIndexOfStruct;
	//[1] Test calling krealloc with VA = NULL. It should call malloc
	void* ptr_allocations[20] = { 0 };
f012dd10:	8d 95 40 fe ff ff    	lea    -0x1c0(%ebp),%edx
f012dd16:	b9 14 00 00 00       	mov    $0x14,%ecx
f012dd1b:	b8 00 00 00 00       	mov    $0x0,%eax
f012dd20:	89 d7                	mov    %edx,%edi
f012dd22:	f3 ab                	rep stos %eax,%es:(%edi)
	char* ptr;
	void* newAddress = NULL;
f012dd24:	c7 45 bc 00 00 00 00 	movl   $0x0,-0x44(%ebp)
	int freeDiskFrames;


	int lastIndices[20] = { 0 };
f012dd2b:	8d 95 f0 fd ff ff    	lea    -0x210(%ebp),%edx
f012dd31:	b9 14 00 00 00       	mov    $0x14,%ecx
f012dd36:	b8 00 00 00 00       	mov    $0x0,%eax
f012dd3b:	89 d7                	mov    %edx,%edi
f012dd3d:	f3 ab                	rep stos %eax,%es:(%edi)
	int sums[20] = { 0 };
f012dd3f:	8d 95 a0 fd ff ff    	lea    -0x260(%ebp),%edx
f012dd45:	b9 14 00 00 00       	mov    $0x14,%ecx
f012dd4a:	b8 00 00 00 00       	mov    $0x0,%eax
f012dd4f:	89 d7                	mov    %edx,%edi
f012dd51:	f3 ab                	rep stos %eax,%es:(%edi)
	int freeFrames;
	//[1] Allocate all
	{
		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames();
f012dd53:	e8 45 ee fd ff       	call   f010cb9d <sys_calculate_free_frames>
f012dd58:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[0] = krealloc(NULL, 1 * Mega - kilo);
f012dd5b:	83 ec 08             	sub    $0x8,%esp
f012dd5e:	68 00 fc 0f 00       	push   $0xffc00
f012dd63:	6a 00                	push   $0x0
f012dd65:	e8 db 9d fd ff       	call   f0107b45 <krealloc>
f012dd6a:	83 c4 10             	add    $0x10,%esp
f012dd6d:	89 85 40 fe ff ff    	mov    %eax,-0x1c0(%ebp)
		if ((uint32) ptr_allocations[0] < (KERNEL_HEAP_START))
f012dd73:	8b 85 40 fe ff ff    	mov    -0x1c0(%ebp),%eax
f012dd79:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012dd7e:	77 17                	ja     f012dd97 <test_krealloc_BF+0xe4>
			panic("krealloc: Wrong start address for the allocated space... ");
f012dd80:	83 ec 04             	sub    $0x4,%esp
f012dd83:	68 20 c6 13 f0       	push   $0xf013c620
f012dd88:	68 1a 11 00 00       	push   $0x111a
f012dd8d:	68 7a b3 13 f0       	push   $0xf013b37a
f012dd92:	e8 6e 24 fd ff       	call   f0100205 <_panic>
		if ((uint32) ptr_allocations[0] != ACTUAL_START)
f012dd97:	8b 85 40 fe ff ff    	mov    -0x1c0(%ebp),%eax
f012dd9d:	89 c1                	mov    %eax,%ecx
f012dd9f:	c7 45 b4 00 10 00 00 	movl   $0x1000,-0x4c(%ebp)
f012dda6:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f012dda9:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012ddae:	89 45 b0             	mov    %eax,-0x50(%ebp)
f012ddb1:	8b 45 b0             	mov    -0x50(%ebp),%eax
f012ddb4:	ba 00 00 00 00       	mov    $0x0,%edx
f012ddb9:	f7 75 b4             	divl   -0x4c(%ebp)
f012ddbc:	8b 45 b0             	mov    -0x50(%ebp),%eax
f012ddbf:	29 d0                	sub    %edx,%eax
f012ddc1:	89 c3                	mov    %eax,%ebx
f012ddc3:	c7 45 ac 00 10 00 00 	movl   $0x1000,-0x54(%ebp)
f012ddca:	a0 40 26 78 f0       	mov    0xf0782640,%al
f012ddcf:	0f b6 d0             	movzbl %al,%edx
f012ddd2:	8b 45 ac             	mov    -0x54(%ebp),%eax
f012ddd5:	01 d0                	add    %edx,%eax
f012ddd7:	48                   	dec    %eax
f012ddd8:	89 45 a8             	mov    %eax,-0x58(%ebp)
f012dddb:	8b 45 a8             	mov    -0x58(%ebp),%eax
f012ddde:	ba 00 00 00 00       	mov    $0x0,%edx
f012dde3:	f7 75 ac             	divl   -0x54(%ebp)
f012dde6:	8b 45 a8             	mov    -0x58(%ebp),%eax
f012dde9:	29 d0                	sub    %edx,%eax
f012ddeb:	01 c3                	add    %eax,%ebx
f012dded:	c7 45 a4 00 10 00 00 	movl   $0x1000,-0x5c(%ebp)
f012ddf4:	a0 40 26 78 f0       	mov    0xf0782640,%al
f012ddf9:	0f b6 c0             	movzbl %al,%eax
f012ddfc:	c1 e0 04             	shl    $0x4,%eax
f012ddff:	89 c2                	mov    %eax,%edx
f012de01:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f012de04:	01 d0                	add    %edx,%eax
f012de06:	48                   	dec    %eax
f012de07:	89 45 a0             	mov    %eax,-0x60(%ebp)
f012de0a:	8b 45 a0             	mov    -0x60(%ebp),%eax
f012de0d:	ba 00 00 00 00       	mov    $0x0,%edx
f012de12:	f7 75 a4             	divl   -0x5c(%ebp)
f012de15:	8b 45 a0             	mov    -0x60(%ebp),%eax
f012de18:	29 d0                	sub    %edx,%eax
f012de1a:	01 d8                	add    %ebx,%eax
f012de1c:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f012de21:	39 c1                	cmp    %eax,%ecx
f012de23:	74 17                	je     f012de3c <test_krealloc_BF+0x189>
			panic("krealloc: Wrong start address for allocated space");
f012de25:	83 ec 04             	sub    $0x4,%esp
f012de28:	68 5c c6 13 f0       	push   $0xf013c65c
f012de2d:	68 1c 11 00 00       	push   $0x111c
f012de32:	68 7a b3 13 f0       	push   $0xf013b37a
f012de37:	e8 c9 23 fd ff       	call   f0100205 <_panic>

		if ((freeFrames - sys_calculate_free_frames()) != 256)
f012de3c:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012de3f:	e8 59 ed fd ff       	call   f010cb9d <sys_calculate_free_frames>
f012de44:	29 c3                	sub    %eax,%ebx
f012de46:	89 d8                	mov    %ebx,%eax
f012de48:	3d 00 01 00 00       	cmp    $0x100,%eax
f012de4d:	74 17                	je     f012de66 <test_krealloc_BF+0x1b3>
			panic("krealloc: Wrong allocation: ");
f012de4f:	83 ec 04             	sub    $0x4,%esp
f012de52:	68 8e c6 13 f0       	push   $0xf013c68e
f012de57:	68 1f 11 00 00       	push   $0x111f
f012de5c:	68 7a b3 13 f0       	push   $0xf013b37a
f012de61:	e8 9f 23 fd ff       	call   f0100205 <_panic>

		lastIndices[0] = (1 * Mega - kilo) / sizeof(char) - 1;
f012de66:	c7 85 f0 fd ff ff ff 	movl   $0xffbff,-0x210(%ebp)
f012de6d:	fb 0f 00 

		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames();
f012de70:	e8 28 ed fd ff       	call   f010cb9d <sys_calculate_free_frames>
f012de75:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[1] = krealloc(NULL, 1 * Mega - kilo);
f012de78:	83 ec 08             	sub    $0x8,%esp
f012de7b:	68 00 fc 0f 00       	push   $0xffc00
f012de80:	6a 00                	push   $0x0
f012de82:	e8 be 9c fd ff       	call   f0107b45 <krealloc>
f012de87:	83 c4 10             	add    $0x10,%esp
f012de8a:	89 85 44 fe ff ff    	mov    %eax,-0x1bc(%ebp)
		if ((uint32) ptr_allocations[1] < (KERNEL_HEAP_START + 1 * Mega))
f012de90:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f012de96:	3d ff ff 0f f6       	cmp    $0xf60fffff,%eax
f012de9b:	77 17                	ja     f012deb4 <test_krealloc_BF+0x201>
			panic("krealloc: Wrong start address for the allocated space... ");
f012de9d:	83 ec 04             	sub    $0x4,%esp
f012dea0:	68 20 c6 13 f0       	push   $0xf013c620
f012dea5:	68 27 11 00 00       	push   $0x1127
f012deaa:	68 7a b3 13 f0       	push   $0xf013b37a
f012deaf:	e8 51 23 fd ff       	call   f0100205 <_panic>
		if ((uint32) ptr_allocations[1] != ACTUAL_START + (1 * Mega))
f012deb4:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f012deba:	89 c1                	mov    %eax,%ecx
f012debc:	c7 45 9c 00 10 00 00 	movl   $0x1000,-0x64(%ebp)
f012dec3:	8b 45 9c             	mov    -0x64(%ebp),%eax
f012dec6:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012decb:	89 45 98             	mov    %eax,-0x68(%ebp)
f012dece:	8b 45 98             	mov    -0x68(%ebp),%eax
f012ded1:	ba 00 00 00 00       	mov    $0x0,%edx
f012ded6:	f7 75 9c             	divl   -0x64(%ebp)
f012ded9:	8b 45 98             	mov    -0x68(%ebp),%eax
f012dedc:	29 d0                	sub    %edx,%eax
f012dede:	89 c3                	mov    %eax,%ebx
f012dee0:	c7 45 94 00 10 00 00 	movl   $0x1000,-0x6c(%ebp)
f012dee7:	a0 40 26 78 f0       	mov    0xf0782640,%al
f012deec:	0f b6 d0             	movzbl %al,%edx
f012deef:	8b 45 94             	mov    -0x6c(%ebp),%eax
f012def2:	01 d0                	add    %edx,%eax
f012def4:	48                   	dec    %eax
f012def5:	89 45 90             	mov    %eax,-0x70(%ebp)
f012def8:	8b 45 90             	mov    -0x70(%ebp),%eax
f012defb:	ba 00 00 00 00       	mov    $0x0,%edx
f012df00:	f7 75 94             	divl   -0x6c(%ebp)
f012df03:	8b 45 90             	mov    -0x70(%ebp),%eax
f012df06:	29 d0                	sub    %edx,%eax
f012df08:	01 c3                	add    %eax,%ebx
f012df0a:	c7 45 8c 00 10 00 00 	movl   $0x1000,-0x74(%ebp)
f012df11:	a0 40 26 78 f0       	mov    0xf0782640,%al
f012df16:	0f b6 c0             	movzbl %al,%eax
f012df19:	c1 e0 04             	shl    $0x4,%eax
f012df1c:	89 c2                	mov    %eax,%edx
f012df1e:	8b 45 8c             	mov    -0x74(%ebp),%eax
f012df21:	01 d0                	add    %edx,%eax
f012df23:	48                   	dec    %eax
f012df24:	89 45 88             	mov    %eax,-0x78(%ebp)
f012df27:	8b 45 88             	mov    -0x78(%ebp),%eax
f012df2a:	ba 00 00 00 00       	mov    $0x0,%edx
f012df2f:	f7 75 8c             	divl   -0x74(%ebp)
f012df32:	8b 45 88             	mov    -0x78(%ebp),%eax
f012df35:	29 d0                	sub    %edx,%eax
f012df37:	01 d8                	add    %ebx,%eax
f012df39:	2d 00 c0 ef 09       	sub    $0x9efc000,%eax
f012df3e:	39 c1                	cmp    %eax,%ecx
f012df40:	74 17                	je     f012df59 <test_krealloc_BF+0x2a6>
			panic("krealloc: Wrong start address for allocated space");
f012df42:	83 ec 04             	sub    $0x4,%esp
f012df45:	68 5c c6 13 f0       	push   $0xf013c65c
f012df4a:	68 29 11 00 00       	push   $0x1129
f012df4f:	68 7a b3 13 f0       	push   $0xf013b37a
f012df54:	e8 ac 22 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256)
f012df59:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012df5c:	e8 3c ec fd ff       	call   f010cb9d <sys_calculate_free_frames>
f012df61:	29 c3                	sub    %eax,%ebx
f012df63:	89 d8                	mov    %ebx,%eax
f012df65:	3d 00 01 00 00       	cmp    $0x100,%eax
f012df6a:	74 17                	je     f012df83 <test_krealloc_BF+0x2d0>
			panic("krealloc: Wrong allocation: ");
f012df6c:	83 ec 04             	sub    $0x4,%esp
f012df6f:	68 8e c6 13 f0       	push   $0xf013c68e
f012df74:	68 2b 11 00 00       	push   $0x112b
f012df79:	68 7a b3 13 f0       	push   $0xf013b37a
f012df7e:	e8 82 22 fd ff       	call   f0100205 <_panic>

		lastIndices[1] = (1 * Mega - kilo) / sizeof(char) - 1;
f012df83:	c7 85 f4 fd ff ff ff 	movl   $0xffbff,-0x20c(%ebp)
f012df8a:	fb 0f 00 

		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames();
f012df8d:	e8 0b ec fd ff       	call   f010cb9d <sys_calculate_free_frames>
f012df92:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[2] = krealloc(NULL, 1 * Mega - kilo);
f012df95:	83 ec 08             	sub    $0x8,%esp
f012df98:	68 00 fc 0f 00       	push   $0xffc00
f012df9d:	6a 00                	push   $0x0
f012df9f:	e8 a1 9b fd ff       	call   f0107b45 <krealloc>
f012dfa4:	83 c4 10             	add    $0x10,%esp
f012dfa7:	89 85 48 fe ff ff    	mov    %eax,-0x1b8(%ebp)
		if ((uint32) ptr_allocations[2] < (KERNEL_HEAP_START + 2 * Mega))
f012dfad:	8b 85 48 fe ff ff    	mov    -0x1b8(%ebp),%eax
f012dfb3:	3d ff ff 1f f6       	cmp    $0xf61fffff,%eax
f012dfb8:	77 17                	ja     f012dfd1 <test_krealloc_BF+0x31e>
			panic("krealloc: Wrong start address for the allocated space... ");
f012dfba:	83 ec 04             	sub    $0x4,%esp
f012dfbd:	68 20 c6 13 f0       	push   $0xf013c620
f012dfc2:	68 33 11 00 00       	push   $0x1133
f012dfc7:	68 7a b3 13 f0       	push   $0xf013b37a
f012dfcc:	e8 34 22 fd ff       	call   f0100205 <_panic>
		if ((uint32) ptr_allocations[2] != ACTUAL_START + (2 * Mega))
f012dfd1:	8b 85 48 fe ff ff    	mov    -0x1b8(%ebp),%eax
f012dfd7:	89 c1                	mov    %eax,%ecx
f012dfd9:	c7 45 84 00 10 00 00 	movl   $0x1000,-0x7c(%ebp)
f012dfe0:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012dfe3:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012dfe8:	89 45 80             	mov    %eax,-0x80(%ebp)
f012dfeb:	8b 45 80             	mov    -0x80(%ebp),%eax
f012dfee:	ba 00 00 00 00       	mov    $0x0,%edx
f012dff3:	f7 75 84             	divl   -0x7c(%ebp)
f012dff6:	8b 45 80             	mov    -0x80(%ebp),%eax
f012dff9:	29 d0                	sub    %edx,%eax
f012dffb:	89 c3                	mov    %eax,%ebx
f012dffd:	c7 85 7c ff ff ff 00 	movl   $0x1000,-0x84(%ebp)
f012e004:	10 00 00 
f012e007:	a0 40 26 78 f0       	mov    0xf0782640,%al
f012e00c:	0f b6 d0             	movzbl %al,%edx
f012e00f:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f012e015:	01 d0                	add    %edx,%eax
f012e017:	48                   	dec    %eax
f012e018:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)
f012e01e:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f012e024:	ba 00 00 00 00       	mov    $0x0,%edx
f012e029:	f7 b5 7c ff ff ff    	divl   -0x84(%ebp)
f012e02f:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f012e035:	29 d0                	sub    %edx,%eax
f012e037:	01 c3                	add    %eax,%ebx
f012e039:	c7 85 74 ff ff ff 00 	movl   $0x1000,-0x8c(%ebp)
f012e040:	10 00 00 
f012e043:	a0 40 26 78 f0       	mov    0xf0782640,%al
f012e048:	0f b6 c0             	movzbl %al,%eax
f012e04b:	c1 e0 04             	shl    $0x4,%eax
f012e04e:	89 c2                	mov    %eax,%edx
f012e050:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f012e056:	01 d0                	add    %edx,%eax
f012e058:	48                   	dec    %eax
f012e059:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
f012e05f:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f012e065:	ba 00 00 00 00       	mov    $0x0,%edx
f012e06a:	f7 b5 74 ff ff ff    	divl   -0x8c(%ebp)
f012e070:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f012e076:	29 d0                	sub    %edx,%eax
f012e078:	01 d8                	add    %ebx,%eax
f012e07a:	2d 00 c0 df 09       	sub    $0x9dfc000,%eax
f012e07f:	39 c1                	cmp    %eax,%ecx
f012e081:	74 17                	je     f012e09a <test_krealloc_BF+0x3e7>
			panic("krealloc: Wrong start address for allocated space");
f012e083:	83 ec 04             	sub    $0x4,%esp
f012e086:	68 5c c6 13 f0       	push   $0xf013c65c
f012e08b:	68 35 11 00 00       	push   $0x1135
f012e090:	68 7a b3 13 f0       	push   $0xf013b37a
f012e095:	e8 6b 21 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256)
f012e09a:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012e09d:	e8 fb ea fd ff       	call   f010cb9d <sys_calculate_free_frames>
f012e0a2:	29 c3                	sub    %eax,%ebx
f012e0a4:	89 d8                	mov    %ebx,%eax
f012e0a6:	3d 00 01 00 00       	cmp    $0x100,%eax
f012e0ab:	74 17                	je     f012e0c4 <test_krealloc_BF+0x411>
			panic("krealloc: Wrong allocation: ");
f012e0ad:	83 ec 04             	sub    $0x4,%esp
f012e0b0:	68 8e c6 13 f0       	push   $0xf013c68e
f012e0b5:	68 37 11 00 00       	push   $0x1137
f012e0ba:	68 7a b3 13 f0       	push   $0xf013b37a
f012e0bf:	e8 41 21 fd ff       	call   f0100205 <_panic>
		lastIndices[2] = (1 * Mega - kilo) / sizeof(int) - 1;
f012e0c4:	c7 85 f8 fd ff ff ff 	movl   $0x3feff,-0x208(%ebp)
f012e0cb:	fe 03 00 

		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames();
f012e0ce:	e8 ca ea fd ff       	call   f010cb9d <sys_calculate_free_frames>
f012e0d3:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[3] = krealloc(NULL, 1 * Mega - kilo);
f012e0d6:	83 ec 08             	sub    $0x8,%esp
f012e0d9:	68 00 fc 0f 00       	push   $0xffc00
f012e0de:	6a 00                	push   $0x0
f012e0e0:	e8 60 9a fd ff       	call   f0107b45 <krealloc>
f012e0e5:	83 c4 10             	add    $0x10,%esp
f012e0e8:	89 85 4c fe ff ff    	mov    %eax,-0x1b4(%ebp)
		if ((uint32) ptr_allocations[3] < (KERNEL_HEAP_START + 3 * Mega))
f012e0ee:	8b 85 4c fe ff ff    	mov    -0x1b4(%ebp),%eax
f012e0f4:	3d ff ff 2f f6       	cmp    $0xf62fffff,%eax
f012e0f9:	77 17                	ja     f012e112 <test_krealloc_BF+0x45f>
			panic("krealloc: Wrong start address for the allocated space... ");
f012e0fb:	83 ec 04             	sub    $0x4,%esp
f012e0fe:	68 20 c6 13 f0       	push   $0xf013c620
f012e103:	68 3e 11 00 00       	push   $0x113e
f012e108:	68 7a b3 13 f0       	push   $0xf013b37a
f012e10d:	e8 f3 20 fd ff       	call   f0100205 <_panic>
		if ((uint32) ptr_allocations[3] != ACTUAL_START + (3 * Mega))
f012e112:	8b 85 4c fe ff ff    	mov    -0x1b4(%ebp),%eax
f012e118:	89 c1                	mov    %eax,%ecx
f012e11a:	c7 85 6c ff ff ff 00 	movl   $0x1000,-0x94(%ebp)
f012e121:	10 00 00 
f012e124:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f012e12a:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012e12f:	89 85 68 ff ff ff    	mov    %eax,-0x98(%ebp)
f012e135:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f012e13b:	ba 00 00 00 00       	mov    $0x0,%edx
f012e140:	f7 b5 6c ff ff ff    	divl   -0x94(%ebp)
f012e146:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f012e14c:	29 d0                	sub    %edx,%eax
f012e14e:	89 c3                	mov    %eax,%ebx
f012e150:	c7 85 64 ff ff ff 00 	movl   $0x1000,-0x9c(%ebp)
f012e157:	10 00 00 
f012e15a:	a0 40 26 78 f0       	mov    0xf0782640,%al
f012e15f:	0f b6 d0             	movzbl %al,%edx
f012e162:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f012e168:	01 d0                	add    %edx,%eax
f012e16a:	48                   	dec    %eax
f012e16b:	89 85 60 ff ff ff    	mov    %eax,-0xa0(%ebp)
f012e171:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f012e177:	ba 00 00 00 00       	mov    $0x0,%edx
f012e17c:	f7 b5 64 ff ff ff    	divl   -0x9c(%ebp)
f012e182:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f012e188:	29 d0                	sub    %edx,%eax
f012e18a:	01 c3                	add    %eax,%ebx
f012e18c:	c7 85 5c ff ff ff 00 	movl   $0x1000,-0xa4(%ebp)
f012e193:	10 00 00 
f012e196:	a0 40 26 78 f0       	mov    0xf0782640,%al
f012e19b:	0f b6 c0             	movzbl %al,%eax
f012e19e:	c1 e0 04             	shl    $0x4,%eax
f012e1a1:	89 c2                	mov    %eax,%edx
f012e1a3:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f012e1a9:	01 d0                	add    %edx,%eax
f012e1ab:	48                   	dec    %eax
f012e1ac:	89 85 58 ff ff ff    	mov    %eax,-0xa8(%ebp)
f012e1b2:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f012e1b8:	ba 00 00 00 00       	mov    $0x0,%edx
f012e1bd:	f7 b5 5c ff ff ff    	divl   -0xa4(%ebp)
f012e1c3:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f012e1c9:	29 d0                	sub    %edx,%eax
f012e1cb:	01 d8                	add    %ebx,%eax
f012e1cd:	2d 00 c0 cf 09       	sub    $0x9cfc000,%eax
f012e1d2:	39 c1                	cmp    %eax,%ecx
f012e1d4:	74 17                	je     f012e1ed <test_krealloc_BF+0x53a>
			panic("krealloc: Wrong start address for allocated space");
f012e1d6:	83 ec 04             	sub    $0x4,%esp
f012e1d9:	68 5c c6 13 f0       	push   $0xf013c65c
f012e1de:	68 40 11 00 00       	push   $0x1140
f012e1e3:	68 7a b3 13 f0       	push   $0xf013b37a
f012e1e8:	e8 18 20 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256)
f012e1ed:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012e1f0:	e8 a8 e9 fd ff       	call   f010cb9d <sys_calculate_free_frames>
f012e1f5:	29 c3                	sub    %eax,%ebx
f012e1f7:	89 d8                	mov    %ebx,%eax
f012e1f9:	3d 00 01 00 00       	cmp    $0x100,%eax
f012e1fe:	74 17                	je     f012e217 <test_krealloc_BF+0x564>
			panic("krealloc: Wrong allocation: ");
f012e200:	83 ec 04             	sub    $0x4,%esp
f012e203:	68 8e c6 13 f0       	push   $0xf013c68e
f012e208:	68 42 11 00 00       	push   $0x1142
f012e20d:	68 7a b3 13 f0       	push   $0xf013b37a
f012e212:	e8 ee 1f fd ff       	call   f0100205 <_panic>
		lastIndices[3] = (1 * Mega - kilo) / sizeof(int) - 1;
f012e217:	c7 85 fc fd ff ff ff 	movl   $0x3feff,-0x204(%ebp)
f012e21e:	fe 03 00 

		//Allocate 2 MB
		freeFrames = sys_calculate_free_frames();
f012e221:	e8 77 e9 fd ff       	call   f010cb9d <sys_calculate_free_frames>
f012e226:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[4] = krealloc(NULL, 2 * Mega - kilo);
f012e229:	83 ec 08             	sub    $0x8,%esp
f012e22c:	68 00 fc 1f 00       	push   $0x1ffc00
f012e231:	6a 00                	push   $0x0
f012e233:	e8 0d 99 fd ff       	call   f0107b45 <krealloc>
f012e238:	83 c4 10             	add    $0x10,%esp
f012e23b:	89 85 50 fe ff ff    	mov    %eax,-0x1b0(%ebp)
		if ((uint32) ptr_allocations[4] < (KERNEL_HEAP_START + 4 * Mega))
f012e241:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f012e247:	3d ff ff 3f f6       	cmp    $0xf63fffff,%eax
f012e24c:	77 17                	ja     f012e265 <test_krealloc_BF+0x5b2>
			panic("krealloc: Wrong start address for the allocated space... ");
f012e24e:	83 ec 04             	sub    $0x4,%esp
f012e251:	68 20 c6 13 f0       	push   $0xf013c620
f012e256:	68 49 11 00 00       	push   $0x1149
f012e25b:	68 7a b3 13 f0       	push   $0xf013b37a
f012e260:	e8 a0 1f fd ff       	call   f0100205 <_panic>
		if ((uint32) ptr_allocations[4] != ACTUAL_START + (4 * Mega))
f012e265:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f012e26b:	89 c1                	mov    %eax,%ecx
f012e26d:	c7 85 54 ff ff ff 00 	movl   $0x1000,-0xac(%ebp)
f012e274:	10 00 00 
f012e277:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f012e27d:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012e282:	89 85 50 ff ff ff    	mov    %eax,-0xb0(%ebp)
f012e288:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f012e28e:	ba 00 00 00 00       	mov    $0x0,%edx
f012e293:	f7 b5 54 ff ff ff    	divl   -0xac(%ebp)
f012e299:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f012e29f:	29 d0                	sub    %edx,%eax
f012e2a1:	89 c3                	mov    %eax,%ebx
f012e2a3:	c7 85 4c ff ff ff 00 	movl   $0x1000,-0xb4(%ebp)
f012e2aa:	10 00 00 
f012e2ad:	a0 40 26 78 f0       	mov    0xf0782640,%al
f012e2b2:	0f b6 d0             	movzbl %al,%edx
f012e2b5:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f012e2bb:	01 d0                	add    %edx,%eax
f012e2bd:	48                   	dec    %eax
f012e2be:	89 85 48 ff ff ff    	mov    %eax,-0xb8(%ebp)
f012e2c4:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f012e2ca:	ba 00 00 00 00       	mov    $0x0,%edx
f012e2cf:	f7 b5 4c ff ff ff    	divl   -0xb4(%ebp)
f012e2d5:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f012e2db:	29 d0                	sub    %edx,%eax
f012e2dd:	01 c3                	add    %eax,%ebx
f012e2df:	c7 85 44 ff ff ff 00 	movl   $0x1000,-0xbc(%ebp)
f012e2e6:	10 00 00 
f012e2e9:	a0 40 26 78 f0       	mov    0xf0782640,%al
f012e2ee:	0f b6 c0             	movzbl %al,%eax
f012e2f1:	c1 e0 04             	shl    $0x4,%eax
f012e2f4:	89 c2                	mov    %eax,%edx
f012e2f6:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f012e2fc:	01 d0                	add    %edx,%eax
f012e2fe:	48                   	dec    %eax
f012e2ff:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%ebp)
f012e305:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f012e30b:	ba 00 00 00 00       	mov    $0x0,%edx
f012e310:	f7 b5 44 ff ff ff    	divl   -0xbc(%ebp)
f012e316:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f012e31c:	29 d0                	sub    %edx,%eax
f012e31e:	01 d8                	add    %ebx,%eax
f012e320:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
f012e325:	39 c1                	cmp    %eax,%ecx
f012e327:	74 17                	je     f012e340 <test_krealloc_BF+0x68d>
			panic("krealloc: Wrong start address for allocated space");
f012e329:	83 ec 04             	sub    $0x4,%esp
f012e32c:	68 5c c6 13 f0       	push   $0xf013c65c
f012e331:	68 4b 11 00 00       	push   $0x114b
f012e336:	68 7a b3 13 f0       	push   $0xf013b37a
f012e33b:	e8 c5 1e fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512)
f012e340:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012e343:	e8 55 e8 fd ff       	call   f010cb9d <sys_calculate_free_frames>
f012e348:	29 c3                	sub    %eax,%ebx
f012e34a:	89 d8                	mov    %ebx,%eax
f012e34c:	3d 00 02 00 00       	cmp    $0x200,%eax
f012e351:	74 17                	je     f012e36a <test_krealloc_BF+0x6b7>
			panic("krealloc: Wrong allocation: ");
f012e353:	83 ec 04             	sub    $0x4,%esp
f012e356:	68 8e c6 13 f0       	push   $0xf013c68e
f012e35b:	68 4d 11 00 00       	push   $0x114d
f012e360:	68 7a b3 13 f0       	push   $0xf013b37a
f012e365:	e8 9b 1e fd ff       	call   f0100205 <_panic>
		lastIndices[4] = (2 * Mega - kilo) / sizeof(short) - 1;
f012e36a:	c7 85 00 fe ff ff ff 	movl   $0xffdff,-0x200(%ebp)
f012e371:	fd 0f 00 

		//Allocate 2 MB
		freeFrames = sys_calculate_free_frames();
f012e374:	e8 24 e8 fd ff       	call   f010cb9d <sys_calculate_free_frames>
f012e379:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[5] = krealloc(NULL, 2 * Mega - kilo);
f012e37c:	83 ec 08             	sub    $0x8,%esp
f012e37f:	68 00 fc 1f 00       	push   $0x1ffc00
f012e384:	6a 00                	push   $0x0
f012e386:	e8 ba 97 fd ff       	call   f0107b45 <krealloc>
f012e38b:	83 c4 10             	add    $0x10,%esp
f012e38e:	89 85 54 fe ff ff    	mov    %eax,-0x1ac(%ebp)
		if ((uint32) ptr_allocations[5] < (KERNEL_HEAP_START + 6 * Mega))
f012e394:	8b 85 54 fe ff ff    	mov    -0x1ac(%ebp),%eax
f012e39a:	3d ff ff 5f f6       	cmp    $0xf65fffff,%eax
f012e39f:	77 17                	ja     f012e3b8 <test_krealloc_BF+0x705>
			panic("krealloc: Wrong start address for the allocated space... ");
f012e3a1:	83 ec 04             	sub    $0x4,%esp
f012e3a4:	68 20 c6 13 f0       	push   $0xf013c620
f012e3a9:	68 54 11 00 00       	push   $0x1154
f012e3ae:	68 7a b3 13 f0       	push   $0xf013b37a
f012e3b3:	e8 4d 1e fd ff       	call   f0100205 <_panic>
		if ((uint32) ptr_allocations[5] != ACTUAL_START + (6 * Mega))
f012e3b8:	8b 85 54 fe ff ff    	mov    -0x1ac(%ebp),%eax
f012e3be:	89 c1                	mov    %eax,%ecx
f012e3c0:	c7 85 3c ff ff ff 00 	movl   $0x1000,-0xc4(%ebp)
f012e3c7:	10 00 00 
f012e3ca:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f012e3d0:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012e3d5:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
f012e3db:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f012e3e1:	ba 00 00 00 00       	mov    $0x0,%edx
f012e3e6:	f7 b5 3c ff ff ff    	divl   -0xc4(%ebp)
f012e3ec:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f012e3f2:	29 d0                	sub    %edx,%eax
f012e3f4:	89 c3                	mov    %eax,%ebx
f012e3f6:	c7 85 34 ff ff ff 00 	movl   $0x1000,-0xcc(%ebp)
f012e3fd:	10 00 00 
f012e400:	a0 40 26 78 f0       	mov    0xf0782640,%al
f012e405:	0f b6 d0             	movzbl %al,%edx
f012e408:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f012e40e:	01 d0                	add    %edx,%eax
f012e410:	48                   	dec    %eax
f012e411:	89 85 30 ff ff ff    	mov    %eax,-0xd0(%ebp)
f012e417:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f012e41d:	ba 00 00 00 00       	mov    $0x0,%edx
f012e422:	f7 b5 34 ff ff ff    	divl   -0xcc(%ebp)
f012e428:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f012e42e:	29 d0                	sub    %edx,%eax
f012e430:	01 c3                	add    %eax,%ebx
f012e432:	c7 85 2c ff ff ff 00 	movl   $0x1000,-0xd4(%ebp)
f012e439:	10 00 00 
f012e43c:	a0 40 26 78 f0       	mov    0xf0782640,%al
f012e441:	0f b6 c0             	movzbl %al,%eax
f012e444:	c1 e0 04             	shl    $0x4,%eax
f012e447:	89 c2                	mov    %eax,%edx
f012e449:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f012e44f:	01 d0                	add    %edx,%eax
f012e451:	48                   	dec    %eax
f012e452:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%ebp)
f012e458:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f012e45e:	ba 00 00 00 00       	mov    $0x0,%edx
f012e463:	f7 b5 2c ff ff ff    	divl   -0xd4(%ebp)
f012e469:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f012e46f:	29 d0                	sub    %edx,%eax
f012e471:	01 d8                	add    %ebx,%eax
f012e473:	2d 00 c0 9f 09       	sub    $0x99fc000,%eax
f012e478:	39 c1                	cmp    %eax,%ecx
f012e47a:	74 17                	je     f012e493 <test_krealloc_BF+0x7e0>
			panic("krealloc: Wrong start address for allocated space");
f012e47c:	83 ec 04             	sub    $0x4,%esp
f012e47f:	68 5c c6 13 f0       	push   $0xf013c65c
f012e484:	68 56 11 00 00       	push   $0x1156
f012e489:	68 7a b3 13 f0       	push   $0xf013b37a
f012e48e:	e8 72 1d fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512)
f012e493:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012e496:	e8 02 e7 fd ff       	call   f010cb9d <sys_calculate_free_frames>
f012e49b:	29 c3                	sub    %eax,%ebx
f012e49d:	89 d8                	mov    %ebx,%eax
f012e49f:	3d 00 02 00 00       	cmp    $0x200,%eax
f012e4a4:	74 17                	je     f012e4bd <test_krealloc_BF+0x80a>
			panic("krealloc: Wrong allocation: ");
f012e4a6:	83 ec 04             	sub    $0x4,%esp
f012e4a9:	68 8e c6 13 f0       	push   $0xf013c68e
f012e4ae:	68 58 11 00 00       	push   $0x1158
f012e4b3:	68 7a b3 13 f0       	push   $0xf013b37a
f012e4b8:	e8 48 1d fd ff       	call   f0100205 <_panic>
		lastIndices[5] = (2 * Mega - kilo) / sizeof(short) - 1;
f012e4bd:	c7 85 04 fe ff ff ff 	movl   $0xffdff,-0x1fc(%ebp)
f012e4c4:	fd 0f 00 

		//Allocate 3 MB
		freeFrames = sys_calculate_free_frames();
f012e4c7:	e8 d1 e6 fd ff       	call   f010cb9d <sys_calculate_free_frames>
f012e4cc:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[6] = krealloc(NULL, 3 * Mega - kilo);
f012e4cf:	83 ec 08             	sub    $0x8,%esp
f012e4d2:	68 00 fc 2f 00       	push   $0x2ffc00
f012e4d7:	6a 00                	push   $0x0
f012e4d9:	e8 67 96 fd ff       	call   f0107b45 <krealloc>
f012e4de:	83 c4 10             	add    $0x10,%esp
f012e4e1:	89 85 58 fe ff ff    	mov    %eax,-0x1a8(%ebp)
		if ((uint32) ptr_allocations[6] < (KERNEL_HEAP_START + 8 * Mega))
f012e4e7:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f012e4ed:	3d ff ff 7f f6       	cmp    $0xf67fffff,%eax
f012e4f2:	77 17                	ja     f012e50b <test_krealloc_BF+0x858>
			panic("krealloc: Wrong start address for the allocated space... ");
f012e4f4:	83 ec 04             	sub    $0x4,%esp
f012e4f7:	68 20 c6 13 f0       	push   $0xf013c620
f012e4fc:	68 5f 11 00 00       	push   $0x115f
f012e501:	68 7a b3 13 f0       	push   $0xf013b37a
f012e506:	e8 fa 1c fd ff       	call   f0100205 <_panic>
		if ((uint32) ptr_allocations[6] != ACTUAL_START + (8 * Mega))
f012e50b:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f012e511:	89 c1                	mov    %eax,%ecx
f012e513:	c7 85 24 ff ff ff 00 	movl   $0x1000,-0xdc(%ebp)
f012e51a:	10 00 00 
f012e51d:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f012e523:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012e528:	89 85 20 ff ff ff    	mov    %eax,-0xe0(%ebp)
f012e52e:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012e534:	ba 00 00 00 00       	mov    $0x0,%edx
f012e539:	f7 b5 24 ff ff ff    	divl   -0xdc(%ebp)
f012e53f:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012e545:	29 d0                	sub    %edx,%eax
f012e547:	89 c3                	mov    %eax,%ebx
f012e549:	c7 85 1c ff ff ff 00 	movl   $0x1000,-0xe4(%ebp)
f012e550:	10 00 00 
f012e553:	a0 40 26 78 f0       	mov    0xf0782640,%al
f012e558:	0f b6 d0             	movzbl %al,%edx
f012e55b:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f012e561:	01 d0                	add    %edx,%eax
f012e563:	48                   	dec    %eax
f012e564:	89 85 18 ff ff ff    	mov    %eax,-0xe8(%ebp)
f012e56a:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f012e570:	ba 00 00 00 00       	mov    $0x0,%edx
f012e575:	f7 b5 1c ff ff ff    	divl   -0xe4(%ebp)
f012e57b:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f012e581:	29 d0                	sub    %edx,%eax
f012e583:	01 c3                	add    %eax,%ebx
f012e585:	c7 85 14 ff ff ff 00 	movl   $0x1000,-0xec(%ebp)
f012e58c:	10 00 00 
f012e58f:	a0 40 26 78 f0       	mov    0xf0782640,%al
f012e594:	0f b6 c0             	movzbl %al,%eax
f012e597:	c1 e0 04             	shl    $0x4,%eax
f012e59a:	89 c2                	mov    %eax,%edx
f012e59c:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f012e5a2:	01 d0                	add    %edx,%eax
f012e5a4:	48                   	dec    %eax
f012e5a5:	89 85 10 ff ff ff    	mov    %eax,-0xf0(%ebp)
f012e5ab:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f012e5b1:	ba 00 00 00 00       	mov    $0x0,%edx
f012e5b6:	f7 b5 14 ff ff ff    	divl   -0xec(%ebp)
f012e5bc:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f012e5c2:	29 d0                	sub    %edx,%eax
f012e5c4:	01 d8                	add    %ebx,%eax
f012e5c6:	2d 00 c0 7f 09       	sub    $0x97fc000,%eax
f012e5cb:	39 c1                	cmp    %eax,%ecx
f012e5cd:	74 17                	je     f012e5e6 <test_krealloc_BF+0x933>
			panic("krealloc: Wrong start address for allocated space");
f012e5cf:	83 ec 04             	sub    $0x4,%esp
f012e5d2:	68 5c c6 13 f0       	push   $0xf013c65c
f012e5d7:	68 61 11 00 00       	push   $0x1161
f012e5dc:	68 7a b3 13 f0       	push   $0xf013b37a
f012e5e1:	e8 1f 1c fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768)
f012e5e6:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012e5e9:	e8 af e5 fd ff       	call   f010cb9d <sys_calculate_free_frames>
f012e5ee:	29 c3                	sub    %eax,%ebx
f012e5f0:	89 d8                	mov    %ebx,%eax
f012e5f2:	3d 00 03 00 00       	cmp    $0x300,%eax
f012e5f7:	74 17                	je     f012e610 <test_krealloc_BF+0x95d>
			panic("Wrong allocation: ");
f012e5f9:	83 ec 04             	sub    $0x4,%esp
f012e5fc:	68 c4 b7 13 f0       	push   $0xf013b7c4
f012e601:	68 63 11 00 00       	push   $0x1163
f012e606:	68 7a b3 13 f0       	push   $0xf013b37a
f012e60b:	e8 f5 1b fd ff       	call   f0100205 <_panic>
		lastIndices[6] = (3 * Mega - kilo) / sizeof(struct MyStruct) - 1;
f012e610:	c7 85 08 fe ff ff 7f 	movl   $0x5ff7f,-0x1f8(%ebp)
f012e617:	ff 05 00 

		//Allocate 3 MB
		freeFrames = sys_calculate_free_frames();
f012e61a:	e8 7e e5 fd ff       	call   f010cb9d <sys_calculate_free_frames>
f012e61f:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[7] = krealloc(NULL, 3 * Mega - kilo);
f012e622:	83 ec 08             	sub    $0x8,%esp
f012e625:	68 00 fc 2f 00       	push   $0x2ffc00
f012e62a:	6a 00                	push   $0x0
f012e62c:	e8 14 95 fd ff       	call   f0107b45 <krealloc>
f012e631:	83 c4 10             	add    $0x10,%esp
f012e634:	89 85 5c fe ff ff    	mov    %eax,-0x1a4(%ebp)
		if ((uint32) ptr_allocations[7] < (KERNEL_HEAP_START + 11 * Mega))
f012e63a:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f012e640:	3d ff ff af f6       	cmp    $0xf6afffff,%eax
f012e645:	77 17                	ja     f012e65e <test_krealloc_BF+0x9ab>
			panic("krealloc: Wrong start address for the allocated space... ");
f012e647:	83 ec 04             	sub    $0x4,%esp
f012e64a:	68 20 c6 13 f0       	push   $0xf013c620
f012e64f:	68 6a 11 00 00       	push   $0x116a
f012e654:	68 7a b3 13 f0       	push   $0xf013b37a
f012e659:	e8 a7 1b fd ff       	call   f0100205 <_panic>
		if ((uint32) ptr_allocations[7] != ACTUAL_START + (11 * Mega))
f012e65e:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f012e664:	89 c1                	mov    %eax,%ecx
f012e666:	c7 85 0c ff ff ff 00 	movl   $0x1000,-0xf4(%ebp)
f012e66d:	10 00 00 
f012e670:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f012e676:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012e67b:	89 85 08 ff ff ff    	mov    %eax,-0xf8(%ebp)
f012e681:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f012e687:	ba 00 00 00 00       	mov    $0x0,%edx
f012e68c:	f7 b5 0c ff ff ff    	divl   -0xf4(%ebp)
f012e692:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f012e698:	29 d0                	sub    %edx,%eax
f012e69a:	89 c3                	mov    %eax,%ebx
f012e69c:	c7 85 04 ff ff ff 00 	movl   $0x1000,-0xfc(%ebp)
f012e6a3:	10 00 00 
f012e6a6:	a0 40 26 78 f0       	mov    0xf0782640,%al
f012e6ab:	0f b6 d0             	movzbl %al,%edx
f012e6ae:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f012e6b4:	01 d0                	add    %edx,%eax
f012e6b6:	48                   	dec    %eax
f012e6b7:	89 85 00 ff ff ff    	mov    %eax,-0x100(%ebp)
f012e6bd:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f012e6c3:	ba 00 00 00 00       	mov    $0x0,%edx
f012e6c8:	f7 b5 04 ff ff ff    	divl   -0xfc(%ebp)
f012e6ce:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f012e6d4:	29 d0                	sub    %edx,%eax
f012e6d6:	01 c3                	add    %eax,%ebx
f012e6d8:	c7 85 fc fe ff ff 00 	movl   $0x1000,-0x104(%ebp)
f012e6df:	10 00 00 
f012e6e2:	a0 40 26 78 f0       	mov    0xf0782640,%al
f012e6e7:	0f b6 c0             	movzbl %al,%eax
f012e6ea:	c1 e0 04             	shl    $0x4,%eax
f012e6ed:	89 c2                	mov    %eax,%edx
f012e6ef:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f012e6f5:	01 d0                	add    %edx,%eax
f012e6f7:	48                   	dec    %eax
f012e6f8:	89 85 f8 fe ff ff    	mov    %eax,-0x108(%ebp)
f012e6fe:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f012e704:	ba 00 00 00 00       	mov    $0x0,%edx
f012e709:	f7 b5 fc fe ff ff    	divl   -0x104(%ebp)
f012e70f:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f012e715:	29 d0                	sub    %edx,%eax
f012e717:	01 d8                	add    %ebx,%eax
f012e719:	2d 00 c0 4f 09       	sub    $0x94fc000,%eax
f012e71e:	39 c1                	cmp    %eax,%ecx
f012e720:	74 17                	je     f012e739 <test_krealloc_BF+0xa86>
			panic("krealloc: Wrong start address for allocated space");
f012e722:	83 ec 04             	sub    $0x4,%esp
f012e725:	68 5c c6 13 f0       	push   $0xf013c65c
f012e72a:	68 6c 11 00 00       	push   $0x116c
f012e72f:	68 7a b3 13 f0       	push   $0xf013b37a
f012e734:	e8 cc 1a fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768)
f012e739:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012e73c:	e8 5c e4 fd ff       	call   f010cb9d <sys_calculate_free_frames>
f012e741:	29 c3                	sub    %eax,%ebx
f012e743:	89 d8                	mov    %ebx,%eax
f012e745:	3d 00 03 00 00       	cmp    $0x300,%eax
f012e74a:	74 17                	je     f012e763 <test_krealloc_BF+0xab0>
			panic("krealloc: Wrong allocation: ");
f012e74c:	83 ec 04             	sub    $0x4,%esp
f012e74f:	68 8e c6 13 f0       	push   $0xf013c68e
f012e754:	68 6e 11 00 00       	push   $0x116e
f012e759:	68 7a b3 13 f0       	push   $0xf013b37a
f012e75e:	e8 a2 1a fd ff       	call   f0100205 <_panic>
		lastIndices[7] = (3 * Mega - kilo) / sizeof(struct MyStruct) - 1;
f012e763:	c7 85 0c fe ff ff 7f 	movl   $0x5ff7f,-0x1f4(%ebp)
f012e76a:	ff 05 00 
	char *byteArr1;
	//[3] Test read write access
	{
		//cprintf("\nTest read write access");
		//Test access for the first 1 MB
		freeFrames = sys_calculate_free_frames();
f012e76d:	e8 2b e4 fd ff       	call   f010cb9d <sys_calculate_free_frames>
f012e772:	89 45 b8             	mov    %eax,-0x48(%ebp)

		//Write values
		//In 1st 1 MB
		lastIndexOfByte = (1 * Mega - kilo) / sizeof(char) - 1;
f012e775:	c7 85 f4 fe ff ff ff 	movl   $0xffbff,-0x10c(%ebp)
f012e77c:	fb 0f 00 
		byteArr = (char *) ptr_allocations[0];
f012e77f:	8b 85 40 fe ff ff    	mov    -0x1c0(%ebp),%eax
f012e785:	89 85 f0 fe ff ff    	mov    %eax,-0x110(%ebp)
		byteArr[0] = minByte;
f012e78b:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f012e791:	8a 55 cf             	mov    -0x31(%ebp),%dl
f012e794:	88 10                	mov    %dl,(%eax)
		byteArr[lastIndexOfByte] = maxByte;
f012e796:	8b 95 f4 fe ff ff    	mov    -0x10c(%ebp),%edx
f012e79c:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f012e7a2:	01 c2                	add    %eax,%edx
f012e7a4:	8a 45 ce             	mov    -0x32(%ebp),%al
f012e7a7:	88 02                	mov    %al,(%edx)

		//In 2nd 1 MB
		ptr = (char*) ptr_allocations[1];
f012e7a9:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f012e7af:	89 85 ec fe ff ff    	mov    %eax,-0x114(%ebp)
		for (int i = 0; i <= lastIndices[1]; ++i) {
f012e7b5:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012e7bc:	eb 11                	jmp    f012e7cf <test_krealloc_BF+0xb1c>
			ptr[i] = 2;
f012e7be:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012e7c1:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f012e7c7:	01 d0                	add    %edx,%eax
f012e7c9:	c6 00 02             	movb   $0x2,(%eax)
		byteArr[0] = minByte;
		byteArr[lastIndexOfByte] = maxByte;

		//In 2nd 1 MB
		ptr = (char*) ptr_allocations[1];
		for (int i = 0; i <= lastIndices[1]; ++i) {
f012e7cc:	ff 45 f4             	incl   -0xc(%ebp)
f012e7cf:	8b 85 f4 fd ff ff    	mov    -0x20c(%ebp),%eax
f012e7d5:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012e7d8:	7d e4                	jge    f012e7be <test_krealloc_BF+0xb0b>
			ptr[i] = 2;
		}

		//In 3rd 1 MB
		intArr = (int*) ptr_allocations[2];
f012e7da:	8b 85 48 fe ff ff    	mov    -0x1b8(%ebp),%eax
f012e7e0:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)
		intArr[0] = 3;
f012e7e6:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f012e7ec:	c7 00 03 00 00 00    	movl   $0x3,(%eax)
		intArr[lastIndices[2]] = 3;
f012e7f2:	8b 85 f8 fd ff ff    	mov    -0x208(%ebp),%eax
f012e7f8:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f012e7ff:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f012e805:	01 d0                	add    %edx,%eax
f012e807:	c7 00 03 00 00 00    	movl   $0x3,(%eax)

		//In 4th 1 MB
		intArr = (int*) ptr_allocations[3];
f012e80d:	8b 85 4c fe ff ff    	mov    -0x1b4(%ebp),%eax
f012e813:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)
		for (int i = 0; i <= lastIndices[3]; ++i) {
f012e819:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f012e820:	eb 1b                	jmp    f012e83d <test_krealloc_BF+0xb8a>
			intArr[i] = 4;
f012e822:	8b 45 f0             	mov    -0x10(%ebp),%eax
f012e825:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f012e82c:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f012e832:	01 d0                	add    %edx,%eax
f012e834:	c7 00 04 00 00 00    	movl   $0x4,(%eax)
		intArr[0] = 3;
		intArr[lastIndices[2]] = 3;

		//In 4th 1 MB
		intArr = (int*) ptr_allocations[3];
		for (int i = 0; i <= lastIndices[3]; ++i) {
f012e83a:	ff 45 f0             	incl   -0x10(%ebp)
f012e83d:	8b 85 fc fd ff ff    	mov    -0x204(%ebp),%eax
f012e843:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f012e846:	7d da                	jge    f012e822 <test_krealloc_BF+0xb6f>
			intArr[i] = 4;
		}

		//In 1st 2 MB
		shortArr = (short*) ptr_allocations[4];
f012e848:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f012e84e:	89 85 e4 fe ff ff    	mov    %eax,-0x11c(%ebp)
		for (int i = 0; i <= lastIndices[4]; ++i) {
f012e854:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f012e85b:	eb 17                	jmp    f012e874 <test_krealloc_BF+0xbc1>
			shortArr[i] = 5;
f012e85d:	8b 45 ec             	mov    -0x14(%ebp),%eax
f012e860:	01 c0                	add    %eax,%eax
f012e862:	89 c2                	mov    %eax,%edx
f012e864:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f012e86a:	01 d0                	add    %edx,%eax
f012e86c:	66 c7 00 05 00       	movw   $0x5,(%eax)
			intArr[i] = 4;
		}

		//In 1st 2 MB
		shortArr = (short*) ptr_allocations[4];
		for (int i = 0; i <= lastIndices[4]; ++i) {
f012e871:	ff 45 ec             	incl   -0x14(%ebp)
f012e874:	8b 85 00 fe ff ff    	mov    -0x200(%ebp),%eax
f012e87a:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f012e87d:	7d de                	jge    f012e85d <test_krealloc_BF+0xbaa>
			shortArr[i] = 5;
		}

		//In the 2nd 2 MB
		shortArr = (short*) ptr_allocations[5];
f012e87f:	8b 85 54 fe ff ff    	mov    -0x1ac(%ebp),%eax
f012e885:	89 85 e4 fe ff ff    	mov    %eax,-0x11c(%ebp)
		shortArr[0] = 6;
f012e88b:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f012e891:	66 c7 00 06 00       	movw   $0x6,(%eax)
		shortArr[lastIndices[5]] = 6;
f012e896:	8b 85 04 fe ff ff    	mov    -0x1fc(%ebp),%eax
f012e89c:	01 c0                	add    %eax,%eax
f012e89e:	89 c2                	mov    %eax,%edx
f012e8a0:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f012e8a6:	01 d0                	add    %edx,%eax
f012e8a8:	66 c7 00 06 00       	movw   $0x6,(%eax)

		//In the 1st 3 MB
		structArr = (struct MyStruct *) ptr_allocations[6];
f012e8ad:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f012e8b3:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
		for (int i = 0; i <= lastIndices[6]; i++) {
f012e8b9:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
f012e8c0:	eb 49                	jmp    f012e90b <test_krealloc_BF+0xc58>
			structArr[i].a = 7;
f012e8c2:	8b 45 e8             	mov    -0x18(%ebp),%eax
f012e8c5:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012e8cc:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012e8d2:	01 d0                	add    %edx,%eax
f012e8d4:	c6 00 07             	movb   $0x7,(%eax)
			structArr[i].b = 7;
f012e8d7:	8b 45 e8             	mov    -0x18(%ebp),%eax
f012e8da:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012e8e1:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012e8e7:	01 d0                	add    %edx,%eax
f012e8e9:	66 c7 40 02 07 00    	movw   $0x7,0x2(%eax)
			structArr[i].c = 7;
f012e8ef:	8b 45 e8             	mov    -0x18(%ebp),%eax
f012e8f2:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012e8f9:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012e8ff:	01 d0                	add    %edx,%eax
f012e901:	c7 40 04 07 00 00 00 	movl   $0x7,0x4(%eax)
		shortArr[0] = 6;
		shortArr[lastIndices[5]] = 6;

		//In the 1st 3 MB
		structArr = (struct MyStruct *) ptr_allocations[6];
		for (int i = 0; i <= lastIndices[6]; i++) {
f012e908:	ff 45 e8             	incl   -0x18(%ebp)
f012e90b:	8b 85 08 fe ff ff    	mov    -0x1f8(%ebp),%eax
f012e911:	3b 45 e8             	cmp    -0x18(%ebp),%eax
f012e914:	7d ac                	jge    f012e8c2 <test_krealloc_BF+0xc0f>
			structArr[i].b = 7;
			structArr[i].c = 7;
		}

		//In the last 3 MB
		structArr = (struct MyStruct*) ptr_allocations[7];
f012e916:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f012e91c:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
		structArr[0].a = 8;
f012e922:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012e928:	c6 00 08             	movb   $0x8,(%eax)
		structArr[0].b = 8;
f012e92b:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012e931:	66 c7 40 02 08 00    	movw   $0x8,0x2(%eax)
		structArr[0].c = 8;
f012e937:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012e93d:	c7 40 04 08 00 00 00 	movl   $0x8,0x4(%eax)
		structArr[lastIndices[7]].a = 8;
f012e944:	8b 85 0c fe ff ff    	mov    -0x1f4(%ebp),%eax
f012e94a:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012e951:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012e957:	01 d0                	add    %edx,%eax
f012e959:	c6 00 08             	movb   $0x8,(%eax)
		structArr[lastIndices[7]].b = 8;
f012e95c:	8b 85 0c fe ff ff    	mov    -0x1f4(%ebp),%eax
f012e962:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012e969:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012e96f:	01 d0                	add    %edx,%eax
f012e971:	66 c7 40 02 08 00    	movw   $0x8,0x2(%eax)
		structArr[lastIndices[7]].c = 8;
f012e977:	8b 85 0c fe ff ff    	mov    -0x1f4(%ebp),%eax
f012e97d:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012e984:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012e98a:	01 d0                	add    %edx,%eax
f012e98c:	c7 40 04 08 00 00 00 	movl   $0x8,0x4(%eax)

		//Read values: check that the values are successfully written
		if (byteArr[0] != minByte || byteArr[lastIndices[0]] != maxByte)
f012e993:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f012e999:	8a 00                	mov    (%eax),%al
f012e99b:	3a 45 cf             	cmp    -0x31(%ebp),%al
f012e99e:	75 17                	jne    f012e9b7 <test_krealloc_BF+0xd04>
f012e9a0:	8b 85 f0 fd ff ff    	mov    -0x210(%ebp),%eax
f012e9a6:	89 c2                	mov    %eax,%edx
f012e9a8:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f012e9ae:	01 d0                	add    %edx,%eax
f012e9b0:	8a 00                	mov    (%eax),%al
f012e9b2:	3a 45 ce             	cmp    -0x32(%ebp),%al
f012e9b5:	74 17                	je     f012e9ce <test_krealloc_BF+0xd1b>
			panic(
f012e9b7:	83 ec 04             	sub    $0x4,%esp
f012e9ba:	68 ac c6 13 f0       	push   $0xf013c6ac
f012e9bf:	68 b1 11 00 00       	push   $0x11b1
f012e9c4:	68 7a b3 13 f0       	push   $0xf013b37a
f012e9c9:	e8 37 18 fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");

		ptr = (char*) ptr_allocations[1];
f012e9ce:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f012e9d4:	89 85 ec fe ff ff    	mov    %eax,-0x114(%ebp)
		if (ptr[0] != 2 || ptr[lastIndices[1]] != 2)
f012e9da:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f012e9e0:	8a 00                	mov    (%eax),%al
f012e9e2:	3c 02                	cmp    $0x2,%al
f012e9e4:	75 16                	jne    f012e9fc <test_krealloc_BF+0xd49>
f012e9e6:	8b 85 f4 fd ff ff    	mov    -0x20c(%ebp),%eax
f012e9ec:	89 c2                	mov    %eax,%edx
f012e9ee:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f012e9f4:	01 d0                	add    %edx,%eax
f012e9f6:	8a 00                	mov    (%eax),%al
f012e9f8:	3c 02                	cmp    $0x2,%al
f012e9fa:	74 20                	je     f012ea1c <test_krealloc_BF+0xd69>
			panic(
f012e9fc:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f012ea02:	8a 00                	mov    (%eax),%al
f012ea04:	0f be c0             	movsbl %al,%eax
f012ea07:	50                   	push   %eax
f012ea08:	68 ec c6 13 f0       	push   $0xf013c6ec
f012ea0d:	68 b7 11 00 00       	push   $0x11b7
f012ea12:	68 7a b3 13 f0       	push   $0xf013b37a
f012ea17:	e8 e9 17 fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!, char = %c",
					ptr[0]);

		intArr = (int*) ptr_allocations[2];
f012ea1c:	8b 85 48 fe ff ff    	mov    -0x1b8(%ebp),%eax
f012ea22:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)
		if (intArr[0] != 3 || intArr[lastIndices[2]] != 3)
f012ea28:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f012ea2e:	8b 00                	mov    (%eax),%eax
f012ea30:	83 f8 03             	cmp    $0x3,%eax
f012ea33:	75 1c                	jne    f012ea51 <test_krealloc_BF+0xd9e>
f012ea35:	8b 85 f8 fd ff ff    	mov    -0x208(%ebp),%eax
f012ea3b:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f012ea42:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f012ea48:	01 d0                	add    %edx,%eax
f012ea4a:	8b 00                	mov    (%eax),%eax
f012ea4c:	83 f8 03             	cmp    $0x3,%eax
f012ea4f:	74 17                	je     f012ea68 <test_krealloc_BF+0xdb5>
			panic("Wrong allocation stored values are wrongly changed!");
f012ea51:	83 ec 04             	sub    $0x4,%esp
f012ea54:	68 38 c7 13 f0       	push   $0xf013c738
f012ea59:	68 bb 11 00 00       	push   $0x11bb
f012ea5e:	68 7a b3 13 f0       	push   $0xf013b37a
f012ea63:	e8 9d 17 fd ff       	call   f0100205 <_panic>

		intArr = (int*) ptr_allocations[3];
f012ea68:	8b 85 4c fe ff ff    	mov    -0x1b4(%ebp),%eax
f012ea6e:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)
		if (intArr[0] != 4 || intArr[lastIndices[3]] != 4)
f012ea74:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f012ea7a:	8b 00                	mov    (%eax),%eax
f012ea7c:	83 f8 04             	cmp    $0x4,%eax
f012ea7f:	75 1c                	jne    f012ea9d <test_krealloc_BF+0xdea>
f012ea81:	8b 85 fc fd ff ff    	mov    -0x204(%ebp),%eax
f012ea87:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f012ea8e:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f012ea94:	01 d0                	add    %edx,%eax
f012ea96:	8b 00                	mov    (%eax),%eax
f012ea98:	83 f8 04             	cmp    $0x4,%eax
f012ea9b:	74 17                	je     f012eab4 <test_krealloc_BF+0xe01>
			panic(
f012ea9d:	83 ec 04             	sub    $0x4,%esp
f012eaa0:	68 ac c6 13 f0       	push   $0xf013c6ac
f012eaa5:	68 c0 11 00 00       	push   $0x11c0
f012eaaa:	68 7a b3 13 f0       	push   $0xf013b37a
f012eaaf:	e8 51 17 fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");

		shortArr = (short*) ptr_allocations[4];
f012eab4:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f012eaba:	89 85 e4 fe ff ff    	mov    %eax,-0x11c(%ebp)
		if (shortArr[0] != 5 || shortArr[lastIndices[4]] != 5)
f012eac0:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f012eac6:	66 8b 00             	mov    (%eax),%ax
f012eac9:	66 83 f8 05          	cmp    $0x5,%ax
f012eacd:	75 1b                	jne    f012eaea <test_krealloc_BF+0xe37>
f012eacf:	8b 85 00 fe ff ff    	mov    -0x200(%ebp),%eax
f012ead5:	01 c0                	add    %eax,%eax
f012ead7:	89 c2                	mov    %eax,%edx
f012ead9:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f012eadf:	01 d0                	add    %edx,%eax
f012eae1:	66 8b 00             	mov    (%eax),%ax
f012eae4:	66 83 f8 05          	cmp    $0x5,%ax
f012eae8:	74 17                	je     f012eb01 <test_krealloc_BF+0xe4e>
			panic(
f012eaea:	83 ec 04             	sub    $0x4,%esp
f012eaed:	68 ac c6 13 f0       	push   $0xf013c6ac
f012eaf2:	68 c5 11 00 00       	push   $0x11c5
f012eaf7:	68 7a b3 13 f0       	push   $0xf013b37a
f012eafc:	e8 04 17 fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");

		shortArr = (short*) ptr_allocations[5];
f012eb01:	8b 85 54 fe ff ff    	mov    -0x1ac(%ebp),%eax
f012eb07:	89 85 e4 fe ff ff    	mov    %eax,-0x11c(%ebp)
		if (shortArr[0] != 6 || shortArr[lastIndices[5]] != 6)
f012eb0d:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f012eb13:	66 8b 00             	mov    (%eax),%ax
f012eb16:	66 83 f8 06          	cmp    $0x6,%ax
f012eb1a:	75 1b                	jne    f012eb37 <test_krealloc_BF+0xe84>
f012eb1c:	8b 85 04 fe ff ff    	mov    -0x1fc(%ebp),%eax
f012eb22:	01 c0                	add    %eax,%eax
f012eb24:	89 c2                	mov    %eax,%edx
f012eb26:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f012eb2c:	01 d0                	add    %edx,%eax
f012eb2e:	66 8b 00             	mov    (%eax),%ax
f012eb31:	66 83 f8 06          	cmp    $0x6,%ax
f012eb35:	74 17                	je     f012eb4e <test_krealloc_BF+0xe9b>
			panic(
f012eb37:	83 ec 04             	sub    $0x4,%esp
f012eb3a:	68 ac c6 13 f0       	push   $0xf013c6ac
f012eb3f:	68 ca 11 00 00       	push   $0x11ca
f012eb44:	68 7a b3 13 f0       	push   $0xf013b37a
f012eb49:	e8 b7 16 fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");

		structArr = (struct MyStruct*) ptr_allocations[6];
f012eb4e:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f012eb54:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
		if (structArr[0].a != 7 || structArr[lastIndices[6]].a != 7)
f012eb5a:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012eb60:	8a 00                	mov    (%eax),%al
f012eb62:	3c 07                	cmp    $0x7,%al
f012eb64:	75 1b                	jne    f012eb81 <test_krealloc_BF+0xece>
f012eb66:	8b 85 08 fe ff ff    	mov    -0x1f8(%ebp),%eax
f012eb6c:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012eb73:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012eb79:	01 d0                	add    %edx,%eax
f012eb7b:	8a 00                	mov    (%eax),%al
f012eb7d:	3c 07                	cmp    $0x7,%al
f012eb7f:	74 17                	je     f012eb98 <test_krealloc_BF+0xee5>
			panic(
f012eb81:	83 ec 04             	sub    $0x4,%esp
f012eb84:	68 ac c6 13 f0       	push   $0xf013c6ac
f012eb89:	68 cf 11 00 00       	push   $0x11cf
f012eb8e:	68 7a b3 13 f0       	push   $0xf013b37a
f012eb93:	e8 6d 16 fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");
		if (structArr[0].b != 7 || structArr[lastIndices[6]].b != 7)
f012eb98:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012eb9e:	66 8b 40 02          	mov    0x2(%eax),%ax
f012eba2:	66 83 f8 07          	cmp    $0x7,%ax
f012eba6:	75 1f                	jne    f012ebc7 <test_krealloc_BF+0xf14>
f012eba8:	8b 85 08 fe ff ff    	mov    -0x1f8(%ebp),%eax
f012ebae:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012ebb5:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012ebbb:	01 d0                	add    %edx,%eax
f012ebbd:	66 8b 40 02          	mov    0x2(%eax),%ax
f012ebc1:	66 83 f8 07          	cmp    $0x7,%ax
f012ebc5:	74 17                	je     f012ebde <test_krealloc_BF+0xf2b>
			panic(
f012ebc7:	83 ec 04             	sub    $0x4,%esp
f012ebca:	68 ac c6 13 f0       	push   $0xf013c6ac
f012ebcf:	68 d2 11 00 00       	push   $0x11d2
f012ebd4:	68 7a b3 13 f0       	push   $0xf013b37a
f012ebd9:	e8 27 16 fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");
		if (structArr[0].c != 7 || structArr[lastIndices[6]].c != 7)
f012ebde:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012ebe4:	8b 40 04             	mov    0x4(%eax),%eax
f012ebe7:	83 f8 07             	cmp    $0x7,%eax
f012ebea:	75 1d                	jne    f012ec09 <test_krealloc_BF+0xf56>
f012ebec:	8b 85 08 fe ff ff    	mov    -0x1f8(%ebp),%eax
f012ebf2:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012ebf9:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012ebff:	01 d0                	add    %edx,%eax
f012ec01:	8b 40 04             	mov    0x4(%eax),%eax
f012ec04:	83 f8 07             	cmp    $0x7,%eax
f012ec07:	74 17                	je     f012ec20 <test_krealloc_BF+0xf6d>
			panic(
f012ec09:	83 ec 04             	sub    $0x4,%esp
f012ec0c:	68 ac c6 13 f0       	push   $0xf013c6ac
f012ec11:	68 d5 11 00 00       	push   $0x11d5
f012ec16:	68 7a b3 13 f0       	push   $0xf013b37a
f012ec1b:	e8 e5 15 fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");

		structArr = (struct MyStruct*) ptr_allocations[7];
f012ec20:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f012ec26:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
		if (structArr[0].a != 8 || structArr[lastIndices[7]].a != 8)
f012ec2c:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012ec32:	8a 00                	mov    (%eax),%al
f012ec34:	3c 08                	cmp    $0x8,%al
f012ec36:	75 1b                	jne    f012ec53 <test_krealloc_BF+0xfa0>
f012ec38:	8b 85 0c fe ff ff    	mov    -0x1f4(%ebp),%eax
f012ec3e:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012ec45:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012ec4b:	01 d0                	add    %edx,%eax
f012ec4d:	8a 00                	mov    (%eax),%al
f012ec4f:	3c 08                	cmp    $0x8,%al
f012ec51:	74 17                	je     f012ec6a <test_krealloc_BF+0xfb7>
			panic(
f012ec53:	83 ec 04             	sub    $0x4,%esp
f012ec56:	68 ac c6 13 f0       	push   $0xf013c6ac
f012ec5b:	68 da 11 00 00       	push   $0x11da
f012ec60:	68 7a b3 13 f0       	push   $0xf013b37a
f012ec65:	e8 9b 15 fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");
		if (structArr[0].b != 8 || structArr[lastIndices[7]].b != 8)
f012ec6a:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012ec70:	66 8b 40 02          	mov    0x2(%eax),%ax
f012ec74:	66 83 f8 08          	cmp    $0x8,%ax
f012ec78:	75 1f                	jne    f012ec99 <test_krealloc_BF+0xfe6>
f012ec7a:	8b 85 0c fe ff ff    	mov    -0x1f4(%ebp),%eax
f012ec80:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012ec87:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012ec8d:	01 d0                	add    %edx,%eax
f012ec8f:	66 8b 40 02          	mov    0x2(%eax),%ax
f012ec93:	66 83 f8 08          	cmp    $0x8,%ax
f012ec97:	74 17                	je     f012ecb0 <test_krealloc_BF+0xffd>
			panic(
f012ec99:	83 ec 04             	sub    $0x4,%esp
f012ec9c:	68 ac c6 13 f0       	push   $0xf013c6ac
f012eca1:	68 dd 11 00 00       	push   $0x11dd
f012eca6:	68 7a b3 13 f0       	push   $0xf013b37a
f012ecab:	e8 55 15 fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");
		if (structArr[0].c != 8 || structArr[lastIndices[7]].c != 8)
f012ecb0:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012ecb6:	8b 40 04             	mov    0x4(%eax),%eax
f012ecb9:	83 f8 08             	cmp    $0x8,%eax
f012ecbc:	75 1d                	jne    f012ecdb <test_krealloc_BF+0x1028>
f012ecbe:	8b 85 0c fe ff ff    	mov    -0x1f4(%ebp),%eax
f012ecc4:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012eccb:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012ecd1:	01 d0                	add    %edx,%eax
f012ecd3:	8b 40 04             	mov    0x4(%eax),%eax
f012ecd6:	83 f8 08             	cmp    $0x8,%eax
f012ecd9:	74 17                	je     f012ecf2 <test_krealloc_BF+0x103f>
			panic(
f012ecdb:	83 ec 04             	sub    $0x4,%esp
f012ecde:	68 ac c6 13 f0       	push   $0xf013c6ac
f012ece3:	68 e0 11 00 00       	push   $0x11e0
f012ece8:	68 7a b3 13 f0       	push   $0xf013b37a
f012eced:	e8 13 15 fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");

		if ((freeFrames - sys_calculate_free_frames()) != 0)
f012ecf2:	e8 a6 de fd ff       	call   f010cb9d <sys_calculate_free_frames>
f012ecf7:	89 c2                	mov    %eax,%edx
f012ecf9:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012ecfc:	39 c2                	cmp    %eax,%edx
f012ecfe:	74 17                	je     f012ed17 <test_krealloc_BF+0x1064>
			panic(
f012ed00:	83 ec 04             	sub    $0x4,%esp
f012ed03:	68 6c c7 13 f0       	push   $0xf013c76c
f012ed08:	68 e4 11 00 00       	push   $0x11e4
f012ed0d:	68 7a b3 13 f0       	push   $0xf013b37a
f012ed12:	e8 ee 14 fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong allocation pages are not loaded successfully into memory");

	}
	cprintf("\nkrealloc: current evaluation = 10%");
f012ed17:	83 ec 0c             	sub    $0xc,%esp
f012ed1a:	68 b8 c7 13 f0       	push   $0xf013c7b8
f012ed1f:	e8 ea 1f fd ff       	call   f0100d0e <cprintf>
f012ed24:	83 c4 10             	add    $0x10,%esp

	//[3] Test krealloc by passing size = 0
	{
		//kfree 1st 1 MB
		freeFrames = sys_calculate_free_frames();
f012ed27:	e8 71 de fd ff       	call   f010cb9d <sys_calculate_free_frames>
f012ed2c:	89 45 b8             	mov    %eax,-0x48(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f012ed2f:	e8 94 50 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012ed34:	89 85 dc fe ff ff    	mov    %eax,-0x124(%ebp)
		krealloc(ptr_allocations[0], 0);
f012ed3a:	8b 85 40 fe ff ff    	mov    -0x1c0(%ebp),%eax
f012ed40:	83 ec 08             	sub    $0x8,%esp
f012ed43:	6a 00                	push   $0x0
f012ed45:	50                   	push   %eax
f012ed46:	e8 fa 8d fd ff       	call   f0107b45 <krealloc>
f012ed4b:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0)
f012ed4e:	e8 75 50 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012ed53:	3b 85 dc fe ff ff    	cmp    -0x124(%ebp),%eax
f012ed59:	74 17                	je     f012ed72 <test_krealloc_BF+0x10bf>
			panic(
f012ed5b:	83 ec 04             	sub    $0x4,%esp
f012ed5e:	68 dc c7 13 f0       	push   $0xf013c7dc
f012ed63:	68 f1 11 00 00       	push   $0x11f1
f012ed68:	68 7a b3 13 f0       	push   $0xf013b37a
f012ed6d:	e8 93 14 fd ff       	call   f0100205 <_panic>
					"krealloc: Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((sys_calculate_free_frames() - freeFrames) != 256)
f012ed72:	e8 26 de fd ff       	call   f010cb9d <sys_calculate_free_frames>
f012ed77:	89 c2                	mov    %eax,%edx
f012ed79:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012ed7c:	29 c2                	sub    %eax,%edx
f012ed7e:	89 d0                	mov    %edx,%eax
f012ed80:	3d 00 01 00 00       	cmp    $0x100,%eax
f012ed85:	74 17                	je     f012ed9e <test_krealloc_BF+0x10eb>
			panic("krealloc: pages in memory are not freed correctly");
f012ed87:	83 ec 04             	sub    $0x4,%esp
f012ed8a:	68 50 c8 13 f0       	push   $0xf013c850
f012ed8f:	68 f3 11 00 00       	push   $0x11f3
f012ed94:	68 7a b3 13 f0       	push   $0xf013b37a
f012ed99:	e8 67 14 fd ff       	call   f0100205 <_panic>

		//kfree 3rd 1 MB
		freeFrames = sys_calculate_free_frames();
f012ed9e:	e8 fa dd fd ff       	call   f010cb9d <sys_calculate_free_frames>
f012eda3:	89 45 b8             	mov    %eax,-0x48(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f012eda6:	e8 1d 50 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012edab:	89 85 dc fe ff ff    	mov    %eax,-0x124(%ebp)

		krealloc(ptr_allocations[2], 0);
f012edb1:	8b 85 48 fe ff ff    	mov    -0x1b8(%ebp),%eax
f012edb7:	83 ec 08             	sub    $0x8,%esp
f012edba:	6a 00                	push   $0x0
f012edbc:	50                   	push   %eax
f012edbd:	e8 83 8d fd ff       	call   f0107b45 <krealloc>
f012edc2:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0)
f012edc5:	e8 fe 4f fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012edca:	3b 85 dc fe ff ff    	cmp    -0x124(%ebp),%eax
f012edd0:	74 17                	je     f012ede9 <test_krealloc_BF+0x1136>
			panic(
f012edd2:	83 ec 04             	sub    $0x4,%esp
f012edd5:	68 dc c7 13 f0       	push   $0xf013c7dc
f012edda:	68 fc 11 00 00       	push   $0x11fc
f012eddf:	68 7a b3 13 f0       	push   $0xf013b37a
f012ede4:	e8 1c 14 fd ff       	call   f0100205 <_panic>
					"krealloc: Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((sys_calculate_free_frames() - freeFrames) != 256)
f012ede9:	e8 af dd fd ff       	call   f010cb9d <sys_calculate_free_frames>
f012edee:	89 c2                	mov    %eax,%edx
f012edf0:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012edf3:	29 c2                	sub    %eax,%edx
f012edf5:	89 d0                	mov    %edx,%eax
f012edf7:	3d 00 01 00 00       	cmp    $0x100,%eax
f012edfc:	74 17                	je     f012ee15 <test_krealloc_BF+0x1162>
			panic("krealloc: pages in memory are not freed correctly");
f012edfe:	83 ec 04             	sub    $0x4,%esp
f012ee01:	68 50 c8 13 f0       	push   $0xf013c850
f012ee06:	68 fe 11 00 00       	push   $0x11fe
f012ee0b:	68 7a b3 13 f0       	push   $0xf013b37a
f012ee10:	e8 f0 13 fd ff       	call   f0100205 <_panic>

		//kfree 2nd 2 MB
		freeFrames = sys_calculate_free_frames();
f012ee15:	e8 83 dd fd ff       	call   f010cb9d <sys_calculate_free_frames>
f012ee1a:	89 45 b8             	mov    %eax,-0x48(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f012ee1d:	e8 a6 4f fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012ee22:	89 85 dc fe ff ff    	mov    %eax,-0x124(%ebp)
		krealloc(ptr_allocations[5], 0);
f012ee28:	8b 85 54 fe ff ff    	mov    -0x1ac(%ebp),%eax
f012ee2e:	83 ec 08             	sub    $0x8,%esp
f012ee31:	6a 00                	push   $0x0
f012ee33:	50                   	push   %eax
f012ee34:	e8 0c 8d fd ff       	call   f0107b45 <krealloc>
f012ee39:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0)
f012ee3c:	e8 87 4f fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012ee41:	3b 85 dc fe ff ff    	cmp    -0x124(%ebp),%eax
f012ee47:	74 17                	je     f012ee60 <test_krealloc_BF+0x11ad>
			panic(
f012ee49:	83 ec 04             	sub    $0x4,%esp
f012ee4c:	68 94 b3 13 f0       	push   $0xf013b394
f012ee51:	68 06 12 00 00       	push   $0x1206
f012ee56:	68 7a b3 13 f0       	push   $0xf013b37a
f012ee5b:	e8 a5 13 fd ff       	call   f0100205 <_panic>
					"Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((sys_calculate_free_frames() - freeFrames) != 2 * Mega / PAGE_SIZE)
f012ee60:	e8 38 dd fd ff       	call   f010cb9d <sys_calculate_free_frames>
f012ee65:	89 c2                	mov    %eax,%edx
f012ee67:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012ee6a:	29 c2                	sub    %eax,%edx
f012ee6c:	89 d0                	mov    %edx,%eax
f012ee6e:	3d 00 02 00 00       	cmp    $0x200,%eax
f012ee73:	74 17                	je     f012ee8c <test_krealloc_BF+0x11d9>
			panic("krealloc: pages in memory are not freed correctly");
f012ee75:	83 ec 04             	sub    $0x4,%esp
f012ee78:	68 50 c8 13 f0       	push   $0xf013c850
f012ee7d:	68 08 12 00 00       	push   $0x1208
f012ee82:	68 7a b3 13 f0       	push   $0xf013b37a
f012ee87:	e8 79 13 fd ff       	call   f0100205 <_panic>

		//kfree last 3 MB
		freeFrames = sys_calculate_free_frames();
f012ee8c:	e8 0c dd fd ff       	call   f010cb9d <sys_calculate_free_frames>
f012ee91:	89 45 b8             	mov    %eax,-0x48(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f012ee94:	e8 2f 4f fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012ee99:	89 85 dc fe ff ff    	mov    %eax,-0x124(%ebp)
		krealloc(ptr_allocations[7], 0);
f012ee9f:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f012eea5:	83 ec 08             	sub    $0x8,%esp
f012eea8:	6a 00                	push   $0x0
f012eeaa:	50                   	push   %eax
f012eeab:	e8 95 8c fd ff       	call   f0107b45 <krealloc>
f012eeb0:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0)
f012eeb3:	e8 10 4f fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012eeb8:	3b 85 dc fe ff ff    	cmp    -0x124(%ebp),%eax
f012eebe:	74 17                	je     f012eed7 <test_krealloc_BF+0x1224>
			panic(
f012eec0:	83 ec 04             	sub    $0x4,%esp
f012eec3:	68 dc c7 13 f0       	push   $0xf013c7dc
f012eec8:	68 10 12 00 00       	push   $0x1210
f012eecd:	68 7a b3 13 f0       	push   $0xf013b37a
f012eed2:	e8 2e 13 fd ff       	call   f0100205 <_panic>
					"krealloc: Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((sys_calculate_free_frames() - freeFrames) != 3 * Mega / PAGE_SIZE)
f012eed7:	e8 c1 dc fd ff       	call   f010cb9d <sys_calculate_free_frames>
f012eedc:	89 c2                	mov    %eax,%edx
f012eede:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012eee1:	29 c2                	sub    %eax,%edx
f012eee3:	89 d0                	mov    %edx,%eax
f012eee5:	3d 00 03 00 00       	cmp    $0x300,%eax
f012eeea:	74 17                	je     f012ef03 <test_krealloc_BF+0x1250>
			panic(
f012eeec:	83 ec 04             	sub    $0x4,%esp
f012eeef:	68 84 c8 13 f0       	push   $0xf013c884
f012eef4:	68 13 12 00 00       	push   $0x1213
f012eef9:	68 7a b3 13 f0       	push   $0xf013b37a
f012eefe:	e8 02 13 fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong kfree: pages in memory are not freed correctly");
		//check tables	[15%]
		{
			long long va;
			for (va = KERNEL_HEAP_START; va < (long long) KERNEL_HEAP_MAX; va +=
f012ef03:	c7 45 e0 00 00 00 f6 	movl   $0xf6000000,-0x20(%ebp)
f012ef0a:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
f012ef11:	eb 48                	jmp    f012ef5b <test_krealloc_BF+0x12a8>
			PTSIZE)
			{
				uint32 *ptr_table;
				get_page_table(ptr_page_directory,  (uint32) va,
f012ef13:	8b 55 e0             	mov    -0x20(%ebp),%edx
f012ef16:	a1 3c 26 78 f0       	mov    0xf078263c,%eax
f012ef1b:	83 ec 04             	sub    $0x4,%esp
f012ef1e:	8d 8d 9c fd ff ff    	lea    -0x264(%ebp),%ecx
f012ef24:	51                   	push   %ecx
f012ef25:	52                   	push   %edx
f012ef26:	50                   	push   %eax
f012ef27:	e8 85 7b fd ff       	call   f0106ab1 <get_page_table>
f012ef2c:	83 c4 10             	add    $0x10,%esp
						&ptr_table);
				if (ptr_table == NULL) {
f012ef2f:	8b 85 9c fd ff ff    	mov    -0x264(%ebp),%eax
f012ef35:	85 c0                	test   %eax,%eax
f012ef37:	75 17                	jne    f012ef50 <test_krealloc_BF+0x129d>
					panic(
f012ef39:	83 ec 04             	sub    $0x4,%esp
f012ef3c:	68 7c bc 13 f0       	push   $0xf013bc7c
f012ef41:	68 1f 12 00 00       	push   $0x121f
f012ef46:	68 7a b3 13 f0       	push   $0xf013b37a
f012ef4b:	e8 b5 12 fd ff       	call   f0100205 <_panic>
			panic(
					"krealloc: Wrong kfree: pages in memory are not freed correctly");
		//check tables	[15%]
		{
			long long va;
			for (va = KERNEL_HEAP_START; va < (long long) KERNEL_HEAP_MAX; va +=
f012ef50:	81 45 e0 00 00 40 00 	addl   $0x400000,-0x20(%ebp)
f012ef57:	83 55 e4 00          	adcl   $0x0,-0x1c(%ebp)
f012ef5b:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f012ef5f:	78 b2                	js     f012ef13 <test_krealloc_BF+0x1260>
f012ef61:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f012ef65:	7f 09                	jg     f012ef70 <test_krealloc_BF+0x12bd>
f012ef67:	81 7d e0 ff ef ff ff 	cmpl   $0xffffefff,-0x20(%ebp)
f012ef6e:	76 a3                	jbe    f012ef13 <test_krealloc_BF+0x1260>
							"Wrong kfree: one of the kernel tables is wrongly removed! Tables should not be removed here in kfree");
				}
			}
		}
	}
	cprintf("\b\b\b20%");
f012ef70:	83 ec 0c             	sub    $0xc,%esp
f012ef73:	68 c3 c8 13 f0       	push   $0xf013c8c3
f012ef78:	e8 91 1d fd ff       	call   f0100d0e <cprintf>
f012ef7d:	83 c4 10             	add    $0x10,%esp
	//Check memory access after kfree by checking sum
	{
		//2nd 1 MB
		//cprintf("2nd 1 MB\n");
		ptr = (char*) ptr_allocations[1];
f012ef80:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f012ef86:	89 85 ec fe ff ff    	mov    %eax,-0x114(%ebp)
		int i;
		for (i = 0; i <= lastIndices[1]; ++i) {
f012ef8c:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
f012ef93:	eb 21                	jmp    f012efb6 <test_krealloc_BF+0x1303>
			sums[0] += ptr[i];
f012ef95:	8b 95 a0 fd ff ff    	mov    -0x260(%ebp),%edx
f012ef9b:	8b 4d dc             	mov    -0x24(%ebp),%ecx
f012ef9e:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f012efa4:	01 c8                	add    %ecx,%eax
f012efa6:	8a 00                	mov    (%eax),%al
f012efa8:	0f be c0             	movsbl %al,%eax
f012efab:	01 d0                	add    %edx,%eax
f012efad:	89 85 a0 fd ff ff    	mov    %eax,-0x260(%ebp)
	{
		//2nd 1 MB
		//cprintf("2nd 1 MB\n");
		ptr = (char*) ptr_allocations[1];
		int i;
		for (i = 0; i <= lastIndices[1]; ++i) {
f012efb3:	ff 45 dc             	incl   -0x24(%ebp)
f012efb6:	8b 85 f4 fd ff ff    	mov    -0x20c(%ebp),%eax
f012efbc:	3b 45 dc             	cmp    -0x24(%ebp),%eax
f012efbf:	7d d4                	jge    f012ef95 <test_krealloc_BF+0x12e2>
			sums[0] += ptr[i];

		}
		//cprintf("sum for 2nd 1 MB = %d LIM1 = %d\n", sums[0], (lastIndices[1] - 1));
		if (sums[0] != (lastIndices[1] + 1) * 2)
f012efc1:	8b 85 a0 fd ff ff    	mov    -0x260(%ebp),%eax
f012efc7:	8b 95 f4 fd ff ff    	mov    -0x20c(%ebp),%edx
f012efcd:	42                   	inc    %edx
f012efce:	01 d2                	add    %edx,%edx
f012efd0:	39 d0                	cmp    %edx,%eax
f012efd2:	74 17                	je     f012efeb <test_krealloc_BF+0x1338>
			panic("krealloc: invalid read after freeing some allocations");
f012efd4:	83 ec 04             	sub    $0x4,%esp
f012efd7:	68 cc c8 13 f0       	push   $0xf013c8cc
f012efdc:	68 31 12 00 00       	push   $0x1231
f012efe1:	68 7a b3 13 f0       	push   $0xf013b37a
f012efe6:	e8 1a 12 fd ff       	call   f0100205 <_panic>

		//4th 1 MB
		//cprintf("4th 1 MB\n");
		intArr = (int*) ptr_allocations[3];
f012efeb:	8b 85 4c fe ff ff    	mov    -0x1b4(%ebp),%eax
f012eff1:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)

		for (i = 0; i <= lastIndices[3]; ++i) {
f012eff7:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
f012effe:	eb 25                	jmp    f012f025 <test_krealloc_BF+0x1372>
			sums[1] += intArr[i];
f012f000:	8b 95 a4 fd ff ff    	mov    -0x25c(%ebp),%edx
f012f006:	8b 45 dc             	mov    -0x24(%ebp),%eax
f012f009:	8d 0c 85 00 00 00 00 	lea    0x0(,%eax,4),%ecx
f012f010:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f012f016:	01 c8                	add    %ecx,%eax
f012f018:	8b 00                	mov    (%eax),%eax
f012f01a:	01 d0                	add    %edx,%eax
f012f01c:	89 85 a4 fd ff ff    	mov    %eax,-0x25c(%ebp)

		//4th 1 MB
		//cprintf("4th 1 MB\n");
		intArr = (int*) ptr_allocations[3];

		for (i = 0; i <= lastIndices[3]; ++i) {
f012f022:	ff 45 dc             	incl   -0x24(%ebp)
f012f025:	8b 85 fc fd ff ff    	mov    -0x204(%ebp),%eax
f012f02b:	3b 45 dc             	cmp    -0x24(%ebp),%eax
f012f02e:	7d d0                	jge    f012f000 <test_krealloc_BF+0x134d>
			sums[1] += intArr[i];
		}
		if (sums[1] != (lastIndices[3] + 1) * 4)
f012f030:	8b 85 a4 fd ff ff    	mov    -0x25c(%ebp),%eax
f012f036:	8b 95 fc fd ff ff    	mov    -0x204(%ebp),%edx
f012f03c:	42                   	inc    %edx
f012f03d:	c1 e2 02             	shl    $0x2,%edx
f012f040:	39 d0                	cmp    %edx,%eax
f012f042:	74 17                	je     f012f05b <test_krealloc_BF+0x13a8>
			panic("krealloc: invalid read after freeing some allocations");
f012f044:	83 ec 04             	sub    $0x4,%esp
f012f047:	68 cc c8 13 f0       	push   $0xf013c8cc
f012f04c:	68 3b 12 00 00       	push   $0x123b
f012f051:	68 7a b3 13 f0       	push   $0xf013b37a
f012f056:	e8 aa 11 fd ff       	call   f0100205 <_panic>

		//1st 2 MB
		//cprintf("1st 2 MB\n");
		shortArr = (short*) ptr_allocations[4];
f012f05b:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f012f061:	89 85 e4 fe ff ff    	mov    %eax,-0x11c(%ebp)

		for (i = 0; i <= lastIndices[4]; ++i) {
f012f067:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
f012f06e:	eb 24                	jmp    f012f094 <test_krealloc_BF+0x13e1>
			sums[2] += shortArr[i];
f012f070:	8b 95 a8 fd ff ff    	mov    -0x258(%ebp),%edx
f012f076:	8b 45 dc             	mov    -0x24(%ebp),%eax
f012f079:	01 c0                	add    %eax,%eax
f012f07b:	89 c1                	mov    %eax,%ecx
f012f07d:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f012f083:	01 c8                	add    %ecx,%eax
f012f085:	66 8b 00             	mov    (%eax),%ax
f012f088:	98                   	cwtl   
f012f089:	01 d0                	add    %edx,%eax
f012f08b:	89 85 a8 fd ff ff    	mov    %eax,-0x258(%ebp)

		//1st 2 MB
		//cprintf("1st 2 MB\n");
		shortArr = (short*) ptr_allocations[4];

		for (i = 0; i <= lastIndices[4]; ++i) {
f012f091:	ff 45 dc             	incl   -0x24(%ebp)
f012f094:	8b 85 00 fe ff ff    	mov    -0x200(%ebp),%eax
f012f09a:	3b 45 dc             	cmp    -0x24(%ebp),%eax
f012f09d:	7d d1                	jge    f012f070 <test_krealloc_BF+0x13bd>
			sums[2] += shortArr[i];
		}
		if (sums[2] != (lastIndices[4] + 1) * 5)
f012f09f:	8b 95 a8 fd ff ff    	mov    -0x258(%ebp),%edx
f012f0a5:	8b 85 00 fe ff ff    	mov    -0x200(%ebp),%eax
f012f0ab:	8d 48 01             	lea    0x1(%eax),%ecx
f012f0ae:	89 c8                	mov    %ecx,%eax
f012f0b0:	c1 e0 02             	shl    $0x2,%eax
f012f0b3:	01 c8                	add    %ecx,%eax
f012f0b5:	39 c2                	cmp    %eax,%edx
f012f0b7:	74 17                	je     f012f0d0 <test_krealloc_BF+0x141d>
			panic("krealloc: invalid read after freeing some allocations");
f012f0b9:	83 ec 04             	sub    $0x4,%esp
f012f0bc:	68 cc c8 13 f0       	push   $0xf013c8cc
f012f0c1:	68 45 12 00 00       	push   $0x1245
f012f0c6:	68 7a b3 13 f0       	push   $0xf013b37a
f012f0cb:	e8 35 11 fd ff       	call   f0100205 <_panic>

		//1st 3 MB
		//cprintf("1st 3 MB\n");
		structArr = (struct MyStruct*) ptr_allocations[6];
f012f0d0:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f012f0d6:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)

		for (i = 0; i <= lastIndices[6]; ++i) {
f012f0dc:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
f012f0e3:	eb 70                	jmp    f012f155 <test_krealloc_BF+0x14a2>
			sums[3] += structArr[i].a;
f012f0e5:	8b 95 ac fd ff ff    	mov    -0x254(%ebp),%edx
f012f0eb:	8b 45 dc             	mov    -0x24(%ebp),%eax
f012f0ee:	8d 0c c5 00 00 00 00 	lea    0x0(,%eax,8),%ecx
f012f0f5:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012f0fb:	01 c8                	add    %ecx,%eax
f012f0fd:	8a 00                	mov    (%eax),%al
f012f0ff:	0f be c0             	movsbl %al,%eax
f012f102:	01 d0                	add    %edx,%eax
f012f104:	89 85 ac fd ff ff    	mov    %eax,-0x254(%ebp)
			sums[4] += structArr[i].b;
f012f10a:	8b 95 b0 fd ff ff    	mov    -0x250(%ebp),%edx
f012f110:	8b 45 dc             	mov    -0x24(%ebp),%eax
f012f113:	8d 0c c5 00 00 00 00 	lea    0x0(,%eax,8),%ecx
f012f11a:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012f120:	01 c8                	add    %ecx,%eax
f012f122:	66 8b 40 02          	mov    0x2(%eax),%ax
f012f126:	98                   	cwtl   
f012f127:	01 d0                	add    %edx,%eax
f012f129:	89 85 b0 fd ff ff    	mov    %eax,-0x250(%ebp)
			sums[5] += structArr[i].c;
f012f12f:	8b 95 b4 fd ff ff    	mov    -0x24c(%ebp),%edx
f012f135:	8b 45 dc             	mov    -0x24(%ebp),%eax
f012f138:	8d 0c c5 00 00 00 00 	lea    0x0(,%eax,8),%ecx
f012f13f:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012f145:	01 c8                	add    %ecx,%eax
f012f147:	8b 40 04             	mov    0x4(%eax),%eax
f012f14a:	01 d0                	add    %edx,%eax
f012f14c:	89 85 b4 fd ff ff    	mov    %eax,-0x24c(%ebp)

		//1st 3 MB
		//cprintf("1st 3 MB\n");
		structArr = (struct MyStruct*) ptr_allocations[6];

		for (i = 0; i <= lastIndices[6]; ++i) {
f012f152:	ff 45 dc             	incl   -0x24(%ebp)
f012f155:	8b 85 08 fe ff ff    	mov    -0x1f8(%ebp),%eax
f012f15b:	3b 45 dc             	cmp    -0x24(%ebp),%eax
f012f15e:	7d 85                	jge    f012f0e5 <test_krealloc_BF+0x1432>
			sums[3] += structArr[i].a;
			sums[4] += structArr[i].b;
			sums[5] += structArr[i].c;
		}
		if (sums[3] != (lastIndices[6] + 1) * 7
f012f160:	8b 8d ac fd ff ff    	mov    -0x254(%ebp),%ecx
f012f166:	8b 85 08 fe ff ff    	mov    -0x1f8(%ebp),%eax
f012f16c:	8d 50 01             	lea    0x1(%eax),%edx
f012f16f:	89 d0                	mov    %edx,%eax
f012f171:	01 c0                	add    %eax,%eax
f012f173:	01 d0                	add    %edx,%eax
f012f175:	01 c0                	add    %eax,%eax
f012f177:	01 d0                	add    %edx,%eax
f012f179:	39 c1                	cmp    %eax,%ecx
f012f17b:	75 3a                	jne    f012f1b7 <test_krealloc_BF+0x1504>
				|| sums[4] != (lastIndices[6] + 1) * 7
f012f17d:	8b 8d b0 fd ff ff    	mov    -0x250(%ebp),%ecx
f012f183:	8b 85 08 fe ff ff    	mov    -0x1f8(%ebp),%eax
f012f189:	8d 50 01             	lea    0x1(%eax),%edx
f012f18c:	89 d0                	mov    %edx,%eax
f012f18e:	01 c0                	add    %eax,%eax
f012f190:	01 d0                	add    %edx,%eax
f012f192:	01 c0                	add    %eax,%eax
f012f194:	01 d0                	add    %edx,%eax
f012f196:	39 c1                	cmp    %eax,%ecx
f012f198:	75 1d                	jne    f012f1b7 <test_krealloc_BF+0x1504>
				|| sums[5] != (lastIndices[6] + 1) * 7)
f012f19a:	8b 8d b4 fd ff ff    	mov    -0x24c(%ebp),%ecx
f012f1a0:	8b 85 08 fe ff ff    	mov    -0x1f8(%ebp),%eax
f012f1a6:	8d 50 01             	lea    0x1(%eax),%edx
f012f1a9:	89 d0                	mov    %edx,%eax
f012f1ab:	01 c0                	add    %eax,%eax
f012f1ad:	01 d0                	add    %edx,%eax
f012f1af:	01 c0                	add    %eax,%eax
f012f1b1:	01 d0                	add    %edx,%eax
f012f1b3:	39 c1                	cmp    %eax,%ecx
f012f1b5:	74 17                	je     f012f1ce <test_krealloc_BF+0x151b>
			panic("krealloc: invalid read after freeing some allocations");
f012f1b7:	83 ec 04             	sub    $0x4,%esp
f012f1ba:	68 cc c8 13 f0       	push   $0xf013c8cc
f012f1bf:	68 53 12 00 00       	push   $0x1253
f012f1c4:	68 7a b3 13 f0       	push   $0xf013b37a
f012f1c9:	e8 37 10 fd ff       	call   f0100205 <_panic>
	}

	//[4] Test krealloc reallocation with valid and invalid sizes
	{
		int freeDiskFrames;
		void* newAddress = NULL;
f012f1ce:	c7 85 d8 fe ff ff 00 	movl   $0x0,-0x128(%ebp)
f012f1d5:	00 00 00 
		//Try to reallocate 2nd 1 MB with a size smaller than its current size (it should return the same VA and do nothing)
		freeFrames = sys_calculate_free_frames();
f012f1d8:	e8 c0 d9 fd ff       	call   f010cb9d <sys_calculate_free_frames>
f012f1dd:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[1], 15 * kilo);
f012f1e0:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f012f1e6:	83 ec 08             	sub    $0x8,%esp
f012f1e9:	68 00 3c 00 00       	push   $0x3c00
f012f1ee:	50                   	push   %eax
f012f1ef:	e8 51 89 fd ff       	call   f0107b45 <krealloc>
f012f1f4:	83 c4 10             	add    $0x10,%esp
f012f1f7:	89 85 d8 fe ff ff    	mov    %eax,-0x128(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012f1fd:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f012f203:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012f208:	77 17                	ja     f012f221 <test_krealloc_BF+0x156e>
			panic("krealloc: Wrong start address for the allocated space... ");
f012f20a:	83 ec 04             	sub    $0x4,%esp
f012f20d:	68 20 c6 13 f0       	push   $0xf013c620
f012f212:	68 5f 12 00 00       	push   $0x125f
f012f217:	68 7a b3 13 f0       	push   $0xf013b37a
f012f21c:	e8 e4 0f fd ff       	call   f0100205 <_panic>
		if (newAddress != ptr_allocations[1])
f012f221:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f012f227:	3b 85 d8 fe ff ff    	cmp    -0x128(%ebp),%eax
f012f22d:	74 17                	je     f012f246 <test_krealloc_BF+0x1593>
			panic(
f012f22f:	83 ec 04             	sub    $0x4,%esp
f012f232:	68 04 c9 13 f0       	push   $0xf013c904
f012f237:	68 62 12 00 00       	push   $0x1262
f012f23c:	68 7a b3 13 f0       	push   $0xf013b37a
f012f241:	e8 bf 0f fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong allocation: krealloc reallocated an address with the same size (it should return same VA)");
		if (freeFrames != sys_calculate_free_frames())
f012f246:	e8 52 d9 fd ff       	call   f010cb9d <sys_calculate_free_frames>
f012f24b:	89 c2                	mov    %eax,%edx
f012f24d:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012f250:	39 c2                	cmp    %eax,%edx
f012f252:	74 17                	je     f012f26b <test_krealloc_BF+0x15b8>
			panic(
f012f254:	83 ec 04             	sub    $0x4,%esp
f012f257:	68 70 c9 13 f0       	push   $0xf013c970
f012f25c:	68 65 12 00 00       	push   $0x1265
f012f261:	68 7a b3 13 f0       	push   $0xf013b37a
f012f266:	e8 9a 0f fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong number of frames after krealloc with the same size");

		//Try to reallocate 1st 2 MB with a size smaller than its current size (it should return the same VA and do nothing)
		freeFrames = sys_calculate_free_frames();
f012f26b:	e8 2d d9 fd ff       	call   f010cb9d <sys_calculate_free_frames>
f012f270:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[4], 1 * Mega - kilo);
f012f273:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f012f279:	83 ec 08             	sub    $0x8,%esp
f012f27c:	68 00 fc 0f 00       	push   $0xffc00
f012f281:	50                   	push   %eax
f012f282:	e8 be 88 fd ff       	call   f0107b45 <krealloc>
f012f287:	83 c4 10             	add    $0x10,%esp
f012f28a:	89 85 d8 fe ff ff    	mov    %eax,-0x128(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012f290:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f012f296:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012f29b:	77 17                	ja     f012f2b4 <test_krealloc_BF+0x1601>
			panic("krealloc: Wrong start address for the allocated space... ");
f012f29d:	83 ec 04             	sub    $0x4,%esp
f012f2a0:	68 20 c6 13 f0       	push   $0xf013c620
f012f2a5:	68 6b 12 00 00       	push   $0x126b
f012f2aa:	68 7a b3 13 f0       	push   $0xf013b37a
f012f2af:	e8 51 0f fd ff       	call   f0100205 <_panic>
		if (newAddress != ptr_allocations[4])
f012f2b4:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f012f2ba:	3b 85 d8 fe ff ff    	cmp    -0x128(%ebp),%eax
f012f2c0:	74 17                	je     f012f2d9 <test_krealloc_BF+0x1626>
			panic(
f012f2c2:	83 ec 04             	sub    $0x4,%esp
f012f2c5:	68 04 c9 13 f0       	push   $0xf013c904
f012f2ca:	68 6e 12 00 00       	push   $0x126e
f012f2cf:	68 7a b3 13 f0       	push   $0xf013b37a
f012f2d4:	e8 2c 0f fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong allocation: krealloc reallocated an address with the same size (it should return same VA)");
		if (freeFrames != sys_calculate_free_frames())
f012f2d9:	e8 bf d8 fd ff       	call   f010cb9d <sys_calculate_free_frames>
f012f2de:	89 c2                	mov    %eax,%edx
f012f2e0:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012f2e3:	39 c2                	cmp    %eax,%edx
f012f2e5:	74 17                	je     f012f2fe <test_krealloc_BF+0x164b>
			panic(
f012f2e7:	83 ec 04             	sub    $0x4,%esp
f012f2ea:	68 70 c9 13 f0       	push   $0xf013c970
f012f2ef:	68 71 12 00 00       	push   $0x1271
f012f2f4:	68 7a b3 13 f0       	push   $0xf013b37a
f012f2f9:	e8 07 0f fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong number of frames after krealloc with the same size");

		//Try to reallocate 2nd 1 MB with the same size it should return the same VA
		freeFrames = sys_calculate_free_frames();
f012f2fe:	e8 9a d8 fd ff       	call   f010cb9d <sys_calculate_free_frames>
f012f303:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[1], 1 * Mega - kilo);
f012f306:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f012f30c:	83 ec 08             	sub    $0x8,%esp
f012f30f:	68 00 fc 0f 00       	push   $0xffc00
f012f314:	50                   	push   %eax
f012f315:	e8 2b 88 fd ff       	call   f0107b45 <krealloc>
f012f31a:	83 c4 10             	add    $0x10,%esp
f012f31d:	89 85 d8 fe ff ff    	mov    %eax,-0x128(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012f323:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f012f329:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012f32e:	77 17                	ja     f012f347 <test_krealloc_BF+0x1694>
			panic("krealloc: Wrong start address for the allocated space... ");
f012f330:	83 ec 04             	sub    $0x4,%esp
f012f333:	68 20 c6 13 f0       	push   $0xf013c620
f012f338:	68 77 12 00 00       	push   $0x1277
f012f33d:	68 7a b3 13 f0       	push   $0xf013b37a
f012f342:	e8 be 0e fd ff       	call   f0100205 <_panic>
		if (newAddress != ptr_allocations[1])
f012f347:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f012f34d:	3b 85 d8 fe ff ff    	cmp    -0x128(%ebp),%eax
f012f353:	74 17                	je     f012f36c <test_krealloc_BF+0x16b9>
			panic(
f012f355:	83 ec 04             	sub    $0x4,%esp
f012f358:	68 04 c9 13 f0       	push   $0xf013c904
f012f35d:	68 7a 12 00 00       	push   $0x127a
f012f362:	68 7a b3 13 f0       	push   $0xf013b37a
f012f367:	e8 99 0e fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong allocation: krealloc reallocated an address with the same size (it should return same VA)");
		if (freeFrames != sys_calculate_free_frames())
f012f36c:	e8 2c d8 fd ff       	call   f010cb9d <sys_calculate_free_frames>
f012f371:	89 c2                	mov    %eax,%edx
f012f373:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012f376:	39 c2                	cmp    %eax,%edx
f012f378:	74 17                	je     f012f391 <test_krealloc_BF+0x16de>
			panic(
f012f37a:	83 ec 04             	sub    $0x4,%esp
f012f37d:	68 70 c9 13 f0       	push   $0xf013c970
f012f382:	68 7d 12 00 00       	push   $0x127d
f012f387:	68 7a b3 13 f0       	push   $0xf013b37a
f012f38c:	e8 74 0e fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong number of frames after krealloc with the same size");



		//Try to reallocate 4th 1 MB with the same size it should return the same VA
		freeFrames = sys_calculate_free_frames();
f012f391:	e8 07 d8 fd ff       	call   f010cb9d <sys_calculate_free_frames>
f012f396:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[3], 1 * Mega - kilo);
f012f399:	8b 85 4c fe ff ff    	mov    -0x1b4(%ebp),%eax
f012f39f:	83 ec 08             	sub    $0x8,%esp
f012f3a2:	68 00 fc 0f 00       	push   $0xffc00
f012f3a7:	50                   	push   %eax
f012f3a8:	e8 98 87 fd ff       	call   f0107b45 <krealloc>
f012f3ad:	83 c4 10             	add    $0x10,%esp
f012f3b0:	89 85 d8 fe ff ff    	mov    %eax,-0x128(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012f3b6:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f012f3bc:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012f3c1:	77 17                	ja     f012f3da <test_krealloc_BF+0x1727>
			panic("krealloc: Wrong start address for the allocated space... ");
f012f3c3:	83 ec 04             	sub    $0x4,%esp
f012f3c6:	68 20 c6 13 f0       	push   $0xf013c620
f012f3cb:	68 85 12 00 00       	push   $0x1285
f012f3d0:	68 7a b3 13 f0       	push   $0xf013b37a
f012f3d5:	e8 2b 0e fd ff       	call   f0100205 <_panic>
		if (newAddress != ptr_allocations[3])
f012f3da:	8b 85 4c fe ff ff    	mov    -0x1b4(%ebp),%eax
f012f3e0:	3b 85 d8 fe ff ff    	cmp    -0x128(%ebp),%eax
f012f3e6:	74 17                	je     f012f3ff <test_krealloc_BF+0x174c>
			panic(
f012f3e8:	83 ec 04             	sub    $0x4,%esp
f012f3eb:	68 b4 c9 13 f0       	push   $0xf013c9b4
f012f3f0:	68 88 12 00 00       	push   $0x1288
f012f3f5:	68 7a b3 13 f0       	push   $0xf013b37a
f012f3fa:	e8 06 0e fd ff       	call   f0100205 <_panic>
					"Wrong allocation: krealloc reallocated an address with the same size (it should return same VA)");
		if (freeFrames != sys_calculate_free_frames())
f012f3ff:	e8 99 d7 fd ff       	call   f010cb9d <sys_calculate_free_frames>
f012f404:	89 c2                	mov    %eax,%edx
f012f406:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012f409:	39 c2                	cmp    %eax,%edx
f012f40b:	74 17                	je     f012f424 <test_krealloc_BF+0x1771>
			panic(
f012f40d:	83 ec 04             	sub    $0x4,%esp
f012f410:	68 70 c9 13 f0       	push   $0xf013c970
f012f415:	68 8b 12 00 00       	push   $0x128b
f012f41a:	68 7a b3 13 f0       	push   $0xf013b37a
f012f41f:	e8 e1 0d fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong number of frames after krealloc with the same size");
	}
	cprintf("\b\b\b30%");
f012f424:	83 ec 0c             	sub    $0xc,%esp
f012f427:	68 93 bb 13 f0       	push   $0xf013bb93
f012f42c:	e8 dd 18 fd ff       	call   f0100d0e <cprintf>
f012f431:	83 c4 10             	add    $0x10,%esp
    {
		//Reallocate 2nd 1 MB to 1 MB + 7 KB
		freeFrames = sys_calculate_free_frames();
f012f434:	e8 64 d7 fd ff       	call   f010cb9d <sys_calculate_free_frames>
f012f439:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[1], (1 * Mega - kilo) + (7 * kilo));
f012f43c:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f012f442:	83 ec 08             	sub    $0x8,%esp
f012f445:	68 00 18 10 00       	push   $0x101800
f012f44a:	50                   	push   %eax
f012f44b:	e8 f5 86 fd ff       	call   f0107b45 <krealloc>
f012f450:	83 c4 10             	add    $0x10,%esp
f012f453:	89 45 bc             	mov    %eax,-0x44(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012f456:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012f459:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012f45e:	77 17                	ja     f012f477 <test_krealloc_BF+0x17c4>
			panic("krealloc: Wrong start address for the allocated space... ");
f012f460:	83 ec 04             	sub    $0x4,%esp
f012f463:	68 20 c6 13 f0       	push   $0xf013c620
f012f468:	68 93 12 00 00       	push   $0x1293
f012f46d:	68 7a b3 13 f0       	push   $0xf013b37a
f012f472:	e8 8e 0d fd ff       	call   f0100205 <_panic>
		if (newAddress != ptr_allocations[1])
f012f477:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f012f47d:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f012f480:	74 17                	je     f012f499 <test_krealloc_BF+0x17e6>
			panic(
f012f482:	83 ec 04             	sub    $0x4,%esp
f012f485:	68 14 ca 13 f0       	push   $0xf013ca14
f012f48a:	68 96 12 00 00       	push   $0x1296
f012f48f:	68 7a b3 13 f0       	push   $0xf013b37a
f012f494:	e8 6c 0d fd ff       	call   f0100205 <_panic>
					"Wrong allocation: krealloc reallocated a new address while there is a sufficient space after it (it should return same VA)");
		if (freeFrames - sys_calculate_free_frames() != 2)
f012f499:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012f49c:	e8 fc d6 fd ff       	call   f010cb9d <sys_calculate_free_frames>
f012f4a1:	29 c3                	sub    %eax,%ebx
f012f4a3:	89 d8                	mov    %ebx,%eax
f012f4a5:	83 f8 02             	cmp    $0x2,%eax
f012f4a8:	74 17                	je     f012f4c1 <test_krealloc_BF+0x180e>
			panic("krealloc: pages in memory are not loaded correctly");
f012f4aa:	83 ec 04             	sub    $0x4,%esp
f012f4ad:	68 90 ca 13 f0       	push   $0xf013ca90
f012f4b2:	68 98 12 00 00       	push   $0x1298
f012f4b7:	68 7a b3 13 f0       	push   $0xf013b37a
f012f4bc:	e8 44 0d fd ff       	call   f0100205 <_panic>

		//Reallocate 1st 2 MB to 2 MB + 2 MB
		freeFrames = sys_calculate_free_frames();
f012f4c1:	e8 d7 d6 fd ff       	call   f010cb9d <sys_calculate_free_frames>
f012f4c6:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[4], (4 * Mega - kilo));
f012f4c9:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f012f4cf:	83 ec 08             	sub    $0x8,%esp
f012f4d2:	68 00 fc 3f 00       	push   $0x3ffc00
f012f4d7:	50                   	push   %eax
f012f4d8:	e8 68 86 fd ff       	call   f0107b45 <krealloc>
f012f4dd:	83 c4 10             	add    $0x10,%esp
f012f4e0:	89 45 bc             	mov    %eax,-0x44(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012f4e3:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012f4e6:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012f4eb:	77 17                	ja     f012f504 <test_krealloc_BF+0x1851>
			panic("krealloc: Wrong start address for the allocated space... ");
f012f4ed:	83 ec 04             	sub    $0x4,%esp
f012f4f0:	68 20 c6 13 f0       	push   $0xf013c620
f012f4f5:	68 9e 12 00 00       	push   $0x129e
f012f4fa:	68 7a b3 13 f0       	push   $0xf013b37a
f012f4ff:	e8 01 0d fd ff       	call   f0100205 <_panic>
		if (newAddress != ptr_allocations[4])
f012f504:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f012f50a:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f012f50d:	74 17                	je     f012f526 <test_krealloc_BF+0x1873>
			panic(
f012f50f:	83 ec 04             	sub    $0x4,%esp
f012f512:	68 14 ca 13 f0       	push   $0xf013ca14
f012f517:	68 a1 12 00 00       	push   $0x12a1
f012f51c:	68 7a b3 13 f0       	push   $0xf013b37a
f012f521:	e8 df 0c fd ff       	call   f0100205 <_panic>
					"Wrong allocation: krealloc reallocated a new address while there is a sufficient space after it (it should return same VA)");
		//2 MB only for the new size
		if (freeFrames - sys_calculate_free_frames() != 512)
f012f526:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012f529:	e8 6f d6 fd ff       	call   f010cb9d <sys_calculate_free_frames>
f012f52e:	29 c3                	sub    %eax,%ebx
f012f530:	89 d8                	mov    %ebx,%eax
f012f532:	3d 00 02 00 00       	cmp    $0x200,%eax
f012f537:	74 17                	je     f012f550 <test_krealloc_BF+0x189d>
			panic("krealloc: pages in memory are not loaded correctly");
f012f539:	83 ec 04             	sub    $0x4,%esp
f012f53c:	68 90 ca 13 f0       	push   $0xf013ca90
f012f541:	68 a4 12 00 00       	push   $0x12a4
f012f546:	68 7a b3 13 f0       	push   $0xf013b37a
f012f54b:	e8 b5 0c fd ff       	call   f0100205 <_panic>


	}
	cprintf("\b\b\b60%");
f012f550:	83 ec 0c             	sub    $0xc,%esp
f012f553:	68 d8 bb 13 f0       	push   $0xf013bbd8
f012f558:	e8 b1 17 fd ff       	call   f0100d0e <cprintf>
f012f55d:	83 c4 10             	add    $0x10,%esp
	//Test krealloc: Cut & paste
	{
		//Reallocate 1st 2 MB (already reallocated to 4 MB) to 10 MB. It should return new VA
		freeFrames = sys_calculate_free_frames();
f012f560:	e8 38 d6 fd ff       	call   f010cb9d <sys_calculate_free_frames>
f012f565:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[4], (10 * Mega - kilo));
f012f568:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f012f56e:	83 ec 08             	sub    $0x8,%esp
f012f571:	68 00 fc 9f 00       	push   $0x9ffc00
f012f576:	50                   	push   %eax
f012f577:	e8 c9 85 fd ff       	call   f0107b45 <krealloc>
f012f57c:	83 c4 10             	add    $0x10,%esp
f012f57f:	89 45 bc             	mov    %eax,-0x44(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012f582:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012f585:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012f58a:	77 17                	ja     f012f5a3 <test_krealloc_BF+0x18f0>
			panic("krealloc: Wrong start address for the allocated space... ");
f012f58c:	83 ec 04             	sub    $0x4,%esp
f012f58f:	68 20 c6 13 f0       	push   $0xf013c620
f012f594:	68 af 12 00 00       	push   $0x12af
f012f599:	68 7a b3 13 f0       	push   $0xf013b37a
f012f59e:	e8 62 0c fd ff       	call   f0100205 <_panic>
		if ((uint32) newAddress != ACTUAL_START + (11 * Mega))
f012f5a3:	c7 85 d4 fe ff ff 00 	movl   $0x1000,-0x12c(%ebp)
f012f5aa:	10 00 00 
f012f5ad:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f012f5b3:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012f5b8:	89 85 d0 fe ff ff    	mov    %eax,-0x130(%ebp)
f012f5be:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f012f5c4:	ba 00 00 00 00       	mov    $0x0,%edx
f012f5c9:	f7 b5 d4 fe ff ff    	divl   -0x12c(%ebp)
f012f5cf:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f012f5d5:	29 d0                	sub    %edx,%eax
f012f5d7:	89 c1                	mov    %eax,%ecx
f012f5d9:	c7 85 cc fe ff ff 00 	movl   $0x1000,-0x134(%ebp)
f012f5e0:	10 00 00 
f012f5e3:	a0 40 26 78 f0       	mov    0xf0782640,%al
f012f5e8:	0f b6 d0             	movzbl %al,%edx
f012f5eb:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f012f5f1:	01 d0                	add    %edx,%eax
f012f5f3:	48                   	dec    %eax
f012f5f4:	89 85 c8 fe ff ff    	mov    %eax,-0x138(%ebp)
f012f5fa:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f012f600:	ba 00 00 00 00       	mov    $0x0,%edx
f012f605:	f7 b5 cc fe ff ff    	divl   -0x134(%ebp)
f012f60b:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f012f611:	29 d0                	sub    %edx,%eax
f012f613:	01 c1                	add    %eax,%ecx
f012f615:	c7 85 c4 fe ff ff 00 	movl   $0x1000,-0x13c(%ebp)
f012f61c:	10 00 00 
f012f61f:	a0 40 26 78 f0       	mov    0xf0782640,%al
f012f624:	0f b6 c0             	movzbl %al,%eax
f012f627:	c1 e0 04             	shl    $0x4,%eax
f012f62a:	89 c2                	mov    %eax,%edx
f012f62c:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f012f632:	01 d0                	add    %edx,%eax
f012f634:	48                   	dec    %eax
f012f635:	89 85 c0 fe ff ff    	mov    %eax,-0x140(%ebp)
f012f63b:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f012f641:	ba 00 00 00 00       	mov    $0x0,%edx
f012f646:	f7 b5 c4 fe ff ff    	divl   -0x13c(%ebp)
f012f64c:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f012f652:	29 d0                	sub    %edx,%eax
f012f654:	01 c8                	add    %ecx,%eax
f012f656:	8d 90 00 40 b0 f6    	lea    -0x94fc000(%eax),%edx
f012f65c:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012f65f:	39 c2                	cmp    %eax,%edx
f012f661:	74 18                	je     f012f67b <test_krealloc_BF+0x19c8>
			panic(
f012f663:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012f666:	50                   	push   %eax
f012f667:	68 c4 ca 13 f0       	push   $0xf013cac4
f012f66c:	68 b3 12 00 00       	push   $0x12b3
f012f671:	68 7a b3 13 f0       	push   $0xf013b37a
f012f676:	e8 8a 0b fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong start address for reallocated space, NSA = %x\nbbb",
					(uint32 )newAddress);
		if (newAddress == ptr_allocations[4])
f012f67b:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f012f681:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f012f684:	75 17                	jne    f012f69d <test_krealloc_BF+0x19ea>
			panic(
f012f686:	83 ec 04             	sub    $0x4,%esp
f012f689:	68 08 cb 13 f0       	push   $0xf013cb08
f012f68e:	68 b6 12 00 00       	push   $0x12b6
f012f693:	68 7a b3 13 f0       	push   $0xf013b37a
f012f698:	e8 68 0b fd ff       	call   f0100205 <_panic>
					"Wrong allocation: krealloc reallocated at the same address while there is NO sufficient space after it (it should return new VA)");
		//6 MB only for the new size
		if (freeFrames - sys_calculate_free_frames() != 1536)
f012f69d:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012f6a0:	e8 f8 d4 fd ff       	call   f010cb9d <sys_calculate_free_frames>
f012f6a5:	29 c3                	sub    %eax,%ebx
f012f6a7:	89 d8                	mov    %ebx,%eax
f012f6a9:	3d 00 06 00 00       	cmp    $0x600,%eax
f012f6ae:	74 17                	je     f012f6c7 <test_krealloc_BF+0x1a14>
			panic("krealloc: pages in memory are not loaded correctly");
f012f6b0:	83 ec 04             	sub    $0x4,%esp
f012f6b3:	68 90 ca 13 f0       	push   $0xf013ca90
f012f6b8:	68 b9 12 00 00       	push   $0x12b9
f012f6bd:	68 7a b3 13 f0       	push   $0xf013b37a
f012f6c2:	e8 3e 0b fd ff       	call   f0100205 <_panic>

		ptr_allocations[4] = newAddress;
f012f6c7:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012f6ca:	89 85 50 fe ff ff    	mov    %eax,-0x1b0(%ebp)
		//lastIndices[4] = (10 * Mega - kilo) / sizeof(short) - 1;

		//Reallocate 1st 3 MB to 4 MB
		freeFrames = sys_calculate_free_frames();
f012f6d0:	e8 c8 d4 fd ff       	call   f010cb9d <sys_calculate_free_frames>
f012f6d5:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[6], (4 * Mega - kilo));
f012f6d8:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f012f6de:	83 ec 08             	sub    $0x8,%esp
f012f6e1:	68 00 fc 3f 00       	push   $0x3ffc00
f012f6e6:	50                   	push   %eax
f012f6e7:	e8 59 84 fd ff       	call   f0107b45 <krealloc>
f012f6ec:	83 c4 10             	add    $0x10,%esp
f012f6ef:	89 45 bc             	mov    %eax,-0x44(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012f6f2:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012f6f5:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012f6fa:	77 17                	ja     f012f713 <test_krealloc_BF+0x1a60>
			panic("krealloc: Wrong start address for the allocated space... ");
f012f6fc:	83 ec 04             	sub    $0x4,%esp
f012f6ff:	68 20 c6 13 f0       	push   $0xf013c620
f012f704:	68 c2 12 00 00       	push   $0x12c2
f012f709:	68 7a b3 13 f0       	push   $0xf013b37a
f012f70e:	e8 f2 0a fd ff       	call   f0100205 <_panic>
		if (newAddress == ptr_allocations[6])
f012f713:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f012f719:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f012f71c:	75 17                	jne    f012f735 <test_krealloc_BF+0x1a82>
			panic("Wrong allocation: krealloc reallocated at the same address while there is NO sufficient space after it (it should return new VA)");
f012f71e:	83 ec 04             	sub    $0x4,%esp
f012f721:	68 08 cb 13 f0       	push   $0xf013cb08
f012f726:	68 c4 12 00 00       	push   $0x12c4
f012f72b:	68 7a b3 13 f0       	push   $0xf013b37a
f012f730:	e8 d0 0a fd ff       	call   f0100205 <_panic>
		if ((uint32)newAddress != ACTUAL_START + 4 * Mega) panic("krealloc: Wrong start address for allocated space");
f012f735:	c7 85 bc fe ff ff 00 	movl   $0x1000,-0x144(%ebp)
f012f73c:	10 00 00 
f012f73f:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f012f745:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012f74a:	89 85 b8 fe ff ff    	mov    %eax,-0x148(%ebp)
f012f750:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f012f756:	ba 00 00 00 00       	mov    $0x0,%edx
f012f75b:	f7 b5 bc fe ff ff    	divl   -0x144(%ebp)
f012f761:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f012f767:	29 d0                	sub    %edx,%eax
f012f769:	89 c1                	mov    %eax,%ecx
f012f76b:	c7 85 b4 fe ff ff 00 	movl   $0x1000,-0x14c(%ebp)
f012f772:	10 00 00 
f012f775:	a0 40 26 78 f0       	mov    0xf0782640,%al
f012f77a:	0f b6 d0             	movzbl %al,%edx
f012f77d:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f012f783:	01 d0                	add    %edx,%eax
f012f785:	48                   	dec    %eax
f012f786:	89 85 b0 fe ff ff    	mov    %eax,-0x150(%ebp)
f012f78c:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f012f792:	ba 00 00 00 00       	mov    $0x0,%edx
f012f797:	f7 b5 b4 fe ff ff    	divl   -0x14c(%ebp)
f012f79d:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f012f7a3:	29 d0                	sub    %edx,%eax
f012f7a5:	01 c1                	add    %eax,%ecx
f012f7a7:	c7 85 ac fe ff ff 00 	movl   $0x1000,-0x154(%ebp)
f012f7ae:	10 00 00 
f012f7b1:	a0 40 26 78 f0       	mov    0xf0782640,%al
f012f7b6:	0f b6 c0             	movzbl %al,%eax
f012f7b9:	c1 e0 04             	shl    $0x4,%eax
f012f7bc:	89 c2                	mov    %eax,%edx
f012f7be:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f012f7c4:	01 d0                	add    %edx,%eax
f012f7c6:	48                   	dec    %eax
f012f7c7:	89 85 a8 fe ff ff    	mov    %eax,-0x158(%ebp)
f012f7cd:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f012f7d3:	ba 00 00 00 00       	mov    $0x0,%edx
f012f7d8:	f7 b5 ac fe ff ff    	divl   -0x154(%ebp)
f012f7de:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f012f7e4:	29 d0                	sub    %edx,%eax
f012f7e6:	01 c8                	add    %ecx,%eax
f012f7e8:	8d 90 00 40 40 f6    	lea    -0x9bfc000(%eax),%edx
f012f7ee:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012f7f1:	39 c2                	cmp    %eax,%edx
f012f7f3:	74 17                	je     f012f80c <test_krealloc_BF+0x1b59>
f012f7f5:	83 ec 04             	sub    $0x4,%esp
f012f7f8:	68 5c c6 13 f0       	push   $0xf013c65c
f012f7fd:	68 c5 12 00 00       	push   $0x12c5
f012f802:	68 7a b3 13 f0       	push   $0xf013b37a
f012f807:	e8 f9 09 fd ff       	call   f0100205 <_panic>

		//1 MB only for the new size
		if (freeFrames - sys_calculate_free_frames() != 256)
f012f80c:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012f80f:	e8 89 d3 fd ff       	call   f010cb9d <sys_calculate_free_frames>
f012f814:	29 c3                	sub    %eax,%ebx
f012f816:	89 d8                	mov    %ebx,%eax
f012f818:	3d 00 01 00 00       	cmp    $0x100,%eax
f012f81d:	74 17                	je     f012f836 <test_krealloc_BF+0x1b83>
			panic("krealloc: pages in memory are not loaded correctly");
f012f81f:	83 ec 04             	sub    $0x4,%esp
f012f822:	68 90 ca 13 f0       	push   $0xf013ca90
f012f827:	68 c9 12 00 00       	push   $0x12c9
f012f82c:	68 7a b3 13 f0       	push   $0xf013b37a
f012f831:	e8 cf 09 fd ff       	call   f0100205 <_panic>
		ptr_allocations[6] = newAddress;
f012f836:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012f839:	89 85 58 fe ff ff    	mov    %eax,-0x1a8(%ebp)
		//Reallocate 1st 3 MB (already reallocated to 4 MB) to 20 MB. It should return new VA
		freeFrames = sys_calculate_free_frames();
f012f83f:	e8 59 d3 fd ff       	call   f010cb9d <sys_calculate_free_frames>
f012f844:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[6], (20 * Mega - kilo));
f012f847:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f012f84d:	83 ec 08             	sub    $0x8,%esp
f012f850:	68 00 fc 3f 01       	push   $0x13ffc00
f012f855:	50                   	push   %eax
f012f856:	e8 ea 82 fd ff       	call   f0107b45 <krealloc>
f012f85b:	83 c4 10             	add    $0x10,%esp
f012f85e:	89 45 bc             	mov    %eax,-0x44(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012f861:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012f864:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012f869:	77 17                	ja     f012f882 <test_krealloc_BF+0x1bcf>
			panic("krealloc: Wrong start address for the allocated space... ");
f012f86b:	83 ec 04             	sub    $0x4,%esp
f012f86e:	68 20 c6 13 f0       	push   $0xf013c620
f012f873:	68 cf 12 00 00       	push   $0x12cf
f012f878:	68 7a b3 13 f0       	push   $0xf013b37a
f012f87d:	e8 83 09 fd ff       	call   f0100205 <_panic>
		if (newAddress == ptr_allocations[6])
f012f882:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f012f888:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f012f88b:	75 17                	jne    f012f8a4 <test_krealloc_BF+0x1bf1>
			panic("Wrong allocation: krealloc reallocated at the same address while there is NO sufficient space after it (it should return new VA)");
f012f88d:	83 ec 04             	sub    $0x4,%esp
f012f890:	68 08 cb 13 f0       	push   $0xf013cb08
f012f895:	68 d1 12 00 00       	push   $0x12d1
f012f89a:	68 7a b3 13 f0       	push   $0xf013b37a
f012f89f:	e8 61 09 fd ff       	call   f0100205 <_panic>
		if ((uint32) newAddress != ACTUAL_START + (21 * Mega))
f012f8a4:	c7 85 a4 fe ff ff 00 	movl   $0x1000,-0x15c(%ebp)
f012f8ab:	10 00 00 
f012f8ae:	8b 85 a4 fe ff ff    	mov    -0x15c(%ebp),%eax
f012f8b4:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012f8b9:	89 85 a0 fe ff ff    	mov    %eax,-0x160(%ebp)
f012f8bf:	8b 85 a0 fe ff ff    	mov    -0x160(%ebp),%eax
f012f8c5:	ba 00 00 00 00       	mov    $0x0,%edx
f012f8ca:	f7 b5 a4 fe ff ff    	divl   -0x15c(%ebp)
f012f8d0:	8b 85 a0 fe ff ff    	mov    -0x160(%ebp),%eax
f012f8d6:	29 d0                	sub    %edx,%eax
f012f8d8:	89 c1                	mov    %eax,%ecx
f012f8da:	c7 85 9c fe ff ff 00 	movl   $0x1000,-0x164(%ebp)
f012f8e1:	10 00 00 
f012f8e4:	a0 40 26 78 f0       	mov    0xf0782640,%al
f012f8e9:	0f b6 d0             	movzbl %al,%edx
f012f8ec:	8b 85 9c fe ff ff    	mov    -0x164(%ebp),%eax
f012f8f2:	01 d0                	add    %edx,%eax
f012f8f4:	48                   	dec    %eax
f012f8f5:	89 85 98 fe ff ff    	mov    %eax,-0x168(%ebp)
f012f8fb:	8b 85 98 fe ff ff    	mov    -0x168(%ebp),%eax
f012f901:	ba 00 00 00 00       	mov    $0x0,%edx
f012f906:	f7 b5 9c fe ff ff    	divl   -0x164(%ebp)
f012f90c:	8b 85 98 fe ff ff    	mov    -0x168(%ebp),%eax
f012f912:	29 d0                	sub    %edx,%eax
f012f914:	01 c1                	add    %eax,%ecx
f012f916:	c7 85 94 fe ff ff 00 	movl   $0x1000,-0x16c(%ebp)
f012f91d:	10 00 00 
f012f920:	a0 40 26 78 f0       	mov    0xf0782640,%al
f012f925:	0f b6 c0             	movzbl %al,%eax
f012f928:	c1 e0 04             	shl    $0x4,%eax
f012f92b:	89 c2                	mov    %eax,%edx
f012f92d:	8b 85 94 fe ff ff    	mov    -0x16c(%ebp),%eax
f012f933:	01 d0                	add    %edx,%eax
f012f935:	48                   	dec    %eax
f012f936:	89 85 90 fe ff ff    	mov    %eax,-0x170(%ebp)
f012f93c:	8b 85 90 fe ff ff    	mov    -0x170(%ebp),%eax
f012f942:	ba 00 00 00 00       	mov    $0x0,%edx
f012f947:	f7 b5 94 fe ff ff    	divl   -0x16c(%ebp)
f012f94d:	8b 85 90 fe ff ff    	mov    -0x170(%ebp),%eax
f012f953:	29 d0                	sub    %edx,%eax
f012f955:	01 c8                	add    %ecx,%eax
f012f957:	8d 90 00 40 50 f7    	lea    -0x8afc000(%eax),%edx
f012f95d:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012f960:	39 c2                	cmp    %eax,%edx
f012f962:	74 17                	je     f012f97b <test_krealloc_BF+0x1cc8>
			panic("krealloc: Wrong start address for reallocated space\n");
f012f964:	83 ec 04             	sub    $0x4,%esp
f012f967:	68 28 cc 13 f0       	push   $0xf013cc28
f012f96c:	68 d3 12 00 00       	push   $0x12d3
f012f971:	68 7a b3 13 f0       	push   $0xf013b37a
f012f976:	e8 8a 08 fd ff       	call   f0100205 <_panic>
		//3 MB only for the new size
		if (freeFrames - sys_calculate_free_frames() != (16 * Mega) / PAGE_SIZE)
f012f97b:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012f97e:	e8 1a d2 fd ff       	call   f010cb9d <sys_calculate_free_frames>
f012f983:	29 c3                	sub    %eax,%ebx
f012f985:	89 d8                	mov    %ebx,%eax
f012f987:	3d 00 10 00 00       	cmp    $0x1000,%eax
f012f98c:	74 17                	je     f012f9a5 <test_krealloc_BF+0x1cf2>
			panic("krealloc: pages in memory are not loaded correctly");
f012f98e:	83 ec 04             	sub    $0x4,%esp
f012f991:	68 90 ca 13 f0       	push   $0xf013ca90
f012f996:	68 d6 12 00 00       	push   $0x12d6
f012f99b:	68 7a b3 13 f0       	push   $0xf013b37a
f012f9a0:	e8 60 08 fd ff       	call   f0100205 <_panic>

		ptr_allocations[6] = newAddress;
f012f9a5:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012f9a8:	89 85 58 fe ff ff    	mov    %eax,-0x1a8(%ebp)

		//Test read write access for the new allocated size of 2nd 1 MB
		ptr = (char*) ptr_allocations[1];
f012f9ae:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f012f9b4:	89 85 ec fe ff ff    	mov    %eax,-0x114(%ebp)
		int i;
		sums[0] = 0;
f012f9ba:	c7 85 a0 fd ff ff 00 	movl   $0x0,-0x260(%ebp)
f012f9c1:	00 00 00 
		for (i = 0; i <= lastIndices[1]; ++i) {
f012f9c4:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
f012f9cb:	eb 21                	jmp    f012f9ee <test_krealloc_BF+0x1d3b>
			sums[0] += ptr[i];
f012f9cd:	8b 95 a0 fd ff ff    	mov    -0x260(%ebp),%edx
f012f9d3:	8b 4d d8             	mov    -0x28(%ebp),%ecx
f012f9d6:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f012f9dc:	01 c8                	add    %ecx,%eax
f012f9de:	8a 00                	mov    (%eax),%al
f012f9e0:	0f be c0             	movsbl %al,%eax
f012f9e3:	01 d0                	add    %edx,%eax
f012f9e5:	89 85 a0 fd ff ff    	mov    %eax,-0x260(%ebp)

		//Test read write access for the new allocated size of 2nd 1 MB
		ptr = (char*) ptr_allocations[1];
		int i;
		sums[0] = 0;
		for (i = 0; i <= lastIndices[1]; ++i) {
f012f9eb:	ff 45 d8             	incl   -0x28(%ebp)
f012f9ee:	8b 85 f4 fd ff ff    	mov    -0x20c(%ebp),%eax
f012f9f4:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f012f9f7:	7d d4                	jge    f012f9cd <test_krealloc_BF+0x1d1a>
			sums[0] += ptr[i];

		}
		//cprintf("sum for 2nd 1 MB = %d LIM1 = %d\n", sums[0], (lastIndices[1] - 1));
		if (sums[0] != (lastIndices[1] + 1) * 2)
f012f9f9:	8b 85 a0 fd ff ff    	mov    -0x260(%ebp),%eax
f012f9ff:	8b 95 f4 fd ff ff    	mov    -0x20c(%ebp),%edx
f012fa05:	42                   	inc    %edx
f012fa06:	01 d2                	add    %edx,%edx
f012fa08:	39 d0                	cmp    %edx,%eax
f012fa0a:	74 17                	je     f012fa23 <test_krealloc_BF+0x1d70>
			panic("krealloc: invalid read after re-allocations");
f012fa0c:	83 ec 04             	sub    $0x4,%esp
f012fa0f:	68 c0 cb 13 f0       	push   $0xf013cbc0
f012fa14:	68 e4 12 00 00       	push   $0x12e4
f012fa19:	68 7a b3 13 f0       	push   $0xf013b37a
f012fa1e:	e8 e2 07 fd ff       	call   f0100205 <_panic>

		//Test read write access for the new allocated size of 1st 3 MB
		structArr = (struct MyStruct*) ptr_allocations[6];
f012fa23:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f012fa29:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)

		sums[0] = 0;
f012fa2f:	c7 85 a0 fd ff ff 00 	movl   $0x0,-0x260(%ebp)
f012fa36:	00 00 00 
		sums[1] = 0;
f012fa39:	c7 85 a4 fd ff ff 00 	movl   $0x0,-0x25c(%ebp)
f012fa40:	00 00 00 
		sums[2] = 0;
f012fa43:	c7 85 a8 fd ff ff 00 	movl   $0x0,-0x258(%ebp)
f012fa4a:	00 00 00 
		for (i = 0; i <= lastIndices[6]; ++i) {
f012fa4d:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
f012fa54:	eb 70                	jmp    f012fac6 <test_krealloc_BF+0x1e13>
			sums[0] += structArr[i].a;
f012fa56:	8b 95 a0 fd ff ff    	mov    -0x260(%ebp),%edx
f012fa5c:	8b 45 d8             	mov    -0x28(%ebp),%eax
f012fa5f:	8d 0c c5 00 00 00 00 	lea    0x0(,%eax,8),%ecx
f012fa66:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012fa6c:	01 c8                	add    %ecx,%eax
f012fa6e:	8a 00                	mov    (%eax),%al
f012fa70:	0f be c0             	movsbl %al,%eax
f012fa73:	01 d0                	add    %edx,%eax
f012fa75:	89 85 a0 fd ff ff    	mov    %eax,-0x260(%ebp)
			sums[1] += structArr[i].b;
f012fa7b:	8b 95 a4 fd ff ff    	mov    -0x25c(%ebp),%edx
f012fa81:	8b 45 d8             	mov    -0x28(%ebp),%eax
f012fa84:	8d 0c c5 00 00 00 00 	lea    0x0(,%eax,8),%ecx
f012fa8b:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012fa91:	01 c8                	add    %ecx,%eax
f012fa93:	66 8b 40 02          	mov    0x2(%eax),%ax
f012fa97:	98                   	cwtl   
f012fa98:	01 d0                	add    %edx,%eax
f012fa9a:	89 85 a4 fd ff ff    	mov    %eax,-0x25c(%ebp)
			sums[2] += structArr[i].c;
f012faa0:	8b 95 a8 fd ff ff    	mov    -0x258(%ebp),%edx
f012faa6:	8b 45 d8             	mov    -0x28(%ebp),%eax
f012faa9:	8d 0c c5 00 00 00 00 	lea    0x0(,%eax,8),%ecx
f012fab0:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012fab6:	01 c8                	add    %ecx,%eax
f012fab8:	8b 40 04             	mov    0x4(%eax),%eax
f012fabb:	01 d0                	add    %edx,%eax
f012fabd:	89 85 a8 fd ff ff    	mov    %eax,-0x258(%ebp)
		structArr = (struct MyStruct*) ptr_allocations[6];

		sums[0] = 0;
		sums[1] = 0;
		sums[2] = 0;
		for (i = 0; i <= lastIndices[6]; ++i) {
f012fac3:	ff 45 d8             	incl   -0x28(%ebp)
f012fac6:	8b 85 08 fe ff ff    	mov    -0x1f8(%ebp),%eax
f012facc:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f012facf:	7d 85                	jge    f012fa56 <test_krealloc_BF+0x1da3>
			sums[1] += structArr[i].b;
			sums[2] += structArr[i].c;

		}
		//cprintf("sum for 2nd 1 MB = %d LIM1 = %d\n", sums[0], (lastIndices[1] - 1));
		if (sums[0] != (lastIndices[6] + 1) * 7
f012fad1:	8b 8d a0 fd ff ff    	mov    -0x260(%ebp),%ecx
f012fad7:	8b 85 08 fe ff ff    	mov    -0x1f8(%ebp),%eax
f012fadd:	8d 50 01             	lea    0x1(%eax),%edx
f012fae0:	89 d0                	mov    %edx,%eax
f012fae2:	01 c0                	add    %eax,%eax
f012fae4:	01 d0                	add    %edx,%eax
f012fae6:	01 c0                	add    %eax,%eax
f012fae8:	01 d0                	add    %edx,%eax
f012faea:	39 c1                	cmp    %eax,%ecx
f012faec:	75 3a                	jne    f012fb28 <test_krealloc_BF+0x1e75>
				|| sums[1] != (lastIndices[6] + 1) * 7
f012faee:	8b 8d a4 fd ff ff    	mov    -0x25c(%ebp),%ecx
f012faf4:	8b 85 08 fe ff ff    	mov    -0x1f8(%ebp),%eax
f012fafa:	8d 50 01             	lea    0x1(%eax),%edx
f012fafd:	89 d0                	mov    %edx,%eax
f012faff:	01 c0                	add    %eax,%eax
f012fb01:	01 d0                	add    %edx,%eax
f012fb03:	01 c0                	add    %eax,%eax
f012fb05:	01 d0                	add    %edx,%eax
f012fb07:	39 c1                	cmp    %eax,%ecx
f012fb09:	75 1d                	jne    f012fb28 <test_krealloc_BF+0x1e75>
				|| sums[2] != (lastIndices[6] + 1) * 7)
f012fb0b:	8b 8d a8 fd ff ff    	mov    -0x258(%ebp),%ecx
f012fb11:	8b 85 08 fe ff ff    	mov    -0x1f8(%ebp),%eax
f012fb17:	8d 50 01             	lea    0x1(%eax),%edx
f012fb1a:	89 d0                	mov    %edx,%eax
f012fb1c:	01 c0                	add    %eax,%eax
f012fb1e:	01 d0                	add    %edx,%eax
f012fb20:	01 c0                	add    %eax,%eax
f012fb22:	01 d0                	add    %edx,%eax
f012fb24:	39 c1                	cmp    %eax,%ecx
f012fb26:	74 17                	je     f012fb3f <test_krealloc_BF+0x1e8c>
			panic("krealloc: invalid read after re-allocations");
f012fb28:	83 ec 04             	sub    $0x4,%esp
f012fb2b:	68 c0 cb 13 f0       	push   $0xf013cbc0
f012fb30:	68 f6 12 00 00       	push   $0x12f6
f012fb35:	68 7a b3 13 f0       	push   $0xf013b37a
f012fb3a:	e8 c6 06 fd ff       	call   f0100205 <_panic>

		//Test read write access for the new allocated size of 1st 2 MB
		shortArr = (short*) ptr_allocations[4];
f012fb3f:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f012fb45:	89 85 e4 fe ff ff    	mov    %eax,-0x11c(%ebp)

		sums[0] = 0;
f012fb4b:	c7 85 a0 fd ff ff 00 	movl   $0x0,-0x260(%ebp)
f012fb52:	00 00 00 
		for (i = 0; i <= lastIndices[4]; ++i) {
f012fb55:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
f012fb5c:	eb 24                	jmp    f012fb82 <test_krealloc_BF+0x1ecf>
			sums[0] += shortArr[i];
f012fb5e:	8b 95 a0 fd ff ff    	mov    -0x260(%ebp),%edx
f012fb64:	8b 45 d8             	mov    -0x28(%ebp),%eax
f012fb67:	01 c0                	add    %eax,%eax
f012fb69:	89 c1                	mov    %eax,%ecx
f012fb6b:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f012fb71:	01 c8                	add    %ecx,%eax
f012fb73:	66 8b 00             	mov    (%eax),%ax
f012fb76:	98                   	cwtl   
f012fb77:	01 d0                	add    %edx,%eax
f012fb79:	89 85 a0 fd ff ff    	mov    %eax,-0x260(%ebp)

		//Test read write access for the new allocated size of 1st 2 MB
		shortArr = (short*) ptr_allocations[4];

		sums[0] = 0;
		for (i = 0; i <= lastIndices[4]; ++i) {
f012fb7f:	ff 45 d8             	incl   -0x28(%ebp)
f012fb82:	8b 85 00 fe ff ff    	mov    -0x200(%ebp),%eax
f012fb88:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f012fb8b:	7d d1                	jge    f012fb5e <test_krealloc_BF+0x1eab>
			sums[0] += shortArr[i];
		}
		if (sums[0] != (lastIndices[4] + 1) * 5)
f012fb8d:	8b 95 a0 fd ff ff    	mov    -0x260(%ebp),%edx
f012fb93:	8b 85 00 fe ff ff    	mov    -0x200(%ebp),%eax
f012fb99:	8d 48 01             	lea    0x1(%eax),%ecx
f012fb9c:	89 c8                	mov    %ecx,%eax
f012fb9e:	c1 e0 02             	shl    $0x2,%eax
f012fba1:	01 c8                	add    %ecx,%eax
f012fba3:	39 c2                	cmp    %eax,%edx
f012fba5:	74 17                	je     f012fbbe <test_krealloc_BF+0x1f0b>
			panic("krealloc: invalid read after re-allocations");
f012fba7:	83 ec 04             	sub    $0x4,%esp
f012fbaa:	68 c0 cb 13 f0       	push   $0xf013cbc0
f012fbaf:	68 00 13 00 00       	push   $0x1300
f012fbb4:	68 7a b3 13 f0       	push   $0xf013b37a
f012fbb9:	e8 47 06 fd ff       	call   f0100205 <_panic>

		//Test krealloc with size = 0 after krealloc 1st 3 MB to 20 MB
		freeFrames = sys_calculate_free_frames();
f012fbbe:	e8 da cf fd ff       	call   f010cb9d <sys_calculate_free_frames>
f012fbc3:	89 45 b8             	mov    %eax,-0x48(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f012fbc6:	e8 fd 41 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012fbcb:	89 85 dc fe ff ff    	mov    %eax,-0x124(%ebp)
		krealloc(ptr_allocations[6], 0);
f012fbd1:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f012fbd7:	83 ec 08             	sub    $0x8,%esp
f012fbda:	6a 00                	push   $0x0
f012fbdc:	50                   	push   %eax
f012fbdd:	e8 63 7f fd ff       	call   f0107b45 <krealloc>
f012fbe2:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0)
f012fbe5:	e8 de 41 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012fbea:	3b 85 dc fe ff ff    	cmp    -0x124(%ebp),%eax
f012fbf0:	74 17                	je     f012fc09 <test_krealloc_BF+0x1f56>
			panic(
f012fbf2:	83 ec 04             	sub    $0x4,%esp
f012fbf5:	68 94 b3 13 f0       	push   $0xf013b394
f012fbfa:	68 08 13 00 00       	push   $0x1308
f012fbff:	68 7a b3 13 f0       	push   $0xf013b37a
f012fc04:	e8 fc 05 fd ff       	call   f0100205 <_panic>
					"Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((sys_calculate_free_frames() - freeFrames) != 20 * Mega / PAGE_SIZE)
f012fc09:	e8 8f cf fd ff       	call   f010cb9d <sys_calculate_free_frames>
f012fc0e:	89 c2                	mov    %eax,%edx
f012fc10:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012fc13:	29 c2                	sub    %eax,%edx
f012fc15:	89 d0                	mov    %edx,%eax
f012fc17:	3d 00 14 00 00       	cmp    $0x1400,%eax
f012fc1c:	74 17                	je     f012fc35 <test_krealloc_BF+0x1f82>
			panic("krealloc: pages in memory are not freed correctly");
f012fc1e:	83 ec 04             	sub    $0x4,%esp
f012fc21:	68 50 c8 13 f0       	push   $0xf013c850
f012fc26:	68 0a 13 00 00       	push   $0x130a
f012fc2b:	68 7a b3 13 f0       	push   $0xf013b37a
f012fc30:	e8 d0 05 fd ff       	call   f0100205 <_panic>

		//Test kfree after krealloc 1st 2 MB to 10 MB
		freeFrames = sys_calculate_free_frames();
f012fc35:	e8 63 cf fd ff       	call   f010cb9d <sys_calculate_free_frames>
f012fc3a:	89 45 b8             	mov    %eax,-0x48(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f012fc3d:	e8 86 41 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012fc42:	89 85 dc fe ff ff    	mov    %eax,-0x124(%ebp)
		kfree(ptr_allocations[4]);
f012fc48:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f012fc4e:	83 ec 0c             	sub    $0xc,%esp
f012fc51:	50                   	push   %eax
f012fc52:	e8 f9 7c fd ff       	call   f0107950 <kfree>
f012fc57:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0)
f012fc5a:	e8 69 41 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012fc5f:	3b 85 dc fe ff ff    	cmp    -0x124(%ebp),%eax
f012fc65:	74 17                	je     f012fc7e <test_krealloc_BF+0x1fcb>
			panic(
f012fc67:	83 ec 04             	sub    $0x4,%esp
f012fc6a:	68 94 b3 13 f0       	push   $0xf013b394
f012fc6f:	68 12 13 00 00       	push   $0x1312
f012fc74:	68 7a b3 13 f0       	push   $0xf013b37a
f012fc79:	e8 87 05 fd ff       	call   f0100205 <_panic>
					"Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((sys_calculate_free_frames() - freeFrames) != 10 * Mega / PAGE_SIZE)
f012fc7e:	e8 1a cf fd ff       	call   f010cb9d <sys_calculate_free_frames>
f012fc83:	89 c2                	mov    %eax,%edx
f012fc85:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012fc88:	29 c2                	sub    %eax,%edx
f012fc8a:	89 d0                	mov    %edx,%eax
f012fc8c:	3d 00 0a 00 00       	cmp    $0xa00,%eax
f012fc91:	74 17                	je     f012fcaa <test_krealloc_BF+0x1ff7>
			panic("krealloc: pages in memory are not freed correctly");
f012fc93:	83 ec 04             	sub    $0x4,%esp
f012fc96:	68 50 c8 13 f0       	push   $0xf013c850
f012fc9b:	68 14 13 00 00       	push   $0x1314
f012fca0:	68 7a b3 13 f0       	push   $0xf013b37a
f012fca5:	e8 5b 05 fd ff       	call   f0100205 <_panic>

		//check tables	[15%]
		{
			long long va;
			for (va = KERNEL_HEAP_START; va < (long long) KERNEL_HEAP_MAX; va +=
f012fcaa:	c7 45 d0 00 00 00 f6 	movl   $0xf6000000,-0x30(%ebp)
f012fcb1:	c7 45 d4 00 00 00 00 	movl   $0x0,-0x2c(%ebp)
f012fcb8:	eb 48                	jmp    f012fd02 <test_krealloc_BF+0x204f>
			PTSIZE)
			{
				uint32 *ptr_table;
				get_page_table(ptr_page_directory,  (uint32) va,
f012fcba:	8b 55 d0             	mov    -0x30(%ebp),%edx
f012fcbd:	a1 3c 26 78 f0       	mov    0xf078263c,%eax
f012fcc2:	83 ec 04             	sub    $0x4,%esp
f012fcc5:	8d 8d 98 fd ff ff    	lea    -0x268(%ebp),%ecx
f012fccb:	51                   	push   %ecx
f012fccc:	52                   	push   %edx
f012fccd:	50                   	push   %eax
f012fcce:	e8 de 6d fd ff       	call   f0106ab1 <get_page_table>
f012fcd3:	83 c4 10             	add    $0x10,%esp
						&ptr_table);
				if (ptr_table == NULL) {
f012fcd6:	8b 85 98 fd ff ff    	mov    -0x268(%ebp),%eax
f012fcdc:	85 c0                	test   %eax,%eax
f012fcde:	75 17                	jne    f012fcf7 <test_krealloc_BF+0x2044>
					panic(
f012fce0:	83 ec 04             	sub    $0x4,%esp
f012fce3:	68 7c bc 13 f0       	push   $0xf013bc7c
f012fce8:	68 21 13 00 00       	push   $0x1321
f012fced:	68 7a b3 13 f0       	push   $0xf013b37a
f012fcf2:	e8 0e 05 fd ff       	call   f0100205 <_panic>
			panic("krealloc: pages in memory are not freed correctly");

		//check tables	[15%]
		{
			long long va;
			for (va = KERNEL_HEAP_START; va < (long long) KERNEL_HEAP_MAX; va +=
f012fcf7:	81 45 d0 00 00 40 00 	addl   $0x400000,-0x30(%ebp)
f012fcfe:	83 55 d4 00          	adcl   $0x0,-0x2c(%ebp)
f012fd02:	83 7d d4 00          	cmpl   $0x0,-0x2c(%ebp)
f012fd06:	78 b2                	js     f012fcba <test_krealloc_BF+0x2007>
f012fd08:	83 7d d4 00          	cmpl   $0x0,-0x2c(%ebp)
f012fd0c:	7f 09                	jg     f012fd17 <test_krealloc_BF+0x2064>
f012fd0e:	81 7d d0 ff ef ff ff 	cmpl   $0xffffefff,-0x30(%ebp)
f012fd15:	76 a3                	jbe    f012fcba <test_krealloc_BF+0x2007>
			}
		}

	}

	cprintf("\b\b\b100%\n");
f012fd17:	83 ec 0c             	sub    $0xc,%esp
f012fd1a:	68 5e b5 13 f0       	push   $0xf013b55e
f012fd1f:	e8 ea 0f fd ff       	call   f0100d0e <cprintf>
f012fd24:	83 c4 10             	add    $0x10,%esp

	cprintf("\nCongratulations!! test krealloc BF completed successfully.\n");
f012fd27:	83 ec 0c             	sub    $0xc,%esp
f012fd2a:	68 60 cc 13 f0       	push   $0xf013cc60
f012fd2f:	e8 da 0f fd ff       	call   f0100d0e <cprintf>
f012fd34:	83 c4 10             	add    $0x10,%esp
	return 0;
f012fd37:	b8 00 00 00 00       	mov    $0x0,%eax
}
f012fd3c:	8d 65 f8             	lea    -0x8(%ebp),%esp
f012fd3f:	5b                   	pop    %ebx
f012fd40:	5f                   	pop    %edi
f012fd41:	5d                   	pop    %ebp
f012fd42:	c3                   	ret    

f012fd43 <test_initialize_dyn_block_system>:

//2022
int test_initialize_dyn_block_system(int freeFrames_before, int freeDiskFrames_before, int freeFrames_after, int freeDiskFrames_after)
{
f012fd43:	55                   	push   %ebp
f012fd44:	89 e5                	mov    %esp,%ebp
f012fd46:	83 ec 28             	sub    $0x28,%esp
		panic("USE_KHEAP = 0 & it shall be 1. Go to 'inc/memlayout.h' and set USE_KHEAP by 1. Then, repeat the test again.");
	if(STATIC_MEMBLOCK_ALLOC != 0)
		panic("STATIC_MEMBLOCK_ALLOC = 1 & it shall be 0. Go to 'inc/dynamic_allocator.h' and set STATIC_MEMBLOCK_ALLOC by 0. Then, repeat the test again.");

	//Check MAX_MEM_BLOCK_CNT
	if(MAX_MEM_BLOCK_CNT != ((0xFFFFF000-0xF6000000)/4096))
f012fd49:	a1 c4 25 78 f0       	mov    0xf07825c4,%eax
f012fd4e:	3d ff 9f 00 00       	cmp    $0x9fff,%eax
f012fd53:	74 17                	je     f012fd6c <test_initialize_dyn_block_system+0x29>
	{
		panic("Wrong initialize: MAX_MEM_BLOCK_CNT is not set with the correct size of the array");
f012fd55:	83 ec 04             	sub    $0x4,%esp
f012fd58:	68 a0 cc 13 f0       	push   $0xf013cca0
f012fd5d:	68 39 13 00 00       	push   $0x1339
f012fd62:	68 7a b3 13 f0       	push   $0xf013b37a
f012fd67:	e8 99 04 fd ff       	call   f0100205 <_panic>
	}

	//Check number of nodes in AvailableMemBlocksList
	if (LIST_SIZE(&(AvailableMemBlocksList)) != MAX_MEM_BLOCK_CNT-1)
f012fd6c:	a1 64 26 78 f0       	mov    0xf0782664,%eax
f012fd71:	8b 15 c4 25 78 f0    	mov    0xf07825c4,%edx
f012fd77:	4a                   	dec    %edx
f012fd78:	39 d0                	cmp    %edx,%eax
f012fd7a:	74 17                	je     f012fd93 <test_initialize_dyn_block_system+0x50>
	{
		panic("Wrong initialize: Wrong size for the AvailableMemBlocksList");
f012fd7c:	83 ec 04             	sub    $0x4,%esp
f012fd7f:	68 f4 cc 13 f0       	push   $0xf013ccf4
f012fd84:	68 3f 13 00 00       	push   $0x133f
f012fd89:	68 7a b3 13 f0       	push   $0xf013b37a
f012fd8e:	e8 72 04 fd ff       	call   f0100205 <_panic>
	}

	//Check number of nodes in AllocMemBlocksList
	if (LIST_SIZE(&(AllocMemBlocksList)) != 0)
f012fd93:	a1 94 25 78 f0       	mov    0xf0782594,%eax
f012fd98:	85 c0                	test   %eax,%eax
f012fd9a:	74 17                	je     f012fdb3 <test_initialize_dyn_block_system+0x70>
	{
		panic("Wrong initialize: Wrong size for the AllocMemBlocksList");
f012fd9c:	83 ec 04             	sub    $0x4,%esp
f012fd9f:	68 30 cd 13 f0       	push   $0xf013cd30
f012fda4:	68 45 13 00 00       	push   $0x1345
f012fda9:	68 7a b3 13 f0       	push   $0xf013b37a
f012fdae:	e8 52 04 fd ff       	call   f0100205 <_panic>
	}

	//Check number of nodes in FreeMemBlocksList
	if (LIST_SIZE(&(FreeMemBlocksList)) != 1)
f012fdb3:	a1 30 26 78 f0       	mov    0xf0782630,%eax
f012fdb8:	83 f8 01             	cmp    $0x1,%eax
f012fdbb:	74 17                	je     f012fdd4 <test_initialize_dyn_block_system+0x91>
	{
		panic("Wrong initialize: Wrong size for the FreeMemBlocksList");
f012fdbd:	83 ec 04             	sub    $0x4,%esp
f012fdc0:	68 68 cd 13 f0       	push   $0xf013cd68
f012fdc5:	68 4b 13 00 00       	push   $0x134b
f012fdca:	68 7a b3 13 f0       	push   $0xf013b37a
f012fdcf:	e8 31 04 fd ff       	call   f0100205 <_panic>
	}

	//Check content of FreeMemBlocksList
	struct MemBlock* block = LIST_FIRST(&FreeMemBlocksList);
f012fdd4:	a1 24 26 78 f0       	mov    0xf0782624,%eax
f012fdd9:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if(block == NULL || block->size != (KERNEL_HEAP_MAX-0xF6000000-DYNAMIC_ALLOCATOR_DS) || block->sva != 0xF6000000+DYNAMIC_ALLOCATOR_DS)
f012fddc:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f012fde0:	74 66                	je     f012fe48 <test_initialize_dyn_block_system+0x105>
f012fde2:	8b 45 f0             	mov    -0x10(%ebp),%eax
f012fde5:	8b 48 0c             	mov    0xc(%eax),%ecx
f012fde8:	c7 45 ec 00 10 00 00 	movl   $0x1000,-0x14(%ebp)
f012fdef:	8b 45 ec             	mov    -0x14(%ebp),%eax
f012fdf2:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012fdf7:	89 45 e8             	mov    %eax,-0x18(%ebp)
f012fdfa:	8b 45 e8             	mov    -0x18(%ebp),%eax
f012fdfd:	ba 00 00 00 00       	mov    $0x0,%edx
f012fe02:	f7 75 ec             	divl   -0x14(%ebp)
f012fe05:	8b 45 e8             	mov    -0x18(%ebp),%eax
f012fe08:	29 d0                	sub    %edx,%eax
f012fe0a:	ba 00 f0 ff 09       	mov    $0x9fff000,%edx
f012fe0f:	29 c2                	sub    %eax,%edx
f012fe11:	89 d0                	mov    %edx,%eax
f012fe13:	39 c1                	cmp    %eax,%ecx
f012fe15:	75 31                	jne    f012fe48 <test_initialize_dyn_block_system+0x105>
f012fe17:	8b 45 f0             	mov    -0x10(%ebp),%eax
f012fe1a:	8b 48 08             	mov    0x8(%eax),%ecx
f012fe1d:	c7 45 e4 00 10 00 00 	movl   $0x1000,-0x1c(%ebp)
f012fe24:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f012fe27:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012fe2c:	89 45 e0             	mov    %eax,-0x20(%ebp)
f012fe2f:	8b 45 e0             	mov    -0x20(%ebp),%eax
f012fe32:	ba 00 00 00 00       	mov    $0x0,%edx
f012fe37:	f7 75 e4             	divl   -0x1c(%ebp)
f012fe3a:	8b 45 e0             	mov    -0x20(%ebp),%eax
f012fe3d:	29 d0                	sub    %edx,%eax
f012fe3f:	2d 00 00 00 0a       	sub    $0xa000000,%eax
f012fe44:	39 c1                	cmp    %eax,%ecx
f012fe46:	74 17                	je     f012fe5f <test_initialize_dyn_block_system+0x11c>
	{
		panic("Wrong initialize: Wrong content for the FreeMemBlocksList.");
f012fe48:	83 ec 04             	sub    $0x4,%esp
f012fe4b:	68 a0 cd 13 f0       	push   $0xf013cda0
f012fe50:	68 52 13 00 00       	push   $0x1352
f012fe55:	68 7a b3 13 f0       	push   $0xf013b37a
f012fe5a:	e8 a6 03 fd ff       	call   f0100205 <_panic>
	}

	//Check number of disk and memory frames
	if ((freeDiskFrames_after - freeDiskFrames_before) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012fe5f:	8b 45 14             	mov    0x14(%ebp),%eax
f012fe62:	3b 45 0c             	cmp    0xc(%ebp),%eax
f012fe65:	74 17                	je     f012fe7e <test_initialize_dyn_block_system+0x13b>
f012fe67:	83 ec 04             	sub    $0x4,%esp
f012fe6a:	68 94 b3 13 f0       	push   $0xf013b394
f012fe6f:	68 56 13 00 00       	push   $0x1356
f012fe74:	68 7a b3 13 f0       	push   $0xf013b37a
f012fe79:	e8 87 03 fd ff       	call   f0100205 <_panic>
	if ((freeFrames_before - freeFrames_after) != 160) panic("Wrong allocation: pages are not loaded successfully into memory %d", (freeFrames_before - freeFrames_after));
f012fe7e:	8b 45 08             	mov    0x8(%ebp),%eax
f012fe81:	2b 45 10             	sub    0x10(%ebp),%eax
f012fe84:	3d a0 00 00 00       	cmp    $0xa0,%eax
f012fe89:	74 1b                	je     f012fea6 <test_initialize_dyn_block_system+0x163>
f012fe8b:	8b 45 08             	mov    0x8(%ebp),%eax
f012fe8e:	2b 45 10             	sub    0x10(%ebp),%eax
f012fe91:	50                   	push   %eax
f012fe92:	68 dc cd 13 f0       	push   $0xf013cddc
f012fe97:	68 57 13 00 00       	push   $0x1357
f012fe9c:	68 7a b3 13 f0       	push   $0xf013b37a
f012fea1:	e8 5f 03 fd ff       	call   f0100205 <_panic>

	//Checking permissions on the allocated spaces
	{
		uint32 a = 0xF6000000;
f012fea6:	c7 45 f4 00 00 00 f6 	movl   $0xf6000000,-0xc(%ebp)
		while(1)
		{
			if (CB(ptr_page_directory, a, 0)!=1 || CB(ptr_page_directory, a, 1)!=1 || CB(ptr_page_directory, a, 2)!=0)
f012fead:	a1 3c 26 78 f0       	mov    0xf078263c,%eax
f012feb2:	83 ec 04             	sub    $0x4,%esp
f012feb5:	6a 00                	push   $0x0
f012feb7:	ff 75 f4             	pushl  -0xc(%ebp)
f012feba:	50                   	push   %eax
f012febb:	e8 e9 5f fe ff       	call   f0115ea9 <CB>
f012fec0:	83 c4 10             	add    $0x10,%esp
f012fec3:	83 f8 01             	cmp    $0x1,%eax
f012fec6:	75 35                	jne    f012fefd <test_initialize_dyn_block_system+0x1ba>
f012fec8:	a1 3c 26 78 f0       	mov    0xf078263c,%eax
f012fecd:	83 ec 04             	sub    $0x4,%esp
f012fed0:	6a 01                	push   $0x1
f012fed2:	ff 75 f4             	pushl  -0xc(%ebp)
f012fed5:	50                   	push   %eax
f012fed6:	e8 ce 5f fe ff       	call   f0115ea9 <CB>
f012fedb:	83 c4 10             	add    $0x10,%esp
f012fede:	83 f8 01             	cmp    $0x1,%eax
f012fee1:	75 1a                	jne    f012fefd <test_initialize_dyn_block_system+0x1ba>
f012fee3:	a1 3c 26 78 f0       	mov    0xf078263c,%eax
f012fee8:	83 ec 04             	sub    $0x4,%esp
f012feeb:	6a 02                	push   $0x2
f012feed:	ff 75 f4             	pushl  -0xc(%ebp)
f012fef0:	50                   	push   %eax
f012fef1:	e8 b3 5f fe ff       	call   f0115ea9 <CB>
f012fef6:	83 c4 10             	add    $0x10,%esp
f012fef9:	85 c0                	test   %eax,%eax
f012fefb:	74 17                	je     f012ff14 <test_initialize_dyn_block_system+0x1d1>
				panic("Wrong initialize: Wrong permissions - pages mapped with wrong permissions. Check them again.");
f012fefd:	83 ec 04             	sub    $0x4,%esp
f012ff00:	68 20 ce 13 f0       	push   $0xf013ce20
f012ff05:	68 5f 13 00 00       	push   $0x135f
f012ff0a:	68 7a b3 13 f0       	push   $0xf013b37a
f012ff0f:	e8 f1 02 fd ff       	call   f0100205 <_panic>

			a+=4096;
f012ff14:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
			if(a == (0xF6000000+DYNAMIC_ALLOCATOR_DS))
f012ff1b:	c7 45 dc 00 10 00 00 	movl   $0x1000,-0x24(%ebp)
f012ff22:	8b 45 dc             	mov    -0x24(%ebp),%eax
f012ff25:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012ff2a:	89 45 d8             	mov    %eax,-0x28(%ebp)
f012ff2d:	8b 45 d8             	mov    -0x28(%ebp),%eax
f012ff30:	ba 00 00 00 00       	mov    $0x0,%edx
f012ff35:	f7 75 dc             	divl   -0x24(%ebp)
f012ff38:	8b 45 d8             	mov    -0x28(%ebp),%eax
f012ff3b:	29 d0                	sub    %edx,%eax
f012ff3d:	2d 00 00 00 0a       	sub    $0xa000000,%eax
f012ff42:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012ff45:	74 05                	je     f012ff4c <test_initialize_dyn_block_system+0x209>
				break;
		}
f012ff47:	e9 61 ff ff ff       	jmp    f012fead <test_initialize_dyn_block_system+0x16a>
			if (CB(ptr_page_directory, a, 0)!=1 || CB(ptr_page_directory, a, 1)!=1 || CB(ptr_page_directory, a, 2)!=0)
				panic("Wrong initialize: Wrong permissions - pages mapped with wrong permissions. Check them again.");

			a+=4096;
			if(a == (0xF6000000+DYNAMIC_ALLOCATOR_DS))
				break;
f012ff4c:	90                   	nop
		}
	}

	//===============================================//
	cprintf("\nCongratulations!! test initialize_dyn_block_system of KHEAP completed successfully.\n");
f012ff4d:	83 ec 0c             	sub    $0xc,%esp
f012ff50:	68 80 ce 13 f0       	push   $0xf013ce80
f012ff55:	e8 b4 0d fd ff       	call   f0100d0e <cprintf>
f012ff5a:	83 c4 10             	add    $0x10,%esp
	return 0;
f012ff5d:	b8 00 00 00 00       	mov    $0x0,%eax
}
f012ff62:	c9                   	leave  
f012ff63:	c3                   	ret    

f012ff64 <nearest_pow2_ceil>:
#include <kern/cpu/sched.h>
#include <kern/disk/pagefile_manager.h>
#include <kern/mem/memory_manager.h>
#include "../cons/console.h"

inline unsigned int nearest_pow2_ceil(unsigned int x) {
f012ff64:	55                   	push   %ebp
f012ff65:	89 e5                	mov    %esp,%ebp
f012ff67:	83 ec 10             	sub    $0x10,%esp
    if (x <= 1) return 1;
f012ff6a:	83 7d 08 01          	cmpl   $0x1,0x8(%ebp)
f012ff6e:	77 07                	ja     f012ff77 <nearest_pow2_ceil+0x13>
f012ff70:	b8 01 00 00 00       	mov    $0x1,%eax
f012ff75:	eb 20                	jmp    f012ff97 <nearest_pow2_ceil+0x33>
    int power = 2;
f012ff77:	c7 45 fc 02 00 00 00 	movl   $0x2,-0x4(%ebp)
    x--;
f012ff7e:	ff 4d 08             	decl   0x8(%ebp)
    while (x >>= 1) {
f012ff81:	eb 08                	jmp    f012ff8b <nearest_pow2_ceil+0x27>
    	power <<= 1;
f012ff83:	8b 45 fc             	mov    -0x4(%ebp),%eax
f012ff86:	01 c0                	add    %eax,%eax
f012ff88:	89 45 fc             	mov    %eax,-0x4(%ebp)

inline unsigned int nearest_pow2_ceil(unsigned int x) {
    if (x <= 1) return 1;
    int power = 2;
    x--;
    while (x >>= 1) {
f012ff8b:	d1 6d 08             	shrl   0x8(%ebp)
f012ff8e:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f012ff92:	75 ef                	jne    f012ff83 <nearest_pow2_ceil+0x1f>
    	power <<= 1;
    }
    return power;
f012ff94:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
f012ff97:	c9                   	leave  
f012ff98:	c3                   	ret    

f012ff99 <log2_ceil>:
inline unsigned int log2_ceil(unsigned int x) {
f012ff99:	55                   	push   %ebp
f012ff9a:	89 e5                	mov    %esp,%ebp
f012ff9c:	83 ec 10             	sub    $0x10,%esp
    if (x <= 1) return 1;
f012ff9f:	83 7d 08 01          	cmpl   $0x1,0x8(%ebp)
f012ffa3:	77 07                	ja     f012ffac <log2_ceil+0x13>
f012ffa5:	b8 01 00 00 00       	mov    $0x1,%eax
f012ffaa:	eb 1b                	jmp    f012ffc7 <log2_ceil+0x2e>
    //int power = 2;
    int bits_cnt = 2 ;
f012ffac:	c7 45 fc 02 00 00 00 	movl   $0x2,-0x4(%ebp)
    x--;
f012ffb3:	ff 4d 08             	decl   0x8(%ebp)
    while (x >>= 1) {
f012ffb6:	eb 03                	jmp    f012ffbb <log2_ceil+0x22>
    	//power <<= 1;
    	bits_cnt++ ;
f012ffb8:	ff 45 fc             	incl   -0x4(%ebp)
inline unsigned int log2_ceil(unsigned int x) {
    if (x <= 1) return 1;
    //int power = 2;
    int bits_cnt = 2 ;
    x--;
    while (x >>= 1) {
f012ffbb:	d1 6d 08             	shrl   0x8(%ebp)
f012ffbe:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f012ffc2:	75 f4                	jne    f012ffb8 <log2_ceil+0x1f>
    	//power <<= 1;
    	bits_cnt++ ;
    }
    return bits_cnt;
f012ffc4:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
f012ffc7:	c9                   	leave  
f012ffc8:	c3                   	ret    

f012ffc9 <detect_loop_in_FrameInfo_list>:
void detect_loop_in_FrameInfo_list(struct FrameInfo_List* fi_list)
{
f012ffc9:	55                   	push   %ebp
f012ffca:	89 e5                	mov    %esp,%ebp
f012ffcc:	83 ec 18             	sub    $0x18,%esp
	struct  FrameInfo * slowPtr = LIST_FIRST(fi_list);
f012ffcf:	8b 45 08             	mov    0x8(%ebp),%eax
f012ffd2:	8b 00                	mov    (%eax),%eax
f012ffd4:	89 45 f4             	mov    %eax,-0xc(%ebp)
	struct  FrameInfo * fastPtr = LIST_FIRST(fi_list);
f012ffd7:	8b 45 08             	mov    0x8(%ebp),%eax
f012ffda:	8b 00                	mov    (%eax),%eax
f012ffdc:	89 45 f0             	mov    %eax,-0x10(%ebp)


	while (slowPtr && fastPtr) {
f012ffdf:	eb 52                	jmp    f0130033 <detect_loop_in_FrameInfo_list+0x6a>
		fastPtr = LIST_NEXT(fastPtr); // advance the fast pointer
f012ffe1:	8b 45 f0             	mov    -0x10(%ebp),%eax
f012ffe4:	8b 00                	mov    (%eax),%eax
f012ffe6:	89 45 f0             	mov    %eax,-0x10(%ebp)
		if (fastPtr == slowPtr) // and check if its equal to the slow pointer
f012ffe9:	8b 45 f0             	mov    -0x10(%ebp),%eax
f012ffec:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012ffef:	75 12                	jne    f0130003 <detect_loop_in_FrameInfo_list+0x3a>
		{
			cprintf("loop detected in modiflist\n");
f012fff1:	83 ec 0c             	sub    $0xc,%esp
f012fff4:	68 d8 ce 13 f0       	push   $0xf013ced8
f012fff9:	e8 10 0d fd ff       	call   f0100d0e <cprintf>
f012fffe:	83 c4 10             	add    $0x10,%esp
			break;
f0130001:	eb 3f                	jmp    f0130042 <detect_loop_in_FrameInfo_list+0x79>
		}

		if (fastPtr == NULL) {
f0130003:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0130007:	74 38                	je     f0130041 <detect_loop_in_FrameInfo_list+0x78>
			break; // since fastPtr is NULL we reached the tail
		}

		fastPtr = LIST_NEXT(fastPtr); //advance and check again
f0130009:	8b 45 f0             	mov    -0x10(%ebp),%eax
f013000c:	8b 00                	mov    (%eax),%eax
f013000e:	89 45 f0             	mov    %eax,-0x10(%ebp)
		if (fastPtr == slowPtr) {
f0130011:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0130014:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0130017:	75 12                	jne    f013002b <detect_loop_in_FrameInfo_list+0x62>
			cprintf("loop detected in list\n");
f0130019:	83 ec 0c             	sub    $0xc,%esp
f013001c:	68 f4 ce 13 f0       	push   $0xf013cef4
f0130021:	e8 e8 0c fd ff       	call   f0100d0e <cprintf>
f0130026:	83 c4 10             	add    $0x10,%esp
			break;
f0130029:	eb 17                	jmp    f0130042 <detect_loop_in_FrameInfo_list+0x79>
		}

		slowPtr = LIST_NEXT(slowPtr); // advance the slow pointer only once
f013002b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f013002e:	8b 00                	mov    (%eax),%eax
f0130030:	89 45 f4             	mov    %eax,-0xc(%ebp)
{
	struct  FrameInfo * slowPtr = LIST_FIRST(fi_list);
	struct  FrameInfo * fastPtr = LIST_FIRST(fi_list);


	while (slowPtr && fastPtr) {
f0130033:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0130037:	74 09                	je     f0130042 <detect_loop_in_FrameInfo_list+0x79>
f0130039:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f013003d:	75 a2                	jne    f012ffe1 <detect_loop_in_FrameInfo_list+0x18>
f013003f:	eb 01                	jmp    f0130042 <detect_loop_in_FrameInfo_list+0x79>
			cprintf("loop detected in modiflist\n");
			break;
		}

		if (fastPtr == NULL) {
			break; // since fastPtr is NULL we reached the tail
f0130041:	90                   	nop
			break;
		}

		slowPtr = LIST_NEXT(slowPtr); // advance the slow pointer only once
	}
	cprintf("finished  loop detection\n");
f0130042:	83 ec 0c             	sub    $0xc,%esp
f0130045:	68 0b cf 13 f0       	push   $0xf013cf0b
f013004a:	e8 bf 0c fd ff       	call   f0100d0e <cprintf>
f013004f:	83 c4 10             	add    $0x10,%esp
}
f0130052:	90                   	nop
f0130053:	c9                   	leave  
f0130054:	c3                   	ret    

f0130055 <scarce_memory>:

void scarce_memory()
{
f0130055:	55                   	push   %ebp
f0130056:	89 e5                	mov    %esp,%ebp
f0130058:	83 ec 28             	sub    $0x28,%esp
	uint32 total_size_tobe_allocated = ((100 - memory_scarce_threshold_percentage)*number_of_frames)/100;
f013005b:	a1 b0 25 78 f0       	mov    0xf07825b0,%eax
f0130060:	ba 64 00 00 00       	mov    $0x64,%edx
f0130065:	29 c2                	sub    %eax,%edx
f0130067:	a1 d0 25 78 f0       	mov    0xf07825d0,%eax
f013006c:	0f af c2             	imul   %edx,%eax
f013006f:	ba 1f 85 eb 51       	mov    $0x51eb851f,%edx
f0130074:	f7 e2                	mul    %edx
f0130076:	89 d0                	mov    %edx,%eax
f0130078:	c1 e8 05             	shr    $0x5,%eax
f013007b:	89 45 f4             	mov    %eax,-0xc(%ebp)
//	cprintf("total_size_tobe_allocated %d\n", number_of_frames);
	if (((100 - memory_scarce_threshold_percentage)*number_of_frames) % 100 > 0)
f013007e:	a1 b0 25 78 f0       	mov    0xf07825b0,%eax
f0130083:	ba 64 00 00 00       	mov    $0x64,%edx
f0130088:	29 c2                	sub    %eax,%edx
f013008a:	a1 d0 25 78 f0       	mov    0xf07825d0,%eax
f013008f:	89 d1                	mov    %edx,%ecx
f0130091:	0f af c8             	imul   %eax,%ecx
f0130094:	b8 1f 85 eb 51       	mov    $0x51eb851f,%eax
f0130099:	f7 e1                	mul    %ecx
f013009b:	c1 ea 05             	shr    $0x5,%edx
f013009e:	89 d0                	mov    %edx,%eax
f01300a0:	c1 e0 02             	shl    $0x2,%eax
f01300a3:	01 d0                	add    %edx,%eax
f01300a5:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f01300ac:	01 d0                	add    %edx,%eax
f01300ae:	c1 e0 02             	shl    $0x2,%eax
f01300b1:	29 c1                	sub    %eax,%ecx
f01300b3:	89 ca                	mov    %ecx,%edx
f01300b5:	85 d2                	test   %edx,%edx
f01300b7:	74 03                	je     f01300bc <scarce_memory+0x67>
		total_size_tobe_allocated++;
f01300b9:	ff 45 f4             	incl   -0xc(%ebp)

	uint32 size_of_already_allocated = number_of_frames - LIST_SIZE(&free_frame_list) ;
f01300bc:	8b 15 d0 25 78 f0    	mov    0xf07825d0,%edx
f01300c2:	a1 e4 25 78 f0       	mov    0xf07825e4,%eax
f01300c7:	29 c2                	sub    %eax,%edx
f01300c9:	89 d0                	mov    %edx,%eax
f01300cb:	89 45 ec             	mov    %eax,-0x14(%ebp)
	uint32 size_tobe_allocated = total_size_tobe_allocated - size_of_already_allocated;
f01300ce:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01300d1:	2b 45 ec             	sub    -0x14(%ebp),%eax
f01300d4:	89 45 e8             	mov    %eax,-0x18(%ebp)
//	cprintf("size_of_already_allocated %d\n", size_of_already_allocated);
//	cprintf("size to be allocated %d\n", size_tobe_allocated);
	int i = 0 ;
f01300d7:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	struct FrameInfo* ptr_tmp_FI ;
	for (; i <= size_tobe_allocated ; i++)
f01300de:	eb 12                	jmp    f01300f2 <scarce_memory+0x9d>
	{
		allocate_frame(&ptr_tmp_FI) ;
f01300e0:	83 ec 0c             	sub    $0xc,%esp
f01300e3:	8d 45 e4             	lea    -0x1c(%ebp),%eax
f01300e6:	50                   	push   %eax
f01300e7:	e8 06 68 fd ff       	call   f01068f2 <allocate_frame>
f01300ec:	83 c4 10             	add    $0x10,%esp
	uint32 size_tobe_allocated = total_size_tobe_allocated - size_of_already_allocated;
//	cprintf("size_of_already_allocated %d\n", size_of_already_allocated);
//	cprintf("size to be allocated %d\n", size_tobe_allocated);
	int i = 0 ;
	struct FrameInfo* ptr_tmp_FI ;
	for (; i <= size_tobe_allocated ; i++)
f01300ef:	ff 45 f0             	incl   -0x10(%ebp)
f01300f2:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01300f5:	3b 45 e8             	cmp    -0x18(%ebp),%eax
f01300f8:	76 e6                	jbe    f01300e0 <scarce_memory+0x8b>
	{
		allocate_frame(&ptr_tmp_FI) ;
	}
}
f01300fa:	90                   	nop
f01300fb:	c9                   	leave  
f01300fc:	c3                   	ret    

f01300fd <calc_no_pages_tobe_removed_from_ready_exit_queues>:

uint32 calc_no_pages_tobe_removed_from_ready_exit_queues(uint32 WS_or_MEMORY_flag)
{
f01300fd:	55                   	push   %ebp
f01300fe:	89 e5                	mov    %esp,%ebp
f0130100:	83 ec 38             	sub    $0x38,%esp
	uint32 no_of_pages_tobe_removed_from_ready = 0;
f0130103:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	uint32 no_of_pages_tobe_removed_from_exit = 0;
f013010a:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	uint32 no_of_pages_tobe_removed_from_curenv = 0;
f0130111:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
	if(WS_or_MEMORY_flag == 1)	// THEN MEMORY SHALL BE FREED
f0130118:	83 7d 08 01          	cmpl   $0x1,0x8(%ebp)
f013011c:	0f 85 d0 01 00 00    	jne    f01302f2 <calc_no_pages_tobe_removed_from_ready_exit_queues+0x1f5>
	{
		for(int i = 0; i < num_of_ready_queues; i++)
f0130122:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
f0130129:	e9 de 00 00 00       	jmp    f013020c <calc_no_pages_tobe_removed_from_ready_exit_queues+0x10f>
		{
			struct Env * ptr_ready_env = NULL;
f013012e:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
			LIST_FOREACH(ptr_ready_env, &(env_ready_queues[i]))
f0130135:	a1 a8 25 78 f0       	mov    0xf07825a8,%eax
f013013a:	8b 55 e8             	mov    -0x18(%ebp),%edx
f013013d:	c1 e2 04             	shl    $0x4,%edx
f0130140:	01 d0                	add    %edx,%eax
f0130142:	8b 00                	mov    (%eax),%eax
f0130144:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f0130147:	e9 85 00 00 00       	jmp    f01301d1 <calc_no_pages_tobe_removed_from_ready_exit_queues+0xd4>
			{
				int num_of_pages_in_WS = env_page_ws_get_size(ptr_ready_env);
f013014c:	83 ec 0c             	sub    $0xc,%esp
f013014f:	ff 75 e4             	pushl  -0x1c(%ebp)
f0130152:	e8 bf 7c fd ff       	call   f0107e16 <env_page_ws_get_size>
f0130157:	83 c4 10             	add    $0x10,%esp
f013015a:	89 45 d0             	mov    %eax,-0x30(%ebp)
				int num_of_pages_to_be_removed = curenv->percentage_of_WS_pages_to_be_removed * num_of_pages_in_WS / 100;
f013015d:	a1 b4 1c 78 f0       	mov    0xf0781cb4,%eax
f0130162:	8b 90 a0 05 00 00    	mov    0x5a0(%eax),%edx
f0130168:	8b 45 d0             	mov    -0x30(%ebp),%eax
f013016b:	0f af c2             	imul   %edx,%eax
f013016e:	ba 1f 85 eb 51       	mov    $0x51eb851f,%edx
f0130173:	f7 e2                	mul    %edx
f0130175:	89 d0                	mov    %edx,%eax
f0130177:	c1 e8 05             	shr    $0x5,%eax
f013017a:	89 45 e0             	mov    %eax,-0x20(%ebp)
				if ((curenv->percentage_of_WS_pages_to_be_removed * num_of_pages_in_WS) % 100 > 0)
f013017d:	a1 b4 1c 78 f0       	mov    0xf0781cb4,%eax
f0130182:	8b 90 a0 05 00 00    	mov    0x5a0(%eax),%edx
f0130188:	8b 45 d0             	mov    -0x30(%ebp),%eax
f013018b:	89 d1                	mov    %edx,%ecx
f013018d:	0f af c8             	imul   %eax,%ecx
f0130190:	b8 1f 85 eb 51       	mov    $0x51eb851f,%eax
f0130195:	f7 e1                	mul    %ecx
f0130197:	c1 ea 05             	shr    $0x5,%edx
f013019a:	89 d0                	mov    %edx,%eax
f013019c:	c1 e0 02             	shl    $0x2,%eax
f013019f:	01 d0                	add    %edx,%eax
f01301a1:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f01301a8:	01 d0                	add    %edx,%eax
f01301aa:	c1 e0 02             	shl    $0x2,%eax
f01301ad:	29 c1                	sub    %eax,%ecx
f01301af:	89 ca                	mov    %ecx,%edx
f01301b1:	85 d2                	test   %edx,%edx
f01301b3:	74 03                	je     f01301b8 <calc_no_pages_tobe_removed_from_ready_exit_queues+0xbb>
					num_of_pages_to_be_removed++;
f01301b5:	ff 45 e0             	incl   -0x20(%ebp)
				no_of_pages_tobe_removed_from_ready += num_of_pages_to_be_removed;
f01301b8:	8b 45 e0             	mov    -0x20(%ebp),%eax
f01301bb:	01 45 f4             	add    %eax,-0xc(%ebp)
	if(WS_or_MEMORY_flag == 1)	// THEN MEMORY SHALL BE FREED
	{
		for(int i = 0; i < num_of_ready_queues; i++)
		{
			struct Env * ptr_ready_env = NULL;
			LIST_FOREACH(ptr_ready_env, &(env_ready_queues[i]))
f01301be:	a1 a8 25 78 f0       	mov    0xf07825a8,%eax
f01301c3:	8b 55 e8             	mov    -0x18(%ebp),%edx
f01301c6:	c1 e2 04             	shl    $0x4,%edx
f01301c9:	01 d0                	add    %edx,%eax
f01301cb:	8b 40 08             	mov    0x8(%eax),%eax
f01301ce:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f01301d1:	a1 a8 25 78 f0       	mov    0xf07825a8,%eax
f01301d6:	8b 55 e8             	mov    -0x18(%ebp),%edx
f01301d9:	c1 e2 04             	shl    $0x4,%edx
f01301dc:	01 d0                	add    %edx,%eax
f01301de:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f01301e2:	74 08                	je     f01301ec <calc_no_pages_tobe_removed_from_ready_exit_queues+0xef>
f01301e4:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f01301e7:	8b 52 44             	mov    0x44(%edx),%edx
f01301ea:	eb 05                	jmp    f01301f1 <calc_no_pages_tobe_removed_from_ready_exit_queues+0xf4>
f01301ec:	ba 00 00 00 00       	mov    $0x0,%edx
f01301f1:	89 50 08             	mov    %edx,0x8(%eax)
f01301f4:	8b 40 08             	mov    0x8(%eax),%eax
f01301f7:	85 c0                	test   %eax,%eax
f01301f9:	0f 85 4d ff ff ff    	jne    f013014c <calc_no_pages_tobe_removed_from_ready_exit_queues+0x4f>
f01301ff:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f0130203:	0f 85 43 ff ff ff    	jne    f013014c <calc_no_pages_tobe_removed_from_ready_exit_queues+0x4f>
	uint32 no_of_pages_tobe_removed_from_ready = 0;
	uint32 no_of_pages_tobe_removed_from_exit = 0;
	uint32 no_of_pages_tobe_removed_from_curenv = 0;
	if(WS_or_MEMORY_flag == 1)	// THEN MEMORY SHALL BE FREED
	{
		for(int i = 0; i < num_of_ready_queues; i++)
f0130209:	ff 45 e8             	incl   -0x18(%ebp)
f013020c:	a0 40 26 78 f0       	mov    0xf0782640,%al
f0130211:	0f b6 c0             	movzbl %al,%eax
f0130214:	3b 45 e8             	cmp    -0x18(%ebp),%eax
f0130217:	0f 8f 11 ff ff ff    	jg     f013012e <calc_no_pages_tobe_removed_from_ready_exit_queues+0x31>
					num_of_pages_to_be_removed++;
				no_of_pages_tobe_removed_from_ready += num_of_pages_to_be_removed;
			}
		}

		struct Env * ptr_exit_env = NULL;
f013021d:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
		LIST_FOREACH(ptr_exit_env, &env_exit_queue)
f0130224:	a1 b4 25 78 f0       	mov    0xf07825b4,%eax
f0130229:	89 45 dc             	mov    %eax,-0x24(%ebp)
f013022c:	eb 19                	jmp    f0130247 <calc_no_pages_tobe_removed_from_ready_exit_queues+0x14a>
		{
			no_of_pages_tobe_removed_from_exit += env_page_ws_get_size(ptr_exit_env);
f013022e:	83 ec 0c             	sub    $0xc,%esp
f0130231:	ff 75 dc             	pushl  -0x24(%ebp)
f0130234:	e8 dd 7b fd ff       	call   f0107e16 <env_page_ws_get_size>
f0130239:	83 c4 10             	add    $0x10,%esp
f013023c:	01 45 f0             	add    %eax,-0x10(%ebp)
				no_of_pages_tobe_removed_from_ready += num_of_pages_to_be_removed;
			}
		}

		struct Env * ptr_exit_env = NULL;
		LIST_FOREACH(ptr_exit_env, &env_exit_queue)
f013023f:	a1 bc 25 78 f0       	mov    0xf07825bc,%eax
f0130244:	89 45 dc             	mov    %eax,-0x24(%ebp)
f0130247:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f013024b:	74 08                	je     f0130255 <calc_no_pages_tobe_removed_from_ready_exit_queues+0x158>
f013024d:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0130250:	8b 40 44             	mov    0x44(%eax),%eax
f0130253:	eb 05                	jmp    f013025a <calc_no_pages_tobe_removed_from_ready_exit_queues+0x15d>
f0130255:	b8 00 00 00 00       	mov    $0x0,%eax
f013025a:	a3 bc 25 78 f0       	mov    %eax,0xf07825bc
f013025f:	a1 bc 25 78 f0       	mov    0xf07825bc,%eax
f0130264:	85 c0                	test   %eax,%eax
f0130266:	75 c6                	jne    f013022e <calc_no_pages_tobe_removed_from_ready_exit_queues+0x131>
f0130268:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f013026c:	75 c0                	jne    f013022e <calc_no_pages_tobe_removed_from_ready_exit_queues+0x131>
		{
			no_of_pages_tobe_removed_from_exit += env_page_ws_get_size(ptr_exit_env);
		}

		if(curenv != NULL)
f013026e:	a1 b4 1c 78 f0       	mov    0xf0781cb4,%eax
f0130273:	85 c0                	test   %eax,%eax
f0130275:	0f 84 ec 00 00 00    	je     f0130367 <calc_no_pages_tobe_removed_from_ready_exit_queues+0x26a>
		{
			int num_of_pages_in_WS = env_page_ws_get_size(curenv);
f013027b:	a1 b4 1c 78 f0       	mov    0xf0781cb4,%eax
f0130280:	83 ec 0c             	sub    $0xc,%esp
f0130283:	50                   	push   %eax
f0130284:	e8 8d 7b fd ff       	call   f0107e16 <env_page_ws_get_size>
f0130289:	83 c4 10             	add    $0x10,%esp
f013028c:	89 45 cc             	mov    %eax,-0x34(%ebp)
			int num_of_pages_to_be_removed = curenv->percentage_of_WS_pages_to_be_removed * num_of_pages_in_WS / 100;
f013028f:	a1 b4 1c 78 f0       	mov    0xf0781cb4,%eax
f0130294:	8b 90 a0 05 00 00    	mov    0x5a0(%eax),%edx
f013029a:	8b 45 cc             	mov    -0x34(%ebp),%eax
f013029d:	0f af c2             	imul   %edx,%eax
f01302a0:	ba 1f 85 eb 51       	mov    $0x51eb851f,%edx
f01302a5:	f7 e2                	mul    %edx
f01302a7:	89 d0                	mov    %edx,%eax
f01302a9:	c1 e8 05             	shr    $0x5,%eax
f01302ac:	89 45 d8             	mov    %eax,-0x28(%ebp)
			if ((curenv->percentage_of_WS_pages_to_be_removed * num_of_pages_in_WS) % 100 > 0)
f01302af:	a1 b4 1c 78 f0       	mov    0xf0781cb4,%eax
f01302b4:	8b 90 a0 05 00 00    	mov    0x5a0(%eax),%edx
f01302ba:	8b 45 cc             	mov    -0x34(%ebp),%eax
f01302bd:	89 d1                	mov    %edx,%ecx
f01302bf:	0f af c8             	imul   %eax,%ecx
f01302c2:	b8 1f 85 eb 51       	mov    $0x51eb851f,%eax
f01302c7:	f7 e1                	mul    %ecx
f01302c9:	c1 ea 05             	shr    $0x5,%edx
f01302cc:	89 d0                	mov    %edx,%eax
f01302ce:	c1 e0 02             	shl    $0x2,%eax
f01302d1:	01 d0                	add    %edx,%eax
f01302d3:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f01302da:	01 d0                	add    %edx,%eax
f01302dc:	c1 e0 02             	shl    $0x2,%eax
f01302df:	29 c1                	sub    %eax,%ecx
f01302e1:	89 ca                	mov    %ecx,%edx
f01302e3:	85 d2                	test   %edx,%edx
f01302e5:	74 03                	je     f01302ea <calc_no_pages_tobe_removed_from_ready_exit_queues+0x1ed>
				num_of_pages_to_be_removed++;
f01302e7:	ff 45 d8             	incl   -0x28(%ebp)
			no_of_pages_tobe_removed_from_curenv = num_of_pages_to_be_removed;
f01302ea:	8b 45 d8             	mov    -0x28(%ebp),%eax
f01302ed:	89 45 ec             	mov    %eax,-0x14(%ebp)
f01302f0:	eb 75                	jmp    f0130367 <calc_no_pages_tobe_removed_from_ready_exit_queues+0x26a>
		}
	}
	else	// THEN RAPID PROCESS SHALL BE FREED ONLY
	{
		int num_of_pages_in_WS = env_page_ws_get_size(curenv);
f01302f2:	a1 b4 1c 78 f0       	mov    0xf0781cb4,%eax
f01302f7:	83 ec 0c             	sub    $0xc,%esp
f01302fa:	50                   	push   %eax
f01302fb:	e8 16 7b fd ff       	call   f0107e16 <env_page_ws_get_size>
f0130300:	83 c4 10             	add    $0x10,%esp
f0130303:	89 45 c8             	mov    %eax,-0x38(%ebp)
		int num_of_pages_to_be_removed = curenv->percentage_of_WS_pages_to_be_removed * num_of_pages_in_WS / 100;
f0130306:	a1 b4 1c 78 f0       	mov    0xf0781cb4,%eax
f013030b:	8b 90 a0 05 00 00    	mov    0x5a0(%eax),%edx
f0130311:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0130314:	0f af c2             	imul   %edx,%eax
f0130317:	ba 1f 85 eb 51       	mov    $0x51eb851f,%edx
f013031c:	f7 e2                	mul    %edx
f013031e:	89 d0                	mov    %edx,%eax
f0130320:	c1 e8 05             	shr    $0x5,%eax
f0130323:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		if ((curenv->percentage_of_WS_pages_to_be_removed * num_of_pages_in_WS) % 100 > 0)
f0130326:	a1 b4 1c 78 f0       	mov    0xf0781cb4,%eax
f013032b:	8b 90 a0 05 00 00    	mov    0x5a0(%eax),%edx
f0130331:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0130334:	89 d1                	mov    %edx,%ecx
f0130336:	0f af c8             	imul   %eax,%ecx
f0130339:	b8 1f 85 eb 51       	mov    $0x51eb851f,%eax
f013033e:	f7 e1                	mul    %ecx
f0130340:	c1 ea 05             	shr    $0x5,%edx
f0130343:	89 d0                	mov    %edx,%eax
f0130345:	c1 e0 02             	shl    $0x2,%eax
f0130348:	01 d0                	add    %edx,%eax
f013034a:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0130351:	01 d0                	add    %edx,%eax
f0130353:	c1 e0 02             	shl    $0x2,%eax
f0130356:	29 c1                	sub    %eax,%ecx
f0130358:	89 ca                	mov    %ecx,%edx
f013035a:	85 d2                	test   %edx,%edx
f013035c:	74 03                	je     f0130361 <calc_no_pages_tobe_removed_from_ready_exit_queues+0x264>
			num_of_pages_to_be_removed++;
f013035e:	ff 45 d4             	incl   -0x2c(%ebp)
		no_of_pages_tobe_removed_from_curenv = num_of_pages_to_be_removed;
f0130361:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0130364:	89 45 ec             	mov    %eax,-0x14(%ebp)
	}

	return no_of_pages_tobe_removed_from_curenv + no_of_pages_tobe_removed_from_ready + no_of_pages_tobe_removed_from_exit;
f0130367:	8b 55 ec             	mov    -0x14(%ebp),%edx
f013036a:	8b 45 f4             	mov    -0xc(%ebp),%eax
f013036d:	01 c2                	add    %eax,%edx
f013036f:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0130372:	01 d0                	add    %edx,%eax
}
f0130374:	c9                   	leave  
f0130375:	c3                   	ret    

f0130376 <schenv>:


void schenv()
{
f0130376:	55                   	push   %ebp
f0130377:	89 e5                	mov    %esp,%ebp
f0130379:	83 ec 18             	sub    $0x18,%esp
	__nl = 0;
f013037c:	c6 05 68 26 78 f0 00 	movb   $0x0,0xf0782668
	__ne = NULL;
f0130383:	c7 05 f8 25 78 f0 00 	movl   $0x0,0xf07825f8
f013038a:	00 00 00 
	for (int i = 0; i < num_of_ready_queues; ++i)
f013038d:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0130394:	eb 3f                	jmp    f01303d5 <schenv+0x5f>
	{
		if (queue_size(&(env_ready_queues[i])))
f0130396:	a1 a8 25 78 f0       	mov    0xf07825a8,%eax
f013039b:	8b 55 f4             	mov    -0xc(%ebp),%edx
f013039e:	c1 e2 04             	shl    $0x4,%edx
f01303a1:	01 d0                	add    %edx,%eax
f01303a3:	83 ec 0c             	sub    $0xc,%esp
f01303a6:	50                   	push   %eax
f01303a7:	e8 d9 40 fd ff       	call   f0104485 <queue_size>
f01303ac:	83 c4 10             	add    $0x10,%esp
f01303af:	85 c0                	test   %eax,%eax
f01303b1:	74 1f                	je     f01303d2 <schenv+0x5c>
		{
			__ne = LIST_LAST(&(env_ready_queues[i]));
f01303b3:	a1 a8 25 78 f0       	mov    0xf07825a8,%eax
f01303b8:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01303bb:	c1 e2 04             	shl    $0x4,%edx
f01303be:	01 d0                	add    %edx,%eax
f01303c0:	8b 40 04             	mov    0x4(%eax),%eax
f01303c3:	a3 f8 25 78 f0       	mov    %eax,0xf07825f8
			__nl = i;
f01303c8:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01303cb:	a2 68 26 78 f0       	mov    %al,0xf0782668
			break;
f01303d0:	eb 10                	jmp    f01303e2 <schenv+0x6c>

void schenv()
{
	__nl = 0;
	__ne = NULL;
	for (int i = 0; i < num_of_ready_queues; ++i)
f01303d2:	ff 45 f4             	incl   -0xc(%ebp)
f01303d5:	a0 40 26 78 f0       	mov    0xf0782640,%al
f01303da:	0f b6 c0             	movzbl %al,%eax
f01303dd:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01303e0:	7f b4                	jg     f0130396 <schenv+0x20>
			__ne = LIST_LAST(&(env_ready_queues[i]));
			__nl = i;
			break;
		}
	}
	if (curenv != NULL)
f01303e2:	a1 b4 1c 78 f0       	mov    0xf0781cb4,%eax
f01303e7:	85 c0                	test   %eax,%eax
f01303e9:	0f 84 86 00 00 00    	je     f0130475 <schenv+0xff>
	{
		if (__ne != NULL)
f01303ef:	a1 f8 25 78 f0       	mov    0xf07825f8,%eax
f01303f4:	85 c0                	test   %eax,%eax
f01303f6:	74 4b                	je     f0130443 <schenv+0xcd>
		{
			if ((__pl + 1) < __nl)
f01303f8:	a0 a0 25 78 f0       	mov    0xf07825a0,%al
f01303fd:	0f b6 c0             	movzbl %al,%eax
f0130400:	8d 50 01             	lea    0x1(%eax),%edx
f0130403:	a0 68 26 78 f0       	mov    0xf0782668,%al
f0130408:	0f b6 c0             	movzbl %al,%eax
f013040b:	39 c2                	cmp    %eax,%edx
f013040d:	7d 66                	jge    f0130475 <schenv+0xff>
			{
				__ne = curenv;
f013040f:	a1 b4 1c 78 f0       	mov    0xf0781cb4,%eax
f0130414:	a3 f8 25 78 f0       	mov    %eax,0xf07825f8
				__nl = __pl < num_of_ready_queues-1? __pl + 1 : __pl ;
f0130419:	a0 a0 25 78 f0       	mov    0xf07825a0,%al
f013041e:	0f b6 c0             	movzbl %al,%eax
f0130421:	8a 15 40 26 78 f0    	mov    0xf0782640,%dl
f0130427:	0f b6 d2             	movzbl %dl,%edx
f013042a:	4a                   	dec    %edx
f013042b:	39 d0                	cmp    %edx,%eax
f013042d:	7d 08                	jge    f0130437 <schenv+0xc1>
f013042f:	a0 a0 25 78 f0       	mov    0xf07825a0,%al
f0130434:	40                   	inc    %eax
f0130435:	eb 05                	jmp    f013043c <schenv+0xc6>
f0130437:	a0 a0 25 78 f0       	mov    0xf07825a0,%al
f013043c:	a2 68 26 78 f0       	mov    %al,0xf0782668
		{
			__ne = curenv;
			__nl = __pl < num_of_ready_queues-1? __pl + 1 : __pl ;
		}
	}
}
f0130441:	eb 32                	jmp    f0130475 <schenv+0xff>
				__nl = __pl < num_of_ready_queues-1? __pl + 1 : __pl ;
			}
		}
		else
		{
			__ne = curenv;
f0130443:	a1 b4 1c 78 f0       	mov    0xf0781cb4,%eax
f0130448:	a3 f8 25 78 f0       	mov    %eax,0xf07825f8
			__nl = __pl < num_of_ready_queues-1? __pl + 1 : __pl ;
f013044d:	a0 a0 25 78 f0       	mov    0xf07825a0,%al
f0130452:	0f b6 c0             	movzbl %al,%eax
f0130455:	8a 15 40 26 78 f0    	mov    0xf0782640,%dl
f013045b:	0f b6 d2             	movzbl %dl,%edx
f013045e:	4a                   	dec    %edx
f013045f:	39 d0                	cmp    %edx,%eax
f0130461:	7d 08                	jge    f013046b <schenv+0xf5>
f0130463:	a0 a0 25 78 f0       	mov    0xf07825a0,%al
f0130468:	40                   	inc    %eax
f0130469:	eb 05                	jmp    f0130470 <schenv+0xfa>
f013046b:	a0 a0 25 78 f0       	mov    0xf07825a0,%al
f0130470:	a2 68 26 78 f0       	mov    %al,0xf0782668
		}
	}
}
f0130475:	90                   	nop
f0130476:	c9                   	leave  
f0130477:	c3                   	ret    

f0130478 <chksch>:

void chksch(uint8 onoff)
{
f0130478:	55                   	push   %ebp
f0130479:	89 e5                	mov    %esp,%ebp
f013047b:	83 ec 04             	sub    $0x4,%esp
f013047e:	8b 45 08             	mov    0x8(%ebp),%eax
f0130481:	88 45 fc             	mov    %al,-0x4(%ebp)
	__pe = NULL;
f0130484:	c7 05 54 26 78 f0 00 	movl   $0x0,0xf0782654
f013048b:	00 00 00 
	__ne = NULL;
f013048e:	c7 05 f8 25 78 f0 00 	movl   $0x0,0xf07825f8
f0130495:	00 00 00 
	__pl = 0 ;
f0130498:	c6 05 a0 25 78 f0 00 	movb   $0x0,0xf07825a0
	__nl = 0 ;
f013049f:	c6 05 68 26 78 f0 00 	movb   $0x0,0xf0782668
	__chkstatus = onoff;
f01304a6:	8a 45 fc             	mov    -0x4(%ebp),%al
f01304a9:	a2 f4 25 78 f0       	mov    %al,0xf07825f4
}
f01304ae:	90                   	nop
f01304af:	c9                   	leave  
f01304b0:	c3                   	ret    

f01304b1 <chk1>:
void chk1()
{
f01304b1:	55                   	push   %ebp
f01304b2:	89 e5                	mov    %esp,%ebp
f01304b4:	83 ec 08             	sub    $0x8,%esp
	if (__chkstatus == 0)
f01304b7:	a0 f4 25 78 f0       	mov    0xf07825f4,%al
f01304bc:	84 c0                	test   %al,%al
f01304be:	74 2b                	je     f01304eb <chk1+0x3a>
		return ;
	__pe = curenv;
f01304c0:	a1 b4 1c 78 f0       	mov    0xf0781cb4,%eax
f01304c5:	a3 54 26 78 f0       	mov    %eax,0xf0782654
	__pl = __nl ;
f01304ca:	a0 68 26 78 f0       	mov    0xf0782668,%al
f01304cf:	a2 a0 25 78 f0       	mov    %al,0xf07825a0
	if (__pe == NULL)
f01304d4:	a1 54 26 78 f0       	mov    0xf0782654,%eax
f01304d9:	85 c0                	test   %eax,%eax
f01304db:	75 07                	jne    f01304e4 <chk1+0x33>
	{
		__pl = 0;
f01304dd:	c6 05 a0 25 78 f0 00 	movb   $0x0,0xf07825a0
	}
	//cprintf("chk1: current = %s @ level %d\n", __pe == NULL? "NULL" : __pe->prog_name, __pl);
	schenv();
f01304e4:	e8 8d fe ff ff       	call   f0130376 <schenv>
f01304e9:	eb 01                	jmp    f01304ec <chk1+0x3b>
	__chkstatus = onoff;
}
void chk1()
{
	if (__chkstatus == 0)
		return ;
f01304eb:	90                   	nop
	{
		__pl = 0;
	}
	//cprintf("chk1: current = %s @ level %d\n", __pe == NULL? "NULL" : __pe->prog_name, __pl);
	schenv();
}
f01304ec:	c9                   	leave  
f01304ed:	c3                   	ret    

f01304ee <chk2>:
void chk2(struct Env* __se)
{
f01304ee:	55                   	push   %ebp
f01304ef:	89 e5                	mov    %esp,%ebp
f01304f1:	53                   	push   %ebx
f01304f2:	83 ec 14             	sub    $0x14,%esp
	if (__chkstatus == 0)
f01304f5:	a0 f4 25 78 f0       	mov    0xf07825f4,%al
f01304fa:	84 c0                	test   %al,%al
f01304fc:	0f 84 43 02 00 00    	je     f0130745 <chk2+0x257>
		return ;

	//cprintf("chk2: next = %s @ level %d\n", __ne == NULL? "NULL" : __ne->prog_name, __nl);

	assert_endall(__se == __ne);
f0130502:	a1 f8 25 78 f0       	mov    0xf07825f8,%eax
f0130507:	39 45 08             	cmp    %eax,0x8(%ebp)
f013050a:	74 19                	je     f0130525 <chk2+0x37>
f013050c:	68 25 cf 13 f0       	push   $0xf013cf25
f0130511:	68 32 cf 13 f0       	push   $0xf013cf32
f0130516:	68 c0 00 00 00       	push   $0xc0
f013051b:	68 47 cf 13 f0       	push   $0xf013cf47
f0130520:	e8 96 fd fc ff       	call   f01002bb <_panic_all>
	//cprintf("%d - %d\n", kclock_read_cnt0_latch() , TIMER_DIV((1000/quantums[__nl])));

	if (__ne != NULL)
f0130525:	a1 f8 25 78 f0       	mov    0xf07825f8,%eax
f013052a:	85 c0                	test   %eax,%eax
f013052c:	0f 84 25 01 00 00    	je     f0130657 <chk2+0x169>
	{
		uint16 upper = TIMER_DIV((1000/quantums[__nl])) ;
f0130532:	8b 15 ec 25 78 f0    	mov    0xf07825ec,%edx
f0130538:	a0 68 26 78 f0       	mov    0xf0782668,%al
f013053d:	0f b6 c0             	movzbl %al,%eax
f0130540:	01 d0                	add    %edx,%eax
f0130542:	8a 00                	mov    (%eax),%al
f0130544:	0f b6 d8             	movzbl %al,%ebx
f0130547:	b8 f4 01 00 00       	mov    $0x1f4,%eax
f013054c:	99                   	cltd   
f013054d:	f7 fb                	idiv   %ebx
f013054f:	8d 88 de 34 12 00    	lea    0x1234de(%eax),%ecx
f0130555:	8b 15 ec 25 78 f0    	mov    0xf07825ec,%edx
f013055b:	a0 68 26 78 f0       	mov    0xf0782668,%al
f0130560:	0f b6 c0             	movzbl %al,%eax
f0130563:	01 d0                	add    %edx,%eax
f0130565:	8a 00                	mov    (%eax),%al
f0130567:	0f b6 d8             	movzbl %al,%ebx
f013056a:	b8 e8 03 00 00       	mov    $0x3e8,%eax
f013056f:	99                   	cltd   
f0130570:	f7 fb                	idiv   %ebx
f0130572:	89 c3                	mov    %eax,%ebx
f0130574:	89 c8                	mov    %ecx,%eax
f0130576:	99                   	cltd   
f0130577:	f7 fb                	idiv   %ebx
f0130579:	66 89 45 ee          	mov    %ax,-0x12(%ebp)
		upper = upper % 2 == 1? upper+1 : upper ;
f013057d:	66 8b 45 ee          	mov    -0x12(%ebp),%ax
f0130581:	83 e0 01             	and    $0x1,%eax
f0130584:	66 85 c0             	test   %ax,%ax
f0130587:	74 07                	je     f0130590 <chk2+0xa2>
f0130589:	66 8b 45 ee          	mov    -0x12(%ebp),%ax
f013058d:	40                   	inc    %eax
f013058e:	eb 04                	jmp    f0130594 <chk2+0xa6>
f0130590:	66 8b 45 ee          	mov    -0x12(%ebp),%ax
f0130594:	66 89 45 ee          	mov    %ax,-0x12(%ebp)
		uint16 lower = 90 * upper / 100 ;
f0130598:	0f b7 55 ee          	movzwl -0x12(%ebp),%edx
f013059c:	89 d0                	mov    %edx,%eax
f013059e:	c1 e0 02             	shl    $0x2,%eax
f01305a1:	01 d0                	add    %edx,%eax
f01305a3:	01 c0                	add    %eax,%eax
f01305a5:	01 d0                	add    %edx,%eax
f01305a7:	c1 e0 02             	shl    $0x2,%eax
f01305aa:	01 d0                	add    %edx,%eax
f01305ac:	01 c0                	add    %eax,%eax
f01305ae:	89 c1                	mov    %eax,%ecx
f01305b0:	b8 1f 85 eb 51       	mov    $0x51eb851f,%eax
f01305b5:	f7 e9                	imul   %ecx
f01305b7:	c1 fa 05             	sar    $0x5,%edx
f01305ba:	89 c8                	mov    %ecx,%eax
f01305bc:	c1 f8 1f             	sar    $0x1f,%eax
f01305bf:	29 c2                	sub    %eax,%edx
f01305c1:	89 d0                	mov    %edx,%eax
f01305c3:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
		uint16 current = kclock_read_cnt0();
f01305c7:	e8 8a 3d fd ff       	call   f0104356 <kclock_read_cnt0>
f01305cc:	66 89 45 ea          	mov    %ax,-0x16(%ebp)
		//cprintf("current = %d, lower = %d, upper = %d\n", current, lower, upper);
		assert_endall(current > lower && current <= upper) ;
f01305d0:	66 8b 45 ea          	mov    -0x16(%ebp),%ax
f01305d4:	66 3b 45 ec          	cmp    -0x14(%ebp),%ax
f01305d8:	76 0a                	jbe    f01305e4 <chk2+0xf6>
f01305da:	66 8b 45 ea          	mov    -0x16(%ebp),%ax
f01305de:	66 3b 45 ee          	cmp    -0x12(%ebp),%ax
f01305e2:	76 19                	jbe    f01305fd <chk2+0x10f>
f01305e4:	68 60 cf 13 f0       	push   $0xf013cf60
f01305e9:	68 32 cf 13 f0       	push   $0xf013cf32
f01305ee:	68 ca 00 00 00       	push   $0xca
f01305f3:	68 47 cf 13 f0       	push   $0xf013cf47
f01305f8:	e8 be fc fc ff       	call   f01002bb <_panic_all>

		for (int i = 0; i < num_of_ready_queues; ++i)
f01305fd:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0130604:	eb 44                	jmp    f013064a <chk2+0x15c>
		{
			assert_endall(find_env_in_queue(&(env_ready_queues[i]), __ne->env_id) == NULL);
f0130606:	a1 f8 25 78 f0       	mov    0xf07825f8,%eax
f013060b:	8b 40 4c             	mov    0x4c(%eax),%eax
f013060e:	89 c2                	mov    %eax,%edx
f0130610:	a1 a8 25 78 f0       	mov    0xf07825a8,%eax
f0130615:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0130618:	c1 e1 04             	shl    $0x4,%ecx
f013061b:	01 c8                	add    %ecx,%eax
f013061d:	83 ec 08             	sub    $0x8,%esp
f0130620:	52                   	push   %edx
f0130621:	50                   	push   %eax
f0130622:	e8 78 40 fd ff       	call   f010469f <find_env_in_queue>
f0130627:	83 c4 10             	add    $0x10,%esp
f013062a:	85 c0                	test   %eax,%eax
f013062c:	74 19                	je     f0130647 <chk2+0x159>
f013062e:	68 84 cf 13 f0       	push   $0xf013cf84
f0130633:	68 32 cf 13 f0       	push   $0xf013cf32
f0130638:	68 ce 00 00 00       	push   $0xce
f013063d:	68 47 cf 13 f0       	push   $0xf013cf47
f0130642:	e8 74 fc fc ff       	call   f01002bb <_panic_all>
		uint16 lower = 90 * upper / 100 ;
		uint16 current = kclock_read_cnt0();
		//cprintf("current = %d, lower = %d, upper = %d\n", current, lower, upper);
		assert_endall(current > lower && current <= upper) ;

		for (int i = 0; i < num_of_ready_queues; ++i)
f0130647:	ff 45 f4             	incl   -0xc(%ebp)
f013064a:	a0 40 26 78 f0       	mov    0xf0782640,%al
f013064f:	0f b6 c0             	movzbl %al,%eax
f0130652:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0130655:	7f af                	jg     f0130606 <chk2+0x118>
		{
			assert_endall(find_env_in_queue(&(env_ready_queues[i]), __ne->env_id) == NULL);
		}
	}
	if (__pe != NULL && __pe != __ne)
f0130657:	a1 54 26 78 f0       	mov    0xf0782654,%eax
f013065c:	85 c0                	test   %eax,%eax
f013065e:	0f 84 e2 00 00 00    	je     f0130746 <chk2+0x258>
f0130664:	8b 15 54 26 78 f0    	mov    0xf0782654,%edx
f013066a:	a1 f8 25 78 f0       	mov    0xf07825f8,%eax
f013066f:	39 c2                	cmp    %eax,%edx
f0130671:	0f 84 cf 00 00 00    	je     f0130746 <chk2+0x258>
	{
		uint8 __tl = __pl == num_of_ready_queues-1 ? __pl : __pl + 1 ;
f0130677:	a0 a0 25 78 f0       	mov    0xf07825a0,%al
f013067c:	0f b6 c0             	movzbl %al,%eax
f013067f:	8a 15 40 26 78 f0    	mov    0xf0782640,%dl
f0130685:	0f b6 d2             	movzbl %dl,%edx
f0130688:	4a                   	dec    %edx
f0130689:	39 d0                	cmp    %edx,%eax
f013068b:	74 08                	je     f0130695 <chk2+0x1a7>
f013068d:	a0 a0 25 78 f0       	mov    0xf07825a0,%al
f0130692:	40                   	inc    %eax
f0130693:	eb 05                	jmp    f013069a <chk2+0x1ac>
f0130695:	a0 a0 25 78 f0       	mov    0xf07825a0,%al
f013069a:	88 45 e9             	mov    %al,-0x17(%ebp)
		assert_endall(find_env_in_queue(&(env_ready_queues[__tl]), __pe->env_id) != NULL);
f013069d:	a1 54 26 78 f0       	mov    0xf0782654,%eax
f01306a2:	8b 40 4c             	mov    0x4c(%eax),%eax
f01306a5:	89 c2                	mov    %eax,%edx
f01306a7:	a1 a8 25 78 f0       	mov    0xf07825a8,%eax
f01306ac:	0f b6 4d e9          	movzbl -0x17(%ebp),%ecx
f01306b0:	c1 e1 04             	shl    $0x4,%ecx
f01306b3:	01 c8                	add    %ecx,%eax
f01306b5:	83 ec 08             	sub    $0x8,%esp
f01306b8:	52                   	push   %edx
f01306b9:	50                   	push   %eax
f01306ba:	e8 e0 3f fd ff       	call   f010469f <find_env_in_queue>
f01306bf:	83 c4 10             	add    $0x10,%esp
f01306c2:	85 c0                	test   %eax,%eax
f01306c4:	75 19                	jne    f01306df <chk2+0x1f1>
f01306c6:	68 c4 cf 13 f0       	push   $0xf013cfc4
f01306cb:	68 32 cf 13 f0       	push   $0xf013cf32
f01306d0:	68 d4 00 00 00       	push   $0xd4
f01306d5:	68 47 cf 13 f0       	push   $0xf013cf47
f01306da:	e8 dc fb fc ff       	call   f01002bb <_panic_all>
		for (int i = 0; i < num_of_ready_queues; ++i)
f01306df:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f01306e6:	eb 4e                	jmp    f0130736 <chk2+0x248>
		{
			if (i == __tl) continue;
f01306e8:	0f b6 45 e9          	movzbl -0x17(%ebp),%eax
f01306ec:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f01306ef:	74 41                	je     f0130732 <chk2+0x244>
			assert_endall(find_env_in_queue(&(env_ready_queues[i]), __pe->env_id) == NULL) ;
f01306f1:	a1 54 26 78 f0       	mov    0xf0782654,%eax
f01306f6:	8b 40 4c             	mov    0x4c(%eax),%eax
f01306f9:	89 c2                	mov    %eax,%edx
f01306fb:	a1 a8 25 78 f0       	mov    0xf07825a8,%eax
f0130700:	8b 4d f0             	mov    -0x10(%ebp),%ecx
f0130703:	c1 e1 04             	shl    $0x4,%ecx
f0130706:	01 c8                	add    %ecx,%eax
f0130708:	83 ec 08             	sub    $0x8,%esp
f013070b:	52                   	push   %edx
f013070c:	50                   	push   %eax
f013070d:	e8 8d 3f fd ff       	call   f010469f <find_env_in_queue>
f0130712:	83 c4 10             	add    $0x10,%esp
f0130715:	85 c0                	test   %eax,%eax
f0130717:	74 1a                	je     f0130733 <chk2+0x245>
f0130719:	68 08 d0 13 f0       	push   $0xf013d008
f013071e:	68 32 cf 13 f0       	push   $0xf013cf32
f0130723:	68 d8 00 00 00       	push   $0xd8
f0130728:	68 47 cf 13 f0       	push   $0xf013cf47
f013072d:	e8 89 fb fc ff       	call   f01002bb <_panic_all>
	{
		uint8 __tl = __pl == num_of_ready_queues-1 ? __pl : __pl + 1 ;
		assert_endall(find_env_in_queue(&(env_ready_queues[__tl]), __pe->env_id) != NULL);
		for (int i = 0; i < num_of_ready_queues; ++i)
		{
			if (i == __tl) continue;
f0130732:	90                   	nop
	}
	if (__pe != NULL && __pe != __ne)
	{
		uint8 __tl = __pl == num_of_ready_queues-1 ? __pl : __pl + 1 ;
		assert_endall(find_env_in_queue(&(env_ready_queues[__tl]), __pe->env_id) != NULL);
		for (int i = 0; i < num_of_ready_queues; ++i)
f0130733:	ff 45 f0             	incl   -0x10(%ebp)
f0130736:	a0 40 26 78 f0       	mov    0xf0782640,%al
f013073b:	0f b6 c0             	movzbl %al,%eax
f013073e:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0130741:	7f a5                	jg     f01306e8 <chk2+0x1fa>
f0130743:	eb 01                	jmp    f0130746 <chk2+0x258>
	schenv();
}
void chk2(struct Env* __se)
{
	if (__chkstatus == 0)
		return ;
f0130745:	90                   	nop
		{
			if (i == __tl) continue;
			assert_endall(find_env_in_queue(&(env_ready_queues[i]), __pe->env_id) == NULL) ;
		}
	}
}
f0130746:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f0130749:	c9                   	leave  
f013074a:	c3                   	ret    

f013074b <check_boot_pgdir>:
// but it is a pretty good check.
//
uint32 check_va2pa(uint32 *ptr_page_directory, uint32 va);

void check_boot_pgdir()
{
f013074b:	55                   	push   %ebp
f013074c:	89 e5                	mov    %esp,%ebp
f013074e:	83 ec 18             	sub    $0x18,%esp

	//2016
	// check phys mem
	#if USE_KHEAP
	{
		for (i = 0; KERNEL_BASE + i < (uint32)ptr_free_mem; i += PAGE_SIZE)
f0130751:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0130758:	eb 40                	jmp    f013079a <check_boot_pgdir+0x4f>
			assert(check_va2pa(ptr_page_directory, KERNEL_BASE + i) == i);
f013075a:	8b 45 f4             	mov    -0xc(%ebp),%eax
f013075d:	8d 90 00 00 00 f0    	lea    -0x10000000(%eax),%edx
f0130763:	a1 3c 26 78 f0       	mov    0xf078263c,%eax
f0130768:	83 ec 08             	sub    $0x8,%esp
f013076b:	52                   	push   %edx
f013076c:	50                   	push   %eax
f013076d:	e8 9b 01 00 00       	call   f013090d <check_va2pa>
f0130772:	83 c4 10             	add    $0x10,%esp
f0130775:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0130778:	74 19                	je     f0130793 <check_boot_pgdir+0x48>
f013077a:	68 48 d0 13 f0       	push   $0xf013d048
f013077f:	68 32 cf 13 f0       	push   $0xf013cf32
f0130784:	68 fa 00 00 00       	push   $0xfa
f0130789:	68 47 cf 13 f0       	push   $0xf013cf47
f013078e:	e8 72 fa fc ff       	call   f0100205 <_panic>

	//2016
	// check phys mem
	#if USE_KHEAP
	{
		for (i = 0; KERNEL_BASE + i < (uint32)ptr_free_mem; i += PAGE_SIZE)
f0130793:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
f013079a:	8b 45 f4             	mov    -0xc(%ebp),%eax
f013079d:	8d 90 00 00 00 f0    	lea    -0x10000000(%eax),%edx
f01307a3:	a1 38 26 78 f0       	mov    0xf0782638,%eax
f01307a8:	39 c2                	cmp    %eax,%edx
f01307aa:	72 ae                	jb     f013075a <check_boot_pgdir+0xf>
		for (i = 0; KERNEL_BASE + i != 0; i += PAGE_SIZE)
			assert(check_va2pa(ptr_page_directory, KERNEL_BASE + i) == i);
	}
	#endif
	// check kernel stack
	for (i = 0; i < KERNEL_STACK_SIZE; i += PAGE_SIZE)
f01307ac:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01307b3:	eb 74                	jmp    f0130829 <check_boot_pgdir+0xde>
		assert(check_va2pa(ptr_page_directory, KERNEL_STACK_TOP - KERNEL_STACK_SIZE + i) == STATIC_KERNEL_PHYSICAL_ADDRESS(ptr_stack_bottom) + i);
f01307b5:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01307b8:	8d 90 00 80 bf ef    	lea    -0x10408000(%eax),%edx
f01307be:	a1 3c 26 78 f0       	mov    0xf078263c,%eax
f01307c3:	83 ec 08             	sub    $0x8,%esp
f01307c6:	52                   	push   %edx
f01307c7:	50                   	push   %eax
f01307c8:	e8 40 01 00 00       	call   f013090d <check_va2pa>
f01307cd:	83 c4 10             	add    $0x10,%esp
f01307d0:	c7 45 f0 00 a0 18 f0 	movl   $0xf018a000,-0x10(%ebp)
f01307d7:	81 7d f0 ff ff ff ef 	cmpl   $0xefffffff,-0x10(%ebp)
f01307de:	77 17                	ja     f01307f7 <check_boot_pgdir+0xac>
f01307e0:	ff 75 f0             	pushl  -0x10(%ebp)
f01307e3:	68 80 d0 13 f0       	push   $0xf013d080
f01307e8:	68 04 01 00 00       	push   $0x104
f01307ed:	68 47 cf 13 f0       	push   $0xf013cf47
f01307f2:	e8 0e fa fc ff       	call   f0100205 <_panic>
f01307f7:	8b 55 f0             	mov    -0x10(%ebp),%edx
f01307fa:	8d 8a 00 00 00 10    	lea    0x10000000(%edx),%ecx
f0130800:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0130803:	01 ca                	add    %ecx,%edx
f0130805:	39 d0                	cmp    %edx,%eax
f0130807:	74 19                	je     f0130822 <check_boot_pgdir+0xd7>
f0130809:	68 b4 d0 13 f0       	push   $0xf013d0b4
f013080e:	68 32 cf 13 f0       	push   $0xf013cf32
f0130813:	68 04 01 00 00       	push   $0x104
f0130818:	68 47 cf 13 f0       	push   $0xf013cf47
f013081d:	e8 e3 f9 fc ff       	call   f0100205 <_panic>
		for (i = 0; KERNEL_BASE + i != 0; i += PAGE_SIZE)
			assert(check_va2pa(ptr_page_directory, KERNEL_BASE + i) == i);
	}
	#endif
	// check kernel stack
	for (i = 0; i < KERNEL_STACK_SIZE; i += PAGE_SIZE)
f0130822:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
f0130829:	81 7d f4 ff 7f 00 00 	cmpl   $0x7fff,-0xc(%ebp)
f0130830:	76 83                	jbe    f01307b5 <check_boot_pgdir+0x6a>
		assert(check_va2pa(ptr_page_directory, KERNEL_STACK_TOP - KERNEL_STACK_SIZE + i) == STATIC_KERNEL_PHYSICAL_ADDRESS(ptr_stack_bottom) + i);

	// check for zero/non-zero in PDEs
	for (i = 0; i < NPDENTRIES; i++) {
f0130832:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0130839:	e9 af 00 00 00       	jmp    f01308ed <check_boot_pgdir+0x1a2>
		switch (i) {
f013083e:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0130841:	3d bb 03 00 00       	cmp    $0x3bb,%eax
f0130846:	74 11                	je     f0130859 <check_boot_pgdir+0x10e>
f0130848:	3d bb 03 00 00       	cmp    $0x3bb,%eax
f013084d:	72 36                	jb     f0130885 <check_boot_pgdir+0x13a>
f013084f:	2d bd 03 00 00       	sub    $0x3bd,%eax
f0130854:	83 f8 02             	cmp    $0x2,%eax
f0130857:	77 2c                	ja     f0130885 <check_boot_pgdir+0x13a>
		case PDX(UVPT):
		case PDX(KERNEL_STACK_TOP-1):
		case PDX(UENVS):
		//2016: READ_ONLY_FRAMES_INFO not valid any more since it can't fit in 4 MB space
		//case PDX(READ_ONLY_FRAMES_INFO):
		assert(ptr_page_directory[i]);
f0130859:	a1 3c 26 78 f0       	mov    0xf078263c,%eax
f013085e:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0130861:	c1 e2 02             	shl    $0x2,%edx
f0130864:	01 d0                	add    %edx,%eax
f0130866:	8b 00                	mov    (%eax),%eax
f0130868:	85 c0                	test   %eax,%eax
f013086a:	75 7a                	jne    f01308e6 <check_boot_pgdir+0x19b>
f013086c:	68 36 d1 13 f0       	push   $0xf013d136
f0130871:	68 32 cf 13 f0       	push   $0xf013cf32
f0130876:	68 0f 01 00 00       	push   $0x10f
f013087b:	68 47 cf 13 f0       	push   $0xf013cf47
f0130880:	e8 80 f9 fc ff       	call   f0100205 <_panic>
		break;
		default:
			if (i >= PDX(KERNEL_BASE))
f0130885:	81 7d f4 bf 03 00 00 	cmpl   $0x3bf,-0xc(%ebp)
f013088c:	76 2c                	jbe    f01308ba <check_boot_pgdir+0x16f>
				assert(ptr_page_directory[i]);
f013088e:	a1 3c 26 78 f0       	mov    0xf078263c,%eax
f0130893:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0130896:	c1 e2 02             	shl    $0x2,%edx
f0130899:	01 d0                	add    %edx,%eax
f013089b:	8b 00                	mov    (%eax),%eax
f013089d:	85 c0                	test   %eax,%eax
f013089f:	75 48                	jne    f01308e9 <check_boot_pgdir+0x19e>
f01308a1:	68 36 d1 13 f0       	push   $0xf013d136
f01308a6:	68 32 cf 13 f0       	push   $0xf013cf32
f01308ab:	68 13 01 00 00       	push   $0x113
f01308b0:	68 47 cf 13 f0       	push   $0xf013cf47
f01308b5:	e8 4b f9 fc ff       	call   f0100205 <_panic>
			else
				assert(ptr_page_directory[i] == 0);
f01308ba:	a1 3c 26 78 f0       	mov    0xf078263c,%eax
f01308bf:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01308c2:	c1 e2 02             	shl    $0x2,%edx
f01308c5:	01 d0                	add    %edx,%eax
f01308c7:	8b 00                	mov    (%eax),%eax
f01308c9:	85 c0                	test   %eax,%eax
f01308cb:	74 1c                	je     f01308e9 <check_boot_pgdir+0x19e>
f01308cd:	68 4c d1 13 f0       	push   $0xf013d14c
f01308d2:	68 32 cf 13 f0       	push   $0xf013cf32
f01308d7:	68 15 01 00 00       	push   $0x115
f01308dc:	68 47 cf 13 f0       	push   $0xf013cf47
f01308e1:	e8 1f f9 fc ff       	call   f0100205 <_panic>
		case PDX(KERNEL_STACK_TOP-1):
		case PDX(UENVS):
		//2016: READ_ONLY_FRAMES_INFO not valid any more since it can't fit in 4 MB space
		//case PDX(READ_ONLY_FRAMES_INFO):
		assert(ptr_page_directory[i]);
		break;
f01308e6:	90                   	nop
f01308e7:	eb 01                	jmp    f01308ea <check_boot_pgdir+0x19f>
		default:
			if (i >= PDX(KERNEL_BASE))
				assert(ptr_page_directory[i]);
			else
				assert(ptr_page_directory[i] == 0);
			break;
f01308e9:	90                   	nop
	// check kernel stack
	for (i = 0; i < KERNEL_STACK_SIZE; i += PAGE_SIZE)
		assert(check_va2pa(ptr_page_directory, KERNEL_STACK_TOP - KERNEL_STACK_SIZE + i) == STATIC_KERNEL_PHYSICAL_ADDRESS(ptr_stack_bottom) + i);

	// check for zero/non-zero in PDEs
	for (i = 0; i < NPDENTRIES; i++) {
f01308ea:	ff 45 f4             	incl   -0xc(%ebp)
f01308ed:	81 7d f4 ff 03 00 00 	cmpl   $0x3ff,-0xc(%ebp)
f01308f4:	0f 86 44 ff ff ff    	jbe    f013083e <check_boot_pgdir+0xf3>
			else
				assert(ptr_page_directory[i] == 0);
			break;
		}
	}
	cprintf("check_boot_pgdir() succeeded!\n");
f01308fa:	83 ec 0c             	sub    $0xc,%esp
f01308fd:	68 68 d1 13 f0       	push   $0xf013d168
f0130902:	e8 07 04 fd ff       	call   f0100d0e <cprintf>
f0130907:	83 c4 10             	add    $0x10,%esp
}
f013090a:	90                   	nop
f013090b:	c9                   	leave  
f013090c:	c3                   	ret    

f013090d <check_va2pa>:
// defined by the page directory 'ptr_page_directory'.  The hardware normally performs
// this functionality for us!  We define our own version to help check
// the check_boot_pgdir() function; it shouldn't be used elsewhere.

uint32 check_va2pa(uint32 *ptr_page_directory, uint32 va)
{
f013090d:	55                   	push   %ebp
f013090e:	89 e5                	mov    %esp,%ebp
f0130910:	83 ec 18             	sub    $0x18,%esp
	uint32 *p;

	uint32* dirEntry = &(ptr_page_directory[PDX(va)]);
f0130913:	8b 45 0c             	mov    0xc(%ebp),%eax
f0130916:	c1 e8 16             	shr    $0x16,%eax
f0130919:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0130920:	8b 45 08             	mov    0x8(%ebp),%eax
f0130923:	01 d0                	add    %edx,%eax
f0130925:	89 45 f4             	mov    %eax,-0xc(%ebp)

	//LOG_VARS("dir table entry %x", *dirEntry);

	if (!(*dirEntry & PERM_PRESENT))
f0130928:	8b 45 f4             	mov    -0xc(%ebp),%eax
f013092b:	8b 00                	mov    (%eax),%eax
f013092d:	83 e0 01             	and    $0x1,%eax
f0130930:	85 c0                	test   %eax,%eax
f0130932:	75 0a                	jne    f013093e <check_va2pa+0x31>
		return ~0;
f0130934:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
f0130939:	e9 87 00 00 00       	jmp    f01309c5 <check_va2pa+0xb8>
	p = (uint32*) STATIC_KERNEL_VIRTUAL_ADDRESS(EXTRACT_ADDRESS(*dirEntry));
f013093e:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0130941:	8b 00                	mov    (%eax),%eax
f0130943:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0130948:	89 45 f0             	mov    %eax,-0x10(%ebp)
f013094b:	8b 45 f0             	mov    -0x10(%ebp),%eax
f013094e:	c1 e8 0c             	shr    $0xc,%eax
f0130951:	89 45 ec             	mov    %eax,-0x14(%ebp)
f0130954:	a1 d0 25 78 f0       	mov    0xf07825d0,%eax
f0130959:	39 45 ec             	cmp    %eax,-0x14(%ebp)
f013095c:	72 17                	jb     f0130975 <check_va2pa+0x68>
f013095e:	ff 75 f0             	pushl  -0x10(%ebp)
f0130961:	68 88 d1 13 f0       	push   $0xf013d188
f0130966:	68 2b 01 00 00       	push   $0x12b
f013096b:	68 47 cf 13 f0       	push   $0xf013cf47
f0130970:	e8 90 f8 fc ff       	call   f0100205 <_panic>
f0130975:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0130978:	2d 00 00 00 10       	sub    $0x10000000,%eax
f013097d:	89 45 e8             	mov    %eax,-0x18(%ebp)

	//LOG_VARS("ptr to page table  = %x", p);

	if (!(p[PTX(va)] & PERM_PRESENT))
f0130980:	8b 45 0c             	mov    0xc(%ebp),%eax
f0130983:	c1 e8 0c             	shr    $0xc,%eax
f0130986:	25 ff 03 00 00       	and    $0x3ff,%eax
f013098b:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0130992:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0130995:	01 d0                	add    %edx,%eax
f0130997:	8b 00                	mov    (%eax),%eax
f0130999:	83 e0 01             	and    $0x1,%eax
f013099c:	85 c0                	test   %eax,%eax
f013099e:	75 07                	jne    f01309a7 <check_va2pa+0x9a>
		return ~0;
f01309a0:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
f01309a5:	eb 1e                	jmp    f01309c5 <check_va2pa+0xb8>

	//LOG_VARS("page phys addres = %x",EXTRACT_ADDRESS(p[PTX(va)]));
	return EXTRACT_ADDRESS(p[PTX(va)]);
f01309a7:	8b 45 0c             	mov    0xc(%ebp),%eax
f01309aa:	c1 e8 0c             	shr    $0xc,%eax
f01309ad:	25 ff 03 00 00       	and    $0x3ff,%eax
f01309b2:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f01309b9:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01309bc:	01 d0                	add    %edx,%eax
f01309be:	8b 00                	mov    (%eax),%eax
f01309c0:	25 00 f0 ff ff       	and    $0xfffff000,%eax
}
f01309c5:	c9                   	leave  
f01309c6:	c3                   	ret    

f01309c7 <printnum>:
 * using specified putch function and associated pointer putdat.
 */
static void
printnum(void (*putch)(int, void*), void *putdat,
	 unsigned long long num, unsigned base, int width, int padc)
{
f01309c7:	55                   	push   %ebp
f01309c8:	89 e5                	mov    %esp,%ebp
f01309ca:	53                   	push   %ebx
f01309cb:	83 ec 14             	sub    $0x14,%esp
f01309ce:	8b 45 10             	mov    0x10(%ebp),%eax
f01309d1:	89 45 f0             	mov    %eax,-0x10(%ebp)
f01309d4:	8b 45 14             	mov    0x14(%ebp),%eax
f01309d7:	89 45 f4             	mov    %eax,-0xc(%ebp)
	// first recursively print all preceding (more significant) digits
	if (num >= base) {
f01309da:	8b 45 18             	mov    0x18(%ebp),%eax
f01309dd:	ba 00 00 00 00       	mov    $0x0,%edx
f01309e2:	3b 55 f4             	cmp    -0xc(%ebp),%edx
f01309e5:	77 55                	ja     f0130a3c <printnum+0x75>
f01309e7:	3b 55 f4             	cmp    -0xc(%ebp),%edx
f01309ea:	72 05                	jb     f01309f1 <printnum+0x2a>
f01309ec:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f01309ef:	77 4b                	ja     f0130a3c <printnum+0x75>
		printnum(putch, putdat, num / base, base, width - 1, padc);
f01309f1:	8b 45 1c             	mov    0x1c(%ebp),%eax
f01309f4:	8d 58 ff             	lea    -0x1(%eax),%ebx
f01309f7:	8b 45 18             	mov    0x18(%ebp),%eax
f01309fa:	ba 00 00 00 00       	mov    $0x0,%edx
f01309ff:	52                   	push   %edx
f0130a00:	50                   	push   %eax
f0130a01:	ff 75 f4             	pushl  -0xc(%ebp)
f0130a04:	ff 75 f0             	pushl  -0x10(%ebp)
f0130a07:	e8 0c 28 00 00       	call   f0133218 <__udivdi3>
f0130a0c:	83 c4 10             	add    $0x10,%esp
f0130a0f:	83 ec 04             	sub    $0x4,%esp
f0130a12:	ff 75 20             	pushl  0x20(%ebp)
f0130a15:	53                   	push   %ebx
f0130a16:	ff 75 18             	pushl  0x18(%ebp)
f0130a19:	52                   	push   %edx
f0130a1a:	50                   	push   %eax
f0130a1b:	ff 75 0c             	pushl  0xc(%ebp)
f0130a1e:	ff 75 08             	pushl  0x8(%ebp)
f0130a21:	e8 a1 ff ff ff       	call   f01309c7 <printnum>
f0130a26:	83 c4 20             	add    $0x20,%esp
f0130a29:	eb 1a                	jmp    f0130a45 <printnum+0x7e>
	} else {
		// print any needed pad characters before first digit
		while (--width > 0)
			putch(padc, putdat);
f0130a2b:	83 ec 08             	sub    $0x8,%esp
f0130a2e:	ff 75 0c             	pushl  0xc(%ebp)
f0130a31:	ff 75 20             	pushl  0x20(%ebp)
f0130a34:	8b 45 08             	mov    0x8(%ebp),%eax
f0130a37:	ff d0                	call   *%eax
f0130a39:	83 c4 10             	add    $0x10,%esp
	// first recursively print all preceding (more significant) digits
	if (num >= base) {
		printnum(putch, putdat, num / base, base, width - 1, padc);
	} else {
		// print any needed pad characters before first digit
		while (--width > 0)
f0130a3c:	ff 4d 1c             	decl   0x1c(%ebp)
f0130a3f:	83 7d 1c 00          	cmpl   $0x0,0x1c(%ebp)
f0130a43:	7f e6                	jg     f0130a2b <printnum+0x64>
			putch(padc, putdat);
	}

	// then print this (the least significant) digit
	putch("0123456789abcdef"[num % base], putdat);
f0130a45:	8b 4d 18             	mov    0x18(%ebp),%ecx
f0130a48:	bb 00 00 00 00       	mov    $0x0,%ebx
f0130a4d:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0130a50:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0130a53:	53                   	push   %ebx
f0130a54:	51                   	push   %ecx
f0130a55:	52                   	push   %edx
f0130a56:	50                   	push   %eax
f0130a57:	e8 cc 28 00 00       	call   f0133328 <__umoddi3>
f0130a5c:	83 c4 10             	add    $0x10,%esp
f0130a5f:	05 d4 d3 13 f0       	add    $0xf013d3d4,%eax
f0130a64:	8a 00                	mov    (%eax),%al
f0130a66:	0f be c0             	movsbl %al,%eax
f0130a69:	83 ec 08             	sub    $0x8,%esp
f0130a6c:	ff 75 0c             	pushl  0xc(%ebp)
f0130a6f:	50                   	push   %eax
f0130a70:	8b 45 08             	mov    0x8(%ebp),%eax
f0130a73:	ff d0                	call   *%eax
f0130a75:	83 c4 10             	add    $0x10,%esp
}
f0130a78:	90                   	nop
f0130a79:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f0130a7c:	c9                   	leave  
f0130a7d:	c3                   	ret    

f0130a7e <getuint>:

// Get an unsigned int of various possible sizes from a varargs list,
// depending on the lflag parameter.
static unsigned long long
getuint(va_list *ap, int lflag)
{
f0130a7e:	55                   	push   %ebp
f0130a7f:	89 e5                	mov    %esp,%ebp
	if (lflag >= 2)
f0130a81:	83 7d 0c 01          	cmpl   $0x1,0xc(%ebp)
f0130a85:	7e 1c                	jle    f0130aa3 <getuint+0x25>
		return va_arg(*ap, unsigned long long);
f0130a87:	8b 45 08             	mov    0x8(%ebp),%eax
f0130a8a:	8b 00                	mov    (%eax),%eax
f0130a8c:	8d 50 08             	lea    0x8(%eax),%edx
f0130a8f:	8b 45 08             	mov    0x8(%ebp),%eax
f0130a92:	89 10                	mov    %edx,(%eax)
f0130a94:	8b 45 08             	mov    0x8(%ebp),%eax
f0130a97:	8b 00                	mov    (%eax),%eax
f0130a99:	83 e8 08             	sub    $0x8,%eax
f0130a9c:	8b 50 04             	mov    0x4(%eax),%edx
f0130a9f:	8b 00                	mov    (%eax),%eax
f0130aa1:	eb 40                	jmp    f0130ae3 <getuint+0x65>
	else if (lflag)
f0130aa3:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
f0130aa7:	74 1e                	je     f0130ac7 <getuint+0x49>
		return va_arg(*ap, unsigned long);
f0130aa9:	8b 45 08             	mov    0x8(%ebp),%eax
f0130aac:	8b 00                	mov    (%eax),%eax
f0130aae:	8d 50 04             	lea    0x4(%eax),%edx
f0130ab1:	8b 45 08             	mov    0x8(%ebp),%eax
f0130ab4:	89 10                	mov    %edx,(%eax)
f0130ab6:	8b 45 08             	mov    0x8(%ebp),%eax
f0130ab9:	8b 00                	mov    (%eax),%eax
f0130abb:	83 e8 04             	sub    $0x4,%eax
f0130abe:	8b 00                	mov    (%eax),%eax
f0130ac0:	ba 00 00 00 00       	mov    $0x0,%edx
f0130ac5:	eb 1c                	jmp    f0130ae3 <getuint+0x65>
	else
		return va_arg(*ap, unsigned int);
f0130ac7:	8b 45 08             	mov    0x8(%ebp),%eax
f0130aca:	8b 00                	mov    (%eax),%eax
f0130acc:	8d 50 04             	lea    0x4(%eax),%edx
f0130acf:	8b 45 08             	mov    0x8(%ebp),%eax
f0130ad2:	89 10                	mov    %edx,(%eax)
f0130ad4:	8b 45 08             	mov    0x8(%ebp),%eax
f0130ad7:	8b 00                	mov    (%eax),%eax
f0130ad9:	83 e8 04             	sub    $0x4,%eax
f0130adc:	8b 00                	mov    (%eax),%eax
f0130ade:	ba 00 00 00 00       	mov    $0x0,%edx
}
f0130ae3:	5d                   	pop    %ebp
f0130ae4:	c3                   	ret    

f0130ae5 <getint>:

// Same as getuint but signed - can't use getuint
// because of sign extension
static long long
getint(va_list *ap, int lflag)
{
f0130ae5:	55                   	push   %ebp
f0130ae6:	89 e5                	mov    %esp,%ebp
	if (lflag >= 2)
f0130ae8:	83 7d 0c 01          	cmpl   $0x1,0xc(%ebp)
f0130aec:	7e 1c                	jle    f0130b0a <getint+0x25>
		return va_arg(*ap, long long);
f0130aee:	8b 45 08             	mov    0x8(%ebp),%eax
f0130af1:	8b 00                	mov    (%eax),%eax
f0130af3:	8d 50 08             	lea    0x8(%eax),%edx
f0130af6:	8b 45 08             	mov    0x8(%ebp),%eax
f0130af9:	89 10                	mov    %edx,(%eax)
f0130afb:	8b 45 08             	mov    0x8(%ebp),%eax
f0130afe:	8b 00                	mov    (%eax),%eax
f0130b00:	83 e8 08             	sub    $0x8,%eax
f0130b03:	8b 50 04             	mov    0x4(%eax),%edx
f0130b06:	8b 00                	mov    (%eax),%eax
f0130b08:	eb 38                	jmp    f0130b42 <getint+0x5d>
	else if (lflag)
f0130b0a:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
f0130b0e:	74 1a                	je     f0130b2a <getint+0x45>
		return va_arg(*ap, long);
f0130b10:	8b 45 08             	mov    0x8(%ebp),%eax
f0130b13:	8b 00                	mov    (%eax),%eax
f0130b15:	8d 50 04             	lea    0x4(%eax),%edx
f0130b18:	8b 45 08             	mov    0x8(%ebp),%eax
f0130b1b:	89 10                	mov    %edx,(%eax)
f0130b1d:	8b 45 08             	mov    0x8(%ebp),%eax
f0130b20:	8b 00                	mov    (%eax),%eax
f0130b22:	83 e8 04             	sub    $0x4,%eax
f0130b25:	8b 00                	mov    (%eax),%eax
f0130b27:	99                   	cltd   
f0130b28:	eb 18                	jmp    f0130b42 <getint+0x5d>
	else
		return va_arg(*ap, int);
f0130b2a:	8b 45 08             	mov    0x8(%ebp),%eax
f0130b2d:	8b 00                	mov    (%eax),%eax
f0130b2f:	8d 50 04             	lea    0x4(%eax),%edx
f0130b32:	8b 45 08             	mov    0x8(%ebp),%eax
f0130b35:	89 10                	mov    %edx,(%eax)
f0130b37:	8b 45 08             	mov    0x8(%ebp),%eax
f0130b3a:	8b 00                	mov    (%eax),%eax
f0130b3c:	83 e8 04             	sub    $0x4,%eax
f0130b3f:	8b 00                	mov    (%eax),%eax
f0130b41:	99                   	cltd   
}
f0130b42:	5d                   	pop    %ebp
f0130b43:	c3                   	ret    

f0130b44 <vprintfmt>:
// Main function to format and print a string.
void printfmt(void (*putch)(int, void*), void *putdat, const char *fmt, ...);

void
vprintfmt(void (*putch)(int, void*), void *putdat, const char *fmt, va_list ap)
{
f0130b44:	55                   	push   %ebp
f0130b45:	89 e5                	mov    %esp,%ebp
f0130b47:	56                   	push   %esi
f0130b48:	53                   	push   %ebx
f0130b49:	83 ec 20             	sub    $0x20,%esp
	unsigned long long num;
	int base, lflag, width, precision, altflag;
	char padc;

	while (1) {
		while ((ch = *(unsigned char *) fmt++) != '%') {
f0130b4c:	eb 17                	jmp    f0130b65 <vprintfmt+0x21>
			if (ch == '\0')
f0130b4e:	85 db                	test   %ebx,%ebx
f0130b50:	0f 84 af 03 00 00    	je     f0130f05 <vprintfmt+0x3c1>
				return;
			putch(ch, putdat);
f0130b56:	83 ec 08             	sub    $0x8,%esp
f0130b59:	ff 75 0c             	pushl  0xc(%ebp)
f0130b5c:	53                   	push   %ebx
f0130b5d:	8b 45 08             	mov    0x8(%ebp),%eax
f0130b60:	ff d0                	call   *%eax
f0130b62:	83 c4 10             	add    $0x10,%esp
	unsigned long long num;
	int base, lflag, width, precision, altflag;
	char padc;

	while (1) {
		while ((ch = *(unsigned char *) fmt++) != '%') {
f0130b65:	8b 45 10             	mov    0x10(%ebp),%eax
f0130b68:	8d 50 01             	lea    0x1(%eax),%edx
f0130b6b:	89 55 10             	mov    %edx,0x10(%ebp)
f0130b6e:	8a 00                	mov    (%eax),%al
f0130b70:	0f b6 d8             	movzbl %al,%ebx
f0130b73:	83 fb 25             	cmp    $0x25,%ebx
f0130b76:	75 d6                	jne    f0130b4e <vprintfmt+0xa>
				return;
			putch(ch, putdat);
		}

		// Process a %-escape sequence
		padc = ' ';
f0130b78:	c6 45 db 20          	movb   $0x20,-0x25(%ebp)
		width = -1;
f0130b7c:	c7 45 e4 ff ff ff ff 	movl   $0xffffffff,-0x1c(%ebp)
		precision = -1;
f0130b83:	c7 45 e0 ff ff ff ff 	movl   $0xffffffff,-0x20(%ebp)
		lflag = 0;
f0130b8a:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
		altflag = 0;
f0130b91:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
	reswitch:
		switch (ch = *(unsigned char *) fmt++) {
f0130b98:	8b 45 10             	mov    0x10(%ebp),%eax
f0130b9b:	8d 50 01             	lea    0x1(%eax),%edx
f0130b9e:	89 55 10             	mov    %edx,0x10(%ebp)
f0130ba1:	8a 00                	mov    (%eax),%al
f0130ba3:	0f b6 d8             	movzbl %al,%ebx
f0130ba6:	8d 43 dd             	lea    -0x23(%ebx),%eax
f0130ba9:	83 f8 55             	cmp    $0x55,%eax
f0130bac:	0f 87 2b 03 00 00    	ja     f0130edd <vprintfmt+0x399>
f0130bb2:	8b 04 85 f8 d3 13 f0 	mov    -0xfec2c08(,%eax,4),%eax
f0130bb9:	ff e0                	jmp    *%eax

		// flag to pad on the right
		case '-':
			padc = '-';
f0130bbb:	c6 45 db 2d          	movb   $0x2d,-0x25(%ebp)
			goto reswitch;
f0130bbf:	eb d7                	jmp    f0130b98 <vprintfmt+0x54>

		// flag to pad with 0's instead of spaces
		case '0':
			padc = '0';
f0130bc1:	c6 45 db 30          	movb   $0x30,-0x25(%ebp)
			goto reswitch;
f0130bc5:	eb d1                	jmp    f0130b98 <vprintfmt+0x54>
		case '5':
		case '6':
		case '7':
		case '8':
		case '9':
			for (precision = 0; ; ++fmt) {
f0130bc7:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
				precision = precision * 10 + ch - '0';
f0130bce:	8b 55 e0             	mov    -0x20(%ebp),%edx
f0130bd1:	89 d0                	mov    %edx,%eax
f0130bd3:	c1 e0 02             	shl    $0x2,%eax
f0130bd6:	01 d0                	add    %edx,%eax
f0130bd8:	01 c0                	add    %eax,%eax
f0130bda:	01 d8                	add    %ebx,%eax
f0130bdc:	83 e8 30             	sub    $0x30,%eax
f0130bdf:	89 45 e0             	mov    %eax,-0x20(%ebp)
				ch = *fmt;
f0130be2:	8b 45 10             	mov    0x10(%ebp),%eax
f0130be5:	8a 00                	mov    (%eax),%al
f0130be7:	0f be d8             	movsbl %al,%ebx
				if (ch < '0' || ch > '9')
f0130bea:	83 fb 2f             	cmp    $0x2f,%ebx
f0130bed:	7e 3e                	jle    f0130c2d <vprintfmt+0xe9>
f0130bef:	83 fb 39             	cmp    $0x39,%ebx
f0130bf2:	7f 39                	jg     f0130c2d <vprintfmt+0xe9>
		case '5':
		case '6':
		case '7':
		case '8':
		case '9':
			for (precision = 0; ; ++fmt) {
f0130bf4:	ff 45 10             	incl   0x10(%ebp)
				precision = precision * 10 + ch - '0';
				ch = *fmt;
				if (ch < '0' || ch > '9')
					break;
			}
f0130bf7:	eb d5                	jmp    f0130bce <vprintfmt+0x8a>
			goto process_precision;

		case '*':
			precision = va_arg(ap, int);
f0130bf9:	8b 45 14             	mov    0x14(%ebp),%eax
f0130bfc:	83 c0 04             	add    $0x4,%eax
f0130bff:	89 45 14             	mov    %eax,0x14(%ebp)
f0130c02:	8b 45 14             	mov    0x14(%ebp),%eax
f0130c05:	83 e8 04             	sub    $0x4,%eax
f0130c08:	8b 00                	mov    (%eax),%eax
f0130c0a:	89 45 e0             	mov    %eax,-0x20(%ebp)
			goto process_precision;
f0130c0d:	eb 1f                	jmp    f0130c2e <vprintfmt+0xea>

		case '.':
			if (width < 0)
f0130c0f:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f0130c13:	79 83                	jns    f0130b98 <vprintfmt+0x54>
				width = 0;
f0130c15:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
			goto reswitch;
f0130c1c:	e9 77 ff ff ff       	jmp    f0130b98 <vprintfmt+0x54>

		case '#':
			altflag = 1;
f0130c21:	c7 45 dc 01 00 00 00 	movl   $0x1,-0x24(%ebp)
			goto reswitch;
f0130c28:	e9 6b ff ff ff       	jmp    f0130b98 <vprintfmt+0x54>
				precision = precision * 10 + ch - '0';
				ch = *fmt;
				if (ch < '0' || ch > '9')
					break;
			}
			goto process_precision;
f0130c2d:	90                   	nop
		case '#':
			altflag = 1;
			goto reswitch;

		process_precision:
			if (width < 0)
f0130c2e:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f0130c32:	0f 89 60 ff ff ff    	jns    f0130b98 <vprintfmt+0x54>
				width = precision, precision = -1;
f0130c38:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0130c3b:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f0130c3e:	c7 45 e0 ff ff ff ff 	movl   $0xffffffff,-0x20(%ebp)
			goto reswitch;
f0130c45:	e9 4e ff ff ff       	jmp    f0130b98 <vprintfmt+0x54>

		// long flag (doubled for long long)
		case 'l':
			lflag++;
f0130c4a:	ff 45 e8             	incl   -0x18(%ebp)
			goto reswitch;
f0130c4d:	e9 46 ff ff ff       	jmp    f0130b98 <vprintfmt+0x54>

		// character
		case 'c':
			putch(va_arg(ap, int), putdat);
f0130c52:	8b 45 14             	mov    0x14(%ebp),%eax
f0130c55:	83 c0 04             	add    $0x4,%eax
f0130c58:	89 45 14             	mov    %eax,0x14(%ebp)
f0130c5b:	8b 45 14             	mov    0x14(%ebp),%eax
f0130c5e:	83 e8 04             	sub    $0x4,%eax
f0130c61:	8b 00                	mov    (%eax),%eax
f0130c63:	83 ec 08             	sub    $0x8,%esp
f0130c66:	ff 75 0c             	pushl  0xc(%ebp)
f0130c69:	50                   	push   %eax
f0130c6a:	8b 45 08             	mov    0x8(%ebp),%eax
f0130c6d:	ff d0                	call   *%eax
f0130c6f:	83 c4 10             	add    $0x10,%esp
			break;
f0130c72:	e9 89 02 00 00       	jmp    f0130f00 <vprintfmt+0x3bc>

		// error message
		case 'e':
			err = va_arg(ap, int);
f0130c77:	8b 45 14             	mov    0x14(%ebp),%eax
f0130c7a:	83 c0 04             	add    $0x4,%eax
f0130c7d:	89 45 14             	mov    %eax,0x14(%ebp)
f0130c80:	8b 45 14             	mov    0x14(%ebp),%eax
f0130c83:	83 e8 04             	sub    $0x4,%eax
f0130c86:	8b 18                	mov    (%eax),%ebx
			if (err < 0)
f0130c88:	85 db                	test   %ebx,%ebx
f0130c8a:	79 02                	jns    f0130c8e <vprintfmt+0x14a>
				err = -err;
f0130c8c:	f7 db                	neg    %ebx
			if (err > MAXERROR || (p = error_string[err]) == NULL)
f0130c8e:	83 fb 64             	cmp    $0x64,%ebx
f0130c91:	7f 0b                	jg     f0130c9e <vprintfmt+0x15a>
f0130c93:	8b 34 9d 40 d2 13 f0 	mov    -0xfec2dc0(,%ebx,4),%esi
f0130c9a:	85 f6                	test   %esi,%esi
f0130c9c:	75 19                	jne    f0130cb7 <vprintfmt+0x173>
				printfmt(putch, putdat, "error %d", err);
f0130c9e:	53                   	push   %ebx
f0130c9f:	68 e5 d3 13 f0       	push   $0xf013d3e5
f0130ca4:	ff 75 0c             	pushl  0xc(%ebp)
f0130ca7:	ff 75 08             	pushl  0x8(%ebp)
f0130caa:	e8 5e 02 00 00       	call   f0130f0d <printfmt>
f0130caf:	83 c4 10             	add    $0x10,%esp
			else
				printfmt(putch, putdat, "%s", p);
			break;
f0130cb2:	e9 49 02 00 00       	jmp    f0130f00 <vprintfmt+0x3bc>
			if (err < 0)
				err = -err;
			if (err > MAXERROR || (p = error_string[err]) == NULL)
				printfmt(putch, putdat, "error %d", err);
			else
				printfmt(putch, putdat, "%s", p);
f0130cb7:	56                   	push   %esi
f0130cb8:	68 ee d3 13 f0       	push   $0xf013d3ee
f0130cbd:	ff 75 0c             	pushl  0xc(%ebp)
f0130cc0:	ff 75 08             	pushl  0x8(%ebp)
f0130cc3:	e8 45 02 00 00       	call   f0130f0d <printfmt>
f0130cc8:	83 c4 10             	add    $0x10,%esp
			break;
f0130ccb:	e9 30 02 00 00       	jmp    f0130f00 <vprintfmt+0x3bc>

		// string
		case 's':
			if ((p = va_arg(ap, char *)) == NULL)
f0130cd0:	8b 45 14             	mov    0x14(%ebp),%eax
f0130cd3:	83 c0 04             	add    $0x4,%eax
f0130cd6:	89 45 14             	mov    %eax,0x14(%ebp)
f0130cd9:	8b 45 14             	mov    0x14(%ebp),%eax
f0130cdc:	83 e8 04             	sub    $0x4,%eax
f0130cdf:	8b 30                	mov    (%eax),%esi
f0130ce1:	85 f6                	test   %esi,%esi
f0130ce3:	75 05                	jne    f0130cea <vprintfmt+0x1a6>
				p = "(null)";
f0130ce5:	be f1 d3 13 f0       	mov    $0xf013d3f1,%esi
			if (width > 0 && padc != '-')
f0130cea:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f0130cee:	7e 6d                	jle    f0130d5d <vprintfmt+0x219>
f0130cf0:	80 7d db 2d          	cmpb   $0x2d,-0x25(%ebp)
f0130cf4:	74 67                	je     f0130d5d <vprintfmt+0x219>
				for (width -= strnlen(p, precision); width > 0; width--)
f0130cf6:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0130cf9:	83 ec 08             	sub    $0x8,%esp
f0130cfc:	50                   	push   %eax
f0130cfd:	56                   	push   %esi
f0130cfe:	e8 12 05 00 00       	call   f0131215 <strnlen>
f0130d03:	83 c4 10             	add    $0x10,%esp
f0130d06:	29 45 e4             	sub    %eax,-0x1c(%ebp)
f0130d09:	eb 16                	jmp    f0130d21 <vprintfmt+0x1dd>
					putch(padc, putdat);
f0130d0b:	0f be 45 db          	movsbl -0x25(%ebp),%eax
f0130d0f:	83 ec 08             	sub    $0x8,%esp
f0130d12:	ff 75 0c             	pushl  0xc(%ebp)
f0130d15:	50                   	push   %eax
f0130d16:	8b 45 08             	mov    0x8(%ebp),%eax
f0130d19:	ff d0                	call   *%eax
f0130d1b:	83 c4 10             	add    $0x10,%esp
		// string
		case 's':
			if ((p = va_arg(ap, char *)) == NULL)
				p = "(null)";
			if (width > 0 && padc != '-')
				for (width -= strnlen(p, precision); width > 0; width--)
f0130d1e:	ff 4d e4             	decl   -0x1c(%ebp)
f0130d21:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f0130d25:	7f e4                	jg     f0130d0b <vprintfmt+0x1c7>
					putch(padc, putdat);
			for (; (ch = *p++) != '\0' && (precision < 0 || --precision >= 0); width--)
f0130d27:	eb 34                	jmp    f0130d5d <vprintfmt+0x219>
				if (altflag && (ch < ' ' || ch > '~'))
f0130d29:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f0130d2d:	74 1c                	je     f0130d4b <vprintfmt+0x207>
f0130d2f:	83 fb 1f             	cmp    $0x1f,%ebx
f0130d32:	7e 05                	jle    f0130d39 <vprintfmt+0x1f5>
f0130d34:	83 fb 7e             	cmp    $0x7e,%ebx
f0130d37:	7e 12                	jle    f0130d4b <vprintfmt+0x207>
					putch('?', putdat);
f0130d39:	83 ec 08             	sub    $0x8,%esp
f0130d3c:	ff 75 0c             	pushl  0xc(%ebp)
f0130d3f:	6a 3f                	push   $0x3f
f0130d41:	8b 45 08             	mov    0x8(%ebp),%eax
f0130d44:	ff d0                	call   *%eax
f0130d46:	83 c4 10             	add    $0x10,%esp
f0130d49:	eb 0f                	jmp    f0130d5a <vprintfmt+0x216>
				else
					putch(ch, putdat);
f0130d4b:	83 ec 08             	sub    $0x8,%esp
f0130d4e:	ff 75 0c             	pushl  0xc(%ebp)
f0130d51:	53                   	push   %ebx
f0130d52:	8b 45 08             	mov    0x8(%ebp),%eax
f0130d55:	ff d0                	call   *%eax
f0130d57:	83 c4 10             	add    $0x10,%esp
			if ((p = va_arg(ap, char *)) == NULL)
				p = "(null)";
			if (width > 0 && padc != '-')
				for (width -= strnlen(p, precision); width > 0; width--)
					putch(padc, putdat);
			for (; (ch = *p++) != '\0' && (precision < 0 || --precision >= 0); width--)
f0130d5a:	ff 4d e4             	decl   -0x1c(%ebp)
f0130d5d:	89 f0                	mov    %esi,%eax
f0130d5f:	8d 70 01             	lea    0x1(%eax),%esi
f0130d62:	8a 00                	mov    (%eax),%al
f0130d64:	0f be d8             	movsbl %al,%ebx
f0130d67:	85 db                	test   %ebx,%ebx
f0130d69:	74 24                	je     f0130d8f <vprintfmt+0x24b>
f0130d6b:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0130d6f:	78 b8                	js     f0130d29 <vprintfmt+0x1e5>
f0130d71:	ff 4d e0             	decl   -0x20(%ebp)
f0130d74:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0130d78:	79 af                	jns    f0130d29 <vprintfmt+0x1e5>
				if (altflag && (ch < ' ' || ch > '~'))
					putch('?', putdat);
				else
					putch(ch, putdat);
			for (; width > 0; width--)
f0130d7a:	eb 13                	jmp    f0130d8f <vprintfmt+0x24b>
				putch(' ', putdat);
f0130d7c:	83 ec 08             	sub    $0x8,%esp
f0130d7f:	ff 75 0c             	pushl  0xc(%ebp)
f0130d82:	6a 20                	push   $0x20
f0130d84:	8b 45 08             	mov    0x8(%ebp),%eax
f0130d87:	ff d0                	call   *%eax
f0130d89:	83 c4 10             	add    $0x10,%esp
			for (; (ch = *p++) != '\0' && (precision < 0 || --precision >= 0); width--)
				if (altflag && (ch < ' ' || ch > '~'))
					putch('?', putdat);
				else
					putch(ch, putdat);
			for (; width > 0; width--)
f0130d8c:	ff 4d e4             	decl   -0x1c(%ebp)
f0130d8f:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f0130d93:	7f e7                	jg     f0130d7c <vprintfmt+0x238>
				putch(' ', putdat);
			break;
f0130d95:	e9 66 01 00 00       	jmp    f0130f00 <vprintfmt+0x3bc>

		// (signed) decimal
		case 'd':
			num = getint(&ap, lflag);
f0130d9a:	83 ec 08             	sub    $0x8,%esp
f0130d9d:	ff 75 e8             	pushl  -0x18(%ebp)
f0130da0:	8d 45 14             	lea    0x14(%ebp),%eax
f0130da3:	50                   	push   %eax
f0130da4:	e8 3c fd ff ff       	call   f0130ae5 <getint>
f0130da9:	83 c4 10             	add    $0x10,%esp
f0130dac:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0130daf:	89 55 f4             	mov    %edx,-0xc(%ebp)
			if ((long long) num < 0) {
f0130db2:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0130db5:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0130db8:	85 d2                	test   %edx,%edx
f0130dba:	79 23                	jns    f0130ddf <vprintfmt+0x29b>
				putch('-', putdat);
f0130dbc:	83 ec 08             	sub    $0x8,%esp
f0130dbf:	ff 75 0c             	pushl  0xc(%ebp)
f0130dc2:	6a 2d                	push   $0x2d
f0130dc4:	8b 45 08             	mov    0x8(%ebp),%eax
f0130dc7:	ff d0                	call   *%eax
f0130dc9:	83 c4 10             	add    $0x10,%esp
				num = -(long long) num;
f0130dcc:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0130dcf:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0130dd2:	f7 d8                	neg    %eax
f0130dd4:	83 d2 00             	adc    $0x0,%edx
f0130dd7:	f7 da                	neg    %edx
f0130dd9:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0130ddc:	89 55 f4             	mov    %edx,-0xc(%ebp)
			}
			base = 10;
f0130ddf:	c7 45 ec 0a 00 00 00 	movl   $0xa,-0x14(%ebp)
			goto number;
f0130de6:	e9 bc 00 00 00       	jmp    f0130ea7 <vprintfmt+0x363>

		// unsigned decimal
		case 'u':
			num = getuint(&ap, lflag);
f0130deb:	83 ec 08             	sub    $0x8,%esp
f0130dee:	ff 75 e8             	pushl  -0x18(%ebp)
f0130df1:	8d 45 14             	lea    0x14(%ebp),%eax
f0130df4:	50                   	push   %eax
f0130df5:	e8 84 fc ff ff       	call   f0130a7e <getuint>
f0130dfa:	83 c4 10             	add    $0x10,%esp
f0130dfd:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0130e00:	89 55 f4             	mov    %edx,-0xc(%ebp)
			base = 10;
f0130e03:	c7 45 ec 0a 00 00 00 	movl   $0xa,-0x14(%ebp)
			goto number;
f0130e0a:	e9 98 00 00 00       	jmp    f0130ea7 <vprintfmt+0x363>

		// (unsigned) octal
		case 'o':
			// Replace this with your code.
			putch('X', putdat);
f0130e0f:	83 ec 08             	sub    $0x8,%esp
f0130e12:	ff 75 0c             	pushl  0xc(%ebp)
f0130e15:	6a 58                	push   $0x58
f0130e17:	8b 45 08             	mov    0x8(%ebp),%eax
f0130e1a:	ff d0                	call   *%eax
f0130e1c:	83 c4 10             	add    $0x10,%esp
			putch('X', putdat);
f0130e1f:	83 ec 08             	sub    $0x8,%esp
f0130e22:	ff 75 0c             	pushl  0xc(%ebp)
f0130e25:	6a 58                	push   $0x58
f0130e27:	8b 45 08             	mov    0x8(%ebp),%eax
f0130e2a:	ff d0                	call   *%eax
f0130e2c:	83 c4 10             	add    $0x10,%esp
			putch('X', putdat);
f0130e2f:	83 ec 08             	sub    $0x8,%esp
f0130e32:	ff 75 0c             	pushl  0xc(%ebp)
f0130e35:	6a 58                	push   $0x58
f0130e37:	8b 45 08             	mov    0x8(%ebp),%eax
f0130e3a:	ff d0                	call   *%eax
f0130e3c:	83 c4 10             	add    $0x10,%esp
			break;
f0130e3f:	e9 bc 00 00 00       	jmp    f0130f00 <vprintfmt+0x3bc>

		// pointer
		case 'p':
			putch('0', putdat);
f0130e44:	83 ec 08             	sub    $0x8,%esp
f0130e47:	ff 75 0c             	pushl  0xc(%ebp)
f0130e4a:	6a 30                	push   $0x30
f0130e4c:	8b 45 08             	mov    0x8(%ebp),%eax
f0130e4f:	ff d0                	call   *%eax
f0130e51:	83 c4 10             	add    $0x10,%esp
			putch('x', putdat);
f0130e54:	83 ec 08             	sub    $0x8,%esp
f0130e57:	ff 75 0c             	pushl  0xc(%ebp)
f0130e5a:	6a 78                	push   $0x78
f0130e5c:	8b 45 08             	mov    0x8(%ebp),%eax
f0130e5f:	ff d0                	call   *%eax
f0130e61:	83 c4 10             	add    $0x10,%esp
			num = (unsigned long long)
				(uint32) va_arg(ap, void *);
f0130e64:	8b 45 14             	mov    0x14(%ebp),%eax
f0130e67:	83 c0 04             	add    $0x4,%eax
f0130e6a:	89 45 14             	mov    %eax,0x14(%ebp)
f0130e6d:	8b 45 14             	mov    0x14(%ebp),%eax
f0130e70:	83 e8 04             	sub    $0x4,%eax
f0130e73:	8b 00                	mov    (%eax),%eax

		// pointer
		case 'p':
			putch('0', putdat);
			putch('x', putdat);
			num = (unsigned long long)
f0130e75:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0130e78:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
				(uint32) va_arg(ap, void *);
			base = 16;
f0130e7f:	c7 45 ec 10 00 00 00 	movl   $0x10,-0x14(%ebp)
			goto number;
f0130e86:	eb 1f                	jmp    f0130ea7 <vprintfmt+0x363>

		// (unsigned) hexadecimal
		case 'x':
			num = getuint(&ap, lflag);
f0130e88:	83 ec 08             	sub    $0x8,%esp
f0130e8b:	ff 75 e8             	pushl  -0x18(%ebp)
f0130e8e:	8d 45 14             	lea    0x14(%ebp),%eax
f0130e91:	50                   	push   %eax
f0130e92:	e8 e7 fb ff ff       	call   f0130a7e <getuint>
f0130e97:	83 c4 10             	add    $0x10,%esp
f0130e9a:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0130e9d:	89 55 f4             	mov    %edx,-0xc(%ebp)
			base = 16;
f0130ea0:	c7 45 ec 10 00 00 00 	movl   $0x10,-0x14(%ebp)
		number:
			printnum(putch, putdat, num, base, width, padc);
f0130ea7:	0f be 55 db          	movsbl -0x25(%ebp),%edx
f0130eab:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0130eae:	83 ec 04             	sub    $0x4,%esp
f0130eb1:	52                   	push   %edx
f0130eb2:	ff 75 e4             	pushl  -0x1c(%ebp)
f0130eb5:	50                   	push   %eax
f0130eb6:	ff 75 f4             	pushl  -0xc(%ebp)
f0130eb9:	ff 75 f0             	pushl  -0x10(%ebp)
f0130ebc:	ff 75 0c             	pushl  0xc(%ebp)
f0130ebf:	ff 75 08             	pushl  0x8(%ebp)
f0130ec2:	e8 00 fb ff ff       	call   f01309c7 <printnum>
f0130ec7:	83 c4 20             	add    $0x20,%esp
			break;
f0130eca:	eb 34                	jmp    f0130f00 <vprintfmt+0x3bc>

		// escaped '%' character
		case '%':
			putch(ch, putdat);
f0130ecc:	83 ec 08             	sub    $0x8,%esp
f0130ecf:	ff 75 0c             	pushl  0xc(%ebp)
f0130ed2:	53                   	push   %ebx
f0130ed3:	8b 45 08             	mov    0x8(%ebp),%eax
f0130ed6:	ff d0                	call   *%eax
f0130ed8:	83 c4 10             	add    $0x10,%esp
			break;
f0130edb:	eb 23                	jmp    f0130f00 <vprintfmt+0x3bc>

		// unrecognized escape sequence - just print it literally
		default:
			putch('%', putdat);
f0130edd:	83 ec 08             	sub    $0x8,%esp
f0130ee0:	ff 75 0c             	pushl  0xc(%ebp)
f0130ee3:	6a 25                	push   $0x25
f0130ee5:	8b 45 08             	mov    0x8(%ebp),%eax
f0130ee8:	ff d0                	call   *%eax
f0130eea:	83 c4 10             	add    $0x10,%esp
			for (fmt--; fmt[-1] != '%'; fmt--)
f0130eed:	ff 4d 10             	decl   0x10(%ebp)
f0130ef0:	eb 03                	jmp    f0130ef5 <vprintfmt+0x3b1>
f0130ef2:	ff 4d 10             	decl   0x10(%ebp)
f0130ef5:	8b 45 10             	mov    0x10(%ebp),%eax
f0130ef8:	48                   	dec    %eax
f0130ef9:	8a 00                	mov    (%eax),%al
f0130efb:	3c 25                	cmp    $0x25,%al
f0130efd:	75 f3                	jne    f0130ef2 <vprintfmt+0x3ae>
				/* do nothing */;
			break;
f0130eff:	90                   	nop
		}
	}
f0130f00:	e9 47 fc ff ff       	jmp    f0130b4c <vprintfmt+0x8>
	char padc;

	while (1) {
		while ((ch = *(unsigned char *) fmt++) != '%') {
			if (ch == '\0')
				return;
f0130f05:	90                   	nop
			for (fmt--; fmt[-1] != '%'; fmt--)
				/* do nothing */;
			break;
		}
	}
}
f0130f06:	8d 65 f8             	lea    -0x8(%ebp),%esp
f0130f09:	5b                   	pop    %ebx
f0130f0a:	5e                   	pop    %esi
f0130f0b:	5d                   	pop    %ebp
f0130f0c:	c3                   	ret    

f0130f0d <printfmt>:

void
printfmt(void (*putch)(int, void*), void *putdat, const char *fmt, ...)
{
f0130f0d:	55                   	push   %ebp
f0130f0e:	89 e5                	mov    %esp,%ebp
f0130f10:	83 ec 18             	sub    $0x18,%esp
	va_list ap;

	va_start(ap, fmt);
f0130f13:	8d 45 10             	lea    0x10(%ebp),%eax
f0130f16:	83 c0 04             	add    $0x4,%eax
f0130f19:	89 45 f4             	mov    %eax,-0xc(%ebp)
	vprintfmt(putch, putdat, fmt, ap);
f0130f1c:	8b 45 10             	mov    0x10(%ebp),%eax
f0130f1f:	ff 75 f4             	pushl  -0xc(%ebp)
f0130f22:	50                   	push   %eax
f0130f23:	ff 75 0c             	pushl  0xc(%ebp)
f0130f26:	ff 75 08             	pushl  0x8(%ebp)
f0130f29:	e8 16 fc ff ff       	call   f0130b44 <vprintfmt>
f0130f2e:	83 c4 10             	add    $0x10,%esp
	va_end(ap);
}
f0130f31:	90                   	nop
f0130f32:	c9                   	leave  
f0130f33:	c3                   	ret    

f0130f34 <sprintputch>:
	int cnt;
};

static void
sprintputch(int ch, struct sprintbuf *b)
{
f0130f34:	55                   	push   %ebp
f0130f35:	89 e5                	mov    %esp,%ebp
	b->cnt++;
f0130f37:	8b 45 0c             	mov    0xc(%ebp),%eax
f0130f3a:	8b 40 08             	mov    0x8(%eax),%eax
f0130f3d:	8d 50 01             	lea    0x1(%eax),%edx
f0130f40:	8b 45 0c             	mov    0xc(%ebp),%eax
f0130f43:	89 50 08             	mov    %edx,0x8(%eax)
	if (b->buf < b->ebuf)
f0130f46:	8b 45 0c             	mov    0xc(%ebp),%eax
f0130f49:	8b 10                	mov    (%eax),%edx
f0130f4b:	8b 45 0c             	mov    0xc(%ebp),%eax
f0130f4e:	8b 40 04             	mov    0x4(%eax),%eax
f0130f51:	39 c2                	cmp    %eax,%edx
f0130f53:	73 12                	jae    f0130f67 <sprintputch+0x33>
		*b->buf++ = ch;
f0130f55:	8b 45 0c             	mov    0xc(%ebp),%eax
f0130f58:	8b 00                	mov    (%eax),%eax
f0130f5a:	8d 48 01             	lea    0x1(%eax),%ecx
f0130f5d:	8b 55 0c             	mov    0xc(%ebp),%edx
f0130f60:	89 0a                	mov    %ecx,(%edx)
f0130f62:	8b 55 08             	mov    0x8(%ebp),%edx
f0130f65:	88 10                	mov    %dl,(%eax)
}
f0130f67:	90                   	nop
f0130f68:	5d                   	pop    %ebp
f0130f69:	c3                   	ret    

f0130f6a <vsnprintf>:

int
vsnprintf(char *buf, int n, const char *fmt, va_list ap)
{
f0130f6a:	55                   	push   %ebp
f0130f6b:	89 e5                	mov    %esp,%ebp
f0130f6d:	83 ec 18             	sub    $0x18,%esp
	struct sprintbuf b = {buf, buf+n-1, 0};
f0130f70:	8b 45 08             	mov    0x8(%ebp),%eax
f0130f73:	89 45 ec             	mov    %eax,-0x14(%ebp)
f0130f76:	8b 45 0c             	mov    0xc(%ebp),%eax
f0130f79:	8d 50 ff             	lea    -0x1(%eax),%edx
f0130f7c:	8b 45 08             	mov    0x8(%ebp),%eax
f0130f7f:	01 d0                	add    %edx,%eax
f0130f81:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0130f84:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

	if (buf == NULL || n < 1)
f0130f8b:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0130f8f:	74 06                	je     f0130f97 <vsnprintf+0x2d>
f0130f91:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
f0130f95:	7f 07                	jg     f0130f9e <vsnprintf+0x34>
		return -E_INVAL;
f0130f97:	b8 03 00 00 00       	mov    $0x3,%eax
f0130f9c:	eb 20                	jmp    f0130fbe <vsnprintf+0x54>

	// print the string to the buffer
	vprintfmt((void*)sprintputch, &b, fmt, ap);
f0130f9e:	ff 75 14             	pushl  0x14(%ebp)
f0130fa1:	ff 75 10             	pushl  0x10(%ebp)
f0130fa4:	8d 45 ec             	lea    -0x14(%ebp),%eax
f0130fa7:	50                   	push   %eax
f0130fa8:	68 34 0f 13 f0       	push   $0xf0130f34
f0130fad:	e8 92 fb ff ff       	call   f0130b44 <vprintfmt>
f0130fb2:	83 c4 10             	add    $0x10,%esp

	// null terminate the buffer
	*b.buf = '\0';
f0130fb5:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0130fb8:	c6 00 00             	movb   $0x0,(%eax)

	return b.cnt;
f0130fbb:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f0130fbe:	c9                   	leave  
f0130fbf:	c3                   	ret    

f0130fc0 <snprintf>:

int
snprintf(char *buf, int n, const char *fmt, ...)
{
f0130fc0:	55                   	push   %ebp
f0130fc1:	89 e5                	mov    %esp,%ebp
f0130fc3:	83 ec 18             	sub    $0x18,%esp
	va_list ap;
	int rc;

	va_start(ap, fmt);
f0130fc6:	8d 45 10             	lea    0x10(%ebp),%eax
f0130fc9:	83 c0 04             	add    $0x4,%eax
f0130fcc:	89 45 f4             	mov    %eax,-0xc(%ebp)
	rc = vsnprintf(buf, n, fmt, ap);
f0130fcf:	8b 45 10             	mov    0x10(%ebp),%eax
f0130fd2:	ff 75 f4             	pushl  -0xc(%ebp)
f0130fd5:	50                   	push   %eax
f0130fd6:	ff 75 0c             	pushl  0xc(%ebp)
f0130fd9:	ff 75 08             	pushl  0x8(%ebp)
f0130fdc:	e8 89 ff ff ff       	call   f0130f6a <vsnprintf>
f0130fe1:	83 c4 10             	add    $0x10,%esp
f0130fe4:	89 45 f0             	mov    %eax,-0x10(%ebp)
	va_end(ap);

	return rc;
f0130fe7:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
f0130fea:	c9                   	leave  
f0130feb:	c3                   	ret    

f0130fec <readline>:
#include <inc/lib.h>

//static char buf[BUFLEN];

void readline(const char *prompt, char* buf)
{
f0130fec:	55                   	push   %ebp
f0130fed:	89 e5                	mov    %esp,%ebp
f0130fef:	83 ec 18             	sub    $0x18,%esp
		int i, c, echoing;

	if (prompt != NULL)
f0130ff2:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0130ff6:	74 13                	je     f013100b <readline+0x1f>
		cprintf("%s", prompt);
f0130ff8:	83 ec 08             	sub    $0x8,%esp
f0130ffb:	ff 75 08             	pushl  0x8(%ebp)
f0130ffe:	68 50 d5 13 f0       	push   $0xf013d550
f0131003:	e8 06 fd fc ff       	call   f0100d0e <cprintf>
f0131008:	83 c4 10             	add    $0x10,%esp

	i = 0;
f013100b:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	echoing = iscons(0);
f0131012:	83 ec 0c             	sub    $0xc,%esp
f0131015:	6a 00                	push   $0x0
f0131017:	e8 9f fc fc ff       	call   f0100cbb <iscons>
f013101c:	83 c4 10             	add    $0x10,%esp
f013101f:	89 45 f0             	mov    %eax,-0x10(%ebp)
	while (1) {
		c = getchar();
f0131022:	e8 7b fc fc ff       	call   f0100ca2 <getchar>
f0131027:	89 45 ec             	mov    %eax,-0x14(%ebp)
		if (c < 0) {
f013102a:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f013102e:	79 22                	jns    f0131052 <readline+0x66>
			if (c != -E_EOF)
f0131030:	83 7d ec 07          	cmpl   $0x7,-0x14(%ebp)
f0131034:	0f 84 ad 00 00 00    	je     f01310e7 <readline+0xfb>
				cprintf("read error: %e\n", c);
f013103a:	83 ec 08             	sub    $0x8,%esp
f013103d:	ff 75 ec             	pushl  -0x14(%ebp)
f0131040:	68 53 d5 13 f0       	push   $0xf013d553
f0131045:	e8 c4 fc fc ff       	call   f0100d0e <cprintf>
f013104a:	83 c4 10             	add    $0x10,%esp
			return;
f013104d:	e9 95 00 00 00       	jmp    f01310e7 <readline+0xfb>
		} else if (c >= ' ' && i < BUFLEN-1) {
f0131052:	83 7d ec 1f          	cmpl   $0x1f,-0x14(%ebp)
f0131056:	7e 34                	jle    f013108c <readline+0xa0>
f0131058:	81 7d f4 fe 03 00 00 	cmpl   $0x3fe,-0xc(%ebp)
f013105f:	7f 2b                	jg     f013108c <readline+0xa0>
			if (echoing)
f0131061:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0131065:	74 0e                	je     f0131075 <readline+0x89>
				cputchar(c);
f0131067:	83 ec 0c             	sub    $0xc,%esp
f013106a:	ff 75 ec             	pushl  -0x14(%ebp)
f013106d:	e8 19 fc fc ff       	call   f0100c8b <cputchar>
f0131072:	83 c4 10             	add    $0x10,%esp
			buf[i++] = c;
f0131075:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131078:	8d 50 01             	lea    0x1(%eax),%edx
f013107b:	89 55 f4             	mov    %edx,-0xc(%ebp)
f013107e:	89 c2                	mov    %eax,%edx
f0131080:	8b 45 0c             	mov    0xc(%ebp),%eax
f0131083:	01 d0                	add    %edx,%eax
f0131085:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0131088:	88 10                	mov    %dl,(%eax)
f013108a:	eb 56                	jmp    f01310e2 <readline+0xf6>
		} else if (c == '\b' && i > 0) {
f013108c:	83 7d ec 08          	cmpl   $0x8,-0x14(%ebp)
f0131090:	75 1f                	jne    f01310b1 <readline+0xc5>
f0131092:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0131096:	7e 19                	jle    f01310b1 <readline+0xc5>
			if (echoing)
f0131098:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f013109c:	74 0e                	je     f01310ac <readline+0xc0>
				cputchar(c);
f013109e:	83 ec 0c             	sub    $0xc,%esp
f01310a1:	ff 75 ec             	pushl  -0x14(%ebp)
f01310a4:	e8 e2 fb fc ff       	call   f0100c8b <cputchar>
f01310a9:	83 c4 10             	add    $0x10,%esp

			i--;
f01310ac:	ff 4d f4             	decl   -0xc(%ebp)
f01310af:	eb 31                	jmp    f01310e2 <readline+0xf6>
		} else if (c == '\n' || c == '\r') {
f01310b1:	83 7d ec 0a          	cmpl   $0xa,-0x14(%ebp)
f01310b5:	74 0a                	je     f01310c1 <readline+0xd5>
f01310b7:	83 7d ec 0d          	cmpl   $0xd,-0x14(%ebp)
f01310bb:	0f 85 61 ff ff ff    	jne    f0131022 <readline+0x36>
			if (echoing)
f01310c1:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f01310c5:	74 0e                	je     f01310d5 <readline+0xe9>
				cputchar(c);
f01310c7:	83 ec 0c             	sub    $0xc,%esp
f01310ca:	ff 75 ec             	pushl  -0x14(%ebp)
f01310cd:	e8 b9 fb fc ff       	call   f0100c8b <cputchar>
f01310d2:	83 c4 10             	add    $0x10,%esp

			buf[i] = 0;
f01310d5:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01310d8:	8b 45 0c             	mov    0xc(%ebp),%eax
f01310db:	01 d0                	add    %edx,%eax
f01310dd:	c6 00 00             	movb   $0x0,(%eax)
			return;
f01310e0:	eb 06                	jmp    f01310e8 <readline+0xfc>
		}
	}
f01310e2:	e9 3b ff ff ff       	jmp    f0131022 <readline+0x36>
	while (1) {
		c = getchar();
		if (c < 0) {
			if (c != -E_EOF)
				cprintf("read error: %e\n", c);
			return;
f01310e7:	90                   	nop
			buf[i] = 0;
			return;
		}
	}

}
f01310e8:	c9                   	leave  
f01310e9:	c3                   	ret    

f01310ea <atomic_readline>:

void atomic_readline(const char *prompt, char* buf)
{
f01310ea:	55                   	push   %ebp
f01310eb:	89 e5                	mov    %esp,%ebp
f01310ed:	83 ec 18             	sub    $0x18,%esp
	sys_disable_interrupt();
f01310f0:	e8 29 bc fd ff       	call   f010cd1e <sys_disable_interrupt>
	int i, c, echoing;

	if (prompt != NULL)
f01310f5:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f01310f9:	74 13                	je     f013110e <atomic_readline+0x24>
		cprintf("%s", prompt);
f01310fb:	83 ec 08             	sub    $0x8,%esp
f01310fe:	ff 75 08             	pushl  0x8(%ebp)
f0131101:	68 50 d5 13 f0       	push   $0xf013d550
f0131106:	e8 03 fc fc ff       	call   f0100d0e <cprintf>
f013110b:	83 c4 10             	add    $0x10,%esp

	i = 0;
f013110e:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	echoing = iscons(0);
f0131115:	83 ec 0c             	sub    $0xc,%esp
f0131118:	6a 00                	push   $0x0
f013111a:	e8 9c fb fc ff       	call   f0100cbb <iscons>
f013111f:	83 c4 10             	add    $0x10,%esp
f0131122:	89 45 f0             	mov    %eax,-0x10(%ebp)
	while (1) {
		c = getchar();
f0131125:	e8 78 fb fc ff       	call   f0100ca2 <getchar>
f013112a:	89 45 ec             	mov    %eax,-0x14(%ebp)
		if (c < 0) {
f013112d:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0131131:	79 23                	jns    f0131156 <atomic_readline+0x6c>
			if (c != -E_EOF)
f0131133:	83 7d ec 07          	cmpl   $0x7,-0x14(%ebp)
f0131137:	74 13                	je     f013114c <atomic_readline+0x62>
				cprintf("read error: %e\n", c);
f0131139:	83 ec 08             	sub    $0x8,%esp
f013113c:	ff 75 ec             	pushl  -0x14(%ebp)
f013113f:	68 53 d5 13 f0       	push   $0xf013d553
f0131144:	e8 c5 fb fc ff       	call   f0100d0e <cprintf>
f0131149:	83 c4 10             	add    $0x10,%esp
			sys_enable_interrupt();
f013114c:	e8 e7 bb fd ff       	call   f010cd38 <sys_enable_interrupt>
			return;
f0131151:	e9 9a 00 00 00       	jmp    f01311f0 <atomic_readline+0x106>
		} else if (c >= ' ' && i < BUFLEN-1) {
f0131156:	83 7d ec 1f          	cmpl   $0x1f,-0x14(%ebp)
f013115a:	7e 34                	jle    f0131190 <atomic_readline+0xa6>
f013115c:	81 7d f4 fe 03 00 00 	cmpl   $0x3fe,-0xc(%ebp)
f0131163:	7f 2b                	jg     f0131190 <atomic_readline+0xa6>
			if (echoing)
f0131165:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0131169:	74 0e                	je     f0131179 <atomic_readline+0x8f>
				cputchar(c);
f013116b:	83 ec 0c             	sub    $0xc,%esp
f013116e:	ff 75 ec             	pushl  -0x14(%ebp)
f0131171:	e8 15 fb fc ff       	call   f0100c8b <cputchar>
f0131176:	83 c4 10             	add    $0x10,%esp
			buf[i++] = c;
f0131179:	8b 45 f4             	mov    -0xc(%ebp),%eax
f013117c:	8d 50 01             	lea    0x1(%eax),%edx
f013117f:	89 55 f4             	mov    %edx,-0xc(%ebp)
f0131182:	89 c2                	mov    %eax,%edx
f0131184:	8b 45 0c             	mov    0xc(%ebp),%eax
f0131187:	01 d0                	add    %edx,%eax
f0131189:	8b 55 ec             	mov    -0x14(%ebp),%edx
f013118c:	88 10                	mov    %dl,(%eax)
f013118e:	eb 5b                	jmp    f01311eb <atomic_readline+0x101>
		} else if (c == '\b' && i > 0) {
f0131190:	83 7d ec 08          	cmpl   $0x8,-0x14(%ebp)
f0131194:	75 1f                	jne    f01311b5 <atomic_readline+0xcb>
f0131196:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f013119a:	7e 19                	jle    f01311b5 <atomic_readline+0xcb>
			if (echoing)
f013119c:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f01311a0:	74 0e                	je     f01311b0 <atomic_readline+0xc6>
				cputchar(c);
f01311a2:	83 ec 0c             	sub    $0xc,%esp
f01311a5:	ff 75 ec             	pushl  -0x14(%ebp)
f01311a8:	e8 de fa fc ff       	call   f0100c8b <cputchar>
f01311ad:	83 c4 10             	add    $0x10,%esp
			i--;
f01311b0:	ff 4d f4             	decl   -0xc(%ebp)
f01311b3:	eb 36                	jmp    f01311eb <atomic_readline+0x101>
		} else if (c == '\n' || c == '\r') {
f01311b5:	83 7d ec 0a          	cmpl   $0xa,-0x14(%ebp)
f01311b9:	74 0a                	je     f01311c5 <atomic_readline+0xdb>
f01311bb:	83 7d ec 0d          	cmpl   $0xd,-0x14(%ebp)
f01311bf:	0f 85 60 ff ff ff    	jne    f0131125 <atomic_readline+0x3b>
			if (echoing)
f01311c5:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f01311c9:	74 0e                	je     f01311d9 <atomic_readline+0xef>
				cputchar(c);
f01311cb:	83 ec 0c             	sub    $0xc,%esp
f01311ce:	ff 75 ec             	pushl  -0x14(%ebp)
f01311d1:	e8 b5 fa fc ff       	call   f0100c8b <cputchar>
f01311d6:	83 c4 10             	add    $0x10,%esp
			buf[i] = 0;
f01311d9:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01311dc:	8b 45 0c             	mov    0xc(%ebp),%eax
f01311df:	01 d0                	add    %edx,%eax
f01311e1:	c6 00 00             	movb   $0x0,(%eax)
			sys_enable_interrupt();
f01311e4:	e8 4f bb fd ff       	call   f010cd38 <sys_enable_interrupt>
			return;
f01311e9:	eb 05                	jmp    f01311f0 <atomic_readline+0x106>
		}
	}
f01311eb:	e9 35 ff ff ff       	jmp    f0131125 <atomic_readline+0x3b>
}
f01311f0:	c9                   	leave  
f01311f1:	c3                   	ret    

f01311f2 <strlen>:

#include <inc/string.h>

int
strlen(const char *s)
{
f01311f2:	55                   	push   %ebp
f01311f3:	89 e5                	mov    %esp,%ebp
f01311f5:	83 ec 10             	sub    $0x10,%esp
	int n;

	for (n = 0; *s != '\0'; s++)
f01311f8:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
f01311ff:	eb 06                	jmp    f0131207 <strlen+0x15>
		n++;
f0131201:	ff 45 fc             	incl   -0x4(%ebp)
int
strlen(const char *s)
{
	int n;

	for (n = 0; *s != '\0'; s++)
f0131204:	ff 45 08             	incl   0x8(%ebp)
f0131207:	8b 45 08             	mov    0x8(%ebp),%eax
f013120a:	8a 00                	mov    (%eax),%al
f013120c:	84 c0                	test   %al,%al
f013120e:	75 f1                	jne    f0131201 <strlen+0xf>
		n++;
	return n;
f0131210:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
f0131213:	c9                   	leave  
f0131214:	c3                   	ret    

f0131215 <strnlen>:

int
strnlen(const char *s, uint32 size)
{
f0131215:	55                   	push   %ebp
f0131216:	89 e5                	mov    %esp,%ebp
f0131218:	83 ec 10             	sub    $0x10,%esp
	int n;

	for (n = 0; size > 0 && *s != '\0'; s++, size--)
f013121b:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
f0131222:	eb 09                	jmp    f013122d <strnlen+0x18>
		n++;
f0131224:	ff 45 fc             	incl   -0x4(%ebp)
int
strnlen(const char *s, uint32 size)
{
	int n;

	for (n = 0; size > 0 && *s != '\0'; s++, size--)
f0131227:	ff 45 08             	incl   0x8(%ebp)
f013122a:	ff 4d 0c             	decl   0xc(%ebp)
f013122d:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
f0131231:	74 09                	je     f013123c <strnlen+0x27>
f0131233:	8b 45 08             	mov    0x8(%ebp),%eax
f0131236:	8a 00                	mov    (%eax),%al
f0131238:	84 c0                	test   %al,%al
f013123a:	75 e8                	jne    f0131224 <strnlen+0xf>
		n++;
	return n;
f013123c:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
f013123f:	c9                   	leave  
f0131240:	c3                   	ret    

f0131241 <strcpy>:

char *
strcpy(char *dst, const char *src)
{
f0131241:	55                   	push   %ebp
f0131242:	89 e5                	mov    %esp,%ebp
f0131244:	83 ec 10             	sub    $0x10,%esp
	char *ret;

	ret = dst;
f0131247:	8b 45 08             	mov    0x8(%ebp),%eax
f013124a:	89 45 fc             	mov    %eax,-0x4(%ebp)
	while ((*dst++ = *src++) != '\0')
f013124d:	90                   	nop
f013124e:	8b 45 08             	mov    0x8(%ebp),%eax
f0131251:	8d 50 01             	lea    0x1(%eax),%edx
f0131254:	89 55 08             	mov    %edx,0x8(%ebp)
f0131257:	8b 55 0c             	mov    0xc(%ebp),%edx
f013125a:	8d 4a 01             	lea    0x1(%edx),%ecx
f013125d:	89 4d 0c             	mov    %ecx,0xc(%ebp)
f0131260:	8a 12                	mov    (%edx),%dl
f0131262:	88 10                	mov    %dl,(%eax)
f0131264:	8a 00                	mov    (%eax),%al
f0131266:	84 c0                	test   %al,%al
f0131268:	75 e4                	jne    f013124e <strcpy+0xd>
		/* do nothing */;
	return ret;
f013126a:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
f013126d:	c9                   	leave  
f013126e:	c3                   	ret    

f013126f <strncpy>:

char *
strncpy(char *dst, const char *src, uint32 size) {
f013126f:	55                   	push   %ebp
f0131270:	89 e5                	mov    %esp,%ebp
f0131272:	83 ec 10             	sub    $0x10,%esp
	uint32 i;
	char *ret;

	ret = dst;
f0131275:	8b 45 08             	mov    0x8(%ebp),%eax
f0131278:	89 45 f8             	mov    %eax,-0x8(%ebp)
	for (i = 0; i < size; i++) {
f013127b:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
f0131282:	eb 1f                	jmp    f01312a3 <strncpy+0x34>
		*dst++ = *src;
f0131284:	8b 45 08             	mov    0x8(%ebp),%eax
f0131287:	8d 50 01             	lea    0x1(%eax),%edx
f013128a:	89 55 08             	mov    %edx,0x8(%ebp)
f013128d:	8b 55 0c             	mov    0xc(%ebp),%edx
f0131290:	8a 12                	mov    (%edx),%dl
f0131292:	88 10                	mov    %dl,(%eax)
		// If strlen(src) < size, null-pad 'dst' out to 'size' chars
		if (*src != '\0')
f0131294:	8b 45 0c             	mov    0xc(%ebp),%eax
f0131297:	8a 00                	mov    (%eax),%al
f0131299:	84 c0                	test   %al,%al
f013129b:	74 03                	je     f01312a0 <strncpy+0x31>
			src++;
f013129d:	ff 45 0c             	incl   0xc(%ebp)
strncpy(char *dst, const char *src, uint32 size) {
	uint32 i;
	char *ret;

	ret = dst;
	for (i = 0; i < size; i++) {
f01312a0:	ff 45 fc             	incl   -0x4(%ebp)
f01312a3:	8b 45 fc             	mov    -0x4(%ebp),%eax
f01312a6:	3b 45 10             	cmp    0x10(%ebp),%eax
f01312a9:	72 d9                	jb     f0131284 <strncpy+0x15>
		*dst++ = *src;
		// If strlen(src) < size, null-pad 'dst' out to 'size' chars
		if (*src != '\0')
			src++;
	}
	return ret;
f01312ab:	8b 45 f8             	mov    -0x8(%ebp),%eax
}
f01312ae:	c9                   	leave  
f01312af:	c3                   	ret    

f01312b0 <strlcpy>:

uint32
strlcpy(char *dst, const char *src, uint32 size)
{
f01312b0:	55                   	push   %ebp
f01312b1:	89 e5                	mov    %esp,%ebp
f01312b3:	83 ec 10             	sub    $0x10,%esp
	char *dst_in;

	dst_in = dst;
f01312b6:	8b 45 08             	mov    0x8(%ebp),%eax
f01312b9:	89 45 fc             	mov    %eax,-0x4(%ebp)
	if (size > 0) {
f01312bc:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
f01312c0:	74 30                	je     f01312f2 <strlcpy+0x42>
		while (--size > 0 && *src != '\0')
f01312c2:	eb 16                	jmp    f01312da <strlcpy+0x2a>
			*dst++ = *src++;
f01312c4:	8b 45 08             	mov    0x8(%ebp),%eax
f01312c7:	8d 50 01             	lea    0x1(%eax),%edx
f01312ca:	89 55 08             	mov    %edx,0x8(%ebp)
f01312cd:	8b 55 0c             	mov    0xc(%ebp),%edx
f01312d0:	8d 4a 01             	lea    0x1(%edx),%ecx
f01312d3:	89 4d 0c             	mov    %ecx,0xc(%ebp)
f01312d6:	8a 12                	mov    (%edx),%dl
f01312d8:	88 10                	mov    %dl,(%eax)
{
	char *dst_in;

	dst_in = dst;
	if (size > 0) {
		while (--size > 0 && *src != '\0')
f01312da:	ff 4d 10             	decl   0x10(%ebp)
f01312dd:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
f01312e1:	74 09                	je     f01312ec <strlcpy+0x3c>
f01312e3:	8b 45 0c             	mov    0xc(%ebp),%eax
f01312e6:	8a 00                	mov    (%eax),%al
f01312e8:	84 c0                	test   %al,%al
f01312ea:	75 d8                	jne    f01312c4 <strlcpy+0x14>
			*dst++ = *src++;
		*dst = '\0';
f01312ec:	8b 45 08             	mov    0x8(%ebp),%eax
f01312ef:	c6 00 00             	movb   $0x0,(%eax)
	}
	return dst - dst_in;
f01312f2:	8b 55 08             	mov    0x8(%ebp),%edx
f01312f5:	8b 45 fc             	mov    -0x4(%ebp),%eax
f01312f8:	29 c2                	sub    %eax,%edx
f01312fa:	89 d0                	mov    %edx,%eax
}
f01312fc:	c9                   	leave  
f01312fd:	c3                   	ret    

f01312fe <strcmp>:

int
strcmp(const char *p, const char *q)
{
f01312fe:	55                   	push   %ebp
f01312ff:	89 e5                	mov    %esp,%ebp
	while (*p && *p == *q)
f0131301:	eb 06                	jmp    f0131309 <strcmp+0xb>
		p++, q++;
f0131303:	ff 45 08             	incl   0x8(%ebp)
f0131306:	ff 45 0c             	incl   0xc(%ebp)
}

int
strcmp(const char *p, const char *q)
{
	while (*p && *p == *q)
f0131309:	8b 45 08             	mov    0x8(%ebp),%eax
f013130c:	8a 00                	mov    (%eax),%al
f013130e:	84 c0                	test   %al,%al
f0131310:	74 0e                	je     f0131320 <strcmp+0x22>
f0131312:	8b 45 08             	mov    0x8(%ebp),%eax
f0131315:	8a 10                	mov    (%eax),%dl
f0131317:	8b 45 0c             	mov    0xc(%ebp),%eax
f013131a:	8a 00                	mov    (%eax),%al
f013131c:	38 c2                	cmp    %al,%dl
f013131e:	74 e3                	je     f0131303 <strcmp+0x5>
		p++, q++;
	return (int) ((unsigned char) *p - (unsigned char) *q);
f0131320:	8b 45 08             	mov    0x8(%ebp),%eax
f0131323:	8a 00                	mov    (%eax),%al
f0131325:	0f b6 d0             	movzbl %al,%edx
f0131328:	8b 45 0c             	mov    0xc(%ebp),%eax
f013132b:	8a 00                	mov    (%eax),%al
f013132d:	0f b6 c0             	movzbl %al,%eax
f0131330:	29 c2                	sub    %eax,%edx
f0131332:	89 d0                	mov    %edx,%eax
}
f0131334:	5d                   	pop    %ebp
f0131335:	c3                   	ret    

f0131336 <strncmp>:

int
strncmp(const char *p, const char *q, uint32 n)
{
f0131336:	55                   	push   %ebp
f0131337:	89 e5                	mov    %esp,%ebp
	while (n > 0 && *p && *p == *q)
f0131339:	eb 09                	jmp    f0131344 <strncmp+0xe>
		n--, p++, q++;
f013133b:	ff 4d 10             	decl   0x10(%ebp)
f013133e:	ff 45 08             	incl   0x8(%ebp)
f0131341:	ff 45 0c             	incl   0xc(%ebp)
}

int
strncmp(const char *p, const char *q, uint32 n)
{
	while (n > 0 && *p && *p == *q)
f0131344:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
f0131348:	74 17                	je     f0131361 <strncmp+0x2b>
f013134a:	8b 45 08             	mov    0x8(%ebp),%eax
f013134d:	8a 00                	mov    (%eax),%al
f013134f:	84 c0                	test   %al,%al
f0131351:	74 0e                	je     f0131361 <strncmp+0x2b>
f0131353:	8b 45 08             	mov    0x8(%ebp),%eax
f0131356:	8a 10                	mov    (%eax),%dl
f0131358:	8b 45 0c             	mov    0xc(%ebp),%eax
f013135b:	8a 00                	mov    (%eax),%al
f013135d:	38 c2                	cmp    %al,%dl
f013135f:	74 da                	je     f013133b <strncmp+0x5>
		n--, p++, q++;
	if (n == 0)
f0131361:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
f0131365:	75 07                	jne    f013136e <strncmp+0x38>
		return 0;
f0131367:	b8 00 00 00 00       	mov    $0x0,%eax
f013136c:	eb 14                	jmp    f0131382 <strncmp+0x4c>
	else
		return (int) ((unsigned char) *p - (unsigned char) *q);
f013136e:	8b 45 08             	mov    0x8(%ebp),%eax
f0131371:	8a 00                	mov    (%eax),%al
f0131373:	0f b6 d0             	movzbl %al,%edx
f0131376:	8b 45 0c             	mov    0xc(%ebp),%eax
f0131379:	8a 00                	mov    (%eax),%al
f013137b:	0f b6 c0             	movzbl %al,%eax
f013137e:	29 c2                	sub    %eax,%edx
f0131380:	89 d0                	mov    %edx,%eax
}
f0131382:	5d                   	pop    %ebp
f0131383:	c3                   	ret    

f0131384 <strchr>:

// Return a pointer to the first occurrence of 'c' in 's',
// or a null pointer if the string has no 'c'.
char *
strchr(const char *s, char c)
{
f0131384:	55                   	push   %ebp
f0131385:	89 e5                	mov    %esp,%ebp
f0131387:	83 ec 04             	sub    $0x4,%esp
f013138a:	8b 45 0c             	mov    0xc(%ebp),%eax
f013138d:	88 45 fc             	mov    %al,-0x4(%ebp)
	for (; *s; s++)
f0131390:	eb 12                	jmp    f01313a4 <strchr+0x20>
		if (*s == c)
f0131392:	8b 45 08             	mov    0x8(%ebp),%eax
f0131395:	8a 00                	mov    (%eax),%al
f0131397:	3a 45 fc             	cmp    -0x4(%ebp),%al
f013139a:	75 05                	jne    f01313a1 <strchr+0x1d>
			return (char *) s;
f013139c:	8b 45 08             	mov    0x8(%ebp),%eax
f013139f:	eb 11                	jmp    f01313b2 <strchr+0x2e>
// Return a pointer to the first occurrence of 'c' in 's',
// or a null pointer if the string has no 'c'.
char *
strchr(const char *s, char c)
{
	for (; *s; s++)
f01313a1:	ff 45 08             	incl   0x8(%ebp)
f01313a4:	8b 45 08             	mov    0x8(%ebp),%eax
f01313a7:	8a 00                	mov    (%eax),%al
f01313a9:	84 c0                	test   %al,%al
f01313ab:	75 e5                	jne    f0131392 <strchr+0xe>
		if (*s == c)
			return (char *) s;
	return 0;
f01313ad:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01313b2:	c9                   	leave  
f01313b3:	c3                   	ret    

f01313b4 <strfind>:

// Return a pointer to the first occurrence of 'c' in 's',
// or a pointer to the string-ending null character if the string has no 'c'.
char *
strfind(const char *s, char c)
{
f01313b4:	55                   	push   %ebp
f01313b5:	89 e5                	mov    %esp,%ebp
f01313b7:	83 ec 04             	sub    $0x4,%esp
f01313ba:	8b 45 0c             	mov    0xc(%ebp),%eax
f01313bd:	88 45 fc             	mov    %al,-0x4(%ebp)
	for (; *s; s++)
f01313c0:	eb 0d                	jmp    f01313cf <strfind+0x1b>
		if (*s == c)
f01313c2:	8b 45 08             	mov    0x8(%ebp),%eax
f01313c5:	8a 00                	mov    (%eax),%al
f01313c7:	3a 45 fc             	cmp    -0x4(%ebp),%al
f01313ca:	74 0e                	je     f01313da <strfind+0x26>
// Return a pointer to the first occurrence of 'c' in 's',
// or a pointer to the string-ending null character if the string has no 'c'.
char *
strfind(const char *s, char c)
{
	for (; *s; s++)
f01313cc:	ff 45 08             	incl   0x8(%ebp)
f01313cf:	8b 45 08             	mov    0x8(%ebp),%eax
f01313d2:	8a 00                	mov    (%eax),%al
f01313d4:	84 c0                	test   %al,%al
f01313d6:	75 ea                	jne    f01313c2 <strfind+0xe>
f01313d8:	eb 01                	jmp    f01313db <strfind+0x27>
		if (*s == c)
			break;
f01313da:	90                   	nop
	return (char *) s;
f01313db:	8b 45 08             	mov    0x8(%ebp),%eax
}
f01313de:	c9                   	leave  
f01313df:	c3                   	ret    

f01313e0 <memset>:


void *
memset(void *v, int c, uint32 n)
{
f01313e0:	55                   	push   %ebp
f01313e1:	89 e5                	mov    %esp,%ebp
f01313e3:	83 ec 10             	sub    $0x10,%esp
	char *p;
	int m;

	p = v;
f01313e6:	8b 45 08             	mov    0x8(%ebp),%eax
f01313e9:	89 45 fc             	mov    %eax,-0x4(%ebp)
	m = n;
f01313ec:	8b 45 10             	mov    0x10(%ebp),%eax
f01313ef:	89 45 f8             	mov    %eax,-0x8(%ebp)
	while (--m >= 0)
f01313f2:	eb 0e                	jmp    f0131402 <memset+0x22>
		*p++ = c;
f01313f4:	8b 45 fc             	mov    -0x4(%ebp),%eax
f01313f7:	8d 50 01             	lea    0x1(%eax),%edx
f01313fa:	89 55 fc             	mov    %edx,-0x4(%ebp)
f01313fd:	8b 55 0c             	mov    0xc(%ebp),%edx
f0131400:	88 10                	mov    %dl,(%eax)
	char *p;
	int m;

	p = v;
	m = n;
	while (--m >= 0)
f0131402:	ff 4d f8             	decl   -0x8(%ebp)
f0131405:	83 7d f8 00          	cmpl   $0x0,-0x8(%ebp)
f0131409:	79 e9                	jns    f01313f4 <memset+0x14>
		*p++ = c;

	return v;
f013140b:	8b 45 08             	mov    0x8(%ebp),%eax
}
f013140e:	c9                   	leave  
f013140f:	c3                   	ret    

f0131410 <memcpy>:

void *
memcpy(void *dst, const void *src, uint32 n)
{
f0131410:	55                   	push   %ebp
f0131411:	89 e5                	mov    %esp,%ebp
f0131413:	83 ec 10             	sub    $0x10,%esp
	const char *s;
	char *d;

	s = src;
f0131416:	8b 45 0c             	mov    0xc(%ebp),%eax
f0131419:	89 45 fc             	mov    %eax,-0x4(%ebp)
	d = dst;
f013141c:	8b 45 08             	mov    0x8(%ebp),%eax
f013141f:	89 45 f8             	mov    %eax,-0x8(%ebp)
	while (n-- > 0)
f0131422:	eb 16                	jmp    f013143a <memcpy+0x2a>
		*d++ = *s++;
f0131424:	8b 45 f8             	mov    -0x8(%ebp),%eax
f0131427:	8d 50 01             	lea    0x1(%eax),%edx
f013142a:	89 55 f8             	mov    %edx,-0x8(%ebp)
f013142d:	8b 55 fc             	mov    -0x4(%ebp),%edx
f0131430:	8d 4a 01             	lea    0x1(%edx),%ecx
f0131433:	89 4d fc             	mov    %ecx,-0x4(%ebp)
f0131436:	8a 12                	mov    (%edx),%dl
f0131438:	88 10                	mov    %dl,(%eax)
	const char *s;
	char *d;

	s = src;
	d = dst;
	while (n-- > 0)
f013143a:	8b 45 10             	mov    0x10(%ebp),%eax
f013143d:	8d 50 ff             	lea    -0x1(%eax),%edx
f0131440:	89 55 10             	mov    %edx,0x10(%ebp)
f0131443:	85 c0                	test   %eax,%eax
f0131445:	75 dd                	jne    f0131424 <memcpy+0x14>
		*d++ = *s++;

	return dst;
f0131447:	8b 45 08             	mov    0x8(%ebp),%eax
}
f013144a:	c9                   	leave  
f013144b:	c3                   	ret    

f013144c <memmove>:

void *
memmove(void *dst, const void *src, uint32 n)
{
f013144c:	55                   	push   %ebp
f013144d:	89 e5                	mov    %esp,%ebp
f013144f:	83 ec 10             	sub    $0x10,%esp
	const char *s;
	char *d;

	s = src;
f0131452:	8b 45 0c             	mov    0xc(%ebp),%eax
f0131455:	89 45 fc             	mov    %eax,-0x4(%ebp)
	d = dst;
f0131458:	8b 45 08             	mov    0x8(%ebp),%eax
f013145b:	89 45 f8             	mov    %eax,-0x8(%ebp)
	if (s < d && s + n > d) {
f013145e:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0131461:	3b 45 f8             	cmp    -0x8(%ebp),%eax
f0131464:	73 50                	jae    f01314b6 <memmove+0x6a>
f0131466:	8b 55 fc             	mov    -0x4(%ebp),%edx
f0131469:	8b 45 10             	mov    0x10(%ebp),%eax
f013146c:	01 d0                	add    %edx,%eax
f013146e:	3b 45 f8             	cmp    -0x8(%ebp),%eax
f0131471:	76 43                	jbe    f01314b6 <memmove+0x6a>
		s += n;
f0131473:	8b 45 10             	mov    0x10(%ebp),%eax
f0131476:	01 45 fc             	add    %eax,-0x4(%ebp)
		d += n;
f0131479:	8b 45 10             	mov    0x10(%ebp),%eax
f013147c:	01 45 f8             	add    %eax,-0x8(%ebp)
		while (n-- > 0)
f013147f:	eb 10                	jmp    f0131491 <memmove+0x45>
			*--d = *--s;
f0131481:	ff 4d f8             	decl   -0x8(%ebp)
f0131484:	ff 4d fc             	decl   -0x4(%ebp)
f0131487:	8b 45 fc             	mov    -0x4(%ebp),%eax
f013148a:	8a 10                	mov    (%eax),%dl
f013148c:	8b 45 f8             	mov    -0x8(%ebp),%eax
f013148f:	88 10                	mov    %dl,(%eax)
	s = src;
	d = dst;
	if (s < d && s + n > d) {
		s += n;
		d += n;
		while (n-- > 0)
f0131491:	8b 45 10             	mov    0x10(%ebp),%eax
f0131494:	8d 50 ff             	lea    -0x1(%eax),%edx
f0131497:	89 55 10             	mov    %edx,0x10(%ebp)
f013149a:	85 c0                	test   %eax,%eax
f013149c:	75 e3                	jne    f0131481 <memmove+0x35>
	const char *s;
	char *d;

	s = src;
	d = dst;
	if (s < d && s + n > d) {
f013149e:	eb 23                	jmp    f01314c3 <memmove+0x77>
		d += n;
		while (n-- > 0)
			*--d = *--s;
	} else
		while (n-- > 0)
			*d++ = *s++;
f01314a0:	8b 45 f8             	mov    -0x8(%ebp),%eax
f01314a3:	8d 50 01             	lea    0x1(%eax),%edx
f01314a6:	89 55 f8             	mov    %edx,-0x8(%ebp)
f01314a9:	8b 55 fc             	mov    -0x4(%ebp),%edx
f01314ac:	8d 4a 01             	lea    0x1(%edx),%ecx
f01314af:	89 4d fc             	mov    %ecx,-0x4(%ebp)
f01314b2:	8a 12                	mov    (%edx),%dl
f01314b4:	88 10                	mov    %dl,(%eax)
		s += n;
		d += n;
		while (n-- > 0)
			*--d = *--s;
	} else
		while (n-- > 0)
f01314b6:	8b 45 10             	mov    0x10(%ebp),%eax
f01314b9:	8d 50 ff             	lea    -0x1(%eax),%edx
f01314bc:	89 55 10             	mov    %edx,0x10(%ebp)
f01314bf:	85 c0                	test   %eax,%eax
f01314c1:	75 dd                	jne    f01314a0 <memmove+0x54>
			*d++ = *s++;

	return dst;
f01314c3:	8b 45 08             	mov    0x8(%ebp),%eax
}
f01314c6:	c9                   	leave  
f01314c7:	c3                   	ret    

f01314c8 <memcmp>:

int
memcmp(const void *v1, const void *v2, uint32 n)
{
f01314c8:	55                   	push   %ebp
f01314c9:	89 e5                	mov    %esp,%ebp
f01314cb:	83 ec 10             	sub    $0x10,%esp
	const uint8 *s1 = (const uint8 *) v1;
f01314ce:	8b 45 08             	mov    0x8(%ebp),%eax
f01314d1:	89 45 fc             	mov    %eax,-0x4(%ebp)
	const uint8 *s2 = (const uint8 *) v2;
f01314d4:	8b 45 0c             	mov    0xc(%ebp),%eax
f01314d7:	89 45 f8             	mov    %eax,-0x8(%ebp)

	while (n-- > 0) {
f01314da:	eb 2a                	jmp    f0131506 <memcmp+0x3e>
		if (*s1 != *s2)
f01314dc:	8b 45 fc             	mov    -0x4(%ebp),%eax
f01314df:	8a 10                	mov    (%eax),%dl
f01314e1:	8b 45 f8             	mov    -0x8(%ebp),%eax
f01314e4:	8a 00                	mov    (%eax),%al
f01314e6:	38 c2                	cmp    %al,%dl
f01314e8:	74 16                	je     f0131500 <memcmp+0x38>
			return (int) *s1 - (int) *s2;
f01314ea:	8b 45 fc             	mov    -0x4(%ebp),%eax
f01314ed:	8a 00                	mov    (%eax),%al
f01314ef:	0f b6 d0             	movzbl %al,%edx
f01314f2:	8b 45 f8             	mov    -0x8(%ebp),%eax
f01314f5:	8a 00                	mov    (%eax),%al
f01314f7:	0f b6 c0             	movzbl %al,%eax
f01314fa:	29 c2                	sub    %eax,%edx
f01314fc:	89 d0                	mov    %edx,%eax
f01314fe:	eb 18                	jmp    f0131518 <memcmp+0x50>
		s1++, s2++;
f0131500:	ff 45 fc             	incl   -0x4(%ebp)
f0131503:	ff 45 f8             	incl   -0x8(%ebp)
memcmp(const void *v1, const void *v2, uint32 n)
{
	const uint8 *s1 = (const uint8 *) v1;
	const uint8 *s2 = (const uint8 *) v2;

	while (n-- > 0) {
f0131506:	8b 45 10             	mov    0x10(%ebp),%eax
f0131509:	8d 50 ff             	lea    -0x1(%eax),%edx
f013150c:	89 55 10             	mov    %edx,0x10(%ebp)
f013150f:	85 c0                	test   %eax,%eax
f0131511:	75 c9                	jne    f01314dc <memcmp+0x14>
		if (*s1 != *s2)
			return (int) *s1 - (int) *s2;
		s1++, s2++;
	}

	return 0;
f0131513:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0131518:	c9                   	leave  
f0131519:	c3                   	ret    

f013151a <memfind>:

void *
memfind(const void *s, int c, uint32 n)
{
f013151a:	55                   	push   %ebp
f013151b:	89 e5                	mov    %esp,%ebp
f013151d:	83 ec 10             	sub    $0x10,%esp
	const void *ends = (const char *) s + n;
f0131520:	8b 55 08             	mov    0x8(%ebp),%edx
f0131523:	8b 45 10             	mov    0x10(%ebp),%eax
f0131526:	01 d0                	add    %edx,%eax
f0131528:	89 45 fc             	mov    %eax,-0x4(%ebp)
	for (; s < ends; s++)
f013152b:	eb 15                	jmp    f0131542 <memfind+0x28>
		if (*(const unsigned char *) s == (unsigned char) c)
f013152d:	8b 45 08             	mov    0x8(%ebp),%eax
f0131530:	8a 00                	mov    (%eax),%al
f0131532:	0f b6 d0             	movzbl %al,%edx
f0131535:	8b 45 0c             	mov    0xc(%ebp),%eax
f0131538:	0f b6 c0             	movzbl %al,%eax
f013153b:	39 c2                	cmp    %eax,%edx
f013153d:	74 0d                	je     f013154c <memfind+0x32>

void *
memfind(const void *s, int c, uint32 n)
{
	const void *ends = (const char *) s + n;
	for (; s < ends; s++)
f013153f:	ff 45 08             	incl   0x8(%ebp)
f0131542:	8b 45 08             	mov    0x8(%ebp),%eax
f0131545:	3b 45 fc             	cmp    -0x4(%ebp),%eax
f0131548:	72 e3                	jb     f013152d <memfind+0x13>
f013154a:	eb 01                	jmp    f013154d <memfind+0x33>
		if (*(const unsigned char *) s == (unsigned char) c)
			break;
f013154c:	90                   	nop
	return (void *) s;
f013154d:	8b 45 08             	mov    0x8(%ebp),%eax
}
f0131550:	c9                   	leave  
f0131551:	c3                   	ret    

f0131552 <strtol>:

long
strtol(const char *s, char **endptr, int base)
{
f0131552:	55                   	push   %ebp
f0131553:	89 e5                	mov    %esp,%ebp
f0131555:	83 ec 10             	sub    $0x10,%esp
	int neg = 0;
f0131558:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
	long val = 0;
f013155f:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)

	// gobble initial whitespace
	while (*s == ' ' || *s == '\t')
f0131566:	eb 03                	jmp    f013156b <strtol+0x19>
		s++;
f0131568:	ff 45 08             	incl   0x8(%ebp)
{
	int neg = 0;
	long val = 0;

	// gobble initial whitespace
	while (*s == ' ' || *s == '\t')
f013156b:	8b 45 08             	mov    0x8(%ebp),%eax
f013156e:	8a 00                	mov    (%eax),%al
f0131570:	3c 20                	cmp    $0x20,%al
f0131572:	74 f4                	je     f0131568 <strtol+0x16>
f0131574:	8b 45 08             	mov    0x8(%ebp),%eax
f0131577:	8a 00                	mov    (%eax),%al
f0131579:	3c 09                	cmp    $0x9,%al
f013157b:	74 eb                	je     f0131568 <strtol+0x16>
		s++;

	// plus/minus sign
	if (*s == '+')
f013157d:	8b 45 08             	mov    0x8(%ebp),%eax
f0131580:	8a 00                	mov    (%eax),%al
f0131582:	3c 2b                	cmp    $0x2b,%al
f0131584:	75 05                	jne    f013158b <strtol+0x39>
		s++;
f0131586:	ff 45 08             	incl   0x8(%ebp)
f0131589:	eb 13                	jmp    f013159e <strtol+0x4c>
	else if (*s == '-')
f013158b:	8b 45 08             	mov    0x8(%ebp),%eax
f013158e:	8a 00                	mov    (%eax),%al
f0131590:	3c 2d                	cmp    $0x2d,%al
f0131592:	75 0a                	jne    f013159e <strtol+0x4c>
		s++, neg = 1;
f0131594:	ff 45 08             	incl   0x8(%ebp)
f0131597:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%ebp)

	// hex or octal base prefix
	if ((base == 0 || base == 16) && (s[0] == '0' && s[1] == 'x'))
f013159e:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
f01315a2:	74 06                	je     f01315aa <strtol+0x58>
f01315a4:	83 7d 10 10          	cmpl   $0x10,0x10(%ebp)
f01315a8:	75 20                	jne    f01315ca <strtol+0x78>
f01315aa:	8b 45 08             	mov    0x8(%ebp),%eax
f01315ad:	8a 00                	mov    (%eax),%al
f01315af:	3c 30                	cmp    $0x30,%al
f01315b1:	75 17                	jne    f01315ca <strtol+0x78>
f01315b3:	8b 45 08             	mov    0x8(%ebp),%eax
f01315b6:	40                   	inc    %eax
f01315b7:	8a 00                	mov    (%eax),%al
f01315b9:	3c 78                	cmp    $0x78,%al
f01315bb:	75 0d                	jne    f01315ca <strtol+0x78>
		s += 2, base = 16;
f01315bd:	83 45 08 02          	addl   $0x2,0x8(%ebp)
f01315c1:	c7 45 10 10 00 00 00 	movl   $0x10,0x10(%ebp)
f01315c8:	eb 28                	jmp    f01315f2 <strtol+0xa0>
	else if (base == 0 && s[0] == '0')
f01315ca:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
f01315ce:	75 15                	jne    f01315e5 <strtol+0x93>
f01315d0:	8b 45 08             	mov    0x8(%ebp),%eax
f01315d3:	8a 00                	mov    (%eax),%al
f01315d5:	3c 30                	cmp    $0x30,%al
f01315d7:	75 0c                	jne    f01315e5 <strtol+0x93>
		s++, base = 8;
f01315d9:	ff 45 08             	incl   0x8(%ebp)
f01315dc:	c7 45 10 08 00 00 00 	movl   $0x8,0x10(%ebp)
f01315e3:	eb 0d                	jmp    f01315f2 <strtol+0xa0>
	else if (base == 0)
f01315e5:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
f01315e9:	75 07                	jne    f01315f2 <strtol+0xa0>
		base = 10;
f01315eb:	c7 45 10 0a 00 00 00 	movl   $0xa,0x10(%ebp)

	// digits
	while (1) {
		int dig;

		if (*s >= '0' && *s <= '9')
f01315f2:	8b 45 08             	mov    0x8(%ebp),%eax
f01315f5:	8a 00                	mov    (%eax),%al
f01315f7:	3c 2f                	cmp    $0x2f,%al
f01315f9:	7e 19                	jle    f0131614 <strtol+0xc2>
f01315fb:	8b 45 08             	mov    0x8(%ebp),%eax
f01315fe:	8a 00                	mov    (%eax),%al
f0131600:	3c 39                	cmp    $0x39,%al
f0131602:	7f 10                	jg     f0131614 <strtol+0xc2>
			dig = *s - '0';
f0131604:	8b 45 08             	mov    0x8(%ebp),%eax
f0131607:	8a 00                	mov    (%eax),%al
f0131609:	0f be c0             	movsbl %al,%eax
f013160c:	83 e8 30             	sub    $0x30,%eax
f013160f:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0131612:	eb 42                	jmp    f0131656 <strtol+0x104>
		else if (*s >= 'a' && *s <= 'z')
f0131614:	8b 45 08             	mov    0x8(%ebp),%eax
f0131617:	8a 00                	mov    (%eax),%al
f0131619:	3c 60                	cmp    $0x60,%al
f013161b:	7e 19                	jle    f0131636 <strtol+0xe4>
f013161d:	8b 45 08             	mov    0x8(%ebp),%eax
f0131620:	8a 00                	mov    (%eax),%al
f0131622:	3c 7a                	cmp    $0x7a,%al
f0131624:	7f 10                	jg     f0131636 <strtol+0xe4>
			dig = *s - 'a' + 10;
f0131626:	8b 45 08             	mov    0x8(%ebp),%eax
f0131629:	8a 00                	mov    (%eax),%al
f013162b:	0f be c0             	movsbl %al,%eax
f013162e:	83 e8 57             	sub    $0x57,%eax
f0131631:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0131634:	eb 20                	jmp    f0131656 <strtol+0x104>
		else if (*s >= 'A' && *s <= 'Z')
f0131636:	8b 45 08             	mov    0x8(%ebp),%eax
f0131639:	8a 00                	mov    (%eax),%al
f013163b:	3c 40                	cmp    $0x40,%al
f013163d:	7e 39                	jle    f0131678 <strtol+0x126>
f013163f:	8b 45 08             	mov    0x8(%ebp),%eax
f0131642:	8a 00                	mov    (%eax),%al
f0131644:	3c 5a                	cmp    $0x5a,%al
f0131646:	7f 30                	jg     f0131678 <strtol+0x126>
			dig = *s - 'A' + 10;
f0131648:	8b 45 08             	mov    0x8(%ebp),%eax
f013164b:	8a 00                	mov    (%eax),%al
f013164d:	0f be c0             	movsbl %al,%eax
f0131650:	83 e8 37             	sub    $0x37,%eax
f0131653:	89 45 f4             	mov    %eax,-0xc(%ebp)
		else
			break;
		if (dig >= base)
f0131656:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131659:	3b 45 10             	cmp    0x10(%ebp),%eax
f013165c:	7d 19                	jge    f0131677 <strtol+0x125>
			break;
		s++, val = (val * base) + dig;
f013165e:	ff 45 08             	incl   0x8(%ebp)
f0131661:	8b 45 f8             	mov    -0x8(%ebp),%eax
f0131664:	0f af 45 10          	imul   0x10(%ebp),%eax
f0131668:	89 c2                	mov    %eax,%edx
f013166a:	8b 45 f4             	mov    -0xc(%ebp),%eax
f013166d:	01 d0                	add    %edx,%eax
f013166f:	89 45 f8             	mov    %eax,-0x8(%ebp)
		// we don't properly detect overflow!
	}
f0131672:	e9 7b ff ff ff       	jmp    f01315f2 <strtol+0xa0>
		else if (*s >= 'A' && *s <= 'Z')
			dig = *s - 'A' + 10;
		else
			break;
		if (dig >= base)
			break;
f0131677:	90                   	nop
		s++, val = (val * base) + dig;
		// we don't properly detect overflow!
	}

	if (endptr)
f0131678:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
f013167c:	74 08                	je     f0131686 <strtol+0x134>
		*endptr = (char *) s;
f013167e:	8b 45 0c             	mov    0xc(%ebp),%eax
f0131681:	8b 55 08             	mov    0x8(%ebp),%edx
f0131684:	89 10                	mov    %edx,(%eax)
	return (neg ? -val : val);
f0131686:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
f013168a:	74 07                	je     f0131693 <strtol+0x141>
f013168c:	8b 45 f8             	mov    -0x8(%ebp),%eax
f013168f:	f7 d8                	neg    %eax
f0131691:	eb 03                	jmp    f0131696 <strtol+0x144>
f0131693:	8b 45 f8             	mov    -0x8(%ebp),%eax
}
f0131696:	c9                   	leave  
f0131697:	c3                   	ret    

f0131698 <ltostr>:

void
ltostr(long value, char *str)
{
f0131698:	55                   	push   %ebp
f0131699:	89 e5                	mov    %esp,%ebp
f013169b:	83 ec 20             	sub    $0x20,%esp
	int neg = 0;
f013169e:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
	int s = 0 ;
f01316a5:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)

	// plus/minus sign
	if (value < 0)
f01316ac:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f01316b0:	79 13                	jns    f01316c5 <ltostr+0x2d>
	{
		neg = 1;
f01316b2:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%ebp)
		str[0] = '-';
f01316b9:	8b 45 0c             	mov    0xc(%ebp),%eax
f01316bc:	c6 00 2d             	movb   $0x2d,(%eax)
		value = value * -1 ;
f01316bf:	f7 5d 08             	negl   0x8(%ebp)
		s++ ;
f01316c2:	ff 45 f8             	incl   -0x8(%ebp)
	}
	do
	{
		int mod = value % 10 ;
f01316c5:	8b 45 08             	mov    0x8(%ebp),%eax
f01316c8:	b9 0a 00 00 00       	mov    $0xa,%ecx
f01316cd:	99                   	cltd   
f01316ce:	f7 f9                	idiv   %ecx
f01316d0:	89 55 ec             	mov    %edx,-0x14(%ebp)
		str[s++] = mod + '0' ;
f01316d3:	8b 45 f8             	mov    -0x8(%ebp),%eax
f01316d6:	8d 50 01             	lea    0x1(%eax),%edx
f01316d9:	89 55 f8             	mov    %edx,-0x8(%ebp)
f01316dc:	89 c2                	mov    %eax,%edx
f01316de:	8b 45 0c             	mov    0xc(%ebp),%eax
f01316e1:	01 d0                	add    %edx,%eax
f01316e3:	8b 55 ec             	mov    -0x14(%ebp),%edx
f01316e6:	83 c2 30             	add    $0x30,%edx
f01316e9:	88 10                	mov    %dl,(%eax)
		value = value / 10 ;
f01316eb:	8b 4d 08             	mov    0x8(%ebp),%ecx
f01316ee:	b8 67 66 66 66       	mov    $0x66666667,%eax
f01316f3:	f7 e9                	imul   %ecx
f01316f5:	c1 fa 02             	sar    $0x2,%edx
f01316f8:	89 c8                	mov    %ecx,%eax
f01316fa:	c1 f8 1f             	sar    $0x1f,%eax
f01316fd:	29 c2                	sub    %eax,%edx
f01316ff:	89 d0                	mov    %edx,%eax
f0131701:	89 45 08             	mov    %eax,0x8(%ebp)
	} while (value % 10 != 0);
f0131704:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0131707:	b8 67 66 66 66       	mov    $0x66666667,%eax
f013170c:	f7 e9                	imul   %ecx
f013170e:	c1 fa 02             	sar    $0x2,%edx
f0131711:	89 c8                	mov    %ecx,%eax
f0131713:	c1 f8 1f             	sar    $0x1f,%eax
f0131716:	29 c2                	sub    %eax,%edx
f0131718:	89 d0                	mov    %edx,%eax
f013171a:	c1 e0 02             	shl    $0x2,%eax
f013171d:	01 d0                	add    %edx,%eax
f013171f:	01 c0                	add    %eax,%eax
f0131721:	29 c1                	sub    %eax,%ecx
f0131723:	89 ca                	mov    %ecx,%edx
f0131725:	85 d2                	test   %edx,%edx
f0131727:	75 9c                	jne    f01316c5 <ltostr+0x2d>

	//reverse the string
	int start = 0 ;
f0131729:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	int end = s-1 ;
f0131730:	8b 45 f8             	mov    -0x8(%ebp),%eax
f0131733:	48                   	dec    %eax
f0131734:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (neg)
f0131737:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
f013173b:	74 3d                	je     f013177a <ltostr+0xe2>
		start = 1 ;
f013173d:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
	while(start<end)
f0131744:	eb 34                	jmp    f013177a <ltostr+0xe2>
	{
		char tmp = str[start] ;
f0131746:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0131749:	8b 45 0c             	mov    0xc(%ebp),%eax
f013174c:	01 d0                	add    %edx,%eax
f013174e:	8a 00                	mov    (%eax),%al
f0131750:	88 45 eb             	mov    %al,-0x15(%ebp)
		str[start] = str[end] ;
f0131753:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0131756:	8b 45 0c             	mov    0xc(%ebp),%eax
f0131759:	01 c2                	add    %eax,%edx
f013175b:	8b 4d f0             	mov    -0x10(%ebp),%ecx
f013175e:	8b 45 0c             	mov    0xc(%ebp),%eax
f0131761:	01 c8                	add    %ecx,%eax
f0131763:	8a 00                	mov    (%eax),%al
f0131765:	88 02                	mov    %al,(%edx)
		str[end] = tmp;
f0131767:	8b 55 f0             	mov    -0x10(%ebp),%edx
f013176a:	8b 45 0c             	mov    0xc(%ebp),%eax
f013176d:	01 c2                	add    %eax,%edx
f013176f:	8a 45 eb             	mov    -0x15(%ebp),%al
f0131772:	88 02                	mov    %al,(%edx)
		start++ ;
f0131774:	ff 45 f4             	incl   -0xc(%ebp)
		end-- ;
f0131777:	ff 4d f0             	decl   -0x10(%ebp)
	//reverse the string
	int start = 0 ;
	int end = s-1 ;
	if (neg)
		start = 1 ;
	while(start<end)
f013177a:	8b 45 f4             	mov    -0xc(%ebp),%eax
f013177d:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0131780:	7c c4                	jl     f0131746 <ltostr+0xae>
		str[end] = tmp;
		start++ ;
		end-- ;
	}

	str[s] = 0 ;
f0131782:	8b 55 f8             	mov    -0x8(%ebp),%edx
f0131785:	8b 45 0c             	mov    0xc(%ebp),%eax
f0131788:	01 d0                	add    %edx,%eax
f013178a:	c6 00 00             	movb   $0x0,(%eax)
	// we don't properly detect overflow!

}
f013178d:	90                   	nop
f013178e:	c9                   	leave  
f013178f:	c3                   	ret    

f0131790 <strcconcat>:

void
strcconcat(const char *str1, const char *str2, char *final)
{
f0131790:	55                   	push   %ebp
f0131791:	89 e5                	mov    %esp,%ebp
f0131793:	83 ec 10             	sub    $0x10,%esp
	int len1 = strlen(str1);
f0131796:	ff 75 08             	pushl  0x8(%ebp)
f0131799:	e8 54 fa ff ff       	call   f01311f2 <strlen>
f013179e:	83 c4 04             	add    $0x4,%esp
f01317a1:	89 45 f4             	mov    %eax,-0xc(%ebp)
	int len2 = strlen(str2);
f01317a4:	ff 75 0c             	pushl  0xc(%ebp)
f01317a7:	e8 46 fa ff ff       	call   f01311f2 <strlen>
f01317ac:	83 c4 04             	add    $0x4,%esp
f01317af:	89 45 f0             	mov    %eax,-0x10(%ebp)
	int s = 0 ;
f01317b2:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
	for (s=0 ; s < len1 ; s++)
f01317b9:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
f01317c0:	eb 17                	jmp    f01317d9 <strcconcat+0x49>
		final[s] = str1[s] ;
f01317c2:	8b 55 fc             	mov    -0x4(%ebp),%edx
f01317c5:	8b 45 10             	mov    0x10(%ebp),%eax
f01317c8:	01 c2                	add    %eax,%edx
f01317ca:	8b 4d fc             	mov    -0x4(%ebp),%ecx
f01317cd:	8b 45 08             	mov    0x8(%ebp),%eax
f01317d0:	01 c8                	add    %ecx,%eax
f01317d2:	8a 00                	mov    (%eax),%al
f01317d4:	88 02                	mov    %al,(%edx)
strcconcat(const char *str1, const char *str2, char *final)
{
	int len1 = strlen(str1);
	int len2 = strlen(str2);
	int s = 0 ;
	for (s=0 ; s < len1 ; s++)
f01317d6:	ff 45 fc             	incl   -0x4(%ebp)
f01317d9:	8b 45 fc             	mov    -0x4(%ebp),%eax
f01317dc:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01317df:	7c e1                	jl     f01317c2 <strcconcat+0x32>
		final[s] = str1[s] ;

	int i = 0 ;
f01317e1:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
	for (i=0 ; i < len2 ; i++)
f01317e8:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
f01317ef:	eb 1f                	jmp    f0131810 <strcconcat+0x80>
		final[s++] = str2[i] ;
f01317f1:	8b 45 fc             	mov    -0x4(%ebp),%eax
f01317f4:	8d 50 01             	lea    0x1(%eax),%edx
f01317f7:	89 55 fc             	mov    %edx,-0x4(%ebp)
f01317fa:	89 c2                	mov    %eax,%edx
f01317fc:	8b 45 10             	mov    0x10(%ebp),%eax
f01317ff:	01 c2                	add    %eax,%edx
f0131801:	8b 4d f8             	mov    -0x8(%ebp),%ecx
f0131804:	8b 45 0c             	mov    0xc(%ebp),%eax
f0131807:	01 c8                	add    %ecx,%eax
f0131809:	8a 00                	mov    (%eax),%al
f013180b:	88 02                	mov    %al,(%edx)
	int s = 0 ;
	for (s=0 ; s < len1 ; s++)
		final[s] = str1[s] ;

	int i = 0 ;
	for (i=0 ; i < len2 ; i++)
f013180d:	ff 45 f8             	incl   -0x8(%ebp)
f0131810:	8b 45 f8             	mov    -0x8(%ebp),%eax
f0131813:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0131816:	7c d9                	jl     f01317f1 <strcconcat+0x61>
		final[s++] = str2[i] ;

	final[s] = 0;
f0131818:	8b 55 fc             	mov    -0x4(%ebp),%edx
f013181b:	8b 45 10             	mov    0x10(%ebp),%eax
f013181e:	01 d0                	add    %edx,%eax
f0131820:	c6 00 00             	movb   $0x0,(%eax)
}
f0131823:	90                   	nop
f0131824:	c9                   	leave  
f0131825:	c3                   	ret    

f0131826 <strsplit>:
int strsplit(char *string, char *SPLIT_CHARS, char **argv, int * argc)
{
f0131826:	55                   	push   %ebp
f0131827:	89 e5                	mov    %esp,%ebp
	// Parse the command string into splitchars-separated arguments
	*argc = 0;
f0131829:	8b 45 14             	mov    0x14(%ebp),%eax
f013182c:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	(argv)[*argc] = 0;
f0131832:	8b 45 14             	mov    0x14(%ebp),%eax
f0131835:	8b 00                	mov    (%eax),%eax
f0131837:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f013183e:	8b 45 10             	mov    0x10(%ebp),%eax
f0131841:	01 d0                	add    %edx,%eax
f0131843:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	while (1)
	{
		// trim splitchars
		while (*string && strchr(SPLIT_CHARS, *string))
f0131849:	eb 0c                	jmp    f0131857 <strsplit+0x31>
			*string++ = 0;
f013184b:	8b 45 08             	mov    0x8(%ebp),%eax
f013184e:	8d 50 01             	lea    0x1(%eax),%edx
f0131851:	89 55 08             	mov    %edx,0x8(%ebp)
f0131854:	c6 00 00             	movb   $0x0,(%eax)
	*argc = 0;
	(argv)[*argc] = 0;
	while (1)
	{
		// trim splitchars
		while (*string && strchr(SPLIT_CHARS, *string))
f0131857:	8b 45 08             	mov    0x8(%ebp),%eax
f013185a:	8a 00                	mov    (%eax),%al
f013185c:	84 c0                	test   %al,%al
f013185e:	74 18                	je     f0131878 <strsplit+0x52>
f0131860:	8b 45 08             	mov    0x8(%ebp),%eax
f0131863:	8a 00                	mov    (%eax),%al
f0131865:	0f be c0             	movsbl %al,%eax
f0131868:	50                   	push   %eax
f0131869:	ff 75 0c             	pushl  0xc(%ebp)
f013186c:	e8 13 fb ff ff       	call   f0131384 <strchr>
f0131871:	83 c4 08             	add    $0x8,%esp
f0131874:	85 c0                	test   %eax,%eax
f0131876:	75 d3                	jne    f013184b <strsplit+0x25>
			*string++ = 0;

		//if the command string is finished, then break the loop
		if (*string == 0)
f0131878:	8b 45 08             	mov    0x8(%ebp),%eax
f013187b:	8a 00                	mov    (%eax),%al
f013187d:	84 c0                	test   %al,%al
f013187f:	74 5a                	je     f01318db <strsplit+0xb5>
			break;

		//check current number of arguments
		if (*argc == MAX_ARGUMENTS-1)
f0131881:	8b 45 14             	mov    0x14(%ebp),%eax
f0131884:	8b 00                	mov    (%eax),%eax
f0131886:	83 f8 0f             	cmp    $0xf,%eax
f0131889:	75 07                	jne    f0131892 <strsplit+0x6c>
		{
			return 0;
f013188b:	b8 00 00 00 00       	mov    $0x0,%eax
f0131890:	eb 66                	jmp    f01318f8 <strsplit+0xd2>
		}

		// save the previous argument and scan past next arg
		(argv)[(*argc)++] = string;
f0131892:	8b 45 14             	mov    0x14(%ebp),%eax
f0131895:	8b 00                	mov    (%eax),%eax
f0131897:	8d 48 01             	lea    0x1(%eax),%ecx
f013189a:	8b 55 14             	mov    0x14(%ebp),%edx
f013189d:	89 0a                	mov    %ecx,(%edx)
f013189f:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f01318a6:	8b 45 10             	mov    0x10(%ebp),%eax
f01318a9:	01 c2                	add    %eax,%edx
f01318ab:	8b 45 08             	mov    0x8(%ebp),%eax
f01318ae:	89 02                	mov    %eax,(%edx)
		while (*string && !strchr(SPLIT_CHARS, *string))
f01318b0:	eb 03                	jmp    f01318b5 <strsplit+0x8f>
			string++;
f01318b2:	ff 45 08             	incl   0x8(%ebp)
			return 0;
		}

		// save the previous argument and scan past next arg
		(argv)[(*argc)++] = string;
		while (*string && !strchr(SPLIT_CHARS, *string))
f01318b5:	8b 45 08             	mov    0x8(%ebp),%eax
f01318b8:	8a 00                	mov    (%eax),%al
f01318ba:	84 c0                	test   %al,%al
f01318bc:	74 8b                	je     f0131849 <strsplit+0x23>
f01318be:	8b 45 08             	mov    0x8(%ebp),%eax
f01318c1:	8a 00                	mov    (%eax),%al
f01318c3:	0f be c0             	movsbl %al,%eax
f01318c6:	50                   	push   %eax
f01318c7:	ff 75 0c             	pushl  0xc(%ebp)
f01318ca:	e8 b5 fa ff ff       	call   f0131384 <strchr>
f01318cf:	83 c4 08             	add    $0x8,%esp
f01318d2:	85 c0                	test   %eax,%eax
f01318d4:	74 dc                	je     f01318b2 <strsplit+0x8c>
			string++;
	}
f01318d6:	e9 6e ff ff ff       	jmp    f0131849 <strsplit+0x23>
		while (*string && strchr(SPLIT_CHARS, *string))
			*string++ = 0;

		//if the command string is finished, then break the loop
		if (*string == 0)
			break;
f01318db:	90                   	nop
		// save the previous argument and scan past next arg
		(argv)[(*argc)++] = string;
		while (*string && !strchr(SPLIT_CHARS, *string))
			string++;
	}
	(argv)[*argc] = 0;
f01318dc:	8b 45 14             	mov    0x14(%ebp),%eax
f01318df:	8b 00                	mov    (%eax),%eax
f01318e1:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f01318e8:	8b 45 10             	mov    0x10(%ebp),%eax
f01318eb:	01 d0                	add    %edx,%eax
f01318ed:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	return 1 ;
f01318f3:	b8 01 00 00 00       	mov    $0x1,%eax
}
f01318f8:	c9                   	leave  
f01318f9:	c3                   	ret    

f01318fa <ide_wait_ready>:
#define IDE_ERR		0x01

static int diskno = 0;

static int ide_wait_ready(bool check_error)
{
f01318fa:	55                   	push   %ebp
f01318fb:	89 e5                	mov    %esp,%ebp
f01318fd:	83 ec 10             	sub    $0x10,%esp
	int r;

	while (((r = inb(0x1F7)) & (IDE_BSY|IDE_DRDY)) != IDE_DRDY)
f0131900:	90                   	nop
f0131901:	c7 45 f8 f7 01 00 00 	movl   $0x1f7,-0x8(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f0131908:	8b 45 f8             	mov    -0x8(%ebp),%eax
f013190b:	89 c2                	mov    %eax,%edx
f013190d:	ec                   	in     (%dx),%al
f013190e:	88 45 f7             	mov    %al,-0x9(%ebp)
	return data;
f0131911:	8a 45 f7             	mov    -0x9(%ebp),%al
f0131914:	0f b6 c0             	movzbl %al,%eax
f0131917:	89 45 fc             	mov    %eax,-0x4(%ebp)
f013191a:	8b 45 fc             	mov    -0x4(%ebp),%eax
f013191d:	25 c0 00 00 00       	and    $0xc0,%eax
f0131922:	83 f8 40             	cmp    $0x40,%eax
f0131925:	75 da                	jne    f0131901 <ide_wait_ready+0x7>
		/* do nothing */;


	if (check_error && (r & (IDE_DF|IDE_ERR)) != 0)
f0131927:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f013192b:	74 11                	je     f013193e <ide_wait_ready+0x44>
f013192d:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0131930:	83 e0 21             	and    $0x21,%eax
f0131933:	85 c0                	test   %eax,%eax
f0131935:	74 07                	je     f013193e <ide_wait_ready+0x44>
	{
 		LOG_STATMENT(cprintf("ERROR @ ide_wait_ready() = %x(%d)\n",r,r););
		return -1;
f0131937:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
f013193c:	eb 05                	jmp    f0131943 <ide_wait_ready+0x49>
	}
	return 0;
f013193e:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0131943:	c9                   	leave  
f0131944:	c3                   	ret    

f0131945 <ide_read>:

int	ide_read(uint32 secno, void *dst, uint32 nsecs)
{
f0131945:	55                   	push   %ebp
f0131946:	89 e5                	mov    %esp,%ebp
f0131948:	57                   	push   %edi
f0131949:	53                   	push   %ebx
f013194a:	83 ec 30             	sub    $0x30,%esp
	int r;

	assert(nsecs <= 256);
f013194d:	81 7d 10 00 01 00 00 	cmpl   $0x100,0x10(%ebp)
f0131954:	76 16                	jbe    f013196c <ide_read+0x27>
f0131956:	68 63 d5 13 f0       	push   $0xf013d563
f013195b:	68 70 d5 13 f0       	push   $0xf013d570
f0131960:	6a 25                	push   $0x25
f0131962:	68 85 d5 13 f0       	push   $0xf013d585
f0131967:	e8 99 e8 fc ff       	call   f0100205 <_panic>

	ide_wait_ready(0);
f013196c:	83 ec 0c             	sub    $0xc,%esp
f013196f:	6a 00                	push   $0x0
f0131971:	e8 84 ff ff ff       	call   f01318fa <ide_wait_ready>
f0131976:	83 c4 10             	add    $0x10,%esp

	outb(0x1F2, nsecs);
f0131979:	8b 45 10             	mov    0x10(%ebp),%eax
f013197c:	0f b6 c0             	movzbl %al,%eax
f013197f:	c7 45 f0 f2 01 00 00 	movl   $0x1f2,-0x10(%ebp)
f0131986:	88 45 d2             	mov    %al,-0x2e(%ebp)
}

static __inline void
outb(int port, uint8 data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
f0131989:	8a 45 d2             	mov    -0x2e(%ebp),%al
f013198c:	8b 55 f0             	mov    -0x10(%ebp),%edx
f013198f:	ee                   	out    %al,(%dx)
	outb(0x1F3, secno & 0xFF);
f0131990:	8b 45 08             	mov    0x8(%ebp),%eax
f0131993:	0f b6 c0             	movzbl %al,%eax
f0131996:	c7 45 ec f3 01 00 00 	movl   $0x1f3,-0x14(%ebp)
f013199d:	88 45 d3             	mov    %al,-0x2d(%ebp)
f01319a0:	8a 45 d3             	mov    -0x2d(%ebp),%al
f01319a3:	8b 55 ec             	mov    -0x14(%ebp),%edx
f01319a6:	ee                   	out    %al,(%dx)
	outb(0x1F4, (secno >> 8) & 0xFF);
f01319a7:	8b 45 08             	mov    0x8(%ebp),%eax
f01319aa:	c1 e8 08             	shr    $0x8,%eax
f01319ad:	0f b6 c0             	movzbl %al,%eax
f01319b0:	c7 45 e8 f4 01 00 00 	movl   $0x1f4,-0x18(%ebp)
f01319b7:	88 45 d4             	mov    %al,-0x2c(%ebp)
f01319ba:	8a 45 d4             	mov    -0x2c(%ebp),%al
f01319bd:	8b 55 e8             	mov    -0x18(%ebp),%edx
f01319c0:	ee                   	out    %al,(%dx)
	outb(0x1F5, (secno >> 16) & 0xFF);
f01319c1:	8b 45 08             	mov    0x8(%ebp),%eax
f01319c4:	c1 e8 10             	shr    $0x10,%eax
f01319c7:	0f b6 c0             	movzbl %al,%eax
f01319ca:	c7 45 e4 f5 01 00 00 	movl   $0x1f5,-0x1c(%ebp)
f01319d1:	88 45 d5             	mov    %al,-0x2b(%ebp)
f01319d4:	8a 45 d5             	mov    -0x2b(%ebp),%al
f01319d7:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f01319da:	ee                   	out    %al,(%dx)
	outb(0x1F6, 0xE0 | ((diskno&1)<<4) | ((secno>>24)&0x0F));
f01319db:	a1 6c 25 78 f0       	mov    0xf078256c,%eax
f01319e0:	83 e0 01             	and    $0x1,%eax
f01319e3:	c1 e0 04             	shl    $0x4,%eax
f01319e6:	88 c2                	mov    %al,%dl
f01319e8:	8b 45 08             	mov    0x8(%ebp),%eax
f01319eb:	c1 e8 18             	shr    $0x18,%eax
f01319ee:	83 e0 0f             	and    $0xf,%eax
f01319f1:	09 d0                	or     %edx,%eax
f01319f3:	83 c8 e0             	or     $0xffffffe0,%eax
f01319f6:	0f b6 c0             	movzbl %al,%eax
f01319f9:	c7 45 e0 f6 01 00 00 	movl   $0x1f6,-0x20(%ebp)
f0131a00:	88 45 d6             	mov    %al,-0x2a(%ebp)
f0131a03:	8a 45 d6             	mov    -0x2a(%ebp),%al
f0131a06:	8b 55 e0             	mov    -0x20(%ebp),%edx
f0131a09:	ee                   	out    %al,(%dx)
f0131a0a:	c7 45 d8 f7 01 00 00 	movl   $0x1f7,-0x28(%ebp)
f0131a11:	c6 45 d7 20          	movb   $0x20,-0x29(%ebp)
f0131a15:	8a 45 d7             	mov    -0x29(%ebp),%al
f0131a18:	8b 55 d8             	mov    -0x28(%ebp),%edx
f0131a1b:	ee                   	out    %al,(%dx)
	outb(0x1F7, 0x20);	// CMD 0x20 means read sector

	for (; nsecs > 0; nsecs--, dst += SECTSIZE) {
f0131a1c:	eb 55                	jmp    f0131a73 <ide_read+0x12e>
		if ((r = ide_wait_ready(1)) < 0)
f0131a1e:	83 ec 0c             	sub    $0xc,%esp
f0131a21:	6a 01                	push   $0x1
f0131a23:	e8 d2 fe ff ff       	call   f01318fa <ide_wait_ready>
f0131a28:	83 c4 10             	add    $0x10,%esp
f0131a2b:	89 45 dc             	mov    %eax,-0x24(%ebp)
f0131a2e:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f0131a32:	79 05                	jns    f0131a39 <ide_read+0xf4>
			return r;
f0131a34:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0131a37:	eb 45                	jmp    f0131a7e <ide_read+0x139>
f0131a39:	c7 45 f4 f0 01 00 00 	movl   $0x1f0,-0xc(%ebp)
f0131a40:	8b 45 0c             	mov    0xc(%ebp),%eax
f0131a43:	89 45 cc             	mov    %eax,-0x34(%ebp)
f0131a46:	c7 45 c8 80 00 00 00 	movl   $0x80,-0x38(%ebp)
}

static __inline void
insl(int port, void *addr, int cnt)
{
	__asm __volatile("cld\n\trepne\n\tinsl"			:
f0131a4d:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0131a50:	8b 4d cc             	mov    -0x34(%ebp),%ecx
f0131a53:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0131a56:	89 cb                	mov    %ecx,%ebx
f0131a58:	89 df                	mov    %ebx,%edi
f0131a5a:	89 c1                	mov    %eax,%ecx
f0131a5c:	fc                   	cld    
f0131a5d:	f2 6d                	repnz insl (%dx),%es:(%edi)
f0131a5f:	89 c8                	mov    %ecx,%eax
f0131a61:	89 fb                	mov    %edi,%ebx
f0131a63:	89 5d cc             	mov    %ebx,-0x34(%ebp)
f0131a66:	89 45 c8             	mov    %eax,-0x38(%ebp)
	outb(0x1F4, (secno >> 8) & 0xFF);
	outb(0x1F5, (secno >> 16) & 0xFF);
	outb(0x1F6, 0xE0 | ((diskno&1)<<4) | ((secno>>24)&0x0F));
	outb(0x1F7, 0x20);	// CMD 0x20 means read sector

	for (; nsecs > 0; nsecs--, dst += SECTSIZE) {
f0131a69:	ff 4d 10             	decl   0x10(%ebp)
f0131a6c:	81 45 0c 00 02 00 00 	addl   $0x200,0xc(%ebp)
f0131a73:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
f0131a77:	75 a5                	jne    f0131a1e <ide_read+0xd9>
		if ((r = ide_wait_ready(1)) < 0)
			return r;
		insl(0x1F0, dst, SECTSIZE/4);
	}

	return 0;
f0131a79:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0131a7e:	8d 65 f8             	lea    -0x8(%ebp),%esp
f0131a81:	5b                   	pop    %ebx
f0131a82:	5f                   	pop    %edi
f0131a83:	5d                   	pop    %ebp
f0131a84:	c3                   	ret    

f0131a85 <ide_write>:

int ide_write(uint32 secno, const void *src, uint32 nsecs)
{
f0131a85:	55                   	push   %ebp
f0131a86:	89 e5                	mov    %esp,%ebp
f0131a88:	56                   	push   %esi
f0131a89:	53                   	push   %ebx
f0131a8a:	83 ec 30             	sub    $0x30,%esp
	int r;

	//LOG_STATMENT(cprintf("1 ==> nsecs = %d\n",nsecs);)
	assert(nsecs <= 256);
f0131a8d:	81 7d 10 00 01 00 00 	cmpl   $0x100,0x10(%ebp)
f0131a94:	76 16                	jbe    f0131aac <ide_write+0x27>
f0131a96:	68 63 d5 13 f0       	push   $0xf013d563
f0131a9b:	68 70 d5 13 f0       	push   $0xf013d570
f0131aa0:	6a 3e                	push   $0x3e
f0131aa2:	68 85 d5 13 f0       	push   $0xf013d585
f0131aa7:	e8 59 e7 fc ff       	call   f0100205 <_panic>

	//LOG_STATMENT(cprintf("2\n");)
	ide_wait_ready(0);
f0131aac:	83 ec 0c             	sub    $0xc,%esp
f0131aaf:	6a 00                	push   $0x0
f0131ab1:	e8 44 fe ff ff       	call   f01318fa <ide_wait_ready>
f0131ab6:	83 c4 10             	add    $0x10,%esp

	//LOG_STATMENT(cprintf("3 ==> nsecs = %d\n",nsecs);)
	outb(0x1F2, nsecs);
f0131ab9:	8b 45 10             	mov    0x10(%ebp),%eax
f0131abc:	0f b6 c0             	movzbl %al,%eax
f0131abf:	c7 45 f0 f2 01 00 00 	movl   $0x1f2,-0x10(%ebp)
f0131ac6:	88 45 d2             	mov    %al,-0x2e(%ebp)
}

static __inline void
outb(int port, uint8 data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
f0131ac9:	8a 45 d2             	mov    -0x2e(%ebp),%al
f0131acc:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0131acf:	ee                   	out    %al,(%dx)
	outb(0x1F3, secno & 0xFF);
f0131ad0:	8b 45 08             	mov    0x8(%ebp),%eax
f0131ad3:	0f b6 c0             	movzbl %al,%eax
f0131ad6:	c7 45 ec f3 01 00 00 	movl   $0x1f3,-0x14(%ebp)
f0131add:	88 45 d3             	mov    %al,-0x2d(%ebp)
f0131ae0:	8a 45 d3             	mov    -0x2d(%ebp),%al
f0131ae3:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0131ae6:	ee                   	out    %al,(%dx)
	outb(0x1F4, (secno >> 8) & 0xFF);
f0131ae7:	8b 45 08             	mov    0x8(%ebp),%eax
f0131aea:	c1 e8 08             	shr    $0x8,%eax
f0131aed:	0f b6 c0             	movzbl %al,%eax
f0131af0:	c7 45 e8 f4 01 00 00 	movl   $0x1f4,-0x18(%ebp)
f0131af7:	88 45 d4             	mov    %al,-0x2c(%ebp)
f0131afa:	8a 45 d4             	mov    -0x2c(%ebp),%al
f0131afd:	8b 55 e8             	mov    -0x18(%ebp),%edx
f0131b00:	ee                   	out    %al,(%dx)
	outb(0x1F5, (secno >> 16) & 0xFF);
f0131b01:	8b 45 08             	mov    0x8(%ebp),%eax
f0131b04:	c1 e8 10             	shr    $0x10,%eax
f0131b07:	0f b6 c0             	movzbl %al,%eax
f0131b0a:	c7 45 e4 f5 01 00 00 	movl   $0x1f5,-0x1c(%ebp)
f0131b11:	88 45 d5             	mov    %al,-0x2b(%ebp)
f0131b14:	8a 45 d5             	mov    -0x2b(%ebp),%al
f0131b17:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f0131b1a:	ee                   	out    %al,(%dx)
	outb(0x1F6, 0xE0 | ((diskno&1)<<4) | ((secno>>24)&0x0F));
f0131b1b:	a1 6c 25 78 f0       	mov    0xf078256c,%eax
f0131b20:	83 e0 01             	and    $0x1,%eax
f0131b23:	c1 e0 04             	shl    $0x4,%eax
f0131b26:	88 c2                	mov    %al,%dl
f0131b28:	8b 45 08             	mov    0x8(%ebp),%eax
f0131b2b:	c1 e8 18             	shr    $0x18,%eax
f0131b2e:	83 e0 0f             	and    $0xf,%eax
f0131b31:	09 d0                	or     %edx,%eax
f0131b33:	83 c8 e0             	or     $0xffffffe0,%eax
f0131b36:	0f b6 c0             	movzbl %al,%eax
f0131b39:	c7 45 e0 f6 01 00 00 	movl   $0x1f6,-0x20(%ebp)
f0131b40:	88 45 d6             	mov    %al,-0x2a(%ebp)
f0131b43:	8a 45 d6             	mov    -0x2a(%ebp),%al
f0131b46:	8b 55 e0             	mov    -0x20(%ebp),%edx
f0131b49:	ee                   	out    %al,(%dx)
f0131b4a:	c7 45 d8 f7 01 00 00 	movl   $0x1f7,-0x28(%ebp)
f0131b51:	c6 45 d7 30          	movb   $0x30,-0x29(%ebp)
f0131b55:	8a 45 d7             	mov    -0x29(%ebp),%al
f0131b58:	8b 55 d8             	mov    -0x28(%ebp),%edx
f0131b5b:	ee                   	out    %al,(%dx)
	outb(0x1F7, 0x30);	// CMD 0x30 means write sector


	for (; nsecs > 0; nsecs--, src += SECTSIZE) {
f0131b5c:	eb 55                	jmp    f0131bb3 <ide_write+0x12e>
		if ((r = ide_wait_ready(1)) < 0)
f0131b5e:	83 ec 0c             	sub    $0xc,%esp
f0131b61:	6a 01                	push   $0x1
f0131b63:	e8 92 fd ff ff       	call   f01318fa <ide_wait_ready>
f0131b68:	83 c4 10             	add    $0x10,%esp
f0131b6b:	89 45 dc             	mov    %eax,-0x24(%ebp)
f0131b6e:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f0131b72:	79 05                	jns    f0131b79 <ide_write+0xf4>
		{
			LOG_STATMENT(cprintf("FAILURE to write %d sectors to disk\n",nsecs););
			return r;
f0131b74:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0131b77:	eb 45                	jmp    f0131bbe <ide_write+0x139>
f0131b79:	c7 45 f4 f0 01 00 00 	movl   $0x1f0,-0xc(%ebp)
f0131b80:	8b 45 0c             	mov    0xc(%ebp),%eax
f0131b83:	89 45 cc             	mov    %eax,-0x34(%ebp)
f0131b86:	c7 45 c8 80 00 00 00 	movl   $0x80,-0x38(%ebp)
}

static __inline void
outsl(int port, const void *addr, int cnt)
{
	__asm __volatile("cld\n\trepne\n\toutsl"		:
f0131b8d:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0131b90:	8b 4d cc             	mov    -0x34(%ebp),%ecx
f0131b93:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0131b96:	89 cb                	mov    %ecx,%ebx
f0131b98:	89 de                	mov    %ebx,%esi
f0131b9a:	89 c1                	mov    %eax,%ecx
f0131b9c:	fc                   	cld    
f0131b9d:	f2 6f                	repnz outsl %ds:(%esi),(%dx)
f0131b9f:	89 c8                	mov    %ecx,%eax
f0131ba1:	89 f3                	mov    %esi,%ebx
f0131ba3:	89 5d cc             	mov    %ebx,-0x34(%ebp)
f0131ba6:	89 45 c8             	mov    %eax,-0x38(%ebp)
	outb(0x1F5, (secno >> 16) & 0xFF);
	outb(0x1F6, 0xE0 | ((diskno&1)<<4) | ((secno>>24)&0x0F));
	outb(0x1F7, 0x30);	// CMD 0x30 means write sector


	for (; nsecs > 0; nsecs--, src += SECTSIZE) {
f0131ba9:	ff 4d 10             	decl   0x10(%ebp)
f0131bac:	81 45 0c 00 02 00 00 	addl   $0x200,0xc(%ebp)
f0131bb3:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
f0131bb7:	75 a5                	jne    f0131b5e <ide_write+0xd9>
		}
	}
	//LOG_STATMENT(cprintf("5\n");)
	//cprintf("returning from ide_write \n");

	return 0;
f0131bb9:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0131bbe:	8d 65 f8             	lea    -0x8(%ebp),%esp
f0131bc1:	5b                   	pop    %ebx
f0131bc2:	5e                   	pop    %esi
f0131bc3:	5d                   	pop    %ebp
f0131bc4:	c3                   	ret    

f0131bc5 <print_mem_block_lists>:
//===========================
// PRINT MEM BLOCK LISTS:
//===========================

void print_mem_block_lists()
{
f0131bc5:	55                   	push   %ebp
f0131bc6:	89 e5                	mov    %esp,%ebp
f0131bc8:	83 ec 18             	sub    $0x18,%esp
	cprintf("\n=========================================\n");
f0131bcb:	83 ec 0c             	sub    $0xc,%esp
f0131bce:	68 90 d5 13 f0       	push   $0xf013d590
f0131bd3:	e8 36 f1 fc ff       	call   f0100d0e <cprintf>
f0131bd8:	83 c4 10             	add    $0x10,%esp
	struct MemBlock* blk ;
	struct MemBlock* lastBlk = NULL ;
f0131bdb:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	cprintf("\nFreeMemBlocksList:\n");
f0131be2:	83 ec 0c             	sub    $0xc,%esp
f0131be5:	68 bc d5 13 f0       	push   $0xf013d5bc
f0131bea:	e8 1f f1 fc ff       	call   f0100d0e <cprintf>
f0131bef:	83 c4 10             	add    $0x10,%esp
	uint8 sorted = 1 ;
f0131bf2:	c6 45 ef 01          	movb   $0x1,-0x11(%ebp)
	LIST_FOREACH(blk, &FreeMemBlocksList)
f0131bf6:	a1 24 26 78 f0       	mov    0xf0782624,%eax
f0131bfb:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0131bfe:	eb 56                	jmp    f0131c56 <print_mem_block_lists+0x91>
	{
		if (lastBlk && blk->sva < lastBlk->sva + lastBlk->size)
f0131c00:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0131c04:	74 1c                	je     f0131c22 <print_mem_block_lists+0x5d>
f0131c06:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131c09:	8b 50 08             	mov    0x8(%eax),%edx
f0131c0c:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0131c0f:	8b 48 08             	mov    0x8(%eax),%ecx
f0131c12:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0131c15:	8b 40 0c             	mov    0xc(%eax),%eax
f0131c18:	01 c8                	add    %ecx,%eax
f0131c1a:	39 c2                	cmp    %eax,%edx
f0131c1c:	73 04                	jae    f0131c22 <print_mem_block_lists+0x5d>
			sorted = 0 ;
f0131c1e:	c6 45 ef 00          	movb   $0x0,-0x11(%ebp)
		cprintf("[%x, %x)-->", blk->sva, blk->sva + blk->size) ;
f0131c22:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131c25:	8b 50 08             	mov    0x8(%eax),%edx
f0131c28:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131c2b:	8b 40 0c             	mov    0xc(%eax),%eax
f0131c2e:	01 c2                	add    %eax,%edx
f0131c30:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131c33:	8b 40 08             	mov    0x8(%eax),%eax
f0131c36:	83 ec 04             	sub    $0x4,%esp
f0131c39:	52                   	push   %edx
f0131c3a:	50                   	push   %eax
f0131c3b:	68 d1 d5 13 f0       	push   $0xf013d5d1
f0131c40:	e8 c9 f0 fc ff       	call   f0100d0e <cprintf>
f0131c45:	83 c4 10             	add    $0x10,%esp
		lastBlk = blk;
f0131c48:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131c4b:	89 45 f0             	mov    %eax,-0x10(%ebp)
	cprintf("\n=========================================\n");
	struct MemBlock* blk ;
	struct MemBlock* lastBlk = NULL ;
	cprintf("\nFreeMemBlocksList:\n");
	uint8 sorted = 1 ;
	LIST_FOREACH(blk, &FreeMemBlocksList)
f0131c4e:	a1 2c 26 78 f0       	mov    0xf078262c,%eax
f0131c53:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0131c56:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0131c5a:	74 07                	je     f0131c63 <print_mem_block_lists+0x9e>
f0131c5c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131c5f:	8b 00                	mov    (%eax),%eax
f0131c61:	eb 05                	jmp    f0131c68 <print_mem_block_lists+0xa3>
f0131c63:	b8 00 00 00 00       	mov    $0x0,%eax
f0131c68:	a3 2c 26 78 f0       	mov    %eax,0xf078262c
f0131c6d:	a1 2c 26 78 f0       	mov    0xf078262c,%eax
f0131c72:	85 c0                	test   %eax,%eax
f0131c74:	75 8a                	jne    f0131c00 <print_mem_block_lists+0x3b>
f0131c76:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0131c7a:	75 84                	jne    f0131c00 <print_mem_block_lists+0x3b>
		if (lastBlk && blk->sva < lastBlk->sva + lastBlk->size)
			sorted = 0 ;
		cprintf("[%x, %x)-->", blk->sva, blk->sva + blk->size) ;
		lastBlk = blk;
	}
	if (!sorted)	cprintf("\nFreeMemBlocksList is NOT SORTED!!\n") ;
f0131c7c:	80 7d ef 00          	cmpb   $0x0,-0x11(%ebp)
f0131c80:	75 10                	jne    f0131c92 <print_mem_block_lists+0xcd>
f0131c82:	83 ec 0c             	sub    $0xc,%esp
f0131c85:	68 e0 d5 13 f0       	push   $0xf013d5e0
f0131c8a:	e8 7f f0 fc ff       	call   f0100d0e <cprintf>
f0131c8f:	83 c4 10             	add    $0x10,%esp

	lastBlk = NULL ;
f0131c92:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	cprintf("\nAllocMemBlocksList:\n");
f0131c99:	83 ec 0c             	sub    $0xc,%esp
f0131c9c:	68 04 d6 13 f0       	push   $0xf013d604
f0131ca1:	e8 68 f0 fc ff       	call   f0100d0e <cprintf>
f0131ca6:	83 c4 10             	add    $0x10,%esp
	sorted = 1 ;
f0131ca9:	c6 45 ef 01          	movb   $0x1,-0x11(%ebp)
	LIST_FOREACH(blk, &AllocMemBlocksList)
f0131cad:	a1 88 25 78 f0       	mov    0xf0782588,%eax
f0131cb2:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0131cb5:	eb 56                	jmp    f0131d0d <print_mem_block_lists+0x148>
	{
		if (lastBlk && blk->sva < lastBlk->sva + lastBlk->size)
f0131cb7:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0131cbb:	74 1c                	je     f0131cd9 <print_mem_block_lists+0x114>
f0131cbd:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131cc0:	8b 50 08             	mov    0x8(%eax),%edx
f0131cc3:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0131cc6:	8b 48 08             	mov    0x8(%eax),%ecx
f0131cc9:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0131ccc:	8b 40 0c             	mov    0xc(%eax),%eax
f0131ccf:	01 c8                	add    %ecx,%eax
f0131cd1:	39 c2                	cmp    %eax,%edx
f0131cd3:	73 04                	jae    f0131cd9 <print_mem_block_lists+0x114>
			sorted = 0 ;
f0131cd5:	c6 45 ef 00          	movb   $0x0,-0x11(%ebp)
		cprintf("[%x, %x)-->", blk->sva, blk->sva + blk->size) ;
f0131cd9:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131cdc:	8b 50 08             	mov    0x8(%eax),%edx
f0131cdf:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131ce2:	8b 40 0c             	mov    0xc(%eax),%eax
f0131ce5:	01 c2                	add    %eax,%edx
f0131ce7:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131cea:	8b 40 08             	mov    0x8(%eax),%eax
f0131ced:	83 ec 04             	sub    $0x4,%esp
f0131cf0:	52                   	push   %edx
f0131cf1:	50                   	push   %eax
f0131cf2:	68 d1 d5 13 f0       	push   $0xf013d5d1
f0131cf7:	e8 12 f0 fc ff       	call   f0100d0e <cprintf>
f0131cfc:	83 c4 10             	add    $0x10,%esp
		lastBlk = blk;
f0131cff:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131d02:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (!sorted)	cprintf("\nFreeMemBlocksList is NOT SORTED!!\n") ;

	lastBlk = NULL ;
	cprintf("\nAllocMemBlocksList:\n");
	sorted = 1 ;
	LIST_FOREACH(blk, &AllocMemBlocksList)
f0131d05:	a1 90 25 78 f0       	mov    0xf0782590,%eax
f0131d0a:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0131d0d:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0131d11:	74 07                	je     f0131d1a <print_mem_block_lists+0x155>
f0131d13:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131d16:	8b 00                	mov    (%eax),%eax
f0131d18:	eb 05                	jmp    f0131d1f <print_mem_block_lists+0x15a>
f0131d1a:	b8 00 00 00 00       	mov    $0x0,%eax
f0131d1f:	a3 90 25 78 f0       	mov    %eax,0xf0782590
f0131d24:	a1 90 25 78 f0       	mov    0xf0782590,%eax
f0131d29:	85 c0                	test   %eax,%eax
f0131d2b:	75 8a                	jne    f0131cb7 <print_mem_block_lists+0xf2>
f0131d2d:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0131d31:	75 84                	jne    f0131cb7 <print_mem_block_lists+0xf2>
		if (lastBlk && blk->sva < lastBlk->sva + lastBlk->size)
			sorted = 0 ;
		cprintf("[%x, %x)-->", blk->sva, blk->sva + blk->size) ;
		lastBlk = blk;
	}
	if (!sorted)	cprintf("\nAllocMemBlocksList is NOT SORTED!!\n") ;
f0131d33:	80 7d ef 00          	cmpb   $0x0,-0x11(%ebp)
f0131d37:	75 10                	jne    f0131d49 <print_mem_block_lists+0x184>
f0131d39:	83 ec 0c             	sub    $0xc,%esp
f0131d3c:	68 1c d6 13 f0       	push   $0xf013d61c
f0131d41:	e8 c8 ef fc ff       	call   f0100d0e <cprintf>
f0131d46:	83 c4 10             	add    $0x10,%esp
	cprintf("\n=========================================\n");
f0131d49:	83 ec 0c             	sub    $0xc,%esp
f0131d4c:	68 90 d5 13 f0       	push   $0xf013d590
f0131d51:	e8 b8 ef fc ff       	call   f0100d0e <cprintf>
f0131d56:	83 c4 10             	add    $0x10,%esp

}
f0131d59:	90                   	nop
f0131d5a:	c9                   	leave  
f0131d5b:	c3                   	ret    

f0131d5c <initialize_MemBlocksList>:

//===============================
// [1] INITIALIZE AVAILABLE LIST:
//===============================
void initialize_MemBlocksList(uint32 numOfBlocks)
{
f0131d5c:	55                   	push   %ebp
f0131d5d:	89 e5                	mov    %esp,%ebp
f0131d5f:	83 ec 18             	sub    $0x18,%esp
	//TODO: [PROJECT MS1] [DYNAMIC ALLOCATOR] initialize_MemBlocksList
	// Write your code here, remove the panic and write your code
	//panic("initialize_MemBlocksList() is not implemented yet...!!");
	LIST_INIT(&AvailableMemBlocksList);
f0131d62:	c7 05 58 26 78 f0 00 	movl   $0x0,0xf0782658
f0131d69:	00 00 00 
f0131d6c:	c7 05 5c 26 78 f0 00 	movl   $0x0,0xf078265c
f0131d73:	00 00 00 
f0131d76:	c7 05 64 26 78 f0 00 	movl   $0x0,0xf0782664
f0131d7d:	00 00 00 

	for(int y=0;y<numOfBlocks;y++)
f0131d80:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0131d87:	e9 9e 00 00 00       	jmp    f0131e2a <initialize_MemBlocksList+0xce>
	{
		LIST_INSERT_HEAD(&AvailableMemBlocksList, &(MemBlockNodes[y]));
f0131d8c:	a1 98 25 78 f0       	mov    0xf0782598,%eax
f0131d91:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0131d94:	c1 e2 04             	shl    $0x4,%edx
f0131d97:	01 d0                	add    %edx,%eax
f0131d99:	85 c0                	test   %eax,%eax
f0131d9b:	75 14                	jne    f0131db1 <initialize_MemBlocksList+0x55>
f0131d9d:	83 ec 04             	sub    $0x4,%esp
f0131da0:	68 44 d6 13 f0       	push   $0xf013d644
f0131da5:	6a 46                	push   $0x46
f0131da7:	68 67 d6 13 f0       	push   $0xf013d667
f0131dac:	e8 54 e4 fc ff       	call   f0100205 <_panic>
f0131db1:	a1 98 25 78 f0       	mov    0xf0782598,%eax
f0131db6:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0131db9:	c1 e2 04             	shl    $0x4,%edx
f0131dbc:	01 d0                	add    %edx,%eax
f0131dbe:	8b 15 58 26 78 f0    	mov    0xf0782658,%edx
f0131dc4:	89 10                	mov    %edx,(%eax)
f0131dc6:	8b 00                	mov    (%eax),%eax
f0131dc8:	85 c0                	test   %eax,%eax
f0131dca:	74 18                	je     f0131de4 <initialize_MemBlocksList+0x88>
f0131dcc:	a1 58 26 78 f0       	mov    0xf0782658,%eax
f0131dd1:	8b 15 98 25 78 f0    	mov    0xf0782598,%edx
f0131dd7:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0131dda:	c1 e1 04             	shl    $0x4,%ecx
f0131ddd:	01 ca                	add    %ecx,%edx
f0131ddf:	89 50 04             	mov    %edx,0x4(%eax)
f0131de2:	eb 12                	jmp    f0131df6 <initialize_MemBlocksList+0x9a>
f0131de4:	a1 98 25 78 f0       	mov    0xf0782598,%eax
f0131de9:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0131dec:	c1 e2 04             	shl    $0x4,%edx
f0131def:	01 d0                	add    %edx,%eax
f0131df1:	a3 5c 26 78 f0       	mov    %eax,0xf078265c
f0131df6:	a1 98 25 78 f0       	mov    0xf0782598,%eax
f0131dfb:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0131dfe:	c1 e2 04             	shl    $0x4,%edx
f0131e01:	01 d0                	add    %edx,%eax
f0131e03:	a3 58 26 78 f0       	mov    %eax,0xf0782658
f0131e08:	a1 98 25 78 f0       	mov    0xf0782598,%eax
f0131e0d:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0131e10:	c1 e2 04             	shl    $0x4,%edx
f0131e13:	01 d0                	add    %edx,%eax
f0131e15:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f0131e1c:	a1 64 26 78 f0       	mov    0xf0782664,%eax
f0131e21:	40                   	inc    %eax
f0131e22:	a3 64 26 78 f0       	mov    %eax,0xf0782664
	//TODO: [PROJECT MS1] [DYNAMIC ALLOCATOR] initialize_MemBlocksList
	// Write your code here, remove the panic and write your code
	//panic("initialize_MemBlocksList() is not implemented yet...!!");
	LIST_INIT(&AvailableMemBlocksList);

	for(int y=0;y<numOfBlocks;y++)
f0131e27:	ff 45 f4             	incl   -0xc(%ebp)
f0131e2a:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131e2d:	3b 45 08             	cmp    0x8(%ebp),%eax
f0131e30:	0f 82 56 ff ff ff    	jb     f0131d8c <initialize_MemBlocksList+0x30>
	{
		LIST_INSERT_HEAD(&AvailableMemBlocksList, &(MemBlockNodes[y]));
	}
}
f0131e36:	90                   	nop
f0131e37:	c9                   	leave  
f0131e38:	c3                   	ret    

f0131e39 <find_block>:

//===============================
// [2] FIND BLOCK:
//===============================
struct MemBlock *find_block(struct MemBlock_List *blockList, uint32 va)
{
f0131e39:	55                   	push   %ebp
f0131e3a:	89 e5                	mov    %esp,%ebp
f0131e3c:	83 ec 10             	sub    $0x10,%esp
	//TODO: [PROJECT MS1] [DYNAMIC ALLOCATOR] find_block
	// Write your code here, remove the panic and write your code
	//panic("find_block() is not implemented yet...!!");
	struct MemBlock *point;

	LIST_FOREACH(point,blockList)
f0131e3f:	8b 45 08             	mov    0x8(%ebp),%eax
f0131e42:	8b 00                	mov    (%eax),%eax
f0131e44:	89 45 fc             	mov    %eax,-0x4(%ebp)
f0131e47:	eb 19                	jmp    f0131e62 <find_block+0x29>
	{
		if(va==point->sva)
f0131e49:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0131e4c:	8b 40 08             	mov    0x8(%eax),%eax
f0131e4f:	3b 45 0c             	cmp    0xc(%ebp),%eax
f0131e52:	75 05                	jne    f0131e59 <find_block+0x20>
		   return point;
f0131e54:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0131e57:	eb 36                	jmp    f0131e8f <find_block+0x56>
	//TODO: [PROJECT MS1] [DYNAMIC ALLOCATOR] find_block
	// Write your code here, remove the panic and write your code
	//panic("find_block() is not implemented yet...!!");
	struct MemBlock *point;

	LIST_FOREACH(point,blockList)
f0131e59:	8b 45 08             	mov    0x8(%ebp),%eax
f0131e5c:	8b 40 08             	mov    0x8(%eax),%eax
f0131e5f:	89 45 fc             	mov    %eax,-0x4(%ebp)
f0131e62:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
f0131e66:	74 07                	je     f0131e6f <find_block+0x36>
f0131e68:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0131e6b:	8b 00                	mov    (%eax),%eax
f0131e6d:	eb 05                	jmp    f0131e74 <find_block+0x3b>
f0131e6f:	b8 00 00 00 00       	mov    $0x0,%eax
f0131e74:	8b 55 08             	mov    0x8(%ebp),%edx
f0131e77:	89 42 08             	mov    %eax,0x8(%edx)
f0131e7a:	8b 45 08             	mov    0x8(%ebp),%eax
f0131e7d:	8b 40 08             	mov    0x8(%eax),%eax
f0131e80:	85 c0                	test   %eax,%eax
f0131e82:	75 c5                	jne    f0131e49 <find_block+0x10>
f0131e84:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
f0131e88:	75 bf                	jne    f0131e49 <find_block+0x10>
	{
		if(va==point->sva)
		   return point;
	}
	return NULL;
f0131e8a:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0131e8f:	c9                   	leave  
f0131e90:	c3                   	ret    

f0131e91 <insert_sorted_allocList>:

//=========================================
// [3] INSERT BLOCK IN ALLOC LIST [SORTED]:
//=========================================
void insert_sorted_allocList(struct MemBlock *blockToInsert)
{
f0131e91:	55                   	push   %ebp
f0131e92:	89 e5                	mov    %esp,%ebp
f0131e94:	83 ec 18             	sub    $0x18,%esp
	//TODO: [PROJECT MS1] [DYNAMIC ALLOCATOR] insert_sorted_allocList
	// Write your code here, remove the panic and write your code
	//panic("insert_sorted_allocList() is not implemented yet...!!");
	struct MemBlock *head = LIST_FIRST(&AllocMemBlocksList) ;
f0131e97:	a1 88 25 78 f0       	mov    0xf0782588,%eax
f0131e9c:	89 45 f0             	mov    %eax,-0x10(%ebp)
	struct MemBlock *tail = LIST_LAST(&AllocMemBlocksList) ;
f0131e9f:	a1 8c 25 78 f0       	mov    0xf078258c,%eax
f0131ea4:	89 45 ec             	mov    %eax,-0x14(%ebp)

	if (head == tail || blockToInsert->sva <= head->sva || blockToInsert->sva >= tail->sva )
f0131ea7:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0131eaa:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f0131ead:	74 24                	je     f0131ed3 <insert_sorted_allocList+0x42>
f0131eaf:	8b 45 08             	mov    0x8(%ebp),%eax
f0131eb2:	8b 50 08             	mov    0x8(%eax),%edx
f0131eb5:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0131eb8:	8b 40 08             	mov    0x8(%eax),%eax
f0131ebb:	39 c2                	cmp    %eax,%edx
f0131ebd:	76 14                	jbe    f0131ed3 <insert_sorted_allocList+0x42>
f0131ebf:	8b 45 08             	mov    0x8(%ebp),%eax
f0131ec2:	8b 50 08             	mov    0x8(%eax),%edx
f0131ec5:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0131ec8:	8b 40 08             	mov    0x8(%eax),%eax
f0131ecb:	39 c2                	cmp    %eax,%edx
f0131ecd:	0f 82 60 01 00 00    	jb     f0132033 <insert_sorted_allocList+0x1a2>
	{
		if(head == NULL )
f0131ed3:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0131ed7:	75 65                	jne    f0131f3e <insert_sorted_allocList+0xad>
		{
			LIST_INSERT_HEAD(&AllocMemBlocksList, blockToInsert);
f0131ed9:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0131edd:	75 14                	jne    f0131ef3 <insert_sorted_allocList+0x62>
f0131edf:	83 ec 04             	sub    $0x4,%esp
f0131ee2:	68 44 d6 13 f0       	push   $0xf013d644
f0131ee7:	6a 6b                	push   $0x6b
f0131ee9:	68 67 d6 13 f0       	push   $0xf013d667
f0131eee:	e8 12 e3 fc ff       	call   f0100205 <_panic>
f0131ef3:	8b 15 88 25 78 f0    	mov    0xf0782588,%edx
f0131ef9:	8b 45 08             	mov    0x8(%ebp),%eax
f0131efc:	89 10                	mov    %edx,(%eax)
f0131efe:	8b 45 08             	mov    0x8(%ebp),%eax
f0131f01:	8b 00                	mov    (%eax),%eax
f0131f03:	85 c0                	test   %eax,%eax
f0131f05:	74 0d                	je     f0131f14 <insert_sorted_allocList+0x83>
f0131f07:	a1 88 25 78 f0       	mov    0xf0782588,%eax
f0131f0c:	8b 55 08             	mov    0x8(%ebp),%edx
f0131f0f:	89 50 04             	mov    %edx,0x4(%eax)
f0131f12:	eb 08                	jmp    f0131f1c <insert_sorted_allocList+0x8b>
f0131f14:	8b 45 08             	mov    0x8(%ebp),%eax
f0131f17:	a3 8c 25 78 f0       	mov    %eax,0xf078258c
f0131f1c:	8b 45 08             	mov    0x8(%ebp),%eax
f0131f1f:	a3 88 25 78 f0       	mov    %eax,0xf0782588
f0131f24:	8b 45 08             	mov    0x8(%ebp),%eax
f0131f27:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f0131f2e:	a1 94 25 78 f0       	mov    0xf0782594,%eax
f0131f33:	40                   	inc    %eax
f0131f34:	a3 94 25 78 f0       	mov    %eax,0xf0782594
	struct MemBlock *head = LIST_FIRST(&AllocMemBlocksList) ;
	struct MemBlock *tail = LIST_LAST(&AllocMemBlocksList) ;

	if (head == tail || blockToInsert->sva <= head->sva || blockToInsert->sva >= tail->sva )
	{
		if(head == NULL )
f0131f39:	e9 dc 01 00 00       	jmp    f013211a <insert_sorted_allocList+0x289>
		{
			LIST_INSERT_HEAD(&AllocMemBlocksList, blockToInsert);
		}
		else if (blockToInsert->sva <= head->sva)
f0131f3e:	8b 45 08             	mov    0x8(%ebp),%eax
f0131f41:	8b 50 08             	mov    0x8(%eax),%edx
f0131f44:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0131f47:	8b 40 08             	mov    0x8(%eax),%eax
f0131f4a:	39 c2                	cmp    %eax,%edx
f0131f4c:	77 6c                	ja     f0131fba <insert_sorted_allocList+0x129>
		{
			LIST_INSERT_BEFORE(&AllocMemBlocksList,head, blockToInsert);
f0131f4e:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0131f52:	74 06                	je     f0131f5a <insert_sorted_allocList+0xc9>
f0131f54:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0131f58:	75 14                	jne    f0131f6e <insert_sorted_allocList+0xdd>
f0131f5a:	83 ec 04             	sub    $0x4,%esp
f0131f5d:	68 80 d6 13 f0       	push   $0xf013d680
f0131f62:	6a 6f                	push   $0x6f
f0131f64:	68 67 d6 13 f0       	push   $0xf013d667
f0131f69:	e8 97 e2 fc ff       	call   f0100205 <_panic>
f0131f6e:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0131f71:	8b 50 04             	mov    0x4(%eax),%edx
f0131f74:	8b 45 08             	mov    0x8(%ebp),%eax
f0131f77:	89 50 04             	mov    %edx,0x4(%eax)
f0131f7a:	8b 45 08             	mov    0x8(%ebp),%eax
f0131f7d:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0131f80:	89 10                	mov    %edx,(%eax)
f0131f82:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0131f85:	8b 40 04             	mov    0x4(%eax),%eax
f0131f88:	85 c0                	test   %eax,%eax
f0131f8a:	74 0d                	je     f0131f99 <insert_sorted_allocList+0x108>
f0131f8c:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0131f8f:	8b 40 04             	mov    0x4(%eax),%eax
f0131f92:	8b 55 08             	mov    0x8(%ebp),%edx
f0131f95:	89 10                	mov    %edx,(%eax)
f0131f97:	eb 08                	jmp    f0131fa1 <insert_sorted_allocList+0x110>
f0131f99:	8b 45 08             	mov    0x8(%ebp),%eax
f0131f9c:	a3 88 25 78 f0       	mov    %eax,0xf0782588
f0131fa1:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0131fa4:	8b 55 08             	mov    0x8(%ebp),%edx
f0131fa7:	89 50 04             	mov    %edx,0x4(%eax)
f0131faa:	a1 94 25 78 f0       	mov    0xf0782594,%eax
f0131faf:	40                   	inc    %eax
f0131fb0:	a3 94 25 78 f0       	mov    %eax,0xf0782594
	struct MemBlock *head = LIST_FIRST(&AllocMemBlocksList) ;
	struct MemBlock *tail = LIST_LAST(&AllocMemBlocksList) ;

	if (head == tail || blockToInsert->sva <= head->sva || blockToInsert->sva >= tail->sva )
	{
		if(head == NULL )
f0131fb5:	e9 60 01 00 00       	jmp    f013211a <insert_sorted_allocList+0x289>
		}
		else if (blockToInsert->sva <= head->sva)
		{
			LIST_INSERT_BEFORE(&AllocMemBlocksList,head, blockToInsert);
		}
		else if (blockToInsert->sva >= tail->sva )
f0131fba:	8b 45 08             	mov    0x8(%ebp),%eax
f0131fbd:	8b 50 08             	mov    0x8(%eax),%edx
f0131fc0:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0131fc3:	8b 40 08             	mov    0x8(%eax),%eax
f0131fc6:	39 c2                	cmp    %eax,%edx
f0131fc8:	0f 82 4c 01 00 00    	jb     f013211a <insert_sorted_allocList+0x289>
		{
			LIST_INSERT_TAIL(&AllocMemBlocksList, blockToInsert);
f0131fce:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0131fd2:	75 14                	jne    f0131fe8 <insert_sorted_allocList+0x157>
f0131fd4:	83 ec 04             	sub    $0x4,%esp
f0131fd7:	68 b8 d6 13 f0       	push   $0xf013d6b8
f0131fdc:	6a 73                	push   $0x73
f0131fde:	68 67 d6 13 f0       	push   $0xf013d667
f0131fe3:	e8 1d e2 fc ff       	call   f0100205 <_panic>
f0131fe8:	8b 15 8c 25 78 f0    	mov    0xf078258c,%edx
f0131fee:	8b 45 08             	mov    0x8(%ebp),%eax
f0131ff1:	89 50 04             	mov    %edx,0x4(%eax)
f0131ff4:	8b 45 08             	mov    0x8(%ebp),%eax
f0131ff7:	8b 40 04             	mov    0x4(%eax),%eax
f0131ffa:	85 c0                	test   %eax,%eax
f0131ffc:	74 0c                	je     f013200a <insert_sorted_allocList+0x179>
f0131ffe:	a1 8c 25 78 f0       	mov    0xf078258c,%eax
f0132003:	8b 55 08             	mov    0x8(%ebp),%edx
f0132006:	89 10                	mov    %edx,(%eax)
f0132008:	eb 08                	jmp    f0132012 <insert_sorted_allocList+0x181>
f013200a:	8b 45 08             	mov    0x8(%ebp),%eax
f013200d:	a3 88 25 78 f0       	mov    %eax,0xf0782588
f0132012:	8b 45 08             	mov    0x8(%ebp),%eax
f0132015:	a3 8c 25 78 f0       	mov    %eax,0xf078258c
f013201a:	8b 45 08             	mov    0x8(%ebp),%eax
f013201d:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f0132023:	a1 94 25 78 f0       	mov    0xf0782594,%eax
f0132028:	40                   	inc    %eax
f0132029:	a3 94 25 78 f0       	mov    %eax,0xf0782594
	struct MemBlock *head = LIST_FIRST(&AllocMemBlocksList) ;
	struct MemBlock *tail = LIST_LAST(&AllocMemBlocksList) ;

	if (head == tail || blockToInsert->sva <= head->sva || blockToInsert->sva >= tail->sva )
	{
		if(head == NULL )
f013202e:	e9 e7 00 00 00       	jmp    f013211a <insert_sorted_allocList+0x289>
			LIST_INSERT_TAIL(&AllocMemBlocksList, blockToInsert);
		}
	}
	else
	{
		struct MemBlock *current_block = head;
f0132033:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0132036:	89 45 f4             	mov    %eax,-0xc(%ebp)
		struct MemBlock *next_block = NULL;
f0132039:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
		LIST_FOREACH (current_block, &AllocMemBlocksList)
f0132040:	a1 88 25 78 f0       	mov    0xf0782588,%eax
f0132045:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0132048:	e9 9d 00 00 00       	jmp    f01320ea <insert_sorted_allocList+0x259>
		{
			next_block = LIST_NEXT(current_block);
f013204d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132050:	8b 00                	mov    (%eax),%eax
f0132052:	89 45 e8             	mov    %eax,-0x18(%ebp)
			if (blockToInsert->sva > current_block->sva && blockToInsert->sva < next_block->sva)
f0132055:	8b 45 08             	mov    0x8(%ebp),%eax
f0132058:	8b 50 08             	mov    0x8(%eax),%edx
f013205b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f013205e:	8b 40 08             	mov    0x8(%eax),%eax
f0132061:	39 c2                	cmp    %eax,%edx
f0132063:	76 7d                	jbe    f01320e2 <insert_sorted_allocList+0x251>
f0132065:	8b 45 08             	mov    0x8(%ebp),%eax
f0132068:	8b 50 08             	mov    0x8(%eax),%edx
f013206b:	8b 45 e8             	mov    -0x18(%ebp),%eax
f013206e:	8b 40 08             	mov    0x8(%eax),%eax
f0132071:	39 c2                	cmp    %eax,%edx
f0132073:	73 6d                	jae    f01320e2 <insert_sorted_allocList+0x251>
			{
				LIST_INSERT_AFTER(&AllocMemBlocksList,current_block,blockToInsert);
f0132075:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0132079:	74 06                	je     f0132081 <insert_sorted_allocList+0x1f0>
f013207b:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f013207f:	75 14                	jne    f0132095 <insert_sorted_allocList+0x204>
f0132081:	83 ec 04             	sub    $0x4,%esp
f0132084:	68 dc d6 13 f0       	push   $0xf013d6dc
f0132089:	6a 7f                	push   $0x7f
f013208b:	68 67 d6 13 f0       	push   $0xf013d667
f0132090:	e8 70 e1 fc ff       	call   f0100205 <_panic>
f0132095:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132098:	8b 10                	mov    (%eax),%edx
f013209a:	8b 45 08             	mov    0x8(%ebp),%eax
f013209d:	89 10                	mov    %edx,(%eax)
f013209f:	8b 45 08             	mov    0x8(%ebp),%eax
f01320a2:	8b 00                	mov    (%eax),%eax
f01320a4:	85 c0                	test   %eax,%eax
f01320a6:	74 0b                	je     f01320b3 <insert_sorted_allocList+0x222>
f01320a8:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01320ab:	8b 00                	mov    (%eax),%eax
f01320ad:	8b 55 08             	mov    0x8(%ebp),%edx
f01320b0:	89 50 04             	mov    %edx,0x4(%eax)
f01320b3:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01320b6:	8b 55 08             	mov    0x8(%ebp),%edx
f01320b9:	89 10                	mov    %edx,(%eax)
f01320bb:	8b 45 08             	mov    0x8(%ebp),%eax
f01320be:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01320c1:	89 50 04             	mov    %edx,0x4(%eax)
f01320c4:	8b 45 08             	mov    0x8(%ebp),%eax
f01320c7:	8b 00                	mov    (%eax),%eax
f01320c9:	85 c0                	test   %eax,%eax
f01320cb:	75 08                	jne    f01320d5 <insert_sorted_allocList+0x244>
f01320cd:	8b 45 08             	mov    0x8(%ebp),%eax
f01320d0:	a3 8c 25 78 f0       	mov    %eax,0xf078258c
f01320d5:	a1 94 25 78 f0       	mov    0xf0782594,%eax
f01320da:	40                   	inc    %eax
f01320db:	a3 94 25 78 f0       	mov    %eax,0xf0782594
				break;
f01320e0:	eb 39                	jmp    f013211b <insert_sorted_allocList+0x28a>
	}
	else
	{
		struct MemBlock *current_block = head;
		struct MemBlock *next_block = NULL;
		LIST_FOREACH (current_block, &AllocMemBlocksList)
f01320e2:	a1 90 25 78 f0       	mov    0xf0782590,%eax
f01320e7:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01320ea:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01320ee:	74 07                	je     f01320f7 <insert_sorted_allocList+0x266>
f01320f0:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01320f3:	8b 00                	mov    (%eax),%eax
f01320f5:	eb 05                	jmp    f01320fc <insert_sorted_allocList+0x26b>
f01320f7:	b8 00 00 00 00       	mov    $0x0,%eax
f01320fc:	a3 90 25 78 f0       	mov    %eax,0xf0782590
f0132101:	a1 90 25 78 f0       	mov    0xf0782590,%eax
f0132106:	85 c0                	test   %eax,%eax
f0132108:	0f 85 3f ff ff ff    	jne    f013204d <insert_sorted_allocList+0x1bc>
f013210e:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0132112:	0f 85 35 ff ff ff    	jne    f013204d <insert_sorted_allocList+0x1bc>
				LIST_INSERT_AFTER(&AllocMemBlocksList,current_block,blockToInsert);
				break;
			}
		}
	}
}
f0132118:	eb 01                	jmp    f013211b <insert_sorted_allocList+0x28a>
	struct MemBlock *head = LIST_FIRST(&AllocMemBlocksList) ;
	struct MemBlock *tail = LIST_LAST(&AllocMemBlocksList) ;

	if (head == tail || blockToInsert->sva <= head->sva || blockToInsert->sva >= tail->sva )
	{
		if(head == NULL )
f013211a:	90                   	nop
				LIST_INSERT_AFTER(&AllocMemBlocksList,current_block,blockToInsert);
				break;
			}
		}
	}
}
f013211b:	90                   	nop
f013211c:	c9                   	leave  
f013211d:	c3                   	ret    

f013211e <alloc_block_FF>:

//=========================================
// [4] ALLOCATE BLOCK BY FIRST FIT:
//=========================================
struct MemBlock *alloc_block_FF(uint32 size)
{
f013211e:	55                   	push   %ebp
f013211f:	89 e5                	mov    %esp,%ebp
f0132121:	83 ec 18             	sub    $0x18,%esp
	//TODO: [PROJECT MS1] [DYNAMIC ALLOCATOR] alloc_block_FF
	// Write your code here, remove the panic and write your code
	struct MemBlock *point;
	LIST_FOREACH(point,&FreeMemBlocksList)
f0132124:	a1 24 26 78 f0       	mov    0xf0782624,%eax
f0132129:	89 45 f4             	mov    %eax,-0xc(%ebp)
f013212c:	e9 85 01 00 00       	jmp    f01322b6 <alloc_block_FF+0x198>
	{
		if(size <= point->size)
f0132131:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132134:	8b 40 0c             	mov    0xc(%eax),%eax
f0132137:	3b 45 08             	cmp    0x8(%ebp),%eax
f013213a:	0f 82 6e 01 00 00    	jb     f01322ae <alloc_block_FF+0x190>
		{
		   if(size == point->size){
f0132140:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132143:	8b 40 0c             	mov    0xc(%eax),%eax
f0132146:	3b 45 08             	cmp    0x8(%ebp),%eax
f0132149:	0f 85 8a 00 00 00    	jne    f01321d9 <alloc_block_FF+0xbb>
			   LIST_REMOVE(&FreeMemBlocksList,point);
f013214f:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0132153:	75 17                	jne    f013216c <alloc_block_FF+0x4e>
f0132155:	83 ec 04             	sub    $0x4,%esp
f0132158:	68 10 d7 13 f0       	push   $0xf013d710
f013215d:	68 93 00 00 00       	push   $0x93
f0132162:	68 67 d6 13 f0       	push   $0xf013d667
f0132167:	e8 99 e0 fc ff       	call   f0100205 <_panic>
f013216c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f013216f:	8b 00                	mov    (%eax),%eax
f0132171:	85 c0                	test   %eax,%eax
f0132173:	74 10                	je     f0132185 <alloc_block_FF+0x67>
f0132175:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132178:	8b 00                	mov    (%eax),%eax
f013217a:	8b 55 f4             	mov    -0xc(%ebp),%edx
f013217d:	8b 52 04             	mov    0x4(%edx),%edx
f0132180:	89 50 04             	mov    %edx,0x4(%eax)
f0132183:	eb 0b                	jmp    f0132190 <alloc_block_FF+0x72>
f0132185:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132188:	8b 40 04             	mov    0x4(%eax),%eax
f013218b:	a3 28 26 78 f0       	mov    %eax,0xf0782628
f0132190:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132193:	8b 40 04             	mov    0x4(%eax),%eax
f0132196:	85 c0                	test   %eax,%eax
f0132198:	74 0f                	je     f01321a9 <alloc_block_FF+0x8b>
f013219a:	8b 45 f4             	mov    -0xc(%ebp),%eax
f013219d:	8b 40 04             	mov    0x4(%eax),%eax
f01321a0:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01321a3:	8b 12                	mov    (%edx),%edx
f01321a5:	89 10                	mov    %edx,(%eax)
f01321a7:	eb 0a                	jmp    f01321b3 <alloc_block_FF+0x95>
f01321a9:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01321ac:	8b 00                	mov    (%eax),%eax
f01321ae:	a3 24 26 78 f0       	mov    %eax,0xf0782624
f01321b3:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01321b6:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f01321bc:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01321bf:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f01321c6:	a1 30 26 78 f0       	mov    0xf0782630,%eax
f01321cb:	48                   	dec    %eax
f01321cc:	a3 30 26 78 f0       	mov    %eax,0xf0782630
			   return  point;
f01321d1:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01321d4:	e9 10 01 00 00       	jmp    f01322e9 <alloc_block_FF+0x1cb>
			   break;
		   }
		   else if (size < point->size){
f01321d9:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01321dc:	8b 40 0c             	mov    0xc(%eax),%eax
f01321df:	3b 45 08             	cmp    0x8(%ebp),%eax
f01321e2:	0f 86 c6 00 00 00    	jbe    f01322ae <alloc_block_FF+0x190>
			   struct MemBlock * ReturnedBlock = LIST_FIRST(&AvailableMemBlocksList);
f01321e8:	a1 58 26 78 f0       	mov    0xf0782658,%eax
f01321ed:	89 45 f0             	mov    %eax,-0x10(%ebp)
			   ReturnedBlock->sva = point->sva;
f01321f0:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01321f3:	8b 50 08             	mov    0x8(%eax),%edx
f01321f6:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01321f9:	89 50 08             	mov    %edx,0x8(%eax)
			   ReturnedBlock->size = size;
f01321fc:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01321ff:	8b 55 08             	mov    0x8(%ebp),%edx
f0132202:	89 50 0c             	mov    %edx,0xc(%eax)
			   LIST_REMOVE(&AvailableMemBlocksList,ReturnedBlock);
f0132205:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0132209:	75 17                	jne    f0132222 <alloc_block_FF+0x104>
f013220b:	83 ec 04             	sub    $0x4,%esp
f013220e:	68 10 d7 13 f0       	push   $0xf013d710
f0132213:	68 9b 00 00 00       	push   $0x9b
f0132218:	68 67 d6 13 f0       	push   $0xf013d667
f013221d:	e8 e3 df fc ff       	call   f0100205 <_panic>
f0132222:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0132225:	8b 00                	mov    (%eax),%eax
f0132227:	85 c0                	test   %eax,%eax
f0132229:	74 10                	je     f013223b <alloc_block_FF+0x11d>
f013222b:	8b 45 f0             	mov    -0x10(%ebp),%eax
f013222e:	8b 00                	mov    (%eax),%eax
f0132230:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0132233:	8b 52 04             	mov    0x4(%edx),%edx
f0132236:	89 50 04             	mov    %edx,0x4(%eax)
f0132239:	eb 0b                	jmp    f0132246 <alloc_block_FF+0x128>
f013223b:	8b 45 f0             	mov    -0x10(%ebp),%eax
f013223e:	8b 40 04             	mov    0x4(%eax),%eax
f0132241:	a3 5c 26 78 f0       	mov    %eax,0xf078265c
f0132246:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0132249:	8b 40 04             	mov    0x4(%eax),%eax
f013224c:	85 c0                	test   %eax,%eax
f013224e:	74 0f                	je     f013225f <alloc_block_FF+0x141>
f0132250:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0132253:	8b 40 04             	mov    0x4(%eax),%eax
f0132256:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0132259:	8b 12                	mov    (%edx),%edx
f013225b:	89 10                	mov    %edx,(%eax)
f013225d:	eb 0a                	jmp    f0132269 <alloc_block_FF+0x14b>
f013225f:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0132262:	8b 00                	mov    (%eax),%eax
f0132264:	a3 58 26 78 f0       	mov    %eax,0xf0782658
f0132269:	8b 45 f0             	mov    -0x10(%ebp),%eax
f013226c:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f0132272:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0132275:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f013227c:	a1 64 26 78 f0       	mov    0xf0782664,%eax
f0132281:	48                   	dec    %eax
f0132282:	a3 64 26 78 f0       	mov    %eax,0xf0782664
			   point->sva += size;
f0132287:	8b 45 f4             	mov    -0xc(%ebp),%eax
f013228a:	8b 50 08             	mov    0x8(%eax),%edx
f013228d:	8b 45 08             	mov    0x8(%ebp),%eax
f0132290:	01 c2                	add    %eax,%edx
f0132292:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132295:	89 50 08             	mov    %edx,0x8(%eax)
			   point->size -= size;
f0132298:	8b 45 f4             	mov    -0xc(%ebp),%eax
f013229b:	8b 40 0c             	mov    0xc(%eax),%eax
f013229e:	2b 45 08             	sub    0x8(%ebp),%eax
f01322a1:	89 c2                	mov    %eax,%edx
f01322a3:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01322a6:	89 50 0c             	mov    %edx,0xc(%eax)
			   return ReturnedBlock;
f01322a9:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01322ac:	eb 3b                	jmp    f01322e9 <alloc_block_FF+0x1cb>
struct MemBlock *alloc_block_FF(uint32 size)
{
	//TODO: [PROJECT MS1] [DYNAMIC ALLOCATOR] alloc_block_FF
	// Write your code here, remove the panic and write your code
	struct MemBlock *point;
	LIST_FOREACH(point,&FreeMemBlocksList)
f01322ae:	a1 2c 26 78 f0       	mov    0xf078262c,%eax
f01322b3:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01322b6:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01322ba:	74 07                	je     f01322c3 <alloc_block_FF+0x1a5>
f01322bc:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01322bf:	8b 00                	mov    (%eax),%eax
f01322c1:	eb 05                	jmp    f01322c8 <alloc_block_FF+0x1aa>
f01322c3:	b8 00 00 00 00       	mov    $0x0,%eax
f01322c8:	a3 2c 26 78 f0       	mov    %eax,0xf078262c
f01322cd:	a1 2c 26 78 f0       	mov    0xf078262c,%eax
f01322d2:	85 c0                	test   %eax,%eax
f01322d4:	0f 85 57 fe ff ff    	jne    f0132131 <alloc_block_FF+0x13>
f01322da:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01322de:	0f 85 4d fe ff ff    	jne    f0132131 <alloc_block_FF+0x13>
			   return ReturnedBlock;
			   break;
		   }
		}
	}
	return NULL;
f01322e4:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01322e9:	c9                   	leave  
f01322ea:	c3                   	ret    

f01322eb <alloc_block_BF>:

//=========================================
// [5] ALLOCATE BLOCK BY BEST FIT:
//=========================================
struct MemBlock *alloc_block_BF(uint32 size)
{
f01322eb:	55                   	push   %ebp
f01322ec:	89 e5                	mov    %esp,%ebp
f01322ee:	83 ec 28             	sub    $0x28,%esp
	//TODO: [PROJECT MS1] [DYNAMIC ALLOCATOR] alloc_block_BF
	// Write your code here, remove the panic and write your code
	struct MemBlock *currentMemBlock;
	uint32 minSize;
	uint32 svaOfMinSize;
	bool isFound = 1==0;
f01322f1:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
	LIST_FOREACH(currentMemBlock,&FreeMemBlocksList)
f01322f8:	a1 24 26 78 f0       	mov    0xf0782624,%eax
f01322fd:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0132300:	e9 df 00 00 00       	jmp    f01323e4 <alloc_block_BF+0xf9>
	{
		if(size <= currentMemBlock->size)
f0132305:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132308:	8b 40 0c             	mov    0xc(%eax),%eax
f013230b:	3b 45 08             	cmp    0x8(%ebp),%eax
f013230e:	0f 82 c8 00 00 00    	jb     f01323dc <alloc_block_BF+0xf1>
		{
		   if(size == currentMemBlock->size)
f0132314:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132317:	8b 40 0c             	mov    0xc(%eax),%eax
f013231a:	3b 45 08             	cmp    0x8(%ebp),%eax
f013231d:	0f 85 8a 00 00 00    	jne    f01323ad <alloc_block_BF+0xc2>
		   {
			   LIST_REMOVE(&FreeMemBlocksList,currentMemBlock);
f0132323:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0132327:	75 17                	jne    f0132340 <alloc_block_BF+0x55>
f0132329:	83 ec 04             	sub    $0x4,%esp
f013232c:	68 10 d7 13 f0       	push   $0xf013d710
f0132331:	68 b7 00 00 00       	push   $0xb7
f0132336:	68 67 d6 13 f0       	push   $0xf013d667
f013233b:	e8 c5 de fc ff       	call   f0100205 <_panic>
f0132340:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132343:	8b 00                	mov    (%eax),%eax
f0132345:	85 c0                	test   %eax,%eax
f0132347:	74 10                	je     f0132359 <alloc_block_BF+0x6e>
f0132349:	8b 45 f4             	mov    -0xc(%ebp),%eax
f013234c:	8b 00                	mov    (%eax),%eax
f013234e:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0132351:	8b 52 04             	mov    0x4(%edx),%edx
f0132354:	89 50 04             	mov    %edx,0x4(%eax)
f0132357:	eb 0b                	jmp    f0132364 <alloc_block_BF+0x79>
f0132359:	8b 45 f4             	mov    -0xc(%ebp),%eax
f013235c:	8b 40 04             	mov    0x4(%eax),%eax
f013235f:	a3 28 26 78 f0       	mov    %eax,0xf0782628
f0132364:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132367:	8b 40 04             	mov    0x4(%eax),%eax
f013236a:	85 c0                	test   %eax,%eax
f013236c:	74 0f                	je     f013237d <alloc_block_BF+0x92>
f013236e:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132371:	8b 40 04             	mov    0x4(%eax),%eax
f0132374:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0132377:	8b 12                	mov    (%edx),%edx
f0132379:	89 10                	mov    %edx,(%eax)
f013237b:	eb 0a                	jmp    f0132387 <alloc_block_BF+0x9c>
f013237d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132380:	8b 00                	mov    (%eax),%eax
f0132382:	a3 24 26 78 f0       	mov    %eax,0xf0782624
f0132387:	8b 45 f4             	mov    -0xc(%ebp),%eax
f013238a:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f0132390:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132393:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f013239a:	a1 30 26 78 f0       	mov    0xf0782630,%eax
f013239f:	48                   	dec    %eax
f01323a0:	a3 30 26 78 f0       	mov    %eax,0xf0782630
			   return currentMemBlock;
f01323a5:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01323a8:	e9 4d 01 00 00       	jmp    f01324fa <alloc_block_BF+0x20f>
		   }
		   else if (size < currentMemBlock->size && currentMemBlock->size < minSize)
f01323ad:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01323b0:	8b 40 0c             	mov    0xc(%eax),%eax
f01323b3:	3b 45 08             	cmp    0x8(%ebp),%eax
f01323b6:	76 24                	jbe    f01323dc <alloc_block_BF+0xf1>
f01323b8:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01323bb:	8b 40 0c             	mov    0xc(%eax),%eax
f01323be:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f01323c1:	73 19                	jae    f01323dc <alloc_block_BF+0xf1>
		   {
			   isFound = 1==1;
f01323c3:	c7 45 e8 01 00 00 00 	movl   $0x1,-0x18(%ebp)
			   minSize = currentMemBlock->size;
f01323ca:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01323cd:	8b 40 0c             	mov    0xc(%eax),%eax
f01323d0:	89 45 f0             	mov    %eax,-0x10(%ebp)
			   svaOfMinSize = currentMemBlock->sva;
f01323d3:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01323d6:	8b 40 08             	mov    0x8(%eax),%eax
f01323d9:	89 45 ec             	mov    %eax,-0x14(%ebp)
	// Write your code here, remove the panic and write your code
	struct MemBlock *currentMemBlock;
	uint32 minSize;
	uint32 svaOfMinSize;
	bool isFound = 1==0;
	LIST_FOREACH(currentMemBlock,&FreeMemBlocksList)
f01323dc:	a1 2c 26 78 f0       	mov    0xf078262c,%eax
f01323e1:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01323e4:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01323e8:	74 07                	je     f01323f1 <alloc_block_BF+0x106>
f01323ea:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01323ed:	8b 00                	mov    (%eax),%eax
f01323ef:	eb 05                	jmp    f01323f6 <alloc_block_BF+0x10b>
f01323f1:	b8 00 00 00 00       	mov    $0x0,%eax
f01323f6:	a3 2c 26 78 f0       	mov    %eax,0xf078262c
f01323fb:	a1 2c 26 78 f0       	mov    0xf078262c,%eax
f0132400:	85 c0                	test   %eax,%eax
f0132402:	0f 85 fd fe ff ff    	jne    f0132305 <alloc_block_BF+0x1a>
f0132408:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f013240c:	0f 85 f3 fe ff ff    	jne    f0132305 <alloc_block_BF+0x1a>
			   minSize = currentMemBlock->size;
			   svaOfMinSize = currentMemBlock->sva;
		   }
		}
	}
	if(isFound)
f0132412:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
f0132416:	0f 84 d9 00 00 00    	je     f01324f5 <alloc_block_BF+0x20a>
	{
		struct MemBlock * foundBlock = LIST_FIRST(&AvailableMemBlocksList);
f013241c:	a1 58 26 78 f0       	mov    0xf0782658,%eax
f0132421:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		foundBlock->sva = svaOfMinSize;
f0132424:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0132427:	8b 55 ec             	mov    -0x14(%ebp),%edx
f013242a:	89 50 08             	mov    %edx,0x8(%eax)
		foundBlock->size = size;
f013242d:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0132430:	8b 55 08             	mov    0x8(%ebp),%edx
f0132433:	89 50 0c             	mov    %edx,0xc(%eax)
		LIST_REMOVE(&AvailableMemBlocksList,foundBlock);
f0132436:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f013243a:	75 17                	jne    f0132453 <alloc_block_BF+0x168>
f013243c:	83 ec 04             	sub    $0x4,%esp
f013243f:	68 10 d7 13 f0       	push   $0xf013d710
f0132444:	68 c7 00 00 00       	push   $0xc7
f0132449:	68 67 d6 13 f0       	push   $0xf013d667
f013244e:	e8 b2 dd fc ff       	call   f0100205 <_panic>
f0132453:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0132456:	8b 00                	mov    (%eax),%eax
f0132458:	85 c0                	test   %eax,%eax
f013245a:	74 10                	je     f013246c <alloc_block_BF+0x181>
f013245c:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f013245f:	8b 00                	mov    (%eax),%eax
f0132461:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f0132464:	8b 52 04             	mov    0x4(%edx),%edx
f0132467:	89 50 04             	mov    %edx,0x4(%eax)
f013246a:	eb 0b                	jmp    f0132477 <alloc_block_BF+0x18c>
f013246c:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f013246f:	8b 40 04             	mov    0x4(%eax),%eax
f0132472:	a3 5c 26 78 f0       	mov    %eax,0xf078265c
f0132477:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f013247a:	8b 40 04             	mov    0x4(%eax),%eax
f013247d:	85 c0                	test   %eax,%eax
f013247f:	74 0f                	je     f0132490 <alloc_block_BF+0x1a5>
f0132481:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0132484:	8b 40 04             	mov    0x4(%eax),%eax
f0132487:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f013248a:	8b 12                	mov    (%edx),%edx
f013248c:	89 10                	mov    %edx,(%eax)
f013248e:	eb 0a                	jmp    f013249a <alloc_block_BF+0x1af>
f0132490:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0132493:	8b 00                	mov    (%eax),%eax
f0132495:	a3 58 26 78 f0       	mov    %eax,0xf0782658
f013249a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f013249d:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f01324a3:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01324a6:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f01324ad:	a1 64 26 78 f0       	mov    0xf0782664,%eax
f01324b2:	48                   	dec    %eax
f01324b3:	a3 64 26 78 f0       	mov    %eax,0xf0782664
		struct MemBlock *cMemBlock = find_block(&FreeMemBlocksList, svaOfMinSize);
f01324b8:	83 ec 08             	sub    $0x8,%esp
f01324bb:	ff 75 ec             	pushl  -0x14(%ebp)
f01324be:	68 24 26 78 f0       	push   $0xf0782624
f01324c3:	e8 71 f9 ff ff       	call   f0131e39 <find_block>
f01324c8:	83 c4 10             	add    $0x10,%esp
f01324cb:	89 45 e0             	mov    %eax,-0x20(%ebp)
		cMemBlock->sva += size;
f01324ce:	8b 45 e0             	mov    -0x20(%ebp),%eax
f01324d1:	8b 50 08             	mov    0x8(%eax),%edx
f01324d4:	8b 45 08             	mov    0x8(%ebp),%eax
f01324d7:	01 c2                	add    %eax,%edx
f01324d9:	8b 45 e0             	mov    -0x20(%ebp),%eax
f01324dc:	89 50 08             	mov    %edx,0x8(%eax)
		cMemBlock->size -= size;
f01324df:	8b 45 e0             	mov    -0x20(%ebp),%eax
f01324e2:	8b 40 0c             	mov    0xc(%eax),%eax
f01324e5:	2b 45 08             	sub    0x8(%ebp),%eax
f01324e8:	89 c2                	mov    %eax,%edx
f01324ea:	8b 45 e0             	mov    -0x20(%ebp),%eax
f01324ed:	89 50 0c             	mov    %edx,0xc(%eax)
		return foundBlock;
f01324f0:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01324f3:	eb 05                	jmp    f01324fa <alloc_block_BF+0x20f>
	}
	return NULL;
f01324f5:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01324fa:	c9                   	leave  
f01324fb:	c3                   	ret    

f01324fc <alloc_block_NF>:
uint32 svaOfNF = 0;
//=========================================
// [7] ALLOCATE BLOCK BY NEXT FIT:
//=========================================
struct MemBlock *alloc_block_NF(uint32 size)
{
f01324fc:	55                   	push   %ebp
f01324fd:	89 e5                	mov    %esp,%ebp
f01324ff:	83 ec 18             	sub    $0x18,%esp
	//TODO: [PROJECT MS1 - BONUS] [DYNAMIC ALLOCATOR] alloc_block_NF
	// Write your code here, remove the panic and write your codestruct MemBlock *point;
	struct MemBlock *point;
	if(svaOfNF == 0)
f0132502:	a1 70 25 78 f0       	mov    0xf0782570,%eax
f0132507:	85 c0                	test   %eax,%eax
f0132509:	0f 85 de 01 00 00    	jne    f01326ed <alloc_block_NF+0x1f1>
	{
		LIST_FOREACH(point,&FreeMemBlocksList)
f013250f:	a1 24 26 78 f0       	mov    0xf0782624,%eax
f0132514:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0132517:	e9 9e 01 00 00       	jmp    f01326ba <alloc_block_NF+0x1be>
		{
			if(size <= point->size)
f013251c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f013251f:	8b 40 0c             	mov    0xc(%eax),%eax
f0132522:	3b 45 08             	cmp    0x8(%ebp),%eax
f0132525:	0f 82 87 01 00 00    	jb     f01326b2 <alloc_block_NF+0x1b6>
			{
			   if(size == point->size){
f013252b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f013252e:	8b 40 0c             	mov    0xc(%eax),%eax
f0132531:	3b 45 08             	cmp    0x8(%ebp),%eax
f0132534:	0f 85 95 00 00 00    	jne    f01325cf <alloc_block_NF+0xd3>
				   LIST_REMOVE(&FreeMemBlocksList,point);
f013253a:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f013253e:	75 17                	jne    f0132557 <alloc_block_NF+0x5b>
f0132540:	83 ec 04             	sub    $0x4,%esp
f0132543:	68 10 d7 13 f0       	push   $0xf013d710
f0132548:	68 e0 00 00 00       	push   $0xe0
f013254d:	68 67 d6 13 f0       	push   $0xf013d667
f0132552:	e8 ae dc fc ff       	call   f0100205 <_panic>
f0132557:	8b 45 f4             	mov    -0xc(%ebp),%eax
f013255a:	8b 00                	mov    (%eax),%eax
f013255c:	85 c0                	test   %eax,%eax
f013255e:	74 10                	je     f0132570 <alloc_block_NF+0x74>
f0132560:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132563:	8b 00                	mov    (%eax),%eax
f0132565:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0132568:	8b 52 04             	mov    0x4(%edx),%edx
f013256b:	89 50 04             	mov    %edx,0x4(%eax)
f013256e:	eb 0b                	jmp    f013257b <alloc_block_NF+0x7f>
f0132570:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132573:	8b 40 04             	mov    0x4(%eax),%eax
f0132576:	a3 28 26 78 f0       	mov    %eax,0xf0782628
f013257b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f013257e:	8b 40 04             	mov    0x4(%eax),%eax
f0132581:	85 c0                	test   %eax,%eax
f0132583:	74 0f                	je     f0132594 <alloc_block_NF+0x98>
f0132585:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132588:	8b 40 04             	mov    0x4(%eax),%eax
f013258b:	8b 55 f4             	mov    -0xc(%ebp),%edx
f013258e:	8b 12                	mov    (%edx),%edx
f0132590:	89 10                	mov    %edx,(%eax)
f0132592:	eb 0a                	jmp    f013259e <alloc_block_NF+0xa2>
f0132594:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132597:	8b 00                	mov    (%eax),%eax
f0132599:	a3 24 26 78 f0       	mov    %eax,0xf0782624
f013259e:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01325a1:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f01325a7:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01325aa:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f01325b1:	a1 30 26 78 f0       	mov    0xf0782630,%eax
f01325b6:	48                   	dec    %eax
f01325b7:	a3 30 26 78 f0       	mov    %eax,0xf0782630
				   svaOfNF = point->sva;
f01325bc:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01325bf:	8b 40 08             	mov    0x8(%eax),%eax
f01325c2:	a3 70 25 78 f0       	mov    %eax,0xf0782570
				   return  point;
f01325c7:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01325ca:	e9 f8 04 00 00       	jmp    f0132ac7 <alloc_block_NF+0x5cb>
				   break;
			   }
			   else if (size < point->size){
f01325cf:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01325d2:	8b 40 0c             	mov    0xc(%eax),%eax
f01325d5:	3b 45 08             	cmp    0x8(%ebp),%eax
f01325d8:	0f 86 d4 00 00 00    	jbe    f01326b2 <alloc_block_NF+0x1b6>
				   struct MemBlock * ReturnedBlock = LIST_FIRST(&AvailableMemBlocksList);
f01325de:	a1 58 26 78 f0       	mov    0xf0782658,%eax
f01325e3:	89 45 f0             	mov    %eax,-0x10(%ebp)
				   ReturnedBlock->sva = point->sva;
f01325e6:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01325e9:	8b 50 08             	mov    0x8(%eax),%edx
f01325ec:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01325ef:	89 50 08             	mov    %edx,0x8(%eax)
				   ReturnedBlock->size = size;
f01325f2:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01325f5:	8b 55 08             	mov    0x8(%ebp),%edx
f01325f8:	89 50 0c             	mov    %edx,0xc(%eax)
				   LIST_REMOVE(&AvailableMemBlocksList,ReturnedBlock);
f01325fb:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f01325ff:	75 17                	jne    f0132618 <alloc_block_NF+0x11c>
f0132601:	83 ec 04             	sub    $0x4,%esp
f0132604:	68 10 d7 13 f0       	push   $0xf013d710
f0132609:	68 e9 00 00 00       	push   $0xe9
f013260e:	68 67 d6 13 f0       	push   $0xf013d667
f0132613:	e8 ed db fc ff       	call   f0100205 <_panic>
f0132618:	8b 45 f0             	mov    -0x10(%ebp),%eax
f013261b:	8b 00                	mov    (%eax),%eax
f013261d:	85 c0                	test   %eax,%eax
f013261f:	74 10                	je     f0132631 <alloc_block_NF+0x135>
f0132621:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0132624:	8b 00                	mov    (%eax),%eax
f0132626:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0132629:	8b 52 04             	mov    0x4(%edx),%edx
f013262c:	89 50 04             	mov    %edx,0x4(%eax)
f013262f:	eb 0b                	jmp    f013263c <alloc_block_NF+0x140>
f0132631:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0132634:	8b 40 04             	mov    0x4(%eax),%eax
f0132637:	a3 5c 26 78 f0       	mov    %eax,0xf078265c
f013263c:	8b 45 f0             	mov    -0x10(%ebp),%eax
f013263f:	8b 40 04             	mov    0x4(%eax),%eax
f0132642:	85 c0                	test   %eax,%eax
f0132644:	74 0f                	je     f0132655 <alloc_block_NF+0x159>
f0132646:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0132649:	8b 40 04             	mov    0x4(%eax),%eax
f013264c:	8b 55 f0             	mov    -0x10(%ebp),%edx
f013264f:	8b 12                	mov    (%edx),%edx
f0132651:	89 10                	mov    %edx,(%eax)
f0132653:	eb 0a                	jmp    f013265f <alloc_block_NF+0x163>
f0132655:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0132658:	8b 00                	mov    (%eax),%eax
f013265a:	a3 58 26 78 f0       	mov    %eax,0xf0782658
f013265f:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0132662:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f0132668:	8b 45 f0             	mov    -0x10(%ebp),%eax
f013266b:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f0132672:	a1 64 26 78 f0       	mov    0xf0782664,%eax
f0132677:	48                   	dec    %eax
f0132678:	a3 64 26 78 f0       	mov    %eax,0xf0782664
				   svaOfNF = ReturnedBlock->sva;
f013267d:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0132680:	8b 40 08             	mov    0x8(%eax),%eax
f0132683:	a3 70 25 78 f0       	mov    %eax,0xf0782570
				   point->sva += size;
f0132688:	8b 45 f4             	mov    -0xc(%ebp),%eax
f013268b:	8b 50 08             	mov    0x8(%eax),%edx
f013268e:	8b 45 08             	mov    0x8(%ebp),%eax
f0132691:	01 c2                	add    %eax,%edx
f0132693:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132696:	89 50 08             	mov    %edx,0x8(%eax)
				   point->size -= size;
f0132699:	8b 45 f4             	mov    -0xc(%ebp),%eax
f013269c:	8b 40 0c             	mov    0xc(%eax),%eax
f013269f:	2b 45 08             	sub    0x8(%ebp),%eax
f01326a2:	89 c2                	mov    %eax,%edx
f01326a4:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01326a7:	89 50 0c             	mov    %edx,0xc(%eax)
				   return ReturnedBlock;
f01326aa:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01326ad:	e9 15 04 00 00       	jmp    f0132ac7 <alloc_block_NF+0x5cb>
	//TODO: [PROJECT MS1 - BONUS] [DYNAMIC ALLOCATOR] alloc_block_NF
	// Write your code here, remove the panic and write your codestruct MemBlock *point;
	struct MemBlock *point;
	if(svaOfNF == 0)
	{
		LIST_FOREACH(point,&FreeMemBlocksList)
f01326b2:	a1 2c 26 78 f0       	mov    0xf078262c,%eax
f01326b7:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01326ba:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01326be:	74 07                	je     f01326c7 <alloc_block_NF+0x1cb>
f01326c0:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01326c3:	8b 00                	mov    (%eax),%eax
f01326c5:	eb 05                	jmp    f01326cc <alloc_block_NF+0x1d0>
f01326c7:	b8 00 00 00 00       	mov    $0x0,%eax
f01326cc:	a3 2c 26 78 f0       	mov    %eax,0xf078262c
f01326d1:	a1 2c 26 78 f0       	mov    0xf078262c,%eax
f01326d6:	85 c0                	test   %eax,%eax
f01326d8:	0f 85 3e fe ff ff    	jne    f013251c <alloc_block_NF+0x20>
f01326de:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01326e2:	0f 85 34 fe ff ff    	jne    f013251c <alloc_block_NF+0x20>
f01326e8:	e9 d5 03 00 00       	jmp    f0132ac2 <alloc_block_NF+0x5c6>
			}
		}
	}
	else
	{
		LIST_FOREACH(point, &FreeMemBlocksList)
f01326ed:	a1 24 26 78 f0       	mov    0xf0782624,%eax
f01326f2:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01326f5:	e9 b1 01 00 00       	jmp    f01328ab <alloc_block_NF+0x3af>
		{
			if(point->sva >= svaOfNF)
f01326fa:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01326fd:	8b 50 08             	mov    0x8(%eax),%edx
f0132700:	a1 70 25 78 f0       	mov    0xf0782570,%eax
f0132705:	39 c2                	cmp    %eax,%edx
f0132707:	0f 82 96 01 00 00    	jb     f01328a3 <alloc_block_NF+0x3a7>
			{
				if(size <= point->size)
f013270d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132710:	8b 40 0c             	mov    0xc(%eax),%eax
f0132713:	3b 45 08             	cmp    0x8(%ebp),%eax
f0132716:	0f 82 87 01 00 00    	jb     f01328a3 <alloc_block_NF+0x3a7>
				{
				   if(size == point->size){
f013271c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f013271f:	8b 40 0c             	mov    0xc(%eax),%eax
f0132722:	3b 45 08             	cmp    0x8(%ebp),%eax
f0132725:	0f 85 95 00 00 00    	jne    f01327c0 <alloc_block_NF+0x2c4>
					   LIST_REMOVE(&FreeMemBlocksList,point);
f013272b:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f013272f:	75 17                	jne    f0132748 <alloc_block_NF+0x24c>
f0132731:	83 ec 04             	sub    $0x4,%esp
f0132734:	68 10 d7 13 f0       	push   $0xf013d710
f0132739:	68 fc 00 00 00       	push   $0xfc
f013273e:	68 67 d6 13 f0       	push   $0xf013d667
f0132743:	e8 bd da fc ff       	call   f0100205 <_panic>
f0132748:	8b 45 f4             	mov    -0xc(%ebp),%eax
f013274b:	8b 00                	mov    (%eax),%eax
f013274d:	85 c0                	test   %eax,%eax
f013274f:	74 10                	je     f0132761 <alloc_block_NF+0x265>
f0132751:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132754:	8b 00                	mov    (%eax),%eax
f0132756:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0132759:	8b 52 04             	mov    0x4(%edx),%edx
f013275c:	89 50 04             	mov    %edx,0x4(%eax)
f013275f:	eb 0b                	jmp    f013276c <alloc_block_NF+0x270>
f0132761:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132764:	8b 40 04             	mov    0x4(%eax),%eax
f0132767:	a3 28 26 78 f0       	mov    %eax,0xf0782628
f013276c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f013276f:	8b 40 04             	mov    0x4(%eax),%eax
f0132772:	85 c0                	test   %eax,%eax
f0132774:	74 0f                	je     f0132785 <alloc_block_NF+0x289>
f0132776:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132779:	8b 40 04             	mov    0x4(%eax),%eax
f013277c:	8b 55 f4             	mov    -0xc(%ebp),%edx
f013277f:	8b 12                	mov    (%edx),%edx
f0132781:	89 10                	mov    %edx,(%eax)
f0132783:	eb 0a                	jmp    f013278f <alloc_block_NF+0x293>
f0132785:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132788:	8b 00                	mov    (%eax),%eax
f013278a:	a3 24 26 78 f0       	mov    %eax,0xf0782624
f013278f:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132792:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f0132798:	8b 45 f4             	mov    -0xc(%ebp),%eax
f013279b:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f01327a2:	a1 30 26 78 f0       	mov    0xf0782630,%eax
f01327a7:	48                   	dec    %eax
f01327a8:	a3 30 26 78 f0       	mov    %eax,0xf0782630
					   svaOfNF = point->sva;
f01327ad:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01327b0:	8b 40 08             	mov    0x8(%eax),%eax
f01327b3:	a3 70 25 78 f0       	mov    %eax,0xf0782570
					   return  point;
f01327b8:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01327bb:	e9 07 03 00 00       	jmp    f0132ac7 <alloc_block_NF+0x5cb>
				   }
				   else if (size < point->size){
f01327c0:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01327c3:	8b 40 0c             	mov    0xc(%eax),%eax
f01327c6:	3b 45 08             	cmp    0x8(%ebp),%eax
f01327c9:	0f 86 d4 00 00 00    	jbe    f01328a3 <alloc_block_NF+0x3a7>
					   struct MemBlock * ReturnedBlock = LIST_FIRST(&AvailableMemBlocksList);
f01327cf:	a1 58 26 78 f0       	mov    0xf0782658,%eax
f01327d4:	89 45 e8             	mov    %eax,-0x18(%ebp)
					   ReturnedBlock->sva = point->sva;
f01327d7:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01327da:	8b 50 08             	mov    0x8(%eax),%edx
f01327dd:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01327e0:	89 50 08             	mov    %edx,0x8(%eax)
					   ReturnedBlock->size = size;
f01327e3:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01327e6:	8b 55 08             	mov    0x8(%ebp),%edx
f01327e9:	89 50 0c             	mov    %edx,0xc(%eax)
					   LIST_REMOVE(&AvailableMemBlocksList,ReturnedBlock);
f01327ec:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
f01327f0:	75 17                	jne    f0132809 <alloc_block_NF+0x30d>
f01327f2:	83 ec 04             	sub    $0x4,%esp
f01327f5:	68 10 d7 13 f0       	push   $0xf013d710
f01327fa:	68 04 01 00 00       	push   $0x104
f01327ff:	68 67 d6 13 f0       	push   $0xf013d667
f0132804:	e8 fc d9 fc ff       	call   f0100205 <_panic>
f0132809:	8b 45 e8             	mov    -0x18(%ebp),%eax
f013280c:	8b 00                	mov    (%eax),%eax
f013280e:	85 c0                	test   %eax,%eax
f0132810:	74 10                	je     f0132822 <alloc_block_NF+0x326>
f0132812:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0132815:	8b 00                	mov    (%eax),%eax
f0132817:	8b 55 e8             	mov    -0x18(%ebp),%edx
f013281a:	8b 52 04             	mov    0x4(%edx),%edx
f013281d:	89 50 04             	mov    %edx,0x4(%eax)
f0132820:	eb 0b                	jmp    f013282d <alloc_block_NF+0x331>
f0132822:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0132825:	8b 40 04             	mov    0x4(%eax),%eax
f0132828:	a3 5c 26 78 f0       	mov    %eax,0xf078265c
f013282d:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0132830:	8b 40 04             	mov    0x4(%eax),%eax
f0132833:	85 c0                	test   %eax,%eax
f0132835:	74 0f                	je     f0132846 <alloc_block_NF+0x34a>
f0132837:	8b 45 e8             	mov    -0x18(%ebp),%eax
f013283a:	8b 40 04             	mov    0x4(%eax),%eax
f013283d:	8b 55 e8             	mov    -0x18(%ebp),%edx
f0132840:	8b 12                	mov    (%edx),%edx
f0132842:	89 10                	mov    %edx,(%eax)
f0132844:	eb 0a                	jmp    f0132850 <alloc_block_NF+0x354>
f0132846:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0132849:	8b 00                	mov    (%eax),%eax
f013284b:	a3 58 26 78 f0       	mov    %eax,0xf0782658
f0132850:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0132853:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f0132859:	8b 45 e8             	mov    -0x18(%ebp),%eax
f013285c:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f0132863:	a1 64 26 78 f0       	mov    0xf0782664,%eax
f0132868:	48                   	dec    %eax
f0132869:	a3 64 26 78 f0       	mov    %eax,0xf0782664
					   svaOfNF = ReturnedBlock->sva;
f013286e:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0132871:	8b 40 08             	mov    0x8(%eax),%eax
f0132874:	a3 70 25 78 f0       	mov    %eax,0xf0782570
					   point->sva += size;
f0132879:	8b 45 f4             	mov    -0xc(%ebp),%eax
f013287c:	8b 50 08             	mov    0x8(%eax),%edx
f013287f:	8b 45 08             	mov    0x8(%ebp),%eax
f0132882:	01 c2                	add    %eax,%edx
f0132884:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132887:	89 50 08             	mov    %edx,0x8(%eax)
					   point->size -= size;
f013288a:	8b 45 f4             	mov    -0xc(%ebp),%eax
f013288d:	8b 40 0c             	mov    0xc(%eax),%eax
f0132890:	2b 45 08             	sub    0x8(%ebp),%eax
f0132893:	89 c2                	mov    %eax,%edx
f0132895:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132898:	89 50 0c             	mov    %edx,0xc(%eax)
					   return ReturnedBlock;
f013289b:	8b 45 e8             	mov    -0x18(%ebp),%eax
f013289e:	e9 24 02 00 00       	jmp    f0132ac7 <alloc_block_NF+0x5cb>
			}
		}
	}
	else
	{
		LIST_FOREACH(point, &FreeMemBlocksList)
f01328a3:	a1 2c 26 78 f0       	mov    0xf078262c,%eax
f01328a8:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01328ab:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01328af:	74 07                	je     f01328b8 <alloc_block_NF+0x3bc>
f01328b1:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01328b4:	8b 00                	mov    (%eax),%eax
f01328b6:	eb 05                	jmp    f01328bd <alloc_block_NF+0x3c1>
f01328b8:	b8 00 00 00 00       	mov    $0x0,%eax
f01328bd:	a3 2c 26 78 f0       	mov    %eax,0xf078262c
f01328c2:	a1 2c 26 78 f0       	mov    0xf078262c,%eax
f01328c7:	85 c0                	test   %eax,%eax
f01328c9:	0f 85 2b fe ff ff    	jne    f01326fa <alloc_block_NF+0x1fe>
f01328cf:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01328d3:	0f 85 21 fe ff ff    	jne    f01326fa <alloc_block_NF+0x1fe>
					   return ReturnedBlock;
				   }
				}
			}
		}
		LIST_FOREACH(point, &FreeMemBlocksList)
f01328d9:	a1 24 26 78 f0       	mov    0xf0782624,%eax
f01328de:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01328e1:	e9 ae 01 00 00       	jmp    f0132a94 <alloc_block_NF+0x598>
		{
			if(point->sva < svaOfNF)
f01328e6:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01328e9:	8b 50 08             	mov    0x8(%eax),%edx
f01328ec:	a1 70 25 78 f0       	mov    0xf0782570,%eax
f01328f1:	39 c2                	cmp    %eax,%edx
f01328f3:	0f 83 93 01 00 00    	jae    f0132a8c <alloc_block_NF+0x590>
			{
				if(size <= point->size)
f01328f9:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01328fc:	8b 40 0c             	mov    0xc(%eax),%eax
f01328ff:	3b 45 08             	cmp    0x8(%ebp),%eax
f0132902:	0f 82 84 01 00 00    	jb     f0132a8c <alloc_block_NF+0x590>
				{
				   if(size == point->size){
f0132908:	8b 45 f4             	mov    -0xc(%ebp),%eax
f013290b:	8b 40 0c             	mov    0xc(%eax),%eax
f013290e:	3b 45 08             	cmp    0x8(%ebp),%eax
f0132911:	0f 85 95 00 00 00    	jne    f01329ac <alloc_block_NF+0x4b0>
					   LIST_REMOVE(&FreeMemBlocksList,point);
f0132917:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f013291b:	75 17                	jne    f0132934 <alloc_block_NF+0x438>
f013291d:	83 ec 04             	sub    $0x4,%esp
f0132920:	68 10 d7 13 f0       	push   $0xf013d710
f0132925:	68 14 01 00 00       	push   $0x114
f013292a:	68 67 d6 13 f0       	push   $0xf013d667
f013292f:	e8 d1 d8 fc ff       	call   f0100205 <_panic>
f0132934:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132937:	8b 00                	mov    (%eax),%eax
f0132939:	85 c0                	test   %eax,%eax
f013293b:	74 10                	je     f013294d <alloc_block_NF+0x451>
f013293d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132940:	8b 00                	mov    (%eax),%eax
f0132942:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0132945:	8b 52 04             	mov    0x4(%edx),%edx
f0132948:	89 50 04             	mov    %edx,0x4(%eax)
f013294b:	eb 0b                	jmp    f0132958 <alloc_block_NF+0x45c>
f013294d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132950:	8b 40 04             	mov    0x4(%eax),%eax
f0132953:	a3 28 26 78 f0       	mov    %eax,0xf0782628
f0132958:	8b 45 f4             	mov    -0xc(%ebp),%eax
f013295b:	8b 40 04             	mov    0x4(%eax),%eax
f013295e:	85 c0                	test   %eax,%eax
f0132960:	74 0f                	je     f0132971 <alloc_block_NF+0x475>
f0132962:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132965:	8b 40 04             	mov    0x4(%eax),%eax
f0132968:	8b 55 f4             	mov    -0xc(%ebp),%edx
f013296b:	8b 12                	mov    (%edx),%edx
f013296d:	89 10                	mov    %edx,(%eax)
f013296f:	eb 0a                	jmp    f013297b <alloc_block_NF+0x47f>
f0132971:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132974:	8b 00                	mov    (%eax),%eax
f0132976:	a3 24 26 78 f0       	mov    %eax,0xf0782624
f013297b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f013297e:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f0132984:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132987:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f013298e:	a1 30 26 78 f0       	mov    0xf0782630,%eax
f0132993:	48                   	dec    %eax
f0132994:	a3 30 26 78 f0       	mov    %eax,0xf0782630
					   svaOfNF = point->sva;
f0132999:	8b 45 f4             	mov    -0xc(%ebp),%eax
f013299c:	8b 40 08             	mov    0x8(%eax),%eax
f013299f:	a3 70 25 78 f0       	mov    %eax,0xf0782570
					   return  point;
f01329a4:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01329a7:	e9 1b 01 00 00       	jmp    f0132ac7 <alloc_block_NF+0x5cb>
				   }
				   else if (size < point->size){
f01329ac:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01329af:	8b 40 0c             	mov    0xc(%eax),%eax
f01329b2:	3b 45 08             	cmp    0x8(%ebp),%eax
f01329b5:	0f 86 d1 00 00 00    	jbe    f0132a8c <alloc_block_NF+0x590>
					   struct MemBlock * ReturnedBlock = LIST_FIRST(&AvailableMemBlocksList);
f01329bb:	a1 58 26 78 f0       	mov    0xf0782658,%eax
f01329c0:	89 45 ec             	mov    %eax,-0x14(%ebp)
					   ReturnedBlock->sva = point->sva;
f01329c3:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01329c6:	8b 50 08             	mov    0x8(%eax),%edx
f01329c9:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01329cc:	89 50 08             	mov    %edx,0x8(%eax)
					   ReturnedBlock->size = size;
f01329cf:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01329d2:	8b 55 08             	mov    0x8(%ebp),%edx
f01329d5:	89 50 0c             	mov    %edx,0xc(%eax)
					   LIST_REMOVE(&AvailableMemBlocksList,ReturnedBlock);
f01329d8:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f01329dc:	75 17                	jne    f01329f5 <alloc_block_NF+0x4f9>
f01329de:	83 ec 04             	sub    $0x4,%esp
f01329e1:	68 10 d7 13 f0       	push   $0xf013d710
f01329e6:	68 1c 01 00 00       	push   $0x11c
f01329eb:	68 67 d6 13 f0       	push   $0xf013d667
f01329f0:	e8 10 d8 fc ff       	call   f0100205 <_panic>
f01329f5:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01329f8:	8b 00                	mov    (%eax),%eax
f01329fa:	85 c0                	test   %eax,%eax
f01329fc:	74 10                	je     f0132a0e <alloc_block_NF+0x512>
f01329fe:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0132a01:	8b 00                	mov    (%eax),%eax
f0132a03:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0132a06:	8b 52 04             	mov    0x4(%edx),%edx
f0132a09:	89 50 04             	mov    %edx,0x4(%eax)
f0132a0c:	eb 0b                	jmp    f0132a19 <alloc_block_NF+0x51d>
f0132a0e:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0132a11:	8b 40 04             	mov    0x4(%eax),%eax
f0132a14:	a3 5c 26 78 f0       	mov    %eax,0xf078265c
f0132a19:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0132a1c:	8b 40 04             	mov    0x4(%eax),%eax
f0132a1f:	85 c0                	test   %eax,%eax
f0132a21:	74 0f                	je     f0132a32 <alloc_block_NF+0x536>
f0132a23:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0132a26:	8b 40 04             	mov    0x4(%eax),%eax
f0132a29:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0132a2c:	8b 12                	mov    (%edx),%edx
f0132a2e:	89 10                	mov    %edx,(%eax)
f0132a30:	eb 0a                	jmp    f0132a3c <alloc_block_NF+0x540>
f0132a32:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0132a35:	8b 00                	mov    (%eax),%eax
f0132a37:	a3 58 26 78 f0       	mov    %eax,0xf0782658
f0132a3c:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0132a3f:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f0132a45:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0132a48:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f0132a4f:	a1 64 26 78 f0       	mov    0xf0782664,%eax
f0132a54:	48                   	dec    %eax
f0132a55:	a3 64 26 78 f0       	mov    %eax,0xf0782664
					   svaOfNF = ReturnedBlock->sva;
f0132a5a:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0132a5d:	8b 40 08             	mov    0x8(%eax),%eax
f0132a60:	a3 70 25 78 f0       	mov    %eax,0xf0782570
					   point->sva += size;
f0132a65:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132a68:	8b 50 08             	mov    0x8(%eax),%edx
f0132a6b:	8b 45 08             	mov    0x8(%ebp),%eax
f0132a6e:	01 c2                	add    %eax,%edx
f0132a70:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132a73:	89 50 08             	mov    %edx,0x8(%eax)
					   point->size -= size;
f0132a76:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132a79:	8b 40 0c             	mov    0xc(%eax),%eax
f0132a7c:	2b 45 08             	sub    0x8(%ebp),%eax
f0132a7f:	89 c2                	mov    %eax,%edx
f0132a81:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132a84:	89 50 0c             	mov    %edx,0xc(%eax)
					   return ReturnedBlock;
f0132a87:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0132a8a:	eb 3b                	jmp    f0132ac7 <alloc_block_NF+0x5cb>
					   return ReturnedBlock;
				   }
				}
			}
		}
		LIST_FOREACH(point, &FreeMemBlocksList)
f0132a8c:	a1 2c 26 78 f0       	mov    0xf078262c,%eax
f0132a91:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0132a94:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0132a98:	74 07                	je     f0132aa1 <alloc_block_NF+0x5a5>
f0132a9a:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132a9d:	8b 00                	mov    (%eax),%eax
f0132a9f:	eb 05                	jmp    f0132aa6 <alloc_block_NF+0x5aa>
f0132aa1:	b8 00 00 00 00       	mov    $0x0,%eax
f0132aa6:	a3 2c 26 78 f0       	mov    %eax,0xf078262c
f0132aab:	a1 2c 26 78 f0       	mov    0xf078262c,%eax
f0132ab0:	85 c0                	test   %eax,%eax
f0132ab2:	0f 85 2e fe ff ff    	jne    f01328e6 <alloc_block_NF+0x3ea>
f0132ab8:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0132abc:	0f 85 24 fe ff ff    	jne    f01328e6 <alloc_block_NF+0x3ea>
				   }
				}
			}
		}
	}
	return NULL;
f0132ac2:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0132ac7:	c9                   	leave  
f0132ac8:	c3                   	ret    

f0132ac9 <insert_sorted_with_merge_freeList>:

//===================================================
// [8] INSERT BLOCK (SORTED WITH MERGE) IN FREE LIST:
//===================================================
void insert_sorted_with_merge_freeList(struct MemBlock *blockToInsert)
{
f0132ac9:	55                   	push   %ebp
f0132aca:	89 e5                	mov    %esp,%ebp
f0132acc:	83 ec 18             	sub    $0x18,%esp
	//cprintf("BEFORE INSERT with MERGE: insert [%x, %x)\n=====================\n", blockToInsert->sva, blockToInsert->sva + blockToInsert->size);
	//print_mem_block_lists() ;

	//TODO: [PROJECT MS1] [DYNAMIC ALLOCATOR] insert_sorted_with_merge_freeList
	// Write your code here, remove the panic and write your code
	struct MemBlock *head = LIST_FIRST(&FreeMemBlocksList) ;
f0132acf:	a1 24 26 78 f0       	mov    0xf0782624,%eax
f0132ad4:	89 45 f0             	mov    %eax,-0x10(%ebp)
	struct MemBlock *tail = LIST_LAST(&FreeMemBlocksList) ;
f0132ad7:	a1 28 26 78 f0       	mov    0xf0782628,%eax
f0132adc:	89 45 ec             	mov    %eax,-0x14(%ebp)

	if (LIST_EMPTY(&FreeMemBlocksList) || blockToInsert->sva <= head->sva)
f0132adf:	a1 24 26 78 f0       	mov    0xf0782624,%eax
f0132ae4:	85 c0                	test   %eax,%eax
f0132ae6:	74 14                	je     f0132afc <insert_sorted_with_merge_freeList+0x33>
f0132ae8:	8b 45 08             	mov    0x8(%ebp),%eax
f0132aeb:	8b 50 08             	mov    0x8(%eax),%edx
f0132aee:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0132af1:	8b 40 08             	mov    0x8(%eax),%eax
f0132af4:	39 c2                	cmp    %eax,%edx
f0132af6:	0f 87 9b 01 00 00    	ja     f0132c97 <insert_sorted_with_merge_freeList+0x1ce>
	{
		LIST_INSERT_HEAD(&FreeMemBlocksList, blockToInsert);
f0132afc:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0132b00:	75 17                	jne    f0132b19 <insert_sorted_with_merge_freeList+0x50>
f0132b02:	83 ec 04             	sub    $0x4,%esp
f0132b05:	68 44 d6 13 f0       	push   $0xf013d644
f0132b0a:	68 38 01 00 00       	push   $0x138
f0132b0f:	68 67 d6 13 f0       	push   $0xf013d667
f0132b14:	e8 ec d6 fc ff       	call   f0100205 <_panic>
f0132b19:	8b 15 24 26 78 f0    	mov    0xf0782624,%edx
f0132b1f:	8b 45 08             	mov    0x8(%ebp),%eax
f0132b22:	89 10                	mov    %edx,(%eax)
f0132b24:	8b 45 08             	mov    0x8(%ebp),%eax
f0132b27:	8b 00                	mov    (%eax),%eax
f0132b29:	85 c0                	test   %eax,%eax
f0132b2b:	74 0d                	je     f0132b3a <insert_sorted_with_merge_freeList+0x71>
f0132b2d:	a1 24 26 78 f0       	mov    0xf0782624,%eax
f0132b32:	8b 55 08             	mov    0x8(%ebp),%edx
f0132b35:	89 50 04             	mov    %edx,0x4(%eax)
f0132b38:	eb 08                	jmp    f0132b42 <insert_sorted_with_merge_freeList+0x79>
f0132b3a:	8b 45 08             	mov    0x8(%ebp),%eax
f0132b3d:	a3 28 26 78 f0       	mov    %eax,0xf0782628
f0132b42:	8b 45 08             	mov    0x8(%ebp),%eax
f0132b45:	a3 24 26 78 f0       	mov    %eax,0xf0782624
f0132b4a:	8b 45 08             	mov    0x8(%ebp),%eax
f0132b4d:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f0132b54:	a1 30 26 78 f0       	mov    0xf0782630,%eax
f0132b59:	40                   	inc    %eax
f0132b5a:	a3 30 26 78 f0       	mov    %eax,0xf0782630
		if(head != NULL && blockToInsert->sva + blockToInsert->size == head->sva)
f0132b5f:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0132b63:	0f 84 a8 06 00 00    	je     f0133211 <insert_sorted_with_merge_freeList+0x748>
f0132b69:	8b 45 08             	mov    0x8(%ebp),%eax
f0132b6c:	8b 50 08             	mov    0x8(%eax),%edx
f0132b6f:	8b 45 08             	mov    0x8(%ebp),%eax
f0132b72:	8b 40 0c             	mov    0xc(%eax),%eax
f0132b75:	01 c2                	add    %eax,%edx
f0132b77:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0132b7a:	8b 40 08             	mov    0x8(%eax),%eax
f0132b7d:	39 c2                	cmp    %eax,%edx
f0132b7f:	0f 85 8c 06 00 00    	jne    f0133211 <insert_sorted_with_merge_freeList+0x748>
		{
			blockToInsert->size += head->size;
f0132b85:	8b 45 08             	mov    0x8(%ebp),%eax
f0132b88:	8b 50 0c             	mov    0xc(%eax),%edx
f0132b8b:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0132b8e:	8b 40 0c             	mov    0xc(%eax),%eax
f0132b91:	01 c2                	add    %eax,%edx
f0132b93:	8b 45 08             	mov    0x8(%ebp),%eax
f0132b96:	89 50 0c             	mov    %edx,0xc(%eax)
			LIST_REMOVE(&FreeMemBlocksList, head);
f0132b99:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0132b9d:	75 17                	jne    f0132bb6 <insert_sorted_with_merge_freeList+0xed>
f0132b9f:	83 ec 04             	sub    $0x4,%esp
f0132ba2:	68 10 d7 13 f0       	push   $0xf013d710
f0132ba7:	68 3c 01 00 00       	push   $0x13c
f0132bac:	68 67 d6 13 f0       	push   $0xf013d667
f0132bb1:	e8 4f d6 fc ff       	call   f0100205 <_panic>
f0132bb6:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0132bb9:	8b 00                	mov    (%eax),%eax
f0132bbb:	85 c0                	test   %eax,%eax
f0132bbd:	74 10                	je     f0132bcf <insert_sorted_with_merge_freeList+0x106>
f0132bbf:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0132bc2:	8b 00                	mov    (%eax),%eax
f0132bc4:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0132bc7:	8b 52 04             	mov    0x4(%edx),%edx
f0132bca:	89 50 04             	mov    %edx,0x4(%eax)
f0132bcd:	eb 0b                	jmp    f0132bda <insert_sorted_with_merge_freeList+0x111>
f0132bcf:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0132bd2:	8b 40 04             	mov    0x4(%eax),%eax
f0132bd5:	a3 28 26 78 f0       	mov    %eax,0xf0782628
f0132bda:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0132bdd:	8b 40 04             	mov    0x4(%eax),%eax
f0132be0:	85 c0                	test   %eax,%eax
f0132be2:	74 0f                	je     f0132bf3 <insert_sorted_with_merge_freeList+0x12a>
f0132be4:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0132be7:	8b 40 04             	mov    0x4(%eax),%eax
f0132bea:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0132bed:	8b 12                	mov    (%edx),%edx
f0132bef:	89 10                	mov    %edx,(%eax)
f0132bf1:	eb 0a                	jmp    f0132bfd <insert_sorted_with_merge_freeList+0x134>
f0132bf3:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0132bf6:	8b 00                	mov    (%eax),%eax
f0132bf8:	a3 24 26 78 f0       	mov    %eax,0xf0782624
f0132bfd:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0132c00:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f0132c06:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0132c09:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f0132c10:	a1 30 26 78 f0       	mov    0xf0782630,%eax
f0132c15:	48                   	dec    %eax
f0132c16:	a3 30 26 78 f0       	mov    %eax,0xf0782630
			head->size = 0;
f0132c1b:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0132c1e:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
			head->sva = 0;
f0132c25:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0132c28:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
			LIST_INSERT_HEAD(&AvailableMemBlocksList, head);
f0132c2f:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0132c33:	75 17                	jne    f0132c4c <insert_sorted_with_merge_freeList+0x183>
f0132c35:	83 ec 04             	sub    $0x4,%esp
f0132c38:	68 44 d6 13 f0       	push   $0xf013d644
f0132c3d:	68 3f 01 00 00       	push   $0x13f
f0132c42:	68 67 d6 13 f0       	push   $0xf013d667
f0132c47:	e8 b9 d5 fc ff       	call   f0100205 <_panic>
f0132c4c:	8b 15 58 26 78 f0    	mov    0xf0782658,%edx
f0132c52:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0132c55:	89 10                	mov    %edx,(%eax)
f0132c57:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0132c5a:	8b 00                	mov    (%eax),%eax
f0132c5c:	85 c0                	test   %eax,%eax
f0132c5e:	74 0d                	je     f0132c6d <insert_sorted_with_merge_freeList+0x1a4>
f0132c60:	a1 58 26 78 f0       	mov    0xf0782658,%eax
f0132c65:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0132c68:	89 50 04             	mov    %edx,0x4(%eax)
f0132c6b:	eb 08                	jmp    f0132c75 <insert_sorted_with_merge_freeList+0x1ac>
f0132c6d:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0132c70:	a3 5c 26 78 f0       	mov    %eax,0xf078265c
f0132c75:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0132c78:	a3 58 26 78 f0       	mov    %eax,0xf0782658
f0132c7d:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0132c80:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f0132c87:	a1 64 26 78 f0       	mov    0xf0782664,%eax
f0132c8c:	40                   	inc    %eax
f0132c8d:	a3 64 26 78 f0       	mov    %eax,0xf0782664
	struct MemBlock *tail = LIST_LAST(&FreeMemBlocksList) ;

	if (LIST_EMPTY(&FreeMemBlocksList) || blockToInsert->sva <= head->sva)
	{
		LIST_INSERT_HEAD(&FreeMemBlocksList, blockToInsert);
		if(head != NULL && blockToInsert->sva + blockToInsert->size == head->sva)
f0132c92:	e9 7a 05 00 00       	jmp    f0133211 <insert_sorted_with_merge_freeList+0x748>
			head->size = 0;
			head->sva = 0;
			LIST_INSERT_HEAD(&AvailableMemBlocksList, head);
		}
	}
	else if (blockToInsert->sva >= tail->sva)
f0132c97:	8b 45 08             	mov    0x8(%ebp),%eax
f0132c9a:	8b 50 08             	mov    0x8(%eax),%edx
f0132c9d:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0132ca0:	8b 40 08             	mov    0x8(%eax),%eax
f0132ca3:	39 c2                	cmp    %eax,%edx
f0132ca5:	0f 82 14 01 00 00    	jb     f0132dbf <insert_sorted_with_merge_freeList+0x2f6>
	{
		if(tail->sva + tail->size == blockToInsert->sva)
f0132cab:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0132cae:	8b 50 08             	mov    0x8(%eax),%edx
f0132cb1:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0132cb4:	8b 40 0c             	mov    0xc(%eax),%eax
f0132cb7:	01 c2                	add    %eax,%edx
f0132cb9:	8b 45 08             	mov    0x8(%ebp),%eax
f0132cbc:	8b 40 08             	mov    0x8(%eax),%eax
f0132cbf:	39 c2                	cmp    %eax,%edx
f0132cc1:	0f 85 90 00 00 00    	jne    f0132d57 <insert_sorted_with_merge_freeList+0x28e>
		{
			tail->size += blockToInsert->size;
f0132cc7:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0132cca:	8b 50 0c             	mov    0xc(%eax),%edx
f0132ccd:	8b 45 08             	mov    0x8(%ebp),%eax
f0132cd0:	8b 40 0c             	mov    0xc(%eax),%eax
f0132cd3:	01 c2                	add    %eax,%edx
f0132cd5:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0132cd8:	89 50 0c             	mov    %edx,0xc(%eax)
			blockToInsert->size = 0;
f0132cdb:	8b 45 08             	mov    0x8(%ebp),%eax
f0132cde:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
			blockToInsert->sva = 0;
f0132ce5:	8b 45 08             	mov    0x8(%ebp),%eax
f0132ce8:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
			LIST_INSERT_HEAD(&AvailableMemBlocksList, blockToInsert);
f0132cef:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0132cf3:	75 17                	jne    f0132d0c <insert_sorted_with_merge_freeList+0x243>
f0132cf5:	83 ec 04             	sub    $0x4,%esp
f0132cf8:	68 44 d6 13 f0       	push   $0xf013d644
f0132cfd:	68 49 01 00 00       	push   $0x149
f0132d02:	68 67 d6 13 f0       	push   $0xf013d667
f0132d07:	e8 f9 d4 fc ff       	call   f0100205 <_panic>
f0132d0c:	8b 15 58 26 78 f0    	mov    0xf0782658,%edx
f0132d12:	8b 45 08             	mov    0x8(%ebp),%eax
f0132d15:	89 10                	mov    %edx,(%eax)
f0132d17:	8b 45 08             	mov    0x8(%ebp),%eax
f0132d1a:	8b 00                	mov    (%eax),%eax
f0132d1c:	85 c0                	test   %eax,%eax
f0132d1e:	74 0d                	je     f0132d2d <insert_sorted_with_merge_freeList+0x264>
f0132d20:	a1 58 26 78 f0       	mov    0xf0782658,%eax
f0132d25:	8b 55 08             	mov    0x8(%ebp),%edx
f0132d28:	89 50 04             	mov    %edx,0x4(%eax)
f0132d2b:	eb 08                	jmp    f0132d35 <insert_sorted_with_merge_freeList+0x26c>
f0132d2d:	8b 45 08             	mov    0x8(%ebp),%eax
f0132d30:	a3 5c 26 78 f0       	mov    %eax,0xf078265c
f0132d35:	8b 45 08             	mov    0x8(%ebp),%eax
f0132d38:	a3 58 26 78 f0       	mov    %eax,0xf0782658
f0132d3d:	8b 45 08             	mov    0x8(%ebp),%eax
f0132d40:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f0132d47:	a1 64 26 78 f0       	mov    0xf0782664,%eax
f0132d4c:	40                   	inc    %eax
f0132d4d:	a3 64 26 78 f0       	mov    %eax,0xf0782664
			}
		}
	}
	//cprintf("\nAFTER INSERT with MERGE:\n=====================\n");
	//print_mem_block_lists();
}
f0132d52:	e9 bb 04 00 00       	jmp    f0133212 <insert_sorted_with_merge_freeList+0x749>
			blockToInsert->size = 0;
			blockToInsert->sva = 0;
			LIST_INSERT_HEAD(&AvailableMemBlocksList, blockToInsert);
		}
		else
			LIST_INSERT_TAIL(&FreeMemBlocksList, blockToInsert);
f0132d57:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0132d5b:	75 17                	jne    f0132d74 <insert_sorted_with_merge_freeList+0x2ab>
f0132d5d:	83 ec 04             	sub    $0x4,%esp
f0132d60:	68 b8 d6 13 f0       	push   $0xf013d6b8
f0132d65:	68 4c 01 00 00       	push   $0x14c
f0132d6a:	68 67 d6 13 f0       	push   $0xf013d667
f0132d6f:	e8 91 d4 fc ff       	call   f0100205 <_panic>
f0132d74:	8b 15 28 26 78 f0    	mov    0xf0782628,%edx
f0132d7a:	8b 45 08             	mov    0x8(%ebp),%eax
f0132d7d:	89 50 04             	mov    %edx,0x4(%eax)
f0132d80:	8b 45 08             	mov    0x8(%ebp),%eax
f0132d83:	8b 40 04             	mov    0x4(%eax),%eax
f0132d86:	85 c0                	test   %eax,%eax
f0132d88:	74 0c                	je     f0132d96 <insert_sorted_with_merge_freeList+0x2cd>
f0132d8a:	a1 28 26 78 f0       	mov    0xf0782628,%eax
f0132d8f:	8b 55 08             	mov    0x8(%ebp),%edx
f0132d92:	89 10                	mov    %edx,(%eax)
f0132d94:	eb 08                	jmp    f0132d9e <insert_sorted_with_merge_freeList+0x2d5>
f0132d96:	8b 45 08             	mov    0x8(%ebp),%eax
f0132d99:	a3 24 26 78 f0       	mov    %eax,0xf0782624
f0132d9e:	8b 45 08             	mov    0x8(%ebp),%eax
f0132da1:	a3 28 26 78 f0       	mov    %eax,0xf0782628
f0132da6:	8b 45 08             	mov    0x8(%ebp),%eax
f0132da9:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f0132daf:	a1 30 26 78 f0       	mov    0xf0782630,%eax
f0132db4:	40                   	inc    %eax
f0132db5:	a3 30 26 78 f0       	mov    %eax,0xf0782630
			}
		}
	}
	//cprintf("\nAFTER INSERT with MERGE:\n=====================\n");
	//print_mem_block_lists();
}
f0132dba:	e9 53 04 00 00       	jmp    f0133212 <insert_sorted_with_merge_freeList+0x749>
	}
	else
	{
		struct MemBlock *currentBlock;
		struct MemBlock *nextBlock;
		LIST_FOREACH(currentBlock, &FreeMemBlocksList)
f0132dbf:	a1 24 26 78 f0       	mov    0xf0782624,%eax
f0132dc4:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0132dc7:	e9 15 04 00 00       	jmp    f01331e1 <insert_sorted_with_merge_freeList+0x718>
		{
			nextBlock = LIST_NEXT(currentBlock);
f0132dcc:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132dcf:	8b 00                	mov    (%eax),%eax
f0132dd1:	89 45 e8             	mov    %eax,-0x18(%ebp)
			if(blockToInsert->sva > currentBlock->sva && blockToInsert->sva < nextBlock->sva)
f0132dd4:	8b 45 08             	mov    0x8(%ebp),%eax
f0132dd7:	8b 50 08             	mov    0x8(%eax),%edx
f0132dda:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132ddd:	8b 40 08             	mov    0x8(%eax),%eax
f0132de0:	39 c2                	cmp    %eax,%edx
f0132de2:	0f 86 f1 03 00 00    	jbe    f01331d9 <insert_sorted_with_merge_freeList+0x710>
f0132de8:	8b 45 08             	mov    0x8(%ebp),%eax
f0132deb:	8b 50 08             	mov    0x8(%eax),%edx
f0132dee:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0132df1:	8b 40 08             	mov    0x8(%eax),%eax
f0132df4:	39 c2                	cmp    %eax,%edx
f0132df6:	0f 83 dd 03 00 00    	jae    f01331d9 <insert_sorted_with_merge_freeList+0x710>
			{
				if(currentBlock->sva + currentBlock->size == blockToInsert->sva)
f0132dfc:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132dff:	8b 50 08             	mov    0x8(%eax),%edx
f0132e02:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132e05:	8b 40 0c             	mov    0xc(%eax),%eax
f0132e08:	01 c2                	add    %eax,%edx
f0132e0a:	8b 45 08             	mov    0x8(%ebp),%eax
f0132e0d:	8b 40 08             	mov    0x8(%eax),%eax
f0132e10:	39 c2                	cmp    %eax,%edx
f0132e12:	0f 85 b9 01 00 00    	jne    f0132fd1 <insert_sorted_with_merge_freeList+0x508>
				{
					if(blockToInsert->sva + blockToInsert->size == nextBlock->sva)
f0132e18:	8b 45 08             	mov    0x8(%ebp),%eax
f0132e1b:	8b 50 08             	mov    0x8(%eax),%edx
f0132e1e:	8b 45 08             	mov    0x8(%ebp),%eax
f0132e21:	8b 40 0c             	mov    0xc(%eax),%eax
f0132e24:	01 c2                	add    %eax,%edx
f0132e26:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0132e29:	8b 40 08             	mov    0x8(%eax),%eax
f0132e2c:	39 c2                	cmp    %eax,%edx
f0132e2e:	0f 85 0d 01 00 00    	jne    f0132f41 <insert_sorted_with_merge_freeList+0x478>
					{
						currentBlock->size += nextBlock->size;
f0132e34:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132e37:	8b 50 0c             	mov    0xc(%eax),%edx
f0132e3a:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0132e3d:	8b 40 0c             	mov    0xc(%eax),%eax
f0132e40:	01 c2                	add    %eax,%edx
f0132e42:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132e45:	89 50 0c             	mov    %edx,0xc(%eax)
						LIST_REMOVE(&FreeMemBlocksList, nextBlock);
f0132e48:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
f0132e4c:	75 17                	jne    f0132e65 <insert_sorted_with_merge_freeList+0x39c>
f0132e4e:	83 ec 04             	sub    $0x4,%esp
f0132e51:	68 10 d7 13 f0       	push   $0xf013d710
f0132e56:	68 5c 01 00 00       	push   $0x15c
f0132e5b:	68 67 d6 13 f0       	push   $0xf013d667
f0132e60:	e8 a0 d3 fc ff       	call   f0100205 <_panic>
f0132e65:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0132e68:	8b 00                	mov    (%eax),%eax
f0132e6a:	85 c0                	test   %eax,%eax
f0132e6c:	74 10                	je     f0132e7e <insert_sorted_with_merge_freeList+0x3b5>
f0132e6e:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0132e71:	8b 00                	mov    (%eax),%eax
f0132e73:	8b 55 e8             	mov    -0x18(%ebp),%edx
f0132e76:	8b 52 04             	mov    0x4(%edx),%edx
f0132e79:	89 50 04             	mov    %edx,0x4(%eax)
f0132e7c:	eb 0b                	jmp    f0132e89 <insert_sorted_with_merge_freeList+0x3c0>
f0132e7e:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0132e81:	8b 40 04             	mov    0x4(%eax),%eax
f0132e84:	a3 28 26 78 f0       	mov    %eax,0xf0782628
f0132e89:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0132e8c:	8b 40 04             	mov    0x4(%eax),%eax
f0132e8f:	85 c0                	test   %eax,%eax
f0132e91:	74 0f                	je     f0132ea2 <insert_sorted_with_merge_freeList+0x3d9>
f0132e93:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0132e96:	8b 40 04             	mov    0x4(%eax),%eax
f0132e99:	8b 55 e8             	mov    -0x18(%ebp),%edx
f0132e9c:	8b 12                	mov    (%edx),%edx
f0132e9e:	89 10                	mov    %edx,(%eax)
f0132ea0:	eb 0a                	jmp    f0132eac <insert_sorted_with_merge_freeList+0x3e3>
f0132ea2:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0132ea5:	8b 00                	mov    (%eax),%eax
f0132ea7:	a3 24 26 78 f0       	mov    %eax,0xf0782624
f0132eac:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0132eaf:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f0132eb5:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0132eb8:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f0132ebf:	a1 30 26 78 f0       	mov    0xf0782630,%eax
f0132ec4:	48                   	dec    %eax
f0132ec5:	a3 30 26 78 f0       	mov    %eax,0xf0782630
						nextBlock->sva = 0;
f0132eca:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0132ecd:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
						nextBlock->size = 0;
f0132ed4:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0132ed7:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
						LIST_INSERT_HEAD(&AvailableMemBlocksList, nextBlock);
f0132ede:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
f0132ee2:	75 17                	jne    f0132efb <insert_sorted_with_merge_freeList+0x432>
f0132ee4:	83 ec 04             	sub    $0x4,%esp
f0132ee7:	68 44 d6 13 f0       	push   $0xf013d644
f0132eec:	68 5f 01 00 00       	push   $0x15f
f0132ef1:	68 67 d6 13 f0       	push   $0xf013d667
f0132ef6:	e8 0a d3 fc ff       	call   f0100205 <_panic>
f0132efb:	8b 15 58 26 78 f0    	mov    0xf0782658,%edx
f0132f01:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0132f04:	89 10                	mov    %edx,(%eax)
f0132f06:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0132f09:	8b 00                	mov    (%eax),%eax
f0132f0b:	85 c0                	test   %eax,%eax
f0132f0d:	74 0d                	je     f0132f1c <insert_sorted_with_merge_freeList+0x453>
f0132f0f:	a1 58 26 78 f0       	mov    0xf0782658,%eax
f0132f14:	8b 55 e8             	mov    -0x18(%ebp),%edx
f0132f17:	89 50 04             	mov    %edx,0x4(%eax)
f0132f1a:	eb 08                	jmp    f0132f24 <insert_sorted_with_merge_freeList+0x45b>
f0132f1c:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0132f1f:	a3 5c 26 78 f0       	mov    %eax,0xf078265c
f0132f24:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0132f27:	a3 58 26 78 f0       	mov    %eax,0xf0782658
f0132f2c:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0132f2f:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f0132f36:	a1 64 26 78 f0       	mov    0xf0782664,%eax
f0132f3b:	40                   	inc    %eax
f0132f3c:	a3 64 26 78 f0       	mov    %eax,0xf0782664
					}
					currentBlock->size += blockToInsert->size;
f0132f41:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132f44:	8b 50 0c             	mov    0xc(%eax),%edx
f0132f47:	8b 45 08             	mov    0x8(%ebp),%eax
f0132f4a:	8b 40 0c             	mov    0xc(%eax),%eax
f0132f4d:	01 c2                	add    %eax,%edx
f0132f4f:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132f52:	89 50 0c             	mov    %edx,0xc(%eax)
					blockToInsert->sva = 0;
f0132f55:	8b 45 08             	mov    0x8(%ebp),%eax
f0132f58:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
					blockToInsert->size = 0;
f0132f5f:	8b 45 08             	mov    0x8(%ebp),%eax
f0132f62:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
					LIST_INSERT_HEAD(&AvailableMemBlocksList, blockToInsert);
f0132f69:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0132f6d:	75 17                	jne    f0132f86 <insert_sorted_with_merge_freeList+0x4bd>
f0132f6f:	83 ec 04             	sub    $0x4,%esp
f0132f72:	68 44 d6 13 f0       	push   $0xf013d644
f0132f77:	68 64 01 00 00       	push   $0x164
f0132f7c:	68 67 d6 13 f0       	push   $0xf013d667
f0132f81:	e8 7f d2 fc ff       	call   f0100205 <_panic>
f0132f86:	8b 15 58 26 78 f0    	mov    0xf0782658,%edx
f0132f8c:	8b 45 08             	mov    0x8(%ebp),%eax
f0132f8f:	89 10                	mov    %edx,(%eax)
f0132f91:	8b 45 08             	mov    0x8(%ebp),%eax
f0132f94:	8b 00                	mov    (%eax),%eax
f0132f96:	85 c0                	test   %eax,%eax
f0132f98:	74 0d                	je     f0132fa7 <insert_sorted_with_merge_freeList+0x4de>
f0132f9a:	a1 58 26 78 f0       	mov    0xf0782658,%eax
f0132f9f:	8b 55 08             	mov    0x8(%ebp),%edx
f0132fa2:	89 50 04             	mov    %edx,0x4(%eax)
f0132fa5:	eb 08                	jmp    f0132faf <insert_sorted_with_merge_freeList+0x4e6>
f0132fa7:	8b 45 08             	mov    0x8(%ebp),%eax
f0132faa:	a3 5c 26 78 f0       	mov    %eax,0xf078265c
f0132faf:	8b 45 08             	mov    0x8(%ebp),%eax
f0132fb2:	a3 58 26 78 f0       	mov    %eax,0xf0782658
f0132fb7:	8b 45 08             	mov    0x8(%ebp),%eax
f0132fba:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f0132fc1:	a1 64 26 78 f0       	mov    0xf0782664,%eax
f0132fc6:	40                   	inc    %eax
f0132fc7:	a3 64 26 78 f0       	mov    %eax,0xf0782664
					break;
f0132fcc:	e9 41 02 00 00       	jmp    f0133212 <insert_sorted_with_merge_freeList+0x749>
				}
				else if(blockToInsert->sva + blockToInsert->size == nextBlock->sva)
f0132fd1:	8b 45 08             	mov    0x8(%ebp),%eax
f0132fd4:	8b 50 08             	mov    0x8(%eax),%edx
f0132fd7:	8b 45 08             	mov    0x8(%ebp),%eax
f0132fda:	8b 40 0c             	mov    0xc(%eax),%eax
f0132fdd:	01 c2                	add    %eax,%edx
f0132fdf:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0132fe2:	8b 40 08             	mov    0x8(%eax),%eax
f0132fe5:	39 c2                	cmp    %eax,%edx
f0132fe7:	0f 85 7c 01 00 00    	jne    f0133169 <insert_sorted_with_merge_freeList+0x6a0>
				{
					LIST_INSERT_BEFORE(&FreeMemBlocksList, nextBlock, blockToInsert);
f0132fed:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
f0132ff1:	74 06                	je     f0132ff9 <insert_sorted_with_merge_freeList+0x530>
f0132ff3:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0132ff7:	75 17                	jne    f0133010 <insert_sorted_with_merge_freeList+0x547>
f0132ff9:	83 ec 04             	sub    $0x4,%esp
f0132ffc:	68 80 d6 13 f0       	push   $0xf013d680
f0133001:	68 69 01 00 00       	push   $0x169
f0133006:	68 67 d6 13 f0       	push   $0xf013d667
f013300b:	e8 f5 d1 fc ff       	call   f0100205 <_panic>
f0133010:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0133013:	8b 50 04             	mov    0x4(%eax),%edx
f0133016:	8b 45 08             	mov    0x8(%ebp),%eax
f0133019:	89 50 04             	mov    %edx,0x4(%eax)
f013301c:	8b 45 08             	mov    0x8(%ebp),%eax
f013301f:	8b 55 e8             	mov    -0x18(%ebp),%edx
f0133022:	89 10                	mov    %edx,(%eax)
f0133024:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0133027:	8b 40 04             	mov    0x4(%eax),%eax
f013302a:	85 c0                	test   %eax,%eax
f013302c:	74 0d                	je     f013303b <insert_sorted_with_merge_freeList+0x572>
f013302e:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0133031:	8b 40 04             	mov    0x4(%eax),%eax
f0133034:	8b 55 08             	mov    0x8(%ebp),%edx
f0133037:	89 10                	mov    %edx,(%eax)
f0133039:	eb 08                	jmp    f0133043 <insert_sorted_with_merge_freeList+0x57a>
f013303b:	8b 45 08             	mov    0x8(%ebp),%eax
f013303e:	a3 24 26 78 f0       	mov    %eax,0xf0782624
f0133043:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0133046:	8b 55 08             	mov    0x8(%ebp),%edx
f0133049:	89 50 04             	mov    %edx,0x4(%eax)
f013304c:	a1 30 26 78 f0       	mov    0xf0782630,%eax
f0133051:	40                   	inc    %eax
f0133052:	a3 30 26 78 f0       	mov    %eax,0xf0782630
					blockToInsert->size += nextBlock->size;
f0133057:	8b 45 08             	mov    0x8(%ebp),%eax
f013305a:	8b 50 0c             	mov    0xc(%eax),%edx
f013305d:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0133060:	8b 40 0c             	mov    0xc(%eax),%eax
f0133063:	01 c2                	add    %eax,%edx
f0133065:	8b 45 08             	mov    0x8(%ebp),%eax
f0133068:	89 50 0c             	mov    %edx,0xc(%eax)
					LIST_REMOVE(&FreeMemBlocksList, nextBlock);
f013306b:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
f013306f:	75 17                	jne    f0133088 <insert_sorted_with_merge_freeList+0x5bf>
f0133071:	83 ec 04             	sub    $0x4,%esp
f0133074:	68 10 d7 13 f0       	push   $0xf013d710
f0133079:	68 6b 01 00 00       	push   $0x16b
f013307e:	68 67 d6 13 f0       	push   $0xf013d667
f0133083:	e8 7d d1 fc ff       	call   f0100205 <_panic>
f0133088:	8b 45 e8             	mov    -0x18(%ebp),%eax
f013308b:	8b 00                	mov    (%eax),%eax
f013308d:	85 c0                	test   %eax,%eax
f013308f:	74 10                	je     f01330a1 <insert_sorted_with_merge_freeList+0x5d8>
f0133091:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0133094:	8b 00                	mov    (%eax),%eax
f0133096:	8b 55 e8             	mov    -0x18(%ebp),%edx
f0133099:	8b 52 04             	mov    0x4(%edx),%edx
f013309c:	89 50 04             	mov    %edx,0x4(%eax)
f013309f:	eb 0b                	jmp    f01330ac <insert_sorted_with_merge_freeList+0x5e3>
f01330a1:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01330a4:	8b 40 04             	mov    0x4(%eax),%eax
f01330a7:	a3 28 26 78 f0       	mov    %eax,0xf0782628
f01330ac:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01330af:	8b 40 04             	mov    0x4(%eax),%eax
f01330b2:	85 c0                	test   %eax,%eax
f01330b4:	74 0f                	je     f01330c5 <insert_sorted_with_merge_freeList+0x5fc>
f01330b6:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01330b9:	8b 40 04             	mov    0x4(%eax),%eax
f01330bc:	8b 55 e8             	mov    -0x18(%ebp),%edx
f01330bf:	8b 12                	mov    (%edx),%edx
f01330c1:	89 10                	mov    %edx,(%eax)
f01330c3:	eb 0a                	jmp    f01330cf <insert_sorted_with_merge_freeList+0x606>
f01330c5:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01330c8:	8b 00                	mov    (%eax),%eax
f01330ca:	a3 24 26 78 f0       	mov    %eax,0xf0782624
f01330cf:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01330d2:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f01330d8:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01330db:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f01330e2:	a1 30 26 78 f0       	mov    0xf0782630,%eax
f01330e7:	48                   	dec    %eax
f01330e8:	a3 30 26 78 f0       	mov    %eax,0xf0782630
					nextBlock->sva = 0;
f01330ed:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01330f0:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
					nextBlock->size = 0;
f01330f7:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01330fa:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
					LIST_INSERT_HEAD(&AvailableMemBlocksList, nextBlock);
f0133101:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
f0133105:	75 17                	jne    f013311e <insert_sorted_with_merge_freeList+0x655>
f0133107:	83 ec 04             	sub    $0x4,%esp
f013310a:	68 44 d6 13 f0       	push   $0xf013d644
f013310f:	68 6e 01 00 00       	push   $0x16e
f0133114:	68 67 d6 13 f0       	push   $0xf013d667
f0133119:	e8 e7 d0 fc ff       	call   f0100205 <_panic>
f013311e:	8b 15 58 26 78 f0    	mov    0xf0782658,%edx
f0133124:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0133127:	89 10                	mov    %edx,(%eax)
f0133129:	8b 45 e8             	mov    -0x18(%ebp),%eax
f013312c:	8b 00                	mov    (%eax),%eax
f013312e:	85 c0                	test   %eax,%eax
f0133130:	74 0d                	je     f013313f <insert_sorted_with_merge_freeList+0x676>
f0133132:	a1 58 26 78 f0       	mov    0xf0782658,%eax
f0133137:	8b 55 e8             	mov    -0x18(%ebp),%edx
f013313a:	89 50 04             	mov    %edx,0x4(%eax)
f013313d:	eb 08                	jmp    f0133147 <insert_sorted_with_merge_freeList+0x67e>
f013313f:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0133142:	a3 5c 26 78 f0       	mov    %eax,0xf078265c
f0133147:	8b 45 e8             	mov    -0x18(%ebp),%eax
f013314a:	a3 58 26 78 f0       	mov    %eax,0xf0782658
f013314f:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0133152:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f0133159:	a1 64 26 78 f0       	mov    0xf0782664,%eax
f013315e:	40                   	inc    %eax
f013315f:	a3 64 26 78 f0       	mov    %eax,0xf0782664
					break;
f0133164:	e9 a9 00 00 00       	jmp    f0133212 <insert_sorted_with_merge_freeList+0x749>
				}
				else
				{
					LIST_INSERT_AFTER(&FreeMemBlocksList, currentBlock, blockToInsert);
f0133169:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f013316d:	74 06                	je     f0133175 <insert_sorted_with_merge_freeList+0x6ac>
f013316f:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0133173:	75 17                	jne    f013318c <insert_sorted_with_merge_freeList+0x6c3>
f0133175:	83 ec 04             	sub    $0x4,%esp
f0133178:	68 dc d6 13 f0       	push   $0xf013d6dc
f013317d:	68 73 01 00 00       	push   $0x173
f0133182:	68 67 d6 13 f0       	push   $0xf013d667
f0133187:	e8 79 d0 fc ff       	call   f0100205 <_panic>
f013318c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f013318f:	8b 10                	mov    (%eax),%edx
f0133191:	8b 45 08             	mov    0x8(%ebp),%eax
f0133194:	89 10                	mov    %edx,(%eax)
f0133196:	8b 45 08             	mov    0x8(%ebp),%eax
f0133199:	8b 00                	mov    (%eax),%eax
f013319b:	85 c0                	test   %eax,%eax
f013319d:	74 0b                	je     f01331aa <insert_sorted_with_merge_freeList+0x6e1>
f013319f:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01331a2:	8b 00                	mov    (%eax),%eax
f01331a4:	8b 55 08             	mov    0x8(%ebp),%edx
f01331a7:	89 50 04             	mov    %edx,0x4(%eax)
f01331aa:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01331ad:	8b 55 08             	mov    0x8(%ebp),%edx
f01331b0:	89 10                	mov    %edx,(%eax)
f01331b2:	8b 45 08             	mov    0x8(%ebp),%eax
f01331b5:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01331b8:	89 50 04             	mov    %edx,0x4(%eax)
f01331bb:	8b 45 08             	mov    0x8(%ebp),%eax
f01331be:	8b 00                	mov    (%eax),%eax
f01331c0:	85 c0                	test   %eax,%eax
f01331c2:	75 08                	jne    f01331cc <insert_sorted_with_merge_freeList+0x703>
f01331c4:	8b 45 08             	mov    0x8(%ebp),%eax
f01331c7:	a3 28 26 78 f0       	mov    %eax,0xf0782628
f01331cc:	a1 30 26 78 f0       	mov    0xf0782630,%eax
f01331d1:	40                   	inc    %eax
f01331d2:	a3 30 26 78 f0       	mov    %eax,0xf0782630
					break;
f01331d7:	eb 39                	jmp    f0133212 <insert_sorted_with_merge_freeList+0x749>
	}
	else
	{
		struct MemBlock *currentBlock;
		struct MemBlock *nextBlock;
		LIST_FOREACH(currentBlock, &FreeMemBlocksList)
f01331d9:	a1 2c 26 78 f0       	mov    0xf078262c,%eax
f01331de:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01331e1:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01331e5:	74 07                	je     f01331ee <insert_sorted_with_merge_freeList+0x725>
f01331e7:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01331ea:	8b 00                	mov    (%eax),%eax
f01331ec:	eb 05                	jmp    f01331f3 <insert_sorted_with_merge_freeList+0x72a>
f01331ee:	b8 00 00 00 00       	mov    $0x0,%eax
f01331f3:	a3 2c 26 78 f0       	mov    %eax,0xf078262c
f01331f8:	a1 2c 26 78 f0       	mov    0xf078262c,%eax
f01331fd:	85 c0                	test   %eax,%eax
f01331ff:	0f 85 c7 fb ff ff    	jne    f0132dcc <insert_sorted_with_merge_freeList+0x303>
f0133205:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0133209:	0f 85 bd fb ff ff    	jne    f0132dcc <insert_sorted_with_merge_freeList+0x303>
			}
		}
	}
	//cprintf("\nAFTER INSERT with MERGE:\n=====================\n");
	//print_mem_block_lists();
}
f013320f:	eb 01                	jmp    f0133212 <insert_sorted_with_merge_freeList+0x749>
	struct MemBlock *tail = LIST_LAST(&FreeMemBlocksList) ;

	if (LIST_EMPTY(&FreeMemBlocksList) || blockToInsert->sva <= head->sva)
	{
		LIST_INSERT_HEAD(&FreeMemBlocksList, blockToInsert);
		if(head != NULL && blockToInsert->sva + blockToInsert->size == head->sva)
f0133211:	90                   	nop
			}
		}
	}
	//cprintf("\nAFTER INSERT with MERGE:\n=====================\n");
	//print_mem_block_lists();
}
f0133212:	90                   	nop
f0133213:	c9                   	leave  
f0133214:	c3                   	ret    
f0133215:	66 90                	xchg   %ax,%ax
f0133217:	90                   	nop

f0133218 <__udivdi3>:
f0133218:	55                   	push   %ebp
f0133219:	57                   	push   %edi
f013321a:	56                   	push   %esi
f013321b:	53                   	push   %ebx
f013321c:	83 ec 1c             	sub    $0x1c,%esp
f013321f:	8b 5c 24 30          	mov    0x30(%esp),%ebx
f0133223:	8b 4c 24 34          	mov    0x34(%esp),%ecx
f0133227:	8b 7c 24 38          	mov    0x38(%esp),%edi
f013322b:	89 5c 24 08          	mov    %ebx,0x8(%esp)
f013322f:	89 ca                	mov    %ecx,%edx
f0133231:	89 f8                	mov    %edi,%eax
f0133233:	8b 74 24 3c          	mov    0x3c(%esp),%esi
f0133237:	85 f6                	test   %esi,%esi
f0133239:	75 2d                	jne    f0133268 <__udivdi3+0x50>
f013323b:	39 cf                	cmp    %ecx,%edi
f013323d:	77 65                	ja     f01332a4 <__udivdi3+0x8c>
f013323f:	89 fd                	mov    %edi,%ebp
f0133241:	85 ff                	test   %edi,%edi
f0133243:	75 0b                	jne    f0133250 <__udivdi3+0x38>
f0133245:	b8 01 00 00 00       	mov    $0x1,%eax
f013324a:	31 d2                	xor    %edx,%edx
f013324c:	f7 f7                	div    %edi
f013324e:	89 c5                	mov    %eax,%ebp
f0133250:	31 d2                	xor    %edx,%edx
f0133252:	89 c8                	mov    %ecx,%eax
f0133254:	f7 f5                	div    %ebp
f0133256:	89 c1                	mov    %eax,%ecx
f0133258:	89 d8                	mov    %ebx,%eax
f013325a:	f7 f5                	div    %ebp
f013325c:	89 cf                	mov    %ecx,%edi
f013325e:	89 fa                	mov    %edi,%edx
f0133260:	83 c4 1c             	add    $0x1c,%esp
f0133263:	5b                   	pop    %ebx
f0133264:	5e                   	pop    %esi
f0133265:	5f                   	pop    %edi
f0133266:	5d                   	pop    %ebp
f0133267:	c3                   	ret    
f0133268:	39 ce                	cmp    %ecx,%esi
f013326a:	77 28                	ja     f0133294 <__udivdi3+0x7c>
f013326c:	0f bd fe             	bsr    %esi,%edi
f013326f:	83 f7 1f             	xor    $0x1f,%edi
f0133272:	75 40                	jne    f01332b4 <__udivdi3+0x9c>
f0133274:	39 ce                	cmp    %ecx,%esi
f0133276:	72 0a                	jb     f0133282 <__udivdi3+0x6a>
f0133278:	3b 44 24 08          	cmp    0x8(%esp),%eax
f013327c:	0f 87 9e 00 00 00    	ja     f0133320 <__udivdi3+0x108>
f0133282:	b8 01 00 00 00       	mov    $0x1,%eax
f0133287:	89 fa                	mov    %edi,%edx
f0133289:	83 c4 1c             	add    $0x1c,%esp
f013328c:	5b                   	pop    %ebx
f013328d:	5e                   	pop    %esi
f013328e:	5f                   	pop    %edi
f013328f:	5d                   	pop    %ebp
f0133290:	c3                   	ret    
f0133291:	8d 76 00             	lea    0x0(%esi),%esi
f0133294:	31 ff                	xor    %edi,%edi
f0133296:	31 c0                	xor    %eax,%eax
f0133298:	89 fa                	mov    %edi,%edx
f013329a:	83 c4 1c             	add    $0x1c,%esp
f013329d:	5b                   	pop    %ebx
f013329e:	5e                   	pop    %esi
f013329f:	5f                   	pop    %edi
f01332a0:	5d                   	pop    %ebp
f01332a1:	c3                   	ret    
f01332a2:	66 90                	xchg   %ax,%ax
f01332a4:	89 d8                	mov    %ebx,%eax
f01332a6:	f7 f7                	div    %edi
f01332a8:	31 ff                	xor    %edi,%edi
f01332aa:	89 fa                	mov    %edi,%edx
f01332ac:	83 c4 1c             	add    $0x1c,%esp
f01332af:	5b                   	pop    %ebx
f01332b0:	5e                   	pop    %esi
f01332b1:	5f                   	pop    %edi
f01332b2:	5d                   	pop    %ebp
f01332b3:	c3                   	ret    
f01332b4:	bd 20 00 00 00       	mov    $0x20,%ebp
f01332b9:	89 eb                	mov    %ebp,%ebx
f01332bb:	29 fb                	sub    %edi,%ebx
f01332bd:	89 f9                	mov    %edi,%ecx
f01332bf:	d3 e6                	shl    %cl,%esi
f01332c1:	89 c5                	mov    %eax,%ebp
f01332c3:	88 d9                	mov    %bl,%cl
f01332c5:	d3 ed                	shr    %cl,%ebp
f01332c7:	89 e9                	mov    %ebp,%ecx
f01332c9:	09 f1                	or     %esi,%ecx
f01332cb:	89 4c 24 0c          	mov    %ecx,0xc(%esp)
f01332cf:	89 f9                	mov    %edi,%ecx
f01332d1:	d3 e0                	shl    %cl,%eax
f01332d3:	89 c5                	mov    %eax,%ebp
f01332d5:	89 d6                	mov    %edx,%esi
f01332d7:	88 d9                	mov    %bl,%cl
f01332d9:	d3 ee                	shr    %cl,%esi
f01332db:	89 f9                	mov    %edi,%ecx
f01332dd:	d3 e2                	shl    %cl,%edx
f01332df:	8b 44 24 08          	mov    0x8(%esp),%eax
f01332e3:	88 d9                	mov    %bl,%cl
f01332e5:	d3 e8                	shr    %cl,%eax
f01332e7:	09 c2                	or     %eax,%edx
f01332e9:	89 d0                	mov    %edx,%eax
f01332eb:	89 f2                	mov    %esi,%edx
f01332ed:	f7 74 24 0c          	divl   0xc(%esp)
f01332f1:	89 d6                	mov    %edx,%esi
f01332f3:	89 c3                	mov    %eax,%ebx
f01332f5:	f7 e5                	mul    %ebp
f01332f7:	39 d6                	cmp    %edx,%esi
f01332f9:	72 19                	jb     f0133314 <__udivdi3+0xfc>
f01332fb:	74 0b                	je     f0133308 <__udivdi3+0xf0>
f01332fd:	89 d8                	mov    %ebx,%eax
f01332ff:	31 ff                	xor    %edi,%edi
f0133301:	e9 58 ff ff ff       	jmp    f013325e <__udivdi3+0x46>
f0133306:	66 90                	xchg   %ax,%ax
f0133308:	8b 54 24 08          	mov    0x8(%esp),%edx
f013330c:	89 f9                	mov    %edi,%ecx
f013330e:	d3 e2                	shl    %cl,%edx
f0133310:	39 c2                	cmp    %eax,%edx
f0133312:	73 e9                	jae    f01332fd <__udivdi3+0xe5>
f0133314:	8d 43 ff             	lea    -0x1(%ebx),%eax
f0133317:	31 ff                	xor    %edi,%edi
f0133319:	e9 40 ff ff ff       	jmp    f013325e <__udivdi3+0x46>
f013331e:	66 90                	xchg   %ax,%ax
f0133320:	31 c0                	xor    %eax,%eax
f0133322:	e9 37 ff ff ff       	jmp    f013325e <__udivdi3+0x46>
f0133327:	90                   	nop

f0133328 <__umoddi3>:
f0133328:	55                   	push   %ebp
f0133329:	57                   	push   %edi
f013332a:	56                   	push   %esi
f013332b:	53                   	push   %ebx
f013332c:	83 ec 1c             	sub    $0x1c,%esp
f013332f:	8b 4c 24 30          	mov    0x30(%esp),%ecx
f0133333:	8b 74 24 34          	mov    0x34(%esp),%esi
f0133337:	8b 7c 24 38          	mov    0x38(%esp),%edi
f013333b:	8b 44 24 3c          	mov    0x3c(%esp),%eax
f013333f:	89 44 24 0c          	mov    %eax,0xc(%esp)
f0133343:	89 4c 24 08          	mov    %ecx,0x8(%esp)
f0133347:	89 f3                	mov    %esi,%ebx
f0133349:	89 fa                	mov    %edi,%edx
f013334b:	89 4c 24 04          	mov    %ecx,0x4(%esp)
f013334f:	89 34 24             	mov    %esi,(%esp)
f0133352:	85 c0                	test   %eax,%eax
f0133354:	75 1a                	jne    f0133370 <__umoddi3+0x48>
f0133356:	39 f7                	cmp    %esi,%edi
f0133358:	0f 86 a2 00 00 00    	jbe    f0133400 <__umoddi3+0xd8>
f013335e:	89 c8                	mov    %ecx,%eax
f0133360:	89 f2                	mov    %esi,%edx
f0133362:	f7 f7                	div    %edi
f0133364:	89 d0                	mov    %edx,%eax
f0133366:	31 d2                	xor    %edx,%edx
f0133368:	83 c4 1c             	add    $0x1c,%esp
f013336b:	5b                   	pop    %ebx
f013336c:	5e                   	pop    %esi
f013336d:	5f                   	pop    %edi
f013336e:	5d                   	pop    %ebp
f013336f:	c3                   	ret    
f0133370:	39 f0                	cmp    %esi,%eax
f0133372:	0f 87 ac 00 00 00    	ja     f0133424 <__umoddi3+0xfc>
f0133378:	0f bd e8             	bsr    %eax,%ebp
f013337b:	83 f5 1f             	xor    $0x1f,%ebp
f013337e:	0f 84 ac 00 00 00    	je     f0133430 <__umoddi3+0x108>
f0133384:	bf 20 00 00 00       	mov    $0x20,%edi
f0133389:	29 ef                	sub    %ebp,%edi
f013338b:	89 fe                	mov    %edi,%esi
f013338d:	89 7c 24 0c          	mov    %edi,0xc(%esp)
f0133391:	89 e9                	mov    %ebp,%ecx
f0133393:	d3 e0                	shl    %cl,%eax
f0133395:	89 d7                	mov    %edx,%edi
f0133397:	89 f1                	mov    %esi,%ecx
f0133399:	d3 ef                	shr    %cl,%edi
f013339b:	09 c7                	or     %eax,%edi
f013339d:	89 e9                	mov    %ebp,%ecx
f013339f:	d3 e2                	shl    %cl,%edx
f01333a1:	89 14 24             	mov    %edx,(%esp)
f01333a4:	89 d8                	mov    %ebx,%eax
f01333a6:	d3 e0                	shl    %cl,%eax
f01333a8:	89 c2                	mov    %eax,%edx
f01333aa:	8b 44 24 08          	mov    0x8(%esp),%eax
f01333ae:	d3 e0                	shl    %cl,%eax
f01333b0:	89 44 24 04          	mov    %eax,0x4(%esp)
f01333b4:	8b 44 24 08          	mov    0x8(%esp),%eax
f01333b8:	89 f1                	mov    %esi,%ecx
f01333ba:	d3 e8                	shr    %cl,%eax
f01333bc:	09 d0                	or     %edx,%eax
f01333be:	d3 eb                	shr    %cl,%ebx
f01333c0:	89 da                	mov    %ebx,%edx
f01333c2:	f7 f7                	div    %edi
f01333c4:	89 d3                	mov    %edx,%ebx
f01333c6:	f7 24 24             	mull   (%esp)
f01333c9:	89 c6                	mov    %eax,%esi
f01333cb:	89 d1                	mov    %edx,%ecx
f01333cd:	39 d3                	cmp    %edx,%ebx
f01333cf:	0f 82 87 00 00 00    	jb     f013345c <__umoddi3+0x134>
f01333d5:	0f 84 91 00 00 00    	je     f013346c <__umoddi3+0x144>
f01333db:	8b 54 24 04          	mov    0x4(%esp),%edx
f01333df:	29 f2                	sub    %esi,%edx
f01333e1:	19 cb                	sbb    %ecx,%ebx
f01333e3:	89 d8                	mov    %ebx,%eax
f01333e5:	8a 4c 24 0c          	mov    0xc(%esp),%cl
f01333e9:	d3 e0                	shl    %cl,%eax
f01333eb:	89 e9                	mov    %ebp,%ecx
f01333ed:	d3 ea                	shr    %cl,%edx
f01333ef:	09 d0                	or     %edx,%eax
f01333f1:	89 e9                	mov    %ebp,%ecx
f01333f3:	d3 eb                	shr    %cl,%ebx
f01333f5:	89 da                	mov    %ebx,%edx
f01333f7:	83 c4 1c             	add    $0x1c,%esp
f01333fa:	5b                   	pop    %ebx
f01333fb:	5e                   	pop    %esi
f01333fc:	5f                   	pop    %edi
f01333fd:	5d                   	pop    %ebp
f01333fe:	c3                   	ret    
f01333ff:	90                   	nop
f0133400:	89 fd                	mov    %edi,%ebp
f0133402:	85 ff                	test   %edi,%edi
f0133404:	75 0b                	jne    f0133411 <__umoddi3+0xe9>
f0133406:	b8 01 00 00 00       	mov    $0x1,%eax
f013340b:	31 d2                	xor    %edx,%edx
f013340d:	f7 f7                	div    %edi
f013340f:	89 c5                	mov    %eax,%ebp
f0133411:	89 f0                	mov    %esi,%eax
f0133413:	31 d2                	xor    %edx,%edx
f0133415:	f7 f5                	div    %ebp
f0133417:	89 c8                	mov    %ecx,%eax
f0133419:	f7 f5                	div    %ebp
f013341b:	89 d0                	mov    %edx,%eax
f013341d:	e9 44 ff ff ff       	jmp    f0133366 <__umoddi3+0x3e>
f0133422:	66 90                	xchg   %ax,%ax
f0133424:	89 c8                	mov    %ecx,%eax
f0133426:	89 f2                	mov    %esi,%edx
f0133428:	83 c4 1c             	add    $0x1c,%esp
f013342b:	5b                   	pop    %ebx
f013342c:	5e                   	pop    %esi
f013342d:	5f                   	pop    %edi
f013342e:	5d                   	pop    %ebp
f013342f:	c3                   	ret    
f0133430:	3b 04 24             	cmp    (%esp),%eax
f0133433:	72 06                	jb     f013343b <__umoddi3+0x113>
f0133435:	3b 7c 24 04          	cmp    0x4(%esp),%edi
f0133439:	77 0f                	ja     f013344a <__umoddi3+0x122>
f013343b:	89 f2                	mov    %esi,%edx
f013343d:	29 f9                	sub    %edi,%ecx
f013343f:	1b 54 24 0c          	sbb    0xc(%esp),%edx
f0133443:	89 14 24             	mov    %edx,(%esp)
f0133446:	89 4c 24 04          	mov    %ecx,0x4(%esp)
f013344a:	8b 44 24 04          	mov    0x4(%esp),%eax
f013344e:	8b 14 24             	mov    (%esp),%edx
f0133451:	83 c4 1c             	add    $0x1c,%esp
f0133454:	5b                   	pop    %ebx
f0133455:	5e                   	pop    %esi
f0133456:	5f                   	pop    %edi
f0133457:	5d                   	pop    %ebp
f0133458:	c3                   	ret    
f0133459:	8d 76 00             	lea    0x0(%esi),%esi
f013345c:	2b 04 24             	sub    (%esp),%eax
f013345f:	19 fa                	sbb    %edi,%edx
f0133461:	89 d1                	mov    %edx,%ecx
f0133463:	89 c6                	mov    %eax,%esi
f0133465:	e9 71 ff ff ff       	jmp    f01333db <__umoddi3+0xb3>
f013346a:	66 90                	xchg   %ax,%ax
f013346c:	39 44 24 04          	cmp    %eax,0x4(%esp)
f0133470:	72 ea                	jb     f013345c <__umoddi3+0x134>
f0133472:	89 d9                	mov    %ebx,%ecx
f0133474:	e9 62 ff ff ff       	jmp    f01333db <__umoddi3+0xb3>
