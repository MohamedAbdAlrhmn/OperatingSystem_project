
obj/kern/kernel:     file format elf32-i386


Disassembly of section .text:

f0100000 <start_of_kernel-0xc>:
.long MULTIBOOT_HEADER_FLAGS
.long CHECKSUM

.globl		start_of_kernel
start_of_kernel:
	movw	$0x1234,0x472			# warm boot
f0100000:	02 b0 ad 1b 03 00    	add    0x31bad(%eax),%dh
f0100006:	00 00                	add    %al,(%eax)
f0100008:	fb                   	sti    
f0100009:	4f                   	dec    %edi
f010000a:	52                   	push   %edx
f010000b:	e4                   	.byte 0xe4

f010000c <start_of_kernel>:
f010000c:	66 c7 05 72 04 00 00 	movw   $0x1234,0x472
f0100013:	34 12 

	# Establish our own GDT in place of the boot loader's temporary GDT.
	lgdt	RELOC(mygdtdesc)		# load descriptor table
f0100015:	0f 01 15 18 00 19 00 	lgdtl  0x190018

	# Immediately reload all segment registers (including CS!)
	# with segment selectors from the new GDT.
	movl	$DATA_SEL, %eax			# Data segment selector
f010001c:	b8 10 00 00 00       	mov    $0x10,%eax
	movw	%ax,%ds				# -> DS: Data Segment
f0100021:	8e d8                	mov    %eax,%ds
	movw	%ax,%es				# -> ES: Extra Segment
f0100023:	8e c0                	mov    %eax,%es
	movw	%ax,%ss				# -> SS: Stack Segment
f0100025:	8e d0                	mov    %eax,%ss
	ljmp	$CODE_SEL,$relocated		# reload CS by jumping
f0100027:	ea 2e 00 10 f0 08 00 	ljmp   $0x8,$0xf010002e

f010002e <relocated>:
relocated:

	# Clear the frame pointer register (EBP)
	# so that once we get into debugging C code,
	# stack backtraces will be terminated properly.
	movl	$0x0,%ebp			# nuke frame pointer
f010002e:	bd 00 00 00 00       	mov    $0x0,%ebp

        # Leave a few words on the stack for the user trap frame
	movl	$(ptr_stack_top-SIZEOF_STRUCT_TRAPFRAME),%esp
f0100033:	bc bc ff 18 f0       	mov    $0xf018ffbc,%esp

	# now to C code
	call	FOS_initialize
f0100038:	e8 22 00 00 00       	call   f010005f <FOS_initialize>

f010003d <spin>:

	# Should never get here, but in case we do, just spin.
spin:	jmp	spin
f010003d:	eb fe                	jmp    f010003d <spin>

f010003f <setKHeapPlacementStrategyFIRSTFIT>:
#define KHP_PLACE_BESTFIT 	0x2
#define KHP_PLACE_NEXTFIT 	0x3
#define KHP_PLACE_WORSTFIT 	0x4

static inline void setKHeapPlacementStrategyCONTALLOC(){_KHeapPlacementStrategy = KHP_PLACE_CONTALLOC;}
static inline void setKHeapPlacementStrategyFIRSTFIT(){_KHeapPlacementStrategy = KHP_PLACE_FIRSTFIT;}
f010003f:	55                   	push   %ebp
f0100040:	89 e5                	mov    %esp,%ebp
f0100042:	c7 05 98 0e 6c f0 01 	movl   $0x1,0xf06c0e98
f0100049:	00 00 00 
f010004c:	90                   	nop
f010004d:	5d                   	pop    %ebp
f010004e:	c3                   	ret    

f010004f <setUHeapPlacementStrategyFIRSTFIT>:

//***********************************
/*2015*/ //USER HEAP STRATEGIES
uint32 _UHeapPlacementStrategy;

static inline void setUHeapPlacementStrategyFIRSTFIT(){_UHeapPlacementStrategy = UHP_PLACE_FIRSTFIT;}
f010004f:	55                   	push   %ebp
f0100050:	89 e5                	mov    %esp,%ebp
f0100052:	c7 05 6c 0e 6c f0 01 	movl   $0x1,0xf06c0e6c
f0100059:	00 00 00 
f010005c:	90                   	nop
f010005d:	5d                   	pop    %ebp
f010005e:	c3                   	ret    

f010005f <FOS_initialize>:
void print_welcome_message();
//=======================================

//First ever function called in FOS kernel
void FOS_initialize()
{
f010005f:	55                   	push   %ebp
f0100060:	89 e5                	mov    %esp,%ebp
f0100062:	83 ec 08             	sub    $0x8,%esp
	extern char start_of_uninitialized_data_section[], end_of_kernel[];

	// Before doing anything else,
	// clear the uninitialized global data (BSS) section of our program, from start_of_uninitialized_data_section to end_of_kernel
	// This ensures that all static/global variables start with zero value.
	memset(start_of_uninitialized_data_section, 0, end_of_kernel - start_of_uninitialized_data_section);
f0100065:	ba fc 0f 6c f0       	mov    $0xf06c0ffc,%edx
f010006a:	b8 b0 7f 65 f0       	mov    $0xf0657fb0,%eax
f010006f:	29 c2                	sub    %eax,%edx
f0100071:	89 d0                	mov    %edx,%eax
f0100073:	83 ec 04             	sub    $0x4,%esp
f0100076:	50                   	push   %eax
f0100077:	6a 00                	push   $0x0
f0100079:	68 b0 7f 65 f0       	push   $0xf0657fb0
f010007e:	e8 96 08 03 00       	call   f0130919 <memset>
f0100083:	83 c4 10             	add    $0x10,%esp

	// Initialize the console.
	// Can't call cprintf until after we do this!
	console_initialize();
f0100086:	e8 ee 0a 00 00       	call   f0100b79 <console_initialize>

	//print welcome message
	print_welcome_message();
f010008b:	e8 9d 00 00 00       	call   f010012d <print_welcome_message>

	// Lab 2 memory management initialization functions
	detect_memory();
f0100090:	e8 f5 5f 00 00       	call   f010608a <detect_memory>
	initialize_kernel_VM();
f0100095:	e8 8e 5b 00 00       	call   f0105c28 <initialize_kernel_VM>
	initialize_paging();
f010009a:	e8 3c 63 00 00       	call   f01063db <initialize_paging>
	//	page_check();

	//Project initializations

	setPageReplacmentAlgorithmCLOCK();
f010009f:	e8 71 d4 00 00       	call   f010d515 <setPageReplacmentAlgorithmCLOCK>
	setUHeapPlacementStrategyFIRSTFIT();
f01000a4:	e8 a6 ff ff ff       	call   f010004f <setUHeapPlacementStrategyFIRSTFIT>
	setKHeapPlacementStrategyFIRSTFIT();
f01000a9:	e8 91 ff ff ff       	call   f010003f <setKHeapPlacementStrategyFIRSTFIT>
		test_initialize_dyn_block_system(freeFrames_before, freeDiskFrames_before, freeFrames_after, freeDiskFrames_after);
	}
	MAX_SHARES = (KERNEL_SHARES_ARR_INIT_SIZE) / sizeof(struct Share);
	MAX_SEMAPHORES = (KERNEL_SEMAPHORES_ARR_INIT_SIZE) / sizeof(struct Semaphore);
#endif
	create_shares_array(MAX_SHARES);
f01000ae:	83 ec 0c             	sub    $0xc,%esp
f01000b1:	6a 64                	push   $0x64
f01000b3:	e8 62 6e 00 00       	call   f0106f1a <create_shares_array>
f01000b8:	83 c4 10             	add    $0x10,%esp
	create_semaphores_array(MAX_SEMAPHORES);
f01000bb:	83 ec 0c             	sub    $0xc,%esp
f01000be:	6a 64                	push   $0x64
f01000c0:	e8 e3 d5 00 00       	call   f010d6a8 <create_semaphores_array>
f01000c5:	83 c4 10             	add    $0x10,%esp

	// Lab 3 user environment initialization functions
	env_init();
f01000c8:	e8 fc 93 00 00       	call   f01094c9 <env_init>
	idt_init();
f01000cd:	e8 ad a9 00 00       	call   f010aa7f <idt_init>

	enableBuffering(0);
f01000d2:	83 ec 0c             	sub    $0xc,%esp
f01000d5:	6a 00                	push   $0x0
f01000d7:	e8 46 d5 00 00       	call   f010d622 <enableBuffering>
f01000dc:	83 c4 10             	add    $0x10,%esp
	enableModifiedBuffer(0) ;
f01000df:	83 ec 0c             	sub    $0xc,%esp
f01000e2:	6a 00                	push   $0x0
f01000e4:	e8 21 d5 00 00       	call   f010d60a <enableModifiedBuffer>
f01000e9:	83 c4 10             	add    $0x10,%esp
	setModifiedBufferLength(1000);
f01000ec:	83 ec 0c             	sub    $0xc,%esp
f01000ef:	68 e8 03 00 00       	push   $0x3e8
f01000f4:	e8 41 d5 00 00       	call   f010d63a <setModifiedBufferLength>
f01000f9:	83 c4 10             	add    $0x10,%esp

	// Lab 4 multitasking initialization functions
	pic_init();
f01000fc:	e8 a1 59 00 00       	call   f0105aa2 <pic_init>
	sched_init() ;
f0100101:	e8 45 46 00 00       	call   f010474b <sched_init>
	//Project initializations

	// start the kernel command prompt.
	while (1==1)
	{
		cprintf("\nWelcome to the FOS kernel command prompt!\n");
f0100106:	83 ec 0c             	sub    $0xc,%esp
f0100109:	68 c0 29 13 f0       	push   $0xf01329c0
f010010e:	e8 1a 0b 00 00       	call   f0100c2d <cprintf>
f0100113:	83 c4 10             	add    $0x10,%esp
		cprintf("Type 'help' for a list of commands.\n");
f0100116:	83 ec 0c             	sub    $0xc,%esp
f0100119:	68 ec 29 13 f0       	push   $0xf01329ec
f010011e:	e8 0a 0b 00 00       	call   f0100c2d <cprintf>
f0100123:	83 c4 10             	add    $0x10,%esp
		run_command_prompt();
f0100126:	e8 28 0b 00 00       	call   f0100c53 <run_command_prompt>
	}
f010012b:	eb d9                	jmp    f0100106 <FOS_initialize+0xa7>

f010012d <print_welcome_message>:
}


void print_welcome_message()
{
f010012d:	55                   	push   %ebp
f010012e:	89 e5                	mov    %esp,%ebp
f0100130:	83 ec 08             	sub    $0x8,%esp
	cprintf("\n\n\n");
f0100133:	83 ec 0c             	sub    $0xc,%esp
f0100136:	68 11 2a 13 f0       	push   $0xf0132a11
f010013b:	e8 ed 0a 00 00       	call   f0100c2d <cprintf>
f0100140:	83 c4 10             	add    $0x10,%esp
	cprintf("\t\t!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n");
f0100143:	83 ec 0c             	sub    $0xc,%esp
f0100146:	68 18 2a 13 f0       	push   $0xf0132a18
f010014b:	e8 dd 0a 00 00       	call   f0100c2d <cprintf>
f0100150:	83 c4 10             	add    $0x10,%esp
	cprintf("\t\t!!                                                             !!\n");
f0100153:	83 ec 0c             	sub    $0xc,%esp
f0100156:	68 60 2a 13 f0       	push   $0xf0132a60
f010015b:	e8 cd 0a 00 00       	call   f0100c2d <cprintf>
f0100160:	83 c4 10             	add    $0x10,%esp
	cprintf("\t\t!!                   !! FCIS says HELLO !!                     !!\n");
f0100163:	83 ec 0c             	sub    $0xc,%esp
f0100166:	68 a8 2a 13 f0       	push   $0xf0132aa8
f010016b:	e8 bd 0a 00 00       	call   f0100c2d <cprintf>
f0100170:	83 c4 10             	add    $0x10,%esp
	cprintf("\t\t!!                                                             !!\n");
f0100173:	83 ec 0c             	sub    $0xc,%esp
f0100176:	68 60 2a 13 f0       	push   $0xf0132a60
f010017b:	e8 ad 0a 00 00       	call   f0100c2d <cprintf>
f0100180:	83 c4 10             	add    $0x10,%esp
	cprintf("\t\t!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n");
f0100183:	83 ec 0c             	sub    $0xc,%esp
f0100186:	68 18 2a 13 f0       	push   $0xf0132a18
f010018b:	e8 9d 0a 00 00       	call   f0100c2d <cprintf>
f0100190:	83 c4 10             	add    $0x10,%esp
	cprintf("\n\n\n\n");
f0100193:	83 ec 0c             	sub    $0xc,%esp
f0100196:	68 ed 2a 13 f0       	push   $0xf0132aed
f010019b:	e8 8d 0a 00 00       	call   f0100c2d <cprintf>
f01001a0:	83 c4 10             	add    $0x10,%esp
}
f01001a3:	90                   	nop
f01001a4:	c9                   	leave  
f01001a5:	c3                   	ret    

f01001a6 <_panic>:
/*
 * Panic is called on unresolvable fatal errors.
 * It prints "panic: mesg", exit the curenv and schedule the next environment.
 */
void _panic(const char *file, int line, const char *fmt,...)
{
f01001a6:	55                   	push   %ebp
f01001a7:	89 e5                	mov    %esp,%ebp
f01001a9:	83 ec 18             	sub    $0x18,%esp
	va_list ap;

	//if (panicstr)
	//	goto dead;
	panicstr = fmt;
f01001ac:	8b 45 10             	mov    0x10(%ebp),%eax
f01001af:	a3 c0 7f 65 f0       	mov    %eax,0xf0657fc0

	va_start(ap, fmt);
f01001b4:	8d 45 10             	lea    0x10(%ebp),%eax
f01001b7:	83 c0 04             	add    $0x4,%eax
f01001ba:	89 45 f4             	mov    %eax,-0xc(%ebp)
	cprintf("\nkernel panic at %s:%d: ", file, line);
f01001bd:	83 ec 04             	sub    $0x4,%esp
f01001c0:	ff 75 0c             	pushl  0xc(%ebp)
f01001c3:	ff 75 08             	pushl  0x8(%ebp)
f01001c6:	68 f2 2a 13 f0       	push   $0xf0132af2
f01001cb:	e8 5d 0a 00 00       	call   f0100c2d <cprintf>
f01001d0:	83 c4 10             	add    $0x10,%esp
	vcprintf(fmt, ap);
f01001d3:	8b 45 10             	mov    0x10(%ebp),%eax
f01001d6:	83 ec 08             	sub    $0x8,%esp
f01001d9:	ff 75 f4             	pushl  -0xc(%ebp)
f01001dc:	50                   	push   %eax
f01001dd:	e8 22 0a 00 00       	call   f0100c04 <vcprintf>
f01001e2:	83 c4 10             	add    $0x10,%esp
	cprintf("\n");
f01001e5:	83 ec 0c             	sub    $0xc,%esp
f01001e8:	68 0b 2b 13 f0       	push   $0xf0132b0b
f01001ed:	e8 3b 0a 00 00       	call   f0100c2d <cprintf>
f01001f2:	83 c4 10             	add    $0x10,%esp
	va_end(ap);

	dead:
	/* break into the fos scheduler */
	//2013: Check if the panic occur when running an environment
	if (curenv != NULL && curenv->env_status == ENV_RUNNABLE)
f01001f5:	a1 14 82 65 f0       	mov    0xf0658214,%eax
f01001fa:	85 c0                	test   %eax,%eax
f01001fc:	74 12                	je     f0100210 <_panic+0x6a>
f01001fe:	a1 14 82 65 f0       	mov    0xf0658214,%eax
f0100203:	8b 40 54             	mov    0x54(%eax),%eax
f0100206:	83 f8 02             	cmp    $0x2,%eax
f0100209:	75 05                	jne    f0100210 <_panic+0x6a>
	{
		//2015
		env_exit();
f010020b:	e8 9e 91 00 00       	call   f01093ae <env_exit>
		//env_run_cmd_prmpt() ;
	}

	//2015
	fos_scheduler();
f0100210:	e8 d6 43 00 00       	call   f01045eb <fos_scheduler>

f0100215 <_panic_all>:
/*
 * Panic is called on unresolvable fatal errors.
 * It prints "panic: mesg", exit all env's and then enters the kernel command prompt.
 */
void _panic_all(const char *file, int line, const char *fmt,...)
{
f0100215:	55                   	push   %ebp
f0100216:	89 e5                	mov    %esp,%ebp
f0100218:	83 ec 18             	sub    $0x18,%esp
	va_list ap;

	//if (panicstr)
	//	goto dead;
	panicstr = fmt;
f010021b:	8b 45 10             	mov    0x10(%ebp),%eax
f010021e:	a3 c0 7f 65 f0       	mov    %eax,0xf0657fc0

	va_start(ap, fmt);
f0100223:	8d 45 10             	lea    0x10(%ebp),%eax
f0100226:	83 c0 04             	add    $0x4,%eax
f0100229:	89 45 f4             	mov    %eax,-0xc(%ebp)
	cprintf("\nkernel panic at %s:%d: ", file, line);
f010022c:	83 ec 04             	sub    $0x4,%esp
f010022f:	ff 75 0c             	pushl  0xc(%ebp)
f0100232:	ff 75 08             	pushl  0x8(%ebp)
f0100235:	68 f2 2a 13 f0       	push   $0xf0132af2
f010023a:	e8 ee 09 00 00       	call   f0100c2d <cprintf>
f010023f:	83 c4 10             	add    $0x10,%esp
	vcprintf(fmt, ap);
f0100242:	8b 45 10             	mov    0x10(%ebp),%eax
f0100245:	83 ec 08             	sub    $0x8,%esp
f0100248:	ff 75 f4             	pushl  -0xc(%ebp)
f010024b:	50                   	push   %eax
f010024c:	e8 b3 09 00 00       	call   f0100c04 <vcprintf>
f0100251:	83 c4 10             	add    $0x10,%esp
	cprintf("\n");
f0100254:	83 ec 0c             	sub    $0xc,%esp
f0100257:	68 0b 2b 13 f0       	push   $0xf0132b0b
f010025c:	e8 cc 09 00 00       	call   f0100c2d <cprintf>
f0100261:	83 c4 10             	add    $0x10,%esp

	dead:
	/* break into the fos scheduler */

	//exit all ready env's
	sched_exit_all_ready_envs();
f0100264:	e8 ec 50 00 00       	call   f0105355 <sched_exit_all_ready_envs>
	if (curenv != NULL)
f0100269:	a1 14 82 65 f0       	mov    0xf0658214,%eax
f010026e:	85 c0                	test   %eax,%eax
f0100270:	74 14                	je     f0100286 <_panic_all+0x71>
	{
		//cprintf("exit curenv...........\n");
		sched_exit_env(curenv->env_id);
f0100272:	a1 14 82 65 f0       	mov    0xf0658214,%eax
f0100277:	8b 40 4c             	mov    0x4c(%eax),%eax
f010027a:	83 ec 0c             	sub    $0xc,%esp
f010027d:	50                   	push   %eax
f010027e:	e8 92 4e 00 00       	call   f0105115 <sched_exit_env>
f0100283:	83 c4 10             	add    $0x10,%esp
		//env_run_cmd_prmpt() ;
	}

	fos_scheduler();
f0100286:	e8 60 43 00 00       	call   f01045eb <fos_scheduler>

f010028b <_panic_into_prompt>:
/*
 * Panic is called on unresolvable fatal errors.
 * It prints "panic: mesg", exit the curenv (if any) and break into the command prompt.
 */
void _panic_into_prompt(const char *file, int line, const char *fmt,...)
{
f010028b:	55                   	push   %ebp
f010028c:	89 e5                	mov    %esp,%ebp
f010028e:	83 ec 18             	sub    $0x18,%esp
	va_list ap;

	//if (panicstr)
	//	goto dead;
	panicstr = fmt;
f0100291:	8b 45 10             	mov    0x10(%ebp),%eax
f0100294:	a3 c0 7f 65 f0       	mov    %eax,0xf0657fc0

	va_start(ap, fmt);
f0100299:	8d 45 10             	lea    0x10(%ebp),%eax
f010029c:	83 c0 04             	add    $0x4,%eax
f010029f:	89 45 f4             	mov    %eax,-0xc(%ebp)
	cprintf("\nkernel panic at %s:%d: ", file, line);
f01002a2:	83 ec 04             	sub    $0x4,%esp
f01002a5:	ff 75 0c             	pushl  0xc(%ebp)
f01002a8:	ff 75 08             	pushl  0x8(%ebp)
f01002ab:	68 f2 2a 13 f0       	push   $0xf0132af2
f01002b0:	e8 78 09 00 00       	call   f0100c2d <cprintf>
f01002b5:	83 c4 10             	add    $0x10,%esp
	vcprintf(fmt, ap);
f01002b8:	8b 45 10             	mov    0x10(%ebp),%eax
f01002bb:	83 ec 08             	sub    $0x8,%esp
f01002be:	ff 75 f4             	pushl  -0xc(%ebp)
f01002c1:	50                   	push   %eax
f01002c2:	e8 3d 09 00 00       	call   f0100c04 <vcprintf>
f01002c7:	83 c4 10             	add    $0x10,%esp
	cprintf("\n");
f01002ca:	83 ec 0c             	sub    $0xc,%esp
f01002cd:	68 0b 2b 13 f0       	push   $0xf0132b0b
f01002d2:	e8 56 09 00 00       	call   f0100c2d <cprintf>
f01002d7:	83 c4 10             	add    $0x10,%esp
	va_end(ap);

	dead:
	/* break into the fos scheduler */
	//2013: Check if the panic occur when running an environment
	if (curenv != NULL && curenv->env_status == ENV_RUNNABLE)
f01002da:	a1 14 82 65 f0       	mov    0xf0658214,%eax
f01002df:	85 c0                	test   %eax,%eax
f01002e1:	74 28                	je     f010030b <_panic_into_prompt+0x80>
f01002e3:	a1 14 82 65 f0       	mov    0xf0658214,%eax
f01002e8:	8b 40 54             	mov    0x54(%eax),%eax
f01002eb:	83 f8 02             	cmp    $0x2,%eax
f01002ee:	75 1b                	jne    f010030b <_panic_into_prompt+0x80>
	{
		sched_insert_exit(curenv);
f01002f0:	a1 14 82 65 f0       	mov    0xf0658214,%eax
f01002f5:	83 ec 0c             	sub    $0xc,%esp
f01002f8:	50                   	push   %eax
f01002f9:	e8 c7 46 00 00       	call   f01049c5 <sched_insert_exit>
f01002fe:	83 c4 10             	add    $0x10,%esp
		curenv = NULL;
f0100301:	c7 05 14 82 65 f0 00 	movl   $0x0,0xf0658214
f0100308:	00 00 00 
	}

	lcr3(phys_page_directory);
f010030b:	a1 e8 0e 6c f0       	mov    0xf06c0ee8,%eax
f0100310:	89 45 f0             	mov    %eax,-0x10(%ebp)
}

static __inline void
lcr3(uint32 val)
{
	__asm __volatile("movl %0,%%cr3" : : "r" (val));
f0100313:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0100316:	0f 22 d8             	mov    %eax,%cr3

	scheduler_status = SCH_STOPPED;
f0100319:	c7 05 94 0e 6c f0 00 	movl   $0x0,0xf06c0e94
f0100320:	00 00 00 
	while (1)
		run_command_prompt(NULL);
f0100323:	83 ec 0c             	sub    $0xc,%esp
f0100326:	6a 00                	push   $0x0
f0100328:	e8 26 09 00 00       	call   f0100c53 <run_command_prompt>
f010032d:	83 c4 10             	add    $0x10,%esp
f0100330:	eb f1                	jmp    f0100323 <_panic_into_prompt+0x98>

f0100332 <_warn>:
}

/* like panic, but don't enters the kernel command prompt*/
void _warn(const char *file, int line, const char *fmt,...)
{
f0100332:	55                   	push   %ebp
f0100333:	89 e5                	mov    %esp,%ebp
f0100335:	83 ec 18             	sub    $0x18,%esp
	va_list ap;

	va_start(ap, fmt);
f0100338:	8d 45 10             	lea    0x10(%ebp),%eax
f010033b:	83 c0 04             	add    $0x4,%eax
f010033e:	89 45 f4             	mov    %eax,-0xc(%ebp)
	cprintf("\nkernel warning at %s:%d: ", file, line);
f0100341:	83 ec 04             	sub    $0x4,%esp
f0100344:	ff 75 0c             	pushl  0xc(%ebp)
f0100347:	ff 75 08             	pushl  0x8(%ebp)
f010034a:	68 0d 2b 13 f0       	push   $0xf0132b0d
f010034f:	e8 d9 08 00 00       	call   f0100c2d <cprintf>
f0100354:	83 c4 10             	add    $0x10,%esp
	vcprintf(fmt, ap);
f0100357:	8b 45 10             	mov    0x10(%ebp),%eax
f010035a:	83 ec 08             	sub    $0x8,%esp
f010035d:	ff 75 f4             	pushl  -0xc(%ebp)
f0100360:	50                   	push   %eax
f0100361:	e8 9e 08 00 00       	call   f0100c04 <vcprintf>
f0100366:	83 c4 10             	add    $0x10,%esp
	cprintf("\n");
f0100369:	83 ec 0c             	sub    $0xc,%esp
f010036c:	68 0b 2b 13 f0       	push   $0xf0132b0b
f0100371:	e8 b7 08 00 00       	call   f0100c2d <cprintf>
f0100376:	83 c4 10             	add    $0x10,%esp
	va_end(ap);
}
f0100379:	90                   	nop
f010037a:	c9                   	leave  
f010037b:	c3                   	ret    

f010037c <serial_proc_data>:

static bool serial_exists;

int
serial_proc_data(void)
{
f010037c:	55                   	push   %ebp
f010037d:	89 e5                	mov    %esp,%ebp
f010037f:	83 ec 10             	sub    $0x10,%esp
f0100382:	c7 45 f8 fd 03 00 00 	movl   $0x3fd,-0x8(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f0100389:	8b 45 f8             	mov    -0x8(%ebp),%eax
f010038c:	89 c2                	mov    %eax,%edx
f010038e:	ec                   	in     (%dx),%al
f010038f:	88 45 f7             	mov    %al,-0x9(%ebp)
	return data;
f0100392:	8a 45 f7             	mov    -0x9(%ebp),%al
	if (!(inb(COM1+COM_LSR) & COM_LSR_DATA))
f0100395:	0f b6 c0             	movzbl %al,%eax
f0100398:	83 e0 01             	and    $0x1,%eax
f010039b:	85 c0                	test   %eax,%eax
f010039d:	75 07                	jne    f01003a6 <serial_proc_data+0x2a>
		return -1;
f010039f:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
f01003a4:	eb 16                	jmp    f01003bc <serial_proc_data+0x40>
f01003a6:	c7 45 fc f8 03 00 00 	movl   $0x3f8,-0x4(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f01003ad:	8b 45 fc             	mov    -0x4(%ebp),%eax
f01003b0:	89 c2                	mov    %eax,%edx
f01003b2:	ec                   	in     (%dx),%al
f01003b3:	88 45 f6             	mov    %al,-0xa(%ebp)
	return data;
f01003b6:	8a 45 f6             	mov    -0xa(%ebp),%al
	return inb(COM1+COM_RX);
f01003b9:	0f b6 c0             	movzbl %al,%eax
}
f01003bc:	c9                   	leave  
f01003bd:	c3                   	ret    

f01003be <serial_intr>:

void
serial_intr(void)
{
f01003be:	55                   	push   %ebp
f01003bf:	89 e5                	mov    %esp,%ebp
f01003c1:	83 ec 08             	sub    $0x8,%esp
	if (serial_exists)
f01003c4:	a1 e0 7f 65 f0       	mov    0xf0657fe0,%eax
f01003c9:	85 c0                	test   %eax,%eax
f01003cb:	74 10                	je     f01003dd <serial_intr+0x1f>
		cons_intr(serial_proc_data);
f01003cd:	83 ec 0c             	sub    $0xc,%esp
f01003d0:	68 7c 03 10 f0       	push   $0xf010037c
f01003d5:	e8 e4 05 00 00       	call   f01009be <cons_intr>
f01003da:	83 c4 10             	add    $0x10,%esp
}
f01003dd:	90                   	nop
f01003de:	c9                   	leave  
f01003df:	c3                   	ret    

f01003e0 <serial_init>:

void
serial_init(void)
{
f01003e0:	55                   	push   %ebp
f01003e1:	89 e5                	mov    %esp,%ebp
f01003e3:	83 ec 40             	sub    $0x40,%esp
f01003e6:	c7 45 fc fa 03 00 00 	movl   $0x3fa,-0x4(%ebp)
f01003ed:	c6 45 ce 00          	movb   $0x0,-0x32(%ebp)
}

static __inline void
outb(int port, uint8 data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
f01003f1:	8a 45 ce             	mov    -0x32(%ebp),%al
f01003f4:	8b 55 fc             	mov    -0x4(%ebp),%edx
f01003f7:	ee                   	out    %al,(%dx)
f01003f8:	c7 45 f8 fb 03 00 00 	movl   $0x3fb,-0x8(%ebp)
f01003ff:	c6 45 cf 80          	movb   $0x80,-0x31(%ebp)
f0100403:	8a 45 cf             	mov    -0x31(%ebp),%al
f0100406:	8b 55 f8             	mov    -0x8(%ebp),%edx
f0100409:	ee                   	out    %al,(%dx)
f010040a:	c7 45 f4 f8 03 00 00 	movl   $0x3f8,-0xc(%ebp)
f0100411:	c6 45 d0 0c          	movb   $0xc,-0x30(%ebp)
f0100415:	8a 45 d0             	mov    -0x30(%ebp),%al
f0100418:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010041b:	ee                   	out    %al,(%dx)
f010041c:	c7 45 f0 f9 03 00 00 	movl   $0x3f9,-0x10(%ebp)
f0100423:	c6 45 d1 00          	movb   $0x0,-0x2f(%ebp)
f0100427:	8a 45 d1             	mov    -0x2f(%ebp),%al
f010042a:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010042d:	ee                   	out    %al,(%dx)
f010042e:	c7 45 ec fb 03 00 00 	movl   $0x3fb,-0x14(%ebp)
f0100435:	c6 45 d2 03          	movb   $0x3,-0x2e(%ebp)
f0100439:	8a 45 d2             	mov    -0x2e(%ebp),%al
f010043c:	8b 55 ec             	mov    -0x14(%ebp),%edx
f010043f:	ee                   	out    %al,(%dx)
f0100440:	c7 45 e8 fc 03 00 00 	movl   $0x3fc,-0x18(%ebp)
f0100447:	c6 45 d3 00          	movb   $0x0,-0x2d(%ebp)
f010044b:	8a 45 d3             	mov    -0x2d(%ebp),%al
f010044e:	8b 55 e8             	mov    -0x18(%ebp),%edx
f0100451:	ee                   	out    %al,(%dx)
f0100452:	c7 45 e4 f9 03 00 00 	movl   $0x3f9,-0x1c(%ebp)
f0100459:	c6 45 d4 01          	movb   $0x1,-0x2c(%ebp)
f010045d:	8a 45 d4             	mov    -0x2c(%ebp),%al
f0100460:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f0100463:	ee                   	out    %al,(%dx)
f0100464:	c7 45 e0 fd 03 00 00 	movl   $0x3fd,-0x20(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f010046b:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010046e:	89 c2                	mov    %eax,%edx
f0100470:	ec                   	in     (%dx),%al
f0100471:	88 45 d5             	mov    %al,-0x2b(%ebp)
	return data;
f0100474:	8a 45 d5             	mov    -0x2b(%ebp),%al
	// Enable rcv interrupts
	outb(COM1+COM_IER, COM_IER_RDI);

	// Clear any preexisting overrun indications and interrupts
	// Serial port doesn't exist if COM_LSR returns 0xFF
	serial_exists = (inb(COM1+COM_LSR) != 0xFF);
f0100477:	3c ff                	cmp    $0xff,%al
f0100479:	0f 95 c0             	setne  %al
f010047c:	0f b6 c0             	movzbl %al,%eax
f010047f:	a3 e0 7f 65 f0       	mov    %eax,0xf0657fe0
f0100484:	c7 45 dc fa 03 00 00 	movl   $0x3fa,-0x24(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f010048b:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010048e:	89 c2                	mov    %eax,%edx
f0100490:	ec                   	in     (%dx),%al
f0100491:	88 45 d6             	mov    %al,-0x2a(%ebp)
f0100494:	c7 45 d8 f8 03 00 00 	movl   $0x3f8,-0x28(%ebp)
f010049b:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010049e:	89 c2                	mov    %eax,%edx
f01004a0:	ec                   	in     (%dx),%al
f01004a1:	88 45 d7             	mov    %al,-0x29(%ebp)
	(void) inb(COM1+COM_IIR);
	(void) inb(COM1+COM_RX);

}
f01004a4:	90                   	nop
f01004a5:	c9                   	leave  
f01004a6:	c3                   	ret    

f01004a7 <delay>:
// page.

// Stupid I/O delay routine necessitated by historical PC design flaws
static void
delay(void)
{
f01004a7:	55                   	push   %ebp
f01004a8:	89 e5                	mov    %esp,%ebp
f01004aa:	83 ec 20             	sub    $0x20,%esp
f01004ad:	c7 45 fc 84 00 00 00 	movl   $0x84,-0x4(%ebp)
f01004b4:	8b 45 fc             	mov    -0x4(%ebp),%eax
f01004b7:	89 c2                	mov    %eax,%edx
f01004b9:	ec                   	in     (%dx),%al
f01004ba:	88 45 ec             	mov    %al,-0x14(%ebp)
f01004bd:	c7 45 f8 84 00 00 00 	movl   $0x84,-0x8(%ebp)
f01004c4:	8b 45 f8             	mov    -0x8(%ebp),%eax
f01004c7:	89 c2                	mov    %eax,%edx
f01004c9:	ec                   	in     (%dx),%al
f01004ca:	88 45 ed             	mov    %al,-0x13(%ebp)
f01004cd:	c7 45 f4 84 00 00 00 	movl   $0x84,-0xc(%ebp)
f01004d4:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01004d7:	89 c2                	mov    %eax,%edx
f01004d9:	ec                   	in     (%dx),%al
f01004da:	88 45 ee             	mov    %al,-0x12(%ebp)
f01004dd:	c7 45 f0 84 00 00 00 	movl   $0x84,-0x10(%ebp)
f01004e4:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01004e7:	89 c2                	mov    %eax,%edx
f01004e9:	ec                   	in     (%dx),%al
f01004ea:	88 45 ef             	mov    %al,-0x11(%ebp)
	inb(0x84);
	inb(0x84);
	inb(0x84);
	inb(0x84);
}
f01004ed:	90                   	nop
f01004ee:	c9                   	leave  
f01004ef:	c3                   	ret    

f01004f0 <lpt_putc>:

static void
lpt_putc(int c)
{
f01004f0:	55                   	push   %ebp
f01004f1:	89 e5                	mov    %esp,%ebp
f01004f3:	83 ec 20             	sub    $0x20,%esp
	int i;

	for (i = 0; !(inb(0x378+1) & 0x80) && i < 2800; i++) //12800
f01004f6:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
f01004fd:	eb 08                	jmp    f0100507 <lpt_putc+0x17>
		delay();
f01004ff:	e8 a3 ff ff ff       	call   f01004a7 <delay>
static void
lpt_putc(int c)
{
	int i;

	for (i = 0; !(inb(0x378+1) & 0x80) && i < 2800; i++) //12800
f0100504:	ff 45 fc             	incl   -0x4(%ebp)
f0100507:	c7 45 ec 79 03 00 00 	movl   $0x379,-0x14(%ebp)
f010050e:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0100511:	89 c2                	mov    %eax,%edx
f0100513:	ec                   	in     (%dx),%al
f0100514:	88 45 eb             	mov    %al,-0x15(%ebp)
	return data;
f0100517:	8a 45 eb             	mov    -0x15(%ebp),%al
f010051a:	84 c0                	test   %al,%al
f010051c:	78 09                	js     f0100527 <lpt_putc+0x37>
f010051e:	81 7d fc ef 0a 00 00 	cmpl   $0xaef,-0x4(%ebp)
f0100525:	7e d8                	jle    f01004ff <lpt_putc+0xf>
		delay();
	outb(0x378+0, c);
f0100527:	8b 45 08             	mov    0x8(%ebp),%eax
f010052a:	0f b6 c0             	movzbl %al,%eax
f010052d:	c7 45 f4 78 03 00 00 	movl   $0x378,-0xc(%ebp)
f0100534:	88 45 e8             	mov    %al,-0x18(%ebp)
}

static __inline void
outb(int port, uint8 data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
f0100537:	8a 45 e8             	mov    -0x18(%ebp),%al
f010053a:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010053d:	ee                   	out    %al,(%dx)
f010053e:	c7 45 f0 7a 03 00 00 	movl   $0x37a,-0x10(%ebp)
f0100545:	c6 45 e9 0d          	movb   $0xd,-0x17(%ebp)
f0100549:	8a 45 e9             	mov    -0x17(%ebp),%al
f010054c:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010054f:	ee                   	out    %al,(%dx)
f0100550:	c7 45 f8 7a 03 00 00 	movl   $0x37a,-0x8(%ebp)
f0100557:	c6 45 ea 08          	movb   $0x8,-0x16(%ebp)
f010055b:	8a 45 ea             	mov    -0x16(%ebp),%al
f010055e:	8b 55 f8             	mov    -0x8(%ebp),%edx
f0100561:	ee                   	out    %al,(%dx)
	outb(0x378+2, 0x08|0x04|0x01);
	outb(0x378+2, 0x08);
}
f0100562:	90                   	nop
f0100563:	c9                   	leave  
f0100564:	c3                   	ret    

f0100565 <cga_init>:
static uint16 *crt_buf;
static uint16 crt_pos;

void
cga_init(void)
{
f0100565:	55                   	push   %ebp
f0100566:	89 e5                	mov    %esp,%ebp
f0100568:	83 ec 20             	sub    $0x20,%esp
	volatile uint16 *cp;
	uint16 was;
	unsigned pos;

	cp = (uint16*) (KERNEL_BASE + CGA_BUF);
f010056b:	c7 45 fc 00 80 0b f0 	movl   $0xf00b8000,-0x4(%ebp)
	was = *cp;
f0100572:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0100575:	66 8b 00             	mov    (%eax),%ax
f0100578:	66 89 45 fa          	mov    %ax,-0x6(%ebp)
	*cp = (uint16) 0xA55A;
f010057c:	8b 45 fc             	mov    -0x4(%ebp),%eax
f010057f:	66 c7 00 5a a5       	movw   $0xa55a,(%eax)
	if (*cp != 0xA55A) {
f0100584:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0100587:	66 8b 00             	mov    (%eax),%ax
f010058a:	66 3d 5a a5          	cmp    $0xa55a,%ax
f010058e:	74 13                	je     f01005a3 <cga_init+0x3e>
		cp = (uint16*) (KERNEL_BASE + MONO_BUF);
f0100590:	c7 45 fc 00 00 0b f0 	movl   $0xf00b0000,-0x4(%ebp)
		addr_6845 = MONO_BASE;
f0100597:	c7 05 e4 7f 65 f0 b4 	movl   $0x3b4,0xf0657fe4
f010059e:	03 00 00 
f01005a1:	eb 14                	jmp    f01005b7 <cga_init+0x52>
	} else {
		*cp = was;
f01005a3:	8b 55 fc             	mov    -0x4(%ebp),%edx
f01005a6:	66 8b 45 fa          	mov    -0x6(%ebp),%ax
f01005aa:	66 89 02             	mov    %ax,(%edx)
		addr_6845 = CGA_BASE;
f01005ad:	c7 05 e4 7f 65 f0 d4 	movl   $0x3d4,0xf0657fe4
f01005b4:	03 00 00 
	}

	/* Extract cursor location */
	outb(addr_6845, 14);
f01005b7:	a1 e4 7f 65 f0       	mov    0xf0657fe4,%eax
f01005bc:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01005bf:	c6 45 e0 0e          	movb   $0xe,-0x20(%ebp)
f01005c3:	8a 45 e0             	mov    -0x20(%ebp),%al
f01005c6:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01005c9:	ee                   	out    %al,(%dx)
	pos = inb(addr_6845 + 1) << 8;
f01005ca:	a1 e4 7f 65 f0       	mov    0xf0657fe4,%eax
f01005cf:	40                   	inc    %eax
f01005d0:	89 45 ec             	mov    %eax,-0x14(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f01005d3:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01005d6:	89 c2                	mov    %eax,%edx
f01005d8:	ec                   	in     (%dx),%al
f01005d9:	88 45 e1             	mov    %al,-0x1f(%ebp)
	return data;
f01005dc:	8a 45 e1             	mov    -0x1f(%ebp),%al
f01005df:	0f b6 c0             	movzbl %al,%eax
f01005e2:	c1 e0 08             	shl    $0x8,%eax
f01005e5:	89 45 f0             	mov    %eax,-0x10(%ebp)
	outb(addr_6845, 15);
f01005e8:	a1 e4 7f 65 f0       	mov    0xf0657fe4,%eax
f01005ed:	89 45 e8             	mov    %eax,-0x18(%ebp)
f01005f0:	c6 45 e2 0f          	movb   $0xf,-0x1e(%ebp)
}

static __inline void
outb(int port, uint8 data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
f01005f4:	8a 45 e2             	mov    -0x1e(%ebp),%al
f01005f7:	8b 55 e8             	mov    -0x18(%ebp),%edx
f01005fa:	ee                   	out    %al,(%dx)
	pos |= inb(addr_6845 + 1);
f01005fb:	a1 e4 7f 65 f0       	mov    0xf0657fe4,%eax
f0100600:	40                   	inc    %eax
f0100601:	89 45 e4             	mov    %eax,-0x1c(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f0100604:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0100607:	89 c2                	mov    %eax,%edx
f0100609:	ec                   	in     (%dx),%al
f010060a:	88 45 e3             	mov    %al,-0x1d(%ebp)
	return data;
f010060d:	8a 45 e3             	mov    -0x1d(%ebp),%al
f0100610:	0f b6 c0             	movzbl %al,%eax
f0100613:	09 45 f0             	or     %eax,-0x10(%ebp)

	crt_buf = (uint16*) cp;
f0100616:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0100619:	a3 e8 7f 65 f0       	mov    %eax,0xf0657fe8
	crt_pos = pos;
f010061e:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0100621:	66 a3 ec 7f 65 f0    	mov    %ax,0xf0657fec
}
f0100627:	90                   	nop
f0100628:	c9                   	leave  
f0100629:	c3                   	ret    

f010062a <cga_putc>:



void
cga_putc(int c)
{
f010062a:	55                   	push   %ebp
f010062b:	89 e5                	mov    %esp,%ebp
f010062d:	53                   	push   %ebx
f010062e:	83 ec 24             	sub    $0x24,%esp
	// if no attribute given, then use black on white
	if (!(c & ~0xFF))
f0100631:	8b 45 08             	mov    0x8(%ebp),%eax
f0100634:	b0 00                	mov    $0x0,%al
f0100636:	85 c0                	test   %eax,%eax
f0100638:	75 07                	jne    f0100641 <cga_putc+0x17>
		c |= 0x0700;
f010063a:	81 4d 08 00 07 00 00 	orl    $0x700,0x8(%ebp)

	switch (c & 0xff) {
f0100641:	8b 45 08             	mov    0x8(%ebp),%eax
f0100644:	0f b6 c0             	movzbl %al,%eax
f0100647:	83 f8 09             	cmp    $0x9,%eax
f010064a:	0f 84 94 00 00 00    	je     f01006e4 <cga_putc+0xba>
f0100650:	83 f8 09             	cmp    $0x9,%eax
f0100653:	7f 0a                	jg     f010065f <cga_putc+0x35>
f0100655:	83 f8 08             	cmp    $0x8,%eax
f0100658:	74 14                	je     f010066e <cga_putc+0x44>
f010065a:	e9 c8 00 00 00       	jmp    f0100727 <cga_putc+0xfd>
f010065f:	83 f8 0a             	cmp    $0xa,%eax
f0100662:	74 49                	je     f01006ad <cga_putc+0x83>
f0100664:	83 f8 0d             	cmp    $0xd,%eax
f0100667:	74 53                	je     f01006bc <cga_putc+0x92>
f0100669:	e9 b9 00 00 00       	jmp    f0100727 <cga_putc+0xfd>
	case '\b':
		if (crt_pos > 0) {
f010066e:	66 a1 ec 7f 65 f0    	mov    0xf0657fec,%ax
f0100674:	66 85 c0             	test   %ax,%ax
f0100677:	0f 84 d0 00 00 00    	je     f010074d <cga_putc+0x123>
			crt_pos--;
f010067d:	66 a1 ec 7f 65 f0    	mov    0xf0657fec,%ax
f0100683:	48                   	dec    %eax
f0100684:	66 a3 ec 7f 65 f0    	mov    %ax,0xf0657fec
			crt_buf[crt_pos] = (c & ~0xff) | ' ';
f010068a:	8b 15 e8 7f 65 f0    	mov    0xf0657fe8,%edx
f0100690:	66 a1 ec 7f 65 f0    	mov    0xf0657fec,%ax
f0100696:	0f b7 c0             	movzwl %ax,%eax
f0100699:	01 c0                	add    %eax,%eax
f010069b:	01 c2                	add    %eax,%edx
f010069d:	8b 45 08             	mov    0x8(%ebp),%eax
f01006a0:	b0 00                	mov    $0x0,%al
f01006a2:	83 c8 20             	or     $0x20,%eax
f01006a5:	66 89 02             	mov    %ax,(%edx)
		}
		break;
f01006a8:	e9 a0 00 00 00       	jmp    f010074d <cga_putc+0x123>
	case '\n':
		crt_pos += CRT_COLS;
f01006ad:	66 a1 ec 7f 65 f0    	mov    0xf0657fec,%ax
f01006b3:	83 c0 50             	add    $0x50,%eax
f01006b6:	66 a3 ec 7f 65 f0    	mov    %ax,0xf0657fec
		/* fallthru */
	case '\r':
		crt_pos -= (crt_pos % CRT_COLS);
f01006bc:	66 8b 0d ec 7f 65 f0 	mov    0xf0657fec,%cx
f01006c3:	66 a1 ec 7f 65 f0    	mov    0xf0657fec,%ax
f01006c9:	bb 50 00 00 00       	mov    $0x50,%ebx
f01006ce:	ba 00 00 00 00       	mov    $0x0,%edx
f01006d3:	66 f7 f3             	div    %bx
f01006d6:	89 d0                	mov    %edx,%eax
f01006d8:	29 c1                	sub    %eax,%ecx
f01006da:	89 c8                	mov    %ecx,%eax
f01006dc:	66 a3 ec 7f 65 f0    	mov    %ax,0xf0657fec
		break;
f01006e2:	eb 6a                	jmp    f010074e <cga_putc+0x124>
	case '\t':
		cons_putc(' ');
f01006e4:	83 ec 0c             	sub    $0xc,%esp
f01006e7:	6a 20                	push   $0x20
f01006e9:	e8 69 04 00 00       	call   f0100b57 <cons_putc>
f01006ee:	83 c4 10             	add    $0x10,%esp
		cons_putc(' ');
f01006f1:	83 ec 0c             	sub    $0xc,%esp
f01006f4:	6a 20                	push   $0x20
f01006f6:	e8 5c 04 00 00       	call   f0100b57 <cons_putc>
f01006fb:	83 c4 10             	add    $0x10,%esp
		cons_putc(' ');
f01006fe:	83 ec 0c             	sub    $0xc,%esp
f0100701:	6a 20                	push   $0x20
f0100703:	e8 4f 04 00 00       	call   f0100b57 <cons_putc>
f0100708:	83 c4 10             	add    $0x10,%esp
		cons_putc(' ');
f010070b:	83 ec 0c             	sub    $0xc,%esp
f010070e:	6a 20                	push   $0x20
f0100710:	e8 42 04 00 00       	call   f0100b57 <cons_putc>
f0100715:	83 c4 10             	add    $0x10,%esp
		cons_putc(' ');
f0100718:	83 ec 0c             	sub    $0xc,%esp
f010071b:	6a 20                	push   $0x20
f010071d:	e8 35 04 00 00       	call   f0100b57 <cons_putc>
f0100722:	83 c4 10             	add    $0x10,%esp
		break;
f0100725:	eb 27                	jmp    f010074e <cga_putc+0x124>
	default:
		crt_buf[crt_pos++] = c;		/* write the character */
f0100727:	8b 0d e8 7f 65 f0    	mov    0xf0657fe8,%ecx
f010072d:	66 a1 ec 7f 65 f0    	mov    0xf0657fec,%ax
f0100733:	8d 50 01             	lea    0x1(%eax),%edx
f0100736:	66 89 15 ec 7f 65 f0 	mov    %dx,0xf0657fec
f010073d:	0f b7 c0             	movzwl %ax,%eax
f0100740:	01 c0                	add    %eax,%eax
f0100742:	8d 14 01             	lea    (%ecx,%eax,1),%edx
f0100745:	8b 45 08             	mov    0x8(%ebp),%eax
f0100748:	66 89 02             	mov    %ax,(%edx)
		break;
f010074b:	eb 01                	jmp    f010074e <cga_putc+0x124>
	case '\b':
		if (crt_pos > 0) {
			crt_pos--;
			crt_buf[crt_pos] = (c & ~0xff) | ' ';
		}
		break;
f010074d:	90                   	nop
		crt_buf[crt_pos++] = c;		/* write the character */
		break;
	}

	// What is the purpose of this?
	if (crt_pos >= CRT_SIZE) {
f010074e:	66 a1 ec 7f 65 f0    	mov    0xf0657fec,%ax
f0100754:	66 3d cf 07          	cmp    $0x7cf,%ax
f0100758:	76 58                	jbe    f01007b2 <cga_putc+0x188>
		int i;

		memcpy(crt_buf, crt_buf + CRT_COLS, (CRT_SIZE - CRT_COLS) * sizeof(uint16));
f010075a:	a1 e8 7f 65 f0       	mov    0xf0657fe8,%eax
f010075f:	8d 90 a0 00 00 00    	lea    0xa0(%eax),%edx
f0100765:	a1 e8 7f 65 f0       	mov    0xf0657fe8,%eax
f010076a:	83 ec 04             	sub    $0x4,%esp
f010076d:	68 00 0f 00 00       	push   $0xf00
f0100772:	52                   	push   %edx
f0100773:	50                   	push   %eax
f0100774:	e8 d0 01 03 00       	call   f0130949 <memcpy>
f0100779:	83 c4 10             	add    $0x10,%esp
		for (i = CRT_SIZE - CRT_COLS; i < CRT_SIZE; i++)
f010077c:	c7 45 f4 80 07 00 00 	movl   $0x780,-0xc(%ebp)
f0100783:	eb 15                	jmp    f010079a <cga_putc+0x170>
			crt_buf[i] = 0x0700 | ' ';
f0100785:	8b 15 e8 7f 65 f0    	mov    0xf0657fe8,%edx
f010078b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010078e:	01 c0                	add    %eax,%eax
f0100790:	01 d0                	add    %edx,%eax
f0100792:	66 c7 00 20 07       	movw   $0x720,(%eax)
	// What is the purpose of this?
	if (crt_pos >= CRT_SIZE) {
		int i;

		memcpy(crt_buf, crt_buf + CRT_COLS, (CRT_SIZE - CRT_COLS) * sizeof(uint16));
		for (i = CRT_SIZE - CRT_COLS; i < CRT_SIZE; i++)
f0100797:	ff 45 f4             	incl   -0xc(%ebp)
f010079a:	81 7d f4 cf 07 00 00 	cmpl   $0x7cf,-0xc(%ebp)
f01007a1:	7e e2                	jle    f0100785 <cga_putc+0x15b>
			crt_buf[i] = 0x0700 | ' ';
		crt_pos -= CRT_COLS;
f01007a3:	66 a1 ec 7f 65 f0    	mov    0xf0657fec,%ax
f01007a9:	83 e8 50             	sub    $0x50,%eax
f01007ac:	66 a3 ec 7f 65 f0    	mov    %ax,0xf0657fec
	}

	/* move that little blinky thing */
	outb(addr_6845, 14);
f01007b2:	a1 e4 7f 65 f0       	mov    0xf0657fe4,%eax
f01007b7:	89 45 f0             	mov    %eax,-0x10(%ebp)
f01007ba:	c6 45 e0 0e          	movb   $0xe,-0x20(%ebp)
}

static __inline void
outb(int port, uint8 data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
f01007be:	8a 45 e0             	mov    -0x20(%ebp),%al
f01007c1:	8b 55 f0             	mov    -0x10(%ebp),%edx
f01007c4:	ee                   	out    %al,(%dx)
	outb(addr_6845 + 1, crt_pos >> 8);
f01007c5:	66 a1 ec 7f 65 f0    	mov    0xf0657fec,%ax
f01007cb:	66 c1 e8 08          	shr    $0x8,%ax
f01007cf:	0f b6 c0             	movzbl %al,%eax
f01007d2:	8b 15 e4 7f 65 f0    	mov    0xf0657fe4,%edx
f01007d8:	42                   	inc    %edx
f01007d9:	89 55 ec             	mov    %edx,-0x14(%ebp)
f01007dc:	88 45 e1             	mov    %al,-0x1f(%ebp)
f01007df:	8a 45 e1             	mov    -0x1f(%ebp),%al
f01007e2:	8b 55 ec             	mov    -0x14(%ebp),%edx
f01007e5:	ee                   	out    %al,(%dx)
	outb(addr_6845, 15);
f01007e6:	a1 e4 7f 65 f0       	mov    0xf0657fe4,%eax
f01007eb:	89 45 e8             	mov    %eax,-0x18(%ebp)
f01007ee:	c6 45 e2 0f          	movb   $0xf,-0x1e(%ebp)
f01007f2:	8a 45 e2             	mov    -0x1e(%ebp),%al
f01007f5:	8b 55 e8             	mov    -0x18(%ebp),%edx
f01007f8:	ee                   	out    %al,(%dx)
	outb(addr_6845 + 1, crt_pos);
f01007f9:	66 a1 ec 7f 65 f0    	mov    0xf0657fec,%ax
f01007ff:	0f b6 c0             	movzbl %al,%eax
f0100802:	8b 15 e4 7f 65 f0    	mov    0xf0657fe4,%edx
f0100808:	42                   	inc    %edx
f0100809:	89 55 e4             	mov    %edx,-0x1c(%ebp)
f010080c:	88 45 e3             	mov    %al,-0x1d(%ebp)
f010080f:	8a 45 e3             	mov    -0x1d(%ebp),%al
f0100812:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f0100815:	ee                   	out    %al,(%dx)
}
f0100816:	90                   	nop
f0100817:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f010081a:	c9                   	leave  
f010081b:	c3                   	ret    

f010081c <kbd_proc_data>:
 * Get data from the keyboard.  If we finish a character, return it.  Else 0.
 * Return -1 if no data.
 */
static int
kbd_proc_data(void)
{
f010081c:	55                   	push   %ebp
f010081d:	89 e5                	mov    %esp,%ebp
f010081f:	83 ec 28             	sub    $0x28,%esp
f0100822:	c7 45 e4 64 00 00 00 	movl   $0x64,-0x1c(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f0100829:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010082c:	89 c2                	mov    %eax,%edx
f010082e:	ec                   	in     (%dx),%al
f010082f:	88 45 e3             	mov    %al,-0x1d(%ebp)
	return data;
f0100832:	8a 45 e3             	mov    -0x1d(%ebp),%al
	int c;
	uint8 data;
	static uint32 shift;

	if ((inb(KBSTATP) & KBS_DIB) == 0)
f0100835:	0f b6 c0             	movzbl %al,%eax
f0100838:	83 e0 01             	and    $0x1,%eax
f010083b:	85 c0                	test   %eax,%eax
f010083d:	75 0a                	jne    f0100849 <kbd_proc_data+0x2d>
		return -1;
f010083f:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
f0100844:	e9 54 01 00 00       	jmp    f010099d <kbd_proc_data+0x181>
f0100849:	c7 45 ec 60 00 00 00 	movl   $0x60,-0x14(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f0100850:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0100853:	89 c2                	mov    %eax,%edx
f0100855:	ec                   	in     (%dx),%al
f0100856:	88 45 e2             	mov    %al,-0x1e(%ebp)
	return data;
f0100859:	8a 45 e2             	mov    -0x1e(%ebp),%al

	data = inb(KBDATAP);
f010085c:	88 45 f3             	mov    %al,-0xd(%ebp)

	if (data == 0xE0) {
f010085f:	80 7d f3 e0          	cmpb   $0xe0,-0xd(%ebp)
f0100863:	75 17                	jne    f010087c <kbd_proc_data+0x60>
		// E0 escape character
		shift |= E0ESC;
f0100865:	a1 08 82 65 f0       	mov    0xf0658208,%eax
f010086a:	83 c8 40             	or     $0x40,%eax
f010086d:	a3 08 82 65 f0       	mov    %eax,0xf0658208
		return 0;
f0100872:	b8 00 00 00 00       	mov    $0x0,%eax
f0100877:	e9 21 01 00 00       	jmp    f010099d <kbd_proc_data+0x181>
	} else if (data & 0x80) {
f010087c:	8a 45 f3             	mov    -0xd(%ebp),%al
f010087f:	84 c0                	test   %al,%al
f0100881:	79 44                	jns    f01008c7 <kbd_proc_data+0xab>
		// Key released
		data = (shift & E0ESC ? data : data & 0x7F);
f0100883:	a1 08 82 65 f0       	mov    0xf0658208,%eax
f0100888:	83 e0 40             	and    $0x40,%eax
f010088b:	85 c0                	test   %eax,%eax
f010088d:	75 08                	jne    f0100897 <kbd_proc_data+0x7b>
f010088f:	8a 45 f3             	mov    -0xd(%ebp),%al
f0100892:	83 e0 7f             	and    $0x7f,%eax
f0100895:	eb 03                	jmp    f010089a <kbd_proc_data+0x7e>
f0100897:	8a 45 f3             	mov    -0xd(%ebp),%al
f010089a:	88 45 f3             	mov    %al,-0xd(%ebp)
		shift &= ~(shiftcode[data] | E0ESC);
f010089d:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
f01008a1:	8a 80 20 00 19 f0    	mov    -0xfe6ffe0(%eax),%al
f01008a7:	83 c8 40             	or     $0x40,%eax
f01008aa:	0f b6 c0             	movzbl %al,%eax
f01008ad:	f7 d0                	not    %eax
f01008af:	89 c2                	mov    %eax,%edx
f01008b1:	a1 08 82 65 f0       	mov    0xf0658208,%eax
f01008b6:	21 d0                	and    %edx,%eax
f01008b8:	a3 08 82 65 f0       	mov    %eax,0xf0658208
		return 0;
f01008bd:	b8 00 00 00 00       	mov    $0x0,%eax
f01008c2:	e9 d6 00 00 00       	jmp    f010099d <kbd_proc_data+0x181>
	} else if (shift & E0ESC) {
f01008c7:	a1 08 82 65 f0       	mov    0xf0658208,%eax
f01008cc:	83 e0 40             	and    $0x40,%eax
f01008cf:	85 c0                	test   %eax,%eax
f01008d1:	74 11                	je     f01008e4 <kbd_proc_data+0xc8>
		// Last character was an E0 escape; or with 0x80
		data |= 0x80;
f01008d3:	80 4d f3 80          	orb    $0x80,-0xd(%ebp)
		shift &= ~E0ESC;
f01008d7:	a1 08 82 65 f0       	mov    0xf0658208,%eax
f01008dc:	83 e0 bf             	and    $0xffffffbf,%eax
f01008df:	a3 08 82 65 f0       	mov    %eax,0xf0658208
	}

	shift |= shiftcode[data];
f01008e4:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
f01008e8:	8a 80 20 00 19 f0    	mov    -0xfe6ffe0(%eax),%al
f01008ee:	0f b6 d0             	movzbl %al,%edx
f01008f1:	a1 08 82 65 f0       	mov    0xf0658208,%eax
f01008f6:	09 d0                	or     %edx,%eax
f01008f8:	a3 08 82 65 f0       	mov    %eax,0xf0658208
	shift ^= togglecode[data];
f01008fd:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
f0100901:	8a 80 20 01 19 f0    	mov    -0xfe6fee0(%eax),%al
f0100907:	0f b6 d0             	movzbl %al,%edx
f010090a:	a1 08 82 65 f0       	mov    0xf0658208,%eax
f010090f:	31 d0                	xor    %edx,%eax
f0100911:	a3 08 82 65 f0       	mov    %eax,0xf0658208

	c = charcode[shift & (CTL | SHIFT)][data];
f0100916:	a1 08 82 65 f0       	mov    0xf0658208,%eax
f010091b:	83 e0 03             	and    $0x3,%eax
f010091e:	8b 14 85 20 05 19 f0 	mov    -0xfe6fae0(,%eax,4),%edx
f0100925:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
f0100929:	01 d0                	add    %edx,%eax
f010092b:	8a 00                	mov    (%eax),%al
f010092d:	0f b6 c0             	movzbl %al,%eax
f0100930:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if (shift & CAPSLOCK) {
f0100933:	a1 08 82 65 f0       	mov    0xf0658208,%eax
f0100938:	83 e0 08             	and    $0x8,%eax
f010093b:	85 c0                	test   %eax,%eax
f010093d:	74 22                	je     f0100961 <kbd_proc_data+0x145>
		if ('a' <= c && c <= 'z')
f010093f:	83 7d f4 60          	cmpl   $0x60,-0xc(%ebp)
f0100943:	7e 0c                	jle    f0100951 <kbd_proc_data+0x135>
f0100945:	83 7d f4 7a          	cmpl   $0x7a,-0xc(%ebp)
f0100949:	7f 06                	jg     f0100951 <kbd_proc_data+0x135>
			c += 'A' - 'a';
f010094b:	83 6d f4 20          	subl   $0x20,-0xc(%ebp)
f010094f:	eb 10                	jmp    f0100961 <kbd_proc_data+0x145>
		else if ('A' <= c && c <= 'Z')
f0100951:	83 7d f4 40          	cmpl   $0x40,-0xc(%ebp)
f0100955:	7e 0a                	jle    f0100961 <kbd_proc_data+0x145>
f0100957:	83 7d f4 5a          	cmpl   $0x5a,-0xc(%ebp)
f010095b:	7f 04                	jg     f0100961 <kbd_proc_data+0x145>
			c += 'a' - 'A';
f010095d:	83 45 f4 20          	addl   $0x20,-0xc(%ebp)
	}

	// Process special keys
	// Ctrl-Alt-Del: reboot
	if (!(~shift & (CTL | ALT)) && c == KEY_DEL) {
f0100961:	a1 08 82 65 f0       	mov    0xf0658208,%eax
f0100966:	f7 d0                	not    %eax
f0100968:	83 e0 06             	and    $0x6,%eax
f010096b:	85 c0                	test   %eax,%eax
f010096d:	75 2b                	jne    f010099a <kbd_proc_data+0x17e>
f010096f:	81 7d f4 e9 00 00 00 	cmpl   $0xe9,-0xc(%ebp)
f0100976:	75 22                	jne    f010099a <kbd_proc_data+0x17e>
		cprintf("Rebooting!\n");
f0100978:	83 ec 0c             	sub    $0xc,%esp
f010097b:	68 28 2b 13 f0       	push   $0xf0132b28
f0100980:	e8 a8 02 00 00       	call   f0100c2d <cprintf>
f0100985:	83 c4 10             	add    $0x10,%esp
f0100988:	c7 45 e8 92 00 00 00 	movl   $0x92,-0x18(%ebp)
f010098f:	c6 45 e1 03          	movb   $0x3,-0x1f(%ebp)
}

static __inline void
outb(int port, uint8 data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
f0100993:	8a 45 e1             	mov    -0x1f(%ebp),%al
f0100996:	8b 55 e8             	mov    -0x18(%ebp),%edx
f0100999:	ee                   	out    %al,(%dx)
		outb(0x92, 0x3); // courtesy of Chris Frost
	}

	return c;
f010099a:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f010099d:	c9                   	leave  
f010099e:	c3                   	ret    

f010099f <kbd_intr>:

void
kbd_intr(void)
{
f010099f:	55                   	push   %ebp
f01009a0:	89 e5                	mov    %esp,%ebp
f01009a2:	83 ec 08             	sub    $0x8,%esp
	cons_intr(kbd_proc_data);
f01009a5:	83 ec 0c             	sub    $0xc,%esp
f01009a8:	68 1c 08 10 f0       	push   $0xf010081c
f01009ad:	e8 0c 00 00 00       	call   f01009be <cons_intr>
f01009b2:	83 c4 10             	add    $0x10,%esp
}
f01009b5:	90                   	nop
f01009b6:	c9                   	leave  
f01009b7:	c3                   	ret    

f01009b8 <kbd_init>:

void
kbd_init(void)
{
f01009b8:	55                   	push   %ebp
f01009b9:	89 e5                	mov    %esp,%ebp
}
f01009bb:	90                   	nop
f01009bc:	5d                   	pop    %ebp
f01009bd:	c3                   	ret    

f01009be <cons_intr>:

// called by device interrupt routines to feed input characters
// into the circular console input buffer.
void
cons_intr(int (*proc)(void))
{
f01009be:	55                   	push   %ebp
f01009bf:	89 e5                	mov    %esp,%ebp
f01009c1:	83 ec 18             	sub    $0x18,%esp
	int c;

	while ((c = (*proc)()) != -1) {
f01009c4:	eb 35                	jmp    f01009fb <cons_intr+0x3d>
		if (c == 0)
f01009c6:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01009ca:	75 02                	jne    f01009ce <cons_intr+0x10>
			continue;
f01009cc:	eb 2d                	jmp    f01009fb <cons_intr+0x3d>
		cons.buf[cons.wpos++] = c;
f01009ce:	a1 04 82 65 f0       	mov    0xf0658204,%eax
f01009d3:	8d 50 01             	lea    0x1(%eax),%edx
f01009d6:	89 15 04 82 65 f0    	mov    %edx,0xf0658204
f01009dc:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01009df:	88 90 00 80 65 f0    	mov    %dl,-0xf9a8000(%eax)
		if (cons.wpos == CONSBUFSIZE)
f01009e5:	a1 04 82 65 f0       	mov    0xf0658204,%eax
f01009ea:	3d 00 02 00 00       	cmp    $0x200,%eax
f01009ef:	75 0a                	jne    f01009fb <cons_intr+0x3d>
			cons.wpos = 0;
f01009f1:	c7 05 04 82 65 f0 00 	movl   $0x0,0xf0658204
f01009f8:	00 00 00 
void
cons_intr(int (*proc)(void))
{
	int c;

	while ((c = (*proc)()) != -1) {
f01009fb:	8b 45 08             	mov    0x8(%ebp),%eax
f01009fe:	ff d0                	call   *%eax
f0100a00:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0100a03:	83 7d f4 ff          	cmpl   $0xffffffff,-0xc(%ebp)
f0100a07:	75 bd                	jne    f01009c6 <cons_intr+0x8>
			continue;
		cons.buf[cons.wpos++] = c;
		if (cons.wpos == CONSBUFSIZE)
			cons.wpos = 0;
	}
}
f0100a09:	90                   	nop
f0100a0a:	c9                   	leave  
f0100a0b:	c3                   	ret    

f0100a0c <cons_getc>:

// return the next input character from the console, or 0 if none waiting
int
cons_getc(void)
{
f0100a0c:	55                   	push   %ebp
f0100a0d:	89 e5                	mov    %esp,%ebp
f0100a0f:	83 ec 18             	sub    $0x18,%esp
	int c;

	// poll for any pending input characters,
	// so that this function works even when interrupts are disabled
	// (e.g., when called from the kernel monitor).
	serial_intr();
f0100a12:	e8 a7 f9 ff ff       	call   f01003be <serial_intr>
	kbd_intr();
f0100a17:	e8 83 ff ff ff       	call   f010099f <kbd_intr>

	// grab the next character from the input buffer.
	if (cons.rpos != cons.wpos) {
f0100a1c:	8b 15 00 82 65 f0    	mov    0xf0658200,%edx
f0100a22:	a1 04 82 65 f0       	mov    0xf0658204,%eax
f0100a27:	39 c2                	cmp    %eax,%edx
f0100a29:	74 35                	je     f0100a60 <cons_getc+0x54>
		c = cons.buf[cons.rpos++];
f0100a2b:	a1 00 82 65 f0       	mov    0xf0658200,%eax
f0100a30:	8d 50 01             	lea    0x1(%eax),%edx
f0100a33:	89 15 00 82 65 f0    	mov    %edx,0xf0658200
f0100a39:	8a 80 00 80 65 f0    	mov    -0xf9a8000(%eax),%al
f0100a3f:	0f b6 c0             	movzbl %al,%eax
f0100a42:	89 45 f4             	mov    %eax,-0xc(%ebp)
		if (cons.rpos == CONSBUFSIZE)
f0100a45:	a1 00 82 65 f0       	mov    0xf0658200,%eax
f0100a4a:	3d 00 02 00 00       	cmp    $0x200,%eax
f0100a4f:	75 0a                	jne    f0100a5b <cons_getc+0x4f>
			cons.rpos = 0;
f0100a51:	c7 05 00 82 65 f0 00 	movl   $0x0,0xf0658200
f0100a58:	00 00 00 
		return c;
f0100a5b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0100a5e:	eb 05                	jmp    f0100a65 <cons_getc+0x59>
	}
	return 0;
f0100a60:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0100a65:	c9                   	leave  
f0100a66:	c3                   	ret    

f0100a67 <cons_getc2>:
// return the next input character from the console, or 0 if none waiting
int
cons_getc2(void)
{
f0100a67:	55                   	push   %ebp
f0100a68:	89 e5                	mov    %esp,%ebp
f0100a6a:	83 ec 18             	sub    $0x18,%esp

	// poll for any pending input characters,
	// so that this function works even when interrupts are disabled
	// (e.g., when called from the kernel monitor).

	int c1 = 0;
f0100a6d:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	//serial_intr();
	{
		if (serial_exists)
f0100a74:	a1 e0 7f 65 f0       	mov    0xf0657fe0,%eax
f0100a79:	85 c0                	test   %eax,%eax
f0100a7b:	74 41                	je     f0100abe <cons_getc2+0x57>
		{
			if ((c1 = serial_proc_data()) != -1) {
f0100a7d:	e8 fa f8 ff ff       	call   f010037c <serial_proc_data>
f0100a82:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0100a85:	83 7d f4 ff          	cmpl   $0xffffffff,-0xc(%ebp)
f0100a89:	74 33                	je     f0100abe <cons_getc2+0x57>
				if (c1 == 0)
f0100a8b:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0100a8f:	74 2d                	je     f0100abe <cons_getc2+0x57>
				{
					//continue;
				}
				else
				{
					cons.buf[cons.wpos++] = c1;
f0100a91:	a1 04 82 65 f0       	mov    0xf0658204,%eax
f0100a96:	8d 50 01             	lea    0x1(%eax),%edx
f0100a99:	89 15 04 82 65 f0    	mov    %edx,0xf0658204
f0100a9f:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0100aa2:	88 90 00 80 65 f0    	mov    %dl,-0xf9a8000(%eax)
					if (cons.wpos == CONSBUFSIZE)
f0100aa8:	a1 04 82 65 f0       	mov    0xf0658204,%eax
f0100aad:	3d 00 02 00 00       	cmp    $0x200,%eax
f0100ab2:	75 0a                	jne    f0100abe <cons_getc2+0x57>
						cons.wpos = 0;
f0100ab4:	c7 05 04 82 65 f0 00 	movl   $0x0,0xf0658204
f0100abb:	00 00 00 
				}
			}
		}
	}

	int c2 = 0;
f0100abe:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	//kbd_intr();
	{
		if ((c2 = kbd_proc_data()) != -1) {
f0100ac5:	e8 52 fd ff ff       	call   f010081c <kbd_proc_data>
f0100aca:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0100acd:	83 7d f0 ff          	cmpl   $0xffffffff,-0x10(%ebp)
f0100ad1:	74 33                	je     f0100b06 <cons_getc2+0x9f>
			if (c2 == 0)
f0100ad3:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0100ad7:	74 2d                	je     f0100b06 <cons_getc2+0x9f>
			{
				//continue;
			}
			else
			{
				cons.buf[cons.wpos++] = c2;
f0100ad9:	a1 04 82 65 f0       	mov    0xf0658204,%eax
f0100ade:	8d 50 01             	lea    0x1(%eax),%edx
f0100ae1:	89 15 04 82 65 f0    	mov    %edx,0xf0658204
f0100ae7:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0100aea:	88 90 00 80 65 f0    	mov    %dl,-0xf9a8000(%eax)
				if (cons.wpos == CONSBUFSIZE)
f0100af0:	a1 04 82 65 f0       	mov    0xf0658204,%eax
f0100af5:	3d 00 02 00 00       	cmp    $0x200,%eax
f0100afa:	75 0a                	jne    f0100b06 <cons_getc2+0x9f>
					cons.wpos = 0;
f0100afc:	c7 05 04 82 65 f0 00 	movl   $0x0,0xf0658204
f0100b03:	00 00 00 
	}

	// grab the next character from the input buffer.
	//cprintf("%d, %d \n", c1, c2);
	//if(c1 > 0 && c2 > 0)
	if(c2 > 0)
f0100b06:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0100b0a:	7e 44                	jle    f0100b50 <cons_getc2+0xe9>
	{
		if (cons.rpos != cons.wpos) {
f0100b0c:	8b 15 00 82 65 f0    	mov    0xf0658200,%edx
f0100b12:	a1 04 82 65 f0       	mov    0xf0658204,%eax
f0100b17:	39 c2                	cmp    %eax,%edx
f0100b19:	74 35                	je     f0100b50 <cons_getc2+0xe9>
			c = cons.buf[cons.rpos++];
f0100b1b:	a1 00 82 65 f0       	mov    0xf0658200,%eax
f0100b20:	8d 50 01             	lea    0x1(%eax),%edx
f0100b23:	89 15 00 82 65 f0    	mov    %edx,0xf0658200
f0100b29:	8a 80 00 80 65 f0    	mov    -0xf9a8000(%eax),%al
f0100b2f:	0f b6 c0             	movzbl %al,%eax
f0100b32:	89 45 ec             	mov    %eax,-0x14(%ebp)
			if (cons.rpos == CONSBUFSIZE)
f0100b35:	a1 00 82 65 f0       	mov    0xf0658200,%eax
f0100b3a:	3d 00 02 00 00       	cmp    $0x200,%eax
f0100b3f:	75 0a                	jne    f0100b4b <cons_getc2+0xe4>
				cons.rpos = 0;
f0100b41:	c7 05 00 82 65 f0 00 	movl   $0x0,0xf0658200
f0100b48:	00 00 00 
			return c;
f0100b4b:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0100b4e:	eb 05                	jmp    f0100b55 <cons_getc2+0xee>
		}
	}
	return 0;
f0100b50:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0100b55:	c9                   	leave  
f0100b56:	c3                   	ret    

f0100b57 <cons_putc>:

// output a character to the console
void
cons_putc(int c)
{
f0100b57:	55                   	push   %ebp
f0100b58:	89 e5                	mov    %esp,%ebp
f0100b5a:	83 ec 08             	sub    $0x8,%esp
	lpt_putc(c);
f0100b5d:	ff 75 08             	pushl  0x8(%ebp)
f0100b60:	e8 8b f9 ff ff       	call   f01004f0 <lpt_putc>
f0100b65:	83 c4 04             	add    $0x4,%esp
	cga_putc(c);
f0100b68:	83 ec 0c             	sub    $0xc,%esp
f0100b6b:	ff 75 08             	pushl  0x8(%ebp)
f0100b6e:	e8 b7 fa ff ff       	call   f010062a <cga_putc>
f0100b73:	83 c4 10             	add    $0x10,%esp
}
f0100b76:	90                   	nop
f0100b77:	c9                   	leave  
f0100b78:	c3                   	ret    

f0100b79 <console_initialize>:

// initialize the console devices
void
console_initialize(void)
{
f0100b79:	55                   	push   %ebp
f0100b7a:	89 e5                	mov    %esp,%ebp
f0100b7c:	83 ec 08             	sub    $0x8,%esp
	cga_init();
f0100b7f:	e8 e1 f9 ff ff       	call   f0100565 <cga_init>
	kbd_init();
f0100b84:	e8 2f fe ff ff       	call   f01009b8 <kbd_init>
	serial_init();
f0100b89:	e8 52 f8 ff ff       	call   f01003e0 <serial_init>

	if (!serial_exists)
f0100b8e:	a1 e0 7f 65 f0       	mov    0xf0657fe0,%eax
f0100b93:	85 c0                	test   %eax,%eax
f0100b95:	75 10                	jne    f0100ba7 <console_initialize+0x2e>
		cprintf("Serial port does not exist!\n");
f0100b97:	83 ec 0c             	sub    $0xc,%esp
f0100b9a:	68 34 2b 13 f0       	push   $0xf0132b34
f0100b9f:	e8 89 00 00 00       	call   f0100c2d <cprintf>
f0100ba4:	83 c4 10             	add    $0x10,%esp
}
f0100ba7:	90                   	nop
f0100ba8:	c9                   	leave  
f0100ba9:	c3                   	ret    

f0100baa <cputchar>:

// `High'-level console I/O.  Used by readline and cprintf.

void
cputchar(int c)
{
f0100baa:	55                   	push   %ebp
f0100bab:	89 e5                	mov    %esp,%ebp
f0100bad:	83 ec 08             	sub    $0x8,%esp
	cons_putc(c);
f0100bb0:	83 ec 0c             	sub    $0xc,%esp
f0100bb3:	ff 75 08             	pushl  0x8(%ebp)
f0100bb6:	e8 9c ff ff ff       	call   f0100b57 <cons_putc>
f0100bbb:	83 c4 10             	add    $0x10,%esp
}
f0100bbe:	90                   	nop
f0100bbf:	c9                   	leave  
f0100bc0:	c3                   	ret    

f0100bc1 <getchar>:

int
getchar(void)
{
f0100bc1:	55                   	push   %ebp
f0100bc2:	89 e5                	mov    %esp,%ebp
f0100bc4:	83 ec 18             	sub    $0x18,%esp
	int c;

	while ((c = cons_getc()) == 0)
f0100bc7:	e8 40 fe ff ff       	call   f0100a0c <cons_getc>
f0100bcc:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0100bcf:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0100bd3:	74 f2                	je     f0100bc7 <getchar+0x6>
		/* do nothing */;
	return c;
f0100bd5:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f0100bd8:	c9                   	leave  
f0100bd9:	c3                   	ret    

f0100bda <iscons>:

int
iscons(int fdnum)
{
f0100bda:	55                   	push   %ebp
f0100bdb:	89 e5                	mov    %esp,%ebp
	// used by readline
	return 1;
f0100bdd:	b8 01 00 00 00       	mov    $0x1,%eax
}
f0100be2:	5d                   	pop    %ebp
f0100be3:	c3                   	ret    

f0100be4 <putch>:
#include <inc/stdarg.h>


static void
putch(int ch, int *cnt)
{
f0100be4:	55                   	push   %ebp
f0100be5:	89 e5                	mov    %esp,%ebp
f0100be7:	83 ec 08             	sub    $0x8,%esp
	cputchar(ch);
f0100bea:	83 ec 0c             	sub    $0xc,%esp
f0100bed:	ff 75 08             	pushl  0x8(%ebp)
f0100bf0:	e8 b5 ff ff ff       	call   f0100baa <cputchar>
f0100bf5:	83 c4 10             	add    $0x10,%esp
	*cnt++;
f0100bf8:	8b 45 0c             	mov    0xc(%ebp),%eax
f0100bfb:	83 c0 04             	add    $0x4,%eax
f0100bfe:	89 45 0c             	mov    %eax,0xc(%ebp)
}
f0100c01:	90                   	nop
f0100c02:	c9                   	leave  
f0100c03:	c3                   	ret    

f0100c04 <vcprintf>:

int
vcprintf(const char *fmt, va_list ap)
{
f0100c04:	55                   	push   %ebp
f0100c05:	89 e5                	mov    %esp,%ebp
f0100c07:	83 ec 18             	sub    $0x18,%esp
	int cnt = 0;
f0100c0a:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

	vprintfmt((void*)putch, &cnt, fmt, ap);
f0100c11:	ff 75 0c             	pushl  0xc(%ebp)
f0100c14:	ff 75 08             	pushl  0x8(%ebp)
f0100c17:	8d 45 f4             	lea    -0xc(%ebp),%eax
f0100c1a:	50                   	push   %eax
f0100c1b:	68 e4 0b 10 f0       	push   $0xf0100be4
f0100c20:	e8 58 f4 02 00       	call   f013007d <vprintfmt>
f0100c25:	83 c4 10             	add    $0x10,%esp
	return cnt;
f0100c28:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f0100c2b:	c9                   	leave  
f0100c2c:	c3                   	ret    

f0100c2d <cprintf>:

int
cprintf(const char *fmt, ...)
{
f0100c2d:	55                   	push   %ebp
f0100c2e:	89 e5                	mov    %esp,%ebp
f0100c30:	83 ec 18             	sub    $0x18,%esp
	va_list ap;
	int cnt;

	va_start(ap, fmt);
f0100c33:	8d 45 0c             	lea    0xc(%ebp),%eax
f0100c36:	89 45 f4             	mov    %eax,-0xc(%ebp)
	cnt = vcprintf(fmt, ap);
f0100c39:	8b 45 08             	mov    0x8(%ebp),%eax
f0100c3c:	83 ec 08             	sub    $0x8,%esp
f0100c3f:	ff 75 f4             	pushl  -0xc(%ebp)
f0100c42:	50                   	push   %eax
f0100c43:	e8 bc ff ff ff       	call   f0100c04 <vcprintf>
f0100c48:	83 c4 10             	add    $0x10,%esp
f0100c4b:	89 45 f0             	mov    %eax,-0x10(%ebp)
	va_end(ap);

	return cnt;
f0100c4e:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
f0100c51:	c9                   	leave  
f0100c52:	c3                   	ret    

f0100c53 <run_command_prompt>:

//TODO: [PROJECT MS1] [COMMAND PROMPT] auto-complete

//invoke the command prompt
void run_command_prompt()
{
f0100c53:	55                   	push   %ebp
f0100c54:	89 e5                	mov    %esp,%ebp
f0100c56:	81 ec 08 04 00 00    	sub    $0x408,%esp
	char command_line[1024];

	while (1==1)
	{
		//get command line
		readline("FOS> ", command_line);
f0100c5c:	83 ec 08             	sub    $0x8,%esp
f0100c5f:	8d 85 f8 fb ff ff    	lea    -0x408(%ebp),%eax
f0100c65:	50                   	push   %eax
f0100c66:	68 51 2b 13 f0       	push   $0xf0132b51
f0100c6b:	e8 b5 f8 02 00       	call   f0130525 <readline>
f0100c70:	83 c4 10             	add    $0x10,%esp

		//parse and execute the command
		if (command_line != NULL)
			if (execute_command(command_line) < 0)
f0100c73:	83 ec 0c             	sub    $0xc,%esp
f0100c76:	8d 85 f8 fb ff ff    	lea    -0x408(%ebp),%eax
f0100c7c:	50                   	push   %eax
f0100c7d:	e8 0d 00 00 00       	call   f0100c8f <execute_command>
f0100c82:	83 c4 10             	add    $0x10,%esp
f0100c85:	85 c0                	test   %eax,%eax
f0100c87:	78 02                	js     f0100c8b <run_command_prompt+0x38>
				break;
	}
f0100c89:	eb d1                	jmp    f0100c5c <run_command_prompt+0x9>
		readline("FOS> ", command_line);

		//parse and execute the command
		if (command_line != NULL)
			if (execute_command(command_line) < 0)
				break;
f0100c8b:	90                   	nop
	}
}
f0100c8c:	90                   	nop
f0100c8d:	c9                   	leave  
f0100c8e:	c3                   	ret    

f0100c8f <execute_command>:
#define WHITESPACE "\t\r\n "

//Function to parse any command and execute it
//(simply by calling its corresponding function)
int execute_command(char *command_string)
{
f0100c8f:	55                   	push   %ebp
f0100c90:	89 e5                	mov    %esp,%ebp
f0100c92:	81 ec a8 00 00 00    	sub    $0xa8,%esp
	int number_of_arguments;
	//allocate array of char * of size MAX_ARGUMENTS = 16 found in string.h
	char *arguments[MAX_ARGUMENTS];
	char *auto_fun[MAX_ARGUMENTS];

	strsplit(command_string, WHITESPACE, arguments, &number_of_arguments) ;
f0100c98:	8d 45 e0             	lea    -0x20(%ebp),%eax
f0100c9b:	50                   	push   %eax
f0100c9c:	8d 45 a0             	lea    -0x60(%ebp),%eax
f0100c9f:	50                   	push   %eax
f0100ca0:	68 57 2b 13 f0       	push   $0xf0132b57
f0100ca5:	ff 75 08             	pushl  0x8(%ebp)
f0100ca8:	e8 b2 00 03 00       	call   f0130d5f <strsplit>
f0100cad:	83 c4 10             	add    $0x10,%esp
	if (number_of_arguments == 0)
f0100cb0:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0100cb3:	85 c0                	test   %eax,%eax
f0100cb5:	75 0a                	jne    f0100cc1 <execute_command+0x32>
		return 0;
f0100cb7:	b8 00 00 00 00       	mov    $0x0,%eax
f0100cbc:	e9 37 01 00 00       	jmp    f0100df8 <execute_command+0x169>

	// Lookup in the commands array and execute the command
	int command_found = 0;
f0100cc1:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	int i ;
	int count = 0;
f0100cc8:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
	for (i = 0; i < NUM_OF_COMMANDS; i++)
f0100ccf:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f0100cd6:	e9 8c 00 00 00       	jmp    f0100d67 <execute_command+0xd8>
	{
		if (strcmp(arguments[0], commands[i].name) == 0)
f0100cdb:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0100cde:	89 d0                	mov    %edx,%eax
f0100ce0:	01 c0                	add    %eax,%eax
f0100ce2:	01 d0                	add    %edx,%eax
f0100ce4:	c1 e0 02             	shl    $0x2,%eax
f0100ce7:	05 40 05 19 f0       	add    $0xf0190540,%eax
f0100cec:	8b 10                	mov    (%eax),%edx
f0100cee:	8b 45 a0             	mov    -0x60(%ebp),%eax
f0100cf1:	83 ec 08             	sub    $0x8,%esp
f0100cf4:	52                   	push   %edx
f0100cf5:	50                   	push   %eax
f0100cf6:	e8 3c fb 02 00       	call   f0130837 <strcmp>
f0100cfb:	83 c4 10             	add    $0x10,%esp
f0100cfe:	85 c0                	test   %eax,%eax
f0100d00:	75 09                	jne    f0100d0b <execute_command+0x7c>
		{
			command_found = 1;
f0100d02:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
			break;
f0100d09:	eb 6c                	jmp    f0100d77 <execute_command+0xe8>
		}
		else if (strncmp(arguments[0], commands[i].name,strlen(arguments[0])) == 0)
f0100d0b:	8b 45 a0             	mov    -0x60(%ebp),%eax
f0100d0e:	83 ec 0c             	sub    $0xc,%esp
f0100d11:	50                   	push   %eax
f0100d12:	e8 14 fa 02 00       	call   f013072b <strlen>
f0100d17:	83 c4 10             	add    $0x10,%esp
f0100d1a:	89 c1                	mov    %eax,%ecx
f0100d1c:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0100d1f:	89 d0                	mov    %edx,%eax
f0100d21:	01 c0                	add    %eax,%eax
f0100d23:	01 d0                	add    %edx,%eax
f0100d25:	c1 e0 02             	shl    $0x2,%eax
f0100d28:	05 40 05 19 f0       	add    $0xf0190540,%eax
f0100d2d:	8b 10                	mov    (%eax),%edx
f0100d2f:	8b 45 a0             	mov    -0x60(%ebp),%eax
f0100d32:	83 ec 04             	sub    $0x4,%esp
f0100d35:	51                   	push   %ecx
f0100d36:	52                   	push   %edx
f0100d37:	50                   	push   %eax
f0100d38:	e8 32 fb 02 00       	call   f013086f <strncmp>
f0100d3d:	83 c4 10             	add    $0x10,%esp
f0100d40:	85 c0                	test   %eax,%eax
f0100d42:	75 20                	jne    f0100d64 <execute_command+0xd5>
		{
			auto_fun[count] = commands[i].name;
f0100d44:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0100d47:	89 d0                	mov    %edx,%eax
f0100d49:	01 c0                	add    %eax,%eax
f0100d4b:	01 d0                	add    %edx,%eax
f0100d4d:	c1 e0 02             	shl    $0x2,%eax
f0100d50:	05 40 05 19 f0       	add    $0xf0190540,%eax
f0100d55:	8b 10                	mov    (%eax),%edx
f0100d57:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0100d5a:	89 94 85 60 ff ff ff 	mov    %edx,-0xa0(%ebp,%eax,4)
			count++;
f0100d61:	ff 45 ec             	incl   -0x14(%ebp)

	// Lookup in the commands array and execute the command
	int command_found = 0;
	int i ;
	int count = 0;
	for (i = 0; i < NUM_OF_COMMANDS; i++)
f0100d64:	ff 45 f0             	incl   -0x10(%ebp)
f0100d67:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0100d6a:	a1 ac 08 19 f0       	mov    0xf01908ac,%eax
f0100d6f:	39 c2                	cmp    %eax,%edx
f0100d71:	0f 82 64 ff ff ff    	jb     f0100cdb <execute_command+0x4c>
			auto_fun[count] = commands[i].name;
			count++;
		}
	}

	if(command_found)
f0100d77:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0100d7b:	74 2b                	je     f0100da8 <execute_command+0x119>
	{
		int return_value;
		return_value = commands[i].function_to_execute(number_of_arguments, arguments);
f0100d7d:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0100d80:	89 d0                	mov    %edx,%eax
f0100d82:	01 c0                	add    %eax,%eax
f0100d84:	01 d0                	add    %edx,%eax
f0100d86:	c1 e0 02             	shl    $0x2,%eax
f0100d89:	05 48 05 19 f0       	add    $0xf0190548,%eax
f0100d8e:	8b 00                	mov    (%eax),%eax
f0100d90:	8b 55 e0             	mov    -0x20(%ebp),%edx
f0100d93:	83 ec 08             	sub    $0x8,%esp
f0100d96:	8d 4d a0             	lea    -0x60(%ebp),%ecx
f0100d99:	51                   	push   %ecx
f0100d9a:	52                   	push   %edx
f0100d9b:	ff d0                	call   *%eax
f0100d9d:	83 c4 10             	add    $0x10,%esp
f0100da0:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		return return_value;
f0100da3:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0100da6:	eb 50                	jmp    f0100df8 <execute_command+0x169>
	}
	else if (count == 0)
f0100da8:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0100dac:	75 16                	jne    f0100dc4 <execute_command+0x135>
	{
		//if not found, then it's unknown command
		cprintf("Unknown command '%s'\n", arguments[0]);
f0100dae:	8b 45 a0             	mov    -0x60(%ebp),%eax
f0100db1:	83 ec 08             	sub    $0x8,%esp
f0100db4:	50                   	push   %eax
f0100db5:	68 5c 2b 13 f0       	push   $0xf0132b5c
f0100dba:	e8 6e fe ff ff       	call   f0100c2d <cprintf>
f0100dbf:	83 c4 10             	add    $0x10,%esp
f0100dc2:	eb 2f                	jmp    f0100df3 <execute_command+0x164>
	}
	else
	{
		int loop;
		for(loop = 0; loop < count; loop++)
f0100dc4:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
f0100dcb:	eb 1e                	jmp    f0100deb <execute_command+0x15c>
			cprintf("%s\n", auto_fun[loop]);
f0100dcd:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0100dd0:	8b 84 85 60 ff ff ff 	mov    -0xa0(%ebp,%eax,4),%eax
f0100dd7:	83 ec 08             	sub    $0x8,%esp
f0100dda:	50                   	push   %eax
f0100ddb:	68 72 2b 13 f0       	push   $0xf0132b72
f0100de0:	e8 48 fe ff ff       	call   f0100c2d <cprintf>
f0100de5:	83 c4 10             	add    $0x10,%esp
		cprintf("Unknown command '%s'\n", arguments[0]);
	}
	else
	{
		int loop;
		for(loop = 0; loop < count; loop++)
f0100de8:	ff 45 e8             	incl   -0x18(%ebp)
f0100deb:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0100dee:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f0100df1:	7c da                	jl     f0100dcd <execute_command+0x13e>
			cprintf("%s\n", auto_fun[loop]);
	}
	return 0;
f0100df3:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0100df8:	c9                   	leave  
f0100df9:	c3                   	ret    

f0100dfa <setKHeapPlacementStrategyCONTALLOC>:
#define KHP_PLACE_FIRSTFIT 	0x1
#define KHP_PLACE_BESTFIT 	0x2
#define KHP_PLACE_NEXTFIT 	0x3
#define KHP_PLACE_WORSTFIT 	0x4

static inline void setKHeapPlacementStrategyCONTALLOC(){_KHeapPlacementStrategy = KHP_PLACE_CONTALLOC;}
f0100dfa:	55                   	push   %ebp
f0100dfb:	89 e5                	mov    %esp,%ebp
f0100dfd:	c7 05 98 0e 6c f0 00 	movl   $0x0,0xf06c0e98
f0100e04:	00 00 00 
f0100e07:	90                   	nop
f0100e08:	5d                   	pop    %ebp
f0100e09:	c3                   	ret    

f0100e0a <setKHeapPlacementStrategyFIRSTFIT>:
static inline void setKHeapPlacementStrategyFIRSTFIT(){_KHeapPlacementStrategy = KHP_PLACE_FIRSTFIT;}
f0100e0a:	55                   	push   %ebp
f0100e0b:	89 e5                	mov    %esp,%ebp
f0100e0d:	c7 05 98 0e 6c f0 01 	movl   $0x1,0xf06c0e98
f0100e14:	00 00 00 
f0100e17:	90                   	nop
f0100e18:	5d                   	pop    %ebp
f0100e19:	c3                   	ret    

f0100e1a <setKHeapPlacementStrategyBESTFIT>:
static inline void setKHeapPlacementStrategyBESTFIT(){_KHeapPlacementStrategy = KHP_PLACE_BESTFIT;}
f0100e1a:	55                   	push   %ebp
f0100e1b:	89 e5                	mov    %esp,%ebp
f0100e1d:	c7 05 98 0e 6c f0 02 	movl   $0x2,0xf06c0e98
f0100e24:	00 00 00 
f0100e27:	90                   	nop
f0100e28:	5d                   	pop    %ebp
f0100e29:	c3                   	ret    

f0100e2a <setKHeapPlacementStrategyNEXTFIT>:
static inline void setKHeapPlacementStrategyNEXTFIT(){_KHeapPlacementStrategy = KHP_PLACE_NEXTFIT;}
f0100e2a:	55                   	push   %ebp
f0100e2b:	89 e5                	mov    %esp,%ebp
f0100e2d:	c7 05 98 0e 6c f0 03 	movl   $0x3,0xf06c0e98
f0100e34:	00 00 00 
f0100e37:	90                   	nop
f0100e38:	5d                   	pop    %ebp
f0100e39:	c3                   	ret    

f0100e3a <setKHeapPlacementStrategyWORSTFIT>:
static inline void setKHeapPlacementStrategyWORSTFIT(){_KHeapPlacementStrategy = KHP_PLACE_WORSTFIT;}
f0100e3a:	55                   	push   %ebp
f0100e3b:	89 e5                	mov    %esp,%ebp
f0100e3d:	c7 05 98 0e 6c f0 04 	movl   $0x4,0xf06c0e98
f0100e44:	00 00 00 
f0100e47:	90                   	nop
f0100e48:	5d                   	pop    %ebp
f0100e49:	c3                   	ret    

f0100e4a <isKHeapPlacementStrategyCONTALLOC>:

static inline uint8 isKHeapPlacementStrategyCONTALLOC(){if(_KHeapPlacementStrategy == KHP_PLACE_CONTALLOC) return 1; return 0;}
f0100e4a:	55                   	push   %ebp
f0100e4b:	89 e5                	mov    %esp,%ebp
f0100e4d:	a1 98 0e 6c f0       	mov    0xf06c0e98,%eax
f0100e52:	85 c0                	test   %eax,%eax
f0100e54:	75 04                	jne    f0100e5a <isKHeapPlacementStrategyCONTALLOC+0x10>
f0100e56:	b0 01                	mov    $0x1,%al
f0100e58:	eb 02                	jmp    f0100e5c <isKHeapPlacementStrategyCONTALLOC+0x12>
f0100e5a:	b0 00                	mov    $0x0,%al
f0100e5c:	5d                   	pop    %ebp
f0100e5d:	c3                   	ret    

f0100e5e <isKHeapPlacementStrategyFIRSTFIT>:
static inline uint8 isKHeapPlacementStrategyFIRSTFIT(){if(_KHeapPlacementStrategy == KHP_PLACE_FIRSTFIT) return 1; return 0;}
f0100e5e:	55                   	push   %ebp
f0100e5f:	89 e5                	mov    %esp,%ebp
f0100e61:	a1 98 0e 6c f0       	mov    0xf06c0e98,%eax
f0100e66:	83 f8 01             	cmp    $0x1,%eax
f0100e69:	75 04                	jne    f0100e6f <isKHeapPlacementStrategyFIRSTFIT+0x11>
f0100e6b:	b0 01                	mov    $0x1,%al
f0100e6d:	eb 02                	jmp    f0100e71 <isKHeapPlacementStrategyFIRSTFIT+0x13>
f0100e6f:	b0 00                	mov    $0x0,%al
f0100e71:	5d                   	pop    %ebp
f0100e72:	c3                   	ret    

f0100e73 <isKHeapPlacementStrategyBESTFIT>:
static inline uint8 isKHeapPlacementStrategyBESTFIT(){if(_KHeapPlacementStrategy == KHP_PLACE_BESTFIT) return 1; return 0;}
f0100e73:	55                   	push   %ebp
f0100e74:	89 e5                	mov    %esp,%ebp
f0100e76:	a1 98 0e 6c f0       	mov    0xf06c0e98,%eax
f0100e7b:	83 f8 02             	cmp    $0x2,%eax
f0100e7e:	75 04                	jne    f0100e84 <isKHeapPlacementStrategyBESTFIT+0x11>
f0100e80:	b0 01                	mov    $0x1,%al
f0100e82:	eb 02                	jmp    f0100e86 <isKHeapPlacementStrategyBESTFIT+0x13>
f0100e84:	b0 00                	mov    $0x0,%al
f0100e86:	5d                   	pop    %ebp
f0100e87:	c3                   	ret    

f0100e88 <isKHeapPlacementStrategyNEXTFIT>:
static inline uint8 isKHeapPlacementStrategyNEXTFIT(){if(_KHeapPlacementStrategy == KHP_PLACE_NEXTFIT) return 1; return 0;}
f0100e88:	55                   	push   %ebp
f0100e89:	89 e5                	mov    %esp,%ebp
f0100e8b:	a1 98 0e 6c f0       	mov    0xf06c0e98,%eax
f0100e90:	83 f8 03             	cmp    $0x3,%eax
f0100e93:	75 04                	jne    f0100e99 <isKHeapPlacementStrategyNEXTFIT+0x11>
f0100e95:	b0 01                	mov    $0x1,%al
f0100e97:	eb 02                	jmp    f0100e9b <isKHeapPlacementStrategyNEXTFIT+0x13>
f0100e99:	b0 00                	mov    $0x0,%al
f0100e9b:	5d                   	pop    %ebp
f0100e9c:	c3                   	ret    

f0100e9d <isKHeapPlacementStrategyWORSTFIT>:
static inline uint8 isKHeapPlacementStrategyWORSTFIT(){if(_KHeapPlacementStrategy == KHP_PLACE_WORSTFIT) return 1; return 0;}
f0100e9d:	55                   	push   %ebp
f0100e9e:	89 e5                	mov    %esp,%ebp
f0100ea0:	a1 98 0e 6c f0       	mov    0xf06c0e98,%eax
f0100ea5:	83 f8 04             	cmp    $0x4,%eax
f0100ea8:	75 04                	jne    f0100eae <isKHeapPlacementStrategyWORSTFIT+0x11>
f0100eaa:	b0 01                	mov    $0x1,%al
f0100eac:	eb 02                	jmp    f0100eb0 <isKHeapPlacementStrategyWORSTFIT+0x13>
f0100eae:	b0 00                	mov    $0x0,%al
f0100eb0:	5d                   	pop    %ebp
f0100eb1:	c3                   	ret    

f0100eb2 <setUHeapPlacementStrategyFIRSTFIT>:

//***********************************
/*2015*/ //USER HEAP STRATEGIES
uint32 _UHeapPlacementStrategy;

static inline void setUHeapPlacementStrategyFIRSTFIT(){_UHeapPlacementStrategy = UHP_PLACE_FIRSTFIT;}
f0100eb2:	55                   	push   %ebp
f0100eb3:	89 e5                	mov    %esp,%ebp
f0100eb5:	c7 05 6c 0e 6c f0 01 	movl   $0x1,0xf06c0e6c
f0100ebc:	00 00 00 
f0100ebf:	90                   	nop
f0100ec0:	5d                   	pop    %ebp
f0100ec1:	c3                   	ret    

f0100ec2 <setUHeapPlacementStrategyBESTFIT>:
static inline void setUHeapPlacementStrategyBESTFIT(){_UHeapPlacementStrategy = UHP_PLACE_BESTFIT;}
f0100ec2:	55                   	push   %ebp
f0100ec3:	89 e5                	mov    %esp,%ebp
f0100ec5:	c7 05 6c 0e 6c f0 02 	movl   $0x2,0xf06c0e6c
f0100ecc:	00 00 00 
f0100ecf:	90                   	nop
f0100ed0:	5d                   	pop    %ebp
f0100ed1:	c3                   	ret    

f0100ed2 <setUHeapPlacementStrategyNEXTFIT>:
static inline void setUHeapPlacementStrategyNEXTFIT(){_UHeapPlacementStrategy = UHP_PLACE_NEXTFIT;}
f0100ed2:	55                   	push   %ebp
f0100ed3:	89 e5                	mov    %esp,%ebp
f0100ed5:	c7 05 6c 0e 6c f0 03 	movl   $0x3,0xf06c0e6c
f0100edc:	00 00 00 
f0100edf:	90                   	nop
f0100ee0:	5d                   	pop    %ebp
f0100ee1:	c3                   	ret    

f0100ee2 <setUHeapPlacementStrategyWORSTFIT>:
static inline void setUHeapPlacementStrategyWORSTFIT(){_UHeapPlacementStrategy = UHP_PLACE_WORSTFIT;}
f0100ee2:	55                   	push   %ebp
f0100ee3:	89 e5                	mov    %esp,%ebp
f0100ee5:	c7 05 6c 0e 6c f0 04 	movl   $0x4,0xf06c0e6c
f0100eec:	00 00 00 
f0100eef:	90                   	nop
f0100ef0:	5d                   	pop    %ebp
f0100ef1:	c3                   	ret    

f0100ef2 <isUHeapPlacementStrategyFIRSTFIT>:

static inline uint8 isUHeapPlacementStrategyFIRSTFIT(){if(_UHeapPlacementStrategy == UHP_PLACE_FIRSTFIT) return 1; return 0;}
f0100ef2:	55                   	push   %ebp
f0100ef3:	89 e5                	mov    %esp,%ebp
f0100ef5:	a1 6c 0e 6c f0       	mov    0xf06c0e6c,%eax
f0100efa:	83 f8 01             	cmp    $0x1,%eax
f0100efd:	75 04                	jne    f0100f03 <isUHeapPlacementStrategyFIRSTFIT+0x11>
f0100eff:	b0 01                	mov    $0x1,%al
f0100f01:	eb 02                	jmp    f0100f05 <isUHeapPlacementStrategyFIRSTFIT+0x13>
f0100f03:	b0 00                	mov    $0x0,%al
f0100f05:	5d                   	pop    %ebp
f0100f06:	c3                   	ret    

f0100f07 <isUHeapPlacementStrategyBESTFIT>:
static inline uint8 isUHeapPlacementStrategyBESTFIT(){if(_UHeapPlacementStrategy == UHP_PLACE_BESTFIT) return 1; return 0;}
f0100f07:	55                   	push   %ebp
f0100f08:	89 e5                	mov    %esp,%ebp
f0100f0a:	a1 6c 0e 6c f0       	mov    0xf06c0e6c,%eax
f0100f0f:	83 f8 02             	cmp    $0x2,%eax
f0100f12:	75 04                	jne    f0100f18 <isUHeapPlacementStrategyBESTFIT+0x11>
f0100f14:	b0 01                	mov    $0x1,%al
f0100f16:	eb 02                	jmp    f0100f1a <isUHeapPlacementStrategyBESTFIT+0x13>
f0100f18:	b0 00                	mov    $0x0,%al
f0100f1a:	5d                   	pop    %ebp
f0100f1b:	c3                   	ret    

f0100f1c <isUHeapPlacementStrategyNEXTFIT>:
static inline uint8 isUHeapPlacementStrategyNEXTFIT(){if(_UHeapPlacementStrategy == UHP_PLACE_NEXTFIT) return 1; return 0;}
f0100f1c:	55                   	push   %ebp
f0100f1d:	89 e5                	mov    %esp,%ebp
f0100f1f:	a1 6c 0e 6c f0       	mov    0xf06c0e6c,%eax
f0100f24:	83 f8 03             	cmp    $0x3,%eax
f0100f27:	75 04                	jne    f0100f2d <isUHeapPlacementStrategyNEXTFIT+0x11>
f0100f29:	b0 01                	mov    $0x1,%al
f0100f2b:	eb 02                	jmp    f0100f2f <isUHeapPlacementStrategyNEXTFIT+0x13>
f0100f2d:	b0 00                	mov    $0x0,%al
f0100f2f:	5d                   	pop    %ebp
f0100f30:	c3                   	ret    

f0100f31 <isUHeapPlacementStrategyWORSTFIT>:
static inline uint8 isUHeapPlacementStrategyWORSTFIT(){if(_UHeapPlacementStrategy == UHP_PLACE_WORSTFIT) return 1; return 0;}
f0100f31:	55                   	push   %ebp
f0100f32:	89 e5                	mov    %esp,%ebp
f0100f34:	a1 6c 0e 6c f0       	mov    0xf06c0e6c,%eax
f0100f39:	83 f8 04             	cmp    $0x4,%eax
f0100f3c:	75 04                	jne    f0100f42 <isUHeapPlacementStrategyWORSTFIT+0x11>
f0100f3e:	b0 01                	mov    $0x1,%al
f0100f40:	eb 02                	jmp    f0100f44 <isUHeapPlacementStrategyWORSTFIT+0x13>
f0100f42:	b0 00                	mov    $0x0,%al
f0100f44:	5d                   	pop    %ebp
f0100f45:	c3                   	ret    

f0100f46 <to_frame_info>:
{
	return to_frame_number(ptr_frame_info) << PGSHIFT;
}

static inline struct FrameInfo* to_frame_info(uint32 physical_address)
{
f0100f46:	55                   	push   %ebp
f0100f47:	89 e5                	mov    %esp,%ebp
f0100f49:	83 ec 08             	sub    $0x8,%esp
	if (PPN(physical_address) >= number_of_frames)
f0100f4c:	8b 45 08             	mov    0x8(%ebp),%eax
f0100f4f:	c1 e8 0c             	shr    $0xc,%eax
f0100f52:	89 c2                	mov    %eax,%edx
f0100f54:	a1 50 0e 6c f0       	mov    0xf06c0e50,%eax
f0100f59:	39 c2                	cmp    %eax,%edx
f0100f5b:	72 14                	jb     f0100f71 <to_frame_info+0x2b>
		panic("to_frame_info called with invalid pa");
f0100f5d:	83 ec 04             	sub    $0x4,%esp
f0100f60:	68 78 2b 13 f0       	push   $0xf0132b78
f0100f65:	6a 55                	push   $0x55
f0100f67:	68 a0 2b 13 f0       	push   $0xf0132ba0
f0100f6c:	e8 35 f2 ff ff       	call   f01001a6 <_panic>
	return &frames_info[PPN(physical_address)];
f0100f71:	8b 15 90 0e 6c f0    	mov    0xf06c0e90,%edx
f0100f77:	8b 45 08             	mov    0x8(%ebp),%eax
f0100f7a:	c1 e8 0c             	shr    $0xc,%eax
f0100f7d:	89 c1                	mov    %eax,%ecx
f0100f7f:	89 c8                	mov    %ecx,%eax
f0100f81:	01 c0                	add    %eax,%eax
f0100f83:	01 c8                	add    %ecx,%eax
f0100f85:	c1 e0 03             	shl    $0x3,%eax
f0100f88:	01 d0                	add    %edx,%eax
}
f0100f8a:	c9                   	leave  
f0100f8b:	c3                   	ret    

f0100f8c <command_help>:

/***** Implementations of basic kernel command prompt commands *****/

//print name and description of each command
int command_help(int number_of_arguments, char **arguments)
{
f0100f8c:	55                   	push   %ebp
f0100f8d:	89 e5                	mov    %esp,%ebp
f0100f8f:	53                   	push   %ebx
f0100f90:	83 ec 14             	sub    $0x14,%esp
	int i;
	for (i = 0; i < NUM_OF_COMMANDS; i++)
f0100f93:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0100f9a:	eb 3b                	jmp    f0100fd7 <command_help+0x4b>
		cprintf("%s - %s\n", commands[i].name, commands[i].description);
f0100f9c:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0100f9f:	89 d0                	mov    %edx,%eax
f0100fa1:	01 c0                	add    %eax,%eax
f0100fa3:	01 d0                	add    %edx,%eax
f0100fa5:	c1 e0 02             	shl    $0x2,%eax
f0100fa8:	05 44 05 19 f0       	add    $0xf0190544,%eax
f0100fad:	8b 10                	mov    (%eax),%edx
f0100faf:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0100fb2:	89 c8                	mov    %ecx,%eax
f0100fb4:	01 c0                	add    %eax,%eax
f0100fb6:	01 c8                	add    %ecx,%eax
f0100fb8:	c1 e0 02             	shl    $0x2,%eax
f0100fbb:	05 40 05 19 f0       	add    $0xf0190540,%eax
f0100fc0:	8b 00                	mov    (%eax),%eax
f0100fc2:	83 ec 04             	sub    $0x4,%esp
f0100fc5:	52                   	push   %edx
f0100fc6:	50                   	push   %eax
f0100fc7:	68 1a 3a 13 f0       	push   $0xf0133a1a
f0100fcc:	e8 5c fc ff ff       	call   f0100c2d <cprintf>
f0100fd1:	83 c4 10             	add    $0x10,%esp

//print name and description of each command
int command_help(int number_of_arguments, char **arguments)
{
	int i;
	for (i = 0; i < NUM_OF_COMMANDS; i++)
f0100fd4:	ff 45 f4             	incl   -0xc(%ebp)
f0100fd7:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0100fda:	a1 ac 08 19 f0       	mov    0xf01908ac,%eax
f0100fdf:	39 c2                	cmp    %eax,%edx
f0100fe1:	72 b9                	jb     f0100f9c <command_help+0x10>
		cprintf("%s - %s\n", commands[i].name, commands[i].description);

	cprintf("-------------------\n");
f0100fe3:	83 ec 0c             	sub    $0xc,%esp
f0100fe6:	68 23 3a 13 f0       	push   $0xf0133a23
f0100feb:	e8 3d fc ff ff       	call   f0100c2d <cprintf>
f0100ff0:	83 c4 10             	add    $0x10,%esp

	for (i = 0; i < NUM_USER_PROGS; i++)
f0100ff3:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0100ffa:	eb 42                	jmp    f010103e <command_help+0xb2>
		cprintf("run %s - %s [User Program]\n", ptr_UserPrograms[i].name, ptr_UserPrograms[i].desc);
f0100ffc:	8b 0d c0 0c 19 f0    	mov    0xf0190cc0,%ecx
f0101002:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0101005:	89 d0                	mov    %edx,%eax
f0101007:	01 c0                	add    %eax,%eax
f0101009:	01 d0                	add    %edx,%eax
f010100b:	c1 e0 02             	shl    $0x2,%eax
f010100e:	01 c8                	add    %ecx,%eax
f0101010:	8b 50 04             	mov    0x4(%eax),%edx
f0101013:	8b 1d c0 0c 19 f0    	mov    0xf0190cc0,%ebx
f0101019:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f010101c:	89 c8                	mov    %ecx,%eax
f010101e:	01 c0                	add    %eax,%eax
f0101020:	01 c8                	add    %ecx,%eax
f0101022:	c1 e0 02             	shl    $0x2,%eax
f0101025:	01 d8                	add    %ebx,%eax
f0101027:	8b 00                	mov    (%eax),%eax
f0101029:	83 ec 04             	sub    $0x4,%esp
f010102c:	52                   	push   %edx
f010102d:	50                   	push   %eax
f010102e:	68 38 3a 13 f0       	push   $0xf0133a38
f0101033:	e8 f5 fb ff ff       	call   f0100c2d <cprintf>
f0101038:	83 c4 10             	add    $0x10,%esp
	for (i = 0; i < NUM_OF_COMMANDS; i++)
		cprintf("%s - %s\n", commands[i].name, commands[i].description);

	cprintf("-------------------\n");

	for (i = 0; i < NUM_USER_PROGS; i++)
f010103b:	ff 45 f4             	incl   -0xc(%ebp)
f010103e:	a1 c4 0c 19 f0       	mov    0xf0190cc4,%eax
f0101043:	39 45 f4             	cmp    %eax,-0xc(%ebp)
f0101046:	7c b4                	jl     f0100ffc <command_help+0x70>
		cprintf("run %s - %s [User Program]\n", ptr_UserPrograms[i].name, ptr_UserPrograms[i].desc);
	return 0;
f0101048:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010104d:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f0101050:	c9                   	leave  
f0101051:	c3                   	ret    

f0101052 <command_kernel_info>:

//print information about kernel addresses and kernel size
int command_kernel_info(int number_of_arguments, char **arguments )
{
f0101052:	55                   	push   %ebp
f0101053:	89 e5                	mov    %esp,%ebp
f0101055:	83 ec 08             	sub    $0x8,%esp
	extern char start_of_kernel[], end_of_kernel_code_section[], start_of_uninitialized_data_section[], end_of_kernel[];

	cprintf("Special kernel symbols:\n");
f0101058:	83 ec 0c             	sub    $0xc,%esp
f010105b:	68 54 3a 13 f0       	push   $0xf0133a54
f0101060:	e8 c8 fb ff ff       	call   f0100c2d <cprintf>
f0101065:	83 c4 10             	add    $0x10,%esp
	cprintf("  Start Address of the kernel 			%08x (virt)  %08x (phys)\n", start_of_kernel, start_of_kernel - KERNEL_BASE);
f0101068:	b8 0c 00 10 00       	mov    $0x10000c,%eax
f010106d:	83 ec 04             	sub    $0x4,%esp
f0101070:	50                   	push   %eax
f0101071:	68 0c 00 10 f0       	push   $0xf010000c
f0101076:	68 70 3a 13 f0       	push   $0xf0133a70
f010107b:	e8 ad fb ff ff       	call   f0100c2d <cprintf>
f0101080:	83 c4 10             	add    $0x10,%esp
	cprintf("  End address of kernel code  			%08x (virt)  %08x (phys)\n", end_of_kernel_code_section, end_of_kernel_code_section - KERNEL_BASE);
f0101083:	b8 b1 29 13 00       	mov    $0x1329b1,%eax
f0101088:	83 ec 04             	sub    $0x4,%esp
f010108b:	50                   	push   %eax
f010108c:	68 b1 29 13 f0       	push   $0xf01329b1
f0101091:	68 ac 3a 13 f0       	push   $0xf0133aac
f0101096:	e8 92 fb ff ff       	call   f0100c2d <cprintf>
f010109b:	83 c4 10             	add    $0x10,%esp
	cprintf("  Start addr. of uninitialized data section 	%08x (virt)  %08x (phys)\n", start_of_uninitialized_data_section, start_of_uninitialized_data_section - KERNEL_BASE);
f010109e:	b8 b0 7f 65 00       	mov    $0x657fb0,%eax
f01010a3:	83 ec 04             	sub    $0x4,%esp
f01010a6:	50                   	push   %eax
f01010a7:	68 b0 7f 65 f0       	push   $0xf0657fb0
f01010ac:	68 e8 3a 13 f0       	push   $0xf0133ae8
f01010b1:	e8 77 fb ff ff       	call   f0100c2d <cprintf>
f01010b6:	83 c4 10             	add    $0x10,%esp
	cprintf("  End address of the kernel   			%08x (virt)  %08x (phys)\n", end_of_kernel, end_of_kernel - KERNEL_BASE);
f01010b9:	b8 fc 0f 6c 00       	mov    $0x6c0ffc,%eax
f01010be:	83 ec 04             	sub    $0x4,%esp
f01010c1:	50                   	push   %eax
f01010c2:	68 fc 0f 6c f0       	push   $0xf06c0ffc
f01010c7:	68 30 3b 13 f0       	push   $0xf0133b30
f01010cc:	e8 5c fb ff ff       	call   f0100c2d <cprintf>
f01010d1:	83 c4 10             	add    $0x10,%esp
	cprintf("Kernel executable memory footprint: %d KB\n",
			(end_of_kernel-start_of_kernel+1023)/1024);
f01010d4:	b8 fc 0f 6c f0       	mov    $0xf06c0ffc,%eax
f01010d9:	8d 90 ff 03 00 00    	lea    0x3ff(%eax),%edx
f01010df:	b8 0c 00 10 f0       	mov    $0xf010000c,%eax
f01010e4:	29 c2                	sub    %eax,%edx
f01010e6:	89 d0                	mov    %edx,%eax
	cprintf("Special kernel symbols:\n");
	cprintf("  Start Address of the kernel 			%08x (virt)  %08x (phys)\n", start_of_kernel, start_of_kernel - KERNEL_BASE);
	cprintf("  End address of kernel code  			%08x (virt)  %08x (phys)\n", end_of_kernel_code_section, end_of_kernel_code_section - KERNEL_BASE);
	cprintf("  Start addr. of uninitialized data section 	%08x (virt)  %08x (phys)\n", start_of_uninitialized_data_section, start_of_uninitialized_data_section - KERNEL_BASE);
	cprintf("  End address of the kernel   			%08x (virt)  %08x (phys)\n", end_of_kernel, end_of_kernel - KERNEL_BASE);
	cprintf("Kernel executable memory footprint: %d KB\n",
f01010e8:	85 c0                	test   %eax,%eax
f01010ea:	79 05                	jns    f01010f1 <command_kernel_info+0x9f>
f01010ec:	05 ff 03 00 00       	add    $0x3ff,%eax
f01010f1:	c1 f8 0a             	sar    $0xa,%eax
f01010f4:	83 ec 08             	sub    $0x8,%esp
f01010f7:	50                   	push   %eax
f01010f8:	68 6c 3b 13 f0       	push   $0xf0133b6c
f01010fd:	e8 2b fb ff ff       	call   f0100c2d <cprintf>
f0101102:	83 c4 10             	add    $0x10,%esp
			(end_of_kernel-start_of_kernel+1023)/1024);
	return 0;
f0101105:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010110a:	c9                   	leave  
f010110b:	c3                   	ret    

f010110c <command_kernel_base_info>:

//===========================================================================
//Lab3.Examples
//=============
int command_kernel_base_info(int number_of_arguments, char **arguments)
{
f010110c:	55                   	push   %ebp
f010110d:	89 e5                	mov    %esp,%ebp
f010110f:	83 ec 08             	sub    $0x8,%esp
	//TODO: LAB3 Example: fill this function. corresponding command name is "ikb"
	//Comment the following line
	panic("Function is not implemented yet!");
f0101112:	83 ec 04             	sub    $0x4,%esp
f0101115:	68 98 3b 13 f0       	push   $0xf0133b98
f010111a:	68 b0 00 00 00       	push   $0xb0
f010111f:	68 b9 3b 13 f0       	push   $0xf0133bb9
f0101124:	e8 7d f0 ff ff       	call   f01001a6 <_panic>

f0101129 <command_del_kernel_base>:
	return 0;
}


int command_del_kernel_base(int number_of_arguments, char **arguments)
{
f0101129:	55                   	push   %ebp
f010112a:	89 e5                	mov    %esp,%ebp
f010112c:	83 ec 08             	sub    $0x8,%esp
	//TODO: LAB3 Example: fill this function. corresponding command name is "dkb"
	//Comment the following line
	panic("Function is not implemented yet!");
f010112f:	83 ec 04             	sub    $0x4,%esp
f0101132:	68 98 3b 13 f0       	push   $0xf0133b98
f0101137:	68 ba 00 00 00       	push   $0xba
f010113c:	68 b9 3b 13 f0       	push   $0xf0133bb9
f0101141:	e8 60 f0 ff ff       	call   f01001a6 <_panic>

f0101146 <command_share_page>:

	return 0;
}

int command_share_page(int number_of_arguments, char **arguments)
{
f0101146:	55                   	push   %ebp
f0101147:	89 e5                	mov    %esp,%ebp
f0101149:	83 ec 08             	sub    $0x8,%esp
	//TODO: LAB3 Example: fill this function. corresponding command name is "shr"
	//Comment the following line
	panic("Function is not implemented yet!");
f010114c:	83 ec 04             	sub    $0x4,%esp
f010114f:	68 98 3b 13 f0       	push   $0xf0133b98
f0101154:	68 c3 00 00 00       	push   $0xc3
f0101159:	68 b9 3b 13 f0       	push   $0xf0133bb9
f010115e:	e8 43 f0 ff ff       	call   f01001a6 <_panic>

f0101163 <command_show_mapping>:

//===========================================================================
//Lab4.Hands.On
//=============
int command_show_mapping(int number_of_arguments, char **arguments)
{
f0101163:	55                   	push   %ebp
f0101164:	89 e5                	mov    %esp,%ebp
f0101166:	83 ec 08             	sub    $0x8,%esp
	//TODO: LAB4 Hands-on: fill this function. corresponding command name is "sm"
	//Comment the following line
	panic("Function is not implemented yet!");
f0101169:	83 ec 04             	sub    $0x4,%esp
f010116c:	68 98 3b 13 f0       	push   $0xf0133b98
f0101171:	68 cf 00 00 00       	push   $0xcf
f0101176:	68 b9 3b 13 f0       	push   $0xf0133bb9
f010117b:	e8 26 f0 ff ff       	call   f01001a6 <_panic>

f0101180 <command_set_permission>:

	return 0 ;
}

int command_set_permission(int number_of_arguments, char **arguments)
{
f0101180:	55                   	push   %ebp
f0101181:	89 e5                	mov    %esp,%ebp
f0101183:	83 ec 08             	sub    $0x8,%esp
	//TODO: LAB4 Hands-on: fill this function. corresponding command name is "sp"
	//Comment the following line
	panic("Function is not implemented yet!");
f0101186:	83 ec 04             	sub    $0x4,%esp
f0101189:	68 98 3b 13 f0       	push   $0xf0133b98
f010118e:	68 d8 00 00 00       	push   $0xd8
f0101193:	68 b9 3b 13 f0       	push   $0xf0133bb9
f0101198:	e8 09 f0 ff ff       	call   f01001a6 <_panic>

f010119d <command_share_range>:

	return 0 ;
}

int command_share_range(int number_of_arguments, char **arguments)
{
f010119d:	55                   	push   %ebp
f010119e:	89 e5                	mov    %esp,%ebp
f01011a0:	83 ec 08             	sub    $0x8,%esp
	//TODO: LAB4 Hands-on: fill this function. corresponding command name is "sr"
	//Comment the following line
	panic("Function is not implemented yet!");
f01011a3:	83 ec 04             	sub    $0x4,%esp
f01011a6:	68 98 3b 13 f0       	push   $0xf0133b98
f01011ab:	68 e1 00 00 00       	push   $0xe1
f01011b0:	68 b9 3b 13 f0       	push   $0xf0133bb9
f01011b5:	e8 ec ef ff ff       	call   f01001a6 <_panic>

f01011ba <command_nr>:
//===========================================================================
//Lab5.Examples
//==============
//[1] Number of references on the given physical address
int command_nr(int number_of_arguments, char **arguments)
{
f01011ba:	55                   	push   %ebp
f01011bb:	89 e5                	mov    %esp,%ebp
f01011bd:	83 ec 08             	sub    $0x8,%esp
	//TODO: LAB5 Example: fill this function. corresponding command name is "nr"
	//Comment the following line
	panic("Function is not implemented yet!");
f01011c0:	83 ec 04             	sub    $0x4,%esp
f01011c3:	68 98 3b 13 f0       	push   $0xf0133b98
f01011c8:	68 ee 00 00 00       	push   $0xee
f01011cd:	68 b9 3b 13 f0       	push   $0xf0133bb9
f01011d2:	e8 cf ef ff ff       	call   f01001a6 <_panic>

f01011d7 <command_ap>:
	return 0;
}

//[2] Allocate Page: If the given user virtual address is mapped, do nothing. Else, allocate a single frame and map it to a given virtual address in the user space
int command_ap(int number_of_arguments, char **arguments)
{
f01011d7:	55                   	push   %ebp
f01011d8:	89 e5                	mov    %esp,%ebp
f01011da:	83 ec 18             	sub    $0x18,%esp
	//TODO: LAB5 Example: fill this function. corresponding command name is "ap"
	//Comment the following line
	//panic("Function is not implemented yet!");

	uint32 va = strtol(arguments[1], NULL, 16);
f01011dd:	8b 45 0c             	mov    0xc(%ebp),%eax
f01011e0:	83 c0 04             	add    $0x4,%eax
f01011e3:	8b 00                	mov    (%eax),%eax
f01011e5:	83 ec 04             	sub    $0x4,%esp
f01011e8:	6a 10                	push   $0x10
f01011ea:	6a 00                	push   $0x0
f01011ec:	50                   	push   %eax
f01011ed:	e8 99 f8 02 00       	call   f0130a8b <strtol>
f01011f2:	83 c4 10             	add    $0x10,%esp
f01011f5:	89 45 f4             	mov    %eax,-0xc(%ebp)
	struct FrameInfo* ptr_frame_info;
	int ret = allocate_frame(&ptr_frame_info) ;
f01011f8:	83 ec 0c             	sub    $0xc,%esp
f01011fb:	8d 45 ec             	lea    -0x14(%ebp),%eax
f01011fe:	50                   	push   %eax
f01011ff:	e8 a6 55 00 00       	call   f01067aa <allocate_frame>
f0101204:	83 c4 10             	add    $0x10,%esp
f0101207:	89 45 f0             	mov    %eax,-0x10(%ebp)
	map_frame(ptr_page_directory, ptr_frame_info, va, PERM_USER | PERM_WRITEABLE);
f010120a:	8b 55 ec             	mov    -0x14(%ebp),%edx
f010120d:	a1 b8 0e 6c f0       	mov    0xf06c0eb8,%eax
f0101212:	6a 06                	push   $0x6
f0101214:	ff 75 f4             	pushl  -0xc(%ebp)
f0101217:	52                   	push   %edx
f0101218:	50                   	push   %eax
f0101219:	e8 24 59 00 00       	call   f0106b42 <map_frame>
f010121e:	83 c4 10             	add    $0x10,%esp

	return 0 ;
f0101221:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0101226:	c9                   	leave  
f0101227:	c3                   	ret    

f0101228 <command_fp>:

//[3] Free Page: Un-map a single page at the given virtual address in the user space
int command_fp(int number_of_arguments, char **arguments)
{
f0101228:	55                   	push   %ebp
f0101229:	89 e5                	mov    %esp,%ebp
f010122b:	83 ec 18             	sub    $0x18,%esp
	//TODO: LAB5 Example: fill this function. corresponding command name is "fp"
	//Comment the following line
	//panic("Function is not implemented yet!");

	uint32 va = strtol(arguments[1], NULL, 16);
f010122e:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101231:	83 c0 04             	add    $0x4,%eax
f0101234:	8b 00                	mov    (%eax),%eax
f0101236:	83 ec 04             	sub    $0x4,%esp
f0101239:	6a 10                	push   $0x10
f010123b:	6a 00                	push   $0x0
f010123d:	50                   	push   %eax
f010123e:	e8 48 f8 02 00       	call   f0130a8b <strtol>
f0101243:	83 c4 10             	add    $0x10,%esp
f0101246:	89 45 f4             	mov    %eax,-0xc(%ebp)
	// Un-map the page at this address
	unmap_frame(ptr_page_directory, va);
f0101249:	a1 b8 0e 6c f0       	mov    0xf06c0eb8,%eax
f010124e:	83 ec 08             	sub    $0x8,%esp
f0101251:	ff 75 f4             	pushl  -0xc(%ebp)
f0101254:	50                   	push   %eax
f0101255:	e8 17 5a 00 00       	call   f0106c71 <unmap_frame>
f010125a:	83 c4 10             	add    $0x10,%esp

	return 0;
f010125d:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0101262:	c9                   	leave  
f0101263:	c3                   	ret    

f0101264 <command_asp>:
//===========================================================================
//Lab5.Hands-on
//==============
//[1] Allocate Shared Pages
int command_asp(int number_of_arguments, char **arguments)
{
f0101264:	55                   	push   %ebp
f0101265:	89 e5                	mov    %esp,%ebp
f0101267:	83 ec 08             	sub    $0x8,%esp
	//TODO: LAB5 Hands-on: fill this function. corresponding command name is "asp"
	//Comment the following line
	panic("Function is not implemented yet!");
f010126a:	83 ec 04             	sub    $0x4,%esp
f010126d:	68 98 3b 13 f0       	push   $0xf0133b98
f0101272:	68 18 01 00 00       	push   $0x118
f0101277:	68 b9 3b 13 f0       	push   $0xf0133bb9
f010127c:	e8 25 ef ff ff       	call   f01001a6 <_panic>

f0101281 <command_cfp>:
}


//[2] Count Free Pages in Range
int command_cfp(int number_of_arguments, char **arguments)
{
f0101281:	55                   	push   %ebp
f0101282:	89 e5                	mov    %esp,%ebp
f0101284:	83 ec 08             	sub    $0x8,%esp
	//TODO: LAB5 Hands-on: fill this function. corresponding command name is "cfp"
	//Comment the following line
	panic("Function is not implemented yet!");
f0101287:	83 ec 04             	sub    $0x4,%esp
f010128a:	68 98 3b 13 f0       	push   $0xf0133b98
f010128f:	68 23 01 00 00       	push   $0x123
f0101294:	68 b9 3b 13 f0       	push   $0xf0133bb9
f0101299:	e8 08 ef ff ff       	call   f01001a6 <_panic>

f010129e <command_ft>:

//===========================================================================
//Lab6.Examples
//=============
int command_ft(int number_of_arguments, char **arguments)
{
f010129e:	55                   	push   %ebp
f010129f:	89 e5                	mov    %esp,%ebp
	//TODO: LAB6 Example: fill this function. corresponding command name is "ft"
	//Comment the following line

	return 0;
f01012a1:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01012a6:	5d                   	pop    %ebp
f01012a7:	c3                   	ret    

f01012a8 <command_writeusermem>:

//*****************************************************************************************//
//***************************** PROJECT HELPERS COMMAND ***********************************//
//*****************************************************************************************//
int command_writeusermem(int number_of_arguments, char **arguments)
{
f01012a8:	55                   	push   %ebp
f01012a9:	89 e5                	mov    %esp,%ebp
f01012ab:	83 ec 38             	sub    $0x38,%esp
	//deal with the kernel page directory
	if (number_of_arguments == 3)
f01012ae:	83 7d 08 03          	cmpl   $0x3,0x8(%ebp)
f01012b2:	75 37                	jne    f01012eb <command_writeusermem+0x43>
	{
		unsigned int address = strtol(arguments[1], NULL, 16);
f01012b4:	8b 45 0c             	mov    0xc(%ebp),%eax
f01012b7:	83 c0 04             	add    $0x4,%eax
f01012ba:	8b 00                	mov    (%eax),%eax
f01012bc:	83 ec 04             	sub    $0x4,%esp
f01012bf:	6a 10                	push   $0x10
f01012c1:	6a 00                	push   $0x0
f01012c3:	50                   	push   %eax
f01012c4:	e8 c2 f7 02 00       	call   f0130a8b <strtol>
f01012c9:	83 c4 10             	add    $0x10,%esp
f01012cc:	89 45 dc             	mov    %eax,-0x24(%ebp)
		unsigned char *ptr = (unsigned char *)(address) ;
f01012cf:	8b 45 dc             	mov    -0x24(%ebp),%eax
f01012d2:	89 45 d8             	mov    %eax,-0x28(%ebp)

		*ptr = arguments[2][0];
f01012d5:	8b 45 0c             	mov    0xc(%ebp),%eax
f01012d8:	83 c0 08             	add    $0x8,%eax
f01012db:	8b 00                	mov    (%eax),%eax
f01012dd:	8a 00                	mov    (%eax),%al
f01012df:	88 c2                	mov    %al,%dl
f01012e1:	8b 45 d8             	mov    -0x28(%ebp),%eax
f01012e4:	88 10                	mov    %dl,(%eax)
f01012e6:	e9 b9 00 00 00       	jmp    f01013a4 <command_writeusermem+0xfc>
	}
	//deal with a page directory of specific environment
	else if (number_of_arguments == 4)
f01012eb:	83 7d 08 04          	cmpl   $0x4,0x8(%ebp)
f01012ef:	0f 85 9f 00 00 00    	jne    f0101394 <command_writeusermem+0xec>
	{
		int32 envId = strtol(arguments[1],NULL, 10);
f01012f5:	8b 45 0c             	mov    0xc(%ebp),%eax
f01012f8:	83 c0 04             	add    $0x4,%eax
f01012fb:	8b 00                	mov    (%eax),%eax
f01012fd:	83 ec 04             	sub    $0x4,%esp
f0101300:	6a 0a                	push   $0xa
f0101302:	6a 00                	push   $0x0
f0101304:	50                   	push   %eax
f0101305:	e8 81 f7 02 00       	call   f0130a8b <strtol>
f010130a:	83 c4 10             	add    $0x10,%esp
f010130d:	89 45 f4             	mov    %eax,-0xc(%ebp)
		struct Env* env = NULL;
f0101310:	c7 45 d0 00 00 00 00 	movl   $0x0,-0x30(%ebp)
		envid2env(envId, &env, 0 );
f0101317:	83 ec 04             	sub    $0x4,%esp
f010131a:	6a 00                	push   $0x0
f010131c:	8d 45 d0             	lea    -0x30(%ebp),%eax
f010131f:	50                   	push   %eax
f0101320:	ff 75 f4             	pushl  -0xc(%ebp)
f0101323:	e8 a5 80 00 00       	call   f01093cd <envid2env>
f0101328:	83 c4 10             	add    $0x10,%esp

		int address = strtol(arguments[2], NULL, 16);
f010132b:	8b 45 0c             	mov    0xc(%ebp),%eax
f010132e:	83 c0 08             	add    $0x8,%eax
f0101331:	8b 00                	mov    (%eax),%eax
f0101333:	83 ec 04             	sub    $0x4,%esp
f0101336:	6a 10                	push   $0x10
f0101338:	6a 00                	push   $0x0
f010133a:	50                   	push   %eax
f010133b:	e8 4b f7 02 00       	call   f0130a8b <strtol>
f0101340:	83 c4 10             	add    $0x10,%esp
f0101343:	89 45 f0             	mov    %eax,-0x10(%ebp)

		if(env == NULL) return 0;
f0101346:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0101349:	85 c0                	test   %eax,%eax
f010134b:	75 07                	jne    f0101354 <command_writeusermem+0xac>
f010134d:	b8 00 00 00 00       	mov    $0x0,%eax
f0101352:	eb 55                	jmp    f01013a9 <command_writeusermem+0x101>

static __inline uint32
rcr3(void)
{
	uint32 val;
	__asm __volatile("movl %%cr3,%0" : "=r" (val));
f0101354:	0f 20 d8             	mov    %cr3,%eax
f0101357:	89 45 e8             	mov    %eax,-0x18(%ebp)
	return val;
f010135a:	8b 45 e8             	mov    -0x18(%ebp),%eax

		uint32 oldDir = rcr3();
f010135d:	89 45 ec             	mov    %eax,-0x14(%ebp)
		//lcr3((uint32) K_PHYSICAL_ADDRESS( env->env_pgdir));
		lcr3((uint32) (env->env_cr3));
f0101360:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0101363:	8b 40 60             	mov    0x60(%eax),%eax
f0101366:	89 45 e0             	mov    %eax,-0x20(%ebp)
}

static __inline void
lcr3(uint32 val)
{
	__asm __volatile("movl %0,%%cr3" : : "r" (val));
f0101369:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010136c:	0f 22 d8             	mov    %eax,%cr3

		unsigned char *ptr = (unsigned char *)(address) ;
f010136f:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0101372:	89 45 e4             	mov    %eax,-0x1c(%ebp)

		//Write the given Character
		*ptr = arguments[3][0];
f0101375:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101378:	83 c0 0c             	add    $0xc,%eax
f010137b:	8b 00                	mov    (%eax),%eax
f010137d:	8a 00                	mov    (%eax),%al
f010137f:	88 c2                	mov    %al,%dl
f0101381:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0101384:	88 10                	mov    %dl,(%eax)
f0101386:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0101389:	89 45 d4             	mov    %eax,-0x2c(%ebp)
f010138c:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f010138f:	0f 22 d8             	mov    %eax,%cr3
f0101392:	eb 10                	jmp    f01013a4 <command_writeusermem+0xfc>
		lcr3(oldDir);
	}
	else
	{
		cprintf("wum command: invalid number of arguments\n") ;
f0101394:	83 ec 0c             	sub    $0xc,%esp
f0101397:	68 d0 3b 13 f0       	push   $0xf0133bd0
f010139c:	e8 8c f8 ff ff       	call   f0100c2d <cprintf>
f01013a1:	83 c4 10             	add    $0x10,%esp
	}
	return 0;
f01013a4:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01013a9:	c9                   	leave  
f01013aa:	c3                   	ret    

f01013ab <command_writemem_k>:

int command_writemem_k(int number_of_arguments, char **arguments)
{
f01013ab:	55                   	push   %ebp
f01013ac:	89 e5                	mov    %esp,%ebp
f01013ae:	83 ec 28             	sub    $0x28,%esp
	unsigned char* address = (unsigned char*)strtol(arguments[1], NULL, 16)+KERNEL_BASE;
f01013b1:	8b 45 0c             	mov    0xc(%ebp),%eax
f01013b4:	83 c0 04             	add    $0x4,%eax
f01013b7:	8b 00                	mov    (%eax),%eax
f01013b9:	83 ec 04             	sub    $0x4,%esp
f01013bc:	6a 10                	push   $0x10
f01013be:	6a 00                	push   $0x0
f01013c0:	50                   	push   %eax
f01013c1:	e8 c5 f6 02 00       	call   f0130a8b <strtol>
f01013c6:	83 c4 10             	add    $0x10,%esp
f01013c9:	2d 00 00 00 10       	sub    $0x10000000,%eax
f01013ce:	89 45 f4             	mov    %eax,-0xc(%ebp)
	int size = strtol(arguments[2], NULL, 10);
f01013d1:	8b 45 0c             	mov    0xc(%ebp),%eax
f01013d4:	83 c0 08             	add    $0x8,%eax
f01013d7:	8b 00                	mov    (%eax),%eax
f01013d9:	83 ec 04             	sub    $0x4,%esp
f01013dc:	6a 0a                	push   $0xa
f01013de:	6a 00                	push   $0x0
f01013e0:	50                   	push   %eax
f01013e1:	e8 a5 f6 02 00       	call   f0130a8b <strtol>
f01013e6:	83 c4 10             	add    $0x10,%esp
f01013e9:	89 45 e8             	mov    %eax,-0x18(%ebp)
	int c, i=0;
f01013ec:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
	int stringLen = strlen(arguments[3]);
f01013f3:	8b 45 0c             	mov    0xc(%ebp),%eax
f01013f6:	83 c0 0c             	add    $0xc,%eax
f01013f9:	8b 00                	mov    (%eax),%eax
f01013fb:	83 ec 0c             	sub    $0xc,%esp
f01013fe:	50                   	push   %eax
f01013ff:	e8 27 f3 02 00       	call   f013072b <strlen>
f0101404:	83 c4 10             	add    $0x10,%esp
f0101407:	89 45 e4             	mov    %eax,-0x1c(%ebp)

	for(c=0; c<size; c++)
f010140a:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f0101411:	eb 30                	jmp    f0101443 <command_writemem_k+0x98>
	{
		for(i=0;i < stringLen; i++)
f0101413:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f010141a:	eb 1c                	jmp    f0101438 <command_writemem_k+0x8d>
		{
			*address = arguments[3][i];
f010141c:	8b 45 0c             	mov    0xc(%ebp),%eax
f010141f:	83 c0 0c             	add    $0xc,%eax
f0101422:	8b 10                	mov    (%eax),%edx
f0101424:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0101427:	01 d0                	add    %edx,%eax
f0101429:	8a 00                	mov    (%eax),%al
f010142b:	88 c2                	mov    %al,%dl
f010142d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0101430:	88 10                	mov    %dl,(%eax)
			address++;
f0101432:	ff 45 f4             	incl   -0xc(%ebp)
	int c, i=0;
	int stringLen = strlen(arguments[3]);

	for(c=0; c<size; c++)
	{
		for(i=0;i < stringLen; i++)
f0101435:	ff 45 ec             	incl   -0x14(%ebp)
f0101438:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010143b:	3b 45 e4             	cmp    -0x1c(%ebp),%eax
f010143e:	7c dc                	jl     f010141c <command_writemem_k+0x71>
	unsigned char* address = (unsigned char*)strtol(arguments[1], NULL, 16)+KERNEL_BASE;
	int size = strtol(arguments[2], NULL, 10);
	int c, i=0;
	int stringLen = strlen(arguments[3]);

	for(c=0; c<size; c++)
f0101440:	ff 45 f0             	incl   -0x10(%ebp)
f0101443:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0101446:	3b 45 e8             	cmp    -0x18(%ebp),%eax
f0101449:	7c c8                	jl     f0101413 <command_writemem_k+0x68>
		{
			*address = arguments[3][i];
			address++;
		}
	}
	return 0;
f010144b:	b8 00 00 00 00       	mov    $0x0,%eax


}
f0101450:	c9                   	leave  
f0101451:	c3                   	ret    

f0101452 <command_readusermem>:

int command_readusermem(int number_of_arguments, char **arguments)
{
f0101452:	55                   	push   %ebp
f0101453:	89 e5                	mov    %esp,%ebp
f0101455:	83 ec 38             	sub    $0x38,%esp
	//deal with the kernel page directory
	if (number_of_arguments == 2)
f0101458:	83 7d 08 02          	cmpl   $0x2,0x8(%ebp)
f010145c:	75 42                	jne    f01014a0 <command_readusermem+0x4e>
	{
		unsigned int address = strtol(arguments[1], NULL, 16);
f010145e:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101461:	83 c0 04             	add    $0x4,%eax
f0101464:	8b 00                	mov    (%eax),%eax
f0101466:	83 ec 04             	sub    $0x4,%esp
f0101469:	6a 10                	push   $0x10
f010146b:	6a 00                	push   $0x0
f010146d:	50                   	push   %eax
f010146e:	e8 18 f6 02 00       	call   f0130a8b <strtol>
f0101473:	83 c4 10             	add    $0x10,%esp
f0101476:	89 45 dc             	mov    %eax,-0x24(%ebp)
		unsigned char *ptr = (unsigned char *)(address ) ;
f0101479:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010147c:	89 45 d8             	mov    %eax,-0x28(%ebp)

		cprintf("value at address %x = %c\n", ptr, *ptr);
f010147f:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0101482:	8a 00                	mov    (%eax),%al
f0101484:	0f b6 c0             	movzbl %al,%eax
f0101487:	83 ec 04             	sub    $0x4,%esp
f010148a:	50                   	push   %eax
f010148b:	ff 75 d8             	pushl  -0x28(%ebp)
f010148e:	68 fa 3b 13 f0       	push   $0xf0133bfa
f0101493:	e8 95 f7 ff ff       	call   f0100c2d <cprintf>
f0101498:	83 c4 10             	add    $0x10,%esp
f010149b:	e9 c4 00 00 00       	jmp    f0101564 <command_readusermem+0x112>
	}
	//deal with a page directory of specific environment
	else if (number_of_arguments == 3)
f01014a0:	83 7d 08 03          	cmpl   $0x3,0x8(%ebp)
f01014a4:	0f 85 aa 00 00 00    	jne    f0101554 <command_readusermem+0x102>
	{
		int32 envId = strtol(arguments[1],NULL, 10);
f01014aa:	8b 45 0c             	mov    0xc(%ebp),%eax
f01014ad:	83 c0 04             	add    $0x4,%eax
f01014b0:	8b 00                	mov    (%eax),%eax
f01014b2:	83 ec 04             	sub    $0x4,%esp
f01014b5:	6a 0a                	push   $0xa
f01014b7:	6a 00                	push   $0x0
f01014b9:	50                   	push   %eax
f01014ba:	e8 cc f5 02 00       	call   f0130a8b <strtol>
f01014bf:	83 c4 10             	add    $0x10,%esp
f01014c2:	89 45 f4             	mov    %eax,-0xc(%ebp)
		struct Env* env = NULL;
f01014c5:	c7 45 d0 00 00 00 00 	movl   $0x0,-0x30(%ebp)
		envid2env(envId, &env, 0 );
f01014cc:	83 ec 04             	sub    $0x4,%esp
f01014cf:	6a 00                	push   $0x0
f01014d1:	8d 45 d0             	lea    -0x30(%ebp),%eax
f01014d4:	50                   	push   %eax
f01014d5:	ff 75 f4             	pushl  -0xc(%ebp)
f01014d8:	e8 f0 7e 00 00       	call   f01093cd <envid2env>
f01014dd:	83 c4 10             	add    $0x10,%esp

		int address = strtol(arguments[2], NULL, 16);
f01014e0:	8b 45 0c             	mov    0xc(%ebp),%eax
f01014e3:	83 c0 08             	add    $0x8,%eax
f01014e6:	8b 00                	mov    (%eax),%eax
f01014e8:	83 ec 04             	sub    $0x4,%esp
f01014eb:	6a 10                	push   $0x10
f01014ed:	6a 00                	push   $0x0
f01014ef:	50                   	push   %eax
f01014f0:	e8 96 f5 02 00       	call   f0130a8b <strtol>
f01014f5:	83 c4 10             	add    $0x10,%esp
f01014f8:	89 45 f0             	mov    %eax,-0x10(%ebp)

		if(env == NULL) return 0;
f01014fb:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01014fe:	85 c0                	test   %eax,%eax
f0101500:	75 07                	jne    f0101509 <command_readusermem+0xb7>
f0101502:	b8 00 00 00 00       	mov    $0x0,%eax
f0101507:	eb 60                	jmp    f0101569 <command_readusermem+0x117>

static __inline uint32
rcr3(void)
{
	uint32 val;
	__asm __volatile("movl %%cr3,%0" : "=r" (val));
f0101509:	0f 20 d8             	mov    %cr3,%eax
f010150c:	89 45 e8             	mov    %eax,-0x18(%ebp)
	return val;
f010150f:	8b 45 e8             	mov    -0x18(%ebp),%eax

		uint32 oldDir = rcr3();
f0101512:	89 45 ec             	mov    %eax,-0x14(%ebp)
		//lcr3((uint32) K_PHYSICAL_ADDRESS( env->env_pgdir));
		lcr3((uint32)( env->env_cr3));
f0101515:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0101518:	8b 40 60             	mov    0x60(%eax),%eax
f010151b:	89 45 e0             	mov    %eax,-0x20(%ebp)
}

static __inline void
lcr3(uint32 val)
{
	__asm __volatile("movl %0,%%cr3" : : "r" (val));
f010151e:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0101521:	0f 22 d8             	mov    %eax,%cr3

		unsigned char *ptr = (unsigned char *)(address) ;
f0101524:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0101527:	89 45 e4             	mov    %eax,-0x1c(%ebp)

		//Write the given Character
		cprintf("value at address %x = %c\n", address, *ptr);
f010152a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010152d:	8a 00                	mov    (%eax),%al
f010152f:	0f b6 c0             	movzbl %al,%eax
f0101532:	83 ec 04             	sub    $0x4,%esp
f0101535:	50                   	push   %eax
f0101536:	ff 75 f0             	pushl  -0x10(%ebp)
f0101539:	68 fa 3b 13 f0       	push   $0xf0133bfa
f010153e:	e8 ea f6 ff ff       	call   f0100c2d <cprintf>
f0101543:	83 c4 10             	add    $0x10,%esp
f0101546:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0101549:	89 45 d4             	mov    %eax,-0x2c(%ebp)
f010154c:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f010154f:	0f 22 d8             	mov    %eax,%cr3
f0101552:	eb 10                	jmp    f0101564 <command_readusermem+0x112>

		lcr3(oldDir);
	}
	else
	{
		cprintf("rum command: invalid number of arguments\n") ;
f0101554:	83 ec 0c             	sub    $0xc,%esp
f0101557:	68 14 3c 13 f0       	push   $0xf0133c14
f010155c:	e8 cc f6 ff ff       	call   f0100c2d <cprintf>
f0101561:	83 c4 10             	add    $0x10,%esp
	}
	return 0;
f0101564:	b8 00 00 00 00       	mov    $0x0,%eax

}
f0101569:	c9                   	leave  
f010156a:	c3                   	ret    

f010156b <command_readmem_k>:

int command_readmem_k(int number_of_arguments, char **arguments)
{
f010156b:	55                   	push   %ebp
f010156c:	89 e5                	mov    %esp,%ebp
f010156e:	83 ec 18             	sub    $0x18,%esp
	unsigned char* address = (unsigned char*)strtol(arguments[1], NULL, 16)+KERNEL_BASE;
f0101571:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101574:	83 c0 04             	add    $0x4,%eax
f0101577:	8b 00                	mov    (%eax),%eax
f0101579:	83 ec 04             	sub    $0x4,%esp
f010157c:	6a 10                	push   $0x10
f010157e:	6a 00                	push   $0x0
f0101580:	50                   	push   %eax
f0101581:	e8 05 f5 02 00       	call   f0130a8b <strtol>
f0101586:	83 c4 10             	add    $0x10,%esp
f0101589:	2d 00 00 00 10       	sub    $0x10000000,%eax
f010158e:	89 45 f4             	mov    %eax,-0xc(%ebp)
	int size = strtol(arguments[2], NULL, 10);
f0101591:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101594:	83 c0 08             	add    $0x8,%eax
f0101597:	8b 00                	mov    (%eax),%eax
f0101599:	83 ec 04             	sub    $0x4,%esp
f010159c:	6a 0a                	push   $0xa
f010159e:	6a 00                	push   $0x0
f01015a0:	50                   	push   %eax
f01015a1:	e8 e5 f4 02 00       	call   f0130a8b <strtol>
f01015a6:	83 c4 10             	add    $0x10,%esp
f01015a9:	89 45 ec             	mov    %eax,-0x14(%ebp)
	int i=0;
f01015ac:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	for(;i < size; i++)
f01015b3:	eb 22                	jmp    f01015d7 <command_readmem_k+0x6c>
	{
		cprintf("%c",*address++);
f01015b5:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01015b8:	8d 50 01             	lea    0x1(%eax),%edx
f01015bb:	89 55 f4             	mov    %edx,-0xc(%ebp)
f01015be:	8a 00                	mov    (%eax),%al
f01015c0:	0f b6 c0             	movzbl %al,%eax
f01015c3:	83 ec 08             	sub    $0x8,%esp
f01015c6:	50                   	push   %eax
f01015c7:	68 3e 3c 13 f0       	push   $0xf0133c3e
f01015cc:	e8 5c f6 ff ff       	call   f0100c2d <cprintf>
f01015d1:	83 c4 10             	add    $0x10,%esp
int command_readmem_k(int number_of_arguments, char **arguments)
{
	unsigned char* address = (unsigned char*)strtol(arguments[1], NULL, 16)+KERNEL_BASE;
	int size = strtol(arguments[2], NULL, 10);
	int i=0;
	for(;i < size; i++)
f01015d4:	ff 45 f0             	incl   -0x10(%ebp)
f01015d7:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01015da:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f01015dd:	7c d6                	jl     f01015b5 <command_readmem_k+0x4a>
	{
		cprintf("%c",*address++);
	}
	cprintf("\n");
f01015df:	83 ec 0c             	sub    $0xc,%esp
f01015e2:	68 41 3c 13 f0       	push   $0xf0133c41
f01015e7:	e8 41 f6 ff ff       	call   f0100c2d <cprintf>
f01015ec:	83 c4 10             	add    $0x10,%esp
	return 0;
f01015ef:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01015f4:	c9                   	leave  
f01015f5:	c3                   	ret    

f01015f6 <command_readuserblock>:


int command_readuserblock(int number_of_arguments, char **arguments)
{
f01015f6:	55                   	push   %ebp
f01015f7:	89 e5                	mov    %esp,%ebp
f01015f9:	83 ec 38             	sub    $0x38,%esp
	int32 envId = strtol(arguments[1],NULL, 10);
f01015fc:	8b 45 0c             	mov    0xc(%ebp),%eax
f01015ff:	83 c0 04             	add    $0x4,%eax
f0101602:	8b 00                	mov    (%eax),%eax
f0101604:	83 ec 04             	sub    $0x4,%esp
f0101607:	6a 0a                	push   $0xa
f0101609:	6a 00                	push   $0x0
f010160b:	50                   	push   %eax
f010160c:	e8 7a f4 02 00       	call   f0130a8b <strtol>
f0101611:	83 c4 10             	add    $0x10,%esp
f0101614:	89 45 ec             	mov    %eax,-0x14(%ebp)
	struct Env* env = NULL;
f0101617:	c7 45 d0 00 00 00 00 	movl   $0x0,-0x30(%ebp)
	envid2env(envId, &env, 0 );
f010161e:	83 ec 04             	sub    $0x4,%esp
f0101621:	6a 00                	push   $0x0
f0101623:	8d 45 d0             	lea    -0x30(%ebp),%eax
f0101626:	50                   	push   %eax
f0101627:	ff 75 ec             	pushl  -0x14(%ebp)
f010162a:	e8 9e 7d 00 00       	call   f01093cd <envid2env>
f010162f:	83 c4 10             	add    $0x10,%esp

	int address = strtol(arguments[2], NULL, 16);
f0101632:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101635:	83 c0 08             	add    $0x8,%eax
f0101638:	8b 00                	mov    (%eax),%eax
f010163a:	83 ec 04             	sub    $0x4,%esp
f010163d:	6a 10                	push   $0x10
f010163f:	6a 00                	push   $0x0
f0101641:	50                   	push   %eax
f0101642:	e8 44 f4 02 00       	call   f0130a8b <strtol>
f0101647:	83 c4 10             	add    $0x10,%esp
f010164a:	89 45 e8             	mov    %eax,-0x18(%ebp)
	int nBytes = strtol(arguments[3], NULL, 10);
f010164d:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101650:	83 c0 0c             	add    $0xc,%eax
f0101653:	8b 00                	mov    (%eax),%eax
f0101655:	83 ec 04             	sub    $0x4,%esp
f0101658:	6a 0a                	push   $0xa
f010165a:	6a 00                	push   $0x0
f010165c:	50                   	push   %eax
f010165d:	e8 29 f4 02 00       	call   f0130a8b <strtol>
f0101662:	83 c4 10             	add    $0x10,%esp
f0101665:	89 45 e4             	mov    %eax,-0x1c(%ebp)

	unsigned char *ptr = (unsigned char *)(address) ;
f0101668:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010166b:	89 45 f4             	mov    %eax,-0xc(%ebp)
	//Write the given Character

	if(env == NULL) return 0;
f010166e:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0101671:	85 c0                	test   %eax,%eax
f0101673:	75 07                	jne    f010167c <command_readuserblock+0x86>
f0101675:	b8 00 00 00 00       	mov    $0x0,%eax
f010167a:	eb 65                	jmp    f01016e1 <command_readuserblock+0xeb>

static __inline uint32
rcr3(void)
{
	uint32 val;
	__asm __volatile("movl %%cr3,%0" : "=r" (val));
f010167c:	0f 20 d8             	mov    %cr3,%eax
f010167f:	89 45 d8             	mov    %eax,-0x28(%ebp)
	return val;
f0101682:	8b 45 d8             	mov    -0x28(%ebp),%eax

	uint32 oldDir = rcr3();
f0101685:	89 45 dc             	mov    %eax,-0x24(%ebp)
	//lcr3((uint32) K_PHYSICAL_ADDRESS( env->env_pgdir));
	lcr3((uint32)( env->env_cr3));
f0101688:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010168b:	8b 40 60             	mov    0x60(%eax),%eax
f010168e:	89 45 d4             	mov    %eax,-0x2c(%ebp)
}

static __inline void
lcr3(uint32 val)
{
	__asm __volatile("movl %0,%%cr3" : : "r" (val));
f0101691:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0101694:	0f 22 d8             	mov    %eax,%cr3

	int i;
	for(i = 0;i<nBytes; i++)
f0101697:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f010169e:	eb 28                	jmp    f01016c8 <command_readuserblock+0xd2>
	{
		cprintf("%08x : %02x  %c\n", ptr, *ptr, *ptr);
f01016a0:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01016a3:	8a 00                	mov    (%eax),%al
f01016a5:	0f b6 d0             	movzbl %al,%edx
f01016a8:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01016ab:	8a 00                	mov    (%eax),%al
f01016ad:	0f b6 c0             	movzbl %al,%eax
f01016b0:	52                   	push   %edx
f01016b1:	50                   	push   %eax
f01016b2:	ff 75 f4             	pushl  -0xc(%ebp)
f01016b5:	68 43 3c 13 f0       	push   $0xf0133c43
f01016ba:	e8 6e f5 ff ff       	call   f0100c2d <cprintf>
f01016bf:	83 c4 10             	add    $0x10,%esp
		ptr++;
f01016c2:	ff 45 f4             	incl   -0xc(%ebp)
	uint32 oldDir = rcr3();
	//lcr3((uint32) K_PHYSICAL_ADDRESS( env->env_pgdir));
	lcr3((uint32)( env->env_cr3));

	int i;
	for(i = 0;i<nBytes; i++)
f01016c5:	ff 45 f0             	incl   -0x10(%ebp)
f01016c8:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01016cb:	3b 45 e4             	cmp    -0x1c(%ebp),%eax
f01016ce:	7c d0                	jl     f01016a0 <command_readuserblock+0xaa>
f01016d0:	8b 45 dc             	mov    -0x24(%ebp),%eax
f01016d3:	89 45 e0             	mov    %eax,-0x20(%ebp)
f01016d6:	8b 45 e0             	mov    -0x20(%ebp),%eax
f01016d9:	0f 22 d8             	mov    %eax,%cr3
		cprintf("%08x : %02x  %c\n", ptr, *ptr, *ptr);
		ptr++;
	}
	lcr3(oldDir);

	return 0;
f01016dc:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01016e1:	c9                   	leave  
f01016e2:	c3                   	ret    

f01016e3 <command_remove_table>:

int command_remove_table(int number_of_arguments, char **arguments)
{
f01016e3:	55                   	push   %ebp
f01016e4:	89 e5                	mov    %esp,%ebp
f01016e6:	83 ec 28             	sub    $0x28,%esp
	int32 envId = strtol(arguments[1],NULL, 10);
f01016e9:	8b 45 0c             	mov    0xc(%ebp),%eax
f01016ec:	83 c0 04             	add    $0x4,%eax
f01016ef:	8b 00                	mov    (%eax),%eax
f01016f1:	83 ec 04             	sub    $0x4,%esp
f01016f4:	6a 0a                	push   $0xa
f01016f6:	6a 00                	push   $0x0
f01016f8:	50                   	push   %eax
f01016f9:	e8 8d f3 02 00       	call   f0130a8b <strtol>
f01016fe:	83 c4 10             	add    $0x10,%esp
f0101701:	89 45 f4             	mov    %eax,-0xc(%ebp)
	struct Env* env = NULL;
f0101704:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
	envid2env(envId, &env, 0 );
f010170b:	83 ec 04             	sub    $0x4,%esp
f010170e:	6a 00                	push   $0x0
f0101710:	8d 45 d8             	lea    -0x28(%ebp),%eax
f0101713:	50                   	push   %eax
f0101714:	ff 75 f4             	pushl  -0xc(%ebp)
f0101717:	e8 b1 7c 00 00       	call   f01093cd <envid2env>
f010171c:	83 c4 10             	add    $0x10,%esp
	if(env == 0) return 0;
f010171f:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0101722:	85 c0                	test   %eax,%eax
f0101724:	75 0a                	jne    f0101730 <command_remove_table+0x4d>
f0101726:	b8 00 00 00 00       	mov    $0x0,%eax
f010172b:	e9 a1 00 00 00       	jmp    f01017d1 <command_remove_table+0xee>

	uint32 address = strtol(arguments[2], NULL, 16);
f0101730:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101733:	83 c0 08             	add    $0x8,%eax
f0101736:	8b 00                	mov    (%eax),%eax
f0101738:	83 ec 04             	sub    $0x4,%esp
f010173b:	6a 10                	push   $0x10
f010173d:	6a 00                	push   $0x0
f010173f:	50                   	push   %eax
f0101740:	e8 46 f3 02 00       	call   f0130a8b <strtol>
f0101745:	83 c4 10             	add    $0x10,%esp
f0101748:	89 45 f0             	mov    %eax,-0x10(%ebp)
	unsigned char *va = (unsigned char *)(address) ;
f010174b:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010174e:	89 45 ec             	mov    %eax,-0x14(%ebp)
	uint32 table_pa = env->env_page_directory[PDX(address)] & 0xFFFFF000;
f0101751:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0101754:	8b 40 5c             	mov    0x5c(%eax),%eax
f0101757:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010175a:	c1 ea 16             	shr    $0x16,%edx
f010175d:	c1 e2 02             	shl    $0x2,%edx
f0101760:	01 d0                	add    %edx,%eax
f0101762:	8b 00                	mov    (%eax),%eax
f0101764:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0101769:	89 45 e8             	mov    %eax,-0x18(%ebp)
		kfree((void*)kheap_virtual_address(table_pa));
	}
	else
	{
		// get the physical address and FrameInfo of the page table
		struct FrameInfo *table_FrameInfo = to_frame_info(table_pa);
f010176c:	83 ec 0c             	sub    $0xc,%esp
f010176f:	ff 75 e8             	pushl  -0x18(%ebp)
f0101772:	e8 cf f7 ff ff       	call   f0100f46 <to_frame_info>
f0101777:	83 c4 10             	add    $0x10,%esp
f010177a:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		// set references of the table frame to 0 then free it by adding
		// to the free frame list
		table_FrameInfo->references = 0;
f010177d:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0101780:	66 c7 40 08 00 00    	movw   $0x0,0x8(%eax)
		free_frame(table_FrameInfo);
f0101786:	83 ec 0c             	sub    $0xc,%esp
f0101789:	ff 75 e4             	pushl  -0x1c(%ebp)
f010178c:	e8 2e 51 00 00       	call   f01068bf <free_frame>
f0101791:	83 c4 10             	add    $0x10,%esp
	}

	// set the corresponding entry in the directory to 0
	uint32 dir_index = PDX(va);
f0101794:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0101797:	c1 e8 16             	shr    $0x16,%eax
f010179a:	89 45 e0             	mov    %eax,-0x20(%ebp)
	env->env_page_directory[dir_index] &= (~PERM_PRESENT);
f010179d:	8b 45 d8             	mov    -0x28(%ebp),%eax
f01017a0:	8b 40 5c             	mov    0x5c(%eax),%eax
f01017a3:	8b 55 e0             	mov    -0x20(%ebp),%edx
f01017a6:	c1 e2 02             	shl    $0x2,%edx
f01017a9:	01 c2                	add    %eax,%edx
f01017ab:	8b 45 d8             	mov    -0x28(%ebp),%eax
f01017ae:	8b 40 5c             	mov    0x5c(%eax),%eax
f01017b1:	8b 4d e0             	mov    -0x20(%ebp),%ecx
f01017b4:	c1 e1 02             	shl    $0x2,%ecx
f01017b7:	01 c8                	add    %ecx,%eax
f01017b9:	8b 00                	mov    (%eax),%eax
f01017bb:	83 e0 fe             	and    $0xfffffffe,%eax
f01017be:	89 02                	mov    %eax,(%edx)

static __inline void
tlbflush(void)
{
	uint32 cr3;
	__asm __volatile("movl %%cr3,%0" : "=r" (cr3));
f01017c0:	0f 20 d8             	mov    %cr3,%eax
f01017c3:	89 45 dc             	mov    %eax,-0x24(%ebp)
	__asm __volatile("movl %0,%%cr3" : : "r" (cr3));
f01017c6:	8b 45 dc             	mov    -0x24(%ebp),%eax
f01017c9:	0f 22 d8             	mov    %eax,%cr3
	tlbflush();
	return 0;
f01017cc:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01017d1:	c9                   	leave  
f01017d2:	c3                   	ret    

f01017d3 <command_allocuserpage>:

int command_allocuserpage(int number_of_arguments, char **arguments)
{
f01017d3:	55                   	push   %ebp
f01017d4:	89 e5                	mov    %esp,%ebp
f01017d6:	83 ec 28             	sub    $0x28,%esp
	if (number_of_arguments < 3 || number_of_arguments > 4)
f01017d9:	83 7d 08 02          	cmpl   $0x2,0x8(%ebp)
f01017dd:	7e 06                	jle    f01017e5 <command_allocuserpage+0x12>
f01017df:	83 7d 08 04          	cmpl   $0x4,0x8(%ebp)
f01017e3:	7e 1a                	jle    f01017ff <command_allocuserpage+0x2c>
	{
		cprintf("aup command: invalid number of arguments\n") ;
f01017e5:	83 ec 0c             	sub    $0xc,%esp
f01017e8:	68 54 3c 13 f0       	push   $0xf0133c54
f01017ed:	e8 3b f4 ff ff       	call   f0100c2d <cprintf>
f01017f2:	83 c4 10             	add    $0x10,%esp
		return 0;
f01017f5:	b8 00 00 00 00       	mov    $0x0,%eax
f01017fa:	e9 46 01 00 00       	jmp    f0101945 <command_allocuserpage+0x172>
	}
	int32 envId = strtol(arguments[1],NULL, 10);
f01017ff:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101802:	83 c0 04             	add    $0x4,%eax
f0101805:	8b 00                	mov    (%eax),%eax
f0101807:	83 ec 04             	sub    $0x4,%esp
f010180a:	6a 0a                	push   $0xa
f010180c:	6a 00                	push   $0x0
f010180e:	50                   	push   %eax
f010180f:	e8 77 f2 02 00       	call   f0130a8b <strtol>
f0101814:	83 c4 10             	add    $0x10,%esp
f0101817:	89 45 f0             	mov    %eax,-0x10(%ebp)
	struct Env* env = NULL;
f010181a:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)

	envid2env(envId, &env, 0 );
f0101821:	83 ec 04             	sub    $0x4,%esp
f0101824:	6a 00                	push   $0x0
f0101826:	8d 45 e4             	lea    -0x1c(%ebp),%eax
f0101829:	50                   	push   %eax
f010182a:	ff 75 f0             	pushl  -0x10(%ebp)
f010182d:	e8 9b 7b 00 00       	call   f01093cd <envid2env>
f0101832:	83 c4 10             	add    $0x10,%esp
	if(env == 0) return 0;
f0101835:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0101838:	85 c0                	test   %eax,%eax
f010183a:	75 0a                	jne    f0101846 <command_allocuserpage+0x73>
f010183c:	b8 00 00 00 00       	mov    $0x0,%eax
f0101841:	e9 ff 00 00 00       	jmp    f0101945 <command_allocuserpage+0x172>

	uint32 va = strtol(arguments[2], NULL, 16);
f0101846:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101849:	83 c0 08             	add    $0x8,%eax
f010184c:	8b 00                	mov    (%eax),%eax
f010184e:	83 ec 04             	sub    $0x4,%esp
f0101851:	6a 10                	push   $0x10
f0101853:	6a 00                	push   $0x0
f0101855:	50                   	push   %eax
f0101856:	e8 30 f2 02 00       	call   f0130a8b <strtol>
f010185b:	83 c4 10             	add    $0x10,%esp
f010185e:	89 45 ec             	mov    %eax,-0x14(%ebp)

	// Allocate a single frame from the free frame list
	struct FrameInfo * ptr_FrameInfo ;
	int ret = allocate_frame(&ptr_FrameInfo);
f0101861:	83 ec 0c             	sub    $0xc,%esp
f0101864:	8d 45 e0             	lea    -0x20(%ebp),%eax
f0101867:	50                   	push   %eax
f0101868:	e8 3d 4f 00 00       	call   f01067aa <allocate_frame>
f010186d:	83 c4 10             	add    $0x10,%esp
f0101870:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if (ret == E_NO_MEM)
f0101873:	83 7d e8 fc          	cmpl   $0xfffffffc,-0x18(%ebp)
f0101877:	75 1a                	jne    f0101893 <command_allocuserpage+0xc0>
	{
		cprintf("ERROR: no enough memory\n");
f0101879:	83 ec 0c             	sub    $0xc,%esp
f010187c:	68 7e 3c 13 f0       	push   $0xf0133c7e
f0101881:	e8 a7 f3 ff ff       	call   f0100c2d <cprintf>
f0101886:	83 c4 10             	add    $0x10,%esp
		return 0;
f0101889:	b8 00 00 00 00       	mov    $0x0,%eax
f010188e:	e9 b2 00 00 00       	jmp    f0101945 <command_allocuserpage+0x172>
	}

	if (number_of_arguments == 3)
f0101893:	83 7d 08 03          	cmpl   $0x3,0x8(%ebp)
f0101897:	75 1d                	jne    f01018b6 <command_allocuserpage+0xe3>
	{
		// Map this frame to the given user virtual address with PERM_WRITEABLE
		map_frame(env->env_page_directory, ptr_FrameInfo, va, PERM_WRITEABLE | PERM_USER);
f0101899:	8b 55 e0             	mov    -0x20(%ebp),%edx
f010189c:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010189f:	8b 40 5c             	mov    0x5c(%eax),%eax
f01018a2:	6a 06                	push   $0x6
f01018a4:	ff 75 ec             	pushl  -0x14(%ebp)
f01018a7:	52                   	push   %edx
f01018a8:	50                   	push   %eax
f01018a9:	e8 94 52 00 00       	call   f0106b42 <map_frame>
f01018ae:	83 c4 10             	add    $0x10,%esp
f01018b1:	e9 8a 00 00 00       	jmp    f0101940 <command_allocuserpage+0x16d>
	}
	else if (number_of_arguments == 4)
f01018b6:	83 7d 08 04          	cmpl   $0x4,0x8(%ebp)
f01018ba:	0f 85 80 00 00 00    	jne    f0101940 <command_allocuserpage+0x16d>
	{
		// Map this frame to the given user virtual address with the given permission
		uint32 rw ;
		if (arguments[3][0] == 'r' || arguments[3][0] == 'R')
f01018c0:	8b 45 0c             	mov    0xc(%ebp),%eax
f01018c3:	83 c0 0c             	add    $0xc,%eax
f01018c6:	8b 00                	mov    (%eax),%eax
f01018c8:	8a 00                	mov    (%eax),%al
f01018ca:	3c 72                	cmp    $0x72,%al
f01018cc:	74 0e                	je     f01018dc <command_allocuserpage+0x109>
f01018ce:	8b 45 0c             	mov    0xc(%ebp),%eax
f01018d1:	83 c0 0c             	add    $0xc,%eax
f01018d4:	8b 00                	mov    (%eax),%eax
f01018d6:	8a 00                	mov    (%eax),%al
f01018d8:	3c 52                	cmp    $0x52,%al
f01018da:	75 09                	jne    f01018e5 <command_allocuserpage+0x112>
			rw = 0 ;
f01018dc:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01018e3:	eb 3c                	jmp    f0101921 <command_allocuserpage+0x14e>
		else if (arguments[3][0] == 'w' || arguments[3][0] == 'W')
f01018e5:	8b 45 0c             	mov    0xc(%ebp),%eax
f01018e8:	83 c0 0c             	add    $0xc,%eax
f01018eb:	8b 00                	mov    (%eax),%eax
f01018ed:	8a 00                	mov    (%eax),%al
f01018ef:	3c 77                	cmp    $0x77,%al
f01018f1:	74 0e                	je     f0101901 <command_allocuserpage+0x12e>
f01018f3:	8b 45 0c             	mov    0xc(%ebp),%eax
f01018f6:	83 c0 0c             	add    $0xc,%eax
f01018f9:	8b 00                	mov    (%eax),%eax
f01018fb:	8a 00                	mov    (%eax),%al
f01018fd:	3c 57                	cmp    $0x57,%al
f01018ff:	75 09                	jne    f010190a <command_allocuserpage+0x137>
			rw = PERM_WRITEABLE ;
f0101901:	c7 45 f4 02 00 00 00 	movl   $0x2,-0xc(%ebp)
f0101908:	eb 17                	jmp    f0101921 <command_allocuserpage+0x14e>
		else
		{
			cprintf("aup command: wrong permission (r/w)... will continue as writable\n") ;
f010190a:	83 ec 0c             	sub    $0xc,%esp
f010190d:	68 98 3c 13 f0       	push   $0xf0133c98
f0101912:	e8 16 f3 ff ff       	call   f0100c2d <cprintf>
f0101917:	83 c4 10             	add    $0x10,%esp
			rw = PERM_WRITEABLE ;
f010191a:	c7 45 f4 02 00 00 00 	movl   $0x2,-0xc(%ebp)
		}

		map_frame(env->env_page_directory, ptr_FrameInfo, va, rw | PERM_USER);
f0101921:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0101924:	83 c8 04             	or     $0x4,%eax
f0101927:	89 c1                	mov    %eax,%ecx
f0101929:	8b 55 e0             	mov    -0x20(%ebp),%edx
f010192c:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010192f:	8b 40 5c             	mov    0x5c(%eax),%eax
f0101932:	51                   	push   %ecx
f0101933:	ff 75 ec             	pushl  -0x14(%ebp)
f0101936:	52                   	push   %edx
f0101937:	50                   	push   %eax
f0101938:	e8 05 52 00 00       	call   f0106b42 <map_frame>
f010193d:	83 c4 10             	add    $0x10,%esp
	}
	return 0;
f0101940:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0101945:	c9                   	leave  
f0101946:	c3                   	ret    

f0101947 <command_meminfo>:

int command_meminfo(int number_of_arguments, char **arguments)
{
f0101947:	55                   	push   %ebp
f0101948:	89 e5                	mov    %esp,%ebp
f010194a:	56                   	push   %esi
f010194b:	53                   	push   %ebx
f010194c:	83 ec 10             	sub    $0x10,%esp
	struct freeFramesCounters counters =calculate_available_frames();
f010194f:	8d 45 ec             	lea    -0x14(%ebp),%eax
f0101952:	83 ec 0c             	sub    $0xc,%esp
f0101955:	50                   	push   %eax
f0101956:	e8 57 54 00 00       	call   f0106db2 <calculate_available_frames>
f010195b:	83 c4 0c             	add    $0xc,%esp
	cprintf("Total available frames = %d\nFree Buffered = %d\nFree Not Buffered = %d\nModified = %d\n",
f010195e:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0101961:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0101964:	8b 45 ec             	mov    -0x14(%ebp),%eax
			counters.freeBuffered+ counters.freeNotBuffered+ counters.modified, counters.freeBuffered, counters.freeNotBuffered, counters.modified);
f0101967:	8b 75 ec             	mov    -0x14(%ebp),%esi
f010196a:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f010196d:	01 de                	add    %ebx,%esi
f010196f:	8b 5d f4             	mov    -0xc(%ebp),%ebx
}

int command_meminfo(int number_of_arguments, char **arguments)
{
	struct freeFramesCounters counters =calculate_available_frames();
	cprintf("Total available frames = %d\nFree Buffered = %d\nFree Not Buffered = %d\nModified = %d\n",
f0101972:	01 f3                	add    %esi,%ebx
f0101974:	83 ec 0c             	sub    $0xc,%esp
f0101977:	51                   	push   %ecx
f0101978:	52                   	push   %edx
f0101979:	50                   	push   %eax
f010197a:	53                   	push   %ebx
f010197b:	68 dc 3c 13 f0       	push   $0xf0133cdc
f0101980:	e8 a8 f2 ff ff       	call   f0100c2d <cprintf>
f0101985:	83 c4 20             	add    $0x20,%esp
			counters.freeBuffered+ counters.freeNotBuffered+ counters.modified, counters.freeBuffered, counters.freeNotBuffered, counters.modified);

	cprintf("Num of calls for kheap_virtual_address [in last run] = %d\n", numOfKheapVACalls);
f0101988:	a1 b0 0e 6c f0       	mov    0xf06c0eb0,%eax
f010198d:	83 ec 08             	sub    $0x8,%esp
f0101990:	50                   	push   %eax
f0101991:	68 34 3d 13 f0       	push   $0xf0133d34
f0101996:	e8 92 f2 ff ff       	call   f0100c2d <cprintf>
f010199b:	83 c4 10             	add    $0x10,%esp

	return 0;
f010199e:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01019a3:	8d 65 f8             	lea    -0x8(%ebp),%esp
f01019a6:	5b                   	pop    %ebx
f01019a7:	5e                   	pop    %esi
f01019a8:	5d                   	pop    %ebp
f01019a9:	c3                   	ret    

f01019aa <CreateEnv>:

//2020
struct Env * CreateEnv(int number_of_arguments, char **arguments)
{
f01019aa:	55                   	push   %ebp
f01019ab:	89 e5                	mov    %esp,%ebp
f01019ad:	83 ec 18             	sub    $0x18,%esp
	struct Env* env;
	uint32 pageWSSize = __PWS_MAX_SIZE;		//arg#3 default
f01019b0:	c7 45 ec 88 13 00 00 	movl   $0x1388,-0x14(%ebp)
	uint32 LRUSecondListSize = 0;			//arg#4 default
f01019b7:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	uint32 percent_WS_pages_to_remove = 0;	//arg#5 default
f01019be:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
		assert(percent_WS_pages_to_remove >= 0 && percent_WS_pages_to_remove <= 100);

	}
#else
	{
		switch (number_of_arguments)
f01019c5:	8b 45 08             	mov    0x8(%ebp),%eax
f01019c8:	83 f8 02             	cmp    $0x2,%eax
f01019cb:	74 39                	je     f0101a06 <CreateEnv+0x5c>
f01019cd:	83 f8 03             	cmp    $0x3,%eax
f01019d0:	75 1d                	jne    f01019ef <CreateEnv+0x45>
		{
		case 3:
			percent_WS_pages_to_remove = strtol(arguments[2], NULL, 10);
f01019d2:	8b 45 0c             	mov    0xc(%ebp),%eax
f01019d5:	83 c0 08             	add    $0x8,%eax
f01019d8:	8b 00                	mov    (%eax),%eax
f01019da:	83 ec 04             	sub    $0x4,%esp
f01019dd:	6a 0a                	push   $0xa
f01019df:	6a 00                	push   $0x0
f01019e1:	50                   	push   %eax
f01019e2:	e8 a4 f0 02 00       	call   f0130a8b <strtol>
f01019e7:	83 c4 10             	add    $0x10,%esp
f01019ea:	89 45 f0             	mov    %eax,-0x10(%ebp)
		case 2:
			break;
f01019ed:	eb 17                	jmp    f0101a06 <CreateEnv+0x5c>
		default:
			cprintf("ERROR: invalid number of args\nUsage: <command> <prog_name> [<DYN_LOC_SCOPE_percent_WS_to_remove>]\naborting...\n");
f01019ef:	83 ec 0c             	sub    $0xc,%esp
f01019f2:	68 70 3d 13 f0       	push   $0xf0133d70
f01019f7:	e8 31 f2 ff ff       	call   f0100c2d <cprintf>
f01019fc:	83 c4 10             	add    $0x10,%esp
			return NULL;
f01019ff:	b8 00 00 00 00       	mov    $0x0,%eax
f0101a04:	eb 58                	jmp    f0101a5e <CreateEnv+0xb4>
		switch (number_of_arguments)
		{
		case 3:
			percent_WS_pages_to_remove = strtol(arguments[2], NULL, 10);
		case 2:
			break;
f0101a06:	90                   	nop
			cprintf("ERROR: invalid number of args\nUsage: <command> <prog_name> [<DYN_LOC_SCOPE_percent_WS_to_remove>]\naborting...\n");
			return NULL;

			break;
		}
		if(isPageReplacmentAlgorithmLRU(PG_REP_LRU_LISTS_APPROX))
f0101a07:	83 ec 0c             	sub    $0xc,%esp
f0101a0a:	6a 02                	push   $0x2
f0101a0c:	e8 5c bb 00 00       	call   f010d56d <isPageReplacmentAlgorithmLRU>
f0101a11:	83 c4 10             	add    $0x10,%esp
f0101a14:	85 c0                	test   %eax,%eax
f0101a16:	74 07                	je     f0101a1f <CreateEnv+0x75>
		{
			LRUSecondListSize = __LRU_SNDLST_SIZE;
f0101a18:	c7 45 f4 f4 01 00 00 	movl   $0x1f4,-0xc(%ebp)
		}
	}
#endif
	assert(percent_WS_pages_to_remove >= 0 && percent_WS_pages_to_remove <= 100);
f0101a1f:	83 7d f0 64          	cmpl   $0x64,-0x10(%ebp)
f0101a23:	76 19                	jbe    f0101a3e <CreateEnv+0x94>
f0101a25:	68 e0 3d 13 f0       	push   $0xf0133de0
f0101a2a:	68 25 3e 13 f0       	push   $0xf0133e25
f0101a2f:	68 71 02 00 00       	push   $0x271
f0101a34:	68 b9 3b 13 f0       	push   $0xf0133bb9
f0101a39:	e8 68 e7 ff ff       	call   f01001a6 <_panic>
	env = env_create(arguments[1], pageWSSize, LRUSecondListSize, percent_WS_pages_to_remove);
f0101a3e:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101a41:	83 c0 04             	add    $0x4,%eax
f0101a44:	8b 00                	mov    (%eax),%eax
f0101a46:	ff 75 f0             	pushl  -0x10(%ebp)
f0101a49:	ff 75 f4             	pushl  -0xc(%ebp)
f0101a4c:	ff 75 ec             	pushl  -0x14(%ebp)
f0101a4f:	50                   	push   %eax
f0101a50:	e8 1d 6c 00 00       	call   f0108672 <env_create>
f0101a55:	83 c4 10             	add    $0x10,%esp
f0101a58:	89 45 e8             	mov    %eax,-0x18(%ebp)

	return env;
f0101a5b:	8b 45 e8             	mov    -0x18(%ebp),%eax
}
f0101a5e:	c9                   	leave  
f0101a5f:	c3                   	ret    

f0101a60 <command_run_program>:

int command_run_program(int number_of_arguments, char **arguments)
{
f0101a60:	55                   	push   %ebp
f0101a61:	89 e5                	mov    %esp,%ebp
f0101a63:	83 ec 18             	sub    $0x18,%esp
	//[1] Create and initialize a new environment for the program to be run
	struct Env *env = CreateEnv(number_of_arguments, arguments);
f0101a66:	83 ec 08             	sub    $0x8,%esp
f0101a69:	ff 75 0c             	pushl  0xc(%ebp)
f0101a6c:	ff 75 08             	pushl  0x8(%ebp)
f0101a6f:	e8 36 ff ff ff       	call   f01019aa <CreateEnv>
f0101a74:	83 c4 10             	add    $0x10,%esp
f0101a77:	89 45 f4             	mov    %eax,-0xc(%ebp)

	if(env == NULL) return 0;
f0101a7a:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0101a7e:	75 07                	jne    f0101a87 <command_run_program+0x27>
f0101a80:	b8 00 00 00 00       	mov    $0x0,%eax
f0101a85:	eb 46                	jmp    f0101acd <command_run_program+0x6d>
	cprintf("\nEnvironment Id= %d\n",env->env_id);
f0101a87:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0101a8a:	8b 40 4c             	mov    0x4c(%eax),%eax
f0101a8d:	83 ec 08             	sub    $0x8,%esp
f0101a90:	50                   	push   %eax
f0101a91:	68 3a 3e 13 f0       	push   $0xf0133e3a
f0101a96:	e8 92 f1 ff ff       	call   f0100c2d <cprintf>
f0101a9b:	83 c4 10             	add    $0x10,%esp

	numOfKheapVACalls = 0;
f0101a9e:	c7 05 b0 0e 6c f0 00 	movl   $0x0,0xf06c0eb0
f0101aa5:	00 00 00 

	//[2] Run the created environment by adding it to the "ready" queue then invoke the scheduler to execute it
	sched_new_env(env);
f0101aa8:	83 ec 0c             	sub    $0xc,%esp
f0101aab:	ff 75 f4             	pushl  -0xc(%ebp)
f0101aae:	e8 c4 35 00 00       	call   f0105077 <sched_new_env>
f0101ab3:	83 c4 10             	add    $0x10,%esp
	sched_run_env(env->env_id);
f0101ab6:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0101ab9:	8b 40 4c             	mov    0x4c(%eax),%eax
f0101abc:	83 ec 0c             	sub    $0xc,%esp
f0101abf:	50                   	push   %eax
f0101ac0:	e8 cf 35 00 00       	call   f0105094 <sched_run_env>
f0101ac5:	83 c4 10             	add    $0x10,%esp

	return 0;
f0101ac8:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0101acd:	c9                   	leave  
f0101ace:	c3                   	ret    

f0101acf <command_kill_program>:

int command_kill_program(int number_of_arguments, char **arguments)
{
f0101acf:	55                   	push   %ebp
f0101ad0:	89 e5                	mov    %esp,%ebp
f0101ad2:	83 ec 18             	sub    $0x18,%esp
	int32 envId = strtol(arguments[1],NULL, 10);
f0101ad5:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101ad8:	83 c0 04             	add    $0x4,%eax
f0101adb:	8b 00                	mov    (%eax),%eax
f0101add:	83 ec 04             	sub    $0x4,%esp
f0101ae0:	6a 0a                	push   $0xa
f0101ae2:	6a 00                	push   $0x0
f0101ae4:	50                   	push   %eax
f0101ae5:	e8 a1 ef 02 00       	call   f0130a8b <strtol>
f0101aea:	83 c4 10             	add    $0x10,%esp
f0101aed:	89 45 f4             	mov    %eax,-0xc(%ebp)

	sched_kill_env(envId);
f0101af0:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0101af3:	83 ec 0c             	sub    $0xc,%esp
f0101af6:	50                   	push   %eax
f0101af7:	e8 c4 39 00 00       	call   f01054c0 <sched_kill_env>
f0101afc:	83 c4 10             	add    $0x10,%esp

	return 0;
f0101aff:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0101b04:	c9                   	leave  
f0101b05:	c3                   	ret    

f0101b06 <commnad_load_env>:

int commnad_load_env(int number_of_arguments, char **arguments)
{
f0101b06:	55                   	push   %ebp
f0101b07:	89 e5                	mov    %esp,%ebp
f0101b09:	83 ec 18             	sub    $0x18,%esp
	struct Env *env = CreateEnv(number_of_arguments, arguments);
f0101b0c:	83 ec 08             	sub    $0x8,%esp
f0101b0f:	ff 75 0c             	pushl  0xc(%ebp)
f0101b12:	ff 75 08             	pushl  0x8(%ebp)
f0101b15:	e8 90 fe ff ff       	call   f01019aa <CreateEnv>
f0101b1a:	83 c4 10             	add    $0x10,%esp
f0101b1d:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if (env == NULL)
f0101b20:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0101b24:	75 07                	jne    f0101b2d <commnad_load_env+0x27>
		return 0 ;
f0101b26:	b8 00 00 00 00       	mov    $0x0,%eax
f0101b2b:	eb 2a                	jmp    f0101b57 <commnad_load_env+0x51>

	sched_new_env(env) ;
f0101b2d:	83 ec 0c             	sub    $0xc,%esp
f0101b30:	ff 75 f4             	pushl  -0xc(%ebp)
f0101b33:	e8 3f 35 00 00       	call   f0105077 <sched_new_env>
f0101b38:	83 c4 10             	add    $0x10,%esp

	cprintf("\nEnvironment Id= %d\n",env->env_id);
f0101b3b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0101b3e:	8b 40 4c             	mov    0x4c(%eax),%eax
f0101b41:	83 ec 08             	sub    $0x8,%esp
f0101b44:	50                   	push   %eax
f0101b45:	68 3a 3e 13 f0       	push   $0xf0133e3a
f0101b4a:	e8 de f0 ff ff       	call   f0100c2d <cprintf>
f0101b4f:	83 c4 10             	add    $0x10,%esp
	return 0;
f0101b52:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0101b57:	c9                   	leave  
f0101b58:	c3                   	ret    

f0101b59 <command_run_all>:

int command_run_all(int number_of_arguments, char **arguments)
{
f0101b59:	55                   	push   %ebp
f0101b5a:	89 e5                	mov    %esp,%ebp
f0101b5c:	83 ec 08             	sub    $0x8,%esp
	numOfKheapVACalls = 0;
f0101b5f:	c7 05 b0 0e 6c f0 00 	movl   $0x0,0xf06c0eb0
f0101b66:	00 00 00 
	sched_run_all();
f0101b69:	e8 4a 31 00 00       	call   f0104cb8 <sched_run_all>

	return 0 ;
f0101b6e:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0101b73:	c9                   	leave  
f0101b74:	c3                   	ret    

f0101b75 <command_print_all>:

int command_print_all(int number_of_arguments, char **arguments)
{
f0101b75:	55                   	push   %ebp
f0101b76:	89 e5                	mov    %esp,%ebp
f0101b78:	83 ec 08             	sub    $0x8,%esp
	sched_print_all();
f0101b7b:	e8 2d 2f 00 00       	call   f0104aad <sched_print_all>

	return 0 ;
f0101b80:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0101b85:	c9                   	leave  
f0101b86:	c3                   	ret    

f0101b87 <command_kill_all>:

int command_kill_all(int number_of_arguments, char **arguments)
{
f0101b87:	55                   	push   %ebp
f0101b88:	89 e5                	mov    %esp,%ebp
f0101b8a:	83 ec 08             	sub    $0x8,%esp
	sched_kill_all();
f0101b8d:	e8 99 31 00 00       	call   f0104d2b <sched_kill_all>

	return 0 ;
f0101b92:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0101b97:	c9                   	leave  
f0101b98:	c3                   	ret    

f0101b99 <command_set_page_rep_LRU>:

int command_set_page_rep_LRU(int number_of_arguments, char **arguments)
{
f0101b99:	55                   	push   %ebp
f0101b9a:	89 e5                	mov    %esp,%ebp
f0101b9c:	83 ec 18             	sub    $0x18,%esp
	if (number_of_arguments < 2)
f0101b9f:	83 7d 08 01          	cmpl   $0x1,0x8(%ebp)
f0101ba3:	7f 1a                	jg     f0101bbf <command_set_page_rep_LRU+0x26>
	{
		cprintf("ERROR: please specify the LRU Approx Type (1: TimeStamp Approx, 2: Lists Approx), aborting...\n");
f0101ba5:	83 ec 0c             	sub    $0xc,%esp
f0101ba8:	68 50 3e 13 f0       	push   $0xf0133e50
f0101bad:	e8 7b f0 ff ff       	call   f0100c2d <cprintf>
f0101bb2:	83 c4 10             	add    $0x10,%esp
		return 0;
f0101bb5:	b8 00 00 00 00       	mov    $0x0,%eax
f0101bba:	e9 83 00 00 00       	jmp    f0101c42 <command_set_page_rep_LRU+0xa9>
	}
	int LRU_TYPE = strtol(arguments[1], NULL, 10) ;
f0101bbf:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101bc2:	83 c0 04             	add    $0x4,%eax
f0101bc5:	8b 00                	mov    (%eax),%eax
f0101bc7:	83 ec 04             	sub    $0x4,%esp
f0101bca:	6a 0a                	push   $0xa
f0101bcc:	6a 00                	push   $0x0
f0101bce:	50                   	push   %eax
f0101bcf:	e8 b7 ee 02 00       	call   f0130a8b <strtol>
f0101bd4:	83 c4 10             	add    $0x10,%esp
f0101bd7:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if (LRU_TYPE == PG_REP_LRU_TIME_APPROX)
f0101bda:	83 7d f4 01          	cmpl   $0x1,-0xc(%ebp)
f0101bde:	75 20                	jne    f0101c00 <command_set_page_rep_LRU+0x67>
	{
		setPageReplacmentAlgorithmLRU(LRU_TYPE);
f0101be0:	83 ec 0c             	sub    $0xc,%esp
f0101be3:	ff 75 f4             	pushl  -0xc(%ebp)
f0101be6:	e8 f7 b8 00 00       	call   f010d4e2 <setPageReplacmentAlgorithmLRU>
f0101beb:	83 c4 10             	add    $0x10,%esp
		cprintf("Page replacement algorithm is now LRU with TimeStamp approximation\n");
f0101bee:	83 ec 0c             	sub    $0xc,%esp
f0101bf1:	68 b0 3e 13 f0       	push   $0xf0133eb0
f0101bf6:	e8 32 f0 ff ff       	call   f0100c2d <cprintf>
f0101bfb:	83 c4 10             	add    $0x10,%esp
f0101bfe:	eb 3d                	jmp    f0101c3d <command_set_page_rep_LRU+0xa4>
	}
	else if (LRU_TYPE == PG_REP_LRU_LISTS_APPROX)
f0101c00:	83 7d f4 02          	cmpl   $0x2,-0xc(%ebp)
f0101c04:	75 20                	jne    f0101c26 <command_set_page_rep_LRU+0x8d>
	{
		setPageReplacmentAlgorithmLRU(LRU_TYPE);
f0101c06:	83 ec 0c             	sub    $0xc,%esp
f0101c09:	ff 75 f4             	pushl  -0xc(%ebp)
f0101c0c:	e8 d1 b8 00 00       	call   f010d4e2 <setPageReplacmentAlgorithmLRU>
f0101c11:	83 c4 10             	add    $0x10,%esp
		cprintf("Page replacement algorithm is now LRU with LISTS approximation\n");
f0101c14:	83 ec 0c             	sub    $0xc,%esp
f0101c17:	68 f4 3e 13 f0       	push   $0xf0133ef4
f0101c1c:	e8 0c f0 ff ff       	call   f0100c2d <cprintf>
f0101c21:	83 c4 10             	add    $0x10,%esp
f0101c24:	eb 17                	jmp    f0101c3d <command_set_page_rep_LRU+0xa4>
	}
	else
	{
		cprintf("ERROR: Invalid LRU Approx Type (1: TimeStamp Approx, 2: Lists Approx), aborting...\n");
f0101c26:	83 ec 0c             	sub    $0xc,%esp
f0101c29:	68 34 3f 13 f0       	push   $0xf0133f34
f0101c2e:	e8 fa ef ff ff       	call   f0100c2d <cprintf>
f0101c33:	83 c4 10             	add    $0x10,%esp
		return 0;
f0101c36:	b8 00 00 00 00       	mov    $0x0,%eax
f0101c3b:	eb 05                	jmp    f0101c42 <command_set_page_rep_LRU+0xa9>
	}
	return 0;
f0101c3d:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0101c42:	c9                   	leave  
f0101c43:	c3                   	ret    

f0101c44 <command_set_page_rep_nthCLOCK>:
//2021
int command_set_page_rep_nthCLOCK(int number_of_arguments, char **arguments)
{
f0101c44:	55                   	push   %ebp
f0101c45:	89 e5                	mov    %esp,%ebp
f0101c47:	83 ec 18             	sub    $0x18,%esp
	uint32 PageWSMaxSweeps = strtol(arguments[1], NULL, 10);
f0101c4a:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101c4d:	83 c0 04             	add    $0x4,%eax
f0101c50:	8b 00                	mov    (%eax),%eax
f0101c52:	83 ec 04             	sub    $0x4,%esp
f0101c55:	6a 0a                	push   $0xa
f0101c57:	6a 00                	push   $0x0
f0101c59:	50                   	push   %eax
f0101c5a:	e8 2c ee 02 00       	call   f0130a8b <strtol>
f0101c5f:	83 c4 10             	add    $0x10,%esp
f0101c62:	89 45 f4             	mov    %eax,-0xc(%ebp)
	setPageReplacmentAlgorithmNchanceCLOCK(PageWSMaxSweeps);
f0101c65:	83 ec 0c             	sub    $0xc,%esp
f0101c68:	ff 75 f4             	pushl  -0xc(%ebp)
f0101c6b:	e8 e5 b8 00 00       	call   f010d555 <setPageReplacmentAlgorithmNchanceCLOCK>
f0101c70:	83 c4 10             	add    $0x10,%esp
	cprintf("Page replacement algorithm is now N chance CLOCK\n");
f0101c73:	83 ec 0c             	sub    $0xc,%esp
f0101c76:	68 88 3f 13 f0       	push   $0xf0133f88
f0101c7b:	e8 ad ef ff ff       	call   f0100c2d <cprintf>
f0101c80:	83 c4 10             	add    $0x10,%esp
	return 0;
f0101c83:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0101c88:	c9                   	leave  
f0101c89:	c3                   	ret    

f0101c8a <command_set_page_rep_CLOCK>:
int command_set_page_rep_CLOCK(int number_of_arguments, char **arguments)
{
f0101c8a:	55                   	push   %ebp
f0101c8b:	89 e5                	mov    %esp,%ebp
f0101c8d:	83 ec 08             	sub    $0x8,%esp
	setPageReplacmentAlgorithmCLOCK();
f0101c90:	e8 80 b8 00 00       	call   f010d515 <setPageReplacmentAlgorithmCLOCK>
	cprintf("Page replacement algorithm is now CLOCK\n");
f0101c95:	83 ec 0c             	sub    $0xc,%esp
f0101c98:	68 bc 3f 13 f0       	push   $0xf0133fbc
f0101c9d:	e8 8b ef ff ff       	call   f0100c2d <cprintf>
f0101ca2:	83 c4 10             	add    $0x10,%esp
	return 0;
f0101ca5:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0101caa:	c9                   	leave  
f0101cab:	c3                   	ret    

f0101cac <command_set_page_rep_FIFO>:

int command_set_page_rep_FIFO(int number_of_arguments, char **arguments)
{
f0101cac:	55                   	push   %ebp
f0101cad:	89 e5                	mov    %esp,%ebp
f0101caf:	83 ec 08             	sub    $0x8,%esp
	setPageReplacmentAlgorithmFIFO();
f0101cb2:	e8 6e b8 00 00       	call   f010d525 <setPageReplacmentAlgorithmFIFO>
	cprintf("Page replacement algorithm is now FIFO\n");
f0101cb7:	83 ec 0c             	sub    $0xc,%esp
f0101cba:	68 e8 3f 13 f0       	push   $0xf0133fe8
f0101cbf:	e8 69 ef ff ff       	call   f0100c2d <cprintf>
f0101cc4:	83 c4 10             	add    $0x10,%esp
	return 0;
f0101cc7:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0101ccc:	c9                   	leave  
f0101ccd:	c3                   	ret    

f0101cce <command_set_page_rep_ModifiedCLOCK>:

int command_set_page_rep_ModifiedCLOCK(int number_of_arguments, char **arguments)
{
f0101cce:	55                   	push   %ebp
f0101ccf:	89 e5                	mov    %esp,%ebp
f0101cd1:	83 ec 08             	sub    $0x8,%esp
	setPageReplacmentAlgorithmModifiedCLOCK();
f0101cd4:	e8 5c b8 00 00       	call   f010d535 <setPageReplacmentAlgorithmModifiedCLOCK>
	cprintf("Page replacement algorithm is now Modified CLOCK\n");
f0101cd9:	83 ec 0c             	sub    $0xc,%esp
f0101cdc:	68 10 40 13 f0       	push   $0xf0134010
f0101ce1:	e8 47 ef ff ff       	call   f0100c2d <cprintf>
f0101ce6:	83 c4 10             	add    $0x10,%esp
	return 0;
f0101ce9:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0101cee:	c9                   	leave  
f0101cef:	c3                   	ret    

f0101cf0 <command_sch_RR>:

/*2018*///BEGIN======================================================
int command_sch_RR(int number_of_arguments, char **arguments)
{
f0101cf0:	55                   	push   %ebp
f0101cf1:	89 e5                	mov    %esp,%ebp
f0101cf3:	83 ec 18             	sub    $0x18,%esp
	uint8 quantum = strtol(arguments[1], NULL, 10);
f0101cf6:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101cf9:	83 c0 04             	add    $0x4,%eax
f0101cfc:	8b 00                	mov    (%eax),%eax
f0101cfe:	83 ec 04             	sub    $0x4,%esp
f0101d01:	6a 0a                	push   $0xa
f0101d03:	6a 00                	push   $0x0
f0101d05:	50                   	push   %eax
f0101d06:	e8 80 ed 02 00       	call   f0130a8b <strtol>
f0101d0b:	83 c4 10             	add    $0x10,%esp
f0101d0e:	88 45 f7             	mov    %al,-0x9(%ebp)

	sched_init_RR(quantum);
f0101d11:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
f0101d15:	83 ec 0c             	sub    $0xc,%esp
f0101d18:	50                   	push   %eax
f0101d19:	e8 b4 29 00 00       	call   f01046d2 <sched_init_RR>
f0101d1e:	83 c4 10             	add    $0x10,%esp
	cprintf("Scheduler is now set to Round Robin with quantum %d ms\n", quantums[0]);
f0101d21:	a0 68 0e 6c f0       	mov    0xf06c0e68,%al
f0101d26:	0f b6 c0             	movzbl %al,%eax
f0101d29:	83 ec 08             	sub    $0x8,%esp
f0101d2c:	50                   	push   %eax
f0101d2d:	68 44 40 13 f0       	push   $0xf0134044
f0101d32:	e8 f6 ee ff ff       	call   f0100c2d <cprintf>
f0101d37:	83 c4 10             	add    $0x10,%esp
	return 0;
f0101d3a:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0101d3f:	c9                   	leave  
f0101d40:	c3                   	ret    

f0101d41 <command_sch_MLFQ>:
int command_sch_MLFQ(int number_of_arguments, char **arguments)
{
f0101d41:	55                   	push   %ebp
f0101d42:	89 e5                	mov    %esp,%ebp
f0101d44:	53                   	push   %ebx
f0101d45:	83 ec 24             	sub    $0x24,%esp
	uint8 numOfLevels = strtol(arguments[1], NULL, 10);
f0101d48:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101d4b:	83 c0 04             	add    $0x4,%eax
f0101d4e:	8b 00                	mov    (%eax),%eax
f0101d50:	83 ec 04             	sub    $0x4,%esp
f0101d53:	6a 0a                	push   $0xa
f0101d55:	6a 00                	push   $0x0
f0101d57:	50                   	push   %eax
f0101d58:	e8 2e ed 02 00       	call   f0130a8b <strtol>
f0101d5d:	83 c4 10             	add    $0x10,%esp
f0101d60:	88 45 ef             	mov    %al,-0x11(%ebp)
	uint8 quantumOfEachLevel[MAX_ARGUMENTS - 2] ;
	for (int i = 2 ; i < number_of_arguments ; i++)
f0101d63:	c7 45 f4 02 00 00 00 	movl   $0x2,-0xc(%ebp)
f0101d6a:	eb 2e                	jmp    f0101d9a <command_sch_MLFQ+0x59>
	{
		quantumOfEachLevel[i-2] = strtol(arguments[i], NULL, 10);
f0101d6c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0101d6f:	8d 58 fe             	lea    -0x2(%eax),%ebx
f0101d72:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0101d75:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0101d7c:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101d7f:	01 d0                	add    %edx,%eax
f0101d81:	8b 00                	mov    (%eax),%eax
f0101d83:	83 ec 04             	sub    $0x4,%esp
f0101d86:	6a 0a                	push   $0xa
f0101d88:	6a 00                	push   $0x0
f0101d8a:	50                   	push   %eax
f0101d8b:	e8 fb ec 02 00       	call   f0130a8b <strtol>
f0101d90:	83 c4 10             	add    $0x10,%esp
f0101d93:	88 44 1d e1          	mov    %al,-0x1f(%ebp,%ebx,1)
}
int command_sch_MLFQ(int number_of_arguments, char **arguments)
{
	uint8 numOfLevels = strtol(arguments[1], NULL, 10);
	uint8 quantumOfEachLevel[MAX_ARGUMENTS - 2] ;
	for (int i = 2 ; i < number_of_arguments ; i++)
f0101d97:	ff 45 f4             	incl   -0xc(%ebp)
f0101d9a:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0101d9d:	3b 45 08             	cmp    0x8(%ebp),%eax
f0101da0:	7c ca                	jl     f0101d6c <command_sch_MLFQ+0x2b>
	{
		quantumOfEachLevel[i-2] = strtol(arguments[i], NULL, 10);
	}

	sched_init_MLFQ(numOfLevels, quantumOfEachLevel);
f0101da2:	0f b6 45 ef          	movzbl -0x11(%ebp),%eax
f0101da6:	83 ec 08             	sub    $0x8,%esp
f0101da9:	8d 55 e1             	lea    -0x1f(%ebp),%edx
f0101dac:	52                   	push   %edx
f0101dad:	50                   	push   %eax
f0101dae:	e8 75 29 00 00       	call   f0104728 <sched_init_MLFQ>
f0101db3:	83 c4 10             	add    $0x10,%esp

	cprintf("Scheduler is now set to MLFQ with quantums: ");
f0101db6:	83 ec 0c             	sub    $0xc,%esp
f0101db9:	68 7c 40 13 f0       	push   $0xf013407c
f0101dbe:	e8 6a ee ff ff       	call   f0100c2d <cprintf>
f0101dc3:	83 c4 10             	add    $0x10,%esp
	for (int i = 0 ; i < num_of_ready_queues; i++)
f0101dc6:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f0101dcd:	eb 21                	jmp    f0101df0 <command_sch_MLFQ+0xaf>
	{
		cprintf("%d   ", quantums[i]) ;
f0101dcf:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0101dd2:	05 68 0e 6c f0       	add    $0xf06c0e68,%eax
f0101dd7:	8a 00                	mov    (%eax),%al
f0101dd9:	0f b6 c0             	movzbl %al,%eax
f0101ddc:	83 ec 08             	sub    $0x8,%esp
f0101ddf:	50                   	push   %eax
f0101de0:	68 a9 40 13 f0       	push   $0xf01340a9
f0101de5:	e8 43 ee ff ff       	call   f0100c2d <cprintf>
f0101dea:	83 c4 10             	add    $0x10,%esp
	}

	sched_init_MLFQ(numOfLevels, quantumOfEachLevel);

	cprintf("Scheduler is now set to MLFQ with quantums: ");
	for (int i = 0 ; i < num_of_ready_queues; i++)
f0101ded:	ff 45 f0             	incl   -0x10(%ebp)
f0101df0:	a0 bc 0e 6c f0       	mov    0xf06c0ebc,%al
f0101df5:	0f b6 c0             	movzbl %al,%eax
f0101df8:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0101dfb:	7f d2                	jg     f0101dcf <command_sch_MLFQ+0x8e>
	{
		cprintf("%d   ", quantums[i]) ;
	}
	cprintf("\n");
f0101dfd:	83 ec 0c             	sub    $0xc,%esp
f0101e00:	68 41 3c 13 f0       	push   $0xf0133c41
f0101e05:	e8 23 ee ff ff       	call   f0100c2d <cprintf>
f0101e0a:	83 c4 10             	add    $0x10,%esp
	return 0;
f0101e0d:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0101e12:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f0101e15:	c9                   	leave  
f0101e16:	c3                   	ret    

f0101e17 <command_print_sch_method>:
int command_print_sch_method(int number_of_arguments, char **arguments)
{
f0101e17:	55                   	push   %ebp
f0101e18:	89 e5                	mov    %esp,%ebp
f0101e1a:	83 ec 18             	sub    $0x18,%esp
	if (isSchedMethodMLFQ())
f0101e1d:	e8 39 25 00 00       	call   f010435b <isSchedMethodMLFQ>
f0101e22:	85 c0                	test   %eax,%eax
f0101e24:	74 59                	je     f0101e7f <command_print_sch_method+0x68>
	{
		cprintf("Current scheduler method is MLFQ with quantums: ");
f0101e26:	83 ec 0c             	sub    $0xc,%esp
f0101e29:	68 b0 40 13 f0       	push   $0xf01340b0
f0101e2e:	e8 fa ed ff ff       	call   f0100c2d <cprintf>
f0101e33:	83 c4 10             	add    $0x10,%esp
		for (int i = 0 ; i < num_of_ready_queues; i++)
f0101e36:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0101e3d:	eb 21                	jmp    f0101e60 <command_print_sch_method+0x49>
		{
			cprintf("%d   ", quantums[i]) ;
f0101e3f:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0101e42:	05 68 0e 6c f0       	add    $0xf06c0e68,%eax
f0101e47:	8a 00                	mov    (%eax),%al
f0101e49:	0f b6 c0             	movzbl %al,%eax
f0101e4c:	83 ec 08             	sub    $0x8,%esp
f0101e4f:	50                   	push   %eax
f0101e50:	68 a9 40 13 f0       	push   $0xf01340a9
f0101e55:	e8 d3 ed ff ff       	call   f0100c2d <cprintf>
f0101e5a:	83 c4 10             	add    $0x10,%esp
int command_print_sch_method(int number_of_arguments, char **arguments)
{
	if (isSchedMethodMLFQ())
	{
		cprintf("Current scheduler method is MLFQ with quantums: ");
		for (int i = 0 ; i < num_of_ready_queues; i++)
f0101e5d:	ff 45 f4             	incl   -0xc(%ebp)
f0101e60:	a0 bc 0e 6c f0       	mov    0xf06c0ebc,%al
f0101e65:	0f b6 c0             	movzbl %al,%eax
f0101e68:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0101e6b:	7f d2                	jg     f0101e3f <command_print_sch_method+0x28>
		{
			cprintf("%d   ", quantums[i]) ;
		}
		cprintf("\n");
f0101e6d:	83 ec 0c             	sub    $0xc,%esp
f0101e70:	68 41 3c 13 f0       	push   $0xf0133c41
f0101e75:	e8 b3 ed ff ff       	call   f0100c2d <cprintf>
f0101e7a:	83 c4 10             	add    $0x10,%esp
f0101e7d:	eb 34                	jmp    f0101eb3 <command_print_sch_method+0x9c>
	}
	else if (isSchedMethodRR())
f0101e7f:	e8 bd 24 00 00       	call   f0104341 <isSchedMethodRR>
f0101e84:	85 c0                	test   %eax,%eax
f0101e86:	74 1b                	je     f0101ea3 <command_print_sch_method+0x8c>
	{
		cprintf("Current scheduler method is Round Robin with quantum %d ms\n", quantums[0]);
f0101e88:	a0 68 0e 6c f0       	mov    0xf06c0e68,%al
f0101e8d:	0f b6 c0             	movzbl %al,%eax
f0101e90:	83 ec 08             	sub    $0x8,%esp
f0101e93:	50                   	push   %eax
f0101e94:	68 e4 40 13 f0       	push   $0xf01340e4
f0101e99:	e8 8f ed ff ff       	call   f0100c2d <cprintf>
f0101e9e:	83 c4 10             	add    $0x10,%esp
f0101ea1:	eb 10                	jmp    f0101eb3 <command_print_sch_method+0x9c>
	}

	else
		cprintf("Current scheduler method is UNDEFINED\n");
f0101ea3:	83 ec 0c             	sub    $0xc,%esp
f0101ea6:	68 20 41 13 f0       	push   $0xf0134120
f0101eab:	e8 7d ed ff ff       	call   f0100c2d <cprintf>
f0101eb0:	83 c4 10             	add    $0x10,%esp

	return 0;
f0101eb3:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0101eb8:	c9                   	leave  
f0101eb9:	c3                   	ret    

f0101eba <command_sch_test>:
int command_sch_test(int number_of_arguments, char **arguments)
{
f0101eba:	55                   	push   %ebp
f0101ebb:	89 e5                	mov    %esp,%ebp
f0101ebd:	83 ec 18             	sub    $0x18,%esp
	int status  = strtol(arguments[1], NULL, 10);
f0101ec0:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101ec3:	83 c0 04             	add    $0x4,%eax
f0101ec6:	8b 00                	mov    (%eax),%eax
f0101ec8:	83 ec 04             	sub    $0x4,%esp
f0101ecb:	6a 0a                	push   $0xa
f0101ecd:	6a 00                	push   $0x0
f0101ecf:	50                   	push   %eax
f0101ed0:	e8 b6 eb 02 00       	call   f0130a8b <strtol>
f0101ed5:	83 c4 10             	add    $0x10,%esp
f0101ed8:	89 45 f4             	mov    %eax,-0xc(%ebp)
	chksch(status);
f0101edb:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0101ede:	0f b6 c0             	movzbl %al,%eax
f0101ee1:	83 ec 0c             	sub    $0xc,%esp
f0101ee4:	50                   	push   %eax
f0101ee5:	e8 de da 02 00       	call   f012f9c8 <chksch>
f0101eea:	83 c4 10             	add    $0x10,%esp
	if (status == 0)
f0101eed:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0101ef1:	75 12                	jne    f0101f05 <command_sch_test+0x4b>
		cprintf("Testing the scheduler is TURNED OFF\n");
f0101ef3:	83 ec 0c             	sub    $0xc,%esp
f0101ef6:	68 48 41 13 f0       	push   $0xf0134148
f0101efb:	e8 2d ed ff ff       	call   f0100c2d <cprintf>
f0101f00:	83 c4 10             	add    $0x10,%esp
f0101f03:	eb 16                	jmp    f0101f1b <command_sch_test+0x61>
	else if (status == 1)
f0101f05:	83 7d f4 01          	cmpl   $0x1,-0xc(%ebp)
f0101f09:	75 10                	jne    f0101f1b <command_sch_test+0x61>
		cprintf("Testing the scheduler is TURNED ON\n");
f0101f0b:	83 ec 0c             	sub    $0xc,%esp
f0101f0e:	68 70 41 13 f0       	push   $0xf0134170
f0101f13:	e8 15 ed ff ff       	call   f0100c2d <cprintf>
f0101f18:	83 c4 10             	add    $0x10,%esp
	return 0;
f0101f1b:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0101f20:	c9                   	leave  
f0101f21:	c3                   	ret    

f0101f22 <command_print_page_rep>:
/*2018*///END======================================================


/*2015*///BEGIN======================================================
int command_print_page_rep(int number_of_arguments, char **arguments)
{
f0101f22:	55                   	push   %ebp
f0101f23:	89 e5                	mov    %esp,%ebp
f0101f25:	83 ec 08             	sub    $0x8,%esp
	if (isPageReplacmentAlgorithmCLOCK())
f0101f28:	e8 56 b6 00 00       	call   f010d583 <isPageReplacmentAlgorithmCLOCK>
f0101f2d:	85 c0                	test   %eax,%eax
f0101f2f:	74 15                	je     f0101f46 <command_print_page_rep+0x24>
		cprintf("Page replacement algorithm is CLOCK\n");
f0101f31:	83 ec 0c             	sub    $0xc,%esp
f0101f34:	68 94 41 13 f0       	push   $0xf0134194
f0101f39:	e8 ef ec ff ff       	call   f0100c2d <cprintf>
f0101f3e:	83 c4 10             	add    $0x10,%esp
f0101f41:	e9 8c 00 00 00       	jmp    f0101fd2 <command_print_page_rep+0xb0>
	else if (isPageReplacmentAlgorithmLRU(PG_REP_LRU_TIME_APPROX))
f0101f46:	83 ec 0c             	sub    $0xc,%esp
f0101f49:	6a 01                	push   $0x1
f0101f4b:	e8 1d b6 00 00       	call   f010d56d <isPageReplacmentAlgorithmLRU>
f0101f50:	83 c4 10             	add    $0x10,%esp
f0101f53:	85 c0                	test   %eax,%eax
f0101f55:	74 12                	je     f0101f69 <command_print_page_rep+0x47>
		cprintf("Page replacement algorithm is LRU with TimeStamp approximation\n");
f0101f57:	83 ec 0c             	sub    $0xc,%esp
f0101f5a:	68 bc 41 13 f0       	push   $0xf01341bc
f0101f5f:	e8 c9 ec ff ff       	call   f0100c2d <cprintf>
f0101f64:	83 c4 10             	add    $0x10,%esp
f0101f67:	eb 69                	jmp    f0101fd2 <command_print_page_rep+0xb0>
	else if (isPageReplacmentAlgorithmLRU(PG_REP_LRU_LISTS_APPROX))
f0101f69:	83 ec 0c             	sub    $0xc,%esp
f0101f6c:	6a 02                	push   $0x2
f0101f6e:	e8 fa b5 00 00       	call   f010d56d <isPageReplacmentAlgorithmLRU>
f0101f73:	83 c4 10             	add    $0x10,%esp
f0101f76:	85 c0                	test   %eax,%eax
f0101f78:	74 12                	je     f0101f8c <command_print_page_rep+0x6a>
		cprintf("Page replacement algorithm is LRU with LISTS approximation\n");
f0101f7a:	83 ec 0c             	sub    $0xc,%esp
f0101f7d:	68 fc 41 13 f0       	push   $0xf01341fc
f0101f82:	e8 a6 ec ff ff       	call   f0100c2d <cprintf>
f0101f87:	83 c4 10             	add    $0x10,%esp
f0101f8a:	eb 46                	jmp    f0101fd2 <command_print_page_rep+0xb0>
	else if (isPageReplacmentAlgorithmFIFO())
f0101f8c:	e8 0d b6 00 00       	call   f010d59e <isPageReplacmentAlgorithmFIFO>
f0101f91:	85 c0                	test   %eax,%eax
f0101f93:	74 12                	je     f0101fa7 <command_print_page_rep+0x85>
		cprintf("Page replacement algorithm is FIFO\n");
f0101f95:	83 ec 0c             	sub    $0xc,%esp
f0101f98:	68 38 42 13 f0       	push   $0xf0134238
f0101f9d:	e8 8b ec ff ff       	call   f0100c2d <cprintf>
f0101fa2:	83 c4 10             	add    $0x10,%esp
f0101fa5:	eb 2b                	jmp    f0101fd2 <command_print_page_rep+0xb0>
	else if (isPageReplacmentAlgorithmModifiedCLOCK())
f0101fa7:	e8 0d b6 00 00       	call   f010d5b9 <isPageReplacmentAlgorithmModifiedCLOCK>
f0101fac:	85 c0                	test   %eax,%eax
f0101fae:	74 12                	je     f0101fc2 <command_print_page_rep+0xa0>
		cprintf("Page replacement algorithm is Modified CLOCK\n");
f0101fb0:	83 ec 0c             	sub    $0xc,%esp
f0101fb3:	68 5c 42 13 f0       	push   $0xf013425c
f0101fb8:	e8 70 ec ff ff       	call   f0100c2d <cprintf>
f0101fbd:	83 c4 10             	add    $0x10,%esp
f0101fc0:	eb 10                	jmp    f0101fd2 <command_print_page_rep+0xb0>
	else
		cprintf("Page replacement algorithm is UNDEFINED\n");
f0101fc2:	83 ec 0c             	sub    $0xc,%esp
f0101fc5:	68 8c 42 13 f0       	push   $0xf013428c
f0101fca:	e8 5e ec ff ff       	call   f0100c2d <cprintf>
f0101fcf:	83 c4 10             	add    $0x10,%esp

	return 0;
f0101fd2:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0101fd7:	c9                   	leave  
f0101fd8:	c3                   	ret    

f0101fd9 <command_set_uheap_plac_FIRSTFIT>:


int command_set_uheap_plac_FIRSTFIT(int number_of_arguments, char **arguments)
{
f0101fd9:	55                   	push   %ebp
f0101fda:	89 e5                	mov    %esp,%ebp
f0101fdc:	83 ec 08             	sub    $0x8,%esp
	setUHeapPlacementStrategyFIRSTFIT();
f0101fdf:	e8 ce ee ff ff       	call   f0100eb2 <setUHeapPlacementStrategyFIRSTFIT>
	cprintf("User Heap placement strategy is now FIRST FIT\n");
f0101fe4:	83 ec 0c             	sub    $0xc,%esp
f0101fe7:	68 b8 42 13 f0       	push   $0xf01342b8
f0101fec:	e8 3c ec ff ff       	call   f0100c2d <cprintf>
f0101ff1:	83 c4 10             	add    $0x10,%esp
	return 0;
f0101ff4:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0101ff9:	c9                   	leave  
f0101ffa:	c3                   	ret    

f0101ffb <command_set_uheap_plac_BESTFIT>:

int command_set_uheap_plac_BESTFIT(int number_of_arguments, char **arguments)
{
f0101ffb:	55                   	push   %ebp
f0101ffc:	89 e5                	mov    %esp,%ebp
f0101ffe:	83 ec 08             	sub    $0x8,%esp
	setUHeapPlacementStrategyBESTFIT();
f0102001:	e8 bc ee ff ff       	call   f0100ec2 <setUHeapPlacementStrategyBESTFIT>
	cprintf("User Heap placement strategy is now BEST FIT\n");
f0102006:	83 ec 0c             	sub    $0xc,%esp
f0102009:	68 e8 42 13 f0       	push   $0xf01342e8
f010200e:	e8 1a ec ff ff       	call   f0100c2d <cprintf>
f0102013:	83 c4 10             	add    $0x10,%esp
	return 0;
f0102016:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010201b:	c9                   	leave  
f010201c:	c3                   	ret    

f010201d <command_set_uheap_plac_NEXTFIT>:

int command_set_uheap_plac_NEXTFIT(int number_of_arguments, char **arguments)
{
f010201d:	55                   	push   %ebp
f010201e:	89 e5                	mov    %esp,%ebp
f0102020:	83 ec 08             	sub    $0x8,%esp
	setUHeapPlacementStrategyNEXTFIT();
f0102023:	e8 aa ee ff ff       	call   f0100ed2 <setUHeapPlacementStrategyNEXTFIT>
	cprintf("User Heap placement strategy is now NEXT FIT\n");
f0102028:	83 ec 0c             	sub    $0xc,%esp
f010202b:	68 18 43 13 f0       	push   $0xf0134318
f0102030:	e8 f8 eb ff ff       	call   f0100c2d <cprintf>
f0102035:	83 c4 10             	add    $0x10,%esp
	return 0;
f0102038:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010203d:	c9                   	leave  
f010203e:	c3                   	ret    

f010203f <command_set_uheap_plac_WORSTFIT>:
int command_set_uheap_plac_WORSTFIT(int number_of_arguments, char **arguments)
{
f010203f:	55                   	push   %ebp
f0102040:	89 e5                	mov    %esp,%ebp
f0102042:	83 ec 08             	sub    $0x8,%esp
	setUHeapPlacementStrategyWORSTFIT();
f0102045:	e8 98 ee ff ff       	call   f0100ee2 <setUHeapPlacementStrategyWORSTFIT>
	cprintf("User Heap placement strategy is now WORST FIT\n");
f010204a:	83 ec 0c             	sub    $0xc,%esp
f010204d:	68 48 43 13 f0       	push   $0xf0134348
f0102052:	e8 d6 eb ff ff       	call   f0100c2d <cprintf>
f0102057:	83 c4 10             	add    $0x10,%esp
	return 0;
f010205a:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010205f:	c9                   	leave  
f0102060:	c3                   	ret    

f0102061 <command_print_uheap_plac>:

int command_print_uheap_plac(int number_of_arguments, char **arguments)
{
f0102061:	55                   	push   %ebp
f0102062:	89 e5                	mov    %esp,%ebp
f0102064:	83 ec 08             	sub    $0x8,%esp
	if (isUHeapPlacementStrategyFIRSTFIT())
f0102067:	e8 86 ee ff ff       	call   f0100ef2 <isUHeapPlacementStrategyFIRSTFIT>
f010206c:	84 c0                	test   %al,%al
f010206e:	74 12                	je     f0102082 <command_print_uheap_plac+0x21>
		cprintf("User Heap placement strategy is FIRST FIT\n");
f0102070:	83 ec 0c             	sub    $0xc,%esp
f0102073:	68 78 43 13 f0       	push   $0xf0134378
f0102078:	e8 b0 eb ff ff       	call   f0100c2d <cprintf>
f010207d:	83 c4 10             	add    $0x10,%esp
f0102080:	eb 61                	jmp    f01020e3 <command_print_uheap_plac+0x82>
	else if (isUHeapPlacementStrategyBESTFIT())
f0102082:	e8 80 ee ff ff       	call   f0100f07 <isUHeapPlacementStrategyBESTFIT>
f0102087:	84 c0                	test   %al,%al
f0102089:	74 12                	je     f010209d <command_print_uheap_plac+0x3c>
		cprintf("User Heap placement strategy is BEST FIT\n");
f010208b:	83 ec 0c             	sub    $0xc,%esp
f010208e:	68 a4 43 13 f0       	push   $0xf01343a4
f0102093:	e8 95 eb ff ff       	call   f0100c2d <cprintf>
f0102098:	83 c4 10             	add    $0x10,%esp
f010209b:	eb 46                	jmp    f01020e3 <command_print_uheap_plac+0x82>
	else if (isUHeapPlacementStrategyNEXTFIT())
f010209d:	e8 7a ee ff ff       	call   f0100f1c <isUHeapPlacementStrategyNEXTFIT>
f01020a2:	84 c0                	test   %al,%al
f01020a4:	74 12                	je     f01020b8 <command_print_uheap_plac+0x57>
		cprintf("User Heap placement strategy is NEXT FIT\n");
f01020a6:	83 ec 0c             	sub    $0xc,%esp
f01020a9:	68 d0 43 13 f0       	push   $0xf01343d0
f01020ae:	e8 7a eb ff ff       	call   f0100c2d <cprintf>
f01020b3:	83 c4 10             	add    $0x10,%esp
f01020b6:	eb 2b                	jmp    f01020e3 <command_print_uheap_plac+0x82>
	else if (isUHeapPlacementStrategyWORSTFIT())
f01020b8:	e8 74 ee ff ff       	call   f0100f31 <isUHeapPlacementStrategyWORSTFIT>
f01020bd:	84 c0                	test   %al,%al
f01020bf:	74 12                	je     f01020d3 <command_print_uheap_plac+0x72>
		cprintf("User Heap placement strategy is WORST FIT\n");
f01020c1:	83 ec 0c             	sub    $0xc,%esp
f01020c4:	68 fc 43 13 f0       	push   $0xf01343fc
f01020c9:	e8 5f eb ff ff       	call   f0100c2d <cprintf>
f01020ce:	83 c4 10             	add    $0x10,%esp
f01020d1:	eb 10                	jmp    f01020e3 <command_print_uheap_plac+0x82>
	else
		cprintf("User Heap placement strategy is UNDEFINED\n");
f01020d3:	83 ec 0c             	sub    $0xc,%esp
f01020d6:	68 28 44 13 f0       	push   $0xf0134428
f01020db:	e8 4d eb ff ff       	call   f0100c2d <cprintf>
f01020e0:	83 c4 10             	add    $0x10,%esp

	return 0;
f01020e3:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01020e8:	c9                   	leave  
f01020e9:	c3                   	ret    

f01020ea <command_set_kheap_plac_CONTALLOC>:
/*2015*///END======================================================

/*2017*///BEGIN======================================================

int command_set_kheap_plac_CONTALLOC(int number_of_arguments, char **arguments)
{
f01020ea:	55                   	push   %ebp
f01020eb:	89 e5                	mov    %esp,%ebp
f01020ed:	83 ec 08             	sub    $0x8,%esp
	setKHeapPlacementStrategyCONTALLOC();
f01020f0:	e8 05 ed ff ff       	call   f0100dfa <setKHeapPlacementStrategyCONTALLOC>
	cprintf("Kernel Heap placement strategy is now FIRST FIT\n");
f01020f5:	83 ec 0c             	sub    $0xc,%esp
f01020f8:	68 54 44 13 f0       	push   $0xf0134454
f01020fd:	e8 2b eb ff ff       	call   f0100c2d <cprintf>
f0102102:	83 c4 10             	add    $0x10,%esp
	return 0;
f0102105:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010210a:	c9                   	leave  
f010210b:	c3                   	ret    

f010210c <command_set_kheap_plac_FIRSTFIT>:

int command_set_kheap_plac_FIRSTFIT(int number_of_arguments, char **arguments)
{
f010210c:	55                   	push   %ebp
f010210d:	89 e5                	mov    %esp,%ebp
f010210f:	83 ec 08             	sub    $0x8,%esp
	setKHeapPlacementStrategyFIRSTFIT();
f0102112:	e8 f3 ec ff ff       	call   f0100e0a <setKHeapPlacementStrategyFIRSTFIT>
	cprintf("Kernel Heap placement strategy is now FIRST FIT\n");
f0102117:	83 ec 0c             	sub    $0xc,%esp
f010211a:	68 54 44 13 f0       	push   $0xf0134454
f010211f:	e8 09 eb ff ff       	call   f0100c2d <cprintf>
f0102124:	83 c4 10             	add    $0x10,%esp
	return 0;
f0102127:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010212c:	c9                   	leave  
f010212d:	c3                   	ret    

f010212e <command_set_kheap_plac_BESTFIT>:

int command_set_kheap_plac_BESTFIT(int number_of_arguments, char **arguments)
{
f010212e:	55                   	push   %ebp
f010212f:	89 e5                	mov    %esp,%ebp
f0102131:	83 ec 08             	sub    $0x8,%esp
	setKHeapPlacementStrategyBESTFIT();
f0102134:	e8 e1 ec ff ff       	call   f0100e1a <setKHeapPlacementStrategyBESTFIT>
	cprintf("Kernel Heap placement strategy is now BEST FIT\n");
f0102139:	83 ec 0c             	sub    $0xc,%esp
f010213c:	68 88 44 13 f0       	push   $0xf0134488
f0102141:	e8 e7 ea ff ff       	call   f0100c2d <cprintf>
f0102146:	83 c4 10             	add    $0x10,%esp
	return 0;
f0102149:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010214e:	c9                   	leave  
f010214f:	c3                   	ret    

f0102150 <command_set_kheap_plac_NEXTFIT>:

int command_set_kheap_plac_NEXTFIT(int number_of_arguments, char **arguments)
{
f0102150:	55                   	push   %ebp
f0102151:	89 e5                	mov    %esp,%ebp
f0102153:	83 ec 08             	sub    $0x8,%esp
	setKHeapPlacementStrategyNEXTFIT();
f0102156:	e8 cf ec ff ff       	call   f0100e2a <setKHeapPlacementStrategyNEXTFIT>
	cprintf("Kernel Heap placement strategy is now NEXT FIT\n");
f010215b:	83 ec 0c             	sub    $0xc,%esp
f010215e:	68 b8 44 13 f0       	push   $0xf01344b8
f0102163:	e8 c5 ea ff ff       	call   f0100c2d <cprintf>
f0102168:	83 c4 10             	add    $0x10,%esp
	return 0;
f010216b:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102170:	c9                   	leave  
f0102171:	c3                   	ret    

f0102172 <command_set_kheap_plac_WORSTFIT>:
int command_set_kheap_plac_WORSTFIT(int number_of_arguments, char **arguments)
{
f0102172:	55                   	push   %ebp
f0102173:	89 e5                	mov    %esp,%ebp
f0102175:	83 ec 08             	sub    $0x8,%esp
	setKHeapPlacementStrategyWORSTFIT();
f0102178:	e8 bd ec ff ff       	call   f0100e3a <setKHeapPlacementStrategyWORSTFIT>
	cprintf("Kernel Heap placement strategy is now WORST FIT\n");
f010217d:	83 ec 0c             	sub    $0xc,%esp
f0102180:	68 e8 44 13 f0       	push   $0xf01344e8
f0102185:	e8 a3 ea ff ff       	call   f0100c2d <cprintf>
f010218a:	83 c4 10             	add    $0x10,%esp
	return 0;
f010218d:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102192:	c9                   	leave  
f0102193:	c3                   	ret    

f0102194 <command_print_kheap_plac>:

int command_print_kheap_plac(int number_of_arguments, char **arguments)
{
f0102194:	55                   	push   %ebp
f0102195:	89 e5                	mov    %esp,%ebp
f0102197:	83 ec 08             	sub    $0x8,%esp
	if (isKHeapPlacementStrategyCONTALLOC())
f010219a:	e8 ab ec ff ff       	call   f0100e4a <isKHeapPlacementStrategyCONTALLOC>
f010219f:	84 c0                	test   %al,%al
f01021a1:	74 12                	je     f01021b5 <command_print_kheap_plac+0x21>
		cprintf("Kernel Heap placement strategy is CONTINUOUS ALLOCATION\n");
f01021a3:	83 ec 0c             	sub    $0xc,%esp
f01021a6:	68 1c 45 13 f0       	push   $0xf013451c
f01021ab:	e8 7d ea ff ff       	call   f0100c2d <cprintf>
f01021b0:	83 c4 10             	add    $0x10,%esp
f01021b3:	eb 7c                	jmp    f0102231 <command_print_kheap_plac+0x9d>
	else if (isKHeapPlacementStrategyFIRSTFIT())
f01021b5:	e8 a4 ec ff ff       	call   f0100e5e <isKHeapPlacementStrategyFIRSTFIT>
f01021ba:	84 c0                	test   %al,%al
f01021bc:	74 12                	je     f01021d0 <command_print_kheap_plac+0x3c>
		cprintf("Kernel Heap placement strategy is FIRST FIT\n");
f01021be:	83 ec 0c             	sub    $0xc,%esp
f01021c1:	68 58 45 13 f0       	push   $0xf0134558
f01021c6:	e8 62 ea ff ff       	call   f0100c2d <cprintf>
f01021cb:	83 c4 10             	add    $0x10,%esp
f01021ce:	eb 61                	jmp    f0102231 <command_print_kheap_plac+0x9d>
	else if (isKHeapPlacementStrategyBESTFIT())
f01021d0:	e8 9e ec ff ff       	call   f0100e73 <isKHeapPlacementStrategyBESTFIT>
f01021d5:	84 c0                	test   %al,%al
f01021d7:	74 12                	je     f01021eb <command_print_kheap_plac+0x57>
		cprintf("Kernel Heap placement strategy is BEST FIT\n");
f01021d9:	83 ec 0c             	sub    $0xc,%esp
f01021dc:	68 88 45 13 f0       	push   $0xf0134588
f01021e1:	e8 47 ea ff ff       	call   f0100c2d <cprintf>
f01021e6:	83 c4 10             	add    $0x10,%esp
f01021e9:	eb 46                	jmp    f0102231 <command_print_kheap_plac+0x9d>
	else if (isKHeapPlacementStrategyNEXTFIT())
f01021eb:	e8 98 ec ff ff       	call   f0100e88 <isKHeapPlacementStrategyNEXTFIT>
f01021f0:	84 c0                	test   %al,%al
f01021f2:	74 12                	je     f0102206 <command_print_kheap_plac+0x72>
		cprintf("Kernel Heap placement strategy is NEXT FIT\n");
f01021f4:	83 ec 0c             	sub    $0xc,%esp
f01021f7:	68 b4 45 13 f0       	push   $0xf01345b4
f01021fc:	e8 2c ea ff ff       	call   f0100c2d <cprintf>
f0102201:	83 c4 10             	add    $0x10,%esp
f0102204:	eb 2b                	jmp    f0102231 <command_print_kheap_plac+0x9d>
	else if (isKHeapPlacementStrategyWORSTFIT())
f0102206:	e8 92 ec ff ff       	call   f0100e9d <isKHeapPlacementStrategyWORSTFIT>
f010220b:	84 c0                	test   %al,%al
f010220d:	74 12                	je     f0102221 <command_print_kheap_plac+0x8d>
		cprintf("Kernel Heap placement strategy is WORST FIT\n");
f010220f:	83 ec 0c             	sub    $0xc,%esp
f0102212:	68 e0 45 13 f0       	push   $0xf01345e0
f0102217:	e8 11 ea ff ff       	call   f0100c2d <cprintf>
f010221c:	83 c4 10             	add    $0x10,%esp
f010221f:	eb 10                	jmp    f0102231 <command_print_kheap_plac+0x9d>
	else
		cprintf("Kernel Heap placement strategy is UNDEFINED\n");
f0102221:	83 ec 0c             	sub    $0xc,%esp
f0102224:	68 10 46 13 f0       	push   $0xf0134610
f0102229:	e8 ff e9 ff ff       	call   f0100c2d <cprintf>
f010222e:	83 c4 10             	add    $0x10,%esp

	return 0;
f0102231:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102236:	c9                   	leave  
f0102237:	c3                   	ret    

f0102238 <command_disable_modified_buffer>:

/*2017*///END======================================================

int command_disable_modified_buffer(int number_of_arguments, char **arguments)
{
f0102238:	55                   	push   %ebp
f0102239:	89 e5                	mov    %esp,%ebp
f010223b:	83 ec 08             	sub    $0x8,%esp
	if(!isBufferingEnabled())
f010223e:	e8 ed b3 00 00       	call   f010d630 <isBufferingEnabled>
f0102243:	84 c0                	test   %al,%al
f0102245:	75 12                	jne    f0102259 <command_disable_modified_buffer+0x21>
	{
		cprintf("Buffering is not enabled. Please enable buffering first.\n");
f0102247:	83 ec 0c             	sub    $0xc,%esp
f010224a:	68 40 46 13 f0       	push   $0xf0134640
f010224f:	e8 d9 e9 ff ff       	call   f0100c2d <cprintf>
f0102254:	83 c4 10             	add    $0x10,%esp
f0102257:	eb 1d                	jmp    f0102276 <command_disable_modified_buffer+0x3e>
	}
	else
	{
		enableModifiedBuffer(0);
f0102259:	83 ec 0c             	sub    $0xc,%esp
f010225c:	6a 00                	push   $0x0
f010225e:	e8 a7 b3 00 00       	call   f010d60a <enableModifiedBuffer>
f0102263:	83 c4 10             	add    $0x10,%esp
		cprintf("Modified Buffer is now DISABLED\n");
f0102266:	83 ec 0c             	sub    $0xc,%esp
f0102269:	68 7c 46 13 f0       	push   $0xf013467c
f010226e:	e8 ba e9 ff ff       	call   f0100c2d <cprintf>
f0102273:	83 c4 10             	add    $0x10,%esp
	}
	return 0;
f0102276:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010227b:	c9                   	leave  
f010227c:	c3                   	ret    

f010227d <command_enable_modified_buffer>:


int command_enable_modified_buffer(int number_of_arguments, char **arguments)
{
f010227d:	55                   	push   %ebp
f010227e:	89 e5                	mov    %esp,%ebp
f0102280:	83 ec 08             	sub    $0x8,%esp
	if(!isBufferingEnabled())
f0102283:	e8 a8 b3 00 00       	call   f010d630 <isBufferingEnabled>
f0102288:	84 c0                	test   %al,%al
f010228a:	75 12                	jne    f010229e <command_enable_modified_buffer+0x21>
	{
		cprintf("Buffering is not enabled. Please enable buffering first.\n");
f010228c:	83 ec 0c             	sub    $0xc,%esp
f010228f:	68 40 46 13 f0       	push   $0xf0134640
f0102294:	e8 94 e9 ff ff       	call   f0100c2d <cprintf>
f0102299:	83 c4 10             	add    $0x10,%esp
f010229c:	eb 1d                	jmp    f01022bb <command_enable_modified_buffer+0x3e>
	}
	else
	{
		enableModifiedBuffer(1);
f010229e:	83 ec 0c             	sub    $0xc,%esp
f01022a1:	6a 01                	push   $0x1
f01022a3:	e8 62 b3 00 00       	call   f010d60a <enableModifiedBuffer>
f01022a8:	83 c4 10             	add    $0x10,%esp
		cprintf("Modified Buffer is now ENABLED\n");
f01022ab:	83 ec 0c             	sub    $0xc,%esp
f01022ae:	68 a0 46 13 f0       	push   $0xf01346a0
f01022b3:	e8 75 e9 ff ff       	call   f0100c2d <cprintf>
f01022b8:	83 c4 10             	add    $0x10,%esp
	}
	return 0;
f01022bb:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01022c0:	c9                   	leave  
f01022c1:	c3                   	ret    

f01022c2 <command_disable_buffering>:

/*2016 ============================================================================*/

int command_disable_buffering(int number_of_arguments, char **arguments)
{
f01022c2:	55                   	push   %ebp
f01022c3:	89 e5                	mov    %esp,%ebp
f01022c5:	83 ec 08             	sub    $0x8,%esp
	enableBuffering(0);
f01022c8:	83 ec 0c             	sub    $0xc,%esp
f01022cb:	6a 00                	push   $0x0
f01022cd:	e8 50 b3 00 00       	call   f010d622 <enableBuffering>
f01022d2:	83 c4 10             	add    $0x10,%esp
	enableModifiedBuffer(0);
f01022d5:	83 ec 0c             	sub    $0xc,%esp
f01022d8:	6a 00                	push   $0x0
f01022da:	e8 2b b3 00 00       	call   f010d60a <enableModifiedBuffer>
f01022df:	83 c4 10             	add    $0x10,%esp
	cprintf("Buffering is now DISABLED\n");
f01022e2:	83 ec 0c             	sub    $0xc,%esp
f01022e5:	68 c0 46 13 f0       	push   $0xf01346c0
f01022ea:	e8 3e e9 ff ff       	call   f0100c2d <cprintf>
f01022ef:	83 c4 10             	add    $0x10,%esp
	return 0;
f01022f2:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01022f7:	c9                   	leave  
f01022f8:	c3                   	ret    

f01022f9 <command_enable_buffering>:


int command_enable_buffering(int number_of_arguments, char **arguments)
{
f01022f9:	55                   	push   %ebp
f01022fa:	89 e5                	mov    %esp,%ebp
f01022fc:	83 ec 78             	sub    $0x78,%esp
	enableBuffering(1);
f01022ff:	83 ec 0c             	sub    $0xc,%esp
f0102302:	6a 01                	push   $0x1
f0102304:	e8 19 b3 00 00       	call   f010d622 <enableBuffering>
f0102309:	83 c4 10             	add    $0x10,%esp
	enableModifiedBuffer(1);
f010230c:	83 ec 0c             	sub    $0xc,%esp
f010230f:	6a 01                	push   $0x1
f0102311:	e8 f4 b2 00 00       	call   f010d60a <enableModifiedBuffer>
f0102316:	83 c4 10             	add    $0x10,%esp
	if(getModifiedBufferLength() == 0)
f0102319:	e8 2a b3 00 00       	call   f010d648 <getModifiedBufferLength>
f010231e:	85 c0                	test   %eax,%eax
f0102320:	75 59                	jne    f010237b <command_enable_buffering+0x82>
	{
		cprintf("Modified buffer enabled but with length = 0\n");
f0102322:	83 ec 0c             	sub    $0xc,%esp
f0102325:	68 dc 46 13 f0       	push   $0xf01346dc
f010232a:	e8 fe e8 ff ff       	call   f0100c2d <cprintf>
f010232f:	83 c4 10             	add    $0x10,%esp
		char str[100];
		readline("Please enter the modified buff length = ", str);
f0102332:	83 ec 08             	sub    $0x8,%esp
f0102335:	8d 45 94             	lea    -0x6c(%ebp),%eax
f0102338:	50                   	push   %eax
f0102339:	68 0c 47 13 f0       	push   $0xf013470c
f010233e:	e8 e2 e1 02 00       	call   f0130525 <readline>
f0102343:	83 c4 10             	add    $0x10,%esp
		setModifiedBufferLength(strtol(str, NULL, 10));
f0102346:	83 ec 04             	sub    $0x4,%esp
f0102349:	6a 0a                	push   $0xa
f010234b:	6a 00                	push   $0x0
f010234d:	8d 45 94             	lea    -0x6c(%ebp),%eax
f0102350:	50                   	push   %eax
f0102351:	e8 35 e7 02 00       	call   f0130a8b <strtol>
f0102356:	83 c4 10             	add    $0x10,%esp
f0102359:	83 ec 0c             	sub    $0xc,%esp
f010235c:	50                   	push   %eax
f010235d:	e8 d8 b2 00 00       	call   f010d63a <setModifiedBufferLength>
f0102362:	83 c4 10             	add    $0x10,%esp
		cprintf("Modified buffer length updated = %d\n", getModifiedBufferLength());
f0102365:	e8 de b2 00 00       	call   f010d648 <getModifiedBufferLength>
f010236a:	83 ec 08             	sub    $0x8,%esp
f010236d:	50                   	push   %eax
f010236e:	68 38 47 13 f0       	push   $0xf0134738
f0102373:	e8 b5 e8 ff ff       	call   f0100c2d <cprintf>
f0102378:	83 c4 10             	add    $0x10,%esp
	}
	cprintf("Buffering is now ENABLED\n");
f010237b:	83 ec 0c             	sub    $0xc,%esp
f010237e:	68 5d 47 13 f0       	push   $0xf013475d
f0102383:	e8 a5 e8 ff ff       	call   f0100c2d <cprintf>
f0102388:	83 c4 10             	add    $0x10,%esp
	return 0;
f010238b:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102390:	c9                   	leave  
f0102391:	c3                   	ret    

f0102392 <command_set_modified_buffer_length>:

int command_set_modified_buffer_length(int number_of_arguments, char **arguments)
{
f0102392:	55                   	push   %ebp
f0102393:	89 e5                	mov    %esp,%ebp
f0102395:	83 ec 08             	sub    $0x8,%esp
	if(!isBufferingEnabled())
f0102398:	e8 93 b2 00 00       	call   f010d630 <isBufferingEnabled>
f010239d:	84 c0                	test   %al,%al
f010239f:	75 12                	jne    f01023b3 <command_set_modified_buffer_length+0x21>
	{
		cprintf("Buffering is not enabled. Please enable buffering to use the modified buffer.\n");
f01023a1:	83 ec 0c             	sub    $0xc,%esp
f01023a4:	68 78 47 13 f0       	push   $0xf0134778
f01023a9:	e8 7f e8 ff ff       	call   f0100c2d <cprintf>
f01023ae:	83 c4 10             	add    $0x10,%esp
f01023b1:	eb 19                	jmp    f01023cc <command_set_modified_buffer_length+0x3a>
	}
	else if (!isModifiedBufferEnabled())
f01023b3:	e8 60 b2 00 00       	call   f010d618 <isModifiedBufferEnabled>
f01023b8:	84 c0                	test   %al,%al
f01023ba:	75 10                	jne    f01023cc <command_set_modified_buffer_length+0x3a>
	{
		cprintf("Modified Buffering is not enabled. Please enable modified buffering.\n");
f01023bc:	83 ec 0c             	sub    $0xc,%esp
f01023bf:	68 c8 47 13 f0       	push   $0xf01347c8
f01023c4:	e8 64 e8 ff ff       	call   f0100c2d <cprintf>
f01023c9:	83 c4 10             	add    $0x10,%esp
	}
	setModifiedBufferLength(strtol(arguments[1], NULL, 10));
f01023cc:	8b 45 0c             	mov    0xc(%ebp),%eax
f01023cf:	83 c0 04             	add    $0x4,%eax
f01023d2:	8b 00                	mov    (%eax),%eax
f01023d4:	83 ec 04             	sub    $0x4,%esp
f01023d7:	6a 0a                	push   $0xa
f01023d9:	6a 00                	push   $0x0
f01023db:	50                   	push   %eax
f01023dc:	e8 aa e6 02 00       	call   f0130a8b <strtol>
f01023e1:	83 c4 10             	add    $0x10,%esp
f01023e4:	83 ec 0c             	sub    $0xc,%esp
f01023e7:	50                   	push   %eax
f01023e8:	e8 4d b2 00 00       	call   f010d63a <setModifiedBufferLength>
f01023ed:	83 c4 10             	add    $0x10,%esp
	cprintf("Modified buffer length updated = %d\n", getModifiedBufferLength());
f01023f0:	e8 53 b2 00 00       	call   f010d648 <getModifiedBufferLength>
f01023f5:	83 ec 08             	sub    $0x8,%esp
f01023f8:	50                   	push   %eax
f01023f9:	68 38 47 13 f0       	push   $0xf0134738
f01023fe:	e8 2a e8 ff ff       	call   f0100c2d <cprintf>
f0102403:	83 c4 10             	add    $0x10,%esp
	return 0;
f0102406:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010240b:	c9                   	leave  
f010240c:	c3                   	ret    

f010240d <command_get_modified_buffer_length>:

int command_get_modified_buffer_length(int number_of_arguments, char **arguments)
{
f010240d:	55                   	push   %ebp
f010240e:	89 e5                	mov    %esp,%ebp
f0102410:	83 ec 08             	sub    $0x8,%esp
	if(!isBufferingEnabled())
f0102413:	e8 18 b2 00 00       	call   f010d630 <isBufferingEnabled>
f0102418:	84 c0                	test   %al,%al
f010241a:	75 12                	jne    f010242e <command_get_modified_buffer_length+0x21>
	{
		cprintf("Buffering is not enabled. Please enable buffering to use the modified buffer.\n");
f010241c:	83 ec 0c             	sub    $0xc,%esp
f010241f:	68 78 47 13 f0       	push   $0xf0134778
f0102424:	e8 04 e8 ff ff       	call   f0100c2d <cprintf>
f0102429:	83 c4 10             	add    $0x10,%esp
f010242c:	eb 19                	jmp    f0102447 <command_get_modified_buffer_length+0x3a>
	}
	else if (!isModifiedBufferEnabled())
f010242e:	e8 e5 b1 00 00       	call   f010d618 <isModifiedBufferEnabled>
f0102433:	84 c0                	test   %al,%al
f0102435:	75 10                	jne    f0102447 <command_get_modified_buffer_length+0x3a>
	{
		cprintf("Modified Buffering is not enabled. Please enable modified buffering.\n");
f0102437:	83 ec 0c             	sub    $0xc,%esp
f010243a:	68 c8 47 13 f0       	push   $0xf01347c8
f010243f:	e8 e9 e7 ff ff       	call   f0100c2d <cprintf>
f0102444:	83 c4 10             	add    $0x10,%esp
	}
	cprintf("Modified buffer length = %d\n", getModifiedBufferLength());
f0102447:	e8 fc b1 00 00       	call   f010d648 <getModifiedBufferLength>
f010244c:	83 ec 08             	sub    $0x8,%esp
f010244f:	50                   	push   %eax
f0102450:	68 0e 48 13 f0       	push   $0xf013480e
f0102455:	e8 d3 e7 ff ff       	call   f0100c2d <cprintf>
f010245a:	83 c4 10             	add    $0x10,%esp
	return 0;
f010245d:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102462:	c9                   	leave  
f0102463:	c3                   	ret    

f0102464 <command_test_kmalloc>:

/*TESTING Commands*/
int command_test_kmalloc(int number_of_arguments, char **arguments)
{
f0102464:	55                   	push   %ebp
f0102465:	89 e5                	mov    %esp,%ebp
f0102467:	83 ec 18             	sub    $0x18,%esp
	int testNum = 0 ;
f010246a:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	if (number_of_arguments==2)
f0102471:	83 7d 08 02          	cmpl   $0x2,0x8(%ebp)
f0102475:	75 1b                	jne    f0102492 <command_test_kmalloc+0x2e>
		testNum = strtol(arguments[1], NULL, 10);
f0102477:	8b 45 0c             	mov    0xc(%ebp),%eax
f010247a:	83 c0 04             	add    $0x4,%eax
f010247d:	8b 00                	mov    (%eax),%eax
f010247f:	83 ec 04             	sub    $0x4,%esp
f0102482:	6a 0a                	push   $0xa
f0102484:	6a 00                	push   $0x0
f0102486:	50                   	push   %eax
f0102487:	e8 ff e5 02 00       	call   f0130a8b <strtol>
f010248c:	83 c4 10             	add    $0x10,%esp
f010248f:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if (isKHeapPlacementStrategyCONTALLOC())
f0102492:	e8 b3 e9 ff ff       	call   f0100e4a <isKHeapPlacementStrategyCONTALLOC>
f0102497:	84 c0                	test   %al,%al
f0102499:	74 0a                	je     f01024a5 <command_test_kmalloc+0x41>
		test_kmalloc();
f010249b:	e8 97 49 01 00       	call   f0116e37 <test_kmalloc>
f01024a0:	e9 e8 00 00 00       	jmp    f010258d <command_test_kmalloc+0x129>
	else if (isKHeapPlacementStrategyFIRSTFIT())
f01024a5:	e8 b4 e9 ff ff       	call   f0100e5e <isKHeapPlacementStrategyFIRSTFIT>
f01024aa:	84 c0                	test   %al,%al
f01024ac:	74 44                	je     f01024f2 <command_test_kmalloc+0x8e>
	{
		if (testNum == 0)
f01024ae:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01024b2:	75 1a                	jne    f01024ce <command_test_kmalloc+0x6a>
		{
			cprintf("Error: [Kernel.FirstFit] must specify the test number (1 or 2) as an argument\n");
f01024b4:	83 ec 0c             	sub    $0xc,%esp
f01024b7:	68 2c 48 13 f0       	push   $0xf013482c
f01024bc:	e8 6c e7 ff ff       	call   f0100c2d <cprintf>
f01024c1:	83 c4 10             	add    $0x10,%esp
			return 0;
f01024c4:	b8 00 00 00 00       	mov    $0x0,%eax
f01024c9:	e9 c4 00 00 00       	jmp    f0102592 <command_test_kmalloc+0x12e>
		}
		//Test FIRST FIT allocation
		if (testNum == 1)
f01024ce:	83 7d f4 01          	cmpl   $0x1,-0xc(%ebp)
f01024d2:	75 0a                	jne    f01024de <command_test_kmalloc+0x7a>
			test_kmalloc_firstfit1();
f01024d4:	e8 e7 97 01 00       	call   f011bcc0 <test_kmalloc_firstfit1>
f01024d9:	e9 af 00 00 00       	jmp    f010258d <command_test_kmalloc+0x129>
		else if (testNum == 2)
f01024de:	83 7d f4 02          	cmpl   $0x2,-0xc(%ebp)
f01024e2:	0f 85 a5 00 00 00    	jne    f010258d <command_test_kmalloc+0x129>
			test_kmalloc_firstfit2();
f01024e8:	e8 75 ab 01 00       	call   f011d062 <test_kmalloc_firstfit2>
f01024ed:	e9 9b 00 00 00       	jmp    f010258d <command_test_kmalloc+0x129>
	}
	else if (isKHeapPlacementStrategyBESTFIT())
f01024f2:	e8 7c e9 ff ff       	call   f0100e73 <isKHeapPlacementStrategyBESTFIT>
f01024f7:	84 c0                	test   %al,%al
f01024f9:	74 44                	je     f010253f <command_test_kmalloc+0xdb>
	{
		if (testNum == 0)
f01024fb:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01024ff:	75 17                	jne    f0102518 <command_test_kmalloc+0xb4>
		{
			cprintf("Error: [Kernel.BestFit] must specify the test number (1, 2, 3) as an argument\n");
f0102501:	83 ec 0c             	sub    $0xc,%esp
f0102504:	68 7c 48 13 f0       	push   $0xf013487c
f0102509:	e8 1f e7 ff ff       	call   f0100c2d <cprintf>
f010250e:	83 c4 10             	add    $0x10,%esp
			return 0;
f0102511:	b8 00 00 00 00       	mov    $0x0,%eax
f0102516:	eb 7a                	jmp    f0102592 <command_test_kmalloc+0x12e>
		}
		if (testNum == 1)
f0102518:	83 7d f4 01          	cmpl   $0x1,-0xc(%ebp)
f010251c:	75 07                	jne    f0102525 <command_test_kmalloc+0xc1>
			test_kmalloc();
f010251e:	e8 14 49 01 00       	call   f0116e37 <test_kmalloc>
f0102523:	eb 68                	jmp    f010258d <command_test_kmalloc+0x129>
		else if (testNum == 2)
f0102525:	83 7d f4 02          	cmpl   $0x2,-0xc(%ebp)
f0102529:	75 07                	jne    f0102532 <command_test_kmalloc+0xce>
			test_kmalloc_bestfit1();
f010252b:	e8 5a 72 01 00       	call   f011978a <test_kmalloc_bestfit1>
f0102530:	eb 5b                	jmp    f010258d <command_test_kmalloc+0x129>
		else if (testNum == 3)
f0102532:	83 7d f4 03          	cmpl   $0x3,-0xc(%ebp)
f0102536:	75 55                	jne    f010258d <command_test_kmalloc+0x129>
			test_kmalloc_bestfit2();
f0102538:	e8 a3 84 01 00       	call   f011a9e0 <test_kmalloc_bestfit2>
f010253d:	eb 4e                	jmp    f010258d <command_test_kmalloc+0x129>
	}
	else if (isKHeapPlacementStrategyNEXTFIT())
f010253f:	e8 44 e9 ff ff       	call   f0100e88 <isKHeapPlacementStrategyNEXTFIT>
f0102544:	84 c0                	test   %al,%al
f0102546:	74 37                	je     f010257f <command_test_kmalloc+0x11b>
	{
		if (testNum == 0)
f0102548:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010254c:	75 17                	jne    f0102565 <command_test_kmalloc+0x101>
		{
			cprintf("Error: [Kernel.NextFit] must specify the test number (1 or 2) as an argument\n");
f010254e:	83 ec 0c             	sub    $0xc,%esp
f0102551:	68 cc 48 13 f0       	push   $0xf01348cc
f0102556:	e8 d2 e6 ff ff       	call   f0100c2d <cprintf>
f010255b:	83 c4 10             	add    $0x10,%esp
			return 0;
f010255e:	b8 00 00 00 00       	mov    $0x0,%eax
f0102563:	eb 2d                	jmp    f0102592 <command_test_kmalloc+0x12e>
		}
		//Test cont. allocation
		if (testNum == 1)
f0102565:	83 7d f4 01          	cmpl   $0x1,-0xc(%ebp)
f0102569:	75 07                	jne    f0102572 <command_test_kmalloc+0x10e>
			test_kmalloc();
f010256b:	e8 c7 48 01 00       	call   f0116e37 <test_kmalloc>
f0102570:	eb 1b                	jmp    f010258d <command_test_kmalloc+0x129>
		//Test nextfit strategy
		else if (testNum == 2)
f0102572:	83 7d f4 02          	cmpl   $0x2,-0xc(%ebp)
f0102576:	75 15                	jne    f010258d <command_test_kmalloc+0x129>
			test_kmalloc_nextfit();
f0102578:	e8 18 5b 01 00       	call   f0118095 <test_kmalloc_nextfit>
f010257d:	eb 0e                	jmp    f010258d <command_test_kmalloc+0x129>

	}
	else if (isKHeapPlacementStrategyWORSTFIT())
f010257f:	e8 19 e9 ff ff       	call   f0100e9d <isKHeapPlacementStrategyWORSTFIT>
f0102584:	84 c0                	test   %al,%al
f0102586:	74 05                	je     f010258d <command_test_kmalloc+0x129>
		test_kmalloc_worstfit();
f0102588:	e8 6a b9 01 00       	call   f011def7 <test_kmalloc_worstfit>
	return 0;
f010258d:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102592:	c9                   	leave  
f0102593:	c3                   	ret    

f0102594 <command_test_kfree>:
int command_test_kfree(int number_of_arguments, char **arguments)
{
f0102594:	55                   	push   %ebp
f0102595:	89 e5                	mov    %esp,%ebp
f0102597:	83 ec 08             	sub    $0x8,%esp
	if (isKHeapPlacementStrategyBESTFIT() || isKHeapPlacementStrategyFIRSTFIT())
f010259a:	e8 d4 e8 ff ff       	call   f0100e73 <isKHeapPlacementStrategyBESTFIT>
f010259f:	84 c0                	test   %al,%al
f01025a1:	75 09                	jne    f01025ac <command_test_kfree+0x18>
f01025a3:	e8 b6 e8 ff ff       	call   f0100e5e <isKHeapPlacementStrategyFIRSTFIT>
f01025a8:	84 c0                	test   %al,%al
f01025aa:	74 07                	je     f01025b3 <command_test_kfree+0x1f>
	{
		test_kfree_bestfirstfit();
f01025ac:	e8 e8 f0 01 00       	call   f0121699 <test_kfree_bestfirstfit>
f01025b1:	eb 05                	jmp    f01025b8 <command_test_kfree+0x24>
	}
	else //NEXT & CONT
	{
		test_kfree();
f01025b3:	e8 8f cf 01 00       	call   f011f547 <test_kfree>
	}
	return 0;
f01025b8:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01025bd:	c9                   	leave  
f01025be:	c3                   	ret    

f01025bf <command_test_kheap_phys_addr>:
int command_test_kheap_phys_addr(int number_of_arguments, char **arguments)
{
f01025bf:	55                   	push   %ebp
f01025c0:	89 e5                	mov    %esp,%ebp
f01025c2:	83 ec 08             	sub    $0x8,%esp
	test_kheap_phys_addr();
f01025c5:	e8 cb 0a 02 00       	call   f0123095 <test_kheap_phys_addr>
	return 0;
f01025ca:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01025cf:	c9                   	leave  
f01025d0:	c3                   	ret    

f01025d1 <command_test_kheap_virt_addr>:
int command_test_kheap_virt_addr(int number_of_arguments, char **arguments)
{
f01025d1:	55                   	push   %ebp
f01025d2:	89 e5                	mov    %esp,%ebp
f01025d4:	83 ec 08             	sub    $0x8,%esp
	test_kheap_virt_addr();
f01025d7:	e8 89 1f 02 00       	call   f0124565 <test_kheap_virt_addr>
	return 0;
f01025dc:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01025e1:	c9                   	leave  
f01025e2:	c3                   	ret    

f01025e3 <command_test_three_creation_functions>:
int command_test_three_creation_functions(int number_of_arguments, char **arguments)
{
f01025e3:	55                   	push   %ebp
f01025e4:	89 e5                	mov    %esp,%ebp
f01025e6:	83 ec 08             	sub    $0x8,%esp
	test_three_creation_functions();
f01025e9:	e8 54 34 02 00       	call   f0125a42 <test_three_creation_functions>
	return 0;
f01025ee:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01025f3:	c9                   	leave  
f01025f4:	c3                   	ret    

f01025f5 <command_test_krealloc>:

int command_test_krealloc(int number_of_arguments, char **arguments) {
f01025f5:	55                   	push   %ebp
f01025f6:	89 e5                	mov    %esp,%ebp
f01025f8:	83 ec 08             	sub    $0x8,%esp
	if (isKHeapPlacementStrategyNEXTFIT())
f01025fb:	e8 88 e8 ff ff       	call   f0100e88 <isKHeapPlacementStrategyNEXTFIT>
f0102600:	84 c0                	test   %al,%al
f0102602:	74 07                	je     f010260b <command_test_krealloc+0x16>
		test_krealloc();
f0102604:	e8 50 8e 02 00       	call   f012b459 <test_krealloc>
f0102609:	eb 0e                	jmp    f0102619 <command_test_krealloc+0x24>
	else if (isKHeapPlacementStrategyBESTFIT())
f010260b:	e8 63 e8 ff ff       	call   f0100e73 <isKHeapPlacementStrategyBESTFIT>
f0102610:	84 c0                	test   %al,%al
f0102612:	74 05                	je     f0102619 <command_test_krealloc+0x24>
		test_krealloc_BF();
f0102614:	e8 f0 ad 02 00       	call   f012d409 <test_krealloc_BF>
	return 0;
f0102619:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010261e:	c9                   	leave  
f010261f:	c3                   	ret    

f0102620 <command_test_priority1>:

int command_test_priority1(int number_of_arguments, char **arguments)
{
f0102620:	55                   	push   %ebp
f0102621:	89 e5                	mov    %esp,%ebp
f0102623:	83 ec 08             	sub    $0x8,%esp
	test_priority_normal_and_higher();
f0102626:	e8 3f 34 01 00       	call   f0115a6a <test_priority_normal_and_higher>
	return 0;
f010262b:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102630:	c9                   	leave  
f0102631:	c3                   	ret    

f0102632 <command_test_priority2>:

int command_test_priority2(int number_of_arguments, char **arguments)
{
f0102632:	55                   	push   %ebp
f0102633:	89 e5                	mov    %esp,%ebp
f0102635:	83 ec 08             	sub    $0x8,%esp
	test_priority_normal_and_lower();
f0102638:	e8 07 3e 01 00       	call   f0116444 <test_priority_normal_and_lower>
	return 0;
f010263d:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102642:	c9                   	leave  
f0102643:	c3                   	ret    

f0102644 <command_test_kfreeall>:

int command_test_kfreeall(int number_of_arguments, char **arguments)
{
f0102644:	55                   	push   %ebp
f0102645:	89 e5                	mov    %esp,%ebp
f0102647:	83 ec 08             	sub    $0x8,%esp
	test_kfreeall();
f010264a:	e8 2d 36 02 00       	call   f0125c7c <test_kfreeall>
	return 0;
f010264f:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102654:	c9                   	leave  
f0102655:	c3                   	ret    

f0102656 <command_test_kexpand>:

int command_test_kexpand(int number_of_arguments, char **arguments)
{
f0102656:	55                   	push   %ebp
f0102657:	89 e5                	mov    %esp,%ebp
f0102659:	83 ec 08             	sub    $0x8,%esp
	test_kexpand();
f010265c:	e8 07 4d 02 00       	call   f0127368 <test_kexpand>
	return 0;
f0102661:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102666:	c9                   	leave  
f0102667:	c3                   	ret    

f0102668 <command_test_kshrink>:

int command_test_kshrink(int number_of_arguments, char **arguments)
{
f0102668:	55                   	push   %ebp
f0102669:	89 e5                	mov    %esp,%ebp
f010266b:	83 ec 08             	sub    $0x8,%esp
	test_kshrink();
f010266e:	e8 76 5a 02 00       	call   f01280e9 <test_kshrink>
	return 0;
f0102673:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102678:	c9                   	leave  
f0102679:	c3                   	ret    

f010267a <command_test_kfreelast>:

int command_test_kfreelast(int number_of_arguments, char **arguments)
{
f010267a:	55                   	push   %ebp
f010267b:	89 e5                	mov    %esp,%ebp
f010267d:	83 ec 08             	sub    $0x8,%esp
	test_kfreelast();
f0102680:	e8 51 69 02 00       	call   f0128fd6 <test_kfreelast>
	return 0;
f0102685:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010268a:	c9                   	leave  
f010268b:	c3                   	ret    

f010268c <command_test_sc_MLFQ>:

int command_test_sc_MLFQ(int number_of_arguments, char **arguments)
{
f010268c:	55                   	push   %ebp
f010268d:	89 e5                	mov    %esp,%ebp
f010268f:	83 ec 18             	sub    $0x18,%esp
	int numOfSlave2 = strtol(arguments[1], NULL, 10);
f0102692:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102695:	83 c0 04             	add    $0x4,%eax
f0102698:	8b 00                	mov    (%eax),%eax
f010269a:	83 ec 04             	sub    $0x4,%esp
f010269d:	6a 0a                	push   $0xa
f010269f:	6a 00                	push   $0x0
f01026a1:	50                   	push   %eax
f01026a2:	e8 e4 e3 02 00       	call   f0130a8b <strtol>
f01026a7:	83 c4 10             	add    $0x10,%esp
f01026aa:	89 45 e8             	mov    %eax,-0x18(%ebp)
	int cnt = 0 ;
f01026ad:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	int firstTime = 1;
f01026b4:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
	struct Env *e ;
	LIST_FOREACH(e, &env_exit_queue)
f01026bb:	a1 44 ea 6b f0       	mov    0xf06bea44,%eax
f01026c0:	89 45 ec             	mov    %eax,-0x14(%ebp)
f01026c3:	eb 3d                	jmp    f0102702 <command_test_sc_MLFQ+0x76>
	{
		if (strcmp(e->prog_name, "tmlfq_2") == 0)
f01026c5:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01026c8:	05 18 da 01 00       	add    $0x1da18,%eax
f01026cd:	83 ec 08             	sub    $0x8,%esp
f01026d0:	68 1a 49 13 f0       	push   $0xf013491a
f01026d5:	50                   	push   %eax
f01026d6:	e8 5c e1 02 00       	call   f0130837 <strcmp>
f01026db:	83 c4 10             	add    $0x10,%esp
f01026de:	85 c0                	test   %eax,%eax
f01026e0:	75 12                	jne    f01026f4 <command_test_sc_MLFQ+0x68>
		{
			if (firstTime)
f01026e2:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f01026e6:	74 07                	je     f01026ef <command_test_sc_MLFQ+0x63>
				firstTime = 0;
f01026e8:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
			cnt++ ;
f01026ef:	ff 45 f4             	incl   -0xc(%ebp)
f01026f2:	eb 06                	jmp    f01026fa <command_test_sc_MLFQ+0x6e>
		}
		else if (!firstTime)
f01026f4:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f01026f8:	74 31                	je     f010272b <command_test_sc_MLFQ+0x9f>
{
	int numOfSlave2 = strtol(arguments[1], NULL, 10);
	int cnt = 0 ;
	int firstTime = 1;
	struct Env *e ;
	LIST_FOREACH(e, &env_exit_queue)
f01026fa:	a1 4c ea 6b f0       	mov    0xf06bea4c,%eax
f01026ff:	89 45 ec             	mov    %eax,-0x14(%ebp)
f0102702:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0102706:	74 08                	je     f0102710 <command_test_sc_MLFQ+0x84>
f0102708:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010270b:	8b 40 44             	mov    0x44(%eax),%eax
f010270e:	eb 05                	jmp    f0102715 <command_test_sc_MLFQ+0x89>
f0102710:	b8 00 00 00 00       	mov    $0x0,%eax
f0102715:	a3 4c ea 6b f0       	mov    %eax,0xf06bea4c
f010271a:	a1 4c ea 6b f0       	mov    0xf06bea4c,%eax
f010271f:	85 c0                	test   %eax,%eax
f0102721:	75 a2                	jne    f01026c5 <command_test_sc_MLFQ+0x39>
f0102723:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0102727:	75 9c                	jne    f01026c5 <command_test_sc_MLFQ+0x39>
f0102729:	eb 01                	jmp    f010272c <command_test_sc_MLFQ+0xa0>
			if (firstTime)
				firstTime = 0;
			cnt++ ;
		}
		else if (!firstTime)
			break;
f010272b:	90                   	nop
	}
	if(cnt == numOfSlave2)
f010272c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010272f:	3b 45 e8             	cmp    -0x18(%ebp),%eax
f0102732:	75 12                	jne    f0102746 <command_test_sc_MLFQ+0xba>
	{
		cprintf("Congratulations... MLFQScenario# completed successfully\n");
f0102734:	83 ec 0c             	sub    $0xc,%esp
f0102737:	68 24 49 13 f0       	push   $0xf0134924
f010273c:	e8 ec e4 ff ff       	call   f0100c2d <cprintf>
f0102741:	83 c4 10             	add    $0x10,%esp
f0102744:	eb 17                	jmp    f010275d <command_test_sc_MLFQ+0xd1>
	}
	else
	{
		panic("MLFQScenario# failed\n");
f0102746:	83 ec 04             	sub    $0x4,%esp
f0102749:	68 5d 49 13 f0       	push   $0xf013495d
f010274e:	68 8b 04 00 00       	push   $0x48b
f0102753:	68 b9 3b 13 f0       	push   $0xf0133bb9
f0102758:	e8 49 da ff ff       	call   f01001a6 <_panic>
	}
	return 0;
f010275d:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102762:	c9                   	leave  
f0102763:	c3                   	ret    

f0102764 <command_test_autocomplete>:


/*2022*/
int command_test_autocomplete(int number_of_arguments, char **arguments)
{
f0102764:	55                   	push   %ebp
f0102765:	89 e5                	mov    %esp,%ebp
f0102767:	83 ec 18             	sub    $0x18,%esp
	int x = TestAutoCompleteCommand();
f010276a:	e8 ac dc 00 00       	call   f011041b <TestAutoCompleteCommand>
f010276f:	89 45 f4             	mov    %eax,-0xc(%ebp)
	return 0;
f0102772:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102777:	c9                   	leave  
f0102778:	c3                   	ret    

f0102779 <command_test_lists>:
int command_test_lists(int number_of_arguments, char **arguments)
{
f0102779:	55                   	push   %ebp
f010277a:	89 e5                	mov    %esp,%ebp
f010277c:	83 ec 08             	sub    $0x8,%esp
	if (number_of_arguments != 2)
f010277f:	83 7d 08 02          	cmpl   $0x2,0x8(%ebp)
f0102783:	74 1a                	je     f010279f <command_test_lists+0x26>
	{
		cprintf("Invalid number of arguments! USAGE: tstlsts <testname>\n") ;
f0102785:	83 ec 0c             	sub    $0xc,%esp
f0102788:	68 74 49 13 f0       	push   $0xf0134974
f010278d:	e8 9b e4 ff ff       	call   f0100c2d <cprintf>
f0102792:	83 c4 10             	add    $0x10,%esp
		return 0;
f0102795:	b8 00 00 00 00       	mov    $0x0,%eax
f010279a:	e9 82 01 00 00       	jmp    f0102921 <command_test_lists+0x1a8>
	}
	// Test 1 Example for initialize_MemBlocksList: tstlsts init 5
	if(strcmp(arguments[1], "init") == 0)
f010279f:	8b 45 0c             	mov    0xc(%ebp),%eax
f01027a2:	83 c0 04             	add    $0x4,%eax
f01027a5:	8b 00                	mov    (%eax),%eax
f01027a7:	83 ec 08             	sub    $0x8,%esp
f01027aa:	68 ac 49 13 f0       	push   $0xf01349ac
f01027af:	50                   	push   %eax
f01027b0:	e8 82 e0 02 00       	call   f0130837 <strcmp>
f01027b5:	83 c4 10             	add    $0x10,%esp
f01027b8:	85 c0                	test   %eax,%eax
f01027ba:	75 0a                	jne    f01027c6 <command_test_lists+0x4d>
	{
		test_initialize_MemBlocksList();
f01027bc:	e8 04 b2 00 00       	call   f010d9c5 <test_initialize_MemBlocksList>
f01027c1:	e9 56 01 00 00       	jmp    f010291c <command_test_lists+0x1a3>
	}
	// Test 2 Example for insert_sorted: tstlsts insrt
	else if(strcmp(arguments[1], "insrt") == 0)
f01027c6:	8b 45 0c             	mov    0xc(%ebp),%eax
f01027c9:	83 c0 04             	add    $0x4,%eax
f01027cc:	8b 00                	mov    (%eax),%eax
f01027ce:	83 ec 08             	sub    $0x8,%esp
f01027d1:	68 b1 49 13 f0       	push   $0xf01349b1
f01027d6:	50                   	push   %eax
f01027d7:	e8 5b e0 02 00       	call   f0130837 <strcmp>
f01027dc:	83 c4 10             	add    $0x10,%esp
f01027df:	85 c0                	test   %eax,%eax
f01027e1:	75 0a                	jne    f01027ed <command_test_lists+0x74>
	{
		test_insert_sorted_allocList();
f01027e3:	e8 f1 b2 00 00       	call   f010dad9 <test_insert_sorted_allocList>
f01027e8:	e9 2f 01 00 00       	jmp    f010291c <command_test_lists+0x1a3>
	}
	// Test 3 Example for find_block: tstlsts find
	else if(strcmp(arguments[1], "find") == 0)
f01027ed:	8b 45 0c             	mov    0xc(%ebp),%eax
f01027f0:	83 c0 04             	add    $0x4,%eax
f01027f3:	8b 00                	mov    (%eax),%eax
f01027f5:	83 ec 08             	sub    $0x8,%esp
f01027f8:	68 b7 49 13 f0       	push   $0xf01349b7
f01027fd:	50                   	push   %eax
f01027fe:	e8 34 e0 02 00       	call   f0130837 <strcmp>
f0102803:	83 c4 10             	add    $0x10,%esp
f0102806:	85 c0                	test   %eax,%eax
f0102808:	75 0a                	jne    f0102814 <command_test_lists+0x9b>
	{
		test_find_block();
f010280a:	e8 88 b7 00 00       	call   f010df97 <test_find_block>
f010280f:	e9 08 01 00 00       	jmp    f010291c <command_test_lists+0x1a3>
	}
	// Test 4 Example for alloc_block_FF: tstlsts FF
	else if(strcmp(arguments[1], "FF") == 0 || strcmp(arguments[1], "ff") == 0)
f0102814:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102817:	83 c0 04             	add    $0x4,%eax
f010281a:	8b 00                	mov    (%eax),%eax
f010281c:	83 ec 08             	sub    $0x8,%esp
f010281f:	68 bc 49 13 f0       	push   $0xf01349bc
f0102824:	50                   	push   %eax
f0102825:	e8 0d e0 02 00       	call   f0130837 <strcmp>
f010282a:	83 c4 10             	add    $0x10,%esp
f010282d:	85 c0                	test   %eax,%eax
f010282f:	74 1d                	je     f010284e <command_test_lists+0xd5>
f0102831:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102834:	83 c0 04             	add    $0x4,%eax
f0102837:	8b 00                	mov    (%eax),%eax
f0102839:	83 ec 08             	sub    $0x8,%esp
f010283c:	68 bf 49 13 f0       	push   $0xf01349bf
f0102841:	50                   	push   %eax
f0102842:	e8 f0 df 02 00       	call   f0130837 <strcmp>
f0102847:	83 c4 10             	add    $0x10,%esp
f010284a:	85 c0                	test   %eax,%eax
f010284c:	75 0a                	jne    f0102858 <command_test_lists+0xdf>
	{
		test_alloc_block_FF();
f010284e:	e8 9f ba 00 00       	call   f010e2f2 <test_alloc_block_FF>
f0102853:	e9 c4 00 00 00       	jmp    f010291c <command_test_lists+0x1a3>
	}
	// Test 5 Example for alloc_block_BF: tstlsts BF
	else if(strcmp(arguments[1], "BF") == 0 || strcmp(arguments[1], "bf") == 0)
f0102858:	8b 45 0c             	mov    0xc(%ebp),%eax
f010285b:	83 c0 04             	add    $0x4,%eax
f010285e:	8b 00                	mov    (%eax),%eax
f0102860:	83 ec 08             	sub    $0x8,%esp
f0102863:	68 c2 49 13 f0       	push   $0xf01349c2
f0102868:	50                   	push   %eax
f0102869:	e8 c9 df 02 00       	call   f0130837 <strcmp>
f010286e:	83 c4 10             	add    $0x10,%esp
f0102871:	85 c0                	test   %eax,%eax
f0102873:	74 1d                	je     f0102892 <command_test_lists+0x119>
f0102875:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102878:	83 c0 04             	add    $0x4,%eax
f010287b:	8b 00                	mov    (%eax),%eax
f010287d:	83 ec 08             	sub    $0x8,%esp
f0102880:	68 c5 49 13 f0       	push   $0xf01349c5
f0102885:	50                   	push   %eax
f0102886:	e8 ac df 02 00       	call   f0130837 <strcmp>
f010288b:	83 c4 10             	add    $0x10,%esp
f010288e:	85 c0                	test   %eax,%eax
f0102890:	75 0a                	jne    f010289c <command_test_lists+0x123>
	{
		test_alloc_block_BF();
f0102892:	e8 d9 be 00 00       	call   f010e770 <test_alloc_block_BF>
f0102897:	e9 80 00 00 00       	jmp    f010291c <command_test_lists+0x1a3>
	}
	// Test 6 Example for alloc_block_NF: tstlsts NF
	else if(strcmp(arguments[1], "NF") == 0 || strcmp(arguments[1], "nf") == 0)
f010289c:	8b 45 0c             	mov    0xc(%ebp),%eax
f010289f:	83 c0 04             	add    $0x4,%eax
f01028a2:	8b 00                	mov    (%eax),%eax
f01028a4:	83 ec 08             	sub    $0x8,%esp
f01028a7:	68 c8 49 13 f0       	push   $0xf01349c8
f01028ac:	50                   	push   %eax
f01028ad:	e8 85 df 02 00       	call   f0130837 <strcmp>
f01028b2:	83 c4 10             	add    $0x10,%esp
f01028b5:	85 c0                	test   %eax,%eax
f01028b7:	74 1d                	je     f01028d6 <command_test_lists+0x15d>
f01028b9:	8b 45 0c             	mov    0xc(%ebp),%eax
f01028bc:	83 c0 04             	add    $0x4,%eax
f01028bf:	8b 00                	mov    (%eax),%eax
f01028c1:	83 ec 08             	sub    $0x8,%esp
f01028c4:	68 cb 49 13 f0       	push   $0xf01349cb
f01028c9:	50                   	push   %eax
f01028ca:	e8 68 df 02 00       	call   f0130837 <strcmp>
f01028cf:	83 c4 10             	add    $0x10,%esp
f01028d2:	85 c0                	test   %eax,%eax
f01028d4:	75 07                	jne    f01028dd <command_test_lists+0x164>
	{
		test_alloc_block_NF();
f01028d6:	e8 1c c5 00 00       	call   f010edf7 <test_alloc_block_NF>
f01028db:	eb 3f                	jmp    f010291c <command_test_lists+0x1a3>
	}
	// Test 7 Example for alloc_block_NF: tstlsts merge
	else if(strcmp(arguments[1], "MERGE") == 0 || strcmp(arguments[1], "merge") == 0)
f01028dd:	8b 45 0c             	mov    0xc(%ebp),%eax
f01028e0:	83 c0 04             	add    $0x4,%eax
f01028e3:	8b 00                	mov    (%eax),%eax
f01028e5:	83 ec 08             	sub    $0x8,%esp
f01028e8:	68 ce 49 13 f0       	push   $0xf01349ce
f01028ed:	50                   	push   %eax
f01028ee:	e8 44 df 02 00       	call   f0130837 <strcmp>
f01028f3:	83 c4 10             	add    $0x10,%esp
f01028f6:	85 c0                	test   %eax,%eax
f01028f8:	74 1d                	je     f0102917 <command_test_lists+0x19e>
f01028fa:	8b 45 0c             	mov    0xc(%ebp),%eax
f01028fd:	83 c0 04             	add    $0x4,%eax
f0102900:	8b 00                	mov    (%eax),%eax
f0102902:	83 ec 08             	sub    $0x8,%esp
f0102905:	68 d4 49 13 f0       	push   $0xf01349d4
f010290a:	50                   	push   %eax
f010290b:	e8 27 df 02 00       	call   f0130837 <strcmp>
f0102910:	83 c4 10             	add    $0x10,%esp
f0102913:	85 c0                	test   %eax,%eax
f0102915:	75 05                	jne    f010291c <command_test_lists+0x1a3>
	{
		test_insert_sorted_with_merge_freeList();
f0102917:	e8 69 cd 00 00       	call   f010f685 <test_insert_sorted_with_merge_freeList>
	}
	return 0;
f010291c:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102921:	c9                   	leave  
f0102922:	c3                   	ret    

f0102923 <command_test_chunks>:

int command_test_chunks(int number_of_arguments, char **arguments)
{
f0102923:	55                   	push   %ebp
f0102924:	89 e5                	mov    %esp,%ebp
f0102926:	83 ec 08             	sub    $0x8,%esp
	if (number_of_arguments != 2)
f0102929:	83 7d 08 02          	cmpl   $0x2,0x8(%ebp)
f010292d:	74 1a                	je     f0102949 <command_test_chunks+0x26>
	{
		cprintf("Invalid number of arguments! USAGE: tstchunk <testname>\n") ;
f010292f:	83 ec 0c             	sub    $0xc,%esp
f0102932:	68 dc 49 13 f0       	push   $0xf01349dc
f0102937:	e8 f1 e2 ff ff       	call   f0100c2d <cprintf>
f010293c:	83 c4 10             	add    $0x10,%esp
		return 0;
f010293f:	b8 00 00 00 00       	mov    $0x0,%eax
f0102944:	e9 e1 00 00 00       	jmp    f0102a2a <command_test_chunks+0x107>
	}
	// CUT-PASTE Test
	if(strcmp(arguments[1], "cutpaste") == 0)
f0102949:	8b 45 0c             	mov    0xc(%ebp),%eax
f010294c:	83 c0 04             	add    $0x4,%eax
f010294f:	8b 00                	mov    (%eax),%eax
f0102951:	83 ec 08             	sub    $0x8,%esp
f0102954:	68 15 4a 13 f0       	push   $0xf0134a15
f0102959:	50                   	push   %eax
f010295a:	e8 d8 de 02 00       	call   f0130837 <strcmp>
f010295f:	83 c4 10             	add    $0x10,%esp
f0102962:	85 c0                	test   %eax,%eax
f0102964:	75 0a                	jne    f0102970 <command_test_chunks+0x4d>
	{
		test_cut_paste_pages();
f0102966:	e8 44 e5 00 00       	call   f0110eaf <test_cut_paste_pages>
f010296b:	e9 b5 00 00 00       	jmp    f0102a25 <command_test_chunks+0x102>
	}
	// COPY-PASTE Test
	else if(strcmp(arguments[1], "copypaste") == 0)
f0102970:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102973:	83 c0 04             	add    $0x4,%eax
f0102976:	8b 00                	mov    (%eax),%eax
f0102978:	83 ec 08             	sub    $0x8,%esp
f010297b:	68 1e 4a 13 f0       	push   $0xf0134a1e
f0102980:	50                   	push   %eax
f0102981:	e8 b1 de 02 00       	call   f0130837 <strcmp>
f0102986:	83 c4 10             	add    $0x10,%esp
f0102989:	85 c0                	test   %eax,%eax
f010298b:	75 0a                	jne    f0102997 <command_test_chunks+0x74>
	{
		test_copy_paste_chunk();
f010298d:	e8 68 ef 00 00       	call   f01118fa <test_copy_paste_chunk>
f0102992:	e9 8e 00 00 00       	jmp    f0102a25 <command_test_chunks+0x102>
	}
	// SHARE Test
	else if(strcmp(arguments[1], "share") == 0)
f0102997:	8b 45 0c             	mov    0xc(%ebp),%eax
f010299a:	83 c0 04             	add    $0x4,%eax
f010299d:	8b 00                	mov    (%eax),%eax
f010299f:	83 ec 08             	sub    $0x8,%esp
f01029a2:	68 28 4a 13 f0       	push   $0xf0134a28
f01029a7:	50                   	push   %eax
f01029a8:	e8 8a de 02 00       	call   f0130837 <strcmp>
f01029ad:	83 c4 10             	add    $0x10,%esp
f01029b0:	85 c0                	test   %eax,%eax
f01029b2:	75 07                	jne    f01029bb <command_test_chunks+0x98>
	{
		test_share_chunk();
f01029b4:	e8 3f 00 01 00       	call   f01129f8 <test_share_chunk>
f01029b9:	eb 6a                	jmp    f0102a25 <command_test_chunks+0x102>
	}
	// ALLOCATE Test
	else if(strcmp(arguments[1], "allocate") == 0)
f01029bb:	8b 45 0c             	mov    0xc(%ebp),%eax
f01029be:	83 c0 04             	add    $0x4,%eax
f01029c1:	8b 00                	mov    (%eax),%eax
f01029c3:	83 ec 08             	sub    $0x8,%esp
f01029c6:	68 2e 4a 13 f0       	push   $0xf0134a2e
f01029cb:	50                   	push   %eax
f01029cc:	e8 66 de 02 00       	call   f0130837 <strcmp>
f01029d1:	83 c4 10             	add    $0x10,%esp
f01029d4:	85 c0                	test   %eax,%eax
f01029d6:	75 07                	jne    f01029df <command_test_chunks+0xbc>
	{
		test_allocate_chunk();
f01029d8:	e8 43 0a 01 00       	call   f0113420 <test_allocate_chunk>
f01029dd:	eb 46                	jmp    f0102a25 <command_test_chunks+0x102>
	}
	// REQUIRED SPACE Test
	else if(strcmp(arguments[1], "required_space") == 0)
f01029df:	8b 45 0c             	mov    0xc(%ebp),%eax
f01029e2:	83 c0 04             	add    $0x4,%eax
f01029e5:	8b 00                	mov    (%eax),%eax
f01029e7:	83 ec 08             	sub    $0x8,%esp
f01029ea:	68 37 4a 13 f0       	push   $0xf0134a37
f01029ef:	50                   	push   %eax
f01029f0:	e8 42 de 02 00       	call   f0130837 <strcmp>
f01029f5:	83 c4 10             	add    $0x10,%esp
f01029f8:	85 c0                	test   %eax,%eax
f01029fa:	75 07                	jne    f0102a03 <command_test_chunks+0xe0>
	{
		test_calculate_required_frames();
f01029fc:	e8 ce 12 01 00       	call   f0113ccf <test_calculate_required_frames>
f0102a01:	eb 22                	jmp    f0102a25 <command_test_chunks+0x102>
	}
	// ALLOCATED SPACE Test
	else if(strcmp(arguments[1], "allocated_space") == 0)
f0102a03:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102a06:	83 c0 04             	add    $0x4,%eax
f0102a09:	8b 00                	mov    (%eax),%eax
f0102a0b:	83 ec 08             	sub    $0x8,%esp
f0102a0e:	68 46 4a 13 f0       	push   $0xf0134a46
f0102a13:	50                   	push   %eax
f0102a14:	e8 1e de 02 00       	call   f0130837 <strcmp>
f0102a19:	83 c4 10             	add    $0x10,%esp
f0102a1c:	85 c0                	test   %eax,%eax
f0102a1e:	75 05                	jne    f0102a25 <command_test_chunks+0x102>
	{
		test_calculate_allocated_space();
f0102a20:	e8 1e 1b 01 00       	call   f0114543 <test_calculate_allocated_space>
	}
	return 0;
f0102a25:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102a2a:	c9                   	leave  
f0102a2b:	c3                   	ret    

f0102a2c <command_test_paging_manipulation>:

int command_test_paging_manipulation(int number_of_arguments, char **arguments)
{
f0102a2c:	55                   	push   %ebp
f0102a2d:	89 e5                	mov    %esp,%ebp
f0102a2f:	83 ec 08             	sub    $0x8,%esp
	if (number_of_arguments != 2)
f0102a32:	83 7d 08 02          	cmpl   $0x2,0x8(%ebp)
f0102a36:	74 1a                	je     f0102a52 <command_test_paging_manipulation+0x26>
	{
		cprintf("Invalid number of arguments! USAGE: tstpg <testname>\n") ;
f0102a38:	83 ec 0c             	sub    $0xc,%esp
f0102a3b:	68 58 4a 13 f0       	push   $0xf0134a58
f0102a40:	e8 e8 e1 ff ff       	call   f0100c2d <cprintf>
f0102a45:	83 c4 10             	add    $0x10,%esp
		return 0;
f0102a48:	b8 00 00 00 00       	mov    $0x0,%eax
f0102a4d:	e9 e1 00 00 00       	jmp    f0102b33 <command_test_paging_manipulation+0x107>
	}
	// Test 1.1-Set/Clear permissions: tstpg scperm1
	if(strcmp(arguments[1], "scperm1") == 0)
f0102a52:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102a55:	83 c0 04             	add    $0x4,%eax
f0102a58:	8b 00                	mov    (%eax),%eax
f0102a5a:	83 ec 08             	sub    $0x8,%esp
f0102a5d:	68 8e 4a 13 f0       	push   $0xf0134a8e
f0102a62:	50                   	push   %eax
f0102a63:	e8 cf dd 02 00       	call   f0130837 <strcmp>
f0102a68:	83 c4 10             	add    $0x10,%esp
f0102a6b:	85 c0                	test   %eax,%eax
f0102a6d:	75 0a                	jne    f0102a79 <command_test_paging_manipulation+0x4d>
	{
		test_pt_set_page_permissions();
f0102a6f:	e8 2c db 00 00       	call   f01105a0 <test_pt_set_page_permissions>
f0102a74:	e9 b5 00 00 00       	jmp    f0102b2e <command_test_paging_manipulation+0x102>
	}
	// Test 1.2-Set/Clear permissions: tstpg scperm2
	else if(strcmp(arguments[1], "scperm2") == 0)
f0102a79:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102a7c:	83 c0 04             	add    $0x4,%eax
f0102a7f:	8b 00                	mov    (%eax),%eax
f0102a81:	83 ec 08             	sub    $0x8,%esp
f0102a84:	68 96 4a 13 f0       	push   $0xf0134a96
f0102a89:	50                   	push   %eax
f0102a8a:	e8 a8 dd 02 00       	call   f0130837 <strcmp>
f0102a8f:	83 c4 10             	add    $0x10,%esp
f0102a92:	85 c0                	test   %eax,%eax
f0102a94:	75 0a                	jne    f0102aa0 <command_test_paging_manipulation+0x74>
	{
		test_pt_set_page_permissions_invalid_va();
f0102a96:	e8 68 dd 00 00       	call   f0110803 <test_pt_set_page_permissions_invalid_va>
f0102a9b:	e9 8e 00 00 00       	jmp    f0102b2e <command_test_paging_manipulation+0x102>
	}
	// Test 2-Get permissions: tstpg getperm
	else if(strcmp(arguments[1], "getperm") == 0)
f0102aa0:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102aa3:	83 c0 04             	add    $0x4,%eax
f0102aa6:	8b 00                	mov    (%eax),%eax
f0102aa8:	83 ec 08             	sub    $0x8,%esp
f0102aab:	68 9e 4a 13 f0       	push   $0xf0134a9e
f0102ab0:	50                   	push   %eax
f0102ab1:	e8 81 dd 02 00       	call   f0130837 <strcmp>
f0102ab6:	83 c4 10             	add    $0x10,%esp
f0102ab9:	85 c0                	test   %eax,%eax
f0102abb:	75 07                	jne    f0102ac4 <command_test_paging_manipulation+0x98>
	{
		test_pt_get_page_permissions();
f0102abd:	e8 8a dd 00 00       	call   f011084c <test_pt_get_page_permissions>
f0102ac2:	eb 6a                	jmp    f0102b2e <command_test_paging_manipulation+0x102>
	}
	// Test 3.1-Clear entry: tstpg clear1
	else if(strcmp(arguments[1], "clear1") == 0)
f0102ac4:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102ac7:	83 c0 04             	add    $0x4,%eax
f0102aca:	8b 00                	mov    (%eax),%eax
f0102acc:	83 ec 08             	sub    $0x8,%esp
f0102acf:	68 a6 4a 13 f0       	push   $0xf0134aa6
f0102ad4:	50                   	push   %eax
f0102ad5:	e8 5d dd 02 00       	call   f0130837 <strcmp>
f0102ada:	83 c4 10             	add    $0x10,%esp
f0102add:	85 c0                	test   %eax,%eax
f0102adf:	75 07                	jne    f0102ae8 <command_test_paging_manipulation+0xbc>
	{
		test_pt_clear_page_table_entry();
f0102ae1:	e8 aa de 00 00       	call   f0110990 <test_pt_clear_page_table_entry>
f0102ae6:	eb 46                	jmp    f0102b2e <command_test_paging_manipulation+0x102>
	}
	// Test 3.2-Clear entry: tstpg clear2
	else if(strcmp(arguments[1], "clear2") == 0)
f0102ae8:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102aeb:	83 c0 04             	add    $0x4,%eax
f0102aee:	8b 00                	mov    (%eax),%eax
f0102af0:	83 ec 08             	sub    $0x8,%esp
f0102af3:	68 ad 4a 13 f0       	push   $0xf0134aad
f0102af8:	50                   	push   %eax
f0102af9:	e8 39 dd 02 00       	call   f0130837 <strcmp>
f0102afe:	83 c4 10             	add    $0x10,%esp
f0102b01:	85 c0                	test   %eax,%eax
f0102b03:	75 07                	jne    f0102b0c <command_test_paging_manipulation+0xe0>
	{
		test_pt_clear_page_table_entry_invalid_va();
f0102b05:	e8 df df 00 00       	call   f0110ae9 <test_pt_clear_page_table_entry_invalid_va>
f0102b0a:	eb 22                	jmp    f0102b2e <command_test_paging_manipulation+0x102>
	}
	// Test 4-Convert virtual to physical: tstpg v2p
	else if(strcmp(arguments[1], "v2p") == 0)
f0102b0c:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102b0f:	83 c0 04             	add    $0x4,%eax
f0102b12:	8b 00                	mov    (%eax),%eax
f0102b14:	83 ec 08             	sub    $0x8,%esp
f0102b17:	68 b4 4a 13 f0       	push   $0xf0134ab4
f0102b1c:	50                   	push   %eax
f0102b1d:	e8 15 dd 02 00       	call   f0130837 <strcmp>
f0102b22:	83 c4 10             	add    $0x10,%esp
f0102b25:	85 c0                	test   %eax,%eax
f0102b27:	75 05                	jne    f0102b2e <command_test_paging_manipulation+0x102>
	{
		test_virtual_to_physical();
f0102b29:	e8 f3 df 00 00       	call   f0110b21 <test_virtual_to_physical>
	}
	return 0;
f0102b2e:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102b33:	c9                   	leave  
f0102b34:	c3                   	ret    

f0102b35 <command_test_kheap>:

int command_test_kheap(int number_of_arguments, char **arguments)
{
f0102b35:	55                   	push   %ebp
f0102b36:	89 e5                	mov    %esp,%ebp
f0102b38:	83 ec 18             	sub    $0x18,%esp
	// Parameters Validation Checking
	if (strcmp(arguments[2], "kmalloc") == 0 && number_of_arguments != 4)
f0102b3b:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102b3e:	83 c0 08             	add    $0x8,%eax
f0102b41:	8b 00                	mov    (%eax),%eax
f0102b43:	83 ec 08             	sub    $0x8,%esp
f0102b46:	68 b8 4a 13 f0       	push   $0xf0134ab8
f0102b4b:	50                   	push   %eax
f0102b4c:	e8 e6 dc 02 00       	call   f0130837 <strcmp>
f0102b51:	83 c4 10             	add    $0x10,%esp
f0102b54:	85 c0                	test   %eax,%eax
f0102b56:	75 20                	jne    f0102b78 <command_test_kheap+0x43>
f0102b58:	83 7d 08 04          	cmpl   $0x4,0x8(%ebp)
f0102b5c:	74 1a                	je     f0102b78 <command_test_kheap+0x43>
	{
		cprintf("Invalid number of arguments! USAGE: tstkheap <Strategy> kmalloc <1 or 2 or 3>\n") ;
f0102b5e:	83 ec 0c             	sub    $0xc,%esp
f0102b61:	68 c0 4a 13 f0       	push   $0xf0134ac0
f0102b66:	e8 c2 e0 ff ff       	call   f0100c2d <cprintf>
f0102b6b:	83 c4 10             	add    $0x10,%esp
		return 0;
f0102b6e:	b8 00 00 00 00       	mov    $0x0,%eax
f0102b73:	e9 33 03 00 00       	jmp    f0102eab <command_test_kheap+0x376>
	}
	if (strcmp(arguments[2], "kmalloc") != 0 && number_of_arguments != 3)
f0102b78:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102b7b:	83 c0 08             	add    $0x8,%eax
f0102b7e:	8b 00                	mov    (%eax),%eax
f0102b80:	83 ec 08             	sub    $0x8,%esp
f0102b83:	68 b8 4a 13 f0       	push   $0xf0134ab8
f0102b88:	50                   	push   %eax
f0102b89:	e8 a9 dc 02 00       	call   f0130837 <strcmp>
f0102b8e:	83 c4 10             	add    $0x10,%esp
f0102b91:	85 c0                	test   %eax,%eax
f0102b93:	74 20                	je     f0102bb5 <command_test_kheap+0x80>
f0102b95:	83 7d 08 03          	cmpl   $0x3,0x8(%ebp)
f0102b99:	74 1a                	je     f0102bb5 <command_test_kheap+0x80>
	{
		cprintf("Invalid number of arguments! USAGE: tstkheap <Strategy> <testname>\n") ;
f0102b9b:	83 ec 0c             	sub    $0xc,%esp
f0102b9e:	68 10 4b 13 f0       	push   $0xf0134b10
f0102ba3:	e8 85 e0 ff ff       	call   f0100c2d <cprintf>
f0102ba8:	83 c4 10             	add    $0x10,%esp
		return 0;
f0102bab:	b8 00 00 00 00       	mov    $0x0,%eax
f0102bb0:	e9 f6 02 00 00       	jmp    f0102eab <command_test_kheap+0x376>
	}

	// Setting Strategy
	if(strcmp(arguments[1], "FF") == 0 || strcmp(arguments[1], "ff") == 0)
f0102bb5:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102bb8:	83 c0 04             	add    $0x4,%eax
f0102bbb:	8b 00                	mov    (%eax),%eax
f0102bbd:	83 ec 08             	sub    $0x8,%esp
f0102bc0:	68 bc 49 13 f0       	push   $0xf01349bc
f0102bc5:	50                   	push   %eax
f0102bc6:	e8 6c dc 02 00       	call   f0130837 <strcmp>
f0102bcb:	83 c4 10             	add    $0x10,%esp
f0102bce:	85 c0                	test   %eax,%eax
f0102bd0:	74 1d                	je     f0102bef <command_test_kheap+0xba>
f0102bd2:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102bd5:	83 c0 04             	add    $0x4,%eax
f0102bd8:	8b 00                	mov    (%eax),%eax
f0102bda:	83 ec 08             	sub    $0x8,%esp
f0102bdd:	68 bf 49 13 f0       	push   $0xf01349bf
f0102be2:	50                   	push   %eax
f0102be3:	e8 4f dc 02 00       	call   f0130837 <strcmp>
f0102be8:	83 c4 10             	add    $0x10,%esp
f0102beb:	85 c0                	test   %eax,%eax
f0102bed:	75 1a                	jne    f0102c09 <command_test_kheap+0xd4>
	{
		setKHeapPlacementStrategyFIRSTFIT();
f0102bef:	e8 16 e2 ff ff       	call   f0100e0a <setKHeapPlacementStrategyFIRSTFIT>
		cprintf("Kernel Heap placement strategy is FIRST FIT\n");
f0102bf4:	83 ec 0c             	sub    $0xc,%esp
f0102bf7:	68 58 45 13 f0       	push   $0xf0134558
f0102bfc:	e8 2c e0 ff ff       	call   f0100c2d <cprintf>
f0102c01:	83 c4 10             	add    $0x10,%esp
f0102c04:	e9 a0 00 00 00       	jmp    f0102ca9 <command_test_kheap+0x174>
	}
	else if(strcmp(arguments[1], "BF") == 0 || strcmp(arguments[1], "bf") == 0)
f0102c09:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102c0c:	83 c0 04             	add    $0x4,%eax
f0102c0f:	8b 00                	mov    (%eax),%eax
f0102c11:	83 ec 08             	sub    $0x8,%esp
f0102c14:	68 c2 49 13 f0       	push   $0xf01349c2
f0102c19:	50                   	push   %eax
f0102c1a:	e8 18 dc 02 00       	call   f0130837 <strcmp>
f0102c1f:	83 c4 10             	add    $0x10,%esp
f0102c22:	85 c0                	test   %eax,%eax
f0102c24:	74 1d                	je     f0102c43 <command_test_kheap+0x10e>
f0102c26:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102c29:	83 c0 04             	add    $0x4,%eax
f0102c2c:	8b 00                	mov    (%eax),%eax
f0102c2e:	83 ec 08             	sub    $0x8,%esp
f0102c31:	68 c5 49 13 f0       	push   $0xf01349c5
f0102c36:	50                   	push   %eax
f0102c37:	e8 fb db 02 00       	call   f0130837 <strcmp>
f0102c3c:	83 c4 10             	add    $0x10,%esp
f0102c3f:	85 c0                	test   %eax,%eax
f0102c41:	75 17                	jne    f0102c5a <command_test_kheap+0x125>
	{
		setKHeapPlacementStrategyBESTFIT();
f0102c43:	e8 d2 e1 ff ff       	call   f0100e1a <setKHeapPlacementStrategyBESTFIT>
		cprintf("Kernel Heap placement strategy is BEST FIT\n");
f0102c48:	83 ec 0c             	sub    $0xc,%esp
f0102c4b:	68 88 45 13 f0       	push   $0xf0134588
f0102c50:	e8 d8 df ff ff       	call   f0100c2d <cprintf>
f0102c55:	83 c4 10             	add    $0x10,%esp
f0102c58:	eb 4f                	jmp    f0102ca9 <command_test_kheap+0x174>
	}
	else if(strcmp(arguments[1], "NF") == 0 || strcmp(arguments[1], "nf") == 0)
f0102c5a:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102c5d:	83 c0 04             	add    $0x4,%eax
f0102c60:	8b 00                	mov    (%eax),%eax
f0102c62:	83 ec 08             	sub    $0x8,%esp
f0102c65:	68 c8 49 13 f0       	push   $0xf01349c8
f0102c6a:	50                   	push   %eax
f0102c6b:	e8 c7 db 02 00       	call   f0130837 <strcmp>
f0102c70:	83 c4 10             	add    $0x10,%esp
f0102c73:	85 c0                	test   %eax,%eax
f0102c75:	74 1d                	je     f0102c94 <command_test_kheap+0x15f>
f0102c77:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102c7a:	83 c0 04             	add    $0x4,%eax
f0102c7d:	8b 00                	mov    (%eax),%eax
f0102c7f:	83 ec 08             	sub    $0x8,%esp
f0102c82:	68 cb 49 13 f0       	push   $0xf01349cb
f0102c87:	50                   	push   %eax
f0102c88:	e8 aa db 02 00       	call   f0130837 <strcmp>
f0102c8d:	83 c4 10             	add    $0x10,%esp
f0102c90:	85 c0                	test   %eax,%eax
f0102c92:	75 15                	jne    f0102ca9 <command_test_kheap+0x174>
	{
		setKHeapPlacementStrategyNEXTFIT();
f0102c94:	e8 91 e1 ff ff       	call   f0100e2a <setKHeapPlacementStrategyNEXTFIT>
		cprintf("Kernel Heap placement strategy is NEXT FIT\n");
f0102c99:	83 ec 0c             	sub    $0xc,%esp
f0102c9c:	68 b4 45 13 f0       	push   $0xf01345b4
f0102ca1:	e8 87 df ff ff       	call   f0100c2d <cprintf>
f0102ca6:	83 c4 10             	add    $0x10,%esp
	}

	// Test 1-kmalloc: tstkheap FF kmalloc 1
	if(strcmp(arguments[2], "kmalloc") == 0)
f0102ca9:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102cac:	83 c0 08             	add    $0x8,%eax
f0102caf:	8b 00                	mov    (%eax),%eax
f0102cb1:	83 ec 08             	sub    $0x8,%esp
f0102cb4:	68 b8 4a 13 f0       	push   $0xf0134ab8
f0102cb9:	50                   	push   %eax
f0102cba:	e8 78 db 02 00       	call   f0130837 <strcmp>
f0102cbf:	83 c4 10             	add    $0x10,%esp
f0102cc2:	85 c0                	test   %eax,%eax
f0102cc4:	0f 85 13 01 00 00    	jne    f0102ddd <command_test_kheap+0x2a8>
	{
		uint32 testNum = strtol(arguments[3], NULL, 10);
f0102cca:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102ccd:	83 c0 0c             	add    $0xc,%eax
f0102cd0:	8b 00                	mov    (%eax),%eax
f0102cd2:	83 ec 04             	sub    $0x4,%esp
f0102cd5:	6a 0a                	push   $0xa
f0102cd7:	6a 00                	push   $0x0
f0102cd9:	50                   	push   %eax
f0102cda:	e8 ac dd 02 00       	call   f0130a8b <strtol>
f0102cdf:	83 c4 10             	add    $0x10,%esp
f0102ce2:	89 45 f4             	mov    %eax,-0xc(%ebp)
		if(isKHeapPlacementStrategyFIRSTFIT())
f0102ce5:	e8 74 e1 ff ff       	call   f0100e5e <isKHeapPlacementStrategyFIRSTFIT>
f0102cea:	84 c0                	test   %al,%al
f0102cec:	74 54                	je     f0102d42 <command_test_kheap+0x20d>
		{
			if (testNum == 0)
f0102cee:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0102cf2:	75 1a                	jne    f0102d0e <command_test_kheap+0x1d9>
			{
				cprintf("Error: [Kernel.FirstFit] must specify the test number (1 or 2) as an argument\n");
f0102cf4:	83 ec 0c             	sub    $0xc,%esp
f0102cf7:	68 2c 48 13 f0       	push   $0xf013482c
f0102cfc:	e8 2c df ff ff       	call   f0100c2d <cprintf>
f0102d01:	83 c4 10             	add    $0x10,%esp
				return 0;
f0102d04:	b8 00 00 00 00       	mov    $0x0,%eax
f0102d09:	e9 9d 01 00 00       	jmp    f0102eab <command_test_kheap+0x376>
			}
			//Test FIRST FIT allocation
			if (testNum == 1)
f0102d0e:	83 7d f4 01          	cmpl   $0x1,-0xc(%ebp)
f0102d12:	75 0a                	jne    f0102d1e <command_test_kheap+0x1e9>
				test_kmalloc();
f0102d14:	e8 1e 41 01 00       	call   f0116e37 <test_kmalloc>
f0102d19:	e9 b5 00 00 00       	jmp    f0102dd3 <command_test_kheap+0x29e>
			else if (testNum == 2)
f0102d1e:	83 7d f4 02          	cmpl   $0x2,-0xc(%ebp)
f0102d22:	75 0a                	jne    f0102d2e <command_test_kheap+0x1f9>
				test_kmalloc_firstfit1();
f0102d24:	e8 97 8f 01 00       	call   f011bcc0 <test_kmalloc_firstfit1>
f0102d29:	e9 a5 00 00 00       	jmp    f0102dd3 <command_test_kheap+0x29e>
			else if (testNum == 3)
f0102d2e:	83 7d f4 03          	cmpl   $0x3,-0xc(%ebp)
f0102d32:	0f 85 9b 00 00 00    	jne    f0102dd3 <command_test_kheap+0x29e>
				test_kmalloc_firstfit2();
f0102d38:	e8 25 a3 01 00       	call   f011d062 <test_kmalloc_firstfit2>
f0102d3d:	e9 91 00 00 00       	jmp    f0102dd3 <command_test_kheap+0x29e>
		}
		else if(isKHeapPlacementStrategyBESTFIT())
f0102d42:	e8 2c e1 ff ff       	call   f0100e73 <isKHeapPlacementStrategyBESTFIT>
f0102d47:	84 c0                	test   %al,%al
f0102d49:	74 47                	je     f0102d92 <command_test_kheap+0x25d>
		{
			if (testNum == 0)
f0102d4b:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0102d4f:	75 1a                	jne    f0102d6b <command_test_kheap+0x236>
			{
				cprintf("Error: [Kernel.BestFit] must specify the test number (1, 2, 3) as an argument\n");
f0102d51:	83 ec 0c             	sub    $0xc,%esp
f0102d54:	68 7c 48 13 f0       	push   $0xf013487c
f0102d59:	e8 cf de ff ff       	call   f0100c2d <cprintf>
f0102d5e:	83 c4 10             	add    $0x10,%esp
				return 0;
f0102d61:	b8 00 00 00 00       	mov    $0x0,%eax
f0102d66:	e9 40 01 00 00       	jmp    f0102eab <command_test_kheap+0x376>
			}
			if (testNum == 1)
f0102d6b:	83 7d f4 01          	cmpl   $0x1,-0xc(%ebp)
f0102d6f:	75 07                	jne    f0102d78 <command_test_kheap+0x243>
				test_kmalloc();
f0102d71:	e8 c1 40 01 00       	call   f0116e37 <test_kmalloc>
f0102d76:	eb 5b                	jmp    f0102dd3 <command_test_kheap+0x29e>
			else if (testNum == 2)
f0102d78:	83 7d f4 02          	cmpl   $0x2,-0xc(%ebp)
f0102d7c:	75 07                	jne    f0102d85 <command_test_kheap+0x250>
				test_kmalloc_bestfit1();
f0102d7e:	e8 07 6a 01 00       	call   f011978a <test_kmalloc_bestfit1>
f0102d83:	eb 4e                	jmp    f0102dd3 <command_test_kheap+0x29e>
			else if (testNum == 3)
f0102d85:	83 7d f4 03          	cmpl   $0x3,-0xc(%ebp)
f0102d89:	75 48                	jne    f0102dd3 <command_test_kheap+0x29e>
				test_kmalloc_bestfit2();
f0102d8b:	e8 50 7c 01 00       	call   f011a9e0 <test_kmalloc_bestfit2>
f0102d90:	eb 41                	jmp    f0102dd3 <command_test_kheap+0x29e>
		}
		else if(isKHeapPlacementStrategyNEXTFIT())
f0102d92:	e8 f1 e0 ff ff       	call   f0100e88 <isKHeapPlacementStrategyNEXTFIT>
f0102d97:	84 c0                	test   %al,%al
f0102d99:	74 38                	je     f0102dd3 <command_test_kheap+0x29e>
		{
			if (testNum == 0)
f0102d9b:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0102d9f:	75 1a                	jne    f0102dbb <command_test_kheap+0x286>
			{
				cprintf("Error: [Kernel.NextFit] must specify the test number (1 or 2) as an argument\n");
f0102da1:	83 ec 0c             	sub    $0xc,%esp
f0102da4:	68 cc 48 13 f0       	push   $0xf01348cc
f0102da9:	e8 7f de ff ff       	call   f0100c2d <cprintf>
f0102dae:	83 c4 10             	add    $0x10,%esp
				return 0;
f0102db1:	b8 00 00 00 00       	mov    $0x0,%eax
f0102db6:	e9 f0 00 00 00       	jmp    f0102eab <command_test_kheap+0x376>
			}
			//Test cont. allocation
			if (testNum == 1)
f0102dbb:	83 7d f4 01          	cmpl   $0x1,-0xc(%ebp)
f0102dbf:	75 07                	jne    f0102dc8 <command_test_kheap+0x293>
				test_kmalloc();
f0102dc1:	e8 71 40 01 00       	call   f0116e37 <test_kmalloc>
f0102dc6:	eb 0b                	jmp    f0102dd3 <command_test_kheap+0x29e>
			//Test nextfit strategy
			else if (testNum == 2)
f0102dc8:	83 7d f4 02          	cmpl   $0x2,-0xc(%ebp)
f0102dcc:	75 05                	jne    f0102dd3 <command_test_kheap+0x29e>
				test_kmalloc_nextfit();
f0102dce:	e8 c2 52 01 00       	call   f0118095 <test_kmalloc_nextfit>
		}
		return 0;
f0102dd3:	b8 00 00 00 00       	mov    $0x0,%eax
f0102dd8:	e9 ce 00 00 00       	jmp    f0102eab <command_test_kheap+0x376>
	}
	// Test 2-kfree: tstkheap FF kfree
	else if(strcmp(arguments[2], "kfree") == 0)
f0102ddd:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102de0:	83 c0 08             	add    $0x8,%eax
f0102de3:	8b 00                	mov    (%eax),%eax
f0102de5:	83 ec 08             	sub    $0x8,%esp
f0102de8:	68 54 4b 13 f0       	push   $0xf0134b54
f0102ded:	50                   	push   %eax
f0102dee:	e8 44 da 02 00       	call   f0130837 <strcmp>
f0102df3:	83 c4 10             	add    $0x10,%esp
f0102df6:	85 c0                	test   %eax,%eax
f0102df8:	75 28                	jne    f0102e22 <command_test_kheap+0x2ed>
	{
		if (isKHeapPlacementStrategyBESTFIT() || isKHeapPlacementStrategyFIRSTFIT())
f0102dfa:	e8 74 e0 ff ff       	call   f0100e73 <isKHeapPlacementStrategyBESTFIT>
f0102dff:	84 c0                	test   %al,%al
f0102e01:	75 09                	jne    f0102e0c <command_test_kheap+0x2d7>
f0102e03:	e8 56 e0 ff ff       	call   f0100e5e <isKHeapPlacementStrategyFIRSTFIT>
f0102e08:	84 c0                	test   %al,%al
f0102e0a:	74 07                	je     f0102e13 <command_test_kheap+0x2de>
		{
			test_kfree_bestfirstfit();
f0102e0c:	e8 88 e8 01 00       	call   f0121699 <test_kfree_bestfirstfit>
f0102e11:	eb 05                	jmp    f0102e18 <command_test_kheap+0x2e3>
		}
		else //NEXT & CONT
		{
			test_kfree();
f0102e13:	e8 2f c7 01 00       	call   f011f547 <test_kfree>
		}
		return 0;
f0102e18:	b8 00 00 00 00       	mov    $0x0,%eax
f0102e1d:	e9 89 00 00 00       	jmp    f0102eab <command_test_kheap+0x376>
	}
	// Test 3-kphysaddr: tstkheap FF kphysaddr
	else if(strcmp(arguments[2], "kphysaddr") == 0)
f0102e22:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102e25:	83 c0 08             	add    $0x8,%eax
f0102e28:	8b 00                	mov    (%eax),%eax
f0102e2a:	83 ec 08             	sub    $0x8,%esp
f0102e2d:	68 5a 4b 13 f0       	push   $0xf0134b5a
f0102e32:	50                   	push   %eax
f0102e33:	e8 ff d9 02 00       	call   f0130837 <strcmp>
f0102e38:	83 c4 10             	add    $0x10,%esp
f0102e3b:	85 c0                	test   %eax,%eax
f0102e3d:	75 0c                	jne    f0102e4b <command_test_kheap+0x316>
	{
		test_kheap_phys_addr();
f0102e3f:	e8 51 02 02 00       	call   f0123095 <test_kheap_phys_addr>
		return 0;
f0102e44:	b8 00 00 00 00       	mov    $0x0,%eax
f0102e49:	eb 60                	jmp    f0102eab <command_test_kheap+0x376>
	}
	// Test 4-kvirtaddr: tstkheap FF kvirtaddr
	else if(strcmp(arguments[2], "kvirtaddr") == 0)
f0102e4b:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102e4e:	83 c0 08             	add    $0x8,%eax
f0102e51:	8b 00                	mov    (%eax),%eax
f0102e53:	83 ec 08             	sub    $0x8,%esp
f0102e56:	68 64 4b 13 f0       	push   $0xf0134b64
f0102e5b:	50                   	push   %eax
f0102e5c:	e8 d6 d9 02 00       	call   f0130837 <strcmp>
f0102e61:	83 c4 10             	add    $0x10,%esp
f0102e64:	85 c0                	test   %eax,%eax
f0102e66:	75 0c                	jne    f0102e74 <command_test_kheap+0x33f>
	{
		test_kheap_virt_addr();
f0102e68:	e8 f8 16 02 00       	call   f0124565 <test_kheap_virt_addr>
		return 0;
f0102e6d:	b8 00 00 00 00       	mov    $0x0,%eax
f0102e72:	eb 37                	jmp    f0102eab <command_test_kheap+0x376>
	}
	// Test 5-krealloc: tstkheap BF krealloc
	else if(strcmp(arguments[2], "krealloc") == 0)
f0102e74:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102e77:	83 c0 08             	add    $0x8,%eax
f0102e7a:	8b 00                	mov    (%eax),%eax
f0102e7c:	83 ec 08             	sub    $0x8,%esp
f0102e7f:	68 6e 4b 13 f0       	push   $0xf0134b6e
f0102e84:	50                   	push   %eax
f0102e85:	e8 ad d9 02 00       	call   f0130837 <strcmp>
f0102e8a:	83 c4 10             	add    $0x10,%esp
f0102e8d:	85 c0                	test   %eax,%eax
f0102e8f:	75 15                	jne    f0102ea6 <command_test_kheap+0x371>
	{
		if (isKHeapPlacementStrategyBESTFIT())
f0102e91:	e8 dd df ff ff       	call   f0100e73 <isKHeapPlacementStrategyBESTFIT>
f0102e96:	84 c0                	test   %al,%al
f0102e98:	74 05                	je     f0102e9f <command_test_kheap+0x36a>
		{
			test_krealloc_BF();
f0102e9a:	e8 6a a5 02 00       	call   f012d409 <test_krealloc_BF>
		}
		return 0;
f0102e9f:	b8 00 00 00 00       	mov    $0x0,%eax
f0102ea4:	eb 05                	jmp    f0102eab <command_test_kheap+0x376>
	}
	return 0;
f0102ea6:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102eab:	c9                   	leave  
f0102eac:	c3                   	ret    

f0102ead <to_frame_number>:
struct FrameInfo *get_frame_info(uint32 *ptr_page_directory, uint32 virtual_address, uint32 **ptr_page_table);
void decrement_references(struct FrameInfo* ptr_frame_info);
void initialize_frame_info(struct FrameInfo *ptr_frame_info);

static inline uint32 to_frame_number(struct FrameInfo *ptr_frame_info)
{
f0102ead:	55                   	push   %ebp
f0102eae:	89 e5                	mov    %esp,%ebp
	return ptr_frame_info - frames_info;
f0102eb0:	8b 45 08             	mov    0x8(%ebp),%eax
f0102eb3:	8b 15 90 0e 6c f0    	mov    0xf06c0e90,%edx
f0102eb9:	29 d0                	sub    %edx,%eax
f0102ebb:	c1 f8 03             	sar    $0x3,%eax
f0102ebe:	89 c2                	mov    %eax,%edx
f0102ec0:	89 d0                	mov    %edx,%eax
f0102ec2:	c1 e0 02             	shl    $0x2,%eax
f0102ec5:	01 d0                	add    %edx,%eax
f0102ec7:	c1 e0 02             	shl    $0x2,%eax
f0102eca:	01 d0                	add    %edx,%eax
f0102ecc:	c1 e0 02             	shl    $0x2,%eax
f0102ecf:	01 d0                	add    %edx,%eax
f0102ed1:	89 c1                	mov    %eax,%ecx
f0102ed3:	c1 e1 08             	shl    $0x8,%ecx
f0102ed6:	01 c8                	add    %ecx,%eax
f0102ed8:	89 c1                	mov    %eax,%ecx
f0102eda:	c1 e1 10             	shl    $0x10,%ecx
f0102edd:	01 c8                	add    %ecx,%eax
f0102edf:	01 c0                	add    %eax,%eax
f0102ee1:	01 d0                	add    %edx,%eax
}
f0102ee3:	5d                   	pop    %ebp
f0102ee4:	c3                   	ret    

f0102ee5 <to_physical_address>:

static inline uint32 to_physical_address(struct FrameInfo *ptr_frame_info)
{
f0102ee5:	55                   	push   %ebp
f0102ee6:	89 e5                	mov    %esp,%ebp
	return to_frame_number(ptr_frame_info) << PGSHIFT;
f0102ee8:	ff 75 08             	pushl  0x8(%ebp)
f0102eeb:	e8 bd ff ff ff       	call   f0102ead <to_frame_number>
f0102ef0:	83 c4 04             	add    $0x4,%esp
f0102ef3:	c1 e0 0c             	shl    $0xc,%eax
}
f0102ef6:	c9                   	leave  
f0102ef7:	c3                   	ret    

f0102ef8 <to_frame_info>:

static inline struct FrameInfo* to_frame_info(uint32 physical_address)
{
f0102ef8:	55                   	push   %ebp
f0102ef9:	89 e5                	mov    %esp,%ebp
f0102efb:	83 ec 08             	sub    $0x8,%esp
	if (PPN(physical_address) >= number_of_frames)
f0102efe:	8b 45 08             	mov    0x8(%ebp),%eax
f0102f01:	c1 e8 0c             	shr    $0xc,%eax
f0102f04:	89 c2                	mov    %eax,%edx
f0102f06:	a1 50 0e 6c f0       	mov    0xf06c0e50,%eax
f0102f0b:	39 c2                	cmp    %eax,%edx
f0102f0d:	72 14                	jb     f0102f23 <to_frame_info+0x2b>
		panic("to_frame_info called with invalid pa");
f0102f0f:	83 ec 04             	sub    $0x4,%esp
f0102f12:	68 78 4b 13 f0       	push   $0xf0134b78
f0102f17:	6a 55                	push   $0x55
f0102f19:	68 a0 4b 13 f0       	push   $0xf0134ba0
f0102f1e:	e8 83 d2 ff ff       	call   f01001a6 <_panic>
	return &frames_info[PPN(physical_address)];
f0102f23:	8b 15 90 0e 6c f0    	mov    0xf06c0e90,%edx
f0102f29:	8b 45 08             	mov    0x8(%ebp),%eax
f0102f2c:	c1 e8 0c             	shr    $0xc,%eax
f0102f2f:	89 c1                	mov    %eax,%ecx
f0102f31:	89 c8                	mov    %ecx,%eax
f0102f33:	01 c0                	add    %eax,%eax
f0102f35:	01 c8                	add    %ecx,%eax
f0102f37:	c1 e0 03             	shl    $0x3,%eax
f0102f3a:	01 d0                	add    %edx,%eax
}
f0102f3c:	c9                   	leave  
f0102f3d:	c3                   	ret    

f0102f3e <read_disk_page>:
void __pf_remove_env_all_tables(struct Env* ptr_env);
void __pf_remove_env_table(struct Env* ptr_env, uint32 virtual_address);


int read_disk_page(uint32 dfn, void* va)
{
f0102f3e:	55                   	push   %ebp
f0102f3f:	89 e5                	mov    %esp,%ebp
f0102f41:	83 ec 18             	sub    $0x18,%esp
	uint32 df_start_sector = PAGE_FILE_START_SECTOR+dfn*SECTOR_PER_PAGE;
f0102f44:	8b 45 08             	mov    0x8(%ebp),%eax
f0102f47:	05 00 14 00 00       	add    $0x1400,%eax
f0102f4c:	c1 e0 03             	shl    $0x3,%eax
f0102f4f:	89 45 f4             	mov    %eax,-0xc(%ebp)

	//LOG_STATMENT( cprintf("reading from disk to mem addr %x at sector %d\n",va,df_start_sector);  );
	int success = ide_read(df_start_sector, (void*)va, SECTOR_PER_PAGE);
f0102f52:	83 ec 04             	sub    $0x4,%esp
f0102f55:	6a 08                	push   $0x8
f0102f57:	ff 75 0c             	pushl  0xc(%ebp)
f0102f5a:	ff 75 f4             	pushl  -0xc(%ebp)
f0102f5d:	e8 1c df 02 00       	call   f0130e7e <ide_read>
f0102f62:	83 c4 10             	add    $0x10,%esp
f0102f65:	89 45 f0             	mov    %eax,-0x10(%ebp)
	//LOG_STATMENT( if(success==0) {cprintf("read from disk successuflly.\n");} else {cprintf("read from disk failed !!\n");} );

	return success;
f0102f68:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
f0102f6b:	c9                   	leave  
f0102f6c:	c3                   	ret    

f0102f6d <write_disk_page>:


int write_disk_page(uint32 dfn, void* va)
{
f0102f6d:	55                   	push   %ebp
f0102f6e:	89 e5                	mov    %esp,%ebp
f0102f70:	83 ec 18             	sub    $0x18,%esp
	//write disk at wanted frame
	uint32 df_start_sector = PAGE_FILE_START_SECTOR+dfn*SECTOR_PER_PAGE;
f0102f73:	8b 45 08             	mov    0x8(%ebp),%eax
f0102f76:	05 00 14 00 00       	add    $0x1400,%eax
f0102f7b:	c1 e0 03             	shl    $0x3,%eax
f0102f7e:	89 45 f4             	mov    %eax,-0xc(%ebp)

	//LOG_STATMENT( cprintf(">>> writing to disk from mem addr %x at sector %d\n",va,df_start_sector);  );
	int success = ide_write(df_start_sector, (void*)va, SECTOR_PER_PAGE);
f0102f81:	83 ec 04             	sub    $0x4,%esp
f0102f84:	6a 08                	push   $0x8
f0102f86:	ff 75 0c             	pushl  0xc(%ebp)
f0102f89:	ff 75 f4             	pushl  -0xc(%ebp)
f0102f8c:	e8 2d e0 02 00       	call   f0130fbe <ide_write>
f0102f91:	83 c4 10             	add    $0x10,%esp
f0102f94:	89 45 f0             	mov    %eax,-0x10(%ebp)
	//LOG_STATMENT( if(success==0) {cprintf(">>> written to disk successfully.\n");} else {cprintf(">>> written to disk failed !!\n");} );

	if(success != 0)
f0102f97:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0102f9b:	74 14                	je     f0102fb1 <write_disk_page+0x44>
		panic("Error writing on disk\n");
f0102f9d:	83 ec 04             	sub    $0x4,%esp
f0102fa0:	68 c2 4b 13 f0       	push   $0xf0134bc2
f0102fa5:	6a 2e                	push   $0x2e
f0102fa7:	68 d9 4b 13 f0       	push   $0xf0134bd9
f0102fac:	e8 f5 d1 ff ff       	call   f01001a6 <_panic>
	return success;
f0102fb1:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
f0102fb4:	c9                   	leave  
f0102fb5:	c3                   	ret    

f0102fb6 <initialize_disk_page_file>:
// After this point, ONLY use the functions below
// to allocate and deallocate physical memory via the disk_free_frame_list,
// and NEVER use boot_allocate_space() or the related boot-time functions above.
//
void initialize_disk_page_file()
{
f0102fb6:	55                   	push   %ebp
f0102fb7:	89 e5                	mov    %esp,%ebp
f0102fb9:	53                   	push   %ebx
f0102fba:	83 ec 14             	sub    $0x14,%esp
	int i;
	LIST_INIT(&disk_free_frame_list);
f0102fbd:	c7 05 f4 0e 6c f0 00 	movl   $0x0,0xf06c0ef4
f0102fc4:	00 00 00 
f0102fc7:	c7 05 f8 0e 6c f0 00 	movl   $0x0,0xf06c0ef8
f0102fce:	00 00 00 
f0102fd1:	c7 05 00 0f 6c f0 00 	movl   $0x0,0xf06c0f00
f0102fd8:	00 00 00 

	//LOG_STATMENT(cprintf("PAGES_PER_FILE = %d, PAGE_FILE_START_SECTOR = %d\n",PAGES_PER_FILE,PAGE_FILE_START_SECTOR););
	for (i = 1; i < PAGES_PER_FILE; i++)
f0102fdb:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
f0102fe2:	e9 e8 00 00 00       	jmp    f01030cf <initialize_disk_page_file+0x119>
	{
		initialize_frame_info(&(disk_frames_info[i]));
f0102fe7:	8b 0d e4 8a 65 f0    	mov    0xf0658ae4,%ecx
f0102fed:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0102ff0:	89 d0                	mov    %edx,%eax
f0102ff2:	01 c0                	add    %eax,%eax
f0102ff4:	01 d0                	add    %edx,%eax
f0102ff6:	c1 e0 03             	shl    $0x3,%eax
f0102ff9:	01 c8                	add    %ecx,%eax
f0102ffb:	83 ec 0c             	sub    $0xc,%esp
f0102ffe:	50                   	push   %eax
f0102fff:	e8 8b 37 00 00       	call   f010678f <initialize_frame_info>
f0103004:	83 c4 10             	add    $0x10,%esp

		//disk_frames_info[i].references = 0;
		LIST_INSERT_HEAD(&disk_free_frame_list, &disk_frames_info[i]);
f0103007:	8b 0d e4 8a 65 f0    	mov    0xf0658ae4,%ecx
f010300d:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0103010:	89 d0                	mov    %edx,%eax
f0103012:	01 c0                	add    %eax,%eax
f0103014:	01 d0                	add    %edx,%eax
f0103016:	c1 e0 03             	shl    $0x3,%eax
f0103019:	01 c8                	add    %ecx,%eax
f010301b:	85 c0                	test   %eax,%eax
f010301d:	75 14                	jne    f0103033 <initialize_disk_page_file+0x7d>
f010301f:	83 ec 04             	sub    $0x4,%esp
f0103022:	68 f8 4b 13 f0       	push   $0xf0134bf8
f0103027:	6a 59                	push   $0x59
f0103029:	68 d9 4b 13 f0       	push   $0xf0134bd9
f010302e:	e8 73 d1 ff ff       	call   f01001a6 <_panic>
f0103033:	8b 0d e4 8a 65 f0    	mov    0xf0658ae4,%ecx
f0103039:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010303c:	89 d0                	mov    %edx,%eax
f010303e:	01 c0                	add    %eax,%eax
f0103040:	01 d0                	add    %edx,%eax
f0103042:	c1 e0 03             	shl    $0x3,%eax
f0103045:	01 c8                	add    %ecx,%eax
f0103047:	8b 15 f4 0e 6c f0    	mov    0xf06c0ef4,%edx
f010304d:	89 10                	mov    %edx,(%eax)
f010304f:	8b 00                	mov    (%eax),%eax
f0103051:	85 c0                	test   %eax,%eax
f0103053:	74 1f                	je     f0103074 <initialize_disk_page_file+0xbe>
f0103055:	8b 15 f4 0e 6c f0    	mov    0xf06c0ef4,%edx
f010305b:	8b 1d e4 8a 65 f0    	mov    0xf0658ae4,%ebx
f0103061:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0103064:	89 c8                	mov    %ecx,%eax
f0103066:	01 c0                	add    %eax,%eax
f0103068:	01 c8                	add    %ecx,%eax
f010306a:	c1 e0 03             	shl    $0x3,%eax
f010306d:	01 d8                	add    %ebx,%eax
f010306f:	89 42 04             	mov    %eax,0x4(%edx)
f0103072:	eb 19                	jmp    f010308d <initialize_disk_page_file+0xd7>
f0103074:	8b 0d e4 8a 65 f0    	mov    0xf0658ae4,%ecx
f010307a:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010307d:	89 d0                	mov    %edx,%eax
f010307f:	01 c0                	add    %eax,%eax
f0103081:	01 d0                	add    %edx,%eax
f0103083:	c1 e0 03             	shl    $0x3,%eax
f0103086:	01 c8                	add    %ecx,%eax
f0103088:	a3 f8 0e 6c f0       	mov    %eax,0xf06c0ef8
f010308d:	8b 0d e4 8a 65 f0    	mov    0xf0658ae4,%ecx
f0103093:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0103096:	89 d0                	mov    %edx,%eax
f0103098:	01 c0                	add    %eax,%eax
f010309a:	01 d0                	add    %edx,%eax
f010309c:	c1 e0 03             	shl    $0x3,%eax
f010309f:	01 c8                	add    %ecx,%eax
f01030a1:	a3 f4 0e 6c f0       	mov    %eax,0xf06c0ef4
f01030a6:	8b 0d e4 8a 65 f0    	mov    0xf0658ae4,%ecx
f01030ac:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01030af:	89 d0                	mov    %edx,%eax
f01030b1:	01 c0                	add    %eax,%eax
f01030b3:	01 d0                	add    %edx,%eax
f01030b5:	c1 e0 03             	shl    $0x3,%eax
f01030b8:	01 c8                	add    %ecx,%eax
f01030ba:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f01030c1:	a1 00 0f 6c f0       	mov    0xf06c0f00,%eax
f01030c6:	40                   	inc    %eax
f01030c7:	a3 00 0f 6c f0       	mov    %eax,0xf06c0f00
{
	int i;
	LIST_INIT(&disk_free_frame_list);

	//LOG_STATMENT(cprintf("PAGES_PER_FILE = %d, PAGE_FILE_START_SECTOR = %d\n",PAGES_PER_FILE,PAGE_FILE_START_SECTOR););
	for (i = 1; i < PAGES_PER_FILE; i++)
f01030cc:	ff 45 f4             	incl   -0xc(%ebp)
f01030cf:	81 7d f4 ff 07 02 00 	cmpl   $0x207ff,-0xc(%ebp)
f01030d6:	0f 8e 0b ff ff ff    	jle    f0102fe7 <initialize_disk_page_file+0x31>
		initialize_frame_info(&(disk_frames_info[i]));

		//disk_frames_info[i].references = 0;
		LIST_INSERT_HEAD(&disk_free_frame_list, &disk_frames_info[i]);
	}
}
f01030dc:	90                   	nop
f01030dd:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f01030e0:	c9                   	leave  
f01030e1:	c3                   	ret    

f01030e2 <to_disk_frame_number>:
// Initialize a Frame_Info structure.
// The result has null links and 0 references.
// Note that the corresponding physical frame is NOT initialized!
//
static inline uint32 to_disk_frame_number(struct FrameInfo *ptr_frame_info)
{
f01030e2:	55                   	push   %ebp
f01030e3:	89 e5                	mov    %esp,%ebp
	return ptr_frame_info - disk_frames_info;
f01030e5:	8b 45 08             	mov    0x8(%ebp),%eax
f01030e8:	8b 15 e4 8a 65 f0    	mov    0xf0658ae4,%edx
f01030ee:	29 d0                	sub    %edx,%eax
f01030f0:	c1 f8 03             	sar    $0x3,%eax
f01030f3:	89 c2                	mov    %eax,%edx
f01030f5:	89 d0                	mov    %edx,%eax
f01030f7:	c1 e0 02             	shl    $0x2,%eax
f01030fa:	01 d0                	add    %edx,%eax
f01030fc:	c1 e0 02             	shl    $0x2,%eax
f01030ff:	01 d0                	add    %edx,%eax
f0103101:	c1 e0 02             	shl    $0x2,%eax
f0103104:	01 d0                	add    %edx,%eax
f0103106:	89 c1                	mov    %eax,%ecx
f0103108:	c1 e1 08             	shl    $0x8,%ecx
f010310b:	01 c8                	add    %ecx,%eax
f010310d:	89 c1                	mov    %eax,%ecx
f010310f:	c1 e1 10             	shl    $0x10,%ecx
f0103112:	01 c8                	add    %ecx,%eax
f0103114:	01 c0                	add    %eax,%eax
f0103116:	01 d0                	add    %edx,%eax
}
f0103118:	5d                   	pop    %ebp
f0103119:	c3                   	ret    

f010311a <allocate_disk_frame>:
// RETURNS
//   0 -- on success
//   E_NO_PAGE_FILE_SPACE -- otherwise
//
int allocate_disk_frame(uint32 *dfn)
{
f010311a:	55                   	push   %ebp
f010311b:	89 e5                	mov    %esp,%ebp
f010311d:	83 ec 18             	sub    $0x18,%esp
	// Fill this function in
	struct FrameInfo *ptr_frame_info = LIST_FIRST(&disk_free_frame_list);
f0103120:	a1 f4 0e 6c f0       	mov    0xf06c0ef4,%eax
f0103125:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if(ptr_frame_info == NULL)
f0103128:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010312c:	75 0a                	jne    f0103138 <allocate_disk_frame+0x1e>
		return E_NO_PAGE_FILE_SPACE;
f010312e:	b8 f8 ff ff ff       	mov    $0xfffffff8,%eax
f0103133:	e9 a7 00 00 00       	jmp    f01031df <allocate_disk_frame+0xc5>

	LIST_REMOVE(&disk_free_frame_list, ptr_frame_info);
f0103138:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010313c:	75 14                	jne    f0103152 <allocate_disk_frame+0x38>
f010313e:	83 ec 04             	sub    $0x4,%esp
f0103141:	68 1b 4c 13 f0       	push   $0xf0134c1b
f0103146:	6a 78                	push   $0x78
f0103148:	68 d9 4b 13 f0       	push   $0xf0134bd9
f010314d:	e8 54 d0 ff ff       	call   f01001a6 <_panic>
f0103152:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0103155:	8b 00                	mov    (%eax),%eax
f0103157:	85 c0                	test   %eax,%eax
f0103159:	74 10                	je     f010316b <allocate_disk_frame+0x51>
f010315b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010315e:	8b 00                	mov    (%eax),%eax
f0103160:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0103163:	8b 52 04             	mov    0x4(%edx),%edx
f0103166:	89 50 04             	mov    %edx,0x4(%eax)
f0103169:	eb 0b                	jmp    f0103176 <allocate_disk_frame+0x5c>
f010316b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010316e:	8b 40 04             	mov    0x4(%eax),%eax
f0103171:	a3 f8 0e 6c f0       	mov    %eax,0xf06c0ef8
f0103176:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0103179:	8b 40 04             	mov    0x4(%eax),%eax
f010317c:	85 c0                	test   %eax,%eax
f010317e:	74 0f                	je     f010318f <allocate_disk_frame+0x75>
f0103180:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0103183:	8b 40 04             	mov    0x4(%eax),%eax
f0103186:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0103189:	8b 12                	mov    (%edx),%edx
f010318b:	89 10                	mov    %edx,(%eax)
f010318d:	eb 0a                	jmp    f0103199 <allocate_disk_frame+0x7f>
f010318f:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0103192:	8b 00                	mov    (%eax),%eax
f0103194:	a3 f4 0e 6c f0       	mov    %eax,0xf06c0ef4
f0103199:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010319c:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f01031a2:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01031a5:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f01031ac:	a1 00 0f 6c f0       	mov    0xf06c0f00,%eax
f01031b1:	48                   	dec    %eax
f01031b2:	a3 00 0f 6c f0       	mov    %eax,0xf06c0f00
	initialize_frame_info(ptr_frame_info);
f01031b7:	83 ec 0c             	sub    $0xc,%esp
f01031ba:	ff 75 f4             	pushl  -0xc(%ebp)
f01031bd:	e8 cd 35 00 00       	call   f010678f <initialize_frame_info>
f01031c2:	83 c4 10             	add    $0x10,%esp
	*dfn = to_disk_frame_number(ptr_frame_info);
f01031c5:	83 ec 0c             	sub    $0xc,%esp
f01031c8:	ff 75 f4             	pushl  -0xc(%ebp)
f01031cb:	e8 12 ff ff ff       	call   f01030e2 <to_disk_frame_number>
f01031d0:	83 c4 10             	add    $0x10,%esp
f01031d3:	89 c2                	mov    %eax,%edx
f01031d5:	8b 45 08             	mov    0x8(%ebp),%eax
f01031d8:	89 10                	mov    %edx,(%eax)
	return 0;
f01031da:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01031df:	c9                   	leave  
f01031e0:	c3                   	ret    

f01031e1 <free_disk_frame>:

//
// Return a frame to the disk_free_frame_list.
//
inline void free_disk_frame(uint32 dfn)
{
f01031e1:	55                   	push   %ebp
f01031e2:	89 e5                	mov    %esp,%ebp
f01031e4:	53                   	push   %ebx
f01031e5:	83 ec 04             	sub    $0x4,%esp
	// Fill this function in
	if(dfn == 0) return;
f01031e8:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f01031ec:	0f 84 ca 00 00 00    	je     f01032bc <free_disk_frame+0xdb>
	LIST_INSERT_HEAD(&disk_free_frame_list, &disk_frames_info[dfn]);
f01031f2:	8b 0d e4 8a 65 f0    	mov    0xf0658ae4,%ecx
f01031f8:	8b 55 08             	mov    0x8(%ebp),%edx
f01031fb:	89 d0                	mov    %edx,%eax
f01031fd:	01 c0                	add    %eax,%eax
f01031ff:	01 d0                	add    %edx,%eax
f0103201:	c1 e0 03             	shl    $0x3,%eax
f0103204:	01 c8                	add    %ecx,%eax
f0103206:	85 c0                	test   %eax,%eax
f0103208:	75 17                	jne    f0103221 <free_disk_frame+0x40>
f010320a:	83 ec 04             	sub    $0x4,%esp
f010320d:	68 f8 4b 13 f0       	push   $0xf0134bf8
f0103212:	68 85 00 00 00       	push   $0x85
f0103217:	68 d9 4b 13 f0       	push   $0xf0134bd9
f010321c:	e8 85 cf ff ff       	call   f01001a6 <_panic>
f0103221:	8b 0d e4 8a 65 f0    	mov    0xf0658ae4,%ecx
f0103227:	8b 55 08             	mov    0x8(%ebp),%edx
f010322a:	89 d0                	mov    %edx,%eax
f010322c:	01 c0                	add    %eax,%eax
f010322e:	01 d0                	add    %edx,%eax
f0103230:	c1 e0 03             	shl    $0x3,%eax
f0103233:	01 c8                	add    %ecx,%eax
f0103235:	8b 15 f4 0e 6c f0    	mov    0xf06c0ef4,%edx
f010323b:	89 10                	mov    %edx,(%eax)
f010323d:	8b 00                	mov    (%eax),%eax
f010323f:	85 c0                	test   %eax,%eax
f0103241:	74 1f                	je     f0103262 <free_disk_frame+0x81>
f0103243:	8b 15 f4 0e 6c f0    	mov    0xf06c0ef4,%edx
f0103249:	8b 1d e4 8a 65 f0    	mov    0xf0658ae4,%ebx
f010324f:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0103252:	89 c8                	mov    %ecx,%eax
f0103254:	01 c0                	add    %eax,%eax
f0103256:	01 c8                	add    %ecx,%eax
f0103258:	c1 e0 03             	shl    $0x3,%eax
f010325b:	01 d8                	add    %ebx,%eax
f010325d:	89 42 04             	mov    %eax,0x4(%edx)
f0103260:	eb 19                	jmp    f010327b <free_disk_frame+0x9a>
f0103262:	8b 0d e4 8a 65 f0    	mov    0xf0658ae4,%ecx
f0103268:	8b 55 08             	mov    0x8(%ebp),%edx
f010326b:	89 d0                	mov    %edx,%eax
f010326d:	01 c0                	add    %eax,%eax
f010326f:	01 d0                	add    %edx,%eax
f0103271:	c1 e0 03             	shl    $0x3,%eax
f0103274:	01 c8                	add    %ecx,%eax
f0103276:	a3 f8 0e 6c f0       	mov    %eax,0xf06c0ef8
f010327b:	8b 0d e4 8a 65 f0    	mov    0xf0658ae4,%ecx
f0103281:	8b 55 08             	mov    0x8(%ebp),%edx
f0103284:	89 d0                	mov    %edx,%eax
f0103286:	01 c0                	add    %eax,%eax
f0103288:	01 d0                	add    %edx,%eax
f010328a:	c1 e0 03             	shl    $0x3,%eax
f010328d:	01 c8                	add    %ecx,%eax
f010328f:	a3 f4 0e 6c f0       	mov    %eax,0xf06c0ef4
f0103294:	8b 0d e4 8a 65 f0    	mov    0xf0658ae4,%ecx
f010329a:	8b 55 08             	mov    0x8(%ebp),%edx
f010329d:	89 d0                	mov    %edx,%eax
f010329f:	01 c0                	add    %eax,%eax
f01032a1:	01 d0                	add    %edx,%eax
f01032a3:	c1 e0 03             	shl    $0x3,%eax
f01032a6:	01 c8                	add    %ecx,%eax
f01032a8:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f01032af:	a1 00 0f 6c f0       	mov    0xf06c0f00,%eax
f01032b4:	40                   	inc    %eax
f01032b5:	a3 00 0f 6c f0       	mov    %eax,0xf06c0f00
f01032ba:	eb 01                	jmp    f01032bd <free_disk_frame+0xdc>
// Return a frame to the disk_free_frame_list.
//
inline void free_disk_frame(uint32 dfn)
{
	// Fill this function in
	if(dfn == 0) return;
f01032bc:	90                   	nop
	LIST_INSERT_HEAD(&disk_free_frame_list, &disk_frames_info[dfn]);
}
f01032bd:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f01032c0:	c9                   	leave  
f01032c1:	c3                   	ret    

f01032c2 <get_disk_page_table>:

int get_disk_page_table(uint32 *ptr_disk_page_directory, const uint32 virtual_address, int create, uint32 **ptr_disk_page_table)
{
f01032c2:	55                   	push   %ebp
f01032c3:	89 e5                	mov    %esp,%ebp
f01032c5:	83 ec 28             	sub    $0x28,%esp
	// Fill this function in
	uint32 disk_page_directory_entry = ptr_disk_page_directory[PDX(virtual_address)];
f01032c8:	8b 45 0c             	mov    0xc(%ebp),%eax
f01032cb:	c1 e8 16             	shr    $0x16,%eax
f01032ce:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f01032d5:	8b 45 08             	mov    0x8(%ebp),%eax
f01032d8:	01 d0                	add    %edx,%eax
f01032da:	8b 00                	mov    (%eax),%eax
f01032dc:	89 45 f4             	mov    %eax,-0xc(%ebp)
	{
		*ptr_disk_page_table = (uint32*)kheap_virtual_address(EXTRACT_ADDRESS(disk_page_directory_entry));
	}
	else
	{
		*ptr_disk_page_table = STATIC_KERNEL_VIRTUAL_ADDRESS(EXTRACT_ADDRESS(disk_page_directory_entry)) ;
f01032df:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01032e2:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f01032e7:	89 45 f0             	mov    %eax,-0x10(%ebp)
f01032ea:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01032ed:	c1 e8 0c             	shr    $0xc,%eax
f01032f0:	89 45 ec             	mov    %eax,-0x14(%ebp)
f01032f3:	a1 50 0e 6c f0       	mov    0xf06c0e50,%eax
f01032f8:	39 45 ec             	cmp    %eax,-0x14(%ebp)
f01032fb:	72 17                	jb     f0103314 <get_disk_page_table+0x52>
f01032fd:	ff 75 f0             	pushl  -0x10(%ebp)
f0103300:	68 3c 4c 13 f0       	push   $0xf0134c3c
f0103305:	68 92 00 00 00       	push   $0x92
f010330a:	68 d9 4b 13 f0       	push   $0xf0134bd9
f010330f:	e8 92 ce ff ff       	call   f01001a6 <_panic>
f0103314:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0103317:	2d 00 00 00 10       	sub    $0x10000000,%eax
f010331c:	89 c2                	mov    %eax,%edx
f010331e:	8b 45 14             	mov    0x14(%ebp),%eax
f0103321:	89 10                	mov    %edx,(%eax)
	}

	if (disk_page_directory_entry == 0)
f0103323:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0103327:	0f 85 b7 00 00 00    	jne    f01033e4 <get_disk_page_table+0x122>
	{
		//LOG_STATMENT(cprintf("get_disk_page_table: disk directory at %x",ptr_disk_page_directory));
		//LOG_STATMENT(cprintf("get_disk_page_table: page table not found "));
		if (create)
f010332d:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
f0103331:	0f 84 9d 00 00 00    	je     f01033d4 <get_disk_page_table+0x112>
						,PERM_PRESENT);
			}
#else
			{
				struct FrameInfo* ptr_frame_info;
				allocate_frame(&ptr_frame_info) ;
f0103337:	83 ec 0c             	sub    $0xc,%esp
f010333a:	8d 45 dc             	lea    -0x24(%ebp),%eax
f010333d:	50                   	push   %eax
f010333e:	e8 67 34 00 00       	call   f01067aa <allocate_frame>
f0103343:	83 c4 10             	add    $0x10,%esp

				//LOG_STATMENT(cprintf("created table"));
				uint32 phys_page_table = to_physical_address(ptr_frame_info);
f0103346:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0103349:	83 ec 0c             	sub    $0xc,%esp
f010334c:	50                   	push   %eax
f010334d:	e8 93 fb ff ff       	call   f0102ee5 <to_physical_address>
f0103352:	83 c4 10             	add    $0x10,%esp
f0103355:	89 45 e8             	mov    %eax,-0x18(%ebp)
				*ptr_disk_page_table = STATIC_KERNEL_VIRTUAL_ADDRESS(phys_page_table) ;
f0103358:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010335b:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f010335e:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0103361:	c1 e8 0c             	shr    $0xc,%eax
f0103364:	89 45 e0             	mov    %eax,-0x20(%ebp)
f0103367:	a1 50 0e 6c f0       	mov    0xf06c0e50,%eax
f010336c:	39 45 e0             	cmp    %eax,-0x20(%ebp)
f010336f:	72 17                	jb     f0103388 <get_disk_page_table+0xc6>
f0103371:	ff 75 e4             	pushl  -0x1c(%ebp)
f0103374:	68 3c 4c 13 f0       	push   $0xf0134c3c
f0103379:	68 ae 00 00 00       	push   $0xae
f010337e:	68 d9 4b 13 f0       	push   $0xf0134bd9
f0103383:	e8 1e ce ff ff       	call   f01001a6 <_panic>
f0103388:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010338b:	2d 00 00 00 10       	sub    $0x10000000,%eax
f0103390:	89 c2                	mov    %eax,%edx
f0103392:	8b 45 14             	mov    0x14(%ebp),%eax
f0103395:	89 10                	mov    %edx,(%eax)
				ptr_frame_info->references = 1;
f0103397:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010339a:	66 c7 40 08 01 00    	movw   $0x1,0x8(%eax)
				ptr_disk_page_directory[PDX(virtual_address)] = CONSTRUCT_ENTRY(phys_page_table,PERM_PRESENT);
f01033a0:	8b 45 0c             	mov    0xc(%ebp),%eax
f01033a3:	c1 e8 16             	shr    $0x16,%eax
f01033a6:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f01033ad:	8b 45 08             	mov    0x8(%ebp),%eax
f01033b0:	01 d0                	add    %edx,%eax
f01033b2:	8b 55 e8             	mov    -0x18(%ebp),%edx
f01033b5:	83 ca 01             	or     $0x1,%edx
f01033b8:	89 10                	mov    %edx,(%eax)
			}
#endif
			//initialize new page table by 0's
			memset(*ptr_disk_page_table , 0, PAGE_SIZE);
f01033ba:	8b 45 14             	mov    0x14(%ebp),%eax
f01033bd:	8b 00                	mov    (%eax),%eax
f01033bf:	83 ec 04             	sub    $0x4,%esp
f01033c2:	68 00 10 00 00       	push   $0x1000
f01033c7:	6a 00                	push   $0x0
f01033c9:	50                   	push   %eax
f01033ca:	e8 4a d5 02 00       	call   f0130919 <memset>
f01033cf:	83 c4 10             	add    $0x10,%esp
f01033d2:	eb 10                	jmp    f01033e4 <get_disk_page_table+0x122>
			//virtual_address, ptr_disk_page_directory[PDX(virtual_address)]));
		}
		else
		{
			//LOG_STATMENT(cprintf("NOT creating table ..."));
			*ptr_disk_page_table = 0;
f01033d4:	8b 45 14             	mov    0x14(%ebp),%eax
f01033d7:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
			return 0;
f01033dd:	b8 00 00 00 00       	mov    $0x0,%eax
f01033e2:	eb 05                	jmp    f01033e9 <get_disk_page_table+0x127>
		}
	}
	//LOG_STATMENT(cprintf("found table at %x", *ptr_disk_page_table));
	return 0;
f01033e4:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01033e9:	c9                   	leave  
f01033ea:	c3                   	ret    

f01033eb <pf_add_empty_env_page>:

int pf_add_empty_env_page( struct Env* ptr_env, uint32 virtual_address, uint8 initializeByZero)
{
f01033eb:	55                   	push   %ebp
f01033ec:	89 e5                	mov    %esp,%ebp
f01033ee:	83 ec 28             	sub    $0x28,%esp
f01033f1:	8b 45 10             	mov    0x10(%ebp),%eax
f01033f4:	88 45 e4             	mov    %al,-0x1c(%ebp)
	//2016: FIX:
	if (initializeByZero)
f01033f7:	80 7d e4 00          	cmpb   $0x0,-0x1c(%ebp)
f01033fb:	74 75                	je     f0103472 <pf_add_empty_env_page+0x87>
	{
		//2020
		if (virtual_address > USTACKBOTTOM && virtual_address < USTACKTOP - ptr_env->initNumStackPages * PAGE_SIZE)
f01033fd:	c7 45 f4 00 10 00 00 	movl   $0x1000,-0xc(%ebp)
f0103404:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0103407:	2d 01 e0 f9 5f       	sub    $0x5ff9e001,%eax
f010340c:	89 45 f0             	mov    %eax,-0x10(%ebp)
f010340f:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0103412:	ba 00 00 00 00       	mov    $0x0,%edx
f0103417:	f7 75 f4             	divl   -0xc(%ebp)
f010341a:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010341d:	29 d0                	sub    %edx,%eax
f010341f:	3b 45 0c             	cmp    0xc(%ebp),%eax
f0103422:	73 32                	jae    f0103456 <pf_add_empty_env_page+0x6b>
f0103424:	8b 45 08             	mov    0x8(%ebp),%eax
f0103427:	8b 90 14 da 01 00    	mov    0x1da14(%eax),%edx
f010342d:	b8 00 00 00 00       	mov    $0x0,%eax
f0103432:	29 d0                	sub    %edx,%eax
f0103434:	c1 e0 0c             	shl    $0xc,%eax
f0103437:	2d 00 20 40 11       	sub    $0x11402000,%eax
f010343c:	3b 45 0c             	cmp    0xc(%ebp),%eax
f010343f:	76 15                	jbe    f0103456 <pf_add_empty_env_page+0x6b>
			ptr_env->nNewPageAdded++ ;
f0103441:	8b 45 08             	mov    0x8(%ebp),%eax
f0103444:	8b 80 10 da 01 00    	mov    0x1da10(%eax),%eax
f010344a:	8d 50 01             	lea    0x1(%eax),%edx
f010344d:	8b 45 08             	mov    0x8(%ebp),%eax
f0103450:	89 90 10 da 01 00    	mov    %edx,0x1da10(%eax)
		//======================
		return pf_add_env_page(ptr_env, virtual_address, ptr_zero_page);
f0103456:	a1 9c 0e 6c f0       	mov    0xf06c0e9c,%eax
f010345b:	83 ec 04             	sub    $0x4,%esp
f010345e:	50                   	push   %eax
f010345f:	ff 75 0c             	pushl  0xc(%ebp)
f0103462:	ff 75 08             	pushl  0x8(%ebp)
f0103465:	e8 b2 00 00 00       	call   f010351c <pf_add_env_page>
f010346a:	83 c4 10             	add    $0x10,%esp
f010346d:	e9 a8 00 00 00       	jmp    f010351a <pf_add_empty_env_page+0x12f>
	}

	uint32 *ptr_disk_page_table;
	assert((uint32)virtual_address < KERNEL_BASE);
f0103472:	81 7d 0c ff ff ff ef 	cmpl   $0xefffffff,0xc(%ebp)
f0103479:	76 19                	jbe    f0103494 <pf_add_empty_env_page+0xa9>
f010347b:	68 6c 4c 13 f0       	push   $0xf0134c6c
f0103480:	68 92 4c 13 f0       	push   $0xf0134c92
f0103485:	68 d1 00 00 00       	push   $0xd1
f010348a:	68 d9 4b 13 f0       	push   $0xf0134bd9
f010348f:	e8 12 cd ff ff       	call   f01001a6 <_panic>

	get_disk_page_directory(ptr_env, &(ptr_env->disk_env_pgdir)) ;
f0103494:	8b 45 08             	mov    0x8(%ebp),%eax
f0103497:	83 c0 64             	add    $0x64,%eax
f010349a:	83 ec 08             	sub    $0x8,%esp
f010349d:	50                   	push   %eax
f010349e:	ff 75 08             	pushl  0x8(%ebp)
f01034a1:	e8 46 06 00 00       	call   f0103aec <get_disk_page_directory>
f01034a6:	83 c4 10             	add    $0x10,%esp

	get_disk_page_table(ptr_env->disk_env_pgdir,  virtual_address, 1, &ptr_disk_page_table) ;
f01034a9:	8b 45 08             	mov    0x8(%ebp),%eax
f01034ac:	8b 40 64             	mov    0x64(%eax),%eax
f01034af:	8d 55 ec             	lea    -0x14(%ebp),%edx
f01034b2:	52                   	push   %edx
f01034b3:	6a 01                	push   $0x1
f01034b5:	ff 75 0c             	pushl  0xc(%ebp)
f01034b8:	50                   	push   %eax
f01034b9:	e8 04 fe ff ff       	call   f01032c2 <get_disk_page_table>
f01034be:	83 c4 10             	add    $0x10,%esp

	uint32 dfn=ptr_disk_page_table[PTX(virtual_address)];
f01034c1:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01034c4:	8b 55 0c             	mov    0xc(%ebp),%edx
f01034c7:	c1 ea 0c             	shr    $0xc,%edx
f01034ca:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f01034d0:	c1 e2 02             	shl    $0x2,%edx
f01034d3:	01 d0                	add    %edx,%eax
f01034d5:	8b 00                	mov    (%eax),%eax
f01034d7:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if( dfn == 0)
f01034da:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01034dd:	85 c0                	test   %eax,%eax
f01034df:	75 34                	jne    f0103515 <pf_add_empty_env_page+0x12a>
	{
		if( allocate_disk_frame(&dfn) == E_NO_PAGE_FILE_SPACE) return E_NO_PAGE_FILE_SPACE;
f01034e1:	83 ec 0c             	sub    $0xc,%esp
f01034e4:	8d 45 e8             	lea    -0x18(%ebp),%eax
f01034e7:	50                   	push   %eax
f01034e8:	e8 2d fc ff ff       	call   f010311a <allocate_disk_frame>
f01034ed:	83 c4 10             	add    $0x10,%esp
f01034f0:	83 f8 f8             	cmp    $0xfffffff8,%eax
f01034f3:	75 07                	jne    f01034fc <pf_add_empty_env_page+0x111>
f01034f5:	b8 f8 ff ff ff       	mov    $0xfffffff8,%eax
f01034fa:	eb 1e                	jmp    f010351a <pf_add_empty_env_page+0x12f>
		ptr_disk_page_table[PTX(virtual_address)] = dfn;
f01034fc:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01034ff:	8b 55 0c             	mov    0xc(%ebp),%edx
f0103502:	c1 ea 0c             	shr    $0xc,%edx
f0103505:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f010350b:	c1 e2 02             	shl    $0x2,%edx
f010350e:	01 c2                	add    %eax,%edx
f0103510:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0103513:	89 02                	mov    %eax,(%edx)
	}

	return 0;
f0103515:	b8 00 00 00 00       	mov    $0x0,%eax

}
f010351a:	c9                   	leave  
f010351b:	c3                   	ret    

f010351c <pf_add_env_page>:

int pf_add_env_page( struct Env* ptr_env, uint32 virtual_address, void* dataSrc)
{
f010351c:	55                   	push   %ebp
f010351d:	89 e5                	mov    %esp,%ebp
f010351f:	83 ec 18             	sub    $0x18,%esp
	//LOG_STRING("========================== create_env_page");
	uint32 *ptr_disk_page_table;
	assert((uint32)virtual_address < KERNEL_BASE);
f0103522:	81 7d 0c ff ff ff ef 	cmpl   $0xefffffff,0xc(%ebp)
f0103529:	76 19                	jbe    f0103544 <pf_add_env_page+0x28>
f010352b:	68 6c 4c 13 f0       	push   $0xf0134c6c
f0103530:	68 92 4c 13 f0       	push   $0xf0134c92
f0103535:	68 e6 00 00 00       	push   $0xe6
f010353a:	68 d9 4b 13 f0       	push   $0xf0134bd9
f010353f:	e8 62 cc ff ff       	call   f01001a6 <_panic>

	get_disk_page_directory(ptr_env, &(ptr_env->disk_env_pgdir)) ;
f0103544:	8b 45 08             	mov    0x8(%ebp),%eax
f0103547:	83 c0 64             	add    $0x64,%eax
f010354a:	83 ec 08             	sub    $0x8,%esp
f010354d:	50                   	push   %eax
f010354e:	ff 75 08             	pushl  0x8(%ebp)
f0103551:	e8 96 05 00 00       	call   f0103aec <get_disk_page_directory>
f0103556:	83 c4 10             	add    $0x10,%esp

	get_disk_page_table(ptr_env->disk_env_pgdir,  virtual_address, 1, &ptr_disk_page_table) ;
f0103559:	8b 45 08             	mov    0x8(%ebp),%eax
f010355c:	8b 40 64             	mov    0x64(%eax),%eax
f010355f:	8d 55 f0             	lea    -0x10(%ebp),%edx
f0103562:	52                   	push   %edx
f0103563:	6a 01                	push   $0x1
f0103565:	ff 75 0c             	pushl  0xc(%ebp)
f0103568:	50                   	push   %eax
f0103569:	e8 54 fd ff ff       	call   f01032c2 <get_disk_page_table>
f010356e:	83 c4 10             	add    $0x10,%esp

	uint32 dfn=ptr_disk_page_table[PTX(virtual_address)];
f0103571:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0103574:	8b 55 0c             	mov    0xc(%ebp),%edx
f0103577:	c1 ea 0c             	shr    $0xc,%edx
f010357a:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0103580:	c1 e2 02             	shl    $0x2,%edx
f0103583:	01 d0                	add    %edx,%eax
f0103585:	8b 00                	mov    (%eax),%eax
f0103587:	89 45 ec             	mov    %eax,-0x14(%ebp)
	if( dfn == 0)
f010358a:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010358d:	85 c0                	test   %eax,%eax
f010358f:	75 34                	jne    f01035c5 <pf_add_env_page+0xa9>
	{
		if( allocate_disk_frame(&dfn) == E_NO_PAGE_FILE_SPACE) return E_NO_PAGE_FILE_SPACE;
f0103591:	83 ec 0c             	sub    $0xc,%esp
f0103594:	8d 45 ec             	lea    -0x14(%ebp),%eax
f0103597:	50                   	push   %eax
f0103598:	e8 7d fb ff ff       	call   f010311a <allocate_disk_frame>
f010359d:	83 c4 10             	add    $0x10,%esp
f01035a0:	83 f8 f8             	cmp    $0xfffffff8,%eax
f01035a3:	75 07                	jne    f01035ac <pf_add_env_page+0x90>
f01035a5:	b8 f8 ff ff ff       	mov    $0xfffffff8,%eax
f01035aa:	eb 31                	jmp    f01035dd <pf_add_env_page+0xc1>
		ptr_disk_page_table[PTX(virtual_address)] = dfn;
f01035ac:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01035af:	8b 55 0c             	mov    0xc(%ebp),%edx
f01035b2:	c1 ea 0c             	shr    $0xc,%edx
f01035b5:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f01035bb:	c1 e2 02             	shl    $0x2,%edx
f01035be:	01 c2                	add    %eax,%edx
f01035c0:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01035c3:	89 02                	mov    %eax,(%edx)
	//	uint32 oldDir = rcr3();
	//	lcr3(K_PHYSICAL_ADDRESS(ptr_env->env_pgdir));
	//	int ret = write_disk_page(dfn, (void*)dataSrc);
	//	lcr3(oldDir);

	int ret = write_disk_page(dfn, (void*)dataSrc);
f01035c5:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01035c8:	83 ec 08             	sub    $0x8,%esp
f01035cb:	ff 75 10             	pushl  0x10(%ebp)
f01035ce:	50                   	push   %eax
f01035cf:	e8 99 f9 ff ff       	call   f0102f6d <write_disk_page>
f01035d4:	83 c4 10             	add    $0x10,%esp
f01035d7:	89 45 f4             	mov    %eax,-0xc(%ebp)
	return ret;
f01035da:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f01035dd:	c9                   	leave  
f01035de:	c3                   	ret    

f01035df <pf_update_env_page>:

int pf_update_env_page(struct Env* ptr_env, uint32 virtual_address, struct FrameInfo* modified_page_frame_info)
{
f01035df:	55                   	push   %ebp
f01035e0:	89 e5                	mov    %esp,%ebp
f01035e2:	83 ec 38             	sub    $0x38,%esp
	int ret;
	uint32 *ptr_disk_page_table;
	//ROUND DOWN it on 4 KB boundary in order to update the entire page starting from its first address.
	//virtual_address = ROUNDDOWN(virtual_address, PAGE_SIZE);

	assert((uint32)virtual_address < KERNEL_BASE);
f01035e5:	81 7d 0c ff ff ff ef 	cmpl   $0xefffffff,0xc(%ebp)
f01035ec:	76 19                	jbe    f0103607 <pf_update_env_page+0x28>
f01035ee:	68 6c 4c 13 f0       	push   $0xf0134c6c
f01035f3:	68 92 4c 13 f0       	push   $0xf0134c92
f01035f8:	68 08 01 00 00       	push   $0x108
f01035fd:	68 d9 4b 13 f0       	push   $0xf0134bd9
f0103602:	e8 9f cb ff ff       	call   f01001a6 <_panic>
	//char c = *((char*)virtual_address);
	//Get/Create the directory table
	get_disk_page_directory(ptr_env, &(ptr_env->disk_env_pgdir)) ;
f0103607:	8b 45 08             	mov    0x8(%ebp),%eax
f010360a:	83 c0 64             	add    $0x64,%eax
f010360d:	83 ec 08             	sub    $0x8,%esp
f0103610:	50                   	push   %eax
f0103611:	ff 75 08             	pushl  0x8(%ebp)
f0103614:	e8 d3 04 00 00       	call   f0103aec <get_disk_page_directory>
f0103619:	83 c4 10             	add    $0x10,%esp

	get_disk_page_table(ptr_env->disk_env_pgdir, virtual_address, 0, &ptr_disk_page_table);
f010361c:	8b 45 08             	mov    0x8(%ebp),%eax
f010361f:	8b 40 64             	mov    0x64(%eax),%eax
f0103622:	8d 55 d4             	lea    -0x2c(%ebp),%edx
f0103625:	52                   	push   %edx
f0103626:	6a 00                	push   $0x0
f0103628:	ff 75 0c             	pushl  0xc(%ebp)
f010362b:	50                   	push   %eax
f010362c:	e8 91 fc ff ff       	call   f01032c2 <get_disk_page_table>
f0103631:	83 c4 10             	add    $0x10,%esp

	/*2022*///==========
	if(ptr_disk_page_table == NULL || (ptr_disk_page_table != NULL && ptr_disk_page_table[PTX(virtual_address)]== 0))
f0103634:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0103637:	85 c0                	test   %eax,%eax
f0103639:	74 29                	je     f0103664 <pf_update_env_page+0x85>
f010363b:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f010363e:	85 c0                	test   %eax,%eax
f0103640:	0f 84 43 01 00 00    	je     f0103789 <pf_update_env_page+0x1aa>
f0103646:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0103649:	8b 55 0c             	mov    0xc(%ebp),%edx
f010364c:	c1 ea 0c             	shr    $0xc,%edx
f010364f:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0103655:	c1 e2 02             	shl    $0x2,%edx
f0103658:	01 d0                	add    %edx,%eax
f010365a:	8b 00                	mov    (%eax),%eax
f010365c:	85 c0                	test   %eax,%eax
f010365e:	0f 85 25 01 00 00    	jne    f0103789 <pf_update_env_page+0x1aa>
	{
		uint32 VA = (uint32)virtual_address ;
f0103664:	8b 45 0c             	mov    0xc(%ebp),%eax
f0103667:	89 45 f4             	mov    %eax,-0xc(%ebp)
		if ((VA >= USER_HEAP_START && VA < USER_HEAP_MAX) || (VA >= USTACKBOTTOM && VA < USTACKTOP))
f010366a:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010366d:	85 c0                	test   %eax,%eax
f010366f:	79 09                	jns    f010367a <pf_update_env_page+0x9b>
f0103671:	81 7d f4 ff ff ff 9f 	cmpl   $0x9fffffff,-0xc(%ebp)
f0103678:	76 38                	jbe    f01036b2 <pf_update_env_page+0xd3>
f010367a:	c7 45 f0 00 10 00 00 	movl   $0x1000,-0x10(%ebp)
f0103681:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0103684:	2d 01 e0 f9 5f       	sub    $0x5ff9e001,%eax
f0103689:	89 45 ec             	mov    %eax,-0x14(%ebp)
f010368c:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010368f:	ba 00 00 00 00       	mov    $0x0,%edx
f0103694:	f7 75 f0             	divl   -0x10(%ebp)
f0103697:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010369a:	29 d0                	sub    %edx,%eax
f010369c:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f010369f:	0f 87 cd 00 00 00    	ja     f0103772 <pf_update_env_page+0x193>
f01036a5:	81 7d f4 ff df bf ee 	cmpl   $0xeebfdfff,-0xc(%ebp)
f01036ac:	0f 87 c0 00 00 00    	ja     f0103772 <pf_update_env_page+0x193>
		{
			uint32 *ptr_table ;
			struct FrameInfo* ptr_fi = get_frame_info(ptr_env->env_page_directory, virtual_address, &ptr_table);
f01036b2:	8b 45 08             	mov    0x8(%ebp),%eax
f01036b5:	8b 40 5c             	mov    0x5c(%eax),%eax
f01036b8:	83 ec 04             	sub    $0x4,%esp
f01036bb:	8d 55 d0             	lea    -0x30(%ebp),%edx
f01036be:	52                   	push   %edx
f01036bf:	ff 75 0c             	pushl  0xc(%ebp)
f01036c2:	50                   	push   %eax
f01036c3:	e8 39 35 00 00       	call   f0106c01 <get_frame_info>
f01036c8:	83 c4 10             	add    $0x10,%esp
f01036cb:	89 45 e8             	mov    %eax,-0x18(%ebp)
			//if VA already mapped on the same modified_page_frame_info, then write it directly from the VA
			if (ptr_fi == modified_page_frame_info)
f01036ce:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01036d1:	3b 45 10             	cmp    0x10(%ebp),%eax
f01036d4:	75 52                	jne    f0103728 <pf_update_env_page+0x149>
			{
				ret = pf_add_env_page(ptr_env, VA, (void*)virtual_address) ;
f01036d6:	8b 45 0c             	mov    0xc(%ebp),%eax
f01036d9:	83 ec 04             	sub    $0x4,%esp
f01036dc:	50                   	push   %eax
f01036dd:	ff 75 f4             	pushl  -0xc(%ebp)
f01036e0:	ff 75 08             	pushl  0x8(%ebp)
f01036e3:	e8 34 fe ff ff       	call   f010351c <pf_add_env_page>
f01036e8:	83 c4 10             	add    $0x10,%esp
f01036eb:	89 45 e4             	mov    %eax,-0x1c(%ebp)
				if (ret == E_NO_PAGE_FILE_SPACE)
f01036ee:	83 7d e4 f8          	cmpl   $0xfffffff8,-0x1c(%ebp)
f01036f2:	75 17                	jne    f010370b <pf_update_env_page+0x12c>
				{
					panic("pf_update_env_page: page file out of space!") ;
f01036f4:	83 ec 04             	sub    $0x4,%esp
f01036f7:	68 a8 4c 13 f0       	push   $0xf0134ca8
f01036fc:	68 1d 01 00 00       	push   $0x11d
f0103701:	68 d9 4b 13 f0       	push   $0xf0134bd9
f0103706:	e8 9b ca ff ff       	call   f01001a6 <_panic>
				}
				ptr_env->nNewPageAdded++ ;
f010370b:	8b 45 08             	mov    0x8(%ebp),%eax
f010370e:	8b 80 10 da 01 00    	mov    0x1da10(%eax),%eax
f0103714:	8d 50 01             	lea    0x1(%eax),%edx
f0103717:	8b 45 08             	mov    0x8(%ebp),%eax
f010371a:	89 90 10 da 01 00    	mov    %edx,0x1da10(%eax)
				return ret ;
f0103720:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0103723:	e9 ff 00 00 00       	jmp    f0103827 <pf_update_env_page+0x248>
			}
			//Else, just add a new empty page to the page file, then update it with the given modified_page_frame_info in the below code
			else
			{
				ret = pf_add_empty_env_page(ptr_env, VA, 0);
f0103728:	83 ec 04             	sub    $0x4,%esp
f010372b:	6a 00                	push   $0x0
f010372d:	ff 75 f4             	pushl  -0xc(%ebp)
f0103730:	ff 75 08             	pushl  0x8(%ebp)
f0103733:	e8 b3 fc ff ff       	call   f01033eb <pf_add_empty_env_page>
f0103738:	83 c4 10             	add    $0x10,%esp
f010373b:	89 45 e4             	mov    %eax,-0x1c(%ebp)
				if (ret == E_NO_PAGE_FILE_SPACE)
f010373e:	83 7d e4 f8          	cmpl   $0xfffffff8,-0x1c(%ebp)
f0103742:	75 17                	jne    f010375b <pf_update_env_page+0x17c>
				{
					panic("pf_update_env_page: attempt to add a new page, but page file out of space!") ;
f0103744:	83 ec 04             	sub    $0x4,%esp
f0103747:	68 d4 4c 13 f0       	push   $0xf0134cd4
f010374c:	68 28 01 00 00       	push   $0x128
f0103751:	68 d9 4b 13 f0       	push   $0xf0134bd9
f0103756:	e8 4b ca ff ff       	call   f01001a6 <_panic>
				}
				ptr_env->nNewPageAdded++ ;
f010375b:	8b 45 08             	mov    0x8(%ebp),%eax
f010375e:	8b 80 10 da 01 00    	mov    0x1da10(%eax),%eax
f0103764:	8d 50 01             	lea    0x1(%eax),%edx
f0103767:	8b 45 08             	mov    0x8(%ebp),%eax
f010376a:	89 90 10 da 01 00    	mov    %edx,0x1da10(%eax)
	/*2022*///==========
	if(ptr_disk_page_table == NULL || (ptr_disk_page_table != NULL && ptr_disk_page_table[PTX(virtual_address)]== 0))
	{
		uint32 VA = (uint32)virtual_address ;
		if ((VA >= USER_HEAP_START && VA < USER_HEAP_MAX) || (VA >= USTACKBOTTOM && VA < USTACKTOP))
		{
f0103770:	eb 17                	jmp    f0103789 <pf_update_env_page+0x1aa>
				ptr_env->nNewPageAdded++ ;
			}
		}
		else
		{
			panic("pf_update_env_page: Invalid Access - Attempt to add a new page to page file that's outside the USER HEAP and USER STACK!");
f0103772:	83 ec 04             	sub    $0x4,%esp
f0103775:	68 20 4d 13 f0       	push   $0xf0134d20
f010377a:	68 2f 01 00 00       	push   $0x12f
f010377f:	68 d9 4b 13 f0       	push   $0xf0134bd9
f0103784:	e8 1d ca ff ff       	call   f01001a6 <_panic>
		}
	}
	//2022 END========================================

	get_disk_page_table(ptr_env->disk_env_pgdir, virtual_address, 0, &ptr_disk_page_table);
f0103789:	8b 45 08             	mov    0x8(%ebp),%eax
f010378c:	8b 40 64             	mov    0x64(%eax),%eax
f010378f:	8d 55 d4             	lea    -0x2c(%ebp),%edx
f0103792:	52                   	push   %edx
f0103793:	6a 00                	push   $0x0
f0103795:	ff 75 0c             	pushl  0xc(%ebp)
f0103798:	50                   	push   %eax
f0103799:	e8 24 fb ff ff       	call   f01032c2 <get_disk_page_table>
f010379e:	83 c4 10             	add    $0x10,%esp
	uint32 dfn=ptr_disk_page_table[PTX(virtual_address)];
f01037a1:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f01037a4:	8b 55 0c             	mov    0xc(%ebp),%edx
f01037a7:	c1 ea 0c             	shr    $0xc,%edx
f01037aa:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f01037b0:	c1 e2 02             	shl    $0x2,%edx
f01037b3:	01 d0                	add    %edx,%eax
f01037b5:	8b 00                	mov    (%eax),%eax
f01037b7:	89 45 e0             	mov    %eax,-0x20(%ebp)

		//cprintf("[%s] updating page\n",ptr_env->prog_name);
	}
#else
	{
		ret = write_disk_page(dfn, STATIC_KERNEL_VIRTUAL_ADDRESS(to_physical_address(modified_page_frame_info)));
f01037ba:	83 ec 0c             	sub    $0xc,%esp
f01037bd:	ff 75 10             	pushl  0x10(%ebp)
f01037c0:	e8 20 f7 ff ff       	call   f0102ee5 <to_physical_address>
f01037c5:	83 c4 10             	add    $0x10,%esp
f01037c8:	89 45 dc             	mov    %eax,-0x24(%ebp)
f01037cb:	8b 45 dc             	mov    -0x24(%ebp),%eax
f01037ce:	c1 e8 0c             	shr    $0xc,%eax
f01037d1:	89 45 d8             	mov    %eax,-0x28(%ebp)
f01037d4:	a1 50 0e 6c f0       	mov    0xf06c0e50,%eax
f01037d9:	39 45 d8             	cmp    %eax,-0x28(%ebp)
f01037dc:	72 17                	jb     f01037f5 <pf_update_env_page+0x216>
f01037de:	ff 75 dc             	pushl  -0x24(%ebp)
f01037e1:	68 3c 4c 13 f0       	push   $0xf0134c3c
f01037e6:	68 47 01 00 00       	push   $0x147
f01037eb:	68 d9 4b 13 f0       	push   $0xf0134bd9
f01037f0:	e8 b1 c9 ff ff       	call   f01001a6 <_panic>
f01037f5:	8b 45 dc             	mov    -0x24(%ebp),%eax
f01037f8:	2d 00 00 00 10       	sub    $0x10000000,%eax
f01037fd:	83 ec 08             	sub    $0x8,%esp
f0103800:	50                   	push   %eax
f0103801:	ff 75 e0             	pushl  -0x20(%ebp)
f0103804:	e8 64 f7 ff ff       	call   f0102f6d <write_disk_page>
f0103809:	83 c4 10             	add    $0x10,%esp
f010380c:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		//cprintf("[%s] finished updating page\n",ptr_env->prog_name);
	}
#endif
	//2020
	ptr_env->nPageOut++ ;
f010380f:	8b 45 08             	mov    0x8(%ebp),%eax
f0103812:	8b 80 0c da 01 00    	mov    0x1da0c(%eax),%eax
f0103818:	8d 50 01             	lea    0x1(%eax),%edx
f010381b:	8b 45 08             	mov    0x8(%ebp),%eax
f010381e:	89 90 0c da 01 00    	mov    %edx,0x1da0c(%eax)
	//======================

	return ret;
f0103824:	8b 45 e4             	mov    -0x1c(%ebp),%eax
}
f0103827:	c9                   	leave  
f0103828:	c3                   	ret    

f0103829 <pf_read_env_page>:

int pf_read_env_page(struct Env* ptr_env, void* virtual_address)
{
f0103829:	55                   	push   %ebp
f010382a:	89 e5                	mov    %esp,%ebp
f010382c:	83 ec 18             	sub    $0x18,%esp
	uint32 *ptr_disk_page_table;

	//ROUND DOWN it on 4 KB boundary in order to read the entire page starting from its first address.
	virtual_address = ROUNDDOWN(virtual_address, PAGE_SIZE);
f010382f:	8b 45 0c             	mov    0xc(%ebp),%eax
f0103832:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0103835:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0103838:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f010383d:	89 45 0c             	mov    %eax,0xc(%ebp)

	if( ptr_env->disk_env_pgdir == 0) return E_PAGE_NOT_EXIST_IN_PF;
f0103840:	8b 45 08             	mov    0x8(%ebp),%eax
f0103843:	8b 40 64             	mov    0x64(%eax),%eax
f0103846:	85 c0                	test   %eax,%eax
f0103848:	75 0a                	jne    f0103854 <pf_read_env_page+0x2b>
f010384a:	b8 f7 ff ff ff       	mov    $0xfffffff7,%eax
f010384f:	e9 90 00 00 00       	jmp    f01038e4 <pf_read_env_page+0xbb>

	get_disk_page_table(ptr_env->disk_env_pgdir, (uint32) virtual_address, 0, &ptr_disk_page_table);
f0103854:	8b 55 0c             	mov    0xc(%ebp),%edx
f0103857:	8b 45 08             	mov    0x8(%ebp),%eax
f010385a:	8b 40 64             	mov    0x64(%eax),%eax
f010385d:	8d 4d e8             	lea    -0x18(%ebp),%ecx
f0103860:	51                   	push   %ecx
f0103861:	6a 00                	push   $0x0
f0103863:	52                   	push   %edx
f0103864:	50                   	push   %eax
f0103865:	e8 58 fa ff ff       	call   f01032c2 <get_disk_page_table>
f010386a:	83 c4 10             	add    $0x10,%esp
	if(ptr_disk_page_table == 0) return E_PAGE_NOT_EXIST_IN_PF;
f010386d:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0103870:	85 c0                	test   %eax,%eax
f0103872:	75 07                	jne    f010387b <pf_read_env_page+0x52>
f0103874:	b8 f7 ff ff ff       	mov    $0xfffffff7,%eax
f0103879:	eb 69                	jmp    f01038e4 <pf_read_env_page+0xbb>

	uint32 dfn=ptr_disk_page_table[PTX(virtual_address)];
f010387b:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010387e:	8b 55 0c             	mov    0xc(%ebp),%edx
f0103881:	c1 ea 0c             	shr    $0xc,%edx
f0103884:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f010388a:	c1 e2 02             	shl    $0x2,%edx
f010388d:	01 d0                	add    %edx,%eax
f010388f:	8b 00                	mov    (%eax),%eax
f0103891:	89 45 f0             	mov    %eax,-0x10(%ebp)

	if( dfn == 0) return E_PAGE_NOT_EXIST_IN_PF;
f0103894:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0103898:	75 07                	jne    f01038a1 <pf_read_env_page+0x78>
f010389a:	b8 f7 ff ff ff       	mov    $0xfffffff7,%eax
f010389f:	eb 43                	jmp    f01038e4 <pf_read_env_page+0xbb>

	int disk_read_error = read_disk_page(dfn, virtual_address);
f01038a1:	83 ec 08             	sub    $0x8,%esp
f01038a4:	ff 75 0c             	pushl  0xc(%ebp)
f01038a7:	ff 75 f0             	pushl  -0x10(%ebp)
f01038aa:	e8 8f f6 ff ff       	call   f0102f3e <read_disk_page>
f01038af:	83 c4 10             	add    $0x10,%esp
f01038b2:	89 45 ec             	mov    %eax,-0x14(%ebp)

	//reset modified bit to 0: because FOS copies the placed or replaced page from
	//HD to memory, the page modified bit is set to 1, but we want the modified bit to be
	// affected only by "user code" modifications, not our (FOS kernel) modifications
	pt_set_page_permissions(ptr_env->env_page_directory, (uint32)virtual_address, 0, PERM_MODIFIED);
f01038b5:	8b 55 0c             	mov    0xc(%ebp),%edx
f01038b8:	8b 45 08             	mov    0x8(%ebp),%eax
f01038bb:	8b 40 5c             	mov    0x5c(%eax),%eax
f01038be:	6a 40                	push   $0x40
f01038c0:	6a 00                	push   $0x0
f01038c2:	52                   	push   %edx
f01038c3:	50                   	push   %eax
f01038c4:	e8 2b 3e 00 00       	call   f01076f4 <pt_set_page_permissions>
f01038c9:	83 c4 10             	add    $0x10,%esp

	//2020
	ptr_env->nPageIn++ ;
f01038cc:	8b 45 08             	mov    0x8(%ebp),%eax
f01038cf:	8b 80 08 da 01 00    	mov    0x1da08(%eax),%eax
f01038d5:	8d 50 01             	lea    0x1(%eax),%edx
f01038d8:	8b 45 08             	mov    0x8(%ebp),%eax
f01038db:	89 90 08 da 01 00    	mov    %edx,0x1da08(%eax)
	//======================

	return disk_read_error;
f01038e1:	8b 45 ec             	mov    -0x14(%ebp),%eax
}
f01038e4:	c9                   	leave  
f01038e5:	c3                   	ret    

f01038e6 <pf_remove_env_page>:

void pf_remove_env_page(struct Env* ptr_env, uint32 virtual_address)
{
f01038e6:	55                   	push   %ebp
f01038e7:	89 e5                	mov    %esp,%ebp
f01038e9:	83 ec 18             	sub    $0x18,%esp
	//LOG_STRING("pf_remove_env_page: 0");
	uint32 *ptr_disk_page_table;

	//LOG_STATMENT(cprintf("ptr_env = %x",ptr_env));
	if( ptr_env->disk_env_pgdir == 0) return;
f01038ec:	8b 45 08             	mov    0x8(%ebp),%eax
f01038ef:	8b 40 64             	mov    0x64(%eax),%eax
f01038f2:	85 c0                	test   %eax,%eax
f01038f4:	74 62                	je     f0103958 <pf_remove_env_page+0x72>

	//LOG_STRING("pf_remove_env_page: 1");
	get_disk_page_table(ptr_env->disk_env_pgdir, virtual_address, 0, &ptr_disk_page_table);
f01038f6:	8b 45 08             	mov    0x8(%ebp),%eax
f01038f9:	8b 40 64             	mov    0x64(%eax),%eax
f01038fc:	8d 55 f0             	lea    -0x10(%ebp),%edx
f01038ff:	52                   	push   %edx
f0103900:	6a 00                	push   $0x0
f0103902:	ff 75 0c             	pushl  0xc(%ebp)
f0103905:	50                   	push   %eax
f0103906:	e8 b7 f9 ff ff       	call   f01032c2 <get_disk_page_table>
f010390b:	83 c4 10             	add    $0x10,%esp
	if(ptr_disk_page_table == 0) return;
f010390e:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0103911:	85 c0                	test   %eax,%eax
f0103913:	74 46                	je     f010395b <pf_remove_env_page+0x75>

	//LOG_STRING("pf_remove_env_page: 2");
	uint32 dfn=ptr_disk_page_table[PTX(virtual_address)];
f0103915:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0103918:	8b 55 0c             	mov    0xc(%ebp),%edx
f010391b:	c1 ea 0c             	shr    $0xc,%edx
f010391e:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0103924:	c1 e2 02             	shl    $0x2,%edx
f0103927:	01 d0                	add    %edx,%eax
f0103929:	8b 00                	mov    (%eax),%eax
f010392b:	89 45 f4             	mov    %eax,-0xc(%ebp)
	ptr_disk_page_table[PTX(virtual_address)] = 0;
f010392e:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0103931:	8b 55 0c             	mov    0xc(%ebp),%edx
f0103934:	c1 ea 0c             	shr    $0xc,%edx
f0103937:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f010393d:	c1 e2 02             	shl    $0x2,%edx
f0103940:	01 d0                	add    %edx,%eax
f0103942:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	free_disk_frame(dfn);
f0103948:	83 ec 0c             	sub    $0xc,%esp
f010394b:	ff 75 f4             	pushl  -0xc(%ebp)
f010394e:	e8 8e f8 ff ff       	call   f01031e1 <free_disk_frame>
f0103953:	83 c4 10             	add    $0x10,%esp
f0103956:	eb 04                	jmp    f010395c <pf_remove_env_page+0x76>
{
	//LOG_STRING("pf_remove_env_page: 0");
	uint32 *ptr_disk_page_table;

	//LOG_STATMENT(cprintf("ptr_env = %x",ptr_env));
	if( ptr_env->disk_env_pgdir == 0) return;
f0103958:	90                   	nop
f0103959:	eb 01                	jmp    f010395c <pf_remove_env_page+0x76>

	//LOG_STRING("pf_remove_env_page: 1");
	get_disk_page_table(ptr_env->disk_env_pgdir, virtual_address, 0, &ptr_disk_page_table);
	if(ptr_disk_page_table == 0) return;
f010395b:	90                   	nop
	//LOG_STRING("pf_remove_env_page: 2");
	uint32 dfn=ptr_disk_page_table[PTX(virtual_address)];
	ptr_disk_page_table[PTX(virtual_address)] = 0;
	free_disk_frame(dfn);
	//LOG_STRING("pf_remove_env_page: 3");
}
f010395c:	c9                   	leave  
f010395d:	c3                   	ret    

f010395e <pf_free_env>:

void pf_free_env(struct Env* ptr_env)
{
f010395e:	55                   	push   %ebp
f010395f:	89 e5                	mov    %esp,%ebp
f0103961:	83 ec 28             	sub    $0x28,%esp
	uint32 pdeno;

	for (pdeno = 0; pdeno < PDX(USER_TOP) ; pdeno++)
f0103964:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f010396b:	e9 ee 00 00 00       	jmp    f0103a5e <pf_free_env+0x100>
	{
		// only look at mapped page tables
		if (!(ptr_env->disk_env_pgdir[pdeno] & PERM_PRESENT))
f0103970:	8b 45 08             	mov    0x8(%ebp),%eax
f0103973:	8b 40 64             	mov    0x64(%eax),%eax
f0103976:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0103979:	c1 e2 02             	shl    $0x2,%edx
f010397c:	01 d0                	add    %edx,%eax
f010397e:	8b 00                	mov    (%eax),%eax
f0103980:	83 e0 01             	and    $0x1,%eax
f0103983:	85 c0                	test   %eax,%eax
f0103985:	0f 84 cf 00 00 00    	je     f0103a5a <pf_free_env+0xfc>
			continue;

		// find the pa and va of the page table
		uint32 pa = EXTRACT_ADDRESS(ptr_env->disk_env_pgdir[pdeno]);
f010398b:	8b 45 08             	mov    0x8(%ebp),%eax
f010398e:	8b 40 64             	mov    0x64(%eax),%eax
f0103991:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0103994:	c1 e2 02             	shl    $0x2,%edx
f0103997:	01 d0                	add    %edx,%eax
f0103999:	8b 00                	mov    (%eax),%eax
f010399b:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f01039a0:	89 45 ec             	mov    %eax,-0x14(%ebp)
		{
			pt = (uint32*) kheap_virtual_address(pa);
		}
#else
		{
			pt = (uint32*) STATIC_KERNEL_VIRTUAL_ADDRESS(pa);
f01039a3:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01039a6:	89 45 e8             	mov    %eax,-0x18(%ebp)
f01039a9:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01039ac:	c1 e8 0c             	shr    $0xc,%eax
f01039af:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f01039b2:	a1 50 0e 6c f0       	mov    0xf06c0e50,%eax
f01039b7:	39 45 e4             	cmp    %eax,-0x1c(%ebp)
f01039ba:	72 17                	jb     f01039d3 <pf_free_env+0x75>
f01039bc:	ff 75 e8             	pushl  -0x18(%ebp)
f01039bf:	68 3c 4c 13 f0       	push   $0xf0134c3c
f01039c4:	68 96 01 00 00       	push   $0x196
f01039c9:	68 d9 4b 13 f0       	push   $0xf0134bd9
f01039ce:	e8 d3 c7 ff ff       	call   f01001a6 <_panic>
f01039d3:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01039d6:	2d 00 00 00 10       	sub    $0x10000000,%eax
f01039db:	89 45 e0             	mov    %eax,-0x20(%ebp)
		}
#endif
		// unmap all PTEs in this page table
		uint32 pteno;
		for (pteno = 0; pteno < 1024; pteno++)
f01039de:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f01039e5:	eb 3a                	jmp    f0103a21 <pf_free_env+0xc3>
		{
			// remove the disk page from disk page table
			uint32 dfn=pt[pteno];
f01039e7:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01039ea:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f01039f1:	8b 45 e0             	mov    -0x20(%ebp),%eax
f01039f4:	01 d0                	add    %edx,%eax
f01039f6:	8b 00                	mov    (%eax),%eax
f01039f8:	89 45 dc             	mov    %eax,-0x24(%ebp)
			pt[pteno] = 0;
f01039fb:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01039fe:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0103a05:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0103a08:	01 d0                	add    %edx,%eax
f0103a0a:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
			// and declare it free
			free_disk_frame(dfn);
f0103a10:	83 ec 0c             	sub    $0xc,%esp
f0103a13:	ff 75 dc             	pushl  -0x24(%ebp)
f0103a16:	e8 c6 f7 ff ff       	call   f01031e1 <free_disk_frame>
f0103a1b:	83 c4 10             	add    $0x10,%esp
			pt = (uint32*) STATIC_KERNEL_VIRTUAL_ADDRESS(pa);
		}
#endif
		// unmap all PTEs in this page table
		uint32 pteno;
		for (pteno = 0; pteno < 1024; pteno++)
f0103a1e:	ff 45 f0             	incl   -0x10(%ebp)
f0103a21:	81 7d f0 ff 03 00 00 	cmpl   $0x3ff,-0x10(%ebp)
f0103a28:	76 bd                	jbe    f01039e7 <pf_free_env+0x89>
			// and declare it free
			free_disk_frame(dfn);
		}

		// free the disk page table itself
		ptr_env->disk_env_pgdir[pdeno] = 0;
f0103a2a:	8b 45 08             	mov    0x8(%ebp),%eax
f0103a2d:	8b 40 64             	mov    0x64(%eax),%eax
f0103a30:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0103a33:	c1 e2 02             	shl    $0x2,%edx
f0103a36:	01 d0                	add    %edx,%eax
f0103a38:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
		{
			kfree(pt);
		}
#else
		{
			decrement_references(to_frame_info(pa));
f0103a3e:	83 ec 0c             	sub    $0xc,%esp
f0103a41:	ff 75 ec             	pushl  -0x14(%ebp)
f0103a44:	e8 af f4 ff ff       	call   f0102ef8 <to_frame_info>
f0103a49:	83 c4 10             	add    $0x10,%esp
f0103a4c:	83 ec 0c             	sub    $0xc,%esp
f0103a4f:	50                   	push   %eax
f0103a50:	e8 e4 2e 00 00       	call   f0106939 <decrement_references>
f0103a55:	83 c4 10             	add    $0x10,%esp
f0103a58:	eb 01                	jmp    f0103a5b <pf_free_env+0xfd>

	for (pdeno = 0; pdeno < PDX(USER_TOP) ; pdeno++)
	{
		// only look at mapped page tables
		if (!(ptr_env->disk_env_pgdir[pdeno] & PERM_PRESENT))
			continue;
f0103a5a:	90                   	nop

void pf_free_env(struct Env* ptr_env)
{
	uint32 pdeno;

	for (pdeno = 0; pdeno < PDX(USER_TOP) ; pdeno++)
f0103a5b:	ff 45 f4             	incl   -0xc(%ebp)
f0103a5e:	81 7d f4 ba 03 00 00 	cmpl   $0x3ba,-0xc(%ebp)
f0103a65:	0f 86 05 ff ff ff    	jbe    f0103970 <pf_free_env+0x12>
	{
		kfree(ptr_env->disk_env_pgdir);
	}
#else
	{
		decrement_references(to_frame_info(ptr_env->disk_env_pgdir_PA));
f0103a6b:	8b 45 08             	mov    0x8(%ebp),%eax
f0103a6e:	8b 40 68             	mov    0x68(%eax),%eax
f0103a71:	83 ec 0c             	sub    $0xc,%esp
f0103a74:	50                   	push   %eax
f0103a75:	e8 7e f4 ff ff       	call   f0102ef8 <to_frame_info>
f0103a7a:	83 c4 10             	add    $0x10,%esp
f0103a7d:	83 ec 0c             	sub    $0xc,%esp
f0103a80:	50                   	push   %eax
f0103a81:	e8 b3 2e 00 00       	call   f0106939 <decrement_references>
f0103a86:	83 c4 10             	add    $0x10,%esp
	}
#endif
	ptr_env->disk_env_pgdir = 0;
f0103a89:	8b 45 08             	mov    0x8(%ebp),%eax
f0103a8c:	c7 40 64 00 00 00 00 	movl   $0x0,0x64(%eax)
	ptr_env->disk_env_pgdir_PA = 0;
f0103a93:	8b 45 08             	mov    0x8(%ebp),%eax
f0103a96:	c7 40 68 00 00 00 00 	movl   $0x0,0x68(%eax)


	// remove all tables and the disk table
	if (ptr_env->disk_env_tabledir == 0)
f0103a9d:	8b 45 08             	mov    0x8(%ebp),%eax
f0103aa0:	8b 40 6c             	mov    0x6c(%eax),%eax
f0103aa3:	85 c0                	test   %eax,%eax
f0103aa5:	74 42                	je     f0103ae9 <pf_free_env+0x18b>
		return;
	__pf_remove_env_all_tables(ptr_env);
f0103aa7:	83 ec 0c             	sub    $0xc,%esp
f0103aaa:	ff 75 08             	pushl  0x8(%ebp)
f0103aad:	e8 ee 03 00 00       	call   f0103ea0 <__pf_remove_env_all_tables>
f0103ab2:	83 c4 10             	add    $0x10,%esp
	{
		kfree(ptr_env->disk_env_tabledir);
	}
#else
	{
		decrement_references(to_frame_info(ptr_env->disk_env_tabledir_PA));
f0103ab5:	8b 45 08             	mov    0x8(%ebp),%eax
f0103ab8:	8b 40 70             	mov    0x70(%eax),%eax
f0103abb:	83 ec 0c             	sub    $0xc,%esp
f0103abe:	50                   	push   %eax
f0103abf:	e8 34 f4 ff ff       	call   f0102ef8 <to_frame_info>
f0103ac4:	83 c4 10             	add    $0x10,%esp
f0103ac7:	83 ec 0c             	sub    $0xc,%esp
f0103aca:	50                   	push   %eax
f0103acb:	e8 69 2e 00 00       	call   f0106939 <decrement_references>
f0103ad0:	83 c4 10             	add    $0x10,%esp
	}
#endif
	ptr_env->disk_env_tabledir = 0;
f0103ad3:	8b 45 08             	mov    0x8(%ebp),%eax
f0103ad6:	c7 40 6c 00 00 00 00 	movl   $0x0,0x6c(%eax)
	ptr_env->disk_env_tabledir_PA = 0;
f0103add:	8b 45 08             	mov    0x8(%ebp),%eax
f0103ae0:	c7 40 70 00 00 00 00 	movl   $0x0,0x70(%eax)
f0103ae7:	eb 01                	jmp    f0103aea <pf_free_env+0x18c>
	ptr_env->disk_env_pgdir_PA = 0;


	// remove all tables and the disk table
	if (ptr_env->disk_env_tabledir == 0)
		return;
f0103ae9:	90                   	nop
	}
#endif
	ptr_env->disk_env_tabledir = 0;
	ptr_env->disk_env_tabledir_PA = 0;

}
f0103aea:	c9                   	leave  
f0103aeb:	c3                   	ret    

f0103aec <get_disk_page_directory>:


int get_disk_page_directory(struct Env* ptr_env, uint32** ptr_disk_page_directory)
{
f0103aec:	55                   	push   %ebp
f0103aed:	89 e5                	mov    %esp,%ebp
f0103aef:	83 ec 18             	sub    $0x18,%esp
	*ptr_disk_page_directory = ptr_env->disk_env_pgdir;
f0103af2:	8b 45 08             	mov    0x8(%ebp),%eax
f0103af5:	8b 50 64             	mov    0x64(%eax),%edx
f0103af8:	8b 45 0c             	mov    0xc(%ebp),%eax
f0103afb:	89 10                	mov    %edx,(%eax)
	if(*ptr_disk_page_directory == 0)
f0103afd:	8b 45 0c             	mov    0xc(%ebp),%eax
f0103b00:	8b 00                	mov    (%eax),%eax
f0103b02:	85 c0                	test   %eax,%eax
f0103b04:	0f 85 aa 00 00 00    	jne    f0103bb4 <get_disk_page_directory+0xc8>
			ptr_env->disk_env_pgdir_PA = kheap_physical_address((unsigned int)*ptr_disk_page_directory);
		}
#else
		{
			int r;
			struct FrameInfo *p = NULL;
f0103b0a:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)

			if ((r = allocate_frame(&p)) < 0)
f0103b11:	83 ec 0c             	sub    $0xc,%esp
f0103b14:	8d 45 e8             	lea    -0x18(%ebp),%eax
f0103b17:	50                   	push   %eax
f0103b18:	e8 8d 2c 00 00       	call   f01067aa <allocate_frame>
f0103b1d:	83 c4 10             	add    $0x10,%esp
f0103b20:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0103b23:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0103b27:	79 08                	jns    f0103b31 <get_disk_page_directory+0x45>
				return r;
f0103b29:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0103b2c:	e9 88 00 00 00       	jmp    f0103bb9 <get_disk_page_directory+0xcd>
			p->references = 1;
f0103b31:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0103b34:	66 c7 40 08 01 00    	movw   $0x1,0x8(%eax)

			//[4] initialize the new environment by the virtual address of the page directory
			// Hint: use "initialize_environment" function
			*ptr_disk_page_directory = STATIC_KERNEL_VIRTUAL_ADDRESS(to_physical_address(p));
f0103b3a:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0103b3d:	83 ec 0c             	sub    $0xc,%esp
f0103b40:	50                   	push   %eax
f0103b41:	e8 9f f3 ff ff       	call   f0102ee5 <to_physical_address>
f0103b46:	83 c4 10             	add    $0x10,%esp
f0103b49:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0103b4c:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0103b4f:	c1 e8 0c             	shr    $0xc,%eax
f0103b52:	89 45 ec             	mov    %eax,-0x14(%ebp)
f0103b55:	a1 50 0e 6c f0       	mov    0xf06c0e50,%eax
f0103b5a:	39 45 ec             	cmp    %eax,-0x14(%ebp)
f0103b5d:	72 17                	jb     f0103b76 <get_disk_page_directory+0x8a>
f0103b5f:	ff 75 f0             	pushl  -0x10(%ebp)
f0103b62:	68 3c 4c 13 f0       	push   $0xf0134c3c
f0103b67:	68 ee 01 00 00       	push   $0x1ee
f0103b6c:	68 d9 4b 13 f0       	push   $0xf0134bd9
f0103b71:	e8 30 c6 ff ff       	call   f01001a6 <_panic>
f0103b76:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0103b79:	2d 00 00 00 10       	sub    $0x10000000,%eax
f0103b7e:	89 c2                	mov    %eax,%edx
f0103b80:	8b 45 0c             	mov    0xc(%ebp),%eax
f0103b83:	89 10                	mov    %edx,(%eax)
			ptr_env->disk_env_pgdir_PA = to_physical_address(p);
f0103b85:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0103b88:	83 ec 0c             	sub    $0xc,%esp
f0103b8b:	50                   	push   %eax
f0103b8c:	e8 54 f3 ff ff       	call   f0102ee5 <to_physical_address>
f0103b91:	83 c4 10             	add    $0x10,%esp
f0103b94:	89 c2                	mov    %eax,%edx
f0103b96:	8b 45 08             	mov    0x8(%ebp),%eax
f0103b99:	89 50 68             	mov    %edx,0x68(%eax)
		}
#endif
		memset(*ptr_disk_page_directory , 0, PAGE_SIZE);
f0103b9c:	8b 45 0c             	mov    0xc(%ebp),%eax
f0103b9f:	8b 00                	mov    (%eax),%eax
f0103ba1:	83 ec 04             	sub    $0x4,%esp
f0103ba4:	68 00 10 00 00       	push   $0x1000
f0103ba9:	6a 00                	push   $0x0
f0103bab:	50                   	push   %eax
f0103bac:	e8 68 cd 02 00       	call   f0130919 <memset>
f0103bb1:	83 c4 10             	add    $0x10,%esp

		//	LOG_STATMENT(cprintf(">>>>>>>>>>>>>> Disk directory created at %x", *ptr_disk_page_directory));
	}
	return 0;
f0103bb4:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0103bb9:	c9                   	leave  
f0103bba:	c3                   	ret    

f0103bbb <pf_calculate_allocated_pages>:

int pf_calculate_allocated_pages(struct Env* ptr_env)
{
f0103bbb:	55                   	push   %ebp
f0103bbc:	89 e5                	mov    %esp,%ebp
f0103bbe:	83 ec 28             	sub    $0x28,%esp
	uint32 *pt;
	uint32 pdIndex;
	uint32 pa;
	uint32 counter=0;
f0103bc1:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)

	for (pdIndex = 0; pdIndex < PDX(USER_TOP) ; pdIndex++)
f0103bc8:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0103bcf:	e9 a6 00 00 00       	jmp    f0103c7a <pf_calculate_allocated_pages+0xbf>
	{
		// only look at mapped page tables
		if (!(ptr_env->disk_env_pgdir[pdIndex] & PERM_PRESENT))
f0103bd4:	8b 45 08             	mov    0x8(%ebp),%eax
f0103bd7:	8b 40 64             	mov    0x64(%eax),%eax
f0103bda:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0103bdd:	c1 e2 02             	shl    $0x2,%edx
f0103be0:	01 d0                	add    %edx,%eax
f0103be2:	8b 00                	mov    (%eax),%eax
f0103be4:	83 e0 01             	and    $0x1,%eax
f0103be7:	85 c0                	test   %eax,%eax
f0103be9:	0f 84 87 00 00 00    	je     f0103c76 <pf_calculate_allocated_pages+0xbb>
			continue;

		// find the pa and va of the page table
		pa = EXTRACT_ADDRESS(ptr_env->disk_env_pgdir[pdIndex]);
f0103bef:	8b 45 08             	mov    0x8(%ebp),%eax
f0103bf2:	8b 40 64             	mov    0x64(%eax),%eax
f0103bf5:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0103bf8:	c1 e2 02             	shl    $0x2,%edx
f0103bfb:	01 d0                	add    %edx,%eax
f0103bfd:	8b 00                	mov    (%eax),%eax
f0103bff:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0103c04:	89 45 e8             	mov    %eax,-0x18(%ebp)
		{
			pt = (uint32*) kheap_virtual_address(pa);
		}
#else
		{
			pt = (uint32*) STATIC_KERNEL_VIRTUAL_ADDRESS(pa);
f0103c07:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0103c0a:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f0103c0d:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0103c10:	c1 e8 0c             	shr    $0xc,%eax
f0103c13:	89 45 e0             	mov    %eax,-0x20(%ebp)
f0103c16:	a1 50 0e 6c f0       	mov    0xf06c0e50,%eax
f0103c1b:	39 45 e0             	cmp    %eax,-0x20(%ebp)
f0103c1e:	72 17                	jb     f0103c37 <pf_calculate_allocated_pages+0x7c>
f0103c20:	ff 75 e4             	pushl  -0x1c(%ebp)
f0103c23:	68 3c 4c 13 f0       	push   $0xf0134c3c
f0103c28:	68 0e 02 00 00       	push   $0x20e
f0103c2d:	68 d9 4b 13 f0       	push   $0xf0134bd9
f0103c32:	e8 6f c5 ff ff       	call   f01001a6 <_panic>
f0103c37:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0103c3a:	2d 00 00 00 10       	sub    $0x10000000,%eax
f0103c3f:	89 45 dc             	mov    %eax,-0x24(%ebp)
		}
#endif

		// unmap all PTEs in this page table
		uint32 ptIndex;
		for (ptIndex = 0; ptIndex < 1024; ptIndex++)
f0103c42:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f0103c49:	eb 20                	jmp    f0103c6b <pf_calculate_allocated_pages+0xb0>
		{
			// remove the disk page from disk page table
			uint32 dfn=pt[ptIndex];
f0103c4b:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0103c4e:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0103c55:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0103c58:	01 d0                	add    %edx,%eax
f0103c5a:	8b 00                	mov    (%eax),%eax
f0103c5c:	89 45 d8             	mov    %eax,-0x28(%ebp)
			if(dfn != 0)
f0103c5f:	83 7d d8 00          	cmpl   $0x0,-0x28(%ebp)
f0103c63:	74 03                	je     f0103c68 <pf_calculate_allocated_pages+0xad>
				counter ++;
f0103c65:	ff 45 f0             	incl   -0x10(%ebp)
		}
#endif

		// unmap all PTEs in this page table
		uint32 ptIndex;
		for (ptIndex = 0; ptIndex < 1024; ptIndex++)
f0103c68:	ff 45 ec             	incl   -0x14(%ebp)
f0103c6b:	81 7d ec ff 03 00 00 	cmpl   $0x3ff,-0x14(%ebp)
f0103c72:	76 d7                	jbe    f0103c4b <pf_calculate_allocated_pages+0x90>
f0103c74:	eb 01                	jmp    f0103c77 <pf_calculate_allocated_pages+0xbc>

	for (pdIndex = 0; pdIndex < PDX(USER_TOP) ; pdIndex++)
	{
		// only look at mapped page tables
		if (!(ptr_env->disk_env_pgdir[pdIndex] & PERM_PRESENT))
			continue;
f0103c76:	90                   	nop
	uint32 *pt;
	uint32 pdIndex;
	uint32 pa;
	uint32 counter=0;

	for (pdIndex = 0; pdIndex < PDX(USER_TOP) ; pdIndex++)
f0103c77:	ff 45 f4             	incl   -0xc(%ebp)
f0103c7a:	81 7d f4 ba 03 00 00 	cmpl   $0x3ba,-0xc(%ebp)
f0103c81:	0f 86 4d ff ff ff    	jbe    f0103bd4 <pf_calculate_allocated_pages+0x19>
			if(dfn != 0)
				counter ++;
		}
	}

	return counter;
f0103c87:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
f0103c8a:	c9                   	leave  
f0103c8b:	c3                   	ret    

f0103c8c <pf_calculate_free_frames>:

//2016:
//calculate the disk free frames from the disk free frame list
int pf_calculate_free_frames()
{
f0103c8c:	55                   	push   %ebp
f0103c8d:	89 e5                	mov    %esp,%ebp
f0103c8f:	83 ec 10             	sub    $0x10,%esp
	struct FrameInfo *ptr;
	uint32 totalFreeDiskFrames = 0 ;
f0103c92:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)

	LIST_FOREACH(ptr, &disk_free_frame_list)
f0103c99:	a1 f4 0e 6c f0       	mov    0xf06c0ef4,%eax
f0103c9e:	89 45 fc             	mov    %eax,-0x4(%ebp)
f0103ca1:	eb 0b                	jmp    f0103cae <pf_calculate_free_frames+0x22>
	{
		totalFreeDiskFrames++ ;
f0103ca3:	ff 45 f8             	incl   -0x8(%ebp)
int pf_calculate_free_frames()
{
	struct FrameInfo *ptr;
	uint32 totalFreeDiskFrames = 0 ;

	LIST_FOREACH(ptr, &disk_free_frame_list)
f0103ca6:	a1 fc 0e 6c f0       	mov    0xf06c0efc,%eax
f0103cab:	89 45 fc             	mov    %eax,-0x4(%ebp)
f0103cae:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
f0103cb2:	74 07                	je     f0103cbb <pf_calculate_free_frames+0x2f>
f0103cb4:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0103cb7:	8b 00                	mov    (%eax),%eax
f0103cb9:	eb 05                	jmp    f0103cc0 <pf_calculate_free_frames+0x34>
f0103cbb:	b8 00 00 00 00       	mov    $0x0,%eax
f0103cc0:	a3 fc 0e 6c f0       	mov    %eax,0xf06c0efc
f0103cc5:	a1 fc 0e 6c f0       	mov    0xf06c0efc,%eax
f0103cca:	85 c0                	test   %eax,%eax
f0103ccc:	75 d5                	jne    f0103ca3 <pf_calculate_free_frames+0x17>
f0103cce:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
f0103cd2:	75 cf                	jne    f0103ca3 <pf_calculate_free_frames+0x17>
	{
		totalFreeDiskFrames++ ;
	}
	return totalFreeDiskFrames;
f0103cd4:	8b 45 f8             	mov    -0x8(%ebp),%eax
}
f0103cd7:	c9                   	leave  
f0103cd8:	c3                   	ret    

f0103cd9 <get_disk_table_directory>:



/*========================== TABLE FILE MANAGMENT ==============================*/
int get_disk_table_directory(struct Env* ptr_env, uint32** ptr_disk_table_directory)
{
f0103cd9:	55                   	push   %ebp
f0103cda:	89 e5                	mov    %esp,%ebp
f0103cdc:	83 ec 18             	sub    $0x18,%esp
	*ptr_disk_table_directory = ptr_env->disk_env_tabledir;
f0103cdf:	8b 45 08             	mov    0x8(%ebp),%eax
f0103ce2:	8b 50 6c             	mov    0x6c(%eax),%edx
f0103ce5:	8b 45 0c             	mov    0xc(%ebp),%eax
f0103ce8:	89 10                	mov    %edx,(%eax)
	if(*ptr_disk_table_directory == 0)
f0103cea:	8b 45 0c             	mov    0xc(%ebp),%eax
f0103ced:	8b 00                	mov    (%eax),%eax
f0103cef:	85 c0                	test   %eax,%eax
f0103cf1:	0f 85 aa 00 00 00    	jne    f0103da1 <get_disk_table_directory+0xc8>
			ptr_env->disk_env_tabledir_PA = kheap_physical_address((uint32)*ptr_disk_table_directory);
		}
#else
		{
			int r;
			struct FrameInfo *p = NULL;
f0103cf7:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)

			if ((r = allocate_frame(&p)) < 0)
f0103cfe:	83 ec 0c             	sub    $0xc,%esp
f0103d01:	8d 45 e8             	lea    -0x18(%ebp),%eax
f0103d04:	50                   	push   %eax
f0103d05:	e8 a0 2a 00 00       	call   f01067aa <allocate_frame>
f0103d0a:	83 c4 10             	add    $0x10,%esp
f0103d0d:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0103d10:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0103d14:	79 08                	jns    f0103d1e <get_disk_table_directory+0x45>
				return r;
f0103d16:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0103d19:	e9 88 00 00 00       	jmp    f0103da6 <get_disk_table_directory+0xcd>
			p->references = 1;
f0103d1e:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0103d21:	66 c7 40 08 01 00    	movw   $0x1,0x8(%eax)

			//[4] initialize the new environment by the virtual address of the page directory
			// Hint: use "initialize_environment" function
			*ptr_disk_table_directory = STATIC_KERNEL_VIRTUAL_ADDRESS(to_physical_address(p));
f0103d27:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0103d2a:	83 ec 0c             	sub    $0xc,%esp
f0103d2d:	50                   	push   %eax
f0103d2e:	e8 b2 f1 ff ff       	call   f0102ee5 <to_physical_address>
f0103d33:	83 c4 10             	add    $0x10,%esp
f0103d36:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0103d39:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0103d3c:	c1 e8 0c             	shr    $0xc,%eax
f0103d3f:	89 45 ec             	mov    %eax,-0x14(%ebp)
f0103d42:	a1 50 0e 6c f0       	mov    0xf06c0e50,%eax
f0103d47:	39 45 ec             	cmp    %eax,-0x14(%ebp)
f0103d4a:	72 17                	jb     f0103d63 <get_disk_table_directory+0x8a>
f0103d4c:	ff 75 f0             	pushl  -0x10(%ebp)
f0103d4f:	68 3c 4c 13 f0       	push   $0xf0134c3c
f0103d54:	68 4c 02 00 00       	push   $0x24c
f0103d59:	68 d9 4b 13 f0       	push   $0xf0134bd9
f0103d5e:	e8 43 c4 ff ff       	call   f01001a6 <_panic>
f0103d63:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0103d66:	2d 00 00 00 10       	sub    $0x10000000,%eax
f0103d6b:	89 c2                	mov    %eax,%edx
f0103d6d:	8b 45 0c             	mov    0xc(%ebp),%eax
f0103d70:	89 10                	mov    %edx,(%eax)
			ptr_env->disk_env_tabledir_PA = to_physical_address(p);
f0103d72:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0103d75:	83 ec 0c             	sub    $0xc,%esp
f0103d78:	50                   	push   %eax
f0103d79:	e8 67 f1 ff ff       	call   f0102ee5 <to_physical_address>
f0103d7e:	83 c4 10             	add    $0x10,%esp
f0103d81:	89 c2                	mov    %eax,%edx
f0103d83:	8b 45 08             	mov    0x8(%ebp),%eax
f0103d86:	89 50 70             	mov    %edx,0x70(%eax)
		}
#endif
		memset(*ptr_disk_table_directory , 0, PAGE_SIZE);
f0103d89:	8b 45 0c             	mov    0xc(%ebp),%eax
f0103d8c:	8b 00                	mov    (%eax),%eax
f0103d8e:	83 ec 04             	sub    $0x4,%esp
f0103d91:	68 00 10 00 00       	push   $0x1000
f0103d96:	6a 00                	push   $0x0
f0103d98:	50                   	push   %eax
f0103d99:	e8 7b cb 02 00       	call   f0130919 <memset>
f0103d9e:	83 c4 10             	add    $0x10,%esp

		//	LOG_STATMENT(cprintf(">>>>>>>>>>>>>> Disk directory created at %x", *ptr_disk_page_directory));
	}
	return 0;
f0103da1:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0103da6:	c9                   	leave  
f0103da7:	c3                   	ret    

f0103da8 <__pf_write_env_table>:

int __pf_write_env_table( struct Env* ptr_env, uint32 virtual_address, uint32* tableKVirtualAddress)
{
f0103da8:	55                   	push   %ebp
f0103da9:	89 e5                	mov    %esp,%ebp
f0103dab:	83 ec 18             	sub    $0x18,%esp
	//LOG_STRING("========================== create_env_page");
	assert((uint32)virtual_address < KERNEL_BASE);
f0103dae:	81 7d 0c ff ff ff ef 	cmpl   $0xefffffff,0xc(%ebp)
f0103db5:	76 19                	jbe    f0103dd0 <__pf_write_env_table+0x28>
f0103db7:	68 6c 4c 13 f0       	push   $0xf0134c6c
f0103dbc:	68 92 4c 13 f0       	push   $0xf0134c92
f0103dc1:	68 5a 02 00 00       	push   $0x25a
f0103dc6:	68 d9 4b 13 f0       	push   $0xf0134bd9
f0103dcb:	e8 d6 c3 ff ff       	call   f01001a6 <_panic>

	get_disk_table_directory(ptr_env, &(ptr_env->disk_env_tabledir)) ;
f0103dd0:	8b 45 08             	mov    0x8(%ebp),%eax
f0103dd3:	83 c0 6c             	add    $0x6c,%eax
f0103dd6:	83 ec 08             	sub    $0x8,%esp
f0103dd9:	50                   	push   %eax
f0103dda:	ff 75 08             	pushl  0x8(%ebp)
f0103ddd:	e8 f7 fe ff ff       	call   f0103cd9 <get_disk_table_directory>
f0103de2:	83 c4 10             	add    $0x10,%esp

	uint32 dfn=ptr_env->disk_env_tabledir[PDX(virtual_address)];
f0103de5:	8b 45 08             	mov    0x8(%ebp),%eax
f0103de8:	8b 40 6c             	mov    0x6c(%eax),%eax
f0103deb:	8b 55 0c             	mov    0xc(%ebp),%edx
f0103dee:	c1 ea 16             	shr    $0x16,%edx
f0103df1:	c1 e2 02             	shl    $0x2,%edx
f0103df4:	01 d0                	add    %edx,%eax
f0103df6:	8b 00                	mov    (%eax),%eax
f0103df8:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if( dfn == 0)
f0103dfb:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0103dfe:	85 c0                	test   %eax,%eax
f0103e00:	75 31                	jne    f0103e33 <__pf_write_env_table+0x8b>
	{
		if( allocate_disk_frame(&dfn) == E_NO_PAGE_FILE_SPACE) return E_NO_PAGE_FILE_SPACE;
f0103e02:	83 ec 0c             	sub    $0xc,%esp
f0103e05:	8d 45 f0             	lea    -0x10(%ebp),%eax
f0103e08:	50                   	push   %eax
f0103e09:	e8 0c f3 ff ff       	call   f010311a <allocate_disk_frame>
f0103e0e:	83 c4 10             	add    $0x10,%esp
f0103e11:	83 f8 f8             	cmp    $0xfffffff8,%eax
f0103e14:	75 07                	jne    f0103e1d <__pf_write_env_table+0x75>
f0103e16:	b8 f8 ff ff ff       	mov    $0xfffffff8,%eax
f0103e1b:	eb 2e                	jmp    f0103e4b <__pf_write_env_table+0xa3>
		ptr_env->disk_env_tabledir[PDX(virtual_address)] = dfn;
f0103e1d:	8b 45 08             	mov    0x8(%ebp),%eax
f0103e20:	8b 40 6c             	mov    0x6c(%eax),%eax
f0103e23:	8b 55 0c             	mov    0xc(%ebp),%edx
f0103e26:	c1 ea 16             	shr    $0x16,%edx
f0103e29:	c1 e2 02             	shl    $0x2,%edx
f0103e2c:	01 c2                	add    %eax,%edx
f0103e2e:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0103e31:	89 02                	mov    %eax,(%edx)
	//	lcr3(oldDir);

	//We already read it from the KERNEL mapping instead of the USER mapping

	//cprintf("[%s] writing table\n",ptr_env->prog_name);
	int ret = write_disk_page(dfn, (void*)tableKVirtualAddress);
f0103e33:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0103e36:	83 ec 08             	sub    $0x8,%esp
f0103e39:	ff 75 10             	pushl  0x10(%ebp)
f0103e3c:	50                   	push   %eax
f0103e3d:	e8 2b f1 ff ff       	call   f0102f6d <write_disk_page>
f0103e42:	83 c4 10             	add    $0x10,%esp
f0103e45:	89 45 f4             	mov    %eax,-0xc(%ebp)
	//cprintf("[%s] finished writing table\n",ptr_env->prog_name);
	return ret;
f0103e48:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f0103e4b:	c9                   	leave  
f0103e4c:	c3                   	ret    

f0103e4d <__pf_read_env_table>:

int __pf_read_env_table(struct Env* ptr_env, uint32 virtual_address, uint32* tableKVirtualAddress)
{
f0103e4d:	55                   	push   %ebp
f0103e4e:	89 e5                	mov    %esp,%ebp
f0103e50:	83 ec 18             	sub    $0x18,%esp
	if( ptr_env->disk_env_tabledir == 0) return E_TABLE_NOT_EXIST_IN_PF;
f0103e53:	8b 45 08             	mov    0x8(%ebp),%eax
f0103e56:	8b 40 6c             	mov    0x6c(%eax),%eax
f0103e59:	85 c0                	test   %eax,%eax
f0103e5b:	75 07                	jne    f0103e64 <__pf_read_env_table+0x17>
f0103e5d:	b8 f6 ff ff ff       	mov    $0xfffffff6,%eax
f0103e62:	eb 3a                	jmp    f0103e9e <__pf_read_env_table+0x51>

	uint32 dfn=ptr_env->disk_env_tabledir[PDX(virtual_address)];
f0103e64:	8b 45 08             	mov    0x8(%ebp),%eax
f0103e67:	8b 40 6c             	mov    0x6c(%eax),%eax
f0103e6a:	8b 55 0c             	mov    0xc(%ebp),%edx
f0103e6d:	c1 ea 16             	shr    $0x16,%edx
f0103e70:	c1 e2 02             	shl    $0x2,%edx
f0103e73:	01 d0                	add    %edx,%eax
f0103e75:	8b 00                	mov    (%eax),%eax
f0103e77:	89 45 f4             	mov    %eax,-0xc(%ebp)

	if( dfn == 0) return E_TABLE_NOT_EXIST_IN_PF;
f0103e7a:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0103e7e:	75 07                	jne    f0103e87 <__pf_read_env_table+0x3a>
f0103e80:	b8 f6 ff ff ff       	mov    $0xfffffff6,%eax
f0103e85:	eb 17                	jmp    f0103e9e <__pf_read_env_table+0x51>

	int disk_read_error = read_disk_page(dfn, tableKVirtualAddress);
f0103e87:	83 ec 08             	sub    $0x8,%esp
f0103e8a:	ff 75 10             	pushl  0x10(%ebp)
f0103e8d:	ff 75 f4             	pushl  -0xc(%ebp)
f0103e90:	e8 a9 f0 ff ff       	call   f0102f3e <read_disk_page>
f0103e95:	83 c4 10             	add    $0x10,%esp
f0103e98:	89 45 f0             	mov    %eax,-0x10(%ebp)

	return disk_read_error;
f0103e9b:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
f0103e9e:	c9                   	leave  
f0103e9f:	c3                   	ret    

f0103ea0 <__pf_remove_env_all_tables>:

void __pf_remove_env_all_tables(struct Env* ptr_env)
{
f0103ea0:	55                   	push   %ebp
f0103ea1:	89 e5                	mov    %esp,%ebp
f0103ea3:	83 ec 18             	sub    $0x18,%esp
	//LOG_STRING("pf_remove_env_page: 0");

	//LOG_STATMENT(cprintf("ptr_env = %x",ptr_env));
	if( ptr_env->disk_env_tabledir == 0) return;
f0103ea6:	8b 45 08             	mov    0x8(%ebp),%eax
f0103ea9:	8b 40 6c             	mov    0x6c(%eax),%eax
f0103eac:	85 c0                	test   %eax,%eax
f0103eae:	74 4c                	je     f0103efc <__pf_remove_env_all_tables+0x5c>

	uint32 pdeno;
	for (pdeno = 0; pdeno < PDX(USER_TOP) ; pdeno++)
f0103eb0:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0103eb7:	eb 38                	jmp    f0103ef1 <__pf_remove_env_all_tables+0x51>
	{
		uint32 dfn=ptr_env->disk_env_tabledir[pdeno];
f0103eb9:	8b 45 08             	mov    0x8(%ebp),%eax
f0103ebc:	8b 40 6c             	mov    0x6c(%eax),%eax
f0103ebf:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0103ec2:	c1 e2 02             	shl    $0x2,%edx
f0103ec5:	01 d0                	add    %edx,%eax
f0103ec7:	8b 00                	mov    (%eax),%eax
f0103ec9:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_env->disk_env_tabledir[pdeno] = 0;
f0103ecc:	8b 45 08             	mov    0x8(%ebp),%eax
f0103ecf:	8b 40 6c             	mov    0x6c(%eax),%eax
f0103ed2:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0103ed5:	c1 e2 02             	shl    $0x2,%edx
f0103ed8:	01 d0                	add    %edx,%eax
f0103eda:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
		free_disk_frame(dfn);
f0103ee0:	83 ec 0c             	sub    $0xc,%esp
f0103ee3:	ff 75 f0             	pushl  -0x10(%ebp)
f0103ee6:	e8 f6 f2 ff ff       	call   f01031e1 <free_disk_frame>
f0103eeb:	83 c4 10             	add    $0x10,%esp

	//LOG_STATMENT(cprintf("ptr_env = %x",ptr_env));
	if( ptr_env->disk_env_tabledir == 0) return;

	uint32 pdeno;
	for (pdeno = 0; pdeno < PDX(USER_TOP) ; pdeno++)
f0103eee:	ff 45 f4             	incl   -0xc(%ebp)
f0103ef1:	81 7d f4 ba 03 00 00 	cmpl   $0x3ba,-0xc(%ebp)
f0103ef8:	76 bf                	jbe    f0103eb9 <__pf_remove_env_all_tables+0x19>
f0103efa:	eb 01                	jmp    f0103efd <__pf_remove_env_all_tables+0x5d>
void __pf_remove_env_all_tables(struct Env* ptr_env)
{
	//LOG_STRING("pf_remove_env_page: 0");

	//LOG_STATMENT(cprintf("ptr_env = %x",ptr_env));
	if( ptr_env->disk_env_tabledir == 0) return;
f0103efc:	90                   	nop
		uint32 dfn=ptr_env->disk_env_tabledir[pdeno];
		ptr_env->disk_env_tabledir[pdeno] = 0;
		free_disk_frame(dfn);
	}
	//LOG_STRING("pf_remove_env_page: 3");
}
f0103efd:	c9                   	leave  
f0103efe:	c3                   	ret    

f0103eff <__pf_remove_env_table>:

void __pf_remove_env_table(struct Env* ptr_env, uint32 virtual_address)
{
f0103eff:	55                   	push   %ebp
f0103f00:	89 e5                	mov    %esp,%ebp
f0103f02:	83 ec 18             	sub    $0x18,%esp
	if (virtual_address == 0)
f0103f05:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
f0103f09:	75 10                	jne    f0103f1b <__pf_remove_env_table+0x1c>
		cprintf("REMOVING table 0 from page file\n");
f0103f0b:	83 ec 0c             	sub    $0xc,%esp
f0103f0e:	68 9c 4d 13 f0       	push   $0xf0134d9c
f0103f13:	e8 15 cd ff ff       	call   f0100c2d <cprintf>
f0103f18:	83 c4 10             	add    $0x10,%esp
	if( ptr_env->disk_env_tabledir == 0) return;
f0103f1b:	8b 45 08             	mov    0x8(%ebp),%eax
f0103f1e:	8b 40 6c             	mov    0x6c(%eax),%eax
f0103f21:	85 c0                	test   %eax,%eax
f0103f23:	74 3d                	je     f0103f62 <__pf_remove_env_table+0x63>

	uint32 dfn=ptr_env->disk_env_tabledir[PDX(virtual_address)];
f0103f25:	8b 45 08             	mov    0x8(%ebp),%eax
f0103f28:	8b 40 6c             	mov    0x6c(%eax),%eax
f0103f2b:	8b 55 0c             	mov    0xc(%ebp),%edx
f0103f2e:	c1 ea 16             	shr    $0x16,%edx
f0103f31:	c1 e2 02             	shl    $0x2,%edx
f0103f34:	01 d0                	add    %edx,%eax
f0103f36:	8b 00                	mov    (%eax),%eax
f0103f38:	89 45 f4             	mov    %eax,-0xc(%ebp)
	ptr_env->disk_env_tabledir[PDX(virtual_address)] = 0;
f0103f3b:	8b 45 08             	mov    0x8(%ebp),%eax
f0103f3e:	8b 40 6c             	mov    0x6c(%eax),%eax
f0103f41:	8b 55 0c             	mov    0xc(%ebp),%edx
f0103f44:	c1 ea 16             	shr    $0x16,%edx
f0103f47:	c1 e2 02             	shl    $0x2,%edx
f0103f4a:	01 d0                	add    %edx,%eax
f0103f4c:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	free_disk_frame(dfn);
f0103f52:	83 ec 0c             	sub    $0xc,%esp
f0103f55:	ff 75 f4             	pushl  -0xc(%ebp)
f0103f58:	e8 84 f2 ff ff       	call   f01031e1 <free_disk_frame>
f0103f5d:	83 c4 10             	add    $0x10,%esp
f0103f60:	eb 01                	jmp    f0103f63 <__pf_remove_env_table+0x64>

void __pf_remove_env_table(struct Env* ptr_env, uint32 virtual_address)
{
	if (virtual_address == 0)
		cprintf("REMOVING table 0 from page file\n");
	if( ptr_env->disk_env_tabledir == 0) return;
f0103f62:	90                   	nop

	uint32 dfn=ptr_env->disk_env_tabledir[PDX(virtual_address)];
	ptr_env->disk_env_tabledir[PDX(virtual_address)] = 0;
	free_disk_frame(dfn);
}
f0103f63:	c9                   	leave  
f0103f64:	c3                   	ret    

f0103f65 <test_disk_01>:
///========================== END OF TABLE FILE MANAGMENT =============================


void test_disk_01(void *virtual_address)
{
f0103f65:	55                   	push   %ebp
f0103f66:	89 e5                	mov    %esp,%ebp
f0103f68:	83 ec 18             	sub    $0x18,%esp
	LOG_STATMENT(cprintf("doing tests for ide_write()\n"));
	int i=90157;
f0103f6b:	c7 45 f4 2d 60 01 00 	movl   $0x1602d,-0xc(%ebp)
	for(;i<140000;i += 500)
f0103f72:	eb 1f                	jmp    f0103f93 <test_disk_01+0x2e>
	{
		if(ide_write(i,(void *)virtual_address,8) != 0)
f0103f74:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0103f77:	83 ec 04             	sub    $0x4,%esp
f0103f7a:	6a 08                	push   $0x8
f0103f7c:	ff 75 08             	pushl  0x8(%ebp)
f0103f7f:	50                   	push   %eax
f0103f80:	e8 39 d0 02 00       	call   f0130fbe <ide_write>
f0103f85:	83 c4 10             	add    $0x10,%esp
f0103f88:	85 c0                	test   %eax,%eax
f0103f8a:	75 12                	jne    f0103f9e <test_disk_01+0x39>

void test_disk_01(void *virtual_address)
{
	LOG_STATMENT(cprintf("doing tests for ide_write()\n"));
	int i=90157;
	for(;i<140000;i += 500)
f0103f8c:	81 45 f4 f4 01 00 00 	addl   $0x1f4,-0xc(%ebp)
f0103f93:	81 7d f4 df 22 02 00 	cmpl   $0x222df,-0xc(%ebp)
f0103f9a:	7e d8                	jle    f0103f74 <test_disk_01+0xf>
		{
			//LOG_STATMENT(cprintf("written at sector %d\n",i););
		}
	}
	LOG_STATMENT(cprintf("ide_write() test done\n"););
}
f0103f9c:	eb 01                	jmp    f0103f9f <test_disk_01+0x3a>
	for(;i<140000;i += 500)
	{
		if(ide_write(i,(void *)virtual_address,8) != 0)
		{
			LOG_STATMENT(cprintf("FAILURE to write sector %d\n",i););
			break;
f0103f9e:	90                   	nop
		{
			//LOG_STATMENT(cprintf("written at sector %d\n",i););
		}
	}
	LOG_STATMENT(cprintf("ide_write() test done\n"););
}
f0103f9f:	90                   	nop
f0103fa0:	c9                   	leave  
f0103fa1:	c3                   	ret    

f0103fa2 <mc146818_read>:
#include <kern/cpu/picirq.h>


unsigned
mc146818_read(unsigned reg)
{
f0103fa2:	55                   	push   %ebp
f0103fa3:	89 e5                	mov    %esp,%ebp
f0103fa5:	83 ec 10             	sub    $0x10,%esp
	outb(IO_RTC, reg);
f0103fa8:	8b 45 08             	mov    0x8(%ebp),%eax
f0103fab:	0f b6 c0             	movzbl %al,%eax
f0103fae:	c7 45 fc 70 00 00 00 	movl   $0x70,-0x4(%ebp)
f0103fb5:	88 45 f6             	mov    %al,-0xa(%ebp)
}

static __inline void
outb(int port, uint8 data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
f0103fb8:	8a 45 f6             	mov    -0xa(%ebp),%al
f0103fbb:	8b 55 fc             	mov    -0x4(%ebp),%edx
f0103fbe:	ee                   	out    %al,(%dx)
f0103fbf:	c7 45 f8 71 00 00 00 	movl   $0x71,-0x8(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f0103fc6:	8b 45 f8             	mov    -0x8(%ebp),%eax
f0103fc9:	89 c2                	mov    %eax,%edx
f0103fcb:	ec                   	in     (%dx),%al
f0103fcc:	88 45 f7             	mov    %al,-0x9(%ebp)
	return data;
f0103fcf:	8a 45 f7             	mov    -0x9(%ebp),%al
	return inb(IO_RTC+1);
f0103fd2:	0f b6 c0             	movzbl %al,%eax
}
f0103fd5:	c9                   	leave  
f0103fd6:	c3                   	ret    

f0103fd7 <mc146818_write>:

void
mc146818_write(unsigned reg, unsigned datum)
{
f0103fd7:	55                   	push   %ebp
f0103fd8:	89 e5                	mov    %esp,%ebp
f0103fda:	83 ec 10             	sub    $0x10,%esp
	outb(IO_RTC, reg);
f0103fdd:	8b 45 08             	mov    0x8(%ebp),%eax
f0103fe0:	0f b6 c0             	movzbl %al,%eax
f0103fe3:	c7 45 fc 70 00 00 00 	movl   $0x70,-0x4(%ebp)
f0103fea:	88 45 f6             	mov    %al,-0xa(%ebp)
}

static __inline void
outb(int port, uint8 data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
f0103fed:	8a 45 f6             	mov    -0xa(%ebp),%al
f0103ff0:	8b 55 fc             	mov    -0x4(%ebp),%edx
f0103ff3:	ee                   	out    %al,(%dx)
	outb(IO_RTC+1, datum);
f0103ff4:	8b 45 0c             	mov    0xc(%ebp),%eax
f0103ff7:	0f b6 c0             	movzbl %al,%eax
f0103ffa:	c7 45 f8 71 00 00 00 	movl   $0x71,-0x8(%ebp)
f0104001:	88 45 f7             	mov    %al,-0x9(%ebp)
f0104004:	8a 45 f7             	mov    -0x9(%ebp),%al
f0104007:	8b 55 f8             	mov    -0x8(%ebp),%edx
f010400a:	ee                   	out    %al,(%dx)
}
f010400b:	90                   	nop
f010400c:	c9                   	leave  
f010400d:	c3                   	ret    

f010400e <kclock_start>:


void
kclock_start(uint8 quantum_in_ms)
{
f010400e:	55                   	push   %ebp
f010400f:	89 e5                	mov    %esp,%ebp
f0104011:	53                   	push   %ebx
f0104012:	83 ec 24             	sub    $0x24,%esp
f0104015:	8b 45 08             	mov    0x8(%ebp),%eax
f0104018:	88 45 e4             	mov    %al,-0x1c(%ebp)
f010401b:	c7 45 f0 43 00 00 00 	movl   $0x43,-0x10(%ebp)
f0104022:	c6 45 ef 34          	movb   $0x34,-0x11(%ebp)
f0104026:	8a 45 ef             	mov    -0x11(%ebp),%al
f0104029:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010402c:	ee                   	out    %al,(%dx)
	outb(TIMER_MODE, TIMER_SEL0 | TIMER_RATEGEN | TIMER_16BIT);

	//2017
//	outb(TIMER_CNTR0, TIMER_DIV((1000/CLOCK_INTERVAL_IN_MS)) % 256);
//	outb(TIMER_CNTR0, TIMER_DIV((1000/CLOCK_INTERVAL_IN_MS)) / 256);
	if (IS_VALID_QUANTUM(quantum_in_ms))
f010402d:	80 7d e4 35          	cmpb   $0x35,-0x1c(%ebp)
f0104031:	77 48                	ja     f010407b <kclock_start+0x6d>
f0104033:	c7 45 f4 43 00 00 00 	movl   $0x43,-0xc(%ebp)
f010403a:	c6 45 ee 34          	movb   $0x34,-0x12(%ebp)
f010403e:	8a 45 ee             	mov    -0x12(%ebp),%al
f0104041:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0104044:	ee                   	out    %al,(%dx)
	{
		outb(TIMER_MODE, TIMER_SEL0 | TIMER_RATEGEN | TIMER_16BIT);
		kclock_write_cnt0_LSB_first(TIMER_DIV((1000/quantum_in_ms))) ;
f0104045:	0f b6 5d e4          	movzbl -0x1c(%ebp),%ebx
f0104049:	b8 f4 01 00 00       	mov    $0x1f4,%eax
f010404e:	99                   	cltd   
f010404f:	f7 fb                	idiv   %ebx
f0104051:	8d 88 de 34 12 00    	lea    0x1234de(%eax),%ecx
f0104057:	0f b6 5d e4          	movzbl -0x1c(%ebp),%ebx
f010405b:	b8 e8 03 00 00       	mov    $0x3e8,%eax
f0104060:	99                   	cltd   
f0104061:	f7 fb                	idiv   %ebx
f0104063:	89 c3                	mov    %eax,%ebx
f0104065:	89 c8                	mov    %ecx,%eax
f0104067:	99                   	cltd   
f0104068:	f7 fb                	idiv   %ebx
f010406a:	0f b7 c0             	movzwl %ax,%eax
f010406d:	83 ec 0c             	sub    $0xc,%esp
f0104070:	50                   	push   %eax
f0104071:	e8 b8 01 00 00       	call   f010422e <kclock_write_cnt0_LSB_first>
f0104076:	83 c4 10             	add    $0x10,%esp
f0104079:	eb 13                	jmp    f010408e <kclock_start+0x80>
	}
	else
	{
		panic("attempt to set the CPU quantum by too large value. Quantum should be between 1 ms and %d ms", QUANTUM_LIMIT - 1);
f010407b:	6a 35                	push   $0x35
f010407d:	68 c0 4d 13 f0       	push   $0xf0134dc0
f0104082:	6a 33                	push   $0x33
f0104084:	68 1c 4e 13 f0       	push   $0xf0134e1c
f0104089:	e8 18 c1 ff ff       	call   f01001a6 <_panic>
//	cprintf("c = %d\n", c) ;

//	uint16 cnt0_after = kclock_read_cnt0() ;

	//cprintf("	Setup timer interrupts via 8259A\n");
	irq_setmask_8259A(irq_mask_8259A & ~(1<<0));
f010408e:	66 a1 b0 08 19 f0    	mov    0xf01908b0,%ax
f0104094:	0f b7 c0             	movzwl %ax,%eax
f0104097:	25 fe ff 00 00       	and    $0xfffe,%eax
f010409c:	83 ec 0c             	sub    $0xc,%esp
f010409f:	50                   	push   %eax
f01040a0:	e8 2d 1b 00 00       	call   f0105bd2 <irq_setmask_8259A>
f01040a5:	83 c4 10             	add    $0x10,%esp
	//cprintf("	unmasked timer interrupt\n");

	//cprintf("Timer STARTED: Counter0 Before Lag = %d, After lag = %d\n", cnt0_before, cnt0_after );

}
f01040a8:	90                   	nop
f01040a9:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f01040ac:	c9                   	leave  
f01040ad:	c3                   	ret    

f01040ae <kclock_stop>:

void
kclock_stop(void)
{
f01040ae:	55                   	push   %ebp
f01040af:	89 e5                	mov    %esp,%ebp
f01040b1:	83 ec 18             	sub    $0x18,%esp
f01040b4:	c7 45 f4 43 00 00 00 	movl   $0x43,-0xc(%ebp)
f01040bb:	c6 45 f3 34          	movb   $0x34,-0xd(%ebp)
f01040bf:	8a 45 f3             	mov    -0xd(%ebp),%al
f01040c2:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01040c5:	ee                   	out    %al,(%dx)
//	for (int i = 0 ; i <20; i++)
//	{
//		cnt0 = kclock_read_cnt0();
//		cprintf("STOP AFTER: cnt0 = %d\n",cnt0);
//	}
	irq_setmask_8259A(0xFFFF);
f01040c6:	83 ec 0c             	sub    $0xc,%esp
f01040c9:	68 ff ff 00 00       	push   $0xffff
f01040ce:	e8 ff 1a 00 00       	call   f0105bd2 <irq_setmask_8259A>
f01040d3:	83 c4 10             	add    $0x10,%esp
//	uint16 cnt0 = kclock_read_cnt0() ;
//	cprintf("Timer STOPPED: Counter0 Value = %x\n", cnt0 );
	//cprintf("Timer STOPPED: Status Value = %x\n", status);


}
f01040d6:	90                   	nop
f01040d7:	c9                   	leave  
f01040d8:	c3                   	ret    

f01040d9 <kclock_resume>:

void
kclock_resume(void)
{
f01040d9:	55                   	push   %ebp
f01040da:	89 e5                	mov    %esp,%ebp
f01040dc:	83 ec 18             	sub    $0x18,%esp
	uint16 cnt0 = kclock_read_cnt0() ;
f01040df:	e8 8c 01 00 00       	call   f0104270 <kclock_read_cnt0>
f01040e4:	66 89 45 f6          	mov    %ax,-0xa(%ebp)
	//2017: if the remaining time is small, then increase it a bit to avoid invoking the CLOCK INT
	//		before returning back to the environment (this cause INT inside INT!!!) el7 :)
	if (cnt0 < 20)
f01040e8:	66 83 7d f6 13       	cmpw   $0x13,-0xa(%ebp)
f01040ed:	77 06                	ja     f01040f5 <kclock_resume+0x1c>
	{
		cnt0 = 20;
f01040ef:	66 c7 45 f6 14 00    	movw   $0x14,-0xa(%ebp)
	}

	if (cnt0 % 2 == 1)
f01040f5:	66 8b 45 f6          	mov    -0xa(%ebp),%ax
f01040f9:	83 e0 01             	and    $0x1,%eax
f01040fc:	66 85 c0             	test   %ax,%ax
f01040ff:	74 09                	je     f010410a <kclock_resume+0x31>
		cnt0++;
f0104101:	66 8b 45 f6          	mov    -0xa(%ebp),%ax
f0104105:	40                   	inc    %eax
f0104106:	66 89 45 f6          	mov    %ax,-0xa(%ebp)
f010410a:	c7 45 f0 43 00 00 00 	movl   $0x43,-0x10(%ebp)
f0104111:	c6 45 ef 34          	movb   $0x34,-0x11(%ebp)
f0104115:	8a 45 ef             	mov    -0x11(%ebp),%al
f0104118:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010411b:	ee                   	out    %al,(%dx)

	outb(TIMER_MODE, TIMER_SEL0 | TIMER_RATEGEN | TIMER_16BIT);
	kclock_write_cnt0_LSB_first(cnt0) ;
f010411c:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
f0104120:	83 ec 0c             	sub    $0xc,%esp
f0104123:	50                   	push   %eax
f0104124:	e8 05 01 00 00       	call   f010422e <kclock_write_cnt0_LSB_first>
f0104129:	83 c4 10             	add    $0x10,%esp
//	uint16 cnt0_after = kclock_read_cnt0() ;
//	cprintf("Timer RESUMED: Counter0 Before Lag = %d, After lag = %d\n", cnt0_before, cnt0_after );


	//cprintf("	Setup timer interrupts via 8259A\n");
	irq_setmask_8259A(irq_mask_8259A & ~(1<<0));
f010412c:	66 a1 b0 08 19 f0    	mov    0xf01908b0,%ax
f0104132:	0f b7 c0             	movzwl %ax,%eax
f0104135:	25 fe ff 00 00       	and    $0xfffe,%eax
f010413a:	83 ec 0c             	sub    $0xc,%esp
f010413d:	50                   	push   %eax
f010413e:	e8 8f 1a 00 00       	call   f0105bd2 <irq_setmask_8259A>
f0104143:	83 c4 10             	add    $0x10,%esp
	//cprintf("	unmasked timer interrupt\n");
}
f0104146:	90                   	nop
f0104147:	c9                   	leave  
f0104148:	c3                   	ret    

f0104149 <kclock_start_counter>:


//==============

void kclock_start_counter(uint8 cnt0)
{
f0104149:	55                   	push   %ebp
f010414a:	89 e5                	mov    %esp,%ebp
f010414c:	83 ec 28             	sub    $0x28,%esp
f010414f:	8b 45 08             	mov    0x8(%ebp),%eax
f0104152:	88 45 e4             	mov    %al,-0x1c(%ebp)
f0104155:	c7 45 f4 43 00 00 00 	movl   $0x43,-0xc(%ebp)
f010415c:	c6 45 f3 34          	movb   $0x34,-0xd(%ebp)
f0104160:	8a 45 f3             	mov    -0xd(%ebp),%al
f0104163:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0104166:	ee                   	out    %al,(%dx)
	outb(TIMER_MODE, TIMER_SEL0 | TIMER_RATEGEN | TIMER_16BIT);
	kclock_write_cnt0_LSB_first(cnt0) ;
f0104167:	0f b6 45 e4          	movzbl -0x1c(%ebp),%eax
f010416b:	83 ec 0c             	sub    $0xc,%esp
f010416e:	50                   	push   %eax
f010416f:	e8 ba 00 00 00       	call   f010422e <kclock_write_cnt0_LSB_first>
f0104174:	83 c4 10             	add    $0x10,%esp
	irq_setmask_8259A(irq_mask_8259A & ~(1<<0));
f0104177:	66 a1 b0 08 19 f0    	mov    0xf01908b0,%ax
f010417d:	0f b7 c0             	movzwl %ax,%eax
f0104180:	25 fe ff 00 00       	and    $0xfffe,%eax
f0104185:	83 ec 0c             	sub    $0xc,%esp
f0104188:	50                   	push   %eax
f0104189:	e8 44 1a 00 00       	call   f0105bd2 <irq_setmask_8259A>
f010418e:	83 c4 10             	add    $0x10,%esp

}
f0104191:	90                   	nop
f0104192:	c9                   	leave  
f0104193:	c3                   	ret    

f0104194 <kclock_set_quantum>:
//2018
//Reset the CNT0 to the given quantum value without affecting the interrupt status
void kclock_set_quantum(uint8 quantum_in_ms)
{
f0104194:	55                   	push   %ebp
f0104195:	89 e5                	mov    %esp,%ebp
f0104197:	53                   	push   %ebx
f0104198:	83 ec 24             	sub    $0x24,%esp
f010419b:	8b 45 08             	mov    0x8(%ebp),%eax
f010419e:	88 45 e4             	mov    %al,-0x1c(%ebp)
	if (IS_VALID_QUANTUM(quantum_in_ms))
f01041a1:	80 7d e4 35          	cmpb   $0x35,-0x1c(%ebp)
f01041a5:	77 6c                	ja     f0104213 <kclock_set_quantum+0x7f>
	{
		int cnt = TIMER_DIV((1000/quantum_in_ms));
f01041a7:	0f b6 5d e4          	movzbl -0x1c(%ebp),%ebx
f01041ab:	b8 f4 01 00 00       	mov    $0x1f4,%eax
f01041b0:	99                   	cltd   
f01041b1:	f7 fb                	idiv   %ebx
f01041b3:	8d 88 de 34 12 00    	lea    0x1234de(%eax),%ecx
f01041b9:	0f b6 5d e4          	movzbl -0x1c(%ebp),%ebx
f01041bd:	b8 e8 03 00 00       	mov    $0x3e8,%eax
f01041c2:	99                   	cltd   
f01041c3:	f7 fb                	idiv   %ebx
f01041c5:	89 c3                	mov    %eax,%ebx
f01041c7:	89 c8                	mov    %ecx,%eax
f01041c9:	99                   	cltd   
f01041ca:	f7 fb                	idiv   %ebx
f01041cc:	89 45 f4             	mov    %eax,-0xc(%ebp)
		if (cnt%2 == 1)
f01041cf:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01041d2:	25 01 00 00 80       	and    $0x80000001,%eax
f01041d7:	85 c0                	test   %eax,%eax
f01041d9:	79 05                	jns    f01041e0 <kclock_set_quantum+0x4c>
f01041db:	48                   	dec    %eax
f01041dc:	83 c8 fe             	or     $0xfffffffe,%eax
f01041df:	40                   	inc    %eax
f01041e0:	83 f8 01             	cmp    $0x1,%eax
f01041e3:	75 03                	jne    f01041e8 <kclock_set_quantum+0x54>
			cnt++;
f01041e5:	ff 45 f4             	incl   -0xc(%ebp)
f01041e8:	c7 45 f0 43 00 00 00 	movl   $0x43,-0x10(%ebp)
f01041ef:	c6 45 ef 34          	movb   $0x34,-0x11(%ebp)
f01041f3:	8a 45 ef             	mov    -0x11(%ebp),%al
f01041f6:	8b 55 f0             	mov    -0x10(%ebp),%edx
f01041f9:	ee                   	out    %al,(%dx)

		//cprintf("QUANTUM is set to %d ms (%d)\n", quantum_in_ms, TIMER_DIV((1000/quantum_in_ms)));
		outb(TIMER_MODE, TIMER_SEL0 | TIMER_RATEGEN | TIMER_16BIT);
		kclock_write_cnt0_LSB_first(cnt) ;
f01041fa:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01041fd:	0f b7 c0             	movzwl %ax,%eax
f0104200:	83 ec 0c             	sub    $0xc,%esp
f0104203:	50                   	push   %eax
f0104204:	e8 25 00 00 00       	call   f010422e <kclock_write_cnt0_LSB_first>
f0104209:	83 c4 10             	add    $0x10,%esp
		kclock_stop();
f010420c:	e8 9d fe ff ff       	call   f01040ae <kclock_stop>
	}
	else
	{
		panic("attempt to set the CPU quantum by too large value. Quantum should be between 1 ms and %d ms", QUANTUM_LIMIT - 1);
	}
}
f0104211:	eb 16                	jmp    f0104229 <kclock_set_quantum+0x95>
		kclock_stop();
		//uint16 cnt0 = kclock_read_cnt0_latch() ; //read after write to ensure it's set to the desired value
	}
	else
	{
		panic("attempt to set the CPU quantum by too large value. Quantum should be between 1 ms and %d ms", QUANTUM_LIMIT - 1);
f0104213:	6a 35                	push   $0x35
f0104215:	68 c0 4d 13 f0       	push   $0xf0134dc0
f010421a:	68 c9 00 00 00       	push   $0xc9
f010421f:	68 1c 4e 13 f0       	push   $0xf0134e1c
f0104224:	e8 7d bf ff ff       	call   f01001a6 <_panic>
	}
}
f0104229:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f010422c:	c9                   	leave  
f010422d:	c3                   	ret    

f010422e <kclock_write_cnt0_LSB_first>:


//2017
void
kclock_write_cnt0_LSB_first(uint16 val)
{
f010422e:	55                   	push   %ebp
f010422f:	89 e5                	mov    %esp,%ebp
f0104231:	83 ec 14             	sub    $0x14,%esp
f0104234:	8b 45 08             	mov    0x8(%ebp),%eax
f0104237:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
	outb(TIMER_CNTR0, (uint8)(val & 0x00FF));
f010423b:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010423e:	0f b6 c0             	movzbl %al,%eax
f0104241:	c7 45 fc 40 00 00 00 	movl   $0x40,-0x4(%ebp)
f0104248:	88 45 f6             	mov    %al,-0xa(%ebp)
f010424b:	8a 45 f6             	mov    -0xa(%ebp),%al
f010424e:	8b 55 fc             	mov    -0x4(%ebp),%edx
f0104251:	ee                   	out    %al,(%dx)
	outb(TIMER_CNTR0, (uint8)((val>>8) & 0x00FF));
f0104252:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0104255:	66 c1 e8 08          	shr    $0x8,%ax
f0104259:	0f b6 c0             	movzbl %al,%eax
f010425c:	c7 45 f8 40 00 00 00 	movl   $0x40,-0x8(%ebp)
f0104263:	88 45 f7             	mov    %al,-0x9(%ebp)
f0104266:	8a 45 f7             	mov    -0x9(%ebp),%al
f0104269:	8b 55 f8             	mov    -0x8(%ebp),%edx
f010426c:	ee                   	out    %al,(%dx)
}
f010426d:	90                   	nop
f010426e:	c9                   	leave  
f010426f:	c3                   	ret    

f0104270 <kclock_read_cnt0>:
//==============


uint16
kclock_read_cnt0(void)
{
f0104270:	55                   	push   %ebp
f0104271:	89 e5                	mov    %esp,%ebp
f0104273:	83 ec 20             	sub    $0x20,%esp
f0104276:	c7 45 f8 40 00 00 00 	movl   $0x40,-0x8(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f010427d:	8b 45 f8             	mov    -0x8(%ebp),%eax
f0104280:	89 c2                	mov    %eax,%edx
f0104282:	ec                   	in     (%dx),%al
f0104283:	88 45 ee             	mov    %al,-0x12(%ebp)
	return data;
f0104286:	8a 45 ee             	mov    -0x12(%ebp),%al
	uint8 cnt0_lo =  inb(TIMER_CNTR0);
f0104289:	88 45 ff             	mov    %al,-0x1(%ebp)
f010428c:	c7 45 f0 40 00 00 00 	movl   $0x40,-0x10(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f0104293:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0104296:	89 c2                	mov    %eax,%edx
f0104298:	ec                   	in     (%dx),%al
f0104299:	88 45 ef             	mov    %al,-0x11(%ebp)
	return data;
f010429c:	8a 45 ef             	mov    -0x11(%ebp),%al
	uint8 cnt0_hi =  inb(TIMER_CNTR0);
f010429f:	88 45 f7             	mov    %al,-0x9(%ebp)
	uint16 cnt0 = (cnt0_hi << 8) | cnt0_lo ;
f01042a2:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
f01042a6:	c1 e0 08             	shl    $0x8,%eax
f01042a9:	89 c2                	mov    %eax,%edx
f01042ab:	0f b6 45 ff          	movzbl -0x1(%ebp),%eax
f01042af:	09 d0                	or     %edx,%eax
f01042b1:	66 89 45 f4          	mov    %ax,-0xc(%ebp)
	return cnt0 ;
f01042b5:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f01042b8:	c9                   	leave  
f01042b9:	c3                   	ret    

f01042ba <kclock_read_cnt0_latch>:


uint16
kclock_read_cnt0_latch(void)
{
f01042ba:	55                   	push   %ebp
f01042bb:	89 e5                	mov    %esp,%ebp
f01042bd:	83 ec 30             	sub    $0x30,%esp
f01042c0:	c7 45 f8 43 00 00 00 	movl   $0x43,-0x8(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f01042c7:	8b 45 f8             	mov    -0x8(%ebp),%eax
f01042ca:	89 c2                	mov    %eax,%edx
f01042cc:	ec                   	in     (%dx),%al
f01042cd:	88 45 db             	mov    %al,-0x25(%ebp)
	return data;
f01042d0:	8a 45 db             	mov    -0x25(%ebp),%al
	uint8 old_mode = inb(TIMER_MODE) ;
f01042d3:	88 45 ff             	mov    %al,-0x1(%ebp)
f01042d6:	c7 45 f4 43 00 00 00 	movl   $0x43,-0xc(%ebp)
f01042dd:	c6 45 dc 00          	movb   $0x0,-0x24(%ebp)
}

static __inline void
outb(int port, uint8 data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
f01042e1:	8a 45 dc             	mov    -0x24(%ebp),%al
f01042e4:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01042e7:	ee                   	out    %al,(%dx)
f01042e8:	c7 45 ec 40 00 00 00 	movl   $0x40,-0x14(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f01042ef:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01042f2:	89 c2                	mov    %eax,%edx
f01042f4:	ec                   	in     (%dx),%al
f01042f5:	88 45 dd             	mov    %al,-0x23(%ebp)
	return data;
f01042f8:	8a 45 dd             	mov    -0x23(%ebp),%al
	outb(TIMER_MODE, TIMER_SEL0 | TIMER_LATCH);

	uint8 cnt0_lo =  inb(TIMER_CNTR0);
f01042fb:	88 45 f3             	mov    %al,-0xd(%ebp)
f01042fe:	c7 45 e4 40 00 00 00 	movl   $0x40,-0x1c(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f0104305:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0104308:	89 c2                	mov    %eax,%edx
f010430a:	ec                   	in     (%dx),%al
f010430b:	88 45 de             	mov    %al,-0x22(%ebp)
	return data;
f010430e:	8a 45 de             	mov    -0x22(%ebp),%al
	uint8 cnt0_hi =  inb(TIMER_CNTR0);
f0104311:	88 45 eb             	mov    %al,-0x15(%ebp)
	uint16 cnt0 = (cnt0_hi << 8) | cnt0_lo ;
f0104314:	0f b6 45 eb          	movzbl -0x15(%ebp),%eax
f0104318:	c1 e0 08             	shl    $0x8,%eax
f010431b:	89 c2                	mov    %eax,%edx
f010431d:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
f0104321:	09 d0                	or     %edx,%eax
f0104323:	66 89 45 e8          	mov    %ax,-0x18(%ebp)
	outb(TIMER_MODE, old_mode);
f0104327:	0f b6 45 ff          	movzbl -0x1(%ebp),%eax
f010432b:	c7 45 e0 43 00 00 00 	movl   $0x43,-0x20(%ebp)
f0104332:	88 45 df             	mov    %al,-0x21(%ebp)
}

static __inline void
outb(int port, uint8 data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
f0104335:	8a 45 df             	mov    -0x21(%ebp),%al
f0104338:	8b 55 e0             	mov    -0x20(%ebp),%edx
f010433b:	ee                   	out    %al,(%dx)

	return cnt0 ;
f010433c:	8b 45 e8             	mov    -0x18(%ebp),%eax
}
f010433f:	c9                   	leave  
f0104340:	c3                   	ret    

f0104341 <isSchedMethodRR>:
//void on_clock_update_WS_time_stamps();
extern void cleanup_buffers(struct Env* e);
//================

void sched_delete_ready_queues() ;
uint32 isSchedMethodRR(){if(scheduler_method == SCH_RR) return 1; return 0;}
f0104341:	55                   	push   %ebp
f0104342:	89 e5                	mov    %esp,%ebp
f0104344:	a1 88 0e 6c f0       	mov    0xf06c0e88,%eax
f0104349:	85 c0                	test   %eax,%eax
f010434b:	75 07                	jne    f0104354 <isSchedMethodRR+0x13>
f010434d:	b8 01 00 00 00       	mov    $0x1,%eax
f0104352:	eb 05                	jmp    f0104359 <isSchedMethodRR+0x18>
f0104354:	b8 00 00 00 00       	mov    $0x0,%eax
f0104359:	5d                   	pop    %ebp
f010435a:	c3                   	ret    

f010435b <isSchedMethodMLFQ>:
uint32 isSchedMethodMLFQ(){if(scheduler_method == SCH_MLFQ) return 1; return 0;}
f010435b:	55                   	push   %ebp
f010435c:	89 e5                	mov    %esp,%ebp
f010435e:	a1 88 0e 6c f0       	mov    0xf06c0e88,%eax
f0104363:	83 f8 01             	cmp    $0x1,%eax
f0104366:	75 07                	jne    f010436f <isSchedMethodMLFQ+0x14>
f0104368:	b8 01 00 00 00       	mov    $0x1,%eax
f010436d:	eb 05                	jmp    f0104374 <isSchedMethodMLFQ+0x19>
f010436f:	b8 00 00 00 00       	mov    $0x0,%eax
f0104374:	5d                   	pop    %ebp
f0104375:	c3                   	ret    

f0104376 <init_queue>:

//==================================================================================//
//============================== HELPER FUNCTIONS ==================================//
//==================================================================================//
void init_queue(struct Env_Queue* queue)
{
f0104376:	55                   	push   %ebp
f0104377:	89 e5                	mov    %esp,%ebp
	if(queue != NULL)
f0104379:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f010437d:	74 1d                	je     f010439c <init_queue+0x26>
	{
		LIST_INIT(queue);
f010437f:	8b 45 08             	mov    0x8(%ebp),%eax
f0104382:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f0104388:	8b 45 08             	mov    0x8(%ebp),%eax
f010438b:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f0104392:	8b 45 08             	mov    0x8(%ebp),%eax
f0104395:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
	}
}
f010439c:	90                   	nop
f010439d:	5d                   	pop    %ebp
f010439e:	c3                   	ret    

f010439f <queue_size>:

int queue_size(struct Env_Queue* queue)
{
f010439f:	55                   	push   %ebp
f01043a0:	89 e5                	mov    %esp,%ebp
	if(queue != NULL)
f01043a2:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f01043a6:	74 08                	je     f01043b0 <queue_size+0x11>
	{
		return LIST_SIZE(queue);
f01043a8:	8b 45 08             	mov    0x8(%ebp),%eax
f01043ab:	8b 40 0c             	mov    0xc(%eax),%eax
f01043ae:	eb 05                	jmp    f01043b5 <queue_size+0x16>
	}
	else
	{
		return 0;
f01043b0:	b8 00 00 00 00       	mov    $0x0,%eax
	}
}
f01043b5:	5d                   	pop    %ebp
f01043b6:	c3                   	ret    

f01043b7 <enqueue>:

void enqueue(struct Env_Queue* queue, struct Env* env)
{
f01043b7:	55                   	push   %ebp
f01043b8:	89 e5                	mov    %esp,%ebp
f01043ba:	83 ec 08             	sub    $0x8,%esp
	if(env != NULL)
f01043bd:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
f01043c1:	74 66                	je     f0104429 <enqueue+0x72>
	{
		LIST_INSERT_HEAD(queue, env);
f01043c3:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
f01043c7:	75 14                	jne    f01043dd <enqueue+0x26>
f01043c9:	83 ec 04             	sub    $0x4,%esp
f01043cc:	68 30 4e 13 f0       	push   $0xf0134e30
f01043d1:	6a 2f                	push   $0x2f
f01043d3:	68 53 4e 13 f0       	push   $0xf0134e53
f01043d8:	e8 c9 bd ff ff       	call   f01001a6 <_panic>
f01043dd:	8b 45 08             	mov    0x8(%ebp),%eax
f01043e0:	8b 10                	mov    (%eax),%edx
f01043e2:	8b 45 0c             	mov    0xc(%ebp),%eax
f01043e5:	89 50 44             	mov    %edx,0x44(%eax)
f01043e8:	8b 45 0c             	mov    0xc(%ebp),%eax
f01043eb:	8b 40 44             	mov    0x44(%eax),%eax
f01043ee:	85 c0                	test   %eax,%eax
f01043f0:	74 0d                	je     f01043ff <enqueue+0x48>
f01043f2:	8b 45 08             	mov    0x8(%ebp),%eax
f01043f5:	8b 00                	mov    (%eax),%eax
f01043f7:	8b 55 0c             	mov    0xc(%ebp),%edx
f01043fa:	89 50 48             	mov    %edx,0x48(%eax)
f01043fd:	eb 09                	jmp    f0104408 <enqueue+0x51>
f01043ff:	8b 45 08             	mov    0x8(%ebp),%eax
f0104402:	8b 55 0c             	mov    0xc(%ebp),%edx
f0104405:	89 50 04             	mov    %edx,0x4(%eax)
f0104408:	8b 45 08             	mov    0x8(%ebp),%eax
f010440b:	8b 55 0c             	mov    0xc(%ebp),%edx
f010440e:	89 10                	mov    %edx,(%eax)
f0104410:	8b 45 0c             	mov    0xc(%ebp),%eax
f0104413:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f010441a:	8b 45 08             	mov    0x8(%ebp),%eax
f010441d:	8b 40 0c             	mov    0xc(%eax),%eax
f0104420:	8d 50 01             	lea    0x1(%eax),%edx
f0104423:	8b 45 08             	mov    0x8(%ebp),%eax
f0104426:	89 50 0c             	mov    %edx,0xc(%eax)
	}
}
f0104429:	90                   	nop
f010442a:	c9                   	leave  
f010442b:	c3                   	ret    

f010442c <dequeue>:

struct Env* dequeue(struct Env_Queue* queue)
{
f010442c:	55                   	push   %ebp
f010442d:	89 e5                	mov    %esp,%ebp
f010442f:	83 ec 18             	sub    $0x18,%esp
	struct Env* envItem = LIST_LAST(queue);
f0104432:	8b 45 08             	mov    0x8(%ebp),%eax
f0104435:	8b 40 04             	mov    0x4(%eax),%eax
f0104438:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if (envItem != NULL)
f010443b:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010443f:	0f 84 8a 00 00 00    	je     f01044cf <dequeue+0xa3>
	{
		LIST_REMOVE(queue, envItem);
f0104445:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0104449:	75 14                	jne    f010445f <dequeue+0x33>
f010444b:	83 ec 04             	sub    $0x4,%esp
f010444e:	68 64 4e 13 f0       	push   $0xf0134e64
f0104453:	6a 38                	push   $0x38
f0104455:	68 53 4e 13 f0       	push   $0xf0134e53
f010445a:	e8 47 bd ff ff       	call   f01001a6 <_panic>
f010445f:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104462:	8b 40 44             	mov    0x44(%eax),%eax
f0104465:	85 c0                	test   %eax,%eax
f0104467:	74 11                	je     f010447a <dequeue+0x4e>
f0104469:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010446c:	8b 40 44             	mov    0x44(%eax),%eax
f010446f:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0104472:	8b 52 48             	mov    0x48(%edx),%edx
f0104475:	89 50 48             	mov    %edx,0x48(%eax)
f0104478:	eb 0c                	jmp    f0104486 <dequeue+0x5a>
f010447a:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010447d:	8b 50 48             	mov    0x48(%eax),%edx
f0104480:	8b 45 08             	mov    0x8(%ebp),%eax
f0104483:	89 50 04             	mov    %edx,0x4(%eax)
f0104486:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104489:	8b 40 48             	mov    0x48(%eax),%eax
f010448c:	85 c0                	test   %eax,%eax
f010448e:	74 11                	je     f01044a1 <dequeue+0x75>
f0104490:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104493:	8b 40 48             	mov    0x48(%eax),%eax
f0104496:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0104499:	8b 52 44             	mov    0x44(%edx),%edx
f010449c:	89 50 44             	mov    %edx,0x44(%eax)
f010449f:	eb 0b                	jmp    f01044ac <dequeue+0x80>
f01044a1:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01044a4:	8b 50 44             	mov    0x44(%eax),%edx
f01044a7:	8b 45 08             	mov    0x8(%ebp),%eax
f01044aa:	89 10                	mov    %edx,(%eax)
f01044ac:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01044af:	c7 40 44 00 00 00 00 	movl   $0x0,0x44(%eax)
f01044b6:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01044b9:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f01044c0:	8b 45 08             	mov    0x8(%ebp),%eax
f01044c3:	8b 40 0c             	mov    0xc(%eax),%eax
f01044c6:	8d 50 ff             	lea    -0x1(%eax),%edx
f01044c9:	8b 45 08             	mov    0x8(%ebp),%eax
f01044cc:	89 50 0c             	mov    %edx,0xc(%eax)
	}
	return envItem;
f01044cf:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f01044d2:	c9                   	leave  
f01044d3:	c3                   	ret    

f01044d4 <remove_from_queue>:

void remove_from_queue(struct Env_Queue* queue, struct Env* e)
{
f01044d4:	55                   	push   %ebp
f01044d5:	89 e5                	mov    %esp,%ebp
f01044d7:	83 ec 08             	sub    $0x8,%esp
	if (e != NULL)
f01044da:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
f01044de:	0f 84 8a 00 00 00    	je     f010456e <remove_from_queue+0x9a>
	{
		LIST_REMOVE(queue, e);
f01044e4:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
f01044e8:	75 14                	jne    f01044fe <remove_from_queue+0x2a>
f01044ea:	83 ec 04             	sub    $0x4,%esp
f01044ed:	68 64 4e 13 f0       	push   $0xf0134e64
f01044f2:	6a 41                	push   $0x41
f01044f4:	68 53 4e 13 f0       	push   $0xf0134e53
f01044f9:	e8 a8 bc ff ff       	call   f01001a6 <_panic>
f01044fe:	8b 45 0c             	mov    0xc(%ebp),%eax
f0104501:	8b 40 44             	mov    0x44(%eax),%eax
f0104504:	85 c0                	test   %eax,%eax
f0104506:	74 11                	je     f0104519 <remove_from_queue+0x45>
f0104508:	8b 45 0c             	mov    0xc(%ebp),%eax
f010450b:	8b 40 44             	mov    0x44(%eax),%eax
f010450e:	8b 55 0c             	mov    0xc(%ebp),%edx
f0104511:	8b 52 48             	mov    0x48(%edx),%edx
f0104514:	89 50 48             	mov    %edx,0x48(%eax)
f0104517:	eb 0c                	jmp    f0104525 <remove_from_queue+0x51>
f0104519:	8b 45 0c             	mov    0xc(%ebp),%eax
f010451c:	8b 50 48             	mov    0x48(%eax),%edx
f010451f:	8b 45 08             	mov    0x8(%ebp),%eax
f0104522:	89 50 04             	mov    %edx,0x4(%eax)
f0104525:	8b 45 0c             	mov    0xc(%ebp),%eax
f0104528:	8b 40 48             	mov    0x48(%eax),%eax
f010452b:	85 c0                	test   %eax,%eax
f010452d:	74 11                	je     f0104540 <remove_from_queue+0x6c>
f010452f:	8b 45 0c             	mov    0xc(%ebp),%eax
f0104532:	8b 40 48             	mov    0x48(%eax),%eax
f0104535:	8b 55 0c             	mov    0xc(%ebp),%edx
f0104538:	8b 52 44             	mov    0x44(%edx),%edx
f010453b:	89 50 44             	mov    %edx,0x44(%eax)
f010453e:	eb 0b                	jmp    f010454b <remove_from_queue+0x77>
f0104540:	8b 45 0c             	mov    0xc(%ebp),%eax
f0104543:	8b 50 44             	mov    0x44(%eax),%edx
f0104546:	8b 45 08             	mov    0x8(%ebp),%eax
f0104549:	89 10                	mov    %edx,(%eax)
f010454b:	8b 45 0c             	mov    0xc(%ebp),%eax
f010454e:	c7 40 44 00 00 00 00 	movl   $0x0,0x44(%eax)
f0104555:	8b 45 0c             	mov    0xc(%ebp),%eax
f0104558:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f010455f:	8b 45 08             	mov    0x8(%ebp),%eax
f0104562:	8b 40 0c             	mov    0xc(%eax),%eax
f0104565:	8d 50 ff             	lea    -0x1(%eax),%edx
f0104568:	8b 45 08             	mov    0x8(%ebp),%eax
f010456b:	89 50 0c             	mov    %edx,0xc(%eax)
	}
}
f010456e:	90                   	nop
f010456f:	c9                   	leave  
f0104570:	c3                   	ret    

f0104571 <find_env_in_queue>:

struct Env* find_env_in_queue(struct Env_Queue* queue, uint32 envID)
{
f0104571:	55                   	push   %ebp
f0104572:	89 e5                	mov    %esp,%ebp
f0104574:	83 ec 10             	sub    $0x10,%esp
	struct Env * ptr_env=NULL;
f0104577:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
	LIST_FOREACH(ptr_env, queue)
f010457e:	8b 45 08             	mov    0x8(%ebp),%eax
f0104581:	8b 00                	mov    (%eax),%eax
f0104583:	89 45 fc             	mov    %eax,-0x4(%ebp)
f0104586:	eb 19                	jmp    f01045a1 <find_env_in_queue+0x30>
	{
		if(ptr_env->env_id == envID)
f0104588:	8b 45 fc             	mov    -0x4(%ebp),%eax
f010458b:	8b 40 4c             	mov    0x4c(%eax),%eax
f010458e:	3b 45 0c             	cmp    0xc(%ebp),%eax
f0104591:	75 05                	jne    f0104598 <find_env_in_queue+0x27>
		{
			return ptr_env;
f0104593:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0104596:	eb 37                	jmp    f01045cf <find_env_in_queue+0x5e>
}

struct Env* find_env_in_queue(struct Env_Queue* queue, uint32 envID)
{
	struct Env * ptr_env=NULL;
	LIST_FOREACH(ptr_env, queue)
f0104598:	8b 45 08             	mov    0x8(%ebp),%eax
f010459b:	8b 40 08             	mov    0x8(%eax),%eax
f010459e:	89 45 fc             	mov    %eax,-0x4(%ebp)
f01045a1:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
f01045a5:	74 08                	je     f01045af <find_env_in_queue+0x3e>
f01045a7:	8b 45 fc             	mov    -0x4(%ebp),%eax
f01045aa:	8b 40 44             	mov    0x44(%eax),%eax
f01045ad:	eb 05                	jmp    f01045b4 <find_env_in_queue+0x43>
f01045af:	b8 00 00 00 00       	mov    $0x0,%eax
f01045b4:	8b 55 08             	mov    0x8(%ebp),%edx
f01045b7:	89 42 08             	mov    %eax,0x8(%edx)
f01045ba:	8b 45 08             	mov    0x8(%ebp),%eax
f01045bd:	8b 40 08             	mov    0x8(%eax),%eax
f01045c0:	85 c0                	test   %eax,%eax
f01045c2:	75 c4                	jne    f0104588 <find_env_in_queue+0x17>
f01045c4:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
f01045c8:	75 be                	jne    f0104588 <find_env_in_queue+0x17>
		if(ptr_env->env_id == envID)
		{
			return ptr_env;
		}
	}
	return NULL;
f01045ca:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01045cf:	c9                   	leave  
f01045d0:	c3                   	ret    

f01045d1 <fos_scheduler_MLFQ>:
//==================================================================================//

struct Env* fos_scheduler_MLFQ()
{
f01045d1:	55                   	push   %ebp
f01045d2:	89 e5                	mov    %esp,%ebp
f01045d4:	83 ec 08             	sub    $0x8,%esp
	//Apply the MLFQ with the specified levels to pick up the next environment
	//Note: the "curenv" (if exist) should be placed in its correct queue
	// your code is here, remove the panic and write your code
	panic("fos_scheduler_MLFQ() is not implemented yet...!!");
f01045d7:	83 ec 04             	sub    $0x4,%esp
f01045da:	68 84 4e 13 f0       	push   $0xf0134e84
f01045df:	6a 58                	push   $0x58
f01045e1:	68 53 4e 13 f0       	push   $0xf0134e53
f01045e6:	e8 bb bb ff ff       	call   f01001a6 <_panic>

f01045eb <fos_scheduler>:

}

void
fos_scheduler(void)
{
f01045eb:	55                   	push   %ebp
f01045ec:	89 e5                	mov    %esp,%ebp
f01045ee:	83 ec 18             	sub    $0x18,%esp
	chk1();
f01045f1:	e8 0b b4 02 00       	call   f012fa01 <chk1>
	scheduler_status = SCH_STARTED;
f01045f6:	c7 05 94 0e 6c f0 01 	movl   $0x1,0xf06c0e94
f01045fd:	00 00 00 

	//This variable should be set to the next environment to be run (if any)
	struct Env* next_env = NULL;
f0104600:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

	if (scheduler_method == SCH_RR)
f0104607:	a1 88 0e 6c f0       	mov    0xf06c0e88,%eax
f010460c:	85 c0                	test   %eax,%eax
f010460e:	75 48                	jne    f0104658 <fos_scheduler+0x6d>
		// and switch to such environment if found.
		// It's OK to choose the previously running env if no other env
		// is runnable.

		//If the curenv is still exist, then insert it again in the ready queue
		if (curenv != NULL)
f0104610:	a1 14 82 65 f0       	mov    0xf0658214,%eax
f0104615:	85 c0                	test   %eax,%eax
f0104617:	74 16                	je     f010462f <fos_scheduler+0x44>
		{
			enqueue(&(env_ready_queues[0]), curenv);
f0104619:	a1 14 82 65 f0       	mov    0xf0658214,%eax
f010461e:	83 ec 08             	sub    $0x8,%esp
f0104621:	50                   	push   %eax
f0104622:	68 f0 8a 65 f0       	push   $0xf0658af0
f0104627:	e8 8b fd ff ff       	call   f01043b7 <enqueue>
f010462c:	83 c4 10             	add    $0x10,%esp
		}

		//Pick the next environment from the ready queue
		next_env = dequeue(&(env_ready_queues[0]));
f010462f:	83 ec 0c             	sub    $0xc,%esp
f0104632:	68 f0 8a 65 f0       	push   $0xf0658af0
f0104637:	e8 f0 fd ff ff       	call   f010442c <dequeue>
f010463c:	83 c4 10             	add    $0x10,%esp
f010463f:	89 45 f4             	mov    %eax,-0xc(%ebp)

		//Reset the quantum
		//2017: Reset the value of CNT0 for the next clock interval
		kclock_set_quantum(quantums[0]);
f0104642:	a0 68 0e 6c f0       	mov    0xf06c0e68,%al
f0104647:	0f b6 c0             	movzbl %al,%eax
f010464a:	83 ec 0c             	sub    $0xc,%esp
f010464d:	50                   	push   %eax
f010464e:	e8 41 fb ff ff       	call   f0104194 <kclock_set_quantum>
f0104653:	83 c4 10             	add    $0x10,%esp
f0104656:	eb 12                	jmp    f010466a <fos_scheduler+0x7f>
		//uint16 cnt0 = kclock_read_cnt0_latch() ;
		//cprintf("CLOCK INTERRUPT AFTER RESET: Counter0 Value = %d\n", cnt0 );

	}
	else if (scheduler_method == SCH_MLFQ)
f0104658:	a1 88 0e 6c f0       	mov    0xf06c0e88,%eax
f010465d:	83 f8 01             	cmp    $0x1,%eax
f0104660:	75 08                	jne    f010466a <fos_scheduler+0x7f>
	{
		next_env = fos_scheduler_MLFQ();
f0104662:	e8 6a ff ff ff       	call   f01045d1 <fos_scheduler_MLFQ>
f0104667:	89 45 f4             	mov    %eax,-0xc(%ebp)
	}


	//temporarily set the curenv by the next env JUST for checking the scheduler
	//Then: reset it again
	struct Env* old_curenv = curenv;
f010466a:	a1 14 82 65 f0       	mov    0xf0658214,%eax
f010466f:	89 45 f0             	mov    %eax,-0x10(%ebp)
	curenv = next_env ;
f0104672:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104675:	a3 14 82 65 f0       	mov    %eax,0xf0658214
	chk2(next_env) ;
f010467a:	83 ec 0c             	sub    $0xc,%esp
f010467d:	ff 75 f4             	pushl  -0xc(%ebp)
f0104680:	e8 b9 b3 02 00       	call   f012fa3e <chk2>
f0104685:	83 c4 10             	add    $0x10,%esp
	curenv = old_curenv;
f0104688:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010468b:	a3 14 82 65 f0       	mov    %eax,0xf0658214

	//sched_print_all();

	if(next_env != NULL)
f0104690:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0104694:	74 0b                	je     f01046a1 <fos_scheduler+0xb6>
	{
//		cprintf("\nScheduler select program '%s' [%d]... counter = %d\n", next_env->prog_name, next_env->env_id, kclock_read_cnt0());
//		cprintf("Q0 = %d, Q1 = %d, Q2 = %d, Q3 = %d\n", queue_size(&(env_ready_queues[0])), queue_size(&(env_ready_queues[1])), queue_size(&(env_ready_queues[2])), queue_size(&(env_ready_queues[3])));
		env_run(next_env);
f0104696:	83 ec 0c             	sub    $0xc,%esp
f0104699:	ff 75 f4             	pushl  -0xc(%ebp)
f010469c:	e8 9c 4c 00 00       	call   f010933d <env_run>
	}
	else
	{
		/*2015*///No more envs... curenv doesn't exist any more! return back to command prompt
		curenv = NULL;
f01046a1:	c7 05 14 82 65 f0 00 	movl   $0x0,0xf0658214
f01046a8:	00 00 00 
		//lcr3(K_PHYSICAL_ADDRESS(ptr_page_directory));
		lcr3(phys_page_directory);
f01046ab:	a1 e8 0e 6c f0       	mov    0xf06c0ee8,%eax
f01046b0:	89 45 ec             	mov    %eax,-0x14(%ebp)
}

static __inline void
lcr3(uint32 val)
{
	__asm __volatile("movl %0,%%cr3" : : "r" (val));
f01046b3:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01046b6:	0f 22 d8             	mov    %eax,%cr3

		//cprintf("SP = %x\n", read_esp());

		scheduler_status = SCH_STOPPED;
f01046b9:	c7 05 94 0e 6c f0 00 	movl   $0x0,0xf06c0e94
f01046c0:	00 00 00 
		//cprintf("[sched] no envs - nothing more to do!\n");
		while (1)
			run_command_prompt(NULL);
f01046c3:	83 ec 0c             	sub    $0xc,%esp
f01046c6:	6a 00                	push   $0x0
f01046c8:	e8 86 c5 ff ff       	call   f0100c53 <run_command_prompt>
f01046cd:	83 c4 10             	add    $0x10,%esp
f01046d0:	eb f1                	jmp    f01046c3 <fos_scheduler+0xd8>

f01046d2 <sched_init_RR>:

	}
}

void sched_init_RR(uint8 quantum)
{
f01046d2:	55                   	push   %ebp
f01046d3:	89 e5                	mov    %esp,%ebp
f01046d5:	83 ec 18             	sub    $0x18,%esp
f01046d8:	8b 45 08             	mov    0x8(%ebp),%eax
f01046db:	88 45 f4             	mov    %al,-0xc(%ebp)
	scheduler_status = SCH_STOPPED;
f01046de:	c7 05 94 0e 6c f0 00 	movl   $0x0,0xf06c0e94
f01046e5:	00 00 00 
	scheduler_method = SCH_RR;
f01046e8:	c7 05 88 0e 6c f0 00 	movl   $0x0,0xf06c0e88
f01046ef:	00 00 00 

	// Create 1 ready queue for the RR
	num_of_ready_queues = 1;
f01046f2:	c6 05 bc 0e 6c f0 01 	movb   $0x1,0xf06c0ebc
#if USE_KHEAP
	sched_delete_ready_queues();
	env_ready_queues = kmalloc(sizeof(struct Env_Queue));
	quantums = kmalloc(num_of_ready_queues * sizeof(uint8)) ;
#endif
	quantums[0] = quantum;
f01046f9:	8a 45 f4             	mov    -0xc(%ebp),%al
f01046fc:	a2 68 0e 6c f0       	mov    %al,0xf06c0e68
	kclock_set_quantum(quantums[0]);
f0104701:	a0 68 0e 6c f0       	mov    0xf06c0e68,%al
f0104706:	0f b6 c0             	movzbl %al,%eax
f0104709:	83 ec 0c             	sub    $0xc,%esp
f010470c:	50                   	push   %eax
f010470d:	e8 82 fa ff ff       	call   f0104194 <kclock_set_quantum>
f0104712:	83 c4 10             	add    $0x10,%esp
	init_queue(&(env_ready_queues[0]));
f0104715:	83 ec 0c             	sub    $0xc,%esp
f0104718:	68 f0 8a 65 f0       	push   $0xf0658af0
f010471d:	e8 54 fc ff ff       	call   f0104376 <init_queue>
f0104722:	83 c4 10             	add    $0x10,%esp
}
f0104725:	90                   	nop
f0104726:	c9                   	leave  
f0104727:	c3                   	ret    

f0104728 <sched_init_MLFQ>:

void sched_init_MLFQ(uint8 numOfLevels, uint8 *quantumOfEachLevel)
{
f0104728:	55                   	push   %ebp
f0104729:	89 e5                	mov    %esp,%ebp
f010472b:	83 ec 18             	sub    $0x18,%esp
f010472e:	8b 45 08             	mov    0x8(%ebp),%eax
f0104731:	88 45 f4             	mov    %al,-0xc(%ebp)

	//[1] Create the ready queues and initialize them using init_queue()
	//[2] Create the "quantums" array and initialize it by the given quantums in "quantumOfEachLevel[]"
	//[3] Set the CPU quantum by the first level one
#else
	panic("sched_init_MLFQ: Kernel Heap is disabled");
f0104734:	83 ec 04             	sub    $0x4,%esp
f0104737:	68 b8 4e 13 f0       	push   $0xf0134eb8
f010473c:	68 cc 00 00 00       	push   $0xcc
f0104741:	68 53 4e 13 f0       	push   $0xf0134e53
f0104746:	e8 5b ba ff ff       	call   f01001a6 <_panic>

f010474b <sched_init>:
#endif
}


void sched_init()
{
f010474b:	55                   	push   %ebp
f010474c:	89 e5                	mov    %esp,%ebp
f010474e:	83 ec 08             	sub    $0x8,%esp
	old_pf_counter = 0;
f0104751:	c7 05 58 ea 6b f0 00 	movl   $0x0,0xf06bea58
f0104758:	00 00 00 

	sched_init_RR(CLOCK_INTERVAL_IN_MS);
f010475b:	83 ec 0c             	sub    $0xc,%esp
f010475e:	6a 0a                	push   $0xa
f0104760:	e8 6d ff ff ff       	call   f01046d2 <sched_init_RR>
f0104765:	83 c4 10             	add    $0x10,%esp

	init_queue(&env_new_queue);
f0104768:	83 ec 0c             	sub    $0xc,%esp
f010476b:	68 78 0e 6c f0       	push   $0xf06c0e78
f0104770:	e8 01 fc ff ff       	call   f0104376 <init_queue>
f0104775:	83 c4 10             	add    $0x10,%esp
	init_queue(&env_exit_queue);
f0104778:	83 ec 0c             	sub    $0xc,%esp
f010477b:	68 44 ea 6b f0       	push   $0xf06bea44
f0104780:	e8 f1 fb ff ff       	call   f0104376 <init_queue>
f0104785:	83 c4 10             	add    $0x10,%esp
}
f0104788:	90                   	nop
f0104789:	c9                   	leave  
f010478a:	c3                   	ret    

f010478b <sched_delete_ready_queues>:

void sched_delete_ready_queues()
{
f010478b:	55                   	push   %ebp
f010478c:	89 e5                	mov    %esp,%ebp
f010478e:	83 ec 08             	sub    $0x8,%esp
	if (env_ready_queues != NULL)
		kfree(env_ready_queues);
f0104791:	83 ec 0c             	sub    $0xc,%esp
f0104794:	68 f0 8a 65 f0       	push   $0xf0658af0
f0104799:	e8 40 2e 00 00       	call   f01075de <kfree>
f010479e:	83 c4 10             	add    $0x10,%esp
	if (quantums != NULL)
	kfree(quantums);
f01047a1:	83 ec 0c             	sub    $0xc,%esp
f01047a4:	68 68 0e 6c f0       	push   $0xf06c0e68
f01047a9:	e8 30 2e 00 00       	call   f01075de <kfree>
f01047ae:	83 c4 10             	add    $0x10,%esp
}
f01047b1:	90                   	nop
f01047b2:	c9                   	leave  
f01047b3:	c3                   	ret    

f01047b4 <sched_insert_ready>:
void sched_insert_ready(struct Env* env)
{
f01047b4:	55                   	push   %ebp
f01047b5:	89 e5                	mov    %esp,%ebp
f01047b7:	83 ec 08             	sub    $0x8,%esp
	if(env != NULL)
f01047ba:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f01047be:	74 1d                	je     f01047dd <sched_insert_ready+0x29>
	{
		env->env_status = ENV_READY ;
f01047c0:	8b 45 08             	mov    0x8(%ebp),%eax
f01047c3:	c7 40 54 01 00 00 00 	movl   $0x1,0x54(%eax)
		enqueue(&(env_ready_queues[0]), env);
f01047ca:	83 ec 08             	sub    $0x8,%esp
f01047cd:	ff 75 08             	pushl  0x8(%ebp)
f01047d0:	68 f0 8a 65 f0       	push   $0xf0658af0
f01047d5:	e8 dd fb ff ff       	call   f01043b7 <enqueue>
f01047da:	83 c4 10             	add    $0x10,%esp
	}
}
f01047dd:	90                   	nop
f01047de:	c9                   	leave  
f01047df:	c3                   	ret    

f01047e0 <sched_remove_ready>:


void sched_remove_ready(struct Env* env)
{
f01047e0:	55                   	push   %ebp
f01047e1:	89 e5                	mov    %esp,%ebp
f01047e3:	83 ec 18             	sub    $0x18,%esp
	if(env != NULL)
f01047e6:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f01047ea:	0f 84 02 01 00 00    	je     f01048f2 <sched_remove_ready+0x112>
	{
		for (int i = 0 ; i < num_of_ready_queues ; i++)
f01047f0:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01047f7:	e9 e5 00 00 00       	jmp    f01048e1 <sched_remove_ready+0x101>
		{
			struct Env * ptr_env = find_env_in_queue(&(env_ready_queues[i]), env->env_id);
f01047fc:	8b 45 08             	mov    0x8(%ebp),%eax
f01047ff:	8b 40 4c             	mov    0x4c(%eax),%eax
f0104802:	89 c2                	mov    %eax,%edx
f0104804:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104807:	c1 e0 04             	shl    $0x4,%eax
f010480a:	05 f0 8a 65 f0       	add    $0xf0658af0,%eax
f010480f:	52                   	push   %edx
f0104810:	50                   	push   %eax
f0104811:	e8 5b fd ff ff       	call   f0104571 <find_env_in_queue>
f0104816:	83 c4 08             	add    $0x8,%esp
f0104819:	89 45 f0             	mov    %eax,-0x10(%ebp)
			if (ptr_env != NULL)
f010481c:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0104820:	0f 84 b8 00 00 00    	je     f01048de <sched_remove_ready+0xfe>
			{
				LIST_REMOVE(&(env_ready_queues[i]), env);
f0104826:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f010482a:	75 17                	jne    f0104843 <sched_remove_ready+0x63>
f010482c:	83 ec 04             	sub    $0x4,%esp
f010482f:	68 64 4e 13 f0       	push   $0xf0134e64
f0104834:	68 f5 00 00 00       	push   $0xf5
f0104839:	68 53 4e 13 f0       	push   $0xf0134e53
f010483e:	e8 63 b9 ff ff       	call   f01001a6 <_panic>
f0104843:	8b 45 08             	mov    0x8(%ebp),%eax
f0104846:	8b 40 44             	mov    0x44(%eax),%eax
f0104849:	85 c0                	test   %eax,%eax
f010484b:	74 11                	je     f010485e <sched_remove_ready+0x7e>
f010484d:	8b 45 08             	mov    0x8(%ebp),%eax
f0104850:	8b 40 44             	mov    0x44(%eax),%eax
f0104853:	8b 55 08             	mov    0x8(%ebp),%edx
f0104856:	8b 52 48             	mov    0x48(%edx),%edx
f0104859:	89 50 48             	mov    %edx,0x48(%eax)
f010485c:	eb 14                	jmp    f0104872 <sched_remove_ready+0x92>
f010485e:	8b 45 08             	mov    0x8(%ebp),%eax
f0104861:	8b 40 48             	mov    0x48(%eax),%eax
f0104864:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0104867:	c1 e2 04             	shl    $0x4,%edx
f010486a:	81 c2 f4 8a 65 f0    	add    $0xf0658af4,%edx
f0104870:	89 02                	mov    %eax,(%edx)
f0104872:	8b 45 08             	mov    0x8(%ebp),%eax
f0104875:	8b 40 48             	mov    0x48(%eax),%eax
f0104878:	85 c0                	test   %eax,%eax
f010487a:	74 11                	je     f010488d <sched_remove_ready+0xad>
f010487c:	8b 45 08             	mov    0x8(%ebp),%eax
f010487f:	8b 40 48             	mov    0x48(%eax),%eax
f0104882:	8b 55 08             	mov    0x8(%ebp),%edx
f0104885:	8b 52 44             	mov    0x44(%edx),%edx
f0104888:	89 50 44             	mov    %edx,0x44(%eax)
f010488b:	eb 14                	jmp    f01048a1 <sched_remove_ready+0xc1>
f010488d:	8b 45 08             	mov    0x8(%ebp),%eax
f0104890:	8b 40 44             	mov    0x44(%eax),%eax
f0104893:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0104896:	c1 e2 04             	shl    $0x4,%edx
f0104899:	81 c2 f0 8a 65 f0    	add    $0xf0658af0,%edx
f010489f:	89 02                	mov    %eax,(%edx)
f01048a1:	8b 45 08             	mov    0x8(%ebp),%eax
f01048a4:	c7 40 44 00 00 00 00 	movl   $0x0,0x44(%eax)
f01048ab:	8b 45 08             	mov    0x8(%ebp),%eax
f01048ae:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f01048b5:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01048b8:	c1 e0 04             	shl    $0x4,%eax
f01048bb:	05 fc 8a 65 f0       	add    $0xf0658afc,%eax
f01048c0:	8b 00                	mov    (%eax),%eax
f01048c2:	8d 50 ff             	lea    -0x1(%eax),%edx
f01048c5:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01048c8:	c1 e0 04             	shl    $0x4,%eax
f01048cb:	05 fc 8a 65 f0       	add    $0xf0658afc,%eax
f01048d0:	89 10                	mov    %edx,(%eax)
				env->env_status = ENV_UNKNOWN;
f01048d2:	8b 45 08             	mov    0x8(%ebp),%eax
f01048d5:	c7 40 54 06 00 00 00 	movl   $0x6,0x54(%eax)
				return;
f01048dc:	eb 14                	jmp    f01048f2 <sched_remove_ready+0x112>

void sched_remove_ready(struct Env* env)
{
	if(env != NULL)
	{
		for (int i = 0 ; i < num_of_ready_queues ; i++)
f01048de:	ff 45 f4             	incl   -0xc(%ebp)
f01048e1:	a0 bc 0e 6c f0       	mov    0xf06c0ebc,%al
f01048e6:	0f b6 c0             	movzbl %al,%eax
f01048e9:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01048ec:	0f 8f 0a ff ff ff    	jg     f01047fc <sched_remove_ready+0x1c>
				env->env_status = ENV_UNKNOWN;
				return;
			}
		}
	}
}
f01048f2:	c9                   	leave  
f01048f3:	c3                   	ret    

f01048f4 <sched_insert_new>:

void sched_insert_new(struct Env* env)
{
f01048f4:	55                   	push   %ebp
f01048f5:	89 e5                	mov    %esp,%ebp
f01048f7:	83 ec 08             	sub    $0x8,%esp
	if(env != NULL)
f01048fa:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f01048fe:	74 1d                	je     f010491d <sched_insert_new+0x29>
	{
		env->env_status = ENV_NEW ;
f0104900:	8b 45 08             	mov    0x8(%ebp),%eax
f0104903:	c7 40 54 04 00 00 00 	movl   $0x4,0x54(%eax)
		enqueue(&env_new_queue, env);
f010490a:	83 ec 08             	sub    $0x8,%esp
f010490d:	ff 75 08             	pushl  0x8(%ebp)
f0104910:	68 78 0e 6c f0       	push   $0xf06c0e78
f0104915:	e8 9d fa ff ff       	call   f01043b7 <enqueue>
f010491a:	83 c4 10             	add    $0x10,%esp
	}
}
f010491d:	90                   	nop
f010491e:	c9                   	leave  
f010491f:	c3                   	ret    

f0104920 <sched_remove_new>:
void sched_remove_new(struct Env* env)
{
f0104920:	55                   	push   %ebp
f0104921:	89 e5                	mov    %esp,%ebp
f0104923:	83 ec 08             	sub    $0x8,%esp
	if(env != NULL)
f0104926:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f010492a:	0f 84 92 00 00 00    	je     f01049c2 <sched_remove_new+0xa2>
	{
		LIST_REMOVE(&env_new_queue, env) ;
f0104930:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0104934:	75 17                	jne    f010494d <sched_remove_new+0x2d>
f0104936:	83 ec 04             	sub    $0x4,%esp
f0104939:	68 64 4e 13 f0       	push   $0xf0134e64
f010493e:	68 09 01 00 00       	push   $0x109
f0104943:	68 53 4e 13 f0       	push   $0xf0134e53
f0104948:	e8 59 b8 ff ff       	call   f01001a6 <_panic>
f010494d:	8b 45 08             	mov    0x8(%ebp),%eax
f0104950:	8b 40 44             	mov    0x44(%eax),%eax
f0104953:	85 c0                	test   %eax,%eax
f0104955:	74 11                	je     f0104968 <sched_remove_new+0x48>
f0104957:	8b 45 08             	mov    0x8(%ebp),%eax
f010495a:	8b 40 44             	mov    0x44(%eax),%eax
f010495d:	8b 55 08             	mov    0x8(%ebp),%edx
f0104960:	8b 52 48             	mov    0x48(%edx),%edx
f0104963:	89 50 48             	mov    %edx,0x48(%eax)
f0104966:	eb 0b                	jmp    f0104973 <sched_remove_new+0x53>
f0104968:	8b 45 08             	mov    0x8(%ebp),%eax
f010496b:	8b 40 48             	mov    0x48(%eax),%eax
f010496e:	a3 7c 0e 6c f0       	mov    %eax,0xf06c0e7c
f0104973:	8b 45 08             	mov    0x8(%ebp),%eax
f0104976:	8b 40 48             	mov    0x48(%eax),%eax
f0104979:	85 c0                	test   %eax,%eax
f010497b:	74 11                	je     f010498e <sched_remove_new+0x6e>
f010497d:	8b 45 08             	mov    0x8(%ebp),%eax
f0104980:	8b 40 48             	mov    0x48(%eax),%eax
f0104983:	8b 55 08             	mov    0x8(%ebp),%edx
f0104986:	8b 52 44             	mov    0x44(%edx),%edx
f0104989:	89 50 44             	mov    %edx,0x44(%eax)
f010498c:	eb 0b                	jmp    f0104999 <sched_remove_new+0x79>
f010498e:	8b 45 08             	mov    0x8(%ebp),%eax
f0104991:	8b 40 44             	mov    0x44(%eax),%eax
f0104994:	a3 78 0e 6c f0       	mov    %eax,0xf06c0e78
f0104999:	8b 45 08             	mov    0x8(%ebp),%eax
f010499c:	c7 40 44 00 00 00 00 	movl   $0x0,0x44(%eax)
f01049a3:	8b 45 08             	mov    0x8(%ebp),%eax
f01049a6:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f01049ad:	a1 84 0e 6c f0       	mov    0xf06c0e84,%eax
f01049b2:	48                   	dec    %eax
f01049b3:	a3 84 0e 6c f0       	mov    %eax,0xf06c0e84
		env->env_status = ENV_UNKNOWN;
f01049b8:	8b 45 08             	mov    0x8(%ebp),%eax
f01049bb:	c7 40 54 06 00 00 00 	movl   $0x6,0x54(%eax)
	}
}
f01049c2:	90                   	nop
f01049c3:	c9                   	leave  
f01049c4:	c3                   	ret    

f01049c5 <sched_insert_exit>:

void sched_insert_exit(struct Env* env)
{
f01049c5:	55                   	push   %ebp
f01049c6:	89 e5                	mov    %esp,%ebp
f01049c8:	83 ec 08             	sub    $0x8,%esp
	if(env != NULL)
f01049cb:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f01049cf:	74 34                	je     f0104a05 <sched_insert_exit+0x40>
	{
		if(isBufferingEnabled()) {cleanup_buffers(env);}
f01049d1:	e8 5a 8c 00 00       	call   f010d630 <isBufferingEnabled>
f01049d6:	84 c0                	test   %al,%al
f01049d8:	74 0e                	je     f01049e8 <sched_insert_exit+0x23>
f01049da:	83 ec 0c             	sub    $0xc,%esp
f01049dd:	ff 75 08             	pushl  0x8(%ebp)
f01049e0:	e8 c1 5d 00 00       	call   f010a7a6 <cleanup_buffers>
f01049e5:	83 c4 10             	add    $0x10,%esp
		env->env_status = ENV_EXIT ;
f01049e8:	8b 45 08             	mov    0x8(%ebp),%eax
f01049eb:	c7 40 54 05 00 00 00 	movl   $0x5,0x54(%eax)
		enqueue(&env_exit_queue, env);
f01049f2:	83 ec 08             	sub    $0x8,%esp
f01049f5:	ff 75 08             	pushl  0x8(%ebp)
f01049f8:	68 44 ea 6b f0       	push   $0xf06bea44
f01049fd:	e8 b5 f9 ff ff       	call   f01043b7 <enqueue>
f0104a02:	83 c4 10             	add    $0x10,%esp
	}
}
f0104a05:	90                   	nop
f0104a06:	c9                   	leave  
f0104a07:	c3                   	ret    

f0104a08 <sched_remove_exit>:
void sched_remove_exit(struct Env* env)
{
f0104a08:	55                   	push   %ebp
f0104a09:	89 e5                	mov    %esp,%ebp
f0104a0b:	83 ec 08             	sub    $0x8,%esp
	if(env != NULL)
f0104a0e:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0104a12:	0f 84 92 00 00 00    	je     f0104aaa <sched_remove_exit+0xa2>
	{
		LIST_REMOVE(&env_exit_queue, env) ;
f0104a18:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0104a1c:	75 17                	jne    f0104a35 <sched_remove_exit+0x2d>
f0104a1e:	83 ec 04             	sub    $0x4,%esp
f0104a21:	68 64 4e 13 f0       	push   $0xf0134e64
f0104a26:	68 1b 01 00 00       	push   $0x11b
f0104a2b:	68 53 4e 13 f0       	push   $0xf0134e53
f0104a30:	e8 71 b7 ff ff       	call   f01001a6 <_panic>
f0104a35:	8b 45 08             	mov    0x8(%ebp),%eax
f0104a38:	8b 40 44             	mov    0x44(%eax),%eax
f0104a3b:	85 c0                	test   %eax,%eax
f0104a3d:	74 11                	je     f0104a50 <sched_remove_exit+0x48>
f0104a3f:	8b 45 08             	mov    0x8(%ebp),%eax
f0104a42:	8b 40 44             	mov    0x44(%eax),%eax
f0104a45:	8b 55 08             	mov    0x8(%ebp),%edx
f0104a48:	8b 52 48             	mov    0x48(%edx),%edx
f0104a4b:	89 50 48             	mov    %edx,0x48(%eax)
f0104a4e:	eb 0b                	jmp    f0104a5b <sched_remove_exit+0x53>
f0104a50:	8b 45 08             	mov    0x8(%ebp),%eax
f0104a53:	8b 40 48             	mov    0x48(%eax),%eax
f0104a56:	a3 48 ea 6b f0       	mov    %eax,0xf06bea48
f0104a5b:	8b 45 08             	mov    0x8(%ebp),%eax
f0104a5e:	8b 40 48             	mov    0x48(%eax),%eax
f0104a61:	85 c0                	test   %eax,%eax
f0104a63:	74 11                	je     f0104a76 <sched_remove_exit+0x6e>
f0104a65:	8b 45 08             	mov    0x8(%ebp),%eax
f0104a68:	8b 40 48             	mov    0x48(%eax),%eax
f0104a6b:	8b 55 08             	mov    0x8(%ebp),%edx
f0104a6e:	8b 52 44             	mov    0x44(%edx),%edx
f0104a71:	89 50 44             	mov    %edx,0x44(%eax)
f0104a74:	eb 0b                	jmp    f0104a81 <sched_remove_exit+0x79>
f0104a76:	8b 45 08             	mov    0x8(%ebp),%eax
f0104a79:	8b 40 44             	mov    0x44(%eax),%eax
f0104a7c:	a3 44 ea 6b f0       	mov    %eax,0xf06bea44
f0104a81:	8b 45 08             	mov    0x8(%ebp),%eax
f0104a84:	c7 40 44 00 00 00 00 	movl   $0x0,0x44(%eax)
f0104a8b:	8b 45 08             	mov    0x8(%ebp),%eax
f0104a8e:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f0104a95:	a1 50 ea 6b f0       	mov    0xf06bea50,%eax
f0104a9a:	48                   	dec    %eax
f0104a9b:	a3 50 ea 6b f0       	mov    %eax,0xf06bea50
		env->env_status = ENV_UNKNOWN;
f0104aa0:	8b 45 08             	mov    0x8(%ebp),%eax
f0104aa3:	c7 40 54 06 00 00 00 	movl   $0x6,0x54(%eax)
	}
}
f0104aaa:	90                   	nop
f0104aab:	c9                   	leave  
f0104aac:	c3                   	ret    

f0104aad <sched_print_all>:

void sched_print_all()
{
f0104aad:	55                   	push   %ebp
f0104aae:	89 e5                	mov    %esp,%ebp
f0104ab0:	83 ec 18             	sub    $0x18,%esp
	struct Env* ptr_env ;
	if (!LIST_EMPTY(&env_new_queue))
f0104ab3:	a1 78 0e 6c f0       	mov    0xf06c0e78,%eax
f0104ab8:	85 c0                	test   %eax,%eax
f0104aba:	74 6c                	je     f0104b28 <sched_print_all+0x7b>
	{
		cprintf("\nThe processes in NEW queue are:\n");
f0104abc:	83 ec 0c             	sub    $0xc,%esp
f0104abf:	68 e4 4e 13 f0       	push   $0xf0134ee4
f0104ac4:	e8 64 c1 ff ff       	call   f0100c2d <cprintf>
f0104ac9:	83 c4 10             	add    $0x10,%esp
		LIST_FOREACH(ptr_env, &env_new_queue)
f0104acc:	a1 78 0e 6c f0       	mov    0xf06c0e78,%eax
f0104ad1:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0104ad4:	eb 29                	jmp    f0104aff <sched_print_all+0x52>
		{
			cprintf("	[%d] %s\n", ptr_env->env_id, ptr_env->prog_name);
f0104ad6:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104ad9:	8d 90 18 da 01 00    	lea    0x1da18(%eax),%edx
f0104adf:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104ae2:	8b 40 4c             	mov    0x4c(%eax),%eax
f0104ae5:	83 ec 04             	sub    $0x4,%esp
f0104ae8:	52                   	push   %edx
f0104ae9:	50                   	push   %eax
f0104aea:	68 06 4f 13 f0       	push   $0xf0134f06
f0104aef:	e8 39 c1 ff ff       	call   f0100c2d <cprintf>
f0104af4:	83 c4 10             	add    $0x10,%esp
{
	struct Env* ptr_env ;
	if (!LIST_EMPTY(&env_new_queue))
	{
		cprintf("\nThe processes in NEW queue are:\n");
		LIST_FOREACH(ptr_env, &env_new_queue)
f0104af7:	a1 80 0e 6c f0       	mov    0xf06c0e80,%eax
f0104afc:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0104aff:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0104b03:	74 08                	je     f0104b0d <sched_print_all+0x60>
f0104b05:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104b08:	8b 40 44             	mov    0x44(%eax),%eax
f0104b0b:	eb 05                	jmp    f0104b12 <sched_print_all+0x65>
f0104b0d:	b8 00 00 00 00       	mov    $0x0,%eax
f0104b12:	a3 80 0e 6c f0       	mov    %eax,0xf06c0e80
f0104b17:	a1 80 0e 6c f0       	mov    0xf06c0e80,%eax
f0104b1c:	85 c0                	test   %eax,%eax
f0104b1e:	75 b6                	jne    f0104ad6 <sched_print_all+0x29>
f0104b20:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0104b24:	75 b0                	jne    f0104ad6 <sched_print_all+0x29>
f0104b26:	eb 10                	jmp    f0104b38 <sched_print_all+0x8b>
			cprintf("	[%d] %s\n", ptr_env->env_id, ptr_env->prog_name);
		}
	}
	else
	{
		cprintf("\nNo processes in NEW queue\n");
f0104b28:	83 ec 0c             	sub    $0xc,%esp
f0104b2b:	68 10 4f 13 f0       	push   $0xf0134f10
f0104b30:	e8 f8 c0 ff ff       	call   f0100c2d <cprintf>
f0104b35:	83 c4 10             	add    $0x10,%esp
	}
	cprintf("================================================\n");
f0104b38:	83 ec 0c             	sub    $0xc,%esp
f0104b3b:	68 2c 4f 13 f0       	push   $0xf0134f2c
f0104b40:	e8 e8 c0 ff ff       	call   f0100c2d <cprintf>
f0104b45:	83 c4 10             	add    $0x10,%esp
	for (int i = 0 ; i < num_of_ready_queues ; i++)
f0104b48:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f0104b4f:	e9 cb 00 00 00       	jmp    f0104c1f <sched_print_all+0x172>
	{
		if (!LIST_EMPTY(&(env_ready_queues[i])))
f0104b54:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0104b57:	c1 e0 04             	shl    $0x4,%eax
f0104b5a:	05 f0 8a 65 f0       	add    $0xf0658af0,%eax
f0104b5f:	8b 00                	mov    (%eax),%eax
f0104b61:	85 c0                	test   %eax,%eax
f0104b63:	0f 84 90 00 00 00    	je     f0104bf9 <sched_print_all+0x14c>
		{
			cprintf("The processes in READY queue #%d are:\n", i);
f0104b69:	83 ec 08             	sub    $0x8,%esp
f0104b6c:	ff 75 f0             	pushl  -0x10(%ebp)
f0104b6f:	68 60 4f 13 f0       	push   $0xf0134f60
f0104b74:	e8 b4 c0 ff ff       	call   f0100c2d <cprintf>
f0104b79:	83 c4 10             	add    $0x10,%esp
			LIST_FOREACH(ptr_env, &(env_ready_queues[i]))
f0104b7c:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0104b7f:	c1 e0 04             	shl    $0x4,%eax
f0104b82:	05 f0 8a 65 f0       	add    $0xf0658af0,%eax
f0104b87:	8b 00                	mov    (%eax),%eax
f0104b89:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0104b8c:	eb 31                	jmp    f0104bbf <sched_print_all+0x112>
			{
				cprintf("	[%d] %s\n", ptr_env->env_id, ptr_env->prog_name);
f0104b8e:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104b91:	8d 90 18 da 01 00    	lea    0x1da18(%eax),%edx
f0104b97:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104b9a:	8b 40 4c             	mov    0x4c(%eax),%eax
f0104b9d:	83 ec 04             	sub    $0x4,%esp
f0104ba0:	52                   	push   %edx
f0104ba1:	50                   	push   %eax
f0104ba2:	68 06 4f 13 f0       	push   $0xf0134f06
f0104ba7:	e8 81 c0 ff ff       	call   f0100c2d <cprintf>
f0104bac:	83 c4 10             	add    $0x10,%esp
	for (int i = 0 ; i < num_of_ready_queues ; i++)
	{
		if (!LIST_EMPTY(&(env_ready_queues[i])))
		{
			cprintf("The processes in READY queue #%d are:\n", i);
			LIST_FOREACH(ptr_env, &(env_ready_queues[i]))
f0104baf:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0104bb2:	c1 e0 04             	shl    $0x4,%eax
f0104bb5:	05 f8 8a 65 f0       	add    $0xf0658af8,%eax
f0104bba:	8b 00                	mov    (%eax),%eax
f0104bbc:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0104bbf:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0104bc3:	74 08                	je     f0104bcd <sched_print_all+0x120>
f0104bc5:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104bc8:	8b 40 44             	mov    0x44(%eax),%eax
f0104bcb:	eb 05                	jmp    f0104bd2 <sched_print_all+0x125>
f0104bcd:	b8 00 00 00 00       	mov    $0x0,%eax
f0104bd2:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0104bd5:	c1 e2 04             	shl    $0x4,%edx
f0104bd8:	81 c2 f8 8a 65 f0    	add    $0xf0658af8,%edx
f0104bde:	89 02                	mov    %eax,(%edx)
f0104be0:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0104be3:	c1 e0 04             	shl    $0x4,%eax
f0104be6:	05 f8 8a 65 f0       	add    $0xf0658af8,%eax
f0104beb:	8b 00                	mov    (%eax),%eax
f0104bed:	85 c0                	test   %eax,%eax
f0104bef:	75 9d                	jne    f0104b8e <sched_print_all+0xe1>
f0104bf1:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0104bf5:	75 97                	jne    f0104b8e <sched_print_all+0xe1>
f0104bf7:	eb 13                	jmp    f0104c0c <sched_print_all+0x15f>
				cprintf("	[%d] %s\n", ptr_env->env_id, ptr_env->prog_name);
			}
		}
		else
		{
			cprintf("No processes in READY queue #%d\n", i);
f0104bf9:	83 ec 08             	sub    $0x8,%esp
f0104bfc:	ff 75 f0             	pushl  -0x10(%ebp)
f0104bff:	68 88 4f 13 f0       	push   $0xf0134f88
f0104c04:	e8 24 c0 ff ff       	call   f0100c2d <cprintf>
f0104c09:	83 c4 10             	add    $0x10,%esp
		}
		cprintf("================================================\n");
f0104c0c:	83 ec 0c             	sub    $0xc,%esp
f0104c0f:	68 2c 4f 13 f0       	push   $0xf0134f2c
f0104c14:	e8 14 c0 ff ff       	call   f0100c2d <cprintf>
f0104c19:	83 c4 10             	add    $0x10,%esp
	else
	{
		cprintf("\nNo processes in NEW queue\n");
	}
	cprintf("================================================\n");
	for (int i = 0 ; i < num_of_ready_queues ; i++)
f0104c1c:	ff 45 f0             	incl   -0x10(%ebp)
f0104c1f:	a0 bc 0e 6c f0       	mov    0xf06c0ebc,%al
f0104c24:	0f b6 c0             	movzbl %al,%eax
f0104c27:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0104c2a:	0f 8f 24 ff ff ff    	jg     f0104b54 <sched_print_all+0xa7>
		{
			cprintf("No processes in READY queue #%d\n", i);
		}
		cprintf("================================================\n");
	}
	if (!LIST_EMPTY(&env_exit_queue))
f0104c30:	a1 44 ea 6b f0       	mov    0xf06bea44,%eax
f0104c35:	85 c0                	test   %eax,%eax
f0104c37:	74 6c                	je     f0104ca5 <sched_print_all+0x1f8>
	{
		cprintf("The processes in EXIT queue are:\n");
f0104c39:	83 ec 0c             	sub    $0xc,%esp
f0104c3c:	68 ac 4f 13 f0       	push   $0xf0134fac
f0104c41:	e8 e7 bf ff ff       	call   f0100c2d <cprintf>
f0104c46:	83 c4 10             	add    $0x10,%esp
		LIST_FOREACH(ptr_env, &env_exit_queue)
f0104c49:	a1 44 ea 6b f0       	mov    0xf06bea44,%eax
f0104c4e:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0104c51:	eb 29                	jmp    f0104c7c <sched_print_all+0x1cf>
		{
			cprintf("	[%d] %s\n", ptr_env->env_id, ptr_env->prog_name);
f0104c53:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104c56:	8d 90 18 da 01 00    	lea    0x1da18(%eax),%edx
f0104c5c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104c5f:	8b 40 4c             	mov    0x4c(%eax),%eax
f0104c62:	83 ec 04             	sub    $0x4,%esp
f0104c65:	52                   	push   %edx
f0104c66:	50                   	push   %eax
f0104c67:	68 06 4f 13 f0       	push   $0xf0134f06
f0104c6c:	e8 bc bf ff ff       	call   f0100c2d <cprintf>
f0104c71:	83 c4 10             	add    $0x10,%esp
		cprintf("================================================\n");
	}
	if (!LIST_EMPTY(&env_exit_queue))
	{
		cprintf("The processes in EXIT queue are:\n");
		LIST_FOREACH(ptr_env, &env_exit_queue)
f0104c74:	a1 4c ea 6b f0       	mov    0xf06bea4c,%eax
f0104c79:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0104c7c:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0104c80:	74 08                	je     f0104c8a <sched_print_all+0x1dd>
f0104c82:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104c85:	8b 40 44             	mov    0x44(%eax),%eax
f0104c88:	eb 05                	jmp    f0104c8f <sched_print_all+0x1e2>
f0104c8a:	b8 00 00 00 00       	mov    $0x0,%eax
f0104c8f:	a3 4c ea 6b f0       	mov    %eax,0xf06bea4c
f0104c94:	a1 4c ea 6b f0       	mov    0xf06bea4c,%eax
f0104c99:	85 c0                	test   %eax,%eax
f0104c9b:	75 b6                	jne    f0104c53 <sched_print_all+0x1a6>
f0104c9d:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0104ca1:	75 b0                	jne    f0104c53 <sched_print_all+0x1a6>
	}
	else
	{
		cprintf("No processes in EXIT queue\n");
	}
}
f0104ca3:	eb 10                	jmp    f0104cb5 <sched_print_all+0x208>
			cprintf("	[%d] %s\n", ptr_env->env_id, ptr_env->prog_name);
		}
	}
	else
	{
		cprintf("No processes in EXIT queue\n");
f0104ca5:	83 ec 0c             	sub    $0xc,%esp
f0104ca8:	68 ce 4f 13 f0       	push   $0xf0134fce
f0104cad:	e8 7b bf ff ff       	call   f0100c2d <cprintf>
f0104cb2:	83 c4 10             	add    $0x10,%esp
	}
}
f0104cb5:	90                   	nop
f0104cb6:	c9                   	leave  
f0104cb7:	c3                   	ret    

f0104cb8 <sched_run_all>:

void sched_run_all()
{
f0104cb8:	55                   	push   %ebp
f0104cb9:	89 e5                	mov    %esp,%ebp
f0104cbb:	83 ec 18             	sub    $0x18,%esp
	struct Env* ptr_env=NULL;
f0104cbe:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	LIST_FOREACH(ptr_env, &env_new_queue)
f0104cc5:	a1 78 0e 6c f0       	mov    0xf06c0e78,%eax
f0104cca:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0104ccd:	eb 24                	jmp    f0104cf3 <sched_run_all+0x3b>
	{
		sched_remove_new(ptr_env);
f0104ccf:	83 ec 0c             	sub    $0xc,%esp
f0104cd2:	ff 75 f4             	pushl  -0xc(%ebp)
f0104cd5:	e8 46 fc ff ff       	call   f0104920 <sched_remove_new>
f0104cda:	83 c4 10             	add    $0x10,%esp
		sched_insert_ready(ptr_env);
f0104cdd:	83 ec 0c             	sub    $0xc,%esp
f0104ce0:	ff 75 f4             	pushl  -0xc(%ebp)
f0104ce3:	e8 cc fa ff ff       	call   f01047b4 <sched_insert_ready>
f0104ce8:	83 c4 10             	add    $0x10,%esp
}

void sched_run_all()
{
	struct Env* ptr_env=NULL;
	LIST_FOREACH(ptr_env, &env_new_queue)
f0104ceb:	a1 80 0e 6c f0       	mov    0xf06c0e80,%eax
f0104cf0:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0104cf3:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0104cf7:	74 08                	je     f0104d01 <sched_run_all+0x49>
f0104cf9:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104cfc:	8b 40 44             	mov    0x44(%eax),%eax
f0104cff:	eb 05                	jmp    f0104d06 <sched_run_all+0x4e>
f0104d01:	b8 00 00 00 00       	mov    $0x0,%eax
f0104d06:	a3 80 0e 6c f0       	mov    %eax,0xf06c0e80
f0104d0b:	a1 80 0e 6c f0       	mov    0xf06c0e80,%eax
f0104d10:	85 c0                	test   %eax,%eax
f0104d12:	75 bb                	jne    f0104ccf <sched_run_all+0x17>
f0104d14:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0104d18:	75 b5                	jne    f0104ccf <sched_run_all+0x17>
	{
		sched_remove_new(ptr_env);
		sched_insert_ready(ptr_env);
	}
	/*2015*///if scheduler not run yet, then invoke it!
	if (scheduler_status == SCH_STOPPED)
f0104d1a:	a1 94 0e 6c f0       	mov    0xf06c0e94,%eax
f0104d1f:	85 c0                	test   %eax,%eax
f0104d21:	75 05                	jne    f0104d28 <sched_run_all+0x70>
		fos_scheduler();
f0104d23:	e8 c3 f8 ff ff       	call   f01045eb <fos_scheduler>
}
f0104d28:	90                   	nop
f0104d29:	c9                   	leave  
f0104d2a:	c3                   	ret    

f0104d2b <sched_kill_all>:

void sched_kill_all()
{
f0104d2b:	55                   	push   %ebp
f0104d2c:	89 e5                	mov    %esp,%ebp
f0104d2e:	83 ec 18             	sub    $0x18,%esp
	struct Env* ptr_env ;
	if (!LIST_EMPTY(&env_new_queue))
f0104d31:	a1 78 0e 6c f0       	mov    0xf06c0e78,%eax
f0104d36:	85 c0                	test   %eax,%eax
f0104d38:	0f 84 98 00 00 00    	je     f0104dd6 <sched_kill_all+0xab>
	{
		cprintf("\nKILLING the processes in the NEW queue...\n");
f0104d3e:	83 ec 0c             	sub    $0xc,%esp
f0104d41:	68 ec 4f 13 f0       	push   $0xf0134fec
f0104d46:	e8 e2 be ff ff       	call   f0100c2d <cprintf>
f0104d4b:	83 c4 10             	add    $0x10,%esp
		LIST_FOREACH(ptr_env, &env_new_queue)
f0104d4e:	a1 78 0e 6c f0       	mov    0xf06c0e78,%eax
f0104d53:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0104d56:	eb 55                	jmp    f0104dad <sched_kill_all+0x82>
		{
			cprintf("	killing[%d] %s...", ptr_env->env_id, ptr_env->prog_name);
f0104d58:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104d5b:	8d 90 18 da 01 00    	lea    0x1da18(%eax),%edx
f0104d61:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104d64:	8b 40 4c             	mov    0x4c(%eax),%eax
f0104d67:	83 ec 04             	sub    $0x4,%esp
f0104d6a:	52                   	push   %edx
f0104d6b:	50                   	push   %eax
f0104d6c:	68 18 50 13 f0       	push   $0xf0135018
f0104d71:	e8 b7 be ff ff       	call   f0100c2d <cprintf>
f0104d76:	83 c4 10             	add    $0x10,%esp
			sched_remove_new(ptr_env);
f0104d79:	83 ec 0c             	sub    $0xc,%esp
f0104d7c:	ff 75 f4             	pushl  -0xc(%ebp)
f0104d7f:	e8 9c fb ff ff       	call   f0104920 <sched_remove_new>
f0104d84:	83 c4 10             	add    $0x10,%esp
			env_free(ptr_env);
f0104d87:	83 ec 0c             	sub    $0xc,%esp
f0104d8a:	ff 75 f4             	pushl  -0xc(%ebp)
f0104d8d:	e8 ff 45 00 00       	call   f0109391 <env_free>
f0104d92:	83 c4 10             	add    $0x10,%esp
			cprintf("DONE\n");
f0104d95:	83 ec 0c             	sub    $0xc,%esp
f0104d98:	68 2b 50 13 f0       	push   $0xf013502b
f0104d9d:	e8 8b be ff ff       	call   f0100c2d <cprintf>
f0104da2:	83 c4 10             	add    $0x10,%esp
{
	struct Env* ptr_env ;
	if (!LIST_EMPTY(&env_new_queue))
	{
		cprintf("\nKILLING the processes in the NEW queue...\n");
		LIST_FOREACH(ptr_env, &env_new_queue)
f0104da5:	a1 80 0e 6c f0       	mov    0xf06c0e80,%eax
f0104daa:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0104dad:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0104db1:	74 08                	je     f0104dbb <sched_kill_all+0x90>
f0104db3:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104db6:	8b 40 44             	mov    0x44(%eax),%eax
f0104db9:	eb 05                	jmp    f0104dc0 <sched_kill_all+0x95>
f0104dbb:	b8 00 00 00 00       	mov    $0x0,%eax
f0104dc0:	a3 80 0e 6c f0       	mov    %eax,0xf06c0e80
f0104dc5:	a1 80 0e 6c f0       	mov    0xf06c0e80,%eax
f0104dca:	85 c0                	test   %eax,%eax
f0104dcc:	75 8a                	jne    f0104d58 <sched_kill_all+0x2d>
f0104dce:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0104dd2:	75 84                	jne    f0104d58 <sched_kill_all+0x2d>
f0104dd4:	eb 10                	jmp    f0104de6 <sched_kill_all+0xbb>
			cprintf("DONE\n");
		}
	}
	else
	{
		cprintf("No processes in NEW queue\n");
f0104dd6:	83 ec 0c             	sub    $0xc,%esp
f0104dd9:	68 31 50 13 f0       	push   $0xf0135031
f0104dde:	e8 4a be ff ff       	call   f0100c2d <cprintf>
f0104de3:	83 c4 10             	add    $0x10,%esp
	}
	cprintf("================================================\n");
f0104de6:	83 ec 0c             	sub    $0xc,%esp
f0104de9:	68 2c 4f 13 f0       	push   $0xf0134f2c
f0104dee:	e8 3a be ff ff       	call   f0100c2d <cprintf>
f0104df3:	83 c4 10             	add    $0x10,%esp
	for (int i = 0 ; i < num_of_ready_queues ; i++)
f0104df6:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f0104dfd:	e9 a0 01 00 00       	jmp    f0104fa2 <sched_kill_all+0x277>
	{
		if (!LIST_EMPTY(&(env_ready_queues[i])))
f0104e02:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0104e05:	c1 e0 04             	shl    $0x4,%eax
f0104e08:	05 f0 8a 65 f0       	add    $0xf0658af0,%eax
f0104e0d:	8b 00                	mov    (%eax),%eax
f0104e0f:	85 c0                	test   %eax,%eax
f0104e11:	0f 84 65 01 00 00    	je     f0104f7c <sched_kill_all+0x251>
		{
			cprintf("KILLING the processes in the READY queue #%d...\n", i);
f0104e17:	83 ec 08             	sub    $0x8,%esp
f0104e1a:	ff 75 f0             	pushl  -0x10(%ebp)
f0104e1d:	68 4c 50 13 f0       	push   $0xf013504c
f0104e22:	e8 06 be ff ff       	call   f0100c2d <cprintf>
f0104e27:	83 c4 10             	add    $0x10,%esp
			LIST_FOREACH(ptr_env, &(env_ready_queues[i]))
f0104e2a:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0104e2d:	c1 e0 04             	shl    $0x4,%eax
f0104e30:	05 f0 8a 65 f0       	add    $0xf0658af0,%eax
f0104e35:	8b 00                	mov    (%eax),%eax
f0104e37:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0104e3a:	e9 fb 00 00 00       	jmp    f0104f3a <sched_kill_all+0x20f>
			{
				cprintf("	killing[%d] %s...", ptr_env->env_id, ptr_env->prog_name);
f0104e3f:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104e42:	8d 90 18 da 01 00    	lea    0x1da18(%eax),%edx
f0104e48:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104e4b:	8b 40 4c             	mov    0x4c(%eax),%eax
f0104e4e:	83 ec 04             	sub    $0x4,%esp
f0104e51:	52                   	push   %edx
f0104e52:	50                   	push   %eax
f0104e53:	68 18 50 13 f0       	push   $0xf0135018
f0104e58:	e8 d0 bd ff ff       	call   f0100c2d <cprintf>
f0104e5d:	83 c4 10             	add    $0x10,%esp
				LIST_REMOVE(&(env_ready_queues[i]), ptr_env);
f0104e60:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0104e64:	75 17                	jne    f0104e7d <sched_kill_all+0x152>
f0104e66:	83 ec 04             	sub    $0x4,%esp
f0104e69:	68 64 4e 13 f0       	push   $0xf0134e64
f0104e6e:	68 76 01 00 00       	push   $0x176
f0104e73:	68 53 4e 13 f0       	push   $0xf0134e53
f0104e78:	e8 29 b3 ff ff       	call   f01001a6 <_panic>
f0104e7d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104e80:	8b 40 44             	mov    0x44(%eax),%eax
f0104e83:	85 c0                	test   %eax,%eax
f0104e85:	74 11                	je     f0104e98 <sched_kill_all+0x16d>
f0104e87:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104e8a:	8b 40 44             	mov    0x44(%eax),%eax
f0104e8d:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0104e90:	8b 52 48             	mov    0x48(%edx),%edx
f0104e93:	89 50 48             	mov    %edx,0x48(%eax)
f0104e96:	eb 14                	jmp    f0104eac <sched_kill_all+0x181>
f0104e98:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104e9b:	8b 40 48             	mov    0x48(%eax),%eax
f0104e9e:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0104ea1:	c1 e2 04             	shl    $0x4,%edx
f0104ea4:	81 c2 f4 8a 65 f0    	add    $0xf0658af4,%edx
f0104eaa:	89 02                	mov    %eax,(%edx)
f0104eac:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104eaf:	8b 40 48             	mov    0x48(%eax),%eax
f0104eb2:	85 c0                	test   %eax,%eax
f0104eb4:	74 11                	je     f0104ec7 <sched_kill_all+0x19c>
f0104eb6:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104eb9:	8b 40 48             	mov    0x48(%eax),%eax
f0104ebc:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0104ebf:	8b 52 44             	mov    0x44(%edx),%edx
f0104ec2:	89 50 44             	mov    %edx,0x44(%eax)
f0104ec5:	eb 14                	jmp    f0104edb <sched_kill_all+0x1b0>
f0104ec7:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104eca:	8b 40 44             	mov    0x44(%eax),%eax
f0104ecd:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0104ed0:	c1 e2 04             	shl    $0x4,%edx
f0104ed3:	81 c2 f0 8a 65 f0    	add    $0xf0658af0,%edx
f0104ed9:	89 02                	mov    %eax,(%edx)
f0104edb:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104ede:	c7 40 44 00 00 00 00 	movl   $0x0,0x44(%eax)
f0104ee5:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104ee8:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f0104eef:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0104ef2:	c1 e0 04             	shl    $0x4,%eax
f0104ef5:	05 fc 8a 65 f0       	add    $0xf0658afc,%eax
f0104efa:	8b 00                	mov    (%eax),%eax
f0104efc:	8d 50 ff             	lea    -0x1(%eax),%edx
f0104eff:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0104f02:	c1 e0 04             	shl    $0x4,%eax
f0104f05:	05 fc 8a 65 f0       	add    $0xf0658afc,%eax
f0104f0a:	89 10                	mov    %edx,(%eax)
				env_free(ptr_env);
f0104f0c:	83 ec 0c             	sub    $0xc,%esp
f0104f0f:	ff 75 f4             	pushl  -0xc(%ebp)
f0104f12:	e8 7a 44 00 00       	call   f0109391 <env_free>
f0104f17:	83 c4 10             	add    $0x10,%esp
				cprintf("DONE\n");
f0104f1a:	83 ec 0c             	sub    $0xc,%esp
f0104f1d:	68 2b 50 13 f0       	push   $0xf013502b
f0104f22:	e8 06 bd ff ff       	call   f0100c2d <cprintf>
f0104f27:	83 c4 10             	add    $0x10,%esp
	for (int i = 0 ; i < num_of_ready_queues ; i++)
	{
		if (!LIST_EMPTY(&(env_ready_queues[i])))
		{
			cprintf("KILLING the processes in the READY queue #%d...\n", i);
			LIST_FOREACH(ptr_env, &(env_ready_queues[i]))
f0104f2a:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0104f2d:	c1 e0 04             	shl    $0x4,%eax
f0104f30:	05 f8 8a 65 f0       	add    $0xf0658af8,%eax
f0104f35:	8b 00                	mov    (%eax),%eax
f0104f37:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0104f3a:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0104f3e:	74 08                	je     f0104f48 <sched_kill_all+0x21d>
f0104f40:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104f43:	8b 40 44             	mov    0x44(%eax),%eax
f0104f46:	eb 05                	jmp    f0104f4d <sched_kill_all+0x222>
f0104f48:	b8 00 00 00 00       	mov    $0x0,%eax
f0104f4d:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0104f50:	c1 e2 04             	shl    $0x4,%edx
f0104f53:	81 c2 f8 8a 65 f0    	add    $0xf0658af8,%edx
f0104f59:	89 02                	mov    %eax,(%edx)
f0104f5b:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0104f5e:	c1 e0 04             	shl    $0x4,%eax
f0104f61:	05 f8 8a 65 f0       	add    $0xf0658af8,%eax
f0104f66:	8b 00                	mov    (%eax),%eax
f0104f68:	85 c0                	test   %eax,%eax
f0104f6a:	0f 85 cf fe ff ff    	jne    f0104e3f <sched_kill_all+0x114>
f0104f70:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0104f74:	0f 85 c5 fe ff ff    	jne    f0104e3f <sched_kill_all+0x114>
f0104f7a:	eb 13                	jmp    f0104f8f <sched_kill_all+0x264>
				cprintf("DONE\n");
			}
		}
		else
		{
			cprintf("No processes in READY queue #%d\n",i);
f0104f7c:	83 ec 08             	sub    $0x8,%esp
f0104f7f:	ff 75 f0             	pushl  -0x10(%ebp)
f0104f82:	68 88 4f 13 f0       	push   $0xf0134f88
f0104f87:	e8 a1 bc ff ff       	call   f0100c2d <cprintf>
f0104f8c:	83 c4 10             	add    $0x10,%esp
		}
		cprintf("================================================\n");
f0104f8f:	83 ec 0c             	sub    $0xc,%esp
f0104f92:	68 2c 4f 13 f0       	push   $0xf0134f2c
f0104f97:	e8 91 bc ff ff       	call   f0100c2d <cprintf>
f0104f9c:	83 c4 10             	add    $0x10,%esp
	else
	{
		cprintf("No processes in NEW queue\n");
	}
	cprintf("================================================\n");
	for (int i = 0 ; i < num_of_ready_queues ; i++)
f0104f9f:	ff 45 f0             	incl   -0x10(%ebp)
f0104fa2:	a0 bc 0e 6c f0       	mov    0xf06c0ebc,%al
f0104fa7:	0f b6 c0             	movzbl %al,%eax
f0104faa:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0104fad:	0f 8f 4f fe ff ff    	jg     f0104e02 <sched_kill_all+0xd7>
			cprintf("No processes in READY queue #%d\n",i);
		}
		cprintf("================================================\n");
	}

	if (!LIST_EMPTY(&env_exit_queue))
f0104fb3:	a1 44 ea 6b f0       	mov    0xf06bea44,%eax
f0104fb8:	85 c0                	test   %eax,%eax
f0104fba:	0f 84 98 00 00 00    	je     f0105058 <sched_kill_all+0x32d>
	{
		cprintf("KILLING the processes in the EXIT queue...\n");
f0104fc0:	83 ec 0c             	sub    $0xc,%esp
f0104fc3:	68 80 50 13 f0       	push   $0xf0135080
f0104fc8:	e8 60 bc ff ff       	call   f0100c2d <cprintf>
f0104fcd:	83 c4 10             	add    $0x10,%esp
		LIST_FOREACH(ptr_env, &env_exit_queue)
f0104fd0:	a1 44 ea 6b f0       	mov    0xf06bea44,%eax
f0104fd5:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0104fd8:	eb 55                	jmp    f010502f <sched_kill_all+0x304>
		{
			cprintf("	killing[%d] %s...", ptr_env->env_id, ptr_env->prog_name);
f0104fda:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104fdd:	8d 90 18 da 01 00    	lea    0x1da18(%eax),%edx
f0104fe3:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104fe6:	8b 40 4c             	mov    0x4c(%eax),%eax
f0104fe9:	83 ec 04             	sub    $0x4,%esp
f0104fec:	52                   	push   %edx
f0104fed:	50                   	push   %eax
f0104fee:	68 18 50 13 f0       	push   $0xf0135018
f0104ff3:	e8 35 bc ff ff       	call   f0100c2d <cprintf>
f0104ff8:	83 c4 10             	add    $0x10,%esp
			sched_remove_exit(ptr_env);
f0104ffb:	83 ec 0c             	sub    $0xc,%esp
f0104ffe:	ff 75 f4             	pushl  -0xc(%ebp)
f0105001:	e8 02 fa ff ff       	call   f0104a08 <sched_remove_exit>
f0105006:	83 c4 10             	add    $0x10,%esp
			env_free(ptr_env);
f0105009:	83 ec 0c             	sub    $0xc,%esp
f010500c:	ff 75 f4             	pushl  -0xc(%ebp)
f010500f:	e8 7d 43 00 00       	call   f0109391 <env_free>
f0105014:	83 c4 10             	add    $0x10,%esp
			cprintf("DONE\n");
f0105017:	83 ec 0c             	sub    $0xc,%esp
f010501a:	68 2b 50 13 f0       	push   $0xf013502b
f010501f:	e8 09 bc ff ff       	call   f0100c2d <cprintf>
f0105024:	83 c4 10             	add    $0x10,%esp
	}

	if (!LIST_EMPTY(&env_exit_queue))
	{
		cprintf("KILLING the processes in the EXIT queue...\n");
		LIST_FOREACH(ptr_env, &env_exit_queue)
f0105027:	a1 4c ea 6b f0       	mov    0xf06bea4c,%eax
f010502c:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010502f:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0105033:	74 08                	je     f010503d <sched_kill_all+0x312>
f0105035:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105038:	8b 40 44             	mov    0x44(%eax),%eax
f010503b:	eb 05                	jmp    f0105042 <sched_kill_all+0x317>
f010503d:	b8 00 00 00 00       	mov    $0x0,%eax
f0105042:	a3 4c ea 6b f0       	mov    %eax,0xf06bea4c
f0105047:	a1 4c ea 6b f0       	mov    0xf06bea4c,%eax
f010504c:	85 c0                	test   %eax,%eax
f010504e:	75 8a                	jne    f0104fda <sched_kill_all+0x2af>
f0105050:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0105054:	75 84                	jne    f0104fda <sched_kill_all+0x2af>
f0105056:	eb 10                	jmp    f0105068 <sched_kill_all+0x33d>
			cprintf("DONE\n");
		}
	}
	else
	{
		cprintf("No processes in EXIT queue\n");
f0105058:	83 ec 0c             	sub    $0xc,%esp
f010505b:	68 ce 4f 13 f0       	push   $0xf0134fce
f0105060:	e8 c8 bb ff ff       	call   f0100c2d <cprintf>
f0105065:	83 c4 10             	add    $0x10,%esp
	}

	//reinvoke the scheduler since there're no env to return back to it
	curenv = NULL;
f0105068:	c7 05 14 82 65 f0 00 	movl   $0x0,0xf0658214
f010506f:	00 00 00 
	fos_scheduler();
f0105072:	e8 74 f5 ff ff       	call   f01045eb <fos_scheduler>

f0105077 <sched_new_env>:
}


void sched_new_env(struct Env* e)
{
f0105077:	55                   	push   %ebp
f0105078:	89 e5                	mov    %esp,%ebp
f010507a:	83 ec 08             	sub    $0x8,%esp
	//add the given env to the scheduler NEW queue
	if (e!=NULL)
f010507d:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0105081:	74 0e                	je     f0105091 <sched_new_env+0x1a>
	{
		sched_insert_new(e);
f0105083:	83 ec 0c             	sub    $0xc,%esp
f0105086:	ff 75 08             	pushl  0x8(%ebp)
f0105089:	e8 66 f8 ff ff       	call   f01048f4 <sched_insert_new>
f010508e:	83 c4 10             	add    $0x10,%esp
	}
}
f0105091:	90                   	nop
f0105092:	c9                   	leave  
f0105093:	c3                   	ret    

f0105094 <sched_run_env>:
	sched_insert_new(e);
}
 */

void sched_run_env(uint32 envId)
{
f0105094:	55                   	push   %ebp
f0105095:	89 e5                	mov    %esp,%ebp
f0105097:	83 ec 18             	sub    $0x18,%esp
	struct Env* ptr_env=NULL;
f010509a:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	LIST_FOREACH(ptr_env, &env_new_queue)
f01050a1:	a1 78 0e 6c f0       	mov    0xf06c0e78,%eax
f01050a6:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01050a9:	eb 3d                	jmp    f01050e8 <sched_run_env+0x54>
	{
		if(ptr_env->env_id == envId)
f01050ab:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01050ae:	8b 40 4c             	mov    0x4c(%eax),%eax
f01050b1:	3b 45 08             	cmp    0x8(%ebp),%eax
f01050b4:	75 2a                	jne    f01050e0 <sched_run_env+0x4c>
		{
			sched_remove_new(ptr_env);
f01050b6:	83 ec 0c             	sub    $0xc,%esp
f01050b9:	ff 75 f4             	pushl  -0xc(%ebp)
f01050bc:	e8 5f f8 ff ff       	call   f0104920 <sched_remove_new>
f01050c1:	83 c4 10             	add    $0x10,%esp
			sched_insert_ready(ptr_env);
f01050c4:	83 ec 0c             	sub    $0xc,%esp
f01050c7:	ff 75 f4             	pushl  -0xc(%ebp)
f01050ca:	e8 e5 f6 ff ff       	call   f01047b4 <sched_insert_ready>
f01050cf:	83 c4 10             	add    $0x10,%esp

			/*2015*///if scheduler not run yet, then invoke it!
			if (scheduler_status == SCH_STOPPED)
f01050d2:	a1 94 0e 6c f0       	mov    0xf06c0e94,%eax
f01050d7:	85 c0                	test   %eax,%eax
f01050d9:	75 36                	jne    f0105111 <sched_run_env+0x7d>
			{
				fos_scheduler();
f01050db:	e8 0b f5 ff ff       	call   f01045eb <fos_scheduler>
 */

void sched_run_env(uint32 envId)
{
	struct Env* ptr_env=NULL;
	LIST_FOREACH(ptr_env, &env_new_queue)
f01050e0:	a1 80 0e 6c f0       	mov    0xf06c0e80,%eax
f01050e5:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01050e8:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01050ec:	74 08                	je     f01050f6 <sched_run_env+0x62>
f01050ee:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01050f1:	8b 40 44             	mov    0x44(%eax),%eax
f01050f4:	eb 05                	jmp    f01050fb <sched_run_env+0x67>
f01050f6:	b8 00 00 00 00       	mov    $0x0,%eax
f01050fb:	a3 80 0e 6c f0       	mov    %eax,0xf06c0e80
f0105100:	a1 80 0e 6c f0       	mov    0xf06c0e80,%eax
f0105105:	85 c0                	test   %eax,%eax
f0105107:	75 a2                	jne    f01050ab <sched_run_env+0x17>
f0105109:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010510d:	75 9c                	jne    f01050ab <sched_run_env+0x17>
	//	LIST_FOREACH(ptr_env, &env_ready_queue)
	//	{
	//		cprintf("%s - %d\n", ptr_env->prog_name, ptr_env->env_id);
	//	}

}
f010510f:	eb 01                	jmp    f0105112 <sched_run_env+0x7e>
			/*2015*///if scheduler not run yet, then invoke it!
			if (scheduler_status == SCH_STOPPED)
			{
				fos_scheduler();
			}
			break;
f0105111:	90                   	nop
	//	LIST_FOREACH(ptr_env, &env_ready_queue)
	//	{
	//		cprintf("%s - %d\n", ptr_env->prog_name, ptr_env->env_id);
	//	}

}
f0105112:	90                   	nop
f0105113:	c9                   	leave  
f0105114:	c3                   	ret    

f0105115 <sched_exit_env>:

void sched_exit_env(uint32 envId)
{
f0105115:	55                   	push   %ebp
f0105116:	89 e5                	mov    %esp,%ebp
f0105118:	83 ec 18             	sub    $0x18,%esp
	struct Env* ptr_env=NULL;
f010511b:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	int found = 0;
f0105122:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	if (!found)
f0105129:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f010512d:	75 59                	jne    f0105188 <sched_exit_env+0x73>
	{
		LIST_FOREACH(ptr_env, &env_new_queue)
f010512f:	a1 78 0e 6c f0       	mov    0xf06c0e78,%eax
f0105134:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0105137:	eb 28                	jmp    f0105161 <sched_exit_env+0x4c>
				{
			if(ptr_env->env_id == envId)
f0105139:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010513c:	8b 40 4c             	mov    0x4c(%eax),%eax
f010513f:	3b 45 08             	cmp    0x8(%ebp),%eax
f0105142:	75 15                	jne    f0105159 <sched_exit_env+0x44>
			{
				sched_remove_new(ptr_env);
f0105144:	83 ec 0c             	sub    $0xc,%esp
f0105147:	ff 75 f4             	pushl  -0xc(%ebp)
f010514a:	e8 d1 f7 ff ff       	call   f0104920 <sched_remove_new>
f010514f:	83 c4 10             	add    $0x10,%esp
				found = 1;
f0105152:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
{
	struct Env* ptr_env=NULL;
	int found = 0;
	if (!found)
	{
		LIST_FOREACH(ptr_env, &env_new_queue)
f0105159:	a1 80 0e 6c f0       	mov    0xf06c0e80,%eax
f010515e:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0105161:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0105165:	74 08                	je     f010516f <sched_exit_env+0x5a>
f0105167:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010516a:	8b 40 44             	mov    0x44(%eax),%eax
f010516d:	eb 05                	jmp    f0105174 <sched_exit_env+0x5f>
f010516f:	b8 00 00 00 00       	mov    $0x0,%eax
f0105174:	a3 80 0e 6c f0       	mov    %eax,0xf06c0e80
f0105179:	a1 80 0e 6c f0       	mov    0xf06c0e80,%eax
f010517e:	85 c0                	test   %eax,%eax
f0105180:	75 b7                	jne    f0105139 <sched_exit_env+0x24>
f0105182:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0105186:	75 b1                	jne    f0105139 <sched_exit_env+0x24>
				found = 1;
				//			return;
			}
				}
	}
	if (!found)
f0105188:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f010518c:	0f 85 6e 01 00 00    	jne    f0105300 <sched_exit_env+0x1eb>
	{
		for (int i = 0 ; i < num_of_ready_queues ; i++)
f0105192:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f0105199:	e9 4e 01 00 00       	jmp    f01052ec <sched_exit_env+0x1d7>
		{
			if (!LIST_EMPTY(&(env_ready_queues[i])))
f010519e:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01051a1:	c1 e0 04             	shl    $0x4,%eax
f01051a4:	05 f0 8a 65 f0       	add    $0xf0658af0,%eax
f01051a9:	8b 00                	mov    (%eax),%eax
f01051ab:	85 c0                	test   %eax,%eax
f01051ad:	0f 84 30 01 00 00    	je     f01052e3 <sched_exit_env+0x1ce>
			{
				ptr_env=NULL;
f01051b3:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
				LIST_FOREACH(ptr_env, &(env_ready_queues[i]))
f01051ba:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01051bd:	c1 e0 04             	shl    $0x4,%eax
f01051c0:	05 f0 8a 65 f0       	add    $0xf0658af0,%eax
f01051c5:	8b 00                	mov    (%eax),%eax
f01051c7:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01051ca:	e9 d4 00 00 00       	jmp    f01052a3 <sched_exit_env+0x18e>
				{
					if(ptr_env->env_id == envId)
f01051cf:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01051d2:	8b 40 4c             	mov    0x4c(%eax),%eax
f01051d5:	3b 45 08             	cmp    0x8(%ebp),%eax
f01051d8:	0f 85 b5 00 00 00    	jne    f0105293 <sched_exit_env+0x17e>
					{
						LIST_REMOVE(&(env_ready_queues[i]), ptr_env);
f01051de:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01051e2:	75 17                	jne    f01051fb <sched_exit_env+0xe6>
f01051e4:	83 ec 04             	sub    $0x4,%esp
f01051e7:	68 64 4e 13 f0       	push   $0xf0134e64
f01051ec:	68 e1 01 00 00       	push   $0x1e1
f01051f1:	68 53 4e 13 f0       	push   $0xf0134e53
f01051f6:	e8 ab af ff ff       	call   f01001a6 <_panic>
f01051fb:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01051fe:	8b 40 44             	mov    0x44(%eax),%eax
f0105201:	85 c0                	test   %eax,%eax
f0105203:	74 11                	je     f0105216 <sched_exit_env+0x101>
f0105205:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105208:	8b 40 44             	mov    0x44(%eax),%eax
f010520b:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010520e:	8b 52 48             	mov    0x48(%edx),%edx
f0105211:	89 50 48             	mov    %edx,0x48(%eax)
f0105214:	eb 14                	jmp    f010522a <sched_exit_env+0x115>
f0105216:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105219:	8b 40 48             	mov    0x48(%eax),%eax
f010521c:	8b 55 ec             	mov    -0x14(%ebp),%edx
f010521f:	c1 e2 04             	shl    $0x4,%edx
f0105222:	81 c2 f4 8a 65 f0    	add    $0xf0658af4,%edx
f0105228:	89 02                	mov    %eax,(%edx)
f010522a:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010522d:	8b 40 48             	mov    0x48(%eax),%eax
f0105230:	85 c0                	test   %eax,%eax
f0105232:	74 11                	je     f0105245 <sched_exit_env+0x130>
f0105234:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105237:	8b 40 48             	mov    0x48(%eax),%eax
f010523a:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010523d:	8b 52 44             	mov    0x44(%edx),%edx
f0105240:	89 50 44             	mov    %edx,0x44(%eax)
f0105243:	eb 14                	jmp    f0105259 <sched_exit_env+0x144>
f0105245:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105248:	8b 40 44             	mov    0x44(%eax),%eax
f010524b:	8b 55 ec             	mov    -0x14(%ebp),%edx
f010524e:	c1 e2 04             	shl    $0x4,%edx
f0105251:	81 c2 f0 8a 65 f0    	add    $0xf0658af0,%edx
f0105257:	89 02                	mov    %eax,(%edx)
f0105259:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010525c:	c7 40 44 00 00 00 00 	movl   $0x0,0x44(%eax)
f0105263:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105266:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f010526d:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0105270:	c1 e0 04             	shl    $0x4,%eax
f0105273:	05 fc 8a 65 f0       	add    $0xf0658afc,%eax
f0105278:	8b 00                	mov    (%eax),%eax
f010527a:	8d 50 ff             	lea    -0x1(%eax),%edx
f010527d:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0105280:	c1 e0 04             	shl    $0x4,%eax
f0105283:	05 fc 8a 65 f0       	add    $0xf0658afc,%eax
f0105288:	89 10                	mov    %edx,(%eax)
						found = 1;
f010528a:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
						break;
f0105291:	eb 50                	jmp    f01052e3 <sched_exit_env+0x1ce>
		for (int i = 0 ; i < num_of_ready_queues ; i++)
		{
			if (!LIST_EMPTY(&(env_ready_queues[i])))
			{
				ptr_env=NULL;
				LIST_FOREACH(ptr_env, &(env_ready_queues[i]))
f0105293:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0105296:	c1 e0 04             	shl    $0x4,%eax
f0105299:	05 f8 8a 65 f0       	add    $0xf0658af8,%eax
f010529e:	8b 00                	mov    (%eax),%eax
f01052a0:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01052a3:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01052a7:	74 08                	je     f01052b1 <sched_exit_env+0x19c>
f01052a9:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01052ac:	8b 40 44             	mov    0x44(%eax),%eax
f01052af:	eb 05                	jmp    f01052b6 <sched_exit_env+0x1a1>
f01052b1:	b8 00 00 00 00       	mov    $0x0,%eax
f01052b6:	8b 55 ec             	mov    -0x14(%ebp),%edx
f01052b9:	c1 e2 04             	shl    $0x4,%edx
f01052bc:	81 c2 f8 8a 65 f0    	add    $0xf0658af8,%edx
f01052c2:	89 02                	mov    %eax,(%edx)
f01052c4:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01052c7:	c1 e0 04             	shl    $0x4,%eax
f01052ca:	05 f8 8a 65 f0       	add    $0xf0658af8,%eax
f01052cf:	8b 00                	mov    (%eax),%eax
f01052d1:	85 c0                	test   %eax,%eax
f01052d3:	0f 85 f6 fe ff ff    	jne    f01051cf <sched_exit_env+0xba>
f01052d9:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01052dd:	0f 85 ec fe ff ff    	jne    f01051cf <sched_exit_env+0xba>
						found = 1;
						break;
					}
				}
			}
			if (found)
f01052e3:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f01052e7:	75 16                	jne    f01052ff <sched_exit_env+0x1ea>
			}
				}
	}
	if (!found)
	{
		for (int i = 0 ; i < num_of_ready_queues ; i++)
f01052e9:	ff 45 ec             	incl   -0x14(%ebp)
f01052ec:	a0 bc 0e 6c f0       	mov    0xf06c0ebc,%al
f01052f1:	0f b6 c0             	movzbl %al,%eax
f01052f4:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f01052f7:	0f 8f a1 fe ff ff    	jg     f010519e <sched_exit_env+0x89>
f01052fd:	eb 01                	jmp    f0105300 <sched_exit_env+0x1eb>
						break;
					}
				}
			}
			if (found)
				break;
f01052ff:	90                   	nop
		}
	}
	if (!found)
f0105300:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0105304:	75 1c                	jne    f0105322 <sched_exit_env+0x20d>
	{
		if (curenv->env_id == envId)
f0105306:	a1 14 82 65 f0       	mov    0xf0658214,%eax
f010530b:	8b 40 4c             	mov    0x4c(%eax),%eax
f010530e:	3b 45 08             	cmp    0x8(%ebp),%eax
f0105311:	75 0f                	jne    f0105322 <sched_exit_env+0x20d>
		{
			ptr_env = curenv;
f0105313:	a1 14 82 65 f0       	mov    0xf0658214,%eax
f0105318:	89 45 f4             	mov    %eax,-0xc(%ebp)
			found = 1;
f010531b:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
		}
	}

	if (found)
f0105322:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0105326:	74 2a                	je     f0105352 <sched_exit_env+0x23d>
	{
		sched_insert_exit(ptr_env);
f0105328:	83 ec 0c             	sub    $0xc,%esp
f010532b:	ff 75 f4             	pushl  -0xc(%ebp)
f010532e:	e8 92 f6 ff ff       	call   f01049c5 <sched_insert_exit>
f0105333:	83 c4 10             	add    $0x10,%esp

		//If it's the curenv, then reinvoke the scheduler as there's no meaning to return back to an exited env
		if (curenv->env_id == envId)
f0105336:	a1 14 82 65 f0       	mov    0xf0658214,%eax
f010533b:	8b 40 4c             	mov    0x4c(%eax),%eax
f010533e:	3b 45 08             	cmp    0x8(%ebp),%eax
f0105341:	75 0f                	jne    f0105352 <sched_exit_env+0x23d>
		{
			curenv = NULL;
f0105343:	c7 05 14 82 65 f0 00 	movl   $0x0,0xf0658214
f010534a:	00 00 00 
			fos_scheduler();
f010534d:	e8 99 f2 ff ff       	call   f01045eb <fos_scheduler>
		}
	}
}
f0105352:	90                   	nop
f0105353:	c9                   	leave  
f0105354:	c3                   	ret    

f0105355 <sched_exit_all_ready_envs>:

/*2018*/
void sched_exit_all_ready_envs()
{
f0105355:	55                   	push   %ebp
f0105356:	89 e5                	mov    %esp,%ebp
f0105358:	83 ec 18             	sub    $0x18,%esp
	struct Env* ptr_env=NULL;
f010535b:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	for (int i = 0 ; i < num_of_ready_queues ; i++)
f0105362:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f0105369:	e9 3e 01 00 00       	jmp    f01054ac <sched_exit_all_ready_envs+0x157>
	{
		if (!LIST_EMPTY(&(env_ready_queues[i])))
f010536e:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0105371:	c1 e0 04             	shl    $0x4,%eax
f0105374:	05 f0 8a 65 f0       	add    $0xf0658af0,%eax
f0105379:	8b 00                	mov    (%eax),%eax
f010537b:	85 c0                	test   %eax,%eax
f010537d:	0f 84 26 01 00 00    	je     f01054a9 <sched_exit_all_ready_envs+0x154>
		{
			ptr_env=NULL;
f0105383:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
			LIST_FOREACH(ptr_env, &(env_ready_queues[i]))
f010538a:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010538d:	c1 e0 04             	shl    $0x4,%eax
f0105390:	05 f0 8a 65 f0       	add    $0xf0658af0,%eax
f0105395:	8b 00                	mov    (%eax),%eax
f0105397:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010539a:	e9 ca 00 00 00       	jmp    f0105469 <sched_exit_all_ready_envs+0x114>
			{
				LIST_REMOVE(&(env_ready_queues[i]), ptr_env);
f010539f:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01053a3:	75 17                	jne    f01053bc <sched_exit_all_ready_envs+0x67>
f01053a5:	83 ec 04             	sub    $0x4,%esp
f01053a8:	68 64 4e 13 f0       	push   $0xf0134e64
f01053ad:	68 0c 02 00 00       	push   $0x20c
f01053b2:	68 53 4e 13 f0       	push   $0xf0134e53
f01053b7:	e8 ea ad ff ff       	call   f01001a6 <_panic>
f01053bc:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01053bf:	8b 40 44             	mov    0x44(%eax),%eax
f01053c2:	85 c0                	test   %eax,%eax
f01053c4:	74 11                	je     f01053d7 <sched_exit_all_ready_envs+0x82>
f01053c6:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01053c9:	8b 40 44             	mov    0x44(%eax),%eax
f01053cc:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01053cf:	8b 52 48             	mov    0x48(%edx),%edx
f01053d2:	89 50 48             	mov    %edx,0x48(%eax)
f01053d5:	eb 14                	jmp    f01053eb <sched_exit_all_ready_envs+0x96>
f01053d7:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01053da:	8b 40 48             	mov    0x48(%eax),%eax
f01053dd:	8b 55 f0             	mov    -0x10(%ebp),%edx
f01053e0:	c1 e2 04             	shl    $0x4,%edx
f01053e3:	81 c2 f4 8a 65 f0    	add    $0xf0658af4,%edx
f01053e9:	89 02                	mov    %eax,(%edx)
f01053eb:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01053ee:	8b 40 48             	mov    0x48(%eax),%eax
f01053f1:	85 c0                	test   %eax,%eax
f01053f3:	74 11                	je     f0105406 <sched_exit_all_ready_envs+0xb1>
f01053f5:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01053f8:	8b 40 48             	mov    0x48(%eax),%eax
f01053fb:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01053fe:	8b 52 44             	mov    0x44(%edx),%edx
f0105401:	89 50 44             	mov    %edx,0x44(%eax)
f0105404:	eb 14                	jmp    f010541a <sched_exit_all_ready_envs+0xc5>
f0105406:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105409:	8b 40 44             	mov    0x44(%eax),%eax
f010540c:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010540f:	c1 e2 04             	shl    $0x4,%edx
f0105412:	81 c2 f0 8a 65 f0    	add    $0xf0658af0,%edx
f0105418:	89 02                	mov    %eax,(%edx)
f010541a:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010541d:	c7 40 44 00 00 00 00 	movl   $0x0,0x44(%eax)
f0105424:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105427:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f010542e:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0105431:	c1 e0 04             	shl    $0x4,%eax
f0105434:	05 fc 8a 65 f0       	add    $0xf0658afc,%eax
f0105439:	8b 00                	mov    (%eax),%eax
f010543b:	8d 50 ff             	lea    -0x1(%eax),%edx
f010543e:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0105441:	c1 e0 04             	shl    $0x4,%eax
f0105444:	05 fc 8a 65 f0       	add    $0xf0658afc,%eax
f0105449:	89 10                	mov    %edx,(%eax)
				sched_insert_exit(ptr_env);
f010544b:	83 ec 0c             	sub    $0xc,%esp
f010544e:	ff 75 f4             	pushl  -0xc(%ebp)
f0105451:	e8 6f f5 ff ff       	call   f01049c5 <sched_insert_exit>
f0105456:	83 c4 10             	add    $0x10,%esp
	for (int i = 0 ; i < num_of_ready_queues ; i++)
	{
		if (!LIST_EMPTY(&(env_ready_queues[i])))
		{
			ptr_env=NULL;
			LIST_FOREACH(ptr_env, &(env_ready_queues[i]))
f0105459:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010545c:	c1 e0 04             	shl    $0x4,%eax
f010545f:	05 f8 8a 65 f0       	add    $0xf0658af8,%eax
f0105464:	8b 00                	mov    (%eax),%eax
f0105466:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0105469:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010546d:	74 08                	je     f0105477 <sched_exit_all_ready_envs+0x122>
f010546f:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105472:	8b 40 44             	mov    0x44(%eax),%eax
f0105475:	eb 05                	jmp    f010547c <sched_exit_all_ready_envs+0x127>
f0105477:	b8 00 00 00 00       	mov    $0x0,%eax
f010547c:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010547f:	c1 e2 04             	shl    $0x4,%edx
f0105482:	81 c2 f8 8a 65 f0    	add    $0xf0658af8,%edx
f0105488:	89 02                	mov    %eax,(%edx)
f010548a:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010548d:	c1 e0 04             	shl    $0x4,%eax
f0105490:	05 f8 8a 65 f0       	add    $0xf0658af8,%eax
f0105495:	8b 00                	mov    (%eax),%eax
f0105497:	85 c0                	test   %eax,%eax
f0105499:	0f 85 00 ff ff ff    	jne    f010539f <sched_exit_all_ready_envs+0x4a>
f010549f:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01054a3:	0f 85 f6 fe ff ff    	jne    f010539f <sched_exit_all_ready_envs+0x4a>

/*2018*/
void sched_exit_all_ready_envs()
{
	struct Env* ptr_env=NULL;
	for (int i = 0 ; i < num_of_ready_queues ; i++)
f01054a9:	ff 45 f0             	incl   -0x10(%ebp)
f01054ac:	a0 bc 0e 6c f0       	mov    0xf06c0ebc,%al
f01054b1:	0f b6 c0             	movzbl %al,%eax
f01054b4:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f01054b7:	0f 8f b1 fe ff ff    	jg     f010536e <sched_exit_all_ready_envs+0x19>
				LIST_REMOVE(&(env_ready_queues[i]), ptr_env);
				sched_insert_exit(ptr_env);
			}
		}
	}
}
f01054bd:	90                   	nop
f01054be:	c9                   	leave  
f01054bf:	c3                   	ret    

f01054c0 <sched_kill_env>:

/*2015*/
void sched_kill_env(uint32 envId)
{
f01054c0:	55                   	push   %ebp
f01054c1:	89 e5                	mov    %esp,%ebp
f01054c3:	83 ec 18             	sub    $0x18,%esp
	struct Env* ptr_env=NULL;
f01054c6:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	int found = 0;
f01054cd:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	if (!found)
f01054d4:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f01054d8:	0f 85 a0 00 00 00    	jne    f010557e <sched_kill_env+0xbe>
	{
		LIST_FOREACH(ptr_env, &env_new_queue)
f01054de:	a1 78 0e 6c f0       	mov    0xf06c0e78,%eax
f01054e3:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01054e6:	eb 67                	jmp    f010554f <sched_kill_env+0x8f>
					{
			if(ptr_env->env_id == envId)
f01054e8:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01054eb:	8b 40 4c             	mov    0x4c(%eax),%eax
f01054ee:	3b 45 08             	cmp    0x8(%ebp),%eax
f01054f1:	75 54                	jne    f0105547 <sched_kill_env+0x87>
			{
				cprintf("killing[%d] %s from the NEW queue...", ptr_env->env_id, ptr_env->prog_name);
f01054f3:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01054f6:	8d 90 18 da 01 00    	lea    0x1da18(%eax),%edx
f01054fc:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01054ff:	8b 40 4c             	mov    0x4c(%eax),%eax
f0105502:	83 ec 04             	sub    $0x4,%esp
f0105505:	52                   	push   %edx
f0105506:	50                   	push   %eax
f0105507:	68 ac 50 13 f0       	push   $0xf01350ac
f010550c:	e8 1c b7 ff ff       	call   f0100c2d <cprintf>
f0105511:	83 c4 10             	add    $0x10,%esp
				sched_remove_new(ptr_env);
f0105514:	83 ec 0c             	sub    $0xc,%esp
f0105517:	ff 75 f4             	pushl  -0xc(%ebp)
f010551a:	e8 01 f4 ff ff       	call   f0104920 <sched_remove_new>
f010551f:	83 c4 10             	add    $0x10,%esp
				env_free(ptr_env);
f0105522:	83 ec 0c             	sub    $0xc,%esp
f0105525:	ff 75 f4             	pushl  -0xc(%ebp)
f0105528:	e8 64 3e 00 00       	call   f0109391 <env_free>
f010552d:	83 c4 10             	add    $0x10,%esp
				cprintf("DONE\n");
f0105530:	83 ec 0c             	sub    $0xc,%esp
f0105533:	68 2b 50 13 f0       	push   $0xf013502b
f0105538:	e8 f0 b6 ff ff       	call   f0100c2d <cprintf>
f010553d:	83 c4 10             	add    $0x10,%esp
				found = 1;
f0105540:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
{
	struct Env* ptr_env=NULL;
	int found = 0;
	if (!found)
	{
		LIST_FOREACH(ptr_env, &env_new_queue)
f0105547:	a1 80 0e 6c f0       	mov    0xf06c0e80,%eax
f010554c:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010554f:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0105553:	74 08                	je     f010555d <sched_kill_env+0x9d>
f0105555:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105558:	8b 40 44             	mov    0x44(%eax),%eax
f010555b:	eb 05                	jmp    f0105562 <sched_kill_env+0xa2>
f010555d:	b8 00 00 00 00       	mov    $0x0,%eax
f0105562:	a3 80 0e 6c f0       	mov    %eax,0xf06c0e80
f0105567:	a1 80 0e 6c f0       	mov    0xf06c0e80,%eax
f010556c:	85 c0                	test   %eax,%eax
f010556e:	0f 85 74 ff ff ff    	jne    f01054e8 <sched_kill_env+0x28>
f0105574:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0105578:	0f 85 6a ff ff ff    	jne    f01054e8 <sched_kill_env+0x28>
				found = 1;
				//			return;
			}
					}
	}
	if (!found)
f010557e:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0105582:	0f 85 ad 01 00 00    	jne    f0105735 <sched_kill_env+0x275>
	{
		for (int i = 0 ; i < num_of_ready_queues ; i++)
f0105588:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f010558f:	e9 8d 01 00 00       	jmp    f0105721 <sched_kill_env+0x261>
		{
			if (!LIST_EMPTY(&(env_ready_queues[i])))
f0105594:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0105597:	c1 e0 04             	shl    $0x4,%eax
f010559a:	05 f0 8a 65 f0       	add    $0xf0658af0,%eax
f010559f:	8b 00                	mov    (%eax),%eax
f01055a1:	85 c0                	test   %eax,%eax
f01055a3:	0f 84 6f 01 00 00    	je     f0105718 <sched_kill_env+0x258>
			{
				ptr_env=NULL;
f01055a9:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
				LIST_FOREACH(ptr_env, &(env_ready_queues[i]))
f01055b0:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01055b3:	c1 e0 04             	shl    $0x4,%eax
f01055b6:	05 f0 8a 65 f0       	add    $0xf0658af0,%eax
f01055bb:	8b 00                	mov    (%eax),%eax
f01055bd:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01055c0:	e9 13 01 00 00       	jmp    f01056d8 <sched_kill_env+0x218>
				{
					if(ptr_env->env_id == envId)
f01055c5:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01055c8:	8b 40 4c             	mov    0x4c(%eax),%eax
f01055cb:	3b 45 08             	cmp    0x8(%ebp),%eax
f01055ce:	0f 85 f4 00 00 00    	jne    f01056c8 <sched_kill_env+0x208>
					{
						cprintf("killing[%d] %s from the READY queue #%d...", ptr_env->env_id, ptr_env->prog_name, i);
f01055d4:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01055d7:	8d 90 18 da 01 00    	lea    0x1da18(%eax),%edx
f01055dd:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01055e0:	8b 40 4c             	mov    0x4c(%eax),%eax
f01055e3:	ff 75 ec             	pushl  -0x14(%ebp)
f01055e6:	52                   	push   %edx
f01055e7:	50                   	push   %eax
f01055e8:	68 d4 50 13 f0       	push   $0xf01350d4
f01055ed:	e8 3b b6 ff ff       	call   f0100c2d <cprintf>
f01055f2:	83 c4 10             	add    $0x10,%esp
						LIST_REMOVE(&(env_ready_queues[i]), ptr_env);
f01055f5:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01055f9:	75 17                	jne    f0105612 <sched_kill_env+0x152>
f01055fb:	83 ec 04             	sub    $0x4,%esp
f01055fe:	68 64 4e 13 f0       	push   $0xf0134e64
f0105603:	68 33 02 00 00       	push   $0x233
f0105608:	68 53 4e 13 f0       	push   $0xf0134e53
f010560d:	e8 94 ab ff ff       	call   f01001a6 <_panic>
f0105612:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105615:	8b 40 44             	mov    0x44(%eax),%eax
f0105618:	85 c0                	test   %eax,%eax
f010561a:	74 11                	je     f010562d <sched_kill_env+0x16d>
f010561c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010561f:	8b 40 44             	mov    0x44(%eax),%eax
f0105622:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0105625:	8b 52 48             	mov    0x48(%edx),%edx
f0105628:	89 50 48             	mov    %edx,0x48(%eax)
f010562b:	eb 14                	jmp    f0105641 <sched_kill_env+0x181>
f010562d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105630:	8b 40 48             	mov    0x48(%eax),%eax
f0105633:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0105636:	c1 e2 04             	shl    $0x4,%edx
f0105639:	81 c2 f4 8a 65 f0    	add    $0xf0658af4,%edx
f010563f:	89 02                	mov    %eax,(%edx)
f0105641:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105644:	8b 40 48             	mov    0x48(%eax),%eax
f0105647:	85 c0                	test   %eax,%eax
f0105649:	74 11                	je     f010565c <sched_kill_env+0x19c>
f010564b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010564e:	8b 40 48             	mov    0x48(%eax),%eax
f0105651:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0105654:	8b 52 44             	mov    0x44(%edx),%edx
f0105657:	89 50 44             	mov    %edx,0x44(%eax)
f010565a:	eb 14                	jmp    f0105670 <sched_kill_env+0x1b0>
f010565c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010565f:	8b 40 44             	mov    0x44(%eax),%eax
f0105662:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0105665:	c1 e2 04             	shl    $0x4,%edx
f0105668:	81 c2 f0 8a 65 f0    	add    $0xf0658af0,%edx
f010566e:	89 02                	mov    %eax,(%edx)
f0105670:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105673:	c7 40 44 00 00 00 00 	movl   $0x0,0x44(%eax)
f010567a:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010567d:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f0105684:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0105687:	c1 e0 04             	shl    $0x4,%eax
f010568a:	05 fc 8a 65 f0       	add    $0xf0658afc,%eax
f010568f:	8b 00                	mov    (%eax),%eax
f0105691:	8d 50 ff             	lea    -0x1(%eax),%edx
f0105694:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0105697:	c1 e0 04             	shl    $0x4,%eax
f010569a:	05 fc 8a 65 f0       	add    $0xf0658afc,%eax
f010569f:	89 10                	mov    %edx,(%eax)
						env_free(ptr_env);
f01056a1:	83 ec 0c             	sub    $0xc,%esp
f01056a4:	ff 75 f4             	pushl  -0xc(%ebp)
f01056a7:	e8 e5 3c 00 00       	call   f0109391 <env_free>
f01056ac:	83 c4 10             	add    $0x10,%esp
						cprintf("DONE\n");
f01056af:	83 ec 0c             	sub    $0xc,%esp
f01056b2:	68 2b 50 13 f0       	push   $0xf013502b
f01056b7:	e8 71 b5 ff ff       	call   f0100c2d <cprintf>
f01056bc:	83 c4 10             	add    $0x10,%esp
						found = 1;
f01056bf:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
						break;
f01056c6:	eb 50                	jmp    f0105718 <sched_kill_env+0x258>
		for (int i = 0 ; i < num_of_ready_queues ; i++)
		{
			if (!LIST_EMPTY(&(env_ready_queues[i])))
			{
				ptr_env=NULL;
				LIST_FOREACH(ptr_env, &(env_ready_queues[i]))
f01056c8:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01056cb:	c1 e0 04             	shl    $0x4,%eax
f01056ce:	05 f8 8a 65 f0       	add    $0xf0658af8,%eax
f01056d3:	8b 00                	mov    (%eax),%eax
f01056d5:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01056d8:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01056dc:	74 08                	je     f01056e6 <sched_kill_env+0x226>
f01056de:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01056e1:	8b 40 44             	mov    0x44(%eax),%eax
f01056e4:	eb 05                	jmp    f01056eb <sched_kill_env+0x22b>
f01056e6:	b8 00 00 00 00       	mov    $0x0,%eax
f01056eb:	8b 55 ec             	mov    -0x14(%ebp),%edx
f01056ee:	c1 e2 04             	shl    $0x4,%edx
f01056f1:	81 c2 f8 8a 65 f0    	add    $0xf0658af8,%edx
f01056f7:	89 02                	mov    %eax,(%edx)
f01056f9:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01056fc:	c1 e0 04             	shl    $0x4,%eax
f01056ff:	05 f8 8a 65 f0       	add    $0xf0658af8,%eax
f0105704:	8b 00                	mov    (%eax),%eax
f0105706:	85 c0                	test   %eax,%eax
f0105708:	0f 85 b7 fe ff ff    	jne    f01055c5 <sched_kill_env+0x105>
f010570e:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0105712:	0f 85 ad fe ff ff    	jne    f01055c5 <sched_kill_env+0x105>
						break;
						//return;
					}
				}
			}
			if (found)
f0105718:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f010571c:	75 16                	jne    f0105734 <sched_kill_env+0x274>
			}
					}
	}
	if (!found)
	{
		for (int i = 0 ; i < num_of_ready_queues ; i++)
f010571e:	ff 45 ec             	incl   -0x14(%ebp)
f0105721:	a0 bc 0e 6c f0       	mov    0xf06c0ebc,%al
f0105726:	0f b6 c0             	movzbl %al,%eax
f0105729:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f010572c:	0f 8f 62 fe ff ff    	jg     f0105594 <sched_kill_env+0xd4>
f0105732:	eb 01                	jmp    f0105735 <sched_kill_env+0x275>
						//return;
					}
				}
			}
			if (found)
				break;
f0105734:	90                   	nop
		}
	}
	if (!found)
f0105735:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0105739:	0f 85 a7 00 00 00    	jne    f01057e6 <sched_kill_env+0x326>
	{
		ptr_env=NULL;
f010573f:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
		LIST_FOREACH(ptr_env, &env_exit_queue)
f0105746:	a1 44 ea 6b f0       	mov    0xf06bea44,%eax
f010574b:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010574e:	eb 67                	jmp    f01057b7 <sched_kill_env+0x2f7>
		{
			if(ptr_env->env_id == envId)
f0105750:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105753:	8b 40 4c             	mov    0x4c(%eax),%eax
f0105756:	3b 45 08             	cmp    0x8(%ebp),%eax
f0105759:	75 54                	jne    f01057af <sched_kill_env+0x2ef>
			{
				cprintf("killing[%d] %s from the EXIT queue...", ptr_env->env_id, ptr_env->prog_name);
f010575b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010575e:	8d 90 18 da 01 00    	lea    0x1da18(%eax),%edx
f0105764:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105767:	8b 40 4c             	mov    0x4c(%eax),%eax
f010576a:	83 ec 04             	sub    $0x4,%esp
f010576d:	52                   	push   %edx
f010576e:	50                   	push   %eax
f010576f:	68 00 51 13 f0       	push   $0xf0135100
f0105774:	e8 b4 b4 ff ff       	call   f0100c2d <cprintf>
f0105779:	83 c4 10             	add    $0x10,%esp
				sched_remove_exit(ptr_env);
f010577c:	83 ec 0c             	sub    $0xc,%esp
f010577f:	ff 75 f4             	pushl  -0xc(%ebp)
f0105782:	e8 81 f2 ff ff       	call   f0104a08 <sched_remove_exit>
f0105787:	83 c4 10             	add    $0x10,%esp
				env_free(ptr_env);
f010578a:	83 ec 0c             	sub    $0xc,%esp
f010578d:	ff 75 f4             	pushl  -0xc(%ebp)
f0105790:	e8 fc 3b 00 00       	call   f0109391 <env_free>
f0105795:	83 c4 10             	add    $0x10,%esp
				cprintf("DONE\n");
f0105798:	83 ec 0c             	sub    $0xc,%esp
f010579b:	68 2b 50 13 f0       	push   $0xf013502b
f01057a0:	e8 88 b4 ff ff       	call   f0100c2d <cprintf>
f01057a5:	83 c4 10             	add    $0x10,%esp
				found = 1;
f01057a8:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
		}
	}
	if (!found)
	{
		ptr_env=NULL;
		LIST_FOREACH(ptr_env, &env_exit_queue)
f01057af:	a1 4c ea 6b f0       	mov    0xf06bea4c,%eax
f01057b4:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01057b7:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01057bb:	74 08                	je     f01057c5 <sched_kill_env+0x305>
f01057bd:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01057c0:	8b 40 44             	mov    0x44(%eax),%eax
f01057c3:	eb 05                	jmp    f01057ca <sched_kill_env+0x30a>
f01057c5:	b8 00 00 00 00       	mov    $0x0,%eax
f01057ca:	a3 4c ea 6b f0       	mov    %eax,0xf06bea4c
f01057cf:	a1 4c ea 6b f0       	mov    0xf06bea4c,%eax
f01057d4:	85 c0                	test   %eax,%eax
f01057d6:	0f 85 74 ff ff ff    	jne    f0105750 <sched_kill_env+0x290>
f01057dc:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01057e0:	0f 85 6a ff ff ff    	jne    f0105750 <sched_kill_env+0x290>
				//return;
			}
		}
	}

	if (!found)
f01057e6:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f01057ea:	0f 85 a0 00 00 00    	jne    f0105890 <sched_kill_env+0x3d0>
	{
		if (curenv->env_id == envId)
f01057f0:	a1 14 82 65 f0       	mov    0xf0658214,%eax
f01057f5:	8b 40 4c             	mov    0x4c(%eax),%eax
f01057f8:	3b 45 08             	cmp    0x8(%ebp),%eax
f01057fb:	0f 85 8f 00 00 00    	jne    f0105890 <sched_kill_env+0x3d0>
		{
			ptr_env = curenv;
f0105801:	a1 14 82 65 f0       	mov    0xf0658214,%eax
f0105806:	89 45 f4             	mov    %eax,-0xc(%ebp)
			assert(ptr_env->env_id == ENV_RUNNABLE);
f0105809:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010580c:	8b 40 4c             	mov    0x4c(%eax),%eax
f010580f:	83 f8 02             	cmp    $0x2,%eax
f0105812:	74 19                	je     f010582d <sched_kill_env+0x36d>
f0105814:	68 28 51 13 f0       	push   $0xf0135128
f0105819:	68 48 51 13 f0       	push   $0xf0135148
f010581e:	68 56 02 00 00       	push   $0x256
f0105823:	68 53 4e 13 f0       	push   $0xf0134e53
f0105828:	e8 79 a9 ff ff       	call   f01001a6 <_panic>
			cprintf("killing a RUNNABLE environment [%d] %s...", ptr_env->env_id, ptr_env->prog_name);
f010582d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105830:	8d 90 18 da 01 00    	lea    0x1da18(%eax),%edx
f0105836:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105839:	8b 40 4c             	mov    0x4c(%eax),%eax
f010583c:	83 ec 04             	sub    $0x4,%esp
f010583f:	52                   	push   %edx
f0105840:	50                   	push   %eax
f0105841:	68 60 51 13 f0       	push   $0xf0135160
f0105846:	e8 e2 b3 ff ff       	call   f0100c2d <cprintf>
f010584b:	83 c4 10             	add    $0x10,%esp
			env_free(ptr_env);
f010584e:	83 ec 0c             	sub    $0xc,%esp
f0105851:	ff 75 f4             	pushl  -0xc(%ebp)
f0105854:	e8 38 3b 00 00       	call   f0109391 <env_free>
f0105859:	83 c4 10             	add    $0x10,%esp
			cprintf("DONE\n");
f010585c:	83 ec 0c             	sub    $0xc,%esp
f010585f:	68 2b 50 13 f0       	push   $0xf013502b
f0105864:	e8 c4 b3 ff ff       	call   f0100c2d <cprintf>
f0105869:	83 c4 10             	add    $0x10,%esp
			found = 1;
f010586c:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
			//If it's the curenv, then reset it and reinvoke the scheduler
			//as there's no meaning to return back to a killed env
			//lcr3(K_PHYSICAL_ADDRESS(ptr_page_directory));
			lcr3(phys_page_directory);
f0105873:	a1 e8 0e 6c f0       	mov    0xf06c0ee8,%eax
f0105878:	89 45 e8             	mov    %eax,-0x18(%ebp)
f010587b:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010587e:	0f 22 d8             	mov    %eax,%cr3
			curenv = NULL;
f0105881:	c7 05 14 82 65 f0 00 	movl   $0x0,0xf0658214
f0105888:	00 00 00 
			fos_scheduler();
f010588b:	e8 5b ed ff ff       	call   f01045eb <fos_scheduler>
		}
	}
}
f0105890:	90                   	nop
f0105891:	c9                   	leave  
f0105892:	c3                   	ret    

f0105893 <clock_interrupt_handler>:


void clock_interrupt_handler()
{
f0105893:	55                   	push   %ebp
f0105894:	89 e5                	mov    %esp,%ebp
f0105896:	83 ec 08             	sub    $0x8,%esp
	//cputchar('i');

	if(isPageReplacmentAlgorithmLRU(PG_REP_LRU_TIME_APPROX))
f0105899:	83 ec 0c             	sub    $0xc,%esp
f010589c:	6a 01                	push   $0x1
f010589e:	e8 ca 7c 00 00       	call   f010d56d <isPageReplacmentAlgorithmLRU>
f01058a3:	83 c4 10             	add    $0x10,%esp
f01058a6:	85 c0                	test   %eax,%eax
f01058a8:	74 05                	je     f01058af <clock_interrupt_handler+0x1c>
	{
		update_WS_time_stamps();
f01058aa:	e8 05 00 00 00       	call   f01058b4 <update_WS_time_stamps>
	}
	//cprintf("Clock Handler\n") ;
	fos_scheduler();
f01058af:	e8 37 ed ff ff       	call   f01045eb <fos_scheduler>

f01058b4 <update_WS_time_stamps>:
}

void update_WS_time_stamps()
{
f01058b4:	55                   	push   %ebp
f01058b5:	89 e5                	mov    %esp,%ebp
f01058b7:	53                   	push   %ebx
f01058b8:	83 ec 24             	sub    $0x24,%esp
	struct Env *curr_env_ptr = curenv;
f01058bb:	a1 14 82 65 f0       	mov    0xf0658214,%eax
f01058c0:	89 45 ec             	mov    %eax,-0x14(%ebp)

	if(curr_env_ptr != NULL)
f01058c3:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f01058c7:	0f 84 cf 01 00 00    	je     f0105a9c <update_WS_time_stamps+0x1e8>
	{
		{
			int i ;
			for (i = 0 ; i < (curr_env_ptr->page_WS_max_size); i++)
f01058cd:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01058d4:	e9 ce 00 00 00       	jmp    f01059a7 <update_WS_time_stamps+0xf3>
			{
				if( curr_env_ptr->ptr_pageWorkingSet[i].empty != 1)
f01058d9:	8b 4d ec             	mov    -0x14(%ebp),%ecx
f01058dc:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01058df:	89 d0                	mov    %edx,%eax
f01058e1:	01 c0                	add    %eax,%eax
f01058e3:	01 d0                	add    %edx,%eax
f01058e5:	c1 e0 03             	shl    $0x3,%eax
f01058e8:	01 c8                	add    %ecx,%eax
f01058ea:	83 c0 7c             	add    $0x7c,%eax
f01058ed:	8a 00                	mov    (%eax),%al
f01058ef:	3c 01                	cmp    $0x1,%al
f01058f1:	0f 84 ad 00 00 00    	je     f01059a4 <update_WS_time_stamps+0xf0>
				{
					//update the time if the page was referenced
					uint32 page_va = curr_env_ptr->ptr_pageWorkingSet[i].virtual_address ;
f01058f7:	8b 4d ec             	mov    -0x14(%ebp),%ecx
f01058fa:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01058fd:	89 d0                	mov    %edx,%eax
f01058ff:	01 c0                	add    %eax,%eax
f0105901:	01 d0                	add    %edx,%eax
f0105903:	c1 e0 03             	shl    $0x3,%eax
f0105906:	01 c8                	add    %ecx,%eax
f0105908:	83 c0 78             	add    $0x78,%eax
f010590b:	8b 00                	mov    (%eax),%eax
f010590d:	89 45 e8             	mov    %eax,-0x18(%ebp)
					uint32 perm = pt_get_page_permissions(curr_env_ptr->env_page_directory, page_va) ;
f0105910:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0105913:	8b 40 5c             	mov    0x5c(%eax),%eax
f0105916:	83 ec 08             	sub    $0x8,%esp
f0105919:	ff 75 e8             	pushl  -0x18(%ebp)
f010591c:	50                   	push   %eax
f010591d:	e8 86 1e 00 00       	call   f01077a8 <pt_get_page_permissions>
f0105922:	83 c4 10             	add    $0x10,%esp
f0105925:	89 45 e4             	mov    %eax,-0x1c(%ebp)
					uint32 oldTimeStamp = curr_env_ptr->ptr_pageWorkingSet[i].time_stamp;
f0105928:	8b 4d ec             	mov    -0x14(%ebp),%ecx
f010592b:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010592e:	89 d0                	mov    %edx,%eax
f0105930:	01 c0                	add    %eax,%eax
f0105932:	01 d0                	add    %edx,%eax
f0105934:	c1 e0 03             	shl    $0x3,%eax
f0105937:	01 c8                	add    %ecx,%eax
f0105939:	83 e8 80             	sub    $0xffffff80,%eax
f010593c:	8b 00                	mov    (%eax),%eax
f010593e:	89 45 e0             	mov    %eax,-0x20(%ebp)

					if (perm & PERM_USED)
f0105941:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0105944:	83 e0 20             	and    $0x20,%eax
f0105947:	85 c0                	test   %eax,%eax
f0105949:	74 3b                	je     f0105986 <update_WS_time_stamps+0xd2>
					{
						curr_env_ptr->ptr_pageWorkingSet[i].time_stamp = (oldTimeStamp>>2) | 0x80000000;
f010594b:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010594e:	c1 e8 02             	shr    $0x2,%eax
f0105951:	0d 00 00 00 80       	or     $0x80000000,%eax
f0105956:	89 c1                	mov    %eax,%ecx
f0105958:	8b 5d ec             	mov    -0x14(%ebp),%ebx
f010595b:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010595e:	89 d0                	mov    %edx,%eax
f0105960:	01 c0                	add    %eax,%eax
f0105962:	01 d0                	add    %edx,%eax
f0105964:	c1 e0 03             	shl    $0x3,%eax
f0105967:	01 d8                	add    %ebx,%eax
f0105969:	83 e8 80             	sub    $0xffffff80,%eax
f010596c:	89 08                	mov    %ecx,(%eax)
						pt_set_page_permissions(curr_env_ptr->env_page_directory, page_va, 0 , PERM_USED) ;
f010596e:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0105971:	8b 40 5c             	mov    0x5c(%eax),%eax
f0105974:	6a 20                	push   $0x20
f0105976:	6a 00                	push   $0x0
f0105978:	ff 75 e8             	pushl  -0x18(%ebp)
f010597b:	50                   	push   %eax
f010597c:	e8 73 1d 00 00       	call   f01076f4 <pt_set_page_permissions>
f0105981:	83 c4 10             	add    $0x10,%esp
f0105984:	eb 1e                	jmp    f01059a4 <update_WS_time_stamps+0xf0>
					}
					else
					{
						curr_env_ptr->ptr_pageWorkingSet[i].time_stamp = (oldTimeStamp>>2);
f0105986:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0105989:	c1 e8 02             	shr    $0x2,%eax
f010598c:	89 c1                	mov    %eax,%ecx
f010598e:	8b 5d ec             	mov    -0x14(%ebp),%ebx
f0105991:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0105994:	89 d0                	mov    %edx,%eax
f0105996:	01 c0                	add    %eax,%eax
f0105998:	01 d0                	add    %edx,%eax
f010599a:	c1 e0 03             	shl    $0x3,%eax
f010599d:	01 d8                	add    %ebx,%eax
f010599f:	83 e8 80             	sub    $0xffffff80,%eax
f01059a2:	89 08                	mov    %ecx,(%eax)

	if(curr_env_ptr != NULL)
	{
		{
			int i ;
			for (i = 0 ; i < (curr_env_ptr->page_WS_max_size); i++)
f01059a4:	ff 45 f4             	incl   -0xc(%ebp)
f01059a7:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01059aa:	8b 50 74             	mov    0x74(%eax),%edx
f01059ad:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01059b0:	39 c2                	cmp    %eax,%edx
f01059b2:	0f 87 21 ff ff ff    	ja     f01058d9 <update_WS_time_stamps+0x25>
			}
		}

		{
			int t ;
			for (t = 0 ; t < __TWS_MAX_SIZE; t++)
f01059b8:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f01059bf:	e9 ce 00 00 00       	jmp    f0105a92 <update_WS_time_stamps+0x1de>
			{
				if( curr_env_ptr->__ptr_tws[t].empty != 1)
f01059c4:	8b 4d ec             	mov    -0x14(%ebp),%ecx
f01059c7:	8b 55 f0             	mov    -0x10(%ebp),%edx
f01059ca:	89 d0                	mov    %edx,%eax
f01059cc:	01 c0                	add    %eax,%eax
f01059ce:	01 d0                	add    %edx,%eax
f01059d0:	c1 e0 03             	shl    $0x3,%eax
f01059d3:	01 c8                	add    %ecx,%eax
f01059d5:	05 3c d5 01 00       	add    $0x1d53c,%eax
f01059da:	8a 00                	mov    (%eax),%al
f01059dc:	3c 01                	cmp    $0x1,%al
f01059de:	0f 84 ab 00 00 00    	je     f0105a8f <update_WS_time_stamps+0x1db>
				{
					//update the time if the page was referenced
					uint32 table_va = curr_env_ptr->__ptr_tws[t].virtual_address;
f01059e4:	8b 4d ec             	mov    -0x14(%ebp),%ecx
f01059e7:	8b 55 f0             	mov    -0x10(%ebp),%edx
f01059ea:	89 d0                	mov    %edx,%eax
f01059ec:	01 c0                	add    %eax,%eax
f01059ee:	01 d0                	add    %edx,%eax
f01059f0:	c1 e0 03             	shl    $0x3,%eax
f01059f3:	01 c8                	add    %ecx,%eax
f01059f5:	05 38 d5 01 00       	add    $0x1d538,%eax
f01059fa:	8b 00                	mov    (%eax),%eax
f01059fc:	89 45 dc             	mov    %eax,-0x24(%ebp)
					uint32 oldTimeStamp = curr_env_ptr->__ptr_tws[t].time_stamp;
f01059ff:	8b 4d ec             	mov    -0x14(%ebp),%ecx
f0105a02:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0105a05:	89 d0                	mov    %edx,%eax
f0105a07:	01 c0                	add    %eax,%eax
f0105a09:	01 d0                	add    %edx,%eax
f0105a0b:	c1 e0 03             	shl    $0x3,%eax
f0105a0e:	01 c8                	add    %ecx,%eax
f0105a10:	05 40 d5 01 00       	add    $0x1d540,%eax
f0105a15:	8b 00                	mov    (%eax),%eax
f0105a17:	89 45 d8             	mov    %eax,-0x28(%ebp)

					if (pd_is_table_used(curr_env_ptr->env_page_directory, table_va))
f0105a1a:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0105a1d:	8b 40 5c             	mov    0x5c(%eax),%eax
f0105a20:	83 ec 08             	sub    $0x8,%esp
f0105a23:	ff 75 dc             	pushl  -0x24(%ebp)
f0105a26:	50                   	push   %eax
f0105a27:	e8 9b 1e 00 00       	call   f01078c7 <pd_is_table_used>
f0105a2c:	83 c4 10             	add    $0x10,%esp
f0105a2f:	85 c0                	test   %eax,%eax
f0105a31:	74 3c                	je     f0105a6f <update_WS_time_stamps+0x1bb>
					{
						curr_env_ptr->__ptr_tws[t].time_stamp = (oldTimeStamp>>2) | 0x80000000;
f0105a33:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0105a36:	c1 e8 02             	shr    $0x2,%eax
f0105a39:	0d 00 00 00 80       	or     $0x80000000,%eax
f0105a3e:	89 c1                	mov    %eax,%ecx
f0105a40:	8b 5d ec             	mov    -0x14(%ebp),%ebx
f0105a43:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0105a46:	89 d0                	mov    %edx,%eax
f0105a48:	01 c0                	add    %eax,%eax
f0105a4a:	01 d0                	add    %edx,%eax
f0105a4c:	c1 e0 03             	shl    $0x3,%eax
f0105a4f:	01 d8                	add    %ebx,%eax
f0105a51:	05 40 d5 01 00       	add    $0x1d540,%eax
f0105a56:	89 08                	mov    %ecx,(%eax)
						pd_set_table_unused(curr_env_ptr->env_page_directory, table_va);
f0105a58:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0105a5b:	8b 40 5c             	mov    0x5c(%eax),%eax
f0105a5e:	83 ec 08             	sub    $0x8,%esp
f0105a61:	ff 75 dc             	pushl  -0x24(%ebp)
f0105a64:	50                   	push   %eax
f0105a65:	e8 81 1e 00 00       	call   f01078eb <pd_set_table_unused>
f0105a6a:	83 c4 10             	add    $0x10,%esp
f0105a6d:	eb 20                	jmp    f0105a8f <update_WS_time_stamps+0x1db>
					}
					else
					{
						curr_env_ptr->__ptr_tws[t].time_stamp = (oldTimeStamp>>2);
f0105a6f:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0105a72:	c1 e8 02             	shr    $0x2,%eax
f0105a75:	89 c1                	mov    %eax,%ecx
f0105a77:	8b 5d ec             	mov    -0x14(%ebp),%ebx
f0105a7a:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0105a7d:	89 d0                	mov    %edx,%eax
f0105a7f:	01 c0                	add    %eax,%eax
f0105a81:	01 d0                	add    %edx,%eax
f0105a83:	c1 e0 03             	shl    $0x3,%eax
f0105a86:	01 d8                	add    %ebx,%eax
f0105a88:	05 40 d5 01 00       	add    $0x1d540,%eax
f0105a8d:	89 08                	mov    %ecx,(%eax)
			}
		}

		{
			int t ;
			for (t = 0 ; t < __TWS_MAX_SIZE; t++)
f0105a8f:	ff 45 f0             	incl   -0x10(%ebp)
f0105a92:	83 7d f0 31          	cmpl   $0x31,-0x10(%ebp)
f0105a96:	0f 8e 28 ff ff ff    	jle    f01059c4 <update_WS_time_stamps+0x110>
					}
				}
			}
		}
	}
}
f0105a9c:	90                   	nop
f0105a9d:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f0105aa0:	c9                   	leave  
f0105aa1:	c3                   	ret    

f0105aa2 <pic_init>:
static bool didinit;

/* Initialize the 8259A interrupt controllers. */
void
pic_init(void)
{
f0105aa2:	55                   	push   %ebp
f0105aa3:	89 e5                	mov    %esp,%ebp
f0105aa5:	83 ec 58             	sub    $0x58,%esp
	didinit = 1;
f0105aa8:	c7 05 0c 82 65 f0 01 	movl   $0x1,0xf065820c
f0105aaf:	00 00 00 
f0105ab2:	c7 45 f4 21 00 00 00 	movl   $0x21,-0xc(%ebp)
f0105ab9:	c6 45 b2 ff          	movb   $0xff,-0x4e(%ebp)
}

static __inline void
outb(int port, uint8 data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
f0105abd:	8a 45 b2             	mov    -0x4e(%ebp),%al
f0105ac0:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0105ac3:	ee                   	out    %al,(%dx)
f0105ac4:	c7 45 f0 a1 00 00 00 	movl   $0xa1,-0x10(%ebp)
f0105acb:	c6 45 b3 ff          	movb   $0xff,-0x4d(%ebp)
f0105acf:	8a 45 b3             	mov    -0x4d(%ebp),%al
f0105ad2:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0105ad5:	ee                   	out    %al,(%dx)
f0105ad6:	c7 45 ec 20 00 00 00 	movl   $0x20,-0x14(%ebp)
f0105add:	c6 45 b4 11          	movb   $0x11,-0x4c(%ebp)
f0105ae1:	8a 45 b4             	mov    -0x4c(%ebp),%al
f0105ae4:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0105ae7:	ee                   	out    %al,(%dx)
f0105ae8:	c7 45 e8 21 00 00 00 	movl   $0x21,-0x18(%ebp)
f0105aef:	c6 45 b5 20          	movb   $0x20,-0x4b(%ebp)
f0105af3:	8a 45 b5             	mov    -0x4b(%ebp),%al
f0105af6:	8b 55 e8             	mov    -0x18(%ebp),%edx
f0105af9:	ee                   	out    %al,(%dx)
f0105afa:	c7 45 e4 21 00 00 00 	movl   $0x21,-0x1c(%ebp)
f0105b01:	c6 45 b6 04          	movb   $0x4,-0x4a(%ebp)
f0105b05:	8a 45 b6             	mov    -0x4a(%ebp),%al
f0105b08:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f0105b0b:	ee                   	out    %al,(%dx)
f0105b0c:	c7 45 e0 21 00 00 00 	movl   $0x21,-0x20(%ebp)
f0105b13:	c6 45 b7 03          	movb   $0x3,-0x49(%ebp)
f0105b17:	8a 45 b7             	mov    -0x49(%ebp),%al
f0105b1a:	8b 55 e0             	mov    -0x20(%ebp),%edx
f0105b1d:	ee                   	out    %al,(%dx)
f0105b1e:	c7 45 dc a0 00 00 00 	movl   $0xa0,-0x24(%ebp)
f0105b25:	c6 45 b8 11          	movb   $0x11,-0x48(%ebp)
f0105b29:	8a 45 b8             	mov    -0x48(%ebp),%al
f0105b2c:	8b 55 dc             	mov    -0x24(%ebp),%edx
f0105b2f:	ee                   	out    %al,(%dx)
f0105b30:	c7 45 d8 a1 00 00 00 	movl   $0xa1,-0x28(%ebp)
f0105b37:	c6 45 b9 28          	movb   $0x28,-0x47(%ebp)
f0105b3b:	8a 45 b9             	mov    -0x47(%ebp),%al
f0105b3e:	8b 55 d8             	mov    -0x28(%ebp),%edx
f0105b41:	ee                   	out    %al,(%dx)
f0105b42:	c7 45 d4 a1 00 00 00 	movl   $0xa1,-0x2c(%ebp)
f0105b49:	c6 45 ba 02          	movb   $0x2,-0x46(%ebp)
f0105b4d:	8a 45 ba             	mov    -0x46(%ebp),%al
f0105b50:	8b 55 d4             	mov    -0x2c(%ebp),%edx
f0105b53:	ee                   	out    %al,(%dx)
f0105b54:	c7 45 d0 a1 00 00 00 	movl   $0xa1,-0x30(%ebp)
f0105b5b:	c6 45 bb 01          	movb   $0x1,-0x45(%ebp)
f0105b5f:	8a 45 bb             	mov    -0x45(%ebp),%al
f0105b62:	8b 55 d0             	mov    -0x30(%ebp),%edx
f0105b65:	ee                   	out    %al,(%dx)
f0105b66:	c7 45 cc 20 00 00 00 	movl   $0x20,-0x34(%ebp)
f0105b6d:	c6 45 bc 68          	movb   $0x68,-0x44(%ebp)
f0105b71:	8a 45 bc             	mov    -0x44(%ebp),%al
f0105b74:	8b 55 cc             	mov    -0x34(%ebp),%edx
f0105b77:	ee                   	out    %al,(%dx)
f0105b78:	c7 45 c8 20 00 00 00 	movl   $0x20,-0x38(%ebp)
f0105b7f:	c6 45 bd 0a          	movb   $0xa,-0x43(%ebp)
f0105b83:	8a 45 bd             	mov    -0x43(%ebp),%al
f0105b86:	8b 55 c8             	mov    -0x38(%ebp),%edx
f0105b89:	ee                   	out    %al,(%dx)
f0105b8a:	c7 45 c4 a0 00 00 00 	movl   $0xa0,-0x3c(%ebp)
f0105b91:	c6 45 be 68          	movb   $0x68,-0x42(%ebp)
f0105b95:	8a 45 be             	mov    -0x42(%ebp),%al
f0105b98:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0105b9b:	ee                   	out    %al,(%dx)
f0105b9c:	c7 45 c0 a0 00 00 00 	movl   $0xa0,-0x40(%ebp)
f0105ba3:	c6 45 bf 0a          	movb   $0xa,-0x41(%ebp)
f0105ba7:	8a 45 bf             	mov    -0x41(%ebp),%al
f0105baa:	8b 55 c0             	mov    -0x40(%ebp),%edx
f0105bad:	ee                   	out    %al,(%dx)
	outb(IO_PIC1, 0x0a);             /* read IRR by default */

	outb(IO_PIC2, 0x68);               /* OCW3 */
	outb(IO_PIC2, 0x0a);               /* OCW3 */

	if (irq_mask_8259A != 0xFFFF)
f0105bae:	66 a1 b0 08 19 f0    	mov    0xf01908b0,%ax
f0105bb4:	66 83 f8 ff          	cmp    $0xffff,%ax
f0105bb8:	74 15                	je     f0105bcf <pic_init+0x12d>
		irq_setmask_8259A(irq_mask_8259A);
f0105bba:	66 a1 b0 08 19 f0    	mov    0xf01908b0,%ax
f0105bc0:	0f b7 c0             	movzwl %ax,%eax
f0105bc3:	83 ec 0c             	sub    $0xc,%esp
f0105bc6:	50                   	push   %eax
f0105bc7:	e8 06 00 00 00       	call   f0105bd2 <irq_setmask_8259A>
f0105bcc:	83 c4 10             	add    $0x10,%esp
}
f0105bcf:	90                   	nop
f0105bd0:	c9                   	leave  
f0105bd1:	c3                   	ret    

f0105bd2 <irq_setmask_8259A>:

void
irq_setmask_8259A(uint16 mask)
{
f0105bd2:	55                   	push   %ebp
f0105bd3:	89 e5                	mov    %esp,%ebp
f0105bd5:	83 ec 14             	sub    $0x14,%esp
f0105bd8:	8b 45 08             	mov    0x8(%ebp),%eax
f0105bdb:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
	int i;
	irq_mask_8259A = mask;
f0105bdf:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0105be2:	66 a3 b0 08 19 f0    	mov    %ax,0xf01908b0
	if (!didinit)
f0105be8:	a1 0c 82 65 f0       	mov    0xf065820c,%eax
f0105bed:	85 c0                	test   %eax,%eax
f0105bef:	74 34                	je     f0105c25 <irq_setmask_8259A+0x53>
		return;
	outb(IO_PIC1+1, (char)mask);
f0105bf1:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0105bf4:	0f b6 c0             	movzbl %al,%eax
f0105bf7:	c7 45 fc 21 00 00 00 	movl   $0x21,-0x4(%ebp)
f0105bfe:	88 45 f6             	mov    %al,-0xa(%ebp)
f0105c01:	8a 45 f6             	mov    -0xa(%ebp),%al
f0105c04:	8b 55 fc             	mov    -0x4(%ebp),%edx
f0105c07:	ee                   	out    %al,(%dx)
	outb(IO_PIC2+1, (char)(mask >> 8));
f0105c08:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0105c0b:	66 c1 e8 08          	shr    $0x8,%ax
f0105c0f:	0f b6 c0             	movzbl %al,%eax
f0105c12:	c7 45 f8 a1 00 00 00 	movl   $0xa1,-0x8(%ebp)
f0105c19:	88 45 f7             	mov    %al,-0x9(%ebp)
f0105c1c:	8a 45 f7             	mov    -0x9(%ebp),%al
f0105c1f:	8b 55 f8             	mov    -0x8(%ebp),%edx
f0105c22:	ee                   	out    %al,(%dx)
f0105c23:	eb 01                	jmp    f0105c26 <irq_setmask_8259A+0x54>
irq_setmask_8259A(uint16 mask)
{
	int i;
	irq_mask_8259A = mask;
	if (!didinit)
		return;
f0105c25:	90                   	nop
	//cprintf("enabled interrupts:");
	//for (i = 0; i < 16; i++)
		//if (~mask & (1<<i))
			//cprintf(" %d", i);
	//cprintf("\n");
}
f0105c26:	c9                   	leave  
f0105c27:	c3                   	ret    

f0105c28 <initialize_kernel_VM>:
//
// From USER_TOP to USER_LIMIT, the user is allowed to read but not write.
// Above USER_LIMIT the user cannot read (or write).

void initialize_kernel_VM()
{
f0105c28:	55                   	push   %ebp
f0105c29:	89 e5                	mov    %esp,%ebp
f0105c2b:	83 ec 38             	sub    $0x38,%esp
	//panic("initialize_kernel_VM: This function is not finished\n");

	//////////////////////////////////////////////////////////////////////
	// create initial page directory.

	ptr_page_directory = boot_allocate_space(PAGE_SIZE, PAGE_SIZE);
f0105c2e:	83 ec 08             	sub    $0x8,%esp
f0105c31:	68 00 10 00 00       	push   $0x1000
f0105c36:	68 00 10 00 00       	push   $0x1000
f0105c3b:	e8 5d 02 00 00       	call   f0105e9d <boot_allocate_space>
f0105c40:	83 c4 10             	add    $0x10,%esp
f0105c43:	a3 b8 0e 6c f0       	mov    %eax,0xf06c0eb8
	memset(ptr_page_directory, 0, PAGE_SIZE);
f0105c48:	a1 b8 0e 6c f0       	mov    0xf06c0eb8,%eax
f0105c4d:	83 ec 04             	sub    $0x4,%esp
f0105c50:	68 00 10 00 00       	push   $0x1000
f0105c55:	6a 00                	push   $0x0
f0105c57:	50                   	push   %eax
f0105c58:	e8 bc ac 02 00       	call   f0130919 <memset>
f0105c5d:	83 c4 10             	add    $0x10,%esp
	phys_page_directory = STATIC_KERNEL_PHYSICAL_ADDRESS(ptr_page_directory);
f0105c60:	a1 b8 0e 6c f0       	mov    0xf06c0eb8,%eax
f0105c65:	89 45 e8             	mov    %eax,-0x18(%ebp)
f0105c68:	81 7d e8 ff ff ff ef 	cmpl   $0xefffffff,-0x18(%ebp)
f0105c6f:	77 14                	ja     f0105c85 <initialize_kernel_VM+0x5d>
f0105c71:	ff 75 e8             	pushl  -0x18(%ebp)
f0105c74:	68 8c 51 13 f0       	push   $0xf013518c
f0105c79:	6a 45                	push   $0x45
f0105c7b:	68 c0 51 13 f0       	push   $0xf01351c0
f0105c80:	e8 21 a5 ff ff       	call   f01001a6 <_panic>
f0105c85:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0105c88:	05 00 00 00 10       	add    $0x10000000,%eax
f0105c8d:	a3 e8 0e 6c f0       	mov    %eax,0xf06c0ee8
	// Map the kernel stack with VA range :
	//  [KERNEL_STACK_TOP-KERNEL_STACK_SIZE, KERNEL_STACK_TOP),
	// to physical address : "phys_stack_bottom".
	//     Permissions: kernel RW, user NONE
	// Your code goes here:
	boot_map_range(ptr_page_directory, KERNEL_STACK_TOP - KERNEL_STACK_SIZE, KERNEL_STACK_SIZE, STATIC_KERNEL_PHYSICAL_ADDRESS(ptr_stack_bottom), PERM_WRITEABLE) ;
f0105c92:	c7 45 e4 00 80 18 f0 	movl   $0xf0188000,-0x1c(%ebp)
f0105c99:	81 7d e4 ff ff ff ef 	cmpl   $0xefffffff,-0x1c(%ebp)
f0105ca0:	77 14                	ja     f0105cb6 <initialize_kernel_VM+0x8e>
f0105ca2:	ff 75 e4             	pushl  -0x1c(%ebp)
f0105ca5:	68 8c 51 13 f0       	push   $0xf013518c
f0105caa:	6a 4d                	push   $0x4d
f0105cac:	68 c0 51 13 f0       	push   $0xf01351c0
f0105cb1:	e8 f0 a4 ff ff       	call   f01001a6 <_panic>
f0105cb6:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0105cb9:	8d 90 00 00 00 10    	lea    0x10000000(%eax),%edx
f0105cbf:	a1 b8 0e 6c f0       	mov    0xf06c0eb8,%eax
f0105cc4:	83 ec 0c             	sub    $0xc,%esp
f0105cc7:	6a 02                	push   $0x2
f0105cc9:	52                   	push   %edx
f0105cca:	68 00 80 00 00       	push   $0x8000
f0105ccf:	68 00 80 bf ef       	push   $0xefbf8000
f0105cd4:	50                   	push   %eax
f0105cd5:	e8 24 02 00 00       	call   f0105efe <boot_map_range>
f0105cda:	83 c4 20             	add    $0x20,%esp
	// Permissions: kernel RW, user NONE
	// Your code goes here:

	//2016:
	//boot tables
	unsigned long long sva = KERNEL_BASE;
f0105cdd:	c7 45 f0 00 00 00 f0 	movl   $0xf0000000,-0x10(%ebp)
f0105ce4:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	unsigned int nTables=0;
f0105ceb:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
	for (;sva < 0xFFFFFFFF;  sva += PTSIZE)
f0105cf2:	eb 25                	jmp    f0105d19 <initialize_kernel_VM+0xf1>
	{
		++nTables;
f0105cf4:	ff 45 ec             	incl   -0x14(%ebp)
		boot_get_page_table(ptr_page_directory, (uint32)sva, 1);
f0105cf7:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0105cfa:	a1 b8 0e 6c f0       	mov    0xf06c0eb8,%eax
f0105cff:	83 ec 04             	sub    $0x4,%esp
f0105d02:	6a 01                	push   $0x1
f0105d04:	52                   	push   %edx
f0105d05:	50                   	push   %eax
f0105d06:	e8 67 02 00 00       	call   f0105f72 <boot_get_page_table>
f0105d0b:	83 c4 10             	add    $0x10,%esp

	//2016:
	//boot tables
	unsigned long long sva = KERNEL_BASE;
	unsigned int nTables=0;
	for (;sva < 0xFFFFFFFF;  sva += PTSIZE)
f0105d0e:	81 45 f0 00 00 40 00 	addl   $0x400000,-0x10(%ebp)
f0105d15:	83 55 f4 00          	adcl   $0x0,-0xc(%ebp)
f0105d19:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0105d1d:	72 d5                	jb     f0105cf4 <initialize_kernel_VM+0xcc>
f0105d1f:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0105d23:	77 06                	ja     f0105d2b <initialize_kernel_VM+0x103>
f0105d25:	83 7d f0 fe          	cmpl   $0xfffffffe,-0x10(%ebp)
f0105d29:	76 c9                	jbe    f0105cf4 <initialize_kernel_VM+0xcc>
	//    - frames_info -- kernel RW, user NONE
	//    - the image mapped at READ_ONLY_FRAMES_INFO  -- kernel R, user R
	// Your code goes here:
	//cprintf("size of WorkingSetPage = %d\n",sizeof(struct WorkingSetPage));
	uint32 array_size;
	array_size = number_of_frames * sizeof(struct FrameInfo) ;
f0105d2b:	8b 15 50 0e 6c f0    	mov    0xf06c0e50,%edx
f0105d31:	89 d0                	mov    %edx,%eax
f0105d33:	01 c0                	add    %eax,%eax
f0105d35:	01 d0                	add    %edx,%eax
f0105d37:	c1 e0 03             	shl    $0x3,%eax
f0105d3a:	89 45 e0             	mov    %eax,-0x20(%ebp)
	frames_info = boot_allocate_space(array_size, PAGE_SIZE);
f0105d3d:	83 ec 08             	sub    $0x8,%esp
f0105d40:	68 00 10 00 00       	push   $0x1000
f0105d45:	ff 75 e0             	pushl  -0x20(%ebp)
f0105d48:	e8 50 01 00 00       	call   f0105e9d <boot_allocate_space>
f0105d4d:	83 c4 10             	add    $0x10,%esp
f0105d50:	a3 90 0e 6c f0       	mov    %eax,0xf06c0e90
	memset(frames_info, 0, array_size);
f0105d55:	a1 90 0e 6c f0       	mov    0xf06c0e90,%eax
f0105d5a:	83 ec 04             	sub    $0x4,%esp
f0105d5d:	ff 75 e0             	pushl  -0x20(%ebp)
f0105d60:	6a 00                	push   $0x0
f0105d62:	50                   	push   %eax
f0105d63:	e8 b1 ab 02 00       	call   f0130919 <memset>
f0105d68:	83 c4 10             	add    $0x10,%esp
	//2016: Not valid any more since the RAM size exceed the 64 MB limit. This lead to the
	// 		size of "frames_info" can exceed the 4 MB space for "READ_ONLY_FRAMES_INFO"
	//boot_map_range(ptr_page_directory, READ_ONLY_FRAMES_INFO, array_size, STATIC_KERNEL_PHYSICAL_ADDRESS(frames_info),PERM_USER) ;


	uint32 disk_array_size = PAGES_PER_FILE * sizeof(struct FrameInfo);
f0105d6b:	c7 45 dc 00 c0 30 00 	movl   $0x30c000,-0x24(%ebp)
	disk_frames_info = boot_allocate_space(disk_array_size , PAGE_SIZE);
f0105d72:	83 ec 08             	sub    $0x8,%esp
f0105d75:	68 00 10 00 00       	push   $0x1000
f0105d7a:	ff 75 dc             	pushl  -0x24(%ebp)
f0105d7d:	e8 1b 01 00 00       	call   f0105e9d <boot_allocate_space>
f0105d82:	83 c4 10             	add    $0x10,%esp
f0105d85:	a3 e4 8a 65 f0       	mov    %eax,0xf0658ae4
	memset(disk_frames_info , 0, disk_array_size);
f0105d8a:	a1 e4 8a 65 f0       	mov    0xf0658ae4,%eax
f0105d8f:	83 ec 04             	sub    $0x4,%esp
f0105d92:	ff 75 dc             	pushl  -0x24(%ebp)
f0105d95:	6a 00                	push   $0x0
f0105d97:	50                   	push   %eax
f0105d98:	e8 7c ab 02 00       	call   f0130919 <memset>
f0105d9d:	83 c4 10             	add    $0x10,%esp

	// This allows the kernel & user to access any page table entry using a
	// specified VA for each: VPT for kernel and UVPT for User.
	setup_listing_to_all_page_tables_entries();
f0105da0:	e8 02 05 00 00       	call   f01062a7 <setup_listing_to_all_page_tables_entries>
	// Permissions:
	//    - envs itself -- kernel RW, user NONE
	//    - the image of envs mapped at UENVS  -- kernel R, user R

	// LAB 3: Your code here.
	cprintf("Max Envs = %d, Nearest Pow of 2 = %d\n",NENV, NEARPOW2NENV);
f0105da5:	83 ec 0c             	sub    $0xc,%esp
f0105da8:	6a 08                	push   $0x8
f0105daa:	e8 07 97 02 00       	call   f012f4b6 <nearest_pow2_ceil>
f0105daf:	83 c4 10             	add    $0x10,%esp
f0105db2:	83 ec 04             	sub    $0x4,%esp
f0105db5:	50                   	push   %eax
f0105db6:	6a 08                	push   $0x8
f0105db8:	68 e0 51 13 f0       	push   $0xf01351e0
f0105dbd:	e8 6b ae ff ff       	call   f0100c2d <cprintf>
f0105dc2:	83 c4 10             	add    $0x10,%esp
	int envs_size = NENV * sizeof(struct Env) ;
f0105dc5:	c7 45 d8 40 55 0f 00 	movl   $0xf5540,-0x28(%ebp)

	//allocate space for "envs" array aligned on 4KB boundary
	envs = boot_allocate_space(envs_size, PAGE_SIZE);
f0105dcc:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0105dcf:	83 ec 08             	sub    $0x8,%esp
f0105dd2:	68 00 10 00 00       	push   $0x1000
f0105dd7:	50                   	push   %eax
f0105dd8:	e8 c0 00 00 00       	call   f0105e9d <boot_allocate_space>
f0105ddd:	83 c4 10             	add    $0x10,%esp
f0105de0:	a3 10 82 65 f0       	mov    %eax,0xf0658210
	memset(envs , 0, envs_size);
f0105de5:	8b 55 d8             	mov    -0x28(%ebp),%edx
f0105de8:	a1 10 82 65 f0       	mov    0xf0658210,%eax
f0105ded:	83 ec 04             	sub    $0x4,%esp
f0105df0:	52                   	push   %edx
f0105df1:	6a 00                	push   $0x0
f0105df3:	50                   	push   %eax
f0105df4:	e8 20 ab 02 00       	call   f0130919 <memset>
f0105df9:	83 c4 10             	add    $0x10,%esp

	//make the user to access this array by mapping it to UPAGES linear address (UPAGES is in User/Kernel space)
	boot_map_range(ptr_page_directory, UENVS, envs_size, STATIC_KERNEL_PHYSICAL_ADDRESS(envs), PERM_USER) ;
f0105dfc:	a1 10 82 65 f0       	mov    0xf0658210,%eax
f0105e01:	89 45 d4             	mov    %eax,-0x2c(%ebp)
f0105e04:	81 7d d4 ff ff ff ef 	cmpl   $0xefffffff,-0x2c(%ebp)
f0105e0b:	77 17                	ja     f0105e24 <initialize_kernel_VM+0x1fc>
f0105e0d:	ff 75 d4             	pushl  -0x2c(%ebp)
f0105e10:	68 8c 51 13 f0       	push   $0xf013518c
f0105e15:	68 96 00 00 00       	push   $0x96
f0105e1a:	68 c0 51 13 f0       	push   $0xf01351c0
f0105e1f:	e8 82 a3 ff ff       	call   f01001a6 <_panic>
f0105e24:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0105e27:	8d 88 00 00 00 10    	lea    0x10000000(%eax),%ecx
f0105e2d:	8b 55 d8             	mov    -0x28(%ebp),%edx
f0105e30:	a1 b8 0e 6c f0       	mov    0xf06c0eb8,%eax
f0105e35:	83 ec 0c             	sub    $0xc,%esp
f0105e38:	6a 04                	push   $0x4
f0105e3a:	51                   	push   %ecx
f0105e3b:	52                   	push   %edx
f0105e3c:	68 00 00 c0 ee       	push   $0xeec00000
f0105e41:	50                   	push   %eax
f0105e42:	e8 b7 00 00 00       	call   f0105efe <boot_map_range>
f0105e47:	83 c4 20             	add    $0x20,%esp

	//update permissions of the corresponding entry in page directory to make it USER with PERMISSION read only
	ptr_page_directory[PDX(UENVS)] = ptr_page_directory[PDX(UENVS)]|(PERM_USER|(PERM_PRESENT & (~PERM_WRITEABLE)));
f0105e4a:	a1 b8 0e 6c f0       	mov    0xf06c0eb8,%eax
f0105e4f:	05 ec 0e 00 00       	add    $0xeec,%eax
f0105e54:	8b 15 b8 0e 6c f0    	mov    0xf06c0eb8,%edx
f0105e5a:	81 c2 ec 0e 00 00    	add    $0xeec,%edx
f0105e60:	8b 12                	mov    (%edx),%edx
f0105e62:	83 ca 05             	or     $0x5,%edx
f0105e65:	89 10                	mov    %edx,(%eax)
		// map all used pages so far for the kernel
		boot_map_range(ptr_page_directory, KERNEL_BASE, (uint32)ptr_free_mem - KERNEL_BASE, 0, PERM_WRITEABLE) ;
	}
#else
	{
		boot_map_range(ptr_page_directory, KERNEL_BASE, 0xFFFFFFFF - KERNEL_BASE, 0, PERM_WRITEABLE) ;
f0105e67:	a1 b8 0e 6c f0       	mov    0xf06c0eb8,%eax
f0105e6c:	83 ec 0c             	sub    $0xc,%esp
f0105e6f:	6a 02                	push   $0x2
f0105e71:	6a 00                	push   $0x0
f0105e73:	68 ff ff ff 0f       	push   $0xfffffff
f0105e78:	68 00 00 00 f0       	push   $0xf0000000
f0105e7d:	50                   	push   %eax
f0105e7e:	e8 7b 00 00 00       	call   f0105efe <boot_map_range>
f0105e83:	83 c4 20             	add    $0x20,%esp
	}
#endif
	// Check that the initial page directory has been set up correctly.
	check_boot_pgdir();
f0105e86:	e8 02 9e 02 00       	call   f012fc8d <check_boot_pgdir>

	memory_scarce_threshold_percentage = DEFAULT_MEM_SCARCE_PERCENTAGE;	// Memory remains plentiful till % of free frames gets below 25% of the memory space
f0105e8b:	c7 05 40 ea 6b f0 19 	movl   $0x19,0xf06bea40
f0105e92:	00 00 00 

	/*
	NOW: Turn off the segmentation by setting the segments' base to 0, and
	turn on the paging by setting the corresponding flags in control register 0 (cr0)
	 */
	turn_on_paging() ;
f0105e95:	e8 0d 03 00 00       	call   f01061a7 <turn_on_paging>
}
f0105e9a:	90                   	nop
f0105e9b:	c9                   	leave  
f0105e9c:	c3                   	ret    

f0105e9d <boot_allocate_space>:
// It's too early to run out of memory.
// This function may ONLY be used during boot time,
// before the free_frame_list has been set up.
//
void* boot_allocate_space(uint32 size, uint32 align)
{
f0105e9d:	55                   	push   %ebp
f0105e9e:	89 e5                	mov    %esp,%ebp
f0105ea0:	83 ec 10             	sub    $0x10,%esp
	// Initialize ptr_free_mem if this is the first time.
	// 'end_of_kernel' is a symbol automatically generated by the linker,
	// which points to the end of the kernel-
	// i.e., the first virtual address that the linker
	// did not assign to any kernel code or global variables.
	if (ptr_free_mem == 0)
f0105ea3:	a1 b4 0e 6c f0       	mov    0xf06c0eb4,%eax
f0105ea8:	85 c0                	test   %eax,%eax
f0105eaa:	75 0a                	jne    f0105eb6 <boot_allocate_space+0x19>
		ptr_free_mem = end_of_kernel;
f0105eac:	c7 05 b4 0e 6c f0 fc 	movl   $0xf06c0ffc,0xf06c0eb4
f0105eb3:	0f 6c f0 

	// Your code here:
	//	Step 1: round ptr_free_mem up to be aligned properly
	ptr_free_mem = ROUNDUP(ptr_free_mem, align) ;
f0105eb6:	8b 45 0c             	mov    0xc(%ebp),%eax
f0105eb9:	89 45 fc             	mov    %eax,-0x4(%ebp)
f0105ebc:	a1 b4 0e 6c f0       	mov    0xf06c0eb4,%eax
f0105ec1:	89 c2                	mov    %eax,%edx
f0105ec3:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0105ec6:	01 d0                	add    %edx,%eax
f0105ec8:	48                   	dec    %eax
f0105ec9:	89 45 f8             	mov    %eax,-0x8(%ebp)
f0105ecc:	8b 45 f8             	mov    -0x8(%ebp),%eax
f0105ecf:	ba 00 00 00 00       	mov    $0x0,%edx
f0105ed4:	f7 75 fc             	divl   -0x4(%ebp)
f0105ed7:	8b 45 f8             	mov    -0x8(%ebp),%eax
f0105eda:	29 d0                	sub    %edx,%eax
f0105edc:	a3 b4 0e 6c f0       	mov    %eax,0xf06c0eb4

	//	Step 2: save current value of ptr_free_mem as allocated space
	void *ptr_allocated_mem;
	ptr_allocated_mem = ptr_free_mem ;
f0105ee1:	a1 b4 0e 6c f0       	mov    0xf06c0eb4,%eax
f0105ee6:	89 45 f4             	mov    %eax,-0xc(%ebp)

	//	Step 3: increase ptr_free_mem to record allocation
	ptr_free_mem += size ;
f0105ee9:	8b 15 b4 0e 6c f0    	mov    0xf06c0eb4,%edx
f0105eef:	8b 45 08             	mov    0x8(%ebp),%eax
f0105ef2:	01 d0                	add    %edx,%eax
f0105ef4:	a3 b4 0e 6c f0       	mov    %eax,0xf06c0eb4

	//// 2016: Step 3.5: initialize allocated space by ZEROOOOOOOOOOOOOO
	//memset(ptr_allocated_mem, 0, size);

	//	Step 4: return allocated space
	return ptr_allocated_mem ;
f0105ef9:	8b 45 f4             	mov    -0xc(%ebp),%eax

}
f0105efc:	c9                   	leave  
f0105efd:	c3                   	ret    

f0105efe <boot_map_range>:
//
// This function may ONLY be used during boot time,
// before the free_frame_list has been set up.
//
void boot_map_range(uint32 *ptr_page_directory, uint32 virtual_address, uint32 size, uint32 physical_address, int perm)
{
f0105efe:	55                   	push   %ebp
f0105eff:	89 e5                	mov    %esp,%ebp
f0105f01:	83 ec 18             	sub    $0x18,%esp
	int i = 0 ;
f0105f04:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	//physical_address = ROUNDUP(physical_address, PAGE_SIZE) ;
	///we assume here that all addresses are given divisible by 4 KB, look at boot_allocate_space ...

	for (i = 0 ; i < size ; i += PAGE_SIZE)
f0105f0b:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0105f12:	eb 53                	jmp    f0105f67 <boot_map_range+0x69>
	{
		uint32 *ptr_page_table = boot_get_page_table(ptr_page_directory, virtual_address, 1) ;
f0105f14:	83 ec 04             	sub    $0x4,%esp
f0105f17:	6a 01                	push   $0x1
f0105f19:	ff 75 0c             	pushl  0xc(%ebp)
f0105f1c:	ff 75 08             	pushl  0x8(%ebp)
f0105f1f:	e8 4e 00 00 00       	call   f0105f72 <boot_get_page_table>
f0105f24:	83 c4 10             	add    $0x10,%esp
f0105f27:	89 45 f0             	mov    %eax,-0x10(%ebp)
		uint32 index_page_table = PTX(virtual_address);
f0105f2a:	8b 45 0c             	mov    0xc(%ebp),%eax
f0105f2d:	c1 e8 0c             	shr    $0xc,%eax
f0105f30:	25 ff 03 00 00       	and    $0x3ff,%eax
f0105f35:	89 45 ec             	mov    %eax,-0x14(%ebp)
		//LOG_VARS("\nCONSTRUCT_ENTRY = %x",physical_address);
		ptr_page_table[index_page_table] = CONSTRUCT_ENTRY(physical_address, perm | PERM_PRESENT) ;
f0105f38:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0105f3b:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0105f42:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0105f45:	01 c2                	add    %eax,%edx
f0105f47:	8b 45 18             	mov    0x18(%ebp),%eax
f0105f4a:	0b 45 14             	or     0x14(%ebp),%eax
f0105f4d:	83 c8 01             	or     $0x1,%eax
f0105f50:	89 02                	mov    %eax,(%edx)

		physical_address += PAGE_SIZE ;
f0105f52:	81 45 14 00 10 00 00 	addl   $0x1000,0x14(%ebp)
		virtual_address += PAGE_SIZE ;
f0105f59:	81 45 0c 00 10 00 00 	addl   $0x1000,0xc(%ebp)
{
	int i = 0 ;
	//physical_address = ROUNDUP(physical_address, PAGE_SIZE) ;
	///we assume here that all addresses are given divisible by 4 KB, look at boot_allocate_space ...

	for (i = 0 ; i < size ; i += PAGE_SIZE)
f0105f60:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
f0105f67:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105f6a:	3b 45 10             	cmp    0x10(%ebp),%eax
f0105f6d:	72 a5                	jb     f0105f14 <boot_map_range+0x16>
		ptr_page_table[index_page_table] = CONSTRUCT_ENTRY(physical_address, perm | PERM_PRESENT) ;

		physical_address += PAGE_SIZE ;
		virtual_address += PAGE_SIZE ;
	}
}
f0105f6f:	90                   	nop
f0105f70:	c9                   	leave  
f0105f71:	c3                   	ret    

f0105f72 <boot_get_page_table>:
// boot_get_page_table cannot fail.  It's too early to fail.
// This function may ONLY be used during boot time,
// before the free_frame_list has been set up.
//
uint32* boot_get_page_table(uint32 *ptr_page_directory, uint32 virtual_address, int create)
{
f0105f72:	55                   	push   %ebp
f0105f73:	89 e5                	mov    %esp,%ebp
f0105f75:	83 ec 28             	sub    $0x28,%esp
	uint32 index_page_directory = PDX(virtual_address);
f0105f78:	8b 45 0c             	mov    0xc(%ebp),%eax
f0105f7b:	c1 e8 16             	shr    $0x16,%eax
f0105f7e:	89 45 f4             	mov    %eax,-0xc(%ebp)
	uint32 page_directory_entry = ptr_page_directory[index_page_directory];
f0105f81:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105f84:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0105f8b:	8b 45 08             	mov    0x8(%ebp),%eax
f0105f8e:	01 d0                	add    %edx,%eax
f0105f90:	8b 00                	mov    (%eax),%eax
f0105f92:	89 45 f0             	mov    %eax,-0x10(%ebp)

	//cprintf("boot d ind = %d, entry = %x\n",index_page_directory, page_directory_entry);
	uint32 phys_page_table = EXTRACT_ADDRESS(page_directory_entry);
f0105f95:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0105f98:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0105f9d:	89 45 ec             	mov    %eax,-0x14(%ebp)
	uint32 *ptr_page_table = STATIC_KERNEL_VIRTUAL_ADDRESS(phys_page_table);
f0105fa0:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0105fa3:	89 45 e8             	mov    %eax,-0x18(%ebp)
f0105fa6:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0105fa9:	c1 e8 0c             	shr    $0xc,%eax
f0105fac:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f0105faf:	a1 50 0e 6c f0       	mov    0xf06c0e50,%eax
f0105fb4:	39 45 e4             	cmp    %eax,-0x1c(%ebp)
f0105fb7:	72 17                	jb     f0105fd0 <boot_get_page_table+0x5e>
f0105fb9:	ff 75 e8             	pushl  -0x18(%ebp)
f0105fbc:	68 08 52 13 f0       	push   $0xf0135208
f0105fc1:	68 15 01 00 00       	push   $0x115
f0105fc6:	68 c0 51 13 f0       	push   $0xf01351c0
f0105fcb:	e8 d6 a1 ff ff       	call   f01001a6 <_panic>
f0105fd0:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0105fd3:	2d 00 00 00 10       	sub    $0x10000000,%eax
f0105fd8:	89 45 e0             	mov    %eax,-0x20(%ebp)
	if (phys_page_table == 0)
f0105fdb:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0105fdf:	75 72                	jne    f0106053 <boot_get_page_table+0xe1>
	{
		if (create)
f0105fe1:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
f0105fe5:	74 65                	je     f010604c <boot_get_page_table+0xda>
		{
			ptr_page_table = boot_allocate_space(PAGE_SIZE, PAGE_SIZE) ;
f0105fe7:	83 ec 08             	sub    $0x8,%esp
f0105fea:	68 00 10 00 00       	push   $0x1000
f0105fef:	68 00 10 00 00       	push   $0x1000
f0105ff4:	e8 a4 fe ff ff       	call   f0105e9d <boot_allocate_space>
f0105ff9:	83 c4 10             	add    $0x10,%esp
f0105ffc:	89 45 e0             	mov    %eax,-0x20(%ebp)
			phys_page_table = STATIC_KERNEL_PHYSICAL_ADDRESS(ptr_page_table);
f0105fff:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0106002:	89 45 dc             	mov    %eax,-0x24(%ebp)
f0106005:	81 7d dc ff ff ff ef 	cmpl   $0xefffffff,-0x24(%ebp)
f010600c:	77 17                	ja     f0106025 <boot_get_page_table+0xb3>
f010600e:	ff 75 dc             	pushl  -0x24(%ebp)
f0106011:	68 8c 51 13 f0       	push   $0xf013518c
f0106016:	68 1b 01 00 00       	push   $0x11b
f010601b:	68 c0 51 13 f0       	push   $0xf01351c0
f0106020:	e8 81 a1 ff ff       	call   f01001a6 <_panic>
f0106025:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0106028:	05 00 00 00 10       	add    $0x10000000,%eax
f010602d:	89 45 ec             	mov    %eax,-0x14(%ebp)
			ptr_page_directory[index_page_directory] = CONSTRUCT_ENTRY(phys_page_table, PERM_PRESENT | PERM_WRITEABLE);
f0106030:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0106033:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f010603a:	8b 45 08             	mov    0x8(%ebp),%eax
f010603d:	01 d0                	add    %edx,%eax
f010603f:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0106042:	83 ca 03             	or     $0x3,%edx
f0106045:	89 10                	mov    %edx,(%eax)
			return ptr_page_table ;
f0106047:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010604a:	eb 0a                	jmp    f0106056 <boot_get_page_table+0xe4>
		}
		else
			return 0 ;
f010604c:	b8 00 00 00 00       	mov    $0x0,%eax
f0106051:	eb 03                	jmp    f0106056 <boot_get_page_table+0xe4>
	}
	return ptr_page_table ;
f0106053:	8b 45 e0             	mov    -0x20(%ebp),%eax
}
f0106056:	c9                   	leave  
f0106057:	c3                   	ret    

f0106058 <nvram_read>:


int nvram_read(int r)
{
f0106058:	55                   	push   %ebp
f0106059:	89 e5                	mov    %esp,%ebp
f010605b:	53                   	push   %ebx
f010605c:	83 ec 04             	sub    $0x4,%esp
	return mc146818_read(r) | (mc146818_read(r + 1) << 8);
f010605f:	8b 45 08             	mov    0x8(%ebp),%eax
f0106062:	83 ec 0c             	sub    $0xc,%esp
f0106065:	50                   	push   %eax
f0106066:	e8 37 df ff ff       	call   f0103fa2 <mc146818_read>
f010606b:	83 c4 10             	add    $0x10,%esp
f010606e:	89 c3                	mov    %eax,%ebx
f0106070:	8b 45 08             	mov    0x8(%ebp),%eax
f0106073:	40                   	inc    %eax
f0106074:	83 ec 0c             	sub    $0xc,%esp
f0106077:	50                   	push   %eax
f0106078:	e8 25 df ff ff       	call   f0103fa2 <mc146818_read>
f010607d:	83 c4 10             	add    $0x10,%esp
f0106080:	c1 e0 08             	shl    $0x8,%eax
f0106083:	09 d8                	or     %ebx,%eax
}
f0106085:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f0106088:	c9                   	leave  
f0106089:	c3                   	ret    

f010608a <detect_memory>:

void detect_memory()
{
f010608a:	55                   	push   %ebp
f010608b:	89 e5                	mov    %esp,%ebp
f010608d:	83 ec 28             	sub    $0x28,%esp
	uint32 maxpa;	// Maximum physical address
	uint32 size_of_base_mem;		// Amount of base memory (in bytes)
	uint32 size_of_extended_mem;		// Amount of extended memory (in bytes)

	// CMOS tells us how many kilobytes there are
	size_of_base_mem = ROUNDDOWN(nvram_read(NVRAM_BASELO)*1024, PAGE_SIZE);
f0106090:	83 ec 0c             	sub    $0xc,%esp
f0106093:	6a 15                	push   $0x15
f0106095:	e8 be ff ff ff       	call   f0106058 <nvram_read>
f010609a:	83 c4 10             	add    $0x10,%esp
f010609d:	c1 e0 0a             	shl    $0xa,%eax
f01060a0:	89 45 ec             	mov    %eax,-0x14(%ebp)
f01060a3:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01060a6:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f01060ab:	89 45 e8             	mov    %eax,-0x18(%ebp)
	size_of_extended_mem = ROUNDDOWN(nvram_read(NVRAM_EXTLO)*1024, PAGE_SIZE);
f01060ae:	83 ec 0c             	sub    $0xc,%esp
f01060b1:	6a 17                	push   $0x17
f01060b3:	e8 a0 ff ff ff       	call   f0106058 <nvram_read>
f01060b8:	83 c4 10             	add    $0x10,%esp
f01060bb:	c1 e0 0a             	shl    $0xa,%eax
f01060be:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f01060c1:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01060c4:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f01060c9:	89 45 f0             	mov    %eax,-0x10(%ebp)
	//2016
	//For physical memory larger than 16MB, we needed to read total memory size
	// from a different register of the MC chip, see here:
	// http://bochs.sourceforge.net/techspec/CMOS-reference.txt
	// "CMOS 34h - AMI -"
	uint32 size_of_other_mem = ROUNDDOWN(nvram_read(0x34)*1024*64, PAGE_SIZE);
f01060cc:	83 ec 0c             	sub    $0xc,%esp
f01060cf:	6a 34                	push   $0x34
f01060d1:	e8 82 ff ff ff       	call   f0106058 <nvram_read>
f01060d6:	83 c4 10             	add    $0x10,%esp
f01060d9:	c1 e0 10             	shl    $0x10,%eax
f01060dc:	89 45 e0             	mov    %eax,-0x20(%ebp)
f01060df:	8b 45 e0             	mov    -0x20(%ebp),%eax
f01060e2:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f01060e7:	89 45 dc             	mov    %eax,-0x24(%ebp)
	//cprintf("other mem = %dK\n", size_of_other_mem/1024);

	// Calculate the maximum physical address based on whether
	// or not there is any extended memory.  See comment in ../inc/mmu.h.
	//2016
	if(size_of_other_mem > 0)
f01060ea:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f01060ee:	74 18                	je     f0106108 <detect_memory+0x7e>
	{
		maxpa = size_of_other_mem + 16*1024*1024;
f01060f0:	8b 45 dc             	mov    -0x24(%ebp),%eax
f01060f3:	05 00 00 00 01       	add    $0x1000000,%eax
f01060f8:	89 45 f4             	mov    %eax,-0xc(%ebp)
		size_of_extended_mem = maxpa - PHYS_EXTENDED_MEM;
f01060fb:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01060fe:	2d 00 00 10 00       	sub    $0x100000,%eax
f0106103:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0106106:	eb 19                	jmp    f0106121 <detect_memory+0x97>
	}
	else
	{
		if (size_of_extended_mem)
f0106108:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f010610c:	74 0d                	je     f010611b <detect_memory+0x91>
			maxpa = PHYS_EXTENDED_MEM + size_of_extended_mem;
f010610e:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0106111:	05 00 00 10 00       	add    $0x100000,%eax
f0106116:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0106119:	eb 06                	jmp    f0106121 <detect_memory+0x97>
		else
			maxpa = size_of_extended_mem;
f010611b:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010611e:	89 45 f4             	mov    %eax,-0xc(%ebp)
	}

	uint32 kernel_virtual_area = ((0xFFFFFFFF-KERNEL_BASE)+1);
f0106121:	c7 45 d8 00 00 00 10 	movl   $0x10000000,-0x28(%ebp)
	if(USE_KHEAP == 0 && maxpa > kernel_virtual_area)
f0106128:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010612b:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f010612e:	76 32                	jbe    f0106162 <detect_memory+0xd8>
	{
		cprintf("Error!: Physical memory = %dK larger than kernel virtual area (%dK)\n", maxpa/1024, kernel_virtual_area/1024);
f0106130:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0106133:	c1 e8 0a             	shr    $0xa,%eax
f0106136:	89 c2                	mov    %eax,%edx
f0106138:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010613b:	c1 e8 0a             	shr    $0xa,%eax
f010613e:	83 ec 04             	sub    $0x4,%esp
f0106141:	52                   	push   %edx
f0106142:	50                   	push   %eax
f0106143:	68 38 52 13 f0       	push   $0xf0135238
f0106148:	e8 e0 aa ff ff       	call   f0100c2d <cprintf>
f010614d:	83 c4 10             	add    $0x10,%esp
		cprintf("Cannot use physical memory larger than kernel virtual area\nTo enable physical memory larger than virtual kernel area, set USE_KHEAP = 1 in FOS code");
f0106150:	83 ec 0c             	sub    $0xc,%esp
f0106153:	68 80 52 13 f0       	push   $0xf0135280
f0106158:	e8 d0 aa ff ff       	call   f0100c2d <cprintf>
f010615d:	83 c4 10             	add    $0x10,%esp
		while(1);
f0106160:	eb fe                	jmp    f0106160 <detect_memory+0xd6>
	}
	number_of_frames = maxpa / PAGE_SIZE;
f0106162:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0106165:	c1 e8 0c             	shr    $0xc,%eax
f0106168:	a3 50 0e 6c f0       	mov    %eax,0xf06c0e50

	cprintf("Physical memory: %dK available, ", (int)(maxpa/1024));
f010616d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0106170:	c1 e8 0a             	shr    $0xa,%eax
f0106173:	83 ec 08             	sub    $0x8,%esp
f0106176:	50                   	push   %eax
f0106177:	68 14 53 13 f0       	push   $0xf0135314
f010617c:	e8 ac aa ff ff       	call   f0100c2d <cprintf>
f0106181:	83 c4 10             	add    $0x10,%esp
	cprintf("base = %dK, extended = %dK\n", (int)(size_of_base_mem/1024), (int)(size_of_extended_mem/1024));
f0106184:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0106187:	c1 e8 0a             	shr    $0xa,%eax
f010618a:	89 c2                	mov    %eax,%edx
f010618c:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010618f:	c1 e8 0a             	shr    $0xa,%eax
f0106192:	83 ec 04             	sub    $0x4,%esp
f0106195:	52                   	push   %edx
f0106196:	50                   	push   %eax
f0106197:	68 35 53 13 f0       	push   $0xf0135335
f010619c:	e8 8c aa ff ff       	call   f0100c2d <cprintf>
f01061a1:	83 c4 10             	add    $0x10,%esp
}
f01061a4:	90                   	nop
f01061a5:	c9                   	leave  
f01061a6:	c3                   	ret    

f01061a7 <turn_on_paging>:
// --------------------------------------------------------------
// Set up initial memory mappings and turn on MMU.
// --------------------------------------------------------------

void turn_on_paging()
{
f01061a7:	55                   	push   %ebp
f01061a8:	89 e5                	mov    %esp,%ebp
f01061aa:	83 ec 30             	sub    $0x30,%esp
	// (Limits our kernel to <4MB)

	//2016
	//ptr_page_directory[0] = ptr_page_directory[PDX(KERNEL_BASE)];
	{
		int i = PDX(KERNEL_BASE);
f01061ad:	c7 45 fc c0 03 00 00 	movl   $0x3c0,-0x4(%ebp)
		int j = 0;
f01061b4:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
		for(; i< PDX((uint32)ptr_free_mem); ++i, ++j)
f01061bb:	eb 24                	jmp    f01061e1 <turn_on_paging+0x3a>
		{
			ptr_page_directory[j] = ptr_page_directory[i];
f01061bd:	a1 b8 0e 6c f0       	mov    0xf06c0eb8,%eax
f01061c2:	8b 55 f8             	mov    -0x8(%ebp),%edx
f01061c5:	c1 e2 02             	shl    $0x2,%edx
f01061c8:	01 c2                	add    %eax,%edx
f01061ca:	a1 b8 0e 6c f0       	mov    0xf06c0eb8,%eax
f01061cf:	8b 4d fc             	mov    -0x4(%ebp),%ecx
f01061d2:	c1 e1 02             	shl    $0x2,%ecx
f01061d5:	01 c8                	add    %ecx,%eax
f01061d7:	8b 00                	mov    (%eax),%eax
f01061d9:	89 02                	mov    %eax,(%edx)
	//2016
	//ptr_page_directory[0] = ptr_page_directory[PDX(KERNEL_BASE)];
	{
		int i = PDX(KERNEL_BASE);
		int j = 0;
		for(; i< PDX((uint32)ptr_free_mem); ++i, ++j)
f01061db:	ff 45 fc             	incl   -0x4(%ebp)
f01061de:	ff 45 f8             	incl   -0x8(%ebp)
f01061e1:	a1 b4 0e 6c f0       	mov    0xf06c0eb4,%eax
f01061e6:	c1 e8 16             	shr    $0x16,%eax
f01061e9:	89 c2                	mov    %eax,%edx
f01061eb:	8b 45 fc             	mov    -0x4(%ebp),%eax
f01061ee:	39 c2                	cmp    %eax,%edx
f01061f0:	77 cb                	ja     f01061bd <turn_on_paging+0x16>
			ptr_page_directory[j] = ptr_page_directory[i];
		}
	}

	// Install page table.
	lcr3(phys_page_directory);
f01061f2:	a1 e8 0e 6c f0       	mov    0xf06c0ee8,%eax
f01061f7:	89 45 e8             	mov    %eax,-0x18(%ebp)
}

static __inline void
lcr3(uint32 val)
{
	__asm __volatile("movl %0,%%cr3" : : "r" (val));
f01061fa:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01061fd:	0f 22 d8             	mov    %eax,%cr3

static __inline uint32
rcr0(void)
{
	uint32 val;
	__asm __volatile("movl %%cr0,%0" : "=r" (val));
f0106200:	0f 20 c0             	mov    %cr0,%eax
f0106203:	89 45 e0             	mov    %eax,-0x20(%ebp)
	return val;
f0106206:	8b 45 e0             	mov    -0x20(%ebp),%eax

	// Turn on paging.
	uint32 cr0;
	cr0 = rcr0();
f0106209:	89 45 e4             	mov    %eax,-0x1c(%ebp)
	cr0 |= CR0_PE|CR0_PG|CR0_AM|CR0_WP|CR0_NE|CR0_TS|CR0_EM|CR0_MP;
f010620c:	81 4d e4 2f 00 05 80 	orl    $0x8005002f,-0x1c(%ebp)
	cr0 &= ~(CR0_TS|CR0_EM);
f0106213:	83 65 e4 f3          	andl   $0xfffffff3,-0x1c(%ebp)
f0106217:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010621a:	89 45 dc             	mov    %eax,-0x24(%ebp)
}

static __inline void
lcr0(uint32 val)
{
	__asm __volatile("movl %0,%%cr0" : : "r" (val));
f010621d:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0106220:	0f 22 c0             	mov    %eax,%cr0

	// Current mapping: KERNEL_BASE+x => x => x.
	// (x < 4MB so uses paging ptr_page_directory[0])

	// Reload all segment registers.
	asm volatile("lgdt gdt_pd");
f0106223:	0f 01 15 f0 08 19 f0 	lgdtl  0xf01908f0
	asm volatile("movw %%ax,%%gs" :: "a" (GD_UD|3));
f010622a:	b8 23 00 00 00       	mov    $0x23,%eax
f010622f:	8e e8                	mov    %eax,%gs
	asm volatile("movw %%ax,%%fs" :: "a" (GD_UD|3));
f0106231:	b8 23 00 00 00       	mov    $0x23,%eax
f0106236:	8e e0                	mov    %eax,%fs
	asm volatile("movw %%ax,%%es" :: "a" (GD_KD));
f0106238:	b8 10 00 00 00       	mov    $0x10,%eax
f010623d:	8e c0                	mov    %eax,%es
	asm volatile("movw %%ax,%%ds" :: "a" (GD_KD));
f010623f:	b8 10 00 00 00       	mov    $0x10,%eax
f0106244:	8e d8                	mov    %eax,%ds
	asm volatile("movw %%ax,%%ss" :: "a" (GD_KD));
f0106246:	b8 10 00 00 00       	mov    $0x10,%eax
f010624b:	8e d0                	mov    %eax,%ss
	asm volatile("ljmp %0,$1f\n 1:\n" :: "i" (GD_KT));  // reload cs
f010624d:	ea 54 62 10 f0 08 00 	ljmp   $0x8,$0xf0106254
	asm volatile("lldt %%ax" :: "a" (0));
f0106254:	b8 00 00 00 00       	mov    $0x0,%eax
f0106259:	0f 00 d0             	lldt   %ax
	// This mapping was only used after paging was turned on but
	// before the segment registers were reloaded.
	//2016
	//ptr_page_directory[0] = 0;
	{
		int i = PDX(KERNEL_BASE);
f010625c:	c7 45 f4 c0 03 00 00 	movl   $0x3c0,-0xc(%ebp)
		int j = 0;
f0106263:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
		for(; i< PDX((uint32)ptr_free_mem); ++i, ++j)
f010626a:	eb 19                	jmp    f0106285 <turn_on_paging+0xde>
		{
			ptr_page_directory[j] = 0;
f010626c:	a1 b8 0e 6c f0       	mov    0xf06c0eb8,%eax
f0106271:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0106274:	c1 e2 02             	shl    $0x2,%edx
f0106277:	01 d0                	add    %edx,%eax
f0106279:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	//2016
	//ptr_page_directory[0] = 0;
	{
		int i = PDX(KERNEL_BASE);
		int j = 0;
		for(; i< PDX((uint32)ptr_free_mem); ++i, ++j)
f010627f:	ff 45 f4             	incl   -0xc(%ebp)
f0106282:	ff 45 f0             	incl   -0x10(%ebp)
f0106285:	a1 b4 0e 6c f0       	mov    0xf06c0eb4,%eax
f010628a:	c1 e8 16             	shr    $0x16,%eax
f010628d:	89 c2                	mov    %eax,%edx
f010628f:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0106292:	39 c2                	cmp    %eax,%edx
f0106294:	77 d6                	ja     f010626c <turn_on_paging+0xc5>
		{
			ptr_page_directory[j] = 0;
		}
	}
	// Flush the TLB for good measure, to kill the ptr_page_directory[0] mapping.
	lcr3(phys_page_directory);
f0106296:	a1 e8 0e 6c f0       	mov    0xf06c0ee8,%eax
f010629b:	89 45 ec             	mov    %eax,-0x14(%ebp)
}

static __inline void
lcr3(uint32 val)
{
	__asm __volatile("movl %0,%%cr3" : : "r" (val));
f010629e:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01062a1:	0f 22 d8             	mov    %eax,%cr3
}
f01062a4:	90                   	nop
f01062a5:	c9                   	leave  
f01062a6:	c3                   	ret    

f01062a7 <setup_listing_to_all_page_tables_entries>:

void setup_listing_to_all_page_tables_entries()
{
f01062a7:	55                   	push   %ebp
f01062a8:	89 e5                	mov    %esp,%ebp
f01062aa:	83 ec 18             	sub    $0x18,%esp
	//////////////////////////////////////////////////////////////////////
	// Recursively insert PD in itself as a page table, to form
	// a virtual page table at virtual address VPT.

	// Permissions: kernel RW, user NONE
	uint32 phys_frame_address = STATIC_KERNEL_PHYSICAL_ADDRESS(ptr_page_directory);
f01062ad:	a1 b8 0e 6c f0       	mov    0xf06c0eb8,%eax
f01062b2:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01062b5:	81 7d f4 ff ff ff ef 	cmpl   $0xefffffff,-0xc(%ebp)
f01062bc:	77 17                	ja     f01062d5 <setup_listing_to_all_page_tables_entries+0x2e>
f01062be:	ff 75 f4             	pushl  -0xc(%ebp)
f01062c1:	68 8c 51 13 f0       	push   $0xf013518c
f01062c6:	68 ab 01 00 00       	push   $0x1ab
f01062cb:	68 c0 51 13 f0       	push   $0xf01351c0
f01062d0:	e8 d1 9e ff ff       	call   f01001a6 <_panic>
f01062d5:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01062d8:	05 00 00 00 10       	add    $0x10000000,%eax
f01062dd:	89 45 f0             	mov    %eax,-0x10(%ebp)
	ptr_page_directory[PDX(VPT)] = CONSTRUCT_ENTRY(phys_frame_address , PERM_PRESENT | PERM_WRITEABLE);
f01062e0:	a1 b8 0e 6c f0       	mov    0xf06c0eb8,%eax
f01062e5:	05 fc 0e 00 00       	add    $0xefc,%eax
f01062ea:	8b 55 f0             	mov    -0x10(%ebp),%edx
f01062ed:	83 ca 03             	or     $0x3,%edx
f01062f0:	89 10                	mov    %edx,(%eax)

	// same for UVPT
	//Permissions: kernel R, user R
	ptr_page_directory[PDX(UVPT)] = STATIC_KERNEL_PHYSICAL_ADDRESS(ptr_page_directory)|PERM_USER|PERM_PRESENT;
f01062f2:	a1 b8 0e 6c f0       	mov    0xf06c0eb8,%eax
f01062f7:	8d 90 f4 0e 00 00    	lea    0xef4(%eax),%edx
f01062fd:	a1 b8 0e 6c f0       	mov    0xf06c0eb8,%eax
f0106302:	89 45 ec             	mov    %eax,-0x14(%ebp)
f0106305:	81 7d ec ff ff ff ef 	cmpl   $0xefffffff,-0x14(%ebp)
f010630c:	77 17                	ja     f0106325 <setup_listing_to_all_page_tables_entries+0x7e>
f010630e:	ff 75 ec             	pushl  -0x14(%ebp)
f0106311:	68 8c 51 13 f0       	push   $0xf013518c
f0106316:	68 b0 01 00 00       	push   $0x1b0
f010631b:	68 c0 51 13 f0       	push   $0xf01351c0
f0106320:	e8 81 9e ff ff       	call   f01001a6 <_panic>
f0106325:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0106328:	05 00 00 00 10       	add    $0x10000000,%eax
f010632d:	83 c8 05             	or     $0x5,%eax
f0106330:	89 02                	mov    %eax,(%edx)

}
f0106332:	90                   	nop
f0106333:	c9                   	leave  
f0106334:	c3                   	ret    

f0106335 <to_frame_number>:
struct FrameInfo *get_frame_info(uint32 *ptr_page_directory, uint32 virtual_address, uint32 **ptr_page_table);
void decrement_references(struct FrameInfo* ptr_frame_info);
void initialize_frame_info(struct FrameInfo *ptr_frame_info);

static inline uint32 to_frame_number(struct FrameInfo *ptr_frame_info)
{
f0106335:	55                   	push   %ebp
f0106336:	89 e5                	mov    %esp,%ebp
	return ptr_frame_info - frames_info;
f0106338:	8b 45 08             	mov    0x8(%ebp),%eax
f010633b:	8b 15 90 0e 6c f0    	mov    0xf06c0e90,%edx
f0106341:	29 d0                	sub    %edx,%eax
f0106343:	c1 f8 03             	sar    $0x3,%eax
f0106346:	89 c2                	mov    %eax,%edx
f0106348:	89 d0                	mov    %edx,%eax
f010634a:	c1 e0 02             	shl    $0x2,%eax
f010634d:	01 d0                	add    %edx,%eax
f010634f:	c1 e0 02             	shl    $0x2,%eax
f0106352:	01 d0                	add    %edx,%eax
f0106354:	c1 e0 02             	shl    $0x2,%eax
f0106357:	01 d0                	add    %edx,%eax
f0106359:	89 c1                	mov    %eax,%ecx
f010635b:	c1 e1 08             	shl    $0x8,%ecx
f010635e:	01 c8                	add    %ecx,%eax
f0106360:	89 c1                	mov    %eax,%ecx
f0106362:	c1 e1 10             	shl    $0x10,%ecx
f0106365:	01 c8                	add    %ecx,%eax
f0106367:	01 c0                	add    %eax,%eax
f0106369:	01 d0                	add    %edx,%eax
}
f010636b:	5d                   	pop    %ebp
f010636c:	c3                   	ret    

f010636d <to_physical_address>:

static inline uint32 to_physical_address(struct FrameInfo *ptr_frame_info)
{
f010636d:	55                   	push   %ebp
f010636e:	89 e5                	mov    %esp,%ebp
	return to_frame_number(ptr_frame_info) << PGSHIFT;
f0106370:	ff 75 08             	pushl  0x8(%ebp)
f0106373:	e8 bd ff ff ff       	call   f0106335 <to_frame_number>
f0106378:	83 c4 04             	add    $0x4,%esp
f010637b:	c1 e0 0c             	shl    $0xc,%eax
}
f010637e:	c9                   	leave  
f010637f:	c3                   	ret    

f0106380 <to_frame_info>:

static inline struct FrameInfo* to_frame_info(uint32 physical_address)
{
f0106380:	55                   	push   %ebp
f0106381:	89 e5                	mov    %esp,%ebp
f0106383:	83 ec 08             	sub    $0x8,%esp
	if (PPN(physical_address) >= number_of_frames)
f0106386:	8b 45 08             	mov    0x8(%ebp),%eax
f0106389:	c1 e8 0c             	shr    $0xc,%eax
f010638c:	89 c2                	mov    %eax,%edx
f010638e:	a1 50 0e 6c f0       	mov    0xf06c0e50,%eax
f0106393:	39 c2                	cmp    %eax,%edx
f0106395:	72 14                	jb     f01063ab <to_frame_info+0x2b>
		panic("to_frame_info called with invalid pa");
f0106397:	83 ec 04             	sub    $0x4,%esp
f010639a:	68 54 53 13 f0       	push   $0xf0135354
f010639f:	6a 55                	push   $0x55
f01063a1:	68 79 53 13 f0       	push   $0xf0135379
f01063a6:	e8 fb 9d ff ff       	call   f01001a6 <_panic>
	return &frames_info[PPN(physical_address)];
f01063ab:	8b 15 90 0e 6c f0    	mov    0xf06c0e90,%edx
f01063b1:	8b 45 08             	mov    0x8(%ebp),%eax
f01063b4:	c1 e8 0c             	shr    $0xc,%eax
f01063b7:	89 c1                	mov    %eax,%ecx
f01063b9:	89 c8                	mov    %ecx,%eax
f01063bb:	01 c0                	add    %eax,%eax
f01063bd:	01 c8                	add    %ecx,%eax
f01063bf:	c1 e0 03             	shl    $0x3,%eax
f01063c2:	01 d0                	add    %edx,%eax
}
f01063c4:	c9                   	leave  
f01063c5:	c3                   	ret    

f01063c6 <tlb_invalidate>:




void tlb_invalidate(uint32 *ptr_page_directory, void *virtual_address)
{
f01063c6:	55                   	push   %ebp
f01063c7:	89 e5                	mov    %esp,%ebp
f01063c9:	83 ec 10             	sub    $0x10,%esp
f01063cc:	8b 45 0c             	mov    0xc(%ebp),%eax
f01063cf:	89 45 fc             	mov    %eax,-0x4(%ebp)
}

static __inline void 
invlpg(void *addr)
{ 
	__asm __volatile("invlpg (%0)" : : "r" (addr) : "memory");
f01063d2:	8b 45 fc             	mov    -0x4(%ebp),%eax
f01063d5:	0f 01 38             	invlpg (%eax)
	// Flush the entry only if we're modifying the current address space.
	// For now, there is only one address space, so always invalidate.
	invlpg(virtual_address);
}
f01063d8:	90                   	nop
f01063d9:	c9                   	leave  
f01063da:	c3                   	ret    

f01063db <initialize_paging>:
// and NEVER use boot_allocate_space() or the related boot-time functions above.
//

extern void initialize_disk_page_file();
void initialize_paging()
{
f01063db:	55                   	push   %ebp
f01063dc:	89 e5                	mov    %esp,%ebp
f01063de:	53                   	push   %ebx
f01063df:	83 ec 24             	sub    $0x24,%esp
	//     Some of it is in use, some is free. Where is the kernel?
	//     Which frames are used for page tables and other data structures?
	//
	// Change the code to reflect this.
	int i;
	LIST_INIT(&free_frame_list);
f01063e2:	c7 05 58 0e 6c f0 00 	movl   $0x0,0xf06c0e58
f01063e9:	00 00 00 
f01063ec:	c7 05 5c 0e 6c f0 00 	movl   $0x0,0xf06c0e5c
f01063f3:	00 00 00 
f01063f6:	c7 05 64 0e 6c f0 00 	movl   $0x0,0xf06c0e64
f01063fd:	00 00 00 
	LIST_INIT(&modified_frame_list);
f0106400:	c7 05 c0 8a 65 f0 00 	movl   $0x0,0xf0658ac0
f0106407:	00 00 00 
f010640a:	c7 05 c4 8a 65 f0 00 	movl   $0x0,0xf0658ac4
f0106411:	00 00 00 
f0106414:	c7 05 cc 8a 65 f0 00 	movl   $0x0,0xf0658acc
f010641b:	00 00 00 

	frames_info[0].references = 1;
f010641e:	a1 90 0e 6c f0       	mov    0xf06c0e90,%eax
f0106423:	66 c7 40 08 01 00    	movw   $0x1,0x8(%eax)
	frames_info[1].references = 1;
f0106429:	a1 90 0e 6c f0       	mov    0xf06c0e90,%eax
f010642e:	83 c0 18             	add    $0x18,%eax
f0106431:	66 c7 40 08 01 00    	movw   $0x1,0x8(%eax)
	frames_info[2].references = 1;
f0106437:	a1 90 0e 6c f0       	mov    0xf06c0e90,%eax
f010643c:	83 c0 30             	add    $0x30,%eax
f010643f:	66 c7 40 08 01 00    	movw   $0x1,0x8(%eax)
	ptr_zero_page = (uint8*) KERNEL_BASE+PAGE_SIZE;
f0106445:	c7 05 9c 0e 6c f0 00 	movl   $0xf0001000,0xf06c0e9c
f010644c:	10 00 f0 
	ptr_temp_page = (uint8*) KERNEL_BASE+2*PAGE_SIZE;
f010644f:	c7 05 c0 0e 6c f0 00 	movl   $0xf0002000,0xf06c0ec0
f0106456:	20 00 f0 
	i =0;
f0106459:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	for(;i<1024; i++)
f0106460:	eb 1f                	jmp    f0106481 <initialize_paging+0xa6>
	{
		ptr_zero_page[i]=0;
f0106462:	8b 15 9c 0e 6c f0    	mov    0xf06c0e9c,%edx
f0106468:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010646b:	01 d0                	add    %edx,%eax
f010646d:	c6 00 00             	movb   $0x0,(%eax)
		ptr_temp_page[i]=0;
f0106470:	8b 15 c0 0e 6c f0    	mov    0xf06c0ec0,%edx
f0106476:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0106479:	01 d0                	add    %edx,%eax
f010647b:	c6 00 00             	movb   $0x0,(%eax)
	frames_info[1].references = 1;
	frames_info[2].references = 1;
	ptr_zero_page = (uint8*) KERNEL_BASE+PAGE_SIZE;
	ptr_temp_page = (uint8*) KERNEL_BASE+2*PAGE_SIZE;
	i =0;
	for(;i<1024; i++)
f010647e:	ff 45 f4             	incl   -0xc(%ebp)
f0106481:	81 7d f4 ff 03 00 00 	cmpl   $0x3ff,-0xc(%ebp)
f0106488:	7e d8                	jle    f0106462 <initialize_paging+0x87>
	{
		ptr_zero_page[i]=0;
		ptr_temp_page[i]=0;
	}

	int range_end = ROUNDUP(PHYS_IO_MEM,PAGE_SIZE);
f010648a:	c7 45 f0 00 10 00 00 	movl   $0x1000,-0x10(%ebp)
f0106491:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0106494:	05 ff ff 09 00       	add    $0x9ffff,%eax
f0106499:	89 45 ec             	mov    %eax,-0x14(%ebp)
f010649c:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010649f:	ba 00 00 00 00       	mov    $0x0,%edx
f01064a4:	f7 75 f0             	divl   -0x10(%ebp)
f01064a7:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01064aa:	29 d0                	sub    %edx,%eax
f01064ac:	89 45 e8             	mov    %eax,-0x18(%ebp)

	for (i = 3; i < range_end/PAGE_SIZE; i++)
f01064af:	c7 45 f4 03 00 00 00 	movl   $0x3,-0xc(%ebp)
f01064b6:	e9 e8 00 00 00       	jmp    f01065a3 <initialize_paging+0x1c8>
	{

		initialize_frame_info(&(frames_info[i]));
f01064bb:	8b 0d 90 0e 6c f0    	mov    0xf06c0e90,%ecx
f01064c1:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01064c4:	89 d0                	mov    %edx,%eax
f01064c6:	01 c0                	add    %eax,%eax
f01064c8:	01 d0                	add    %edx,%eax
f01064ca:	c1 e0 03             	shl    $0x3,%eax
f01064cd:	01 c8                	add    %ecx,%eax
f01064cf:	83 ec 0c             	sub    $0xc,%esp
f01064d2:	50                   	push   %eax
f01064d3:	e8 b7 02 00 00       	call   f010678f <initialize_frame_info>
f01064d8:	83 c4 10             	add    $0x10,%esp
		//frames_info[i].references = 0;

		LIST_INSERT_HEAD(&free_frame_list, &frames_info[i]);
f01064db:	8b 0d 90 0e 6c f0    	mov    0xf06c0e90,%ecx
f01064e1:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01064e4:	89 d0                	mov    %edx,%eax
f01064e6:	01 c0                	add    %eax,%eax
f01064e8:	01 d0                	add    %edx,%eax
f01064ea:	c1 e0 03             	shl    $0x3,%eax
f01064ed:	01 c8                	add    %ecx,%eax
f01064ef:	85 c0                	test   %eax,%eax
f01064f1:	75 14                	jne    f0106507 <initialize_paging+0x12c>
f01064f3:	83 ec 04             	sub    $0x4,%esp
f01064f6:	68 94 53 13 f0       	push   $0xf0135394
f01064fb:	6a 5c                	push   $0x5c
f01064fd:	68 b7 53 13 f0       	push   $0xf01353b7
f0106502:	e8 9f 9c ff ff       	call   f01001a6 <_panic>
f0106507:	8b 0d 90 0e 6c f0    	mov    0xf06c0e90,%ecx
f010650d:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0106510:	89 d0                	mov    %edx,%eax
f0106512:	01 c0                	add    %eax,%eax
f0106514:	01 d0                	add    %edx,%eax
f0106516:	c1 e0 03             	shl    $0x3,%eax
f0106519:	01 c8                	add    %ecx,%eax
f010651b:	8b 15 58 0e 6c f0    	mov    0xf06c0e58,%edx
f0106521:	89 10                	mov    %edx,(%eax)
f0106523:	8b 00                	mov    (%eax),%eax
f0106525:	85 c0                	test   %eax,%eax
f0106527:	74 1f                	je     f0106548 <initialize_paging+0x16d>
f0106529:	8b 15 58 0e 6c f0    	mov    0xf06c0e58,%edx
f010652f:	8b 1d 90 0e 6c f0    	mov    0xf06c0e90,%ebx
f0106535:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0106538:	89 c8                	mov    %ecx,%eax
f010653a:	01 c0                	add    %eax,%eax
f010653c:	01 c8                	add    %ecx,%eax
f010653e:	c1 e0 03             	shl    $0x3,%eax
f0106541:	01 d8                	add    %ebx,%eax
f0106543:	89 42 04             	mov    %eax,0x4(%edx)
f0106546:	eb 19                	jmp    f0106561 <initialize_paging+0x186>
f0106548:	8b 0d 90 0e 6c f0    	mov    0xf06c0e90,%ecx
f010654e:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0106551:	89 d0                	mov    %edx,%eax
f0106553:	01 c0                	add    %eax,%eax
f0106555:	01 d0                	add    %edx,%eax
f0106557:	c1 e0 03             	shl    $0x3,%eax
f010655a:	01 c8                	add    %ecx,%eax
f010655c:	a3 5c 0e 6c f0       	mov    %eax,0xf06c0e5c
f0106561:	8b 0d 90 0e 6c f0    	mov    0xf06c0e90,%ecx
f0106567:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010656a:	89 d0                	mov    %edx,%eax
f010656c:	01 c0                	add    %eax,%eax
f010656e:	01 d0                	add    %edx,%eax
f0106570:	c1 e0 03             	shl    $0x3,%eax
f0106573:	01 c8                	add    %ecx,%eax
f0106575:	a3 58 0e 6c f0       	mov    %eax,0xf06c0e58
f010657a:	8b 0d 90 0e 6c f0    	mov    0xf06c0e90,%ecx
f0106580:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0106583:	89 d0                	mov    %edx,%eax
f0106585:	01 c0                	add    %eax,%eax
f0106587:	01 d0                	add    %edx,%eax
f0106589:	c1 e0 03             	shl    $0x3,%eax
f010658c:	01 c8                	add    %ecx,%eax
f010658e:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f0106595:	a1 64 0e 6c f0       	mov    0xf06c0e64,%eax
f010659a:	40                   	inc    %eax
f010659b:	a3 64 0e 6c f0       	mov    %eax,0xf06c0e64
		ptr_temp_page[i]=0;
	}

	int range_end = ROUNDUP(PHYS_IO_MEM,PAGE_SIZE);

	for (i = 3; i < range_end/PAGE_SIZE; i++)
f01065a0:	ff 45 f4             	incl   -0xc(%ebp)
f01065a3:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01065a6:	85 c0                	test   %eax,%eax
f01065a8:	79 05                	jns    f01065af <initialize_paging+0x1d4>
f01065aa:	05 ff 0f 00 00       	add    $0xfff,%eax
f01065af:	c1 f8 0c             	sar    $0xc,%eax
f01065b2:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01065b5:	0f 8f 00 ff ff ff    	jg     f01064bb <initialize_paging+0xe0>
		//frames_info[i].references = 0;

		LIST_INSERT_HEAD(&free_frame_list, &frames_info[i]);
	}

	for (i = PHYS_IO_MEM/PAGE_SIZE ; i < PHYS_EXTENDED_MEM/PAGE_SIZE; i++)
f01065bb:	c7 45 f4 a0 00 00 00 	movl   $0xa0,-0xc(%ebp)
f01065c2:	eb 1d                	jmp    f01065e1 <initialize_paging+0x206>
	{
		frames_info[i].references = 1;
f01065c4:	8b 0d 90 0e 6c f0    	mov    0xf06c0e90,%ecx
f01065ca:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01065cd:	89 d0                	mov    %edx,%eax
f01065cf:	01 c0                	add    %eax,%eax
f01065d1:	01 d0                	add    %edx,%eax
f01065d3:	c1 e0 03             	shl    $0x3,%eax
f01065d6:	01 c8                	add    %ecx,%eax
f01065d8:	66 c7 40 08 01 00    	movw   $0x1,0x8(%eax)
		//frames_info[i].references = 0;

		LIST_INSERT_HEAD(&free_frame_list, &frames_info[i]);
	}

	for (i = PHYS_IO_MEM/PAGE_SIZE ; i < PHYS_EXTENDED_MEM/PAGE_SIZE; i++)
f01065de:	ff 45 f4             	incl   -0xc(%ebp)
f01065e1:	81 7d f4 ff 00 00 00 	cmpl   $0xff,-0xc(%ebp)
f01065e8:	7e da                	jle    f01065c4 <initialize_paging+0x1e9>
	{
		frames_info[i].references = 1;
	}

	range_end = ROUNDUP(STATIC_KERNEL_PHYSICAL_ADDRESS(ptr_free_mem), PAGE_SIZE);
f01065ea:	c7 45 e4 00 10 00 00 	movl   $0x1000,-0x1c(%ebp)
f01065f1:	a1 b4 0e 6c f0       	mov    0xf06c0eb4,%eax
f01065f6:	89 45 e0             	mov    %eax,-0x20(%ebp)
f01065f9:	81 7d e0 ff ff ff ef 	cmpl   $0xefffffff,-0x20(%ebp)
f0106600:	77 14                	ja     f0106616 <initialize_paging+0x23b>
f0106602:	ff 75 e0             	pushl  -0x20(%ebp)
f0106605:	68 d4 53 13 f0       	push   $0xf01353d4
f010660a:	6a 64                	push   $0x64
f010660c:	68 b7 53 13 f0       	push   $0xf01353b7
f0106611:	e8 90 9b ff ff       	call   f01001a6 <_panic>
f0106616:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0106619:	8d 90 00 00 00 10    	lea    0x10000000(%eax),%edx
f010661f:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0106622:	01 d0                	add    %edx,%eax
f0106624:	48                   	dec    %eax
f0106625:	89 45 dc             	mov    %eax,-0x24(%ebp)
f0106628:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010662b:	ba 00 00 00 00       	mov    $0x0,%edx
f0106630:	f7 75 e4             	divl   -0x1c(%ebp)
f0106633:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0106636:	29 d0                	sub    %edx,%eax
f0106638:	89 45 e8             	mov    %eax,-0x18(%ebp)

	for (i = PHYS_EXTENDED_MEM/PAGE_SIZE ; i < range_end/PAGE_SIZE; i++)
f010663b:	c7 45 f4 00 01 00 00 	movl   $0x100,-0xc(%ebp)
f0106642:	eb 1d                	jmp    f0106661 <initialize_paging+0x286>
	{
		frames_info[i].references = 1;
f0106644:	8b 0d 90 0e 6c f0    	mov    0xf06c0e90,%ecx
f010664a:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010664d:	89 d0                	mov    %edx,%eax
f010664f:	01 c0                	add    %eax,%eax
f0106651:	01 d0                	add    %edx,%eax
f0106653:	c1 e0 03             	shl    $0x3,%eax
f0106656:	01 c8                	add    %ecx,%eax
f0106658:	66 c7 40 08 01 00    	movw   $0x1,0x8(%eax)
		frames_info[i].references = 1;
	}

	range_end = ROUNDUP(STATIC_KERNEL_PHYSICAL_ADDRESS(ptr_free_mem), PAGE_SIZE);

	for (i = PHYS_EXTENDED_MEM/PAGE_SIZE ; i < range_end/PAGE_SIZE; i++)
f010665e:	ff 45 f4             	incl   -0xc(%ebp)
f0106661:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0106664:	85 c0                	test   %eax,%eax
f0106666:	79 05                	jns    f010666d <initialize_paging+0x292>
f0106668:	05 ff 0f 00 00       	add    $0xfff,%eax
f010666d:	c1 f8 0c             	sar    $0xc,%eax
f0106670:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0106673:	7f cf                	jg     f0106644 <initialize_paging+0x269>
	{
		frames_info[i].references = 1;
	}

	for (i = range_end/PAGE_SIZE ; i < number_of_frames; i++)
f0106675:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0106678:	85 c0                	test   %eax,%eax
f010667a:	79 05                	jns    f0106681 <initialize_paging+0x2a6>
f010667c:	05 ff 0f 00 00       	add    $0xfff,%eax
f0106681:	c1 f8 0c             	sar    $0xc,%eax
f0106684:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0106687:	e9 e8 00 00 00       	jmp    f0106774 <initialize_paging+0x399>
	{
		initialize_frame_info(&(frames_info[i]));
f010668c:	8b 0d 90 0e 6c f0    	mov    0xf06c0e90,%ecx
f0106692:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0106695:	89 d0                	mov    %edx,%eax
f0106697:	01 c0                	add    %eax,%eax
f0106699:	01 d0                	add    %edx,%eax
f010669b:	c1 e0 03             	shl    $0x3,%eax
f010669e:	01 c8                	add    %ecx,%eax
f01066a0:	83 ec 0c             	sub    $0xc,%esp
f01066a3:	50                   	push   %eax
f01066a4:	e8 e6 00 00 00       	call   f010678f <initialize_frame_info>
f01066a9:	83 c4 10             	add    $0x10,%esp

		//frames_info[i].references = 0;
		LIST_INSERT_HEAD(&free_frame_list, &frames_info[i]);
f01066ac:	8b 0d 90 0e 6c f0    	mov    0xf06c0e90,%ecx
f01066b2:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01066b5:	89 d0                	mov    %edx,%eax
f01066b7:	01 c0                	add    %eax,%eax
f01066b9:	01 d0                	add    %edx,%eax
f01066bb:	c1 e0 03             	shl    $0x3,%eax
f01066be:	01 c8                	add    %ecx,%eax
f01066c0:	85 c0                	test   %eax,%eax
f01066c2:	75 14                	jne    f01066d8 <initialize_paging+0x2fd>
f01066c4:	83 ec 04             	sub    $0x4,%esp
f01066c7:	68 94 53 13 f0       	push   $0xf0135394
f01066cc:	6a 70                	push   $0x70
f01066ce:	68 b7 53 13 f0       	push   $0xf01353b7
f01066d3:	e8 ce 9a ff ff       	call   f01001a6 <_panic>
f01066d8:	8b 0d 90 0e 6c f0    	mov    0xf06c0e90,%ecx
f01066de:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01066e1:	89 d0                	mov    %edx,%eax
f01066e3:	01 c0                	add    %eax,%eax
f01066e5:	01 d0                	add    %edx,%eax
f01066e7:	c1 e0 03             	shl    $0x3,%eax
f01066ea:	01 c8                	add    %ecx,%eax
f01066ec:	8b 15 58 0e 6c f0    	mov    0xf06c0e58,%edx
f01066f2:	89 10                	mov    %edx,(%eax)
f01066f4:	8b 00                	mov    (%eax),%eax
f01066f6:	85 c0                	test   %eax,%eax
f01066f8:	74 1f                	je     f0106719 <initialize_paging+0x33e>
f01066fa:	8b 15 58 0e 6c f0    	mov    0xf06c0e58,%edx
f0106700:	8b 1d 90 0e 6c f0    	mov    0xf06c0e90,%ebx
f0106706:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0106709:	89 c8                	mov    %ecx,%eax
f010670b:	01 c0                	add    %eax,%eax
f010670d:	01 c8                	add    %ecx,%eax
f010670f:	c1 e0 03             	shl    $0x3,%eax
f0106712:	01 d8                	add    %ebx,%eax
f0106714:	89 42 04             	mov    %eax,0x4(%edx)
f0106717:	eb 19                	jmp    f0106732 <initialize_paging+0x357>
f0106719:	8b 0d 90 0e 6c f0    	mov    0xf06c0e90,%ecx
f010671f:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0106722:	89 d0                	mov    %edx,%eax
f0106724:	01 c0                	add    %eax,%eax
f0106726:	01 d0                	add    %edx,%eax
f0106728:	c1 e0 03             	shl    $0x3,%eax
f010672b:	01 c8                	add    %ecx,%eax
f010672d:	a3 5c 0e 6c f0       	mov    %eax,0xf06c0e5c
f0106732:	8b 0d 90 0e 6c f0    	mov    0xf06c0e90,%ecx
f0106738:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010673b:	89 d0                	mov    %edx,%eax
f010673d:	01 c0                	add    %eax,%eax
f010673f:	01 d0                	add    %edx,%eax
f0106741:	c1 e0 03             	shl    $0x3,%eax
f0106744:	01 c8                	add    %ecx,%eax
f0106746:	a3 58 0e 6c f0       	mov    %eax,0xf06c0e58
f010674b:	8b 0d 90 0e 6c f0    	mov    0xf06c0e90,%ecx
f0106751:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0106754:	89 d0                	mov    %edx,%eax
f0106756:	01 c0                	add    %eax,%eax
f0106758:	01 d0                	add    %edx,%eax
f010675a:	c1 e0 03             	shl    $0x3,%eax
f010675d:	01 c8                	add    %ecx,%eax
f010675f:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f0106766:	a1 64 0e 6c f0       	mov    0xf06c0e64,%eax
f010676b:	40                   	inc    %eax
f010676c:	a3 64 0e 6c f0       	mov    %eax,0xf06c0e64
	for (i = PHYS_EXTENDED_MEM/PAGE_SIZE ; i < range_end/PAGE_SIZE; i++)
	{
		frames_info[i].references = 1;
	}

	for (i = range_end/PAGE_SIZE ; i < number_of_frames; i++)
f0106771:	ff 45 f4             	incl   -0xc(%ebp)
f0106774:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0106777:	a1 50 0e 6c f0       	mov    0xf06c0e50,%eax
f010677c:	39 c2                	cmp    %eax,%edx
f010677e:	0f 82 08 ff ff ff    	jb     f010668c <initialize_paging+0x2b1>

		//frames_info[i].references = 0;
		LIST_INSERT_HEAD(&free_frame_list, &frames_info[i]);
	}

	initialize_disk_page_file();
f0106784:	e8 2d c8 ff ff       	call   f0102fb6 <initialize_disk_page_file>
}
f0106789:	90                   	nop
f010678a:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f010678d:	c9                   	leave  
f010678e:	c3                   	ret    

f010678f <initialize_frame_info>:
// Initialize a Frame_Info structure.
// The result has null links and 0 references.
// Note that the corresponding physical frame is NOT initialized!
//
void initialize_frame_info(struct FrameInfo *ptr_frame_info)
{
f010678f:	55                   	push   %ebp
f0106790:	89 e5                	mov    %esp,%ebp
f0106792:	83 ec 08             	sub    $0x8,%esp
	memset(ptr_frame_info, 0, sizeof(*ptr_frame_info));
f0106795:	83 ec 04             	sub    $0x4,%esp
f0106798:	6a 18                	push   $0x18
f010679a:	6a 00                	push   $0x0
f010679c:	ff 75 08             	pushl  0x8(%ebp)
f010679f:	e8 75 a1 02 00       	call   f0130919 <memset>
f01067a4:	83 c4 10             	add    $0x10,%esp
}
f01067a7:	90                   	nop
f01067a8:	c9                   	leave  
f01067a9:	c3                   	ret    

f01067aa <allocate_frame>:
// Hint: references should not be incremented

//extern void env_free(struct Env *e);

int allocate_frame(struct FrameInfo **ptr_frame_info)
{
f01067aa:	55                   	push   %ebp
f01067ab:	89 e5                	mov    %esp,%ebp
f01067ad:	83 ec 18             	sub    $0x18,%esp
	*ptr_frame_info = LIST_FIRST(&free_frame_list);
f01067b0:	8b 15 58 0e 6c f0    	mov    0xf06c0e58,%edx
f01067b6:	8b 45 08             	mov    0x8(%ebp),%eax
f01067b9:	89 10                	mov    %edx,(%eax)
	int c = 0;
f01067bb:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	if (*ptr_frame_info == NULL)
f01067c2:	8b 45 08             	mov    0x8(%ebp),%eax
f01067c5:	8b 00                	mov    (%eax),%eax
f01067c7:	85 c0                	test   %eax,%eax
f01067c9:	75 17                	jne    f01067e2 <allocate_frame+0x38>
	{
		//TODO: [PROJECT MS3] [KERNEL MEM] Free RAM when it's FULL
		// Write your code here, remove the panic and write your code
		panic("ERROR: Kernel run out of memory... allocate_frame cannot find a free frame.\n");
f01067cb:	83 ec 04             	sub    $0x4,%esp
f01067ce:	68 08 54 13 f0       	push   $0xf0135408
f01067d3:	68 99 00 00 00       	push   $0x99
f01067d8:	68 b7 53 13 f0       	push   $0xf01353b7
f01067dd:	e8 c4 99 ff ff       	call   f01001a6 <_panic>
	}

	LIST_REMOVE(&free_frame_list,*ptr_frame_info);
f01067e2:	8b 45 08             	mov    0x8(%ebp),%eax
f01067e5:	8b 00                	mov    (%eax),%eax
f01067e7:	85 c0                	test   %eax,%eax
f01067e9:	75 17                	jne    f0106802 <allocate_frame+0x58>
f01067eb:	83 ec 04             	sub    $0x4,%esp
f01067ee:	68 55 54 13 f0       	push   $0xf0135455
f01067f3:	68 9c 00 00 00       	push   $0x9c
f01067f8:	68 b7 53 13 f0       	push   $0xf01353b7
f01067fd:	e8 a4 99 ff ff       	call   f01001a6 <_panic>
f0106802:	8b 45 08             	mov    0x8(%ebp),%eax
f0106805:	8b 00                	mov    (%eax),%eax
f0106807:	8b 00                	mov    (%eax),%eax
f0106809:	85 c0                	test   %eax,%eax
f010680b:	74 14                	je     f0106821 <allocate_frame+0x77>
f010680d:	8b 45 08             	mov    0x8(%ebp),%eax
f0106810:	8b 00                	mov    (%eax),%eax
f0106812:	8b 00                	mov    (%eax),%eax
f0106814:	8b 55 08             	mov    0x8(%ebp),%edx
f0106817:	8b 12                	mov    (%edx),%edx
f0106819:	8b 52 04             	mov    0x4(%edx),%edx
f010681c:	89 50 04             	mov    %edx,0x4(%eax)
f010681f:	eb 0d                	jmp    f010682e <allocate_frame+0x84>
f0106821:	8b 45 08             	mov    0x8(%ebp),%eax
f0106824:	8b 00                	mov    (%eax),%eax
f0106826:	8b 40 04             	mov    0x4(%eax),%eax
f0106829:	a3 5c 0e 6c f0       	mov    %eax,0xf06c0e5c
f010682e:	8b 45 08             	mov    0x8(%ebp),%eax
f0106831:	8b 00                	mov    (%eax),%eax
f0106833:	8b 40 04             	mov    0x4(%eax),%eax
f0106836:	85 c0                	test   %eax,%eax
f0106838:	74 13                	je     f010684d <allocate_frame+0xa3>
f010683a:	8b 45 08             	mov    0x8(%ebp),%eax
f010683d:	8b 00                	mov    (%eax),%eax
f010683f:	8b 40 04             	mov    0x4(%eax),%eax
f0106842:	8b 55 08             	mov    0x8(%ebp),%edx
f0106845:	8b 12                	mov    (%edx),%edx
f0106847:	8b 12                	mov    (%edx),%edx
f0106849:	89 10                	mov    %edx,(%eax)
f010684b:	eb 0c                	jmp    f0106859 <allocate_frame+0xaf>
f010684d:	8b 45 08             	mov    0x8(%ebp),%eax
f0106850:	8b 00                	mov    (%eax),%eax
f0106852:	8b 00                	mov    (%eax),%eax
f0106854:	a3 58 0e 6c f0       	mov    %eax,0xf06c0e58
f0106859:	8b 45 08             	mov    0x8(%ebp),%eax
f010685c:	8b 00                	mov    (%eax),%eax
f010685e:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f0106864:	8b 45 08             	mov    0x8(%ebp),%eax
f0106867:	8b 00                	mov    (%eax),%eax
f0106869:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f0106870:	a1 64 0e 6c f0       	mov    0xf06c0e64,%eax
f0106875:	48                   	dec    %eax
f0106876:	a3 64 0e 6c f0       	mov    %eax,0xf06c0e64

	/******************* PAGE BUFFERING CODE *******************
	 ***********************************************************/

	if((*ptr_frame_info)->isBuffered)
f010687b:	8b 45 08             	mov    0x8(%ebp),%eax
f010687e:	8b 00                	mov    (%eax),%eax
f0106880:	8a 40 14             	mov    0x14(%eax),%al
f0106883:	84 c0                	test   %al,%al
f0106885:	74 20                	je     f01068a7 <allocate_frame+0xfd>
	{
		pt_clear_page_table_entry((*ptr_frame_info)->environment->env_page_directory,(*ptr_frame_info)->va);
f0106887:	8b 45 08             	mov    0x8(%ebp),%eax
f010688a:	8b 00                	mov    (%eax),%eax
f010688c:	8b 50 0c             	mov    0xc(%eax),%edx
f010688f:	8b 45 08             	mov    0x8(%ebp),%eax
f0106892:	8b 00                	mov    (%eax),%eax
f0106894:	8b 40 10             	mov    0x10(%eax),%eax
f0106897:	8b 40 5c             	mov    0x5c(%eax),%eax
f010689a:	83 ec 08             	sub    $0x8,%esp
f010689d:	52                   	push   %edx
f010689e:	50                   	push   %eax
f010689f:	e8 5f 0f 00 00       	call   f0107803 <pt_clear_page_table_entry>
f01068a4:	83 c4 10             	add    $0x10,%esp
	}

	/**********************************************************
	 ***********************************************************/

	initialize_frame_info(*ptr_frame_info);
f01068a7:	8b 45 08             	mov    0x8(%ebp),%eax
f01068aa:	8b 00                	mov    (%eax),%eax
f01068ac:	83 ec 0c             	sub    $0xc,%esp
f01068af:	50                   	push   %eax
f01068b0:	e8 da fe ff ff       	call   f010678f <initialize_frame_info>
f01068b5:	83 c4 10             	add    $0x10,%esp
	return 0;
f01068b8:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01068bd:	c9                   	leave  
f01068be:	c3                   	ret    

f01068bf <free_frame>:
//
// Return a frame to the free_frame_list.
// (This function should only be called when ptr_frame_info->references reaches 0.)
//
void free_frame(struct FrameInfo *ptr_frame_info)
{
f01068bf:	55                   	push   %ebp
f01068c0:	89 e5                	mov    %esp,%ebp
f01068c2:	83 ec 08             	sub    $0x8,%esp
	/*2012: clear it to ensure that its members (env, isBuffered, ...) become NULL*/
	initialize_frame_info(ptr_frame_info);
f01068c5:	83 ec 0c             	sub    $0xc,%esp
f01068c8:	ff 75 08             	pushl  0x8(%ebp)
f01068cb:	e8 bf fe ff ff       	call   f010678f <initialize_frame_info>
f01068d0:	83 c4 10             	add    $0x10,%esp
	/*=============================================================================*/

	// Fill this function in
	LIST_INSERT_HEAD(&free_frame_list, ptr_frame_info);
f01068d3:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f01068d7:	75 17                	jne    f01068f0 <free_frame+0x31>
f01068d9:	83 ec 04             	sub    $0x4,%esp
f01068dc:	68 94 53 13 f0       	push   $0xf0135394
f01068e1:	68 b9 00 00 00       	push   $0xb9
f01068e6:	68 b7 53 13 f0       	push   $0xf01353b7
f01068eb:	e8 b6 98 ff ff       	call   f01001a6 <_panic>
f01068f0:	8b 15 58 0e 6c f0    	mov    0xf06c0e58,%edx
f01068f6:	8b 45 08             	mov    0x8(%ebp),%eax
f01068f9:	89 10                	mov    %edx,(%eax)
f01068fb:	8b 45 08             	mov    0x8(%ebp),%eax
f01068fe:	8b 00                	mov    (%eax),%eax
f0106900:	85 c0                	test   %eax,%eax
f0106902:	74 0d                	je     f0106911 <free_frame+0x52>
f0106904:	a1 58 0e 6c f0       	mov    0xf06c0e58,%eax
f0106909:	8b 55 08             	mov    0x8(%ebp),%edx
f010690c:	89 50 04             	mov    %edx,0x4(%eax)
f010690f:	eb 08                	jmp    f0106919 <free_frame+0x5a>
f0106911:	8b 45 08             	mov    0x8(%ebp),%eax
f0106914:	a3 5c 0e 6c f0       	mov    %eax,0xf06c0e5c
f0106919:	8b 45 08             	mov    0x8(%ebp),%eax
f010691c:	a3 58 0e 6c f0       	mov    %eax,0xf06c0e58
f0106921:	8b 45 08             	mov    0x8(%ebp),%eax
f0106924:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f010692b:	a1 64 0e 6c f0       	mov    0xf06c0e64,%eax
f0106930:	40                   	inc    %eax
f0106931:	a3 64 0e 6c f0       	mov    %eax,0xf06c0e64
	//LOG_STATMENT(cprintf("FN # %d FREED",to_frame_number(ptr_frame_info)));


}
f0106936:	90                   	nop
f0106937:	c9                   	leave  
f0106938:	c3                   	ret    

f0106939 <decrement_references>:
//
// Decrement the reference count on a frame
// freeing it if there are no more references.
//
void decrement_references(struct FrameInfo* ptr_frame_info)
{
f0106939:	55                   	push   %ebp
f010693a:	89 e5                	mov    %esp,%ebp
f010693c:	83 ec 08             	sub    $0x8,%esp
	if (--(ptr_frame_info->references) == 0)
f010693f:	8b 45 08             	mov    0x8(%ebp),%eax
f0106942:	8b 40 08             	mov    0x8(%eax),%eax
f0106945:	48                   	dec    %eax
f0106946:	8b 55 08             	mov    0x8(%ebp),%edx
f0106949:	66 89 42 08          	mov    %ax,0x8(%edx)
f010694d:	8b 45 08             	mov    0x8(%ebp),%eax
f0106950:	8b 40 08             	mov    0x8(%eax),%eax
f0106953:	66 85 c0             	test   %ax,%ax
f0106956:	75 0e                	jne    f0106966 <decrement_references+0x2d>
		free_frame(ptr_frame_info);
f0106958:	83 ec 0c             	sub    $0xc,%esp
f010695b:	ff 75 08             	pushl  0x8(%ebp)
f010695e:	e8 5c ff ff ff       	call   f01068bf <free_frame>
f0106963:	83 c4 10             	add    $0x10,%esp
}
f0106966:	90                   	nop
f0106967:	c9                   	leave  
f0106968:	c3                   	ret    

f0106969 <get_page_table>:
//  TABLE_IN_MEMORY : if page table exists in main memory
//	TABLE_NOT_EXIST : if page table doesn't exist,
//

int get_page_table(uint32 *ptr_page_directory, const uint32 virtual_address, uint32 **ptr_page_table)
{
f0106969:	55                   	push   %ebp
f010696a:	89 e5                	mov    %esp,%ebp
f010696c:	83 ec 28             	sub    $0x28,%esp
	//	cprintf("gpt .05\n");
	uint32 page_directory_entry = ptr_page_directory[PDX(virtual_address)];
f010696f:	8b 45 0c             	mov    0xc(%ebp),%eax
f0106972:	c1 e8 16             	shr    $0x16,%eax
f0106975:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f010697c:	8b 45 08             	mov    0x8(%ebp),%eax
f010697f:	01 d0                	add    %edx,%eax
f0106981:	8b 00                	mov    (%eax),%eax
f0106983:	89 45 f4             	mov    %eax,-0xc(%ebp)

	//2022: check PERM_PRESENT of the table first before calculating its PA
	if ( (page_directory_entry & PERM_PRESENT) == PERM_PRESENT)
f0106986:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0106989:	83 e0 01             	and    $0x1,%eax
f010698c:	85 c0                	test   %eax,%eax
f010698e:	74 4e                	je     f01069de <get_page_table+0x75>
			*ptr_page_table = (void *)kheap_virtual_address(EXTRACT_ADDRESS(page_directory_entry)) ;
			//cprintf("===>get_page_table: page_dir_entry = %x ptr_page_table = %x\n", page_directory_entry,*ptr_page_table);
		}
		else
		{
			*ptr_page_table = STATIC_KERNEL_VIRTUAL_ADDRESS(EXTRACT_ADDRESS(page_directory_entry)) ;
f0106990:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0106993:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0106998:	89 45 f0             	mov    %eax,-0x10(%ebp)
f010699b:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010699e:	c1 e8 0c             	shr    $0xc,%eax
f01069a1:	89 45 ec             	mov    %eax,-0x14(%ebp)
f01069a4:	a1 50 0e 6c f0       	mov    0xf06c0e50,%eax
f01069a9:	39 45 ec             	cmp    %eax,-0x14(%ebp)
f01069ac:	72 17                	jb     f01069c5 <get_page_table+0x5c>
f01069ae:	ff 75 f0             	pushl  -0x10(%ebp)
f01069b1:	68 74 54 13 f0       	push   $0xf0135474
f01069b6:	68 e2 00 00 00       	push   $0xe2
f01069bb:	68 b7 53 13 f0       	push   $0xf01353b7
f01069c0:	e8 e1 97 ff ff       	call   f01001a6 <_panic>
f01069c5:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01069c8:	2d 00 00 00 10       	sub    $0x10000000,%eax
f01069cd:	89 c2                	mov    %eax,%edx
f01069cf:	8b 45 10             	mov    0x10(%ebp),%eax
f01069d2:	89 10                	mov    %edx,(%eax)
		}
		return TABLE_IN_MEMORY;
f01069d4:	b8 00 00 00 00       	mov    $0x0,%eax
f01069d9:	e9 8f 00 00 00       	jmp    f0106a6d <get_page_table+0x104>
	}
	else if (page_directory_entry != 0) //the table exists but not in main mem, so it must be in sec mem
f01069de:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01069e2:	74 7b                	je     f0106a5f <get_page_table+0xf6>
f01069e4:	8b 45 0c             	mov    0xc(%ebp),%eax
f01069e7:	89 45 e0             	mov    %eax,-0x20(%ebp)

//Ahmed 2010:
static __inline void
lcr2(uint32 val)
{
	__asm __volatile("movl %0,%%cr2" : : "r" (val));
f01069ea:	8b 45 e0             	mov    -0x20(%ebp),%eax
f01069ed:	0f 22 d0             	mov    %eax,%cr2
		// Call the fault_handler() to load the table in memory for us ...
		//		cprintf("gpt .1\n, %x page_directory_entry\n", page_directory_entry);
		lcr2((uint32)virtual_address) ;

		//		cprintf("gpt .12\n");
		fault_handler(NULL);
f01069f0:	83 ec 0c             	sub    $0xc,%esp
f01069f3:	6a 00                	push   $0x0
f01069f5:	e8 6b 55 00 00       	call   f010bf65 <fault_handler>
f01069fa:	83 c4 10             	add    $0x10,%esp

		//		cprintf("gpt .15\n");
		// now the page_fault_handler() should have returned successfully and updated the
		// directory with the new table frame number in memory
		page_directory_entry = ptr_page_directory[PDX(virtual_address)];
f01069fd:	8b 45 0c             	mov    0xc(%ebp),%eax
f0106a00:	c1 e8 16             	shr    $0x16,%eax
f0106a03:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0106a0a:	8b 45 08             	mov    0x8(%ebp),%eax
f0106a0d:	01 d0                	add    %edx,%eax
f0106a0f:	8b 00                	mov    (%eax),%eax
f0106a11:	89 45 f4             	mov    %eax,-0xc(%ebp)
		{
			*ptr_page_table = (void *)kheap_virtual_address(EXTRACT_ADDRESS(page_directory_entry)) ;
		}
		else
		{
			*ptr_page_table = STATIC_KERNEL_VIRTUAL_ADDRESS(EXTRACT_ADDRESS(page_directory_entry)) ;
f0106a14:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0106a17:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0106a1c:	89 45 e8             	mov    %eax,-0x18(%ebp)
f0106a1f:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0106a22:	c1 e8 0c             	shr    $0xc,%eax
f0106a25:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f0106a28:	a1 50 0e 6c f0       	mov    0xf06c0e50,%eax
f0106a2d:	39 45 e4             	cmp    %eax,-0x1c(%ebp)
f0106a30:	72 17                	jb     f0106a49 <get_page_table+0xe0>
f0106a32:	ff 75 e8             	pushl  -0x18(%ebp)
f0106a35:	68 74 54 13 f0       	push   $0xf0135474
f0106a3a:	68 fa 00 00 00       	push   $0xfa
f0106a3f:	68 b7 53 13 f0       	push   $0xf01353b7
f0106a44:	e8 5d 97 ff ff       	call   f01001a6 <_panic>
f0106a49:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0106a4c:	2d 00 00 00 10       	sub    $0x10000000,%eax
f0106a51:	89 c2                	mov    %eax,%edx
f0106a53:	8b 45 10             	mov    0x10(%ebp),%eax
f0106a56:	89 10                	mov    %edx,(%eax)
		}

		return TABLE_IN_MEMORY;
f0106a58:	b8 00 00 00 00       	mov    $0x0,%eax
f0106a5d:	eb 0e                	jmp    f0106a6d <get_page_table+0x104>
	}
	else // there is no table for this va anywhere. This is a new table required, so check if the user want creation
	{
		//		cprintf("gpt .2\n");
		*ptr_page_table = 0;
f0106a5f:	8b 45 10             	mov    0x10(%ebp),%eax
f0106a62:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
		return TABLE_NOT_EXIST;
f0106a68:	b8 01 00 00 00       	mov    $0x1,%eax
	}
}
f0106a6d:	c9                   	leave  
f0106a6e:	c3                   	ret    

f0106a6f <create_page_table>:

void * create_page_table(uint32 *ptr_directory, const uint32 virtual_address)
{
f0106a6f:	55                   	push   %ebp
f0106a70:	89 e5                	mov    %esp,%ebp
f0106a72:	83 ec 18             	sub    $0x18,%esp
	memset(ptr_page_table , 0, PAGE_SIZE);
	tlbflush();

#else
	uint32 * ptr_page_table ;
	__static_cpt(ptr_directory, virtual_address, &ptr_page_table) ;
f0106a75:	83 ec 04             	sub    $0x4,%esp
f0106a78:	8d 45 f4             	lea    -0xc(%ebp),%eax
f0106a7b:	50                   	push   %eax
f0106a7c:	ff 75 0c             	pushl  0xc(%ebp)
f0106a7f:	ff 75 08             	pushl  0x8(%ebp)
f0106a82:	e8 08 00 00 00       	call   f0106a8f <__static_cpt>
f0106a87:	83 c4 10             	add    $0x10,%esp
#endif

	return ptr_page_table;
f0106a8a:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f0106a8d:	c9                   	leave  
f0106a8e:	c3                   	ret    

f0106a8f <__static_cpt>:

void __static_cpt(uint32 *ptr_directory, const uint32 virtual_address, uint32 **ptr_page_table)
{
f0106a8f:	55                   	push   %ebp
f0106a90:	89 e5                	mov    %esp,%ebp
f0106a92:	83 ec 28             	sub    $0x28,%esp
	struct FrameInfo* ptr_new_frame_info;
	int err = allocate_frame(&ptr_new_frame_info) ;
f0106a95:	83 ec 0c             	sub    $0xc,%esp
f0106a98:	8d 45 e0             	lea    -0x20(%ebp),%eax
f0106a9b:	50                   	push   %eax
f0106a9c:	e8 09 fd ff ff       	call   f01067aa <allocate_frame>
f0106aa1:	83 c4 10             	add    $0x10,%esp
f0106aa4:	89 45 f4             	mov    %eax,-0xc(%ebp)

	uint32 phys_page_table = to_physical_address(ptr_new_frame_info);
f0106aa7:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0106aaa:	83 ec 0c             	sub    $0xc,%esp
f0106aad:	50                   	push   %eax
f0106aae:	e8 ba f8 ff ff       	call   f010636d <to_physical_address>
f0106ab3:	83 c4 10             	add    $0x10,%esp
f0106ab6:	89 45 f0             	mov    %eax,-0x10(%ebp)
	*ptr_page_table = STATIC_KERNEL_VIRTUAL_ADDRESS(phys_page_table) ;
f0106ab9:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0106abc:	89 45 ec             	mov    %eax,-0x14(%ebp)
f0106abf:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0106ac2:	c1 e8 0c             	shr    $0xc,%eax
f0106ac5:	89 45 e8             	mov    %eax,-0x18(%ebp)
f0106ac8:	a1 50 0e 6c f0       	mov    0xf06c0e50,%eax
f0106acd:	39 45 e8             	cmp    %eax,-0x18(%ebp)
f0106ad0:	72 17                	jb     f0106ae9 <__static_cpt+0x5a>
f0106ad2:	ff 75 ec             	pushl  -0x14(%ebp)
f0106ad5:	68 74 54 13 f0       	push   $0xf0135474
f0106ada:	68 30 01 00 00       	push   $0x130
f0106adf:	68 b7 53 13 f0       	push   $0xf01353b7
f0106ae4:	e8 bd 96 ff ff       	call   f01001a6 <_panic>
f0106ae9:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0106aec:	2d 00 00 00 10       	sub    $0x10000000,%eax
f0106af1:	89 c2                	mov    %eax,%edx
f0106af3:	8b 45 10             	mov    0x10(%ebp),%eax
f0106af6:	89 10                	mov    %edx,(%eax)
	ptr_new_frame_info->references = 1;
f0106af8:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0106afb:	66 c7 40 08 01 00    	movw   $0x1,0x8(%eax)
	ptr_directory[PDX(virtual_address)] = CONSTRUCT_ENTRY(phys_page_table, PERM_PRESENT | PERM_USER | PERM_WRITEABLE);
f0106b01:	8b 45 0c             	mov    0xc(%ebp),%eax
f0106b04:	c1 e8 16             	shr    $0x16,%eax
f0106b07:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0106b0e:	8b 45 08             	mov    0x8(%ebp),%eax
f0106b11:	01 d0                	add    %edx,%eax
f0106b13:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0106b16:	83 ca 07             	or     $0x7,%edx
f0106b19:	89 10                	mov    %edx,(%eax)
	//initialize new page table by 0's
	memset(*ptr_page_table , 0, PAGE_SIZE);
f0106b1b:	8b 45 10             	mov    0x10(%ebp),%eax
f0106b1e:	8b 00                	mov    (%eax),%eax
f0106b20:	83 ec 04             	sub    $0x4,%esp
f0106b23:	68 00 10 00 00       	push   $0x1000
f0106b28:	6a 00                	push   $0x0
f0106b2a:	50                   	push   %eax
f0106b2b:	e8 e9 9d 02 00       	call   f0130919 <memset>
f0106b30:	83 c4 10             	add    $0x10,%esp

static __inline void
tlbflush(void)
{
	uint32 cr3;
	__asm __volatile("movl %%cr3,%0" : "=r" (cr3));
f0106b33:	0f 20 d8             	mov    %cr3,%eax
f0106b36:	89 45 e4             	mov    %eax,-0x1c(%ebp)
	__asm __volatile("movl %0,%%cr3" : : "r" (cr3));
f0106b39:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0106b3c:	0f 22 d8             	mov    %eax,%cr3
	tlbflush();
}
f0106b3f:	90                   	nop
f0106b40:	c9                   	leave  
f0106b41:	c3                   	ret    

f0106b42 <map_frame>:
//   0 on success
//
// Hint: implement using get_page_table() and unmap_frame().
//
int map_frame(uint32 *ptr_page_directory, struct FrameInfo *ptr_frame_info, uint32 virtual_address, int perm)
{
f0106b42:	55                   	push   %ebp
f0106b43:	89 e5                	mov    %esp,%ebp
f0106b45:	83 ec 18             	sub    $0x18,%esp
	// Fill this function in
	uint32 physical_address = to_physical_address(ptr_frame_info);
f0106b48:	ff 75 0c             	pushl  0xc(%ebp)
f0106b4b:	e8 1d f8 ff ff       	call   f010636d <to_physical_address>
f0106b50:	83 c4 04             	add    $0x4,%esp
f0106b53:	89 45 f4             	mov    %eax,-0xc(%ebp)
	uint32 *ptr_page_table;
	if( get_page_table(ptr_page_directory, virtual_address, &ptr_page_table) == TABLE_NOT_EXIST)
f0106b56:	83 ec 04             	sub    $0x4,%esp
f0106b59:	8d 45 ec             	lea    -0x14(%ebp),%eax
f0106b5c:	50                   	push   %eax
f0106b5d:	ff 75 10             	pushl  0x10(%ebp)
f0106b60:	ff 75 08             	pushl  0x8(%ebp)
f0106b63:	e8 01 fe ff ff       	call   f0106969 <get_page_table>
f0106b68:	83 c4 10             	add    $0x10,%esp
f0106b6b:	83 f8 01             	cmp    $0x1,%eax
f0106b6e:	75 15                	jne    f0106b85 <map_frame+0x43>
			uint32* ptr_page_table2 =NULL;
			//cprintf("======> After the table created at %x\n\n", get_page_table(ptr_page_directory, virtual_address,&ptr_page_table2));
		}
#else
		{
			__static_cpt(ptr_page_directory, (uint32)virtual_address, &ptr_page_table);
f0106b70:	83 ec 04             	sub    $0x4,%esp
f0106b73:	8d 45 ec             	lea    -0x14(%ebp),%eax
f0106b76:	50                   	push   %eax
f0106b77:	ff 75 10             	pushl  0x10(%ebp)
f0106b7a:	ff 75 08             	pushl  0x8(%ebp)
f0106b7d:	e8 0d ff ff ff       	call   f0106a8f <__static_cpt>
f0106b82:	83 c4 10             	add    $0x10,%esp
#endif

	}

	//cprintf("NOW .. map add = %x ptr_page_table = %x PTX(virtual_address) = %d\n", virtual_address, ptr_page_table,PTX(virtual_address));
	uint32 page_table_entry = ptr_page_table[PTX(virtual_address)];
f0106b85:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0106b88:	8b 55 10             	mov    0x10(%ebp),%edx
f0106b8b:	c1 ea 0c             	shr    $0xc,%edx
f0106b8e:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0106b94:	c1 e2 02             	shl    $0x2,%edx
f0106b97:	01 d0                	add    %edx,%eax
f0106b99:	8b 00                	mov    (%eax),%eax
f0106b9b:	89 45 f0             	mov    %eax,-0x10(%ebp)

	}*/

	/*NEW'15 CORRECT SOLUTION*/
	//If already mapped
	if ((page_table_entry & PERM_PRESENT) == PERM_PRESENT)
f0106b9e:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0106ba1:	83 e0 01             	and    $0x1,%eax
f0106ba4:	85 c0                	test   %eax,%eax
f0106ba6:	74 25                	je     f0106bcd <map_frame+0x8b>
	{
		//on this pa, then do nothing
		if (EXTRACT_ADDRESS(page_table_entry) == physical_address)
f0106ba8:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0106bab:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0106bb0:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0106bb3:	75 07                	jne    f0106bbc <map_frame+0x7a>
			return 0;
f0106bb5:	b8 00 00 00 00       	mov    $0x0,%eax
f0106bba:	eb 43                	jmp    f0106bff <map_frame+0xbd>
		//on another pa, then unmap it
		else
			unmap_frame(ptr_page_directory , virtual_address);
f0106bbc:	83 ec 08             	sub    $0x8,%esp
f0106bbf:	ff 75 10             	pushl  0x10(%ebp)
f0106bc2:	ff 75 08             	pushl  0x8(%ebp)
f0106bc5:	e8 a7 00 00 00       	call   f0106c71 <unmap_frame>
f0106bca:	83 c4 10             	add    $0x10,%esp
	}
	ptr_frame_info->references++;
f0106bcd:	8b 45 0c             	mov    0xc(%ebp),%eax
f0106bd0:	8b 40 08             	mov    0x8(%eax),%eax
f0106bd3:	40                   	inc    %eax
f0106bd4:	8b 55 0c             	mov    0xc(%ebp),%edx
f0106bd7:	66 89 42 08          	mov    %ax,0x8(%edx)
	ptr_page_table[PTX(virtual_address)] = CONSTRUCT_ENTRY(physical_address , perm | PERM_PRESENT);
f0106bdb:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0106bde:	8b 55 10             	mov    0x10(%ebp),%edx
f0106be1:	c1 ea 0c             	shr    $0xc,%edx
f0106be4:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0106bea:	c1 e2 02             	shl    $0x2,%edx
f0106bed:	01 c2                	add    %eax,%edx
f0106bef:	8b 45 14             	mov    0x14(%ebp),%eax
f0106bf2:	0b 45 f4             	or     -0xc(%ebp),%eax
f0106bf5:	83 c8 01             	or     $0x1,%eax
f0106bf8:	89 02                	mov    %eax,(%edx)

	return 0;
f0106bfa:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0106bff:	c9                   	leave  
f0106c00:	c3                   	ret    

f0106c01 <get_frame_info>:
// Return 0 if there is no frame mapped at virtual_address.
//
// Hint: implement using get_page_table() and get_frame_info().
//
struct FrameInfo * get_frame_info(uint32 *ptr_page_directory, uint32 virtual_address, uint32 **ptr_page_table)
{
f0106c01:	55                   	push   %ebp
f0106c02:	89 e5                	mov    %esp,%ebp
f0106c04:	83 ec 18             	sub    $0x18,%esp
	// Fill this function in
	//cprintf(".gfi .1\n %x, %x, %x, \n", ptr_page_directory, virtual_address, ptr_page_table);
	uint32 ret =  get_page_table(ptr_page_directory, virtual_address, ptr_page_table) ;
f0106c07:	83 ec 04             	sub    $0x4,%esp
f0106c0a:	ff 75 10             	pushl  0x10(%ebp)
f0106c0d:	ff 75 0c             	pushl  0xc(%ebp)
f0106c10:	ff 75 08             	pushl  0x8(%ebp)
f0106c13:	e8 51 fd ff ff       	call   f0106969 <get_page_table>
f0106c18:	83 c4 10             	add    $0x10,%esp
f0106c1b:	89 45 f4             	mov    %eax,-0xc(%ebp)
	//cprintf(".gfi .15\n");
	if((*ptr_page_table) != 0)
f0106c1e:	8b 45 10             	mov    0x10(%ebp),%eax
f0106c21:	8b 00                	mov    (%eax),%eax
f0106c23:	85 c0                	test   %eax,%eax
f0106c25:	74 43                	je     f0106c6a <get_frame_info+0x69>
	{
		uint32 index_page_table = PTX(virtual_address);
f0106c27:	8b 45 0c             	mov    0xc(%ebp),%eax
f0106c2a:	c1 e8 0c             	shr    $0xc,%eax
f0106c2d:	25 ff 03 00 00       	and    $0x3ff,%eax
f0106c32:	89 45 f0             	mov    %eax,-0x10(%ebp)
		//cprintf(".gfi .2\n");
		uint32 page_table_entry = (*ptr_page_table)[index_page_table];
f0106c35:	8b 45 10             	mov    0x10(%ebp),%eax
f0106c38:	8b 00                	mov    (%eax),%eax
f0106c3a:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0106c3d:	c1 e2 02             	shl    $0x2,%edx
f0106c40:	01 d0                	add    %edx,%eax
f0106c42:	8b 00                	mov    (%eax),%eax
f0106c44:	89 45 ec             	mov    %eax,-0x14(%ebp)
		if( page_table_entry != 0)
f0106c47:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0106c4b:	74 16                	je     f0106c63 <get_frame_info+0x62>
		{
			//cprintf(".gfi .3\n");
			return to_frame_info( EXTRACT_ADDRESS ( page_table_entry ) );
f0106c4d:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0106c50:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0106c55:	83 ec 0c             	sub    $0xc,%esp
f0106c58:	50                   	push   %eax
f0106c59:	e8 22 f7 ff ff       	call   f0106380 <to_frame_info>
f0106c5e:	83 c4 10             	add    $0x10,%esp
f0106c61:	eb 0c                	jmp    f0106c6f <get_frame_info+0x6e>
		}
		return 0;
f0106c63:	b8 00 00 00 00       	mov    $0x0,%eax
f0106c68:	eb 05                	jmp    f0106c6f <get_frame_info+0x6e>
	}
	return 0;
f0106c6a:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0106c6f:	c9                   	leave  
f0106c70:	c3                   	ret    

f0106c71 <unmap_frame>:
//
// Hint: implement using get_frame_info(),
// 	tlb_invalidate(), and decrement_references().
//
void unmap_frame(uint32 *ptr_page_directory, uint32 virtual_address)
{
f0106c71:	55                   	push   %ebp
f0106c72:	89 e5                	mov    %esp,%ebp
f0106c74:	83 ec 18             	sub    $0x18,%esp
	// Fill this function in
	uint32 *ptr_page_table;
	struct FrameInfo* ptr_frame_info = get_frame_info(ptr_page_directory, virtual_address, &ptr_page_table);
f0106c77:	83 ec 04             	sub    $0x4,%esp
f0106c7a:	8d 45 f0             	lea    -0x10(%ebp),%eax
f0106c7d:	50                   	push   %eax
f0106c7e:	ff 75 0c             	pushl  0xc(%ebp)
f0106c81:	ff 75 08             	pushl  0x8(%ebp)
f0106c84:	e8 78 ff ff ff       	call   f0106c01 <get_frame_info>
f0106c89:	83 c4 10             	add    $0x10,%esp
f0106c8c:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if( ptr_frame_info != 0 )
f0106c8f:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0106c93:	74 60                	je     f0106cf5 <unmap_frame+0x84>
	{
		if (ptr_frame_info->isBuffered && !CHECK_IF_KERNEL_ADDRESS((uint32)virtual_address))
f0106c95:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0106c98:	8a 40 14             	mov    0x14(%eax),%al
f0106c9b:	84 c0                	test   %al,%al
f0106c9d:	74 1c                	je     f0106cbb <unmap_frame+0x4a>
f0106c9f:	81 7d 0c ff ff bf ee 	cmpl   $0xeebfffff,0xc(%ebp)
f0106ca6:	77 13                	ja     f0106cbb <unmap_frame+0x4a>
			cprintf("Freeing BUFFERED frame at va %x!!!\n", virtual_address) ;
f0106ca8:	83 ec 08             	sub    $0x8,%esp
f0106cab:	ff 75 0c             	pushl  0xc(%ebp)
f0106cae:	68 a4 54 13 f0       	push   $0xf01354a4
f0106cb3:	e8 75 9f ff ff       	call   f0100c2d <cprintf>
f0106cb8:	83 c4 10             	add    $0x10,%esp
		decrement_references(ptr_frame_info);
f0106cbb:	83 ec 0c             	sub    $0xc,%esp
f0106cbe:	ff 75 f4             	pushl  -0xc(%ebp)
f0106cc1:	e8 73 fc ff ff       	call   f0106939 <decrement_references>
f0106cc6:	83 c4 10             	add    $0x10,%esp
		ptr_page_table[PTX(virtual_address)] = 0;
f0106cc9:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0106ccc:	8b 55 0c             	mov    0xc(%ebp),%edx
f0106ccf:	c1 ea 0c             	shr    $0xc,%edx
f0106cd2:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0106cd8:	c1 e2 02             	shl    $0x2,%edx
f0106cdb:	01 d0                	add    %edx,%eax
f0106cdd:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
		tlb_invalidate(ptr_page_directory, (void *)virtual_address);
f0106ce3:	8b 45 0c             	mov    0xc(%ebp),%eax
f0106ce6:	83 ec 08             	sub    $0x8,%esp
f0106ce9:	50                   	push   %eax
f0106cea:	ff 75 08             	pushl  0x8(%ebp)
f0106ced:	e8 d4 f6 ff ff       	call   f01063c6 <tlb_invalidate>
f0106cf2:	83 c4 10             	add    $0x10,%esp
	}
}
f0106cf5:	90                   	nop
f0106cf6:	c9                   	leave  
f0106cf7:	c3                   	ret    

f0106cf8 <loadtime_map_frame>:
// RETURNS:
//   0 on success
//
//
int loadtime_map_frame(uint32 *ptr_page_directory, struct FrameInfo *ptr_frame_info, uint32 virtual_address, int perm)
{
f0106cf8:	55                   	push   %ebp
f0106cf9:	89 e5                	mov    %esp,%ebp
f0106cfb:	83 ec 28             	sub    $0x28,%esp
	uint32 physical_address = to_physical_address(ptr_frame_info);
f0106cfe:	ff 75 0c             	pushl  0xc(%ebp)
f0106d01:	e8 67 f6 ff ff       	call   f010636d <to_physical_address>
f0106d06:	83 c4 04             	add    $0x4,%esp
f0106d09:	89 45 f4             	mov    %eax,-0xc(%ebp)
	uint32 *ptr_page_table;

	uint32 page_directory_entry = ptr_page_directory[PDX(virtual_address)];
f0106d0c:	8b 45 10             	mov    0x10(%ebp),%eax
f0106d0f:	c1 e8 16             	shr    $0x16,%eax
f0106d12:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0106d19:	8b 45 08             	mov    0x8(%ebp),%eax
f0106d1c:	01 d0                	add    %edx,%eax
f0106d1e:	8b 00                	mov    (%eax),%eax
f0106d20:	89 45 f0             	mov    %eax,-0x10(%ebp)
	{
		ptr_page_table = (uint32*)kheap_virtual_address(EXTRACT_ADDRESS(page_directory_entry)) ;
	}
	else
	{
		ptr_page_table = STATIC_KERNEL_VIRTUAL_ADDRESS(EXTRACT_ADDRESS(page_directory_entry)) ;
f0106d23:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0106d26:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0106d2b:	89 45 ec             	mov    %eax,-0x14(%ebp)
f0106d2e:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0106d31:	c1 e8 0c             	shr    $0xc,%eax
f0106d34:	89 45 e8             	mov    %eax,-0x18(%ebp)
f0106d37:	a1 50 0e 6c f0       	mov    0xf06c0e50,%eax
f0106d3c:	39 45 e8             	cmp    %eax,-0x18(%ebp)
f0106d3f:	72 17                	jb     f0106d58 <loadtime_map_frame+0x60>
f0106d41:	ff 75 ec             	pushl  -0x14(%ebp)
f0106d44:	68 74 54 13 f0       	push   $0xf0135474
f0106d49:	68 e6 01 00 00       	push   $0x1e6
f0106d4e:	68 b7 53 13 f0       	push   $0xf01353b7
f0106d53:	e8 4e 94 ff ff       	call   f01001a6 <_panic>
f0106d58:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0106d5b:	2d 00 00 00 10       	sub    $0x10000000,%eax
f0106d60:	89 45 e4             	mov    %eax,-0x1c(%ebp)
	}

	//if page table not exist, create it in memory and link it with the directory
	if (page_directory_entry == 0)
f0106d63:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0106d67:	75 15                	jne    f0106d7e <loadtime_map_frame+0x86>
		{
			ptr_page_table = create_page_table(ptr_page_directory, virtual_address);
		}
#else
		{
			__static_cpt(ptr_page_directory, virtual_address, &ptr_page_table);
f0106d69:	83 ec 04             	sub    $0x4,%esp
f0106d6c:	8d 45 e4             	lea    -0x1c(%ebp),%eax
f0106d6f:	50                   	push   %eax
f0106d70:	ff 75 10             	pushl  0x10(%ebp)
f0106d73:	ff 75 08             	pushl  0x8(%ebp)
f0106d76:	e8 14 fd ff ff       	call   f0106a8f <__static_cpt>
f0106d7b:	83 c4 10             	add    $0x10,%esp
		}
#endif
	}

	ptr_frame_info->references++;
f0106d7e:	8b 45 0c             	mov    0xc(%ebp),%eax
f0106d81:	8b 40 08             	mov    0x8(%eax),%eax
f0106d84:	40                   	inc    %eax
f0106d85:	8b 55 0c             	mov    0xc(%ebp),%edx
f0106d88:	66 89 42 08          	mov    %ax,0x8(%edx)
	ptr_page_table[PTX(virtual_address)] = CONSTRUCT_ENTRY(physical_address , perm | PERM_PRESENT);
f0106d8c:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0106d8f:	8b 55 10             	mov    0x10(%ebp),%edx
f0106d92:	c1 ea 0c             	shr    $0xc,%edx
f0106d95:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0106d9b:	c1 e2 02             	shl    $0x2,%edx
f0106d9e:	01 c2                	add    %eax,%edx
f0106da0:	8b 45 14             	mov    0x14(%ebp),%eax
f0106da3:	0b 45 f4             	or     -0xc(%ebp),%eax
f0106da6:	83 c8 01             	or     $0x1,%eax
f0106da9:	89 02                	mov    %eax,(%edx)

	return 0;
f0106dab:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0106db0:	c9                   	leave  
f0106db1:	c3                   	ret    

f0106db2 <calculate_available_frames>:



// calculate_available_frames:
struct freeFramesCounters calculate_available_frames()
{
f0106db2:	55                   	push   %ebp
f0106db3:	89 e5                	mov    %esp,%ebp
f0106db5:	57                   	push   %edi
f0106db6:	56                   	push   %esi
f0106db7:	53                   	push   %ebx
f0106db8:	83 ec 20             	sub    $0x20,%esp

	//calculate the free frames from the free frame list
	struct FrameInfo *ptr;
	uint32 totalFreeUnBuffered = 0 ;
f0106dbb:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
	uint32 totalFreeBuffered = 0 ;
f0106dc2:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
	uint32 totalModified = 0 ;
f0106dc9:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)

	LIST_FOREACH(ptr, &free_frame_list)
f0106dd0:	a1 58 0e 6c f0       	mov    0xf06c0e58,%eax
f0106dd5:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0106dd8:	eb 1a                	jmp    f0106df4 <calculate_available_frames+0x42>
	{
		if (ptr->isBuffered)
f0106dda:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0106ddd:	8a 40 14             	mov    0x14(%eax),%al
f0106de0:	84 c0                	test   %al,%al
f0106de2:	74 05                	je     f0106de9 <calculate_available_frames+0x37>
			totalFreeBuffered++ ;
f0106de4:	ff 45 e8             	incl   -0x18(%ebp)
f0106de7:	eb 03                	jmp    f0106dec <calculate_available_frames+0x3a>
		else
			totalFreeUnBuffered++ ;
f0106de9:	ff 45 ec             	incl   -0x14(%ebp)
	struct FrameInfo *ptr;
	uint32 totalFreeUnBuffered = 0 ;
	uint32 totalFreeBuffered = 0 ;
	uint32 totalModified = 0 ;

	LIST_FOREACH(ptr, &free_frame_list)
f0106dec:	a1 60 0e 6c f0       	mov    0xf06c0e60,%eax
f0106df1:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0106df4:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0106df8:	74 07                	je     f0106e01 <calculate_available_frames+0x4f>
f0106dfa:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0106dfd:	8b 00                	mov    (%eax),%eax
f0106dff:	eb 05                	jmp    f0106e06 <calculate_available_frames+0x54>
f0106e01:	b8 00 00 00 00       	mov    $0x0,%eax
f0106e06:	a3 60 0e 6c f0       	mov    %eax,0xf06c0e60
f0106e0b:	a1 60 0e 6c f0       	mov    0xf06c0e60,%eax
f0106e10:	85 c0                	test   %eax,%eax
f0106e12:	75 c6                	jne    f0106dda <calculate_available_frames+0x28>
f0106e14:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0106e18:	75 c0                	jne    f0106dda <calculate_available_frames+0x28>
			totalFreeBuffered++ ;
		else
			totalFreeUnBuffered++ ;
	}

	LIST_FOREACH(ptr, &modified_frame_list)
f0106e1a:	a1 c0 8a 65 f0       	mov    0xf0658ac0,%eax
f0106e1f:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0106e22:	eb 0b                	jmp    f0106e2f <calculate_available_frames+0x7d>
	{
		totalModified++ ;
f0106e24:	ff 45 e4             	incl   -0x1c(%ebp)
			totalFreeBuffered++ ;
		else
			totalFreeUnBuffered++ ;
	}

	LIST_FOREACH(ptr, &modified_frame_list)
f0106e27:	a1 c8 8a 65 f0       	mov    0xf0658ac8,%eax
f0106e2c:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0106e2f:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0106e33:	74 07                	je     f0106e3c <calculate_available_frames+0x8a>
f0106e35:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0106e38:	8b 00                	mov    (%eax),%eax
f0106e3a:	eb 05                	jmp    f0106e41 <calculate_available_frames+0x8f>
f0106e3c:	b8 00 00 00 00       	mov    $0x0,%eax
f0106e41:	a3 c8 8a 65 f0       	mov    %eax,0xf0658ac8
f0106e46:	a1 c8 8a 65 f0       	mov    0xf0658ac8,%eax
f0106e4b:	85 c0                	test   %eax,%eax
f0106e4d:	75 d5                	jne    f0106e24 <calculate_available_frames+0x72>
f0106e4f:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0106e53:	75 cf                	jne    f0106e24 <calculate_available_frames+0x72>
	{
		totalModified++ ;
	}

	struct freeFramesCounters counters ;
	counters.freeBuffered = totalFreeBuffered ;
f0106e55:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0106e58:	89 45 d8             	mov    %eax,-0x28(%ebp)
	counters.freeNotBuffered = totalFreeUnBuffered ;
f0106e5b:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0106e5e:	89 45 dc             	mov    %eax,-0x24(%ebp)
	counters.modified = totalModified;
f0106e61:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0106e64:	89 45 e0             	mov    %eax,-0x20(%ebp)
	return counters;
f0106e67:	8b 45 08             	mov    0x8(%ebp),%eax
f0106e6a:	89 c3                	mov    %eax,%ebx
f0106e6c:	8d 45 d8             	lea    -0x28(%ebp),%eax
f0106e6f:	ba 03 00 00 00       	mov    $0x3,%edx
f0106e74:	89 df                	mov    %ebx,%edi
f0106e76:	89 c6                	mov    %eax,%esi
f0106e78:	89 d1                	mov    %edx,%ecx
f0106e7a:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
}
f0106e7c:	8b 45 08             	mov    0x8(%ebp),%eax
f0106e7f:	83 c4 20             	add    $0x20,%esp
f0106e82:	5b                   	pop    %ebx
f0106e83:	5e                   	pop    %esi
f0106e84:	5f                   	pop    %edi
f0106e85:	5d                   	pop    %ebp
f0106e86:	c2 04 00             	ret    $0x4

f0106e89 <to_frame_number>:
struct FrameInfo *get_frame_info(uint32 *ptr_page_directory, uint32 virtual_address, uint32 **ptr_page_table);
void decrement_references(struct FrameInfo* ptr_frame_info);
void initialize_frame_info(struct FrameInfo *ptr_frame_info);

static inline uint32 to_frame_number(struct FrameInfo *ptr_frame_info)
{
f0106e89:	55                   	push   %ebp
f0106e8a:	89 e5                	mov    %esp,%ebp
	return ptr_frame_info - frames_info;
f0106e8c:	8b 45 08             	mov    0x8(%ebp),%eax
f0106e8f:	8b 15 90 0e 6c f0    	mov    0xf06c0e90,%edx
f0106e95:	29 d0                	sub    %edx,%eax
f0106e97:	c1 f8 03             	sar    $0x3,%eax
f0106e9a:	89 c2                	mov    %eax,%edx
f0106e9c:	89 d0                	mov    %edx,%eax
f0106e9e:	c1 e0 02             	shl    $0x2,%eax
f0106ea1:	01 d0                	add    %edx,%eax
f0106ea3:	c1 e0 02             	shl    $0x2,%eax
f0106ea6:	01 d0                	add    %edx,%eax
f0106ea8:	c1 e0 02             	shl    $0x2,%eax
f0106eab:	01 d0                	add    %edx,%eax
f0106ead:	89 c1                	mov    %eax,%ecx
f0106eaf:	c1 e1 08             	shl    $0x8,%ecx
f0106eb2:	01 c8                	add    %ecx,%eax
f0106eb4:	89 c1                	mov    %eax,%ecx
f0106eb6:	c1 e1 10             	shl    $0x10,%ecx
f0106eb9:	01 c8                	add    %ecx,%eax
f0106ebb:	01 c0                	add    %eax,%eax
f0106ebd:	01 d0                	add    %edx,%eax
}
f0106ebf:	5d                   	pop    %ebp
f0106ec0:	c3                   	ret    

f0106ec1 <to_physical_address>:

static inline uint32 to_physical_address(struct FrameInfo *ptr_frame_info)
{
f0106ec1:	55                   	push   %ebp
f0106ec2:	89 e5                	mov    %esp,%ebp
	return to_frame_number(ptr_frame_info) << PGSHIFT;
f0106ec4:	ff 75 08             	pushl  0x8(%ebp)
f0106ec7:	e8 bd ff ff ff       	call   f0106e89 <to_frame_number>
f0106ecc:	83 c4 04             	add    $0x4,%esp
f0106ecf:	c1 e0 0c             	shl    $0xc,%eax
}
f0106ed2:	c9                   	leave  
f0106ed3:	c3                   	ret    

f0106ed4 <to_frame_info>:

static inline struct FrameInfo* to_frame_info(uint32 physical_address)
{
f0106ed4:	55                   	push   %ebp
f0106ed5:	89 e5                	mov    %esp,%ebp
f0106ed7:	83 ec 08             	sub    $0x8,%esp
	if (PPN(physical_address) >= number_of_frames)
f0106eda:	8b 45 08             	mov    0x8(%ebp),%eax
f0106edd:	c1 e8 0c             	shr    $0xc,%eax
f0106ee0:	89 c2                	mov    %eax,%edx
f0106ee2:	a1 50 0e 6c f0       	mov    0xf06c0e50,%eax
f0106ee7:	39 c2                	cmp    %eax,%edx
f0106ee9:	72 14                	jb     f0106eff <to_frame_info+0x2b>
		panic("to_frame_info called with invalid pa");
f0106eeb:	83 ec 04             	sub    $0x4,%esp
f0106eee:	68 c8 54 13 f0       	push   $0xf01354c8
f0106ef3:	6a 55                	push   $0x55
f0106ef5:	68 ed 54 13 f0       	push   $0xf01354ed
f0106efa:	e8 a7 92 ff ff       	call   f01001a6 <_panic>
	return &frames_info[PPN(physical_address)];
f0106eff:	8b 15 90 0e 6c f0    	mov    0xf06c0e90,%edx
f0106f05:	8b 45 08             	mov    0x8(%ebp),%eax
f0106f08:	c1 e8 0c             	shr    $0xc,%eax
f0106f0b:	89 c1                	mov    %eax,%ecx
f0106f0d:	89 c8                	mov    %ecx,%eax
f0106f0f:	01 c0                	add    %eax,%eax
f0106f11:	01 c8                	add    %ecx,%eax
f0106f13:	c1 e0 03             	shl    $0x3,%eax
f0106f16:	01 d0                	add    %edx,%eax
}
f0106f18:	c9                   	leave  
f0106f19:	c3                   	ret    

f0106f1a <create_shares_array>:
// [1] Create "shares" array:
//===========================
//Dynamically allocate the array of shared objects
//initialize the array of shared objects by 0's and empty = 1
void create_shares_array(uint32 numOfElements)
{
f0106f1a:	55                   	push   %ebp
f0106f1b:	89 e5                	mov    %esp,%ebp
f0106f1d:	83 ec 18             	sub    $0x18,%esp
	if (shares == NULL)
	{
		panic("Kernel runs out of memory\nCan't create the array of shared objects.");
	}
#endif
	for (int i = 0; i < MAX_SHARES; ++i)
f0106f20:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0106f27:	eb 5f                	jmp    f0106f88 <create_shares_array+0x6e>
	{
		memset(&(shares[i]), 0, sizeof(struct Share));
f0106f29:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0106f2c:	89 d0                	mov    %edx,%eax
f0106f2e:	01 c0                	add    %eax,%eax
f0106f30:	01 d0                	add    %edx,%eax
f0106f32:	01 c0                	add    %eax,%eax
f0106f34:	01 d0                	add    %edx,%eax
f0106f36:	c1 e0 02             	shl    $0x2,%eax
f0106f39:	01 d0                	add    %edx,%eax
f0106f3b:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f0106f42:	01 d0                	add    %edx,%eax
f0106f44:	c1 e0 04             	shl    $0x4,%eax
f0106f47:	05 00 8b 65 f0       	add    $0xf0658b00,%eax
f0106f4c:	83 ec 04             	sub    $0x4,%esp
f0106f4f:	68 50 10 00 00       	push   $0x1050
f0106f54:	6a 00                	push   $0x0
f0106f56:	50                   	push   %eax
f0106f57:	e8 bd 99 02 00       	call   f0130919 <memset>
f0106f5c:	83 c4 10             	add    $0x10,%esp
		shares[i].empty = 1;
f0106f5f:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0106f62:	89 d0                	mov    %edx,%eax
f0106f64:	01 c0                	add    %eax,%eax
f0106f66:	01 d0                	add    %edx,%eax
f0106f68:	01 c0                	add    %eax,%eax
f0106f6a:	01 d0                	add    %edx,%eax
f0106f6c:	c1 e0 02             	shl    $0x2,%eax
f0106f6f:	01 d0                	add    %edx,%eax
f0106f71:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f0106f78:	01 d0                	add    %edx,%eax
f0106f7a:	c1 e0 04             	shl    $0x4,%eax
f0106f7d:	05 4d 8b 65 f0       	add    $0xf0658b4d,%eax
f0106f82:	c6 00 01             	movb   $0x1,(%eax)
	if (shares == NULL)
	{
		panic("Kernel runs out of memory\nCan't create the array of shared objects.");
	}
#endif
	for (int i = 0; i < MAX_SHARES; ++i)
f0106f85:	ff 45 f4             	incl   -0xc(%ebp)
f0106f88:	83 7d f4 63          	cmpl   $0x63,-0xc(%ebp)
f0106f8c:	7e 9b                	jle    f0106f29 <create_shares_array+0xf>
	{
		memset(&(shares[i]), 0, sizeof(struct Share));
		shares[i].empty = 1;
	}
}
f0106f8e:	90                   	nop
f0106f8f:	c9                   	leave  
f0106f90:	c3                   	ret    

f0106f91 <allocate_share_object>:
//	a) if succeed:
//		1. allocatedObject (pointer to struct Share) passed by reference
//		2. sharedObjectID (its index in the array) as a return parameter
//	b) E_NO_SHARE if the the array of shares is full (i.e. reaches "MAX_SHARES")
int allocate_share_object(struct Share **allocatedObject)
{
f0106f91:	55                   	push   %ebp
f0106f92:	89 e5                	mov    %esp,%ebp
f0106f94:	83 ec 18             	sub    $0x18,%esp
	int32 sharedObjectID = -1 ;
f0106f97:	c7 45 f4 ff ff ff ff 	movl   $0xffffffff,-0xc(%ebp)
	for (int i = 0; i < MAX_SHARES; ++i)
f0106f9e:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f0106fa5:	eb 34                	jmp    f0106fdb <allocate_share_object+0x4a>
	{
		if (shares[i].empty)
f0106fa7:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0106faa:	89 d0                	mov    %edx,%eax
f0106fac:	01 c0                	add    %eax,%eax
f0106fae:	01 d0                	add    %edx,%eax
f0106fb0:	01 c0                	add    %eax,%eax
f0106fb2:	01 d0                	add    %edx,%eax
f0106fb4:	c1 e0 02             	shl    $0x2,%eax
f0106fb7:	01 d0                	add    %edx,%eax
f0106fb9:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f0106fc0:	01 d0                	add    %edx,%eax
f0106fc2:	c1 e0 04             	shl    $0x4,%eax
f0106fc5:	05 4d 8b 65 f0       	add    $0xf0658b4d,%eax
f0106fca:	8a 00                	mov    (%eax),%al
f0106fcc:	84 c0                	test   %al,%al
f0106fce:	74 08                	je     f0106fd8 <allocate_share_object+0x47>
		{
			sharedObjectID = i;
f0106fd0:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0106fd3:	89 45 f4             	mov    %eax,-0xc(%ebp)
			break;
f0106fd6:	eb 09                	jmp    f0106fe1 <allocate_share_object+0x50>
//		2. sharedObjectID (its index in the array) as a return parameter
//	b) E_NO_SHARE if the the array of shares is full (i.e. reaches "MAX_SHARES")
int allocate_share_object(struct Share **allocatedObject)
{
	int32 sharedObjectID = -1 ;
	for (int i = 0; i < MAX_SHARES; ++i)
f0106fd8:	ff 45 f0             	incl   -0x10(%ebp)
f0106fdb:	83 7d f0 63          	cmpl   $0x63,-0x10(%ebp)
f0106fdf:	7e c6                	jle    f0106fa7 <allocate_share_object+0x16>
			sharedObjectID = i;
			break;
		}
	}

	if (sharedObjectID == -1)
f0106fe1:	83 7d f4 ff          	cmpl   $0xffffffff,-0xc(%ebp)
f0106fe5:	75 14                	jne    f0106ffb <allocate_share_object+0x6a>
				MAX_SHARES *= 2;
			}
		}
#else
		{
			panic("Attempt to dynamically allocate space inside kernel while kheap is disabled .. ");
f0106fe7:	83 ec 04             	sub    $0x4,%esp
f0106fea:	68 08 55 13 f0       	push   $0xf0135508
f0106fef:	6a 54                	push   $0x54
f0106ff1:	68 58 55 13 f0       	push   $0xf0135558
f0106ff6:	e8 ab 91 ff ff       	call   f01001a6 <_panic>
			return E_NO_SHARE;
		}
#endif
	}

	*allocatedObject = &(shares[sharedObjectID]);
f0106ffb:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0106ffe:	89 d0                	mov    %edx,%eax
f0107000:	01 c0                	add    %eax,%eax
f0107002:	01 d0                	add    %edx,%eax
f0107004:	01 c0                	add    %eax,%eax
f0107006:	01 d0                	add    %edx,%eax
f0107008:	c1 e0 02             	shl    $0x2,%eax
f010700b:	01 d0                	add    %edx,%eax
f010700d:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f0107014:	01 d0                	add    %edx,%eax
f0107016:	c1 e0 04             	shl    $0x4,%eax
f0107019:	8d 90 00 8b 65 f0    	lea    -0xf9a7500(%eax),%edx
f010701f:	8b 45 08             	mov    0x8(%ebp),%eax
f0107022:	89 10                	mov    %edx,(%eax)
	shares[sharedObjectID].empty = 0;
f0107024:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0107027:	89 d0                	mov    %edx,%eax
f0107029:	01 c0                	add    %eax,%eax
f010702b:	01 d0                	add    %edx,%eax
f010702d:	01 c0                	add    %eax,%eax
f010702f:	01 d0                	add    %edx,%eax
f0107031:	c1 e0 02             	shl    $0x2,%eax
f0107034:	01 d0                	add    %edx,%eax
f0107036:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f010703d:	01 d0                	add    %edx,%eax
f010703f:	c1 e0 04             	shl    $0x4,%eax
f0107042:	05 4d 8b 65 f0       	add    $0xf0658b4d,%eax
f0107047:	c6 00 00             	movb   $0x0,(%eax)
		{
			panic("Kernel runs out of memory\nCan't create the framesStorage.");
		}
	}
#endif
	memset(shares[sharedObjectID].framesStorage, 0, PAGE_SIZE);
f010704a:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010704d:	89 d0                	mov    %edx,%eax
f010704f:	01 c0                	add    %eax,%eax
f0107051:	01 d0                	add    %edx,%eax
f0107053:	01 c0                	add    %eax,%eax
f0107055:	01 d0                	add    %edx,%eax
f0107057:	c1 e0 02             	shl    $0x2,%eax
f010705a:	01 d0                	add    %edx,%eax
f010705c:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f0107063:	01 d0                	add    %edx,%eax
f0107065:	c1 e0 04             	shl    $0x4,%eax
f0107068:	83 c0 50             	add    $0x50,%eax
f010706b:	05 00 8b 65 f0       	add    $0xf0658b00,%eax
f0107070:	83 ec 04             	sub    $0x4,%esp
f0107073:	68 00 10 00 00       	push   $0x1000
f0107078:	6a 00                	push   $0x0
f010707a:	50                   	push   %eax
f010707b:	e8 99 98 02 00       	call   f0130919 <memset>
f0107080:	83 c4 10             	add    $0x10,%esp

	return sharedObjectID;
f0107083:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f0107086:	c9                   	leave  
f0107087:	c3                   	ret    

f0107088 <get_share_object_ID>:
//Search for the given shared object in the "shares" array
//Return:
//	a) if found: SharedObjectID (index of the shared object in the array)
//	b) else: E_SHARED_MEM_NOT_EXISTS
int get_share_object_ID(int32 ownerID, char* name)
{
f0107088:	55                   	push   %ebp
f0107089:	89 e5                	mov    %esp,%ebp
f010708b:	83 ec 18             	sub    $0x18,%esp
	int i=0;
f010708e:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

	for(; i< MAX_SHARES; ++i)
f0107095:	e9 95 00 00 00       	jmp    f010712f <get_share_object_ID+0xa7>
	{
		if (shares[i].empty)
f010709a:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010709d:	89 d0                	mov    %edx,%eax
f010709f:	01 c0                	add    %eax,%eax
f01070a1:	01 d0                	add    %edx,%eax
f01070a3:	01 c0                	add    %eax,%eax
f01070a5:	01 d0                	add    %edx,%eax
f01070a7:	c1 e0 02             	shl    $0x2,%eax
f01070aa:	01 d0                	add    %edx,%eax
f01070ac:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f01070b3:	01 d0                	add    %edx,%eax
f01070b5:	c1 e0 04             	shl    $0x4,%eax
f01070b8:	05 4d 8b 65 f0       	add    $0xf0658b4d,%eax
f01070bd:	8a 00                	mov    (%eax),%al
f01070bf:	84 c0                	test   %al,%al
f01070c1:	75 68                	jne    f010712b <get_share_object_ID+0xa3>
			continue;

		//cprintf("shared var name = %s compared with %s\n", name, shares[i].name);
		if(shares[i].ownerID == ownerID && strcmp(name, shares[i].name)==0)
f01070c3:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01070c6:	89 d0                	mov    %edx,%eax
f01070c8:	01 c0                	add    %eax,%eax
f01070ca:	01 d0                	add    %edx,%eax
f01070cc:	01 c0                	add    %eax,%eax
f01070ce:	01 d0                	add    %edx,%eax
f01070d0:	c1 e0 02             	shl    $0x2,%eax
f01070d3:	01 d0                	add    %edx,%eax
f01070d5:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f01070dc:	01 d0                	add    %edx,%eax
f01070de:	c1 e0 04             	shl    $0x4,%eax
f01070e1:	05 00 8b 65 f0       	add    $0xf0658b00,%eax
f01070e6:	8b 00                	mov    (%eax),%eax
f01070e8:	3b 45 08             	cmp    0x8(%ebp),%eax
f01070eb:	75 3f                	jne    f010712c <get_share_object_ID+0xa4>
f01070ed:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01070f0:	89 d0                	mov    %edx,%eax
f01070f2:	01 c0                	add    %eax,%eax
f01070f4:	01 d0                	add    %edx,%eax
f01070f6:	01 c0                	add    %eax,%eax
f01070f8:	01 d0                	add    %edx,%eax
f01070fa:	c1 e0 02             	shl    $0x2,%eax
f01070fd:	01 d0                	add    %edx,%eax
f01070ff:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f0107106:	01 d0                	add    %edx,%eax
f0107108:	c1 e0 04             	shl    $0x4,%eax
f010710b:	05 00 8b 65 f0       	add    $0xf0658b00,%eax
f0107110:	83 c0 04             	add    $0x4,%eax
f0107113:	83 ec 08             	sub    $0x8,%esp
f0107116:	50                   	push   %eax
f0107117:	ff 75 0c             	pushl  0xc(%ebp)
f010711a:	e8 18 97 02 00       	call   f0130837 <strcmp>
f010711f:	83 c4 10             	add    $0x10,%esp
f0107122:	85 c0                	test   %eax,%eax
f0107124:	75 06                	jne    f010712c <get_share_object_ID+0xa4>
		{
			//cprintf("%s found\n", name);
			return i;
f0107126:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0107129:	eb 13                	jmp    f010713e <get_share_object_ID+0xb6>
	int i=0;

	for(; i< MAX_SHARES; ++i)
	{
		if (shares[i].empty)
			continue;
f010712b:	90                   	nop
//	b) else: E_SHARED_MEM_NOT_EXISTS
int get_share_object_ID(int32 ownerID, char* name)
{
	int i=0;

	for(; i< MAX_SHARES; ++i)
f010712c:	ff 45 f4             	incl   -0xc(%ebp)
f010712f:	83 7d f4 63          	cmpl   $0x63,-0xc(%ebp)
f0107133:	0f 8e 61 ff ff ff    	jle    f010709a <get_share_object_ID+0x12>
		{
			//cprintf("%s found\n", name);
			return i;
		}
	}
	return E_SHARED_MEM_NOT_EXISTS;
f0107139:	b8 f0 ff ff ff       	mov    $0xfffffff0,%eax
}
f010713e:	c9                   	leave  
f010713f:	c3                   	ret    

f0107140 <free_share_object>:
//delete the given sharedObjectID from the "shares" array
//Return:
//	a) 0 if succeed
//	b) E_SHARED_MEM_NOT_EXISTS if the shared object is not exists
int free_share_object(uint32 sharedObjectID)
{
f0107140:	55                   	push   %ebp
f0107141:	89 e5                	mov    %esp,%ebp
f0107143:	83 ec 08             	sub    $0x8,%esp
	if (sharedObjectID >= MAX_SHARES)
f0107146:	83 7d 08 63          	cmpl   $0x63,0x8(%ebp)
f010714a:	76 0a                	jbe    f0107156 <free_share_object+0x16>
		return E_SHARED_MEM_NOT_EXISTS;
f010714c:	b8 f0 ff ff ff       	mov    $0xfffffff0,%eax
f0107151:	e9 93 00 00 00       	jmp    f01071e9 <free_share_object+0xa9>

	//panic("deleteSharedObject: not implemented yet");
	clear_frames_storage(shares[sharedObjectID].framesStorage);
f0107156:	8b 55 08             	mov    0x8(%ebp),%edx
f0107159:	89 d0                	mov    %edx,%eax
f010715b:	01 c0                	add    %eax,%eax
f010715d:	01 d0                	add    %edx,%eax
f010715f:	01 c0                	add    %eax,%eax
f0107161:	01 d0                	add    %edx,%eax
f0107163:	c1 e0 02             	shl    $0x2,%eax
f0107166:	01 d0                	add    %edx,%eax
f0107168:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f010716f:	01 d0                	add    %edx,%eax
f0107171:	c1 e0 04             	shl    $0x4,%eax
f0107174:	83 c0 50             	add    $0x50,%eax
f0107177:	05 00 8b 65 f0       	add    $0xf0658b00,%eax
f010717c:	83 ec 0c             	sub    $0xc,%esp
f010717f:	50                   	push   %eax
f0107180:	e8 3e 01 00 00       	call   f01072c3 <clear_frames_storage>
f0107185:	83 c4 10             	add    $0x10,%esp
#if USE_KHEAP
	kfree(shares[sharedObjectID].framesStorage);
#endif
	memset(&(shares[sharedObjectID]), 0, sizeof(struct Share));
f0107188:	8b 55 08             	mov    0x8(%ebp),%edx
f010718b:	89 d0                	mov    %edx,%eax
f010718d:	01 c0                	add    %eax,%eax
f010718f:	01 d0                	add    %edx,%eax
f0107191:	01 c0                	add    %eax,%eax
f0107193:	01 d0                	add    %edx,%eax
f0107195:	c1 e0 02             	shl    $0x2,%eax
f0107198:	01 d0                	add    %edx,%eax
f010719a:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f01071a1:	01 d0                	add    %edx,%eax
f01071a3:	c1 e0 04             	shl    $0x4,%eax
f01071a6:	05 00 8b 65 f0       	add    $0xf0658b00,%eax
f01071ab:	83 ec 04             	sub    $0x4,%esp
f01071ae:	68 50 10 00 00       	push   $0x1050
f01071b3:	6a 00                	push   $0x0
f01071b5:	50                   	push   %eax
f01071b6:	e8 5e 97 02 00       	call   f0130919 <memset>
f01071bb:	83 c4 10             	add    $0x10,%esp
	shares[sharedObjectID].empty = 1;
f01071be:	8b 55 08             	mov    0x8(%ebp),%edx
f01071c1:	89 d0                	mov    %edx,%eax
f01071c3:	01 c0                	add    %eax,%eax
f01071c5:	01 d0                	add    %edx,%eax
f01071c7:	01 c0                	add    %eax,%eax
f01071c9:	01 d0                	add    %edx,%eax
f01071cb:	c1 e0 02             	shl    $0x2,%eax
f01071ce:	01 d0                	add    %edx,%eax
f01071d0:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f01071d7:	01 d0                	add    %edx,%eax
f01071d9:	c1 e0 04             	shl    $0x4,%eax
f01071dc:	05 4d 8b 65 f0       	add    $0xf0658b4d,%eax
f01071e1:	c6 00 01             	movb   $0x1,(%eax)

	return 0;
f01071e4:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01071e9:	c9                   	leave  
f01071ea:	c3                   	ret    

f01071eb <create_frames_storage>:
//===========================
// [5] Create frames_storage:
//===========================
// if KHEAP = 1: Create the frames_storage by allocating a PAGE for its directory
inline uint32* create_frames_storage()
{
f01071eb:	55                   	push   %ebp
f01071ec:	89 e5                	mov    %esp,%ebp
f01071ee:	83 ec 18             	sub    $0x18,%esp
	uint32* frames_storage = kmalloc(PAGE_SIZE);
f01071f1:	83 ec 0c             	sub    $0xc,%esp
f01071f4:	68 00 10 00 00       	push   $0x1000
f01071f9:	e8 c6 03 00 00       	call   f01075c4 <kmalloc>
f01071fe:	83 c4 10             	add    $0x10,%esp
f0107201:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if(frames_storage == NULL)
f0107204:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0107208:	75 17                	jne    f0107221 <create_frames_storage+0x36>
	{
		panic("NOT ENOUGH KERNEL HEAP SPACE");
f010720a:	83 ec 04             	sub    $0x4,%esp
f010720d:	68 79 55 13 f0       	push   $0xf0135579
f0107212:	68 a9 00 00 00       	push   $0xa9
f0107217:	68 58 55 13 f0       	push   $0xf0135558
f010721c:	e8 85 8f ff ff       	call   f01001a6 <_panic>
	}
	return frames_storage;
f0107221:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f0107224:	c9                   	leave  
f0107225:	c3                   	ret    

f0107226 <add_frame_to_storage>:
//===========================
// [6] Add frame to storage:
//===========================
// Add a frame info to the storage of frames at the given index
inline void add_frame_to_storage(uint32* frames_storage, struct FrameInfo* ptr_frame_info, uint32 index)
{
f0107226:	55                   	push   %ebp
f0107227:	89 e5                	mov    %esp,%ebp
f0107229:	53                   	push   %ebx
f010722a:	83 ec 14             	sub    $0x14,%esp
	uint32 va = index * PAGE_SIZE ;
f010722d:	8b 45 10             	mov    0x10(%ebp),%eax
f0107230:	c1 e0 0c             	shl    $0xc,%eax
f0107233:	89 45 f4             	mov    %eax,-0xc(%ebp)
	uint32 *ptr_page_table;
	int r = get_page_table(frames_storage,  va, &ptr_page_table);
f0107236:	83 ec 04             	sub    $0x4,%esp
f0107239:	8d 45 ec             	lea    -0x14(%ebp),%eax
f010723c:	50                   	push   %eax
f010723d:	ff 75 f4             	pushl  -0xc(%ebp)
f0107240:	ff 75 08             	pushl  0x8(%ebp)
f0107243:	e8 21 f7 ff ff       	call   f0106969 <get_page_table>
f0107248:	83 c4 10             	add    $0x10,%esp
f010724b:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if(r == TABLE_NOT_EXIST)
f010724e:	83 7d f0 01          	cmpl   $0x1,-0x10(%ebp)
f0107252:	75 15                	jne    f0107269 <add_frame_to_storage+0x43>
		{
			ptr_page_table = create_page_table(frames_storage, (uint32)va);
		}
#else
		{
			__static_cpt(frames_storage, (uint32)va, &ptr_page_table);
f0107254:	83 ec 04             	sub    $0x4,%esp
f0107257:	8d 45 ec             	lea    -0x14(%ebp),%eax
f010725a:	50                   	push   %eax
f010725b:	ff 75 f4             	pushl  -0xc(%ebp)
f010725e:	ff 75 08             	pushl  0x8(%ebp)
f0107261:	e8 29 f8 ff ff       	call   f0106a8f <__static_cpt>
f0107266:	83 c4 10             	add    $0x10,%esp

		}
#endif
	}
	ptr_page_table[PTX(va)] = CONSTRUCT_ENTRY(to_physical_address(ptr_frame_info), 0 | PERM_PRESENT);
f0107269:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010726c:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010726f:	c1 ea 0c             	shr    $0xc,%edx
f0107272:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0107278:	c1 e2 02             	shl    $0x2,%edx
f010727b:	8d 1c 10             	lea    (%eax,%edx,1),%ebx
f010727e:	83 ec 0c             	sub    $0xc,%esp
f0107281:	ff 75 0c             	pushl  0xc(%ebp)
f0107284:	e8 38 fc ff ff       	call   f0106ec1 <to_physical_address>
f0107289:	83 c4 10             	add    $0x10,%esp
f010728c:	83 c8 01             	or     $0x1,%eax
f010728f:	89 03                	mov    %eax,(%ebx)
}
f0107291:	90                   	nop
f0107292:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f0107295:	c9                   	leave  
f0107296:	c3                   	ret    

f0107297 <get_frame_from_storage>:
//===========================
// [7] Get frame from storage:
//===========================
// Get a frame info from the storage of frames at the given index
inline struct FrameInfo* get_frame_from_storage(uint32* frames_storage, uint32 index)
{
f0107297:	55                   	push   %ebp
f0107298:	89 e5                	mov    %esp,%ebp
f010729a:	83 ec 18             	sub    $0x18,%esp
	struct FrameInfo* ptr_frame_info;
	uint32 *ptr_page_table ;
	uint32 va = index * PAGE_SIZE ;
f010729d:	8b 45 0c             	mov    0xc(%ebp),%eax
f01072a0:	c1 e0 0c             	shl    $0xc,%eax
f01072a3:	89 45 f4             	mov    %eax,-0xc(%ebp)
	ptr_frame_info = get_frame_info(frames_storage,  va, &ptr_page_table);
f01072a6:	83 ec 04             	sub    $0x4,%esp
f01072a9:	8d 45 ec             	lea    -0x14(%ebp),%eax
f01072ac:	50                   	push   %eax
f01072ad:	ff 75 f4             	pushl  -0xc(%ebp)
f01072b0:	ff 75 08             	pushl  0x8(%ebp)
f01072b3:	e8 49 f9 ff ff       	call   f0106c01 <get_frame_info>
f01072b8:	83 c4 10             	add    $0x10,%esp
f01072bb:	89 45 f0             	mov    %eax,-0x10(%ebp)
	return ptr_frame_info;
f01072be:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
f01072c1:	c9                   	leave  
f01072c2:	c3                   	ret    

f01072c3 <clear_frames_storage>:

//===========================
// [8] Clear the frames_storage:
//===========================
inline void clear_frames_storage(uint32* frames_storage)
{
f01072c3:	55                   	push   %ebp
f01072c4:	89 e5                	mov    %esp,%ebp
f01072c6:	83 ec 18             	sub    $0x18,%esp
	int fourMega = 1024 * PAGE_SIZE ;
f01072c9:	c7 45 f0 00 00 40 00 	movl   $0x400000,-0x10(%ebp)
	int i ;
	for (i = 0 ; i < 1024 ; i++)
f01072d0:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01072d7:	eb 5b                	jmp    f0107334 <clear_frames_storage+0x71>
	{
		if (frames_storage[i] != 0)
f01072d9:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01072dc:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f01072e3:	8b 45 08             	mov    0x8(%ebp),%eax
f01072e6:	01 d0                	add    %edx,%eax
f01072e8:	8b 00                	mov    (%eax),%eax
f01072ea:	85 c0                	test   %eax,%eax
f01072ec:	74 43                	je     f0107331 <clear_frames_storage+0x6e>
			{
				kfree((void*)kheap_virtual_address(EXTRACT_ADDRESS(frames_storage[i])));
			}
#else
			{
				free_frame(to_frame_info(EXTRACT_ADDRESS(frames_storage[i])));
f01072ee:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01072f1:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f01072f8:	8b 45 08             	mov    0x8(%ebp),%eax
f01072fb:	01 d0                	add    %edx,%eax
f01072fd:	8b 00                	mov    (%eax),%eax
f01072ff:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0107304:	83 ec 0c             	sub    $0xc,%esp
f0107307:	50                   	push   %eax
f0107308:	e8 c7 fb ff ff       	call   f0106ed4 <to_frame_info>
f010730d:	83 c4 10             	add    $0x10,%esp
f0107310:	83 ec 0c             	sub    $0xc,%esp
f0107313:	50                   	push   %eax
f0107314:	e8 a6 f5 ff ff       	call   f01068bf <free_frame>
f0107319:	83 c4 10             	add    $0x10,%esp
			}
#endif
			frames_storage[i] = 0;
f010731c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010731f:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0107326:	8b 45 08             	mov    0x8(%ebp),%eax
f0107329:	01 d0                	add    %edx,%eax
f010732b:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
//===========================
inline void clear_frames_storage(uint32* frames_storage)
{
	int fourMega = 1024 * PAGE_SIZE ;
	int i ;
	for (i = 0 ; i < 1024 ; i++)
f0107331:	ff 45 f4             	incl   -0xc(%ebp)
f0107334:	81 7d f4 ff 03 00 00 	cmpl   $0x3ff,-0xc(%ebp)
f010733b:	7e 9c                	jle    f01072d9 <clear_frames_storage+0x16>
			}
#endif
			frames_storage[i] = 0;
		}
	}
}
f010733d:	90                   	nop
f010733e:	c9                   	leave  
f010733f:	c3                   	ret    

f0107340 <createSharedObject>:

//=========================
// [1] Create Share Object:
//=========================
int createSharedObject(int32 ownerID, char* shareName, uint32 size, uint8 isWritable, void* virtual_address)
{
f0107340:	55                   	push   %ebp
f0107341:	89 e5                	mov    %esp,%ebp
f0107343:	83 ec 18             	sub    $0x18,%esp
f0107346:	8b 45 14             	mov    0x14(%ebp),%eax
f0107349:	88 45 f4             	mov    %al,-0xc(%ebp)
	// your code is here, remove the panic and write your code
	panic("createSharedObject() is not implemented yet...!!");
f010734c:	83 ec 04             	sub    $0x4,%esp
f010734f:	68 98 55 13 f0       	push   $0xf0135598
f0107354:	68 fa 00 00 00       	push   $0xfa
f0107359:	68 58 55 13 f0       	push   $0xf0135558
f010735e:	e8 43 8e ff ff       	call   f01001a6 <_panic>

f0107363 <getSizeOfSharedObject>:

//==============================
// [2] Get Size of Share Object:
//==============================
int getSizeOfSharedObject(int32 ownerID, char* shareName)
{
f0107363:	55                   	push   %ebp
f0107364:	89 e5                	mov    %esp,%ebp
f0107366:	83 ec 08             	sub    $0x8,%esp
	// your code is here, remove the panic and write your code
	panic("getSizeOfSharedObject() is not implemented yet...!!");
f0107369:	83 ec 04             	sub    $0x4,%esp
f010736c:	68 cc 55 13 f0       	push   $0xf01355cc
f0107371:	68 0c 01 00 00       	push   $0x10c
f0107376:	68 58 55 13 f0       	push   $0xf0135558
f010737b:	e8 26 8e ff ff       	call   f01001a6 <_panic>

f0107380 <getSharedObject>:

//======================
// [3] Get Share Object:
//======================
int getSharedObject(int32 ownerID, char* shareName, void* virtual_address)
{
f0107380:	55                   	push   %ebp
f0107381:	89 e5                	mov    %esp,%ebp
f0107383:	83 ec 08             	sub    $0x8,%esp
	// your code is here, remove the panic and write your code
	panic("getSharedObject() is not implemented yet...!!");
f0107386:	83 ec 04             	sub    $0x4,%esp
f0107389:	68 00 56 13 f0       	push   $0xf0135600
f010738e:	68 1b 01 00 00       	push   $0x11b
f0107393:	68 58 55 13 f0       	push   $0xf0135558
f0107398:	e8 09 8e ff ff       	call   f01001a6 <_panic>

f010739d <freeSharedObject>:

//===================
// Free Share Object:
//===================
int freeSharedObject(int32 sharedObjectID, void *startVA)
{
f010739d:	55                   	push   %ebp
f010739e:	89 e5                	mov    %esp,%ebp
f01073a0:	83 ec 18             	sub    $0x18,%esp
	struct Env* myenv = curenv; //The calling environment
f01073a3:	a1 14 82 65 f0       	mov    0xf0658214,%eax
f01073a8:	89 45 f4             	mov    %eax,-0xc(%ebp)

	// your code is here, remove the panic and write your code
	panic("freeSharedObject() is not implemented yet...!!");
f01073ab:	83 ec 04             	sub    $0x4,%esp
f01073ae:	68 30 56 13 f0       	push   $0xf0135630
f01073b3:	68 33 01 00 00       	push   $0x133
f01073b8:	68 58 55 13 f0       	push   $0xf0135558
f01073bd:	e8 e4 8d ff ff       	call   f01001a6 <_panic>

f01073c2 <to_frame_info>:
{
	return to_frame_number(ptr_frame_info) << PGSHIFT;
}

static inline struct FrameInfo* to_frame_info(uint32 physical_address)
{
f01073c2:	55                   	push   %ebp
f01073c3:	89 e5                	mov    %esp,%ebp
f01073c5:	83 ec 08             	sub    $0x8,%esp
	if (PPN(physical_address) >= number_of_frames)
f01073c8:	8b 45 08             	mov    0x8(%ebp),%eax
f01073cb:	c1 e8 0c             	shr    $0xc,%eax
f01073ce:	89 c2                	mov    %eax,%edx
f01073d0:	a1 50 0e 6c f0       	mov    0xf06c0e50,%eax
f01073d5:	39 c2                	cmp    %eax,%edx
f01073d7:	72 14                	jb     f01073ed <to_frame_info+0x2b>
		panic("to_frame_info called with invalid pa");
f01073d9:	83 ec 04             	sub    $0x4,%esp
f01073dc:	68 60 56 13 f0       	push   $0xf0135660
f01073e1:	6a 55                	push   $0x55
f01073e3:	68 85 56 13 f0       	push   $0xf0135685
f01073e8:	e8 b9 8d ff ff       	call   f01001a6 <_panic>
	return &frames_info[PPN(physical_address)];
f01073ed:	8b 15 90 0e 6c f0    	mov    0xf06c0e90,%edx
f01073f3:	8b 45 08             	mov    0x8(%ebp),%eax
f01073f6:	c1 e8 0c             	shr    $0xc,%eax
f01073f9:	89 c1                	mov    %eax,%ecx
f01073fb:	89 c8                	mov    %ecx,%eax
f01073fd:	01 c0                	add    %eax,%eax
f01073ff:	01 c8                	add    %ecx,%eax
f0107401:	c1 e0 03             	shl    $0x3,%eax
f0107404:	01 d0                	add    %edx,%eax
}
f0107406:	c9                   	leave  
f0107407:	c3                   	ret    

f0107408 <initialize_dyn_block_system>:
//NOTE: All kernel heap allocations are multiples of PAGE_SIZE (4KB)//
//==================================================================//
//==================================================================//

void initialize_dyn_block_system()
{
f0107408:	55                   	push   %ebp
f0107409:	89 e5                	mov    %esp,%ebp
f010740b:	83 ec 18             	sub    $0x18,%esp
//TODO: [PROJECT MS2] [KERNEL HEAP] initialize_dyn_block_system
	// your code is here, remove the panic and write your code
	//kpanic_into_prompt("initialize_dyn_block_system() is not implemented yet...!!");

	//1.Initialize two lists (AllocMemBlocksList & FreeMemBlocksList) [Hint: use LIST_INIT()]
	LIST_INIT(&AllocMemBlocksList);
f010740e:	c7 05 d0 8a 65 f0 00 	movl   $0x0,0xf0658ad0
f0107415:	00 00 00 
f0107418:	c7 05 d4 8a 65 f0 00 	movl   $0x0,0xf0658ad4
f010741f:	00 00 00 
f0107422:	c7 05 dc 8a 65 f0 00 	movl   $0x0,0xf0658adc
f0107429:	00 00 00 
	LIST_INIT(&FreeMemBlocksList);
f010742c:	c7 05 a0 0e 6c f0 00 	movl   $0x0,0xf06c0ea0
f0107433:	00 00 00 
f0107436:	c7 05 a4 0e 6c f0 00 	movl   $0x0,0xf06c0ea4
f010743d:	00 00 00 
f0107440:	c7 05 ac 0e 6c f0 00 	movl   $0x0,0xf06c0eac
f0107447:	00 00 00 
	uint32 arr_size = 0;
f010744a:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	//DO NOTHING
#else
	 //Dynamically allocate the array of MemBlockNodes remember to:

	 //2. set MAX_MEM_BLOCK_CNT with the chosen size of the array
	 MAX_MEM_BLOCK_CNT = (KERNEL_HEAP_MAX-KERNEL_HEAP_START)/PAGE_SIZE;
f0107451:	c7 05 54 ea 6b f0 ff 	movl   $0x9fff,0xf06bea54
f0107458:	9f 00 00 

	 //3. assign starting address of MemBlockNodes array
	 MemBlockNodes  =(struct MemBlock*) KERNEL_HEAP_START;
f010745b:	c7 05 e0 8a 65 f0 00 	movl   $0xf6000000,0xf0658ae0
f0107462:	00 00 f6 

	 //4.calculate the total size of memory required for the MemBlockNodes array (size of all the Structs)
	 arr_size =  ROUNDUP(MAX_MEM_BLOCK_CNT * sizeof(struct MemBlock), PAGE_SIZE);
f0107465:	c7 45 f0 00 10 00 00 	movl   $0x1000,-0x10(%ebp)
f010746c:	a1 54 ea 6b f0       	mov    0xf06bea54,%eax
f0107471:	c1 e0 04             	shl    $0x4,%eax
f0107474:	89 c2                	mov    %eax,%edx
f0107476:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0107479:	01 d0                	add    %edx,%eax
f010747b:	48                   	dec    %eax
f010747c:	89 45 ec             	mov    %eax,-0x14(%ebp)
f010747f:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0107482:	ba 00 00 00 00       	mov    $0x0,%edx
f0107487:	f7 75 f0             	divl   -0x10(%ebp)
f010748a:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010748d:	29 d0                	sub    %edx,%eax
f010748f:	89 45 f4             	mov    %eax,-0xc(%ebp)

	 //5. allocate_chunk for this total memory size, with correct startAddress
	 allocate_chunk(ptr_page_directory, KERNEL_HEAP_START , arr_size , PERM_WRITEABLE | PERM_PRESENT);
f0107492:	a1 b8 0e 6c f0       	mov    0xf06c0eb8,%eax
f0107497:	6a 03                	push   $0x3
f0107499:	ff 75 f4             	pushl  -0xc(%ebp)
f010749c:	68 00 00 00 f6       	push   $0xf6000000
f01074a1:	50                   	push   %eax
f01074a2:	e8 b5 0f 00 00       	call   f010845c <allocate_chunk>
f01074a7:	83 c4 10             	add    $0x10,%esp
	 //HINT: can use alloc_chunk(...) function
#endif
	//6.Initialize AvailableMemBlocksList by filling it with the MemBlockNodes
	initialize_MemBlocksList(MAX_MEM_BLOCK_CNT);
f01074aa:	a1 54 ea 6b f0       	mov    0xf06bea54,%eax
f01074af:	83 ec 0c             	sub    $0xc,%esp
f01074b2:	50                   	push   %eax
f01074b3:	e8 dd 9d 02 00       	call   f0131295 <initialize_MemBlocksList>
f01074b8:	83 c4 10             	add    $0x10,%esp
	//7. Take a block from the AvailableMemBlocksList and fill its size with all of the heap size (without size allocated for the array) and think what should the start address be?
	struct MemBlock * NewBlock = LIST_FIRST(&AvailableMemBlocksList);
f01074bb:	a1 d4 0e 6c f0       	mov    0xf06c0ed4,%eax
f01074c0:	89 45 e8             	mov    %eax,-0x18(%ebp)
	NewBlock->sva = KERNEL_HEAP_START + arr_size;
f01074c3:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01074c6:	8d 90 00 00 00 f6    	lea    -0xa000000(%eax),%edx
f01074cc:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01074cf:	89 50 08             	mov    %edx,0x8(%eax)
	NewBlock->size = (KERNEL_HEAP_MAX-KERNEL_HEAP_START) - arr_size;
f01074d2:	b8 00 f0 ff 09       	mov    $0x9fff000,%eax
f01074d7:	2b 45 f4             	sub    -0xc(%ebp),%eax
f01074da:	89 c2                	mov    %eax,%edx
f01074dc:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01074df:	89 50 0c             	mov    %edx,0xc(%eax)
	LIST_REMOVE(&AvailableMemBlocksList,NewBlock);
f01074e2:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
f01074e6:	75 14                	jne    f01074fc <initialize_dyn_block_system+0xf4>
f01074e8:	83 ec 04             	sub    $0x4,%esp
f01074eb:	68 9f 56 13 f0       	push   $0xf013569f
f01074f0:	6a 30                	push   $0x30
f01074f2:	68 bd 56 13 f0       	push   $0xf01356bd
f01074f7:	e8 aa 8c ff ff       	call   f01001a6 <_panic>
f01074fc:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01074ff:	8b 00                	mov    (%eax),%eax
f0107501:	85 c0                	test   %eax,%eax
f0107503:	74 10                	je     f0107515 <initialize_dyn_block_system+0x10d>
f0107505:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0107508:	8b 00                	mov    (%eax),%eax
f010750a:	8b 55 e8             	mov    -0x18(%ebp),%edx
f010750d:	8b 52 04             	mov    0x4(%edx),%edx
f0107510:	89 50 04             	mov    %edx,0x4(%eax)
f0107513:	eb 0b                	jmp    f0107520 <initialize_dyn_block_system+0x118>
f0107515:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0107518:	8b 40 04             	mov    0x4(%eax),%eax
f010751b:	a3 d8 0e 6c f0       	mov    %eax,0xf06c0ed8
f0107520:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0107523:	8b 40 04             	mov    0x4(%eax),%eax
f0107526:	85 c0                	test   %eax,%eax
f0107528:	74 0f                	je     f0107539 <initialize_dyn_block_system+0x131>
f010752a:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010752d:	8b 40 04             	mov    0x4(%eax),%eax
f0107530:	8b 55 e8             	mov    -0x18(%ebp),%edx
f0107533:	8b 12                	mov    (%edx),%edx
f0107535:	89 10                	mov    %edx,(%eax)
f0107537:	eb 0a                	jmp    f0107543 <initialize_dyn_block_system+0x13b>
f0107539:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010753c:	8b 00                	mov    (%eax),%eax
f010753e:	a3 d4 0e 6c f0       	mov    %eax,0xf06c0ed4
f0107543:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0107546:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f010754c:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010754f:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f0107556:	a1 e0 0e 6c f0       	mov    0xf06c0ee0,%eax
f010755b:	48                   	dec    %eax
f010755c:	a3 e0 0e 6c f0       	mov    %eax,0xf06c0ee0
	//8. Insert a new MemBlock with the remaining heap size into the FreeMemBlocksList
	LIST_INSERT_HEAD(&FreeMemBlocksList, NewBlock);
f0107561:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
f0107565:	75 14                	jne    f010757b <initialize_dyn_block_system+0x173>
f0107567:	83 ec 04             	sub    $0x4,%esp
f010756a:	68 d0 56 13 f0       	push   $0xf01356d0
f010756f:	6a 32                	push   $0x32
f0107571:	68 bd 56 13 f0       	push   $0xf01356bd
f0107576:	e8 2b 8c ff ff       	call   f01001a6 <_panic>
f010757b:	8b 15 a0 0e 6c f0    	mov    0xf06c0ea0,%edx
f0107581:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0107584:	89 10                	mov    %edx,(%eax)
f0107586:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0107589:	8b 00                	mov    (%eax),%eax
f010758b:	85 c0                	test   %eax,%eax
f010758d:	74 0d                	je     f010759c <initialize_dyn_block_system+0x194>
f010758f:	a1 a0 0e 6c f0       	mov    0xf06c0ea0,%eax
f0107594:	8b 55 e8             	mov    -0x18(%ebp),%edx
f0107597:	89 50 04             	mov    %edx,0x4(%eax)
f010759a:	eb 08                	jmp    f01075a4 <initialize_dyn_block_system+0x19c>
f010759c:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010759f:	a3 a4 0e 6c f0       	mov    %eax,0xf06c0ea4
f01075a4:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01075a7:	a3 a0 0e 6c f0       	mov    %eax,0xf06c0ea0
f01075ac:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01075af:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f01075b6:	a1 ac 0e 6c f0       	mov    0xf06c0eac,%eax
f01075bb:	40                   	inc    %eax
f01075bc:	a3 ac 0e 6c f0       	mov    %eax,0xf06c0eac

}
f01075c1:	90                   	nop
f01075c2:	c9                   	leave  
f01075c3:	c3                   	ret    

f01075c4 <kmalloc>:

void* kmalloc(unsigned int size)
{
f01075c4:	55                   	push   %ebp
f01075c5:	89 e5                	mov    %esp,%ebp
f01075c7:	83 ec 08             	sub    $0x8,%esp
	//TODO: [PROJECT MS2] [KERNEL HEAP] kmalloc
	// your code is here, remove the panic and write your code
	kpanic_into_prompt("kmalloc() is not implemented yet...!!");
f01075ca:	83 ec 04             	sub    $0x4,%esp
f01075cd:	68 f4 56 13 f0       	push   $0xf01356f4
f01075d2:	6a 3a                	push   $0x3a
f01075d4:	68 bd 56 13 f0       	push   $0xf01356bd
f01075d9:	e8 ad 8c ff ff       	call   f010028b <_panic_into_prompt>

f01075de <kfree>:


}

void kfree(void* virtual_address)
{
f01075de:	55                   	push   %ebp
f01075df:	89 e5                	mov    %esp,%ebp
f01075e1:	83 ec 08             	sub    $0x8,%esp
	//TODO: [PROJECT MS2] [KERNEL HEAP] kfree
	// Write your code here, remove the panic and write your code
	panic("kfree() is not implemented yet...!!");
f01075e4:	83 ec 04             	sub    $0x4,%esp
f01075e7:	68 1c 57 13 f0       	push   $0xf013571c
f01075ec:	6a 48                	push   $0x48
f01075ee:	68 bd 56 13 f0       	push   $0xf01356bd
f01075f3:	e8 ae 8b ff ff       	call   f01001a6 <_panic>

f01075f8 <kheap_virtual_address>:

}

unsigned int kheap_virtual_address(unsigned int physical_address)
{
f01075f8:	55                   	push   %ebp
f01075f9:	89 e5                	mov    %esp,%ebp
f01075fb:	83 ec 18             	sub    $0x18,%esp
	//TODO: [PROJECT MS2] [KERNEL HEAP] kheap_virtual_address
	// Write your code here, remove the panic and write your code
//	panic("kheap_virtual_address() is not implemented yet...!!");

	struct FrameInfo *convert_to_va=to_frame_info(physical_address);
f01075fe:	83 ec 0c             	sub    $0xc,%esp
f0107601:	ff 75 08             	pushl  0x8(%ebp)
f0107604:	e8 b9 fd ff ff       	call   f01073c2 <to_frame_info>
f0107609:	83 c4 10             	add    $0x10,%esp
f010760c:	89 45 f4             	mov    %eax,-0xc(%ebp)
		if(physical_address!=E_NO_MEM)
f010760f:	83 7d 08 fc          	cmpl   $0xfffffffc,0x8(%ebp)
f0107613:	74 08                	je     f010761d <kheap_virtual_address+0x25>
		{
		return convert_to_va->va;
f0107615:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0107618:	8b 40 0c             	mov    0xc(%eax),%eax
f010761b:	eb 05                	jmp    f0107622 <kheap_virtual_address+0x2a>
		}
		else
		{
			return 0;
f010761d:	b8 00 00 00 00       	mov    $0x0,%eax
		}

	//return the virtual address corresponding to given physical_address
	//refer to the project presentation and documentation for details
	//EFFICIENT IMPLEMENTATION ~O(1) IS REQUIRED ==================
}
f0107622:	c9                   	leave  
f0107623:	c3                   	ret    

f0107624 <kheap_physical_address>:

unsigned int kheap_physical_address(unsigned int virtual_address)
{
f0107624:	55                   	push   %ebp
f0107625:	89 e5                	mov    %esp,%ebp
f0107627:	83 ec 08             	sub    $0x8,%esp
	//TODO: [PROJECT MS2] [KERNEL HEAP] kheap_physical_address
	// Write your code here, remove the panic and write your code
	panic("kheap_physical_address() is not implemented yet...!!");
f010762a:	83 ec 04             	sub    $0x4,%esp
f010762d:	68 40 57 13 f0       	push   $0xf0135740
f0107632:	6a 65                	push   $0x65
f0107634:	68 bd 56 13 f0       	push   $0xf01356bd
f0107639:	e8 68 8b ff ff       	call   f01001a6 <_panic>

f010763e <kfreeall>:
	//refer to the project presentation and documentation for details
}


void kfreeall()
{
f010763e:	55                   	push   %ebp
f010763f:	89 e5                	mov    %esp,%ebp
f0107641:	83 ec 08             	sub    $0x8,%esp
	panic("Not implemented!");
f0107644:	83 ec 04             	sub    $0x4,%esp
f0107647:	68 75 57 13 f0       	push   $0xf0135775
f010764c:	6a 6e                	push   $0x6e
f010764e:	68 bd 56 13 f0       	push   $0xf01356bd
f0107653:	e8 4e 8b ff ff       	call   f01001a6 <_panic>

f0107658 <kshrink>:

}

void kshrink(uint32 newSize)
{
f0107658:	55                   	push   %ebp
f0107659:	89 e5                	mov    %esp,%ebp
f010765b:	83 ec 08             	sub    $0x8,%esp
	panic("Not implemented!");
f010765e:	83 ec 04             	sub    $0x4,%esp
f0107661:	68 75 57 13 f0       	push   $0xf0135775
f0107666:	6a 74                	push   $0x74
f0107668:	68 bd 56 13 f0       	push   $0xf01356bd
f010766d:	e8 34 8b ff ff       	call   f01001a6 <_panic>

f0107672 <kexpand>:
}

void kexpand(uint32 newSize)
{
f0107672:	55                   	push   %ebp
f0107673:	89 e5                	mov    %esp,%ebp
f0107675:	83 ec 08             	sub    $0x8,%esp
	panic("Not implemented!");
f0107678:	83 ec 04             	sub    $0x4,%esp
f010767b:	68 75 57 13 f0       	push   $0xf0135775
f0107680:	6a 79                	push   $0x79
f0107682:	68 bd 56 13 f0       	push   $0xf01356bd
f0107687:	e8 1a 8b ff ff       	call   f01001a6 <_panic>

f010768c <krealloc>:

//	A call with virtual_address = null is equivalent to kmalloc().
//	A call with new_size = zero is equivalent to kfree().

void *krealloc(void *virtual_address, uint32 new_size)
{
f010768c:	55                   	push   %ebp
f010768d:	89 e5                	mov    %esp,%ebp
f010768f:	83 ec 08             	sub    $0x8,%esp
	//TODO: [PROJECT MS2 - BONUS] [KERNEL HEAP] krealloc
	// Write your code here, remove the panic and write your code
	panic("krealloc() is not implemented yet...!!");
f0107692:	83 ec 04             	sub    $0x4,%esp
f0107695:	68 88 57 13 f0       	push   $0xf0135788
f010769a:	68 90 00 00 00       	push   $0x90
f010769f:	68 bd 56 13 f0       	push   $0xf01356bd
f01076a4:	e8 fd 8a ff ff       	call   f01001a6 <_panic>

f01076a9 <to_frame_number>:
struct FrameInfo *get_frame_info(uint32 *ptr_page_directory, uint32 virtual_address, uint32 **ptr_page_table);
void decrement_references(struct FrameInfo* ptr_frame_info);
void initialize_frame_info(struct FrameInfo *ptr_frame_info);

static inline uint32 to_frame_number(struct FrameInfo *ptr_frame_info)
{
f01076a9:	55                   	push   %ebp
f01076aa:	89 e5                	mov    %esp,%ebp
	return ptr_frame_info - frames_info;
f01076ac:	8b 45 08             	mov    0x8(%ebp),%eax
f01076af:	8b 15 90 0e 6c f0    	mov    0xf06c0e90,%edx
f01076b5:	29 d0                	sub    %edx,%eax
f01076b7:	c1 f8 03             	sar    $0x3,%eax
f01076ba:	89 c2                	mov    %eax,%edx
f01076bc:	89 d0                	mov    %edx,%eax
f01076be:	c1 e0 02             	shl    $0x2,%eax
f01076c1:	01 d0                	add    %edx,%eax
f01076c3:	c1 e0 02             	shl    $0x2,%eax
f01076c6:	01 d0                	add    %edx,%eax
f01076c8:	c1 e0 02             	shl    $0x2,%eax
f01076cb:	01 d0                	add    %edx,%eax
f01076cd:	89 c1                	mov    %eax,%ecx
f01076cf:	c1 e1 08             	shl    $0x8,%ecx
f01076d2:	01 c8                	add    %ecx,%eax
f01076d4:	89 c1                	mov    %eax,%ecx
f01076d6:	c1 e1 10             	shl    $0x10,%ecx
f01076d9:	01 c8                	add    %ecx,%eax
f01076db:	01 c0                	add    %eax,%eax
f01076dd:	01 d0                	add    %edx,%eax
}
f01076df:	5d                   	pop    %ebp
f01076e0:	c3                   	ret    

f01076e1 <to_physical_address>:

static inline uint32 to_physical_address(struct FrameInfo *ptr_frame_info)
{
f01076e1:	55                   	push   %ebp
f01076e2:	89 e5                	mov    %esp,%ebp
	return to_frame_number(ptr_frame_info) << PGSHIFT;
f01076e4:	ff 75 08             	pushl  0x8(%ebp)
f01076e7:	e8 bd ff ff ff       	call   f01076a9 <to_frame_number>
f01076ec:	83 c4 04             	add    $0x4,%esp
f01076ef:	c1 e0 0c             	shl    $0xc,%eax
}
f01076f2:	c9                   	leave  
f01076f3:	c3                   	ret    

f01076f4 <pt_set_page_permissions>:
 */
#include "memory_manager.h"

/*[2.1] PAGE TABLE ENTRIES MANIPULATION */
inline void pt_set_page_permissions(uint32* page_directory, uint32 virtual_address, uint32 permissions_to_set, uint32 permissions_to_clear)
{
f01076f4:	55                   	push   %ebp
f01076f5:	89 e5                	mov    %esp,%ebp
f01076f7:	83 ec 18             	sub    $0x18,%esp
	//TODO: [PROJECT MS2] [PAGING HELPERS] pt_set_page_permissions
	// Write your code here, remove the panic and write your code
	uint32* page_table_point=NULL;
f01076fa:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	get_page_table(page_directory,virtual_address,&page_table_point);
f0107701:	83 ec 04             	sub    $0x4,%esp
f0107704:	8d 45 f4             	lea    -0xc(%ebp),%eax
f0107707:	50                   	push   %eax
f0107708:	ff 75 0c             	pushl  0xc(%ebp)
f010770b:	ff 75 08             	pushl  0x8(%ebp)
f010770e:	e8 56 f2 ff ff       	call   f0106969 <get_page_table>
f0107713:	83 c4 10             	add    $0x10,%esp

	if (page_table_point!=NULL)
f0107716:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0107719:	85 c0                	test   %eax,%eax
f010771b:	74 75                	je     f0107792 <pt_set_page_permissions+0x9e>
	{
		page_table_point[PTX(virtual_address)] &= ~(permissions_to_clear);
f010771d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0107720:	8b 55 0c             	mov    0xc(%ebp),%edx
f0107723:	c1 ea 0c             	shr    $0xc,%edx
f0107726:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f010772c:	c1 e2 02             	shl    $0x2,%edx
f010772f:	01 d0                	add    %edx,%eax
f0107731:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0107734:	8b 4d 0c             	mov    0xc(%ebp),%ecx
f0107737:	c1 e9 0c             	shr    $0xc,%ecx
f010773a:	81 e1 ff 03 00 00    	and    $0x3ff,%ecx
f0107740:	c1 e1 02             	shl    $0x2,%ecx
f0107743:	01 ca                	add    %ecx,%edx
f0107745:	8b 12                	mov    (%edx),%edx
f0107747:	8b 4d 14             	mov    0x14(%ebp),%ecx
f010774a:	f7 d1                	not    %ecx
f010774c:	21 ca                	and    %ecx,%edx
f010774e:	89 10                	mov    %edx,(%eax)
		page_table_point[PTX(virtual_address)] |= permissions_to_set;
f0107750:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0107753:	8b 55 0c             	mov    0xc(%ebp),%edx
f0107756:	c1 ea 0c             	shr    $0xc,%edx
f0107759:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f010775f:	c1 e2 02             	shl    $0x2,%edx
f0107762:	01 c2                	add    %eax,%edx
f0107764:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0107767:	8b 4d 0c             	mov    0xc(%ebp),%ecx
f010776a:	c1 e9 0c             	shr    $0xc,%ecx
f010776d:	81 e1 ff 03 00 00    	and    $0x3ff,%ecx
f0107773:	c1 e1 02             	shl    $0x2,%ecx
f0107776:	01 c8                	add    %ecx,%eax
f0107778:	8b 00                	mov    (%eax),%eax
f010777a:	0b 45 10             	or     0x10(%ebp),%eax
f010777d:	89 02                	mov    %eax,(%edx)
		tlb_invalidate((void *)NULL, (void *)virtual_address);
f010777f:	8b 45 0c             	mov    0xc(%ebp),%eax
f0107782:	83 ec 08             	sub    $0x8,%esp
f0107785:	50                   	push   %eax
f0107786:	6a 00                	push   $0x0
f0107788:	e8 39 ec ff ff       	call   f01063c6 <tlb_invalidate>
f010778d:	83 c4 10             	add    $0x10,%esp
	}
	else
	{
		panic("Page Table doesn't exist...!");
	}
}
f0107790:	eb 14                	jmp    f01077a6 <pt_set_page_permissions+0xb2>
		page_table_point[PTX(virtual_address)] |= permissions_to_set;
		tlb_invalidate((void *)NULL, (void *)virtual_address);
	}
	else
	{
		panic("Page Table doesn't exist...!");
f0107792:	83 ec 04             	sub    $0x4,%esp
f0107795:	68 af 57 13 f0       	push   $0xf01357af
f010779a:	6a 19                	push   $0x19
f010779c:	68 cc 57 13 f0       	push   $0xf01357cc
f01077a1:	e8 00 8a ff ff       	call   f01001a6 <_panic>
	}
}
f01077a6:	c9                   	leave  
f01077a7:	c3                   	ret    

f01077a8 <pt_get_page_permissions>:

inline int pt_get_page_permissions(uint32* page_directory, uint32 virtual_address )
{
f01077a8:	55                   	push   %ebp
f01077a9:	89 e5                	mov    %esp,%ebp
f01077ab:	83 ec 18             	sub    $0x18,%esp
	//TODO: [PROJECT MS2] [PAGING HELPERS] pt_get_page_permissions
	// Write your code here, remove the panic and write your code

	uint32* page_table_point=NULL;
f01077ae:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
	uint32 entry_of_page_table;
	uint32 Permissions_of_entry;
	get_page_table(page_directory,virtual_address,&page_table_point);
f01077b5:	83 ec 04             	sub    $0x4,%esp
f01077b8:	8d 45 ec             	lea    -0x14(%ebp),%eax
f01077bb:	50                   	push   %eax
f01077bc:	ff 75 0c             	pushl  0xc(%ebp)
f01077bf:	ff 75 08             	pushl  0x8(%ebp)
f01077c2:	e8 a2 f1 ff ff       	call   f0106969 <get_page_table>
f01077c7:	83 c4 10             	add    $0x10,%esp
	if(page_table_point!=NULL)
f01077ca:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01077cd:	85 c0                	test   %eax,%eax
f01077cf:	74 2b                	je     f01077fc <pt_get_page_permissions+0x54>
	{
		entry_of_page_table=page_table_point[PTX(virtual_address)];
f01077d1:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01077d4:	8b 55 0c             	mov    0xc(%ebp),%edx
f01077d7:	c1 ea 0c             	shr    $0xc,%edx
f01077da:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f01077e0:	c1 e2 02             	shl    $0x2,%edx
f01077e3:	01 d0                	add    %edx,%eax
f01077e5:	8b 00                	mov    (%eax),%eax
f01077e7:	89 45 f4             	mov    %eax,-0xc(%ebp)
		Permissions_of_entry=entry_of_page_table&=0x00000FFF;
f01077ea:	81 65 f4 ff 0f 00 00 	andl   $0xfff,-0xc(%ebp)
f01077f1:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01077f4:	89 45 f0             	mov    %eax,-0x10(%ebp)


		return Permissions_of_entry;
f01077f7:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01077fa:	eb 05                	jmp    f0107801 <pt_get_page_permissions+0x59>
	}

	else
	{
		return -1;
f01077fc:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
	}
}
f0107801:	c9                   	leave  
f0107802:	c3                   	ret    

f0107803 <pt_clear_page_table_entry>:

inline void pt_clear_page_table_entry(uint32* page_directory, uint32 virtual_address)
{
f0107803:	55                   	push   %ebp
f0107804:	89 e5                	mov    %esp,%ebp
f0107806:	83 ec 18             	sub    $0x18,%esp
	//TODO: [PROJECT MS2] [PAGING HELPERS] pt_clear_page_table_entry
	// Write your code here, remove the panic and write your code
	uint32* page_table_point=NULL;
f0107809:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	get_page_table(page_directory,virtual_address,&page_table_point);
f0107810:	83 ec 04             	sub    $0x4,%esp
f0107813:	8d 45 f4             	lea    -0xc(%ebp),%eax
f0107816:	50                   	push   %eax
f0107817:	ff 75 0c             	pushl  0xc(%ebp)
f010781a:	ff 75 08             	pushl  0x8(%ebp)
f010781d:	e8 47 f1 ff ff       	call   f0106969 <get_page_table>
f0107822:	83 c4 10             	add    $0x10,%esp
	if (page_table_point!=NULL)
f0107825:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0107828:	85 c0                	test   %eax,%eax
f010782a:	74 2d                	je     f0107859 <pt_clear_page_table_entry+0x56>
	{
		page_table_point[PTX(virtual_address)] = 0;
f010782c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010782f:	8b 55 0c             	mov    0xc(%ebp),%edx
f0107832:	c1 ea 0c             	shr    $0xc,%edx
f0107835:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f010783b:	c1 e2 02             	shl    $0x2,%edx
f010783e:	01 d0                	add    %edx,%eax
f0107840:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
		tlb_invalidate((void *)NULL, (void *)virtual_address);
f0107846:	8b 45 0c             	mov    0xc(%ebp),%eax
f0107849:	83 ec 08             	sub    $0x8,%esp
f010784c:	50                   	push   %eax
f010784d:	6a 00                	push   $0x0
f010784f:	e8 72 eb ff ff       	call   f01063c6 <tlb_invalidate>
f0107854:	83 c4 10             	add    $0x10,%esp
	}
	else
	{
		panic("Page Table doesn't exist...!");
	}
}
f0107857:	eb 14                	jmp    f010786d <pt_clear_page_table_entry+0x6a>
		page_table_point[PTX(virtual_address)] = 0;
		tlb_invalidate((void *)NULL, (void *)virtual_address);
	}
	else
	{
		panic("Page Table doesn't exist...!");
f0107859:	83 ec 04             	sub    $0x4,%esp
f010785c:	68 af 57 13 f0       	push   $0xf01357af
f0107861:	6a 42                	push   $0x42
f0107863:	68 cc 57 13 f0       	push   $0xf01357cc
f0107868:	e8 39 89 ff ff       	call   f01001a6 <_panic>
	}
}
f010786d:	c9                   	leave  
f010786e:	c3                   	ret    

f010786f <virtual_to_physical>:

/***********************************************************************************************/

/*[2.2] ADDRESS CONVERTION*/
inline int virtual_to_physical(uint32* page_directory, uint32 virtual_address)
{
f010786f:	55                   	push   %ebp
f0107870:	89 e5                	mov    %esp,%ebp
f0107872:	83 ec 18             	sub    $0x18,%esp
	//TODO: [PROJECT MS2] [PAGING HELPERS] virtual_to_physical
	// Write your code here, remove the panic and write your code
	uint32* page_table_point=NULL;
f0107875:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	get_page_table(page_directory,virtual_address,&page_table_point);
f010787c:	83 ec 04             	sub    $0x4,%esp
f010787f:	8d 45 f0             	lea    -0x10(%ebp),%eax
f0107882:	50                   	push   %eax
f0107883:	ff 75 0c             	pushl  0xc(%ebp)
f0107886:	ff 75 08             	pushl  0x8(%ebp)
f0107889:	e8 db f0 ff ff       	call   f0106969 <get_page_table>
f010788e:	83 c4 10             	add    $0x10,%esp

	if(page_table_point != NULL)
f0107891:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0107894:	85 c0                	test   %eax,%eax
f0107896:	74 28                	je     f01078c0 <virtual_to_physical+0x51>
	{
		struct FrameInfo * frame_info = get_frame_info(page_directory,virtual_address,&page_table_point);
f0107898:	83 ec 04             	sub    $0x4,%esp
f010789b:	8d 45 f0             	lea    -0x10(%ebp),%eax
f010789e:	50                   	push   %eax
f010789f:	ff 75 0c             	pushl  0xc(%ebp)
f01078a2:	ff 75 08             	pushl  0x8(%ebp)
f01078a5:	e8 57 f3 ff ff       	call   f0106c01 <get_frame_info>
f01078aa:	83 c4 10             	add    $0x10,%esp
f01078ad:	89 45 f4             	mov    %eax,-0xc(%ebp)
		return to_physical_address(frame_info);
f01078b0:	83 ec 0c             	sub    $0xc,%esp
f01078b3:	ff 75 f4             	pushl  -0xc(%ebp)
f01078b6:	e8 26 fe ff ff       	call   f01076e1 <to_physical_address>
f01078bb:	83 c4 10             	add    $0x10,%esp
f01078be:	eb 05                	jmp    f01078c5 <virtual_to_physical+0x56>
	}
	return -1;
f01078c0:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
f01078c5:	c9                   	leave  
f01078c6:	c3                   	ret    

f01078c7 <pd_is_table_used>:

///============================================================================================
/// Dealing with page directory entry flags

inline uint32 pd_is_table_used(uint32* page_directory, uint32 virtual_address)
{
f01078c7:	55                   	push   %ebp
f01078c8:	89 e5                	mov    %esp,%ebp
	return ( (page_directory[PDX(virtual_address)] & PERM_USED) == PERM_USED ? 1 : 0);
f01078ca:	8b 45 0c             	mov    0xc(%ebp),%eax
f01078cd:	c1 e8 16             	shr    $0x16,%eax
f01078d0:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f01078d7:	8b 45 08             	mov    0x8(%ebp),%eax
f01078da:	01 d0                	add    %edx,%eax
f01078dc:	8b 00                	mov    (%eax),%eax
f01078de:	83 e0 20             	and    $0x20,%eax
f01078e1:	85 c0                	test   %eax,%eax
f01078e3:	0f 95 c0             	setne  %al
f01078e6:	0f b6 c0             	movzbl %al,%eax
}
f01078e9:	5d                   	pop    %ebp
f01078ea:	c3                   	ret    

f01078eb <pd_set_table_unused>:

inline void pd_set_table_unused(uint32* page_directory, uint32 virtual_address)
{
f01078eb:	55                   	push   %ebp
f01078ec:	89 e5                	mov    %esp,%ebp
f01078ee:	83 ec 08             	sub    $0x8,%esp
	page_directory[PDX(virtual_address)] &= (~PERM_USED);
f01078f1:	8b 45 0c             	mov    0xc(%ebp),%eax
f01078f4:	c1 e8 16             	shr    $0x16,%eax
f01078f7:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f01078fe:	8b 45 08             	mov    0x8(%ebp),%eax
f0107901:	01 d0                	add    %edx,%eax
f0107903:	8b 55 0c             	mov    0xc(%ebp),%edx
f0107906:	c1 ea 16             	shr    $0x16,%edx
f0107909:	8d 0c 95 00 00 00 00 	lea    0x0(,%edx,4),%ecx
f0107910:	8b 55 08             	mov    0x8(%ebp),%edx
f0107913:	01 ca                	add    %ecx,%edx
f0107915:	8b 12                	mov    (%edx),%edx
f0107917:	83 e2 df             	and    $0xffffffdf,%edx
f010791a:	89 10                	mov    %edx,(%eax)
	tlb_invalidate((void *)NULL, (void *)virtual_address);
f010791c:	8b 45 0c             	mov    0xc(%ebp),%eax
f010791f:	83 ec 08             	sub    $0x8,%esp
f0107922:	50                   	push   %eax
f0107923:	6a 00                	push   $0x0
f0107925:	e8 9c ea ff ff       	call   f01063c6 <tlb_invalidate>
f010792a:	83 c4 10             	add    $0x10,%esp
}
f010792d:	90                   	nop
f010792e:	c9                   	leave  
f010792f:	c3                   	ret    

f0107930 <pd_clear_page_dir_entry>:

inline void pd_clear_page_dir_entry(uint32* page_directory, uint32 virtual_address)
{
f0107930:	55                   	push   %ebp
f0107931:	89 e5                	mov    %esp,%ebp
f0107933:	83 ec 10             	sub    $0x10,%esp
	page_directory[PDX(virtual_address)] = 0 ;
f0107936:	8b 45 0c             	mov    0xc(%ebp),%eax
f0107939:	c1 e8 16             	shr    $0x16,%eax
f010793c:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0107943:	8b 45 08             	mov    0x8(%ebp),%eax
f0107946:	01 d0                	add    %edx,%eax
f0107948:	c7 00 00 00 00 00    	movl   $0x0,(%eax)

static __inline void
tlbflush(void)
{
	uint32 cr3;
	__asm __volatile("movl %%cr3,%0" : "=r" (cr3));
f010794e:	0f 20 d8             	mov    %cr3,%eax
f0107951:	89 45 fc             	mov    %eax,-0x4(%ebp)
	__asm __volatile("movl %0,%%cr3" : : "r" (cr3));
f0107954:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0107957:	0f 22 d8             	mov    %eax,%cr3
	tlbflush();
}
f010795a:	90                   	nop
f010795b:	c9                   	leave  
f010795c:	c3                   	ret    

f010795d <env_page_ws_get_size>:

///============================================================================================
/// Dealing with environment working set

inline uint32 env_page_ws_get_size(struct Env *e)
{
f010795d:	55                   	push   %ebp
f010795e:	89 e5                	mov    %esp,%ebp
f0107960:	83 ec 10             	sub    $0x10,%esp
	int i=0, counter=0;
f0107963:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
f010796a:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
	for(;i<e->page_WS_max_size; i++) if(e->ptr_pageWorkingSet[i].empty == 0) counter++;
f0107971:	eb 20                	jmp    f0107993 <env_page_ws_get_size+0x36>
f0107973:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0107976:	8b 55 fc             	mov    -0x4(%ebp),%edx
f0107979:	89 d0                	mov    %edx,%eax
f010797b:	01 c0                	add    %eax,%eax
f010797d:	01 d0                	add    %edx,%eax
f010797f:	c1 e0 03             	shl    $0x3,%eax
f0107982:	01 c8                	add    %ecx,%eax
f0107984:	83 c0 7c             	add    $0x7c,%eax
f0107987:	8a 00                	mov    (%eax),%al
f0107989:	84 c0                	test   %al,%al
f010798b:	75 03                	jne    f0107990 <env_page_ws_get_size+0x33>
f010798d:	ff 45 f8             	incl   -0x8(%ebp)
f0107990:	ff 45 fc             	incl   -0x4(%ebp)
f0107993:	8b 45 08             	mov    0x8(%ebp),%eax
f0107996:	8b 50 74             	mov    0x74(%eax),%edx
f0107999:	8b 45 fc             	mov    -0x4(%ebp),%eax
f010799c:	39 c2                	cmp    %eax,%edx
f010799e:	77 d3                	ja     f0107973 <env_page_ws_get_size+0x16>
	return counter;
f01079a0:	8b 45 f8             	mov    -0x8(%ebp),%eax
}
f01079a3:	c9                   	leave  
f01079a4:	c3                   	ret    

f01079a5 <env_page_ws_invalidate>:

inline void env_page_ws_invalidate(struct Env* e, uint32 virtual_address)
{
f01079a5:	55                   	push   %ebp
f01079a6:	89 e5                	mov    %esp,%ebp
f01079a8:	83 ec 18             	sub    $0x18,%esp
	int i=0;
f01079ab:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	for(;i<e->page_WS_max_size; i++)
f01079b2:	eb 4c                	jmp    f0107a00 <env_page_ws_invalidate+0x5b>
	{
		if(ROUNDDOWN(e->ptr_pageWorkingSet[i].virtual_address,PAGE_SIZE) == ROUNDDOWN(virtual_address,PAGE_SIZE))
f01079b4:	8b 4d 08             	mov    0x8(%ebp),%ecx
f01079b7:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01079ba:	89 d0                	mov    %edx,%eax
f01079bc:	01 c0                	add    %eax,%eax
f01079be:	01 d0                	add    %edx,%eax
f01079c0:	c1 e0 03             	shl    $0x3,%eax
f01079c3:	01 c8                	add    %ecx,%eax
f01079c5:	83 c0 78             	add    $0x78,%eax
f01079c8:	8b 00                	mov    (%eax),%eax
f01079ca:	89 45 f0             	mov    %eax,-0x10(%ebp)
f01079cd:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01079d0:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f01079d5:	89 c2                	mov    %eax,%edx
f01079d7:	8b 45 0c             	mov    0xc(%ebp),%eax
f01079da:	89 45 ec             	mov    %eax,-0x14(%ebp)
f01079dd:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01079e0:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f01079e5:	39 c2                	cmp    %eax,%edx
f01079e7:	75 14                	jne    f01079fd <env_page_ws_invalidate+0x58>
		{
			env_page_ws_clear_entry(e, i);
f01079e9:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01079ec:	83 ec 08             	sub    $0x8,%esp
f01079ef:	50                   	push   %eax
f01079f0:	ff 75 08             	pushl  0x8(%ebp)
f01079f3:	e8 bc 00 00 00       	call   f0107ab4 <env_page_ws_clear_entry>
f01079f8:	83 c4 10             	add    $0x10,%esp
			break;
f01079fb:	eb 10                	jmp    f0107a0d <env_page_ws_invalidate+0x68>
}

inline void env_page_ws_invalidate(struct Env* e, uint32 virtual_address)
{
	int i=0;
	for(;i<e->page_WS_max_size; i++)
f01079fd:	ff 45 f4             	incl   -0xc(%ebp)
f0107a00:	8b 45 08             	mov    0x8(%ebp),%eax
f0107a03:	8b 50 74             	mov    0x74(%eax),%edx
f0107a06:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0107a09:	39 c2                	cmp    %eax,%edx
f0107a0b:	77 a7                	ja     f01079b4 <env_page_ws_invalidate+0xf>
		{
			env_page_ws_clear_entry(e, i);
			break;
		}
	}
}
f0107a0d:	90                   	nop
f0107a0e:	c9                   	leave  
f0107a0f:	c3                   	ret    

f0107a10 <env_page_ws_set_entry>:

inline void env_page_ws_set_entry(struct Env* e, uint32 entry_index, uint32 virtual_address)
{
f0107a10:	55                   	push   %ebp
f0107a11:	89 e5                	mov    %esp,%ebp
f0107a13:	53                   	push   %ebx
f0107a14:	83 ec 14             	sub    $0x14,%esp
	assert(entry_index >= 0 && entry_index < e->page_WS_max_size);
f0107a17:	8b 45 08             	mov    0x8(%ebp),%eax
f0107a1a:	8b 40 74             	mov    0x74(%eax),%eax
f0107a1d:	3b 45 0c             	cmp    0xc(%ebp),%eax
f0107a20:	77 16                	ja     f0107a38 <env_page_ws_set_entry+0x28>
f0107a22:	68 e8 57 13 f0       	push   $0xf01357e8
f0107a27:	68 1e 58 13 f0       	push   $0xf013581e
f0107a2c:	6a 26                	push   $0x26
f0107a2e:	68 34 58 13 f0       	push   $0xf0135834
f0107a33:	e8 6e 87 ff ff       	call   f01001a6 <_panic>
	assert(virtual_address >= 0 && virtual_address < USER_TOP);
f0107a38:	81 7d 10 ff ff bf ee 	cmpl   $0xeebfffff,0x10(%ebp)
f0107a3f:	76 16                	jbe    f0107a57 <env_page_ws_set_entry+0x47>
f0107a41:	68 54 58 13 f0       	push   $0xf0135854
f0107a46:	68 1e 58 13 f0       	push   $0xf013581e
f0107a4b:	6a 27                	push   $0x27
f0107a4d:	68 34 58 13 f0       	push   $0xf0135834
f0107a52:	e8 4f 87 ff ff       	call   f01001a6 <_panic>
	e->ptr_pageWorkingSet[entry_index].virtual_address = ROUNDDOWN(virtual_address,PAGE_SIZE);
f0107a57:	8b 45 10             	mov    0x10(%ebp),%eax
f0107a5a:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0107a5d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0107a60:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0107a65:	89 c1                	mov    %eax,%ecx
f0107a67:	8b 5d 08             	mov    0x8(%ebp),%ebx
f0107a6a:	8b 55 0c             	mov    0xc(%ebp),%edx
f0107a6d:	89 d0                	mov    %edx,%eax
f0107a6f:	01 c0                	add    %eax,%eax
f0107a71:	01 d0                	add    %edx,%eax
f0107a73:	c1 e0 03             	shl    $0x3,%eax
f0107a76:	01 d8                	add    %ebx,%eax
f0107a78:	83 c0 78             	add    $0x78,%eax
f0107a7b:	89 08                	mov    %ecx,(%eax)
	e->ptr_pageWorkingSet[entry_index].empty = 0;
f0107a7d:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0107a80:	8b 55 0c             	mov    0xc(%ebp),%edx
f0107a83:	89 d0                	mov    %edx,%eax
f0107a85:	01 c0                	add    %eax,%eax
f0107a87:	01 d0                	add    %edx,%eax
f0107a89:	c1 e0 03             	shl    $0x3,%eax
f0107a8c:	01 c8                	add    %ecx,%eax
f0107a8e:	83 c0 7c             	add    $0x7c,%eax
f0107a91:	c6 00 00             	movb   $0x0,(%eax)

	e->ptr_pageWorkingSet[entry_index].time_stamp = 0x80000000;
f0107a94:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0107a97:	8b 55 0c             	mov    0xc(%ebp),%edx
f0107a9a:	89 d0                	mov    %edx,%eax
f0107a9c:	01 c0                	add    %eax,%eax
f0107a9e:	01 d0                	add    %edx,%eax
f0107aa0:	c1 e0 03             	shl    $0x3,%eax
f0107aa3:	01 c8                	add    %ecx,%eax
f0107aa5:	83 e8 80             	sub    $0xffffff80,%eax
f0107aa8:	c7 00 00 00 00 80    	movl   $0x80000000,(%eax)
	//e->ptr_pageWorkingSet[entry_index].time_stamp = time;
	return;
f0107aae:	90                   	nop
}
f0107aaf:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f0107ab2:	c9                   	leave  
f0107ab3:	c3                   	ret    

f0107ab4 <env_page_ws_clear_entry>:

inline void env_page_ws_clear_entry(struct Env* e, uint32 entry_index)
{
f0107ab4:	55                   	push   %ebp
f0107ab5:	89 e5                	mov    %esp,%ebp
f0107ab7:	83 ec 08             	sub    $0x8,%esp
	assert(entry_index >= 0 && entry_index < (e->page_WS_max_size));
f0107aba:	8b 45 08             	mov    0x8(%ebp),%eax
f0107abd:	8b 40 74             	mov    0x74(%eax),%eax
f0107ac0:	3b 45 0c             	cmp    0xc(%ebp),%eax
f0107ac3:	77 16                	ja     f0107adb <env_page_ws_clear_entry+0x27>
f0107ac5:	68 88 58 13 f0       	push   $0xf0135888
f0107aca:	68 1e 58 13 f0       	push   $0xf013581e
f0107acf:	6a 32                	push   $0x32
f0107ad1:	68 34 58 13 f0       	push   $0xf0135834
f0107ad6:	e8 cb 86 ff ff       	call   f01001a6 <_panic>
	e->ptr_pageWorkingSet[entry_index].virtual_address = 0;
f0107adb:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0107ade:	8b 55 0c             	mov    0xc(%ebp),%edx
f0107ae1:	89 d0                	mov    %edx,%eax
f0107ae3:	01 c0                	add    %eax,%eax
f0107ae5:	01 d0                	add    %edx,%eax
f0107ae7:	c1 e0 03             	shl    $0x3,%eax
f0107aea:	01 c8                	add    %ecx,%eax
f0107aec:	83 c0 78             	add    $0x78,%eax
f0107aef:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	e->ptr_pageWorkingSet[entry_index].empty = 1;
f0107af5:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0107af8:	8b 55 0c             	mov    0xc(%ebp),%edx
f0107afb:	89 d0                	mov    %edx,%eax
f0107afd:	01 c0                	add    %eax,%eax
f0107aff:	01 d0                	add    %edx,%eax
f0107b01:	c1 e0 03             	shl    $0x3,%eax
f0107b04:	01 c8                	add    %ecx,%eax
f0107b06:	83 c0 7c             	add    $0x7c,%eax
f0107b09:	c6 00 01             	movb   $0x1,(%eax)
	e->ptr_pageWorkingSet[entry_index].time_stamp = 0;
f0107b0c:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0107b0f:	8b 55 0c             	mov    0xc(%ebp),%edx
f0107b12:	89 d0                	mov    %edx,%eax
f0107b14:	01 c0                	add    %eax,%eax
f0107b16:	01 d0                	add    %edx,%eax
f0107b18:	c1 e0 03             	shl    $0x3,%eax
f0107b1b:	01 c8                	add    %ecx,%eax
f0107b1d:	83 e8 80             	sub    $0xffffff80,%eax
f0107b20:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
}
f0107b26:	90                   	nop
f0107b27:	c9                   	leave  
f0107b28:	c3                   	ret    

f0107b29 <env_page_ws_get_virtual_address>:

inline uint32 env_page_ws_get_virtual_address(struct Env* e, uint32 entry_index)
{
f0107b29:	55                   	push   %ebp
f0107b2a:	89 e5                	mov    %esp,%ebp
f0107b2c:	83 ec 18             	sub    $0x18,%esp
	assert(entry_index >= 0 && entry_index < (e->page_WS_max_size));
f0107b2f:	8b 45 08             	mov    0x8(%ebp),%eax
f0107b32:	8b 40 74             	mov    0x74(%eax),%eax
f0107b35:	3b 45 0c             	cmp    0xc(%ebp),%eax
f0107b38:	77 16                	ja     f0107b50 <env_page_ws_get_virtual_address+0x27>
f0107b3a:	68 88 58 13 f0       	push   $0xf0135888
f0107b3f:	68 1e 58 13 f0       	push   $0xf013581e
f0107b44:	6a 3a                	push   $0x3a
f0107b46:	68 34 58 13 f0       	push   $0xf0135834
f0107b4b:	e8 56 86 ff ff       	call   f01001a6 <_panic>
	return ROUNDDOWN(e->ptr_pageWorkingSet[entry_index].virtual_address,PAGE_SIZE);
f0107b50:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0107b53:	8b 55 0c             	mov    0xc(%ebp),%edx
f0107b56:	89 d0                	mov    %edx,%eax
f0107b58:	01 c0                	add    %eax,%eax
f0107b5a:	01 d0                	add    %edx,%eax
f0107b5c:	c1 e0 03             	shl    $0x3,%eax
f0107b5f:	01 c8                	add    %ecx,%eax
f0107b61:	83 c0 78             	add    $0x78,%eax
f0107b64:	8b 00                	mov    (%eax),%eax
f0107b66:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0107b69:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0107b6c:	25 00 f0 ff ff       	and    $0xfffff000,%eax
}
f0107b71:	c9                   	leave  
f0107b72:	c3                   	ret    

f0107b73 <env_page_ws_get_time_stamp>:

inline uint32 env_page_ws_get_time_stamp(struct Env* e, uint32 entry_index)
{
f0107b73:	55                   	push   %ebp
f0107b74:	89 e5                	mov    %esp,%ebp
f0107b76:	83 ec 08             	sub    $0x8,%esp
	assert(entry_index >= 0 && entry_index < (e->page_WS_max_size));
f0107b79:	8b 45 08             	mov    0x8(%ebp),%eax
f0107b7c:	8b 40 74             	mov    0x74(%eax),%eax
f0107b7f:	3b 45 0c             	cmp    0xc(%ebp),%eax
f0107b82:	77 16                	ja     f0107b9a <env_page_ws_get_time_stamp+0x27>
f0107b84:	68 88 58 13 f0       	push   $0xf0135888
f0107b89:	68 1e 58 13 f0       	push   $0xf013581e
f0107b8e:	6a 40                	push   $0x40
f0107b90:	68 34 58 13 f0       	push   $0xf0135834
f0107b95:	e8 0c 86 ff ff       	call   f01001a6 <_panic>
	return e->ptr_pageWorkingSet[entry_index].time_stamp;
f0107b9a:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0107b9d:	8b 55 0c             	mov    0xc(%ebp),%edx
f0107ba0:	89 d0                	mov    %edx,%eax
f0107ba2:	01 c0                	add    %eax,%eax
f0107ba4:	01 d0                	add    %edx,%eax
f0107ba6:	c1 e0 03             	shl    $0x3,%eax
f0107ba9:	01 c8                	add    %ecx,%eax
f0107bab:	83 e8 80             	sub    $0xffffff80,%eax
f0107bae:	8b 00                	mov    (%eax),%eax
}
f0107bb0:	c9                   	leave  
f0107bb1:	c3                   	ret    

f0107bb2 <env_page_ws_is_entry_empty>:

inline uint32 env_page_ws_is_entry_empty(struct Env* e, uint32 entry_index)
{
f0107bb2:	55                   	push   %ebp
f0107bb3:	89 e5                	mov    %esp,%ebp
	return e->ptr_pageWorkingSet[entry_index].empty;
f0107bb5:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0107bb8:	8b 55 0c             	mov    0xc(%ebp),%edx
f0107bbb:	89 d0                	mov    %edx,%eax
f0107bbd:	01 c0                	add    %eax,%eax
f0107bbf:	01 d0                	add    %edx,%eax
f0107bc1:	c1 e0 03             	shl    $0x3,%eax
f0107bc4:	01 c8                	add    %ecx,%eax
f0107bc6:	83 c0 7c             	add    $0x7c,%eax
f0107bc9:	8a 00                	mov    (%eax),%al
f0107bcb:	0f b6 c0             	movzbl %al,%eax
}
f0107bce:	5d                   	pop    %ebp
f0107bcf:	c3                   	ret    

f0107bd0 <env_page_ws_print>:

void env_page_ws_print(struct Env *e)
{
f0107bd0:	55                   	push   %ebp
f0107bd1:	89 e5                	mov    %esp,%ebp
f0107bd3:	53                   	push   %ebx
f0107bd4:	83 ec 24             	sub    $0x24,%esp
	if (isPageReplacmentAlgorithmLRU(PG_REP_LRU_LISTS_APPROX))
f0107bd7:	83 ec 0c             	sub    $0xc,%esp
f0107bda:	6a 02                	push   $0x2
f0107bdc:	e8 8c 59 00 00       	call   f010d56d <isPageReplacmentAlgorithmLRU>
f0107be1:	83 c4 10             	add    $0x10,%esp
f0107be4:	85 c0                	test   %eax,%eax
f0107be6:	0f 84 fe 00 00 00    	je     f0107cea <env_page_ws_print+0x11a>
	{
		int i = 0;
f0107bec:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
		cprintf("ActiveList:\n============\n") ;
f0107bf3:	83 ec 0c             	sub    $0xc,%esp
f0107bf6:	68 c0 58 13 f0       	push   $0xf01358c0
f0107bfb:	e8 2d 90 ff ff       	call   f0100c2d <cprintf>
f0107c00:	83 c4 10             	add    $0x10,%esp
		struct WorkingSetElement * ptr_WS_element ;
		LIST_FOREACH(ptr_WS_element, &(e->ActiveList))
f0107c03:	8b 45 08             	mov    0x8(%ebp),%eax
f0107c06:	8b 80 80 ea 01 00    	mov    0x1ea80(%eax),%eax
f0107c0c:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0107c0f:	eb 2c                	jmp    f0107c3d <env_page_ws_print+0x6d>
		{
			cprintf("%d:	%x\n", i++, ptr_WS_element->virtual_address);
f0107c11:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0107c14:	8b 10                	mov    (%eax),%edx
f0107c16:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0107c19:	8d 48 01             	lea    0x1(%eax),%ecx
f0107c1c:	89 4d f4             	mov    %ecx,-0xc(%ebp)
f0107c1f:	83 ec 04             	sub    $0x4,%esp
f0107c22:	52                   	push   %edx
f0107c23:	50                   	push   %eax
f0107c24:	68 da 58 13 f0       	push   $0xf01358da
f0107c29:	e8 ff 8f ff ff       	call   f0100c2d <cprintf>
f0107c2e:	83 c4 10             	add    $0x10,%esp
	if (isPageReplacmentAlgorithmLRU(PG_REP_LRU_LISTS_APPROX))
	{
		int i = 0;
		cprintf("ActiveList:\n============\n") ;
		struct WorkingSetElement * ptr_WS_element ;
		LIST_FOREACH(ptr_WS_element, &(e->ActiveList))
f0107c31:	8b 45 08             	mov    0x8(%ebp),%eax
f0107c34:	8b 80 88 ea 01 00    	mov    0x1ea88(%eax),%eax
f0107c3a:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0107c3d:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0107c41:	74 08                	je     f0107c4b <env_page_ws_print+0x7b>
f0107c43:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0107c46:	8b 40 10             	mov    0x10(%eax),%eax
f0107c49:	eb 05                	jmp    f0107c50 <env_page_ws_print+0x80>
f0107c4b:	b8 00 00 00 00       	mov    $0x0,%eax
f0107c50:	8b 55 08             	mov    0x8(%ebp),%edx
f0107c53:	89 82 88 ea 01 00    	mov    %eax,0x1ea88(%edx)
f0107c59:	8b 45 08             	mov    0x8(%ebp),%eax
f0107c5c:	8b 80 88 ea 01 00    	mov    0x1ea88(%eax),%eax
f0107c62:	85 c0                	test   %eax,%eax
f0107c64:	75 ab                	jne    f0107c11 <env_page_ws_print+0x41>
f0107c66:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0107c6a:	75 a5                	jne    f0107c11 <env_page_ws_print+0x41>
		{
			cprintf("%d:	%x\n", i++, ptr_WS_element->virtual_address);
		}
		cprintf("\nSecondList:\n============\n") ;
f0107c6c:	83 ec 0c             	sub    $0xc,%esp
f0107c6f:	68 e2 58 13 f0       	push   $0xf01358e2
f0107c74:	e8 b4 8f ff ff       	call   f0100c2d <cprintf>
f0107c79:	83 c4 10             	add    $0x10,%esp
		LIST_FOREACH(ptr_WS_element, &(e->SecondList))
f0107c7c:	8b 45 08             	mov    0x8(%ebp),%eax
f0107c7f:	8b 80 90 ea 01 00    	mov    0x1ea90(%eax),%eax
f0107c85:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0107c88:	eb 2c                	jmp    f0107cb6 <env_page_ws_print+0xe6>
		{
			cprintf("%d:	%x\n", i++, ptr_WS_element->virtual_address);
f0107c8a:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0107c8d:	8b 10                	mov    (%eax),%edx
f0107c8f:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0107c92:	8d 48 01             	lea    0x1(%eax),%ecx
f0107c95:	89 4d f4             	mov    %ecx,-0xc(%ebp)
f0107c98:	83 ec 04             	sub    $0x4,%esp
f0107c9b:	52                   	push   %edx
f0107c9c:	50                   	push   %eax
f0107c9d:	68 da 58 13 f0       	push   $0xf01358da
f0107ca2:	e8 86 8f ff ff       	call   f0100c2d <cprintf>
f0107ca7:	83 c4 10             	add    $0x10,%esp
		LIST_FOREACH(ptr_WS_element, &(e->ActiveList))
		{
			cprintf("%d:	%x\n", i++, ptr_WS_element->virtual_address);
		}
		cprintf("\nSecondList:\n============\n") ;
		LIST_FOREACH(ptr_WS_element, &(e->SecondList))
f0107caa:	8b 45 08             	mov    0x8(%ebp),%eax
f0107cad:	8b 80 98 ea 01 00    	mov    0x1ea98(%eax),%eax
f0107cb3:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0107cb6:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0107cba:	74 08                	je     f0107cc4 <env_page_ws_print+0xf4>
f0107cbc:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0107cbf:	8b 40 10             	mov    0x10(%eax),%eax
f0107cc2:	eb 05                	jmp    f0107cc9 <env_page_ws_print+0xf9>
f0107cc4:	b8 00 00 00 00       	mov    $0x0,%eax
f0107cc9:	8b 55 08             	mov    0x8(%ebp),%edx
f0107ccc:	89 82 98 ea 01 00    	mov    %eax,0x1ea98(%edx)
f0107cd2:	8b 45 08             	mov    0x8(%ebp),%eax
f0107cd5:	8b 80 98 ea 01 00    	mov    0x1ea98(%eax),%eax
f0107cdb:	85 c0                	test   %eax,%eax
f0107cdd:	75 ab                	jne    f0107c8a <env_page_ws_print+0xba>
f0107cdf:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0107ce3:	75 a5                	jne    f0107c8a <env_page_ws_print+0xba>
				cprintf(" <--");
			}
			cprintf("\n");
		}
	}
}
f0107ce5:	e9 94 01 00 00       	jmp    f0107e7e <env_page_ws_print+0x2ae>
		}
	}
	else
	{
		uint32 i;
		cprintf("PAGE WS:\n");
f0107cea:	83 ec 0c             	sub    $0xc,%esp
f0107ced:	68 fd 58 13 f0       	push   $0xf01358fd
f0107cf2:	e8 36 8f ff ff       	call   f0100c2d <cprintf>
f0107cf7:	83 c4 10             	add    $0x10,%esp
		for(i=0; i< (e->page_WS_max_size); i++ )
f0107cfa:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f0107d01:	e9 69 01 00 00       	jmp    f0107e6f <env_page_ws_print+0x29f>
		{
			if (e->ptr_pageWorkingSet[i].empty)
f0107d06:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0107d09:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0107d0c:	89 d0                	mov    %edx,%eax
f0107d0e:	01 c0                	add    %eax,%eax
f0107d10:	01 d0                	add    %edx,%eax
f0107d12:	c1 e0 03             	shl    $0x3,%eax
f0107d15:	01 c8                	add    %ecx,%eax
f0107d17:	83 c0 7c             	add    $0x7c,%eax
f0107d1a:	8a 00                	mov    (%eax),%al
f0107d1c:	84 c0                	test   %al,%al
f0107d1e:	74 43                	je     f0107d63 <env_page_ws_print+0x193>
			{
				cprintf("EMPTY LOCATION");
f0107d20:	83 ec 0c             	sub    $0xc,%esp
f0107d23:	68 07 59 13 f0       	push   $0xf0135907
f0107d28:	e8 00 8f ff ff       	call   f0100c2d <cprintf>
f0107d2d:	83 c4 10             	add    $0x10,%esp
				if(i==e->page_last_WS_index )
f0107d30:	8b 45 08             	mov    0x8(%ebp),%eax
f0107d33:	8b 80 e8 d9 01 00    	mov    0x1d9e8(%eax),%eax
f0107d39:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f0107d3c:	75 10                	jne    f0107d4e <env_page_ws_print+0x17e>
				{
					cprintf("		<--");
f0107d3e:	83 ec 0c             	sub    $0xc,%esp
f0107d41:	68 16 59 13 f0       	push   $0xf0135916
f0107d46:	e8 e2 8e ff ff       	call   f0100c2d <cprintf>
f0107d4b:	83 c4 10             	add    $0x10,%esp
				}
				cprintf("\n");
f0107d4e:	83 ec 0c             	sub    $0xc,%esp
f0107d51:	68 1c 59 13 f0       	push   $0xf013591c
f0107d56:	e8 d2 8e ff ff       	call   f0100c2d <cprintf>
f0107d5b:	83 c4 10             	add    $0x10,%esp
				continue;
f0107d5e:	e9 09 01 00 00       	jmp    f0107e6c <env_page_ws_print+0x29c>
			}
			uint32 virtual_address = e->ptr_pageWorkingSet[i].virtual_address;
f0107d63:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0107d66:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0107d69:	89 d0                	mov    %edx,%eax
f0107d6b:	01 c0                	add    %eax,%eax
f0107d6d:	01 d0                	add    %edx,%eax
f0107d6f:	c1 e0 03             	shl    $0x3,%eax
f0107d72:	01 c8                	add    %ecx,%eax
f0107d74:	83 c0 78             	add    $0x78,%eax
f0107d77:	8b 00                	mov    (%eax),%eax
f0107d79:	89 45 e8             	mov    %eax,-0x18(%ebp)
			uint32 time_stamp = e->ptr_pageWorkingSet[i].time_stamp;
f0107d7c:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0107d7f:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0107d82:	89 d0                	mov    %edx,%eax
f0107d84:	01 c0                	add    %eax,%eax
f0107d86:	01 d0                	add    %edx,%eax
f0107d88:	c1 e0 03             	shl    $0x3,%eax
f0107d8b:	01 c8                	add    %ecx,%eax
f0107d8d:	83 e8 80             	sub    $0xffffff80,%eax
f0107d90:	8b 00                	mov    (%eax),%eax
f0107d92:	89 45 e4             	mov    %eax,-0x1c(%ebp)

			uint32 perm = pt_get_page_permissions(e->env_page_directory, virtual_address) ;
f0107d95:	8b 45 08             	mov    0x8(%ebp),%eax
f0107d98:	8b 40 5c             	mov    0x5c(%eax),%eax
f0107d9b:	83 ec 08             	sub    $0x8,%esp
f0107d9e:	ff 75 e8             	pushl  -0x18(%ebp)
f0107da1:	50                   	push   %eax
f0107da2:	e8 01 fa ff ff       	call   f01077a8 <pt_get_page_permissions>
f0107da7:	83 c4 10             	add    $0x10,%esp
f0107daa:	89 45 e0             	mov    %eax,-0x20(%ebp)
			char isModified = ((perm&PERM_MODIFIED) ? 1 : 0);
f0107dad:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0107db0:	83 e0 40             	and    $0x40,%eax
f0107db3:	85 c0                	test   %eax,%eax
f0107db5:	0f 95 c0             	setne  %al
f0107db8:	88 45 df             	mov    %al,-0x21(%ebp)
			char isUsed= ((perm&PERM_USED) ? 1 : 0);
f0107dbb:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0107dbe:	83 e0 20             	and    $0x20,%eax
f0107dc1:	85 c0                	test   %eax,%eax
f0107dc3:	0f 95 c0             	setne  %al
f0107dc6:	88 45 de             	mov    %al,-0x22(%ebp)
			char isBuffered= ((perm&PERM_BUFFERED) ? 1 : 0);
f0107dc9:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0107dcc:	25 00 02 00 00       	and    $0x200,%eax
f0107dd1:	85 c0                	test   %eax,%eax
f0107dd3:	0f 95 c0             	setne  %al
f0107dd6:	88 45 dd             	mov    %al,-0x23(%ebp)


			cprintf("address @ %d = %x",i, e->ptr_pageWorkingSet[i].virtual_address);
f0107dd9:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0107ddc:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0107ddf:	89 d0                	mov    %edx,%eax
f0107de1:	01 c0                	add    %eax,%eax
f0107de3:	01 d0                	add    %edx,%eax
f0107de5:	c1 e0 03             	shl    $0x3,%eax
f0107de8:	01 c8                	add    %ecx,%eax
f0107dea:	83 c0 78             	add    $0x78,%eax
f0107ded:	8b 00                	mov    (%eax),%eax
f0107def:	83 ec 04             	sub    $0x4,%esp
f0107df2:	50                   	push   %eax
f0107df3:	ff 75 ec             	pushl  -0x14(%ebp)
f0107df6:	68 1e 59 13 f0       	push   $0xf013591e
f0107dfb:	e8 2d 8e ff ff       	call   f0100c2d <cprintf>
f0107e00:	83 c4 10             	add    $0x10,%esp

			//2021
			cprintf(", used= %d, modified= %d, buffered= %d, time stamp= %x, sweeps_cnt= %d", isUsed, isModified, isBuffered, time_stamp, e->ptr_pageWorkingSet[i].sweeps_counter) ;
f0107e03:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0107e06:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0107e09:	89 d0                	mov    %edx,%eax
f0107e0b:	01 c0                	add    %eax,%eax
f0107e0d:	01 d0                	add    %edx,%eax
f0107e0f:	c1 e0 03             	shl    $0x3,%eax
f0107e12:	01 c8                	add    %ecx,%eax
f0107e14:	05 84 00 00 00       	add    $0x84,%eax
f0107e19:	8b 18                	mov    (%eax),%ebx
f0107e1b:	0f be 4d dd          	movsbl -0x23(%ebp),%ecx
f0107e1f:	0f be 55 df          	movsbl -0x21(%ebp),%edx
f0107e23:	0f be 45 de          	movsbl -0x22(%ebp),%eax
f0107e27:	83 ec 08             	sub    $0x8,%esp
f0107e2a:	53                   	push   %ebx
f0107e2b:	ff 75 e4             	pushl  -0x1c(%ebp)
f0107e2e:	51                   	push   %ecx
f0107e2f:	52                   	push   %edx
f0107e30:	50                   	push   %eax
f0107e31:	68 30 59 13 f0       	push   $0xf0135930
f0107e36:	e8 f2 8d ff ff       	call   f0100c2d <cprintf>
f0107e3b:	83 c4 20             	add    $0x20,%esp

			if(i==e->page_last_WS_index )
f0107e3e:	8b 45 08             	mov    0x8(%ebp),%eax
f0107e41:	8b 80 e8 d9 01 00    	mov    0x1d9e8(%eax),%eax
f0107e47:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f0107e4a:	75 10                	jne    f0107e5c <env_page_ws_print+0x28c>
			{
				cprintf(" <--");
f0107e4c:	83 ec 0c             	sub    $0xc,%esp
f0107e4f:	68 77 59 13 f0       	push   $0xf0135977
f0107e54:	e8 d4 8d ff ff       	call   f0100c2d <cprintf>
f0107e59:	83 c4 10             	add    $0x10,%esp
			}
			cprintf("\n");
f0107e5c:	83 ec 0c             	sub    $0xc,%esp
f0107e5f:	68 1c 59 13 f0       	push   $0xf013591c
f0107e64:	e8 c4 8d ff ff       	call   f0100c2d <cprintf>
f0107e69:	83 c4 10             	add    $0x10,%esp
	}
	else
	{
		uint32 i;
		cprintf("PAGE WS:\n");
		for(i=0; i< (e->page_WS_max_size); i++ )
f0107e6c:	ff 45 ec             	incl   -0x14(%ebp)
f0107e6f:	8b 45 08             	mov    0x8(%ebp),%eax
f0107e72:	8b 40 74             	mov    0x74(%eax),%eax
f0107e75:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f0107e78:	0f 87 88 fe ff ff    	ja     f0107d06 <env_page_ws_print+0x136>
				cprintf(" <--");
			}
			cprintf("\n");
		}
	}
}
f0107e7e:	90                   	nop
f0107e7f:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f0107e82:	c9                   	leave  
f0107e83:	c3                   	ret    

f0107e84 <env_table_ws_print>:

// Table Working Set =========================================================

void env_table_ws_print(struct Env *e)
{
f0107e84:	55                   	push   %ebp
f0107e85:	89 e5                	mov    %esp,%ebp
f0107e87:	53                   	push   %ebx
f0107e88:	83 ec 14             	sub    $0x14,%esp
	uint32 i;
	cprintf("---------------------------------------------------\n");
f0107e8b:	83 ec 0c             	sub    $0xc,%esp
f0107e8e:	68 7c 59 13 f0       	push   $0xf013597c
f0107e93:	e8 95 8d ff ff       	call   f0100c2d <cprintf>
f0107e98:	83 c4 10             	add    $0x10,%esp
	cprintf("TABLE WS:\n");
f0107e9b:	83 ec 0c             	sub    $0xc,%esp
f0107e9e:	68 b1 59 13 f0       	push   $0xf01359b1
f0107ea3:	e8 85 8d ff ff       	call   f0100c2d <cprintf>
f0107ea8:	83 c4 10             	add    $0x10,%esp
	for(i=0; i< __TWS_MAX_SIZE; i++ )
f0107eab:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0107eb2:	e9 16 01 00 00       	jmp    f0107fcd <env_table_ws_print+0x149>
	{
		if (e->__ptr_tws[i].empty)
f0107eb7:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0107eba:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0107ebd:	89 d0                	mov    %edx,%eax
f0107ebf:	01 c0                	add    %eax,%eax
f0107ec1:	01 d0                	add    %edx,%eax
f0107ec3:	c1 e0 03             	shl    $0x3,%eax
f0107ec6:	01 c8                	add    %ecx,%eax
f0107ec8:	05 3c d5 01 00       	add    $0x1d53c,%eax
f0107ecd:	8a 00                	mov    (%eax),%al
f0107ecf:	84 c0                	test   %al,%al
f0107ed1:	74 43                	je     f0107f16 <env_table_ws_print+0x92>
		{
			cprintf("EMPTY LOCATION");
f0107ed3:	83 ec 0c             	sub    $0xc,%esp
f0107ed6:	68 07 59 13 f0       	push   $0xf0135907
f0107edb:	e8 4d 8d ff ff       	call   f0100c2d <cprintf>
f0107ee0:	83 c4 10             	add    $0x10,%esp
			if(i==e->table_last_WS_index )
f0107ee3:	8b 45 08             	mov    0x8(%ebp),%eax
f0107ee6:	8b 80 ec d9 01 00    	mov    0x1d9ec(%eax),%eax
f0107eec:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0107eef:	75 10                	jne    f0107f01 <env_table_ws_print+0x7d>
			{
				cprintf("		<--");
f0107ef1:	83 ec 0c             	sub    $0xc,%esp
f0107ef4:	68 16 59 13 f0       	push   $0xf0135916
f0107ef9:	e8 2f 8d ff ff       	call   f0100c2d <cprintf>
f0107efe:	83 c4 10             	add    $0x10,%esp
			}
			cprintf("\n");
f0107f01:	83 ec 0c             	sub    $0xc,%esp
f0107f04:	68 1c 59 13 f0       	push   $0xf013591c
f0107f09:	e8 1f 8d ff ff       	call   f0100c2d <cprintf>
f0107f0e:	83 c4 10             	add    $0x10,%esp
			continue;
f0107f11:	e9 b4 00 00 00       	jmp    f0107fca <env_table_ws_print+0x146>
		}
		uint32 virtual_address = e->__ptr_tws[i].virtual_address;
f0107f16:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0107f19:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0107f1c:	89 d0                	mov    %edx,%eax
f0107f1e:	01 c0                	add    %eax,%eax
f0107f20:	01 d0                	add    %edx,%eax
f0107f22:	c1 e0 03             	shl    $0x3,%eax
f0107f25:	01 c8                	add    %ecx,%eax
f0107f27:	05 38 d5 01 00       	add    $0x1d538,%eax
f0107f2c:	8b 00                	mov    (%eax),%eax
f0107f2e:	89 45 f0             	mov    %eax,-0x10(%ebp)
		cprintf("env address at %d = %x",i, e->__ptr_tws[i].virtual_address);
f0107f31:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0107f34:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0107f37:	89 d0                	mov    %edx,%eax
f0107f39:	01 c0                	add    %eax,%eax
f0107f3b:	01 d0                	add    %edx,%eax
f0107f3d:	c1 e0 03             	shl    $0x3,%eax
f0107f40:	01 c8                	add    %ecx,%eax
f0107f42:	05 38 d5 01 00       	add    $0x1d538,%eax
f0107f47:	8b 00                	mov    (%eax),%eax
f0107f49:	83 ec 04             	sub    $0x4,%esp
f0107f4c:	50                   	push   %eax
f0107f4d:	ff 75 f4             	pushl  -0xc(%ebp)
f0107f50:	68 bc 59 13 f0       	push   $0xf01359bc
f0107f55:	e8 d3 8c ff ff       	call   f0100c2d <cprintf>
f0107f5a:	83 c4 10             	add    $0x10,%esp

		cprintf(", used bit = %d, time stamp = %d", pd_is_table_used(e->env_page_directory, virtual_address), e->__ptr_tws[i].time_stamp);
f0107f5d:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0107f60:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0107f63:	89 d0                	mov    %edx,%eax
f0107f65:	01 c0                	add    %eax,%eax
f0107f67:	01 d0                	add    %edx,%eax
f0107f69:	c1 e0 03             	shl    $0x3,%eax
f0107f6c:	01 c8                	add    %ecx,%eax
f0107f6e:	05 40 d5 01 00       	add    $0x1d540,%eax
f0107f73:	8b 18                	mov    (%eax),%ebx
f0107f75:	8b 45 08             	mov    0x8(%ebp),%eax
f0107f78:	8b 40 5c             	mov    0x5c(%eax),%eax
f0107f7b:	83 ec 08             	sub    $0x8,%esp
f0107f7e:	ff 75 f0             	pushl  -0x10(%ebp)
f0107f81:	50                   	push   %eax
f0107f82:	e8 40 f9 ff ff       	call   f01078c7 <pd_is_table_used>
f0107f87:	83 c4 10             	add    $0x10,%esp
f0107f8a:	83 ec 04             	sub    $0x4,%esp
f0107f8d:	53                   	push   %ebx
f0107f8e:	50                   	push   %eax
f0107f8f:	68 d4 59 13 f0       	push   $0xf01359d4
f0107f94:	e8 94 8c ff ff       	call   f0100c2d <cprintf>
f0107f99:	83 c4 10             	add    $0x10,%esp
		if(i==e->table_last_WS_index )
f0107f9c:	8b 45 08             	mov    0x8(%ebp),%eax
f0107f9f:	8b 80 ec d9 01 00    	mov    0x1d9ec(%eax),%eax
f0107fa5:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0107fa8:	75 10                	jne    f0107fba <env_table_ws_print+0x136>
		{
			cprintf(" <--");
f0107faa:	83 ec 0c             	sub    $0xc,%esp
f0107fad:	68 77 59 13 f0       	push   $0xf0135977
f0107fb2:	e8 76 8c ff ff       	call   f0100c2d <cprintf>
f0107fb7:	83 c4 10             	add    $0x10,%esp
		}
		cprintf("\n");
f0107fba:	83 ec 0c             	sub    $0xc,%esp
f0107fbd:	68 1c 59 13 f0       	push   $0xf013591c
f0107fc2:	e8 66 8c ff ff       	call   f0100c2d <cprintf>
f0107fc7:	83 c4 10             	add    $0x10,%esp
void env_table_ws_print(struct Env *e)
{
	uint32 i;
	cprintf("---------------------------------------------------\n");
	cprintf("TABLE WS:\n");
	for(i=0; i< __TWS_MAX_SIZE; i++ )
f0107fca:	ff 45 f4             	incl   -0xc(%ebp)
f0107fcd:	83 7d f4 31          	cmpl   $0x31,-0xc(%ebp)
f0107fd1:	0f 86 e0 fe ff ff    	jbe    f0107eb7 <env_table_ws_print+0x33>
		{
			cprintf(" <--");
		}
		cprintf("\n");
	}
}
f0107fd7:	90                   	nop
f0107fd8:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f0107fdb:	c9                   	leave  
f0107fdc:	c3                   	ret    

f0107fdd <env_table_ws_get_size>:

inline uint32 env_table_ws_get_size(struct Env *e)
{
f0107fdd:	55                   	push   %ebp
f0107fde:	89 e5                	mov    %esp,%ebp
f0107fe0:	83 ec 10             	sub    $0x10,%esp
	int i=0, counter=0;
f0107fe3:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
f0107fea:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
	for(;i<__TWS_MAX_SIZE; i++) if(e->__ptr_tws[i].empty == 0) counter++;
f0107ff1:	eb 22                	jmp    f0108015 <env_table_ws_get_size+0x38>
f0107ff3:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0107ff6:	8b 55 fc             	mov    -0x4(%ebp),%edx
f0107ff9:	89 d0                	mov    %edx,%eax
f0107ffb:	01 c0                	add    %eax,%eax
f0107ffd:	01 d0                	add    %edx,%eax
f0107fff:	c1 e0 03             	shl    $0x3,%eax
f0108002:	01 c8                	add    %ecx,%eax
f0108004:	05 3c d5 01 00       	add    $0x1d53c,%eax
f0108009:	8a 00                	mov    (%eax),%al
f010800b:	84 c0                	test   %al,%al
f010800d:	75 03                	jne    f0108012 <env_table_ws_get_size+0x35>
f010800f:	ff 45 f8             	incl   -0x8(%ebp)
f0108012:	ff 45 fc             	incl   -0x4(%ebp)
f0108015:	83 7d fc 31          	cmpl   $0x31,-0x4(%ebp)
f0108019:	7e d8                	jle    f0107ff3 <env_table_ws_get_size+0x16>
	return counter;
f010801b:	8b 45 f8             	mov    -0x8(%ebp),%eax
}
f010801e:	c9                   	leave  
f010801f:	c3                   	ret    

f0108020 <env_table_ws_invalidate>:

inline void env_table_ws_invalidate(struct Env* e, uint32 virtual_address)
{
f0108020:	55                   	push   %ebp
f0108021:	89 e5                	mov    %esp,%ebp
f0108023:	83 ec 18             	sub    $0x18,%esp
	int i=0;
f0108026:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	for(;i<__TWS_MAX_SIZE; i++)
f010802d:	eb 4e                	jmp    f010807d <env_table_ws_invalidate+0x5d>
	{
		if(ROUNDDOWN(e->__ptr_tws[i].virtual_address,PAGE_SIZE*1024) == ROUNDDOWN(virtual_address,PAGE_SIZE*1024))
f010802f:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0108032:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0108035:	89 d0                	mov    %edx,%eax
f0108037:	01 c0                	add    %eax,%eax
f0108039:	01 d0                	add    %edx,%eax
f010803b:	c1 e0 03             	shl    $0x3,%eax
f010803e:	01 c8                	add    %ecx,%eax
f0108040:	05 38 d5 01 00       	add    $0x1d538,%eax
f0108045:	8b 00                	mov    (%eax),%eax
f0108047:	89 45 f0             	mov    %eax,-0x10(%ebp)
f010804a:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010804d:	25 00 00 c0 ff       	and    $0xffc00000,%eax
f0108052:	89 c2                	mov    %eax,%edx
f0108054:	8b 45 0c             	mov    0xc(%ebp),%eax
f0108057:	89 45 ec             	mov    %eax,-0x14(%ebp)
f010805a:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010805d:	25 00 00 c0 ff       	and    $0xffc00000,%eax
f0108062:	39 c2                	cmp    %eax,%edx
f0108064:	75 14                	jne    f010807a <env_table_ws_invalidate+0x5a>
		{
			env_table_ws_clear_entry(e, i);
f0108066:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0108069:	83 ec 08             	sub    $0x8,%esp
f010806c:	50                   	push   %eax
f010806d:	ff 75 08             	pushl  0x8(%ebp)
f0108070:	e8 bc 00 00 00       	call   f0108131 <env_table_ws_clear_entry>
f0108075:	83 c4 10             	add    $0x10,%esp
			break;
f0108078:	eb 09                	jmp    f0108083 <env_table_ws_invalidate+0x63>
}

inline void env_table_ws_invalidate(struct Env* e, uint32 virtual_address)
{
	int i=0;
	for(;i<__TWS_MAX_SIZE; i++)
f010807a:	ff 45 f4             	incl   -0xc(%ebp)
f010807d:	83 7d f4 31          	cmpl   $0x31,-0xc(%ebp)
f0108081:	7e ac                	jle    f010802f <env_table_ws_invalidate+0xf>
		{
			env_table_ws_clear_entry(e, i);
			break;
		}
	}
}
f0108083:	90                   	nop
f0108084:	c9                   	leave  
f0108085:	c3                   	ret    

f0108086 <env_table_ws_set_entry>:

inline void env_table_ws_set_entry(struct Env* e, uint32 entry_index, uint32 virtual_address)
{
f0108086:	55                   	push   %ebp
f0108087:	89 e5                	mov    %esp,%ebp
f0108089:	53                   	push   %ebx
f010808a:	83 ec 14             	sub    $0x14,%esp
	assert(entry_index >= 0 && entry_index < __TWS_MAX_SIZE);
f010808d:	83 7d 0c 31          	cmpl   $0x31,0xc(%ebp)
f0108091:	76 19                	jbe    f01080ac <env_table_ws_set_entry+0x26>
f0108093:	68 f8 59 13 f0       	push   $0xf01359f8
f0108098:	68 1e 58 13 f0       	push   $0xf013581e
f010809d:	68 b6 00 00 00       	push   $0xb6
f01080a2:	68 34 58 13 f0       	push   $0xf0135834
f01080a7:	e8 fa 80 ff ff       	call   f01001a6 <_panic>
	assert(virtual_address >= 0 && virtual_address < USER_TOP);
f01080ac:	81 7d 10 ff ff bf ee 	cmpl   $0xeebfffff,0x10(%ebp)
f01080b3:	76 19                	jbe    f01080ce <env_table_ws_set_entry+0x48>
f01080b5:	68 54 58 13 f0       	push   $0xf0135854
f01080ba:	68 1e 58 13 f0       	push   $0xf013581e
f01080bf:	68 b7 00 00 00       	push   $0xb7
f01080c4:	68 34 58 13 f0       	push   $0xf0135834
f01080c9:	e8 d8 80 ff ff       	call   f01001a6 <_panic>
	e->__ptr_tws[entry_index].virtual_address = ROUNDDOWN(virtual_address,PAGE_SIZE*1024);
f01080ce:	8b 45 10             	mov    0x10(%ebp),%eax
f01080d1:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01080d4:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01080d7:	25 00 00 c0 ff       	and    $0xffc00000,%eax
f01080dc:	89 c1                	mov    %eax,%ecx
f01080de:	8b 5d 08             	mov    0x8(%ebp),%ebx
f01080e1:	8b 55 0c             	mov    0xc(%ebp),%edx
f01080e4:	89 d0                	mov    %edx,%eax
f01080e6:	01 c0                	add    %eax,%eax
f01080e8:	01 d0                	add    %edx,%eax
f01080ea:	c1 e0 03             	shl    $0x3,%eax
f01080ed:	01 d8                	add    %ebx,%eax
f01080ef:	05 38 d5 01 00       	add    $0x1d538,%eax
f01080f4:	89 08                	mov    %ecx,(%eax)
	e->__ptr_tws[entry_index].empty = 0;
f01080f6:	8b 4d 08             	mov    0x8(%ebp),%ecx
f01080f9:	8b 55 0c             	mov    0xc(%ebp),%edx
f01080fc:	89 d0                	mov    %edx,%eax
f01080fe:	01 c0                	add    %eax,%eax
f0108100:	01 d0                	add    %edx,%eax
f0108102:	c1 e0 03             	shl    $0x3,%eax
f0108105:	01 c8                	add    %ecx,%eax
f0108107:	05 3c d5 01 00       	add    $0x1d53c,%eax
f010810c:	c6 00 00             	movb   $0x0,(%eax)

	//e->__ptr_tws[entry_index].time_stamp = time;
	e->__ptr_tws[entry_index].time_stamp = 0x80000000;
f010810f:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0108112:	8b 55 0c             	mov    0xc(%ebp),%edx
f0108115:	89 d0                	mov    %edx,%eax
f0108117:	01 c0                	add    %eax,%eax
f0108119:	01 d0                	add    %edx,%eax
f010811b:	c1 e0 03             	shl    $0x3,%eax
f010811e:	01 c8                	add    %ecx,%eax
f0108120:	05 40 d5 01 00       	add    $0x1d540,%eax
f0108125:	c7 00 00 00 00 80    	movl   $0x80000000,(%eax)
	return;
f010812b:	90                   	nop
}
f010812c:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f010812f:	c9                   	leave  
f0108130:	c3                   	ret    

f0108131 <env_table_ws_clear_entry>:

inline void env_table_ws_clear_entry(struct Env* e, uint32 entry_index)
{
f0108131:	55                   	push   %ebp
f0108132:	89 e5                	mov    %esp,%ebp
f0108134:	83 ec 08             	sub    $0x8,%esp
	assert(entry_index >= 0 && entry_index < __TWS_MAX_SIZE);
f0108137:	83 7d 0c 31          	cmpl   $0x31,0xc(%ebp)
f010813b:	76 19                	jbe    f0108156 <env_table_ws_clear_entry+0x25>
f010813d:	68 f8 59 13 f0       	push   $0xf01359f8
f0108142:	68 1e 58 13 f0       	push   $0xf013581e
f0108147:	68 c2 00 00 00       	push   $0xc2
f010814c:	68 34 58 13 f0       	push   $0xf0135834
f0108151:	e8 50 80 ff ff       	call   f01001a6 <_panic>
	e->__ptr_tws[entry_index].virtual_address = 0;
f0108156:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0108159:	8b 55 0c             	mov    0xc(%ebp),%edx
f010815c:	89 d0                	mov    %edx,%eax
f010815e:	01 c0                	add    %eax,%eax
f0108160:	01 d0                	add    %edx,%eax
f0108162:	c1 e0 03             	shl    $0x3,%eax
f0108165:	01 c8                	add    %ecx,%eax
f0108167:	05 38 d5 01 00       	add    $0x1d538,%eax
f010816c:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	e->__ptr_tws[entry_index].empty = 1;
f0108172:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0108175:	8b 55 0c             	mov    0xc(%ebp),%edx
f0108178:	89 d0                	mov    %edx,%eax
f010817a:	01 c0                	add    %eax,%eax
f010817c:	01 d0                	add    %edx,%eax
f010817e:	c1 e0 03             	shl    $0x3,%eax
f0108181:	01 c8                	add    %ecx,%eax
f0108183:	05 3c d5 01 00       	add    $0x1d53c,%eax
f0108188:	c6 00 01             	movb   $0x1,(%eax)
	e->__ptr_tws[entry_index].time_stamp = 0;
f010818b:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010818e:	8b 55 0c             	mov    0xc(%ebp),%edx
f0108191:	89 d0                	mov    %edx,%eax
f0108193:	01 c0                	add    %eax,%eax
f0108195:	01 d0                	add    %edx,%eax
f0108197:	c1 e0 03             	shl    $0x3,%eax
f010819a:	01 c8                	add    %ecx,%eax
f010819c:	05 40 d5 01 00       	add    $0x1d540,%eax
f01081a1:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
}
f01081a7:	90                   	nop
f01081a8:	c9                   	leave  
f01081a9:	c3                   	ret    

f01081aa <env_table_ws_get_virtual_address>:

inline uint32 env_table_ws_get_virtual_address(struct Env* e, uint32 entry_index)
{
f01081aa:	55                   	push   %ebp
f01081ab:	89 e5                	mov    %esp,%ebp
f01081ad:	83 ec 18             	sub    $0x18,%esp
	assert(entry_index >= 0 && entry_index < __TWS_MAX_SIZE);
f01081b0:	83 7d 0c 31          	cmpl   $0x31,0xc(%ebp)
f01081b4:	76 19                	jbe    f01081cf <env_table_ws_get_virtual_address+0x25>
f01081b6:	68 f8 59 13 f0       	push   $0xf01359f8
f01081bb:	68 1e 58 13 f0       	push   $0xf013581e
f01081c0:	68 ca 00 00 00       	push   $0xca
f01081c5:	68 34 58 13 f0       	push   $0xf0135834
f01081ca:	e8 d7 7f ff ff       	call   f01001a6 <_panic>
	return ROUNDDOWN(e->__ptr_tws[entry_index].virtual_address,PAGE_SIZE*1024);
f01081cf:	8b 4d 08             	mov    0x8(%ebp),%ecx
f01081d2:	8b 55 0c             	mov    0xc(%ebp),%edx
f01081d5:	89 d0                	mov    %edx,%eax
f01081d7:	01 c0                	add    %eax,%eax
f01081d9:	01 d0                	add    %edx,%eax
f01081db:	c1 e0 03             	shl    $0x3,%eax
f01081de:	01 c8                	add    %ecx,%eax
f01081e0:	05 38 d5 01 00       	add    $0x1d538,%eax
f01081e5:	8b 00                	mov    (%eax),%eax
f01081e7:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01081ea:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01081ed:	25 00 00 c0 ff       	and    $0xffc00000,%eax
}
f01081f2:	c9                   	leave  
f01081f3:	c3                   	ret    

f01081f4 <env_table_ws_get_time_stamp>:


inline uint32 env_table_ws_get_time_stamp(struct Env* e, uint32 entry_index)
{
f01081f4:	55                   	push   %ebp
f01081f5:	89 e5                	mov    %esp,%ebp
f01081f7:	83 ec 08             	sub    $0x8,%esp
	assert(entry_index >= 0 && entry_index < __TWS_MAX_SIZE);
f01081fa:	83 7d 0c 31          	cmpl   $0x31,0xc(%ebp)
f01081fe:	76 19                	jbe    f0108219 <env_table_ws_get_time_stamp+0x25>
f0108200:	68 f8 59 13 f0       	push   $0xf01359f8
f0108205:	68 1e 58 13 f0       	push   $0xf013581e
f010820a:	68 d1 00 00 00       	push   $0xd1
f010820f:	68 34 58 13 f0       	push   $0xf0135834
f0108214:	e8 8d 7f ff ff       	call   f01001a6 <_panic>
	return e->__ptr_tws[entry_index].time_stamp;
f0108219:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010821c:	8b 55 0c             	mov    0xc(%ebp),%edx
f010821f:	89 d0                	mov    %edx,%eax
f0108221:	01 c0                	add    %eax,%eax
f0108223:	01 d0                	add    %edx,%eax
f0108225:	c1 e0 03             	shl    $0x3,%eax
f0108228:	01 c8                	add    %ecx,%eax
f010822a:	05 40 d5 01 00       	add    $0x1d540,%eax
f010822f:	8b 00                	mov    (%eax),%eax
}
f0108231:	c9                   	leave  
f0108232:	c3                   	ret    

f0108233 <env_table_ws_is_entry_empty>:

inline uint32 env_table_ws_is_entry_empty(struct Env* e, uint32 entry_index)
{
f0108233:	55                   	push   %ebp
f0108234:	89 e5                	mov    %esp,%ebp
	return e->__ptr_tws[entry_index].empty;
f0108236:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0108239:	8b 55 0c             	mov    0xc(%ebp),%edx
f010823c:	89 d0                	mov    %edx,%eax
f010823e:	01 c0                	add    %eax,%eax
f0108240:	01 d0                	add    %edx,%eax
f0108242:	c1 e0 03             	shl    $0x3,%eax
f0108245:	01 c8                	add    %ecx,%eax
f0108247:	05 3c d5 01 00       	add    $0x1d53c,%eax
f010824c:	8a 00                	mov    (%eax),%al
f010824e:	0f b6 c0             	movzbl %al,%eax
}
f0108251:	5d                   	pop    %ebp
f0108252:	c3                   	ret    

f0108253 <cut_paste_WS>:
///=================================================================================================

// Change WS Sizes For PRIORITY  =========================================================

void cut_paste_WS(struct WorkingSetElement* newWS, int newSize, struct Env* e)
{
f0108253:	55                   	push   %ebp
f0108254:	89 e5                	mov    %esp,%ebp
f0108256:	83 ec 08             	sub    $0x8,%esp
	//TODO: [PROJECT MS3 - BONUS] [PROGRAM PRIORITY] cut_paste_WS
	//your code is here, remove the panic and write your code
	panic("cut_paste_WS() is not implemented yet...!!");
f0108259:	83 ec 04             	sub    $0x4,%esp
f010825c:	68 2c 5a 13 f0       	push   $0xf0135a2c
f0108261:	68 e5 00 00 00       	push   $0xe5
f0108266:	68 34 58 13 f0       	push   $0xf0135834
f010826b:	e8 36 7f ff ff       	call   f01001a6 <_panic>

f0108270 <double_WS_Size>:
}

void double_WS_Size(struct Env* e, int isOneTimeOnly)
{
f0108270:	55                   	push   %ebp
f0108271:	89 e5                	mov    %esp,%ebp
f0108273:	83 ec 08             	sub    $0x8,%esp
	//TODO: [PROJECT MS3 - BONUS] [PROGRAM PRIORITY] double_WS_Size
	//your code is here, remove the panic and write your code
	panic("double_WS_Size() is not implemented yet...!!");
f0108276:	83 ec 04             	sub    $0x4,%esp
f0108279:	68 58 5a 13 f0       	push   $0xf0135a58
f010827e:	68 ec 00 00 00       	push   $0xec
f0108283:	68 34 58 13 f0       	push   $0xf0135834
f0108288:	e8 19 7f ff ff       	call   f01001a6 <_panic>

f010828d <half_WS_Size>:
}

void half_WS_Size(struct Env* e, int isImmidiate)
{
f010828d:	55                   	push   %ebp
f010828e:	89 e5                	mov    %esp,%ebp
f0108290:	83 ec 08             	sub    $0x8,%esp
	//TODO: [PROJECT MS3 - BONUS] [PROGRAM PRIORITY] half_WS_Size
	//your code is here, remove the panic and write your code
	panic("half_WS_Size() is not implemented yet...!!");
f0108293:	83 ec 04             	sub    $0x4,%esp
f0108296:	68 88 5a 13 f0       	push   $0xf0135a88
f010829b:	68 f3 00 00 00       	push   $0xf3
f01082a0:	68 34 58 13 f0       	push   $0xf0135834
f01082a5:	e8 fc 7e ff ff       	call   f01001a6 <_panic>

f01082aa <cut_paste_pages>:
//===============================
//This function should cut-paste the given number of pages from source_va to dest_va
//if the page table at any destination page in the range is not exist, it should create it
//Hint: use ROUNDDOWN/ROUNDUP macros to align the addresses
int cut_paste_pages(uint32* page_directory, uint32 source_va, uint32 dest_va, uint32 num_of_pages)
{
f01082aa:	55                   	push   %ebp
f01082ab:	89 e5                	mov    %esp,%ebp
f01082ad:	83 ec 48             	sub    $0x48,%esp
	//TODO: [PROJECT MS2] [CHUNK OPERATIONS] cut_paste_pages
	// Write your code here, remove the panic and write your code
	uint32 new_dest_va = dest_va;
f01082b0:	8b 45 10             	mov    0x10(%ebp),%eax
f01082b3:	89 45 f4             	mov    %eax,-0xc(%ebp)
	uint32 new_source_va = source_va;
f01082b6:	8b 45 0c             	mov    0xc(%ebp),%eax
f01082b9:	89 45 f0             	mov    %eax,-0x10(%ebp)

	if(dest_va%PAGE_SIZE!=0)
f01082bc:	8b 45 10             	mov    0x10(%ebp),%eax
f01082bf:	25 ff 0f 00 00       	and    $0xfff,%eax
f01082c4:	85 c0                	test   %eax,%eax
f01082c6:	74 11                	je     f01082d9 <cut_paste_pages+0x2f>
		new_dest_va = ROUNDDOWN(dest_va,PAGE_SIZE);
f01082c8:	8b 45 10             	mov    0x10(%ebp),%eax
f01082cb:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f01082ce:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01082d1:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f01082d6:	89 45 f4             	mov    %eax,-0xc(%ebp)

	if(source_va%PAGE_SIZE!=0)
f01082d9:	8b 45 0c             	mov    0xc(%ebp),%eax
f01082dc:	25 ff 0f 00 00       	and    $0xfff,%eax
f01082e1:	85 c0                	test   %eax,%eax
f01082e3:	74 11                	je     f01082f6 <cut_paste_pages+0x4c>
		new_source_va = ROUNDDOWN(source_va,PAGE_SIZE);
f01082e5:	8b 45 0c             	mov    0xc(%ebp),%eax
f01082e8:	89 45 e0             	mov    %eax,-0x20(%ebp)
f01082eb:	8b 45 e0             	mov    -0x20(%ebp),%eax
f01082ee:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f01082f3:	89 45 f0             	mov    %eax,-0x10(%ebp)
	uint32 max_size = (PAGE_SIZE * num_of_pages) + new_dest_va;
f01082f6:	8b 45 14             	mov    0x14(%ebp),%eax
f01082f9:	c1 e0 0c             	shl    $0xc,%eax
f01082fc:	89 c2                	mov    %eax,%edx
f01082fe:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0108301:	01 d0                	add    %edx,%eax
f0108303:	89 45 dc             	mov    %eax,-0x24(%ebp)

	for(uint32 i = new_dest_va; i < max_size; i += PAGE_SIZE)
f0108306:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0108309:	89 45 ec             	mov    %eax,-0x14(%ebp)
f010830c:	eb 4b                	jmp    f0108359 <cut_paste_pages+0xaf>
	{
		uint32 *ptr_page_table_dest = NULL;
f010830e:	c7 45 cc 00 00 00 00 	movl   $0x0,-0x34(%ebp)
		get_page_table(page_directory,i,&ptr_page_table_dest);
f0108315:	83 ec 04             	sub    $0x4,%esp
f0108318:	8d 45 cc             	lea    -0x34(%ebp),%eax
f010831b:	50                   	push   %eax
f010831c:	ff 75 ec             	pushl  -0x14(%ebp)
f010831f:	ff 75 08             	pushl  0x8(%ebp)
f0108322:	e8 42 e6 ff ff       	call   f0106969 <get_page_table>
f0108327:	83 c4 10             	add    $0x10,%esp
		struct FrameInfo *dest_frame = get_frame_info(page_directory,i,&ptr_page_table_dest);
f010832a:	83 ec 04             	sub    $0x4,%esp
f010832d:	8d 45 cc             	lea    -0x34(%ebp),%eax
f0108330:	50                   	push   %eax
f0108331:	ff 75 ec             	pushl  -0x14(%ebp)
f0108334:	ff 75 08             	pushl  0x8(%ebp)
f0108337:	e8 c5 e8 ff ff       	call   f0106c01 <get_frame_info>
f010833c:	83 c4 10             	add    $0x10,%esp
f010833f:	89 45 d8             	mov    %eax,-0x28(%ebp)

		if(dest_frame!=NULL)
f0108342:	83 7d d8 00          	cmpl   $0x0,-0x28(%ebp)
f0108346:	74 0a                	je     f0108352 <cut_paste_pages+0xa8>
			return -1;
f0108348:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
f010834d:	e9 d4 00 00 00       	jmp    f0108426 <cut_paste_pages+0x17c>

	if(source_va%PAGE_SIZE!=0)
		new_source_va = ROUNDDOWN(source_va,PAGE_SIZE);
	uint32 max_size = (PAGE_SIZE * num_of_pages) + new_dest_va;

	for(uint32 i = new_dest_va; i < max_size; i += PAGE_SIZE)
f0108352:	81 45 ec 00 10 00 00 	addl   $0x1000,-0x14(%ebp)
f0108359:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010835c:	3b 45 dc             	cmp    -0x24(%ebp),%eax
f010835f:	72 ad                	jb     f010830e <cut_paste_pages+0x64>
		struct FrameInfo *dest_frame = get_frame_info(page_directory,i,&ptr_page_table_dest);

		if(dest_frame!=NULL)
			return -1;
	}
	for(uint32 i = new_dest_va; i < max_size; i += PAGE_SIZE)
f0108361:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0108364:	89 45 e8             	mov    %eax,-0x18(%ebp)
f0108367:	e9 a9 00 00 00       	jmp    f0108415 <cut_paste_pages+0x16b>
	{
		uint32 *ptr_page_table_dest = NULL;
f010836c:	c7 45 c8 00 00 00 00 	movl   $0x0,-0x38(%ebp)
		get_page_table(page_directory,i,&ptr_page_table_dest);
f0108373:	83 ec 04             	sub    $0x4,%esp
f0108376:	8d 45 c8             	lea    -0x38(%ebp),%eax
f0108379:	50                   	push   %eax
f010837a:	ff 75 e8             	pushl  -0x18(%ebp)
f010837d:	ff 75 08             	pushl  0x8(%ebp)
f0108380:	e8 e4 e5 ff ff       	call   f0106969 <get_page_table>
f0108385:	83 c4 10             	add    $0x10,%esp

		if(ptr_page_table_dest == NULL)
f0108388:	8b 45 c8             	mov    -0x38(%ebp),%eax
f010838b:	85 c0                	test   %eax,%eax
f010838d:	75 14                	jne    f01083a3 <cut_paste_pages+0xf9>
			ptr_page_table_dest = create_page_table(page_directory,i);
f010838f:	83 ec 08             	sub    $0x8,%esp
f0108392:	ff 75 e8             	pushl  -0x18(%ebp)
f0108395:	ff 75 08             	pushl  0x8(%ebp)
f0108398:	e8 d2 e6 ff ff       	call   f0106a6f <create_page_table>
f010839d:	83 c4 10             	add    $0x10,%esp
f01083a0:	89 45 c8             	mov    %eax,-0x38(%ebp)

		struct FrameInfo *dest_frame = get_frame_info(page_directory,i,&ptr_page_table_dest);
f01083a3:	83 ec 04             	sub    $0x4,%esp
f01083a6:	8d 45 c8             	lea    -0x38(%ebp),%eax
f01083a9:	50                   	push   %eax
f01083aa:	ff 75 e8             	pushl  -0x18(%ebp)
f01083ad:	ff 75 08             	pushl  0x8(%ebp)
f01083b0:	e8 4c e8 ff ff       	call   f0106c01 <get_frame_info>
f01083b5:	83 c4 10             	add    $0x10,%esp
f01083b8:	89 45 c4             	mov    %eax,-0x3c(%ebp)

		int source_perm = pt_get_page_permissions(page_directory,new_source_va);
f01083bb:	83 ec 08             	sub    $0x8,%esp
f01083be:	ff 75 f0             	pushl  -0x10(%ebp)
f01083c1:	ff 75 08             	pushl  0x8(%ebp)
f01083c4:	e8 df f3 ff ff       	call   f01077a8 <pt_get_page_permissions>
f01083c9:	83 c4 10             	add    $0x10,%esp
f01083cc:	89 45 d4             	mov    %eax,-0x2c(%ebp)

		unmap_frame(page_directory,new_source_va);
f01083cf:	83 ec 08             	sub    $0x8,%esp
f01083d2:	ff 75 f0             	pushl  -0x10(%ebp)
f01083d5:	ff 75 08             	pushl  0x8(%ebp)
f01083d8:	e8 94 e8 ff ff       	call   f0106c71 <unmap_frame>
f01083dd:	83 c4 10             	add    $0x10,%esp
		uint32 ret = allocate_frame(&dest_frame);
f01083e0:	83 ec 0c             	sub    $0xc,%esp
f01083e3:	8d 45 c4             	lea    -0x3c(%ebp),%eax
f01083e6:	50                   	push   %eax
f01083e7:	e8 be e3 ff ff       	call   f01067aa <allocate_frame>
f01083ec:	83 c4 10             	add    $0x10,%esp
f01083ef:	89 45 d0             	mov    %eax,-0x30(%ebp)
		map_frame(page_directory, dest_frame, i,source_perm);
f01083f2:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f01083f5:	ff 75 d4             	pushl  -0x2c(%ebp)
f01083f8:	ff 75 e8             	pushl  -0x18(%ebp)
f01083fb:	50                   	push   %eax
f01083fc:	ff 75 08             	pushl  0x8(%ebp)
f01083ff:	e8 3e e7 ff ff       	call   f0106b42 <map_frame>
f0108404:	83 c4 10             	add    $0x10,%esp

		new_source_va += PAGE_SIZE;
f0108407:	81 45 f0 00 10 00 00 	addl   $0x1000,-0x10(%ebp)
		struct FrameInfo *dest_frame = get_frame_info(page_directory,i,&ptr_page_table_dest);

		if(dest_frame!=NULL)
			return -1;
	}
	for(uint32 i = new_dest_va; i < max_size; i += PAGE_SIZE)
f010840e:	81 45 e8 00 10 00 00 	addl   $0x1000,-0x18(%ebp)
f0108415:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0108418:	3b 45 dc             	cmp    -0x24(%ebp),%eax
f010841b:	0f 82 4b ff ff ff    	jb     f010836c <cut_paste_pages+0xc2>
		uint32 ret = allocate_frame(&dest_frame);
		map_frame(page_directory, dest_frame, i,source_perm);

		new_source_va += PAGE_SIZE;
	}
	return 0;
f0108421:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0108426:	c9                   	leave  
f0108427:	c3                   	ret    

f0108428 <copy_paste_chunk>:
//===============================
//This function should copy-paste the given size from source_va to dest_va
//if the page table at any destination page in the range is not exist, it should create it
//Hint: use ROUNDDOWN/ROUNDUP macros to align the addresses
int copy_paste_chunk(uint32* page_directory, uint32 source_va, uint32 dest_va, uint32 size)
{
f0108428:	55                   	push   %ebp
f0108429:	89 e5                	mov    %esp,%ebp
f010842b:	83 ec 08             	sub    $0x8,%esp
	//TODO: [PROJECT MS2] [CHUNK OPERATIONS] copy_paste_chunk
	// Write your code here, remove the panic and write your code
	panic("copy_paste_chunk() is not implemented yet...!!");
f010842e:	83 ec 04             	sub    $0x4,%esp
f0108431:	68 b4 5a 13 f0       	push   $0xf0135ab4
f0108436:	6a 4e                	push   $0x4e
f0108438:	68 e3 5a 13 f0       	push   $0xf0135ae3
f010843d:	e8 64 7d ff ff       	call   f01001a6 <_panic>

f0108442 <share_chunk>:
// 3) SHARE RANGE IN RAM:
//===============================
//This function should share the given size from dest_va with the source_va
//Hint: use ROUNDDOWN/ROUNDUP macros to align the addresses
int share_chunk(uint32* page_directory, uint32 source_va,uint32 dest_va, uint32 size, uint32 perms)
{
f0108442:	55                   	push   %ebp
f0108443:	89 e5                	mov    %esp,%ebp
f0108445:	83 ec 08             	sub    $0x8,%esp
	//TODO: [PROJECT MS2] [CHUNK OPERATIONS] share_chunk
	// Write your code here, remove the panic and write your code
	panic("share_chunk() is not implemented yet...!!");
f0108448:	83 ec 04             	sub    $0x4,%esp
f010844b:	68 00 5b 13 f0       	push   $0xf0135b00
f0108450:	6a 5a                	push   $0x5a
f0108452:	68 e3 5a 13 f0       	push   $0xf0135ae3
f0108457:	e8 4a 7d ff ff       	call   f01001a6 <_panic>

f010845c <allocate_chunk>:
// 4) ALLOCATE CHUNK IN RAM:
//===============================
//This function should allocate in RAM the given range [va, va+size)
//Hint: use ROUNDDOWN/ROUNDUP macros to align the addresses
int allocate_chunk(uint32* page_directory, uint32 va, uint32 size, uint32 perms)
{
f010845c:	55                   	push   %ebp
f010845d:	89 e5                	mov    %esp,%ebp
f010845f:	83 ec 38             	sub    $0x38,%esp
	//TODO: [PROJECT MS2] [CHUNK OPERATIONS] allocate_chunk
	// Write your code here, remove the panic and write your code
	uint32 virtual_address=0;
f0108462:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	uint32 range_page=va+size;
f0108469:	8b 55 0c             	mov    0xc(%ebp),%edx
f010846c:	8b 45 10             	mov    0x10(%ebp),%eax
f010846f:	01 d0                	add    %edx,%eax
f0108471:	89 45 ec             	mov    %eax,-0x14(%ebp)
	uint32 virtual_range=0;
f0108474:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
	struct FrameInfo *sb_chunck= NULL ;
f010847b:	c7 45 d0 00 00 00 00 	movl   $0x0,-0x30(%ebp)
	uint32 *page_table_point=NULL;
f0108482:	c7 45 cc 00 00 00 00 	movl   $0x0,-0x34(%ebp)
    uint32 result=0;
f0108489:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)

	virtual_address=ROUNDDOWN(va,PAGE_SIZE);
f0108490:	8b 45 0c             	mov    0xc(%ebp),%eax
f0108493:	89 45 e0             	mov    %eax,-0x20(%ebp)
f0108496:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0108499:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f010849e:	89 45 f0             	mov    %eax,-0x10(%ebp)
	virtual_range=ROUNDUP(range_page,PAGE_SIZE);
f01084a1:	c7 45 dc 00 10 00 00 	movl   $0x1000,-0x24(%ebp)
f01084a8:	8b 55 ec             	mov    -0x14(%ebp),%edx
f01084ab:	8b 45 dc             	mov    -0x24(%ebp),%eax
f01084ae:	01 d0                	add    %edx,%eax
f01084b0:	48                   	dec    %eax
f01084b1:	89 45 d8             	mov    %eax,-0x28(%ebp)
f01084b4:	8b 45 d8             	mov    -0x28(%ebp),%eax
f01084b7:	ba 00 00 00 00       	mov    $0x0,%edx
f01084bc:	f7 75 dc             	divl   -0x24(%ebp)
f01084bf:	8b 45 d8             	mov    -0x28(%ebp),%eax
f01084c2:	29 d0                	sub    %edx,%eax
f01084c4:	89 45 e8             	mov    %eax,-0x18(%ebp)
	uint32 new_virtual_address;
	for(uint32 count=virtual_address;count<virtual_range;count+=PAGE_SIZE)
f01084c7:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01084ca:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01084cd:	e9 94 00 00 00       	jmp    f0108566 <allocate_chunk+0x10a>
	{
		new_virtual_address=count;
f01084d2:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01084d5:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		get_page_table(page_directory,new_virtual_address,&page_table_point);
f01084d8:	83 ec 04             	sub    $0x4,%esp
f01084db:	8d 45 cc             	lea    -0x34(%ebp),%eax
f01084de:	50                   	push   %eax
f01084df:	ff 75 d4             	pushl  -0x2c(%ebp)
f01084e2:	ff 75 08             	pushl  0x8(%ebp)
f01084e5:	e8 7f e4 ff ff       	call   f0106969 <get_page_table>
f01084ea:	83 c4 10             	add    $0x10,%esp
		if(page_table_point==NULL)
f01084ed:	8b 45 cc             	mov    -0x34(%ebp),%eax
f01084f0:	85 c0                	test   %eax,%eax
f01084f2:	75 14                	jne    f0108508 <allocate_chunk+0xac>
		{
		   page_table_point=create_page_table(page_directory,new_virtual_address);
f01084f4:	83 ec 08             	sub    $0x8,%esp
f01084f7:	ff 75 d4             	pushl  -0x2c(%ebp)
f01084fa:	ff 75 08             	pushl  0x8(%ebp)
f01084fd:	e8 6d e5 ff ff       	call   f0106a6f <create_page_table>
f0108502:	83 c4 10             	add    $0x10,%esp
f0108505:	89 45 cc             	mov    %eax,-0x34(%ebp)
		}
	    sb_chunck=get_frame_info(page_directory,new_virtual_address,&page_table_point);
f0108508:	83 ec 04             	sub    $0x4,%esp
f010850b:	8d 45 cc             	lea    -0x34(%ebp),%eax
f010850e:	50                   	push   %eax
f010850f:	ff 75 d4             	pushl  -0x2c(%ebp)
f0108512:	ff 75 08             	pushl  0x8(%ebp)
f0108515:	e8 e7 e6 ff ff       	call   f0106c01 <get_frame_info>
f010851a:	83 c4 10             	add    $0x10,%esp
f010851d:	89 45 d0             	mov    %eax,-0x30(%ebp)
		if(sb_chunck!=NULL)
f0108520:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0108523:	85 c0                	test   %eax,%eax
f0108525:	74 07                	je     f010852e <allocate_chunk+0xd2>
		{
			return -1;
f0108527:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
f010852c:	eb 49                	jmp    f0108577 <allocate_chunk+0x11b>
		}
	    result= allocate_frame(&sb_chunck);
f010852e:	83 ec 0c             	sub    $0xc,%esp
f0108531:	8d 45 d0             	lea    -0x30(%ebp),%eax
f0108534:	50                   	push   %eax
f0108535:	e8 70 e2 ff ff       	call   f01067aa <allocate_frame>
f010853a:	83 c4 10             	add    $0x10,%esp
f010853d:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		if(result != E_NO_MEM)
f0108540:	83 7d e4 fc          	cmpl   $0xfffffffc,-0x1c(%ebp)
f0108544:	74 19                	je     f010855f <allocate_chunk+0x103>
		{
			result=map_frame(page_directory,sb_chunck,new_virtual_address,perms);
f0108546:	8b 55 14             	mov    0x14(%ebp),%edx
f0108549:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010854c:	52                   	push   %edx
f010854d:	ff 75 d4             	pushl  -0x2c(%ebp)
f0108550:	50                   	push   %eax
f0108551:	ff 75 08             	pushl  0x8(%ebp)
f0108554:	e8 e9 e5 ff ff       	call   f0106b42 <map_frame>
f0108559:	83 c4 10             	add    $0x10,%esp
f010855c:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    uint32 result=0;

	virtual_address=ROUNDDOWN(va,PAGE_SIZE);
	virtual_range=ROUNDUP(range_page,PAGE_SIZE);
	uint32 new_virtual_address;
	for(uint32 count=virtual_address;count<virtual_range;count+=PAGE_SIZE)
f010855f:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
f0108566:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0108569:	3b 45 e8             	cmp    -0x18(%ebp),%eax
f010856c:	0f 82 60 ff ff ff    	jb     f01084d2 <allocate_chunk+0x76>
		if(result != E_NO_MEM)
		{
			result=map_frame(page_directory,sb_chunck,new_virtual_address,perms);
		}
	}
	return 0;
f0108572:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0108577:	c9                   	leave  
f0108578:	c3                   	ret    

f0108579 <calculate_allocated_space>:
/*BONUS*/
//=====================================
// 5) CALCULATE ALLOCATED SPACE IN RAM:
//=====================================
void calculate_allocated_space(uint32* page_directory, uint32 sva, uint32 eva, uint32 *num_tables, uint32 *num_pages)
{
f0108579:	55                   	push   %ebp
f010857a:	89 e5                	mov    %esp,%ebp
f010857c:	83 ec 08             	sub    $0x8,%esp
	//TODO: [PROJECT MS2 - BONUS] [CHUNK OPERATIONS] calculate_allocated_space
	// Write your code here, remove the panic and write your code
	panic("calculate_allocated_space() is not implemented yet...!!");
f010857f:	83 ec 04             	sub    $0x4,%esp
f0108582:	68 2c 5b 13 f0       	push   $0xf0135b2c
f0108587:	68 8e 00 00 00       	push   $0x8e
f010858c:	68 e3 5a 13 f0       	push   $0xf0135ae3
f0108591:	e8 10 7c ff ff       	call   f01001a6 <_panic>

f0108596 <calculate_required_frames>:
// calculate_required_frames:
// calculates the new allocation size required for given address+size,
// we are not interested in knowing if pages or tables actually exist in memory or the page file,
// we are interested in knowing whether they are allocated or not.
uint32 calculate_required_frames(uint32* page_directory, uint32 sva, uint32 size)
{
f0108596:	55                   	push   %ebp
f0108597:	89 e5                	mov    %esp,%ebp
f0108599:	83 ec 08             	sub    $0x8,%esp
	//TODO: [PROJECT MS2 - BONUS] [CHUNK OPERATIONS] calculate_required_frames
	// Write your code here, remove the panic and write your code
	panic("calculate_required_frames() is not implemented yet...!!");
f010859c:	83 ec 04             	sub    $0x4,%esp
f010859f:	68 64 5b 13 f0       	push   $0xf0135b64
f01085a4:	68 9d 00 00 00       	push   $0x9d
f01085a9:	68 e3 5a 13 f0       	push   $0xf0135ae3
f01085ae:	e8 f3 7b ff ff       	call   f01001a6 <_panic>

f01085b3 <allocate_user_mem>:

//=====================================
// 1) ALLOCATE USER MEMORY:
//=====================================
void allocate_user_mem(struct Env* e, uint32 virtual_address, uint32 size)
{
f01085b3:	55                   	push   %ebp
f01085b4:	89 e5                	mov    %esp,%ebp
f01085b6:	83 ec 08             	sub    $0x8,%esp
	// Write your code here, remove the panic and write your code
	panic("allocate_user_mem() is not implemented yet...!!");
f01085b9:	83 ec 04             	sub    $0x4,%esp
f01085bc:	68 9c 5b 13 f0       	push   $0xf0135b9c
f01085c1:	68 b2 00 00 00       	push   $0xb2
f01085c6:	68 e3 5a 13 f0       	push   $0xf0135ae3
f01085cb:	e8 d6 7b ff ff       	call   f01001a6 <_panic>

f01085d0 <free_user_mem>:

//=====================================
// 2) FREE USER MEMORY:
//=====================================
void free_user_mem(struct Env* e, uint32 virtual_address, uint32 size)
{
f01085d0:	55                   	push   %ebp
f01085d1:	89 e5                	mov    %esp,%ebp
f01085d3:	83 ec 08             	sub    $0x8,%esp
	//TODO: [PROJECT MS3] [USER HEAP - KERNEL SIDE] free_user_mem
	// Write your code here, remove the panic and write your code
	panic("free_user_mem() is not implemented yet...!!");
f01085d6:	83 ec 04             	sub    $0x4,%esp
f01085d9:	68 cc 5b 13 f0       	push   $0xf0135bcc
f01085de:	68 bc 00 00 00       	push   $0xbc
f01085e3:	68 e3 5a 13 f0       	push   $0xf0135ae3
f01085e8:	e8 b9 7b ff ff       	call   f01001a6 <_panic>

f01085ed <__free_user_mem_with_buffering>:

//=====================================
// 2) FREE USER MEMORY (BUFFERING):
//=====================================
void __free_user_mem_with_buffering(struct Env* e, uint32 virtual_address, uint32 size)
{
f01085ed:	55                   	push   %ebp
f01085ee:	89 e5                	mov    %esp,%ebp
f01085f0:	83 ec 08             	sub    $0x8,%esp
	// your code is here, remove the panic and write your code
	panic("__free_user_mem_with_buffering() is not implemented yet...!!");
f01085f3:	83 ec 04             	sub    $0x4,%esp
f01085f6:	68 f8 5b 13 f0       	push   $0xf0135bf8
f01085fb:	68 ca 00 00 00       	push   $0xca
f0108600:	68 e3 5a 13 f0       	push   $0xf0135ae3
f0108605:	e8 9c 7b ff ff       	call   f01001a6 <_panic>

f010860a <move_user_mem>:

//=====================================
// 3) MOVE USER MEMORY:
//=====================================
void move_user_mem(struct Env* e, uint32 src_virtual_address, uint32 dst_virtual_address, uint32 size)
{
f010860a:	55                   	push   %ebp
f010860b:	89 e5                	mov    %esp,%ebp
f010860d:	83 ec 08             	sub    $0x8,%esp
	//TODO: [PROJECT MS3 - BONUS] [USER HEAP - KERNEL SIDE] move_user_mem
	//your code is here, remove the panic and write your code
	panic("move_user_mem() is not implemented yet...!!");
f0108610:	83 ec 04             	sub    $0x4,%esp
f0108613:	68 38 5c 13 f0       	push   $0xf0135c38
f0108618:	68 da 00 00 00       	push   $0xda
f010861d:	68 e3 5a 13 f0       	push   $0xf0135ae3
f0108622:	e8 7f 7b ff ff       	call   f01001a6 <_panic>

f0108627 <to_frame_number>:
struct FrameInfo *get_frame_info(uint32 *ptr_page_directory, uint32 virtual_address, uint32 **ptr_page_table);
void decrement_references(struct FrameInfo* ptr_frame_info);
void initialize_frame_info(struct FrameInfo *ptr_frame_info);

static inline uint32 to_frame_number(struct FrameInfo *ptr_frame_info)
{
f0108627:	55                   	push   %ebp
f0108628:	89 e5                	mov    %esp,%ebp
	return ptr_frame_info - frames_info;
f010862a:	8b 45 08             	mov    0x8(%ebp),%eax
f010862d:	8b 15 90 0e 6c f0    	mov    0xf06c0e90,%edx
f0108633:	29 d0                	sub    %edx,%eax
f0108635:	c1 f8 03             	sar    $0x3,%eax
f0108638:	89 c2                	mov    %eax,%edx
f010863a:	89 d0                	mov    %edx,%eax
f010863c:	c1 e0 02             	shl    $0x2,%eax
f010863f:	01 d0                	add    %edx,%eax
f0108641:	c1 e0 02             	shl    $0x2,%eax
f0108644:	01 d0                	add    %edx,%eax
f0108646:	c1 e0 02             	shl    $0x2,%eax
f0108649:	01 d0                	add    %edx,%eax
f010864b:	89 c1                	mov    %eax,%ecx
f010864d:	c1 e1 08             	shl    $0x8,%ecx
f0108650:	01 c8                	add    %ecx,%eax
f0108652:	89 c1                	mov    %eax,%ecx
f0108654:	c1 e1 10             	shl    $0x10,%ecx
f0108657:	01 c8                	add    %ecx,%eax
f0108659:	01 c0                	add    %eax,%eax
f010865b:	01 d0                	add    %edx,%eax
}
f010865d:	5d                   	pop    %ebp
f010865e:	c3                   	ret    

f010865f <to_physical_address>:

static inline uint32 to_physical_address(struct FrameInfo *ptr_frame_info)
{
f010865f:	55                   	push   %ebp
f0108660:	89 e5                	mov    %esp,%ebp
	return to_frame_number(ptr_frame_info) << PGSHIFT;
f0108662:	ff 75 08             	pushl  0x8(%ebp)
f0108665:	e8 bd ff ff ff       	call   f0108627 <to_frame_number>
f010866a:	83 c4 04             	add    $0x4,%esp
f010866d:	c1 e0 0c             	shl    $0xc,%eax
}
f0108670:	c9                   	leave  
f0108671:	c3                   	ret    

f0108672 <env_create>:
//===============================
// 1) CREATE NEW ENV & LOAD IT:
//===============================
// Allocates a new env and loads the named user program into it.
struct Env* env_create(char* user_program_name, unsigned int page_WS_size, unsigned int LRU_second_list_size, unsigned int percent_WS_pages_to_remove)
{
f0108672:	55                   	push   %ebp
f0108673:	89 e5                	mov    %esp,%ebp
f0108675:	57                   	push   %edi
f0108676:	56                   	push   %esi
f0108677:	53                   	push   %ebx
f0108678:	81 ec fc 00 00 00    	sub    $0xfc,%esp
	//[1] get pointer to the start of the "user_program_name" program in memory
	// Hint: use "get_user_program_info" function,
	// you should set the following "ptr_program_start" by the start address of the user program
	uint8* ptr_program_start = 0;
f010867e:	c7 45 b8 00 00 00 00 	movl   $0x0,-0x48(%ebp)

	struct UserProgramInfo* ptr_user_program_info = get_user_program_info(user_program_name);
f0108685:	83 ec 0c             	sub    $0xc,%esp
f0108688:	ff 75 08             	pushl  0x8(%ebp)
f010868b:	e8 c8 22 00 00       	call   f010a958 <get_user_program_info>
f0108690:	83 c4 10             	add    $0x10,%esp
f0108693:	89 45 b4             	mov    %eax,-0x4c(%ebp)
	if(ptr_user_program_info == 0) return NULL;
f0108696:	83 7d b4 00          	cmpl   $0x0,-0x4c(%ebp)
f010869a:	75 0a                	jne    f01086a6 <env_create+0x34>
f010869c:	b8 00 00 00 00       	mov    $0x0,%eax
f01086a1:	e9 8f 0c 00 00       	jmp    f0109335 <env_create+0xcc3>
	ptr_program_start = ptr_user_program_info->ptr_start ;
f01086a6:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01086a9:	8b 40 08             	mov    0x8(%eax),%eax
f01086ac:	89 45 b8             	mov    %eax,-0x48(%ebp)


	//[2] allocate new environment, (from the free environment list)
	//if there's no one, return NULL
	// Hint: use "allocate_environment" function
	struct Env* e = NULL;
f01086af:	c7 85 44 ff ff ff 00 	movl   $0x0,-0xbc(%ebp)
f01086b6:	00 00 00 
	if(allocate_environment(&e) < 0)
f01086b9:	83 ec 0c             	sub    $0xc,%esp
f01086bc:	8d 85 44 ff ff ff    	lea    -0xbc(%ebp),%eax
f01086c2:	50                   	push   %eax
f01086c3:	e8 32 10 00 00       	call   f01096fa <allocate_environment>
f01086c8:	83 c4 10             	add    $0x10,%esp
f01086cb:	85 c0                	test   %eax,%eax
f01086cd:	79 0a                	jns    f01086d9 <env_create+0x67>
	{
		return 0;
f01086cf:	b8 00 00 00 00       	mov    $0x0,%eax
f01086d4:	e9 5c 0c 00 00       	jmp    f0109335 <env_create+0xcc3>
	}

	//[2.5 - 2012] Set program name inside the environment
	//e->prog_name = ptr_user_program_info->name ;
	//2017: changed to fixed size array to be abale to access it from user side
	if (strlen(ptr_user_program_info->name) < PROGNAMELEN)
f01086d9:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01086dc:	8b 00                	mov    (%eax),%eax
f01086de:	83 ec 0c             	sub    $0xc,%esp
f01086e1:	50                   	push   %eax
f01086e2:	e8 44 80 02 00       	call   f013072b <strlen>
f01086e7:	83 c4 10             	add    $0x10,%esp
f01086ea:	83 f8 3f             	cmp    $0x3f,%eax
f01086ed:	7f 20                	jg     f010870f <env_create+0x9d>
		strcpy(e->prog_name, ptr_user_program_info->name);
f01086ef:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01086f2:	8b 00                	mov    (%eax),%eax
f01086f4:	8b 95 44 ff ff ff    	mov    -0xbc(%ebp),%edx
f01086fa:	81 c2 18 da 01 00    	add    $0x1da18,%edx
f0108700:	83 ec 08             	sub    $0x8,%esp
f0108703:	50                   	push   %eax
f0108704:	52                   	push   %edx
f0108705:	e8 70 80 02 00       	call   f013077a <strcpy>
f010870a:	83 c4 10             	add    $0x10,%esp
f010870d:	eb 20                	jmp    f010872f <env_create+0xbd>
	else
		strncpy(e->prog_name, ptr_user_program_info->name, PROGNAMELEN-1);
f010870f:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0108712:	8b 00                	mov    (%eax),%eax
f0108714:	8b 95 44 ff ff ff    	mov    -0xbc(%ebp),%edx
f010871a:	81 c2 18 da 01 00    	add    $0x1da18,%edx
f0108720:	83 ec 04             	sub    $0x4,%esp
f0108723:	6a 3f                	push   $0x3f
f0108725:	50                   	push   %eax
f0108726:	52                   	push   %edx
f0108727:	e8 7c 80 02 00       	call   f01307a8 <strncpy>
f010872c:	83 c4 10             	add    $0x10,%esp
		phys_user_page_directory = kheap_physical_address((uint32)ptr_user_page_directory);
	}
#else
	{
		int r;
		struct FrameInfo *p = NULL;
f010872f:	c7 85 28 ff ff ff 00 	movl   $0x0,-0xd8(%ebp)
f0108736:	00 00 00 

		allocate_frame(&p) ;
f0108739:	83 ec 0c             	sub    $0xc,%esp
f010873c:	8d 85 28 ff ff ff    	lea    -0xd8(%ebp),%eax
f0108742:	50                   	push   %eax
f0108743:	e8 62 e0 ff ff       	call   f01067aa <allocate_frame>
f0108748:	83 c4 10             	add    $0x10,%esp
		p->references = 1;
f010874b:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f0108751:	66 c7 40 08 01 00    	movw   $0x1,0x8(%eax)

		ptr_user_page_directory = STATIC_KERNEL_VIRTUAL_ADDRESS(to_physical_address(p));
f0108757:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f010875d:	83 ec 0c             	sub    $0xc,%esp
f0108760:	50                   	push   %eax
f0108761:	e8 f9 fe ff ff       	call   f010865f <to_physical_address>
f0108766:	83 c4 10             	add    $0x10,%esp
f0108769:	89 45 b0             	mov    %eax,-0x50(%ebp)
f010876c:	8b 45 b0             	mov    -0x50(%ebp),%eax
f010876f:	c1 e8 0c             	shr    $0xc,%eax
f0108772:	89 45 ac             	mov    %eax,-0x54(%ebp)
f0108775:	a1 50 0e 6c f0       	mov    0xf06c0e50,%eax
f010877a:	39 45 ac             	cmp    %eax,-0x54(%ebp)
f010877d:	72 17                	jb     f0108796 <env_create+0x124>
f010877f:	ff 75 b0             	pushl  -0x50(%ebp)
f0108782:	68 64 5c 13 f0       	push   $0xf0135c64
f0108787:	68 8d 00 00 00       	push   $0x8d
f010878c:	68 93 5c 13 f0       	push   $0xf0135c93
f0108791:	e8 10 7a ff ff       	call   f01001a6 <_panic>
f0108796:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0108799:	2d 00 00 00 10       	sub    $0x10000000,%eax
f010879e:	89 45 a8             	mov    %eax,-0x58(%ebp)
		phys_user_page_directory = to_physical_address(p);
f01087a1:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f01087a7:	83 ec 0c             	sub    $0xc,%esp
f01087aa:	50                   	push   %eax
f01087ab:	e8 af fe ff ff       	call   f010865f <to_physical_address>
f01087b0:	83 c4 10             	add    $0x10,%esp
f01087b3:	89 45 a4             	mov    %eax,-0x5c(%ebp)
#endif
	//[4] initialize the new environment by the virtual address of the page directory
	// Hint: use "initialize_environment" function

	//2016
	e->page_WS_max_size = page_WS_size;
f01087b6:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f01087bc:	8b 55 0c             	mov    0xc(%ebp),%edx
f01087bf:	89 50 74             	mov    %edx,0x74(%eax)

	//2020
	if(isPageReplacmentAlgorithmLRU(PG_REP_LRU_LISTS_APPROX))
f01087c2:	83 ec 0c             	sub    $0xc,%esp
f01087c5:	6a 02                	push   $0x2
f01087c7:	e8 a1 4d 00 00       	call   f010d56d <isPageReplacmentAlgorithmLRU>
f01087cc:	83 c4 10             	add    $0x10,%esp
f01087cf:	85 c0                	test   %eax,%eax
f01087d1:	74 21                	je     f01087f4 <env_create+0x182>
	{
		e->SecondListSize = LRU_second_list_size;
f01087d3:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f01087d9:	8b 55 10             	mov    0x10(%ebp),%edx
f01087dc:	89 90 a4 ea 01 00    	mov    %edx,0x1eaa4(%eax)
		e->ActiveListSize = page_WS_size - LRU_second_list_size;
f01087e2:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f01087e8:	8b 55 0c             	mov    0xc(%ebp),%edx
f01087eb:	2b 55 10             	sub    0x10(%ebp),%edx
f01087ee:	89 90 a0 ea 01 00    	mov    %edx,0x1eaa0(%eax)
	}

	//2018
	if (percent_WS_pages_to_remove == 0)	// If not entered as input, 0 as default value
f01087f4:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
f01087f8:	75 12                	jne    f010880c <env_create+0x19a>
		e->percentage_of_WS_pages_to_be_removed = DEFAULT_PERCENT_OF_PAGE_WS_TO_REMOVE;
f01087fa:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0108800:	c7 80 5c da 01 00 0a 	movl   $0xa,0x1da5c(%eax)
f0108807:	00 00 00 
f010880a:	eb 0f                	jmp    f010881b <env_create+0x1a9>
	else
		e->percentage_of_WS_pages_to_be_removed = percent_WS_pages_to_remove;
f010880c:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0108812:	8b 55 14             	mov    0x14(%ebp),%edx
f0108815:	89 90 5c da 01 00    	mov    %edx,0x1da5c(%eax)

	initialize_environment(e, ptr_user_page_directory, phys_user_page_directory);
f010881b:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0108821:	83 ec 04             	sub    $0x4,%esp
f0108824:	ff 75 a4             	pushl  -0x5c(%ebp)
f0108827:	ff 75 a8             	pushl  -0x58(%ebp)
f010882a:	50                   	push   %eax
f010882b:	e8 ed 16 00 00       	call   f0109f1d <initialize_environment>
f0108830:	83 c4 10             	add    $0x10,%esp

static __inline uint32
rcr3(void)
{
	uint32 val;
	__asm __volatile("movl %%cr3,%0" : "=r" (val));
f0108833:	0f 20 d8             	mov    %cr3,%eax
f0108836:	89 45 98             	mov    %eax,-0x68(%ebp)
	return val;
f0108839:	8b 45 98             	mov    -0x68(%ebp),%eax
	// 	usually size_in_file < or = size_in_memory
	//	4- uint8 *virtual_address: start virtual address that this segment should be copied to it

	//[6] switch to user page directory
	// Hint: use rcr3() and lcr3()
	uint32 kern_phys_pgdir = rcr3() ;
f010883c:	89 45 9c             	mov    %eax,-0x64(%ebp)
	lcr3(e->env_cr3) ;
f010883f:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0108845:	8b 40 60             	mov    0x60(%eax),%eax
f0108848:	89 85 48 ff ff ff    	mov    %eax,-0xb8(%ebp)
}

static __inline void
lcr3(uint32 val)
{
	__asm __volatile("movl %0,%%cr3" : : "r" (val));
f010884e:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f0108854:	0f 22 d8             	mov    %eax,%cr3

	//[7] load each program segment into user virtual space
	struct ProgramSegment* seg = NULL;  //use inside PROGRAM_SEGMENT_FOREACH as current segment information
f0108857:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
	int segment_counter=0;
f010885e:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
	uint32 remaining_ws_pages = (e->page_WS_max_size)-1; // we are reserving 1 page of WS for the stack that will be allocated just before the end of this function
f0108865:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f010886b:	8b 40 74             	mov    0x74(%eax),%eax
f010886e:	48                   	dec    %eax
f010886f:	89 45 dc             	mov    %eax,-0x24(%ebp)
	uint32 lastTableNumber=0xffffffff;
f0108872:	c7 85 40 ff ff ff ff 	movl   $0xffffffff,-0xc0(%ebp)
f0108879:	ff ff ff 

	PROGRAM_SEGMENT_FOREACH(seg, ptr_program_start)
f010887c:	8d 85 f8 fe ff ff    	lea    -0x108(%ebp),%eax
f0108882:	83 ec 08             	sub    $0x8,%esp
f0108885:	ff 75 b8             	pushl  -0x48(%ebp)
f0108888:	50                   	push   %eax
f0108889:	e8 ff 1d 00 00       	call   f010a68d <PROGRAM_SEGMENT_FIRST>
f010888e:	83 c4 0c             	add    $0xc,%esp
f0108891:	8d 85 2c ff ff ff    	lea    -0xd4(%ebp),%eax
f0108897:	8d 95 f8 fe ff ff    	lea    -0x108(%ebp),%edx
f010889d:	b9 05 00 00 00       	mov    $0x5,%ecx
f01088a2:	89 c7                	mov    %eax,%edi
f01088a4:	89 d6                	mov    %edx,%esi
f01088a6:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
f01088a8:	8d 85 2c ff ff ff    	lea    -0xd4(%ebp),%eax
f01088ae:	89 45 d8             	mov    %eax,-0x28(%ebp)
f01088b1:	8b 45 d8             	mov    -0x28(%ebp),%eax
f01088b4:	8b 40 10             	mov    0x10(%eax),%eax
f01088b7:	83 f8 ff             	cmp    $0xffffffff,%eax
f01088ba:	75 07                	jne    f01088c3 <env_create+0x251>
f01088bc:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
f01088c3:	8b 45 d8             	mov    -0x28(%ebp),%eax
f01088c6:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f01088c9:	e9 24 03 00 00       	jmp    f0108bf2 <env_create+0x580>
	{
		segment_counter++;
f01088ce:	ff 45 e0             	incl   -0x20(%ebp)
		LOG_STRING("===============================================================================");
		LOG_STATMENT(cprintf("SEGMENT #%d, size_in_file = %d, size_in_memory= %d, dest va = %x",segment_counter,seg->size_in_file,
				seg->size_in_memory, seg->virtual_address));
		LOG_STRING("===============================================================================");

		uint32 allocated_pages=0;
f01088d1:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f01088d8:	00 00 00 
		program_segment_alloc_map_copy_workingset(e, seg, &allocated_pages, remaining_ws_pages, &lastTableNumber);
f01088db:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f01088e1:	83 ec 0c             	sub    $0xc,%esp
f01088e4:	8d 95 40 ff ff ff    	lea    -0xc0(%ebp),%edx
f01088ea:	52                   	push   %edx
f01088eb:	ff 75 dc             	pushl  -0x24(%ebp)
f01088ee:	8d 95 24 ff ff ff    	lea    -0xdc(%ebp),%edx
f01088f4:	52                   	push   %edx
f01088f5:	ff 75 e4             	pushl  -0x1c(%ebp)
f01088f8:	50                   	push   %eax
f01088f9:	e8 f4 0e 00 00       	call   f01097f2 <program_segment_alloc_map_copy_workingset>
f01088fe:	83 c4 20             	add    $0x20,%esp

		remaining_ws_pages -= allocated_pages;
f0108901:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0108907:	29 45 dc             	sub    %eax,-0x24(%ebp)
		LOG_STATMENT(cprintf("SEGMENT: allocated pages in WS = %d",allocated_pages));
		LOG_STATMENT(cprintf("SEGMENT: remaining WS pages after allocation = %d",remaining_ws_pages));


		///[1] temporary initialize 1st page in memory then writing it on page file
		uint32 dataSrc_va = (uint32) seg->ptr_start;
f010890a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010890d:	8b 00                	mov    (%eax),%eax
f010890f:	89 45 94             	mov    %eax,-0x6c(%ebp)
		uint32 seg_va = (uint32) seg->virtual_address ;
f0108912:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0108915:	8b 40 0c             	mov    0xc(%eax),%eax
f0108918:	89 45 90             	mov    %eax,-0x70(%ebp)

		uint32 start_first_page = ROUNDDOWN(seg_va , PAGE_SIZE);
f010891b:	8b 45 90             	mov    -0x70(%ebp),%eax
f010891e:	89 45 8c             	mov    %eax,-0x74(%ebp)
f0108921:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0108924:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0108929:	89 45 88             	mov    %eax,-0x78(%ebp)
		uint32 end_first_page = ROUNDUP(seg_va , PAGE_SIZE);
f010892c:	c7 45 84 00 10 00 00 	movl   $0x1000,-0x7c(%ebp)
f0108933:	8b 55 90             	mov    -0x70(%ebp),%edx
f0108936:	8b 45 84             	mov    -0x7c(%ebp),%eax
f0108939:	01 d0                	add    %edx,%eax
f010893b:	48                   	dec    %eax
f010893c:	89 45 80             	mov    %eax,-0x80(%ebp)
f010893f:	8b 45 80             	mov    -0x80(%ebp),%eax
f0108942:	ba 00 00 00 00       	mov    $0x0,%edx
f0108947:	f7 75 84             	divl   -0x7c(%ebp)
f010894a:	8b 45 80             	mov    -0x80(%ebp),%eax
f010894d:	29 d0                	sub    %edx,%eax
f010894f:	89 85 7c ff ff ff    	mov    %eax,-0x84(%ebp)
		uint32 offset_first_page = seg_va  - start_first_page ;
f0108955:	8b 45 90             	mov    -0x70(%ebp),%eax
f0108958:	2b 45 88             	sub    -0x78(%ebp),%eax
f010895b:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)

		memset(ptr_temp_page , 0, PAGE_SIZE);
f0108961:	a1 c0 0e 6c f0       	mov    0xf06c0ec0,%eax
f0108966:	83 ec 04             	sub    $0x4,%esp
f0108969:	68 00 10 00 00       	push   $0x1000
f010896e:	6a 00                	push   $0x0
f0108970:	50                   	push   %eax
f0108971:	e8 a3 7f 02 00       	call   f0130919 <memset>
f0108976:	83 c4 10             	add    $0x10,%esp
		uint8 *src_ptr =  (uint8*) dataSrc_va;
f0108979:	8b 45 94             	mov    -0x6c(%ebp),%eax
f010897c:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		uint8 *dst_ptr =  (uint8*) (ptr_temp_page + offset_first_page);
f010897f:	8b 15 c0 0e 6c f0    	mov    0xf06c0ec0,%edx
f0108985:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f010898b:	01 d0                	add    %edx,%eax
f010898d:	89 45 d0             	mov    %eax,-0x30(%ebp)
		int i;
		for (i = seg_va ; i < end_first_page ; i++, src_ptr++,dst_ptr++ )
f0108990:	8b 45 90             	mov    -0x70(%ebp),%eax
f0108993:	89 45 cc             	mov    %eax,-0x34(%ebp)
f0108996:	eb 13                	jmp    f01089ab <env_create+0x339>
		{
			*dst_ptr = *src_ptr ;
f0108998:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f010899b:	8a 10                	mov    (%eax),%dl
f010899d:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01089a0:	88 10                	mov    %dl,(%eax)

		memset(ptr_temp_page , 0, PAGE_SIZE);
		uint8 *src_ptr =  (uint8*) dataSrc_va;
		uint8 *dst_ptr =  (uint8*) (ptr_temp_page + offset_first_page);
		int i;
		for (i = seg_va ; i < end_first_page ; i++, src_ptr++,dst_ptr++ )
f01089a2:	ff 45 cc             	incl   -0x34(%ebp)
f01089a5:	ff 45 d4             	incl   -0x2c(%ebp)
f01089a8:	ff 45 d0             	incl   -0x30(%ebp)
f01089ab:	8b 45 cc             	mov    -0x34(%ebp),%eax
f01089ae:	3b 85 7c ff ff ff    	cmp    -0x84(%ebp),%eax
f01089b4:	72 e2                	jb     f0108998 <env_create+0x326>
		{
			*dst_ptr = *src_ptr ;
		}

		if (pf_add_env_page(e, start_first_page, ptr_temp_page) == E_NO_PAGE_FILE_SPACE)
f01089b6:	8b 15 c0 0e 6c f0    	mov    0xf06c0ec0,%edx
f01089bc:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f01089c2:	83 ec 04             	sub    $0x4,%esp
f01089c5:	52                   	push   %edx
f01089c6:	ff 75 88             	pushl  -0x78(%ebp)
f01089c9:	50                   	push   %eax
f01089ca:	e8 4d ab ff ff       	call   f010351c <pf_add_env_page>
f01089cf:	83 c4 10             	add    $0x10,%esp
f01089d2:	83 f8 f8             	cmp    $0xfffffff8,%eax
f01089d5:	75 17                	jne    f01089ee <env_create+0x37c>
			panic("ERROR: Page File OUT OF SPACE. can't load the program in Page file!!");
f01089d7:	83 ec 04             	sub    $0x4,%esp
f01089da:	68 b0 5c 13 f0       	push   $0xf0135cb0
f01089df:	68 e1 00 00 00       	push   $0xe1
f01089e4:	68 93 5c 13 f0       	push   $0xf0135c93
f01089e9:	e8 b8 77 ff ff       	call   f01001a6 <_panic>
		//LOG_STRING(" -------------------- PAGE FILE: 1st page is written");


		///[2] Start writing the segment ,from 2nd page until before last page, to page file ...

		uint32 start_last_page = ROUNDDOWN(seg_va  + seg->size_in_file, PAGE_SIZE) ;
f01089ee:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01089f1:	8b 50 04             	mov    0x4(%eax),%edx
f01089f4:	8b 45 90             	mov    -0x70(%ebp),%eax
f01089f7:	01 d0                	add    %edx,%eax
f01089f9:	89 85 74 ff ff ff    	mov    %eax,-0x8c(%ebp)
f01089ff:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f0108a05:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0108a0a:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
		uint32 end_last_page = seg_va  + seg->size_in_file;
f0108a10:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0108a13:	8b 50 04             	mov    0x4(%eax),%edx
f0108a16:	8b 45 90             	mov    -0x70(%ebp),%eax
f0108a19:	01 d0                	add    %edx,%eax
f0108a1b:	89 85 6c ff ff ff    	mov    %eax,-0x94(%ebp)

		for (i = end_first_page ; i < start_last_page ; i+= PAGE_SIZE, src_ptr+= PAGE_SIZE)
f0108a21:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f0108a27:	89 45 cc             	mov    %eax,-0x34(%ebp)
f0108a2a:	eb 43                	jmp    f0108a6f <env_create+0x3fd>
		{
			if (pf_add_env_page(e, i, src_ptr) == E_NO_PAGE_FILE_SPACE)
f0108a2c:	8b 55 cc             	mov    -0x34(%ebp),%edx
f0108a2f:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0108a35:	83 ec 04             	sub    $0x4,%esp
f0108a38:	ff 75 d4             	pushl  -0x2c(%ebp)
f0108a3b:	52                   	push   %edx
f0108a3c:	50                   	push   %eax
f0108a3d:	e8 da aa ff ff       	call   f010351c <pf_add_env_page>
f0108a42:	83 c4 10             	add    $0x10,%esp
f0108a45:	83 f8 f8             	cmp    $0xfffffff8,%eax
f0108a48:	75 17                	jne    f0108a61 <env_create+0x3ef>
				panic("ERROR: Page File OUT OF SPACE. can't load the program in Page file!!");
f0108a4a:	83 ec 04             	sub    $0x4,%esp
f0108a4d:	68 b0 5c 13 f0       	push   $0xf0135cb0
f0108a52:	68 ee 00 00 00       	push   $0xee
f0108a57:	68 93 5c 13 f0       	push   $0xf0135c93
f0108a5c:	e8 45 77 ff ff       	call   f01001a6 <_panic>
		///[2] Start writing the segment ,from 2nd page until before last page, to page file ...

		uint32 start_last_page = ROUNDDOWN(seg_va  + seg->size_in_file, PAGE_SIZE) ;
		uint32 end_last_page = seg_va  + seg->size_in_file;

		for (i = end_first_page ; i < start_last_page ; i+= PAGE_SIZE, src_ptr+= PAGE_SIZE)
f0108a61:	81 45 cc 00 10 00 00 	addl   $0x1000,-0x34(%ebp)
f0108a68:	81 45 d4 00 10 00 00 	addl   $0x1000,-0x2c(%ebp)
f0108a6f:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0108a72:	3b 85 70 ff ff ff    	cmp    -0x90(%ebp),%eax
f0108a78:	72 b2                	jb     f0108a2c <env_create+0x3ba>
		}
		//LOG_STRING(" -------------------- PAGE FILE: 2nd page --> before last page are written");

		///[3] temporary initialize last page in memory then writing it on page file

		dst_ptr =  (uint8*) ptr_temp_page;
f0108a7a:	a1 c0 0e 6c f0       	mov    0xf06c0ec0,%eax
f0108a7f:	89 45 d0             	mov    %eax,-0x30(%ebp)
		memset(dst_ptr, 0, PAGE_SIZE);
f0108a82:	83 ec 04             	sub    $0x4,%esp
f0108a85:	68 00 10 00 00       	push   $0x1000
f0108a8a:	6a 00                	push   $0x0
f0108a8c:	ff 75 d0             	pushl  -0x30(%ebp)
f0108a8f:	e8 85 7e 02 00       	call   f0130919 <memset>
f0108a94:	83 c4 10             	add    $0x10,%esp

		for (i = start_last_page ; i < end_last_page ; i++, src_ptr++,dst_ptr++ )
f0108a97:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f0108a9d:	89 45 cc             	mov    %eax,-0x34(%ebp)
f0108aa0:	eb 13                	jmp    f0108ab5 <env_create+0x443>
		{
			*dst_ptr = *src_ptr;
f0108aa2:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0108aa5:	8a 10                	mov    (%eax),%dl
f0108aa7:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0108aaa:	88 10                	mov    %dl,(%eax)
		///[3] temporary initialize last page in memory then writing it on page file

		dst_ptr =  (uint8*) ptr_temp_page;
		memset(dst_ptr, 0, PAGE_SIZE);

		for (i = start_last_page ; i < end_last_page ; i++, src_ptr++,dst_ptr++ )
f0108aac:	ff 45 cc             	incl   -0x34(%ebp)
f0108aaf:	ff 45 d4             	incl   -0x2c(%ebp)
f0108ab2:	ff 45 d0             	incl   -0x30(%ebp)
f0108ab5:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0108ab8:	3b 85 6c ff ff ff    	cmp    -0x94(%ebp),%eax
f0108abe:	72 e2                	jb     f0108aa2 <env_create+0x430>
		{
			*dst_ptr = *src_ptr;
		}
		if (pf_add_env_page(e, start_last_page, ptr_temp_page) == E_NO_PAGE_FILE_SPACE)
f0108ac0:	8b 15 c0 0e 6c f0    	mov    0xf06c0ec0,%edx
f0108ac6:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0108acc:	83 ec 04             	sub    $0x4,%esp
f0108acf:	52                   	push   %edx
f0108ad0:	ff b5 70 ff ff ff    	pushl  -0x90(%ebp)
f0108ad6:	50                   	push   %eax
f0108ad7:	e8 40 aa ff ff       	call   f010351c <pf_add_env_page>
f0108adc:	83 c4 10             	add    $0x10,%esp
f0108adf:	83 f8 f8             	cmp    $0xfffffff8,%eax
f0108ae2:	75 17                	jne    f0108afb <env_create+0x489>
			panic("ERROR: Page File OUT OF SPACE. can't load the program in Page file!!");
f0108ae4:	83 ec 04             	sub    $0x4,%esp
f0108ae7:	68 b0 5c 13 f0       	push   $0xf0135cb0
f0108aec:	68 fd 00 00 00       	push   $0xfd
f0108af1:	68 93 5c 13 f0       	push   $0xf0135c93
f0108af6:	e8 ab 76 ff ff       	call   f01001a6 <_panic>

		//LOG_STRING(" -------------------- PAGE FILE: last page is written");

		///[4] writing the remaining seg->size_in_memory pages to disk

		uint32 start_remaining_area = ROUNDUP(seg_va + seg->size_in_file,PAGE_SIZE) ;
f0108afb:	c7 85 68 ff ff ff 00 	movl   $0x1000,-0x98(%ebp)
f0108b02:	10 00 00 
f0108b05:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0108b08:	8b 50 04             	mov    0x4(%eax),%edx
f0108b0b:	8b 45 90             	mov    -0x70(%ebp),%eax
f0108b0e:	01 c2                	add    %eax,%edx
f0108b10:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f0108b16:	01 d0                	add    %edx,%eax
f0108b18:	48                   	dec    %eax
f0108b19:	89 85 64 ff ff ff    	mov    %eax,-0x9c(%ebp)
f0108b1f:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f0108b25:	ba 00 00 00 00       	mov    $0x0,%edx
f0108b2a:	f7 b5 68 ff ff ff    	divl   -0x98(%ebp)
f0108b30:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f0108b36:	29 d0                	sub    %edx,%eax
f0108b38:	89 45 c8             	mov    %eax,-0x38(%ebp)
		uint32 remainingLength = (seg_va + seg->size_in_memory) - start_remaining_area ;
f0108b3b:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0108b3e:	8b 50 08             	mov    0x8(%eax),%edx
f0108b41:	8b 45 90             	mov    -0x70(%ebp),%eax
f0108b44:	01 d0                	add    %edx,%eax
f0108b46:	2b 45 c8             	sub    -0x38(%ebp),%eax
f0108b49:	89 85 60 ff ff ff    	mov    %eax,-0xa0(%ebp)

		for (i=0 ; i < ROUNDUP(remainingLength,PAGE_SIZE) ;i+= PAGE_SIZE, start_remaining_area += PAGE_SIZE)
f0108b4f:	c7 45 cc 00 00 00 00 	movl   $0x0,-0x34(%ebp)
f0108b56:	eb 41                	jmp    f0108b99 <env_create+0x527>
		{
			if (pf_add_empty_env_page(e, start_remaining_area, 1) == E_NO_PAGE_FILE_SPACE)
f0108b58:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0108b5e:	83 ec 04             	sub    $0x4,%esp
f0108b61:	6a 01                	push   $0x1
f0108b63:	ff 75 c8             	pushl  -0x38(%ebp)
f0108b66:	50                   	push   %eax
f0108b67:	e8 7f a8 ff ff       	call   f01033eb <pf_add_empty_env_page>
f0108b6c:	83 c4 10             	add    $0x10,%esp
f0108b6f:	83 f8 f8             	cmp    $0xfffffff8,%eax
f0108b72:	75 17                	jne    f0108b8b <env_create+0x519>
				panic("ERROR: Page File OUT OF SPACE. can't load the program in Page file!!");
f0108b74:	83 ec 04             	sub    $0x4,%esp
f0108b77:	68 b0 5c 13 f0       	push   $0xf0135cb0
f0108b7c:	68 0a 01 00 00       	push   $0x10a
f0108b81:	68 93 5c 13 f0       	push   $0xf0135c93
f0108b86:	e8 1b 76 ff ff       	call   f01001a6 <_panic>
		///[4] writing the remaining seg->size_in_memory pages to disk

		uint32 start_remaining_area = ROUNDUP(seg_va + seg->size_in_file,PAGE_SIZE) ;
		uint32 remainingLength = (seg_va + seg->size_in_memory) - start_remaining_area ;

		for (i=0 ; i < ROUNDUP(remainingLength,PAGE_SIZE) ;i+= PAGE_SIZE, start_remaining_area += PAGE_SIZE)
f0108b8b:	81 45 cc 00 10 00 00 	addl   $0x1000,-0x34(%ebp)
f0108b92:	81 45 c8 00 10 00 00 	addl   $0x1000,-0x38(%ebp)
f0108b99:	c7 85 5c ff ff ff 00 	movl   $0x1000,-0xa4(%ebp)
f0108ba0:	10 00 00 
f0108ba3:	8b 95 60 ff ff ff    	mov    -0xa0(%ebp),%edx
f0108ba9:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f0108baf:	01 d0                	add    %edx,%eax
f0108bb1:	48                   	dec    %eax
f0108bb2:	89 85 58 ff ff ff    	mov    %eax,-0xa8(%ebp)
f0108bb8:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f0108bbe:	ba 00 00 00 00       	mov    $0x0,%edx
f0108bc3:	f7 b5 5c ff ff ff    	divl   -0xa4(%ebp)
f0108bc9:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f0108bcf:	29 d0                	sub    %edx,%eax
f0108bd1:	89 c2                	mov    %eax,%edx
f0108bd3:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0108bd6:	39 c2                	cmp    %eax,%edx
f0108bd8:	0f 87 7a ff ff ff    	ja     f0108b58 <env_create+0x4e6>
	struct ProgramSegment* seg = NULL;  //use inside PROGRAM_SEGMENT_FOREACH as current segment information
	int segment_counter=0;
	uint32 remaining_ws_pages = (e->page_WS_max_size)-1; // we are reserving 1 page of WS for the stack that will be allocated just before the end of this function
	uint32 lastTableNumber=0xffffffff;

	PROGRAM_SEGMENT_FOREACH(seg, ptr_program_start)
f0108bde:	83 ec 08             	sub    $0x8,%esp
f0108be1:	ff 75 b8             	pushl  -0x48(%ebp)
f0108be4:	ff 75 e4             	pushl  -0x1c(%ebp)
f0108be7:	e8 96 19 00 00       	call   f010a582 <PROGRAM_SEGMENT_NEXT>
f0108bec:	83 c4 10             	add    $0x10,%esp
f0108bef:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f0108bf2:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f0108bf6:	0f 85 d2 fc ff ff    	jne    f01088ce <env_create+0x25c>
		}
		//LOG_STRING(" -------------------- PAGE FILE: segment remaining area is written (the zeros) ");
	}

	/// set the modified bit of each page in the ptr_pageWorkingSet to 0
	int i=0;
f0108bfc:	c7 45 c4 00 00 00 00 	movl   $0x0,-0x3c(%ebp)
	for(;i<(e->page_WS_max_size); i++)
f0108c03:	e9 9c 00 00 00       	jmp    f0108ca4 <env_create+0x632>
	{
		if(e->ptr_pageWorkingSet[i].empty == 0)
f0108c08:	8b 8d 44 ff ff ff    	mov    -0xbc(%ebp),%ecx
f0108c0e:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0108c11:	89 d0                	mov    %edx,%eax
f0108c13:	01 c0                	add    %eax,%eax
f0108c15:	01 d0                	add    %edx,%eax
f0108c17:	c1 e0 03             	shl    $0x3,%eax
f0108c1a:	01 c8                	add    %ecx,%eax
f0108c1c:	83 c0 7c             	add    $0x7c,%eax
f0108c1f:	8a 00                	mov    (%eax),%al
f0108c21:	84 c0                	test   %al,%al
f0108c23:	75 7c                	jne    f0108ca1 <env_create+0x62f>
		{
			uint32 virtual_address = e->ptr_pageWorkingSet[i].virtual_address;
f0108c25:	8b 8d 44 ff ff ff    	mov    -0xbc(%ebp),%ecx
f0108c2b:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0108c2e:	89 d0                	mov    %edx,%eax
f0108c30:	01 c0                	add    %eax,%eax
f0108c32:	01 d0                	add    %edx,%eax
f0108c34:	c1 e0 03             	shl    $0x3,%eax
f0108c37:	01 c8                	add    %ecx,%eax
f0108c39:	83 c0 78             	add    $0x78,%eax
f0108c3c:	8b 00                	mov    (%eax),%eax
f0108c3e:	89 85 54 ff ff ff    	mov    %eax,-0xac(%ebp)
			uint32* ptr_page_table;

			//Here, page tables of all working set pages should be exist in memory
			//So, get_page_table should return the existing table
			get_page_table(e->env_page_directory, virtual_address, &ptr_page_table);
f0108c44:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0108c4a:	8b 40 5c             	mov    0x5c(%eax),%eax
f0108c4d:	83 ec 04             	sub    $0x4,%esp
f0108c50:	8d 95 20 ff ff ff    	lea    -0xe0(%ebp),%edx
f0108c56:	52                   	push   %edx
f0108c57:	ff b5 54 ff ff ff    	pushl  -0xac(%ebp)
f0108c5d:	50                   	push   %eax
f0108c5e:	e8 06 dd ff ff       	call   f0106969 <get_page_table>
f0108c63:	83 c4 10             	add    $0x10,%esp
			ptr_page_table[PTX(virtual_address)] &= (~PERM_MODIFIED);
f0108c66:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0108c6c:	8b 95 54 ff ff ff    	mov    -0xac(%ebp),%edx
f0108c72:	c1 ea 0c             	shr    $0xc,%edx
f0108c75:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0108c7b:	c1 e2 02             	shl    $0x2,%edx
f0108c7e:	01 d0                	add    %edx,%eax
f0108c80:	8b 95 20 ff ff ff    	mov    -0xe0(%ebp),%edx
f0108c86:	8b 8d 54 ff ff ff    	mov    -0xac(%ebp),%ecx
f0108c8c:	c1 e9 0c             	shr    $0xc,%ecx
f0108c8f:	81 e1 ff 03 00 00    	and    $0x3ff,%ecx
f0108c95:	c1 e1 02             	shl    $0x2,%ecx
f0108c98:	01 ca                	add    %ecx,%edx
f0108c9a:	8b 12                	mov    (%edx),%edx
f0108c9c:	83 e2 bf             	and    $0xffffffbf,%edx
f0108c9f:	89 10                	mov    %edx,(%eax)
		//LOG_STRING(" -------------------- PAGE FILE: segment remaining area is written (the zeros) ");
	}

	/// set the modified bit of each page in the ptr_pageWorkingSet to 0
	int i=0;
	for(;i<(e->page_WS_max_size); i++)
f0108ca1:	ff 45 c4             	incl   -0x3c(%ebp)
f0108ca4:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0108caa:	8b 50 74             	mov    0x74(%eax),%edx
f0108cad:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0108cb0:	39 c2                	cmp    %eax,%edx
f0108cb2:	0f 87 50 ff ff ff    	ja     f0108c08 <env_create+0x596>
	//unsigned int * ptr = (unsigned int * )0x801084;
	//LOG_STATMENT(cprintf("contents at address %x=%x",0x801084, *ptr));

	//[8] now set the entry point of the environment
	//Hint: use set_environment_entry_point()
	set_environment_entry_point(e, ptr_user_program_info->ptr_start);
f0108cb8:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0108cbb:	8b 50 08             	mov    0x8(%eax),%edx
f0108cbe:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0108cc4:	83 ec 08             	sub    $0x8,%esp
f0108cc7:	52                   	push   %edx
f0108cc8:	50                   	push   %eax
f0108cc9:	e8 3a 18 00 00       	call   f010a508 <set_environment_entry_point>
f0108cce:	83 c4 10             	add    $0x10,%esp

	//[9] Allocate and map one page for the program's initial stack
	// at virtual address USTACKTOP - PAGE_SIZE.
	// we assume that the stack is counted in the environment working set

	e->initNumStackPages = 1;
f0108cd1:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0108cd7:	c7 80 14 da 01 00 01 	movl   $0x1,0x1da14(%eax)
f0108cde:	00 00 00 

	// map the allocated page
	uint32 ptr_user_stack_bottom = (USTACKTOP - 1*PAGE_SIZE);
f0108ce1:	c7 85 50 ff ff ff 00 	movl   $0xeebfd000,-0xb0(%ebp)
f0108ce8:	d0 bf ee 

	uint32 stackVa = USTACKTOP - PAGE_SIZE;
f0108ceb:	c7 45 c0 00 d0 bf ee 	movl   $0xeebfd000,-0x40(%ebp)
	for(;stackVa >= ptr_user_stack_bottom; stackVa -= PAGE_SIZE)
f0108cf2:	e9 9a 05 00 00       	jmp    f0109291 <env_create+0xc1f>
	{
		struct FrameInfo *pp = NULL;
f0108cf7:	c7 85 1c ff ff ff 00 	movl   $0x0,-0xe4(%ebp)
f0108cfe:	00 00 00 
		allocate_frame(&pp);
f0108d01:	83 ec 0c             	sub    $0xc,%esp
f0108d04:	8d 85 1c ff ff ff    	lea    -0xe4(%ebp),%eax
f0108d0a:	50                   	push   %eax
f0108d0b:	e8 9a da ff ff       	call   f01067aa <allocate_frame>
f0108d10:	83 c4 10             	add    $0x10,%esp

		loadtime_map_frame(e->env_page_directory, pp, stackVa, PERM_USER | PERM_WRITEABLE);
f0108d13:	8b 95 1c ff ff ff    	mov    -0xe4(%ebp),%edx
f0108d19:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0108d1f:	8b 40 5c             	mov    0x5c(%eax),%eax
f0108d22:	6a 06                	push   $0x6
f0108d24:	ff 75 c0             	pushl  -0x40(%ebp)
f0108d27:	52                   	push   %edx
f0108d28:	50                   	push   %eax
f0108d29:	e8 ca df ff ff       	call   f0106cf8 <loadtime_map_frame>
f0108d2e:	83 c4 10             	add    $0x10,%esp

		//initialize new page by 0's
		memset((void*)stackVa, 0, PAGE_SIZE);
f0108d31:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0108d34:	83 ec 04             	sub    $0x4,%esp
f0108d37:	68 00 10 00 00       	push   $0x1000
f0108d3c:	6a 00                	push   $0x0
f0108d3e:	50                   	push   %eax
f0108d3f:	e8 d5 7b 02 00       	call   f0130919 <memset>
f0108d44:	83 c4 10             	add    $0x10,%esp

		//now add it to the working set and the page table
		{
			env_page_ws_set_entry(e, e->page_last_WS_index, (uint32) stackVa) ;
f0108d47:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0108d4d:	8b 90 e8 d9 01 00    	mov    0x1d9e8(%eax),%edx
f0108d53:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0108d59:	83 ec 04             	sub    $0x4,%esp
f0108d5c:	ff 75 c0             	pushl  -0x40(%ebp)
f0108d5f:	52                   	push   %edx
f0108d60:	50                   	push   %eax
f0108d61:	e8 aa ec ff ff       	call   f0107a10 <env_page_ws_set_entry>
f0108d66:	83 c4 10             	add    $0x10,%esp

			//2020
			if(isPageReplacmentAlgorithmLRU(PG_REP_LRU_LISTS_APPROX))
f0108d69:	83 ec 0c             	sub    $0xc,%esp
f0108d6c:	6a 02                	push   $0x2
f0108d6e:	e8 fa 47 00 00       	call   f010d56d <isPageReplacmentAlgorithmLRU>
f0108d73:	83 c4 10             	add    $0x10,%esp
f0108d76:	85 c0                	test   %eax,%eax
f0108d78:	0f 84 b2 04 00 00    	je     f0109230 <env_create+0xbbe>
			{
				LIST_REMOVE(&(e->PageWorkingSetList), &(e->ptr_pageWorkingSet[e->page_last_WS_index]));
f0108d7e:	8b 8d 44 ff ff ff    	mov    -0xbc(%ebp),%ecx
f0108d84:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0108d8a:	8b 90 e8 d9 01 00    	mov    0x1d9e8(%eax),%edx
f0108d90:	89 d0                	mov    %edx,%eax
f0108d92:	01 c0                	add    %eax,%eax
f0108d94:	01 d0                	add    %edx,%eax
f0108d96:	c1 e0 03             	shl    $0x3,%eax
f0108d99:	83 c0 70             	add    $0x70,%eax
f0108d9c:	01 c8                	add    %ecx,%eax
f0108d9e:	83 c0 08             	add    $0x8,%eax
f0108da1:	85 c0                	test   %eax,%eax
f0108da3:	75 17                	jne    f0108dbc <env_create+0x74a>
f0108da5:	83 ec 04             	sub    $0x4,%esp
f0108da8:	68 f5 5c 13 f0       	push   $0xf0135cf5
f0108dad:	68 41 01 00 00       	push   $0x141
f0108db2:	68 93 5c 13 f0       	push   $0xf0135c93
f0108db7:	e8 ea 73 ff ff       	call   f01001a6 <_panic>
f0108dbc:	8b 8d 44 ff ff ff    	mov    -0xbc(%ebp),%ecx
f0108dc2:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0108dc8:	8b 90 e8 d9 01 00    	mov    0x1d9e8(%eax),%edx
f0108dce:	89 d0                	mov    %edx,%eax
f0108dd0:	01 c0                	add    %eax,%eax
f0108dd2:	01 d0                	add    %edx,%eax
f0108dd4:	c1 e0 03             	shl    $0x3,%eax
f0108dd7:	01 c8                	add    %ecx,%eax
f0108dd9:	05 88 00 00 00       	add    $0x88,%eax
f0108dde:	8b 00                	mov    (%eax),%eax
f0108de0:	85 c0                	test   %eax,%eax
f0108de2:	74 4d                	je     f0108e31 <env_create+0x7bf>
f0108de4:	8b 8d 44 ff ff ff    	mov    -0xbc(%ebp),%ecx
f0108dea:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0108df0:	8b 90 e8 d9 01 00    	mov    0x1d9e8(%eax),%edx
f0108df6:	89 d0                	mov    %edx,%eax
f0108df8:	01 c0                	add    %eax,%eax
f0108dfa:	01 d0                	add    %edx,%eax
f0108dfc:	c1 e0 03             	shl    $0x3,%eax
f0108dff:	01 c8                	add    %ecx,%eax
f0108e01:	05 88 00 00 00       	add    $0x88,%eax
f0108e06:	8b 10                	mov    (%eax),%edx
f0108e08:	8b 9d 44 ff ff ff    	mov    -0xbc(%ebp),%ebx
f0108e0e:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0108e14:	8b 88 e8 d9 01 00    	mov    0x1d9e8(%eax),%ecx
f0108e1a:	89 c8                	mov    %ecx,%eax
f0108e1c:	01 c0                	add    %eax,%eax
f0108e1e:	01 c8                	add    %ecx,%eax
f0108e20:	c1 e0 03             	shl    $0x3,%eax
f0108e23:	01 d8                	add    %ebx,%eax
f0108e25:	05 8c 00 00 00       	add    $0x8c,%eax
f0108e2a:	8b 00                	mov    (%eax),%eax
f0108e2c:	89 42 14             	mov    %eax,0x14(%edx)
f0108e2f:	eb 30                	jmp    f0108e61 <env_create+0x7ef>
f0108e31:	8b 95 44 ff ff ff    	mov    -0xbc(%ebp),%edx
f0108e37:	8b 9d 44 ff ff ff    	mov    -0xbc(%ebp),%ebx
f0108e3d:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0108e43:	8b 88 e8 d9 01 00    	mov    0x1d9e8(%eax),%ecx
f0108e49:	89 c8                	mov    %ecx,%eax
f0108e4b:	01 c0                	add    %eax,%eax
f0108e4d:	01 c8                	add    %ecx,%eax
f0108e4f:	c1 e0 03             	shl    $0x3,%eax
f0108e52:	01 d8                	add    %ebx,%eax
f0108e54:	05 8c 00 00 00       	add    $0x8c,%eax
f0108e59:	8b 00                	mov    (%eax),%eax
f0108e5b:	89 82 74 ea 01 00    	mov    %eax,0x1ea74(%edx)
f0108e61:	8b 8d 44 ff ff ff    	mov    -0xbc(%ebp),%ecx
f0108e67:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0108e6d:	8b 90 e8 d9 01 00    	mov    0x1d9e8(%eax),%edx
f0108e73:	89 d0                	mov    %edx,%eax
f0108e75:	01 c0                	add    %eax,%eax
f0108e77:	01 d0                	add    %edx,%eax
f0108e79:	c1 e0 03             	shl    $0x3,%eax
f0108e7c:	01 c8                	add    %ecx,%eax
f0108e7e:	05 8c 00 00 00       	add    $0x8c,%eax
f0108e83:	8b 00                	mov    (%eax),%eax
f0108e85:	85 c0                	test   %eax,%eax
f0108e87:	74 4d                	je     f0108ed6 <env_create+0x864>
f0108e89:	8b 8d 44 ff ff ff    	mov    -0xbc(%ebp),%ecx
f0108e8f:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0108e95:	8b 90 e8 d9 01 00    	mov    0x1d9e8(%eax),%edx
f0108e9b:	89 d0                	mov    %edx,%eax
f0108e9d:	01 c0                	add    %eax,%eax
f0108e9f:	01 d0                	add    %edx,%eax
f0108ea1:	c1 e0 03             	shl    $0x3,%eax
f0108ea4:	01 c8                	add    %ecx,%eax
f0108ea6:	05 8c 00 00 00       	add    $0x8c,%eax
f0108eab:	8b 10                	mov    (%eax),%edx
f0108ead:	8b 9d 44 ff ff ff    	mov    -0xbc(%ebp),%ebx
f0108eb3:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0108eb9:	8b 88 e8 d9 01 00    	mov    0x1d9e8(%eax),%ecx
f0108ebf:	89 c8                	mov    %ecx,%eax
f0108ec1:	01 c0                	add    %eax,%eax
f0108ec3:	01 c8                	add    %ecx,%eax
f0108ec5:	c1 e0 03             	shl    $0x3,%eax
f0108ec8:	01 d8                	add    %ebx,%eax
f0108eca:	05 88 00 00 00       	add    $0x88,%eax
f0108ecf:	8b 00                	mov    (%eax),%eax
f0108ed1:	89 42 10             	mov    %eax,0x10(%edx)
f0108ed4:	eb 30                	jmp    f0108f06 <env_create+0x894>
f0108ed6:	8b 95 44 ff ff ff    	mov    -0xbc(%ebp),%edx
f0108edc:	8b 9d 44 ff ff ff    	mov    -0xbc(%ebp),%ebx
f0108ee2:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0108ee8:	8b 88 e8 d9 01 00    	mov    0x1d9e8(%eax),%ecx
f0108eee:	89 c8                	mov    %ecx,%eax
f0108ef0:	01 c0                	add    %eax,%eax
f0108ef2:	01 c8                	add    %ecx,%eax
f0108ef4:	c1 e0 03             	shl    $0x3,%eax
f0108ef7:	01 d8                	add    %ebx,%eax
f0108ef9:	05 88 00 00 00       	add    $0x88,%eax
f0108efe:	8b 00                	mov    (%eax),%eax
f0108f00:	89 82 70 ea 01 00    	mov    %eax,0x1ea70(%edx)
f0108f06:	8b 8d 44 ff ff ff    	mov    -0xbc(%ebp),%ecx
f0108f0c:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0108f12:	8b 90 e8 d9 01 00    	mov    0x1d9e8(%eax),%edx
f0108f18:	89 d0                	mov    %edx,%eax
f0108f1a:	01 c0                	add    %eax,%eax
f0108f1c:	01 d0                	add    %edx,%eax
f0108f1e:	c1 e0 03             	shl    $0x3,%eax
f0108f21:	01 c8                	add    %ecx,%eax
f0108f23:	05 88 00 00 00       	add    $0x88,%eax
f0108f28:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f0108f2e:	8b 8d 44 ff ff ff    	mov    -0xbc(%ebp),%ecx
f0108f34:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0108f3a:	8b 90 e8 d9 01 00    	mov    0x1d9e8(%eax),%edx
f0108f40:	89 d0                	mov    %edx,%eax
f0108f42:	01 c0                	add    %eax,%eax
f0108f44:	01 d0                	add    %edx,%eax
f0108f46:	c1 e0 03             	shl    $0x3,%eax
f0108f49:	01 c8                	add    %ecx,%eax
f0108f4b:	05 8c 00 00 00       	add    $0x8c,%eax
f0108f50:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f0108f56:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0108f5c:	8b 90 7c ea 01 00    	mov    0x1ea7c(%eax),%edx
f0108f62:	4a                   	dec    %edx
f0108f63:	89 90 7c ea 01 00    	mov    %edx,0x1ea7c(%eax)
				//Now: we are sure that at least the top page in the stack will be added to Active list
				//Since we left 1 empty location in the Active list when we loaded the program segments
				if (LIST_SIZE(&(e->ActiveList)) < e->ActiveListSize)
f0108f69:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0108f6f:	8b 90 8c ea 01 00    	mov    0x1ea8c(%eax),%edx
f0108f75:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0108f7b:	8b 80 a0 ea 01 00    	mov    0x1eaa0(%eax),%eax
f0108f81:	39 c2                	cmp    %eax,%edx
f0108f83:	0f 83 56 01 00 00    	jae    f01090df <env_create+0xa6d>
				{
					LIST_INSERT_HEAD(&(e->ActiveList), &(e->ptr_pageWorkingSet[e->page_last_WS_index]));
f0108f89:	8b 8d 44 ff ff ff    	mov    -0xbc(%ebp),%ecx
f0108f8f:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0108f95:	8b 90 e8 d9 01 00    	mov    0x1d9e8(%eax),%edx
f0108f9b:	89 d0                	mov    %edx,%eax
f0108f9d:	01 c0                	add    %eax,%eax
f0108f9f:	01 d0                	add    %edx,%eax
f0108fa1:	c1 e0 03             	shl    $0x3,%eax
f0108fa4:	83 c0 70             	add    $0x70,%eax
f0108fa7:	01 c8                	add    %ecx,%eax
f0108fa9:	83 c0 08             	add    $0x8,%eax
f0108fac:	85 c0                	test   %eax,%eax
f0108fae:	75 17                	jne    f0108fc7 <env_create+0x955>
f0108fb0:	83 ec 04             	sub    $0x4,%esp
f0108fb3:	68 14 5d 13 f0       	push   $0xf0135d14
f0108fb8:	68 46 01 00 00       	push   $0x146
f0108fbd:	68 93 5c 13 f0       	push   $0xf0135c93
f0108fc2:	e8 df 71 ff ff       	call   f01001a6 <_panic>
f0108fc7:	8b 8d 44 ff ff ff    	mov    -0xbc(%ebp),%ecx
f0108fcd:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0108fd3:	8b 90 e8 d9 01 00    	mov    0x1d9e8(%eax),%edx
f0108fd9:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0108fdf:	8b 98 80 ea 01 00    	mov    0x1ea80(%eax),%ebx
f0108fe5:	89 d0                	mov    %edx,%eax
f0108fe7:	01 c0                	add    %eax,%eax
f0108fe9:	01 d0                	add    %edx,%eax
f0108feb:	c1 e0 03             	shl    $0x3,%eax
f0108fee:	01 c8                	add    %ecx,%eax
f0108ff0:	05 88 00 00 00       	add    $0x88,%eax
f0108ff5:	89 18                	mov    %ebx,(%eax)
f0108ff7:	89 d0                	mov    %edx,%eax
f0108ff9:	01 c0                	add    %eax,%eax
f0108ffb:	01 d0                	add    %edx,%eax
f0108ffd:	c1 e0 03             	shl    $0x3,%eax
f0109000:	01 c8                	add    %ecx,%eax
f0109002:	05 88 00 00 00       	add    $0x88,%eax
f0109007:	8b 00                	mov    (%eax),%eax
f0109009:	85 c0                	test   %eax,%eax
f010900b:	74 34                	je     f0109041 <env_create+0x9cf>
f010900d:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0109013:	8b 90 80 ea 01 00    	mov    0x1ea80(%eax),%edx
f0109019:	8b 9d 44 ff ff ff    	mov    -0xbc(%ebp),%ebx
f010901f:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0109025:	8b 88 e8 d9 01 00    	mov    0x1d9e8(%eax),%ecx
f010902b:	89 c8                	mov    %ecx,%eax
f010902d:	01 c0                	add    %eax,%eax
f010902f:	01 c8                	add    %ecx,%eax
f0109031:	c1 e0 03             	shl    $0x3,%eax
f0109034:	83 c0 70             	add    $0x70,%eax
f0109037:	01 d8                	add    %ebx,%eax
f0109039:	83 c0 08             	add    $0x8,%eax
f010903c:	89 42 14             	mov    %eax,0x14(%edx)
f010903f:	eb 2f                	jmp    f0109070 <env_create+0x9fe>
f0109041:	8b 95 44 ff ff ff    	mov    -0xbc(%ebp),%edx
f0109047:	8b 9d 44 ff ff ff    	mov    -0xbc(%ebp),%ebx
f010904d:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0109053:	8b 88 e8 d9 01 00    	mov    0x1d9e8(%eax),%ecx
f0109059:	89 c8                	mov    %ecx,%eax
f010905b:	01 c0                	add    %eax,%eax
f010905d:	01 c8                	add    %ecx,%eax
f010905f:	c1 e0 03             	shl    $0x3,%eax
f0109062:	83 c0 70             	add    $0x70,%eax
f0109065:	01 d8                	add    %ebx,%eax
f0109067:	83 c0 08             	add    $0x8,%eax
f010906a:	89 82 84 ea 01 00    	mov    %eax,0x1ea84(%edx)
f0109070:	8b 95 44 ff ff ff    	mov    -0xbc(%ebp),%edx
f0109076:	8b 9d 44 ff ff ff    	mov    -0xbc(%ebp),%ebx
f010907c:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0109082:	8b 88 e8 d9 01 00    	mov    0x1d9e8(%eax),%ecx
f0109088:	89 c8                	mov    %ecx,%eax
f010908a:	01 c0                	add    %eax,%eax
f010908c:	01 c8                	add    %ecx,%eax
f010908e:	c1 e0 03             	shl    $0x3,%eax
f0109091:	83 c0 70             	add    $0x70,%eax
f0109094:	01 d8                	add    %ebx,%eax
f0109096:	83 c0 08             	add    $0x8,%eax
f0109099:	89 82 80 ea 01 00    	mov    %eax,0x1ea80(%edx)
f010909f:	8b 8d 44 ff ff ff    	mov    -0xbc(%ebp),%ecx
f01090a5:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f01090ab:	8b 90 e8 d9 01 00    	mov    0x1d9e8(%eax),%edx
f01090b1:	89 d0                	mov    %edx,%eax
f01090b3:	01 c0                	add    %eax,%eax
f01090b5:	01 d0                	add    %edx,%eax
f01090b7:	c1 e0 03             	shl    $0x3,%eax
f01090ba:	01 c8                	add    %ecx,%eax
f01090bc:	05 8c 00 00 00       	add    $0x8c,%eax
f01090c1:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f01090c7:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f01090cd:	8b 90 8c ea 01 00    	mov    0x1ea8c(%eax),%edx
f01090d3:	42                   	inc    %edx
f01090d4:	89 90 8c ea 01 00    	mov    %edx,0x1ea8c(%eax)
f01090da:	e9 51 01 00 00       	jmp    f0109230 <env_create+0xbbe>
				}
				else
				{
					LIST_INSERT_HEAD(&(e->SecondList), &(e->ptr_pageWorkingSet[e->page_last_WS_index]));
f01090df:	8b 8d 44 ff ff ff    	mov    -0xbc(%ebp),%ecx
f01090e5:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f01090eb:	8b 90 e8 d9 01 00    	mov    0x1d9e8(%eax),%edx
f01090f1:	89 d0                	mov    %edx,%eax
f01090f3:	01 c0                	add    %eax,%eax
f01090f5:	01 d0                	add    %edx,%eax
f01090f7:	c1 e0 03             	shl    $0x3,%eax
f01090fa:	83 c0 70             	add    $0x70,%eax
f01090fd:	01 c8                	add    %ecx,%eax
f01090ff:	83 c0 08             	add    $0x8,%eax
f0109102:	85 c0                	test   %eax,%eax
f0109104:	75 17                	jne    f010911d <env_create+0xaab>
f0109106:	83 ec 04             	sub    $0x4,%esp
f0109109:	68 14 5d 13 f0       	push   $0xf0135d14
f010910e:	68 4a 01 00 00       	push   $0x14a
f0109113:	68 93 5c 13 f0       	push   $0xf0135c93
f0109118:	e8 89 70 ff ff       	call   f01001a6 <_panic>
f010911d:	8b 8d 44 ff ff ff    	mov    -0xbc(%ebp),%ecx
f0109123:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0109129:	8b 90 e8 d9 01 00    	mov    0x1d9e8(%eax),%edx
f010912f:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0109135:	8b 98 90 ea 01 00    	mov    0x1ea90(%eax),%ebx
f010913b:	89 d0                	mov    %edx,%eax
f010913d:	01 c0                	add    %eax,%eax
f010913f:	01 d0                	add    %edx,%eax
f0109141:	c1 e0 03             	shl    $0x3,%eax
f0109144:	01 c8                	add    %ecx,%eax
f0109146:	05 88 00 00 00       	add    $0x88,%eax
f010914b:	89 18                	mov    %ebx,(%eax)
f010914d:	89 d0                	mov    %edx,%eax
f010914f:	01 c0                	add    %eax,%eax
f0109151:	01 d0                	add    %edx,%eax
f0109153:	c1 e0 03             	shl    $0x3,%eax
f0109156:	01 c8                	add    %ecx,%eax
f0109158:	05 88 00 00 00       	add    $0x88,%eax
f010915d:	8b 00                	mov    (%eax),%eax
f010915f:	85 c0                	test   %eax,%eax
f0109161:	74 34                	je     f0109197 <env_create+0xb25>
f0109163:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0109169:	8b 90 90 ea 01 00    	mov    0x1ea90(%eax),%edx
f010916f:	8b 9d 44 ff ff ff    	mov    -0xbc(%ebp),%ebx
f0109175:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f010917b:	8b 88 e8 d9 01 00    	mov    0x1d9e8(%eax),%ecx
f0109181:	89 c8                	mov    %ecx,%eax
f0109183:	01 c0                	add    %eax,%eax
f0109185:	01 c8                	add    %ecx,%eax
f0109187:	c1 e0 03             	shl    $0x3,%eax
f010918a:	83 c0 70             	add    $0x70,%eax
f010918d:	01 d8                	add    %ebx,%eax
f010918f:	83 c0 08             	add    $0x8,%eax
f0109192:	89 42 14             	mov    %eax,0x14(%edx)
f0109195:	eb 2f                	jmp    f01091c6 <env_create+0xb54>
f0109197:	8b 95 44 ff ff ff    	mov    -0xbc(%ebp),%edx
f010919d:	8b 9d 44 ff ff ff    	mov    -0xbc(%ebp),%ebx
f01091a3:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f01091a9:	8b 88 e8 d9 01 00    	mov    0x1d9e8(%eax),%ecx
f01091af:	89 c8                	mov    %ecx,%eax
f01091b1:	01 c0                	add    %eax,%eax
f01091b3:	01 c8                	add    %ecx,%eax
f01091b5:	c1 e0 03             	shl    $0x3,%eax
f01091b8:	83 c0 70             	add    $0x70,%eax
f01091bb:	01 d8                	add    %ebx,%eax
f01091bd:	83 c0 08             	add    $0x8,%eax
f01091c0:	89 82 94 ea 01 00    	mov    %eax,0x1ea94(%edx)
f01091c6:	8b 95 44 ff ff ff    	mov    -0xbc(%ebp),%edx
f01091cc:	8b 9d 44 ff ff ff    	mov    -0xbc(%ebp),%ebx
f01091d2:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f01091d8:	8b 88 e8 d9 01 00    	mov    0x1d9e8(%eax),%ecx
f01091de:	89 c8                	mov    %ecx,%eax
f01091e0:	01 c0                	add    %eax,%eax
f01091e2:	01 c8                	add    %ecx,%eax
f01091e4:	c1 e0 03             	shl    $0x3,%eax
f01091e7:	83 c0 70             	add    $0x70,%eax
f01091ea:	01 d8                	add    %ebx,%eax
f01091ec:	83 c0 08             	add    $0x8,%eax
f01091ef:	89 82 90 ea 01 00    	mov    %eax,0x1ea90(%edx)
f01091f5:	8b 8d 44 ff ff ff    	mov    -0xbc(%ebp),%ecx
f01091fb:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0109201:	8b 90 e8 d9 01 00    	mov    0x1d9e8(%eax),%edx
f0109207:	89 d0                	mov    %edx,%eax
f0109209:	01 c0                	add    %eax,%eax
f010920b:	01 d0                	add    %edx,%eax
f010920d:	c1 e0 03             	shl    $0x3,%eax
f0109210:	01 c8                	add    %ecx,%eax
f0109212:	05 8c 00 00 00       	add    $0x8c,%eax
f0109217:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f010921d:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0109223:	8b 90 9c ea 01 00    	mov    0x1ea9c(%eax),%edx
f0109229:	42                   	inc    %edx
f010922a:	89 90 9c ea 01 00    	mov    %edx,0x1ea9c(%eax)
				}
			}
			e->page_last_WS_index ++;
f0109230:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0109236:	8b 90 e8 d9 01 00    	mov    0x1d9e8(%eax),%edx
f010923c:	42                   	inc    %edx
f010923d:	89 90 e8 d9 01 00    	mov    %edx,0x1d9e8(%eax)
			e->page_last_WS_index %= (e->page_WS_max_size);
f0109243:	8b 8d 44 ff ff ff    	mov    -0xbc(%ebp),%ecx
f0109249:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f010924f:	8b 80 e8 d9 01 00    	mov    0x1d9e8(%eax),%eax
f0109255:	8b 95 44 ff ff ff    	mov    -0xbc(%ebp),%edx
f010925b:	8b 5a 74             	mov    0x74(%edx),%ebx
f010925e:	ba 00 00 00 00       	mov    $0x0,%edx
f0109263:	f7 f3                	div    %ebx
f0109265:	89 d0                	mov    %edx,%eax
f0109267:	89 81 e8 d9 01 00    	mov    %eax,0x1d9e8(%ecx)

			//addTableToTableWorkingSet(e, ROUNDDOWN((uint32)stackVa, PAGE_SIZE*1024));

			int success = pf_add_empty_env_page(e, (uint32)stackVa, 1);
f010926d:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0109273:	83 ec 04             	sub    $0x4,%esp
f0109276:	6a 01                	push   $0x1
f0109278:	ff 75 c0             	pushl  -0x40(%ebp)
f010927b:	50                   	push   %eax
f010927c:	e8 6a a1 ff ff       	call   f01033eb <pf_add_empty_env_page>
f0109281:	83 c4 10             	add    $0x10,%esp
f0109284:	89 85 4c ff ff ff    	mov    %eax,-0xb4(%ebp)

	// map the allocated page
	uint32 ptr_user_stack_bottom = (USTACKTOP - 1*PAGE_SIZE);

	uint32 stackVa = USTACKTOP - PAGE_SIZE;
	for(;stackVa >= ptr_user_stack_bottom; stackVa -= PAGE_SIZE)
f010928a:	81 6d c0 00 10 00 00 	subl   $0x1000,-0x40(%ebp)
f0109291:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0109294:	3b 85 50 ff ff ff    	cmp    -0xb0(%ebp),%eax
f010929a:	0f 83 57 fa ff ff    	jae    f0108cf7 <env_create+0x685>

	}

	//2020
	//LRU Lists: Reset PRESENT bit of all pages in Second List
	if (isPageReplacmentAlgorithmLRU(PG_REP_LRU_LISTS_APPROX))
f01092a0:	83 ec 0c             	sub    $0xc,%esp
f01092a3:	6a 02                	push   $0x2
f01092a5:	e8 c3 42 00 00       	call   f010d56d <isPageReplacmentAlgorithmLRU>
f01092aa:	83 c4 10             	add    $0x10,%esp
f01092ad:	85 c0                	test   %eax,%eax
f01092af:	74 72                	je     f0109323 <env_create+0xcb1>
	{
		struct WorkingSetElement * elm = NULL;
f01092b1:	c7 45 bc 00 00 00 00 	movl   $0x0,-0x44(%ebp)
		LIST_FOREACH(elm, &(e->SecondList))
f01092b8:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f01092be:	8b 80 90 ea 01 00    	mov    0x1ea90(%eax),%eax
f01092c4:	89 45 bc             	mov    %eax,-0x44(%ebp)
f01092c7:	eb 2b                	jmp    f01092f4 <env_create+0xc82>
		{
			//set it's PRESENT bit to 0
			pt_set_page_permissions(e->env_page_directory, elm->virtual_address, 0, PERM_PRESENT);
f01092c9:	8b 45 bc             	mov    -0x44(%ebp),%eax
f01092cc:	8b 10                	mov    (%eax),%edx
f01092ce:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f01092d4:	8b 40 5c             	mov    0x5c(%eax),%eax
f01092d7:	6a 01                	push   $0x1
f01092d9:	6a 00                	push   $0x0
f01092db:	52                   	push   %edx
f01092dc:	50                   	push   %eax
f01092dd:	e8 12 e4 ff ff       	call   f01076f4 <pt_set_page_permissions>
f01092e2:	83 c4 10             	add    $0x10,%esp
	//2020
	//LRU Lists: Reset PRESENT bit of all pages in Second List
	if (isPageReplacmentAlgorithmLRU(PG_REP_LRU_LISTS_APPROX))
	{
		struct WorkingSetElement * elm = NULL;
		LIST_FOREACH(elm, &(e->SecondList))
f01092e5:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f01092eb:	8b 80 98 ea 01 00    	mov    0x1ea98(%eax),%eax
f01092f1:	89 45 bc             	mov    %eax,-0x44(%ebp)
f01092f4:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f01092fa:	83 7d bc 00          	cmpl   $0x0,-0x44(%ebp)
f01092fe:	74 08                	je     f0109308 <env_create+0xc96>
f0109300:	8b 55 bc             	mov    -0x44(%ebp),%edx
f0109303:	8b 52 10             	mov    0x10(%edx),%edx
f0109306:	eb 05                	jmp    f010930d <env_create+0xc9b>
f0109308:	ba 00 00 00 00       	mov    $0x0,%edx
f010930d:	89 90 98 ea 01 00    	mov    %edx,0x1ea98(%eax)
f0109313:	8b 80 98 ea 01 00    	mov    0x1ea98(%eax),%eax
f0109319:	85 c0                	test   %eax,%eax
f010931b:	75 ac                	jne    f01092c9 <env_create+0xc57>
f010931d:	83 7d bc 00          	cmpl   $0x0,-0x44(%ebp)
f0109321:	75 a6                	jne    f01092c9 <env_create+0xc57>
f0109323:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0109326:	89 45 a0             	mov    %eax,-0x60(%ebp)
f0109329:	8b 45 a0             	mov    -0x60(%ebp),%eax
f010932c:	0f 22 d8             	mov    %eax,%cr3
	lcr3(kern_phys_pgdir) ;

	//[11] 2012, add the new env we have just created to the scheduler NEW queue
	//	   2015: moved to the scheduler! since env_create() is responsible for creating the env only

	return e;
f010932f:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
}
f0109335:	8d 65 f4             	lea    -0xc(%ebp),%esp
f0109338:	5b                   	pop    %ebx
f0109339:	5e                   	pop    %esi
f010933a:	5f                   	pop    %edi
f010933b:	5d                   	pop    %ebp
f010933c:	c3                   	ret    

f010933d <env_run>:
// Used to run the given environment "e", simply by
// context switch from curenv to env e.
//  (This function does not return.)
//
void env_run(struct Env *e)
{
f010933d:	55                   	push   %ebp
f010933e:	89 e5                	mov    %esp,%ebp
f0109340:	83 ec 18             	sub    $0x18,%esp
	if(curenv != e)
f0109343:	a1 14 82 65 f0       	mov    0xf0658214,%eax
f0109348:	3b 45 08             	cmp    0x8(%ebp),%eax
f010934b:	74 25                	je     f0109372 <env_run+0x35>
	{
		curenv = e ;
f010934d:	8b 45 08             	mov    0x8(%ebp),%eax
f0109350:	a3 14 82 65 f0       	mov    %eax,0xf0658214
		curenv->env_runs++ ;
f0109355:	a1 14 82 65 f0       	mov    0xf0658214,%eax
f010935a:	8b 50 58             	mov    0x58(%eax),%edx
f010935d:	42                   	inc    %edx
f010935e:	89 50 58             	mov    %edx,0x58(%eax)
		lcr3(curenv->env_cr3) ;
f0109361:	a1 14 82 65 f0       	mov    0xf0658214,%eax
f0109366:	8b 40 60             	mov    0x60(%eax),%eax
f0109369:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010936c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010936f:	0f 22 d8             	mov    %eax,%cr3
	}
	curenv->env_status = ENV_RUNNABLE;
f0109372:	a1 14 82 65 f0       	mov    0xf0658214,%eax
f0109377:	c7 40 54 02 00 00 00 	movl   $0x2,0x54(%eax)
	//uint16 cnt0 = kclock_read_cnt0();
	//cprintf("env_run %s [%d]: Cnt BEFORE RESUME = %d\n", curenv->prog_name,curenv->env_id, cnt0);
	//kclock_start();

	kclock_resume();
f010937e:	e8 56 ad ff ff       	call   f01040d9 <kclock_resume>

	//cprintf("env_run %s [%d]: Cnt AFTER RESUME = %d\n", curenv->prog_name,curenv->env_id, cnt0);
	env_pop_tf(&(curenv->env_tf));
f0109383:	a1 14 82 65 f0       	mov    0xf0658214,%eax
f0109388:	83 ec 0c             	sub    $0xc,%esp
f010938b:	50                   	push   %eax
f010938c:	e8 11 01 00 00       	call   f01094a2 <env_pop_tf>

f0109391 <env_free>:
// 3) FREE ENV FROM THE SYSTEM:
//===============================
// Frees environment "e" and all memory it uses.
//
void env_free(struct Env *e)
{
f0109391:	55                   	push   %ebp
f0109392:	89 e5                	mov    %esp,%ebp
f0109394:	83 ec 08             	sub    $0x8,%esp
	unshare_pws_at_user_space(e);
#endif
	/*****************************************/
	//TODO: [PROJECT MS3 - BONUS] [EXIT ENV] env_free
	// your code is here, remove the panic and write your code
	panic("env_free() is not implemented yet...!!");
f0109397:	83 ec 04             	sub    $0x4,%esp
f010939a:	68 38 5d 13 f0       	push   $0xf0135d38
f010939f:	68 9d 01 00 00       	push   $0x19d
f01093a4:	68 93 5c 13 f0       	push   $0xf0135c93
f01093a9:	e8 f8 6d ff ff       	call   f01001a6 <_panic>

f01093ae <env_exit>:
//============================
// 4) PLACE ENV IN EXIT QUEUE:
//============================
/*2015*///Just add the "curenv" to the EXIT list, then reinvoke the scheduler
void env_exit()
{
f01093ae:	55                   	push   %ebp
f01093af:	89 e5                	mov    %esp,%ebp
f01093b1:	83 ec 08             	sub    $0x8,%esp
	sched_exit_env(curenv->env_id);
f01093b4:	a1 14 82 65 f0       	mov    0xf0658214,%eax
f01093b9:	8b 40 4c             	mov    0x4c(%eax),%eax
f01093bc:	83 ec 0c             	sub    $0xc,%esp
f01093bf:	50                   	push   %eax
f01093c0:	e8 50 bd ff ff       	call   f0105115 <sched_exit_env>
f01093c5:	83 c4 10             	add    $0x10,%esp
	fos_scheduler();
f01093c8:	e8 1e b2 ff ff       	call   f01045eb <fos_scheduler>

f01093cd <envid2env>:
//   0 on success, -E_BAD_ENV on error.
//   On success, sets *penv to the environment.
//   On error, sets *penv to NULL.
//
int envid2env(int32  envid, struct Env **env_store, bool checkperm)
{
f01093cd:	55                   	push   %ebp
f01093ce:	89 e5                	mov    %esp,%ebp
f01093d0:	53                   	push   %ebx
f01093d1:	83 ec 14             	sub    $0x14,%esp
	struct Env *e;

	// If envid is zero, return the current environment.
	if (envid == 0) {
f01093d4:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f01093d8:	75 15                	jne    f01093ef <envid2env+0x22>
		*env_store = curenv;
f01093da:	8b 15 14 82 65 f0    	mov    0xf0658214,%edx
f01093e0:	8b 45 0c             	mov    0xc(%ebp),%eax
f01093e3:	89 10                	mov    %edx,(%eax)
		return 0;
f01093e5:	b8 00 00 00 00       	mov    $0x0,%eax
f01093ea:	e9 ae 00 00 00       	jmp    f010949d <envid2env+0xd0>
	// Look up the Env structure via the index part of the envid,
	// then check the env_id field in that struct Env
	// to ensure that the envid is not stale
	// (i.e., does not refer to a _previous_ environment
	// that used the same slot in the envs[] array).
	e = &envs[ENVX(envid)];
f01093ef:	8b 1d 10 82 65 f0    	mov    0xf0658210,%ebx
f01093f5:	83 ec 0c             	sub    $0xc,%esp
f01093f8:	6a 08                	push   $0x8
f01093fa:	e8 b7 60 02 00       	call   f012f4b6 <nearest_pow2_ceil>
f01093ff:	83 c4 10             	add    $0x10,%esp
f0109402:	8d 50 ff             	lea    -0x1(%eax),%edx
f0109405:	8b 45 08             	mov    0x8(%ebp),%eax
f0109408:	21 c2                	and    %eax,%edx
f010940a:	89 d0                	mov    %edx,%eax
f010940c:	01 c0                	add    %eax,%eax
f010940e:	01 d0                	add    %edx,%eax
f0109410:	8d 0c c5 00 00 00 00 	lea    0x0(,%eax,8),%ecx
f0109417:	01 c8                	add    %ecx,%eax
f0109419:	c1 e0 02             	shl    $0x2,%eax
f010941c:	01 d0                	add    %edx,%eax
f010941e:	8d 0c c5 00 00 00 00 	lea    0x0(,%eax,8),%ecx
f0109425:	01 c8                	add    %ecx,%eax
f0109427:	c1 e0 02             	shl    $0x2,%eax
f010942a:	01 d0                	add    %edx,%eax
f010942c:	c1 e0 02             	shl    $0x2,%eax
f010942f:	01 d0                	add    %edx,%eax
f0109431:	c1 e0 03             	shl    $0x3,%eax
f0109434:	01 d8                	add    %ebx,%eax
f0109436:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if (e->env_status == ENV_FREE || e->env_id != envid) {
f0109439:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010943c:	8b 40 54             	mov    0x54(%eax),%eax
f010943f:	85 c0                	test   %eax,%eax
f0109441:	74 0b                	je     f010944e <envid2env+0x81>
f0109443:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0109446:	8b 40 4c             	mov    0x4c(%eax),%eax
f0109449:	3b 45 08             	cmp    0x8(%ebp),%eax
f010944c:	74 10                	je     f010945e <envid2env+0x91>
		*env_store = 0;
f010944e:	8b 45 0c             	mov    0xc(%ebp),%eax
f0109451:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
		return E_BAD_ENV;
f0109457:	b8 fe ff ff ff       	mov    $0xfffffffe,%eax
f010945c:	eb 3f                	jmp    f010949d <envid2env+0xd0>
	// Check that the calling environment has legitimate permission
	// to manipulate the specified environment.
	// If checkperm is set, the specified environment
	// must be either the current environment
	// or an immediate child of the current environment.
	if (checkperm && e != curenv && e->env_parent_id != curenv->env_id) {
f010945e:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
f0109462:	74 2c                	je     f0109490 <envid2env+0xc3>
f0109464:	a1 14 82 65 f0       	mov    0xf0658214,%eax
f0109469:	39 45 f4             	cmp    %eax,-0xc(%ebp)
f010946c:	74 22                	je     f0109490 <envid2env+0xc3>
f010946e:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0109471:	8b 50 50             	mov    0x50(%eax),%edx
f0109474:	a1 14 82 65 f0       	mov    0xf0658214,%eax
f0109479:	8b 40 4c             	mov    0x4c(%eax),%eax
f010947c:	39 c2                	cmp    %eax,%edx
f010947e:	74 10                	je     f0109490 <envid2env+0xc3>
		*env_store = 0;
f0109480:	8b 45 0c             	mov    0xc(%ebp),%eax
f0109483:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
		return E_BAD_ENV;
f0109489:	b8 fe ff ff ff       	mov    $0xfffffffe,%eax
f010948e:	eb 0d                	jmp    f010949d <envid2env+0xd0>
	}

	*env_store = e;
f0109490:	8b 45 0c             	mov    0xc(%ebp),%eax
f0109493:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0109496:	89 10                	mov    %edx,(%eax)
	return 0;
f0109498:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010949d:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f01094a0:	c9                   	leave  
f01094a1:	c3                   	ret    

f01094a2 <env_pop_tf>:
// This exits the kernel and starts executing some environment's code.
// This function does not return.
//
void
env_pop_tf(struct Trapframe *tf)
{
f01094a2:	55                   	push   %ebp
f01094a3:	89 e5                	mov    %esp,%ebp
f01094a5:	83 ec 08             	sub    $0x8,%esp
	__asm __volatile("movl %0,%%esp\n"
f01094a8:	8b 65 08             	mov    0x8(%ebp),%esp
f01094ab:	61                   	popa   
f01094ac:	07                   	pop    %es
f01094ad:	1f                   	pop    %ds
f01094ae:	83 c4 08             	add    $0x8,%esp
f01094b1:	cf                   	iret   
			"\tpopl %%es\n"
			"\tpopl %%ds\n"
			"\taddl $0x8,%%esp\n" /* skip tf_trapno and tf_errcode */
			"\tiret"
			: : "g" (tf) : "memory");
	panic("iret failed");  /* mostly to placate the compiler */
f01094b2:	83 ec 04             	sub    $0x4,%esp
f01094b5:	68 5f 5d 13 f0       	push   $0xf0135d5f
f01094ba:	68 fc 01 00 00       	push   $0x1fc
f01094bf:	68 93 5c 13 f0       	push   $0xf0135c93
f01094c4:	e8 dd 6c ff ff       	call   f01001a6 <_panic>

f01094c9 <env_init>:
// Insert in reverse order, so that the first call to allocate_environment()
// returns envs[0].
//

void env_init(void)
{
f01094c9:	55                   	push   %ebp
f01094ca:	89 e5                	mov    %esp,%ebp
f01094cc:	56                   	push   %esi
f01094cd:	53                   	push   %ebx
f01094ce:	83 ec 10             	sub    $0x10,%esp
	int iEnv = NENV-1;
f01094d1:	c7 45 f4 07 00 00 00 	movl   $0x7,-0xc(%ebp)
	for(; iEnv >= 0; iEnv--)
f01094d8:	e9 0b 02 00 00       	jmp    f01096e8 <env_init+0x21f>
	{
		envs[iEnv].env_status = ENV_FREE;
f01094dd:	8b 0d 10 82 65 f0    	mov    0xf0658210,%ecx
f01094e3:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01094e6:	89 d0                	mov    %edx,%eax
f01094e8:	01 c0                	add    %eax,%eax
f01094ea:	01 d0                	add    %edx,%eax
f01094ec:	8d 1c c5 00 00 00 00 	lea    0x0(,%eax,8),%ebx
f01094f3:	01 d8                	add    %ebx,%eax
f01094f5:	c1 e0 02             	shl    $0x2,%eax
f01094f8:	01 d0                	add    %edx,%eax
f01094fa:	8d 1c c5 00 00 00 00 	lea    0x0(,%eax,8),%ebx
f0109501:	01 d8                	add    %ebx,%eax
f0109503:	c1 e0 02             	shl    $0x2,%eax
f0109506:	01 d0                	add    %edx,%eax
f0109508:	c1 e0 02             	shl    $0x2,%eax
f010950b:	01 d0                	add    %edx,%eax
f010950d:	c1 e0 03             	shl    $0x3,%eax
f0109510:	01 c8                	add    %ecx,%eax
f0109512:	c7 40 54 00 00 00 00 	movl   $0x0,0x54(%eax)
		envs[iEnv].env_id = 0;
f0109519:	8b 0d 10 82 65 f0    	mov    0xf0658210,%ecx
f010951f:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0109522:	89 d0                	mov    %edx,%eax
f0109524:	01 c0                	add    %eax,%eax
f0109526:	01 d0                	add    %edx,%eax
f0109528:	8d 1c c5 00 00 00 00 	lea    0x0(,%eax,8),%ebx
f010952f:	01 d8                	add    %ebx,%eax
f0109531:	c1 e0 02             	shl    $0x2,%eax
f0109534:	01 d0                	add    %edx,%eax
f0109536:	8d 1c c5 00 00 00 00 	lea    0x0(,%eax,8),%ebx
f010953d:	01 d8                	add    %ebx,%eax
f010953f:	c1 e0 02             	shl    $0x2,%eax
f0109542:	01 d0                	add    %edx,%eax
f0109544:	c1 e0 02             	shl    $0x2,%eax
f0109547:	01 d0                	add    %edx,%eax
f0109549:	c1 e0 03             	shl    $0x3,%eax
f010954c:	01 c8                	add    %ecx,%eax
f010954e:	c7 40 4c 00 00 00 00 	movl   $0x0,0x4c(%eax)
		LIST_INSERT_HEAD(&env_free_list, &envs[iEnv]);
f0109555:	8b 0d 10 82 65 f0    	mov    0xf0658210,%ecx
f010955b:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010955e:	89 d0                	mov    %edx,%eax
f0109560:	01 c0                	add    %eax,%eax
f0109562:	01 d0                	add    %edx,%eax
f0109564:	8d 1c c5 00 00 00 00 	lea    0x0(,%eax,8),%ebx
f010956b:	01 d8                	add    %ebx,%eax
f010956d:	c1 e0 02             	shl    $0x2,%eax
f0109570:	01 d0                	add    %edx,%eax
f0109572:	8d 1c c5 00 00 00 00 	lea    0x0(,%eax,8),%ebx
f0109579:	01 d8                	add    %ebx,%eax
f010957b:	c1 e0 02             	shl    $0x2,%eax
f010957e:	01 d0                	add    %edx,%eax
f0109580:	c1 e0 02             	shl    $0x2,%eax
f0109583:	01 d0                	add    %edx,%eax
f0109585:	c1 e0 03             	shl    $0x3,%eax
f0109588:	01 c8                	add    %ecx,%eax
f010958a:	85 c0                	test   %eax,%eax
f010958c:	75 17                	jne    f01095a5 <env_init+0xdc>
f010958e:	83 ec 04             	sub    $0x4,%esp
f0109591:	68 14 5d 13 f0       	push   $0xf0135d14
f0109596:	68 18 02 00 00       	push   $0x218
f010959b:	68 93 5c 13 f0       	push   $0xf0135c93
f01095a0:	e8 01 6c ff ff       	call   f01001a6 <_panic>
f01095a5:	8b 0d 10 82 65 f0    	mov    0xf0658210,%ecx
f01095ab:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01095ae:	89 d0                	mov    %edx,%eax
f01095b0:	01 c0                	add    %eax,%eax
f01095b2:	01 d0                	add    %edx,%eax
f01095b4:	8d 1c c5 00 00 00 00 	lea    0x0(,%eax,8),%ebx
f01095bb:	01 d8                	add    %ebx,%eax
f01095bd:	c1 e0 02             	shl    $0x2,%eax
f01095c0:	01 d0                	add    %edx,%eax
f01095c2:	8d 1c c5 00 00 00 00 	lea    0x0(,%eax,8),%ebx
f01095c9:	01 d8                	add    %ebx,%eax
f01095cb:	c1 e0 02             	shl    $0x2,%eax
f01095ce:	01 d0                	add    %edx,%eax
f01095d0:	c1 e0 02             	shl    $0x2,%eax
f01095d3:	01 d0                	add    %edx,%eax
f01095d5:	c1 e0 03             	shl    $0x3,%eax
f01095d8:	01 c8                	add    %ecx,%eax
f01095da:	8b 15 18 82 65 f0    	mov    0xf0658218,%edx
f01095e0:	89 50 44             	mov    %edx,0x44(%eax)
f01095e3:	8b 40 44             	mov    0x44(%eax),%eax
f01095e6:	85 c0                	test   %eax,%eax
f01095e8:	74 40                	je     f010962a <env_init+0x161>
f01095ea:	8b 0d 18 82 65 f0    	mov    0xf0658218,%ecx
f01095f0:	8b 1d 10 82 65 f0    	mov    0xf0658210,%ebx
f01095f6:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01095f9:	89 d0                	mov    %edx,%eax
f01095fb:	01 c0                	add    %eax,%eax
f01095fd:	01 d0                	add    %edx,%eax
f01095ff:	8d 34 c5 00 00 00 00 	lea    0x0(,%eax,8),%esi
f0109606:	01 f0                	add    %esi,%eax
f0109608:	c1 e0 02             	shl    $0x2,%eax
f010960b:	01 d0                	add    %edx,%eax
f010960d:	8d 34 c5 00 00 00 00 	lea    0x0(,%eax,8),%esi
f0109614:	01 f0                	add    %esi,%eax
f0109616:	c1 e0 02             	shl    $0x2,%eax
f0109619:	01 d0                	add    %edx,%eax
f010961b:	c1 e0 02             	shl    $0x2,%eax
f010961e:	01 d0                	add    %edx,%eax
f0109620:	c1 e0 03             	shl    $0x3,%eax
f0109623:	01 d8                	add    %ebx,%eax
f0109625:	89 41 48             	mov    %eax,0x48(%ecx)
f0109628:	eb 3a                	jmp    f0109664 <env_init+0x19b>
f010962a:	8b 0d 10 82 65 f0    	mov    0xf0658210,%ecx
f0109630:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0109633:	89 d0                	mov    %edx,%eax
f0109635:	01 c0                	add    %eax,%eax
f0109637:	01 d0                	add    %edx,%eax
f0109639:	8d 1c c5 00 00 00 00 	lea    0x0(,%eax,8),%ebx
f0109640:	01 d8                	add    %ebx,%eax
f0109642:	c1 e0 02             	shl    $0x2,%eax
f0109645:	01 d0                	add    %edx,%eax
f0109647:	8d 1c c5 00 00 00 00 	lea    0x0(,%eax,8),%ebx
f010964e:	01 d8                	add    %ebx,%eax
f0109650:	c1 e0 02             	shl    $0x2,%eax
f0109653:	01 d0                	add    %edx,%eax
f0109655:	c1 e0 02             	shl    $0x2,%eax
f0109658:	01 d0                	add    %edx,%eax
f010965a:	c1 e0 03             	shl    $0x3,%eax
f010965d:	01 c8                	add    %ecx,%eax
f010965f:	a3 1c 82 65 f0       	mov    %eax,0xf065821c
f0109664:	8b 0d 10 82 65 f0    	mov    0xf0658210,%ecx
f010966a:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010966d:	89 d0                	mov    %edx,%eax
f010966f:	01 c0                	add    %eax,%eax
f0109671:	01 d0                	add    %edx,%eax
f0109673:	8d 1c c5 00 00 00 00 	lea    0x0(,%eax,8),%ebx
f010967a:	01 d8                	add    %ebx,%eax
f010967c:	c1 e0 02             	shl    $0x2,%eax
f010967f:	01 d0                	add    %edx,%eax
f0109681:	8d 1c c5 00 00 00 00 	lea    0x0(,%eax,8),%ebx
f0109688:	01 d8                	add    %ebx,%eax
f010968a:	c1 e0 02             	shl    $0x2,%eax
f010968d:	01 d0                	add    %edx,%eax
f010968f:	c1 e0 02             	shl    $0x2,%eax
f0109692:	01 d0                	add    %edx,%eax
f0109694:	c1 e0 03             	shl    $0x3,%eax
f0109697:	01 c8                	add    %ecx,%eax
f0109699:	a3 18 82 65 f0       	mov    %eax,0xf0658218
f010969e:	8b 0d 10 82 65 f0    	mov    0xf0658210,%ecx
f01096a4:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01096a7:	89 d0                	mov    %edx,%eax
f01096a9:	01 c0                	add    %eax,%eax
f01096ab:	01 d0                	add    %edx,%eax
f01096ad:	8d 1c c5 00 00 00 00 	lea    0x0(,%eax,8),%ebx
f01096b4:	01 d8                	add    %ebx,%eax
f01096b6:	c1 e0 02             	shl    $0x2,%eax
f01096b9:	01 d0                	add    %edx,%eax
f01096bb:	8d 1c c5 00 00 00 00 	lea    0x0(,%eax,8),%ebx
f01096c2:	01 d8                	add    %ebx,%eax
f01096c4:	c1 e0 02             	shl    $0x2,%eax
f01096c7:	01 d0                	add    %edx,%eax
f01096c9:	c1 e0 02             	shl    $0x2,%eax
f01096cc:	01 d0                	add    %edx,%eax
f01096ce:	c1 e0 03             	shl    $0x3,%eax
f01096d1:	01 c8                	add    %ecx,%eax
f01096d3:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f01096da:	a1 24 82 65 f0       	mov    0xf0658224,%eax
f01096df:	40                   	inc    %eax
f01096e0:	a3 24 82 65 f0       	mov    %eax,0xf0658224
//

void env_init(void)
{
	int iEnv = NENV-1;
	for(; iEnv >= 0; iEnv--)
f01096e5:	ff 4d f4             	decl   -0xc(%ebp)
f01096e8:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01096ec:	0f 89 eb fd ff ff    	jns    f01094dd <env_init+0x14>
	{
		envs[iEnv].env_status = ENV_FREE;
		envs[iEnv].env_id = 0;
		LIST_INSERT_HEAD(&env_free_list, &envs[iEnv]);
	}
}
f01096f2:	90                   	nop
f01096f3:	8d 65 f8             	lea    -0x8(%ebp),%esp
f01096f6:	5b                   	pop    %ebx
f01096f7:	5e                   	pop    %esi
f01096f8:	5d                   	pop    %ebp
f01096f9:	c3                   	ret    

f01096fa <allocate_environment>:
//
// Returns 0 on success, < 0 on failure.  Errors include:
//	E_NO_FREE_ENV if all NENVS environments are allocated
//
int allocate_environment(struct Env** e)
{
f01096fa:	55                   	push   %ebp
f01096fb:	89 e5                	mov    %esp,%ebp
	if (!(*e = LIST_FIRST(&env_free_list)))
f01096fd:	8b 15 18 82 65 f0    	mov    0xf0658218,%edx
f0109703:	8b 45 08             	mov    0x8(%ebp),%eax
f0109706:	89 10                	mov    %edx,(%eax)
f0109708:	8b 45 08             	mov    0x8(%ebp),%eax
f010970b:	8b 00                	mov    (%eax),%eax
f010970d:	85 c0                	test   %eax,%eax
f010970f:	75 07                	jne    f0109718 <allocate_environment+0x1e>
		return E_NO_FREE_ENV;
f0109711:	b8 fb ff ff ff       	mov    $0xfffffffb,%eax
f0109716:	eb 11                	jmp    f0109729 <allocate_environment+0x2f>
	(*e)->env_status = ENV_UNKNOWN;
f0109718:	8b 45 08             	mov    0x8(%ebp),%eax
f010971b:	8b 00                	mov    (%eax),%eax
f010971d:	c7 40 54 06 00 00 00 	movl   $0x6,0x54(%eax)
	return 0;
f0109724:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0109729:	5d                   	pop    %ebp
f010972a:	c3                   	ret    

f010972b <free_environment>:
//===============================
// 3) FREE ENV STRUCT:
//===============================
// Free the given environment "e", simply by adding it to the free environment list.
void free_environment(struct Env* e)
{
f010972b:	55                   	push   %ebp
f010972c:	89 e5                	mov    %esp,%ebp
f010972e:	83 ec 08             	sub    $0x8,%esp
	memset(e, 0, sizeof(*e));
f0109731:	83 ec 04             	sub    $0x4,%esp
f0109734:	68 a8 ea 01 00       	push   $0x1eaa8
f0109739:	6a 00                	push   $0x0
f010973b:	ff 75 08             	pushl  0x8(%ebp)
f010973e:	e8 d6 71 02 00       	call   f0130919 <memset>
f0109743:	83 c4 10             	add    $0x10,%esp
	e->env_status = ENV_FREE;
f0109746:	8b 45 08             	mov    0x8(%ebp),%eax
f0109749:	c7 40 54 00 00 00 00 	movl   $0x0,0x54(%eax)
	LIST_INSERT_HEAD(&env_free_list, e);
f0109750:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0109754:	75 17                	jne    f010976d <free_environment+0x42>
f0109756:	83 ec 04             	sub    $0x4,%esp
f0109759:	68 14 5d 13 f0       	push   $0xf0135d14
f010975e:	68 35 02 00 00       	push   $0x235
f0109763:	68 93 5c 13 f0       	push   $0xf0135c93
f0109768:	e8 39 6a ff ff       	call   f01001a6 <_panic>
f010976d:	8b 15 18 82 65 f0    	mov    0xf0658218,%edx
f0109773:	8b 45 08             	mov    0x8(%ebp),%eax
f0109776:	89 50 44             	mov    %edx,0x44(%eax)
f0109779:	8b 45 08             	mov    0x8(%ebp),%eax
f010977c:	8b 40 44             	mov    0x44(%eax),%eax
f010977f:	85 c0                	test   %eax,%eax
f0109781:	74 0d                	je     f0109790 <free_environment+0x65>
f0109783:	a1 18 82 65 f0       	mov    0xf0658218,%eax
f0109788:	8b 55 08             	mov    0x8(%ebp),%edx
f010978b:	89 50 48             	mov    %edx,0x48(%eax)
f010978e:	eb 08                	jmp    f0109798 <free_environment+0x6d>
f0109790:	8b 45 08             	mov    0x8(%ebp),%eax
f0109793:	a3 1c 82 65 f0       	mov    %eax,0xf065821c
f0109798:	8b 45 08             	mov    0x8(%ebp),%eax
f010979b:	a3 18 82 65 f0       	mov    %eax,0xf0658218
f01097a0:	8b 45 08             	mov    0x8(%ebp),%eax
f01097a3:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f01097aa:	a1 24 82 65 f0       	mov    0xf0658224,%eax
f01097af:	40                   	inc    %eax
f01097b0:	a3 24 82 65 f0       	mov    %eax,0xf0658224
}
f01097b5:	90                   	nop
f01097b6:	c9                   	leave  
f01097b7:	c3                   	ret    

f01097b8 <create_user_page_WS>:

//===============================================
// 4) DYNAMICALLY ALLOCATE SPACE FOR WORKING SET:
//===============================================
void * create_user_page_WS(struct Env * e, unsigned int numOfElements)
{
f01097b8:	55                   	push   %ebp
f01097b9:	89 e5                	mov    %esp,%ebp
f01097bb:	83 ec 08             	sub    $0x8,%esp
	//TODO: [PROJECT MS3] [KERNEL DYNAMIC ALLOC] create_user_page_WS()
	// Write your code here, remove the panic and write your code
	panic("create_user_page_WS() is not implemented yet...!!");
f01097be:	83 ec 04             	sub    $0x4,%esp
f01097c1:	68 6c 5d 13 f0       	push   $0xf0135d6c
f01097c6:	68 3f 02 00 00       	push   $0x23f
f01097cb:	68 93 5c 13 f0       	push   $0xf0135c93
f01097d0:	e8 d1 69 ff ff       	call   f01001a6 <_panic>

f01097d5 <create_user_directory>:

//==================================================
// 5) DYNAMICALLY ALLOCATE SPACE FOR USER DIRECTORY:
//==================================================
void * create_user_directory()
{
f01097d5:	55                   	push   %ebp
f01097d6:	89 e5                	mov    %esp,%ebp
f01097d8:	83 ec 08             	sub    $0x8,%esp
	//TODO: [PROJECT MS3] [KERNEL DYNAMIC ALLOC] create_user_directory()
	// Write your code here, remove the panic and write your code
	panic("create_user_directory() is not implemented yet...!!");
f01097db:	83 ec 04             	sub    $0x4,%esp
f01097de:	68 a0 5d 13 f0       	push   $0xf0135da0
f01097e3:	68 4b 02 00 00       	push   $0x24b
f01097e8:	68 93 5c 13 f0       	push   $0xf0135c93
f01097ed:	e8 b4 69 ff ff       	call   f01001a6 <_panic>

f01097f2 <program_segment_alloc_map_copy_workingset>:
//
// The allocation shouldn't failed
// return 0
//
static int program_segment_alloc_map_copy_workingset(struct Env *e, struct ProgramSegment* seg, uint32* allocated_pages, uint32 remaining_ws_pages, uint32* lastTableNumber)
{
f01097f2:	55                   	push   %ebp
f01097f3:	89 e5                	mov    %esp,%ebp
f01097f5:	53                   	push   %ebx
f01097f6:	83 ec 44             	sub    $0x44,%esp
	void *vaddr = seg->virtual_address;
f01097f9:	8b 45 0c             	mov    0xc(%ebp),%eax
f01097fc:	8b 40 0c             	mov    0xc(%eax),%eax
f01097ff:	89 45 e4             	mov    %eax,-0x1c(%ebp)
	uint32 length = seg->size_in_memory;
f0109802:	8b 45 0c             	mov    0xc(%ebp),%eax
f0109805:	8b 40 08             	mov    0x8(%eax),%eax
f0109808:	89 45 e0             	mov    %eax,-0x20(%ebp)

	uint32 end_vaddr = ROUNDUP((uint32)vaddr + length,PAGE_SIZE) ;
f010980b:	c7 45 dc 00 10 00 00 	movl   $0x1000,-0x24(%ebp)
f0109812:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f0109815:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0109818:	01 c2                	add    %eax,%edx
f010981a:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010981d:	01 d0                	add    %edx,%eax
f010981f:	48                   	dec    %eax
f0109820:	89 45 d8             	mov    %eax,-0x28(%ebp)
f0109823:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0109826:	ba 00 00 00 00       	mov    $0x0,%edx
f010982b:	f7 75 dc             	divl   -0x24(%ebp)
f010982e:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0109831:	29 d0                	sub    %edx,%eax
f0109833:	89 45 d4             	mov    %eax,-0x2c(%ebp)
	uint32 iVA = ROUNDDOWN((uint32)vaddr,PAGE_SIZE) ;
f0109836:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0109839:	89 45 d0             	mov    %eax,-0x30(%ebp)
f010983c:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010983f:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0109844:	89 45 f4             	mov    %eax,-0xc(%ebp)
	int r ;
	uint32 i = 0 ;
f0109847:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	struct FrameInfo *p = NULL;
f010984e:	c7 45 c0 00 00 00 00 	movl   $0x0,-0x40(%ebp)

	*allocated_pages = 0;
f0109855:	8b 45 10             	mov    0x10(%ebp),%eax
f0109858:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	/*2015*/// Load max of 6 pages only for the segment that start with va = 200000 [EXCEPT tpp]
	if (iVA == 0x200000 && strcmp(e->prog_name, "tpp")!=0)
f010985e:	81 7d f4 00 00 20 00 	cmpl   $0x200000,-0xc(%ebp)
f0109865:	0f 85 12 06 00 00    	jne    f0109e7d <program_segment_alloc_map_copy_workingset+0x68b>
f010986b:	8b 45 08             	mov    0x8(%ebp),%eax
f010986e:	05 18 da 01 00       	add    $0x1da18,%eax
f0109873:	83 ec 08             	sub    $0x8,%esp
f0109876:	68 d4 5d 13 f0       	push   $0xf0135dd4
f010987b:	50                   	push   %eax
f010987c:	e8 b6 6f 02 00       	call   f0130837 <strcmp>
f0109881:	83 c4 10             	add    $0x10,%esp
f0109884:	85 c0                	test   %eax,%eax
f0109886:	0f 84 f1 05 00 00    	je     f0109e7d <program_segment_alloc_map_copy_workingset+0x68b>
		remaining_ws_pages = remaining_ws_pages < 6 ? remaining_ws_pages:6 ;
f010988c:	8b 45 14             	mov    0x14(%ebp),%eax
f010988f:	83 f8 06             	cmp    $0x6,%eax
f0109892:	76 05                	jbe    f0109899 <program_segment_alloc_map_copy_workingset+0xa7>
f0109894:	b8 06 00 00 00       	mov    $0x6,%eax
f0109899:	89 45 14             	mov    %eax,0x14(%ebp)
	/*==========================================================================================*/
	for (; iVA < end_vaddr && i<remaining_ws_pages; i++, iVA += PAGE_SIZE)
f010989c:	e9 dc 05 00 00       	jmp    f0109e7d <program_segment_alloc_map_copy_workingset+0x68b>
	{
		// Allocate a page
		allocate_frame(&p) ;
f01098a1:	83 ec 0c             	sub    $0xc,%esp
f01098a4:	8d 45 c0             	lea    -0x40(%ebp),%eax
f01098a7:	50                   	push   %eax
f01098a8:	e8 fd ce ff ff       	call   f01067aa <allocate_frame>
f01098ad:	83 c4 10             	add    $0x10,%esp

		LOG_STRING("segment page allocated");
		loadtime_map_frame(e->env_page_directory, p, iVA, PERM_USER | PERM_WRITEABLE);
f01098b0:	8b 55 c0             	mov    -0x40(%ebp),%edx
f01098b3:	8b 45 08             	mov    0x8(%ebp),%eax
f01098b6:	8b 40 5c             	mov    0x5c(%eax),%eax
f01098b9:	6a 06                	push   $0x6
f01098bb:	ff 75 f4             	pushl  -0xc(%ebp)
f01098be:	52                   	push   %edx
f01098bf:	50                   	push   %eax
f01098c0:	e8 33 d4 ff ff       	call   f0106cf8 <loadtime_map_frame>
f01098c5:	83 c4 10             	add    $0x10,%esp
		LOG_STRING("segment page mapped");

		LOG_STATMENT(cprintf("Updating working set entry # %d",e->page_last_WS_index));

		e->ptr_pageWorkingSet[e->page_last_WS_index].virtual_address = iVA;
f01098c8:	8b 45 08             	mov    0x8(%ebp),%eax
f01098cb:	8b 90 e8 d9 01 00    	mov    0x1d9e8(%eax),%edx
f01098d1:	8b 4d 08             	mov    0x8(%ebp),%ecx
f01098d4:	89 d0                	mov    %edx,%eax
f01098d6:	01 c0                	add    %eax,%eax
f01098d8:	01 d0                	add    %edx,%eax
f01098da:	c1 e0 03             	shl    $0x3,%eax
f01098dd:	01 c8                	add    %ecx,%eax
f01098df:	8d 50 78             	lea    0x78(%eax),%edx
f01098e2:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01098e5:	89 02                	mov    %eax,(%edx)
		e->ptr_pageWorkingSet[e->page_last_WS_index].empty = 0;
f01098e7:	8b 45 08             	mov    0x8(%ebp),%eax
f01098ea:	8b 90 e8 d9 01 00    	mov    0x1d9e8(%eax),%edx
f01098f0:	8b 4d 08             	mov    0x8(%ebp),%ecx
f01098f3:	89 d0                	mov    %edx,%eax
f01098f5:	01 c0                	add    %eax,%eax
f01098f7:	01 d0                	add    %edx,%eax
f01098f9:	c1 e0 03             	shl    $0x3,%eax
f01098fc:	01 c8                	add    %ecx,%eax
f01098fe:	83 c0 7c             	add    $0x7c,%eax
f0109901:	c6 00 00             	movb   $0x0,(%eax)
		e->ptr_pageWorkingSet[e->page_last_WS_index].time_stamp = 0;
f0109904:	8b 45 08             	mov    0x8(%ebp),%eax
f0109907:	8b 90 e8 d9 01 00    	mov    0x1d9e8(%eax),%edx
f010990d:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0109910:	89 d0                	mov    %edx,%eax
f0109912:	01 c0                	add    %eax,%eax
f0109914:	01 d0                	add    %edx,%eax
f0109916:	c1 e0 03             	shl    $0x3,%eax
f0109919:	01 c8                	add    %ecx,%eax
f010991b:	83 e8 80             	sub    $0xffffff80,%eax
f010991e:	c7 00 00 00 00 00    	movl   $0x0,(%eax)

		//2020
		if (isPageReplacmentAlgorithmLRU(PG_REP_LRU_LISTS_APPROX))
f0109924:	83 ec 0c             	sub    $0xc,%esp
f0109927:	6a 02                	push   $0x2
f0109929:	e8 3f 3c 00 00       	call   f010d56d <isPageReplacmentAlgorithmLRU>
f010992e:	83 c4 10             	add    $0x10,%esp
f0109931:	85 c0                	test   %eax,%eax
f0109933:	0f 84 11 04 00 00    	je     f0109d4a <program_segment_alloc_map_copy_workingset+0x558>
		{
			LIST_REMOVE(&(e->PageWorkingSetList), &(e->ptr_pageWorkingSet[e->page_last_WS_index]));
f0109939:	8b 45 08             	mov    0x8(%ebp),%eax
f010993c:	8b 90 e8 d9 01 00    	mov    0x1d9e8(%eax),%edx
f0109942:	89 d0                	mov    %edx,%eax
f0109944:	01 c0                	add    %eax,%eax
f0109946:	01 d0                	add    %edx,%eax
f0109948:	c1 e0 03             	shl    $0x3,%eax
f010994b:	8d 50 70             	lea    0x70(%eax),%edx
f010994e:	8b 45 08             	mov    0x8(%ebp),%eax
f0109951:	01 d0                	add    %edx,%eax
f0109953:	83 c0 08             	add    $0x8,%eax
f0109956:	85 c0                	test   %eax,%eax
f0109958:	75 17                	jne    f0109971 <program_segment_alloc_map_copy_workingset+0x17f>
f010995a:	83 ec 04             	sub    $0x4,%esp
f010995d:	68 f5 5c 13 f0       	push   $0xf0135cf5
f0109962:	68 7d 02 00 00       	push   $0x27d
f0109967:	68 93 5c 13 f0       	push   $0xf0135c93
f010996c:	e8 35 68 ff ff       	call   f01001a6 <_panic>
f0109971:	8b 45 08             	mov    0x8(%ebp),%eax
f0109974:	8b 90 e8 d9 01 00    	mov    0x1d9e8(%eax),%edx
f010997a:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010997d:	89 d0                	mov    %edx,%eax
f010997f:	01 c0                	add    %eax,%eax
f0109981:	01 d0                	add    %edx,%eax
f0109983:	c1 e0 03             	shl    $0x3,%eax
f0109986:	01 c8                	add    %ecx,%eax
f0109988:	05 88 00 00 00       	add    $0x88,%eax
f010998d:	8b 00                	mov    (%eax),%eax
f010998f:	85 c0                	test   %eax,%eax
f0109991:	74 41                	je     f01099d4 <program_segment_alloc_map_copy_workingset+0x1e2>
f0109993:	8b 45 08             	mov    0x8(%ebp),%eax
f0109996:	8b 90 e8 d9 01 00    	mov    0x1d9e8(%eax),%edx
f010999c:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010999f:	89 d0                	mov    %edx,%eax
f01099a1:	01 c0                	add    %eax,%eax
f01099a3:	01 d0                	add    %edx,%eax
f01099a5:	c1 e0 03             	shl    $0x3,%eax
f01099a8:	01 c8                	add    %ecx,%eax
f01099aa:	05 88 00 00 00       	add    $0x88,%eax
f01099af:	8b 10                	mov    (%eax),%edx
f01099b1:	8b 45 08             	mov    0x8(%ebp),%eax
f01099b4:	8b 88 e8 d9 01 00    	mov    0x1d9e8(%eax),%ecx
f01099ba:	8b 5d 08             	mov    0x8(%ebp),%ebx
f01099bd:	89 c8                	mov    %ecx,%eax
f01099bf:	01 c0                	add    %eax,%eax
f01099c1:	01 c8                	add    %ecx,%eax
f01099c3:	c1 e0 03             	shl    $0x3,%eax
f01099c6:	01 d8                	add    %ebx,%eax
f01099c8:	05 8c 00 00 00       	add    $0x8c,%eax
f01099cd:	8b 00                	mov    (%eax),%eax
f01099cf:	89 42 14             	mov    %eax,0x14(%edx)
f01099d2:	eb 27                	jmp    f01099fb <program_segment_alloc_map_copy_workingset+0x209>
f01099d4:	8b 45 08             	mov    0x8(%ebp),%eax
f01099d7:	8b 90 e8 d9 01 00    	mov    0x1d9e8(%eax),%edx
f01099dd:	8b 4d 08             	mov    0x8(%ebp),%ecx
f01099e0:	89 d0                	mov    %edx,%eax
f01099e2:	01 c0                	add    %eax,%eax
f01099e4:	01 d0                	add    %edx,%eax
f01099e6:	c1 e0 03             	shl    $0x3,%eax
f01099e9:	01 c8                	add    %ecx,%eax
f01099eb:	05 8c 00 00 00       	add    $0x8c,%eax
f01099f0:	8b 10                	mov    (%eax),%edx
f01099f2:	8b 45 08             	mov    0x8(%ebp),%eax
f01099f5:	89 90 74 ea 01 00    	mov    %edx,0x1ea74(%eax)
f01099fb:	8b 45 08             	mov    0x8(%ebp),%eax
f01099fe:	8b 90 e8 d9 01 00    	mov    0x1d9e8(%eax),%edx
f0109a04:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0109a07:	89 d0                	mov    %edx,%eax
f0109a09:	01 c0                	add    %eax,%eax
f0109a0b:	01 d0                	add    %edx,%eax
f0109a0d:	c1 e0 03             	shl    $0x3,%eax
f0109a10:	01 c8                	add    %ecx,%eax
f0109a12:	05 8c 00 00 00       	add    $0x8c,%eax
f0109a17:	8b 00                	mov    (%eax),%eax
f0109a19:	85 c0                	test   %eax,%eax
f0109a1b:	74 41                	je     f0109a5e <program_segment_alloc_map_copy_workingset+0x26c>
f0109a1d:	8b 45 08             	mov    0x8(%ebp),%eax
f0109a20:	8b 90 e8 d9 01 00    	mov    0x1d9e8(%eax),%edx
f0109a26:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0109a29:	89 d0                	mov    %edx,%eax
f0109a2b:	01 c0                	add    %eax,%eax
f0109a2d:	01 d0                	add    %edx,%eax
f0109a2f:	c1 e0 03             	shl    $0x3,%eax
f0109a32:	01 c8                	add    %ecx,%eax
f0109a34:	05 8c 00 00 00       	add    $0x8c,%eax
f0109a39:	8b 10                	mov    (%eax),%edx
f0109a3b:	8b 45 08             	mov    0x8(%ebp),%eax
f0109a3e:	8b 88 e8 d9 01 00    	mov    0x1d9e8(%eax),%ecx
f0109a44:	8b 5d 08             	mov    0x8(%ebp),%ebx
f0109a47:	89 c8                	mov    %ecx,%eax
f0109a49:	01 c0                	add    %eax,%eax
f0109a4b:	01 c8                	add    %ecx,%eax
f0109a4d:	c1 e0 03             	shl    $0x3,%eax
f0109a50:	01 d8                	add    %ebx,%eax
f0109a52:	05 88 00 00 00       	add    $0x88,%eax
f0109a57:	8b 00                	mov    (%eax),%eax
f0109a59:	89 42 10             	mov    %eax,0x10(%edx)
f0109a5c:	eb 27                	jmp    f0109a85 <program_segment_alloc_map_copy_workingset+0x293>
f0109a5e:	8b 45 08             	mov    0x8(%ebp),%eax
f0109a61:	8b 90 e8 d9 01 00    	mov    0x1d9e8(%eax),%edx
f0109a67:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0109a6a:	89 d0                	mov    %edx,%eax
f0109a6c:	01 c0                	add    %eax,%eax
f0109a6e:	01 d0                	add    %edx,%eax
f0109a70:	c1 e0 03             	shl    $0x3,%eax
f0109a73:	01 c8                	add    %ecx,%eax
f0109a75:	05 88 00 00 00       	add    $0x88,%eax
f0109a7a:	8b 10                	mov    (%eax),%edx
f0109a7c:	8b 45 08             	mov    0x8(%ebp),%eax
f0109a7f:	89 90 70 ea 01 00    	mov    %edx,0x1ea70(%eax)
f0109a85:	8b 45 08             	mov    0x8(%ebp),%eax
f0109a88:	8b 90 e8 d9 01 00    	mov    0x1d9e8(%eax),%edx
f0109a8e:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0109a91:	89 d0                	mov    %edx,%eax
f0109a93:	01 c0                	add    %eax,%eax
f0109a95:	01 d0                	add    %edx,%eax
f0109a97:	c1 e0 03             	shl    $0x3,%eax
f0109a9a:	01 c8                	add    %ecx,%eax
f0109a9c:	05 88 00 00 00       	add    $0x88,%eax
f0109aa1:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f0109aa7:	8b 45 08             	mov    0x8(%ebp),%eax
f0109aaa:	8b 90 e8 d9 01 00    	mov    0x1d9e8(%eax),%edx
f0109ab0:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0109ab3:	89 d0                	mov    %edx,%eax
f0109ab5:	01 c0                	add    %eax,%eax
f0109ab7:	01 d0                	add    %edx,%eax
f0109ab9:	c1 e0 03             	shl    $0x3,%eax
f0109abc:	01 c8                	add    %ecx,%eax
f0109abe:	05 8c 00 00 00       	add    $0x8c,%eax
f0109ac3:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f0109ac9:	8b 45 08             	mov    0x8(%ebp),%eax
f0109acc:	8b 80 7c ea 01 00    	mov    0x1ea7c(%eax),%eax
f0109ad2:	8d 50 ff             	lea    -0x1(%eax),%edx
f0109ad5:	8b 45 08             	mov    0x8(%ebp),%eax
f0109ad8:	89 90 7c ea 01 00    	mov    %edx,0x1ea7c(%eax)
			//Always leave 1 page in Active list for the stack
			if (LIST_SIZE(&(e->ActiveList)) < e->ActiveListSize - 1)
f0109ade:	8b 45 08             	mov    0x8(%ebp),%eax
f0109ae1:	8b 90 8c ea 01 00    	mov    0x1ea8c(%eax),%edx
f0109ae7:	8b 45 08             	mov    0x8(%ebp),%eax
f0109aea:	8b 80 a0 ea 01 00    	mov    0x1eaa0(%eax),%eax
f0109af0:	48                   	dec    %eax
f0109af1:	39 c2                	cmp    %eax,%edx
f0109af3:	0f 83 2b 01 00 00    	jae    f0109c24 <program_segment_alloc_map_copy_workingset+0x432>
			{
				LIST_INSERT_HEAD(&(e->ActiveList), &(e->ptr_pageWorkingSet[e->page_last_WS_index]));
f0109af9:	8b 45 08             	mov    0x8(%ebp),%eax
f0109afc:	8b 90 e8 d9 01 00    	mov    0x1d9e8(%eax),%edx
f0109b02:	89 d0                	mov    %edx,%eax
f0109b04:	01 c0                	add    %eax,%eax
f0109b06:	01 d0                	add    %edx,%eax
f0109b08:	c1 e0 03             	shl    $0x3,%eax
f0109b0b:	8d 50 70             	lea    0x70(%eax),%edx
f0109b0e:	8b 45 08             	mov    0x8(%ebp),%eax
f0109b11:	01 d0                	add    %edx,%eax
f0109b13:	83 c0 08             	add    $0x8,%eax
f0109b16:	85 c0                	test   %eax,%eax
f0109b18:	75 17                	jne    f0109b31 <program_segment_alloc_map_copy_workingset+0x33f>
f0109b1a:	83 ec 04             	sub    $0x4,%esp
f0109b1d:	68 14 5d 13 f0       	push   $0xf0135d14
f0109b22:	68 81 02 00 00       	push   $0x281
f0109b27:	68 93 5c 13 f0       	push   $0xf0135c93
f0109b2c:	e8 75 66 ff ff       	call   f01001a6 <_panic>
f0109b31:	8b 45 08             	mov    0x8(%ebp),%eax
f0109b34:	8b 90 e8 d9 01 00    	mov    0x1d9e8(%eax),%edx
f0109b3a:	8b 45 08             	mov    0x8(%ebp),%eax
f0109b3d:	8b 88 80 ea 01 00    	mov    0x1ea80(%eax),%ecx
f0109b43:	8b 5d 08             	mov    0x8(%ebp),%ebx
f0109b46:	89 d0                	mov    %edx,%eax
f0109b48:	01 c0                	add    %eax,%eax
f0109b4a:	01 d0                	add    %edx,%eax
f0109b4c:	c1 e0 03             	shl    $0x3,%eax
f0109b4f:	01 d8                	add    %ebx,%eax
f0109b51:	05 88 00 00 00       	add    $0x88,%eax
f0109b56:	89 08                	mov    %ecx,(%eax)
f0109b58:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0109b5b:	89 d0                	mov    %edx,%eax
f0109b5d:	01 c0                	add    %eax,%eax
f0109b5f:	01 d0                	add    %edx,%eax
f0109b61:	c1 e0 03             	shl    $0x3,%eax
f0109b64:	01 c8                	add    %ecx,%eax
f0109b66:	05 88 00 00 00       	add    $0x88,%eax
f0109b6b:	8b 00                	mov    (%eax),%eax
f0109b6d:	85 c0                	test   %eax,%eax
f0109b6f:	74 2b                	je     f0109b9c <program_segment_alloc_map_copy_workingset+0x3aa>
f0109b71:	8b 45 08             	mov    0x8(%ebp),%eax
f0109b74:	8b 90 80 ea 01 00    	mov    0x1ea80(%eax),%edx
f0109b7a:	8b 45 08             	mov    0x8(%ebp),%eax
f0109b7d:	8b 88 e8 d9 01 00    	mov    0x1d9e8(%eax),%ecx
f0109b83:	89 c8                	mov    %ecx,%eax
f0109b85:	01 c0                	add    %eax,%eax
f0109b87:	01 c8                	add    %ecx,%eax
f0109b89:	c1 e0 03             	shl    $0x3,%eax
f0109b8c:	8d 48 70             	lea    0x70(%eax),%ecx
f0109b8f:	8b 45 08             	mov    0x8(%ebp),%eax
f0109b92:	01 c8                	add    %ecx,%eax
f0109b94:	83 c0 08             	add    $0x8,%eax
f0109b97:	89 42 14             	mov    %eax,0x14(%edx)
f0109b9a:	eb 26                	jmp    f0109bc2 <program_segment_alloc_map_copy_workingset+0x3d0>
f0109b9c:	8b 45 08             	mov    0x8(%ebp),%eax
f0109b9f:	8b 90 e8 d9 01 00    	mov    0x1d9e8(%eax),%edx
f0109ba5:	89 d0                	mov    %edx,%eax
f0109ba7:	01 c0                	add    %eax,%eax
f0109ba9:	01 d0                	add    %edx,%eax
f0109bab:	c1 e0 03             	shl    $0x3,%eax
f0109bae:	8d 50 70             	lea    0x70(%eax),%edx
f0109bb1:	8b 45 08             	mov    0x8(%ebp),%eax
f0109bb4:	01 d0                	add    %edx,%eax
f0109bb6:	8d 50 08             	lea    0x8(%eax),%edx
f0109bb9:	8b 45 08             	mov    0x8(%ebp),%eax
f0109bbc:	89 90 84 ea 01 00    	mov    %edx,0x1ea84(%eax)
f0109bc2:	8b 45 08             	mov    0x8(%ebp),%eax
f0109bc5:	8b 90 e8 d9 01 00    	mov    0x1d9e8(%eax),%edx
f0109bcb:	89 d0                	mov    %edx,%eax
f0109bcd:	01 c0                	add    %eax,%eax
f0109bcf:	01 d0                	add    %edx,%eax
f0109bd1:	c1 e0 03             	shl    $0x3,%eax
f0109bd4:	8d 50 70             	lea    0x70(%eax),%edx
f0109bd7:	8b 45 08             	mov    0x8(%ebp),%eax
f0109bda:	01 d0                	add    %edx,%eax
f0109bdc:	8d 50 08             	lea    0x8(%eax),%edx
f0109bdf:	8b 45 08             	mov    0x8(%ebp),%eax
f0109be2:	89 90 80 ea 01 00    	mov    %edx,0x1ea80(%eax)
f0109be8:	8b 45 08             	mov    0x8(%ebp),%eax
f0109beb:	8b 90 e8 d9 01 00    	mov    0x1d9e8(%eax),%edx
f0109bf1:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0109bf4:	89 d0                	mov    %edx,%eax
f0109bf6:	01 c0                	add    %eax,%eax
f0109bf8:	01 d0                	add    %edx,%eax
f0109bfa:	c1 e0 03             	shl    $0x3,%eax
f0109bfd:	01 c8                	add    %ecx,%eax
f0109bff:	05 8c 00 00 00       	add    $0x8c,%eax
f0109c04:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f0109c0a:	8b 45 08             	mov    0x8(%ebp),%eax
f0109c0d:	8b 80 8c ea 01 00    	mov    0x1ea8c(%eax),%eax
f0109c13:	8d 50 01             	lea    0x1(%eax),%edx
f0109c16:	8b 45 08             	mov    0x8(%ebp),%eax
f0109c19:	89 90 8c ea 01 00    	mov    %edx,0x1ea8c(%eax)
f0109c1f:	e9 26 01 00 00       	jmp    f0109d4a <program_segment_alloc_map_copy_workingset+0x558>
			}
			else
			{
				//Add to LRU Second list
				LIST_INSERT_HEAD(&(e->SecondList), &(e->ptr_pageWorkingSet[e->page_last_WS_index]));
f0109c24:	8b 45 08             	mov    0x8(%ebp),%eax
f0109c27:	8b 90 e8 d9 01 00    	mov    0x1d9e8(%eax),%edx
f0109c2d:	89 d0                	mov    %edx,%eax
f0109c2f:	01 c0                	add    %eax,%eax
f0109c31:	01 d0                	add    %edx,%eax
f0109c33:	c1 e0 03             	shl    $0x3,%eax
f0109c36:	8d 50 70             	lea    0x70(%eax),%edx
f0109c39:	8b 45 08             	mov    0x8(%ebp),%eax
f0109c3c:	01 d0                	add    %edx,%eax
f0109c3e:	83 c0 08             	add    $0x8,%eax
f0109c41:	85 c0                	test   %eax,%eax
f0109c43:	75 17                	jne    f0109c5c <program_segment_alloc_map_copy_workingset+0x46a>
f0109c45:	83 ec 04             	sub    $0x4,%esp
f0109c48:	68 14 5d 13 f0       	push   $0xf0135d14
f0109c4d:	68 86 02 00 00       	push   $0x286
f0109c52:	68 93 5c 13 f0       	push   $0xf0135c93
f0109c57:	e8 4a 65 ff ff       	call   f01001a6 <_panic>
f0109c5c:	8b 45 08             	mov    0x8(%ebp),%eax
f0109c5f:	8b 90 e8 d9 01 00    	mov    0x1d9e8(%eax),%edx
f0109c65:	8b 45 08             	mov    0x8(%ebp),%eax
f0109c68:	8b 88 90 ea 01 00    	mov    0x1ea90(%eax),%ecx
f0109c6e:	8b 5d 08             	mov    0x8(%ebp),%ebx
f0109c71:	89 d0                	mov    %edx,%eax
f0109c73:	01 c0                	add    %eax,%eax
f0109c75:	01 d0                	add    %edx,%eax
f0109c77:	c1 e0 03             	shl    $0x3,%eax
f0109c7a:	01 d8                	add    %ebx,%eax
f0109c7c:	05 88 00 00 00       	add    $0x88,%eax
f0109c81:	89 08                	mov    %ecx,(%eax)
f0109c83:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0109c86:	89 d0                	mov    %edx,%eax
f0109c88:	01 c0                	add    %eax,%eax
f0109c8a:	01 d0                	add    %edx,%eax
f0109c8c:	c1 e0 03             	shl    $0x3,%eax
f0109c8f:	01 c8                	add    %ecx,%eax
f0109c91:	05 88 00 00 00       	add    $0x88,%eax
f0109c96:	8b 00                	mov    (%eax),%eax
f0109c98:	85 c0                	test   %eax,%eax
f0109c9a:	74 2b                	je     f0109cc7 <program_segment_alloc_map_copy_workingset+0x4d5>
f0109c9c:	8b 45 08             	mov    0x8(%ebp),%eax
f0109c9f:	8b 90 90 ea 01 00    	mov    0x1ea90(%eax),%edx
f0109ca5:	8b 45 08             	mov    0x8(%ebp),%eax
f0109ca8:	8b 88 e8 d9 01 00    	mov    0x1d9e8(%eax),%ecx
f0109cae:	89 c8                	mov    %ecx,%eax
f0109cb0:	01 c0                	add    %eax,%eax
f0109cb2:	01 c8                	add    %ecx,%eax
f0109cb4:	c1 e0 03             	shl    $0x3,%eax
f0109cb7:	8d 48 70             	lea    0x70(%eax),%ecx
f0109cba:	8b 45 08             	mov    0x8(%ebp),%eax
f0109cbd:	01 c8                	add    %ecx,%eax
f0109cbf:	83 c0 08             	add    $0x8,%eax
f0109cc2:	89 42 14             	mov    %eax,0x14(%edx)
f0109cc5:	eb 26                	jmp    f0109ced <program_segment_alloc_map_copy_workingset+0x4fb>
f0109cc7:	8b 45 08             	mov    0x8(%ebp),%eax
f0109cca:	8b 90 e8 d9 01 00    	mov    0x1d9e8(%eax),%edx
f0109cd0:	89 d0                	mov    %edx,%eax
f0109cd2:	01 c0                	add    %eax,%eax
f0109cd4:	01 d0                	add    %edx,%eax
f0109cd6:	c1 e0 03             	shl    $0x3,%eax
f0109cd9:	8d 50 70             	lea    0x70(%eax),%edx
f0109cdc:	8b 45 08             	mov    0x8(%ebp),%eax
f0109cdf:	01 d0                	add    %edx,%eax
f0109ce1:	8d 50 08             	lea    0x8(%eax),%edx
f0109ce4:	8b 45 08             	mov    0x8(%ebp),%eax
f0109ce7:	89 90 94 ea 01 00    	mov    %edx,0x1ea94(%eax)
f0109ced:	8b 45 08             	mov    0x8(%ebp),%eax
f0109cf0:	8b 90 e8 d9 01 00    	mov    0x1d9e8(%eax),%edx
f0109cf6:	89 d0                	mov    %edx,%eax
f0109cf8:	01 c0                	add    %eax,%eax
f0109cfa:	01 d0                	add    %edx,%eax
f0109cfc:	c1 e0 03             	shl    $0x3,%eax
f0109cff:	8d 50 70             	lea    0x70(%eax),%edx
f0109d02:	8b 45 08             	mov    0x8(%ebp),%eax
f0109d05:	01 d0                	add    %edx,%eax
f0109d07:	8d 50 08             	lea    0x8(%eax),%edx
f0109d0a:	8b 45 08             	mov    0x8(%ebp),%eax
f0109d0d:	89 90 90 ea 01 00    	mov    %edx,0x1ea90(%eax)
f0109d13:	8b 45 08             	mov    0x8(%ebp),%eax
f0109d16:	8b 90 e8 d9 01 00    	mov    0x1d9e8(%eax),%edx
f0109d1c:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0109d1f:	89 d0                	mov    %edx,%eax
f0109d21:	01 c0                	add    %eax,%eax
f0109d23:	01 d0                	add    %edx,%eax
f0109d25:	c1 e0 03             	shl    $0x3,%eax
f0109d28:	01 c8                	add    %ecx,%eax
f0109d2a:	05 8c 00 00 00       	add    $0x8c,%eax
f0109d2f:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f0109d35:	8b 45 08             	mov    0x8(%ebp),%eax
f0109d38:	8b 80 9c ea 01 00    	mov    0x1ea9c(%eax),%eax
f0109d3e:	8d 50 01             	lea    0x1(%eax),%edx
f0109d41:	8b 45 08             	mov    0x8(%ebp),%eax
f0109d44:	89 90 9c ea 01 00    	mov    %edx,0x1ea9c(%eax)
			}
		}
		//=======================
		e->page_last_WS_index ++;
f0109d4a:	8b 45 08             	mov    0x8(%ebp),%eax
f0109d4d:	8b 80 e8 d9 01 00    	mov    0x1d9e8(%eax),%eax
f0109d53:	8d 50 01             	lea    0x1(%eax),%edx
f0109d56:	8b 45 08             	mov    0x8(%ebp),%eax
f0109d59:	89 90 e8 d9 01 00    	mov    %edx,0x1d9e8(%eax)
		e->page_last_WS_index %= (e->page_WS_max_size);
f0109d5f:	8b 45 08             	mov    0x8(%ebp),%eax
f0109d62:	8b 80 e8 d9 01 00    	mov    0x1d9e8(%eax),%eax
f0109d68:	8b 55 08             	mov    0x8(%ebp),%edx
f0109d6b:	8b 4a 74             	mov    0x74(%edx),%ecx
f0109d6e:	ba 00 00 00 00       	mov    $0x0,%edx
f0109d73:	f7 f1                	div    %ecx
f0109d75:	8b 45 08             	mov    0x8(%ebp),%eax
f0109d78:	89 90 e8 d9 01 00    	mov    %edx,0x1d9e8(%eax)

		//if a new table is created during the mapping, add it to the table working set
		if(PDX(iVA) != (*lastTableNumber))
f0109d7e:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0109d81:	c1 e8 16             	shr    $0x16,%eax
f0109d84:	89 c2                	mov    %eax,%edx
f0109d86:	8b 45 18             	mov    0x18(%ebp),%eax
f0109d89:	8b 00                	mov    (%eax),%eax
f0109d8b:	39 c2                	cmp    %eax,%edx
f0109d8d:	0f 84 d3 00 00 00    	je     f0109e66 <program_segment_alloc_map_copy_workingset+0x674>
		{
			e->__ptr_tws[e->table_last_WS_index].virtual_address = ROUNDDOWN(iVA, PAGE_SIZE*1024);;
f0109d93:	8b 45 08             	mov    0x8(%ebp),%eax
f0109d96:	8b 90 ec d9 01 00    	mov    0x1d9ec(%eax),%edx
f0109d9c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0109d9f:	89 45 cc             	mov    %eax,-0x34(%ebp)
f0109da2:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0109da5:	25 00 00 c0 ff       	and    $0xffc00000,%eax
f0109daa:	89 c1                	mov    %eax,%ecx
f0109dac:	8b 5d 08             	mov    0x8(%ebp),%ebx
f0109daf:	89 d0                	mov    %edx,%eax
f0109db1:	01 c0                	add    %eax,%eax
f0109db3:	01 d0                	add    %edx,%eax
f0109db5:	c1 e0 03             	shl    $0x3,%eax
f0109db8:	01 d8                	add    %ebx,%eax
f0109dba:	05 38 d5 01 00       	add    $0x1d538,%eax
f0109dbf:	89 08                	mov    %ecx,(%eax)
			e->__ptr_tws[e->table_last_WS_index].empty = 0;
f0109dc1:	8b 45 08             	mov    0x8(%ebp),%eax
f0109dc4:	8b 90 ec d9 01 00    	mov    0x1d9ec(%eax),%edx
f0109dca:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0109dcd:	89 d0                	mov    %edx,%eax
f0109dcf:	01 c0                	add    %eax,%eax
f0109dd1:	01 d0                	add    %edx,%eax
f0109dd3:	c1 e0 03             	shl    $0x3,%eax
f0109dd6:	01 c8                	add    %ecx,%eax
f0109dd8:	05 3c d5 01 00       	add    $0x1d53c,%eax
f0109ddd:	c6 00 00             	movb   $0x0,(%eax)
			e->__ptr_tws[e->table_last_WS_index].time_stamp = 0x00000000;
f0109de0:	8b 45 08             	mov    0x8(%ebp),%eax
f0109de3:	8b 90 ec d9 01 00    	mov    0x1d9ec(%eax),%edx
f0109de9:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0109dec:	89 d0                	mov    %edx,%eax
f0109dee:	01 c0                	add    %eax,%eax
f0109df0:	01 d0                	add    %edx,%eax
f0109df2:	c1 e0 03             	shl    $0x3,%eax
f0109df5:	01 c8                	add    %ecx,%eax
f0109df7:	05 40 d5 01 00       	add    $0x1d540,%eax
f0109dfc:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
			e->table_last_WS_index ++;
f0109e02:	8b 45 08             	mov    0x8(%ebp),%eax
f0109e05:	8b 80 ec d9 01 00    	mov    0x1d9ec(%eax),%eax
f0109e0b:	8d 50 01             	lea    0x1(%eax),%edx
f0109e0e:	8b 45 08             	mov    0x8(%ebp),%eax
f0109e11:	89 90 ec d9 01 00    	mov    %edx,0x1d9ec(%eax)
			e->table_last_WS_index %= __TWS_MAX_SIZE;
f0109e17:	8b 45 08             	mov    0x8(%ebp),%eax
f0109e1a:	8b 80 ec d9 01 00    	mov    0x1d9ec(%eax),%eax
f0109e20:	b9 32 00 00 00       	mov    $0x32,%ecx
f0109e25:	ba 00 00 00 00       	mov    $0x0,%edx
f0109e2a:	f7 f1                	div    %ecx
f0109e2c:	8b 45 08             	mov    0x8(%ebp),%eax
f0109e2f:	89 90 ec d9 01 00    	mov    %edx,0x1d9ec(%eax)
			if (e->table_last_WS_index == 0)
f0109e35:	8b 45 08             	mov    0x8(%ebp),%eax
f0109e38:	8b 80 ec d9 01 00    	mov    0x1d9ec(%eax),%eax
f0109e3e:	85 c0                	test   %eax,%eax
f0109e40:	75 17                	jne    f0109e59 <program_segment_alloc_map_copy_workingset+0x667>
				panic("\nenv_create: Table working set become FULL during the application loading. Please increase the table working set size to be able to load the program successfully\n");
f0109e42:	83 ec 04             	sub    $0x4,%esp
f0109e45:	68 d8 5d 13 f0       	push   $0xf0135dd8
f0109e4a:	68 96 02 00 00       	push   $0x296
f0109e4f:	68 93 5c 13 f0       	push   $0xf0135c93
f0109e54:	e8 4d 63 ff ff       	call   f01001a6 <_panic>
			(*lastTableNumber) = PDX(iVA);
f0109e59:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0109e5c:	c1 e8 16             	shr    $0x16,%eax
f0109e5f:	89 c2                	mov    %eax,%edx
f0109e61:	8b 45 18             	mov    0x18(%ebp),%eax
f0109e64:	89 10                	mov    %edx,(%eax)
		}

		/// TAKE CARE !!!! this was an destructive error
		/// DON'T MAKE IT " *allocated_pages ++ " EVER !
		(*allocated_pages) ++;
f0109e66:	8b 45 10             	mov    0x10(%ebp),%eax
f0109e69:	8b 00                	mov    (%eax),%eax
f0109e6b:	8d 50 01             	lea    0x1(%eax),%edx
f0109e6e:	8b 45 10             	mov    0x10(%ebp),%eax
f0109e71:	89 10                	mov    %edx,(%eax)
	*allocated_pages = 0;
	/*2015*/// Load max of 6 pages only for the segment that start with va = 200000 [EXCEPT tpp]
	if (iVA == 0x200000 && strcmp(e->prog_name, "tpp")!=0)
		remaining_ws_pages = remaining_ws_pages < 6 ? remaining_ws_pages:6 ;
	/*==========================================================================================*/
	for (; iVA < end_vaddr && i<remaining_ws_pages; i++, iVA += PAGE_SIZE)
f0109e73:	ff 45 f0             	incl   -0x10(%ebp)
f0109e76:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
f0109e7d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0109e80:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
f0109e83:	73 0c                	jae    f0109e91 <program_segment_alloc_map_copy_workingset+0x69f>
f0109e85:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0109e88:	3b 45 14             	cmp    0x14(%ebp),%eax
f0109e8b:	0f 82 10 fa ff ff    	jb     f01098a1 <program_segment_alloc_map_copy_workingset+0xaf>
		/// TAKE CARE !!!! this was an destructive error
		/// DON'T MAKE IT " *allocated_pages ++ " EVER !
		(*allocated_pages) ++;
	}

	uint8 *src_ptr = (uint8 *)(seg->ptr_start) ;
f0109e91:	8b 45 0c             	mov    0xc(%ebp),%eax
f0109e94:	8b 00                	mov    (%eax),%eax
f0109e96:	89 45 ec             	mov    %eax,-0x14(%ebp)
	uint8 *dst_ptr = (uint8 *) seg->virtual_address;
f0109e99:	8b 45 0c             	mov    0xc(%ebp),%eax
f0109e9c:	8b 40 0c             	mov    0xc(%eax),%eax
f0109e9f:	89 45 e8             	mov    %eax,-0x18(%ebp)

	//copy program segment page from (seg->ptr_start) to (seg->virtual_address)

	LOG_STATMENT(cprintf("copying data to allocated area VA %x from source %x",dst_ptr,src_ptr));
	while((uint32)dst_ptr < (ROUNDDOWN((uint32)vaddr,PAGE_SIZE) + (*allocated_pages)*PAGE_SIZE) &&
f0109ea2:	eb 10                	jmp    f0109eb4 <program_segment_alloc_map_copy_workingset+0x6c2>
			((uint32)dst_ptr< ((uint32)vaddr+ seg->size_in_file)) )
	{
		*dst_ptr = *src_ptr ;
f0109ea4:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0109ea7:	8a 10                	mov    (%eax),%dl
f0109ea9:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0109eac:	88 10                	mov    %dl,(%eax)
		dst_ptr++ ;
f0109eae:	ff 45 e8             	incl   -0x18(%ebp)
		src_ptr++ ;
f0109eb1:	ff 45 ec             	incl   -0x14(%ebp)
	uint8 *dst_ptr = (uint8 *) seg->virtual_address;

	//copy program segment page from (seg->ptr_start) to (seg->virtual_address)

	LOG_STATMENT(cprintf("copying data to allocated area VA %x from source %x",dst_ptr,src_ptr));
	while((uint32)dst_ptr < (ROUNDDOWN((uint32)vaddr,PAGE_SIZE) + (*allocated_pages)*PAGE_SIZE) &&
f0109eb4:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0109eb7:	89 45 c8             	mov    %eax,-0x38(%ebp)
f0109eba:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0109ebd:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0109ec2:	89 c2                	mov    %eax,%edx
f0109ec4:	8b 45 10             	mov    0x10(%ebp),%eax
f0109ec7:	8b 00                	mov    (%eax),%eax
f0109ec9:	c1 e0 0c             	shl    $0xc,%eax
f0109ecc:	01 c2                	add    %eax,%edx
f0109ece:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0109ed1:	39 c2                	cmp    %eax,%edx
f0109ed3:	76 1d                	jbe    f0109ef2 <program_segment_alloc_map_copy_workingset+0x700>
			((uint32)dst_ptr< ((uint32)vaddr+ seg->size_in_file)) )
f0109ed5:	8b 45 0c             	mov    0xc(%ebp),%eax
f0109ed8:	8b 50 04             	mov    0x4(%eax),%edx
f0109edb:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0109ede:	01 c2                	add    %eax,%edx
f0109ee0:	8b 45 e8             	mov    -0x18(%ebp),%eax
	uint8 *dst_ptr = (uint8 *) seg->virtual_address;

	//copy program segment page from (seg->ptr_start) to (seg->virtual_address)

	LOG_STATMENT(cprintf("copying data to allocated area VA %x from source %x",dst_ptr,src_ptr));
	while((uint32)dst_ptr < (ROUNDDOWN((uint32)vaddr,PAGE_SIZE) + (*allocated_pages)*PAGE_SIZE) &&
f0109ee3:	39 c2                	cmp    %eax,%edx
f0109ee5:	77 bd                	ja     f0109ea4 <program_segment_alloc_map_copy_workingset+0x6b2>
		*dst_ptr = *src_ptr ;
		dst_ptr++ ;
		src_ptr++ ;
	}
	LOG_STRING("zeroing remaining page space");
	while((uint32)dst_ptr < (ROUNDDOWN((uint32)vaddr,PAGE_SIZE) + (*allocated_pages)*PAGE_SIZE) )
f0109ee7:	eb 09                	jmp    f0109ef2 <program_segment_alloc_map_copy_workingset+0x700>
	{
		*dst_ptr = 0;
f0109ee9:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0109eec:	c6 00 00             	movb   $0x0,(%eax)
		dst_ptr++ ;
f0109eef:	ff 45 e8             	incl   -0x18(%ebp)
		*dst_ptr = *src_ptr ;
		dst_ptr++ ;
		src_ptr++ ;
	}
	LOG_STRING("zeroing remaining page space");
	while((uint32)dst_ptr < (ROUNDDOWN((uint32)vaddr,PAGE_SIZE) + (*allocated_pages)*PAGE_SIZE) )
f0109ef2:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0109ef5:	89 45 c4             	mov    %eax,-0x3c(%ebp)
f0109ef8:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0109efb:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0109f00:	89 c2                	mov    %eax,%edx
f0109f02:	8b 45 10             	mov    0x10(%ebp),%eax
f0109f05:	8b 00                	mov    (%eax),%eax
f0109f07:	c1 e0 0c             	shl    $0xc,%eax
f0109f0a:	01 c2                	add    %eax,%edx
f0109f0c:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0109f0f:	39 c2                	cmp    %eax,%edx
f0109f11:	77 d6                	ja     f0109ee9 <program_segment_alloc_map_copy_workingset+0x6f7>
	//	{
	//		uint32 *ptr_page_table;
	//		get_page_table(e->env_pgdir, iVA, 1, &ptr_page_table);
	//	}
	//	LOG_STRING("page tables created successfully");
	return 0;
f0109f13:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0109f18:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f0109f1b:	c9                   	leave  
f0109f1c:	c3                   	ret    

f0109f1d <initialize_environment>:
// and initialize the kernel portion of the new environment's address space.
// Do NOT (yet) map anything into the user portion
// of the environment's virtual address space.
//
void initialize_environment(struct Env* e, uint32* ptr_user_page_directory, unsigned int phys_user_page_directory)
{
f0109f1d:	55                   	push   %ebp
f0109f1e:	89 e5                	mov    %esp,%ebp
f0109f20:	53                   	push   %ebx
f0109f21:	83 ec 14             	sub    $0x14,%esp
	//panic("initialize_environment function is not completed yet") ;
	// [1] initialize the kernel portion of the new environment's address space.
	// [2] set e->env_pgdir and e->env_cr3 accordingly,
	int i;
	e->env_page_directory = ptr_user_page_directory;
f0109f24:	8b 45 08             	mov    0x8(%ebp),%eax
f0109f27:	8b 55 0c             	mov    0xc(%ebp),%edx
f0109f2a:	89 50 5c             	mov    %edx,0x5c(%eax)
	e->env_cr3 = phys_user_page_directory;
f0109f2d:	8b 45 08             	mov    0x8(%ebp),%eax
f0109f30:	8b 55 10             	mov    0x10(%ebp),%edx
f0109f33:	89 50 60             	mov    %edx,0x60(%eax)

	//[TODODONE]: copy the kernel area only (to avoid copying the currently shared objects)
	for (i = 0 ; i < PDX(USER_TOP) ; i++)
f0109f36:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0109f3d:	eb 17                	jmp    f0109f56 <initialize_environment+0x39>
	{
		e->env_page_directory[i] = 0 ;
f0109f3f:	8b 45 08             	mov    0x8(%ebp),%eax
f0109f42:	8b 40 5c             	mov    0x5c(%eax),%eax
f0109f45:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0109f48:	c1 e2 02             	shl    $0x2,%edx
f0109f4b:	01 d0                	add    %edx,%eax
f0109f4d:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	int i;
	e->env_page_directory = ptr_user_page_directory;
	e->env_cr3 = phys_user_page_directory;

	//[TODODONE]: copy the kernel area only (to avoid copying the currently shared objects)
	for (i = 0 ; i < PDX(USER_TOP) ; i++)
f0109f53:	ff 45 f4             	incl   -0xc(%ebp)
f0109f56:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0109f59:	3d ba 03 00 00       	cmp    $0x3ba,%eax
f0109f5e:	76 df                	jbe    f0109f3f <initialize_environment+0x22>
	{
		e->env_page_directory[i] = 0 ;
	}

	for (i = PDX(USER_TOP) ; i < 1024 ; i++)
f0109f60:	c7 45 f4 bb 03 00 00 	movl   $0x3bb,-0xc(%ebp)
f0109f67:	eb 22                	jmp    f0109f8b <initialize_environment+0x6e>
	{
		e->env_page_directory[i] = ptr_page_directory[i] ;
f0109f69:	8b 45 08             	mov    0x8(%ebp),%eax
f0109f6c:	8b 40 5c             	mov    0x5c(%eax),%eax
f0109f6f:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0109f72:	c1 e2 02             	shl    $0x2,%edx
f0109f75:	01 c2                	add    %eax,%edx
f0109f77:	a1 b8 0e 6c f0       	mov    0xf06c0eb8,%eax
f0109f7c:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0109f7f:	c1 e1 02             	shl    $0x2,%ecx
f0109f82:	01 c8                	add    %ecx,%eax
f0109f84:	8b 00                	mov    (%eax),%eax
f0109f86:	89 02                	mov    %eax,(%edx)
	for (i = 0 ; i < PDX(USER_TOP) ; i++)
	{
		e->env_page_directory[i] = 0 ;
	}

	for (i = PDX(USER_TOP) ; i < 1024 ; i++)
f0109f88:	ff 45 f4             	incl   -0xc(%ebp)
f0109f8b:	81 7d f4 ff 03 00 00 	cmpl   $0x3ff,-0xc(%ebp)
f0109f92:	7e d5                	jle    f0109f69 <initialize_environment+0x4c>
		e->ptr_pageWorkingSet = create_user_page_WS(e, e->page_WS_max_size);
		share_pws_at_user_space(e);
	}
#else
	{
		uint32 env_index = (uint32)(e-envs);
f0109f94:	8b 45 08             	mov    0x8(%ebp),%eax
f0109f97:	8b 15 10 82 65 f0    	mov    0xf0658210,%edx
f0109f9d:	29 d0                	sub    %edx,%eax
f0109f9f:	c1 f8 03             	sar    $0x3,%eax
f0109fa2:	89 c2                	mov    %eax,%edx
f0109fa4:	89 d0                	mov    %edx,%eax
f0109fa6:	c1 e0 03             	shl    $0x3,%eax
f0109fa9:	01 d0                	add    %edx,%eax
f0109fab:	c1 e0 03             	shl    $0x3,%eax
f0109fae:	01 d0                	add    %edx,%eax
f0109fb0:	01 c0                	add    %eax,%eax
f0109fb2:	01 d0                	add    %edx,%eax
f0109fb4:	01 c0                	add    %eax,%eax
f0109fb6:	01 d0                	add    %edx,%eax
f0109fb8:	8d 0c 85 00 00 00 00 	lea    0x0(,%eax,4),%ecx
f0109fbf:	01 c8                	add    %ecx,%eax
f0109fc1:	8d 0c 85 00 00 00 00 	lea    0x0(,%eax,4),%ecx
f0109fc8:	01 c8                	add    %ecx,%eax
f0109fca:	c1 e0 02             	shl    $0x2,%eax
f0109fcd:	01 d0                	add    %edx,%eax
f0109fcf:	01 c0                	add    %eax,%eax
f0109fd1:	01 d0                	add    %edx,%eax
f0109fd3:	01 c0                	add    %eax,%eax
f0109fd5:	01 d0                	add    %edx,%eax
f0109fd7:	c1 e0 02             	shl    $0x2,%eax
f0109fda:	01 d0                	add    %edx,%eax
f0109fdc:	01 c0                	add    %eax,%eax
f0109fde:	01 d0                	add    %edx,%eax
f0109fe0:	c1 e0 09             	shl    $0x9,%eax
f0109fe3:	29 d0                	sub    %edx,%eax
f0109fe5:	c1 e0 02             	shl    $0x2,%eax
f0109fe8:	01 d0                	add    %edx,%eax
f0109fea:	89 45 ec             	mov    %eax,-0x14(%ebp)
		e->__uptr_pws = (struct WorkingSetElement*) ( ((struct Env*)(UENVS+sizeof(struct Env)*env_index))->ptr_pageWorkingSet );
f0109fed:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0109ff0:	89 d0                	mov    %edx,%eax
f0109ff2:	01 c0                	add    %eax,%eax
f0109ff4:	01 d0                	add    %edx,%eax
f0109ff6:	8d 0c c5 00 00 00 00 	lea    0x0(,%eax,8),%ecx
f0109ffd:	01 c8                	add    %ecx,%eax
f0109fff:	c1 e0 02             	shl    $0x2,%eax
f010a002:	01 d0                	add    %edx,%eax
f010a004:	8d 0c c5 00 00 00 00 	lea    0x0(,%eax,8),%ecx
f010a00b:	01 c8                	add    %ecx,%eax
f010a00d:	c1 e0 02             	shl    $0x2,%eax
f010a010:	01 d0                	add    %edx,%eax
f010a012:	c1 e0 02             	shl    $0x2,%eax
f010a015:	01 d0                	add    %edx,%eax
f010a017:	c1 e0 03             	shl    $0x3,%eax
f010a01a:	2d 00 00 40 11       	sub    $0x11400000,%eax
f010a01f:	8d 50 78             	lea    0x78(%eax),%edx
f010a022:	8b 45 08             	mov    0x8(%ebp),%eax
f010a025:	89 90 58 da 01 00    	mov    %edx,0x1da58(%eax)
#endif


	//2020
	// Add its elements to the "e->PageWorkingSetList"
	if(isPageReplacmentAlgorithmLRU(PG_REP_LRU_LISTS_APPROX))
f010a02b:	83 ec 0c             	sub    $0xc,%esp
f010a02e:	6a 02                	push   $0x2
f010a030:	e8 38 35 00 00       	call   f010d56d <isPageReplacmentAlgorithmLRU>
f010a035:	83 c4 10             	add    $0x10,%esp
f010a038:	85 c0                	test   %eax,%eax
f010a03a:	0f 84 25 01 00 00    	je     f010a165 <initialize_environment+0x248>
	{
		for (int i = 0; i < e->page_WS_max_size; ++i)
f010a040:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f010a047:	e9 08 01 00 00       	jmp    f010a154 <initialize_environment+0x237>
		{
			LIST_INSERT_HEAD(&(e->PageWorkingSetList), &(e->ptr_pageWorkingSet[i]));
f010a04c:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010a04f:	89 d0                	mov    %edx,%eax
f010a051:	01 c0                	add    %eax,%eax
f010a053:	01 d0                	add    %edx,%eax
f010a055:	c1 e0 03             	shl    $0x3,%eax
f010a058:	8d 50 70             	lea    0x70(%eax),%edx
f010a05b:	8b 45 08             	mov    0x8(%ebp),%eax
f010a05e:	01 d0                	add    %edx,%eax
f010a060:	83 c0 08             	add    $0x8,%eax
f010a063:	85 c0                	test   %eax,%eax
f010a065:	75 17                	jne    f010a07e <initialize_environment+0x161>
f010a067:	83 ec 04             	sub    $0x4,%esp
f010a06a:	68 14 5d 13 f0       	push   $0xf0135d14
f010a06f:	68 f4 02 00 00       	push   $0x2f4
f010a074:	68 93 5c 13 f0       	push   $0xf0135c93
f010a079:	e8 28 61 ff ff       	call   f01001a6 <_panic>
f010a07e:	8b 45 08             	mov    0x8(%ebp),%eax
f010a081:	8b 90 70 ea 01 00    	mov    0x1ea70(%eax),%edx
f010a087:	8b 5d 08             	mov    0x8(%ebp),%ebx
f010a08a:	8b 4d f0             	mov    -0x10(%ebp),%ecx
f010a08d:	89 c8                	mov    %ecx,%eax
f010a08f:	01 c0                	add    %eax,%eax
f010a091:	01 c8                	add    %ecx,%eax
f010a093:	c1 e0 03             	shl    $0x3,%eax
f010a096:	01 d8                	add    %ebx,%eax
f010a098:	05 88 00 00 00       	add    $0x88,%eax
f010a09d:	89 10                	mov    %edx,(%eax)
f010a09f:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010a0a2:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010a0a5:	89 d0                	mov    %edx,%eax
f010a0a7:	01 c0                	add    %eax,%eax
f010a0a9:	01 d0                	add    %edx,%eax
f010a0ab:	c1 e0 03             	shl    $0x3,%eax
f010a0ae:	01 c8                	add    %ecx,%eax
f010a0b0:	05 88 00 00 00       	add    $0x88,%eax
f010a0b5:	8b 00                	mov    (%eax),%eax
f010a0b7:	85 c0                	test   %eax,%eax
f010a0b9:	74 25                	je     f010a0e0 <initialize_environment+0x1c3>
f010a0bb:	8b 45 08             	mov    0x8(%ebp),%eax
f010a0be:	8b 90 70 ea 01 00    	mov    0x1ea70(%eax),%edx
f010a0c4:	8b 4d f0             	mov    -0x10(%ebp),%ecx
f010a0c7:	89 c8                	mov    %ecx,%eax
f010a0c9:	01 c0                	add    %eax,%eax
f010a0cb:	01 c8                	add    %ecx,%eax
f010a0cd:	c1 e0 03             	shl    $0x3,%eax
f010a0d0:	8d 48 70             	lea    0x70(%eax),%ecx
f010a0d3:	8b 45 08             	mov    0x8(%ebp),%eax
f010a0d6:	01 c8                	add    %ecx,%eax
f010a0d8:	83 c0 08             	add    $0x8,%eax
f010a0db:	89 42 14             	mov    %eax,0x14(%edx)
f010a0de:	eb 20                	jmp    f010a100 <initialize_environment+0x1e3>
f010a0e0:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010a0e3:	89 d0                	mov    %edx,%eax
f010a0e5:	01 c0                	add    %eax,%eax
f010a0e7:	01 d0                	add    %edx,%eax
f010a0e9:	c1 e0 03             	shl    $0x3,%eax
f010a0ec:	8d 50 70             	lea    0x70(%eax),%edx
f010a0ef:	8b 45 08             	mov    0x8(%ebp),%eax
f010a0f2:	01 d0                	add    %edx,%eax
f010a0f4:	8d 50 08             	lea    0x8(%eax),%edx
f010a0f7:	8b 45 08             	mov    0x8(%ebp),%eax
f010a0fa:	89 90 74 ea 01 00    	mov    %edx,0x1ea74(%eax)
f010a100:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010a103:	89 d0                	mov    %edx,%eax
f010a105:	01 c0                	add    %eax,%eax
f010a107:	01 d0                	add    %edx,%eax
f010a109:	c1 e0 03             	shl    $0x3,%eax
f010a10c:	8d 50 70             	lea    0x70(%eax),%edx
f010a10f:	8b 45 08             	mov    0x8(%ebp),%eax
f010a112:	01 d0                	add    %edx,%eax
f010a114:	8d 50 08             	lea    0x8(%eax),%edx
f010a117:	8b 45 08             	mov    0x8(%ebp),%eax
f010a11a:	89 90 70 ea 01 00    	mov    %edx,0x1ea70(%eax)
f010a120:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010a123:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010a126:	89 d0                	mov    %edx,%eax
f010a128:	01 c0                	add    %eax,%eax
f010a12a:	01 d0                	add    %edx,%eax
f010a12c:	c1 e0 03             	shl    $0x3,%eax
f010a12f:	01 c8                	add    %ecx,%eax
f010a131:	05 8c 00 00 00       	add    $0x8c,%eax
f010a136:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f010a13c:	8b 45 08             	mov    0x8(%ebp),%eax
f010a13f:	8b 80 7c ea 01 00    	mov    0x1ea7c(%eax),%eax
f010a145:	8d 50 01             	lea    0x1(%eax),%edx
f010a148:	8b 45 08             	mov    0x8(%ebp),%eax
f010a14b:	89 90 7c ea 01 00    	mov    %edx,0x1ea7c(%eax)

	//2020
	// Add its elements to the "e->PageWorkingSetList"
	if(isPageReplacmentAlgorithmLRU(PG_REP_LRU_LISTS_APPROX))
	{
		for (int i = 0; i < e->page_WS_max_size; ++i)
f010a151:	ff 45 f0             	incl   -0x10(%ebp)
f010a154:	8b 45 08             	mov    0x8(%ebp),%eax
f010a157:	8b 50 74             	mov    0x74(%eax),%edx
f010a15a:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010a15d:	39 c2                	cmp    %eax,%edx
f010a15f:	0f 87 e7 fe ff ff    	ja     f010a04c <initialize_environment+0x12f>
			LIST_INSERT_HEAD(&(e->PageWorkingSetList), &(e->ptr_pageWorkingSet[i]));
		}
	}

	//initialize environment working set
	for(i=0; i< (e->page_WS_max_size); i++)
f010a165:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f010a16c:	eb 4e                	jmp    f010a1bc <initialize_environment+0x29f>
	{
		e->ptr_pageWorkingSet[i].virtual_address = 0;
f010a16e:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010a171:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010a174:	89 d0                	mov    %edx,%eax
f010a176:	01 c0                	add    %eax,%eax
f010a178:	01 d0                	add    %edx,%eax
f010a17a:	c1 e0 03             	shl    $0x3,%eax
f010a17d:	01 c8                	add    %ecx,%eax
f010a17f:	83 c0 78             	add    $0x78,%eax
f010a182:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
		e->ptr_pageWorkingSet[i].empty = 1;
f010a188:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010a18b:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010a18e:	89 d0                	mov    %edx,%eax
f010a190:	01 c0                	add    %eax,%eax
f010a192:	01 d0                	add    %edx,%eax
f010a194:	c1 e0 03             	shl    $0x3,%eax
f010a197:	01 c8                	add    %ecx,%eax
f010a199:	83 c0 7c             	add    $0x7c,%eax
f010a19c:	c6 00 01             	movb   $0x1,(%eax)
		e->ptr_pageWorkingSet[i].time_stamp = 0 ;
f010a19f:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010a1a2:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010a1a5:	89 d0                	mov    %edx,%eax
f010a1a7:	01 c0                	add    %eax,%eax
f010a1a9:	01 d0                	add    %edx,%eax
f010a1ab:	c1 e0 03             	shl    $0x3,%eax
f010a1ae:	01 c8                	add    %ecx,%eax
f010a1b0:	83 e8 80             	sub    $0xffffff80,%eax
f010a1b3:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
			LIST_INSERT_HEAD(&(e->PageWorkingSetList), &(e->ptr_pageWorkingSet[i]));
		}
	}

	//initialize environment working set
	for(i=0; i< (e->page_WS_max_size); i++)
f010a1b9:	ff 45 f4             	incl   -0xc(%ebp)
f010a1bc:	8b 45 08             	mov    0x8(%ebp),%eax
f010a1bf:	8b 50 74             	mov    0x74(%eax),%edx
f010a1c2:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010a1c5:	39 c2                	cmp    %eax,%edx
f010a1c7:	77 a5                	ja     f010a16e <initialize_environment+0x251>
	{
		e->ptr_pageWorkingSet[i].virtual_address = 0;
		e->ptr_pageWorkingSet[i].empty = 1;
		e->ptr_pageWorkingSet[i].time_stamp = 0 ;
	}
	e->page_last_WS_index = 0;
f010a1c9:	8b 45 08             	mov    0x8(%ebp),%eax
f010a1cc:	c7 80 e8 d9 01 00 00 	movl   $0x0,0x1d9e8(%eax)
f010a1d3:	00 00 00 

	for(i=0; i< __TWS_MAX_SIZE; i++)
f010a1d6:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f010a1dd:	eb 54                	jmp    f010a233 <initialize_environment+0x316>
	{
		e->__ptr_tws[i].virtual_address = 0;
f010a1df:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010a1e2:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010a1e5:	89 d0                	mov    %edx,%eax
f010a1e7:	01 c0                	add    %eax,%eax
f010a1e9:	01 d0                	add    %edx,%eax
f010a1eb:	c1 e0 03             	shl    $0x3,%eax
f010a1ee:	01 c8                	add    %ecx,%eax
f010a1f0:	05 38 d5 01 00       	add    $0x1d538,%eax
f010a1f5:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
		e->__ptr_tws[i].empty = 1;
f010a1fb:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010a1fe:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010a201:	89 d0                	mov    %edx,%eax
f010a203:	01 c0                	add    %eax,%eax
f010a205:	01 d0                	add    %edx,%eax
f010a207:	c1 e0 03             	shl    $0x3,%eax
f010a20a:	01 c8                	add    %ecx,%eax
f010a20c:	05 3c d5 01 00       	add    $0x1d53c,%eax
f010a211:	c6 00 01             	movb   $0x1,(%eax)
		e->__ptr_tws[i].time_stamp = 0 ;
f010a214:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010a217:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010a21a:	89 d0                	mov    %edx,%eax
f010a21c:	01 c0                	add    %eax,%eax
f010a21e:	01 d0                	add    %edx,%eax
f010a220:	c1 e0 03             	shl    $0x3,%eax
f010a223:	01 c8                	add    %ecx,%eax
f010a225:	05 40 d5 01 00       	add    $0x1d540,%eax
f010a22a:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
		e->ptr_pageWorkingSet[i].empty = 1;
		e->ptr_pageWorkingSet[i].time_stamp = 0 ;
	}
	e->page_last_WS_index = 0;

	for(i=0; i< __TWS_MAX_SIZE; i++)
f010a230:	ff 45 f4             	incl   -0xc(%ebp)
f010a233:	83 7d f4 31          	cmpl   $0x31,-0xc(%ebp)
f010a237:	7e a6                	jle    f010a1df <initialize_environment+0x2c2>
		e->__ptr_tws[i].virtual_address = 0;
		e->__ptr_tws[i].empty = 1;
		e->__ptr_tws[i].time_stamp = 0 ;
	}

	e->table_last_WS_index = 0;
f010a239:	8b 45 08             	mov    0x8(%ebp),%eax
f010a23c:	c7 80 ec d9 01 00 00 	movl   $0x0,0x1d9ec(%eax)
f010a243:	00 00 00 

	e->pageFaultsCounter=0;
f010a246:	8b 45 08             	mov    0x8(%ebp),%eax
f010a249:	c7 80 f0 d9 01 00 00 	movl   $0x0,0x1d9f0(%eax)
f010a250:	00 00 00 
	e->tableFaultsCounter=0;
f010a253:	8b 45 08             	mov    0x8(%ebp),%eax
f010a256:	c7 80 f4 d9 01 00 00 	movl   $0x0,0x1d9f4(%eax)
f010a25d:	00 00 00 

	e->freeingFullWSCounter = 0;
f010a260:	8b 45 08             	mov    0x8(%ebp),%eax
f010a263:	c7 80 f8 d9 01 00 00 	movl   $0x0,0x1d9f8(%eax)
f010a26a:	00 00 00 
	e->freeingScarceMemCounter = 0;
f010a26d:	8b 45 08             	mov    0x8(%ebp),%eax
f010a270:	c7 80 fc d9 01 00 00 	movl   $0x0,0x1d9fc(%eax)
f010a277:	00 00 00 

	e->nModifiedPages=0;
f010a27a:	8b 45 08             	mov    0x8(%ebp),%eax
f010a27d:	c7 80 00 da 01 00 00 	movl   $0x0,0x1da00(%eax)
f010a284:	00 00 00 
	e->nNotModifiedPages=0;
f010a287:	8b 45 08             	mov    0x8(%ebp),%eax
f010a28a:	c7 80 04 da 01 00 00 	movl   $0x0,0x1da04(%eax)
f010a291:	00 00 00 
	e->nClocks = 0;
f010a294:	8b 45 08             	mov    0x8(%ebp),%eax
f010a297:	c7 80 60 da 01 00 00 	movl   $0x0,0x1da60(%eax)
f010a29e:	00 00 00 

	//2020
	e->nPageIn = 0;
f010a2a1:	8b 45 08             	mov    0x8(%ebp),%eax
f010a2a4:	c7 80 08 da 01 00 00 	movl   $0x0,0x1da08(%eax)
f010a2ab:	00 00 00 
	e->nPageOut = 0;
f010a2ae:	8b 45 08             	mov    0x8(%ebp),%eax
f010a2b1:	c7 80 0c da 01 00 00 	movl   $0x0,0x1da0c(%eax)
f010a2b8:	00 00 00 
	e->nNewPageAdded = 0;
f010a2bb:	8b 45 08             	mov    0x8(%ebp),%eax
f010a2be:	c7 80 10 da 01 00 00 	movl   $0x0,0x1da10(%eax)
f010a2c5:	00 00 00 

	//e->shared_free_address = USER_SHARED_MEM_START;

	//Completes other environment initializations, (envID, status and most of registers)
	complete_environment_initialization(e);
f010a2c8:	83 ec 0c             	sub    $0xc,%esp
f010a2cb:	ff 75 08             	pushl  0x8(%ebp)
f010a2ce:	e8 09 00 00 00       	call   f010a2dc <complete_environment_initialization>
f010a2d3:	83 c4 10             	add    $0x10,%esp
}
f010a2d6:	90                   	nop
f010a2d7:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f010a2da:	c9                   	leave  
f010a2db:	c3                   	ret    

f010a2dc <complete_environment_initialization>:

//========================================================
// 8) COMPLETE INITIALIZATION [OTHERS: ID, REGS, STATUS...):
//========================================================
void complete_environment_initialization(struct Env* e)
{
f010a2dc:	55                   	push   %ebp
f010a2dd:	89 e5                	mov    %esp,%ebp
f010a2df:	53                   	push   %ebx
f010a2e0:	83 ec 14             	sub    $0x14,%esp
	//VPT and UVPT map the env's own page table, with
	//different permissions.
	e->env_page_directory[PDX(VPT)]  = e->env_cr3 | PERM_PRESENT | PERM_WRITEABLE;
f010a2e3:	8b 45 08             	mov    0x8(%ebp),%eax
f010a2e6:	8b 40 5c             	mov    0x5c(%eax),%eax
f010a2e9:	8d 90 fc 0e 00 00    	lea    0xefc(%eax),%edx
f010a2ef:	8b 45 08             	mov    0x8(%ebp),%eax
f010a2f2:	8b 40 60             	mov    0x60(%eax),%eax
f010a2f5:	83 c8 03             	or     $0x3,%eax
f010a2f8:	89 02                	mov    %eax,(%edx)
	e->env_page_directory[PDX(UVPT)] = e->env_cr3 | PERM_PRESENT | PERM_USER;
f010a2fa:	8b 45 08             	mov    0x8(%ebp),%eax
f010a2fd:	8b 40 5c             	mov    0x5c(%eax),%eax
f010a300:	8d 90 f4 0e 00 00    	lea    0xef4(%eax),%edx
f010a306:	8b 45 08             	mov    0x8(%ebp),%eax
f010a309:	8b 40 60             	mov    0x60(%eax),%eax
f010a30c:	83 c8 05             	or     $0x5,%eax
f010a30f:	89 02                	mov    %eax,(%edx)

	// page file directory initialization
	e->disk_env_pgdir= 0;
f010a311:	8b 45 08             	mov    0x8(%ebp),%eax
f010a314:	c7 40 64 00 00 00 00 	movl   $0x0,0x64(%eax)
	e->disk_env_pgdir_PA= 0;
f010a31b:	8b 45 08             	mov    0x8(%ebp),%eax
f010a31e:	c7 40 68 00 00 00 00 	movl   $0x0,0x68(%eax)
	e->disk_env_tabledir = 0;
f010a325:	8b 45 08             	mov    0x8(%ebp),%eax
f010a328:	c7 40 6c 00 00 00 00 	movl   $0x0,0x6c(%eax)
	e->disk_env_tabledir_PA = 0;
f010a32f:	8b 45 08             	mov    0x8(%ebp),%eax
f010a332:	c7 40 70 00 00 00 00 	movl   $0x0,0x70(%eax)

	int32 generation;
	// Generate an env_id for this environment.
	/*2022: UPDATED*/generation = (e->env_id + (1 << ENVGENSHIFT)) & ~(NEARPOW2NENV - 1);
f010a339:	8b 45 08             	mov    0x8(%ebp),%eax
f010a33c:	8b 58 4c             	mov    0x4c(%eax),%ebx
f010a33f:	83 ec 0c             	sub    $0xc,%esp
f010a342:	6a 08                	push   $0x8
f010a344:	e8 a2 51 02 00       	call   f012f4eb <log2_ceil>
f010a349:	83 c4 10             	add    $0x10,%esp
f010a34c:	ba 01 00 00 00       	mov    $0x1,%edx
f010a351:	88 c1                	mov    %al,%cl
f010a353:	d3 e2                	shl    %cl,%edx
f010a355:	89 d0                	mov    %edx,%eax
f010a357:	01 d8                	add    %ebx,%eax
f010a359:	89 c3                	mov    %eax,%ebx
f010a35b:	83 ec 0c             	sub    $0xc,%esp
f010a35e:	6a 08                	push   $0x8
f010a360:	e8 51 51 02 00       	call   f012f4b6 <nearest_pow2_ceil>
f010a365:	83 c4 10             	add    $0x10,%esp
f010a368:	f7 d8                	neg    %eax
f010a36a:	21 d8                	and    %ebx,%eax
f010a36c:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if (generation <= 0)	// Don't create a negative env_id.
f010a36f:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010a373:	7f 1b                	jg     f010a390 <complete_environment_initialization+0xb4>
		generation = 1 << ENVGENSHIFT;
f010a375:	83 ec 0c             	sub    $0xc,%esp
f010a378:	6a 08                	push   $0x8
f010a37a:	e8 6c 51 02 00       	call   f012f4eb <log2_ceil>
f010a37f:	83 c4 10             	add    $0x10,%esp
f010a382:	ba 01 00 00 00       	mov    $0x1,%edx
f010a387:	88 c1                	mov    %al,%cl
f010a389:	d3 e2                	shl    %cl,%edx
f010a38b:	89 d0                	mov    %edx,%eax
f010a38d:	89 45 f4             	mov    %eax,-0xc(%ebp)
	e->env_id = generation | (e - envs);
f010a390:	8b 45 08             	mov    0x8(%ebp),%eax
f010a393:	8b 15 10 82 65 f0    	mov    0xf0658210,%edx
f010a399:	29 d0                	sub    %edx,%eax
f010a39b:	c1 f8 03             	sar    $0x3,%eax
f010a39e:	89 c2                	mov    %eax,%edx
f010a3a0:	89 d0                	mov    %edx,%eax
f010a3a2:	c1 e0 03             	shl    $0x3,%eax
f010a3a5:	01 d0                	add    %edx,%eax
f010a3a7:	c1 e0 03             	shl    $0x3,%eax
f010a3aa:	01 d0                	add    %edx,%eax
f010a3ac:	01 c0                	add    %eax,%eax
f010a3ae:	01 d0                	add    %edx,%eax
f010a3b0:	01 c0                	add    %eax,%eax
f010a3b2:	01 d0                	add    %edx,%eax
f010a3b4:	8d 0c 85 00 00 00 00 	lea    0x0(,%eax,4),%ecx
f010a3bb:	01 c8                	add    %ecx,%eax
f010a3bd:	8d 0c 85 00 00 00 00 	lea    0x0(,%eax,4),%ecx
f010a3c4:	01 c8                	add    %ecx,%eax
f010a3c6:	c1 e0 02             	shl    $0x2,%eax
f010a3c9:	01 d0                	add    %edx,%eax
f010a3cb:	01 c0                	add    %eax,%eax
f010a3cd:	01 d0                	add    %edx,%eax
f010a3cf:	01 c0                	add    %eax,%eax
f010a3d1:	01 d0                	add    %edx,%eax
f010a3d3:	c1 e0 02             	shl    $0x2,%eax
f010a3d6:	01 d0                	add    %edx,%eax
f010a3d8:	01 c0                	add    %eax,%eax
f010a3da:	01 d0                	add    %edx,%eax
f010a3dc:	c1 e0 09             	shl    $0x9,%eax
f010a3df:	29 d0                	sub    %edx,%eax
f010a3e1:	c1 e0 02             	shl    $0x2,%eax
f010a3e4:	01 d0                	add    %edx,%eax
f010a3e6:	0b 45 f4             	or     -0xc(%ebp),%eax
f010a3e9:	89 c2                	mov    %eax,%edx
f010a3eb:	8b 45 08             	mov    0x8(%ebp),%eax
f010a3ee:	89 50 4c             	mov    %edx,0x4c(%eax)

	//cprintf("ENV_CREATE: envID = %d, orig index in envs = %d, calc index using ENVX = %d\n", e->env_id, (e - envs), ENVX(e->env_id));

	// Set the basic status variables.
	//2017====================================================
	if (curenv == NULL)
f010a3f1:	a1 14 82 65 f0       	mov    0xf0658214,%eax
f010a3f6:	85 c0                	test   %eax,%eax
f010a3f8:	75 0c                	jne    f010a406 <complete_environment_initialization+0x12a>
		e->env_parent_id = 0;//no parent;
f010a3fa:	8b 45 08             	mov    0x8(%ebp),%eax
f010a3fd:	c7 40 50 00 00 00 00 	movl   $0x0,0x50(%eax)
f010a404:	eb 0e                	jmp    f010a414 <complete_environment_initialization+0x138>
	else
		e->env_parent_id = curenv->env_id;//curenv is the parent;
f010a406:	a1 14 82 65 f0       	mov    0xf0658214,%eax
f010a40b:	8b 50 4c             	mov    0x4c(%eax),%edx
f010a40e:	8b 45 08             	mov    0x8(%ebp),%eax
f010a411:	89 50 50             	mov    %edx,0x50(%eax)
	//========================================================
	e->env_status = ENV_NEW;
f010a414:	8b 45 08             	mov    0x8(%ebp),%eax
f010a417:	c7 40 54 04 00 00 00 	movl   $0x4,0x54(%eax)
	e->env_runs = 0;
f010a41e:	8b 45 08             	mov    0x8(%ebp),%eax
f010a421:	c7 40 58 00 00 00 00 	movl   $0x0,0x58(%eax)

	// Clear out all the saved register state,
	// to prevent the register values
	// of a prior environment inhabiting this Env structure
	// from "leaking" into our new environment.
	memset(&e->env_tf, 0, sizeof(e->env_tf));
f010a428:	8b 45 08             	mov    0x8(%ebp),%eax
f010a42b:	83 ec 04             	sub    $0x4,%esp
f010a42e:	6a 44                	push   $0x44
f010a430:	6a 00                	push   $0x0
f010a432:	50                   	push   %eax
f010a433:	e8 e1 64 02 00       	call   f0130919 <memset>
f010a438:	83 c4 10             	add    $0x10,%esp
	// GD_UD is the user data segment selector in the GDT, and
	// GD_UT is the user text segment selector (see inc/memlayout.h).
	// The low 2 bits of each segment register contains the
	// Requester Privilege Level (RPL); 3 means user mode.

	e->env_tf.tf_ds = GD_UD | 3;
f010a43b:	8b 45 08             	mov    0x8(%ebp),%eax
f010a43e:	66 c7 40 24 23 00    	movw   $0x23,0x24(%eax)
	e->env_tf.tf_es = GD_UD | 3;
f010a444:	8b 45 08             	mov    0x8(%ebp),%eax
f010a447:	66 c7 40 20 23 00    	movw   $0x23,0x20(%eax)
	e->env_tf.tf_ss = GD_UD | 3;
f010a44d:	8b 45 08             	mov    0x8(%ebp),%eax
f010a450:	66 c7 40 40 23 00    	movw   $0x23,0x40(%eax)
	e->env_tf.tf_esp = (uint32*)USTACKTOP;
f010a456:	8b 45 08             	mov    0x8(%ebp),%eax
f010a459:	c7 40 3c 00 e0 bf ee 	movl   $0xeebfe000,0x3c(%eax)
	e->env_tf.tf_cs = GD_UT | 3;
f010a460:	8b 45 08             	mov    0x8(%ebp),%eax
f010a463:	66 c7 40 34 1b 00    	movw   $0x1b,0x34(%eax)
	e->env_tf.tf_eflags |= FL_IF;
f010a469:	8b 45 08             	mov    0x8(%ebp),%eax
f010a46c:	8b 40 38             	mov    0x38(%eax),%eax
f010a46f:	80 cc 02             	or     $0x2,%ah
f010a472:	89 c2                	mov    %eax,%edx
f010a474:	8b 45 08             	mov    0x8(%ebp),%eax
f010a477:	89 50 38             	mov    %edx,0x38(%eax)

	// You will set e->env_tf.tf_eip later.

	// commit the allocation
	LIST_REMOVE(&env_free_list ,e);
f010a47a:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f010a47e:	75 17                	jne    f010a497 <complete_environment_initialization+0x1bb>
f010a480:	83 ec 04             	sub    $0x4,%esp
f010a483:	68 f5 5c 13 f0       	push   $0xf0135cf5
f010a488:	68 58 03 00 00       	push   $0x358
f010a48d:	68 93 5c 13 f0       	push   $0xf0135c93
f010a492:	e8 0f 5d ff ff       	call   f01001a6 <_panic>
f010a497:	8b 45 08             	mov    0x8(%ebp),%eax
f010a49a:	8b 40 44             	mov    0x44(%eax),%eax
f010a49d:	85 c0                	test   %eax,%eax
f010a49f:	74 11                	je     f010a4b2 <complete_environment_initialization+0x1d6>
f010a4a1:	8b 45 08             	mov    0x8(%ebp),%eax
f010a4a4:	8b 40 44             	mov    0x44(%eax),%eax
f010a4a7:	8b 55 08             	mov    0x8(%ebp),%edx
f010a4aa:	8b 52 48             	mov    0x48(%edx),%edx
f010a4ad:	89 50 48             	mov    %edx,0x48(%eax)
f010a4b0:	eb 0b                	jmp    f010a4bd <complete_environment_initialization+0x1e1>
f010a4b2:	8b 45 08             	mov    0x8(%ebp),%eax
f010a4b5:	8b 40 48             	mov    0x48(%eax),%eax
f010a4b8:	a3 1c 82 65 f0       	mov    %eax,0xf065821c
f010a4bd:	8b 45 08             	mov    0x8(%ebp),%eax
f010a4c0:	8b 40 48             	mov    0x48(%eax),%eax
f010a4c3:	85 c0                	test   %eax,%eax
f010a4c5:	74 11                	je     f010a4d8 <complete_environment_initialization+0x1fc>
f010a4c7:	8b 45 08             	mov    0x8(%ebp),%eax
f010a4ca:	8b 40 48             	mov    0x48(%eax),%eax
f010a4cd:	8b 55 08             	mov    0x8(%ebp),%edx
f010a4d0:	8b 52 44             	mov    0x44(%edx),%edx
f010a4d3:	89 50 44             	mov    %edx,0x44(%eax)
f010a4d6:	eb 0b                	jmp    f010a4e3 <complete_environment_initialization+0x207>
f010a4d8:	8b 45 08             	mov    0x8(%ebp),%eax
f010a4db:	8b 40 44             	mov    0x44(%eax),%eax
f010a4de:	a3 18 82 65 f0       	mov    %eax,0xf0658218
f010a4e3:	8b 45 08             	mov    0x8(%ebp),%eax
f010a4e6:	c7 40 44 00 00 00 00 	movl   $0x0,0x44(%eax)
f010a4ed:	8b 45 08             	mov    0x8(%ebp),%eax
f010a4f0:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f010a4f7:	a1 24 82 65 f0       	mov    0xf0658224,%eax
f010a4fc:	48                   	dec    %eax
f010a4fd:	a3 24 82 65 f0       	mov    %eax,0xf0658224
	return ;
f010a502:	90                   	nop
}
f010a503:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f010a506:	c9                   	leave  
f010a507:	c3                   	ret    

f010a508 <set_environment_entry_point>:

//===============================================
// 9) SET EIP REG VALUE BY ENV ENTRY POINT:
//===============================================
void set_environment_entry_point(struct Env* e, uint8* ptr_program_start)
{
f010a508:	55                   	push   %ebp
f010a509:	89 e5                	mov    %esp,%ebp
f010a50b:	83 ec 18             	sub    $0x18,%esp
	struct Elf * pELFHDR = (struct Elf *)ptr_program_start ;
f010a50e:	8b 45 0c             	mov    0xc(%ebp),%eax
f010a511:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if (pELFHDR->e_magic != ELF_MAGIC)
f010a514:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010a517:	8b 00                	mov    (%eax),%eax
f010a519:	3d 7f 45 4c 46       	cmp    $0x464c457f,%eax
f010a51e:	74 17                	je     f010a537 <set_environment_entry_point+0x2f>
		panic("Matafa2nash 3ala Keda");
f010a520:	83 ec 04             	sub    $0x4,%esp
f010a523:	68 7b 5e 13 f0       	push   $0xf0135e7b
f010a528:	68 64 03 00 00       	push   $0x364
f010a52d:	68 93 5c 13 f0       	push   $0xf0135c93
f010a532:	e8 6f 5c ff ff       	call   f01001a6 <_panic>
	e->env_tf.tf_eip = (uint32*)pELFHDR->e_entry ;
f010a537:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010a53a:	8b 40 18             	mov    0x18(%eax),%eax
f010a53d:	89 c2                	mov    %eax,%edx
f010a53f:	8b 45 08             	mov    0x8(%ebp),%eax
f010a542:	89 50 30             	mov    %edx,0x30(%eax)
}
f010a545:	90                   	nop
f010a546:	c9                   	leave  
f010a547:	c3                   	ret    

f010a548 <share_pws_at_user_space>:

//===============================================
// 10) SHARE WS AT USER SPACE (READ ONLY):
//===============================================
void share_pws_at_user_space(struct Env* e)
{
f010a548:	55                   	push   %ebp
f010a549:	89 e5                	mov    %esp,%ebp
f010a54b:	83 ec 08             	sub    $0x8,%esp
			ptr_page_table = create_page_table(e->env_page_directory, (uint32) dva);
		}
		ptr_page_table[PTX(dva)] = CONSTRUCT_ENTRY(pa, PERM_USER | PERM_PRESENT);
	}
#else
	panic("share_pws_at_user_space(): should not be called when kernel heap is disabled.");
f010a54e:	83 ec 04             	sub    $0x4,%esp
f010a551:	68 94 5e 13 f0       	push   $0xf0135e94
f010a556:	68 81 03 00 00       	push   $0x381
f010a55b:	68 93 5c 13 f0       	push   $0xf0135c93
f010a560:	e8 41 5c ff ff       	call   f01001a6 <_panic>

f010a565 <unshare_pws_at_user_space>:

//===============================================
// 11) REMOVE THE SHARED WS FROM USER SPACE:
//===============================================
void unshare_pws_at_user_space(struct Env *e)
{
f010a565:	55                   	push   %ebp
f010a566:	89 e5                	mov    %esp,%ebp
f010a568:	83 ec 08             	sub    $0x8,%esp
			e->env_page_directory[PDX(tsva)] = 0;
		}
		tlbflush();
	}
#else
	panic("__remove_pws_user_pages(): should not be called when kernel heap is disabled.");
f010a56b:	83 ec 04             	sub    $0x4,%esp
f010a56e:	68 e4 5e 13 f0       	push   $0xf0135ee4
f010a573:	68 a0 03 00 00       	push   $0x3a0
f010a578:	68 93 5c 13 f0       	push   $0xf0135c93
f010a57d:	e8 24 5c ff ff       	call   f01001a6 <_panic>

f010a582 <PROGRAM_SEGMENT_NEXT>:

//===============================================
// 12) SEG NEXT [TO BE USED IN PROG_SEG_FOREACH]:
//===============================================
struct ProgramSegment* PROGRAM_SEGMENT_NEXT(struct ProgramSegment* seg, uint8* ptr_program_start)
{
f010a582:	55                   	push   %ebp
f010a583:	89 e5                	mov    %esp,%ebp
f010a585:	83 ec 18             	sub    $0x18,%esp
	int index = (*seg).segment_id++;
f010a588:	8b 45 08             	mov    0x8(%ebp),%eax
f010a58b:	8b 40 10             	mov    0x10(%eax),%eax
f010a58e:	8d 48 01             	lea    0x1(%eax),%ecx
f010a591:	8b 55 08             	mov    0x8(%ebp),%edx
f010a594:	89 4a 10             	mov    %ecx,0x10(%edx)
f010a597:	89 45 f4             	mov    %eax,-0xc(%ebp)

	struct Proghdr *ph, *eph;
	struct Elf * pELFHDR = (struct Elf *)ptr_program_start ;
f010a59a:	8b 45 0c             	mov    0xc(%ebp),%eax
f010a59d:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (pELFHDR->e_magic != ELF_MAGIC)
f010a5a0:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010a5a3:	8b 00                	mov    (%eax),%eax
f010a5a5:	3d 7f 45 4c 46       	cmp    $0x464c457f,%eax
f010a5aa:	74 17                	je     f010a5c3 <PROGRAM_SEGMENT_NEXT+0x41>
		panic("Matafa2nash 3ala Keda");
f010a5ac:	83 ec 04             	sub    $0x4,%esp
f010a5af:	68 7b 5e 13 f0       	push   $0xf0135e7b
f010a5b4:	68 ae 03 00 00       	push   $0x3ae
f010a5b9:	68 93 5c 13 f0       	push   $0xf0135c93
f010a5be:	e8 e3 5b ff ff       	call   f01001a6 <_panic>
	ph = (struct Proghdr *) ( ((uint8 *) ptr_program_start) + pELFHDR->e_phoff);
f010a5c3:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010a5c6:	8b 50 1c             	mov    0x1c(%eax),%edx
f010a5c9:	8b 45 0c             	mov    0xc(%ebp),%eax
f010a5cc:	01 d0                	add    %edx,%eax
f010a5ce:	89 45 ec             	mov    %eax,-0x14(%ebp)

	while (ph[(*seg).segment_id].p_type != ELF_PROG_LOAD && ((*seg).segment_id < pELFHDR->e_phnum)) (*seg).segment_id++;
f010a5d1:	eb 0f                	jmp    f010a5e2 <PROGRAM_SEGMENT_NEXT+0x60>
f010a5d3:	8b 45 08             	mov    0x8(%ebp),%eax
f010a5d6:	8b 40 10             	mov    0x10(%eax),%eax
f010a5d9:	8d 50 01             	lea    0x1(%eax),%edx
f010a5dc:	8b 45 08             	mov    0x8(%ebp),%eax
f010a5df:	89 50 10             	mov    %edx,0x10(%eax)
f010a5e2:	8b 45 08             	mov    0x8(%ebp),%eax
f010a5e5:	8b 40 10             	mov    0x10(%eax),%eax
f010a5e8:	c1 e0 05             	shl    $0x5,%eax
f010a5eb:	89 c2                	mov    %eax,%edx
f010a5ed:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010a5f0:	01 d0                	add    %edx,%eax
f010a5f2:	8b 00                	mov    (%eax),%eax
f010a5f4:	83 f8 01             	cmp    $0x1,%eax
f010a5f7:	74 13                	je     f010a60c <PROGRAM_SEGMENT_NEXT+0x8a>
f010a5f9:	8b 45 08             	mov    0x8(%ebp),%eax
f010a5fc:	8b 50 10             	mov    0x10(%eax),%edx
f010a5ff:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010a602:	8b 40 2c             	mov    0x2c(%eax),%eax
f010a605:	0f b7 c0             	movzwl %ax,%eax
f010a608:	39 c2                	cmp    %eax,%edx
f010a60a:	72 c7                	jb     f010a5d3 <PROGRAM_SEGMENT_NEXT+0x51>
	index = (*seg).segment_id;
f010a60c:	8b 45 08             	mov    0x8(%ebp),%eax
f010a60f:	8b 40 10             	mov    0x10(%eax),%eax
f010a612:	89 45 f4             	mov    %eax,-0xc(%ebp)

	if(index < pELFHDR->e_phnum)
f010a615:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010a618:	8b 40 2c             	mov    0x2c(%eax),%eax
f010a61b:	0f b7 c0             	movzwl %ax,%eax
f010a61e:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f010a621:	7e 63                	jle    f010a686 <PROGRAM_SEGMENT_NEXT+0x104>
	{
		(*seg).ptr_start = (uint8 *) ptr_program_start + ph[index].p_offset;
f010a623:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010a626:	c1 e0 05             	shl    $0x5,%eax
f010a629:	89 c2                	mov    %eax,%edx
f010a62b:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010a62e:	01 d0                	add    %edx,%eax
f010a630:	8b 50 04             	mov    0x4(%eax),%edx
f010a633:	8b 45 0c             	mov    0xc(%ebp),%eax
f010a636:	01 c2                	add    %eax,%edx
f010a638:	8b 45 08             	mov    0x8(%ebp),%eax
f010a63b:	89 10                	mov    %edx,(%eax)
		(*seg).size_in_memory =  ph[index].p_memsz;
f010a63d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010a640:	c1 e0 05             	shl    $0x5,%eax
f010a643:	89 c2                	mov    %eax,%edx
f010a645:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010a648:	01 d0                	add    %edx,%eax
f010a64a:	8b 50 14             	mov    0x14(%eax),%edx
f010a64d:	8b 45 08             	mov    0x8(%ebp),%eax
f010a650:	89 50 08             	mov    %edx,0x8(%eax)
		(*seg).size_in_file = ph[index].p_filesz;
f010a653:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010a656:	c1 e0 05             	shl    $0x5,%eax
f010a659:	89 c2                	mov    %eax,%edx
f010a65b:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010a65e:	01 d0                	add    %edx,%eax
f010a660:	8b 50 10             	mov    0x10(%eax),%edx
f010a663:	8b 45 08             	mov    0x8(%ebp),%eax
f010a666:	89 50 04             	mov    %edx,0x4(%eax)
		(*seg).virtual_address = (uint8*)ph[index].p_va;
f010a669:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010a66c:	c1 e0 05             	shl    $0x5,%eax
f010a66f:	89 c2                	mov    %eax,%edx
f010a671:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010a674:	01 d0                	add    %edx,%eax
f010a676:	8b 40 08             	mov    0x8(%eax),%eax
f010a679:	89 c2                	mov    %eax,%edx
f010a67b:	8b 45 08             	mov    0x8(%ebp),%eax
f010a67e:	89 50 0c             	mov    %edx,0xc(%eax)
		return seg;
f010a681:	8b 45 08             	mov    0x8(%ebp),%eax
f010a684:	eb 05                	jmp    f010a68b <PROGRAM_SEGMENT_NEXT+0x109>
	}
	return 0;
f010a686:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010a68b:	c9                   	leave  
f010a68c:	c3                   	ret    

f010a68d <PROGRAM_SEGMENT_FIRST>:

//===============================================
// 13) SEG FIRST [TO BE USED IN PROG_SEG_FOREACH]:
//===============================================
struct ProgramSegment PROGRAM_SEGMENT_FIRST( uint8* ptr_program_start)
{
f010a68d:	55                   	push   %ebp
f010a68e:	89 e5                	mov    %esp,%ebp
f010a690:	57                   	push   %edi
f010a691:	56                   	push   %esi
f010a692:	53                   	push   %ebx
f010a693:	83 ec 2c             	sub    $0x2c,%esp
	struct ProgramSegment seg;
	seg.segment_id = 0;
f010a696:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)

	struct Proghdr *ph, *eph;
	struct Elf * pELFHDR = (struct Elf *)ptr_program_start ;
f010a69d:	8b 45 0c             	mov    0xc(%ebp),%eax
f010a6a0:	89 45 e4             	mov    %eax,-0x1c(%ebp)
	if (pELFHDR->e_magic != ELF_MAGIC)
f010a6a3:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010a6a6:	8b 00                	mov    (%eax),%eax
f010a6a8:	3d 7f 45 4c 46       	cmp    $0x464c457f,%eax
f010a6ad:	74 17                	je     f010a6c6 <PROGRAM_SEGMENT_FIRST+0x39>
		panic("Matafa2nash 3ala Keda");
f010a6af:	83 ec 04             	sub    $0x4,%esp
f010a6b2:	68 7b 5e 13 f0       	push   $0xf0135e7b
f010a6b7:	68 ca 03 00 00       	push   $0x3ca
f010a6bc:	68 93 5c 13 f0       	push   $0xf0135c93
f010a6c1:	e8 e0 5a ff ff       	call   f01001a6 <_panic>
	ph = (struct Proghdr *) ( ((uint8 *) ptr_program_start) + pELFHDR->e_phoff);
f010a6c6:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010a6c9:	8b 50 1c             	mov    0x1c(%eax),%edx
f010a6cc:	8b 45 0c             	mov    0xc(%ebp),%eax
f010a6cf:	01 d0                	add    %edx,%eax
f010a6d1:	89 45 e0             	mov    %eax,-0x20(%ebp)
	while (ph[(seg).segment_id].p_type != ELF_PROG_LOAD && ((seg).segment_id < pELFHDR->e_phnum)) (seg).segment_id++;
f010a6d4:	eb 07                	jmp    f010a6dd <PROGRAM_SEGMENT_FIRST+0x50>
f010a6d6:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010a6d9:	40                   	inc    %eax
f010a6da:	89 45 d8             	mov    %eax,-0x28(%ebp)
f010a6dd:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010a6e0:	c1 e0 05             	shl    $0x5,%eax
f010a6e3:	89 c2                	mov    %eax,%edx
f010a6e5:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010a6e8:	01 d0                	add    %edx,%eax
f010a6ea:	8b 00                	mov    (%eax),%eax
f010a6ec:	83 f8 01             	cmp    $0x1,%eax
f010a6ef:	74 10                	je     f010a701 <PROGRAM_SEGMENT_FIRST+0x74>
f010a6f1:	8b 55 d8             	mov    -0x28(%ebp),%edx
f010a6f4:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010a6f7:	8b 40 2c             	mov    0x2c(%eax),%eax
f010a6fa:	0f b7 c0             	movzwl %ax,%eax
f010a6fd:	39 c2                	cmp    %eax,%edx
f010a6ff:	72 d5                	jb     f010a6d6 <PROGRAM_SEGMENT_FIRST+0x49>
	int index = (seg).segment_id;
f010a701:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010a704:	89 45 dc             	mov    %eax,-0x24(%ebp)

	if(index < pELFHDR->e_phnum)
f010a707:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010a70a:	8b 40 2c             	mov    0x2c(%eax),%eax
f010a70d:	0f b7 c0             	movzwl %ax,%eax
f010a710:	3b 45 dc             	cmp    -0x24(%ebp),%eax
f010a713:	7e 68                	jle    f010a77d <PROGRAM_SEGMENT_FIRST+0xf0>
	{
		(seg).ptr_start = (uint8 *) ptr_program_start + ph[index].p_offset;
f010a715:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010a718:	c1 e0 05             	shl    $0x5,%eax
f010a71b:	89 c2                	mov    %eax,%edx
f010a71d:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010a720:	01 d0                	add    %edx,%eax
f010a722:	8b 50 04             	mov    0x4(%eax),%edx
f010a725:	8b 45 0c             	mov    0xc(%ebp),%eax
f010a728:	01 d0                	add    %edx,%eax
f010a72a:	89 45 c8             	mov    %eax,-0x38(%ebp)
		(seg).size_in_memory =  ph[index].p_memsz;
f010a72d:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010a730:	c1 e0 05             	shl    $0x5,%eax
f010a733:	89 c2                	mov    %eax,%edx
f010a735:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010a738:	01 d0                	add    %edx,%eax
f010a73a:	8b 40 14             	mov    0x14(%eax),%eax
f010a73d:	89 45 d0             	mov    %eax,-0x30(%ebp)
		(seg).size_in_file = ph[index].p_filesz;
f010a740:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010a743:	c1 e0 05             	shl    $0x5,%eax
f010a746:	89 c2                	mov    %eax,%edx
f010a748:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010a74b:	01 d0                	add    %edx,%eax
f010a74d:	8b 40 10             	mov    0x10(%eax),%eax
f010a750:	89 45 cc             	mov    %eax,-0x34(%ebp)
		(seg).virtual_address = (uint8*)ph[index].p_va;
f010a753:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010a756:	c1 e0 05             	shl    $0x5,%eax
f010a759:	89 c2                	mov    %eax,%edx
f010a75b:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010a75e:	01 d0                	add    %edx,%eax
f010a760:	8b 40 08             	mov    0x8(%eax),%eax
f010a763:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		return seg;
f010a766:	8b 45 08             	mov    0x8(%ebp),%eax
f010a769:	89 c3                	mov    %eax,%ebx
f010a76b:	8d 45 c8             	lea    -0x38(%ebp),%eax
f010a76e:	ba 05 00 00 00       	mov    $0x5,%edx
f010a773:	89 df                	mov    %ebx,%edi
f010a775:	89 c6                	mov    %eax,%esi
f010a777:	89 d1                	mov    %edx,%ecx
f010a779:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
f010a77b:	eb 1c                	jmp    f010a799 <PROGRAM_SEGMENT_FIRST+0x10c>
	}
	seg.segment_id = -1;
f010a77d:	c7 45 d8 ff ff ff ff 	movl   $0xffffffff,-0x28(%ebp)
	return seg;
f010a784:	8b 45 08             	mov    0x8(%ebp),%eax
f010a787:	89 c3                	mov    %eax,%ebx
f010a789:	8d 45 c8             	lea    -0x38(%ebp),%eax
f010a78c:	ba 05 00 00 00       	mov    $0x5,%edx
f010a791:	89 df                	mov    %ebx,%edi
f010a793:	89 c6                	mov    %eax,%esi
f010a795:	89 d1                	mov    %edx,%ecx
f010a797:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
}
f010a799:	8b 45 08             	mov    0x8(%ebp),%eax
f010a79c:	8d 65 f4             	lea    -0xc(%ebp),%esp
f010a79f:	5b                   	pop    %ebx
f010a7a0:	5e                   	pop    %esi
f010a7a1:	5f                   	pop    %edi
f010a7a2:	5d                   	pop    %ebp
f010a7a3:	c2 04 00             	ret    $0x4

f010a7a6 <cleanup_buffers>:

//===============================================
// 14) CLEANUP MODIFIED BUFFER [TO BE USED AS LAST STEP WHEN ADD ENV TO EXIT Q]:
//===============================================
void cleanup_buffers(struct Env* e)
{
f010a7a6:	55                   	push   %ebp
f010a7a7:	89 e5                	mov    %esp,%ebp
f010a7a9:	83 ec 18             	sub    $0x18,%esp
	//NEW !! 2016, remove remaining pages in the modified list
	struct FrameInfo *ptr_fi=NULL ;
f010a7ac:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

	//	cprintf("[%s] deleting modified at end of env\n", curenv->prog_name);
	//	struct freeFramesCounters ffc = calculate_available_frames();
	//	cprintf("[%s] bef, mod = %d, fb = %d, fnb = %d\n",curenv->prog_name, ffc.modified, ffc.freeBuffered, ffc.freeNotBuffered);

	LIST_FOREACH(ptr_fi, &modified_frame_list)
f010a7b3:	a1 c0 8a 65 f0       	mov    0xf0658ac0,%eax
f010a7b8:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010a7bb:	e9 c3 00 00 00       	jmp    f010a883 <cleanup_buffers+0xdd>
	{
		if(ptr_fi->environment == e)
f010a7c0:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010a7c3:	8b 40 10             	mov    0x10(%eax),%eax
f010a7c6:	3b 45 08             	cmp    0x8(%ebp),%eax
f010a7c9:	0f 85 ac 00 00 00    	jne    f010a87b <cleanup_buffers+0xd5>
		{
			pt_clear_page_table_entry(ptr_fi->environment->env_page_directory,ptr_fi->va);
f010a7cf:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010a7d2:	8b 50 0c             	mov    0xc(%eax),%edx
f010a7d5:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010a7d8:	8b 40 10             	mov    0x10(%eax),%eax
f010a7db:	8b 40 5c             	mov    0x5c(%eax),%eax
f010a7de:	83 ec 08             	sub    $0x8,%esp
f010a7e1:	52                   	push   %edx
f010a7e2:	50                   	push   %eax
f010a7e3:	e8 1b d0 ff ff       	call   f0107803 <pt_clear_page_table_entry>
f010a7e8:	83 c4 10             	add    $0x10,%esp

			//cprintf("==================\n");
			//cprintf("[%s] ptr_fi = %x, ptr_fi next = %x \n",curenv->prog_name, ptr_fi, LIST_NEXT(ptr_fi));
			LIST_REMOVE(&modified_frame_list, ptr_fi);
f010a7eb:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010a7ef:	75 17                	jne    f010a808 <cleanup_buffers+0x62>
f010a7f1:	83 ec 04             	sub    $0x4,%esp
f010a7f4:	68 f5 5c 13 f0       	push   $0xf0135cf5
f010a7f9:	68 f1 03 00 00       	push   $0x3f1
f010a7fe:	68 93 5c 13 f0       	push   $0xf0135c93
f010a803:	e8 9e 59 ff ff       	call   f01001a6 <_panic>
f010a808:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010a80b:	8b 00                	mov    (%eax),%eax
f010a80d:	85 c0                	test   %eax,%eax
f010a80f:	74 10                	je     f010a821 <cleanup_buffers+0x7b>
f010a811:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010a814:	8b 00                	mov    (%eax),%eax
f010a816:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010a819:	8b 52 04             	mov    0x4(%edx),%edx
f010a81c:	89 50 04             	mov    %edx,0x4(%eax)
f010a81f:	eb 0b                	jmp    f010a82c <cleanup_buffers+0x86>
f010a821:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010a824:	8b 40 04             	mov    0x4(%eax),%eax
f010a827:	a3 c4 8a 65 f0       	mov    %eax,0xf0658ac4
f010a82c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010a82f:	8b 40 04             	mov    0x4(%eax),%eax
f010a832:	85 c0                	test   %eax,%eax
f010a834:	74 0f                	je     f010a845 <cleanup_buffers+0x9f>
f010a836:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010a839:	8b 40 04             	mov    0x4(%eax),%eax
f010a83c:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010a83f:	8b 12                	mov    (%edx),%edx
f010a841:	89 10                	mov    %edx,(%eax)
f010a843:	eb 0a                	jmp    f010a84f <cleanup_buffers+0xa9>
f010a845:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010a848:	8b 00                	mov    (%eax),%eax
f010a84a:	a3 c0 8a 65 f0       	mov    %eax,0xf0658ac0
f010a84f:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010a852:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f010a858:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010a85b:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f010a862:	a1 cc 8a 65 f0       	mov    0xf0658acc,%eax
f010a867:	48                   	dec    %eax
f010a868:	a3 cc 8a 65 f0       	mov    %eax,0xf0658acc

			free_frame(ptr_fi);
f010a86d:	83 ec 0c             	sub    $0xc,%esp
f010a870:	ff 75 f4             	pushl  -0xc(%ebp)
f010a873:	e8 47 c0 ff ff       	call   f01068bf <free_frame>
f010a878:	83 c4 10             	add    $0x10,%esp

	//	cprintf("[%s] deleting modified at end of env\n", curenv->prog_name);
	//	struct freeFramesCounters ffc = calculate_available_frames();
	//	cprintf("[%s] bef, mod = %d, fb = %d, fnb = %d\n",curenv->prog_name, ffc.modified, ffc.freeBuffered, ffc.freeNotBuffered);

	LIST_FOREACH(ptr_fi, &modified_frame_list)
f010a87b:	a1 c8 8a 65 f0       	mov    0xf0658ac8,%eax
f010a880:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010a883:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010a887:	74 07                	je     f010a890 <cleanup_buffers+0xea>
f010a889:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010a88c:	8b 00                	mov    (%eax),%eax
f010a88e:	eb 05                	jmp    f010a895 <cleanup_buffers+0xef>
f010a890:	b8 00 00 00 00       	mov    $0x0,%eax
f010a895:	a3 c8 8a 65 f0       	mov    %eax,0xf0658ac8
f010a89a:	a1 c8 8a 65 f0       	mov    0xf0658ac8,%eax
f010a89f:	85 c0                	test   %eax,%eax
f010a8a1:	0f 85 19 ff ff ff    	jne    f010a7c0 <cleanup_buffers+0x1a>
f010a8a7:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010a8ab:	0f 85 0f ff ff ff    	jne    f010a7c0 <cleanup_buffers+0x1a>
	}

	//	cprintf("[%s] finished deleting modified frames at the end of env\n", curenv->prog_name);
	//	struct freeFramesCounters ffc2 = calculate_available_frames();
	//	cprintf("[%s] aft, mod = %d, fb = %d, fnb = %d\n",curenv->prog_name, ffc2.modified, ffc2.freeBuffered, ffc2.freeNotBuffered);
}
f010a8b1:	90                   	nop
f010a8b2:	c9                   	leave  
f010a8b3:	c3                   	ret    

f010a8b4 <set_program_priority>:
#include "../disk/pagefile_manager.h"
#include "../mem/kheap.h"
#include "../mem/memory_manager.h"

void set_program_priority(struct Env* env, int priority)
{
f010a8b4:	55                   	push   %ebp
f010a8b5:	89 e5                	mov    %esp,%ebp
f010a8b7:	83 ec 08             	sub    $0x8,%esp
	//TODO: [PROJECT MS3 - BONUS] [PROGRAM PRIORITY] set_program_priority
	//[ALREADY IMPLEMENTED]

	if(priority < 1 || priority > 5)
f010a8ba:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
f010a8be:	7e 06                	jle    f010a8c6 <set_program_priority+0x12>
f010a8c0:	83 7d 0c 05          	cmpl   $0x5,0xc(%ebp)
f010a8c4:	7e 14                	jle    f010a8da <set_program_priority+0x26>
	{
		panic("Please enter valid priority (1->5)\n");
f010a8c6:	83 ec 04             	sub    $0x4,%esp
f010a8c9:	68 34 5f 13 f0       	push   $0xf0135f34
f010a8ce:	6a 10                	push   $0x10
f010a8d0:	68 58 5f 13 f0       	push   $0xf0135f58
f010a8d5:	e8 cc 58 ff ff       	call   f01001a6 <_panic>
		return;
	}
	if(env == NULL)
f010a8da:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f010a8de:	74 75                	je     f010a955 <set_program_priority+0xa1>
		return;
	switch(priority)
f010a8e0:	83 7d 0c 05          	cmpl   $0x5,0xc(%ebp)
f010a8e4:	77 56                	ja     f010a93c <set_program_priority+0x88>
f010a8e6:	8b 45 0c             	mov    0xc(%ebp),%eax
f010a8e9:	c1 e0 02             	shl    $0x2,%eax
f010a8ec:	05 94 5f 13 f0       	add    $0xf0135f94,%eax
f010a8f1:	8b 00                	mov    (%eax),%eax
f010a8f3:	ff e0                	jmp    *%eax
	{
		case PRIORITY_LOW:
			half_WS_Size(env, 1);
f010a8f5:	83 ec 08             	sub    $0x8,%esp
f010a8f8:	6a 01                	push   $0x1
f010a8fa:	ff 75 08             	pushl  0x8(%ebp)
f010a8fd:	e8 8b d9 ff ff       	call   f010828d <half_WS_Size>
f010a902:	83 c4 10             	add    $0x10,%esp
			break;
f010a905:	eb 35                	jmp    f010a93c <set_program_priority+0x88>
		case PRIORITY_BELOWNORMAL:
			half_WS_Size(env, 0);
f010a907:	83 ec 08             	sub    $0x8,%esp
f010a90a:	6a 00                	push   $0x0
f010a90c:	ff 75 08             	pushl  0x8(%ebp)
f010a90f:	e8 79 d9 ff ff       	call   f010828d <half_WS_Size>
f010a914:	83 c4 10             	add    $0x10,%esp
			break;
f010a917:	eb 23                	jmp    f010a93c <set_program_priority+0x88>
		case PRIORITY_NORMAL:
			// Do Nothing
			break;
		case PRIORITY_ABOVENORMAL:
			double_WS_Size(env, 1);
f010a919:	83 ec 08             	sub    $0x8,%esp
f010a91c:	6a 01                	push   $0x1
f010a91e:	ff 75 08             	pushl  0x8(%ebp)
f010a921:	e8 4a d9 ff ff       	call   f0108270 <double_WS_Size>
f010a926:	83 c4 10             	add    $0x10,%esp
			break;
f010a929:	eb 11                	jmp    f010a93c <set_program_priority+0x88>
		case PRIORITY_HIGH:
			double_WS_Size(env, 0);
f010a92b:	83 ec 08             	sub    $0x8,%esp
f010a92e:	6a 00                	push   $0x0
f010a930:	ff 75 08             	pushl  0x8(%ebp)
f010a933:	e8 38 d9 ff ff       	call   f0108270 <double_WS_Size>
f010a938:	83 c4 10             	add    $0x10,%esp
			break;
f010a93b:	90                   	nop
	}

	cprintf("The new size of the ws is %d\n", env->page_WS_max_size);
f010a93c:	8b 45 08             	mov    0x8(%ebp),%eax
f010a93f:	8b 40 74             	mov    0x74(%eax),%eax
f010a942:	83 ec 08             	sub    $0x8,%esp
f010a945:	50                   	push   %eax
f010a946:	68 75 5f 13 f0       	push   $0xf0135f75
f010a94b:	e8 dd 62 ff ff       	call   f0100c2d <cprintf>
f010a950:	83 c4 10             	add    $0x10,%esp
f010a953:	eb 01                	jmp    f010a956 <set_program_priority+0xa2>
	{
		panic("Please enter valid priority (1->5)\n");
		return;
	}
	if(env == NULL)
		return;
f010a955:	90                   	nop
			double_WS_Size(env, 0);
			break;
	}

	cprintf("The new size of the ws is %d\n", env->page_WS_max_size);
}
f010a956:	c9                   	leave  
f010a957:	c3                   	ret    

f010a958 <get_user_program_info>:

// Number of user programs in the program table
int NUM_USER_PROGS = (sizeof(userPrograms)/sizeof(userPrograms[0]));

struct UserProgramInfo* get_user_program_info(char* user_program_name)
{
f010a958:	55                   	push   %ebp
f010a959:	89 e5                	mov    %esp,%ebp
f010a95b:	83 ec 18             	sub    $0x18,%esp
	int i;
	for (i = 0; i < NUM_USER_PROGS; i++) {
f010a95e:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f010a965:	eb 29                	jmp    f010a990 <get_user_program_info+0x38>
		if (strcmp(user_program_name, userPrograms[i].name) == 0)
f010a967:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010a96a:	89 d0                	mov    %edx,%eax
f010a96c:	01 c0                	add    %eax,%eax
f010a96e:	01 d0                	add    %edx,%eax
f010a970:	c1 e0 02             	shl    $0x2,%eax
f010a973:	05 00 09 19 f0       	add    $0xf0190900,%eax
f010a978:	8b 00                	mov    (%eax),%eax
f010a97a:	83 ec 08             	sub    $0x8,%esp
f010a97d:	50                   	push   %eax
f010a97e:	ff 75 08             	pushl  0x8(%ebp)
f010a981:	e8 b1 5e 02 00       	call   f0130837 <strcmp>
f010a986:	83 c4 10             	add    $0x10,%esp
f010a989:	85 c0                	test   %eax,%eax
f010a98b:	74 0f                	je     f010a99c <get_user_program_info+0x44>
int NUM_USER_PROGS = (sizeof(userPrograms)/sizeof(userPrograms[0]));

struct UserProgramInfo* get_user_program_info(char* user_program_name)
{
	int i;
	for (i = 0; i < NUM_USER_PROGS; i++) {
f010a98d:	ff 45 f4             	incl   -0xc(%ebp)
f010a990:	a1 c4 0c 19 f0       	mov    0xf0190cc4,%eax
f010a995:	39 45 f4             	cmp    %eax,-0xc(%ebp)
f010a998:	7c cd                	jl     f010a967 <get_user_program_info+0xf>
f010a99a:	eb 01                	jmp    f010a99d <get_user_program_info+0x45>
		if (strcmp(user_program_name, userPrograms[i].name) == 0)
			break;
f010a99c:	90                   	nop
	}
	if(i==NUM_USER_PROGS)
f010a99d:	a1 c4 0c 19 f0       	mov    0xf0190cc4,%eax
f010a9a2:	39 45 f4             	cmp    %eax,-0xc(%ebp)
f010a9a5:	75 1a                	jne    f010a9c1 <get_user_program_info+0x69>
	{
		cprintf("Unknown user program '%s'\n", user_program_name);
f010a9a7:	83 ec 08             	sub    $0x8,%esp
f010a9aa:	ff 75 08             	pushl  0x8(%ebp)
f010a9ad:	68 c1 69 13 f0       	push   $0xf01369c1
f010a9b2:	e8 76 62 ff ff       	call   f0100c2d <cprintf>
f010a9b7:	83 c4 10             	add    $0x10,%esp
		return 0;
f010a9ba:	b8 00 00 00 00       	mov    $0x0,%eax
f010a9bf:	eb 11                	jmp    f010a9d2 <get_user_program_info+0x7a>
	}

	return &userPrograms[i];
f010a9c1:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010a9c4:	89 d0                	mov    %edx,%eax
f010a9c6:	01 c0                	add    %eax,%eax
f010a9c8:	01 d0                	add    %edx,%eax
f010a9ca:	c1 e0 02             	shl    $0x2,%eax
f010a9cd:	05 00 09 19 f0       	add    $0xf0190900,%eax
}
f010a9d2:	c9                   	leave  
f010a9d3:	c3                   	ret    

f010a9d4 <get_user_program_info_by_env>:

struct UserProgramInfo* get_user_program_info_by_env(struct Env* e)
{
f010a9d4:	55                   	push   %ebp
f010a9d5:	89 e5                	mov    %esp,%ebp
f010a9d7:	83 ec 18             	sub    $0x18,%esp
	int i;
	for (i = 0; i < NUM_USER_PROGS; i++) {
f010a9da:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f010a9e1:	eb 30                	jmp    f010aa13 <get_user_program_info_by_env+0x3f>
		if ( strcmp( e->prog_name , userPrograms[i].name) ==0)
f010a9e3:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010a9e6:	89 d0                	mov    %edx,%eax
f010a9e8:	01 c0                	add    %eax,%eax
f010a9ea:	01 d0                	add    %edx,%eax
f010a9ec:	c1 e0 02             	shl    $0x2,%eax
f010a9ef:	05 00 09 19 f0       	add    $0xf0190900,%eax
f010a9f4:	8b 00                	mov    (%eax),%eax
f010a9f6:	8b 55 08             	mov    0x8(%ebp),%edx
f010a9f9:	81 c2 18 da 01 00    	add    $0x1da18,%edx
f010a9ff:	83 ec 08             	sub    $0x8,%esp
f010aa02:	50                   	push   %eax
f010aa03:	52                   	push   %edx
f010aa04:	e8 2e 5e 02 00       	call   f0130837 <strcmp>
f010aa09:	83 c4 10             	add    $0x10,%esp
f010aa0c:	85 c0                	test   %eax,%eax
f010aa0e:	74 0f                	je     f010aa1f <get_user_program_info_by_env+0x4b>
}

struct UserProgramInfo* get_user_program_info_by_env(struct Env* e)
{
	int i;
	for (i = 0; i < NUM_USER_PROGS; i++) {
f010aa10:	ff 45 f4             	incl   -0xc(%ebp)
f010aa13:	a1 c4 0c 19 f0       	mov    0xf0190cc4,%eax
f010aa18:	39 45 f4             	cmp    %eax,-0xc(%ebp)
f010aa1b:	7c c6                	jl     f010a9e3 <get_user_program_info_by_env+0xf>
f010aa1d:	eb 01                	jmp    f010aa20 <get_user_program_info_by_env+0x4c>
		if ( strcmp( e->prog_name , userPrograms[i].name) ==0)
			break;
f010aa1f:	90                   	nop
	}
	if(i==NUM_USER_PROGS)
f010aa20:	a1 c4 0c 19 f0       	mov    0xf0190cc4,%eax
f010aa25:	39 45 f4             	cmp    %eax,-0xc(%ebp)
f010aa28:	75 17                	jne    f010aa41 <get_user_program_info_by_env+0x6d>
	{
		cprintf("Unknown user program \n");
f010aa2a:	83 ec 0c             	sub    $0xc,%esp
f010aa2d:	68 dc 69 13 f0       	push   $0xf01369dc
f010aa32:	e8 f6 61 ff ff       	call   f0100c2d <cprintf>
f010aa37:	83 c4 10             	add    $0x10,%esp
		return 0;
f010aa3a:	b8 00 00 00 00       	mov    $0x0,%eax
f010aa3f:	eb 11                	jmp    f010aa52 <get_user_program_info_by_env+0x7e>
	}

	return &userPrograms[i];
f010aa41:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010aa44:	89 d0                	mov    %edx,%eax
f010aa46:	01 c0                	add    %eax,%eax
f010aa48:	01 d0                	add    %edx,%eax
f010aa4a:	c1 e0 02             	shl    $0x2,%eax
f010aa4d:	05 00 09 19 f0       	add    $0xf0190900,%eax
}
f010aa52:	c9                   	leave  
f010aa53:	c3                   	ret    

f010aa54 <trapname>:
extern  void (*ALL_FAULTS47)();



static const char *trapname(int trapno)
{
f010aa54:	55                   	push   %ebp
f010aa55:	89 e5                	mov    %esp,%ebp
			"Alignment Check",
			"Machine-Check",
			"SIMD Floating-Point Exception"
	};

	if (trapno < sizeof(excnames)/sizeof(excnames[0]))
f010aa57:	8b 45 08             	mov    0x8(%ebp),%eax
f010aa5a:	83 f8 13             	cmp    $0x13,%eax
f010aa5d:	77 0c                	ja     f010aa6b <trapname+0x17>
		return excnames[trapno];
f010aa5f:	8b 45 08             	mov    0x8(%ebp),%eax
f010aa62:	8b 04 85 60 6d 13 f0 	mov    -0xfec92a0(,%eax,4),%eax
f010aa69:	eb 12                	jmp    f010aa7d <trapname+0x29>
	if (trapno == T_SYSCALL)
f010aa6b:	83 7d 08 30          	cmpl   $0x30,0x8(%ebp)
f010aa6f:	75 07                	jne    f010aa78 <trapname+0x24>
		return "System call";
f010aa71:	b8 00 6a 13 f0       	mov    $0xf0136a00,%eax
f010aa76:	eb 05                	jmp    f010aa7d <trapname+0x29>
	return "(unknown trap)";
f010aa78:	b8 0c 6a 13 f0       	mov    $0xf0136a0c,%eax
}
f010aa7d:	5d                   	pop    %ebp
f010aa7e:	c3                   	ret    

f010aa7f <idt_init>:


void
idt_init(void)
{
f010aa7f:	55                   	push   %ebp
f010aa80:	89 e5                	mov    %esp,%ebp
f010aa82:	83 ec 10             	sub    $0x10,%esp
	extern struct Segdesc gdt[];

	// LAB 3: Your code here.
	//initialize idt
	SETGATE(idt[T_PGFLT], 0, GD_KT , &PAGE_FAULT, 0) ;
f010aa85:	b8 82 c0 10 f0       	mov    $0xf010c082,%eax
f010aa8a:	66 a3 b0 82 65 f0    	mov    %ax,0xf06582b0
f010aa90:	66 c7 05 b2 82 65 f0 	movw   $0x8,0xf06582b2
f010aa97:	08 00 
f010aa99:	a0 b4 82 65 f0       	mov    0xf06582b4,%al
f010aa9e:	83 e0 e0             	and    $0xffffffe0,%eax
f010aaa1:	a2 b4 82 65 f0       	mov    %al,0xf06582b4
f010aaa6:	a0 b4 82 65 f0       	mov    0xf06582b4,%al
f010aaab:	83 e0 1f             	and    $0x1f,%eax
f010aaae:	a2 b4 82 65 f0       	mov    %al,0xf06582b4
f010aab3:	a0 b5 82 65 f0       	mov    0xf06582b5,%al
f010aab8:	83 e0 f0             	and    $0xfffffff0,%eax
f010aabb:	83 c8 0e             	or     $0xe,%eax
f010aabe:	a2 b5 82 65 f0       	mov    %al,0xf06582b5
f010aac3:	a0 b5 82 65 f0       	mov    0xf06582b5,%al
f010aac8:	83 e0 ef             	and    $0xffffffef,%eax
f010aacb:	a2 b5 82 65 f0       	mov    %al,0xf06582b5
f010aad0:	a0 b5 82 65 f0       	mov    0xf06582b5,%al
f010aad5:	83 e0 9f             	and    $0xffffff9f,%eax
f010aad8:	a2 b5 82 65 f0       	mov    %al,0xf06582b5
f010aadd:	a0 b5 82 65 f0       	mov    0xf06582b5,%al
f010aae2:	83 c8 80             	or     $0xffffff80,%eax
f010aae5:	a2 b5 82 65 f0       	mov    %al,0xf06582b5
f010aaea:	b8 82 c0 10 f0       	mov    $0xf010c082,%eax
f010aaef:	c1 e8 10             	shr    $0x10,%eax
f010aaf2:	66 a3 b6 82 65 f0    	mov    %ax,0xf06582b6
	SETGATE(idt[T_SYSCALL], 0, GD_KT , &SYSCALL_HANDLER, 3) ;
f010aaf8:	b8 8a c0 10 f0       	mov    $0xf010c08a,%eax
f010aafd:	66 a3 c0 83 65 f0    	mov    %ax,0xf06583c0
f010ab03:	66 c7 05 c2 83 65 f0 	movw   $0x8,0xf06583c2
f010ab0a:	08 00 
f010ab0c:	a0 c4 83 65 f0       	mov    0xf06583c4,%al
f010ab11:	83 e0 e0             	and    $0xffffffe0,%eax
f010ab14:	a2 c4 83 65 f0       	mov    %al,0xf06583c4
f010ab19:	a0 c4 83 65 f0       	mov    0xf06583c4,%al
f010ab1e:	83 e0 1f             	and    $0x1f,%eax
f010ab21:	a2 c4 83 65 f0       	mov    %al,0xf06583c4
f010ab26:	a0 c5 83 65 f0       	mov    0xf06583c5,%al
f010ab2b:	83 e0 f0             	and    $0xfffffff0,%eax
f010ab2e:	83 c8 0e             	or     $0xe,%eax
f010ab31:	a2 c5 83 65 f0       	mov    %al,0xf06583c5
f010ab36:	a0 c5 83 65 f0       	mov    0xf06583c5,%al
f010ab3b:	83 e0 ef             	and    $0xffffffef,%eax
f010ab3e:	a2 c5 83 65 f0       	mov    %al,0xf06583c5
f010ab43:	a0 c5 83 65 f0       	mov    0xf06583c5,%al
f010ab48:	83 c8 60             	or     $0x60,%eax
f010ab4b:	a2 c5 83 65 f0       	mov    %al,0xf06583c5
f010ab50:	a0 c5 83 65 f0       	mov    0xf06583c5,%al
f010ab55:	83 c8 80             	or     $0xffffff80,%eax
f010ab58:	a2 c5 83 65 f0       	mov    %al,0xf06583c5
f010ab5d:	b8 8a c0 10 f0       	mov    $0xf010c08a,%eax
f010ab62:	c1 e8 10             	shr    $0x10,%eax
f010ab65:	66 a3 c6 83 65 f0    	mov    %ax,0xf06583c6
	SETGATE(idt[T_DBLFLT], 0, GD_KT , &DBL_FAULT, 0) ;
f010ab6b:	b8 94 c0 10 f0       	mov    $0xf010c094,%eax
f010ab70:	66 a3 80 82 65 f0    	mov    %ax,0xf0658280
f010ab76:	66 c7 05 82 82 65 f0 	movw   $0x8,0xf0658282
f010ab7d:	08 00 
f010ab7f:	a0 84 82 65 f0       	mov    0xf0658284,%al
f010ab84:	83 e0 e0             	and    $0xffffffe0,%eax
f010ab87:	a2 84 82 65 f0       	mov    %al,0xf0658284
f010ab8c:	a0 84 82 65 f0       	mov    0xf0658284,%al
f010ab91:	83 e0 1f             	and    $0x1f,%eax
f010ab94:	a2 84 82 65 f0       	mov    %al,0xf0658284
f010ab99:	a0 85 82 65 f0       	mov    0xf0658285,%al
f010ab9e:	83 e0 f0             	and    $0xfffffff0,%eax
f010aba1:	83 c8 0e             	or     $0xe,%eax
f010aba4:	a2 85 82 65 f0       	mov    %al,0xf0658285
f010aba9:	a0 85 82 65 f0       	mov    0xf0658285,%al
f010abae:	83 e0 ef             	and    $0xffffffef,%eax
f010abb1:	a2 85 82 65 f0       	mov    %al,0xf0658285
f010abb6:	a0 85 82 65 f0       	mov    0xf0658285,%al
f010abbb:	83 e0 9f             	and    $0xffffff9f,%eax
f010abbe:	a2 85 82 65 f0       	mov    %al,0xf0658285
f010abc3:	a0 85 82 65 f0       	mov    0xf0658285,%al
f010abc8:	83 c8 80             	or     $0xffffff80,%eax
f010abcb:	a2 85 82 65 f0       	mov    %al,0xf0658285
f010abd0:	b8 94 c0 10 f0       	mov    $0xf010c094,%eax
f010abd5:	c1 e8 10             	shr    $0x10,%eax
f010abd8:	66 a3 86 82 65 f0    	mov    %ax,0xf0658286


	SETGATE(idt[T_DIVIDE   ], 0, GD_KT , &ALL_FAULTS0, 3) ;
f010abde:	b8 9c c0 10 f0       	mov    $0xf010c09c,%eax
f010abe3:	66 a3 40 82 65 f0    	mov    %ax,0xf0658240
f010abe9:	66 c7 05 42 82 65 f0 	movw   $0x8,0xf0658242
f010abf0:	08 00 
f010abf2:	a0 44 82 65 f0       	mov    0xf0658244,%al
f010abf7:	83 e0 e0             	and    $0xffffffe0,%eax
f010abfa:	a2 44 82 65 f0       	mov    %al,0xf0658244
f010abff:	a0 44 82 65 f0       	mov    0xf0658244,%al
f010ac04:	83 e0 1f             	and    $0x1f,%eax
f010ac07:	a2 44 82 65 f0       	mov    %al,0xf0658244
f010ac0c:	a0 45 82 65 f0       	mov    0xf0658245,%al
f010ac11:	83 e0 f0             	and    $0xfffffff0,%eax
f010ac14:	83 c8 0e             	or     $0xe,%eax
f010ac17:	a2 45 82 65 f0       	mov    %al,0xf0658245
f010ac1c:	a0 45 82 65 f0       	mov    0xf0658245,%al
f010ac21:	83 e0 ef             	and    $0xffffffef,%eax
f010ac24:	a2 45 82 65 f0       	mov    %al,0xf0658245
f010ac29:	a0 45 82 65 f0       	mov    0xf0658245,%al
f010ac2e:	83 c8 60             	or     $0x60,%eax
f010ac31:	a2 45 82 65 f0       	mov    %al,0xf0658245
f010ac36:	a0 45 82 65 f0       	mov    0xf0658245,%al
f010ac3b:	83 c8 80             	or     $0xffffff80,%eax
f010ac3e:	a2 45 82 65 f0       	mov    %al,0xf0658245
f010ac43:	b8 9c c0 10 f0       	mov    $0xf010c09c,%eax
f010ac48:	c1 e8 10             	shr    $0x10,%eax
f010ac4b:	66 a3 46 82 65 f0    	mov    %ax,0xf0658246
	SETGATE(idt[T_DEBUG    ], 1, GD_KT , &ALL_FAULTS1, 3) ;
f010ac51:	b8 a6 c0 10 f0       	mov    $0xf010c0a6,%eax
f010ac56:	66 a3 48 82 65 f0    	mov    %ax,0xf0658248
f010ac5c:	66 c7 05 4a 82 65 f0 	movw   $0x8,0xf065824a
f010ac63:	08 00 
f010ac65:	a0 4c 82 65 f0       	mov    0xf065824c,%al
f010ac6a:	83 e0 e0             	and    $0xffffffe0,%eax
f010ac6d:	a2 4c 82 65 f0       	mov    %al,0xf065824c
f010ac72:	a0 4c 82 65 f0       	mov    0xf065824c,%al
f010ac77:	83 e0 1f             	and    $0x1f,%eax
f010ac7a:	a2 4c 82 65 f0       	mov    %al,0xf065824c
f010ac7f:	a0 4d 82 65 f0       	mov    0xf065824d,%al
f010ac84:	83 c8 0f             	or     $0xf,%eax
f010ac87:	a2 4d 82 65 f0       	mov    %al,0xf065824d
f010ac8c:	a0 4d 82 65 f0       	mov    0xf065824d,%al
f010ac91:	83 e0 ef             	and    $0xffffffef,%eax
f010ac94:	a2 4d 82 65 f0       	mov    %al,0xf065824d
f010ac99:	a0 4d 82 65 f0       	mov    0xf065824d,%al
f010ac9e:	83 c8 60             	or     $0x60,%eax
f010aca1:	a2 4d 82 65 f0       	mov    %al,0xf065824d
f010aca6:	a0 4d 82 65 f0       	mov    0xf065824d,%al
f010acab:	83 c8 80             	or     $0xffffff80,%eax
f010acae:	a2 4d 82 65 f0       	mov    %al,0xf065824d
f010acb3:	b8 a6 c0 10 f0       	mov    $0xf010c0a6,%eax
f010acb8:	c1 e8 10             	shr    $0x10,%eax
f010acbb:	66 a3 4e 82 65 f0    	mov    %ax,0xf065824e
	SETGATE(idt[T_NMI      ], 0, GD_KT , &ALL_FAULTS2, 3) ;
f010acc1:	b8 b0 c0 10 f0       	mov    $0xf010c0b0,%eax
f010acc6:	66 a3 50 82 65 f0    	mov    %ax,0xf0658250
f010accc:	66 c7 05 52 82 65 f0 	movw   $0x8,0xf0658252
f010acd3:	08 00 
f010acd5:	a0 54 82 65 f0       	mov    0xf0658254,%al
f010acda:	83 e0 e0             	and    $0xffffffe0,%eax
f010acdd:	a2 54 82 65 f0       	mov    %al,0xf0658254
f010ace2:	a0 54 82 65 f0       	mov    0xf0658254,%al
f010ace7:	83 e0 1f             	and    $0x1f,%eax
f010acea:	a2 54 82 65 f0       	mov    %al,0xf0658254
f010acef:	a0 55 82 65 f0       	mov    0xf0658255,%al
f010acf4:	83 e0 f0             	and    $0xfffffff0,%eax
f010acf7:	83 c8 0e             	or     $0xe,%eax
f010acfa:	a2 55 82 65 f0       	mov    %al,0xf0658255
f010acff:	a0 55 82 65 f0       	mov    0xf0658255,%al
f010ad04:	83 e0 ef             	and    $0xffffffef,%eax
f010ad07:	a2 55 82 65 f0       	mov    %al,0xf0658255
f010ad0c:	a0 55 82 65 f0       	mov    0xf0658255,%al
f010ad11:	83 c8 60             	or     $0x60,%eax
f010ad14:	a2 55 82 65 f0       	mov    %al,0xf0658255
f010ad19:	a0 55 82 65 f0       	mov    0xf0658255,%al
f010ad1e:	83 c8 80             	or     $0xffffff80,%eax
f010ad21:	a2 55 82 65 f0       	mov    %al,0xf0658255
f010ad26:	b8 b0 c0 10 f0       	mov    $0xf010c0b0,%eax
f010ad2b:	c1 e8 10             	shr    $0x10,%eax
f010ad2e:	66 a3 56 82 65 f0    	mov    %ax,0xf0658256
	SETGATE(idt[T_BRKPT    ], 1, GD_KT , &ALL_FAULTS3, 3) ;
f010ad34:	b8 ba c0 10 f0       	mov    $0xf010c0ba,%eax
f010ad39:	66 a3 58 82 65 f0    	mov    %ax,0xf0658258
f010ad3f:	66 c7 05 5a 82 65 f0 	movw   $0x8,0xf065825a
f010ad46:	08 00 
f010ad48:	a0 5c 82 65 f0       	mov    0xf065825c,%al
f010ad4d:	83 e0 e0             	and    $0xffffffe0,%eax
f010ad50:	a2 5c 82 65 f0       	mov    %al,0xf065825c
f010ad55:	a0 5c 82 65 f0       	mov    0xf065825c,%al
f010ad5a:	83 e0 1f             	and    $0x1f,%eax
f010ad5d:	a2 5c 82 65 f0       	mov    %al,0xf065825c
f010ad62:	a0 5d 82 65 f0       	mov    0xf065825d,%al
f010ad67:	83 c8 0f             	or     $0xf,%eax
f010ad6a:	a2 5d 82 65 f0       	mov    %al,0xf065825d
f010ad6f:	a0 5d 82 65 f0       	mov    0xf065825d,%al
f010ad74:	83 e0 ef             	and    $0xffffffef,%eax
f010ad77:	a2 5d 82 65 f0       	mov    %al,0xf065825d
f010ad7c:	a0 5d 82 65 f0       	mov    0xf065825d,%al
f010ad81:	83 c8 60             	or     $0x60,%eax
f010ad84:	a2 5d 82 65 f0       	mov    %al,0xf065825d
f010ad89:	a0 5d 82 65 f0       	mov    0xf065825d,%al
f010ad8e:	83 c8 80             	or     $0xffffff80,%eax
f010ad91:	a2 5d 82 65 f0       	mov    %al,0xf065825d
f010ad96:	b8 ba c0 10 f0       	mov    $0xf010c0ba,%eax
f010ad9b:	c1 e8 10             	shr    $0x10,%eax
f010ad9e:	66 a3 5e 82 65 f0    	mov    %ax,0xf065825e
	SETGATE(idt[T_OFLOW    ], 1, GD_KT , &ALL_FAULTS4, 3) ;
f010ada4:	b8 c4 c0 10 f0       	mov    $0xf010c0c4,%eax
f010ada9:	66 a3 60 82 65 f0    	mov    %ax,0xf0658260
f010adaf:	66 c7 05 62 82 65 f0 	movw   $0x8,0xf0658262
f010adb6:	08 00 
f010adb8:	a0 64 82 65 f0       	mov    0xf0658264,%al
f010adbd:	83 e0 e0             	and    $0xffffffe0,%eax
f010adc0:	a2 64 82 65 f0       	mov    %al,0xf0658264
f010adc5:	a0 64 82 65 f0       	mov    0xf0658264,%al
f010adca:	83 e0 1f             	and    $0x1f,%eax
f010adcd:	a2 64 82 65 f0       	mov    %al,0xf0658264
f010add2:	a0 65 82 65 f0       	mov    0xf0658265,%al
f010add7:	83 c8 0f             	or     $0xf,%eax
f010adda:	a2 65 82 65 f0       	mov    %al,0xf0658265
f010addf:	a0 65 82 65 f0       	mov    0xf0658265,%al
f010ade4:	83 e0 ef             	and    $0xffffffef,%eax
f010ade7:	a2 65 82 65 f0       	mov    %al,0xf0658265
f010adec:	a0 65 82 65 f0       	mov    0xf0658265,%al
f010adf1:	83 c8 60             	or     $0x60,%eax
f010adf4:	a2 65 82 65 f0       	mov    %al,0xf0658265
f010adf9:	a0 65 82 65 f0       	mov    0xf0658265,%al
f010adfe:	83 c8 80             	or     $0xffffff80,%eax
f010ae01:	a2 65 82 65 f0       	mov    %al,0xf0658265
f010ae06:	b8 c4 c0 10 f0       	mov    $0xf010c0c4,%eax
f010ae0b:	c1 e8 10             	shr    $0x10,%eax
f010ae0e:	66 a3 66 82 65 f0    	mov    %ax,0xf0658266
	SETGATE(idt[T_BOUND    ], 0, GD_KT , &ALL_FAULTS5, 3) ;
f010ae14:	b8 ce c0 10 f0       	mov    $0xf010c0ce,%eax
f010ae19:	66 a3 68 82 65 f0    	mov    %ax,0xf0658268
f010ae1f:	66 c7 05 6a 82 65 f0 	movw   $0x8,0xf065826a
f010ae26:	08 00 
f010ae28:	a0 6c 82 65 f0       	mov    0xf065826c,%al
f010ae2d:	83 e0 e0             	and    $0xffffffe0,%eax
f010ae30:	a2 6c 82 65 f0       	mov    %al,0xf065826c
f010ae35:	a0 6c 82 65 f0       	mov    0xf065826c,%al
f010ae3a:	83 e0 1f             	and    $0x1f,%eax
f010ae3d:	a2 6c 82 65 f0       	mov    %al,0xf065826c
f010ae42:	a0 6d 82 65 f0       	mov    0xf065826d,%al
f010ae47:	83 e0 f0             	and    $0xfffffff0,%eax
f010ae4a:	83 c8 0e             	or     $0xe,%eax
f010ae4d:	a2 6d 82 65 f0       	mov    %al,0xf065826d
f010ae52:	a0 6d 82 65 f0       	mov    0xf065826d,%al
f010ae57:	83 e0 ef             	and    $0xffffffef,%eax
f010ae5a:	a2 6d 82 65 f0       	mov    %al,0xf065826d
f010ae5f:	a0 6d 82 65 f0       	mov    0xf065826d,%al
f010ae64:	83 c8 60             	or     $0x60,%eax
f010ae67:	a2 6d 82 65 f0       	mov    %al,0xf065826d
f010ae6c:	a0 6d 82 65 f0       	mov    0xf065826d,%al
f010ae71:	83 c8 80             	or     $0xffffff80,%eax
f010ae74:	a2 6d 82 65 f0       	mov    %al,0xf065826d
f010ae79:	b8 ce c0 10 f0       	mov    $0xf010c0ce,%eax
f010ae7e:	c1 e8 10             	shr    $0x10,%eax
f010ae81:	66 a3 6e 82 65 f0    	mov    %ax,0xf065826e
	SETGATE(idt[T_ILLOP    ], 0, GD_KT , &ALL_FAULTS6, 3) ;
f010ae87:	b8 d8 c0 10 f0       	mov    $0xf010c0d8,%eax
f010ae8c:	66 a3 70 82 65 f0    	mov    %ax,0xf0658270
f010ae92:	66 c7 05 72 82 65 f0 	movw   $0x8,0xf0658272
f010ae99:	08 00 
f010ae9b:	a0 74 82 65 f0       	mov    0xf0658274,%al
f010aea0:	83 e0 e0             	and    $0xffffffe0,%eax
f010aea3:	a2 74 82 65 f0       	mov    %al,0xf0658274
f010aea8:	a0 74 82 65 f0       	mov    0xf0658274,%al
f010aead:	83 e0 1f             	and    $0x1f,%eax
f010aeb0:	a2 74 82 65 f0       	mov    %al,0xf0658274
f010aeb5:	a0 75 82 65 f0       	mov    0xf0658275,%al
f010aeba:	83 e0 f0             	and    $0xfffffff0,%eax
f010aebd:	83 c8 0e             	or     $0xe,%eax
f010aec0:	a2 75 82 65 f0       	mov    %al,0xf0658275
f010aec5:	a0 75 82 65 f0       	mov    0xf0658275,%al
f010aeca:	83 e0 ef             	and    $0xffffffef,%eax
f010aecd:	a2 75 82 65 f0       	mov    %al,0xf0658275
f010aed2:	a0 75 82 65 f0       	mov    0xf0658275,%al
f010aed7:	83 c8 60             	or     $0x60,%eax
f010aeda:	a2 75 82 65 f0       	mov    %al,0xf0658275
f010aedf:	a0 75 82 65 f0       	mov    0xf0658275,%al
f010aee4:	83 c8 80             	or     $0xffffff80,%eax
f010aee7:	a2 75 82 65 f0       	mov    %al,0xf0658275
f010aeec:	b8 d8 c0 10 f0       	mov    $0xf010c0d8,%eax
f010aef1:	c1 e8 10             	shr    $0x10,%eax
f010aef4:	66 a3 76 82 65 f0    	mov    %ax,0xf0658276
	SETGATE(idt[T_DEVICE   ], 0, GD_KT , &ALL_FAULTS7, 3) ;
f010aefa:	b8 e2 c0 10 f0       	mov    $0xf010c0e2,%eax
f010aeff:	66 a3 78 82 65 f0    	mov    %ax,0xf0658278
f010af05:	66 c7 05 7a 82 65 f0 	movw   $0x8,0xf065827a
f010af0c:	08 00 
f010af0e:	a0 7c 82 65 f0       	mov    0xf065827c,%al
f010af13:	83 e0 e0             	and    $0xffffffe0,%eax
f010af16:	a2 7c 82 65 f0       	mov    %al,0xf065827c
f010af1b:	a0 7c 82 65 f0       	mov    0xf065827c,%al
f010af20:	83 e0 1f             	and    $0x1f,%eax
f010af23:	a2 7c 82 65 f0       	mov    %al,0xf065827c
f010af28:	a0 7d 82 65 f0       	mov    0xf065827d,%al
f010af2d:	83 e0 f0             	and    $0xfffffff0,%eax
f010af30:	83 c8 0e             	or     $0xe,%eax
f010af33:	a2 7d 82 65 f0       	mov    %al,0xf065827d
f010af38:	a0 7d 82 65 f0       	mov    0xf065827d,%al
f010af3d:	83 e0 ef             	and    $0xffffffef,%eax
f010af40:	a2 7d 82 65 f0       	mov    %al,0xf065827d
f010af45:	a0 7d 82 65 f0       	mov    0xf065827d,%al
f010af4a:	83 c8 60             	or     $0x60,%eax
f010af4d:	a2 7d 82 65 f0       	mov    %al,0xf065827d
f010af52:	a0 7d 82 65 f0       	mov    0xf065827d,%al
f010af57:	83 c8 80             	or     $0xffffff80,%eax
f010af5a:	a2 7d 82 65 f0       	mov    %al,0xf065827d
f010af5f:	b8 e2 c0 10 f0       	mov    $0xf010c0e2,%eax
f010af64:	c1 e8 10             	shr    $0x10,%eax
f010af67:	66 a3 7e 82 65 f0    	mov    %ax,0xf065827e
	//SETGATE(idt[T_DBLFLT   ], 0, GD_KT , &ALL_FAULTS, 3) ;
	//SETGATE(idt[], 0, GD_KT , &ALL_FAULTS, 3) ;
	SETGATE(idt[T_TSS      ], 0, GD_KT , &ALL_FAULTS10, 3) ;
f010af6d:	b8 ec c0 10 f0       	mov    $0xf010c0ec,%eax
f010af72:	66 a3 90 82 65 f0    	mov    %ax,0xf0658290
f010af78:	66 c7 05 92 82 65 f0 	movw   $0x8,0xf0658292
f010af7f:	08 00 
f010af81:	a0 94 82 65 f0       	mov    0xf0658294,%al
f010af86:	83 e0 e0             	and    $0xffffffe0,%eax
f010af89:	a2 94 82 65 f0       	mov    %al,0xf0658294
f010af8e:	a0 94 82 65 f0       	mov    0xf0658294,%al
f010af93:	83 e0 1f             	and    $0x1f,%eax
f010af96:	a2 94 82 65 f0       	mov    %al,0xf0658294
f010af9b:	a0 95 82 65 f0       	mov    0xf0658295,%al
f010afa0:	83 e0 f0             	and    $0xfffffff0,%eax
f010afa3:	83 c8 0e             	or     $0xe,%eax
f010afa6:	a2 95 82 65 f0       	mov    %al,0xf0658295
f010afab:	a0 95 82 65 f0       	mov    0xf0658295,%al
f010afb0:	83 e0 ef             	and    $0xffffffef,%eax
f010afb3:	a2 95 82 65 f0       	mov    %al,0xf0658295
f010afb8:	a0 95 82 65 f0       	mov    0xf0658295,%al
f010afbd:	83 c8 60             	or     $0x60,%eax
f010afc0:	a2 95 82 65 f0       	mov    %al,0xf0658295
f010afc5:	a0 95 82 65 f0       	mov    0xf0658295,%al
f010afca:	83 c8 80             	or     $0xffffff80,%eax
f010afcd:	a2 95 82 65 f0       	mov    %al,0xf0658295
f010afd2:	b8 ec c0 10 f0       	mov    $0xf010c0ec,%eax
f010afd7:	c1 e8 10             	shr    $0x10,%eax
f010afda:	66 a3 96 82 65 f0    	mov    %ax,0xf0658296
	SETGATE(idt[T_SEGNP    ], 0, GD_KT , &ALL_FAULTS11, 3) ;
f010afe0:	b8 f4 c0 10 f0       	mov    $0xf010c0f4,%eax
f010afe5:	66 a3 98 82 65 f0    	mov    %ax,0xf0658298
f010afeb:	66 c7 05 9a 82 65 f0 	movw   $0x8,0xf065829a
f010aff2:	08 00 
f010aff4:	a0 9c 82 65 f0       	mov    0xf065829c,%al
f010aff9:	83 e0 e0             	and    $0xffffffe0,%eax
f010affc:	a2 9c 82 65 f0       	mov    %al,0xf065829c
f010b001:	a0 9c 82 65 f0       	mov    0xf065829c,%al
f010b006:	83 e0 1f             	and    $0x1f,%eax
f010b009:	a2 9c 82 65 f0       	mov    %al,0xf065829c
f010b00e:	a0 9d 82 65 f0       	mov    0xf065829d,%al
f010b013:	83 e0 f0             	and    $0xfffffff0,%eax
f010b016:	83 c8 0e             	or     $0xe,%eax
f010b019:	a2 9d 82 65 f0       	mov    %al,0xf065829d
f010b01e:	a0 9d 82 65 f0       	mov    0xf065829d,%al
f010b023:	83 e0 ef             	and    $0xffffffef,%eax
f010b026:	a2 9d 82 65 f0       	mov    %al,0xf065829d
f010b02b:	a0 9d 82 65 f0       	mov    0xf065829d,%al
f010b030:	83 c8 60             	or     $0x60,%eax
f010b033:	a2 9d 82 65 f0       	mov    %al,0xf065829d
f010b038:	a0 9d 82 65 f0       	mov    0xf065829d,%al
f010b03d:	83 c8 80             	or     $0xffffff80,%eax
f010b040:	a2 9d 82 65 f0       	mov    %al,0xf065829d
f010b045:	b8 f4 c0 10 f0       	mov    $0xf010c0f4,%eax
f010b04a:	c1 e8 10             	shr    $0x10,%eax
f010b04d:	66 a3 9e 82 65 f0    	mov    %ax,0xf065829e
	SETGATE(idt[T_STACK    ], 0, GD_KT , &ALL_FAULTS12, 3) ;
f010b053:	b8 f8 c0 10 f0       	mov    $0xf010c0f8,%eax
f010b058:	66 a3 a0 82 65 f0    	mov    %ax,0xf06582a0
f010b05e:	66 c7 05 a2 82 65 f0 	movw   $0x8,0xf06582a2
f010b065:	08 00 
f010b067:	a0 a4 82 65 f0       	mov    0xf06582a4,%al
f010b06c:	83 e0 e0             	and    $0xffffffe0,%eax
f010b06f:	a2 a4 82 65 f0       	mov    %al,0xf06582a4
f010b074:	a0 a4 82 65 f0       	mov    0xf06582a4,%al
f010b079:	83 e0 1f             	and    $0x1f,%eax
f010b07c:	a2 a4 82 65 f0       	mov    %al,0xf06582a4
f010b081:	a0 a5 82 65 f0       	mov    0xf06582a5,%al
f010b086:	83 e0 f0             	and    $0xfffffff0,%eax
f010b089:	83 c8 0e             	or     $0xe,%eax
f010b08c:	a2 a5 82 65 f0       	mov    %al,0xf06582a5
f010b091:	a0 a5 82 65 f0       	mov    0xf06582a5,%al
f010b096:	83 e0 ef             	and    $0xffffffef,%eax
f010b099:	a2 a5 82 65 f0       	mov    %al,0xf06582a5
f010b09e:	a0 a5 82 65 f0       	mov    0xf06582a5,%al
f010b0a3:	83 c8 60             	or     $0x60,%eax
f010b0a6:	a2 a5 82 65 f0       	mov    %al,0xf06582a5
f010b0ab:	a0 a5 82 65 f0       	mov    0xf06582a5,%al
f010b0b0:	83 c8 80             	or     $0xffffff80,%eax
f010b0b3:	a2 a5 82 65 f0       	mov    %al,0xf06582a5
f010b0b8:	b8 f8 c0 10 f0       	mov    $0xf010c0f8,%eax
f010b0bd:	c1 e8 10             	shr    $0x10,%eax
f010b0c0:	66 a3 a6 82 65 f0    	mov    %ax,0xf06582a6
	SETGATE(idt[T_GPFLT    ], 0, GD_KT , &ALL_FAULTS13, 3) ;
f010b0c6:	b8 fc c0 10 f0       	mov    $0xf010c0fc,%eax
f010b0cb:	66 a3 a8 82 65 f0    	mov    %ax,0xf06582a8
f010b0d1:	66 c7 05 aa 82 65 f0 	movw   $0x8,0xf06582aa
f010b0d8:	08 00 
f010b0da:	a0 ac 82 65 f0       	mov    0xf06582ac,%al
f010b0df:	83 e0 e0             	and    $0xffffffe0,%eax
f010b0e2:	a2 ac 82 65 f0       	mov    %al,0xf06582ac
f010b0e7:	a0 ac 82 65 f0       	mov    0xf06582ac,%al
f010b0ec:	83 e0 1f             	and    $0x1f,%eax
f010b0ef:	a2 ac 82 65 f0       	mov    %al,0xf06582ac
f010b0f4:	a0 ad 82 65 f0       	mov    0xf06582ad,%al
f010b0f9:	83 e0 f0             	and    $0xfffffff0,%eax
f010b0fc:	83 c8 0e             	or     $0xe,%eax
f010b0ff:	a2 ad 82 65 f0       	mov    %al,0xf06582ad
f010b104:	a0 ad 82 65 f0       	mov    0xf06582ad,%al
f010b109:	83 e0 ef             	and    $0xffffffef,%eax
f010b10c:	a2 ad 82 65 f0       	mov    %al,0xf06582ad
f010b111:	a0 ad 82 65 f0       	mov    0xf06582ad,%al
f010b116:	83 c8 60             	or     $0x60,%eax
f010b119:	a2 ad 82 65 f0       	mov    %al,0xf06582ad
f010b11e:	a0 ad 82 65 f0       	mov    0xf06582ad,%al
f010b123:	83 c8 80             	or     $0xffffff80,%eax
f010b126:	a2 ad 82 65 f0       	mov    %al,0xf06582ad
f010b12b:	b8 fc c0 10 f0       	mov    $0xf010c0fc,%eax
f010b130:	c1 e8 10             	shr    $0x10,%eax
f010b133:	66 a3 ae 82 65 f0    	mov    %ax,0xf06582ae
	//SETGATE(idt[T_PGFLT    ], 0, GD_KT , &ALL_FAULTS, 3) ;
	//SETGATE(idt[ne T_RES   ], 0, GD_KT , &ALL_FAULTS, 3) ;
	SETGATE(idt[T_FPERR    ], 0, GD_KT , &ALL_FAULTS16, 3) ;
f010b139:	b8 00 c1 10 f0       	mov    $0xf010c100,%eax
f010b13e:	66 a3 c0 82 65 f0    	mov    %ax,0xf06582c0
f010b144:	66 c7 05 c2 82 65 f0 	movw   $0x8,0xf06582c2
f010b14b:	08 00 
f010b14d:	a0 c4 82 65 f0       	mov    0xf06582c4,%al
f010b152:	83 e0 e0             	and    $0xffffffe0,%eax
f010b155:	a2 c4 82 65 f0       	mov    %al,0xf06582c4
f010b15a:	a0 c4 82 65 f0       	mov    0xf06582c4,%al
f010b15f:	83 e0 1f             	and    $0x1f,%eax
f010b162:	a2 c4 82 65 f0       	mov    %al,0xf06582c4
f010b167:	a0 c5 82 65 f0       	mov    0xf06582c5,%al
f010b16c:	83 e0 f0             	and    $0xfffffff0,%eax
f010b16f:	83 c8 0e             	or     $0xe,%eax
f010b172:	a2 c5 82 65 f0       	mov    %al,0xf06582c5
f010b177:	a0 c5 82 65 f0       	mov    0xf06582c5,%al
f010b17c:	83 e0 ef             	and    $0xffffffef,%eax
f010b17f:	a2 c5 82 65 f0       	mov    %al,0xf06582c5
f010b184:	a0 c5 82 65 f0       	mov    0xf06582c5,%al
f010b189:	83 c8 60             	or     $0x60,%eax
f010b18c:	a2 c5 82 65 f0       	mov    %al,0xf06582c5
f010b191:	a0 c5 82 65 f0       	mov    0xf06582c5,%al
f010b196:	83 c8 80             	or     $0xffffff80,%eax
f010b199:	a2 c5 82 65 f0       	mov    %al,0xf06582c5
f010b19e:	b8 00 c1 10 f0       	mov    $0xf010c100,%eax
f010b1a3:	c1 e8 10             	shr    $0x10,%eax
f010b1a6:	66 a3 c6 82 65 f0    	mov    %ax,0xf06582c6
	SETGATE(idt[T_ALIGN    ], 0, GD_KT , &ALL_FAULTS17, 3) ;
f010b1ac:	b8 06 c1 10 f0       	mov    $0xf010c106,%eax
f010b1b1:	66 a3 c8 82 65 f0    	mov    %ax,0xf06582c8
f010b1b7:	66 c7 05 ca 82 65 f0 	movw   $0x8,0xf06582ca
f010b1be:	08 00 
f010b1c0:	a0 cc 82 65 f0       	mov    0xf06582cc,%al
f010b1c5:	83 e0 e0             	and    $0xffffffe0,%eax
f010b1c8:	a2 cc 82 65 f0       	mov    %al,0xf06582cc
f010b1cd:	a0 cc 82 65 f0       	mov    0xf06582cc,%al
f010b1d2:	83 e0 1f             	and    $0x1f,%eax
f010b1d5:	a2 cc 82 65 f0       	mov    %al,0xf06582cc
f010b1da:	a0 cd 82 65 f0       	mov    0xf06582cd,%al
f010b1df:	83 e0 f0             	and    $0xfffffff0,%eax
f010b1e2:	83 c8 0e             	or     $0xe,%eax
f010b1e5:	a2 cd 82 65 f0       	mov    %al,0xf06582cd
f010b1ea:	a0 cd 82 65 f0       	mov    0xf06582cd,%al
f010b1ef:	83 e0 ef             	and    $0xffffffef,%eax
f010b1f2:	a2 cd 82 65 f0       	mov    %al,0xf06582cd
f010b1f7:	a0 cd 82 65 f0       	mov    0xf06582cd,%al
f010b1fc:	83 c8 60             	or     $0x60,%eax
f010b1ff:	a2 cd 82 65 f0       	mov    %al,0xf06582cd
f010b204:	a0 cd 82 65 f0       	mov    0xf06582cd,%al
f010b209:	83 c8 80             	or     $0xffffff80,%eax
f010b20c:	a2 cd 82 65 f0       	mov    %al,0xf06582cd
f010b211:	b8 06 c1 10 f0       	mov    $0xf010c106,%eax
f010b216:	c1 e8 10             	shr    $0x10,%eax
f010b219:	66 a3 ce 82 65 f0    	mov    %ax,0xf06582ce
	SETGATE(idt[T_MCHK     ], 0, GD_KT , &ALL_FAULTS18, 3) ;
f010b21f:	b8 0a c1 10 f0       	mov    $0xf010c10a,%eax
f010b224:	66 a3 d0 82 65 f0    	mov    %ax,0xf06582d0
f010b22a:	66 c7 05 d2 82 65 f0 	movw   $0x8,0xf06582d2
f010b231:	08 00 
f010b233:	a0 d4 82 65 f0       	mov    0xf06582d4,%al
f010b238:	83 e0 e0             	and    $0xffffffe0,%eax
f010b23b:	a2 d4 82 65 f0       	mov    %al,0xf06582d4
f010b240:	a0 d4 82 65 f0       	mov    0xf06582d4,%al
f010b245:	83 e0 1f             	and    $0x1f,%eax
f010b248:	a2 d4 82 65 f0       	mov    %al,0xf06582d4
f010b24d:	a0 d5 82 65 f0       	mov    0xf06582d5,%al
f010b252:	83 e0 f0             	and    $0xfffffff0,%eax
f010b255:	83 c8 0e             	or     $0xe,%eax
f010b258:	a2 d5 82 65 f0       	mov    %al,0xf06582d5
f010b25d:	a0 d5 82 65 f0       	mov    0xf06582d5,%al
f010b262:	83 e0 ef             	and    $0xffffffef,%eax
f010b265:	a2 d5 82 65 f0       	mov    %al,0xf06582d5
f010b26a:	a0 d5 82 65 f0       	mov    0xf06582d5,%al
f010b26f:	83 c8 60             	or     $0x60,%eax
f010b272:	a2 d5 82 65 f0       	mov    %al,0xf06582d5
f010b277:	a0 d5 82 65 f0       	mov    0xf06582d5,%al
f010b27c:	83 c8 80             	or     $0xffffff80,%eax
f010b27f:	a2 d5 82 65 f0       	mov    %al,0xf06582d5
f010b284:	b8 0a c1 10 f0       	mov    $0xf010c10a,%eax
f010b289:	c1 e8 10             	shr    $0x10,%eax
f010b28c:	66 a3 d6 82 65 f0    	mov    %ax,0xf06582d6
	SETGATE(idt[T_SIMDERR  ], 0, GD_KT , &ALL_FAULTS19, 3) ;
f010b292:	b8 10 c1 10 f0       	mov    $0xf010c110,%eax
f010b297:	66 a3 d8 82 65 f0    	mov    %ax,0xf06582d8
f010b29d:	66 c7 05 da 82 65 f0 	movw   $0x8,0xf06582da
f010b2a4:	08 00 
f010b2a6:	a0 dc 82 65 f0       	mov    0xf06582dc,%al
f010b2ab:	83 e0 e0             	and    $0xffffffe0,%eax
f010b2ae:	a2 dc 82 65 f0       	mov    %al,0xf06582dc
f010b2b3:	a0 dc 82 65 f0       	mov    0xf06582dc,%al
f010b2b8:	83 e0 1f             	and    $0x1f,%eax
f010b2bb:	a2 dc 82 65 f0       	mov    %al,0xf06582dc
f010b2c0:	a0 dd 82 65 f0       	mov    0xf06582dd,%al
f010b2c5:	83 e0 f0             	and    $0xfffffff0,%eax
f010b2c8:	83 c8 0e             	or     $0xe,%eax
f010b2cb:	a2 dd 82 65 f0       	mov    %al,0xf06582dd
f010b2d0:	a0 dd 82 65 f0       	mov    0xf06582dd,%al
f010b2d5:	83 e0 ef             	and    $0xffffffef,%eax
f010b2d8:	a2 dd 82 65 f0       	mov    %al,0xf06582dd
f010b2dd:	a0 dd 82 65 f0       	mov    0xf06582dd,%al
f010b2e2:	83 c8 60             	or     $0x60,%eax
f010b2e5:	a2 dd 82 65 f0       	mov    %al,0xf06582dd
f010b2ea:	a0 dd 82 65 f0       	mov    0xf06582dd,%al
f010b2ef:	83 c8 80             	or     $0xffffff80,%eax
f010b2f2:	a2 dd 82 65 f0       	mov    %al,0xf06582dd
f010b2f7:	b8 10 c1 10 f0       	mov    $0xf010c110,%eax
f010b2fc:	c1 e8 10             	shr    $0x10,%eax
f010b2ff:	66 a3 de 82 65 f0    	mov    %ax,0xf06582de


	SETGATE(idt[IRQ0_Clock], 0, GD_KT , &ALL_FAULTS32, 3) ;
f010b305:	b8 16 c1 10 f0       	mov    $0xf010c116,%eax
f010b30a:	66 a3 40 83 65 f0    	mov    %ax,0xf0658340
f010b310:	66 c7 05 42 83 65 f0 	movw   $0x8,0xf0658342
f010b317:	08 00 
f010b319:	a0 44 83 65 f0       	mov    0xf0658344,%al
f010b31e:	83 e0 e0             	and    $0xffffffe0,%eax
f010b321:	a2 44 83 65 f0       	mov    %al,0xf0658344
f010b326:	a0 44 83 65 f0       	mov    0xf0658344,%al
f010b32b:	83 e0 1f             	and    $0x1f,%eax
f010b32e:	a2 44 83 65 f0       	mov    %al,0xf0658344
f010b333:	a0 45 83 65 f0       	mov    0xf0658345,%al
f010b338:	83 e0 f0             	and    $0xfffffff0,%eax
f010b33b:	83 c8 0e             	or     $0xe,%eax
f010b33e:	a2 45 83 65 f0       	mov    %al,0xf0658345
f010b343:	a0 45 83 65 f0       	mov    0xf0658345,%al
f010b348:	83 e0 ef             	and    $0xffffffef,%eax
f010b34b:	a2 45 83 65 f0       	mov    %al,0xf0658345
f010b350:	a0 45 83 65 f0       	mov    0xf0658345,%al
f010b355:	83 c8 60             	or     $0x60,%eax
f010b358:	a2 45 83 65 f0       	mov    %al,0xf0658345
f010b35d:	a0 45 83 65 f0       	mov    0xf0658345,%al
f010b362:	83 c8 80             	or     $0xffffff80,%eax
f010b365:	a2 45 83 65 f0       	mov    %al,0xf0658345
f010b36a:	b8 16 c1 10 f0       	mov    $0xf010c116,%eax
f010b36f:	c1 e8 10             	shr    $0x10,%eax
f010b372:	66 a3 46 83 65 f0    	mov    %ax,0xf0658346
	SETGATE(idt[33], 0, GD_KT , &ALL_FAULTS33, 3) ;
f010b378:	b8 1c c1 10 f0       	mov    $0xf010c11c,%eax
f010b37d:	66 a3 48 83 65 f0    	mov    %ax,0xf0658348
f010b383:	66 c7 05 4a 83 65 f0 	movw   $0x8,0xf065834a
f010b38a:	08 00 
f010b38c:	a0 4c 83 65 f0       	mov    0xf065834c,%al
f010b391:	83 e0 e0             	and    $0xffffffe0,%eax
f010b394:	a2 4c 83 65 f0       	mov    %al,0xf065834c
f010b399:	a0 4c 83 65 f0       	mov    0xf065834c,%al
f010b39e:	83 e0 1f             	and    $0x1f,%eax
f010b3a1:	a2 4c 83 65 f0       	mov    %al,0xf065834c
f010b3a6:	a0 4d 83 65 f0       	mov    0xf065834d,%al
f010b3ab:	83 e0 f0             	and    $0xfffffff0,%eax
f010b3ae:	83 c8 0e             	or     $0xe,%eax
f010b3b1:	a2 4d 83 65 f0       	mov    %al,0xf065834d
f010b3b6:	a0 4d 83 65 f0       	mov    0xf065834d,%al
f010b3bb:	83 e0 ef             	and    $0xffffffef,%eax
f010b3be:	a2 4d 83 65 f0       	mov    %al,0xf065834d
f010b3c3:	a0 4d 83 65 f0       	mov    0xf065834d,%al
f010b3c8:	83 c8 60             	or     $0x60,%eax
f010b3cb:	a2 4d 83 65 f0       	mov    %al,0xf065834d
f010b3d0:	a0 4d 83 65 f0       	mov    0xf065834d,%al
f010b3d5:	83 c8 80             	or     $0xffffff80,%eax
f010b3d8:	a2 4d 83 65 f0       	mov    %al,0xf065834d
f010b3dd:	b8 1c c1 10 f0       	mov    $0xf010c11c,%eax
f010b3e2:	c1 e8 10             	shr    $0x10,%eax
f010b3e5:	66 a3 4e 83 65 f0    	mov    %ax,0xf065834e
	SETGATE(idt[34], 0, GD_KT , &ALL_FAULTS34, 3) ;
f010b3eb:	b8 22 c1 10 f0       	mov    $0xf010c122,%eax
f010b3f0:	66 a3 50 83 65 f0    	mov    %ax,0xf0658350
f010b3f6:	66 c7 05 52 83 65 f0 	movw   $0x8,0xf0658352
f010b3fd:	08 00 
f010b3ff:	a0 54 83 65 f0       	mov    0xf0658354,%al
f010b404:	83 e0 e0             	and    $0xffffffe0,%eax
f010b407:	a2 54 83 65 f0       	mov    %al,0xf0658354
f010b40c:	a0 54 83 65 f0       	mov    0xf0658354,%al
f010b411:	83 e0 1f             	and    $0x1f,%eax
f010b414:	a2 54 83 65 f0       	mov    %al,0xf0658354
f010b419:	a0 55 83 65 f0       	mov    0xf0658355,%al
f010b41e:	83 e0 f0             	and    $0xfffffff0,%eax
f010b421:	83 c8 0e             	or     $0xe,%eax
f010b424:	a2 55 83 65 f0       	mov    %al,0xf0658355
f010b429:	a0 55 83 65 f0       	mov    0xf0658355,%al
f010b42e:	83 e0 ef             	and    $0xffffffef,%eax
f010b431:	a2 55 83 65 f0       	mov    %al,0xf0658355
f010b436:	a0 55 83 65 f0       	mov    0xf0658355,%al
f010b43b:	83 c8 60             	or     $0x60,%eax
f010b43e:	a2 55 83 65 f0       	mov    %al,0xf0658355
f010b443:	a0 55 83 65 f0       	mov    0xf0658355,%al
f010b448:	83 c8 80             	or     $0xffffff80,%eax
f010b44b:	a2 55 83 65 f0       	mov    %al,0xf0658355
f010b450:	b8 22 c1 10 f0       	mov    $0xf010c122,%eax
f010b455:	c1 e8 10             	shr    $0x10,%eax
f010b458:	66 a3 56 83 65 f0    	mov    %ax,0xf0658356
	SETGATE(idt[35], 0, GD_KT , &ALL_FAULTS35, 3) ;
f010b45e:	b8 28 c1 10 f0       	mov    $0xf010c128,%eax
f010b463:	66 a3 58 83 65 f0    	mov    %ax,0xf0658358
f010b469:	66 c7 05 5a 83 65 f0 	movw   $0x8,0xf065835a
f010b470:	08 00 
f010b472:	a0 5c 83 65 f0       	mov    0xf065835c,%al
f010b477:	83 e0 e0             	and    $0xffffffe0,%eax
f010b47a:	a2 5c 83 65 f0       	mov    %al,0xf065835c
f010b47f:	a0 5c 83 65 f0       	mov    0xf065835c,%al
f010b484:	83 e0 1f             	and    $0x1f,%eax
f010b487:	a2 5c 83 65 f0       	mov    %al,0xf065835c
f010b48c:	a0 5d 83 65 f0       	mov    0xf065835d,%al
f010b491:	83 e0 f0             	and    $0xfffffff0,%eax
f010b494:	83 c8 0e             	or     $0xe,%eax
f010b497:	a2 5d 83 65 f0       	mov    %al,0xf065835d
f010b49c:	a0 5d 83 65 f0       	mov    0xf065835d,%al
f010b4a1:	83 e0 ef             	and    $0xffffffef,%eax
f010b4a4:	a2 5d 83 65 f0       	mov    %al,0xf065835d
f010b4a9:	a0 5d 83 65 f0       	mov    0xf065835d,%al
f010b4ae:	83 c8 60             	or     $0x60,%eax
f010b4b1:	a2 5d 83 65 f0       	mov    %al,0xf065835d
f010b4b6:	a0 5d 83 65 f0       	mov    0xf065835d,%al
f010b4bb:	83 c8 80             	or     $0xffffff80,%eax
f010b4be:	a2 5d 83 65 f0       	mov    %al,0xf065835d
f010b4c3:	b8 28 c1 10 f0       	mov    $0xf010c128,%eax
f010b4c8:	c1 e8 10             	shr    $0x10,%eax
f010b4cb:	66 a3 5e 83 65 f0    	mov    %ax,0xf065835e
	SETGATE(idt[36], 0, GD_KT , &ALL_FAULTS36, 3) ;
f010b4d1:	b8 2e c1 10 f0       	mov    $0xf010c12e,%eax
f010b4d6:	66 a3 60 83 65 f0    	mov    %ax,0xf0658360
f010b4dc:	66 c7 05 62 83 65 f0 	movw   $0x8,0xf0658362
f010b4e3:	08 00 
f010b4e5:	a0 64 83 65 f0       	mov    0xf0658364,%al
f010b4ea:	83 e0 e0             	and    $0xffffffe0,%eax
f010b4ed:	a2 64 83 65 f0       	mov    %al,0xf0658364
f010b4f2:	a0 64 83 65 f0       	mov    0xf0658364,%al
f010b4f7:	83 e0 1f             	and    $0x1f,%eax
f010b4fa:	a2 64 83 65 f0       	mov    %al,0xf0658364
f010b4ff:	a0 65 83 65 f0       	mov    0xf0658365,%al
f010b504:	83 e0 f0             	and    $0xfffffff0,%eax
f010b507:	83 c8 0e             	or     $0xe,%eax
f010b50a:	a2 65 83 65 f0       	mov    %al,0xf0658365
f010b50f:	a0 65 83 65 f0       	mov    0xf0658365,%al
f010b514:	83 e0 ef             	and    $0xffffffef,%eax
f010b517:	a2 65 83 65 f0       	mov    %al,0xf0658365
f010b51c:	a0 65 83 65 f0       	mov    0xf0658365,%al
f010b521:	83 c8 60             	or     $0x60,%eax
f010b524:	a2 65 83 65 f0       	mov    %al,0xf0658365
f010b529:	a0 65 83 65 f0       	mov    0xf0658365,%al
f010b52e:	83 c8 80             	or     $0xffffff80,%eax
f010b531:	a2 65 83 65 f0       	mov    %al,0xf0658365
f010b536:	b8 2e c1 10 f0       	mov    $0xf010c12e,%eax
f010b53b:	c1 e8 10             	shr    $0x10,%eax
f010b53e:	66 a3 66 83 65 f0    	mov    %ax,0xf0658366
	SETGATE(idt[37], 0, GD_KT , &ALL_FAULTS37, 3) ;
f010b544:	b8 34 c1 10 f0       	mov    $0xf010c134,%eax
f010b549:	66 a3 68 83 65 f0    	mov    %ax,0xf0658368
f010b54f:	66 c7 05 6a 83 65 f0 	movw   $0x8,0xf065836a
f010b556:	08 00 
f010b558:	a0 6c 83 65 f0       	mov    0xf065836c,%al
f010b55d:	83 e0 e0             	and    $0xffffffe0,%eax
f010b560:	a2 6c 83 65 f0       	mov    %al,0xf065836c
f010b565:	a0 6c 83 65 f0       	mov    0xf065836c,%al
f010b56a:	83 e0 1f             	and    $0x1f,%eax
f010b56d:	a2 6c 83 65 f0       	mov    %al,0xf065836c
f010b572:	a0 6d 83 65 f0       	mov    0xf065836d,%al
f010b577:	83 e0 f0             	and    $0xfffffff0,%eax
f010b57a:	83 c8 0e             	or     $0xe,%eax
f010b57d:	a2 6d 83 65 f0       	mov    %al,0xf065836d
f010b582:	a0 6d 83 65 f0       	mov    0xf065836d,%al
f010b587:	83 e0 ef             	and    $0xffffffef,%eax
f010b58a:	a2 6d 83 65 f0       	mov    %al,0xf065836d
f010b58f:	a0 6d 83 65 f0       	mov    0xf065836d,%al
f010b594:	83 c8 60             	or     $0x60,%eax
f010b597:	a2 6d 83 65 f0       	mov    %al,0xf065836d
f010b59c:	a0 6d 83 65 f0       	mov    0xf065836d,%al
f010b5a1:	83 c8 80             	or     $0xffffff80,%eax
f010b5a4:	a2 6d 83 65 f0       	mov    %al,0xf065836d
f010b5a9:	b8 34 c1 10 f0       	mov    $0xf010c134,%eax
f010b5ae:	c1 e8 10             	shr    $0x10,%eax
f010b5b1:	66 a3 6e 83 65 f0    	mov    %ax,0xf065836e
	SETGATE(idt[38], 0, GD_KT , &ALL_FAULTS38, 3) ;
f010b5b7:	b8 3a c1 10 f0       	mov    $0xf010c13a,%eax
f010b5bc:	66 a3 70 83 65 f0    	mov    %ax,0xf0658370
f010b5c2:	66 c7 05 72 83 65 f0 	movw   $0x8,0xf0658372
f010b5c9:	08 00 
f010b5cb:	a0 74 83 65 f0       	mov    0xf0658374,%al
f010b5d0:	83 e0 e0             	and    $0xffffffe0,%eax
f010b5d3:	a2 74 83 65 f0       	mov    %al,0xf0658374
f010b5d8:	a0 74 83 65 f0       	mov    0xf0658374,%al
f010b5dd:	83 e0 1f             	and    $0x1f,%eax
f010b5e0:	a2 74 83 65 f0       	mov    %al,0xf0658374
f010b5e5:	a0 75 83 65 f0       	mov    0xf0658375,%al
f010b5ea:	83 e0 f0             	and    $0xfffffff0,%eax
f010b5ed:	83 c8 0e             	or     $0xe,%eax
f010b5f0:	a2 75 83 65 f0       	mov    %al,0xf0658375
f010b5f5:	a0 75 83 65 f0       	mov    0xf0658375,%al
f010b5fa:	83 e0 ef             	and    $0xffffffef,%eax
f010b5fd:	a2 75 83 65 f0       	mov    %al,0xf0658375
f010b602:	a0 75 83 65 f0       	mov    0xf0658375,%al
f010b607:	83 c8 60             	or     $0x60,%eax
f010b60a:	a2 75 83 65 f0       	mov    %al,0xf0658375
f010b60f:	a0 75 83 65 f0       	mov    0xf0658375,%al
f010b614:	83 c8 80             	or     $0xffffff80,%eax
f010b617:	a2 75 83 65 f0       	mov    %al,0xf0658375
f010b61c:	b8 3a c1 10 f0       	mov    $0xf010c13a,%eax
f010b621:	c1 e8 10             	shr    $0x10,%eax
f010b624:	66 a3 76 83 65 f0    	mov    %ax,0xf0658376
	SETGATE(idt[39], 0, GD_KT , &ALL_FAULTS39, 3) ;
f010b62a:	b8 40 c1 10 f0       	mov    $0xf010c140,%eax
f010b62f:	66 a3 78 83 65 f0    	mov    %ax,0xf0658378
f010b635:	66 c7 05 7a 83 65 f0 	movw   $0x8,0xf065837a
f010b63c:	08 00 
f010b63e:	a0 7c 83 65 f0       	mov    0xf065837c,%al
f010b643:	83 e0 e0             	and    $0xffffffe0,%eax
f010b646:	a2 7c 83 65 f0       	mov    %al,0xf065837c
f010b64b:	a0 7c 83 65 f0       	mov    0xf065837c,%al
f010b650:	83 e0 1f             	and    $0x1f,%eax
f010b653:	a2 7c 83 65 f0       	mov    %al,0xf065837c
f010b658:	a0 7d 83 65 f0       	mov    0xf065837d,%al
f010b65d:	83 e0 f0             	and    $0xfffffff0,%eax
f010b660:	83 c8 0e             	or     $0xe,%eax
f010b663:	a2 7d 83 65 f0       	mov    %al,0xf065837d
f010b668:	a0 7d 83 65 f0       	mov    0xf065837d,%al
f010b66d:	83 e0 ef             	and    $0xffffffef,%eax
f010b670:	a2 7d 83 65 f0       	mov    %al,0xf065837d
f010b675:	a0 7d 83 65 f0       	mov    0xf065837d,%al
f010b67a:	83 c8 60             	or     $0x60,%eax
f010b67d:	a2 7d 83 65 f0       	mov    %al,0xf065837d
f010b682:	a0 7d 83 65 f0       	mov    0xf065837d,%al
f010b687:	83 c8 80             	or     $0xffffff80,%eax
f010b68a:	a2 7d 83 65 f0       	mov    %al,0xf065837d
f010b68f:	b8 40 c1 10 f0       	mov    $0xf010c140,%eax
f010b694:	c1 e8 10             	shr    $0x10,%eax
f010b697:	66 a3 7e 83 65 f0    	mov    %ax,0xf065837e
	SETGATE(idt[40], 0, GD_KT , &ALL_FAULTS40, 3) ;
f010b69d:	b8 46 c1 10 f0       	mov    $0xf010c146,%eax
f010b6a2:	66 a3 80 83 65 f0    	mov    %ax,0xf0658380
f010b6a8:	66 c7 05 82 83 65 f0 	movw   $0x8,0xf0658382
f010b6af:	08 00 
f010b6b1:	a0 84 83 65 f0       	mov    0xf0658384,%al
f010b6b6:	83 e0 e0             	and    $0xffffffe0,%eax
f010b6b9:	a2 84 83 65 f0       	mov    %al,0xf0658384
f010b6be:	a0 84 83 65 f0       	mov    0xf0658384,%al
f010b6c3:	83 e0 1f             	and    $0x1f,%eax
f010b6c6:	a2 84 83 65 f0       	mov    %al,0xf0658384
f010b6cb:	a0 85 83 65 f0       	mov    0xf0658385,%al
f010b6d0:	83 e0 f0             	and    $0xfffffff0,%eax
f010b6d3:	83 c8 0e             	or     $0xe,%eax
f010b6d6:	a2 85 83 65 f0       	mov    %al,0xf0658385
f010b6db:	a0 85 83 65 f0       	mov    0xf0658385,%al
f010b6e0:	83 e0 ef             	and    $0xffffffef,%eax
f010b6e3:	a2 85 83 65 f0       	mov    %al,0xf0658385
f010b6e8:	a0 85 83 65 f0       	mov    0xf0658385,%al
f010b6ed:	83 c8 60             	or     $0x60,%eax
f010b6f0:	a2 85 83 65 f0       	mov    %al,0xf0658385
f010b6f5:	a0 85 83 65 f0       	mov    0xf0658385,%al
f010b6fa:	83 c8 80             	or     $0xffffff80,%eax
f010b6fd:	a2 85 83 65 f0       	mov    %al,0xf0658385
f010b702:	b8 46 c1 10 f0       	mov    $0xf010c146,%eax
f010b707:	c1 e8 10             	shr    $0x10,%eax
f010b70a:	66 a3 86 83 65 f0    	mov    %ax,0xf0658386
	SETGATE(idt[41], 0, GD_KT , &ALL_FAULTS41, 3) ;
f010b710:	b8 4c c1 10 f0       	mov    $0xf010c14c,%eax
f010b715:	66 a3 88 83 65 f0    	mov    %ax,0xf0658388
f010b71b:	66 c7 05 8a 83 65 f0 	movw   $0x8,0xf065838a
f010b722:	08 00 
f010b724:	a0 8c 83 65 f0       	mov    0xf065838c,%al
f010b729:	83 e0 e0             	and    $0xffffffe0,%eax
f010b72c:	a2 8c 83 65 f0       	mov    %al,0xf065838c
f010b731:	a0 8c 83 65 f0       	mov    0xf065838c,%al
f010b736:	83 e0 1f             	and    $0x1f,%eax
f010b739:	a2 8c 83 65 f0       	mov    %al,0xf065838c
f010b73e:	a0 8d 83 65 f0       	mov    0xf065838d,%al
f010b743:	83 e0 f0             	and    $0xfffffff0,%eax
f010b746:	83 c8 0e             	or     $0xe,%eax
f010b749:	a2 8d 83 65 f0       	mov    %al,0xf065838d
f010b74e:	a0 8d 83 65 f0       	mov    0xf065838d,%al
f010b753:	83 e0 ef             	and    $0xffffffef,%eax
f010b756:	a2 8d 83 65 f0       	mov    %al,0xf065838d
f010b75b:	a0 8d 83 65 f0       	mov    0xf065838d,%al
f010b760:	83 c8 60             	or     $0x60,%eax
f010b763:	a2 8d 83 65 f0       	mov    %al,0xf065838d
f010b768:	a0 8d 83 65 f0       	mov    0xf065838d,%al
f010b76d:	83 c8 80             	or     $0xffffff80,%eax
f010b770:	a2 8d 83 65 f0       	mov    %al,0xf065838d
f010b775:	b8 4c c1 10 f0       	mov    $0xf010c14c,%eax
f010b77a:	c1 e8 10             	shr    $0x10,%eax
f010b77d:	66 a3 8e 83 65 f0    	mov    %ax,0xf065838e
	SETGATE(idt[42], 0, GD_KT , &ALL_FAULTS42, 3) ;
f010b783:	b8 52 c1 10 f0       	mov    $0xf010c152,%eax
f010b788:	66 a3 90 83 65 f0    	mov    %ax,0xf0658390
f010b78e:	66 c7 05 92 83 65 f0 	movw   $0x8,0xf0658392
f010b795:	08 00 
f010b797:	a0 94 83 65 f0       	mov    0xf0658394,%al
f010b79c:	83 e0 e0             	and    $0xffffffe0,%eax
f010b79f:	a2 94 83 65 f0       	mov    %al,0xf0658394
f010b7a4:	a0 94 83 65 f0       	mov    0xf0658394,%al
f010b7a9:	83 e0 1f             	and    $0x1f,%eax
f010b7ac:	a2 94 83 65 f0       	mov    %al,0xf0658394
f010b7b1:	a0 95 83 65 f0       	mov    0xf0658395,%al
f010b7b6:	83 e0 f0             	and    $0xfffffff0,%eax
f010b7b9:	83 c8 0e             	or     $0xe,%eax
f010b7bc:	a2 95 83 65 f0       	mov    %al,0xf0658395
f010b7c1:	a0 95 83 65 f0       	mov    0xf0658395,%al
f010b7c6:	83 e0 ef             	and    $0xffffffef,%eax
f010b7c9:	a2 95 83 65 f0       	mov    %al,0xf0658395
f010b7ce:	a0 95 83 65 f0       	mov    0xf0658395,%al
f010b7d3:	83 c8 60             	or     $0x60,%eax
f010b7d6:	a2 95 83 65 f0       	mov    %al,0xf0658395
f010b7db:	a0 95 83 65 f0       	mov    0xf0658395,%al
f010b7e0:	83 c8 80             	or     $0xffffff80,%eax
f010b7e3:	a2 95 83 65 f0       	mov    %al,0xf0658395
f010b7e8:	b8 52 c1 10 f0       	mov    $0xf010c152,%eax
f010b7ed:	c1 e8 10             	shr    $0x10,%eax
f010b7f0:	66 a3 96 83 65 f0    	mov    %ax,0xf0658396
	SETGATE(idt[43], 0, GD_KT , &ALL_FAULTS43, 3) ;
f010b7f6:	b8 58 c1 10 f0       	mov    $0xf010c158,%eax
f010b7fb:	66 a3 98 83 65 f0    	mov    %ax,0xf0658398
f010b801:	66 c7 05 9a 83 65 f0 	movw   $0x8,0xf065839a
f010b808:	08 00 
f010b80a:	a0 9c 83 65 f0       	mov    0xf065839c,%al
f010b80f:	83 e0 e0             	and    $0xffffffe0,%eax
f010b812:	a2 9c 83 65 f0       	mov    %al,0xf065839c
f010b817:	a0 9c 83 65 f0       	mov    0xf065839c,%al
f010b81c:	83 e0 1f             	and    $0x1f,%eax
f010b81f:	a2 9c 83 65 f0       	mov    %al,0xf065839c
f010b824:	a0 9d 83 65 f0       	mov    0xf065839d,%al
f010b829:	83 e0 f0             	and    $0xfffffff0,%eax
f010b82c:	83 c8 0e             	or     $0xe,%eax
f010b82f:	a2 9d 83 65 f0       	mov    %al,0xf065839d
f010b834:	a0 9d 83 65 f0       	mov    0xf065839d,%al
f010b839:	83 e0 ef             	and    $0xffffffef,%eax
f010b83c:	a2 9d 83 65 f0       	mov    %al,0xf065839d
f010b841:	a0 9d 83 65 f0       	mov    0xf065839d,%al
f010b846:	83 c8 60             	or     $0x60,%eax
f010b849:	a2 9d 83 65 f0       	mov    %al,0xf065839d
f010b84e:	a0 9d 83 65 f0       	mov    0xf065839d,%al
f010b853:	83 c8 80             	or     $0xffffff80,%eax
f010b856:	a2 9d 83 65 f0       	mov    %al,0xf065839d
f010b85b:	b8 58 c1 10 f0       	mov    $0xf010c158,%eax
f010b860:	c1 e8 10             	shr    $0x10,%eax
f010b863:	66 a3 9e 83 65 f0    	mov    %ax,0xf065839e
	SETGATE(idt[44], 0, GD_KT , &ALL_FAULTS44, 3) ;
f010b869:	b8 5e c1 10 f0       	mov    $0xf010c15e,%eax
f010b86e:	66 a3 a0 83 65 f0    	mov    %ax,0xf06583a0
f010b874:	66 c7 05 a2 83 65 f0 	movw   $0x8,0xf06583a2
f010b87b:	08 00 
f010b87d:	a0 a4 83 65 f0       	mov    0xf06583a4,%al
f010b882:	83 e0 e0             	and    $0xffffffe0,%eax
f010b885:	a2 a4 83 65 f0       	mov    %al,0xf06583a4
f010b88a:	a0 a4 83 65 f0       	mov    0xf06583a4,%al
f010b88f:	83 e0 1f             	and    $0x1f,%eax
f010b892:	a2 a4 83 65 f0       	mov    %al,0xf06583a4
f010b897:	a0 a5 83 65 f0       	mov    0xf06583a5,%al
f010b89c:	83 e0 f0             	and    $0xfffffff0,%eax
f010b89f:	83 c8 0e             	or     $0xe,%eax
f010b8a2:	a2 a5 83 65 f0       	mov    %al,0xf06583a5
f010b8a7:	a0 a5 83 65 f0       	mov    0xf06583a5,%al
f010b8ac:	83 e0 ef             	and    $0xffffffef,%eax
f010b8af:	a2 a5 83 65 f0       	mov    %al,0xf06583a5
f010b8b4:	a0 a5 83 65 f0       	mov    0xf06583a5,%al
f010b8b9:	83 c8 60             	or     $0x60,%eax
f010b8bc:	a2 a5 83 65 f0       	mov    %al,0xf06583a5
f010b8c1:	a0 a5 83 65 f0       	mov    0xf06583a5,%al
f010b8c6:	83 c8 80             	or     $0xffffff80,%eax
f010b8c9:	a2 a5 83 65 f0       	mov    %al,0xf06583a5
f010b8ce:	b8 5e c1 10 f0       	mov    $0xf010c15e,%eax
f010b8d3:	c1 e8 10             	shr    $0x10,%eax
f010b8d6:	66 a3 a6 83 65 f0    	mov    %ax,0xf06583a6
	SETGATE(idt[45], 0, GD_KT , &ALL_FAULTS45, 3) ;
f010b8dc:	b8 64 c1 10 f0       	mov    $0xf010c164,%eax
f010b8e1:	66 a3 a8 83 65 f0    	mov    %ax,0xf06583a8
f010b8e7:	66 c7 05 aa 83 65 f0 	movw   $0x8,0xf06583aa
f010b8ee:	08 00 
f010b8f0:	a0 ac 83 65 f0       	mov    0xf06583ac,%al
f010b8f5:	83 e0 e0             	and    $0xffffffe0,%eax
f010b8f8:	a2 ac 83 65 f0       	mov    %al,0xf06583ac
f010b8fd:	a0 ac 83 65 f0       	mov    0xf06583ac,%al
f010b902:	83 e0 1f             	and    $0x1f,%eax
f010b905:	a2 ac 83 65 f0       	mov    %al,0xf06583ac
f010b90a:	a0 ad 83 65 f0       	mov    0xf06583ad,%al
f010b90f:	83 e0 f0             	and    $0xfffffff0,%eax
f010b912:	83 c8 0e             	or     $0xe,%eax
f010b915:	a2 ad 83 65 f0       	mov    %al,0xf06583ad
f010b91a:	a0 ad 83 65 f0       	mov    0xf06583ad,%al
f010b91f:	83 e0 ef             	and    $0xffffffef,%eax
f010b922:	a2 ad 83 65 f0       	mov    %al,0xf06583ad
f010b927:	a0 ad 83 65 f0       	mov    0xf06583ad,%al
f010b92c:	83 c8 60             	or     $0x60,%eax
f010b92f:	a2 ad 83 65 f0       	mov    %al,0xf06583ad
f010b934:	a0 ad 83 65 f0       	mov    0xf06583ad,%al
f010b939:	83 c8 80             	or     $0xffffff80,%eax
f010b93c:	a2 ad 83 65 f0       	mov    %al,0xf06583ad
f010b941:	b8 64 c1 10 f0       	mov    $0xf010c164,%eax
f010b946:	c1 e8 10             	shr    $0x10,%eax
f010b949:	66 a3 ae 83 65 f0    	mov    %ax,0xf06583ae
	SETGATE(idt[46], 0, GD_KT , &ALL_FAULTS46, 3) ;
f010b94f:	b8 6a c1 10 f0       	mov    $0xf010c16a,%eax
f010b954:	66 a3 b0 83 65 f0    	mov    %ax,0xf06583b0
f010b95a:	66 c7 05 b2 83 65 f0 	movw   $0x8,0xf06583b2
f010b961:	08 00 
f010b963:	a0 b4 83 65 f0       	mov    0xf06583b4,%al
f010b968:	83 e0 e0             	and    $0xffffffe0,%eax
f010b96b:	a2 b4 83 65 f0       	mov    %al,0xf06583b4
f010b970:	a0 b4 83 65 f0       	mov    0xf06583b4,%al
f010b975:	83 e0 1f             	and    $0x1f,%eax
f010b978:	a2 b4 83 65 f0       	mov    %al,0xf06583b4
f010b97d:	a0 b5 83 65 f0       	mov    0xf06583b5,%al
f010b982:	83 e0 f0             	and    $0xfffffff0,%eax
f010b985:	83 c8 0e             	or     $0xe,%eax
f010b988:	a2 b5 83 65 f0       	mov    %al,0xf06583b5
f010b98d:	a0 b5 83 65 f0       	mov    0xf06583b5,%al
f010b992:	83 e0 ef             	and    $0xffffffef,%eax
f010b995:	a2 b5 83 65 f0       	mov    %al,0xf06583b5
f010b99a:	a0 b5 83 65 f0       	mov    0xf06583b5,%al
f010b99f:	83 c8 60             	or     $0x60,%eax
f010b9a2:	a2 b5 83 65 f0       	mov    %al,0xf06583b5
f010b9a7:	a0 b5 83 65 f0       	mov    0xf06583b5,%al
f010b9ac:	83 c8 80             	or     $0xffffff80,%eax
f010b9af:	a2 b5 83 65 f0       	mov    %al,0xf06583b5
f010b9b4:	b8 6a c1 10 f0       	mov    $0xf010c16a,%eax
f010b9b9:	c1 e8 10             	shr    $0x10,%eax
f010b9bc:	66 a3 b6 83 65 f0    	mov    %ax,0xf06583b6
	SETGATE(idt[47], 0, GD_KT , &ALL_FAULTS47, 3) ;
f010b9c2:	b8 70 c1 10 f0       	mov    $0xf010c170,%eax
f010b9c7:	66 a3 b8 83 65 f0    	mov    %ax,0xf06583b8
f010b9cd:	66 c7 05 ba 83 65 f0 	movw   $0x8,0xf06583ba
f010b9d4:	08 00 
f010b9d6:	a0 bc 83 65 f0       	mov    0xf06583bc,%al
f010b9db:	83 e0 e0             	and    $0xffffffe0,%eax
f010b9de:	a2 bc 83 65 f0       	mov    %al,0xf06583bc
f010b9e3:	a0 bc 83 65 f0       	mov    0xf06583bc,%al
f010b9e8:	83 e0 1f             	and    $0x1f,%eax
f010b9eb:	a2 bc 83 65 f0       	mov    %al,0xf06583bc
f010b9f0:	a0 bd 83 65 f0       	mov    0xf06583bd,%al
f010b9f5:	83 e0 f0             	and    $0xfffffff0,%eax
f010b9f8:	83 c8 0e             	or     $0xe,%eax
f010b9fb:	a2 bd 83 65 f0       	mov    %al,0xf06583bd
f010ba00:	a0 bd 83 65 f0       	mov    0xf06583bd,%al
f010ba05:	83 e0 ef             	and    $0xffffffef,%eax
f010ba08:	a2 bd 83 65 f0       	mov    %al,0xf06583bd
f010ba0d:	a0 bd 83 65 f0       	mov    0xf06583bd,%al
f010ba12:	83 c8 60             	or     $0x60,%eax
f010ba15:	a2 bd 83 65 f0       	mov    %al,0xf06583bd
f010ba1a:	a0 bd 83 65 f0       	mov    0xf06583bd,%al
f010ba1f:	83 c8 80             	or     $0xffffff80,%eax
f010ba22:	a2 bd 83 65 f0       	mov    %al,0xf06583bd
f010ba27:	b8 70 c1 10 f0       	mov    $0xf010c170,%eax
f010ba2c:	c1 e8 10             	shr    $0x10,%eax
f010ba2f:	66 a3 be 83 65 f0    	mov    %ax,0xf06583be



	// Setup a TSS so that we get the right stack
	// when we trap to the kernel.
	ts.ts_esp0 = KERNEL_STACK_TOP;
f010ba35:	c7 05 44 8a 65 f0 00 	movl   $0xefc00000,0xf0658a44
f010ba3c:	00 c0 ef 
	ts.ts_ss0 = GD_KD;
f010ba3f:	66 c7 05 48 8a 65 f0 	movw   $0x10,0xf0658a48
f010ba46:	10 00 

	// Initialize the TSS field of the gdt.
	gdt[GD_TSS >> 3] = SEG16(STS_T32A, (uint32) (&ts),
f010ba48:	66 c7 05 e8 08 19 f0 	movw   $0x68,0xf01908e8
f010ba4f:	68 00 
f010ba51:	b8 40 8a 65 f0       	mov    $0xf0658a40,%eax
f010ba56:	66 a3 ea 08 19 f0    	mov    %ax,0xf01908ea
f010ba5c:	b8 40 8a 65 f0       	mov    $0xf0658a40,%eax
f010ba61:	c1 e8 10             	shr    $0x10,%eax
f010ba64:	a2 ec 08 19 f0       	mov    %al,0xf01908ec
f010ba69:	a0 ed 08 19 f0       	mov    0xf01908ed,%al
f010ba6e:	83 e0 f0             	and    $0xfffffff0,%eax
f010ba71:	83 c8 09             	or     $0x9,%eax
f010ba74:	a2 ed 08 19 f0       	mov    %al,0xf01908ed
f010ba79:	a0 ed 08 19 f0       	mov    0xf01908ed,%al
f010ba7e:	83 c8 10             	or     $0x10,%eax
f010ba81:	a2 ed 08 19 f0       	mov    %al,0xf01908ed
f010ba86:	a0 ed 08 19 f0       	mov    0xf01908ed,%al
f010ba8b:	83 e0 9f             	and    $0xffffff9f,%eax
f010ba8e:	a2 ed 08 19 f0       	mov    %al,0xf01908ed
f010ba93:	a0 ed 08 19 f0       	mov    0xf01908ed,%al
f010ba98:	83 c8 80             	or     $0xffffff80,%eax
f010ba9b:	a2 ed 08 19 f0       	mov    %al,0xf01908ed
f010baa0:	a0 ee 08 19 f0       	mov    0xf01908ee,%al
f010baa5:	83 e0 f0             	and    $0xfffffff0,%eax
f010baa8:	a2 ee 08 19 f0       	mov    %al,0xf01908ee
f010baad:	a0 ee 08 19 f0       	mov    0xf01908ee,%al
f010bab2:	83 e0 ef             	and    $0xffffffef,%eax
f010bab5:	a2 ee 08 19 f0       	mov    %al,0xf01908ee
f010baba:	a0 ee 08 19 f0       	mov    0xf01908ee,%al
f010babf:	83 e0 df             	and    $0xffffffdf,%eax
f010bac2:	a2 ee 08 19 f0       	mov    %al,0xf01908ee
f010bac7:	a0 ee 08 19 f0       	mov    0xf01908ee,%al
f010bacc:	83 c8 40             	or     $0x40,%eax
f010bacf:	a2 ee 08 19 f0       	mov    %al,0xf01908ee
f010bad4:	a0 ee 08 19 f0       	mov    0xf01908ee,%al
f010bad9:	83 e0 7f             	and    $0x7f,%eax
f010badc:	a2 ee 08 19 f0       	mov    %al,0xf01908ee
f010bae1:	b8 40 8a 65 f0       	mov    $0xf0658a40,%eax
f010bae6:	c1 e8 18             	shr    $0x18,%eax
f010bae9:	a2 ef 08 19 f0       	mov    %al,0xf01908ef
			sizeof(struct Taskstate), 0);
	gdt[GD_TSS >> 3].sd_s = 0;
f010baee:	a0 ed 08 19 f0       	mov    0xf01908ed,%al
f010baf3:	83 e0 ef             	and    $0xffffffef,%eax
f010baf6:	a2 ed 08 19 f0       	mov    %al,0xf01908ed
f010bafb:	66 c7 45 fe 28 00    	movw   $0x28,-0x2(%ebp)
}

static __inline void
ltr(uint16 sel)
{
	__asm __volatile("ltr %0" : : "r" (sel));
f010bb01:	66 8b 45 fe          	mov    -0x2(%ebp),%ax
f010bb05:	0f 00 d8             	ltr    %ax

	// Load the TSS
	ltr(GD_TSS);

	// Load the IDT
	asm volatile("lidt idt_pd");
f010bb08:	0f 01 1d c8 0c 19 f0 	lidtl  0xf0190cc8
}
f010bb0f:	90                   	nop
f010bb10:	c9                   	leave  
f010bb11:	c3                   	ret    

f010bb12 <print_trapframe>:

void print_trapframe(struct Trapframe *tf)
{
f010bb12:	55                   	push   %ebp
f010bb13:	89 e5                	mov    %esp,%ebp
f010bb15:	53                   	push   %ebx
f010bb16:	83 ec 04             	sub    $0x4,%esp
	cprintf("TRAP frame at %p\n", tf);
f010bb19:	83 ec 08             	sub    $0x8,%esp
f010bb1c:	ff 75 08             	pushl  0x8(%ebp)
f010bb1f:	68 1b 6a 13 f0       	push   $0xf0136a1b
f010bb24:	e8 04 51 ff ff       	call   f0100c2d <cprintf>
f010bb29:	83 c4 10             	add    $0x10,%esp
	print_regs(&tf->tf_regs);
f010bb2c:	8b 45 08             	mov    0x8(%ebp),%eax
f010bb2f:	83 ec 0c             	sub    $0xc,%esp
f010bb32:	50                   	push   %eax
f010bb33:	e8 fd 00 00 00       	call   f010bc35 <print_regs>
f010bb38:	83 c4 10             	add    $0x10,%esp
	cprintf("  es   0x----%04x\n", tf->tf_es);
f010bb3b:	8b 45 08             	mov    0x8(%ebp),%eax
f010bb3e:	8b 40 20             	mov    0x20(%eax),%eax
f010bb41:	0f b7 c0             	movzwl %ax,%eax
f010bb44:	83 ec 08             	sub    $0x8,%esp
f010bb47:	50                   	push   %eax
f010bb48:	68 2d 6a 13 f0       	push   $0xf0136a2d
f010bb4d:	e8 db 50 ff ff       	call   f0100c2d <cprintf>
f010bb52:	83 c4 10             	add    $0x10,%esp
	cprintf("  ds   0x----%04x\n", tf->tf_ds);
f010bb55:	8b 45 08             	mov    0x8(%ebp),%eax
f010bb58:	8b 40 24             	mov    0x24(%eax),%eax
f010bb5b:	0f b7 c0             	movzwl %ax,%eax
f010bb5e:	83 ec 08             	sub    $0x8,%esp
f010bb61:	50                   	push   %eax
f010bb62:	68 40 6a 13 f0       	push   $0xf0136a40
f010bb67:	e8 c1 50 ff ff       	call   f0100c2d <cprintf>
f010bb6c:	83 c4 10             	add    $0x10,%esp
	cprintf("  trap 0x%08x %s - %d\n", tf->tf_trapno, trapname(tf->tf_trapno), tf->tf_trapno);
f010bb6f:	8b 45 08             	mov    0x8(%ebp),%eax
f010bb72:	8b 58 28             	mov    0x28(%eax),%ebx
f010bb75:	8b 45 08             	mov    0x8(%ebp),%eax
f010bb78:	8b 40 28             	mov    0x28(%eax),%eax
f010bb7b:	83 ec 0c             	sub    $0xc,%esp
f010bb7e:	50                   	push   %eax
f010bb7f:	e8 d0 ee ff ff       	call   f010aa54 <trapname>
f010bb84:	83 c4 10             	add    $0x10,%esp
f010bb87:	89 c2                	mov    %eax,%edx
f010bb89:	8b 45 08             	mov    0x8(%ebp),%eax
f010bb8c:	8b 40 28             	mov    0x28(%eax),%eax
f010bb8f:	53                   	push   %ebx
f010bb90:	52                   	push   %edx
f010bb91:	50                   	push   %eax
f010bb92:	68 53 6a 13 f0       	push   $0xf0136a53
f010bb97:	e8 91 50 ff ff       	call   f0100c2d <cprintf>
f010bb9c:	83 c4 10             	add    $0x10,%esp
	cprintf("  err  0x%08x\n", tf->tf_err);
f010bb9f:	8b 45 08             	mov    0x8(%ebp),%eax
f010bba2:	8b 40 2c             	mov    0x2c(%eax),%eax
f010bba5:	83 ec 08             	sub    $0x8,%esp
f010bba8:	50                   	push   %eax
f010bba9:	68 6a 6a 13 f0       	push   $0xf0136a6a
f010bbae:	e8 7a 50 ff ff       	call   f0100c2d <cprintf>
f010bbb3:	83 c4 10             	add    $0x10,%esp
	cprintf("  eip  0x%08x\n", tf->tf_eip);
f010bbb6:	8b 45 08             	mov    0x8(%ebp),%eax
f010bbb9:	8b 40 30             	mov    0x30(%eax),%eax
f010bbbc:	83 ec 08             	sub    $0x8,%esp
f010bbbf:	50                   	push   %eax
f010bbc0:	68 79 6a 13 f0       	push   $0xf0136a79
f010bbc5:	e8 63 50 ff ff       	call   f0100c2d <cprintf>
f010bbca:	83 c4 10             	add    $0x10,%esp
	cprintf("  cs   0x----%04x\n", tf->tf_cs);
f010bbcd:	8b 45 08             	mov    0x8(%ebp),%eax
f010bbd0:	8b 40 34             	mov    0x34(%eax),%eax
f010bbd3:	0f b7 c0             	movzwl %ax,%eax
f010bbd6:	83 ec 08             	sub    $0x8,%esp
f010bbd9:	50                   	push   %eax
f010bbda:	68 88 6a 13 f0       	push   $0xf0136a88
f010bbdf:	e8 49 50 ff ff       	call   f0100c2d <cprintf>
f010bbe4:	83 c4 10             	add    $0x10,%esp
	cprintf("  flag 0x%08x\n", tf->tf_eflags);
f010bbe7:	8b 45 08             	mov    0x8(%ebp),%eax
f010bbea:	8b 40 38             	mov    0x38(%eax),%eax
f010bbed:	83 ec 08             	sub    $0x8,%esp
f010bbf0:	50                   	push   %eax
f010bbf1:	68 9b 6a 13 f0       	push   $0xf0136a9b
f010bbf6:	e8 32 50 ff ff       	call   f0100c2d <cprintf>
f010bbfb:	83 c4 10             	add    $0x10,%esp
	cprintf("  esp  0x%08x\n", tf->tf_esp);
f010bbfe:	8b 45 08             	mov    0x8(%ebp),%eax
f010bc01:	8b 40 3c             	mov    0x3c(%eax),%eax
f010bc04:	83 ec 08             	sub    $0x8,%esp
f010bc07:	50                   	push   %eax
f010bc08:	68 aa 6a 13 f0       	push   $0xf0136aaa
f010bc0d:	e8 1b 50 ff ff       	call   f0100c2d <cprintf>
f010bc12:	83 c4 10             	add    $0x10,%esp
	cprintf("  ss   0x----%04x\n", tf->tf_ss);
f010bc15:	8b 45 08             	mov    0x8(%ebp),%eax
f010bc18:	8b 40 40             	mov    0x40(%eax),%eax
f010bc1b:	0f b7 c0             	movzwl %ax,%eax
f010bc1e:	83 ec 08             	sub    $0x8,%esp
f010bc21:	50                   	push   %eax
f010bc22:	68 b9 6a 13 f0       	push   $0xf0136ab9
f010bc27:	e8 01 50 ff ff       	call   f0100c2d <cprintf>
f010bc2c:	83 c4 10             	add    $0x10,%esp
}
f010bc2f:	90                   	nop
f010bc30:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f010bc33:	c9                   	leave  
f010bc34:	c3                   	ret    

f010bc35 <print_regs>:

void print_regs(struct PushRegs *regs)
{
f010bc35:	55                   	push   %ebp
f010bc36:	89 e5                	mov    %esp,%ebp
f010bc38:	83 ec 08             	sub    $0x8,%esp
	cprintf("  edi  0x%08x\n", regs->reg_edi);
f010bc3b:	8b 45 08             	mov    0x8(%ebp),%eax
f010bc3e:	8b 00                	mov    (%eax),%eax
f010bc40:	83 ec 08             	sub    $0x8,%esp
f010bc43:	50                   	push   %eax
f010bc44:	68 cc 6a 13 f0       	push   $0xf0136acc
f010bc49:	e8 df 4f ff ff       	call   f0100c2d <cprintf>
f010bc4e:	83 c4 10             	add    $0x10,%esp
	cprintf("  esi  0x%08x\n", regs->reg_esi);
f010bc51:	8b 45 08             	mov    0x8(%ebp),%eax
f010bc54:	8b 40 04             	mov    0x4(%eax),%eax
f010bc57:	83 ec 08             	sub    $0x8,%esp
f010bc5a:	50                   	push   %eax
f010bc5b:	68 db 6a 13 f0       	push   $0xf0136adb
f010bc60:	e8 c8 4f ff ff       	call   f0100c2d <cprintf>
f010bc65:	83 c4 10             	add    $0x10,%esp
	cprintf("  ebp  0x%08x\n", regs->reg_ebp);
f010bc68:	8b 45 08             	mov    0x8(%ebp),%eax
f010bc6b:	8b 40 08             	mov    0x8(%eax),%eax
f010bc6e:	83 ec 08             	sub    $0x8,%esp
f010bc71:	50                   	push   %eax
f010bc72:	68 ea 6a 13 f0       	push   $0xf0136aea
f010bc77:	e8 b1 4f ff ff       	call   f0100c2d <cprintf>
f010bc7c:	83 c4 10             	add    $0x10,%esp
	cprintf("  oesp 0x%08x\n", regs->reg_oesp);
f010bc7f:	8b 45 08             	mov    0x8(%ebp),%eax
f010bc82:	8b 40 0c             	mov    0xc(%eax),%eax
f010bc85:	83 ec 08             	sub    $0x8,%esp
f010bc88:	50                   	push   %eax
f010bc89:	68 f9 6a 13 f0       	push   $0xf0136af9
f010bc8e:	e8 9a 4f ff ff       	call   f0100c2d <cprintf>
f010bc93:	83 c4 10             	add    $0x10,%esp
	cprintf("  ebx  0x%08x\n", regs->reg_ebx);
f010bc96:	8b 45 08             	mov    0x8(%ebp),%eax
f010bc99:	8b 40 10             	mov    0x10(%eax),%eax
f010bc9c:	83 ec 08             	sub    $0x8,%esp
f010bc9f:	50                   	push   %eax
f010bca0:	68 08 6b 13 f0       	push   $0xf0136b08
f010bca5:	e8 83 4f ff ff       	call   f0100c2d <cprintf>
f010bcaa:	83 c4 10             	add    $0x10,%esp
	cprintf("  edx  0x%08x\n", regs->reg_edx);
f010bcad:	8b 45 08             	mov    0x8(%ebp),%eax
f010bcb0:	8b 40 14             	mov    0x14(%eax),%eax
f010bcb3:	83 ec 08             	sub    $0x8,%esp
f010bcb6:	50                   	push   %eax
f010bcb7:	68 17 6b 13 f0       	push   $0xf0136b17
f010bcbc:	e8 6c 4f ff ff       	call   f0100c2d <cprintf>
f010bcc1:	83 c4 10             	add    $0x10,%esp
	cprintf("  ecx  0x%08x\n", regs->reg_ecx);
f010bcc4:	8b 45 08             	mov    0x8(%ebp),%eax
f010bcc7:	8b 40 18             	mov    0x18(%eax),%eax
f010bcca:	83 ec 08             	sub    $0x8,%esp
f010bccd:	50                   	push   %eax
f010bcce:	68 26 6b 13 f0       	push   $0xf0136b26
f010bcd3:	e8 55 4f ff ff       	call   f0100c2d <cprintf>
f010bcd8:	83 c4 10             	add    $0x10,%esp
	cprintf("  eax  0x%08x\n", regs->reg_eax);
f010bcdb:	8b 45 08             	mov    0x8(%ebp),%eax
f010bcde:	8b 40 1c             	mov    0x1c(%eax),%eax
f010bce1:	83 ec 08             	sub    $0x8,%esp
f010bce4:	50                   	push   %eax
f010bce5:	68 35 6b 13 f0       	push   $0xf0136b35
f010bcea:	e8 3e 4f ff ff       	call   f0100c2d <cprintf>
f010bcef:	83 c4 10             	add    $0x10,%esp
}
f010bcf2:	90                   	nop
f010bcf3:	c9                   	leave  
f010bcf4:	c3                   	ret    

f010bcf5 <trap_dispatch>:

static void trap_dispatch(struct Trapframe *tf)
{
f010bcf5:	55                   	push   %ebp
f010bcf6:	89 e5                	mov    %esp,%ebp
f010bcf8:	57                   	push   %edi
f010bcf9:	56                   	push   %esi
f010bcfa:	53                   	push   %ebx
f010bcfb:	83 ec 1c             	sub    $0x1c,%esp
	// Handle processor exceptions.
	// LAB 3: Your code here.

	if(tf->tf_trapno == T_PGFLT)
f010bcfe:	8b 45 08             	mov    0x8(%ebp),%eax
f010bd01:	8b 40 28             	mov    0x28(%eax),%eax
f010bd04:	83 f8 0e             	cmp    $0xe,%eax
f010bd07:	75 29                	jne    f010bd32 <trap_dispatch+0x3d>
	{
		//print_trapframe(tf);
		if(isPageReplacmentAlgorithmLRU(PG_REP_LRU_TIME_APPROX))
f010bd09:	83 ec 0c             	sub    $0xc,%esp
f010bd0c:	6a 01                	push   $0x1
f010bd0e:	e8 5a 18 00 00       	call   f010d56d <isPageReplacmentAlgorithmLRU>
f010bd13:	83 c4 10             	add    $0x10,%esp
f010bd16:	85 c0                	test   %eax,%eax
f010bd18:	74 05                	je     f010bd1f <trap_dispatch+0x2a>
		{
			//cprintf("===========Table WS before updating time stamp========\n");
			//env_table_ws_print(curenv) ;
			update_WS_time_stamps();
f010bd1a:	e8 95 9b ff ff       	call   f01058b4 <update_WS_time_stamps>
		}
		fault_handler(tf);
f010bd1f:	83 ec 0c             	sub    $0xc,%esp
f010bd22:	ff 75 08             	pushl  0x8(%ebp)
f010bd25:	e8 3b 02 00 00       	call   f010bf65 <fault_handler>
f010bd2a:	83 c4 10             	add    $0x10,%esp
		else {
			//env_destroy(curenv);
			return;
		}
	}
	return;
f010bd2d:	e9 a5 00 00 00       	jmp    f010bdd7 <trap_dispatch+0xe2>
			//env_table_ws_print(curenv) ;
			update_WS_time_stamps();
		}
		fault_handler(tf);
	}
	else if (tf->tf_trapno == T_SYSCALL)
f010bd32:	8b 45 08             	mov    0x8(%ebp),%eax
f010bd35:	8b 40 28             	mov    0x28(%eax),%eax
f010bd38:	83 f8 30             	cmp    $0x30,%eax
f010bd3b:	75 42                	jne    f010bd7f <trap_dispatch+0x8a>
	{
		uint32 ret = syscall(tf->tf_regs.reg_eax
f010bd3d:	8b 45 08             	mov    0x8(%ebp),%eax
f010bd40:	8b 78 04             	mov    0x4(%eax),%edi
f010bd43:	8b 45 08             	mov    0x8(%ebp),%eax
f010bd46:	8b 30                	mov    (%eax),%esi
f010bd48:	8b 45 08             	mov    0x8(%ebp),%eax
f010bd4b:	8b 58 10             	mov    0x10(%eax),%ebx
f010bd4e:	8b 45 08             	mov    0x8(%ebp),%eax
f010bd51:	8b 48 18             	mov    0x18(%eax),%ecx
f010bd54:	8b 45 08             	mov    0x8(%ebp),%eax
f010bd57:	8b 50 14             	mov    0x14(%eax),%edx
f010bd5a:	8b 45 08             	mov    0x8(%ebp),%eax
f010bd5d:	8b 40 1c             	mov    0x1c(%eax),%eax
f010bd60:	83 ec 08             	sub    $0x8,%esp
f010bd63:	57                   	push   %edi
f010bd64:	56                   	push   %esi
f010bd65:	53                   	push   %ebx
f010bd66:	51                   	push   %ecx
f010bd67:	52                   	push   %edx
f010bd68:	50                   	push   %eax
f010bd69:	e8 4a 0f 00 00       	call   f010ccb8 <syscall>
f010bd6e:	83 c4 20             	add    $0x20,%esp
f010bd71:	89 45 e4             	mov    %eax,-0x1c(%ebp)
				,tf->tf_regs.reg_edx
				,tf->tf_regs.reg_ecx
				,tf->tf_regs.reg_ebx
				,tf->tf_regs.reg_edi
				,tf->tf_regs.reg_esi);
		tf->tf_regs.reg_eax = ret;
f010bd74:	8b 45 08             	mov    0x8(%ebp),%eax
f010bd77:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010bd7a:	89 50 1c             	mov    %edx,0x1c(%eax)
		else {
			//env_destroy(curenv);
			return;
		}
	}
	return;
f010bd7d:	eb 58                	jmp    f010bdd7 <trap_dispatch+0xe2>
				,tf->tf_regs.reg_ebx
				,tf->tf_regs.reg_edi
				,tf->tf_regs.reg_esi);
		tf->tf_regs.reg_eax = ret;
	}
	else if(tf->tf_trapno == T_DBLFLT)
f010bd7f:	8b 45 08             	mov    0x8(%ebp),%eax
f010bd82:	8b 40 28             	mov    0x28(%eax),%eax
f010bd85:	83 f8 08             	cmp    $0x8,%eax
f010bd88:	75 17                	jne    f010bda1 <trap_dispatch+0xac>
	{
		panic("double fault!!");
f010bd8a:	83 ec 04             	sub    $0x4,%esp
f010bd8d:	68 44 6b 13 f0       	push   $0xf0136b44
f010bd92:	68 e7 00 00 00       	push   $0xe7
f010bd97:	68 53 6b 13 f0       	push   $0xf0136b53
f010bd9c:	e8 05 44 ff ff       	call   f01001a6 <_panic>
	}
	else if (tf->tf_trapno == IRQ0_Clock)
f010bda1:	8b 45 08             	mov    0x8(%ebp),%eax
f010bda4:	8b 40 28             	mov    0x28(%eax),%eax
f010bda7:	83 f8 20             	cmp    $0x20,%eax
f010bdaa:	75 07                	jne    f010bdb3 <trap_dispatch+0xbe>
	{
		clock_interrupt_handler() ;
f010bdac:	e8 e2 9a ff ff       	call   f0105893 <clock_interrupt_handler>
		else {
			//env_destroy(curenv);
			return;
		}
	}
	return;
f010bdb1:	eb 24                	jmp    f010bdd7 <trap_dispatch+0xe2>

	else
	{
		// Unexpected trap: The user process or the kernel has a bug.
		//print_trapframe(tf);
		if (tf->tf_cs == GD_KT)
f010bdb3:	8b 45 08             	mov    0x8(%ebp),%eax
f010bdb6:	8b 40 34             	mov    0x34(%eax),%eax
f010bdb9:	66 83 f8 08          	cmp    $0x8,%ax
f010bdbd:	75 17                	jne    f010bdd6 <trap_dispatch+0xe1>
		{
			panic("unhandled trap in kernel");
f010bdbf:	83 ec 04             	sub    $0x4,%esp
f010bdc2:	68 64 6b 13 f0       	push   $0xf0136b64
f010bdc7:	68 f4 00 00 00       	push   $0xf4
f010bdcc:	68 53 6b 13 f0       	push   $0xf0136b53
f010bdd1:	e8 d0 43 ff ff       	call   f01001a6 <_panic>
		}
		else {
			//env_destroy(curenv);
			return;
f010bdd6:	90                   	nop
		}
	}
	return;
}
f010bdd7:	8d 65 f4             	lea    -0xc(%ebp),%esp
f010bdda:	5b                   	pop    %ebx
f010bddb:	5e                   	pop    %esi
f010bddc:	5f                   	pop    %edi
f010bddd:	5d                   	pop    %ebp
f010bdde:	c3                   	ret    

f010bddf <trap>:

void trap(struct Trapframe *tf)
{
f010bddf:	55                   	push   %ebp
f010bde0:	89 e5                	mov    %esp,%ebp
f010bde2:	57                   	push   %edi
f010bde3:	56                   	push   %esi
f010bde4:	53                   	push   %ebx
f010bde5:	83 ec 1c             	sub    $0x1c,%esp
	kclock_stop();
f010bde8:	e8 c1 82 ff ff       	call   f01040ae <kclock_stop>

	int userTrap = 0;
f010bded:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
	if ((tf->tf_cs & 3) == 3) {
f010bdf4:	8b 45 08             	mov    0x8(%ebp),%eax
f010bdf7:	8b 40 34             	mov    0x34(%eax),%eax
f010bdfa:	0f b7 c0             	movzwl %ax,%eax
f010bdfd:	83 e0 03             	and    $0x3,%eax
f010be00:	83 f8 03             	cmp    $0x3,%eax
f010be03:	75 49                	jne    f010be4e <trap+0x6f>
		assert(curenv);
f010be05:	a1 14 82 65 f0       	mov    0xf0658214,%eax
f010be0a:	85 c0                	test   %eax,%eax
f010be0c:	75 19                	jne    f010be27 <trap+0x48>
f010be0e:	68 7d 6b 13 f0       	push   $0xf0136b7d
f010be13:	68 84 6b 13 f0       	push   $0xf0136b84
f010be18:	68 04 01 00 00       	push   $0x104
f010be1d:	68 53 6b 13 f0       	push   $0xf0136b53
f010be22:	e8 7f 43 ff ff       	call   f01001a6 <_panic>
		curenv->env_tf = *tf;
f010be27:	8b 15 14 82 65 f0    	mov    0xf0658214,%edx
f010be2d:	8b 45 08             	mov    0x8(%ebp),%eax
f010be30:	89 c3                	mov    %eax,%ebx
f010be32:	b8 11 00 00 00       	mov    $0x11,%eax
f010be37:	89 d7                	mov    %edx,%edi
f010be39:	89 de                	mov    %ebx,%esi
f010be3b:	89 c1                	mov    %eax,%ecx
f010be3d:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
		tf = &(curenv->env_tf);
f010be3f:	a1 14 82 65 f0       	mov    0xf0658214,%eax
f010be44:	89 45 08             	mov    %eax,0x8(%ebp)
		userTrap = 1;
f010be47:	c7 45 e4 01 00 00 00 	movl   $0x1,-0x1c(%ebp)
	}
	if(tf->tf_trapno == IRQ0_Clock)
f010be4e:	8b 45 08             	mov    0x8(%ebp),%eax
f010be51:	8b 40 28             	mov    0x28(%eax),%eax
f010be54:	83 f8 20             	cmp    $0x20,%eax
f010be57:	75 40                	jne    f010be99 <trap+0xba>
	{
		//		uint16 cnt0 = kclock_read_cnt0() ;
		//		cprintf("CLOCK INTERRUPT: Counter0 Value = %d\n", cnt0 );

		if (userTrap)
f010be59:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f010be5d:	0f 84 a6 00 00 00    	je     f010bf09 <trap+0x12a>
		{
			assert(curenv);
f010be63:	a1 14 82 65 f0       	mov    0xf0658214,%eax
f010be68:	85 c0                	test   %eax,%eax
f010be6a:	75 19                	jne    f010be85 <trap+0xa6>
f010be6c:	68 7d 6b 13 f0       	push   $0xf0136b7d
f010be71:	68 84 6b 13 f0       	push   $0xf0136b84
f010be76:	68 10 01 00 00       	push   $0x110
f010be7b:	68 53 6b 13 f0       	push   $0xf0136b53
f010be80:	e8 21 43 ff ff       	call   f01001a6 <_panic>
			curenv->nClocks++ ;
f010be85:	a1 14 82 65 f0       	mov    0xf0658214,%eax
f010be8a:	8b 90 60 da 01 00    	mov    0x1da60(%eax),%edx
f010be90:	42                   	inc    %edx
f010be91:	89 90 60 da 01 00    	mov    %edx,0x1da60(%eax)
f010be97:	eb 70                	jmp    f010bf09 <trap+0x12a>
		}
	}
	else if (tf->tf_trapno == T_PGFLT){
f010be99:	8b 45 08             	mov    0x8(%ebp),%eax
f010be9c:	8b 40 28             	mov    0x28(%eax),%eax
f010be9f:	83 f8 0e             	cmp    $0xe,%eax
f010bea2:	75 65                	jne    f010bf09 <trap+0x12a>
		//2016: Bypass the faulted instruction
		if (bypassInstrLength != 0){
f010bea4:	a0 a8 8a 65 f0       	mov    0xf0658aa8,%al
f010bea9:	84 c0                	test   %al,%al
f010beab:	74 5c                	je     f010bf09 <trap+0x12a>
			if (userTrap){
f010bead:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f010beb1:	74 2c                	je     f010bedf <trap+0x100>
				curenv->env_tf.tf_eip = (uint32*)((uint32)(curenv->env_tf.tf_eip) + bypassInstrLength);
f010beb3:	a1 14 82 65 f0       	mov    0xf0658214,%eax
f010beb8:	8b 15 14 82 65 f0    	mov    0xf0658214,%edx
f010bebe:	8b 52 30             	mov    0x30(%edx),%edx
f010bec1:	89 d1                	mov    %edx,%ecx
f010bec3:	8a 15 a8 8a 65 f0    	mov    0xf0658aa8,%dl
f010bec9:	0f b6 d2             	movzbl %dl,%edx
f010becc:	01 ca                	add    %ecx,%edx
f010bece:	89 50 30             	mov    %edx,0x30(%eax)
				env_run(curenv);
f010bed1:	a1 14 82 65 f0       	mov    0xf0658214,%eax
f010bed6:	83 ec 0c             	sub    $0xc,%esp
f010bed9:	50                   	push   %eax
f010beda:	e8 5e d4 ff ff       	call   f010933d <env_run>
			}
			else{
				tf->tf_eip = (uint32*)((uint32)(tf->tf_eip) + bypassInstrLength);
f010bedf:	8b 45 08             	mov    0x8(%ebp),%eax
f010bee2:	8b 40 30             	mov    0x30(%eax),%eax
f010bee5:	89 c2                	mov    %eax,%edx
f010bee7:	a0 a8 8a 65 f0       	mov    0xf0658aa8,%al
f010beec:	0f b6 c0             	movzbl %al,%eax
f010beef:	01 d0                	add    %edx,%eax
f010bef1:	89 c2                	mov    %eax,%edx
f010bef3:	8b 45 08             	mov    0x8(%ebp),%eax
f010bef6:	89 50 30             	mov    %edx,0x30(%eax)
				kclock_resume();
f010bef9:	e8 db 81 ff ff       	call   f01040d9 <kclock_resume>
				env_pop_tf(tf);
f010befe:	83 ec 0c             	sub    $0xc,%esp
f010bf01:	ff 75 08             	pushl  0x8(%ebp)
f010bf04:	e8 99 d5 ff ff       	call   f01094a2 <env_pop_tf>
			}
		}
	}
	trap_dispatch(tf);
f010bf09:	83 ec 0c             	sub    $0xc,%esp
f010bf0c:	ff 75 08             	pushl  0x8(%ebp)
f010bf0f:	e8 e1 fd ff ff       	call   f010bcf5 <trap_dispatch>
f010bf14:	83 c4 10             	add    $0x10,%esp
	if (userTrap)
f010bf17:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f010bf1b:	74 3d                	je     f010bf5a <trap+0x17b>
	{
		assert(curenv && curenv->env_status == ENV_RUNNABLE);
f010bf1d:	a1 14 82 65 f0       	mov    0xf0658214,%eax
f010bf22:	85 c0                	test   %eax,%eax
f010bf24:	74 0d                	je     f010bf33 <trap+0x154>
f010bf26:	a1 14 82 65 f0       	mov    0xf0658214,%eax
f010bf2b:	8b 40 54             	mov    0x54(%eax),%eax
f010bf2e:	83 f8 02             	cmp    $0x2,%eax
f010bf31:	74 19                	je     f010bf4c <trap+0x16d>
f010bf33:	68 9c 6b 13 f0       	push   $0xf0136b9c
f010bf38:	68 84 6b 13 f0       	push   $0xf0136b84
f010bf3d:	68 25 01 00 00       	push   $0x125
f010bf42:	68 53 6b 13 f0       	push   $0xf0136b53
f010bf47:	e8 5a 42 ff ff       	call   f01001a6 <_panic>
		env_run(curenv);
f010bf4c:	a1 14 82 65 f0       	mov    0xf0658214,%eax
f010bf51:	83 ec 0c             	sub    $0xc,%esp
f010bf54:	50                   	push   %eax
f010bf55:	e8 e3 d3 ff ff       	call   f010933d <env_run>
	/* 2019
	 * If trap from kernel, then return to the called kernel function using the passed param "tf" not the user one that's stored in curenv
	 */
	else
	{
		env_pop_tf((tf));
f010bf5a:	83 ec 0c             	sub    $0xc,%esp
f010bf5d:	ff 75 08             	pushl  0x8(%ebp)
f010bf60:	e8 3d d5 ff ff       	call   f01094a2 <env_pop_tf>

f010bf65 <fault_handler>:
	}
}


void fault_handler(struct Trapframe *tf)
{
f010bf65:	55                   	push   %ebp
f010bf66:	89 e5                	mov    %esp,%ebp
f010bf68:	83 ec 28             	sub    $0x28,%esp
	int userTrap = 0;
f010bf6b:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	if ((tf->tf_cs & 3) == 3) {
f010bf72:	8b 45 08             	mov    0x8(%ebp),%eax
f010bf75:	8b 40 34             	mov    0x34(%eax),%eax
f010bf78:	0f b7 c0             	movzwl %ax,%eax
f010bf7b:	83 e0 03             	and    $0x3,%eax
f010bf7e:	83 f8 03             	cmp    $0x3,%eax
f010bf81:	75 07                	jne    f010bf8a <fault_handler+0x25>
		userTrap = 1;
f010bf83:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)

static __inline uint32
rcr2(void)
{
	uint32 val;
	__asm __volatile("movl %%cr2,%0" : "=r" (val));
f010bf8a:	0f 20 d0             	mov    %cr2,%eax
f010bf8d:	89 45 e4             	mov    %eax,-0x1c(%ebp)
	return val;
f010bf90:	8b 45 e4             	mov    -0x1c(%ebp),%eax
	}
	//print_trapframe(tf);
	uint32 fault_va;

	// Read processor's CR2 register to find the faulting address
	fault_va = rcr2();
f010bf93:	89 45 ec             	mov    %eax,-0x14(%ebp)

	//2017: Check stack overflow for Kernel
	if (!userTrap)
f010bf96:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010bf9a:	75 29                	jne    f010bfc5 <fault_handler+0x60>
	{
		if (fault_va < KERNEL_STACK_TOP - KERNEL_STACK_SIZE && fault_va >= USER_LIMIT)
f010bf9c:	81 7d ec ff 7f bf ef 	cmpl   $0xefbf7fff,-0x14(%ebp)
f010bfa3:	77 40                	ja     f010bfe5 <fault_handler+0x80>
f010bfa5:	81 7d ec ff ff 7f ef 	cmpl   $0xef7fffff,-0x14(%ebp)
f010bfac:	76 37                	jbe    f010bfe5 <fault_handler+0x80>
			panic("Kernel: stack overflow exception!");
f010bfae:	83 ec 04             	sub    $0x4,%esp
f010bfb1:	68 cc 6b 13 f0       	push   $0xf0136bcc
f010bfb6:	68 42 01 00 00       	push   $0x142
f010bfbb:	68 53 6b 13 f0       	push   $0xf0136b53
f010bfc0:	e8 e1 41 ff ff       	call   f01001a6 <_panic>
	}
	//2017: Check stack underflow for User
	else
	{
		if (fault_va >= USTACKTOP)
f010bfc5:	81 7d ec ff df bf ee 	cmpl   $0xeebfdfff,-0x14(%ebp)
f010bfcc:	76 17                	jbe    f010bfe5 <fault_handler+0x80>
			panic("User: stack underflow exception!");
f010bfce:	83 ec 04             	sub    $0x4,%esp
f010bfd1:	68 f0 6b 13 f0       	push   $0xf0136bf0
f010bfd6:	68 48 01 00 00       	push   $0x148
f010bfdb:	68 53 6b 13 f0       	push   $0xf0136b53
f010bfe0:	e8 c1 41 ff ff       	call   f01001a6 <_panic>
	}

	//get a pointer to the environment that caused the fault at runtime
	struct Env* faulted_env = curenv;
f010bfe5:	a1 14 82 65 f0       	mov    0xf0658214,%eax
f010bfea:	89 45 e8             	mov    %eax,-0x18(%ebp)

	//check the faulted address, is it a table or not ?
	//If the directory entry of the faulted address is NOT PRESENT then
	if ( (curenv->env_page_directory[PDX(fault_va)] & PERM_PRESENT) != PERM_PRESENT)
f010bfed:	a1 14 82 65 f0       	mov    0xf0658214,%eax
f010bff2:	8b 40 5c             	mov    0x5c(%eax),%eax
f010bff5:	8b 55 ec             	mov    -0x14(%ebp),%edx
f010bff8:	c1 ea 16             	shr    $0x16,%edx
f010bffb:	c1 e2 02             	shl    $0x2,%edx
f010bffe:	01 d0                	add    %edx,%eax
f010c000:	8b 00                	mov    (%eax),%eax
f010c002:	83 e0 01             	and    $0x1,%eax
f010c005:	85 c0                	test   %eax,%eax
f010c007:	75 28                	jne    f010c031 <fault_handler+0xcc>
	{
		// we have a table fault =============================================================
		//cprintf("[%s] user TABLE fault va %08x\n", curenv->prog_name, fault_va);
		faulted_env->tableFaultsCounter ++ ;
f010c009:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010c00c:	8b 80 f4 d9 01 00    	mov    0x1d9f4(%eax),%eax
f010c012:	8d 50 01             	lea    0x1(%eax),%edx
f010c015:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010c018:	89 90 f4 d9 01 00    	mov    %edx,0x1d9f4(%eax)

		table_fault_handler(faulted_env, fault_va);
f010c01e:	83 ec 08             	sub    $0x8,%esp
f010c021:	ff 75 ec             	pushl  -0x14(%ebp)
f010c024:	ff 75 e8             	pushl  -0x18(%ebp)
f010c027:	e8 26 16 00 00       	call   f010d652 <table_fault_handler>
f010c02c:	83 c4 10             	add    $0x10,%esp
f010c02f:	eb 42                	jmp    f010c073 <fault_handler+0x10e>
	}
	else
	{
		// we have normal page fault =============================================================
		faulted_env->pageFaultsCounter ++ ;
f010c031:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010c034:	8b 80 f0 d9 01 00    	mov    0x1d9f0(%eax),%eax
f010c03a:	8d 50 01             	lea    0x1(%eax),%edx
f010c03d:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010c040:	89 90 f0 d9 01 00    	mov    %edx,0x1d9f0(%eax)

		//cprintf("[%08s] user PAGE fault va %08x\n", curenv->prog_name, fault_va);
		//cprintf("\nPage working set BEFORE fault handler...\n");
		//env_page_ws_print(curenv);

		if(isBufferingEnabled())
f010c046:	e8 e5 15 00 00       	call   f010d630 <isBufferingEnabled>
f010c04b:	84 c0                	test   %al,%al
f010c04d:	74 13                	je     f010c062 <fault_handler+0xfd>
		{
			__page_fault_handler_with_buffering(faulted_env, fault_va);
f010c04f:	83 ec 08             	sub    $0x8,%esp
f010c052:	ff 75 ec             	pushl  -0x14(%ebp)
f010c055:	ff 75 e8             	pushl  -0x18(%ebp)
f010c058:	e8 31 16 00 00       	call   f010d68e <__page_fault_handler_with_buffering>
f010c05d:	83 c4 10             	add    $0x10,%esp
f010c060:	eb 11                	jmp    f010c073 <fault_handler+0x10e>
		}
		else
		{
			//page_fault_handler(faulted_env, fault_va);
			page_fault_handler(faulted_env, fault_va);
f010c062:	83 ec 08             	sub    $0x8,%esp
f010c065:	ff 75 ec             	pushl  -0x14(%ebp)
f010c068:	ff 75 e8             	pushl  -0x18(%ebp)
f010c06b:	e8 04 16 00 00       	call   f010d674 <page_fault_handler>
f010c070:	83 c4 10             	add    $0x10,%esp

static __inline void
tlbflush(void)
{
	uint32 cr3;
	__asm __volatile("movl %%cr3,%0" : "=r" (cr3));
f010c073:	0f 20 d8             	mov    %cr3,%eax
f010c076:	89 45 f0             	mov    %eax,-0x10(%ebp)
	__asm __volatile("movl %0,%%cr3" : : "r" (cr3));
f010c079:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010c07c:	0f 22 d8             	mov    %eax,%cr3
	/*************************************************************/
	//Refresh the TLB cache
	tlbflush();
	/*************************************************************/

}
f010c07f:	90                   	nop
f010c080:	c9                   	leave  
f010c081:	c3                   	ret    

f010c082 <PAGE_FAULT>:

/*
 * Lab 3: Your code here for generating entry points for the different traps.
 */

TRAPHANDLER(PAGE_FAULT, T_PGFLT)
f010c082:	6a 0e                	push   $0xe
f010c084:	e9 ed 00 00 00       	jmp    f010c176 <_alltraps>
f010c089:	90                   	nop

f010c08a <SYSCALL_HANDLER>:

TRAPHANDLER_NOEC(SYSCALL_HANDLER, T_SYSCALL)
f010c08a:	6a 00                	push   $0x0
f010c08c:	6a 30                	push   $0x30
f010c08e:	e9 e3 00 00 00       	jmp    f010c176 <_alltraps>
f010c093:	90                   	nop

f010c094 <DBL_FAULT>:

// FOS 2010
//TRAPHANDLER(GP_FAULT, T_GPFLT)
TRAPHANDLER(DBL_FAULT, T_DBLFLT)
f010c094:	6a 08                	push   $0x8
f010c096:	e9 db 00 00 00       	jmp    f010c176 <_alltraps>
f010c09b:	90                   	nop

f010c09c <ALL_FAULTS0>:

TRAPHANDLER_NOEC(ALL_FAULTS0, T_DIVIDE)//     0		// divide error
f010c09c:	6a 00                	push   $0x0
f010c09e:	6a 00                	push   $0x0
f010c0a0:	e9 d1 00 00 00       	jmp    f010c176 <_alltraps>
f010c0a5:	90                   	nop

f010c0a6 <ALL_FAULTS1>:
TRAPHANDLER_NOEC(ALL_FAULTS1, T_DEBUG   )//   1		// debug exception
f010c0a6:	6a 00                	push   $0x0
f010c0a8:	6a 01                	push   $0x1
f010c0aa:	e9 c7 00 00 00       	jmp    f010c176 <_alltraps>
f010c0af:	90                   	nop

f010c0b0 <ALL_FAULTS2>:
TRAPHANDLER_NOEC(ALL_FAULTS2,  T_NMI       )// 2		// non-maskable interrupt
f010c0b0:	6a 00                	push   $0x0
f010c0b2:	6a 02                	push   $0x2
f010c0b4:	e9 bd 00 00 00       	jmp    f010c176 <_alltraps>
f010c0b9:	90                   	nop

f010c0ba <ALL_FAULTS3>:
TRAPHANDLER_NOEC(ALL_FAULTS3,  T_BRKPT      )//3		// breakpoint
f010c0ba:	6a 00                	push   $0x0
f010c0bc:	6a 03                	push   $0x3
f010c0be:	e9 b3 00 00 00       	jmp    f010c176 <_alltraps>
f010c0c3:	90                   	nop

f010c0c4 <ALL_FAULTS4>:
TRAPHANDLER_NOEC(ALL_FAULTS4,  T_OFLOW      )//4		// overflow
f010c0c4:	6a 00                	push   $0x0
f010c0c6:	6a 04                	push   $0x4
f010c0c8:	e9 a9 00 00 00       	jmp    f010c176 <_alltraps>
f010c0cd:	90                   	nop

f010c0ce <ALL_FAULTS5>:
TRAPHANDLER_NOEC(ALL_FAULTS5,  T_BOUND      )//5		// bounds check
f010c0ce:	6a 00                	push   $0x0
f010c0d0:	6a 05                	push   $0x5
f010c0d2:	e9 9f 00 00 00       	jmp    f010c176 <_alltraps>
f010c0d7:	90                   	nop

f010c0d8 <ALL_FAULTS6>:
TRAPHANDLER_NOEC(ALL_FAULTS6,  T_ILLOP      )//6		// illegal opcode
f010c0d8:	6a 00                	push   $0x0
f010c0da:	6a 06                	push   $0x6
f010c0dc:	e9 95 00 00 00       	jmp    f010c176 <_alltraps>
f010c0e1:	90                   	nop

f010c0e2 <ALL_FAULTS7>:
TRAPHANDLER_NOEC(ALL_FAULTS7,  T_DEVICE     )//7		// device not available
f010c0e2:	6a 00                	push   $0x0
f010c0e4:	6a 07                	push   $0x7
f010c0e6:	e9 8b 00 00 00       	jmp    f010c176 <_alltraps>
f010c0eb:	90                   	nop

f010c0ec <ALL_FAULTS10>:
//TRAPHANDLER(ALL_FAULTS,  T_DBLFLT     8		// double fault
//TRAPHANDLER_NOEC(ALL_FAULTS,  9   )//9	// reserved (not generated by recent processors)
TRAPHANDLER(ALL_FAULTS10,  T_TSS       )//10		// invalid task switch segment
f010c0ec:	6a 0a                	push   $0xa
f010c0ee:	e9 83 00 00 00       	jmp    f010c176 <_alltraps>
f010c0f3:	90                   	nop

f010c0f4 <ALL_FAULTS11>:
TRAPHANDLER(ALL_FAULTS11,  T_SEGNP     )//11		// segment not present
f010c0f4:	6a 0b                	push   $0xb
f010c0f6:	eb 7e                	jmp    f010c176 <_alltraps>

f010c0f8 <ALL_FAULTS12>:
TRAPHANDLER(ALL_FAULTS12,  T_STACK     )//12		// stack exception
f010c0f8:	6a 0c                	push   $0xc
f010c0fa:	eb 7a                	jmp    f010c176 <_alltraps>

f010c0fc <ALL_FAULTS13>:
TRAPHANDLER(ALL_FAULTS13,  T_GPFLT     )//13		// General protection fault
f010c0fc:	6a 0d                	push   $0xd
f010c0fe:	eb 76                	jmp    f010c176 <_alltraps>

f010c100 <ALL_FAULTS16>:
//TRAPHANDLER(ALL_FAULTS,  T_PGFLT     14		// page fault
//TRAPHANDLER(ALL_FAULTS,  15    )	//15 	// reserved
TRAPHANDLER_NOEC(ALL_FAULTS16,  T_FPERR     )//16		// floating point error
f010c100:	6a 00                	push   $0x0
f010c102:	6a 10                	push   $0x10
f010c104:	eb 70                	jmp    f010c176 <_alltraps>

f010c106 <ALL_FAULTS17>:
TRAPHANDLER(ALL_FAULTS17,  T_ALIGN     )//17		// Alignment check
f010c106:	6a 11                	push   $0x11
f010c108:	eb 6c                	jmp    f010c176 <_alltraps>

f010c10a <ALL_FAULTS18>:
TRAPHANDLER_NOEC(ALL_FAULTS18,  T_MCHK      )//18		// machine check
f010c10a:	6a 00                	push   $0x0
f010c10c:	6a 12                	push   $0x12
f010c10e:	eb 66                	jmp    f010c176 <_alltraps>

f010c110 <ALL_FAULTS19>:
TRAPHANDLER_NOEC(ALL_FAULTS19,  19      )//19		// the last one
f010c110:	6a 00                	push   $0x0
f010c112:	6a 13                	push   $0x13
f010c114:	eb 60                	jmp    f010c176 <_alltraps>

f010c116 <ALL_FAULTS32>:

TRAPHANDLER_NOEC(ALL_FAULTS32,		IRQ0_Clock      )//32 the first IRQ
f010c116:	6a 00                	push   $0x0
f010c118:	6a 20                	push   $0x20
f010c11a:	eb 5a                	jmp    f010c176 <_alltraps>

f010c11c <ALL_FAULTS33>:
TRAPHANDLER_NOEC(ALL_FAULTS33,		33		)//33
f010c11c:	6a 00                	push   $0x0
f010c11e:	6a 21                	push   $0x21
f010c120:	eb 54                	jmp    f010c176 <_alltraps>

f010c122 <ALL_FAULTS34>:
TRAPHANDLER_NOEC(ALL_FAULTS34,      34		)//34
f010c122:	6a 00                	push   $0x0
f010c124:	6a 22                	push   $0x22
f010c126:	eb 4e                	jmp    f010c176 <_alltraps>

f010c128 <ALL_FAULTS35>:
TRAPHANDLER_NOEC(ALL_FAULTS35,		35		)//35
f010c128:	6a 00                	push   $0x0
f010c12a:	6a 23                	push   $0x23
f010c12c:	eb 48                	jmp    f010c176 <_alltraps>

f010c12e <ALL_FAULTS36>:
TRAPHANDLER_NOEC(ALL_FAULTS36,      36      )//36
f010c12e:	6a 00                	push   $0x0
f010c130:	6a 24                	push   $0x24
f010c132:	eb 42                	jmp    f010c176 <_alltraps>

f010c134 <ALL_FAULTS37>:
TRAPHANDLER_NOEC(ALL_FAULTS37,      37      )//37
f010c134:	6a 00                	push   $0x0
f010c136:	6a 25                	push   $0x25
f010c138:	eb 3c                	jmp    f010c176 <_alltraps>

f010c13a <ALL_FAULTS38>:
TRAPHANDLER_NOEC(ALL_FAULTS38,      38		)//38
f010c13a:	6a 00                	push   $0x0
f010c13c:	6a 26                	push   $0x26
f010c13e:	eb 36                	jmp    f010c176 <_alltraps>

f010c140 <ALL_FAULTS39>:
TRAPHANDLER_NOEC(ALL_FAULTS39,      39		)//39
f010c140:	6a 00                	push   $0x0
f010c142:	6a 27                	push   $0x27
f010c144:	eb 30                	jmp    f010c176 <_alltraps>

f010c146 <ALL_FAULTS40>:
TRAPHANDLER_NOEC(ALL_FAULTS40,      40		)//40
f010c146:	6a 00                	push   $0x0
f010c148:	6a 28                	push   $0x28
f010c14a:	eb 2a                	jmp    f010c176 <_alltraps>

f010c14c <ALL_FAULTS41>:
TRAPHANDLER_NOEC(ALL_FAULTS41,      41		)//41
f010c14c:	6a 00                	push   $0x0
f010c14e:	6a 29                	push   $0x29
f010c150:	eb 24                	jmp    f010c176 <_alltraps>

f010c152 <ALL_FAULTS42>:
TRAPHANDLER_NOEC(ALL_FAULTS42,      42		)//42
f010c152:	6a 00                	push   $0x0
f010c154:	6a 2a                	push   $0x2a
f010c156:	eb 1e                	jmp    f010c176 <_alltraps>

f010c158 <ALL_FAULTS43>:
TRAPHANDLER_NOEC(ALL_FAULTS43,      43		)//43
f010c158:	6a 00                	push   $0x0
f010c15a:	6a 2b                	push   $0x2b
f010c15c:	eb 18                	jmp    f010c176 <_alltraps>

f010c15e <ALL_FAULTS44>:
TRAPHANDLER_NOEC(ALL_FAULTS44,      44		)//44
f010c15e:	6a 00                	push   $0x0
f010c160:	6a 2c                	push   $0x2c
f010c162:	eb 12                	jmp    f010c176 <_alltraps>

f010c164 <ALL_FAULTS45>:
TRAPHANDLER_NOEC(ALL_FAULTS45,      45		)//45
f010c164:	6a 00                	push   $0x0
f010c166:	6a 2d                	push   $0x2d
f010c168:	eb 0c                	jmp    f010c176 <_alltraps>

f010c16a <ALL_FAULTS46>:
TRAPHANDLER_NOEC(ALL_FAULTS46,      46		)//46
f010c16a:	6a 00                	push   $0x0
f010c16c:	6a 2e                	push   $0x2e
f010c16e:	eb 06                	jmp    f010c176 <_alltraps>

f010c170 <ALL_FAULTS47>:
TRAPHANDLER_NOEC(ALL_FAULTS47,      47		)//47 the last IRQ
f010c170:	6a 00                	push   $0x0
f010c172:	6a 2f                	push   $0x2f
f010c174:	eb 00                	jmp    f010c176 <_alltraps>

f010c176 <_alltraps>:
/*
 * Lab 3: Your code here for _alltraps
 */
_alltraps:

push %ds
f010c176:	1e                   	push   %ds
push %es
f010c177:	06                   	push   %es
pushal
f010c178:	60                   	pusha  

mov $(GD_KD), %ax
f010c179:	66 b8 10 00          	mov    $0x10,%ax
mov %ax,%ds
f010c17d:	8e d8                	mov    %eax,%ds
mov %ax,%es
f010c17f:	8e c0                	mov    %eax,%es

push %esp
f010c181:	54                   	push   %esp

call trap
f010c182:	e8 58 fc ff ff       	call   f010bddf <trap>

pop %ecx /* poping the pointer to the tf from the stack so that the stack top is at
f010c187:	59                   	pop    %ecx
			# the beginning values of the registers pushed by pusha*/
popal
f010c188:	61                   	popa   
pop %es
f010c189:	07                   	pop    %es
pop %ds
f010c18a:	1f                   	pop    %ds

/*skipping the trap_no and the error code so that the stack top is at the old eip value*/
add $(8),%esp
f010c18b:	83 c4 08             	add    $0x8,%esp

iret
f010c18e:	cf                   	iret   

f010c18f <to_frame_number>:
struct FrameInfo *get_frame_info(uint32 *ptr_page_directory, uint32 virtual_address, uint32 **ptr_page_table);
void decrement_references(struct FrameInfo* ptr_frame_info);
void initialize_frame_info(struct FrameInfo *ptr_frame_info);

static inline uint32 to_frame_number(struct FrameInfo *ptr_frame_info)
{
f010c18f:	55                   	push   %ebp
f010c190:	89 e5                	mov    %esp,%ebp
	return ptr_frame_info - frames_info;
f010c192:	8b 45 08             	mov    0x8(%ebp),%eax
f010c195:	8b 15 90 0e 6c f0    	mov    0xf06c0e90,%edx
f010c19b:	29 d0                	sub    %edx,%eax
f010c19d:	c1 f8 03             	sar    $0x3,%eax
f010c1a0:	89 c2                	mov    %eax,%edx
f010c1a2:	89 d0                	mov    %edx,%eax
f010c1a4:	c1 e0 02             	shl    $0x2,%eax
f010c1a7:	01 d0                	add    %edx,%eax
f010c1a9:	c1 e0 02             	shl    $0x2,%eax
f010c1ac:	01 d0                	add    %edx,%eax
f010c1ae:	c1 e0 02             	shl    $0x2,%eax
f010c1b1:	01 d0                	add    %edx,%eax
f010c1b3:	89 c1                	mov    %eax,%ecx
f010c1b5:	c1 e1 08             	shl    $0x8,%ecx
f010c1b8:	01 c8                	add    %ecx,%eax
f010c1ba:	89 c1                	mov    %eax,%ecx
f010c1bc:	c1 e1 10             	shl    $0x10,%ecx
f010c1bf:	01 c8                	add    %ecx,%eax
f010c1c1:	01 c0                	add    %eax,%eax
f010c1c3:	01 d0                	add    %edx,%eax
}
f010c1c5:	5d                   	pop    %ebp
f010c1c6:	c3                   	ret    

f010c1c7 <to_physical_address>:

static inline uint32 to_physical_address(struct FrameInfo *ptr_frame_info)
{
f010c1c7:	55                   	push   %ebp
f010c1c8:	89 e5                	mov    %esp,%ebp
	return to_frame_number(ptr_frame_info) << PGSHIFT;
f010c1ca:	ff 75 08             	pushl  0x8(%ebp)
f010c1cd:	e8 bd ff ff ff       	call   f010c18f <to_frame_number>
f010c1d2:	83 c4 04             	add    $0x4,%esp
f010c1d5:	c1 e0 0c             	shl    $0xc,%eax
}
f010c1d8:	c9                   	leave  
f010c1d9:	c3                   	ret    

f010c1da <sys_cputs>:

// Print a string to the system console.
// The string is exactly 'len' characters long.
// Destroys the environment on memory errors.
static void sys_cputs(const char *s, uint32 len, uint8 printProgName)
{
f010c1da:	55                   	push   %ebp
f010c1db:	89 e5                	mov    %esp,%ebp
f010c1dd:	83 ec 18             	sub    $0x18,%esp
f010c1e0:	8b 45 10             	mov    0x10(%ebp),%eax
f010c1e3:	88 45 f4             	mov    %al,-0xc(%ebp)
	// Destroy the environment if not.

	// LAB 3: Your code here.

	// Print the string supplied by the user.
	if (printProgName)
f010c1e6:	80 7d f4 00          	cmpb   $0x0,-0xc(%ebp)
f010c1ea:	74 26                	je     f010c212 <sys_cputs+0x38>
		cprintf("[%s %d] ",curenv->prog_name, curenv->env_id);
f010c1ec:	a1 14 82 65 f0       	mov    0xf0658214,%eax
f010c1f1:	8b 40 4c             	mov    0x4c(%eax),%eax
f010c1f4:	8b 15 14 82 65 f0    	mov    0xf0658214,%edx
f010c1fa:	81 c2 18 da 01 00    	add    $0x1da18,%edx
f010c200:	83 ec 04             	sub    $0x4,%esp
f010c203:	50                   	push   %eax
f010c204:	52                   	push   %edx
f010c205:	68 b0 6d 13 f0       	push   $0xf0136db0
f010c20a:	e8 1e 4a ff ff       	call   f0100c2d <cprintf>
f010c20f:	83 c4 10             	add    $0x10,%esp
	cprintf("%.*s",len, s);
f010c212:	83 ec 04             	sub    $0x4,%esp
f010c215:	ff 75 08             	pushl  0x8(%ebp)
f010c218:	ff 75 0c             	pushl  0xc(%ebp)
f010c21b:	68 b9 6d 13 f0       	push   $0xf0136db9
f010c220:	e8 08 4a ff ff       	call   f0100c2d <cprintf>
f010c225:	83 c4 10             	add    $0x10,%esp
	//cprintf("%.*s", len, s);
}
f010c228:	90                   	nop
f010c229:	c9                   	leave  
f010c22a:	c3                   	ret    

f010c22b <sys_cputc>:


// Print a char to the system console.
static void sys_cputc(const char c)
{
f010c22b:	55                   	push   %ebp
f010c22c:	89 e5                	mov    %esp,%ebp
f010c22e:	83 ec 18             	sub    $0x18,%esp
f010c231:	8b 45 08             	mov    0x8(%ebp),%eax
f010c234:	88 45 f4             	mov    %al,-0xc(%ebp)
	// Print the char supplied by the user.
	cprintf("%c",c);
f010c237:	0f be 45 f4          	movsbl -0xc(%ebp),%eax
f010c23b:	83 ec 08             	sub    $0x8,%esp
f010c23e:	50                   	push   %eax
f010c23f:	68 be 6d 13 f0       	push   $0xf0136dbe
f010c244:	e8 e4 49 ff ff       	call   f0100c2d <cprintf>
f010c249:	83 c4 10             	add    $0x10,%esp
}
f010c24c:	90                   	nop
f010c24d:	c9                   	leave  
f010c24e:	c3                   	ret    

f010c24f <sys_cgetc>:

// Read a character from the system console.
// Returns the character.
static int
sys_cgetc(void)
{
f010c24f:	55                   	push   %ebp
f010c250:	89 e5                	mov    %esp,%ebp
f010c252:	83 ec 18             	sub    $0x18,%esp
	//while ((c = cons_getc()) == 0)
	//2013: instead of busywaiting inside kernel code , we moved the waiting to user code,
	// this allows any other running user programs to run beacause the clock interrupt works in user mode
	// (the kernel system call by default disables the interrupts, so any loops inside the kernel while
	// handling an interrupt will cause the clock interrupt to be disabled)
	c = cons_getc2();
f010c255:	e8 0d 48 ff ff       	call   f0100a67 <cons_getc2>
f010c25a:	89 45 f4             	mov    %eax,-0xc(%ebp)
	/* do nothing */;

	return c;
f010c25d:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f010c260:	c9                   	leave  
f010c261:	c3                   	ret    

f010c262 <__sys_allocate_page>:
//	E_INVAL if va >= UTOP, or va is not page-aligned.
//	E_INVAL if perm is inappropriate (see above).
//	E_NO_MEM if there's no memory to allocate the new page,
//		or to allocate any necessary page tables.
static int __sys_allocate_page(void *va, int perm)
{
f010c262:	55                   	push   %ebp
f010c263:	89 e5                	mov    %esp,%ebp
f010c265:	83 ec 28             	sub    $0x28,%esp
	//   parameters for correctness.
	//   If page_insert() fails, remember to free the page you
	//   allocated!

	int r;
	struct Env *e = curenv;
f010c268:	a1 14 82 65 f0       	mov    0xf0658214,%eax
f010c26d:	89 45 f4             	mov    %eax,-0xc(%ebp)

	//if ((r = envid2env(envid, &e, 1)) < 0)
	//return r;

	struct FrameInfo *ptr_frame_info ;
	r = allocate_frame(&ptr_frame_info) ;
f010c270:	83 ec 0c             	sub    $0xc,%esp
f010c273:	8d 45 e0             	lea    -0x20(%ebp),%eax
f010c276:	50                   	push   %eax
f010c277:	e8 2e a5 ff ff       	call   f01067aa <allocate_frame>
f010c27c:	83 c4 10             	add    $0x10,%esp
f010c27f:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (r == E_NO_MEM)
f010c282:	83 7d f0 fc          	cmpl   $0xfffffffc,-0x10(%ebp)
f010c286:	75 08                	jne    f010c290 <__sys_allocate_page+0x2e>
		return r ;
f010c288:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010c28b:	e9 d0 00 00 00       	jmp    f010c360 <__sys_allocate_page+0xfe>

	//check virtual address to be paged_aligned and < USER_TOP
	if ((uint32)va >= USER_TOP || (uint32)va % PAGE_SIZE != 0)
f010c290:	8b 45 08             	mov    0x8(%ebp),%eax
f010c293:	3d ff ff bf ee       	cmp    $0xeebfffff,%eax
f010c298:	77 0c                	ja     f010c2a6 <__sys_allocate_page+0x44>
f010c29a:	8b 45 08             	mov    0x8(%ebp),%eax
f010c29d:	25 ff 0f 00 00       	and    $0xfff,%eax
f010c2a2:	85 c0                	test   %eax,%eax
f010c2a4:	74 0a                	je     f010c2b0 <__sys_allocate_page+0x4e>
		return E_INVAL;
f010c2a6:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
f010c2ab:	e9 b0 00 00 00       	jmp    f010c360 <__sys_allocate_page+0xfe>

	//check permissions to be appropriate
	if ((perm & (~PERM_AVAILABLE & ~PERM_WRITEABLE)) != (PERM_USER))
f010c2b0:	8b 45 0c             	mov    0xc(%ebp),%eax
f010c2b3:	25 fd f1 ff ff       	and    $0xfffff1fd,%eax
f010c2b8:	83 f8 04             	cmp    $0x4,%eax
f010c2bb:	74 0a                	je     f010c2c7 <__sys_allocate_page+0x65>
		return E_INVAL;
f010c2bd:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
f010c2c2:	e9 99 00 00 00       	jmp    f010c360 <__sys_allocate_page+0xfe>


	uint32 physical_address = to_physical_address(ptr_frame_info) ;
f010c2c7:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010c2ca:	83 ec 0c             	sub    $0xc,%esp
f010c2cd:	50                   	push   %eax
f010c2ce:	e8 f4 fe ff ff       	call   f010c1c7 <to_physical_address>
f010c2d3:	83 c4 10             	add    $0x10,%esp
f010c2d6:	89 45 ec             	mov    %eax,-0x14(%ebp)
		//return it to the original status
		ptr_frame_info->references -= 1;
	}
#else
	{
		memset(STATIC_KERNEL_VIRTUAL_ADDRESS(physical_address), 0, PAGE_SIZE);
f010c2d9:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010c2dc:	89 45 e8             	mov    %eax,-0x18(%ebp)
f010c2df:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010c2e2:	c1 e8 0c             	shr    $0xc,%eax
f010c2e5:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f010c2e8:	a1 50 0e 6c f0       	mov    0xf06c0e50,%eax
f010c2ed:	39 45 e4             	cmp    %eax,-0x1c(%ebp)
f010c2f0:	72 17                	jb     f010c309 <__sys_allocate_page+0xa7>
f010c2f2:	ff 75 e8             	pushl  -0x18(%ebp)
f010c2f5:	68 c4 6d 13 f0       	push   $0xf0136dc4
f010c2fa:	68 8c 00 00 00       	push   $0x8c
f010c2ff:	68 f3 6d 13 f0       	push   $0xf0136df3
f010c304:	e8 9d 3e ff ff       	call   f01001a6 <_panic>
f010c309:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010c30c:	2d 00 00 00 10       	sub    $0x10000000,%eax
f010c311:	83 ec 04             	sub    $0x4,%esp
f010c314:	68 00 10 00 00       	push   $0x1000
f010c319:	6a 00                	push   $0x0
f010c31b:	50                   	push   %eax
f010c31c:	e8 f8 45 02 00       	call   f0130919 <memset>
f010c321:	83 c4 10             	add    $0x10,%esp
	}
#endif
	r = map_frame(e->env_page_directory, ptr_frame_info, (uint32)va, perm) ;
f010c324:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010c327:	8b 55 e0             	mov    -0x20(%ebp),%edx
f010c32a:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010c32d:	8b 40 5c             	mov    0x5c(%eax),%eax
f010c330:	ff 75 0c             	pushl  0xc(%ebp)
f010c333:	51                   	push   %ecx
f010c334:	52                   	push   %edx
f010c335:	50                   	push   %eax
f010c336:	e8 07 a8 ff ff       	call   f0106b42 <map_frame>
f010c33b:	83 c4 10             	add    $0x10,%esp
f010c33e:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (r == E_NO_MEM)
f010c341:	83 7d f0 fc          	cmpl   $0xfffffffc,-0x10(%ebp)
f010c345:	75 14                	jne    f010c35b <__sys_allocate_page+0xf9>
	{
		decrement_references(ptr_frame_info);
f010c347:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010c34a:	83 ec 0c             	sub    $0xc,%esp
f010c34d:	50                   	push   %eax
f010c34e:	e8 e6 a5 ff ff       	call   f0106939 <decrement_references>
f010c353:	83 c4 10             	add    $0x10,%esp
		return r;
f010c356:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010c359:	eb 05                	jmp    f010c360 <__sys_allocate_page+0xfe>
	}
	return 0 ;
f010c35b:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010c360:	c9                   	leave  
f010c361:	c3                   	ret    

f010c362 <__sys_map_frame>:
//	-E_INVAL if (perm & PTE_W), but srcva is read-only in srcenvid's
//		address space.
//	-E_NO_MEM if there's no memory to allocate the new page,
//		or to allocate any necessary page tables.
static int __sys_map_frame(int32 srcenvid, void *srcva, int32 dstenvid, void *dstva, int perm)
{
f010c362:	55                   	push   %ebp
f010c363:	89 e5                	mov    %esp,%ebp
f010c365:	83 ec 08             	sub    $0x8,%esp
	//   parameters for correctness.
	//   Use the third argument to page_lookup() to
	//   check the current permissions on the page.

	// LAB 4: Your code here.
	panic("sys_map_frame not implemented");
f010c368:	83 ec 04             	sub    $0x4,%esp
f010c36b:	68 07 6e 13 f0       	push   $0xf0136e07
f010c370:	68 b3 00 00 00       	push   $0xb3
f010c375:	68 f3 6d 13 f0       	push   $0xf0136df3
f010c37a:	e8 27 3e ff ff       	call   f01001a6 <_panic>

f010c37f <__sys_unmap_frame>:
// Return 0 on success, < 0 on error.  Errors are:
//	-E_BAD_ENV if environment envid doesn't currently exist,
//		or the caller doesn't have permission to change envid.
//	-E_INVAL if va >= UTOP, or va is not page-aligned.
static int __sys_unmap_frame(int32 envid, void *va)
{
f010c37f:	55                   	push   %ebp
f010c380:	89 e5                	mov    %esp,%ebp
f010c382:	83 ec 08             	sub    $0x8,%esp
	// Hint: This function is a wrapper around page_remove().

	// LAB 4: Your code here.
	panic("sys_page_unmap not implemented");
f010c385:	83 ec 04             	sub    $0x4,%esp
f010c388:	68 28 6e 13 f0       	push   $0xf0136e28
f010c38d:	68 c3 00 00 00       	push   $0xc3
f010c392:	68 f3 6d 13 f0       	push   $0xf0136df3
f010c397:	e8 0a 3e ff ff       	call   f01001a6 <_panic>

f010c39c <sys_calculate_required_frames>:
}

uint32 sys_calculate_required_frames(uint32 start_virtual_address, uint32 size)
{
f010c39c:	55                   	push   %ebp
f010c39d:	89 e5                	mov    %esp,%ebp
f010c39f:	83 ec 08             	sub    $0x8,%esp
	return calculate_required_frames(curenv->env_page_directory, start_virtual_address, size);
f010c3a2:	a1 14 82 65 f0       	mov    0xf0658214,%eax
f010c3a7:	8b 40 5c             	mov    0x5c(%eax),%eax
f010c3aa:	83 ec 04             	sub    $0x4,%esp
f010c3ad:	ff 75 0c             	pushl  0xc(%ebp)
f010c3b0:	ff 75 08             	pushl  0x8(%ebp)
f010c3b3:	50                   	push   %eax
f010c3b4:	e8 dd c1 ff ff       	call   f0108596 <calculate_required_frames>
f010c3b9:	83 c4 10             	add    $0x10,%esp
}
f010c3bc:	c9                   	leave  
f010c3bd:	c3                   	ret    

f010c3be <sys_calculate_free_frames>:

uint32 sys_calculate_free_frames()
{
f010c3be:	55                   	push   %ebp
f010c3bf:	89 e5                	mov    %esp,%ebp
f010c3c1:	83 ec 18             	sub    $0x18,%esp
	struct freeFramesCounters counters = calculate_available_frames();
f010c3c4:	8d 45 ec             	lea    -0x14(%ebp),%eax
f010c3c7:	83 ec 0c             	sub    $0xc,%esp
f010c3ca:	50                   	push   %eax
f010c3cb:	e8 e2 a9 ff ff       	call   f0106db2 <calculate_available_frames>
f010c3d0:	83 c4 0c             	add    $0xc,%esp
	//	cprintf("Free Frames = %d : Buffered = %d, Not Buffered = %d\n", counters.freeBuffered + counters.freeNotBuffered, counters.freeBuffered ,counters.freeNotBuffered);
	return counters.freeBuffered + counters.freeNotBuffered;
f010c3d3:	8b 55 ec             	mov    -0x14(%ebp),%edx
f010c3d6:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010c3d9:	01 d0                	add    %edx,%eax
}
f010c3db:	c9                   	leave  
f010c3dc:	c3                   	ret    

f010c3dd <sys_calculate_modified_frames>:
uint32 sys_calculate_modified_frames()
{
f010c3dd:	55                   	push   %ebp
f010c3de:	89 e5                	mov    %esp,%ebp
f010c3e0:	83 ec 18             	sub    $0x18,%esp
	struct freeFramesCounters counters = calculate_available_frames();
f010c3e3:	8d 45 ec             	lea    -0x14(%ebp),%eax
f010c3e6:	83 ec 0c             	sub    $0xc,%esp
f010c3e9:	50                   	push   %eax
f010c3ea:	e8 c3 a9 ff ff       	call   f0106db2 <calculate_available_frames>
f010c3ef:	83 c4 0c             	add    $0xc,%esp
	//	cprintf("================ Modified Frames = %d\n", counters.modified) ;
	return counters.modified;
f010c3f2:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f010c3f5:	c9                   	leave  
f010c3f6:	c3                   	ret    

f010c3f7 <sys_calculate_notmod_frames>:

uint32 sys_calculate_notmod_frames()
{
f010c3f7:	55                   	push   %ebp
f010c3f8:	89 e5                	mov    %esp,%ebp
f010c3fa:	83 ec 18             	sub    $0x18,%esp
	struct freeFramesCounters counters = calculate_available_frames();
f010c3fd:	8d 45 ec             	lea    -0x14(%ebp),%eax
f010c400:	83 ec 0c             	sub    $0xc,%esp
f010c403:	50                   	push   %eax
f010c404:	e8 a9 a9 ff ff       	call   f0106db2 <calculate_available_frames>
f010c409:	83 c4 0c             	add    $0xc,%esp
	//	cprintf("================ Not Modified Frames = %d\n", counters.freeBuffered) ;
	return counters.freeBuffered;
f010c40c:	8b 45 ec             	mov    -0x14(%ebp),%eax
}
f010c40f:	c9                   	leave  
f010c410:	c3                   	ret    

f010c411 <sys_calculate_pages_tobe_removed_ready_exit>:

int sys_calculate_pages_tobe_removed_ready_exit(uint32 WS_or_MEMORY_flag)
{
f010c411:	55                   	push   %ebp
f010c412:	89 e5                	mov    %esp,%ebp
f010c414:	83 ec 08             	sub    $0x8,%esp
	return calc_no_pages_tobe_removed_from_ready_exit_queues(WS_or_MEMORY_flag);
f010c417:	83 ec 0c             	sub    $0xc,%esp
f010c41a:	ff 75 08             	pushl  0x8(%ebp)
f010c41d:	e8 2d 32 02 00       	call   f012f64f <calc_no_pages_tobe_removed_from_ready_exit_queues>
f010c422:	83 c4 10             	add    $0x10,%esp
}
f010c425:	c9                   	leave  
f010c426:	c3                   	ret    

f010c427 <sys_scarce_memory>:

void sys_scarce_memory(void)
{
f010c427:	55                   	push   %ebp
f010c428:	89 e5                	mov    %esp,%ebp
f010c42a:	83 ec 08             	sub    $0x8,%esp
	scarce_memory();
f010c42d:	e8 75 31 02 00       	call   f012f5a7 <scarce_memory>
}
f010c432:	90                   	nop
f010c433:	c9                   	leave  
f010c434:	c3                   	ret    

f010c435 <sys_clearFFL>:

void sys_clearFFL()
{
f010c435:	55                   	push   %ebp
f010c436:	89 e5                	mov    %esp,%ebp
f010c438:	83 ec 18             	sub    $0x18,%esp
	int size = LIST_SIZE(&free_frame_list) ;
f010c43b:	a1 64 0e 6c f0       	mov    0xf06c0e64,%eax
f010c440:	89 45 f0             	mov    %eax,-0x10(%ebp)
	int i = 0 ;
f010c443:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	struct FrameInfo* ptr_tmp_FI ;
	for (; i < size ; i++)
f010c44a:	eb 12                	jmp    f010c45e <sys_clearFFL+0x29>
	{
		allocate_frame(&ptr_tmp_FI) ;
f010c44c:	83 ec 0c             	sub    $0xc,%esp
f010c44f:	8d 45 ec             	lea    -0x14(%ebp),%eax
f010c452:	50                   	push   %eax
f010c453:	e8 52 a3 ff ff       	call   f01067aa <allocate_frame>
f010c458:	83 c4 10             	add    $0x10,%esp
void sys_clearFFL()
{
	int size = LIST_SIZE(&free_frame_list) ;
	int i = 0 ;
	struct FrameInfo* ptr_tmp_FI ;
	for (; i < size ; i++)
f010c45b:	ff 45 f4             	incl   -0xc(%ebp)
f010c45e:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010c461:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f010c464:	7c e6                	jl     f010c44c <sys_clearFFL+0x17>
	{
		allocate_frame(&ptr_tmp_FI) ;
	}
}
f010c466:	90                   	nop
f010c467:	c9                   	leave  
f010c468:	c3                   	ret    

f010c469 <sys_pf_calculate_allocated_pages>:

/*******************************/
/* PAGE FILE SYSTEM CALLS */
/*******************************/
int sys_pf_calculate_allocated_pages(void)
{
f010c469:	55                   	push   %ebp
f010c46a:	89 e5                	mov    %esp,%ebp
f010c46c:	83 ec 08             	sub    $0x8,%esp
	return pf_calculate_allocated_pages(curenv);
f010c46f:	a1 14 82 65 f0       	mov    0xf0658214,%eax
f010c474:	83 ec 0c             	sub    $0xc,%esp
f010c477:	50                   	push   %eax
f010c478:	e8 3e 77 ff ff       	call   f0103bbb <pf_calculate_allocated_pages>
f010c47d:	83 c4 10             	add    $0x10,%esp
}
f010c480:	c9                   	leave  
f010c481:	c3                   	ret    

f010c482 <sys_free_user_mem>:

/*******************************/
/* USER HEAP SYSTEM CALLS */
/*******************************/
void sys_free_user_mem(uint32 virtual_address, uint32 size)
{
f010c482:	55                   	push   %ebp
f010c483:	89 e5                	mov    %esp,%ebp
f010c485:	83 ec 08             	sub    $0x8,%esp
	if(isBufferingEnabled())
f010c488:	e8 a3 11 00 00       	call   f010d630 <isBufferingEnabled>
f010c48d:	84 c0                	test   %al,%al
f010c48f:	74 19                	je     f010c4aa <sys_free_user_mem+0x28>
	{
		__free_user_mem_with_buffering(curenv, virtual_address, size);
f010c491:	a1 14 82 65 f0       	mov    0xf0658214,%eax
f010c496:	83 ec 04             	sub    $0x4,%esp
f010c499:	ff 75 0c             	pushl  0xc(%ebp)
f010c49c:	ff 75 08             	pushl  0x8(%ebp)
f010c49f:	50                   	push   %eax
f010c4a0:	e8 48 c1 ff ff       	call   f01085ed <__free_user_mem_with_buffering>
f010c4a5:	83 c4 10             	add    $0x10,%esp
	}
	else
	{
		free_user_mem(curenv, virtual_address, size);
	}
	return;
f010c4a8:	eb 18                	jmp    f010c4c2 <sys_free_user_mem+0x40>
	{
		__free_user_mem_with_buffering(curenv, virtual_address, size);
	}
	else
	{
		free_user_mem(curenv, virtual_address, size);
f010c4aa:	a1 14 82 65 f0       	mov    0xf0658214,%eax
f010c4af:	83 ec 04             	sub    $0x4,%esp
f010c4b2:	ff 75 0c             	pushl  0xc(%ebp)
f010c4b5:	ff 75 08             	pushl  0x8(%ebp)
f010c4b8:	50                   	push   %eax
f010c4b9:	e8 12 c1 ff ff       	call   f01085d0 <free_user_mem>
f010c4be:	83 c4 10             	add    $0x10,%esp
	}
	return;
f010c4c1:	90                   	nop
}
f010c4c2:	c9                   	leave  
f010c4c3:	c3                   	ret    

f010c4c4 <sys_allocate_user_mem>:

void sys_allocate_user_mem(uint32 virtual_address, uint32 size)
{
f010c4c4:	55                   	push   %ebp
f010c4c5:	89 e5                	mov    %esp,%ebp
f010c4c7:	83 ec 08             	sub    $0x8,%esp
	allocate_user_mem(curenv, virtual_address, size);
f010c4ca:	a1 14 82 65 f0       	mov    0xf0658214,%eax
f010c4cf:	83 ec 04             	sub    $0x4,%esp
f010c4d2:	ff 75 0c             	pushl  0xc(%ebp)
f010c4d5:	ff 75 08             	pushl  0x8(%ebp)
f010c4d8:	50                   	push   %eax
f010c4d9:	e8 d5 c0 ff ff       	call   f01085b3 <allocate_user_mem>
f010c4de:	83 c4 10             	add    $0x10,%esp
	return;
f010c4e1:	90                   	nop
}
f010c4e2:	c9                   	leave  
f010c4e3:	c3                   	ret    

f010c4e4 <sys_allocate_chunk>:

void sys_allocate_chunk(uint32 virtual_address, uint32 size, uint32 perms)
{
f010c4e4:	55                   	push   %ebp
f010c4e5:	89 e5                	mov    %esp,%ebp
f010c4e7:	83 ec 08             	sub    $0x8,%esp
	allocate_chunk(curenv->env_page_directory, virtual_address, size, perms);
f010c4ea:	a1 14 82 65 f0       	mov    0xf0658214,%eax
f010c4ef:	8b 40 5c             	mov    0x5c(%eax),%eax
f010c4f2:	ff 75 10             	pushl  0x10(%ebp)
f010c4f5:	ff 75 0c             	pushl  0xc(%ebp)
f010c4f8:	ff 75 08             	pushl  0x8(%ebp)
f010c4fb:	50                   	push   %eax
f010c4fc:	e8 5b bf ff ff       	call   f010845c <allocate_chunk>
f010c501:	83 c4 10             	add    $0x10,%esp
	return;
f010c504:	90                   	nop
}
f010c505:	c9                   	leave  
f010c506:	c3                   	ret    

f010c507 <sys_move_user_mem>:

//2014
void sys_move_user_mem(uint32 src_virtual_address, uint32 dst_virtual_address, uint32 size)
{
f010c507:	55                   	push   %ebp
f010c508:	89 e5                	mov    %esp,%ebp
f010c50a:	83 ec 08             	sub    $0x8,%esp
	move_user_mem(curenv, src_virtual_address, dst_virtual_address, size);
f010c50d:	a1 14 82 65 f0       	mov    0xf0658214,%eax
f010c512:	ff 75 10             	pushl  0x10(%ebp)
f010c515:	ff 75 0c             	pushl  0xc(%ebp)
f010c518:	ff 75 08             	pushl  0x8(%ebp)
f010c51b:	50                   	push   %eax
f010c51c:	e8 e9 c0 ff ff       	call   f010860a <move_user_mem>
f010c521:	83 c4 10             	add    $0x10,%esp
	return;
f010c524:	90                   	nop
}
f010c525:	c9                   	leave  
f010c526:	c3                   	ret    

f010c527 <sys_get_heap_strategy>:

//2015
uint32 sys_get_heap_strategy()
{
f010c527:	55                   	push   %ebp
f010c528:	89 e5                	mov    %esp,%ebp
	return _UHeapPlacementStrategy ;
f010c52a:	a1 6c 0e 6c f0       	mov    0xf06c0e6c,%eax
}
f010c52f:	5d                   	pop    %ebp
f010c530:	c3                   	ret    

f010c531 <sys_set_uheap_strategy>:
void sys_set_uheap_strategy(uint32 heapStrategy)
{
f010c531:	55                   	push   %ebp
f010c532:	89 e5                	mov    %esp,%ebp
	_UHeapPlacementStrategy = heapStrategy;
f010c534:	8b 45 08             	mov    0x8(%ebp),%eax
f010c537:	a3 6c 0e 6c f0       	mov    %eax,0xf06c0e6c
}
f010c53c:	90                   	nop
f010c53d:	5d                   	pop    %ebp
f010c53e:	c3                   	ret    

f010c53f <sys_disable_interrupt>:
/*******************************/
/* INTERRUPTS SYSTEM CALLS */
/*******************************/
//NEW!! 2012...
void sys_disable_interrupt()
{
f010c53f:	55                   	push   %ebp
f010c540:	89 e5                	mov    %esp,%ebp
	curenv->env_tf.tf_eflags &= ~FL_IF ;
f010c542:	a1 14 82 65 f0       	mov    0xf0658214,%eax
f010c547:	8b 15 14 82 65 f0    	mov    0xf0658214,%edx
f010c54d:	8b 52 38             	mov    0x38(%edx),%edx
f010c550:	80 e6 fd             	and    $0xfd,%dh
f010c553:	89 50 38             	mov    %edx,0x38(%eax)
}
f010c556:	90                   	nop
f010c557:	5d                   	pop    %ebp
f010c558:	c3                   	ret    

f010c559 <sys_enable_interrupt>:
void sys_enable_interrupt()
{
f010c559:	55                   	push   %ebp
f010c55a:	89 e5                	mov    %esp,%ebp
	curenv->env_tf.tf_eflags |= FL_IF ;
f010c55c:	a1 14 82 65 f0       	mov    0xf0658214,%eax
f010c561:	8b 15 14 82 65 f0    	mov    0xf0658214,%edx
f010c567:	8b 52 38             	mov    0x38(%edx),%edx
f010c56a:	80 ce 02             	or     $0x2,%dh
f010c56d:	89 50 38             	mov    %edx,0x38(%eax)
}
f010c570:	90                   	nop
f010c571:	5d                   	pop    %ebp
f010c572:	c3                   	ret    

f010c573 <sys_createSemaphore>:

/*******************************/
/* SEMAPHORES SYSTEM CALLS */
/*******************************/
int sys_createSemaphore(char* semaphoreName, uint32 initialValue)
{
f010c573:	55                   	push   %ebp
f010c574:	89 e5                	mov    %esp,%ebp
f010c576:	83 ec 08             	sub    $0x8,%esp
	return createSemaphore(curenv->env_id, semaphoreName, initialValue);
f010c579:	a1 14 82 65 f0       	mov    0xf0658214,%eax
f010c57e:	8b 40 4c             	mov    0x4c(%eax),%eax
f010c581:	83 ec 04             	sub    $0x4,%esp
f010c584:	ff 75 0c             	pushl  0xc(%ebp)
f010c587:	ff 75 08             	pushl  0x8(%ebp)
f010c58a:	50                   	push   %eax
f010c58b:	e8 de 13 00 00       	call   f010d96e <createSemaphore>
f010c590:	83 c4 10             	add    $0x10,%esp
}
f010c593:	c9                   	leave  
f010c594:	c3                   	ret    

f010c595 <sys_waitSemaphore>:

void sys_waitSemaphore(int32 ownerEnvID, char* semaphoreName)
{
f010c595:	55                   	push   %ebp
f010c596:	89 e5                	mov    %esp,%ebp
f010c598:	83 ec 08             	sub    $0x8,%esp
	waitSemaphore(ownerEnvID, semaphoreName);
f010c59b:	83 ec 08             	sub    $0x8,%esp
f010c59e:	ff 75 0c             	pushl  0xc(%ebp)
f010c5a1:	ff 75 08             	pushl  0x8(%ebp)
f010c5a4:	e8 e2 13 00 00       	call   f010d98b <waitSemaphore>
f010c5a9:	83 c4 10             	add    $0x10,%esp
}
f010c5ac:	90                   	nop
f010c5ad:	c9                   	leave  
f010c5ae:	c3                   	ret    

f010c5af <sys_signalSemaphore>:

void sys_signalSemaphore(int32 ownerEnvID, char* semaphoreName)
{
f010c5af:	55                   	push   %ebp
f010c5b0:	89 e5                	mov    %esp,%ebp
f010c5b2:	83 ec 08             	sub    $0x8,%esp
	signalSemaphore(ownerEnvID, semaphoreName);
f010c5b5:	83 ec 08             	sub    $0x8,%esp
f010c5b8:	ff 75 0c             	pushl  0xc(%ebp)
f010c5bb:	ff 75 08             	pushl  0x8(%ebp)
f010c5be:	e8 e5 13 00 00       	call   f010d9a8 <signalSemaphore>
f010c5c3:	83 c4 10             	add    $0x10,%esp
}
f010c5c6:	90                   	nop
f010c5c7:	c9                   	leave  
f010c5c8:	c3                   	ret    

f010c5c9 <sys_getSemaphoreValue>:

int sys_getSemaphoreValue(int32 ownerEnvID, char* semaphoreName)
{
f010c5c9:	55                   	push   %ebp
f010c5ca:	89 e5                	mov    %esp,%ebp
f010c5cc:	83 ec 18             	sub    $0x18,%esp
	int semID = get_semaphore_object_ID(ownerEnvID, semaphoreName);
f010c5cf:	83 ec 08             	sub    $0x8,%esp
f010c5d2:	ff 75 0c             	pushl  0xc(%ebp)
f010c5d5:	ff 75 08             	pushl  0x8(%ebp)
f010c5d8:	e8 37 12 00 00       	call   f010d814 <get_semaphore_object_ID>
f010c5dd:	83 c4 10             	add    $0x10,%esp
f010c5e0:	89 45 f4             	mov    %eax,-0xc(%ebp)
	assert(semID >= 0 && semID < MAX_SEMAPHORES) ;
f010c5e3:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010c5e7:	78 06                	js     f010c5ef <sys_getSemaphoreValue+0x26>
f010c5e9:	83 7d f4 63          	cmpl   $0x63,-0xc(%ebp)
f010c5ed:	7e 19                	jle    f010c608 <sys_getSemaphoreValue+0x3f>
f010c5ef:	68 48 6e 13 f0       	push   $0xf0136e48
f010c5f4:	68 6d 6e 13 f0       	push   $0xf0136e6d
f010c5f9:	68 4a 01 00 00       	push   $0x14a
f010c5fe:	68 f3 6d 13 f0       	push   $0xf0136df3
f010c603:	e8 9e 3b ff ff       	call   f01001a6 <_panic>

	return semaphores[semID].value ;
f010c608:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010c60b:	89 d0                	mov    %edx,%eax
f010c60d:	c1 e0 02             	shl    $0x2,%eax
f010c610:	01 d0                	add    %edx,%eax
f010c612:	01 c0                	add    %eax,%eax
f010c614:	01 d0                	add    %edx,%eax
f010c616:	01 c0                	add    %eax,%eax
f010c618:	01 d0                	add    %edx,%eax
f010c61a:	c1 e0 02             	shl    $0x2,%eax
f010c61d:	05 b4 ea 6b f0       	add    $0xf06beab4,%eax
f010c622:	8b 00                	mov    (%eax),%eax
}
f010c624:	c9                   	leave  
f010c625:	c3                   	ret    

f010c626 <sys_createSharedObject>:

/*******************************/
/* SHARED MEMORY SYSTEM CALLS */
/*******************************/
int sys_createSharedObject(char* shareName, uint32 size, uint8 isWritable, void* virtual_address)
{
f010c626:	55                   	push   %ebp
f010c627:	89 e5                	mov    %esp,%ebp
f010c629:	83 ec 18             	sub    $0x18,%esp
f010c62c:	8b 45 10             	mov    0x10(%ebp),%eax
f010c62f:	88 45 f4             	mov    %al,-0xc(%ebp)
	return createSharedObject(curenv->env_id, shareName, size, isWritable, virtual_address);
f010c632:	0f b6 55 f4          	movzbl -0xc(%ebp),%edx
f010c636:	a1 14 82 65 f0       	mov    0xf0658214,%eax
f010c63b:	8b 40 4c             	mov    0x4c(%eax),%eax
f010c63e:	83 ec 0c             	sub    $0xc,%esp
f010c641:	ff 75 14             	pushl  0x14(%ebp)
f010c644:	52                   	push   %edx
f010c645:	ff 75 0c             	pushl  0xc(%ebp)
f010c648:	ff 75 08             	pushl  0x8(%ebp)
f010c64b:	50                   	push   %eax
f010c64c:	e8 ef ac ff ff       	call   f0107340 <createSharedObject>
f010c651:	83 c4 20             	add    $0x20,%esp
}
f010c654:	c9                   	leave  
f010c655:	c3                   	ret    

f010c656 <sys_getSizeOfSharedObject>:

int sys_getSizeOfSharedObject(int32 ownerID, char* shareName)
{
f010c656:	55                   	push   %ebp
f010c657:	89 e5                	mov    %esp,%ebp
f010c659:	83 ec 08             	sub    $0x8,%esp
	return getSizeOfSharedObject(ownerID, shareName);
f010c65c:	83 ec 08             	sub    $0x8,%esp
f010c65f:	ff 75 0c             	pushl  0xc(%ebp)
f010c662:	ff 75 08             	pushl  0x8(%ebp)
f010c665:	e8 f9 ac ff ff       	call   f0107363 <getSizeOfSharedObject>
f010c66a:	83 c4 10             	add    $0x10,%esp
}
f010c66d:	c9                   	leave  
f010c66e:	c3                   	ret    

f010c66f <sys_getSharedObject>:

int sys_getSharedObject(int32 ownerID, char* shareName, void* virtual_address)
{
f010c66f:	55                   	push   %ebp
f010c670:	89 e5                	mov    %esp,%ebp
f010c672:	83 ec 08             	sub    $0x8,%esp
	return getSharedObject(ownerID, shareName, virtual_address);
f010c675:	83 ec 04             	sub    $0x4,%esp
f010c678:	ff 75 10             	pushl  0x10(%ebp)
f010c67b:	ff 75 0c             	pushl  0xc(%ebp)
f010c67e:	ff 75 08             	pushl  0x8(%ebp)
f010c681:	e8 fa ac ff ff       	call   f0107380 <getSharedObject>
f010c686:	83 c4 10             	add    $0x10,%esp
}
f010c689:	c9                   	leave  
f010c68a:	c3                   	ret    

f010c68b <sys_freeSharedObject>:

int sys_freeSharedObject(int32 sharedObjectID, void *startVA)
{
f010c68b:	55                   	push   %ebp
f010c68c:	89 e5                	mov    %esp,%ebp
f010c68e:	83 ec 08             	sub    $0x8,%esp
	return freeSharedObject(sharedObjectID, startVA);
f010c691:	83 ec 08             	sub    $0x8,%esp
f010c694:	ff 75 0c             	pushl  0xc(%ebp)
f010c697:	ff 75 08             	pushl  0x8(%ebp)
f010c69a:	e8 fe ac ff ff       	call   f010739d <freeSharedObject>
f010c69f:	83 c4 10             	add    $0x10,%esp
}
f010c6a2:	c9                   	leave  
f010c6a3:	c3                   	ret    

f010c6a4 <sys_getMaxShares>:

uint32 sys_getMaxShares()
{
f010c6a4:	55                   	push   %ebp
f010c6a5:	89 e5                	mov    %esp,%ebp
	return MAX_SHARES;
f010c6a7:	b8 64 00 00 00       	mov    $0x64,%eax
}
f010c6ac:	5d                   	pop    %ebp
f010c6ad:	c3                   	ret    

f010c6ae <sys_getenvid>:
/* USER ENVIRONMENT SYSTEM CALLS */
/*********************************/
// Returns the current environment's envid.
//2017
static int32 sys_getenvid(void)
{
f010c6ae:	55                   	push   %ebp
f010c6af:	89 e5                	mov    %esp,%ebp
	return curenv->env_id;
f010c6b1:	a1 14 82 65 f0       	mov    0xf0658214,%eax
f010c6b6:	8b 40 4c             	mov    0x4c(%eax),%eax
}
f010c6b9:	5d                   	pop    %ebp
f010c6ba:	c3                   	ret    

f010c6bb <sys_getenvindex>:

//2017
static int32 sys_getenvindex(void)
{
f010c6bb:	55                   	push   %ebp
f010c6bc:	89 e5                	mov    %esp,%ebp
	//return curenv->env_id;
	return (curenv - envs) ;
f010c6be:	a1 14 82 65 f0       	mov    0xf0658214,%eax
f010c6c3:	89 c2                	mov    %eax,%edx
f010c6c5:	a1 10 82 65 f0       	mov    0xf0658210,%eax
f010c6ca:	29 c2                	sub    %eax,%edx
f010c6cc:	89 d0                	mov    %edx,%eax
f010c6ce:	c1 f8 03             	sar    $0x3,%eax
f010c6d1:	89 c2                	mov    %eax,%edx
f010c6d3:	89 d0                	mov    %edx,%eax
f010c6d5:	c1 e0 03             	shl    $0x3,%eax
f010c6d8:	01 d0                	add    %edx,%eax
f010c6da:	c1 e0 03             	shl    $0x3,%eax
f010c6dd:	01 d0                	add    %edx,%eax
f010c6df:	01 c0                	add    %eax,%eax
f010c6e1:	01 d0                	add    %edx,%eax
f010c6e3:	01 c0                	add    %eax,%eax
f010c6e5:	01 d0                	add    %edx,%eax
f010c6e7:	8d 0c 85 00 00 00 00 	lea    0x0(,%eax,4),%ecx
f010c6ee:	01 c8                	add    %ecx,%eax
f010c6f0:	8d 0c 85 00 00 00 00 	lea    0x0(,%eax,4),%ecx
f010c6f7:	01 c8                	add    %ecx,%eax
f010c6f9:	c1 e0 02             	shl    $0x2,%eax
f010c6fc:	01 d0                	add    %edx,%eax
f010c6fe:	01 c0                	add    %eax,%eax
f010c700:	01 d0                	add    %edx,%eax
f010c702:	01 c0                	add    %eax,%eax
f010c704:	01 d0                	add    %edx,%eax
f010c706:	c1 e0 02             	shl    $0x2,%eax
f010c709:	01 d0                	add    %edx,%eax
f010c70b:	01 c0                	add    %eax,%eax
f010c70d:	01 d0                	add    %edx,%eax
f010c70f:	c1 e0 09             	shl    $0x9,%eax
f010c712:	29 d0                	sub    %edx,%eax
f010c714:	c1 e0 02             	shl    $0x2,%eax
f010c717:	01 d0                	add    %edx,%eax
}
f010c719:	5d                   	pop    %ebp
f010c71a:	c3                   	ret    

f010c71b <sys_getparentenvid>:

//2017
static int32 sys_getparentenvid(void)
{
f010c71b:	55                   	push   %ebp
f010c71c:	89 e5                	mov    %esp,%ebp
	return curenv->env_parent_id;
f010c71e:	a1 14 82 65 f0       	mov    0xf0658214,%eax
f010c723:	8b 40 50             	mov    0x50(%eax),%eax
}
f010c726:	5d                   	pop    %ebp
f010c727:	c3                   	ret    

f010c728 <sys_destroy_env>:
//
// Returns 0 on success, < 0 on error.  Errors are:
//	-E_BAD_ENV if environment envid doesn't currently exist,
//		or the caller doesn't have permission to change envid.
static int sys_destroy_env(int32 envid)
{
f010c728:	55                   	push   %ebp
f010c729:	89 e5                	mov    %esp,%ebp
f010c72b:	83 ec 18             	sub    $0x18,%esp
	int r;
	struct Env *e;
	if (envid == 0)
f010c72e:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f010c732:	75 0a                	jne    f010c73e <sys_destroy_env+0x16>
	{
		e = curenv ;
f010c734:	a1 14 82 65 f0       	mov    0xf0658214,%eax
f010c739:	89 45 f0             	mov    %eax,-0x10(%ebp)
f010c73c:	eb 22                	jmp    f010c760 <sys_destroy_env+0x38>
	}
	else if ((r = envid2env(envid, &e, 0)) < 0)
f010c73e:	83 ec 04             	sub    $0x4,%esp
f010c741:	6a 00                	push   $0x0
f010c743:	8d 45 f0             	lea    -0x10(%ebp),%eax
f010c746:	50                   	push   %eax
f010c747:	ff 75 08             	pushl  0x8(%ebp)
f010c74a:	e8 7e cc ff ff       	call   f01093cd <envid2env>
f010c74f:	83 c4 10             	add    $0x10,%esp
f010c752:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010c755:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010c759:	79 05                	jns    f010c760 <sys_destroy_env+0x38>
	{
		return r;
f010c75b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010c75e:	eb 5e                	jmp    f010c7be <sys_destroy_env+0x96>
	}

	if (e == curenv)
f010c760:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010c763:	a1 14 82 65 f0       	mov    0xf0658214,%eax
f010c768:	39 c2                	cmp    %eax,%edx
f010c76a:	75 1b                	jne    f010c787 <sys_destroy_env+0x5f>
	{
		cprintf("[%08x] exiting gracefully\n", curenv->env_id);
f010c76c:	a1 14 82 65 f0       	mov    0xf0658214,%eax
f010c771:	8b 40 4c             	mov    0x4c(%eax),%eax
f010c774:	83 ec 08             	sub    $0x8,%esp
f010c777:	50                   	push   %eax
f010c778:	68 82 6e 13 f0       	push   $0xf0136e82
f010c77d:	e8 ab 44 ff ff       	call   f0100c2d <cprintf>
f010c782:	83 c4 10             	add    $0x10,%esp
f010c785:	eb 20                	jmp    f010c7a7 <sys_destroy_env+0x7f>
	}
	else
	{
		cprintf("[%08x] destroying %08x\n", curenv->env_id, e->env_id);
f010c787:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010c78a:	8b 50 4c             	mov    0x4c(%eax),%edx
f010c78d:	a1 14 82 65 f0       	mov    0xf0658214,%eax
f010c792:	8b 40 4c             	mov    0x4c(%eax),%eax
f010c795:	83 ec 04             	sub    $0x4,%esp
f010c798:	52                   	push   %edx
f010c799:	50                   	push   %eax
f010c79a:	68 9d 6e 13 f0       	push   $0xf0136e9d
f010c79f:	e8 89 44 ff ff       	call   f0100c2d <cprintf>
f010c7a4:	83 c4 10             	add    $0x10,%esp
	}
	//2015
	sched_kill_env(e->env_id);
f010c7a7:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010c7aa:	8b 40 4c             	mov    0x4c(%eax),%eax
f010c7ad:	83 ec 0c             	sub    $0xc,%esp
f010c7b0:	50                   	push   %eax
f010c7b1:	e8 0a 8d ff ff       	call   f01054c0 <sched_kill_env>
f010c7b6:	83 c4 10             	add    $0x10,%esp

	return 0;
f010c7b9:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010c7be:	c9                   	leave  
f010c7bf:	c3                   	ret    

f010c7c0 <sys_exit_env>:

//Just place the current env into the EXIT queue & schedule the next one
static void sys_exit_env()
{
f010c7c0:	55                   	push   %ebp
f010c7c1:	89 e5                	mov    %esp,%ebp
f010c7c3:	83 ec 08             	sub    $0x8,%esp
	//2015
	env_exit();
f010c7c6:	e8 e3 cb ff ff       	call   f01093ae <env_exit>
	//env_run_cmd_prmpt();
}
f010c7cb:	90                   	nop
f010c7cc:	c9                   	leave  
f010c7cd:	c3                   	ret    

f010c7ce <sys_create_env>:

//New update in 2020
//Create a new env & add it to the NEW queue
int sys_create_env(char* programName, unsigned int page_WS_size,unsigned int LRU_second_list_size, unsigned int percent_WS_pages_to_remove)
{
f010c7ce:	55                   	push   %ebp
f010c7cf:	89 e5                	mov    %esp,%ebp
f010c7d1:	83 ec 18             	sub    $0x18,%esp
	struct Env* env =  env_create(programName, page_WS_size, LRU_second_list_size, percent_WS_pages_to_remove);
f010c7d4:	ff 75 14             	pushl  0x14(%ebp)
f010c7d7:	ff 75 10             	pushl  0x10(%ebp)
f010c7da:	ff 75 0c             	pushl  0xc(%ebp)
f010c7dd:	ff 75 08             	pushl  0x8(%ebp)
f010c7e0:	e8 8d be ff ff       	call   f0108672 <env_create>
f010c7e5:	83 c4 10             	add    $0x10,%esp
f010c7e8:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if(env == NULL)
f010c7eb:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010c7ef:	75 07                	jne    f010c7f8 <sys_create_env+0x2a>
	{
		return E_ENV_CREATION_ERROR;
f010c7f1:	b8 ef ff ff ff       	mov    $0xffffffef,%eax
f010c7f6:	eb 14                	jmp    f010c80c <sys_create_env+0x3e>
	}

	//2015
	sched_new_env(env);
f010c7f8:	83 ec 0c             	sub    $0xc,%esp
f010c7fb:	ff 75 f4             	pushl  -0xc(%ebp)
f010c7fe:	e8 74 88 ff ff       	call   f0105077 <sched_new_env>
f010c803:	83 c4 10             	add    $0x10,%esp

	return env->env_id;
f010c806:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010c809:	8b 40 4c             	mov    0x4c(%eax),%eax
}
f010c80c:	c9                   	leave  
f010c80d:	c3                   	ret    

f010c80e <sys_run_env>:

//Place a new env into the READY queue
void sys_run_env(int32 envId)
{
f010c80e:	55                   	push   %ebp
f010c80f:	89 e5                	mov    %esp,%ebp
f010c811:	83 ec 08             	sub    $0x8,%esp
	sched_run_env(envId);
f010c814:	8b 45 08             	mov    0x8(%ebp),%eax
f010c817:	83 ec 0c             	sub    $0xc,%esp
f010c81a:	50                   	push   %eax
f010c81b:	e8 74 88 ff ff       	call   f0105094 <sched_run_env>
f010c820:	83 c4 10             	add    $0x10,%esp
}
f010c823:	90                   	nop
f010c824:	c9                   	leave  
f010c825:	c3                   	ret    

f010c826 <sys_get_virtual_time>:
/*******************************/
/* ETC... SYSTEM CALLS */
/*******************************/

struct uint64 sys_get_virtual_time()
{
f010c826:	55                   	push   %ebp
f010c827:	89 e5                	mov    %esp,%ebp
f010c829:	83 ec 10             	sub    $0x10,%esp
	//	lcr4(0);


	struct uint64 result;

	__asm __volatile("rdtsc\n"
f010c82c:	0f 31                	rdtsc  
f010c82e:	89 45 f0             	mov    %eax,-0x10(%ebp)
f010c831:	89 55 f4             	mov    %edx,-0xc(%ebp)
	//ptr[3]=0;
	//cprintf("as str = %s\n", ptr);
	cprintf("ax = %x, bx = %x, cx = %x, dx = %x\n", eaxp,ebxp,ecxp,edxp);
	*/

	return result;
f010c834:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010c837:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010c83a:	89 45 f8             	mov    %eax,-0x8(%ebp)
f010c83d:	89 55 fc             	mov    %edx,-0x4(%ebp)
	struct uint64 t = get_virtual_time();
	return t;
f010c840:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010c843:	8b 45 f8             	mov    -0x8(%ebp),%eax
f010c846:	8b 55 fc             	mov    -0x4(%ebp),%edx
f010c849:	89 01                	mov    %eax,(%ecx)
f010c84b:	89 51 04             	mov    %edx,0x4(%ecx)
}
f010c84e:	8b 45 08             	mov    0x8(%ebp),%eax
f010c851:	c9                   	leave  
f010c852:	c2 04 00             	ret    $0x4

f010c855 <sys_rcr2>:

uint32 sys_rcr2()
{
f010c855:	55                   	push   %ebp
f010c856:	89 e5                	mov    %esp,%ebp
f010c858:	83 ec 10             	sub    $0x10,%esp

static __inline uint32
rcr2(void)
{
	uint32 val;
	__asm __volatile("movl %%cr2,%0" : "=r" (val));
f010c85b:	0f 20 d0             	mov    %cr2,%eax
f010c85e:	89 45 fc             	mov    %eax,-0x4(%ebp)
	return val;
f010c861:	8b 45 fc             	mov    -0x4(%ebp),%eax
	return rcr2();
f010c864:	90                   	nop
}
f010c865:	c9                   	leave  
f010c866:	c3                   	ret    

f010c867 <sys_bypassPageFault>:
void sys_bypassPageFault(uint8 instrLength)
{
f010c867:	55                   	push   %ebp
f010c868:	89 e5                	mov    %esp,%ebp
f010c86a:	83 ec 04             	sub    $0x4,%esp
f010c86d:	8b 45 08             	mov    0x8(%ebp),%eax
f010c870:	88 45 fc             	mov    %al,-0x4(%ebp)
	bypassInstrLength = instrLength;
f010c873:	8a 45 fc             	mov    -0x4(%ebp),%al
f010c876:	a2 a8 8a 65 f0       	mov    %al,0xf0658aa8
}
f010c87b:	90                   	nop
f010c87c:	c9                   	leave  
f010c87d:	c3                   	ret    

f010c87e <rsttst>:

uint32 tstcnt;
void rsttst()
{
f010c87e:	55                   	push   %ebp
f010c87f:	89 e5                	mov    %esp,%ebp
	tstcnt = 0;
f010c881:	c7 05 f0 0f 6c f0 00 	movl   $0x0,0xf06c0ff0
f010c888:	00 00 00 
}
f010c88b:	90                   	nop
f010c88c:	5d                   	pop    %ebp
f010c88d:	c3                   	ret    

f010c88e <inctst>:
void inctst()
{
f010c88e:	55                   	push   %ebp
f010c88f:	89 e5                	mov    %esp,%ebp
	tstcnt++;
f010c891:	a1 f0 0f 6c f0       	mov    0xf06c0ff0,%eax
f010c896:	40                   	inc    %eax
f010c897:	a3 f0 0f 6c f0       	mov    %eax,0xf06c0ff0
}
f010c89c:	90                   	nop
f010c89d:	5d                   	pop    %ebp
f010c89e:	c3                   	ret    

f010c89f <gettst>:
uint32 gettst()
{
f010c89f:	55                   	push   %ebp
f010c8a0:	89 e5                	mov    %esp,%ebp
	return tstcnt;
f010c8a2:	a1 f0 0f 6c f0       	mov    0xf06c0ff0,%eax
}
f010c8a7:	5d                   	pop    %ebp
f010c8a8:	c3                   	ret    

f010c8a9 <tst>:

void tst(uint32 n, uint32 v1, uint32 v2, char c, int inv)
{
f010c8a9:	55                   	push   %ebp
f010c8aa:	89 e5                	mov    %esp,%ebp
f010c8ac:	83 ec 28             	sub    $0x28,%esp
f010c8af:	8b 45 14             	mov    0x14(%ebp),%eax
f010c8b2:	88 45 e4             	mov    %al,-0x1c(%ebp)
	int chk = 0;
f010c8b5:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	switch (c)
f010c8bc:	0f be 45 e4          	movsbl -0x1c(%ebp),%eax
f010c8c0:	83 f8 65             	cmp    $0x65,%eax
f010c8c3:	74 5d                	je     f010c922 <tst+0x79>
f010c8c5:	83 f8 65             	cmp    $0x65,%eax
f010c8c8:	7f 0a                	jg     f010c8d4 <tst+0x2b>
f010c8ca:	83 f8 62             	cmp    $0x62,%eax
f010c8cd:	74 73                	je     f010c942 <tst+0x99>
f010c8cf:	e9 91 00 00 00       	jmp    f010c965 <tst+0xbc>
f010c8d4:	83 f8 67             	cmp    $0x67,%eax
f010c8d7:	74 29                	je     f010c902 <tst+0x59>
f010c8d9:	83 f8 6c             	cmp    $0x6c,%eax
f010c8dc:	0f 85 83 00 00 00    	jne    f010c965 <tst+0xbc>
	{
	case 'l':
		if (n < v1)
f010c8e2:	8b 45 08             	mov    0x8(%ebp),%eax
f010c8e5:	3b 45 0c             	cmp    0xc(%ebp),%eax
f010c8e8:	73 09                	jae    f010c8f3 <tst+0x4a>
			chk = 1;
f010c8ea:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
		else if (inv)
			chk = 1;
		break;
f010c8f1:	eb 68                	jmp    f010c95b <tst+0xb2>
	switch (c)
	{
	case 'l':
		if (n < v1)
			chk = 1;
		else if (inv)
f010c8f3:	83 7d 18 00          	cmpl   $0x0,0x18(%ebp)
f010c8f7:	74 62                	je     f010c95b <tst+0xb2>
			chk = 1;
f010c8f9:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
		break;
f010c900:	eb 59                	jmp    f010c95b <tst+0xb2>
	case 'g':
		if (n > v1)
f010c902:	8b 45 08             	mov    0x8(%ebp),%eax
f010c905:	3b 45 0c             	cmp    0xc(%ebp),%eax
f010c908:	76 09                	jbe    f010c913 <tst+0x6a>
			chk = 1;
f010c90a:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
		else if (inv)
			chk = 1;
		break;
f010c911:	eb 4b                	jmp    f010c95e <tst+0xb5>
			chk = 1;
		break;
	case 'g':
		if (n > v1)
			chk = 1;
		else if (inv)
f010c913:	83 7d 18 00          	cmpl   $0x0,0x18(%ebp)
f010c917:	74 45                	je     f010c95e <tst+0xb5>
			chk = 1;
f010c919:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
		break;
f010c920:	eb 3c                	jmp    f010c95e <tst+0xb5>
	case 'e':
		if (n == v1)
f010c922:	8b 45 08             	mov    0x8(%ebp),%eax
f010c925:	3b 45 0c             	cmp    0xc(%ebp),%eax
f010c928:	75 09                	jne    f010c933 <tst+0x8a>
			chk = 1;
f010c92a:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
		else if (inv)
			chk = 1;
		break;
f010c931:	eb 2e                	jmp    f010c961 <tst+0xb8>
			chk = 1;
		break;
	case 'e':
		if (n == v1)
			chk = 1;
		else if (inv)
f010c933:	83 7d 18 00          	cmpl   $0x0,0x18(%ebp)
f010c937:	74 28                	je     f010c961 <tst+0xb8>
			chk = 1;
f010c939:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
		break;
f010c940:	eb 1f                	jmp    f010c961 <tst+0xb8>
	case 'b':
		if (n >= v1 && n <= v1)
f010c942:	8b 45 08             	mov    0x8(%ebp),%eax
f010c945:	3b 45 0c             	cmp    0xc(%ebp),%eax
f010c948:	72 1a                	jb     f010c964 <tst+0xbb>
f010c94a:	8b 45 08             	mov    0x8(%ebp),%eax
f010c94d:	3b 45 0c             	cmp    0xc(%ebp),%eax
f010c950:	77 12                	ja     f010c964 <tst+0xbb>
			chk = 1;
f010c952:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
		break;
f010c959:	eb 09                	jmp    f010c964 <tst+0xbb>
	case 'l':
		if (n < v1)
			chk = 1;
		else if (inv)
			chk = 1;
		break;
f010c95b:	90                   	nop
f010c95c:	eb 07                	jmp    f010c965 <tst+0xbc>
	case 'g':
		if (n > v1)
			chk = 1;
		else if (inv)
			chk = 1;
		break;
f010c95e:	90                   	nop
f010c95f:	eb 04                	jmp    f010c965 <tst+0xbc>
	case 'e':
		if (n == v1)
			chk = 1;
		else if (inv)
			chk = 1;
		break;
f010c961:	90                   	nop
f010c962:	eb 01                	jmp    f010c965 <tst+0xbc>
	case 'b':
		if (n >= v1 && n <= v1)
			chk = 1;
		break;
f010c964:	90                   	nop
	}

	if (chk == 0) panic("Error!! test fails");
f010c965:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010c969:	75 17                	jne    f010c982 <tst+0xd9>
f010c96b:	83 ec 04             	sub    $0x4,%esp
f010c96e:	68 b5 6e 13 f0       	push   $0xf0136eb5
f010c973:	68 00 02 00 00       	push   $0x200
f010c978:	68 f3 6d 13 f0       	push   $0xf0136df3
f010c97d:	e8 24 38 ff ff       	call   f01001a6 <_panic>
	tstcnt++ ;
f010c982:	a1 f0 0f 6c f0       	mov    0xf06c0ff0,%eax
f010c987:	40                   	inc    %eax
f010c988:	a3 f0 0f 6c f0       	mov    %eax,0xf06c0ff0
	return;
f010c98d:	90                   	nop
}
f010c98e:	c9                   	leave  
f010c98f:	c3                   	ret    

f010c990 <chktst>:

void chktst(uint32 n)
{
f010c990:	55                   	push   %ebp
f010c991:	89 e5                	mov    %esp,%ebp
f010c993:	83 ec 08             	sub    $0x8,%esp
	if (tstcnt == n)
f010c996:	a1 f0 0f 6c f0       	mov    0xf06c0ff0,%eax
f010c99b:	3b 45 08             	cmp    0x8(%ebp),%eax
f010c99e:	75 12                	jne    f010c9b2 <chktst+0x22>
		cprintf("\nCongratulations... test runs successfully\n");
f010c9a0:	83 ec 0c             	sub    $0xc,%esp
f010c9a3:	68 c8 6e 13 f0       	push   $0xf0136ec8
f010c9a8:	e8 80 42 ff ff       	call   f0100c2d <cprintf>
f010c9ad:	83 c4 10             	add    $0x10,%esp
	else
		panic("Error!! test fails at final");
}
f010c9b0:	eb 17                	jmp    f010c9c9 <chktst+0x39>
void chktst(uint32 n)
{
	if (tstcnt == n)
		cprintf("\nCongratulations... test runs successfully\n");
	else
		panic("Error!! test fails at final");
f010c9b2:	83 ec 04             	sub    $0x4,%esp
f010c9b5:	68 f4 6e 13 f0       	push   $0xf0136ef4
f010c9ba:	68 0a 02 00 00       	push   $0x20a
f010c9bf:	68 f3 6d 13 f0       	push   $0xf0136df3
f010c9c4:	e8 dd 37 ff ff       	call   f01001a6 <_panic>
}
f010c9c9:	c9                   	leave  
f010c9ca:	c3                   	ret    

f010c9cb <sys_check_LRU_lists>:



//2020
int sys_check_LRU_lists(uint32* active_list_content, uint32* second_list_content, int actual_active_list_size, int actual_second_list_size)
{
f010c9cb:	55                   	push   %ebp
f010c9cc:	89 e5                	mov    %esp,%ebp
f010c9ce:	83 ec 30             	sub    $0x30,%esp
	struct Env* env = curenv;
f010c9d1:	a1 14 82 65 f0       	mov    0xf0658214,%eax
f010c9d6:	89 45 e8             	mov    %eax,-0x18(%ebp)
	int active_list_validation = 1;
f010c9d9:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%ebp)
	int second_list_validation = 1;
f010c9e0:	c7 45 f8 01 00 00 00 	movl   $0x1,-0x8(%ebp)
	struct WorkingSetElement* ptr_WS_element;

	//1- Check active list content if not null
	if(active_list_content != NULL)
f010c9e7:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f010c9eb:	0f 84 a5 00 00 00    	je     f010ca96 <sys_check_LRU_lists+0xcb>
	{
		int idx_active_list = 0;
f010c9f1:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
		LIST_FOREACH(ptr_WS_element, &(env->ActiveList))
f010c9f8:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010c9fb:	8b 80 80 ea 01 00    	mov    0x1ea80(%eax),%eax
f010ca01:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010ca04:	eb 4a                	jmp    f010ca50 <sys_check_LRU_lists+0x85>
		{
			if (ROUNDDOWN(ptr_WS_element->virtual_address, PAGE_SIZE) != ROUNDDOWN(active_list_content[idx_active_list], PAGE_SIZE))
f010ca06:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010ca09:	8b 00                	mov    (%eax),%eax
f010ca0b:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f010ca0e:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010ca11:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f010ca16:	89 c2                	mov    %eax,%edx
f010ca18:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010ca1b:	8d 0c 85 00 00 00 00 	lea    0x0(,%eax,4),%ecx
f010ca22:	8b 45 08             	mov    0x8(%ebp),%eax
f010ca25:	01 c8                	add    %ecx,%eax
f010ca27:	8b 00                	mov    (%eax),%eax
f010ca29:	89 45 e0             	mov    %eax,-0x20(%ebp)
f010ca2c:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010ca2f:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f010ca34:	39 c2                	cmp    %eax,%edx
f010ca36:	74 09                	je     f010ca41 <sys_check_LRU_lists+0x76>
			{
				active_list_validation = 0;
f010ca38:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
				break;
f010ca3f:	eb 3e                	jmp    f010ca7f <sys_check_LRU_lists+0xb4>
			}
			idx_active_list++;
f010ca41:	ff 45 f0             	incl   -0x10(%ebp)

	//1- Check active list content if not null
	if(active_list_content != NULL)
	{
		int idx_active_list = 0;
		LIST_FOREACH(ptr_WS_element, &(env->ActiveList))
f010ca44:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010ca47:	8b 80 88 ea 01 00    	mov    0x1ea88(%eax),%eax
f010ca4d:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010ca50:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010ca54:	74 08                	je     f010ca5e <sys_check_LRU_lists+0x93>
f010ca56:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010ca59:	8b 40 10             	mov    0x10(%eax),%eax
f010ca5c:	eb 05                	jmp    f010ca63 <sys_check_LRU_lists+0x98>
f010ca5e:	b8 00 00 00 00       	mov    $0x0,%eax
f010ca63:	8b 55 e8             	mov    -0x18(%ebp),%edx
f010ca66:	89 82 88 ea 01 00    	mov    %eax,0x1ea88(%edx)
f010ca6c:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010ca6f:	8b 80 88 ea 01 00    	mov    0x1ea88(%eax),%eax
f010ca75:	85 c0                	test   %eax,%eax
f010ca77:	75 8d                	jne    f010ca06 <sys_check_LRU_lists+0x3b>
f010ca79:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010ca7d:	75 87                	jne    f010ca06 <sys_check_LRU_lists+0x3b>
				active_list_validation = 0;
				break;
			}
			idx_active_list++;
		}
		if(LIST_SIZE(&env->ActiveList) != actual_active_list_size)
f010ca7f:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010ca82:	8b 90 8c ea 01 00    	mov    0x1ea8c(%eax),%edx
f010ca88:	8b 45 10             	mov    0x10(%ebp),%eax
f010ca8b:	39 c2                	cmp    %eax,%edx
f010ca8d:	74 07                	je     f010ca96 <sys_check_LRU_lists+0xcb>
		{
			active_list_validation = 0;
f010ca8f:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)

		}
	}

	//2- Check second chance list content if not null
	if(second_list_content != NULL)
f010ca96:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
f010ca9a:	0f 84 a5 00 00 00    	je     f010cb45 <sys_check_LRU_lists+0x17a>
	{
		int idx_second_list = 0;
f010caa0:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
		LIST_FOREACH(ptr_WS_element, &(env->SecondList))
f010caa7:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010caaa:	8b 80 90 ea 01 00    	mov    0x1ea90(%eax),%eax
f010cab0:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010cab3:	eb 4a                	jmp    f010caff <sys_check_LRU_lists+0x134>
		{
			if (ROUNDDOWN(ptr_WS_element->virtual_address, PAGE_SIZE) != ROUNDDOWN(second_list_content[idx_second_list], PAGE_SIZE))
f010cab5:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010cab8:	8b 00                	mov    (%eax),%eax
f010caba:	89 45 dc             	mov    %eax,-0x24(%ebp)
f010cabd:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010cac0:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f010cac5:	89 c2                	mov    %eax,%edx
f010cac7:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010caca:	8d 0c 85 00 00 00 00 	lea    0x0(,%eax,4),%ecx
f010cad1:	8b 45 0c             	mov    0xc(%ebp),%eax
f010cad4:	01 c8                	add    %ecx,%eax
f010cad6:	8b 00                	mov    (%eax),%eax
f010cad8:	89 45 d8             	mov    %eax,-0x28(%ebp)
f010cadb:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010cade:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f010cae3:	39 c2                	cmp    %eax,%edx
f010cae5:	74 09                	je     f010caf0 <sys_check_LRU_lists+0x125>
			{
				second_list_validation = 0;
f010cae7:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
				break;
f010caee:	eb 3e                	jmp    f010cb2e <sys_check_LRU_lists+0x163>
			}
			idx_second_list++;
f010caf0:	ff 45 ec             	incl   -0x14(%ebp)

	//2- Check second chance list content if not null
	if(second_list_content != NULL)
	{
		int idx_second_list = 0;
		LIST_FOREACH(ptr_WS_element, &(env->SecondList))
f010caf3:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010caf6:	8b 80 98 ea 01 00    	mov    0x1ea98(%eax),%eax
f010cafc:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010caff:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010cb03:	74 08                	je     f010cb0d <sys_check_LRU_lists+0x142>
f010cb05:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010cb08:	8b 40 10             	mov    0x10(%eax),%eax
f010cb0b:	eb 05                	jmp    f010cb12 <sys_check_LRU_lists+0x147>
f010cb0d:	b8 00 00 00 00       	mov    $0x0,%eax
f010cb12:	8b 55 e8             	mov    -0x18(%ebp),%edx
f010cb15:	89 82 98 ea 01 00    	mov    %eax,0x1ea98(%edx)
f010cb1b:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010cb1e:	8b 80 98 ea 01 00    	mov    0x1ea98(%eax),%eax
f010cb24:	85 c0                	test   %eax,%eax
f010cb26:	75 8d                	jne    f010cab5 <sys_check_LRU_lists+0xea>
f010cb28:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010cb2c:	75 87                	jne    f010cab5 <sys_check_LRU_lists+0xea>
				second_list_validation = 0;
				break;
			}
			idx_second_list++;
		}
		if(LIST_SIZE(&env->SecondList) != actual_second_list_size)
f010cb2e:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010cb31:	8b 90 9c ea 01 00    	mov    0x1ea9c(%eax),%edx
f010cb37:	8b 45 14             	mov    0x14(%ebp),%eax
f010cb3a:	39 c2                	cmp    %eax,%edx
f010cb3c:	74 07                	je     f010cb45 <sys_check_LRU_lists+0x17a>
			second_list_validation = 0;
f010cb3e:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
	}
	return active_list_validation&second_list_validation;
f010cb45:	8b 45 fc             	mov    -0x4(%ebp),%eax
f010cb48:	23 45 f8             	and    -0x8(%ebp),%eax
}
f010cb4b:	c9                   	leave  
f010cb4c:	c3                   	ret    

f010cb4d <sys_check_LRU_lists_free>:



//2020
int sys_check_LRU_lists_free(uint32* list_content, int list_size)
{
f010cb4d:	55                   	push   %ebp
f010cb4e:	89 e5                	mov    %esp,%ebp
f010cb50:	83 ec 30             	sub    $0x30,%esp
	struct Env* env = curenv;
f010cb53:	a1 14 82 65 f0       	mov    0xf0658214,%eax
f010cb58:	89 45 ec             	mov    %eax,-0x14(%ebp)
	int list_validation_count = 0;
f010cb5b:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
	struct WorkingSetElement* ptr_WS_element;


	LIST_FOREACH(ptr_WS_element, &(env->ActiveList))
f010cb62:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010cb65:	8b 80 80 ea 01 00    	mov    0x1ea80(%eax),%eax
f010cb6b:	89 45 f8             	mov    %eax,-0x8(%ebp)
f010cb6e:	eb 65                	jmp    f010cbd5 <sys_check_LRU_lists_free+0x88>
	{
		for(int var = 0; var < list_size; var++)
f010cb70:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f010cb77:	eb 3a                	jmp    f010cbb3 <sys_check_LRU_lists_free+0x66>
		{
			if (ROUNDDOWN(ptr_WS_element->virtual_address, PAGE_SIZE) == ROUNDDOWN(list_content[var], PAGE_SIZE))
f010cb79:	8b 45 f8             	mov    -0x8(%ebp),%eax
f010cb7c:	8b 00                	mov    (%eax),%eax
f010cb7e:	89 45 e0             	mov    %eax,-0x20(%ebp)
f010cb81:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010cb84:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f010cb89:	89 c2                	mov    %eax,%edx
f010cb8b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010cb8e:	8d 0c 85 00 00 00 00 	lea    0x0(,%eax,4),%ecx
f010cb95:	8b 45 08             	mov    0x8(%ebp),%eax
f010cb98:	01 c8                	add    %ecx,%eax
f010cb9a:	8b 00                	mov    (%eax),%eax
f010cb9c:	89 45 dc             	mov    %eax,-0x24(%ebp)
f010cb9f:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010cba2:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f010cba7:	39 c2                	cmp    %eax,%edx
f010cba9:	75 05                	jne    f010cbb0 <sys_check_LRU_lists_free+0x63>
			{
				list_validation_count++;
f010cbab:	ff 45 fc             	incl   -0x4(%ebp)
				break;
f010cbae:	eb 0b                	jmp    f010cbbb <sys_check_LRU_lists_free+0x6e>
	struct WorkingSetElement* ptr_WS_element;


	LIST_FOREACH(ptr_WS_element, &(env->ActiveList))
	{
		for(int var = 0; var < list_size; var++)
f010cbb0:	ff 45 f4             	incl   -0xc(%ebp)
f010cbb3:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010cbb6:	3b 45 0c             	cmp    0xc(%ebp),%eax
f010cbb9:	7c be                	jl     f010cb79 <sys_check_LRU_lists_free+0x2c>
			{
				list_validation_count++;
				break;
			}
		}
		if(list_validation_count > 0)
f010cbbb:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
f010cbbf:	7e 08                	jle    f010cbc9 <sys_check_LRU_lists_free+0x7c>
			return list_validation_count;
f010cbc1:	8b 45 fc             	mov    -0x4(%ebp),%eax
f010cbc4:	e9 ed 00 00 00       	jmp    f010ccb6 <sys_check_LRU_lists_free+0x169>
	struct Env* env = curenv;
	int list_validation_count = 0;
	struct WorkingSetElement* ptr_WS_element;


	LIST_FOREACH(ptr_WS_element, &(env->ActiveList))
f010cbc9:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010cbcc:	8b 80 88 ea 01 00    	mov    0x1ea88(%eax),%eax
f010cbd2:	89 45 f8             	mov    %eax,-0x8(%ebp)
f010cbd5:	83 7d f8 00          	cmpl   $0x0,-0x8(%ebp)
f010cbd9:	74 08                	je     f010cbe3 <sys_check_LRU_lists_free+0x96>
f010cbdb:	8b 45 f8             	mov    -0x8(%ebp),%eax
f010cbde:	8b 40 10             	mov    0x10(%eax),%eax
f010cbe1:	eb 05                	jmp    f010cbe8 <sys_check_LRU_lists_free+0x9b>
f010cbe3:	b8 00 00 00 00       	mov    $0x0,%eax
f010cbe8:	8b 55 ec             	mov    -0x14(%ebp),%edx
f010cbeb:	89 82 88 ea 01 00    	mov    %eax,0x1ea88(%edx)
f010cbf1:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010cbf4:	8b 80 88 ea 01 00    	mov    0x1ea88(%eax),%eax
f010cbfa:	85 c0                	test   %eax,%eax
f010cbfc:	0f 85 6e ff ff ff    	jne    f010cb70 <sys_check_LRU_lists_free+0x23>
f010cc02:	83 7d f8 00          	cmpl   $0x0,-0x8(%ebp)
f010cc06:	0f 85 64 ff ff ff    	jne    f010cb70 <sys_check_LRU_lists_free+0x23>
		if(list_validation_count > 0)
			return list_validation_count;
	}


	LIST_FOREACH(ptr_WS_element, &(env->SecondList))
f010cc0c:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010cc0f:	8b 80 90 ea 01 00    	mov    0x1ea90(%eax),%eax
f010cc15:	89 45 f8             	mov    %eax,-0x8(%ebp)
f010cc18:	eb 62                	jmp    f010cc7c <sys_check_LRU_lists_free+0x12f>
	{
		for(int var = 0; var < list_size; var++)
f010cc1a:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f010cc21:	eb 3a                	jmp    f010cc5d <sys_check_LRU_lists_free+0x110>
		{
			if (ROUNDDOWN(ptr_WS_element->virtual_address, PAGE_SIZE) == ROUNDDOWN(list_content[var], PAGE_SIZE))
f010cc23:	8b 45 f8             	mov    -0x8(%ebp),%eax
f010cc26:	8b 00                	mov    (%eax),%eax
f010cc28:	89 45 e8             	mov    %eax,-0x18(%ebp)
f010cc2b:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010cc2e:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f010cc33:	89 c2                	mov    %eax,%edx
f010cc35:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010cc38:	8d 0c 85 00 00 00 00 	lea    0x0(,%eax,4),%ecx
f010cc3f:	8b 45 08             	mov    0x8(%ebp),%eax
f010cc42:	01 c8                	add    %ecx,%eax
f010cc44:	8b 00                	mov    (%eax),%eax
f010cc46:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f010cc49:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010cc4c:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f010cc51:	39 c2                	cmp    %eax,%edx
f010cc53:	75 05                	jne    f010cc5a <sys_check_LRU_lists_free+0x10d>
			{
				list_validation_count++;
f010cc55:	ff 45 fc             	incl   -0x4(%ebp)
				break;
f010cc58:	eb 0b                	jmp    f010cc65 <sys_check_LRU_lists_free+0x118>
	}


	LIST_FOREACH(ptr_WS_element, &(env->SecondList))
	{
		for(int var = 0; var < list_size; var++)
f010cc5a:	ff 45 f0             	incl   -0x10(%ebp)
f010cc5d:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010cc60:	3b 45 0c             	cmp    0xc(%ebp),%eax
f010cc63:	7c be                	jl     f010cc23 <sys_check_LRU_lists_free+0xd6>
			{
				list_validation_count++;
				break;
			}
		}
		if(list_validation_count > 0)
f010cc65:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
f010cc69:	7e 05                	jle    f010cc70 <sys_check_LRU_lists_free+0x123>
			return list_validation_count;
f010cc6b:	8b 45 fc             	mov    -0x4(%ebp),%eax
f010cc6e:	eb 46                	jmp    f010ccb6 <sys_check_LRU_lists_free+0x169>
		if(list_validation_count > 0)
			return list_validation_count;
	}


	LIST_FOREACH(ptr_WS_element, &(env->SecondList))
f010cc70:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010cc73:	8b 80 98 ea 01 00    	mov    0x1ea98(%eax),%eax
f010cc79:	89 45 f8             	mov    %eax,-0x8(%ebp)
f010cc7c:	83 7d f8 00          	cmpl   $0x0,-0x8(%ebp)
f010cc80:	74 08                	je     f010cc8a <sys_check_LRU_lists_free+0x13d>
f010cc82:	8b 45 f8             	mov    -0x8(%ebp),%eax
f010cc85:	8b 40 10             	mov    0x10(%eax),%eax
f010cc88:	eb 05                	jmp    f010cc8f <sys_check_LRU_lists_free+0x142>
f010cc8a:	b8 00 00 00 00       	mov    $0x0,%eax
f010cc8f:	8b 55 ec             	mov    -0x14(%ebp),%edx
f010cc92:	89 82 98 ea 01 00    	mov    %eax,0x1ea98(%edx)
f010cc98:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010cc9b:	8b 80 98 ea 01 00    	mov    0x1ea98(%eax),%eax
f010cca1:	85 c0                	test   %eax,%eax
f010cca3:	0f 85 71 ff ff ff    	jne    f010cc1a <sys_check_LRU_lists_free+0xcd>
f010cca9:	83 7d f8 00          	cmpl   $0x0,-0x8(%ebp)
f010ccad:	0f 85 67 ff ff ff    	jne    f010cc1a <sys_check_LRU_lists_free+0xcd>
			return list_validation_count;

	}


	return list_validation_count;
f010ccb3:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
f010ccb6:	c9                   	leave  
f010ccb7:	c3                   	ret    

f010ccb8 <syscall>:
/*****************************************************************************/
/************************* SYSTEM CALLS DISPATCHER ***************************/
/*****************************************************************************/
// Dispatches to the correct kernel function, passing the arguments.
uint32 syscall(uint32 syscallno, uint32 a1, uint32 a2, uint32 a3, uint32 a4, uint32 a5)
{
f010ccb8:	55                   	push   %ebp
f010ccb9:	89 e5                	mov    %esp,%ebp
f010ccbb:	56                   	push   %esi
f010ccbc:	53                   	push   %ebx
f010ccbd:	83 ec 10             	sub    $0x10,%esp
	// Call the function corresponding to the 'syscallno' parameter.
	// Return any appropriate return value.
	// LAB 3: Your code here.
	switch(syscallno)
f010ccc0:	83 7d 08 30          	cmpl   $0x30,0x8(%ebp)
f010ccc4:	0f 87 0e 04 00 00    	ja     f010d0d8 <syscall+0x420>
f010ccca:	8b 45 08             	mov    0x8(%ebp),%eax
f010cccd:	c1 e0 02             	shl    $0x2,%eax
f010ccd0:	05 10 6f 13 f0       	add    $0xf0136f10,%eax
f010ccd5:	8b 00                	mov    (%eax),%eax
f010ccd7:	ff e0                	jmp    *%eax
	{
	case SYS_cputs:
		sys_cputs((const char*)a1,a2,(uint8)a3);
f010ccd9:	8b 45 14             	mov    0x14(%ebp),%eax
f010ccdc:	0f b6 d0             	movzbl %al,%edx
f010ccdf:	8b 45 0c             	mov    0xc(%ebp),%eax
f010cce2:	83 ec 04             	sub    $0x4,%esp
f010cce5:	52                   	push   %edx
f010cce6:	ff 75 10             	pushl  0x10(%ebp)
f010cce9:	50                   	push   %eax
f010ccea:	e8 eb f4 ff ff       	call   f010c1da <sys_cputs>
f010ccef:	83 c4 10             	add    $0x10,%esp
		return 0;
f010ccf2:	b8 00 00 00 00       	mov    $0x0,%eax
f010ccf7:	e9 e1 03 00 00       	jmp    f010d0dd <syscall+0x425>
		break;
	case SYS_cgetc:
		return sys_cgetc();
f010ccfc:	e8 4e f5 ff ff       	call   f010c24f <sys_cgetc>
f010cd01:	e9 d7 03 00 00       	jmp    f010d0dd <syscall+0x425>
		break;
	case SYS_calc_req_frames:
		return sys_calculate_required_frames(a1, a2);
f010cd06:	83 ec 08             	sub    $0x8,%esp
f010cd09:	ff 75 10             	pushl  0x10(%ebp)
f010cd0c:	ff 75 0c             	pushl  0xc(%ebp)
f010cd0f:	e8 88 f6 ff ff       	call   f010c39c <sys_calculate_required_frames>
f010cd14:	83 c4 10             	add    $0x10,%esp
f010cd17:	e9 c1 03 00 00       	jmp    f010d0dd <syscall+0x425>
		break;
	case SYS_calc_free_frames:
		return sys_calculate_free_frames();
f010cd1c:	e8 9d f6 ff ff       	call   f010c3be <sys_calculate_free_frames>
f010cd21:	e9 b7 03 00 00       	jmp    f010d0dd <syscall+0x425>
		break;
	case SYS_calc_modified_frames:
		return sys_calculate_modified_frames();
f010cd26:	e8 b2 f6 ff ff       	call   f010c3dd <sys_calculate_modified_frames>
f010cd2b:	e9 ad 03 00 00       	jmp    f010d0dd <syscall+0x425>
		break;
	case SYS_calc_notmod_frames:
		return sys_calculate_notmod_frames();
f010cd30:	e8 c2 f6 ff ff       	call   f010c3f7 <sys_calculate_notmod_frames>
f010cd35:	e9 a3 03 00 00       	jmp    f010d0dd <syscall+0x425>
		break;

	case SYS_pf_calc_allocated_pages:
		return sys_pf_calculate_allocated_pages();
f010cd3a:	e8 2a f7 ff ff       	call   f010c469 <sys_pf_calculate_allocated_pages>
f010cd3f:	e9 99 03 00 00       	jmp    f010d0dd <syscall+0x425>
		break;
	case SYS_calculate_pages_tobe_removed_ready_exit:
		return sys_calculate_pages_tobe_removed_ready_exit(a1);
f010cd44:	83 ec 0c             	sub    $0xc,%esp
f010cd47:	ff 75 0c             	pushl  0xc(%ebp)
f010cd4a:	e8 c2 f6 ff ff       	call   f010c411 <sys_calculate_pages_tobe_removed_ready_exit>
f010cd4f:	83 c4 10             	add    $0x10,%esp
f010cd52:	e9 86 03 00 00       	jmp    f010d0dd <syscall+0x425>
		break;
	case SYS_scarce_memory:
		sys_scarce_memory();
f010cd57:	e8 cb f6 ff ff       	call   f010c427 <sys_scarce_memory>
		return 0;
f010cd5c:	b8 00 00 00 00       	mov    $0x0,%eax
f010cd61:	e9 77 03 00 00       	jmp    f010d0dd <syscall+0x425>
		break;
	case SYS_free_user_mem:
		sys_free_user_mem(a1, a2);
f010cd66:	83 ec 08             	sub    $0x8,%esp
f010cd69:	ff 75 10             	pushl  0x10(%ebp)
f010cd6c:	ff 75 0c             	pushl  0xc(%ebp)
f010cd6f:	e8 0e f7 ff ff       	call   f010c482 <sys_free_user_mem>
f010cd74:	83 c4 10             	add    $0x10,%esp
		return 0;
f010cd77:	b8 00 00 00 00       	mov    $0x0,%eax
f010cd7c:	e9 5c 03 00 00       	jmp    f010d0dd <syscall+0x425>
		break;
		//======================
	case SYS_allocate_page:
		__sys_allocate_page((void*)a1, a2);
f010cd81:	8b 55 10             	mov    0x10(%ebp),%edx
f010cd84:	8b 45 0c             	mov    0xc(%ebp),%eax
f010cd87:	83 ec 08             	sub    $0x8,%esp
f010cd8a:	52                   	push   %edx
f010cd8b:	50                   	push   %eax
f010cd8c:	e8 d1 f4 ff ff       	call   f010c262 <__sys_allocate_page>
f010cd91:	83 c4 10             	add    $0x10,%esp
		return 0;
f010cd94:	b8 00 00 00 00       	mov    $0x0,%eax
f010cd99:	e9 3f 03 00 00       	jmp    f010d0dd <syscall+0x425>
		break;
	case SYS_map_frame:
		__sys_map_frame(a1, (void*)a2, a3, (void*)a4, a5);
f010cd9e:	8b 75 1c             	mov    0x1c(%ebp),%esi
f010cda1:	8b 5d 18             	mov    0x18(%ebp),%ebx
f010cda4:	8b 4d 14             	mov    0x14(%ebp),%ecx
f010cda7:	8b 55 10             	mov    0x10(%ebp),%edx
f010cdaa:	8b 45 0c             	mov    0xc(%ebp),%eax
f010cdad:	83 ec 0c             	sub    $0xc,%esp
f010cdb0:	56                   	push   %esi
f010cdb1:	53                   	push   %ebx
f010cdb2:	51                   	push   %ecx
f010cdb3:	52                   	push   %edx
f010cdb4:	50                   	push   %eax
f010cdb5:	e8 a8 f5 ff ff       	call   f010c362 <__sys_map_frame>
f010cdba:	83 c4 20             	add    $0x20,%esp
		return 0;
f010cdbd:	b8 00 00 00 00       	mov    $0x0,%eax
f010cdc2:	e9 16 03 00 00       	jmp    f010d0dd <syscall+0x425>
		break;
	case SYS_unmap_frame:
		__sys_unmap_frame(a1, (void*)a2);
f010cdc7:	8b 55 10             	mov    0x10(%ebp),%edx
f010cdca:	8b 45 0c             	mov    0xc(%ebp),%eax
f010cdcd:	83 ec 08             	sub    $0x8,%esp
f010cdd0:	52                   	push   %edx
f010cdd1:	50                   	push   %eax
f010cdd2:	e8 a8 f5 ff ff       	call   f010c37f <__sys_unmap_frame>
f010cdd7:	83 c4 10             	add    $0x10,%esp
		return 0;
f010cdda:	b8 00 00 00 00       	mov    $0x0,%eax
f010cddf:	e9 f9 02 00 00       	jmp    f010d0dd <syscall+0x425>
		break;

		//2022
	case SYS_allocate_chunk_in_mem:
		sys_allocate_chunk(a1, (uint32)a2, a3);
f010cde4:	83 ec 04             	sub    $0x4,%esp
f010cde7:	ff 75 14             	pushl  0x14(%ebp)
f010cdea:	ff 75 10             	pushl  0x10(%ebp)
f010cded:	ff 75 0c             	pushl  0xc(%ebp)
f010cdf0:	e8 ef f6 ff ff       	call   f010c4e4 <sys_allocate_chunk>
f010cdf5:	83 c4 10             	add    $0x10,%esp
		return 0;
f010cdf8:	b8 00 00 00 00       	mov    $0x0,%eax
f010cdfd:	e9 db 02 00 00       	jmp    f010d0dd <syscall+0x425>
		break;
	case SYS_disableINTR:
		sys_disable_interrupt();
f010ce02:	e8 38 f7 ff ff       	call   f010c53f <sys_disable_interrupt>
		return 0;
f010ce07:	b8 00 00 00 00       	mov    $0x0,%eax
f010ce0c:	e9 cc 02 00 00       	jmp    f010d0dd <syscall+0x425>
		break;

	case SYS_enableINTR:
		sys_enable_interrupt();
f010ce11:	e8 43 f7 ff ff       	call   f010c559 <sys_enable_interrupt>
		return 0;
f010ce16:	b8 00 00 00 00       	mov    $0x0,%eax
f010ce1b:	e9 bd 02 00 00       	jmp    f010d0dd <syscall+0x425>
		break;

	case SYS_cputc:
		sys_cputc((const char)a1);
f010ce20:	8b 45 0c             	mov    0xc(%ebp),%eax
f010ce23:	0f be c0             	movsbl %al,%eax
f010ce26:	83 ec 0c             	sub    $0xc,%esp
f010ce29:	50                   	push   %eax
f010ce2a:	e8 fc f3 ff ff       	call   f010c22b <sys_cputc>
f010ce2f:	83 c4 10             	add    $0x10,%esp
		return 0;
f010ce32:	b8 00 00 00 00       	mov    $0x0,%eax
f010ce37:	e9 a1 02 00 00       	jmp    f010d0dd <syscall+0x425>
		break;

	case SYS_clearFFL:
		sys_clearFFL((const char)a1);
f010ce3c:	8b 45 0c             	mov    0xc(%ebp),%eax
f010ce3f:	0f be c0             	movsbl %al,%eax
f010ce42:	83 ec 0c             	sub    $0xc,%esp
f010ce45:	50                   	push   %eax
f010ce46:	e8 ea f5 ff ff       	call   f010c435 <sys_clearFFL>
f010ce4b:	83 c4 10             	add    $0x10,%esp
		return 0;
f010ce4e:	b8 00 00 00 00       	mov    $0x0,%eax
f010ce53:	e9 85 02 00 00       	jmp    f010d0dd <syscall+0x425>
		break;

	case SYS_create_semaphore:
		return sys_createSemaphore((char*)a1, a2);
f010ce58:	8b 45 0c             	mov    0xc(%ebp),%eax
f010ce5b:	83 ec 08             	sub    $0x8,%esp
f010ce5e:	ff 75 10             	pushl  0x10(%ebp)
f010ce61:	50                   	push   %eax
f010ce62:	e8 0c f7 ff ff       	call   f010c573 <sys_createSemaphore>
f010ce67:	83 c4 10             	add    $0x10,%esp
f010ce6a:	e9 6e 02 00 00       	jmp    f010d0dd <syscall+0x425>
		break;

	case SYS_wait_semaphore:
		sys_waitSemaphore((int32)a1, (char*)a2);
f010ce6f:	8b 55 10             	mov    0x10(%ebp),%edx
f010ce72:	8b 45 0c             	mov    0xc(%ebp),%eax
f010ce75:	83 ec 08             	sub    $0x8,%esp
f010ce78:	52                   	push   %edx
f010ce79:	50                   	push   %eax
f010ce7a:	e8 16 f7 ff ff       	call   f010c595 <sys_waitSemaphore>
f010ce7f:	83 c4 10             	add    $0x10,%esp
		return 0;
f010ce82:	b8 00 00 00 00       	mov    $0x0,%eax
f010ce87:	e9 51 02 00 00       	jmp    f010d0dd <syscall+0x425>
		break;

	case SYS_signal_semaphore:
		sys_signalSemaphore((int32)a1, (char*)a2);
f010ce8c:	8b 55 10             	mov    0x10(%ebp),%edx
f010ce8f:	8b 45 0c             	mov    0xc(%ebp),%eax
f010ce92:	83 ec 08             	sub    $0x8,%esp
f010ce95:	52                   	push   %edx
f010ce96:	50                   	push   %eax
f010ce97:	e8 13 f7 ff ff       	call   f010c5af <sys_signalSemaphore>
f010ce9c:	83 c4 10             	add    $0x10,%esp
		return 0;
f010ce9f:	b8 00 00 00 00       	mov    $0x0,%eax
f010cea4:	e9 34 02 00 00       	jmp    f010d0dd <syscall+0x425>
		break;

	case SYS_get_semaphore_value:
		return sys_getSemaphoreValue((int32)a1, (char*)a2);
f010cea9:	8b 55 10             	mov    0x10(%ebp),%edx
f010ceac:	8b 45 0c             	mov    0xc(%ebp),%eax
f010ceaf:	83 ec 08             	sub    $0x8,%esp
f010ceb2:	52                   	push   %edx
f010ceb3:	50                   	push   %eax
f010ceb4:	e8 10 f7 ff ff       	call   f010c5c9 <sys_getSemaphoreValue>
f010ceb9:	83 c4 10             	add    $0x10,%esp
f010cebc:	e9 1c 02 00 00       	jmp    f010d0dd <syscall+0x425>
		break;

	case SYS_create_shared_object:
		return sys_createSharedObject((char*)a1, a2, a3, (void*)a4);
f010cec1:	8b 4d 18             	mov    0x18(%ebp),%ecx
f010cec4:	8b 45 14             	mov    0x14(%ebp),%eax
f010cec7:	0f b6 d0             	movzbl %al,%edx
f010ceca:	8b 45 0c             	mov    0xc(%ebp),%eax
f010cecd:	51                   	push   %ecx
f010cece:	52                   	push   %edx
f010cecf:	ff 75 10             	pushl  0x10(%ebp)
f010ced2:	50                   	push   %eax
f010ced3:	e8 4e f7 ff ff       	call   f010c626 <sys_createSharedObject>
f010ced8:	83 c4 10             	add    $0x10,%esp
f010cedb:	e9 fd 01 00 00       	jmp    f010d0dd <syscall+0x425>
		break;

	case SYS_get_shared_object:
		return sys_getSharedObject((int32)a1, (char*)a2, (void*)a3);
f010cee0:	8b 4d 14             	mov    0x14(%ebp),%ecx
f010cee3:	8b 55 10             	mov    0x10(%ebp),%edx
f010cee6:	8b 45 0c             	mov    0xc(%ebp),%eax
f010cee9:	83 ec 04             	sub    $0x4,%esp
f010ceec:	51                   	push   %ecx
f010ceed:	52                   	push   %edx
f010ceee:	50                   	push   %eax
f010ceef:	e8 7b f7 ff ff       	call   f010c66f <sys_getSharedObject>
f010cef4:	83 c4 10             	add    $0x10,%esp
f010cef7:	e9 e1 01 00 00       	jmp    f010d0dd <syscall+0x425>
		break;

	case SYS_free_shared_object:
		return sys_freeSharedObject((int32)a1, (void *)a2);
f010cefc:	8b 55 10             	mov    0x10(%ebp),%edx
f010ceff:	8b 45 0c             	mov    0xc(%ebp),%eax
f010cf02:	83 ec 08             	sub    $0x8,%esp
f010cf05:	52                   	push   %edx
f010cf06:	50                   	push   %eax
f010cf07:	e8 7f f7 ff ff       	call   f010c68b <sys_freeSharedObject>
f010cf0c:	83 c4 10             	add    $0x10,%esp
f010cf0f:	e9 c9 01 00 00       	jmp    f010d0dd <syscall+0x425>
		break;

	case SYS_get_size_of_shared_object:
		return sys_getSizeOfSharedObject((int32)a1, (char*)a2);
f010cf14:	8b 55 10             	mov    0x10(%ebp),%edx
f010cf17:	8b 45 0c             	mov    0xc(%ebp),%eax
f010cf1a:	83 ec 08             	sub    $0x8,%esp
f010cf1d:	52                   	push   %edx
f010cf1e:	50                   	push   %eax
f010cf1f:	e8 32 f7 ff ff       	call   f010c656 <sys_getSizeOfSharedObject>
f010cf24:	83 c4 10             	add    $0x10,%esp
f010cf27:	e9 b1 01 00 00       	jmp    f010d0dd <syscall+0x425>
		break;

	case SYS_get_max_shares:
		return sys_getMaxShares();
f010cf2c:	e8 73 f7 ff ff       	call   f010c6a4 <sys_getMaxShares>
f010cf31:	e9 a7 01 00 00       	jmp    f010d0dd <syscall+0x425>
		break;

	case SYS_create_env:
		return sys_create_env((char*)a1, (uint32)a2, (uint32)a3, (uint32)a4);
f010cf36:	8b 45 0c             	mov    0xc(%ebp),%eax
f010cf39:	ff 75 18             	pushl  0x18(%ebp)
f010cf3c:	ff 75 14             	pushl  0x14(%ebp)
f010cf3f:	ff 75 10             	pushl  0x10(%ebp)
f010cf42:	50                   	push   %eax
f010cf43:	e8 86 f8 ff ff       	call   f010c7ce <sys_create_env>
f010cf48:	83 c4 10             	add    $0x10,%esp
f010cf4b:	e9 8d 01 00 00       	jmp    f010d0dd <syscall+0x425>
		break;

	case SYS_run_env:
		sys_run_env((int32)a1);
f010cf50:	8b 45 0c             	mov    0xc(%ebp),%eax
f010cf53:	83 ec 0c             	sub    $0xc,%esp
f010cf56:	50                   	push   %eax
f010cf57:	e8 b2 f8 ff ff       	call   f010c80e <sys_run_env>
f010cf5c:	83 c4 10             	add    $0x10,%esp
		return 0;
f010cf5f:	b8 00 00 00 00       	mov    $0x0,%eax
f010cf64:	e9 74 01 00 00       	jmp    f010d0dd <syscall+0x425>
		break;
	case SYS_getenvindex:
		return sys_getenvindex();
f010cf69:	e8 4d f7 ff ff       	call   f010c6bb <sys_getenvindex>
f010cf6e:	e9 6a 01 00 00       	jmp    f010d0dd <syscall+0x425>
		break;
	case SYS_getenvid:
		return sys_getenvid();
f010cf73:	e8 36 f7 ff ff       	call   f010c6ae <sys_getenvid>
f010cf78:	e9 60 01 00 00       	jmp    f010d0dd <syscall+0x425>
		break;
	case SYS_getparentenvid:
		return sys_getparentenvid();
f010cf7d:	e8 99 f7 ff ff       	call   f010c71b <sys_getparentenvid>
f010cf82:	e9 56 01 00 00       	jmp    f010d0dd <syscall+0x425>
		break;
	case SYS_destroy_env:
		return sys_destroy_env(a1);
f010cf87:	8b 45 0c             	mov    0xc(%ebp),%eax
f010cf8a:	83 ec 0c             	sub    $0xc,%esp
f010cf8d:	50                   	push   %eax
f010cf8e:	e8 95 f7 ff ff       	call   f010c728 <sys_destroy_env>
f010cf93:	83 c4 10             	add    $0x10,%esp
f010cf96:	e9 42 01 00 00       	jmp    f010d0dd <syscall+0x425>
		break;
	case SYS_exit_env:
		sys_exit_env();
f010cf9b:	e8 20 f8 ff ff       	call   f010c7c0 <sys_exit_env>
		return 0;
f010cfa0:	b8 00 00 00 00       	mov    $0x0,%eax
f010cfa5:	e9 33 01 00 00       	jmp    f010d0dd <syscall+0x425>
		break;
	case SYS_get_virtual_time:
	{
		struct uint64 res = sys_get_virtual_time();
f010cfaa:	8d 45 e8             	lea    -0x18(%ebp),%eax
f010cfad:	83 ec 0c             	sub    $0xc,%esp
f010cfb0:	50                   	push   %eax
f010cfb1:	e8 70 f8 ff ff       	call   f010c826 <sys_get_virtual_time>
f010cfb6:	83 c4 0c             	add    $0xc,%esp
		uint32* ptrlow = ((uint32*)a1);
f010cfb9:	8b 45 0c             	mov    0xc(%ebp),%eax
f010cfbc:	89 45 f4             	mov    %eax,-0xc(%ebp)
		uint32* ptrhi = ((uint32*)a2);
f010cfbf:	8b 45 10             	mov    0x10(%ebp),%eax
f010cfc2:	89 45 f0             	mov    %eax,-0x10(%ebp)
		*ptrlow = res.low;
f010cfc5:	8b 55 e8             	mov    -0x18(%ebp),%edx
f010cfc8:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010cfcb:	89 10                	mov    %edx,(%eax)
		*ptrhi = res.hi;
f010cfcd:	8b 55 ec             	mov    -0x14(%ebp),%edx
f010cfd0:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010cfd3:	89 10                	mov    %edx,(%eax)
		return 0;
f010cfd5:	b8 00 00 00 00       	mov    $0x0,%eax
f010cfda:	e9 fe 00 00 00       	jmp    f010d0dd <syscall+0x425>
		break;
	}
	case SYS_move_user_mem:
		sys_move_user_mem(a1, a2, a3);
f010cfdf:	83 ec 04             	sub    $0x4,%esp
f010cfe2:	ff 75 14             	pushl  0x14(%ebp)
f010cfe5:	ff 75 10             	pushl  0x10(%ebp)
f010cfe8:	ff 75 0c             	pushl  0xc(%ebp)
f010cfeb:	e8 17 f5 ff ff       	call   f010c507 <sys_move_user_mem>
f010cff0:	83 c4 10             	add    $0x10,%esp
		return 0;
f010cff3:	b8 00 00 00 00       	mov    $0x0,%eax
f010cff8:	e9 e0 00 00 00       	jmp    f010d0dd <syscall+0x425>
		break;
	case SYS_rcr2:
		return sys_rcr2();
f010cffd:	e8 53 f8 ff ff       	call   f010c855 <sys_rcr2>
f010d002:	e9 d6 00 00 00       	jmp    f010d0dd <syscall+0x425>
		break;
	case SYS_bypassPageFault:
		sys_bypassPageFault(a1);
f010d007:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d00a:	0f b6 c0             	movzbl %al,%eax
f010d00d:	83 ec 0c             	sub    $0xc,%esp
f010d010:	50                   	push   %eax
f010d011:	e8 51 f8 ff ff       	call   f010c867 <sys_bypassPageFault>
f010d016:	83 c4 10             	add    $0x10,%esp
		return 0;
f010d019:	b8 00 00 00 00       	mov    $0x0,%eax
f010d01e:	e9 ba 00 00 00       	jmp    f010d0dd <syscall+0x425>

	case SYS_rsttst:
		rsttst();
f010d023:	e8 56 f8 ff ff       	call   f010c87e <rsttst>
		return 0;
f010d028:	b8 00 00 00 00       	mov    $0x0,%eax
f010d02d:	e9 ab 00 00 00       	jmp    f010d0dd <syscall+0x425>
	case SYS_inctst:
		inctst();
f010d032:	e8 57 f8 ff ff       	call   f010c88e <inctst>
		return 0;
f010d037:	b8 00 00 00 00       	mov    $0x0,%eax
f010d03c:	e9 9c 00 00 00       	jmp    f010d0dd <syscall+0x425>
	case SYS_chktst:
		chktst(a1);
f010d041:	83 ec 0c             	sub    $0xc,%esp
f010d044:	ff 75 0c             	pushl  0xc(%ebp)
f010d047:	e8 44 f9 ff ff       	call   f010c990 <chktst>
f010d04c:	83 c4 10             	add    $0x10,%esp
		return 0;
f010d04f:	b8 00 00 00 00       	mov    $0x0,%eax
f010d054:	e9 84 00 00 00       	jmp    f010d0dd <syscall+0x425>
	case SYS_gettst:
		return gettst();
f010d059:	e8 41 f8 ff ff       	call   f010c89f <gettst>
f010d05e:	eb 7d                	jmp    f010d0dd <syscall+0x425>
	case SYS_testNum:
		tst(a1, a2, a3, (char)a4, a5);
f010d060:	8b 55 1c             	mov    0x1c(%ebp),%edx
f010d063:	8b 45 18             	mov    0x18(%ebp),%eax
f010d066:	0f be c0             	movsbl %al,%eax
f010d069:	83 ec 0c             	sub    $0xc,%esp
f010d06c:	52                   	push   %edx
f010d06d:	50                   	push   %eax
f010d06e:	ff 75 14             	pushl  0x14(%ebp)
f010d071:	ff 75 10             	pushl  0x10(%ebp)
f010d074:	ff 75 0c             	pushl  0xc(%ebp)
f010d077:	e8 2d f8 ff ff       	call   f010c8a9 <tst>
f010d07c:	83 c4 20             	add    $0x20,%esp
		return 0;
f010d07f:	b8 00 00 00 00       	mov    $0x0,%eax
f010d084:	eb 57                	jmp    f010d0dd <syscall+0x425>

	case SYS_get_heap_strategy:
		return sys_get_heap_strategy();
f010d086:	e8 9c f4 ff ff       	call   f010c527 <sys_get_heap_strategy>
f010d08b:	eb 50                	jmp    f010d0dd <syscall+0x425>

	case SYS_set_heap_strategy:
		sys_set_uheap_strategy(a1);
f010d08d:	83 ec 0c             	sub    $0xc,%esp
f010d090:	ff 75 0c             	pushl  0xc(%ebp)
f010d093:	e8 99 f4 ff ff       	call   f010c531 <sys_set_uheap_strategy>
f010d098:	83 c4 10             	add    $0x10,%esp
		return 0;
f010d09b:	b8 00 00 00 00       	mov    $0x0,%eax
f010d0a0:	eb 3b                	jmp    f010d0dd <syscall+0x425>

	case SYS_check_LRU_lists:
		return sys_check_LRU_lists((uint32*)a1, (uint32*)a2, (int)a3, (int)a4);
f010d0a2:	8b 5d 18             	mov    0x18(%ebp),%ebx
f010d0a5:	8b 4d 14             	mov    0x14(%ebp),%ecx
f010d0a8:	8b 55 10             	mov    0x10(%ebp),%edx
f010d0ab:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d0ae:	53                   	push   %ebx
f010d0af:	51                   	push   %ecx
f010d0b0:	52                   	push   %edx
f010d0b1:	50                   	push   %eax
f010d0b2:	e8 14 f9 ff ff       	call   f010c9cb <sys_check_LRU_lists>
f010d0b7:	83 c4 10             	add    $0x10,%esp
f010d0ba:	eb 21                	jmp    f010d0dd <syscall+0x425>

	case SYS_check_LRU_lists_free:
		return sys_check_LRU_lists_free((uint32*)a1, (int)a2);
f010d0bc:	8b 55 10             	mov    0x10(%ebp),%edx
f010d0bf:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d0c2:	83 ec 08             	sub    $0x8,%esp
f010d0c5:	52                   	push   %edx
f010d0c6:	50                   	push   %eax
f010d0c7:	e8 81 fa ff ff       	call   f010cb4d <sys_check_LRU_lists_free>
f010d0cc:	83 c4 10             	add    $0x10,%esp
f010d0cf:	eb 0c                	jmp    f010d0dd <syscall+0x425>

	case NSYSCALLS:
		return 	-E_INVAL;
f010d0d1:	b8 03 00 00 00       	mov    $0x3,%eax
f010d0d6:	eb 05                	jmp    f010d0dd <syscall+0x425>
		break;
	}
	//panic("syscall not implemented");
	return -E_INVAL;
f010d0d8:	b8 03 00 00 00       	mov    $0x3,%eax
}
f010d0dd:	8d 65 f8             	lea    -0x8(%ebp),%esp
f010d0e0:	5b                   	pop    %ebx
f010d0e1:	5e                   	pop    %esi
f010d0e2:	5d                   	pop    %ebp
f010d0e3:	c3                   	ret    

f010d0e4 <stab_binsearch>:
//	will exit setting left = 118, right = 554.
//
static void
stab_binsearch(const struct Stab *stabs, int *region_left, int *region_right,
	       int type, uint32*  addr)
{
f010d0e4:	55                   	push   %ebp
f010d0e5:	89 e5                	mov    %esp,%ebp
f010d0e7:	83 ec 20             	sub    $0x20,%esp
	int l = *region_left, r = *region_right, any_matches = 0;
f010d0ea:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d0ed:	8b 00                	mov    (%eax),%eax
f010d0ef:	89 45 fc             	mov    %eax,-0x4(%ebp)
f010d0f2:	8b 45 10             	mov    0x10(%ebp),%eax
f010d0f5:	8b 00                	mov    (%eax),%eax
f010d0f7:	89 45 f8             	mov    %eax,-0x8(%ebp)
f010d0fa:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

	while (l <= r) {
f010d101:	e9 ca 00 00 00       	jmp    f010d1d0 <stab_binsearch+0xec>
		int true_m = (l + r) / 2, m = true_m;
f010d106:	8b 55 fc             	mov    -0x4(%ebp),%edx
f010d109:	8b 45 f8             	mov    -0x8(%ebp),%eax
f010d10c:	01 d0                	add    %edx,%eax
f010d10e:	89 c2                	mov    %eax,%edx
f010d110:	c1 ea 1f             	shr    $0x1f,%edx
f010d113:	01 d0                	add    %edx,%eax
f010d115:	d1 f8                	sar    %eax
f010d117:	89 45 ec             	mov    %eax,-0x14(%ebp)
f010d11a:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010d11d:	89 45 f0             	mov    %eax,-0x10(%ebp)

		// search for earliest stab with right type
		while (m >= l && stabs[m].n_type != type)
f010d120:	eb 03                	jmp    f010d125 <stab_binsearch+0x41>
			m--;
f010d122:	ff 4d f0             	decl   -0x10(%ebp)

	while (l <= r) {
		int true_m = (l + r) / 2, m = true_m;

		// search for earliest stab with right type
		while (m >= l && stabs[m].n_type != type)
f010d125:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010d128:	3b 45 fc             	cmp    -0x4(%ebp),%eax
f010d12b:	7c 1e                	jl     f010d14b <stab_binsearch+0x67>
f010d12d:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010d130:	89 d0                	mov    %edx,%eax
f010d132:	01 c0                	add    %eax,%eax
f010d134:	01 d0                	add    %edx,%eax
f010d136:	c1 e0 02             	shl    $0x2,%eax
f010d139:	89 c2                	mov    %eax,%edx
f010d13b:	8b 45 08             	mov    0x8(%ebp),%eax
f010d13e:	01 d0                	add    %edx,%eax
f010d140:	8a 40 04             	mov    0x4(%eax),%al
f010d143:	0f b6 c0             	movzbl %al,%eax
f010d146:	3b 45 14             	cmp    0x14(%ebp),%eax
f010d149:	75 d7                	jne    f010d122 <stab_binsearch+0x3e>
			m--;
		if (m < l) {	// no match in [l, m]
f010d14b:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010d14e:	3b 45 fc             	cmp    -0x4(%ebp),%eax
f010d151:	7d 09                	jge    f010d15c <stab_binsearch+0x78>
			l = true_m + 1;
f010d153:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010d156:	40                   	inc    %eax
f010d157:	89 45 fc             	mov    %eax,-0x4(%ebp)
			continue;
f010d15a:	eb 74                	jmp    f010d1d0 <stab_binsearch+0xec>
		}

		// actual binary search
		any_matches = 1;
f010d15c:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
		if (stabs[m].n_value < addr) {
f010d163:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010d166:	89 d0                	mov    %edx,%eax
f010d168:	01 c0                	add    %eax,%eax
f010d16a:	01 d0                	add    %edx,%eax
f010d16c:	c1 e0 02             	shl    $0x2,%eax
f010d16f:	89 c2                	mov    %eax,%edx
f010d171:	8b 45 08             	mov    0x8(%ebp),%eax
f010d174:	01 d0                	add    %edx,%eax
f010d176:	8b 40 08             	mov    0x8(%eax),%eax
f010d179:	3b 45 18             	cmp    0x18(%ebp),%eax
f010d17c:	73 11                	jae    f010d18f <stab_binsearch+0xab>
			*region_left = m;
f010d17e:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d181:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010d184:	89 10                	mov    %edx,(%eax)
			l = true_m + 1;
f010d186:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010d189:	40                   	inc    %eax
f010d18a:	89 45 fc             	mov    %eax,-0x4(%ebp)
f010d18d:	eb 41                	jmp    f010d1d0 <stab_binsearch+0xec>
		} else if (stabs[m].n_value > addr) {
f010d18f:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010d192:	89 d0                	mov    %edx,%eax
f010d194:	01 c0                	add    %eax,%eax
f010d196:	01 d0                	add    %edx,%eax
f010d198:	c1 e0 02             	shl    $0x2,%eax
f010d19b:	89 c2                	mov    %eax,%edx
f010d19d:	8b 45 08             	mov    0x8(%ebp),%eax
f010d1a0:	01 d0                	add    %edx,%eax
f010d1a2:	8b 40 08             	mov    0x8(%eax),%eax
f010d1a5:	3b 45 18             	cmp    0x18(%ebp),%eax
f010d1a8:	76 14                	jbe    f010d1be <stab_binsearch+0xda>
			*region_right = m - 1;
f010d1aa:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010d1ad:	8d 50 ff             	lea    -0x1(%eax),%edx
f010d1b0:	8b 45 10             	mov    0x10(%ebp),%eax
f010d1b3:	89 10                	mov    %edx,(%eax)
			r = m - 1;
f010d1b5:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010d1b8:	48                   	dec    %eax
f010d1b9:	89 45 f8             	mov    %eax,-0x8(%ebp)
f010d1bc:	eb 12                	jmp    f010d1d0 <stab_binsearch+0xec>
		} else {
			// exact match for 'addr', but continue loop to find
			// *region_right
			*region_left = m;
f010d1be:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d1c1:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010d1c4:	89 10                	mov    %edx,(%eax)
			l = m;
f010d1c6:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010d1c9:	89 45 fc             	mov    %eax,-0x4(%ebp)
			addr++;
f010d1cc:	83 45 18 04          	addl   $0x4,0x18(%ebp)
stab_binsearch(const struct Stab *stabs, int *region_left, int *region_right,
	       int type, uint32*  addr)
{
	int l = *region_left, r = *region_right, any_matches = 0;

	while (l <= r) {
f010d1d0:	8b 45 fc             	mov    -0x4(%ebp),%eax
f010d1d3:	3b 45 f8             	cmp    -0x8(%ebp),%eax
f010d1d6:	0f 8e 2a ff ff ff    	jle    f010d106 <stab_binsearch+0x22>
			l = m;
			addr++;
		}
	}

	if (!any_matches)
f010d1dc:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010d1e0:	75 0f                	jne    f010d1f1 <stab_binsearch+0x10d>
		*region_right = *region_left - 1;
f010d1e2:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d1e5:	8b 00                	mov    (%eax),%eax
f010d1e7:	8d 50 ff             	lea    -0x1(%eax),%edx
f010d1ea:	8b 45 10             	mov    0x10(%ebp),%eax
f010d1ed:	89 10                	mov    %edx,(%eax)
		     l > *region_left && stabs[l].n_type != type;
		     l--)
			/* do nothing */;
		*region_left = l;
	}
}
f010d1ef:	eb 3d                	jmp    f010d22e <stab_binsearch+0x14a>

	if (!any_matches)
		*region_right = *region_left - 1;
	else {
		// find rightmost region containing 'addr'
		for (l = *region_right;
f010d1f1:	8b 45 10             	mov    0x10(%ebp),%eax
f010d1f4:	8b 00                	mov    (%eax),%eax
f010d1f6:	89 45 fc             	mov    %eax,-0x4(%ebp)
f010d1f9:	eb 03                	jmp    f010d1fe <stab_binsearch+0x11a>
		     l > *region_left && stabs[l].n_type != type;
		     l--)
f010d1fb:	ff 4d fc             	decl   -0x4(%ebp)
	if (!any_matches)
		*region_right = *region_left - 1;
	else {
		// find rightmost region containing 'addr'
		for (l = *region_right;
		     l > *region_left && stabs[l].n_type != type;
f010d1fe:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d201:	8b 00                	mov    (%eax),%eax

	if (!any_matches)
		*region_right = *region_left - 1;
	else {
		// find rightmost region containing 'addr'
		for (l = *region_right;
f010d203:	3b 45 fc             	cmp    -0x4(%ebp),%eax
f010d206:	7d 1e                	jge    f010d226 <stab_binsearch+0x142>
		     l > *region_left && stabs[l].n_type != type;
f010d208:	8b 55 fc             	mov    -0x4(%ebp),%edx
f010d20b:	89 d0                	mov    %edx,%eax
f010d20d:	01 c0                	add    %eax,%eax
f010d20f:	01 d0                	add    %edx,%eax
f010d211:	c1 e0 02             	shl    $0x2,%eax
f010d214:	89 c2                	mov    %eax,%edx
f010d216:	8b 45 08             	mov    0x8(%ebp),%eax
f010d219:	01 d0                	add    %edx,%eax
f010d21b:	8a 40 04             	mov    0x4(%eax),%al
f010d21e:	0f b6 c0             	movzbl %al,%eax
f010d221:	3b 45 14             	cmp    0x14(%ebp),%eax
f010d224:	75 d5                	jne    f010d1fb <stab_binsearch+0x117>
		     l--)
			/* do nothing */;
		*region_left = l;
f010d226:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d229:	8b 55 fc             	mov    -0x4(%ebp),%edx
f010d22c:	89 10                	mov    %edx,(%eax)
	}
}
f010d22e:	90                   	nop
f010d22f:	c9                   	leave  
f010d230:	c3                   	ret    

f010d231 <debuginfo_eip>:
//	negative if not.  But even if it returns negative it has stored some
//	information into '*info'.
//
int
debuginfo_eip(uint32*  addr, struct Eipdebuginfo *info)
{
f010d231:	55                   	push   %ebp
f010d232:	89 e5                	mov    %esp,%ebp
f010d234:	83 ec 38             	sub    $0x38,%esp
	const struct Stab *stabs, *stab_end;
	const char *stabstr, *stabstr_end;
	int lfile, rfile, lfun, rfun, lline, rline;

	// Initialize *info
	info->eip_file = "<unknown>";
f010d237:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d23a:	c7 00 d4 6f 13 f0    	movl   $0xf0136fd4,(%eax)
	info->eip_line = 0;
f010d240:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d243:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
	info->eip_fn_name = "<unknown>";
f010d24a:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d24d:	c7 40 08 d4 6f 13 f0 	movl   $0xf0136fd4,0x8(%eax)
	info->eip_fn_namelen = 9;
f010d254:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d257:	c7 40 0c 09 00 00 00 	movl   $0x9,0xc(%eax)
	info->eip_fn_addr = addr;
f010d25e:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d261:	8b 55 08             	mov    0x8(%ebp),%edx
f010d264:	89 50 10             	mov    %edx,0x10(%eax)
	info->eip_fn_narg = 0;
f010d267:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d26a:	c7 40 14 00 00 00 00 	movl   $0x0,0x14(%eax)

	// Find the relevant set of stabs
	if ((uint32)addr >= USER_LIMIT) {
f010d271:	8b 45 08             	mov    0x8(%ebp),%eax
f010d274:	3d ff ff 7f ef       	cmp    $0xef7fffff,%eax
f010d279:	76 1e                	jbe    f010d299 <debuginfo_eip+0x68>
		stabs = __STAB_BEGIN__;
f010d27b:	c7 45 f4 70 ca 13 f0 	movl   $0xf013ca70,-0xc(%ebp)
		stab_end = __STAB_END__;
f010d282:	c7 45 f0 7c b1 17 f0 	movl   $0xf017b17c,-0x10(%ebp)
		stabstr = __STABSTR_BEGIN__;
f010d289:	c7 45 ec 7d b1 17 f0 	movl   $0xf017b17d,-0x14(%ebp)
		stabstr_end = __STABSTR_END__;
f010d290:	c7 45 e8 ba 7d 18 f0 	movl   $0xf0187dba,-0x18(%ebp)
f010d297:	eb 2a                	jmp    f010d2c3 <debuginfo_eip+0x92>
		// The user-application linker script, user/user.ld,
		// puts information about the application's stabs (equivalent
		// to __STAB_BEGIN__, __STAB_END__, __STABSTR_BEGIN__, and
		// __STABSTR_END__) in a structure located at virtual address
		// USTABDATA.
		const struct UserStabData *usd = (const struct UserStabData *) USTABDATA;
f010d299:	c7 45 e0 00 00 20 00 	movl   $0x200000,-0x20(%ebp)

		// Make sure this memory is valid.
		// Return -1 if it is not.  Hint: Call user_mem_check.
		// LAB 3: Your code here.

		stabs = usd->stabs;
f010d2a0:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010d2a3:	8b 00                	mov    (%eax),%eax
f010d2a5:	89 45 f4             	mov    %eax,-0xc(%ebp)
		stab_end = usd->stab_end;
f010d2a8:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010d2ab:	8b 40 04             	mov    0x4(%eax),%eax
f010d2ae:	89 45 f0             	mov    %eax,-0x10(%ebp)
		stabstr = usd->stabstr;
f010d2b1:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010d2b4:	8b 40 08             	mov    0x8(%eax),%eax
f010d2b7:	89 45 ec             	mov    %eax,-0x14(%ebp)
		stabstr_end = usd->stabstr_end;
f010d2ba:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010d2bd:	8b 40 0c             	mov    0xc(%eax),%eax
f010d2c0:	89 45 e8             	mov    %eax,-0x18(%ebp)
		// Make sure the STABS and string table memory is valid.
		// LAB 3: Your code here.
	}

	// String table validity checks
	if (stabstr_end <= stabstr || stabstr_end[-1] != 0)
f010d2c3:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010d2c6:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f010d2c9:	76 0a                	jbe    f010d2d5 <debuginfo_eip+0xa4>
f010d2cb:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010d2ce:	48                   	dec    %eax
f010d2cf:	8a 00                	mov    (%eax),%al
f010d2d1:	84 c0                	test   %al,%al
f010d2d3:	74 0a                	je     f010d2df <debuginfo_eip+0xae>
		return -1;
f010d2d5:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
f010d2da:	e9 01 02 00 00       	jmp    f010d4e0 <debuginfo_eip+0x2af>
	// 'eip'.  First, we find the basic source file containing 'eip'.
	// Then, we look in that source file for the function.  Then we look
	// for the line number.

	// Search the entire set of stabs for the source file (type N_SO).
	lfile = 0;
f010d2df:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
	rfile = (stab_end - stabs) - 1;
f010d2e6:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010d2e9:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010d2ec:	29 c2                	sub    %eax,%edx
f010d2ee:	89 d0                	mov    %edx,%eax
f010d2f0:	c1 f8 02             	sar    $0x2,%eax
f010d2f3:	89 c2                	mov    %eax,%edx
f010d2f5:	89 d0                	mov    %edx,%eax
f010d2f7:	c1 e0 02             	shl    $0x2,%eax
f010d2fa:	01 d0                	add    %edx,%eax
f010d2fc:	c1 e0 02             	shl    $0x2,%eax
f010d2ff:	01 d0                	add    %edx,%eax
f010d301:	c1 e0 02             	shl    $0x2,%eax
f010d304:	01 d0                	add    %edx,%eax
f010d306:	89 c1                	mov    %eax,%ecx
f010d308:	c1 e1 08             	shl    $0x8,%ecx
f010d30b:	01 c8                	add    %ecx,%eax
f010d30d:	89 c1                	mov    %eax,%ecx
f010d30f:	c1 e1 10             	shl    $0x10,%ecx
f010d312:	01 c8                	add    %ecx,%eax
f010d314:	01 c0                	add    %eax,%eax
f010d316:	01 d0                	add    %edx,%eax
f010d318:	48                   	dec    %eax
f010d319:	89 45 d4             	mov    %eax,-0x2c(%ebp)
	stab_binsearch(stabs, &lfile, &rfile, N_SO, addr);
f010d31c:	ff 75 08             	pushl  0x8(%ebp)
f010d31f:	6a 64                	push   $0x64
f010d321:	8d 45 d4             	lea    -0x2c(%ebp),%eax
f010d324:	50                   	push   %eax
f010d325:	8d 45 d8             	lea    -0x28(%ebp),%eax
f010d328:	50                   	push   %eax
f010d329:	ff 75 f4             	pushl  -0xc(%ebp)
f010d32c:	e8 b3 fd ff ff       	call   f010d0e4 <stab_binsearch>
f010d331:	83 c4 14             	add    $0x14,%esp
	if (lfile == 0)
f010d334:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010d337:	85 c0                	test   %eax,%eax
f010d339:	75 0a                	jne    f010d345 <debuginfo_eip+0x114>
		return -1;
f010d33b:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
f010d340:	e9 9b 01 00 00       	jmp    f010d4e0 <debuginfo_eip+0x2af>

	// Search within that file's stabs for the function definition
	// (N_FUN).
	lfun = lfile;
f010d345:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010d348:	89 45 d0             	mov    %eax,-0x30(%ebp)
	rfun = rfile;
f010d34b:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f010d34e:	89 45 cc             	mov    %eax,-0x34(%ebp)
	stab_binsearch(stabs, &lfun, &rfun, N_FUN, addr);
f010d351:	ff 75 08             	pushl  0x8(%ebp)
f010d354:	6a 24                	push   $0x24
f010d356:	8d 45 cc             	lea    -0x34(%ebp),%eax
f010d359:	50                   	push   %eax
f010d35a:	8d 45 d0             	lea    -0x30(%ebp),%eax
f010d35d:	50                   	push   %eax
f010d35e:	ff 75 f4             	pushl  -0xc(%ebp)
f010d361:	e8 7e fd ff ff       	call   f010d0e4 <stab_binsearch>
f010d366:	83 c4 14             	add    $0x14,%esp

	if (lfun <= rfun) {
f010d369:	8b 55 d0             	mov    -0x30(%ebp),%edx
f010d36c:	8b 45 cc             	mov    -0x34(%ebp),%eax
f010d36f:	39 c2                	cmp    %eax,%edx
f010d371:	0f 8f 86 00 00 00    	jg     f010d3fd <debuginfo_eip+0x1cc>
		// stabs[lfun] points to the function name
		// in the string table, but check bounds just in case.
		if (stabs[lfun].n_strx < stabstr_end - stabstr)
f010d377:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010d37a:	89 c2                	mov    %eax,%edx
f010d37c:	89 d0                	mov    %edx,%eax
f010d37e:	01 c0                	add    %eax,%eax
f010d380:	01 d0                	add    %edx,%eax
f010d382:	c1 e0 02             	shl    $0x2,%eax
f010d385:	89 c2                	mov    %eax,%edx
f010d387:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010d38a:	01 d0                	add    %edx,%eax
f010d38c:	8b 00                	mov    (%eax),%eax
f010d38e:	8b 4d e8             	mov    -0x18(%ebp),%ecx
f010d391:	8b 55 ec             	mov    -0x14(%ebp),%edx
f010d394:	29 d1                	sub    %edx,%ecx
f010d396:	89 ca                	mov    %ecx,%edx
f010d398:	39 d0                	cmp    %edx,%eax
f010d39a:	73 22                	jae    f010d3be <debuginfo_eip+0x18d>
			info->eip_fn_name = stabstr + stabs[lfun].n_strx;
f010d39c:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010d39f:	89 c2                	mov    %eax,%edx
f010d3a1:	89 d0                	mov    %edx,%eax
f010d3a3:	01 c0                	add    %eax,%eax
f010d3a5:	01 d0                	add    %edx,%eax
f010d3a7:	c1 e0 02             	shl    $0x2,%eax
f010d3aa:	89 c2                	mov    %eax,%edx
f010d3ac:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010d3af:	01 d0                	add    %edx,%eax
f010d3b1:	8b 10                	mov    (%eax),%edx
f010d3b3:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010d3b6:	01 c2                	add    %eax,%edx
f010d3b8:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d3bb:	89 50 08             	mov    %edx,0x8(%eax)
		info->eip_fn_addr = (uint32*) stabs[lfun].n_value;
f010d3be:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010d3c1:	89 c2                	mov    %eax,%edx
f010d3c3:	89 d0                	mov    %edx,%eax
f010d3c5:	01 c0                	add    %eax,%eax
f010d3c7:	01 d0                	add    %edx,%eax
f010d3c9:	c1 e0 02             	shl    $0x2,%eax
f010d3cc:	89 c2                	mov    %eax,%edx
f010d3ce:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010d3d1:	01 d0                	add    %edx,%eax
f010d3d3:	8b 50 08             	mov    0x8(%eax),%edx
f010d3d6:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d3d9:	89 50 10             	mov    %edx,0x10(%eax)
		addr = (uint32*)(addr - (info->eip_fn_addr));
f010d3dc:	8b 55 08             	mov    0x8(%ebp),%edx
f010d3df:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d3e2:	8b 40 10             	mov    0x10(%eax),%eax
f010d3e5:	29 c2                	sub    %eax,%edx
f010d3e7:	89 d0                	mov    %edx,%eax
f010d3e9:	c1 f8 02             	sar    $0x2,%eax
f010d3ec:	89 45 08             	mov    %eax,0x8(%ebp)
		// Search within the function definition for the line number.
		lline = lfun;
f010d3ef:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010d3f2:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		rline = rfun;
f010d3f5:	8b 45 cc             	mov    -0x34(%ebp),%eax
f010d3f8:	89 45 dc             	mov    %eax,-0x24(%ebp)
f010d3fb:	eb 15                	jmp    f010d412 <debuginfo_eip+0x1e1>
	} else {
		// Couldn't find function stab!  Maybe we're in an assembly
		// file.  Search the whole file for the line number.
		info->eip_fn_addr = addr;
f010d3fd:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d400:	8b 55 08             	mov    0x8(%ebp),%edx
f010d403:	89 50 10             	mov    %edx,0x10(%eax)
		lline = lfile;
f010d406:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010d409:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		rline = rfile;
f010d40c:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f010d40f:	89 45 dc             	mov    %eax,-0x24(%ebp)
	}
	// Ignore stuff after the colon.
	info->eip_fn_namelen = strfind(info->eip_fn_name, ':') - info->eip_fn_name;
f010d412:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d415:	8b 40 08             	mov    0x8(%eax),%eax
f010d418:	83 ec 08             	sub    $0x8,%esp
f010d41b:	6a 3a                	push   $0x3a
f010d41d:	50                   	push   %eax
f010d41e:	e8 ca 34 02 00       	call   f01308ed <strfind>
f010d423:	83 c4 10             	add    $0x10,%esp
f010d426:	89 c2                	mov    %eax,%edx
f010d428:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d42b:	8b 40 08             	mov    0x8(%eax),%eax
f010d42e:	29 c2                	sub    %eax,%edx
f010d430:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d433:	89 50 0c             	mov    %edx,0xc(%eax)
	// Search backwards from the line number for the relevant filename
	// stab.
	// We can't just use the "lfile" stab because inlined functions
	// can interpolate code from a different file!
	// Such included source files use the N_SOL stab type.
	while (lline >= lfile
f010d436:	eb 03                	jmp    f010d43b <debuginfo_eip+0x20a>
	       && stabs[lline].n_type != N_SOL
	       && (stabs[lline].n_type != N_SO || !stabs[lline].n_value))
		lline--;
f010d438:	ff 4d e4             	decl   -0x1c(%ebp)
	// Search backwards from the line number for the relevant filename
	// stab.
	// We can't just use the "lfile" stab because inlined functions
	// can interpolate code from a different file!
	// Such included source files use the N_SOL stab type.
	while (lline >= lfile
f010d43b:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010d43e:	39 45 e4             	cmp    %eax,-0x1c(%ebp)
f010d441:	7c 4e                	jl     f010d491 <debuginfo_eip+0x260>
	       && stabs[lline].n_type != N_SOL
f010d443:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010d446:	89 d0                	mov    %edx,%eax
f010d448:	01 c0                	add    %eax,%eax
f010d44a:	01 d0                	add    %edx,%eax
f010d44c:	c1 e0 02             	shl    $0x2,%eax
f010d44f:	89 c2                	mov    %eax,%edx
f010d451:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010d454:	01 d0                	add    %edx,%eax
f010d456:	8a 40 04             	mov    0x4(%eax),%al
f010d459:	3c 84                	cmp    $0x84,%al
f010d45b:	74 34                	je     f010d491 <debuginfo_eip+0x260>
	       && (stabs[lline].n_type != N_SO || !stabs[lline].n_value))
f010d45d:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010d460:	89 d0                	mov    %edx,%eax
f010d462:	01 c0                	add    %eax,%eax
f010d464:	01 d0                	add    %edx,%eax
f010d466:	c1 e0 02             	shl    $0x2,%eax
f010d469:	89 c2                	mov    %eax,%edx
f010d46b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010d46e:	01 d0                	add    %edx,%eax
f010d470:	8a 40 04             	mov    0x4(%eax),%al
f010d473:	3c 64                	cmp    $0x64,%al
f010d475:	75 c1                	jne    f010d438 <debuginfo_eip+0x207>
f010d477:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010d47a:	89 d0                	mov    %edx,%eax
f010d47c:	01 c0                	add    %eax,%eax
f010d47e:	01 d0                	add    %edx,%eax
f010d480:	c1 e0 02             	shl    $0x2,%eax
f010d483:	89 c2                	mov    %eax,%edx
f010d485:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010d488:	01 d0                	add    %edx,%eax
f010d48a:	8b 40 08             	mov    0x8(%eax),%eax
f010d48d:	85 c0                	test   %eax,%eax
f010d48f:	74 a7                	je     f010d438 <debuginfo_eip+0x207>
		lline--;
	if (lline >= lfile && stabs[lline].n_strx < stabstr_end - stabstr)
f010d491:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010d494:	39 45 e4             	cmp    %eax,-0x1c(%ebp)
f010d497:	7c 42                	jl     f010d4db <debuginfo_eip+0x2aa>
f010d499:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010d49c:	89 d0                	mov    %edx,%eax
f010d49e:	01 c0                	add    %eax,%eax
f010d4a0:	01 d0                	add    %edx,%eax
f010d4a2:	c1 e0 02             	shl    $0x2,%eax
f010d4a5:	89 c2                	mov    %eax,%edx
f010d4a7:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010d4aa:	01 d0                	add    %edx,%eax
f010d4ac:	8b 00                	mov    (%eax),%eax
f010d4ae:	8b 4d e8             	mov    -0x18(%ebp),%ecx
f010d4b1:	8b 55 ec             	mov    -0x14(%ebp),%edx
f010d4b4:	29 d1                	sub    %edx,%ecx
f010d4b6:	89 ca                	mov    %ecx,%edx
f010d4b8:	39 d0                	cmp    %edx,%eax
f010d4ba:	73 1f                	jae    f010d4db <debuginfo_eip+0x2aa>
		info->eip_file = stabstr + stabs[lline].n_strx;
f010d4bc:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010d4bf:	89 d0                	mov    %edx,%eax
f010d4c1:	01 c0                	add    %eax,%eax
f010d4c3:	01 d0                	add    %edx,%eax
f010d4c5:	c1 e0 02             	shl    $0x2,%eax
f010d4c8:	89 c2                	mov    %eax,%edx
f010d4ca:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010d4cd:	01 d0                	add    %edx,%eax
f010d4cf:	8b 10                	mov    (%eax),%edx
f010d4d1:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010d4d4:	01 c2                	add    %eax,%edx
f010d4d6:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d4d9:	89 10                	mov    %edx,(%eax)
	// Set eip_fn_narg to the number of arguments taken by the function,
	// or 0 if there was no containing function.
	// Your code here.


	return 0;
f010d4db:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010d4e0:	c9                   	leave  
f010d4e1:	c3                   	ret    

f010d4e2 <setPageReplacmentAlgorithmLRU>:
//===============================
// REPLACEMENT STRATEGIES
//===============================
//2020
void setPageReplacmentAlgorithmLRU(int LRU_TYPE)
{
f010d4e2:	55                   	push   %ebp
f010d4e3:	89 e5                	mov    %esp,%ebp
f010d4e5:	83 ec 08             	sub    $0x8,%esp
	assert(LRU_TYPE == PG_REP_LRU_TIME_APPROX || LRU_TYPE == PG_REP_LRU_LISTS_APPROX);
f010d4e8:	83 7d 08 01          	cmpl   $0x1,0x8(%ebp)
f010d4ec:	74 1c                	je     f010d50a <setPageReplacmentAlgorithmLRU+0x28>
f010d4ee:	83 7d 08 02          	cmpl   $0x2,0x8(%ebp)
f010d4f2:	74 16                	je     f010d50a <setPageReplacmentAlgorithmLRU+0x28>
f010d4f4:	68 e0 6f 13 f0       	push   $0xf0136fe0
f010d4f9:	68 2a 70 13 f0       	push   $0xf013702a
f010d4fe:	6a 18                	push   $0x18
f010d500:	68 3f 70 13 f0       	push   $0xf013703f
f010d505:	e8 9c 2c ff ff       	call   f01001a6 <_panic>
	_PageRepAlgoType = LRU_TYPE ;
f010d50a:	8b 45 08             	mov    0x8(%ebp),%eax
f010d50d:	a3 c4 0e 6c f0       	mov    %eax,0xf06c0ec4
}
f010d512:	90                   	nop
f010d513:	c9                   	leave  
f010d514:	c3                   	ret    

f010d515 <setPageReplacmentAlgorithmCLOCK>:
void setPageReplacmentAlgorithmCLOCK(){_PageRepAlgoType = PG_REP_CLOCK;}
f010d515:	55                   	push   %ebp
f010d516:	89 e5                	mov    %esp,%ebp
f010d518:	c7 05 c4 0e 6c f0 03 	movl   $0x3,0xf06c0ec4
f010d51f:	00 00 00 
f010d522:	90                   	nop
f010d523:	5d                   	pop    %ebp
f010d524:	c3                   	ret    

f010d525 <setPageReplacmentAlgorithmFIFO>:
void setPageReplacmentAlgorithmFIFO(){_PageRepAlgoType = PG_REP_FIFO;}
f010d525:	55                   	push   %ebp
f010d526:	89 e5                	mov    %esp,%ebp
f010d528:	c7 05 c4 0e 6c f0 04 	movl   $0x4,0xf06c0ec4
f010d52f:	00 00 00 
f010d532:	90                   	nop
f010d533:	5d                   	pop    %ebp
f010d534:	c3                   	ret    

f010d535 <setPageReplacmentAlgorithmModifiedCLOCK>:
void setPageReplacmentAlgorithmModifiedCLOCK(){_PageRepAlgoType = PG_REP_MODIFIEDCLOCK;}
f010d535:	55                   	push   %ebp
f010d536:	89 e5                	mov    %esp,%ebp
f010d538:	c7 05 c4 0e 6c f0 05 	movl   $0x5,0xf06c0ec4
f010d53f:	00 00 00 
f010d542:	90                   	nop
f010d543:	5d                   	pop    %ebp
f010d544:	c3                   	ret    

f010d545 <setPageReplacmentAlgorithmDynamicLocal>:
/*2018*/ void setPageReplacmentAlgorithmDynamicLocal(){_PageRepAlgoType = PG_REP_DYNAMIC_LOCAL;}
f010d545:	55                   	push   %ebp
f010d546:	89 e5                	mov    %esp,%ebp
f010d548:	c7 05 c4 0e 6c f0 07 	movl   $0x7,0xf06c0ec4
f010d54f:	00 00 00 
f010d552:	90                   	nop
f010d553:	5d                   	pop    %ebp
f010d554:	c3                   	ret    

f010d555 <setPageReplacmentAlgorithmNchanceCLOCK>:
/*2021*/ void setPageReplacmentAlgorithmNchanceCLOCK(int PageWSMaxSweeps){_PageRepAlgoType = PG_REP_NchanceCLOCK;  page_WS_max_sweeps = PageWSMaxSweeps;}
f010d555:	55                   	push   %ebp
f010d556:	89 e5                	mov    %esp,%ebp
f010d558:	c7 05 c4 0e 6c f0 06 	movl   $0x6,0xf06c0ec4
f010d55f:	00 00 00 
f010d562:	8b 45 08             	mov    0x8(%ebp),%eax
f010d565:	a3 ec 8a 65 f0       	mov    %eax,0xf0658aec
f010d56a:	90                   	nop
f010d56b:	5d                   	pop    %ebp
f010d56c:	c3                   	ret    

f010d56d <isPageReplacmentAlgorithmLRU>:

//2020
uint32 isPageReplacmentAlgorithmLRU(int LRU_TYPE){return _PageRepAlgoType == LRU_TYPE ? 1 : 0;}
f010d56d:	55                   	push   %ebp
f010d56e:	89 e5                	mov    %esp,%ebp
f010d570:	8b 15 c4 0e 6c f0    	mov    0xf06c0ec4,%edx
f010d576:	8b 45 08             	mov    0x8(%ebp),%eax
f010d579:	39 c2                	cmp    %eax,%edx
f010d57b:	0f 94 c0             	sete   %al
f010d57e:	0f b6 c0             	movzbl %al,%eax
f010d581:	5d                   	pop    %ebp
f010d582:	c3                   	ret    

f010d583 <isPageReplacmentAlgorithmCLOCK>:
uint32 isPageReplacmentAlgorithmCLOCK(){if(_PageRepAlgoType == PG_REP_CLOCK) return 1; return 0;}
f010d583:	55                   	push   %ebp
f010d584:	89 e5                	mov    %esp,%ebp
f010d586:	a1 c4 0e 6c f0       	mov    0xf06c0ec4,%eax
f010d58b:	83 f8 03             	cmp    $0x3,%eax
f010d58e:	75 07                	jne    f010d597 <isPageReplacmentAlgorithmCLOCK+0x14>
f010d590:	b8 01 00 00 00       	mov    $0x1,%eax
f010d595:	eb 05                	jmp    f010d59c <isPageReplacmentAlgorithmCLOCK+0x19>
f010d597:	b8 00 00 00 00       	mov    $0x0,%eax
f010d59c:	5d                   	pop    %ebp
f010d59d:	c3                   	ret    

f010d59e <isPageReplacmentAlgorithmFIFO>:
uint32 isPageReplacmentAlgorithmFIFO(){if(_PageRepAlgoType == PG_REP_FIFO) return 1; return 0;}
f010d59e:	55                   	push   %ebp
f010d59f:	89 e5                	mov    %esp,%ebp
f010d5a1:	a1 c4 0e 6c f0       	mov    0xf06c0ec4,%eax
f010d5a6:	83 f8 04             	cmp    $0x4,%eax
f010d5a9:	75 07                	jne    f010d5b2 <isPageReplacmentAlgorithmFIFO+0x14>
f010d5ab:	b8 01 00 00 00       	mov    $0x1,%eax
f010d5b0:	eb 05                	jmp    f010d5b7 <isPageReplacmentAlgorithmFIFO+0x19>
f010d5b2:	b8 00 00 00 00       	mov    $0x0,%eax
f010d5b7:	5d                   	pop    %ebp
f010d5b8:	c3                   	ret    

f010d5b9 <isPageReplacmentAlgorithmModifiedCLOCK>:
uint32 isPageReplacmentAlgorithmModifiedCLOCK(){if(_PageRepAlgoType == PG_REP_MODIFIEDCLOCK) return 1; return 0;}
f010d5b9:	55                   	push   %ebp
f010d5ba:	89 e5                	mov    %esp,%ebp
f010d5bc:	a1 c4 0e 6c f0       	mov    0xf06c0ec4,%eax
f010d5c1:	83 f8 05             	cmp    $0x5,%eax
f010d5c4:	75 07                	jne    f010d5cd <isPageReplacmentAlgorithmModifiedCLOCK+0x14>
f010d5c6:	b8 01 00 00 00       	mov    $0x1,%eax
f010d5cb:	eb 05                	jmp    f010d5d2 <isPageReplacmentAlgorithmModifiedCLOCK+0x19>
f010d5cd:	b8 00 00 00 00       	mov    $0x0,%eax
f010d5d2:	5d                   	pop    %ebp
f010d5d3:	c3                   	ret    

f010d5d4 <isPageReplacmentAlgorithmDynamicLocal>:
/*2018*/ uint32 isPageReplacmentAlgorithmDynamicLocal(){if(_PageRepAlgoType == PG_REP_DYNAMIC_LOCAL) return 1; return 0;}
f010d5d4:	55                   	push   %ebp
f010d5d5:	89 e5                	mov    %esp,%ebp
f010d5d7:	a1 c4 0e 6c f0       	mov    0xf06c0ec4,%eax
f010d5dc:	83 f8 07             	cmp    $0x7,%eax
f010d5df:	75 07                	jne    f010d5e8 <isPageReplacmentAlgorithmDynamicLocal+0x14>
f010d5e1:	b8 01 00 00 00       	mov    $0x1,%eax
f010d5e6:	eb 05                	jmp    f010d5ed <isPageReplacmentAlgorithmDynamicLocal+0x19>
f010d5e8:	b8 00 00 00 00       	mov    $0x0,%eax
f010d5ed:	5d                   	pop    %ebp
f010d5ee:	c3                   	ret    

f010d5ef <isPageReplacmentAlgorithmNchanceCLOCK>:
/*2021*/ uint32 isPageReplacmentAlgorithmNchanceCLOCK(){if(_PageRepAlgoType == PG_REP_NchanceCLOCK) return 1; return 0;}
f010d5ef:	55                   	push   %ebp
f010d5f0:	89 e5                	mov    %esp,%ebp
f010d5f2:	a1 c4 0e 6c f0       	mov    0xf06c0ec4,%eax
f010d5f7:	83 f8 06             	cmp    $0x6,%eax
f010d5fa:	75 07                	jne    f010d603 <isPageReplacmentAlgorithmNchanceCLOCK+0x14>
f010d5fc:	b8 01 00 00 00       	mov    $0x1,%eax
f010d601:	eb 05                	jmp    f010d608 <isPageReplacmentAlgorithmNchanceCLOCK+0x19>
f010d603:	b8 00 00 00 00       	mov    $0x0,%eax
f010d608:	5d                   	pop    %ebp
f010d609:	c3                   	ret    

f010d60a <enableModifiedBuffer>:

//===============================
// PAGE BUFFERING
//===============================
void enableModifiedBuffer(uint32 enableIt){_EnableModifiedBuffer = enableIt;}
f010d60a:	55                   	push   %ebp
f010d60b:	89 e5                	mov    %esp,%ebp
f010d60d:	8b 45 08             	mov    0x8(%ebp),%eax
f010d610:	a3 8c 0e 6c f0       	mov    %eax,0xf06c0e8c
f010d615:	90                   	nop
f010d616:	5d                   	pop    %ebp
f010d617:	c3                   	ret    

f010d618 <isModifiedBufferEnabled>:
uint8 isModifiedBufferEnabled(){  return _EnableModifiedBuffer ; }
f010d618:	55                   	push   %ebp
f010d619:	89 e5                	mov    %esp,%ebp
f010d61b:	a1 8c 0e 6c f0       	mov    0xf06c0e8c,%eax
f010d620:	5d                   	pop    %ebp
f010d621:	c3                   	ret    

f010d622 <enableBuffering>:

void enableBuffering(uint32 enableIt){_EnableBuffering = enableIt;}
f010d622:	55                   	push   %ebp
f010d623:	89 e5                	mov    %esp,%ebp
f010d625:	8b 45 08             	mov    0x8(%ebp),%eax
f010d628:	a3 cc 0e 6c f0       	mov    %eax,0xf06c0ecc
f010d62d:	90                   	nop
f010d62e:	5d                   	pop    %ebp
f010d62f:	c3                   	ret    

f010d630 <isBufferingEnabled>:
uint8 isBufferingEnabled(){  return _EnableBuffering ; }
f010d630:	55                   	push   %ebp
f010d631:	89 e5                	mov    %esp,%ebp
f010d633:	a1 cc 0e 6c f0       	mov    0xf06c0ecc,%eax
f010d638:	5d                   	pop    %ebp
f010d639:	c3                   	ret    

f010d63a <setModifiedBufferLength>:

void setModifiedBufferLength(uint32 length) { _ModifiedBufferLength = length;}
f010d63a:	55                   	push   %ebp
f010d63b:	89 e5                	mov    %esp,%ebp
f010d63d:	8b 45 08             	mov    0x8(%ebp),%eax
f010d640:	a3 ec 0e 6c f0       	mov    %eax,0xf06c0eec
f010d645:	90                   	nop
f010d646:	5d                   	pop    %ebp
f010d647:	c3                   	ret    

f010d648 <getModifiedBufferLength>:
uint32 getModifiedBufferLength() { return _ModifiedBufferLength;}
f010d648:	55                   	push   %ebp
f010d649:	89 e5                	mov    %esp,%ebp
f010d64b:	a1 ec 0e 6c f0       	mov    0xf06c0eec,%eax
f010d650:	5d                   	pop    %ebp
f010d651:	c3                   	ret    

f010d652 <table_fault_handler>:
// FAULT HANDLERS
//===============================

//Handle the table fault
void table_fault_handler(struct Env * curenv, uint32 fault_va)
{
f010d652:	55                   	push   %ebp
f010d653:	89 e5                	mov    %esp,%ebp
f010d655:	83 ec 18             	sub    $0x18,%esp
	{
		ptr_table = create_page_table(curenv->env_page_directory, (uint32)fault_va);
	}
#else
	{
		__static_cpt(curenv->env_page_directory, (uint32)fault_va, &ptr_table);
f010d658:	8b 45 08             	mov    0x8(%ebp),%eax
f010d65b:	8b 40 5c             	mov    0x5c(%eax),%eax
f010d65e:	83 ec 04             	sub    $0x4,%esp
f010d661:	8d 55 f4             	lea    -0xc(%ebp),%edx
f010d664:	52                   	push   %edx
f010d665:	ff 75 0c             	pushl  0xc(%ebp)
f010d668:	50                   	push   %eax
f010d669:	e8 21 94 ff ff       	call   f0106a8f <__static_cpt>
f010d66e:	83 c4 10             	add    $0x10,%esp
	}
#endif
}
f010d671:	90                   	nop
f010d672:	c9                   	leave  
f010d673:	c3                   	ret    

f010d674 <page_fault_handler>:

//Handle the page fault

void page_fault_handler(struct Env * curenv, uint32 fault_va)
{
f010d674:	55                   	push   %ebp
f010d675:	89 e5                	mov    %esp,%ebp
f010d677:	83 ec 08             	sub    $0x8,%esp
	//TODO: [PROJECT MS3] [FAULT HANDLER] page_fault_handler
	// Write your code here, remove the panic and write your code
	panic("page_fault_handler() is not implemented yet...!!");
f010d67a:	83 ec 04             	sub    $0x4,%esp
f010d67d:	68 5c 70 13 f0       	push   $0xf013705c
f010d682:	6a 50                	push   $0x50
f010d684:	68 3f 70 13 f0       	push   $0xf013703f
f010d689:	e8 18 2b ff ff       	call   f01001a6 <_panic>

f010d68e <__page_fault_handler_with_buffering>:

	//refer to the project presentation and documentation for details
}
void __page_fault_handler_with_buffering(struct Env * curenv, uint32 fault_va)
{
f010d68e:	55                   	push   %ebp
f010d68f:	89 e5                	mov    %esp,%ebp
f010d691:	83 ec 08             	sub    $0x8,%esp
	// Write your code here, remove the panic and write your code
	panic("__page_fault_handler_with_buffering() is not implemented yet...!!");
f010d694:	83 ec 04             	sub    $0x4,%esp
f010d697:	68 90 70 13 f0       	push   $0xf0137090
f010d69c:	6a 57                	push   $0x57
f010d69e:	68 3f 70 13 f0       	push   $0xf013703f
f010d6a3:	e8 fe 2a ff ff       	call   f01001a6 <_panic>

f010d6a8 <create_semaphores_array>:
// [1] Create "semaphores" array:
//===============================
//Dynamically allocate the "semaphores" array
//initialize the "semaphores" array by 0's and empty = 1
void create_semaphores_array(uint32 numOfSemaphores)
{
f010d6a8:	55                   	push   %ebp
f010d6a9:	89 e5                	mov    %esp,%ebp
f010d6ab:	83 ec 18             	sub    $0x18,%esp
	if (semaphores == NULL)
	{
		panic("Kernel runs out of memory\nCan't create the array of semaphores.");
	}
#endif
	for (int i = 0; i < MAX_SEMAPHORES; ++i)
f010d6ae:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f010d6b5:	e9 aa 00 00 00       	jmp    f010d764 <create_semaphores_array+0xbc>
	{
		memset(&(semaphores[i]), 0, sizeof(struct Semaphore));
f010d6ba:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010d6bd:	89 d0                	mov    %edx,%eax
f010d6bf:	c1 e0 02             	shl    $0x2,%eax
f010d6c2:	01 d0                	add    %edx,%eax
f010d6c4:	01 c0                	add    %eax,%eax
f010d6c6:	01 d0                	add    %edx,%eax
f010d6c8:	01 c0                	add    %eax,%eax
f010d6ca:	01 d0                	add    %edx,%eax
f010d6cc:	c1 e0 02             	shl    $0x2,%eax
f010d6cf:	05 60 ea 6b f0       	add    $0xf06bea60,%eax
f010d6d4:	83 ec 04             	sub    $0x4,%esp
f010d6d7:	6a 5c                	push   $0x5c
f010d6d9:	6a 00                	push   $0x0
f010d6db:	50                   	push   %eax
f010d6dc:	e8 38 32 02 00       	call   f0130919 <memset>
f010d6e1:	83 c4 10             	add    $0x10,%esp
		semaphores[i].empty = 1;
f010d6e4:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010d6e7:	89 d0                	mov    %edx,%eax
f010d6e9:	c1 e0 02             	shl    $0x2,%eax
f010d6ec:	01 d0                	add    %edx,%eax
f010d6ee:	01 c0                	add    %eax,%eax
f010d6f0:	01 d0                	add    %edx,%eax
f010d6f2:	01 c0                	add    %eax,%eax
f010d6f4:	01 d0                	add    %edx,%eax
f010d6f6:	c1 e0 02             	shl    $0x2,%eax
f010d6f9:	05 b8 ea 6b f0       	add    $0xf06beab8,%eax
f010d6fe:	c6 00 01             	movb   $0x1,(%eax)
		LIST_INIT(&(semaphores[i].env_queue));
f010d701:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010d704:	89 d0                	mov    %edx,%eax
f010d706:	c1 e0 02             	shl    $0x2,%eax
f010d709:	01 d0                	add    %edx,%eax
f010d70b:	01 c0                	add    %eax,%eax
f010d70d:	01 d0                	add    %edx,%eax
f010d70f:	01 c0                	add    %eax,%eax
f010d711:	01 d0                	add    %edx,%eax
f010d713:	c1 e0 02             	shl    $0x2,%eax
f010d716:	05 a4 ea 6b f0       	add    $0xf06beaa4,%eax
f010d71b:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f010d721:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010d724:	89 d0                	mov    %edx,%eax
f010d726:	c1 e0 02             	shl    $0x2,%eax
f010d729:	01 d0                	add    %edx,%eax
f010d72b:	01 c0                	add    %eax,%eax
f010d72d:	01 d0                	add    %edx,%eax
f010d72f:	01 c0                	add    %eax,%eax
f010d731:	01 d0                	add    %edx,%eax
f010d733:	c1 e0 02             	shl    $0x2,%eax
f010d736:	05 a8 ea 6b f0       	add    $0xf06beaa8,%eax
f010d73b:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f010d741:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010d744:	89 d0                	mov    %edx,%eax
f010d746:	c1 e0 02             	shl    $0x2,%eax
f010d749:	01 d0                	add    %edx,%eax
f010d74b:	01 c0                	add    %eax,%eax
f010d74d:	01 d0                	add    %edx,%eax
f010d74f:	01 c0                	add    %eax,%eax
f010d751:	01 d0                	add    %edx,%eax
f010d753:	c1 e0 02             	shl    $0x2,%eax
f010d756:	05 b0 ea 6b f0       	add    $0xf06beab0,%eax
f010d75b:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	if (semaphores == NULL)
	{
		panic("Kernel runs out of memory\nCan't create the array of semaphores.");
	}
#endif
	for (int i = 0; i < MAX_SEMAPHORES; ++i)
f010d761:	ff 45 f4             	incl   -0xc(%ebp)
f010d764:	83 7d f4 63          	cmpl   $0x63,-0xc(%ebp)
f010d768:	0f 8e 4c ff ff ff    	jle    f010d6ba <create_semaphores_array+0x12>
		memset(&(semaphores[i]), 0, sizeof(struct Semaphore));
		semaphores[i].empty = 1;
		LIST_INIT(&(semaphores[i].env_queue));
	}

}
f010d76e:	90                   	nop
f010d76f:	c9                   	leave  
f010d770:	c3                   	ret    

f010d771 <allocate_semaphore_object>:
//	a) if succeed:
//		1. allocatedSemaphore (pointer to struct Semaphore) passed by reference
//		2. SempahoreObjectID (its index in the array) as a return parameter
//	b) E_NO_SEMAPHORE if the the array of semaphores is full (i.e. reaches "MAX_SEMAPHORES")
int allocate_semaphore_object(struct Semaphore **allocatedObject)
{
f010d771:	55                   	push   %ebp
f010d772:	89 e5                	mov    %esp,%ebp
f010d774:	83 ec 18             	sub    $0x18,%esp
	int32 semaphoreObjectID = -1 ;
f010d777:	c7 45 f4 ff ff ff ff 	movl   $0xffffffff,-0xc(%ebp)
	for (int i = 0; i < MAX_SEMAPHORES; ++i)
f010d77e:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f010d785:	eb 2b                	jmp    f010d7b2 <allocate_semaphore_object+0x41>
	{
		if (semaphores[i].empty)
f010d787:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010d78a:	89 d0                	mov    %edx,%eax
f010d78c:	c1 e0 02             	shl    $0x2,%eax
f010d78f:	01 d0                	add    %edx,%eax
f010d791:	01 c0                	add    %eax,%eax
f010d793:	01 d0                	add    %edx,%eax
f010d795:	01 c0                	add    %eax,%eax
f010d797:	01 d0                	add    %edx,%eax
f010d799:	c1 e0 02             	shl    $0x2,%eax
f010d79c:	05 b8 ea 6b f0       	add    $0xf06beab8,%eax
f010d7a1:	8a 00                	mov    (%eax),%al
f010d7a3:	84 c0                	test   %al,%al
f010d7a5:	74 08                	je     f010d7af <allocate_semaphore_object+0x3e>
		{
			semaphoreObjectID = i;
f010d7a7:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010d7aa:	89 45 f4             	mov    %eax,-0xc(%ebp)
			break;
f010d7ad:	eb 09                	jmp    f010d7b8 <allocate_semaphore_object+0x47>
//		2. SempahoreObjectID (its index in the array) as a return parameter
//	b) E_NO_SEMAPHORE if the the array of semaphores is full (i.e. reaches "MAX_SEMAPHORES")
int allocate_semaphore_object(struct Semaphore **allocatedObject)
{
	int32 semaphoreObjectID = -1 ;
	for (int i = 0; i < MAX_SEMAPHORES; ++i)
f010d7af:	ff 45 f0             	incl   -0x10(%ebp)
f010d7b2:	83 7d f0 63          	cmpl   $0x63,-0x10(%ebp)
f010d7b6:	7e cf                	jle    f010d787 <allocate_semaphore_object+0x16>
			semaphoreObjectID = i;
			break;
		}
	}

	if (semaphoreObjectID == -1)
f010d7b8:	83 7d f4 ff          	cmpl   $0xffffffff,-0xc(%ebp)
f010d7bc:	75 14                	jne    f010d7d2 <allocate_semaphore_object+0x61>
				MAX_SEMAPHORES *= 2;
			}
		}
		#else
		{
			panic("Attempt to dynamically allocate space inside kernel while kheap is disabled .. ");
f010d7be:	83 ec 04             	sub    $0x4,%esp
f010d7c1:	68 d4 70 13 f0       	push   $0xf01370d4
f010d7c6:	6a 53                	push   $0x53
f010d7c8:	68 24 71 13 f0       	push   $0xf0137124
f010d7cd:	e8 d4 29 ff ff       	call   f01001a6 <_panic>
			return E_NO_SEMAPHORE;
		}
		#endif
	}

	*allocatedObject = &(semaphores[semaphoreObjectID]);
f010d7d2:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010d7d5:	89 d0                	mov    %edx,%eax
f010d7d7:	c1 e0 02             	shl    $0x2,%eax
f010d7da:	01 d0                	add    %edx,%eax
f010d7dc:	01 c0                	add    %eax,%eax
f010d7de:	01 d0                	add    %edx,%eax
f010d7e0:	01 c0                	add    %eax,%eax
f010d7e2:	01 d0                	add    %edx,%eax
f010d7e4:	c1 e0 02             	shl    $0x2,%eax
f010d7e7:	8d 90 60 ea 6b f0    	lea    -0xf9415a0(%eax),%edx
f010d7ed:	8b 45 08             	mov    0x8(%ebp),%eax
f010d7f0:	89 10                	mov    %edx,(%eax)
	semaphores[semaphoreObjectID].empty = 0;
f010d7f2:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010d7f5:	89 d0                	mov    %edx,%eax
f010d7f7:	c1 e0 02             	shl    $0x2,%eax
f010d7fa:	01 d0                	add    %edx,%eax
f010d7fc:	01 c0                	add    %eax,%eax
f010d7fe:	01 d0                	add    %edx,%eax
f010d800:	01 c0                	add    %eax,%eax
f010d802:	01 d0                	add    %edx,%eax
f010d804:	c1 e0 02             	shl    $0x2,%eax
f010d807:	05 b8 ea 6b f0       	add    $0xf06beab8,%eax
f010d80c:	c6 00 00             	movb   $0x0,(%eax)

	return semaphoreObjectID;
f010d80f:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f010d812:	c9                   	leave  
f010d813:	c3                   	ret    

f010d814 <get_semaphore_object_ID>:
//Search for the given semaphore object in the "semaphores" array
//Return:
//	a) if found: SemaphoreObjectID (index of the semaphore object in the array)
//	b) else: E_SEMAPHORE_NOT_EXISTS
int get_semaphore_object_ID(int32 ownerID, char* name)
{
f010d814:	55                   	push   %ebp
f010d815:	89 e5                	mov    %esp,%ebp
f010d817:	83 ec 18             	sub    $0x18,%esp
	int i=0;
f010d81a:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	for(; i < MAX_SEMAPHORES; ++i)
f010d821:	eb 7a                	jmp    f010d89d <get_semaphore_object_ID+0x89>
	{
		if (semaphores[i].empty)
f010d823:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010d826:	89 d0                	mov    %edx,%eax
f010d828:	c1 e0 02             	shl    $0x2,%eax
f010d82b:	01 d0                	add    %edx,%eax
f010d82d:	01 c0                	add    %eax,%eax
f010d82f:	01 d0                	add    %edx,%eax
f010d831:	01 c0                	add    %eax,%eax
f010d833:	01 d0                	add    %edx,%eax
f010d835:	c1 e0 02             	shl    $0x2,%eax
f010d838:	05 b8 ea 6b f0       	add    $0xf06beab8,%eax
f010d83d:	8a 00                	mov    (%eax),%al
f010d83f:	84 c0                	test   %al,%al
f010d841:	75 56                	jne    f010d899 <get_semaphore_object_ID+0x85>
			continue;

		if(semaphores[i].ownerID == ownerID && strcmp(name, semaphores[i].name)==0)
f010d843:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010d846:	89 d0                	mov    %edx,%eax
f010d848:	c1 e0 02             	shl    $0x2,%eax
f010d84b:	01 d0                	add    %edx,%eax
f010d84d:	01 c0                	add    %eax,%eax
f010d84f:	01 d0                	add    %edx,%eax
f010d851:	01 c0                	add    %eax,%eax
f010d853:	01 d0                	add    %edx,%eax
f010d855:	c1 e0 02             	shl    $0x2,%eax
f010d858:	05 60 ea 6b f0       	add    $0xf06bea60,%eax
f010d85d:	8b 00                	mov    (%eax),%eax
f010d85f:	3b 45 08             	cmp    0x8(%ebp),%eax
f010d862:	75 36                	jne    f010d89a <get_semaphore_object_ID+0x86>
f010d864:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010d867:	89 d0                	mov    %edx,%eax
f010d869:	c1 e0 02             	shl    $0x2,%eax
f010d86c:	01 d0                	add    %edx,%eax
f010d86e:	01 c0                	add    %eax,%eax
f010d870:	01 d0                	add    %edx,%eax
f010d872:	01 c0                	add    %eax,%eax
f010d874:	01 d0                	add    %edx,%eax
f010d876:	c1 e0 02             	shl    $0x2,%eax
f010d879:	05 60 ea 6b f0       	add    $0xf06bea60,%eax
f010d87e:	83 c0 04             	add    $0x4,%eax
f010d881:	83 ec 08             	sub    $0x8,%esp
f010d884:	50                   	push   %eax
f010d885:	ff 75 0c             	pushl  0xc(%ebp)
f010d888:	e8 aa 2f 02 00       	call   f0130837 <strcmp>
f010d88d:	83 c4 10             	add    $0x10,%esp
f010d890:	85 c0                	test   %eax,%eax
f010d892:	75 06                	jne    f010d89a <get_semaphore_object_ID+0x86>
		{
			return i;
f010d894:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010d897:	eb 0f                	jmp    f010d8a8 <get_semaphore_object_ID+0x94>
{
	int i=0;
	for(; i < MAX_SEMAPHORES; ++i)
	{
		if (semaphores[i].empty)
			continue;
f010d899:	90                   	nop
//	a) if found: SemaphoreObjectID (index of the semaphore object in the array)
//	b) else: E_SEMAPHORE_NOT_EXISTS
int get_semaphore_object_ID(int32 ownerID, char* name)
{
	int i=0;
	for(; i < MAX_SEMAPHORES; ++i)
f010d89a:	ff 45 f4             	incl   -0xc(%ebp)
f010d89d:	83 7d f4 63          	cmpl   $0x63,-0xc(%ebp)
f010d8a1:	7e 80                	jle    f010d823 <get_semaphore_object_ID+0xf>
		if(semaphores[i].ownerID == ownerID && strcmp(name, semaphores[i].name)==0)
		{
			return i;
		}
	}
	return E_SEMAPHORE_NOT_EXISTS;
f010d8a3:	b8 f3 ff ff ff       	mov    $0xfffffff3,%eax
}
f010d8a8:	c9                   	leave  
f010d8a9:	c3                   	ret    

f010d8aa <free_semaphore_object>:
//delete the semaphore with the given ID from the "semaphores" array
//Return:
//	a) 0 if succeed
//	b) E_SEMAPHORE_NOT_EXISTS if the semaphore is not exists
int free_semaphore_object(uint32 semaphoreObjectID)
{
f010d8aa:	55                   	push   %ebp
f010d8ab:	89 e5                	mov    %esp,%ebp
f010d8ad:	83 ec 08             	sub    $0x8,%esp
	if (semaphoreObjectID >= MAX_SEMAPHORES)
f010d8b0:	83 7d 08 63          	cmpl   $0x63,0x8(%ebp)
f010d8b4:	76 0a                	jbe    f010d8c0 <free_semaphore_object+0x16>
		return E_SEMAPHORE_NOT_EXISTS;
f010d8b6:	b8 f3 ff ff ff       	mov    $0xfffffff3,%eax
f010d8bb:	e9 ac 00 00 00       	jmp    f010d96c <free_semaphore_object+0xc2>

	memset(&(semaphores[semaphoreObjectID]), 0, sizeof(struct Semaphore));
f010d8c0:	8b 55 08             	mov    0x8(%ebp),%edx
f010d8c3:	89 d0                	mov    %edx,%eax
f010d8c5:	c1 e0 02             	shl    $0x2,%eax
f010d8c8:	01 d0                	add    %edx,%eax
f010d8ca:	01 c0                	add    %eax,%eax
f010d8cc:	01 d0                	add    %edx,%eax
f010d8ce:	01 c0                	add    %eax,%eax
f010d8d0:	01 d0                	add    %edx,%eax
f010d8d2:	c1 e0 02             	shl    $0x2,%eax
f010d8d5:	05 60 ea 6b f0       	add    $0xf06bea60,%eax
f010d8da:	83 ec 04             	sub    $0x4,%esp
f010d8dd:	6a 5c                	push   $0x5c
f010d8df:	6a 00                	push   $0x0
f010d8e1:	50                   	push   %eax
f010d8e2:	e8 32 30 02 00       	call   f0130919 <memset>
f010d8e7:	83 c4 10             	add    $0x10,%esp
	semaphores[semaphoreObjectID].empty = 1;
f010d8ea:	8b 55 08             	mov    0x8(%ebp),%edx
f010d8ed:	89 d0                	mov    %edx,%eax
f010d8ef:	c1 e0 02             	shl    $0x2,%eax
f010d8f2:	01 d0                	add    %edx,%eax
f010d8f4:	01 c0                	add    %eax,%eax
f010d8f6:	01 d0                	add    %edx,%eax
f010d8f8:	01 c0                	add    %eax,%eax
f010d8fa:	01 d0                	add    %edx,%eax
f010d8fc:	c1 e0 02             	shl    $0x2,%eax
f010d8ff:	05 b8 ea 6b f0       	add    $0xf06beab8,%eax
f010d904:	c6 00 01             	movb   $0x1,(%eax)
	LIST_INIT(&(semaphores[semaphoreObjectID].env_queue));
f010d907:	8b 55 08             	mov    0x8(%ebp),%edx
f010d90a:	89 d0                	mov    %edx,%eax
f010d90c:	c1 e0 02             	shl    $0x2,%eax
f010d90f:	01 d0                	add    %edx,%eax
f010d911:	01 c0                	add    %eax,%eax
f010d913:	01 d0                	add    %edx,%eax
f010d915:	01 c0                	add    %eax,%eax
f010d917:	01 d0                	add    %edx,%eax
f010d919:	c1 e0 02             	shl    $0x2,%eax
f010d91c:	05 a4 ea 6b f0       	add    $0xf06beaa4,%eax
f010d921:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f010d927:	8b 55 08             	mov    0x8(%ebp),%edx
f010d92a:	89 d0                	mov    %edx,%eax
f010d92c:	c1 e0 02             	shl    $0x2,%eax
f010d92f:	01 d0                	add    %edx,%eax
f010d931:	01 c0                	add    %eax,%eax
f010d933:	01 d0                	add    %edx,%eax
f010d935:	01 c0                	add    %eax,%eax
f010d937:	01 d0                	add    %edx,%eax
f010d939:	c1 e0 02             	shl    $0x2,%eax
f010d93c:	05 a8 ea 6b f0       	add    $0xf06beaa8,%eax
f010d941:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f010d947:	8b 55 08             	mov    0x8(%ebp),%edx
f010d94a:	89 d0                	mov    %edx,%eax
f010d94c:	c1 e0 02             	shl    $0x2,%eax
f010d94f:	01 d0                	add    %edx,%eax
f010d951:	01 c0                	add    %eax,%eax
f010d953:	01 d0                	add    %edx,%eax
f010d955:	01 c0                	add    %eax,%eax
f010d957:	01 d0                	add    %edx,%eax
f010d959:	c1 e0 02             	shl    $0x2,%eax
f010d95c:	05 b0 ea 6b f0       	add    $0xf06beab0,%eax
f010d961:	c7 00 00 00 00 00    	movl   $0x0,(%eax)

	return 0;
f010d967:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010d96c:	c9                   	leave  
f010d96d:	c3                   	ret    

f010d96e <createSemaphore>:

//======================
// [1] Create Semaphore:
//======================
int createSemaphore(int32 ownerEnvID, char* semaphoreName, uint32 initialValue)
{
f010d96e:	55                   	push   %ebp
f010d96f:	89 e5                	mov    %esp,%ebp
f010d971:	83 ec 08             	sub    $0x8,%esp
	// your code is here, remove the panic and write your code
	panic("createSemaphore() is not implemented yet...!!");
f010d974:	83 ec 04             	sub    $0x4,%esp
f010d977:	68 44 71 13 f0       	push   $0xf0137144
f010d97c:	68 94 00 00 00       	push   $0x94
f010d981:	68 24 71 13 f0       	push   $0xf0137124
f010d986:	e8 1b 28 ff ff       	call   f01001a6 <_panic>

f010d98b <waitSemaphore>:

//============
// [2] Wait():
//============
void waitSemaphore(int32 ownerEnvID, char* semaphoreName)
{
f010d98b:	55                   	push   %ebp
f010d98c:	89 e5                	mov    %esp,%ebp
f010d98e:	83 ec 08             	sub    $0x8,%esp
	// your code is here, remove the panic and write your code
	panic("waitSemaphore() is not implemented yet...!!");
f010d991:	83 ec 04             	sub    $0x4,%esp
f010d994:	68 74 71 13 f0       	push   $0xf0137174
f010d999:	68 a6 00 00 00       	push   $0xa6
f010d99e:	68 24 71 13 f0       	push   $0xf0137124
f010d9a3:	e8 fe 27 ff ff       	call   f01001a6 <_panic>

f010d9a8 <signalSemaphore>:

//==============
// [3] Signal():
//==============
void signalSemaphore(int ownerEnvID, char* semaphoreName)
{
f010d9a8:	55                   	push   %ebp
f010d9a9:	89 e5                	mov    %esp,%ebp
f010d9ab:	83 ec 08             	sub    $0x8,%esp
	// your code is here, remove the panic and write your code
	panic("signalSemaphore() is not implemented yet...!!");
f010d9ae:	83 ec 04             	sub    $0x4,%esp
f010d9b1:	68 a0 71 13 f0       	push   $0xf01371a0
f010d9b6:	68 ba 00 00 00       	push   $0xba
f010d9bb:	68 24 71 13 f0       	push   $0xf0137124
f010d9c0:	e8 e1 27 ff ff       	call   f01001a6 <_panic>

f010d9c5 <test_initialize_MemBlocksList>:

#define Mega  (1024*1024)
#define kilo (1024)

void test_initialize_MemBlocksList()
{
f010d9c5:	55                   	push   %ebp
f010d9c6:	89 e5                	mov    %esp,%ebp
f010d9c8:	83 ec 18             	sub    $0x18,%esp
	uint32 numOfBlocks = 5;
f010d9cb:	c7 45 ec 05 00 00 00 	movl   $0x5,-0x14(%ebp)
	initialize_MemBlocksList(numOfBlocks);
f010d9d2:	83 ec 0c             	sub    $0xc,%esp
f010d9d5:	ff 75 ec             	pushl  -0x14(%ebp)
f010d9d8:	e8 b8 38 02 00       	call   f0131295 <initialize_MemBlocksList>
f010d9dd:	83 c4 10             	add    $0x10,%esp
	//Check 1: Check number of nodes in AvailableMemBlocksList
	if (LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks)
f010d9e0:	a1 e0 0e 6c f0       	mov    0xf06c0ee0,%eax
f010d9e5:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f010d9e8:	74 17                	je     f010da01 <test_initialize_MemBlocksList+0x3c>
	{
		panic("initialize_MemBlocksList: Allocating wrong size for the AvailableMemBlocksList %d\n", LIST_SIZE(&(AvailableMemBlocksList)));
f010d9ea:	a1 e0 0e 6c f0       	mov    0xf06c0ee0,%eax
f010d9ef:	50                   	push   %eax
f010d9f0:	68 e0 71 13 f0       	push   $0xf01371e0
f010d9f5:	6a 1f                	push   $0x1f
f010d9f7:	68 34 72 13 f0       	push   $0xf0137234
f010d9fc:	e8 a5 27 ff ff       	call   f01001a6 <_panic>
		//assert(LIST_SIZE(&AvailableMemBlocksList) == numOfBlocks);
	}

	//Check 2: Check number of nodes in AllocMemBlocksList
	if (LIST_SIZE(&(AllocMemBlocksList)) != 0)
f010da01:	a1 dc 8a 65 f0       	mov    0xf0658adc,%eax
f010da06:	85 c0                	test   %eax,%eax
f010da08:	74 17                	je     f010da21 <test_initialize_MemBlocksList+0x5c>
	{
		panic("initialize_MemBlocksList: Allocating wrong size for the AllocMemBlocksList %d\n", LIST_SIZE(&(AllocMemBlocksList)));
f010da0a:	a1 dc 8a 65 f0       	mov    0xf0658adc,%eax
f010da0f:	50                   	push   %eax
f010da10:	68 58 72 13 f0       	push   $0xf0137258
f010da15:	6a 26                	push   $0x26
f010da17:	68 34 72 13 f0       	push   $0xf0137234
f010da1c:	e8 85 27 ff ff       	call   f01001a6 <_panic>
	}

	//Check 3: Check number of nodes in AvailableMemBlocksList
	if (LIST_SIZE(&(FreeMemBlocksList)) != 0)
f010da21:	a1 ac 0e 6c f0       	mov    0xf06c0eac,%eax
f010da26:	85 c0                	test   %eax,%eax
f010da28:	74 17                	je     f010da41 <test_initialize_MemBlocksList+0x7c>
	{
		panic("initialize_MemBlocksList: Allocating wrong size for the FreeMemBlocksList %d\n", LIST_SIZE(&(FreeMemBlocksList)));
f010da2a:	a1 ac 0e 6c f0       	mov    0xf06c0eac,%eax
f010da2f:	50                   	push   %eax
f010da30:	68 a8 72 13 f0       	push   $0xf01372a8
f010da35:	6a 2c                	push   $0x2c
f010da37:	68 34 72 13 f0       	push   $0xf0137234
f010da3c:	e8 65 27 ff ff       	call   f01001a6 <_panic>
	}

	//Check 4: Check the existance of each node and its data in AvailableMemBlocksList
	struct MemBlock* node = NULL;
f010da41:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	uint32 size = 0;
f010da48:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	LIST_FOREACH(node, &AvailableMemBlocksList)
f010da4f:	a1 d4 0e 6c f0       	mov    0xf06c0ed4,%eax
f010da54:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010da57:	eb 29                	jmp    f010da82 <test_initialize_MemBlocksList+0xbd>
	{
		size++;
f010da59:	ff 45 f0             	incl   -0x10(%ebp)
		cprintf("Node data: sva = %x, size = %d\n", node->sva, node->size);
f010da5c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010da5f:	8b 50 0c             	mov    0xc(%eax),%edx
f010da62:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010da65:	8b 40 08             	mov    0x8(%eax),%eax
f010da68:	83 ec 04             	sub    $0x4,%esp
f010da6b:	52                   	push   %edx
f010da6c:	50                   	push   %eax
f010da6d:	68 f8 72 13 f0       	push   $0xf01372f8
f010da72:	e8 b6 31 ff ff       	call   f0100c2d <cprintf>
f010da77:	83 c4 10             	add    $0x10,%esp
	}

	//Check 4: Check the existance of each node and its data in AvailableMemBlocksList
	struct MemBlock* node = NULL;
	uint32 size = 0;
	LIST_FOREACH(node, &AvailableMemBlocksList)
f010da7a:	a1 dc 0e 6c f0       	mov    0xf06c0edc,%eax
f010da7f:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010da82:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010da86:	74 07                	je     f010da8f <test_initialize_MemBlocksList+0xca>
f010da88:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010da8b:	8b 00                	mov    (%eax),%eax
f010da8d:	eb 05                	jmp    f010da94 <test_initialize_MemBlocksList+0xcf>
f010da8f:	b8 00 00 00 00       	mov    $0x0,%eax
f010da94:	a3 dc 0e 6c f0       	mov    %eax,0xf06c0edc
f010da99:	a1 dc 0e 6c f0       	mov    0xf06c0edc,%eax
f010da9e:	85 c0                	test   %eax,%eax
f010daa0:	75 b7                	jne    f010da59 <test_initialize_MemBlocksList+0x94>
f010daa2:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010daa6:	75 b1                	jne    f010da59 <test_initialize_MemBlocksList+0x94>
	{
		size++;
		cprintf("Node data: sva = %x, size = %d\n", node->sva, node->size);
	}
	if(LIST_SIZE(&(AvailableMemBlocksList)) != size)
f010daa8:	a1 e0 0e 6c f0       	mov    0xf06c0ee0,%eax
f010daad:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f010dab0:	74 14                	je     f010dac6 <test_initialize_MemBlocksList+0x101>
		panic("initialize_MemBlocksList: Some nodes are not created in the initialize_MemBlocksList\n");
f010dab2:	83 ec 04             	sub    $0x4,%esp
f010dab5:	68 18 73 13 f0       	push   $0xf0137318
f010daba:	6a 38                	push   $0x38
f010dabc:	68 34 72 13 f0       	push   $0xf0137234
f010dac1:	e8 e0 26 ff ff       	call   f01001a6 <_panic>
	else
		cprintf("Congratulations!! test initialize_MemBlocksList completed successfully.\n");
f010dac6:	83 ec 0c             	sub    $0xc,%esp
f010dac9:	68 70 73 13 f0       	push   $0xf0137370
f010dace:	e8 5a 31 ff ff       	call   f0100c2d <cprintf>
f010dad3:	83 c4 10             	add    $0x10,%esp
}
f010dad6:	90                   	nop
f010dad7:	c9                   	leave  
f010dad8:	c3                   	ret    

f010dad9 <test_insert_sorted_allocList>:

void test_insert_sorted_allocList()
{
f010dad9:	55                   	push   %ebp
f010dada:	89 e5                	mov    %esp,%ebp
f010dadc:	57                   	push   %edi
f010dadd:	81 ec 94 00 00 00    	sub    $0x94,%esp
	uint32 numOfBlocks = 5;
f010dae3:	c7 45 f4 05 00 00 00 	movl   $0x5,-0xc(%ebp)
	initialize_MemBlocksList(numOfBlocks);
f010daea:	83 ec 0c             	sub    $0xc,%esp
f010daed:	ff 75 f4             	pushl  -0xc(%ebp)
f010daf0:	e8 a0 37 02 00       	call   f0131295 <initialize_MemBlocksList>
f010daf5:	83 c4 10             	add    $0x10,%esp
	LIST_INIT(&AllocMemBlocksList);
f010daf8:	c7 05 d0 8a 65 f0 00 	movl   $0x0,0xf0658ad0
f010daff:	00 00 00 
f010db02:	c7 05 d4 8a 65 f0 00 	movl   $0x0,0xf0658ad4
f010db09:	00 00 00 
f010db0c:	c7 05 dc 8a 65 f0 00 	movl   $0x0,0xf0658adc
f010db13:	00 00 00 
	LIST_INIT(&FreeMemBlocksList);
f010db16:	c7 05 a0 0e 6c f0 00 	movl   $0x0,0xf06c0ea0
f010db1d:	00 00 00 
f010db20:	c7 05 a4 0e 6c f0 00 	movl   $0x0,0xf06c0ea4
f010db27:	00 00 00 
f010db2a:	c7 05 ac 0e 6c f0 00 	movl   $0x0,0xf06c0eac
f010db31:	00 00 00 

	uint32 blocksToInsertSVAs[5]={0,0,0,0,0};
f010db34:	8d 55 d8             	lea    -0x28(%ebp),%edx
f010db37:	b9 05 00 00 00       	mov    $0x5,%ecx
f010db3c:	b8 00 00 00 00       	mov    $0x0,%eax
f010db41:	89 d7                	mov    %edx,%edi
f010db43:	f3 ab                	rep stos %eax,%es:(%edi)
	uint32 blocksToInsertSizes[5]={0,0,0,0,0};
f010db45:	8d 55 c4             	lea    -0x3c(%ebp),%edx
f010db48:	b9 05 00 00 00       	mov    $0x5,%ecx
f010db4d:	b8 00 00 00 00       	mov    $0x0,%eax
f010db52:	89 d7                	mov    %edx,%edi
f010db54:	f3 ab                	rep stos %eax,%es:(%edi)
	uint32 size = 0;
f010db56:	c7 45 c0 00 00 00 00 	movl   $0x0,-0x40(%ebp)
	uint32 actualSize = 0;
f010db5d:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)


	/*INSERT Scenario 1: Insert BLOCK_1 in the empty AllocMemBlocksList*/
	//BLOCK_1 sva = 8K
	blocksToInsertSVAs[1] = 0x0 + (8*kilo);
f010db64:	c7 45 dc 00 20 00 00 	movl   $0x2000,-0x24(%ebp)
	blocksToInsertSizes[1] = (4*kilo);
f010db6b:	c7 45 c8 00 10 00 00 	movl   $0x1000,-0x38(%ebp)
	struct MemBlock blockToInsert1;
	blockToInsert1.sva = blocksToInsertSVAs[1];
f010db72:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010db75:	89 45 b8             	mov    %eax,-0x48(%ebp)
	blockToInsert1.size = blocksToInsertSizes[1];
f010db78:	8b 45 c8             	mov    -0x38(%ebp),%eax
f010db7b:	89 45 bc             	mov    %eax,-0x44(%ebp)

	insert_sorted_allocList(&blockToInsert1);
f010db7e:	83 ec 0c             	sub    $0xc,%esp
f010db81:	8d 45 b0             	lea    -0x50(%ebp),%eax
f010db84:	50                   	push   %eax
f010db85:	e8 40 38 02 00       	call   f01313ca <insert_sorted_allocList>
f010db8a:	83 c4 10             	add    $0x10,%esp

	//Check 1: Check size of the AllocMemBlocksList
	actualSize = 1;
f010db8d:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
	if (LIST_SIZE(&(AllocMemBlocksList)) != actualSize) panic("insert_sorted: WRONG ALLOCATION - wrong size for the AllocMemBlocksList.");
f010db94:	a1 dc 8a 65 f0       	mov    0xf0658adc,%eax
f010db99:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f010db9c:	74 14                	je     f010dbb2 <test_insert_sorted_allocList+0xd9>
f010db9e:	83 ec 04             	sub    $0x4,%esp
f010dba1:	68 bc 73 13 f0       	push   $0xf01373bc
f010dba6:	6a 56                	push   $0x56
f010dba8:	68 34 72 13 f0       	push   $0xf0137234
f010dbad:	e8 f4 25 ff ff       	call   f01001a6 <_panic>

	//Check 2: Check size of the AvailableMemBlocksList
	if (LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks) panic("insert_sorted: WRONG ALLOCATION - wrong size for the AvailableMemBlocksList.");
f010dbb2:	a1 e0 0e 6c f0       	mov    0xf06c0ee0,%eax
f010dbb7:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f010dbba:	74 14                	je     f010dbd0 <test_insert_sorted_allocList+0xf7>
f010dbbc:	83 ec 04             	sub    $0x4,%esp
f010dbbf:	68 08 74 13 f0       	push   $0xf0137408
f010dbc4:	6a 59                	push   $0x59
f010dbc6:	68 34 72 13 f0       	push   $0xf0137234
f010dbcb:	e8 d6 25 ff ff       	call   f01001a6 <_panic>

	//Check 3: Check the allocated list content
	int chk = check_list_data(&AllocMemBlocksList, blocksToInsertSVAs, blocksToInsertSizes, &size, actualSize);
f010dbd0:	83 ec 0c             	sub    $0xc,%esp
f010dbd3:	ff 75 f0             	pushl  -0x10(%ebp)
f010dbd6:	8d 45 c0             	lea    -0x40(%ebp),%eax
f010dbd9:	50                   	push   %eax
f010dbda:	8d 45 c4             	lea    -0x3c(%ebp),%eax
f010dbdd:	50                   	push   %eax
f010dbde:	8d 45 d8             	lea    -0x28(%ebp),%eax
f010dbe1:	50                   	push   %eax
f010dbe2:	68 d0 8a 65 f0       	push   $0xf0658ad0
f010dbe7:	e8 7d 26 00 00       	call   f0110269 <check_list_data>
f010dbec:	83 c4 20             	add    $0x20,%esp
f010dbef:	89 45 ec             	mov    %eax,-0x14(%ebp)
	if(chk != 1) panic("insert_sorted: WRONG ALLOCATION .. AllocMemBlocksList content is not correct.");
f010dbf2:	83 7d ec 01          	cmpl   $0x1,-0x14(%ebp)
f010dbf6:	74 14                	je     f010dc0c <test_insert_sorted_allocList+0x133>
f010dbf8:	83 ec 04             	sub    $0x4,%esp
f010dbfb:	68 58 74 13 f0       	push   $0xf0137458
f010dc00:	6a 5d                	push   $0x5d
f010dc02:	68 34 72 13 f0       	push   $0xf0137234
f010dc07:	e8 9a 25 ff ff       	call   f01001a6 <_panic>
	if(size != actualSize) panic("insert_sorted: WRONG ALLOCATION .. AllocMemBlocksList size is not correct.");
f010dc0c:	8b 45 c0             	mov    -0x40(%ebp),%eax
f010dc0f:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f010dc12:	74 14                	je     f010dc28 <test_insert_sorted_allocList+0x14f>
f010dc14:	83 ec 04             	sub    $0x4,%esp
f010dc17:	68 a8 74 13 f0       	push   $0xf01374a8
f010dc1c:	6a 5e                	push   $0x5e
f010dc1e:	68 34 72 13 f0       	push   $0xf0137234
f010dc23:	e8 7e 25 ff ff       	call   f01001a6 <_panic>

	//====================================================================//
	/*INSERT Scenario 2: Insert BLOCK_2 in the AllocMemBlocksList with sva greater than BLOCK_1*/
	//BLOCK_2 sva = 28K
	blocksToInsertSVAs[4] = (28*kilo);
f010dc28:	c7 45 e8 00 70 00 00 	movl   $0x7000,-0x18(%ebp)
	blocksToInsertSizes[4] = (2*kilo);
f010dc2f:	c7 45 d4 00 08 00 00 	movl   $0x800,-0x2c(%ebp)
	struct MemBlock blockToInsert2;
	blockToInsert2.sva = blocksToInsertSVAs[4];
f010dc36:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010dc39:	89 45 a8             	mov    %eax,-0x58(%ebp)
	blockToInsert2.size = blocksToInsertSizes[4];
f010dc3c:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f010dc3f:	89 45 ac             	mov    %eax,-0x54(%ebp)

	insert_sorted_allocList(&blockToInsert2);
f010dc42:	83 ec 0c             	sub    $0xc,%esp
f010dc45:	8d 45 a0             	lea    -0x60(%ebp),%eax
f010dc48:	50                   	push   %eax
f010dc49:	e8 7c 37 02 00       	call   f01313ca <insert_sorted_allocList>
f010dc4e:	83 c4 10             	add    $0x10,%esp

	//Check 1: Check size of the AllocMemBlocksList
	actualSize = 2;
f010dc51:	c7 45 f0 02 00 00 00 	movl   $0x2,-0x10(%ebp)
	if (LIST_SIZE(&(AllocMemBlocksList)) != actualSize) panic("insert_sorted: WRONG ALLOCATION - wrong size for the AllocMemBlocksList.");
f010dc58:	a1 dc 8a 65 f0       	mov    0xf0658adc,%eax
f010dc5d:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f010dc60:	74 14                	je     f010dc76 <test_insert_sorted_allocList+0x19d>
f010dc62:	83 ec 04             	sub    $0x4,%esp
f010dc65:	68 bc 73 13 f0       	push   $0xf01373bc
f010dc6a:	6a 6d                	push   $0x6d
f010dc6c:	68 34 72 13 f0       	push   $0xf0137234
f010dc71:	e8 30 25 ff ff       	call   f01001a6 <_panic>

	//Check 2: Check size of the AvailableMemBlocksList
	if (LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks) panic("insert_sorted: WRONG ALLOCATION - wrong size for the AvailableMemBlocksList.");
f010dc76:	a1 e0 0e 6c f0       	mov    0xf06c0ee0,%eax
f010dc7b:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f010dc7e:	74 14                	je     f010dc94 <test_insert_sorted_allocList+0x1bb>
f010dc80:	83 ec 04             	sub    $0x4,%esp
f010dc83:	68 08 74 13 f0       	push   $0xf0137408
f010dc88:	6a 70                	push   $0x70
f010dc8a:	68 34 72 13 f0       	push   $0xf0137234
f010dc8f:	e8 12 25 ff ff       	call   f01001a6 <_panic>

	//Check 3: Check the allocated list content
	size = 0;
f010dc94:	c7 45 c0 00 00 00 00 	movl   $0x0,-0x40(%ebp)
	chk = check_list_data(&AllocMemBlocksList, blocksToInsertSVAs, blocksToInsertSizes, &size, actualSize);
f010dc9b:	83 ec 0c             	sub    $0xc,%esp
f010dc9e:	ff 75 f0             	pushl  -0x10(%ebp)
f010dca1:	8d 45 c0             	lea    -0x40(%ebp),%eax
f010dca4:	50                   	push   %eax
f010dca5:	8d 45 c4             	lea    -0x3c(%ebp),%eax
f010dca8:	50                   	push   %eax
f010dca9:	8d 45 d8             	lea    -0x28(%ebp),%eax
f010dcac:	50                   	push   %eax
f010dcad:	68 d0 8a 65 f0       	push   $0xf0658ad0
f010dcb2:	e8 b2 25 00 00       	call   f0110269 <check_list_data>
f010dcb7:	83 c4 20             	add    $0x20,%esp
f010dcba:	89 45 ec             	mov    %eax,-0x14(%ebp)
	if(chk != 1) panic("insert_sorted: WRONG ALLOCATION .. AllocMemBlocksList content is not correct.");
f010dcbd:	83 7d ec 01          	cmpl   $0x1,-0x14(%ebp)
f010dcc1:	74 14                	je     f010dcd7 <test_insert_sorted_allocList+0x1fe>
f010dcc3:	83 ec 04             	sub    $0x4,%esp
f010dcc6:	68 58 74 13 f0       	push   $0xf0137458
f010dccb:	6a 75                	push   $0x75
f010dccd:	68 34 72 13 f0       	push   $0xf0137234
f010dcd2:	e8 cf 24 ff ff       	call   f01001a6 <_panic>
	if(size != actualSize) panic("insert_sorted: WRONG ALLOCATION .. AllocMemBlocksList size is not correct.");
f010dcd7:	8b 45 c0             	mov    -0x40(%ebp),%eax
f010dcda:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f010dcdd:	74 14                	je     f010dcf3 <test_insert_sorted_allocList+0x21a>
f010dcdf:	83 ec 04             	sub    $0x4,%esp
f010dce2:	68 a8 74 13 f0       	push   $0xf01374a8
f010dce7:	6a 76                	push   $0x76
f010dce9:	68 34 72 13 f0       	push   $0xf0137234
f010dcee:	e8 b3 24 ff ff       	call   f01001a6 <_panic>

	//====================================================================//
	/*INSERT Scenario 3: Insert BLOCK_3 in the AllocMemBlocksList with sva smaller than BLOCK_2*/
	//BLOCK_3 sva = 16K
	blocksToInsertSVAs[2] = (16*kilo);
f010dcf3:	c7 45 e0 00 40 00 00 	movl   $0x4000,-0x20(%ebp)
	blocksToInsertSizes[2] = (8*kilo);
f010dcfa:	c7 45 cc 00 20 00 00 	movl   $0x2000,-0x34(%ebp)
	struct MemBlock blockToInsert3;
	blockToInsert3.sva = blocksToInsertSVAs[2];
f010dd01:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010dd04:	89 45 98             	mov    %eax,-0x68(%ebp)
	blockToInsert3.size = blocksToInsertSizes[2];
f010dd07:	8b 45 cc             	mov    -0x34(%ebp),%eax
f010dd0a:	89 45 9c             	mov    %eax,-0x64(%ebp)

	insert_sorted_allocList(&blockToInsert3);
f010dd0d:	83 ec 0c             	sub    $0xc,%esp
f010dd10:	8d 45 90             	lea    -0x70(%ebp),%eax
f010dd13:	50                   	push   %eax
f010dd14:	e8 b1 36 02 00       	call   f01313ca <insert_sorted_allocList>
f010dd19:	83 c4 10             	add    $0x10,%esp

	//Check 1: Check size of the AllocMemBlocksList
	actualSize = 3;
f010dd1c:	c7 45 f0 03 00 00 00 	movl   $0x3,-0x10(%ebp)
	if (LIST_SIZE(&(AllocMemBlocksList)) != actualSize) panic("insert_sorted: WRONG ALLOCATION - wrong size for the AllocMemBlocksList.");
f010dd23:	a1 dc 8a 65 f0       	mov    0xf0658adc,%eax
f010dd28:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f010dd2b:	74 17                	je     f010dd44 <test_insert_sorted_allocList+0x26b>
f010dd2d:	83 ec 04             	sub    $0x4,%esp
f010dd30:	68 bc 73 13 f0       	push   $0xf01373bc
f010dd35:	68 85 00 00 00       	push   $0x85
f010dd3a:	68 34 72 13 f0       	push   $0xf0137234
f010dd3f:	e8 62 24 ff ff       	call   f01001a6 <_panic>

	//Check 2: Check size of the AvailableMemBlocksList
	if (LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks) panic("insert_sorted: WRONG ALLOCATION - wrong size for the AvailableMemBlocksList\n");
f010dd44:	a1 e0 0e 6c f0       	mov    0xf06c0ee0,%eax
f010dd49:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f010dd4c:	74 17                	je     f010dd65 <test_insert_sorted_allocList+0x28c>
f010dd4e:	83 ec 04             	sub    $0x4,%esp
f010dd51:	68 f4 74 13 f0       	push   $0xf01374f4
f010dd56:	68 88 00 00 00       	push   $0x88
f010dd5b:	68 34 72 13 f0       	push   $0xf0137234
f010dd60:	e8 41 24 ff ff       	call   f01001a6 <_panic>

	//Check 3: Check the allocated list content
	size = 0;
f010dd65:	c7 45 c0 00 00 00 00 	movl   $0x0,-0x40(%ebp)
	chk = check_list_data(&AllocMemBlocksList, blocksToInsertSVAs, blocksToInsertSizes, &size, actualSize);
f010dd6c:	83 ec 0c             	sub    $0xc,%esp
f010dd6f:	ff 75 f0             	pushl  -0x10(%ebp)
f010dd72:	8d 45 c0             	lea    -0x40(%ebp),%eax
f010dd75:	50                   	push   %eax
f010dd76:	8d 45 c4             	lea    -0x3c(%ebp),%eax
f010dd79:	50                   	push   %eax
f010dd7a:	8d 45 d8             	lea    -0x28(%ebp),%eax
f010dd7d:	50                   	push   %eax
f010dd7e:	68 d0 8a 65 f0       	push   $0xf0658ad0
f010dd83:	e8 e1 24 00 00       	call   f0110269 <check_list_data>
f010dd88:	83 c4 20             	add    $0x20,%esp
f010dd8b:	89 45 ec             	mov    %eax,-0x14(%ebp)
	if(chk != 1) panic("insert_sorted: WRONG ALLOCATION .. AllocMemBlocksList content is not correct.");
f010dd8e:	83 7d ec 01          	cmpl   $0x1,-0x14(%ebp)
f010dd92:	74 17                	je     f010ddab <test_insert_sorted_allocList+0x2d2>
f010dd94:	83 ec 04             	sub    $0x4,%esp
f010dd97:	68 58 74 13 f0       	push   $0xf0137458
f010dd9c:	68 8d 00 00 00       	push   $0x8d
f010dda1:	68 34 72 13 f0       	push   $0xf0137234
f010dda6:	e8 fb 23 ff ff       	call   f01001a6 <_panic>
	if(size != actualSize) panic("insert_sorted: WRONG ALLOCATION .. AllocMemBlocksList size is not correct.");
f010ddab:	8b 45 c0             	mov    -0x40(%ebp),%eax
f010ddae:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f010ddb1:	74 17                	je     f010ddca <test_insert_sorted_allocList+0x2f1>
f010ddb3:	83 ec 04             	sub    $0x4,%esp
f010ddb6:	68 a8 74 13 f0       	push   $0xf01374a8
f010ddbb:	68 8e 00 00 00       	push   $0x8e
f010ddc0:	68 34 72 13 f0       	push   $0xf0137234
f010ddc5:	e8 dc 23 ff ff       	call   f01001a6 <_panic>

	//====================================================================//
	//INSERT Scenario 4: Insert BLOCK_4 in the AllocMemBlocksList with sva smaller than ALL (SHALL BE INSERTED AS HEAD)
	//BLOCK_4 sva = 0x0
	blocksToInsertSVAs[0] = (0x0);
f010ddca:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
	blocksToInsertSizes[0] = (8*kilo);
f010ddd1:	c7 45 c4 00 20 00 00 	movl   $0x2000,-0x3c(%ebp)
	struct MemBlock blockToInsert4;
	blockToInsert4.sva = blocksToInsertSVAs[0];
f010ddd8:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010dddb:	89 45 88             	mov    %eax,-0x78(%ebp)
	blockToInsert4.size = blocksToInsertSizes[0];
f010ddde:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f010dde1:	89 45 8c             	mov    %eax,-0x74(%ebp)
	insert_sorted_allocList(&blockToInsert4);
f010dde4:	83 ec 0c             	sub    $0xc,%esp
f010dde7:	8d 45 80             	lea    -0x80(%ebp),%eax
f010ddea:	50                   	push   %eax
f010ddeb:	e8 da 35 02 00       	call   f01313ca <insert_sorted_allocList>
f010ddf0:	83 c4 10             	add    $0x10,%esp

	//Check 1: Check size of the AllocMemBlocksList
	actualSize = 4;
f010ddf3:	c7 45 f0 04 00 00 00 	movl   $0x4,-0x10(%ebp)
	if (LIST_SIZE(&(AllocMemBlocksList)) != actualSize) panic("insert_sorted: WRONG ALLOCATION - wrong size for the AllocMemBlocksList.");
f010ddfa:	a1 dc 8a 65 f0       	mov    0xf0658adc,%eax
f010ddff:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f010de02:	74 17                	je     f010de1b <test_insert_sorted_allocList+0x342>
f010de04:	83 ec 04             	sub    $0x4,%esp
f010de07:	68 bc 73 13 f0       	push   $0xf01373bc
f010de0c:	68 9c 00 00 00       	push   $0x9c
f010de11:	68 34 72 13 f0       	push   $0xf0137234
f010de16:	e8 8b 23 ff ff       	call   f01001a6 <_panic>

	//Check 2: Check size of the AvailableMemBlocksList
	if (LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks) panic("insert_sorted: WRONG ALLOCATION - wrong size for the AvailableMemBlocksList.");
f010de1b:	a1 e0 0e 6c f0       	mov    0xf06c0ee0,%eax
f010de20:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f010de23:	74 17                	je     f010de3c <test_insert_sorted_allocList+0x363>
f010de25:	83 ec 04             	sub    $0x4,%esp
f010de28:	68 08 74 13 f0       	push   $0xf0137408
f010de2d:	68 9f 00 00 00       	push   $0x9f
f010de32:	68 34 72 13 f0       	push   $0xf0137234
f010de37:	e8 6a 23 ff ff       	call   f01001a6 <_panic>

	//Check 3: Check the allocated list content
	size = 0;
f010de3c:	c7 45 c0 00 00 00 00 	movl   $0x0,-0x40(%ebp)
	chk = check_list_data(&AllocMemBlocksList, blocksToInsertSVAs, blocksToInsertSizes, &size, actualSize);
f010de43:	83 ec 0c             	sub    $0xc,%esp
f010de46:	ff 75 f0             	pushl  -0x10(%ebp)
f010de49:	8d 45 c0             	lea    -0x40(%ebp),%eax
f010de4c:	50                   	push   %eax
f010de4d:	8d 45 c4             	lea    -0x3c(%ebp),%eax
f010de50:	50                   	push   %eax
f010de51:	8d 45 d8             	lea    -0x28(%ebp),%eax
f010de54:	50                   	push   %eax
f010de55:	68 d0 8a 65 f0       	push   $0xf0658ad0
f010de5a:	e8 0a 24 00 00       	call   f0110269 <check_list_data>
f010de5f:	83 c4 20             	add    $0x20,%esp
f010de62:	89 45 ec             	mov    %eax,-0x14(%ebp)
	if(chk != 1) panic("insert_sorted: WRONG ALLOCATION .. AllocMemBlocksList content is not correct.");
f010de65:	83 7d ec 01          	cmpl   $0x1,-0x14(%ebp)
f010de69:	74 17                	je     f010de82 <test_insert_sorted_allocList+0x3a9>
f010de6b:	83 ec 04             	sub    $0x4,%esp
f010de6e:	68 58 74 13 f0       	push   $0xf0137458
f010de73:	68 a4 00 00 00       	push   $0xa4
f010de78:	68 34 72 13 f0       	push   $0xf0137234
f010de7d:	e8 24 23 ff ff       	call   f01001a6 <_panic>
	if(size != actualSize) panic("insert_sorted: WRONG ALLOCATION .. AllocMemBlocksList size is not correct.");
f010de82:	8b 45 c0             	mov    -0x40(%ebp),%eax
f010de85:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f010de88:	74 17                	je     f010dea1 <test_insert_sorted_allocList+0x3c8>
f010de8a:	83 ec 04             	sub    $0x4,%esp
f010de8d:	68 a8 74 13 f0       	push   $0xf01374a8
f010de92:	68 a5 00 00 00       	push   $0xa5
f010de97:	68 34 72 13 f0       	push   $0xf0137234
f010de9c:	e8 05 23 ff ff       	call   f01001a6 <_panic>

	//====================================================================//
	//INSERT Scenario 5: Insert BLOCK_5 in the AllocMemBlocksList with sva not greater than the first block only
	//BLOCK_5 sva = 24K
	blocksToInsertSVAs[3] = 24*kilo;
f010dea1:	c7 45 e4 00 60 00 00 	movl   $0x6000,-0x1c(%ebp)
	blocksToInsertSizes[3] = (4*kilo);
f010dea8:	c7 45 d0 00 10 00 00 	movl   $0x1000,-0x30(%ebp)
	struct MemBlock blockToInsert5;
	blockToInsert5.sva = blocksToInsertSVAs[3];
f010deaf:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010deb2:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)
	blockToInsert5.size = blocksToInsertSizes[3];
f010deb8:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010debb:	89 85 7c ff ff ff    	mov    %eax,-0x84(%ebp)
	insert_sorted_allocList(&blockToInsert5);
f010dec1:	83 ec 0c             	sub    $0xc,%esp
f010dec4:	8d 85 70 ff ff ff    	lea    -0x90(%ebp),%eax
f010deca:	50                   	push   %eax
f010decb:	e8 fa 34 02 00       	call   f01313ca <insert_sorted_allocList>
f010ded0:	83 c4 10             	add    $0x10,%esp

	//Check 1: Check size of the AllocMemBlocksList
	actualSize = 5;
f010ded3:	c7 45 f0 05 00 00 00 	movl   $0x5,-0x10(%ebp)
	if (LIST_SIZE(&(AllocMemBlocksList)) != actualSize) panic("insert_sorted: WRONG ALLOCATION - wrong size for the AllocMemBlocksList.");
f010deda:	a1 dc 8a 65 f0       	mov    0xf0658adc,%eax
f010dedf:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f010dee2:	74 17                	je     f010defb <test_insert_sorted_allocList+0x422>
f010dee4:	83 ec 04             	sub    $0x4,%esp
f010dee7:	68 bc 73 13 f0       	push   $0xf01373bc
f010deec:	68 b3 00 00 00       	push   $0xb3
f010def1:	68 34 72 13 f0       	push   $0xf0137234
f010def6:	e8 ab 22 ff ff       	call   f01001a6 <_panic>

	//Check 2: Check size of the AvailableMemBlocksList
	if (LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks) panic("insert_sorted: WRONG ALLOCATION - wrong size for the AvailableMemBlocksList.");
f010defb:	a1 e0 0e 6c f0       	mov    0xf06c0ee0,%eax
f010df00:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f010df03:	74 17                	je     f010df1c <test_insert_sorted_allocList+0x443>
f010df05:	83 ec 04             	sub    $0x4,%esp
f010df08:	68 08 74 13 f0       	push   $0xf0137408
f010df0d:	68 b6 00 00 00       	push   $0xb6
f010df12:	68 34 72 13 f0       	push   $0xf0137234
f010df17:	e8 8a 22 ff ff       	call   f01001a6 <_panic>

	//Check 3: Check the allocated list content
	size = 0;
f010df1c:	c7 45 c0 00 00 00 00 	movl   $0x0,-0x40(%ebp)
	chk = check_list_data(&AllocMemBlocksList, blocksToInsertSVAs, blocksToInsertSizes, &size, actualSize);
f010df23:	83 ec 0c             	sub    $0xc,%esp
f010df26:	ff 75 f0             	pushl  -0x10(%ebp)
f010df29:	8d 45 c0             	lea    -0x40(%ebp),%eax
f010df2c:	50                   	push   %eax
f010df2d:	8d 45 c4             	lea    -0x3c(%ebp),%eax
f010df30:	50                   	push   %eax
f010df31:	8d 45 d8             	lea    -0x28(%ebp),%eax
f010df34:	50                   	push   %eax
f010df35:	68 d0 8a 65 f0       	push   $0xf0658ad0
f010df3a:	e8 2a 23 00 00       	call   f0110269 <check_list_data>
f010df3f:	83 c4 20             	add    $0x20,%esp
f010df42:	89 45 ec             	mov    %eax,-0x14(%ebp)
	if(chk != 1) panic("insert_sorted: WRONG ALLOCATION .. AllocMemBlocksList content is not correct.");
f010df45:	83 7d ec 01          	cmpl   $0x1,-0x14(%ebp)
f010df49:	74 17                	je     f010df62 <test_insert_sorted_allocList+0x489>
f010df4b:	83 ec 04             	sub    $0x4,%esp
f010df4e:	68 58 74 13 f0       	push   $0xf0137458
f010df53:	68 bb 00 00 00       	push   $0xbb
f010df58:	68 34 72 13 f0       	push   $0xf0137234
f010df5d:	e8 44 22 ff ff       	call   f01001a6 <_panic>
	if(size != actualSize) panic("insert_sorted: WRONG ALLOCATION .. AllocMemBlocksList size is not correct.");
f010df62:	8b 45 c0             	mov    -0x40(%ebp),%eax
f010df65:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f010df68:	74 17                	je     f010df81 <test_insert_sorted_allocList+0x4a8>
f010df6a:	83 ec 04             	sub    $0x4,%esp
f010df6d:	68 a8 74 13 f0       	push   $0xf01374a8
f010df72:	68 bc 00 00 00       	push   $0xbc
f010df77:	68 34 72 13 f0       	push   $0xf0137234
f010df7c:	e8 25 22 ff ff       	call   f01001a6 <_panic>
	//====================================================================//
	//====================================================================//
	//show_list_content(&AllocMemBlocksList);

	cprintf("Congratulations!! test insert_sorted completed successfully.\n");
f010df81:	83 ec 0c             	sub    $0xc,%esp
f010df84:	68 44 75 13 f0       	push   $0xf0137544
f010df89:	e8 9f 2c ff ff       	call   f0100c2d <cprintf>
f010df8e:	83 c4 10             	add    $0x10,%esp
}
f010df91:	90                   	nop
f010df92:	8b 7d fc             	mov    -0x4(%ebp),%edi
f010df95:	c9                   	leave  
f010df96:	c3                   	ret    

f010df97 <test_find_block>:

void test_find_block()
{
f010df97:	55                   	push   %ebp
f010df98:	89 e5                	mov    %esp,%ebp
f010df9a:	57                   	push   %edi
f010df9b:	56                   	push   %esi
f010df9c:	53                   	push   %ebx
f010df9d:	81 ec ac 00 00 00    	sub    $0xac,%esp
	uint32 numOfBlocks = 6;
f010dfa3:	c7 45 e0 06 00 00 00 	movl   $0x6,-0x20(%ebp)
	initialize_MemBlocksList(numOfBlocks);
f010dfaa:	83 ec 0c             	sub    $0xc,%esp
f010dfad:	ff 75 e0             	pushl  -0x20(%ebp)
f010dfb0:	e8 e0 32 02 00       	call   f0131295 <initialize_MemBlocksList>
f010dfb5:	83 c4 10             	add    $0x10,%esp
	LIST_INIT(&FreeMemBlocksList);
f010dfb8:	c7 05 a0 0e 6c f0 00 	movl   $0x0,0xf06c0ea0
f010dfbf:	00 00 00 
f010dfc2:	c7 05 a4 0e 6c f0 00 	movl   $0x0,0xf06c0ea4
f010dfc9:	00 00 00 
f010dfcc:	c7 05 ac 0e 6c f0 00 	movl   $0x0,0xf06c0eac
f010dfd3:	00 00 00 

	//Fill AllocMemBlocksList with multiple blocks
	#define numOfAllocBlocks  6
	uint32 BlocksSVAs[numOfAllocBlocks] = {0x0, 0x2000, 0x4000, 0x7000, 0x19000, 0x1A400}; //0KB, 8KB, 16KB, 28KB, 100KB, 105KB
f010dfd6:	8d 45 c4             	lea    -0x3c(%ebp),%eax
f010dfd9:	bb bc 76 13 f0       	mov    $0xf01376bc,%ebx
f010dfde:	ba 06 00 00 00       	mov    $0x6,%edx
f010dfe3:	89 c7                	mov    %eax,%edi
f010dfe5:	89 de                	mov    %ebx,%esi
f010dfe7:	89 d1                	mov    %edx,%ecx
f010dfe9:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
	uint32 BlocksSizes[numOfAllocBlocks] = {3*kilo, 8*kilo, 1*kilo, 9*kilo, 4*kilo, 2*Mega} ;
f010dfeb:	8d 45 ac             	lea    -0x54(%ebp),%eax
f010dfee:	bb d4 76 13 f0       	mov    $0xf01376d4,%ebx
f010dff3:	ba 06 00 00 00       	mov    $0x6,%edx
f010dff8:	89 c7                	mov    %eax,%edi
f010dffa:	89 de                	mov    %ebx,%esi
f010dffc:	89 d1                	mov    %edx,%ecx
f010dffe:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)

	LIST_INIT(&AllocMemBlocksList);
f010e000:	c7 05 d0 8a 65 f0 00 	movl   $0x0,0xf0658ad0
f010e007:	00 00 00 
f010e00a:	c7 05 d4 8a 65 f0 00 	movl   $0x0,0xf0658ad4
f010e011:	00 00 00 
f010e014:	c7 05 dc 8a 65 f0 00 	movl   $0x0,0xf0658adc
f010e01b:	00 00 00 
	struct MemBlock blockToInsert[numOfAllocBlocks];
	for (int i = 0; i < numOfAllocBlocks; ++i)
f010e01e:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
f010e025:	e9 5f 01 00 00       	jmp    f010e189 <test_find_block+0x1f2>
	{
		blockToInsert[i].sva = BlocksSVAs[i];
f010e02a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010e02d:	8b 44 85 c4          	mov    -0x3c(%ebp,%eax,4),%eax
f010e031:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010e034:	c1 e2 04             	shl    $0x4,%edx
f010e037:	8d 5d e8             	lea    -0x18(%ebp),%ebx
f010e03a:	01 da                	add    %ebx,%edx
f010e03c:	81 ea 94 00 00 00    	sub    $0x94,%edx
f010e042:	89 02                	mov    %eax,(%edx)
		blockToInsert[i].size = BlocksSizes[i];
f010e044:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010e047:	8b 44 85 ac          	mov    -0x54(%ebp,%eax,4),%eax
f010e04b:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010e04e:	c1 e2 04             	shl    $0x4,%edx
f010e051:	8d 75 e8             	lea    -0x18(%ebp),%esi
f010e054:	01 f2                	add    %esi,%edx
f010e056:	81 ea 90 00 00 00    	sub    $0x90,%edx
f010e05c:	89 02                	mov    %eax,(%edx)
		if (i == 0)
f010e05e:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f010e062:	0f 85 92 00 00 00    	jne    f010e0fa <test_find_block+0x163>
			LIST_INSERT_HEAD(&AllocMemBlocksList, &(blockToInsert[i]));
f010e068:	a1 d0 8a 65 f0       	mov    0xf0658ad0,%eax
f010e06d:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010e070:	c1 e2 04             	shl    $0x4,%edx
f010e073:	8d 7d e8             	lea    -0x18(%ebp),%edi
f010e076:	01 fa                	add    %edi,%edx
f010e078:	81 ea 9c 00 00 00    	sub    $0x9c,%edx
f010e07e:	89 02                	mov    %eax,(%edx)
f010e080:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010e083:	c1 e0 04             	shl    $0x4,%eax
f010e086:	8d 5d e8             	lea    -0x18(%ebp),%ebx
f010e089:	01 d8                	add    %ebx,%eax
f010e08b:	2d 9c 00 00 00       	sub    $0x9c,%eax
f010e090:	8b 00                	mov    (%eax),%eax
f010e092:	85 c0                	test   %eax,%eax
f010e094:	74 18                	je     f010e0ae <test_find_block+0x117>
f010e096:	a1 d0 8a 65 f0       	mov    0xf0658ad0,%eax
f010e09b:	8d 95 4c ff ff ff    	lea    -0xb4(%ebp),%edx
f010e0a1:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
f010e0a4:	c1 e1 04             	shl    $0x4,%ecx
f010e0a7:	01 ca                	add    %ecx,%edx
f010e0a9:	89 50 04             	mov    %edx,0x4(%eax)
f010e0ac:	eb 13                	jmp    f010e0c1 <test_find_block+0x12a>
f010e0ae:	8d 85 4c ff ff ff    	lea    -0xb4(%ebp),%eax
f010e0b4:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010e0b7:	c1 e2 04             	shl    $0x4,%edx
f010e0ba:	01 d0                	add    %edx,%eax
f010e0bc:	a3 d4 8a 65 f0       	mov    %eax,0xf0658ad4
f010e0c1:	8d 85 4c ff ff ff    	lea    -0xb4(%ebp),%eax
f010e0c7:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010e0ca:	c1 e2 04             	shl    $0x4,%edx
f010e0cd:	01 d0                	add    %edx,%eax
f010e0cf:	a3 d0 8a 65 f0       	mov    %eax,0xf0658ad0
f010e0d4:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010e0d7:	c1 e0 04             	shl    $0x4,%eax
f010e0da:	8d 75 e8             	lea    -0x18(%ebp),%esi
f010e0dd:	01 f0                	add    %esi,%eax
f010e0df:	2d 98 00 00 00       	sub    $0x98,%eax
f010e0e4:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f010e0ea:	a1 dc 8a 65 f0       	mov    0xf0658adc,%eax
f010e0ef:	40                   	inc    %eax
f010e0f0:	a3 dc 8a 65 f0       	mov    %eax,0xf0658adc
f010e0f5:	e9 8c 00 00 00       	jmp    f010e186 <test_find_block+0x1ef>
		else
			LIST_INSERT_TAIL(&AllocMemBlocksList, &(blockToInsert[i]));
f010e0fa:	a1 d4 8a 65 f0       	mov    0xf0658ad4,%eax
f010e0ff:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010e102:	c1 e2 04             	shl    $0x4,%edx
f010e105:	8d 7d e8             	lea    -0x18(%ebp),%edi
f010e108:	01 fa                	add    %edi,%edx
f010e10a:	81 ea 98 00 00 00    	sub    $0x98,%edx
f010e110:	89 02                	mov    %eax,(%edx)
f010e112:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010e115:	c1 e0 04             	shl    $0x4,%eax
f010e118:	8d 5d e8             	lea    -0x18(%ebp),%ebx
f010e11b:	01 d8                	add    %ebx,%eax
f010e11d:	2d 98 00 00 00       	sub    $0x98,%eax
f010e122:	8b 00                	mov    (%eax),%eax
f010e124:	85 c0                	test   %eax,%eax
f010e126:	74 17                	je     f010e13f <test_find_block+0x1a8>
f010e128:	a1 d4 8a 65 f0       	mov    0xf0658ad4,%eax
f010e12d:	8d 95 4c ff ff ff    	lea    -0xb4(%ebp),%edx
f010e133:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
f010e136:	c1 e1 04             	shl    $0x4,%ecx
f010e139:	01 ca                	add    %ecx,%edx
f010e13b:	89 10                	mov    %edx,(%eax)
f010e13d:	eb 13                	jmp    f010e152 <test_find_block+0x1bb>
f010e13f:	8d 85 4c ff ff ff    	lea    -0xb4(%ebp),%eax
f010e145:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010e148:	c1 e2 04             	shl    $0x4,%edx
f010e14b:	01 d0                	add    %edx,%eax
f010e14d:	a3 d0 8a 65 f0       	mov    %eax,0xf0658ad0
f010e152:	8d 85 4c ff ff ff    	lea    -0xb4(%ebp),%eax
f010e158:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010e15b:	c1 e2 04             	shl    $0x4,%edx
f010e15e:	01 d0                	add    %edx,%eax
f010e160:	a3 d4 8a 65 f0       	mov    %eax,0xf0658ad4
f010e165:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010e168:	c1 e0 04             	shl    $0x4,%eax
f010e16b:	8d 75 e8             	lea    -0x18(%ebp),%esi
f010e16e:	01 f0                	add    %esi,%eax
f010e170:	2d 9c 00 00 00       	sub    $0x9c,%eax
f010e175:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f010e17b:	a1 dc 8a 65 f0       	mov    0xf0658adc,%eax
f010e180:	40                   	inc    %eax
f010e181:	a3 dc 8a 65 f0       	mov    %eax,0xf0658adc
	uint32 BlocksSVAs[numOfAllocBlocks] = {0x0, 0x2000, 0x4000, 0x7000, 0x19000, 0x1A400}; //0KB, 8KB, 16KB, 28KB, 100KB, 105KB
	uint32 BlocksSizes[numOfAllocBlocks] = {3*kilo, 8*kilo, 1*kilo, 9*kilo, 4*kilo, 2*Mega} ;

	LIST_INIT(&AllocMemBlocksList);
	struct MemBlock blockToInsert[numOfAllocBlocks];
	for (int i = 0; i < numOfAllocBlocks; ++i)
f010e186:	ff 45 e4             	incl   -0x1c(%ebp)
f010e189:	83 7d e4 05          	cmpl   $0x5,-0x1c(%ebp)
f010e18d:	0f 8e 97 fe ff ff    	jle    f010e02a <test_find_block+0x93>
		else
			LIST_INSERT_TAIL(&AllocMemBlocksList, &(blockToInsert[i]));
	}

	/*FIND Scenario 1: Search for a block that doesn't exist (Block with SVA = 4KB)*/
	struct MemBlock * blockToFind = find_block(&AllocMemBlocksList, 0x1000);
f010e193:	83 ec 08             	sub    $0x8,%esp
f010e196:	68 00 10 00 00       	push   $0x1000
f010e19b:	68 d0 8a 65 f0       	push   $0xf0658ad0
f010e1a0:	e8 cd 31 02 00       	call   f0131372 <find_block>
f010e1a5:	83 c4 10             	add    $0x10,%esp
f010e1a8:	89 45 dc             	mov    %eax,-0x24(%ebp)
	if(blockToFind != NULL)
f010e1ab:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f010e1af:	74 17                	je     f010e1c8 <test_find_block+0x231>
		panic("find_block: WRONG SEARCH - The block you searched for doesn't exist, however find_block find it.");
f010e1b1:	83 ec 04             	sub    $0x4,%esp
f010e1b4:	68 84 75 13 f0       	push   $0xf0137584
f010e1b9:	68 de 00 00 00       	push   $0xde
f010e1be:	68 34 72 13 f0       	push   $0xf0137234
f010e1c3:	e8 de 1f ff ff       	call   f01001a6 <_panic>

	/*FIND Scenario 2: Search for a block exist @ the beginning (Block with SVA = 0KB)*/
	blockToFind = find_block(&AllocMemBlocksList, 0x0);
f010e1c8:	83 ec 08             	sub    $0x8,%esp
f010e1cb:	6a 00                	push   $0x0
f010e1cd:	68 d0 8a 65 f0       	push   $0xf0658ad0
f010e1d2:	e8 9b 31 02 00       	call   f0131372 <find_block>
f010e1d7:	83 c4 10             	add    $0x10,%esp
f010e1da:	89 45 dc             	mov    %eax,-0x24(%ebp)
	if(blockToFind == NULL || blockToFind->size != 3*kilo || blockToFind->sva != 0x0)
f010e1dd:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f010e1e1:	74 17                	je     f010e1fa <test_find_block+0x263>
f010e1e3:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010e1e6:	8b 40 0c             	mov    0xc(%eax),%eax
f010e1e9:	3d 00 0c 00 00       	cmp    $0xc00,%eax
f010e1ee:	75 0a                	jne    f010e1fa <test_find_block+0x263>
f010e1f0:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010e1f3:	8b 40 08             	mov    0x8(%eax),%eax
f010e1f6:	85 c0                	test   %eax,%eax
f010e1f8:	74 17                	je     f010e211 <test_find_block+0x27a>
		panic("find_block: WRONG SEARCH - You find wrong block.");
f010e1fa:	83 ec 04             	sub    $0x4,%esp
f010e1fd:	68 e8 75 13 f0       	push   $0xf01375e8
f010e202:	68 e3 00 00 00       	push   $0xe3
f010e207:	68 34 72 13 f0       	push   $0xf0137234
f010e20c:	e8 95 1f ff ff       	call   f01001a6 <_panic>

	/*FIND Scenario 3: Search for a block exist @ the mid (Block with SVA = 0x7000)*/
	blockToFind = find_block(&AllocMemBlocksList, 0x7000);
f010e211:	83 ec 08             	sub    $0x8,%esp
f010e214:	68 00 70 00 00       	push   $0x7000
f010e219:	68 d0 8a 65 f0       	push   $0xf0658ad0
f010e21e:	e8 4f 31 02 00       	call   f0131372 <find_block>
f010e223:	83 c4 10             	add    $0x10,%esp
f010e226:	89 45 dc             	mov    %eax,-0x24(%ebp)
	if(blockToFind == NULL || blockToFind->size != 9*kilo || blockToFind->sva != 0x7000)
f010e229:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f010e22d:	74 1a                	je     f010e249 <test_find_block+0x2b2>
f010e22f:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010e232:	8b 40 0c             	mov    0xc(%eax),%eax
f010e235:	3d 00 24 00 00       	cmp    $0x2400,%eax
f010e23a:	75 0d                	jne    f010e249 <test_find_block+0x2b2>
f010e23c:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010e23f:	8b 40 08             	mov    0x8(%eax),%eax
f010e242:	3d 00 70 00 00       	cmp    $0x7000,%eax
f010e247:	74 17                	je     f010e260 <test_find_block+0x2c9>
		panic("find_block: WRONG SEARCH - You find wrong block.");
f010e249:	83 ec 04             	sub    $0x4,%esp
f010e24c:	68 e8 75 13 f0       	push   $0xf01375e8
f010e251:	68 e8 00 00 00       	push   $0xe8
f010e256:	68 34 72 13 f0       	push   $0xf0137234
f010e25b:	e8 46 1f ff ff       	call   f01001a6 <_panic>

	/*FIND Scenario 4: Search for a block exist @ the end (Block with SVA = 0x7000)*/
	blockToFind = find_block(&AllocMemBlocksList, 0x1A400);
f010e260:	83 ec 08             	sub    $0x8,%esp
f010e263:	68 00 a4 01 00       	push   $0x1a400
f010e268:	68 d0 8a 65 f0       	push   $0xf0658ad0
f010e26d:	e8 00 31 02 00       	call   f0131372 <find_block>
f010e272:	83 c4 10             	add    $0x10,%esp
f010e275:	89 45 dc             	mov    %eax,-0x24(%ebp)
	if(blockToFind == NULL || blockToFind->size != 2*Mega || blockToFind->sva != 0x1A400)
f010e278:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f010e27c:	74 1a                	je     f010e298 <test_find_block+0x301>
f010e27e:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010e281:	8b 40 0c             	mov    0xc(%eax),%eax
f010e284:	3d 00 00 20 00       	cmp    $0x200000,%eax
f010e289:	75 0d                	jne    f010e298 <test_find_block+0x301>
f010e28b:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010e28e:	8b 40 08             	mov    0x8(%eax),%eax
f010e291:	3d 00 a4 01 00       	cmp    $0x1a400,%eax
f010e296:	74 17                	je     f010e2af <test_find_block+0x318>
		panic("find_block: WRONG SEARCH - You find wrong block.");
f010e298:	83 ec 04             	sub    $0x4,%esp
f010e29b:	68 e8 75 13 f0       	push   $0xf01375e8
f010e2a0:	68 ed 00 00 00       	push   $0xed
f010e2a5:	68 34 72 13 f0       	push   $0xf0137234
f010e2aa:	e8 f7 1e ff ff       	call   f01001a6 <_panic>

	//Check size of AvailableMemBlocksList & FreeMemBlocksList
	if (LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks || LIST_SIZE(&(FreeMemBlocksList)) != 0 )
f010e2af:	a1 e0 0e 6c f0       	mov    0xf06c0ee0,%eax
f010e2b4:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f010e2b7:	75 09                	jne    f010e2c2 <test_find_block+0x32b>
f010e2b9:	a1 ac 0e 6c f0       	mov    0xf06c0eac,%eax
f010e2be:	85 c0                	test   %eax,%eax
f010e2c0:	74 17                	je     f010e2d9 <test_find_block+0x342>
	{
		panic("find_block: AvailableMemBlocksList and FreeMemBlocksList are affected and this shall not occurred.");
f010e2c2:	83 ec 04             	sub    $0x4,%esp
f010e2c5:	68 1c 76 13 f0       	push   $0xf013761c
f010e2ca:	68 f2 00 00 00       	push   $0xf2
f010e2cf:	68 34 72 13 f0       	push   $0xf0137234
f010e2d4:	e8 cd 1e ff ff       	call   f01001a6 <_panic>
	}

	//show_list_content(&AllocMemBlocksList);
	cprintf("Congratulations!! test find_block completed successfully.\n");
f010e2d9:	83 ec 0c             	sub    $0xc,%esp
f010e2dc:	68 80 76 13 f0       	push   $0xf0137680
f010e2e1:	e8 47 29 ff ff       	call   f0100c2d <cprintf>
f010e2e6:	83 c4 10             	add    $0x10,%esp
}
f010e2e9:	90                   	nop
f010e2ea:	8d 65 f4             	lea    -0xc(%ebp),%esp
f010e2ed:	5b                   	pop    %ebx
f010e2ee:	5e                   	pop    %esi
f010e2ef:	5f                   	pop    %edi
f010e2f0:	5d                   	pop    %ebp
f010e2f1:	c3                   	ret    

f010e2f2 <test_alloc_block_FF>:

void test_alloc_block_FF()
{
f010e2f2:	55                   	push   %ebp
f010e2f3:	89 e5                	mov    %esp,%ebp
f010e2f5:	57                   	push   %edi
f010e2f6:	56                   	push   %esi
f010e2f7:	53                   	push   %ebx
f010e2f8:	81 ec ec 00 00 00    	sub    $0xec,%esp
	uint32 numOfBlocks = 10;
f010e2fe:	c7 45 e0 0a 00 00 00 	movl   $0xa,-0x20(%ebp)
	initialize_MemBlocksList(numOfBlocks);
f010e305:	83 ec 0c             	sub    $0xc,%esp
f010e308:	ff 75 e0             	pushl  -0x20(%ebp)
f010e30b:	e8 85 2f 02 00       	call   f0131295 <initialize_MemBlocksList>
f010e310:	83 c4 10             	add    $0x10,%esp
	LIST_INIT(&AllocMemBlocksList);
f010e313:	c7 05 d0 8a 65 f0 00 	movl   $0x0,0xf0658ad0
f010e31a:	00 00 00 
f010e31d:	c7 05 d4 8a 65 f0 00 	movl   $0x0,0xf0658ad4
f010e324:	00 00 00 
f010e327:	c7 05 dc 8a 65 f0 00 	movl   $0x0,0xf0658adc
f010e32e:	00 00 00 

	//Fill AllocMemBlocksList with multiple blocks
	#define numOfFreeBlocks_FF  8
	uint32 BlocksSVAs[numOfFreeBlocks_FF] = {0x0, 0x2000, 0x4000, 0x7000, 0x19000, 0x1A400, 0x21B400, 0x31B400}; //0KB, 8KB, 16KB, 28KB, 100KB, 105KB, 2,157KB, 3,181KB
f010e331:	8d 45 b4             	lea    -0x4c(%ebp),%eax
f010e334:	bb 60 79 13 f0       	mov    $0xf0137960,%ebx
f010e339:	ba 08 00 00 00       	mov    $0x8,%edx
f010e33e:	89 c7                	mov    %eax,%edi
f010e340:	89 de                	mov    %ebx,%esi
f010e342:	89 d1                	mov    %edx,%ecx
f010e344:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
	uint32 BlocksSizes[numOfFreeBlocks_FF] = {3*kilo, 8*kilo, 1*kilo, 9*kilo, 4*kilo, 2*Mega, 1*Mega, 5*kilo} ;
f010e346:	8d 45 94             	lea    -0x6c(%ebp),%eax
f010e349:	bb 80 79 13 f0       	mov    $0xf0137980,%ebx
f010e34e:	ba 08 00 00 00       	mov    $0x8,%edx
f010e353:	89 c7                	mov    %eax,%edi
f010e355:	89 de                	mov    %ebx,%esi
f010e357:	89 d1                	mov    %edx,%ecx
f010e359:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)

	LIST_INIT(&FreeMemBlocksList);
f010e35b:	c7 05 a0 0e 6c f0 00 	movl   $0x0,0xf06c0ea0
f010e362:	00 00 00 
f010e365:	c7 05 a4 0e 6c f0 00 	movl   $0x0,0xf06c0ea4
f010e36c:	00 00 00 
f010e36f:	c7 05 ac 0e 6c f0 00 	movl   $0x0,0xf06c0eac
f010e376:	00 00 00 
	struct MemBlock freeBlocks[numOfFreeBlocks_FF];
	for (int i = 0; i < numOfFreeBlocks_FF; ++i)
f010e379:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
f010e380:	e9 5f 01 00 00       	jmp    f010e4e4 <test_alloc_block_FF+0x1f2>
	{
		freeBlocks[i].sva = BlocksSVAs[i];
f010e385:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010e388:	8b 44 85 b4          	mov    -0x4c(%ebp,%eax,4),%eax
f010e38c:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010e38f:	c1 e2 04             	shl    $0x4,%edx
f010e392:	8d 5d e8             	lea    -0x18(%ebp),%ebx
f010e395:	01 da                	add    %ebx,%edx
f010e397:	81 ea cc 00 00 00    	sub    $0xcc,%edx
f010e39d:	89 02                	mov    %eax,(%edx)
		freeBlocks[i].size = BlocksSizes[i];
f010e39f:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010e3a2:	8b 44 85 94          	mov    -0x6c(%ebp,%eax,4),%eax
f010e3a6:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010e3a9:	c1 e2 04             	shl    $0x4,%edx
f010e3ac:	8d 75 e8             	lea    -0x18(%ebp),%esi
f010e3af:	01 f2                	add    %esi,%edx
f010e3b1:	81 ea c8 00 00 00    	sub    $0xc8,%edx
f010e3b7:	89 02                	mov    %eax,(%edx)
		if (i == 0)
f010e3b9:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f010e3bd:	0f 85 92 00 00 00    	jne    f010e455 <test_alloc_block_FF+0x163>
			LIST_INSERT_HEAD(&FreeMemBlocksList, &(freeBlocks[i]));
f010e3c3:	a1 a0 0e 6c f0       	mov    0xf06c0ea0,%eax
f010e3c8:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010e3cb:	c1 e2 04             	shl    $0x4,%edx
f010e3ce:	8d 7d e8             	lea    -0x18(%ebp),%edi
f010e3d1:	01 fa                	add    %edi,%edx
f010e3d3:	81 ea d4 00 00 00    	sub    $0xd4,%edx
f010e3d9:	89 02                	mov    %eax,(%edx)
f010e3db:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010e3de:	c1 e0 04             	shl    $0x4,%eax
f010e3e1:	8d 5d e8             	lea    -0x18(%ebp),%ebx
f010e3e4:	01 d8                	add    %ebx,%eax
f010e3e6:	2d d4 00 00 00       	sub    $0xd4,%eax
f010e3eb:	8b 00                	mov    (%eax),%eax
f010e3ed:	85 c0                	test   %eax,%eax
f010e3ef:	74 18                	je     f010e409 <test_alloc_block_FF+0x117>
f010e3f1:	a1 a0 0e 6c f0       	mov    0xf06c0ea0,%eax
f010e3f6:	8d 95 14 ff ff ff    	lea    -0xec(%ebp),%edx
f010e3fc:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
f010e3ff:	c1 e1 04             	shl    $0x4,%ecx
f010e402:	01 ca                	add    %ecx,%edx
f010e404:	89 50 04             	mov    %edx,0x4(%eax)
f010e407:	eb 13                	jmp    f010e41c <test_alloc_block_FF+0x12a>
f010e409:	8d 85 14 ff ff ff    	lea    -0xec(%ebp),%eax
f010e40f:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010e412:	c1 e2 04             	shl    $0x4,%edx
f010e415:	01 d0                	add    %edx,%eax
f010e417:	a3 a4 0e 6c f0       	mov    %eax,0xf06c0ea4
f010e41c:	8d 85 14 ff ff ff    	lea    -0xec(%ebp),%eax
f010e422:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010e425:	c1 e2 04             	shl    $0x4,%edx
f010e428:	01 d0                	add    %edx,%eax
f010e42a:	a3 a0 0e 6c f0       	mov    %eax,0xf06c0ea0
f010e42f:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010e432:	c1 e0 04             	shl    $0x4,%eax
f010e435:	8d 75 e8             	lea    -0x18(%ebp),%esi
f010e438:	01 f0                	add    %esi,%eax
f010e43a:	2d d0 00 00 00       	sub    $0xd0,%eax
f010e43f:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f010e445:	a1 ac 0e 6c f0       	mov    0xf06c0eac,%eax
f010e44a:	40                   	inc    %eax
f010e44b:	a3 ac 0e 6c f0       	mov    %eax,0xf06c0eac
f010e450:	e9 8c 00 00 00       	jmp    f010e4e1 <test_alloc_block_FF+0x1ef>
		else
			LIST_INSERT_TAIL(&FreeMemBlocksList, &(freeBlocks[i]));
f010e455:	a1 a4 0e 6c f0       	mov    0xf06c0ea4,%eax
f010e45a:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010e45d:	c1 e2 04             	shl    $0x4,%edx
f010e460:	8d 7d e8             	lea    -0x18(%ebp),%edi
f010e463:	01 fa                	add    %edi,%edx
f010e465:	81 ea d0 00 00 00    	sub    $0xd0,%edx
f010e46b:	89 02                	mov    %eax,(%edx)
f010e46d:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010e470:	c1 e0 04             	shl    $0x4,%eax
f010e473:	8d 5d e8             	lea    -0x18(%ebp),%ebx
f010e476:	01 d8                	add    %ebx,%eax
f010e478:	2d d0 00 00 00       	sub    $0xd0,%eax
f010e47d:	8b 00                	mov    (%eax),%eax
f010e47f:	85 c0                	test   %eax,%eax
f010e481:	74 17                	je     f010e49a <test_alloc_block_FF+0x1a8>
f010e483:	a1 a4 0e 6c f0       	mov    0xf06c0ea4,%eax
f010e488:	8d 95 14 ff ff ff    	lea    -0xec(%ebp),%edx
f010e48e:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
f010e491:	c1 e1 04             	shl    $0x4,%ecx
f010e494:	01 ca                	add    %ecx,%edx
f010e496:	89 10                	mov    %edx,(%eax)
f010e498:	eb 13                	jmp    f010e4ad <test_alloc_block_FF+0x1bb>
f010e49a:	8d 85 14 ff ff ff    	lea    -0xec(%ebp),%eax
f010e4a0:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010e4a3:	c1 e2 04             	shl    $0x4,%edx
f010e4a6:	01 d0                	add    %edx,%eax
f010e4a8:	a3 a0 0e 6c f0       	mov    %eax,0xf06c0ea0
f010e4ad:	8d 85 14 ff ff ff    	lea    -0xec(%ebp),%eax
f010e4b3:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010e4b6:	c1 e2 04             	shl    $0x4,%edx
f010e4b9:	01 d0                	add    %edx,%eax
f010e4bb:	a3 a4 0e 6c f0       	mov    %eax,0xf06c0ea4
f010e4c0:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010e4c3:	c1 e0 04             	shl    $0x4,%eax
f010e4c6:	8d 75 e8             	lea    -0x18(%ebp),%esi
f010e4c9:	01 f0                	add    %esi,%eax
f010e4cb:	2d d4 00 00 00       	sub    $0xd4,%eax
f010e4d0:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f010e4d6:	a1 ac 0e 6c f0       	mov    0xf06c0eac,%eax
f010e4db:	40                   	inc    %eax
f010e4dc:	a3 ac 0e 6c f0       	mov    %eax,0xf06c0eac
	uint32 BlocksSVAs[numOfFreeBlocks_FF] = {0x0, 0x2000, 0x4000, 0x7000, 0x19000, 0x1A400, 0x21B400, 0x31B400}; //0KB, 8KB, 16KB, 28KB, 100KB, 105KB, 2,157KB, 3,181KB
	uint32 BlocksSizes[numOfFreeBlocks_FF] = {3*kilo, 8*kilo, 1*kilo, 9*kilo, 4*kilo, 2*Mega, 1*Mega, 5*kilo} ;

	LIST_INIT(&FreeMemBlocksList);
	struct MemBlock freeBlocks[numOfFreeBlocks_FF];
	for (int i = 0; i < numOfFreeBlocks_FF; ++i)
f010e4e1:	ff 45 e4             	incl   -0x1c(%ebp)
f010e4e4:	83 7d e4 07          	cmpl   $0x7,-0x1c(%ebp)
f010e4e8:	0f 8e 97 fe ff ff    	jle    f010e385 <test_alloc_block_FF+0x93>
			LIST_INSERT_TAIL(&FreeMemBlocksList, &(freeBlocks[i]));
	}

	//====================================================================//
	/*FF ALLOC Scenario 1: Try to allocate a block with a size greater than the size of any existing free block*/
	struct MemBlock * blockToAlloc = alloc_block_FF(3*Mega);
f010e4ee:	83 ec 0c             	sub    $0xc,%esp
f010e4f1:	68 00 00 30 00       	push   $0x300000
f010e4f6:	e8 5c 31 02 00       	call   f0131657 <alloc_block_FF>
f010e4fb:	83 c4 10             	add    $0x10,%esp
f010e4fe:	89 45 dc             	mov    %eax,-0x24(%ebp)

	//Check returned block content
	if(blockToAlloc != NULL) panic("alloc_block_FF: WRONG FF ALLOC - alloc_block_FF find a block instead no existing free blocks with the given size.");
f010e501:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f010e505:	74 17                	je     f010e51e <test_alloc_block_FF+0x22c>
f010e507:	83 ec 04             	sub    $0x4,%esp
f010e50a:	68 ec 76 13 f0       	push   $0xf01376ec
f010e50f:	68 15 01 00 00       	push   $0x115
f010e514:	68 34 72 13 f0       	push   $0xf0137234
f010e519:	e8 88 1c ff ff       	call   f01001a6 <_panic>

	//Check size of AvailableMemBlocksList, FreeMemBlocksList & AllocMemBlocksList
	if (LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks || LIST_SIZE(&(FreeMemBlocksList)) != numOfFreeBlocks_FF || LIST_SIZE(&(AllocMemBlocksList)) != 0)
f010e51e:	a1 e0 0e 6c f0       	mov    0xf06c0ee0,%eax
f010e523:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f010e526:	75 13                	jne    f010e53b <test_alloc_block_FF+0x249>
f010e528:	a1 ac 0e 6c f0       	mov    0xf06c0eac,%eax
f010e52d:	83 f8 08             	cmp    $0x8,%eax
f010e530:	75 09                	jne    f010e53b <test_alloc_block_FF+0x249>
f010e532:	a1 dc 8a 65 f0       	mov    0xf0658adc,%eax
f010e537:	85 c0                	test   %eax,%eax
f010e539:	74 17                	je     f010e552 <test_alloc_block_FF+0x260>
		panic("find_block: AvailableMemBlocksList, FreeMemBlocksList & AllocMemBlocksList are affected and this shall not occurred.");
f010e53b:	83 ec 04             	sub    $0x4,%esp
f010e53e:	68 60 77 13 f0       	push   $0xf0137760
f010e543:	68 19 01 00 00       	push   $0x119
f010e548:	68 34 72 13 f0       	push   $0xf0137234
f010e54d:	e8 54 1c ff ff       	call   f01001a6 <_panic>

	//====================================================================//
	/*FF ALLOC Scenario 2: Try to allocate a block with a size equal to the size of the first existing free block*/
	blockToAlloc = alloc_block_FF(9*kilo);
f010e552:	83 ec 0c             	sub    $0xc,%esp
f010e555:	68 00 24 00 00       	push   $0x2400
f010e55a:	e8 f8 30 02 00       	call   f0131657 <alloc_block_FF>
f010e55f:	83 c4 10             	add    $0x10,%esp
f010e562:	89 45 dc             	mov    %eax,-0x24(%ebp)

	//Check returned block content
	if(blockToAlloc == NULL || blockToAlloc->size != 9*kilo || blockToAlloc->sva != 0x7000)
f010e565:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f010e569:	74 1a                	je     f010e585 <test_alloc_block_FF+0x293>
f010e56b:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010e56e:	8b 40 0c             	mov    0xc(%eax),%eax
f010e571:	3d 00 24 00 00       	cmp    $0x2400,%eax
f010e576:	75 0d                	jne    f010e585 <test_alloc_block_FF+0x293>
f010e578:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010e57b:	8b 40 08             	mov    0x8(%eax),%eax
f010e57e:	3d 00 70 00 00       	cmp    $0x7000,%eax
f010e583:	74 17                	je     f010e59c <test_alloc_block_FF+0x2aa>
		panic("alloc_block_FF: WRONG FF ALLOC - alloc_block_FF find a wrong block.");
f010e585:	83 ec 04             	sub    $0x4,%esp
f010e588:	68 d8 77 13 f0       	push   $0xf01377d8
f010e58d:	68 21 01 00 00       	push   $0x121
f010e592:	68 34 72 13 f0       	push   $0xf0137234
f010e597:	e8 0a 1c ff ff       	call   f01001a6 <_panic>

	//Check size of AvailableMemBlocksList, FreeMemBlocksList & AllocMemBlocksList
	if (LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks || LIST_SIZE(&(FreeMemBlocksList)) != numOfFreeBlocks_FF-1 || LIST_SIZE(&(AllocMemBlocksList)) != 0)
f010e59c:	a1 e0 0e 6c f0       	mov    0xf06c0ee0,%eax
f010e5a1:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f010e5a4:	75 13                	jne    f010e5b9 <test_alloc_block_FF+0x2c7>
f010e5a6:	a1 ac 0e 6c f0       	mov    0xf06c0eac,%eax
f010e5ab:	83 f8 07             	cmp    $0x7,%eax
f010e5ae:	75 09                	jne    f010e5b9 <test_alloc_block_FF+0x2c7>
f010e5b0:	a1 dc 8a 65 f0       	mov    0xf0658adc,%eax
f010e5b5:	85 c0                	test   %eax,%eax
f010e5b7:	74 17                	je     f010e5d0 <test_alloc_block_FF+0x2de>
		panic("alloc_block_FF: Wrong sizes for AvailableMemBlocksList, FreeMemBlocksList and AllocMemBlocksList.");
f010e5b9:	83 ec 04             	sub    $0x4,%esp
f010e5bc:	68 1c 78 13 f0       	push   $0xf013781c
f010e5c1:	68 25 01 00 00       	push   $0x125
f010e5c6:	68 34 72 13 f0       	push   $0xf0137234
f010e5cb:	e8 d6 1b ff ff       	call   f01001a6 <_panic>

	//Check FreeMemBlocksList content
	uint32 size = 0;
f010e5d0:	c7 85 10 ff ff ff 00 	movl   $0x0,-0xf0(%ebp)
f010e5d7:	00 00 00 
	uint32 actualSize = numOfFreeBlocks_FF-1;
f010e5da:	c7 45 d8 07 00 00 00 	movl   $0x7,-0x28(%ebp)
	BlocksSVAs[3] = 0;
f010e5e1:	c7 45 c0 00 00 00 00 	movl   $0x0,-0x40(%ebp)
	BlocksSizes[3] = 0;
f010e5e8:	c7 45 a0 00 00 00 00 	movl   $0x0,-0x60(%ebp)
	int chk = check_list_data(&FreeMemBlocksList, BlocksSVAs, BlocksSizes, &size, actualSize);
f010e5ef:	83 ec 0c             	sub    $0xc,%esp
f010e5f2:	ff 75 d8             	pushl  -0x28(%ebp)
f010e5f5:	8d 85 10 ff ff ff    	lea    -0xf0(%ebp),%eax
f010e5fb:	50                   	push   %eax
f010e5fc:	8d 45 94             	lea    -0x6c(%ebp),%eax
f010e5ff:	50                   	push   %eax
f010e600:	8d 45 b4             	lea    -0x4c(%ebp),%eax
f010e603:	50                   	push   %eax
f010e604:	68 a0 0e 6c f0       	push   $0xf06c0ea0
f010e609:	e8 5b 1c 00 00       	call   f0110269 <check_list_data>
f010e60e:	83 c4 20             	add    $0x20,%esp
f010e611:	89 45 d4             	mov    %eax,-0x2c(%ebp)
	if(chk != 1) panic("alloc_block_FF: WRONG FF ALLOC .. FreeMemBlocksList content is not correct.");
f010e614:	83 7d d4 01          	cmpl   $0x1,-0x2c(%ebp)
f010e618:	74 17                	je     f010e631 <test_alloc_block_FF+0x33f>
f010e61a:	83 ec 04             	sub    $0x4,%esp
f010e61d:	68 80 78 13 f0       	push   $0xf0137880
f010e622:	68 2d 01 00 00       	push   $0x12d
f010e627:	68 34 72 13 f0       	push   $0xf0137234
f010e62c:	e8 75 1b ff ff       	call   f01001a6 <_panic>
	if(size != actualSize) panic("alloc_block_FF: WRONG FF ALLOC .. FreeMemBlocksList size is not correct.");
f010e631:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f010e637:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f010e63a:	74 17                	je     f010e653 <test_alloc_block_FF+0x361>
f010e63c:	83 ec 04             	sub    $0x4,%esp
f010e63f:	68 cc 78 13 f0       	push   $0xf01378cc
f010e644:	68 2e 01 00 00       	push   $0x12e
f010e649:	68 34 72 13 f0       	push   $0xf0137234
f010e64e:	e8 53 1b ff ff       	call   f01001a6 <_panic>

	//====================================================================//
	/*FF ALLOC Scenario 3: Try to allocate a block with a size smaller than the size of the first existing free block*/
	blockToAlloc = alloc_block_FF(1*Mega);
f010e653:	83 ec 0c             	sub    $0xc,%esp
f010e656:	68 00 00 10 00       	push   $0x100000
f010e65b:	e8 f7 2f 02 00       	call   f0131657 <alloc_block_FF>
f010e660:	83 c4 10             	add    $0x10,%esp
f010e663:	89 45 dc             	mov    %eax,-0x24(%ebp)

	//Check returned block content
	if(blockToAlloc == NULL || blockToAlloc->size != 1*Mega || blockToAlloc->sva != 0x1A400)
f010e666:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f010e66a:	74 1a                	je     f010e686 <test_alloc_block_FF+0x394>
f010e66c:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010e66f:	8b 40 0c             	mov    0xc(%eax),%eax
f010e672:	3d 00 00 10 00       	cmp    $0x100000,%eax
f010e677:	75 0d                	jne    f010e686 <test_alloc_block_FF+0x394>
f010e679:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010e67c:	8b 40 08             	mov    0x8(%eax),%eax
f010e67f:	3d 00 a4 01 00       	cmp    $0x1a400,%eax
f010e684:	74 17                	je     f010e69d <test_alloc_block_FF+0x3ab>
		panic("alloc_block_FF: WRONG FF ALLOC - alloc_block_FF find a wrong block.");
f010e686:	83 ec 04             	sub    $0x4,%esp
f010e689:	68 d8 77 13 f0       	push   $0xf01377d8
f010e68e:	68 36 01 00 00       	push   $0x136
f010e693:	68 34 72 13 f0       	push   $0xf0137234
f010e698:	e8 09 1b ff ff       	call   f01001a6 <_panic>

	//Check size of AvailableMemBlocksList, FreeMemBlocksList & AllocMemBlocksList
	if (LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks-1 || LIST_SIZE(&(FreeMemBlocksList)) != numOfFreeBlocks_FF-1 || LIST_SIZE(&(AllocMemBlocksList)) != 0)
f010e69d:	a1 e0 0e 6c f0       	mov    0xf06c0ee0,%eax
f010e6a2:	8b 55 e0             	mov    -0x20(%ebp),%edx
f010e6a5:	4a                   	dec    %edx
f010e6a6:	39 d0                	cmp    %edx,%eax
f010e6a8:	75 13                	jne    f010e6bd <test_alloc_block_FF+0x3cb>
f010e6aa:	a1 ac 0e 6c f0       	mov    0xf06c0eac,%eax
f010e6af:	83 f8 07             	cmp    $0x7,%eax
f010e6b2:	75 09                	jne    f010e6bd <test_alloc_block_FF+0x3cb>
f010e6b4:	a1 dc 8a 65 f0       	mov    0xf0658adc,%eax
f010e6b9:	85 c0                	test   %eax,%eax
f010e6bb:	74 17                	je     f010e6d4 <test_alloc_block_FF+0x3e2>
		panic("alloc_block_FF: Wrong sizes for AvailableMemBlocksList, FreeMemBlocksList and AllocMemBlocksList.");
f010e6bd:	83 ec 04             	sub    $0x4,%esp
f010e6c0:	68 1c 78 13 f0       	push   $0xf013781c
f010e6c5:	68 3a 01 00 00       	push   $0x13a
f010e6ca:	68 34 72 13 f0       	push   $0xf0137234
f010e6cf:	e8 d2 1a ff ff       	call   f01001a6 <_panic>

	//Check FreeMemBlocksList content
	size = 0;
f010e6d4:	c7 85 10 ff ff ff 00 	movl   $0x0,-0xf0(%ebp)
f010e6db:	00 00 00 
	actualSize = numOfFreeBlocks_FF-1;
f010e6de:	c7 45 d8 07 00 00 00 	movl   $0x7,-0x28(%ebp)
	BlocksSVAs[5] = 0x11A400;  //105KB + 1Mega = (105*1024)+(1024*1024)
f010e6e5:	c7 45 c8 00 a4 11 00 	movl   $0x11a400,-0x38(%ebp)
	BlocksSizes[5] = 1*Mega;
f010e6ec:	c7 45 a8 00 00 10 00 	movl   $0x100000,-0x58(%ebp)
	chk = check_list_data(&FreeMemBlocksList, BlocksSVAs, BlocksSizes, &size, actualSize);
f010e6f3:	83 ec 0c             	sub    $0xc,%esp
f010e6f6:	ff 75 d8             	pushl  -0x28(%ebp)
f010e6f9:	8d 85 10 ff ff ff    	lea    -0xf0(%ebp),%eax
f010e6ff:	50                   	push   %eax
f010e700:	8d 45 94             	lea    -0x6c(%ebp),%eax
f010e703:	50                   	push   %eax
f010e704:	8d 45 b4             	lea    -0x4c(%ebp),%eax
f010e707:	50                   	push   %eax
f010e708:	68 a0 0e 6c f0       	push   $0xf06c0ea0
f010e70d:	e8 57 1b 00 00       	call   f0110269 <check_list_data>
f010e712:	83 c4 20             	add    $0x20,%esp
f010e715:	89 45 d4             	mov    %eax,-0x2c(%ebp)
	if(chk != 1) panic("alloc_block_FF: WRONG FF ALLOC .. FreeMemBlocksList content is not correct.");
f010e718:	83 7d d4 01          	cmpl   $0x1,-0x2c(%ebp)
f010e71c:	74 17                	je     f010e735 <test_alloc_block_FF+0x443>
f010e71e:	83 ec 04             	sub    $0x4,%esp
f010e721:	68 80 78 13 f0       	push   $0xf0137880
f010e726:	68 42 01 00 00       	push   $0x142
f010e72b:	68 34 72 13 f0       	push   $0xf0137234
f010e730:	e8 71 1a ff ff       	call   f01001a6 <_panic>
	if(size != actualSize) panic("alloc_block_FF: WRONG FF ALLOC .. FreeMemBlocksList size is not correct.");
f010e735:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f010e73b:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f010e73e:	74 17                	je     f010e757 <test_alloc_block_FF+0x465>
f010e740:	83 ec 04             	sub    $0x4,%esp
f010e743:	68 cc 78 13 f0       	push   $0xf01378cc
f010e748:	68 43 01 00 00       	push   $0x143
f010e74d:	68 34 72 13 f0       	push   $0xf0137234
f010e752:	e8 4f 1a ff ff       	call   f01001a6 <_panic>

	//====================================================================//
	//show_list_content(&FreeMemBlocksList);
	cprintf("Congratulations!! test alloc_block_FF completed successfully.\n");
f010e757:	83 ec 0c             	sub    $0xc,%esp
f010e75a:	68 18 79 13 f0       	push   $0xf0137918
f010e75f:	e8 c9 24 ff ff       	call   f0100c2d <cprintf>
f010e764:	83 c4 10             	add    $0x10,%esp
}
f010e767:	90                   	nop
f010e768:	8d 65 f4             	lea    -0xc(%ebp),%esp
f010e76b:	5b                   	pop    %ebx
f010e76c:	5e                   	pop    %esi
f010e76d:	5f                   	pop    %edi
f010e76e:	5d                   	pop    %ebp
f010e76f:	c3                   	ret    

f010e770 <test_alloc_block_BF>:

void test_alloc_block_BF()
{
f010e770:	55                   	push   %ebp
f010e771:	89 e5                	mov    %esp,%ebp
f010e773:	57                   	push   %edi
f010e774:	56                   	push   %esi
f010e775:	53                   	push   %ebx
f010e776:	81 ec cc 00 00 00    	sub    $0xcc,%esp
	uint32 numOfBlocks = 10;
f010e77c:	c7 45 e0 0a 00 00 00 	movl   $0xa,-0x20(%ebp)
	initialize_MemBlocksList(numOfBlocks);
f010e783:	83 ec 0c             	sub    $0xc,%esp
f010e786:	ff 75 e0             	pushl  -0x20(%ebp)
f010e789:	e8 07 2b 02 00       	call   f0131295 <initialize_MemBlocksList>
f010e78e:	83 c4 10             	add    $0x10,%esp
	LIST_INIT(&AllocMemBlocksList);
f010e791:	c7 05 d0 8a 65 f0 00 	movl   $0x0,0xf0658ad0
f010e798:	00 00 00 
f010e79b:	c7 05 d4 8a 65 f0 00 	movl   $0x0,0xf0658ad4
f010e7a2:	00 00 00 
f010e7a5:	c7 05 dc 8a 65 f0 00 	movl   $0x0,0xf0658adc
f010e7ac:	00 00 00 

	//Fill AllocMemBlocksList with multiple blocks
	#define numOfFreeBlocks_BF 7
	uint32 BlocksSVAs[numOfFreeBlocks_BF] = {0x0, 0x2000, 0x4000, 0x7000, 0x19000, 0x1A400, 0x21B400}; //0KB, 8KB, 16KB, 28KB, 100KB, 105KB, 2,157KB
f010e7af:	8d 45 b8             	lea    -0x48(%ebp),%eax
f010e7b2:	bb 94 7b 13 f0       	mov    $0xf0137b94,%ebx
f010e7b7:	ba 07 00 00 00       	mov    $0x7,%edx
f010e7bc:	89 c7                	mov    %eax,%edi
f010e7be:	89 de                	mov    %ebx,%esi
f010e7c0:	89 d1                	mov    %edx,%ecx
f010e7c2:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
	uint32 BlocksSizes[numOfFreeBlocks_BF] = {2*kilo, 8*kilo, 1*kilo, 9*kilo, 4*kilo, 2*Mega, 1*Mega} ;
f010e7c4:	8d 45 9c             	lea    -0x64(%ebp),%eax
f010e7c7:	bb b0 7b 13 f0       	mov    $0xf0137bb0,%ebx
f010e7cc:	ba 07 00 00 00       	mov    $0x7,%edx
f010e7d1:	89 c7                	mov    %eax,%edi
f010e7d3:	89 de                	mov    %ebx,%esi
f010e7d5:	89 d1                	mov    %edx,%ecx
f010e7d7:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)

	LIST_INIT(&FreeMemBlocksList);
f010e7d9:	c7 05 a0 0e 6c f0 00 	movl   $0x0,0xf06c0ea0
f010e7e0:	00 00 00 
f010e7e3:	c7 05 a4 0e 6c f0 00 	movl   $0x0,0xf06c0ea4
f010e7ea:	00 00 00 
f010e7ed:	c7 05 ac 0e 6c f0 00 	movl   $0x0,0xf06c0eac
f010e7f4:	00 00 00 
	struct MemBlock freeBlocks[numOfFreeBlocks_BF];
	for (int i = 0; i < numOfFreeBlocks_BF; ++i)
f010e7f7:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
f010e7fe:	e9 5f 01 00 00       	jmp    f010e962 <test_alloc_block_BF+0x1f2>
	{
		freeBlocks[i].sva = BlocksSVAs[i];
f010e803:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010e806:	8b 44 85 b8          	mov    -0x48(%ebp,%eax,4),%eax
f010e80a:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010e80d:	c1 e2 04             	shl    $0x4,%edx
f010e810:	8d 5d e8             	lea    -0x18(%ebp),%ebx
f010e813:	01 da                	add    %ebx,%edx
f010e815:	81 ea b4 00 00 00    	sub    $0xb4,%edx
f010e81b:	89 02                	mov    %eax,(%edx)
		freeBlocks[i].size = BlocksSizes[i];
f010e81d:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010e820:	8b 44 85 9c          	mov    -0x64(%ebp,%eax,4),%eax
f010e824:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010e827:	c1 e2 04             	shl    $0x4,%edx
f010e82a:	8d 75 e8             	lea    -0x18(%ebp),%esi
f010e82d:	01 f2                	add    %esi,%edx
f010e82f:	81 ea b0 00 00 00    	sub    $0xb0,%edx
f010e835:	89 02                	mov    %eax,(%edx)
		if (i == 0)
f010e837:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f010e83b:	0f 85 92 00 00 00    	jne    f010e8d3 <test_alloc_block_BF+0x163>
			LIST_INSERT_HEAD(&FreeMemBlocksList, &(freeBlocks[i]));
f010e841:	a1 a0 0e 6c f0       	mov    0xf06c0ea0,%eax
f010e846:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010e849:	c1 e2 04             	shl    $0x4,%edx
f010e84c:	8d 7d e8             	lea    -0x18(%ebp),%edi
f010e84f:	01 fa                	add    %edi,%edx
f010e851:	81 ea bc 00 00 00    	sub    $0xbc,%edx
f010e857:	89 02                	mov    %eax,(%edx)
f010e859:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010e85c:	c1 e0 04             	shl    $0x4,%eax
f010e85f:	8d 5d e8             	lea    -0x18(%ebp),%ebx
f010e862:	01 d8                	add    %ebx,%eax
f010e864:	2d bc 00 00 00       	sub    $0xbc,%eax
f010e869:	8b 00                	mov    (%eax),%eax
f010e86b:	85 c0                	test   %eax,%eax
f010e86d:	74 18                	je     f010e887 <test_alloc_block_BF+0x117>
f010e86f:	a1 a0 0e 6c f0       	mov    0xf06c0ea0,%eax
f010e874:	8d 95 2c ff ff ff    	lea    -0xd4(%ebp),%edx
f010e87a:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
f010e87d:	c1 e1 04             	shl    $0x4,%ecx
f010e880:	01 ca                	add    %ecx,%edx
f010e882:	89 50 04             	mov    %edx,0x4(%eax)
f010e885:	eb 13                	jmp    f010e89a <test_alloc_block_BF+0x12a>
f010e887:	8d 85 2c ff ff ff    	lea    -0xd4(%ebp),%eax
f010e88d:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010e890:	c1 e2 04             	shl    $0x4,%edx
f010e893:	01 d0                	add    %edx,%eax
f010e895:	a3 a4 0e 6c f0       	mov    %eax,0xf06c0ea4
f010e89a:	8d 85 2c ff ff ff    	lea    -0xd4(%ebp),%eax
f010e8a0:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010e8a3:	c1 e2 04             	shl    $0x4,%edx
f010e8a6:	01 d0                	add    %edx,%eax
f010e8a8:	a3 a0 0e 6c f0       	mov    %eax,0xf06c0ea0
f010e8ad:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010e8b0:	c1 e0 04             	shl    $0x4,%eax
f010e8b3:	8d 75 e8             	lea    -0x18(%ebp),%esi
f010e8b6:	01 f0                	add    %esi,%eax
f010e8b8:	2d b8 00 00 00       	sub    $0xb8,%eax
f010e8bd:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f010e8c3:	a1 ac 0e 6c f0       	mov    0xf06c0eac,%eax
f010e8c8:	40                   	inc    %eax
f010e8c9:	a3 ac 0e 6c f0       	mov    %eax,0xf06c0eac
f010e8ce:	e9 8c 00 00 00       	jmp    f010e95f <test_alloc_block_BF+0x1ef>
		else
			LIST_INSERT_TAIL(&FreeMemBlocksList, &(freeBlocks[i]));
f010e8d3:	a1 a4 0e 6c f0       	mov    0xf06c0ea4,%eax
f010e8d8:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010e8db:	c1 e2 04             	shl    $0x4,%edx
f010e8de:	8d 7d e8             	lea    -0x18(%ebp),%edi
f010e8e1:	01 fa                	add    %edi,%edx
f010e8e3:	81 ea b8 00 00 00    	sub    $0xb8,%edx
f010e8e9:	89 02                	mov    %eax,(%edx)
f010e8eb:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010e8ee:	c1 e0 04             	shl    $0x4,%eax
f010e8f1:	8d 5d e8             	lea    -0x18(%ebp),%ebx
f010e8f4:	01 d8                	add    %ebx,%eax
f010e8f6:	2d b8 00 00 00       	sub    $0xb8,%eax
f010e8fb:	8b 00                	mov    (%eax),%eax
f010e8fd:	85 c0                	test   %eax,%eax
f010e8ff:	74 17                	je     f010e918 <test_alloc_block_BF+0x1a8>
f010e901:	a1 a4 0e 6c f0       	mov    0xf06c0ea4,%eax
f010e906:	8d 95 2c ff ff ff    	lea    -0xd4(%ebp),%edx
f010e90c:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
f010e90f:	c1 e1 04             	shl    $0x4,%ecx
f010e912:	01 ca                	add    %ecx,%edx
f010e914:	89 10                	mov    %edx,(%eax)
f010e916:	eb 13                	jmp    f010e92b <test_alloc_block_BF+0x1bb>
f010e918:	8d 85 2c ff ff ff    	lea    -0xd4(%ebp),%eax
f010e91e:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010e921:	c1 e2 04             	shl    $0x4,%edx
f010e924:	01 d0                	add    %edx,%eax
f010e926:	a3 a0 0e 6c f0       	mov    %eax,0xf06c0ea0
f010e92b:	8d 85 2c ff ff ff    	lea    -0xd4(%ebp),%eax
f010e931:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010e934:	c1 e2 04             	shl    $0x4,%edx
f010e937:	01 d0                	add    %edx,%eax
f010e939:	a3 a4 0e 6c f0       	mov    %eax,0xf06c0ea4
f010e93e:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010e941:	c1 e0 04             	shl    $0x4,%eax
f010e944:	8d 75 e8             	lea    -0x18(%ebp),%esi
f010e947:	01 f0                	add    %esi,%eax
f010e949:	2d bc 00 00 00       	sub    $0xbc,%eax
f010e94e:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f010e954:	a1 ac 0e 6c f0       	mov    0xf06c0eac,%eax
f010e959:	40                   	inc    %eax
f010e95a:	a3 ac 0e 6c f0       	mov    %eax,0xf06c0eac
	uint32 BlocksSVAs[numOfFreeBlocks_BF] = {0x0, 0x2000, 0x4000, 0x7000, 0x19000, 0x1A400, 0x21B400}; //0KB, 8KB, 16KB, 28KB, 100KB, 105KB, 2,157KB
	uint32 BlocksSizes[numOfFreeBlocks_BF] = {2*kilo, 8*kilo, 1*kilo, 9*kilo, 4*kilo, 2*Mega, 1*Mega} ;

	LIST_INIT(&FreeMemBlocksList);
	struct MemBlock freeBlocks[numOfFreeBlocks_BF];
	for (int i = 0; i < numOfFreeBlocks_BF; ++i)
f010e95f:	ff 45 e4             	incl   -0x1c(%ebp)
f010e962:	83 7d e4 06          	cmpl   $0x6,-0x1c(%ebp)
f010e966:	0f 8e 97 fe ff ff    	jle    f010e803 <test_alloc_block_BF+0x93>
			LIST_INSERT_TAIL(&FreeMemBlocksList, &(freeBlocks[i]));
	}

	//====================================================================//
	/*BF ALLOC Scenario 1: Try to allocate a block with a size greater than the size of any existing free block*/
	struct MemBlock * blockToAlloc = alloc_block_BF(4*Mega);
f010e96c:	83 ec 0c             	sub    $0xc,%esp
f010e96f:	68 00 00 40 00       	push   $0x400000
f010e974:	e8 ab 2e 02 00       	call   f0131824 <alloc_block_BF>
f010e979:	83 c4 10             	add    $0x10,%esp
f010e97c:	89 45 dc             	mov    %eax,-0x24(%ebp)

	//Check returned block content
	if(blockToAlloc != NULL) panic("alloc_block_BF: WRONG BF ALLOC - alloc_block_BF find a block instead no existing free blocks with the given size.");
f010e97f:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f010e983:	74 17                	je     f010e99c <test_alloc_block_BF+0x22c>
f010e985:	83 ec 04             	sub    $0x4,%esp
f010e988:	68 a0 79 13 f0       	push   $0xf01379a0
f010e98d:	68 66 01 00 00       	push   $0x166
f010e992:	68 34 72 13 f0       	push   $0xf0137234
f010e997:	e8 0a 18 ff ff       	call   f01001a6 <_panic>

	//Check size of AvailableMemBlocksList, FreeMemBlocksList & AllocMemBlocksList
	if (LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks || LIST_SIZE(&(FreeMemBlocksList)) != numOfFreeBlocks_BF || LIST_SIZE(&(AllocMemBlocksList)) != 0)
f010e99c:	a1 e0 0e 6c f0       	mov    0xf06c0ee0,%eax
f010e9a1:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f010e9a4:	75 13                	jne    f010e9b9 <test_alloc_block_BF+0x249>
f010e9a6:	a1 ac 0e 6c f0       	mov    0xf06c0eac,%eax
f010e9ab:	83 f8 07             	cmp    $0x7,%eax
f010e9ae:	75 09                	jne    f010e9b9 <test_alloc_block_BF+0x249>
f010e9b0:	a1 dc 8a 65 f0       	mov    0xf0658adc,%eax
f010e9b5:	85 c0                	test   %eax,%eax
f010e9b7:	74 17                	je     f010e9d0 <test_alloc_block_BF+0x260>
		panic("find_block: AvailableMemBlocksList, FreeMemBlocksList & AllocMemBlocksList are affected and this shall not occurred.");
f010e9b9:	83 ec 04             	sub    $0x4,%esp
f010e9bc:	68 60 77 13 f0       	push   $0xf0137760
f010e9c1:	68 6a 01 00 00       	push   $0x16a
f010e9c6:	68 34 72 13 f0       	push   $0xf0137234
f010e9cb:	e8 d6 17 ff ff       	call   f01001a6 <_panic>

	//====================================================================//
	/*BF ALLOC Scenario 2: Try to allocate a block with a size equal to the size of the one existing free blocks (NOT THE FIRST BLOCK FIT)*/
	blockToAlloc = alloc_block_BF(1*Mega);
f010e9d0:	83 ec 0c             	sub    $0xc,%esp
f010e9d3:	68 00 00 10 00       	push   $0x100000
f010e9d8:	e8 47 2e 02 00       	call   f0131824 <alloc_block_BF>
f010e9dd:	83 c4 10             	add    $0x10,%esp
f010e9e0:	89 45 dc             	mov    %eax,-0x24(%ebp)

	//Check returned block content
	if(blockToAlloc == NULL || blockToAlloc->size != 1*Mega || blockToAlloc->sva != 0x21B400)
f010e9e3:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f010e9e7:	74 1a                	je     f010ea03 <test_alloc_block_BF+0x293>
f010e9e9:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010e9ec:	8b 40 0c             	mov    0xc(%eax),%eax
f010e9ef:	3d 00 00 10 00       	cmp    $0x100000,%eax
f010e9f4:	75 0d                	jne    f010ea03 <test_alloc_block_BF+0x293>
f010e9f6:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010e9f9:	8b 40 08             	mov    0x8(%eax),%eax
f010e9fc:	3d 00 b4 21 00       	cmp    $0x21b400,%eax
f010ea01:	74 17                	je     f010ea1a <test_alloc_block_BF+0x2aa>
		panic("alloc_block_BF: WRONG BF ALLOC - alloc_block_BF find a wrong block.");
f010ea03:	83 ec 04             	sub    $0x4,%esp
f010ea06:	68 14 7a 13 f0       	push   $0xf0137a14
f010ea0b:	68 72 01 00 00       	push   $0x172
f010ea10:	68 34 72 13 f0       	push   $0xf0137234
f010ea15:	e8 8c 17 ff ff       	call   f01001a6 <_panic>

	//Check size of AvailableMemBlocksList, FreeMemBlocksList & AllocMemBlocksList
	if (LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks || LIST_SIZE(&(FreeMemBlocksList)) != numOfFreeBlocks_BF-1 || LIST_SIZE(&(AllocMemBlocksList)) != 0)
f010ea1a:	a1 e0 0e 6c f0       	mov    0xf06c0ee0,%eax
f010ea1f:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f010ea22:	75 13                	jne    f010ea37 <test_alloc_block_BF+0x2c7>
f010ea24:	a1 ac 0e 6c f0       	mov    0xf06c0eac,%eax
f010ea29:	83 f8 06             	cmp    $0x6,%eax
f010ea2c:	75 09                	jne    f010ea37 <test_alloc_block_BF+0x2c7>
f010ea2e:	a1 dc 8a 65 f0       	mov    0xf0658adc,%eax
f010ea33:	85 c0                	test   %eax,%eax
f010ea35:	74 17                	je     f010ea4e <test_alloc_block_BF+0x2de>
		panic("alloc_block_BF: Wrong sizes for AvailableMemBlocksList, FreeMemBlocksList and AllocMemBlocksList.");
f010ea37:	83 ec 04             	sub    $0x4,%esp
f010ea3a:	68 58 7a 13 f0       	push   $0xf0137a58
f010ea3f:	68 76 01 00 00       	push   $0x176
f010ea44:	68 34 72 13 f0       	push   $0xf0137234
f010ea49:	e8 58 17 ff ff       	call   f01001a6 <_panic>

	//Check FreeMemBlocksList content
	uint32 size = 0;
f010ea4e:	c7 85 28 ff ff ff 00 	movl   $0x0,-0xd8(%ebp)
f010ea55:	00 00 00 
	uint32 actualSize = numOfFreeBlocks_BF-1;
f010ea58:	c7 45 d8 06 00 00 00 	movl   $0x6,-0x28(%ebp)
	BlocksSVAs[6] = 0;
f010ea5f:	c7 45 d0 00 00 00 00 	movl   $0x0,-0x30(%ebp)
	BlocksSizes[6] = 0;
f010ea66:	c7 45 b4 00 00 00 00 	movl   $0x0,-0x4c(%ebp)
	int chk = check_list_data(&FreeMemBlocksList, BlocksSVAs, BlocksSizes, &size, actualSize);
f010ea6d:	83 ec 0c             	sub    $0xc,%esp
f010ea70:	ff 75 d8             	pushl  -0x28(%ebp)
f010ea73:	8d 85 28 ff ff ff    	lea    -0xd8(%ebp),%eax
f010ea79:	50                   	push   %eax
f010ea7a:	8d 45 9c             	lea    -0x64(%ebp),%eax
f010ea7d:	50                   	push   %eax
f010ea7e:	8d 45 b8             	lea    -0x48(%ebp),%eax
f010ea81:	50                   	push   %eax
f010ea82:	68 a0 0e 6c f0       	push   $0xf06c0ea0
f010ea87:	e8 dd 17 00 00       	call   f0110269 <check_list_data>
f010ea8c:	83 c4 20             	add    $0x20,%esp
f010ea8f:	89 45 d4             	mov    %eax,-0x2c(%ebp)
	if(chk != 1) panic("alloc_block_BF: WRONG BF ALLOC .. FreeMemBlocksList content is not correct.");
f010ea92:	83 7d d4 01          	cmpl   $0x1,-0x2c(%ebp)
f010ea96:	74 17                	je     f010eaaf <test_alloc_block_BF+0x33f>
f010ea98:	83 ec 04             	sub    $0x4,%esp
f010ea9b:	68 bc 7a 13 f0       	push   $0xf0137abc
f010eaa0:	68 7e 01 00 00       	push   $0x17e
f010eaa5:	68 34 72 13 f0       	push   $0xf0137234
f010eaaa:	e8 f7 16 ff ff       	call   f01001a6 <_panic>
	if(size != actualSize) panic("alloc_block_BF: WRONG BF ALLOC .. FreeMemBlocksList size is not correct.");
f010eaaf:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f010eab5:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f010eab8:	74 17                	je     f010ead1 <test_alloc_block_BF+0x361>
f010eaba:	83 ec 04             	sub    $0x4,%esp
f010eabd:	68 08 7b 13 f0       	push   $0xf0137b08
f010eac2:	68 7f 01 00 00       	push   $0x17f
f010eac7:	68 34 72 13 f0       	push   $0xf0137234
f010eacc:	e8 d5 16 ff ff       	call   f01001a6 <_panic>

	//====================================================================//
	/*BF ALLOC Scenario 3: Try to allocate a block with a size smaller than the size of any existing free block (ONLY ONE BLOCK CAN FIT)*/
	blockToAlloc = alloc_block_BF(1*Mega);
f010ead1:	83 ec 0c             	sub    $0xc,%esp
f010ead4:	68 00 00 10 00       	push   $0x100000
f010ead9:	e8 46 2d 02 00       	call   f0131824 <alloc_block_BF>
f010eade:	83 c4 10             	add    $0x10,%esp
f010eae1:	89 45 dc             	mov    %eax,-0x24(%ebp)

	//Check returned block content
	if(blockToAlloc == NULL || blockToAlloc->size != 1*Mega || blockToAlloc->sva != 0x1A400)
f010eae4:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f010eae8:	74 1a                	je     f010eb04 <test_alloc_block_BF+0x394>
f010eaea:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010eaed:	8b 40 0c             	mov    0xc(%eax),%eax
f010eaf0:	3d 00 00 10 00       	cmp    $0x100000,%eax
f010eaf5:	75 0d                	jne    f010eb04 <test_alloc_block_BF+0x394>
f010eaf7:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010eafa:	8b 40 08             	mov    0x8(%eax),%eax
f010eafd:	3d 00 a4 01 00       	cmp    $0x1a400,%eax
f010eb02:	74 17                	je     f010eb1b <test_alloc_block_BF+0x3ab>
		panic("alloc_block_BF: WRONG BF ALLOC - alloc_block_BF find a wrong block.");
f010eb04:	83 ec 04             	sub    $0x4,%esp
f010eb07:	68 14 7a 13 f0       	push   $0xf0137a14
f010eb0c:	68 87 01 00 00       	push   $0x187
f010eb11:	68 34 72 13 f0       	push   $0xf0137234
f010eb16:	e8 8b 16 ff ff       	call   f01001a6 <_panic>

	//Check size of AvailableMemBlocksList, FreeMemBlocksList & AllocMemBlocksList
	if (LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks-1 || LIST_SIZE(&(FreeMemBlocksList)) != numOfFreeBlocks_BF-1 || LIST_SIZE(&(AllocMemBlocksList)) != 0)
f010eb1b:	a1 e0 0e 6c f0       	mov    0xf06c0ee0,%eax
f010eb20:	8b 55 e0             	mov    -0x20(%ebp),%edx
f010eb23:	4a                   	dec    %edx
f010eb24:	39 d0                	cmp    %edx,%eax
f010eb26:	75 13                	jne    f010eb3b <test_alloc_block_BF+0x3cb>
f010eb28:	a1 ac 0e 6c f0       	mov    0xf06c0eac,%eax
f010eb2d:	83 f8 06             	cmp    $0x6,%eax
f010eb30:	75 09                	jne    f010eb3b <test_alloc_block_BF+0x3cb>
f010eb32:	a1 dc 8a 65 f0       	mov    0xf0658adc,%eax
f010eb37:	85 c0                	test   %eax,%eax
f010eb39:	74 17                	je     f010eb52 <test_alloc_block_BF+0x3e2>
		panic("alloc_block_BF: Wrong sizes for AvailableMemBlocksList, FreeMemBlocksList and AllocMemBlocksList.");
f010eb3b:	83 ec 04             	sub    $0x4,%esp
f010eb3e:	68 58 7a 13 f0       	push   $0xf0137a58
f010eb43:	68 8b 01 00 00       	push   $0x18b
f010eb48:	68 34 72 13 f0       	push   $0xf0137234
f010eb4d:	e8 54 16 ff ff       	call   f01001a6 <_panic>

	//Check FreeMemBlocksList content
	size = 0;
f010eb52:	c7 85 28 ff ff ff 00 	movl   $0x0,-0xd8(%ebp)
f010eb59:	00 00 00 
	actualSize = numOfFreeBlocks_BF-1;
f010eb5c:	c7 45 d8 06 00 00 00 	movl   $0x6,-0x28(%ebp)
	BlocksSVAs[5] = 0x11A400;  //105KB + 1Mega = (105*1024)+(1024*1024)
f010eb63:	c7 45 cc 00 a4 11 00 	movl   $0x11a400,-0x34(%ebp)
	BlocksSizes[5] = 1*Mega;
f010eb6a:	c7 45 b0 00 00 10 00 	movl   $0x100000,-0x50(%ebp)
	chk = check_list_data(&FreeMemBlocksList, BlocksSVAs, BlocksSizes, &size, actualSize);
f010eb71:	83 ec 0c             	sub    $0xc,%esp
f010eb74:	ff 75 d8             	pushl  -0x28(%ebp)
f010eb77:	8d 85 28 ff ff ff    	lea    -0xd8(%ebp),%eax
f010eb7d:	50                   	push   %eax
f010eb7e:	8d 45 9c             	lea    -0x64(%ebp),%eax
f010eb81:	50                   	push   %eax
f010eb82:	8d 45 b8             	lea    -0x48(%ebp),%eax
f010eb85:	50                   	push   %eax
f010eb86:	68 a0 0e 6c f0       	push   $0xf06c0ea0
f010eb8b:	e8 d9 16 00 00       	call   f0110269 <check_list_data>
f010eb90:	83 c4 20             	add    $0x20,%esp
f010eb93:	89 45 d4             	mov    %eax,-0x2c(%ebp)
	if(chk != 1) panic("alloc_block_BF: WRONG BF ALLOC .. FreeMemBlocksList content is not correct.");
f010eb96:	83 7d d4 01          	cmpl   $0x1,-0x2c(%ebp)
f010eb9a:	74 17                	je     f010ebb3 <test_alloc_block_BF+0x443>
f010eb9c:	83 ec 04             	sub    $0x4,%esp
f010eb9f:	68 bc 7a 13 f0       	push   $0xf0137abc
f010eba4:	68 93 01 00 00       	push   $0x193
f010eba9:	68 34 72 13 f0       	push   $0xf0137234
f010ebae:	e8 f3 15 ff ff       	call   f01001a6 <_panic>
	if(size != actualSize) panic("alloc_block_BF: WRONG BF ALLOC .. FreeMemBlocksList size is not correct.");
f010ebb3:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f010ebb9:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f010ebbc:	74 17                	je     f010ebd5 <test_alloc_block_BF+0x465>
f010ebbe:	83 ec 04             	sub    $0x4,%esp
f010ebc1:	68 08 7b 13 f0       	push   $0xf0137b08
f010ebc6:	68 94 01 00 00       	push   $0x194
f010ebcb:	68 34 72 13 f0       	push   $0xf0137234
f010ebd0:	e8 d1 15 ff ff       	call   f01001a6 <_panic>

	//====================================================================//
	/*BF ALLOC Scenario 4: Try to allocate a block with a size smaller than the size of any existing free block (MORE THAN ONE BLOCK CAN FIT)*/
	blockToAlloc = alloc_block_BF(3*kilo);
f010ebd5:	83 ec 0c             	sub    $0xc,%esp
f010ebd8:	68 00 0c 00 00       	push   $0xc00
f010ebdd:	e8 42 2c 02 00       	call   f0131824 <alloc_block_BF>
f010ebe2:	83 c4 10             	add    $0x10,%esp
f010ebe5:	89 45 dc             	mov    %eax,-0x24(%ebp)

	//Check returned block content
	if(blockToAlloc == NULL || blockToAlloc->size != 3*kilo || blockToAlloc->sva != 0x19000)
f010ebe8:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f010ebec:	74 1a                	je     f010ec08 <test_alloc_block_BF+0x498>
f010ebee:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010ebf1:	8b 40 0c             	mov    0xc(%eax),%eax
f010ebf4:	3d 00 0c 00 00       	cmp    $0xc00,%eax
f010ebf9:	75 0d                	jne    f010ec08 <test_alloc_block_BF+0x498>
f010ebfb:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010ebfe:	8b 40 08             	mov    0x8(%eax),%eax
f010ec01:	3d 00 90 01 00       	cmp    $0x19000,%eax
f010ec06:	74 17                	je     f010ec1f <test_alloc_block_BF+0x4af>
		panic("alloc_block_BF: WRONG BF ALLOC - alloc_block_BF find a wrong block.");
f010ec08:	83 ec 04             	sub    $0x4,%esp
f010ec0b:	68 14 7a 13 f0       	push   $0xf0137a14
f010ec10:	68 9c 01 00 00       	push   $0x19c
f010ec15:	68 34 72 13 f0       	push   $0xf0137234
f010ec1a:	e8 87 15 ff ff       	call   f01001a6 <_panic>

	//Check size of AvailableMemBlocksList, FreeMemBlocksList & AllocMemBlocksList
	if (LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks-2 || LIST_SIZE(&(FreeMemBlocksList)) != numOfFreeBlocks_BF-1 || LIST_SIZE(&(AllocMemBlocksList)) != 0)
f010ec1f:	a1 e0 0e 6c f0       	mov    0xf06c0ee0,%eax
f010ec24:	8b 55 e0             	mov    -0x20(%ebp),%edx
f010ec27:	83 ea 02             	sub    $0x2,%edx
f010ec2a:	39 d0                	cmp    %edx,%eax
f010ec2c:	75 13                	jne    f010ec41 <test_alloc_block_BF+0x4d1>
f010ec2e:	a1 ac 0e 6c f0       	mov    0xf06c0eac,%eax
f010ec33:	83 f8 06             	cmp    $0x6,%eax
f010ec36:	75 09                	jne    f010ec41 <test_alloc_block_BF+0x4d1>
f010ec38:	a1 dc 8a 65 f0       	mov    0xf0658adc,%eax
f010ec3d:	85 c0                	test   %eax,%eax
f010ec3f:	74 17                	je     f010ec58 <test_alloc_block_BF+0x4e8>
		panic("alloc_block_BF: Wrong sizes for AvailableMemBlocksList, FreeMemBlocksList and AllocMemBlocksList.");
f010ec41:	83 ec 04             	sub    $0x4,%esp
f010ec44:	68 58 7a 13 f0       	push   $0xf0137a58
f010ec49:	68 a0 01 00 00       	push   $0x1a0
f010ec4e:	68 34 72 13 f0       	push   $0xf0137234
f010ec53:	e8 4e 15 ff ff       	call   f01001a6 <_panic>

	//Check FreeMemBlocksList content
	size = 0;
f010ec58:	c7 85 28 ff ff ff 00 	movl   $0x0,-0xd8(%ebp)
f010ec5f:	00 00 00 
	actualSize = numOfFreeBlocks_BF-1;
f010ec62:	c7 45 d8 06 00 00 00 	movl   $0x6,-0x28(%ebp)
	BlocksSVAs[4] = 0x19C00;  //100KB + 3KB
f010ec69:	c7 45 c8 00 9c 01 00 	movl   $0x19c00,-0x38(%ebp)
	BlocksSizes[4] = 1*kilo;
f010ec70:	c7 45 ac 00 04 00 00 	movl   $0x400,-0x54(%ebp)
	chk = check_list_data(&FreeMemBlocksList, BlocksSVAs, BlocksSizes, &size, actualSize);
f010ec77:	83 ec 0c             	sub    $0xc,%esp
f010ec7a:	ff 75 d8             	pushl  -0x28(%ebp)
f010ec7d:	8d 85 28 ff ff ff    	lea    -0xd8(%ebp),%eax
f010ec83:	50                   	push   %eax
f010ec84:	8d 45 9c             	lea    -0x64(%ebp),%eax
f010ec87:	50                   	push   %eax
f010ec88:	8d 45 b8             	lea    -0x48(%ebp),%eax
f010ec8b:	50                   	push   %eax
f010ec8c:	68 a0 0e 6c f0       	push   $0xf06c0ea0
f010ec91:	e8 d3 15 00 00       	call   f0110269 <check_list_data>
f010ec96:	83 c4 20             	add    $0x20,%esp
f010ec99:	89 45 d4             	mov    %eax,-0x2c(%ebp)
	if(chk != 1) panic("alloc_block_BF: WRONG BF ALLOC .. FreeMemBlocksList content is not correct.");
f010ec9c:	83 7d d4 01          	cmpl   $0x1,-0x2c(%ebp)
f010eca0:	74 17                	je     f010ecb9 <test_alloc_block_BF+0x549>
f010eca2:	83 ec 04             	sub    $0x4,%esp
f010eca5:	68 bc 7a 13 f0       	push   $0xf0137abc
f010ecaa:	68 a8 01 00 00       	push   $0x1a8
f010ecaf:	68 34 72 13 f0       	push   $0xf0137234
f010ecb4:	e8 ed 14 ff ff       	call   f01001a6 <_panic>
	if(size != actualSize) panic("alloc_block_BF: WRONG BF ALLOC .. FreeMemBlocksList size is not correct.");
f010ecb9:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f010ecbf:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f010ecc2:	74 17                	je     f010ecdb <test_alloc_block_BF+0x56b>
f010ecc4:	83 ec 04             	sub    $0x4,%esp
f010ecc7:	68 08 7b 13 f0       	push   $0xf0137b08
f010eccc:	68 a9 01 00 00       	push   $0x1a9
f010ecd1:	68 34 72 13 f0       	push   $0xf0137234
f010ecd6:	e8 cb 14 ff ff       	call   f01001a6 <_panic>

	//====================================================================//
	/*BF ALLOC Scenario 5: Try to allocate a block @ the head of the free block list */
	blockToAlloc = alloc_block_BF(2*kilo);
f010ecdb:	83 ec 0c             	sub    $0xc,%esp
f010ecde:	68 00 08 00 00       	push   $0x800
f010ece3:	e8 3c 2b 02 00       	call   f0131824 <alloc_block_BF>
f010ece8:	83 c4 10             	add    $0x10,%esp
f010eceb:	89 45 dc             	mov    %eax,-0x24(%ebp)

	//Check returned block content
	if(blockToAlloc == NULL || blockToAlloc->size != 2*kilo || blockToAlloc->sva != 0x0)
f010ecee:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f010ecf2:	74 17                	je     f010ed0b <test_alloc_block_BF+0x59b>
f010ecf4:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010ecf7:	8b 40 0c             	mov    0xc(%eax),%eax
f010ecfa:	3d 00 08 00 00       	cmp    $0x800,%eax
f010ecff:	75 0a                	jne    f010ed0b <test_alloc_block_BF+0x59b>
f010ed01:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010ed04:	8b 40 08             	mov    0x8(%eax),%eax
f010ed07:	85 c0                	test   %eax,%eax
f010ed09:	74 17                	je     f010ed22 <test_alloc_block_BF+0x5b2>
		panic("alloc_block_BF: WRONG BF ALLOC - alloc_block_BF find a wrong block.");
f010ed0b:	83 ec 04             	sub    $0x4,%esp
f010ed0e:	68 14 7a 13 f0       	push   $0xf0137a14
f010ed13:	68 b1 01 00 00       	push   $0x1b1
f010ed18:	68 34 72 13 f0       	push   $0xf0137234
f010ed1d:	e8 84 14 ff ff       	call   f01001a6 <_panic>

	//Check size of AvailableMemBlocksList, FreeMemBlocksList & AllocMemBlocksList
	if (LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks-2 || LIST_SIZE(&(FreeMemBlocksList)) != numOfFreeBlocks_BF-2 || LIST_SIZE(&(AllocMemBlocksList)) != 0)
f010ed22:	a1 e0 0e 6c f0       	mov    0xf06c0ee0,%eax
f010ed27:	8b 55 e0             	mov    -0x20(%ebp),%edx
f010ed2a:	83 ea 02             	sub    $0x2,%edx
f010ed2d:	39 d0                	cmp    %edx,%eax
f010ed2f:	75 13                	jne    f010ed44 <test_alloc_block_BF+0x5d4>
f010ed31:	a1 ac 0e 6c f0       	mov    0xf06c0eac,%eax
f010ed36:	83 f8 05             	cmp    $0x5,%eax
f010ed39:	75 09                	jne    f010ed44 <test_alloc_block_BF+0x5d4>
f010ed3b:	a1 dc 8a 65 f0       	mov    0xf0658adc,%eax
f010ed40:	85 c0                	test   %eax,%eax
f010ed42:	74 17                	je     f010ed5b <test_alloc_block_BF+0x5eb>
		panic("alloc_block_BF: Wrong sizes for AvailableMemBlocksList, FreeMemBlocksList and AllocMemBlocksList.");
f010ed44:	83 ec 04             	sub    $0x4,%esp
f010ed47:	68 58 7a 13 f0       	push   $0xf0137a58
f010ed4c:	68 b5 01 00 00       	push   $0x1b5
f010ed51:	68 34 72 13 f0       	push   $0xf0137234
f010ed56:	e8 4b 14 ff ff       	call   f01001a6 <_panic>

	//Check FreeMemBlocksList content
	size = 0;
f010ed5b:	c7 85 28 ff ff ff 00 	movl   $0x0,-0xd8(%ebp)
f010ed62:	00 00 00 
	actualSize = numOfFreeBlocks_BF-2;
f010ed65:	c7 45 d8 05 00 00 00 	movl   $0x5,-0x28(%ebp)
	BlocksSVAs[0] = 0x0;
f010ed6c:	c7 45 b8 00 00 00 00 	movl   $0x0,-0x48(%ebp)
	BlocksSizes[0] = 0;
f010ed73:	c7 45 9c 00 00 00 00 	movl   $0x0,-0x64(%ebp)
	chk = check_list_data(&FreeMemBlocksList, BlocksSVAs, BlocksSizes, &size, actualSize);
f010ed7a:	83 ec 0c             	sub    $0xc,%esp
f010ed7d:	ff 75 d8             	pushl  -0x28(%ebp)
f010ed80:	8d 85 28 ff ff ff    	lea    -0xd8(%ebp),%eax
f010ed86:	50                   	push   %eax
f010ed87:	8d 45 9c             	lea    -0x64(%ebp),%eax
f010ed8a:	50                   	push   %eax
f010ed8b:	8d 45 b8             	lea    -0x48(%ebp),%eax
f010ed8e:	50                   	push   %eax
f010ed8f:	68 a0 0e 6c f0       	push   $0xf06c0ea0
f010ed94:	e8 d0 14 00 00       	call   f0110269 <check_list_data>
f010ed99:	83 c4 20             	add    $0x20,%esp
f010ed9c:	89 45 d4             	mov    %eax,-0x2c(%ebp)
	if(chk != 1) panic("alloc_block_BF: WRONG BF ALLOC .. FreeMemBlocksList content is not correct.");
f010ed9f:	83 7d d4 01          	cmpl   $0x1,-0x2c(%ebp)
f010eda3:	74 17                	je     f010edbc <test_alloc_block_BF+0x64c>
f010eda5:	83 ec 04             	sub    $0x4,%esp
f010eda8:	68 bc 7a 13 f0       	push   $0xf0137abc
f010edad:	68 bd 01 00 00       	push   $0x1bd
f010edb2:	68 34 72 13 f0       	push   $0xf0137234
f010edb7:	e8 ea 13 ff ff       	call   f01001a6 <_panic>
	if(size != actualSize) panic("alloc_block_BF: WRONG BF ALLOC .. FreeMemBlocksList size is not correct.");
f010edbc:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f010edc2:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f010edc5:	74 17                	je     f010edde <test_alloc_block_BF+0x66e>
f010edc7:	83 ec 04             	sub    $0x4,%esp
f010edca:	68 08 7b 13 f0       	push   $0xf0137b08
f010edcf:	68 be 01 00 00       	push   $0x1be
f010edd4:	68 34 72 13 f0       	push   $0xf0137234
f010edd9:	e8 c8 13 ff ff       	call   f01001a6 <_panic>

	//====================================================================//
	//show_list_content(&FreeMemBlocksList);
	cprintf("Congratulations!! test alloc_block_BF completed successfully.\n");
f010edde:	83 ec 0c             	sub    $0xc,%esp
f010ede1:	68 54 7b 13 f0       	push   $0xf0137b54
f010ede6:	e8 42 1e ff ff       	call   f0100c2d <cprintf>
f010edeb:	83 c4 10             	add    $0x10,%esp
}
f010edee:	90                   	nop
f010edef:	8d 65 f4             	lea    -0xc(%ebp),%esp
f010edf2:	5b                   	pop    %ebx
f010edf3:	5e                   	pop    %esi
f010edf4:	5f                   	pop    %edi
f010edf5:	5d                   	pop    %ebp
f010edf6:	c3                   	ret    

f010edf7 <test_alloc_block_NF>:

void test_alloc_block_NF()
{
f010edf7:	55                   	push   %ebp
f010edf8:	89 e5                	mov    %esp,%ebp
f010edfa:	57                   	push   %edi
f010edfb:	56                   	push   %esi
f010edfc:	53                   	push   %ebx
f010edfd:	81 ec ec 00 00 00    	sub    $0xec,%esp
	uint32 numOfBlocks = 10;
f010ee03:	c7 45 e0 0a 00 00 00 	movl   $0xa,-0x20(%ebp)
	initialize_MemBlocksList(numOfBlocks);
f010ee0a:	83 ec 0c             	sub    $0xc,%esp
f010ee0d:	ff 75 e0             	pushl  -0x20(%ebp)
f010ee10:	e8 80 24 02 00       	call   f0131295 <initialize_MemBlocksList>
f010ee15:	83 c4 10             	add    $0x10,%esp
	LIST_INIT(&AllocMemBlocksList);
f010ee18:	c7 05 d0 8a 65 f0 00 	movl   $0x0,0xf0658ad0
f010ee1f:	00 00 00 
f010ee22:	c7 05 d4 8a 65 f0 00 	movl   $0x0,0xf0658ad4
f010ee29:	00 00 00 
f010ee2c:	c7 05 dc 8a 65 f0 00 	movl   $0x0,0xf0658adc
f010ee33:	00 00 00 

	//Fill AllocMemBlocksList with multiple blocks
	#define numOfFreeBlocks_NF 8
	uint32 BlocksSVAs[numOfFreeBlocks_NF] = {0x0, 0x2000, 0x4000, 0x7000, 0x19000, 0x1A400, 0x21B400, 0x31B400}; //0KB, 8KB, 16KB, 28KB, 100KB, 105KB, 2,157KB, 3,181KB
f010ee36:	8d 45 b4             	lea    -0x4c(%ebp),%eax
f010ee39:	bb 60 79 13 f0       	mov    $0xf0137960,%ebx
f010ee3e:	ba 08 00 00 00       	mov    $0x8,%edx
f010ee43:	89 c7                	mov    %eax,%edi
f010ee45:	89 de                	mov    %ebx,%esi
f010ee47:	89 d1                	mov    %edx,%ecx
f010ee49:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
	uint32 BlocksSizes[numOfFreeBlocks_NF] = {3*kilo, 8*kilo, 1*kilo, 10*kilo, 4*kilo, 2*Mega, 1*Mega, 1*kilo} ;
f010ee4b:	8d 45 94             	lea    -0x6c(%ebp),%eax
f010ee4e:	bb c0 7d 13 f0       	mov    $0xf0137dc0,%ebx
f010ee53:	ba 08 00 00 00       	mov    $0x8,%edx
f010ee58:	89 c7                	mov    %eax,%edi
f010ee5a:	89 de                	mov    %ebx,%esi
f010ee5c:	89 d1                	mov    %edx,%ecx
f010ee5e:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)

	LIST_INIT(&FreeMemBlocksList);
f010ee60:	c7 05 a0 0e 6c f0 00 	movl   $0x0,0xf06c0ea0
f010ee67:	00 00 00 
f010ee6a:	c7 05 a4 0e 6c f0 00 	movl   $0x0,0xf06c0ea4
f010ee71:	00 00 00 
f010ee74:	c7 05 ac 0e 6c f0 00 	movl   $0x0,0xf06c0eac
f010ee7b:	00 00 00 
	struct MemBlock freeBlocks[numOfFreeBlocks_NF];
	for (int i = 0; i < numOfFreeBlocks_NF; ++i)
f010ee7e:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
f010ee85:	e9 5f 01 00 00       	jmp    f010efe9 <test_alloc_block_NF+0x1f2>
	{
		freeBlocks[i].sva = BlocksSVAs[i];
f010ee8a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010ee8d:	8b 44 85 b4          	mov    -0x4c(%ebp,%eax,4),%eax
f010ee91:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010ee94:	c1 e2 04             	shl    $0x4,%edx
f010ee97:	8d 5d e8             	lea    -0x18(%ebp),%ebx
f010ee9a:	01 da                	add    %ebx,%edx
f010ee9c:	81 ea cc 00 00 00    	sub    $0xcc,%edx
f010eea2:	89 02                	mov    %eax,(%edx)
		freeBlocks[i].size = BlocksSizes[i];
f010eea4:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010eea7:	8b 44 85 94          	mov    -0x6c(%ebp,%eax,4),%eax
f010eeab:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010eeae:	c1 e2 04             	shl    $0x4,%edx
f010eeb1:	8d 75 e8             	lea    -0x18(%ebp),%esi
f010eeb4:	01 f2                	add    %esi,%edx
f010eeb6:	81 ea c8 00 00 00    	sub    $0xc8,%edx
f010eebc:	89 02                	mov    %eax,(%edx)
		if (i == 0)
f010eebe:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f010eec2:	0f 85 92 00 00 00    	jne    f010ef5a <test_alloc_block_NF+0x163>
			LIST_INSERT_HEAD(&FreeMemBlocksList, &(freeBlocks[i]));
f010eec8:	a1 a0 0e 6c f0       	mov    0xf06c0ea0,%eax
f010eecd:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010eed0:	c1 e2 04             	shl    $0x4,%edx
f010eed3:	8d 7d e8             	lea    -0x18(%ebp),%edi
f010eed6:	01 fa                	add    %edi,%edx
f010eed8:	81 ea d4 00 00 00    	sub    $0xd4,%edx
f010eede:	89 02                	mov    %eax,(%edx)
f010eee0:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010eee3:	c1 e0 04             	shl    $0x4,%eax
f010eee6:	8d 5d e8             	lea    -0x18(%ebp),%ebx
f010eee9:	01 d8                	add    %ebx,%eax
f010eeeb:	2d d4 00 00 00       	sub    $0xd4,%eax
f010eef0:	8b 00                	mov    (%eax),%eax
f010eef2:	85 c0                	test   %eax,%eax
f010eef4:	74 18                	je     f010ef0e <test_alloc_block_NF+0x117>
f010eef6:	a1 a0 0e 6c f0       	mov    0xf06c0ea0,%eax
f010eefb:	8d 95 14 ff ff ff    	lea    -0xec(%ebp),%edx
f010ef01:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
f010ef04:	c1 e1 04             	shl    $0x4,%ecx
f010ef07:	01 ca                	add    %ecx,%edx
f010ef09:	89 50 04             	mov    %edx,0x4(%eax)
f010ef0c:	eb 13                	jmp    f010ef21 <test_alloc_block_NF+0x12a>
f010ef0e:	8d 85 14 ff ff ff    	lea    -0xec(%ebp),%eax
f010ef14:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010ef17:	c1 e2 04             	shl    $0x4,%edx
f010ef1a:	01 d0                	add    %edx,%eax
f010ef1c:	a3 a4 0e 6c f0       	mov    %eax,0xf06c0ea4
f010ef21:	8d 85 14 ff ff ff    	lea    -0xec(%ebp),%eax
f010ef27:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010ef2a:	c1 e2 04             	shl    $0x4,%edx
f010ef2d:	01 d0                	add    %edx,%eax
f010ef2f:	a3 a0 0e 6c f0       	mov    %eax,0xf06c0ea0
f010ef34:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010ef37:	c1 e0 04             	shl    $0x4,%eax
f010ef3a:	8d 75 e8             	lea    -0x18(%ebp),%esi
f010ef3d:	01 f0                	add    %esi,%eax
f010ef3f:	2d d0 00 00 00       	sub    $0xd0,%eax
f010ef44:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f010ef4a:	a1 ac 0e 6c f0       	mov    0xf06c0eac,%eax
f010ef4f:	40                   	inc    %eax
f010ef50:	a3 ac 0e 6c f0       	mov    %eax,0xf06c0eac
f010ef55:	e9 8c 00 00 00       	jmp    f010efe6 <test_alloc_block_NF+0x1ef>
		else
			LIST_INSERT_TAIL(&FreeMemBlocksList, &(freeBlocks[i]));
f010ef5a:	a1 a4 0e 6c f0       	mov    0xf06c0ea4,%eax
f010ef5f:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010ef62:	c1 e2 04             	shl    $0x4,%edx
f010ef65:	8d 7d e8             	lea    -0x18(%ebp),%edi
f010ef68:	01 fa                	add    %edi,%edx
f010ef6a:	81 ea d0 00 00 00    	sub    $0xd0,%edx
f010ef70:	89 02                	mov    %eax,(%edx)
f010ef72:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010ef75:	c1 e0 04             	shl    $0x4,%eax
f010ef78:	8d 5d e8             	lea    -0x18(%ebp),%ebx
f010ef7b:	01 d8                	add    %ebx,%eax
f010ef7d:	2d d0 00 00 00       	sub    $0xd0,%eax
f010ef82:	8b 00                	mov    (%eax),%eax
f010ef84:	85 c0                	test   %eax,%eax
f010ef86:	74 17                	je     f010ef9f <test_alloc_block_NF+0x1a8>
f010ef88:	a1 a4 0e 6c f0       	mov    0xf06c0ea4,%eax
f010ef8d:	8d 95 14 ff ff ff    	lea    -0xec(%ebp),%edx
f010ef93:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
f010ef96:	c1 e1 04             	shl    $0x4,%ecx
f010ef99:	01 ca                	add    %ecx,%edx
f010ef9b:	89 10                	mov    %edx,(%eax)
f010ef9d:	eb 13                	jmp    f010efb2 <test_alloc_block_NF+0x1bb>
f010ef9f:	8d 85 14 ff ff ff    	lea    -0xec(%ebp),%eax
f010efa5:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010efa8:	c1 e2 04             	shl    $0x4,%edx
f010efab:	01 d0                	add    %edx,%eax
f010efad:	a3 a0 0e 6c f0       	mov    %eax,0xf06c0ea0
f010efb2:	8d 85 14 ff ff ff    	lea    -0xec(%ebp),%eax
f010efb8:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010efbb:	c1 e2 04             	shl    $0x4,%edx
f010efbe:	01 d0                	add    %edx,%eax
f010efc0:	a3 a4 0e 6c f0       	mov    %eax,0xf06c0ea4
f010efc5:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010efc8:	c1 e0 04             	shl    $0x4,%eax
f010efcb:	8d 75 e8             	lea    -0x18(%ebp),%esi
f010efce:	01 f0                	add    %esi,%eax
f010efd0:	2d d4 00 00 00       	sub    $0xd4,%eax
f010efd5:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f010efdb:	a1 ac 0e 6c f0       	mov    0xf06c0eac,%eax
f010efe0:	40                   	inc    %eax
f010efe1:	a3 ac 0e 6c f0       	mov    %eax,0xf06c0eac
	uint32 BlocksSVAs[numOfFreeBlocks_NF] = {0x0, 0x2000, 0x4000, 0x7000, 0x19000, 0x1A400, 0x21B400, 0x31B400}; //0KB, 8KB, 16KB, 28KB, 100KB, 105KB, 2,157KB, 3,181KB
	uint32 BlocksSizes[numOfFreeBlocks_NF] = {3*kilo, 8*kilo, 1*kilo, 10*kilo, 4*kilo, 2*Mega, 1*Mega, 1*kilo} ;

	LIST_INIT(&FreeMemBlocksList);
	struct MemBlock freeBlocks[numOfFreeBlocks_NF];
	for (int i = 0; i < numOfFreeBlocks_NF; ++i)
f010efe6:	ff 45 e4             	incl   -0x1c(%ebp)
f010efe9:	83 7d e4 07          	cmpl   $0x7,-0x1c(%ebp)
f010efed:	0f 8e 97 fe ff ff    	jle    f010ee8a <test_alloc_block_NF+0x93>
			LIST_INSERT_TAIL(&FreeMemBlocksList, &(freeBlocks[i]));
	}

	//====================================================================//
	/*NF ALLOC Scenario 1: Try to allocate a block with a size greater than the size of any existing free block*/
	struct MemBlock * blockToAlloc = alloc_block_NF(10*Mega);
f010eff3:	83 ec 0c             	sub    $0xc,%esp
f010eff6:	68 00 00 a0 00       	push   $0xa00000
f010effb:	e8 35 2a 02 00       	call   f0131a35 <alloc_block_NF>
f010f000:	83 c4 10             	add    $0x10,%esp
f010f003:	89 45 dc             	mov    %eax,-0x24(%ebp)

	//Check returned block content
	if(blockToAlloc != NULL) panic("alloc_block_NF: WRONG NF ALLOC - alloc_block_NF find a block instead no existing free blocks with the given size.");
f010f006:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f010f00a:	74 17                	je     f010f023 <test_alloc_block_NF+0x22c>
f010f00c:	83 ec 04             	sub    $0x4,%esp
f010f00f:	68 cc 7b 13 f0       	push   $0xf0137bcc
f010f014:	68 e1 01 00 00       	push   $0x1e1
f010f019:	68 34 72 13 f0       	push   $0xf0137234
f010f01e:	e8 83 11 ff ff       	call   f01001a6 <_panic>

	//Check size of AvailableMemBlocksList, FreeMemBlocksList & AllocMemBlocksList
	if (LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks || LIST_SIZE(&(FreeMemBlocksList)) != numOfFreeBlocks_NF || LIST_SIZE(&(AllocMemBlocksList)) != 0)
f010f023:	a1 e0 0e 6c f0       	mov    0xf06c0ee0,%eax
f010f028:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f010f02b:	75 13                	jne    f010f040 <test_alloc_block_NF+0x249>
f010f02d:	a1 ac 0e 6c f0       	mov    0xf06c0eac,%eax
f010f032:	83 f8 08             	cmp    $0x8,%eax
f010f035:	75 09                	jne    f010f040 <test_alloc_block_NF+0x249>
f010f037:	a1 dc 8a 65 f0       	mov    0xf0658adc,%eax
f010f03c:	85 c0                	test   %eax,%eax
f010f03e:	74 17                	je     f010f057 <test_alloc_block_NF+0x260>
		panic("find_block: AvailableMemBlocksList, FreeMemBlocksList & AllocMemBlocksList are affected and this shall not occurred.");
f010f040:	83 ec 04             	sub    $0x4,%esp
f010f043:	68 60 77 13 f0       	push   $0xf0137760
f010f048:	68 e5 01 00 00       	push   $0x1e5
f010f04d:	68 34 72 13 f0       	push   $0xf0137234
f010f052:	e8 4f 11 ff ff       	call   f01001a6 <_panic>

	//====================================================================//
	/*NF ALLOC Scenario 2: Try to allocate a block with a size equal to the size of the one existing free blocks (STARTING from 0)*/
	blockToAlloc = alloc_block_NF(10*kilo);
f010f057:	83 ec 0c             	sub    $0xc,%esp
f010f05a:	68 00 28 00 00       	push   $0x2800
f010f05f:	e8 d1 29 02 00       	call   f0131a35 <alloc_block_NF>
f010f064:	83 c4 10             	add    $0x10,%esp
f010f067:	89 45 dc             	mov    %eax,-0x24(%ebp)

	//Check returned block content
	if(blockToAlloc == NULL || blockToAlloc->size != 10*kilo || blockToAlloc->sva != 0x7000)
f010f06a:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f010f06e:	74 1a                	je     f010f08a <test_alloc_block_NF+0x293>
f010f070:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010f073:	8b 40 0c             	mov    0xc(%eax),%eax
f010f076:	3d 00 28 00 00       	cmp    $0x2800,%eax
f010f07b:	75 0d                	jne    f010f08a <test_alloc_block_NF+0x293>
f010f07d:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010f080:	8b 40 08             	mov    0x8(%eax),%eax
f010f083:	3d 00 70 00 00       	cmp    $0x7000,%eax
f010f088:	74 17                	je     f010f0a1 <test_alloc_block_NF+0x2aa>
		panic("alloc_block_NF: WRONG NF ALLOC - alloc_block_NF find a wrong block.");
f010f08a:	83 ec 04             	sub    $0x4,%esp
f010f08d:	68 40 7c 13 f0       	push   $0xf0137c40
f010f092:	68 ed 01 00 00       	push   $0x1ed
f010f097:	68 34 72 13 f0       	push   $0xf0137234
f010f09c:	e8 05 11 ff ff       	call   f01001a6 <_panic>

	//Check size of AvailableMemBlocksList, FreeMemBlocksList & AllocMemBlocksList
	if (LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks || LIST_SIZE(&(FreeMemBlocksList)) != numOfFreeBlocks_NF-1 || LIST_SIZE(&(AllocMemBlocksList)) != 0)
f010f0a1:	a1 e0 0e 6c f0       	mov    0xf06c0ee0,%eax
f010f0a6:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f010f0a9:	75 13                	jne    f010f0be <test_alloc_block_NF+0x2c7>
f010f0ab:	a1 ac 0e 6c f0       	mov    0xf06c0eac,%eax
f010f0b0:	83 f8 07             	cmp    $0x7,%eax
f010f0b3:	75 09                	jne    f010f0be <test_alloc_block_NF+0x2c7>
f010f0b5:	a1 dc 8a 65 f0       	mov    0xf0658adc,%eax
f010f0ba:	85 c0                	test   %eax,%eax
f010f0bc:	74 17                	je     f010f0d5 <test_alloc_block_NF+0x2de>
		panic("alloc_block_NF: Wrong sizes for AvailableMemBlocksList, FreeMemBlocksList and AllocMemBlocksList.");
f010f0be:	83 ec 04             	sub    $0x4,%esp
f010f0c1:	68 84 7c 13 f0       	push   $0xf0137c84
f010f0c6:	68 f1 01 00 00       	push   $0x1f1
f010f0cb:	68 34 72 13 f0       	push   $0xf0137234
f010f0d0:	e8 d1 10 ff ff       	call   f01001a6 <_panic>

	//Check FreeMemBlocksList content
	uint32 size = 0;
f010f0d5:	c7 85 10 ff ff ff 00 	movl   $0x0,-0xf0(%ebp)
f010f0dc:	00 00 00 
	uint32 actualSize = numOfFreeBlocks_NF-1;
f010f0df:	c7 45 d8 07 00 00 00 	movl   $0x7,-0x28(%ebp)
	BlocksSVAs[3] = 0;
f010f0e6:	c7 45 c0 00 00 00 00 	movl   $0x0,-0x40(%ebp)
	BlocksSizes[3] = 0;
f010f0ed:	c7 45 a0 00 00 00 00 	movl   $0x0,-0x60(%ebp)
	int chk = check_list_data(&FreeMemBlocksList, BlocksSVAs, BlocksSizes, &size, actualSize);
f010f0f4:	83 ec 0c             	sub    $0xc,%esp
f010f0f7:	ff 75 d8             	pushl  -0x28(%ebp)
f010f0fa:	8d 85 10 ff ff ff    	lea    -0xf0(%ebp),%eax
f010f100:	50                   	push   %eax
f010f101:	8d 45 94             	lea    -0x6c(%ebp),%eax
f010f104:	50                   	push   %eax
f010f105:	8d 45 b4             	lea    -0x4c(%ebp),%eax
f010f108:	50                   	push   %eax
f010f109:	68 a0 0e 6c f0       	push   $0xf06c0ea0
f010f10e:	e8 56 11 00 00       	call   f0110269 <check_list_data>
f010f113:	83 c4 20             	add    $0x20,%esp
f010f116:	89 45 d4             	mov    %eax,-0x2c(%ebp)
	if(chk != 1) panic("alloc_block_NF: WRONG NF ALLOC .. FreeMemBlocksList content is not correct.");
f010f119:	83 7d d4 01          	cmpl   $0x1,-0x2c(%ebp)
f010f11d:	74 17                	je     f010f136 <test_alloc_block_NF+0x33f>
f010f11f:	83 ec 04             	sub    $0x4,%esp
f010f122:	68 e8 7c 13 f0       	push   $0xf0137ce8
f010f127:	68 f9 01 00 00       	push   $0x1f9
f010f12c:	68 34 72 13 f0       	push   $0xf0137234
f010f131:	e8 70 10 ff ff       	call   f01001a6 <_panic>
	if(size != actualSize) panic("alloc_block_NF: WRONG NF ALLOC .. FreeMemBlocksList size is not correct.");
f010f136:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f010f13c:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f010f13f:	74 17                	je     f010f158 <test_alloc_block_NF+0x361>
f010f141:	83 ec 04             	sub    $0x4,%esp
f010f144:	68 34 7d 13 f0       	push   $0xf0137d34
f010f149:	68 fa 01 00 00       	push   $0x1fa
f010f14e:	68 34 72 13 f0       	push   $0xf0137234
f010f153:	e8 4e 10 ff ff       	call   f01001a6 <_panic>

	//====================================================================//
	/*NF ALLOC Scenario 3: Try to allocate a block with a size equal to the size of the one existing free blocks (The first one fit after the last allocated VA)*/
	// Now, lastAllocVA shall EQUAL to 0x7000
	blockToAlloc = alloc_block_NF(2*Mega);
f010f158:	83 ec 0c             	sub    $0xc,%esp
f010f15b:	68 00 00 20 00       	push   $0x200000
f010f160:	e8 d0 28 02 00       	call   f0131a35 <alloc_block_NF>
f010f165:	83 c4 10             	add    $0x10,%esp
f010f168:	89 45 dc             	mov    %eax,-0x24(%ebp)

	//Check returned block content
	if(blockToAlloc == NULL || blockToAlloc->size != 2*Mega || blockToAlloc->sva != 0x1A400)
f010f16b:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f010f16f:	74 1a                	je     f010f18b <test_alloc_block_NF+0x394>
f010f171:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010f174:	8b 40 0c             	mov    0xc(%eax),%eax
f010f177:	3d 00 00 20 00       	cmp    $0x200000,%eax
f010f17c:	75 0d                	jne    f010f18b <test_alloc_block_NF+0x394>
f010f17e:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010f181:	8b 40 08             	mov    0x8(%eax),%eax
f010f184:	3d 00 a4 01 00       	cmp    $0x1a400,%eax
f010f189:	74 17                	je     f010f1a2 <test_alloc_block_NF+0x3ab>
		panic("alloc_block_NF: WRONG NF ALLOC - alloc_block_NF find a wrong block.");
f010f18b:	83 ec 04             	sub    $0x4,%esp
f010f18e:	68 40 7c 13 f0       	push   $0xf0137c40
f010f193:	68 03 02 00 00       	push   $0x203
f010f198:	68 34 72 13 f0       	push   $0xf0137234
f010f19d:	e8 04 10 ff ff       	call   f01001a6 <_panic>

	//Check size of AvailableMemBlocksList, FreeMemBlocksList & AllocMemBlocksList
	if (LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks || LIST_SIZE(&(FreeMemBlocksList)) != numOfFreeBlocks_NF-2 || LIST_SIZE(&(AllocMemBlocksList)) != 0)
f010f1a2:	a1 e0 0e 6c f0       	mov    0xf06c0ee0,%eax
f010f1a7:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f010f1aa:	75 13                	jne    f010f1bf <test_alloc_block_NF+0x3c8>
f010f1ac:	a1 ac 0e 6c f0       	mov    0xf06c0eac,%eax
f010f1b1:	83 f8 06             	cmp    $0x6,%eax
f010f1b4:	75 09                	jne    f010f1bf <test_alloc_block_NF+0x3c8>
f010f1b6:	a1 dc 8a 65 f0       	mov    0xf0658adc,%eax
f010f1bb:	85 c0                	test   %eax,%eax
f010f1bd:	74 17                	je     f010f1d6 <test_alloc_block_NF+0x3df>
		panic("alloc_block_NF: Wrong sizes for AvailableMemBlocksList, FreeMemBlocksList and AllocMemBlocksList.");
f010f1bf:	83 ec 04             	sub    $0x4,%esp
f010f1c2:	68 84 7c 13 f0       	push   $0xf0137c84
f010f1c7:	68 07 02 00 00       	push   $0x207
f010f1cc:	68 34 72 13 f0       	push   $0xf0137234
f010f1d1:	e8 d0 0f ff ff       	call   f01001a6 <_panic>

	//Check FreeMemBlocksList content
	size = 0;
f010f1d6:	c7 85 10 ff ff ff 00 	movl   $0x0,-0xf0(%ebp)
f010f1dd:	00 00 00 
	actualSize = numOfFreeBlocks_NF-2;
f010f1e0:	c7 45 d8 06 00 00 00 	movl   $0x6,-0x28(%ebp)
	BlocksSVAs[5] = 0;
f010f1e7:	c7 45 c8 00 00 00 00 	movl   $0x0,-0x38(%ebp)
	BlocksSizes[5] = 0;
f010f1ee:	c7 45 a8 00 00 00 00 	movl   $0x0,-0x58(%ebp)
	chk = check_list_data(&FreeMemBlocksList, BlocksSVAs, BlocksSizes, &size, actualSize);
f010f1f5:	83 ec 0c             	sub    $0xc,%esp
f010f1f8:	ff 75 d8             	pushl  -0x28(%ebp)
f010f1fb:	8d 85 10 ff ff ff    	lea    -0xf0(%ebp),%eax
f010f201:	50                   	push   %eax
f010f202:	8d 45 94             	lea    -0x6c(%ebp),%eax
f010f205:	50                   	push   %eax
f010f206:	8d 45 b4             	lea    -0x4c(%ebp),%eax
f010f209:	50                   	push   %eax
f010f20a:	68 a0 0e 6c f0       	push   $0xf06c0ea0
f010f20f:	e8 55 10 00 00       	call   f0110269 <check_list_data>
f010f214:	83 c4 20             	add    $0x20,%esp
f010f217:	89 45 d4             	mov    %eax,-0x2c(%ebp)
	if(chk != 1) panic("alloc_block_NF: WRONG NF ALLOC .. FreeMemBlocksList content is not correct.");
f010f21a:	83 7d d4 01          	cmpl   $0x1,-0x2c(%ebp)
f010f21e:	74 17                	je     f010f237 <test_alloc_block_NF+0x440>
f010f220:	83 ec 04             	sub    $0x4,%esp
f010f223:	68 e8 7c 13 f0       	push   $0xf0137ce8
f010f228:	68 0f 02 00 00       	push   $0x20f
f010f22d:	68 34 72 13 f0       	push   $0xf0137234
f010f232:	e8 6f 0f ff ff       	call   f01001a6 <_panic>
	if(size != actualSize) panic("alloc_block_NF: WRONG NF ALLOC .. FreeMemBlocksList size is not correct.");
f010f237:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f010f23d:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f010f240:	74 17                	je     f010f259 <test_alloc_block_NF+0x462>
f010f242:	83 ec 04             	sub    $0x4,%esp
f010f245:	68 34 7d 13 f0       	push   $0xf0137d34
f010f24a:	68 10 02 00 00       	push   $0x210
f010f24f:	68 34 72 13 f0       	push   $0xf0137234
f010f254:	e8 4d 0f ff ff       	call   f01001a6 <_panic>

	//====================================================================//
	/*NF ALLOC Scenario 4: Try to allocate a block with a size smaller than the size of any existing free block (The first one fit after the last allocated VA)*/
	// Now, lastAllocVA shall EQUAL to 0x7000
	blockToAlloc = alloc_block_NF(512*kilo);
f010f259:	83 ec 0c             	sub    $0xc,%esp
f010f25c:	68 00 00 08 00       	push   $0x80000
f010f261:	e8 cf 27 02 00       	call   f0131a35 <alloc_block_NF>
f010f266:	83 c4 10             	add    $0x10,%esp
f010f269:	89 45 dc             	mov    %eax,-0x24(%ebp)

	//Check returned block content
	if(blockToAlloc == NULL || blockToAlloc->size != 512*kilo || blockToAlloc->sva != 0x21B400)
f010f26c:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f010f270:	74 1a                	je     f010f28c <test_alloc_block_NF+0x495>
f010f272:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010f275:	8b 40 0c             	mov    0xc(%eax),%eax
f010f278:	3d 00 00 08 00       	cmp    $0x80000,%eax
f010f27d:	75 0d                	jne    f010f28c <test_alloc_block_NF+0x495>
f010f27f:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010f282:	8b 40 08             	mov    0x8(%eax),%eax
f010f285:	3d 00 b4 21 00       	cmp    $0x21b400,%eax
f010f28a:	74 17                	je     f010f2a3 <test_alloc_block_NF+0x4ac>
		panic("alloc_block_NF: WRONG NF ALLOC - alloc_block_NF find a wrong block.");
f010f28c:	83 ec 04             	sub    $0x4,%esp
f010f28f:	68 40 7c 13 f0       	push   $0xf0137c40
f010f294:	68 19 02 00 00       	push   $0x219
f010f299:	68 34 72 13 f0       	push   $0xf0137234
f010f29e:	e8 03 0f ff ff       	call   f01001a6 <_panic>

	//Check size of AvailableMemBlocksList, FreeMemBlocksList & AllocMemBlocksList
	if (LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks-1 || LIST_SIZE(&(FreeMemBlocksList)) != numOfFreeBlocks_NF-2 || LIST_SIZE(&(AllocMemBlocksList)) != 0)
f010f2a3:	a1 e0 0e 6c f0       	mov    0xf06c0ee0,%eax
f010f2a8:	8b 55 e0             	mov    -0x20(%ebp),%edx
f010f2ab:	4a                   	dec    %edx
f010f2ac:	39 d0                	cmp    %edx,%eax
f010f2ae:	75 13                	jne    f010f2c3 <test_alloc_block_NF+0x4cc>
f010f2b0:	a1 ac 0e 6c f0       	mov    0xf06c0eac,%eax
f010f2b5:	83 f8 06             	cmp    $0x6,%eax
f010f2b8:	75 09                	jne    f010f2c3 <test_alloc_block_NF+0x4cc>
f010f2ba:	a1 dc 8a 65 f0       	mov    0xf0658adc,%eax
f010f2bf:	85 c0                	test   %eax,%eax
f010f2c1:	74 17                	je     f010f2da <test_alloc_block_NF+0x4e3>
		panic("alloc_block_NF: Wrong sizes for AvailableMemBlocksList, FreeMemBlocksList and AllocMemBlocksList.");
f010f2c3:	83 ec 04             	sub    $0x4,%esp
f010f2c6:	68 84 7c 13 f0       	push   $0xf0137c84
f010f2cb:	68 1d 02 00 00       	push   $0x21d
f010f2d0:	68 34 72 13 f0       	push   $0xf0137234
f010f2d5:	e8 cc 0e ff ff       	call   f01001a6 <_panic>

	//Check FreeMemBlocksList content
	size = 0;
f010f2da:	c7 85 10 ff ff ff 00 	movl   $0x0,-0xf0(%ebp)
f010f2e1:	00 00 00 
	actualSize = numOfFreeBlocks_NF-2;
f010f2e4:	c7 45 d8 06 00 00 00 	movl   $0x6,-0x28(%ebp)
	BlocksSVAs[6] = 0x21B400 + 512*kilo;
f010f2eb:	c7 45 cc 00 b4 29 00 	movl   $0x29b400,-0x34(%ebp)
	BlocksSizes[6] = 512*kilo;
f010f2f2:	c7 45 ac 00 00 08 00 	movl   $0x80000,-0x54(%ebp)
	chk = check_list_data(&FreeMemBlocksList, BlocksSVAs, BlocksSizes, &size, actualSize);
f010f2f9:	83 ec 0c             	sub    $0xc,%esp
f010f2fc:	ff 75 d8             	pushl  -0x28(%ebp)
f010f2ff:	8d 85 10 ff ff ff    	lea    -0xf0(%ebp),%eax
f010f305:	50                   	push   %eax
f010f306:	8d 45 94             	lea    -0x6c(%ebp),%eax
f010f309:	50                   	push   %eax
f010f30a:	8d 45 b4             	lea    -0x4c(%ebp),%eax
f010f30d:	50                   	push   %eax
f010f30e:	68 a0 0e 6c f0       	push   $0xf06c0ea0
f010f313:	e8 51 0f 00 00       	call   f0110269 <check_list_data>
f010f318:	83 c4 20             	add    $0x20,%esp
f010f31b:	89 45 d4             	mov    %eax,-0x2c(%ebp)
	if(chk != 1) panic("alloc_block_NF: WRONG NF ALLOC .. FreeMemBlocksList content is not correct.");
f010f31e:	83 7d d4 01          	cmpl   $0x1,-0x2c(%ebp)
f010f322:	74 17                	je     f010f33b <test_alloc_block_NF+0x544>
f010f324:	83 ec 04             	sub    $0x4,%esp
f010f327:	68 e8 7c 13 f0       	push   $0xf0137ce8
f010f32c:	68 25 02 00 00       	push   $0x225
f010f331:	68 34 72 13 f0       	push   $0xf0137234
f010f336:	e8 6b 0e ff ff       	call   f01001a6 <_panic>
	if(size != actualSize) panic("alloc_block_NF: WRONG NF ALLOC .. FreeMemBlocksList size is not correct.");
f010f33b:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f010f341:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f010f344:	74 17                	je     f010f35d <test_alloc_block_NF+0x566>
f010f346:	83 ec 04             	sub    $0x4,%esp
f010f349:	68 34 7d 13 f0       	push   $0xf0137d34
f010f34e:	68 26 02 00 00       	push   $0x226
f010f353:	68 34 72 13 f0       	push   $0xf0137234
f010f358:	e8 49 0e ff ff       	call   f01001a6 <_panic>

	//====================================================================//
	/*NF ALLOC Scenario 5: Try to allocate a block with a size smaller than the size of any existing free block (One from the updated blocks before in the free list)*/
	// Now, lastAllocVA shall EQUAL to 0x7000
	blockToAlloc = alloc_block_NF(511*kilo);
f010f35d:	83 ec 0c             	sub    $0xc,%esp
f010f360:	68 00 fc 07 00       	push   $0x7fc00
f010f365:	e8 cb 26 02 00       	call   f0131a35 <alloc_block_NF>
f010f36a:	83 c4 10             	add    $0x10,%esp
f010f36d:	89 45 dc             	mov    %eax,-0x24(%ebp)

	//Check returned block content
	if(blockToAlloc == NULL || blockToAlloc->size != 511*kilo || blockToAlloc->sva != (0x21B400 + 512*kilo))
f010f370:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f010f374:	74 1a                	je     f010f390 <test_alloc_block_NF+0x599>
f010f376:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010f379:	8b 40 0c             	mov    0xc(%eax),%eax
f010f37c:	3d 00 fc 07 00       	cmp    $0x7fc00,%eax
f010f381:	75 0d                	jne    f010f390 <test_alloc_block_NF+0x599>
f010f383:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010f386:	8b 40 08             	mov    0x8(%eax),%eax
f010f389:	3d 00 b4 29 00       	cmp    $0x29b400,%eax
f010f38e:	74 17                	je     f010f3a7 <test_alloc_block_NF+0x5b0>
		panic("alloc_block_NF: WRONG NF ALLOC - alloc_block_NF find a wrong block.");
f010f390:	83 ec 04             	sub    $0x4,%esp
f010f393:	68 40 7c 13 f0       	push   $0xf0137c40
f010f398:	68 2f 02 00 00       	push   $0x22f
f010f39d:	68 34 72 13 f0       	push   $0xf0137234
f010f3a2:	e8 ff 0d ff ff       	call   f01001a6 <_panic>

	//Check size of AvailableMemBlocksList, FreeMemBlocksList & AllocMemBlocksList
	if (LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks-2 || LIST_SIZE(&(FreeMemBlocksList)) != numOfFreeBlocks_NF-2 || LIST_SIZE(&(AllocMemBlocksList)) != 0)
f010f3a7:	a1 e0 0e 6c f0       	mov    0xf06c0ee0,%eax
f010f3ac:	8b 55 e0             	mov    -0x20(%ebp),%edx
f010f3af:	83 ea 02             	sub    $0x2,%edx
f010f3b2:	39 d0                	cmp    %edx,%eax
f010f3b4:	75 13                	jne    f010f3c9 <test_alloc_block_NF+0x5d2>
f010f3b6:	a1 ac 0e 6c f0       	mov    0xf06c0eac,%eax
f010f3bb:	83 f8 06             	cmp    $0x6,%eax
f010f3be:	75 09                	jne    f010f3c9 <test_alloc_block_NF+0x5d2>
f010f3c0:	a1 dc 8a 65 f0       	mov    0xf0658adc,%eax
f010f3c5:	85 c0                	test   %eax,%eax
f010f3c7:	74 17                	je     f010f3e0 <test_alloc_block_NF+0x5e9>
		panic("alloc_block_NF: Wrong sizes for AvailableMemBlocksList, FreeMemBlocksList and AllocMemBlocksList.");
f010f3c9:	83 ec 04             	sub    $0x4,%esp
f010f3cc:	68 84 7c 13 f0       	push   $0xf0137c84
f010f3d1:	68 33 02 00 00       	push   $0x233
f010f3d6:	68 34 72 13 f0       	push   $0xf0137234
f010f3db:	e8 c6 0d ff ff       	call   f01001a6 <_panic>

	//Check FreeMemBlocksList content
	size = 0;
f010f3e0:	c7 85 10 ff ff ff 00 	movl   $0x0,-0xf0(%ebp)
f010f3e7:	00 00 00 
	actualSize = numOfFreeBlocks_NF-2;
f010f3ea:	c7 45 d8 06 00 00 00 	movl   $0x6,-0x28(%ebp)
	BlocksSVAs[6] = 0x21B400 + 512*kilo + (511*kilo);
f010f3f1:	c7 45 cc 00 b0 31 00 	movl   $0x31b000,-0x34(%ebp)
	BlocksSizes[6] = 1*kilo;
f010f3f8:	c7 45 ac 00 04 00 00 	movl   $0x400,-0x54(%ebp)
	chk = check_list_data(&FreeMemBlocksList, BlocksSVAs, BlocksSizes, &size, actualSize);
f010f3ff:	83 ec 0c             	sub    $0xc,%esp
f010f402:	ff 75 d8             	pushl  -0x28(%ebp)
f010f405:	8d 85 10 ff ff ff    	lea    -0xf0(%ebp),%eax
f010f40b:	50                   	push   %eax
f010f40c:	8d 45 94             	lea    -0x6c(%ebp),%eax
f010f40f:	50                   	push   %eax
f010f410:	8d 45 b4             	lea    -0x4c(%ebp),%eax
f010f413:	50                   	push   %eax
f010f414:	68 a0 0e 6c f0       	push   $0xf06c0ea0
f010f419:	e8 4b 0e 00 00       	call   f0110269 <check_list_data>
f010f41e:	83 c4 20             	add    $0x20,%esp
f010f421:	89 45 d4             	mov    %eax,-0x2c(%ebp)
	if(chk != 1) panic("alloc_block_NF: WRONG NF ALLOC .. FreeMemBlocksList content is not correct.");
f010f424:	83 7d d4 01          	cmpl   $0x1,-0x2c(%ebp)
f010f428:	74 17                	je     f010f441 <test_alloc_block_NF+0x64a>
f010f42a:	83 ec 04             	sub    $0x4,%esp
f010f42d:	68 e8 7c 13 f0       	push   $0xf0137ce8
f010f432:	68 3b 02 00 00       	push   $0x23b
f010f437:	68 34 72 13 f0       	push   $0xf0137234
f010f43c:	e8 65 0d ff ff       	call   f01001a6 <_panic>
	if(size != actualSize) panic("alloc_block_NF: WRONG NF ALLOC .. FreeMemBlocksList size is not correct.");
f010f441:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f010f447:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f010f44a:	74 17                	je     f010f463 <test_alloc_block_NF+0x66c>
f010f44c:	83 ec 04             	sub    $0x4,%esp
f010f44f:	68 34 7d 13 f0       	push   $0xf0137d34
f010f454:	68 3c 02 00 00       	push   $0x23c
f010f459:	68 34 72 13 f0       	push   $0xf0137234
f010f45e:	e8 43 0d ff ff       	call   f01001a6 <_panic>

	//====================================================================//
	/*NF ALLOC Scenario 6: Try to allocate a block with a size smaller than ALL the NEXT existing blocks .. Shall start search from the start of the list*/
	// Now, lastAllocVA shall EQUAL to 0x7000
	blockToAlloc = alloc_block_NF(3*kilo);
f010f463:	83 ec 0c             	sub    $0xc,%esp
f010f466:	68 00 0c 00 00       	push   $0xc00
f010f46b:	e8 c5 25 02 00       	call   f0131a35 <alloc_block_NF>
f010f470:	83 c4 10             	add    $0x10,%esp
f010f473:	89 45 dc             	mov    %eax,-0x24(%ebp)

	//Check returned block content
	if(blockToAlloc == NULL || blockToAlloc->size != 3*kilo || blockToAlloc->sva != 0x0)
f010f476:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f010f47a:	74 17                	je     f010f493 <test_alloc_block_NF+0x69c>
f010f47c:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010f47f:	8b 40 0c             	mov    0xc(%eax),%eax
f010f482:	3d 00 0c 00 00       	cmp    $0xc00,%eax
f010f487:	75 0a                	jne    f010f493 <test_alloc_block_NF+0x69c>
f010f489:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010f48c:	8b 40 08             	mov    0x8(%eax),%eax
f010f48f:	85 c0                	test   %eax,%eax
f010f491:	74 17                	je     f010f4aa <test_alloc_block_NF+0x6b3>
		panic("alloc_block_NF: WRONG NF ALLOC - alloc_block_NF find a wrong block.");
f010f493:	83 ec 04             	sub    $0x4,%esp
f010f496:	68 40 7c 13 f0       	push   $0xf0137c40
f010f49b:	68 45 02 00 00       	push   $0x245
f010f4a0:	68 34 72 13 f0       	push   $0xf0137234
f010f4a5:	e8 fc 0c ff ff       	call   f01001a6 <_panic>

	//Check size of AvailableMemBlocksList, FreeMemBlocksList & AllocMemBlocksList
	if (LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks-2 || LIST_SIZE(&(FreeMemBlocksList)) != numOfFreeBlocks_NF-3 || LIST_SIZE(&(AllocMemBlocksList)) != 0)
f010f4aa:	a1 e0 0e 6c f0       	mov    0xf06c0ee0,%eax
f010f4af:	8b 55 e0             	mov    -0x20(%ebp),%edx
f010f4b2:	83 ea 02             	sub    $0x2,%edx
f010f4b5:	39 d0                	cmp    %edx,%eax
f010f4b7:	75 13                	jne    f010f4cc <test_alloc_block_NF+0x6d5>
f010f4b9:	a1 ac 0e 6c f0       	mov    0xf06c0eac,%eax
f010f4be:	83 f8 05             	cmp    $0x5,%eax
f010f4c1:	75 09                	jne    f010f4cc <test_alloc_block_NF+0x6d5>
f010f4c3:	a1 dc 8a 65 f0       	mov    0xf0658adc,%eax
f010f4c8:	85 c0                	test   %eax,%eax
f010f4ca:	74 17                	je     f010f4e3 <test_alloc_block_NF+0x6ec>
		panic("alloc_block_NF: Wrong sizes for AvailableMemBlocksList, FreeMemBlocksList and AllocMemBlocksList.");
f010f4cc:	83 ec 04             	sub    $0x4,%esp
f010f4cf:	68 84 7c 13 f0       	push   $0xf0137c84
f010f4d4:	68 49 02 00 00       	push   $0x249
f010f4d9:	68 34 72 13 f0       	push   $0xf0137234
f010f4de:	e8 c3 0c ff ff       	call   f01001a6 <_panic>

	//Check FreeMemBlocksList content
	size = 0;
f010f4e3:	c7 85 10 ff ff ff 00 	movl   $0x0,-0xf0(%ebp)
f010f4ea:	00 00 00 
	actualSize = numOfFreeBlocks_NF-3;
f010f4ed:	c7 45 d8 05 00 00 00 	movl   $0x5,-0x28(%ebp)
	BlocksSVAs[0] = 0;
f010f4f4:	c7 45 b4 00 00 00 00 	movl   $0x0,-0x4c(%ebp)
	BlocksSizes[0] = 0;
f010f4fb:	c7 45 94 00 00 00 00 	movl   $0x0,-0x6c(%ebp)
	chk = check_list_data(&FreeMemBlocksList, BlocksSVAs, BlocksSizes, &size, actualSize);
f010f502:	83 ec 0c             	sub    $0xc,%esp
f010f505:	ff 75 d8             	pushl  -0x28(%ebp)
f010f508:	8d 85 10 ff ff ff    	lea    -0xf0(%ebp),%eax
f010f50e:	50                   	push   %eax
f010f50f:	8d 45 94             	lea    -0x6c(%ebp),%eax
f010f512:	50                   	push   %eax
f010f513:	8d 45 b4             	lea    -0x4c(%ebp),%eax
f010f516:	50                   	push   %eax
f010f517:	68 a0 0e 6c f0       	push   $0xf06c0ea0
f010f51c:	e8 48 0d 00 00       	call   f0110269 <check_list_data>
f010f521:	83 c4 20             	add    $0x20,%esp
f010f524:	89 45 d4             	mov    %eax,-0x2c(%ebp)
	if(chk != 1) panic("alloc_block_NF: WRONG NF ALLOC .. FreeMemBlocksList content is not correct.");
f010f527:	83 7d d4 01          	cmpl   $0x1,-0x2c(%ebp)
f010f52b:	74 17                	je     f010f544 <test_alloc_block_NF+0x74d>
f010f52d:	83 ec 04             	sub    $0x4,%esp
f010f530:	68 e8 7c 13 f0       	push   $0xf0137ce8
f010f535:	68 51 02 00 00       	push   $0x251
f010f53a:	68 34 72 13 f0       	push   $0xf0137234
f010f53f:	e8 62 0c ff ff       	call   f01001a6 <_panic>
	if(size != actualSize) panic("alloc_block_NF: WRONG NF ALLOC .. FreeMemBlocksList size is not correct.");
f010f544:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f010f54a:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f010f54d:	74 17                	je     f010f566 <test_alloc_block_NF+0x76f>
f010f54f:	83 ec 04             	sub    $0x4,%esp
f010f552:	68 34 7d 13 f0       	push   $0xf0137d34
f010f557:	68 52 02 00 00       	push   $0x252
f010f55c:	68 34 72 13 f0       	push   $0xf0137234
f010f561:	e8 40 0c ff ff       	call   f01001a6 <_panic>

	//====================================================================//
	/*NF ALLOC Scenario 7: Try to allocate a block with a size smaller than the existing blocks .. To try to update head not to remove it*/
	// Now, lastAllocVA shall EQUAL to 0x7000
	blockToAlloc = alloc_block_NF(1*kilo);
f010f566:	83 ec 0c             	sub    $0xc,%esp
f010f569:	68 00 04 00 00       	push   $0x400
f010f56e:	e8 c2 24 02 00       	call   f0131a35 <alloc_block_NF>
f010f573:	83 c4 10             	add    $0x10,%esp
f010f576:	89 45 dc             	mov    %eax,-0x24(%ebp)

	//Check returned block content
	if(blockToAlloc == NULL || blockToAlloc->size != 1*kilo || blockToAlloc->sva != 0x2000)
f010f579:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f010f57d:	74 1a                	je     f010f599 <test_alloc_block_NF+0x7a2>
f010f57f:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010f582:	8b 40 0c             	mov    0xc(%eax),%eax
f010f585:	3d 00 04 00 00       	cmp    $0x400,%eax
f010f58a:	75 0d                	jne    f010f599 <test_alloc_block_NF+0x7a2>
f010f58c:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010f58f:	8b 40 08             	mov    0x8(%eax),%eax
f010f592:	3d 00 20 00 00       	cmp    $0x2000,%eax
f010f597:	74 17                	je     f010f5b0 <test_alloc_block_NF+0x7b9>
		panic("alloc_block_NF: WRONG NF ALLOC - alloc_block_NF find a wrong block.");
f010f599:	83 ec 04             	sub    $0x4,%esp
f010f59c:	68 40 7c 13 f0       	push   $0xf0137c40
f010f5a1:	68 5b 02 00 00       	push   $0x25b
f010f5a6:	68 34 72 13 f0       	push   $0xf0137234
f010f5ab:	e8 f6 0b ff ff       	call   f01001a6 <_panic>

	//Check size of AvailableMemBlocksList, FreeMemBlocksList & AllocMemBlocksList
	if (LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks-3 || LIST_SIZE(&(FreeMemBlocksList)) != numOfFreeBlocks_NF-3 || LIST_SIZE(&(AllocMemBlocksList)) != 0)
f010f5b0:	a1 e0 0e 6c f0       	mov    0xf06c0ee0,%eax
f010f5b5:	8b 55 e0             	mov    -0x20(%ebp),%edx
f010f5b8:	83 ea 03             	sub    $0x3,%edx
f010f5bb:	39 d0                	cmp    %edx,%eax
f010f5bd:	75 13                	jne    f010f5d2 <test_alloc_block_NF+0x7db>
f010f5bf:	a1 ac 0e 6c f0       	mov    0xf06c0eac,%eax
f010f5c4:	83 f8 05             	cmp    $0x5,%eax
f010f5c7:	75 09                	jne    f010f5d2 <test_alloc_block_NF+0x7db>
f010f5c9:	a1 dc 8a 65 f0       	mov    0xf0658adc,%eax
f010f5ce:	85 c0                	test   %eax,%eax
f010f5d0:	74 17                	je     f010f5e9 <test_alloc_block_NF+0x7f2>
		panic("alloc_block_NF: Wrong sizes for AvailableMemBlocksList, FreeMemBlocksList and AllocMemBlocksList.");
f010f5d2:	83 ec 04             	sub    $0x4,%esp
f010f5d5:	68 84 7c 13 f0       	push   $0xf0137c84
f010f5da:	68 5f 02 00 00       	push   $0x25f
f010f5df:	68 34 72 13 f0       	push   $0xf0137234
f010f5e4:	e8 bd 0b ff ff       	call   f01001a6 <_panic>

	//Check FreeMemBlocksList content
	size = 0;
f010f5e9:	c7 85 10 ff ff ff 00 	movl   $0x0,-0xf0(%ebp)
f010f5f0:	00 00 00 
	actualSize = numOfFreeBlocks_NF-3;
f010f5f3:	c7 45 d8 05 00 00 00 	movl   $0x5,-0x28(%ebp)
	BlocksSVAs[1] = 0x2000 + 1*kilo;
f010f5fa:	c7 45 b8 00 24 00 00 	movl   $0x2400,-0x48(%ebp)
	BlocksSizes[1] = 7*kilo;
f010f601:	c7 45 98 00 1c 00 00 	movl   $0x1c00,-0x68(%ebp)
	chk = check_list_data(&FreeMemBlocksList, BlocksSVAs, BlocksSizes, &size, actualSize);
f010f608:	83 ec 0c             	sub    $0xc,%esp
f010f60b:	ff 75 d8             	pushl  -0x28(%ebp)
f010f60e:	8d 85 10 ff ff ff    	lea    -0xf0(%ebp),%eax
f010f614:	50                   	push   %eax
f010f615:	8d 45 94             	lea    -0x6c(%ebp),%eax
f010f618:	50                   	push   %eax
f010f619:	8d 45 b4             	lea    -0x4c(%ebp),%eax
f010f61c:	50                   	push   %eax
f010f61d:	68 a0 0e 6c f0       	push   $0xf06c0ea0
f010f622:	e8 42 0c 00 00       	call   f0110269 <check_list_data>
f010f627:	83 c4 20             	add    $0x20,%esp
f010f62a:	89 45 d4             	mov    %eax,-0x2c(%ebp)
	if(chk != 1) panic("alloc_block_NF: WRONG NF ALLOC .. FreeMemBlocksList content is not correct.");
f010f62d:	83 7d d4 01          	cmpl   $0x1,-0x2c(%ebp)
f010f631:	74 17                	je     f010f64a <test_alloc_block_NF+0x853>
f010f633:	83 ec 04             	sub    $0x4,%esp
f010f636:	68 e8 7c 13 f0       	push   $0xf0137ce8
f010f63b:	68 67 02 00 00       	push   $0x267
f010f640:	68 34 72 13 f0       	push   $0xf0137234
f010f645:	e8 5c 0b ff ff       	call   f01001a6 <_panic>
	if(size != actualSize) panic("alloc_block_NF: WRONG NF ALLOC .. FreeMemBlocksList size is not correct.");
f010f64a:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f010f650:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f010f653:	74 17                	je     f010f66c <test_alloc_block_NF+0x875>
f010f655:	83 ec 04             	sub    $0x4,%esp
f010f658:	68 34 7d 13 f0       	push   $0xf0137d34
f010f65d:	68 68 02 00 00       	push   $0x268
f010f662:	68 34 72 13 f0       	push   $0xf0137234
f010f667:	e8 3a 0b ff ff       	call   f01001a6 <_panic>

	//====================================================================//
	//show_list_content(&FreeMemBlocksList);
	cprintf("Congratulations!! test alloc_block_NF completed successfully.\n");
f010f66c:	83 ec 0c             	sub    $0xc,%esp
f010f66f:	68 80 7d 13 f0       	push   $0xf0137d80
f010f674:	e8 b4 15 ff ff       	call   f0100c2d <cprintf>
f010f679:	83 c4 10             	add    $0x10,%esp

}
f010f67c:	90                   	nop
f010f67d:	8d 65 f4             	lea    -0xc(%ebp),%esp
f010f680:	5b                   	pop    %ebx
f010f681:	5e                   	pop    %esi
f010f682:	5f                   	pop    %edi
f010f683:	5d                   	pop    %ebp
f010f684:	c3                   	ret    

f010f685 <test_insert_sorted_with_merge_freeList>:

void test_insert_sorted_with_merge_freeList()
{
f010f685:	55                   	push   %ebp
f010f686:	89 e5                	mov    %esp,%ebp
f010f688:	57                   	push   %edi
f010f689:	81 ec 04 01 00 00    	sub    $0x104,%esp
	uint32 numOfBlocks = 10;
f010f68f:	c7 45 f4 0a 00 00 00 	movl   $0xa,-0xc(%ebp)
	initialize_MemBlocksList(numOfBlocks);
f010f696:	83 ec 0c             	sub    $0xc,%esp
f010f699:	ff 75 f4             	pushl  -0xc(%ebp)
f010f69c:	e8 f4 1b 02 00       	call   f0131295 <initialize_MemBlocksList>
f010f6a1:	83 c4 10             	add    $0x10,%esp
	LIST_INIT(&AllocMemBlocksList);
f010f6a4:	c7 05 d0 8a 65 f0 00 	movl   $0x0,0xf0658ad0
f010f6ab:	00 00 00 
f010f6ae:	c7 05 d4 8a 65 f0 00 	movl   $0x0,0xf0658ad4
f010f6b5:	00 00 00 
f010f6b8:	c7 05 dc 8a 65 f0 00 	movl   $0x0,0xf0658adc
f010f6bf:	00 00 00 
	LIST_INIT(&FreeMemBlocksList);
f010f6c2:	c7 05 a0 0e 6c f0 00 	movl   $0x0,0xf06c0ea0
f010f6c9:	00 00 00 
f010f6cc:	c7 05 a4 0e 6c f0 00 	movl   $0x0,0xf06c0ea4
f010f6d3:	00 00 00 
f010f6d6:	c7 05 ac 0e 6c f0 00 	movl   $0x0,0xf06c0eac
f010f6dd:	00 00 00 

	uint32 blocksToInsertSVAs[10]={0,0,0,0,0,0,0,0,0,0};
f010f6e0:	8d 55 c0             	lea    -0x40(%ebp),%edx
f010f6e3:	b9 0a 00 00 00       	mov    $0xa,%ecx
f010f6e8:	b8 00 00 00 00       	mov    $0x0,%eax
f010f6ed:	89 d7                	mov    %edx,%edi
f010f6ef:	f3 ab                	rep stos %eax,%es:(%edi)
	uint32 blocksToInsertSizes[10]={0,0,0,0,0,0,0,0,0,0};
f010f6f1:	8d 55 98             	lea    -0x68(%ebp),%edx
f010f6f4:	b9 0a 00 00 00       	mov    $0xa,%ecx
f010f6f9:	b8 00 00 00 00       	mov    $0x0,%eax
f010f6fe:	89 d7                	mov    %edx,%edi
f010f700:	f3 ab                	rep stos %eax,%es:(%edi)
	uint32 size = 0;
f010f702:	c7 45 94 00 00 00 00 	movl   $0x0,-0x6c(%ebp)
	uint32 actualSize = 0;
f010f709:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)

	/*INSERT_SORTED_WITH MERGE Scenario 1: CASE 0 - Insert BLOCK_1 in the empty FreeMemBlocksList*/
	int idx_blocksToInsert = 3;
f010f710:	c7 45 ec 03 00 00 00 	movl   $0x3,-0x14(%ebp)
	blocksToInsertSVAs[idx_blocksToInsert] = 8*kilo;
f010f717:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010f71a:	c7 44 85 c0 00 20 00 	movl   $0x2000,-0x40(%ebp,%eax,4)
f010f721:	00 
	blocksToInsertSizes[idx_blocksToInsert] = 4*kilo;
f010f722:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010f725:	c7 44 85 98 00 10 00 	movl   $0x1000,-0x68(%ebp,%eax,4)
f010f72c:	00 
	struct MemBlock blockToInsert1;
	blockToInsert1.sva = blocksToInsertSVAs[idx_blocksToInsert];
f010f72d:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010f730:	8b 44 85 c0          	mov    -0x40(%ebp,%eax,4),%eax
f010f734:	89 45 8c             	mov    %eax,-0x74(%ebp)
	blockToInsert1.size = blocksToInsertSizes[idx_blocksToInsert];
f010f737:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010f73a:	8b 44 85 98          	mov    -0x68(%ebp,%eax,4),%eax
f010f73e:	89 45 90             	mov    %eax,-0x70(%ebp)

	insert_sorted_with_merge_freeList(&blockToInsert1);
f010f741:	83 ec 0c             	sub    $0xc,%esp
f010f744:	8d 45 84             	lea    -0x7c(%ebp),%eax
f010f747:	50                   	push   %eax
f010f748:	e8 b5 28 02 00       	call   f0132002 <insert_sorted_with_merge_freeList>
f010f74d:	83 c4 10             	add    $0x10,%esp

	//Check 1: Check size of the AllocMemBlocksList
	if (LIST_SIZE(&(AllocMemBlocksList)) != 0 || LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks || LIST_SIZE(&(FreeMemBlocksList)) != 1)
f010f750:	a1 dc 8a 65 f0       	mov    0xf0658adc,%eax
f010f755:	85 c0                	test   %eax,%eax
f010f757:	75 14                	jne    f010f76d <test_insert_sorted_with_merge_freeList+0xe8>
f010f759:	a1 e0 0e 6c f0       	mov    0xf06c0ee0,%eax
f010f75e:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f010f761:	75 0a                	jne    f010f76d <test_insert_sorted_with_merge_freeList+0xe8>
f010f763:	a1 ac 0e 6c f0       	mov    0xf06c0eac,%eax
f010f768:	83 f8 01             	cmp    $0x1,%eax
f010f76b:	74 17                	je     f010f784 <test_insert_sorted_with_merge_freeList+0xff>
		panic("insert_sorted_with_merge: Wrong sizes for AvailableMemBlocksList, FreeMemBlocksList and AllocMemBlocksList.");
f010f76d:	83 ec 04             	sub    $0x4,%esp
f010f770:	68 e0 7d 13 f0       	push   $0xf0137de0
f010f775:	68 88 02 00 00       	push   $0x288
f010f77a:	68 34 72 13 f0       	push   $0xf0137234
f010f77f:	e8 22 0a ff ff       	call   f01001a6 <_panic>

	//Check 2: Check the free list content
	size = 0;
f010f784:	c7 45 94 00 00 00 00 	movl   $0x0,-0x6c(%ebp)
	actualSize = 1;
f010f78b:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
	int chk = check_list_data(&FreeMemBlocksList, blocksToInsertSVAs, blocksToInsertSizes, &size, actualSize);
f010f792:	83 ec 0c             	sub    $0xc,%esp
f010f795:	ff 75 f0             	pushl  -0x10(%ebp)
f010f798:	8d 45 94             	lea    -0x6c(%ebp),%eax
f010f79b:	50                   	push   %eax
f010f79c:	8d 45 98             	lea    -0x68(%ebp),%eax
f010f79f:	50                   	push   %eax
f010f7a0:	8d 45 c0             	lea    -0x40(%ebp),%eax
f010f7a3:	50                   	push   %eax
f010f7a4:	68 a0 0e 6c f0       	push   $0xf06c0ea0
f010f7a9:	e8 bb 0a 00 00       	call   f0110269 <check_list_data>
f010f7ae:	83 c4 20             	add    $0x20,%esp
f010f7b1:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if(chk != 1) panic("insert_sorted_with_merge: WRONG INSERT .. FreeMemBlocksList content is not correct.");
f010f7b4:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f010f7b8:	74 17                	je     f010f7d1 <test_insert_sorted_with_merge_freeList+0x14c>
f010f7ba:	83 ec 04             	sub    $0x4,%esp
f010f7bd:	68 4c 7e 13 f0       	push   $0xf0137e4c
f010f7c2:	68 8e 02 00 00       	push   $0x28e
f010f7c7:	68 34 72 13 f0       	push   $0xf0137234
f010f7cc:	e8 d5 09 ff ff       	call   f01001a6 <_panic>
	if(size != actualSize) panic("insert_sorted_with_merge: WRONG INSERT .. FreeMemBlocksList size is not correct.");
f010f7d1:	8b 45 94             	mov    -0x6c(%ebp),%eax
f010f7d4:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f010f7d7:	74 17                	je     f010f7f0 <test_insert_sorted_with_merge_freeList+0x16b>
f010f7d9:	83 ec 04             	sub    $0x4,%esp
f010f7dc:	68 a0 7e 13 f0       	push   $0xf0137ea0
f010f7e1:	68 8f 02 00 00       	push   $0x28f
f010f7e6:	68 34 72 13 f0       	push   $0xf0137234
f010f7eb:	e8 b6 09 ff ff       	call   f01001a6 <_panic>

	//====================================================================//
	/*INSERT_SORTED_WITH MERGE Scenario 2: CASE 1 - Insert with NO MERGE in the FreeMemBlocksList (AT THE TAIL)*/
	idx_blocksToInsert = 7;
f010f7f0:	c7 45 ec 07 00 00 00 	movl   $0x7,-0x14(%ebp)
	blocksToInsertSVAs[idx_blocksToInsert] = 8*kilo + 4*kilo + 20*kilo;
f010f7f7:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010f7fa:	c7 44 85 c0 00 80 00 	movl   $0x8000,-0x40(%ebp,%eax,4)
f010f801:	00 
	blocksToInsertSizes[idx_blocksToInsert] = 7*kilo;
f010f802:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010f805:	c7 44 85 98 00 1c 00 	movl   $0x1c00,-0x68(%ebp,%eax,4)
f010f80c:	00 
	struct MemBlock blockToInsert2;
	blockToInsert2.sva = blocksToInsertSVAs[idx_blocksToInsert];
f010f80d:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010f810:	8b 44 85 c0          	mov    -0x40(%ebp,%eax,4),%eax
f010f814:	89 85 7c ff ff ff    	mov    %eax,-0x84(%ebp)
	blockToInsert2.size = blocksToInsertSizes[idx_blocksToInsert];
f010f81a:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010f81d:	8b 44 85 98          	mov    -0x68(%ebp,%eax,4),%eax
f010f821:	89 45 80             	mov    %eax,-0x80(%ebp)

	insert_sorted_with_merge_freeList(&blockToInsert2);
f010f824:	83 ec 0c             	sub    $0xc,%esp
f010f827:	8d 85 74 ff ff ff    	lea    -0x8c(%ebp),%eax
f010f82d:	50                   	push   %eax
f010f82e:	e8 cf 27 02 00       	call   f0132002 <insert_sorted_with_merge_freeList>
f010f833:	83 c4 10             	add    $0x10,%esp

	//Check 1: Check size of the AllocMemBlocksList
	if (LIST_SIZE(&(AllocMemBlocksList)) != 0 || LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks || LIST_SIZE(&(FreeMemBlocksList)) != 2)
f010f836:	a1 dc 8a 65 f0       	mov    0xf0658adc,%eax
f010f83b:	85 c0                	test   %eax,%eax
f010f83d:	75 14                	jne    f010f853 <test_insert_sorted_with_merge_freeList+0x1ce>
f010f83f:	a1 e0 0e 6c f0       	mov    0xf06c0ee0,%eax
f010f844:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f010f847:	75 0a                	jne    f010f853 <test_insert_sorted_with_merge_freeList+0x1ce>
f010f849:	a1 ac 0e 6c f0       	mov    0xf06c0eac,%eax
f010f84e:	83 f8 02             	cmp    $0x2,%eax
f010f851:	74 17                	je     f010f86a <test_insert_sorted_with_merge_freeList+0x1e5>
		panic("insert_sorted_with_merge: Wrong sizes for AvailableMemBlocksList, FreeMemBlocksList and AllocMemBlocksList.");
f010f853:	83 ec 04             	sub    $0x4,%esp
f010f856:	68 e0 7d 13 f0       	push   $0xf0137de0
f010f85b:	68 9e 02 00 00       	push   $0x29e
f010f860:	68 34 72 13 f0       	push   $0xf0137234
f010f865:	e8 3c 09 ff ff       	call   f01001a6 <_panic>

	//Check 2: Check the FreeMemBlocksList content
	size = 0;
f010f86a:	c7 45 94 00 00 00 00 	movl   $0x0,-0x6c(%ebp)
	actualSize = 2;
f010f871:	c7 45 f0 02 00 00 00 	movl   $0x2,-0x10(%ebp)
	chk = check_list_data(&FreeMemBlocksList, blocksToInsertSVAs, blocksToInsertSizes, &size, actualSize);
f010f878:	83 ec 0c             	sub    $0xc,%esp
f010f87b:	ff 75 f0             	pushl  -0x10(%ebp)
f010f87e:	8d 45 94             	lea    -0x6c(%ebp),%eax
f010f881:	50                   	push   %eax
f010f882:	8d 45 98             	lea    -0x68(%ebp),%eax
f010f885:	50                   	push   %eax
f010f886:	8d 45 c0             	lea    -0x40(%ebp),%eax
f010f889:	50                   	push   %eax
f010f88a:	68 a0 0e 6c f0       	push   $0xf06c0ea0
f010f88f:	e8 d5 09 00 00       	call   f0110269 <check_list_data>
f010f894:	83 c4 20             	add    $0x20,%esp
f010f897:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if(chk != 1) panic("insert_sorted_with_merge: WRONG INSERT .. FreeMemBlocksList content is not correct.");
f010f89a:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f010f89e:	74 17                	je     f010f8b7 <test_insert_sorted_with_merge_freeList+0x232>
f010f8a0:	83 ec 04             	sub    $0x4,%esp
f010f8a3:	68 4c 7e 13 f0       	push   $0xf0137e4c
f010f8a8:	68 a4 02 00 00       	push   $0x2a4
f010f8ad:	68 34 72 13 f0       	push   $0xf0137234
f010f8b2:	e8 ef 08 ff ff       	call   f01001a6 <_panic>
	if(size != actualSize) panic("insert_sorted_with_merge: WRONG INSERT .. FreeMemBlocksList size is not correct.");
f010f8b7:	8b 45 94             	mov    -0x6c(%ebp),%eax
f010f8ba:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f010f8bd:	74 17                	je     f010f8d6 <test_insert_sorted_with_merge_freeList+0x251>
f010f8bf:	83 ec 04             	sub    $0x4,%esp
f010f8c2:	68 a0 7e 13 f0       	push   $0xf0137ea0
f010f8c7:	68 a5 02 00 00       	push   $0x2a5
f010f8cc:	68 34 72 13 f0       	push   $0xf0137234
f010f8d1:	e8 d0 08 ff ff       	call   f01001a6 <_panic>

	//====================================================================//
	/*INSERT_SORTED_WITH MERGE Scenario 3: CASE 1 - Insert with NO MERGE in the FreeMemBlocksList (AT THE HEAD)*/
	idx_blocksToInsert = 1;
f010f8d6:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
	blocksToInsertSVAs[idx_blocksToInsert] = 1*kilo;
f010f8dd:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010f8e0:	c7 44 85 c0 00 04 00 	movl   $0x400,-0x40(%ebp,%eax,4)
f010f8e7:	00 
	blocksToInsertSizes[idx_blocksToInsert] = 1*kilo;
f010f8e8:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010f8eb:	c7 44 85 98 00 04 00 	movl   $0x400,-0x68(%ebp,%eax,4)
f010f8f2:	00 
	struct MemBlock blockToInsert3;
	blockToInsert3.sva = blocksToInsertSVAs[idx_blocksToInsert];
f010f8f3:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010f8f6:	8b 44 85 c0          	mov    -0x40(%ebp,%eax,4),%eax
f010f8fa:	89 85 6c ff ff ff    	mov    %eax,-0x94(%ebp)
	blockToInsert3.size = blocksToInsertSizes[idx_blocksToInsert];
f010f900:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010f903:	8b 44 85 98          	mov    -0x68(%ebp,%eax,4),%eax
f010f907:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)

	insert_sorted_with_merge_freeList(&blockToInsert3);
f010f90d:	83 ec 0c             	sub    $0xc,%esp
f010f910:	8d 85 64 ff ff ff    	lea    -0x9c(%ebp),%eax
f010f916:	50                   	push   %eax
f010f917:	e8 e6 26 02 00       	call   f0132002 <insert_sorted_with_merge_freeList>
f010f91c:	83 c4 10             	add    $0x10,%esp

	//Check 1: Check size of the AllocMemBlocksList
	if (LIST_SIZE(&(AllocMemBlocksList)) != 0 || LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks || LIST_SIZE(&(FreeMemBlocksList)) != 3)
f010f91f:	a1 dc 8a 65 f0       	mov    0xf0658adc,%eax
f010f924:	85 c0                	test   %eax,%eax
f010f926:	75 14                	jne    f010f93c <test_insert_sorted_with_merge_freeList+0x2b7>
f010f928:	a1 e0 0e 6c f0       	mov    0xf06c0ee0,%eax
f010f92d:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f010f930:	75 0a                	jne    f010f93c <test_insert_sorted_with_merge_freeList+0x2b7>
f010f932:	a1 ac 0e 6c f0       	mov    0xf06c0eac,%eax
f010f937:	83 f8 03             	cmp    $0x3,%eax
f010f93a:	74 17                	je     f010f953 <test_insert_sorted_with_merge_freeList+0x2ce>
		panic("insert_sorted_with_merge: Wrong sizes for AvailableMemBlocksList, FreeMemBlocksList and AllocMemBlocksList.");
f010f93c:	83 ec 04             	sub    $0x4,%esp
f010f93f:	68 e0 7d 13 f0       	push   $0xf0137de0
f010f944:	68 b4 02 00 00       	push   $0x2b4
f010f949:	68 34 72 13 f0       	push   $0xf0137234
f010f94e:	e8 53 08 ff ff       	call   f01001a6 <_panic>

	//Check 2: Check the FreeMemBlocksList content
	size = 0;
f010f953:	c7 45 94 00 00 00 00 	movl   $0x0,-0x6c(%ebp)
	actualSize = 3;
f010f95a:	c7 45 f0 03 00 00 00 	movl   $0x3,-0x10(%ebp)
	chk = check_list_data(&FreeMemBlocksList, blocksToInsertSVAs, blocksToInsertSizes, &size, actualSize);
f010f961:	83 ec 0c             	sub    $0xc,%esp
f010f964:	ff 75 f0             	pushl  -0x10(%ebp)
f010f967:	8d 45 94             	lea    -0x6c(%ebp),%eax
f010f96a:	50                   	push   %eax
f010f96b:	8d 45 98             	lea    -0x68(%ebp),%eax
f010f96e:	50                   	push   %eax
f010f96f:	8d 45 c0             	lea    -0x40(%ebp),%eax
f010f972:	50                   	push   %eax
f010f973:	68 a0 0e 6c f0       	push   $0xf06c0ea0
f010f978:	e8 ec 08 00 00       	call   f0110269 <check_list_data>
f010f97d:	83 c4 20             	add    $0x20,%esp
f010f980:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if(chk != 1) panic("insert_sorted_with_merge: WRONG INSERT .. FreeMemBlocksList content is not correct.");
f010f983:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f010f987:	74 17                	je     f010f9a0 <test_insert_sorted_with_merge_freeList+0x31b>
f010f989:	83 ec 04             	sub    $0x4,%esp
f010f98c:	68 4c 7e 13 f0       	push   $0xf0137e4c
f010f991:	68 ba 02 00 00       	push   $0x2ba
f010f996:	68 34 72 13 f0       	push   $0xf0137234
f010f99b:	e8 06 08 ff ff       	call   f01001a6 <_panic>
	if(size != actualSize) panic("insert_sorted_with_merge: WRONG INSERT .. FreeMemBlocksList size is not correct.");
f010f9a0:	8b 45 94             	mov    -0x6c(%ebp),%eax
f010f9a3:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f010f9a6:	74 17                	je     f010f9bf <test_insert_sorted_with_merge_freeList+0x33a>
f010f9a8:	83 ec 04             	sub    $0x4,%esp
f010f9ab:	68 a0 7e 13 f0       	push   $0xf0137ea0
f010f9b0:	68 bb 02 00 00       	push   $0x2bb
f010f9b5:	68 34 72 13 f0       	push   $0xf0137234
f010f9ba:	e8 e7 07 ff ff       	call   f01001a6 <_panic>

	//====================================================================//
	/*INSERT_SORTED_WITH MERGE Scenario 4: CASE 1 - Insert with NO MERGE in the FreeMemBlocksList (between 2 blocks)*/
	idx_blocksToInsert = 6;
f010f9bf:	c7 45 ec 06 00 00 00 	movl   $0x6,-0x14(%ebp)
	blocksToInsertSVAs[idx_blocksToInsert] = 8*kilo + 4*kilo + 10*kilo;
f010f9c6:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010f9c9:	c7 44 85 c0 00 58 00 	movl   $0x5800,-0x40(%ebp,%eax,4)
f010f9d0:	00 
	blocksToInsertSizes[idx_blocksToInsert] = 4*kilo;
f010f9d1:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010f9d4:	c7 44 85 98 00 10 00 	movl   $0x1000,-0x68(%ebp,%eax,4)
f010f9db:	00 
	struct MemBlock blockToInsert4;
	blockToInsert4.sva = blocksToInsertSVAs[idx_blocksToInsert];
f010f9dc:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010f9df:	8b 44 85 c0          	mov    -0x40(%ebp,%eax,4),%eax
f010f9e3:	89 85 5c ff ff ff    	mov    %eax,-0xa4(%ebp)
	blockToInsert4.size = blocksToInsertSizes[idx_blocksToInsert];
f010f9e9:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010f9ec:	8b 44 85 98          	mov    -0x68(%ebp,%eax,4),%eax
f010f9f0:	89 85 60 ff ff ff    	mov    %eax,-0xa0(%ebp)

	insert_sorted_with_merge_freeList(&blockToInsert4);
f010f9f6:	83 ec 0c             	sub    $0xc,%esp
f010f9f9:	8d 85 54 ff ff ff    	lea    -0xac(%ebp),%eax
f010f9ff:	50                   	push   %eax
f010fa00:	e8 fd 25 02 00       	call   f0132002 <insert_sorted_with_merge_freeList>
f010fa05:	83 c4 10             	add    $0x10,%esp

	//Check 1: Check size of the AllocMemBlocksList
	if (LIST_SIZE(&(AllocMemBlocksList)) != 0 || LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks || LIST_SIZE(&(FreeMemBlocksList)) != 4)
f010fa08:	a1 dc 8a 65 f0       	mov    0xf0658adc,%eax
f010fa0d:	85 c0                	test   %eax,%eax
f010fa0f:	75 14                	jne    f010fa25 <test_insert_sorted_with_merge_freeList+0x3a0>
f010fa11:	a1 e0 0e 6c f0       	mov    0xf06c0ee0,%eax
f010fa16:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f010fa19:	75 0a                	jne    f010fa25 <test_insert_sorted_with_merge_freeList+0x3a0>
f010fa1b:	a1 ac 0e 6c f0       	mov    0xf06c0eac,%eax
f010fa20:	83 f8 04             	cmp    $0x4,%eax
f010fa23:	74 17                	je     f010fa3c <test_insert_sorted_with_merge_freeList+0x3b7>
		panic("insert_sorted_with_merge: Wrong sizes for AvailableMemBlocksList, FreeMemBlocksList and AllocMemBlocksList.");
f010fa25:	83 ec 04             	sub    $0x4,%esp
f010fa28:	68 e0 7d 13 f0       	push   $0xf0137de0
f010fa2d:	68 ca 02 00 00       	push   $0x2ca
f010fa32:	68 34 72 13 f0       	push   $0xf0137234
f010fa37:	e8 6a 07 ff ff       	call   f01001a6 <_panic>

	//Check 2: Check the FreeMemBlocksList content
	size = 0;
f010fa3c:	c7 45 94 00 00 00 00 	movl   $0x0,-0x6c(%ebp)
	actualSize = 4;
f010fa43:	c7 45 f0 04 00 00 00 	movl   $0x4,-0x10(%ebp)
	chk = check_list_data(&FreeMemBlocksList, blocksToInsertSVAs, blocksToInsertSizes, &size, actualSize);
f010fa4a:	83 ec 0c             	sub    $0xc,%esp
f010fa4d:	ff 75 f0             	pushl  -0x10(%ebp)
f010fa50:	8d 45 94             	lea    -0x6c(%ebp),%eax
f010fa53:	50                   	push   %eax
f010fa54:	8d 45 98             	lea    -0x68(%ebp),%eax
f010fa57:	50                   	push   %eax
f010fa58:	8d 45 c0             	lea    -0x40(%ebp),%eax
f010fa5b:	50                   	push   %eax
f010fa5c:	68 a0 0e 6c f0       	push   $0xf06c0ea0
f010fa61:	e8 03 08 00 00       	call   f0110269 <check_list_data>
f010fa66:	83 c4 20             	add    $0x20,%esp
f010fa69:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if(chk != 1) panic("insert_sorted_with_merge: WRONG INSERT .. FreeMemBlocksList content is not correct.");
f010fa6c:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f010fa70:	74 17                	je     f010fa89 <test_insert_sorted_with_merge_freeList+0x404>
f010fa72:	83 ec 04             	sub    $0x4,%esp
f010fa75:	68 4c 7e 13 f0       	push   $0xf0137e4c
f010fa7a:	68 d0 02 00 00       	push   $0x2d0
f010fa7f:	68 34 72 13 f0       	push   $0xf0137234
f010fa84:	e8 1d 07 ff ff       	call   f01001a6 <_panic>
	if(size != actualSize) panic("insert_sorted_with_merge: WRONG INSERT .. FreeMemBlocksList size is not correct.");
f010fa89:	8b 45 94             	mov    -0x6c(%ebp),%eax
f010fa8c:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f010fa8f:	74 17                	je     f010faa8 <test_insert_sorted_with_merge_freeList+0x423>
f010fa91:	83 ec 04             	sub    $0x4,%esp
f010fa94:	68 a0 7e 13 f0       	push   $0xf0137ea0
f010fa99:	68 d1 02 00 00       	push   $0x2d1
f010fa9e:	68 34 72 13 f0       	push   $0xf0137234
f010faa3:	e8 fe 06 ff ff       	call   f01001a6 <_panic>

	//====================================================================//
	/*INSERT_SORTED_WITH MERGE Scenario 5: CASE 2 - Merge with previous ONLY in the FreeMemBlocksList (AT the tail)*/
	idx_blocksToInsert = 8;
f010faa8:	c7 45 ec 08 00 00 00 	movl   $0x8,-0x14(%ebp)
	blocksToInsertSVAs[idx_blocksToInsert] = 8*kilo + 4*kilo + 20*kilo + 7*kilo;
f010faaf:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010fab2:	c7 44 85 c0 00 9c 00 	movl   $0x9c00,-0x40(%ebp,%eax,4)
f010fab9:	00 
	blocksToInsertSizes[idx_blocksToInsert] = 3*kilo;
f010faba:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010fabd:	c7 44 85 98 00 0c 00 	movl   $0xc00,-0x68(%ebp,%eax,4)
f010fac4:	00 
	struct MemBlock blockToInsert5;
	blockToInsert5.sva = blocksToInsertSVAs[idx_blocksToInsert];
f010fac5:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010fac8:	8b 44 85 c0          	mov    -0x40(%ebp,%eax,4),%eax
f010facc:	89 85 4c ff ff ff    	mov    %eax,-0xb4(%ebp)
	blockToInsert5.size = blocksToInsertSizes[idx_blocksToInsert];
f010fad2:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010fad5:	8b 44 85 98          	mov    -0x68(%ebp,%eax,4),%eax
f010fad9:	89 85 50 ff ff ff    	mov    %eax,-0xb0(%ebp)

//	cprintf("===>BEFORE\n");
//	show_list_content(&FreeMemBlocksList);

	insert_sorted_with_merge_freeList(&blockToInsert5);
f010fadf:	83 ec 0c             	sub    $0xc,%esp
f010fae2:	8d 85 44 ff ff ff    	lea    -0xbc(%ebp),%eax
f010fae8:	50                   	push   %eax
f010fae9:	e8 14 25 02 00       	call   f0132002 <insert_sorted_with_merge_freeList>
f010faee:	83 c4 10             	add    $0x10,%esp

	//Check 1: Check size of the AllocMemBlocksList
	if (LIST_SIZE(&(AllocMemBlocksList)) != 0 || LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks + 1 || LIST_SIZE(&(FreeMemBlocksList)) != 4)
f010faf1:	a1 dc 8a 65 f0       	mov    0xf0658adc,%eax
f010faf6:	85 c0                	test   %eax,%eax
f010faf8:	75 17                	jne    f010fb11 <test_insert_sorted_with_merge_freeList+0x48c>
f010fafa:	a1 e0 0e 6c f0       	mov    0xf06c0ee0,%eax
f010faff:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010fb02:	42                   	inc    %edx
f010fb03:	39 d0                	cmp    %edx,%eax
f010fb05:	75 0a                	jne    f010fb11 <test_insert_sorted_with_merge_freeList+0x48c>
f010fb07:	a1 ac 0e 6c f0       	mov    0xf06c0eac,%eax
f010fb0c:	83 f8 04             	cmp    $0x4,%eax
f010fb0f:	74 17                	je     f010fb28 <test_insert_sorted_with_merge_freeList+0x4a3>
		panic("insert_sorted_with_merge: Wrong sizes for AvailableMemBlocksList, FreeMemBlocksList and AllocMemBlocksList.");
f010fb11:	83 ec 04             	sub    $0x4,%esp
f010fb14:	68 e0 7d 13 f0       	push   $0xf0137de0
f010fb19:	68 e3 02 00 00       	push   $0x2e3
f010fb1e:	68 34 72 13 f0       	push   $0xf0137234
f010fb23:	e8 7e 06 ff ff       	call   f01001a6 <_panic>

	//Check 2: Check the FreeMemBlocksList content
	size = 0;
f010fb28:	c7 45 94 00 00 00 00 	movl   $0x0,-0x6c(%ebp)
	actualSize = 4;
f010fb2f:	c7 45 f0 04 00 00 00 	movl   $0x4,-0x10(%ebp)
	blocksToInsertSizes[idx_blocksToInsert-1] += blocksToInsertSizes[idx_blocksToInsert];
f010fb36:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010fb39:	8d 50 ff             	lea    -0x1(%eax),%edx
f010fb3c:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010fb3f:	48                   	dec    %eax
f010fb40:	8b 4c 85 98          	mov    -0x68(%ebp,%eax,4),%ecx
f010fb44:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010fb47:	8b 44 85 98          	mov    -0x68(%ebp,%eax,4),%eax
f010fb4b:	01 c8                	add    %ecx,%eax
f010fb4d:	89 44 95 98          	mov    %eax,-0x68(%ebp,%edx,4)
	blocksToInsertSVAs[idx_blocksToInsert] = 0x0;
f010fb51:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010fb54:	c7 44 85 c0 00 00 00 	movl   $0x0,-0x40(%ebp,%eax,4)
f010fb5b:	00 
	blocksToInsertSizes[idx_blocksToInsert] = 0;
f010fb5c:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010fb5f:	c7 44 85 98 00 00 00 	movl   $0x0,-0x68(%ebp,%eax,4)
f010fb66:	00 
	chk = check_list_data(&FreeMemBlocksList, blocksToInsertSVAs, blocksToInsertSizes, &size, actualSize);
f010fb67:	83 ec 0c             	sub    $0xc,%esp
f010fb6a:	ff 75 f0             	pushl  -0x10(%ebp)
f010fb6d:	8d 45 94             	lea    -0x6c(%ebp),%eax
f010fb70:	50                   	push   %eax
f010fb71:	8d 45 98             	lea    -0x68(%ebp),%eax
f010fb74:	50                   	push   %eax
f010fb75:	8d 45 c0             	lea    -0x40(%ebp),%eax
f010fb78:	50                   	push   %eax
f010fb79:	68 a0 0e 6c f0       	push   $0xf06c0ea0
f010fb7e:	e8 e6 06 00 00       	call   f0110269 <check_list_data>
f010fb83:	83 c4 20             	add    $0x20,%esp
f010fb86:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if(chk != 1) panic("insert_sorted_with_merge: WRONG INSERT .. FreeMemBlocksList content is not correct.");
f010fb89:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f010fb8d:	74 17                	je     f010fba6 <test_insert_sorted_with_merge_freeList+0x521>
f010fb8f:	83 ec 04             	sub    $0x4,%esp
f010fb92:	68 4c 7e 13 f0       	push   $0xf0137e4c
f010fb97:	68 ec 02 00 00       	push   $0x2ec
f010fb9c:	68 34 72 13 f0       	push   $0xf0137234
f010fba1:	e8 00 06 ff ff       	call   f01001a6 <_panic>
	if(size != actualSize) panic("insert_sorted_with_merge: WRONG INSERT .. FreeMemBlocksList size is not correct.");
f010fba6:	8b 45 94             	mov    -0x6c(%ebp),%eax
f010fba9:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f010fbac:	74 17                	je     f010fbc5 <test_insert_sorted_with_merge_freeList+0x540>
f010fbae:	83 ec 04             	sub    $0x4,%esp
f010fbb1:	68 a0 7e 13 f0       	push   $0xf0137ea0
f010fbb6:	68 ed 02 00 00       	push   $0x2ed
f010fbbb:	68 34 72 13 f0       	push   $0xf0137234
f010fbc0:	e8 e1 05 ff ff       	call   f01001a6 <_panic>

	//Check 3: Check the AvailableMemBlocksList content
	size = 0;
f010fbc5:	c7 45 94 00 00 00 00 	movl   $0x0,-0x6c(%ebp)
	chk = check_avaliable_list_data(&size);
f010fbcc:	83 ec 0c             	sub    $0xc,%esp
f010fbcf:	8d 45 94             	lea    -0x6c(%ebp),%eax
f010fbd2:	50                   	push   %eax
f010fbd3:	e8 5d 07 00 00       	call   f0110335 <check_avaliable_list_data>
f010fbd8:	83 c4 10             	add    $0x10,%esp
f010fbdb:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if(size != numOfBlocks + 1) panic("insert_sorted_with_merge: WRONG INSERT .. AvailableMemBlocksList size is not correct.");
f010fbde:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010fbe1:	8d 50 01             	lea    0x1(%eax),%edx
f010fbe4:	8b 45 94             	mov    -0x6c(%ebp),%eax
f010fbe7:	39 c2                	cmp    %eax,%edx
f010fbe9:	74 17                	je     f010fc02 <test_insert_sorted_with_merge_freeList+0x57d>
f010fbeb:	83 ec 04             	sub    $0x4,%esp
f010fbee:	68 f4 7e 13 f0       	push   $0xf0137ef4
f010fbf3:	68 f2 02 00 00       	push   $0x2f2
f010fbf8:	68 34 72 13 f0       	push   $0xf0137234
f010fbfd:	e8 a4 05 ff ff       	call   f01001a6 <_panic>
	if(chk != 1) panic("insert_sorted_with_merge: WRONG INSERT .. AvailableMemBlocksList content is not correct.");
f010fc02:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f010fc06:	74 17                	je     f010fc1f <test_insert_sorted_with_merge_freeList+0x59a>
f010fc08:	83 ec 04             	sub    $0x4,%esp
f010fc0b:	68 4c 7f 13 f0       	push   $0xf0137f4c
f010fc10:	68 f3 02 00 00       	push   $0x2f3
f010fc15:	68 34 72 13 f0       	push   $0xf0137234
f010fc1a:	e8 87 05 ff ff       	call   f01001a6 <_panic>

	//====================================================================//
	/*INSERT_SORTED_WITH MERGE Scenario 6: CASE 2 - Merge with previous ONLY in the FreeMemBlocksList (between 2 blocks)*/
	idx_blocksToInsert = 4;
f010fc1f:	c7 45 ec 04 00 00 00 	movl   $0x4,-0x14(%ebp)
	blocksToInsertSVAs[idx_blocksToInsert] = 8*kilo + 4*kilo;
f010fc26:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010fc29:	c7 44 85 c0 00 30 00 	movl   $0x3000,-0x40(%ebp,%eax,4)
f010fc30:	00 
	blocksToInsertSizes[idx_blocksToInsert] = 1*kilo;
f010fc31:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010fc34:	c7 44 85 98 00 04 00 	movl   $0x400,-0x68(%ebp,%eax,4)
f010fc3b:	00 
	struct MemBlock blockToInsert6;
	blockToInsert6.sva = blocksToInsertSVAs[idx_blocksToInsert];
f010fc3c:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010fc3f:	8b 44 85 c0          	mov    -0x40(%ebp,%eax,4),%eax
f010fc43:	89 85 3c ff ff ff    	mov    %eax,-0xc4(%ebp)
	blockToInsert6.size = blocksToInsertSizes[idx_blocksToInsert];
f010fc49:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010fc4c:	8b 44 85 98          	mov    -0x68(%ebp,%eax,4),%eax
f010fc50:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%ebp)

//	cprintf("===>BEFORE\n");
//	show_list_content(&FreeMemBlocksList);

	insert_sorted_with_merge_freeList(&blockToInsert6);
f010fc56:	83 ec 0c             	sub    $0xc,%esp
f010fc59:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f010fc5f:	50                   	push   %eax
f010fc60:	e8 9d 23 02 00       	call   f0132002 <insert_sorted_with_merge_freeList>
f010fc65:	83 c4 10             	add    $0x10,%esp

	//Check 1: Check size of the AllocMemBlocksList
	if (LIST_SIZE(&(AllocMemBlocksList)) != 0 || LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks + 2 || LIST_SIZE(&(FreeMemBlocksList)) != 4)
f010fc68:	a1 dc 8a 65 f0       	mov    0xf0658adc,%eax
f010fc6d:	85 c0                	test   %eax,%eax
f010fc6f:	75 19                	jne    f010fc8a <test_insert_sorted_with_merge_freeList+0x605>
f010fc71:	a1 e0 0e 6c f0       	mov    0xf06c0ee0,%eax
f010fc76:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010fc79:	83 c2 02             	add    $0x2,%edx
f010fc7c:	39 d0                	cmp    %edx,%eax
f010fc7e:	75 0a                	jne    f010fc8a <test_insert_sorted_with_merge_freeList+0x605>
f010fc80:	a1 ac 0e 6c f0       	mov    0xf06c0eac,%eax
f010fc85:	83 f8 04             	cmp    $0x4,%eax
f010fc88:	74 17                	je     f010fca1 <test_insert_sorted_with_merge_freeList+0x61c>
		panic("insert_sorted_with_merge: Wrong sizes for AvailableMemBlocksList, FreeMemBlocksList and AllocMemBlocksList.");
f010fc8a:	83 ec 04             	sub    $0x4,%esp
f010fc8d:	68 e0 7d 13 f0       	push   $0xf0137de0
f010fc92:	68 05 03 00 00       	push   $0x305
f010fc97:	68 34 72 13 f0       	push   $0xf0137234
f010fc9c:	e8 05 05 ff ff       	call   f01001a6 <_panic>

	//Check 2: Check the FreeMemBlocksList content
	size = 0;
f010fca1:	c7 45 94 00 00 00 00 	movl   $0x0,-0x6c(%ebp)
	actualSize = 4;
f010fca8:	c7 45 f0 04 00 00 00 	movl   $0x4,-0x10(%ebp)
	blocksToInsertSizes[idx_blocksToInsert-1] += blocksToInsertSizes[idx_blocksToInsert];
f010fcaf:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010fcb2:	8d 50 ff             	lea    -0x1(%eax),%edx
f010fcb5:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010fcb8:	48                   	dec    %eax
f010fcb9:	8b 4c 85 98          	mov    -0x68(%ebp,%eax,4),%ecx
f010fcbd:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010fcc0:	8b 44 85 98          	mov    -0x68(%ebp,%eax,4),%eax
f010fcc4:	01 c8                	add    %ecx,%eax
f010fcc6:	89 44 95 98          	mov    %eax,-0x68(%ebp,%edx,4)
	blocksToInsertSVAs[idx_blocksToInsert] = 0x0;
f010fcca:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010fccd:	c7 44 85 c0 00 00 00 	movl   $0x0,-0x40(%ebp,%eax,4)
f010fcd4:	00 
	blocksToInsertSizes[idx_blocksToInsert] = 0;
f010fcd5:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010fcd8:	c7 44 85 98 00 00 00 	movl   $0x0,-0x68(%ebp,%eax,4)
f010fcdf:	00 
	chk = check_list_data(&FreeMemBlocksList, blocksToInsertSVAs, blocksToInsertSizes, &size, actualSize);
f010fce0:	83 ec 0c             	sub    $0xc,%esp
f010fce3:	ff 75 f0             	pushl  -0x10(%ebp)
f010fce6:	8d 45 94             	lea    -0x6c(%ebp),%eax
f010fce9:	50                   	push   %eax
f010fcea:	8d 45 98             	lea    -0x68(%ebp),%eax
f010fced:	50                   	push   %eax
f010fcee:	8d 45 c0             	lea    -0x40(%ebp),%eax
f010fcf1:	50                   	push   %eax
f010fcf2:	68 a0 0e 6c f0       	push   $0xf06c0ea0
f010fcf7:	e8 6d 05 00 00       	call   f0110269 <check_list_data>
f010fcfc:	83 c4 20             	add    $0x20,%esp
f010fcff:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if(chk != 1) panic("insert_sorted_with_merge: WRONG INSERT .. FreeMemBlocksList content is not correct.");
f010fd02:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f010fd06:	74 17                	je     f010fd1f <test_insert_sorted_with_merge_freeList+0x69a>
f010fd08:	83 ec 04             	sub    $0x4,%esp
f010fd0b:	68 4c 7e 13 f0       	push   $0xf0137e4c
f010fd10:	68 0e 03 00 00       	push   $0x30e
f010fd15:	68 34 72 13 f0       	push   $0xf0137234
f010fd1a:	e8 87 04 ff ff       	call   f01001a6 <_panic>
	if(size != actualSize) panic("insert_sorted_with_merge: WRONG INSERT .. FreeMemBlocksList size is not correct.");
f010fd1f:	8b 45 94             	mov    -0x6c(%ebp),%eax
f010fd22:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f010fd25:	74 17                	je     f010fd3e <test_insert_sorted_with_merge_freeList+0x6b9>
f010fd27:	83 ec 04             	sub    $0x4,%esp
f010fd2a:	68 a0 7e 13 f0       	push   $0xf0137ea0
f010fd2f:	68 0f 03 00 00       	push   $0x30f
f010fd34:	68 34 72 13 f0       	push   $0xf0137234
f010fd39:	e8 68 04 ff ff       	call   f01001a6 <_panic>

	//Check 3: Check the AvailableMemBlocksList content
	size = 0;
f010fd3e:	c7 45 94 00 00 00 00 	movl   $0x0,-0x6c(%ebp)
	chk = check_avaliable_list_data(&size);
f010fd45:	83 ec 0c             	sub    $0xc,%esp
f010fd48:	8d 45 94             	lea    -0x6c(%ebp),%eax
f010fd4b:	50                   	push   %eax
f010fd4c:	e8 e4 05 00 00       	call   f0110335 <check_avaliable_list_data>
f010fd51:	83 c4 10             	add    $0x10,%esp
f010fd54:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if(size != numOfBlocks + 2) panic("insert_sorted_with_merge: WRONG INSERT .. AvailableMemBlocksList size is not correct.");
f010fd57:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010fd5a:	8d 50 02             	lea    0x2(%eax),%edx
f010fd5d:	8b 45 94             	mov    -0x6c(%ebp),%eax
f010fd60:	39 c2                	cmp    %eax,%edx
f010fd62:	74 17                	je     f010fd7b <test_insert_sorted_with_merge_freeList+0x6f6>
f010fd64:	83 ec 04             	sub    $0x4,%esp
f010fd67:	68 f4 7e 13 f0       	push   $0xf0137ef4
f010fd6c:	68 14 03 00 00       	push   $0x314
f010fd71:	68 34 72 13 f0       	push   $0xf0137234
f010fd76:	e8 2b 04 ff ff       	call   f01001a6 <_panic>
	if(chk != 1) panic("insert_sorted_with_merge: WRONG INSERT .. AvailableMemBlocksList content is not correct.");
f010fd7b:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f010fd7f:	74 17                	je     f010fd98 <test_insert_sorted_with_merge_freeList+0x713>
f010fd81:	83 ec 04             	sub    $0x4,%esp
f010fd84:	68 4c 7f 13 f0       	push   $0xf0137f4c
f010fd89:	68 15 03 00 00       	push   $0x315
f010fd8e:	68 34 72 13 f0       	push   $0xf0137234
f010fd93:	e8 0e 04 ff ff       	call   f01001a6 <_panic>

	//====================================================================//
	/*INSERT_SORTED_WITH MERGE Scenario 7: CASE 3 - Merge with next ONLY in the FreeMemBlocksList (AT the head)*/
	idx_blocksToInsert = 0;
f010fd98:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
	blocksToInsertSVAs[idx_blocksToInsert] = 0x0;
f010fd9f:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010fda2:	c7 44 85 c0 00 00 00 	movl   $0x0,-0x40(%ebp,%eax,4)
f010fda9:	00 
	blocksToInsertSizes[idx_blocksToInsert] = 1*kilo;
f010fdaa:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010fdad:	c7 44 85 98 00 04 00 	movl   $0x400,-0x68(%ebp,%eax,4)
f010fdb4:	00 
	struct MemBlock blockToInsert7;
	blockToInsert7.sva = blocksToInsertSVAs[idx_blocksToInsert];
f010fdb5:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010fdb8:	8b 44 85 c0          	mov    -0x40(%ebp,%eax,4),%eax
f010fdbc:	89 85 2c ff ff ff    	mov    %eax,-0xd4(%ebp)
	blockToInsert7.size = blocksToInsertSizes[idx_blocksToInsert];
f010fdc2:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010fdc5:	8b 44 85 98          	mov    -0x68(%ebp,%eax,4),%eax
f010fdc9:	89 85 30 ff ff ff    	mov    %eax,-0xd0(%ebp)

//	cprintf("===>BEFORE\n");
//	show_list_content(&FreeMemBlocksList);

	insert_sorted_with_merge_freeList(&blockToInsert7);
f010fdcf:	83 ec 0c             	sub    $0xc,%esp
f010fdd2:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f010fdd8:	50                   	push   %eax
f010fdd9:	e8 24 22 02 00       	call   f0132002 <insert_sorted_with_merge_freeList>
f010fdde:	83 c4 10             	add    $0x10,%esp
//	show_list_content(&FreeMemBlocksList);

	//Check 1: Check size of the AllocMemBlocksList
	if (LIST_SIZE(&(AllocMemBlocksList)) != 0 || LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks + 3 || LIST_SIZE(&(FreeMemBlocksList)) != 4)
f010fde1:	a1 dc 8a 65 f0       	mov    0xf0658adc,%eax
f010fde6:	85 c0                	test   %eax,%eax
f010fde8:	75 19                	jne    f010fe03 <test_insert_sorted_with_merge_freeList+0x77e>
f010fdea:	a1 e0 0e 6c f0       	mov    0xf06c0ee0,%eax
f010fdef:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010fdf2:	83 c2 03             	add    $0x3,%edx
f010fdf5:	39 d0                	cmp    %edx,%eax
f010fdf7:	75 0a                	jne    f010fe03 <test_insert_sorted_with_merge_freeList+0x77e>
f010fdf9:	a1 ac 0e 6c f0       	mov    0xf06c0eac,%eax
f010fdfe:	83 f8 04             	cmp    $0x4,%eax
f010fe01:	74 17                	je     f010fe1a <test_insert_sorted_with_merge_freeList+0x795>
		panic("insert_sorted_with_merge: Wrong sizes for AvailableMemBlocksList, FreeMemBlocksList and AllocMemBlocksList.");
f010fe03:	83 ec 04             	sub    $0x4,%esp
f010fe06:	68 e0 7d 13 f0       	push   $0xf0137de0
f010fe0b:	68 28 03 00 00       	push   $0x328
f010fe10:	68 34 72 13 f0       	push   $0xf0137234
f010fe15:	e8 8c 03 ff ff       	call   f01001a6 <_panic>

	//Check 2: Check the FreeMemBlocksList content
	size = 0;
f010fe1a:	c7 45 94 00 00 00 00 	movl   $0x0,-0x6c(%ebp)
	actualSize = 4;
f010fe21:	c7 45 f0 04 00 00 00 	movl   $0x4,-0x10(%ebp)
	blocksToInsertSVAs[idx_blocksToInsert+1] = blocksToInsertSVAs[idx_blocksToInsert];
f010fe28:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010fe2b:	8d 50 01             	lea    0x1(%eax),%edx
f010fe2e:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010fe31:	8b 44 85 c0          	mov    -0x40(%ebp,%eax,4),%eax
f010fe35:	89 44 95 c0          	mov    %eax,-0x40(%ebp,%edx,4)
	blocksToInsertSizes[idx_blocksToInsert+1] += blocksToInsertSizes[idx_blocksToInsert];
f010fe39:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010fe3c:	8d 50 01             	lea    0x1(%eax),%edx
f010fe3f:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010fe42:	40                   	inc    %eax
f010fe43:	8b 4c 85 98          	mov    -0x68(%ebp,%eax,4),%ecx
f010fe47:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010fe4a:	8b 44 85 98          	mov    -0x68(%ebp,%eax,4),%eax
f010fe4e:	01 c8                	add    %ecx,%eax
f010fe50:	89 44 95 98          	mov    %eax,-0x68(%ebp,%edx,4)
	blocksToInsertSVAs[idx_blocksToInsert] = 0x0;
f010fe54:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010fe57:	c7 44 85 c0 00 00 00 	movl   $0x0,-0x40(%ebp,%eax,4)
f010fe5e:	00 
	blocksToInsertSizes[idx_blocksToInsert] = 0;
f010fe5f:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010fe62:	c7 44 85 98 00 00 00 	movl   $0x0,-0x68(%ebp,%eax,4)
f010fe69:	00 
	chk = check_list_data(&FreeMemBlocksList, blocksToInsertSVAs, blocksToInsertSizes, &size, actualSize);
f010fe6a:	83 ec 0c             	sub    $0xc,%esp
f010fe6d:	ff 75 f0             	pushl  -0x10(%ebp)
f010fe70:	8d 45 94             	lea    -0x6c(%ebp),%eax
f010fe73:	50                   	push   %eax
f010fe74:	8d 45 98             	lea    -0x68(%ebp),%eax
f010fe77:	50                   	push   %eax
f010fe78:	8d 45 c0             	lea    -0x40(%ebp),%eax
f010fe7b:	50                   	push   %eax
f010fe7c:	68 a0 0e 6c f0       	push   $0xf06c0ea0
f010fe81:	e8 e3 03 00 00       	call   f0110269 <check_list_data>
f010fe86:	83 c4 20             	add    $0x20,%esp
f010fe89:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if(chk != 1) panic("insert_sorted_with_merge: WRONG INSERT .. FreeMemBlocksList content is not correct.");
f010fe8c:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f010fe90:	74 17                	je     f010fea9 <test_insert_sorted_with_merge_freeList+0x824>
f010fe92:	83 ec 04             	sub    $0x4,%esp
f010fe95:	68 4c 7e 13 f0       	push   $0xf0137e4c
f010fe9a:	68 32 03 00 00       	push   $0x332
f010fe9f:	68 34 72 13 f0       	push   $0xf0137234
f010fea4:	e8 fd 02 ff ff       	call   f01001a6 <_panic>
	if(size != actualSize) panic("insert_sorted_with_merge: WRONG INSERT .. FreeMemBlocksList size is not correct.");
f010fea9:	8b 45 94             	mov    -0x6c(%ebp),%eax
f010feac:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f010feaf:	74 17                	je     f010fec8 <test_insert_sorted_with_merge_freeList+0x843>
f010feb1:	83 ec 04             	sub    $0x4,%esp
f010feb4:	68 a0 7e 13 f0       	push   $0xf0137ea0
f010feb9:	68 33 03 00 00       	push   $0x333
f010febe:	68 34 72 13 f0       	push   $0xf0137234
f010fec3:	e8 de 02 ff ff       	call   f01001a6 <_panic>

	//Check 3: Check the AvailableMemBlocksList content
	size = 0;
f010fec8:	c7 45 94 00 00 00 00 	movl   $0x0,-0x6c(%ebp)
	chk = check_avaliable_list_data(&size);
f010fecf:	83 ec 0c             	sub    $0xc,%esp
f010fed2:	8d 45 94             	lea    -0x6c(%ebp),%eax
f010fed5:	50                   	push   %eax
f010fed6:	e8 5a 04 00 00       	call   f0110335 <check_avaliable_list_data>
f010fedb:	83 c4 10             	add    $0x10,%esp
f010fede:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if(size != numOfBlocks + 3) panic("insert_sorted_with_merge: WRONG INSERT .. AvailableMemBlocksList size is not correct.");
f010fee1:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010fee4:	8d 50 03             	lea    0x3(%eax),%edx
f010fee7:	8b 45 94             	mov    -0x6c(%ebp),%eax
f010feea:	39 c2                	cmp    %eax,%edx
f010feec:	74 17                	je     f010ff05 <test_insert_sorted_with_merge_freeList+0x880>
f010feee:	83 ec 04             	sub    $0x4,%esp
f010fef1:	68 f4 7e 13 f0       	push   $0xf0137ef4
f010fef6:	68 38 03 00 00       	push   $0x338
f010fefb:	68 34 72 13 f0       	push   $0xf0137234
f010ff00:	e8 a1 02 ff ff       	call   f01001a6 <_panic>
	if(chk != 1) panic("insert_sorted_with_merge: WRONG INSERT .. AvailableMemBlocksList content is not correct.");
f010ff05:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f010ff09:	74 17                	je     f010ff22 <test_insert_sorted_with_merge_freeList+0x89d>
f010ff0b:	83 ec 04             	sub    $0x4,%esp
f010ff0e:	68 4c 7f 13 f0       	push   $0xf0137f4c
f010ff13:	68 39 03 00 00       	push   $0x339
f010ff18:	68 34 72 13 f0       	push   $0xf0137234
f010ff1d:	e8 84 02 ff ff       	call   f01001a6 <_panic>

	//====================================================================//
	/*INSERT_SORTED_WITH MERGE Scenario 8: CASE 3 - Merge with next ONLY in the FreeMemBlocksList (between 2 blocks)*/
	idx_blocksToInsert = 5;
f010ff22:	c7 45 ec 05 00 00 00 	movl   $0x5,-0x14(%ebp)
	blocksToInsertSVAs[idx_blocksToInsert] = (8*kilo + 4*kilo + 10*kilo) - (4*kilo);
f010ff29:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010ff2c:	c7 44 85 c0 00 48 00 	movl   $0x4800,-0x40(%ebp,%eax,4)
f010ff33:	00 
	blocksToInsertSizes[idx_blocksToInsert] = 4*kilo;
f010ff34:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010ff37:	c7 44 85 98 00 10 00 	movl   $0x1000,-0x68(%ebp,%eax,4)
f010ff3e:	00 
	struct MemBlock blockToInsert8;
	blockToInsert8.sva = blocksToInsertSVAs[idx_blocksToInsert];
f010ff3f:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010ff42:	8b 44 85 c0          	mov    -0x40(%ebp,%eax,4),%eax
f010ff46:	89 85 1c ff ff ff    	mov    %eax,-0xe4(%ebp)
	blockToInsert8.size = blocksToInsertSizes[idx_blocksToInsert];
f010ff4c:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010ff4f:	8b 44 85 98          	mov    -0x68(%ebp,%eax,4),%eax
f010ff53:	89 85 20 ff ff ff    	mov    %eax,-0xe0(%ebp)

//	cprintf("===>BEFORE\n");
//	show_list_content(&FreeMemBlocksList);

	insert_sorted_with_merge_freeList(&blockToInsert8);
f010ff59:	83 ec 0c             	sub    $0xc,%esp
f010ff5c:	8d 85 14 ff ff ff    	lea    -0xec(%ebp),%eax
f010ff62:	50                   	push   %eax
f010ff63:	e8 9a 20 02 00       	call   f0132002 <insert_sorted_with_merge_freeList>
f010ff68:	83 c4 10             	add    $0x10,%esp
//	show_list_content(&FreeMemBlocksList);

	//Check 1: Check size of the AllocMemBlocksList
	if (LIST_SIZE(&(AllocMemBlocksList)) != 0 || LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks + 4 || LIST_SIZE(&(FreeMemBlocksList)) != 4)
f010ff6b:	a1 dc 8a 65 f0       	mov    0xf0658adc,%eax
f010ff70:	85 c0                	test   %eax,%eax
f010ff72:	75 19                	jne    f010ff8d <test_insert_sorted_with_merge_freeList+0x908>
f010ff74:	a1 e0 0e 6c f0       	mov    0xf06c0ee0,%eax
f010ff79:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010ff7c:	83 c2 04             	add    $0x4,%edx
f010ff7f:	39 d0                	cmp    %edx,%eax
f010ff81:	75 0a                	jne    f010ff8d <test_insert_sorted_with_merge_freeList+0x908>
f010ff83:	a1 ac 0e 6c f0       	mov    0xf06c0eac,%eax
f010ff88:	83 f8 04             	cmp    $0x4,%eax
f010ff8b:	74 17                	je     f010ffa4 <test_insert_sorted_with_merge_freeList+0x91f>
		panic("insert_sorted_with_merge: Wrong sizes for AvailableMemBlocksList, FreeMemBlocksList and AllocMemBlocksList.");
f010ff8d:	83 ec 04             	sub    $0x4,%esp
f010ff90:	68 e0 7d 13 f0       	push   $0xf0137de0
f010ff95:	68 4c 03 00 00       	push   $0x34c
f010ff9a:	68 34 72 13 f0       	push   $0xf0137234
f010ff9f:	e8 02 02 ff ff       	call   f01001a6 <_panic>

	//Check 2: Check the FreeMemBlocksList content
	size = 0;
f010ffa4:	c7 45 94 00 00 00 00 	movl   $0x0,-0x6c(%ebp)
	actualSize = 4;
f010ffab:	c7 45 f0 04 00 00 00 	movl   $0x4,-0x10(%ebp)
	blocksToInsertSVAs[idx_blocksToInsert+1] = blocksToInsertSVAs[idx_blocksToInsert];
f010ffb2:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010ffb5:	8d 50 01             	lea    0x1(%eax),%edx
f010ffb8:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010ffbb:	8b 44 85 c0          	mov    -0x40(%ebp,%eax,4),%eax
f010ffbf:	89 44 95 c0          	mov    %eax,-0x40(%ebp,%edx,4)
	blocksToInsertSizes[idx_blocksToInsert+1] += blocksToInsertSizes[idx_blocksToInsert];
f010ffc3:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010ffc6:	8d 50 01             	lea    0x1(%eax),%edx
f010ffc9:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010ffcc:	40                   	inc    %eax
f010ffcd:	8b 4c 85 98          	mov    -0x68(%ebp,%eax,4),%ecx
f010ffd1:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010ffd4:	8b 44 85 98          	mov    -0x68(%ebp,%eax,4),%eax
f010ffd8:	01 c8                	add    %ecx,%eax
f010ffda:	89 44 95 98          	mov    %eax,-0x68(%ebp,%edx,4)
	blocksToInsertSVAs[idx_blocksToInsert] = 0x0;
f010ffde:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010ffe1:	c7 44 85 c0 00 00 00 	movl   $0x0,-0x40(%ebp,%eax,4)
f010ffe8:	00 
	blocksToInsertSizes[idx_blocksToInsert] = 0;
f010ffe9:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010ffec:	c7 44 85 98 00 00 00 	movl   $0x0,-0x68(%ebp,%eax,4)
f010fff3:	00 
	chk = check_list_data(&FreeMemBlocksList, blocksToInsertSVAs, blocksToInsertSizes, &size, actualSize);
f010fff4:	83 ec 0c             	sub    $0xc,%esp
f010fff7:	ff 75 f0             	pushl  -0x10(%ebp)
f010fffa:	8d 45 94             	lea    -0x6c(%ebp),%eax
f010fffd:	50                   	push   %eax
f010fffe:	8d 45 98             	lea    -0x68(%ebp),%eax
f0110001:	50                   	push   %eax
f0110002:	8d 45 c0             	lea    -0x40(%ebp),%eax
f0110005:	50                   	push   %eax
f0110006:	68 a0 0e 6c f0       	push   $0xf06c0ea0
f011000b:	e8 59 02 00 00       	call   f0110269 <check_list_data>
f0110010:	83 c4 20             	add    $0x20,%esp
f0110013:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if(chk != 1) panic("insert_sorted_with_merge: WRONG INSERT .. FreeMemBlocksList content is not correct.");
f0110016:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f011001a:	74 17                	je     f0110033 <test_insert_sorted_with_merge_freeList+0x9ae>
f011001c:	83 ec 04             	sub    $0x4,%esp
f011001f:	68 4c 7e 13 f0       	push   $0xf0137e4c
f0110024:	68 56 03 00 00       	push   $0x356
f0110029:	68 34 72 13 f0       	push   $0xf0137234
f011002e:	e8 73 01 ff ff       	call   f01001a6 <_panic>
	if(size != actualSize) panic("insert_sorted_with_merge: WRONG INSERT .. FreeMemBlocksList size is not correct.");
f0110033:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0110036:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0110039:	74 17                	je     f0110052 <test_insert_sorted_with_merge_freeList+0x9cd>
f011003b:	83 ec 04             	sub    $0x4,%esp
f011003e:	68 a0 7e 13 f0       	push   $0xf0137ea0
f0110043:	68 57 03 00 00       	push   $0x357
f0110048:	68 34 72 13 f0       	push   $0xf0137234
f011004d:	e8 54 01 ff ff       	call   f01001a6 <_panic>

	//Check 3: Check the AvailableMemBlocksList content
	size = 0;
f0110052:	c7 45 94 00 00 00 00 	movl   $0x0,-0x6c(%ebp)
	chk = check_avaliable_list_data(&size);
f0110059:	83 ec 0c             	sub    $0xc,%esp
f011005c:	8d 45 94             	lea    -0x6c(%ebp),%eax
f011005f:	50                   	push   %eax
f0110060:	e8 d0 02 00 00       	call   f0110335 <check_avaliable_list_data>
f0110065:	83 c4 10             	add    $0x10,%esp
f0110068:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if(size != numOfBlocks + 4) panic("insert_sorted_with_merge: WRONG INSERT .. AvailableMemBlocksList size is not correct.");
f011006b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f011006e:	8d 50 04             	lea    0x4(%eax),%edx
f0110071:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0110074:	39 c2                	cmp    %eax,%edx
f0110076:	74 17                	je     f011008f <test_insert_sorted_with_merge_freeList+0xa0a>
f0110078:	83 ec 04             	sub    $0x4,%esp
f011007b:	68 f4 7e 13 f0       	push   $0xf0137ef4
f0110080:	68 5c 03 00 00       	push   $0x35c
f0110085:	68 34 72 13 f0       	push   $0xf0137234
f011008a:	e8 17 01 ff ff       	call   f01001a6 <_panic>
	if(chk != 1) panic("insert_sorted_with_merge: WRONG INSERT .. AvailableMemBlocksList content is not correct.");
f011008f:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f0110093:	74 17                	je     f01100ac <test_insert_sorted_with_merge_freeList+0xa27>
f0110095:	83 ec 04             	sub    $0x4,%esp
f0110098:	68 4c 7f 13 f0       	push   $0xf0137f4c
f011009d:	68 5d 03 00 00       	push   $0x35d
f01100a2:	68 34 72 13 f0       	push   $0xf0137234
f01100a7:	e8 fa 00 ff ff       	call   f01001a6 <_panic>

	//====================================================================//
	/*INSERT_SORTED_WITH MERGE Scenario 9: CASE 4 - Merge with prev & next in the FreeMemBlocksList */
	idx_blocksToInsert = 2;
f01100ac:	c7 45 ec 02 00 00 00 	movl   $0x2,-0x14(%ebp)
	blocksToInsertSVAs[idx_blocksToInsert] = 2*kilo;
f01100b3:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01100b6:	c7 44 85 c0 00 08 00 	movl   $0x800,-0x40(%ebp,%eax,4)
f01100bd:	00 
	blocksToInsertSizes[idx_blocksToInsert] = 0x2000 - 2*kilo; //6144
f01100be:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01100c1:	c7 44 85 98 00 18 00 	movl   $0x1800,-0x68(%ebp,%eax,4)
f01100c8:	00 
	struct MemBlock blockToInsert9;
	blockToInsert9.sva = blocksToInsertSVAs[idx_blocksToInsert];
f01100c9:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01100cc:	8b 44 85 c0          	mov    -0x40(%ebp,%eax,4),%eax
f01100d0:	89 85 0c ff ff ff    	mov    %eax,-0xf4(%ebp)
	blockToInsert9.size = blocksToInsertSizes[idx_blocksToInsert];
f01100d6:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01100d9:	8b 44 85 98          	mov    -0x68(%ebp,%eax,4),%eax
f01100dd:	89 85 10 ff ff ff    	mov    %eax,-0xf0(%ebp)

	//printf("===>BEFORE\n");
	//show_list_content(&FreeMemBlocksList);

	insert_sorted_with_merge_freeList(&blockToInsert9);
f01100e3:	83 ec 0c             	sub    $0xc,%esp
f01100e6:	8d 85 04 ff ff ff    	lea    -0xfc(%ebp),%eax
f01100ec:	50                   	push   %eax
f01100ed:	e8 10 1f 02 00       	call   f0132002 <insert_sorted_with_merge_freeList>
f01100f2:	83 c4 10             	add    $0x10,%esp
	//show_list_content(&FreeMemBlocksList);

	//Check 1: Check size of the AllocMemBlocksList
	if (LIST_SIZE(&(AllocMemBlocksList)) != 0 || LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks + 6 || LIST_SIZE(&(FreeMemBlocksList)) != 3)
f01100f5:	a1 dc 8a 65 f0       	mov    0xf0658adc,%eax
f01100fa:	85 c0                	test   %eax,%eax
f01100fc:	75 19                	jne    f0110117 <test_insert_sorted_with_merge_freeList+0xa92>
f01100fe:	a1 e0 0e 6c f0       	mov    0xf06c0ee0,%eax
f0110103:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0110106:	83 c2 06             	add    $0x6,%edx
f0110109:	39 d0                	cmp    %edx,%eax
f011010b:	75 0a                	jne    f0110117 <test_insert_sorted_with_merge_freeList+0xa92>
f011010d:	a1 ac 0e 6c f0       	mov    0xf06c0eac,%eax
f0110112:	83 f8 03             	cmp    $0x3,%eax
f0110115:	74 17                	je     f011012e <test_insert_sorted_with_merge_freeList+0xaa9>
		panic("insert_sorted_with_merge: Wrong sizes for AvailableMemBlocksList, FreeMemBlocksList and AllocMemBlocksList.");
f0110117:	83 ec 04             	sub    $0x4,%esp
f011011a:	68 e0 7d 13 f0       	push   $0xf0137de0
f011011f:	68 70 03 00 00       	push   $0x370
f0110124:	68 34 72 13 f0       	push   $0xf0137234
f0110129:	e8 78 00 ff ff       	call   f01001a6 <_panic>

	//Check 2: Check the FreeMemBlocksList content
	size = 0;
f011012e:	c7 45 94 00 00 00 00 	movl   $0x0,-0x6c(%ebp)
	actualSize = 3;
f0110135:	c7 45 f0 03 00 00 00 	movl   $0x3,-0x10(%ebp)
	blocksToInsertSVAs[idx_blocksToInsert-1] = 0x0;
f011013c:	8b 45 ec             	mov    -0x14(%ebp),%eax
f011013f:	48                   	dec    %eax
f0110140:	c7 44 85 c0 00 00 00 	movl   $0x0,-0x40(%ebp,%eax,4)
f0110147:	00 
	blocksToInsertSizes[idx_blocksToInsert-1] = blocksToInsertSizes[idx_blocksToInsert-1] + blocksToInsertSizes[idx_blocksToInsert] + blocksToInsertSizes[idx_blocksToInsert+1];
f0110148:	8b 45 ec             	mov    -0x14(%ebp),%eax
f011014b:	8d 50 ff             	lea    -0x1(%eax),%edx
f011014e:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110151:	48                   	dec    %eax
f0110152:	8b 4c 85 98          	mov    -0x68(%ebp,%eax,4),%ecx
f0110156:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110159:	8b 44 85 98          	mov    -0x68(%ebp,%eax,4),%eax
f011015d:	01 c1                	add    %eax,%ecx
f011015f:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110162:	40                   	inc    %eax
f0110163:	8b 44 85 98          	mov    -0x68(%ebp,%eax,4),%eax
f0110167:	01 c8                	add    %ecx,%eax
f0110169:	89 44 95 98          	mov    %eax,-0x68(%ebp,%edx,4)
	blocksToInsertSVAs[idx_blocksToInsert] = 0x0;
f011016d:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110170:	c7 44 85 c0 00 00 00 	movl   $0x0,-0x40(%ebp,%eax,4)
f0110177:	00 
	blocksToInsertSizes[idx_blocksToInsert] = 0;
f0110178:	8b 45 ec             	mov    -0x14(%ebp),%eax
f011017b:	c7 44 85 98 00 00 00 	movl   $0x0,-0x68(%ebp,%eax,4)
f0110182:	00 
	blocksToInsertSVAs[idx_blocksToInsert+1] = 0x0;
f0110183:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110186:	40                   	inc    %eax
f0110187:	c7 44 85 c0 00 00 00 	movl   $0x0,-0x40(%ebp,%eax,4)
f011018e:	00 
	blocksToInsertSizes[idx_blocksToInsert+1] = 0;
f011018f:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110192:	40                   	inc    %eax
f0110193:	c7 44 85 98 00 00 00 	movl   $0x0,-0x68(%ebp,%eax,4)
f011019a:	00 
	chk = check_list_data(&FreeMemBlocksList, blocksToInsertSVAs, blocksToInsertSizes, &size, actualSize);
f011019b:	83 ec 0c             	sub    $0xc,%esp
f011019e:	ff 75 f0             	pushl  -0x10(%ebp)
f01101a1:	8d 45 94             	lea    -0x6c(%ebp),%eax
f01101a4:	50                   	push   %eax
f01101a5:	8d 45 98             	lea    -0x68(%ebp),%eax
f01101a8:	50                   	push   %eax
f01101a9:	8d 45 c0             	lea    -0x40(%ebp),%eax
f01101ac:	50                   	push   %eax
f01101ad:	68 a0 0e 6c f0       	push   $0xf06c0ea0
f01101b2:	e8 b2 00 00 00       	call   f0110269 <check_list_data>
f01101b7:	83 c4 20             	add    $0x20,%esp
f01101ba:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if(chk != 1) panic("insert_sorted_with_merge: WRONG INSERT .. FreeMemBlocksList content is not correct.");
f01101bd:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f01101c1:	74 17                	je     f01101da <test_insert_sorted_with_merge_freeList+0xb55>
f01101c3:	83 ec 04             	sub    $0x4,%esp
f01101c6:	68 4c 7e 13 f0       	push   $0xf0137e4c
f01101cb:	68 7c 03 00 00       	push   $0x37c
f01101d0:	68 34 72 13 f0       	push   $0xf0137234
f01101d5:	e8 cc ff fe ff       	call   f01001a6 <_panic>
	if(size != actualSize) panic("insert_sorted_with_merge: WRONG INSERT .. FreeMemBlocksList size is not correct.");
f01101da:	8b 45 94             	mov    -0x6c(%ebp),%eax
f01101dd:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f01101e0:	74 17                	je     f01101f9 <test_insert_sorted_with_merge_freeList+0xb74>
f01101e2:	83 ec 04             	sub    $0x4,%esp
f01101e5:	68 a0 7e 13 f0       	push   $0xf0137ea0
f01101ea:	68 7d 03 00 00       	push   $0x37d
f01101ef:	68 34 72 13 f0       	push   $0xf0137234
f01101f4:	e8 ad ff fe ff       	call   f01001a6 <_panic>

	//Check 3: Check the AvailableMemBlocksList content
	size = 0;
f01101f9:	c7 45 94 00 00 00 00 	movl   $0x0,-0x6c(%ebp)
	chk = check_avaliable_list_data(&size);
f0110200:	83 ec 0c             	sub    $0xc,%esp
f0110203:	8d 45 94             	lea    -0x6c(%ebp),%eax
f0110206:	50                   	push   %eax
f0110207:	e8 29 01 00 00       	call   f0110335 <check_avaliable_list_data>
f011020c:	83 c4 10             	add    $0x10,%esp
f011020f:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if(size != numOfBlocks + 6) panic("insert_sorted_with_merge: WRONG INSERT .. AvailableMemBlocksList size is not correct.");
f0110212:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0110215:	8d 50 06             	lea    0x6(%eax),%edx
f0110218:	8b 45 94             	mov    -0x6c(%ebp),%eax
f011021b:	39 c2                	cmp    %eax,%edx
f011021d:	74 17                	je     f0110236 <test_insert_sorted_with_merge_freeList+0xbb1>
f011021f:	83 ec 04             	sub    $0x4,%esp
f0110222:	68 f4 7e 13 f0       	push   $0xf0137ef4
f0110227:	68 82 03 00 00       	push   $0x382
f011022c:	68 34 72 13 f0       	push   $0xf0137234
f0110231:	e8 70 ff fe ff       	call   f01001a6 <_panic>
	if(chk != 1) panic("insert_sorted_with_merge: WRONG INSERT .. AvailableMemBlocksList content is not correct.");
f0110236:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f011023a:	74 17                	je     f0110253 <test_insert_sorted_with_merge_freeList+0xbce>
f011023c:	83 ec 04             	sub    $0x4,%esp
f011023f:	68 4c 7f 13 f0       	push   $0xf0137f4c
f0110244:	68 83 03 00 00       	push   $0x383
f0110249:	68 34 72 13 f0       	push   $0xf0137234
f011024e:	e8 53 ff fe ff       	call   f01001a6 <_panic>
	//====================================================================//


	//show_list_content(&FreeMemBlocksList);
	cprintf("Congratulations!! test insert_sorted_with_merge_freeList completed successfully.\n");
f0110253:	83 ec 0c             	sub    $0xc,%esp
f0110256:	68 a8 7f 13 f0       	push   $0xf0137fa8
f011025b:	e8 cd 09 ff ff       	call   f0100c2d <cprintf>
f0110260:	83 c4 10             	add    $0x10,%esp

}
f0110263:	90                   	nop
f0110264:	8b 7d fc             	mov    -0x4(%ebp),%edi
f0110267:	c9                   	leave  
f0110268:	c3                   	ret    

f0110269 <check_list_data>:

/********************Helper Functions***************************/
int check_list_data(struct MemBlock_List* list, uint32* blocksSVAs, uint32* blocksSizes, uint32* size, uint32 actualSize)
{
f0110269:	55                   	push   %ebp
f011026a:	89 e5                	mov    %esp,%ebp
f011026c:	83 ec 10             	sub    $0x10,%esp
	struct MemBlock* node = NULL;
f011026f:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
	*size = 0;
f0110276:	8b 45 14             	mov    0x14(%ebp),%eax
f0110279:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	int i = 0;
f011027f:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
	LIST_FOREACH(node, list)
f0110286:	8b 45 08             	mov    0x8(%ebp),%eax
f0110289:	8b 00                	mov    (%eax),%eax
f011028b:	89 45 fc             	mov    %eax,-0x4(%ebp)
f011028e:	eb 6e                	jmp    f01102fe <check_list_data+0x95>
	{
		while(blocksSizes[i] == 0) //Empty entry in the given ground truth array .. skip it
			i++;
f0110290:	ff 45 f8             	incl   -0x8(%ebp)
	struct MemBlock* node = NULL;
	*size = 0;
	int i = 0;
	LIST_FOREACH(node, list)
	{
		while(blocksSizes[i] == 0) //Empty entry in the given ground truth array .. skip it
f0110293:	8b 45 f8             	mov    -0x8(%ebp),%eax
f0110296:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f011029d:	8b 45 10             	mov    0x10(%ebp),%eax
f01102a0:	01 d0                	add    %edx,%eax
f01102a2:	8b 00                	mov    (%eax),%eax
f01102a4:	85 c0                	test   %eax,%eax
f01102a6:	74 e8                	je     f0110290 <check_list_data+0x27>
			i++;
		if(node->sva != blocksSVAs[(i)] || node->size != blocksSizes[i])
f01102a8:	8b 45 fc             	mov    -0x4(%ebp),%eax
f01102ab:	8b 50 08             	mov    0x8(%eax),%edx
f01102ae:	8b 45 f8             	mov    -0x8(%ebp),%eax
f01102b1:	8d 0c 85 00 00 00 00 	lea    0x0(,%eax,4),%ecx
f01102b8:	8b 45 0c             	mov    0xc(%ebp),%eax
f01102bb:	01 c8                	add    %ecx,%eax
f01102bd:	8b 00                	mov    (%eax),%eax
f01102bf:	39 c2                	cmp    %eax,%edx
f01102c1:	75 1b                	jne    f01102de <check_list_data+0x75>
f01102c3:	8b 45 fc             	mov    -0x4(%ebp),%eax
f01102c6:	8b 50 0c             	mov    0xc(%eax),%edx
f01102c9:	8b 45 f8             	mov    -0x8(%ebp),%eax
f01102cc:	8d 0c 85 00 00 00 00 	lea    0x0(,%eax,4),%ecx
f01102d3:	8b 45 10             	mov    0x10(%ebp),%eax
f01102d6:	01 c8                	add    %ecx,%eax
f01102d8:	8b 00                	mov    (%eax),%eax
f01102da:	39 c2                	cmp    %eax,%edx
f01102dc:	74 07                	je     f01102e5 <check_list_data+0x7c>
		{
//			cprintf("i = %d .. \n", i);
//			cprintf("Node data: sva = %x, size = %d\n", node->sva, node->size);
//			cprintf("blocks[i] data: sva = %x, size = %d\n", blocksSVAs[(i)], blocksSizes[i]);
			return 0;
f01102de:	b8 00 00 00 00       	mov    $0x0,%eax
f01102e3:	eb 4e                	jmp    f0110333 <check_list_data+0xca>
		}
		(*size)++;
f01102e5:	8b 45 14             	mov    0x14(%ebp),%eax
f01102e8:	8b 00                	mov    (%eax),%eax
f01102ea:	8d 50 01             	lea    0x1(%eax),%edx
f01102ed:	8b 45 14             	mov    0x14(%ebp),%eax
f01102f0:	89 10                	mov    %edx,(%eax)
		i++;
f01102f2:	ff 45 f8             	incl   -0x8(%ebp)
int check_list_data(struct MemBlock_List* list, uint32* blocksSVAs, uint32* blocksSizes, uint32* size, uint32 actualSize)
{
	struct MemBlock* node = NULL;
	*size = 0;
	int i = 0;
	LIST_FOREACH(node, list)
f01102f5:	8b 45 08             	mov    0x8(%ebp),%eax
f01102f8:	8b 40 08             	mov    0x8(%eax),%eax
f01102fb:	89 45 fc             	mov    %eax,-0x4(%ebp)
f01102fe:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
f0110302:	74 07                	je     f011030b <check_list_data+0xa2>
f0110304:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0110307:	8b 00                	mov    (%eax),%eax
f0110309:	eb 05                	jmp    f0110310 <check_list_data+0xa7>
f011030b:	b8 00 00 00 00       	mov    $0x0,%eax
f0110310:	8b 55 08             	mov    0x8(%ebp),%edx
f0110313:	89 42 08             	mov    %eax,0x8(%edx)
f0110316:	8b 45 08             	mov    0x8(%ebp),%eax
f0110319:	8b 40 08             	mov    0x8(%eax),%eax
f011031c:	85 c0                	test   %eax,%eax
f011031e:	0f 85 6f ff ff ff    	jne    f0110293 <check_list_data+0x2a>
f0110324:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
f0110328:	0f 85 65 ff ff ff    	jne    f0110293 <check_list_data+0x2a>
			return 0;
		}
		(*size)++;
		i++;
	}
	return 1;
f011032e:	b8 01 00 00 00       	mov    $0x1,%eax
}
f0110333:	c9                   	leave  
f0110334:	c3                   	ret    

f0110335 <check_avaliable_list_data>:

int check_avaliable_list_data(uint32* size)
{
f0110335:	55                   	push   %ebp
f0110336:	89 e5                	mov    %esp,%ebp
f0110338:	83 ec 10             	sub    $0x10,%esp
	struct MemBlock* node = NULL;
f011033b:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
	*size = 0;
f0110342:	8b 45 08             	mov    0x8(%ebp),%eax
f0110345:	c7 00 00 00 00 00    	movl   $0x0,(%eax)

	LIST_FOREACH(node, &AvailableMemBlocksList)
f011034b:	a1 d4 0e 6c f0       	mov    0xf06c0ed4,%eax
f0110350:	89 45 fc             	mov    %eax,-0x4(%ebp)
f0110353:	eb 30                	jmp    f0110385 <check_avaliable_list_data+0x50>
	{
		if(node->sva != 0x0 || node->size != 0)
f0110355:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0110358:	8b 40 08             	mov    0x8(%eax),%eax
f011035b:	85 c0                	test   %eax,%eax
f011035d:	75 0a                	jne    f0110369 <check_avaliable_list_data+0x34>
f011035f:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0110362:	8b 40 0c             	mov    0xc(%eax),%eax
f0110365:	85 c0                	test   %eax,%eax
f0110367:	74 07                	je     f0110370 <check_avaliable_list_data+0x3b>
		{
			return 0;
f0110369:	b8 00 00 00 00       	mov    $0x0,%eax
f011036e:	eb 40                	jmp    f01103b0 <check_avaliable_list_data+0x7b>
		}
		(*size)++;
f0110370:	8b 45 08             	mov    0x8(%ebp),%eax
f0110373:	8b 00                	mov    (%eax),%eax
f0110375:	8d 50 01             	lea    0x1(%eax),%edx
f0110378:	8b 45 08             	mov    0x8(%ebp),%eax
f011037b:	89 10                	mov    %edx,(%eax)
int check_avaliable_list_data(uint32* size)
{
	struct MemBlock* node = NULL;
	*size = 0;

	LIST_FOREACH(node, &AvailableMemBlocksList)
f011037d:	a1 dc 0e 6c f0       	mov    0xf06c0edc,%eax
f0110382:	89 45 fc             	mov    %eax,-0x4(%ebp)
f0110385:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
f0110389:	74 07                	je     f0110392 <check_avaliable_list_data+0x5d>
f011038b:	8b 45 fc             	mov    -0x4(%ebp),%eax
f011038e:	8b 00                	mov    (%eax),%eax
f0110390:	eb 05                	jmp    f0110397 <check_avaliable_list_data+0x62>
f0110392:	b8 00 00 00 00       	mov    $0x0,%eax
f0110397:	a3 dc 0e 6c f0       	mov    %eax,0xf06c0edc
f011039c:	a1 dc 0e 6c f0       	mov    0xf06c0edc,%eax
f01103a1:	85 c0                	test   %eax,%eax
f01103a3:	75 b0                	jne    f0110355 <check_avaliable_list_data+0x20>
f01103a5:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
f01103a9:	75 aa                	jne    f0110355 <check_avaliable_list_data+0x20>
		{
			return 0;
		}
		(*size)++;
	}
	return 1;
f01103ab:	b8 01 00 00 00       	mov    $0x1,%eax
}
f01103b0:	c9                   	leave  
f01103b1:	c3                   	ret    

f01103b2 <show_list_content>:


void show_list_content(struct MemBlock_List* list)
{
f01103b2:	55                   	push   %ebp
f01103b3:	89 e5                	mov    %esp,%ebp
f01103b5:	83 ec 18             	sub    $0x18,%esp
	struct MemBlock* node = NULL;
f01103b8:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	LIST_FOREACH(node, list)
f01103bf:	8b 45 08             	mov    0x8(%ebp),%eax
f01103c2:	8b 00                	mov    (%eax),%eax
f01103c4:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01103c7:	eb 27                	jmp    f01103f0 <show_list_content+0x3e>
	{
		cprintf("Node data: sva = %x, size = %d\n", node->sva, node->size);
f01103c9:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01103cc:	8b 50 0c             	mov    0xc(%eax),%edx
f01103cf:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01103d2:	8b 40 08             	mov    0x8(%eax),%eax
f01103d5:	83 ec 04             	sub    $0x4,%esp
f01103d8:	52                   	push   %edx
f01103d9:	50                   	push   %eax
f01103da:	68 f8 72 13 f0       	push   $0xf01372f8
f01103df:	e8 49 08 ff ff       	call   f0100c2d <cprintf>
f01103e4:	83 c4 10             	add    $0x10,%esp


void show_list_content(struct MemBlock_List* list)
{
	struct MemBlock* node = NULL;
	LIST_FOREACH(node, list)
f01103e7:	8b 45 08             	mov    0x8(%ebp),%eax
f01103ea:	8b 40 08             	mov    0x8(%eax),%eax
f01103ed:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01103f0:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01103f4:	74 07                	je     f01103fd <show_list_content+0x4b>
f01103f6:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01103f9:	8b 00                	mov    (%eax),%eax
f01103fb:	eb 05                	jmp    f0110402 <show_list_content+0x50>
f01103fd:	b8 00 00 00 00       	mov    $0x0,%eax
f0110402:	8b 55 08             	mov    0x8(%ebp),%edx
f0110405:	89 42 08             	mov    %eax,0x8(%edx)
f0110408:	8b 45 08             	mov    0x8(%ebp),%eax
f011040b:	8b 40 08             	mov    0x8(%eax),%eax
f011040e:	85 c0                	test   %eax,%eax
f0110410:	75 b7                	jne    f01103c9 <show_list_content+0x17>
f0110412:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0110416:	75 b1                	jne    f01103c9 <show_list_content+0x17>
	{
		cprintf("Node data: sva = %x, size = %d\n", node->sva, node->size);
	}
}
f0110418:	90                   	nop
f0110419:	c9                   	leave  
f011041a:	c3                   	ret    

f011041b <TestAutoCompleteCommand>:
int CP(uint32* pd, uint32 va, uint32 ps, uint32 pc);
int CA(uint32 *ptr_dir, uint32 va);
int CPs(uint32 *ptr_dir, uint32 va, uint32 perms, uint32 which);
int CCP(uint32 *ptr_dir, uint32 ptr1, uint32 ptr2, uint32 size, int ref, uint32 dst_perms, uint32 dst_to_chk, uint32 src_perms, uint32 src_to_chk, uint8 chk_type);
int TestAutoCompleteCommand()
{
f011041b:	55                   	push   %ebp
f011041c:	89 e5                	mov    %esp,%ebp
f011041e:	57                   	push   %edi
f011041f:	56                   	push   %esi
f0110420:	53                   	push   %ebx
f0110421:	81 ec ac 01 00 00    	sub    $0x1ac,%esp
	cprintf("Automatic Testing of Autocomplete:\n");
f0110427:	83 ec 0c             	sub    $0xc,%esp
f011042a:	68 fc 7f 13 f0       	push   $0xf0137ffc
f011042f:	e8 f9 07 ff ff       	call   f0100c2d <cprintf>
f0110434:	83 c4 10             	add    $0x10,%esp
	cprintf("\n========================\n");
f0110437:	83 ec 0c             	sub    $0xc,%esp
f011043a:	68 20 80 13 f0       	push   $0xf0138020
f011043f:	e8 e9 07 ff ff       	call   f0100c2d <cprintf>
f0110444:	83 c4 10             	add    $0x10,%esp
	//	cprintf("========================\n");
	//	cprintf("Q2 Test: manually try the test cases in the doc. \n..."
	//			"OR, you can do it automatically by un-commenting the code in this function, it should output the same results in the Examples exist in the MS1 ppt\n");
	//
	//	int retValue = 0;
	int i = 0;
f0110447:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)

	//CASE1:
	//should execute the kernel_info command
	cprintf("==>Testing now AUTOCOMPLETE for: kernel_info\n");
f011044e:	83 ec 0c             	sub    $0xc,%esp
f0110451:	68 3c 80 13 f0       	push   $0xf013803c
f0110456:	e8 d2 07 ff ff       	call   f0100c2d <cprintf>
f011045b:	83 c4 10             	add    $0x10,%esp
	char cr0[100] = "kernel_info";
f011045e:	8d 45 80             	lea    -0x80(%ebp),%eax
f0110461:	bb f6 80 13 f0       	mov    $0xf01380f6,%ebx
f0110466:	ba 03 00 00 00       	mov    $0x3,%edx
f011046b:	89 c7                	mov    %eax,%edi
f011046d:	89 de                	mov    %ebx,%esi
f011046f:	89 d1                	mov    %edx,%ecx
f0110471:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
f0110473:	8d 55 8c             	lea    -0x74(%ebp),%edx
f0110476:	b9 16 00 00 00       	mov    $0x16,%ecx
f011047b:	b8 00 00 00 00       	mov    $0x0,%eax
f0110480:	89 d7                	mov    %edx,%edi
f0110482:	f3 ab                	rep stos %eax,%es:(%edi)
	execute_command(cr0) ;
f0110484:	83 ec 0c             	sub    $0xc,%esp
f0110487:	8d 45 80             	lea    -0x80(%ebp),%eax
f011048a:	50                   	push   %eax
f011048b:	e8 ff 07 ff ff       	call   f0100c8f <execute_command>
f0110490:	83 c4 10             	add    $0x10,%esp
	cprintf("=================\n\n");
f0110493:	83 ec 0c             	sub    $0xc,%esp
f0110496:	68 6a 80 13 f0       	push   $0xf013806a
f011049b:	e8 8d 07 ff ff       	call   f0100c2d <cprintf>
f01104a0:	83 c4 10             	add    $0x10,%esp

	//CASE2: should print the commands that start with he ---> Shall print (help)
	cprintf("==>Testing now AUTOCOMPLETE for: he\n");
f01104a3:	83 ec 0c             	sub    $0xc,%esp
f01104a6:	68 80 80 13 f0       	push   $0xf0138080
f01104ab:	e8 7d 07 ff ff       	call   f0100c2d <cprintf>
f01104b0:	83 c4 10             	add    $0x10,%esp
	char cr2[100] = "he";
f01104b3:	c7 85 1c ff ff ff 68 	movl   $0x6568,-0xe4(%ebp)
f01104ba:	65 00 00 
f01104bd:	8d 95 20 ff ff ff    	lea    -0xe0(%ebp),%edx
f01104c3:	b9 18 00 00 00       	mov    $0x18,%ecx
f01104c8:	b8 00 00 00 00       	mov    $0x0,%eax
f01104cd:	89 d7                	mov    %edx,%edi
f01104cf:	f3 ab                	rep stos %eax,%es:(%edi)
	execute_command(cr2) ;
f01104d1:	83 ec 0c             	sub    $0xc,%esp
f01104d4:	8d 85 1c ff ff ff    	lea    -0xe4(%ebp),%eax
f01104da:	50                   	push   %eax
f01104db:	e8 af 07 ff ff       	call   f0100c8f <execute_command>
f01104e0:	83 c4 10             	add    $0x10,%esp
	cprintf("=================\n\n");
f01104e3:	83 ec 0c             	sub    $0xc,%esp
f01104e6:	68 6a 80 13 f0       	push   $0xf013806a
f01104eb:	e8 3d 07 ff ff       	call   f0100c2d <cprintf>
f01104f0:	83 c4 10             	add    $0x10,%esp


	//CASE3: should print the commands that start with ru ---> Shall print (rum, rub, rut, run, runall) .. Each in a separate line
	cprintf("==>Testing now AUTOCOMPLETE for: ru\n");
f01104f3:	83 ec 0c             	sub    $0xc,%esp
f01104f6:	68 a8 80 13 f0       	push   $0xf01380a8
f01104fb:	e8 2d 07 ff ff       	call   f0100c2d <cprintf>
f0110500:	83 c4 10             	add    $0x10,%esp
	char cr3[100] = "ru";
f0110503:	c7 85 b8 fe ff ff 72 	movl   $0x7572,-0x148(%ebp)
f011050a:	75 00 00 
f011050d:	8d 95 bc fe ff ff    	lea    -0x144(%ebp),%edx
f0110513:	b9 18 00 00 00       	mov    $0x18,%ecx
f0110518:	b8 00 00 00 00       	mov    $0x0,%eax
f011051d:	89 d7                	mov    %edx,%edi
f011051f:	f3 ab                	rep stos %eax,%es:(%edi)
	execute_command(cr3) ;
f0110521:	83 ec 0c             	sub    $0xc,%esp
f0110524:	8d 85 b8 fe ff ff    	lea    -0x148(%ebp),%eax
f011052a:	50                   	push   %eax
f011052b:	e8 5f 07 ff ff       	call   f0100c8f <execute_command>
f0110530:	83 c4 10             	add    $0x10,%esp
	cprintf("=================\n\n");
f0110533:	83 ec 0c             	sub    $0xc,%esp
f0110536:	68 6a 80 13 f0       	push   $0xf013806a
f011053b:	e8 ed 06 ff ff       	call   f0100c2d <cprintf>
f0110540:	83 c4 10             	add    $0x10,%esp

	//CASE4: should print unknown command
	cprintf("==>Testing now AUTOCOMPLETE for: smm\n");
f0110543:	83 ec 0c             	sub    $0xc,%esp
f0110546:	68 d0 80 13 f0       	push   $0xf01380d0
f011054b:	e8 dd 06 ff ff       	call   f0100c2d <cprintf>
f0110550:	83 c4 10             	add    $0x10,%esp
	char cr4[100] = "smm";
f0110553:	c7 85 54 fe ff ff 73 	movl   $0x6d6d73,-0x1ac(%ebp)
f011055a:	6d 6d 00 
f011055d:	8d 95 58 fe ff ff    	lea    -0x1a8(%ebp),%edx
f0110563:	b9 18 00 00 00       	mov    $0x18,%ecx
f0110568:	b8 00 00 00 00       	mov    $0x0,%eax
f011056d:	89 d7                	mov    %edx,%edi
f011056f:	f3 ab                	rep stos %eax,%es:(%edi)
	execute_command(cr4) ;
f0110571:	83 ec 0c             	sub    $0xc,%esp
f0110574:	8d 85 54 fe ff ff    	lea    -0x1ac(%ebp),%eax
f011057a:	50                   	push   %eax
f011057b:	e8 0f 07 ff ff       	call   f0100c8f <execute_command>
f0110580:	83 c4 10             	add    $0x10,%esp
	cprintf("=================\n\n");
f0110583:	83 ec 0c             	sub    $0xc,%esp
f0110586:	68 6a 80 13 f0       	push   $0xf013806a
f011058b:	e8 9d 06 ff ff       	call   f0100c2d <cprintf>
f0110590:	83 c4 10             	add    $0x10,%esp
	return 0;
f0110593:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0110598:	8d 65 f4             	lea    -0xc(%ebp),%esp
f011059b:	5b                   	pop    %ebx
f011059c:	5e                   	pop    %esi
f011059d:	5f                   	pop    %edi
f011059e:	5d                   	pop    %ebp
f011059f:	c3                   	ret    

f01105a0 <test_pt_set_page_permissions>:

//=====================================
// 1) TEST SET/CLEAR PAGE PERMISSIONS:
//=====================================
int test_pt_set_page_permissions()
{
f01105a0:	55                   	push   %ebp
f01105a1:	89 e5                	mov    %esp,%ebp
f01105a3:	83 ec 18             	sub    $0x18,%esp
	//Case 1: Check setting a permission
	uint32 va = 0xEF800000;
f01105a6:	c7 45 f4 00 00 80 ef 	movl   $0xef800000,-0xc(%ebp)
	uint32 permissions_to_set = PERM_PRESENT;
f01105ad:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
	uint32 permissions_to_clear = 0;
f01105b4:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
	pt_set_page_permissions(ptr_page_directory, va, permissions_to_set, permissions_to_clear);
f01105bb:	a1 b8 0e 6c f0       	mov    0xf06c0eb8,%eax
f01105c0:	ff 75 ec             	pushl  -0x14(%ebp)
f01105c3:	ff 75 f0             	pushl  -0x10(%ebp)
f01105c6:	ff 75 f4             	pushl  -0xc(%ebp)
f01105c9:	50                   	push   %eax
f01105ca:	e8 25 71 ff ff       	call   f01076f4 <pt_set_page_permissions>
f01105cf:	83 c4 10             	add    $0x10,%esp
	int ret = CP(ptr_page_directory, va, permissions_to_set, permissions_to_clear);
f01105d2:	a1 b8 0e 6c f0       	mov    0xf06c0eb8,%eax
f01105d7:	ff 75 ec             	pushl  -0x14(%ebp)
f01105da:	ff 75 f0             	pushl  -0x10(%ebp)
f01105dd:	ff 75 f4             	pushl  -0xc(%ebp)
f01105e0:	50                   	push   %eax
f01105e1:	e8 ca 50 00 00       	call   f01156b0 <CP>
f01105e6:	83 c4 10             	add    $0x10,%esp
f01105e9:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if (ret != 1)
f01105ec:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f01105f0:	74 14                	je     f0110606 <test_pt_set_page_permissions+0x66>
	{
		panic("[EVAL] #1 Set Permission Failed.\n");
f01105f2:	83 ec 04             	sub    $0x4,%esp
f01105f5:	68 5c 81 13 f0       	push   $0xf013815c
f01105fa:	6a 5a                	push   $0x5a
f01105fc:	68 7e 81 13 f0       	push   $0xf013817e
f0110601:	e8 a0 fb fe ff       	call   f01001a6 <_panic>
	}

	//Case 2: Check setting MORE THAN ONE permission
	va = 0xEF801000;
f0110606:	c7 45 f4 00 10 80 ef 	movl   $0xef801000,-0xc(%ebp)
	permissions_to_set = PERM_MODIFIED|PERM_USER;
f011060d:	c7 45 f0 44 00 00 00 	movl   $0x44,-0x10(%ebp)
	permissions_to_clear = 0;
f0110614:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
	pt_set_page_permissions(ptr_page_directory, va, permissions_to_set, permissions_to_clear);
f011061b:	a1 b8 0e 6c f0       	mov    0xf06c0eb8,%eax
f0110620:	ff 75 ec             	pushl  -0x14(%ebp)
f0110623:	ff 75 f0             	pushl  -0x10(%ebp)
f0110626:	ff 75 f4             	pushl  -0xc(%ebp)
f0110629:	50                   	push   %eax
f011062a:	e8 c5 70 ff ff       	call   f01076f4 <pt_set_page_permissions>
f011062f:	83 c4 10             	add    $0x10,%esp

	ret = CP(ptr_page_directory, va, permissions_to_set, permissions_to_clear);
f0110632:	a1 b8 0e 6c f0       	mov    0xf06c0eb8,%eax
f0110637:	ff 75 ec             	pushl  -0x14(%ebp)
f011063a:	ff 75 f0             	pushl  -0x10(%ebp)
f011063d:	ff 75 f4             	pushl  -0xc(%ebp)
f0110640:	50                   	push   %eax
f0110641:	e8 6a 50 00 00       	call   f01156b0 <CP>
f0110646:	83 c4 10             	add    $0x10,%esp
f0110649:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if (ret != 1)
f011064c:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f0110650:	74 14                	je     f0110666 <test_pt_set_page_permissions+0xc6>
	{
		panic("[EVAL] #2 Set Permission Failed.\n");
f0110652:	83 ec 04             	sub    $0x4,%esp
f0110655:	68 9c 81 13 f0       	push   $0xf013819c
f011065a:	6a 66                	push   $0x66
f011065c:	68 7e 81 13 f0       	push   $0xf013817e
f0110661:	e8 40 fb fe ff       	call   f01001a6 <_panic>
	}

	va = 0xEF800000;
f0110666:	c7 45 f4 00 00 80 ef 	movl   $0xef800000,-0xc(%ebp)
	permissions_to_set = PERM_MODIFIED|PERM_USER|PERM_USED|PERM_PRESENT;
f011066d:	c7 45 f0 65 00 00 00 	movl   $0x65,-0x10(%ebp)
	permissions_to_clear = 0;
f0110674:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
	pt_set_page_permissions(ptr_page_directory, va, permissions_to_set, permissions_to_clear);
f011067b:	a1 b8 0e 6c f0       	mov    0xf06c0eb8,%eax
f0110680:	ff 75 ec             	pushl  -0x14(%ebp)
f0110683:	ff 75 f0             	pushl  -0x10(%ebp)
f0110686:	ff 75 f4             	pushl  -0xc(%ebp)
f0110689:	50                   	push   %eax
f011068a:	e8 65 70 ff ff       	call   f01076f4 <pt_set_page_permissions>
f011068f:	83 c4 10             	add    $0x10,%esp

	ret = CP(ptr_page_directory, va, permissions_to_set, permissions_to_clear);
f0110692:	a1 b8 0e 6c f0       	mov    0xf06c0eb8,%eax
f0110697:	ff 75 ec             	pushl  -0x14(%ebp)
f011069a:	ff 75 f0             	pushl  -0x10(%ebp)
f011069d:	ff 75 f4             	pushl  -0xc(%ebp)
f01106a0:	50                   	push   %eax
f01106a1:	e8 0a 50 00 00       	call   f01156b0 <CP>
f01106a6:	83 c4 10             	add    $0x10,%esp
f01106a9:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if (ret != 1)
f01106ac:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f01106b0:	74 14                	je     f01106c6 <test_pt_set_page_permissions+0x126>
	{
		panic("[EVAL] #3 Set Permission Failed.\n");
f01106b2:	83 ec 04             	sub    $0x4,%esp
f01106b5:	68 c0 81 13 f0       	push   $0xf01381c0
f01106ba:	6a 71                	push   $0x71
f01106bc:	68 7e 81 13 f0       	push   $0xf013817e
f01106c1:	e8 e0 fa fe ff       	call   f01001a6 <_panic>
	}

	//Case 3: Check clearing a permission
	va = 0xF0000000;
f01106c6:	c7 45 f4 00 00 00 f0 	movl   $0xf0000000,-0xc(%ebp)
	permissions_to_set = 0;
f01106cd:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	permissions_to_clear = PERM_PRESENT;
f01106d4:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
	pt_set_page_permissions(ptr_page_directory, va, permissions_to_set, permissions_to_clear);
f01106db:	a1 b8 0e 6c f0       	mov    0xf06c0eb8,%eax
f01106e0:	ff 75 ec             	pushl  -0x14(%ebp)
f01106e3:	ff 75 f0             	pushl  -0x10(%ebp)
f01106e6:	ff 75 f4             	pushl  -0xc(%ebp)
f01106e9:	50                   	push   %eax
f01106ea:	e8 05 70 ff ff       	call   f01076f4 <pt_set_page_permissions>
f01106ef:	83 c4 10             	add    $0x10,%esp

	ret = CP(ptr_page_directory, va, permissions_to_set, permissions_to_clear);
f01106f2:	a1 b8 0e 6c f0       	mov    0xf06c0eb8,%eax
f01106f7:	ff 75 ec             	pushl  -0x14(%ebp)
f01106fa:	ff 75 f0             	pushl  -0x10(%ebp)
f01106fd:	ff 75 f4             	pushl  -0xc(%ebp)
f0110700:	50                   	push   %eax
f0110701:	e8 aa 4f 00 00       	call   f01156b0 <CP>
f0110706:	83 c4 10             	add    $0x10,%esp
f0110709:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if (ret != 1)
f011070c:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f0110710:	74 14                	je     f0110726 <test_pt_set_page_permissions+0x186>
	{
		panic("[EVAL] #4 Clear Permission Failed.\n");
f0110712:	83 ec 04             	sub    $0x4,%esp
f0110715:	68 e4 81 13 f0       	push   $0xf01381e4
f011071a:	6a 7d                	push   $0x7d
f011071c:	68 7e 81 13 f0       	push   $0xf013817e
f0110721:	e8 80 fa fe ff       	call   f01001a6 <_panic>
	}

	//Case 4: Check clearing MORE THAN ONE permission
	va = 0xEF800000;
f0110726:	c7 45 f4 00 00 80 ef 	movl   $0xef800000,-0xc(%ebp)
	permissions_to_set = 0;
f011072d:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	permissions_to_clear = PERM_MODIFIED|PERM_USER;
f0110734:	c7 45 ec 44 00 00 00 	movl   $0x44,-0x14(%ebp)
	pt_set_page_permissions(ptr_page_directory, va, permissions_to_set, permissions_to_clear);
f011073b:	a1 b8 0e 6c f0       	mov    0xf06c0eb8,%eax
f0110740:	ff 75 ec             	pushl  -0x14(%ebp)
f0110743:	ff 75 f0             	pushl  -0x10(%ebp)
f0110746:	ff 75 f4             	pushl  -0xc(%ebp)
f0110749:	50                   	push   %eax
f011074a:	e8 a5 6f ff ff       	call   f01076f4 <pt_set_page_permissions>
f011074f:	83 c4 10             	add    $0x10,%esp

	ret = CP(ptr_page_directory, va, permissions_to_set, permissions_to_clear);
f0110752:	a1 b8 0e 6c f0       	mov    0xf06c0eb8,%eax
f0110757:	ff 75 ec             	pushl  -0x14(%ebp)
f011075a:	ff 75 f0             	pushl  -0x10(%ebp)
f011075d:	ff 75 f4             	pushl  -0xc(%ebp)
f0110760:	50                   	push   %eax
f0110761:	e8 4a 4f 00 00       	call   f01156b0 <CP>
f0110766:	83 c4 10             	add    $0x10,%esp
f0110769:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if (ret != 1)
f011076c:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f0110770:	74 17                	je     f0110789 <test_pt_set_page_permissions+0x1e9>
	{
		panic("[EVAL] #5 Clear Permission Failed.\n");
f0110772:	83 ec 04             	sub    $0x4,%esp
f0110775:	68 08 82 13 f0       	push   $0xf0138208
f011077a:	68 89 00 00 00       	push   $0x89
f011077f:	68 7e 81 13 f0       	push   $0xf013817e
f0110784:	e8 1d fa fe ff       	call   f01001a6 <_panic>
	}

	//Case 5: Check settiing & clearing MORE THAN ONE permission together
	va = 0xF0001000;
f0110789:	c7 45 f4 00 10 00 f0 	movl   $0xf0001000,-0xc(%ebp)
	permissions_to_set = PERM_USER|PERM_BUFFERED;
f0110790:	c7 45 f0 04 02 00 00 	movl   $0x204,-0x10(%ebp)
	permissions_to_clear = PERM_WRITEABLE|PERM_USED|PERM_MODIFIED;
f0110797:	c7 45 ec 62 00 00 00 	movl   $0x62,-0x14(%ebp)
	pt_set_page_permissions(ptr_page_directory, va, permissions_to_set, permissions_to_clear);
f011079e:	a1 b8 0e 6c f0       	mov    0xf06c0eb8,%eax
f01107a3:	ff 75 ec             	pushl  -0x14(%ebp)
f01107a6:	ff 75 f0             	pushl  -0x10(%ebp)
f01107a9:	ff 75 f4             	pushl  -0xc(%ebp)
f01107ac:	50                   	push   %eax
f01107ad:	e8 42 6f ff ff       	call   f01076f4 <pt_set_page_permissions>
f01107b2:	83 c4 10             	add    $0x10,%esp

	ret = CP(ptr_page_directory, va, permissions_to_set, permissions_to_clear);
f01107b5:	a1 b8 0e 6c f0       	mov    0xf06c0eb8,%eax
f01107ba:	ff 75 ec             	pushl  -0x14(%ebp)
f01107bd:	ff 75 f0             	pushl  -0x10(%ebp)
f01107c0:	ff 75 f4             	pushl  -0xc(%ebp)
f01107c3:	50                   	push   %eax
f01107c4:	e8 e7 4e 00 00       	call   f01156b0 <CP>
f01107c9:	83 c4 10             	add    $0x10,%esp
f01107cc:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if (ret != 1)
f01107cf:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f01107d3:	74 17                	je     f01107ec <test_pt_set_page_permissions+0x24c>
	{
		panic("[EVAL] #6 Set & Clear Permission Failed.\n");
f01107d5:	83 ec 04             	sub    $0x4,%esp
f01107d8:	68 2c 82 13 f0       	push   $0xf013822c
f01107dd:	68 95 00 00 00       	push   $0x95
f01107e2:	68 7e 81 13 f0       	push   $0xf013817e
f01107e7:	e8 ba f9 fe ff       	call   f01001a6 <_panic>
	}

	cprintf("Congratulations!! test pt_set&clear_page_permissions completed successfully.\n");
f01107ec:	83 ec 0c             	sub    $0xc,%esp
f01107ef:	68 58 82 13 f0       	push   $0xf0138258
f01107f4:	e8 34 04 ff ff       	call   f0100c2d <cprintf>
f01107f9:	83 c4 10             	add    $0x10,%esp
	return 0;
f01107fc:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0110801:	c9                   	leave  
f0110802:	c3                   	ret    

f0110803 <test_pt_set_page_permissions_invalid_va>:

int test_pt_set_page_permissions_invalid_va()
{
f0110803:	55                   	push   %ebp
f0110804:	89 e5                	mov    %esp,%ebp
f0110806:	83 ec 18             	sub    $0x18,%esp
	uint32 va = 0x0;
f0110809:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	uint32 permissions_to_set = PERM_PRESENT;
f0110810:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
	uint32 permissions_to_clear = 0;
f0110817:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
	pt_set_page_permissions(ptr_page_directory, va, permissions_to_set, permissions_to_clear);
f011081e:	a1 b8 0e 6c f0       	mov    0xf06c0eb8,%eax
f0110823:	ff 75 ec             	pushl  -0x14(%ebp)
f0110826:	ff 75 f0             	pushl  -0x10(%ebp)
f0110829:	ff 75 f4             	pushl  -0xc(%ebp)
f011082c:	50                   	push   %eax
f011082d:	e8 c2 6e ff ff       	call   f01076f4 <pt_set_page_permissions>
f0110832:	83 c4 10             	add    $0x10,%esp
	panic("WRONG PANIC - This test shall panic with your error message. Check handling setting permissions of an invalid virtual address with non existing page table.");
f0110835:	83 ec 04             	sub    $0x4,%esp
f0110838:	68 a8 82 13 f0       	push   $0xf01382a8
f011083d:	68 a2 00 00 00       	push   $0xa2
f0110842:	68 7e 81 13 f0       	push   $0xf013817e
f0110847:	e8 5a f9 fe ff       	call   f01001a6 <_panic>

f011084c <test_pt_get_page_permissions>:

//=====================================
// 2) TEST GET PAGE PERMISSIONS:
//=====================================
int test_pt_get_page_permissions()
{
f011084c:	55                   	push   %ebp
f011084d:	89 e5                	mov    %esp,%ebp
f011084f:	83 ec 18             	sub    $0x18,%esp
	//Case 1: Check getting a permission of a non existing VA with NO table
	uint32 va = 0xeebfe000;
f0110852:	c7 45 f4 00 e0 bf ee 	movl   $0xeebfe000,-0xc(%ebp)
	int ret = pt_get_page_permissions(ptr_page_directory, va);
f0110859:	a1 b8 0e 6c f0       	mov    0xf06c0eb8,%eax
f011085e:	83 ec 08             	sub    $0x8,%esp
f0110861:	ff 75 f4             	pushl  -0xc(%ebp)
f0110864:	50                   	push   %eax
f0110865:	e8 3e 6f ff ff       	call   f01077a8 <pt_get_page_permissions>
f011086a:	83 c4 10             	add    $0x10,%esp
f011086d:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (ret != -1)
f0110870:	83 7d f0 ff          	cmpl   $0xffffffff,-0x10(%ebp)
f0110874:	74 17                	je     f011088d <test_pt_get_page_permissions+0x41>
	{
		panic("[EVAL] #1 Get Permission Failed.\n");
f0110876:	83 ec 04             	sub    $0x4,%esp
f0110879:	68 44 83 13 f0       	push   $0xf0138344
f011087e:	68 b0 00 00 00       	push   $0xb0
f0110883:	68 7e 81 13 f0       	push   $0xf013817e
f0110888:	e8 19 f9 fe ff       	call   f01001a6 <_panic>
	}

	//Case 2: Check getting a permission of a non existing VA with an existing table
	va = 0xEF800000;
f011088d:	c7 45 f4 00 00 80 ef 	movl   $0xef800000,-0xc(%ebp)
	ret = pt_get_page_permissions(ptr_page_directory, va);
f0110894:	a1 b8 0e 6c f0       	mov    0xf06c0eb8,%eax
f0110899:	83 ec 08             	sub    $0x8,%esp
f011089c:	ff 75 f4             	pushl  -0xc(%ebp)
f011089f:	50                   	push   %eax
f01108a0:	e8 03 6f ff ff       	call   f01077a8 <pt_get_page_permissions>
f01108a5:	83 c4 10             	add    $0x10,%esp
f01108a8:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (ret != 0)
f01108ab:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f01108af:	74 17                	je     f01108c8 <test_pt_get_page_permissions+0x7c>
	{
		panic("[EVAL] #2 Get Permission Failed.\n");
f01108b1:	83 ec 04             	sub    $0x4,%esp
f01108b4:	68 68 83 13 f0       	push   $0xf0138368
f01108b9:	68 b8 00 00 00       	push   $0xb8
f01108be:	68 7e 81 13 f0       	push   $0xf013817e
f01108c3:	e8 de f8 fe ff       	call   f01001a6 <_panic>
	}

	//Case 3: Check getting a permission of an existing VA with an existing table
	va = 0xf0000000;
f01108c8:	c7 45 f4 00 00 00 f0 	movl   $0xf0000000,-0xc(%ebp)
	ret = pt_get_page_permissions(ptr_page_directory, va);
f01108cf:	a1 b8 0e 6c f0       	mov    0xf06c0eb8,%eax
f01108d4:	83 ec 08             	sub    $0x8,%esp
f01108d7:	ff 75 f4             	pushl  -0xc(%ebp)
f01108da:	50                   	push   %eax
f01108db:	e8 c8 6e ff ff       	call   f01077a8 <pt_get_page_permissions>
f01108e0:	83 c4 10             	add    $0x10,%esp
f01108e3:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (ret != 3)
f01108e6:	83 7d f0 03          	cmpl   $0x3,-0x10(%ebp)
f01108ea:	74 17                	je     f0110903 <test_pt_get_page_permissions+0xb7>
	{
		panic("[EVAL] #3 Get Permission Failed.\n");
f01108ec:	83 ec 04             	sub    $0x4,%esp
f01108ef:	68 8c 83 13 f0       	push   $0xf013838c
f01108f4:	68 c0 00 00 00       	push   $0xc0
f01108f9:	68 7e 81 13 f0       	push   $0xf013817e
f01108fe:	e8 a3 f8 fe ff       	call   f01001a6 <_panic>
	}

	va = 0xF1000000;
f0110903:	c7 45 f4 00 00 00 f1 	movl   $0xf1000000,-0xc(%ebp)
	ret = pt_get_page_permissions(ptr_page_directory, va);
f011090a:	a1 b8 0e 6c f0       	mov    0xf06c0eb8,%eax
f011090f:	83 ec 08             	sub    $0x8,%esp
f0110912:	ff 75 f4             	pushl  -0xc(%ebp)
f0110915:	50                   	push   %eax
f0110916:	e8 8d 6e ff ff       	call   f01077a8 <pt_get_page_permissions>
f011091b:	83 c4 10             	add    $0x10,%esp
f011091e:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (ret != 3)
f0110921:	83 7d f0 03          	cmpl   $0x3,-0x10(%ebp)
f0110925:	74 17                	je     f011093e <test_pt_get_page_permissions+0xf2>
	{
		panic("[EVAL] #4 Get Permission Failed.\n");
f0110927:	83 ec 04             	sub    $0x4,%esp
f011092a:	68 b0 83 13 f0       	push   $0xf01383b0
f011092f:	68 c7 00 00 00       	push   $0xc7
f0110934:	68 7e 81 13 f0       	push   $0xf013817e
f0110939:	e8 68 f8 fe ff       	call   f01001a6 <_panic>
	}

	va = 0xF0001000;
f011093e:	c7 45 f4 00 10 00 f0 	movl   $0xf0001000,-0xc(%ebp)
	ret = pt_get_page_permissions(ptr_page_directory, va);
f0110945:	a1 b8 0e 6c f0       	mov    0xf06c0eb8,%eax
f011094a:	83 ec 08             	sub    $0x8,%esp
f011094d:	ff 75 f4             	pushl  -0xc(%ebp)
f0110950:	50                   	push   %eax
f0110951:	e8 52 6e ff ff       	call   f01077a8 <pt_get_page_permissions>
f0110956:	83 c4 10             	add    $0x10,%esp
f0110959:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (ret != 99)
f011095c:	83 7d f0 63          	cmpl   $0x63,-0x10(%ebp)
f0110960:	74 17                	je     f0110979 <test_pt_get_page_permissions+0x12d>
	{
		panic("[EVAL] #5 Get Permission Failed.\n");
f0110962:	83 ec 04             	sub    $0x4,%esp
f0110965:	68 d4 83 13 f0       	push   $0xf01383d4
f011096a:	68 ce 00 00 00       	push   $0xce
f011096f:	68 7e 81 13 f0       	push   $0xf013817e
f0110974:	e8 2d f8 fe ff       	call   f01001a6 <_panic>
	}
	cprintf("Congratulations!! test pt_get_page_permissions completed successfully.\n");
f0110979:	83 ec 0c             	sub    $0xc,%esp
f011097c:	68 f8 83 13 f0       	push   $0xf01383f8
f0110981:	e8 a7 02 ff ff       	call   f0100c2d <cprintf>
f0110986:	83 c4 10             	add    $0x10,%esp
	return 0;
f0110989:	b8 00 00 00 00       	mov    $0x0,%eax
}
f011098e:	c9                   	leave  
f011098f:	c3                   	ret    

f0110990 <test_pt_clear_page_table_entry>:

//=====================================
// 3) TEST CLEAR PAGE TABLE ENTRY:
//=====================================
int test_pt_clear_page_table_entry()
{
f0110990:	55                   	push   %ebp
f0110991:	89 e5                	mov    %esp,%ebp
f0110993:	83 ec 18             	sub    $0x18,%esp
	uint32 va = 0xF1000000;
f0110996:	c7 45 f4 00 00 00 f1 	movl   $0xf1000000,-0xc(%ebp)
	pt_clear_page_table_entry(ptr_page_directory, va);
f011099d:	a1 b8 0e 6c f0       	mov    0xf06c0eb8,%eax
f01109a2:	83 ec 08             	sub    $0x8,%esp
f01109a5:	ff 75 f4             	pushl  -0xc(%ebp)
f01109a8:	50                   	push   %eax
f01109a9:	e8 55 6e ff ff       	call   f0107803 <pt_clear_page_table_entry>
f01109ae:	83 c4 10             	add    $0x10,%esp
	int ret = CE(ptr_page_directory, va);
f01109b1:	a1 b8 0e 6c f0       	mov    0xf06c0eb8,%eax
f01109b6:	83 ec 08             	sub    $0x8,%esp
f01109b9:	ff 75 f4             	pushl  -0xc(%ebp)
f01109bc:	50                   	push   %eax
f01109bd:	e8 4a 4c 00 00       	call   f011560c <CE>
f01109c2:	83 c4 10             	add    $0x10,%esp
f01109c5:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (ret != 1)
f01109c8:	83 7d f0 01          	cmpl   $0x1,-0x10(%ebp)
f01109cc:	74 17                	je     f01109e5 <test_pt_clear_page_table_entry+0x55>
	{
		panic("[EVAL] #1 Clear Page Table Entry Failed.\n");
f01109ce:	83 ec 04             	sub    $0x4,%esp
f01109d1:	68 40 84 13 f0       	push   $0xf0138440
f01109d6:	68 de 00 00 00       	push   $0xde
f01109db:	68 7e 81 13 f0       	push   $0xf013817e
f01109e0:	e8 c1 f7 fe ff       	call   f01001a6 <_panic>
	}

	va = 0xF0001000;
f01109e5:	c7 45 f4 00 10 00 f0 	movl   $0xf0001000,-0xc(%ebp)
	pt_clear_page_table_entry(ptr_page_directory, va);
f01109ec:	a1 b8 0e 6c f0       	mov    0xf06c0eb8,%eax
f01109f1:	83 ec 08             	sub    $0x8,%esp
f01109f4:	ff 75 f4             	pushl  -0xc(%ebp)
f01109f7:	50                   	push   %eax
f01109f8:	e8 06 6e ff ff       	call   f0107803 <pt_clear_page_table_entry>
f01109fd:	83 c4 10             	add    $0x10,%esp
	ret = CE(ptr_page_directory, va);
f0110a00:	a1 b8 0e 6c f0       	mov    0xf06c0eb8,%eax
f0110a05:	83 ec 08             	sub    $0x8,%esp
f0110a08:	ff 75 f4             	pushl  -0xc(%ebp)
f0110a0b:	50                   	push   %eax
f0110a0c:	e8 fb 4b 00 00       	call   f011560c <CE>
f0110a11:	83 c4 10             	add    $0x10,%esp
f0110a14:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (ret != 1)
f0110a17:	83 7d f0 01          	cmpl   $0x1,-0x10(%ebp)
f0110a1b:	74 17                	je     f0110a34 <test_pt_clear_page_table_entry+0xa4>
	{
		panic("[EVAL] #2 Clear Page Table Entry Failed.\n");
f0110a1d:	83 ec 04             	sub    $0x4,%esp
f0110a20:	68 6c 84 13 f0       	push   $0xf013846c
f0110a25:	68 e6 00 00 00       	push   $0xe6
f0110a2a:	68 7e 81 13 f0       	push   $0xf013817e
f0110a2f:	e8 72 f7 fe ff       	call   f01001a6 <_panic>
	}

	va = 0xEF800000;
f0110a34:	c7 45 f4 00 00 80 ef 	movl   $0xef800000,-0xc(%ebp)
	pt_clear_page_table_entry(ptr_page_directory, va);
f0110a3b:	a1 b8 0e 6c f0       	mov    0xf06c0eb8,%eax
f0110a40:	83 ec 08             	sub    $0x8,%esp
f0110a43:	ff 75 f4             	pushl  -0xc(%ebp)
f0110a46:	50                   	push   %eax
f0110a47:	e8 b7 6d ff ff       	call   f0107803 <pt_clear_page_table_entry>
f0110a4c:	83 c4 10             	add    $0x10,%esp
	ret = CE(ptr_page_directory, va);
f0110a4f:	a1 b8 0e 6c f0       	mov    0xf06c0eb8,%eax
f0110a54:	83 ec 08             	sub    $0x8,%esp
f0110a57:	ff 75 f4             	pushl  -0xc(%ebp)
f0110a5a:	50                   	push   %eax
f0110a5b:	e8 ac 4b 00 00       	call   f011560c <CE>
f0110a60:	83 c4 10             	add    $0x10,%esp
f0110a63:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (ret != 1)
f0110a66:	83 7d f0 01          	cmpl   $0x1,-0x10(%ebp)
f0110a6a:	74 17                	je     f0110a83 <test_pt_clear_page_table_entry+0xf3>
	{
		panic("[EVAL] #3 Clear Page Table Entry Failed.\n");
f0110a6c:	83 ec 04             	sub    $0x4,%esp
f0110a6f:	68 98 84 13 f0       	push   $0xf0138498
f0110a74:	68 ee 00 00 00       	push   $0xee
f0110a79:	68 7e 81 13 f0       	push   $0xf013817e
f0110a7e:	e8 23 f7 fe ff       	call   f01001a6 <_panic>
	}

	va = 0xF0000000;
f0110a83:	c7 45 f4 00 00 00 f0 	movl   $0xf0000000,-0xc(%ebp)
	pt_clear_page_table_entry(ptr_page_directory, va);
f0110a8a:	a1 b8 0e 6c f0       	mov    0xf06c0eb8,%eax
f0110a8f:	83 ec 08             	sub    $0x8,%esp
f0110a92:	ff 75 f4             	pushl  -0xc(%ebp)
f0110a95:	50                   	push   %eax
f0110a96:	e8 68 6d ff ff       	call   f0107803 <pt_clear_page_table_entry>
f0110a9b:	83 c4 10             	add    $0x10,%esp
	ret = CE(ptr_page_directory, va);
f0110a9e:	a1 b8 0e 6c f0       	mov    0xf06c0eb8,%eax
f0110aa3:	83 ec 08             	sub    $0x8,%esp
f0110aa6:	ff 75 f4             	pushl  -0xc(%ebp)
f0110aa9:	50                   	push   %eax
f0110aaa:	e8 5d 4b 00 00       	call   f011560c <CE>
f0110aaf:	83 c4 10             	add    $0x10,%esp
f0110ab2:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (ret != 1)
f0110ab5:	83 7d f0 01          	cmpl   $0x1,-0x10(%ebp)
f0110ab9:	74 17                	je     f0110ad2 <test_pt_clear_page_table_entry+0x142>
	{
		panic("[EVAL] #4 Clear Page Table Entry Failed.\n");
f0110abb:	83 ec 04             	sub    $0x4,%esp
f0110abe:	68 c4 84 13 f0       	push   $0xf01384c4
f0110ac3:	68 f6 00 00 00       	push   $0xf6
f0110ac8:	68 7e 81 13 f0       	push   $0xf013817e
f0110acd:	e8 d4 f6 fe ff       	call   f01001a6 <_panic>
	}

	cprintf("Congratulations!! test pt_clear_page_table_entry completed successfully.\n");
f0110ad2:	83 ec 0c             	sub    $0xc,%esp
f0110ad5:	68 f0 84 13 f0       	push   $0xf01384f0
f0110ada:	e8 4e 01 ff ff       	call   f0100c2d <cprintf>
f0110adf:	83 c4 10             	add    $0x10,%esp
	return 0;
f0110ae2:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0110ae7:	c9                   	leave  
f0110ae8:	c3                   	ret    

f0110ae9 <test_pt_clear_page_table_entry_invalid_va>:

int test_pt_clear_page_table_entry_invalid_va()
{
f0110ae9:	55                   	push   %ebp
f0110aea:	89 e5                	mov    %esp,%ebp
f0110aec:	83 ec 18             	sub    $0x18,%esp
	uint32 va = 0x1000;
f0110aef:	c7 45 f4 00 10 00 00 	movl   $0x1000,-0xc(%ebp)
	pt_clear_page_table_entry(ptr_page_directory, va);
f0110af6:	a1 b8 0e 6c f0       	mov    0xf06c0eb8,%eax
f0110afb:	83 ec 08             	sub    $0x8,%esp
f0110afe:	ff 75 f4             	pushl  -0xc(%ebp)
f0110b01:	50                   	push   %eax
f0110b02:	e8 fc 6c ff ff       	call   f0107803 <pt_clear_page_table_entry>
f0110b07:	83 c4 10             	add    $0x10,%esp
	panic("WRONG PANIC - This test shall panic with your error message. Check handling clearing the entry of an invalid virtual address non existing page table.");
f0110b0a:	83 ec 04             	sub    $0x4,%esp
f0110b0d:	68 3c 85 13 f0       	push   $0xf013853c
f0110b12:	68 01 01 00 00       	push   $0x101
f0110b17:	68 7e 81 13 f0       	push   $0xf013817e
f0110b1c:	e8 85 f6 fe ff       	call   f01001a6 <_panic>

f0110b21 <test_virtual_to_physical>:

//=====================================
// 4) TEST CONVERTING VA 2 PA:
//=====================================
int test_virtual_to_physical()
{
f0110b21:	55                   	push   %ebp
f0110b22:	89 e5                	mov    %esp,%ebp
f0110b24:	57                   	push   %edi
f0110b25:	56                   	push   %esi
f0110b26:	53                   	push   %ebx
f0110b27:	81 ec ac 01 00 00    	sub    $0x1ac,%esp
	int kilo = 1024 ;
f0110b2d:	c7 45 e4 00 04 00 00 	movl   $0x400,-0x1c(%ebp)
	int mega = 1024*1024 ;
f0110b34:	c7 45 e0 00 00 10 00 	movl   $0x100000,-0x20(%ebp)
	uint32 va;
	ClearUserSpace(ptr_page_directory);
f0110b3b:	a1 b8 0e 6c f0       	mov    0xf06c0eb8,%eax
f0110b40:	83 ec 0c             	sub    $0xc,%esp
f0110b43:	50                   	push   %eax
f0110b44:	e8 c4 4c 00 00       	call   f011580d <ClearUserSpace>
f0110b49:	83 c4 10             	add    $0x10,%esp

	//============================
	//Case 1: Check getting pa of a va with NO table
	va = 0xeebfe000;
f0110b4c:	c7 45 dc 00 e0 bf ee 	movl   $0xeebfe000,-0x24(%ebp)
	int pa = virtual_to_physical(ptr_page_directory, va);
f0110b53:	a1 b8 0e 6c f0       	mov    0xf06c0eb8,%eax
f0110b58:	83 ec 08             	sub    $0x8,%esp
f0110b5b:	ff 75 dc             	pushl  -0x24(%ebp)
f0110b5e:	50                   	push   %eax
f0110b5f:	e8 0b 6d ff ff       	call   f010786f <virtual_to_physical>
f0110b64:	83 c4 10             	add    $0x10,%esp
f0110b67:	89 45 d8             	mov    %eax,-0x28(%ebp)

	//cprintf("va = %x, pa = %x, ret pa = %d\n", va, CA(ptr_page_directory, va), pa);
	if(pa != -1)
f0110b6a:	83 7d d8 ff          	cmpl   $0xffffffff,-0x28(%ebp)
f0110b6e:	74 17                	je     f0110b87 <test_virtual_to_physical+0x66>
		panic("[EVAL] #1 Test of virtual_to_physical Entry Failed.\n");
f0110b70:	83 ec 04             	sub    $0x4,%esp
f0110b73:	68 d4 85 13 f0       	push   $0xf01385d4
f0110b78:	68 16 01 00 00       	push   $0x116
f0110b7d:	68 7e 81 13 f0       	push   $0xf013817e
f0110b82:	e8 1f f6 fe ff       	call   f01001a6 <_panic>

	//============================
	//Case 2: Check getting pa of a va with a table
	va = 0xf0000000;
f0110b87:	c7 45 dc 00 00 00 f0 	movl   $0xf0000000,-0x24(%ebp)
	pa = virtual_to_physical(ptr_page_directory, va);
f0110b8e:	a1 b8 0e 6c f0       	mov    0xf06c0eb8,%eax
f0110b93:	83 ec 08             	sub    $0x8,%esp
f0110b96:	ff 75 dc             	pushl  -0x24(%ebp)
f0110b99:	50                   	push   %eax
f0110b9a:	e8 d0 6c ff ff       	call   f010786f <virtual_to_physical>
f0110b9f:	83 c4 10             	add    $0x10,%esp
f0110ba2:	89 45 d8             	mov    %eax,-0x28(%ebp)

	//cprintf("va = %x, pa = %x, ret pa = %x\n", va, CA(ptr_page_directory, va), pa);
	if(pa != CA(ptr_page_directory, va))
f0110ba5:	a1 b8 0e 6c f0       	mov    0xf06c0eb8,%eax
f0110baa:	83 ec 08             	sub    $0x8,%esp
f0110bad:	ff 75 dc             	pushl  -0x24(%ebp)
f0110bb0:	50                   	push   %eax
f0110bb1:	e8 bd 49 00 00       	call   f0115573 <CA>
f0110bb6:	83 c4 10             	add    $0x10,%esp
f0110bb9:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0110bbc:	74 17                	je     f0110bd5 <test_virtual_to_physical+0xb4>
		panic("[EVAL] #2 Test of virtual_to_physical Entry Failed.\n");
f0110bbe:	83 ec 04             	sub    $0x4,%esp
f0110bc1:	68 0c 86 13 f0       	push   $0xf013860c
f0110bc6:	68 1f 01 00 00       	push   $0x11f
f0110bcb:	68 7e 81 13 f0       	push   $0xf013817e
f0110bd0:	e8 d1 f5 fe ff       	call   f01001a6 <_panic>

	//============================
	char ap1[100] = "ap 0x2800000";execute_command(ap1);
f0110bd5:	8d 85 74 ff ff ff    	lea    -0x8c(%ebp),%eax
f0110bdb:	bb d8 87 13 f0       	mov    $0xf01387d8,%ebx
f0110be0:	ba 0d 00 00 00       	mov    $0xd,%edx
f0110be5:	89 c7                	mov    %eax,%edi
f0110be7:	89 de                	mov    %ebx,%esi
f0110be9:	89 d1                	mov    %edx,%ecx
f0110beb:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0110bed:	8d 55 81             	lea    -0x7f(%ebp),%edx
f0110bf0:	b9 57 00 00 00       	mov    $0x57,%ecx
f0110bf5:	b0 00                	mov    $0x0,%al
f0110bf7:	89 d7                	mov    %edx,%edi
f0110bf9:	f3 aa                	rep stos %al,%es:(%edi)
f0110bfb:	83 ec 0c             	sub    $0xc,%esp
f0110bfe:	8d 85 74 ff ff ff    	lea    -0x8c(%ebp),%eax
f0110c04:	50                   	push   %eax
f0110c05:	e8 85 00 ff ff       	call   f0100c8f <execute_command>
f0110c0a:	83 c4 10             	add    $0x10,%esp
	va = 0x2800000;
f0110c0d:	c7 45 dc 00 00 80 02 	movl   $0x2800000,-0x24(%ebp)
	pa = virtual_to_physical(ptr_page_directory, va);
f0110c14:	a1 b8 0e 6c f0       	mov    0xf06c0eb8,%eax
f0110c19:	83 ec 08             	sub    $0x8,%esp
f0110c1c:	ff 75 dc             	pushl  -0x24(%ebp)
f0110c1f:	50                   	push   %eax
f0110c20:	e8 4a 6c ff ff       	call   f010786f <virtual_to_physical>
f0110c25:	83 c4 10             	add    $0x10,%esp
f0110c28:	89 45 d8             	mov    %eax,-0x28(%ebp)

	//cprintf("va = %x, pa = %x, ret pa = %x\n", va, CA(ptr_page_directory, va), pa);
	if(pa != CA(ptr_page_directory, va))
f0110c2b:	a1 b8 0e 6c f0       	mov    0xf06c0eb8,%eax
f0110c30:	83 ec 08             	sub    $0x8,%esp
f0110c33:	ff 75 dc             	pushl  -0x24(%ebp)
f0110c36:	50                   	push   %eax
f0110c37:	e8 37 49 00 00       	call   f0115573 <CA>
f0110c3c:	83 c4 10             	add    $0x10,%esp
f0110c3f:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0110c42:	74 17                	je     f0110c5b <test_virtual_to_physical+0x13a>
		panic("[EVAL] #3 Test of virtual_to_physical Entry Failed.\n");
f0110c44:	83 ec 04             	sub    $0x4,%esp
f0110c47:	68 44 86 13 f0       	push   $0xf0138644
f0110c4c:	68 28 01 00 00       	push   $0x128
f0110c51:	68 7e 81 13 f0       	push   $0xf013817e
f0110c56:	e8 4b f5 fe ff       	call   f01001a6 <_panic>

	//============================
	char ap2[100] = "ap 0x2801000";execute_command(ap2);
f0110c5b:	8d 85 10 ff ff ff    	lea    -0xf0(%ebp),%eax
f0110c61:	bb 3c 88 13 f0       	mov    $0xf013883c,%ebx
f0110c66:	ba 0d 00 00 00       	mov    $0xd,%edx
f0110c6b:	89 c7                	mov    %eax,%edi
f0110c6d:	89 de                	mov    %ebx,%esi
f0110c6f:	89 d1                	mov    %edx,%ecx
f0110c71:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0110c73:	8d 95 1d ff ff ff    	lea    -0xe3(%ebp),%edx
f0110c79:	b9 57 00 00 00       	mov    $0x57,%ecx
f0110c7e:	b0 00                	mov    $0x0,%al
f0110c80:	89 d7                	mov    %edx,%edi
f0110c82:	f3 aa                	rep stos %al,%es:(%edi)
f0110c84:	83 ec 0c             	sub    $0xc,%esp
f0110c87:	8d 85 10 ff ff ff    	lea    -0xf0(%ebp),%eax
f0110c8d:	50                   	push   %eax
f0110c8e:	e8 fc ff fe ff       	call   f0100c8f <execute_command>
f0110c93:	83 c4 10             	add    $0x10,%esp
	va = 0x2801000;
f0110c96:	c7 45 dc 00 10 80 02 	movl   $0x2801000,-0x24(%ebp)
	pa = virtual_to_physical(ptr_page_directory, va);
f0110c9d:	a1 b8 0e 6c f0       	mov    0xf06c0eb8,%eax
f0110ca2:	83 ec 08             	sub    $0x8,%esp
f0110ca5:	ff 75 dc             	pushl  -0x24(%ebp)
f0110ca8:	50                   	push   %eax
f0110ca9:	e8 c1 6b ff ff       	call   f010786f <virtual_to_physical>
f0110cae:	83 c4 10             	add    $0x10,%esp
f0110cb1:	89 45 d8             	mov    %eax,-0x28(%ebp)

	//cprintf("va = %x, pa = %x, ret pa = %x\n", va, CA(ptr_page_directory, va), pa);
	if(pa != CA(ptr_page_directory, va))
f0110cb4:	a1 b8 0e 6c f0       	mov    0xf06c0eb8,%eax
f0110cb9:	83 ec 08             	sub    $0x8,%esp
f0110cbc:	ff 75 dc             	pushl  -0x24(%ebp)
f0110cbf:	50                   	push   %eax
f0110cc0:	e8 ae 48 00 00       	call   f0115573 <CA>
f0110cc5:	83 c4 10             	add    $0x10,%esp
f0110cc8:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0110ccb:	74 17                	je     f0110ce4 <test_virtual_to_physical+0x1c3>
		panic("[EVAL] #4 Test of virtual_to_physical Entry Failed.\n");
f0110ccd:	83 ec 04             	sub    $0x4,%esp
f0110cd0:	68 7c 86 13 f0       	push   $0xf013867c
f0110cd5:	68 31 01 00 00       	push   $0x131
f0110cda:	68 7e 81 13 f0       	push   $0xf013817e
f0110cdf:	e8 c2 f4 fe ff       	call   f01001a6 <_panic>

	//============================
	char ap3[100] = "ap 0x2802000";execute_command(ap3);
f0110ce4:	8d 85 ac fe ff ff    	lea    -0x154(%ebp),%eax
f0110cea:	bb a0 88 13 f0       	mov    $0xf01388a0,%ebx
f0110cef:	ba 0d 00 00 00       	mov    $0xd,%edx
f0110cf4:	89 c7                	mov    %eax,%edi
f0110cf6:	89 de                	mov    %ebx,%esi
f0110cf8:	89 d1                	mov    %edx,%ecx
f0110cfa:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0110cfc:	8d 95 b9 fe ff ff    	lea    -0x147(%ebp),%edx
f0110d02:	b9 57 00 00 00       	mov    $0x57,%ecx
f0110d07:	b0 00                	mov    $0x0,%al
f0110d09:	89 d7                	mov    %edx,%edi
f0110d0b:	f3 aa                	rep stos %al,%es:(%edi)
f0110d0d:	83 ec 0c             	sub    $0xc,%esp
f0110d10:	8d 85 ac fe ff ff    	lea    -0x154(%ebp),%eax
f0110d16:	50                   	push   %eax
f0110d17:	e8 73 ff fe ff       	call   f0100c8f <execute_command>
f0110d1c:	83 c4 10             	add    $0x10,%esp
	va = 0x2802000;
f0110d1f:	c7 45 dc 00 20 80 02 	movl   $0x2802000,-0x24(%ebp)
	pa = virtual_to_physical(ptr_page_directory, va);
f0110d26:	a1 b8 0e 6c f0       	mov    0xf06c0eb8,%eax
f0110d2b:	83 ec 08             	sub    $0x8,%esp
f0110d2e:	ff 75 dc             	pushl  -0x24(%ebp)
f0110d31:	50                   	push   %eax
f0110d32:	e8 38 6b ff ff       	call   f010786f <virtual_to_physical>
f0110d37:	83 c4 10             	add    $0x10,%esp
f0110d3a:	89 45 d8             	mov    %eax,-0x28(%ebp)

	//cprintf("va = %x, pa = %x, ret pa = %x\n", va, CA(ptr_page_directory, va), pa);
	if(pa != CA(ptr_page_directory, va))
f0110d3d:	a1 b8 0e 6c f0       	mov    0xf06c0eb8,%eax
f0110d42:	83 ec 08             	sub    $0x8,%esp
f0110d45:	ff 75 dc             	pushl  -0x24(%ebp)
f0110d48:	50                   	push   %eax
f0110d49:	e8 25 48 00 00       	call   f0115573 <CA>
f0110d4e:	83 c4 10             	add    $0x10,%esp
f0110d51:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0110d54:	74 17                	je     f0110d6d <test_virtual_to_physical+0x24c>
		panic("[EVAL] #5 Test of virtual_to_physical Entry Failed.\n");
f0110d56:	83 ec 04             	sub    $0x4,%esp
f0110d59:	68 b4 86 13 f0       	push   $0xf01386b4
f0110d5e:	68 3a 01 00 00       	push   $0x13a
f0110d63:	68 7e 81 13 f0       	push   $0xf013817e
f0110d68:	e8 39 f4 fe ff       	call   f01001a6 <_panic>

	//============================
	va = 0xF0001000;
f0110d6d:	c7 45 dc 00 10 00 f0 	movl   $0xf0001000,-0x24(%ebp)
	pa = virtual_to_physical(ptr_page_directory, va);
f0110d74:	a1 b8 0e 6c f0       	mov    0xf06c0eb8,%eax
f0110d79:	83 ec 08             	sub    $0x8,%esp
f0110d7c:	ff 75 dc             	pushl  -0x24(%ebp)
f0110d7f:	50                   	push   %eax
f0110d80:	e8 ea 6a ff ff       	call   f010786f <virtual_to_physical>
f0110d85:	83 c4 10             	add    $0x10,%esp
f0110d88:	89 45 d8             	mov    %eax,-0x28(%ebp)

	//cprintf("va = %x, pa = %x, ret pa = %x\n", va, CA(ptr_page_directory, va), pa);
	if(pa != CA(ptr_page_directory, va))
f0110d8b:	a1 b8 0e 6c f0       	mov    0xf06c0eb8,%eax
f0110d90:	83 ec 08             	sub    $0x8,%esp
f0110d93:	ff 75 dc             	pushl  -0x24(%ebp)
f0110d96:	50                   	push   %eax
f0110d97:	e8 d7 47 00 00       	call   f0115573 <CA>
f0110d9c:	83 c4 10             	add    $0x10,%esp
f0110d9f:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0110da2:	74 17                	je     f0110dbb <test_virtual_to_physical+0x29a>
		panic("[EVAL] #6 Test of virtual_to_physical Entry Failed.\n");
f0110da4:	83 ec 04             	sub    $0x4,%esp
f0110da7:	68 ec 86 13 f0       	push   $0xf01386ec
f0110dac:	68 42 01 00 00       	push   $0x142
f0110db1:	68 7e 81 13 f0       	push   $0xf013817e
f0110db6:	e8 eb f3 fe ff       	call   f01001a6 <_panic>

	//============================
	va = 0xF0001005;
f0110dbb:	c7 45 dc 05 10 00 f0 	movl   $0xf0001005,-0x24(%ebp)
	pa = virtual_to_physical(ptr_page_directory, va);
f0110dc2:	a1 b8 0e 6c f0       	mov    0xf06c0eb8,%eax
f0110dc7:	83 ec 08             	sub    $0x8,%esp
f0110dca:	ff 75 dc             	pushl  -0x24(%ebp)
f0110dcd:	50                   	push   %eax
f0110dce:	e8 9c 6a ff ff       	call   f010786f <virtual_to_physical>
f0110dd3:	83 c4 10             	add    $0x10,%esp
f0110dd6:	89 45 d8             	mov    %eax,-0x28(%ebp)

	//cprintf("va = %x, pa = %x, ret pa = %x\n", va, CA(ptr_page_directory, va), pa);
	if(pa != CA(ptr_page_directory, va))
f0110dd9:	a1 b8 0e 6c f0       	mov    0xf06c0eb8,%eax
f0110dde:	83 ec 08             	sub    $0x8,%esp
f0110de1:	ff 75 dc             	pushl  -0x24(%ebp)
f0110de4:	50                   	push   %eax
f0110de5:	e8 89 47 00 00       	call   f0115573 <CA>
f0110dea:	83 c4 10             	add    $0x10,%esp
f0110ded:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0110df0:	74 17                	je     f0110e09 <test_virtual_to_physical+0x2e8>
		panic("[EVAL] #7 Test of virtual_to_physical Entry Failed.\n");
f0110df2:	83 ec 04             	sub    $0x4,%esp
f0110df5:	68 24 87 13 f0       	push   $0xf0138724
f0110dfa:	68 4a 01 00 00       	push   $0x14a
f0110dff:	68 7e 81 13 f0       	push   $0xf013817e
f0110e04:	e8 9d f3 fe ff       	call   f01001a6 <_panic>

	//============================
	char ap4[100] = "ap 0xeebfe000";execute_command(ap4);
f0110e09:	8d 85 48 fe ff ff    	lea    -0x1b8(%ebp),%eax
f0110e0f:	bb 04 89 13 f0       	mov    $0xf0138904,%ebx
f0110e14:	ba 0e 00 00 00       	mov    $0xe,%edx
f0110e19:	89 c7                	mov    %eax,%edi
f0110e1b:	89 de                	mov    %ebx,%esi
f0110e1d:	89 d1                	mov    %edx,%ecx
f0110e1f:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0110e21:	8d 95 56 fe ff ff    	lea    -0x1aa(%ebp),%edx
f0110e27:	b9 56 00 00 00       	mov    $0x56,%ecx
f0110e2c:	b0 00                	mov    $0x0,%al
f0110e2e:	89 d7                	mov    %edx,%edi
f0110e30:	f3 aa                	rep stos %al,%es:(%edi)
f0110e32:	83 ec 0c             	sub    $0xc,%esp
f0110e35:	8d 85 48 fe ff ff    	lea    -0x1b8(%ebp),%eax
f0110e3b:	50                   	push   %eax
f0110e3c:	e8 4e fe fe ff       	call   f0100c8f <execute_command>
f0110e41:	83 c4 10             	add    $0x10,%esp
	va = 0xeebfe000;
f0110e44:	c7 45 dc 00 e0 bf ee 	movl   $0xeebfe000,-0x24(%ebp)
	pa = virtual_to_physical(ptr_page_directory, va);
f0110e4b:	a1 b8 0e 6c f0       	mov    0xf06c0eb8,%eax
f0110e50:	83 ec 08             	sub    $0x8,%esp
f0110e53:	ff 75 dc             	pushl  -0x24(%ebp)
f0110e56:	50                   	push   %eax
f0110e57:	e8 13 6a ff ff       	call   f010786f <virtual_to_physical>
f0110e5c:	83 c4 10             	add    $0x10,%esp
f0110e5f:	89 45 d8             	mov    %eax,-0x28(%ebp)

	//cprintf("va = %x, pa = %x, ret pa = %x\n", va, CA(ptr_page_directory, va), pa);
	if(pa != CA(ptr_page_directory, va))
f0110e62:	a1 b8 0e 6c f0       	mov    0xf06c0eb8,%eax
f0110e67:	83 ec 08             	sub    $0x8,%esp
f0110e6a:	ff 75 dc             	pushl  -0x24(%ebp)
f0110e6d:	50                   	push   %eax
f0110e6e:	e8 00 47 00 00       	call   f0115573 <CA>
f0110e73:	83 c4 10             	add    $0x10,%esp
f0110e76:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0110e79:	74 17                	je     f0110e92 <test_virtual_to_physical+0x371>
		panic("[EVAL] #8 Test of virtual_to_physical Entry Failed.\n");
f0110e7b:	83 ec 04             	sub    $0x4,%esp
f0110e7e:	68 5c 87 13 f0       	push   $0xf013875c
f0110e83:	68 53 01 00 00       	push   $0x153
f0110e88:	68 7e 81 13 f0       	push   $0xf013817e
f0110e8d:	e8 14 f3 fe ff       	call   f01001a6 <_panic>

	//============================
	cprintf("Congratulations!! test virtual_to_physical completed successfully.\n");
f0110e92:	83 ec 0c             	sub    $0xc,%esp
f0110e95:	68 94 87 13 f0       	push   $0xf0138794
f0110e9a:	e8 8e fd fe ff       	call   f0100c2d <cprintf>
f0110e9f:	83 c4 10             	add    $0x10,%esp

	return 0;
f0110ea2:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0110ea7:	8d 65 f4             	lea    -0xc(%ebp),%esp
f0110eaa:	5b                   	pop    %ebx
f0110eab:	5e                   	pop    %esi
f0110eac:	5f                   	pop    %edi
f0110ead:	5d                   	pop    %ebp
f0110eae:	c3                   	ret    

f0110eaf <test_cut_paste_pages>:

//===============================
// 1) TEST CUT-PASTE PAGES:
//===============================
int test_cut_paste_pages()
{
f0110eaf:	55                   	push   %ebp
f0110eb0:	89 e5                	mov    %esp,%ebp
f0110eb2:	57                   	push   %edi
f0110eb3:	56                   	push   %esi
f0110eb4:	53                   	push   %ebx
f0110eb5:	81 ec ec 03 00 00    	sub    $0x3ec,%esp
	//Create a Temp. User Process
	char prog_name[50] = "fos_helloWorld";
f0110ebb:	8d 85 5e ff ff ff    	lea    -0xa2(%ebp),%eax
f0110ec1:	bb 18 8c 13 f0       	mov    $0xf0138c18,%ebx
f0110ec6:	ba 0f 00 00 00       	mov    $0xf,%edx
f0110ecb:	89 c7                	mov    %eax,%edi
f0110ecd:	89 de                	mov    %ebx,%esi
f0110ecf:	89 d1                	mov    %edx,%ecx
f0110ed1:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0110ed3:	8d 95 6d ff ff ff    	lea    -0x93(%ebp),%edx
f0110ed9:	b9 23 00 00 00       	mov    $0x23,%ecx
f0110ede:	b0 00                	mov    $0x0,%al
f0110ee0:	89 d7                	mov    %edx,%edi
f0110ee2:	f3 aa                	rep stos %al,%es:(%edi)
	struct Env* env = env_create(prog_name, 20, 10, 0);
f0110ee4:	6a 00                	push   $0x0
f0110ee6:	6a 0a                	push   $0xa
f0110ee8:	6a 14                	push   $0x14
f0110eea:	8d 85 5e ff ff ff    	lea    -0xa2(%ebp),%eax
f0110ef0:	50                   	push   %eax
f0110ef1:	e8 7c 77 ff ff       	call   f0108672 <env_create>
f0110ef6:	83 c4 10             	add    $0x10,%esp
f0110ef9:	89 45 d8             	mov    %eax,-0x28(%ebp)
	uint32 *proc_directory = env->env_page_directory ;
f0110efc:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0110eff:	8b 40 5c             	mov    0x5c(%eax),%eax
f0110f02:	89 45 d4             	mov    %eax,-0x2c(%ebp)
	lcr3(env->env_cr3) ;
f0110f05:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0110f08:	8b 40 60             	mov    0x60(%eax),%eax
f0110f0b:	89 45 90             	mov    %eax,-0x70(%ebp)
}

static __inline void
lcr3(uint32 val)
{
	__asm __volatile("movl %0,%%cr3" : : "r" (val));
f0110f0e:	8b 45 90             	mov    -0x70(%ebp),%eax
f0110f11:	0f 22 d8             	mov    %eax,%cr3
	char aup[20] = "aup " ;
f0110f14:	c7 85 4a ff ff ff 61 	movl   $0x20707561,-0xb6(%ebp)
f0110f1b:	75 70 20 
f0110f1e:	c7 85 4e ff ff ff 00 	movl   $0x0,-0xb2(%ebp)
f0110f25:	00 00 00 
f0110f28:	8d 95 52 ff ff ff    	lea    -0xae(%ebp),%edx
f0110f2e:	b9 03 00 00 00       	mov    $0x3,%ecx
f0110f33:	b8 00 00 00 00       	mov    $0x0,%eax
f0110f38:	89 d7                	mov    %edx,%edi
f0110f3a:	f3 ab                	rep stos %eax,%es:(%edi)
	char env_id[20] ; ltostr(env->env_id, env_id) ;
f0110f3c:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0110f3f:	8b 40 4c             	mov    0x4c(%eax),%eax
f0110f42:	83 ec 08             	sub    $0x8,%esp
f0110f45:	8d 95 36 ff ff ff    	lea    -0xca(%ebp),%edx
f0110f4b:	52                   	push   %edx
f0110f4c:	50                   	push   %eax
f0110f4d:	e8 7f fc 01 00       	call   f0130bd1 <ltostr>
f0110f52:	83 c4 10             	add    $0x10,%esp
	char aup_cmd[50];
	strcconcat(aup, env_id, aup_cmd);
f0110f55:	83 ec 04             	sub    $0x4,%esp
f0110f58:	8d 85 04 ff ff ff    	lea    -0xfc(%ebp),%eax
f0110f5e:	50                   	push   %eax
f0110f5f:	8d 85 36 ff ff ff    	lea    -0xca(%ebp),%eax
f0110f65:	50                   	push   %eax
f0110f66:	8d 85 4a ff ff ff    	lea    -0xb6(%ebp),%eax
f0110f6c:	50                   	push   %eax
f0110f6d:	e8 57 fd 01 00       	call   f0130cc9 <strcconcat>
f0110f72:	83 c4 10             	add    $0x10,%esp
	//===================================================
	int numOfArgs = 0;
f0110f75:	c7 45 cc 00 00 00 00 	movl   $0x0,-0x34(%ebp)
	char *args[MAX_ARGUMENTS] ;

	char *ptr1, *ptr2, *ptr3, *ptr4, *ptr5, *ptr6;
	int kilo = 1024 ;
f0110f7c:	c7 45 c8 00 04 00 00 	movl   $0x400,-0x38(%ebp)
	int mega = 1024*1024 ;
f0110f83:	c7 45 c4 00 00 10 00 	movl   $0x100000,-0x3c(%ebp)

	ClearUserSpace(proc_directory);
f0110f8a:	83 ec 0c             	sub    $0xc,%esp
f0110f8d:	ff 75 d4             	pushl  -0x2c(%ebp)
f0110f90:	e8 78 48 00 00       	call   f011580d <ClearUserSpace>
f0110f95:	83 c4 10             	add    $0x10,%esp

	char ap1[100] ;strcconcat(aup_cmd, " 0x2800000", ap1); execute_command(ap1);
f0110f98:	83 ec 04             	sub    $0x4,%esp
f0110f9b:	8d 85 60 fe ff ff    	lea    -0x1a0(%ebp),%eax
f0110fa1:	50                   	push   %eax
f0110fa2:	68 68 89 13 f0       	push   $0xf0138968
f0110fa7:	8d 85 04 ff ff ff    	lea    -0xfc(%ebp),%eax
f0110fad:	50                   	push   %eax
f0110fae:	e8 16 fd 01 00       	call   f0130cc9 <strcconcat>
f0110fb3:	83 c4 10             	add    $0x10,%esp
f0110fb6:	83 ec 0c             	sub    $0xc,%esp
f0110fb9:	8d 85 60 fe ff ff    	lea    -0x1a0(%ebp),%eax
f0110fbf:	50                   	push   %eax
f0110fc0:	e8 ca fc fe ff       	call   f0100c8f <execute_command>
f0110fc5:	83 c4 10             	add    $0x10,%esp
	char ap2[100] ;strcconcat(aup_cmd, " 0x2801000", ap2); execute_command(ap2);
f0110fc8:	83 ec 04             	sub    $0x4,%esp
f0110fcb:	8d 85 fc fd ff ff    	lea    -0x204(%ebp),%eax
f0110fd1:	50                   	push   %eax
f0110fd2:	68 73 89 13 f0       	push   $0xf0138973
f0110fd7:	8d 85 04 ff ff ff    	lea    -0xfc(%ebp),%eax
f0110fdd:	50                   	push   %eax
f0110fde:	e8 e6 fc 01 00       	call   f0130cc9 <strcconcat>
f0110fe3:	83 c4 10             	add    $0x10,%esp
f0110fe6:	83 ec 0c             	sub    $0xc,%esp
f0110fe9:	8d 85 fc fd ff ff    	lea    -0x204(%ebp),%eax
f0110fef:	50                   	push   %eax
f0110ff0:	e8 9a fc fe ff       	call   f0100c8f <execute_command>
f0110ff5:	83 c4 10             	add    $0x10,%esp
	char ap3[100] ;strcconcat(aup_cmd, " 0x2802000", ap3); execute_command(ap3);
f0110ff8:	83 ec 04             	sub    $0x4,%esp
f0110ffb:	8d 85 98 fd ff ff    	lea    -0x268(%ebp),%eax
f0111001:	50                   	push   %eax
f0111002:	68 7e 89 13 f0       	push   $0xf013897e
f0111007:	8d 85 04 ff ff ff    	lea    -0xfc(%ebp),%eax
f011100d:	50                   	push   %eax
f011100e:	e8 b6 fc 01 00       	call   f0130cc9 <strcconcat>
f0111013:	83 c4 10             	add    $0x10,%esp
f0111016:	83 ec 0c             	sub    $0xc,%esp
f0111019:	8d 85 98 fd ff ff    	lea    -0x268(%ebp),%eax
f011101f:	50                   	push   %eax
f0111020:	e8 6a fc fe ff       	call   f0100c8f <execute_command>
f0111025:	83 c4 10             	add    $0x10,%esp

	ptr1 = (char*)0x2800000; *ptr1 = 'a';
f0111028:	c7 45 c0 00 00 80 02 	movl   $0x2800000,-0x40(%ebp)
f011102f:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0111032:	c6 00 61             	movb   $0x61,(%eax)
	ptr1 = (char*)0x28017FF; *ptr1 = 'b';
f0111035:	c7 45 c0 ff 17 80 02 	movl   $0x28017ff,-0x40(%ebp)
f011103c:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011103f:	c6 00 62             	movb   $0x62,(%eax)
	ptr1 = (char*)0x2802FFF; *ptr1 = 'c';
f0111042:	c7 45 c0 ff 2f 80 02 	movl   $0x2802fff,-0x40(%ebp)
f0111049:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011104c:	c6 00 63             	movb   $0x63,(%eax)

	uint32 perms = GP(proc_directory, (uint32)ptr1);
f011104f:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0111052:	83 ec 08             	sub    $0x8,%esp
f0111055:	50                   	push   %eax
f0111056:	ff 75 d4             	pushl  -0x2c(%ebp)
f0111059:	e8 16 47 00 00       	call   f0115774 <GP>
f011105e:	83 c4 10             	add    $0x10,%esp
f0111061:	89 45 bc             	mov    %eax,-0x44(%ebp)

	int eval = 0;
f0111064:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
	int correct = 1;
f011106b:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
	int ff1 = sys_calculate_free_frames();
f0111072:	e8 47 b3 ff ff       	call   f010c3be <sys_calculate_free_frames>
f0111077:	89 45 b8             	mov    %eax,-0x48(%ebp)

	/*=============================================*/
	/*PART I: Destination Pages Does NOT Exist 60% */
	/*=============================================*/
	cprintf("CASE I: Destination Pages Does NOT Exist [60%]\n") ;
f011107a:	83 ec 0c             	sub    $0xc,%esp
f011107d:	68 8c 89 13 f0       	push   $0xf013898c
f0111082:	e8 a6 fb fe ff       	call   f0100c2d <cprintf>
f0111087:	83 c4 10             	add    $0x10,%esp
	int ret = cut_paste_pages(proc_directory, 0x2800000, 0x2900000, 3) ;
f011108a:	6a 03                	push   $0x3
f011108c:	68 00 00 90 02       	push   $0x2900000
f0111091:	68 00 00 80 02       	push   $0x2800000
f0111096:	ff 75 d4             	pushl  -0x2c(%ebp)
f0111099:	e8 0c 72 ff ff       	call   f01082aa <cut_paste_pages>
f011109e:	83 c4 10             	add    $0x10,%esp
f01110a1:	89 45 b4             	mov    %eax,-0x4c(%ebp)

	int ff2 = sys_calculate_free_frames();
f01110a4:	e8 15 b3 ff ff       	call   f010c3be <sys_calculate_free_frames>
f01110a9:	89 45 b0             	mov    %eax,-0x50(%ebp)

	correct = 1 ;
f01110ac:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
	if (ret != 0 || ff1 != ff2)
f01110b3:	83 7d b4 00          	cmpl   $0x0,-0x4c(%ebp)
f01110b7:	75 08                	jne    f01110c1 <test_cut_paste_pages+0x212>
f01110b9:	8b 45 b8             	mov    -0x48(%ebp),%eax
f01110bc:	3b 45 b0             	cmp    -0x50(%ebp),%eax
f01110bf:	74 2b                	je     f01110ec <test_cut_paste_pages+0x23d>
	{
		warn("[EVAL] cut_paste_pages: Failed (# allocated frames is not correct) ret=%d diff=%d\n", ret, ff1 - ff2);
f01110c1:	8b 45 b8             	mov    -0x48(%ebp),%eax
f01110c4:	2b 45 b0             	sub    -0x50(%ebp),%eax
f01110c7:	83 ec 0c             	sub    $0xc,%esp
f01110ca:	50                   	push   %eax
f01110cb:	ff 75 b4             	pushl  -0x4c(%ebp)
f01110ce:	68 bc 89 13 f0       	push   $0xf01389bc
f01110d3:	68 91 01 00 00       	push   $0x191
f01110d8:	68 7e 81 13 f0       	push   $0xf013817e
f01110dd:	e8 50 f2 fe ff       	call   f0100332 <_warn>
f01110e2:	83 c4 20             	add    $0x20,%esp
		correct = 0;
f01110e5:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
	}
	if (correct) eval += 5 ;
f01110ec:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f01110f0:	74 04                	je     f01110f6 <test_cut_paste_pages+0x247>
f01110f2:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
	correct = 1 ;
f01110f6:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

	if (CCP(proc_directory, 0x2800000, 0x2900000, 3*PAGE_SIZE, 1, perms, 0xFFF, 0, 0x001, CHK_CUT_PASTE) != 1)
f01110fd:	83 ec 08             	sub    $0x8,%esp
f0111100:	6a 00                	push   $0x0
f0111102:	6a 01                	push   $0x1
f0111104:	6a 00                	push   $0x0
f0111106:	68 ff 0f 00 00       	push   $0xfff
f011110b:	ff 75 bc             	pushl  -0x44(%ebp)
f011110e:	6a 01                	push   $0x1
f0111110:	68 00 30 00 00       	push   $0x3000
f0111115:	68 00 00 90 02       	push   $0x2900000
f011111a:	68 00 00 80 02       	push   $0x2800000
f011111f:	ff 75 d4             	pushl  -0x2c(%ebp)
f0111122:	e8 1a 47 00 00       	call   f0115841 <CCP>
f0111127:	83 c4 30             	add    $0x30,%esp
f011112a:	83 f8 01             	cmp    $0x1,%eax
f011112d:	74 21                	je     f0111150 <test_cut_paste_pages+0x2a1>
	{
		warn("[EVAL] cut_paste_pages: Failed (problem in permissions and/or references\n");
f011112f:	83 ec 04             	sub    $0x4,%esp
f0111132:	68 10 8a 13 f0       	push   $0xf0138a10
f0111137:	68 99 01 00 00       	push   $0x199
f011113c:	68 7e 81 13 f0       	push   $0xf013817e
f0111141:	e8 ec f1 fe ff       	call   f0100332 <_warn>
f0111146:	83 c4 10             	add    $0x10,%esp
		correct = 0;
f0111149:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
	}
	if (correct) eval += 15 ;
f0111150:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0111154:	74 04                	je     f011115a <test_cut_paste_pages+0x2ab>
f0111156:	83 45 e4 0f          	addl   $0xf,-0x1c(%ebp)
	correct = 1 ;
f011115a:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

	if (CB(proc_directory, 0x2900000, 0) && CB(proc_directory, 0x2901000, 0) && CB(proc_directory, 0x2902000, 0))
f0111161:	83 ec 04             	sub    $0x4,%esp
f0111164:	6a 00                	push   $0x0
f0111166:	68 00 00 90 02       	push   $0x2900000
f011116b:	ff 75 d4             	pushl  -0x2c(%ebp)
f011116e:	e8 5f 41 00 00       	call   f01152d2 <CB>
f0111173:	83 c4 10             	add    $0x10,%esp
f0111176:	85 c0                	test   %eax,%eax
f0111178:	0f 84 f6 00 00 00    	je     f0111274 <test_cut_paste_pages+0x3c5>
f011117e:	83 ec 04             	sub    $0x4,%esp
f0111181:	6a 00                	push   $0x0
f0111183:	68 00 10 90 02       	push   $0x2901000
f0111188:	ff 75 d4             	pushl  -0x2c(%ebp)
f011118b:	e8 42 41 00 00       	call   f01152d2 <CB>
f0111190:	83 c4 10             	add    $0x10,%esp
f0111193:	85 c0                	test   %eax,%eax
f0111195:	0f 84 d9 00 00 00    	je     f0111274 <test_cut_paste_pages+0x3c5>
f011119b:	83 ec 04             	sub    $0x4,%esp
f011119e:	6a 00                	push   $0x0
f01111a0:	68 00 20 90 02       	push   $0x2902000
f01111a5:	ff 75 d4             	pushl  -0x2c(%ebp)
f01111a8:	e8 25 41 00 00       	call   f01152d2 <CB>
f01111ad:	83 c4 10             	add    $0x10,%esp
f01111b0:	85 c0                	test   %eax,%eax
f01111b2:	0f 84 bc 00 00 00    	je     f0111274 <test_cut_paste_pages+0x3c5>
	{
		ptr1 = (char*)0x2900000;
f01111b8:	c7 45 c0 00 00 90 02 	movl   $0x2900000,-0x40(%ebp)
		ptr2 = (char*)0x29017FF;
f01111bf:	c7 45 ac ff 17 90 02 	movl   $0x29017ff,-0x54(%ebp)
		ptr3 = (char*)0x2902FFF;
f01111c6:	c7 45 a8 ff 2f 90 02 	movl   $0x2902fff,-0x58(%ebp)
		if ((*ptr1) != 'a' || (*ptr2) != 'b' || (*ptr3) != 'c')
f01111cd:	8b 45 c0             	mov    -0x40(%ebp),%eax
f01111d0:	8a 00                	mov    (%eax),%al
f01111d2:	3c 61                	cmp    $0x61,%al
f01111d4:	75 12                	jne    f01111e8 <test_cut_paste_pages+0x339>
f01111d6:	8b 45 ac             	mov    -0x54(%ebp),%eax
f01111d9:	8a 00                	mov    (%eax),%al
f01111db:	3c 62                	cmp    $0x62,%al
f01111dd:	75 09                	jne    f01111e8 <test_cut_paste_pages+0x339>
f01111df:	8b 45 a8             	mov    -0x58(%ebp),%eax
f01111e2:	8a 00                	mov    (%eax),%al
f01111e4:	3c 63                	cmp    $0x63,%al
f01111e6:	74 21                	je     f0111209 <test_cut_paste_pages+0x35a>
		{
			warn("[EVAL] cut_paste_pages: Failed (content is not correct)\n");
f01111e8:	83 ec 04             	sub    $0x4,%esp
f01111eb:	68 5c 8a 13 f0       	push   $0xf0138a5c
f01111f0:	68 a6 01 00 00       	push   $0x1a6
f01111f5:	68 7e 81 13 f0       	push   $0xf013817e
f01111fa:	e8 33 f1 fe ff       	call   f0100332 <_warn>
f01111ff:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0111202:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		}
		if (correct) eval += 5 ;
f0111209:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f011120d:	74 04                	je     f0111213 <test_cut_paste_pages+0x364>
f011120f:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0111213:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

		if (CB(proc_directory, 0x2901000, 1))
f011121a:	83 ec 04             	sub    $0x4,%esp
f011121d:	6a 01                	push   $0x1
f011121f:	68 00 10 90 02       	push   $0x2901000
f0111224:	ff 75 d4             	pushl  -0x2c(%ebp)
f0111227:	e8 a6 40 00 00       	call   f01152d2 <CB>
f011122c:	83 c4 10             	add    $0x10,%esp
f011122f:	85 c0                	test   %eax,%eax
f0111231:	74 41                	je     f0111274 <test_cut_paste_pages+0x3c5>
		{
			*ptr2 = 'y';
f0111233:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0111236:	c6 00 79             	movb   $0x79,(%eax)
			if ((*ptr2) != 'y')
f0111239:	8b 45 ac             	mov    -0x54(%ebp),%eax
f011123c:	8a 00                	mov    (%eax),%al
f011123e:	3c 79                	cmp    $0x79,%al
f0111240:	74 21                	je     f0111263 <test_cut_paste_pages+0x3b4>
			{
				warn("[EVAL] cut_paste_pages: Failed (content is not correct)\n");
f0111242:	83 ec 04             	sub    $0x4,%esp
f0111245:	68 5c 8a 13 f0       	push   $0xf0138a5c
f011124a:	68 b1 01 00 00       	push   $0x1b1
f011124f:	68 7e 81 13 f0       	push   $0xf013817e
f0111254:	e8 d9 f0 fe ff       	call   f0100332 <_warn>
f0111259:	83 c4 10             	add    $0x10,%esp
				correct = 0;
f011125c:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
			}
			if (correct) eval += 5 ;
f0111263:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0111267:	74 04                	je     f011126d <test_cut_paste_pages+0x3be>
f0111269:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
			correct = 1 ;
f011126d:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
		}
	}


	ff1 = ff2 ;
f0111274:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0111277:	89 45 b8             	mov    %eax,-0x48(%ebp)

	ret = cut_paste_pages(proc_directory, 0x2901000, 0x2BFF000, 2) ;
f011127a:	6a 02                	push   $0x2
f011127c:	68 00 f0 bf 02       	push   $0x2bff000
f0111281:	68 00 10 90 02       	push   $0x2901000
f0111286:	ff 75 d4             	pushl  -0x2c(%ebp)
f0111289:	e8 1c 70 ff ff       	call   f01082aa <cut_paste_pages>
f011128e:	83 c4 10             	add    $0x10,%esp
f0111291:	89 45 b4             	mov    %eax,-0x4c(%ebp)

	ff2 = sys_calculate_free_frames();
f0111294:	e8 25 b1 ff ff       	call   f010c3be <sys_calculate_free_frames>
f0111299:	89 45 b0             	mov    %eax,-0x50(%ebp)

	if (ret != 0 || ff1 - ff2 != 1)
f011129c:	83 7d b4 00          	cmpl   $0x0,-0x4c(%ebp)
f01112a0:	75 0b                	jne    f01112ad <test_cut_paste_pages+0x3fe>
f01112a2:	8b 45 b8             	mov    -0x48(%ebp),%eax
f01112a5:	2b 45 b0             	sub    -0x50(%ebp),%eax
f01112a8:	83 f8 01             	cmp    $0x1,%eax
f01112ab:	74 2b                	je     f01112d8 <test_cut_paste_pages+0x429>
	{
		warn("[EVAL] cut_paste_pages: Failed (# allocated frames is not correct) ret=%d diff=%d\n", ret, ff1 - ff2);
f01112ad:	8b 45 b8             	mov    -0x48(%ebp),%eax
f01112b0:	2b 45 b0             	sub    -0x50(%ebp),%eax
f01112b3:	83 ec 0c             	sub    $0xc,%esp
f01112b6:	50                   	push   %eax
f01112b7:	ff 75 b4             	pushl  -0x4c(%ebp)
f01112ba:	68 bc 89 13 f0       	push   $0xf01389bc
f01112bf:	68 c2 01 00 00       	push   $0x1c2
f01112c4:	68 7e 81 13 f0       	push   $0xf013817e
f01112c9:	e8 64 f0 fe ff       	call   f0100332 <_warn>
f01112ce:	83 c4 20             	add    $0x20,%esp
		correct = 0;
f01112d1:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
	}
	if (correct) eval += 10 ;
f01112d8:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f01112dc:	74 04                	je     f01112e2 <test_cut_paste_pages+0x433>
f01112de:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
	correct = 1 ;
f01112e2:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

	if (CCP(proc_directory, 0x2901000, 0x2BFF000, 2*PAGE_SIZE, 1, perms , 0xFFF, 0, 0x001, CHK_CUT_PASTE) != 1)
f01112e9:	83 ec 08             	sub    $0x8,%esp
f01112ec:	6a 00                	push   $0x0
f01112ee:	6a 01                	push   $0x1
f01112f0:	6a 00                	push   $0x0
f01112f2:	68 ff 0f 00 00       	push   $0xfff
f01112f7:	ff 75 bc             	pushl  -0x44(%ebp)
f01112fa:	6a 01                	push   $0x1
f01112fc:	68 00 20 00 00       	push   $0x2000
f0111301:	68 00 f0 bf 02       	push   $0x2bff000
f0111306:	68 00 10 90 02       	push   $0x2901000
f011130b:	ff 75 d4             	pushl  -0x2c(%ebp)
f011130e:	e8 2e 45 00 00       	call   f0115841 <CCP>
f0111313:	83 c4 30             	add    $0x30,%esp
f0111316:	83 f8 01             	cmp    $0x1,%eax
f0111319:	74 21                	je     f011133c <test_cut_paste_pages+0x48d>
	{
		warn("[EVAL] cut_paste_pages: Failed (problem in permissions and/or references\n");
f011131b:	83 ec 04             	sub    $0x4,%esp
f011131e:	68 10 8a 13 f0       	push   $0xf0138a10
f0111323:	68 ca 01 00 00       	push   $0x1ca
f0111328:	68 7e 81 13 f0       	push   $0xf013817e
f011132d:	e8 00 f0 fe ff       	call   f0100332 <_warn>
f0111332:	83 c4 10             	add    $0x10,%esp
		correct = 0;
f0111335:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
	}
	if (correct) eval += 10 ;
f011133c:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0111340:	74 04                	je     f0111346 <test_cut_paste_pages+0x497>
f0111342:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
	correct = 1 ;
f0111346:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

	if (CB(proc_directory, 0x2BFF7FF, 0) && CB(proc_directory, 0x2C00FFF, 0))
f011134d:	83 ec 04             	sub    $0x4,%esp
f0111350:	6a 00                	push   $0x0
f0111352:	68 ff f7 bf 02       	push   $0x2bff7ff
f0111357:	ff 75 d4             	pushl  -0x2c(%ebp)
f011135a:	e8 73 3f 00 00       	call   f01152d2 <CB>
f011135f:	83 c4 10             	add    $0x10,%esp
f0111362:	85 c0                	test   %eax,%eax
f0111364:	74 6b                	je     f01113d1 <test_cut_paste_pages+0x522>
f0111366:	83 ec 04             	sub    $0x4,%esp
f0111369:	6a 00                	push   $0x0
f011136b:	68 ff 0f c0 02       	push   $0x2c00fff
f0111370:	ff 75 d4             	pushl  -0x2c(%ebp)
f0111373:	e8 5a 3f 00 00       	call   f01152d2 <CB>
f0111378:	83 c4 10             	add    $0x10,%esp
f011137b:	85 c0                	test   %eax,%eax
f011137d:	74 52                	je     f01113d1 <test_cut_paste_pages+0x522>
	{
		ptr1 = (char*)0x2BFF7FF;
f011137f:	c7 45 c0 ff f7 bf 02 	movl   $0x2bff7ff,-0x40(%ebp)
		ptr2 = (char*)0x2C00FFF;
f0111386:	c7 45 ac ff 0f c0 02 	movl   $0x2c00fff,-0x54(%ebp)
		if ((*ptr1) != 'y' || (*ptr2) != 'c')
f011138d:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0111390:	8a 00                	mov    (%eax),%al
f0111392:	3c 79                	cmp    $0x79,%al
f0111394:	75 09                	jne    f011139f <test_cut_paste_pages+0x4f0>
f0111396:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0111399:	8a 00                	mov    (%eax),%al
f011139b:	3c 63                	cmp    $0x63,%al
f011139d:	74 21                	je     f01113c0 <test_cut_paste_pages+0x511>
		{
			warn("[EVAL] cut_paste_pages: Failed (content is not correct)\n");
f011139f:	83 ec 04             	sub    $0x4,%esp
f01113a2:	68 5c 8a 13 f0       	push   $0xf0138a5c
f01113a7:	68 d6 01 00 00       	push   $0x1d6
f01113ac:	68 7e 81 13 f0       	push   $0xf013817e
f01113b1:	e8 7c ef fe ff       	call   f0100332 <_warn>
f01113b6:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f01113b9:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		}
		if (correct) eval += 10 ;
f01113c0:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f01113c4:	74 04                	je     f01113ca <test_cut_paste_pages+0x51b>
f01113c6:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f01113ca:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
	}
	cprintf("CASE I: END\n") ;
f01113d1:	83 ec 0c             	sub    $0xc,%esp
f01113d4:	68 95 8a 13 f0       	push   $0xf0138a95
f01113d9:	e8 4f f8 fe ff       	call   f0100c2d <cprintf>
f01113de:	83 c4 10             	add    $0x10,%esp

	/*========================================*/
	/*PART II: Destination Pages Exist 40%	  */
	/*========================================*/
	cprintf("\nCASE II: Destination Pages Exist [40%]\n") ;
f01113e1:	83 ec 0c             	sub    $0xc,%esp
f01113e4:	68 a4 8a 13 f0       	push   $0xf0138aa4
f01113e9:	e8 3f f8 fe ff       	call   f0100c2d <cprintf>
f01113ee:	83 c4 10             	add    $0x10,%esp

	char ap4[100] ;strcconcat(aup_cmd, " 0x1400000", ap4); execute_command(ap4);
f01113f1:	83 ec 04             	sub    $0x4,%esp
f01113f4:	8d 85 34 fd ff ff    	lea    -0x2cc(%ebp),%eax
f01113fa:	50                   	push   %eax
f01113fb:	68 cd 8a 13 f0       	push   $0xf0138acd
f0111400:	8d 85 04 ff ff ff    	lea    -0xfc(%ebp),%eax
f0111406:	50                   	push   %eax
f0111407:	e8 bd f8 01 00       	call   f0130cc9 <strcconcat>
f011140c:	83 c4 10             	add    $0x10,%esp
f011140f:	83 ec 0c             	sub    $0xc,%esp
f0111412:	8d 85 34 fd ff ff    	lea    -0x2cc(%ebp),%eax
f0111418:	50                   	push   %eax
f0111419:	e8 71 f8 fe ff       	call   f0100c8f <execute_command>
f011141e:	83 c4 10             	add    $0x10,%esp
	char ap5[100] ;strcconcat(aup_cmd, " 0x1401000", ap5); execute_command(ap5);
f0111421:	83 ec 04             	sub    $0x4,%esp
f0111424:	8d 85 d0 fc ff ff    	lea    -0x330(%ebp),%eax
f011142a:	50                   	push   %eax
f011142b:	68 d8 8a 13 f0       	push   $0xf0138ad8
f0111430:	8d 85 04 ff ff ff    	lea    -0xfc(%ebp),%eax
f0111436:	50                   	push   %eax
f0111437:	e8 8d f8 01 00       	call   f0130cc9 <strcconcat>
f011143c:	83 c4 10             	add    $0x10,%esp
f011143f:	83 ec 0c             	sub    $0xc,%esp
f0111442:	8d 85 d0 fc ff ff    	lea    -0x330(%ebp),%eax
f0111448:	50                   	push   %eax
f0111449:	e8 41 f8 fe ff       	call   f0100c8f <execute_command>
f011144e:	83 c4 10             	add    $0x10,%esp
	char ap6[100] ;strcconcat(aup_cmd, " 0x1402000", ap6); execute_command(ap6);
f0111451:	83 ec 04             	sub    $0x4,%esp
f0111454:	8d 85 6c fc ff ff    	lea    -0x394(%ebp),%eax
f011145a:	50                   	push   %eax
f011145b:	68 e3 8a 13 f0       	push   $0xf0138ae3
f0111460:	8d 85 04 ff ff ff    	lea    -0xfc(%ebp),%eax
f0111466:	50                   	push   %eax
f0111467:	e8 5d f8 01 00       	call   f0130cc9 <strcconcat>
f011146c:	83 c4 10             	add    $0x10,%esp
f011146f:	83 ec 0c             	sub    $0xc,%esp
f0111472:	8d 85 6c fc ff ff    	lea    -0x394(%ebp),%eax
f0111478:	50                   	push   %eax
f0111479:	e8 11 f8 fe ff       	call   f0100c8f <execute_command>
f011147e:	83 c4 10             	add    $0x10,%esp
	char ap7[100] ;strcconcat(aup_cmd, " 0x1C00000", ap7); execute_command(ap7);
f0111481:	83 ec 04             	sub    $0x4,%esp
f0111484:	8d 85 08 fc ff ff    	lea    -0x3f8(%ebp),%eax
f011148a:	50                   	push   %eax
f011148b:	68 ee 8a 13 f0       	push   $0xf0138aee
f0111490:	8d 85 04 ff ff ff    	lea    -0xfc(%ebp),%eax
f0111496:	50                   	push   %eax
f0111497:	e8 2d f8 01 00       	call   f0130cc9 <strcconcat>
f011149c:	83 c4 10             	add    $0x10,%esp
f011149f:	83 ec 0c             	sub    $0xc,%esp
f01114a2:	8d 85 08 fc ff ff    	lea    -0x3f8(%ebp),%eax
f01114a8:	50                   	push   %eax
f01114a9:	e8 e1 f7 fe ff       	call   f0100c8f <execute_command>
f01114ae:	83 c4 10             	add    $0x10,%esp

	ptr1 = (char*)0x1400000; *ptr1 = 'a';
f01114b1:	c7 45 c0 00 00 40 01 	movl   $0x1400000,-0x40(%ebp)
f01114b8:	8b 45 c0             	mov    -0x40(%ebp),%eax
f01114bb:	c6 00 61             	movb   $0x61,(%eax)
	ptr1 = (char*)0x14007FF; *ptr1 = 'b';
f01114be:	c7 45 c0 ff 07 40 01 	movl   $0x14007ff,-0x40(%ebp)
f01114c5:	8b 45 c0             	mov    -0x40(%ebp),%eax
f01114c8:	c6 00 62             	movb   $0x62,(%eax)
	ptr1 = (char*)0x1400FFF; *ptr1 = 'c';
f01114cb:	c7 45 c0 ff 0f 40 01 	movl   $0x1400fff,-0x40(%ebp)
f01114d2:	8b 45 c0             	mov    -0x40(%ebp),%eax
f01114d5:	c6 00 63             	movb   $0x63,(%eax)
	ptr1 = (char*)0x1C00000; *ptr1 = 'x';
f01114d8:	c7 45 c0 00 00 c0 01 	movl   $0x1c00000,-0x40(%ebp)
f01114df:	8b 45 c0             	mov    -0x40(%ebp),%eax
f01114e2:	c6 00 78             	movb   $0x78,(%eax)
	ptr1 = (char*)0x1C007FF; *ptr1 = 'y';
f01114e5:	c7 45 c0 ff 07 c0 01 	movl   $0x1c007ff,-0x40(%ebp)
f01114ec:	8b 45 c0             	mov    -0x40(%ebp),%eax
f01114ef:	c6 00 79             	movb   $0x79,(%eax)
	ptr1 = (char*)0x1C00FFF; *ptr1 = 'z';
f01114f2:	c7 45 c0 ff 0f c0 01 	movl   $0x1c00fff,-0x40(%ebp)
f01114f9:	8b 45 c0             	mov    -0x40(%ebp),%eax
f01114fc:	c6 00 7a             	movb   $0x7a,(%eax)
	uint32 srcp = GP(proc_directory, 0x1C00000) ;
f01114ff:	83 ec 08             	sub    $0x8,%esp
f0111502:	68 00 00 c0 01       	push   $0x1c00000
f0111507:	ff 75 d4             	pushl  -0x2c(%ebp)
f011150a:	e8 65 42 00 00       	call   f0115774 <GP>
f011150f:	83 c4 10             	add    $0x10,%esp
f0111512:	89 45 a4             	mov    %eax,-0x5c(%ebp)
	uint32 dstp = GP(proc_directory, 0x1400000) ;
f0111515:	83 ec 08             	sub    $0x8,%esp
f0111518:	68 00 00 40 01       	push   $0x1400000
f011151d:	ff 75 d4             	pushl  -0x2c(%ebp)
f0111520:	e8 4f 42 00 00       	call   f0115774 <GP>
f0111525:	83 c4 10             	add    $0x10,%esp
f0111528:	89 45 a0             	mov    %eax,-0x60(%ebp)

	ff1 = sys_calculate_free_frames();
f011152b:	e8 8e ae ff ff       	call   f010c3be <sys_calculate_free_frames>
f0111530:	89 45 b8             	mov    %eax,-0x48(%ebp)

	ret = cut_paste_pages(proc_directory, 0x1C00000, 0x1400000, 1) ;
f0111533:	6a 01                	push   $0x1
f0111535:	68 00 00 40 01       	push   $0x1400000
f011153a:	68 00 00 c0 01       	push   $0x1c00000
f011153f:	ff 75 d4             	pushl  -0x2c(%ebp)
f0111542:	e8 63 6d ff ff       	call   f01082aa <cut_paste_pages>
f0111547:	83 c4 10             	add    $0x10,%esp
f011154a:	89 45 b4             	mov    %eax,-0x4c(%ebp)

	ff2 = sys_calculate_free_frames();
f011154d:	e8 6c ae ff ff       	call   f010c3be <sys_calculate_free_frames>
f0111552:	89 45 b0             	mov    %eax,-0x50(%ebp)

	if (ret != -1 || ff1 - ff2 != 0)
f0111555:	83 7d b4 ff          	cmpl   $0xffffffff,-0x4c(%ebp)
f0111559:	75 08                	jne    f0111563 <test_cut_paste_pages+0x6b4>
f011155b:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011155e:	3b 45 b0             	cmp    -0x50(%ebp),%eax
f0111561:	74 2b                	je     f011158e <test_cut_paste_pages+0x6df>
	{
		warn("[EVAL] cut_paste_pages: Failed (dest is exist... operation should be denied) ret=%d diff=%d\n", ret, ff1 - ff2);
f0111563:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0111566:	2b 45 b0             	sub    -0x50(%ebp),%eax
f0111569:	83 ec 0c             	sub    $0xc,%esp
f011156c:	50                   	push   %eax
f011156d:	ff 75 b4             	pushl  -0x4c(%ebp)
f0111570:	68 fc 8a 13 f0       	push   $0xf0138afc
f0111575:	68 f9 01 00 00       	push   $0x1f9
f011157a:	68 7e 81 13 f0       	push   $0xf013817e
f011157f:	e8 ae ed fe ff       	call   f0100332 <_warn>
f0111584:	83 c4 20             	add    $0x20,%esp
		correct = 0;
f0111587:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
	}
	if (correct) eval += 10 ;
f011158e:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0111592:	74 04                	je     f0111598 <test_cut_paste_pages+0x6e9>
f0111594:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
	correct = 1 ;
f0111598:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

	int chk_cntnt = 1 ;
f011159f:	c7 45 dc 01 00 00 00 	movl   $0x1,-0x24(%ebp)
	if (CCP(proc_directory, 0x1C00000, 0x1400000, 1*PAGE_SIZE, 1, dstp , 0xFFF, srcp, 0xFFF, CHK_CUT_PASTE) != 1)
f01115a6:	83 ec 08             	sub    $0x8,%esp
f01115a9:	6a 00                	push   $0x0
f01115ab:	68 ff 0f 00 00       	push   $0xfff
f01115b0:	ff 75 a4             	pushl  -0x5c(%ebp)
f01115b3:	68 ff 0f 00 00       	push   $0xfff
f01115b8:	ff 75 a0             	pushl  -0x60(%ebp)
f01115bb:	6a 01                	push   $0x1
f01115bd:	68 00 10 00 00       	push   $0x1000
f01115c2:	68 00 00 40 01       	push   $0x1400000
f01115c7:	68 00 00 c0 01       	push   $0x1c00000
f01115cc:	ff 75 d4             	pushl  -0x2c(%ebp)
f01115cf:	e8 6d 42 00 00       	call   f0115841 <CCP>
f01115d4:	83 c4 30             	add    $0x30,%esp
f01115d7:	83 f8 01             	cmp    $0x1,%eax
f01115da:	74 28                	je     f0111604 <test_cut_paste_pages+0x755>
	{
		warn("[EVAL] cut_paste_pages: Failed (problem in permissions and/or references\n");
f01115dc:	83 ec 04             	sub    $0x4,%esp
f01115df:	68 10 8a 13 f0       	push   $0xf0138a10
f01115e4:	68 02 02 00 00       	push   $0x202
f01115e9:	68 7e 81 13 f0       	push   $0xf013817e
f01115ee:	e8 3f ed fe ff       	call   f0100332 <_warn>
f01115f3:	83 c4 10             	add    $0x10,%esp
		correct = 0;
f01115f6:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		chk_cntnt = 0;
f01115fd:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
	}
	if (correct) eval += 5 ;
f0111604:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0111608:	74 04                	je     f011160e <test_cut_paste_pages+0x75f>
f011160a:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
	correct = 1 ;
f011160e:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

	if (chk_cntnt)
f0111615:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f0111619:	0f 84 92 00 00 00    	je     f01116b1 <test_cut_paste_pages+0x802>
	{
		ptr1 = (char*)0x1400000;
f011161f:	c7 45 c0 00 00 40 01 	movl   $0x1400000,-0x40(%ebp)
		ptr2 = (char*)0x1C00000;
f0111626:	c7 45 ac 00 00 c0 01 	movl   $0x1c00000,-0x54(%ebp)
		ptr3 = (char*)0x14007FF;
f011162d:	c7 45 a8 ff 07 40 01 	movl   $0x14007ff,-0x58(%ebp)
		ptr4 = (char*)0x1C007FF;
f0111634:	c7 45 9c ff 07 c0 01 	movl   $0x1c007ff,-0x64(%ebp)
		ptr5 = (char*)0x1400FFF;
f011163b:	c7 45 98 ff 0f 40 01 	movl   $0x1400fff,-0x68(%ebp)
		ptr6 = (char*)0x1C00FFF;
f0111642:	c7 45 94 ff 0f c0 01 	movl   $0x1c00fff,-0x6c(%ebp)
		if ((*ptr1) != 'a' || (*ptr2) != 'x' || (*ptr3) != 'b' ||
f0111649:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011164c:	8a 00                	mov    (%eax),%al
f011164e:	3c 61                	cmp    $0x61,%al
f0111650:	75 2d                	jne    f011167f <test_cut_paste_pages+0x7d0>
f0111652:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0111655:	8a 00                	mov    (%eax),%al
f0111657:	3c 78                	cmp    $0x78,%al
f0111659:	75 24                	jne    f011167f <test_cut_paste_pages+0x7d0>
f011165b:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011165e:	8a 00                	mov    (%eax),%al
f0111660:	3c 62                	cmp    $0x62,%al
f0111662:	75 1b                	jne    f011167f <test_cut_paste_pages+0x7d0>
				(*ptr4) != 'y'|| (*ptr5) != 'c'|| (*ptr6) != 'z')
f0111664:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0111667:	8a 00                	mov    (%eax),%al
		ptr2 = (char*)0x1C00000;
		ptr3 = (char*)0x14007FF;
		ptr4 = (char*)0x1C007FF;
		ptr5 = (char*)0x1400FFF;
		ptr6 = (char*)0x1C00FFF;
		if ((*ptr1) != 'a' || (*ptr2) != 'x' || (*ptr3) != 'b' ||
f0111669:	3c 79                	cmp    $0x79,%al
f011166b:	75 12                	jne    f011167f <test_cut_paste_pages+0x7d0>
				(*ptr4) != 'y'|| (*ptr5) != 'c'|| (*ptr6) != 'z')
f011166d:	8b 45 98             	mov    -0x68(%ebp),%eax
f0111670:	8a 00                	mov    (%eax),%al
f0111672:	3c 63                	cmp    $0x63,%al
f0111674:	75 09                	jne    f011167f <test_cut_paste_pages+0x7d0>
f0111676:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0111679:	8a 00                	mov    (%eax),%al
f011167b:	3c 7a                	cmp    $0x7a,%al
f011167d:	74 21                	je     f01116a0 <test_cut_paste_pages+0x7f1>
		{
			warn("[EVAL] cut_paste_pages: Failed (content is not correct)\n");
f011167f:	83 ec 04             	sub    $0x4,%esp
f0111682:	68 5c 8a 13 f0       	push   $0xf0138a5c
f0111687:	68 14 02 00 00       	push   $0x214
f011168c:	68 7e 81 13 f0       	push   $0xf013817e
f0111691:	e8 9c ec fe ff       	call   f0100332 <_warn>
f0111696:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0111699:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		}
		if (correct) eval += 5 ;
f01116a0:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f01116a4:	74 04                	je     f01116aa <test_cut_paste_pages+0x7fb>
f01116a6:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f01116aa:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
	}

	ff1 = sys_calculate_free_frames();
f01116b1:	e8 08 ad ff ff       	call   f010c3be <sys_calculate_free_frames>
f01116b6:	89 45 b8             	mov    %eax,-0x48(%ebp)

	ret = cut_paste_pages(proc_directory, 0x1400000, 0x1BFF000, 3) ;
f01116b9:	6a 03                	push   $0x3
f01116bb:	68 00 f0 bf 01       	push   $0x1bff000
f01116c0:	68 00 00 40 01       	push   $0x1400000
f01116c5:	ff 75 d4             	pushl  -0x2c(%ebp)
f01116c8:	e8 dd 6b ff ff       	call   f01082aa <cut_paste_pages>
f01116cd:	83 c4 10             	add    $0x10,%esp
f01116d0:	89 45 b4             	mov    %eax,-0x4c(%ebp)

	ff2 = sys_calculate_free_frames();
f01116d3:	e8 e6 ac ff ff       	call   f010c3be <sys_calculate_free_frames>
f01116d8:	89 45 b0             	mov    %eax,-0x50(%ebp)

	if (ret != -1 || ff1 - ff2 != 0)
f01116db:	83 7d b4 ff          	cmpl   $0xffffffff,-0x4c(%ebp)
f01116df:	75 08                	jne    f01116e9 <test_cut_paste_pages+0x83a>
f01116e1:	8b 45 b8             	mov    -0x48(%ebp),%eax
f01116e4:	3b 45 b0             	cmp    -0x50(%ebp),%eax
f01116e7:	74 2b                	je     f0111714 <test_cut_paste_pages+0x865>
	{
		warn("[EVAL] cut_paste_pages: Failed (dest is exist... operation should be denied) ret=%d diff=%d\n", ret, ff1 - ff2);
f01116e9:	8b 45 b8             	mov    -0x48(%ebp),%eax
f01116ec:	2b 45 b0             	sub    -0x50(%ebp),%eax
f01116ef:	83 ec 0c             	sub    $0xc,%esp
f01116f2:	50                   	push   %eax
f01116f3:	ff 75 b4             	pushl  -0x4c(%ebp)
f01116f6:	68 fc 8a 13 f0       	push   $0xf0138afc
f01116fb:	68 23 02 00 00       	push   $0x223
f0111700:	68 7e 81 13 f0       	push   $0xf013817e
f0111705:	e8 28 ec fe ff       	call   f0100332 <_warn>
f011170a:	83 c4 20             	add    $0x20,%esp
		correct = 0;
f011170d:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
	}
	if (correct) eval += 10 ;
f0111714:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0111718:	74 04                	je     f011171e <test_cut_paste_pages+0x86f>
f011171a:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
	correct = 1 ;
f011171e:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
	chk_cntnt = 1;
f0111725:	c7 45 dc 01 00 00 00 	movl   $0x1,-0x24(%ebp)
	if (CB(proc_directory, 0x1400000, 0) != 1 || CB(proc_directory, 0x1401000, 0) != 1 || CB(proc_directory, 0x1402000, 0) != 1 ||
f011172c:	83 ec 04             	sub    $0x4,%esp
f011172f:	6a 00                	push   $0x0
f0111731:	68 00 00 40 01       	push   $0x1400000
f0111736:	ff 75 d4             	pushl  -0x2c(%ebp)
f0111739:	e8 94 3b 00 00       	call   f01152d2 <CB>
f011173e:	83 c4 10             	add    $0x10,%esp
f0111741:	83 f8 01             	cmp    $0x1,%eax
f0111744:	0f 85 80 00 00 00    	jne    f01117ca <test_cut_paste_pages+0x91b>
f011174a:	83 ec 04             	sub    $0x4,%esp
f011174d:	6a 00                	push   $0x0
f011174f:	68 00 10 40 01       	push   $0x1401000
f0111754:	ff 75 d4             	pushl  -0x2c(%ebp)
f0111757:	e8 76 3b 00 00       	call   f01152d2 <CB>
f011175c:	83 c4 10             	add    $0x10,%esp
f011175f:	83 f8 01             	cmp    $0x1,%eax
f0111762:	75 66                	jne    f01117ca <test_cut_paste_pages+0x91b>
f0111764:	83 ec 04             	sub    $0x4,%esp
f0111767:	6a 00                	push   $0x0
f0111769:	68 00 20 40 01       	push   $0x1402000
f011176e:	ff 75 d4             	pushl  -0x2c(%ebp)
f0111771:	e8 5c 3b 00 00       	call   f01152d2 <CB>
f0111776:	83 c4 10             	add    $0x10,%esp
f0111779:	83 f8 01             	cmp    $0x1,%eax
f011177c:	75 4c                	jne    f01117ca <test_cut_paste_pages+0x91b>
			CB(proc_directory, 0x1BFF000, 0) != 0 || CB(proc_directory, 0x1C00000, 0) != 1 || CB(proc_directory, 0x1C01000, 0) != 0)
f011177e:	83 ec 04             	sub    $0x4,%esp
f0111781:	6a 00                	push   $0x0
f0111783:	68 00 f0 bf 01       	push   $0x1bff000
f0111788:	ff 75 d4             	pushl  -0x2c(%ebp)
f011178b:	e8 42 3b 00 00       	call   f01152d2 <CB>
f0111790:	83 c4 10             	add    $0x10,%esp
		correct = 0;
	}
	if (correct) eval += 10 ;
	correct = 1 ;
	chk_cntnt = 1;
	if (CB(proc_directory, 0x1400000, 0) != 1 || CB(proc_directory, 0x1401000, 0) != 1 || CB(proc_directory, 0x1402000, 0) != 1 ||
f0111793:	85 c0                	test   %eax,%eax
f0111795:	75 33                	jne    f01117ca <test_cut_paste_pages+0x91b>
			CB(proc_directory, 0x1BFF000, 0) != 0 || CB(proc_directory, 0x1C00000, 0) != 1 || CB(proc_directory, 0x1C01000, 0) != 0)
f0111797:	83 ec 04             	sub    $0x4,%esp
f011179a:	6a 00                	push   $0x0
f011179c:	68 00 00 c0 01       	push   $0x1c00000
f01117a1:	ff 75 d4             	pushl  -0x2c(%ebp)
f01117a4:	e8 29 3b 00 00       	call   f01152d2 <CB>
f01117a9:	83 c4 10             	add    $0x10,%esp
f01117ac:	83 f8 01             	cmp    $0x1,%eax
f01117af:	75 19                	jne    f01117ca <test_cut_paste_pages+0x91b>
f01117b1:	83 ec 04             	sub    $0x4,%esp
f01117b4:	6a 00                	push   $0x0
f01117b6:	68 00 10 c0 01       	push   $0x1c01000
f01117bb:	ff 75 d4             	pushl  -0x2c(%ebp)
f01117be:	e8 0f 3b 00 00       	call   f01152d2 <CB>
f01117c3:	83 c4 10             	add    $0x10,%esp
f01117c6:	85 c0                	test   %eax,%eax
f01117c8:	74 28                	je     f01117f2 <test_cut_paste_pages+0x943>
	{
		warn("[EVAL] cut_paste_pages: Failed (problem in permissions)\n");
f01117ca:	83 ec 04             	sub    $0x4,%esp
f01117cd:	68 5c 8b 13 f0       	push   $0xf0138b5c
f01117d2:	68 2c 02 00 00       	push   $0x22c
f01117d7:	68 7e 81 13 f0       	push   $0xf013817e
f01117dc:	e8 51 eb fe ff       	call   f0100332 <_warn>
f01117e1:	83 c4 10             	add    $0x10,%esp
		correct = 0;
f01117e4:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		chk_cntnt = 0;
f01117eb:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
	}
	if (correct) eval += 5 ;
f01117f2:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f01117f6:	74 04                	je     f01117fc <test_cut_paste_pages+0x94d>
f01117f8:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
	correct = 1 ;
f01117fc:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

	if (chk_cntnt)
f0111803:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f0111807:	0f 84 99 00 00 00    	je     f01118a6 <test_cut_paste_pages+0x9f7>
	{
		ptr1 = (char*)0x1400000;
f011180d:	c7 45 c0 00 00 40 01 	movl   $0x1400000,-0x40(%ebp)
		ptr2 = (char*)0x1C00000;
f0111814:	c7 45 ac 00 00 c0 01 	movl   $0x1c00000,-0x54(%ebp)
		ptr3 = (char*)0x14007FF;
f011181b:	c7 45 a8 ff 07 40 01 	movl   $0x14007ff,-0x58(%ebp)
		ptr4 = (char*)0x1C007FF;
f0111822:	c7 45 9c ff 07 c0 01 	movl   $0x1c007ff,-0x64(%ebp)
		ptr5 = (char*)0x1400FFF;
f0111829:	c7 45 98 ff 0f 40 01 	movl   $0x1400fff,-0x68(%ebp)
		ptr6 = (char*)0x1C00FFF;
f0111830:	c7 45 94 ff 0f c0 01 	movl   $0x1c00fff,-0x6c(%ebp)
		if ((*ptr1) != 'a' || (*ptr2) != 'x' || (*ptr3) != 'b' ||
f0111837:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011183a:	8a 00                	mov    (%eax),%al
f011183c:	3c 61                	cmp    $0x61,%al
f011183e:	75 2d                	jne    f011186d <test_cut_paste_pages+0x9be>
f0111840:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0111843:	8a 00                	mov    (%eax),%al
f0111845:	3c 78                	cmp    $0x78,%al
f0111847:	75 24                	jne    f011186d <test_cut_paste_pages+0x9be>
f0111849:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011184c:	8a 00                	mov    (%eax),%al
f011184e:	3c 62                	cmp    $0x62,%al
f0111850:	75 1b                	jne    f011186d <test_cut_paste_pages+0x9be>
				(*ptr4) != 'y'|| (*ptr5) != 'c'|| (*ptr6) != 'z')
f0111852:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0111855:	8a 00                	mov    (%eax),%al
		ptr2 = (char*)0x1C00000;
		ptr3 = (char*)0x14007FF;
		ptr4 = (char*)0x1C007FF;
		ptr5 = (char*)0x1400FFF;
		ptr6 = (char*)0x1C00FFF;
		if ((*ptr1) != 'a' || (*ptr2) != 'x' || (*ptr3) != 'b' ||
f0111857:	3c 79                	cmp    $0x79,%al
f0111859:	75 12                	jne    f011186d <test_cut_paste_pages+0x9be>
				(*ptr4) != 'y'|| (*ptr5) != 'c'|| (*ptr6) != 'z')
f011185b:	8b 45 98             	mov    -0x68(%ebp),%eax
f011185e:	8a 00                	mov    (%eax),%al
f0111860:	3c 63                	cmp    $0x63,%al
f0111862:	75 09                	jne    f011186d <test_cut_paste_pages+0x9be>
f0111864:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0111867:	8a 00                	mov    (%eax),%al
f0111869:	3c 7a                	cmp    $0x7a,%al
f011186b:	74 28                	je     f0111895 <test_cut_paste_pages+0x9e6>
		{
			correct = 0;
f011186d:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
			chk_cntnt = 0;
f0111874:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
			warn("[EVAL] cut_paste_pages: Failed (content is not correct)\n");
f011187b:	83 ec 04             	sub    $0x4,%esp
f011187e:	68 5c 8a 13 f0       	push   $0xf0138a5c
f0111883:	68 40 02 00 00       	push   $0x240
f0111888:	68 7e 81 13 f0       	push   $0xf013817e
f011188d:	e8 a0 ea fe ff       	call   f0100332 <_warn>
f0111892:	83 c4 10             	add    $0x10,%esp
		}
		if (correct) eval += 5 ;
f0111895:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0111899:	74 04                	je     f011189f <test_cut_paste_pages+0x9f0>
f011189b:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f011189f:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
	}

	cprintf("CASE II: END\n") ;
f01118a6:	83 ec 0c             	sub    $0xc,%esp
f01118a9:	68 95 8b 13 f0       	push   $0xf0138b95
f01118ae:	e8 7a f3 fe ff       	call   f0100c2d <cprintf>
f01118b3:	83 c4 10             	add    $0x10,%esp

	cprintf("[EVAL] cut_paste_pages: FINISHED. Evaluation = %d\n", eval);
f01118b6:	83 ec 08             	sub    $0x8,%esp
f01118b9:	ff 75 e4             	pushl  -0x1c(%ebp)
f01118bc:	68 a4 8b 13 f0       	push   $0xf0138ba4
f01118c1:	e8 67 f3 fe ff       	call   f0100c2d <cprintf>
f01118c6:	83 c4 10             	add    $0x10,%esp
	if(eval == 100)
f01118c9:	83 7d e4 64          	cmpl   $0x64,-0x1c(%ebp)
f01118cd:	75 10                	jne    f01118df <test_cut_paste_pages+0xa30>
		cprintf("Congratulations!! test cut_paste_pages completed successfully.\n");
f01118cf:	83 ec 0c             	sub    $0xc,%esp
f01118d2:	68 d8 8b 13 f0       	push   $0xf0138bd8
f01118d7:	e8 51 f3 fe ff       	call   f0100c2d <cprintf>
f01118dc:	83 c4 10             	add    $0x10,%esp

	//return back to the kernel directory
	lcr3(phys_page_directory) ;
f01118df:	a1 e8 0e 6c f0       	mov    0xf06c0ee8,%eax
f01118e4:	89 45 d0             	mov    %eax,-0x30(%ebp)
f01118e7:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01118ea:	0f 22 d8             	mov    %eax,%cr3

	return 0;
f01118ed:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01118f2:	8d 65 f4             	lea    -0xc(%ebp),%esp
f01118f5:	5b                   	pop    %ebx
f01118f6:	5e                   	pop    %esi
f01118f7:	5f                   	pop    %edi
f01118f8:	5d                   	pop    %ebp
f01118f9:	c3                   	ret    

f01118fa <test_copy_paste_chunk>:

//===============================
// 2) TEST COPY-PASTE CHUNK:
//===============================
int test_copy_paste_chunk()
{
f01118fa:	55                   	push   %ebp
f01118fb:	89 e5                	mov    %esp,%ebp
f01118fd:	57                   	push   %edi
f01118fe:	56                   	push   %esi
f01118ff:	53                   	push   %ebx
f0111900:	81 ec ac 05 00 00    	sub    $0x5ac,%esp
	//Create a Temp. User Process
	char prog_name[50] = "fos_helloWorld";
f0111906:	8d 85 42 ff ff ff    	lea    -0xbe(%ebp),%eax
f011190c:	bb 18 8c 13 f0       	mov    $0xf0138c18,%ebx
f0111911:	ba 0f 00 00 00       	mov    $0xf,%edx
f0111916:	89 c7                	mov    %eax,%edi
f0111918:	89 de                	mov    %ebx,%esi
f011191a:	89 d1                	mov    %edx,%ecx
f011191c:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f011191e:	8d 95 51 ff ff ff    	lea    -0xaf(%ebp),%edx
f0111924:	b9 23 00 00 00       	mov    $0x23,%ecx
f0111929:	b0 00                	mov    $0x0,%al
f011192b:	89 d7                	mov    %edx,%edi
f011192d:	f3 aa                	rep stos %al,%es:(%edi)
	struct Env* env = env_create(prog_name, 20, 10, 0);
f011192f:	6a 00                	push   $0x0
f0111931:	6a 0a                	push   $0xa
f0111933:	6a 14                	push   $0x14
f0111935:	8d 85 42 ff ff ff    	lea    -0xbe(%ebp),%eax
f011193b:	50                   	push   %eax
f011193c:	e8 31 6d ff ff       	call   f0108672 <env_create>
f0111941:	83 c4 10             	add    $0x10,%esp
f0111944:	89 45 d8             	mov    %eax,-0x28(%ebp)
	uint32 *proc_directory = env->env_page_directory ;
f0111947:	8b 45 d8             	mov    -0x28(%ebp),%eax
f011194a:	8b 40 5c             	mov    0x5c(%eax),%eax
f011194d:	89 45 d4             	mov    %eax,-0x2c(%ebp)
	lcr3(env->env_cr3) ;
f0111950:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0111953:	8b 40 60             	mov    0x60(%eax),%eax
f0111956:	89 85 74 ff ff ff    	mov    %eax,-0x8c(%ebp)
f011195c:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f0111962:	0f 22 d8             	mov    %eax,%cr3
	char aup[20] = "aup " ;
f0111965:	c7 85 2e ff ff ff 61 	movl   $0x20707561,-0xd2(%ebp)
f011196c:	75 70 20 
f011196f:	c7 85 32 ff ff ff 00 	movl   $0x0,-0xce(%ebp)
f0111976:	00 00 00 
f0111979:	8d 95 36 ff ff ff    	lea    -0xca(%ebp),%edx
f011197f:	b9 03 00 00 00       	mov    $0x3,%ecx
f0111984:	b8 00 00 00 00       	mov    $0x0,%eax
f0111989:	89 d7                	mov    %edx,%edi
f011198b:	f3 ab                	rep stos %eax,%es:(%edi)
	char env_id[20] ; ltostr(env->env_id, env_id) ;
f011198d:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0111990:	8b 40 4c             	mov    0x4c(%eax),%eax
f0111993:	83 ec 08             	sub    $0x8,%esp
f0111996:	8d 95 1a ff ff ff    	lea    -0xe6(%ebp),%edx
f011199c:	52                   	push   %edx
f011199d:	50                   	push   %eax
f011199e:	e8 2e f2 01 00       	call   f0130bd1 <ltostr>
f01119a3:	83 c4 10             	add    $0x10,%esp
	char aup_cmd[50];
	strcconcat(aup, env_id, aup_cmd);
f01119a6:	83 ec 04             	sub    $0x4,%esp
f01119a9:	8d 85 e8 fe ff ff    	lea    -0x118(%ebp),%eax
f01119af:	50                   	push   %eax
f01119b0:	8d 85 1a ff ff ff    	lea    -0xe6(%ebp),%eax
f01119b6:	50                   	push   %eax
f01119b7:	8d 85 2e ff ff ff    	lea    -0xd2(%ebp),%eax
f01119bd:	50                   	push   %eax
f01119be:	e8 06 f3 01 00       	call   f0130cc9 <strcconcat>
f01119c3:	83 c4 10             	add    $0x10,%esp
	//===================================================

	ClearUserSpace(proc_directory);
f01119c6:	83 ec 0c             	sub    $0xc,%esp
f01119c9:	ff 75 d4             	pushl  -0x2c(%ebp)
f01119cc:	e8 3c 3e 00 00       	call   f011580d <ClearUserSpace>
f01119d1:	83 c4 10             	add    $0x10,%esp
	int numOfArgs = 0;
f01119d4:	c7 45 cc 00 00 00 00 	movl   $0x0,-0x34(%ebp)
	char *args[MAX_ARGUMENTS] ;
	uint32 res =0;
f01119db:	c7 45 c8 00 00 00 00 	movl   $0x0,-0x38(%ebp)
	uint32 eval = 0; int correct = 1 ;
f01119e2:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
f01119e9:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
	uint32 numOfFreeFramesBefore, numOfFreeFramesAfter ;
	char *ch1, *ch2, *ch3, *ch4, *ch5, *ch6, *ch7,*ch8, *ch9, *ch10, *ch11, *ch12 ;
	char tch[13];
	int kilo = 1024 ;
f01119f0:	c7 45 c4 00 04 00 00 	movl   $0x400,-0x3c(%ebp)
	int mega = 1024*1024 ;
f01119f7:	c7 45 c0 00 00 10 00 	movl   $0x100000,-0x40(%ebp)
	/*==================================================*/
	/*PART I: Destination page(s) exist & read only 20% */
	/*==================================================*/
	cprintf("\nCASE I: Destination page(s) exist & read only [20%]\n") ;
f01119fe:	83 ec 0c             	sub    $0xc,%esp
f0111a01:	68 4c 8c 13 f0       	push   $0xf0138c4c
f0111a06:	e8 22 f2 fe ff       	call   f0100c2d <cprintf>
f0111a0b:	83 c4 10             	add    $0x10,%esp
	{
		/*allocate page*/char c1[100] ;strcconcat(aup_cmd, " 0x0", c1); execute_command(c1);
f0111a0e:	83 ec 04             	sub    $0x4,%esp
f0111a11:	8d 85 4f fa ff ff    	lea    -0x5b1(%ebp),%eax
f0111a17:	50                   	push   %eax
f0111a18:	68 82 8c 13 f0       	push   $0xf0138c82
f0111a1d:	8d 85 e8 fe ff ff    	lea    -0x118(%ebp),%eax
f0111a23:	50                   	push   %eax
f0111a24:	e8 a0 f2 01 00       	call   f0130cc9 <strcconcat>
f0111a29:	83 c4 10             	add    $0x10,%esp
f0111a2c:	83 ec 0c             	sub    $0xc,%esp
f0111a2f:	8d 85 4f fa ff ff    	lea    -0x5b1(%ebp),%eax
f0111a35:	50                   	push   %eax
f0111a36:	e8 54 f2 fe ff       	call   f0100c8f <execute_command>
f0111a3b:	83 c4 10             	add    $0x10,%esp
		/*allocate another page ====*/ strcconcat(aup_cmd, " 0x1000", c1); execute_command(c1);
f0111a3e:	83 ec 04             	sub    $0x4,%esp
f0111a41:	8d 85 4f fa ff ff    	lea    -0x5b1(%ebp),%eax
f0111a47:	50                   	push   %eax
f0111a48:	68 87 8c 13 f0       	push   $0xf0138c87
f0111a4d:	8d 85 e8 fe ff ff    	lea    -0x118(%ebp),%eax
f0111a53:	50                   	push   %eax
f0111a54:	e8 70 f2 01 00       	call   f0130cc9 <strcconcat>
f0111a59:	83 c4 10             	add    $0x10,%esp
f0111a5c:	83 ec 0c             	sub    $0xc,%esp
f0111a5f:	8d 85 4f fa ff ff    	lea    -0x5b1(%ebp),%eax
f0111a65:	50                   	push   %eax
f0111a66:	e8 24 f2 fe ff       	call   f0100c8f <execute_command>
f0111a6b:	83 c4 10             	add    $0x10,%esp
		/*write on 1st page*/
		char c2[100] = "wum 0x000000 a";execute_command(c2);
f0111a6e:	8d 85 b3 fa ff ff    	lea    -0x54d(%ebp),%eax
f0111a74:	bb 8d 8f 13 f0       	mov    $0xf0138f8d,%ebx
f0111a79:	ba 0f 00 00 00       	mov    $0xf,%edx
f0111a7e:	89 c7                	mov    %eax,%edi
f0111a80:	89 de                	mov    %ebx,%esi
f0111a82:	89 d1                	mov    %edx,%ecx
f0111a84:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0111a86:	8d 95 c2 fa ff ff    	lea    -0x53e(%ebp),%edx
f0111a8c:	b9 55 00 00 00       	mov    $0x55,%ecx
f0111a91:	b0 00                	mov    $0x0,%al
f0111a93:	89 d7                	mov    %edx,%edi
f0111a95:	f3 aa                	rep stos %al,%es:(%edi)
f0111a97:	83 ec 0c             	sub    $0xc,%esp
f0111a9a:	8d 85 b3 fa ff ff    	lea    -0x54d(%ebp),%eax
f0111aa0:	50                   	push   %eax
f0111aa1:	e8 e9 f1 fe ff       	call   f0100c8f <execute_command>
f0111aa6:	83 c4 10             	add    $0x10,%esp
		char c3[100] = "wum 0x0007FF b";execute_command(c3);
f0111aa9:	8d 85 17 fb ff ff    	lea    -0x4e9(%ebp),%eax
f0111aaf:	bb f1 8f 13 f0       	mov    $0xf0138ff1,%ebx
f0111ab4:	ba 0f 00 00 00       	mov    $0xf,%edx
f0111ab9:	89 c7                	mov    %eax,%edi
f0111abb:	89 de                	mov    %ebx,%esi
f0111abd:	89 d1                	mov    %edx,%ecx
f0111abf:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0111ac1:	8d 95 26 fb ff ff    	lea    -0x4da(%ebp),%edx
f0111ac7:	b9 55 00 00 00       	mov    $0x55,%ecx
f0111acc:	b0 00                	mov    $0x0,%al
f0111ace:	89 d7                	mov    %edx,%edi
f0111ad0:	f3 aa                	rep stos %al,%es:(%edi)
f0111ad2:	83 ec 0c             	sub    $0xc,%esp
f0111ad5:	8d 85 17 fb ff ff    	lea    -0x4e9(%ebp),%eax
f0111adb:	50                   	push   %eax
f0111adc:	e8 ae f1 fe ff       	call   f0100c8f <execute_command>
f0111ae1:	83 c4 10             	add    $0x10,%esp
		char c4[100] = "wum 0x000FFF c";execute_command(c4);
f0111ae4:	8d 85 7b fb ff ff    	lea    -0x485(%ebp),%eax
f0111aea:	bb 55 90 13 f0       	mov    $0xf0139055,%ebx
f0111aef:	ba 0f 00 00 00       	mov    $0xf,%edx
f0111af4:	89 c7                	mov    %eax,%edi
f0111af6:	89 de                	mov    %ebx,%esi
f0111af8:	89 d1                	mov    %edx,%ecx
f0111afa:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0111afc:	8d 95 8a fb ff ff    	lea    -0x476(%ebp),%edx
f0111b02:	b9 55 00 00 00       	mov    $0x55,%ecx
f0111b07:	b0 00                	mov    $0x0,%al
f0111b09:	89 d7                	mov    %edx,%edi
f0111b0b:	f3 aa                	rep stos %al,%es:(%edi)
f0111b0d:	83 ec 0c             	sub    $0xc,%esp
f0111b10:	8d 85 7b fb ff ff    	lea    -0x485(%ebp),%eax
f0111b16:	50                   	push   %eax
f0111b17:	e8 73 f1 fe ff       	call   f0100c8f <execute_command>
f0111b1c:	83 c4 10             	add    $0x10,%esp
		/*write on 2nd page*/
		char c22[100] = "wum 0x001000 d";execute_command(c22);
f0111b1f:	8d 85 df fb ff ff    	lea    -0x421(%ebp),%eax
f0111b25:	bb b9 90 13 f0       	mov    $0xf01390b9,%ebx
f0111b2a:	ba 0f 00 00 00       	mov    $0xf,%edx
f0111b2f:	89 c7                	mov    %eax,%edi
f0111b31:	89 de                	mov    %ebx,%esi
f0111b33:	89 d1                	mov    %edx,%ecx
f0111b35:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0111b37:	8d 95 ee fb ff ff    	lea    -0x412(%ebp),%edx
f0111b3d:	b9 55 00 00 00       	mov    $0x55,%ecx
f0111b42:	b0 00                	mov    $0x0,%al
f0111b44:	89 d7                	mov    %edx,%edi
f0111b46:	f3 aa                	rep stos %al,%es:(%edi)
f0111b48:	83 ec 0c             	sub    $0xc,%esp
f0111b4b:	8d 85 df fb ff ff    	lea    -0x421(%ebp),%eax
f0111b51:	50                   	push   %eax
f0111b52:	e8 38 f1 fe ff       	call   f0100c8f <execute_command>
f0111b57:	83 c4 10             	add    $0x10,%esp
		char c23[100] = "wum 0x0017FF e";execute_command(c23);
f0111b5a:	8d 85 43 fc ff ff    	lea    -0x3bd(%ebp),%eax
f0111b60:	bb 1d 91 13 f0       	mov    $0xf013911d,%ebx
f0111b65:	ba 0f 00 00 00       	mov    $0xf,%edx
f0111b6a:	89 c7                	mov    %eax,%edi
f0111b6c:	89 de                	mov    %ebx,%esi
f0111b6e:	89 d1                	mov    %edx,%ecx
f0111b70:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0111b72:	8d 95 52 fc ff ff    	lea    -0x3ae(%ebp),%edx
f0111b78:	b9 55 00 00 00       	mov    $0x55,%ecx
f0111b7d:	b0 00                	mov    $0x0,%al
f0111b7f:	89 d7                	mov    %edx,%edi
f0111b81:	f3 aa                	rep stos %al,%es:(%edi)
f0111b83:	83 ec 0c             	sub    $0xc,%esp
f0111b86:	8d 85 43 fc ff ff    	lea    -0x3bd(%ebp),%eax
f0111b8c:	50                   	push   %eax
f0111b8d:	e8 fd f0 fe ff       	call   f0100c8f <execute_command>
f0111b92:	83 c4 10             	add    $0x10,%esp
		char c24[100] = "wum 0x001FFF f";execute_command(c24);
f0111b95:	8d 85 a7 fc ff ff    	lea    -0x359(%ebp),%eax
f0111b9b:	bb 81 91 13 f0       	mov    $0xf0139181,%ebx
f0111ba0:	ba 0f 00 00 00       	mov    $0xf,%edx
f0111ba5:	89 c7                	mov    %eax,%edi
f0111ba7:	89 de                	mov    %ebx,%esi
f0111ba9:	89 d1                	mov    %edx,%ecx
f0111bab:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0111bad:	8d 95 b6 fc ff ff    	lea    -0x34a(%ebp),%edx
f0111bb3:	b9 55 00 00 00       	mov    $0x55,%ecx
f0111bb8:	b0 00                	mov    $0x0,%al
f0111bba:	89 d7                	mov    %edx,%edi
f0111bbc:	f3 aa                	rep stos %al,%es:(%edi)
f0111bbe:	83 ec 0c             	sub    $0xc,%esp
f0111bc1:	8d 85 a7 fc ff ff    	lea    -0x359(%ebp),%eax
f0111bc7:	50                   	push   %eax
f0111bc8:	e8 c2 f0 fe ff       	call   f0100c8f <execute_command>
f0111bcd:	83 c4 10             	add    $0x10,%esp
		/*allocate page*/char c5[100] ;strcconcat(aup_cmd, " 0x100000", c5); execute_command(c5);
f0111bd0:	83 ec 04             	sub    $0x4,%esp
f0111bd3:	8d 85 0b fd ff ff    	lea    -0x2f5(%ebp),%eax
f0111bd9:	50                   	push   %eax
f0111bda:	68 8f 8c 13 f0       	push   $0xf0138c8f
f0111bdf:	8d 85 e8 fe ff ff    	lea    -0x118(%ebp),%eax
f0111be5:	50                   	push   %eax
f0111be6:	e8 de f0 01 00       	call   f0130cc9 <strcconcat>
f0111beb:	83 c4 10             	add    $0x10,%esp
f0111bee:	83 ec 0c             	sub    $0xc,%esp
f0111bf1:	8d 85 0b fd ff ff    	lea    -0x2f5(%ebp),%eax
f0111bf7:	50                   	push   %eax
f0111bf8:	e8 92 f0 fe ff       	call   f0100c8f <execute_command>
f0111bfd:	83 c4 10             	add    $0x10,%esp
		/*allocate another page ====*/ strcconcat(aup_cmd, " 0x101000 r", c5); execute_command(c5);
f0111c00:	83 ec 04             	sub    $0x4,%esp
f0111c03:	8d 85 0b fd ff ff    	lea    -0x2f5(%ebp),%eax
f0111c09:	50                   	push   %eax
f0111c0a:	68 99 8c 13 f0       	push   $0xf0138c99
f0111c0f:	8d 85 e8 fe ff ff    	lea    -0x118(%ebp),%eax
f0111c15:	50                   	push   %eax
f0111c16:	e8 ae f0 01 00       	call   f0130cc9 <strcconcat>
f0111c1b:	83 c4 10             	add    $0x10,%esp
f0111c1e:	83 ec 0c             	sub    $0xc,%esp
f0111c21:	8d 85 0b fd ff ff    	lea    -0x2f5(%ebp),%eax
f0111c27:	50                   	push   %eax
f0111c28:	e8 62 f0 fe ff       	call   f0100c8f <execute_command>
f0111c2d:	83 c4 10             	add    $0x10,%esp
		char c6[100] = "wum 0x100000 x";execute_command(c6);
f0111c30:	8d 85 6f fd ff ff    	lea    -0x291(%ebp),%eax
f0111c36:	bb e5 91 13 f0       	mov    $0xf01391e5,%ebx
f0111c3b:	ba 0f 00 00 00       	mov    $0xf,%edx
f0111c40:	89 c7                	mov    %eax,%edi
f0111c42:	89 de                	mov    %ebx,%esi
f0111c44:	89 d1                	mov    %edx,%ecx
f0111c46:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0111c48:	8d 95 7e fd ff ff    	lea    -0x282(%ebp),%edx
f0111c4e:	b9 55 00 00 00       	mov    $0x55,%ecx
f0111c53:	b0 00                	mov    $0x0,%al
f0111c55:	89 d7                	mov    %edx,%edi
f0111c57:	f3 aa                	rep stos %al,%es:(%edi)
f0111c59:	83 ec 0c             	sub    $0xc,%esp
f0111c5c:	8d 85 6f fd ff ff    	lea    -0x291(%ebp),%eax
f0111c62:	50                   	push   %eax
f0111c63:	e8 27 f0 fe ff       	call   f0100c8f <execute_command>
f0111c68:	83 c4 10             	add    $0x10,%esp
		char c7[100] = "wum 0x1007FF y";execute_command(c7);
f0111c6b:	8d 85 d3 fd ff ff    	lea    -0x22d(%ebp),%eax
f0111c71:	bb 49 92 13 f0       	mov    $0xf0139249,%ebx
f0111c76:	ba 0f 00 00 00       	mov    $0xf,%edx
f0111c7b:	89 c7                	mov    %eax,%edi
f0111c7d:	89 de                	mov    %ebx,%esi
f0111c7f:	89 d1                	mov    %edx,%ecx
f0111c81:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0111c83:	8d 95 e2 fd ff ff    	lea    -0x21e(%ebp),%edx
f0111c89:	b9 55 00 00 00       	mov    $0x55,%ecx
f0111c8e:	b0 00                	mov    $0x0,%al
f0111c90:	89 d7                	mov    %edx,%edi
f0111c92:	f3 aa                	rep stos %al,%es:(%edi)
f0111c94:	83 ec 0c             	sub    $0xc,%esp
f0111c97:	8d 85 d3 fd ff ff    	lea    -0x22d(%ebp),%eax
f0111c9d:	50                   	push   %eax
f0111c9e:	e8 ec ef fe ff       	call   f0100c8f <execute_command>
f0111ca3:	83 c4 10             	add    $0x10,%esp
		char c8[100] = "wum 0x100FFF z";execute_command(c8);
f0111ca6:	8d 85 37 fe ff ff    	lea    -0x1c9(%ebp),%eax
f0111cac:	bb ad 92 13 f0       	mov    $0xf01392ad,%ebx
f0111cb1:	ba 0f 00 00 00       	mov    $0xf,%edx
f0111cb6:	89 c7                	mov    %eax,%edi
f0111cb8:	89 de                	mov    %ebx,%esi
f0111cba:	89 d1                	mov    %edx,%ecx
f0111cbc:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0111cbe:	8d 95 46 fe ff ff    	lea    -0x1ba(%ebp),%edx
f0111cc4:	b9 55 00 00 00       	mov    $0x55,%ecx
f0111cc9:	b0 00                	mov    $0x0,%al
f0111ccb:	89 d7                	mov    %edx,%edi
f0111ccd:	f3 aa                	rep stos %al,%es:(%edi)
f0111ccf:	83 ec 0c             	sub    $0xc,%esp
f0111cd2:	8d 85 37 fe ff ff    	lea    -0x1c9(%ebp),%eax
f0111cd8:	50                   	push   %eax
f0111cd9:	e8 b1 ef fe ff       	call   f0100c8f <execute_command>
f0111cde:	83 c4 10             	add    $0x10,%esp

		ch1 = (char*)0x000000; ch2 = (char*)0x100000;
f0111ce1:	c7 45 bc 00 00 00 00 	movl   $0x0,-0x44(%ebp)
f0111ce8:	c7 45 b8 00 00 10 00 	movl   $0x100000,-0x48(%ebp)
		ch3 = (char*)0x0007FF; ch4 = (char*)0x1007FF;
f0111cef:	c7 45 b4 ff 07 00 00 	movl   $0x7ff,-0x4c(%ebp)
f0111cf6:	c7 45 b0 ff 07 10 00 	movl   $0x1007ff,-0x50(%ebp)
		ch5 = (char*)0x000FFF; ch6 = (char*)0x100FFF;
f0111cfd:	c7 45 ac ff 0f 00 00 	movl   $0xfff,-0x54(%ebp)
f0111d04:	c7 45 a8 ff 0f 10 00 	movl   $0x100fff,-0x58(%ebp)
		ch7 = (char*)0x001000; ch8 = (char*)0x101000;
f0111d0b:	c7 45 a4 00 10 00 00 	movl   $0x1000,-0x5c(%ebp)
f0111d12:	c7 45 a0 00 10 10 00 	movl   $0x101000,-0x60(%ebp)
		ch9 = (char*)0x0017FF; ch10= (char*)0x1017FF;
f0111d19:	c7 45 9c ff 17 00 00 	movl   $0x17ff,-0x64(%ebp)
f0111d20:	c7 45 98 ff 17 10 00 	movl   $0x1017ff,-0x68(%ebp)
		ch11= (char*)0x001FFF; ch12= (char*)0x101FFF;
f0111d27:	c7 45 94 ff 1f 00 00 	movl   $0x1fff,-0x6c(%ebp)
f0111d2e:	c7 45 90 ff 1f 10 00 	movl   $0x101fff,-0x70(%ebp)

		tch[8] = *ch8 ;tch[10] = *ch10 ;tch[12] = *ch12 ;
f0111d35:	8b 45 a0             	mov    -0x60(%ebp),%eax
f0111d38:	8a 00                	mov    (%eax),%al
f0111d3a:	88 85 a3 fe ff ff    	mov    %al,-0x15d(%ebp)
f0111d40:	8b 45 98             	mov    -0x68(%ebp),%eax
f0111d43:	8a 00                	mov    (%eax),%al
f0111d45:	88 85 a5 fe ff ff    	mov    %al,-0x15b(%ebp)
f0111d4b:	8b 45 90             	mov    -0x70(%ebp),%eax
f0111d4e:	8a 00                	mov    (%eax),%al
f0111d50:	88 85 a7 fe ff ff    	mov    %al,-0x159(%ebp)

		numOfFreeFramesBefore = sys_calculate_free_frames();
f0111d56:	e8 63 a6 ff ff       	call   f010c3be <sys_calculate_free_frames>
f0111d5b:	89 45 8c             	mov    %eax,-0x74(%ebp)

		int ret = copy_paste_chunk(proc_directory, 0x0, 0x100000, 6*kilo);
f0111d5e:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0111d61:	89 d0                	mov    %edx,%eax
f0111d63:	01 c0                	add    %eax,%eax
f0111d65:	01 d0                	add    %edx,%eax
f0111d67:	01 c0                	add    %eax,%eax
f0111d69:	50                   	push   %eax
f0111d6a:	68 00 00 10 00       	push   $0x100000
f0111d6f:	6a 00                	push   $0x0
f0111d71:	ff 75 d4             	pushl  -0x2c(%ebp)
f0111d74:	e8 af 66 ff ff       	call   f0108428 <copy_paste_chunk>
f0111d79:	83 c4 10             	add    $0x10,%esp
f0111d7c:	89 45 88             	mov    %eax,-0x78(%ebp)

		numOfFreeFramesAfter = sys_calculate_free_frames();
f0111d7f:	e8 3a a6 ff ff       	call   f010c3be <sys_calculate_free_frames>
f0111d84:	89 45 84             	mov    %eax,-0x7c(%ebp)

		correct = 1 ;
f0111d87:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
		if (ret != -1 || numOfFreeFramesBefore != numOfFreeFramesAfter)
f0111d8e:	83 7d 88 ff          	cmpl   $0xffffffff,-0x78(%ebp)
f0111d92:	75 08                	jne    f0111d9c <test_copy_paste_chunk+0x4a2>
f0111d94:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0111d97:	3b 45 84             	cmp    -0x7c(%ebp),%eax
f0111d9a:	74 2b                	je     f0111dc7 <test_copy_paste_chunk+0x4cd>
		{
			warn("[EVAL] copy_paste_chunk: Failed (dest is read-only... operation should be denied) ret=%d diff=%d\n", ret, numOfFreeFramesBefore - numOfFreeFramesAfter);
f0111d9c:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0111d9f:	2b 45 84             	sub    -0x7c(%ebp),%eax
f0111da2:	83 ec 0c             	sub    $0xc,%esp
f0111da5:	50                   	push   %eax
f0111da6:	ff 75 88             	pushl  -0x78(%ebp)
f0111da9:	68 a8 8c 13 f0       	push   $0xf0138ca8
f0111dae:	68 93 02 00 00       	push   $0x293
f0111db3:	68 7e 81 13 f0       	push   $0xf013817e
f0111db8:	e8 75 e5 fe ff       	call   f0100332 <_warn>
f0111dbd:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0111dc0:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		}
		if (correct) eval += 10 ;
f0111dc7:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0111dcb:	74 04                	je     f0111dd1 <test_copy_paste_chunk+0x4d7>
f0111dcd:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f0111dd1:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

		if (*ch1 != 'a' || *ch2 != 'x' || *ch3 != 'b' || *ch4 != 'y' || *ch5 != 'c' || *ch6 != 'z'
f0111dd8:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0111ddb:	8a 00                	mov    (%eax),%al
f0111ddd:	3c 61                	cmp    $0x61,%al
f0111ddf:	75 75                	jne    f0111e56 <test_copy_paste_chunk+0x55c>
f0111de1:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0111de4:	8a 00                	mov    (%eax),%al
f0111de6:	3c 78                	cmp    $0x78,%al
f0111de8:	75 6c                	jne    f0111e56 <test_copy_paste_chunk+0x55c>
f0111dea:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0111ded:	8a 00                	mov    (%eax),%al
f0111def:	3c 62                	cmp    $0x62,%al
f0111df1:	75 63                	jne    f0111e56 <test_copy_paste_chunk+0x55c>
f0111df3:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0111df6:	8a 00                	mov    (%eax),%al
f0111df8:	3c 79                	cmp    $0x79,%al
f0111dfa:	75 5a                	jne    f0111e56 <test_copy_paste_chunk+0x55c>
f0111dfc:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0111dff:	8a 00                	mov    (%eax),%al
f0111e01:	3c 63                	cmp    $0x63,%al
f0111e03:	75 51                	jne    f0111e56 <test_copy_paste_chunk+0x55c>
f0111e05:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0111e08:	8a 00                	mov    (%eax),%al
f0111e0a:	3c 7a                	cmp    $0x7a,%al
f0111e0c:	75 48                	jne    f0111e56 <test_copy_paste_chunk+0x55c>
				||  *ch7 != 'd' || *ch8 != tch[8] || *ch9 != 'e' || *ch10 != tch[10] || *ch11!= 'f' || *ch12 != tch[12])
f0111e0e:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0111e11:	8a 00                	mov    (%eax),%al
f0111e13:	3c 64                	cmp    $0x64,%al
f0111e15:	75 3f                	jne    f0111e56 <test_copy_paste_chunk+0x55c>
f0111e17:	8b 45 a0             	mov    -0x60(%ebp),%eax
f0111e1a:	8a 10                	mov    (%eax),%dl
f0111e1c:	8a 85 a3 fe ff ff    	mov    -0x15d(%ebp),%al
f0111e22:	38 c2                	cmp    %al,%dl
f0111e24:	75 30                	jne    f0111e56 <test_copy_paste_chunk+0x55c>
f0111e26:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0111e29:	8a 00                	mov    (%eax),%al
f0111e2b:	3c 65                	cmp    $0x65,%al
f0111e2d:	75 27                	jne    f0111e56 <test_copy_paste_chunk+0x55c>
f0111e2f:	8b 45 98             	mov    -0x68(%ebp),%eax
f0111e32:	8a 10                	mov    (%eax),%dl
f0111e34:	8a 85 a5 fe ff ff    	mov    -0x15b(%ebp),%al
f0111e3a:	38 c2                	cmp    %al,%dl
f0111e3c:	75 18                	jne    f0111e56 <test_copy_paste_chunk+0x55c>
f0111e3e:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0111e41:	8a 00                	mov    (%eax),%al
f0111e43:	3c 66                	cmp    $0x66,%al
f0111e45:	75 0f                	jne    f0111e56 <test_copy_paste_chunk+0x55c>
f0111e47:	8b 45 90             	mov    -0x70(%ebp),%eax
f0111e4a:	8a 10                	mov    (%eax),%dl
f0111e4c:	8a 85 a7 fe ff ff    	mov    -0x159(%ebp),%al
f0111e52:	38 c2                	cmp    %al,%dl
f0111e54:	74 21                	je     f0111e77 <test_copy_paste_chunk+0x57d>
		{
			warn("[EVAL] copy_paste_chunk: Failed (content is not correct)\n");
f0111e56:	83 ec 04             	sub    $0x4,%esp
f0111e59:	68 0c 8d 13 f0       	push   $0xf0138d0c
f0111e5e:	68 9c 02 00 00       	push   $0x29c
f0111e63:	68 7e 81 13 f0       	push   $0xf013817e
f0111e68:	e8 c5 e4 fe ff       	call   f0100332 <_warn>
f0111e6d:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0111e70:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		}
		if (correct) eval += 10 ;
f0111e77:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0111e7b:	74 04                	je     f0111e81 <test_copy_paste_chunk+0x587>
f0111e7d:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f0111e81:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

	}
	cprintf("\nCASE I: END \n") ;
f0111e88:	83 ec 0c             	sub    $0xc,%esp
f0111e8b:	68 46 8d 13 f0       	push   $0xf0138d46
f0111e90:	e8 98 ed fe ff       	call   f0100c2d <cprintf>
f0111e95:	83 c4 10             	add    $0x10,%esp

	/*==================================================*/
	/*PART II: Destination page(s) exist & writable 40% */
	/*==================================================*/
	cprintf("\nCASE II: Destination page(s) exist & writable [40%]\n") ;
f0111e98:	83 ec 0c             	sub    $0xc,%esp
f0111e9b:	68 58 8d 13 f0       	push   $0xf0138d58
f0111ea0:	e8 88 ed fe ff       	call   f0100c2d <cprintf>
f0111ea5:	83 c4 10             	add    $0x10,%esp
	{
		/*allocate page*/char c1[100] ;strcconcat(aup_cmd, " 0x200000", c1); execute_command(c1);
f0111ea8:	83 ec 04             	sub    $0x4,%esp
f0111eab:	8d 85 4f fa ff ff    	lea    -0x5b1(%ebp),%eax
f0111eb1:	50                   	push   %eax
f0111eb2:	68 8e 8d 13 f0       	push   $0xf0138d8e
f0111eb7:	8d 85 e8 fe ff ff    	lea    -0x118(%ebp),%eax
f0111ebd:	50                   	push   %eax
f0111ebe:	e8 06 ee 01 00       	call   f0130cc9 <strcconcat>
f0111ec3:	83 c4 10             	add    $0x10,%esp
f0111ec6:	83 ec 0c             	sub    $0xc,%esp
f0111ec9:	8d 85 4f fa ff ff    	lea    -0x5b1(%ebp),%eax
f0111ecf:	50                   	push   %eax
f0111ed0:	e8 ba ed fe ff       	call   f0100c8f <execute_command>
f0111ed5:	83 c4 10             	add    $0x10,%esp
		/*allocate another page ====*/ strcconcat(aup_cmd, " 0x201000", c1); execute_command(c1);
f0111ed8:	83 ec 04             	sub    $0x4,%esp
f0111edb:	8d 85 4f fa ff ff    	lea    -0x5b1(%ebp),%eax
f0111ee1:	50                   	push   %eax
f0111ee2:	68 98 8d 13 f0       	push   $0xf0138d98
f0111ee7:	8d 85 e8 fe ff ff    	lea    -0x118(%ebp),%eax
f0111eed:	50                   	push   %eax
f0111eee:	e8 d6 ed 01 00       	call   f0130cc9 <strcconcat>
f0111ef3:	83 c4 10             	add    $0x10,%esp
f0111ef6:	83 ec 0c             	sub    $0xc,%esp
f0111ef9:	8d 85 4f fa ff ff    	lea    -0x5b1(%ebp),%eax
f0111eff:	50                   	push   %eax
f0111f00:	e8 8a ed fe ff       	call   f0100c8f <execute_command>
f0111f05:	83 c4 10             	add    $0x10,%esp
		/*write on 1st page*/
		char c2[100] = "wum 0x200000 a";execute_command(c2);
f0111f08:	8d 85 b3 fa ff ff    	lea    -0x54d(%ebp),%eax
f0111f0e:	bb 11 93 13 f0       	mov    $0xf0139311,%ebx
f0111f13:	ba 0f 00 00 00       	mov    $0xf,%edx
f0111f18:	89 c7                	mov    %eax,%edi
f0111f1a:	89 de                	mov    %ebx,%esi
f0111f1c:	89 d1                	mov    %edx,%ecx
f0111f1e:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0111f20:	8d 95 c2 fa ff ff    	lea    -0x53e(%ebp),%edx
f0111f26:	b9 55 00 00 00       	mov    $0x55,%ecx
f0111f2b:	b0 00                	mov    $0x0,%al
f0111f2d:	89 d7                	mov    %edx,%edi
f0111f2f:	f3 aa                	rep stos %al,%es:(%edi)
f0111f31:	83 ec 0c             	sub    $0xc,%esp
f0111f34:	8d 85 b3 fa ff ff    	lea    -0x54d(%ebp),%eax
f0111f3a:	50                   	push   %eax
f0111f3b:	e8 4f ed fe ff       	call   f0100c8f <execute_command>
f0111f40:	83 c4 10             	add    $0x10,%esp
		char c3[100] = "wum 0x2007FF b";execute_command(c3);
f0111f43:	8d 85 17 fb ff ff    	lea    -0x4e9(%ebp),%eax
f0111f49:	bb 75 93 13 f0       	mov    $0xf0139375,%ebx
f0111f4e:	ba 0f 00 00 00       	mov    $0xf,%edx
f0111f53:	89 c7                	mov    %eax,%edi
f0111f55:	89 de                	mov    %ebx,%esi
f0111f57:	89 d1                	mov    %edx,%ecx
f0111f59:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0111f5b:	8d 95 26 fb ff ff    	lea    -0x4da(%ebp),%edx
f0111f61:	b9 55 00 00 00       	mov    $0x55,%ecx
f0111f66:	b0 00                	mov    $0x0,%al
f0111f68:	89 d7                	mov    %edx,%edi
f0111f6a:	f3 aa                	rep stos %al,%es:(%edi)
f0111f6c:	83 ec 0c             	sub    $0xc,%esp
f0111f6f:	8d 85 17 fb ff ff    	lea    -0x4e9(%ebp),%eax
f0111f75:	50                   	push   %eax
f0111f76:	e8 14 ed fe ff       	call   f0100c8f <execute_command>
f0111f7b:	83 c4 10             	add    $0x10,%esp
		char c4[100] = "wum 0x200FFF c";execute_command(c4);
f0111f7e:	8d 85 7b fb ff ff    	lea    -0x485(%ebp),%eax
f0111f84:	bb d9 93 13 f0       	mov    $0xf01393d9,%ebx
f0111f89:	ba 0f 00 00 00       	mov    $0xf,%edx
f0111f8e:	89 c7                	mov    %eax,%edi
f0111f90:	89 de                	mov    %ebx,%esi
f0111f92:	89 d1                	mov    %edx,%ecx
f0111f94:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0111f96:	8d 95 8a fb ff ff    	lea    -0x476(%ebp),%edx
f0111f9c:	b9 55 00 00 00       	mov    $0x55,%ecx
f0111fa1:	b0 00                	mov    $0x0,%al
f0111fa3:	89 d7                	mov    %edx,%edi
f0111fa5:	f3 aa                	rep stos %al,%es:(%edi)
f0111fa7:	83 ec 0c             	sub    $0xc,%esp
f0111faa:	8d 85 7b fb ff ff    	lea    -0x485(%ebp),%eax
f0111fb0:	50                   	push   %eax
f0111fb1:	e8 d9 ec fe ff       	call   f0100c8f <execute_command>
f0111fb6:	83 c4 10             	add    $0x10,%esp
		/*write on 2nd page*/
		char c22[100] = "wum 0x201000 d";execute_command(c22);
f0111fb9:	8d 85 df fb ff ff    	lea    -0x421(%ebp),%eax
f0111fbf:	bb 3d 94 13 f0       	mov    $0xf013943d,%ebx
f0111fc4:	ba 0f 00 00 00       	mov    $0xf,%edx
f0111fc9:	89 c7                	mov    %eax,%edi
f0111fcb:	89 de                	mov    %ebx,%esi
f0111fcd:	89 d1                	mov    %edx,%ecx
f0111fcf:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0111fd1:	8d 95 ee fb ff ff    	lea    -0x412(%ebp),%edx
f0111fd7:	b9 55 00 00 00       	mov    $0x55,%ecx
f0111fdc:	b0 00                	mov    $0x0,%al
f0111fde:	89 d7                	mov    %edx,%edi
f0111fe0:	f3 aa                	rep stos %al,%es:(%edi)
f0111fe2:	83 ec 0c             	sub    $0xc,%esp
f0111fe5:	8d 85 df fb ff ff    	lea    -0x421(%ebp),%eax
f0111feb:	50                   	push   %eax
f0111fec:	e8 9e ec fe ff       	call   f0100c8f <execute_command>
f0111ff1:	83 c4 10             	add    $0x10,%esp
		char c23[100] = "wum 0x2017FF e";execute_command(c23);
f0111ff4:	8d 85 43 fc ff ff    	lea    -0x3bd(%ebp),%eax
f0111ffa:	bb a1 94 13 f0       	mov    $0xf01394a1,%ebx
f0111fff:	ba 0f 00 00 00       	mov    $0xf,%edx
f0112004:	89 c7                	mov    %eax,%edi
f0112006:	89 de                	mov    %ebx,%esi
f0112008:	89 d1                	mov    %edx,%ecx
f011200a:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f011200c:	8d 95 52 fc ff ff    	lea    -0x3ae(%ebp),%edx
f0112012:	b9 55 00 00 00       	mov    $0x55,%ecx
f0112017:	b0 00                	mov    $0x0,%al
f0112019:	89 d7                	mov    %edx,%edi
f011201b:	f3 aa                	rep stos %al,%es:(%edi)
f011201d:	83 ec 0c             	sub    $0xc,%esp
f0112020:	8d 85 43 fc ff ff    	lea    -0x3bd(%ebp),%eax
f0112026:	50                   	push   %eax
f0112027:	e8 63 ec fe ff       	call   f0100c8f <execute_command>
f011202c:	83 c4 10             	add    $0x10,%esp
		char c24[100] = "wum 0x201FFF f";execute_command(c24);
f011202f:	8d 85 a7 fc ff ff    	lea    -0x359(%ebp),%eax
f0112035:	bb 05 95 13 f0       	mov    $0xf0139505,%ebx
f011203a:	ba 0f 00 00 00       	mov    $0xf,%edx
f011203f:	89 c7                	mov    %eax,%edi
f0112041:	89 de                	mov    %ebx,%esi
f0112043:	89 d1                	mov    %edx,%ecx
f0112045:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0112047:	8d 95 b6 fc ff ff    	lea    -0x34a(%ebp),%edx
f011204d:	b9 55 00 00 00       	mov    $0x55,%ecx
f0112052:	b0 00                	mov    $0x0,%al
f0112054:	89 d7                	mov    %edx,%edi
f0112056:	f3 aa                	rep stos %al,%es:(%edi)
f0112058:	83 ec 0c             	sub    $0xc,%esp
f011205b:	8d 85 a7 fc ff ff    	lea    -0x359(%ebp),%eax
f0112061:	50                   	push   %eax
f0112062:	e8 28 ec fe ff       	call   f0100c8f <execute_command>
f0112067:	83 c4 10             	add    $0x10,%esp
		/*allocate page*/char c5[100] ;strcconcat(aup_cmd, " 0x400000", c5); execute_command(c5);
f011206a:	83 ec 04             	sub    $0x4,%esp
f011206d:	8d 85 0b fd ff ff    	lea    -0x2f5(%ebp),%eax
f0112073:	50                   	push   %eax
f0112074:	68 a2 8d 13 f0       	push   $0xf0138da2
f0112079:	8d 85 e8 fe ff ff    	lea    -0x118(%ebp),%eax
f011207f:	50                   	push   %eax
f0112080:	e8 44 ec 01 00       	call   f0130cc9 <strcconcat>
f0112085:	83 c4 10             	add    $0x10,%esp
f0112088:	83 ec 0c             	sub    $0xc,%esp
f011208b:	8d 85 0b fd ff ff    	lea    -0x2f5(%ebp),%eax
f0112091:	50                   	push   %eax
f0112092:	e8 f8 eb fe ff       	call   f0100c8f <execute_command>
f0112097:	83 c4 10             	add    $0x10,%esp
		/*allocate another page ====*/ strcconcat(aup_cmd, " 0x401000", c5); execute_command(c5);
f011209a:	83 ec 04             	sub    $0x4,%esp
f011209d:	8d 85 0b fd ff ff    	lea    -0x2f5(%ebp),%eax
f01120a3:	50                   	push   %eax
f01120a4:	68 ac 8d 13 f0       	push   $0xf0138dac
f01120a9:	8d 85 e8 fe ff ff    	lea    -0x118(%ebp),%eax
f01120af:	50                   	push   %eax
f01120b0:	e8 14 ec 01 00       	call   f0130cc9 <strcconcat>
f01120b5:	83 c4 10             	add    $0x10,%esp
f01120b8:	83 ec 0c             	sub    $0xc,%esp
f01120bb:	8d 85 0b fd ff ff    	lea    -0x2f5(%ebp),%eax
f01120c1:	50                   	push   %eax
f01120c2:	e8 c8 eb fe ff       	call   f0100c8f <execute_command>
f01120c7:	83 c4 10             	add    $0x10,%esp
		char c6[100] = "wum 0x400000 x";execute_command(c6);
f01120ca:	8d 85 6f fd ff ff    	lea    -0x291(%ebp),%eax
f01120d0:	bb 69 95 13 f0       	mov    $0xf0139569,%ebx
f01120d5:	ba 0f 00 00 00       	mov    $0xf,%edx
f01120da:	89 c7                	mov    %eax,%edi
f01120dc:	89 de                	mov    %ebx,%esi
f01120de:	89 d1                	mov    %edx,%ecx
f01120e0:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f01120e2:	8d 95 7e fd ff ff    	lea    -0x282(%ebp),%edx
f01120e8:	b9 55 00 00 00       	mov    $0x55,%ecx
f01120ed:	b0 00                	mov    $0x0,%al
f01120ef:	89 d7                	mov    %edx,%edi
f01120f1:	f3 aa                	rep stos %al,%es:(%edi)
f01120f3:	83 ec 0c             	sub    $0xc,%esp
f01120f6:	8d 85 6f fd ff ff    	lea    -0x291(%ebp),%eax
f01120fc:	50                   	push   %eax
f01120fd:	e8 8d eb fe ff       	call   f0100c8f <execute_command>
f0112102:	83 c4 10             	add    $0x10,%esp
		char c7[100] = "wum 0x4007FF y";execute_command(c7);
f0112105:	8d 85 d3 fd ff ff    	lea    -0x22d(%ebp),%eax
f011210b:	bb cd 95 13 f0       	mov    $0xf01395cd,%ebx
f0112110:	ba 0f 00 00 00       	mov    $0xf,%edx
f0112115:	89 c7                	mov    %eax,%edi
f0112117:	89 de                	mov    %ebx,%esi
f0112119:	89 d1                	mov    %edx,%ecx
f011211b:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f011211d:	8d 95 e2 fd ff ff    	lea    -0x21e(%ebp),%edx
f0112123:	b9 55 00 00 00       	mov    $0x55,%ecx
f0112128:	b0 00                	mov    $0x0,%al
f011212a:	89 d7                	mov    %edx,%edi
f011212c:	f3 aa                	rep stos %al,%es:(%edi)
f011212e:	83 ec 0c             	sub    $0xc,%esp
f0112131:	8d 85 d3 fd ff ff    	lea    -0x22d(%ebp),%eax
f0112137:	50                   	push   %eax
f0112138:	e8 52 eb fe ff       	call   f0100c8f <execute_command>
f011213d:	83 c4 10             	add    $0x10,%esp
		char c8[100] = "wum 0x400FFF z";execute_command(c8);
f0112140:	8d 85 37 fe ff ff    	lea    -0x1c9(%ebp),%eax
f0112146:	bb 31 96 13 f0       	mov    $0xf0139631,%ebx
f011214b:	ba 0f 00 00 00       	mov    $0xf,%edx
f0112150:	89 c7                	mov    %eax,%edi
f0112152:	89 de                	mov    %ebx,%esi
f0112154:	89 d1                	mov    %edx,%ecx
f0112156:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0112158:	8d 95 46 fe ff ff    	lea    -0x1ba(%ebp),%edx
f011215e:	b9 55 00 00 00       	mov    $0x55,%ecx
f0112163:	b0 00                	mov    $0x0,%al
f0112165:	89 d7                	mov    %edx,%edi
f0112167:	f3 aa                	rep stos %al,%es:(%edi)
f0112169:	83 ec 0c             	sub    $0xc,%esp
f011216c:	8d 85 37 fe ff ff    	lea    -0x1c9(%ebp),%eax
f0112172:	50                   	push   %eax
f0112173:	e8 17 eb fe ff       	call   f0100c8f <execute_command>
f0112178:	83 c4 10             	add    $0x10,%esp

		//Test1
		ch1 = (char*)0x200000; ch2 = (char*)0x400000;
f011217b:	c7 45 bc 00 00 20 00 	movl   $0x200000,-0x44(%ebp)
f0112182:	c7 45 b8 00 00 40 00 	movl   $0x400000,-0x48(%ebp)
		ch3 = (char*)0x2007FF; ch4 = (char*)0x4007FF;
f0112189:	c7 45 b4 ff 07 20 00 	movl   $0x2007ff,-0x4c(%ebp)
f0112190:	c7 45 b0 ff 07 40 00 	movl   $0x4007ff,-0x50(%ebp)
		ch5 = (char*)0x200FFF; ch6 = (char*)0x400FFF;
f0112197:	c7 45 ac ff 0f 20 00 	movl   $0x200fff,-0x54(%ebp)
f011219e:	c7 45 a8 ff 0f 40 00 	movl   $0x400fff,-0x58(%ebp)
		ch7 = (char*)0x201000; ch8 = (char*)0x401000;
f01121a5:	c7 45 a4 00 10 20 00 	movl   $0x201000,-0x5c(%ebp)
f01121ac:	c7 45 a0 00 10 40 00 	movl   $0x401000,-0x60(%ebp)
		ch9 = (char*)0x2017FF; ch10= (char*)0x4017FF;
f01121b3:	c7 45 9c ff 17 20 00 	movl   $0x2017ff,-0x64(%ebp)
f01121ba:	c7 45 98 ff 17 40 00 	movl   $0x4017ff,-0x68(%ebp)
		ch11= (char*)0x201FFF; ch12= (char*)0x401FFF;
f01121c1:	c7 45 94 ff 1f 20 00 	movl   $0x201fff,-0x6c(%ebp)
f01121c8:	c7 45 90 ff 1f 40 00 	movl   $0x401fff,-0x70(%ebp)

		tch[12] = *ch12 ;
f01121cf:	8b 45 90             	mov    -0x70(%ebp),%eax
f01121d2:	8a 00                	mov    (%eax),%al
f01121d4:	88 85 a7 fe ff ff    	mov    %al,-0x159(%ebp)
		numOfFreeFramesBefore = sys_calculate_free_frames();
f01121da:	e8 df a1 ff ff       	call   f010c3be <sys_calculate_free_frames>
f01121df:	89 45 8c             	mov    %eax,-0x74(%ebp)

		int ret = copy_paste_chunk(proc_directory, 0x200000, 0x400000, 6*kilo);
f01121e2:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f01121e5:	89 d0                	mov    %edx,%eax
f01121e7:	01 c0                	add    %eax,%eax
f01121e9:	01 d0                	add    %edx,%eax
f01121eb:	01 c0                	add    %eax,%eax
f01121ed:	50                   	push   %eax
f01121ee:	68 00 00 40 00       	push   $0x400000
f01121f3:	68 00 00 20 00       	push   $0x200000
f01121f8:	ff 75 d4             	pushl  -0x2c(%ebp)
f01121fb:	e8 28 62 ff ff       	call   f0108428 <copy_paste_chunk>
f0112200:	83 c4 10             	add    $0x10,%esp
f0112203:	89 45 80             	mov    %eax,-0x80(%ebp)

		numOfFreeFramesAfter = sys_calculate_free_frames();
f0112206:	e8 b3 a1 ff ff       	call   f010c3be <sys_calculate_free_frames>
f011220b:	89 45 84             	mov    %eax,-0x7c(%ebp)

		correct = 1 ;
f011220e:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
		if (ret != 0 || numOfFreeFramesBefore != numOfFreeFramesAfter)
f0112215:	83 7d 80 00          	cmpl   $0x0,-0x80(%ebp)
f0112219:	75 08                	jne    f0112223 <test_copy_paste_chunk+0x929>
f011221b:	8b 45 8c             	mov    -0x74(%ebp),%eax
f011221e:	3b 45 84             	cmp    -0x7c(%ebp),%eax
f0112221:	74 2b                	je     f011224e <test_copy_paste_chunk+0x954>
		{
			warn("[EVAL] copy_paste_chunk: Failed (# allocated frames is not correct) ret=%d diff=%d\n", ret, numOfFreeFramesBefore - numOfFreeFramesAfter);
f0112223:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0112226:	2b 45 84             	sub    -0x7c(%ebp),%eax
f0112229:	83 ec 0c             	sub    $0xc,%esp
f011222c:	50                   	push   %eax
f011222d:	ff 75 80             	pushl  -0x80(%ebp)
f0112230:	68 b8 8d 13 f0       	push   $0xf0138db8
f0112235:	68 cc 02 00 00       	push   $0x2cc
f011223a:	68 7e 81 13 f0       	push   $0xf013817e
f011223f:	e8 ee e0 fe ff       	call   f0100332 <_warn>
f0112244:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0112247:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		}
		if (correct) eval += 5 ;
f011224e:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0112252:	74 04                	je     f0112258 <test_copy_paste_chunk+0x95e>
f0112254:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0112258:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

		int chkcnt = 1;
f011225f:	c7 85 7c ff ff ff 01 	movl   $0x1,-0x84(%ebp)
f0112266:	00 00 00 
		if (CCP(proc_directory, 0x200000, 0x400000, 2*PAGE_SIZE, 1, 0x007, 0x007, 0x007, 0x007, CHK_COPY_PASTE) != 1)
f0112269:	83 ec 08             	sub    $0x8,%esp
f011226c:	6a 01                	push   $0x1
f011226e:	6a 07                	push   $0x7
f0112270:	6a 07                	push   $0x7
f0112272:	6a 07                	push   $0x7
f0112274:	6a 07                	push   $0x7
f0112276:	6a 01                	push   $0x1
f0112278:	68 00 20 00 00       	push   $0x2000
f011227d:	68 00 00 40 00       	push   $0x400000
f0112282:	68 00 00 20 00       	push   $0x200000
f0112287:	ff 75 d4             	pushl  -0x2c(%ebp)
f011228a:	e8 b2 35 00 00       	call   f0115841 <CCP>
f011228f:	83 c4 30             	add    $0x30,%esp
f0112292:	83 f8 01             	cmp    $0x1,%eax
f0112295:	74 2b                	je     f01122c2 <test_copy_paste_chunk+0x9c8>
		{
			warn("[EVAL] copy_paste_chunk: Failed (problem in permissions and/or references)\n");
f0112297:	83 ec 04             	sub    $0x4,%esp
f011229a:	68 0c 8e 13 f0       	push   $0xf0138e0c
f011229f:	68 d5 02 00 00       	push   $0x2d5
f01122a4:	68 7e 81 13 f0       	push   $0xf013817e
f01122a9:	e8 84 e0 fe ff       	call   f0100332 <_warn>
f01122ae:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f01122b1:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
			chkcnt = 0;
f01122b8:	c7 85 7c ff ff ff 00 	movl   $0x0,-0x84(%ebp)
f01122bf:	00 00 00 
		}
		if (correct) eval += 5 ;
f01122c2:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f01122c6:	74 04                	je     f01122cc <test_copy_paste_chunk+0x9d2>
f01122c8:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f01122cc:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

		*ch3 = 'y' ;	// wum 0x2007FF y
f01122d3:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01122d6:	c6 00 79             	movb   $0x79,(%eax)
		*ch6 = 'z' ;	// wum 0x400FFF z
f01122d9:	8b 45 a8             	mov    -0x58(%ebp),%eax
f01122dc:	c6 00 7a             	movb   $0x7a,(%eax)
		*ch7 = 'w' ;	// wum 0x201000 w
f01122df:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f01122e2:	c6 00 77             	movb   $0x77,(%eax)

		if (*ch1 != 'a' || *ch2 != 'a' || *ch3 != 'y' || *ch4 != 'b' || *ch5 != 'c' || *ch6 != 'z'
f01122e5:	8b 45 bc             	mov    -0x44(%ebp),%eax
f01122e8:	8a 00                	mov    (%eax),%al
f01122ea:	3c 61                	cmp    $0x61,%al
f01122ec:	75 69                	jne    f0112357 <test_copy_paste_chunk+0xa5d>
f01122ee:	8b 45 b8             	mov    -0x48(%ebp),%eax
f01122f1:	8a 00                	mov    (%eax),%al
f01122f3:	3c 61                	cmp    $0x61,%al
f01122f5:	75 60                	jne    f0112357 <test_copy_paste_chunk+0xa5d>
f01122f7:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01122fa:	8a 00                	mov    (%eax),%al
f01122fc:	3c 79                	cmp    $0x79,%al
f01122fe:	75 57                	jne    f0112357 <test_copy_paste_chunk+0xa5d>
f0112300:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0112303:	8a 00                	mov    (%eax),%al
f0112305:	3c 62                	cmp    $0x62,%al
f0112307:	75 4e                	jne    f0112357 <test_copy_paste_chunk+0xa5d>
f0112309:	8b 45 ac             	mov    -0x54(%ebp),%eax
f011230c:	8a 00                	mov    (%eax),%al
f011230e:	3c 63                	cmp    $0x63,%al
f0112310:	75 45                	jne    f0112357 <test_copy_paste_chunk+0xa5d>
f0112312:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0112315:	8a 00                	mov    (%eax),%al
f0112317:	3c 7a                	cmp    $0x7a,%al
f0112319:	75 3c                	jne    f0112357 <test_copy_paste_chunk+0xa5d>
				||  *ch7 != 'w' || *ch8 != 'd' || *ch9 != 'e' || *ch10!= 'e' || *ch11!= 'f' || *ch12 != tch[12])
f011231b:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f011231e:	8a 00                	mov    (%eax),%al
f0112320:	3c 77                	cmp    $0x77,%al
f0112322:	75 33                	jne    f0112357 <test_copy_paste_chunk+0xa5d>
f0112324:	8b 45 a0             	mov    -0x60(%ebp),%eax
f0112327:	8a 00                	mov    (%eax),%al
f0112329:	3c 64                	cmp    $0x64,%al
f011232b:	75 2a                	jne    f0112357 <test_copy_paste_chunk+0xa5d>
f011232d:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0112330:	8a 00                	mov    (%eax),%al
f0112332:	3c 65                	cmp    $0x65,%al
f0112334:	75 21                	jne    f0112357 <test_copy_paste_chunk+0xa5d>
f0112336:	8b 45 98             	mov    -0x68(%ebp),%eax
f0112339:	8a 00                	mov    (%eax),%al
f011233b:	3c 65                	cmp    $0x65,%al
f011233d:	75 18                	jne    f0112357 <test_copy_paste_chunk+0xa5d>
f011233f:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0112342:	8a 00                	mov    (%eax),%al
f0112344:	3c 66                	cmp    $0x66,%al
f0112346:	75 0f                	jne    f0112357 <test_copy_paste_chunk+0xa5d>
f0112348:	8b 45 90             	mov    -0x70(%ebp),%eax
f011234b:	8a 10                	mov    (%eax),%dl
f011234d:	8a 85 a7 fe ff ff    	mov    -0x159(%ebp),%al
f0112353:	38 c2                	cmp    %al,%dl
f0112355:	74 21                	je     f0112378 <test_copy_paste_chunk+0xa7e>
		{
			warn("[EVAL] copy_paste_chunk: Failed (content is not correct)\n");
f0112357:	83 ec 04             	sub    $0x4,%esp
f011235a:	68 0c 8d 13 f0       	push   $0xf0138d0c
f011235f:	68 e3 02 00 00       	push   $0x2e3
f0112364:	68 7e 81 13 f0       	push   $0xf013817e
f0112369:	e8 c4 df fe ff       	call   f0100332 <_warn>
f011236e:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0112371:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		}
		if (correct) eval += 10 ;
f0112378:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f011237c:	74 04                	je     f0112382 <test_copy_paste_chunk+0xa88>
f011237e:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f0112382:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

		//Test2
		*ch10 = 'x';	// wum 0x4017FF y
f0112389:	8b 45 98             	mov    -0x68(%ebp),%eax
f011238c:	c6 00 78             	movb   $0x78,(%eax)
		numOfFreeFramesBefore = sys_calculate_free_frames();
f011238f:	e8 2a a0 ff ff       	call   f010c3be <sys_calculate_free_frames>
f0112394:	89 45 8c             	mov    %eax,-0x74(%ebp)

		ret = copy_paste_chunk(proc_directory, 0x400800, 0x200800, 3*kilo);
f0112397:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f011239a:	89 c2                	mov    %eax,%edx
f011239c:	01 d2                	add    %edx,%edx
f011239e:	01 d0                	add    %edx,%eax
f01123a0:	50                   	push   %eax
f01123a1:	68 00 08 20 00       	push   $0x200800
f01123a6:	68 00 08 40 00       	push   $0x400800
f01123ab:	ff 75 d4             	pushl  -0x2c(%ebp)
f01123ae:	e8 75 60 ff ff       	call   f0108428 <copy_paste_chunk>
f01123b3:	83 c4 10             	add    $0x10,%esp
f01123b6:	89 45 80             	mov    %eax,-0x80(%ebp)

		numOfFreeFramesAfter = sys_calculate_free_frames();
f01123b9:	e8 00 a0 ff ff       	call   f010c3be <sys_calculate_free_frames>
f01123be:	89 45 84             	mov    %eax,-0x7c(%ebp)

		if (ret != 0 || numOfFreeFramesBefore != numOfFreeFramesAfter)
f01123c1:	83 7d 80 00          	cmpl   $0x0,-0x80(%ebp)
f01123c5:	75 08                	jne    f01123cf <test_copy_paste_chunk+0xad5>
f01123c7:	8b 45 8c             	mov    -0x74(%ebp),%eax
f01123ca:	3b 45 84             	cmp    -0x7c(%ebp),%eax
f01123cd:	74 2b                	je     f01123fa <test_copy_paste_chunk+0xb00>
		{
			warn("[EVAL] copy_paste_chunk: Failed (# allocated frames is not correct) ret=%d diff=%d\n", ret, numOfFreeFramesBefore - numOfFreeFramesAfter);
f01123cf:	8b 45 8c             	mov    -0x74(%ebp),%eax
f01123d2:	2b 45 84             	sub    -0x7c(%ebp),%eax
f01123d5:	83 ec 0c             	sub    $0xc,%esp
f01123d8:	50                   	push   %eax
f01123d9:	ff 75 80             	pushl  -0x80(%ebp)
f01123dc:	68 b8 8d 13 f0       	push   $0xf0138db8
f01123e1:	68 f3 02 00 00       	push   $0x2f3
f01123e6:	68 7e 81 13 f0       	push   $0xf013817e
f01123eb:	e8 42 df fe ff       	call   f0100332 <_warn>
f01123f0:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f01123f3:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		}
		if (correct) eval += 5 ;
f01123fa:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f01123fe:	74 04                	je     f0112404 <test_copy_paste_chunk+0xb0a>
f0112400:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0112404:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

		if (CCP(proc_directory, 0x400000, 0x200000, 2*PAGE_SIZE, 1, 0x007, 0x007, 0x007, 0x007, CHK_COPY_PASTE) != 1)
f011240b:	83 ec 08             	sub    $0x8,%esp
f011240e:	6a 01                	push   $0x1
f0112410:	6a 07                	push   $0x7
f0112412:	6a 07                	push   $0x7
f0112414:	6a 07                	push   $0x7
f0112416:	6a 07                	push   $0x7
f0112418:	6a 01                	push   $0x1
f011241a:	68 00 20 00 00       	push   $0x2000
f011241f:	68 00 00 20 00       	push   $0x200000
f0112424:	68 00 00 40 00       	push   $0x400000
f0112429:	ff 75 d4             	pushl  -0x2c(%ebp)
f011242c:	e8 10 34 00 00       	call   f0115841 <CCP>
f0112431:	83 c4 30             	add    $0x30,%esp
f0112434:	83 f8 01             	cmp    $0x1,%eax
f0112437:	74 21                	je     f011245a <test_copy_paste_chunk+0xb60>
		{
			warn("[EVAL] copy_paste_chunk: Failed (problem in permissions and/or references\n");
f0112439:	83 ec 04             	sub    $0x4,%esp
f011243c:	68 58 8e 13 f0       	push   $0xf0138e58
f0112441:	68 fb 02 00 00       	push   $0x2fb
f0112446:	68 7e 81 13 f0       	push   $0xf013817e
f011244b:	e8 e2 de fe ff       	call   f0100332 <_warn>
f0112450:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0112453:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		}
		if (correct) eval += 5 ;
f011245a:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f011245e:	74 04                	je     f0112464 <test_copy_paste_chunk+0xb6a>
f0112460:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0112464:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

		if (*ch1 != 'a' || *ch2 != 'a' || *ch3 != 'y' || *ch4 != 'b' || *ch5 != 'z' || *ch6 != 'z' ||
f011246b:	8b 45 bc             	mov    -0x44(%ebp),%eax
f011246e:	8a 00                	mov    (%eax),%al
f0112470:	3c 61                	cmp    $0x61,%al
f0112472:	75 69                	jne    f01124dd <test_copy_paste_chunk+0xbe3>
f0112474:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0112477:	8a 00                	mov    (%eax),%al
f0112479:	3c 61                	cmp    $0x61,%al
f011247b:	75 60                	jne    f01124dd <test_copy_paste_chunk+0xbe3>
f011247d:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0112480:	8a 00                	mov    (%eax),%al
f0112482:	3c 79                	cmp    $0x79,%al
f0112484:	75 57                	jne    f01124dd <test_copy_paste_chunk+0xbe3>
f0112486:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0112489:	8a 00                	mov    (%eax),%al
f011248b:	3c 62                	cmp    $0x62,%al
f011248d:	75 4e                	jne    f01124dd <test_copy_paste_chunk+0xbe3>
f011248f:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0112492:	8a 00                	mov    (%eax),%al
f0112494:	3c 7a                	cmp    $0x7a,%al
f0112496:	75 45                	jne    f01124dd <test_copy_paste_chunk+0xbe3>
f0112498:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011249b:	8a 00                	mov    (%eax),%al
f011249d:	3c 7a                	cmp    $0x7a,%al
f011249f:	75 3c                	jne    f01124dd <test_copy_paste_chunk+0xbe3>
				*ch7 != 'd' || *ch8 != 'd' || *ch9 != 'e' || *ch10!= 'x' || *ch11!= 'f'  || *ch12 != tch[12])
f01124a1:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f01124a4:	8a 00                	mov    (%eax),%al
			correct = 0;
		}
		if (correct) eval += 5 ;
		correct = 1 ;

		if (*ch1 != 'a' || *ch2 != 'a' || *ch3 != 'y' || *ch4 != 'b' || *ch5 != 'z' || *ch6 != 'z' ||
f01124a6:	3c 64                	cmp    $0x64,%al
f01124a8:	75 33                	jne    f01124dd <test_copy_paste_chunk+0xbe3>
				*ch7 != 'd' || *ch8 != 'd' || *ch9 != 'e' || *ch10!= 'x' || *ch11!= 'f'  || *ch12 != tch[12])
f01124aa:	8b 45 a0             	mov    -0x60(%ebp),%eax
f01124ad:	8a 00                	mov    (%eax),%al
f01124af:	3c 64                	cmp    $0x64,%al
f01124b1:	75 2a                	jne    f01124dd <test_copy_paste_chunk+0xbe3>
f01124b3:	8b 45 9c             	mov    -0x64(%ebp),%eax
f01124b6:	8a 00                	mov    (%eax),%al
f01124b8:	3c 65                	cmp    $0x65,%al
f01124ba:	75 21                	jne    f01124dd <test_copy_paste_chunk+0xbe3>
f01124bc:	8b 45 98             	mov    -0x68(%ebp),%eax
f01124bf:	8a 00                	mov    (%eax),%al
f01124c1:	3c 78                	cmp    $0x78,%al
f01124c3:	75 18                	jne    f01124dd <test_copy_paste_chunk+0xbe3>
f01124c5:	8b 45 94             	mov    -0x6c(%ebp),%eax
f01124c8:	8a 00                	mov    (%eax),%al
f01124ca:	3c 66                	cmp    $0x66,%al
f01124cc:	75 0f                	jne    f01124dd <test_copy_paste_chunk+0xbe3>
f01124ce:	8b 45 90             	mov    -0x70(%ebp),%eax
f01124d1:	8a 10                	mov    (%eax),%dl
f01124d3:	8a 85 a7 fe ff ff    	mov    -0x159(%ebp),%al
f01124d9:	38 c2                	cmp    %al,%dl
f01124db:	74 21                	je     f01124fe <test_copy_paste_chunk+0xc04>
		{
			warn("[EVAL] copy_paste_chunk: Failed (content is not correct)\n");
f01124dd:	83 ec 04             	sub    $0x4,%esp
f01124e0:	68 0c 8d 13 f0       	push   $0xf0138d0c
f01124e5:	68 04 03 00 00       	push   $0x304
f01124ea:	68 7e 81 13 f0       	push   $0xf013817e
f01124ef:	e8 3e de fe ff       	call   f0100332 <_warn>
f01124f4:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f01124f7:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		}
		if (correct) eval += 10 ;
f01124fe:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0112502:	74 04                	je     f0112508 <test_copy_paste_chunk+0xc0e>
f0112504:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f0112508:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

	}
	cprintf("\nCASE II: END\n") ;
f011250f:	83 ec 0c             	sub    $0xc,%esp
f0112512:	68 a3 8e 13 f0       	push   $0xf0138ea3
f0112517:	e8 11 e7 fe ff       	call   f0100c2d <cprintf>
f011251c:	83 c4 10             	add    $0x10,%esp

	/*================================================*/
	/*PART III: Destination page(s) doesn't exist 40% */
	/*================================================*/
	cprintf("\nCASE III: Destination page(s) doesn't exist [40%]\n") ;
f011251f:	83 ec 0c             	sub    $0xc,%esp
f0112522:	68 b4 8e 13 f0       	push   $0xf0138eb4
f0112527:	e8 01 e7 fe ff       	call   f0100c2d <cprintf>
f011252c:	83 c4 10             	add    $0x10,%esp
	{
		/*allocate page*/char c1[100] ;strcconcat(aup_cmd, " 0x800000", c1); execute_command(c1);
f011252f:	83 ec 04             	sub    $0x4,%esp
f0112532:	8d 85 0b fd ff ff    	lea    -0x2f5(%ebp),%eax
f0112538:	50                   	push   %eax
f0112539:	68 e8 8e 13 f0       	push   $0xf0138ee8
f011253e:	8d 85 e8 fe ff ff    	lea    -0x118(%ebp),%eax
f0112544:	50                   	push   %eax
f0112545:	e8 7f e7 01 00       	call   f0130cc9 <strcconcat>
f011254a:	83 c4 10             	add    $0x10,%esp
f011254d:	83 ec 0c             	sub    $0xc,%esp
f0112550:	8d 85 0b fd ff ff    	lea    -0x2f5(%ebp),%eax
f0112556:	50                   	push   %eax
f0112557:	e8 33 e7 fe ff       	call   f0100c8f <execute_command>
f011255c:	83 c4 10             	add    $0x10,%esp
		/*allocate another page ====*/ strcconcat(aup_cmd, " 0x801000", c1); execute_command(c1);
f011255f:	83 ec 04             	sub    $0x4,%esp
f0112562:	8d 85 0b fd ff ff    	lea    -0x2f5(%ebp),%eax
f0112568:	50                   	push   %eax
f0112569:	68 f2 8e 13 f0       	push   $0xf0138ef2
f011256e:	8d 85 e8 fe ff ff    	lea    -0x118(%ebp),%eax
f0112574:	50                   	push   %eax
f0112575:	e8 4f e7 01 00       	call   f0130cc9 <strcconcat>
f011257a:	83 c4 10             	add    $0x10,%esp
f011257d:	83 ec 0c             	sub    $0xc,%esp
f0112580:	8d 85 0b fd ff ff    	lea    -0x2f5(%ebp),%eax
f0112586:	50                   	push   %eax
f0112587:	e8 03 e7 fe ff       	call   f0100c8f <execute_command>
f011258c:	83 c4 10             	add    $0x10,%esp
		/*allocate another page ====*/ strcconcat(aup_cmd, " 0x802000", c1); execute_command(c1);
f011258f:	83 ec 04             	sub    $0x4,%esp
f0112592:	8d 85 0b fd ff ff    	lea    -0x2f5(%ebp),%eax
f0112598:	50                   	push   %eax
f0112599:	68 fc 8e 13 f0       	push   $0xf0138efc
f011259e:	8d 85 e8 fe ff ff    	lea    -0x118(%ebp),%eax
f01125a4:	50                   	push   %eax
f01125a5:	e8 1f e7 01 00       	call   f0130cc9 <strcconcat>
f01125aa:	83 c4 10             	add    $0x10,%esp
f01125ad:	83 ec 0c             	sub    $0xc,%esp
f01125b0:	8d 85 0b fd ff ff    	lea    -0x2f5(%ebp),%eax
f01125b6:	50                   	push   %eax
f01125b7:	e8 d3 e6 fe ff       	call   f0100c8f <execute_command>
f01125bc:	83 c4 10             	add    $0x10,%esp
		char c14[100] = "wum 0x800000 a"; execute_command(c14);
f01125bf:	8d 85 6f fd ff ff    	lea    -0x291(%ebp),%eax
f01125c5:	bb 95 96 13 f0       	mov    $0xf0139695,%ebx
f01125ca:	ba 0f 00 00 00       	mov    $0xf,%edx
f01125cf:	89 c7                	mov    %eax,%edi
f01125d1:	89 de                	mov    %ebx,%esi
f01125d3:	89 d1                	mov    %edx,%ecx
f01125d5:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f01125d7:	8d 95 7e fd ff ff    	lea    -0x282(%ebp),%edx
f01125dd:	b9 55 00 00 00       	mov    $0x55,%ecx
f01125e2:	b0 00                	mov    $0x0,%al
f01125e4:	89 d7                	mov    %edx,%edi
f01125e6:	f3 aa                	rep stos %al,%es:(%edi)
f01125e8:	83 ec 0c             	sub    $0xc,%esp
f01125eb:	8d 85 6f fd ff ff    	lea    -0x291(%ebp),%eax
f01125f1:	50                   	push   %eax
f01125f2:	e8 98 e6 fe ff       	call   f0100c8f <execute_command>
f01125f7:	83 c4 10             	add    $0x10,%esp
		char c15[100] = "wum 0x8017FF b"; execute_command(c15);
f01125fa:	8d 85 d3 fd ff ff    	lea    -0x22d(%ebp),%eax
f0112600:	bb f9 96 13 f0       	mov    $0xf01396f9,%ebx
f0112605:	ba 0f 00 00 00       	mov    $0xf,%edx
f011260a:	89 c7                	mov    %eax,%edi
f011260c:	89 de                	mov    %ebx,%esi
f011260e:	89 d1                	mov    %edx,%ecx
f0112610:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0112612:	8d 95 e2 fd ff ff    	lea    -0x21e(%ebp),%edx
f0112618:	b9 55 00 00 00       	mov    $0x55,%ecx
f011261d:	b0 00                	mov    $0x0,%al
f011261f:	89 d7                	mov    %edx,%edi
f0112621:	f3 aa                	rep stos %al,%es:(%edi)
f0112623:	83 ec 0c             	sub    $0xc,%esp
f0112626:	8d 85 d3 fd ff ff    	lea    -0x22d(%ebp),%eax
f011262c:	50                   	push   %eax
f011262d:	e8 5d e6 fe ff       	call   f0100c8f <execute_command>
f0112632:	83 c4 10             	add    $0x10,%esp
		char c16[100] = "wum 0x802FFF c"; execute_command(c16);
f0112635:	8d 85 37 fe ff ff    	lea    -0x1c9(%ebp),%eax
f011263b:	bb 5d 97 13 f0       	mov    $0xf013975d,%ebx
f0112640:	ba 0f 00 00 00       	mov    $0xf,%edx
f0112645:	89 c7                	mov    %eax,%edi
f0112647:	89 de                	mov    %ebx,%esi
f0112649:	89 d1                	mov    %edx,%ecx
f011264b:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f011264d:	8d 95 46 fe ff ff    	lea    -0x1ba(%ebp),%edx
f0112653:	b9 55 00 00 00       	mov    $0x55,%ecx
f0112658:	b0 00                	mov    $0x0,%al
f011265a:	89 d7                	mov    %edx,%edi
f011265c:	f3 aa                	rep stos %al,%es:(%edi)
f011265e:	83 ec 0c             	sub    $0xc,%esp
f0112661:	8d 85 37 fe ff ff    	lea    -0x1c9(%ebp),%eax
f0112667:	50                   	push   %eax
f0112668:	e8 22 e6 fe ff       	call   f0100c8f <execute_command>
f011266d:	83 c4 10             	add    $0x10,%esp

		//Test3
		numOfFreeFramesBefore = sys_calculate_free_frames();
f0112670:	e8 49 9d ff ff       	call   f010c3be <sys_calculate_free_frames>
f0112675:	89 45 8c             	mov    %eax,-0x74(%ebp)

		int ret = copy_paste_chunk(proc_directory, 0x800000, 0x900000, 12*kilo);
f0112678:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f011267b:	89 d0                	mov    %edx,%eax
f011267d:	01 c0                	add    %eax,%eax
f011267f:	01 d0                	add    %edx,%eax
f0112681:	c1 e0 02             	shl    $0x2,%eax
f0112684:	50                   	push   %eax
f0112685:	68 00 00 90 00       	push   $0x900000
f011268a:	68 00 00 80 00       	push   $0x800000
f011268f:	ff 75 d4             	pushl  -0x2c(%ebp)
f0112692:	e8 91 5d ff ff       	call   f0108428 <copy_paste_chunk>
f0112697:	83 c4 10             	add    $0x10,%esp
f011269a:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)

		numOfFreeFramesAfter = sys_calculate_free_frames();
f01126a0:	e8 19 9d ff ff       	call   f010c3be <sys_calculate_free_frames>
f01126a5:	89 45 84             	mov    %eax,-0x7c(%ebp)

		if (ret != 0 || (numOfFreeFramesBefore - numOfFreeFramesAfter) != 3)
f01126a8:	83 bd 78 ff ff ff 00 	cmpl   $0x0,-0x88(%ebp)
f01126af:	75 0b                	jne    f01126bc <test_copy_paste_chunk+0xdc2>
f01126b1:	8b 45 8c             	mov    -0x74(%ebp),%eax
f01126b4:	2b 45 84             	sub    -0x7c(%ebp),%eax
f01126b7:	83 f8 03             	cmp    $0x3,%eax
f01126ba:	74 2e                	je     f01126ea <test_copy_paste_chunk+0xdf0>
		{
			warn("[EVAL] copy_paste_chunk: Failed (# allocated frames is not correct) ret=%d diff=%d\n", ret, numOfFreeFramesBefore - numOfFreeFramesAfter);
f01126bc:	8b 45 8c             	mov    -0x74(%ebp),%eax
f01126bf:	2b 45 84             	sub    -0x7c(%ebp),%eax
f01126c2:	83 ec 0c             	sub    $0xc,%esp
f01126c5:	50                   	push   %eax
f01126c6:	ff b5 78 ff ff ff    	pushl  -0x88(%ebp)
f01126cc:	68 b8 8d 13 f0       	push   $0xf0138db8
f01126d1:	68 22 03 00 00       	push   $0x322
f01126d6:	68 7e 81 13 f0       	push   $0xf013817e
f01126db:	e8 52 dc fe ff       	call   f0100332 <_warn>
f01126e0:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f01126e3:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		}
		if (correct) eval += 5 ;
f01126ea:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f01126ee:	74 04                	je     f01126f4 <test_copy_paste_chunk+0xdfa>
f01126f0:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f01126f4:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

		int chkcnt = 1 ;
f01126fb:	c7 45 dc 01 00 00 00 	movl   $0x1,-0x24(%ebp)
		if (CCP(proc_directory, 0x800000, 0x900000, 3*PAGE_SIZE, 1, 0x007, 0x007, 0x007, 0x007, CHK_COPY_PASTE) != 1)
f0112702:	83 ec 08             	sub    $0x8,%esp
f0112705:	6a 01                	push   $0x1
f0112707:	6a 07                	push   $0x7
f0112709:	6a 07                	push   $0x7
f011270b:	6a 07                	push   $0x7
f011270d:	6a 07                	push   $0x7
f011270f:	6a 01                	push   $0x1
f0112711:	68 00 30 00 00       	push   $0x3000
f0112716:	68 00 00 90 00       	push   $0x900000
f011271b:	68 00 00 80 00       	push   $0x800000
f0112720:	ff 75 d4             	pushl  -0x2c(%ebp)
f0112723:	e8 19 31 00 00       	call   f0115841 <CCP>
f0112728:	83 c4 30             	add    $0x30,%esp
f011272b:	83 f8 01             	cmp    $0x1,%eax
f011272e:	74 28                	je     f0112758 <test_copy_paste_chunk+0xe5e>
		{
			warn("[EVAL] copy_paste_chunk: Failed (problem in permissions and/or references\n");
f0112730:	83 ec 04             	sub    $0x4,%esp
f0112733:	68 58 8e 13 f0       	push   $0xf0138e58
f0112738:	68 2b 03 00 00       	push   $0x32b
f011273d:	68 7e 81 13 f0       	push   $0xf013817e
f0112742:	e8 eb db fe ff       	call   f0100332 <_warn>
f0112747:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f011274a:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
			chkcnt = 0 ;
f0112751:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
		}
		if (correct) eval += 5 ;
f0112758:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f011275c:	74 04                	je     f0112762 <test_copy_paste_chunk+0xe68>
f011275e:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0112762:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

		if (chkcnt)
f0112769:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f011276d:	0f 84 9e 00 00 00    	je     f0112811 <test_copy_paste_chunk+0xf17>
		{
			ch1 = (char*)0x800000; ch2 = (char*)0x900000;
f0112773:	c7 45 bc 00 00 80 00 	movl   $0x800000,-0x44(%ebp)
f011277a:	c7 45 b8 00 00 90 00 	movl   $0x900000,-0x48(%ebp)
			ch3 = (char*)0x8017FF; ch4 = (char*)0x9017FF;
f0112781:	c7 45 b4 ff 17 80 00 	movl   $0x8017ff,-0x4c(%ebp)
f0112788:	c7 45 b0 ff 17 90 00 	movl   $0x9017ff,-0x50(%ebp)
			ch5 = (char*)0x802FFF; ch6 = (char*)0x902FFF;
f011278f:	c7 45 ac ff 2f 80 00 	movl   $0x802fff,-0x54(%ebp)
f0112796:	c7 45 a8 ff 2f 90 00 	movl   $0x902fff,-0x58(%ebp)

			*ch3 = 'y';	//wum 0x8017FF y
f011279d:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01127a0:	c6 00 79             	movb   $0x79,(%eax)
			*ch6 = 'z';	//wum 0x902FFF z
f01127a3:	8b 45 a8             	mov    -0x58(%ebp),%eax
f01127a6:	c6 00 7a             	movb   $0x7a,(%eax)

			if (*ch1 != 'a' || *ch2 != 'a' || *ch3 != 'y' || *ch4 != 'b' || *ch5 != 'c' || *ch6 != 'z')
f01127a9:	8b 45 bc             	mov    -0x44(%ebp),%eax
f01127ac:	8a 00                	mov    (%eax),%al
f01127ae:	3c 61                	cmp    $0x61,%al
f01127b0:	75 2d                	jne    f01127df <test_copy_paste_chunk+0xee5>
f01127b2:	8b 45 b8             	mov    -0x48(%ebp),%eax
f01127b5:	8a 00                	mov    (%eax),%al
f01127b7:	3c 61                	cmp    $0x61,%al
f01127b9:	75 24                	jne    f01127df <test_copy_paste_chunk+0xee5>
f01127bb:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01127be:	8a 00                	mov    (%eax),%al
f01127c0:	3c 79                	cmp    $0x79,%al
f01127c2:	75 1b                	jne    f01127df <test_copy_paste_chunk+0xee5>
f01127c4:	8b 45 b0             	mov    -0x50(%ebp),%eax
f01127c7:	8a 00                	mov    (%eax),%al
f01127c9:	3c 62                	cmp    $0x62,%al
f01127cb:	75 12                	jne    f01127df <test_copy_paste_chunk+0xee5>
f01127cd:	8b 45 ac             	mov    -0x54(%ebp),%eax
f01127d0:	8a 00                	mov    (%eax),%al
f01127d2:	3c 63                	cmp    $0x63,%al
f01127d4:	75 09                	jne    f01127df <test_copy_paste_chunk+0xee5>
f01127d6:	8b 45 a8             	mov    -0x58(%ebp),%eax
f01127d9:	8a 00                	mov    (%eax),%al
f01127db:	3c 7a                	cmp    $0x7a,%al
f01127dd:	74 21                	je     f0112800 <test_copy_paste_chunk+0xf06>
			{
				warn("[EVAL] copy_paste_chunk: Failed (content is not correct)\n");
f01127df:	83 ec 04             	sub    $0x4,%esp
f01127e2:	68 0c 8d 13 f0       	push   $0xf0138d0c
f01127e7:	68 3d 03 00 00       	push   $0x33d
f01127ec:	68 7e 81 13 f0       	push   $0xf013817e
f01127f1:	e8 3c db fe ff       	call   f0100332 <_warn>
f01127f6:	83 c4 10             	add    $0x10,%esp
				correct = 0;
f01127f9:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
			}
			if (correct) eval += 10 ;
f0112800:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0112804:	74 04                	je     f011280a <test_copy_paste_chunk+0xf10>
f0112806:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
			correct = 1 ;
f011280a:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
		}
		//Test4
		numOfFreeFramesBefore = sys_calculate_free_frames();
f0112811:	e8 a8 9b ff ff       	call   f010c3be <sys_calculate_free_frames>
f0112816:	89 45 8c             	mov    %eax,-0x74(%ebp)
		SB(proc_directory, 0x901000, 2 , 0) ;
f0112819:	6a 00                	push   $0x0
f011281b:	6a 02                	push   $0x2
f011281d:	68 00 10 90 00       	push   $0x901000
f0112822:	ff 75 d4             	pushl  -0x2c(%ebp)
f0112825:	e8 59 2b 00 00       	call   f0115383 <SB>
f011282a:	83 c4 10             	add    $0x10,%esp
		SB(proc_directory, 0x902000, 2 , 0) ;
f011282d:	6a 00                	push   $0x0
f011282f:	6a 02                	push   $0x2
f0112831:	68 00 20 90 00       	push   $0x902000
f0112836:	ff 75 d4             	pushl  -0x2c(%ebp)
f0112839:	e8 45 2b 00 00       	call   f0115383 <SB>
f011283e:	83 c4 10             	add    $0x10,%esp

		ret = copy_paste_chunk(proc_directory, 0x901000, 0xBFF000, 8*kilo);
f0112841:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0112844:	c1 e0 03             	shl    $0x3,%eax
f0112847:	50                   	push   %eax
f0112848:	68 00 f0 bf 00       	push   $0xbff000
f011284d:	68 00 10 90 00       	push   $0x901000
f0112852:	ff 75 d4             	pushl  -0x2c(%ebp)
f0112855:	e8 ce 5b ff ff       	call   f0108428 <copy_paste_chunk>
f011285a:	83 c4 10             	add    $0x10,%esp
f011285d:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)

		numOfFreeFramesAfter = sys_calculate_free_frames();
f0112863:	e8 56 9b ff ff       	call   f010c3be <sys_calculate_free_frames>
f0112868:	89 45 84             	mov    %eax,-0x7c(%ebp)
		if (ret != 0 || (numOfFreeFramesBefore - numOfFreeFramesAfter) != 3)
f011286b:	83 bd 78 ff ff ff 00 	cmpl   $0x0,-0x88(%ebp)
f0112872:	75 0b                	jne    f011287f <test_copy_paste_chunk+0xf85>
f0112874:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0112877:	2b 45 84             	sub    -0x7c(%ebp),%eax
f011287a:	83 f8 03             	cmp    $0x3,%eax
f011287d:	74 2e                	je     f01128ad <test_copy_paste_chunk+0xfb3>
		{
			warn("[EVAL] copy_paste_chunk: Failed (# allocated frames is not correct) ret=%d diff=%d\n", ret, numOfFreeFramesBefore - numOfFreeFramesAfter);
f011287f:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0112882:	2b 45 84             	sub    -0x7c(%ebp),%eax
f0112885:	83 ec 0c             	sub    $0xc,%esp
f0112888:	50                   	push   %eax
f0112889:	ff b5 78 ff ff ff    	pushl  -0x88(%ebp)
f011288f:	68 b8 8d 13 f0       	push   $0xf0138db8
f0112894:	68 4d 03 00 00       	push   $0x34d
f0112899:	68 7e 81 13 f0       	push   $0xf013817e
f011289e:	e8 8f da fe ff       	call   f0100332 <_warn>
f01128a3:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f01128a6:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		}
		if (correct) eval += 5 ;
f01128ad:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f01128b1:	74 04                	je     f01128b7 <test_copy_paste_chunk+0xfbd>
f01128b3:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f01128b7:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

		chkcnt = 1 ;
f01128be:	c7 45 dc 01 00 00 00 	movl   $0x1,-0x24(%ebp)
		if (CCP(proc_directory, 0x901000, 0xBFF000, 2*PAGE_SIZE, 1, 0x003, 0x007, 0x003, 0x007, CHK_COPY_PASTE) != 1)
f01128c5:	83 ec 08             	sub    $0x8,%esp
f01128c8:	6a 01                	push   $0x1
f01128ca:	6a 07                	push   $0x7
f01128cc:	6a 03                	push   $0x3
f01128ce:	6a 07                	push   $0x7
f01128d0:	6a 03                	push   $0x3
f01128d2:	6a 01                	push   $0x1
f01128d4:	68 00 20 00 00       	push   $0x2000
f01128d9:	68 00 f0 bf 00       	push   $0xbff000
f01128de:	68 00 10 90 00       	push   $0x901000
f01128e3:	ff 75 d4             	pushl  -0x2c(%ebp)
f01128e6:	e8 56 2f 00 00       	call   f0115841 <CCP>
f01128eb:	83 c4 30             	add    $0x30,%esp
f01128ee:	83 f8 01             	cmp    $0x1,%eax
f01128f1:	74 28                	je     f011291b <test_copy_paste_chunk+0x1021>
		{
			warn("[EVAL] copy_paste_chunk: Failed (problem in permissions and/or references\n");
f01128f3:	83 ec 04             	sub    $0x4,%esp
f01128f6:	68 58 8e 13 f0       	push   $0xf0138e58
f01128fb:	68 56 03 00 00       	push   $0x356
f0112900:	68 7e 81 13 f0       	push   $0xf013817e
f0112905:	e8 28 da fe ff       	call   f0100332 <_warn>
f011290a:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f011290d:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
			chkcnt = 0 ;
f0112914:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
		}
		if (correct) eval += 10 ;
f011291b:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f011291f:	74 04                	je     f0112925 <test_copy_paste_chunk+0x102b>
f0112921:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f0112925:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

		if (chkcnt)
f011292c:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f0112930:	74 72                	je     f01129a4 <test_copy_paste_chunk+0x10aa>
		{
			ch1 = (char*)0x9017FF; ch2 = (char*)0xBFF7FF; ch3 = (char*)0x902FFF;ch4 = (char*)0xC00FFF;
f0112932:	c7 45 bc ff 17 90 00 	movl   $0x9017ff,-0x44(%ebp)
f0112939:	c7 45 b8 ff f7 bf 00 	movl   $0xbff7ff,-0x48(%ebp)
f0112940:	c7 45 b4 ff 2f 90 00 	movl   $0x902fff,-0x4c(%ebp)
f0112947:	c7 45 b0 ff 0f c0 00 	movl   $0xc00fff,-0x50(%ebp)
			if (*ch1 != 'b' || *ch2 != 'b' || *ch3 != 'z' || *ch4 != 'z')
f011294e:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0112951:	8a 00                	mov    (%eax),%al
f0112953:	3c 62                	cmp    $0x62,%al
f0112955:	75 1b                	jne    f0112972 <test_copy_paste_chunk+0x1078>
f0112957:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011295a:	8a 00                	mov    (%eax),%al
f011295c:	3c 62                	cmp    $0x62,%al
f011295e:	75 12                	jne    f0112972 <test_copy_paste_chunk+0x1078>
f0112960:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0112963:	8a 00                	mov    (%eax),%al
f0112965:	3c 7a                	cmp    $0x7a,%al
f0112967:	75 09                	jne    f0112972 <test_copy_paste_chunk+0x1078>
f0112969:	8b 45 b0             	mov    -0x50(%ebp),%eax
f011296c:	8a 00                	mov    (%eax),%al
f011296e:	3c 7a                	cmp    $0x7a,%al
f0112970:	74 21                	je     f0112993 <test_copy_paste_chunk+0x1099>
			{
				warn("[EVAL] copy_paste_chunk: Failed (content is not correct)\n");
f0112972:	83 ec 04             	sub    $0x4,%esp
f0112975:	68 0c 8d 13 f0       	push   $0xf0138d0c
f011297a:	68 62 03 00 00       	push   $0x362
f011297f:	68 7e 81 13 f0       	push   $0xf013817e
f0112984:	e8 a9 d9 fe ff       	call   f0100332 <_warn>
f0112989:	83 c4 10             	add    $0x10,%esp
				correct = 0;
f011298c:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
			}
			if (correct) eval += 5 ;
f0112993:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0112997:	74 04                	je     f011299d <test_copy_paste_chunk+0x10a3>
f0112999:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
			correct = 1 ;
f011299d:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
		}
	}
	cprintf("\nCASE III: END\n") ;
f01129a4:	83 ec 0c             	sub    $0xc,%esp
f01129a7:	68 06 8f 13 f0       	push   $0xf0138f06
f01129ac:	e8 7c e2 fe ff       	call   f0100c2d <cprintf>
f01129b1:	83 c4 10             	add    $0x10,%esp

	cprintf("[EVAL] copy_paste_chunk: FINISHED. Evaluation = %d\n", eval);
f01129b4:	83 ec 08             	sub    $0x8,%esp
f01129b7:	ff 75 e4             	pushl  -0x1c(%ebp)
f01129ba:	68 18 8f 13 f0       	push   $0xf0138f18
f01129bf:	e8 69 e2 fe ff       	call   f0100c2d <cprintf>
f01129c4:	83 c4 10             	add    $0x10,%esp
	if(eval == 100)
f01129c7:	83 7d e4 64          	cmpl   $0x64,-0x1c(%ebp)
f01129cb:	75 10                	jne    f01129dd <test_copy_paste_chunk+0x10e3>
		cprintf("Congratulations!! test copy_paste_chunk completed successfully.\n");
f01129cd:	83 ec 0c             	sub    $0xc,%esp
f01129d0:	68 4c 8f 13 f0       	push   $0xf0138f4c
f01129d5:	e8 53 e2 fe ff       	call   f0100c2d <cprintf>
f01129da:	83 c4 10             	add    $0x10,%esp

	//return back to the kernel directory
	lcr3(phys_page_directory) ;
f01129dd:	a1 e8 0e 6c f0       	mov    0xf06c0ee8,%eax
f01129e2:	89 45 d0             	mov    %eax,-0x30(%ebp)
f01129e5:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01129e8:	0f 22 d8             	mov    %eax,%cr3

	return 0;
f01129eb:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01129f0:	8d 65 f4             	lea    -0xc(%ebp),%esp
f01129f3:	5b                   	pop    %ebx
f01129f4:	5e                   	pop    %esi
f01129f5:	5f                   	pop    %edi
f01129f6:	5d                   	pop    %ebp
f01129f7:	c3                   	ret    

f01129f8 <test_share_chunk>:

//===============================
// 3) TEST SHARE CHUNK:
//===============================
int test_share_chunk()
{
f01129f8:	55                   	push   %ebp
f01129f9:	89 e5                	mov    %esp,%ebp
f01129fb:	57                   	push   %edi
f01129fc:	56                   	push   %esi
f01129fd:	53                   	push   %ebx
f01129fe:	81 ec bc 00 00 00    	sub    $0xbc,%esp
	//Create a Temp. User Process
	char prog_name[50] = "fos_helloWorld";
f0112a04:	8d 85 4e ff ff ff    	lea    -0xb2(%ebp),%eax
f0112a0a:	bb 18 8c 13 f0       	mov    $0xf0138c18,%ebx
f0112a0f:	ba 0f 00 00 00       	mov    $0xf,%edx
f0112a14:	89 c7                	mov    %eax,%edi
f0112a16:	89 de                	mov    %ebx,%esi
f0112a18:	89 d1                	mov    %edx,%ecx
f0112a1a:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0112a1c:	8d 95 5d ff ff ff    	lea    -0xa3(%ebp),%edx
f0112a22:	b9 23 00 00 00       	mov    $0x23,%ecx
f0112a27:	b0 00                	mov    $0x0,%al
f0112a29:	89 d7                	mov    %edx,%edi
f0112a2b:	f3 aa                	rep stos %al,%es:(%edi)
	struct Env* env = env_create(prog_name, 20, 10, 0);
f0112a2d:	6a 00                	push   $0x0
f0112a2f:	6a 0a                	push   $0xa
f0112a31:	6a 14                	push   $0x14
f0112a33:	8d 85 4e ff ff ff    	lea    -0xb2(%ebp),%eax
f0112a39:	50                   	push   %eax
f0112a3a:	e8 33 5c ff ff       	call   f0108672 <env_create>
f0112a3f:	83 c4 10             	add    $0x10,%esp
f0112a42:	89 45 d0             	mov    %eax,-0x30(%ebp)
	uint32 *proc_directory = env->env_page_directory ;
f0112a45:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0112a48:	8b 40 5c             	mov    0x5c(%eax),%eax
f0112a4b:	89 45 cc             	mov    %eax,-0x34(%ebp)
	lcr3(env->env_cr3) ;
f0112a4e:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0112a51:	8b 40 60             	mov    0x60(%eax),%eax
f0112a54:	89 45 80             	mov    %eax,-0x80(%ebp)
f0112a57:	8b 45 80             	mov    -0x80(%ebp),%eax
f0112a5a:	0f 22 d8             	mov    %eax,%cr3
	//===================================================

	ClearUserSpace(proc_directory);
f0112a5d:	83 ec 0c             	sub    $0xc,%esp
f0112a60:	ff 75 cc             	pushl  -0x34(%ebp)
f0112a63:	e8 a5 2d 00 00       	call   f011580d <ClearUserSpace>
f0112a68:	83 c4 10             	add    $0x10,%esp

	char *ptr1, *ptr2, *ptr3, *ptr4, *ptr5, *ptr6, *ptr7, *ptr8;
	char tptr[10] ;
	int kilo = 1024 ;
f0112a6b:	c7 45 c4 00 04 00 00 	movl   $0x400,-0x3c(%ebp)
	int mega = 1024*1024 ;
f0112a72:	c7 45 c0 00 00 10 00 	movl   $0x100000,-0x40(%ebp)
	uint32 eval = 0;
f0112a79:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
	uint8 correct =1 ;
f0112a80:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	extern char end_of_kernel[];

	/*======================================*/
	/*PART I: Destination page(s) exist 20% */
	/*======================================*/
	cprintf("\nCASE I: Destination page(s) exist [20%]\n") ;
f0112a84:	83 ec 0c             	sub    $0xc,%esp
f0112a87:	68 c4 97 13 f0       	push   $0xf01397c4
f0112a8c:	e8 9c e1 fe ff       	call   f0100c2d <cprintf>
f0112a91:	83 c4 10             	add    $0x10,%esp
	{
		ptr1 = (char*)0xF0100000;
f0112a94:	c7 45 bc 00 00 10 f0 	movl   $0xf0100000,-0x44(%ebp)
		ptr2 = (char*)0xF1004000;
f0112a9b:	c7 45 b8 00 40 00 f1 	movl   $0xf1004000,-0x48(%ebp)
		tptr[1] = *ptr1 ;
f0112aa2:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0112aa5:	8a 00                	mov    (%eax),%al
f0112aa7:	88 85 45 ff ff ff    	mov    %al,-0xbb(%ebp)
		tptr[2] = *ptr2 ;
f0112aad:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0112ab0:	8a 00                	mov    (%eax),%al
f0112ab2:	88 85 46 ff ff ff    	mov    %al,-0xba(%ebp)

		numOfFreeFramesBefore = sys_calculate_free_frames();
f0112ab8:	e8 01 99 ff ff       	call   f010c3be <sys_calculate_free_frames>
f0112abd:	89 45 b4             	mov    %eax,-0x4c(%ebp)

		int ret = share_chunk(proc_directory, 0xF0100000,0xF0104000, 6*kilo, PERM_WRITEABLE) ;
f0112ac0:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0112ac3:	89 d0                	mov    %edx,%eax
f0112ac5:	01 c0                	add    %eax,%eax
f0112ac7:	01 d0                	add    %edx,%eax
f0112ac9:	01 c0                	add    %eax,%eax
f0112acb:	83 ec 0c             	sub    $0xc,%esp
f0112ace:	6a 02                	push   $0x2
f0112ad0:	50                   	push   %eax
f0112ad1:	68 00 40 10 f0       	push   $0xf0104000
f0112ad6:	68 00 00 10 f0       	push   $0xf0100000
f0112adb:	ff 75 cc             	pushl  -0x34(%ebp)
f0112ade:	e8 5f 59 ff ff       	call   f0108442 <share_chunk>
f0112ae3:	83 c4 20             	add    $0x20,%esp
f0112ae6:	89 45 b0             	mov    %eax,-0x50(%ebp)

		numOfFreeFramesAfter = sys_calculate_free_frames();
f0112ae9:	e8 d0 98 ff ff       	call   f010c3be <sys_calculate_free_frames>
f0112aee:	89 45 ac             	mov    %eax,-0x54(%ebp)

		if (ret != -1 || (numOfFreeFramesBefore - numOfFreeFramesAfter) != 0)
f0112af1:	83 7d b0 ff          	cmpl   $0xffffffff,-0x50(%ebp)
f0112af5:	75 08                	jne    f0112aff <test_share_chunk+0x107>
f0112af7:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0112afa:	3b 45 ac             	cmp    -0x54(%ebp),%eax
f0112afd:	74 28                	je     f0112b27 <test_share_chunk+0x12f>
		{
			warn("[EVAL] share_chunk: Failed (dest is exist... operation should be denied) ret=%d diff=%d\n", ret, (numOfFreeFramesBefore - numOfFreeFramesAfter));
f0112aff:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0112b02:	2b 45 ac             	sub    -0x54(%ebp),%eax
f0112b05:	83 ec 0c             	sub    $0xc,%esp
f0112b08:	50                   	push   %eax
f0112b09:	ff 75 b0             	pushl  -0x50(%ebp)
f0112b0c:	68 f0 97 13 f0       	push   $0xf01397f0
f0112b11:	68 9e 03 00 00       	push   $0x39e
f0112b16:	68 7e 81 13 f0       	push   $0xf013817e
f0112b1b:	e8 12 d8 fe ff       	call   f0100332 <_warn>
f0112b20:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0112b23:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 10 ;
f0112b27:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0112b2b:	74 04                	je     f0112b31 <test_share_chunk+0x139>
f0112b2d:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f0112b31:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		if (CCP(proc_directory, 0xF0100000, 0xF0104000, 8*kilo, 1, 0x003, 0x007, 0x003, 0x007, ~CHK_SHARE) == 0)
f0112b35:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0112b38:	c1 e0 03             	shl    $0x3,%eax
f0112b3b:	83 ec 08             	sub    $0x8,%esp
f0112b3e:	68 fd 00 00 00       	push   $0xfd
f0112b43:	6a 07                	push   $0x7
f0112b45:	6a 03                	push   $0x3
f0112b47:	6a 07                	push   $0x7
f0112b49:	6a 03                	push   $0x3
f0112b4b:	6a 01                	push   $0x1
f0112b4d:	50                   	push   %eax
f0112b4e:	68 00 40 10 f0       	push   $0xf0104000
f0112b53:	68 00 00 10 f0       	push   $0xf0100000
f0112b58:	ff 75 cc             	pushl  -0x34(%ebp)
f0112b5b:	e8 e1 2c 00 00       	call   f0115841 <CCP>
f0112b60:	83 c4 30             	add    $0x30,%esp
f0112b63:	85 c0                	test   %eax,%eax
f0112b65:	75 1e                	jne    f0112b85 <test_share_chunk+0x18d>
		{
			warn("[EVAL] share_chunk: Failed (problem in permissions and/or references\n");
f0112b67:	83 ec 04             	sub    $0x4,%esp
f0112b6a:	68 4c 98 13 f0       	push   $0xf013984c
f0112b6f:	68 a6 03 00 00       	push   $0x3a6
f0112b74:	68 7e 81 13 f0       	push   $0xf013817e
f0112b79:	e8 b4 d7 fe ff       	call   f0100332 <_warn>
f0112b7e:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0112b81:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0112b85:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0112b89:	74 04                	je     f0112b8f <test_share_chunk+0x197>
f0112b8b:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)

		*ptr1 = 'A' ;
f0112b8f:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0112b92:	c6 00 41             	movb   $0x41,(%eax)
		*ptr2 = 'B' ;
f0112b95:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0112b98:	c6 00 42             	movb   $0x42,(%eax)

		if ((*ptr1) != 'A' || (*ptr2) != 'B')
f0112b9b:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0112b9e:	8a 00                	mov    (%eax),%al
f0112ba0:	3c 41                	cmp    $0x41,%al
f0112ba2:	75 09                	jne    f0112bad <test_share_chunk+0x1b5>
f0112ba4:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0112ba7:	8a 00                	mov    (%eax),%al
f0112ba9:	3c 42                	cmp    $0x42,%al
f0112bab:	74 1e                	je     f0112bcb <test_share_chunk+0x1d3>
		{
			warn("[EVAL] share_chunk: Failed (content is not correct)\n");
f0112bad:	83 ec 04             	sub    $0x4,%esp
f0112bb0:	68 94 98 13 f0       	push   $0xf0139894
f0112bb5:	68 b0 03 00 00       	push   $0x3b0
f0112bba:	68 7e 81 13 f0       	push   $0xf013817e
f0112bbf:	e8 6e d7 fe ff       	call   f0100332 <_warn>
f0112bc4:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0112bc7:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0112bcb:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0112bcf:	74 04                	je     f0112bd5 <test_share_chunk+0x1dd>
f0112bd1:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0112bd5:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		*ptr1 = tptr[1] ;
f0112bd9:	8a 95 45 ff ff ff    	mov    -0xbb(%ebp),%dl
f0112bdf:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0112be2:	88 10                	mov    %dl,(%eax)
		*ptr2 = tptr[2] ;
f0112be4:	8a 95 46 ff ff ff    	mov    -0xba(%ebp),%dl
f0112bea:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0112bed:	88 10                	mov    %dl,(%eax)
	}
	cprintf("\nCASE I: END\n") ;
f0112bef:	83 ec 0c             	sub    $0xc,%esp
f0112bf2:	68 c9 98 13 f0       	push   $0xf01398c9
f0112bf7:	e8 31 e0 fe ff       	call   f0100c2d <cprintf>
f0112bfc:	83 c4 10             	add    $0x10,%esp

	/*========================================================*/
	/*PART II: Destination page(s) not exist [Supervisor] 25% */
	/*========================================================*/
	cprintf("\nCASE II: Destination page(s) not exist [Supervisor] [25%]\n") ;
f0112bff:	83 ec 0c             	sub    $0xc,%esp
f0112c02:	68 d8 98 13 f0       	push   $0xf01398d8
f0112c07:	e8 21 e0 fe ff       	call   f0100c2d <cprintf>
f0112c0c:	83 c4 10             	add    $0x10,%esp
	{
		numOfFreeFramesBefore = sys_calculate_free_frames();
f0112c0f:	e8 aa 97 ff ff       	call   f010c3be <sys_calculate_free_frames>
f0112c14:	89 45 b4             	mov    %eax,-0x4c(%ebp)

		int ret = share_chunk(proc_directory, 0xF0000000,0x40000000, 32*mega, PERM_WRITEABLE | PERM_AVAILABLE) ;
f0112c17:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0112c1a:	c1 e0 05             	shl    $0x5,%eax
f0112c1d:	83 ec 0c             	sub    $0xc,%esp
f0112c20:	68 02 0e 00 00       	push   $0xe02
f0112c25:	50                   	push   %eax
f0112c26:	68 00 00 00 40       	push   $0x40000000
f0112c2b:	68 00 00 00 f0       	push   $0xf0000000
f0112c30:	ff 75 cc             	pushl  -0x34(%ebp)
f0112c33:	e8 0a 58 ff ff       	call   f0108442 <share_chunk>
f0112c38:	83 c4 20             	add    $0x20,%esp
f0112c3b:	89 45 a8             	mov    %eax,-0x58(%ebp)

		numOfFreeFramesAfter = sys_calculate_free_frames();
f0112c3e:	e8 7b 97 ff ff       	call   f010c3be <sys_calculate_free_frames>
f0112c43:	89 45 ac             	mov    %eax,-0x54(%ebp)

		if (ret != 0 || (numOfFreeFramesBefore - numOfFreeFramesAfter) != (32*mega) / (4*mega))
f0112c46:	83 7d a8 00          	cmpl   $0x0,-0x58(%ebp)
f0112c4a:	75 1f                	jne    f0112c6b <test_share_chunk+0x273>
f0112c4c:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0112c4f:	2b 45 ac             	sub    -0x54(%ebp),%eax
f0112c52:	89 c1                	mov    %eax,%ecx
f0112c54:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0112c57:	c1 e0 05             	shl    $0x5,%eax
f0112c5a:	8b 55 c0             	mov    -0x40(%ebp),%edx
f0112c5d:	8d 1c 95 00 00 00 00 	lea    0x0(,%edx,4),%ebx
f0112c64:	99                   	cltd   
f0112c65:	f7 fb                	idiv   %ebx
f0112c67:	39 c1                	cmp    %eax,%ecx
f0112c69:	74 28                	je     f0112c93 <test_share_chunk+0x29b>
		{
			warn("[EVAL] share_chunk: Failed (# allocated frames is not correct) ret=%d diff=%d\n", ret, numOfFreeFramesBefore - numOfFreeFramesAfter);
f0112c6b:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0112c6e:	2b 45 ac             	sub    -0x54(%ebp),%eax
f0112c71:	83 ec 0c             	sub    $0xc,%esp
f0112c74:	50                   	push   %eax
f0112c75:	ff 75 a8             	pushl  -0x58(%ebp)
f0112c78:	68 14 99 13 f0       	push   $0xf0139914
f0112c7d:	68 c8 03 00 00       	push   $0x3c8
f0112c82:	68 7e 81 13 f0       	push   $0xf013817e
f0112c87:	e8 a6 d6 fe ff       	call   f0100332 <_warn>
f0112c8c:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0112c8f:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0112c93:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0112c97:	74 04                	je     f0112c9d <test_share_chunk+0x2a5>
f0112c99:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0112c9d:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		int chk_cnt = 1 ;
f0112ca1:	c7 45 dc 01 00 00 00 	movl   $0x1,-0x24(%ebp)
		if (CCP(proc_directory, 0xF0000000, 0x40000000, 32*mega, -1, 0xE03, 0xE07, 0x003, 0x007, CHK_SHARE) == 0)
f0112ca8:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0112cab:	c1 e0 05             	shl    $0x5,%eax
f0112cae:	83 ec 08             	sub    $0x8,%esp
f0112cb1:	6a 02                	push   $0x2
f0112cb3:	6a 07                	push   $0x7
f0112cb5:	6a 03                	push   $0x3
f0112cb7:	68 07 0e 00 00       	push   $0xe07
f0112cbc:	68 03 0e 00 00       	push   $0xe03
f0112cc1:	6a ff                	push   $0xffffffff
f0112cc3:	50                   	push   %eax
f0112cc4:	68 00 00 00 40       	push   $0x40000000
f0112cc9:	68 00 00 00 f0       	push   $0xf0000000
f0112cce:	ff 75 cc             	pushl  -0x34(%ebp)
f0112cd1:	e8 6b 2b 00 00       	call   f0115841 <CCP>
f0112cd6:	83 c4 30             	add    $0x30,%esp
f0112cd9:	85 c0                	test   %eax,%eax
f0112cdb:	75 25                	jne    f0112d02 <test_share_chunk+0x30a>
		{
			warn("[EVAL] share_chunk: Failed (problem in permissions and/or references\n");
f0112cdd:	83 ec 04             	sub    $0x4,%esp
f0112ce0:	68 4c 98 13 f0       	push   $0xf013984c
f0112ce5:	68 d1 03 00 00       	push   $0x3d1
f0112cea:	68 7e 81 13 f0       	push   $0xf013817e
f0112cef:	e8 3e d6 fe ff       	call   f0100332 <_warn>
f0112cf4:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0112cf7:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
			chk_cnt = 0 ;
f0112cfb:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
		}

		if (CCP(proc_directory, 0xF0000000, 0x40000000, 12*kilo, 2, 0xE03, 0xE07, 0x003, 0x007, CHK_SHARE) == 0)
f0112d02:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0112d05:	89 d0                	mov    %edx,%eax
f0112d07:	01 c0                	add    %eax,%eax
f0112d09:	01 d0                	add    %edx,%eax
f0112d0b:	c1 e0 02             	shl    $0x2,%eax
f0112d0e:	83 ec 08             	sub    $0x8,%esp
f0112d11:	6a 02                	push   $0x2
f0112d13:	6a 07                	push   $0x7
f0112d15:	6a 03                	push   $0x3
f0112d17:	68 07 0e 00 00       	push   $0xe07
f0112d1c:	68 03 0e 00 00       	push   $0xe03
f0112d21:	6a 02                	push   $0x2
f0112d23:	50                   	push   %eax
f0112d24:	68 00 00 00 40       	push   $0x40000000
f0112d29:	68 00 00 00 f0       	push   $0xf0000000
f0112d2e:	ff 75 cc             	pushl  -0x34(%ebp)
f0112d31:	e8 0b 2b 00 00       	call   f0115841 <CCP>
f0112d36:	83 c4 30             	add    $0x30,%esp
f0112d39:	85 c0                	test   %eax,%eax
f0112d3b:	75 1e                	jne    f0112d5b <test_share_chunk+0x363>
		{
			warn("[EVAL] share_chunk: Failed (problem in permissions and/or references\n");
f0112d3d:	83 ec 04             	sub    $0x4,%esp
f0112d40:	68 4c 98 13 f0       	push   $0xf013984c
f0112d45:	68 d8 03 00 00       	push   $0x3d8
f0112d4a:	68 7e 81 13 f0       	push   $0xf013817e
f0112d4f:	e8 de d5 fe ff       	call   f0100332 <_warn>
f0112d54:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0112d57:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0112d5b:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0112d5f:	74 04                	je     f0112d65 <test_share_chunk+0x36d>
f0112d61:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0112d65:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		extern char end_of_kernel[];
		uint32 endRange = ((uint32)end_of_kernel - KERNEL_BASE);
f0112d69:	b8 fc 0f 6c f0       	mov    $0xf06c0ffc,%eax
f0112d6e:	05 00 00 00 10       	add    $0x10000000,%eax
f0112d73:	89 45 a4             	mov    %eax,-0x5c(%ebp)
		if (CCP(proc_directory, 0xF0000000+PHYS_IO_MEM, 0x40000000+PHYS_IO_MEM, endRange - PHYS_IO_MEM, 2, 0xE03, 0xE07, 0x003, 0x007, CHK_SHARE) == 0)
f0112d76:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0112d79:	2d 00 00 0a 00       	sub    $0xa0000,%eax
f0112d7e:	83 ec 08             	sub    $0x8,%esp
f0112d81:	6a 02                	push   $0x2
f0112d83:	6a 07                	push   $0x7
f0112d85:	6a 03                	push   $0x3
f0112d87:	68 07 0e 00 00       	push   $0xe07
f0112d8c:	68 03 0e 00 00       	push   $0xe03
f0112d91:	6a 02                	push   $0x2
f0112d93:	50                   	push   %eax
f0112d94:	68 00 00 0a 40       	push   $0x400a0000
f0112d99:	68 00 00 0a f0       	push   $0xf00a0000
f0112d9e:	ff 75 cc             	pushl  -0x34(%ebp)
f0112da1:	e8 9b 2a 00 00       	call   f0115841 <CCP>
f0112da6:	83 c4 30             	add    $0x30,%esp
f0112da9:	85 c0                	test   %eax,%eax
f0112dab:	75 1e                	jne    f0112dcb <test_share_chunk+0x3d3>
		{
			warn("[EVAL] share_chunk: Failed (problem in permissions and/or references\n");
f0112dad:	83 ec 04             	sub    $0x4,%esp
f0112db0:	68 4c 98 13 f0       	push   $0xf013984c
f0112db5:	68 e2 03 00 00       	push   $0x3e2
f0112dba:	68 7e 81 13 f0       	push   $0xf013817e
f0112dbf:	e8 6e d5 fe ff       	call   f0100332 <_warn>
f0112dc4:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0112dc7:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0112dcb:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0112dcf:	74 04                	je     f0112dd5 <test_share_chunk+0x3dd>
f0112dd1:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0112dd5:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		if (chk_cnt)
f0112dd9:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f0112ddd:	0f 84 a4 00 00 00    	je     f0112e87 <test_share_chunk+0x48f>
		{
			ptr1 = (char*)0xF00007FF; *ptr1 = 'A' ;
f0112de3:	c7 45 bc ff 07 00 f0 	movl   $0xf00007ff,-0x44(%ebp)
f0112dea:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0112ded:	c6 00 41             	movb   $0x41,(%eax)
			ptr2 = (char*)0x400007FF;
f0112df0:	c7 45 b8 ff 07 00 40 	movl   $0x400007ff,-0x48(%ebp)

			if ((*ptr1) != 'A' || (*ptr2) != 'A')
f0112df7:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0112dfa:	8a 00                	mov    (%eax),%al
f0112dfc:	3c 41                	cmp    $0x41,%al
f0112dfe:	75 09                	jne    f0112e09 <test_share_chunk+0x411>
f0112e00:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0112e03:	8a 00                	mov    (%eax),%al
f0112e05:	3c 41                	cmp    $0x41,%al
f0112e07:	74 1e                	je     f0112e27 <test_share_chunk+0x42f>
			{
				warn("[EVAL] share_chunk: Failed (content is not correct)\n");
f0112e09:	83 ec 04             	sub    $0x4,%esp
f0112e0c:	68 94 98 13 f0       	push   $0xf0139894
f0112e11:	68 ef 03 00 00       	push   $0x3ef
f0112e16:	68 7e 81 13 f0       	push   $0xf013817e
f0112e1b:	e8 12 d5 fe ff       	call   f0100332 <_warn>
f0112e20:	83 c4 10             	add    $0x10,%esp
				correct = 0;
f0112e23:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
			}
			if (correct) eval += 5 ;
f0112e27:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0112e2b:	74 04                	je     f0112e31 <test_share_chunk+0x439>
f0112e2d:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
			correct = 1 ;
f0112e31:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

			ptr1 = (char*)0x41000FFF; *ptr1 = 'C' ;
f0112e35:	c7 45 bc ff 0f 00 41 	movl   $0x41000fff,-0x44(%ebp)
f0112e3c:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0112e3f:	c6 00 43             	movb   $0x43,(%eax)
			ptr2 = (char*)0xF1000FFF;
f0112e42:	c7 45 b8 ff 0f 00 f1 	movl   $0xf1000fff,-0x48(%ebp)

			if ((*ptr1) != 'C' || (*ptr2) != 'C')
f0112e49:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0112e4c:	8a 00                	mov    (%eax),%al
f0112e4e:	3c 43                	cmp    $0x43,%al
f0112e50:	75 09                	jne    f0112e5b <test_share_chunk+0x463>
f0112e52:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0112e55:	8a 00                	mov    (%eax),%al
f0112e57:	3c 43                	cmp    $0x43,%al
f0112e59:	74 1e                	je     f0112e79 <test_share_chunk+0x481>
			{
				warn("[EVAL] share_chunk: Failed (content is not correct)\n");
f0112e5b:	83 ec 04             	sub    $0x4,%esp
f0112e5e:	68 94 98 13 f0       	push   $0xf0139894
f0112e63:	68 fa 03 00 00       	push   $0x3fa
f0112e68:	68 7e 81 13 f0       	push   $0xf013817e
f0112e6d:	e8 c0 d4 fe ff       	call   f0100332 <_warn>
f0112e72:	83 c4 10             	add    $0x10,%esp
				correct = 0;
f0112e75:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
			}
			if (correct) eval += 5 ;
f0112e79:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0112e7d:	74 04                	je     f0112e83 <test_share_chunk+0x48b>
f0112e7f:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
			correct = 1 ;
f0112e83:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
		}
	}
	cprintf("\nCASE II: END\n") ;
f0112e87:	83 ec 0c             	sub    $0xc,%esp
f0112e8a:	68 a3 8e 13 f0       	push   $0xf0138ea3
f0112e8f:	e8 99 dd fe ff       	call   f0100c2d <cprintf>
f0112e94:	83 c4 10             	add    $0x10,%esp

	/*========================================================*/
	/*PART III: Destination page(s) not exist [User r/w] 25%  */
	/*========================================================*/
	cprintf("\nCASE III: Destination page(s) not exist [User r/w] [25%]\n") ;
f0112e97:	83 ec 0c             	sub    $0xc,%esp
f0112e9a:	68 64 99 13 f0       	push   $0xf0139964
f0112e9f:	e8 89 dd fe ff       	call   f0100c2d <cprintf>
f0112ea4:	83 c4 10             	add    $0x10,%esp
	{
		numOfFreeFramesBefore = sys_calculate_free_frames();
f0112ea7:	e8 12 95 ff ff       	call   f010c3be <sys_calculate_free_frames>
f0112eac:	89 45 b4             	mov    %eax,-0x4c(%ebp)

		int ret = share_chunk(proc_directory, 0x40000000,0x0, 648*kilo, PERM_WRITEABLE|PERM_USER) ;
f0112eaf:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0112eb2:	89 d0                	mov    %edx,%eax
f0112eb4:	c1 e0 03             	shl    $0x3,%eax
f0112eb7:	01 d0                	add    %edx,%eax
f0112eb9:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f0112ec0:	01 d0                	add    %edx,%eax
f0112ec2:	c1 e0 03             	shl    $0x3,%eax
f0112ec5:	83 ec 0c             	sub    $0xc,%esp
f0112ec8:	6a 06                	push   $0x6
f0112eca:	50                   	push   %eax
f0112ecb:	6a 00                	push   $0x0
f0112ecd:	68 00 00 00 40       	push   $0x40000000
f0112ed2:	ff 75 cc             	pushl  -0x34(%ebp)
f0112ed5:	e8 68 55 ff ff       	call   f0108442 <share_chunk>
f0112eda:	83 c4 20             	add    $0x20,%esp
f0112edd:	89 45 a0             	mov    %eax,-0x60(%ebp)

		numOfFreeFramesAfter = sys_calculate_free_frames();
f0112ee0:	e8 d9 94 ff ff       	call   f010c3be <sys_calculate_free_frames>
f0112ee5:	89 45 ac             	mov    %eax,-0x54(%ebp)

		if (ret != 0 || (numOfFreeFramesBefore - numOfFreeFramesAfter) != 1)
f0112ee8:	83 7d a0 00          	cmpl   $0x0,-0x60(%ebp)
f0112eec:	75 0b                	jne    f0112ef9 <test_share_chunk+0x501>
f0112eee:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0112ef1:	2b 45 ac             	sub    -0x54(%ebp),%eax
f0112ef4:	83 f8 01             	cmp    $0x1,%eax
f0112ef7:	74 28                	je     f0112f21 <test_share_chunk+0x529>
		{
			warn("[EVAL] share_chunk: Failed (# allocated frames is not correct) ret=%d diff=%d\n", ret, numOfFreeFramesBefore - numOfFreeFramesAfter);
f0112ef9:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0112efc:	2b 45 ac             	sub    -0x54(%ebp),%eax
f0112eff:	83 ec 0c             	sub    $0xc,%esp
f0112f02:	50                   	push   %eax
f0112f03:	ff 75 a0             	pushl  -0x60(%ebp)
f0112f06:	68 14 99 13 f0       	push   $0xf0139914
f0112f0b:	68 10 04 00 00       	push   $0x410
f0112f10:	68 7e 81 13 f0       	push   $0xf013817e
f0112f15:	e8 18 d4 fe ff       	call   f0100332 <_warn>
f0112f1a:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0112f1d:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0112f21:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0112f25:	74 04                	je     f0112f2b <test_share_chunk+0x533>
f0112f27:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0112f2b:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		int chk_cnt = 1 ;
f0112f2f:	c7 45 d8 01 00 00 00 	movl   $0x1,-0x28(%ebp)
		if (CCP(proc_directory, 0x40000000, 0x0, PHYS_IO_MEM + 4*kilo, -1, 0x007, 0x007, 0x003, 0x007, CHK_SHARE) == 0)
f0112f36:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0112f39:	05 00 80 02 00       	add    $0x28000,%eax
f0112f3e:	c1 e0 02             	shl    $0x2,%eax
f0112f41:	83 ec 08             	sub    $0x8,%esp
f0112f44:	6a 02                	push   $0x2
f0112f46:	6a 07                	push   $0x7
f0112f48:	6a 03                	push   $0x3
f0112f4a:	6a 07                	push   $0x7
f0112f4c:	6a 07                	push   $0x7
f0112f4e:	6a ff                	push   $0xffffffff
f0112f50:	50                   	push   %eax
f0112f51:	6a 00                	push   $0x0
f0112f53:	68 00 00 00 40       	push   $0x40000000
f0112f58:	ff 75 cc             	pushl  -0x34(%ebp)
f0112f5b:	e8 e1 28 00 00       	call   f0115841 <CCP>
f0112f60:	83 c4 30             	add    $0x30,%esp
f0112f63:	85 c0                	test   %eax,%eax
f0112f65:	75 25                	jne    f0112f8c <test_share_chunk+0x594>
		{
			warn("[EVAL] share_chunk: Failed (problem in permissions and/or references\n");
f0112f67:	83 ec 04             	sub    $0x4,%esp
f0112f6a:	68 4c 98 13 f0       	push   $0xf013984c
f0112f6f:	68 19 04 00 00       	push   $0x419
f0112f74:	68 7e 81 13 f0       	push   $0xf013817e
f0112f79:	e8 b4 d3 fe ff       	call   f0100332 <_warn>
f0112f7e:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0112f81:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
			chk_cnt = 0 ;
f0112f85:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
		}

		if (CCP(proc_directory, 0x40000000, 0x0, 12*kilo, 3, 0x007, 0x007, 0x003, 0x007, CHK_SHARE) == 0)
f0112f8c:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0112f8f:	89 d0                	mov    %edx,%eax
f0112f91:	01 c0                	add    %eax,%eax
f0112f93:	01 d0                	add    %edx,%eax
f0112f95:	c1 e0 02             	shl    $0x2,%eax
f0112f98:	83 ec 08             	sub    $0x8,%esp
f0112f9b:	6a 02                	push   $0x2
f0112f9d:	6a 07                	push   $0x7
f0112f9f:	6a 03                	push   $0x3
f0112fa1:	6a 07                	push   $0x7
f0112fa3:	6a 07                	push   $0x7
f0112fa5:	6a 03                	push   $0x3
f0112fa7:	50                   	push   %eax
f0112fa8:	6a 00                	push   $0x0
f0112faa:	68 00 00 00 40       	push   $0x40000000
f0112faf:	ff 75 cc             	pushl  -0x34(%ebp)
f0112fb2:	e8 8a 28 00 00       	call   f0115841 <CCP>
f0112fb7:	83 c4 30             	add    $0x30,%esp
f0112fba:	85 c0                	test   %eax,%eax
f0112fbc:	75 1e                	jne    f0112fdc <test_share_chunk+0x5e4>
		{
			warn("[EVAL] share_chunk: Failed (problem in permissions and/or references\n");
f0112fbe:	83 ec 04             	sub    $0x4,%esp
f0112fc1:	68 4c 98 13 f0       	push   $0xf013984c
f0112fc6:	68 20 04 00 00       	push   $0x420
f0112fcb:	68 7e 81 13 f0       	push   $0xf013817e
f0112fd0:	e8 5d d3 fe ff       	call   f0100332 <_warn>
f0112fd5:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0112fd8:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0112fdc:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0112fe0:	74 04                	je     f0112fe6 <test_share_chunk+0x5ee>
f0112fe2:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0112fe6:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		if (CCP(proc_directory, 0x40003000, 0x3000, PHYS_IO_MEM - 12*kilo, 2, 0x007, 0x007, 0x003, 0x007, CHK_SHARE) == 0)
f0112fea:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0112fed:	89 d0                	mov    %edx,%eax
f0112fef:	01 c0                	add    %eax,%eax
f0112ff1:	01 d0                	add    %edx,%eax
f0112ff3:	c1 e0 02             	shl    $0x2,%eax
f0112ff6:	f7 d8                	neg    %eax
f0112ff8:	05 00 00 0a 00       	add    $0xa0000,%eax
f0112ffd:	83 ec 08             	sub    $0x8,%esp
f0113000:	6a 02                	push   $0x2
f0113002:	6a 07                	push   $0x7
f0113004:	6a 03                	push   $0x3
f0113006:	6a 07                	push   $0x7
f0113008:	6a 07                	push   $0x7
f011300a:	6a 02                	push   $0x2
f011300c:	50                   	push   %eax
f011300d:	68 00 30 00 00       	push   $0x3000
f0113012:	68 00 30 00 40       	push   $0x40003000
f0113017:	ff 75 cc             	pushl  -0x34(%ebp)
f011301a:	e8 22 28 00 00       	call   f0115841 <CCP>
f011301f:	83 c4 30             	add    $0x30,%esp
f0113022:	85 c0                	test   %eax,%eax
f0113024:	75 1e                	jne    f0113044 <test_share_chunk+0x64c>
		{
			warn("[EVAL] share_chunk: Failed (problem in permissions and/or references\n");
f0113026:	83 ec 04             	sub    $0x4,%esp
f0113029:	68 4c 98 13 f0       	push   $0xf013984c
f011302e:	68 28 04 00 00       	push   $0x428
f0113033:	68 7e 81 13 f0       	push   $0xf013817e
f0113038:	e8 f5 d2 fe ff       	call   f0100332 <_warn>
f011303d:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0113040:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0113044:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0113048:	74 04                	je     f011304e <test_share_chunk+0x656>
f011304a:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f011304e:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		if (CCP(proc_directory, 0x40000000+PHYS_IO_MEM, PHYS_IO_MEM, 4*kilo, 3, 0x007, 0x007, 0x003, 0x007, CHK_SHARE) == 0)
f0113052:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0113055:	c1 e0 02             	shl    $0x2,%eax
f0113058:	83 ec 08             	sub    $0x8,%esp
f011305b:	6a 02                	push   $0x2
f011305d:	6a 07                	push   $0x7
f011305f:	6a 03                	push   $0x3
f0113061:	6a 07                	push   $0x7
f0113063:	6a 07                	push   $0x7
f0113065:	6a 03                	push   $0x3
f0113067:	50                   	push   %eax
f0113068:	68 00 00 0a 00       	push   $0xa0000
f011306d:	68 00 00 0a 40       	push   $0x400a0000
f0113072:	ff 75 cc             	pushl  -0x34(%ebp)
f0113075:	e8 c7 27 00 00       	call   f0115841 <CCP>
f011307a:	83 c4 30             	add    $0x30,%esp
f011307d:	85 c0                	test   %eax,%eax
f011307f:	75 1e                	jne    f011309f <test_share_chunk+0x6a7>
		{
			warn("[EVAL] share_chunk: Failed (problem in permissions and/or references\n");
f0113081:	83 ec 04             	sub    $0x4,%esp
f0113084:	68 4c 98 13 f0       	push   $0xf013984c
f0113089:	68 30 04 00 00       	push   $0x430
f011308e:	68 7e 81 13 f0       	push   $0xf013817e
f0113093:	e8 9a d2 fe ff       	call   f0100332 <_warn>
f0113098:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f011309b:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f011309f:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f01130a3:	74 04                	je     f01130a9 <test_share_chunk+0x6b1>
f01130a5:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f01130a9:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		if (chk_cnt)
f01130ad:	83 7d d8 00          	cmpl   $0x0,-0x28(%ebp)
f01130b1:	0f 84 92 00 00 00    	je     f0113149 <test_share_chunk+0x751>
		{
			ptr1 = (char*)0x7FF;
f01130b7:	c7 45 bc ff 07 00 00 	movl   $0x7ff,-0x44(%ebp)
			ptr2 = (char*)0xF00007FF;
f01130be:	c7 45 b8 ff 07 00 f0 	movl   $0xf00007ff,-0x48(%ebp)
			ptr3 = (char*)0x400007FF;
f01130c5:	c7 45 9c ff 07 00 40 	movl   $0x400007ff,-0x64(%ebp)
			ptr4 = (char*)0x9FFFF; *ptr4 = 'D';
f01130cc:	c7 45 98 ff ff 09 00 	movl   $0x9ffff,-0x68(%ebp)
f01130d3:	8b 45 98             	mov    -0x68(%ebp),%eax
f01130d6:	c6 00 44             	movb   $0x44,(%eax)
			ptr5 = (char*)0xF009FFFF;
f01130d9:	c7 45 94 ff ff 09 f0 	movl   $0xf009ffff,-0x6c(%ebp)
			ptr6 = (char*)0x4009FFFF;
f01130e0:	c7 45 90 ff ff 09 40 	movl   $0x4009ffff,-0x70(%ebp)

			if ((*ptr1) != 'A' || (*ptr2) != 'A' || (*ptr3) != 'A' ||
f01130e7:	8b 45 bc             	mov    -0x44(%ebp),%eax
f01130ea:	8a 00                	mov    (%eax),%al
f01130ec:	3c 41                	cmp    $0x41,%al
f01130ee:	75 2d                	jne    f011311d <test_share_chunk+0x725>
f01130f0:	8b 45 b8             	mov    -0x48(%ebp),%eax
f01130f3:	8a 00                	mov    (%eax),%al
f01130f5:	3c 41                	cmp    $0x41,%al
f01130f7:	75 24                	jne    f011311d <test_share_chunk+0x725>
f01130f9:	8b 45 9c             	mov    -0x64(%ebp),%eax
f01130fc:	8a 00                	mov    (%eax),%al
f01130fe:	3c 41                	cmp    $0x41,%al
f0113100:	75 1b                	jne    f011311d <test_share_chunk+0x725>
					(*ptr4) != 'D' || (*ptr5) != 'D'|| (*ptr6) != 'D')
f0113102:	8b 45 98             	mov    -0x68(%ebp),%eax
f0113105:	8a 00                	mov    (%eax),%al
			ptr3 = (char*)0x400007FF;
			ptr4 = (char*)0x9FFFF; *ptr4 = 'D';
			ptr5 = (char*)0xF009FFFF;
			ptr6 = (char*)0x4009FFFF;

			if ((*ptr1) != 'A' || (*ptr2) != 'A' || (*ptr3) != 'A' ||
f0113107:	3c 44                	cmp    $0x44,%al
f0113109:	75 12                	jne    f011311d <test_share_chunk+0x725>
					(*ptr4) != 'D' || (*ptr5) != 'D'|| (*ptr6) != 'D')
f011310b:	8b 45 94             	mov    -0x6c(%ebp),%eax
f011310e:	8a 00                	mov    (%eax),%al
f0113110:	3c 44                	cmp    $0x44,%al
f0113112:	75 09                	jne    f011311d <test_share_chunk+0x725>
f0113114:	8b 45 90             	mov    -0x70(%ebp),%eax
f0113117:	8a 00                	mov    (%eax),%al
f0113119:	3c 44                	cmp    $0x44,%al
f011311b:	74 1e                	je     f011313b <test_share_chunk+0x743>
			{
				warn("[EVAL] share_chunk: Failed (content is not correct)\n");
f011311d:	83 ec 04             	sub    $0x4,%esp
f0113120:	68 94 98 13 f0       	push   $0xf0139894
f0113125:	68 42 04 00 00       	push   $0x442
f011312a:	68 7e 81 13 f0       	push   $0xf013817e
f011312f:	e8 fe d1 fe ff       	call   f0100332 <_warn>
f0113134:	83 c4 10             	add    $0x10,%esp
				correct = 0;
f0113137:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
			}
			if (correct) eval += 5 ;
f011313b:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f011313f:	74 04                	je     f0113145 <test_share_chunk+0x74d>
f0113141:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
			correct = 1 ;
f0113145:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
		}
	}
	cprintf("\nCASE III: END\n") ;
f0113149:	83 ec 0c             	sub    $0xc,%esp
f011314c:	68 06 8f 13 f0       	push   $0xf0138f06
f0113151:	e8 d7 da fe ff       	call   f0100c2d <cprintf>
f0113156:	83 c4 10             	add    $0x10,%esp

	/*========================================================*/
	/*PART IV: Destination page(s) not exist [User r] 30%     */
	/*========================================================*/
	cprintf("\nCASE IV: Destination page(s) not exist [User r] [30%]\n") ;
f0113159:	83 ec 0c             	sub    $0xc,%esp
f011315c:	68 a0 99 13 f0       	push   $0xf01399a0
f0113161:	e8 c7 da fe ff       	call   f0100c2d <cprintf>
f0113166:	83 c4 10             	add    $0x10,%esp
	{
		numOfFreeFramesBefore = sys_calculate_free_frames();
f0113169:	e8 50 92 ff ff       	call   f010c3be <sys_calculate_free_frames>
f011316e:	89 45 b4             	mov    %eax,-0x4c(%ebp)

		int ret = share_chunk(proc_directory, 0x9FC00,0x3FFC00, 7*kilo, PERM_USER) ;
f0113171:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0113174:	89 d0                	mov    %edx,%eax
f0113176:	01 c0                	add    %eax,%eax
f0113178:	01 d0                	add    %edx,%eax
f011317a:	01 c0                	add    %eax,%eax
f011317c:	01 d0                	add    %edx,%eax
f011317e:	83 ec 0c             	sub    $0xc,%esp
f0113181:	6a 04                	push   $0x4
f0113183:	50                   	push   %eax
f0113184:	68 00 fc 3f 00       	push   $0x3ffc00
f0113189:	68 00 fc 09 00       	push   $0x9fc00
f011318e:	ff 75 cc             	pushl  -0x34(%ebp)
f0113191:	e8 ac 52 ff ff       	call   f0108442 <share_chunk>
f0113196:	83 c4 20             	add    $0x20,%esp
f0113199:	89 45 8c             	mov    %eax,-0x74(%ebp)

		numOfFreeFramesAfter = sys_calculate_free_frames();
f011319c:	e8 1d 92 ff ff       	call   f010c3be <sys_calculate_free_frames>
f01131a1:	89 45 ac             	mov    %eax,-0x54(%ebp)

		if (ret != 0 || (numOfFreeFramesBefore - numOfFreeFramesAfter) != 1)
f01131a4:	83 7d 8c 00          	cmpl   $0x0,-0x74(%ebp)
f01131a8:	75 0b                	jne    f01131b5 <test_share_chunk+0x7bd>
f01131aa:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01131ad:	2b 45 ac             	sub    -0x54(%ebp),%eax
f01131b0:	83 f8 01             	cmp    $0x1,%eax
f01131b3:	74 28                	je     f01131dd <test_share_chunk+0x7e5>
		{
			warn("[EVAL] share_chunk: Failed (# allocated frames is not correct) ret=%d diff=%d\n", ret, numOfFreeFramesBefore - numOfFreeFramesAfter);
f01131b5:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01131b8:	2b 45 ac             	sub    -0x54(%ebp),%eax
f01131bb:	83 ec 0c             	sub    $0xc,%esp
f01131be:	50                   	push   %eax
f01131bf:	ff 75 8c             	pushl  -0x74(%ebp)
f01131c2:	68 14 99 13 f0       	push   $0xf0139914
f01131c7:	68 58 04 00 00       	push   $0x458
f01131cc:	68 7e 81 13 f0       	push   $0xf013817e
f01131d1:	e8 5c d1 fe ff       	call   f0100332 <_warn>
f01131d6:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f01131d9:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 10 ;
f01131dd:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f01131e1:	74 04                	je     f01131e7 <test_share_chunk+0x7ef>
f01131e3:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f01131e7:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		int chk_cnt = 1 ;
f01131eb:	c7 45 d4 01 00 00 00 	movl   $0x1,-0x2c(%ebp)
		if (CCP(proc_directory, 0x9F000, 0x3FF000, 12*kilo, -1, 0x005, 0x007, 0x007, 0x007, CHK_SHARE) == 0)
f01131f2:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f01131f5:	89 d0                	mov    %edx,%eax
f01131f7:	01 c0                	add    %eax,%eax
f01131f9:	01 d0                	add    %edx,%eax
f01131fb:	c1 e0 02             	shl    $0x2,%eax
f01131fe:	83 ec 08             	sub    $0x8,%esp
f0113201:	6a 02                	push   $0x2
f0113203:	6a 07                	push   $0x7
f0113205:	6a 07                	push   $0x7
f0113207:	6a 07                	push   $0x7
f0113209:	6a 05                	push   $0x5
f011320b:	6a ff                	push   $0xffffffff
f011320d:	50                   	push   %eax
f011320e:	68 00 f0 3f 00       	push   $0x3ff000
f0113213:	68 00 f0 09 00       	push   $0x9f000
f0113218:	ff 75 cc             	pushl  -0x34(%ebp)
f011321b:	e8 21 26 00 00       	call   f0115841 <CCP>
f0113220:	83 c4 30             	add    $0x30,%esp
f0113223:	85 c0                	test   %eax,%eax
f0113225:	75 25                	jne    f011324c <test_share_chunk+0x854>
		{
			warn("[EVAL] share_chunk: Failed (problem in permissions and/or references\n");
f0113227:	83 ec 04             	sub    $0x4,%esp
f011322a:	68 4c 98 13 f0       	push   $0xf013984c
f011322f:	68 61 04 00 00       	push   $0x461
f0113234:	68 7e 81 13 f0       	push   $0xf013817e
f0113239:	e8 f4 d0 fe ff       	call   f0100332 <_warn>
f011323e:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0113241:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
			chk_cnt = 0 ;
f0113245:	c7 45 d4 00 00 00 00 	movl   $0x0,-0x2c(%ebp)
		}
		if (correct) eval += 5 ;
f011324c:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0113250:	74 04                	je     f0113256 <test_share_chunk+0x85e>
f0113252:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0113256:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		if (CCP(proc_directory, 0x9F000, 0x3FF000, 4*kilo, 3, 0x005, 0x007, 0x007, 0x007, CHK_SHARE) == 0)
f011325a:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f011325d:	c1 e0 02             	shl    $0x2,%eax
f0113260:	83 ec 08             	sub    $0x8,%esp
f0113263:	6a 02                	push   $0x2
f0113265:	6a 07                	push   $0x7
f0113267:	6a 07                	push   $0x7
f0113269:	6a 07                	push   $0x7
f011326b:	6a 05                	push   $0x5
f011326d:	6a 03                	push   $0x3
f011326f:	50                   	push   %eax
f0113270:	68 00 f0 3f 00       	push   $0x3ff000
f0113275:	68 00 f0 09 00       	push   $0x9f000
f011327a:	ff 75 cc             	pushl  -0x34(%ebp)
f011327d:	e8 bf 25 00 00       	call   f0115841 <CCP>
f0113282:	83 c4 30             	add    $0x30,%esp
f0113285:	85 c0                	test   %eax,%eax
f0113287:	75 1e                	jne    f01132a7 <test_share_chunk+0x8af>
		{
			warn("[EVAL] share_chunk: Failed (problem in permissions and/or references\n");
f0113289:	83 ec 04             	sub    $0x4,%esp
f011328c:	68 4c 98 13 f0       	push   $0xf013984c
f0113291:	68 6a 04 00 00       	push   $0x46a
f0113296:	68 7e 81 13 f0       	push   $0xf013817e
f011329b:	e8 92 d0 fe ff       	call   f0100332 <_warn>
f01132a0:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f01132a3:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f01132a7:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f01132ab:	74 04                	je     f01132b1 <test_share_chunk+0x8b9>
f01132ad:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f01132b1:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		if (CCP(proc_directory, 0xA0000, 0x400000, 8*kilo, 4, 0x005, 0x007, 0x007, 0x007, CHK_SHARE) == 0)
f01132b5:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f01132b8:	c1 e0 03             	shl    $0x3,%eax
f01132bb:	83 ec 08             	sub    $0x8,%esp
f01132be:	6a 02                	push   $0x2
f01132c0:	6a 07                	push   $0x7
f01132c2:	6a 07                	push   $0x7
f01132c4:	6a 07                	push   $0x7
f01132c6:	6a 05                	push   $0x5
f01132c8:	6a 04                	push   $0x4
f01132ca:	50                   	push   %eax
f01132cb:	68 00 00 40 00       	push   $0x400000
f01132d0:	68 00 00 0a 00       	push   $0xa0000
f01132d5:	ff 75 cc             	pushl  -0x34(%ebp)
f01132d8:	e8 64 25 00 00       	call   f0115841 <CCP>
f01132dd:	83 c4 30             	add    $0x30,%esp
f01132e0:	85 c0                	test   %eax,%eax
f01132e2:	75 1e                	jne    f0113302 <test_share_chunk+0x90a>
		{
			warn("[EVAL] share_chunk: Failed (problem in permissions and/or references\n");
f01132e4:	83 ec 04             	sub    $0x4,%esp
f01132e7:	68 4c 98 13 f0       	push   $0xf013984c
f01132ec:	68 72 04 00 00       	push   $0x472
f01132f1:	68 7e 81 13 f0       	push   $0xf013817e
f01132f6:	e8 37 d0 fe ff       	call   f0100332 <_warn>
f01132fb:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f01132fe:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0113302:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0113306:	74 04                	je     f011330c <test_share_chunk+0x914>
f0113308:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f011330c:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		if (chk_cnt)
f0113310:	83 7d d4 00          	cmpl   $0x0,-0x2c(%ebp)
f0113314:	0f 84 b2 00 00 00    	je     f01133cc <test_share_chunk+0x9d4>
		{
			ptr1 = (char*)0x0009FFFF;
f011331a:	c7 45 bc ff ff 09 00 	movl   $0x9ffff,-0x44(%ebp)
			ptr2 = (char*)0x003FFFFF;
f0113321:	c7 45 b8 ff ff 3f 00 	movl   $0x3fffff,-0x48(%ebp)
			ptr3 = (char*)0x4009FFFF;
f0113328:	c7 45 9c ff ff 09 40 	movl   $0x4009ffff,-0x64(%ebp)
			ptr4 = (char*)0xF009FFFF;
f011332f:	c7 45 98 ff ff 09 f0 	movl   $0xf009ffff,-0x68(%ebp)

			ptr5 = (char*)0x000A1001;
f0113336:	c7 45 94 01 10 0a 00 	movl   $0xa1001,-0x6c(%ebp)
			ptr6 = (char*)0x00401001;
f011333d:	c7 45 90 01 10 40 00 	movl   $0x401001,-0x70(%ebp)
			ptr7 = (char*)0x400A1001;
f0113344:	c7 45 88 01 10 0a 40 	movl   $0x400a1001,-0x78(%ebp)
			ptr8 = (char*)0xF00A1001;
f011334b:	c7 45 84 01 10 0a f0 	movl   $0xf00a1001,-0x7c(%ebp)

			if ((*ptr1) != 'D' || (*ptr2) != 'D' || (*ptr3) != 'D' || (*ptr4) != 'D' ||
f0113352:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0113355:	8a 00                	mov    (%eax),%al
f0113357:	3c 44                	cmp    $0x44,%al
f0113359:	75 45                	jne    f01133a0 <test_share_chunk+0x9a8>
f011335b:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011335e:	8a 00                	mov    (%eax),%al
f0113360:	3c 44                	cmp    $0x44,%al
f0113362:	75 3c                	jne    f01133a0 <test_share_chunk+0x9a8>
f0113364:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0113367:	8a 00                	mov    (%eax),%al
f0113369:	3c 44                	cmp    $0x44,%al
f011336b:	75 33                	jne    f01133a0 <test_share_chunk+0x9a8>
f011336d:	8b 45 98             	mov    -0x68(%ebp),%eax
f0113370:	8a 00                	mov    (%eax),%al
f0113372:	3c 44                	cmp    $0x44,%al
f0113374:	75 2a                	jne    f01133a0 <test_share_chunk+0x9a8>
					(*ptr5) != (*ptr6) || (*ptr5) != (*ptr7) ||(*ptr5) != (*ptr8))
f0113376:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0113379:	8a 10                	mov    (%eax),%dl
f011337b:	8b 45 90             	mov    -0x70(%ebp),%eax
f011337e:	8a 00                	mov    (%eax),%al
			ptr5 = (char*)0x000A1001;
			ptr6 = (char*)0x00401001;
			ptr7 = (char*)0x400A1001;
			ptr8 = (char*)0xF00A1001;

			if ((*ptr1) != 'D' || (*ptr2) != 'D' || (*ptr3) != 'D' || (*ptr4) != 'D' ||
f0113380:	38 c2                	cmp    %al,%dl
f0113382:	75 1c                	jne    f01133a0 <test_share_chunk+0x9a8>
					(*ptr5) != (*ptr6) || (*ptr5) != (*ptr7) ||(*ptr5) != (*ptr8))
f0113384:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0113387:	8a 10                	mov    (%eax),%dl
f0113389:	8b 45 88             	mov    -0x78(%ebp),%eax
f011338c:	8a 00                	mov    (%eax),%al
f011338e:	38 c2                	cmp    %al,%dl
f0113390:	75 0e                	jne    f01133a0 <test_share_chunk+0x9a8>
f0113392:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0113395:	8a 10                	mov    (%eax),%dl
f0113397:	8b 45 84             	mov    -0x7c(%ebp),%eax
f011339a:	8a 00                	mov    (%eax),%al
f011339c:	38 c2                	cmp    %al,%dl
f011339e:	74 1e                	je     f01133be <test_share_chunk+0x9c6>
			{
				warn("[EVAL] share_chunk: Failed (content is not correct)\n");
f01133a0:	83 ec 04             	sub    $0x4,%esp
f01133a3:	68 94 98 13 f0       	push   $0xf0139894
f01133a8:	68 87 04 00 00       	push   $0x487
f01133ad:	68 7e 81 13 f0       	push   $0xf013817e
f01133b2:	e8 7b cf fe ff       	call   f0100332 <_warn>
f01133b7:	83 c4 10             	add    $0x10,%esp
				correct = 0;
f01133ba:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
			}
			if (correct) eval += 5 ;
f01133be:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f01133c2:	74 04                	je     f01133c8 <test_share_chunk+0x9d0>
f01133c4:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
			correct = 1 ;
f01133c8:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
		}
	}
	cprintf("\nCASE IV: END\n") ;
f01133cc:	83 ec 0c             	sub    $0xc,%esp
f01133cf:	68 d8 99 13 f0       	push   $0xf01399d8
f01133d4:	e8 54 d8 fe ff       	call   f0100c2d <cprintf>
f01133d9:	83 c4 10             	add    $0x10,%esp

	cprintf("[EVAL] share_chunk: FINISHED. Evaluation = %d\n", eval);
f01133dc:	83 ec 08             	sub    $0x8,%esp
f01133df:	ff 75 e4             	pushl  -0x1c(%ebp)
f01133e2:	68 e8 99 13 f0       	push   $0xf01399e8
f01133e7:	e8 41 d8 fe ff       	call   f0100c2d <cprintf>
f01133ec:	83 c4 10             	add    $0x10,%esp
	if(eval == 100)
f01133ef:	83 7d e4 64          	cmpl   $0x64,-0x1c(%ebp)
f01133f3:	75 10                	jne    f0113405 <test_share_chunk+0xa0d>
		cprintf("Congratulations!! test share_chunk completed successfully.\n");
f01133f5:	83 ec 0c             	sub    $0xc,%esp
f01133f8:	68 18 9a 13 f0       	push   $0xf0139a18
f01133fd:	e8 2b d8 fe ff       	call   f0100c2d <cprintf>
f0113402:	83 c4 10             	add    $0x10,%esp

	//return back to the kernel directory
	lcr3(phys_page_directory) ;
f0113405:	a1 e8 0e 6c f0       	mov    0xf06c0ee8,%eax
f011340a:	89 45 c8             	mov    %eax,-0x38(%ebp)
f011340d:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0113410:	0f 22 d8             	mov    %eax,%cr3

	return 0;
f0113413:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0113418:	8d 65 f4             	lea    -0xc(%ebp),%esp
f011341b:	5b                   	pop    %ebx
f011341c:	5e                   	pop    %esi
f011341d:	5f                   	pop    %edi
f011341e:	5d                   	pop    %ebp
f011341f:	c3                   	ret    

f0113420 <test_allocate_chunk>:

//===============================
// 4) TEST ALLOCATE CHUNK:
//===============================
int test_allocate_chunk()
{
f0113420:	55                   	push   %ebp
f0113421:	89 e5                	mov    %esp,%ebp
f0113423:	57                   	push   %edi
f0113424:	56                   	push   %esi
f0113425:	53                   	push   %ebx
f0113426:	81 ec ac 00 00 00    	sub    $0xac,%esp
	//Create a Temp. User Process
	char prog_name[50] = "fos_helloWorld";
f011342c:	8d 85 5e ff ff ff    	lea    -0xa2(%ebp),%eax
f0113432:	bb 18 8c 13 f0       	mov    $0xf0138c18,%ebx
f0113437:	ba 0f 00 00 00       	mov    $0xf,%edx
f011343c:	89 c7                	mov    %eax,%edi
f011343e:	89 de                	mov    %ebx,%esi
f0113440:	89 d1                	mov    %edx,%ecx
f0113442:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0113444:	8d 95 6d ff ff ff    	lea    -0x93(%ebp),%edx
f011344a:	b9 23 00 00 00       	mov    $0x23,%ecx
f011344f:	b0 00                	mov    $0x0,%al
f0113451:	89 d7                	mov    %edx,%edi
f0113453:	f3 aa                	rep stos %al,%es:(%edi)
	struct Env* env = env_create(prog_name, 20, 10, 0);
f0113455:	6a 00                	push   $0x0
f0113457:	6a 0a                	push   $0xa
f0113459:	6a 14                	push   $0x14
f011345b:	8d 85 5e ff ff ff    	lea    -0xa2(%ebp),%eax
f0113461:	50                   	push   %eax
f0113462:	e8 0b 52 ff ff       	call   f0108672 <env_create>
f0113467:	83 c4 10             	add    $0x10,%esp
f011346a:	89 45 d4             	mov    %eax,-0x2c(%ebp)
	uint32 *proc_directory = env->env_page_directory ;
f011346d:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0113470:	8b 40 5c             	mov    0x5c(%eax),%eax
f0113473:	89 45 d0             	mov    %eax,-0x30(%ebp)
	lcr3(env->env_cr3) ;
f0113476:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0113479:	8b 40 60             	mov    0x60(%eax),%eax
f011347c:	89 45 90             	mov    %eax,-0x70(%ebp)
f011347f:	8b 45 90             	mov    -0x70(%ebp),%eax
f0113482:	0f 22 d8             	mov    %eax,%cr3
	//===================================================

	ClearUserSpace(proc_directory);
f0113485:	83 ec 0c             	sub    $0xc,%esp
f0113488:	ff 75 d0             	pushl  -0x30(%ebp)
f011348b:	e8 7d 23 00 00       	call   f011580d <ClearUserSpace>
f0113490:	83 c4 10             	add    $0x10,%esp

	char *ptr1, *ptr2, *ptr3, *ptr4, *ptr5, *ptr6, *ptr7, *ptr8;
	char tptr[10] ;
	int kilo = 1024 ;
f0113493:	c7 45 c8 00 04 00 00 	movl   $0x400,-0x38(%ebp)
	int mega = 1024*1024 ;
f011349a:	c7 45 c4 00 00 10 00 	movl   $0x100000,-0x3c(%ebp)
	uint32 eval = 0;
f01134a1:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
	uint8 correct =1 ;
f01134a8:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	extern char end_of_kernel[];

	/*======================================*/
	/*PART I: Destination page(s) exist 30% */
	/*======================================*/
	cprintf("\nCASE I: Destination page(s) exist [30%]\n") ;
f01134ac:	83 ec 0c             	sub    $0xc,%esp
f01134af:	68 54 9a 13 f0       	push   $0xf0139a54
f01134b4:	e8 74 d7 fe ff       	call   f0100c2d <cprintf>
f01134b9:	83 c4 10             	add    $0x10,%esp
	{
		ptr1 = (char*)KERNEL_STACK_TOP - 1;
f01134bc:	c7 45 c0 ff ff bf ef 	movl   $0xefbfffff,-0x40(%ebp)
		ptr2 = (char*)KERNEL_STACK_TOP - 2;
f01134c3:	c7 45 bc fe ff bf ef 	movl   $0xefbffffe,-0x44(%ebp)
		tptr[1] = *ptr1 ;
f01134ca:	8b 45 c0             	mov    -0x40(%ebp),%eax
f01134cd:	8a 00                	mov    (%eax),%al
f01134cf:	88 85 55 ff ff ff    	mov    %al,-0xab(%ebp)
		tptr[2] = *ptr2 ;
f01134d5:	8b 45 bc             	mov    -0x44(%ebp),%eax
f01134d8:	8a 00                	mov    (%eax),%al
f01134da:	88 85 56 ff ff ff    	mov    %al,-0xaa(%ebp)
		uint32 old_perms = GP(proc_directory, KERNEL_STACK_TOP - 1*PAGE_SIZE) ;
f01134e0:	83 ec 08             	sub    $0x8,%esp
f01134e3:	68 00 f0 bf ef       	push   $0xefbff000
f01134e8:	ff 75 d0             	pushl  -0x30(%ebp)
f01134eb:	e8 84 22 00 00       	call   f0115774 <GP>
f01134f0:	83 c4 10             	add    $0x10,%esp
f01134f3:	89 45 b8             	mov    %eax,-0x48(%ebp)
		numOfFreeFramesBefore = sys_calculate_free_frames();
f01134f6:	e8 c3 8e ff ff       	call   f010c3be <sys_calculate_free_frames>
f01134fb:	89 45 b4             	mov    %eax,-0x4c(%ebp)

		int ret = allocate_chunk(proc_directory, KERNEL_STACK_TOP - 1*PAGE_SIZE, 4*kilo, PERM_WRITEABLE) ;
f01134fe:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0113501:	c1 e0 02             	shl    $0x2,%eax
f0113504:	6a 02                	push   $0x2
f0113506:	50                   	push   %eax
f0113507:	68 00 f0 bf ef       	push   $0xefbff000
f011350c:	ff 75 d0             	pushl  -0x30(%ebp)
f011350f:	e8 48 4f ff ff       	call   f010845c <allocate_chunk>
f0113514:	83 c4 10             	add    $0x10,%esp
f0113517:	89 45 b0             	mov    %eax,-0x50(%ebp)

		numOfFreeFramesAfter = sys_calculate_free_frames();
f011351a:	e8 9f 8e ff ff       	call   f010c3be <sys_calculate_free_frames>
f011351f:	89 45 ac             	mov    %eax,-0x54(%ebp)

		if (ret != -1 || (numOfFreeFramesBefore - numOfFreeFramesAfter) != 0)
f0113522:	83 7d b0 ff          	cmpl   $0xffffffff,-0x50(%ebp)
f0113526:	75 08                	jne    f0113530 <test_allocate_chunk+0x110>
f0113528:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f011352b:	3b 45 ac             	cmp    -0x54(%ebp),%eax
f011352e:	74 2a                	je     f011355a <test_allocate_chunk+0x13a>
		{
			warn("[EVAL] allocate_chunk: Failed (dest is exist... operation should be denied) ret=%d diff=%d expected=%d\n", ret, (numOfFreeFramesBefore - numOfFreeFramesAfter), 0);
f0113530:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0113533:	2b 45 ac             	sub    -0x54(%ebp),%eax
f0113536:	83 ec 08             	sub    $0x8,%esp
f0113539:	6a 00                	push   $0x0
f011353b:	50                   	push   %eax
f011353c:	ff 75 b0             	pushl  -0x50(%ebp)
f011353f:	68 80 9a 13 f0       	push   $0xf0139a80
f0113544:	68 c3 04 00 00       	push   $0x4c3
f0113549:	68 7e 81 13 f0       	push   $0xf013817e
f011354e:	e8 df cd fe ff       	call   f0100332 <_warn>
f0113553:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0113556:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 10 ;
f011355a:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f011355e:	74 04                	je     f0113564 <test_allocate_chunk+0x144>
f0113560:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f0113564:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		numOfFreeFramesBefore = sys_calculate_free_frames();
f0113568:	e8 51 8e ff ff       	call   f010c3be <sys_calculate_free_frames>
f011356d:	89 45 b4             	mov    %eax,-0x4c(%ebp)

		ret = allocate_chunk(proc_directory, KERNEL_STACK_TOP - 5*kilo, 2*kilo, PERM_WRITEABLE) ;
f0113570:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0113573:	01 c0                	add    %eax,%eax
f0113575:	89 c1                	mov    %eax,%ecx
f0113577:	8b 55 c8             	mov    -0x38(%ebp),%edx
f011357a:	89 d0                	mov    %edx,%eax
f011357c:	c1 e0 02             	shl    $0x2,%eax
f011357f:	01 d0                	add    %edx,%eax
f0113581:	f7 d8                	neg    %eax
f0113583:	2d 00 00 40 10       	sub    $0x10400000,%eax
f0113588:	6a 02                	push   $0x2
f011358a:	51                   	push   %ecx
f011358b:	50                   	push   %eax
f011358c:	ff 75 d0             	pushl  -0x30(%ebp)
f011358f:	e8 c8 4e ff ff       	call   f010845c <allocate_chunk>
f0113594:	83 c4 10             	add    $0x10,%esp
f0113597:	89 45 b0             	mov    %eax,-0x50(%ebp)

		numOfFreeFramesAfter = sys_calculate_free_frames();
f011359a:	e8 1f 8e ff ff       	call   f010c3be <sys_calculate_free_frames>
f011359f:	89 45 ac             	mov    %eax,-0x54(%ebp)

		if (ret != -1 || (numOfFreeFramesBefore - numOfFreeFramesAfter) != 0)
f01135a2:	83 7d b0 ff          	cmpl   $0xffffffff,-0x50(%ebp)
f01135a6:	75 08                	jne    f01135b0 <test_allocate_chunk+0x190>
f01135a8:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01135ab:	3b 45 ac             	cmp    -0x54(%ebp),%eax
f01135ae:	74 2a                	je     f01135da <test_allocate_chunk+0x1ba>
		{
			warn("[EVAL] allocate_chunk: Failed (dest is exist... operation should be denied) ret=%d diff=%d expected=%d\n", ret, (numOfFreeFramesBefore - numOfFreeFramesAfter), 0);
f01135b0:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01135b3:	2b 45 ac             	sub    -0x54(%ebp),%eax
f01135b6:	83 ec 08             	sub    $0x8,%esp
f01135b9:	6a 00                	push   $0x0
f01135bb:	50                   	push   %eax
f01135bc:	ff 75 b0             	pushl  -0x50(%ebp)
f01135bf:	68 80 9a 13 f0       	push   $0xf0139a80
f01135c4:	68 d1 04 00 00       	push   $0x4d1
f01135c9:	68 7e 81 13 f0       	push   $0xf013817e
f01135ce:	e8 5f cd fe ff       	call   f0100332 <_warn>
f01135d3:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f01135d6:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 10 ;
f01135da:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f01135de:	74 04                	je     f01135e4 <test_allocate_chunk+0x1c4>
f01135e0:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f01135e4:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		if (CCP(proc_directory, 0, KERNEL_STACK_TOP-1*PAGE_SIZE, 4*kilo, 1, old_perms, 0xFFF, 0, 0, CHK_ALLOC) == 0)
f01135e8:	8b 45 c8             	mov    -0x38(%ebp),%eax
f01135eb:	c1 e0 02             	shl    $0x2,%eax
f01135ee:	83 ec 08             	sub    $0x8,%esp
f01135f1:	6a 03                	push   $0x3
f01135f3:	6a 00                	push   $0x0
f01135f5:	6a 00                	push   $0x0
f01135f7:	68 ff 0f 00 00       	push   $0xfff
f01135fc:	ff 75 b8             	pushl  -0x48(%ebp)
f01135ff:	6a 01                	push   $0x1
f0113601:	50                   	push   %eax
f0113602:	68 00 f0 bf ef       	push   $0xefbff000
f0113607:	6a 00                	push   $0x0
f0113609:	ff 75 d0             	pushl  -0x30(%ebp)
f011360c:	e8 30 22 00 00       	call   f0115841 <CCP>
f0113611:	83 c4 30             	add    $0x30,%esp
f0113614:	85 c0                	test   %eax,%eax
f0113616:	75 1e                	jne    f0113636 <test_allocate_chunk+0x216>
		{
			warn("[EVAL] allocate_chunk: Failed (problem in permissions and/or references\n");
f0113618:	83 ec 04             	sub    $0x4,%esp
f011361b:	68 e8 9a 13 f0       	push   $0xf0139ae8
f0113620:	68 d9 04 00 00       	push   $0x4d9
f0113625:	68 7e 81 13 f0       	push   $0xf013817e
f011362a:	e8 03 cd fe ff       	call   f0100332 <_warn>
f011362f:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0113632:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0113636:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f011363a:	74 04                	je     f0113640 <test_allocate_chunk+0x220>
f011363c:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0113640:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		if ((*ptr1) != tptr[1] || (*ptr2) != tptr[2])
f0113644:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0113647:	8a 10                	mov    (%eax),%dl
f0113649:	8a 85 55 ff ff ff    	mov    -0xab(%ebp),%al
f011364f:	38 c2                	cmp    %al,%dl
f0113651:	75 0f                	jne    f0113662 <test_allocate_chunk+0x242>
f0113653:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0113656:	8a 10                	mov    (%eax),%dl
f0113658:	8a 85 56 ff ff ff    	mov    -0xaa(%ebp),%al
f011365e:	38 c2                	cmp    %al,%dl
f0113660:	74 1e                	je     f0113680 <test_allocate_chunk+0x260>
		{
			warn("[EVAL] allocate_chunk: Failed (content is not correct)\n");
f0113662:	83 ec 04             	sub    $0x4,%esp
f0113665:	68 34 9b 13 f0       	push   $0xf0139b34
f011366a:	68 e1 04 00 00       	push   $0x4e1
f011366f:	68 7e 81 13 f0       	push   $0xf013817e
f0113674:	e8 b9 cc fe ff       	call   f0100332 <_warn>
f0113679:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f011367c:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0113680:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0113684:	74 04                	je     f011368a <test_allocate_chunk+0x26a>
f0113686:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f011368a:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	}
	cprintf("\nCASE I: END\n") ;
f011368e:	83 ec 0c             	sub    $0xc,%esp
f0113691:	68 c9 98 13 f0       	push   $0xf01398c9
f0113696:	e8 92 d5 fe ff       	call   f0100c2d <cprintf>
f011369b:	83 c4 10             	add    $0x10,%esp

	/*============================================================*/
	/*PART II: Destination page(s) not exist [Supervisor r/w] 20% */
	/*============================================================*/
	cprintf("\nCASE II: Destination page(s) not exist [Supervisor r/w] [20%]\n") ;
f011369e:	83 ec 0c             	sub    $0xc,%esp
f01136a1:	68 6c 9b 13 f0       	push   $0xf0139b6c
f01136a6:	e8 82 d5 fe ff       	call   f0100c2d <cprintf>
f01136ab:	83 c4 10             	add    $0x10,%esp
	{
		numOfFreeFramesBefore = sys_calculate_free_frames();
f01136ae:	e8 0b 8d ff ff       	call   f010c3be <sys_calculate_free_frames>
f01136b3:	89 45 b4             	mov    %eax,-0x4c(%ebp)

		int ret = allocate_chunk(proc_directory, 0x0, 32*mega, PERM_WRITEABLE | PERM_AVAILABLE) ;
f01136b6:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f01136b9:	c1 e0 05             	shl    $0x5,%eax
f01136bc:	68 02 0e 00 00       	push   $0xe02
f01136c1:	50                   	push   %eax
f01136c2:	6a 00                	push   $0x0
f01136c4:	ff 75 d0             	pushl  -0x30(%ebp)
f01136c7:	e8 90 4d ff ff       	call   f010845c <allocate_chunk>
f01136cc:	83 c4 10             	add    $0x10,%esp
f01136cf:	89 45 a8             	mov    %eax,-0x58(%ebp)

		numOfFreeFramesAfter = sys_calculate_free_frames();
f01136d2:	e8 e7 8c ff ff       	call   f010c3be <sys_calculate_free_frames>
f01136d7:	89 45 ac             	mov    %eax,-0x54(%ebp)

		if (ret != 0 || (numOfFreeFramesBefore - numOfFreeFramesAfter) != ((32*mega)/(4*mega) + (32*mega)/(4*kilo)))
f01136da:	83 7d a8 00          	cmpl   $0x0,-0x58(%ebp)
f01136de:	75 36                	jne    f0113716 <test_allocate_chunk+0x2f6>
f01136e0:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01136e3:	2b 45 ac             	sub    -0x54(%ebp),%eax
f01136e6:	89 c1                	mov    %eax,%ecx
f01136e8:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f01136eb:	c1 e0 05             	shl    $0x5,%eax
f01136ee:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f01136f1:	8d 34 95 00 00 00 00 	lea    0x0(,%edx,4),%esi
f01136f8:	99                   	cltd   
f01136f9:	f7 fe                	idiv   %esi
f01136fb:	89 c3                	mov    %eax,%ebx
f01136fd:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0113700:	c1 e0 05             	shl    $0x5,%eax
f0113703:	8b 55 c8             	mov    -0x38(%ebp),%edx
f0113706:	8d 34 95 00 00 00 00 	lea    0x0(,%edx,4),%esi
f011370d:	99                   	cltd   
f011370e:	f7 fe                	idiv   %esi
f0113710:	01 d8                	add    %ebx,%eax
f0113712:	39 c1                	cmp    %eax,%ecx
f0113714:	74 54                	je     f011376a <test_allocate_chunk+0x34a>
		{
			warn("[EVAL] allocate_chunk: Failed (# allocated frames is not correct) ret=%d diff=%d expected=%d\n", ret, numOfFreeFramesBefore - numOfFreeFramesAfter, ((32*mega)/(4*mega) + (32*mega)/(4*kilo)));
f0113716:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0113719:	c1 e0 05             	shl    $0x5,%eax
f011371c:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f011371f:	8d 3c 95 00 00 00 00 	lea    0x0(,%edx,4),%edi
f0113726:	99                   	cltd   
f0113727:	f7 ff                	idiv   %edi
f0113729:	89 c1                	mov    %eax,%ecx
f011372b:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f011372e:	c1 e0 05             	shl    $0x5,%eax
f0113731:	8b 55 c8             	mov    -0x38(%ebp),%edx
f0113734:	8d 34 95 00 00 00 00 	lea    0x0(,%edx,4),%esi
f011373b:	99                   	cltd   
f011373c:	f7 fe                	idiv   %esi
f011373e:	8d 14 01             	lea    (%ecx,%eax,1),%edx
f0113741:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0113744:	2b 45 ac             	sub    -0x54(%ebp),%eax
f0113747:	83 ec 08             	sub    $0x8,%esp
f011374a:	52                   	push   %edx
f011374b:	50                   	push   %eax
f011374c:	ff 75 a8             	pushl  -0x58(%ebp)
f011374f:	68 ac 9b 13 f0       	push   $0xf0139bac
f0113754:	68 f6 04 00 00       	push   $0x4f6
f0113759:	68 7e 81 13 f0       	push   $0xf013817e
f011375e:	e8 cf cb fe ff       	call   f0100332 <_warn>
f0113763:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0113766:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f011376a:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f011376e:	74 04                	je     f0113774 <test_allocate_chunk+0x354>
f0113770:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0113774:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		int chk_cnt = 1 ;
f0113778:	c7 45 dc 01 00 00 00 	movl   $0x1,-0x24(%ebp)
		if (CCP(proc_directory, 0, 0x0, 32*mega, 1, 0xE03, 0xE07, 0, 0, CHK_ALLOC) == 0)
f011377f:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0113782:	c1 e0 05             	shl    $0x5,%eax
f0113785:	83 ec 08             	sub    $0x8,%esp
f0113788:	6a 03                	push   $0x3
f011378a:	6a 00                	push   $0x0
f011378c:	6a 00                	push   $0x0
f011378e:	68 07 0e 00 00       	push   $0xe07
f0113793:	68 03 0e 00 00       	push   $0xe03
f0113798:	6a 01                	push   $0x1
f011379a:	50                   	push   %eax
f011379b:	6a 00                	push   $0x0
f011379d:	6a 00                	push   $0x0
f011379f:	ff 75 d0             	pushl  -0x30(%ebp)
f01137a2:	e8 9a 20 00 00       	call   f0115841 <CCP>
f01137a7:	83 c4 30             	add    $0x30,%esp
f01137aa:	85 c0                	test   %eax,%eax
f01137ac:	75 25                	jne    f01137d3 <test_allocate_chunk+0x3b3>
		{
			warn("[EVAL] allocate_chunk: Failed (problem in permissions and/or references\n");
f01137ae:	83 ec 04             	sub    $0x4,%esp
f01137b1:	68 e8 9a 13 f0       	push   $0xf0139ae8
f01137b6:	68 ff 04 00 00       	push   $0x4ff
f01137bb:	68 7e 81 13 f0       	push   $0xf013817e
f01137c0:	e8 6d cb fe ff       	call   f0100332 <_warn>
f01137c5:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f01137c8:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
			chk_cnt = 0 ;
f01137cc:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
		}
		if (correct) eval += 10 ;
f01137d3:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f01137d7:	74 04                	je     f01137dd <test_allocate_chunk+0x3bd>
f01137d9:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f01137dd:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		if (chk_cnt)
f01137e1:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f01137e5:	74 5a                	je     f0113841 <test_allocate_chunk+0x421>
		{
			ptr1 = (char*)(0x0+2*kilo); *ptr1 = 'K' ;
f01137e7:	8b 45 c8             	mov    -0x38(%ebp),%eax
f01137ea:	01 c0                	add    %eax,%eax
f01137ec:	89 45 c0             	mov    %eax,-0x40(%ebp)
f01137ef:	8b 45 c0             	mov    -0x40(%ebp),%eax
f01137f2:	c6 00 4b             	movb   $0x4b,(%eax)
			ptr2 = (char*)(0x0+2*mega); *ptr2 = 'M' ;
f01137f5:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f01137f8:	01 c0                	add    %eax,%eax
f01137fa:	89 45 bc             	mov    %eax,-0x44(%ebp)
f01137fd:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0113800:	c6 00 4d             	movb   $0x4d,(%eax)

			if ((*ptr1) != 'K' || (*ptr2) != 'M')
f0113803:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0113806:	8a 00                	mov    (%eax),%al
f0113808:	3c 4b                	cmp    $0x4b,%al
f011380a:	75 09                	jne    f0113815 <test_allocate_chunk+0x3f5>
f011380c:	8b 45 bc             	mov    -0x44(%ebp),%eax
f011380f:	8a 00                	mov    (%eax),%al
f0113811:	3c 4d                	cmp    $0x4d,%al
f0113813:	74 1e                	je     f0113833 <test_allocate_chunk+0x413>
			{
				warn("[EVAL] allocate_chunk: Failed (content is not correct)\n");
f0113815:	83 ec 04             	sub    $0x4,%esp
f0113818:	68 34 9b 13 f0       	push   $0xf0139b34
f011381d:	68 0d 05 00 00       	push   $0x50d
f0113822:	68 7e 81 13 f0       	push   $0xf013817e
f0113827:	e8 06 cb fe ff       	call   f0100332 <_warn>
f011382c:	83 c4 10             	add    $0x10,%esp
				correct = 0;
f011382f:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
			}
			if (correct) eval += 5 ;
f0113833:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0113837:	74 04                	je     f011383d <test_allocate_chunk+0x41d>
f0113839:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
			correct = 1 ;
f011383d:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
		}
	}
	cprintf("\nCASE II: END\n") ;
f0113841:	83 ec 0c             	sub    $0xc,%esp
f0113844:	68 a3 8e 13 f0       	push   $0xf0138ea3
f0113849:	e8 df d3 fe ff       	call   f0100c2d <cprintf>
f011384e:	83 c4 10             	add    $0x10,%esp

	/*============================================================*/
	/*PART III: Destination page(s) not exist [Supervisor r] 15%  */
	/*============================================================*/
	cprintf("\nCASE III: Destination page(s) not exist [Supervisor r] [15%]\n") ;
f0113851:	83 ec 0c             	sub    $0xc,%esp
f0113854:	68 0c 9c 13 f0       	push   $0xf0139c0c
f0113859:	e8 cf d3 fe ff       	call   f0100c2d <cprintf>
f011385e:	83 c4 10             	add    $0x10,%esp
	{
		numOfFreeFramesBefore = sys_calculate_free_frames();
f0113861:	e8 58 8b ff ff       	call   f010c3be <sys_calculate_free_frames>
f0113866:	89 45 b4             	mov    %eax,-0x4c(%ebp)

		int ret = allocate_chunk(proc_directory, 0x0+32*mega, 64*mega, 0) ;
f0113869:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f011386c:	c1 e0 06             	shl    $0x6,%eax
f011386f:	89 c2                	mov    %eax,%edx
f0113871:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0113874:	c1 e0 05             	shl    $0x5,%eax
f0113877:	6a 00                	push   $0x0
f0113879:	52                   	push   %edx
f011387a:	50                   	push   %eax
f011387b:	ff 75 d0             	pushl  -0x30(%ebp)
f011387e:	e8 d9 4b ff ff       	call   f010845c <allocate_chunk>
f0113883:	83 c4 10             	add    $0x10,%esp
f0113886:	89 45 a4             	mov    %eax,-0x5c(%ebp)

		numOfFreeFramesAfter = sys_calculate_free_frames();
f0113889:	e8 30 8b ff ff       	call   f010c3be <sys_calculate_free_frames>
f011388e:	89 45 ac             	mov    %eax,-0x54(%ebp)

		if (ret != 0 || (numOfFreeFramesBefore - numOfFreeFramesAfter) != ((64*mega)/(4*mega) + (64*mega)/(4*kilo)))
f0113891:	83 7d a4 00          	cmpl   $0x0,-0x5c(%ebp)
f0113895:	75 36                	jne    f01138cd <test_allocate_chunk+0x4ad>
f0113897:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f011389a:	2b 45 ac             	sub    -0x54(%ebp),%eax
f011389d:	89 c1                	mov    %eax,%ecx
f011389f:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f01138a2:	c1 e0 06             	shl    $0x6,%eax
f01138a5:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f01138a8:	8d 3c 95 00 00 00 00 	lea    0x0(,%edx,4),%edi
f01138af:	99                   	cltd   
f01138b0:	f7 ff                	idiv   %edi
f01138b2:	89 c3                	mov    %eax,%ebx
f01138b4:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f01138b7:	c1 e0 06             	shl    $0x6,%eax
f01138ba:	8b 55 c8             	mov    -0x38(%ebp),%edx
f01138bd:	8d 34 95 00 00 00 00 	lea    0x0(,%edx,4),%esi
f01138c4:	99                   	cltd   
f01138c5:	f7 fe                	idiv   %esi
f01138c7:	01 d8                	add    %ebx,%eax
f01138c9:	39 c1                	cmp    %eax,%ecx
f01138cb:	74 54                	je     f0113921 <test_allocate_chunk+0x501>
		{
			warn("[EVAL] allocate_chunk: Failed (# allocated frames is not correct) ret=%d diff=%d expected=%d\n", ret, numOfFreeFramesBefore - numOfFreeFramesAfter, ((64*mega)/(4*mega) + (64*mega)/(4*kilo)));
f01138cd:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f01138d0:	c1 e0 06             	shl    $0x6,%eax
f01138d3:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f01138d6:	8d 1c 95 00 00 00 00 	lea    0x0(,%edx,4),%ebx
f01138dd:	99                   	cltd   
f01138de:	f7 fb                	idiv   %ebx
f01138e0:	89 c1                	mov    %eax,%ecx
f01138e2:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f01138e5:	c1 e0 06             	shl    $0x6,%eax
f01138e8:	8b 55 c8             	mov    -0x38(%ebp),%edx
f01138eb:	8d 3c 95 00 00 00 00 	lea    0x0(,%edx,4),%edi
f01138f2:	99                   	cltd   
f01138f3:	f7 ff                	idiv   %edi
f01138f5:	8d 14 01             	lea    (%ecx,%eax,1),%edx
f01138f8:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01138fb:	2b 45 ac             	sub    -0x54(%ebp),%eax
f01138fe:	83 ec 08             	sub    $0x8,%esp
f0113901:	52                   	push   %edx
f0113902:	50                   	push   %eax
f0113903:	ff 75 a4             	pushl  -0x5c(%ebp)
f0113906:	68 ac 9b 13 f0       	push   $0xf0139bac
f011390b:	68 23 05 00 00       	push   $0x523
f0113910:	68 7e 81 13 f0       	push   $0xf013817e
f0113915:	e8 18 ca fe ff       	call   f0100332 <_warn>
f011391a:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f011391d:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0113921:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0113925:	74 04                	je     f011392b <test_allocate_chunk+0x50b>
f0113927:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f011392b:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		int chk_cnt = 1 ;
f011392f:	c7 45 a0 01 00 00 00 	movl   $0x1,-0x60(%ebp)
		if (CCP(proc_directory, 0, 0x0+32*mega, 64*mega, 1, 0x001, 0xE07, 0, 0, CHK_ALLOC) == 0)
f0113936:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0113939:	c1 e0 06             	shl    $0x6,%eax
f011393c:	89 c2                	mov    %eax,%edx
f011393e:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0113941:	c1 e0 05             	shl    $0x5,%eax
f0113944:	83 ec 08             	sub    $0x8,%esp
f0113947:	6a 03                	push   $0x3
f0113949:	6a 00                	push   $0x0
f011394b:	6a 00                	push   $0x0
f011394d:	68 07 0e 00 00       	push   $0xe07
f0113952:	6a 01                	push   $0x1
f0113954:	6a 01                	push   $0x1
f0113956:	52                   	push   %edx
f0113957:	50                   	push   %eax
f0113958:	6a 00                	push   $0x0
f011395a:	ff 75 d0             	pushl  -0x30(%ebp)
f011395d:	e8 df 1e 00 00       	call   f0115841 <CCP>
f0113962:	83 c4 30             	add    $0x30,%esp
f0113965:	85 c0                	test   %eax,%eax
f0113967:	75 25                	jne    f011398e <test_allocate_chunk+0x56e>
		{
			warn("[EVAL] allocate_chunk: Failed (problem in permissions and/or references\n");
f0113969:	83 ec 04             	sub    $0x4,%esp
f011396c:	68 e8 9a 13 f0       	push   $0xf0139ae8
f0113971:	68 2c 05 00 00       	push   $0x52c
f0113976:	68 7e 81 13 f0       	push   $0xf013817e
f011397b:	e8 b2 c9 fe ff       	call   f0100332 <_warn>
f0113980:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0113983:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
			chk_cnt = 0 ;
f0113987:	c7 45 a0 00 00 00 00 	movl   $0x0,-0x60(%ebp)
		}
		if (correct) eval += 10 ;
f011398e:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0113992:	74 04                	je     f0113998 <test_allocate_chunk+0x578>
f0113994:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f0113998:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	}
	cprintf("\nCASE III: END\n") ;
f011399c:	83 ec 0c             	sub    $0xc,%esp
f011399f:	68 06 8f 13 f0       	push   $0xf0138f06
f01139a4:	e8 84 d2 fe ff       	call   f0100c2d <cprintf>
f01139a9:	83 c4 10             	add    $0x10,%esp

	/*========================================================*/
	/*PART IV: Destination page(s) not exist [User r/w] 20%  */
	/*========================================================*/
	cprintf("\nCASE IV: Destination page(s) not exist [User r/w] [20%]\n") ;
f01139ac:	83 ec 0c             	sub    $0xc,%esp
f01139af:	68 4c 9c 13 f0       	push   $0xf0139c4c
f01139b4:	e8 74 d2 fe ff       	call   f0100c2d <cprintf>
f01139b9:	83 c4 10             	add    $0x10,%esp
	{
		numOfFreeFramesBefore = sys_calculate_free_frames();
f01139bc:	e8 fd 89 ff ff       	call   f010c3be <sys_calculate_free_frames>
f01139c1:	89 45 b4             	mov    %eax,-0x4c(%ebp)

		int ret = allocate_chunk(proc_directory, USER_HEAP_START, 64*mega, PERM_WRITEABLE|PERM_USER|PERM_AVAILABLE) ;
f01139c4:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f01139c7:	c1 e0 06             	shl    $0x6,%eax
f01139ca:	68 06 0e 00 00       	push   $0xe06
f01139cf:	50                   	push   %eax
f01139d0:	68 00 00 00 80       	push   $0x80000000
f01139d5:	ff 75 d0             	pushl  -0x30(%ebp)
f01139d8:	e8 7f 4a ff ff       	call   f010845c <allocate_chunk>
f01139dd:	83 c4 10             	add    $0x10,%esp
f01139e0:	89 45 9c             	mov    %eax,-0x64(%ebp)

		numOfFreeFramesAfter = sys_calculate_free_frames();
f01139e3:	e8 d6 89 ff ff       	call   f010c3be <sys_calculate_free_frames>
f01139e8:	89 45 ac             	mov    %eax,-0x54(%ebp)

		if (ret != 0 || (numOfFreeFramesBefore - numOfFreeFramesAfter) != ((64*mega)/(4*kilo)+(64*mega)/(4*mega)))
f01139eb:	83 7d 9c 00          	cmpl   $0x0,-0x64(%ebp)
f01139ef:	75 36                	jne    f0113a27 <test_allocate_chunk+0x607>
f01139f1:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01139f4:	2b 45 ac             	sub    -0x54(%ebp),%eax
f01139f7:	89 c1                	mov    %eax,%ecx
f01139f9:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f01139fc:	c1 e0 06             	shl    $0x6,%eax
f01139ff:	8b 55 c8             	mov    -0x38(%ebp),%edx
f0113a02:	8d 1c 95 00 00 00 00 	lea    0x0(,%edx,4),%ebx
f0113a09:	99                   	cltd   
f0113a0a:	f7 fb                	idiv   %ebx
f0113a0c:	89 c3                	mov    %eax,%ebx
f0113a0e:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0113a11:	c1 e0 06             	shl    $0x6,%eax
f0113a14:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0113a17:	8d 34 95 00 00 00 00 	lea    0x0(,%edx,4),%esi
f0113a1e:	99                   	cltd   
f0113a1f:	f7 fe                	idiv   %esi
f0113a21:	01 d8                	add    %ebx,%eax
f0113a23:	39 c1                	cmp    %eax,%ecx
f0113a25:	74 54                	je     f0113a7b <test_allocate_chunk+0x65b>
		{
			warn("[EVAL] allocate_chunk: Failed (# allocated frames is not correct) ret=%d diff=%d expected=%d\n", ret, numOfFreeFramesBefore - numOfFreeFramesAfter, ((64*mega)/(4*kilo)+(64*mega)/(4*mega)));
f0113a27:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0113a2a:	c1 e0 06             	shl    $0x6,%eax
f0113a2d:	8b 55 c8             	mov    -0x38(%ebp),%edx
f0113a30:	8d 3c 95 00 00 00 00 	lea    0x0(,%edx,4),%edi
f0113a37:	99                   	cltd   
f0113a38:	f7 ff                	idiv   %edi
f0113a3a:	89 c1                	mov    %eax,%ecx
f0113a3c:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0113a3f:	c1 e0 06             	shl    $0x6,%eax
f0113a42:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0113a45:	8d 1c 95 00 00 00 00 	lea    0x0(,%edx,4),%ebx
f0113a4c:	99                   	cltd   
f0113a4d:	f7 fb                	idiv   %ebx
f0113a4f:	8d 14 01             	lea    (%ecx,%eax,1),%edx
f0113a52:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0113a55:	2b 45 ac             	sub    -0x54(%ebp),%eax
f0113a58:	83 ec 08             	sub    $0x8,%esp
f0113a5b:	52                   	push   %edx
f0113a5c:	50                   	push   %eax
f0113a5d:	ff 75 9c             	pushl  -0x64(%ebp)
f0113a60:	68 ac 9b 13 f0       	push   $0xf0139bac
f0113a65:	68 42 05 00 00       	push   $0x542
f0113a6a:	68 7e 81 13 f0       	push   $0xf013817e
f0113a6f:	e8 be c8 fe ff       	call   f0100332 <_warn>
f0113a74:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0113a77:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0113a7b:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0113a7f:	74 04                	je     f0113a85 <test_allocate_chunk+0x665>
f0113a81:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0113a85:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		int chk_cnt = 1 ;
f0113a89:	c7 45 d8 01 00 00 00 	movl   $0x1,-0x28(%ebp)
		if (CCP(proc_directory, 0, USER_HEAP_START, 64*mega, 1, 0xE07, 0xE07, 0, 0, CHK_ALLOC) == 0)
f0113a90:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0113a93:	c1 e0 06             	shl    $0x6,%eax
f0113a96:	83 ec 08             	sub    $0x8,%esp
f0113a99:	6a 03                	push   $0x3
f0113a9b:	6a 00                	push   $0x0
f0113a9d:	6a 00                	push   $0x0
f0113a9f:	68 07 0e 00 00       	push   $0xe07
f0113aa4:	68 07 0e 00 00       	push   $0xe07
f0113aa9:	6a 01                	push   $0x1
f0113aab:	50                   	push   %eax
f0113aac:	68 00 00 00 80       	push   $0x80000000
f0113ab1:	6a 00                	push   $0x0
f0113ab3:	ff 75 d0             	pushl  -0x30(%ebp)
f0113ab6:	e8 86 1d 00 00       	call   f0115841 <CCP>
f0113abb:	83 c4 30             	add    $0x30,%esp
f0113abe:	85 c0                	test   %eax,%eax
f0113ac0:	75 25                	jne    f0113ae7 <test_allocate_chunk+0x6c7>
		{
			warn("[EVAL] allocate_chunk: Failed (problem in permissions and/or references\n");
f0113ac2:	83 ec 04             	sub    $0x4,%esp
f0113ac5:	68 e8 9a 13 f0       	push   $0xf0139ae8
f0113aca:	68 4b 05 00 00       	push   $0x54b
f0113acf:	68 7e 81 13 f0       	push   $0xf013817e
f0113ad4:	e8 59 c8 fe ff       	call   f0100332 <_warn>
f0113ad9:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0113adc:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
			chk_cnt = 0 ;
f0113ae0:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
		}
		if (correct) eval += 10 ;
f0113ae7:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0113aeb:	74 04                	je     f0113af1 <test_allocate_chunk+0x6d1>
f0113aed:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f0113af1:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		if (chk_cnt)
f0113af5:	83 7d d8 00          	cmpl   $0x0,-0x28(%ebp)
f0113af9:	74 6f                	je     f0113b6a <test_allocate_chunk+0x74a>
		{
			ptr1 = (char*)(USER_HEAP_START+2*kilo); *ptr1 = 'K' ;
f0113afb:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0113afe:	01 c0                	add    %eax,%eax
f0113b00:	05 00 00 00 80       	add    $0x80000000,%eax
f0113b05:	89 45 c0             	mov    %eax,-0x40(%ebp)
f0113b08:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0113b0b:	c6 00 4b             	movb   $0x4b,(%eax)
			ptr2 = (char*)(USER_HEAP_START+22*mega);*ptr2 = 'M' ;
f0113b0e:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0113b11:	89 d0                	mov    %edx,%eax
f0113b13:	c1 e0 02             	shl    $0x2,%eax
f0113b16:	01 d0                	add    %edx,%eax
f0113b18:	01 c0                	add    %eax,%eax
f0113b1a:	01 d0                	add    %edx,%eax
f0113b1c:	01 c0                	add    %eax,%eax
f0113b1e:	05 00 00 00 80       	add    $0x80000000,%eax
f0113b23:	89 45 bc             	mov    %eax,-0x44(%ebp)
f0113b26:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0113b29:	c6 00 4d             	movb   $0x4d,(%eax)

			if ((*ptr1) != 'K' || (*ptr2) != 'M')
f0113b2c:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0113b2f:	8a 00                	mov    (%eax),%al
f0113b31:	3c 4b                	cmp    $0x4b,%al
f0113b33:	75 09                	jne    f0113b3e <test_allocate_chunk+0x71e>
f0113b35:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0113b38:	8a 00                	mov    (%eax),%al
f0113b3a:	3c 4d                	cmp    $0x4d,%al
f0113b3c:	74 1e                	je     f0113b5c <test_allocate_chunk+0x73c>
			{
				warn("[EVAL] allocate_chunk: Failed (content is not correct)\n");
f0113b3e:	83 ec 04             	sub    $0x4,%esp
f0113b41:	68 34 9b 13 f0       	push   $0xf0139b34
f0113b46:	68 59 05 00 00       	push   $0x559
f0113b4b:	68 7e 81 13 f0       	push   $0xf013817e
f0113b50:	e8 dd c7 fe ff       	call   f0100332 <_warn>
f0113b55:	83 c4 10             	add    $0x10,%esp
				correct = 0;
f0113b58:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
			}
			if (correct) eval += 5 ;
f0113b5c:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0113b60:	74 04                	je     f0113b66 <test_allocate_chunk+0x746>
f0113b62:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
			correct = 1 ;
f0113b66:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		}
	}
	cprintf("\nCASE IV: END\n") ;
f0113b6a:	83 ec 0c             	sub    $0xc,%esp
f0113b6d:	68 d8 99 13 f0       	push   $0xf01399d8
f0113b72:	e8 b6 d0 fe ff       	call   f0100c2d <cprintf>
f0113b77:	83 c4 10             	add    $0x10,%esp

	/*========================================================*/
	/*PART V: Destination page(s) not exist [User r] 15%     */
	/*========================================================*/
	cprintf("\nCASE V: Destination page(s) not exist [User r] [15%]\n") ;
f0113b7a:	83 ec 0c             	sub    $0xc,%esp
f0113b7d:	68 88 9c 13 f0       	push   $0xf0139c88
f0113b82:	e8 a6 d0 fe ff       	call   f0100c2d <cprintf>
f0113b87:	83 c4 10             	add    $0x10,%esp
	{
		numOfFreeFramesBefore = sys_calculate_free_frames();
f0113b8a:	e8 2f 88 ff ff       	call   f010c3be <sys_calculate_free_frames>
f0113b8f:	89 45 b4             	mov    %eax,-0x4c(%ebp)

		int ret = allocate_chunk(proc_directory,0x403FFC00, 7*kilo, PERM_USER|PERM_AVAILABLE) ;
f0113b92:	8b 55 c8             	mov    -0x38(%ebp),%edx
f0113b95:	89 d0                	mov    %edx,%eax
f0113b97:	01 c0                	add    %eax,%eax
f0113b99:	01 d0                	add    %edx,%eax
f0113b9b:	01 c0                	add    %eax,%eax
f0113b9d:	01 d0                	add    %edx,%eax
f0113b9f:	68 04 0e 00 00       	push   $0xe04
f0113ba4:	50                   	push   %eax
f0113ba5:	68 00 fc 3f 40       	push   $0x403ffc00
f0113baa:	ff 75 d0             	pushl  -0x30(%ebp)
f0113bad:	e8 aa 48 ff ff       	call   f010845c <allocate_chunk>
f0113bb2:	83 c4 10             	add    $0x10,%esp
f0113bb5:	89 45 98             	mov    %eax,-0x68(%ebp)

		numOfFreeFramesAfter = sys_calculate_free_frames();
f0113bb8:	e8 01 88 ff ff       	call   f010c3be <sys_calculate_free_frames>
f0113bbd:	89 45 ac             	mov    %eax,-0x54(%ebp)

		if (ret != 0 || (numOfFreeFramesBefore - numOfFreeFramesAfter) != (3+2))
f0113bc0:	83 7d 98 00          	cmpl   $0x0,-0x68(%ebp)
f0113bc4:	75 0b                	jne    f0113bd1 <test_allocate_chunk+0x7b1>
f0113bc6:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0113bc9:	2b 45 ac             	sub    -0x54(%ebp),%eax
f0113bcc:	83 f8 05             	cmp    $0x5,%eax
f0113bcf:	74 2a                	je     f0113bfb <test_allocate_chunk+0x7db>
		{
			warn("[EVAL] allocate_chunk: Failed (# allocated frames is not correct) ret=%d diff=%d expected=%d\n", ret, numOfFreeFramesBefore - numOfFreeFramesAfter, (3+2));
f0113bd1:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0113bd4:	2b 45 ac             	sub    -0x54(%ebp),%eax
f0113bd7:	83 ec 08             	sub    $0x8,%esp
f0113bda:	6a 05                	push   $0x5
f0113bdc:	50                   	push   %eax
f0113bdd:	ff 75 98             	pushl  -0x68(%ebp)
f0113be0:	68 ac 9b 13 f0       	push   $0xf0139bac
f0113be5:	68 70 05 00 00       	push   $0x570
f0113bea:	68 7e 81 13 f0       	push   $0xf013817e
f0113bef:	e8 3e c7 fe ff       	call   f0100332 <_warn>
f0113bf4:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0113bf7:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 10 ;
f0113bfb:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0113bff:	74 04                	je     f0113c05 <test_allocate_chunk+0x7e5>
f0113c01:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f0113c05:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		int chk_cnt = 1 ;
f0113c09:	c7 45 94 01 00 00 00 	movl   $0x1,-0x6c(%ebp)
		if (CCP(proc_directory, 0, 0x403FF000, 12*kilo, 1, 0xE05, 0xE07, 0, 0, CHK_ALLOC) == 0)
f0113c10:	8b 55 c8             	mov    -0x38(%ebp),%edx
f0113c13:	89 d0                	mov    %edx,%eax
f0113c15:	01 c0                	add    %eax,%eax
f0113c17:	01 d0                	add    %edx,%eax
f0113c19:	c1 e0 02             	shl    $0x2,%eax
f0113c1c:	83 ec 08             	sub    $0x8,%esp
f0113c1f:	6a 03                	push   $0x3
f0113c21:	6a 00                	push   $0x0
f0113c23:	6a 00                	push   $0x0
f0113c25:	68 07 0e 00 00       	push   $0xe07
f0113c2a:	68 05 0e 00 00       	push   $0xe05
f0113c2f:	6a 01                	push   $0x1
f0113c31:	50                   	push   %eax
f0113c32:	68 00 f0 3f 40       	push   $0x403ff000
f0113c37:	6a 00                	push   $0x0
f0113c39:	ff 75 d0             	pushl  -0x30(%ebp)
f0113c3c:	e8 00 1c 00 00       	call   f0115841 <CCP>
f0113c41:	83 c4 30             	add    $0x30,%esp
f0113c44:	85 c0                	test   %eax,%eax
f0113c46:	75 25                	jne    f0113c6d <test_allocate_chunk+0x84d>
		{
			warn("[EVAL] allocate_chunk: Failed (problem in permissions and/or references\n");
f0113c48:	83 ec 04             	sub    $0x4,%esp
f0113c4b:	68 e8 9a 13 f0       	push   $0xf0139ae8
f0113c50:	68 79 05 00 00       	push   $0x579
f0113c55:	68 7e 81 13 f0       	push   $0xf013817e
f0113c5a:	e8 d3 c6 fe ff       	call   f0100332 <_warn>
f0113c5f:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0113c62:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
			chk_cnt = 0 ;
f0113c66:	c7 45 94 00 00 00 00 	movl   $0x0,-0x6c(%ebp)
		}
		if (correct) eval += 5 ;
f0113c6d:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0113c71:	74 04                	je     f0113c77 <test_allocate_chunk+0x857>
f0113c73:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0113c77:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

	}
	cprintf("\nCASE V: END\n") ;
f0113c7b:	83 ec 0c             	sub    $0xc,%esp
f0113c7e:	68 bf 9c 13 f0       	push   $0xf0139cbf
f0113c83:	e8 a5 cf fe ff       	call   f0100c2d <cprintf>
f0113c88:	83 c4 10             	add    $0x10,%esp

	cprintf("[EVAL] allocate_chunk: FINISHED. Evaluation = %d\n", eval);
f0113c8b:	83 ec 08             	sub    $0x8,%esp
f0113c8e:	ff 75 e4             	pushl  -0x1c(%ebp)
f0113c91:	68 d0 9c 13 f0       	push   $0xf0139cd0
f0113c96:	e8 92 cf fe ff       	call   f0100c2d <cprintf>
f0113c9b:	83 c4 10             	add    $0x10,%esp
	if(eval == 100)
f0113c9e:	83 7d e4 64          	cmpl   $0x64,-0x1c(%ebp)
f0113ca2:	75 10                	jne    f0113cb4 <test_allocate_chunk+0x894>
		cprintf("Congratulations!! test allocate_chunk completed successfully.\n");
f0113ca4:	83 ec 0c             	sub    $0xc,%esp
f0113ca7:	68 04 9d 13 f0       	push   $0xf0139d04
f0113cac:	e8 7c cf fe ff       	call   f0100c2d <cprintf>
f0113cb1:	83 c4 10             	add    $0x10,%esp

	//return back to the kernel directory
	lcr3(phys_page_directory) ;
f0113cb4:	a1 e8 0e 6c f0       	mov    0xf06c0ee8,%eax
f0113cb9:	89 45 cc             	mov    %eax,-0x34(%ebp)
f0113cbc:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0113cbf:	0f 22 d8             	mov    %eax,%cr3

	return 0;
f0113cc2:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0113cc7:	8d 65 f4             	lea    -0xc(%ebp),%esp
f0113cca:	5b                   	pop    %ebx
f0113ccb:	5e                   	pop    %esi
f0113ccc:	5f                   	pop    %edi
f0113ccd:	5d                   	pop    %ebp
f0113cce:	c3                   	ret    

f0113ccf <test_calculate_required_frames>:

//======================================
// 5) [+]TEST CALCULATE REQUIRED FRAMES:
//======================================
int test_calculate_required_frames()
{
f0113ccf:	55                   	push   %ebp
f0113cd0:	89 e5                	mov    %esp,%ebp
f0113cd2:	57                   	push   %edi
f0113cd3:	56                   	push   %esi
f0113cd4:	53                   	push   %ebx
f0113cd5:	81 ec fc 01 00 00    	sub    $0x1fc,%esp
	//Create a Temp. User Process
	char prog_name[50] = "fos_helloWorld";
f0113cdb:	8d 45 8e             	lea    -0x72(%ebp),%eax
f0113cde:	bb 18 8c 13 f0       	mov    $0xf0138c18,%ebx
f0113ce3:	ba 0f 00 00 00       	mov    $0xf,%edx
f0113ce8:	89 c7                	mov    %eax,%edi
f0113cea:	89 de                	mov    %ebx,%esi
f0113cec:	89 d1                	mov    %edx,%ecx
f0113cee:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0113cf0:	8d 55 9d             	lea    -0x63(%ebp),%edx
f0113cf3:	b9 23 00 00 00       	mov    $0x23,%ecx
f0113cf8:	b0 00                	mov    $0x0,%al
f0113cfa:	89 d7                	mov    %edx,%edi
f0113cfc:	f3 aa                	rep stos %al,%es:(%edi)
	struct Env* env = env_create(prog_name, 20, 10, 0);
f0113cfe:	6a 00                	push   $0x0
f0113d00:	6a 0a                	push   $0xa
f0113d02:	6a 14                	push   $0x14
f0113d04:	8d 45 8e             	lea    -0x72(%ebp),%eax
f0113d07:	50                   	push   %eax
f0113d08:	e8 65 49 ff ff       	call   f0108672 <env_create>
f0113d0d:	83 c4 10             	add    $0x10,%esp
f0113d10:	89 45 dc             	mov    %eax,-0x24(%ebp)
	uint32 *proc_directory = env->env_page_directory ;
f0113d13:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0113d16:	8b 40 5c             	mov    0x5c(%eax),%eax
f0113d19:	89 45 d8             	mov    %eax,-0x28(%ebp)
	lcr3(env->env_cr3) ;
f0113d1c:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0113d1f:	8b 40 60             	mov    0x60(%eax),%eax
f0113d22:	89 45 c0             	mov    %eax,-0x40(%ebp)
f0113d25:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0113d28:	0f 22 d8             	mov    %eax,%cr3
	char aup[20] = "aup " ;
f0113d2b:	c7 85 7a ff ff ff 61 	movl   $0x20707561,-0x86(%ebp)
f0113d32:	75 70 20 
f0113d35:	c7 85 7e ff ff ff 00 	movl   $0x0,-0x82(%ebp)
f0113d3c:	00 00 00 
f0113d3f:	8d 55 82             	lea    -0x7e(%ebp),%edx
f0113d42:	b9 03 00 00 00       	mov    $0x3,%ecx
f0113d47:	b8 00 00 00 00       	mov    $0x0,%eax
f0113d4c:	89 d7                	mov    %edx,%edi
f0113d4e:	f3 ab                	rep stos %eax,%es:(%edi)
	char env_id[20] ; ltostr(env->env_id, env_id) ;
f0113d50:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0113d53:	8b 40 4c             	mov    0x4c(%eax),%eax
f0113d56:	83 ec 08             	sub    $0x8,%esp
f0113d59:	8d 95 66 ff ff ff    	lea    -0x9a(%ebp),%edx
f0113d5f:	52                   	push   %edx
f0113d60:	50                   	push   %eax
f0113d61:	e8 6b ce 01 00       	call   f0130bd1 <ltostr>
f0113d66:	83 c4 10             	add    $0x10,%esp
	char aup_cmd[50];
	strcconcat(aup, env_id, aup_cmd);
f0113d69:	83 ec 04             	sub    $0x4,%esp
f0113d6c:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f0113d72:	50                   	push   %eax
f0113d73:	8d 85 66 ff ff ff    	lea    -0x9a(%ebp),%eax
f0113d79:	50                   	push   %eax
f0113d7a:	8d 85 7a ff ff ff    	lea    -0x86(%ebp),%eax
f0113d80:	50                   	push   %eax
f0113d81:	e8 43 cf 01 00       	call   f0130cc9 <strcconcat>
f0113d86:	83 c4 10             	add    $0x10,%esp
	//===================================================

	char *ptr1, *ptr2, *ptr3, *ptr4, *ptr5, *ptr6, *ptr7, *ptr8;
	char tptr[10] ;
	int kilo = 1024 ;
f0113d89:	c7 45 d0 00 04 00 00 	movl   $0x400,-0x30(%ebp)
	int mega = 1024*1024 ;
f0113d90:	c7 45 cc 00 00 10 00 	movl   $0x100000,-0x34(%ebp)
	uint32 eval = 0;
f0113d97:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
	uint32 res =0;
f0113d9e:	c7 45 c8 00 00 00 00 	movl   $0x0,-0x38(%ebp)
	uint8 correct = 1;
f0113da5:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	uint32 expected;
	uint32 numOfFreeFramesBefore, numOfFreeFramesAfter;

	ClearUserSpace(proc_directory);
f0113da9:	83 ec 0c             	sub    $0xc,%esp
f0113dac:	ff 75 d8             	pushl  -0x28(%ebp)
f0113daf:	e8 59 1a 00 00       	call   f011580d <ClearUserSpace>
f0113db4:	83 c4 10             	add    $0x10,%esp

	/*================================================*/
	/*PART I: ALL pages and tables are not exist 50%  */
	/*================================================*/
	cprintf("\nCASE I: ALL pages and tables are not exist [50%]\n") ;
f0113db7:	83 ec 0c             	sub    $0xc,%esp
f0113dba:	68 44 9d 13 f0       	push   $0xf0139d44
f0113dbf:	e8 69 ce fe ff       	call   f0100c2d <cprintf>
f0113dc4:	83 c4 10             	add    $0x10,%esp
	{
		//Test1
		res = calculate_required_frames(proc_directory, 0x0, 8*kilo);
f0113dc7:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0113dca:	c1 e0 03             	shl    $0x3,%eax
f0113dcd:	83 ec 04             	sub    $0x4,%esp
f0113dd0:	50                   	push   %eax
f0113dd1:	6a 00                	push   $0x0
f0113dd3:	ff 75 d8             	pushl  -0x28(%ebp)
f0113dd6:	e8 bb 47 ff ff       	call   f0108596 <calculate_required_frames>
f0113ddb:	83 c4 10             	add    $0x10,%esp
f0113dde:	89 45 c8             	mov    %eax,-0x38(%ebp)
		if (res != 3)
f0113de1:	83 7d c8 03          	cmpl   $0x3,-0x38(%ebp)
f0113de5:	74 23                	je     f0113e0a <test_calculate_required_frames+0x13b>
		{
			warn("[EVAL] calculate_required_frames: Failed (count is not correct). res=%d, expected=%d\n", res, 3);
f0113de7:	83 ec 0c             	sub    $0xc,%esp
f0113dea:	6a 03                	push   $0x3
f0113dec:	ff 75 c8             	pushl  -0x38(%ebp)
f0113def:	68 78 9d 13 f0       	push   $0xf0139d78
f0113df4:	68 b2 05 00 00       	push   $0x5b2
f0113df9:	68 7e 81 13 f0       	push   $0xf013817e
f0113dfe:	e8 2f c5 fe ff       	call   f0100332 <_warn>
f0113e03:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0113e06:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0113e0a:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0113e0e:	74 04                	je     f0113e14 <test_calculate_required_frames+0x145>
f0113e10:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0113e14:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		//Test2
		res = calculate_required_frames(proc_directory, 0x0, 4*mega);
f0113e18:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0113e1b:	c1 e0 02             	shl    $0x2,%eax
f0113e1e:	83 ec 04             	sub    $0x4,%esp
f0113e21:	50                   	push   %eax
f0113e22:	6a 00                	push   $0x0
f0113e24:	ff 75 d8             	pushl  -0x28(%ebp)
f0113e27:	e8 6a 47 ff ff       	call   f0108596 <calculate_required_frames>
f0113e2c:	83 c4 10             	add    $0x10,%esp
f0113e2f:	89 45 c8             	mov    %eax,-0x38(%ebp)
		if (res != 1025)
f0113e32:	81 7d c8 01 04 00 00 	cmpl   $0x401,-0x38(%ebp)
f0113e39:	74 26                	je     f0113e61 <test_calculate_required_frames+0x192>
		{
			warn("[EVAL] calculate_required_frames: Failed (count is not correct). res=%d, expected=%d\n", res, 1025);
f0113e3b:	83 ec 0c             	sub    $0xc,%esp
f0113e3e:	68 01 04 00 00       	push   $0x401
f0113e43:	ff 75 c8             	pushl  -0x38(%ebp)
f0113e46:	68 78 9d 13 f0       	push   $0xf0139d78
f0113e4b:	68 bc 05 00 00       	push   $0x5bc
f0113e50:	68 7e 81 13 f0       	push   $0xf013817e
f0113e55:	e8 d8 c4 fe ff       	call   f0100332 <_warn>
f0113e5a:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0113e5d:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0113e61:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0113e65:	74 04                	je     f0113e6b <test_calculate_required_frames+0x19c>
f0113e67:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0113e6b:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		//Test3
		res = calculate_required_frames(proc_directory, 0x0, 1024*mega);
f0113e6f:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0113e72:	c1 e0 0a             	shl    $0xa,%eax
f0113e75:	83 ec 04             	sub    $0x4,%esp
f0113e78:	50                   	push   %eax
f0113e79:	6a 00                	push   $0x0
f0113e7b:	ff 75 d8             	pushl  -0x28(%ebp)
f0113e7e:	e8 13 47 ff ff       	call   f0108596 <calculate_required_frames>
f0113e83:	83 c4 10             	add    $0x10,%esp
f0113e86:	89 45 c8             	mov    %eax,-0x38(%ebp)
		if (res != ((1024*mega)/(4*mega) + (1024*mega)/(4*kilo)))
f0113e89:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0113e8c:	c1 e0 0a             	shl    $0xa,%eax
f0113e8f:	8b 55 cc             	mov    -0x34(%ebp),%edx
f0113e92:	8d 1c 95 00 00 00 00 	lea    0x0(,%edx,4),%ebx
f0113e99:	99                   	cltd   
f0113e9a:	f7 fb                	idiv   %ebx
f0113e9c:	89 c1                	mov    %eax,%ecx
f0113e9e:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0113ea1:	c1 e0 0a             	shl    $0xa,%eax
f0113ea4:	8b 55 d0             	mov    -0x30(%ebp),%edx
f0113ea7:	8d 34 95 00 00 00 00 	lea    0x0(,%edx,4),%esi
f0113eae:	99                   	cltd   
f0113eaf:	f7 fe                	idiv   %esi
f0113eb1:	01 c8                	add    %ecx,%eax
f0113eb3:	3b 45 c8             	cmp    -0x38(%ebp),%eax
f0113eb6:	74 4c                	je     f0113f04 <test_calculate_required_frames+0x235>
		{
			warn("[EVAL] calculate_required_frames: Failed (count is not correct). res=%d, expected=%d\n", res, ((1024*mega)/(4*mega) + (1024*mega)/(4*kilo)));
f0113eb8:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0113ebb:	c1 e0 0a             	shl    $0xa,%eax
f0113ebe:	8b 55 cc             	mov    -0x34(%ebp),%edx
f0113ec1:	8d 1c 95 00 00 00 00 	lea    0x0(,%edx,4),%ebx
f0113ec8:	99                   	cltd   
f0113ec9:	f7 fb                	idiv   %ebx
f0113ecb:	89 c1                	mov    %eax,%ecx
f0113ecd:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0113ed0:	c1 e0 0a             	shl    $0xa,%eax
f0113ed3:	8b 55 d0             	mov    -0x30(%ebp),%edx
f0113ed6:	8d 34 95 00 00 00 00 	lea    0x0(,%edx,4),%esi
f0113edd:	99                   	cltd   
f0113ede:	f7 fe                	idiv   %esi
f0113ee0:	01 c8                	add    %ecx,%eax
f0113ee2:	83 ec 0c             	sub    $0xc,%esp
f0113ee5:	50                   	push   %eax
f0113ee6:	ff 75 c8             	pushl  -0x38(%ebp)
f0113ee9:	68 78 9d 13 f0       	push   $0xf0139d78
f0113eee:	68 c6 05 00 00       	push   $0x5c6
f0113ef3:	68 7e 81 13 f0       	push   $0xf013817e
f0113ef8:	e8 35 c4 fe ff       	call   f0100332 <_warn>
f0113efd:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0113f00:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0113f04:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0113f08:	74 04                	je     f0113f0e <test_calculate_required_frames+0x23f>
f0113f0a:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0113f0e:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	}

	{
		//Test4
		res = calculate_required_frames(proc_directory, 0x1000, 6*kilo);
f0113f12:	8b 55 d0             	mov    -0x30(%ebp),%edx
f0113f15:	89 d0                	mov    %edx,%eax
f0113f17:	01 c0                	add    %eax,%eax
f0113f19:	01 d0                	add    %edx,%eax
f0113f1b:	01 c0                	add    %eax,%eax
f0113f1d:	83 ec 04             	sub    $0x4,%esp
f0113f20:	50                   	push   %eax
f0113f21:	68 00 10 00 00       	push   $0x1000
f0113f26:	ff 75 d8             	pushl  -0x28(%ebp)
f0113f29:	e8 68 46 ff ff       	call   f0108596 <calculate_required_frames>
f0113f2e:	83 c4 10             	add    $0x10,%esp
f0113f31:	89 45 c8             	mov    %eax,-0x38(%ebp)
		if (res != 3)
f0113f34:	83 7d c8 03          	cmpl   $0x3,-0x38(%ebp)
f0113f38:	74 23                	je     f0113f5d <test_calculate_required_frames+0x28e>
		{
			warn("[EVAL] calculate_required_frames: Failed (count is not correct). res=%d, expected=%d\n", res, 3);
f0113f3a:	83 ec 0c             	sub    $0xc,%esp
f0113f3d:	6a 03                	push   $0x3
f0113f3f:	ff 75 c8             	pushl  -0x38(%ebp)
f0113f42:	68 78 9d 13 f0       	push   $0xf0139d78
f0113f47:	68 d2 05 00 00       	push   $0x5d2
f0113f4c:	68 7e 81 13 f0       	push   $0xf013817e
f0113f51:	e8 dc c3 fe ff       	call   f0100332 <_warn>
f0113f56:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0113f59:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0113f5d:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0113f61:	74 04                	je     f0113f67 <test_calculate_required_frames+0x298>
f0113f63:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0113f67:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		//Test5
		res = calculate_required_frames(proc_directory, 0x1800, 3*kilo);
f0113f6b:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0113f6e:	89 c2                	mov    %eax,%edx
f0113f70:	01 d2                	add    %edx,%edx
f0113f72:	01 d0                	add    %edx,%eax
f0113f74:	83 ec 04             	sub    $0x4,%esp
f0113f77:	50                   	push   %eax
f0113f78:	68 00 18 00 00       	push   $0x1800
f0113f7d:	ff 75 d8             	pushl  -0x28(%ebp)
f0113f80:	e8 11 46 ff ff       	call   f0108596 <calculate_required_frames>
f0113f85:	83 c4 10             	add    $0x10,%esp
f0113f88:	89 45 c8             	mov    %eax,-0x38(%ebp)
		if (res != 3)
f0113f8b:	83 7d c8 03          	cmpl   $0x3,-0x38(%ebp)
f0113f8f:	74 23                	je     f0113fb4 <test_calculate_required_frames+0x2e5>
		{
			warn("[EVAL] calculate_required_frames: Failed (count is not correct). res=%d, expected=%d\n", res, 3);
f0113f91:	83 ec 0c             	sub    $0xc,%esp
f0113f94:	6a 03                	push   $0x3
f0113f96:	ff 75 c8             	pushl  -0x38(%ebp)
f0113f99:	68 78 9d 13 f0       	push   $0xf0139d78
f0113f9e:	68 dc 05 00 00       	push   $0x5dc
f0113fa3:	68 7e 81 13 f0       	push   $0xf013817e
f0113fa8:	e8 85 c3 fe ff       	call   f0100332 <_warn>
f0113fad:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0113fb0:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0113fb4:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0113fb8:	74 04                	je     f0113fbe <test_calculate_required_frames+0x2ef>
f0113fba:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0113fbe:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		//Test6
		res = calculate_required_frames(proc_directory, 0x400000, 10*mega);
f0113fc2:	8b 55 cc             	mov    -0x34(%ebp),%edx
f0113fc5:	89 d0                	mov    %edx,%eax
f0113fc7:	c1 e0 02             	shl    $0x2,%eax
f0113fca:	01 d0                	add    %edx,%eax
f0113fcc:	01 c0                	add    %eax,%eax
f0113fce:	83 ec 04             	sub    $0x4,%esp
f0113fd1:	50                   	push   %eax
f0113fd2:	68 00 00 40 00       	push   $0x400000
f0113fd7:	ff 75 d8             	pushl  -0x28(%ebp)
f0113fda:	e8 b7 45 ff ff       	call   f0108596 <calculate_required_frames>
f0113fdf:	83 c4 10             	add    $0x10,%esp
f0113fe2:	89 45 c8             	mov    %eax,-0x38(%ebp)
		if (res != 2563)
f0113fe5:	81 7d c8 03 0a 00 00 	cmpl   $0xa03,-0x38(%ebp)
f0113fec:	74 26                	je     f0114014 <test_calculate_required_frames+0x345>
		{
			warn("[EVAL] calculate_required_frames: Failed (count is not correct). res=%d, expected=%d\n", res, 2563);
f0113fee:	83 ec 0c             	sub    $0xc,%esp
f0113ff1:	68 03 0a 00 00       	push   $0xa03
f0113ff6:	ff 75 c8             	pushl  -0x38(%ebp)
f0113ff9:	68 78 9d 13 f0       	push   $0xf0139d78
f0113ffe:	68 e6 05 00 00       	push   $0x5e6
f0114003:	68 7e 81 13 f0       	push   $0xf013817e
f0114008:	e8 25 c3 fe ff       	call   f0100332 <_warn>
f011400d:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0114010:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0114014:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0114018:	74 04                	je     f011401e <test_calculate_required_frames+0x34f>
f011401a:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f011401e:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	}

	{
		//Test7
		res = calculate_required_frames(proc_directory, 0x700000, 2*mega);
f0114022:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0114025:	01 c0                	add    %eax,%eax
f0114027:	83 ec 04             	sub    $0x4,%esp
f011402a:	50                   	push   %eax
f011402b:	68 00 00 70 00       	push   $0x700000
f0114030:	ff 75 d8             	pushl  -0x28(%ebp)
f0114033:	e8 5e 45 ff ff       	call   f0108596 <calculate_required_frames>
f0114038:	83 c4 10             	add    $0x10,%esp
f011403b:	89 45 c8             	mov    %eax,-0x38(%ebp)
		if (res != 514)
f011403e:	81 7d c8 02 02 00 00 	cmpl   $0x202,-0x38(%ebp)
f0114045:	74 26                	je     f011406d <test_calculate_required_frames+0x39e>
		{
			warn("[EVAL] calculate_required_frames: Failed (count is not correct). res=%d, expected=%d\n", res, 514);
f0114047:	83 ec 0c             	sub    $0xc,%esp
f011404a:	68 02 02 00 00       	push   $0x202
f011404f:	ff 75 c8             	pushl  -0x38(%ebp)
f0114052:	68 78 9d 13 f0       	push   $0xf0139d78
f0114057:	68 f2 05 00 00       	push   $0x5f2
f011405c:	68 7e 81 13 f0       	push   $0xf013817e
f0114061:	e8 cc c2 fe ff       	call   f0100332 <_warn>
f0114066:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0114069:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 10 ;
f011406d:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0114071:	74 04                	je     f0114077 <test_calculate_required_frames+0x3a8>
f0114073:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f0114077:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		//Test8
		res = calculate_required_frames(proc_directory, 0x3FFFFF, 1*kilo);
f011407b:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011407e:	83 ec 04             	sub    $0x4,%esp
f0114081:	50                   	push   %eax
f0114082:	68 ff ff 3f 00       	push   $0x3fffff
f0114087:	ff 75 d8             	pushl  -0x28(%ebp)
f011408a:	e8 07 45 ff ff       	call   f0108596 <calculate_required_frames>
f011408f:	83 c4 10             	add    $0x10,%esp
f0114092:	89 45 c8             	mov    %eax,-0x38(%ebp)
		if (res != 4)
f0114095:	83 7d c8 04          	cmpl   $0x4,-0x38(%ebp)
f0114099:	74 23                	je     f01140be <test_calculate_required_frames+0x3ef>
		{
			warn("[EVAL] calculate_required_frames: Failed (count is not correct). res=%d, expected=%d\n", res, 4);
f011409b:	83 ec 0c             	sub    $0xc,%esp
f011409e:	6a 04                	push   $0x4
f01140a0:	ff 75 c8             	pushl  -0x38(%ebp)
f01140a3:	68 78 9d 13 f0       	push   $0xf0139d78
f01140a8:	68 fc 05 00 00       	push   $0x5fc
f01140ad:	68 7e 81 13 f0       	push   $0xf013817e
f01140b2:	e8 7b c2 fe ff       	call   f0100332 <_warn>
f01140b7:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f01140ba:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 10 ;
f01140be:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f01140c2:	74 04                	je     f01140c8 <test_calculate_required_frames+0x3f9>
f01140c4:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f01140c8:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	}
	cprintf("\nCASE I: END\n") ;
f01140cc:	83 ec 0c             	sub    $0xc,%esp
f01140cf:	68 c9 98 13 f0       	push   $0xf01398c9
f01140d4:	e8 54 cb fe ff       	call   f0100c2d <cprintf>
f01140d9:	83 c4 10             	add    $0x10,%esp

	/*==================================================*/
	/*PART II: SOME pages and/or tables are exist [50%] */
	/*==================================================*/
	cprintf("\nCASE II: SOME pages and/or tables are exist [50%]\n") ;
f01140dc:	83 ec 0c             	sub    $0xc,%esp
f01140df:	68 d0 9d 13 f0       	push   $0xf0139dd0
f01140e4:	e8 44 cb fe ff       	call   f0100c2d <cprintf>
f01140e9:	83 c4 10             	add    $0x10,%esp
	{
		//Test1
		/*allocate page*/char c1[100] ;strcconcat(aup_cmd, " 0x0", c1); execute_command(c1);
f01140ec:	83 ec 04             	sub    $0x4,%esp
f01140ef:	8d 85 fe fd ff ff    	lea    -0x202(%ebp),%eax
f01140f5:	50                   	push   %eax
f01140f6:	68 82 8c 13 f0       	push   $0xf0138c82
f01140fb:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f0114101:	50                   	push   %eax
f0114102:	e8 c2 cb 01 00       	call   f0130cc9 <strcconcat>
f0114107:	83 c4 10             	add    $0x10,%esp
f011410a:	83 ec 0c             	sub    $0xc,%esp
f011410d:	8d 85 fe fd ff ff    	lea    -0x202(%ebp),%eax
f0114113:	50                   	push   %eax
f0114114:	e8 76 cb fe ff       	call   f0100c8f <execute_command>
f0114119:	83 c4 10             	add    $0x10,%esp

		res = calculate_required_frames(proc_directory, 0x0, 8*kilo);
f011411c:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011411f:	c1 e0 03             	shl    $0x3,%eax
f0114122:	83 ec 04             	sub    $0x4,%esp
f0114125:	50                   	push   %eax
f0114126:	6a 00                	push   $0x0
f0114128:	ff 75 d8             	pushl  -0x28(%ebp)
f011412b:	e8 66 44 ff ff       	call   f0108596 <calculate_required_frames>
f0114130:	83 c4 10             	add    $0x10,%esp
f0114133:	89 45 c8             	mov    %eax,-0x38(%ebp)
		expected = 1 ;
f0114136:	c7 45 c4 01 00 00 00 	movl   $0x1,-0x3c(%ebp)
		if (res != expected)
f011413d:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0114140:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f0114143:	74 24                	je     f0114169 <test_calculate_required_frames+0x49a>
		{
			warn("[EVAL] calculate_required_frames: Failed (count is not correct). res=%d, expected=%d\n", res, expected);
f0114145:	83 ec 0c             	sub    $0xc,%esp
f0114148:	ff 75 c4             	pushl  -0x3c(%ebp)
f011414b:	ff 75 c8             	pushl  -0x38(%ebp)
f011414e:	68 78 9d 13 f0       	push   $0xf0139d78
f0114153:	68 10 06 00 00       	push   $0x610
f0114158:	68 7e 81 13 f0       	push   $0xf013817e
f011415d:	e8 d0 c1 fe ff       	call   f0100332 <_warn>
f0114162:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0114165:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0114169:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f011416d:	74 04                	je     f0114173 <test_calculate_required_frames+0x4a4>
f011416f:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0114173:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		/*allocate page*/char c2[100] ;strcconcat(aup_cmd, " 0x100000", c2); execute_command(c2);
f0114177:	83 ec 04             	sub    $0x4,%esp
f011417a:	8d 85 62 fe ff ff    	lea    -0x19e(%ebp),%eax
f0114180:	50                   	push   %eax
f0114181:	68 8f 8c 13 f0       	push   $0xf0138c8f
f0114186:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f011418c:	50                   	push   %eax
f011418d:	e8 37 cb 01 00       	call   f0130cc9 <strcconcat>
f0114192:	83 c4 10             	add    $0x10,%esp
f0114195:	83 ec 0c             	sub    $0xc,%esp
f0114198:	8d 85 62 fe ff ff    	lea    -0x19e(%ebp),%eax
f011419e:	50                   	push   %eax
f011419f:	e8 eb ca fe ff       	call   f0100c8f <execute_command>
f01141a4:	83 c4 10             	add    $0x10,%esp
		/*allocate page*/char c3[100] ;strcconcat(aup_cmd, " 0x10000000", c3); execute_command(c3);
f01141a7:	83 ec 04             	sub    $0x4,%esp
f01141aa:	8d 85 c6 fe ff ff    	lea    -0x13a(%ebp),%eax
f01141b0:	50                   	push   %eax
f01141b1:	68 04 9e 13 f0       	push   $0xf0139e04
f01141b6:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f01141bc:	50                   	push   %eax
f01141bd:	e8 07 cb 01 00       	call   f0130cc9 <strcconcat>
f01141c2:	83 c4 10             	add    $0x10,%esp
f01141c5:	83 ec 0c             	sub    $0xc,%esp
f01141c8:	8d 85 c6 fe ff ff    	lea    -0x13a(%ebp),%eax
f01141ce:	50                   	push   %eax
f01141cf:	e8 bb ca fe ff       	call   f0100c8f <execute_command>
f01141d4:	83 c4 10             	add    $0x10,%esp

		//Test2
		res = calculate_required_frames(proc_directory, 0x0, 8*mega);
f01141d7:	8b 45 cc             	mov    -0x34(%ebp),%eax
f01141da:	c1 e0 03             	shl    $0x3,%eax
f01141dd:	83 ec 04             	sub    $0x4,%esp
f01141e0:	50                   	push   %eax
f01141e1:	6a 00                	push   $0x0
f01141e3:	ff 75 d8             	pushl  -0x28(%ebp)
f01141e6:	e8 ab 43 ff ff       	call   f0108596 <calculate_required_frames>
f01141eb:	83 c4 10             	add    $0x10,%esp
f01141ee:	89 45 c8             	mov    %eax,-0x38(%ebp)
		expected = 2047;
f01141f1:	c7 45 c4 ff 07 00 00 	movl   $0x7ff,-0x3c(%ebp)
		if (res != expected)
f01141f8:	8b 45 c8             	mov    -0x38(%ebp),%eax
f01141fb:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f01141fe:	74 24                	je     f0114224 <test_calculate_required_frames+0x555>
		{
			warn("[EVAL] calculate_required_frames: Failed (count is not correct). res=%d, expected=%d\n", res, expected);
f0114200:	83 ec 0c             	sub    $0xc,%esp
f0114203:	ff 75 c4             	pushl  -0x3c(%ebp)
f0114206:	ff 75 c8             	pushl  -0x38(%ebp)
f0114209:	68 78 9d 13 f0       	push   $0xf0139d78
f011420e:	68 1e 06 00 00       	push   $0x61e
f0114213:	68 7e 81 13 f0       	push   $0xf013817e
f0114218:	e8 15 c1 fe ff       	call   f0100332 <_warn>
f011421d:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0114220:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0114224:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0114228:	74 04                	je     f011422e <test_calculate_required_frames+0x55f>
f011422a:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f011422e:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		//Test3
		res = calculate_required_frames(proc_directory, 0x0, 1024*mega);
f0114232:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0114235:	c1 e0 0a             	shl    $0xa,%eax
f0114238:	83 ec 04             	sub    $0x4,%esp
f011423b:	50                   	push   %eax
f011423c:	6a 00                	push   $0x0
f011423e:	ff 75 d8             	pushl  -0x28(%ebp)
f0114241:	e8 50 43 ff ff       	call   f0108596 <calculate_required_frames>
f0114246:	83 c4 10             	add    $0x10,%esp
f0114249:	89 45 c8             	mov    %eax,-0x38(%ebp)
		expected = ((1024*mega)/(4*mega) + (1024*mega)/(4*kilo)) - 2 - 1 - 2;
f011424c:	8b 45 cc             	mov    -0x34(%ebp),%eax
f011424f:	c1 e0 0a             	shl    $0xa,%eax
f0114252:	8b 55 cc             	mov    -0x34(%ebp),%edx
f0114255:	8d 1c 95 00 00 00 00 	lea    0x0(,%edx,4),%ebx
f011425c:	99                   	cltd   
f011425d:	f7 fb                	idiv   %ebx
f011425f:	89 c1                	mov    %eax,%ecx
f0114261:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0114264:	c1 e0 0a             	shl    $0xa,%eax
f0114267:	8b 55 d0             	mov    -0x30(%ebp),%edx
f011426a:	8d 34 95 00 00 00 00 	lea    0x0(,%edx,4),%esi
f0114271:	99                   	cltd   
f0114272:	f7 fe                	idiv   %esi
f0114274:	01 c8                	add    %ecx,%eax
f0114276:	83 e8 05             	sub    $0x5,%eax
f0114279:	89 45 c4             	mov    %eax,-0x3c(%ebp)
		if (res != expected)
f011427c:	8b 45 c8             	mov    -0x38(%ebp),%eax
f011427f:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f0114282:	74 24                	je     f01142a8 <test_calculate_required_frames+0x5d9>
		{
			warn("[EVAL] calculate_required_frames: Failed (count is not correct). res=%d, expected=%d\n", res, expected);
f0114284:	83 ec 0c             	sub    $0xc,%esp
f0114287:	ff 75 c4             	pushl  -0x3c(%ebp)
f011428a:	ff 75 c8             	pushl  -0x38(%ebp)
f011428d:	68 78 9d 13 f0       	push   $0xf0139d78
f0114292:	68 29 06 00 00       	push   $0x629
f0114297:	68 7e 81 13 f0       	push   $0xf013817e
f011429c:	e8 91 c0 fe ff       	call   f0100332 <_warn>
f01142a1:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f01142a4:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 10 ;
f01142a8:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f01142ac:	74 04                	je     f01142b2 <test_calculate_required_frames+0x5e3>
f01142ae:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f01142b2:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	}

	{
		/*allocate page*/char c3[100] ;strcconcat(aup_cmd, " 0x2000", c3); execute_command(c3);
f01142b6:	83 ec 04             	sub    $0x4,%esp
f01142b9:	8d 85 62 fe ff ff    	lea    -0x19e(%ebp),%eax
f01142bf:	50                   	push   %eax
f01142c0:	68 10 9e 13 f0       	push   $0xf0139e10
f01142c5:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f01142cb:	50                   	push   %eax
f01142cc:	e8 f8 c9 01 00       	call   f0130cc9 <strcconcat>
f01142d1:	83 c4 10             	add    $0x10,%esp
f01142d4:	83 ec 0c             	sub    $0xc,%esp
f01142d7:	8d 85 62 fe ff ff    	lea    -0x19e(%ebp),%eax
f01142dd:	50                   	push   %eax
f01142de:	e8 ac c9 fe ff       	call   f0100c8f <execute_command>
f01142e3:	83 c4 10             	add    $0x10,%esp

		//Test4
		res = calculate_required_frames(proc_directory, 0x1800, 3*kilo);
f01142e6:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01142e9:	89 c2                	mov    %eax,%edx
f01142eb:	01 d2                	add    %edx,%edx
f01142ed:	01 d0                	add    %edx,%eax
f01142ef:	83 ec 04             	sub    $0x4,%esp
f01142f2:	50                   	push   %eax
f01142f3:	68 00 18 00 00       	push   $0x1800
f01142f8:	ff 75 d8             	pushl  -0x28(%ebp)
f01142fb:	e8 96 42 ff ff       	call   f0108596 <calculate_required_frames>
f0114300:	83 c4 10             	add    $0x10,%esp
f0114303:	89 45 c8             	mov    %eax,-0x38(%ebp)
		expected = 1 ;
f0114306:	c7 45 c4 01 00 00 00 	movl   $0x1,-0x3c(%ebp)
		if (res != expected)
f011430d:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0114310:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f0114313:	74 24                	je     f0114339 <test_calculate_required_frames+0x66a>
		{
			warn("[EVAL] calculate_required_frames: Failed (count is not correct). res=%d, expected=%d\n", res, expected);
f0114315:	83 ec 0c             	sub    $0xc,%esp
f0114318:	ff 75 c4             	pushl  -0x3c(%ebp)
f011431b:	ff 75 c8             	pushl  -0x38(%ebp)
f011431e:	68 78 9d 13 f0       	push   $0xf0139d78
f0114323:	68 38 06 00 00       	push   $0x638
f0114328:	68 7e 81 13 f0       	push   $0xf013817e
f011432d:	e8 00 c0 fe ff       	call   f0100332 <_warn>
f0114332:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0114335:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0114339:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f011433d:	74 04                	je     f0114343 <test_calculate_required_frames+0x674>
f011433f:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0114343:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		/*allocate page*/char c4[100] ;strcconcat(aup_cmd, " 0x800000", c4); execute_command(c4);
f0114347:	83 ec 04             	sub    $0x4,%esp
f011434a:	8d 85 c6 fe ff ff    	lea    -0x13a(%ebp),%eax
f0114350:	50                   	push   %eax
f0114351:	68 e8 8e 13 f0       	push   $0xf0138ee8
f0114356:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f011435c:	50                   	push   %eax
f011435d:	e8 67 c9 01 00       	call   f0130cc9 <strcconcat>
f0114362:	83 c4 10             	add    $0x10,%esp
f0114365:	83 ec 0c             	sub    $0xc,%esp
f0114368:	8d 85 c6 fe ff ff    	lea    -0x13a(%ebp),%eax
f011436e:	50                   	push   %eax
f011436f:	e8 1b c9 fe ff       	call   f0100c8f <execute_command>
f0114374:	83 c4 10             	add    $0x10,%esp

		//Test5
		res = calculate_required_frames(proc_directory, 0x400000, 10*mega);
f0114377:	8b 55 cc             	mov    -0x34(%ebp),%edx
f011437a:	89 d0                	mov    %edx,%eax
f011437c:	c1 e0 02             	shl    $0x2,%eax
f011437f:	01 d0                	add    %edx,%eax
f0114381:	01 c0                	add    %eax,%eax
f0114383:	83 ec 04             	sub    $0x4,%esp
f0114386:	50                   	push   %eax
f0114387:	68 00 00 40 00       	push   $0x400000
f011438c:	ff 75 d8             	pushl  -0x28(%ebp)
f011438f:	e8 02 42 ff ff       	call   f0108596 <calculate_required_frames>
f0114394:	83 c4 10             	add    $0x10,%esp
f0114397:	89 45 c8             	mov    %eax,-0x38(%ebp)
		if (res != 2561)
f011439a:	81 7d c8 01 0a 00 00 	cmpl   $0xa01,-0x38(%ebp)
f01143a1:	74 26                	je     f01143c9 <test_calculate_required_frames+0x6fa>
		{
			warn("[EVAL] calculate_required_frames: Failed (count is not correct). res=%d, expected=%d\n", res, 2563);
f01143a3:	83 ec 0c             	sub    $0xc,%esp
f01143a6:	68 03 0a 00 00       	push   $0xa03
f01143ab:	ff 75 c8             	pushl  -0x38(%ebp)
f01143ae:	68 78 9d 13 f0       	push   $0xf0139d78
f01143b3:	68 44 06 00 00       	push   $0x644
f01143b8:	68 7e 81 13 f0       	push   $0xf013817e
f01143bd:	e8 70 bf fe ff       	call   f0100332 <_warn>
f01143c2:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f01143c5:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f01143c9:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f01143cd:	74 04                	je     f01143d3 <test_calculate_required_frames+0x704>
f01143cf:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f01143d3:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	}

	{
		/*allocate page*/char c3[100] ;strcconcat(aup_cmd, " 0x801000", c3); execute_command(c3);
f01143d7:	83 ec 04             	sub    $0x4,%esp
f01143da:	8d 85 62 fe ff ff    	lea    -0x19e(%ebp),%eax
f01143e0:	50                   	push   %eax
f01143e1:	68 f2 8e 13 f0       	push   $0xf0138ef2
f01143e6:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f01143ec:	50                   	push   %eax
f01143ed:	e8 d7 c8 01 00       	call   f0130cc9 <strcconcat>
f01143f2:	83 c4 10             	add    $0x10,%esp
f01143f5:	83 ec 0c             	sub    $0xc,%esp
f01143f8:	8d 85 62 fe ff ff    	lea    -0x19e(%ebp),%eax
f01143fe:	50                   	push   %eax
f01143ff:	e8 8b c8 fe ff       	call   f0100c8f <execute_command>
f0114404:	83 c4 10             	add    $0x10,%esp
		/*allocate page*/char c4[100] ;strcconcat(aup_cmd, " 0x810000", c4); execute_command(c4);
f0114407:	83 ec 04             	sub    $0x4,%esp
f011440a:	8d 85 c6 fe ff ff    	lea    -0x13a(%ebp),%eax
f0114410:	50                   	push   %eax
f0114411:	68 18 9e 13 f0       	push   $0xf0139e18
f0114416:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f011441c:	50                   	push   %eax
f011441d:	e8 a7 c8 01 00       	call   f0130cc9 <strcconcat>
f0114422:	83 c4 10             	add    $0x10,%esp
f0114425:	83 ec 0c             	sub    $0xc,%esp
f0114428:	8d 85 c6 fe ff ff    	lea    -0x13a(%ebp),%eax
f011442e:	50                   	push   %eax
f011442f:	e8 5b c8 fe ff       	call   f0100c8f <execute_command>
f0114434:	83 c4 10             	add    $0x10,%esp

		//Test7
		res = calculate_required_frames(proc_directory, 0x700000, 2*mega);
f0114437:	8b 45 cc             	mov    -0x34(%ebp),%eax
f011443a:	01 c0                	add    %eax,%eax
f011443c:	83 ec 04             	sub    $0x4,%esp
f011443f:	50                   	push   %eax
f0114440:	68 00 00 70 00       	push   $0x700000
f0114445:	ff 75 d8             	pushl  -0x28(%ebp)
f0114448:	e8 49 41 ff ff       	call   f0108596 <calculate_required_frames>
f011444d:	83 c4 10             	add    $0x10,%esp
f0114450:	89 45 c8             	mov    %eax,-0x38(%ebp)
		expected = 510 ;
f0114453:	c7 45 c4 fe 01 00 00 	movl   $0x1fe,-0x3c(%ebp)
		if (res != expected)
f011445a:	8b 45 c8             	mov    -0x38(%ebp),%eax
f011445d:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f0114460:	74 24                	je     f0114486 <test_calculate_required_frames+0x7b7>
		{
			warn("[EVAL] calculate_required_frames: Failed (count is not correct). res=%d, expected=%d\n", res, expected);
f0114462:	83 ec 0c             	sub    $0xc,%esp
f0114465:	ff 75 c4             	pushl  -0x3c(%ebp)
f0114468:	ff 75 c8             	pushl  -0x38(%ebp)
f011446b:	68 78 9d 13 f0       	push   $0xf0139d78
f0114470:	68 54 06 00 00       	push   $0x654
f0114475:	68 7e 81 13 f0       	push   $0xf013817e
f011447a:	e8 b3 be fe ff       	call   f0100332 <_warn>
f011447f:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0114482:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 10 ;
f0114486:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f011448a:	74 04                	je     f0114490 <test_calculate_required_frames+0x7c1>
f011448c:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f0114490:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		//Test8
		res = calculate_required_frames(proc_directory, 0x3FFFFF, 1*kilo);
f0114494:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0114497:	83 ec 04             	sub    $0x4,%esp
f011449a:	50                   	push   %eax
f011449b:	68 ff ff 3f 00       	push   $0x3fffff
f01144a0:	ff 75 d8             	pushl  -0x28(%ebp)
f01144a3:	e8 ee 40 ff ff       	call   f0108596 <calculate_required_frames>
f01144a8:	83 c4 10             	add    $0x10,%esp
f01144ab:	89 45 c8             	mov    %eax,-0x38(%ebp)
		expected = 3 ;
f01144ae:	c7 45 c4 03 00 00 00 	movl   $0x3,-0x3c(%ebp)
		if (res != expected)
f01144b5:	8b 45 c8             	mov    -0x38(%ebp),%eax
f01144b8:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f01144bb:	74 24                	je     f01144e1 <test_calculate_required_frames+0x812>
		{
			warn("[EVAL] calculate_required_frames: Failed (count is not correct). res=%d, expected=%d\n", res, expected);
f01144bd:	83 ec 0c             	sub    $0xc,%esp
f01144c0:	ff 75 c4             	pushl  -0x3c(%ebp)
f01144c3:	ff 75 c8             	pushl  -0x38(%ebp)
f01144c6:	68 78 9d 13 f0       	push   $0xf0139d78
f01144cb:	68 5f 06 00 00       	push   $0x65f
f01144d0:	68 7e 81 13 f0       	push   $0xf013817e
f01144d5:	e8 58 be fe ff       	call   f0100332 <_warn>
f01144da:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f01144dd:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 10 ;
f01144e1:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f01144e5:	74 04                	je     f01144eb <test_calculate_required_frames+0x81c>
f01144e7:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f01144eb:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	}
	cprintf("\nCASE II: END\n") ;
f01144ef:	83 ec 0c             	sub    $0xc,%esp
f01144f2:	68 a3 8e 13 f0       	push   $0xf0138ea3
f01144f7:	e8 31 c7 fe ff       	call   f0100c2d <cprintf>
f01144fc:	83 c4 10             	add    $0x10,%esp

	cprintf("[EVAL] calculate_required_frames: FINISHED. Evaluation = %d\n", eval);
f01144ff:	83 ec 08             	sub    $0x8,%esp
f0114502:	ff 75 e4             	pushl  -0x1c(%ebp)
f0114505:	68 24 9e 13 f0       	push   $0xf0139e24
f011450a:	e8 1e c7 fe ff       	call   f0100c2d <cprintf>
f011450f:	83 c4 10             	add    $0x10,%esp
	if(eval == 100)
f0114512:	83 7d e4 64          	cmpl   $0x64,-0x1c(%ebp)
f0114516:	75 10                	jne    f0114528 <test_calculate_required_frames+0x859>
		cprintf("Congratulations!! test calculate_required_frames completed successfully.\n");
f0114518:	83 ec 0c             	sub    $0xc,%esp
f011451b:	68 64 9e 13 f0       	push   $0xf0139e64
f0114520:	e8 08 c7 fe ff       	call   f0100c2d <cprintf>
f0114525:	83 c4 10             	add    $0x10,%esp

	//return back to the kernel directory
	lcr3(phys_page_directory) ;
f0114528:	a1 e8 0e 6c f0       	mov    0xf06c0ee8,%eax
f011452d:	89 45 d4             	mov    %eax,-0x2c(%ebp)
f0114530:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0114533:	0f 22 d8             	mov    %eax,%cr3

	return 0;
f0114536:	b8 00 00 00 00       	mov    $0x0,%eax
}
f011453b:	8d 65 f4             	lea    -0xc(%ebp),%esp
f011453e:	5b                   	pop    %ebx
f011453f:	5e                   	pop    %esi
f0114540:	5f                   	pop    %edi
f0114541:	5d                   	pop    %ebp
f0114542:	c3                   	ret    

f0114543 <test_calculate_allocated_space>:

int test_calculate_allocated_space()
{
f0114543:	55                   	push   %ebp
f0114544:	89 e5                	mov    %esp,%ebp
f0114546:	57                   	push   %edi
f0114547:	56                   	push   %esi
f0114548:	53                   	push   %ebx
f0114549:	81 ec 0c 02 00 00    	sub    $0x20c,%esp
	//Create a Temp. User Process
	char prog_name[50] = "fos_helloWorld";
f011454f:	8d 45 8e             	lea    -0x72(%ebp),%eax
f0114552:	bb 18 8c 13 f0       	mov    $0xf0138c18,%ebx
f0114557:	ba 0f 00 00 00       	mov    $0xf,%edx
f011455c:	89 c7                	mov    %eax,%edi
f011455e:	89 de                	mov    %ebx,%esi
f0114560:	89 d1                	mov    %edx,%ecx
f0114562:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0114564:	8d 55 9d             	lea    -0x63(%ebp),%edx
f0114567:	b9 23 00 00 00       	mov    $0x23,%ecx
f011456c:	b0 00                	mov    $0x0,%al
f011456e:	89 d7                	mov    %edx,%edi
f0114570:	f3 aa                	rep stos %al,%es:(%edi)
	struct Env* env = env_create(prog_name, 20, 10, 0);
f0114572:	6a 00                	push   $0x0
f0114574:	6a 0a                	push   $0xa
f0114576:	6a 14                	push   $0x14
f0114578:	8d 45 8e             	lea    -0x72(%ebp),%eax
f011457b:	50                   	push   %eax
f011457c:	e8 f1 40 ff ff       	call   f0108672 <env_create>
f0114581:	83 c4 10             	add    $0x10,%esp
f0114584:	89 45 dc             	mov    %eax,-0x24(%ebp)
	uint32 *proc_directory = env->env_page_directory ;
f0114587:	8b 45 dc             	mov    -0x24(%ebp),%eax
f011458a:	8b 40 5c             	mov    0x5c(%eax),%eax
f011458d:	89 45 d8             	mov    %eax,-0x28(%ebp)
	lcr3(env->env_cr3) ;
f0114590:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0114593:	8b 40 60             	mov    0x60(%eax),%eax
f0114596:	89 45 c0             	mov    %eax,-0x40(%ebp)
f0114599:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011459c:	0f 22 d8             	mov    %eax,%cr3
	char aup[20] = "aup " ;
f011459f:	c7 85 7a ff ff ff 61 	movl   $0x20707561,-0x86(%ebp)
f01145a6:	75 70 20 
f01145a9:	c7 85 7e ff ff ff 00 	movl   $0x0,-0x82(%ebp)
f01145b0:	00 00 00 
f01145b3:	8d 55 82             	lea    -0x7e(%ebp),%edx
f01145b6:	b9 03 00 00 00       	mov    $0x3,%ecx
f01145bb:	b8 00 00 00 00       	mov    $0x0,%eax
f01145c0:	89 d7                	mov    %edx,%edi
f01145c2:	f3 ab                	rep stos %eax,%es:(%edi)
	char env_id[20] ; ltostr(env->env_id, env_id) ;
f01145c4:	8b 45 dc             	mov    -0x24(%ebp),%eax
f01145c7:	8b 40 4c             	mov    0x4c(%eax),%eax
f01145ca:	83 ec 08             	sub    $0x8,%esp
f01145cd:	8d 95 66 ff ff ff    	lea    -0x9a(%ebp),%edx
f01145d3:	52                   	push   %edx
f01145d4:	50                   	push   %eax
f01145d5:	e8 f7 c5 01 00       	call   f0130bd1 <ltostr>
f01145da:	83 c4 10             	add    $0x10,%esp
	char aup_cmd[50];
	strcconcat(aup, env_id, aup_cmd);
f01145dd:	83 ec 04             	sub    $0x4,%esp
f01145e0:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f01145e6:	50                   	push   %eax
f01145e7:	8d 85 66 ff ff ff    	lea    -0x9a(%ebp),%eax
f01145ed:	50                   	push   %eax
f01145ee:	8d 85 7a ff ff ff    	lea    -0x86(%ebp),%eax
f01145f4:	50                   	push   %eax
f01145f5:	e8 cf c6 01 00       	call   f0130cc9 <strcconcat>
f01145fa:	83 c4 10             	add    $0x10,%esp
	//===================================================

	char *ptr1, *ptr2, *ptr3, *ptr4, *ptr5, *ptr6, *ptr7, *ptr8;
	char tptr[10] ;
	int kilo = 1024 ;
f01145fd:	c7 45 d0 00 04 00 00 	movl   $0x400,-0x30(%ebp)
	int mega = 1024*1024 ;
f0114604:	c7 45 cc 00 00 10 00 	movl   $0x100000,-0x34(%ebp)
	uint32 eval = 0;
f011460b:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
	uint8 correct = 1;
f0114612:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	uint32 expected_num_pages;
	uint32 expected_num_tables;
	uint32 numOfFreeFramesBefore, numOfFreeFramesAfter;
	uint32 num_pages = 0;
f0114616:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f011461d:	00 00 00 
	uint32 num_tables = 0;
f0114620:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f0114627:	00 00 00 
	ClearUserSpace(proc_directory);
f011462a:	83 ec 0c             	sub    $0xc,%esp
f011462d:	ff 75 d8             	pushl  -0x28(%ebp)
f0114630:	e8 d8 11 00 00       	call   f011580d <ClearUserSpace>
f0114635:	83 c4 10             	add    $0x10,%esp

	/*================================================*/
	/*PART I: ALL pages and tables are not exist 50%  */
	/*================================================*/
	cprintf("\nCASE I: ALL pages and tables are not exist [50%]\n") ;
f0114638:	83 ec 0c             	sub    $0xc,%esp
f011463b:	68 44 9d 13 f0       	push   $0xf0139d44
f0114640:	e8 e8 c5 fe ff       	call   f0100c2d <cprintf>
f0114645:	83 c4 10             	add    $0x10,%esp
	{
		//Test1
		calculate_allocated_space(proc_directory, 0x0, 0x0+8*kilo, &num_tables, &num_pages);
f0114648:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011464b:	c1 e0 03             	shl    $0x3,%eax
f011464e:	89 c2                	mov    %eax,%edx
f0114650:	83 ec 0c             	sub    $0xc,%esp
f0114653:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f0114659:	50                   	push   %eax
f011465a:	8d 85 20 ff ff ff    	lea    -0xe0(%ebp),%eax
f0114660:	50                   	push   %eax
f0114661:	52                   	push   %edx
f0114662:	6a 00                	push   $0x0
f0114664:	ff 75 d8             	pushl  -0x28(%ebp)
f0114667:	e8 0d 3f ff ff       	call   f0108579 <calculate_allocated_space>
f011466c:	83 c4 20             	add    $0x20,%esp
		if (num_tables != 0)
f011466f:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0114675:	85 c0                	test   %eax,%eax
f0114677:	74 27                	je     f01146a0 <test_calculate_allocated_space+0x15d>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Tables count is not correct). res=%d, expected=%d\n", num_tables, 0);
f0114679:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f011467f:	83 ec 0c             	sub    $0xc,%esp
f0114682:	6a 00                	push   $0x0
f0114684:	50                   	push   %eax
f0114685:	68 b0 9e 13 f0       	push   $0xf0139eb0
f011468a:	68 94 06 00 00       	push   $0x694
f011468f:	68 7e 81 13 f0       	push   $0xf013817e
f0114694:	e8 99 bc fe ff       	call   f0100332 <_warn>
f0114699:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f011469c:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (num_pages != 0)
f01146a0:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f01146a6:	85 c0                	test   %eax,%eax
f01146a8:	74 27                	je     f01146d1 <test_calculate_allocated_space+0x18e>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Pages count is not correct). res=%d, expected=%d\n", num_pages, 0);
f01146aa:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f01146b0:	83 ec 0c             	sub    $0xc,%esp
f01146b3:	6a 00                	push   $0x0
f01146b5:	50                   	push   %eax
f01146b6:	68 10 9f 13 f0       	push   $0xf0139f10
f01146bb:	68 99 06 00 00       	push   $0x699
f01146c0:	68 7e 81 13 f0       	push   $0xf013817e
f01146c5:	e8 68 bc fe ff       	call   f0100332 <_warn>
f01146ca:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f01146cd:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f01146d1:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f01146d5:	74 04                	je     f01146db <test_calculate_allocated_space+0x198>
f01146d7:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f01146db:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		//Test2
		num_tables = 0;
f01146df:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f01146e6:	00 00 00 
		num_pages = 0;
f01146e9:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f01146f0:	00 00 00 
		calculate_allocated_space(proc_directory, 0x0, 0x0+4*mega, &num_tables, &num_pages);
f01146f3:	8b 45 cc             	mov    -0x34(%ebp),%eax
f01146f6:	c1 e0 02             	shl    $0x2,%eax
f01146f9:	89 c2                	mov    %eax,%edx
f01146fb:	83 ec 0c             	sub    $0xc,%esp
f01146fe:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f0114704:	50                   	push   %eax
f0114705:	8d 85 20 ff ff ff    	lea    -0xe0(%ebp),%eax
f011470b:	50                   	push   %eax
f011470c:	52                   	push   %edx
f011470d:	6a 00                	push   $0x0
f011470f:	ff 75 d8             	pushl  -0x28(%ebp)
f0114712:	e8 62 3e ff ff       	call   f0108579 <calculate_allocated_space>
f0114717:	83 c4 20             	add    $0x20,%esp
		if (num_tables != 0)
f011471a:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0114720:	85 c0                	test   %eax,%eax
f0114722:	74 27                	je     f011474b <test_calculate_allocated_space+0x208>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Tables count is not correct). res=%d, expected=%d\n", num_tables, 0);
f0114724:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f011472a:	83 ec 0c             	sub    $0xc,%esp
f011472d:	6a 00                	push   $0x0
f011472f:	50                   	push   %eax
f0114730:	68 b0 9e 13 f0       	push   $0xf0139eb0
f0114735:	68 a5 06 00 00       	push   $0x6a5
f011473a:	68 7e 81 13 f0       	push   $0xf013817e
f011473f:	e8 ee bb fe ff       	call   f0100332 <_warn>
f0114744:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0114747:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (num_pages != 0)
f011474b:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0114751:	85 c0                	test   %eax,%eax
f0114753:	74 27                	je     f011477c <test_calculate_allocated_space+0x239>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Pages count is not correct). res=%d, expected=%d\n", num_pages, 0);
f0114755:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011475b:	83 ec 0c             	sub    $0xc,%esp
f011475e:	6a 00                	push   $0x0
f0114760:	50                   	push   %eax
f0114761:	68 10 9f 13 f0       	push   $0xf0139f10
f0114766:	68 aa 06 00 00       	push   $0x6aa
f011476b:	68 7e 81 13 f0       	push   $0xf013817e
f0114770:	e8 bd bb fe ff       	call   f0100332 <_warn>
f0114775:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0114778:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f011477c:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0114780:	74 04                	je     f0114786 <test_calculate_allocated_space+0x243>
f0114782:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0114786:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		//Test3
		num_tables = 0;
f011478a:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f0114791:	00 00 00 
		num_pages = 0;
f0114794:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f011479b:	00 00 00 
		calculate_allocated_space(proc_directory, 0x0, 0x0+1024*mega, &num_tables, &num_pages);
f011479e:	8b 45 cc             	mov    -0x34(%ebp),%eax
f01147a1:	c1 e0 0a             	shl    $0xa,%eax
f01147a4:	89 c2                	mov    %eax,%edx
f01147a6:	83 ec 0c             	sub    $0xc,%esp
f01147a9:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f01147af:	50                   	push   %eax
f01147b0:	8d 85 20 ff ff ff    	lea    -0xe0(%ebp),%eax
f01147b6:	50                   	push   %eax
f01147b7:	52                   	push   %edx
f01147b8:	6a 00                	push   $0x0
f01147ba:	ff 75 d8             	pushl  -0x28(%ebp)
f01147bd:	e8 b7 3d ff ff       	call   f0108579 <calculate_allocated_space>
f01147c2:	83 c4 20             	add    $0x20,%esp
		if (num_tables != 0)
f01147c5:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f01147cb:	85 c0                	test   %eax,%eax
f01147cd:	74 27                	je     f01147f6 <test_calculate_allocated_space+0x2b3>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Tables count is not correct). res=%d, expected=%d\n", num_tables, 0);
f01147cf:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f01147d5:	83 ec 0c             	sub    $0xc,%esp
f01147d8:	6a 00                	push   $0x0
f01147da:	50                   	push   %eax
f01147db:	68 b0 9e 13 f0       	push   $0xf0139eb0
f01147e0:	68 b6 06 00 00       	push   $0x6b6
f01147e5:	68 7e 81 13 f0       	push   $0xf013817e
f01147ea:	e8 43 bb fe ff       	call   f0100332 <_warn>
f01147ef:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f01147f2:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (num_pages != 0)
f01147f6:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f01147fc:	85 c0                	test   %eax,%eax
f01147fe:	74 27                	je     f0114827 <test_calculate_allocated_space+0x2e4>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Pages count is not correct). res=%d, expected=%d\n", num_pages, 0);
f0114800:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0114806:	83 ec 0c             	sub    $0xc,%esp
f0114809:	6a 00                	push   $0x0
f011480b:	50                   	push   %eax
f011480c:	68 10 9f 13 f0       	push   $0xf0139f10
f0114811:	68 bb 06 00 00       	push   $0x6bb
f0114816:	68 7e 81 13 f0       	push   $0xf013817e
f011481b:	e8 12 bb fe ff       	call   f0100332 <_warn>
f0114820:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0114823:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0114827:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f011482b:	74 04                	je     f0114831 <test_calculate_allocated_space+0x2ee>
f011482d:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0114831:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	}
	{
		//Test4
		num_tables = 0;
f0114835:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f011483c:	00 00 00 
		num_pages = 0;
f011483f:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f0114846:	00 00 00 
		calculate_allocated_space(proc_directory, 0x1000, 0x1000+6*kilo, &num_tables, &num_pages);
f0114849:	8b 55 d0             	mov    -0x30(%ebp),%edx
f011484c:	89 d0                	mov    %edx,%eax
f011484e:	01 c0                	add    %eax,%eax
f0114850:	01 d0                	add    %edx,%eax
f0114852:	01 c0                	add    %eax,%eax
f0114854:	05 00 10 00 00       	add    $0x1000,%eax
f0114859:	89 c2                	mov    %eax,%edx
f011485b:	83 ec 0c             	sub    $0xc,%esp
f011485e:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f0114864:	50                   	push   %eax
f0114865:	8d 85 20 ff ff ff    	lea    -0xe0(%ebp),%eax
f011486b:	50                   	push   %eax
f011486c:	52                   	push   %edx
f011486d:	68 00 10 00 00       	push   $0x1000
f0114872:	ff 75 d8             	pushl  -0x28(%ebp)
f0114875:	e8 ff 3c ff ff       	call   f0108579 <calculate_allocated_space>
f011487a:	83 c4 20             	add    $0x20,%esp
		if (num_tables != 0)
f011487d:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0114883:	85 c0                	test   %eax,%eax
f0114885:	74 27                	je     f01148ae <test_calculate_allocated_space+0x36b>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Tables count is not correct). res=%d, expected=%d\n", num_tables, 0);
f0114887:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f011488d:	83 ec 0c             	sub    $0xc,%esp
f0114890:	6a 00                	push   $0x0
f0114892:	50                   	push   %eax
f0114893:	68 b0 9e 13 f0       	push   $0xf0139eb0
f0114898:	68 c8 06 00 00       	push   $0x6c8
f011489d:	68 7e 81 13 f0       	push   $0xf013817e
f01148a2:	e8 8b ba fe ff       	call   f0100332 <_warn>
f01148a7:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f01148aa:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (num_pages != 0)
f01148ae:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f01148b4:	85 c0                	test   %eax,%eax
f01148b6:	74 27                	je     f01148df <test_calculate_allocated_space+0x39c>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Pages count is not correct). res=%d, expected=%d\n", num_pages, 0);
f01148b8:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f01148be:	83 ec 0c             	sub    $0xc,%esp
f01148c1:	6a 00                	push   $0x0
f01148c3:	50                   	push   %eax
f01148c4:	68 10 9f 13 f0       	push   $0xf0139f10
f01148c9:	68 cd 06 00 00       	push   $0x6cd
f01148ce:	68 7e 81 13 f0       	push   $0xf013817e
f01148d3:	e8 5a ba fe ff       	call   f0100332 <_warn>
f01148d8:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f01148db:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f01148df:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f01148e3:	74 04                	je     f01148e9 <test_calculate_allocated_space+0x3a6>
f01148e5:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f01148e9:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		//Test5
		num_tables = 0;
f01148ed:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f01148f4:	00 00 00 
		num_pages = 0;
f01148f7:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f01148fe:	00 00 00 
		calculate_allocated_space(proc_directory, 0x1800, 0x1800+3*kilo, &num_tables, &num_pages);
f0114901:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0114904:	89 c2                	mov    %eax,%edx
f0114906:	01 d2                	add    %edx,%edx
f0114908:	01 d0                	add    %edx,%eax
f011490a:	05 00 18 00 00       	add    $0x1800,%eax
f011490f:	89 c2                	mov    %eax,%edx
f0114911:	83 ec 0c             	sub    $0xc,%esp
f0114914:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f011491a:	50                   	push   %eax
f011491b:	8d 85 20 ff ff ff    	lea    -0xe0(%ebp),%eax
f0114921:	50                   	push   %eax
f0114922:	52                   	push   %edx
f0114923:	68 00 18 00 00       	push   $0x1800
f0114928:	ff 75 d8             	pushl  -0x28(%ebp)
f011492b:	e8 49 3c ff ff       	call   f0108579 <calculate_allocated_space>
f0114930:	83 c4 20             	add    $0x20,%esp
		if (num_tables != 0)
f0114933:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0114939:	85 c0                	test   %eax,%eax
f011493b:	74 27                	je     f0114964 <test_calculate_allocated_space+0x421>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Tables count is not correct). res=%d, expected=%d\n", num_tables, 0);
f011493d:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0114943:	83 ec 0c             	sub    $0xc,%esp
f0114946:	6a 00                	push   $0x0
f0114948:	50                   	push   %eax
f0114949:	68 b0 9e 13 f0       	push   $0xf0139eb0
f011494e:	68 d9 06 00 00       	push   $0x6d9
f0114953:	68 7e 81 13 f0       	push   $0xf013817e
f0114958:	e8 d5 b9 fe ff       	call   f0100332 <_warn>
f011495d:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0114960:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (num_pages != 0)
f0114964:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011496a:	85 c0                	test   %eax,%eax
f011496c:	74 27                	je     f0114995 <test_calculate_allocated_space+0x452>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Pages count is not correct). res=%d, expected=%d\n", num_pages, 0);
f011496e:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0114974:	83 ec 0c             	sub    $0xc,%esp
f0114977:	6a 00                	push   $0x0
f0114979:	50                   	push   %eax
f011497a:	68 10 9f 13 f0       	push   $0xf0139f10
f011497f:	68 de 06 00 00       	push   $0x6de
f0114984:	68 7e 81 13 f0       	push   $0xf013817e
f0114989:	e8 a4 b9 fe ff       	call   f0100332 <_warn>
f011498e:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0114991:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0114995:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0114999:	74 04                	je     f011499f <test_calculate_allocated_space+0x45c>
f011499b:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f011499f:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		//Test6
		num_tables = 0;
f01149a3:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f01149aa:	00 00 00 
		num_pages = 0;
f01149ad:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f01149b4:	00 00 00 
		calculate_allocated_space(proc_directory, 0x400000, 0x400000+10*mega, &num_tables, &num_pages);
f01149b7:	8b 55 cc             	mov    -0x34(%ebp),%edx
f01149ba:	89 d0                	mov    %edx,%eax
f01149bc:	c1 e0 02             	shl    $0x2,%eax
f01149bf:	01 d0                	add    %edx,%eax
f01149c1:	01 c0                	add    %eax,%eax
f01149c3:	05 00 00 40 00       	add    $0x400000,%eax
f01149c8:	89 c2                	mov    %eax,%edx
f01149ca:	83 ec 0c             	sub    $0xc,%esp
f01149cd:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f01149d3:	50                   	push   %eax
f01149d4:	8d 85 20 ff ff ff    	lea    -0xe0(%ebp),%eax
f01149da:	50                   	push   %eax
f01149db:	52                   	push   %edx
f01149dc:	68 00 00 40 00       	push   $0x400000
f01149e1:	ff 75 d8             	pushl  -0x28(%ebp)
f01149e4:	e8 90 3b ff ff       	call   f0108579 <calculate_allocated_space>
f01149e9:	83 c4 20             	add    $0x20,%esp
		if (num_tables != 0)
f01149ec:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f01149f2:	85 c0                	test   %eax,%eax
f01149f4:	74 27                	je     f0114a1d <test_calculate_allocated_space+0x4da>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Tables count is not correct). res=%d, expected=%d\n", num_tables, 0);
f01149f6:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f01149fc:	83 ec 0c             	sub    $0xc,%esp
f01149ff:	6a 00                	push   $0x0
f0114a01:	50                   	push   %eax
f0114a02:	68 b0 9e 13 f0       	push   $0xf0139eb0
f0114a07:	68 ea 06 00 00       	push   $0x6ea
f0114a0c:	68 7e 81 13 f0       	push   $0xf013817e
f0114a11:	e8 1c b9 fe ff       	call   f0100332 <_warn>
f0114a16:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0114a19:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (num_pages != 0)
f0114a1d:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0114a23:	85 c0                	test   %eax,%eax
f0114a25:	74 27                	je     f0114a4e <test_calculate_allocated_space+0x50b>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Pages count is not correct). res=%d, expected=%d\n", num_pages, 0);
f0114a27:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0114a2d:	83 ec 0c             	sub    $0xc,%esp
f0114a30:	6a 00                	push   $0x0
f0114a32:	50                   	push   %eax
f0114a33:	68 10 9f 13 f0       	push   $0xf0139f10
f0114a38:	68 ef 06 00 00       	push   $0x6ef
f0114a3d:	68 7e 81 13 f0       	push   $0xf013817e
f0114a42:	e8 eb b8 fe ff       	call   f0100332 <_warn>
f0114a47:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0114a4a:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0114a4e:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0114a52:	74 04                	je     f0114a58 <test_calculate_allocated_space+0x515>
f0114a54:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0114a58:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	}
	{
		//Test7
		num_tables = 0;
f0114a5c:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f0114a63:	00 00 00 
		num_pages = 0;
f0114a66:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f0114a6d:	00 00 00 
		calculate_allocated_space(proc_directory, 0x700000, 0x700000+2*mega, &num_tables, &num_pages);
f0114a70:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0114a73:	05 00 00 38 00       	add    $0x380000,%eax
f0114a78:	01 c0                	add    %eax,%eax
f0114a7a:	89 c2                	mov    %eax,%edx
f0114a7c:	83 ec 0c             	sub    $0xc,%esp
f0114a7f:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f0114a85:	50                   	push   %eax
f0114a86:	8d 85 20 ff ff ff    	lea    -0xe0(%ebp),%eax
f0114a8c:	50                   	push   %eax
f0114a8d:	52                   	push   %edx
f0114a8e:	68 00 00 70 00       	push   $0x700000
f0114a93:	ff 75 d8             	pushl  -0x28(%ebp)
f0114a96:	e8 de 3a ff ff       	call   f0108579 <calculate_allocated_space>
f0114a9b:	83 c4 20             	add    $0x20,%esp
		if (num_tables != 0)
f0114a9e:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0114aa4:	85 c0                	test   %eax,%eax
f0114aa6:	74 27                	je     f0114acf <test_calculate_allocated_space+0x58c>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Tables count is not correct). res=%d, expected=%d\n", num_tables, 0);
f0114aa8:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0114aae:	83 ec 0c             	sub    $0xc,%esp
f0114ab1:	6a 00                	push   $0x0
f0114ab3:	50                   	push   %eax
f0114ab4:	68 b0 9e 13 f0       	push   $0xf0139eb0
f0114ab9:	68 fc 06 00 00       	push   $0x6fc
f0114abe:	68 7e 81 13 f0       	push   $0xf013817e
f0114ac3:	e8 6a b8 fe ff       	call   f0100332 <_warn>
f0114ac8:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0114acb:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (num_pages != 0)
f0114acf:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0114ad5:	85 c0                	test   %eax,%eax
f0114ad7:	74 27                	je     f0114b00 <test_calculate_allocated_space+0x5bd>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Pages count is not correct). res=%d, expected=%d\n", num_pages, 0);
f0114ad9:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0114adf:	83 ec 0c             	sub    $0xc,%esp
f0114ae2:	6a 00                	push   $0x0
f0114ae4:	50                   	push   %eax
f0114ae5:	68 10 9f 13 f0       	push   $0xf0139f10
f0114aea:	68 01 07 00 00       	push   $0x701
f0114aef:	68 7e 81 13 f0       	push   $0xf013817e
f0114af4:	e8 39 b8 fe ff       	call   f0100332 <_warn>
f0114af9:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0114afc:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 10 ;
f0114b00:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0114b04:	74 04                	je     f0114b0a <test_calculate_allocated_space+0x5c7>
f0114b06:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f0114b0a:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		//Test8
		num_tables = 0;
f0114b0e:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f0114b15:	00 00 00 
		num_pages = 0;
f0114b18:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f0114b1f:	00 00 00 
		calculate_allocated_space(proc_directory, 0x3FFFFF, 0x3FFFFF+1*kilo, &num_tables, &num_pages);
f0114b22:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0114b25:	05 ff ff 3f 00       	add    $0x3fffff,%eax
f0114b2a:	89 c2                	mov    %eax,%edx
f0114b2c:	83 ec 0c             	sub    $0xc,%esp
f0114b2f:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f0114b35:	50                   	push   %eax
f0114b36:	8d 85 20 ff ff ff    	lea    -0xe0(%ebp),%eax
f0114b3c:	50                   	push   %eax
f0114b3d:	52                   	push   %edx
f0114b3e:	68 ff ff 3f 00       	push   $0x3fffff
f0114b43:	ff 75 d8             	pushl  -0x28(%ebp)
f0114b46:	e8 2e 3a ff ff       	call   f0108579 <calculate_allocated_space>
f0114b4b:	83 c4 20             	add    $0x20,%esp
		if (num_tables != 0)
f0114b4e:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0114b54:	85 c0                	test   %eax,%eax
f0114b56:	74 27                	je     f0114b7f <test_calculate_allocated_space+0x63c>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Tables count is not correct). res=%d, expected=%d\n", num_tables, 0);
f0114b58:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0114b5e:	83 ec 0c             	sub    $0xc,%esp
f0114b61:	6a 00                	push   $0x0
f0114b63:	50                   	push   %eax
f0114b64:	68 b0 9e 13 f0       	push   $0xf0139eb0
f0114b69:	68 0d 07 00 00       	push   $0x70d
f0114b6e:	68 7e 81 13 f0       	push   $0xf013817e
f0114b73:	e8 ba b7 fe ff       	call   f0100332 <_warn>
f0114b78:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0114b7b:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (num_pages != 0)
f0114b7f:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0114b85:	85 c0                	test   %eax,%eax
f0114b87:	74 27                	je     f0114bb0 <test_calculate_allocated_space+0x66d>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Pages count is not correct). res=%d, expected=%d\n", num_pages, 0);
f0114b89:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0114b8f:	83 ec 0c             	sub    $0xc,%esp
f0114b92:	6a 00                	push   $0x0
f0114b94:	50                   	push   %eax
f0114b95:	68 10 9f 13 f0       	push   $0xf0139f10
f0114b9a:	68 12 07 00 00       	push   $0x712
f0114b9f:	68 7e 81 13 f0       	push   $0xf013817e
f0114ba4:	e8 89 b7 fe ff       	call   f0100332 <_warn>
f0114ba9:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0114bac:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 10 ;
f0114bb0:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0114bb4:	74 04                	je     f0114bba <test_calculate_allocated_space+0x677>
f0114bb6:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f0114bba:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	}
	cprintf("\nCASE I: END\n") ;
f0114bbe:	83 ec 0c             	sub    $0xc,%esp
f0114bc1:	68 c9 98 13 f0       	push   $0xf01398c9
f0114bc6:	e8 62 c0 fe ff       	call   f0100c2d <cprintf>
f0114bcb:	83 c4 10             	add    $0x10,%esp

	/*==================================================*/
	/*PART II: SOME pages and/or tables are exist [50%] */
	/*==================================================*/
	cprintf("\nCASE II: SOME pages and/or tables are exist [50%]\n") ;
f0114bce:	83 ec 0c             	sub    $0xc,%esp
f0114bd1:	68 d0 9d 13 f0       	push   $0xf0139dd0
f0114bd6:	e8 52 c0 fe ff       	call   f0100c2d <cprintf>
f0114bdb:	83 c4 10             	add    $0x10,%esp
	{
		//Test1
		/*allocate page*/char c1[100] ;strcconcat(aup_cmd, " 0x0", c1); execute_command(c1);
f0114bde:	83 ec 04             	sub    $0x4,%esp
f0114be1:	8d 85 f4 fd ff ff    	lea    -0x20c(%ebp),%eax
f0114be7:	50                   	push   %eax
f0114be8:	68 82 8c 13 f0       	push   $0xf0138c82
f0114bed:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f0114bf3:	50                   	push   %eax
f0114bf4:	e8 d0 c0 01 00       	call   f0130cc9 <strcconcat>
f0114bf9:	83 c4 10             	add    $0x10,%esp
f0114bfc:	83 ec 0c             	sub    $0xc,%esp
f0114bff:	8d 85 f4 fd ff ff    	lea    -0x20c(%ebp),%eax
f0114c05:	50                   	push   %eax
f0114c06:	e8 84 c0 fe ff       	call   f0100c8f <execute_command>
f0114c0b:	83 c4 10             	add    $0x10,%esp

		num_tables = 0;
f0114c0e:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f0114c15:	00 00 00 
		num_pages = 0;
f0114c18:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f0114c1f:	00 00 00 
		calculate_allocated_space(proc_directory, 0x0, 0x0+8*kilo, &num_tables, &num_pages);
f0114c22:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0114c25:	c1 e0 03             	shl    $0x3,%eax
f0114c28:	89 c2                	mov    %eax,%edx
f0114c2a:	83 ec 0c             	sub    $0xc,%esp
f0114c2d:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f0114c33:	50                   	push   %eax
f0114c34:	8d 85 20 ff ff ff    	lea    -0xe0(%ebp),%eax
f0114c3a:	50                   	push   %eax
f0114c3b:	52                   	push   %edx
f0114c3c:	6a 00                	push   $0x0
f0114c3e:	ff 75 d8             	pushl  -0x28(%ebp)
f0114c41:	e8 33 39 ff ff       	call   f0108579 <calculate_allocated_space>
f0114c46:	83 c4 20             	add    $0x20,%esp
		expected_num_tables = 1 ;
f0114c49:	c7 45 c8 01 00 00 00 	movl   $0x1,-0x38(%ebp)
		expected_num_pages = 1 ;
f0114c50:	c7 45 c4 01 00 00 00 	movl   $0x1,-0x3c(%ebp)
		if (num_tables != expected_num_tables)
f0114c57:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0114c5d:	3b 45 c8             	cmp    -0x38(%ebp),%eax
f0114c60:	74 28                	je     f0114c8a <test_calculate_allocated_space+0x747>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Tables count is not correct). res=%d, expected=%d\n", num_tables, expected_num_tables);
f0114c62:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0114c68:	83 ec 0c             	sub    $0xc,%esp
f0114c6b:	ff 75 c8             	pushl  -0x38(%ebp)
f0114c6e:	50                   	push   %eax
f0114c6f:	68 b0 9e 13 f0       	push   $0xf0139eb0
f0114c74:	68 29 07 00 00       	push   $0x729
f0114c79:	68 7e 81 13 f0       	push   $0xf013817e
f0114c7e:	e8 af b6 fe ff       	call   f0100332 <_warn>
f0114c83:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0114c86:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (num_pages != expected_num_pages)
f0114c8a:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0114c90:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f0114c93:	74 28                	je     f0114cbd <test_calculate_allocated_space+0x77a>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Pages count is not correct). res=%d, expected=%d\n", num_pages, expected_num_pages);
f0114c95:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0114c9b:	83 ec 0c             	sub    $0xc,%esp
f0114c9e:	ff 75 c4             	pushl  -0x3c(%ebp)
f0114ca1:	50                   	push   %eax
f0114ca2:	68 10 9f 13 f0       	push   $0xf0139f10
f0114ca7:	68 2e 07 00 00       	push   $0x72e
f0114cac:	68 7e 81 13 f0       	push   $0xf013817e
f0114cb1:	e8 7c b6 fe ff       	call   f0100332 <_warn>
f0114cb6:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0114cb9:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0114cbd:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0114cc1:	74 04                	je     f0114cc7 <test_calculate_allocated_space+0x784>
f0114cc3:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0114cc7:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		/*allocate page*/char c2[100] ;strcconcat(aup_cmd, " 0x100000", c2); execute_command(c2);
f0114ccb:	83 ec 04             	sub    $0x4,%esp
f0114cce:	8d 85 58 fe ff ff    	lea    -0x1a8(%ebp),%eax
f0114cd4:	50                   	push   %eax
f0114cd5:	68 8f 8c 13 f0       	push   $0xf0138c8f
f0114cda:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f0114ce0:	50                   	push   %eax
f0114ce1:	e8 e3 bf 01 00       	call   f0130cc9 <strcconcat>
f0114ce6:	83 c4 10             	add    $0x10,%esp
f0114ce9:	83 ec 0c             	sub    $0xc,%esp
f0114cec:	8d 85 58 fe ff ff    	lea    -0x1a8(%ebp),%eax
f0114cf2:	50                   	push   %eax
f0114cf3:	e8 97 bf fe ff       	call   f0100c8f <execute_command>
f0114cf8:	83 c4 10             	add    $0x10,%esp
		/*allocate page*/char c3[100] ;strcconcat(aup_cmd, " 0x10000000", c3); execute_command(c3);
f0114cfb:	83 ec 04             	sub    $0x4,%esp
f0114cfe:	8d 85 bc fe ff ff    	lea    -0x144(%ebp),%eax
f0114d04:	50                   	push   %eax
f0114d05:	68 04 9e 13 f0       	push   $0xf0139e04
f0114d0a:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f0114d10:	50                   	push   %eax
f0114d11:	e8 b3 bf 01 00       	call   f0130cc9 <strcconcat>
f0114d16:	83 c4 10             	add    $0x10,%esp
f0114d19:	83 ec 0c             	sub    $0xc,%esp
f0114d1c:	8d 85 bc fe ff ff    	lea    -0x144(%ebp),%eax
f0114d22:	50                   	push   %eax
f0114d23:	e8 67 bf fe ff       	call   f0100c8f <execute_command>
f0114d28:	83 c4 10             	add    $0x10,%esp

		//Test2
		num_tables = 0;
f0114d2b:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f0114d32:	00 00 00 
		num_pages = 0;
f0114d35:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f0114d3c:	00 00 00 
		calculate_allocated_space(proc_directory, 0x0, 0x0+8*mega, &num_tables, &num_pages);
f0114d3f:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0114d42:	c1 e0 03             	shl    $0x3,%eax
f0114d45:	89 c2                	mov    %eax,%edx
f0114d47:	83 ec 0c             	sub    $0xc,%esp
f0114d4a:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f0114d50:	50                   	push   %eax
f0114d51:	8d 85 20 ff ff ff    	lea    -0xe0(%ebp),%eax
f0114d57:	50                   	push   %eax
f0114d58:	52                   	push   %edx
f0114d59:	6a 00                	push   $0x0
f0114d5b:	ff 75 d8             	pushl  -0x28(%ebp)
f0114d5e:	e8 16 38 ff ff       	call   f0108579 <calculate_allocated_space>
f0114d63:	83 c4 20             	add    $0x20,%esp
		expected_num_tables = 1 ;
f0114d66:	c7 45 c8 01 00 00 00 	movl   $0x1,-0x38(%ebp)
		expected_num_pages = 2 ;
f0114d6d:	c7 45 c4 02 00 00 00 	movl   $0x2,-0x3c(%ebp)
		if (num_tables != expected_num_tables)
f0114d74:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0114d7a:	3b 45 c8             	cmp    -0x38(%ebp),%eax
f0114d7d:	74 28                	je     f0114da7 <test_calculate_allocated_space+0x864>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Tables count is not correct). res=%d, expected=%d\n", num_tables, expected_num_tables);
f0114d7f:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0114d85:	83 ec 0c             	sub    $0xc,%esp
f0114d88:	ff 75 c8             	pushl  -0x38(%ebp)
f0114d8b:	50                   	push   %eax
f0114d8c:	68 b0 9e 13 f0       	push   $0xf0139eb0
f0114d91:	68 3f 07 00 00       	push   $0x73f
f0114d96:	68 7e 81 13 f0       	push   $0xf013817e
f0114d9b:	e8 92 b5 fe ff       	call   f0100332 <_warn>
f0114da0:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0114da3:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (num_pages != expected_num_pages)
f0114da7:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0114dad:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f0114db0:	74 28                	je     f0114dda <test_calculate_allocated_space+0x897>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Pages count is not correct). res=%d, expected=%d\n", num_pages, expected_num_pages);
f0114db2:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0114db8:	83 ec 0c             	sub    $0xc,%esp
f0114dbb:	ff 75 c4             	pushl  -0x3c(%ebp)
f0114dbe:	50                   	push   %eax
f0114dbf:	68 10 9f 13 f0       	push   $0xf0139f10
f0114dc4:	68 44 07 00 00       	push   $0x744
f0114dc9:	68 7e 81 13 f0       	push   $0xf013817e
f0114dce:	e8 5f b5 fe ff       	call   f0100332 <_warn>
f0114dd3:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0114dd6:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0114dda:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0114dde:	74 04                	je     f0114de4 <test_calculate_allocated_space+0x8a1>
f0114de0:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0114de4:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		//Test3
		num_tables = 0;
f0114de8:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f0114def:	00 00 00 
		num_pages = 0;
f0114df2:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f0114df9:	00 00 00 
		calculate_allocated_space(proc_directory, 0x0, 0x0+1024*mega, &num_tables, &num_pages);
f0114dfc:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0114dff:	c1 e0 0a             	shl    $0xa,%eax
f0114e02:	89 c2                	mov    %eax,%edx
f0114e04:	83 ec 0c             	sub    $0xc,%esp
f0114e07:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f0114e0d:	50                   	push   %eax
f0114e0e:	8d 85 20 ff ff ff    	lea    -0xe0(%ebp),%eax
f0114e14:	50                   	push   %eax
f0114e15:	52                   	push   %edx
f0114e16:	6a 00                	push   $0x0
f0114e18:	ff 75 d8             	pushl  -0x28(%ebp)
f0114e1b:	e8 59 37 ff ff       	call   f0108579 <calculate_allocated_space>
f0114e20:	83 c4 20             	add    $0x20,%esp
		expected_num_tables = 1 + 1;
f0114e23:	c7 45 c8 02 00 00 00 	movl   $0x2,-0x38(%ebp)
		expected_num_pages = 1 + 1 + 1;
f0114e2a:	c7 45 c4 03 00 00 00 	movl   $0x3,-0x3c(%ebp)
		if (num_tables != expected_num_tables)
f0114e31:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0114e37:	3b 45 c8             	cmp    -0x38(%ebp),%eax
f0114e3a:	74 28                	je     f0114e64 <test_calculate_allocated_space+0x921>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Tables count is not correct). res=%d, expected=%d\n", num_tables, expected_num_tables);
f0114e3c:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0114e42:	83 ec 0c             	sub    $0xc,%esp
f0114e45:	ff 75 c8             	pushl  -0x38(%ebp)
f0114e48:	50                   	push   %eax
f0114e49:	68 b0 9e 13 f0       	push   $0xf0139eb0
f0114e4e:	68 52 07 00 00       	push   $0x752
f0114e53:	68 7e 81 13 f0       	push   $0xf013817e
f0114e58:	e8 d5 b4 fe ff       	call   f0100332 <_warn>
f0114e5d:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0114e60:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (num_pages != expected_num_pages)
f0114e64:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0114e6a:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f0114e6d:	74 28                	je     f0114e97 <test_calculate_allocated_space+0x954>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Pages count is not correct). res=%d, expected=%d\n", num_pages, expected_num_pages);
f0114e6f:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0114e75:	83 ec 0c             	sub    $0xc,%esp
f0114e78:	ff 75 c4             	pushl  -0x3c(%ebp)
f0114e7b:	50                   	push   %eax
f0114e7c:	68 10 9f 13 f0       	push   $0xf0139f10
f0114e81:	68 57 07 00 00       	push   $0x757
f0114e86:	68 7e 81 13 f0       	push   $0xf013817e
f0114e8b:	e8 a2 b4 fe ff       	call   f0100332 <_warn>
f0114e90:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0114e93:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 10 ;
f0114e97:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0114e9b:	74 04                	je     f0114ea1 <test_calculate_allocated_space+0x95e>
f0114e9d:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f0114ea1:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	}
	{
		/*allocate page*/char c3[100] ;strcconcat(aup_cmd, " 0x2000", c3); execute_command(c3);
f0114ea5:	83 ec 04             	sub    $0x4,%esp
f0114ea8:	8d 85 58 fe ff ff    	lea    -0x1a8(%ebp),%eax
f0114eae:	50                   	push   %eax
f0114eaf:	68 10 9e 13 f0       	push   $0xf0139e10
f0114eb4:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f0114eba:	50                   	push   %eax
f0114ebb:	e8 09 be 01 00       	call   f0130cc9 <strcconcat>
f0114ec0:	83 c4 10             	add    $0x10,%esp
f0114ec3:	83 ec 0c             	sub    $0xc,%esp
f0114ec6:	8d 85 58 fe ff ff    	lea    -0x1a8(%ebp),%eax
f0114ecc:	50                   	push   %eax
f0114ecd:	e8 bd bd fe ff       	call   f0100c8f <execute_command>
f0114ed2:	83 c4 10             	add    $0x10,%esp

		//Test4
		num_tables = 0;
f0114ed5:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f0114edc:	00 00 00 
		num_pages = 0;
f0114edf:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f0114ee6:	00 00 00 
		calculate_allocated_space(proc_directory, 0x1800, 0x1800+3*kilo, &num_tables, &num_pages);
f0114ee9:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0114eec:	89 c2                	mov    %eax,%edx
f0114eee:	01 d2                	add    %edx,%edx
f0114ef0:	01 d0                	add    %edx,%eax
f0114ef2:	05 00 18 00 00       	add    $0x1800,%eax
f0114ef7:	89 c2                	mov    %eax,%edx
f0114ef9:	83 ec 0c             	sub    $0xc,%esp
f0114efc:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f0114f02:	50                   	push   %eax
f0114f03:	8d 85 20 ff ff ff    	lea    -0xe0(%ebp),%eax
f0114f09:	50                   	push   %eax
f0114f0a:	52                   	push   %edx
f0114f0b:	68 00 18 00 00       	push   $0x1800
f0114f10:	ff 75 d8             	pushl  -0x28(%ebp)
f0114f13:	e8 61 36 ff ff       	call   f0108579 <calculate_allocated_space>
f0114f18:	83 c4 20             	add    $0x20,%esp
		expected_num_tables = 1;
f0114f1b:	c7 45 c8 01 00 00 00 	movl   $0x1,-0x38(%ebp)
		expected_num_pages = 1;
f0114f22:	c7 45 c4 01 00 00 00 	movl   $0x1,-0x3c(%ebp)
		if (num_tables != expected_num_tables)
f0114f29:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0114f2f:	3b 45 c8             	cmp    -0x38(%ebp),%eax
f0114f32:	74 28                	je     f0114f5c <test_calculate_allocated_space+0xa19>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Tables count is not correct). res=%d, expected=%d\n", num_tables, expected_num_tables);
f0114f34:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0114f3a:	83 ec 0c             	sub    $0xc,%esp
f0114f3d:	ff 75 c8             	pushl  -0x38(%ebp)
f0114f40:	50                   	push   %eax
f0114f41:	68 b0 9e 13 f0       	push   $0xf0139eb0
f0114f46:	68 68 07 00 00       	push   $0x768
f0114f4b:	68 7e 81 13 f0       	push   $0xf013817e
f0114f50:	e8 dd b3 fe ff       	call   f0100332 <_warn>
f0114f55:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0114f58:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (num_pages != expected_num_pages)
f0114f5c:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0114f62:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f0114f65:	74 28                	je     f0114f8f <test_calculate_allocated_space+0xa4c>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Pages count is not correct). res=%d, expected=%d\n", num_pages, expected_num_pages);
f0114f67:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0114f6d:	83 ec 0c             	sub    $0xc,%esp
f0114f70:	ff 75 c4             	pushl  -0x3c(%ebp)
f0114f73:	50                   	push   %eax
f0114f74:	68 10 9f 13 f0       	push   $0xf0139f10
f0114f79:	68 6d 07 00 00       	push   $0x76d
f0114f7e:	68 7e 81 13 f0       	push   $0xf013817e
f0114f83:	e8 aa b3 fe ff       	call   f0100332 <_warn>
f0114f88:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0114f8b:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0114f8f:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0114f93:	74 04                	je     f0114f99 <test_calculate_allocated_space+0xa56>
f0114f95:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0114f99:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		/*allocate page*/char c4[100] ;strcconcat(aup_cmd, " 0x800000", c4); execute_command(c4);
f0114f9d:	83 ec 04             	sub    $0x4,%esp
f0114fa0:	8d 85 bc fe ff ff    	lea    -0x144(%ebp),%eax
f0114fa6:	50                   	push   %eax
f0114fa7:	68 e8 8e 13 f0       	push   $0xf0138ee8
f0114fac:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f0114fb2:	50                   	push   %eax
f0114fb3:	e8 11 bd 01 00       	call   f0130cc9 <strcconcat>
f0114fb8:	83 c4 10             	add    $0x10,%esp
f0114fbb:	83 ec 0c             	sub    $0xc,%esp
f0114fbe:	8d 85 bc fe ff ff    	lea    -0x144(%ebp),%eax
f0114fc4:	50                   	push   %eax
f0114fc5:	e8 c5 bc fe ff       	call   f0100c8f <execute_command>
f0114fca:	83 c4 10             	add    $0x10,%esp

		//Test5
		num_tables = 0;
f0114fcd:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f0114fd4:	00 00 00 
		num_pages = 0;
f0114fd7:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f0114fde:	00 00 00 
		calculate_allocated_space(proc_directory, 0x400000, 0x400000+10*mega, &num_tables, &num_pages);
f0114fe1:	8b 55 cc             	mov    -0x34(%ebp),%edx
f0114fe4:	89 d0                	mov    %edx,%eax
f0114fe6:	c1 e0 02             	shl    $0x2,%eax
f0114fe9:	01 d0                	add    %edx,%eax
f0114feb:	01 c0                	add    %eax,%eax
f0114fed:	05 00 00 40 00       	add    $0x400000,%eax
f0114ff2:	89 c2                	mov    %eax,%edx
f0114ff4:	83 ec 0c             	sub    $0xc,%esp
f0114ff7:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f0114ffd:	50                   	push   %eax
f0114ffe:	8d 85 20 ff ff ff    	lea    -0xe0(%ebp),%eax
f0115004:	50                   	push   %eax
f0115005:	52                   	push   %edx
f0115006:	68 00 00 40 00       	push   $0x400000
f011500b:	ff 75 d8             	pushl  -0x28(%ebp)
f011500e:	e8 66 35 ff ff       	call   f0108579 <calculate_allocated_space>
f0115013:	83 c4 20             	add    $0x20,%esp
		expected_num_tables = 1;
f0115016:	c7 45 c8 01 00 00 00 	movl   $0x1,-0x38(%ebp)
		expected_num_pages = 1;
f011501d:	c7 45 c4 01 00 00 00 	movl   $0x1,-0x3c(%ebp)
		if (num_tables != expected_num_tables)
f0115024:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f011502a:	3b 45 c8             	cmp    -0x38(%ebp),%eax
f011502d:	74 28                	je     f0115057 <test_calculate_allocated_space+0xb14>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Tables count is not correct). res=%d, expected=%d\n", num_tables, expected_num_tables);
f011502f:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0115035:	83 ec 0c             	sub    $0xc,%esp
f0115038:	ff 75 c8             	pushl  -0x38(%ebp)
f011503b:	50                   	push   %eax
f011503c:	68 b0 9e 13 f0       	push   $0xf0139eb0
f0115041:	68 7d 07 00 00       	push   $0x77d
f0115046:	68 7e 81 13 f0       	push   $0xf013817e
f011504b:	e8 e2 b2 fe ff       	call   f0100332 <_warn>
f0115050:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0115053:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (num_pages != expected_num_pages)
f0115057:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011505d:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f0115060:	74 28                	je     f011508a <test_calculate_allocated_space+0xb47>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Pages count is not correct). res=%d, expected=%d\n", num_pages, expected_num_pages);
f0115062:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0115068:	83 ec 0c             	sub    $0xc,%esp
f011506b:	ff 75 c4             	pushl  -0x3c(%ebp)
f011506e:	50                   	push   %eax
f011506f:	68 10 9f 13 f0       	push   $0xf0139f10
f0115074:	68 82 07 00 00       	push   $0x782
f0115079:	68 7e 81 13 f0       	push   $0xf013817e
f011507e:	e8 af b2 fe ff       	call   f0100332 <_warn>
f0115083:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0115086:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f011508a:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f011508e:	74 04                	je     f0115094 <test_calculate_allocated_space+0xb51>
f0115090:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0115094:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	}
	{
		/*allocate page*/char c3[100] ;strcconcat(aup_cmd, " 0x801000", c3); execute_command(c3);
f0115098:	83 ec 04             	sub    $0x4,%esp
f011509b:	8d 85 58 fe ff ff    	lea    -0x1a8(%ebp),%eax
f01150a1:	50                   	push   %eax
f01150a2:	68 f2 8e 13 f0       	push   $0xf0138ef2
f01150a7:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f01150ad:	50                   	push   %eax
f01150ae:	e8 16 bc 01 00       	call   f0130cc9 <strcconcat>
f01150b3:	83 c4 10             	add    $0x10,%esp
f01150b6:	83 ec 0c             	sub    $0xc,%esp
f01150b9:	8d 85 58 fe ff ff    	lea    -0x1a8(%ebp),%eax
f01150bf:	50                   	push   %eax
f01150c0:	e8 ca bb fe ff       	call   f0100c8f <execute_command>
f01150c5:	83 c4 10             	add    $0x10,%esp
		/*allocate page*/char c4[100] ;strcconcat(aup_cmd, " 0x810000", c4); execute_command(c4);
f01150c8:	83 ec 04             	sub    $0x4,%esp
f01150cb:	8d 85 bc fe ff ff    	lea    -0x144(%ebp),%eax
f01150d1:	50                   	push   %eax
f01150d2:	68 18 9e 13 f0       	push   $0xf0139e18
f01150d7:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f01150dd:	50                   	push   %eax
f01150de:	e8 e6 bb 01 00       	call   f0130cc9 <strcconcat>
f01150e3:	83 c4 10             	add    $0x10,%esp
f01150e6:	83 ec 0c             	sub    $0xc,%esp
f01150e9:	8d 85 bc fe ff ff    	lea    -0x144(%ebp),%eax
f01150ef:	50                   	push   %eax
f01150f0:	e8 9a bb fe ff       	call   f0100c8f <execute_command>
f01150f5:	83 c4 10             	add    $0x10,%esp

		//Test6
		num_tables = 0;
f01150f8:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f01150ff:	00 00 00 
		num_pages = 0;
f0115102:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f0115109:	00 00 00 
		calculate_allocated_space(proc_directory, 0x700000, 0x700000+2*mega, &num_tables, &num_pages);
f011510c:	8b 45 cc             	mov    -0x34(%ebp),%eax
f011510f:	05 00 00 38 00       	add    $0x380000,%eax
f0115114:	01 c0                	add    %eax,%eax
f0115116:	89 c2                	mov    %eax,%edx
f0115118:	83 ec 0c             	sub    $0xc,%esp
f011511b:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f0115121:	50                   	push   %eax
f0115122:	8d 85 20 ff ff ff    	lea    -0xe0(%ebp),%eax
f0115128:	50                   	push   %eax
f0115129:	52                   	push   %edx
f011512a:	68 00 00 70 00       	push   $0x700000
f011512f:	ff 75 d8             	pushl  -0x28(%ebp)
f0115132:	e8 42 34 ff ff       	call   f0108579 <calculate_allocated_space>
f0115137:	83 c4 20             	add    $0x20,%esp
		expected_num_tables = 1;
f011513a:	c7 45 c8 01 00 00 00 	movl   $0x1,-0x38(%ebp)
		expected_num_pages = 3;
f0115141:	c7 45 c4 03 00 00 00 	movl   $0x3,-0x3c(%ebp)
		if (num_tables != expected_num_tables)
f0115148:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f011514e:	3b 45 c8             	cmp    -0x38(%ebp),%eax
f0115151:	74 28                	je     f011517b <test_calculate_allocated_space+0xc38>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Tables count is not correct). res=%d, expected=%d\n", num_tables, expected_num_tables);
f0115153:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0115159:	83 ec 0c             	sub    $0xc,%esp
f011515c:	ff 75 c8             	pushl  -0x38(%ebp)
f011515f:	50                   	push   %eax
f0115160:	68 b0 9e 13 f0       	push   $0xf0139eb0
f0115165:	68 94 07 00 00       	push   $0x794
f011516a:	68 7e 81 13 f0       	push   $0xf013817e
f011516f:	e8 be b1 fe ff       	call   f0100332 <_warn>
f0115174:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0115177:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (num_pages != expected_num_pages)
f011517b:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0115181:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f0115184:	74 28                	je     f01151ae <test_calculate_allocated_space+0xc6b>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Pages count is not correct). res=%d, expected=%d\n", num_pages, expected_num_pages);
f0115186:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011518c:	83 ec 0c             	sub    $0xc,%esp
f011518f:	ff 75 c4             	pushl  -0x3c(%ebp)
f0115192:	50                   	push   %eax
f0115193:	68 10 9f 13 f0       	push   $0xf0139f10
f0115198:	68 99 07 00 00       	push   $0x799
f011519d:	68 7e 81 13 f0       	push   $0xf013817e
f01151a2:	e8 8b b1 fe ff       	call   f0100332 <_warn>
f01151a7:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f01151aa:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 10 ;
f01151ae:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f01151b2:	74 04                	je     f01151b8 <test_calculate_allocated_space+0xc75>
f01151b4:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f01151b8:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		//Test7
		num_tables = 0;
f01151bc:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f01151c3:	00 00 00 
		num_pages = 0;
f01151c6:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f01151cd:	00 00 00 
		calculate_allocated_space(proc_directory, 0x3FFFFF, 0x3FFFFF+1*kilo, &num_tables, &num_pages);
f01151d0:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01151d3:	05 ff ff 3f 00       	add    $0x3fffff,%eax
f01151d8:	89 c2                	mov    %eax,%edx
f01151da:	83 ec 0c             	sub    $0xc,%esp
f01151dd:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f01151e3:	50                   	push   %eax
f01151e4:	8d 85 20 ff ff ff    	lea    -0xe0(%ebp),%eax
f01151ea:	50                   	push   %eax
f01151eb:	52                   	push   %edx
f01151ec:	68 ff ff 3f 00       	push   $0x3fffff
f01151f1:	ff 75 d8             	pushl  -0x28(%ebp)
f01151f4:	e8 80 33 ff ff       	call   f0108579 <calculate_allocated_space>
f01151f9:	83 c4 20             	add    $0x20,%esp
		expected_num_tables = 1;
f01151fc:	c7 45 c8 01 00 00 00 	movl   $0x1,-0x38(%ebp)
		expected_num_pages = 0;
f0115203:	c7 45 c4 00 00 00 00 	movl   $0x0,-0x3c(%ebp)
		if (num_tables != expected_num_tables)
f011520a:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0115210:	3b 45 c8             	cmp    -0x38(%ebp),%eax
f0115213:	74 28                	je     f011523d <test_calculate_allocated_space+0xcfa>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Tables count is not correct). res=%d, expected=%d\n", num_tables, expected_num_tables);
f0115215:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f011521b:	83 ec 0c             	sub    $0xc,%esp
f011521e:	ff 75 c8             	pushl  -0x38(%ebp)
f0115221:	50                   	push   %eax
f0115222:	68 b0 9e 13 f0       	push   $0xf0139eb0
f0115227:	68 a7 07 00 00       	push   $0x7a7
f011522c:	68 7e 81 13 f0       	push   $0xf013817e
f0115231:	e8 fc b0 fe ff       	call   f0100332 <_warn>
f0115236:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0115239:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (num_pages != expected_num_pages)
f011523d:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0115243:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f0115246:	74 28                	je     f0115270 <test_calculate_allocated_space+0xd2d>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Pages count is not correct). res=%d, expected=%d\n", num_pages, expected_num_pages);
f0115248:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011524e:	83 ec 0c             	sub    $0xc,%esp
f0115251:	ff 75 c4             	pushl  -0x3c(%ebp)
f0115254:	50                   	push   %eax
f0115255:	68 10 9f 13 f0       	push   $0xf0139f10
f011525a:	68 ac 07 00 00       	push   $0x7ac
f011525f:	68 7e 81 13 f0       	push   $0xf013817e
f0115264:	e8 c9 b0 fe ff       	call   f0100332 <_warn>
f0115269:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f011526c:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 10 ;
f0115270:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0115274:	74 04                	je     f011527a <test_calculate_allocated_space+0xd37>
f0115276:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f011527a:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	}
	cprintf("\nCASE II: END\n") ;
f011527e:	83 ec 0c             	sub    $0xc,%esp
f0115281:	68 a3 8e 13 f0       	push   $0xf0138ea3
f0115286:	e8 a2 b9 fe ff       	call   f0100c2d <cprintf>
f011528b:	83 c4 10             	add    $0x10,%esp

	cprintf("[EVAL] calculate_allocated_space: FINISHED. Evaluation = %d\n", eval);
f011528e:	83 ec 08             	sub    $0x8,%esp
f0115291:	ff 75 e4             	pushl  -0x1c(%ebp)
f0115294:	68 6c 9f 13 f0       	push   $0xf0139f6c
f0115299:	e8 8f b9 fe ff       	call   f0100c2d <cprintf>
f011529e:	83 c4 10             	add    $0x10,%esp
	if(eval == 100)
f01152a1:	83 7d e4 64          	cmpl   $0x64,-0x1c(%ebp)
f01152a5:	75 10                	jne    f01152b7 <test_calculate_allocated_space+0xd74>
		cprintf("Congratulations!! test calculate_allocated_space completed successfully.\n");
f01152a7:	83 ec 0c             	sub    $0xc,%esp
f01152aa:	68 ac 9f 13 f0       	push   $0xf0139fac
f01152af:	e8 79 b9 fe ff       	call   f0100c2d <cprintf>
f01152b4:	83 c4 10             	add    $0x10,%esp

	//return back to the kernel directory
	lcr3(phys_page_directory) ;
f01152b7:	a1 e8 0e 6c f0       	mov    0xf06c0ee8,%eax
f01152bc:	89 45 d4             	mov    %eax,-0x2c(%ebp)
f01152bf:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f01152c2:	0f 22 d8             	mov    %eax,%cr3

	return 0;
f01152c5:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01152ca:	8d 65 f4             	lea    -0xc(%ebp),%esp
f01152cd:	5b                   	pop    %ebx
f01152ce:	5e                   	pop    %esi
f01152cf:	5f                   	pop    %edi
f01152d0:	5d                   	pop    %ebp
f01152d1:	c3                   	ret    

f01152d2 <CB>:
//===========================================================================
//===========================================================================
//===========================================================================

int CB(uint32 *ptr_dir, uint32 va, int bn)
{
f01152d2:	55                   	push   %ebp
f01152d3:	89 e5                	mov    %esp,%ebp
f01152d5:	83 ec 18             	sub    $0x18,%esp
	//assert(USE_KHEAP == 0) ;
	uint32 mask = 1<<bn;
f01152d8:	8b 45 10             	mov    0x10(%ebp),%eax
f01152db:	ba 01 00 00 00       	mov    $0x1,%edx
f01152e0:	88 c1                	mov    %al,%cl
f01152e2:	d3 e2                	shl    %cl,%edx
f01152e4:	89 d0                	mov    %edx,%eax
f01152e6:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if (!(ptr_dir[((((uint32) (va)) >> 22) & 0x3FF)] & 1)) return 0;
f01152e9:	8b 45 0c             	mov    0xc(%ebp),%eax
f01152ec:	c1 e8 16             	shr    $0x16,%eax
f01152ef:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f01152f6:	8b 45 08             	mov    0x8(%ebp),%eax
f01152f9:	01 d0                	add    %edx,%eax
f01152fb:	8b 00                	mov    (%eax),%eax
f01152fd:	83 e0 01             	and    $0x1,%eax
f0115300:	85 c0                	test   %eax,%eax
f0115302:	75 07                	jne    f011530b <CB+0x39>
f0115304:	b8 00 00 00 00       	mov    $0x0,%eax
f0115309:	eb 76                	jmp    f0115381 <CB+0xaf>
	uint32 *table = (STATIC_KERNEL_VIRTUAL_ADDRESS(ptr_dir[((((uint32) (va)) >> 22) & 0x3FF)] & ~0xFFF));
f011530b:	8b 45 0c             	mov    0xc(%ebp),%eax
f011530e:	c1 e8 16             	shr    $0x16,%eax
f0115311:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0115318:	8b 45 08             	mov    0x8(%ebp),%eax
f011531b:	01 d0                	add    %edx,%eax
f011531d:	8b 00                	mov    (%eax),%eax
f011531f:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0115324:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0115327:	8b 45 f0             	mov    -0x10(%ebp),%eax
f011532a:	c1 e8 0c             	shr    $0xc,%eax
f011532d:	89 45 ec             	mov    %eax,-0x14(%ebp)
f0115330:	a1 50 0e 6c f0       	mov    0xf06c0e50,%eax
f0115335:	39 45 ec             	cmp    %eax,-0x14(%ebp)
f0115338:	72 17                	jb     f0115351 <CB+0x7f>
f011533a:	ff 75 f0             	pushl  -0x10(%ebp)
f011533d:	68 f8 9f 13 f0       	push   $0xf0139ff8
f0115342:	68 c7 07 00 00       	push   $0x7c7
f0115347:	68 7e 81 13 f0       	push   $0xf013817e
f011534c:	e8 55 ae fe ff       	call   f01001a6 <_panic>
f0115351:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0115354:	2d 00 00 00 10       	sub    $0x10000000,%eax
f0115359:	89 45 e8             	mov    %eax,-0x18(%ebp)
	return ((table[((((uint32) (va)) >> 12) & 0x3FF)]&mask) == mask)? 1 : 0 ;
f011535c:	8b 45 0c             	mov    0xc(%ebp),%eax
f011535f:	c1 e8 0c             	shr    $0xc,%eax
f0115362:	25 ff 03 00 00       	and    $0x3ff,%eax
f0115367:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f011536e:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0115371:	01 d0                	add    %edx,%eax
f0115373:	8b 00                	mov    (%eax),%eax
f0115375:	23 45 f4             	and    -0xc(%ebp),%eax
f0115378:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f011537b:	0f 94 c0             	sete   %al
f011537e:	0f b6 c0             	movzbl %al,%eax
}
f0115381:	c9                   	leave  
f0115382:	c3                   	ret    

f0115383 <SB>:
int SB(uint32 *ptr_dir, uint32 va, int bn , int v)
{
f0115383:	55                   	push   %ebp
f0115384:	89 e5                	mov    %esp,%ebp
f0115386:	83 ec 18             	sub    $0x18,%esp
	assert(USE_KHEAP == 0) ;
	uint32 mask = 1<<bn;
f0115389:	8b 45 10             	mov    0x10(%ebp),%eax
f011538c:	ba 01 00 00 00       	mov    $0x1,%edx
f0115391:	88 c1                	mov    %al,%cl
f0115393:	d3 e2                	shl    %cl,%edx
f0115395:	89 d0                	mov    %edx,%eax
f0115397:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if (!(ptr_dir[((((uint32) (va)) >> 22) & 0x3FF)] & 1)) return 0;
f011539a:	8b 45 0c             	mov    0xc(%ebp),%eax
f011539d:	c1 e8 16             	shr    $0x16,%eax
f01153a0:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f01153a7:	8b 45 08             	mov    0x8(%ebp),%eax
f01153aa:	01 d0                	add    %edx,%eax
f01153ac:	8b 00                	mov    (%eax),%eax
f01153ae:	83 e0 01             	and    $0x1,%eax
f01153b1:	85 c0                	test   %eax,%eax
f01153b3:	75 0a                	jne    f01153bf <SB+0x3c>
f01153b5:	b8 00 00 00 00       	mov    $0x0,%eax
f01153ba:	e9 cd 00 00 00       	jmp    f011548c <SB+0x109>
	uint32 *table = (STATIC_KERNEL_VIRTUAL_ADDRESS(ptr_dir[((((uint32) (va)) >> 22) & 0x3FF)] & ~0xFFF));
f01153bf:	8b 45 0c             	mov    0xc(%ebp),%eax
f01153c2:	c1 e8 16             	shr    $0x16,%eax
f01153c5:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f01153cc:	8b 45 08             	mov    0x8(%ebp),%eax
f01153cf:	01 d0                	add    %edx,%eax
f01153d1:	8b 00                	mov    (%eax),%eax
f01153d3:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f01153d8:	89 45 f0             	mov    %eax,-0x10(%ebp)
f01153db:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01153de:	c1 e8 0c             	shr    $0xc,%eax
f01153e1:	89 45 ec             	mov    %eax,-0x14(%ebp)
f01153e4:	a1 50 0e 6c f0       	mov    0xf06c0e50,%eax
f01153e9:	39 45 ec             	cmp    %eax,-0x14(%ebp)
f01153ec:	72 17                	jb     f0115405 <SB+0x82>
f01153ee:	ff 75 f0             	pushl  -0x10(%ebp)
f01153f1:	68 f8 9f 13 f0       	push   $0xf0139ff8
f01153f6:	68 cf 07 00 00       	push   $0x7cf
f01153fb:	68 7e 81 13 f0       	push   $0xf013817e
f0115400:	e8 a1 ad fe ff       	call   f01001a6 <_panic>
f0115405:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0115408:	2d 00 00 00 10       	sub    $0x10000000,%eax
f011540d:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if (~v) table[((((uint32) (va)) >> 12) & 0x3FF)] &= ~mask ;
f0115410:	83 7d 14 ff          	cmpl   $0xffffffff,0x14(%ebp)
f0115414:	74 3c                	je     f0115452 <SB+0xcf>
f0115416:	8b 45 0c             	mov    0xc(%ebp),%eax
f0115419:	c1 e8 0c             	shr    $0xc,%eax
f011541c:	25 ff 03 00 00       	and    $0x3ff,%eax
f0115421:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0115428:	8b 45 e8             	mov    -0x18(%ebp),%eax
f011542b:	01 d0                	add    %edx,%eax
f011542d:	8b 55 0c             	mov    0xc(%ebp),%edx
f0115430:	c1 ea 0c             	shr    $0xc,%edx
f0115433:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0115439:	8d 0c 95 00 00 00 00 	lea    0x0(,%edx,4),%ecx
f0115440:	8b 55 e8             	mov    -0x18(%ebp),%edx
f0115443:	01 ca                	add    %ecx,%edx
f0115445:	8b 12                	mov    (%edx),%edx
f0115447:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f011544a:	f7 d1                	not    %ecx
f011544c:	21 ca                	and    %ecx,%edx
f011544e:	89 10                	mov    %edx,(%eax)
f0115450:	eb 35                	jmp    f0115487 <SB+0x104>
	else 	table[((((uint32) (va)) >> 12) & 0x3FF)] |= mask ;
f0115452:	8b 45 0c             	mov    0xc(%ebp),%eax
f0115455:	c1 e8 0c             	shr    $0xc,%eax
f0115458:	25 ff 03 00 00       	and    $0x3ff,%eax
f011545d:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0115464:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0115467:	01 c2                	add    %eax,%edx
f0115469:	8b 45 0c             	mov    0xc(%ebp),%eax
f011546c:	c1 e8 0c             	shr    $0xc,%eax
f011546f:	25 ff 03 00 00       	and    $0x3ff,%eax
f0115474:	8d 0c 85 00 00 00 00 	lea    0x0(,%eax,4),%ecx
f011547b:	8b 45 e8             	mov    -0x18(%ebp),%eax
f011547e:	01 c8                	add    %ecx,%eax
f0115480:	8b 00                	mov    (%eax),%eax
f0115482:	0b 45 f4             	or     -0xc(%ebp),%eax
f0115485:	89 02                	mov    %eax,(%edx)
	return 0;
f0115487:	b8 00 00 00 00       	mov    $0x0,%eax
}
f011548c:	c9                   	leave  
f011548d:	c3                   	ret    

f011548e <CPs>:
int CPs(uint32 *ptr_dir, uint32 va, uint32 perms, uint32 which)
{
f011548e:	55                   	push   %ebp
f011548f:	89 e5                	mov    %esp,%ebp
f0115491:	83 ec 28             	sub    $0x28,%esp
	assert(USE_KHEAP == 0) ;
	if (!(ptr_dir[((((uint32) (va)) >> 22) & 0x3FF)] & 1)) return 0;
f0115494:	8b 45 0c             	mov    0xc(%ebp),%eax
f0115497:	c1 e8 16             	shr    $0x16,%eax
f011549a:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f01154a1:	8b 45 08             	mov    0x8(%ebp),%eax
f01154a4:	01 d0                	add    %edx,%eax
f01154a6:	8b 00                	mov    (%eax),%eax
f01154a8:	83 e0 01             	and    $0x1,%eax
f01154ab:	85 c0                	test   %eax,%eax
f01154ad:	75 0a                	jne    f01154b9 <CPs+0x2b>
f01154af:	b8 00 00 00 00       	mov    $0x0,%eax
f01154b4:	e9 b8 00 00 00       	jmp    f0115571 <CPs+0xe3>
	uint32 *table = (STATIC_KERNEL_VIRTUAL_ADDRESS(ptr_dir[((((uint32) (va)) >> 22) & 0x3FF)] & ~0xFFF));
f01154b9:	8b 45 0c             	mov    0xc(%ebp),%eax
f01154bc:	c1 e8 16             	shr    $0x16,%eax
f01154bf:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f01154c6:	8b 45 08             	mov    0x8(%ebp),%eax
f01154c9:	01 d0                	add    %edx,%eax
f01154cb:	8b 00                	mov    (%eax),%eax
f01154cd:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f01154d2:	89 45 f0             	mov    %eax,-0x10(%ebp)
f01154d5:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01154d8:	c1 e8 0c             	shr    $0xc,%eax
f01154db:	89 45 ec             	mov    %eax,-0x14(%ebp)
f01154de:	a1 50 0e 6c f0       	mov    0xf06c0e50,%eax
f01154e3:	39 45 ec             	cmp    %eax,-0x14(%ebp)
f01154e6:	72 17                	jb     f01154ff <CPs+0x71>
f01154e8:	ff 75 f0             	pushl  -0x10(%ebp)
f01154eb:	68 f8 9f 13 f0       	push   $0xf0139ff8
f01154f0:	68 d8 07 00 00       	push   $0x7d8
f01154f5:	68 7e 81 13 f0       	push   $0xf013817e
f01154fa:	e8 a7 ac fe ff       	call   f01001a6 <_panic>
f01154ff:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0115502:	2d 00 00 00 10       	sub    $0x10000000,%eax
f0115507:	89 45 e8             	mov    %eax,-0x18(%ebp)
	for (int i = 0 ; i < 12 ; i++)
f011550a:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0115511:	eb 53                	jmp    f0115566 <CPs+0xd8>
	{
		uint32 mask = 1<<i;
f0115513:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0115516:	ba 01 00 00 00       	mov    $0x1,%edx
f011551b:	88 c1                	mov    %al,%cl
f011551d:	d3 e2                	shl    %cl,%edx
f011551f:	89 d0                	mov    %edx,%eax
f0115521:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		if (!(which & mask))	continue ;
f0115524:	8b 45 14             	mov    0x14(%ebp),%eax
f0115527:	23 45 e4             	and    -0x1c(%ebp),%eax
f011552a:	85 c0                	test   %eax,%eax
f011552c:	74 34                	je     f0115562 <CPs+0xd4>
		uint8 c = (table[((((uint32) (va)) >> 12) & 0x3FF)] & mask) == (perms & mask) ? 1 :  0;
f011552e:	8b 45 0c             	mov    0xc(%ebp),%eax
f0115531:	c1 e8 0c             	shr    $0xc,%eax
f0115534:	25 ff 03 00 00       	and    $0x3ff,%eax
f0115539:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0115540:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0115543:	01 d0                	add    %edx,%eax
f0115545:	8b 00                	mov    (%eax),%eax
f0115547:	33 45 10             	xor    0x10(%ebp),%eax
f011554a:	23 45 e4             	and    -0x1c(%ebp),%eax
f011554d:	85 c0                	test   %eax,%eax
f011554f:	0f 94 c0             	sete   %al
f0115552:	88 45 e3             	mov    %al,-0x1d(%ebp)
		if (!c) return 0;
f0115555:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0115559:	75 08                	jne    f0115563 <CPs+0xd5>
f011555b:	b8 00 00 00 00       	mov    $0x0,%eax
f0115560:	eb 0f                	jmp    f0115571 <CPs+0xe3>
	if (!(ptr_dir[((((uint32) (va)) >> 22) & 0x3FF)] & 1)) return 0;
	uint32 *table = (STATIC_KERNEL_VIRTUAL_ADDRESS(ptr_dir[((((uint32) (va)) >> 22) & 0x3FF)] & ~0xFFF));
	for (int i = 0 ; i < 12 ; i++)
	{
		uint32 mask = 1<<i;
		if (!(which & mask))	continue ;
f0115562:	90                   	nop
int CPs(uint32 *ptr_dir, uint32 va, uint32 perms, uint32 which)
{
	assert(USE_KHEAP == 0) ;
	if (!(ptr_dir[((((uint32) (va)) >> 22) & 0x3FF)] & 1)) return 0;
	uint32 *table = (STATIC_KERNEL_VIRTUAL_ADDRESS(ptr_dir[((((uint32) (va)) >> 22) & 0x3FF)] & ~0xFFF));
	for (int i = 0 ; i < 12 ; i++)
f0115563:	ff 45 f4             	incl   -0xc(%ebp)
f0115566:	83 7d f4 0b          	cmpl   $0xb,-0xc(%ebp)
f011556a:	7e a7                	jle    f0115513 <CPs+0x85>
		uint32 mask = 1<<i;
		if (!(which & mask))	continue ;
		uint8 c = (table[((((uint32) (va)) >> 12) & 0x3FF)] & mask) == (perms & mask) ? 1 :  0;
		if (!c) return 0;
	}
	return 1;
f011556c:	b8 01 00 00 00       	mov    $0x1,%eax
}
f0115571:	c9                   	leave  
f0115572:	c3                   	ret    

f0115573 <CA>:

int CA(uint32 *ptr_dir, uint32 va)
{
f0115573:	55                   	push   %ebp
f0115574:	89 e5                	mov    %esp,%ebp
f0115576:	83 ec 18             	sub    $0x18,%esp
	assert(USE_KHEAP == 0) ;
	if (!(ptr_dir[((((uint32) (va)) >> 22) & 0x3FF)] & 1)) return 0;
f0115579:	8b 45 0c             	mov    0xc(%ebp),%eax
f011557c:	c1 e8 16             	shr    $0x16,%eax
f011557f:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0115586:	8b 45 08             	mov    0x8(%ebp),%eax
f0115589:	01 d0                	add    %edx,%eax
f011558b:	8b 00                	mov    (%eax),%eax
f011558d:	83 e0 01             	and    $0x1,%eax
f0115590:	85 c0                	test   %eax,%eax
f0115592:	75 07                	jne    f011559b <CA+0x28>
f0115594:	b8 00 00 00 00       	mov    $0x0,%eax
f0115599:	eb 6f                	jmp    f011560a <CA+0x97>
	uint32 *table = (STATIC_KERNEL_VIRTUAL_ADDRESS(ptr_dir[((((uint32) (va)) >> 22) & 0x3FF)] & ~0xFFF));
f011559b:	8b 45 0c             	mov    0xc(%ebp),%eax
f011559e:	c1 e8 16             	shr    $0x16,%eax
f01155a1:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f01155a8:	8b 45 08             	mov    0x8(%ebp),%eax
f01155ab:	01 d0                	add    %edx,%eax
f01155ad:	8b 00                	mov    (%eax),%eax
f01155af:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f01155b4:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01155b7:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01155ba:	c1 e8 0c             	shr    $0xc,%eax
f01155bd:	89 45 f0             	mov    %eax,-0x10(%ebp)
f01155c0:	a1 50 0e 6c f0       	mov    0xf06c0e50,%eax
f01155c5:	39 45 f0             	cmp    %eax,-0x10(%ebp)
f01155c8:	72 17                	jb     f01155e1 <CA+0x6e>
f01155ca:	ff 75 f4             	pushl  -0xc(%ebp)
f01155cd:	68 f8 9f 13 f0       	push   $0xf0139ff8
f01155d2:	68 e7 07 00 00       	push   $0x7e7
f01155d7:	68 7e 81 13 f0       	push   $0xf013817e
f01155dc:	e8 c5 ab fe ff       	call   f01001a6 <_panic>
f01155e1:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01155e4:	2d 00 00 00 10       	sub    $0x10000000,%eax
f01155e9:	89 45 ec             	mov    %eax,-0x14(%ebp)
	return table[((((uint32) (va)) >> 12) & 0x3FF)]&~0x00000FFF;
f01155ec:	8b 45 0c             	mov    0xc(%ebp),%eax
f01155ef:	c1 e8 0c             	shr    $0xc,%eax
f01155f2:	25 ff 03 00 00       	and    $0x3ff,%eax
f01155f7:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f01155fe:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0115601:	01 d0                	add    %edx,%eax
f0115603:	8b 00                	mov    (%eax),%eax
f0115605:	25 00 f0 ff ff       	and    $0xfffff000,%eax
}
f011560a:	c9                   	leave  
f011560b:	c3                   	ret    

f011560c <CE>:

int CE(uint32 *_d, uint32 va)
{
f011560c:	55                   	push   %ebp
f011560d:	89 e5                	mov    %esp,%ebp
f011560f:	83 ec 18             	sub    $0x18,%esp
	if (!(_d[((((uint32) (va)) >> 22) & 0x3FF)] & 1)) return 0;
f0115612:	8b 45 0c             	mov    0xc(%ebp),%eax
f0115615:	c1 e8 16             	shr    $0x16,%eax
f0115618:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f011561f:	8b 45 08             	mov    0x8(%ebp),%eax
f0115622:	01 d0                	add    %edx,%eax
f0115624:	8b 00                	mov    (%eax),%eax
f0115626:	83 e0 01             	and    $0x1,%eax
f0115629:	85 c0                	test   %eax,%eax
f011562b:	75 07                	jne    f0115634 <CE+0x28>
f011562d:	b8 00 00 00 00       	mov    $0x0,%eax
f0115632:	eb 7a                	jmp    f01156ae <CE+0xa2>
	uint32 *_t = (STATIC_KERNEL_VIRTUAL_ADDRESS(_d[((((uint32) (va)) >> 22) & 0x3FF)] & ~0xFFF));
f0115634:	8b 45 0c             	mov    0xc(%ebp),%eax
f0115637:	c1 e8 16             	shr    $0x16,%eax
f011563a:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0115641:	8b 45 08             	mov    0x8(%ebp),%eax
f0115644:	01 d0                	add    %edx,%eax
f0115646:	8b 00                	mov    (%eax),%eax
f0115648:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f011564d:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0115650:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0115653:	c1 e8 0c             	shr    $0xc,%eax
f0115656:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0115659:	a1 50 0e 6c f0       	mov    0xf06c0e50,%eax
f011565e:	39 45 f0             	cmp    %eax,-0x10(%ebp)
f0115661:	72 17                	jb     f011567a <CE+0x6e>
f0115663:	ff 75 f4             	pushl  -0xc(%ebp)
f0115666:	68 f8 9f 13 f0       	push   $0xf0139ff8
f011566b:	68 ee 07 00 00       	push   $0x7ee
f0115670:	68 7e 81 13 f0       	push   $0xf013817e
f0115675:	e8 2c ab fe ff       	call   f01001a6 <_panic>
f011567a:	8b 45 f4             	mov    -0xc(%ebp),%eax
f011567d:	2d 00 00 00 10       	sub    $0x10000000,%eax
f0115682:	89 45 ec             	mov    %eax,-0x14(%ebp)
	if ((_t[((((uint32) (va)) >> 12) & 0x3FF)])!=0) return 0;
f0115685:	8b 45 0c             	mov    0xc(%ebp),%eax
f0115688:	c1 e8 0c             	shr    $0xc,%eax
f011568b:	25 ff 03 00 00       	and    $0x3ff,%eax
f0115690:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0115697:	8b 45 ec             	mov    -0x14(%ebp),%eax
f011569a:	01 d0                	add    %edx,%eax
f011569c:	8b 00                	mov    (%eax),%eax
f011569e:	85 c0                	test   %eax,%eax
f01156a0:	74 07                	je     f01156a9 <CE+0x9d>
f01156a2:	b8 00 00 00 00       	mov    $0x0,%eax
f01156a7:	eb 05                	jmp    f01156ae <CE+0xa2>
	return 1;
f01156a9:	b8 01 00 00 00       	mov    $0x1,%eax
}
f01156ae:	c9                   	leave  
f01156af:	c3                   	ret    

f01156b0 <CP>:

int CP(uint32* pd, uint32 va, uint32 ps, uint32 pc)
{
f01156b0:	55                   	push   %ebp
f01156b1:	89 e5                	mov    %esp,%ebp
f01156b3:	83 ec 18             	sub    $0x18,%esp
	assert(USE_KHEAP == 0) ;
	uint32 pd_entry = pd[((((uint32) (va)) >> 22) & 0x3FF)];
f01156b6:	8b 45 0c             	mov    0xc(%ebp),%eax
f01156b9:	c1 e8 16             	shr    $0x16,%eax
f01156bc:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f01156c3:	8b 45 08             	mov    0x8(%ebp),%eax
f01156c6:	01 d0                	add    %edx,%eax
f01156c8:	8b 00                	mov    (%eax),%eax
f01156ca:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if ( (pd_entry & 1) == 1)
f01156cd:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01156d0:	83 e0 01             	and    $0x1,%eax
f01156d3:	85 c0                	test   %eax,%eax
f01156d5:	0f 84 92 00 00 00    	je     f011576d <CP+0xbd>
	{
		uint32 *t = NULL;
f01156db:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
		t = (STATIC_KERNEL_VIRTUAL_ADDRESS(EXTRACT_ADDRESS(pd_entry)));
f01156e2:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01156e5:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f01156ea:	89 45 ec             	mov    %eax,-0x14(%ebp)
f01156ed:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01156f0:	c1 e8 0c             	shr    $0xc,%eax
f01156f3:	89 45 e8             	mov    %eax,-0x18(%ebp)
f01156f6:	a1 50 0e 6c f0       	mov    0xf06c0e50,%eax
f01156fb:	39 45 e8             	cmp    %eax,-0x18(%ebp)
f01156fe:	72 17                	jb     f0115717 <CP+0x67>
f0115700:	ff 75 ec             	pushl  -0x14(%ebp)
f0115703:	68 f8 9f 13 f0       	push   $0xf0139ff8
f0115708:	68 fa 07 00 00       	push   $0x7fa
f011570d:	68 7e 81 13 f0       	push   $0xf013817e
f0115712:	e8 8f aa fe ff       	call   f01001a6 <_panic>
f0115717:	8b 45 ec             	mov    -0x14(%ebp),%eax
f011571a:	2d 00 00 00 10       	sub    $0x10000000,%eax
f011571f:	89 45 f0             	mov    %eax,-0x10(%ebp)
		//cprintf("va =%x, ENTRY after PERM = %x, perm to set = %x, perm to clear = %x\n", va, t[PTX(va)]&0x00000FFF, ps, pc);

		if (((t[((((uint32) (va)) >> 12) & 0x3FF)]&ps) == ps)&&((~(t[((((uint32) (va)) >> 12) & 0x3FF)])&pc) == pc))
f0115722:	8b 45 0c             	mov    0xc(%ebp),%eax
f0115725:	c1 e8 0c             	shr    $0xc,%eax
f0115728:	25 ff 03 00 00       	and    $0x3ff,%eax
f011572d:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0115734:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0115737:	01 d0                	add    %edx,%eax
f0115739:	8b 00                	mov    (%eax),%eax
f011573b:	23 45 10             	and    0x10(%ebp),%eax
f011573e:	3b 45 10             	cmp    0x10(%ebp),%eax
f0115741:	75 2a                	jne    f011576d <CP+0xbd>
f0115743:	8b 45 0c             	mov    0xc(%ebp),%eax
f0115746:	c1 e8 0c             	shr    $0xc,%eax
f0115749:	25 ff 03 00 00       	and    $0x3ff,%eax
f011574e:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0115755:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0115758:	01 d0                	add    %edx,%eax
f011575a:	8b 00                	mov    (%eax),%eax
f011575c:	f7 d0                	not    %eax
f011575e:	23 45 14             	and    0x14(%ebp),%eax
f0115761:	3b 45 14             	cmp    0x14(%ebp),%eax
f0115764:	75 07                	jne    f011576d <CP+0xbd>
			return 1;
f0115766:	b8 01 00 00 00       	mov    $0x1,%eax
f011576b:	eb 05                	jmp    f0115772 <CP+0xc2>
	}
	return 0;
f011576d:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0115772:	c9                   	leave  
f0115773:	c3                   	ret    

f0115774 <GP>:

uint32 GP(uint32 *ptr_dir, uint32 va)
{
f0115774:	55                   	push   %ebp
f0115775:	89 e5                	mov    %esp,%ebp
f0115777:	83 ec 18             	sub    $0x18,%esp
	assert(USE_KHEAP == 0) ;
	if (!(ptr_dir[((((uint32) (va)) >> 22) & 0x3FF)] & 1)) return 0;
f011577a:	8b 45 0c             	mov    0xc(%ebp),%eax
f011577d:	c1 e8 16             	shr    $0x16,%eax
f0115780:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0115787:	8b 45 08             	mov    0x8(%ebp),%eax
f011578a:	01 d0                	add    %edx,%eax
f011578c:	8b 00                	mov    (%eax),%eax
f011578e:	83 e0 01             	and    $0x1,%eax
f0115791:	85 c0                	test   %eax,%eax
f0115793:	75 07                	jne    f011579c <GP+0x28>
f0115795:	b8 00 00 00 00       	mov    $0x0,%eax
f011579a:	eb 6f                	jmp    f011580b <GP+0x97>
	uint32 *table = (STATIC_KERNEL_VIRTUAL_ADDRESS(ptr_dir[((((uint32) (va)) >> 22) & 0x3FF)] & ~0xFFF));
f011579c:	8b 45 0c             	mov    0xc(%ebp),%eax
f011579f:	c1 e8 16             	shr    $0x16,%eax
f01157a2:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f01157a9:	8b 45 08             	mov    0x8(%ebp),%eax
f01157ac:	01 d0                	add    %edx,%eax
f01157ae:	8b 00                	mov    (%eax),%eax
f01157b0:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f01157b5:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01157b8:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01157bb:	c1 e8 0c             	shr    $0xc,%eax
f01157be:	89 45 f0             	mov    %eax,-0x10(%ebp)
f01157c1:	a1 50 0e 6c f0       	mov    0xf06c0e50,%eax
f01157c6:	39 45 f0             	cmp    %eax,-0x10(%ebp)
f01157c9:	72 17                	jb     f01157e2 <GP+0x6e>
f01157cb:	ff 75 f4             	pushl  -0xc(%ebp)
f01157ce:	68 f8 9f 13 f0       	push   $0xf0139ff8
f01157d3:	68 07 08 00 00       	push   $0x807
f01157d8:	68 7e 81 13 f0       	push   $0xf013817e
f01157dd:	e8 c4 a9 fe ff       	call   f01001a6 <_panic>
f01157e2:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01157e5:	2d 00 00 00 10       	sub    $0x10000000,%eax
f01157ea:	89 45 ec             	mov    %eax,-0x14(%ebp)
	return table[((((uint32) (va)) >> 12) & 0x3FF)] & 0xFFF;
f01157ed:	8b 45 0c             	mov    0xc(%ebp),%eax
f01157f0:	c1 e8 0c             	shr    $0xc,%eax
f01157f3:	25 ff 03 00 00       	and    $0x3ff,%eax
f01157f8:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f01157ff:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0115802:	01 d0                	add    %edx,%eax
f0115804:	8b 00                	mov    (%eax),%eax
f0115806:	25 ff 0f 00 00       	and    $0xfff,%eax
}
f011580b:	c9                   	leave  
f011580c:	c3                   	ret    

f011580d <ClearUserSpace>:

void ClearUserSpace(uint32 *ptr_dir)
{
f011580d:	55                   	push   %ebp
f011580e:	89 e5                	mov    %esp,%ebp
f0115810:	83 ec 10             	sub    $0x10,%esp
	for (int i = 0; i < PDX(USER_TOP); ++i) {
f0115813:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
f011581a:	eb 18                	jmp    f0115834 <ClearUserSpace+0x27>
		ptr_dir[i] = 0;
f011581c:	8b 45 fc             	mov    -0x4(%ebp),%eax
f011581f:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0115826:	8b 45 08             	mov    0x8(%ebp),%eax
f0115829:	01 d0                	add    %edx,%eax
f011582b:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	return table[((((uint32) (va)) >> 12) & 0x3FF)] & 0xFFF;
}

void ClearUserSpace(uint32 *ptr_dir)
{
	for (int i = 0; i < PDX(USER_TOP); ++i) {
f0115831:	ff 45 fc             	incl   -0x4(%ebp)
f0115834:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0115837:	3d ba 03 00 00       	cmp    $0x3ba,%eax
f011583c:	76 de                	jbe    f011581c <ClearUserSpace+0xf>
		ptr_dir[i] = 0;
	}
}
f011583e:	90                   	nop
f011583f:	c9                   	leave  
f0115840:	c3                   	ret    

f0115841 <CCP>:

int CCP(uint32 *ptr_dir, uint32 ptr1, uint32 ptr2, uint32 size, int ref, uint32 dst_perms, uint32 dst_to_chk, uint32 src_perms, uint32 src_to_chk, uint8 chk_type)
{
f0115841:	55                   	push   %ebp
f0115842:	89 e5                	mov    %esp,%ebp
f0115844:	83 ec 38             	sub    $0x38,%esp
f0115847:	8b 45 2c             	mov    0x2c(%ebp),%eax
f011584a:	88 45 d4             	mov    %al,-0x2c(%ebp)
	void* ptrTemp1 = (void*)(ptr1 - ptr1 % (4096));
f011584d:	8b 45 0c             	mov    0xc(%ebp),%eax
f0115850:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0115855:	89 45 f4             	mov    %eax,-0xc(%ebp)
	void* ptrTemp2 = (void*)(ptr2 - ptr2 % (4096));
f0115858:	8b 45 10             	mov    0x10(%ebp),%eax
f011585b:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0115860:	89 45 f0             	mov    %eax,-0x10(%ebp)

	for( ;ptrTemp2 < (void*)(ptr2+size); ptrTemp2+=PAGE_SIZE)
f0115863:	e9 ea 01 00 00       	jmp    f0115a52 <CCP+0x211>
	{
		uint32* ptr_table1;
		uint32* ptr_table2;
		struct FrameInfo * pfi1 ;
		struct FrameInfo * pfi2 ;
		if (chk_type != CHK_ALLOC)
f0115868:	80 7d d4 03          	cmpb   $0x3,-0x2c(%ebp)
f011586c:	74 44                	je     f01158b2 <CCP+0x71>
		{
			pfi1 = get_frame_info(ptr_dir, (uint32)ptrTemp1, &ptr_table1);
f011586e:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0115871:	83 ec 04             	sub    $0x4,%esp
f0115874:	8d 55 dc             	lea    -0x24(%ebp),%edx
f0115877:	52                   	push   %edx
f0115878:	50                   	push   %eax
f0115879:	ff 75 08             	pushl  0x8(%ebp)
f011587c:	e8 80 13 ff ff       	call   f0106c01 <get_frame_info>
f0115881:	83 c4 10             	add    $0x10,%esp
f0115884:	89 45 e0             	mov    %eax,-0x20(%ebp)
			if (ptr_table1 == NULL)
f0115887:	8b 45 dc             	mov    -0x24(%ebp),%eax
f011588a:	85 c0                	test   %eax,%eax
f011588c:	75 24                	jne    f01158b2 <CCP+0x71>
			{
				warn("[EVAL] Failed. Table of address 1 = NULL\n");
f011588e:	83 ec 04             	sub    $0x4,%esp
f0115891:	68 28 a0 13 f0       	push   $0xf013a028
f0115896:	68 22 08 00 00       	push   $0x822
f011589b:	68 7e 81 13 f0       	push   $0xf013817e
f01158a0:	e8 8d aa fe ff       	call   f0100332 <_warn>
f01158a5:	83 c4 10             	add    $0x10,%esp
				return 0;
f01158a8:	b8 00 00 00 00       	mov    $0x0,%eax
f01158ad:	e9 b6 01 00 00       	jmp    f0115a68 <CCP+0x227>
			}
		}
		pfi2 = get_frame_info(ptr_dir, (uint32)ptrTemp2, &ptr_table2);
f01158b2:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01158b5:	83 ec 04             	sub    $0x4,%esp
f01158b8:	8d 55 d8             	lea    -0x28(%ebp),%edx
f01158bb:	52                   	push   %edx
f01158bc:	50                   	push   %eax
f01158bd:	ff 75 08             	pushl  0x8(%ebp)
f01158c0:	e8 3c 13 ff ff       	call   f0106c01 <get_frame_info>
f01158c5:	83 c4 10             	add    $0x10,%esp
f01158c8:	89 45 ec             	mov    %eax,-0x14(%ebp)
		if (ptr_table2 == NULL)
f01158cb:	8b 45 d8             	mov    -0x28(%ebp),%eax
f01158ce:	85 c0                	test   %eax,%eax
f01158d0:	75 24                	jne    f01158f6 <CCP+0xb5>
		{
			warn("[EVAL] Failed. Table of address 2 = NULL\n");
f01158d2:	83 ec 04             	sub    $0x4,%esp
f01158d5:	68 54 a0 13 f0       	push   $0xf013a054
f01158da:	68 29 08 00 00       	push   $0x829
f01158df:	68 7e 81 13 f0       	push   $0xf013817e
f01158e4:	e8 49 aa fe ff       	call   f0100332 <_warn>
f01158e9:	83 c4 10             	add    $0x10,%esp
			return 0;
f01158ec:	b8 00 00 00 00       	mov    $0x0,%eax
f01158f1:	e9 72 01 00 00       	jmp    f0115a68 <CCP+0x227>
		}
		if (chk_type == CHK_SHARE)
f01158f6:	80 7d d4 02          	cmpb   $0x2,-0x2c(%ebp)
f01158fa:	75 70                	jne    f011596c <CCP+0x12b>
		{
			uint32 fn1 = ptr_table1[PTX(ptrTemp1)] >> 12 ;
f01158fc:	8b 45 dc             	mov    -0x24(%ebp),%eax
f01158ff:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0115902:	c1 ea 0c             	shr    $0xc,%edx
f0115905:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f011590b:	c1 e2 02             	shl    $0x2,%edx
f011590e:	01 d0                	add    %edx,%eax
f0115910:	8b 00                	mov    (%eax),%eax
f0115912:	c1 e8 0c             	shr    $0xc,%eax
f0115915:	89 45 e8             	mov    %eax,-0x18(%ebp)
			uint32 fn2 = ptr_table2[PTX(ptrTemp2)] >> 12 ;
f0115918:	8b 45 d8             	mov    -0x28(%ebp),%eax
f011591b:	8b 55 f0             	mov    -0x10(%ebp),%edx
f011591e:	c1 ea 0c             	shr    $0xc,%edx
f0115921:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0115927:	c1 e2 02             	shl    $0x2,%edx
f011592a:	01 d0                	add    %edx,%eax
f011592c:	8b 00                	mov    (%eax),%eax
f011592e:	c1 e8 0c             	shr    $0xc,%eax
f0115931:	89 45 e4             	mov    %eax,-0x1c(%ebp)

			if(fn1 != fn2)
f0115934:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0115937:	3b 45 e4             	cmp    -0x1c(%ebp),%eax
f011593a:	74 30                	je     f011596c <CCP+0x12b>
			{
				warn("[EVAL] Failed. Frame numbers not equal in the whole range!\nva1=%x, va2=%x, fn1=%x, fn2=%x\n", ptrTemp1, ptrTemp2, fn1, fn2);
f011593c:	83 ec 04             	sub    $0x4,%esp
f011593f:	ff 75 e4             	pushl  -0x1c(%ebp)
f0115942:	ff 75 e8             	pushl  -0x18(%ebp)
f0115945:	ff 75 f0             	pushl  -0x10(%ebp)
f0115948:	ff 75 f4             	pushl  -0xc(%ebp)
f011594b:	68 80 a0 13 f0       	push   $0xf013a080
f0115950:	68 33 08 00 00       	push   $0x833
f0115955:	68 7e 81 13 f0       	push   $0xf013817e
f011595a:	e8 d3 a9 fe ff       	call   f0100332 <_warn>
f011595f:	83 c4 20             	add    $0x20,%esp
				return 0;
f0115962:	b8 00 00 00 00       	mov    $0x0,%eax
f0115967:	e9 fc 00 00 00       	jmp    f0115a68 <CCP+0x227>
			}
		}
		if (ref != -1)
f011596c:	83 7d 18 ff          	cmpl   $0xffffffff,0x18(%ebp)
f0115970:	74 52                	je     f01159c4 <CCP+0x183>
		{
			if (pfi2 == NULL || (*pfi2).references != ref)
f0115972:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0115976:	74 0e                	je     f0115986 <CCP+0x145>
f0115978:	8b 45 ec             	mov    -0x14(%ebp),%eax
f011597b:	8b 40 08             	mov    0x8(%eax),%eax
f011597e:	0f b7 c0             	movzwl %ax,%eax
f0115981:	3b 45 18             	cmp    0x18(%ebp),%eax
f0115984:	74 3e                	je     f01159c4 <CCP+0x183>
			{
				warn("[EVAL] Failed. Num of frame references is not correct. MAKE SURE to use the functions of LAB5! va2=%x, ref2=%d\n", ptrTemp2, pfi2==NULL? 0 : (*pfi2).references);
f0115986:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f011598a:	74 0b                	je     f0115997 <CCP+0x156>
f011598c:	8b 45 ec             	mov    -0x14(%ebp),%eax
f011598f:	8b 40 08             	mov    0x8(%eax),%eax
f0115992:	0f b7 c0             	movzwl %ax,%eax
f0115995:	eb 05                	jmp    f011599c <CCP+0x15b>
f0115997:	b8 00 00 00 00       	mov    $0x0,%eax
f011599c:	83 ec 0c             	sub    $0xc,%esp
f011599f:	50                   	push   %eax
f01159a0:	ff 75 f0             	pushl  -0x10(%ebp)
f01159a3:	68 dc a0 13 f0       	push   $0xf013a0dc
f01159a8:	68 3b 08 00 00       	push   $0x83b
f01159ad:	68 7e 81 13 f0       	push   $0xf013817e
f01159b2:	e8 7b a9 fe ff       	call   f0100332 <_warn>
f01159b7:	83 c4 20             	add    $0x20,%esp
				return 0;
f01159ba:	b8 00 00 00 00       	mov    $0x0,%eax
f01159bf:	e9 a4 00 00 00       	jmp    f0115a68 <CCP+0x227>
			}
		}
		if (CPs(ptr_dir, (uint32)ptrTemp2, dst_perms, dst_to_chk) <= 0)
f01159c4:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01159c7:	ff 75 20             	pushl  0x20(%ebp)
f01159ca:	ff 75 1c             	pushl  0x1c(%ebp)
f01159cd:	50                   	push   %eax
f01159ce:	ff 75 08             	pushl  0x8(%ebp)
f01159d1:	e8 b8 fa ff ff       	call   f011548e <CPs>
f01159d6:	83 c4 10             	add    $0x10,%esp
f01159d9:	85 c0                	test   %eax,%eax
f01159db:	7f 21                	jg     f01159fe <CCP+0x1bd>
		{
			warn("[EVAL] Failed. one or more permission in destination is not correct\n");
f01159dd:	83 ec 04             	sub    $0x4,%esp
f01159e0:	68 4c a1 13 f0       	push   $0xf013a14c
f01159e5:	68 41 08 00 00       	push   $0x841
f01159ea:	68 7e 81 13 f0       	push   $0xf013817e
f01159ef:	e8 3e a9 fe ff       	call   f0100332 <_warn>
f01159f4:	83 c4 10             	add    $0x10,%esp
			return 0;
f01159f7:	b8 00 00 00 00       	mov    $0x0,%eax
f01159fc:	eb 6a                	jmp    f0115a68 <CCP+0x227>
		}
		if (chk_type != CHK_ALLOC)
f01159fe:	80 7d d4 03          	cmpb   $0x3,-0x2c(%ebp)
f0115a02:	74 3a                	je     f0115a3e <CCP+0x1fd>
		{
			if (CPs(ptr_dir, (uint32)ptrTemp1, src_perms, src_to_chk) <= 0)
f0115a04:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0115a07:	ff 75 28             	pushl  0x28(%ebp)
f0115a0a:	ff 75 24             	pushl  0x24(%ebp)
f0115a0d:	50                   	push   %eax
f0115a0e:	ff 75 08             	pushl  0x8(%ebp)
f0115a11:	e8 78 fa ff ff       	call   f011548e <CPs>
f0115a16:	83 c4 10             	add    $0x10,%esp
f0115a19:	85 c0                	test   %eax,%eax
f0115a1b:	7f 21                	jg     f0115a3e <CCP+0x1fd>
			{
				warn("[EVAL] Failed. one or more permission in source is not correct\n");
f0115a1d:	83 ec 04             	sub    $0x4,%esp
f0115a20:	68 94 a1 13 f0       	push   $0xf013a194
f0115a25:	68 48 08 00 00       	push   $0x848
f0115a2a:	68 7e 81 13 f0       	push   $0xf013817e
f0115a2f:	e8 fe a8 fe ff       	call   f0100332 <_warn>
f0115a34:	83 c4 10             	add    $0x10,%esp
				return 0;
f0115a37:	b8 00 00 00 00       	mov    $0x0,%eax
f0115a3c:	eb 2a                	jmp    f0115a68 <CCP+0x227>
			}
		}
		if (chk_type != CHK_ALLOC)
f0115a3e:	80 7d d4 03          	cmpb   $0x3,-0x2c(%ebp)
f0115a42:	74 07                	je     f0115a4b <CCP+0x20a>
		{
			ptrTemp1 += PAGE_SIZE;
f0115a44:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
int CCP(uint32 *ptr_dir, uint32 ptr1, uint32 ptr2, uint32 size, int ref, uint32 dst_perms, uint32 dst_to_chk, uint32 src_perms, uint32 src_to_chk, uint8 chk_type)
{
	void* ptrTemp1 = (void*)(ptr1 - ptr1 % (4096));
	void* ptrTemp2 = (void*)(ptr2 - ptr2 % (4096));

	for( ;ptrTemp2 < (void*)(ptr2+size); ptrTemp2+=PAGE_SIZE)
f0115a4b:	81 45 f0 00 10 00 00 	addl   $0x1000,-0x10(%ebp)
f0115a52:	8b 55 10             	mov    0x10(%ebp),%edx
f0115a55:	8b 45 14             	mov    0x14(%ebp),%eax
f0115a58:	01 d0                	add    %edx,%eax
f0115a5a:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0115a5d:	0f 87 05 fe ff ff    	ja     f0115868 <CCP+0x27>
		{
			ptrTemp1 += PAGE_SIZE;
		}
	}

	return 1;
f0115a63:	b8 01 00 00 00       	mov    $0x1,%eax
}
f0115a68:	c9                   	leave  
f0115a69:	c3                   	ret    

f0115a6a <test_priority_normal_and_higher>:

extern int sys_calculate_free_frames();

uint8 firstTime = 1;
void test_priority_normal_and_higher()
{
f0115a6a:	55                   	push   %ebp
f0115a6b:	89 e5                	mov    %esp,%ebp
f0115a6d:	57                   	push   %edi
f0115a6e:	56                   	push   %esi
f0115a6f:	53                   	push   %ebx
f0115a70:	81 ec 4c 03 00 00    	sub    $0x34c,%esp
	if(firstTime)
f0115a76:	a0 ce 0c 19 f0       	mov    0xf0190cce,%al
f0115a7b:	84 c0                	test   %al,%al
f0115a7d:	0f 84 a8 09 00 00    	je     f011642b <test_priority_normal_and_higher+0x9c1>
		uint32 fact_WS[15];
		uint32 fact_TimeStamp[15];
		uint32 hello_WS[10];
		uint32 hello_TimeStamp[10];

		firstTime = 0;
f0115a83:	c6 05 ce 0c 19 f0 00 	movb   $0x0,0xf0190cce
		char command[100] = "load fos_add 20";
f0115a8a:	8d 85 14 fe ff ff    	lea    -0x1ec(%ebp),%eax
f0115a90:	bb 34 a4 13 f0       	mov    $0xf013a434,%ebx
f0115a95:	ba 04 00 00 00       	mov    $0x4,%edx
f0115a9a:	89 c7                	mov    %eax,%edi
f0115a9c:	89 de                	mov    %ebx,%esi
f0115a9e:	89 d1                	mov    %edx,%ecx
f0115aa0:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
f0115aa2:	8d 95 24 fe ff ff    	lea    -0x1dc(%ebp),%edx
f0115aa8:	b9 15 00 00 00       	mov    $0x15,%ecx
f0115aad:	b8 00 00 00 00       	mov    $0x0,%eax
f0115ab2:	89 d7                	mov    %edx,%edi
f0115ab4:	f3 ab                	rep stos %eax,%es:(%edi)
		execute_command(command);
f0115ab6:	83 ec 0c             	sub    $0xc,%esp
f0115ab9:	8d 85 14 fe ff ff    	lea    -0x1ec(%ebp),%eax
f0115abf:	50                   	push   %eax
f0115ac0:	e8 ca b1 fe ff       	call   f0100c8f <execute_command>
f0115ac5:	83 c4 10             	add    $0x10,%esp
		char command2[100] = "load fact 15";
f0115ac8:	8d 85 78 fe ff ff    	lea    -0x188(%ebp),%eax
f0115ace:	bb 98 a4 13 f0       	mov    $0xf013a498,%ebx
f0115ad3:	ba 0d 00 00 00       	mov    $0xd,%edx
f0115ad8:	89 c7                	mov    %eax,%edi
f0115ada:	89 de                	mov    %ebx,%esi
f0115adc:	89 d1                	mov    %edx,%ecx
f0115ade:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0115ae0:	8d 95 85 fe ff ff    	lea    -0x17b(%ebp),%edx
f0115ae6:	b9 57 00 00 00       	mov    $0x57,%ecx
f0115aeb:	b0 00                	mov    $0x0,%al
f0115aed:	89 d7                	mov    %edx,%edi
f0115aef:	f3 aa                	rep stos %al,%es:(%edi)
		execute_command(command2);
f0115af1:	83 ec 0c             	sub    $0xc,%esp
f0115af4:	8d 85 78 fe ff ff    	lea    -0x188(%ebp),%eax
f0115afa:	50                   	push   %eax
f0115afb:	e8 8f b1 fe ff       	call   f0100c8f <execute_command>
f0115b00:	83 c4 10             	add    $0x10,%esp
		char command3[100] = "load fos_helloWorld 10";
f0115b03:	8d 85 dc fe ff ff    	lea    -0x124(%ebp),%eax
f0115b09:	bb fc a4 13 f0       	mov    $0xf013a4fc,%ebx
f0115b0e:	ba 17 00 00 00       	mov    $0x17,%edx
f0115b13:	89 c7                	mov    %eax,%edi
f0115b15:	89 de                	mov    %ebx,%esi
f0115b17:	89 d1                	mov    %edx,%ecx
f0115b19:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0115b1b:	8d 95 f3 fe ff ff    	lea    -0x10d(%ebp),%edx
f0115b21:	b9 4d 00 00 00       	mov    $0x4d,%ecx
f0115b26:	b0 00                	mov    $0x0,%al
f0115b28:	89 d7                	mov    %edx,%edi
f0115b2a:	f3 aa                	rep stos %al,%es:(%edi)
		execute_command(command3);
f0115b2c:	83 ec 0c             	sub    $0xc,%esp
f0115b2f:	8d 85 dc fe ff ff    	lea    -0x124(%ebp),%eax
f0115b35:	50                   	push   %eax
f0115b36:	e8 54 b1 fe ff       	call   f0100c8f <execute_command>
f0115b3b:	83 c4 10             	add    $0x10,%esp

		struct Env * addEnv;
		struct Env * factEnv;
		struct Env * helloEnv;
		envid2env(4096, &addEnv, 0);
f0115b3e:	83 ec 04             	sub    $0x4,%esp
f0115b41:	6a 00                	push   $0x0
f0115b43:	8d 45 ac             	lea    -0x54(%ebp),%eax
f0115b46:	50                   	push   %eax
f0115b47:	68 00 10 00 00       	push   $0x1000
f0115b4c:	e8 7c 38 ff ff       	call   f01093cd <envid2env>
f0115b51:	83 c4 10             	add    $0x10,%esp
		envid2env(4097, &factEnv, 0);
f0115b54:	83 ec 04             	sub    $0x4,%esp
f0115b57:	6a 00                	push   $0x0
f0115b59:	8d 45 a8             	lea    -0x58(%ebp),%eax
f0115b5c:	50                   	push   %eax
f0115b5d:	68 01 10 00 00       	push   $0x1001
f0115b62:	e8 66 38 ff ff       	call   f01093cd <envid2env>
f0115b67:	83 c4 10             	add    $0x10,%esp
		envid2env(4098, &helloEnv, 0);
f0115b6a:	83 ec 04             	sub    $0x4,%esp
f0115b6d:	6a 00                	push   $0x0
f0115b6f:	8d 45 a4             	lea    -0x5c(%ebp),%eax
f0115b72:	50                   	push   %eax
f0115b73:	68 02 10 00 00       	push   $0x1002
f0115b78:	e8 50 38 ff ff       	call   f01093cd <envid2env>
f0115b7d:	83 c4 10             	add    $0x10,%esp

		if(addEnv == NULL || factEnv == NULL || helloEnv == NULL)
f0115b80:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0115b83:	85 c0                	test   %eax,%eax
f0115b85:	74 0e                	je     f0115b95 <test_priority_normal_and_higher+0x12b>
f0115b87:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0115b8a:	85 c0                	test   %eax,%eax
f0115b8c:	74 07                	je     f0115b95 <test_priority_normal_and_higher+0x12b>
f0115b8e:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0115b91:	85 c0                	test   %eax,%eax
f0115b93:	75 14                	jne    f0115ba9 <test_priority_normal_and_higher+0x13f>
			panic("Loading programs failed\n");
f0115b95:	83 ec 04             	sub    $0x4,%esp
f0115b98:	68 d4 a1 13 f0       	push   $0xf013a1d4
f0115b9d:	6a 26                	push   $0x26
f0115b9f:	68 ed a1 13 f0       	push   $0xf013a1ed
f0115ba4:	e8 fd a5 fe ff       	call   f01001a6 <_panic>

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 15 || helloEnv->page_WS_max_size != 10)
f0115ba9:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0115bac:	8b 40 74             	mov    0x74(%eax),%eax
f0115baf:	83 f8 14             	cmp    $0x14,%eax
f0115bb2:	75 16                	jne    f0115bca <test_priority_normal_and_higher+0x160>
f0115bb4:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0115bb7:	8b 40 74             	mov    0x74(%eax),%eax
f0115bba:	83 f8 0f             	cmp    $0xf,%eax
f0115bbd:	75 0b                	jne    f0115bca <test_priority_normal_and_higher+0x160>
f0115bbf:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0115bc2:	8b 40 74             	mov    0x74(%eax),%eax
f0115bc5:	83 f8 0a             	cmp    $0xa,%eax
f0115bc8:	74 14                	je     f0115bde <test_priority_normal_and_higher+0x174>
			panic("The programs should be initially loaded with the given working set size\n");
f0115bca:	83 ec 04             	sub    $0x4,%esp
f0115bcd:	68 08 a2 13 f0       	push   $0xf013a208
f0115bd2:	6a 29                	push   $0x29
f0115bd4:	68 ed a1 13 f0       	push   $0xf013a1ed
f0115bd9:	e8 c8 a5 fe ff       	call   f01001a6 <_panic>

		for(int i = 0; i < 20; i++)
f0115bde:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
f0115be5:	eb 43                	jmp    f0115c2a <test_priority_normal_and_higher+0x1c0>
		{
			add_WS[i] = addEnv->ptr_pageWorkingSet[i].virtual_address;
f0115be7:	8b 4d ac             	mov    -0x54(%ebp),%ecx
f0115bea:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f0115bed:	89 d0                	mov    %edx,%eax
f0115bef:	01 c0                	add    %eax,%eax
f0115bf1:	01 d0                	add    %edx,%eax
f0115bf3:	c1 e0 03             	shl    $0x3,%eax
f0115bf6:	01 c8                	add    %ecx,%eax
f0115bf8:	83 c0 78             	add    $0x78,%eax
f0115bfb:	8b 10                	mov    (%eax),%edx
f0115bfd:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0115c00:	89 94 85 74 fd ff ff 	mov    %edx,-0x28c(%ebp,%eax,4)
			add_TimeStamp[i] = addEnv->ptr_pageWorkingSet[i].time_stamp;
f0115c07:	8b 4d ac             	mov    -0x54(%ebp),%ecx
f0115c0a:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f0115c0d:	89 d0                	mov    %edx,%eax
f0115c0f:	01 c0                	add    %eax,%eax
f0115c11:	01 d0                	add    %edx,%eax
f0115c13:	c1 e0 03             	shl    $0x3,%eax
f0115c16:	01 c8                	add    %ecx,%eax
f0115c18:	83 e8 80             	sub    $0xffffff80,%eax
f0115c1b:	8b 10                	mov    (%eax),%edx
f0115c1d:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0115c20:	89 94 85 c4 fd ff ff 	mov    %edx,-0x23c(%ebp,%eax,4)
			panic("Loading programs failed\n");

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 15 || helloEnv->page_WS_max_size != 10)
			panic("The programs should be initially loaded with the given working set size\n");

		for(int i = 0; i < 20; i++)
f0115c27:	ff 45 e4             	incl   -0x1c(%ebp)
f0115c2a:	83 7d e4 13          	cmpl   $0x13,-0x1c(%ebp)
f0115c2e:	7e b7                	jle    f0115be7 <test_priority_normal_and_higher+0x17d>
		{
			add_WS[i] = addEnv->ptr_pageWorkingSet[i].virtual_address;
			add_TimeStamp[i] = addEnv->ptr_pageWorkingSet[i].time_stamp;
		}

		for(int i = 0; i < 15; i++)
f0115c30:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
f0115c37:	eb 43                	jmp    f0115c7c <test_priority_normal_and_higher+0x212>
		{
			fact_WS[i] = factEnv->ptr_pageWorkingSet[i].virtual_address;
f0115c39:	8b 4d a8             	mov    -0x58(%ebp),%ecx
f0115c3c:	8b 55 e0             	mov    -0x20(%ebp),%edx
f0115c3f:	89 d0                	mov    %edx,%eax
f0115c41:	01 c0                	add    %eax,%eax
f0115c43:	01 d0                	add    %edx,%eax
f0115c45:	c1 e0 03             	shl    $0x3,%eax
f0115c48:	01 c8                	add    %ecx,%eax
f0115c4a:	83 c0 78             	add    $0x78,%eax
f0115c4d:	8b 10                	mov    (%eax),%edx
f0115c4f:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0115c52:	89 94 85 fc fc ff ff 	mov    %edx,-0x304(%ebp,%eax,4)
			fact_TimeStamp[i] = factEnv->ptr_pageWorkingSet[i].time_stamp;
f0115c59:	8b 4d a8             	mov    -0x58(%ebp),%ecx
f0115c5c:	8b 55 e0             	mov    -0x20(%ebp),%edx
f0115c5f:	89 d0                	mov    %edx,%eax
f0115c61:	01 c0                	add    %eax,%eax
f0115c63:	01 d0                	add    %edx,%eax
f0115c65:	c1 e0 03             	shl    $0x3,%eax
f0115c68:	01 c8                	add    %ecx,%eax
f0115c6a:	83 e8 80             	sub    $0xffffff80,%eax
f0115c6d:	8b 10                	mov    (%eax),%edx
f0115c6f:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0115c72:	89 94 85 38 fd ff ff 	mov    %edx,-0x2c8(%ebp,%eax,4)
		{
			add_WS[i] = addEnv->ptr_pageWorkingSet[i].virtual_address;
			add_TimeStamp[i] = addEnv->ptr_pageWorkingSet[i].time_stamp;
		}

		for(int i = 0; i < 15; i++)
f0115c79:	ff 45 e0             	incl   -0x20(%ebp)
f0115c7c:	83 7d e0 0e          	cmpl   $0xe,-0x20(%ebp)
f0115c80:	7e b7                	jle    f0115c39 <test_priority_normal_and_higher+0x1cf>
		{
			fact_WS[i] = factEnv->ptr_pageWorkingSet[i].virtual_address;
			fact_TimeStamp[i] = factEnv->ptr_pageWorkingSet[i].time_stamp;
		}

		for(int i = 0; i < 10; i++)
f0115c82:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
f0115c89:	eb 43                	jmp    f0115cce <test_priority_normal_and_higher+0x264>
		{
			hello_WS[i] = helloEnv->ptr_pageWorkingSet[i].virtual_address;
f0115c8b:	8b 4d a4             	mov    -0x5c(%ebp),%ecx
f0115c8e:	8b 55 dc             	mov    -0x24(%ebp),%edx
f0115c91:	89 d0                	mov    %edx,%eax
f0115c93:	01 c0                	add    %eax,%eax
f0115c95:	01 d0                	add    %edx,%eax
f0115c97:	c1 e0 03             	shl    $0x3,%eax
f0115c9a:	01 c8                	add    %ecx,%eax
f0115c9c:	83 c0 78             	add    $0x78,%eax
f0115c9f:	8b 10                	mov    (%eax),%edx
f0115ca1:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0115ca4:	89 94 85 ac fc ff ff 	mov    %edx,-0x354(%ebp,%eax,4)
			hello_TimeStamp[i] = helloEnv->ptr_pageWorkingSet[i].time_stamp;
f0115cab:	8b 4d a4             	mov    -0x5c(%ebp),%ecx
f0115cae:	8b 55 dc             	mov    -0x24(%ebp),%edx
f0115cb1:	89 d0                	mov    %edx,%eax
f0115cb3:	01 c0                	add    %eax,%eax
f0115cb5:	01 d0                	add    %edx,%eax
f0115cb7:	c1 e0 03             	shl    $0x3,%eax
f0115cba:	01 c8                	add    %ecx,%eax
f0115cbc:	83 e8 80             	sub    $0xffffff80,%eax
f0115cbf:	8b 10                	mov    (%eax),%edx
f0115cc1:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0115cc4:	89 94 85 d4 fc ff ff 	mov    %edx,-0x32c(%ebp,%eax,4)
		{
			fact_WS[i] = factEnv->ptr_pageWorkingSet[i].virtual_address;
			fact_TimeStamp[i] = factEnv->ptr_pageWorkingSet[i].time_stamp;
		}

		for(int i = 0; i < 10; i++)
f0115ccb:	ff 45 dc             	incl   -0x24(%ebp)
f0115cce:	83 7d dc 09          	cmpl   $0x9,-0x24(%ebp)
f0115cd2:	7e b7                	jle    f0115c8b <test_priority_normal_and_higher+0x221>
		{
			hello_WS[i] = helloEnv->ptr_pageWorkingSet[i].virtual_address;
			hello_TimeStamp[i] = helloEnv->ptr_pageWorkingSet[i].time_stamp;
		}

		int freeFrames = sys_calculate_free_frames();
f0115cd4:	e8 e5 66 ff ff       	call   f010c3be <sys_calculate_free_frames>
f0115cd9:	89 45 b4             	mov    %eax,-0x4c(%ebp)
		int freeDiskFrames = pf_calculate_free_frames();
f0115cdc:	e8 ab df fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0115ce1:	89 45 b0             	mov    %eax,-0x50(%ebp)

		// Set Priority To Normal // Should change nothing
		set_program_priority(addEnv, 3);
f0115ce4:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0115ce7:	83 ec 08             	sub    $0x8,%esp
f0115cea:	6a 03                	push   $0x3
f0115cec:	50                   	push   %eax
f0115ced:	e8 c2 4b ff ff       	call   f010a8b4 <set_program_priority>
f0115cf2:	83 c4 10             	add    $0x10,%esp
		set_program_priority(factEnv, 3);
f0115cf5:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0115cf8:	83 ec 08             	sub    $0x8,%esp
f0115cfb:	6a 03                	push   $0x3
f0115cfd:	50                   	push   %eax
f0115cfe:	e8 b1 4b ff ff       	call   f010a8b4 <set_program_priority>
f0115d03:	83 c4 10             	add    $0x10,%esp
		set_program_priority(helloEnv, 3);
f0115d06:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0115d09:	83 ec 08             	sub    $0x8,%esp
f0115d0c:	6a 03                	push   $0x3
f0115d0e:	50                   	push   %eax
f0115d0f:	e8 a0 4b ff ff       	call   f010a8b4 <set_program_priority>
f0115d14:	83 c4 10             	add    $0x10,%esp

		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Old working set should be removed properly\n");
f0115d17:	e8 70 df fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0115d1c:	3b 45 b0             	cmp    -0x50(%ebp),%eax
f0115d1f:	74 14                	je     f0115d35 <test_priority_normal_and_higher+0x2cb>
f0115d21:	83 ec 04             	sub    $0x4,%esp
f0115d24:	68 54 a2 13 f0       	push   $0xf013a254
f0115d29:	6a 45                	push   $0x45
f0115d2b:	68 ed a1 13 f0       	push   $0xf013a1ed
f0115d30:	e8 71 a4 fe ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Old working set should be removed properly\n");
f0115d35:	e8 84 66 ff ff       	call   f010c3be <sys_calculate_free_frames>
f0115d3a:	3b 45 b4             	cmp    -0x4c(%ebp),%eax
f0115d3d:	74 14                	je     f0115d53 <test_priority_normal_and_higher+0x2e9>
f0115d3f:	83 ec 04             	sub    $0x4,%esp
f0115d42:	68 54 a2 13 f0       	push   $0xf013a254
f0115d47:	6a 46                	push   $0x46
f0115d49:	68 ed a1 13 f0       	push   $0xf013a1ed
f0115d4e:	e8 53 a4 fe ff       	call   f01001a6 <_panic>

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 15 || helloEnv->page_WS_max_size != 10)
f0115d53:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0115d56:	8b 40 74             	mov    0x74(%eax),%eax
f0115d59:	83 f8 14             	cmp    $0x14,%eax
f0115d5c:	75 16                	jne    f0115d74 <test_priority_normal_and_higher+0x30a>
f0115d5e:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0115d61:	8b 40 74             	mov    0x74(%eax),%eax
f0115d64:	83 f8 0f             	cmp    $0xf,%eax
f0115d67:	75 0b                	jne    f0115d74 <test_priority_normal_and_higher+0x30a>
f0115d69:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0115d6c:	8b 40 74             	mov    0x74(%eax),%eax
f0115d6f:	83 f8 0a             	cmp    $0xa,%eax
f0115d72:	74 14                	je     f0115d88 <test_priority_normal_and_higher+0x31e>
			panic("The programs' working set size should not change after setting priority to normal\n");
f0115d74:	83 ec 04             	sub    $0x4,%esp
f0115d77:	68 80 a2 13 f0       	push   $0xf013a280
f0115d7c:	6a 49                	push   $0x49
f0115d7e:	68 ed a1 13 f0       	push   $0xf013a1ed
f0115d83:	e8 1e a4 fe ff       	call   f01001a6 <_panic>

		freeFrames = sys_calculate_free_frames();
f0115d88:	e8 31 66 ff ff       	call   f010c3be <sys_calculate_free_frames>
f0115d8d:	89 45 b4             	mov    %eax,-0x4c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0115d90:	e8 f7 de fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0115d95:	89 45 b0             	mov    %eax,-0x50(%ebp)

		// Set Priority To Above Normal // Should change only helloWorld as none of the rest is full
		set_program_priority(addEnv, 4);
f0115d98:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0115d9b:	83 ec 08             	sub    $0x8,%esp
f0115d9e:	6a 04                	push   $0x4
f0115da0:	50                   	push   %eax
f0115da1:	e8 0e 4b ff ff       	call   f010a8b4 <set_program_priority>
f0115da6:	83 c4 10             	add    $0x10,%esp
		set_program_priority(factEnv, 4);
f0115da9:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0115dac:	83 ec 08             	sub    $0x8,%esp
f0115daf:	6a 04                	push   $0x4
f0115db1:	50                   	push   %eax
f0115db2:	e8 fd 4a ff ff       	call   f010a8b4 <set_program_priority>
f0115db7:	83 c4 10             	add    $0x10,%esp
		set_program_priority(helloEnv, 4);
f0115dba:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0115dbd:	83 ec 08             	sub    $0x8,%esp
f0115dc0:	6a 04                	push   $0x4
f0115dc2:	50                   	push   %eax
f0115dc3:	e8 ec 4a ff ff       	call   f010a8b4 <set_program_priority>
f0115dc8:	83 c4 10             	add    $0x10,%esp

		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Old working set should be removed properly\n");
f0115dcb:	e8 bc de fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0115dd0:	3b 45 b0             	cmp    -0x50(%ebp),%eax
f0115dd3:	74 14                	je     f0115de9 <test_priority_normal_and_higher+0x37f>
f0115dd5:	83 ec 04             	sub    $0x4,%esp
f0115dd8:	68 54 a2 13 f0       	push   $0xf013a254
f0115ddd:	6a 53                	push   $0x53
f0115ddf:	68 ed a1 13 f0       	push   $0xf013a1ed
f0115de4:	e8 bd a3 fe ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Old working set should be removed properly%x\n");
f0115de9:	e8 d0 65 ff ff       	call   f010c3be <sys_calculate_free_frames>
f0115dee:	3b 45 b4             	cmp    -0x4c(%ebp),%eax
f0115df1:	74 14                	je     f0115e07 <test_priority_normal_and_higher+0x39d>
f0115df3:	83 ec 04             	sub    $0x4,%esp
f0115df6:	68 d4 a2 13 f0       	push   $0xf013a2d4
f0115dfb:	6a 54                	push   $0x54
f0115dfd:	68 ed a1 13 f0       	push   $0xf013a1ed
f0115e02:	e8 9f a3 fe ff       	call   f01001a6 <_panic>

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 15 || helloEnv->page_WS_max_size != 20)
f0115e07:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0115e0a:	8b 40 74             	mov    0x74(%eax),%eax
f0115e0d:	83 f8 14             	cmp    $0x14,%eax
f0115e10:	75 16                	jne    f0115e28 <test_priority_normal_and_higher+0x3be>
f0115e12:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0115e15:	8b 40 74             	mov    0x74(%eax),%eax
f0115e18:	83 f8 0f             	cmp    $0xf,%eax
f0115e1b:	75 0b                	jne    f0115e28 <test_priority_normal_and_higher+0x3be>
f0115e1d:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0115e20:	8b 40 74             	mov    0x74(%eax),%eax
f0115e23:	83 f8 14             	cmp    $0x14,%eax
f0115e26:	74 14                	je     f0115e3c <test_priority_normal_and_higher+0x3d2>
			panic("The programs' working set size should be doubled only if it is full\n");
f0115e28:	83 ec 04             	sub    $0x4,%esp
f0115e2b:	68 04 a3 13 f0       	push   $0xf013a304
f0115e30:	6a 57                	push   $0x57
f0115e32:	68 ed a1 13 f0       	push   $0xf013a1ed
f0115e37:	e8 6a a3 fe ff       	call   f01001a6 <_panic>

		freeFrames = sys_calculate_free_frames();
f0115e3c:	e8 7d 65 ff ff       	call   f010c3be <sys_calculate_free_frames>
f0115e41:	89 45 b4             	mov    %eax,-0x4c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0115e44:	e8 43 de fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0115e49:	89 45 b0             	mov    %eax,-0x50(%ebp)

		// Set priority to above normal --> nothing should change (1 time only)
		set_program_priority(helloEnv, 4);
f0115e4c:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0115e4f:	83 ec 08             	sub    $0x8,%esp
f0115e52:	6a 04                	push   $0x4
f0115e54:	50                   	push   %eax
f0115e55:	e8 5a 4a ff ff       	call   f010a8b4 <set_program_priority>
f0115e5a:	83 c4 10             	add    $0x10,%esp

		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Old working set should be removed properly\n");
f0115e5d:	e8 2a de fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0115e62:	3b 45 b0             	cmp    -0x50(%ebp),%eax
f0115e65:	74 14                	je     f0115e7b <test_priority_normal_and_higher+0x411>
f0115e67:	83 ec 04             	sub    $0x4,%esp
f0115e6a:	68 54 a2 13 f0       	push   $0xf013a254
f0115e6f:	6a 5f                	push   $0x5f
f0115e71:	68 ed a1 13 f0       	push   $0xf013a1ed
f0115e76:	e8 2b a3 fe ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Old working set should be removed properly\n");
f0115e7b:	e8 3e 65 ff ff       	call   f010c3be <sys_calculate_free_frames>
f0115e80:	3b 45 b4             	cmp    -0x4c(%ebp),%eax
f0115e83:	74 14                	je     f0115e99 <test_priority_normal_and_higher+0x42f>
f0115e85:	83 ec 04             	sub    $0x4,%esp
f0115e88:	68 54 a2 13 f0       	push   $0xf013a254
f0115e8d:	6a 60                	push   $0x60
f0115e8f:	68 ed a1 13 f0       	push   $0xf013a1ed
f0115e94:	e8 0d a3 fe ff       	call   f01001a6 <_panic>

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 15 || helloEnv->page_WS_max_size != 20)
f0115e99:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0115e9c:	8b 40 74             	mov    0x74(%eax),%eax
f0115e9f:	83 f8 14             	cmp    $0x14,%eax
f0115ea2:	75 16                	jne    f0115eba <test_priority_normal_and_higher+0x450>
f0115ea4:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0115ea7:	8b 40 74             	mov    0x74(%eax),%eax
f0115eaa:	83 f8 0f             	cmp    $0xf,%eax
f0115ead:	75 0b                	jne    f0115eba <test_priority_normal_and_higher+0x450>
f0115eaf:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0115eb2:	8b 40 74             	mov    0x74(%eax),%eax
f0115eb5:	83 f8 14             	cmp    $0x14,%eax
f0115eb8:	74 14                	je     f0115ece <test_priority_normal_and_higher+0x464>
			panic("The programs' working set size should be doubled only once\n");
f0115eba:	83 ec 04             	sub    $0x4,%esp
f0115ebd:	68 4c a3 13 f0       	push   $0xf013a34c
f0115ec2:	6a 63                	push   $0x63
f0115ec4:	68 ed a1 13 f0       	push   $0xf013a1ed
f0115ec9:	e8 d8 a2 fe ff       	call   f01001a6 <_panic>


		// Manipulate WS to seem as full
		for(int i = 10; i < 20; i++)
f0115ece:	c7 45 d8 0a 00 00 00 	movl   $0xa,-0x28(%ebp)
f0115ed5:	eb 1a                	jmp    f0115ef1 <test_priority_normal_and_higher+0x487>
		{
			helloEnv->ptr_pageWorkingSet[i].empty = 0;
f0115ed7:	8b 4d a4             	mov    -0x5c(%ebp),%ecx
f0115eda:	8b 55 d8             	mov    -0x28(%ebp),%edx
f0115edd:	89 d0                	mov    %edx,%eax
f0115edf:	01 c0                	add    %eax,%eax
f0115ee1:	01 d0                	add    %edx,%eax
f0115ee3:	c1 e0 03             	shl    $0x3,%eax
f0115ee6:	01 c8                	add    %ecx,%eax
f0115ee8:	83 c0 7c             	add    $0x7c,%eax
f0115eeb:	c6 00 00             	movb   $0x0,(%eax)
		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 15 || helloEnv->page_WS_max_size != 20)
			panic("The programs' working set size should be doubled only once\n");


		// Manipulate WS to seem as full
		for(int i = 10; i < 20; i++)
f0115eee:	ff 45 d8             	incl   -0x28(%ebp)
f0115ef1:	83 7d d8 13          	cmpl   $0x13,-0x28(%ebp)
f0115ef5:	7e e0                	jle    f0115ed7 <test_priority_normal_and_higher+0x46d>
		{
			helloEnv->ptr_pageWorkingSet[i].empty = 0;
		}

		freeFrames = sys_calculate_free_frames();
f0115ef7:	e8 c2 64 ff ff       	call   f010c3be <sys_calculate_free_frames>
f0115efc:	89 45 b4             	mov    %eax,-0x4c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0115eff:	e8 88 dd fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0115f04:	89 45 b0             	mov    %eax,-0x50(%ebp)

		set_program_priority(helloEnv, 4);
f0115f07:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0115f0a:	83 ec 08             	sub    $0x8,%esp
f0115f0d:	6a 04                	push   $0x4
f0115f0f:	50                   	push   %eax
f0115f10:	e8 9f 49 ff ff       	call   f010a8b4 <set_program_priority>
f0115f15:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Old working set should be removed properly\n");
f0115f18:	e8 6f dd fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0115f1d:	3b 45 b0             	cmp    -0x50(%ebp),%eax
f0115f20:	74 14                	je     f0115f36 <test_priority_normal_and_higher+0x4cc>
f0115f22:	83 ec 04             	sub    $0x4,%esp
f0115f25:	68 54 a2 13 f0       	push   $0xf013a254
f0115f2a:	6a 70                	push   $0x70
f0115f2c:	68 ed a1 13 f0       	push   $0xf013a1ed
f0115f31:	e8 70 a2 fe ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Old working set should be removed properly\n");
f0115f36:	e8 83 64 ff ff       	call   f010c3be <sys_calculate_free_frames>
f0115f3b:	3b 45 b4             	cmp    -0x4c(%ebp),%eax
f0115f3e:	74 14                	je     f0115f54 <test_priority_normal_and_higher+0x4ea>
f0115f40:	83 ec 04             	sub    $0x4,%esp
f0115f43:	68 54 a2 13 f0       	push   $0xf013a254
f0115f48:	6a 71                	push   $0x71
f0115f4a:	68 ed a1 13 f0       	push   $0xf013a1ed
f0115f4f:	e8 52 a2 fe ff       	call   f01001a6 <_panic>

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 15 || helloEnv->page_WS_max_size != 20)
f0115f54:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0115f57:	8b 40 74             	mov    0x74(%eax),%eax
f0115f5a:	83 f8 14             	cmp    $0x14,%eax
f0115f5d:	75 16                	jne    f0115f75 <test_priority_normal_and_higher+0x50b>
f0115f5f:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0115f62:	8b 40 74             	mov    0x74(%eax),%eax
f0115f65:	83 f8 0f             	cmp    $0xf,%eax
f0115f68:	75 0b                	jne    f0115f75 <test_priority_normal_and_higher+0x50b>
f0115f6a:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0115f6d:	8b 40 74             	mov    0x74(%eax),%eax
f0115f70:	83 f8 14             	cmp    $0x14,%eax
f0115f73:	74 14                	je     f0115f89 <test_priority_normal_and_higher+0x51f>
			panic("The programs' working set size should be doubled only once\n");
f0115f75:	83 ec 04             	sub    $0x4,%esp
f0115f78:	68 4c a3 13 f0       	push   $0xf013a34c
f0115f7d:	6a 74                	push   $0x74
f0115f7f:	68 ed a1 13 f0       	push   $0xf013a1ed
f0115f84:	e8 1d a2 fe ff       	call   f01001a6 <_panic>

		for(int i = 10; i < 15; i++)
f0115f89:	c7 45 d4 0a 00 00 00 	movl   $0xa,-0x2c(%ebp)
f0115f90:	eb 1a                	jmp    f0115fac <test_priority_normal_and_higher+0x542>
		{
			factEnv->ptr_pageWorkingSet[i].empty = 0;
f0115f92:	8b 4d a8             	mov    -0x58(%ebp),%ecx
f0115f95:	8b 55 d4             	mov    -0x2c(%ebp),%edx
f0115f98:	89 d0                	mov    %edx,%eax
f0115f9a:	01 c0                	add    %eax,%eax
f0115f9c:	01 d0                	add    %edx,%eax
f0115f9e:	c1 e0 03             	shl    $0x3,%eax
f0115fa1:	01 c8                	add    %ecx,%eax
f0115fa3:	83 c0 7c             	add    $0x7c,%eax
f0115fa6:	c6 00 00             	movb   $0x0,(%eax)
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Old working set should be removed properly\n");

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 15 || helloEnv->page_WS_max_size != 20)
			panic("The programs' working set size should be doubled only once\n");

		for(int i = 10; i < 15; i++)
f0115fa9:	ff 45 d4             	incl   -0x2c(%ebp)
f0115fac:	83 7d d4 0e          	cmpl   $0xe,-0x2c(%ebp)
f0115fb0:	7e e0                	jle    f0115f92 <test_priority_normal_and_higher+0x528>
		{
			factEnv->ptr_pageWorkingSet[i].empty = 0;
		}

		freeFrames = sys_calculate_free_frames();
f0115fb2:	e8 07 64 ff ff       	call   f010c3be <sys_calculate_free_frames>
f0115fb7:	89 45 b4             	mov    %eax,-0x4c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0115fba:	e8 cd dc fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0115fbf:	89 45 b0             	mov    %eax,-0x50(%ebp)
		set_program_priority(factEnv, 5);
f0115fc2:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0115fc5:	83 ec 08             	sub    $0x8,%esp
f0115fc8:	6a 05                	push   $0x5
f0115fca:	50                   	push   %eax
f0115fcb:	e8 e4 48 ff ff       	call   f010a8b4 <set_program_priority>
f0115fd0:	83 c4 10             	add    $0x10,%esp
		set_program_priority(helloEnv, 5);
f0115fd3:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0115fd6:	83 ec 08             	sub    $0x8,%esp
f0115fd9:	6a 05                	push   $0x5
f0115fdb:	50                   	push   %eax
f0115fdc:	e8 d3 48 ff ff       	call   f010a8b4 <set_program_priority>
f0115fe1:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Old working set should be removed properly\n");
f0115fe4:	e8 a3 dc fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0115fe9:	3b 45 b0             	cmp    -0x50(%ebp),%eax
f0115fec:	74 14                	je     f0116002 <test_priority_normal_and_higher+0x598>
f0115fee:	83 ec 04             	sub    $0x4,%esp
f0115ff1:	68 54 a2 13 f0       	push   $0xf013a254
f0115ff6:	6a 7f                	push   $0x7f
f0115ff8:	68 ed a1 13 f0       	push   $0xf013a1ed
f0115ffd:	e8 a4 a1 fe ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Old working set should be removed properly\n");
f0116002:	e8 b7 63 ff ff       	call   f010c3be <sys_calculate_free_frames>
f0116007:	3b 45 b4             	cmp    -0x4c(%ebp),%eax
f011600a:	74 17                	je     f0116023 <test_priority_normal_and_higher+0x5b9>
f011600c:	83 ec 04             	sub    $0x4,%esp
f011600f:	68 54 a2 13 f0       	push   $0xf013a254
f0116014:	68 80 00 00 00       	push   $0x80
f0116019:	68 ed a1 13 f0       	push   $0xf013a1ed
f011601e:	e8 83 a1 fe ff       	call   f01001a6 <_panic>

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 30 || helloEnv->page_WS_max_size != 40)
f0116023:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0116026:	8b 40 74             	mov    0x74(%eax),%eax
f0116029:	83 f8 14             	cmp    $0x14,%eax
f011602c:	75 16                	jne    f0116044 <test_priority_normal_and_higher+0x5da>
f011602e:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0116031:	8b 40 74             	mov    0x74(%eax),%eax
f0116034:	83 f8 1e             	cmp    $0x1e,%eax
f0116037:	75 0b                	jne    f0116044 <test_priority_normal_and_higher+0x5da>
f0116039:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f011603c:	8b 40 74             	mov    0x74(%eax),%eax
f011603f:	83 f8 28             	cmp    $0x28,%eax
f0116042:	74 17                	je     f011605b <test_priority_normal_and_higher+0x5f1>
			panic("The programs' working set size should be doubled if full\n");
f0116044:	83 ec 04             	sub    $0x4,%esp
f0116047:	68 88 a3 13 f0       	push   $0xf013a388
f011604c:	68 83 00 00 00       	push   $0x83
f0116051:	68 ed a1 13 f0       	push   $0xf013a1ed
f0116056:	e8 4b a1 fe ff       	call   f01001a6 <_panic>

		for(int i = 20; i < 40; i++)
f011605b:	c7 45 d0 14 00 00 00 	movl   $0x14,-0x30(%ebp)
f0116062:	eb 1a                	jmp    f011607e <test_priority_normal_and_higher+0x614>
		{
			helloEnv->ptr_pageWorkingSet[i].empty = 0;
f0116064:	8b 4d a4             	mov    -0x5c(%ebp),%ecx
f0116067:	8b 55 d0             	mov    -0x30(%ebp),%edx
f011606a:	89 d0                	mov    %edx,%eax
f011606c:	01 c0                	add    %eax,%eax
f011606e:	01 d0                	add    %edx,%eax
f0116070:	c1 e0 03             	shl    $0x3,%eax
f0116073:	01 c8                	add    %ecx,%eax
f0116075:	83 c0 7c             	add    $0x7c,%eax
f0116078:	c6 00 00             	movb   $0x0,(%eax)
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Old working set should be removed properly\n");

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 30 || helloEnv->page_WS_max_size != 40)
			panic("The programs' working set size should be doubled if full\n");

		for(int i = 20; i < 40; i++)
f011607b:	ff 45 d0             	incl   -0x30(%ebp)
f011607e:	83 7d d0 27          	cmpl   $0x27,-0x30(%ebp)
f0116082:	7e e0                	jle    f0116064 <test_priority_normal_and_higher+0x5fa>
		{
			helloEnv->ptr_pageWorkingSet[i].empty = 0;
		}

		freeFrames = sys_calculate_free_frames();
f0116084:	e8 35 63 ff ff       	call   f010c3be <sys_calculate_free_frames>
f0116089:	89 45 b4             	mov    %eax,-0x4c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011608c:	e8 fb db fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0116091:	89 45 b0             	mov    %eax,-0x50(%ebp)
		set_program_priority(factEnv, 5);
f0116094:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0116097:	83 ec 08             	sub    $0x8,%esp
f011609a:	6a 05                	push   $0x5
f011609c:	50                   	push   %eax
f011609d:	e8 12 48 ff ff       	call   f010a8b4 <set_program_priority>
f01160a2:	83 c4 10             	add    $0x10,%esp
		set_program_priority(helloEnv, 4);
f01160a5:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f01160a8:	83 ec 08             	sub    $0x8,%esp
f01160ab:	6a 04                	push   $0x4
f01160ad:	50                   	push   %eax
f01160ae:	e8 01 48 ff ff       	call   f010a8b4 <set_program_priority>
f01160b3:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Old working set should be removed properly\n");
f01160b6:	e8 d1 db fe ff       	call   f0103c8c <pf_calculate_free_frames>
f01160bb:	3b 45 b0             	cmp    -0x50(%ebp),%eax
f01160be:	74 17                	je     f01160d7 <test_priority_normal_and_higher+0x66d>
f01160c0:	83 ec 04             	sub    $0x4,%esp
f01160c3:	68 54 a2 13 f0       	push   $0xf013a254
f01160c8:	68 8e 00 00 00       	push   $0x8e
f01160cd:	68 ed a1 13 f0       	push   $0xf013a1ed
f01160d2:	e8 cf a0 fe ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Old working set should be removed properly\n");
f01160d7:	e8 e2 62 ff ff       	call   f010c3be <sys_calculate_free_frames>
f01160dc:	3b 45 b4             	cmp    -0x4c(%ebp),%eax
f01160df:	74 17                	je     f01160f8 <test_priority_normal_and_higher+0x68e>
f01160e1:	83 ec 04             	sub    $0x4,%esp
f01160e4:	68 54 a2 13 f0       	push   $0xf013a254
f01160e9:	68 8f 00 00 00       	push   $0x8f
f01160ee:	68 ed a1 13 f0       	push   $0xf013a1ed
f01160f3:	e8 ae a0 fe ff       	call   f01001a6 <_panic>

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 30 || helloEnv->page_WS_max_size != 40)
f01160f8:	8b 45 ac             	mov    -0x54(%ebp),%eax
f01160fb:	8b 40 74             	mov    0x74(%eax),%eax
f01160fe:	83 f8 14             	cmp    $0x14,%eax
f0116101:	75 16                	jne    f0116119 <test_priority_normal_and_higher+0x6af>
f0116103:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0116106:	8b 40 74             	mov    0x74(%eax),%eax
f0116109:	83 f8 1e             	cmp    $0x1e,%eax
f011610c:	75 0b                	jne    f0116119 <test_priority_normal_and_higher+0x6af>
f011610e:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0116111:	8b 40 74             	mov    0x74(%eax),%eax
f0116114:	83 f8 28             	cmp    $0x28,%eax
f0116117:	74 17                	je     f0116130 <test_priority_normal_and_higher+0x6c6>
			panic("The programs' working set size should be doubled if full\n");
f0116119:	83 ec 04             	sub    $0x4,%esp
f011611c:	68 88 a3 13 f0       	push   $0xf013a388
f0116121:	68 92 00 00 00       	push   $0x92
f0116126:	68 ed a1 13 f0       	push   $0xf013a1ed
f011612b:	e8 76 a0 fe ff       	call   f01001a6 <_panic>

		for(int i = 15; i < 30; i++)
f0116130:	c7 45 cc 0f 00 00 00 	movl   $0xf,-0x34(%ebp)
f0116137:	eb 1a                	jmp    f0116153 <test_priority_normal_and_higher+0x6e9>
		{
			factEnv->ptr_pageWorkingSet[i].empty = 0;
f0116139:	8b 4d a8             	mov    -0x58(%ebp),%ecx
f011613c:	8b 55 cc             	mov    -0x34(%ebp),%edx
f011613f:	89 d0                	mov    %edx,%eax
f0116141:	01 c0                	add    %eax,%eax
f0116143:	01 d0                	add    %edx,%eax
f0116145:	c1 e0 03             	shl    $0x3,%eax
f0116148:	01 c8                	add    %ecx,%eax
f011614a:	83 c0 7c             	add    $0x7c,%eax
f011614d:	c6 00 00             	movb   $0x0,(%eax)
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Old working set should be removed properly\n");

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 30 || helloEnv->page_WS_max_size != 40)
			panic("The programs' working set size should be doubled if full\n");

		for(int i = 15; i < 30; i++)
f0116150:	ff 45 cc             	incl   -0x34(%ebp)
f0116153:	83 7d cc 1d          	cmpl   $0x1d,-0x34(%ebp)
f0116157:	7e e0                	jle    f0116139 <test_priority_normal_and_higher+0x6cf>
		{
			factEnv->ptr_pageWorkingSet[i].empty = 0;
		}

		freeFrames = sys_calculate_free_frames();
f0116159:	e8 60 62 ff ff       	call   f010c3be <sys_calculate_free_frames>
f011615e:	89 45 b4             	mov    %eax,-0x4c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0116161:	e8 26 db fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0116166:	89 45 b0             	mov    %eax,-0x50(%ebp)
		set_program_priority(factEnv, 5);
f0116169:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011616c:	83 ec 08             	sub    $0x8,%esp
f011616f:	6a 05                	push   $0x5
f0116171:	50                   	push   %eax
f0116172:	e8 3d 47 ff ff       	call   f010a8b4 <set_program_priority>
f0116177:	83 c4 10             	add    $0x10,%esp
		set_program_priority(helloEnv, 4);
f011617a:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f011617d:	83 ec 08             	sub    $0x8,%esp
f0116180:	6a 04                	push   $0x4
f0116182:	50                   	push   %eax
f0116183:	e8 2c 47 ff ff       	call   f010a8b4 <set_program_priority>
f0116188:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Old working set should be removed properly\n");
f011618b:	e8 fc da fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0116190:	3b 45 b0             	cmp    -0x50(%ebp),%eax
f0116193:	74 17                	je     f01161ac <test_priority_normal_and_higher+0x742>
f0116195:	83 ec 04             	sub    $0x4,%esp
f0116198:	68 54 a2 13 f0       	push   $0xf013a254
f011619d:	68 9d 00 00 00       	push   $0x9d
f01161a2:	68 ed a1 13 f0       	push   $0xf013a1ed
f01161a7:	e8 fa 9f fe ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Old working set should be removed properly\n");
f01161ac:	e8 0d 62 ff ff       	call   f010c3be <sys_calculate_free_frames>
f01161b1:	3b 45 b4             	cmp    -0x4c(%ebp),%eax
f01161b4:	74 17                	je     f01161cd <test_priority_normal_and_higher+0x763>
f01161b6:	83 ec 04             	sub    $0x4,%esp
f01161b9:	68 54 a2 13 f0       	push   $0xf013a254
f01161be:	68 9e 00 00 00       	push   $0x9e
f01161c3:	68 ed a1 13 f0       	push   $0xf013a1ed
f01161c8:	e8 d9 9f fe ff       	call   f01001a6 <_panic>

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 60 || helloEnv->page_WS_max_size != 40)
f01161cd:	8b 45 ac             	mov    -0x54(%ebp),%eax
f01161d0:	8b 40 74             	mov    0x74(%eax),%eax
f01161d3:	83 f8 14             	cmp    $0x14,%eax
f01161d6:	75 16                	jne    f01161ee <test_priority_normal_and_higher+0x784>
f01161d8:	8b 45 a8             	mov    -0x58(%ebp),%eax
f01161db:	8b 40 74             	mov    0x74(%eax),%eax
f01161de:	83 f8 3c             	cmp    $0x3c,%eax
f01161e1:	75 0b                	jne    f01161ee <test_priority_normal_and_higher+0x784>
f01161e3:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f01161e6:	8b 40 74             	mov    0x74(%eax),%eax
f01161e9:	83 f8 28             	cmp    $0x28,%eax
f01161ec:	74 17                	je     f0116205 <test_priority_normal_and_higher+0x79b>
			panic("The programs' working set size should be doubled if full\n");
f01161ee:	83 ec 04             	sub    $0x4,%esp
f01161f1:	68 88 a3 13 f0       	push   $0xf013a388
f01161f6:	68 a1 00 00 00       	push   $0xa1
f01161fb:	68 ed a1 13 f0       	push   $0xf013a1ed
f0116200:	e8 a1 9f fe ff       	call   f01001a6 <_panic>

		for(int i = 15; i < 60; i++)
f0116205:	c7 45 c8 0f 00 00 00 	movl   $0xf,-0x38(%ebp)
f011620c:	eb 1a                	jmp    f0116228 <test_priority_normal_and_higher+0x7be>
		{
			factEnv->ptr_pageWorkingSet[i].empty = 1;
f011620e:	8b 4d a8             	mov    -0x58(%ebp),%ecx
f0116211:	8b 55 c8             	mov    -0x38(%ebp),%edx
f0116214:	89 d0                	mov    %edx,%eax
f0116216:	01 c0                	add    %eax,%eax
f0116218:	01 d0                	add    %edx,%eax
f011621a:	c1 e0 03             	shl    $0x3,%eax
f011621d:	01 c8                	add    %ecx,%eax
f011621f:	83 c0 7c             	add    $0x7c,%eax
f0116222:	c6 00 01             	movb   $0x1,(%eax)
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Old working set should be removed properly\n");

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 60 || helloEnv->page_WS_max_size != 40)
			panic("The programs' working set size should be doubled if full\n");

		for(int i = 15; i < 60; i++)
f0116225:	ff 45 c8             	incl   -0x38(%ebp)
f0116228:	83 7d c8 3b          	cmpl   $0x3b,-0x38(%ebp)
f011622c:	7e e0                	jle    f011620e <test_priority_normal_and_higher+0x7a4>
		{
			factEnv->ptr_pageWorkingSet[i].empty = 1;
		}
		for(int i = 10; i < 40; i++)
f011622e:	c7 45 c4 0a 00 00 00 	movl   $0xa,-0x3c(%ebp)
f0116235:	eb 1a                	jmp    f0116251 <test_priority_normal_and_higher+0x7e7>
		{
			helloEnv->ptr_pageWorkingSet[i].empty = 1;
f0116237:	8b 4d a4             	mov    -0x5c(%ebp),%ecx
f011623a:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f011623d:	89 d0                	mov    %edx,%eax
f011623f:	01 c0                	add    %eax,%eax
f0116241:	01 d0                	add    %edx,%eax
f0116243:	c1 e0 03             	shl    $0x3,%eax
f0116246:	01 c8                	add    %ecx,%eax
f0116248:	83 c0 7c             	add    $0x7c,%eax
f011624b:	c6 00 01             	movb   $0x1,(%eax)

		for(int i = 15; i < 60; i++)
		{
			factEnv->ptr_pageWorkingSet[i].empty = 1;
		}
		for(int i = 10; i < 40; i++)
f011624e:	ff 45 c4             	incl   -0x3c(%ebp)
f0116251:	83 7d c4 27          	cmpl   $0x27,-0x3c(%ebp)
f0116255:	7e e0                	jle    f0116237 <test_priority_normal_and_higher+0x7cd>
		{
			helloEnv->ptr_pageWorkingSet[i].empty = 1;
		}

		for(int i = 0; i < 20; i++)
f0116257:	c7 45 c0 00 00 00 00 	movl   $0x0,-0x40(%ebp)
f011625e:	eb 79                	jmp    f01162d9 <test_priority_normal_and_higher+0x86f>
		{
			if(add_WS[i] != addEnv->ptr_pageWorkingSet[i].virtual_address)
f0116260:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0116263:	8b 8c 85 74 fd ff ff 	mov    -0x28c(%ebp,%eax,4),%ecx
f011626a:	8b 5d ac             	mov    -0x54(%ebp),%ebx
f011626d:	8b 55 c0             	mov    -0x40(%ebp),%edx
f0116270:	89 d0                	mov    %edx,%eax
f0116272:	01 c0                	add    %eax,%eax
f0116274:	01 d0                	add    %edx,%eax
f0116276:	c1 e0 03             	shl    $0x3,%eax
f0116279:	01 d8                	add    %ebx,%eax
f011627b:	83 c0 78             	add    $0x78,%eax
f011627e:	8b 00                	mov    (%eax),%eax
f0116280:	39 c1                	cmp    %eax,%ecx
f0116282:	74 17                	je     f011629b <test_priority_normal_and_higher+0x831>
				panic("Working set should be moved properly to the new one");
f0116284:	83 ec 04             	sub    $0x4,%esp
f0116287:	68 c4 a3 13 f0       	push   $0xf013a3c4
f011628c:	68 af 00 00 00       	push   $0xaf
f0116291:	68 ed a1 13 f0       	push   $0xf013a1ed
f0116296:	e8 0b 9f fe ff       	call   f01001a6 <_panic>

			if(add_TimeStamp[i] != addEnv->ptr_pageWorkingSet[i].time_stamp)
f011629b:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011629e:	8b 8c 85 c4 fd ff ff 	mov    -0x23c(%ebp,%eax,4),%ecx
f01162a5:	8b 5d ac             	mov    -0x54(%ebp),%ebx
f01162a8:	8b 55 c0             	mov    -0x40(%ebp),%edx
f01162ab:	89 d0                	mov    %edx,%eax
f01162ad:	01 c0                	add    %eax,%eax
f01162af:	01 d0                	add    %edx,%eax
f01162b1:	c1 e0 03             	shl    $0x3,%eax
f01162b4:	01 d8                	add    %ebx,%eax
f01162b6:	83 e8 80             	sub    $0xffffff80,%eax
f01162b9:	8b 00                	mov    (%eax),%eax
f01162bb:	39 c1                	cmp    %eax,%ecx
f01162bd:	74 17                	je     f01162d6 <test_priority_normal_and_higher+0x86c>
				panic("Working set should be moved properly to the new one");
f01162bf:	83 ec 04             	sub    $0x4,%esp
f01162c2:	68 c4 a3 13 f0       	push   $0xf013a3c4
f01162c7:	68 b2 00 00 00       	push   $0xb2
f01162cc:	68 ed a1 13 f0       	push   $0xf013a1ed
f01162d1:	e8 d0 9e fe ff       	call   f01001a6 <_panic>
		for(int i = 10; i < 40; i++)
		{
			helloEnv->ptr_pageWorkingSet[i].empty = 1;
		}

		for(int i = 0; i < 20; i++)
f01162d6:	ff 45 c0             	incl   -0x40(%ebp)
f01162d9:	83 7d c0 13          	cmpl   $0x13,-0x40(%ebp)
f01162dd:	7e 81                	jle    f0116260 <test_priority_normal_and_higher+0x7f6>

			if(add_TimeStamp[i] != addEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one");
		}

		for(int i = 0; i < 15; i++)
f01162df:	c7 45 bc 00 00 00 00 	movl   $0x0,-0x44(%ebp)
f01162e6:	eb 79                	jmp    f0116361 <test_priority_normal_and_higher+0x8f7>
		{
			if(fact_WS[i] != factEnv->ptr_pageWorkingSet[i].virtual_address)
f01162e8:	8b 45 bc             	mov    -0x44(%ebp),%eax
f01162eb:	8b 8c 85 fc fc ff ff 	mov    -0x304(%ebp,%eax,4),%ecx
f01162f2:	8b 5d a8             	mov    -0x58(%ebp),%ebx
f01162f5:	8b 55 bc             	mov    -0x44(%ebp),%edx
f01162f8:	89 d0                	mov    %edx,%eax
f01162fa:	01 c0                	add    %eax,%eax
f01162fc:	01 d0                	add    %edx,%eax
f01162fe:	c1 e0 03             	shl    $0x3,%eax
f0116301:	01 d8                	add    %ebx,%eax
f0116303:	83 c0 78             	add    $0x78,%eax
f0116306:	8b 00                	mov    (%eax),%eax
f0116308:	39 c1                	cmp    %eax,%ecx
f011630a:	74 17                	je     f0116323 <test_priority_normal_and_higher+0x8b9>
				panic("Working set should be moved properly to the new one");
f011630c:	83 ec 04             	sub    $0x4,%esp
f011630f:	68 c4 a3 13 f0       	push   $0xf013a3c4
f0116314:	68 b8 00 00 00       	push   $0xb8
f0116319:	68 ed a1 13 f0       	push   $0xf013a1ed
f011631e:	e8 83 9e fe ff       	call   f01001a6 <_panic>

			if(fact_TimeStamp[i] != factEnv->ptr_pageWorkingSet[i].time_stamp)
f0116323:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0116326:	8b 8c 85 38 fd ff ff 	mov    -0x2c8(%ebp,%eax,4),%ecx
f011632d:	8b 5d a8             	mov    -0x58(%ebp),%ebx
f0116330:	8b 55 bc             	mov    -0x44(%ebp),%edx
f0116333:	89 d0                	mov    %edx,%eax
f0116335:	01 c0                	add    %eax,%eax
f0116337:	01 d0                	add    %edx,%eax
f0116339:	c1 e0 03             	shl    $0x3,%eax
f011633c:	01 d8                	add    %ebx,%eax
f011633e:	83 e8 80             	sub    $0xffffff80,%eax
f0116341:	8b 00                	mov    (%eax),%eax
f0116343:	39 c1                	cmp    %eax,%ecx
f0116345:	74 17                	je     f011635e <test_priority_normal_and_higher+0x8f4>
				panic("Working set should be moved properly to the new one");
f0116347:	83 ec 04             	sub    $0x4,%esp
f011634a:	68 c4 a3 13 f0       	push   $0xf013a3c4
f011634f:	68 bb 00 00 00       	push   $0xbb
f0116354:	68 ed a1 13 f0       	push   $0xf013a1ed
f0116359:	e8 48 9e fe ff       	call   f01001a6 <_panic>

			if(add_TimeStamp[i] != addEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one");
		}

		for(int i = 0; i < 15; i++)
f011635e:	ff 45 bc             	incl   -0x44(%ebp)
f0116361:	83 7d bc 0e          	cmpl   $0xe,-0x44(%ebp)
f0116365:	7e 81                	jle    f01162e8 <test_priority_normal_and_higher+0x87e>

			if(fact_TimeStamp[i] != factEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one");
		}

		for(int i = 0; i < 10; i++)
f0116367:	c7 45 b8 00 00 00 00 	movl   $0x0,-0x48(%ebp)
f011636e:	eb 79                	jmp    f01163e9 <test_priority_normal_and_higher+0x97f>
		{
			if(hello_WS[i] != helloEnv->ptr_pageWorkingSet[i].virtual_address)
f0116370:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0116373:	8b 8c 85 ac fc ff ff 	mov    -0x354(%ebp,%eax,4),%ecx
f011637a:	8b 5d a4             	mov    -0x5c(%ebp),%ebx
f011637d:	8b 55 b8             	mov    -0x48(%ebp),%edx
f0116380:	89 d0                	mov    %edx,%eax
f0116382:	01 c0                	add    %eax,%eax
f0116384:	01 d0                	add    %edx,%eax
f0116386:	c1 e0 03             	shl    $0x3,%eax
f0116389:	01 d8                	add    %ebx,%eax
f011638b:	83 c0 78             	add    $0x78,%eax
f011638e:	8b 00                	mov    (%eax),%eax
f0116390:	39 c1                	cmp    %eax,%ecx
f0116392:	74 17                	je     f01163ab <test_priority_normal_and_higher+0x941>
				panic("Working set should be moved properly to the new one");
f0116394:	83 ec 04             	sub    $0x4,%esp
f0116397:	68 c4 a3 13 f0       	push   $0xf013a3c4
f011639c:	68 c1 00 00 00       	push   $0xc1
f01163a1:	68 ed a1 13 f0       	push   $0xf013a1ed
f01163a6:	e8 fb 9d fe ff       	call   f01001a6 <_panic>

			if(hello_TimeStamp[i] != helloEnv->ptr_pageWorkingSet[i].time_stamp)
f01163ab:	8b 45 b8             	mov    -0x48(%ebp),%eax
f01163ae:	8b 8c 85 d4 fc ff ff 	mov    -0x32c(%ebp,%eax,4),%ecx
f01163b5:	8b 5d a4             	mov    -0x5c(%ebp),%ebx
f01163b8:	8b 55 b8             	mov    -0x48(%ebp),%edx
f01163bb:	89 d0                	mov    %edx,%eax
f01163bd:	01 c0                	add    %eax,%eax
f01163bf:	01 d0                	add    %edx,%eax
f01163c1:	c1 e0 03             	shl    $0x3,%eax
f01163c4:	01 d8                	add    %ebx,%eax
f01163c6:	83 e8 80             	sub    $0xffffff80,%eax
f01163c9:	8b 00                	mov    (%eax),%eax
f01163cb:	39 c1                	cmp    %eax,%ecx
f01163cd:	74 17                	je     f01163e6 <test_priority_normal_and_higher+0x97c>
				panic("Working set should be moved properly to the new one");
f01163cf:	83 ec 04             	sub    $0x4,%esp
f01163d2:	68 c4 a3 13 f0       	push   $0xf013a3c4
f01163d7:	68 c4 00 00 00       	push   $0xc4
f01163dc:	68 ed a1 13 f0       	push   $0xf013a1ed
f01163e1:	e8 c0 9d fe ff       	call   f01001a6 <_panic>

			if(fact_TimeStamp[i] != factEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one");
		}

		for(int i = 0; i < 10; i++)
f01163e6:	ff 45 b8             	incl   -0x48(%ebp)
f01163e9:	83 7d b8 09          	cmpl   $0x9,-0x48(%ebp)
f01163ed:	7e 81                	jle    f0116370 <test_priority_normal_and_higher+0x906>

			if(hello_TimeStamp[i] != helloEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one");
		}

		char command4[100] = "runall";
f01163ef:	c7 85 40 ff ff ff 72 	movl   $0x616e7572,-0xc0(%ebp)
f01163f6:	75 6e 61 
f01163f9:	c7 85 44 ff ff ff 6c 	movl   $0x6c6c,-0xbc(%ebp)
f0116400:	6c 00 00 
f0116403:	8d 95 48 ff ff ff    	lea    -0xb8(%ebp),%edx
f0116409:	b9 17 00 00 00       	mov    $0x17,%ecx
f011640e:	b8 00 00 00 00       	mov    $0x0,%eax
f0116413:	89 d7                	mov    %edx,%edi
f0116415:	f3 ab                	rep stos %eax,%es:(%edi)
		execute_command(command4);
f0116417:	83 ec 0c             	sub    $0xc,%esp
f011641a:	8d 85 40 ff ff ff    	lea    -0xc0(%ebp),%eax
f0116420:	50                   	push   %eax
f0116421:	e8 69 a8 fe ff       	call   f0100c8f <execute_command>
f0116426:	83 c4 10             	add    $0x10,%esp
	}
	else
	{
		cprintf("\nCongratulations!! test priority 1 completed successfully.\n");
	}
}
f0116429:	eb 10                	jmp    f011643b <test_priority_normal_and_higher+0x9d1>
		char command4[100] = "runall";
		execute_command(command4);
	}
	else
	{
		cprintf("\nCongratulations!! test priority 1 completed successfully.\n");
f011642b:	83 ec 0c             	sub    $0xc,%esp
f011642e:	68 f8 a3 13 f0       	push   $0xf013a3f8
f0116433:	e8 f5 a7 fe ff       	call   f0100c2d <cprintf>
f0116438:	83 c4 10             	add    $0x10,%esp
	}
}
f011643b:	90                   	nop
f011643c:	8d 65 f4             	lea    -0xc(%ebp),%esp
f011643f:	5b                   	pop    %ebx
f0116440:	5e                   	pop    %esi
f0116441:	5f                   	pop    %edi
f0116442:	5d                   	pop    %ebp
f0116443:	c3                   	ret    

f0116444 <test_priority_normal_and_lower>:

void test_priority_normal_and_lower()
{
f0116444:	55                   	push   %ebp
f0116445:	89 e5                	mov    %esp,%ebp
f0116447:	57                   	push   %edi
f0116448:	56                   	push   %esi
f0116449:	53                   	push   %ebx
f011644a:	81 ec ac 04 00 00    	sub    $0x4ac,%esp
	if(firstTime)
f0116450:	a0 ce 0c 19 f0       	mov    0xf0190cce,%al
f0116455:	84 c0                	test   %al,%al
f0116457:	0f 84 ac 09 00 00    	je     f0116e09 <test_priority_normal_and_lower+0x9c5>
		uint32 fact_WS[30];
		uint32 fact_TimeStamp[30];
		uint32 hello_WS[40];
		uint32 hello_TimeStamp[40];

		firstTime = 0;
f011645d:	c6 05 ce 0c 19 f0 00 	movb   $0x0,0xf0190cce
		char command[100] = "load fos_add 20";
f0116464:	8d 85 f0 fb ff ff    	lea    -0x410(%ebp),%eax
f011646a:	bb 34 a4 13 f0       	mov    $0xf013a434,%ebx
f011646f:	ba 04 00 00 00       	mov    $0x4,%edx
f0116474:	89 c7                	mov    %eax,%edi
f0116476:	89 de                	mov    %ebx,%esi
f0116478:	89 d1                	mov    %edx,%ecx
f011647a:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
f011647c:	8d 95 00 fc ff ff    	lea    -0x400(%ebp),%edx
f0116482:	b9 15 00 00 00       	mov    $0x15,%ecx
f0116487:	b8 00 00 00 00       	mov    $0x0,%eax
f011648c:	89 d7                	mov    %edx,%edi
f011648e:	f3 ab                	rep stos %eax,%es:(%edi)
		execute_command(command);
f0116490:	83 ec 0c             	sub    $0xc,%esp
f0116493:	8d 85 f0 fb ff ff    	lea    -0x410(%ebp),%eax
f0116499:	50                   	push   %eax
f011649a:	e8 f0 a7 fe ff       	call   f0100c8f <execute_command>
f011649f:	83 c4 10             	add    $0x10,%esp
		char command2[100] = "load fact 30";
f01164a2:	8d 85 54 fc ff ff    	lea    -0x3ac(%ebp),%eax
f01164a8:	bb f0 a6 13 f0       	mov    $0xf013a6f0,%ebx
f01164ad:	ba 0d 00 00 00       	mov    $0xd,%edx
f01164b2:	89 c7                	mov    %eax,%edi
f01164b4:	89 de                	mov    %ebx,%esi
f01164b6:	89 d1                	mov    %edx,%ecx
f01164b8:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f01164ba:	8d 95 61 fc ff ff    	lea    -0x39f(%ebp),%edx
f01164c0:	b9 57 00 00 00       	mov    $0x57,%ecx
f01164c5:	b0 00                	mov    $0x0,%al
f01164c7:	89 d7                	mov    %edx,%edi
f01164c9:	f3 aa                	rep stos %al,%es:(%edi)
		execute_command(command2);
f01164cb:	83 ec 0c             	sub    $0xc,%esp
f01164ce:	8d 85 54 fc ff ff    	lea    -0x3ac(%ebp),%eax
f01164d4:	50                   	push   %eax
f01164d5:	e8 b5 a7 fe ff       	call   f0100c8f <execute_command>
f01164da:	83 c4 10             	add    $0x10,%esp
		char command3[100] = "load fos_helloWorld 40";
f01164dd:	8d 85 b8 fc ff ff    	lea    -0x348(%ebp),%eax
f01164e3:	bb 54 a7 13 f0       	mov    $0xf013a754,%ebx
f01164e8:	ba 17 00 00 00       	mov    $0x17,%edx
f01164ed:	89 c7                	mov    %eax,%edi
f01164ef:	89 de                	mov    %ebx,%esi
f01164f1:	89 d1                	mov    %edx,%ecx
f01164f3:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f01164f5:	8d 95 cf fc ff ff    	lea    -0x331(%ebp),%edx
f01164fb:	b9 4d 00 00 00       	mov    $0x4d,%ecx
f0116500:	b0 00                	mov    $0x0,%al
f0116502:	89 d7                	mov    %edx,%edi
f0116504:	f3 aa                	rep stos %al,%es:(%edi)
		execute_command(command3);
f0116506:	83 ec 0c             	sub    $0xc,%esp
f0116509:	8d 85 b8 fc ff ff    	lea    -0x348(%ebp),%eax
f011650f:	50                   	push   %eax
f0116510:	e8 7a a7 fe ff       	call   f0100c8f <execute_command>
f0116515:	83 c4 10             	add    $0x10,%esp

		struct Env * addEnv;
		struct Env * factEnv;
		struct Env * helloEnv;
		envid2env(4096, &addEnv, 0);
f0116518:	83 ec 04             	sub    $0x4,%esp
f011651b:	6a 00                	push   $0x0
f011651d:	8d 45 b8             	lea    -0x48(%ebp),%eax
f0116520:	50                   	push   %eax
f0116521:	68 00 10 00 00       	push   $0x1000
f0116526:	e8 a2 2e ff ff       	call   f01093cd <envid2env>
f011652b:	83 c4 10             	add    $0x10,%esp
		envid2env(4097, &factEnv, 0);
f011652e:	83 ec 04             	sub    $0x4,%esp
f0116531:	6a 00                	push   $0x0
f0116533:	8d 45 b4             	lea    -0x4c(%ebp),%eax
f0116536:	50                   	push   %eax
f0116537:	68 01 10 00 00       	push   $0x1001
f011653c:	e8 8c 2e ff ff       	call   f01093cd <envid2env>
f0116541:	83 c4 10             	add    $0x10,%esp
		envid2env(4098, &helloEnv, 0);
f0116544:	83 ec 04             	sub    $0x4,%esp
f0116547:	6a 00                	push   $0x0
f0116549:	8d 45 b0             	lea    -0x50(%ebp),%eax
f011654c:	50                   	push   %eax
f011654d:	68 02 10 00 00       	push   $0x1002
f0116552:	e8 76 2e ff ff       	call   f01093cd <envid2env>
f0116557:	83 c4 10             	add    $0x10,%esp

		if(addEnv == NULL || factEnv == NULL || helloEnv == NULL)
f011655a:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011655d:	85 c0                	test   %eax,%eax
f011655f:	74 0e                	je     f011656f <test_priority_normal_and_lower+0x12b>
f0116561:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0116564:	85 c0                	test   %eax,%eax
f0116566:	74 07                	je     f011656f <test_priority_normal_and_lower+0x12b>
f0116568:	8b 45 b0             	mov    -0x50(%ebp),%eax
f011656b:	85 c0                	test   %eax,%eax
f011656d:	75 17                	jne    f0116586 <test_priority_normal_and_lower+0x142>
			panic("Loading programs failed\n");
f011656f:	83 ec 04             	sub    $0x4,%esp
f0116572:	68 d4 a1 13 f0       	push   $0xf013a1d4
f0116577:	68 eb 00 00 00       	push   $0xeb
f011657c:	68 ed a1 13 f0       	push   $0xf013a1ed
f0116581:	e8 20 9c fe ff       	call   f01001a6 <_panic>

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 30 || helloEnv->page_WS_max_size != 40)
f0116586:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0116589:	8b 40 74             	mov    0x74(%eax),%eax
f011658c:	83 f8 14             	cmp    $0x14,%eax
f011658f:	75 16                	jne    f01165a7 <test_priority_normal_and_lower+0x163>
f0116591:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0116594:	8b 40 74             	mov    0x74(%eax),%eax
f0116597:	83 f8 1e             	cmp    $0x1e,%eax
f011659a:	75 0b                	jne    f01165a7 <test_priority_normal_and_lower+0x163>
f011659c:	8b 45 b0             	mov    -0x50(%ebp),%eax
f011659f:	8b 40 74             	mov    0x74(%eax),%eax
f01165a2:	83 f8 28             	cmp    $0x28,%eax
f01165a5:	74 17                	je     f01165be <test_priority_normal_and_lower+0x17a>
			panic("The programs should be initially loaded with the given working set size\n");
f01165a7:	83 ec 04             	sub    $0x4,%esp
f01165aa:	68 08 a2 13 f0       	push   $0xf013a208
f01165af:	68 ee 00 00 00       	push   $0xee
f01165b4:	68 ed a1 13 f0       	push   $0xf013a1ed
f01165b9:	e8 e8 9b fe ff       	call   f01001a6 <_panic>

		for(int i = 0; i < 20; i++)
f01165be:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
f01165c5:	eb 43                	jmp    f011660a <test_priority_normal_and_lower+0x1c6>
		{
			add_WS[i] = addEnv->ptr_pageWorkingSet[i].virtual_address;
f01165c7:	8b 4d b8             	mov    -0x48(%ebp),%ecx
f01165ca:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f01165cd:	89 d0                	mov    %edx,%eax
f01165cf:	01 c0                	add    %eax,%eax
f01165d1:	01 d0                	add    %edx,%eax
f01165d3:	c1 e0 03             	shl    $0x3,%eax
f01165d6:	01 c8                	add    %ecx,%eax
f01165d8:	83 c0 78             	add    $0x78,%eax
f01165db:	8b 10                	mov    (%eax),%edx
f01165dd:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01165e0:	89 94 85 50 fb ff ff 	mov    %edx,-0x4b0(%ebp,%eax,4)
			add_TimeStamp[i] = addEnv->ptr_pageWorkingSet[i].time_stamp;
f01165e7:	8b 4d b8             	mov    -0x48(%ebp),%ecx
f01165ea:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f01165ed:	89 d0                	mov    %edx,%eax
f01165ef:	01 c0                	add    %eax,%eax
f01165f1:	01 d0                	add    %edx,%eax
f01165f3:	c1 e0 03             	shl    $0x3,%eax
f01165f6:	01 c8                	add    %ecx,%eax
f01165f8:	83 e8 80             	sub    $0xffffff80,%eax
f01165fb:	8b 10                	mov    (%eax),%edx
f01165fd:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0116600:	89 94 85 a0 fb ff ff 	mov    %edx,-0x460(%ebp,%eax,4)
			panic("Loading programs failed\n");

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 30 || helloEnv->page_WS_max_size != 40)
			panic("The programs should be initially loaded with the given working set size\n");

		for(int i = 0; i < 20; i++)
f0116607:	ff 45 e4             	incl   -0x1c(%ebp)
f011660a:	83 7d e4 13          	cmpl   $0x13,-0x1c(%ebp)
f011660e:	7e b7                	jle    f01165c7 <test_priority_normal_and_lower+0x183>
		{
			add_WS[i] = addEnv->ptr_pageWorkingSet[i].virtual_address;
			add_TimeStamp[i] = addEnv->ptr_pageWorkingSet[i].time_stamp;
		}

		for(int i = 0; i < 30; i++)
f0116610:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
f0116617:	eb 43                	jmp    f011665c <test_priority_normal_and_lower+0x218>
		{
			fact_WS[i] = factEnv->ptr_pageWorkingSet[i].virtual_address;
f0116619:	8b 4d b4             	mov    -0x4c(%ebp),%ecx
f011661c:	8b 55 e0             	mov    -0x20(%ebp),%edx
f011661f:	89 d0                	mov    %edx,%eax
f0116621:	01 c0                	add    %eax,%eax
f0116623:	01 d0                	add    %edx,%eax
f0116625:	c1 e0 03             	shl    $0x3,%eax
f0116628:	01 c8                	add    %ecx,%eax
f011662a:	83 c0 78             	add    $0x78,%eax
f011662d:	8b 10                	mov    (%eax),%edx
f011662f:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0116632:	89 94 85 80 fd ff ff 	mov    %edx,-0x280(%ebp,%eax,4)
			fact_TimeStamp[i] = factEnv->ptr_pageWorkingSet[i].time_stamp;
f0116639:	8b 4d b4             	mov    -0x4c(%ebp),%ecx
f011663c:	8b 55 e0             	mov    -0x20(%ebp),%edx
f011663f:	89 d0                	mov    %edx,%eax
f0116641:	01 c0                	add    %eax,%eax
f0116643:	01 d0                	add    %edx,%eax
f0116645:	c1 e0 03             	shl    $0x3,%eax
f0116648:	01 c8                	add    %ecx,%eax
f011664a:	83 e8 80             	sub    $0xffffff80,%eax
f011664d:	8b 10                	mov    (%eax),%edx
f011664f:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0116652:	89 94 85 f8 fd ff ff 	mov    %edx,-0x208(%ebp,%eax,4)
		{
			add_WS[i] = addEnv->ptr_pageWorkingSet[i].virtual_address;
			add_TimeStamp[i] = addEnv->ptr_pageWorkingSet[i].time_stamp;
		}

		for(int i = 0; i < 30; i++)
f0116659:	ff 45 e0             	incl   -0x20(%ebp)
f011665c:	83 7d e0 1d          	cmpl   $0x1d,-0x20(%ebp)
f0116660:	7e b7                	jle    f0116619 <test_priority_normal_and_lower+0x1d5>
		{
			fact_WS[i] = factEnv->ptr_pageWorkingSet[i].virtual_address;
			fact_TimeStamp[i] = factEnv->ptr_pageWorkingSet[i].time_stamp;
		}

		for(int i = 0; i < 40; i++)
f0116662:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
f0116669:	eb 43                	jmp    f01166ae <test_priority_normal_and_lower+0x26a>
		{
			hello_WS[i] = helloEnv->ptr_pageWorkingSet[i].virtual_address;
f011666b:	8b 4d b0             	mov    -0x50(%ebp),%ecx
f011666e:	8b 55 dc             	mov    -0x24(%ebp),%edx
f0116671:	89 d0                	mov    %edx,%eax
f0116673:	01 c0                	add    %eax,%eax
f0116675:	01 d0                	add    %edx,%eax
f0116677:	c1 e0 03             	shl    $0x3,%eax
f011667a:	01 c8                	add    %ecx,%eax
f011667c:	83 c0 78             	add    $0x78,%eax
f011667f:	8b 10                	mov    (%eax),%edx
f0116681:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0116684:	89 94 85 70 fe ff ff 	mov    %edx,-0x190(%ebp,%eax,4)
			hello_TimeStamp[i] = helloEnv->ptr_pageWorkingSet[i].time_stamp;
f011668b:	8b 4d b0             	mov    -0x50(%ebp),%ecx
f011668e:	8b 55 dc             	mov    -0x24(%ebp),%edx
f0116691:	89 d0                	mov    %edx,%eax
f0116693:	01 c0                	add    %eax,%eax
f0116695:	01 d0                	add    %edx,%eax
f0116697:	c1 e0 03             	shl    $0x3,%eax
f011669a:	01 c8                	add    %ecx,%eax
f011669c:	83 e8 80             	sub    $0xffffff80,%eax
f011669f:	8b 10                	mov    (%eax),%edx
f01166a1:	8b 45 dc             	mov    -0x24(%ebp),%eax
f01166a4:	89 94 85 10 ff ff ff 	mov    %edx,-0xf0(%ebp,%eax,4)
		{
			fact_WS[i] = factEnv->ptr_pageWorkingSet[i].virtual_address;
			fact_TimeStamp[i] = factEnv->ptr_pageWorkingSet[i].time_stamp;
		}

		for(int i = 0; i < 40; i++)
f01166ab:	ff 45 dc             	incl   -0x24(%ebp)
f01166ae:	83 7d dc 27          	cmpl   $0x27,-0x24(%ebp)
f01166b2:	7e b7                	jle    f011666b <test_priority_normal_and_lower+0x227>
		{
			hello_WS[i] = helloEnv->ptr_pageWorkingSet[i].virtual_address;
			hello_TimeStamp[i] = helloEnv->ptr_pageWorkingSet[i].time_stamp;
		}

		int freeFrames = sys_calculate_free_frames();
f01166b4:	e8 05 5d ff ff       	call   f010c3be <sys_calculate_free_frames>
f01166b9:	89 45 c0             	mov    %eax,-0x40(%ebp)
		int freeDiskFrames = pf_calculate_free_frames() ;
f01166bc:	e8 cb d5 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f01166c1:	89 45 bc             	mov    %eax,-0x44(%ebp)

		// Set Priority To Normal // Should change nothing
		set_program_priority(addEnv, 3);
f01166c4:	8b 45 b8             	mov    -0x48(%ebp),%eax
f01166c7:	83 ec 08             	sub    $0x8,%esp
f01166ca:	6a 03                	push   $0x3
f01166cc:	50                   	push   %eax
f01166cd:	e8 e2 41 ff ff       	call   f010a8b4 <set_program_priority>
f01166d2:	83 c4 10             	add    $0x10,%esp
		set_program_priority(factEnv, 3);
f01166d5:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01166d8:	83 ec 08             	sub    $0x8,%esp
f01166db:	6a 03                	push   $0x3
f01166dd:	50                   	push   %eax
f01166de:	e8 d1 41 ff ff       	call   f010a8b4 <set_program_priority>
f01166e3:	83 c4 10             	add    $0x10,%esp
		set_program_priority(helloEnv, 3);
f01166e6:	8b 45 b0             	mov    -0x50(%ebp),%eax
f01166e9:	83 ec 08             	sub    $0x8,%esp
f01166ec:	6a 03                	push   $0x3
f01166ee:	50                   	push   %eax
f01166ef:	e8 c0 41 ff ff       	call   f010a8b4 <set_program_priority>
f01166f4:	83 c4 10             	add    $0x10,%esp

		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Old working set should be removed properly\n");
f01166f7:	e8 90 d5 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f01166fc:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f01166ff:	74 17                	je     f0116718 <test_priority_normal_and_lower+0x2d4>
f0116701:	83 ec 04             	sub    $0x4,%esp
f0116704:	68 54 a2 13 f0       	push   $0xf013a254
f0116709:	68 0a 01 00 00       	push   $0x10a
f011670e:	68 ed a1 13 f0       	push   $0xf013a1ed
f0116713:	e8 8e 9a fe ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Old working set should be removed properly\n");
f0116718:	e8 a1 5c ff ff       	call   f010c3be <sys_calculate_free_frames>
f011671d:	3b 45 c0             	cmp    -0x40(%ebp),%eax
f0116720:	74 17                	je     f0116739 <test_priority_normal_and_lower+0x2f5>
f0116722:	83 ec 04             	sub    $0x4,%esp
f0116725:	68 54 a2 13 f0       	push   $0xf013a254
f011672a:	68 0b 01 00 00       	push   $0x10b
f011672f:	68 ed a1 13 f0       	push   $0xf013a1ed
f0116734:	e8 6d 9a fe ff       	call   f01001a6 <_panic>

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 30 || helloEnv->page_WS_max_size != 40)
f0116739:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011673c:	8b 40 74             	mov    0x74(%eax),%eax
f011673f:	83 f8 14             	cmp    $0x14,%eax
f0116742:	75 16                	jne    f011675a <test_priority_normal_and_lower+0x316>
f0116744:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0116747:	8b 40 74             	mov    0x74(%eax),%eax
f011674a:	83 f8 1e             	cmp    $0x1e,%eax
f011674d:	75 0b                	jne    f011675a <test_priority_normal_and_lower+0x316>
f011674f:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0116752:	8b 40 74             	mov    0x74(%eax),%eax
f0116755:	83 f8 28             	cmp    $0x28,%eax
f0116758:	74 17                	je     f0116771 <test_priority_normal_and_lower+0x32d>
			panic("The programs' working set size should not change after setting priority to normal\n");
f011675a:	83 ec 04             	sub    $0x4,%esp
f011675d:	68 80 a2 13 f0       	push   $0xf013a280
f0116762:	68 0e 01 00 00       	push   $0x10e
f0116767:	68 ed a1 13 f0       	push   $0xf013a1ed
f011676c:	e8 35 9a fe ff       	call   f01001a6 <_panic>

		freeFrames = sys_calculate_free_frames();
f0116771:	e8 48 5c ff ff       	call   f010c3be <sys_calculate_free_frames>
f0116776:	89 45 c0             	mov    %eax,-0x40(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0116779:	e8 0e d5 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011677e:	89 45 bc             	mov    %eax,-0x44(%ebp)

		// Set Priority To Below Normal // Should change only if half is free
		set_program_priority(addEnv, 2);
f0116781:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0116784:	83 ec 08             	sub    $0x8,%esp
f0116787:	6a 02                	push   $0x2
f0116789:	50                   	push   %eax
f011678a:	e8 25 41 ff ff       	call   f010a8b4 <set_program_priority>
f011678f:	83 c4 10             	add    $0x10,%esp
		set_program_priority(factEnv, 2);
f0116792:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0116795:	83 ec 08             	sub    $0x8,%esp
f0116798:	6a 02                	push   $0x2
f011679a:	50                   	push   %eax
f011679b:	e8 14 41 ff ff       	call   f010a8b4 <set_program_priority>
f01167a0:	83 c4 10             	add    $0x10,%esp
		set_program_priority(helloEnv, 2);
f01167a3:	8b 45 b0             	mov    -0x50(%ebp),%eax
f01167a6:	83 ec 08             	sub    $0x8,%esp
f01167a9:	6a 02                	push   $0x2
f01167ab:	50                   	push   %eax
f01167ac:	e8 03 41 ff ff       	call   f010a8b4 <set_program_priority>
f01167b1:	83 c4 10             	add    $0x10,%esp

		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Old working set should be removed properly\n");
f01167b4:	e8 d3 d4 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f01167b9:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f01167bc:	74 17                	je     f01167d5 <test_priority_normal_and_lower+0x391>
f01167be:	83 ec 04             	sub    $0x4,%esp
f01167c1:	68 54 a2 13 f0       	push   $0xf013a254
f01167c6:	68 18 01 00 00       	push   $0x118
f01167cb:	68 ed a1 13 f0       	push   $0xf013a1ed
f01167d0:	e8 d1 99 fe ff       	call   f01001a6 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 0) panic("Old working set should be removed properly%x\n", (freeFrames - sys_calculate_free_frames()));
f01167d5:	e8 e4 5b ff ff       	call   f010c3be <sys_calculate_free_frames>
f01167da:	3b 45 c0             	cmp    -0x40(%ebp),%eax
f01167dd:	74 21                	je     f0116800 <test_priority_normal_and_lower+0x3bc>
f01167df:	e8 da 5b ff ff       	call   f010c3be <sys_calculate_free_frames>
f01167e4:	8b 55 c0             	mov    -0x40(%ebp),%edx
f01167e7:	29 c2                	sub    %eax,%edx
f01167e9:	89 d0                	mov    %edx,%eax
f01167eb:	50                   	push   %eax
f01167ec:	68 d4 a2 13 f0       	push   $0xf013a2d4
f01167f1:	68 19 01 00 00       	push   $0x119
f01167f6:	68 ed a1 13 f0       	push   $0xf013a1ed
f01167fb:	e8 a6 99 fe ff       	call   f01001a6 <_panic>

		if(addEnv->page_WS_max_size != 10 || factEnv->page_WS_max_size != 15 || helloEnv->page_WS_max_size != 20)
f0116800:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0116803:	8b 40 74             	mov    0x74(%eax),%eax
f0116806:	83 f8 0a             	cmp    $0xa,%eax
f0116809:	75 16                	jne    f0116821 <test_priority_normal_and_lower+0x3dd>
f011680b:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f011680e:	8b 40 74             	mov    0x74(%eax),%eax
f0116811:	83 f8 0f             	cmp    $0xf,%eax
f0116814:	75 0b                	jne    f0116821 <test_priority_normal_and_lower+0x3dd>
f0116816:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0116819:	8b 40 74             	mov    0x74(%eax),%eax
f011681c:	83 f8 14             	cmp    $0x14,%eax
f011681f:	74 17                	je     f0116838 <test_priority_normal_and_lower+0x3f4>
			panic("The programs' working set size should be doubled only if it is full\n");
f0116821:	83 ec 04             	sub    $0x4,%esp
f0116824:	68 04 a3 13 f0       	push   $0xf013a304
f0116829:	68 1c 01 00 00       	push   $0x11c
f011682e:	68 ed a1 13 f0       	push   $0xf013a1ed
f0116833:	e8 6e 99 fe ff       	call   f01001a6 <_panic>

		freeFrames = sys_calculate_free_frames();
f0116838:	e8 81 5b ff ff       	call   f010c3be <sys_calculate_free_frames>
f011683d:	89 45 c0             	mov    %eax,-0x40(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0116840:	e8 47 d4 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0116845:	89 45 bc             	mov    %eax,-0x44(%ebp)

		// Set Priority To Below Normal // Should change only if half is free
		set_program_priority(addEnv, 2);
f0116848:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011684b:	83 ec 08             	sub    $0x8,%esp
f011684e:	6a 02                	push   $0x2
f0116850:	50                   	push   %eax
f0116851:	e8 5e 40 ff ff       	call   f010a8b4 <set_program_priority>
f0116856:	83 c4 10             	add    $0x10,%esp
		set_program_priority(factEnv, 2);
f0116859:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f011685c:	83 ec 08             	sub    $0x8,%esp
f011685f:	6a 02                	push   $0x2
f0116861:	50                   	push   %eax
f0116862:	e8 4d 40 ff ff       	call   f010a8b4 <set_program_priority>
f0116867:	83 c4 10             	add    $0x10,%esp
		set_program_priority(helloEnv, 2);
f011686a:	8b 45 b0             	mov    -0x50(%ebp),%eax
f011686d:	83 ec 08             	sub    $0x8,%esp
f0116870:	6a 02                	push   $0x2
f0116872:	50                   	push   %eax
f0116873:	e8 3c 40 ff ff       	call   f010a8b4 <set_program_priority>
f0116878:	83 c4 10             	add    $0x10,%esp

		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Old working set should be removed properly\n");
f011687b:	e8 0c d4 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0116880:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f0116883:	74 17                	je     f011689c <test_priority_normal_and_lower+0x458>
f0116885:	83 ec 04             	sub    $0x4,%esp
f0116888:	68 54 a2 13 f0       	push   $0xf013a254
f011688d:	68 26 01 00 00       	push   $0x126
f0116892:	68 ed a1 13 f0       	push   $0xf013a1ed
f0116897:	e8 0a 99 fe ff       	call   f01001a6 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 0) panic("Old working set should be removed properly%x\n", (freeFrames - sys_calculate_free_frames()));
f011689c:	e8 1d 5b ff ff       	call   f010c3be <sys_calculate_free_frames>
f01168a1:	3b 45 c0             	cmp    -0x40(%ebp),%eax
f01168a4:	74 21                	je     f01168c7 <test_priority_normal_and_lower+0x483>
f01168a6:	e8 13 5b ff ff       	call   f010c3be <sys_calculate_free_frames>
f01168ab:	8b 55 c0             	mov    -0x40(%ebp),%edx
f01168ae:	29 c2                	sub    %eax,%edx
f01168b0:	89 d0                	mov    %edx,%eax
f01168b2:	50                   	push   %eax
f01168b3:	68 d4 a2 13 f0       	push   $0xf013a2d4
f01168b8:	68 27 01 00 00       	push   $0x127
f01168bd:	68 ed a1 13 f0       	push   $0xf013a1ed
f01168c2:	e8 df 98 fe ff       	call   f01001a6 <_panic>

		if(addEnv->page_WS_max_size != 10 || factEnv->page_WS_max_size != 15 || helloEnv->page_WS_max_size != 10)
f01168c7:	8b 45 b8             	mov    -0x48(%ebp),%eax
f01168ca:	8b 40 74             	mov    0x74(%eax),%eax
f01168cd:	83 f8 0a             	cmp    $0xa,%eax
f01168d0:	75 16                	jne    f01168e8 <test_priority_normal_and_lower+0x4a4>
f01168d2:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01168d5:	8b 40 74             	mov    0x74(%eax),%eax
f01168d8:	83 f8 0f             	cmp    $0xf,%eax
f01168db:	75 0b                	jne    f01168e8 <test_priority_normal_and_lower+0x4a4>
f01168dd:	8b 45 b0             	mov    -0x50(%ebp),%eax
f01168e0:	8b 40 74             	mov    0x74(%eax),%eax
f01168e3:	83 f8 0a             	cmp    $0xa,%eax
f01168e6:	74 17                	je     f01168ff <test_priority_normal_and_lower+0x4bb>
			panic("The programs' working set size should be doubled only if it is full\n");
f01168e8:	83 ec 04             	sub    $0x4,%esp
f01168eb:	68 04 a3 13 f0       	push   $0xf013a304
f01168f0:	68 2a 01 00 00       	push   $0x12a
f01168f5:	68 ed a1 13 f0       	push   $0xf013a1ed
f01168fa:	e8 a7 98 fe ff       	call   f01001a6 <_panic>

		for(int i = 0; i < 10; i++)
f01168ff:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
f0116906:	eb 79                	jmp    f0116981 <test_priority_normal_and_lower+0x53d>
		{
			if(add_WS[i] != addEnv->ptr_pageWorkingSet[i].virtual_address)
f0116908:	8b 45 d8             	mov    -0x28(%ebp),%eax
f011690b:	8b 8c 85 50 fb ff ff 	mov    -0x4b0(%ebp,%eax,4),%ecx
f0116912:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f0116915:	8b 55 d8             	mov    -0x28(%ebp),%edx
f0116918:	89 d0                	mov    %edx,%eax
f011691a:	01 c0                	add    %eax,%eax
f011691c:	01 d0                	add    %edx,%eax
f011691e:	c1 e0 03             	shl    $0x3,%eax
f0116921:	01 d8                	add    %ebx,%eax
f0116923:	83 c0 78             	add    $0x78,%eax
f0116926:	8b 00                	mov    (%eax),%eax
f0116928:	39 c1                	cmp    %eax,%ecx
f011692a:	74 17                	je     f0116943 <test_priority_normal_and_lower+0x4ff>
				panic("Working set should be moved properly to the new one");
f011692c:	83 ec 04             	sub    $0x4,%esp
f011692f:	68 c4 a3 13 f0       	push   $0xf013a3c4
f0116934:	68 2f 01 00 00       	push   $0x12f
f0116939:	68 ed a1 13 f0       	push   $0xf013a1ed
f011693e:	e8 63 98 fe ff       	call   f01001a6 <_panic>

			if(add_TimeStamp[i] != addEnv->ptr_pageWorkingSet[i].time_stamp)
f0116943:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0116946:	8b 8c 85 a0 fb ff ff 	mov    -0x460(%ebp,%eax,4),%ecx
f011694d:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f0116950:	8b 55 d8             	mov    -0x28(%ebp),%edx
f0116953:	89 d0                	mov    %edx,%eax
f0116955:	01 c0                	add    %eax,%eax
f0116957:	01 d0                	add    %edx,%eax
f0116959:	c1 e0 03             	shl    $0x3,%eax
f011695c:	01 d8                	add    %ebx,%eax
f011695e:	83 e8 80             	sub    $0xffffff80,%eax
f0116961:	8b 00                	mov    (%eax),%eax
f0116963:	39 c1                	cmp    %eax,%ecx
f0116965:	74 17                	je     f011697e <test_priority_normal_and_lower+0x53a>
				panic("Working set should be moved properly to the new one");
f0116967:	83 ec 04             	sub    $0x4,%esp
f011696a:	68 c4 a3 13 f0       	push   $0xf013a3c4
f011696f:	68 32 01 00 00       	push   $0x132
f0116974:	68 ed a1 13 f0       	push   $0xf013a1ed
f0116979:	e8 28 98 fe ff       	call   f01001a6 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 0) panic("Old working set should be removed properly%x\n", (freeFrames - sys_calculate_free_frames()));

		if(addEnv->page_WS_max_size != 10 || factEnv->page_WS_max_size != 15 || helloEnv->page_WS_max_size != 10)
			panic("The programs' working set size should be doubled only if it is full\n");

		for(int i = 0; i < 10; i++)
f011697e:	ff 45 d8             	incl   -0x28(%ebp)
f0116981:	83 7d d8 09          	cmpl   $0x9,-0x28(%ebp)
f0116985:	7e 81                	jle    f0116908 <test_priority_normal_and_lower+0x4c4>

			if(add_TimeStamp[i] != addEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one");
		}

		for(int i = 0; i < 15; i++)
f0116987:	c7 45 d4 00 00 00 00 	movl   $0x0,-0x2c(%ebp)
f011698e:	eb 79                	jmp    f0116a09 <test_priority_normal_and_lower+0x5c5>
		{
			if(fact_WS[i] != factEnv->ptr_pageWorkingSet[i].virtual_address)
f0116990:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0116993:	8b 8c 85 80 fd ff ff 	mov    -0x280(%ebp,%eax,4),%ecx
f011699a:	8b 5d b4             	mov    -0x4c(%ebp),%ebx
f011699d:	8b 55 d4             	mov    -0x2c(%ebp),%edx
f01169a0:	89 d0                	mov    %edx,%eax
f01169a2:	01 c0                	add    %eax,%eax
f01169a4:	01 d0                	add    %edx,%eax
f01169a6:	c1 e0 03             	shl    $0x3,%eax
f01169a9:	01 d8                	add    %ebx,%eax
f01169ab:	83 c0 78             	add    $0x78,%eax
f01169ae:	8b 00                	mov    (%eax),%eax
f01169b0:	39 c1                	cmp    %eax,%ecx
f01169b2:	74 17                	je     f01169cb <test_priority_normal_and_lower+0x587>
				panic("Working set should be moved properly to the new one");
f01169b4:	83 ec 04             	sub    $0x4,%esp
f01169b7:	68 c4 a3 13 f0       	push   $0xf013a3c4
f01169bc:	68 38 01 00 00       	push   $0x138
f01169c1:	68 ed a1 13 f0       	push   $0xf013a1ed
f01169c6:	e8 db 97 fe ff       	call   f01001a6 <_panic>

			if(fact_TimeStamp[i] != factEnv->ptr_pageWorkingSet[i].time_stamp)
f01169cb:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f01169ce:	8b 8c 85 f8 fd ff ff 	mov    -0x208(%ebp,%eax,4),%ecx
f01169d5:	8b 5d b4             	mov    -0x4c(%ebp),%ebx
f01169d8:	8b 55 d4             	mov    -0x2c(%ebp),%edx
f01169db:	89 d0                	mov    %edx,%eax
f01169dd:	01 c0                	add    %eax,%eax
f01169df:	01 d0                	add    %edx,%eax
f01169e1:	c1 e0 03             	shl    $0x3,%eax
f01169e4:	01 d8                	add    %ebx,%eax
f01169e6:	83 e8 80             	sub    $0xffffff80,%eax
f01169e9:	8b 00                	mov    (%eax),%eax
f01169eb:	39 c1                	cmp    %eax,%ecx
f01169ed:	74 17                	je     f0116a06 <test_priority_normal_and_lower+0x5c2>
				panic("Working set should be moved properly to the new one");
f01169ef:	83 ec 04             	sub    $0x4,%esp
f01169f2:	68 c4 a3 13 f0       	push   $0xf013a3c4
f01169f7:	68 3b 01 00 00       	push   $0x13b
f01169fc:	68 ed a1 13 f0       	push   $0xf013a1ed
f0116a01:	e8 a0 97 fe ff       	call   f01001a6 <_panic>

			if(add_TimeStamp[i] != addEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one");
		}

		for(int i = 0; i < 15; i++)
f0116a06:	ff 45 d4             	incl   -0x2c(%ebp)
f0116a09:	83 7d d4 0e          	cmpl   $0xe,-0x2c(%ebp)
f0116a0d:	7e 81                	jle    f0116990 <test_priority_normal_and_lower+0x54c>

			if(fact_TimeStamp[i] != factEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one");
		}

		for(int i = 0; i < 10; i++)
f0116a0f:	c7 45 d0 00 00 00 00 	movl   $0x0,-0x30(%ebp)
f0116a16:	eb 79                	jmp    f0116a91 <test_priority_normal_and_lower+0x64d>
		{
			if(hello_WS[i] != helloEnv->ptr_pageWorkingSet[i].virtual_address)
f0116a18:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0116a1b:	8b 8c 85 70 fe ff ff 	mov    -0x190(%ebp,%eax,4),%ecx
f0116a22:	8b 5d b0             	mov    -0x50(%ebp),%ebx
f0116a25:	8b 55 d0             	mov    -0x30(%ebp),%edx
f0116a28:	89 d0                	mov    %edx,%eax
f0116a2a:	01 c0                	add    %eax,%eax
f0116a2c:	01 d0                	add    %edx,%eax
f0116a2e:	c1 e0 03             	shl    $0x3,%eax
f0116a31:	01 d8                	add    %ebx,%eax
f0116a33:	83 c0 78             	add    $0x78,%eax
f0116a36:	8b 00                	mov    (%eax),%eax
f0116a38:	39 c1                	cmp    %eax,%ecx
f0116a3a:	74 17                	je     f0116a53 <test_priority_normal_and_lower+0x60f>
				panic("Working set should be moved properly to the new one");
f0116a3c:	83 ec 04             	sub    $0x4,%esp
f0116a3f:	68 c4 a3 13 f0       	push   $0xf013a3c4
f0116a44:	68 41 01 00 00       	push   $0x141
f0116a49:	68 ed a1 13 f0       	push   $0xf013a1ed
f0116a4e:	e8 53 97 fe ff       	call   f01001a6 <_panic>

			if(hello_TimeStamp[i] != helloEnv->ptr_pageWorkingSet[i].time_stamp)
f0116a53:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0116a56:	8b 8c 85 10 ff ff ff 	mov    -0xf0(%ebp,%eax,4),%ecx
f0116a5d:	8b 5d b0             	mov    -0x50(%ebp),%ebx
f0116a60:	8b 55 d0             	mov    -0x30(%ebp),%edx
f0116a63:	89 d0                	mov    %edx,%eax
f0116a65:	01 c0                	add    %eax,%eax
f0116a67:	01 d0                	add    %edx,%eax
f0116a69:	c1 e0 03             	shl    $0x3,%eax
f0116a6c:	01 d8                	add    %ebx,%eax
f0116a6e:	83 e8 80             	sub    $0xffffff80,%eax
f0116a71:	8b 00                	mov    (%eax),%eax
f0116a73:	39 c1                	cmp    %eax,%ecx
f0116a75:	74 17                	je     f0116a8e <test_priority_normal_and_lower+0x64a>
				panic("Working set should be moved properly to the new one");
f0116a77:	83 ec 04             	sub    $0x4,%esp
f0116a7a:	68 c4 a3 13 f0       	push   $0xf013a3c4
f0116a7f:	68 44 01 00 00       	push   $0x144
f0116a84:	68 ed a1 13 f0       	push   $0xf013a1ed
f0116a89:	e8 18 97 fe ff       	call   f01001a6 <_panic>

			if(fact_TimeStamp[i] != factEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one");
		}

		for(int i = 0; i < 10; i++)
f0116a8e:	ff 45 d0             	incl   -0x30(%ebp)
f0116a91:	83 7d d0 09          	cmpl   $0x9,-0x30(%ebp)
f0116a95:	7e 81                	jle    f0116a18 <test_priority_normal_and_lower+0x5d4>
			if(hello_TimeStamp[i] != helloEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one");
		}

		// Set priority to low
		freeFrames = sys_calculate_free_frames();
f0116a97:	e8 22 59 ff ff       	call   f010c3be <sys_calculate_free_frames>
f0116a9c:	89 45 c0             	mov    %eax,-0x40(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0116a9f:	e8 e8 d1 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0116aa4:	89 45 bc             	mov    %eax,-0x44(%ebp)
		set_program_priority(addEnv, 1);
f0116aa7:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0116aaa:	83 ec 08             	sub    $0x8,%esp
f0116aad:	6a 01                	push   $0x1
f0116aaf:	50                   	push   %eax
f0116ab0:	e8 ff 3d ff ff       	call   f010a8b4 <set_program_priority>
f0116ab5:	83 c4 10             	add    $0x10,%esp
		set_program_priority(factEnv, 1);
f0116ab8:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0116abb:	83 ec 08             	sub    $0x8,%esp
f0116abe:	6a 01                	push   $0x1
f0116ac0:	50                   	push   %eax
f0116ac1:	e8 ee 3d ff ff       	call   f010a8b4 <set_program_priority>
f0116ac6:	83 c4 10             	add    $0x10,%esp
		set_program_priority(helloEnv, 1);
f0116ac9:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0116acc:	83 ec 08             	sub    $0x8,%esp
f0116acf:	6a 01                	push   $0x1
f0116ad1:	50                   	push   %eax
f0116ad2:	e8 dd 3d ff ff       	call   f010a8b4 <set_program_priority>
f0116ad7:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Old working set should be removed properly\n");
f0116ada:	e8 ad d1 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0116adf:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f0116ae2:	74 17                	je     f0116afb <test_priority_normal_and_lower+0x6b7>
f0116ae4:	83 ec 04             	sub    $0x4,%esp
f0116ae7:	68 54 a2 13 f0       	push   $0xf013a254
f0116aec:	68 4d 01 00 00       	push   $0x14d
f0116af1:	68 ed a1 13 f0       	push   $0xf013a1ed
f0116af6:	e8 ab 96 fe ff       	call   f01001a6 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != (5+3+5)) panic("Old working set and extra pages in WS should be removed properly %d\n");
f0116afb:	e8 be 58 ff ff       	call   f010c3be <sys_calculate_free_frames>
f0116b00:	2b 45 c0             	sub    -0x40(%ebp),%eax
f0116b03:	83 f8 0d             	cmp    $0xd,%eax
f0116b06:	74 17                	je     f0116b1f <test_priority_normal_and_lower+0x6db>
f0116b08:	83 ec 04             	sub    $0x4,%esp
f0116b0b:	68 60 a5 13 f0       	push   $0xf013a560
f0116b10:	68 4e 01 00 00       	push   $0x14e
f0116b15:	68 ed a1 13 f0       	push   $0xf013a1ed
f0116b1a:	e8 87 96 fe ff       	call   f01001a6 <_panic>

		if(addEnv->page_WS_max_size != 5 || factEnv->page_WS_max_size != 7 || helloEnv->page_WS_max_size != 5)
f0116b1f:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0116b22:	8b 40 74             	mov    0x74(%eax),%eax
f0116b25:	83 f8 05             	cmp    $0x5,%eax
f0116b28:	75 16                	jne    f0116b40 <test_priority_normal_and_lower+0x6fc>
f0116b2a:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0116b2d:	8b 40 74             	mov    0x74(%eax),%eax
f0116b30:	83 f8 07             	cmp    $0x7,%eax
f0116b33:	75 0b                	jne    f0116b40 <test_priority_normal_and_lower+0x6fc>
f0116b35:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0116b38:	8b 40 74             	mov    0x74(%eax),%eax
f0116b3b:	83 f8 05             	cmp    $0x5,%eax
f0116b3e:	74 17                	je     f0116b57 <test_priority_normal_and_lower+0x713>
			panic("The programs' working set size should be half\n");
f0116b40:	83 ec 04             	sub    $0x4,%esp
f0116b43:	68 a8 a5 13 f0       	push   $0xf013a5a8
f0116b48:	68 51 01 00 00       	push   $0x151
f0116b4d:	68 ed a1 13 f0       	push   $0xf013a1ed
f0116b52:	e8 4f 96 fe ff       	call   f01001a6 <_panic>


		freeFrames = sys_calculate_free_frames();
f0116b57:	e8 62 58 ff ff       	call   f010c3be <sys_calculate_free_frames>
f0116b5c:	89 45 c0             	mov    %eax,-0x40(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0116b5f:	e8 28 d1 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0116b64:	89 45 bc             	mov    %eax,-0x44(%ebp)
		set_program_priority(addEnv, 1);
f0116b67:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0116b6a:	83 ec 08             	sub    $0x8,%esp
f0116b6d:	6a 01                	push   $0x1
f0116b6f:	50                   	push   %eax
f0116b70:	e8 3f 3d ff ff       	call   f010a8b4 <set_program_priority>
f0116b75:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Old working set should be removed properly\n");
f0116b78:	e8 0f d1 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0116b7d:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f0116b80:	74 17                	je     f0116b99 <test_priority_normal_and_lower+0x755>
f0116b82:	83 ec 04             	sub    $0x4,%esp
f0116b85:	68 54 a2 13 f0       	push   $0xf013a254
f0116b8a:	68 57 01 00 00       	push   $0x157
f0116b8f:	68 ed a1 13 f0       	push   $0xf013a1ed
f0116b94:	e8 0d 96 fe ff       	call   f01001a6 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 3) panic("Old working set should be removed properly\n");
f0116b99:	e8 20 58 ff ff       	call   f010c3be <sys_calculate_free_frames>
f0116b9e:	2b 45 c0             	sub    -0x40(%ebp),%eax
f0116ba1:	83 f8 03             	cmp    $0x3,%eax
f0116ba4:	74 17                	je     f0116bbd <test_priority_normal_and_lower+0x779>
f0116ba6:	83 ec 04             	sub    $0x4,%esp
f0116ba9:	68 54 a2 13 f0       	push   $0xf013a254
f0116bae:	68 58 01 00 00       	push   $0x158
f0116bb3:	68 ed a1 13 f0       	push   $0xf013a1ed
f0116bb8:	e8 e9 95 fe ff       	call   f01001a6 <_panic>

		if(addEnv->page_WS_max_size != 2 || factEnv->page_WS_max_size != 7 || helloEnv->page_WS_max_size != 5)
f0116bbd:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0116bc0:	8b 40 74             	mov    0x74(%eax),%eax
f0116bc3:	83 f8 02             	cmp    $0x2,%eax
f0116bc6:	75 16                	jne    f0116bde <test_priority_normal_and_lower+0x79a>
f0116bc8:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0116bcb:	8b 40 74             	mov    0x74(%eax),%eax
f0116bce:	83 f8 07             	cmp    $0x7,%eax
f0116bd1:	75 0b                	jne    f0116bde <test_priority_normal_and_lower+0x79a>
f0116bd3:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0116bd6:	8b 40 74             	mov    0x74(%eax),%eax
f0116bd9:	83 f8 05             	cmp    $0x5,%eax
f0116bdc:	74 17                	je     f0116bf5 <test_priority_normal_and_lower+0x7b1>
			panic("The programs' working set size should be doubled if full\n");
f0116bde:	83 ec 04             	sub    $0x4,%esp
f0116be1:	68 88 a3 13 f0       	push   $0xf013a388
f0116be6:	68 5b 01 00 00       	push   $0x15b
f0116beb:	68 ed a1 13 f0       	push   $0xf013a1ed
f0116bf0:	e8 b1 95 fe ff       	call   f01001a6 <_panic>

		for(int i = 0; i < 2; i++)
f0116bf5:	c7 45 cc 00 00 00 00 	movl   $0x0,-0x34(%ebp)
f0116bfc:	eb 7f                	jmp    f0116c7d <test_priority_normal_and_lower+0x839>
		{
			if(add_WS[i+8] != addEnv->ptr_pageWorkingSet[i].virtual_address)
f0116bfe:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0116c01:	83 c0 08             	add    $0x8,%eax
f0116c04:	8b 8c 85 50 fb ff ff 	mov    -0x4b0(%ebp,%eax,4),%ecx
f0116c0b:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f0116c0e:	8b 55 cc             	mov    -0x34(%ebp),%edx
f0116c11:	89 d0                	mov    %edx,%eax
f0116c13:	01 c0                	add    %eax,%eax
f0116c15:	01 d0                	add    %edx,%eax
f0116c17:	c1 e0 03             	shl    $0x3,%eax
f0116c1a:	01 d8                	add    %ebx,%eax
f0116c1c:	83 c0 78             	add    $0x78,%eax
f0116c1f:	8b 00                	mov    (%eax),%eax
f0116c21:	39 c1                	cmp    %eax,%ecx
f0116c23:	74 17                	je     f0116c3c <test_priority_normal_and_lower+0x7f8>
				panic("Working set should be moved properly to the new one, removed pages are chosen based on replacement policy");
f0116c25:	83 ec 04             	sub    $0x4,%esp
f0116c28:	68 d8 a5 13 f0       	push   $0xf013a5d8
f0116c2d:	68 60 01 00 00       	push   $0x160
f0116c32:	68 ed a1 13 f0       	push   $0xf013a1ed
f0116c37:	e8 6a 95 fe ff       	call   f01001a6 <_panic>

			if(add_TimeStamp[i+8] != addEnv->ptr_pageWorkingSet[i].time_stamp)
f0116c3c:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0116c3f:	83 c0 08             	add    $0x8,%eax
f0116c42:	8b 8c 85 a0 fb ff ff 	mov    -0x460(%ebp,%eax,4),%ecx
f0116c49:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f0116c4c:	8b 55 cc             	mov    -0x34(%ebp),%edx
f0116c4f:	89 d0                	mov    %edx,%eax
f0116c51:	01 c0                	add    %eax,%eax
f0116c53:	01 d0                	add    %edx,%eax
f0116c55:	c1 e0 03             	shl    $0x3,%eax
f0116c58:	01 d8                	add    %ebx,%eax
f0116c5a:	83 e8 80             	sub    $0xffffff80,%eax
f0116c5d:	8b 00                	mov    (%eax),%eax
f0116c5f:	39 c1                	cmp    %eax,%ecx
f0116c61:	74 17                	je     f0116c7a <test_priority_normal_and_lower+0x836>
				panic("Working set should be moved properly to the new one, removed pages are chosen based on replacement policy");
f0116c63:	83 ec 04             	sub    $0x4,%esp
f0116c66:	68 d8 a5 13 f0       	push   $0xf013a5d8
f0116c6b:	68 63 01 00 00       	push   $0x163
f0116c70:	68 ed a1 13 f0       	push   $0xf013a1ed
f0116c75:	e8 2c 95 fe ff       	call   f01001a6 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 3) panic("Old working set should be removed properly\n");

		if(addEnv->page_WS_max_size != 2 || factEnv->page_WS_max_size != 7 || helloEnv->page_WS_max_size != 5)
			panic("The programs' working set size should be doubled if full\n");

		for(int i = 0; i < 2; i++)
f0116c7a:	ff 45 cc             	incl   -0x34(%ebp)
f0116c7d:	83 7d cc 01          	cmpl   $0x1,-0x34(%ebp)
f0116c81:	0f 8e 77 ff ff ff    	jle    f0116bfe <test_priority_normal_and_lower+0x7ba>

			if(add_TimeStamp[i+8] != addEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one, removed pages are chosen based on replacement policy");
		}

		for(int i = 0; i < 7; i++)
f0116c87:	c7 45 c8 00 00 00 00 	movl   $0x0,-0x38(%ebp)
f0116c8e:	eb 7f                	jmp    f0116d0f <test_priority_normal_and_lower+0x8cb>
		{
			if(fact_WS[i+3] != factEnv->ptr_pageWorkingSet[i].virtual_address)
f0116c90:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0116c93:	83 c0 03             	add    $0x3,%eax
f0116c96:	8b 8c 85 80 fd ff ff 	mov    -0x280(%ebp,%eax,4),%ecx
f0116c9d:	8b 5d b4             	mov    -0x4c(%ebp),%ebx
f0116ca0:	8b 55 c8             	mov    -0x38(%ebp),%edx
f0116ca3:	89 d0                	mov    %edx,%eax
f0116ca5:	01 c0                	add    %eax,%eax
f0116ca7:	01 d0                	add    %edx,%eax
f0116ca9:	c1 e0 03             	shl    $0x3,%eax
f0116cac:	01 d8                	add    %ebx,%eax
f0116cae:	83 c0 78             	add    $0x78,%eax
f0116cb1:	8b 00                	mov    (%eax),%eax
f0116cb3:	39 c1                	cmp    %eax,%ecx
f0116cb5:	74 17                	je     f0116cce <test_priority_normal_and_lower+0x88a>
				panic("%d Working set should be moved properly to the new one, removed pages are chosen based on replacement policy", i);
f0116cb7:	ff 75 c8             	pushl  -0x38(%ebp)
f0116cba:	68 44 a6 13 f0       	push   $0xf013a644
f0116cbf:	68 69 01 00 00       	push   $0x169
f0116cc4:	68 ed a1 13 f0       	push   $0xf013a1ed
f0116cc9:	e8 d8 94 fe ff       	call   f01001a6 <_panic>

			if(fact_TimeStamp[i+3] != factEnv->ptr_pageWorkingSet[i].time_stamp)
f0116cce:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0116cd1:	83 c0 03             	add    $0x3,%eax
f0116cd4:	8b 8c 85 f8 fd ff ff 	mov    -0x208(%ebp,%eax,4),%ecx
f0116cdb:	8b 5d b4             	mov    -0x4c(%ebp),%ebx
f0116cde:	8b 55 c8             	mov    -0x38(%ebp),%edx
f0116ce1:	89 d0                	mov    %edx,%eax
f0116ce3:	01 c0                	add    %eax,%eax
f0116ce5:	01 d0                	add    %edx,%eax
f0116ce7:	c1 e0 03             	shl    $0x3,%eax
f0116cea:	01 d8                	add    %ebx,%eax
f0116cec:	83 e8 80             	sub    $0xffffff80,%eax
f0116cef:	8b 00                	mov    (%eax),%eax
f0116cf1:	39 c1                	cmp    %eax,%ecx
f0116cf3:	74 17                	je     f0116d0c <test_priority_normal_and_lower+0x8c8>
				panic("Working set should be moved properly to the new one, removed pages are chosen based on replacement policy");
f0116cf5:	83 ec 04             	sub    $0x4,%esp
f0116cf8:	68 d8 a5 13 f0       	push   $0xf013a5d8
f0116cfd:	68 6c 01 00 00       	push   $0x16c
f0116d02:	68 ed a1 13 f0       	push   $0xf013a1ed
f0116d07:	e8 9a 94 fe ff       	call   f01001a6 <_panic>

			if(add_TimeStamp[i+8] != addEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one, removed pages are chosen based on replacement policy");
		}

		for(int i = 0; i < 7; i++)
f0116d0c:	ff 45 c8             	incl   -0x38(%ebp)
f0116d0f:	83 7d c8 06          	cmpl   $0x6,-0x38(%ebp)
f0116d13:	0f 8e 77 ff ff ff    	jle    f0116c90 <test_priority_normal_and_lower+0x84c>

			if(fact_TimeStamp[i+3] != factEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one, removed pages are chosen based on replacement policy");
		}

		for(int i = 0; i < 5; i++)
f0116d19:	c7 45 c4 00 00 00 00 	movl   $0x0,-0x3c(%ebp)
f0116d20:	eb 7f                	jmp    f0116da1 <test_priority_normal_and_lower+0x95d>
		{
			if(hello_WS[i+5] != helloEnv->ptr_pageWorkingSet[i].virtual_address)
f0116d22:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0116d25:	83 c0 05             	add    $0x5,%eax
f0116d28:	8b 8c 85 70 fe ff ff 	mov    -0x190(%ebp,%eax,4),%ecx
f0116d2f:	8b 5d b0             	mov    -0x50(%ebp),%ebx
f0116d32:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0116d35:	89 d0                	mov    %edx,%eax
f0116d37:	01 c0                	add    %eax,%eax
f0116d39:	01 d0                	add    %edx,%eax
f0116d3b:	c1 e0 03             	shl    $0x3,%eax
f0116d3e:	01 d8                	add    %ebx,%eax
f0116d40:	83 c0 78             	add    $0x78,%eax
f0116d43:	8b 00                	mov    (%eax),%eax
f0116d45:	39 c1                	cmp    %eax,%ecx
f0116d47:	74 17                	je     f0116d60 <test_priority_normal_and_lower+0x91c>
				panic("Working set should be moved properly to the new one, removed pages are chosen based on replacement policy");
f0116d49:	83 ec 04             	sub    $0x4,%esp
f0116d4c:	68 d8 a5 13 f0       	push   $0xf013a5d8
f0116d51:	68 72 01 00 00       	push   $0x172
f0116d56:	68 ed a1 13 f0       	push   $0xf013a1ed
f0116d5b:	e8 46 94 fe ff       	call   f01001a6 <_panic>

			if(hello_TimeStamp[i+5] != helloEnv->ptr_pageWorkingSet[i].time_stamp)
f0116d60:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0116d63:	83 c0 05             	add    $0x5,%eax
f0116d66:	8b 8c 85 10 ff ff ff 	mov    -0xf0(%ebp,%eax,4),%ecx
f0116d6d:	8b 5d b0             	mov    -0x50(%ebp),%ebx
f0116d70:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0116d73:	89 d0                	mov    %edx,%eax
f0116d75:	01 c0                	add    %eax,%eax
f0116d77:	01 d0                	add    %edx,%eax
f0116d79:	c1 e0 03             	shl    $0x3,%eax
f0116d7c:	01 d8                	add    %ebx,%eax
f0116d7e:	83 e8 80             	sub    $0xffffff80,%eax
f0116d81:	8b 00                	mov    (%eax),%eax
f0116d83:	39 c1                	cmp    %eax,%ecx
f0116d85:	74 17                	je     f0116d9e <test_priority_normal_and_lower+0x95a>
				panic("Working set should be moved properly to the new one, removed pages are chosen based on replacement policy");
f0116d87:	83 ec 04             	sub    $0x4,%esp
f0116d8a:	68 d8 a5 13 f0       	push   $0xf013a5d8
f0116d8f:	68 75 01 00 00       	push   $0x175
f0116d94:	68 ed a1 13 f0       	push   $0xf013a1ed
f0116d99:	e8 08 94 fe ff       	call   f01001a6 <_panic>

			if(fact_TimeStamp[i+3] != factEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one, removed pages are chosen based on replacement policy");
		}

		for(int i = 0; i < 5; i++)
f0116d9e:	ff 45 c4             	incl   -0x3c(%ebp)
f0116da1:	83 7d c4 04          	cmpl   $0x4,-0x3c(%ebp)
f0116da5:	0f 8e 77 ff ff ff    	jle    f0116d22 <test_priority_normal_and_lower+0x8de>

			if(hello_TimeStamp[i+5] != helloEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one, removed pages are chosen based on replacement policy");
		}

		set_program_priority(addEnv, 5);
f0116dab:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0116dae:	83 ec 08             	sub    $0x8,%esp
f0116db1:	6a 05                	push   $0x5
f0116db3:	50                   	push   %eax
f0116db4:	e8 fb 3a ff ff       	call   f010a8b4 <set_program_priority>
f0116db9:	83 c4 10             	add    $0x10,%esp
		set_program_priority(addEnv, 5);
f0116dbc:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0116dbf:	83 ec 08             	sub    $0x8,%esp
f0116dc2:	6a 05                	push   $0x5
f0116dc4:	50                   	push   %eax
f0116dc5:	e8 ea 3a ff ff       	call   f010a8b4 <set_program_priority>
f0116dca:	83 c4 10             	add    $0x10,%esp

		char command4[100] = "runall";
f0116dcd:	c7 85 1c fd ff ff 72 	movl   $0x616e7572,-0x2e4(%ebp)
f0116dd4:	75 6e 61 
f0116dd7:	c7 85 20 fd ff ff 6c 	movl   $0x6c6c,-0x2e0(%ebp)
f0116dde:	6c 00 00 
f0116de1:	8d 95 24 fd ff ff    	lea    -0x2dc(%ebp),%edx
f0116de7:	b9 17 00 00 00       	mov    $0x17,%ecx
f0116dec:	b8 00 00 00 00       	mov    $0x0,%eax
f0116df1:	89 d7                	mov    %edx,%edi
f0116df3:	f3 ab                	rep stos %eax,%es:(%edi)
		execute_command(command4);
f0116df5:	83 ec 0c             	sub    $0xc,%esp
f0116df8:	8d 85 1c fd ff ff    	lea    -0x2e4(%ebp),%eax
f0116dfe:	50                   	push   %eax
f0116dff:	e8 8b 9e fe ff       	call   f0100c8f <execute_command>
f0116e04:	83 c4 10             	add    $0x10,%esp
	}
	else
	{
		cprintf("\nCongratulations!! test priority 2 completed successfully.\n");
	}
}
f0116e07:	eb 10                	jmp    f0116e19 <test_priority_normal_and_lower+0x9d5>
		char command4[100] = "runall";
		execute_command(command4);
	}
	else
	{
		cprintf("\nCongratulations!! test priority 2 completed successfully.\n");
f0116e09:	83 ec 0c             	sub    $0xc,%esp
f0116e0c:	68 b4 a6 13 f0       	push   $0xf013a6b4
f0116e11:	e8 17 9e fe ff       	call   f0100c2d <cprintf>
f0116e16:	83 c4 10             	add    $0x10,%esp
	}
}
f0116e19:	90                   	nop
f0116e1a:	8d 65 f4             	lea    -0xc(%ebp),%esp
f0116e1d:	5b                   	pop    %ebx
f0116e1e:	5e                   	pop    %esi
f0116e1f:	5f                   	pop    %edi
f0116e20:	5d                   	pop    %ebp
f0116e21:	c3                   	ret    

f0116e22 <isKHeapPlacementStrategyNEXTFIT>:
static inline void setKHeapPlacementStrategyWORSTFIT(){_KHeapPlacementStrategy = KHP_PLACE_WORSTFIT;}

static inline uint8 isKHeapPlacementStrategyCONTALLOC(){if(_KHeapPlacementStrategy == KHP_PLACE_CONTALLOC) return 1; return 0;}
static inline uint8 isKHeapPlacementStrategyFIRSTFIT(){if(_KHeapPlacementStrategy == KHP_PLACE_FIRSTFIT) return 1; return 0;}
static inline uint8 isKHeapPlacementStrategyBESTFIT(){if(_KHeapPlacementStrategy == KHP_PLACE_BESTFIT) return 1; return 0;}
static inline uint8 isKHeapPlacementStrategyNEXTFIT(){if(_KHeapPlacementStrategy == KHP_PLACE_NEXTFIT) return 1; return 0;}
f0116e22:	55                   	push   %ebp
f0116e23:	89 e5                	mov    %esp,%ebp
f0116e25:	a1 98 0e 6c f0       	mov    0xf06c0e98,%eax
f0116e2a:	83 f8 03             	cmp    $0x3,%eax
f0116e2d:	75 04                	jne    f0116e33 <isKHeapPlacementStrategyNEXTFIT+0x11>
f0116e2f:	b0 01                	mov    $0x1,%al
f0116e31:	eb 02                	jmp    f0116e35 <isKHeapPlacementStrategyNEXTFIT+0x13>
f0116e33:	b0 00                	mov    $0x0,%al
f0116e35:	5d                   	pop    %ebp
f0116e36:	c3                   	ret    

f0116e37 <test_kmalloc>:
	int c;
};


int test_kmalloc()
{
f0116e37:	55                   	push   %ebp
f0116e38:	89 e5                	mov    %esp,%ebp
f0116e3a:	57                   	push   %edi
f0116e3b:	53                   	push   %ebx
f0116e3c:	81 ec c0 01 00 00    	sub    $0x1c0,%esp
	cprintf("==============================================\n");
f0116e42:	83 ec 0c             	sub    $0xc,%esp
f0116e45:	68 b8 a7 13 f0       	push   $0xf013a7b8
f0116e4a:	e8 de 9d fe ff       	call   f0100c2d <cprintf>
f0116e4f:	83 c4 10             	add    $0x10,%esp
	cprintf("MAKE SURE to have a FRESH RUN for this test\n(i.e. don't run any program/test before it)\n");
f0116e52:	83 ec 0c             	sub    $0xc,%esp
f0116e55:	68 e8 a7 13 f0       	push   $0xf013a7e8
f0116e5a:	e8 ce 9d fe ff       	call   f0100c2d <cprintf>
f0116e5f:	83 c4 10             	add    $0x10,%esp
	cprintf("==============================================\n");
f0116e62:	83 ec 0c             	sub    $0xc,%esp
f0116e65:	68 b8 a7 13 f0       	push   $0xf013a7b8
f0116e6a:	e8 be 9d fe ff       	call   f0100c2d <cprintf>
f0116e6f:	83 c4 10             	add    $0x10,%esp

	char minByte = 1<<7;
f0116e72:	c6 45 f3 80          	movb   $0x80,-0xd(%ebp)
	char maxByte = 0x7F;
f0116e76:	c6 45 f2 7f          	movb   $0x7f,-0xe(%ebp)
	short minShort = 1<<15 ;
f0116e7a:	66 c7 45 f0 00 80    	movw   $0x8000,-0x10(%ebp)
	short maxShort = 0x7FFF;
f0116e80:	66 c7 45 ee ff 7f    	movw   $0x7fff,-0x12(%ebp)
	int minInt = 1<<31 ;
f0116e86:	c7 45 e8 00 00 00 80 	movl   $0x80000000,-0x18(%ebp)
	int maxInt = 0x7FFFFFFF;
f0116e8d:	c7 45 e4 ff ff ff 7f 	movl   $0x7fffffff,-0x1c(%ebp)
	char *byteArr, *byteArr2 ;
	short *shortArr, *shortArr2 ;
	int *intArr;
	struct MyStruct *structArr ;
	int lastIndexOfByte, lastIndexOfByte2, lastIndexOfShort, lastIndexOfShort2, lastIndexOfInt, lastIndexOfStruct;
	int start_freeFrames = sys_calculate_free_frames() ;
f0116e94:	e8 25 55 ff ff       	call   f010c3be <sys_calculate_free_frames>
f0116e99:	89 45 e0             	mov    %eax,-0x20(%ebp)

	void* ptr_allocations[20] = {0};
f0116e9c:	8d 95 40 fe ff ff    	lea    -0x1c0(%ebp),%edx
f0116ea2:	b9 14 00 00 00       	mov    $0x14,%ecx
f0116ea7:	b8 00 00 00 00       	mov    $0x0,%eax
f0116eac:	89 d7                	mov    %edx,%edi
f0116eae:	f3 ab                	rep stos %eax,%es:(%edi)
	{
		//Insufficient space
		int freeFrames = sys_calculate_free_frames() ;
f0116eb0:	e8 09 55 ff ff       	call   f010c3be <sys_calculate_free_frames>
f0116eb5:	89 45 dc             	mov    %eax,-0x24(%ebp)
		int freeDiskFrames = pf_calculate_free_frames() ;
f0116eb8:	e8 cf cd fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0116ebd:	89 45 d8             	mov    %eax,-0x28(%ebp)
		uint32 sizeOfKHeap = (KERNEL_HEAP_MAX - ACTUAL_START + 1) ;
f0116ec0:	c7 45 d4 00 10 00 00 	movl   $0x1000,-0x2c(%ebp)
f0116ec7:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0116eca:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0116ecf:	89 45 d0             	mov    %eax,-0x30(%ebp)
f0116ed2:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0116ed5:	ba 00 00 00 00       	mov    $0x0,%edx
f0116eda:	f7 75 d4             	divl   -0x2c(%ebp)
f0116edd:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0116ee0:	29 d0                	sub    %edx,%eax
f0116ee2:	89 c1                	mov    %eax,%ecx
f0116ee4:	c7 45 cc 00 10 00 00 	movl   $0x1000,-0x34(%ebp)
f0116eeb:	a0 bc 0e 6c f0       	mov    0xf06c0ebc,%al
f0116ef0:	0f b6 d0             	movzbl %al,%edx
f0116ef3:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0116ef6:	01 d0                	add    %edx,%eax
f0116ef8:	48                   	dec    %eax
f0116ef9:	89 45 c8             	mov    %eax,-0x38(%ebp)
f0116efc:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0116eff:	ba 00 00 00 00       	mov    $0x0,%edx
f0116f04:	f7 75 cc             	divl   -0x34(%ebp)
f0116f07:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0116f0a:	29 d0                	sub    %edx,%eax
f0116f0c:	01 c1                	add    %eax,%ecx
f0116f0e:	c7 45 c4 00 10 00 00 	movl   $0x1000,-0x3c(%ebp)
f0116f15:	a0 bc 0e 6c f0       	mov    0xf06c0ebc,%al
f0116f1a:	0f b6 c0             	movzbl %al,%eax
f0116f1d:	c1 e0 04             	shl    $0x4,%eax
f0116f20:	89 c2                	mov    %eax,%edx
f0116f22:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0116f25:	01 d0                	add    %edx,%eax
f0116f27:	48                   	dec    %eax
f0116f28:	89 45 c0             	mov    %eax,-0x40(%ebp)
f0116f2b:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0116f2e:	ba 00 00 00 00       	mov    $0x0,%edx
f0116f33:	f7 75 c4             	divl   -0x3c(%ebp)
f0116f36:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0116f39:	29 d0                	sub    %edx,%eax
f0116f3b:	01 c8                	add    %ecx,%eax
f0116f3d:	ba 01 b0 ff 09       	mov    $0x9ffb001,%edx
f0116f42:	29 c2                	sub    %eax,%edx
f0116f44:	89 d0                	mov    %edx,%eax
f0116f46:	89 45 bc             	mov    %eax,-0x44(%ebp)
		ptr_allocations[0] = kmalloc(sizeOfKHeap);
f0116f49:	83 ec 0c             	sub    $0xc,%esp
f0116f4c:	ff 75 bc             	pushl  -0x44(%ebp)
f0116f4f:	e8 70 06 ff ff       	call   f01075c4 <kmalloc>
f0116f54:	83 c4 10             	add    $0x10,%esp
f0116f57:	89 85 40 fe ff ff    	mov    %eax,-0x1c0(%ebp)
		if (ptr_allocations[0] != NULL) panic("Allocating insufficient space: should return NULL");
f0116f5d:	8b 85 40 fe ff ff    	mov    -0x1c0(%ebp),%eax
f0116f63:	85 c0                	test   %eax,%eax
f0116f65:	74 14                	je     f0116f7b <test_kmalloc+0x144>
f0116f67:	83 ec 04             	sub    $0x4,%esp
f0116f6a:	68 44 a8 13 f0       	push   $0xf013a844
f0116f6f:	6a 40                	push   $0x40
f0116f71:	68 76 a8 13 f0       	push   $0xf013a876
f0116f76:	e8 2b 92 fe ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0116f7b:	e8 0c cd fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0116f80:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0116f83:	74 14                	je     f0116f99 <test_kmalloc+0x162>
f0116f85:	83 ec 04             	sub    $0x4,%esp
f0116f88:	68 90 a8 13 f0       	push   $0xf013a890
f0116f8d:	6a 41                	push   $0x41
f0116f8f:	68 76 a8 13 f0       	push   $0xf013a876
f0116f94:	e8 0d 92 fe ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Wrong allocation: pages are not loaded successfully into memory");
f0116f99:	e8 20 54 ff ff       	call   f010c3be <sys_calculate_free_frames>
f0116f9e:	89 c2                	mov    %eax,%edx
f0116fa0:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0116fa3:	39 c2                	cmp    %eax,%edx
f0116fa5:	74 14                	je     f0116fbb <test_kmalloc+0x184>
f0116fa7:	83 ec 04             	sub    $0x4,%esp
f0116faa:	68 f8 a8 13 f0       	push   $0xf013a8f8
f0116faf:	6a 42                	push   $0x42
f0116fb1:	68 76 a8 13 f0       	push   $0xf013a876
f0116fb6:	e8 eb 91 fe ff       	call   f01001a6 <_panic>

		cprintf("\nkmalloc: current evaluation = 10%");
f0116fbb:	83 ec 0c             	sub    $0xc,%esp
f0116fbe:	68 38 a9 13 f0       	push   $0xf013a938
f0116fc3:	e8 65 9c fe ff       	call   f0100c2d <cprintf>
f0116fc8:	83 c4 10             	add    $0x10,%esp
		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f0116fcb:	e8 ee 53 ff ff       	call   f010c3be <sys_calculate_free_frames>
f0116fd0:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0116fd3:	e8 b4 cc fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0116fd8:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[0] = kmalloc(2*Mega-kilo);
f0116fdb:	83 ec 0c             	sub    $0xc,%esp
f0116fde:	68 00 fc 1f 00       	push   $0x1ffc00
f0116fe3:	e8 dc 05 ff ff       	call   f01075c4 <kmalloc>
f0116fe8:	83 c4 10             	add    $0x10,%esp
f0116feb:	89 85 40 fe ff ff    	mov    %eax,-0x1c0(%ebp)
		if ((uint32) ptr_allocations[0] !=  (ACTUAL_START)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0116ff1:	8b 85 40 fe ff ff    	mov    -0x1c0(%ebp),%eax
f0116ff7:	89 c1                	mov    %eax,%ecx
f0116ff9:	c7 45 b8 00 10 00 00 	movl   $0x1000,-0x48(%ebp)
f0117000:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0117003:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0117008:	89 45 b4             	mov    %eax,-0x4c(%ebp)
f011700b:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f011700e:	ba 00 00 00 00       	mov    $0x0,%edx
f0117013:	f7 75 b8             	divl   -0x48(%ebp)
f0117016:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0117019:	29 d0                	sub    %edx,%eax
f011701b:	89 c3                	mov    %eax,%ebx
f011701d:	c7 45 b0 00 10 00 00 	movl   $0x1000,-0x50(%ebp)
f0117024:	a0 bc 0e 6c f0       	mov    0xf06c0ebc,%al
f0117029:	0f b6 d0             	movzbl %al,%edx
f011702c:	8b 45 b0             	mov    -0x50(%ebp),%eax
f011702f:	01 d0                	add    %edx,%eax
f0117031:	48                   	dec    %eax
f0117032:	89 45 ac             	mov    %eax,-0x54(%ebp)
f0117035:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0117038:	ba 00 00 00 00       	mov    $0x0,%edx
f011703d:	f7 75 b0             	divl   -0x50(%ebp)
f0117040:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0117043:	29 d0                	sub    %edx,%eax
f0117045:	01 c3                	add    %eax,%ebx
f0117047:	c7 45 a8 00 10 00 00 	movl   $0x1000,-0x58(%ebp)
f011704e:	a0 bc 0e 6c f0       	mov    0xf06c0ebc,%al
f0117053:	0f b6 c0             	movzbl %al,%eax
f0117056:	c1 e0 04             	shl    $0x4,%eax
f0117059:	89 c2                	mov    %eax,%edx
f011705b:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011705e:	01 d0                	add    %edx,%eax
f0117060:	48                   	dec    %eax
f0117061:	89 45 a4             	mov    %eax,-0x5c(%ebp)
f0117064:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0117067:	ba 00 00 00 00       	mov    $0x0,%edx
f011706c:	f7 75 a8             	divl   -0x58(%ebp)
f011706f:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0117072:	29 d0                	sub    %edx,%eax
f0117074:	01 d8                	add    %ebx,%eax
f0117076:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f011707b:	39 c1                	cmp    %eax,%ecx
f011707d:	74 14                	je     f0117093 <test_kmalloc+0x25c>
f011707f:	83 ec 04             	sub    $0x4,%esp
f0117082:	68 5c a9 13 f0       	push   $0xf013a95c
f0117087:	6a 49                	push   $0x49
f0117089:	68 76 a8 13 f0       	push   $0xf013a876
f011708e:	e8 13 91 fe ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0117093:	e8 f4 cb fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0117098:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011709b:	74 14                	je     f01170b1 <test_kmalloc+0x27a>
f011709d:	83 ec 04             	sub    $0x4,%esp
f01170a0:	68 90 a8 13 f0       	push   $0xf013a890
f01170a5:	6a 4a                	push   $0x4a
f01170a7:	68 76 a8 13 f0       	push   $0xf013a876
f01170ac:	e8 f5 90 fe ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f01170b1:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f01170b4:	e8 05 53 ff ff       	call   f010c3be <sys_calculate_free_frames>
f01170b9:	29 c3                	sub    %eax,%ebx
f01170bb:	89 d8                	mov    %ebx,%eax
f01170bd:	3d 00 02 00 00       	cmp    $0x200,%eax
f01170c2:	74 14                	je     f01170d8 <test_kmalloc+0x2a1>
f01170c4:	83 ec 04             	sub    $0x4,%esp
f01170c7:	68 f8 a8 13 f0       	push   $0xf013a8f8
f01170cc:	6a 4b                	push   $0x4b
f01170ce:	68 76 a8 13 f0       	push   $0xf013a876
f01170d3:	e8 ce 90 fe ff       	call   f01001a6 <_panic>

		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f01170d8:	e8 e1 52 ff ff       	call   f010c3be <sys_calculate_free_frames>
f01170dd:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01170e0:	e8 a7 cb fe ff       	call   f0103c8c <pf_calculate_free_frames>
f01170e5:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[1] = kmalloc(2*Mega-kilo);
f01170e8:	83 ec 0c             	sub    $0xc,%esp
f01170eb:	68 00 fc 1f 00       	push   $0x1ffc00
f01170f0:	e8 cf 04 ff ff       	call   f01075c4 <kmalloc>
f01170f5:	83 c4 10             	add    $0x10,%esp
f01170f8:	89 85 44 fe ff ff    	mov    %eax,-0x1bc(%ebp)
		if ((uint32) ptr_allocations[1] != (ACTUAL_START + 2*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01170fe:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f0117104:	89 c1                	mov    %eax,%ecx
f0117106:	c7 45 a0 00 10 00 00 	movl   $0x1000,-0x60(%ebp)
f011710d:	8b 45 a0             	mov    -0x60(%ebp),%eax
f0117110:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0117115:	89 45 9c             	mov    %eax,-0x64(%ebp)
f0117118:	8b 45 9c             	mov    -0x64(%ebp),%eax
f011711b:	ba 00 00 00 00       	mov    $0x0,%edx
f0117120:	f7 75 a0             	divl   -0x60(%ebp)
f0117123:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0117126:	29 d0                	sub    %edx,%eax
f0117128:	89 c3                	mov    %eax,%ebx
f011712a:	c7 45 98 00 10 00 00 	movl   $0x1000,-0x68(%ebp)
f0117131:	a0 bc 0e 6c f0       	mov    0xf06c0ebc,%al
f0117136:	0f b6 d0             	movzbl %al,%edx
f0117139:	8b 45 98             	mov    -0x68(%ebp),%eax
f011713c:	01 d0                	add    %edx,%eax
f011713e:	48                   	dec    %eax
f011713f:	89 45 94             	mov    %eax,-0x6c(%ebp)
f0117142:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0117145:	ba 00 00 00 00       	mov    $0x0,%edx
f011714a:	f7 75 98             	divl   -0x68(%ebp)
f011714d:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0117150:	29 d0                	sub    %edx,%eax
f0117152:	01 c3                	add    %eax,%ebx
f0117154:	c7 45 90 00 10 00 00 	movl   $0x1000,-0x70(%ebp)
f011715b:	a0 bc 0e 6c f0       	mov    0xf06c0ebc,%al
f0117160:	0f b6 c0             	movzbl %al,%eax
f0117163:	c1 e0 04             	shl    $0x4,%eax
f0117166:	89 c2                	mov    %eax,%edx
f0117168:	8b 45 90             	mov    -0x70(%ebp),%eax
f011716b:	01 d0                	add    %edx,%eax
f011716d:	48                   	dec    %eax
f011716e:	89 45 8c             	mov    %eax,-0x74(%ebp)
f0117171:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0117174:	ba 00 00 00 00       	mov    $0x0,%edx
f0117179:	f7 75 90             	divl   -0x70(%ebp)
f011717c:	8b 45 8c             	mov    -0x74(%ebp),%eax
f011717f:	29 d0                	sub    %edx,%eax
f0117181:	01 d8                	add    %ebx,%eax
f0117183:	2d 00 c0 df 09       	sub    $0x9dfc000,%eax
f0117188:	39 c1                	cmp    %eax,%ecx
f011718a:	74 14                	je     f01171a0 <test_kmalloc+0x369>
f011718c:	83 ec 04             	sub    $0x4,%esp
f011718f:	68 5c a9 13 f0       	push   $0xf013a95c
f0117194:	6a 51                	push   $0x51
f0117196:	68 76 a8 13 f0       	push   $0xf013a876
f011719b:	e8 06 90 fe ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01171a0:	e8 e7 ca fe ff       	call   f0103c8c <pf_calculate_free_frames>
f01171a5:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f01171a8:	74 14                	je     f01171be <test_kmalloc+0x387>
f01171aa:	83 ec 04             	sub    $0x4,%esp
f01171ad:	68 90 a8 13 f0       	push   $0xf013a890
f01171b2:	6a 52                	push   $0x52
f01171b4:	68 76 a8 13 f0       	push   $0xf013a876
f01171b9:	e8 e8 8f fe ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f01171be:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f01171c1:	e8 f8 51 ff ff       	call   f010c3be <sys_calculate_free_frames>
f01171c6:	29 c3                	sub    %eax,%ebx
f01171c8:	89 d8                	mov    %ebx,%eax
f01171ca:	3d 00 02 00 00       	cmp    $0x200,%eax
f01171cf:	74 14                	je     f01171e5 <test_kmalloc+0x3ae>
f01171d1:	83 ec 04             	sub    $0x4,%esp
f01171d4:	68 f8 a8 13 f0       	push   $0xf013a8f8
f01171d9:	6a 53                	push   $0x53
f01171db:	68 76 a8 13 f0       	push   $0xf013a876
f01171e0:	e8 c1 8f fe ff       	call   f01001a6 <_panic>

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f01171e5:	e8 d4 51 ff ff       	call   f010c3be <sys_calculate_free_frames>
f01171ea:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01171ed:	e8 9a ca fe ff       	call   f0103c8c <pf_calculate_free_frames>
f01171f2:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[2] = kmalloc(2*kilo);
f01171f5:	83 ec 0c             	sub    $0xc,%esp
f01171f8:	68 00 08 00 00       	push   $0x800
f01171fd:	e8 c2 03 ff ff       	call   f01075c4 <kmalloc>
f0117202:	83 c4 10             	add    $0x10,%esp
f0117205:	89 85 48 fe ff ff    	mov    %eax,-0x1b8(%ebp)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f011720b:	8b 85 48 fe ff ff    	mov    -0x1b8(%ebp),%eax
f0117211:	89 c1                	mov    %eax,%ecx
f0117213:	c7 45 88 00 10 00 00 	movl   $0x1000,-0x78(%ebp)
f011721a:	8b 45 88             	mov    -0x78(%ebp),%eax
f011721d:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0117222:	89 45 84             	mov    %eax,-0x7c(%ebp)
f0117225:	8b 45 84             	mov    -0x7c(%ebp),%eax
f0117228:	ba 00 00 00 00       	mov    $0x0,%edx
f011722d:	f7 75 88             	divl   -0x78(%ebp)
f0117230:	8b 45 84             	mov    -0x7c(%ebp),%eax
f0117233:	29 d0                	sub    %edx,%eax
f0117235:	89 c3                	mov    %eax,%ebx
f0117237:	c7 45 80 00 10 00 00 	movl   $0x1000,-0x80(%ebp)
f011723e:	a0 bc 0e 6c f0       	mov    0xf06c0ebc,%al
f0117243:	0f b6 d0             	movzbl %al,%edx
f0117246:	8b 45 80             	mov    -0x80(%ebp),%eax
f0117249:	01 d0                	add    %edx,%eax
f011724b:	48                   	dec    %eax
f011724c:	89 85 7c ff ff ff    	mov    %eax,-0x84(%ebp)
f0117252:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f0117258:	ba 00 00 00 00       	mov    $0x0,%edx
f011725d:	f7 75 80             	divl   -0x80(%ebp)
f0117260:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f0117266:	29 d0                	sub    %edx,%eax
f0117268:	01 c3                	add    %eax,%ebx
f011726a:	c7 85 78 ff ff ff 00 	movl   $0x1000,-0x88(%ebp)
f0117271:	10 00 00 
f0117274:	a0 bc 0e 6c f0       	mov    0xf06c0ebc,%al
f0117279:	0f b6 c0             	movzbl %al,%eax
f011727c:	c1 e0 04             	shl    $0x4,%eax
f011727f:	89 c2                	mov    %eax,%edx
f0117281:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f0117287:	01 d0                	add    %edx,%eax
f0117289:	48                   	dec    %eax
f011728a:	89 85 74 ff ff ff    	mov    %eax,-0x8c(%ebp)
f0117290:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f0117296:	ba 00 00 00 00       	mov    $0x0,%edx
f011729b:	f7 b5 78 ff ff ff    	divl   -0x88(%ebp)
f01172a1:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f01172a7:	29 d0                	sub    %edx,%eax
f01172a9:	01 d8                	add    %ebx,%eax
f01172ab:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
f01172b0:	39 c1                	cmp    %eax,%ecx
f01172b2:	74 14                	je     f01172c8 <test_kmalloc+0x491>
f01172b4:	83 ec 04             	sub    $0x4,%esp
f01172b7:	68 5c a9 13 f0       	push   $0xf013a95c
f01172bc:	6a 59                	push   $0x59
f01172be:	68 76 a8 13 f0       	push   $0xf013a876
f01172c3:	e8 de 8e fe ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01172c8:	e8 bf c9 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f01172cd:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f01172d0:	74 14                	je     f01172e6 <test_kmalloc+0x4af>
f01172d2:	83 ec 04             	sub    $0x4,%esp
f01172d5:	68 90 a8 13 f0       	push   $0xf013a890
f01172da:	6a 5a                	push   $0x5a
f01172dc:	68 76 a8 13 f0       	push   $0xf013a876
f01172e1:	e8 c0 8e fe ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f01172e6:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f01172e9:	e8 d0 50 ff ff       	call   f010c3be <sys_calculate_free_frames>
f01172ee:	29 c3                	sub    %eax,%ebx
f01172f0:	89 d8                	mov    %ebx,%eax
f01172f2:	83 f8 01             	cmp    $0x1,%eax
f01172f5:	74 14                	je     f011730b <test_kmalloc+0x4d4>
f01172f7:	83 ec 04             	sub    $0x4,%esp
f01172fa:	68 f8 a8 13 f0       	push   $0xf013a8f8
f01172ff:	6a 5b                	push   $0x5b
f0117301:	68 76 a8 13 f0       	push   $0xf013a876
f0117306:	e8 9b 8e fe ff       	call   f01001a6 <_panic>

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f011730b:	e8 ae 50 ff ff       	call   f010c3be <sys_calculate_free_frames>
f0117310:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0117313:	e8 74 c9 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0117318:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[3] = kmalloc(2*kilo);
f011731b:	83 ec 0c             	sub    $0xc,%esp
f011731e:	68 00 08 00 00       	push   $0x800
f0117323:	e8 9c 02 ff ff       	call   f01075c4 <kmalloc>
f0117328:	83 c4 10             	add    $0x10,%esp
f011732b:	89 85 4c fe ff ff    	mov    %eax,-0x1b4(%ebp)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0117331:	8b 85 4c fe ff ff    	mov    -0x1b4(%ebp),%eax
f0117337:	89 c1                	mov    %eax,%ecx
f0117339:	c7 85 70 ff ff ff 00 	movl   $0x1000,-0x90(%ebp)
f0117340:	10 00 00 
f0117343:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f0117349:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011734e:	89 85 6c ff ff ff    	mov    %eax,-0x94(%ebp)
f0117354:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f011735a:	ba 00 00 00 00       	mov    $0x0,%edx
f011735f:	f7 b5 70 ff ff ff    	divl   -0x90(%ebp)
f0117365:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f011736b:	29 d0                	sub    %edx,%eax
f011736d:	89 c3                	mov    %eax,%ebx
f011736f:	c7 85 68 ff ff ff 00 	movl   $0x1000,-0x98(%ebp)
f0117376:	10 00 00 
f0117379:	a0 bc 0e 6c f0       	mov    0xf06c0ebc,%al
f011737e:	0f b6 d0             	movzbl %al,%edx
f0117381:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f0117387:	01 d0                	add    %edx,%eax
f0117389:	48                   	dec    %eax
f011738a:	89 85 64 ff ff ff    	mov    %eax,-0x9c(%ebp)
f0117390:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f0117396:	ba 00 00 00 00       	mov    $0x0,%edx
f011739b:	f7 b5 68 ff ff ff    	divl   -0x98(%ebp)
f01173a1:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f01173a7:	29 d0                	sub    %edx,%eax
f01173a9:	01 c3                	add    %eax,%ebx
f01173ab:	c7 85 60 ff ff ff 00 	movl   $0x1000,-0xa0(%ebp)
f01173b2:	10 00 00 
f01173b5:	a0 bc 0e 6c f0       	mov    0xf06c0ebc,%al
f01173ba:	0f b6 c0             	movzbl %al,%eax
f01173bd:	c1 e0 04             	shl    $0x4,%eax
f01173c0:	89 c2                	mov    %eax,%edx
f01173c2:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f01173c8:	01 d0                	add    %edx,%eax
f01173ca:	48                   	dec    %eax
f01173cb:	89 85 5c ff ff ff    	mov    %eax,-0xa4(%ebp)
f01173d1:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f01173d7:	ba 00 00 00 00       	mov    $0x0,%edx
f01173dc:	f7 b5 60 ff ff ff    	divl   -0xa0(%ebp)
f01173e2:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f01173e8:	29 d0                	sub    %edx,%eax
f01173ea:	01 d8                	add    %ebx,%eax
f01173ec:	2d 00 b0 bf 09       	sub    $0x9bfb000,%eax
f01173f1:	39 c1                	cmp    %eax,%ecx
f01173f3:	74 14                	je     f0117409 <test_kmalloc+0x5d2>
f01173f5:	83 ec 04             	sub    $0x4,%esp
f01173f8:	68 5c a9 13 f0       	push   $0xf013a95c
f01173fd:	6a 61                	push   $0x61
f01173ff:	68 76 a8 13 f0       	push   $0xf013a876
f0117404:	e8 9d 8d fe ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0117409:	e8 7e c8 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011740e:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0117411:	74 14                	je     f0117427 <test_kmalloc+0x5f0>
f0117413:	83 ec 04             	sub    $0x4,%esp
f0117416:	68 90 a8 13 f0       	push   $0xf013a890
f011741b:	6a 62                	push   $0x62
f011741d:	68 76 a8 13 f0       	push   $0xf013a876
f0117422:	e8 7f 8d fe ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f0117427:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f011742a:	e8 8f 4f ff ff       	call   f010c3be <sys_calculate_free_frames>
f011742f:	29 c3                	sub    %eax,%ebx
f0117431:	89 d8                	mov    %ebx,%eax
f0117433:	83 f8 01             	cmp    $0x1,%eax
f0117436:	74 14                	je     f011744c <test_kmalloc+0x615>
f0117438:	83 ec 04             	sub    $0x4,%esp
f011743b:	68 f8 a8 13 f0       	push   $0xf013a8f8
f0117440:	6a 63                	push   $0x63
f0117442:	68 76 a8 13 f0       	push   $0xf013a876
f0117447:	e8 5a 8d fe ff       	call   f01001a6 <_panic>

		//7 KB
		freeFrames = sys_calculate_free_frames() ;
f011744c:	e8 6d 4f ff ff       	call   f010c3be <sys_calculate_free_frames>
f0117451:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0117454:	e8 33 c8 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0117459:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[4] = kmalloc(7*kilo);
f011745c:	83 ec 0c             	sub    $0xc,%esp
f011745f:	68 00 1c 00 00       	push   $0x1c00
f0117464:	e8 5b 01 ff ff       	call   f01075c4 <kmalloc>
f0117469:	83 c4 10             	add    $0x10,%esp
f011746c:	89 85 50 fe ff ff    	mov    %eax,-0x1b0(%ebp)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0117472:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f0117478:	89 c1                	mov    %eax,%ecx
f011747a:	c7 85 58 ff ff ff 00 	movl   $0x1000,-0xa8(%ebp)
f0117481:	10 00 00 
f0117484:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f011748a:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011748f:	89 85 54 ff ff ff    	mov    %eax,-0xac(%ebp)
f0117495:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f011749b:	ba 00 00 00 00       	mov    $0x0,%edx
f01174a0:	f7 b5 58 ff ff ff    	divl   -0xa8(%ebp)
f01174a6:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f01174ac:	29 d0                	sub    %edx,%eax
f01174ae:	89 c3                	mov    %eax,%ebx
f01174b0:	c7 85 50 ff ff ff 00 	movl   $0x1000,-0xb0(%ebp)
f01174b7:	10 00 00 
f01174ba:	a0 bc 0e 6c f0       	mov    0xf06c0ebc,%al
f01174bf:	0f b6 d0             	movzbl %al,%edx
f01174c2:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f01174c8:	01 d0                	add    %edx,%eax
f01174ca:	48                   	dec    %eax
f01174cb:	89 85 4c ff ff ff    	mov    %eax,-0xb4(%ebp)
f01174d1:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f01174d7:	ba 00 00 00 00       	mov    $0x0,%edx
f01174dc:	f7 b5 50 ff ff ff    	divl   -0xb0(%ebp)
f01174e2:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f01174e8:	29 d0                	sub    %edx,%eax
f01174ea:	01 c3                	add    %eax,%ebx
f01174ec:	c7 85 48 ff ff ff 00 	movl   $0x1000,-0xb8(%ebp)
f01174f3:	10 00 00 
f01174f6:	a0 bc 0e 6c f0       	mov    0xf06c0ebc,%al
f01174fb:	0f b6 c0             	movzbl %al,%eax
f01174fe:	c1 e0 04             	shl    $0x4,%eax
f0117501:	89 c2                	mov    %eax,%edx
f0117503:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f0117509:	01 d0                	add    %edx,%eax
f011750b:	48                   	dec    %eax
f011750c:	89 85 44 ff ff ff    	mov    %eax,-0xbc(%ebp)
f0117512:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0117518:	ba 00 00 00 00       	mov    $0x0,%edx
f011751d:	f7 b5 48 ff ff ff    	divl   -0xb8(%ebp)
f0117523:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0117529:	29 d0                	sub    %edx,%eax
f011752b:	01 d8                	add    %ebx,%eax
f011752d:	2d 00 a0 bf 09       	sub    $0x9bfa000,%eax
f0117532:	39 c1                	cmp    %eax,%ecx
f0117534:	74 14                	je     f011754a <test_kmalloc+0x713>
f0117536:	83 ec 04             	sub    $0x4,%esp
f0117539:	68 5c a9 13 f0       	push   $0xf013a95c
f011753e:	6a 69                	push   $0x69
f0117540:	68 76 a8 13 f0       	push   $0xf013a876
f0117545:	e8 5c 8c fe ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011754a:	e8 3d c7 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011754f:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0117552:	74 14                	je     f0117568 <test_kmalloc+0x731>
f0117554:	83 ec 04             	sub    $0x4,%esp
f0117557:	68 90 a8 13 f0       	push   $0xf013a890
f011755c:	6a 6a                	push   $0x6a
f011755e:	68 76 a8 13 f0       	push   $0xf013a876
f0117563:	e8 3e 8c fe ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: pages are not loaded successfully into memory");
f0117568:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f011756b:	e8 4e 4e ff ff       	call   f010c3be <sys_calculate_free_frames>
f0117570:	29 c3                	sub    %eax,%ebx
f0117572:	89 d8                	mov    %ebx,%eax
f0117574:	83 f8 02             	cmp    $0x2,%eax
f0117577:	74 14                	je     f011758d <test_kmalloc+0x756>
f0117579:	83 ec 04             	sub    $0x4,%esp
f011757c:	68 f8 a8 13 f0       	push   $0xf013a8f8
f0117581:	6a 6b                	push   $0x6b
f0117583:	68 76 a8 13 f0       	push   $0xf013a876
f0117588:	e8 19 8c fe ff       	call   f01001a6 <_panic>

		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f011758d:	e8 2c 4e ff ff       	call   f010c3be <sys_calculate_free_frames>
f0117592:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0117595:	e8 f2 c6 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011759a:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[5] = kmalloc(3*Mega-kilo);
f011759d:	83 ec 0c             	sub    $0xc,%esp
f01175a0:	68 00 fc 2f 00       	push   $0x2ffc00
f01175a5:	e8 1a 00 ff ff       	call   f01075c4 <kmalloc>
f01175aa:	83 c4 10             	add    $0x10,%esp
f01175ad:	89 85 54 fe ff ff    	mov    %eax,-0x1ac(%ebp)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo) ) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01175b3:	8b 85 54 fe ff ff    	mov    -0x1ac(%ebp),%eax
f01175b9:	89 c1                	mov    %eax,%ecx
f01175bb:	c7 85 40 ff ff ff 00 	movl   $0x1000,-0xc0(%ebp)
f01175c2:	10 00 00 
f01175c5:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f01175cb:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01175d0:	89 85 3c ff ff ff    	mov    %eax,-0xc4(%ebp)
f01175d6:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f01175dc:	ba 00 00 00 00       	mov    $0x0,%edx
f01175e1:	f7 b5 40 ff ff ff    	divl   -0xc0(%ebp)
f01175e7:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f01175ed:	29 d0                	sub    %edx,%eax
f01175ef:	89 c3                	mov    %eax,%ebx
f01175f1:	c7 85 38 ff ff ff 00 	movl   $0x1000,-0xc8(%ebp)
f01175f8:	10 00 00 
f01175fb:	a0 bc 0e 6c f0       	mov    0xf06c0ebc,%al
f0117600:	0f b6 d0             	movzbl %al,%edx
f0117603:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f0117609:	01 d0                	add    %edx,%eax
f011760b:	48                   	dec    %eax
f011760c:	89 85 34 ff ff ff    	mov    %eax,-0xcc(%ebp)
f0117612:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f0117618:	ba 00 00 00 00       	mov    $0x0,%edx
f011761d:	f7 b5 38 ff ff ff    	divl   -0xc8(%ebp)
f0117623:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f0117629:	29 d0                	sub    %edx,%eax
f011762b:	01 c3                	add    %eax,%ebx
f011762d:	c7 85 30 ff ff ff 00 	movl   $0x1000,-0xd0(%ebp)
f0117634:	10 00 00 
f0117637:	a0 bc 0e 6c f0       	mov    0xf06c0ebc,%al
f011763c:	0f b6 c0             	movzbl %al,%eax
f011763f:	c1 e0 04             	shl    $0x4,%eax
f0117642:	89 c2                	mov    %eax,%edx
f0117644:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f011764a:	01 d0                	add    %edx,%eax
f011764c:	48                   	dec    %eax
f011764d:	89 85 2c ff ff ff    	mov    %eax,-0xd4(%ebp)
f0117653:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f0117659:	ba 00 00 00 00       	mov    $0x0,%edx
f011765e:	f7 b5 30 ff ff ff    	divl   -0xd0(%ebp)
f0117664:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f011766a:	29 d0                	sub    %edx,%eax
f011766c:	01 d8                	add    %ebx,%eax
f011766e:	2d 00 80 bf 09       	sub    $0x9bf8000,%eax
f0117673:	39 c1                	cmp    %eax,%ecx
f0117675:	74 14                	je     f011768b <test_kmalloc+0x854>
f0117677:	83 ec 04             	sub    $0x4,%esp
f011767a:	68 5c a9 13 f0       	push   $0xf013a95c
f011767f:	6a 71                	push   $0x71
f0117681:	68 76 a8 13 f0       	push   $0xf013a876
f0117686:	e8 1b 8b fe ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011768b:	e8 fc c5 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0117690:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0117693:	74 14                	je     f01176a9 <test_kmalloc+0x872>
f0117695:	83 ec 04             	sub    $0x4,%esp
f0117698:	68 90 a8 13 f0       	push   $0xf013a890
f011769d:	6a 72                	push   $0x72
f011769f:	68 76 a8 13 f0       	push   $0xf013a876
f01176a4:	e8 fd 8a fe ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
f01176a9:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f01176ac:	e8 0d 4d ff ff       	call   f010c3be <sys_calculate_free_frames>
f01176b1:	29 c3                	sub    %eax,%ebx
f01176b3:	89 d8                	mov    %ebx,%eax
f01176b5:	3d 00 03 00 00       	cmp    $0x300,%eax
f01176ba:	74 14                	je     f01176d0 <test_kmalloc+0x899>
f01176bc:	83 ec 04             	sub    $0x4,%esp
f01176bf:	68 f8 a8 13 f0       	push   $0xf013a8f8
f01176c4:	6a 73                	push   $0x73
f01176c6:	68 76 a8 13 f0       	push   $0xf013a876
f01176cb:	e8 d6 8a fe ff       	call   f01001a6 <_panic>

		//6 MB
		freeFrames = sys_calculate_free_frames() ;
f01176d0:	e8 e9 4c ff ff       	call   f010c3be <sys_calculate_free_frames>
f01176d5:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01176d8:	e8 af c5 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f01176dd:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[6] = kmalloc(6*Mega-kilo);
f01176e0:	83 ec 0c             	sub    $0xc,%esp
f01176e3:	68 00 fc 5f 00       	push   $0x5ffc00
f01176e8:	e8 d7 fe fe ff       	call   f01075c4 <kmalloc>
f01176ed:	83 c4 10             	add    $0x10,%esp
f01176f0:	89 85 58 fe ff ff    	mov    %eax,-0x1a8(%ebp)
		if ((uint32) ptr_allocations[6] != (ACTUAL_START + 7*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01176f6:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f01176fc:	89 c1                	mov    %eax,%ecx
f01176fe:	c7 85 28 ff ff ff 00 	movl   $0x1000,-0xd8(%ebp)
f0117705:	10 00 00 
f0117708:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f011770e:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0117713:	89 85 24 ff ff ff    	mov    %eax,-0xdc(%ebp)
f0117719:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011771f:	ba 00 00 00 00       	mov    $0x0,%edx
f0117724:	f7 b5 28 ff ff ff    	divl   -0xd8(%ebp)
f011772a:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0117730:	29 d0                	sub    %edx,%eax
f0117732:	89 c3                	mov    %eax,%ebx
f0117734:	c7 85 20 ff ff ff 00 	movl   $0x1000,-0xe0(%ebp)
f011773b:	10 00 00 
f011773e:	a0 bc 0e 6c f0       	mov    0xf06c0ebc,%al
f0117743:	0f b6 d0             	movzbl %al,%edx
f0117746:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f011774c:	01 d0                	add    %edx,%eax
f011774e:	48                   	dec    %eax
f011774f:	89 85 1c ff ff ff    	mov    %eax,-0xe4(%ebp)
f0117755:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f011775b:	ba 00 00 00 00       	mov    $0x0,%edx
f0117760:	f7 b5 20 ff ff ff    	divl   -0xe0(%ebp)
f0117766:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f011776c:	29 d0                	sub    %edx,%eax
f011776e:	01 c3                	add    %eax,%ebx
f0117770:	c7 85 18 ff ff ff 00 	movl   $0x1000,-0xe8(%ebp)
f0117777:	10 00 00 
f011777a:	a0 bc 0e 6c f0       	mov    0xf06c0ebc,%al
f011777f:	0f b6 c0             	movzbl %al,%eax
f0117782:	c1 e0 04             	shl    $0x4,%eax
f0117785:	89 c2                	mov    %eax,%edx
f0117787:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f011778d:	01 d0                	add    %edx,%eax
f011778f:	48                   	dec    %eax
f0117790:	89 85 14 ff ff ff    	mov    %eax,-0xec(%ebp)
f0117796:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f011779c:	ba 00 00 00 00       	mov    $0x0,%edx
f01177a1:	f7 b5 18 ff ff ff    	divl   -0xe8(%ebp)
f01177a7:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f01177ad:	29 d0                	sub    %edx,%eax
f01177af:	01 d8                	add    %ebx,%eax
f01177b1:	2d 00 80 8f 09       	sub    $0x98f8000,%eax
f01177b6:	39 c1                	cmp    %eax,%ecx
f01177b8:	74 14                	je     f01177ce <test_kmalloc+0x997>
f01177ba:	83 ec 04             	sub    $0x4,%esp
f01177bd:	68 5c a9 13 f0       	push   $0xf013a95c
f01177c2:	6a 79                	push   $0x79
f01177c4:	68 76 a8 13 f0       	push   $0xf013a876
f01177c9:	e8 d8 89 fe ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01177ce:	e8 b9 c4 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f01177d3:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f01177d6:	74 14                	je     f01177ec <test_kmalloc+0x9b5>
f01177d8:	83 ec 04             	sub    $0x4,%esp
f01177db:	68 90 a8 13 f0       	push   $0xf013a890
f01177e0:	6a 7a                	push   $0x7a
f01177e2:	68 76 a8 13 f0       	push   $0xf013a876
f01177e7:	e8 ba 89 fe ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1536) panic("Wrong allocation: pages are not loaded successfully into memory");
f01177ec:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f01177ef:	e8 ca 4b ff ff       	call   f010c3be <sys_calculate_free_frames>
f01177f4:	29 c3                	sub    %eax,%ebx
f01177f6:	89 d8                	mov    %ebx,%eax
f01177f8:	3d 00 06 00 00       	cmp    $0x600,%eax
f01177fd:	74 14                	je     f0117813 <test_kmalloc+0x9dc>
f01177ff:	83 ec 04             	sub    $0x4,%esp
f0117802:	68 f8 a8 13 f0       	push   $0xf013a8f8
f0117807:	6a 7b                	push   $0x7b
f0117809:	68 76 a8 13 f0       	push   $0xf013a876
f011780e:	e8 93 89 fe ff       	call   f01001a6 <_panic>

		//14 KB
		freeFrames = sys_calculate_free_frames() ;
f0117813:	e8 a6 4b ff ff       	call   f010c3be <sys_calculate_free_frames>
f0117818:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011781b:	e8 6c c4 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0117820:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[7] = kmalloc(14*kilo);
f0117823:	83 ec 0c             	sub    $0xc,%esp
f0117826:	68 00 38 00 00       	push   $0x3800
f011782b:	e8 94 fd fe ff       	call   f01075c4 <kmalloc>
f0117830:	83 c4 10             	add    $0x10,%esp
f0117833:	89 85 5c fe ff ff    	mov    %eax,-0x1a4(%ebp)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 13*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0117839:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f011783f:	89 c1                	mov    %eax,%ecx
f0117841:	c7 85 10 ff ff ff 00 	movl   $0x1000,-0xf0(%ebp)
f0117848:	10 00 00 
f011784b:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f0117851:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0117856:	89 85 0c ff ff ff    	mov    %eax,-0xf4(%ebp)
f011785c:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f0117862:	ba 00 00 00 00       	mov    $0x0,%edx
f0117867:	f7 b5 10 ff ff ff    	divl   -0xf0(%ebp)
f011786d:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f0117873:	29 d0                	sub    %edx,%eax
f0117875:	89 c3                	mov    %eax,%ebx
f0117877:	c7 85 08 ff ff ff 00 	movl   $0x1000,-0xf8(%ebp)
f011787e:	10 00 00 
f0117881:	a0 bc 0e 6c f0       	mov    0xf06c0ebc,%al
f0117886:	0f b6 d0             	movzbl %al,%edx
f0117889:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f011788f:	01 d0                	add    %edx,%eax
f0117891:	48                   	dec    %eax
f0117892:	89 85 04 ff ff ff    	mov    %eax,-0xfc(%ebp)
f0117898:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f011789e:	ba 00 00 00 00       	mov    $0x0,%edx
f01178a3:	f7 b5 08 ff ff ff    	divl   -0xf8(%ebp)
f01178a9:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f01178af:	29 d0                	sub    %edx,%eax
f01178b1:	01 c3                	add    %eax,%ebx
f01178b3:	c7 85 00 ff ff ff 00 	movl   $0x1000,-0x100(%ebp)
f01178ba:	10 00 00 
f01178bd:	a0 bc 0e 6c f0       	mov    0xf06c0ebc,%al
f01178c2:	0f b6 c0             	movzbl %al,%eax
f01178c5:	c1 e0 04             	shl    $0x4,%eax
f01178c8:	89 c2                	mov    %eax,%edx
f01178ca:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f01178d0:	01 d0                	add    %edx,%eax
f01178d2:	48                   	dec    %eax
f01178d3:	89 85 fc fe ff ff    	mov    %eax,-0x104(%ebp)
f01178d9:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f01178df:	ba 00 00 00 00       	mov    $0x0,%edx
f01178e4:	f7 b5 00 ff ff ff    	divl   -0x100(%ebp)
f01178ea:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f01178f0:	29 d0                	sub    %edx,%eax
f01178f2:	01 d8                	add    %ebx,%eax
f01178f4:	2d 00 80 2f 09       	sub    $0x92f8000,%eax
f01178f9:	39 c1                	cmp    %eax,%ecx
f01178fb:	74 17                	je     f0117914 <test_kmalloc+0xadd>
f01178fd:	83 ec 04             	sub    $0x4,%esp
f0117900:	68 5c a9 13 f0       	push   $0xf013a95c
f0117905:	68 81 00 00 00       	push   $0x81
f011790a:	68 76 a8 13 f0       	push   $0xf013a876
f011790f:	e8 92 88 fe ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0117914:	e8 73 c3 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0117919:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011791c:	74 17                	je     f0117935 <test_kmalloc+0xafe>
f011791e:	83 ec 04             	sub    $0x4,%esp
f0117921:	68 90 a8 13 f0       	push   $0xf013a890
f0117926:	68 82 00 00 00       	push   $0x82
f011792b:	68 76 a8 13 f0       	push   $0xf013a876
f0117930:	e8 71 88 fe ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 4) panic("Wrong allocation: pages are not loaded successfully into memory");
f0117935:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f0117938:	e8 81 4a ff ff       	call   f010c3be <sys_calculate_free_frames>
f011793d:	29 c3                	sub    %eax,%ebx
f011793f:	89 d8                	mov    %ebx,%eax
f0117941:	83 f8 04             	cmp    $0x4,%eax
f0117944:	74 17                	je     f011795d <test_kmalloc+0xb26>
f0117946:	83 ec 04             	sub    $0x4,%esp
f0117949:	68 f8 a8 13 f0       	push   $0xf013a8f8
f011794e:	68 83 00 00 00       	push   $0x83
f0117953:	68 76 a8 13 f0       	push   $0xf013a876
f0117958:	e8 49 88 fe ff       	call   f01001a6 <_panic>

		cprintf("\b\b\b50%");
f011795d:	83 ec 0c             	sub    $0xc,%esp
f0117960:	68 c2 a9 13 f0       	push   $0xf013a9c2
f0117965:	e8 c3 92 fe ff       	call   f0100c2d <cprintf>
f011796a:	83 c4 10             	add    $0x10,%esp
		//Checking read/write on the allocated spaces
		{
			freeFrames = sys_calculate_free_frames() ;
f011796d:	e8 4c 4a ff ff       	call   f010c3be <sys_calculate_free_frames>
f0117972:	89 45 dc             	mov    %eax,-0x24(%ebp)
			freeDiskFrames = pf_calculate_free_frames() ;
f0117975:	e8 12 c3 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011797a:	89 45 d8             	mov    %eax,-0x28(%ebp)

			//Write values
			//In 1st 2 MB
			lastIndexOfByte = (2*Mega-kilo)/sizeof(char) - 1;
f011797d:	c7 85 f8 fe ff ff ff 	movl   $0x1ffbff,-0x108(%ebp)
f0117984:	fb 1f 00 
			byteArr = (char *) ptr_allocations[0];
f0117987:	8b 85 40 fe ff ff    	mov    -0x1c0(%ebp),%eax
f011798d:	89 85 f4 fe ff ff    	mov    %eax,-0x10c(%ebp)
			byteArr[0] = minByte ;
f0117993:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f0117999:	8a 55 f3             	mov    -0xd(%ebp),%dl
f011799c:	88 10                	mov    %dl,(%eax)
			byteArr[lastIndexOfByte] = maxByte ;
f011799e:	8b 95 f8 fe ff ff    	mov    -0x108(%ebp),%edx
f01179a4:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f01179aa:	01 c2                	add    %eax,%edx
f01179ac:	8a 45 f2             	mov    -0xe(%ebp),%al
f01179af:	88 02                	mov    %al,(%edx)

			//In 2nd 2 MB
			shortArr = (short *) ptr_allocations[1];
f01179b1:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f01179b7:	89 85 f0 fe ff ff    	mov    %eax,-0x110(%ebp)
			lastIndexOfShort = (2*Mega-kilo)/sizeof(short) - 1;
f01179bd:	c7 85 ec fe ff ff ff 	movl   $0xffdff,-0x114(%ebp)
f01179c4:	fd 0f 00 
			shortArr[0] = minShort;
f01179c7:	8b 95 f0 fe ff ff    	mov    -0x110(%ebp),%edx
f01179cd:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01179d0:	66 89 02             	mov    %ax,(%edx)
			shortArr[lastIndexOfShort] = maxShort;
f01179d3:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f01179d9:	01 c0                	add    %eax,%eax
f01179db:	89 c2                	mov    %eax,%edx
f01179dd:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f01179e3:	01 c2                	add    %eax,%edx
f01179e5:	66 8b 45 ee          	mov    -0x12(%ebp),%ax
f01179e9:	66 89 02             	mov    %ax,(%edx)

			//In next 2 KB
			intArr = (int *) ptr_allocations[2];
f01179ec:	8b 85 48 fe ff ff    	mov    -0x1b8(%ebp),%eax
f01179f2:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)
			lastIndexOfInt = (2*kilo)/sizeof(int) - 1;
f01179f8:	c7 85 e4 fe ff ff ff 	movl   $0x1ff,-0x11c(%ebp)
f01179ff:	01 00 00 
			intArr[0] = minInt;
f0117a02:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f0117a08:	8b 55 e8             	mov    -0x18(%ebp),%edx
f0117a0b:	89 10                	mov    %edx,(%eax)
			intArr[lastIndexOfInt] = maxInt;
f0117a0d:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f0117a13:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0117a1a:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f0117a20:	01 c2                	add    %eax,%edx
f0117a22:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0117a25:	89 02                	mov    %eax,(%edx)

			//In 7 KB
			structArr = (struct MyStruct *) ptr_allocations[4];
f0117a27:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f0117a2d:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
			lastIndexOfStruct = (7*kilo)/sizeof(struct MyStruct) - 1;
f0117a33:	c7 85 dc fe ff ff 7f 	movl   $0x37f,-0x124(%ebp)
f0117a3a:	03 00 00 
			structArr[0].a = minByte; structArr[0].b = minShort; structArr[0].c = minInt;
f0117a3d:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f0117a43:	8a 55 f3             	mov    -0xd(%ebp),%dl
f0117a46:	88 10                	mov    %dl,(%eax)
f0117a48:	8b 95 e0 fe ff ff    	mov    -0x120(%ebp),%edx
f0117a4e:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0117a51:	66 89 42 02          	mov    %ax,0x2(%edx)
f0117a55:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f0117a5b:	8b 55 e8             	mov    -0x18(%ebp),%edx
f0117a5e:	89 50 04             	mov    %edx,0x4(%eax)
			structArr[lastIndexOfStruct].a = maxByte; structArr[lastIndexOfStruct].b = maxShort; structArr[lastIndexOfStruct].c = maxInt;
f0117a61:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f0117a67:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f0117a6e:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f0117a74:	01 c2                	add    %eax,%edx
f0117a76:	8a 45 f2             	mov    -0xe(%ebp),%al
f0117a79:	88 02                	mov    %al,(%edx)
f0117a7b:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f0117a81:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f0117a88:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f0117a8e:	01 c2                	add    %eax,%edx
f0117a90:	66 8b 45 ee          	mov    -0x12(%ebp),%ax
f0117a94:	66 89 42 02          	mov    %ax,0x2(%edx)
f0117a98:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f0117a9e:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f0117aa5:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f0117aab:	01 c2                	add    %eax,%edx
f0117aad:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0117ab0:	89 42 04             	mov    %eax,0x4(%edx)

			//In 6 MB
			lastIndexOfByte2 = (6*Mega-kilo)/sizeof(char) - 1;
f0117ab3:	c7 85 d8 fe ff ff ff 	movl   $0x5ffbff,-0x128(%ebp)
f0117aba:	fb 5f 00 
			byteArr2 = (char *) ptr_allocations[6];
f0117abd:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f0117ac3:	89 85 d4 fe ff ff    	mov    %eax,-0x12c(%ebp)
			byteArr2[0] = minByte ;
f0117ac9:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f0117acf:	8a 55 f3             	mov    -0xd(%ebp),%dl
f0117ad2:	88 10                	mov    %dl,(%eax)
			byteArr2[lastIndexOfByte2 / 2] = maxByte / 2;
f0117ad4:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f0117ada:	89 c2                	mov    %eax,%edx
f0117adc:	c1 ea 1f             	shr    $0x1f,%edx
f0117adf:	01 d0                	add    %edx,%eax
f0117ae1:	d1 f8                	sar    %eax
f0117ae3:	89 c2                	mov    %eax,%edx
f0117ae5:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f0117aeb:	01 c2                	add    %eax,%edx
f0117aed:	8a 45 f2             	mov    -0xe(%ebp),%al
f0117af0:	88 c1                	mov    %al,%cl
f0117af2:	c0 e9 07             	shr    $0x7,%cl
f0117af5:	01 c8                	add    %ecx,%eax
f0117af7:	d0 f8                	sar    %al
f0117af9:	88 02                	mov    %al,(%edx)
			byteArr2[lastIndexOfByte2] = maxByte ;
f0117afb:	8b 95 d8 fe ff ff    	mov    -0x128(%ebp),%edx
f0117b01:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f0117b07:	01 c2                	add    %eax,%edx
f0117b09:	8a 45 f2             	mov    -0xe(%ebp),%al
f0117b0c:	88 02                	mov    %al,(%edx)

			//In 14 KB
			shortArr2 = (short *) ptr_allocations[7];
f0117b0e:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f0117b14:	89 85 d0 fe ff ff    	mov    %eax,-0x130(%ebp)
			lastIndexOfShort2 = (14*kilo)/sizeof(short) - 1;
f0117b1a:	c7 85 cc fe ff ff ff 	movl   $0x1bff,-0x134(%ebp)
f0117b21:	1b 00 00 
			shortArr2[0] = minShort;
f0117b24:	8b 95 d0 fe ff ff    	mov    -0x130(%ebp),%edx
f0117b2a:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0117b2d:	66 89 02             	mov    %ax,(%edx)
			shortArr2[lastIndexOfShort2] = maxShort;
f0117b30:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f0117b36:	01 c0                	add    %eax,%eax
f0117b38:	89 c2                	mov    %eax,%edx
f0117b3a:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f0117b40:	01 c2                	add    %eax,%edx
f0117b42:	66 8b 45 ee          	mov    -0x12(%ebp),%ax
f0117b46:	66 89 02             	mov    %ax,(%edx)

			//Read values: check that the values are successfully written
			if (byteArr[0] 	!= minByte 	|| byteArr[lastIndexOfByte] 	!= maxByte) panic("Wrong allocation: stored values are wrongly changed!");
f0117b49:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f0117b4f:	8a 00                	mov    (%eax),%al
f0117b51:	3a 45 f3             	cmp    -0xd(%ebp),%al
f0117b54:	75 15                	jne    f0117b6b <test_kmalloc+0xd34>
f0117b56:	8b 95 f8 fe ff ff    	mov    -0x108(%ebp),%edx
f0117b5c:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f0117b62:	01 d0                	add    %edx,%eax
f0117b64:	8a 00                	mov    (%eax),%al
f0117b66:	3a 45 f2             	cmp    -0xe(%ebp),%al
f0117b69:	74 17                	je     f0117b82 <test_kmalloc+0xd4b>
f0117b6b:	83 ec 04             	sub    $0x4,%esp
f0117b6e:	68 cc a9 13 f0       	push   $0xf013a9cc
f0117b73:	68 b2 00 00 00       	push   $0xb2
f0117b78:	68 76 a8 13 f0       	push   $0xf013a876
f0117b7d:	e8 24 86 fe ff       	call   f01001a6 <_panic>
			if (shortArr[0] != minShort || shortArr[lastIndexOfShort] 	!= maxShort) panic("Wrong allocation: stored values are wrongly changed!");
f0117b82:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f0117b88:	66 8b 00             	mov    (%eax),%ax
f0117b8b:	66 3b 45 f0          	cmp    -0x10(%ebp),%ax
f0117b8f:	75 1b                	jne    f0117bac <test_kmalloc+0xd75>
f0117b91:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f0117b97:	01 c0                	add    %eax,%eax
f0117b99:	89 c2                	mov    %eax,%edx
f0117b9b:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f0117ba1:	01 d0                	add    %edx,%eax
f0117ba3:	66 8b 00             	mov    (%eax),%ax
f0117ba6:	66 3b 45 ee          	cmp    -0x12(%ebp),%ax
f0117baa:	74 17                	je     f0117bc3 <test_kmalloc+0xd8c>
f0117bac:	83 ec 04             	sub    $0x4,%esp
f0117baf:	68 cc a9 13 f0       	push   $0xf013a9cc
f0117bb4:	68 b3 00 00 00       	push   $0xb3
f0117bb9:	68 76 a8 13 f0       	push   $0xf013a876
f0117bbe:	e8 e3 85 fe ff       	call   f01001a6 <_panic>
			if (intArr[0] 	!= minInt 	|| intArr[lastIndexOfInt] 		!= maxInt) panic("Wrong allocation: stored values are wrongly changed!");
f0117bc3:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f0117bc9:	8b 00                	mov    (%eax),%eax
f0117bcb:	3b 45 e8             	cmp    -0x18(%ebp),%eax
f0117bce:	75 1c                	jne    f0117bec <test_kmalloc+0xdb5>
f0117bd0:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f0117bd6:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0117bdd:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f0117be3:	01 d0                	add    %edx,%eax
f0117be5:	8b 00                	mov    (%eax),%eax
f0117be7:	3b 45 e4             	cmp    -0x1c(%ebp),%eax
f0117bea:	74 17                	je     f0117c03 <test_kmalloc+0xdcc>
f0117bec:	83 ec 04             	sub    $0x4,%esp
f0117bef:	68 cc a9 13 f0       	push   $0xf013a9cc
f0117bf4:	68 b4 00 00 00       	push   $0xb4
f0117bf9:	68 76 a8 13 f0       	push   $0xf013a876
f0117bfe:	e8 a3 85 fe ff       	call   f01001a6 <_panic>

			if (structArr[0].a != minByte 	|| structArr[lastIndexOfStruct].a != maxByte) 	panic("Wrong allocation: stored values are wrongly changed!");
f0117c03:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f0117c09:	8a 00                	mov    (%eax),%al
f0117c0b:	3a 45 f3             	cmp    -0xd(%ebp),%al
f0117c0e:	75 1c                	jne    f0117c2c <test_kmalloc+0xdf5>
f0117c10:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f0117c16:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f0117c1d:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f0117c23:	01 d0                	add    %edx,%eax
f0117c25:	8a 00                	mov    (%eax),%al
f0117c27:	3a 45 f2             	cmp    -0xe(%ebp),%al
f0117c2a:	74 17                	je     f0117c43 <test_kmalloc+0xe0c>
f0117c2c:	83 ec 04             	sub    $0x4,%esp
f0117c2f:	68 cc a9 13 f0       	push   $0xf013a9cc
f0117c34:	68 b6 00 00 00       	push   $0xb6
f0117c39:	68 76 a8 13 f0       	push   $0xf013a876
f0117c3e:	e8 63 85 fe ff       	call   f01001a6 <_panic>
			if (structArr[0].b != minShort 	|| structArr[lastIndexOfStruct].b != maxShort) 	panic("Wrong allocation: stored values are wrongly changed!");
f0117c43:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f0117c49:	66 8b 40 02          	mov    0x2(%eax),%ax
f0117c4d:	66 3b 45 f0          	cmp    -0x10(%ebp),%ax
f0117c51:	75 1f                	jne    f0117c72 <test_kmalloc+0xe3b>
f0117c53:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f0117c59:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f0117c60:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f0117c66:	01 d0                	add    %edx,%eax
f0117c68:	66 8b 40 02          	mov    0x2(%eax),%ax
f0117c6c:	66 3b 45 ee          	cmp    -0x12(%ebp),%ax
f0117c70:	74 17                	je     f0117c89 <test_kmalloc+0xe52>
f0117c72:	83 ec 04             	sub    $0x4,%esp
f0117c75:	68 cc a9 13 f0       	push   $0xf013a9cc
f0117c7a:	68 b7 00 00 00       	push   $0xb7
f0117c7f:	68 76 a8 13 f0       	push   $0xf013a876
f0117c84:	e8 1d 85 fe ff       	call   f01001a6 <_panic>
			if (structArr[0].c != minInt 	|| structArr[lastIndexOfStruct].c != maxInt) 	panic("Wrong allocation: stored values are wrongly changed!");
f0117c89:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f0117c8f:	8b 40 04             	mov    0x4(%eax),%eax
f0117c92:	3b 45 e8             	cmp    -0x18(%ebp),%eax
f0117c95:	75 1d                	jne    f0117cb4 <test_kmalloc+0xe7d>
f0117c97:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f0117c9d:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f0117ca4:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f0117caa:	01 d0                	add    %edx,%eax
f0117cac:	8b 40 04             	mov    0x4(%eax),%eax
f0117caf:	3b 45 e4             	cmp    -0x1c(%ebp),%eax
f0117cb2:	74 17                	je     f0117ccb <test_kmalloc+0xe94>
f0117cb4:	83 ec 04             	sub    $0x4,%esp
f0117cb7:	68 cc a9 13 f0       	push   $0xf013a9cc
f0117cbc:	68 b8 00 00 00       	push   $0xb8
f0117cc1:	68 76 a8 13 f0       	push   $0xf013a876
f0117cc6:	e8 db 84 fe ff       	call   f01001a6 <_panic>

			if (byteArr2[0] != minByte || byteArr2[lastIndexOfByte2/2] != maxByte/2 || byteArr2[lastIndexOfByte2] != maxByte) panic("Wrong allocation: stored values are wrongly changed!");
f0117ccb:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f0117cd1:	8a 00                	mov    (%eax),%al
f0117cd3:	3a 45 f3             	cmp    -0xd(%ebp),%al
f0117cd6:	75 40                	jne    f0117d18 <test_kmalloc+0xee1>
f0117cd8:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f0117cde:	89 c2                	mov    %eax,%edx
f0117ce0:	c1 ea 1f             	shr    $0x1f,%edx
f0117ce3:	01 d0                	add    %edx,%eax
f0117ce5:	d1 f8                	sar    %eax
f0117ce7:	89 c2                	mov    %eax,%edx
f0117ce9:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f0117cef:	01 d0                	add    %edx,%eax
f0117cf1:	8a 10                	mov    (%eax),%dl
f0117cf3:	8a 45 f2             	mov    -0xe(%ebp),%al
f0117cf6:	88 c1                	mov    %al,%cl
f0117cf8:	c0 e9 07             	shr    $0x7,%cl
f0117cfb:	01 c8                	add    %ecx,%eax
f0117cfd:	d0 f8                	sar    %al
f0117cff:	38 c2                	cmp    %al,%dl
f0117d01:	75 15                	jne    f0117d18 <test_kmalloc+0xee1>
f0117d03:	8b 95 d8 fe ff ff    	mov    -0x128(%ebp),%edx
f0117d09:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f0117d0f:	01 d0                	add    %edx,%eax
f0117d11:	8a 00                	mov    (%eax),%al
f0117d13:	3a 45 f2             	cmp    -0xe(%ebp),%al
f0117d16:	74 17                	je     f0117d2f <test_kmalloc+0xef8>
f0117d18:	83 ec 04             	sub    $0x4,%esp
f0117d1b:	68 cc a9 13 f0       	push   $0xf013a9cc
f0117d20:	68 ba 00 00 00       	push   $0xba
f0117d25:	68 76 a8 13 f0       	push   $0xf013a876
f0117d2a:	e8 77 84 fe ff       	call   f01001a6 <_panic>
			if (shortArr2[0] != minShort || shortArr2[lastIndexOfShort2] != maxShort) panic("Wrong allocation: stored values are wrongly changed!");
f0117d2f:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f0117d35:	66 8b 00             	mov    (%eax),%ax
f0117d38:	66 3b 45 f0          	cmp    -0x10(%ebp),%ax
f0117d3c:	75 1b                	jne    f0117d59 <test_kmalloc+0xf22>
f0117d3e:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f0117d44:	01 c0                	add    %eax,%eax
f0117d46:	89 c2                	mov    %eax,%edx
f0117d48:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f0117d4e:	01 d0                	add    %edx,%eax
f0117d50:	66 8b 00             	mov    (%eax),%ax
f0117d53:	66 3b 45 ee          	cmp    -0x12(%ebp),%ax
f0117d57:	74 17                	je     f0117d70 <test_kmalloc+0xf39>
f0117d59:	83 ec 04             	sub    $0x4,%esp
f0117d5c:	68 cc a9 13 f0       	push   $0xf013a9cc
f0117d61:	68 bb 00 00 00       	push   $0xbb
f0117d66:	68 76 a8 13 f0       	push   $0xf013a876
f0117d6b:	e8 36 84 fe ff       	call   f01001a6 <_panic>

			if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Wrong allocation: pages are not loaded successfully into memory");
f0117d70:	e8 49 46 ff ff       	call   f010c3be <sys_calculate_free_frames>
f0117d75:	89 c2                	mov    %eax,%edx
f0117d77:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0117d7a:	39 c2                	cmp    %eax,%edx
f0117d7c:	74 17                	je     f0117d95 <test_kmalloc+0xf5e>
f0117d7e:	83 ec 04             	sub    $0x4,%esp
f0117d81:	68 f8 a8 13 f0       	push   $0xf013a8f8
f0117d86:	68 bd 00 00 00       	push   $0xbd
f0117d8b:	68 76 a8 13 f0       	push   $0xf013a876
f0117d90:	e8 11 84 fe ff       	call   f01001a6 <_panic>
			if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0117d95:	e8 f2 be fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0117d9a:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0117d9d:	74 17                	je     f0117db6 <test_kmalloc+0xf7f>
f0117d9f:	83 ec 04             	sub    $0x4,%esp
f0117da2:	68 90 a8 13 f0       	push   $0xf013a890
f0117da7:	68 be 00 00 00       	push   $0xbe
f0117dac:	68 76 a8 13 f0       	push   $0xf013a876
f0117db1:	e8 f0 83 fe ff       	call   f01001a6 <_panic>
		}

		cprintf("\b\b\b80%");
f0117db6:	83 ec 0c             	sub    $0xc,%esp
f0117db9:	68 01 aa 13 f0       	push   $0xf013aa01
f0117dbe:	e8 6a 8e fe ff       	call   f0100c2d <cprintf>
f0117dc3:	83 c4 10             	add    $0x10,%esp

		//Insufficient space again
		freeFrames = sys_calculate_free_frames() ;
f0117dc6:	e8 f3 45 ff ff       	call   f010c3be <sys_calculate_free_frames>
f0117dcb:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0117dce:	e8 b9 be fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0117dd3:	89 45 d8             	mov    %eax,-0x28(%ebp)
		uint32 restOfKHeap = (KERNEL_HEAP_MAX - ACTUAL_START + 2*PAGE_SIZE) - (2*Mega+2*Mega+4*kilo+4*kilo+8*kilo+3*Mega+6*Mega+16*kilo) ;
f0117dd6:	c7 85 c8 fe ff ff 00 	movl   $0x1000,-0x138(%ebp)
f0117ddd:	10 00 00 
f0117de0:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f0117de6:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0117deb:	89 85 c4 fe ff ff    	mov    %eax,-0x13c(%ebp)
f0117df1:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f0117df7:	ba 00 00 00 00       	mov    $0x0,%edx
f0117dfc:	f7 b5 c8 fe ff ff    	divl   -0x138(%ebp)
f0117e02:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f0117e08:	29 d0                	sub    %edx,%eax
f0117e0a:	89 c1                	mov    %eax,%ecx
f0117e0c:	c7 85 c0 fe ff ff 00 	movl   $0x1000,-0x140(%ebp)
f0117e13:	10 00 00 
f0117e16:	a0 bc 0e 6c f0       	mov    0xf06c0ebc,%al
f0117e1b:	0f b6 d0             	movzbl %al,%edx
f0117e1e:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f0117e24:	01 d0                	add    %edx,%eax
f0117e26:	48                   	dec    %eax
f0117e27:	89 85 bc fe ff ff    	mov    %eax,-0x144(%ebp)
f0117e2d:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f0117e33:	ba 00 00 00 00       	mov    $0x0,%edx
f0117e38:	f7 b5 c0 fe ff ff    	divl   -0x140(%ebp)
f0117e3e:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f0117e44:	29 d0                	sub    %edx,%eax
f0117e46:	01 c1                	add    %eax,%ecx
f0117e48:	c7 85 b8 fe ff ff 00 	movl   $0x1000,-0x148(%ebp)
f0117e4f:	10 00 00 
f0117e52:	a0 bc 0e 6c f0       	mov    0xf06c0ebc,%al
f0117e57:	0f b6 c0             	movzbl %al,%eax
f0117e5a:	c1 e0 04             	shl    $0x4,%eax
f0117e5d:	89 c2                	mov    %eax,%edx
f0117e5f:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f0117e65:	01 d0                	add    %edx,%eax
f0117e67:	48                   	dec    %eax
f0117e68:	89 85 b4 fe ff ff    	mov    %eax,-0x14c(%ebp)
f0117e6e:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f0117e74:	ba 00 00 00 00       	mov    $0x0,%edx
f0117e79:	f7 b5 b8 fe ff ff    	divl   -0x148(%ebp)
f0117e7f:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f0117e85:	29 d0                	sub    %edx,%eax
f0117e87:	01 c8                	add    %ecx,%eax
f0117e89:	ba 00 50 2f 09       	mov    $0x92f5000,%edx
f0117e8e:	29 c2                	sub    %eax,%edx
f0117e90:	89 d0                	mov    %edx,%eax
f0117e92:	89 85 b0 fe ff ff    	mov    %eax,-0x150(%ebp)
		ptr_allocations[8] = kmalloc(restOfKHeap);
f0117e98:	83 ec 0c             	sub    $0xc,%esp
f0117e9b:	ff b5 b0 fe ff ff    	pushl  -0x150(%ebp)
f0117ea1:	e8 1e f7 fe ff       	call   f01075c4 <kmalloc>
f0117ea6:	83 c4 10             	add    $0x10,%esp
f0117ea9:	89 85 60 fe ff ff    	mov    %eax,-0x1a0(%ebp)
		if (ptr_allocations[8] != NULL) panic("Allocating insufficient space: should return NULL");
f0117eaf:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f0117eb5:	85 c0                	test   %eax,%eax
f0117eb7:	74 17                	je     f0117ed0 <test_kmalloc+0x1099>
f0117eb9:	83 ec 04             	sub    $0x4,%esp
f0117ebc:	68 44 a8 13 f0       	push   $0xf013a844
f0117ec1:	68 c8 00 00 00       	push   $0xc8
f0117ec6:	68 76 a8 13 f0       	push   $0xf013a876
f0117ecb:	e8 d6 82 fe ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0117ed0:	e8 b7 bd fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0117ed5:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0117ed8:	74 17                	je     f0117ef1 <test_kmalloc+0x10ba>
f0117eda:	83 ec 04             	sub    $0x4,%esp
f0117edd:	68 90 a8 13 f0       	push   $0xf013a890
f0117ee2:	68 c9 00 00 00       	push   $0xc9
f0117ee7:	68 76 a8 13 f0       	push   $0xf013a876
f0117eec:	e8 b5 82 fe ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Wrong allocation: pages are not loaded successfully into memory");
f0117ef1:	e8 c8 44 ff ff       	call   f010c3be <sys_calculate_free_frames>
f0117ef6:	89 c2                	mov    %eax,%edx
f0117ef8:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0117efb:	39 c2                	cmp    %eax,%edx
f0117efd:	74 17                	je     f0117f16 <test_kmalloc+0x10df>
f0117eff:	83 ec 04             	sub    $0x4,%esp
f0117f02:	68 f8 a8 13 f0       	push   $0xf013a8f8
f0117f07:	68 ca 00 00 00       	push   $0xca
f0117f0c:	68 76 a8 13 f0       	push   $0xf013a876
f0117f11:	e8 90 82 fe ff       	call   f01001a6 <_panic>

		cprintf("\b\b\b90%");
f0117f16:	83 ec 0c             	sub    $0xc,%esp
f0117f19:	68 08 aa 13 f0       	push   $0xf013aa08
f0117f1e:	e8 0a 8d fe ff       	call   f0100c2d <cprintf>
f0117f23:	83 c4 10             	add    $0x10,%esp

		//permissions
		uint32 lastAllocAddress = (uint32)ptr_allocations[7] + 16*kilo ;
f0117f26:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f0117f2c:	05 00 40 00 00       	add    $0x4000,%eax
f0117f31:	89 85 ac fe ff ff    	mov    %eax,-0x154(%ebp)
		uint32 va;
		for (va = ACTUAL_START; va < lastAllocAddress; va+=PAGE_SIZE)
f0117f37:	c7 85 a8 fe ff ff 00 	movl   $0x1000,-0x158(%ebp)
f0117f3e:	10 00 00 
f0117f41:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f0117f47:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0117f4c:	89 85 a4 fe ff ff    	mov    %eax,-0x15c(%ebp)
f0117f52:	8b 85 a4 fe ff ff    	mov    -0x15c(%ebp),%eax
f0117f58:	ba 00 00 00 00       	mov    $0x0,%edx
f0117f5d:	f7 b5 a8 fe ff ff    	divl   -0x158(%ebp)
f0117f63:	8b 85 a4 fe ff ff    	mov    -0x15c(%ebp),%eax
f0117f69:	29 d0                	sub    %edx,%eax
f0117f6b:	89 c1                	mov    %eax,%ecx
f0117f6d:	c7 85 a0 fe ff ff 00 	movl   $0x1000,-0x160(%ebp)
f0117f74:	10 00 00 
f0117f77:	a0 bc 0e 6c f0       	mov    0xf06c0ebc,%al
f0117f7c:	0f b6 d0             	movzbl %al,%edx
f0117f7f:	8b 85 a0 fe ff ff    	mov    -0x160(%ebp),%eax
f0117f85:	01 d0                	add    %edx,%eax
f0117f87:	48                   	dec    %eax
f0117f88:	89 85 9c fe ff ff    	mov    %eax,-0x164(%ebp)
f0117f8e:	8b 85 9c fe ff ff    	mov    -0x164(%ebp),%eax
f0117f94:	ba 00 00 00 00       	mov    $0x0,%edx
f0117f99:	f7 b5 a0 fe ff ff    	divl   -0x160(%ebp)
f0117f9f:	8b 85 9c fe ff ff    	mov    -0x164(%ebp),%eax
f0117fa5:	29 d0                	sub    %edx,%eax
f0117fa7:	01 c1                	add    %eax,%ecx
f0117fa9:	c7 85 98 fe ff ff 00 	movl   $0x1000,-0x168(%ebp)
f0117fb0:	10 00 00 
f0117fb3:	a0 bc 0e 6c f0       	mov    0xf06c0ebc,%al
f0117fb8:	0f b6 c0             	movzbl %al,%eax
f0117fbb:	c1 e0 04             	shl    $0x4,%eax
f0117fbe:	89 c2                	mov    %eax,%edx
f0117fc0:	8b 85 98 fe ff ff    	mov    -0x168(%ebp),%eax
f0117fc6:	01 d0                	add    %edx,%eax
f0117fc8:	48                   	dec    %eax
f0117fc9:	89 85 94 fe ff ff    	mov    %eax,-0x16c(%ebp)
f0117fcf:	8b 85 94 fe ff ff    	mov    -0x16c(%ebp),%eax
f0117fd5:	ba 00 00 00 00       	mov    $0x0,%edx
f0117fda:	f7 b5 98 fe ff ff    	divl   -0x168(%ebp)
f0117fe0:	8b 85 94 fe ff ff    	mov    -0x16c(%ebp),%eax
f0117fe6:	29 d0                	sub    %edx,%eax
f0117fe8:	01 c8                	add    %ecx,%eax
f0117fea:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f0117fef:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0117ff2:	eb 6a                	jmp    f011805e <test_kmalloc+0x1227>
		{
			unsigned int * table;
			get_page_table(ptr_page_directory, va, &table);
f0117ff4:	a1 b8 0e 6c f0       	mov    0xf06c0eb8,%eax
f0117ff9:	83 ec 04             	sub    $0x4,%esp
f0117ffc:	8d 95 3c fe ff ff    	lea    -0x1c4(%ebp),%edx
f0118002:	52                   	push   %edx
f0118003:	ff 75 f4             	pushl  -0xc(%ebp)
f0118006:	50                   	push   %eax
f0118007:	e8 5d e9 fe ff       	call   f0106969 <get_page_table>
f011800c:	83 c4 10             	add    $0x10,%esp
			uint32 perm = table[PTX(va)] & 0xFFF;
f011800f:	8b 85 3c fe ff ff    	mov    -0x1c4(%ebp),%eax
f0118015:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0118018:	c1 ea 0c             	shr    $0xc,%edx
f011801b:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0118021:	c1 e2 02             	shl    $0x2,%edx
f0118024:	01 d0                	add    %edx,%eax
f0118026:	8b 00                	mov    (%eax),%eax
f0118028:	25 ff 0f 00 00       	and    $0xfff,%eax
f011802d:	89 85 90 fe ff ff    	mov    %eax,-0x170(%ebp)
			if ((perm & PERM_USER) == PERM_USER)
f0118033:	8b 85 90 fe ff ff    	mov    -0x170(%ebp),%eax
f0118039:	83 e0 04             	and    $0x4,%eax
f011803c:	85 c0                	test   %eax,%eax
f011803e:	74 17                	je     f0118057 <test_kmalloc+0x1220>
				panic("Wrong permissions: pages should be mapped with Supervisor permission only");
f0118040:	83 ec 04             	sub    $0x4,%esp
f0118043:	68 10 aa 13 f0       	push   $0xf013aa10
f0118048:	68 d7 00 00 00       	push   $0xd7
f011804d:	68 76 a8 13 f0       	push   $0xf013a876
f0118052:	e8 4f 81 fe ff       	call   f01001a6 <_panic>
		cprintf("\b\b\b90%");

		//permissions
		uint32 lastAllocAddress = (uint32)ptr_allocations[7] + 16*kilo ;
		uint32 va;
		for (va = ACTUAL_START; va < lastAllocAddress; va+=PAGE_SIZE)
f0118057:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
f011805e:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0118061:	3b 85 ac fe ff ff    	cmp    -0x154(%ebp),%eax
f0118067:	72 8b                	jb     f0117ff4 <test_kmalloc+0x11bd>
			uint32 perm = table[PTX(va)] & 0xFFF;
			if ((perm & PERM_USER) == PERM_USER)
				panic("Wrong permissions: pages should be mapped with Supervisor permission only");
		}

		cprintf("\b\b\b100%\n");
f0118069:	83 ec 0c             	sub    $0xc,%esp
f011806c:	68 5a aa 13 f0       	push   $0xf013aa5a
f0118071:	e8 b7 8b fe ff       	call   f0100c2d <cprintf>
f0118076:	83 c4 10             	add    $0x10,%esp

	}

	cprintf("\nCongratulations!! test kmalloc completed successfully.\n");
f0118079:	83 ec 0c             	sub    $0xc,%esp
f011807c:	68 64 aa 13 f0       	push   $0xf013aa64
f0118081:	e8 a7 8b fe ff       	call   f0100c2d <cprintf>
f0118086:	83 c4 10             	add    $0x10,%esp

	return 1;
f0118089:	b8 01 00 00 00       	mov    $0x1,%eax

}
f011808e:	8d 65 f8             	lea    -0x8(%ebp),%esp
f0118091:	5b                   	pop    %ebx
f0118092:	5f                   	pop    %edi
f0118093:	5d                   	pop    %ebp
f0118094:	c3                   	ret    

f0118095 <test_kmalloc_nextfit>:

int test_kmalloc_nextfit()
{
f0118095:	55                   	push   %ebp
f0118096:	89 e5                	mov    %esp,%ebp
f0118098:	57                   	push   %edi
f0118099:	53                   	push   %ebx
f011809a:	81 ec 70 04 00 00    	sub    $0x470,%esp
	cprintf("==============================================\n");
f01180a0:	83 ec 0c             	sub    $0xc,%esp
f01180a3:	68 b8 a7 13 f0       	push   $0xf013a7b8
f01180a8:	e8 80 8b fe ff       	call   f0100c2d <cprintf>
f01180ad:	83 c4 10             	add    $0x10,%esp
	cprintf("MAKE SURE to have a FRESH RUN for this test\n(i.e. don't run any program/test before it)\n");
f01180b0:	83 ec 0c             	sub    $0xc,%esp
f01180b3:	68 e8 a7 13 f0       	push   $0xf013a7e8
f01180b8:	e8 70 8b fe ff       	call   f0100c2d <cprintf>
f01180bd:	83 c4 10             	add    $0x10,%esp
	cprintf("==============================================\n");
f01180c0:	83 ec 0c             	sub    $0xc,%esp
f01180c3:	68 b8 a7 13 f0       	push   $0xf013a7b8
f01180c8:	e8 60 8b fe ff       	call   f0100c2d <cprintf>
f01180cd:	83 c4 10             	add    $0x10,%esp

	void* ptr_allocations[160] = {0};
f01180d0:	8d 95 88 fb ff ff    	lea    -0x478(%ebp),%edx
f01180d6:	b9 a0 00 00 00       	mov    $0xa0,%ecx
f01180db:	b8 00 00 00 00       	mov    $0x0,%eax
f01180e0:	89 d7                	mov    %edx,%edi
f01180e2:	f3 ab                	rep stos %eax,%es:(%edi)
	cprintf("This test has THREE cases. A pass message will be displayed after each one.\n");
f01180e4:	83 ec 0c             	sub    $0xc,%esp
f01180e7:	68 a0 aa 13 f0       	push   $0xf013aaa0
f01180ec:	e8 3c 8b fe ff       	call   f0100c2d <cprintf>
f01180f1:	83 c4 10             	add    $0x10,%esp

	// allocate pages
	int freeFrames = sys_calculate_free_frames() ;
f01180f4:	e8 c5 42 ff ff       	call   f010c3be <sys_calculate_free_frames>
f01180f9:	89 45 f0             	mov    %eax,-0x10(%ebp)
	int freeDiskFrames = pf_calculate_free_frames() ;
f01180fc:	e8 8b bb fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0118101:	89 45 ec             	mov    %eax,-0x14(%ebp)

	int i;
	//ptr_allocations[0] = kmalloc(2*Mega - KERNEL_SHARES_ARR_INIT_SIZE - KERNEL_SEMAPHORES_ARR_INIT_SIZE);
	for(i = 0; i< 79 ;i++)
f0118104:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f011810b:	eb 1f                	jmp    f011812c <test_kmalloc_nextfit+0x97>
	{
		ptr_allocations[i] = kmalloc(2*Mega);
f011810d:	83 ec 0c             	sub    $0xc,%esp
f0118110:	68 00 00 20 00       	push   $0x200000
f0118115:	e8 aa f4 fe ff       	call   f01075c4 <kmalloc>
f011811a:	83 c4 10             	add    $0x10,%esp
f011811d:	89 c2                	mov    %eax,%edx
f011811f:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0118122:	89 94 85 88 fb ff ff 	mov    %edx,-0x478(%ebp,%eax,4)
	int freeFrames = sys_calculate_free_frames() ;
	int freeDiskFrames = pf_calculate_free_frames() ;

	int i;
	//ptr_allocations[0] = kmalloc(2*Mega - KERNEL_SHARES_ARR_INIT_SIZE - KERNEL_SEMAPHORES_ARR_INIT_SIZE);
	for(i = 0; i< 79 ;i++)
f0118129:	ff 45 f4             	incl   -0xc(%ebp)
f011812c:	83 7d f4 4e          	cmpl   $0x4e,-0xc(%ebp)
f0118130:	7e db                	jle    f011810d <test_kmalloc_nextfit+0x78>
	{
		ptr_allocations[i] = kmalloc(2*Mega);
	}
	ptr_allocations[79] = kmalloc(2*Mega - PAGE_SIZE - INITIAL_KHEAP_ALLOCATIONS);
f0118132:	c7 45 e8 00 10 00 00 	movl   $0x1000,-0x18(%ebp)
f0118139:	8b 45 e8             	mov    -0x18(%ebp),%eax
f011813c:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0118141:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f0118144:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0118147:	ba 00 00 00 00       	mov    $0x0,%edx
f011814c:	f7 75 e8             	divl   -0x18(%ebp)
f011814f:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0118152:	29 d0                	sub    %edx,%eax
f0118154:	89 c1                	mov    %eax,%ecx
f0118156:	c7 45 e0 00 10 00 00 	movl   $0x1000,-0x20(%ebp)
f011815d:	a0 bc 0e 6c f0       	mov    0xf06c0ebc,%al
f0118162:	0f b6 d0             	movzbl %al,%edx
f0118165:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0118168:	01 d0                	add    %edx,%eax
f011816a:	48                   	dec    %eax
f011816b:	89 45 dc             	mov    %eax,-0x24(%ebp)
f011816e:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0118171:	ba 00 00 00 00       	mov    $0x0,%edx
f0118176:	f7 75 e0             	divl   -0x20(%ebp)
f0118179:	8b 45 dc             	mov    -0x24(%ebp),%eax
f011817c:	29 d0                	sub    %edx,%eax
f011817e:	01 c1                	add    %eax,%ecx
f0118180:	c7 45 d8 00 10 00 00 	movl   $0x1000,-0x28(%ebp)
f0118187:	a0 bc 0e 6c f0       	mov    0xf06c0ebc,%al
f011818c:	0f b6 c0             	movzbl %al,%eax
f011818f:	c1 e0 04             	shl    $0x4,%eax
f0118192:	89 c2                	mov    %eax,%edx
f0118194:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0118197:	01 d0                	add    %edx,%eax
f0118199:	48                   	dec    %eax
f011819a:	89 45 d4             	mov    %eax,-0x2c(%ebp)
f011819d:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f01181a0:	ba 00 00 00 00       	mov    $0x0,%edx
f01181a5:	f7 75 d8             	divl   -0x28(%ebp)
f01181a8:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f01181ab:	29 d0                	sub    %edx,%eax
f01181ad:	01 c8                	add    %ecx,%eax
f01181af:	ba 00 b0 1f 00       	mov    $0x1fb000,%edx
f01181b4:	29 c2                	sub    %eax,%edx
f01181b6:	89 d0                	mov    %edx,%eax
f01181b8:	83 ec 0c             	sub    $0xc,%esp
f01181bb:	50                   	push   %eax
f01181bc:	e8 03 f4 fe ff       	call   f01075c4 <kmalloc>
f01181c1:	83 c4 10             	add    $0x10,%esp
f01181c4:	89 85 c4 fc ff ff    	mov    %eax,-0x33c(%ebp)


	// randomly check the addresses of the allocation
	if( 	(uint32)ptr_allocations[0] != ACTUAL_START ||
f01181ca:	8b 85 88 fb ff ff    	mov    -0x478(%ebp),%eax
f01181d0:	89 c1                	mov    %eax,%ecx
f01181d2:	c7 45 d0 00 10 00 00 	movl   $0x1000,-0x30(%ebp)
f01181d9:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01181dc:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01181e1:	89 45 cc             	mov    %eax,-0x34(%ebp)
f01181e4:	8b 45 cc             	mov    -0x34(%ebp),%eax
f01181e7:	ba 00 00 00 00       	mov    $0x0,%edx
f01181ec:	f7 75 d0             	divl   -0x30(%ebp)
f01181ef:	8b 45 cc             	mov    -0x34(%ebp),%eax
f01181f2:	29 d0                	sub    %edx,%eax
f01181f4:	89 c3                	mov    %eax,%ebx
f01181f6:	c7 45 c8 00 10 00 00 	movl   $0x1000,-0x38(%ebp)
f01181fd:	a0 bc 0e 6c f0       	mov    0xf06c0ebc,%al
f0118202:	0f b6 d0             	movzbl %al,%edx
f0118205:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0118208:	01 d0                	add    %edx,%eax
f011820a:	48                   	dec    %eax
f011820b:	89 45 c4             	mov    %eax,-0x3c(%ebp)
f011820e:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0118211:	ba 00 00 00 00       	mov    $0x0,%edx
f0118216:	f7 75 c8             	divl   -0x38(%ebp)
f0118219:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f011821c:	29 d0                	sub    %edx,%eax
f011821e:	01 c3                	add    %eax,%ebx
f0118220:	c7 45 c0 00 10 00 00 	movl   $0x1000,-0x40(%ebp)
f0118227:	a0 bc 0e 6c f0       	mov    0xf06c0ebc,%al
f011822c:	0f b6 c0             	movzbl %al,%eax
f011822f:	c1 e0 04             	shl    $0x4,%eax
f0118232:	89 c2                	mov    %eax,%edx
f0118234:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0118237:	01 d0                	add    %edx,%eax
f0118239:	48                   	dec    %eax
f011823a:	89 45 bc             	mov    %eax,-0x44(%ebp)
f011823d:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0118240:	ba 00 00 00 00       	mov    $0x0,%edx
f0118245:	f7 75 c0             	divl   -0x40(%ebp)
f0118248:	8b 45 bc             	mov    -0x44(%ebp),%eax
f011824b:	29 d0                	sub    %edx,%eax
f011824d:	01 d8                	add    %ebx,%eax
f011824f:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f0118254:	39 c1                	cmp    %eax,%ecx
f0118256:	0f 85 ed 04 00 00    	jne    f0118749 <test_kmalloc_nextfit+0x6b4>
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
f011825c:	8b 85 90 fb ff ff    	mov    -0x470(%ebp),%eax
f0118262:	89 c1                	mov    %eax,%ecx
f0118264:	c7 45 b8 00 10 00 00 	movl   $0x1000,-0x48(%ebp)
f011826b:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011826e:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0118273:	89 45 b4             	mov    %eax,-0x4c(%ebp)
f0118276:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0118279:	ba 00 00 00 00       	mov    $0x0,%edx
f011827e:	f7 75 b8             	divl   -0x48(%ebp)
f0118281:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0118284:	29 d0                	sub    %edx,%eax
f0118286:	89 c3                	mov    %eax,%ebx
f0118288:	c7 45 b0 00 10 00 00 	movl   $0x1000,-0x50(%ebp)
f011828f:	a0 bc 0e 6c f0       	mov    0xf06c0ebc,%al
f0118294:	0f b6 d0             	movzbl %al,%edx
f0118297:	8b 45 b0             	mov    -0x50(%ebp),%eax
f011829a:	01 d0                	add    %edx,%eax
f011829c:	48                   	dec    %eax
f011829d:	89 45 ac             	mov    %eax,-0x54(%ebp)
f01182a0:	8b 45 ac             	mov    -0x54(%ebp),%eax
f01182a3:	ba 00 00 00 00       	mov    $0x0,%edx
f01182a8:	f7 75 b0             	divl   -0x50(%ebp)
f01182ab:	8b 45 ac             	mov    -0x54(%ebp),%eax
f01182ae:	29 d0                	sub    %edx,%eax
f01182b0:	01 c3                	add    %eax,%ebx
f01182b2:	c7 45 a8 00 10 00 00 	movl   $0x1000,-0x58(%ebp)
f01182b9:	a0 bc 0e 6c f0       	mov    0xf06c0ebc,%al
f01182be:	0f b6 c0             	movzbl %al,%eax
f01182c1:	c1 e0 04             	shl    $0x4,%eax
f01182c4:	89 c2                	mov    %eax,%edx
f01182c6:	8b 45 a8             	mov    -0x58(%ebp),%eax
f01182c9:	01 d0                	add    %edx,%eax
f01182cb:	48                   	dec    %eax
f01182cc:	89 45 a4             	mov    %eax,-0x5c(%ebp)
f01182cf:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f01182d2:	ba 00 00 00 00       	mov    $0x0,%edx
f01182d7:	f7 75 a8             	divl   -0x58(%ebp)
f01182da:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f01182dd:	29 d0                	sub    %edx,%eax
f01182df:	01 d8                	add    %ebx,%eax
f01182e1:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
	}
	ptr_allocations[79] = kmalloc(2*Mega - PAGE_SIZE - INITIAL_KHEAP_ALLOCATIONS);


	// randomly check the addresses of the allocation
	if( 	(uint32)ptr_allocations[0] != ACTUAL_START ||
f01182e6:	39 c1                	cmp    %eax,%ecx
f01182e8:	0f 85 5b 04 00 00    	jne    f0118749 <test_kmalloc_nextfit+0x6b4>
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
			(uint32)ptr_allocations[8] != (ACTUAL_START + 16*Mega) ||
f01182ee:	8b 85 a8 fb ff ff    	mov    -0x458(%ebp),%eax
f01182f4:	89 c1                	mov    %eax,%ecx
f01182f6:	c7 45 a0 00 10 00 00 	movl   $0x1000,-0x60(%ebp)
f01182fd:	8b 45 a0             	mov    -0x60(%ebp),%eax
f0118300:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0118305:	89 45 9c             	mov    %eax,-0x64(%ebp)
f0118308:	8b 45 9c             	mov    -0x64(%ebp),%eax
f011830b:	ba 00 00 00 00       	mov    $0x0,%edx
f0118310:	f7 75 a0             	divl   -0x60(%ebp)
f0118313:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0118316:	29 d0                	sub    %edx,%eax
f0118318:	89 c3                	mov    %eax,%ebx
f011831a:	c7 45 98 00 10 00 00 	movl   $0x1000,-0x68(%ebp)
f0118321:	a0 bc 0e 6c f0       	mov    0xf06c0ebc,%al
f0118326:	0f b6 d0             	movzbl %al,%edx
f0118329:	8b 45 98             	mov    -0x68(%ebp),%eax
f011832c:	01 d0                	add    %edx,%eax
f011832e:	48                   	dec    %eax
f011832f:	89 45 94             	mov    %eax,-0x6c(%ebp)
f0118332:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0118335:	ba 00 00 00 00       	mov    $0x0,%edx
f011833a:	f7 75 98             	divl   -0x68(%ebp)
f011833d:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0118340:	29 d0                	sub    %edx,%eax
f0118342:	01 c3                	add    %eax,%ebx
f0118344:	c7 45 90 00 10 00 00 	movl   $0x1000,-0x70(%ebp)
f011834b:	a0 bc 0e 6c f0       	mov    0xf06c0ebc,%al
f0118350:	0f b6 c0             	movzbl %al,%eax
f0118353:	c1 e0 04             	shl    $0x4,%eax
f0118356:	89 c2                	mov    %eax,%edx
f0118358:	8b 45 90             	mov    -0x70(%ebp),%eax
f011835b:	01 d0                	add    %edx,%eax
f011835d:	48                   	dec    %eax
f011835e:	89 45 8c             	mov    %eax,-0x74(%ebp)
f0118361:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0118364:	ba 00 00 00 00       	mov    $0x0,%edx
f0118369:	f7 75 90             	divl   -0x70(%ebp)
f011836c:	8b 45 8c             	mov    -0x74(%ebp),%eax
f011836f:	29 d0                	sub    %edx,%eax
f0118371:	01 d8                	add    %ebx,%eax
f0118373:	2d 00 c0 ff 08       	sub    $0x8ffc000,%eax
	ptr_allocations[79] = kmalloc(2*Mega - PAGE_SIZE - INITIAL_KHEAP_ALLOCATIONS);


	// randomly check the addresses of the allocation
	if( 	(uint32)ptr_allocations[0] != ACTUAL_START ||
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
f0118378:	39 c1                	cmp    %eax,%ecx
f011837a:	0f 85 c9 03 00 00    	jne    f0118749 <test_kmalloc_nextfit+0x6b4>
			(uint32)ptr_allocations[8] != (ACTUAL_START + 16*Mega) ||
			(uint32)ptr_allocations[10] != (ACTUAL_START + 20*Mega) ||
f0118380:	8b 85 b0 fb ff ff    	mov    -0x450(%ebp),%eax
f0118386:	89 c1                	mov    %eax,%ecx
f0118388:	c7 45 88 00 10 00 00 	movl   $0x1000,-0x78(%ebp)
f011838f:	8b 45 88             	mov    -0x78(%ebp),%eax
f0118392:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0118397:	89 45 84             	mov    %eax,-0x7c(%ebp)
f011839a:	8b 45 84             	mov    -0x7c(%ebp),%eax
f011839d:	ba 00 00 00 00       	mov    $0x0,%edx
f01183a2:	f7 75 88             	divl   -0x78(%ebp)
f01183a5:	8b 45 84             	mov    -0x7c(%ebp),%eax
f01183a8:	29 d0                	sub    %edx,%eax
f01183aa:	89 c3                	mov    %eax,%ebx
f01183ac:	c7 45 80 00 10 00 00 	movl   $0x1000,-0x80(%ebp)
f01183b3:	a0 bc 0e 6c f0       	mov    0xf06c0ebc,%al
f01183b8:	0f b6 d0             	movzbl %al,%edx
f01183bb:	8b 45 80             	mov    -0x80(%ebp),%eax
f01183be:	01 d0                	add    %edx,%eax
f01183c0:	48                   	dec    %eax
f01183c1:	89 85 7c ff ff ff    	mov    %eax,-0x84(%ebp)
f01183c7:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f01183cd:	ba 00 00 00 00       	mov    $0x0,%edx
f01183d2:	f7 75 80             	divl   -0x80(%ebp)
f01183d5:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f01183db:	29 d0                	sub    %edx,%eax
f01183dd:	01 c3                	add    %eax,%ebx
f01183df:	c7 85 78 ff ff ff 00 	movl   $0x1000,-0x88(%ebp)
f01183e6:	10 00 00 
f01183e9:	a0 bc 0e 6c f0       	mov    0xf06c0ebc,%al
f01183ee:	0f b6 c0             	movzbl %al,%eax
f01183f1:	c1 e0 04             	shl    $0x4,%eax
f01183f4:	89 c2                	mov    %eax,%edx
f01183f6:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f01183fc:	01 d0                	add    %edx,%eax
f01183fe:	48                   	dec    %eax
f01183ff:	89 85 74 ff ff ff    	mov    %eax,-0x8c(%ebp)
f0118405:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f011840b:	ba 00 00 00 00       	mov    $0x0,%edx
f0118410:	f7 b5 78 ff ff ff    	divl   -0x88(%ebp)
f0118416:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f011841c:	29 d0                	sub    %edx,%eax
f011841e:	01 d8                	add    %ebx,%eax
f0118420:	2d 00 c0 bf 08       	sub    $0x8bfc000,%eax


	// randomly check the addresses of the allocation
	if( 	(uint32)ptr_allocations[0] != ACTUAL_START ||
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
			(uint32)ptr_allocations[8] != (ACTUAL_START + 16*Mega) ||
f0118425:	39 c1                	cmp    %eax,%ecx
f0118427:	0f 85 1c 03 00 00    	jne    f0118749 <test_kmalloc_nextfit+0x6b4>
			(uint32)ptr_allocations[10] != (ACTUAL_START + 20*Mega) ||
			(uint32)ptr_allocations[15] != (ACTUAL_START + 30*Mega) ||
f011842d:	8b 85 c4 fb ff ff    	mov    -0x43c(%ebp),%eax
f0118433:	89 c1                	mov    %eax,%ecx
f0118435:	c7 85 70 ff ff ff 00 	movl   $0x1000,-0x90(%ebp)
f011843c:	10 00 00 
f011843f:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f0118445:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011844a:	89 85 6c ff ff ff    	mov    %eax,-0x94(%ebp)
f0118450:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f0118456:	ba 00 00 00 00       	mov    $0x0,%edx
f011845b:	f7 b5 70 ff ff ff    	divl   -0x90(%ebp)
f0118461:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f0118467:	29 d0                	sub    %edx,%eax
f0118469:	89 c3                	mov    %eax,%ebx
f011846b:	c7 85 68 ff ff ff 00 	movl   $0x1000,-0x98(%ebp)
f0118472:	10 00 00 
f0118475:	a0 bc 0e 6c f0       	mov    0xf06c0ebc,%al
f011847a:	0f b6 d0             	movzbl %al,%edx
f011847d:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f0118483:	01 d0                	add    %edx,%eax
f0118485:	48                   	dec    %eax
f0118486:	89 85 64 ff ff ff    	mov    %eax,-0x9c(%ebp)
f011848c:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f0118492:	ba 00 00 00 00       	mov    $0x0,%edx
f0118497:	f7 b5 68 ff ff ff    	divl   -0x98(%ebp)
f011849d:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f01184a3:	29 d0                	sub    %edx,%eax
f01184a5:	01 c3                	add    %eax,%ebx
f01184a7:	c7 85 60 ff ff ff 00 	movl   $0x1000,-0xa0(%ebp)
f01184ae:	10 00 00 
f01184b1:	a0 bc 0e 6c f0       	mov    0xf06c0ebc,%al
f01184b6:	0f b6 c0             	movzbl %al,%eax
f01184b9:	c1 e0 04             	shl    $0x4,%eax
f01184bc:	89 c2                	mov    %eax,%edx
f01184be:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f01184c4:	01 d0                	add    %edx,%eax
f01184c6:	48                   	dec    %eax
f01184c7:	89 85 5c ff ff ff    	mov    %eax,-0xa4(%ebp)
f01184cd:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f01184d3:	ba 00 00 00 00       	mov    $0x0,%edx
f01184d8:	f7 b5 60 ff ff ff    	divl   -0xa0(%ebp)
f01184de:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f01184e4:	29 d0                	sub    %edx,%eax
f01184e6:	01 d8                	add    %ebx,%eax
f01184e8:	2d 00 c0 1f 08       	sub    $0x81fc000,%eax

	// randomly check the addresses of the allocation
	if( 	(uint32)ptr_allocations[0] != ACTUAL_START ||
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
			(uint32)ptr_allocations[8] != (ACTUAL_START + 16*Mega) ||
			(uint32)ptr_allocations[10] != (ACTUAL_START + 20*Mega) ||
f01184ed:	39 c1                	cmp    %eax,%ecx
f01184ef:	0f 85 54 02 00 00    	jne    f0118749 <test_kmalloc_nextfit+0x6b4>
			(uint32)ptr_allocations[15] != (ACTUAL_START + 30*Mega) ||
			(uint32)ptr_allocations[20] != (ACTUAL_START + 40*Mega) ||
f01184f5:	8b 85 d8 fb ff ff    	mov    -0x428(%ebp),%eax
f01184fb:	89 c1                	mov    %eax,%ecx
f01184fd:	c7 85 58 ff ff ff 00 	movl   $0x1000,-0xa8(%ebp)
f0118504:	10 00 00 
f0118507:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f011850d:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0118512:	89 85 54 ff ff ff    	mov    %eax,-0xac(%ebp)
f0118518:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f011851e:	ba 00 00 00 00       	mov    $0x0,%edx
f0118523:	f7 b5 58 ff ff ff    	divl   -0xa8(%ebp)
f0118529:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f011852f:	29 d0                	sub    %edx,%eax
f0118531:	89 c3                	mov    %eax,%ebx
f0118533:	c7 85 50 ff ff ff 00 	movl   $0x1000,-0xb0(%ebp)
f011853a:	10 00 00 
f011853d:	a0 bc 0e 6c f0       	mov    0xf06c0ebc,%al
f0118542:	0f b6 d0             	movzbl %al,%edx
f0118545:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f011854b:	01 d0                	add    %edx,%eax
f011854d:	48                   	dec    %eax
f011854e:	89 85 4c ff ff ff    	mov    %eax,-0xb4(%ebp)
f0118554:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f011855a:	ba 00 00 00 00       	mov    $0x0,%edx
f011855f:	f7 b5 50 ff ff ff    	divl   -0xb0(%ebp)
f0118565:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f011856b:	29 d0                	sub    %edx,%eax
f011856d:	01 c3                	add    %eax,%ebx
f011856f:	c7 85 48 ff ff ff 00 	movl   $0x1000,-0xb8(%ebp)
f0118576:	10 00 00 
f0118579:	a0 bc 0e 6c f0       	mov    0xf06c0ebc,%al
f011857e:	0f b6 c0             	movzbl %al,%eax
f0118581:	c1 e0 04             	shl    $0x4,%eax
f0118584:	89 c2                	mov    %eax,%edx
f0118586:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f011858c:	01 d0                	add    %edx,%eax
f011858e:	48                   	dec    %eax
f011858f:	89 85 44 ff ff ff    	mov    %eax,-0xbc(%ebp)
f0118595:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f011859b:	ba 00 00 00 00       	mov    $0x0,%edx
f01185a0:	f7 b5 48 ff ff ff    	divl   -0xb8(%ebp)
f01185a6:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f01185ac:	29 d0                	sub    %edx,%eax
f01185ae:	01 d8                	add    %ebx,%eax
f01185b0:	2d 00 c0 7f 07       	sub    $0x77fc000,%eax
	// randomly check the addresses of the allocation
	if( 	(uint32)ptr_allocations[0] != ACTUAL_START ||
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
			(uint32)ptr_allocations[8] != (ACTUAL_START + 16*Mega) ||
			(uint32)ptr_allocations[10] != (ACTUAL_START + 20*Mega) ||
			(uint32)ptr_allocations[15] != (ACTUAL_START + 30*Mega) ||
f01185b5:	39 c1                	cmp    %eax,%ecx
f01185b7:	0f 85 8c 01 00 00    	jne    f0118749 <test_kmalloc_nextfit+0x6b4>
			(uint32)ptr_allocations[20] != (ACTUAL_START + 40*Mega) ||
			(uint32)ptr_allocations[25] != (ACTUAL_START + 50*Mega) ||
f01185bd:	8b 85 ec fb ff ff    	mov    -0x414(%ebp),%eax
f01185c3:	89 c1                	mov    %eax,%ecx
f01185c5:	c7 85 40 ff ff ff 00 	movl   $0x1000,-0xc0(%ebp)
f01185cc:	10 00 00 
f01185cf:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f01185d5:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01185da:	89 85 3c ff ff ff    	mov    %eax,-0xc4(%ebp)
f01185e0:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f01185e6:	ba 00 00 00 00       	mov    $0x0,%edx
f01185eb:	f7 b5 40 ff ff ff    	divl   -0xc0(%ebp)
f01185f1:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f01185f7:	29 d0                	sub    %edx,%eax
f01185f9:	89 c3                	mov    %eax,%ebx
f01185fb:	c7 85 38 ff ff ff 00 	movl   $0x1000,-0xc8(%ebp)
f0118602:	10 00 00 
f0118605:	a0 bc 0e 6c f0       	mov    0xf06c0ebc,%al
f011860a:	0f b6 d0             	movzbl %al,%edx
f011860d:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f0118613:	01 d0                	add    %edx,%eax
f0118615:	48                   	dec    %eax
f0118616:	89 85 34 ff ff ff    	mov    %eax,-0xcc(%ebp)
f011861c:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f0118622:	ba 00 00 00 00       	mov    $0x0,%edx
f0118627:	f7 b5 38 ff ff ff    	divl   -0xc8(%ebp)
f011862d:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f0118633:	29 d0                	sub    %edx,%eax
f0118635:	01 c3                	add    %eax,%ebx
f0118637:	c7 85 30 ff ff ff 00 	movl   $0x1000,-0xd0(%ebp)
f011863e:	10 00 00 
f0118641:	a0 bc 0e 6c f0       	mov    0xf06c0ebc,%al
f0118646:	0f b6 c0             	movzbl %al,%eax
f0118649:	c1 e0 04             	shl    $0x4,%eax
f011864c:	89 c2                	mov    %eax,%edx
f011864e:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f0118654:	01 d0                	add    %edx,%eax
f0118656:	48                   	dec    %eax
f0118657:	89 85 2c ff ff ff    	mov    %eax,-0xd4(%ebp)
f011865d:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f0118663:	ba 00 00 00 00       	mov    $0x0,%edx
f0118668:	f7 b5 30 ff ff ff    	divl   -0xd0(%ebp)
f011866e:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f0118674:	29 d0                	sub    %edx,%eax
f0118676:	01 d8                	add    %ebx,%eax
f0118678:	2d 00 c0 df 06       	sub    $0x6dfc000,%eax
	if( 	(uint32)ptr_allocations[0] != ACTUAL_START ||
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
			(uint32)ptr_allocations[8] != (ACTUAL_START + 16*Mega) ||
			(uint32)ptr_allocations[10] != (ACTUAL_START + 20*Mega) ||
			(uint32)ptr_allocations[15] != (ACTUAL_START + 30*Mega) ||
			(uint32)ptr_allocations[20] != (ACTUAL_START + 40*Mega) ||
f011867d:	39 c1                	cmp    %eax,%ecx
f011867f:	0f 85 c4 00 00 00    	jne    f0118749 <test_kmalloc_nextfit+0x6b4>
			(uint32)ptr_allocations[25] != (ACTUAL_START + 50*Mega) ||
			(uint32)ptr_allocations[79] != (ACTUAL_START + 158*Mega ))
f0118685:	8b 85 c4 fc ff ff    	mov    -0x33c(%ebp),%eax
f011868b:	89 c1                	mov    %eax,%ecx
f011868d:	c7 85 28 ff ff ff 00 	movl   $0x1000,-0xd8(%ebp)
f0118694:	10 00 00 
f0118697:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f011869d:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01186a2:	89 85 24 ff ff ff    	mov    %eax,-0xdc(%ebp)
f01186a8:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f01186ae:	ba 00 00 00 00       	mov    $0x0,%edx
f01186b3:	f7 b5 28 ff ff ff    	divl   -0xd8(%ebp)
f01186b9:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f01186bf:	29 d0                	sub    %edx,%eax
f01186c1:	89 c3                	mov    %eax,%ebx
f01186c3:	c7 85 20 ff ff ff 00 	movl   $0x1000,-0xe0(%ebp)
f01186ca:	10 00 00 
f01186cd:	a0 bc 0e 6c f0       	mov    0xf06c0ebc,%al
f01186d2:	0f b6 d0             	movzbl %al,%edx
f01186d5:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f01186db:	01 d0                	add    %edx,%eax
f01186dd:	48                   	dec    %eax
f01186de:	89 85 1c ff ff ff    	mov    %eax,-0xe4(%ebp)
f01186e4:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f01186ea:	ba 00 00 00 00       	mov    $0x0,%edx
f01186ef:	f7 b5 20 ff ff ff    	divl   -0xe0(%ebp)
f01186f5:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f01186fb:	29 d0                	sub    %edx,%eax
f01186fd:	01 c3                	add    %eax,%ebx
f01186ff:	c7 85 18 ff ff ff 00 	movl   $0x1000,-0xe8(%ebp)
f0118706:	10 00 00 
f0118709:	a0 bc 0e 6c f0       	mov    0xf06c0ebc,%al
f011870e:	0f b6 c0             	movzbl %al,%eax
f0118711:	c1 e0 04             	shl    $0x4,%eax
f0118714:	89 c2                	mov    %eax,%edx
f0118716:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f011871c:	01 d0                	add    %edx,%eax
f011871e:	48                   	dec    %eax
f011871f:	89 85 14 ff ff ff    	mov    %eax,-0xec(%ebp)
f0118725:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f011872b:	ba 00 00 00 00       	mov    $0x0,%edx
f0118730:	f7 b5 18 ff ff ff    	divl   -0xe8(%ebp)
f0118736:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f011873c:	29 d0                	sub    %edx,%eax
f011873e:	01 d8                	add    %ebx,%eax
f0118740:	2d 00 c0 1f 00       	sub    $0x1fc000,%eax
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
			(uint32)ptr_allocations[8] != (ACTUAL_START + 16*Mega) ||
			(uint32)ptr_allocations[10] != (ACTUAL_START + 20*Mega) ||
			(uint32)ptr_allocations[15] != (ACTUAL_START + 30*Mega) ||
			(uint32)ptr_allocations[20] != (ACTUAL_START + 40*Mega) ||
			(uint32)ptr_allocations[25] != (ACTUAL_START + 50*Mega) ||
f0118745:	39 c1                	cmp    %eax,%ecx
f0118747:	74 17                	je     f0118760 <test_kmalloc_nextfit+0x6cb>
			(uint32)ptr_allocations[79] != (ACTUAL_START + 158*Mega ))
		panic("Wrong allocation, Check next fitting strategy is working correctly");
f0118749:	83 ec 04             	sub    $0x4,%esp
f011874c:	68 f0 aa 13 f0       	push   $0xf013aaf0
f0118751:	68 03 01 00 00       	push   $0x103
f0118756:	68 76 a8 13 f0       	push   $0xf013a876
f011875b:	e8 46 7a fe ff       	call   f01001a6 <_panic>

	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0118760:	e8 27 b5 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0118765:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f0118768:	74 17                	je     f0118781 <test_kmalloc_nextfit+0x6ec>
f011876a:	83 ec 04             	sub    $0x4,%esp
f011876d:	68 90 a8 13 f0       	push   $0xf013a890
f0118772:	68 05 01 00 00       	push   $0x105
f0118777:	68 76 a8 13 f0       	push   $0xf013a876
f011877c:	e8 25 7a fe ff       	call   f01001a6 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) != (160*Mega - PAGE_SIZE - INITIAL_KHEAP_ALLOCATIONS)/(PAGE_SIZE) ) panic("Wrong allocation");
f0118781:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f0118784:	e8 35 3c ff ff       	call   f010c3be <sys_calculate_free_frames>
f0118789:	29 c3                	sub    %eax,%ebx
f011878b:	89 d9                	mov    %ebx,%ecx
f011878d:	c7 85 10 ff ff ff 00 	movl   $0x1000,-0xf0(%ebp)
f0118794:	10 00 00 
f0118797:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f011879d:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01187a2:	89 85 0c ff ff ff    	mov    %eax,-0xf4(%ebp)
f01187a8:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f01187ae:	ba 00 00 00 00       	mov    $0x0,%edx
f01187b3:	f7 b5 10 ff ff ff    	divl   -0xf0(%ebp)
f01187b9:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f01187bf:	29 d0                	sub    %edx,%eax
f01187c1:	89 c3                	mov    %eax,%ebx
f01187c3:	c7 85 08 ff ff ff 00 	movl   $0x1000,-0xf8(%ebp)
f01187ca:	10 00 00 
f01187cd:	a0 bc 0e 6c f0       	mov    0xf06c0ebc,%al
f01187d2:	0f b6 d0             	movzbl %al,%edx
f01187d5:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f01187db:	01 d0                	add    %edx,%eax
f01187dd:	48                   	dec    %eax
f01187de:	89 85 04 ff ff ff    	mov    %eax,-0xfc(%ebp)
f01187e4:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f01187ea:	ba 00 00 00 00       	mov    $0x0,%edx
f01187ef:	f7 b5 08 ff ff ff    	divl   -0xf8(%ebp)
f01187f5:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f01187fb:	29 d0                	sub    %edx,%eax
f01187fd:	01 c3                	add    %eax,%ebx
f01187ff:	c7 85 00 ff ff ff 00 	movl   $0x1000,-0x100(%ebp)
f0118806:	10 00 00 
f0118809:	a0 bc 0e 6c f0       	mov    0xf06c0ebc,%al
f011880e:	0f b6 c0             	movzbl %al,%eax
f0118811:	c1 e0 04             	shl    $0x4,%eax
f0118814:	89 c2                	mov    %eax,%edx
f0118816:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f011881c:	01 d0                	add    %edx,%eax
f011881e:	48                   	dec    %eax
f011881f:	89 85 fc fe ff ff    	mov    %eax,-0x104(%ebp)
f0118825:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f011882b:	ba 00 00 00 00       	mov    $0x0,%edx
f0118830:	f7 b5 00 ff ff ff    	divl   -0x100(%ebp)
f0118836:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f011883c:	29 d0                	sub    %edx,%eax
f011883e:	01 d8                	add    %ebx,%eax
f0118840:	ba 00 b0 ff 09       	mov    $0x9ffb000,%edx
f0118845:	29 c2                	sub    %eax,%edx
f0118847:	89 d0                	mov    %edx,%eax
f0118849:	c1 e8 0c             	shr    $0xc,%eax
f011884c:	39 c1                	cmp    %eax,%ecx
f011884e:	74 17                	je     f0118867 <test_kmalloc_nextfit+0x7d2>
f0118850:	83 ec 04             	sub    $0x4,%esp
f0118853:	68 33 ab 13 f0       	push   $0xf013ab33
f0118858:	68 06 01 00 00       	push   $0x106
f011885d:	68 76 a8 13 f0       	push   $0xf013a876
f0118862:	e8 3f 79 fe ff       	call   f01001a6 <_panic>

	// Make memory holes.
	freeDiskFrames = pf_calculate_free_frames() ;
f0118867:	e8 20 b4 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011886c:	89 45 ec             	mov    %eax,-0x14(%ebp)
	freeFrames = sys_calculate_free_frames() ;
f011886f:	e8 4a 3b ff ff       	call   f010c3be <sys_calculate_free_frames>
f0118874:	89 45 f0             	mov    %eax,-0x10(%ebp)

	kfree(ptr_allocations[0]);		// Hole 1 = 2 M
f0118877:	8b 85 88 fb ff ff    	mov    -0x478(%ebp),%eax
f011887d:	83 ec 0c             	sub    $0xc,%esp
f0118880:	50                   	push   %eax
f0118881:	e8 58 ed fe ff       	call   f01075de <kfree>
f0118886:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[2]);		// Hole 2 = 4 M
f0118889:	8b 85 90 fb ff ff    	mov    -0x470(%ebp),%eax
f011888f:	83 ec 0c             	sub    $0xc,%esp
f0118892:	50                   	push   %eax
f0118893:	e8 46 ed fe ff       	call   f01075de <kfree>
f0118898:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[3]);
f011889b:	8b 85 94 fb ff ff    	mov    -0x46c(%ebp),%eax
f01188a1:	83 ec 0c             	sub    $0xc,%esp
f01188a4:	50                   	push   %eax
f01188a5:	e8 34 ed fe ff       	call   f01075de <kfree>
f01188aa:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[5]);		// Hole 3 = 2 M
f01188ad:	8b 85 9c fb ff ff    	mov    -0x464(%ebp),%eax
f01188b3:	83 ec 0c             	sub    $0xc,%esp
f01188b6:	50                   	push   %eax
f01188b7:	e8 22 ed fe ff       	call   f01075de <kfree>
f01188bc:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[10]);		// Hole 4 = 6 M
f01188bf:	8b 85 b0 fb ff ff    	mov    -0x450(%ebp),%eax
f01188c5:	83 ec 0c             	sub    $0xc,%esp
f01188c8:	50                   	push   %eax
f01188c9:	e8 10 ed fe ff       	call   f01075de <kfree>
f01188ce:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[12]);
f01188d1:	8b 85 b8 fb ff ff    	mov    -0x448(%ebp),%eax
f01188d7:	83 ec 0c             	sub    $0xc,%esp
f01188da:	50                   	push   %eax
f01188db:	e8 fe ec fe ff       	call   f01075de <kfree>
f01188e0:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[11]);
f01188e3:	8b 85 b4 fb ff ff    	mov    -0x44c(%ebp),%eax
f01188e9:	83 ec 0c             	sub    $0xc,%esp
f01188ec:	50                   	push   %eax
f01188ed:	e8 ec ec fe ff       	call   f01075de <kfree>
f01188f2:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[20]);		// Hole 5 = 2 M
f01188f5:	8b 85 d8 fb ff ff    	mov    -0x428(%ebp),%eax
f01188fb:	83 ec 0c             	sub    $0xc,%esp
f01188fe:	50                   	push   %eax
f01188ff:	e8 da ec fe ff       	call   f01075de <kfree>
f0118904:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[25]);		// Hole 6 = 2 M
f0118907:	8b 85 ec fb ff ff    	mov    -0x414(%ebp),%eax
f011890d:	83 ec 0c             	sub    $0xc,%esp
f0118910:	50                   	push   %eax
f0118911:	e8 c8 ec fe ff       	call   f01075de <kfree>
f0118916:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[79]);		// Hole 7 = 2 M - 4 KB
f0118919:	8b 85 c4 fc ff ff    	mov    -0x33c(%ebp),%eax
f011891f:	83 ec 0c             	sub    $0xc,%esp
f0118922:	50                   	push   %eax
f0118923:	e8 b6 ec fe ff       	call   f01075de <kfree>
f0118928:	83 c4 10             	add    $0x10,%esp

	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011892b:	e8 5c b3 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0118930:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f0118933:	74 17                	je     f011894c <test_kmalloc_nextfit+0x8b7>
f0118935:	83 ec 04             	sub    $0x4,%esp
f0118938:	68 90 a8 13 f0       	push   $0xf013a890
f011893d:	68 17 01 00 00       	push   $0x117
f0118942:	68 76 a8 13 f0       	push   $0xf013a876
f0118947:	e8 5a 78 fe ff       	call   f01001a6 <_panic>
	if ((sys_calculate_free_frames() - freeFrames) != ((10*2*Mega) - PAGE_SIZE - INITIAL_KHEAP_ALLOCATIONS)/PAGE_SIZE) panic("Wrong free: Extra or less pages are removed from main memory");
f011894c:	e8 6d 3a ff ff       	call   f010c3be <sys_calculate_free_frames>
f0118951:	89 c2                	mov    %eax,%edx
f0118953:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0118956:	89 d1                	mov    %edx,%ecx
f0118958:	29 c1                	sub    %eax,%ecx
f011895a:	c7 85 f8 fe ff ff 00 	movl   $0x1000,-0x108(%ebp)
f0118961:	10 00 00 
f0118964:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f011896a:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011896f:	89 85 f4 fe ff ff    	mov    %eax,-0x10c(%ebp)
f0118975:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f011897b:	ba 00 00 00 00       	mov    $0x0,%edx
f0118980:	f7 b5 f8 fe ff ff    	divl   -0x108(%ebp)
f0118986:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f011898c:	29 d0                	sub    %edx,%eax
f011898e:	89 c3                	mov    %eax,%ebx
f0118990:	c7 85 f0 fe ff ff 00 	movl   $0x1000,-0x110(%ebp)
f0118997:	10 00 00 
f011899a:	a0 bc 0e 6c f0       	mov    0xf06c0ebc,%al
f011899f:	0f b6 d0             	movzbl %al,%edx
f01189a2:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f01189a8:	01 d0                	add    %edx,%eax
f01189aa:	48                   	dec    %eax
f01189ab:	89 85 ec fe ff ff    	mov    %eax,-0x114(%ebp)
f01189b1:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f01189b7:	ba 00 00 00 00       	mov    $0x0,%edx
f01189bc:	f7 b5 f0 fe ff ff    	divl   -0x110(%ebp)
f01189c2:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f01189c8:	29 d0                	sub    %edx,%eax
f01189ca:	01 c3                	add    %eax,%ebx
f01189cc:	c7 85 e8 fe ff ff 00 	movl   $0x1000,-0x118(%ebp)
f01189d3:	10 00 00 
f01189d6:	a0 bc 0e 6c f0       	mov    0xf06c0ebc,%al
f01189db:	0f b6 c0             	movzbl %al,%eax
f01189de:	c1 e0 04             	shl    $0x4,%eax
f01189e1:	89 c2                	mov    %eax,%edx
f01189e3:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f01189e9:	01 d0                	add    %edx,%eax
f01189eb:	48                   	dec    %eax
f01189ec:	89 85 e4 fe ff ff    	mov    %eax,-0x11c(%ebp)
f01189f2:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f01189f8:	ba 00 00 00 00       	mov    $0x0,%edx
f01189fd:	f7 b5 e8 fe ff ff    	divl   -0x118(%ebp)
f0118a03:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f0118a09:	29 d0                	sub    %edx,%eax
f0118a0b:	01 d8                	add    %ebx,%eax
f0118a0d:	ba 00 b0 3f 01       	mov    $0x13fb000,%edx
f0118a12:	29 c2                	sub    %eax,%edx
f0118a14:	89 d0                	mov    %edx,%eax
f0118a16:	c1 e8 0c             	shr    $0xc,%eax
f0118a19:	39 c1                	cmp    %eax,%ecx
f0118a1b:	74 17                	je     f0118a34 <test_kmalloc_nextfit+0x99f>
f0118a1d:	83 ec 04             	sub    $0x4,%esp
f0118a20:	68 44 ab 13 f0       	push   $0xf013ab44
f0118a25:	68 18 01 00 00       	push   $0x118
f0118a2a:	68 76 a8 13 f0       	push   $0xf013a876
f0118a2f:	e8 72 77 fe ff       	call   f01001a6 <_panic>

	// Test next fit
	freeDiskFrames = pf_calculate_free_frames() ;
f0118a34:	e8 53 b2 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0118a39:	89 45 ec             	mov    %eax,-0x14(%ebp)
	freeFrames = sys_calculate_free_frames() ;
f0118a3c:	e8 7d 39 ff ff       	call   f010c3be <sys_calculate_free_frames>
f0118a41:	89 45 f0             	mov    %eax,-0x10(%ebp)
	void* tempAddress = kmalloc(Mega-kilo);		// Use Hole 1 -> Hole 1 = 1 M
f0118a44:	83 ec 0c             	sub    $0xc,%esp
f0118a47:	68 00 fc 0f 00       	push   $0xffc00
f0118a4c:	e8 73 eb fe ff       	call   f01075c4 <kmalloc>
f0118a51:	83 c4 10             	add    $0x10,%esp
f0118a54:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
	if((uint32)tempAddress != ACTUAL_START)
f0118a5a:	c7 85 dc fe ff ff 00 	movl   $0x1000,-0x124(%ebp)
f0118a61:	10 00 00 
f0118a64:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f0118a6a:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0118a6f:	89 85 d8 fe ff ff    	mov    %eax,-0x128(%ebp)
f0118a75:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f0118a7b:	ba 00 00 00 00       	mov    $0x0,%edx
f0118a80:	f7 b5 dc fe ff ff    	divl   -0x124(%ebp)
f0118a86:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f0118a8c:	29 d0                	sub    %edx,%eax
f0118a8e:	89 c1                	mov    %eax,%ecx
f0118a90:	c7 85 d4 fe ff ff 00 	movl   $0x1000,-0x12c(%ebp)
f0118a97:	10 00 00 
f0118a9a:	a0 bc 0e 6c f0       	mov    0xf06c0ebc,%al
f0118a9f:	0f b6 d0             	movzbl %al,%edx
f0118aa2:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f0118aa8:	01 d0                	add    %edx,%eax
f0118aaa:	48                   	dec    %eax
f0118aab:	89 85 d0 fe ff ff    	mov    %eax,-0x130(%ebp)
f0118ab1:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f0118ab7:	ba 00 00 00 00       	mov    $0x0,%edx
f0118abc:	f7 b5 d4 fe ff ff    	divl   -0x12c(%ebp)
f0118ac2:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f0118ac8:	29 d0                	sub    %edx,%eax
f0118aca:	01 c1                	add    %eax,%ecx
f0118acc:	c7 85 cc fe ff ff 00 	movl   $0x1000,-0x134(%ebp)
f0118ad3:	10 00 00 
f0118ad6:	a0 bc 0e 6c f0       	mov    0xf06c0ebc,%al
f0118adb:	0f b6 c0             	movzbl %al,%eax
f0118ade:	c1 e0 04             	shl    $0x4,%eax
f0118ae1:	89 c2                	mov    %eax,%edx
f0118ae3:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f0118ae9:	01 d0                	add    %edx,%eax
f0118aeb:	48                   	dec    %eax
f0118aec:	89 85 c8 fe ff ff    	mov    %eax,-0x138(%ebp)
f0118af2:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f0118af8:	ba 00 00 00 00       	mov    $0x0,%edx
f0118afd:	f7 b5 cc fe ff ff    	divl   -0x134(%ebp)
f0118b03:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f0118b09:	29 d0                	sub    %edx,%eax
f0118b0b:	01 c8                	add    %ecx,%eax
f0118b0d:	8d 90 00 40 00 f6    	lea    -0x9ffc000(%eax),%edx
f0118b13:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f0118b19:	39 c2                	cmp    %eax,%edx
f0118b1b:	74 17                	je     f0118b34 <test_kmalloc_nextfit+0xa9f>
		panic("Next Fit not working correctly");
f0118b1d:	83 ec 04             	sub    $0x4,%esp
f0118b20:	68 84 ab 13 f0       	push   $0xf013ab84
f0118b25:	68 1f 01 00 00       	push   $0x11f
f0118b2a:	68 76 a8 13 f0       	push   $0xf013a876
f0118b2f:	e8 72 76 fe ff       	call   f01001a6 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0118b34:	e8 53 b1 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0118b39:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f0118b3c:	74 17                	je     f0118b55 <test_kmalloc_nextfit+0xac0>
f0118b3e:	83 ec 04             	sub    $0x4,%esp
f0118b41:	68 90 a8 13 f0       	push   $0xf013a890
f0118b46:	68 20 01 00 00       	push   $0x120
f0118b4b:	68 76 a8 13 f0       	push   $0xf013a876
f0118b50:	e8 51 76 fe ff       	call   f01001a6 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) != (1*Mega)/PAGE_SIZE) panic("Wrong allocation");
f0118b55:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f0118b58:	e8 61 38 ff ff       	call   f010c3be <sys_calculate_free_frames>
f0118b5d:	29 c3                	sub    %eax,%ebx
f0118b5f:	89 d8                	mov    %ebx,%eax
f0118b61:	3d 00 01 00 00       	cmp    $0x100,%eax
f0118b66:	74 17                	je     f0118b7f <test_kmalloc_nextfit+0xaea>
f0118b68:	83 ec 04             	sub    $0x4,%esp
f0118b6b:	68 33 ab 13 f0       	push   $0xf013ab33
f0118b70:	68 21 01 00 00       	push   $0x121
f0118b75:	68 76 a8 13 f0       	push   $0xf013a876
f0118b7a:	e8 27 76 fe ff       	call   f01001a6 <_panic>

	freeDiskFrames = pf_calculate_free_frames() ;
f0118b7f:	e8 08 b1 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0118b84:	89 45 ec             	mov    %eax,-0x14(%ebp)
	freeFrames = sys_calculate_free_frames() ;
f0118b87:	e8 32 38 ff ff       	call   f010c3be <sys_calculate_free_frames>
f0118b8c:	89 45 f0             	mov    %eax,-0x10(%ebp)
	tempAddress = kmalloc(kilo);					// Use Hole 1 -> Hole 1 = 1 M - Kilo -> requires one page only
f0118b8f:	83 ec 0c             	sub    $0xc,%esp
f0118b92:	68 00 04 00 00       	push   $0x400
f0118b97:	e8 28 ea fe ff       	call   f01075c4 <kmalloc>
f0118b9c:	83 c4 10             	add    $0x10,%esp
f0118b9f:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x00100000)
f0118ba5:	c7 85 c4 fe ff ff 00 	movl   $0x1000,-0x13c(%ebp)
f0118bac:	10 00 00 
f0118baf:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f0118bb5:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0118bba:	89 85 c0 fe ff ff    	mov    %eax,-0x140(%ebp)
f0118bc0:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f0118bc6:	ba 00 00 00 00       	mov    $0x0,%edx
f0118bcb:	f7 b5 c4 fe ff ff    	divl   -0x13c(%ebp)
f0118bd1:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f0118bd7:	29 d0                	sub    %edx,%eax
f0118bd9:	89 c1                	mov    %eax,%ecx
f0118bdb:	c7 85 bc fe ff ff 00 	movl   $0x1000,-0x144(%ebp)
f0118be2:	10 00 00 
f0118be5:	a0 bc 0e 6c f0       	mov    0xf06c0ebc,%al
f0118bea:	0f b6 d0             	movzbl %al,%edx
f0118bed:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f0118bf3:	01 d0                	add    %edx,%eax
f0118bf5:	48                   	dec    %eax
f0118bf6:	89 85 b8 fe ff ff    	mov    %eax,-0x148(%ebp)
f0118bfc:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f0118c02:	ba 00 00 00 00       	mov    $0x0,%edx
f0118c07:	f7 b5 bc fe ff ff    	divl   -0x144(%ebp)
f0118c0d:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f0118c13:	29 d0                	sub    %edx,%eax
f0118c15:	01 c1                	add    %eax,%ecx
f0118c17:	c7 85 b4 fe ff ff 00 	movl   $0x1000,-0x14c(%ebp)
f0118c1e:	10 00 00 
f0118c21:	a0 bc 0e 6c f0       	mov    0xf06c0ebc,%al
f0118c26:	0f b6 c0             	movzbl %al,%eax
f0118c29:	c1 e0 04             	shl    $0x4,%eax
f0118c2c:	89 c2                	mov    %eax,%edx
f0118c2e:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f0118c34:	01 d0                	add    %edx,%eax
f0118c36:	48                   	dec    %eax
f0118c37:	89 85 b0 fe ff ff    	mov    %eax,-0x150(%ebp)
f0118c3d:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f0118c43:	ba 00 00 00 00       	mov    $0x0,%edx
f0118c48:	f7 b5 b4 fe ff ff    	divl   -0x14c(%ebp)
f0118c4e:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f0118c54:	29 d0                	sub    %edx,%eax
f0118c56:	01 c8                	add    %ecx,%eax
f0118c58:	8d 90 00 40 10 f6    	lea    -0x9efc000(%eax),%edx
f0118c5e:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f0118c64:	39 c2                	cmp    %eax,%edx
f0118c66:	74 17                	je     f0118c7f <test_kmalloc_nextfit+0xbea>
		panic("Next Fit not working correctly");
f0118c68:	83 ec 04             	sub    $0x4,%esp
f0118c6b:	68 84 ab 13 f0       	push   $0xf013ab84
f0118c70:	68 27 01 00 00       	push   $0x127
f0118c75:	68 76 a8 13 f0       	push   $0xf013a876
f0118c7a:	e8 27 75 fe ff       	call   f01001a6 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0118c7f:	e8 08 b0 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0118c84:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f0118c87:	74 17                	je     f0118ca0 <test_kmalloc_nextfit+0xc0b>
f0118c89:	83 ec 04             	sub    $0x4,%esp
f0118c8c:	68 90 a8 13 f0       	push   $0xf013a890
f0118c91:	68 28 01 00 00       	push   $0x128
f0118c96:	68 76 a8 13 f0       	push   $0xf013a876
f0118c9b:	e8 06 75 fe ff       	call   f01001a6 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation");
f0118ca0:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f0118ca3:	e8 16 37 ff ff       	call   f010c3be <sys_calculate_free_frames>
f0118ca8:	29 c3                	sub    %eax,%ebx
f0118caa:	89 d8                	mov    %ebx,%eax
f0118cac:	83 f8 01             	cmp    $0x1,%eax
f0118caf:	74 17                	je     f0118cc8 <test_kmalloc_nextfit+0xc33>
f0118cb1:	83 ec 04             	sub    $0x4,%esp
f0118cb4:	68 33 ab 13 f0       	push   $0xf013ab33
f0118cb9:	68 29 01 00 00       	push   $0x129
f0118cbe:	68 76 a8 13 f0       	push   $0xf013a876
f0118cc3:	e8 de 74 fe ff       	call   f01001a6 <_panic>

	freeDiskFrames = pf_calculate_free_frames() ;
f0118cc8:	e8 bf af fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0118ccd:	89 45 ec             	mov    %eax,-0x14(%ebp)
	freeFrames = sys_calculate_free_frames() ;
f0118cd0:	e8 e9 36 ff ff       	call   f010c3be <sys_calculate_free_frames>
f0118cd5:	89 45 f0             	mov    %eax,-0x10(%ebp)
	tempAddress = kmalloc(5*Mega); 			   // Use Hole 4 -> Hole 4 = 1 M
f0118cd8:	83 ec 0c             	sub    $0xc,%esp
f0118cdb:	68 00 00 50 00       	push   $0x500000
f0118ce0:	e8 df e8 fe ff       	call   f01075c4 <kmalloc>
f0118ce5:	83 c4 10             	add    $0x10,%esp
f0118ce8:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x01400000)
f0118cee:	c7 85 ac fe ff ff 00 	movl   $0x1000,-0x154(%ebp)
f0118cf5:	10 00 00 
f0118cf8:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f0118cfe:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0118d03:	89 85 a8 fe ff ff    	mov    %eax,-0x158(%ebp)
f0118d09:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f0118d0f:	ba 00 00 00 00       	mov    $0x0,%edx
f0118d14:	f7 b5 ac fe ff ff    	divl   -0x154(%ebp)
f0118d1a:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f0118d20:	29 d0                	sub    %edx,%eax
f0118d22:	89 c1                	mov    %eax,%ecx
f0118d24:	c7 85 a4 fe ff ff 00 	movl   $0x1000,-0x15c(%ebp)
f0118d2b:	10 00 00 
f0118d2e:	a0 bc 0e 6c f0       	mov    0xf06c0ebc,%al
f0118d33:	0f b6 d0             	movzbl %al,%edx
f0118d36:	8b 85 a4 fe ff ff    	mov    -0x15c(%ebp),%eax
f0118d3c:	01 d0                	add    %edx,%eax
f0118d3e:	48                   	dec    %eax
f0118d3f:	89 85 a0 fe ff ff    	mov    %eax,-0x160(%ebp)
f0118d45:	8b 85 a0 fe ff ff    	mov    -0x160(%ebp),%eax
f0118d4b:	ba 00 00 00 00       	mov    $0x0,%edx
f0118d50:	f7 b5 a4 fe ff ff    	divl   -0x15c(%ebp)
f0118d56:	8b 85 a0 fe ff ff    	mov    -0x160(%ebp),%eax
f0118d5c:	29 d0                	sub    %edx,%eax
f0118d5e:	01 c1                	add    %eax,%ecx
f0118d60:	c7 85 9c fe ff ff 00 	movl   $0x1000,-0x164(%ebp)
f0118d67:	10 00 00 
f0118d6a:	a0 bc 0e 6c f0       	mov    0xf06c0ebc,%al
f0118d6f:	0f b6 c0             	movzbl %al,%eax
f0118d72:	c1 e0 04             	shl    $0x4,%eax
f0118d75:	89 c2                	mov    %eax,%edx
f0118d77:	8b 85 9c fe ff ff    	mov    -0x164(%ebp),%eax
f0118d7d:	01 d0                	add    %edx,%eax
f0118d7f:	48                   	dec    %eax
f0118d80:	89 85 98 fe ff ff    	mov    %eax,-0x168(%ebp)
f0118d86:	8b 85 98 fe ff ff    	mov    -0x168(%ebp),%eax
f0118d8c:	ba 00 00 00 00       	mov    $0x0,%edx
f0118d91:	f7 b5 9c fe ff ff    	divl   -0x164(%ebp)
f0118d97:	8b 85 98 fe ff ff    	mov    -0x168(%ebp),%eax
f0118d9d:	29 d0                	sub    %edx,%eax
f0118d9f:	01 c8                	add    %ecx,%eax
f0118da1:	8d 90 00 40 40 f7    	lea    -0x8bfc000(%eax),%edx
f0118da7:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f0118dad:	39 c2                	cmp    %eax,%edx
f0118daf:	74 17                	je     f0118dc8 <test_kmalloc_nextfit+0xd33>
		panic("Next Fit not working correctly");
f0118db1:	83 ec 04             	sub    $0x4,%esp
f0118db4:	68 84 ab 13 f0       	push   $0xf013ab84
f0118db9:	68 2f 01 00 00       	push   $0x12f
f0118dbe:	68 76 a8 13 f0       	push   $0xf013a876
f0118dc3:	e8 de 73 fe ff       	call   f01001a6 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0118dc8:	e8 bf ae fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0118dcd:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f0118dd0:	74 17                	je     f0118de9 <test_kmalloc_nextfit+0xd54>
f0118dd2:	83 ec 04             	sub    $0x4,%esp
f0118dd5:	68 90 a8 13 f0       	push   $0xf013a890
f0118dda:	68 30 01 00 00       	push   $0x130
f0118ddf:	68 76 a8 13 f0       	push   $0xf013a876
f0118de4:	e8 bd 73 fe ff       	call   f01001a6 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) != (5*Mega)/PAGE_SIZE) panic("Wrong allocation");
f0118de9:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f0118dec:	e8 cd 35 ff ff       	call   f010c3be <sys_calculate_free_frames>
f0118df1:	29 c3                	sub    %eax,%ebx
f0118df3:	89 d8                	mov    %ebx,%eax
f0118df5:	3d 00 05 00 00       	cmp    $0x500,%eax
f0118dfa:	74 17                	je     f0118e13 <test_kmalloc_nextfit+0xd7e>
f0118dfc:	83 ec 04             	sub    $0x4,%esp
f0118dff:	68 33 ab 13 f0       	push   $0xf013ab33
f0118e04:	68 31 01 00 00       	push   $0x131
f0118e09:	68 76 a8 13 f0       	push   $0xf013a876
f0118e0e:	e8 93 73 fe ff       	call   f01001a6 <_panic>

	freeDiskFrames = pf_calculate_free_frames() ;
f0118e13:	e8 74 ae fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0118e18:	89 45 ec             	mov    %eax,-0x14(%ebp)
	freeFrames = sys_calculate_free_frames() ;
f0118e1b:	e8 9e 35 ff ff       	call   f010c3be <sys_calculate_free_frames>
f0118e20:	89 45 f0             	mov    %eax,-0x10(%ebp)
	tempAddress = kmalloc(1*Mega); 			   // Use Hole 4 -> Hole 4 = 0 M
f0118e23:	83 ec 0c             	sub    $0xc,%esp
f0118e26:	68 00 00 10 00       	push   $0x100000
f0118e2b:	e8 94 e7 fe ff       	call   f01075c4 <kmalloc>
f0118e30:	83 c4 10             	add    $0x10,%esp
f0118e33:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x01900000)
f0118e39:	c7 85 94 fe ff ff 00 	movl   $0x1000,-0x16c(%ebp)
f0118e40:	10 00 00 
f0118e43:	8b 85 94 fe ff ff    	mov    -0x16c(%ebp),%eax
f0118e49:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0118e4e:	89 85 90 fe ff ff    	mov    %eax,-0x170(%ebp)
f0118e54:	8b 85 90 fe ff ff    	mov    -0x170(%ebp),%eax
f0118e5a:	ba 00 00 00 00       	mov    $0x0,%edx
f0118e5f:	f7 b5 94 fe ff ff    	divl   -0x16c(%ebp)
f0118e65:	8b 85 90 fe ff ff    	mov    -0x170(%ebp),%eax
f0118e6b:	29 d0                	sub    %edx,%eax
f0118e6d:	89 c1                	mov    %eax,%ecx
f0118e6f:	c7 85 8c fe ff ff 00 	movl   $0x1000,-0x174(%ebp)
f0118e76:	10 00 00 
f0118e79:	a0 bc 0e 6c f0       	mov    0xf06c0ebc,%al
f0118e7e:	0f b6 d0             	movzbl %al,%edx
f0118e81:	8b 85 8c fe ff ff    	mov    -0x174(%ebp),%eax
f0118e87:	01 d0                	add    %edx,%eax
f0118e89:	48                   	dec    %eax
f0118e8a:	89 85 88 fe ff ff    	mov    %eax,-0x178(%ebp)
f0118e90:	8b 85 88 fe ff ff    	mov    -0x178(%ebp),%eax
f0118e96:	ba 00 00 00 00       	mov    $0x0,%edx
f0118e9b:	f7 b5 8c fe ff ff    	divl   -0x174(%ebp)
f0118ea1:	8b 85 88 fe ff ff    	mov    -0x178(%ebp),%eax
f0118ea7:	29 d0                	sub    %edx,%eax
f0118ea9:	01 c1                	add    %eax,%ecx
f0118eab:	c7 85 84 fe ff ff 00 	movl   $0x1000,-0x17c(%ebp)
f0118eb2:	10 00 00 
f0118eb5:	a0 bc 0e 6c f0       	mov    0xf06c0ebc,%al
f0118eba:	0f b6 c0             	movzbl %al,%eax
f0118ebd:	c1 e0 04             	shl    $0x4,%eax
f0118ec0:	89 c2                	mov    %eax,%edx
f0118ec2:	8b 85 84 fe ff ff    	mov    -0x17c(%ebp),%eax
f0118ec8:	01 d0                	add    %edx,%eax
f0118eca:	48                   	dec    %eax
f0118ecb:	89 85 80 fe ff ff    	mov    %eax,-0x180(%ebp)
f0118ed1:	8b 85 80 fe ff ff    	mov    -0x180(%ebp),%eax
f0118ed7:	ba 00 00 00 00       	mov    $0x0,%edx
f0118edc:	f7 b5 84 fe ff ff    	divl   -0x17c(%ebp)
f0118ee2:	8b 85 80 fe ff ff    	mov    -0x180(%ebp),%eax
f0118ee8:	29 d0                	sub    %edx,%eax
f0118eea:	01 c8                	add    %ecx,%eax
f0118eec:	8d 90 00 40 90 f7    	lea    -0x86fc000(%eax),%edx
f0118ef2:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f0118ef8:	39 c2                	cmp    %eax,%edx
f0118efa:	74 17                	je     f0118f13 <test_kmalloc_nextfit+0xe7e>
		panic("Next Fit not working correctly");
f0118efc:	83 ec 04             	sub    $0x4,%esp
f0118eff:	68 84 ab 13 f0       	push   $0xf013ab84
f0118f04:	68 37 01 00 00       	push   $0x137
f0118f09:	68 76 a8 13 f0       	push   $0xf013a876
f0118f0e:	e8 93 72 fe ff       	call   f01001a6 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0118f13:	e8 74 ad fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0118f18:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f0118f1b:	74 17                	je     f0118f34 <test_kmalloc_nextfit+0xe9f>
f0118f1d:	83 ec 04             	sub    $0x4,%esp
f0118f20:	68 90 a8 13 f0       	push   $0xf013a890
f0118f25:	68 38 01 00 00       	push   $0x138
f0118f2a:	68 76 a8 13 f0       	push   $0xf013a876
f0118f2f:	e8 72 72 fe ff       	call   f01001a6 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) != (1*Mega)/PAGE_SIZE) panic("Wrong allocation");
f0118f34:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f0118f37:	e8 82 34 ff ff       	call   f010c3be <sys_calculate_free_frames>
f0118f3c:	29 c3                	sub    %eax,%ebx
f0118f3e:	89 d8                	mov    %ebx,%eax
f0118f40:	3d 00 01 00 00       	cmp    $0x100,%eax
f0118f45:	74 17                	je     f0118f5e <test_kmalloc_nextfit+0xec9>
f0118f47:	83 ec 04             	sub    $0x4,%esp
f0118f4a:	68 33 ab 13 f0       	push   $0xf013ab33
f0118f4f:	68 39 01 00 00       	push   $0x139
f0118f54:	68 76 a8 13 f0       	push   $0xf013a876
f0118f59:	e8 48 72 fe ff       	call   f01001a6 <_panic>

	freeDiskFrames = pf_calculate_free_frames() ;
f0118f5e:	e8 29 ad fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0118f63:	89 45 ec             	mov    %eax,-0x14(%ebp)
	freeFrames = sys_calculate_free_frames() ;
f0118f66:	e8 53 34 ff ff       	call   f010c3be <sys_calculate_free_frames>
f0118f6b:	89 45 f0             	mov    %eax,-0x10(%ebp)
	kfree(ptr_allocations[15]);					// Make a new hole => 2 M
f0118f6e:	8b 85 c4 fb ff ff    	mov    -0x43c(%ebp),%eax
f0118f74:	83 ec 0c             	sub    $0xc,%esp
f0118f77:	50                   	push   %eax
f0118f78:	e8 61 e6 fe ff       	call   f01075de <kfree>
f0118f7d:	83 c4 10             	add    $0x10,%esp
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0118f80:	e8 07 ad fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0118f85:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f0118f88:	74 17                	je     f0118fa1 <test_kmalloc_nextfit+0xf0c>
f0118f8a:	83 ec 04             	sub    $0x4,%esp
f0118f8d:	68 90 a8 13 f0       	push   $0xf013a890
f0118f92:	68 3e 01 00 00       	push   $0x13e
f0118f97:	68 76 a8 13 f0       	push   $0xf013a876
f0118f9c:	e8 05 72 fe ff       	call   f01001a6 <_panic>
	if ((sys_calculate_free_frames() - freeFrames) !=  (2*Mega)/PAGE_SIZE) panic("Wrong free: Extra or less pages are removed from main memory");
f0118fa1:	e8 18 34 ff ff       	call   f010c3be <sys_calculate_free_frames>
f0118fa6:	89 c2                	mov    %eax,%edx
f0118fa8:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0118fab:	29 c2                	sub    %eax,%edx
f0118fad:	89 d0                	mov    %edx,%eax
f0118faf:	3d 00 02 00 00       	cmp    $0x200,%eax
f0118fb4:	74 17                	je     f0118fcd <test_kmalloc_nextfit+0xf38>
f0118fb6:	83 ec 04             	sub    $0x4,%esp
f0118fb9:	68 44 ab 13 f0       	push   $0xf013ab44
f0118fbe:	68 3f 01 00 00       	push   $0x13f
f0118fc3:	68 76 a8 13 f0       	push   $0xf013a876
f0118fc8:	e8 d9 71 fe ff       	call   f01001a6 <_panic>

	freeDiskFrames = pf_calculate_free_frames() ;
f0118fcd:	e8 ba ac fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0118fd2:	89 45 ec             	mov    %eax,-0x14(%ebp)
	freeFrames = sys_calculate_free_frames() ;
f0118fd5:	e8 e4 33 ff ff       	call   f010c3be <sys_calculate_free_frames>
f0118fda:	89 45 f0             	mov    %eax,-0x10(%ebp)
	tempAddress = kmalloc(kilo); 			   // Use new Hole = 2 M - 4 kilo
f0118fdd:	83 ec 0c             	sub    $0xc,%esp
f0118fe0:	68 00 04 00 00       	push   $0x400
f0118fe5:	e8 da e5 fe ff       	call   f01075c4 <kmalloc>
f0118fea:	83 c4 10             	add    $0x10,%esp
f0118fed:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x01E00000)
f0118ff3:	c7 85 7c fe ff ff 00 	movl   $0x1000,-0x184(%ebp)
f0118ffa:	10 00 00 
f0118ffd:	8b 85 7c fe ff ff    	mov    -0x184(%ebp),%eax
f0119003:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0119008:	89 85 78 fe ff ff    	mov    %eax,-0x188(%ebp)
f011900e:	8b 85 78 fe ff ff    	mov    -0x188(%ebp),%eax
f0119014:	ba 00 00 00 00       	mov    $0x0,%edx
f0119019:	f7 b5 7c fe ff ff    	divl   -0x184(%ebp)
f011901f:	8b 85 78 fe ff ff    	mov    -0x188(%ebp),%eax
f0119025:	29 d0                	sub    %edx,%eax
f0119027:	89 c1                	mov    %eax,%ecx
f0119029:	c7 85 74 fe ff ff 00 	movl   $0x1000,-0x18c(%ebp)
f0119030:	10 00 00 
f0119033:	a0 bc 0e 6c f0       	mov    0xf06c0ebc,%al
f0119038:	0f b6 d0             	movzbl %al,%edx
f011903b:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f0119041:	01 d0                	add    %edx,%eax
f0119043:	48                   	dec    %eax
f0119044:	89 85 70 fe ff ff    	mov    %eax,-0x190(%ebp)
f011904a:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f0119050:	ba 00 00 00 00       	mov    $0x0,%edx
f0119055:	f7 b5 74 fe ff ff    	divl   -0x18c(%ebp)
f011905b:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f0119061:	29 d0                	sub    %edx,%eax
f0119063:	01 c1                	add    %eax,%ecx
f0119065:	c7 85 6c fe ff ff 00 	movl   $0x1000,-0x194(%ebp)
f011906c:	10 00 00 
f011906f:	a0 bc 0e 6c f0       	mov    0xf06c0ebc,%al
f0119074:	0f b6 c0             	movzbl %al,%eax
f0119077:	c1 e0 04             	shl    $0x4,%eax
f011907a:	89 c2                	mov    %eax,%edx
f011907c:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f0119082:	01 d0                	add    %edx,%eax
f0119084:	48                   	dec    %eax
f0119085:	89 85 68 fe ff ff    	mov    %eax,-0x198(%ebp)
f011908b:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f0119091:	ba 00 00 00 00       	mov    $0x0,%edx
f0119096:	f7 b5 6c fe ff ff    	divl   -0x194(%ebp)
f011909c:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f01190a2:	29 d0                	sub    %edx,%eax
f01190a4:	01 c8                	add    %ecx,%eax
f01190a6:	8d 90 00 40 e0 f7    	lea    -0x81fc000(%eax),%edx
f01190ac:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f01190b2:	39 c2                	cmp    %eax,%edx
f01190b4:	74 17                	je     f01190cd <test_kmalloc_nextfit+0x1038>
		panic("Next Fit not working correctly");
f01190b6:	83 ec 04             	sub    $0x4,%esp
f01190b9:	68 84 ab 13 f0       	push   $0xf013ab84
f01190be:	68 45 01 00 00       	push   $0x145
f01190c3:	68 76 a8 13 f0       	push   $0xf013a876
f01190c8:	e8 d9 70 fe ff       	call   f01001a6 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01190cd:	e8 ba ab fe ff       	call   f0103c8c <pf_calculate_free_frames>
f01190d2:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f01190d5:	74 17                	je     f01190ee <test_kmalloc_nextfit+0x1059>
f01190d7:	83 ec 04             	sub    $0x4,%esp
f01190da:	68 90 a8 13 f0       	push   $0xf013a890
f01190df:	68 46 01 00 00       	push   $0x146
f01190e4:	68 76 a8 13 f0       	push   $0xf013a876
f01190e9:	e8 b8 70 fe ff       	call   f01001a6 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation");
f01190ee:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f01190f1:	e8 c8 32 ff ff       	call   f010c3be <sys_calculate_free_frames>
f01190f6:	29 c3                	sub    %eax,%ebx
f01190f8:	89 d8                	mov    %ebx,%eax
f01190fa:	83 f8 01             	cmp    $0x1,%eax
f01190fd:	74 17                	je     f0119116 <test_kmalloc_nextfit+0x1081>
f01190ff:	83 ec 04             	sub    $0x4,%esp
f0119102:	68 33 ab 13 f0       	push   $0xf013ab33
f0119107:	68 47 01 00 00       	push   $0x147
f011910c:	68 76 a8 13 f0       	push   $0xf013a876
f0119111:	e8 90 70 fe ff       	call   f01001a6 <_panic>

	freeDiskFrames = pf_calculate_free_frames() ;
f0119116:	e8 71 ab fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011911b:	89 45 ec             	mov    %eax,-0x14(%ebp)
	freeFrames = sys_calculate_free_frames() ;
f011911e:	e8 9b 32 ff ff       	call   f010c3be <sys_calculate_free_frames>
f0119123:	89 45 f0             	mov    %eax,-0x10(%ebp)
	tempAddress = kmalloc(Mega + 1016*kilo); 	// Use new Hole = 4 kilo
f0119126:	83 ec 0c             	sub    $0xc,%esp
f0119129:	68 00 e0 1f 00       	push   $0x1fe000
f011912e:	e8 91 e4 fe ff       	call   f01075c4 <kmalloc>
f0119133:	83 c4 10             	add    $0x10,%esp
f0119136:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x01E01000)
f011913c:	c7 85 64 fe ff ff 00 	movl   $0x1000,-0x19c(%ebp)
f0119143:	10 00 00 
f0119146:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f011914c:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0119151:	89 85 60 fe ff ff    	mov    %eax,-0x1a0(%ebp)
f0119157:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f011915d:	ba 00 00 00 00       	mov    $0x0,%edx
f0119162:	f7 b5 64 fe ff ff    	divl   -0x19c(%ebp)
f0119168:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f011916e:	29 d0                	sub    %edx,%eax
f0119170:	89 c1                	mov    %eax,%ecx
f0119172:	c7 85 5c fe ff ff 00 	movl   $0x1000,-0x1a4(%ebp)
f0119179:	10 00 00 
f011917c:	a0 bc 0e 6c f0       	mov    0xf06c0ebc,%al
f0119181:	0f b6 d0             	movzbl %al,%edx
f0119184:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f011918a:	01 d0                	add    %edx,%eax
f011918c:	48                   	dec    %eax
f011918d:	89 85 58 fe ff ff    	mov    %eax,-0x1a8(%ebp)
f0119193:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f0119199:	ba 00 00 00 00       	mov    $0x0,%edx
f011919e:	f7 b5 5c fe ff ff    	divl   -0x1a4(%ebp)
f01191a4:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f01191aa:	29 d0                	sub    %edx,%eax
f01191ac:	01 c1                	add    %eax,%ecx
f01191ae:	c7 85 54 fe ff ff 00 	movl   $0x1000,-0x1ac(%ebp)
f01191b5:	10 00 00 
f01191b8:	a0 bc 0e 6c f0       	mov    0xf06c0ebc,%al
f01191bd:	0f b6 c0             	movzbl %al,%eax
f01191c0:	c1 e0 04             	shl    $0x4,%eax
f01191c3:	89 c2                	mov    %eax,%edx
f01191c5:	8b 85 54 fe ff ff    	mov    -0x1ac(%ebp),%eax
f01191cb:	01 d0                	add    %edx,%eax
f01191cd:	48                   	dec    %eax
f01191ce:	89 85 50 fe ff ff    	mov    %eax,-0x1b0(%ebp)
f01191d4:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f01191da:	ba 00 00 00 00       	mov    $0x0,%edx
f01191df:	f7 b5 54 fe ff ff    	divl   -0x1ac(%ebp)
f01191e5:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f01191eb:	29 d0                	sub    %edx,%eax
f01191ed:	01 c8                	add    %ecx,%eax
f01191ef:	8d 90 00 50 e0 f7    	lea    -0x81fb000(%eax),%edx
f01191f5:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f01191fb:	39 c2                	cmp    %eax,%edx
f01191fd:	74 17                	je     f0119216 <test_kmalloc_nextfit+0x1181>
		panic("Next Fit not working correctly");
f01191ff:	83 ec 04             	sub    $0x4,%esp
f0119202:	68 84 ab 13 f0       	push   $0xf013ab84
f0119207:	68 4d 01 00 00       	push   $0x14d
f011920c:	68 76 a8 13 f0       	push   $0xf013a876
f0119211:	e8 90 6f fe ff       	call   f01001a6 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0119216:	e8 71 aa fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011921b:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011921e:	74 17                	je     f0119237 <test_kmalloc_nextfit+0x11a2>
f0119220:	83 ec 04             	sub    $0x4,%esp
f0119223:	68 90 a8 13 f0       	push   $0xf013a890
f0119228:	68 4e 01 00 00       	push   $0x14e
f011922d:	68 76 a8 13 f0       	push   $0xf013a876
f0119232:	e8 6f 6f fe ff       	call   f01001a6 <_panic>

	if ((freeFrames - sys_calculate_free_frames()) != (1*Mega+1016*kilo)/PAGE_SIZE) panic("Wrong allocation");
f0119237:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f011923a:	e8 7f 31 ff ff       	call   f010c3be <sys_calculate_free_frames>
f011923f:	29 c3                	sub    %eax,%ebx
f0119241:	89 d8                	mov    %ebx,%eax
f0119243:	3d fe 01 00 00       	cmp    $0x1fe,%eax
f0119248:	74 17                	je     f0119261 <test_kmalloc_nextfit+0x11cc>
f011924a:	83 ec 04             	sub    $0x4,%esp
f011924d:	68 33 ab 13 f0       	push   $0xf013ab33
f0119252:	68 50 01 00 00       	push   $0x150
f0119257:	68 76 a8 13 f0       	push   $0xf013a876
f011925c:	e8 45 6f fe ff       	call   f01001a6 <_panic>

	freeDiskFrames = pf_calculate_free_frames() ;
f0119261:	e8 26 aa fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0119266:	89 45 ec             	mov    %eax,-0x14(%ebp)
	freeFrames = sys_calculate_free_frames() ;
f0119269:	e8 50 31 ff ff       	call   f010c3be <sys_calculate_free_frames>
f011926e:	89 45 f0             	mov    %eax,-0x10(%ebp)
	tempAddress = kmalloc(512*kilo); 			   // Use Hole 5 -> Hole 5 = 1.5 M
f0119271:	83 ec 0c             	sub    $0xc,%esp
f0119274:	68 00 00 08 00       	push   $0x80000
f0119279:	e8 46 e3 fe ff       	call   f01075c4 <kmalloc>
f011927e:	83 c4 10             	add    $0x10,%esp
f0119281:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x02800000)
f0119287:	c7 85 4c fe ff ff 00 	movl   $0x1000,-0x1b4(%ebp)
f011928e:	10 00 00 
f0119291:	8b 85 4c fe ff ff    	mov    -0x1b4(%ebp),%eax
f0119297:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011929c:	89 85 48 fe ff ff    	mov    %eax,-0x1b8(%ebp)
f01192a2:	8b 85 48 fe ff ff    	mov    -0x1b8(%ebp),%eax
f01192a8:	ba 00 00 00 00       	mov    $0x0,%edx
f01192ad:	f7 b5 4c fe ff ff    	divl   -0x1b4(%ebp)
f01192b3:	8b 85 48 fe ff ff    	mov    -0x1b8(%ebp),%eax
f01192b9:	29 d0                	sub    %edx,%eax
f01192bb:	89 c1                	mov    %eax,%ecx
f01192bd:	c7 85 44 fe ff ff 00 	movl   $0x1000,-0x1bc(%ebp)
f01192c4:	10 00 00 
f01192c7:	a0 bc 0e 6c f0       	mov    0xf06c0ebc,%al
f01192cc:	0f b6 d0             	movzbl %al,%edx
f01192cf:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f01192d5:	01 d0                	add    %edx,%eax
f01192d7:	48                   	dec    %eax
f01192d8:	89 85 40 fe ff ff    	mov    %eax,-0x1c0(%ebp)
f01192de:	8b 85 40 fe ff ff    	mov    -0x1c0(%ebp),%eax
f01192e4:	ba 00 00 00 00       	mov    $0x0,%edx
f01192e9:	f7 b5 44 fe ff ff    	divl   -0x1bc(%ebp)
f01192ef:	8b 85 40 fe ff ff    	mov    -0x1c0(%ebp),%eax
f01192f5:	29 d0                	sub    %edx,%eax
f01192f7:	01 c1                	add    %eax,%ecx
f01192f9:	c7 85 3c fe ff ff 00 	movl   $0x1000,-0x1c4(%ebp)
f0119300:	10 00 00 
f0119303:	a0 bc 0e 6c f0       	mov    0xf06c0ebc,%al
f0119308:	0f b6 c0             	movzbl %al,%eax
f011930b:	c1 e0 04             	shl    $0x4,%eax
f011930e:	89 c2                	mov    %eax,%edx
f0119310:	8b 85 3c fe ff ff    	mov    -0x1c4(%ebp),%eax
f0119316:	01 d0                	add    %edx,%eax
f0119318:	48                   	dec    %eax
f0119319:	89 85 38 fe ff ff    	mov    %eax,-0x1c8(%ebp)
f011931f:	8b 85 38 fe ff ff    	mov    -0x1c8(%ebp),%eax
f0119325:	ba 00 00 00 00       	mov    $0x0,%edx
f011932a:	f7 b5 3c fe ff ff    	divl   -0x1c4(%ebp)
f0119330:	8b 85 38 fe ff ff    	mov    -0x1c8(%ebp),%eax
f0119336:	29 d0                	sub    %edx,%eax
f0119338:	01 c8                	add    %ecx,%eax
f011933a:	8d 90 00 40 80 f8    	lea    -0x77fc000(%eax),%edx
f0119340:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f0119346:	39 c2                	cmp    %eax,%edx
f0119348:	74 17                	je     f0119361 <test_kmalloc_nextfit+0x12cc>
		panic("Next Fit not working correctly");
f011934a:	83 ec 04             	sub    $0x4,%esp
f011934d:	68 84 ab 13 f0       	push   $0xf013ab84
f0119352:	68 56 01 00 00       	push   $0x156
f0119357:	68 76 a8 13 f0       	push   $0xf013a876
f011935c:	e8 45 6e fe ff       	call   f01001a6 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0119361:	e8 26 a9 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0119366:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f0119369:	74 17                	je     f0119382 <test_kmalloc_nextfit+0x12ed>
f011936b:	83 ec 04             	sub    $0x4,%esp
f011936e:	68 90 a8 13 f0       	push   $0xf013a890
f0119373:	68 57 01 00 00       	push   $0x157
f0119378:	68 76 a8 13 f0       	push   $0xf013a876
f011937d:	e8 24 6e fe ff       	call   f01001a6 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) != (512*kilo)/PAGE_SIZE) panic("Wrong allocation");
f0119382:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f0119385:	e8 34 30 ff ff       	call   f010c3be <sys_calculate_free_frames>
f011938a:	29 c3                	sub    %eax,%ebx
f011938c:	89 d8                	mov    %ebx,%eax
f011938e:	3d 80 00 00 00       	cmp    $0x80,%eax
f0119393:	74 17                	je     f01193ac <test_kmalloc_nextfit+0x1317>
f0119395:	83 ec 04             	sub    $0x4,%esp
f0119398:	68 33 ab 13 f0       	push   $0xf013ab33
f011939d:	68 58 01 00 00       	push   $0x158
f01193a2:	68 76 a8 13 f0       	push   $0xf013a876
f01193a7:	e8 fa 6d fe ff       	call   f01001a6 <_panic>

	cprintf("\nCASE1: (next fit without looping back) is succeeded...\n") ;
f01193ac:	83 ec 0c             	sub    $0xc,%esp
f01193af:	68 a4 ab 13 f0       	push   $0xf013aba4
f01193b4:	e8 74 78 fe ff       	call   f0100c2d <cprintf>
f01193b9:	83 c4 10             	add    $0x10,%esp
	/******************************/

	// Check that next fit is looping back to check for free space
	freeDiskFrames = pf_calculate_free_frames() ;
f01193bc:	e8 cb a8 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f01193c1:	89 45 ec             	mov    %eax,-0x14(%ebp)
	freeFrames = sys_calculate_free_frames() ;
f01193c4:	e8 f5 2f ff ff       	call   f010c3be <sys_calculate_free_frames>
f01193c9:	89 45 f0             	mov    %eax,-0x10(%ebp)
	tempAddress = kmalloc(3*Mega + 512*kilo); 			   // Use Hole 2 -> Hole 2 = 0.5 M
f01193cc:	83 ec 0c             	sub    $0xc,%esp
f01193cf:	68 00 00 38 00       	push   $0x380000
f01193d4:	e8 eb e1 fe ff       	call   f01075c4 <kmalloc>
f01193d9:	83 c4 10             	add    $0x10,%esp
f01193dc:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x00400000)
f01193e2:	c7 85 34 fe ff ff 00 	movl   $0x1000,-0x1cc(%ebp)
f01193e9:	10 00 00 
f01193ec:	8b 85 34 fe ff ff    	mov    -0x1cc(%ebp),%eax
f01193f2:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01193f7:	89 85 30 fe ff ff    	mov    %eax,-0x1d0(%ebp)
f01193fd:	8b 85 30 fe ff ff    	mov    -0x1d0(%ebp),%eax
f0119403:	ba 00 00 00 00       	mov    $0x0,%edx
f0119408:	f7 b5 34 fe ff ff    	divl   -0x1cc(%ebp)
f011940e:	8b 85 30 fe ff ff    	mov    -0x1d0(%ebp),%eax
f0119414:	29 d0                	sub    %edx,%eax
f0119416:	89 c1                	mov    %eax,%ecx
f0119418:	c7 85 2c fe ff ff 00 	movl   $0x1000,-0x1d4(%ebp)
f011941f:	10 00 00 
f0119422:	a0 bc 0e 6c f0       	mov    0xf06c0ebc,%al
f0119427:	0f b6 d0             	movzbl %al,%edx
f011942a:	8b 85 2c fe ff ff    	mov    -0x1d4(%ebp),%eax
f0119430:	01 d0                	add    %edx,%eax
f0119432:	48                   	dec    %eax
f0119433:	89 85 28 fe ff ff    	mov    %eax,-0x1d8(%ebp)
f0119439:	8b 85 28 fe ff ff    	mov    -0x1d8(%ebp),%eax
f011943f:	ba 00 00 00 00       	mov    $0x0,%edx
f0119444:	f7 b5 2c fe ff ff    	divl   -0x1d4(%ebp)
f011944a:	8b 85 28 fe ff ff    	mov    -0x1d8(%ebp),%eax
f0119450:	29 d0                	sub    %edx,%eax
f0119452:	01 c1                	add    %eax,%ecx
f0119454:	c7 85 24 fe ff ff 00 	movl   $0x1000,-0x1dc(%ebp)
f011945b:	10 00 00 
f011945e:	a0 bc 0e 6c f0       	mov    0xf06c0ebc,%al
f0119463:	0f b6 c0             	movzbl %al,%eax
f0119466:	c1 e0 04             	shl    $0x4,%eax
f0119469:	89 c2                	mov    %eax,%edx
f011946b:	8b 85 24 fe ff ff    	mov    -0x1dc(%ebp),%eax
f0119471:	01 d0                	add    %edx,%eax
f0119473:	48                   	dec    %eax
f0119474:	89 85 20 fe ff ff    	mov    %eax,-0x1e0(%ebp)
f011947a:	8b 85 20 fe ff ff    	mov    -0x1e0(%ebp),%eax
f0119480:	ba 00 00 00 00       	mov    $0x0,%edx
f0119485:	f7 b5 24 fe ff ff    	divl   -0x1dc(%ebp)
f011948b:	8b 85 20 fe ff ff    	mov    -0x1e0(%ebp),%eax
f0119491:	29 d0                	sub    %edx,%eax
f0119493:	01 c8                	add    %ecx,%eax
f0119495:	8d 90 00 40 40 f6    	lea    -0x9bfc000(%eax),%edx
f011949b:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f01194a1:	39 c2                	cmp    %eax,%edx
f01194a3:	74 17                	je     f01194bc <test_kmalloc_nextfit+0x1427>
		panic("Next Fit not working correctly");
f01194a5:	83 ec 04             	sub    $0x4,%esp
f01194a8:	68 84 ab 13 f0       	push   $0xf013ab84
f01194ad:	68 62 01 00 00       	push   $0x162
f01194b2:	68 76 a8 13 f0       	push   $0xf013a876
f01194b7:	e8 ea 6c fe ff       	call   f01001a6 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01194bc:	e8 cb a7 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f01194c1:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f01194c4:	74 17                	je     f01194dd <test_kmalloc_nextfit+0x1448>
f01194c6:	83 ec 04             	sub    $0x4,%esp
f01194c9:	68 90 a8 13 f0       	push   $0xf013a890
f01194ce:	68 63 01 00 00       	push   $0x163
f01194d3:	68 76 a8 13 f0       	push   $0xf013a876
f01194d8:	e8 c9 6c fe ff       	call   f01001a6 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) != (3*Mega+512*kilo)/PAGE_SIZE) panic("Wrong allocation");
f01194dd:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f01194e0:	e8 d9 2e ff ff       	call   f010c3be <sys_calculate_free_frames>
f01194e5:	29 c3                	sub    %eax,%ebx
f01194e7:	89 d8                	mov    %ebx,%eax
f01194e9:	3d 80 03 00 00       	cmp    $0x380,%eax
f01194ee:	74 17                	je     f0119507 <test_kmalloc_nextfit+0x1472>
f01194f0:	83 ec 04             	sub    $0x4,%esp
f01194f3:	68 33 ab 13 f0       	push   $0xf013ab33
f01194f8:	68 64 01 00 00       	push   $0x164
f01194fd:	68 76 a8 13 f0       	push   $0xf013a876
f0119502:	e8 9f 6c fe ff       	call   f01001a6 <_panic>

	freeDiskFrames = pf_calculate_free_frames() ;
f0119507:	e8 80 a7 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011950c:	89 45 ec             	mov    %eax,-0x14(%ebp)
	freeFrames = sys_calculate_free_frames() ;
f011950f:	e8 aa 2e ff ff       	call   f010c3be <sys_calculate_free_frames>
f0119514:	89 45 f0             	mov    %eax,-0x10(%ebp)
	kfree(ptr_allocations[24]);		// Increase size of Hole 6 to 4 M
f0119517:	8b 85 e8 fb ff ff    	mov    -0x418(%ebp),%eax
f011951d:	83 ec 0c             	sub    $0xc,%esp
f0119520:	50                   	push   %eax
f0119521:	e8 b8 e0 fe ff       	call   f01075de <kfree>
f0119526:	83 c4 10             	add    $0x10,%esp
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0119529:	e8 5e a7 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011952e:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f0119531:	74 17                	je     f011954a <test_kmalloc_nextfit+0x14b5>
f0119533:	83 ec 04             	sub    $0x4,%esp
f0119536:	68 90 a8 13 f0       	push   $0xf013a890
f011953b:	68 69 01 00 00       	push   $0x169
f0119540:	68 76 a8 13 f0       	push   $0xf013a876
f0119545:	e8 5c 6c fe ff       	call   f01001a6 <_panic>
	if ((sys_calculate_free_frames() - freeFrames) != (2*Mega)/PAGE_SIZE) panic("Wrong free: Extra or less pages are removed from main memory");
f011954a:	e8 6f 2e ff ff       	call   f010c3be <sys_calculate_free_frames>
f011954f:	89 c2                	mov    %eax,%edx
f0119551:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0119554:	29 c2                	sub    %eax,%edx
f0119556:	89 d0                	mov    %edx,%eax
f0119558:	3d 00 02 00 00       	cmp    $0x200,%eax
f011955d:	74 17                	je     f0119576 <test_kmalloc_nextfit+0x14e1>
f011955f:	83 ec 04             	sub    $0x4,%esp
f0119562:	68 44 ab 13 f0       	push   $0xf013ab44
f0119567:	68 6a 01 00 00       	push   $0x16a
f011956c:	68 76 a8 13 f0       	push   $0xf013a876
f0119571:	e8 30 6c fe ff       	call   f01001a6 <_panic>

	freeDiskFrames = pf_calculate_free_frames() ;
f0119576:	e8 11 a7 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011957b:	89 45 ec             	mov    %eax,-0x14(%ebp)
	freeFrames = sys_calculate_free_frames() ;
f011957e:	e8 3b 2e ff ff       	call   f010c3be <sys_calculate_free_frames>
f0119583:	89 45 f0             	mov    %eax,-0x10(%ebp)
	tempAddress = kmalloc(4*Mega-kilo);		// Use Hole 6 -> Hole 6 = 0 M
f0119586:	83 ec 0c             	sub    $0xc,%esp
f0119589:	68 00 fc 3f 00       	push   $0x3ffc00
f011958e:	e8 31 e0 fe ff       	call   f01075c4 <kmalloc>
f0119593:	83 c4 10             	add    $0x10,%esp
f0119596:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x03000000)
f011959c:	c7 85 1c fe ff ff 00 	movl   $0x1000,-0x1e4(%ebp)
f01195a3:	10 00 00 
f01195a6:	8b 85 1c fe ff ff    	mov    -0x1e4(%ebp),%eax
f01195ac:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01195b1:	89 85 18 fe ff ff    	mov    %eax,-0x1e8(%ebp)
f01195b7:	8b 85 18 fe ff ff    	mov    -0x1e8(%ebp),%eax
f01195bd:	ba 00 00 00 00       	mov    $0x0,%edx
f01195c2:	f7 b5 1c fe ff ff    	divl   -0x1e4(%ebp)
f01195c8:	8b 85 18 fe ff ff    	mov    -0x1e8(%ebp),%eax
f01195ce:	29 d0                	sub    %edx,%eax
f01195d0:	89 c1                	mov    %eax,%ecx
f01195d2:	c7 85 14 fe ff ff 00 	movl   $0x1000,-0x1ec(%ebp)
f01195d9:	10 00 00 
f01195dc:	a0 bc 0e 6c f0       	mov    0xf06c0ebc,%al
f01195e1:	0f b6 d0             	movzbl %al,%edx
f01195e4:	8b 85 14 fe ff ff    	mov    -0x1ec(%ebp),%eax
f01195ea:	01 d0                	add    %edx,%eax
f01195ec:	48                   	dec    %eax
f01195ed:	89 85 10 fe ff ff    	mov    %eax,-0x1f0(%ebp)
f01195f3:	8b 85 10 fe ff ff    	mov    -0x1f0(%ebp),%eax
f01195f9:	ba 00 00 00 00       	mov    $0x0,%edx
f01195fe:	f7 b5 14 fe ff ff    	divl   -0x1ec(%ebp)
f0119604:	8b 85 10 fe ff ff    	mov    -0x1f0(%ebp),%eax
f011960a:	29 d0                	sub    %edx,%eax
f011960c:	01 c1                	add    %eax,%ecx
f011960e:	c7 85 0c fe ff ff 00 	movl   $0x1000,-0x1f4(%ebp)
f0119615:	10 00 00 
f0119618:	a0 bc 0e 6c f0       	mov    0xf06c0ebc,%al
f011961d:	0f b6 c0             	movzbl %al,%eax
f0119620:	c1 e0 04             	shl    $0x4,%eax
f0119623:	89 c2                	mov    %eax,%edx
f0119625:	8b 85 0c fe ff ff    	mov    -0x1f4(%ebp),%eax
f011962b:	01 d0                	add    %edx,%eax
f011962d:	48                   	dec    %eax
f011962e:	89 85 08 fe ff ff    	mov    %eax,-0x1f8(%ebp)
f0119634:	8b 85 08 fe ff ff    	mov    -0x1f8(%ebp),%eax
f011963a:	ba 00 00 00 00       	mov    $0x0,%edx
f011963f:	f7 b5 0c fe ff ff    	divl   -0x1f4(%ebp)
f0119645:	8b 85 08 fe ff ff    	mov    -0x1f8(%ebp),%eax
f011964b:	29 d0                	sub    %edx,%eax
f011964d:	01 c8                	add    %ecx,%eax
f011964f:	8d 90 00 40 00 f9    	lea    -0x6ffc000(%eax),%edx
f0119655:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f011965b:	39 c2                	cmp    %eax,%edx
f011965d:	74 17                	je     f0119676 <test_kmalloc_nextfit+0x15e1>
		panic("Next Fit not working correctly");
f011965f:	83 ec 04             	sub    $0x4,%esp
f0119662:	68 84 ab 13 f0       	push   $0xf013ab84
f0119667:	68 70 01 00 00       	push   $0x170
f011966c:	68 76 a8 13 f0       	push   $0xf013a876
f0119671:	e8 30 6b fe ff       	call   f01001a6 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0119676:	e8 11 a6 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011967b:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011967e:	74 17                	je     f0119697 <test_kmalloc_nextfit+0x1602>
f0119680:	83 ec 04             	sub    $0x4,%esp
f0119683:	68 90 a8 13 f0       	push   $0xf013a890
f0119688:	68 71 01 00 00       	push   $0x171
f011968d:	68 76 a8 13 f0       	push   $0xf013a876
f0119692:	e8 0f 6b fe ff       	call   f01001a6 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) != (4*Mega)/PAGE_SIZE) panic("Wrong allocation");
f0119697:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f011969a:	e8 1f 2d ff ff       	call   f010c3be <sys_calculate_free_frames>
f011969f:	29 c3                	sub    %eax,%ebx
f01196a1:	89 d8                	mov    %ebx,%eax
f01196a3:	3d 00 04 00 00       	cmp    $0x400,%eax
f01196a8:	74 17                	je     f01196c1 <test_kmalloc_nextfit+0x162c>
f01196aa:	83 ec 04             	sub    $0x4,%esp
f01196ad:	68 33 ab 13 f0       	push   $0xf013ab33
f01196b2:	68 72 01 00 00       	push   $0x172
f01196b7:	68 76 a8 13 f0       	push   $0xf013a876
f01196bc:	e8 e5 6a fe ff       	call   f01001a6 <_panic>

	cprintf("\nCASE2: (next fit WITH looping back) is succeeded...\n") ;
f01196c1:	83 ec 0c             	sub    $0xc,%esp
f01196c4:	68 e0 ab 13 f0       	push   $0xf013abe0
f01196c9:	e8 5f 75 fe ff       	call   f0100c2d <cprintf>
f01196ce:	83 c4 10             	add    $0x10,%esp
	/******************************/

	// Check that next fit returns null in case all holes are not free
	freeDiskFrames = pf_calculate_free_frames() ;
f01196d1:	e8 b6 a5 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f01196d6:	89 45 ec             	mov    %eax,-0x14(%ebp)
	freeFrames = sys_calculate_free_frames() ;
f01196d9:	e8 e0 2c ff ff       	call   f010c3be <sys_calculate_free_frames>
f01196de:	89 45 f0             	mov    %eax,-0x10(%ebp)
	tempAddress = kmalloc(6*Mega); 			   // No Suitable Hole is available
f01196e1:	83 ec 0c             	sub    $0xc,%esp
f01196e4:	68 00 00 60 00       	push   $0x600000
f01196e9:	e8 d6 de fe ff       	call   f01075c4 <kmalloc>
f01196ee:	83 c4 10             	add    $0x10,%esp
f01196f1:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
	if((uint32)tempAddress != 0x0)
f01196f7:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f01196fd:	85 c0                	test   %eax,%eax
f01196ff:	74 17                	je     f0119718 <test_kmalloc_nextfit+0x1683>
		panic("Next Fit not working correctly");
f0119701:	83 ec 04             	sub    $0x4,%esp
f0119704:	68 84 ab 13 f0       	push   $0xf013ab84
f0119709:	68 7c 01 00 00       	push   $0x17c
f011970e:	68 76 a8 13 f0       	push   $0xf013a876
f0119713:	e8 8e 6a fe ff       	call   f01001a6 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0119718:	e8 6f a5 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011971d:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f0119720:	74 17                	je     f0119739 <test_kmalloc_nextfit+0x16a4>
f0119722:	83 ec 04             	sub    $0x4,%esp
f0119725:	68 90 a8 13 f0       	push   $0xf013a890
f011972a:	68 7d 01 00 00       	push   $0x17d
f011972f:	68 76 a8 13 f0       	push   $0xf013a876
f0119734:	e8 6d 6a fe ff       	call   f01001a6 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Wrong allocation");
f0119739:	e8 80 2c ff ff       	call   f010c3be <sys_calculate_free_frames>
f011973e:	89 c2                	mov    %eax,%edx
f0119740:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0119743:	39 c2                	cmp    %eax,%edx
f0119745:	74 17                	je     f011975e <test_kmalloc_nextfit+0x16c9>
f0119747:	83 ec 04             	sub    $0x4,%esp
f011974a:	68 33 ab 13 f0       	push   $0xf013ab33
f011974f:	68 7e 01 00 00       	push   $0x17e
f0119754:	68 76 a8 13 f0       	push   $0xf013a876
f0119759:	e8 48 6a fe ff       	call   f01001a6 <_panic>

	cprintf("\nCASE3: (next fit with insufficient space) is succeeded...\n") ;
f011975e:	83 ec 0c             	sub    $0xc,%esp
f0119761:	68 18 ac 13 f0       	push   $0xf013ac18
f0119766:	e8 c2 74 fe ff       	call   f0100c2d <cprintf>
f011976b:	83 c4 10             	add    $0x10,%esp
	/******************************/

	cprintf("Congratulations!! test Next Fit completed successfully.\n");
f011976e:	83 ec 0c             	sub    $0xc,%esp
f0119771:	68 54 ac 13 f0       	push   $0xf013ac54
f0119776:	e8 b2 74 fe ff       	call   f0100c2d <cprintf>
f011977b:	83 c4 10             	add    $0x10,%esp
	return 1;
f011977e:	b8 01 00 00 00       	mov    $0x1,%eax

}
f0119783:	8d 65 f8             	lea    -0x8(%ebp),%esp
f0119786:	5b                   	pop    %ebx
f0119787:	5f                   	pop    %edi
f0119788:	5d                   	pop    %ebp
f0119789:	c3                   	ret    

f011978a <test_kmalloc_bestfit1>:

int test_kmalloc_bestfit1()
{
f011978a:	55                   	push   %ebp
f011978b:	89 e5                	mov    %esp,%ebp
f011978d:	57                   	push   %edi
f011978e:	53                   	push   %ebx
f011978f:	81 ec 90 01 00 00    	sub    $0x190,%esp
	cprintf("==============================================\n");
f0119795:	83 ec 0c             	sub    $0xc,%esp
f0119798:	68 b8 a7 13 f0       	push   $0xf013a7b8
f011979d:	e8 8b 74 fe ff       	call   f0100c2d <cprintf>
f01197a2:	83 c4 10             	add    $0x10,%esp
	cprintf("MAKE SURE to have a FRESH RUN for this test\n(i.e. don't run any program/test before it)\n");
f01197a5:	83 ec 0c             	sub    $0xc,%esp
f01197a8:	68 e8 a7 13 f0       	push   $0xf013a7e8
f01197ad:	e8 7b 74 fe ff       	call   f0100c2d <cprintf>
f01197b2:	83 c4 10             	add    $0x10,%esp
	cprintf("==============================================\n");
f01197b5:	83 ec 0c             	sub    $0xc,%esp
f01197b8:	68 b8 a7 13 f0       	push   $0xf013a7b8
f01197bd:	e8 6b 74 fe ff       	call   f0100c2d <cprintf>
f01197c2:	83 c4 10             	add    $0x10,%esp

	void* ptr_allocations[20] = {0};
f01197c5:	8d 95 68 fe ff ff    	lea    -0x198(%ebp),%edx
f01197cb:	b9 14 00 00 00       	mov    $0x14,%ecx
f01197d0:	b8 00 00 00 00       	mov    $0x0,%eax
f01197d5:	89 d7                	mov    %edx,%edi
f01197d7:	f3 ab                	rep stos %eax,%es:(%edi)
	uint32 freeDiskFrames;

	//[1] Allocate all
	{
		//Allocate 3 MB
		freeFrames = sys_calculate_free_frames() ;
f01197d9:	e8 e0 2b ff ff       	call   f010c3be <sys_calculate_free_frames>
f01197de:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01197e1:	e8 a6 a4 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f01197e6:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[0] = kmalloc(3*Mega-kilo);
f01197e9:	83 ec 0c             	sub    $0xc,%esp
f01197ec:	68 00 fc 2f 00       	push   $0x2ffc00
f01197f1:	e8 ce dd fe ff       	call   f01075c4 <kmalloc>
f01197f6:	83 c4 10             	add    $0x10,%esp
f01197f9:	89 85 68 fe ff ff    	mov    %eax,-0x198(%ebp)
		if ((uint32) ptr_allocations[0] != (ACTUAL_START)) panic("Wrong start address for the allocated space... ");
f01197ff:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f0119805:	89 c1                	mov    %eax,%ecx
f0119807:	c7 45 ec 00 10 00 00 	movl   $0x1000,-0x14(%ebp)
f011980e:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0119811:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0119816:	89 45 e8             	mov    %eax,-0x18(%ebp)
f0119819:	8b 45 e8             	mov    -0x18(%ebp),%eax
f011981c:	ba 00 00 00 00       	mov    $0x0,%edx
f0119821:	f7 75 ec             	divl   -0x14(%ebp)
f0119824:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0119827:	29 d0                	sub    %edx,%eax
f0119829:	89 c3                	mov    %eax,%ebx
f011982b:	c7 45 e4 00 10 00 00 	movl   $0x1000,-0x1c(%ebp)
f0119832:	a0 bc 0e 6c f0       	mov    0xf06c0ebc,%al
f0119837:	0f b6 d0             	movzbl %al,%edx
f011983a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f011983d:	01 d0                	add    %edx,%eax
f011983f:	48                   	dec    %eax
f0119840:	89 45 e0             	mov    %eax,-0x20(%ebp)
f0119843:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0119846:	ba 00 00 00 00       	mov    $0x0,%edx
f011984b:	f7 75 e4             	divl   -0x1c(%ebp)
f011984e:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0119851:	29 d0                	sub    %edx,%eax
f0119853:	01 c3                	add    %eax,%ebx
f0119855:	c7 45 dc 00 10 00 00 	movl   $0x1000,-0x24(%ebp)
f011985c:	a0 bc 0e 6c f0       	mov    0xf06c0ebc,%al
f0119861:	0f b6 c0             	movzbl %al,%eax
f0119864:	c1 e0 04             	shl    $0x4,%eax
f0119867:	89 c2                	mov    %eax,%edx
f0119869:	8b 45 dc             	mov    -0x24(%ebp),%eax
f011986c:	01 d0                	add    %edx,%eax
f011986e:	48                   	dec    %eax
f011986f:	89 45 d8             	mov    %eax,-0x28(%ebp)
f0119872:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0119875:	ba 00 00 00 00       	mov    $0x0,%edx
f011987a:	f7 75 dc             	divl   -0x24(%ebp)
f011987d:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0119880:	29 d0                	sub    %edx,%eax
f0119882:	01 d8                	add    %ebx,%eax
f0119884:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f0119889:	39 c1                	cmp    %eax,%ecx
f011988b:	74 17                	je     f01198a4 <test_kmalloc_bestfit1+0x11a>
f011988d:	83 ec 04             	sub    $0x4,%esp
f0119890:	68 90 ac 13 f0       	push   $0xf013ac90
f0119895:	68 98 01 00 00       	push   $0x198
f011989a:	68 76 a8 13 f0       	push   $0xf013a876
f011989f:	e8 02 69 fe ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01198a4:	e8 e3 a3 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f01198a9:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f01198ac:	74 17                	je     f01198c5 <test_kmalloc_bestfit1+0x13b>
f01198ae:	83 ec 04             	sub    $0x4,%esp
f01198b1:	68 90 a8 13 f0       	push   $0xf013a890
f01198b6:	68 99 01 00 00       	push   $0x199
f01198bb:	68 76 a8 13 f0       	push   $0xf013a876
f01198c0:	e8 e1 68 fe ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != ((3*Mega)/PAGE_SIZE)) panic("Wrong allocation: ");
f01198c5:	e8 f4 2a ff ff       	call   f010c3be <sys_calculate_free_frames>
f01198ca:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01198cd:	29 c2                	sub    %eax,%edx
f01198cf:	89 d0                	mov    %edx,%eax
f01198d1:	3d 00 03 00 00       	cmp    $0x300,%eax
f01198d6:	74 17                	je     f01198ef <test_kmalloc_bestfit1+0x165>
f01198d8:	83 ec 04             	sub    $0x4,%esp
f01198db:	68 c0 ac 13 f0       	push   $0xf013acc0
f01198e0:	68 9a 01 00 00       	push   $0x19a
f01198e5:	68 76 a8 13 f0       	push   $0xf013a876
f01198ea:	e8 b7 68 fe ff       	call   f01001a6 <_panic>

		//Allocate 3 MB
		freeFrames = sys_calculate_free_frames() ;
f01198ef:	e8 ca 2a ff ff       	call   f010c3be <sys_calculate_free_frames>
f01198f4:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01198f7:	e8 90 a3 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f01198fc:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[1] = kmalloc(3*Mega-kilo);
f01198ff:	83 ec 0c             	sub    $0xc,%esp
f0119902:	68 00 fc 2f 00       	push   $0x2ffc00
f0119907:	e8 b8 dc fe ff       	call   f01075c4 <kmalloc>
f011990c:	83 c4 10             	add    $0x10,%esp
f011990f:	89 85 6c fe ff ff    	mov    %eax,-0x194(%ebp)
		if ((uint32) ptr_allocations[1] !=  (ACTUAL_START + 3*Mega)) panic("Wrong start address for the allocated space... ");
f0119915:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f011991b:	89 c1                	mov    %eax,%ecx
f011991d:	c7 45 d4 00 10 00 00 	movl   $0x1000,-0x2c(%ebp)
f0119924:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0119927:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011992c:	89 45 d0             	mov    %eax,-0x30(%ebp)
f011992f:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0119932:	ba 00 00 00 00       	mov    $0x0,%edx
f0119937:	f7 75 d4             	divl   -0x2c(%ebp)
f011993a:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011993d:	29 d0                	sub    %edx,%eax
f011993f:	89 c3                	mov    %eax,%ebx
f0119941:	c7 45 cc 00 10 00 00 	movl   $0x1000,-0x34(%ebp)
f0119948:	a0 bc 0e 6c f0       	mov    0xf06c0ebc,%al
f011994d:	0f b6 d0             	movzbl %al,%edx
f0119950:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0119953:	01 d0                	add    %edx,%eax
f0119955:	48                   	dec    %eax
f0119956:	89 45 c8             	mov    %eax,-0x38(%ebp)
f0119959:	8b 45 c8             	mov    -0x38(%ebp),%eax
f011995c:	ba 00 00 00 00       	mov    $0x0,%edx
f0119961:	f7 75 cc             	divl   -0x34(%ebp)
f0119964:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0119967:	29 d0                	sub    %edx,%eax
f0119969:	01 c3                	add    %eax,%ebx
f011996b:	c7 45 c4 00 10 00 00 	movl   $0x1000,-0x3c(%ebp)
f0119972:	a0 bc 0e 6c f0       	mov    0xf06c0ebc,%al
f0119977:	0f b6 c0             	movzbl %al,%eax
f011997a:	c1 e0 04             	shl    $0x4,%eax
f011997d:	89 c2                	mov    %eax,%edx
f011997f:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0119982:	01 d0                	add    %edx,%eax
f0119984:	48                   	dec    %eax
f0119985:	89 45 c0             	mov    %eax,-0x40(%ebp)
f0119988:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011998b:	ba 00 00 00 00       	mov    $0x0,%edx
f0119990:	f7 75 c4             	divl   -0x3c(%ebp)
f0119993:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0119996:	29 d0                	sub    %edx,%eax
f0119998:	01 d8                	add    %ebx,%eax
f011999a:	2d 00 c0 cf 09       	sub    $0x9cfc000,%eax
f011999f:	39 c1                	cmp    %eax,%ecx
f01199a1:	74 17                	je     f01199ba <test_kmalloc_bestfit1+0x230>
f01199a3:	83 ec 04             	sub    $0x4,%esp
f01199a6:	68 90 ac 13 f0       	push   $0xf013ac90
f01199ab:	68 a0 01 00 00       	push   $0x1a0
f01199b0:	68 76 a8 13 f0       	push   $0xf013a876
f01199b5:	e8 ec 67 fe ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01199ba:	e8 cd a2 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f01199bf:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f01199c2:	74 17                	je     f01199db <test_kmalloc_bestfit1+0x251>
f01199c4:	83 ec 04             	sub    $0x4,%esp
f01199c7:	68 90 a8 13 f0       	push   $0xf013a890
f01199cc:	68 a1 01 00 00       	push   $0x1a1
f01199d1:	68 76 a8 13 f0       	push   $0xf013a876
f01199d6:	e8 cb 67 fe ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != ((3*Mega)/PAGE_SIZE)) panic("Wrong allocation: ");
f01199db:	e8 de 29 ff ff       	call   f010c3be <sys_calculate_free_frames>
f01199e0:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01199e3:	29 c2                	sub    %eax,%edx
f01199e5:	89 d0                	mov    %edx,%eax
f01199e7:	3d 00 03 00 00       	cmp    $0x300,%eax
f01199ec:	74 17                	je     f0119a05 <test_kmalloc_bestfit1+0x27b>
f01199ee:	83 ec 04             	sub    $0x4,%esp
f01199f1:	68 c0 ac 13 f0       	push   $0xf013acc0
f01199f6:	68 a2 01 00 00       	push   $0x1a2
f01199fb:	68 76 a8 13 f0       	push   $0xf013a876
f0119a00:	e8 a1 67 fe ff       	call   f01001a6 <_panic>

		//Allocate 2 MB
		freeFrames = sys_calculate_free_frames() ;
f0119a05:	e8 b4 29 ff ff       	call   f010c3be <sys_calculate_free_frames>
f0119a0a:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0119a0d:	e8 7a a2 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0119a12:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[2] = kmalloc(2*Mega-kilo);
f0119a15:	83 ec 0c             	sub    $0xc,%esp
f0119a18:	68 00 fc 1f 00       	push   $0x1ffc00
f0119a1d:	e8 a2 db fe ff       	call   f01075c4 <kmalloc>
f0119a22:	83 c4 10             	add    $0x10,%esp
f0119a25:	89 85 70 fe ff ff    	mov    %eax,-0x190(%ebp)
		if ((uint32) ptr_allocations[2] !=  (ACTUAL_START + 6*Mega)) panic("Wrong start address for the allocated space... ");
f0119a2b:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f0119a31:	89 c1                	mov    %eax,%ecx
f0119a33:	c7 45 bc 00 10 00 00 	movl   $0x1000,-0x44(%ebp)
f0119a3a:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0119a3d:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0119a42:	89 45 b8             	mov    %eax,-0x48(%ebp)
f0119a45:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0119a48:	ba 00 00 00 00       	mov    $0x0,%edx
f0119a4d:	f7 75 bc             	divl   -0x44(%ebp)
f0119a50:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0119a53:	29 d0                	sub    %edx,%eax
f0119a55:	89 c3                	mov    %eax,%ebx
f0119a57:	c7 45 b4 00 10 00 00 	movl   $0x1000,-0x4c(%ebp)
f0119a5e:	a0 bc 0e 6c f0       	mov    0xf06c0ebc,%al
f0119a63:	0f b6 d0             	movzbl %al,%edx
f0119a66:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0119a69:	01 d0                	add    %edx,%eax
f0119a6b:	48                   	dec    %eax
f0119a6c:	89 45 b0             	mov    %eax,-0x50(%ebp)
f0119a6f:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0119a72:	ba 00 00 00 00       	mov    $0x0,%edx
f0119a77:	f7 75 b4             	divl   -0x4c(%ebp)
f0119a7a:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0119a7d:	29 d0                	sub    %edx,%eax
f0119a7f:	01 c3                	add    %eax,%ebx
f0119a81:	c7 45 ac 00 10 00 00 	movl   $0x1000,-0x54(%ebp)
f0119a88:	a0 bc 0e 6c f0       	mov    0xf06c0ebc,%al
f0119a8d:	0f b6 c0             	movzbl %al,%eax
f0119a90:	c1 e0 04             	shl    $0x4,%eax
f0119a93:	89 c2                	mov    %eax,%edx
f0119a95:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0119a98:	01 d0                	add    %edx,%eax
f0119a9a:	48                   	dec    %eax
f0119a9b:	89 45 a8             	mov    %eax,-0x58(%ebp)
f0119a9e:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0119aa1:	ba 00 00 00 00       	mov    $0x0,%edx
f0119aa6:	f7 75 ac             	divl   -0x54(%ebp)
f0119aa9:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0119aac:	29 d0                	sub    %edx,%eax
f0119aae:	01 d8                	add    %ebx,%eax
f0119ab0:	2d 00 c0 9f 09       	sub    $0x99fc000,%eax
f0119ab5:	39 c1                	cmp    %eax,%ecx
f0119ab7:	74 17                	je     f0119ad0 <test_kmalloc_bestfit1+0x346>
f0119ab9:	83 ec 04             	sub    $0x4,%esp
f0119abc:	68 90 ac 13 f0       	push   $0xf013ac90
f0119ac1:	68 a8 01 00 00       	push   $0x1a8
f0119ac6:	68 76 a8 13 f0       	push   $0xf013a876
f0119acb:	e8 d6 66 fe ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0119ad0:	e8 b7 a1 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0119ad5:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0119ad8:	74 17                	je     f0119af1 <test_kmalloc_bestfit1+0x367>
f0119ada:	83 ec 04             	sub    $0x4,%esp
f0119add:	68 90 a8 13 f0       	push   $0xf013a890
f0119ae2:	68 a9 01 00 00       	push   $0x1a9
f0119ae7:	68 76 a8 13 f0       	push   $0xf013a876
f0119aec:	e8 b5 66 fe ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != ((2*Mega)/PAGE_SIZE)) panic("Wrong allocation: ");
f0119af1:	e8 c8 28 ff ff       	call   f010c3be <sys_calculate_free_frames>
f0119af6:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0119af9:	29 c2                	sub    %eax,%edx
f0119afb:	89 d0                	mov    %edx,%eax
f0119afd:	3d 00 02 00 00       	cmp    $0x200,%eax
f0119b02:	74 17                	je     f0119b1b <test_kmalloc_bestfit1+0x391>
f0119b04:	83 ec 04             	sub    $0x4,%esp
f0119b07:	68 c0 ac 13 f0       	push   $0xf013acc0
f0119b0c:	68 aa 01 00 00       	push   $0x1aa
f0119b11:	68 76 a8 13 f0       	push   $0xf013a876
f0119b16:	e8 8b 66 fe ff       	call   f01001a6 <_panic>

		//Allocate 2 MB
		freeFrames = sys_calculate_free_frames() ;
f0119b1b:	e8 9e 28 ff ff       	call   f010c3be <sys_calculate_free_frames>
f0119b20:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0119b23:	e8 64 a1 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0119b28:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[3] = kmalloc(2*Mega-kilo);
f0119b2b:	83 ec 0c             	sub    $0xc,%esp
f0119b2e:	68 00 fc 1f 00       	push   $0x1ffc00
f0119b33:	e8 8c da fe ff       	call   f01075c4 <kmalloc>
f0119b38:	83 c4 10             	add    $0x10,%esp
f0119b3b:	89 85 74 fe ff ff    	mov    %eax,-0x18c(%ebp)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 8*Mega)) panic("Wrong start address for the allocated space... ");
f0119b41:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f0119b47:	89 c1                	mov    %eax,%ecx
f0119b49:	c7 45 a4 00 10 00 00 	movl   $0x1000,-0x5c(%ebp)
f0119b50:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0119b53:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0119b58:	89 45 a0             	mov    %eax,-0x60(%ebp)
f0119b5b:	8b 45 a0             	mov    -0x60(%ebp),%eax
f0119b5e:	ba 00 00 00 00       	mov    $0x0,%edx
f0119b63:	f7 75 a4             	divl   -0x5c(%ebp)
f0119b66:	8b 45 a0             	mov    -0x60(%ebp),%eax
f0119b69:	29 d0                	sub    %edx,%eax
f0119b6b:	89 c3                	mov    %eax,%ebx
f0119b6d:	c7 45 9c 00 10 00 00 	movl   $0x1000,-0x64(%ebp)
f0119b74:	a0 bc 0e 6c f0       	mov    0xf06c0ebc,%al
f0119b79:	0f b6 d0             	movzbl %al,%edx
f0119b7c:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0119b7f:	01 d0                	add    %edx,%eax
f0119b81:	48                   	dec    %eax
f0119b82:	89 45 98             	mov    %eax,-0x68(%ebp)
f0119b85:	8b 45 98             	mov    -0x68(%ebp),%eax
f0119b88:	ba 00 00 00 00       	mov    $0x0,%edx
f0119b8d:	f7 75 9c             	divl   -0x64(%ebp)
f0119b90:	8b 45 98             	mov    -0x68(%ebp),%eax
f0119b93:	29 d0                	sub    %edx,%eax
f0119b95:	01 c3                	add    %eax,%ebx
f0119b97:	c7 45 94 00 10 00 00 	movl   $0x1000,-0x6c(%ebp)
f0119b9e:	a0 bc 0e 6c f0       	mov    0xf06c0ebc,%al
f0119ba3:	0f b6 c0             	movzbl %al,%eax
f0119ba6:	c1 e0 04             	shl    $0x4,%eax
f0119ba9:	89 c2                	mov    %eax,%edx
f0119bab:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0119bae:	01 d0                	add    %edx,%eax
f0119bb0:	48                   	dec    %eax
f0119bb1:	89 45 90             	mov    %eax,-0x70(%ebp)
f0119bb4:	8b 45 90             	mov    -0x70(%ebp),%eax
f0119bb7:	ba 00 00 00 00       	mov    $0x0,%edx
f0119bbc:	f7 75 94             	divl   -0x6c(%ebp)
f0119bbf:	8b 45 90             	mov    -0x70(%ebp),%eax
f0119bc2:	29 d0                	sub    %edx,%eax
f0119bc4:	01 d8                	add    %ebx,%eax
f0119bc6:	2d 00 c0 7f 09       	sub    $0x97fc000,%eax
f0119bcb:	39 c1                	cmp    %eax,%ecx
f0119bcd:	74 17                	je     f0119be6 <test_kmalloc_bestfit1+0x45c>
f0119bcf:	83 ec 04             	sub    $0x4,%esp
f0119bd2:	68 90 ac 13 f0       	push   $0xf013ac90
f0119bd7:	68 b0 01 00 00       	push   $0x1b0
f0119bdc:	68 76 a8 13 f0       	push   $0xf013a876
f0119be1:	e8 c0 65 fe ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0119be6:	e8 a1 a0 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0119beb:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0119bee:	74 17                	je     f0119c07 <test_kmalloc_bestfit1+0x47d>
f0119bf0:	83 ec 04             	sub    $0x4,%esp
f0119bf3:	68 90 a8 13 f0       	push   $0xf013a890
f0119bf8:	68 b1 01 00 00       	push   $0x1b1
f0119bfd:	68 76 a8 13 f0       	push   $0xf013a876
f0119c02:	e8 9f 65 fe ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=  ((2*Mega)/PAGE_SIZE)) panic("Wrong allocation: ");
f0119c07:	e8 b2 27 ff ff       	call   f010c3be <sys_calculate_free_frames>
f0119c0c:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0119c0f:	29 c2                	sub    %eax,%edx
f0119c11:	89 d0                	mov    %edx,%eax
f0119c13:	3d 00 02 00 00       	cmp    $0x200,%eax
f0119c18:	74 17                	je     f0119c31 <test_kmalloc_bestfit1+0x4a7>
f0119c1a:	83 ec 04             	sub    $0x4,%esp
f0119c1d:	68 c0 ac 13 f0       	push   $0xf013acc0
f0119c22:	68 b2 01 00 00       	push   $0x1b2
f0119c27:	68 76 a8 13 f0       	push   $0xf013a876
f0119c2c:	e8 75 65 fe ff       	call   f01001a6 <_panic>

		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames() ;
f0119c31:	e8 88 27 ff ff       	call   f010c3be <sys_calculate_free_frames>
f0119c36:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0119c39:	e8 4e a0 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0119c3e:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[4] = kmalloc(1*Mega-kilo);
f0119c41:	83 ec 0c             	sub    $0xc,%esp
f0119c44:	68 00 fc 0f 00       	push   $0xffc00
f0119c49:	e8 76 d9 fe ff       	call   f01075c4 <kmalloc>
f0119c4e:	83 c4 10             	add    $0x10,%esp
f0119c51:	89 85 78 fe ff ff    	mov    %eax,-0x188(%ebp)
		if ((uint32) ptr_allocations[4] !=  (ACTUAL_START + 10*Mega)) panic("Wrong start address for the allocated space... ");
f0119c57:	8b 85 78 fe ff ff    	mov    -0x188(%ebp),%eax
f0119c5d:	89 c1                	mov    %eax,%ecx
f0119c5f:	c7 45 8c 00 10 00 00 	movl   $0x1000,-0x74(%ebp)
f0119c66:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0119c69:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0119c6e:	89 45 88             	mov    %eax,-0x78(%ebp)
f0119c71:	8b 45 88             	mov    -0x78(%ebp),%eax
f0119c74:	ba 00 00 00 00       	mov    $0x0,%edx
f0119c79:	f7 75 8c             	divl   -0x74(%ebp)
f0119c7c:	8b 45 88             	mov    -0x78(%ebp),%eax
f0119c7f:	29 d0                	sub    %edx,%eax
f0119c81:	89 c3                	mov    %eax,%ebx
f0119c83:	c7 45 84 00 10 00 00 	movl   $0x1000,-0x7c(%ebp)
f0119c8a:	a0 bc 0e 6c f0       	mov    0xf06c0ebc,%al
f0119c8f:	0f b6 d0             	movzbl %al,%edx
f0119c92:	8b 45 84             	mov    -0x7c(%ebp),%eax
f0119c95:	01 d0                	add    %edx,%eax
f0119c97:	48                   	dec    %eax
f0119c98:	89 45 80             	mov    %eax,-0x80(%ebp)
f0119c9b:	8b 45 80             	mov    -0x80(%ebp),%eax
f0119c9e:	ba 00 00 00 00       	mov    $0x0,%edx
f0119ca3:	f7 75 84             	divl   -0x7c(%ebp)
f0119ca6:	8b 45 80             	mov    -0x80(%ebp),%eax
f0119ca9:	29 d0                	sub    %edx,%eax
f0119cab:	01 c3                	add    %eax,%ebx
f0119cad:	c7 85 7c ff ff ff 00 	movl   $0x1000,-0x84(%ebp)
f0119cb4:	10 00 00 
f0119cb7:	a0 bc 0e 6c f0       	mov    0xf06c0ebc,%al
f0119cbc:	0f b6 c0             	movzbl %al,%eax
f0119cbf:	c1 e0 04             	shl    $0x4,%eax
f0119cc2:	89 c2                	mov    %eax,%edx
f0119cc4:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f0119cca:	01 d0                	add    %edx,%eax
f0119ccc:	48                   	dec    %eax
f0119ccd:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)
f0119cd3:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f0119cd9:	ba 00 00 00 00       	mov    $0x0,%edx
f0119cde:	f7 b5 7c ff ff ff    	divl   -0x84(%ebp)
f0119ce4:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f0119cea:	29 d0                	sub    %edx,%eax
f0119cec:	01 d8                	add    %ebx,%eax
f0119cee:	2d 00 c0 5f 09       	sub    $0x95fc000,%eax
f0119cf3:	39 c1                	cmp    %eax,%ecx
f0119cf5:	74 17                	je     f0119d0e <test_kmalloc_bestfit1+0x584>
f0119cf7:	83 ec 04             	sub    $0x4,%esp
f0119cfa:	68 90 ac 13 f0       	push   $0xf013ac90
f0119cff:	68 b8 01 00 00       	push   $0x1b8
f0119d04:	68 76 a8 13 f0       	push   $0xf013a876
f0119d09:	e8 98 64 fe ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0119d0e:	e8 79 9f fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0119d13:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0119d16:	74 17                	je     f0119d2f <test_kmalloc_bestfit1+0x5a5>
f0119d18:	83 ec 04             	sub    $0x4,%esp
f0119d1b:	68 90 a8 13 f0       	push   $0xf013a890
f0119d20:	68 b9 01 00 00       	push   $0x1b9
f0119d25:	68 76 a8 13 f0       	push   $0xf013a876
f0119d2a:	e8 77 64 fe ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: ");
f0119d2f:	e8 8a 26 ff ff       	call   f010c3be <sys_calculate_free_frames>
f0119d34:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0119d37:	29 c2                	sub    %eax,%edx
f0119d39:	89 d0                	mov    %edx,%eax
f0119d3b:	3d 00 01 00 00       	cmp    $0x100,%eax
f0119d40:	74 17                	je     f0119d59 <test_kmalloc_bestfit1+0x5cf>
f0119d42:	83 ec 04             	sub    $0x4,%esp
f0119d45:	68 c0 ac 13 f0       	push   $0xf013acc0
f0119d4a:	68 ba 01 00 00       	push   $0x1ba
f0119d4f:	68 76 a8 13 f0       	push   $0xf013a876
f0119d54:	e8 4d 64 fe ff       	call   f01001a6 <_panic>

		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames() ;
f0119d59:	e8 60 26 ff ff       	call   f010c3be <sys_calculate_free_frames>
f0119d5e:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0119d61:	e8 26 9f fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0119d66:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[5] = kmalloc(1*Mega-kilo);
f0119d69:	83 ec 0c             	sub    $0xc,%esp
f0119d6c:	68 00 fc 0f 00       	push   $0xffc00
f0119d71:	e8 4e d8 fe ff       	call   f01075c4 <kmalloc>
f0119d76:	83 c4 10             	add    $0x10,%esp
f0119d79:	89 85 7c fe ff ff    	mov    %eax,-0x184(%ebp)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 11*Mega)) panic("Wrong start address for the allocated space... ");
f0119d7f:	8b 85 7c fe ff ff    	mov    -0x184(%ebp),%eax
f0119d85:	89 c1                	mov    %eax,%ecx
f0119d87:	c7 85 74 ff ff ff 00 	movl   $0x1000,-0x8c(%ebp)
f0119d8e:	10 00 00 
f0119d91:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f0119d97:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0119d9c:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
f0119da2:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f0119da8:	ba 00 00 00 00       	mov    $0x0,%edx
f0119dad:	f7 b5 74 ff ff ff    	divl   -0x8c(%ebp)
f0119db3:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f0119db9:	29 d0                	sub    %edx,%eax
f0119dbb:	89 c3                	mov    %eax,%ebx
f0119dbd:	c7 85 6c ff ff ff 00 	movl   $0x1000,-0x94(%ebp)
f0119dc4:	10 00 00 
f0119dc7:	a0 bc 0e 6c f0       	mov    0xf06c0ebc,%al
f0119dcc:	0f b6 d0             	movzbl %al,%edx
f0119dcf:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f0119dd5:	01 d0                	add    %edx,%eax
f0119dd7:	48                   	dec    %eax
f0119dd8:	89 85 68 ff ff ff    	mov    %eax,-0x98(%ebp)
f0119dde:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f0119de4:	ba 00 00 00 00       	mov    $0x0,%edx
f0119de9:	f7 b5 6c ff ff ff    	divl   -0x94(%ebp)
f0119def:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f0119df5:	29 d0                	sub    %edx,%eax
f0119df7:	01 c3                	add    %eax,%ebx
f0119df9:	c7 85 64 ff ff ff 00 	movl   $0x1000,-0x9c(%ebp)
f0119e00:	10 00 00 
f0119e03:	a0 bc 0e 6c f0       	mov    0xf06c0ebc,%al
f0119e08:	0f b6 c0             	movzbl %al,%eax
f0119e0b:	c1 e0 04             	shl    $0x4,%eax
f0119e0e:	89 c2                	mov    %eax,%edx
f0119e10:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f0119e16:	01 d0                	add    %edx,%eax
f0119e18:	48                   	dec    %eax
f0119e19:	89 85 60 ff ff ff    	mov    %eax,-0xa0(%ebp)
f0119e1f:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f0119e25:	ba 00 00 00 00       	mov    $0x0,%edx
f0119e2a:	f7 b5 64 ff ff ff    	divl   -0x9c(%ebp)
f0119e30:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f0119e36:	29 d0                	sub    %edx,%eax
f0119e38:	01 d8                	add    %ebx,%eax
f0119e3a:	2d 00 c0 4f 09       	sub    $0x94fc000,%eax
f0119e3f:	39 c1                	cmp    %eax,%ecx
f0119e41:	74 17                	je     f0119e5a <test_kmalloc_bestfit1+0x6d0>
f0119e43:	83 ec 04             	sub    $0x4,%esp
f0119e46:	68 90 ac 13 f0       	push   $0xf013ac90
f0119e4b:	68 c0 01 00 00       	push   $0x1c0
f0119e50:	68 76 a8 13 f0       	push   $0xf013a876
f0119e55:	e8 4c 63 fe ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0119e5a:	e8 2d 9e fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0119e5f:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0119e62:	74 17                	je     f0119e7b <test_kmalloc_bestfit1+0x6f1>
f0119e64:	83 ec 04             	sub    $0x4,%esp
f0119e67:	68 90 a8 13 f0       	push   $0xf013a890
f0119e6c:	68 c1 01 00 00       	push   $0x1c1
f0119e71:	68 76 a8 13 f0       	push   $0xf013a876
f0119e76:	e8 2b 63 fe ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: ");
f0119e7b:	e8 3e 25 ff ff       	call   f010c3be <sys_calculate_free_frames>
f0119e80:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0119e83:	29 c2                	sub    %eax,%edx
f0119e85:	89 d0                	mov    %edx,%eax
f0119e87:	3d 00 01 00 00       	cmp    $0x100,%eax
f0119e8c:	74 17                	je     f0119ea5 <test_kmalloc_bestfit1+0x71b>
f0119e8e:	83 ec 04             	sub    $0x4,%esp
f0119e91:	68 c0 ac 13 f0       	push   $0xf013acc0
f0119e96:	68 c2 01 00 00       	push   $0x1c2
f0119e9b:	68 76 a8 13 f0       	push   $0xf013a876
f0119ea0:	e8 01 63 fe ff       	call   f01001a6 <_panic>

		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames() ;
f0119ea5:	e8 14 25 ff ff       	call   f010c3be <sys_calculate_free_frames>
f0119eaa:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0119ead:	e8 da 9d fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0119eb2:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[6] = kmalloc(1*Mega-kilo);
f0119eb5:	83 ec 0c             	sub    $0xc,%esp
f0119eb8:	68 00 fc 0f 00       	push   $0xffc00
f0119ebd:	e8 02 d7 fe ff       	call   f01075c4 <kmalloc>
f0119ec2:	83 c4 10             	add    $0x10,%esp
f0119ec5:	89 85 80 fe ff ff    	mov    %eax,-0x180(%ebp)
		if ((uint32) ptr_allocations[6] != (ACTUAL_START + 12*Mega)) panic("Wrong start address for the allocated space... ");
f0119ecb:	8b 85 80 fe ff ff    	mov    -0x180(%ebp),%eax
f0119ed1:	89 c1                	mov    %eax,%ecx
f0119ed3:	c7 85 5c ff ff ff 00 	movl   $0x1000,-0xa4(%ebp)
f0119eda:	10 00 00 
f0119edd:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f0119ee3:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0119ee8:	89 85 58 ff ff ff    	mov    %eax,-0xa8(%ebp)
f0119eee:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f0119ef4:	ba 00 00 00 00       	mov    $0x0,%edx
f0119ef9:	f7 b5 5c ff ff ff    	divl   -0xa4(%ebp)
f0119eff:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f0119f05:	29 d0                	sub    %edx,%eax
f0119f07:	89 c3                	mov    %eax,%ebx
f0119f09:	c7 85 54 ff ff ff 00 	movl   $0x1000,-0xac(%ebp)
f0119f10:	10 00 00 
f0119f13:	a0 bc 0e 6c f0       	mov    0xf06c0ebc,%al
f0119f18:	0f b6 d0             	movzbl %al,%edx
f0119f1b:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f0119f21:	01 d0                	add    %edx,%eax
f0119f23:	48                   	dec    %eax
f0119f24:	89 85 50 ff ff ff    	mov    %eax,-0xb0(%ebp)
f0119f2a:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f0119f30:	ba 00 00 00 00       	mov    $0x0,%edx
f0119f35:	f7 b5 54 ff ff ff    	divl   -0xac(%ebp)
f0119f3b:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f0119f41:	29 d0                	sub    %edx,%eax
f0119f43:	01 c3                	add    %eax,%ebx
f0119f45:	c7 85 4c ff ff ff 00 	movl   $0x1000,-0xb4(%ebp)
f0119f4c:	10 00 00 
f0119f4f:	a0 bc 0e 6c f0       	mov    0xf06c0ebc,%al
f0119f54:	0f b6 c0             	movzbl %al,%eax
f0119f57:	c1 e0 04             	shl    $0x4,%eax
f0119f5a:	89 c2                	mov    %eax,%edx
f0119f5c:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0119f62:	01 d0                	add    %edx,%eax
f0119f64:	48                   	dec    %eax
f0119f65:	89 85 48 ff ff ff    	mov    %eax,-0xb8(%ebp)
f0119f6b:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f0119f71:	ba 00 00 00 00       	mov    $0x0,%edx
f0119f76:	f7 b5 4c ff ff ff    	divl   -0xb4(%ebp)
f0119f7c:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f0119f82:	29 d0                	sub    %edx,%eax
f0119f84:	01 d8                	add    %ebx,%eax
f0119f86:	2d 00 c0 3f 09       	sub    $0x93fc000,%eax
f0119f8b:	39 c1                	cmp    %eax,%ecx
f0119f8d:	74 17                	je     f0119fa6 <test_kmalloc_bestfit1+0x81c>
f0119f8f:	83 ec 04             	sub    $0x4,%esp
f0119f92:	68 90 ac 13 f0       	push   $0xf013ac90
f0119f97:	68 c8 01 00 00       	push   $0x1c8
f0119f9c:	68 76 a8 13 f0       	push   $0xf013a876
f0119fa1:	e8 00 62 fe ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0119fa6:	e8 e1 9c fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0119fab:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0119fae:	74 17                	je     f0119fc7 <test_kmalloc_bestfit1+0x83d>
f0119fb0:	83 ec 04             	sub    $0x4,%esp
f0119fb3:	68 90 a8 13 f0       	push   $0xf013a890
f0119fb8:	68 c9 01 00 00       	push   $0x1c9
f0119fbd:	68 76 a8 13 f0       	push   $0xf013a876
f0119fc2:	e8 df 61 fe ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: ");
f0119fc7:	e8 f2 23 ff ff       	call   f010c3be <sys_calculate_free_frames>
f0119fcc:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0119fcf:	29 c2                	sub    %eax,%edx
f0119fd1:	89 d0                	mov    %edx,%eax
f0119fd3:	3d 00 01 00 00       	cmp    $0x100,%eax
f0119fd8:	74 17                	je     f0119ff1 <test_kmalloc_bestfit1+0x867>
f0119fda:	83 ec 04             	sub    $0x4,%esp
f0119fdd:	68 c0 ac 13 f0       	push   $0xf013acc0
f0119fe2:	68 ca 01 00 00       	push   $0x1ca
f0119fe7:	68 76 a8 13 f0       	push   $0xf013a876
f0119fec:	e8 b5 61 fe ff       	call   f01001a6 <_panic>

		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames() ;
f0119ff1:	e8 c8 23 ff ff       	call   f010c3be <sys_calculate_free_frames>
f0119ff6:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0119ff9:	e8 8e 9c fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0119ffe:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[7] = kmalloc(1*Mega-kilo);
f011a001:	83 ec 0c             	sub    $0xc,%esp
f011a004:	68 00 fc 0f 00       	push   $0xffc00
f011a009:	e8 b6 d5 fe ff       	call   f01075c4 <kmalloc>
f011a00e:	83 c4 10             	add    $0x10,%esp
f011a011:	89 85 84 fe ff ff    	mov    %eax,-0x17c(%ebp)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 13*Mega)) panic("Wrong start address for the allocated space... ");
f011a017:	8b 85 84 fe ff ff    	mov    -0x17c(%ebp),%eax
f011a01d:	89 c1                	mov    %eax,%ecx
f011a01f:	c7 85 44 ff ff ff 00 	movl   $0x1000,-0xbc(%ebp)
f011a026:	10 00 00 
f011a029:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f011a02f:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011a034:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%ebp)
f011a03a:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f011a040:	ba 00 00 00 00       	mov    $0x0,%edx
f011a045:	f7 b5 44 ff ff ff    	divl   -0xbc(%ebp)
f011a04b:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f011a051:	29 d0                	sub    %edx,%eax
f011a053:	89 c3                	mov    %eax,%ebx
f011a055:	c7 85 3c ff ff ff 00 	movl   $0x1000,-0xc4(%ebp)
f011a05c:	10 00 00 
f011a05f:	a0 bc 0e 6c f0       	mov    0xf06c0ebc,%al
f011a064:	0f b6 d0             	movzbl %al,%edx
f011a067:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f011a06d:	01 d0                	add    %edx,%eax
f011a06f:	48                   	dec    %eax
f011a070:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
f011a076:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f011a07c:	ba 00 00 00 00       	mov    $0x0,%edx
f011a081:	f7 b5 3c ff ff ff    	divl   -0xc4(%ebp)
f011a087:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f011a08d:	29 d0                	sub    %edx,%eax
f011a08f:	01 c3                	add    %eax,%ebx
f011a091:	c7 85 34 ff ff ff 00 	movl   $0x1000,-0xcc(%ebp)
f011a098:	10 00 00 
f011a09b:	a0 bc 0e 6c f0       	mov    0xf06c0ebc,%al
f011a0a0:	0f b6 c0             	movzbl %al,%eax
f011a0a3:	c1 e0 04             	shl    $0x4,%eax
f011a0a6:	89 c2                	mov    %eax,%edx
f011a0a8:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f011a0ae:	01 d0                	add    %edx,%eax
f011a0b0:	48                   	dec    %eax
f011a0b1:	89 85 30 ff ff ff    	mov    %eax,-0xd0(%ebp)
f011a0b7:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f011a0bd:	ba 00 00 00 00       	mov    $0x0,%edx
f011a0c2:	f7 b5 34 ff ff ff    	divl   -0xcc(%ebp)
f011a0c8:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f011a0ce:	29 d0                	sub    %edx,%eax
f011a0d0:	01 d8                	add    %ebx,%eax
f011a0d2:	2d 00 c0 2f 09       	sub    $0x92fc000,%eax
f011a0d7:	39 c1                	cmp    %eax,%ecx
f011a0d9:	74 17                	je     f011a0f2 <test_kmalloc_bestfit1+0x968>
f011a0db:	83 ec 04             	sub    $0x4,%esp
f011a0de:	68 90 ac 13 f0       	push   $0xf013ac90
f011a0e3:	68 d0 01 00 00       	push   $0x1d0
f011a0e8:	68 76 a8 13 f0       	push   $0xf013a876
f011a0ed:	e8 b4 60 fe ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011a0f2:	e8 95 9b fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011a0f7:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011a0fa:	74 17                	je     f011a113 <test_kmalloc_bestfit1+0x989>
f011a0fc:	83 ec 04             	sub    $0x4,%esp
f011a0ff:	68 90 a8 13 f0       	push   $0xf013a890
f011a104:	68 d1 01 00 00       	push   $0x1d1
f011a109:	68 76 a8 13 f0       	push   $0xf013a876
f011a10e:	e8 93 60 fe ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: ");
f011a113:	e8 a6 22 ff ff       	call   f010c3be <sys_calculate_free_frames>
f011a118:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011a11b:	29 c2                	sub    %eax,%edx
f011a11d:	89 d0                	mov    %edx,%eax
f011a11f:	3d 00 01 00 00       	cmp    $0x100,%eax
f011a124:	74 17                	je     f011a13d <test_kmalloc_bestfit1+0x9b3>
f011a126:	83 ec 04             	sub    $0x4,%esp
f011a129:	68 c0 ac 13 f0       	push   $0xf013acc0
f011a12e:	68 d2 01 00 00       	push   $0x1d2
f011a133:	68 76 a8 13 f0       	push   $0xf013a876
f011a138:	e8 69 60 fe ff       	call   f01001a6 <_panic>
	}

	//[2] Free some to create holes
	{
		//3 MB Hole
		freeFrames = sys_calculate_free_frames() ;
f011a13d:	e8 7c 22 ff ff       	call   f010c3be <sys_calculate_free_frames>
f011a142:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011a145:	e8 42 9b fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011a14a:	89 45 f0             	mov    %eax,-0x10(%ebp)
		kfree(ptr_allocations[1]);
f011a14d:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f011a153:	83 ec 0c             	sub    $0xc,%esp
f011a156:	50                   	push   %eax
f011a157:	e8 82 d4 fe ff       	call   f01075de <kfree>
f011a15c:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011a15f:	e8 28 9b fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011a164:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011a167:	74 17                	je     f011a180 <test_kmalloc_bestfit1+0x9f6>
f011a169:	83 ec 04             	sub    $0x4,%esp
f011a16c:	68 90 a8 13 f0       	push   $0xf013a890
f011a171:	68 db 01 00 00       	push   $0x1db
f011a176:	68 76 a8 13 f0       	push   $0xf013a876
f011a17b:	e8 26 60 fe ff       	call   f01001a6 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != ((3*Mega)/PAGE_SIZE)) panic("Wrong free: ");
f011a180:	e8 39 22 ff ff       	call   f010c3be <sys_calculate_free_frames>
f011a185:	2b 45 f4             	sub    -0xc(%ebp),%eax
f011a188:	3d 00 03 00 00       	cmp    $0x300,%eax
f011a18d:	74 17                	je     f011a1a6 <test_kmalloc_bestfit1+0xa1c>
f011a18f:	83 ec 04             	sub    $0x4,%esp
f011a192:	68 d3 ac 13 f0       	push   $0xf013acd3
f011a197:	68 dc 01 00 00       	push   $0x1dc
f011a19c:	68 76 a8 13 f0       	push   $0xf013a876
f011a1a1:	e8 00 60 fe ff       	call   f01001a6 <_panic>

		//2 MB Hole
		freeFrames = sys_calculate_free_frames() ;
f011a1a6:	e8 13 22 ff ff       	call   f010c3be <sys_calculate_free_frames>
f011a1ab:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011a1ae:	e8 d9 9a fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011a1b3:	89 45 f0             	mov    %eax,-0x10(%ebp)
		kfree(ptr_allocations[3]);
f011a1b6:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f011a1bc:	83 ec 0c             	sub    $0xc,%esp
f011a1bf:	50                   	push   %eax
f011a1c0:	e8 19 d4 fe ff       	call   f01075de <kfree>
f011a1c5:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011a1c8:	e8 bf 9a fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011a1cd:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011a1d0:	74 17                	je     f011a1e9 <test_kmalloc_bestfit1+0xa5f>
f011a1d2:	83 ec 04             	sub    $0x4,%esp
f011a1d5:	68 90 a8 13 f0       	push   $0xf013a890
f011a1da:	68 e2 01 00 00       	push   $0x1e2
f011a1df:	68 76 a8 13 f0       	push   $0xf013a876
f011a1e4:	e8 bd 5f fe ff       	call   f01001a6 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != ((2*Mega)/PAGE_SIZE)) panic("Wrong free: ");
f011a1e9:	e8 d0 21 ff ff       	call   f010c3be <sys_calculate_free_frames>
f011a1ee:	2b 45 f4             	sub    -0xc(%ebp),%eax
f011a1f1:	3d 00 02 00 00       	cmp    $0x200,%eax
f011a1f6:	74 17                	je     f011a20f <test_kmalloc_bestfit1+0xa85>
f011a1f8:	83 ec 04             	sub    $0x4,%esp
f011a1fb:	68 d3 ac 13 f0       	push   $0xf013acd3
f011a200:	68 e3 01 00 00       	push   $0x1e3
f011a205:	68 76 a8 13 f0       	push   $0xf013a876
f011a20a:	e8 97 5f fe ff       	call   f01001a6 <_panic>

		//1 MB Hole
		freeFrames = sys_calculate_free_frames() ;
f011a20f:	e8 aa 21 ff ff       	call   f010c3be <sys_calculate_free_frames>
f011a214:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011a217:	e8 70 9a fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011a21c:	89 45 f0             	mov    %eax,-0x10(%ebp)
		kfree(ptr_allocations[5]);
f011a21f:	8b 85 7c fe ff ff    	mov    -0x184(%ebp),%eax
f011a225:	83 ec 0c             	sub    $0xc,%esp
f011a228:	50                   	push   %eax
f011a229:	e8 b0 d3 fe ff       	call   f01075de <kfree>
f011a22e:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011a231:	e8 56 9a fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011a236:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011a239:	74 17                	je     f011a252 <test_kmalloc_bestfit1+0xac8>
f011a23b:	83 ec 04             	sub    $0x4,%esp
f011a23e:	68 90 a8 13 f0       	push   $0xf013a890
f011a243:	68 e9 01 00 00       	push   $0x1e9
f011a248:	68 76 a8 13 f0       	push   $0xf013a876
f011a24d:	e8 54 5f fe ff       	call   f01001a6 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 256) panic("Wrong free: ");
f011a252:	e8 67 21 ff ff       	call   f010c3be <sys_calculate_free_frames>
f011a257:	2b 45 f4             	sub    -0xc(%ebp),%eax
f011a25a:	3d 00 01 00 00       	cmp    $0x100,%eax
f011a25f:	74 17                	je     f011a278 <test_kmalloc_bestfit1+0xaee>
f011a261:	83 ec 04             	sub    $0x4,%esp
f011a264:	68 d3 ac 13 f0       	push   $0xf013acd3
f011a269:	68 ea 01 00 00       	push   $0x1ea
f011a26e:	68 76 a8 13 f0       	push   $0xf013a876
f011a273:	e8 2e 5f fe ff       	call   f01001a6 <_panic>
	}

	//[3] Allocate again [test best fit]
	{
		//Allocate 512 KB - should be placed in 3rd hole
		freeFrames = sys_calculate_free_frames() ;
f011a278:	e8 41 21 ff ff       	call   f010c3be <sys_calculate_free_frames>
f011a27d:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011a280:	e8 07 9a fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011a285:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[8] = kmalloc(512*kilo);
f011a288:	83 ec 0c             	sub    $0xc,%esp
f011a28b:	68 00 00 08 00       	push   $0x80000
f011a290:	e8 2f d3 fe ff       	call   f01075c4 <kmalloc>
f011a295:	83 c4 10             	add    $0x10,%esp
f011a298:	89 85 88 fe ff ff    	mov    %eax,-0x178(%ebp)
		if ((uint32) ptr_allocations[8] !=  (ACTUAL_START + 11*Mega)) panic("Wrong start address for the allocated space... ");
f011a29e:	8b 85 88 fe ff ff    	mov    -0x178(%ebp),%eax
f011a2a4:	89 c1                	mov    %eax,%ecx
f011a2a6:	c7 85 2c ff ff ff 00 	movl   $0x1000,-0xd4(%ebp)
f011a2ad:	10 00 00 
f011a2b0:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f011a2b6:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011a2bb:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%ebp)
f011a2c1:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f011a2c7:	ba 00 00 00 00       	mov    $0x0,%edx
f011a2cc:	f7 b5 2c ff ff ff    	divl   -0xd4(%ebp)
f011a2d2:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f011a2d8:	29 d0                	sub    %edx,%eax
f011a2da:	89 c3                	mov    %eax,%ebx
f011a2dc:	c7 85 24 ff ff ff 00 	movl   $0x1000,-0xdc(%ebp)
f011a2e3:	10 00 00 
f011a2e6:	a0 bc 0e 6c f0       	mov    0xf06c0ebc,%al
f011a2eb:	0f b6 d0             	movzbl %al,%edx
f011a2ee:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011a2f4:	01 d0                	add    %edx,%eax
f011a2f6:	48                   	dec    %eax
f011a2f7:	89 85 20 ff ff ff    	mov    %eax,-0xe0(%ebp)
f011a2fd:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f011a303:	ba 00 00 00 00       	mov    $0x0,%edx
f011a308:	f7 b5 24 ff ff ff    	divl   -0xdc(%ebp)
f011a30e:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f011a314:	29 d0                	sub    %edx,%eax
f011a316:	01 c3                	add    %eax,%ebx
f011a318:	c7 85 1c ff ff ff 00 	movl   $0x1000,-0xe4(%ebp)
f011a31f:	10 00 00 
f011a322:	a0 bc 0e 6c f0       	mov    0xf06c0ebc,%al
f011a327:	0f b6 c0             	movzbl %al,%eax
f011a32a:	c1 e0 04             	shl    $0x4,%eax
f011a32d:	89 c2                	mov    %eax,%edx
f011a32f:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f011a335:	01 d0                	add    %edx,%eax
f011a337:	48                   	dec    %eax
f011a338:	89 85 18 ff ff ff    	mov    %eax,-0xe8(%ebp)
f011a33e:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f011a344:	ba 00 00 00 00       	mov    $0x0,%edx
f011a349:	f7 b5 1c ff ff ff    	divl   -0xe4(%ebp)
f011a34f:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f011a355:	29 d0                	sub    %edx,%eax
f011a357:	01 d8                	add    %ebx,%eax
f011a359:	2d 00 c0 4f 09       	sub    $0x94fc000,%eax
f011a35e:	39 c1                	cmp    %eax,%ecx
f011a360:	74 17                	je     f011a379 <test_kmalloc_bestfit1+0xbef>
f011a362:	83 ec 04             	sub    $0x4,%esp
f011a365:	68 90 ac 13 f0       	push   $0xf013ac90
f011a36a:	68 f3 01 00 00       	push   $0x1f3
f011a36f:	68 76 a8 13 f0       	push   $0xf013a876
f011a374:	e8 2d 5e fe ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011a379:	e8 0e 99 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011a37e:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011a381:	74 17                	je     f011a39a <test_kmalloc_bestfit1+0xc10>
f011a383:	83 ec 04             	sub    $0x4,%esp
f011a386:	68 90 a8 13 f0       	push   $0xf013a890
f011a38b:	68 f4 01 00 00       	push   $0x1f4
f011a390:	68 76 a8 13 f0       	push   $0xf013a876
f011a395:	e8 0c 5e fe ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 128) panic("Wrong allocation: ");
f011a39a:	e8 1f 20 ff ff       	call   f010c3be <sys_calculate_free_frames>
f011a39f:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011a3a2:	29 c2                	sub    %eax,%edx
f011a3a4:	89 d0                	mov    %edx,%eax
f011a3a6:	3d 80 00 00 00       	cmp    $0x80,%eax
f011a3ab:	74 17                	je     f011a3c4 <test_kmalloc_bestfit1+0xc3a>
f011a3ad:	83 ec 04             	sub    $0x4,%esp
f011a3b0:	68 c0 ac 13 f0       	push   $0xf013acc0
f011a3b5:	68 f5 01 00 00       	push   $0x1f5
f011a3ba:	68 76 a8 13 f0       	push   $0xf013a876
f011a3bf:	e8 e2 5d fe ff       	call   f01001a6 <_panic>

		//Allocate 1 MB - should be placed in 2nd hole
		freeFrames = sys_calculate_free_frames() ;
f011a3c4:	e8 f5 1f ff ff       	call   f010c3be <sys_calculate_free_frames>
f011a3c9:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011a3cc:	e8 bb 98 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011a3d1:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[9] = kmalloc(1*Mega - kilo);
f011a3d4:	83 ec 0c             	sub    $0xc,%esp
f011a3d7:	68 00 fc 0f 00       	push   $0xffc00
f011a3dc:	e8 e3 d1 fe ff       	call   f01075c4 <kmalloc>
f011a3e1:	83 c4 10             	add    $0x10,%esp
f011a3e4:	89 85 8c fe ff ff    	mov    %eax,-0x174(%ebp)
		if ((uint32) ptr_allocations[9] !=  (ACTUAL_START + 8*Mega)) panic("Wrong start address for the allocated space... ");
f011a3ea:	8b 85 8c fe ff ff    	mov    -0x174(%ebp),%eax
f011a3f0:	89 c1                	mov    %eax,%ecx
f011a3f2:	c7 85 14 ff ff ff 00 	movl   $0x1000,-0xec(%ebp)
f011a3f9:	10 00 00 
f011a3fc:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f011a402:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011a407:	89 85 10 ff ff ff    	mov    %eax,-0xf0(%ebp)
f011a40d:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f011a413:	ba 00 00 00 00       	mov    $0x0,%edx
f011a418:	f7 b5 14 ff ff ff    	divl   -0xec(%ebp)
f011a41e:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f011a424:	29 d0                	sub    %edx,%eax
f011a426:	89 c3                	mov    %eax,%ebx
f011a428:	c7 85 0c ff ff ff 00 	movl   $0x1000,-0xf4(%ebp)
f011a42f:	10 00 00 
f011a432:	a0 bc 0e 6c f0       	mov    0xf06c0ebc,%al
f011a437:	0f b6 d0             	movzbl %al,%edx
f011a43a:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f011a440:	01 d0                	add    %edx,%eax
f011a442:	48                   	dec    %eax
f011a443:	89 85 08 ff ff ff    	mov    %eax,-0xf8(%ebp)
f011a449:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f011a44f:	ba 00 00 00 00       	mov    $0x0,%edx
f011a454:	f7 b5 0c ff ff ff    	divl   -0xf4(%ebp)
f011a45a:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f011a460:	29 d0                	sub    %edx,%eax
f011a462:	01 c3                	add    %eax,%ebx
f011a464:	c7 85 04 ff ff ff 00 	movl   $0x1000,-0xfc(%ebp)
f011a46b:	10 00 00 
f011a46e:	a0 bc 0e 6c f0       	mov    0xf06c0ebc,%al
f011a473:	0f b6 c0             	movzbl %al,%eax
f011a476:	c1 e0 04             	shl    $0x4,%eax
f011a479:	89 c2                	mov    %eax,%edx
f011a47b:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f011a481:	01 d0                	add    %edx,%eax
f011a483:	48                   	dec    %eax
f011a484:	89 85 00 ff ff ff    	mov    %eax,-0x100(%ebp)
f011a48a:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f011a490:	ba 00 00 00 00       	mov    $0x0,%edx
f011a495:	f7 b5 04 ff ff ff    	divl   -0xfc(%ebp)
f011a49b:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f011a4a1:	29 d0                	sub    %edx,%eax
f011a4a3:	01 d8                	add    %ebx,%eax
f011a4a5:	2d 00 c0 7f 09       	sub    $0x97fc000,%eax
f011a4aa:	39 c1                	cmp    %eax,%ecx
f011a4ac:	74 17                	je     f011a4c5 <test_kmalloc_bestfit1+0xd3b>
f011a4ae:	83 ec 04             	sub    $0x4,%esp
f011a4b1:	68 90 ac 13 f0       	push   $0xf013ac90
f011a4b6:	68 fb 01 00 00       	push   $0x1fb
f011a4bb:	68 76 a8 13 f0       	push   $0xf013a876
f011a4c0:	e8 e1 5c fe ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011a4c5:	e8 c2 97 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011a4ca:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011a4cd:	74 17                	je     f011a4e6 <test_kmalloc_bestfit1+0xd5c>
f011a4cf:	83 ec 04             	sub    $0x4,%esp
f011a4d2:	68 90 a8 13 f0       	push   $0xf013a890
f011a4d7:	68 fc 01 00 00       	push   $0x1fc
f011a4dc:	68 76 a8 13 f0       	push   $0xf013a876
f011a4e1:	e8 c0 5c fe ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: ");
f011a4e6:	e8 d3 1e ff ff       	call   f010c3be <sys_calculate_free_frames>
f011a4eb:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011a4ee:	29 c2                	sub    %eax,%edx
f011a4f0:	89 d0                	mov    %edx,%eax
f011a4f2:	3d 00 01 00 00       	cmp    $0x100,%eax
f011a4f7:	74 17                	je     f011a510 <test_kmalloc_bestfit1+0xd86>
f011a4f9:	83 ec 04             	sub    $0x4,%esp
f011a4fc:	68 c0 ac 13 f0       	push   $0xf013acc0
f011a501:	68 fd 01 00 00       	push   $0x1fd
f011a506:	68 76 a8 13 f0       	push   $0xf013a876
f011a50b:	e8 96 5c fe ff       	call   f01001a6 <_panic>

		//Allocate 256 KB - should be placed in remaining of 3rd hole
		freeFrames = sys_calculate_free_frames() ;
f011a510:	e8 a9 1e ff ff       	call   f010c3be <sys_calculate_free_frames>
f011a515:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011a518:	e8 6f 97 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011a51d:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[10] = kmalloc(256*kilo - kilo);
f011a520:	83 ec 0c             	sub    $0xc,%esp
f011a523:	68 00 fc 03 00       	push   $0x3fc00
f011a528:	e8 97 d0 fe ff       	call   f01075c4 <kmalloc>
f011a52d:	83 c4 10             	add    $0x10,%esp
f011a530:	89 85 90 fe ff ff    	mov    %eax,-0x170(%ebp)
		if ((uint32) ptr_allocations[10] !=  (ACTUAL_START + 11*Mega + 512*kilo)) panic("Wrong start address for the allocated space... ");
f011a536:	8b 85 90 fe ff ff    	mov    -0x170(%ebp),%eax
f011a53c:	89 c1                	mov    %eax,%ecx
f011a53e:	c7 85 fc fe ff ff 00 	movl   $0x1000,-0x104(%ebp)
f011a545:	10 00 00 
f011a548:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f011a54e:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011a553:	89 85 f8 fe ff ff    	mov    %eax,-0x108(%ebp)
f011a559:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f011a55f:	ba 00 00 00 00       	mov    $0x0,%edx
f011a564:	f7 b5 fc fe ff ff    	divl   -0x104(%ebp)
f011a56a:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f011a570:	29 d0                	sub    %edx,%eax
f011a572:	89 c3                	mov    %eax,%ebx
f011a574:	c7 85 f4 fe ff ff 00 	movl   $0x1000,-0x10c(%ebp)
f011a57b:	10 00 00 
f011a57e:	a0 bc 0e 6c f0       	mov    0xf06c0ebc,%al
f011a583:	0f b6 d0             	movzbl %al,%edx
f011a586:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f011a58c:	01 d0                	add    %edx,%eax
f011a58e:	48                   	dec    %eax
f011a58f:	89 85 f0 fe ff ff    	mov    %eax,-0x110(%ebp)
f011a595:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f011a59b:	ba 00 00 00 00       	mov    $0x0,%edx
f011a5a0:	f7 b5 f4 fe ff ff    	divl   -0x10c(%ebp)
f011a5a6:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f011a5ac:	29 d0                	sub    %edx,%eax
f011a5ae:	01 c3                	add    %eax,%ebx
f011a5b0:	c7 85 ec fe ff ff 00 	movl   $0x1000,-0x114(%ebp)
f011a5b7:	10 00 00 
f011a5ba:	a0 bc 0e 6c f0       	mov    0xf06c0ebc,%al
f011a5bf:	0f b6 c0             	movzbl %al,%eax
f011a5c2:	c1 e0 04             	shl    $0x4,%eax
f011a5c5:	89 c2                	mov    %eax,%edx
f011a5c7:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f011a5cd:	01 d0                	add    %edx,%eax
f011a5cf:	48                   	dec    %eax
f011a5d0:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)
f011a5d6:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f011a5dc:	ba 00 00 00 00       	mov    $0x0,%edx
f011a5e1:	f7 b5 ec fe ff ff    	divl   -0x114(%ebp)
f011a5e7:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f011a5ed:	29 d0                	sub    %edx,%eax
f011a5ef:	01 d8                	add    %ebx,%eax
f011a5f1:	2d 00 c0 47 09       	sub    $0x947c000,%eax
f011a5f6:	39 c1                	cmp    %eax,%ecx
f011a5f8:	74 17                	je     f011a611 <test_kmalloc_bestfit1+0xe87>
f011a5fa:	83 ec 04             	sub    $0x4,%esp
f011a5fd:	68 90 ac 13 f0       	push   $0xf013ac90
f011a602:	68 03 02 00 00       	push   $0x203
f011a607:	68 76 a8 13 f0       	push   $0xf013a876
f011a60c:	e8 95 5b fe ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011a611:	e8 76 96 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011a616:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011a619:	74 17                	je     f011a632 <test_kmalloc_bestfit1+0xea8>
f011a61b:	83 ec 04             	sub    $0x4,%esp
f011a61e:	68 90 a8 13 f0       	push   $0xf013a890
f011a623:	68 04 02 00 00       	push   $0x204
f011a628:	68 76 a8 13 f0       	push   $0xf013a876
f011a62d:	e8 74 5b fe ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 64) panic("Wrong allocation: ");
f011a632:	e8 87 1d ff ff       	call   f010c3be <sys_calculate_free_frames>
f011a637:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011a63a:	29 c2                	sub    %eax,%edx
f011a63c:	89 d0                	mov    %edx,%eax
f011a63e:	83 f8 40             	cmp    $0x40,%eax
f011a641:	74 17                	je     f011a65a <test_kmalloc_bestfit1+0xed0>
f011a643:	83 ec 04             	sub    $0x4,%esp
f011a646:	68 c0 ac 13 f0       	push   $0xf013acc0
f011a64b:	68 05 02 00 00       	push   $0x205
f011a650:	68 76 a8 13 f0       	push   $0xf013a876
f011a655:	e8 4c 5b fe ff       	call   f01001a6 <_panic>

		//Allocate 4 MB - should be placed in end of all allocations
		freeFrames = sys_calculate_free_frames() ;
f011a65a:	e8 5f 1d ff ff       	call   f010c3be <sys_calculate_free_frames>
f011a65f:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011a662:	e8 25 96 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011a667:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[11] = kmalloc(4*Mega - kilo);
f011a66a:	83 ec 0c             	sub    $0xc,%esp
f011a66d:	68 00 fc 3f 00       	push   $0x3ffc00
f011a672:	e8 4d cf fe ff       	call   f01075c4 <kmalloc>
f011a677:	83 c4 10             	add    $0x10,%esp
f011a67a:	89 85 94 fe ff ff    	mov    %eax,-0x16c(%ebp)
		if ((uint32) ptr_allocations[11] != (ACTUAL_START + 14*Mega)) panic("Wrong start address for the allocated space... ");
f011a680:	8b 85 94 fe ff ff    	mov    -0x16c(%ebp),%eax
f011a686:	89 c1                	mov    %eax,%ecx
f011a688:	c7 85 e4 fe ff ff 00 	movl   $0x1000,-0x11c(%ebp)
f011a68f:	10 00 00 
f011a692:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f011a698:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011a69d:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
f011a6a3:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f011a6a9:	ba 00 00 00 00       	mov    $0x0,%edx
f011a6ae:	f7 b5 e4 fe ff ff    	divl   -0x11c(%ebp)
f011a6b4:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f011a6ba:	29 d0                	sub    %edx,%eax
f011a6bc:	89 c3                	mov    %eax,%ebx
f011a6be:	c7 85 dc fe ff ff 00 	movl   $0x1000,-0x124(%ebp)
f011a6c5:	10 00 00 
f011a6c8:	a0 bc 0e 6c f0       	mov    0xf06c0ebc,%al
f011a6cd:	0f b6 d0             	movzbl %al,%edx
f011a6d0:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f011a6d6:	01 d0                	add    %edx,%eax
f011a6d8:	48                   	dec    %eax
f011a6d9:	89 85 d8 fe ff ff    	mov    %eax,-0x128(%ebp)
f011a6df:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f011a6e5:	ba 00 00 00 00       	mov    $0x0,%edx
f011a6ea:	f7 b5 dc fe ff ff    	divl   -0x124(%ebp)
f011a6f0:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f011a6f6:	29 d0                	sub    %edx,%eax
f011a6f8:	01 c3                	add    %eax,%ebx
f011a6fa:	c7 85 d4 fe ff ff 00 	movl   $0x1000,-0x12c(%ebp)
f011a701:	10 00 00 
f011a704:	a0 bc 0e 6c f0       	mov    0xf06c0ebc,%al
f011a709:	0f b6 c0             	movzbl %al,%eax
f011a70c:	c1 e0 04             	shl    $0x4,%eax
f011a70f:	89 c2                	mov    %eax,%edx
f011a711:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f011a717:	01 d0                	add    %edx,%eax
f011a719:	48                   	dec    %eax
f011a71a:	89 85 d0 fe ff ff    	mov    %eax,-0x130(%ebp)
f011a720:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f011a726:	ba 00 00 00 00       	mov    $0x0,%edx
f011a72b:	f7 b5 d4 fe ff ff    	divl   -0x12c(%ebp)
f011a731:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f011a737:	29 d0                	sub    %edx,%eax
f011a739:	01 d8                	add    %ebx,%eax
f011a73b:	2d 00 c0 1f 09       	sub    $0x91fc000,%eax
f011a740:	39 c1                	cmp    %eax,%ecx
f011a742:	74 17                	je     f011a75b <test_kmalloc_bestfit1+0xfd1>
f011a744:	83 ec 04             	sub    $0x4,%esp
f011a747:	68 90 ac 13 f0       	push   $0xf013ac90
f011a74c:	68 0b 02 00 00       	push   $0x20b
f011a751:	68 76 a8 13 f0       	push   $0xf013a876
f011a756:	e8 4b 5a fe ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011a75b:	e8 2c 95 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011a760:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011a763:	74 17                	je     f011a77c <test_kmalloc_bestfit1+0xff2>
f011a765:	83 ec 04             	sub    $0x4,%esp
f011a768:	68 90 a8 13 f0       	push   $0xf013a890
f011a76d:	68 0c 02 00 00       	push   $0x20c
f011a772:	68 76 a8 13 f0       	push   $0xf013a876
f011a777:	e8 2a 5a fe ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1024) panic("Wrong allocation: ");
f011a77c:	e8 3d 1c ff ff       	call   f010c3be <sys_calculate_free_frames>
f011a781:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011a784:	29 c2                	sub    %eax,%edx
f011a786:	89 d0                	mov    %edx,%eax
f011a788:	3d 00 04 00 00       	cmp    $0x400,%eax
f011a78d:	74 17                	je     f011a7a6 <test_kmalloc_bestfit1+0x101c>
f011a78f:	83 ec 04             	sub    $0x4,%esp
f011a792:	68 c0 ac 13 f0       	push   $0xf013acc0
f011a797:	68 0d 02 00 00       	push   $0x20d
f011a79c:	68 76 a8 13 f0       	push   $0xf013a876
f011a7a1:	e8 00 5a fe ff       	call   f01001a6 <_panic>
	}

	//[4] Free contiguous allocations
	{
		//1M Hole appended to already existing 1M hole in the middle
		freeFrames = sys_calculate_free_frames() ;
f011a7a6:	e8 13 1c ff ff       	call   f010c3be <sys_calculate_free_frames>
f011a7ab:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011a7ae:	e8 d9 94 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011a7b3:	89 45 f0             	mov    %eax,-0x10(%ebp)
		kfree(ptr_allocations[4]);
f011a7b6:	8b 85 78 fe ff ff    	mov    -0x188(%ebp),%eax
f011a7bc:	83 ec 0c             	sub    $0xc,%esp
f011a7bf:	50                   	push   %eax
f011a7c0:	e8 19 ce fe ff       	call   f01075de <kfree>
f011a7c5:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011a7c8:	e8 bf 94 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011a7cd:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011a7d0:	74 17                	je     f011a7e9 <test_kmalloc_bestfit1+0x105f>
f011a7d2:	83 ec 04             	sub    $0x4,%esp
f011a7d5:	68 90 a8 13 f0       	push   $0xf013a890
f011a7da:	68 16 02 00 00       	push   $0x216
f011a7df:	68 76 a8 13 f0       	push   $0xf013a876
f011a7e4:	e8 bd 59 fe ff       	call   f01001a6 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 256) panic("Wrong free: ");
f011a7e9:	e8 d0 1b ff ff       	call   f010c3be <sys_calculate_free_frames>
f011a7ee:	2b 45 f4             	sub    -0xc(%ebp),%eax
f011a7f1:	3d 00 01 00 00       	cmp    $0x100,%eax
f011a7f6:	74 17                	je     f011a80f <test_kmalloc_bestfit1+0x1085>
f011a7f8:	83 ec 04             	sub    $0x4,%esp
f011a7fb:	68 d3 ac 13 f0       	push   $0xf013acd3
f011a800:	68 17 02 00 00       	push   $0x217
f011a805:	68 76 a8 13 f0       	push   $0xf013a876
f011a80a:	e8 97 59 fe ff       	call   f01001a6 <_panic>

		//another 512 KB Hole appended to the hole
		freeFrames = sys_calculate_free_frames() ;
f011a80f:	e8 aa 1b ff ff       	call   f010c3be <sys_calculate_free_frames>
f011a814:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011a817:	e8 70 94 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011a81c:	89 45 f0             	mov    %eax,-0x10(%ebp)
		kfree(ptr_allocations[8]);
f011a81f:	8b 85 88 fe ff ff    	mov    -0x178(%ebp),%eax
f011a825:	83 ec 0c             	sub    $0xc,%esp
f011a828:	50                   	push   %eax
f011a829:	e8 b0 cd fe ff       	call   f01075de <kfree>
f011a82e:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011a831:	e8 56 94 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011a836:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011a839:	74 17                	je     f011a852 <test_kmalloc_bestfit1+0x10c8>
f011a83b:	83 ec 04             	sub    $0x4,%esp
f011a83e:	68 90 a8 13 f0       	push   $0xf013a890
f011a843:	68 1d 02 00 00       	push   $0x21d
f011a848:	68 76 a8 13 f0       	push   $0xf013a876
f011a84d:	e8 54 59 fe ff       	call   f01001a6 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 128) panic("Wrong free: ");
f011a852:	e8 67 1b ff ff       	call   f010c3be <sys_calculate_free_frames>
f011a857:	2b 45 f4             	sub    -0xc(%ebp),%eax
f011a85a:	3d 80 00 00 00       	cmp    $0x80,%eax
f011a85f:	74 17                	je     f011a878 <test_kmalloc_bestfit1+0x10ee>
f011a861:	83 ec 04             	sub    $0x4,%esp
f011a864:	68 d3 ac 13 f0       	push   $0xf013acd3
f011a869:	68 1e 02 00 00       	push   $0x21e
f011a86e:	68 76 a8 13 f0       	push   $0xf013a876
f011a873:	e8 2e 59 fe ff       	call   f01001a6 <_panic>
	}

	//[5] Allocate again [test best fit]
	{
		//Allocate 2 MB - should be placed in the contiguous hole (2 MB + 512 KB)
		freeFrames = sys_calculate_free_frames();
f011a878:	e8 41 1b ff ff       	call   f010c3be <sys_calculate_free_frames>
f011a87d:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011a880:	e8 07 94 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011a885:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[12] = kmalloc(2*Mega - kilo);
f011a888:	83 ec 0c             	sub    $0xc,%esp
f011a88b:	68 00 fc 1f 00       	push   $0x1ffc00
f011a890:	e8 2f cd fe ff       	call   f01075c4 <kmalloc>
f011a895:	83 c4 10             	add    $0x10,%esp
f011a898:	89 85 98 fe ff ff    	mov    %eax,-0x168(%ebp)
		if ((uint32) ptr_allocations[12] != (ACTUAL_START + 9*Mega)) panic("Wrong start address for the allocated space... ");
f011a89e:	8b 85 98 fe ff ff    	mov    -0x168(%ebp),%eax
f011a8a4:	89 c1                	mov    %eax,%ecx
f011a8a6:	c7 85 cc fe ff ff 00 	movl   $0x1000,-0x134(%ebp)
f011a8ad:	10 00 00 
f011a8b0:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f011a8b6:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011a8bb:	89 85 c8 fe ff ff    	mov    %eax,-0x138(%ebp)
f011a8c1:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f011a8c7:	ba 00 00 00 00       	mov    $0x0,%edx
f011a8cc:	f7 b5 cc fe ff ff    	divl   -0x134(%ebp)
f011a8d2:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f011a8d8:	29 d0                	sub    %edx,%eax
f011a8da:	89 c3                	mov    %eax,%ebx
f011a8dc:	c7 85 c4 fe ff ff 00 	movl   $0x1000,-0x13c(%ebp)
f011a8e3:	10 00 00 
f011a8e6:	a0 bc 0e 6c f0       	mov    0xf06c0ebc,%al
f011a8eb:	0f b6 d0             	movzbl %al,%edx
f011a8ee:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f011a8f4:	01 d0                	add    %edx,%eax
f011a8f6:	48                   	dec    %eax
f011a8f7:	89 85 c0 fe ff ff    	mov    %eax,-0x140(%ebp)
f011a8fd:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f011a903:	ba 00 00 00 00       	mov    $0x0,%edx
f011a908:	f7 b5 c4 fe ff ff    	divl   -0x13c(%ebp)
f011a90e:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f011a914:	29 d0                	sub    %edx,%eax
f011a916:	01 c3                	add    %eax,%ebx
f011a918:	c7 85 bc fe ff ff 00 	movl   $0x1000,-0x144(%ebp)
f011a91f:	10 00 00 
f011a922:	a0 bc 0e 6c f0       	mov    0xf06c0ebc,%al
f011a927:	0f b6 c0             	movzbl %al,%eax
f011a92a:	c1 e0 04             	shl    $0x4,%eax
f011a92d:	89 c2                	mov    %eax,%edx
f011a92f:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f011a935:	01 d0                	add    %edx,%eax
f011a937:	48                   	dec    %eax
f011a938:	89 85 b8 fe ff ff    	mov    %eax,-0x148(%ebp)
f011a93e:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f011a944:	ba 00 00 00 00       	mov    $0x0,%edx
f011a949:	f7 b5 bc fe ff ff    	divl   -0x144(%ebp)
f011a94f:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f011a955:	29 d0                	sub    %edx,%eax
f011a957:	01 d8                	add    %ebx,%eax
f011a959:	2d 00 c0 6f 09       	sub    $0x96fc000,%eax
f011a95e:	39 c1                	cmp    %eax,%ecx
f011a960:	74 17                	je     f011a979 <test_kmalloc_bestfit1+0x11ef>
f011a962:	83 ec 04             	sub    $0x4,%esp
f011a965:	68 90 ac 13 f0       	push   $0xf013ac90
f011a96a:	68 27 02 00 00       	push   $0x227
f011a96f:	68 76 a8 13 f0       	push   $0xf013a876
f011a974:	e8 2d 58 fe ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011a979:	e8 0e 93 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011a97e:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011a981:	74 17                	je     f011a99a <test_kmalloc_bestfit1+0x1210>
f011a983:	83 ec 04             	sub    $0x4,%esp
f011a986:	68 90 a8 13 f0       	push   $0xf013a890
f011a98b:	68 28 02 00 00       	push   $0x228
f011a990:	68 76 a8 13 f0       	push   $0xf013a876
f011a995:	e8 0c 58 fe ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: ");
f011a99a:	e8 1f 1a ff ff       	call   f010c3be <sys_calculate_free_frames>
f011a99f:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011a9a2:	29 c2                	sub    %eax,%edx
f011a9a4:	89 d0                	mov    %edx,%eax
f011a9a6:	3d 00 02 00 00       	cmp    $0x200,%eax
f011a9ab:	74 17                	je     f011a9c4 <test_kmalloc_bestfit1+0x123a>
f011a9ad:	83 ec 04             	sub    $0x4,%esp
f011a9b0:	68 c0 ac 13 f0       	push   $0xf013acc0
f011a9b5:	68 29 02 00 00       	push   $0x229
f011a9ba:	68 76 a8 13 f0       	push   $0xf013a876
f011a9bf:	e8 e2 57 fe ff       	call   f01001a6 <_panic>
	}

	cprintf("Congratulations!! test BEST FIT allocation (1) completed successfully.\n");
f011a9c4:	83 ec 0c             	sub    $0xc,%esp
f011a9c7:	68 e0 ac 13 f0       	push   $0xf013ace0
f011a9cc:	e8 5c 62 fe ff       	call   f0100c2d <cprintf>
f011a9d1:	83 c4 10             	add    $0x10,%esp

	return 1;
f011a9d4:	b8 01 00 00 00       	mov    $0x1,%eax

}
f011a9d9:	8d 65 f8             	lea    -0x8(%ebp),%esp
f011a9dc:	5b                   	pop    %ebx
f011a9dd:	5f                   	pop    %edi
f011a9de:	5d                   	pop    %ebp
f011a9df:	c3                   	ret    

f011a9e0 <test_kmalloc_bestfit2>:

int test_kmalloc_bestfit2()
{
f011a9e0:	55                   	push   %ebp
f011a9e1:	89 e5                	mov    %esp,%ebp
f011a9e3:	57                   	push   %edi
f011a9e4:	53                   	push   %ebx
f011a9e5:	81 ec b0 01 00 00    	sub    $0x1b0,%esp
	cprintf("==============================================\n");
f011a9eb:	83 ec 0c             	sub    $0xc,%esp
f011a9ee:	68 b8 a7 13 f0       	push   $0xf013a7b8
f011a9f3:	e8 35 62 fe ff       	call   f0100c2d <cprintf>
f011a9f8:	83 c4 10             	add    $0x10,%esp
	cprintf("MAKE SURE to have a FRESH RUN for this test\n(i.e. don't run any program/test before it)\n");
f011a9fb:	83 ec 0c             	sub    $0xc,%esp
f011a9fe:	68 e8 a7 13 f0       	push   $0xf013a7e8
f011aa03:	e8 25 62 fe ff       	call   f0100c2d <cprintf>
f011aa08:	83 c4 10             	add    $0x10,%esp
	cprintf("==============================================\n");
f011aa0b:	83 ec 0c             	sub    $0xc,%esp
f011aa0e:	68 b8 a7 13 f0       	push   $0xf013a7b8
f011aa13:	e8 15 62 fe ff       	call   f0100c2d <cprintf>
f011aa18:	83 c4 10             	add    $0x10,%esp

	void* ptr_allocations[20] = {0};
f011aa1b:	8d 95 50 fe ff ff    	lea    -0x1b0(%ebp),%edx
f011aa21:	b9 14 00 00 00       	mov    $0x14,%ecx
f011aa26:	b8 00 00 00 00       	mov    $0x0,%eax
f011aa2b:	89 d7                	mov    %edx,%edi
f011aa2d:	f3 ab                	rep stos %eax,%es:(%edi)
	uint32 freeFrames;
	uint32 freeDiskFrames;

	//[1] Attempt to allocate more than heap size
	{
		ptr_allocations[0] = kmalloc(KERNEL_HEAP_MAX - ACTUAL_START + 1);
f011aa2f:	c7 45 f4 00 10 00 00 	movl   $0x1000,-0xc(%ebp)
f011aa36:	8b 45 f4             	mov    -0xc(%ebp),%eax
f011aa39:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011aa3e:	89 45 f0             	mov    %eax,-0x10(%ebp)
f011aa41:	8b 45 f0             	mov    -0x10(%ebp),%eax
f011aa44:	ba 00 00 00 00       	mov    $0x0,%edx
f011aa49:	f7 75 f4             	divl   -0xc(%ebp)
f011aa4c:	8b 45 f0             	mov    -0x10(%ebp),%eax
f011aa4f:	29 d0                	sub    %edx,%eax
f011aa51:	89 c1                	mov    %eax,%ecx
f011aa53:	c7 45 ec 00 10 00 00 	movl   $0x1000,-0x14(%ebp)
f011aa5a:	a0 bc 0e 6c f0       	mov    0xf06c0ebc,%al
f011aa5f:	0f b6 d0             	movzbl %al,%edx
f011aa62:	8b 45 ec             	mov    -0x14(%ebp),%eax
f011aa65:	01 d0                	add    %edx,%eax
f011aa67:	48                   	dec    %eax
f011aa68:	89 45 e8             	mov    %eax,-0x18(%ebp)
f011aa6b:	8b 45 e8             	mov    -0x18(%ebp),%eax
f011aa6e:	ba 00 00 00 00       	mov    $0x0,%edx
f011aa73:	f7 75 ec             	divl   -0x14(%ebp)
f011aa76:	8b 45 e8             	mov    -0x18(%ebp),%eax
f011aa79:	29 d0                	sub    %edx,%eax
f011aa7b:	01 c1                	add    %eax,%ecx
f011aa7d:	c7 45 e4 00 10 00 00 	movl   $0x1000,-0x1c(%ebp)
f011aa84:	a0 bc 0e 6c f0       	mov    0xf06c0ebc,%al
f011aa89:	0f b6 c0             	movzbl %al,%eax
f011aa8c:	c1 e0 04             	shl    $0x4,%eax
f011aa8f:	89 c2                	mov    %eax,%edx
f011aa91:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f011aa94:	01 d0                	add    %edx,%eax
f011aa96:	48                   	dec    %eax
f011aa97:	89 45 e0             	mov    %eax,-0x20(%ebp)
f011aa9a:	8b 45 e0             	mov    -0x20(%ebp),%eax
f011aa9d:	ba 00 00 00 00       	mov    $0x0,%edx
f011aaa2:	f7 75 e4             	divl   -0x1c(%ebp)
f011aaa5:	8b 45 e0             	mov    -0x20(%ebp),%eax
f011aaa8:	29 d0                	sub    %edx,%eax
f011aaaa:	01 c8                	add    %ecx,%eax
f011aaac:	ba 01 b0 ff 09       	mov    $0x9ffb001,%edx
f011aab1:	29 c2                	sub    %eax,%edx
f011aab3:	89 d0                	mov    %edx,%eax
f011aab5:	83 ec 0c             	sub    $0xc,%esp
f011aab8:	50                   	push   %eax
f011aab9:	e8 06 cb fe ff       	call   f01075c4 <kmalloc>
f011aabe:	83 c4 10             	add    $0x10,%esp
f011aac1:	89 85 50 fe ff ff    	mov    %eax,-0x1b0(%ebp)
		if (ptr_allocations[0] != NULL) panic("Kmalloc: Attempt to allocate more than heap size, should return NULL");
f011aac7:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f011aacd:	85 c0                	test   %eax,%eax
f011aacf:	74 17                	je     f011aae8 <test_kmalloc_bestfit2+0x108>
f011aad1:	83 ec 04             	sub    $0x4,%esp
f011aad4:	68 28 ad 13 f0       	push   $0xf013ad28
f011aad9:	68 3f 02 00 00       	push   $0x23f
f011aade:	68 76 a8 13 f0       	push   $0xf013a876
f011aae3:	e8 be 56 fe ff       	call   f01001a6 <_panic>

	//[2] Attempt to allocate space more than any available fragment
	//	a) Create Fragments
	{
		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f011aae8:	e8 d1 18 ff ff       	call   f010c3be <sys_calculate_free_frames>
f011aaed:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011aaf0:	e8 97 91 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011aaf5:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[0] = kmalloc(2*Mega-kilo);
f011aaf8:	83 ec 0c             	sub    $0xc,%esp
f011aafb:	68 00 fc 1f 00       	push   $0x1ffc00
f011ab00:	e8 bf ca fe ff       	call   f01075c4 <kmalloc>
f011ab05:	83 c4 10             	add    $0x10,%esp
f011ab08:	89 85 50 fe ff ff    	mov    %eax,-0x1b0(%ebp)
		if ((uint32) ptr_allocations[0] != (ACTUAL_START)) panic("Wrong start address for the allocated space... ");
f011ab0e:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f011ab14:	89 c1                	mov    %eax,%ecx
f011ab16:	c7 45 d4 00 10 00 00 	movl   $0x1000,-0x2c(%ebp)
f011ab1d:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f011ab20:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011ab25:	89 45 d0             	mov    %eax,-0x30(%ebp)
f011ab28:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011ab2b:	ba 00 00 00 00       	mov    $0x0,%edx
f011ab30:	f7 75 d4             	divl   -0x2c(%ebp)
f011ab33:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011ab36:	29 d0                	sub    %edx,%eax
f011ab38:	89 c3                	mov    %eax,%ebx
f011ab3a:	c7 45 cc 00 10 00 00 	movl   $0x1000,-0x34(%ebp)
f011ab41:	a0 bc 0e 6c f0       	mov    0xf06c0ebc,%al
f011ab46:	0f b6 d0             	movzbl %al,%edx
f011ab49:	8b 45 cc             	mov    -0x34(%ebp),%eax
f011ab4c:	01 d0                	add    %edx,%eax
f011ab4e:	48                   	dec    %eax
f011ab4f:	89 45 c8             	mov    %eax,-0x38(%ebp)
f011ab52:	8b 45 c8             	mov    -0x38(%ebp),%eax
f011ab55:	ba 00 00 00 00       	mov    $0x0,%edx
f011ab5a:	f7 75 cc             	divl   -0x34(%ebp)
f011ab5d:	8b 45 c8             	mov    -0x38(%ebp),%eax
f011ab60:	29 d0                	sub    %edx,%eax
f011ab62:	01 c3                	add    %eax,%ebx
f011ab64:	c7 45 c4 00 10 00 00 	movl   $0x1000,-0x3c(%ebp)
f011ab6b:	a0 bc 0e 6c f0       	mov    0xf06c0ebc,%al
f011ab70:	0f b6 c0             	movzbl %al,%eax
f011ab73:	c1 e0 04             	shl    $0x4,%eax
f011ab76:	89 c2                	mov    %eax,%edx
f011ab78:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f011ab7b:	01 d0                	add    %edx,%eax
f011ab7d:	48                   	dec    %eax
f011ab7e:	89 45 c0             	mov    %eax,-0x40(%ebp)
f011ab81:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011ab84:	ba 00 00 00 00       	mov    $0x0,%edx
f011ab89:	f7 75 c4             	divl   -0x3c(%ebp)
f011ab8c:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011ab8f:	29 d0                	sub    %edx,%eax
f011ab91:	01 d8                	add    %ebx,%eax
f011ab93:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f011ab98:	39 c1                	cmp    %eax,%ecx
f011ab9a:	74 17                	je     f011abb3 <test_kmalloc_bestfit2+0x1d3>
f011ab9c:	83 ec 04             	sub    $0x4,%esp
f011ab9f:	68 90 ac 13 f0       	push   $0xf013ac90
f011aba4:	68 49 02 00 00       	push   $0x249
f011aba9:	68 76 a8 13 f0       	push   $0xf013a876
f011abae:	e8 f3 55 fe ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011abb3:	e8 d4 90 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011abb8:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011abbb:	74 17                	je     f011abd4 <test_kmalloc_bestfit2+0x1f4>
f011abbd:	83 ec 04             	sub    $0x4,%esp
f011abc0:	68 90 a8 13 f0       	push   $0xf013a890
f011abc5:	68 4a 02 00 00       	push   $0x24a
f011abca:	68 76 a8 13 f0       	push   $0xf013a876
f011abcf:	e8 d2 55 fe ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=  512) panic("Wrong allocation: ");
f011abd4:	e8 e5 17 ff ff       	call   f010c3be <sys_calculate_free_frames>
f011abd9:	8b 55 dc             	mov    -0x24(%ebp),%edx
f011abdc:	29 c2                	sub    %eax,%edx
f011abde:	89 d0                	mov    %edx,%eax
f011abe0:	3d 00 02 00 00       	cmp    $0x200,%eax
f011abe5:	74 17                	je     f011abfe <test_kmalloc_bestfit2+0x21e>
f011abe7:	83 ec 04             	sub    $0x4,%esp
f011abea:	68 c0 ac 13 f0       	push   $0xf013acc0
f011abef:	68 4b 02 00 00       	push   $0x24b
f011abf4:	68 76 a8 13 f0       	push   $0xf013a876
f011abf9:	e8 a8 55 fe ff       	call   f01001a6 <_panic>

		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f011abfe:	e8 bb 17 ff ff       	call   f010c3be <sys_calculate_free_frames>
f011ac03:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011ac06:	e8 81 90 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011ac0b:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[1] = kmalloc(2*Mega-kilo);
f011ac0e:	83 ec 0c             	sub    $0xc,%esp
f011ac11:	68 00 fc 1f 00       	push   $0x1ffc00
f011ac16:	e8 a9 c9 fe ff       	call   f01075c4 <kmalloc>
f011ac1b:	83 c4 10             	add    $0x10,%esp
f011ac1e:	89 85 54 fe ff ff    	mov    %eax,-0x1ac(%ebp)
		if ((uint32) ptr_allocations[1] != (ACTUAL_START + 2*Mega)) panic("Wrong start address for the allocated space... ");
f011ac24:	8b 85 54 fe ff ff    	mov    -0x1ac(%ebp),%eax
f011ac2a:	89 c1                	mov    %eax,%ecx
f011ac2c:	c7 45 bc 00 10 00 00 	movl   $0x1000,-0x44(%ebp)
f011ac33:	8b 45 bc             	mov    -0x44(%ebp),%eax
f011ac36:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011ac3b:	89 45 b8             	mov    %eax,-0x48(%ebp)
f011ac3e:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011ac41:	ba 00 00 00 00       	mov    $0x0,%edx
f011ac46:	f7 75 bc             	divl   -0x44(%ebp)
f011ac49:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011ac4c:	29 d0                	sub    %edx,%eax
f011ac4e:	89 c3                	mov    %eax,%ebx
f011ac50:	c7 45 b4 00 10 00 00 	movl   $0x1000,-0x4c(%ebp)
f011ac57:	a0 bc 0e 6c f0       	mov    0xf06c0ebc,%al
f011ac5c:	0f b6 d0             	movzbl %al,%edx
f011ac5f:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f011ac62:	01 d0                	add    %edx,%eax
f011ac64:	48                   	dec    %eax
f011ac65:	89 45 b0             	mov    %eax,-0x50(%ebp)
f011ac68:	8b 45 b0             	mov    -0x50(%ebp),%eax
f011ac6b:	ba 00 00 00 00       	mov    $0x0,%edx
f011ac70:	f7 75 b4             	divl   -0x4c(%ebp)
f011ac73:	8b 45 b0             	mov    -0x50(%ebp),%eax
f011ac76:	29 d0                	sub    %edx,%eax
f011ac78:	01 c3                	add    %eax,%ebx
f011ac7a:	c7 45 ac 00 10 00 00 	movl   $0x1000,-0x54(%ebp)
f011ac81:	a0 bc 0e 6c f0       	mov    0xf06c0ebc,%al
f011ac86:	0f b6 c0             	movzbl %al,%eax
f011ac89:	c1 e0 04             	shl    $0x4,%eax
f011ac8c:	89 c2                	mov    %eax,%edx
f011ac8e:	8b 45 ac             	mov    -0x54(%ebp),%eax
f011ac91:	01 d0                	add    %edx,%eax
f011ac93:	48                   	dec    %eax
f011ac94:	89 45 a8             	mov    %eax,-0x58(%ebp)
f011ac97:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011ac9a:	ba 00 00 00 00       	mov    $0x0,%edx
f011ac9f:	f7 75 ac             	divl   -0x54(%ebp)
f011aca2:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011aca5:	29 d0                	sub    %edx,%eax
f011aca7:	01 d8                	add    %ebx,%eax
f011aca9:	2d 00 c0 df 09       	sub    $0x9dfc000,%eax
f011acae:	39 c1                	cmp    %eax,%ecx
f011acb0:	74 17                	je     f011acc9 <test_kmalloc_bestfit2+0x2e9>
f011acb2:	83 ec 04             	sub    $0x4,%esp
f011acb5:	68 90 ac 13 f0       	push   $0xf013ac90
f011acba:	68 51 02 00 00       	push   $0x251
f011acbf:	68 76 a8 13 f0       	push   $0xf013a876
f011acc4:	e8 dd 54 fe ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011acc9:	e8 be 8f fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011acce:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011acd1:	74 17                	je     f011acea <test_kmalloc_bestfit2+0x30a>
f011acd3:	83 ec 04             	sub    $0x4,%esp
f011acd6:	68 90 a8 13 f0       	push   $0xf013a890
f011acdb:	68 52 02 00 00       	push   $0x252
f011ace0:	68 76 a8 13 f0       	push   $0xf013a876
f011ace5:	e8 bc 54 fe ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=  512) panic("Wrong allocation: ");
f011acea:	e8 cf 16 ff ff       	call   f010c3be <sys_calculate_free_frames>
f011acef:	8b 55 dc             	mov    -0x24(%ebp),%edx
f011acf2:	29 c2                	sub    %eax,%edx
f011acf4:	89 d0                	mov    %edx,%eax
f011acf6:	3d 00 02 00 00       	cmp    $0x200,%eax
f011acfb:	74 17                	je     f011ad14 <test_kmalloc_bestfit2+0x334>
f011acfd:	83 ec 04             	sub    $0x4,%esp
f011ad00:	68 c0 ac 13 f0       	push   $0xf013acc0
f011ad05:	68 53 02 00 00       	push   $0x253
f011ad0a:	68 76 a8 13 f0       	push   $0xf013a876
f011ad0f:	e8 92 54 fe ff       	call   f01001a6 <_panic>

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f011ad14:	e8 a5 16 ff ff       	call   f010c3be <sys_calculate_free_frames>
f011ad19:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011ad1c:	e8 6b 8f fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011ad21:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[2] = kmalloc(2*kilo);
f011ad24:	83 ec 0c             	sub    $0xc,%esp
f011ad27:	68 00 08 00 00       	push   $0x800
f011ad2c:	e8 93 c8 fe ff       	call   f01075c4 <kmalloc>
f011ad31:	83 c4 10             	add    $0x10,%esp
f011ad34:	89 85 58 fe ff ff    	mov    %eax,-0x1a8(%ebp)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... ");
f011ad3a:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f011ad40:	89 c1                	mov    %eax,%ecx
f011ad42:	c7 45 a4 00 10 00 00 	movl   $0x1000,-0x5c(%ebp)
f011ad49:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f011ad4c:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011ad51:	89 45 a0             	mov    %eax,-0x60(%ebp)
f011ad54:	8b 45 a0             	mov    -0x60(%ebp),%eax
f011ad57:	ba 00 00 00 00       	mov    $0x0,%edx
f011ad5c:	f7 75 a4             	divl   -0x5c(%ebp)
f011ad5f:	8b 45 a0             	mov    -0x60(%ebp),%eax
f011ad62:	29 d0                	sub    %edx,%eax
f011ad64:	89 c3                	mov    %eax,%ebx
f011ad66:	c7 45 9c 00 10 00 00 	movl   $0x1000,-0x64(%ebp)
f011ad6d:	a0 bc 0e 6c f0       	mov    0xf06c0ebc,%al
f011ad72:	0f b6 d0             	movzbl %al,%edx
f011ad75:	8b 45 9c             	mov    -0x64(%ebp),%eax
f011ad78:	01 d0                	add    %edx,%eax
f011ad7a:	48                   	dec    %eax
f011ad7b:	89 45 98             	mov    %eax,-0x68(%ebp)
f011ad7e:	8b 45 98             	mov    -0x68(%ebp),%eax
f011ad81:	ba 00 00 00 00       	mov    $0x0,%edx
f011ad86:	f7 75 9c             	divl   -0x64(%ebp)
f011ad89:	8b 45 98             	mov    -0x68(%ebp),%eax
f011ad8c:	29 d0                	sub    %edx,%eax
f011ad8e:	01 c3                	add    %eax,%ebx
f011ad90:	c7 45 94 00 10 00 00 	movl   $0x1000,-0x6c(%ebp)
f011ad97:	a0 bc 0e 6c f0       	mov    0xf06c0ebc,%al
f011ad9c:	0f b6 c0             	movzbl %al,%eax
f011ad9f:	c1 e0 04             	shl    $0x4,%eax
f011ada2:	89 c2                	mov    %eax,%edx
f011ada4:	8b 45 94             	mov    -0x6c(%ebp),%eax
f011ada7:	01 d0                	add    %edx,%eax
f011ada9:	48                   	dec    %eax
f011adaa:	89 45 90             	mov    %eax,-0x70(%ebp)
f011adad:	8b 45 90             	mov    -0x70(%ebp),%eax
f011adb0:	ba 00 00 00 00       	mov    $0x0,%edx
f011adb5:	f7 75 94             	divl   -0x6c(%ebp)
f011adb8:	8b 45 90             	mov    -0x70(%ebp),%eax
f011adbb:	29 d0                	sub    %edx,%eax
f011adbd:	01 d8                	add    %ebx,%eax
f011adbf:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
f011adc4:	39 c1                	cmp    %eax,%ecx
f011adc6:	74 17                	je     f011addf <test_kmalloc_bestfit2+0x3ff>
f011adc8:	83 ec 04             	sub    $0x4,%esp
f011adcb:	68 90 ac 13 f0       	push   $0xf013ac90
f011add0:	68 59 02 00 00       	push   $0x259
f011add5:	68 76 a8 13 f0       	push   $0xf013a876
f011adda:	e8 c7 53 fe ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011addf:	e8 a8 8e fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011ade4:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011ade7:	74 17                	je     f011ae00 <test_kmalloc_bestfit2+0x420>
f011ade9:	83 ec 04             	sub    $0x4,%esp
f011adec:	68 90 a8 13 f0       	push   $0xf013a890
f011adf1:	68 5a 02 00 00       	push   $0x25a
f011adf6:	68 76 a8 13 f0       	push   $0xf013a876
f011adfb:	e8 a6 53 fe ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=  1) panic("Wrong allocation: ");
f011ae00:	e8 b9 15 ff ff       	call   f010c3be <sys_calculate_free_frames>
f011ae05:	8b 55 dc             	mov    -0x24(%ebp),%edx
f011ae08:	29 c2                	sub    %eax,%edx
f011ae0a:	89 d0                	mov    %edx,%eax
f011ae0c:	83 f8 01             	cmp    $0x1,%eax
f011ae0f:	74 17                	je     f011ae28 <test_kmalloc_bestfit2+0x448>
f011ae11:	83 ec 04             	sub    $0x4,%esp
f011ae14:	68 c0 ac 13 f0       	push   $0xf013acc0
f011ae19:	68 5b 02 00 00       	push   $0x25b
f011ae1e:	68 76 a8 13 f0       	push   $0xf013a876
f011ae23:	e8 7e 53 fe ff       	call   f01001a6 <_panic>

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f011ae28:	e8 91 15 ff ff       	call   f010c3be <sys_calculate_free_frames>
f011ae2d:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011ae30:	e8 57 8e fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011ae35:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[3] = kmalloc(2*kilo);
f011ae38:	83 ec 0c             	sub    $0xc,%esp
f011ae3b:	68 00 08 00 00       	push   $0x800
f011ae40:	e8 7f c7 fe ff       	call   f01075c4 <kmalloc>
f011ae45:	83 c4 10             	add    $0x10,%esp
f011ae48:	89 85 5c fe ff ff    	mov    %eax,-0x1a4(%ebp)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... ");
f011ae4e:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f011ae54:	89 c1                	mov    %eax,%ecx
f011ae56:	c7 45 8c 00 10 00 00 	movl   $0x1000,-0x74(%ebp)
f011ae5d:	8b 45 8c             	mov    -0x74(%ebp),%eax
f011ae60:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011ae65:	89 45 88             	mov    %eax,-0x78(%ebp)
f011ae68:	8b 45 88             	mov    -0x78(%ebp),%eax
f011ae6b:	ba 00 00 00 00       	mov    $0x0,%edx
f011ae70:	f7 75 8c             	divl   -0x74(%ebp)
f011ae73:	8b 45 88             	mov    -0x78(%ebp),%eax
f011ae76:	29 d0                	sub    %edx,%eax
f011ae78:	89 c3                	mov    %eax,%ebx
f011ae7a:	c7 45 84 00 10 00 00 	movl   $0x1000,-0x7c(%ebp)
f011ae81:	a0 bc 0e 6c f0       	mov    0xf06c0ebc,%al
f011ae86:	0f b6 d0             	movzbl %al,%edx
f011ae89:	8b 45 84             	mov    -0x7c(%ebp),%eax
f011ae8c:	01 d0                	add    %edx,%eax
f011ae8e:	48                   	dec    %eax
f011ae8f:	89 45 80             	mov    %eax,-0x80(%ebp)
f011ae92:	8b 45 80             	mov    -0x80(%ebp),%eax
f011ae95:	ba 00 00 00 00       	mov    $0x0,%edx
f011ae9a:	f7 75 84             	divl   -0x7c(%ebp)
f011ae9d:	8b 45 80             	mov    -0x80(%ebp),%eax
f011aea0:	29 d0                	sub    %edx,%eax
f011aea2:	01 c3                	add    %eax,%ebx
f011aea4:	c7 85 7c ff ff ff 00 	movl   $0x1000,-0x84(%ebp)
f011aeab:	10 00 00 
f011aeae:	a0 bc 0e 6c f0       	mov    0xf06c0ebc,%al
f011aeb3:	0f b6 c0             	movzbl %al,%eax
f011aeb6:	c1 e0 04             	shl    $0x4,%eax
f011aeb9:	89 c2                	mov    %eax,%edx
f011aebb:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f011aec1:	01 d0                	add    %edx,%eax
f011aec3:	48                   	dec    %eax
f011aec4:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)
f011aeca:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f011aed0:	ba 00 00 00 00       	mov    $0x0,%edx
f011aed5:	f7 b5 7c ff ff ff    	divl   -0x84(%ebp)
f011aedb:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f011aee1:	29 d0                	sub    %edx,%eax
f011aee3:	01 d8                	add    %ebx,%eax
f011aee5:	2d 00 b0 bf 09       	sub    $0x9bfb000,%eax
f011aeea:	39 c1                	cmp    %eax,%ecx
f011aeec:	74 17                	je     f011af05 <test_kmalloc_bestfit2+0x525>
f011aeee:	83 ec 04             	sub    $0x4,%esp
f011aef1:	68 90 ac 13 f0       	push   $0xf013ac90
f011aef6:	68 61 02 00 00       	push   $0x261
f011aefb:	68 76 a8 13 f0       	push   $0xf013a876
f011af00:	e8 a1 52 fe ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011af05:	e8 82 8d fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011af0a:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011af0d:	74 17                	je     f011af26 <test_kmalloc_bestfit2+0x546>
f011af0f:	83 ec 04             	sub    $0x4,%esp
f011af12:	68 90 a8 13 f0       	push   $0xf013a890
f011af17:	68 62 02 00 00       	push   $0x262
f011af1c:	68 76 a8 13 f0       	push   $0xf013a876
f011af21:	e8 80 52 fe ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=  1) panic("Wrong allocation: ");
f011af26:	e8 93 14 ff ff       	call   f010c3be <sys_calculate_free_frames>
f011af2b:	8b 55 dc             	mov    -0x24(%ebp),%edx
f011af2e:	29 c2                	sub    %eax,%edx
f011af30:	89 d0                	mov    %edx,%eax
f011af32:	83 f8 01             	cmp    $0x1,%eax
f011af35:	74 17                	je     f011af4e <test_kmalloc_bestfit2+0x56e>
f011af37:	83 ec 04             	sub    $0x4,%esp
f011af3a:	68 c0 ac 13 f0       	push   $0xf013acc0
f011af3f:	68 63 02 00 00       	push   $0x263
f011af44:	68 76 a8 13 f0       	push   $0xf013a876
f011af49:	e8 58 52 fe ff       	call   f01001a6 <_panic>

		//4 KB Hole
		freeFrames = sys_calculate_free_frames() ;
f011af4e:	e8 6b 14 ff ff       	call   f010c3be <sys_calculate_free_frames>
f011af53:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011af56:	e8 31 8d fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011af5b:	89 45 d8             	mov    %eax,-0x28(%ebp)
		kfree(ptr_allocations[2]);
f011af5e:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f011af64:	83 ec 0c             	sub    $0xc,%esp
f011af67:	50                   	push   %eax
f011af68:	e8 71 c6 fe ff       	call   f01075de <kfree>
f011af6d:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011af70:	e8 17 8d fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011af75:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011af78:	74 17                	je     f011af91 <test_kmalloc_bestfit2+0x5b1>
f011af7a:	83 ec 04             	sub    $0x4,%esp
f011af7d:	68 90 a8 13 f0       	push   $0xf013a890
f011af82:	68 69 02 00 00       	push   $0x269
f011af87:	68 76 a8 13 f0       	push   $0xf013a876
f011af8c:	e8 15 52 fe ff       	call   f01001a6 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 1) panic("Wrong allocation: ");
f011af91:	e8 28 14 ff ff       	call   f010c3be <sys_calculate_free_frames>
f011af96:	2b 45 dc             	sub    -0x24(%ebp),%eax
f011af99:	83 f8 01             	cmp    $0x1,%eax
f011af9c:	74 17                	je     f011afb5 <test_kmalloc_bestfit2+0x5d5>
f011af9e:	83 ec 04             	sub    $0x4,%esp
f011afa1:	68 c0 ac 13 f0       	push   $0xf013acc0
f011afa6:	68 6a 02 00 00       	push   $0x26a
f011afab:	68 76 a8 13 f0       	push   $0xf013a876
f011afb0:	e8 f1 51 fe ff       	call   f01001a6 <_panic>

		//7 KB
		freeFrames = sys_calculate_free_frames() ;
f011afb5:	e8 04 14 ff ff       	call   f010c3be <sys_calculate_free_frames>
f011afba:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011afbd:	e8 ca 8c fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011afc2:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[4] = kmalloc(7*kilo);
f011afc5:	83 ec 0c             	sub    $0xc,%esp
f011afc8:	68 00 1c 00 00       	push   $0x1c00
f011afcd:	e8 f2 c5 fe ff       	call   f01075c4 <kmalloc>
f011afd2:	83 c4 10             	add    $0x10,%esp
f011afd5:	89 85 60 fe ff ff    	mov    %eax,-0x1a0(%ebp)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... ");
f011afdb:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f011afe1:	89 c1                	mov    %eax,%ecx
f011afe3:	c7 85 74 ff ff ff 00 	movl   $0x1000,-0x8c(%ebp)
f011afea:	10 00 00 
f011afed:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f011aff3:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011aff8:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
f011affe:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f011b004:	ba 00 00 00 00       	mov    $0x0,%edx
f011b009:	f7 b5 74 ff ff ff    	divl   -0x8c(%ebp)
f011b00f:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f011b015:	29 d0                	sub    %edx,%eax
f011b017:	89 c3                	mov    %eax,%ebx
f011b019:	c7 85 6c ff ff ff 00 	movl   $0x1000,-0x94(%ebp)
f011b020:	10 00 00 
f011b023:	a0 bc 0e 6c f0       	mov    0xf06c0ebc,%al
f011b028:	0f b6 d0             	movzbl %al,%edx
f011b02b:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f011b031:	01 d0                	add    %edx,%eax
f011b033:	48                   	dec    %eax
f011b034:	89 85 68 ff ff ff    	mov    %eax,-0x98(%ebp)
f011b03a:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f011b040:	ba 00 00 00 00       	mov    $0x0,%edx
f011b045:	f7 b5 6c ff ff ff    	divl   -0x94(%ebp)
f011b04b:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f011b051:	29 d0                	sub    %edx,%eax
f011b053:	01 c3                	add    %eax,%ebx
f011b055:	c7 85 64 ff ff ff 00 	movl   $0x1000,-0x9c(%ebp)
f011b05c:	10 00 00 
f011b05f:	a0 bc 0e 6c f0       	mov    0xf06c0ebc,%al
f011b064:	0f b6 c0             	movzbl %al,%eax
f011b067:	c1 e0 04             	shl    $0x4,%eax
f011b06a:	89 c2                	mov    %eax,%edx
f011b06c:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f011b072:	01 d0                	add    %edx,%eax
f011b074:	48                   	dec    %eax
f011b075:	89 85 60 ff ff ff    	mov    %eax,-0xa0(%ebp)
f011b07b:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f011b081:	ba 00 00 00 00       	mov    $0x0,%edx
f011b086:	f7 b5 64 ff ff ff    	divl   -0x9c(%ebp)
f011b08c:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f011b092:	29 d0                	sub    %edx,%eax
f011b094:	01 d8                	add    %ebx,%eax
f011b096:	2d 00 a0 bf 09       	sub    $0x9bfa000,%eax
f011b09b:	39 c1                	cmp    %eax,%ecx
f011b09d:	74 17                	je     f011b0b6 <test_kmalloc_bestfit2+0x6d6>
f011b09f:	83 ec 04             	sub    $0x4,%esp
f011b0a2:	68 90 ac 13 f0       	push   $0xf013ac90
f011b0a7:	68 70 02 00 00       	push   $0x270
f011b0ac:	68 76 a8 13 f0       	push   $0xf013a876
f011b0b1:	e8 f0 50 fe ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011b0b6:	e8 d1 8b fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011b0bb:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011b0be:	74 17                	je     f011b0d7 <test_kmalloc_bestfit2+0x6f7>
f011b0c0:	83 ec 04             	sub    $0x4,%esp
f011b0c3:	68 90 a8 13 f0       	push   $0xf013a890
f011b0c8:	68 71 02 00 00       	push   $0x271
f011b0cd:	68 76 a8 13 f0       	push   $0xf013a876
f011b0d2:	e8 cf 50 fe ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=  2) panic("Wrong allocation: ");
f011b0d7:	e8 e2 12 ff ff       	call   f010c3be <sys_calculate_free_frames>
f011b0dc:	8b 55 dc             	mov    -0x24(%ebp),%edx
f011b0df:	29 c2                	sub    %eax,%edx
f011b0e1:	89 d0                	mov    %edx,%eax
f011b0e3:	83 f8 02             	cmp    $0x2,%eax
f011b0e6:	74 17                	je     f011b0ff <test_kmalloc_bestfit2+0x71f>
f011b0e8:	83 ec 04             	sub    $0x4,%esp
f011b0eb:	68 c0 ac 13 f0       	push   $0xf013acc0
f011b0f0:	68 72 02 00 00       	push   $0x272
f011b0f5:	68 76 a8 13 f0       	push   $0xf013a876
f011b0fa:	e8 a7 50 fe ff       	call   f01001a6 <_panic>

		//2 MB Hole
		freeFrames = sys_calculate_free_frames() ;
f011b0ff:	e8 ba 12 ff ff       	call   f010c3be <sys_calculate_free_frames>
f011b104:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011b107:	e8 80 8b fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011b10c:	89 45 d8             	mov    %eax,-0x28(%ebp)
		kfree(ptr_allocations[0]);
f011b10f:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f011b115:	83 ec 0c             	sub    $0xc,%esp
f011b118:	50                   	push   %eax
f011b119:	e8 c0 c4 fe ff       	call   f01075de <kfree>
f011b11e:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011b121:	e8 66 8b fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011b126:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011b129:	74 17                	je     f011b142 <test_kmalloc_bestfit2+0x762>
f011b12b:	83 ec 04             	sub    $0x4,%esp
f011b12e:	68 90 a8 13 f0       	push   $0xf013a890
f011b133:	68 78 02 00 00       	push   $0x278
f011b138:	68 76 a8 13 f0       	push   $0xf013a876
f011b13d:	e8 64 50 fe ff       	call   f01001a6 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512) panic("Wrong free: Extra or less pages are removed from main memory");
f011b142:	e8 77 12 ff ff       	call   f010c3be <sys_calculate_free_frames>
f011b147:	2b 45 dc             	sub    -0x24(%ebp),%eax
f011b14a:	3d 00 02 00 00       	cmp    $0x200,%eax
f011b14f:	74 17                	je     f011b168 <test_kmalloc_bestfit2+0x788>
f011b151:	83 ec 04             	sub    $0x4,%esp
f011b154:	68 44 ab 13 f0       	push   $0xf013ab44
f011b159:	68 79 02 00 00       	push   $0x279
f011b15e:	68 76 a8 13 f0       	push   $0xf013a876
f011b163:	e8 3e 50 fe ff       	call   f01001a6 <_panic>

		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f011b168:	e8 51 12 ff ff       	call   f010c3be <sys_calculate_free_frames>
f011b16d:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011b170:	e8 17 8b fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011b175:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[5] = kmalloc(3*Mega-kilo);
f011b178:	83 ec 0c             	sub    $0xc,%esp
f011b17b:	68 00 fc 2f 00       	push   $0x2ffc00
f011b180:	e8 3f c4 fe ff       	call   f01075c4 <kmalloc>
f011b185:	83 c4 10             	add    $0x10,%esp
f011b188:	89 85 64 fe ff ff    	mov    %eax,-0x19c(%ebp)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo)) panic("Wrong start address for the allocated space... ");
f011b18e:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f011b194:	89 c1                	mov    %eax,%ecx
f011b196:	c7 85 5c ff ff ff 00 	movl   $0x1000,-0xa4(%ebp)
f011b19d:	10 00 00 
f011b1a0:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f011b1a6:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011b1ab:	89 85 58 ff ff ff    	mov    %eax,-0xa8(%ebp)
f011b1b1:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f011b1b7:	ba 00 00 00 00       	mov    $0x0,%edx
f011b1bc:	f7 b5 5c ff ff ff    	divl   -0xa4(%ebp)
f011b1c2:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f011b1c8:	29 d0                	sub    %edx,%eax
f011b1ca:	89 c3                	mov    %eax,%ebx
f011b1cc:	c7 85 54 ff ff ff 00 	movl   $0x1000,-0xac(%ebp)
f011b1d3:	10 00 00 
f011b1d6:	a0 bc 0e 6c f0       	mov    0xf06c0ebc,%al
f011b1db:	0f b6 d0             	movzbl %al,%edx
f011b1de:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f011b1e4:	01 d0                	add    %edx,%eax
f011b1e6:	48                   	dec    %eax
f011b1e7:	89 85 50 ff ff ff    	mov    %eax,-0xb0(%ebp)
f011b1ed:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f011b1f3:	ba 00 00 00 00       	mov    $0x0,%edx
f011b1f8:	f7 b5 54 ff ff ff    	divl   -0xac(%ebp)
f011b1fe:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f011b204:	29 d0                	sub    %edx,%eax
f011b206:	01 c3                	add    %eax,%ebx
f011b208:	c7 85 4c ff ff ff 00 	movl   $0x1000,-0xb4(%ebp)
f011b20f:	10 00 00 
f011b212:	a0 bc 0e 6c f0       	mov    0xf06c0ebc,%al
f011b217:	0f b6 c0             	movzbl %al,%eax
f011b21a:	c1 e0 04             	shl    $0x4,%eax
f011b21d:	89 c2                	mov    %eax,%edx
f011b21f:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f011b225:	01 d0                	add    %edx,%eax
f011b227:	48                   	dec    %eax
f011b228:	89 85 48 ff ff ff    	mov    %eax,-0xb8(%ebp)
f011b22e:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f011b234:	ba 00 00 00 00       	mov    $0x0,%edx
f011b239:	f7 b5 4c ff ff ff    	divl   -0xb4(%ebp)
f011b23f:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f011b245:	29 d0                	sub    %edx,%eax
f011b247:	01 d8                	add    %ebx,%eax
f011b249:	2d 00 80 bf 09       	sub    $0x9bf8000,%eax
f011b24e:	39 c1                	cmp    %eax,%ecx
f011b250:	74 17                	je     f011b269 <test_kmalloc_bestfit2+0x889>
f011b252:	83 ec 04             	sub    $0x4,%esp
f011b255:	68 90 ac 13 f0       	push   $0xf013ac90
f011b25a:	68 7f 02 00 00       	push   $0x27f
f011b25f:	68 76 a8 13 f0       	push   $0xf013a876
f011b264:	e8 3d 4f fe ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011b269:	e8 1e 8a fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011b26e:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011b271:	74 17                	je     f011b28a <test_kmalloc_bestfit2+0x8aa>
f011b273:	83 ec 04             	sub    $0x4,%esp
f011b276:	68 90 a8 13 f0       	push   $0xf013a890
f011b27b:	68 80 02 00 00       	push   $0x280
f011b280:	68 76 a8 13 f0       	push   $0xf013a876
f011b285:	e8 1c 4f fe ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=  768) panic("Wrong allocation: ");
f011b28a:	e8 2f 11 ff ff       	call   f010c3be <sys_calculate_free_frames>
f011b28f:	8b 55 dc             	mov    -0x24(%ebp),%edx
f011b292:	29 c2                	sub    %eax,%edx
f011b294:	89 d0                	mov    %edx,%eax
f011b296:	3d 00 03 00 00       	cmp    $0x300,%eax
f011b29b:	74 17                	je     f011b2b4 <test_kmalloc_bestfit2+0x8d4>
f011b29d:	83 ec 04             	sub    $0x4,%esp
f011b2a0:	68 c0 ac 13 f0       	push   $0xf013acc0
f011b2a5:	68 81 02 00 00       	push   $0x281
f011b2aa:	68 76 a8 13 f0       	push   $0xf013a876
f011b2af:	e8 f2 4e fe ff       	call   f01001a6 <_panic>

		//2 MB + 6 KB
		freeFrames = sys_calculate_free_frames() ;
f011b2b4:	e8 05 11 ff ff       	call   f010c3be <sys_calculate_free_frames>
f011b2b9:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011b2bc:	e8 cb 89 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011b2c1:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[6] = kmalloc(2*Mega + 6*kilo);
f011b2c4:	83 ec 0c             	sub    $0xc,%esp
f011b2c7:	68 00 18 20 00       	push   $0x201800
f011b2cc:	e8 f3 c2 fe ff       	call   f01075c4 <kmalloc>
f011b2d1:	83 c4 10             	add    $0x10,%esp
f011b2d4:	89 85 68 fe ff ff    	mov    %eax,-0x198(%ebp)
		if ((uint32) ptr_allocations[6] != (ACTUAL_START + 7*Mega + 16*kilo)) panic("Wrong start address for the allocated space... ");
f011b2da:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f011b2e0:	89 c1                	mov    %eax,%ecx
f011b2e2:	c7 85 44 ff ff ff 00 	movl   $0x1000,-0xbc(%ebp)
f011b2e9:	10 00 00 
f011b2ec:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f011b2f2:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011b2f7:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%ebp)
f011b2fd:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f011b303:	ba 00 00 00 00       	mov    $0x0,%edx
f011b308:	f7 b5 44 ff ff ff    	divl   -0xbc(%ebp)
f011b30e:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f011b314:	29 d0                	sub    %edx,%eax
f011b316:	89 c3                	mov    %eax,%ebx
f011b318:	c7 85 3c ff ff ff 00 	movl   $0x1000,-0xc4(%ebp)
f011b31f:	10 00 00 
f011b322:	a0 bc 0e 6c f0       	mov    0xf06c0ebc,%al
f011b327:	0f b6 d0             	movzbl %al,%edx
f011b32a:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f011b330:	01 d0                	add    %edx,%eax
f011b332:	48                   	dec    %eax
f011b333:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
f011b339:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f011b33f:	ba 00 00 00 00       	mov    $0x0,%edx
f011b344:	f7 b5 3c ff ff ff    	divl   -0xc4(%ebp)
f011b34a:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f011b350:	29 d0                	sub    %edx,%eax
f011b352:	01 c3                	add    %eax,%ebx
f011b354:	c7 85 34 ff ff ff 00 	movl   $0x1000,-0xcc(%ebp)
f011b35b:	10 00 00 
f011b35e:	a0 bc 0e 6c f0       	mov    0xf06c0ebc,%al
f011b363:	0f b6 c0             	movzbl %al,%eax
f011b366:	c1 e0 04             	shl    $0x4,%eax
f011b369:	89 c2                	mov    %eax,%edx
f011b36b:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f011b371:	01 d0                	add    %edx,%eax
f011b373:	48                   	dec    %eax
f011b374:	89 85 30 ff ff ff    	mov    %eax,-0xd0(%ebp)
f011b37a:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f011b380:	ba 00 00 00 00       	mov    $0x0,%edx
f011b385:	f7 b5 34 ff ff ff    	divl   -0xcc(%ebp)
f011b38b:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f011b391:	29 d0                	sub    %edx,%eax
f011b393:	01 d8                	add    %ebx,%eax
f011b395:	2d 00 80 8f 09       	sub    $0x98f8000,%eax
f011b39a:	39 c1                	cmp    %eax,%ecx
f011b39c:	74 17                	je     f011b3b5 <test_kmalloc_bestfit2+0x9d5>
f011b39e:	83 ec 04             	sub    $0x4,%esp
f011b3a1:	68 90 ac 13 f0       	push   $0xf013ac90
f011b3a6:	68 87 02 00 00       	push   $0x287
f011b3ab:	68 76 a8 13 f0       	push   $0xf013a876
f011b3b0:	e8 f1 4d fe ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011b3b5:	e8 d2 88 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011b3ba:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011b3bd:	74 17                	je     f011b3d6 <test_kmalloc_bestfit2+0x9f6>
f011b3bf:	83 ec 04             	sub    $0x4,%esp
f011b3c2:	68 90 a8 13 f0       	push   $0xf013a890
f011b3c7:	68 88 02 00 00       	push   $0x288
f011b3cc:	68 76 a8 13 f0       	push   $0xf013a876
f011b3d1:	e8 d0 4d fe ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=  514) panic("Wrong allocation: ");
f011b3d6:	e8 e3 0f ff ff       	call   f010c3be <sys_calculate_free_frames>
f011b3db:	8b 55 dc             	mov    -0x24(%ebp),%edx
f011b3de:	29 c2                	sub    %eax,%edx
f011b3e0:	89 d0                	mov    %edx,%eax
f011b3e2:	3d 02 02 00 00       	cmp    $0x202,%eax
f011b3e7:	74 17                	je     f011b400 <test_kmalloc_bestfit2+0xa20>
f011b3e9:	83 ec 04             	sub    $0x4,%esp
f011b3ec:	68 c0 ac 13 f0       	push   $0xf013acc0
f011b3f1:	68 89 02 00 00       	push   $0x289
f011b3f6:	68 76 a8 13 f0       	push   $0xf013a876
f011b3fb:	e8 a6 4d fe ff       	call   f01001a6 <_panic>

		//5 MB
		freeFrames = sys_calculate_free_frames() ;
f011b400:	e8 b9 0f ff ff       	call   f010c3be <sys_calculate_free_frames>
f011b405:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011b408:	e8 7f 88 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011b40d:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[7] = kmalloc(5*Mega-kilo);
f011b410:	83 ec 0c             	sub    $0xc,%esp
f011b413:	68 00 fc 4f 00       	push   $0x4ffc00
f011b418:	e8 a7 c1 fe ff       	call   f01075c4 <kmalloc>
f011b41d:	83 c4 10             	add    $0x10,%esp
f011b420:	89 85 6c fe ff ff    	mov    %eax,-0x194(%ebp)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 9*Mega + 24*kilo)) panic("Wrong start address for the allocated space... ");
f011b426:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f011b42c:	89 c1                	mov    %eax,%ecx
f011b42e:	c7 85 2c ff ff ff 00 	movl   $0x1000,-0xd4(%ebp)
f011b435:	10 00 00 
f011b438:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f011b43e:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011b443:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%ebp)
f011b449:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f011b44f:	ba 00 00 00 00       	mov    $0x0,%edx
f011b454:	f7 b5 2c ff ff ff    	divl   -0xd4(%ebp)
f011b45a:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f011b460:	29 d0                	sub    %edx,%eax
f011b462:	89 c3                	mov    %eax,%ebx
f011b464:	c7 85 24 ff ff ff 00 	movl   $0x1000,-0xdc(%ebp)
f011b46b:	10 00 00 
f011b46e:	a0 bc 0e 6c f0       	mov    0xf06c0ebc,%al
f011b473:	0f b6 d0             	movzbl %al,%edx
f011b476:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011b47c:	01 d0                	add    %edx,%eax
f011b47e:	48                   	dec    %eax
f011b47f:	89 85 20 ff ff ff    	mov    %eax,-0xe0(%ebp)
f011b485:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f011b48b:	ba 00 00 00 00       	mov    $0x0,%edx
f011b490:	f7 b5 24 ff ff ff    	divl   -0xdc(%ebp)
f011b496:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f011b49c:	29 d0                	sub    %edx,%eax
f011b49e:	01 c3                	add    %eax,%ebx
f011b4a0:	c7 85 1c ff ff ff 00 	movl   $0x1000,-0xe4(%ebp)
f011b4a7:	10 00 00 
f011b4aa:	a0 bc 0e 6c f0       	mov    0xf06c0ebc,%al
f011b4af:	0f b6 c0             	movzbl %al,%eax
f011b4b2:	c1 e0 04             	shl    $0x4,%eax
f011b4b5:	89 c2                	mov    %eax,%edx
f011b4b7:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f011b4bd:	01 d0                	add    %edx,%eax
f011b4bf:	48                   	dec    %eax
f011b4c0:	89 85 18 ff ff ff    	mov    %eax,-0xe8(%ebp)
f011b4c6:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f011b4cc:	ba 00 00 00 00       	mov    $0x0,%edx
f011b4d1:	f7 b5 1c ff ff ff    	divl   -0xe4(%ebp)
f011b4d7:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f011b4dd:	29 d0                	sub    %edx,%eax
f011b4df:	01 d8                	add    %ebx,%eax
f011b4e1:	2d 00 60 6f 09       	sub    $0x96f6000,%eax
f011b4e6:	39 c1                	cmp    %eax,%ecx
f011b4e8:	74 17                	je     f011b501 <test_kmalloc_bestfit2+0xb21>
f011b4ea:	83 ec 04             	sub    $0x4,%esp
f011b4ed:	68 90 ac 13 f0       	push   $0xf013ac90
f011b4f2:	68 8f 02 00 00       	push   $0x28f
f011b4f7:	68 76 a8 13 f0       	push   $0xf013a876
f011b4fc:	e8 a5 4c fe ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011b501:	e8 86 87 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011b506:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011b509:	74 17                	je     f011b522 <test_kmalloc_bestfit2+0xb42>
f011b50b:	83 ec 04             	sub    $0x4,%esp
f011b50e:	68 90 a8 13 f0       	push   $0xf013a890
f011b513:	68 90 02 00 00       	push   $0x290
f011b518:	68 76 a8 13 f0       	push   $0xf013a876
f011b51d:	e8 84 4c fe ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=  ((5*Mega)/PAGE_SIZE)) panic("Wrong allocation: ");
f011b522:	e8 97 0e ff ff       	call   f010c3be <sys_calculate_free_frames>
f011b527:	8b 55 dc             	mov    -0x24(%ebp),%edx
f011b52a:	29 c2                	sub    %eax,%edx
f011b52c:	89 d0                	mov    %edx,%eax
f011b52e:	3d 00 05 00 00       	cmp    $0x500,%eax
f011b533:	74 17                	je     f011b54c <test_kmalloc_bestfit2+0xb6c>
f011b535:	83 ec 04             	sub    $0x4,%esp
f011b538:	68 c0 ac 13 f0       	push   $0xf013acc0
f011b53d:	68 91 02 00 00       	push   $0x291
f011b542:	68 76 a8 13 f0       	push   $0xf013a876
f011b547:	e8 5a 4c fe ff       	call   f01001a6 <_panic>

		//2 MB + 8 KB Hole
		freeFrames = sys_calculate_free_frames() ;
f011b54c:	e8 6d 0e ff ff       	call   f010c3be <sys_calculate_free_frames>
f011b551:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011b554:	e8 33 87 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011b559:	89 45 d8             	mov    %eax,-0x28(%ebp)
		kfree(ptr_allocations[6]);
f011b55c:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f011b562:	83 ec 0c             	sub    $0xc,%esp
f011b565:	50                   	push   %eax
f011b566:	e8 73 c0 fe ff       	call   f01075de <kfree>
f011b56b:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011b56e:	e8 19 87 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011b573:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011b576:	74 17                	je     f011b58f <test_kmalloc_bestfit2+0xbaf>
f011b578:	83 ec 04             	sub    $0x4,%esp
f011b57b:	68 90 a8 13 f0       	push   $0xf013a890
f011b580:	68 97 02 00 00       	push   $0x297
f011b585:	68 76 a8 13 f0       	push   $0xf013a876
f011b58a:	e8 17 4c fe ff       	call   f01001a6 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) !=  514) panic("Wrong free: Extra or less pages are removed from main memory");
f011b58f:	e8 2a 0e ff ff       	call   f010c3be <sys_calculate_free_frames>
f011b594:	2b 45 dc             	sub    -0x24(%ebp),%eax
f011b597:	3d 02 02 00 00       	cmp    $0x202,%eax
f011b59c:	74 17                	je     f011b5b5 <test_kmalloc_bestfit2+0xbd5>
f011b59e:	83 ec 04             	sub    $0x4,%esp
f011b5a1:	68 44 ab 13 f0       	push   $0xf013ab44
f011b5a6:	68 98 02 00 00       	push   $0x298
f011b5ab:	68 76 a8 13 f0       	push   $0xf013a876
f011b5b0:	e8 f1 4b fe ff       	call   f01001a6 <_panic>

		//2 MB Hole
		freeFrames = sys_calculate_free_frames() ;
f011b5b5:	e8 04 0e ff ff       	call   f010c3be <sys_calculate_free_frames>
f011b5ba:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011b5bd:	e8 ca 86 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011b5c2:	89 45 d8             	mov    %eax,-0x28(%ebp)
		kfree(ptr_allocations[1]);
f011b5c5:	8b 85 54 fe ff ff    	mov    -0x1ac(%ebp),%eax
f011b5cb:	83 ec 0c             	sub    $0xc,%esp
f011b5ce:	50                   	push   %eax
f011b5cf:	e8 0a c0 fe ff       	call   f01075de <kfree>
f011b5d4:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011b5d7:	e8 b0 86 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011b5dc:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011b5df:	74 17                	je     f011b5f8 <test_kmalloc_bestfit2+0xc18>
f011b5e1:	83 ec 04             	sub    $0x4,%esp
f011b5e4:	68 90 a8 13 f0       	push   $0xf013a890
f011b5e9:	68 9e 02 00 00       	push   $0x29e
f011b5ee:	68 76 a8 13 f0       	push   $0xf013a876
f011b5f3:	e8 ae 4b fe ff       	call   f01001a6 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) !=  512) panic("Wrong free: Extra or less pages are removed from main memory.");
f011b5f8:	e8 c1 0d ff ff       	call   f010c3be <sys_calculate_free_frames>
f011b5fd:	2b 45 dc             	sub    -0x24(%ebp),%eax
f011b600:	3d 00 02 00 00       	cmp    $0x200,%eax
f011b605:	74 17                	je     f011b61e <test_kmalloc_bestfit2+0xc3e>
f011b607:	83 ec 04             	sub    $0x4,%esp
f011b60a:	68 70 ad 13 f0       	push   $0xf013ad70
f011b60f:	68 9f 02 00 00       	push   $0x29f
f011b614:	68 76 a8 13 f0       	push   $0xf013a876
f011b619:	e8 88 4b fe ff       	call   f01001a6 <_panic>

		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f011b61e:	e8 9b 0d ff ff       	call   f010c3be <sys_calculate_free_frames>
f011b623:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011b626:	e8 61 86 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011b62b:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[8] = kmalloc(2*Mega-kilo);
f011b62e:	83 ec 0c             	sub    $0xc,%esp
f011b631:	68 00 fc 1f 00       	push   $0x1ffc00
f011b636:	e8 89 bf fe ff       	call   f01075c4 <kmalloc>
f011b63b:	83 c4 10             	add    $0x10,%esp
f011b63e:	89 85 70 fe ff ff    	mov    %eax,-0x190(%ebp)
		if ((uint32) ptr_allocations[8] != (ACTUAL_START + 7*Mega + 16*kilo)) panic("Wrong start address for the allocated space... ");
f011b644:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f011b64a:	89 c1                	mov    %eax,%ecx
f011b64c:	c7 85 14 ff ff ff 00 	movl   $0x1000,-0xec(%ebp)
f011b653:	10 00 00 
f011b656:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f011b65c:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011b661:	89 85 10 ff ff ff    	mov    %eax,-0xf0(%ebp)
f011b667:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f011b66d:	ba 00 00 00 00       	mov    $0x0,%edx
f011b672:	f7 b5 14 ff ff ff    	divl   -0xec(%ebp)
f011b678:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f011b67e:	29 d0                	sub    %edx,%eax
f011b680:	89 c3                	mov    %eax,%ebx
f011b682:	c7 85 0c ff ff ff 00 	movl   $0x1000,-0xf4(%ebp)
f011b689:	10 00 00 
f011b68c:	a0 bc 0e 6c f0       	mov    0xf06c0ebc,%al
f011b691:	0f b6 d0             	movzbl %al,%edx
f011b694:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f011b69a:	01 d0                	add    %edx,%eax
f011b69c:	48                   	dec    %eax
f011b69d:	89 85 08 ff ff ff    	mov    %eax,-0xf8(%ebp)
f011b6a3:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f011b6a9:	ba 00 00 00 00       	mov    $0x0,%edx
f011b6ae:	f7 b5 0c ff ff ff    	divl   -0xf4(%ebp)
f011b6b4:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f011b6ba:	29 d0                	sub    %edx,%eax
f011b6bc:	01 c3                	add    %eax,%ebx
f011b6be:	c7 85 04 ff ff ff 00 	movl   $0x1000,-0xfc(%ebp)
f011b6c5:	10 00 00 
f011b6c8:	a0 bc 0e 6c f0       	mov    0xf06c0ebc,%al
f011b6cd:	0f b6 c0             	movzbl %al,%eax
f011b6d0:	c1 e0 04             	shl    $0x4,%eax
f011b6d3:	89 c2                	mov    %eax,%edx
f011b6d5:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f011b6db:	01 d0                	add    %edx,%eax
f011b6dd:	48                   	dec    %eax
f011b6de:	89 85 00 ff ff ff    	mov    %eax,-0x100(%ebp)
f011b6e4:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f011b6ea:	ba 00 00 00 00       	mov    $0x0,%edx
f011b6ef:	f7 b5 04 ff ff ff    	divl   -0xfc(%ebp)
f011b6f5:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f011b6fb:	29 d0                	sub    %edx,%eax
f011b6fd:	01 d8                	add    %ebx,%eax
f011b6ff:	2d 00 80 8f 09       	sub    $0x98f8000,%eax
f011b704:	39 c1                	cmp    %eax,%ecx
f011b706:	74 17                	je     f011b71f <test_kmalloc_bestfit2+0xd3f>
f011b708:	83 ec 04             	sub    $0x4,%esp
f011b70b:	68 90 ac 13 f0       	push   $0xf013ac90
f011b710:	68 a5 02 00 00       	push   $0x2a5
f011b715:	68 76 a8 13 f0       	push   $0xf013a876
f011b71a:	e8 87 4a fe ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011b71f:	e8 68 85 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011b724:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011b727:	74 17                	je     f011b740 <test_kmalloc_bestfit2+0xd60>
f011b729:	83 ec 04             	sub    $0x4,%esp
f011b72c:	68 90 a8 13 f0       	push   $0xf013a890
f011b731:	68 a6 02 00 00       	push   $0x2a6
f011b736:	68 76 a8 13 f0       	push   $0xf013a876
f011b73b:	e8 66 4a fe ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=  512) panic("Wrong allocation:");
f011b740:	e8 79 0c ff ff       	call   f010c3be <sys_calculate_free_frames>
f011b745:	8b 55 dc             	mov    -0x24(%ebp),%edx
f011b748:	29 c2                	sub    %eax,%edx
f011b74a:	89 d0                	mov    %edx,%eax
f011b74c:	3d 00 02 00 00       	cmp    $0x200,%eax
f011b751:	74 17                	je     f011b76a <test_kmalloc_bestfit2+0xd8a>
f011b753:	83 ec 04             	sub    $0x4,%esp
f011b756:	68 ae ad 13 f0       	push   $0xf013adae
f011b75b:	68 a7 02 00 00       	push   $0x2a7
f011b760:	68 76 a8 13 f0       	push   $0xf013a876
f011b765:	e8 3c 4a fe ff       	call   f01001a6 <_panic>

		//6 KB
		freeFrames = sys_calculate_free_frames() ;
f011b76a:	e8 4f 0c ff ff       	call   f010c3be <sys_calculate_free_frames>
f011b76f:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011b772:	e8 15 85 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011b777:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[9] = kmalloc(6*kilo);
f011b77a:	83 ec 0c             	sub    $0xc,%esp
f011b77d:	68 00 18 00 00       	push   $0x1800
f011b782:	e8 3d be fe ff       	call   f01075c4 <kmalloc>
f011b787:	83 c4 10             	add    $0x10,%esp
f011b78a:	89 85 74 fe ff ff    	mov    %eax,-0x18c(%ebp)
		if ((uint32) ptr_allocations[9] != (ACTUAL_START + 9*Mega + 16*kilo)) panic("Wrong start address for the allocated space... ");
f011b790:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f011b796:	89 c1                	mov    %eax,%ecx
f011b798:	c7 85 fc fe ff ff 00 	movl   $0x1000,-0x104(%ebp)
f011b79f:	10 00 00 
f011b7a2:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f011b7a8:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011b7ad:	89 85 f8 fe ff ff    	mov    %eax,-0x108(%ebp)
f011b7b3:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f011b7b9:	ba 00 00 00 00       	mov    $0x0,%edx
f011b7be:	f7 b5 fc fe ff ff    	divl   -0x104(%ebp)
f011b7c4:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f011b7ca:	29 d0                	sub    %edx,%eax
f011b7cc:	89 c3                	mov    %eax,%ebx
f011b7ce:	c7 85 f4 fe ff ff 00 	movl   $0x1000,-0x10c(%ebp)
f011b7d5:	10 00 00 
f011b7d8:	a0 bc 0e 6c f0       	mov    0xf06c0ebc,%al
f011b7dd:	0f b6 d0             	movzbl %al,%edx
f011b7e0:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f011b7e6:	01 d0                	add    %edx,%eax
f011b7e8:	48                   	dec    %eax
f011b7e9:	89 85 f0 fe ff ff    	mov    %eax,-0x110(%ebp)
f011b7ef:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f011b7f5:	ba 00 00 00 00       	mov    $0x0,%edx
f011b7fa:	f7 b5 f4 fe ff ff    	divl   -0x10c(%ebp)
f011b800:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f011b806:	29 d0                	sub    %edx,%eax
f011b808:	01 c3                	add    %eax,%ebx
f011b80a:	c7 85 ec fe ff ff 00 	movl   $0x1000,-0x114(%ebp)
f011b811:	10 00 00 
f011b814:	a0 bc 0e 6c f0       	mov    0xf06c0ebc,%al
f011b819:	0f b6 c0             	movzbl %al,%eax
f011b81c:	c1 e0 04             	shl    $0x4,%eax
f011b81f:	89 c2                	mov    %eax,%edx
f011b821:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f011b827:	01 d0                	add    %edx,%eax
f011b829:	48                   	dec    %eax
f011b82a:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)
f011b830:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f011b836:	ba 00 00 00 00       	mov    $0x0,%edx
f011b83b:	f7 b5 ec fe ff ff    	divl   -0x114(%ebp)
f011b841:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f011b847:	29 d0                	sub    %edx,%eax
f011b849:	01 d8                	add    %ebx,%eax
f011b84b:	2d 00 80 6f 09       	sub    $0x96f8000,%eax
f011b850:	39 c1                	cmp    %eax,%ecx
f011b852:	74 17                	je     f011b86b <test_kmalloc_bestfit2+0xe8b>
f011b854:	83 ec 04             	sub    $0x4,%esp
f011b857:	68 90 ac 13 f0       	push   $0xf013ac90
f011b85c:	68 ad 02 00 00       	push   $0x2ad
f011b861:	68 76 a8 13 f0       	push   $0xf013a876
f011b866:	e8 3b 49 fe ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011b86b:	e8 1c 84 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011b870:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011b873:	74 17                	je     f011b88c <test_kmalloc_bestfit2+0xeac>
f011b875:	83 ec 04             	sub    $0x4,%esp
f011b878:	68 90 a8 13 f0       	push   $0xf013a890
f011b87d:	68 ae 02 00 00       	push   $0x2ae
f011b882:	68 76 a8 13 f0       	push   $0xf013a876
f011b887:	e8 1a 49 fe ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=  2) panic("Wrong allocation:");
f011b88c:	e8 2d 0b ff ff       	call   f010c3be <sys_calculate_free_frames>
f011b891:	8b 55 dc             	mov    -0x24(%ebp),%edx
f011b894:	29 c2                	sub    %eax,%edx
f011b896:	89 d0                	mov    %edx,%eax
f011b898:	83 f8 02             	cmp    $0x2,%eax
f011b89b:	74 17                	je     f011b8b4 <test_kmalloc_bestfit2+0xed4>
f011b89d:	83 ec 04             	sub    $0x4,%esp
f011b8a0:	68 ae ad 13 f0       	push   $0xf013adae
f011b8a5:	68 af 02 00 00       	push   $0x2af
f011b8aa:	68 76 a8 13 f0       	push   $0xf013a876
f011b8af:	e8 f2 48 fe ff       	call   f01001a6 <_panic>

		//3 MB Hole
		freeFrames = sys_calculate_free_frames() ;
f011b8b4:	e8 05 0b ff ff       	call   f010c3be <sys_calculate_free_frames>
f011b8b9:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011b8bc:	e8 cb 83 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011b8c1:	89 45 d8             	mov    %eax,-0x28(%ebp)
		kfree(ptr_allocations[5]);
f011b8c4:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f011b8ca:	83 ec 0c             	sub    $0xc,%esp
f011b8cd:	50                   	push   %eax
f011b8ce:	e8 0b bd fe ff       	call   f01075de <kfree>
f011b8d3:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011b8d6:	e8 b1 83 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011b8db:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011b8de:	74 17                	je     f011b8f7 <test_kmalloc_bestfit2+0xf17>
f011b8e0:	83 ec 04             	sub    $0x4,%esp
f011b8e3:	68 90 a8 13 f0       	push   $0xf013a890
f011b8e8:	68 b5 02 00 00       	push   $0x2b5
f011b8ed:	68 76 a8 13 f0       	push   $0xf013a876
f011b8f2:	e8 af 48 fe ff       	call   f01001a6 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) !=  768) panic("Wrong free: Extra or less pages are removed from main memory.");
f011b8f7:	e8 c2 0a ff ff       	call   f010c3be <sys_calculate_free_frames>
f011b8fc:	2b 45 dc             	sub    -0x24(%ebp),%eax
f011b8ff:	3d 00 03 00 00       	cmp    $0x300,%eax
f011b904:	74 17                	je     f011b91d <test_kmalloc_bestfit2+0xf3d>
f011b906:	83 ec 04             	sub    $0x4,%esp
f011b909:	68 70 ad 13 f0       	push   $0xf013ad70
f011b90e:	68 b6 02 00 00       	push   $0x2b6
f011b913:	68 76 a8 13 f0       	push   $0xf013a876
f011b918:	e8 89 48 fe ff       	call   f01001a6 <_panic>

		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f011b91d:	e8 9c 0a ff ff       	call   f010c3be <sys_calculate_free_frames>
f011b922:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011b925:	e8 62 83 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011b92a:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[10] = kmalloc(3*Mega-kilo);
f011b92d:	83 ec 0c             	sub    $0xc,%esp
f011b930:	68 00 fc 2f 00       	push   $0x2ffc00
f011b935:	e8 8a bc fe ff       	call   f01075c4 <kmalloc>
f011b93a:	83 c4 10             	add    $0x10,%esp
f011b93d:	89 85 78 fe ff ff    	mov    %eax,-0x188(%ebp)
		if ((uint32) ptr_allocations[10] != (ACTUAL_START + 4*Mega + 16*kilo)) panic("Wrong start address for the allocated space... ");
f011b943:	8b 85 78 fe ff ff    	mov    -0x188(%ebp),%eax
f011b949:	89 c1                	mov    %eax,%ecx
f011b94b:	c7 85 e4 fe ff ff 00 	movl   $0x1000,-0x11c(%ebp)
f011b952:	10 00 00 
f011b955:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f011b95b:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011b960:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
f011b966:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f011b96c:	ba 00 00 00 00       	mov    $0x0,%edx
f011b971:	f7 b5 e4 fe ff ff    	divl   -0x11c(%ebp)
f011b977:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f011b97d:	29 d0                	sub    %edx,%eax
f011b97f:	89 c3                	mov    %eax,%ebx
f011b981:	c7 85 dc fe ff ff 00 	movl   $0x1000,-0x124(%ebp)
f011b988:	10 00 00 
f011b98b:	a0 bc 0e 6c f0       	mov    0xf06c0ebc,%al
f011b990:	0f b6 d0             	movzbl %al,%edx
f011b993:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f011b999:	01 d0                	add    %edx,%eax
f011b99b:	48                   	dec    %eax
f011b99c:	89 85 d8 fe ff ff    	mov    %eax,-0x128(%ebp)
f011b9a2:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f011b9a8:	ba 00 00 00 00       	mov    $0x0,%edx
f011b9ad:	f7 b5 dc fe ff ff    	divl   -0x124(%ebp)
f011b9b3:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f011b9b9:	29 d0                	sub    %edx,%eax
f011b9bb:	01 c3                	add    %eax,%ebx
f011b9bd:	c7 85 d4 fe ff ff 00 	movl   $0x1000,-0x12c(%ebp)
f011b9c4:	10 00 00 
f011b9c7:	a0 bc 0e 6c f0       	mov    0xf06c0ebc,%al
f011b9cc:	0f b6 c0             	movzbl %al,%eax
f011b9cf:	c1 e0 04             	shl    $0x4,%eax
f011b9d2:	89 c2                	mov    %eax,%edx
f011b9d4:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f011b9da:	01 d0                	add    %edx,%eax
f011b9dc:	48                   	dec    %eax
f011b9dd:	89 85 d0 fe ff ff    	mov    %eax,-0x130(%ebp)
f011b9e3:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f011b9e9:	ba 00 00 00 00       	mov    $0x0,%edx
f011b9ee:	f7 b5 d4 fe ff ff    	divl   -0x12c(%ebp)
f011b9f4:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f011b9fa:	29 d0                	sub    %edx,%eax
f011b9fc:	01 d8                	add    %ebx,%eax
f011b9fe:	2d 00 80 bf 09       	sub    $0x9bf8000,%eax
f011ba03:	39 c1                	cmp    %eax,%ecx
f011ba05:	74 17                	je     f011ba1e <test_kmalloc_bestfit2+0x103e>
f011ba07:	83 ec 04             	sub    $0x4,%esp
f011ba0a:	68 90 ac 13 f0       	push   $0xf013ac90
f011ba0f:	68 bc 02 00 00       	push   $0x2bc
f011ba14:	68 76 a8 13 f0       	push   $0xf013a876
f011ba19:	e8 88 47 fe ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011ba1e:	e8 69 82 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011ba23:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011ba26:	74 17                	je     f011ba3f <test_kmalloc_bestfit2+0x105f>
f011ba28:	83 ec 04             	sub    $0x4,%esp
f011ba2b:	68 90 a8 13 f0       	push   $0xf013a890
f011ba30:	68 bd 02 00 00       	push   $0x2bd
f011ba35:	68 76 a8 13 f0       	push   $0xf013a876
f011ba3a:	e8 67 47 fe ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=  ((3*Mega)/4096)) panic("Wrong free: Extra or less pages are removed from main memory.");
f011ba3f:	e8 7a 09 ff ff       	call   f010c3be <sys_calculate_free_frames>
f011ba44:	8b 55 dc             	mov    -0x24(%ebp),%edx
f011ba47:	29 c2                	sub    %eax,%edx
f011ba49:	89 d0                	mov    %edx,%eax
f011ba4b:	3d 00 03 00 00       	cmp    $0x300,%eax
f011ba50:	74 17                	je     f011ba69 <test_kmalloc_bestfit2+0x1089>
f011ba52:	83 ec 04             	sub    $0x4,%esp
f011ba55:	68 70 ad 13 f0       	push   $0xf013ad70
f011ba5a:	68 be 02 00 00       	push   $0x2be
f011ba5f:	68 76 a8 13 f0       	push   $0xf013a876
f011ba64:	e8 3d 47 fe ff       	call   f01001a6 <_panic>

		//4 MB
		freeFrames = sys_calculate_free_frames() ;
f011ba69:	e8 50 09 ff ff       	call   f010c3be <sys_calculate_free_frames>
f011ba6e:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011ba71:	e8 16 82 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011ba76:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[11] = kmalloc(4*Mega-kilo);
f011ba79:	83 ec 0c             	sub    $0xc,%esp
f011ba7c:	68 00 fc 3f 00       	push   $0x3ffc00
f011ba81:	e8 3e bb fe ff       	call   f01075c4 <kmalloc>
f011ba86:	83 c4 10             	add    $0x10,%esp
f011ba89:	89 85 7c fe ff ff    	mov    %eax,-0x184(%ebp)
		if ((uint32) ptr_allocations[11] != (ACTUAL_START)) panic("Wrong start address for the allocated space... ");
f011ba8f:	8b 85 7c fe ff ff    	mov    -0x184(%ebp),%eax
f011ba95:	89 c1                	mov    %eax,%ecx
f011ba97:	c7 85 cc fe ff ff 00 	movl   $0x1000,-0x134(%ebp)
f011ba9e:	10 00 00 
f011baa1:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f011baa7:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011baac:	89 85 c8 fe ff ff    	mov    %eax,-0x138(%ebp)
f011bab2:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f011bab8:	ba 00 00 00 00       	mov    $0x0,%edx
f011babd:	f7 b5 cc fe ff ff    	divl   -0x134(%ebp)
f011bac3:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f011bac9:	29 d0                	sub    %edx,%eax
f011bacb:	89 c3                	mov    %eax,%ebx
f011bacd:	c7 85 c4 fe ff ff 00 	movl   $0x1000,-0x13c(%ebp)
f011bad4:	10 00 00 
f011bad7:	a0 bc 0e 6c f0       	mov    0xf06c0ebc,%al
f011badc:	0f b6 d0             	movzbl %al,%edx
f011badf:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f011bae5:	01 d0                	add    %edx,%eax
f011bae7:	48                   	dec    %eax
f011bae8:	89 85 c0 fe ff ff    	mov    %eax,-0x140(%ebp)
f011baee:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f011baf4:	ba 00 00 00 00       	mov    $0x0,%edx
f011baf9:	f7 b5 c4 fe ff ff    	divl   -0x13c(%ebp)
f011baff:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f011bb05:	29 d0                	sub    %edx,%eax
f011bb07:	01 c3                	add    %eax,%ebx
f011bb09:	c7 85 bc fe ff ff 00 	movl   $0x1000,-0x144(%ebp)
f011bb10:	10 00 00 
f011bb13:	a0 bc 0e 6c f0       	mov    0xf06c0ebc,%al
f011bb18:	0f b6 c0             	movzbl %al,%eax
f011bb1b:	c1 e0 04             	shl    $0x4,%eax
f011bb1e:	89 c2                	mov    %eax,%edx
f011bb20:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f011bb26:	01 d0                	add    %edx,%eax
f011bb28:	48                   	dec    %eax
f011bb29:	89 85 b8 fe ff ff    	mov    %eax,-0x148(%ebp)
f011bb2f:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f011bb35:	ba 00 00 00 00       	mov    $0x0,%edx
f011bb3a:	f7 b5 bc fe ff ff    	divl   -0x144(%ebp)
f011bb40:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f011bb46:	29 d0                	sub    %edx,%eax
f011bb48:	01 d8                	add    %ebx,%eax
f011bb4a:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f011bb4f:	39 c1                	cmp    %eax,%ecx
f011bb51:	74 17                	je     f011bb6a <test_kmalloc_bestfit2+0x118a>
f011bb53:	83 ec 04             	sub    $0x4,%esp
f011bb56:	68 90 ac 13 f0       	push   $0xf013ac90
f011bb5b:	68 c4 02 00 00       	push   $0x2c4
f011bb60:	68 76 a8 13 f0       	push   $0xf013a876
f011bb65:	e8 3c 46 fe ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011bb6a:	e8 1d 81 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011bb6f:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011bb72:	74 17                	je     f011bb8b <test_kmalloc_bestfit2+0x11ab>
f011bb74:	83 ec 04             	sub    $0x4,%esp
f011bb77:	68 90 a8 13 f0       	push   $0xf013a890
f011bb7c:	68 c5 02 00 00       	push   $0x2c5
f011bb81:	68 76 a8 13 f0       	push   $0xf013a876
f011bb86:	e8 1b 46 fe ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != ((4*Mega)/4096)) panic("Wrong free: Extra or less pages are removed from main memory.");
f011bb8b:	e8 2e 08 ff ff       	call   f010c3be <sys_calculate_free_frames>
f011bb90:	8b 55 dc             	mov    -0x24(%ebp),%edx
f011bb93:	29 c2                	sub    %eax,%edx
f011bb95:	89 d0                	mov    %edx,%eax
f011bb97:	3d 00 04 00 00       	cmp    $0x400,%eax
f011bb9c:	74 17                	je     f011bbb5 <test_kmalloc_bestfit2+0x11d5>
f011bb9e:	83 ec 04             	sub    $0x4,%esp
f011bba1:	68 70 ad 13 f0       	push   $0xf013ad70
f011bba6:	68 c6 02 00 00       	push   $0x2c6
f011bbab:	68 76 a8 13 f0       	push   $0xf013a876
f011bbb0:	e8 f1 45 fe ff       	call   f01001a6 <_panic>
	}

	//	b) Attempt to allocate large segment with no suitable fragment to fit on
	{
		//Large Allocation
		ptr_allocations[12] = kmalloc((KERNEL_HEAP_MAX - ACTUAL_START - 14*Mega));
f011bbb5:	c7 85 b4 fe ff ff 00 	movl   $0x1000,-0x14c(%ebp)
f011bbbc:	10 00 00 
f011bbbf:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f011bbc5:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011bbca:	89 85 b0 fe ff ff    	mov    %eax,-0x150(%ebp)
f011bbd0:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f011bbd6:	ba 00 00 00 00       	mov    $0x0,%edx
f011bbdb:	f7 b5 b4 fe ff ff    	divl   -0x14c(%ebp)
f011bbe1:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f011bbe7:	29 d0                	sub    %edx,%eax
f011bbe9:	89 c1                	mov    %eax,%ecx
f011bbeb:	c7 85 ac fe ff ff 00 	movl   $0x1000,-0x154(%ebp)
f011bbf2:	10 00 00 
f011bbf5:	a0 bc 0e 6c f0       	mov    0xf06c0ebc,%al
f011bbfa:	0f b6 d0             	movzbl %al,%edx
f011bbfd:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f011bc03:	01 d0                	add    %edx,%eax
f011bc05:	48                   	dec    %eax
f011bc06:	89 85 a8 fe ff ff    	mov    %eax,-0x158(%ebp)
f011bc0c:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f011bc12:	ba 00 00 00 00       	mov    $0x0,%edx
f011bc17:	f7 b5 ac fe ff ff    	divl   -0x154(%ebp)
f011bc1d:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f011bc23:	29 d0                	sub    %edx,%eax
f011bc25:	01 c1                	add    %eax,%ecx
f011bc27:	c7 85 a4 fe ff ff 00 	movl   $0x1000,-0x15c(%ebp)
f011bc2e:	10 00 00 
f011bc31:	a0 bc 0e 6c f0       	mov    0xf06c0ebc,%al
f011bc36:	0f b6 c0             	movzbl %al,%eax
f011bc39:	c1 e0 04             	shl    $0x4,%eax
f011bc3c:	89 c2                	mov    %eax,%edx
f011bc3e:	8b 85 a4 fe ff ff    	mov    -0x15c(%ebp),%eax
f011bc44:	01 d0                	add    %edx,%eax
f011bc46:	48                   	dec    %eax
f011bc47:	89 85 a0 fe ff ff    	mov    %eax,-0x160(%ebp)
f011bc4d:	8b 85 a0 fe ff ff    	mov    -0x160(%ebp),%eax
f011bc53:	ba 00 00 00 00       	mov    $0x0,%edx
f011bc58:	f7 b5 a4 fe ff ff    	divl   -0x15c(%ebp)
f011bc5e:	8b 85 a0 fe ff ff    	mov    -0x160(%ebp),%eax
f011bc64:	29 d0                	sub    %edx,%eax
f011bc66:	01 c8                	add    %ecx,%eax
f011bc68:	ba 00 b0 1f 09       	mov    $0x91fb000,%edx
f011bc6d:	29 c2                	sub    %eax,%edx
f011bc6f:	89 d0                	mov    %edx,%eax
f011bc71:	83 ec 0c             	sub    $0xc,%esp
f011bc74:	50                   	push   %eax
f011bc75:	e8 4a b9 fe ff       	call   f01075c4 <kmalloc>
f011bc7a:	83 c4 10             	add    $0x10,%esp
f011bc7d:	89 85 80 fe ff ff    	mov    %eax,-0x180(%ebp)
		if (ptr_allocations[12] != NULL) panic("Kmalloc: Attempt to allocate large segment with no suitable fragment to fit on, should return NULL");
f011bc83:	8b 85 80 fe ff ff    	mov    -0x180(%ebp),%eax
f011bc89:	85 c0                	test   %eax,%eax
f011bc8b:	74 17                	je     f011bca4 <test_kmalloc_bestfit2+0x12c4>
f011bc8d:	83 ec 04             	sub    $0x4,%esp
f011bc90:	68 c0 ad 13 f0       	push   $0xf013adc0
f011bc95:	68 ce 02 00 00       	push   $0x2ce
f011bc9a:	68 76 a8 13 f0       	push   $0xf013a876
f011bc9f:	e8 02 45 fe ff       	call   f01001a6 <_panic>

		cprintf("Congratulations!! test BEST FIT allocation (2) completed successfully.\n");
f011bca4:	83 ec 0c             	sub    $0xc,%esp
f011bca7:	68 24 ae 13 f0       	push   $0xf013ae24
f011bcac:	e8 7c 4f fe ff       	call   f0100c2d <cprintf>
f011bcb1:	83 c4 10             	add    $0x10,%esp
	}
	return 1;
f011bcb4:	b8 01 00 00 00       	mov    $0x1,%eax

}
f011bcb9:	8d 65 f8             	lea    -0x8(%ebp),%esp
f011bcbc:	5b                   	pop    %ebx
f011bcbd:	5f                   	pop    %edi
f011bcbe:	5d                   	pop    %ebp
f011bcbf:	c3                   	ret    

f011bcc0 <test_kmalloc_firstfit1>:

int test_kmalloc_firstfit1()
{
f011bcc0:	55                   	push   %ebp
f011bcc1:	89 e5                	mov    %esp,%ebp
f011bcc3:	57                   	push   %edi
f011bcc4:	53                   	push   %ebx
f011bcc5:	81 ec b0 01 00 00    	sub    $0x1b0,%esp
	cprintf("==============================================\n");
f011bccb:	83 ec 0c             	sub    $0xc,%esp
f011bcce:	68 b8 a7 13 f0       	push   $0xf013a7b8
f011bcd3:	e8 55 4f fe ff       	call   f0100c2d <cprintf>
f011bcd8:	83 c4 10             	add    $0x10,%esp
	cprintf("MAKE SURE to have a FRESH RUN for this test\n(i.e. don't run any program/test before it)\n");
f011bcdb:	83 ec 0c             	sub    $0xc,%esp
f011bcde:	68 e8 a7 13 f0       	push   $0xf013a7e8
f011bce3:	e8 45 4f fe ff       	call   f0100c2d <cprintf>
f011bce8:	83 c4 10             	add    $0x10,%esp
	cprintf("==============================================\n");
f011bceb:	83 ec 0c             	sub    $0xc,%esp
f011bcee:	68 b8 a7 13 f0       	push   $0xf013a7b8
f011bcf3:	e8 35 4f fe ff       	call   f0100c2d <cprintf>
f011bcf8:	83 c4 10             	add    $0x10,%esp

	void* ptr_allocations[20] = {0};
f011bcfb:	8d 95 50 fe ff ff    	lea    -0x1b0(%ebp),%edx
f011bd01:	b9 14 00 00 00       	mov    $0x14,%ecx
f011bd06:	b8 00 00 00 00       	mov    $0x0,%eax
f011bd0b:	89 d7                	mov    %edx,%edi
f011bd0d:	f3 ab                	rep stos %eax,%es:(%edi)
	uint32 freeDiskFrames;

	//[1] Allocate all
	{
		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames() ;
f011bd0f:	e8 aa 06 ff ff       	call   f010c3be <sys_calculate_free_frames>
f011bd14:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011bd17:	e8 70 7f fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011bd1c:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[0] = kmalloc(1*Mega-kilo);
f011bd1f:	83 ec 0c             	sub    $0xc,%esp
f011bd22:	68 00 fc 0f 00       	push   $0xffc00
f011bd27:	e8 98 b8 fe ff       	call   f01075c4 <kmalloc>
f011bd2c:	83 c4 10             	add    $0x10,%esp
f011bd2f:	89 85 50 fe ff ff    	mov    %eax,-0x1b0(%ebp)
		if ((uint32) ptr_allocations[0] != (ACTUAL_START)) panic("Wrong start address for the allocated space... ");
f011bd35:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f011bd3b:	89 c1                	mov    %eax,%ecx
f011bd3d:	c7 45 ec 00 10 00 00 	movl   $0x1000,-0x14(%ebp)
f011bd44:	8b 45 ec             	mov    -0x14(%ebp),%eax
f011bd47:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011bd4c:	89 45 e8             	mov    %eax,-0x18(%ebp)
f011bd4f:	8b 45 e8             	mov    -0x18(%ebp),%eax
f011bd52:	ba 00 00 00 00       	mov    $0x0,%edx
f011bd57:	f7 75 ec             	divl   -0x14(%ebp)
f011bd5a:	8b 45 e8             	mov    -0x18(%ebp),%eax
f011bd5d:	29 d0                	sub    %edx,%eax
f011bd5f:	89 c3                	mov    %eax,%ebx
f011bd61:	c7 45 e4 00 10 00 00 	movl   $0x1000,-0x1c(%ebp)
f011bd68:	a0 bc 0e 6c f0       	mov    0xf06c0ebc,%al
f011bd6d:	0f b6 d0             	movzbl %al,%edx
f011bd70:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f011bd73:	01 d0                	add    %edx,%eax
f011bd75:	48                   	dec    %eax
f011bd76:	89 45 e0             	mov    %eax,-0x20(%ebp)
f011bd79:	8b 45 e0             	mov    -0x20(%ebp),%eax
f011bd7c:	ba 00 00 00 00       	mov    $0x0,%edx
f011bd81:	f7 75 e4             	divl   -0x1c(%ebp)
f011bd84:	8b 45 e0             	mov    -0x20(%ebp),%eax
f011bd87:	29 d0                	sub    %edx,%eax
f011bd89:	01 c3                	add    %eax,%ebx
f011bd8b:	c7 45 dc 00 10 00 00 	movl   $0x1000,-0x24(%ebp)
f011bd92:	a0 bc 0e 6c f0       	mov    0xf06c0ebc,%al
f011bd97:	0f b6 c0             	movzbl %al,%eax
f011bd9a:	c1 e0 04             	shl    $0x4,%eax
f011bd9d:	89 c2                	mov    %eax,%edx
f011bd9f:	8b 45 dc             	mov    -0x24(%ebp),%eax
f011bda2:	01 d0                	add    %edx,%eax
f011bda4:	48                   	dec    %eax
f011bda5:	89 45 d8             	mov    %eax,-0x28(%ebp)
f011bda8:	8b 45 d8             	mov    -0x28(%ebp),%eax
f011bdab:	ba 00 00 00 00       	mov    $0x0,%edx
f011bdb0:	f7 75 dc             	divl   -0x24(%ebp)
f011bdb3:	8b 45 d8             	mov    -0x28(%ebp),%eax
f011bdb6:	29 d0                	sub    %edx,%eax
f011bdb8:	01 d8                	add    %ebx,%eax
f011bdba:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f011bdbf:	39 c1                	cmp    %eax,%ecx
f011bdc1:	74 17                	je     f011bdda <test_kmalloc_firstfit1+0x11a>
f011bdc3:	83 ec 04             	sub    $0x4,%esp
f011bdc6:	68 90 ac 13 f0       	push   $0xf013ac90
f011bdcb:	68 e6 02 00 00       	push   $0x2e6
f011bdd0:	68 76 a8 13 f0       	push   $0xf013a876
f011bdd5:	e8 cc 43 fe ff       	call   f01001a6 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011bdda:	e8 ad 7e fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011bddf:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011bde2:	74 17                	je     f011bdfb <test_kmalloc_firstfit1+0x13b>
f011bde4:	83 ec 04             	sub    $0x4,%esp
f011bde7:	68 90 a8 13 f0       	push   $0xf013a890
f011bdec:	68 e7 02 00 00       	push   $0x2e7
f011bdf1:	68 76 a8 13 f0       	push   $0xf013a876
f011bdf6:	e8 ab 43 fe ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: ");
f011bdfb:	e8 be 05 ff ff       	call   f010c3be <sys_calculate_free_frames>
f011be00:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011be03:	29 c2                	sub    %eax,%edx
f011be05:	89 d0                	mov    %edx,%eax
f011be07:	3d 00 01 00 00       	cmp    $0x100,%eax
f011be0c:	74 17                	je     f011be25 <test_kmalloc_firstfit1+0x165>
f011be0e:	83 ec 04             	sub    $0x4,%esp
f011be11:	68 c0 ac 13 f0       	push   $0xf013acc0
f011be16:	68 e8 02 00 00       	push   $0x2e8
f011be1b:	68 76 a8 13 f0       	push   $0xf013a876
f011be20:	e8 81 43 fe ff       	call   f01001a6 <_panic>

		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames() ;
f011be25:	e8 94 05 ff ff       	call   f010c3be <sys_calculate_free_frames>
f011be2a:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011be2d:	e8 5a 7e fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011be32:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[1] = kmalloc(1*Mega-kilo);
f011be35:	83 ec 0c             	sub    $0xc,%esp
f011be38:	68 00 fc 0f 00       	push   $0xffc00
f011be3d:	e8 82 b7 fe ff       	call   f01075c4 <kmalloc>
f011be42:	83 c4 10             	add    $0x10,%esp
f011be45:	89 85 54 fe ff ff    	mov    %eax,-0x1ac(%ebp)
		if ((uint32) ptr_allocations[1] != (ACTUAL_START + 1*Mega)) panic("Wrong start address for the allocated space... ");
f011be4b:	8b 85 54 fe ff ff    	mov    -0x1ac(%ebp),%eax
f011be51:	89 c1                	mov    %eax,%ecx
f011be53:	c7 45 d4 00 10 00 00 	movl   $0x1000,-0x2c(%ebp)
f011be5a:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f011be5d:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011be62:	89 45 d0             	mov    %eax,-0x30(%ebp)
f011be65:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011be68:	ba 00 00 00 00       	mov    $0x0,%edx
f011be6d:	f7 75 d4             	divl   -0x2c(%ebp)
f011be70:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011be73:	29 d0                	sub    %edx,%eax
f011be75:	89 c3                	mov    %eax,%ebx
f011be77:	c7 45 cc 00 10 00 00 	movl   $0x1000,-0x34(%ebp)
f011be7e:	a0 bc 0e 6c f0       	mov    0xf06c0ebc,%al
f011be83:	0f b6 d0             	movzbl %al,%edx
f011be86:	8b 45 cc             	mov    -0x34(%ebp),%eax
f011be89:	01 d0                	add    %edx,%eax
f011be8b:	48                   	dec    %eax
f011be8c:	89 45 c8             	mov    %eax,-0x38(%ebp)
f011be8f:	8b 45 c8             	mov    -0x38(%ebp),%eax
f011be92:	ba 00 00 00 00       	mov    $0x0,%edx
f011be97:	f7 75 cc             	divl   -0x34(%ebp)
f011be9a:	8b 45 c8             	mov    -0x38(%ebp),%eax
f011be9d:	29 d0                	sub    %edx,%eax
f011be9f:	01 c3                	add    %eax,%ebx
f011bea1:	c7 45 c4 00 10 00 00 	movl   $0x1000,-0x3c(%ebp)
f011bea8:	a0 bc 0e 6c f0       	mov    0xf06c0ebc,%al
f011bead:	0f b6 c0             	movzbl %al,%eax
f011beb0:	c1 e0 04             	shl    $0x4,%eax
f011beb3:	89 c2                	mov    %eax,%edx
f011beb5:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f011beb8:	01 d0                	add    %edx,%eax
f011beba:	48                   	dec    %eax
f011bebb:	89 45 c0             	mov    %eax,-0x40(%ebp)
f011bebe:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011bec1:	ba 00 00 00 00       	mov    $0x0,%edx
f011bec6:	f7 75 c4             	divl   -0x3c(%ebp)
f011bec9:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011becc:	29 d0                	sub    %edx,%eax
f011bece:	01 d8                	add    %ebx,%eax
f011bed0:	2d 00 c0 ef 09       	sub    $0x9efc000,%eax
f011bed5:	39 c1                	cmp    %eax,%ecx
f011bed7:	74 17                	je     f011bef0 <test_kmalloc_firstfit1+0x230>
f011bed9:	83 ec 04             	sub    $0x4,%esp
f011bedc:	68 90 ac 13 f0       	push   $0xf013ac90
f011bee1:	68 ee 02 00 00       	push   $0x2ee
f011bee6:	68 76 a8 13 f0       	push   $0xf013a876
f011beeb:	e8 b6 42 fe ff       	call   f01001a6 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011bef0:	e8 97 7d fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011bef5:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011bef8:	74 17                	je     f011bf11 <test_kmalloc_firstfit1+0x251>
f011befa:	83 ec 04             	sub    $0x4,%esp
f011befd:	68 90 a8 13 f0       	push   $0xf013a890
f011bf02:	68 ef 02 00 00       	push   $0x2ef
f011bf07:	68 76 a8 13 f0       	push   $0xf013a876
f011bf0c:	e8 95 42 fe ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: ");
f011bf11:	e8 a8 04 ff ff       	call   f010c3be <sys_calculate_free_frames>
f011bf16:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011bf19:	29 c2                	sub    %eax,%edx
f011bf1b:	89 d0                	mov    %edx,%eax
f011bf1d:	3d 00 01 00 00       	cmp    $0x100,%eax
f011bf22:	74 17                	je     f011bf3b <test_kmalloc_firstfit1+0x27b>
f011bf24:	83 ec 04             	sub    $0x4,%esp
f011bf27:	68 c0 ac 13 f0       	push   $0xf013acc0
f011bf2c:	68 f0 02 00 00       	push   $0x2f0
f011bf31:	68 76 a8 13 f0       	push   $0xf013a876
f011bf36:	e8 6b 42 fe ff       	call   f01001a6 <_panic>

		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames() ;
f011bf3b:	e8 7e 04 ff ff       	call   f010c3be <sys_calculate_free_frames>
f011bf40:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011bf43:	e8 44 7d fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011bf48:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[2] = kmalloc(1*Mega-kilo);
f011bf4b:	83 ec 0c             	sub    $0xc,%esp
f011bf4e:	68 00 fc 0f 00       	push   $0xffc00
f011bf53:	e8 6c b6 fe ff       	call   f01075c4 <kmalloc>
f011bf58:	83 c4 10             	add    $0x10,%esp
f011bf5b:	89 85 58 fe ff ff    	mov    %eax,-0x1a8(%ebp)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 2*Mega)) panic("Wrong start address for the allocated space... ");
f011bf61:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f011bf67:	89 c1                	mov    %eax,%ecx
f011bf69:	c7 45 bc 00 10 00 00 	movl   $0x1000,-0x44(%ebp)
f011bf70:	8b 45 bc             	mov    -0x44(%ebp),%eax
f011bf73:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011bf78:	89 45 b8             	mov    %eax,-0x48(%ebp)
f011bf7b:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011bf7e:	ba 00 00 00 00       	mov    $0x0,%edx
f011bf83:	f7 75 bc             	divl   -0x44(%ebp)
f011bf86:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011bf89:	29 d0                	sub    %edx,%eax
f011bf8b:	89 c3                	mov    %eax,%ebx
f011bf8d:	c7 45 b4 00 10 00 00 	movl   $0x1000,-0x4c(%ebp)
f011bf94:	a0 bc 0e 6c f0       	mov    0xf06c0ebc,%al
f011bf99:	0f b6 d0             	movzbl %al,%edx
f011bf9c:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f011bf9f:	01 d0                	add    %edx,%eax
f011bfa1:	48                   	dec    %eax
f011bfa2:	89 45 b0             	mov    %eax,-0x50(%ebp)
f011bfa5:	8b 45 b0             	mov    -0x50(%ebp),%eax
f011bfa8:	ba 00 00 00 00       	mov    $0x0,%edx
f011bfad:	f7 75 b4             	divl   -0x4c(%ebp)
f011bfb0:	8b 45 b0             	mov    -0x50(%ebp),%eax
f011bfb3:	29 d0                	sub    %edx,%eax
f011bfb5:	01 c3                	add    %eax,%ebx
f011bfb7:	c7 45 ac 00 10 00 00 	movl   $0x1000,-0x54(%ebp)
f011bfbe:	a0 bc 0e 6c f0       	mov    0xf06c0ebc,%al
f011bfc3:	0f b6 c0             	movzbl %al,%eax
f011bfc6:	c1 e0 04             	shl    $0x4,%eax
f011bfc9:	89 c2                	mov    %eax,%edx
f011bfcb:	8b 45 ac             	mov    -0x54(%ebp),%eax
f011bfce:	01 d0                	add    %edx,%eax
f011bfd0:	48                   	dec    %eax
f011bfd1:	89 45 a8             	mov    %eax,-0x58(%ebp)
f011bfd4:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011bfd7:	ba 00 00 00 00       	mov    $0x0,%edx
f011bfdc:	f7 75 ac             	divl   -0x54(%ebp)
f011bfdf:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011bfe2:	29 d0                	sub    %edx,%eax
f011bfe4:	01 d8                	add    %ebx,%eax
f011bfe6:	2d 00 c0 df 09       	sub    $0x9dfc000,%eax
f011bfeb:	39 c1                	cmp    %eax,%ecx
f011bfed:	74 17                	je     f011c006 <test_kmalloc_firstfit1+0x346>
f011bfef:	83 ec 04             	sub    $0x4,%esp
f011bff2:	68 90 ac 13 f0       	push   $0xf013ac90
f011bff7:	68 f6 02 00 00       	push   $0x2f6
f011bffc:	68 76 a8 13 f0       	push   $0xf013a876
f011c001:	e8 a0 41 fe ff       	call   f01001a6 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011c006:	e8 81 7c fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011c00b:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011c00e:	74 17                	je     f011c027 <test_kmalloc_firstfit1+0x367>
f011c010:	83 ec 04             	sub    $0x4,%esp
f011c013:	68 90 a8 13 f0       	push   $0xf013a890
f011c018:	68 f7 02 00 00       	push   $0x2f7
f011c01d:	68 76 a8 13 f0       	push   $0xf013a876
f011c022:	e8 7f 41 fe ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: ");
f011c027:	e8 92 03 ff ff       	call   f010c3be <sys_calculate_free_frames>
f011c02c:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011c02f:	29 c2                	sub    %eax,%edx
f011c031:	89 d0                	mov    %edx,%eax
f011c033:	3d 00 01 00 00       	cmp    $0x100,%eax
f011c038:	74 17                	je     f011c051 <test_kmalloc_firstfit1+0x391>
f011c03a:	83 ec 04             	sub    $0x4,%esp
f011c03d:	68 c0 ac 13 f0       	push   $0xf013acc0
f011c042:	68 f8 02 00 00       	push   $0x2f8
f011c047:	68 76 a8 13 f0       	push   $0xf013a876
f011c04c:	e8 55 41 fe ff       	call   f01001a6 <_panic>

		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames() ;
f011c051:	e8 68 03 ff ff       	call   f010c3be <sys_calculate_free_frames>
f011c056:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011c059:	e8 2e 7c fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011c05e:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[3] = kmalloc(1*Mega-kilo);
f011c061:	83 ec 0c             	sub    $0xc,%esp
f011c064:	68 00 fc 0f 00       	push   $0xffc00
f011c069:	e8 56 b5 fe ff       	call   f01075c4 <kmalloc>
f011c06e:	83 c4 10             	add    $0x10,%esp
f011c071:	89 85 5c fe ff ff    	mov    %eax,-0x1a4(%ebp)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 3*Mega)) panic("Wrong start address for the allocated space... ");
f011c077:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f011c07d:	89 c1                	mov    %eax,%ecx
f011c07f:	c7 45 a4 00 10 00 00 	movl   $0x1000,-0x5c(%ebp)
f011c086:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f011c089:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011c08e:	89 45 a0             	mov    %eax,-0x60(%ebp)
f011c091:	8b 45 a0             	mov    -0x60(%ebp),%eax
f011c094:	ba 00 00 00 00       	mov    $0x0,%edx
f011c099:	f7 75 a4             	divl   -0x5c(%ebp)
f011c09c:	8b 45 a0             	mov    -0x60(%ebp),%eax
f011c09f:	29 d0                	sub    %edx,%eax
f011c0a1:	89 c3                	mov    %eax,%ebx
f011c0a3:	c7 45 9c 00 10 00 00 	movl   $0x1000,-0x64(%ebp)
f011c0aa:	a0 bc 0e 6c f0       	mov    0xf06c0ebc,%al
f011c0af:	0f b6 d0             	movzbl %al,%edx
f011c0b2:	8b 45 9c             	mov    -0x64(%ebp),%eax
f011c0b5:	01 d0                	add    %edx,%eax
f011c0b7:	48                   	dec    %eax
f011c0b8:	89 45 98             	mov    %eax,-0x68(%ebp)
f011c0bb:	8b 45 98             	mov    -0x68(%ebp),%eax
f011c0be:	ba 00 00 00 00       	mov    $0x0,%edx
f011c0c3:	f7 75 9c             	divl   -0x64(%ebp)
f011c0c6:	8b 45 98             	mov    -0x68(%ebp),%eax
f011c0c9:	29 d0                	sub    %edx,%eax
f011c0cb:	01 c3                	add    %eax,%ebx
f011c0cd:	c7 45 94 00 10 00 00 	movl   $0x1000,-0x6c(%ebp)
f011c0d4:	a0 bc 0e 6c f0       	mov    0xf06c0ebc,%al
f011c0d9:	0f b6 c0             	movzbl %al,%eax
f011c0dc:	c1 e0 04             	shl    $0x4,%eax
f011c0df:	89 c2                	mov    %eax,%edx
f011c0e1:	8b 45 94             	mov    -0x6c(%ebp),%eax
f011c0e4:	01 d0                	add    %edx,%eax
f011c0e6:	48                   	dec    %eax
f011c0e7:	89 45 90             	mov    %eax,-0x70(%ebp)
f011c0ea:	8b 45 90             	mov    -0x70(%ebp),%eax
f011c0ed:	ba 00 00 00 00       	mov    $0x0,%edx
f011c0f2:	f7 75 94             	divl   -0x6c(%ebp)
f011c0f5:	8b 45 90             	mov    -0x70(%ebp),%eax
f011c0f8:	29 d0                	sub    %edx,%eax
f011c0fa:	01 d8                	add    %ebx,%eax
f011c0fc:	2d 00 c0 cf 09       	sub    $0x9cfc000,%eax
f011c101:	39 c1                	cmp    %eax,%ecx
f011c103:	74 17                	je     f011c11c <test_kmalloc_firstfit1+0x45c>
f011c105:	83 ec 04             	sub    $0x4,%esp
f011c108:	68 90 ac 13 f0       	push   $0xf013ac90
f011c10d:	68 fe 02 00 00       	push   $0x2fe
f011c112:	68 76 a8 13 f0       	push   $0xf013a876
f011c117:	e8 8a 40 fe ff       	call   f01001a6 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011c11c:	e8 6b 7b fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011c121:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011c124:	74 17                	je     f011c13d <test_kmalloc_firstfit1+0x47d>
f011c126:	83 ec 04             	sub    $0x4,%esp
f011c129:	68 90 a8 13 f0       	push   $0xf013a890
f011c12e:	68 ff 02 00 00       	push   $0x2ff
f011c133:	68 76 a8 13 f0       	push   $0xf013a876
f011c138:	e8 69 40 fe ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: ");
f011c13d:	e8 7c 02 ff ff       	call   f010c3be <sys_calculate_free_frames>
f011c142:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011c145:	29 c2                	sub    %eax,%edx
f011c147:	89 d0                	mov    %edx,%eax
f011c149:	3d 00 01 00 00       	cmp    $0x100,%eax
f011c14e:	74 17                	je     f011c167 <test_kmalloc_firstfit1+0x4a7>
f011c150:	83 ec 04             	sub    $0x4,%esp
f011c153:	68 c0 ac 13 f0       	push   $0xf013acc0
f011c158:	68 00 03 00 00       	push   $0x300
f011c15d:	68 76 a8 13 f0       	push   $0xf013a876
f011c162:	e8 3f 40 fe ff       	call   f01001a6 <_panic>

		//Allocate 2 MB
		freeFrames = sys_calculate_free_frames() ;
f011c167:	e8 52 02 ff ff       	call   f010c3be <sys_calculate_free_frames>
f011c16c:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011c16f:	e8 18 7b fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011c174:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[4] = kmalloc(2*Mega-kilo);
f011c177:	83 ec 0c             	sub    $0xc,%esp
f011c17a:	68 00 fc 1f 00       	push   $0x1ffc00
f011c17f:	e8 40 b4 fe ff       	call   f01075c4 <kmalloc>
f011c184:	83 c4 10             	add    $0x10,%esp
f011c187:	89 85 60 fe ff ff    	mov    %eax,-0x1a0(%ebp)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... ");
f011c18d:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f011c193:	89 c1                	mov    %eax,%ecx
f011c195:	c7 45 8c 00 10 00 00 	movl   $0x1000,-0x74(%ebp)
f011c19c:	8b 45 8c             	mov    -0x74(%ebp),%eax
f011c19f:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011c1a4:	89 45 88             	mov    %eax,-0x78(%ebp)
f011c1a7:	8b 45 88             	mov    -0x78(%ebp),%eax
f011c1aa:	ba 00 00 00 00       	mov    $0x0,%edx
f011c1af:	f7 75 8c             	divl   -0x74(%ebp)
f011c1b2:	8b 45 88             	mov    -0x78(%ebp),%eax
f011c1b5:	29 d0                	sub    %edx,%eax
f011c1b7:	89 c3                	mov    %eax,%ebx
f011c1b9:	c7 45 84 00 10 00 00 	movl   $0x1000,-0x7c(%ebp)
f011c1c0:	a0 bc 0e 6c f0       	mov    0xf06c0ebc,%al
f011c1c5:	0f b6 d0             	movzbl %al,%edx
f011c1c8:	8b 45 84             	mov    -0x7c(%ebp),%eax
f011c1cb:	01 d0                	add    %edx,%eax
f011c1cd:	48                   	dec    %eax
f011c1ce:	89 45 80             	mov    %eax,-0x80(%ebp)
f011c1d1:	8b 45 80             	mov    -0x80(%ebp),%eax
f011c1d4:	ba 00 00 00 00       	mov    $0x0,%edx
f011c1d9:	f7 75 84             	divl   -0x7c(%ebp)
f011c1dc:	8b 45 80             	mov    -0x80(%ebp),%eax
f011c1df:	29 d0                	sub    %edx,%eax
f011c1e1:	01 c3                	add    %eax,%ebx
f011c1e3:	c7 85 7c ff ff ff 00 	movl   $0x1000,-0x84(%ebp)
f011c1ea:	10 00 00 
f011c1ed:	a0 bc 0e 6c f0       	mov    0xf06c0ebc,%al
f011c1f2:	0f b6 c0             	movzbl %al,%eax
f011c1f5:	c1 e0 04             	shl    $0x4,%eax
f011c1f8:	89 c2                	mov    %eax,%edx
f011c1fa:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f011c200:	01 d0                	add    %edx,%eax
f011c202:	48                   	dec    %eax
f011c203:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)
f011c209:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f011c20f:	ba 00 00 00 00       	mov    $0x0,%edx
f011c214:	f7 b5 7c ff ff ff    	divl   -0x84(%ebp)
f011c21a:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f011c220:	29 d0                	sub    %edx,%eax
f011c222:	01 d8                	add    %ebx,%eax
f011c224:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
f011c229:	39 c1                	cmp    %eax,%ecx
f011c22b:	74 17                	je     f011c244 <test_kmalloc_firstfit1+0x584>
f011c22d:	83 ec 04             	sub    $0x4,%esp
f011c230:	68 90 ac 13 f0       	push   $0xf013ac90
f011c235:	68 06 03 00 00       	push   $0x306
f011c23a:	68 76 a8 13 f0       	push   $0xf013a876
f011c23f:	e8 62 3f fe ff       	call   f01001a6 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011c244:	e8 43 7a fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011c249:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011c24c:	74 17                	je     f011c265 <test_kmalloc_firstfit1+0x5a5>
f011c24e:	83 ec 04             	sub    $0x4,%esp
f011c251:	68 90 a8 13 f0       	push   $0xf013a890
f011c256:	68 07 03 00 00       	push   $0x307
f011c25b:	68 76 a8 13 f0       	push   $0xf013a876
f011c260:	e8 41 3f fe ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: ");
f011c265:	e8 54 01 ff ff       	call   f010c3be <sys_calculate_free_frames>
f011c26a:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011c26d:	29 c2                	sub    %eax,%edx
f011c26f:	89 d0                	mov    %edx,%eax
f011c271:	3d 00 02 00 00       	cmp    $0x200,%eax
f011c276:	74 17                	je     f011c28f <test_kmalloc_firstfit1+0x5cf>
f011c278:	83 ec 04             	sub    $0x4,%esp
f011c27b:	68 c0 ac 13 f0       	push   $0xf013acc0
f011c280:	68 08 03 00 00       	push   $0x308
f011c285:	68 76 a8 13 f0       	push   $0xf013a876
f011c28a:	e8 17 3f fe ff       	call   f01001a6 <_panic>

		//Allocate 2 MB
		freeFrames = sys_calculate_free_frames() ;
f011c28f:	e8 2a 01 ff ff       	call   f010c3be <sys_calculate_free_frames>
f011c294:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011c297:	e8 f0 79 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011c29c:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[5] = kmalloc(2*Mega-kilo);
f011c29f:	83 ec 0c             	sub    $0xc,%esp
f011c2a2:	68 00 fc 1f 00       	push   $0x1ffc00
f011c2a7:	e8 18 b3 fe ff       	call   f01075c4 <kmalloc>
f011c2ac:	83 c4 10             	add    $0x10,%esp
f011c2af:	89 85 64 fe ff ff    	mov    %eax,-0x19c(%ebp)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 6*Mega)) panic("Wrong start address for the allocated space... ");
f011c2b5:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f011c2bb:	89 c1                	mov    %eax,%ecx
f011c2bd:	c7 85 74 ff ff ff 00 	movl   $0x1000,-0x8c(%ebp)
f011c2c4:	10 00 00 
f011c2c7:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f011c2cd:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011c2d2:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
f011c2d8:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f011c2de:	ba 00 00 00 00       	mov    $0x0,%edx
f011c2e3:	f7 b5 74 ff ff ff    	divl   -0x8c(%ebp)
f011c2e9:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f011c2ef:	29 d0                	sub    %edx,%eax
f011c2f1:	89 c3                	mov    %eax,%ebx
f011c2f3:	c7 85 6c ff ff ff 00 	movl   $0x1000,-0x94(%ebp)
f011c2fa:	10 00 00 
f011c2fd:	a0 bc 0e 6c f0       	mov    0xf06c0ebc,%al
f011c302:	0f b6 d0             	movzbl %al,%edx
f011c305:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f011c30b:	01 d0                	add    %edx,%eax
f011c30d:	48                   	dec    %eax
f011c30e:	89 85 68 ff ff ff    	mov    %eax,-0x98(%ebp)
f011c314:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f011c31a:	ba 00 00 00 00       	mov    $0x0,%edx
f011c31f:	f7 b5 6c ff ff ff    	divl   -0x94(%ebp)
f011c325:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f011c32b:	29 d0                	sub    %edx,%eax
f011c32d:	01 c3                	add    %eax,%ebx
f011c32f:	c7 85 64 ff ff ff 00 	movl   $0x1000,-0x9c(%ebp)
f011c336:	10 00 00 
f011c339:	a0 bc 0e 6c f0       	mov    0xf06c0ebc,%al
f011c33e:	0f b6 c0             	movzbl %al,%eax
f011c341:	c1 e0 04             	shl    $0x4,%eax
f011c344:	89 c2                	mov    %eax,%edx
f011c346:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f011c34c:	01 d0                	add    %edx,%eax
f011c34e:	48                   	dec    %eax
f011c34f:	89 85 60 ff ff ff    	mov    %eax,-0xa0(%ebp)
f011c355:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f011c35b:	ba 00 00 00 00       	mov    $0x0,%edx
f011c360:	f7 b5 64 ff ff ff    	divl   -0x9c(%ebp)
f011c366:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f011c36c:	29 d0                	sub    %edx,%eax
f011c36e:	01 d8                	add    %ebx,%eax
f011c370:	2d 00 c0 9f 09       	sub    $0x99fc000,%eax
f011c375:	39 c1                	cmp    %eax,%ecx
f011c377:	74 17                	je     f011c390 <test_kmalloc_firstfit1+0x6d0>
f011c379:	83 ec 04             	sub    $0x4,%esp
f011c37c:	68 90 ac 13 f0       	push   $0xf013ac90
f011c381:	68 0e 03 00 00       	push   $0x30e
f011c386:	68 76 a8 13 f0       	push   $0xf013a876
f011c38b:	e8 16 3e fe ff       	call   f01001a6 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011c390:	e8 f7 78 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011c395:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011c398:	74 17                	je     f011c3b1 <test_kmalloc_firstfit1+0x6f1>
f011c39a:	83 ec 04             	sub    $0x4,%esp
f011c39d:	68 90 a8 13 f0       	push   $0xf013a890
f011c3a2:	68 0f 03 00 00       	push   $0x30f
f011c3a7:	68 76 a8 13 f0       	push   $0xf013a876
f011c3ac:	e8 f5 3d fe ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: ");
f011c3b1:	e8 08 00 ff ff       	call   f010c3be <sys_calculate_free_frames>
f011c3b6:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011c3b9:	29 c2                	sub    %eax,%edx
f011c3bb:	89 d0                	mov    %edx,%eax
f011c3bd:	3d 00 02 00 00       	cmp    $0x200,%eax
f011c3c2:	74 17                	je     f011c3db <test_kmalloc_firstfit1+0x71b>
f011c3c4:	83 ec 04             	sub    $0x4,%esp
f011c3c7:	68 c0 ac 13 f0       	push   $0xf013acc0
f011c3cc:	68 10 03 00 00       	push   $0x310
f011c3d1:	68 76 a8 13 f0       	push   $0xf013a876
f011c3d6:	e8 cb 3d fe ff       	call   f01001a6 <_panic>

		//Allocate 3 MB
		freeFrames = sys_calculate_free_frames() ;
f011c3db:	e8 de ff fe ff       	call   f010c3be <sys_calculate_free_frames>
f011c3e0:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011c3e3:	e8 a4 78 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011c3e8:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[6] = kmalloc(3*Mega-kilo);
f011c3eb:	83 ec 0c             	sub    $0xc,%esp
f011c3ee:	68 00 fc 2f 00       	push   $0x2ffc00
f011c3f3:	e8 cc b1 fe ff       	call   f01075c4 <kmalloc>
f011c3f8:	83 c4 10             	add    $0x10,%esp
f011c3fb:	89 85 68 fe ff ff    	mov    %eax,-0x198(%ebp)
		if ((uint32) ptr_allocations[6] !=  (ACTUAL_START + 8*Mega)) panic("Wrong start address for the allocated space... ");
f011c401:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f011c407:	89 c1                	mov    %eax,%ecx
f011c409:	c7 85 5c ff ff ff 00 	movl   $0x1000,-0xa4(%ebp)
f011c410:	10 00 00 
f011c413:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f011c419:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011c41e:	89 85 58 ff ff ff    	mov    %eax,-0xa8(%ebp)
f011c424:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f011c42a:	ba 00 00 00 00       	mov    $0x0,%edx
f011c42f:	f7 b5 5c ff ff ff    	divl   -0xa4(%ebp)
f011c435:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f011c43b:	29 d0                	sub    %edx,%eax
f011c43d:	89 c3                	mov    %eax,%ebx
f011c43f:	c7 85 54 ff ff ff 00 	movl   $0x1000,-0xac(%ebp)
f011c446:	10 00 00 
f011c449:	a0 bc 0e 6c f0       	mov    0xf06c0ebc,%al
f011c44e:	0f b6 d0             	movzbl %al,%edx
f011c451:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f011c457:	01 d0                	add    %edx,%eax
f011c459:	48                   	dec    %eax
f011c45a:	89 85 50 ff ff ff    	mov    %eax,-0xb0(%ebp)
f011c460:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f011c466:	ba 00 00 00 00       	mov    $0x0,%edx
f011c46b:	f7 b5 54 ff ff ff    	divl   -0xac(%ebp)
f011c471:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f011c477:	29 d0                	sub    %edx,%eax
f011c479:	01 c3                	add    %eax,%ebx
f011c47b:	c7 85 4c ff ff ff 00 	movl   $0x1000,-0xb4(%ebp)
f011c482:	10 00 00 
f011c485:	a0 bc 0e 6c f0       	mov    0xf06c0ebc,%al
f011c48a:	0f b6 c0             	movzbl %al,%eax
f011c48d:	c1 e0 04             	shl    $0x4,%eax
f011c490:	89 c2                	mov    %eax,%edx
f011c492:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f011c498:	01 d0                	add    %edx,%eax
f011c49a:	48                   	dec    %eax
f011c49b:	89 85 48 ff ff ff    	mov    %eax,-0xb8(%ebp)
f011c4a1:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f011c4a7:	ba 00 00 00 00       	mov    $0x0,%edx
f011c4ac:	f7 b5 4c ff ff ff    	divl   -0xb4(%ebp)
f011c4b2:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f011c4b8:	29 d0                	sub    %edx,%eax
f011c4ba:	01 d8                	add    %ebx,%eax
f011c4bc:	2d 00 c0 7f 09       	sub    $0x97fc000,%eax
f011c4c1:	39 c1                	cmp    %eax,%ecx
f011c4c3:	74 17                	je     f011c4dc <test_kmalloc_firstfit1+0x81c>
f011c4c5:	83 ec 04             	sub    $0x4,%esp
f011c4c8:	68 90 ac 13 f0       	push   $0xf013ac90
f011c4cd:	68 16 03 00 00       	push   $0x316
f011c4d2:	68 76 a8 13 f0       	push   $0xf013a876
f011c4d7:	e8 ca 3c fe ff       	call   f01001a6 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011c4dc:	e8 ab 77 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011c4e1:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011c4e4:	74 17                	je     f011c4fd <test_kmalloc_firstfit1+0x83d>
f011c4e6:	83 ec 04             	sub    $0x4,%esp
f011c4e9:	68 90 a8 13 f0       	push   $0xf013a890
f011c4ee:	68 17 03 00 00       	push   $0x317
f011c4f3:	68 76 a8 13 f0       	push   $0xf013a876
f011c4f8:	e8 a9 3c fe ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: ");
f011c4fd:	e8 bc fe fe ff       	call   f010c3be <sys_calculate_free_frames>
f011c502:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011c505:	29 c2                	sub    %eax,%edx
f011c507:	89 d0                	mov    %edx,%eax
f011c509:	3d 00 03 00 00       	cmp    $0x300,%eax
f011c50e:	74 17                	je     f011c527 <test_kmalloc_firstfit1+0x867>
f011c510:	83 ec 04             	sub    $0x4,%esp
f011c513:	68 c0 ac 13 f0       	push   $0xf013acc0
f011c518:	68 18 03 00 00       	push   $0x318
f011c51d:	68 76 a8 13 f0       	push   $0xf013a876
f011c522:	e8 7f 3c fe ff       	call   f01001a6 <_panic>

		//Allocate 3 MB
		freeFrames = sys_calculate_free_frames() ;
f011c527:	e8 92 fe fe ff       	call   f010c3be <sys_calculate_free_frames>
f011c52c:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011c52f:	e8 58 77 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011c534:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[7] = kmalloc(3*Mega-kilo);
f011c537:	83 ec 0c             	sub    $0xc,%esp
f011c53a:	68 00 fc 2f 00       	push   $0x2ffc00
f011c53f:	e8 80 b0 fe ff       	call   f01075c4 <kmalloc>
f011c544:	83 c4 10             	add    $0x10,%esp
f011c547:	89 85 6c fe ff ff    	mov    %eax,-0x194(%ebp)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 11*Mega)) panic("Wrong start address for the allocated space... ");
f011c54d:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f011c553:	89 c1                	mov    %eax,%ecx
f011c555:	c7 85 44 ff ff ff 00 	movl   $0x1000,-0xbc(%ebp)
f011c55c:	10 00 00 
f011c55f:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f011c565:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011c56a:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%ebp)
f011c570:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f011c576:	ba 00 00 00 00       	mov    $0x0,%edx
f011c57b:	f7 b5 44 ff ff ff    	divl   -0xbc(%ebp)
f011c581:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f011c587:	29 d0                	sub    %edx,%eax
f011c589:	89 c3                	mov    %eax,%ebx
f011c58b:	c7 85 3c ff ff ff 00 	movl   $0x1000,-0xc4(%ebp)
f011c592:	10 00 00 
f011c595:	a0 bc 0e 6c f0       	mov    0xf06c0ebc,%al
f011c59a:	0f b6 d0             	movzbl %al,%edx
f011c59d:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f011c5a3:	01 d0                	add    %edx,%eax
f011c5a5:	48                   	dec    %eax
f011c5a6:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
f011c5ac:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f011c5b2:	ba 00 00 00 00       	mov    $0x0,%edx
f011c5b7:	f7 b5 3c ff ff ff    	divl   -0xc4(%ebp)
f011c5bd:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f011c5c3:	29 d0                	sub    %edx,%eax
f011c5c5:	01 c3                	add    %eax,%ebx
f011c5c7:	c7 85 34 ff ff ff 00 	movl   $0x1000,-0xcc(%ebp)
f011c5ce:	10 00 00 
f011c5d1:	a0 bc 0e 6c f0       	mov    0xf06c0ebc,%al
f011c5d6:	0f b6 c0             	movzbl %al,%eax
f011c5d9:	c1 e0 04             	shl    $0x4,%eax
f011c5dc:	89 c2                	mov    %eax,%edx
f011c5de:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f011c5e4:	01 d0                	add    %edx,%eax
f011c5e6:	48                   	dec    %eax
f011c5e7:	89 85 30 ff ff ff    	mov    %eax,-0xd0(%ebp)
f011c5ed:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f011c5f3:	ba 00 00 00 00       	mov    $0x0,%edx
f011c5f8:	f7 b5 34 ff ff ff    	divl   -0xcc(%ebp)
f011c5fe:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f011c604:	29 d0                	sub    %edx,%eax
f011c606:	01 d8                	add    %ebx,%eax
f011c608:	2d 00 c0 4f 09       	sub    $0x94fc000,%eax
f011c60d:	39 c1                	cmp    %eax,%ecx
f011c60f:	74 17                	je     f011c628 <test_kmalloc_firstfit1+0x968>
f011c611:	83 ec 04             	sub    $0x4,%esp
f011c614:	68 90 ac 13 f0       	push   $0xf013ac90
f011c619:	68 1e 03 00 00       	push   $0x31e
f011c61e:	68 76 a8 13 f0       	push   $0xf013a876
f011c623:	e8 7e 3b fe ff       	call   f01001a6 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011c628:	e8 5f 76 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011c62d:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011c630:	74 17                	je     f011c649 <test_kmalloc_firstfit1+0x989>
f011c632:	83 ec 04             	sub    $0x4,%esp
f011c635:	68 90 a8 13 f0       	push   $0xf013a890
f011c63a:	68 1f 03 00 00       	push   $0x31f
f011c63f:	68 76 a8 13 f0       	push   $0xf013a876
f011c644:	e8 5d 3b fe ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: ");
f011c649:	e8 70 fd fe ff       	call   f010c3be <sys_calculate_free_frames>
f011c64e:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011c651:	29 c2                	sub    %eax,%edx
f011c653:	89 d0                	mov    %edx,%eax
f011c655:	3d 00 03 00 00       	cmp    $0x300,%eax
f011c65a:	74 17                	je     f011c673 <test_kmalloc_firstfit1+0x9b3>
f011c65c:	83 ec 04             	sub    $0x4,%esp
f011c65f:	68 c0 ac 13 f0       	push   $0xf013acc0
f011c664:	68 20 03 00 00       	push   $0x320
f011c669:	68 76 a8 13 f0       	push   $0xf013a876
f011c66e:	e8 33 3b fe ff       	call   f01001a6 <_panic>
	}

	//[2] Free some to create holes
	{
		//1 MB Hole
		freeFrames = sys_calculate_free_frames() ;
f011c673:	e8 46 fd fe ff       	call   f010c3be <sys_calculate_free_frames>
f011c678:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011c67b:	e8 0c 76 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011c680:	89 45 f0             	mov    %eax,-0x10(%ebp)
		kfree(ptr_allocations[1]);
f011c683:	8b 85 54 fe ff ff    	mov    -0x1ac(%ebp),%eax
f011c689:	83 ec 0c             	sub    $0xc,%esp
f011c68c:	50                   	push   %eax
f011c68d:	e8 4c af fe ff       	call   f01075de <kfree>
f011c692:	83 c4 10             	add    $0x10,%esp
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011c695:	e8 f2 75 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011c69a:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011c69d:	74 17                	je     f011c6b6 <test_kmalloc_firstfit1+0x9f6>
f011c69f:	83 ec 04             	sub    $0x4,%esp
f011c6a2:	68 90 a8 13 f0       	push   $0xf013a890
f011c6a7:	68 29 03 00 00       	push   $0x329
f011c6ac:	68 76 a8 13 f0       	push   $0xf013a876
f011c6b1:	e8 f0 3a fe ff       	call   f01001a6 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 256) panic("Wrong free: ");
f011c6b6:	e8 03 fd fe ff       	call   f010c3be <sys_calculate_free_frames>
f011c6bb:	2b 45 f4             	sub    -0xc(%ebp),%eax
f011c6be:	3d 00 01 00 00       	cmp    $0x100,%eax
f011c6c3:	74 17                	je     f011c6dc <test_kmalloc_firstfit1+0xa1c>
f011c6c5:	83 ec 04             	sub    $0x4,%esp
f011c6c8:	68 d3 ac 13 f0       	push   $0xf013acd3
f011c6cd:	68 2a 03 00 00       	push   $0x32a
f011c6d2:	68 76 a8 13 f0       	push   $0xf013a876
f011c6d7:	e8 ca 3a fe ff       	call   f01001a6 <_panic>

		//2 MB Hole
		freeFrames = sys_calculate_free_frames() ;
f011c6dc:	e8 dd fc fe ff       	call   f010c3be <sys_calculate_free_frames>
f011c6e1:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011c6e4:	e8 a3 75 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011c6e9:	89 45 f0             	mov    %eax,-0x10(%ebp)
		kfree(ptr_allocations[4]);
f011c6ec:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f011c6f2:	83 ec 0c             	sub    $0xc,%esp
f011c6f5:	50                   	push   %eax
f011c6f6:	e8 e3 ae fe ff       	call   f01075de <kfree>
f011c6fb:	83 c4 10             	add    $0x10,%esp
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011c6fe:	e8 89 75 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011c703:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011c706:	74 17                	je     f011c71f <test_kmalloc_firstfit1+0xa5f>
f011c708:	83 ec 04             	sub    $0x4,%esp
f011c70b:	68 90 a8 13 f0       	push   $0xf013a890
f011c710:	68 30 03 00 00       	push   $0x330
f011c715:	68 76 a8 13 f0       	push   $0xf013a876
f011c71a:	e8 87 3a fe ff       	call   f01001a6 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512) panic("Wrong free: ");
f011c71f:	e8 9a fc fe ff       	call   f010c3be <sys_calculate_free_frames>
f011c724:	2b 45 f4             	sub    -0xc(%ebp),%eax
f011c727:	3d 00 02 00 00       	cmp    $0x200,%eax
f011c72c:	74 17                	je     f011c745 <test_kmalloc_firstfit1+0xa85>
f011c72e:	83 ec 04             	sub    $0x4,%esp
f011c731:	68 d3 ac 13 f0       	push   $0xf013acd3
f011c736:	68 31 03 00 00       	push   $0x331
f011c73b:	68 76 a8 13 f0       	push   $0xf013a876
f011c740:	e8 61 3a fe ff       	call   f01001a6 <_panic>

		//3 MB Hole
		freeFrames = sys_calculate_free_frames() ;
f011c745:	e8 74 fc fe ff       	call   f010c3be <sys_calculate_free_frames>
f011c74a:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011c74d:	e8 3a 75 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011c752:	89 45 f0             	mov    %eax,-0x10(%ebp)
		kfree(ptr_allocations[6]);
f011c755:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f011c75b:	83 ec 0c             	sub    $0xc,%esp
f011c75e:	50                   	push   %eax
f011c75f:	e8 7a ae fe ff       	call   f01075de <kfree>
f011c764:	83 c4 10             	add    $0x10,%esp
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011c767:	e8 20 75 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011c76c:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011c76f:	74 17                	je     f011c788 <test_kmalloc_firstfit1+0xac8>
f011c771:	83 ec 04             	sub    $0x4,%esp
f011c774:	68 90 a8 13 f0       	push   $0xf013a890
f011c779:	68 37 03 00 00       	push   $0x337
f011c77e:	68 76 a8 13 f0       	push   $0xf013a876
f011c783:	e8 1e 3a fe ff       	call   f01001a6 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 768) panic("Wrong free: ");
f011c788:	e8 31 fc fe ff       	call   f010c3be <sys_calculate_free_frames>
f011c78d:	2b 45 f4             	sub    -0xc(%ebp),%eax
f011c790:	3d 00 03 00 00       	cmp    $0x300,%eax
f011c795:	74 17                	je     f011c7ae <test_kmalloc_firstfit1+0xaee>
f011c797:	83 ec 04             	sub    $0x4,%esp
f011c79a:	68 d3 ac 13 f0       	push   $0xf013acd3
f011c79f:	68 38 03 00 00       	push   $0x338
f011c7a4:	68 76 a8 13 f0       	push   $0xf013a876
f011c7a9:	e8 f8 39 fe ff       	call   f01001a6 <_panic>
	}

	//[3] Allocate again [test first fit]
	{
		//Allocate 512 KB - should be placed in 1st hole
		freeFrames = sys_calculate_free_frames() ;
f011c7ae:	e8 0b fc fe ff       	call   f010c3be <sys_calculate_free_frames>
f011c7b3:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011c7b6:	e8 d1 74 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011c7bb:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[8] = kmalloc(512*kilo - kilo);
f011c7be:	83 ec 0c             	sub    $0xc,%esp
f011c7c1:	68 00 fc 07 00       	push   $0x7fc00
f011c7c6:	e8 f9 ad fe ff       	call   f01075c4 <kmalloc>
f011c7cb:	83 c4 10             	add    $0x10,%esp
f011c7ce:	89 85 70 fe ff ff    	mov    %eax,-0x190(%ebp)
		if ((uint32) ptr_allocations[8] != (ACTUAL_START + 1*Mega)) panic("Wrong start address for the allocated space... ");
f011c7d4:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f011c7da:	89 c1                	mov    %eax,%ecx
f011c7dc:	c7 85 2c ff ff ff 00 	movl   $0x1000,-0xd4(%ebp)
f011c7e3:	10 00 00 
f011c7e6:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f011c7ec:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011c7f1:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%ebp)
f011c7f7:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f011c7fd:	ba 00 00 00 00       	mov    $0x0,%edx
f011c802:	f7 b5 2c ff ff ff    	divl   -0xd4(%ebp)
f011c808:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f011c80e:	29 d0                	sub    %edx,%eax
f011c810:	89 c3                	mov    %eax,%ebx
f011c812:	c7 85 24 ff ff ff 00 	movl   $0x1000,-0xdc(%ebp)
f011c819:	10 00 00 
f011c81c:	a0 bc 0e 6c f0       	mov    0xf06c0ebc,%al
f011c821:	0f b6 d0             	movzbl %al,%edx
f011c824:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011c82a:	01 d0                	add    %edx,%eax
f011c82c:	48                   	dec    %eax
f011c82d:	89 85 20 ff ff ff    	mov    %eax,-0xe0(%ebp)
f011c833:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f011c839:	ba 00 00 00 00       	mov    $0x0,%edx
f011c83e:	f7 b5 24 ff ff ff    	divl   -0xdc(%ebp)
f011c844:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f011c84a:	29 d0                	sub    %edx,%eax
f011c84c:	01 c3                	add    %eax,%ebx
f011c84e:	c7 85 1c ff ff ff 00 	movl   $0x1000,-0xe4(%ebp)
f011c855:	10 00 00 
f011c858:	a0 bc 0e 6c f0       	mov    0xf06c0ebc,%al
f011c85d:	0f b6 c0             	movzbl %al,%eax
f011c860:	c1 e0 04             	shl    $0x4,%eax
f011c863:	89 c2                	mov    %eax,%edx
f011c865:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f011c86b:	01 d0                	add    %edx,%eax
f011c86d:	48                   	dec    %eax
f011c86e:	89 85 18 ff ff ff    	mov    %eax,-0xe8(%ebp)
f011c874:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f011c87a:	ba 00 00 00 00       	mov    $0x0,%edx
f011c87f:	f7 b5 1c ff ff ff    	divl   -0xe4(%ebp)
f011c885:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f011c88b:	29 d0                	sub    %edx,%eax
f011c88d:	01 d8                	add    %ebx,%eax
f011c88f:	2d 00 c0 ef 09       	sub    $0x9efc000,%eax
f011c894:	39 c1                	cmp    %eax,%ecx
f011c896:	74 17                	je     f011c8af <test_kmalloc_firstfit1+0xbef>
f011c898:	83 ec 04             	sub    $0x4,%esp
f011c89b:	68 90 ac 13 f0       	push   $0xf013ac90
f011c8a0:	68 41 03 00 00       	push   $0x341
f011c8a5:	68 76 a8 13 f0       	push   $0xf013a876
f011c8aa:	e8 f7 38 fe ff       	call   f01001a6 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011c8af:	e8 d8 73 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011c8b4:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011c8b7:	74 17                	je     f011c8d0 <test_kmalloc_firstfit1+0xc10>
f011c8b9:	83 ec 04             	sub    $0x4,%esp
f011c8bc:	68 90 a8 13 f0       	push   $0xf013a890
f011c8c1:	68 42 03 00 00       	push   $0x342
f011c8c6:	68 76 a8 13 f0       	push   $0xf013a876
f011c8cb:	e8 d6 38 fe ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 128) panic("Wrong allocation: ");
f011c8d0:	e8 e9 fa fe ff       	call   f010c3be <sys_calculate_free_frames>
f011c8d5:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011c8d8:	29 c2                	sub    %eax,%edx
f011c8da:	89 d0                	mov    %edx,%eax
f011c8dc:	3d 80 00 00 00       	cmp    $0x80,%eax
f011c8e1:	74 17                	je     f011c8fa <test_kmalloc_firstfit1+0xc3a>
f011c8e3:	83 ec 04             	sub    $0x4,%esp
f011c8e6:	68 c0 ac 13 f0       	push   $0xf013acc0
f011c8eb:	68 43 03 00 00       	push   $0x343
f011c8f0:	68 76 a8 13 f0       	push   $0xf013a876
f011c8f5:	e8 ac 38 fe ff       	call   f01001a6 <_panic>

		//Allocate 1 MB - should be placed in 2nd hole
		freeFrames = sys_calculate_free_frames() ;
f011c8fa:	e8 bf fa fe ff       	call   f010c3be <sys_calculate_free_frames>
f011c8ff:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011c902:	e8 85 73 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011c907:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[9] = kmalloc(1*Mega - kilo);
f011c90a:	83 ec 0c             	sub    $0xc,%esp
f011c90d:	68 00 fc 0f 00       	push   $0xffc00
f011c912:	e8 ad ac fe ff       	call   f01075c4 <kmalloc>
f011c917:	83 c4 10             	add    $0x10,%esp
f011c91a:	89 85 74 fe ff ff    	mov    %eax,-0x18c(%ebp)
		if ((uint32) ptr_allocations[9] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... ");
f011c920:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f011c926:	89 c1                	mov    %eax,%ecx
f011c928:	c7 85 14 ff ff ff 00 	movl   $0x1000,-0xec(%ebp)
f011c92f:	10 00 00 
f011c932:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f011c938:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011c93d:	89 85 10 ff ff ff    	mov    %eax,-0xf0(%ebp)
f011c943:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f011c949:	ba 00 00 00 00       	mov    $0x0,%edx
f011c94e:	f7 b5 14 ff ff ff    	divl   -0xec(%ebp)
f011c954:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f011c95a:	29 d0                	sub    %edx,%eax
f011c95c:	89 c3                	mov    %eax,%ebx
f011c95e:	c7 85 0c ff ff ff 00 	movl   $0x1000,-0xf4(%ebp)
f011c965:	10 00 00 
f011c968:	a0 bc 0e 6c f0       	mov    0xf06c0ebc,%al
f011c96d:	0f b6 d0             	movzbl %al,%edx
f011c970:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f011c976:	01 d0                	add    %edx,%eax
f011c978:	48                   	dec    %eax
f011c979:	89 85 08 ff ff ff    	mov    %eax,-0xf8(%ebp)
f011c97f:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f011c985:	ba 00 00 00 00       	mov    $0x0,%edx
f011c98a:	f7 b5 0c ff ff ff    	divl   -0xf4(%ebp)
f011c990:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f011c996:	29 d0                	sub    %edx,%eax
f011c998:	01 c3                	add    %eax,%ebx
f011c99a:	c7 85 04 ff ff ff 00 	movl   $0x1000,-0xfc(%ebp)
f011c9a1:	10 00 00 
f011c9a4:	a0 bc 0e 6c f0       	mov    0xf06c0ebc,%al
f011c9a9:	0f b6 c0             	movzbl %al,%eax
f011c9ac:	c1 e0 04             	shl    $0x4,%eax
f011c9af:	89 c2                	mov    %eax,%edx
f011c9b1:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f011c9b7:	01 d0                	add    %edx,%eax
f011c9b9:	48                   	dec    %eax
f011c9ba:	89 85 00 ff ff ff    	mov    %eax,-0x100(%ebp)
f011c9c0:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f011c9c6:	ba 00 00 00 00       	mov    $0x0,%edx
f011c9cb:	f7 b5 04 ff ff ff    	divl   -0xfc(%ebp)
f011c9d1:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f011c9d7:	29 d0                	sub    %edx,%eax
f011c9d9:	01 d8                	add    %ebx,%eax
f011c9db:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
f011c9e0:	39 c1                	cmp    %eax,%ecx
f011c9e2:	74 17                	je     f011c9fb <test_kmalloc_firstfit1+0xd3b>
f011c9e4:	83 ec 04             	sub    $0x4,%esp
f011c9e7:	68 90 ac 13 f0       	push   $0xf013ac90
f011c9ec:	68 49 03 00 00       	push   $0x349
f011c9f1:	68 76 a8 13 f0       	push   $0xf013a876
f011c9f6:	e8 ab 37 fe ff       	call   f01001a6 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011c9fb:	e8 8c 72 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011ca00:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011ca03:	74 17                	je     f011ca1c <test_kmalloc_firstfit1+0xd5c>
f011ca05:	83 ec 04             	sub    $0x4,%esp
f011ca08:	68 90 a8 13 f0       	push   $0xf013a890
f011ca0d:	68 4a 03 00 00       	push   $0x34a
f011ca12:	68 76 a8 13 f0       	push   $0xf013a876
f011ca17:	e8 8a 37 fe ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: ");
f011ca1c:	e8 9d f9 fe ff       	call   f010c3be <sys_calculate_free_frames>
f011ca21:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011ca24:	29 c2                	sub    %eax,%edx
f011ca26:	89 d0                	mov    %edx,%eax
f011ca28:	3d 00 01 00 00       	cmp    $0x100,%eax
f011ca2d:	74 17                	je     f011ca46 <test_kmalloc_firstfit1+0xd86>
f011ca2f:	83 ec 04             	sub    $0x4,%esp
f011ca32:	68 c0 ac 13 f0       	push   $0xf013acc0
f011ca37:	68 4b 03 00 00       	push   $0x34b
f011ca3c:	68 76 a8 13 f0       	push   $0xf013a876
f011ca41:	e8 60 37 fe ff       	call   f01001a6 <_panic>


		//Allocate 256 KB - should be placed in remaining of 1st hole
		freeFrames = sys_calculate_free_frames() ;
f011ca46:	e8 73 f9 fe ff       	call   f010c3be <sys_calculate_free_frames>
f011ca4b:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011ca4e:	e8 39 72 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011ca53:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[10] = kmalloc(256*kilo - kilo);
f011ca56:	83 ec 0c             	sub    $0xc,%esp
f011ca59:	68 00 fc 03 00       	push   $0x3fc00
f011ca5e:	e8 61 ab fe ff       	call   f01075c4 <kmalloc>
f011ca63:	83 c4 10             	add    $0x10,%esp
f011ca66:	89 85 78 fe ff ff    	mov    %eax,-0x188(%ebp)
		if ((uint32) ptr_allocations[10] != (ACTUAL_START + 1*Mega + 512*kilo)) panic("Wrong start address for the allocated space... ");
f011ca6c:	8b 85 78 fe ff ff    	mov    -0x188(%ebp),%eax
f011ca72:	89 c1                	mov    %eax,%ecx
f011ca74:	c7 85 fc fe ff ff 00 	movl   $0x1000,-0x104(%ebp)
f011ca7b:	10 00 00 
f011ca7e:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f011ca84:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011ca89:	89 85 f8 fe ff ff    	mov    %eax,-0x108(%ebp)
f011ca8f:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f011ca95:	ba 00 00 00 00       	mov    $0x0,%edx
f011ca9a:	f7 b5 fc fe ff ff    	divl   -0x104(%ebp)
f011caa0:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f011caa6:	29 d0                	sub    %edx,%eax
f011caa8:	89 c3                	mov    %eax,%ebx
f011caaa:	c7 85 f4 fe ff ff 00 	movl   $0x1000,-0x10c(%ebp)
f011cab1:	10 00 00 
f011cab4:	a0 bc 0e 6c f0       	mov    0xf06c0ebc,%al
f011cab9:	0f b6 d0             	movzbl %al,%edx
f011cabc:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f011cac2:	01 d0                	add    %edx,%eax
f011cac4:	48                   	dec    %eax
f011cac5:	89 85 f0 fe ff ff    	mov    %eax,-0x110(%ebp)
f011cacb:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f011cad1:	ba 00 00 00 00       	mov    $0x0,%edx
f011cad6:	f7 b5 f4 fe ff ff    	divl   -0x10c(%ebp)
f011cadc:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f011cae2:	29 d0                	sub    %edx,%eax
f011cae4:	01 c3                	add    %eax,%ebx
f011cae6:	c7 85 ec fe ff ff 00 	movl   $0x1000,-0x114(%ebp)
f011caed:	10 00 00 
f011caf0:	a0 bc 0e 6c f0       	mov    0xf06c0ebc,%al
f011caf5:	0f b6 c0             	movzbl %al,%eax
f011caf8:	c1 e0 04             	shl    $0x4,%eax
f011cafb:	89 c2                	mov    %eax,%edx
f011cafd:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f011cb03:	01 d0                	add    %edx,%eax
f011cb05:	48                   	dec    %eax
f011cb06:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)
f011cb0c:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f011cb12:	ba 00 00 00 00       	mov    $0x0,%edx
f011cb17:	f7 b5 ec fe ff ff    	divl   -0x114(%ebp)
f011cb1d:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f011cb23:	29 d0                	sub    %edx,%eax
f011cb25:	01 d8                	add    %ebx,%eax
f011cb27:	2d 00 c0 e7 09       	sub    $0x9e7c000,%eax
f011cb2c:	39 c1                	cmp    %eax,%ecx
f011cb2e:	74 17                	je     f011cb47 <test_kmalloc_firstfit1+0xe87>
f011cb30:	83 ec 04             	sub    $0x4,%esp
f011cb33:	68 90 ac 13 f0       	push   $0xf013ac90
f011cb38:	68 52 03 00 00       	push   $0x352
f011cb3d:	68 76 a8 13 f0       	push   $0xf013a876
f011cb42:	e8 5f 36 fe ff       	call   f01001a6 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011cb47:	e8 40 71 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011cb4c:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011cb4f:	74 17                	je     f011cb68 <test_kmalloc_firstfit1+0xea8>
f011cb51:	83 ec 04             	sub    $0x4,%esp
f011cb54:	68 90 a8 13 f0       	push   $0xf013a890
f011cb59:	68 53 03 00 00       	push   $0x353
f011cb5e:	68 76 a8 13 f0       	push   $0xf013a876
f011cb63:	e8 3e 36 fe ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 64) panic("Wrong allocation: ");
f011cb68:	e8 51 f8 fe ff       	call   f010c3be <sys_calculate_free_frames>
f011cb6d:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011cb70:	29 c2                	sub    %eax,%edx
f011cb72:	89 d0                	mov    %edx,%eax
f011cb74:	83 f8 40             	cmp    $0x40,%eax
f011cb77:	74 17                	je     f011cb90 <test_kmalloc_firstfit1+0xed0>
f011cb79:	83 ec 04             	sub    $0x4,%esp
f011cb7c:	68 c0 ac 13 f0       	push   $0xf013acc0
f011cb81:	68 54 03 00 00       	push   $0x354
f011cb86:	68 76 a8 13 f0       	push   $0xf013a876
f011cb8b:	e8 16 36 fe ff       	call   f01001a6 <_panic>

		//Allocate 2 MB - should be placed in 3rd hole
		freeFrames = sys_calculate_free_frames() ;
f011cb90:	e8 29 f8 fe ff       	call   f010c3be <sys_calculate_free_frames>
f011cb95:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011cb98:	e8 ef 70 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011cb9d:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[11] = kmalloc(2*Mega);
f011cba0:	83 ec 0c             	sub    $0xc,%esp
f011cba3:	68 00 00 20 00       	push   $0x200000
f011cba8:	e8 17 aa fe ff       	call   f01075c4 <kmalloc>
f011cbad:	83 c4 10             	add    $0x10,%esp
f011cbb0:	89 85 7c fe ff ff    	mov    %eax,-0x184(%ebp)
		if ((uint32) ptr_allocations[11] != (ACTUAL_START + 8*Mega)) panic("Wrong start address for the allocated space... ");
f011cbb6:	8b 85 7c fe ff ff    	mov    -0x184(%ebp),%eax
f011cbbc:	89 c1                	mov    %eax,%ecx
f011cbbe:	c7 85 e4 fe ff ff 00 	movl   $0x1000,-0x11c(%ebp)
f011cbc5:	10 00 00 
f011cbc8:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f011cbce:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011cbd3:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
f011cbd9:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f011cbdf:	ba 00 00 00 00       	mov    $0x0,%edx
f011cbe4:	f7 b5 e4 fe ff ff    	divl   -0x11c(%ebp)
f011cbea:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f011cbf0:	29 d0                	sub    %edx,%eax
f011cbf2:	89 c3                	mov    %eax,%ebx
f011cbf4:	c7 85 dc fe ff ff 00 	movl   $0x1000,-0x124(%ebp)
f011cbfb:	10 00 00 
f011cbfe:	a0 bc 0e 6c f0       	mov    0xf06c0ebc,%al
f011cc03:	0f b6 d0             	movzbl %al,%edx
f011cc06:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f011cc0c:	01 d0                	add    %edx,%eax
f011cc0e:	48                   	dec    %eax
f011cc0f:	89 85 d8 fe ff ff    	mov    %eax,-0x128(%ebp)
f011cc15:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f011cc1b:	ba 00 00 00 00       	mov    $0x0,%edx
f011cc20:	f7 b5 dc fe ff ff    	divl   -0x124(%ebp)
f011cc26:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f011cc2c:	29 d0                	sub    %edx,%eax
f011cc2e:	01 c3                	add    %eax,%ebx
f011cc30:	c7 85 d4 fe ff ff 00 	movl   $0x1000,-0x12c(%ebp)
f011cc37:	10 00 00 
f011cc3a:	a0 bc 0e 6c f0       	mov    0xf06c0ebc,%al
f011cc3f:	0f b6 c0             	movzbl %al,%eax
f011cc42:	c1 e0 04             	shl    $0x4,%eax
f011cc45:	89 c2                	mov    %eax,%edx
f011cc47:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f011cc4d:	01 d0                	add    %edx,%eax
f011cc4f:	48                   	dec    %eax
f011cc50:	89 85 d0 fe ff ff    	mov    %eax,-0x130(%ebp)
f011cc56:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f011cc5c:	ba 00 00 00 00       	mov    $0x0,%edx
f011cc61:	f7 b5 d4 fe ff ff    	divl   -0x12c(%ebp)
f011cc67:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f011cc6d:	29 d0                	sub    %edx,%eax
f011cc6f:	01 d8                	add    %ebx,%eax
f011cc71:	2d 00 c0 7f 09       	sub    $0x97fc000,%eax
f011cc76:	39 c1                	cmp    %eax,%ecx
f011cc78:	74 17                	je     f011cc91 <test_kmalloc_firstfit1+0xfd1>
f011cc7a:	83 ec 04             	sub    $0x4,%esp
f011cc7d:	68 90 ac 13 f0       	push   $0xf013ac90
f011cc82:	68 5a 03 00 00       	push   $0x35a
f011cc87:	68 76 a8 13 f0       	push   $0xf013a876
f011cc8c:	e8 15 35 fe ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: ");
f011cc91:	e8 28 f7 fe ff       	call   f010c3be <sys_calculate_free_frames>
f011cc96:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011cc99:	29 c2                	sub    %eax,%edx
f011cc9b:	89 d0                	mov    %edx,%eax
f011cc9d:	3d 00 02 00 00       	cmp    $0x200,%eax
f011cca2:	74 17                	je     f011ccbb <test_kmalloc_firstfit1+0xffb>
f011cca4:	83 ec 04             	sub    $0x4,%esp
f011cca7:	68 c0 ac 13 f0       	push   $0xf013acc0
f011ccac:	68 5b 03 00 00       	push   $0x35b
f011ccb1:	68 76 a8 13 f0       	push   $0xf013a876
f011ccb6:	e8 eb 34 fe ff       	call   f01001a6 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011ccbb:	e8 cc 6f fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011ccc0:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011ccc3:	74 17                	je     f011ccdc <test_kmalloc_firstfit1+0x101c>
f011ccc5:	83 ec 04             	sub    $0x4,%esp
f011ccc8:	68 90 a8 13 f0       	push   $0xf013a890
f011cccd:	68 5c 03 00 00       	push   $0x35c
f011ccd2:	68 76 a8 13 f0       	push   $0xf013a876
f011ccd7:	e8 ca 34 fe ff       	call   f01001a6 <_panic>


		//Allocate 4 MB - should be placed in end of all allocations
		freeFrames = sys_calculate_free_frames() ;
f011ccdc:	e8 dd f6 fe ff       	call   f010c3be <sys_calculate_free_frames>
f011cce1:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011cce4:	e8 a3 6f fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011cce9:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[12] = kmalloc(4*Mega - kilo);
f011ccec:	83 ec 0c             	sub    $0xc,%esp
f011ccef:	68 00 fc 3f 00       	push   $0x3ffc00
f011ccf4:	e8 cb a8 fe ff       	call   f01075c4 <kmalloc>
f011ccf9:	83 c4 10             	add    $0x10,%esp
f011ccfc:	89 85 80 fe ff ff    	mov    %eax,-0x180(%ebp)
		if ((uint32) ptr_allocations[12] != (ACTUAL_START + 14*Mega)) panic("Wrong start address for the allocated space... ");
f011cd02:	8b 85 80 fe ff ff    	mov    -0x180(%ebp),%eax
f011cd08:	89 c1                	mov    %eax,%ecx
f011cd0a:	c7 85 cc fe ff ff 00 	movl   $0x1000,-0x134(%ebp)
f011cd11:	10 00 00 
f011cd14:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f011cd1a:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011cd1f:	89 85 c8 fe ff ff    	mov    %eax,-0x138(%ebp)
f011cd25:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f011cd2b:	ba 00 00 00 00       	mov    $0x0,%edx
f011cd30:	f7 b5 cc fe ff ff    	divl   -0x134(%ebp)
f011cd36:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f011cd3c:	29 d0                	sub    %edx,%eax
f011cd3e:	89 c3                	mov    %eax,%ebx
f011cd40:	c7 85 c4 fe ff ff 00 	movl   $0x1000,-0x13c(%ebp)
f011cd47:	10 00 00 
f011cd4a:	a0 bc 0e 6c f0       	mov    0xf06c0ebc,%al
f011cd4f:	0f b6 d0             	movzbl %al,%edx
f011cd52:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f011cd58:	01 d0                	add    %edx,%eax
f011cd5a:	48                   	dec    %eax
f011cd5b:	89 85 c0 fe ff ff    	mov    %eax,-0x140(%ebp)
f011cd61:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f011cd67:	ba 00 00 00 00       	mov    $0x0,%edx
f011cd6c:	f7 b5 c4 fe ff ff    	divl   -0x13c(%ebp)
f011cd72:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f011cd78:	29 d0                	sub    %edx,%eax
f011cd7a:	01 c3                	add    %eax,%ebx
f011cd7c:	c7 85 bc fe ff ff 00 	movl   $0x1000,-0x144(%ebp)
f011cd83:	10 00 00 
f011cd86:	a0 bc 0e 6c f0       	mov    0xf06c0ebc,%al
f011cd8b:	0f b6 c0             	movzbl %al,%eax
f011cd8e:	c1 e0 04             	shl    $0x4,%eax
f011cd91:	89 c2                	mov    %eax,%edx
f011cd93:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f011cd99:	01 d0                	add    %edx,%eax
f011cd9b:	48                   	dec    %eax
f011cd9c:	89 85 b8 fe ff ff    	mov    %eax,-0x148(%ebp)
f011cda2:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f011cda8:	ba 00 00 00 00       	mov    $0x0,%edx
f011cdad:	f7 b5 bc fe ff ff    	divl   -0x144(%ebp)
f011cdb3:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f011cdb9:	29 d0                	sub    %edx,%eax
f011cdbb:	01 d8                	add    %ebx,%eax
f011cdbd:	2d 00 c0 1f 09       	sub    $0x91fc000,%eax
f011cdc2:	39 c1                	cmp    %eax,%ecx
f011cdc4:	74 17                	je     f011cddd <test_kmalloc_firstfit1+0x111d>
f011cdc6:	83 ec 04             	sub    $0x4,%esp
f011cdc9:	68 90 ac 13 f0       	push   $0xf013ac90
f011cdce:	68 63 03 00 00       	push   $0x363
f011cdd3:	68 76 a8 13 f0       	push   $0xf013a876
f011cdd8:	e8 c9 33 fe ff       	call   f01001a6 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011cddd:	e8 aa 6e fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011cde2:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011cde5:	74 17                	je     f011cdfe <test_kmalloc_firstfit1+0x113e>
f011cde7:	83 ec 04             	sub    $0x4,%esp
f011cdea:	68 90 a8 13 f0       	push   $0xf013a890
f011cdef:	68 64 03 00 00       	push   $0x364
f011cdf4:	68 76 a8 13 f0       	push   $0xf013a876
f011cdf9:	e8 a8 33 fe ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1024) panic("Wrong allocation: ");
f011cdfe:	e8 bb f5 fe ff       	call   f010c3be <sys_calculate_free_frames>
f011ce03:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011ce06:	29 c2                	sub    %eax,%edx
f011ce08:	89 d0                	mov    %edx,%eax
f011ce0a:	3d 00 04 00 00       	cmp    $0x400,%eax
f011ce0f:	74 17                	je     f011ce28 <test_kmalloc_firstfit1+0x1168>
f011ce11:	83 ec 04             	sub    $0x4,%esp
f011ce14:	68 c0 ac 13 f0       	push   $0xf013acc0
f011ce19:	68 65 03 00 00       	push   $0x365
f011ce1e:	68 76 a8 13 f0       	push   $0xf013a876
f011ce23:	e8 7e 33 fe ff       	call   f01001a6 <_panic>
	}

	//[4] Free contiguous allocations
	{
		//1 MB Hole appended to previous 256 KB hole
		freeFrames = sys_calculate_free_frames() ;
f011ce28:	e8 91 f5 fe ff       	call   f010c3be <sys_calculate_free_frames>
f011ce2d:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011ce30:	e8 57 6e fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011ce35:	89 45 f0             	mov    %eax,-0x10(%ebp)
		kfree(ptr_allocations[2]);
f011ce38:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f011ce3e:	83 ec 0c             	sub    $0xc,%esp
f011ce41:	50                   	push   %eax
f011ce42:	e8 97 a7 fe ff       	call   f01075de <kfree>
f011ce47:	83 c4 10             	add    $0x10,%esp
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011ce4a:	e8 3d 6e fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011ce4f:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011ce52:	74 17                	je     f011ce6b <test_kmalloc_firstfit1+0x11ab>
f011ce54:	83 ec 04             	sub    $0x4,%esp
f011ce57:	68 90 a8 13 f0       	push   $0xf013a890
f011ce5c:	68 6e 03 00 00       	push   $0x36e
f011ce61:	68 76 a8 13 f0       	push   $0xf013a876
f011ce66:	e8 3b 33 fe ff       	call   f01001a6 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 256) panic("Wrong free: ");
f011ce6b:	e8 4e f5 fe ff       	call   f010c3be <sys_calculate_free_frames>
f011ce70:	2b 45 f4             	sub    -0xc(%ebp),%eax
f011ce73:	3d 00 01 00 00       	cmp    $0x100,%eax
f011ce78:	74 17                	je     f011ce91 <test_kmalloc_firstfit1+0x11d1>
f011ce7a:	83 ec 04             	sub    $0x4,%esp
f011ce7d:	68 d3 ac 13 f0       	push   $0xf013acd3
f011ce82:	68 6f 03 00 00       	push   $0x36f
f011ce87:	68 76 a8 13 f0       	push   $0xf013a876
f011ce8c:	e8 15 33 fe ff       	call   f01001a6 <_panic>

		//Next 1 MB Hole appended also
		freeFrames = sys_calculate_free_frames() ;
f011ce91:	e8 28 f5 fe ff       	call   f010c3be <sys_calculate_free_frames>
f011ce96:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011ce99:	e8 ee 6d fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011ce9e:	89 45 f0             	mov    %eax,-0x10(%ebp)
		kfree(ptr_allocations[3]);
f011cea1:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f011cea7:	83 ec 0c             	sub    $0xc,%esp
f011ceaa:	50                   	push   %eax
f011ceab:	e8 2e a7 fe ff       	call   f01075de <kfree>
f011ceb0:	83 c4 10             	add    $0x10,%esp
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011ceb3:	e8 d4 6d fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011ceb8:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011cebb:	74 17                	je     f011ced4 <test_kmalloc_firstfit1+0x1214>
f011cebd:	83 ec 04             	sub    $0x4,%esp
f011cec0:	68 90 a8 13 f0       	push   $0xf013a890
f011cec5:	68 75 03 00 00       	push   $0x375
f011ceca:	68 76 a8 13 f0       	push   $0xf013a876
f011cecf:	e8 d2 32 fe ff       	call   f01001a6 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 256) panic("Wrong free: ");
f011ced4:	e8 e5 f4 fe ff       	call   f010c3be <sys_calculate_free_frames>
f011ced9:	2b 45 f4             	sub    -0xc(%ebp),%eax
f011cedc:	3d 00 01 00 00       	cmp    $0x100,%eax
f011cee1:	74 17                	je     f011cefa <test_kmalloc_firstfit1+0x123a>
f011cee3:	83 ec 04             	sub    $0x4,%esp
f011cee6:	68 d3 ac 13 f0       	push   $0xf013acd3
f011ceeb:	68 76 03 00 00       	push   $0x376
f011cef0:	68 76 a8 13 f0       	push   $0xf013a876
f011cef5:	e8 ac 32 fe ff       	call   f01001a6 <_panic>

	//[5] Allocate again [test first fit]
	{
		//[FIRST FIT Case]
		//Allocate 1 MB - should be placed in the contiguous hole (256 KB + 2 MB)
		freeFrames = sys_calculate_free_frames() ;
f011cefa:	e8 bf f4 fe ff       	call   f010c3be <sys_calculate_free_frames>
f011ceff:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011cf02:	e8 85 6d fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011cf07:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[13] = kmalloc(1*Mega);
f011cf0a:	83 ec 0c             	sub    $0xc,%esp
f011cf0d:	68 00 00 10 00       	push   $0x100000
f011cf12:	e8 ad a6 fe ff       	call   f01075c4 <kmalloc>
f011cf17:	83 c4 10             	add    $0x10,%esp
f011cf1a:	89 85 84 fe ff ff    	mov    %eax,-0x17c(%ebp)
		if ((uint32) ptr_allocations[13] != (ACTUAL_START + 1*Mega + 768*kilo)) panic("Wrong start address for the allocated space... ");
f011cf20:	8b 85 84 fe ff ff    	mov    -0x17c(%ebp),%eax
f011cf26:	89 c1                	mov    %eax,%ecx
f011cf28:	c7 85 b4 fe ff ff 00 	movl   $0x1000,-0x14c(%ebp)
f011cf2f:	10 00 00 
f011cf32:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f011cf38:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011cf3d:	89 85 b0 fe ff ff    	mov    %eax,-0x150(%ebp)
f011cf43:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f011cf49:	ba 00 00 00 00       	mov    $0x0,%edx
f011cf4e:	f7 b5 b4 fe ff ff    	divl   -0x14c(%ebp)
f011cf54:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f011cf5a:	29 d0                	sub    %edx,%eax
f011cf5c:	89 c3                	mov    %eax,%ebx
f011cf5e:	c7 85 ac fe ff ff 00 	movl   $0x1000,-0x154(%ebp)
f011cf65:	10 00 00 
f011cf68:	a0 bc 0e 6c f0       	mov    0xf06c0ebc,%al
f011cf6d:	0f b6 d0             	movzbl %al,%edx
f011cf70:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f011cf76:	01 d0                	add    %edx,%eax
f011cf78:	48                   	dec    %eax
f011cf79:	89 85 a8 fe ff ff    	mov    %eax,-0x158(%ebp)
f011cf7f:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f011cf85:	ba 00 00 00 00       	mov    $0x0,%edx
f011cf8a:	f7 b5 ac fe ff ff    	divl   -0x154(%ebp)
f011cf90:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f011cf96:	29 d0                	sub    %edx,%eax
f011cf98:	01 c3                	add    %eax,%ebx
f011cf9a:	c7 85 a4 fe ff ff 00 	movl   $0x1000,-0x15c(%ebp)
f011cfa1:	10 00 00 
f011cfa4:	a0 bc 0e 6c f0       	mov    0xf06c0ebc,%al
f011cfa9:	0f b6 c0             	movzbl %al,%eax
f011cfac:	c1 e0 04             	shl    $0x4,%eax
f011cfaf:	89 c2                	mov    %eax,%edx
f011cfb1:	8b 85 a4 fe ff ff    	mov    -0x15c(%ebp),%eax
f011cfb7:	01 d0                	add    %edx,%eax
f011cfb9:	48                   	dec    %eax
f011cfba:	89 85 a0 fe ff ff    	mov    %eax,-0x160(%ebp)
f011cfc0:	8b 85 a0 fe ff ff    	mov    -0x160(%ebp),%eax
f011cfc6:	ba 00 00 00 00       	mov    $0x0,%edx
f011cfcb:	f7 b5 a4 fe ff ff    	divl   -0x15c(%ebp)
f011cfd1:	8b 85 a0 fe ff ff    	mov    -0x160(%ebp),%eax
f011cfd7:	29 d0                	sub    %edx,%eax
f011cfd9:	01 d8                	add    %ebx,%eax
f011cfdb:	2d 00 c0 e3 09       	sub    $0x9e3c000,%eax
f011cfe0:	39 c1                	cmp    %eax,%ecx
f011cfe2:	74 17                	je     f011cffb <test_kmalloc_firstfit1+0x133b>
f011cfe4:	83 ec 04             	sub    $0x4,%esp
f011cfe7:	68 90 ac 13 f0       	push   $0xf013ac90
f011cfec:	68 80 03 00 00       	push   $0x380
f011cff1:	68 76 a8 13 f0       	push   $0xf013a876
f011cff6:	e8 ab 31 fe ff       	call   f01001a6 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011cffb:	e8 8c 6c fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011d000:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011d003:	74 17                	je     f011d01c <test_kmalloc_firstfit1+0x135c>
f011d005:	83 ec 04             	sub    $0x4,%esp
f011d008:	68 90 a8 13 f0       	push   $0xf013a890
f011d00d:	68 81 03 00 00       	push   $0x381
f011d012:	68 76 a8 13 f0       	push   $0xf013a876
f011d017:	e8 8a 31 fe ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: ");
f011d01c:	e8 9d f3 fe ff       	call   f010c3be <sys_calculate_free_frames>
f011d021:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011d024:	29 c2                	sub    %eax,%edx
f011d026:	89 d0                	mov    %edx,%eax
f011d028:	3d 00 01 00 00       	cmp    $0x100,%eax
f011d02d:	74 17                	je     f011d046 <test_kmalloc_firstfit1+0x1386>
f011d02f:	83 ec 04             	sub    $0x4,%esp
f011d032:	68 c0 ac 13 f0       	push   $0xf013acc0
f011d037:	68 82 03 00 00       	push   $0x382
f011d03c:	68 76 a8 13 f0       	push   $0xf013a876
f011d041:	e8 60 31 fe ff       	call   f01001a6 <_panic>
	}

	cprintf("Congratulations!! test FIRST FIT allocation (1) completed successfully.\n");
f011d046:	83 ec 0c             	sub    $0xc,%esp
f011d049:	68 6c ae 13 f0       	push   $0xf013ae6c
f011d04e:	e8 da 3b fe ff       	call   f0100c2d <cprintf>
f011d053:	83 c4 10             	add    $0x10,%esp

	return 1;
f011d056:	b8 01 00 00 00       	mov    $0x1,%eax
}
f011d05b:	8d 65 f8             	lea    -0x8(%ebp),%esp
f011d05e:	5b                   	pop    %ebx
f011d05f:	5f                   	pop    %edi
f011d060:	5d                   	pop    %ebp
f011d061:	c3                   	ret    

f011d062 <test_kmalloc_firstfit2>:

int test_kmalloc_firstfit2()
{
f011d062:	55                   	push   %ebp
f011d063:	89 e5                	mov    %esp,%ebp
f011d065:	57                   	push   %edi
f011d066:	53                   	push   %ebx
f011d067:	81 ec 60 01 00 00    	sub    $0x160,%esp
	cprintf("==============================================\n");
f011d06d:	83 ec 0c             	sub    $0xc,%esp
f011d070:	68 b8 a7 13 f0       	push   $0xf013a7b8
f011d075:	e8 b3 3b fe ff       	call   f0100c2d <cprintf>
f011d07a:	83 c4 10             	add    $0x10,%esp
	cprintf("MAKE SURE to have a FRESH RUN for this test\n(i.e. don't run any program/test before it)\n");
f011d07d:	83 ec 0c             	sub    $0xc,%esp
f011d080:	68 e8 a7 13 f0       	push   $0xf013a7e8
f011d085:	e8 a3 3b fe ff       	call   f0100c2d <cprintf>
f011d08a:	83 c4 10             	add    $0x10,%esp
	cprintf("==============================================\n");
f011d08d:	83 ec 0c             	sub    $0xc,%esp
f011d090:	68 b8 a7 13 f0       	push   $0xf013a7b8
f011d095:	e8 93 3b fe ff       	call   f0100c2d <cprintf>
f011d09a:	83 c4 10             	add    $0x10,%esp

	void* ptr_allocations[20] = {0};
f011d09d:	8d 95 98 fe ff ff    	lea    -0x168(%ebp),%edx
f011d0a3:	b9 14 00 00 00       	mov    $0x14,%ecx
f011d0a8:	b8 00 00 00 00       	mov    $0x0,%eax
f011d0ad:	89 d7                	mov    %edx,%edi
f011d0af:	f3 ab                	rep stos %eax,%es:(%edi)
	uint32 freeFrames;
	uint32 freeDiskFrames;

	//[1] Attempt to allocate more than heap size
	{
		ptr_allocations[0] = kmalloc(KERNEL_HEAP_MAX - ACTUAL_START + 1);
f011d0b1:	c7 45 f4 00 10 00 00 	movl   $0x1000,-0xc(%ebp)
f011d0b8:	8b 45 f4             	mov    -0xc(%ebp),%eax
f011d0bb:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011d0c0:	89 45 f0             	mov    %eax,-0x10(%ebp)
f011d0c3:	8b 45 f0             	mov    -0x10(%ebp),%eax
f011d0c6:	ba 00 00 00 00       	mov    $0x0,%edx
f011d0cb:	f7 75 f4             	divl   -0xc(%ebp)
f011d0ce:	8b 45 f0             	mov    -0x10(%ebp),%eax
f011d0d1:	29 d0                	sub    %edx,%eax
f011d0d3:	89 c1                	mov    %eax,%ecx
f011d0d5:	c7 45 ec 00 10 00 00 	movl   $0x1000,-0x14(%ebp)
f011d0dc:	a0 bc 0e 6c f0       	mov    0xf06c0ebc,%al
f011d0e1:	0f b6 d0             	movzbl %al,%edx
f011d0e4:	8b 45 ec             	mov    -0x14(%ebp),%eax
f011d0e7:	01 d0                	add    %edx,%eax
f011d0e9:	48                   	dec    %eax
f011d0ea:	89 45 e8             	mov    %eax,-0x18(%ebp)
f011d0ed:	8b 45 e8             	mov    -0x18(%ebp),%eax
f011d0f0:	ba 00 00 00 00       	mov    $0x0,%edx
f011d0f5:	f7 75 ec             	divl   -0x14(%ebp)
f011d0f8:	8b 45 e8             	mov    -0x18(%ebp),%eax
f011d0fb:	29 d0                	sub    %edx,%eax
f011d0fd:	01 c1                	add    %eax,%ecx
f011d0ff:	c7 45 e4 00 10 00 00 	movl   $0x1000,-0x1c(%ebp)
f011d106:	a0 bc 0e 6c f0       	mov    0xf06c0ebc,%al
f011d10b:	0f b6 c0             	movzbl %al,%eax
f011d10e:	c1 e0 04             	shl    $0x4,%eax
f011d111:	89 c2                	mov    %eax,%edx
f011d113:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f011d116:	01 d0                	add    %edx,%eax
f011d118:	48                   	dec    %eax
f011d119:	89 45 e0             	mov    %eax,-0x20(%ebp)
f011d11c:	8b 45 e0             	mov    -0x20(%ebp),%eax
f011d11f:	ba 00 00 00 00       	mov    $0x0,%edx
f011d124:	f7 75 e4             	divl   -0x1c(%ebp)
f011d127:	8b 45 e0             	mov    -0x20(%ebp),%eax
f011d12a:	29 d0                	sub    %edx,%eax
f011d12c:	01 c8                	add    %ecx,%eax
f011d12e:	ba 01 b0 ff 09       	mov    $0x9ffb001,%edx
f011d133:	29 c2                	sub    %eax,%edx
f011d135:	89 d0                	mov    %edx,%eax
f011d137:	83 ec 0c             	sub    $0xc,%esp
f011d13a:	50                   	push   %eax
f011d13b:	e8 84 a4 fe ff       	call   f01075c4 <kmalloc>
f011d140:	83 c4 10             	add    $0x10,%esp
f011d143:	89 85 98 fe ff ff    	mov    %eax,-0x168(%ebp)
		if (ptr_allocations[0] != NULL) panic("kmalloc: Attempt to allocate more than heap size, should return NULL");
f011d149:	8b 85 98 fe ff ff    	mov    -0x168(%ebp),%eax
f011d14f:	85 c0                	test   %eax,%eax
f011d151:	74 17                	je     f011d16a <test_kmalloc_firstfit2+0x108>
f011d153:	83 ec 04             	sub    $0x4,%esp
f011d156:	68 b8 ae 13 f0       	push   $0xf013aeb8
f011d15b:	68 97 03 00 00       	push   $0x397
f011d160:	68 76 a8 13 f0       	push   $0xf013a876
f011d165:	e8 3c 30 fe ff       	call   f01001a6 <_panic>

	//[2] Attempt to allocate space more than any available fragment
	//	a) Create Fragments
	{
		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f011d16a:	e8 4f f2 fe ff       	call   f010c3be <sys_calculate_free_frames>
f011d16f:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011d172:	e8 15 6b fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011d177:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[0] = kmalloc(2*Mega-kilo);
f011d17a:	83 ec 0c             	sub    $0xc,%esp
f011d17d:	68 00 fc 1f 00       	push   $0x1ffc00
f011d182:	e8 3d a4 fe ff       	call   f01075c4 <kmalloc>
f011d187:	83 c4 10             	add    $0x10,%esp
f011d18a:	89 85 98 fe ff ff    	mov    %eax,-0x168(%ebp)
		if ((uint32) ptr_allocations[0] != (ACTUAL_START)) panic("Wrong start address for the allocated space... ");
f011d190:	8b 85 98 fe ff ff    	mov    -0x168(%ebp),%eax
f011d196:	89 c1                	mov    %eax,%ecx
f011d198:	c7 45 d4 00 10 00 00 	movl   $0x1000,-0x2c(%ebp)
f011d19f:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f011d1a2:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011d1a7:	89 45 d0             	mov    %eax,-0x30(%ebp)
f011d1aa:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011d1ad:	ba 00 00 00 00       	mov    $0x0,%edx
f011d1b2:	f7 75 d4             	divl   -0x2c(%ebp)
f011d1b5:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011d1b8:	29 d0                	sub    %edx,%eax
f011d1ba:	89 c3                	mov    %eax,%ebx
f011d1bc:	c7 45 cc 00 10 00 00 	movl   $0x1000,-0x34(%ebp)
f011d1c3:	a0 bc 0e 6c f0       	mov    0xf06c0ebc,%al
f011d1c8:	0f b6 d0             	movzbl %al,%edx
f011d1cb:	8b 45 cc             	mov    -0x34(%ebp),%eax
f011d1ce:	01 d0                	add    %edx,%eax
f011d1d0:	48                   	dec    %eax
f011d1d1:	89 45 c8             	mov    %eax,-0x38(%ebp)
f011d1d4:	8b 45 c8             	mov    -0x38(%ebp),%eax
f011d1d7:	ba 00 00 00 00       	mov    $0x0,%edx
f011d1dc:	f7 75 cc             	divl   -0x34(%ebp)
f011d1df:	8b 45 c8             	mov    -0x38(%ebp),%eax
f011d1e2:	29 d0                	sub    %edx,%eax
f011d1e4:	01 c3                	add    %eax,%ebx
f011d1e6:	c7 45 c4 00 10 00 00 	movl   $0x1000,-0x3c(%ebp)
f011d1ed:	a0 bc 0e 6c f0       	mov    0xf06c0ebc,%al
f011d1f2:	0f b6 c0             	movzbl %al,%eax
f011d1f5:	c1 e0 04             	shl    $0x4,%eax
f011d1f8:	89 c2                	mov    %eax,%edx
f011d1fa:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f011d1fd:	01 d0                	add    %edx,%eax
f011d1ff:	48                   	dec    %eax
f011d200:	89 45 c0             	mov    %eax,-0x40(%ebp)
f011d203:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011d206:	ba 00 00 00 00       	mov    $0x0,%edx
f011d20b:	f7 75 c4             	divl   -0x3c(%ebp)
f011d20e:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011d211:	29 d0                	sub    %edx,%eax
f011d213:	01 d8                	add    %ebx,%eax
f011d215:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f011d21a:	39 c1                	cmp    %eax,%ecx
f011d21c:	74 17                	je     f011d235 <test_kmalloc_firstfit2+0x1d3>
f011d21e:	83 ec 04             	sub    $0x4,%esp
f011d221:	68 90 ac 13 f0       	push   $0xf013ac90
f011d226:	68 a1 03 00 00       	push   $0x3a1
f011d22b:	68 76 a8 13 f0       	push   $0xf013a876
f011d230:	e8 71 2f fe ff       	call   f01001a6 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011d235:	e8 52 6a fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011d23a:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011d23d:	74 17                	je     f011d256 <test_kmalloc_firstfit2+0x1f4>
f011d23f:	83 ec 04             	sub    $0x4,%esp
f011d242:	68 90 a8 13 f0       	push   $0xf013a890
f011d247:	68 a2 03 00 00       	push   $0x3a2
f011d24c:	68 76 a8 13 f0       	push   $0xf013a876
f011d251:	e8 50 2f fe ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: ");
f011d256:	e8 63 f1 fe ff       	call   f010c3be <sys_calculate_free_frames>
f011d25b:	8b 55 dc             	mov    -0x24(%ebp),%edx
f011d25e:	29 c2                	sub    %eax,%edx
f011d260:	89 d0                	mov    %edx,%eax
f011d262:	3d 00 02 00 00       	cmp    $0x200,%eax
f011d267:	74 17                	je     f011d280 <test_kmalloc_firstfit2+0x21e>
f011d269:	83 ec 04             	sub    $0x4,%esp
f011d26c:	68 c0 ac 13 f0       	push   $0xf013acc0
f011d271:	68 a3 03 00 00       	push   $0x3a3
f011d276:	68 76 a8 13 f0       	push   $0xf013a876
f011d27b:	e8 26 2f fe ff       	call   f01001a6 <_panic>

		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f011d280:	e8 39 f1 fe ff       	call   f010c3be <sys_calculate_free_frames>
f011d285:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011d288:	e8 ff 69 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011d28d:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[1] = kmalloc(2*Mega-kilo);
f011d290:	83 ec 0c             	sub    $0xc,%esp
f011d293:	68 00 fc 1f 00       	push   $0x1ffc00
f011d298:	e8 27 a3 fe ff       	call   f01075c4 <kmalloc>
f011d29d:	83 c4 10             	add    $0x10,%esp
f011d2a0:	89 85 9c fe ff ff    	mov    %eax,-0x164(%ebp)
		if ((uint32) ptr_allocations[1] != (ACTUAL_START + 2*Mega)) panic("Wrong start address for the allocated space... ");
f011d2a6:	8b 85 9c fe ff ff    	mov    -0x164(%ebp),%eax
f011d2ac:	89 c1                	mov    %eax,%ecx
f011d2ae:	c7 45 bc 00 10 00 00 	movl   $0x1000,-0x44(%ebp)
f011d2b5:	8b 45 bc             	mov    -0x44(%ebp),%eax
f011d2b8:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011d2bd:	89 45 b8             	mov    %eax,-0x48(%ebp)
f011d2c0:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011d2c3:	ba 00 00 00 00       	mov    $0x0,%edx
f011d2c8:	f7 75 bc             	divl   -0x44(%ebp)
f011d2cb:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011d2ce:	29 d0                	sub    %edx,%eax
f011d2d0:	89 c3                	mov    %eax,%ebx
f011d2d2:	c7 45 b4 00 10 00 00 	movl   $0x1000,-0x4c(%ebp)
f011d2d9:	a0 bc 0e 6c f0       	mov    0xf06c0ebc,%al
f011d2de:	0f b6 d0             	movzbl %al,%edx
f011d2e1:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f011d2e4:	01 d0                	add    %edx,%eax
f011d2e6:	48                   	dec    %eax
f011d2e7:	89 45 b0             	mov    %eax,-0x50(%ebp)
f011d2ea:	8b 45 b0             	mov    -0x50(%ebp),%eax
f011d2ed:	ba 00 00 00 00       	mov    $0x0,%edx
f011d2f2:	f7 75 b4             	divl   -0x4c(%ebp)
f011d2f5:	8b 45 b0             	mov    -0x50(%ebp),%eax
f011d2f8:	29 d0                	sub    %edx,%eax
f011d2fa:	01 c3                	add    %eax,%ebx
f011d2fc:	c7 45 ac 00 10 00 00 	movl   $0x1000,-0x54(%ebp)
f011d303:	a0 bc 0e 6c f0       	mov    0xf06c0ebc,%al
f011d308:	0f b6 c0             	movzbl %al,%eax
f011d30b:	c1 e0 04             	shl    $0x4,%eax
f011d30e:	89 c2                	mov    %eax,%edx
f011d310:	8b 45 ac             	mov    -0x54(%ebp),%eax
f011d313:	01 d0                	add    %edx,%eax
f011d315:	48                   	dec    %eax
f011d316:	89 45 a8             	mov    %eax,-0x58(%ebp)
f011d319:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011d31c:	ba 00 00 00 00       	mov    $0x0,%edx
f011d321:	f7 75 ac             	divl   -0x54(%ebp)
f011d324:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011d327:	29 d0                	sub    %edx,%eax
f011d329:	01 d8                	add    %ebx,%eax
f011d32b:	2d 00 c0 df 09       	sub    $0x9dfc000,%eax
f011d330:	39 c1                	cmp    %eax,%ecx
f011d332:	74 17                	je     f011d34b <test_kmalloc_firstfit2+0x2e9>
f011d334:	83 ec 04             	sub    $0x4,%esp
f011d337:	68 90 ac 13 f0       	push   $0xf013ac90
f011d33c:	68 a9 03 00 00       	push   $0x3a9
f011d341:	68 76 a8 13 f0       	push   $0xf013a876
f011d346:	e8 5b 2e fe ff       	call   f01001a6 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011d34b:	e8 3c 69 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011d350:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011d353:	74 17                	je     f011d36c <test_kmalloc_firstfit2+0x30a>
f011d355:	83 ec 04             	sub    $0x4,%esp
f011d358:	68 90 a8 13 f0       	push   $0xf013a890
f011d35d:	68 aa 03 00 00       	push   $0x3aa
f011d362:	68 76 a8 13 f0       	push   $0xf013a876
f011d367:	e8 3a 2e fe ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: ");
f011d36c:	e8 4d f0 fe ff       	call   f010c3be <sys_calculate_free_frames>
f011d371:	8b 55 dc             	mov    -0x24(%ebp),%edx
f011d374:	29 c2                	sub    %eax,%edx
f011d376:	89 d0                	mov    %edx,%eax
f011d378:	3d 00 02 00 00       	cmp    $0x200,%eax
f011d37d:	74 17                	je     f011d396 <test_kmalloc_firstfit2+0x334>
f011d37f:	83 ec 04             	sub    $0x4,%esp
f011d382:	68 c0 ac 13 f0       	push   $0xf013acc0
f011d387:	68 ab 03 00 00       	push   $0x3ab
f011d38c:	68 76 a8 13 f0       	push   $0xf013a876
f011d391:	e8 10 2e fe ff       	call   f01001a6 <_panic>

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f011d396:	e8 23 f0 fe ff       	call   f010c3be <sys_calculate_free_frames>
f011d39b:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011d39e:	e8 e9 68 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011d3a3:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[2] = kmalloc(2*kilo);
f011d3a6:	83 ec 0c             	sub    $0xc,%esp
f011d3a9:	68 00 08 00 00       	push   $0x800
f011d3ae:	e8 11 a2 fe ff       	call   f01075c4 <kmalloc>
f011d3b3:	83 c4 10             	add    $0x10,%esp
f011d3b6:	89 85 a0 fe ff ff    	mov    %eax,-0x160(%ebp)
		if ((uint32) ptr_allocations[2] < (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... ");
f011d3bc:	8b 85 a0 fe ff ff    	mov    -0x160(%ebp),%eax
f011d3c2:	89 c1                	mov    %eax,%ecx
f011d3c4:	c7 45 a4 00 10 00 00 	movl   $0x1000,-0x5c(%ebp)
f011d3cb:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f011d3ce:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011d3d3:	89 45 a0             	mov    %eax,-0x60(%ebp)
f011d3d6:	8b 45 a0             	mov    -0x60(%ebp),%eax
f011d3d9:	ba 00 00 00 00       	mov    $0x0,%edx
f011d3de:	f7 75 a4             	divl   -0x5c(%ebp)
f011d3e1:	8b 45 a0             	mov    -0x60(%ebp),%eax
f011d3e4:	29 d0                	sub    %edx,%eax
f011d3e6:	89 c3                	mov    %eax,%ebx
f011d3e8:	c7 45 9c 00 10 00 00 	movl   $0x1000,-0x64(%ebp)
f011d3ef:	a0 bc 0e 6c f0       	mov    0xf06c0ebc,%al
f011d3f4:	0f b6 d0             	movzbl %al,%edx
f011d3f7:	8b 45 9c             	mov    -0x64(%ebp),%eax
f011d3fa:	01 d0                	add    %edx,%eax
f011d3fc:	48                   	dec    %eax
f011d3fd:	89 45 98             	mov    %eax,-0x68(%ebp)
f011d400:	8b 45 98             	mov    -0x68(%ebp),%eax
f011d403:	ba 00 00 00 00       	mov    $0x0,%edx
f011d408:	f7 75 9c             	divl   -0x64(%ebp)
f011d40b:	8b 45 98             	mov    -0x68(%ebp),%eax
f011d40e:	29 d0                	sub    %edx,%eax
f011d410:	01 c3                	add    %eax,%ebx
f011d412:	c7 45 94 00 10 00 00 	movl   $0x1000,-0x6c(%ebp)
f011d419:	a0 bc 0e 6c f0       	mov    0xf06c0ebc,%al
f011d41e:	0f b6 c0             	movzbl %al,%eax
f011d421:	c1 e0 04             	shl    $0x4,%eax
f011d424:	89 c2                	mov    %eax,%edx
f011d426:	8b 45 94             	mov    -0x6c(%ebp),%eax
f011d429:	01 d0                	add    %edx,%eax
f011d42b:	48                   	dec    %eax
f011d42c:	89 45 90             	mov    %eax,-0x70(%ebp)
f011d42f:	8b 45 90             	mov    -0x70(%ebp),%eax
f011d432:	ba 00 00 00 00       	mov    $0x0,%edx
f011d437:	f7 75 94             	divl   -0x6c(%ebp)
f011d43a:	8b 45 90             	mov    -0x70(%ebp),%eax
f011d43d:	29 d0                	sub    %edx,%eax
f011d43f:	01 d8                	add    %ebx,%eax
f011d441:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
f011d446:	39 c1                	cmp    %eax,%ecx
f011d448:	73 17                	jae    f011d461 <test_kmalloc_firstfit2+0x3ff>
f011d44a:	83 ec 04             	sub    $0x4,%esp
f011d44d:	68 90 ac 13 f0       	push   $0xf013ac90
f011d452:	68 b1 03 00 00       	push   $0x3b1
f011d457:	68 76 a8 13 f0       	push   $0xf013a876
f011d45c:	e8 45 2d fe ff       	call   f01001a6 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011d461:	e8 26 68 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011d466:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011d469:	74 17                	je     f011d482 <test_kmalloc_firstfit2+0x420>
f011d46b:	83 ec 04             	sub    $0x4,%esp
f011d46e:	68 90 a8 13 f0       	push   $0xf013a890
f011d473:	68 b2 03 00 00       	push   $0x3b2
f011d478:	68 76 a8 13 f0       	push   $0xf013a876
f011d47d:	e8 24 2d fe ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: ");
f011d482:	e8 37 ef fe ff       	call   f010c3be <sys_calculate_free_frames>
f011d487:	8b 55 dc             	mov    -0x24(%ebp),%edx
f011d48a:	29 c2                	sub    %eax,%edx
f011d48c:	89 d0                	mov    %edx,%eax
f011d48e:	83 f8 01             	cmp    $0x1,%eax
f011d491:	74 17                	je     f011d4aa <test_kmalloc_firstfit2+0x448>
f011d493:	83 ec 04             	sub    $0x4,%esp
f011d496:	68 c0 ac 13 f0       	push   $0xf013acc0
f011d49b:	68 b3 03 00 00       	push   $0x3b3
f011d4a0:	68 76 a8 13 f0       	push   $0xf013a876
f011d4a5:	e8 fc 2c fe ff       	call   f01001a6 <_panic>

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f011d4aa:	e8 0f ef fe ff       	call   f010c3be <sys_calculate_free_frames>
f011d4af:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011d4b2:	e8 d5 67 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011d4b7:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[3] = kmalloc(2*kilo);
f011d4ba:	83 ec 0c             	sub    $0xc,%esp
f011d4bd:	68 00 08 00 00       	push   $0x800
f011d4c2:	e8 fd a0 fe ff       	call   f01075c4 <kmalloc>
f011d4c7:	83 c4 10             	add    $0x10,%esp
f011d4ca:	89 85 a4 fe ff ff    	mov    %eax,-0x15c(%ebp)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... ");
f011d4d0:	8b 85 a4 fe ff ff    	mov    -0x15c(%ebp),%eax
f011d4d6:	89 c1                	mov    %eax,%ecx
f011d4d8:	c7 45 8c 00 10 00 00 	movl   $0x1000,-0x74(%ebp)
f011d4df:	8b 45 8c             	mov    -0x74(%ebp),%eax
f011d4e2:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011d4e7:	89 45 88             	mov    %eax,-0x78(%ebp)
f011d4ea:	8b 45 88             	mov    -0x78(%ebp),%eax
f011d4ed:	ba 00 00 00 00       	mov    $0x0,%edx
f011d4f2:	f7 75 8c             	divl   -0x74(%ebp)
f011d4f5:	8b 45 88             	mov    -0x78(%ebp),%eax
f011d4f8:	29 d0                	sub    %edx,%eax
f011d4fa:	89 c3                	mov    %eax,%ebx
f011d4fc:	c7 45 84 00 10 00 00 	movl   $0x1000,-0x7c(%ebp)
f011d503:	a0 bc 0e 6c f0       	mov    0xf06c0ebc,%al
f011d508:	0f b6 d0             	movzbl %al,%edx
f011d50b:	8b 45 84             	mov    -0x7c(%ebp),%eax
f011d50e:	01 d0                	add    %edx,%eax
f011d510:	48                   	dec    %eax
f011d511:	89 45 80             	mov    %eax,-0x80(%ebp)
f011d514:	8b 45 80             	mov    -0x80(%ebp),%eax
f011d517:	ba 00 00 00 00       	mov    $0x0,%edx
f011d51c:	f7 75 84             	divl   -0x7c(%ebp)
f011d51f:	8b 45 80             	mov    -0x80(%ebp),%eax
f011d522:	29 d0                	sub    %edx,%eax
f011d524:	01 c3                	add    %eax,%ebx
f011d526:	c7 85 7c ff ff ff 00 	movl   $0x1000,-0x84(%ebp)
f011d52d:	10 00 00 
f011d530:	a0 bc 0e 6c f0       	mov    0xf06c0ebc,%al
f011d535:	0f b6 c0             	movzbl %al,%eax
f011d538:	c1 e0 04             	shl    $0x4,%eax
f011d53b:	89 c2                	mov    %eax,%edx
f011d53d:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f011d543:	01 d0                	add    %edx,%eax
f011d545:	48                   	dec    %eax
f011d546:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)
f011d54c:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f011d552:	ba 00 00 00 00       	mov    $0x0,%edx
f011d557:	f7 b5 7c ff ff ff    	divl   -0x84(%ebp)
f011d55d:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f011d563:	29 d0                	sub    %edx,%eax
f011d565:	01 d8                	add    %ebx,%eax
f011d567:	2d 00 b0 bf 09       	sub    $0x9bfb000,%eax
f011d56c:	39 c1                	cmp    %eax,%ecx
f011d56e:	74 17                	je     f011d587 <test_kmalloc_firstfit2+0x525>
f011d570:	83 ec 04             	sub    $0x4,%esp
f011d573:	68 90 ac 13 f0       	push   $0xf013ac90
f011d578:	68 b9 03 00 00       	push   $0x3b9
f011d57d:	68 76 a8 13 f0       	push   $0xf013a876
f011d582:	e8 1f 2c fe ff       	call   f01001a6 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011d587:	e8 00 67 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011d58c:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011d58f:	74 17                	je     f011d5a8 <test_kmalloc_firstfit2+0x546>
f011d591:	83 ec 04             	sub    $0x4,%esp
f011d594:	68 90 a8 13 f0       	push   $0xf013a890
f011d599:	68 ba 03 00 00       	push   $0x3ba
f011d59e:	68 76 a8 13 f0       	push   $0xf013a876
f011d5a3:	e8 fe 2b fe ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: ");
f011d5a8:	e8 11 ee fe ff       	call   f010c3be <sys_calculate_free_frames>
f011d5ad:	8b 55 dc             	mov    -0x24(%ebp),%edx
f011d5b0:	29 c2                	sub    %eax,%edx
f011d5b2:	89 d0                	mov    %edx,%eax
f011d5b4:	83 f8 01             	cmp    $0x1,%eax
f011d5b7:	74 17                	je     f011d5d0 <test_kmalloc_firstfit2+0x56e>
f011d5b9:	83 ec 04             	sub    $0x4,%esp
f011d5bc:	68 c0 ac 13 f0       	push   $0xf013acc0
f011d5c1:	68 bb 03 00 00       	push   $0x3bb
f011d5c6:	68 76 a8 13 f0       	push   $0xf013a876
f011d5cb:	e8 d6 2b fe ff       	call   f01001a6 <_panic>

		//4 KB Hole
		freeFrames = sys_calculate_free_frames() ;
f011d5d0:	e8 e9 ed fe ff       	call   f010c3be <sys_calculate_free_frames>
f011d5d5:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011d5d8:	e8 af 66 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011d5dd:	89 45 d8             	mov    %eax,-0x28(%ebp)
		kfree(ptr_allocations[2]);
f011d5e0:	8b 85 a0 fe ff ff    	mov    -0x160(%ebp),%eax
f011d5e6:	83 ec 0c             	sub    $0xc,%esp
f011d5e9:	50                   	push   %eax
f011d5ea:	e8 ef 9f fe ff       	call   f01075de <kfree>
f011d5ef:	83 c4 10             	add    $0x10,%esp
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011d5f2:	e8 95 66 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011d5f7:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011d5fa:	74 17                	je     f011d613 <test_kmalloc_firstfit2+0x5b1>
f011d5fc:	83 ec 04             	sub    $0x4,%esp
f011d5ff:	68 90 a8 13 f0       	push   $0xf013a890
f011d604:	68 c1 03 00 00       	push   $0x3c1
f011d609:	68 76 a8 13 f0       	push   $0xf013a876
f011d60e:	e8 93 2b fe ff       	call   f01001a6 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 1) panic("Wrong free: ");
f011d613:	e8 a6 ed fe ff       	call   f010c3be <sys_calculate_free_frames>
f011d618:	2b 45 dc             	sub    -0x24(%ebp),%eax
f011d61b:	83 f8 01             	cmp    $0x1,%eax
f011d61e:	74 17                	je     f011d637 <test_kmalloc_firstfit2+0x5d5>
f011d620:	83 ec 04             	sub    $0x4,%esp
f011d623:	68 d3 ac 13 f0       	push   $0xf013acd3
f011d628:	68 c2 03 00 00       	push   $0x3c2
f011d62d:	68 76 a8 13 f0       	push   $0xf013a876
f011d632:	e8 6f 2b fe ff       	call   f01001a6 <_panic>

		//7 KB
		freeFrames = sys_calculate_free_frames() ;
f011d637:	e8 82 ed fe ff       	call   f010c3be <sys_calculate_free_frames>
f011d63c:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011d63f:	e8 48 66 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011d644:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[4] = kmalloc(7*kilo);
f011d647:	83 ec 0c             	sub    $0xc,%esp
f011d64a:	68 00 1c 00 00       	push   $0x1c00
f011d64f:	e8 70 9f fe ff       	call   f01075c4 <kmalloc>
f011d654:	83 c4 10             	add    $0x10,%esp
f011d657:	89 85 a8 fe ff ff    	mov    %eax,-0x158(%ebp)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... ");
f011d65d:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f011d663:	89 c1                	mov    %eax,%ecx
f011d665:	c7 85 74 ff ff ff 00 	movl   $0x1000,-0x8c(%ebp)
f011d66c:	10 00 00 
f011d66f:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f011d675:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011d67a:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
f011d680:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f011d686:	ba 00 00 00 00       	mov    $0x0,%edx
f011d68b:	f7 b5 74 ff ff ff    	divl   -0x8c(%ebp)
f011d691:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f011d697:	29 d0                	sub    %edx,%eax
f011d699:	89 c3                	mov    %eax,%ebx
f011d69b:	c7 85 6c ff ff ff 00 	movl   $0x1000,-0x94(%ebp)
f011d6a2:	10 00 00 
f011d6a5:	a0 bc 0e 6c f0       	mov    0xf06c0ebc,%al
f011d6aa:	0f b6 d0             	movzbl %al,%edx
f011d6ad:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f011d6b3:	01 d0                	add    %edx,%eax
f011d6b5:	48                   	dec    %eax
f011d6b6:	89 85 68 ff ff ff    	mov    %eax,-0x98(%ebp)
f011d6bc:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f011d6c2:	ba 00 00 00 00       	mov    $0x0,%edx
f011d6c7:	f7 b5 6c ff ff ff    	divl   -0x94(%ebp)
f011d6cd:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f011d6d3:	29 d0                	sub    %edx,%eax
f011d6d5:	01 c3                	add    %eax,%ebx
f011d6d7:	c7 85 64 ff ff ff 00 	movl   $0x1000,-0x9c(%ebp)
f011d6de:	10 00 00 
f011d6e1:	a0 bc 0e 6c f0       	mov    0xf06c0ebc,%al
f011d6e6:	0f b6 c0             	movzbl %al,%eax
f011d6e9:	c1 e0 04             	shl    $0x4,%eax
f011d6ec:	89 c2                	mov    %eax,%edx
f011d6ee:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f011d6f4:	01 d0                	add    %edx,%eax
f011d6f6:	48                   	dec    %eax
f011d6f7:	89 85 60 ff ff ff    	mov    %eax,-0xa0(%ebp)
f011d6fd:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f011d703:	ba 00 00 00 00       	mov    $0x0,%edx
f011d708:	f7 b5 64 ff ff ff    	divl   -0x9c(%ebp)
f011d70e:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f011d714:	29 d0                	sub    %edx,%eax
f011d716:	01 d8                	add    %ebx,%eax
f011d718:	2d 00 a0 bf 09       	sub    $0x9bfa000,%eax
f011d71d:	39 c1                	cmp    %eax,%ecx
f011d71f:	74 17                	je     f011d738 <test_kmalloc_firstfit2+0x6d6>
f011d721:	83 ec 04             	sub    $0x4,%esp
f011d724:	68 90 ac 13 f0       	push   $0xf013ac90
f011d729:	68 c8 03 00 00       	push   $0x3c8
f011d72e:	68 76 a8 13 f0       	push   $0xf013a876
f011d733:	e8 6e 2a fe ff       	call   f01001a6 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011d738:	e8 4f 65 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011d73d:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011d740:	74 17                	je     f011d759 <test_kmalloc_firstfit2+0x6f7>
f011d742:	83 ec 04             	sub    $0x4,%esp
f011d745:	68 90 a8 13 f0       	push   $0xf013a890
f011d74a:	68 c9 03 00 00       	push   $0x3c9
f011d74f:	68 76 a8 13 f0       	push   $0xf013a876
f011d754:	e8 4d 2a fe ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: ");
f011d759:	e8 60 ec fe ff       	call   f010c3be <sys_calculate_free_frames>
f011d75e:	8b 55 dc             	mov    -0x24(%ebp),%edx
f011d761:	29 c2                	sub    %eax,%edx
f011d763:	89 d0                	mov    %edx,%eax
f011d765:	83 f8 02             	cmp    $0x2,%eax
f011d768:	74 17                	je     f011d781 <test_kmalloc_firstfit2+0x71f>
f011d76a:	83 ec 04             	sub    $0x4,%esp
f011d76d:	68 c0 ac 13 f0       	push   $0xf013acc0
f011d772:	68 ca 03 00 00       	push   $0x3ca
f011d777:	68 76 a8 13 f0       	push   $0xf013a876
f011d77c:	e8 25 2a fe ff       	call   f01001a6 <_panic>

		//2 MB Hole
		freeFrames = sys_calculate_free_frames() ;
f011d781:	e8 38 ec fe ff       	call   f010c3be <sys_calculate_free_frames>
f011d786:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011d789:	e8 fe 64 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011d78e:	89 45 d8             	mov    %eax,-0x28(%ebp)
		kfree(ptr_allocations[0]);
f011d791:	8b 85 98 fe ff ff    	mov    -0x168(%ebp),%eax
f011d797:	83 ec 0c             	sub    $0xc,%esp
f011d79a:	50                   	push   %eax
f011d79b:	e8 3e 9e fe ff       	call   f01075de <kfree>
f011d7a0:	83 c4 10             	add    $0x10,%esp
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011d7a3:	e8 e4 64 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011d7a8:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011d7ab:	74 17                	je     f011d7c4 <test_kmalloc_firstfit2+0x762>
f011d7ad:	83 ec 04             	sub    $0x4,%esp
f011d7b0:	68 90 a8 13 f0       	push   $0xf013a890
f011d7b5:	68 d0 03 00 00       	push   $0x3d0
f011d7ba:	68 76 a8 13 f0       	push   $0xf013a876
f011d7bf:	e8 e2 29 fe ff       	call   f01001a6 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512) panic("Wrong free: ");
f011d7c4:	e8 f5 eb fe ff       	call   f010c3be <sys_calculate_free_frames>
f011d7c9:	2b 45 dc             	sub    -0x24(%ebp),%eax
f011d7cc:	3d 00 02 00 00       	cmp    $0x200,%eax
f011d7d1:	74 17                	je     f011d7ea <test_kmalloc_firstfit2+0x788>
f011d7d3:	83 ec 04             	sub    $0x4,%esp
f011d7d6:	68 d3 ac 13 f0       	push   $0xf013acd3
f011d7db:	68 d1 03 00 00       	push   $0x3d1
f011d7e0:	68 76 a8 13 f0       	push   $0xf013a876
f011d7e5:	e8 bc 29 fe ff       	call   f01001a6 <_panic>

		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f011d7ea:	e8 cf eb fe ff       	call   f010c3be <sys_calculate_free_frames>
f011d7ef:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011d7f2:	e8 95 64 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011d7f7:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[5] = kmalloc(3*Mega-kilo);
f011d7fa:	83 ec 0c             	sub    $0xc,%esp
f011d7fd:	68 00 fc 2f 00       	push   $0x2ffc00
f011d802:	e8 bd 9d fe ff       	call   f01075c4 <kmalloc>
f011d807:	83 c4 10             	add    $0x10,%esp
f011d80a:	89 85 ac fe ff ff    	mov    %eax,-0x154(%ebp)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo)) panic("Wrong start address for the allocated space... ");
f011d810:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f011d816:	89 c1                	mov    %eax,%ecx
f011d818:	c7 85 5c ff ff ff 00 	movl   $0x1000,-0xa4(%ebp)
f011d81f:	10 00 00 
f011d822:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f011d828:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011d82d:	89 85 58 ff ff ff    	mov    %eax,-0xa8(%ebp)
f011d833:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f011d839:	ba 00 00 00 00       	mov    $0x0,%edx
f011d83e:	f7 b5 5c ff ff ff    	divl   -0xa4(%ebp)
f011d844:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f011d84a:	29 d0                	sub    %edx,%eax
f011d84c:	89 c3                	mov    %eax,%ebx
f011d84e:	c7 85 54 ff ff ff 00 	movl   $0x1000,-0xac(%ebp)
f011d855:	10 00 00 
f011d858:	a0 bc 0e 6c f0       	mov    0xf06c0ebc,%al
f011d85d:	0f b6 d0             	movzbl %al,%edx
f011d860:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f011d866:	01 d0                	add    %edx,%eax
f011d868:	48                   	dec    %eax
f011d869:	89 85 50 ff ff ff    	mov    %eax,-0xb0(%ebp)
f011d86f:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f011d875:	ba 00 00 00 00       	mov    $0x0,%edx
f011d87a:	f7 b5 54 ff ff ff    	divl   -0xac(%ebp)
f011d880:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f011d886:	29 d0                	sub    %edx,%eax
f011d888:	01 c3                	add    %eax,%ebx
f011d88a:	c7 85 4c ff ff ff 00 	movl   $0x1000,-0xb4(%ebp)
f011d891:	10 00 00 
f011d894:	a0 bc 0e 6c f0       	mov    0xf06c0ebc,%al
f011d899:	0f b6 c0             	movzbl %al,%eax
f011d89c:	c1 e0 04             	shl    $0x4,%eax
f011d89f:	89 c2                	mov    %eax,%edx
f011d8a1:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f011d8a7:	01 d0                	add    %edx,%eax
f011d8a9:	48                   	dec    %eax
f011d8aa:	89 85 48 ff ff ff    	mov    %eax,-0xb8(%ebp)
f011d8b0:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f011d8b6:	ba 00 00 00 00       	mov    $0x0,%edx
f011d8bb:	f7 b5 4c ff ff ff    	divl   -0xb4(%ebp)
f011d8c1:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f011d8c7:	29 d0                	sub    %edx,%eax
f011d8c9:	01 d8                	add    %ebx,%eax
f011d8cb:	2d 00 80 bf 09       	sub    $0x9bf8000,%eax
f011d8d0:	39 c1                	cmp    %eax,%ecx
f011d8d2:	74 17                	je     f011d8eb <test_kmalloc_firstfit2+0x889>
f011d8d4:	83 ec 04             	sub    $0x4,%esp
f011d8d7:	68 90 ac 13 f0       	push   $0xf013ac90
f011d8dc:	68 d7 03 00 00       	push   $0x3d7
f011d8e1:	68 76 a8 13 f0       	push   $0xf013a876
f011d8e6:	e8 bb 28 fe ff       	call   f01001a6 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011d8eb:	e8 9c 63 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011d8f0:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011d8f3:	74 17                	je     f011d90c <test_kmalloc_firstfit2+0x8aa>
f011d8f5:	83 ec 04             	sub    $0x4,%esp
f011d8f8:	68 90 a8 13 f0       	push   $0xf013a890
f011d8fd:	68 d8 03 00 00       	push   $0x3d8
f011d902:	68 76 a8 13 f0       	push   $0xf013a876
f011d907:	e8 9a 28 fe ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=  3*Mega/PAGE_SIZE) panic("Wrong allocation: ");
f011d90c:	e8 ad ea fe ff       	call   f010c3be <sys_calculate_free_frames>
f011d911:	8b 55 dc             	mov    -0x24(%ebp),%edx
f011d914:	29 c2                	sub    %eax,%edx
f011d916:	89 d0                	mov    %edx,%eax
f011d918:	3d 00 03 00 00       	cmp    $0x300,%eax
f011d91d:	74 17                	je     f011d936 <test_kmalloc_firstfit2+0x8d4>
f011d91f:	83 ec 04             	sub    $0x4,%esp
f011d922:	68 c0 ac 13 f0       	push   $0xf013acc0
f011d927:	68 d9 03 00 00       	push   $0x3d9
f011d92c:	68 76 a8 13 f0       	push   $0xf013a876
f011d931:	e8 70 28 fe ff       	call   f01001a6 <_panic>

		//2 MB + 6 KB
		freeFrames = sys_calculate_free_frames() ;
f011d936:	e8 83 ea fe ff       	call   f010c3be <sys_calculate_free_frames>
f011d93b:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011d93e:	e8 49 63 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011d943:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[6] = kmalloc(2*Mega + 6*kilo);
f011d946:	83 ec 0c             	sub    $0xc,%esp
f011d949:	68 00 18 20 00       	push   $0x201800
f011d94e:	e8 71 9c fe ff       	call   f01075c4 <kmalloc>
f011d953:	83 c4 10             	add    $0x10,%esp
f011d956:	89 85 b0 fe ff ff    	mov    %eax,-0x150(%ebp)
		if ((uint32) ptr_allocations[6] != (ACTUAL_START + 7*Mega + 16*kilo)) panic("Wrong start address for the allocated space... ");
f011d95c:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f011d962:	89 c1                	mov    %eax,%ecx
f011d964:	c7 85 44 ff ff ff 00 	movl   $0x1000,-0xbc(%ebp)
f011d96b:	10 00 00 
f011d96e:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f011d974:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011d979:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%ebp)
f011d97f:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f011d985:	ba 00 00 00 00       	mov    $0x0,%edx
f011d98a:	f7 b5 44 ff ff ff    	divl   -0xbc(%ebp)
f011d990:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f011d996:	29 d0                	sub    %edx,%eax
f011d998:	89 c3                	mov    %eax,%ebx
f011d99a:	c7 85 3c ff ff ff 00 	movl   $0x1000,-0xc4(%ebp)
f011d9a1:	10 00 00 
f011d9a4:	a0 bc 0e 6c f0       	mov    0xf06c0ebc,%al
f011d9a9:	0f b6 d0             	movzbl %al,%edx
f011d9ac:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f011d9b2:	01 d0                	add    %edx,%eax
f011d9b4:	48                   	dec    %eax
f011d9b5:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
f011d9bb:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f011d9c1:	ba 00 00 00 00       	mov    $0x0,%edx
f011d9c6:	f7 b5 3c ff ff ff    	divl   -0xc4(%ebp)
f011d9cc:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f011d9d2:	29 d0                	sub    %edx,%eax
f011d9d4:	01 c3                	add    %eax,%ebx
f011d9d6:	c7 85 34 ff ff ff 00 	movl   $0x1000,-0xcc(%ebp)
f011d9dd:	10 00 00 
f011d9e0:	a0 bc 0e 6c f0       	mov    0xf06c0ebc,%al
f011d9e5:	0f b6 c0             	movzbl %al,%eax
f011d9e8:	c1 e0 04             	shl    $0x4,%eax
f011d9eb:	89 c2                	mov    %eax,%edx
f011d9ed:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f011d9f3:	01 d0                	add    %edx,%eax
f011d9f5:	48                   	dec    %eax
f011d9f6:	89 85 30 ff ff ff    	mov    %eax,-0xd0(%ebp)
f011d9fc:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f011da02:	ba 00 00 00 00       	mov    $0x0,%edx
f011da07:	f7 b5 34 ff ff ff    	divl   -0xcc(%ebp)
f011da0d:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f011da13:	29 d0                	sub    %edx,%eax
f011da15:	01 d8                	add    %ebx,%eax
f011da17:	2d 00 80 8f 09       	sub    $0x98f8000,%eax
f011da1c:	39 c1                	cmp    %eax,%ecx
f011da1e:	74 17                	je     f011da37 <test_kmalloc_firstfit2+0x9d5>
f011da20:	83 ec 04             	sub    $0x4,%esp
f011da23:	68 90 ac 13 f0       	push   $0xf013ac90
f011da28:	68 df 03 00 00       	push   $0x3df
f011da2d:	68 76 a8 13 f0       	push   $0xf013a876
f011da32:	e8 6f 27 fe ff       	call   f01001a6 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011da37:	e8 50 62 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011da3c:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011da3f:	74 17                	je     f011da58 <test_kmalloc_firstfit2+0x9f6>
f011da41:	83 ec 04             	sub    $0x4,%esp
f011da44:	68 90 a8 13 f0       	push   $0xf013a890
f011da49:	68 e0 03 00 00       	push   $0x3e0
f011da4e:	68 76 a8 13 f0       	push   $0xf013a876
f011da53:	e8 4e 27 fe ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=  514) panic("Wrong allocation: ");
f011da58:	e8 61 e9 fe ff       	call   f010c3be <sys_calculate_free_frames>
f011da5d:	8b 55 dc             	mov    -0x24(%ebp),%edx
f011da60:	29 c2                	sub    %eax,%edx
f011da62:	89 d0                	mov    %edx,%eax
f011da64:	3d 02 02 00 00       	cmp    $0x202,%eax
f011da69:	74 17                	je     f011da82 <test_kmalloc_firstfit2+0xa20>
f011da6b:	83 ec 04             	sub    $0x4,%esp
f011da6e:	68 c0 ac 13 f0       	push   $0xf013acc0
f011da73:	68 e1 03 00 00       	push   $0x3e1
f011da78:	68 76 a8 13 f0       	push   $0xf013a876
f011da7d:	e8 24 27 fe ff       	call   f01001a6 <_panic>

		//3 MB Hole
		freeFrames = sys_calculate_free_frames() ;
f011da82:	e8 37 e9 fe ff       	call   f010c3be <sys_calculate_free_frames>
f011da87:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011da8a:	e8 fd 61 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011da8f:	89 45 d8             	mov    %eax,-0x28(%ebp)
		kfree(ptr_allocations[5]);
f011da92:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f011da98:	83 ec 0c             	sub    $0xc,%esp
f011da9b:	50                   	push   %eax
f011da9c:	e8 3d 9b fe ff       	call   f01075de <kfree>
f011daa1:	83 c4 10             	add    $0x10,%esp
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011daa4:	e8 e3 61 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011daa9:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011daac:	74 17                	je     f011dac5 <test_kmalloc_firstfit2+0xa63>
f011daae:	83 ec 04             	sub    $0x4,%esp
f011dab1:	68 90 a8 13 f0       	push   $0xf013a890
f011dab6:	68 e7 03 00 00       	push   $0x3e7
f011dabb:	68 76 a8 13 f0       	push   $0xf013a876
f011dac0:	e8 e1 26 fe ff       	call   f01001a6 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 768) panic("Wrong free: ");
f011dac5:	e8 f4 e8 fe ff       	call   f010c3be <sys_calculate_free_frames>
f011daca:	2b 45 dc             	sub    -0x24(%ebp),%eax
f011dacd:	3d 00 03 00 00       	cmp    $0x300,%eax
f011dad2:	74 17                	je     f011daeb <test_kmalloc_firstfit2+0xa89>
f011dad4:	83 ec 04             	sub    $0x4,%esp
f011dad7:	68 d3 ac 13 f0       	push   $0xf013acd3
f011dadc:	68 e8 03 00 00       	push   $0x3e8
f011dae1:	68 76 a8 13 f0       	push   $0xf013a876
f011dae6:	e8 bb 26 fe ff       	call   f01001a6 <_panic>

		//2 MB Hole [Resulting Hole = 2 MB + 2 MB + 4 KB = 4 MB + 4 KB]
		freeFrames = sys_calculate_free_frames() ;
f011daeb:	e8 ce e8 fe ff       	call   f010c3be <sys_calculate_free_frames>
f011daf0:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011daf3:	e8 94 61 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011daf8:	89 45 d8             	mov    %eax,-0x28(%ebp)
		kfree(ptr_allocations[1]);
f011dafb:	8b 85 9c fe ff ff    	mov    -0x164(%ebp),%eax
f011db01:	83 ec 0c             	sub    $0xc,%esp
f011db04:	50                   	push   %eax
f011db05:	e8 d4 9a fe ff       	call   f01075de <kfree>
f011db0a:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 512) panic("Wrong free: ");
f011db0d:	e8 ac e8 fe ff       	call   f010c3be <sys_calculate_free_frames>
f011db12:	2b 45 dc             	sub    -0x24(%ebp),%eax
f011db15:	3d 00 02 00 00       	cmp    $0x200,%eax
f011db1a:	74 17                	je     f011db33 <test_kmalloc_firstfit2+0xad1>
f011db1c:	83 ec 04             	sub    $0x4,%esp
f011db1f:	68 d3 ac 13 f0       	push   $0xf013acd3
f011db24:	68 ee 03 00 00       	push   $0x3ee
f011db29:	68 76 a8 13 f0       	push   $0xf013a876
f011db2e:	e8 73 26 fe ff       	call   f01001a6 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011db33:	e8 54 61 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011db38:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011db3b:	74 17                	je     f011db54 <test_kmalloc_firstfit2+0xaf2>
f011db3d:	83 ec 04             	sub    $0x4,%esp
f011db40:	68 90 a8 13 f0       	push   $0xf013a890
f011db45:	68 ef 03 00 00       	push   $0x3ef
f011db4a:	68 76 a8 13 f0       	push   $0xf013a876
f011db4f:	e8 52 26 fe ff       	call   f01001a6 <_panic>

		//5 MB
		freeFrames = sys_calculate_free_frames() ;
f011db54:	e8 65 e8 fe ff       	call   f010c3be <sys_calculate_free_frames>
f011db59:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011db5c:	e8 2b 61 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011db61:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[7] = kmalloc(5*Mega-kilo);
f011db64:	83 ec 0c             	sub    $0xc,%esp
f011db67:	68 00 fc 4f 00       	push   $0x4ffc00
f011db6c:	e8 53 9a fe ff       	call   f01075c4 <kmalloc>
f011db71:	83 c4 10             	add    $0x10,%esp
f011db74:	89 85 b4 fe ff ff    	mov    %eax,-0x14c(%ebp)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 9*Mega + 24*kilo)) panic("Wrong start address for the allocated space... ");
f011db7a:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f011db80:	89 c1                	mov    %eax,%ecx
f011db82:	c7 85 2c ff ff ff 00 	movl   $0x1000,-0xd4(%ebp)
f011db89:	10 00 00 
f011db8c:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f011db92:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011db97:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%ebp)
f011db9d:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f011dba3:	ba 00 00 00 00       	mov    $0x0,%edx
f011dba8:	f7 b5 2c ff ff ff    	divl   -0xd4(%ebp)
f011dbae:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f011dbb4:	29 d0                	sub    %edx,%eax
f011dbb6:	89 c3                	mov    %eax,%ebx
f011dbb8:	c7 85 24 ff ff ff 00 	movl   $0x1000,-0xdc(%ebp)
f011dbbf:	10 00 00 
f011dbc2:	a0 bc 0e 6c f0       	mov    0xf06c0ebc,%al
f011dbc7:	0f b6 d0             	movzbl %al,%edx
f011dbca:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011dbd0:	01 d0                	add    %edx,%eax
f011dbd2:	48                   	dec    %eax
f011dbd3:	89 85 20 ff ff ff    	mov    %eax,-0xe0(%ebp)
f011dbd9:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f011dbdf:	ba 00 00 00 00       	mov    $0x0,%edx
f011dbe4:	f7 b5 24 ff ff ff    	divl   -0xdc(%ebp)
f011dbea:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f011dbf0:	29 d0                	sub    %edx,%eax
f011dbf2:	01 c3                	add    %eax,%ebx
f011dbf4:	c7 85 1c ff ff ff 00 	movl   $0x1000,-0xe4(%ebp)
f011dbfb:	10 00 00 
f011dbfe:	a0 bc 0e 6c f0       	mov    0xf06c0ebc,%al
f011dc03:	0f b6 c0             	movzbl %al,%eax
f011dc06:	c1 e0 04             	shl    $0x4,%eax
f011dc09:	89 c2                	mov    %eax,%edx
f011dc0b:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f011dc11:	01 d0                	add    %edx,%eax
f011dc13:	48                   	dec    %eax
f011dc14:	89 85 18 ff ff ff    	mov    %eax,-0xe8(%ebp)
f011dc1a:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f011dc20:	ba 00 00 00 00       	mov    $0x0,%edx
f011dc25:	f7 b5 1c ff ff ff    	divl   -0xe4(%ebp)
f011dc2b:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f011dc31:	29 d0                	sub    %edx,%eax
f011dc33:	01 d8                	add    %ebx,%eax
f011dc35:	2d 00 60 6f 09       	sub    $0x96f6000,%eax
f011dc3a:	39 c1                	cmp    %eax,%ecx
f011dc3c:	74 17                	je     f011dc55 <test_kmalloc_firstfit2+0xbf3>
f011dc3e:	83 ec 04             	sub    $0x4,%esp
f011dc41:	68 90 ac 13 f0       	push   $0xf013ac90
f011dc46:	68 f5 03 00 00       	push   $0x3f5
f011dc4b:	68 76 a8 13 f0       	push   $0xf013a876
f011dc50:	e8 51 25 fe ff       	call   f01001a6 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011dc55:	e8 32 60 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011dc5a:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011dc5d:	74 17                	je     f011dc76 <test_kmalloc_firstfit2+0xc14>
f011dc5f:	83 ec 04             	sub    $0x4,%esp
f011dc62:	68 90 a8 13 f0       	push   $0xf013a890
f011dc67:	68 f6 03 00 00       	push   $0x3f6
f011dc6c:	68 76 a8 13 f0       	push   $0xf013a876
f011dc71:	e8 30 25 fe ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=   5*Mega/PAGE_SIZE) panic("Wrong allocation: ");
f011dc76:	e8 43 e7 fe ff       	call   f010c3be <sys_calculate_free_frames>
f011dc7b:	8b 55 dc             	mov    -0x24(%ebp),%edx
f011dc7e:	29 c2                	sub    %eax,%edx
f011dc80:	89 d0                	mov    %edx,%eax
f011dc82:	3d 00 05 00 00       	cmp    $0x500,%eax
f011dc87:	74 17                	je     f011dca0 <test_kmalloc_firstfit2+0xc3e>
f011dc89:	83 ec 04             	sub    $0x4,%esp
f011dc8c:	68 c0 ac 13 f0       	push   $0xf013acc0
f011dc91:	68 f7 03 00 00       	push   $0x3f7
f011dc96:	68 76 a8 13 f0       	push   $0xf013a876
f011dc9b:	e8 06 25 fe ff       	call   f01001a6 <_panic>
//		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
//		if ((sys_calculate_free_frames() - freeFrames) != 514) panic("Wrong free: ");

		//[FIRST FIT Case]
		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f011dca0:	e8 19 e7 fe ff       	call   f010c3be <sys_calculate_free_frames>
f011dca5:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011dca8:	e8 df 5f fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011dcad:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[8] = kmalloc(3*Mega-kilo);
f011dcb0:	83 ec 0c             	sub    $0xc,%esp
f011dcb3:	68 00 fc 2f 00       	push   $0x2ffc00
f011dcb8:	e8 07 99 fe ff       	call   f01075c4 <kmalloc>
f011dcbd:	83 c4 10             	add    $0x10,%esp
f011dcc0:	89 85 b8 fe ff ff    	mov    %eax,-0x148(%ebp)
		if ((uint32) ptr_allocations[8] != (ACTUAL_START)) panic("Wrong start address for the allocated space... ");
f011dcc6:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f011dccc:	89 c1                	mov    %eax,%ecx
f011dcce:	c7 85 14 ff ff ff 00 	movl   $0x1000,-0xec(%ebp)
f011dcd5:	10 00 00 
f011dcd8:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f011dcde:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011dce3:	89 85 10 ff ff ff    	mov    %eax,-0xf0(%ebp)
f011dce9:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f011dcef:	ba 00 00 00 00       	mov    $0x0,%edx
f011dcf4:	f7 b5 14 ff ff ff    	divl   -0xec(%ebp)
f011dcfa:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f011dd00:	29 d0                	sub    %edx,%eax
f011dd02:	89 c3                	mov    %eax,%ebx
f011dd04:	c7 85 0c ff ff ff 00 	movl   $0x1000,-0xf4(%ebp)
f011dd0b:	10 00 00 
f011dd0e:	a0 bc 0e 6c f0       	mov    0xf06c0ebc,%al
f011dd13:	0f b6 d0             	movzbl %al,%edx
f011dd16:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f011dd1c:	01 d0                	add    %edx,%eax
f011dd1e:	48                   	dec    %eax
f011dd1f:	89 85 08 ff ff ff    	mov    %eax,-0xf8(%ebp)
f011dd25:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f011dd2b:	ba 00 00 00 00       	mov    $0x0,%edx
f011dd30:	f7 b5 0c ff ff ff    	divl   -0xf4(%ebp)
f011dd36:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f011dd3c:	29 d0                	sub    %edx,%eax
f011dd3e:	01 c3                	add    %eax,%ebx
f011dd40:	c7 85 04 ff ff ff 00 	movl   $0x1000,-0xfc(%ebp)
f011dd47:	10 00 00 
f011dd4a:	a0 bc 0e 6c f0       	mov    0xf06c0ebc,%al
f011dd4f:	0f b6 c0             	movzbl %al,%eax
f011dd52:	c1 e0 04             	shl    $0x4,%eax
f011dd55:	89 c2                	mov    %eax,%edx
f011dd57:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f011dd5d:	01 d0                	add    %edx,%eax
f011dd5f:	48                   	dec    %eax
f011dd60:	89 85 00 ff ff ff    	mov    %eax,-0x100(%ebp)
f011dd66:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f011dd6c:	ba 00 00 00 00       	mov    $0x0,%edx
f011dd71:	f7 b5 04 ff ff ff    	divl   -0xfc(%ebp)
f011dd77:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f011dd7d:	29 d0                	sub    %edx,%eax
f011dd7f:	01 d8                	add    %ebx,%eax
f011dd81:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f011dd86:	39 c1                	cmp    %eax,%ecx
f011dd88:	74 17                	je     f011dda1 <test_kmalloc_firstfit2+0xd3f>
f011dd8a:	83 ec 04             	sub    $0x4,%esp
f011dd8d:	68 90 ac 13 f0       	push   $0xf013ac90
f011dd92:	68 05 04 00 00       	push   $0x405
f011dd97:	68 76 a8 13 f0       	push   $0xf013a876
f011dd9c:	e8 05 24 fe ff       	call   f01001a6 <_panic>
		if((freeDiskFrames - pf_calculate_free_frames()) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011dda1:	e8 e6 5e fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011dda6:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011dda9:	74 17                	je     f011ddc2 <test_kmalloc_firstfit2+0xd60>
f011ddab:	83 ec 04             	sub    $0x4,%esp
f011ddae:	68 90 a8 13 f0       	push   $0xf013a890
f011ddb3:	68 06 04 00 00       	push   $0x406
f011ddb8:	68 76 a8 13 f0       	push   $0xf013a876
f011ddbd:	e8 e4 23 fe ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=   3*Mega/PAGE_SIZE) panic("Wrong allocation: ");
f011ddc2:	e8 f7 e5 fe ff       	call   f010c3be <sys_calculate_free_frames>
f011ddc7:	8b 55 dc             	mov    -0x24(%ebp),%edx
f011ddca:	29 c2                	sub    %eax,%edx
f011ddcc:	89 d0                	mov    %edx,%eax
f011ddce:	3d 00 03 00 00       	cmp    $0x300,%eax
f011ddd3:	74 17                	je     f011ddec <test_kmalloc_firstfit2+0xd8a>
f011ddd5:	83 ec 04             	sub    $0x4,%esp
f011ddd8:	68 c0 ac 13 f0       	push   $0xf013acc0
f011dddd:	68 07 04 00 00       	push   $0x407
f011dde2:	68 76 a8 13 f0       	push   $0xf013a876
f011dde7:	e8 ba 23 fe ff       	call   f01001a6 <_panic>
	}
	//	b) Attempt to allocate large segment with no suitable fragment to fit on
	{
		//Large Allocation
		ptr_allocations[9] = kmalloc((KERNEL_HEAP_MAX - ACTUAL_START - 14*Mega));
f011ddec:	c7 85 fc fe ff ff 00 	movl   $0x1000,-0x104(%ebp)
f011ddf3:	10 00 00 
f011ddf6:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f011ddfc:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011de01:	89 85 f8 fe ff ff    	mov    %eax,-0x108(%ebp)
f011de07:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f011de0d:	ba 00 00 00 00       	mov    $0x0,%edx
f011de12:	f7 b5 fc fe ff ff    	divl   -0x104(%ebp)
f011de18:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f011de1e:	29 d0                	sub    %edx,%eax
f011de20:	89 c1                	mov    %eax,%ecx
f011de22:	c7 85 f4 fe ff ff 00 	movl   $0x1000,-0x10c(%ebp)
f011de29:	10 00 00 
f011de2c:	a0 bc 0e 6c f0       	mov    0xf06c0ebc,%al
f011de31:	0f b6 d0             	movzbl %al,%edx
f011de34:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f011de3a:	01 d0                	add    %edx,%eax
f011de3c:	48                   	dec    %eax
f011de3d:	89 85 f0 fe ff ff    	mov    %eax,-0x110(%ebp)
f011de43:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f011de49:	ba 00 00 00 00       	mov    $0x0,%edx
f011de4e:	f7 b5 f4 fe ff ff    	divl   -0x10c(%ebp)
f011de54:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f011de5a:	29 d0                	sub    %edx,%eax
f011de5c:	01 c1                	add    %eax,%ecx
f011de5e:	c7 85 ec fe ff ff 00 	movl   $0x1000,-0x114(%ebp)
f011de65:	10 00 00 
f011de68:	a0 bc 0e 6c f0       	mov    0xf06c0ebc,%al
f011de6d:	0f b6 c0             	movzbl %al,%eax
f011de70:	c1 e0 04             	shl    $0x4,%eax
f011de73:	89 c2                	mov    %eax,%edx
f011de75:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f011de7b:	01 d0                	add    %edx,%eax
f011de7d:	48                   	dec    %eax
f011de7e:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)
f011de84:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f011de8a:	ba 00 00 00 00       	mov    $0x0,%edx
f011de8f:	f7 b5 ec fe ff ff    	divl   -0x114(%ebp)
f011de95:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f011de9b:	29 d0                	sub    %edx,%eax
f011de9d:	01 c8                	add    %ecx,%eax
f011de9f:	ba 00 b0 1f 09       	mov    $0x91fb000,%edx
f011dea4:	29 c2                	sub    %eax,%edx
f011dea6:	89 d0                	mov    %edx,%eax
f011dea8:	83 ec 0c             	sub    $0xc,%esp
f011deab:	50                   	push   %eax
f011deac:	e8 13 97 fe ff       	call   f01075c4 <kmalloc>
f011deb1:	83 c4 10             	add    $0x10,%esp
f011deb4:	89 85 bc fe ff ff    	mov    %eax,-0x144(%ebp)
		if (ptr_allocations[9] != NULL) panic("Kmalloc: Attempt to allocate large segment with no suitable fragment to fit on, should return NULL");
f011deba:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f011dec0:	85 c0                	test   %eax,%eax
f011dec2:	74 17                	je     f011dedb <test_kmalloc_firstfit2+0xe79>
f011dec4:	83 ec 04             	sub    $0x4,%esp
f011dec7:	68 c0 ad 13 f0       	push   $0xf013adc0
f011decc:	68 0d 04 00 00       	push   $0x40d
f011ded1:	68 76 a8 13 f0       	push   $0xf013a876
f011ded6:	e8 cb 22 fe ff       	call   f01001a6 <_panic>

		cprintf("Congratulations!! test FIRST FIT allocation (2) completed successfully.\n");
f011dedb:	83 ec 0c             	sub    $0xc,%esp
f011dede:	68 00 af 13 f0       	push   $0xf013af00
f011dee3:	e8 45 2d fe ff       	call   f0100c2d <cprintf>
f011dee8:	83 c4 10             	add    $0x10,%esp
	}
	return 1;
f011deeb:	b8 01 00 00 00       	mov    $0x1,%eax
}
f011def0:	8d 65 f8             	lea    -0x8(%ebp),%esp
f011def3:	5b                   	pop    %ebx
f011def4:	5f                   	pop    %edi
f011def5:	5d                   	pop    %ebp
f011def6:	c3                   	ret    

f011def7 <test_kmalloc_worstfit>:

int test_kmalloc_worstfit()
{
f011def7:	55                   	push   %ebp
f011def8:	89 e5                	mov    %esp,%ebp
f011defa:	57                   	push   %edi
f011defb:	53                   	push   %ebx
f011defc:	81 ec 50 04 00 00    	sub    $0x450,%esp
	cprintf("==============================================\n");
f011df02:	83 ec 0c             	sub    $0xc,%esp
f011df05:	68 b8 a7 13 f0       	push   $0xf013a7b8
f011df0a:	e8 1e 2d fe ff       	call   f0100c2d <cprintf>
f011df0f:	83 c4 10             	add    $0x10,%esp
	cprintf("MAKE SURE to have a FRESH RUN for this test\n(i.e. don't run any program/test before it)\n");
f011df12:	83 ec 0c             	sub    $0xc,%esp
f011df15:	68 e8 a7 13 f0       	push   $0xf013a7e8
f011df1a:	e8 0e 2d fe ff       	call   f0100c2d <cprintf>
f011df1f:	83 c4 10             	add    $0x10,%esp
	cprintf("==============================================\n");
f011df22:	83 ec 0c             	sub    $0xc,%esp
f011df25:	68 b8 a7 13 f0       	push   $0xf013a7b8
f011df2a:	e8 fe 2c fe ff       	call   f0100c2d <cprintf>
f011df2f:	83 c4 10             	add    $0x10,%esp

	void* ptr_allocations[160] = {0};
f011df32:	8d 95 b4 fb ff ff    	lea    -0x44c(%ebp),%edx
f011df38:	b9 a0 00 00 00       	mov    $0xa0,%ecx
f011df3d:	b8 00 00 00 00       	mov    $0x0,%eax
f011df42:	89 d7                	mov    %edx,%edi
f011df44:	f3 ab                	rep stos %eax,%es:(%edi)

	// allocate pages
	int freeFrames = sys_calculate_free_frames() ;
f011df46:	e8 73 e4 fe ff       	call   f010c3be <sys_calculate_free_frames>
f011df4b:	89 45 f0             	mov    %eax,-0x10(%ebp)
	int freeDiskFrames = pf_calculate_free_frames() ;
f011df4e:	e8 39 5d fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011df53:	89 45 ec             	mov    %eax,-0x14(%ebp)

	int count = 0;
f011df56:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
	int i;
	for(i = 0; i< 79 ;i++)
f011df5d:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f011df64:	eb 1f                	jmp    f011df85 <test_kmalloc_worstfit+0x8e>
	{
		ptr_allocations[i] = kmalloc(2*Mega);
f011df66:	83 ec 0c             	sub    $0xc,%esp
f011df69:	68 00 00 20 00       	push   $0x200000
f011df6e:	e8 51 96 fe ff       	call   f01075c4 <kmalloc>
f011df73:	83 c4 10             	add    $0x10,%esp
f011df76:	89 c2                	mov    %eax,%edx
f011df78:	8b 45 f4             	mov    -0xc(%ebp),%eax
f011df7b:	89 94 85 b4 fb ff ff 	mov    %edx,-0x44c(%ebp,%eax,4)
	int freeFrames = sys_calculate_free_frames() ;
	int freeDiskFrames = pf_calculate_free_frames() ;

	int count = 0;
	int i;
	for(i = 0; i< 79 ;i++)
f011df82:	ff 45 f4             	incl   -0xc(%ebp)
f011df85:	83 7d f4 4e          	cmpl   $0x4e,-0xc(%ebp)
f011df89:	7e db                	jle    f011df66 <test_kmalloc_worstfit+0x6f>
	{
		ptr_allocations[i] = kmalloc(2*Mega);
	}
	ptr_allocations[79] = kmalloc(2*Mega - PAGE_SIZE - KERNEL_SHARES_ARR_INIT_SIZE - KERNEL_SEMAPHORES_ARR_INIT_SIZE);
f011df8b:	83 ec 0c             	sub    $0xc,%esp
f011df8e:	68 00 b0 1f 00       	push   $0x1fb000
f011df93:	e8 2c 96 fe ff       	call   f01075c4 <kmalloc>
f011df98:	83 c4 10             	add    $0x10,%esp
f011df9b:	89 85 f0 fc ff ff    	mov    %eax,-0x310(%ebp)

	// randomly check the addresses of the allocation
	if( 	(uint32)ptr_allocations[0] != ACTUAL_START ||
f011dfa1:	8b 85 b4 fb ff ff    	mov    -0x44c(%ebp),%eax
f011dfa7:	89 c1                	mov    %eax,%ecx
f011dfa9:	c7 45 e4 00 10 00 00 	movl   $0x1000,-0x1c(%ebp)
f011dfb0:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f011dfb3:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011dfb8:	89 45 e0             	mov    %eax,-0x20(%ebp)
f011dfbb:	8b 45 e0             	mov    -0x20(%ebp),%eax
f011dfbe:	ba 00 00 00 00       	mov    $0x0,%edx
f011dfc3:	f7 75 e4             	divl   -0x1c(%ebp)
f011dfc6:	8b 45 e0             	mov    -0x20(%ebp),%eax
f011dfc9:	29 d0                	sub    %edx,%eax
f011dfcb:	89 c3                	mov    %eax,%ebx
f011dfcd:	c7 45 dc 00 10 00 00 	movl   $0x1000,-0x24(%ebp)
f011dfd4:	a0 bc 0e 6c f0       	mov    0xf06c0ebc,%al
f011dfd9:	0f b6 d0             	movzbl %al,%edx
f011dfdc:	8b 45 dc             	mov    -0x24(%ebp),%eax
f011dfdf:	01 d0                	add    %edx,%eax
f011dfe1:	48                   	dec    %eax
f011dfe2:	89 45 d8             	mov    %eax,-0x28(%ebp)
f011dfe5:	8b 45 d8             	mov    -0x28(%ebp),%eax
f011dfe8:	ba 00 00 00 00       	mov    $0x0,%edx
f011dfed:	f7 75 dc             	divl   -0x24(%ebp)
f011dff0:	8b 45 d8             	mov    -0x28(%ebp),%eax
f011dff3:	29 d0                	sub    %edx,%eax
f011dff5:	01 c3                	add    %eax,%ebx
f011dff7:	c7 45 d4 00 10 00 00 	movl   $0x1000,-0x2c(%ebp)
f011dffe:	a0 bc 0e 6c f0       	mov    0xf06c0ebc,%al
f011e003:	0f b6 c0             	movzbl %al,%eax
f011e006:	c1 e0 04             	shl    $0x4,%eax
f011e009:	89 c2                	mov    %eax,%edx
f011e00b:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f011e00e:	01 d0                	add    %edx,%eax
f011e010:	48                   	dec    %eax
f011e011:	89 45 d0             	mov    %eax,-0x30(%ebp)
f011e014:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011e017:	ba 00 00 00 00       	mov    $0x0,%edx
f011e01c:	f7 75 d4             	divl   -0x2c(%ebp)
f011e01f:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011e022:	29 d0                	sub    %edx,%eax
f011e024:	01 d8                	add    %ebx,%eax
f011e026:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f011e02b:	39 c1                	cmp    %eax,%ecx
f011e02d:	0f 85 c0 04 00 00    	jne    f011e4f3 <test_kmalloc_worstfit+0x5fc>
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
f011e033:	8b 85 bc fb ff ff    	mov    -0x444(%ebp),%eax
f011e039:	89 c1                	mov    %eax,%ecx
f011e03b:	c7 45 cc 00 10 00 00 	movl   $0x1000,-0x34(%ebp)
f011e042:	8b 45 cc             	mov    -0x34(%ebp),%eax
f011e045:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011e04a:	89 45 c8             	mov    %eax,-0x38(%ebp)
f011e04d:	8b 45 c8             	mov    -0x38(%ebp),%eax
f011e050:	ba 00 00 00 00       	mov    $0x0,%edx
f011e055:	f7 75 cc             	divl   -0x34(%ebp)
f011e058:	8b 45 c8             	mov    -0x38(%ebp),%eax
f011e05b:	29 d0                	sub    %edx,%eax
f011e05d:	89 c3                	mov    %eax,%ebx
f011e05f:	c7 45 c4 00 10 00 00 	movl   $0x1000,-0x3c(%ebp)
f011e066:	a0 bc 0e 6c f0       	mov    0xf06c0ebc,%al
f011e06b:	0f b6 d0             	movzbl %al,%edx
f011e06e:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f011e071:	01 d0                	add    %edx,%eax
f011e073:	48                   	dec    %eax
f011e074:	89 45 c0             	mov    %eax,-0x40(%ebp)
f011e077:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011e07a:	ba 00 00 00 00       	mov    $0x0,%edx
f011e07f:	f7 75 c4             	divl   -0x3c(%ebp)
f011e082:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011e085:	29 d0                	sub    %edx,%eax
f011e087:	01 c3                	add    %eax,%ebx
f011e089:	c7 45 bc 00 10 00 00 	movl   $0x1000,-0x44(%ebp)
f011e090:	a0 bc 0e 6c f0       	mov    0xf06c0ebc,%al
f011e095:	0f b6 c0             	movzbl %al,%eax
f011e098:	c1 e0 04             	shl    $0x4,%eax
f011e09b:	89 c2                	mov    %eax,%edx
f011e09d:	8b 45 bc             	mov    -0x44(%ebp),%eax
f011e0a0:	01 d0                	add    %edx,%eax
f011e0a2:	48                   	dec    %eax
f011e0a3:	89 45 b8             	mov    %eax,-0x48(%ebp)
f011e0a6:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011e0a9:	ba 00 00 00 00       	mov    $0x0,%edx
f011e0ae:	f7 75 bc             	divl   -0x44(%ebp)
f011e0b1:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011e0b4:	29 d0                	sub    %edx,%eax
f011e0b6:	01 d8                	add    %ebx,%eax
f011e0b8:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
		ptr_allocations[i] = kmalloc(2*Mega);
	}
	ptr_allocations[79] = kmalloc(2*Mega - PAGE_SIZE - KERNEL_SHARES_ARR_INIT_SIZE - KERNEL_SEMAPHORES_ARR_INIT_SIZE);

	// randomly check the addresses of the allocation
	if( 	(uint32)ptr_allocations[0] != ACTUAL_START ||
f011e0bd:	39 c1                	cmp    %eax,%ecx
f011e0bf:	0f 85 2e 04 00 00    	jne    f011e4f3 <test_kmalloc_worstfit+0x5fc>
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
			(uint32)ptr_allocations[8] != (ACTUAL_START + 16*Mega) ||
f011e0c5:	8b 85 d4 fb ff ff    	mov    -0x42c(%ebp),%eax
f011e0cb:	89 c1                	mov    %eax,%ecx
f011e0cd:	c7 45 b4 00 10 00 00 	movl   $0x1000,-0x4c(%ebp)
f011e0d4:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f011e0d7:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011e0dc:	89 45 b0             	mov    %eax,-0x50(%ebp)
f011e0df:	8b 45 b0             	mov    -0x50(%ebp),%eax
f011e0e2:	ba 00 00 00 00       	mov    $0x0,%edx
f011e0e7:	f7 75 b4             	divl   -0x4c(%ebp)
f011e0ea:	8b 45 b0             	mov    -0x50(%ebp),%eax
f011e0ed:	29 d0                	sub    %edx,%eax
f011e0ef:	89 c3                	mov    %eax,%ebx
f011e0f1:	c7 45 ac 00 10 00 00 	movl   $0x1000,-0x54(%ebp)
f011e0f8:	a0 bc 0e 6c f0       	mov    0xf06c0ebc,%al
f011e0fd:	0f b6 d0             	movzbl %al,%edx
f011e100:	8b 45 ac             	mov    -0x54(%ebp),%eax
f011e103:	01 d0                	add    %edx,%eax
f011e105:	48                   	dec    %eax
f011e106:	89 45 a8             	mov    %eax,-0x58(%ebp)
f011e109:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011e10c:	ba 00 00 00 00       	mov    $0x0,%edx
f011e111:	f7 75 ac             	divl   -0x54(%ebp)
f011e114:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011e117:	29 d0                	sub    %edx,%eax
f011e119:	01 c3                	add    %eax,%ebx
f011e11b:	c7 45 a4 00 10 00 00 	movl   $0x1000,-0x5c(%ebp)
f011e122:	a0 bc 0e 6c f0       	mov    0xf06c0ebc,%al
f011e127:	0f b6 c0             	movzbl %al,%eax
f011e12a:	c1 e0 04             	shl    $0x4,%eax
f011e12d:	89 c2                	mov    %eax,%edx
f011e12f:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f011e132:	01 d0                	add    %edx,%eax
f011e134:	48                   	dec    %eax
f011e135:	89 45 a0             	mov    %eax,-0x60(%ebp)
f011e138:	8b 45 a0             	mov    -0x60(%ebp),%eax
f011e13b:	ba 00 00 00 00       	mov    $0x0,%edx
f011e140:	f7 75 a4             	divl   -0x5c(%ebp)
f011e143:	8b 45 a0             	mov    -0x60(%ebp),%eax
f011e146:	29 d0                	sub    %edx,%eax
f011e148:	01 d8                	add    %ebx,%eax
f011e14a:	2d 00 c0 ff 08       	sub    $0x8ffc000,%eax
	}
	ptr_allocations[79] = kmalloc(2*Mega - PAGE_SIZE - KERNEL_SHARES_ARR_INIT_SIZE - KERNEL_SEMAPHORES_ARR_INIT_SIZE);

	// randomly check the addresses of the allocation
	if( 	(uint32)ptr_allocations[0] != ACTUAL_START ||
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
f011e14f:	39 c1                	cmp    %eax,%ecx
f011e151:	0f 85 9c 03 00 00    	jne    f011e4f3 <test_kmalloc_worstfit+0x5fc>
			(uint32)ptr_allocations[8] != (ACTUAL_START + 16*Mega) ||
			(uint32)ptr_allocations[10] != (ACTUAL_START + 20*Mega) ||
f011e157:	8b 85 dc fb ff ff    	mov    -0x424(%ebp),%eax
f011e15d:	89 c1                	mov    %eax,%ecx
f011e15f:	c7 45 9c 00 10 00 00 	movl   $0x1000,-0x64(%ebp)
f011e166:	8b 45 9c             	mov    -0x64(%ebp),%eax
f011e169:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011e16e:	89 45 98             	mov    %eax,-0x68(%ebp)
f011e171:	8b 45 98             	mov    -0x68(%ebp),%eax
f011e174:	ba 00 00 00 00       	mov    $0x0,%edx
f011e179:	f7 75 9c             	divl   -0x64(%ebp)
f011e17c:	8b 45 98             	mov    -0x68(%ebp),%eax
f011e17f:	29 d0                	sub    %edx,%eax
f011e181:	89 c3                	mov    %eax,%ebx
f011e183:	c7 45 94 00 10 00 00 	movl   $0x1000,-0x6c(%ebp)
f011e18a:	a0 bc 0e 6c f0       	mov    0xf06c0ebc,%al
f011e18f:	0f b6 d0             	movzbl %al,%edx
f011e192:	8b 45 94             	mov    -0x6c(%ebp),%eax
f011e195:	01 d0                	add    %edx,%eax
f011e197:	48                   	dec    %eax
f011e198:	89 45 90             	mov    %eax,-0x70(%ebp)
f011e19b:	8b 45 90             	mov    -0x70(%ebp),%eax
f011e19e:	ba 00 00 00 00       	mov    $0x0,%edx
f011e1a3:	f7 75 94             	divl   -0x6c(%ebp)
f011e1a6:	8b 45 90             	mov    -0x70(%ebp),%eax
f011e1a9:	29 d0                	sub    %edx,%eax
f011e1ab:	01 c3                	add    %eax,%ebx
f011e1ad:	c7 45 8c 00 10 00 00 	movl   $0x1000,-0x74(%ebp)
f011e1b4:	a0 bc 0e 6c f0       	mov    0xf06c0ebc,%al
f011e1b9:	0f b6 c0             	movzbl %al,%eax
f011e1bc:	c1 e0 04             	shl    $0x4,%eax
f011e1bf:	89 c2                	mov    %eax,%edx
f011e1c1:	8b 45 8c             	mov    -0x74(%ebp),%eax
f011e1c4:	01 d0                	add    %edx,%eax
f011e1c6:	48                   	dec    %eax
f011e1c7:	89 45 88             	mov    %eax,-0x78(%ebp)
f011e1ca:	8b 45 88             	mov    -0x78(%ebp),%eax
f011e1cd:	ba 00 00 00 00       	mov    $0x0,%edx
f011e1d2:	f7 75 8c             	divl   -0x74(%ebp)
f011e1d5:	8b 45 88             	mov    -0x78(%ebp),%eax
f011e1d8:	29 d0                	sub    %edx,%eax
f011e1da:	01 d8                	add    %ebx,%eax
f011e1dc:	2d 00 c0 bf 08       	sub    $0x8bfc000,%eax
	ptr_allocations[79] = kmalloc(2*Mega - PAGE_SIZE - KERNEL_SHARES_ARR_INIT_SIZE - KERNEL_SEMAPHORES_ARR_INIT_SIZE);

	// randomly check the addresses of the allocation
	if( 	(uint32)ptr_allocations[0] != ACTUAL_START ||
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
			(uint32)ptr_allocations[8] != (ACTUAL_START + 16*Mega) ||
f011e1e1:	39 c1                	cmp    %eax,%ecx
f011e1e3:	0f 85 0a 03 00 00    	jne    f011e4f3 <test_kmalloc_worstfit+0x5fc>
			(uint32)ptr_allocations[10] != (ACTUAL_START + 20*Mega) ||
			(uint32)ptr_allocations[15] != (ACTUAL_START + 30*Mega) ||
f011e1e9:	8b 85 f0 fb ff ff    	mov    -0x410(%ebp),%eax
f011e1ef:	89 c1                	mov    %eax,%ecx
f011e1f1:	c7 45 84 00 10 00 00 	movl   $0x1000,-0x7c(%ebp)
f011e1f8:	8b 45 84             	mov    -0x7c(%ebp),%eax
f011e1fb:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011e200:	89 45 80             	mov    %eax,-0x80(%ebp)
f011e203:	8b 45 80             	mov    -0x80(%ebp),%eax
f011e206:	ba 00 00 00 00       	mov    $0x0,%edx
f011e20b:	f7 75 84             	divl   -0x7c(%ebp)
f011e20e:	8b 45 80             	mov    -0x80(%ebp),%eax
f011e211:	29 d0                	sub    %edx,%eax
f011e213:	89 c3                	mov    %eax,%ebx
f011e215:	c7 85 7c ff ff ff 00 	movl   $0x1000,-0x84(%ebp)
f011e21c:	10 00 00 
f011e21f:	a0 bc 0e 6c f0       	mov    0xf06c0ebc,%al
f011e224:	0f b6 d0             	movzbl %al,%edx
f011e227:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f011e22d:	01 d0                	add    %edx,%eax
f011e22f:	48                   	dec    %eax
f011e230:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)
f011e236:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f011e23c:	ba 00 00 00 00       	mov    $0x0,%edx
f011e241:	f7 b5 7c ff ff ff    	divl   -0x84(%ebp)
f011e247:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f011e24d:	29 d0                	sub    %edx,%eax
f011e24f:	01 c3                	add    %eax,%ebx
f011e251:	c7 85 74 ff ff ff 00 	movl   $0x1000,-0x8c(%ebp)
f011e258:	10 00 00 
f011e25b:	a0 bc 0e 6c f0       	mov    0xf06c0ebc,%al
f011e260:	0f b6 c0             	movzbl %al,%eax
f011e263:	c1 e0 04             	shl    $0x4,%eax
f011e266:	89 c2                	mov    %eax,%edx
f011e268:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f011e26e:	01 d0                	add    %edx,%eax
f011e270:	48                   	dec    %eax
f011e271:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
f011e277:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f011e27d:	ba 00 00 00 00       	mov    $0x0,%edx
f011e282:	f7 b5 74 ff ff ff    	divl   -0x8c(%ebp)
f011e288:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f011e28e:	29 d0                	sub    %edx,%eax
f011e290:	01 d8                	add    %ebx,%eax
f011e292:	2d 00 c0 1f 08       	sub    $0x81fc000,%eax

	// randomly check the addresses of the allocation
	if( 	(uint32)ptr_allocations[0] != ACTUAL_START ||
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
			(uint32)ptr_allocations[8] != (ACTUAL_START + 16*Mega) ||
			(uint32)ptr_allocations[10] != (ACTUAL_START + 20*Mega) ||
f011e297:	39 c1                	cmp    %eax,%ecx
f011e299:	0f 85 54 02 00 00    	jne    f011e4f3 <test_kmalloc_worstfit+0x5fc>
			(uint32)ptr_allocations[15] != (ACTUAL_START + 30*Mega) ||
			(uint32)ptr_allocations[20] != (ACTUAL_START + 40*Mega) ||
f011e29f:	8b 85 04 fc ff ff    	mov    -0x3fc(%ebp),%eax
f011e2a5:	89 c1                	mov    %eax,%ecx
f011e2a7:	c7 85 6c ff ff ff 00 	movl   $0x1000,-0x94(%ebp)
f011e2ae:	10 00 00 
f011e2b1:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f011e2b7:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011e2bc:	89 85 68 ff ff ff    	mov    %eax,-0x98(%ebp)
f011e2c2:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f011e2c8:	ba 00 00 00 00       	mov    $0x0,%edx
f011e2cd:	f7 b5 6c ff ff ff    	divl   -0x94(%ebp)
f011e2d3:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f011e2d9:	29 d0                	sub    %edx,%eax
f011e2db:	89 c3                	mov    %eax,%ebx
f011e2dd:	c7 85 64 ff ff ff 00 	movl   $0x1000,-0x9c(%ebp)
f011e2e4:	10 00 00 
f011e2e7:	a0 bc 0e 6c f0       	mov    0xf06c0ebc,%al
f011e2ec:	0f b6 d0             	movzbl %al,%edx
f011e2ef:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f011e2f5:	01 d0                	add    %edx,%eax
f011e2f7:	48                   	dec    %eax
f011e2f8:	89 85 60 ff ff ff    	mov    %eax,-0xa0(%ebp)
f011e2fe:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f011e304:	ba 00 00 00 00       	mov    $0x0,%edx
f011e309:	f7 b5 64 ff ff ff    	divl   -0x9c(%ebp)
f011e30f:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f011e315:	29 d0                	sub    %edx,%eax
f011e317:	01 c3                	add    %eax,%ebx
f011e319:	c7 85 5c ff ff ff 00 	movl   $0x1000,-0xa4(%ebp)
f011e320:	10 00 00 
f011e323:	a0 bc 0e 6c f0       	mov    0xf06c0ebc,%al
f011e328:	0f b6 c0             	movzbl %al,%eax
f011e32b:	c1 e0 04             	shl    $0x4,%eax
f011e32e:	89 c2                	mov    %eax,%edx
f011e330:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f011e336:	01 d0                	add    %edx,%eax
f011e338:	48                   	dec    %eax
f011e339:	89 85 58 ff ff ff    	mov    %eax,-0xa8(%ebp)
f011e33f:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f011e345:	ba 00 00 00 00       	mov    $0x0,%edx
f011e34a:	f7 b5 5c ff ff ff    	divl   -0xa4(%ebp)
f011e350:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f011e356:	29 d0                	sub    %edx,%eax
f011e358:	01 d8                	add    %ebx,%eax
f011e35a:	2d 00 c0 7f 07       	sub    $0x77fc000,%eax
	// randomly check the addresses of the allocation
	if( 	(uint32)ptr_allocations[0] != ACTUAL_START ||
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
			(uint32)ptr_allocations[8] != (ACTUAL_START + 16*Mega) ||
			(uint32)ptr_allocations[10] != (ACTUAL_START + 20*Mega) ||
			(uint32)ptr_allocations[15] != (ACTUAL_START + 30*Mega) ||
f011e35f:	39 c1                	cmp    %eax,%ecx
f011e361:	0f 85 8c 01 00 00    	jne    f011e4f3 <test_kmalloc_worstfit+0x5fc>
			(uint32)ptr_allocations[20] != (ACTUAL_START + 40*Mega) ||
			(uint32)ptr_allocations[50] != (ACTUAL_START + 100*Mega) ||
f011e367:	8b 85 7c fc ff ff    	mov    -0x384(%ebp),%eax
f011e36d:	89 c1                	mov    %eax,%ecx
f011e36f:	c7 85 54 ff ff ff 00 	movl   $0x1000,-0xac(%ebp)
f011e376:	10 00 00 
f011e379:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f011e37f:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011e384:	89 85 50 ff ff ff    	mov    %eax,-0xb0(%ebp)
f011e38a:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f011e390:	ba 00 00 00 00       	mov    $0x0,%edx
f011e395:	f7 b5 54 ff ff ff    	divl   -0xac(%ebp)
f011e39b:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f011e3a1:	29 d0                	sub    %edx,%eax
f011e3a3:	89 c3                	mov    %eax,%ebx
f011e3a5:	c7 85 4c ff ff ff 00 	movl   $0x1000,-0xb4(%ebp)
f011e3ac:	10 00 00 
f011e3af:	a0 bc 0e 6c f0       	mov    0xf06c0ebc,%al
f011e3b4:	0f b6 d0             	movzbl %al,%edx
f011e3b7:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f011e3bd:	01 d0                	add    %edx,%eax
f011e3bf:	48                   	dec    %eax
f011e3c0:	89 85 48 ff ff ff    	mov    %eax,-0xb8(%ebp)
f011e3c6:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f011e3cc:	ba 00 00 00 00       	mov    $0x0,%edx
f011e3d1:	f7 b5 4c ff ff ff    	divl   -0xb4(%ebp)
f011e3d7:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f011e3dd:	29 d0                	sub    %edx,%eax
f011e3df:	01 c3                	add    %eax,%ebx
f011e3e1:	c7 85 44 ff ff ff 00 	movl   $0x1000,-0xbc(%ebp)
f011e3e8:	10 00 00 
f011e3eb:	a0 bc 0e 6c f0       	mov    0xf06c0ebc,%al
f011e3f0:	0f b6 c0             	movzbl %al,%eax
f011e3f3:	c1 e0 04             	shl    $0x4,%eax
f011e3f6:	89 c2                	mov    %eax,%edx
f011e3f8:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f011e3fe:	01 d0                	add    %edx,%eax
f011e400:	48                   	dec    %eax
f011e401:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%ebp)
f011e407:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f011e40d:	ba 00 00 00 00       	mov    $0x0,%edx
f011e412:	f7 b5 44 ff ff ff    	divl   -0xbc(%ebp)
f011e418:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f011e41e:	29 d0                	sub    %edx,%eax
f011e420:	01 d8                	add    %ebx,%eax
f011e422:	2d 00 c0 bf 03       	sub    $0x3bfc000,%eax
	if( 	(uint32)ptr_allocations[0] != ACTUAL_START ||
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
			(uint32)ptr_allocations[8] != (ACTUAL_START + 16*Mega) ||
			(uint32)ptr_allocations[10] != (ACTUAL_START + 20*Mega) ||
			(uint32)ptr_allocations[15] != (ACTUAL_START + 30*Mega) ||
			(uint32)ptr_allocations[20] != (ACTUAL_START + 40*Mega) ||
f011e427:	39 c1                	cmp    %eax,%ecx
f011e429:	0f 85 c4 00 00 00    	jne    f011e4f3 <test_kmalloc_worstfit+0x5fc>
			(uint32)ptr_allocations[50] != (ACTUAL_START + 100*Mega) ||
			(uint32)ptr_allocations[79] != (ACTUAL_START + 158*Mega))
f011e42f:	8b 85 f0 fc ff ff    	mov    -0x310(%ebp),%eax
f011e435:	89 c1                	mov    %eax,%ecx
f011e437:	c7 85 3c ff ff ff 00 	movl   $0x1000,-0xc4(%ebp)
f011e43e:	10 00 00 
f011e441:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f011e447:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011e44c:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
f011e452:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f011e458:	ba 00 00 00 00       	mov    $0x0,%edx
f011e45d:	f7 b5 3c ff ff ff    	divl   -0xc4(%ebp)
f011e463:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f011e469:	29 d0                	sub    %edx,%eax
f011e46b:	89 c3                	mov    %eax,%ebx
f011e46d:	c7 85 34 ff ff ff 00 	movl   $0x1000,-0xcc(%ebp)
f011e474:	10 00 00 
f011e477:	a0 bc 0e 6c f0       	mov    0xf06c0ebc,%al
f011e47c:	0f b6 d0             	movzbl %al,%edx
f011e47f:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f011e485:	01 d0                	add    %edx,%eax
f011e487:	48                   	dec    %eax
f011e488:	89 85 30 ff ff ff    	mov    %eax,-0xd0(%ebp)
f011e48e:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f011e494:	ba 00 00 00 00       	mov    $0x0,%edx
f011e499:	f7 b5 34 ff ff ff    	divl   -0xcc(%ebp)
f011e49f:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f011e4a5:	29 d0                	sub    %edx,%eax
f011e4a7:	01 c3                	add    %eax,%ebx
f011e4a9:	c7 85 2c ff ff ff 00 	movl   $0x1000,-0xd4(%ebp)
f011e4b0:	10 00 00 
f011e4b3:	a0 bc 0e 6c f0       	mov    0xf06c0ebc,%al
f011e4b8:	0f b6 c0             	movzbl %al,%eax
f011e4bb:	c1 e0 04             	shl    $0x4,%eax
f011e4be:	89 c2                	mov    %eax,%edx
f011e4c0:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f011e4c6:	01 d0                	add    %edx,%eax
f011e4c8:	48                   	dec    %eax
f011e4c9:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%ebp)
f011e4cf:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f011e4d5:	ba 00 00 00 00       	mov    $0x0,%edx
f011e4da:	f7 b5 2c ff ff ff    	divl   -0xd4(%ebp)
f011e4e0:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f011e4e6:	29 d0                	sub    %edx,%eax
f011e4e8:	01 d8                	add    %ebx,%eax
f011e4ea:	2d 00 c0 1f 00       	sub    $0x1fc000,%eax
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
			(uint32)ptr_allocations[8] != (ACTUAL_START + 16*Mega) ||
			(uint32)ptr_allocations[10] != (ACTUAL_START + 20*Mega) ||
			(uint32)ptr_allocations[15] != (ACTUAL_START + 30*Mega) ||
			(uint32)ptr_allocations[20] != (ACTUAL_START + 40*Mega) ||
			(uint32)ptr_allocations[50] != (ACTUAL_START + 100*Mega) ||
f011e4ef:	39 c1                	cmp    %eax,%ecx
f011e4f1:	74 17                	je     f011e50a <test_kmalloc_worstfit+0x613>
			(uint32)ptr_allocations[79] != (ACTUAL_START + 158*Mega))
		panic("Wrong allocation, Check worst fitting strategy is working correctly");
f011e4f3:	83 ec 04             	sub    $0x4,%esp
f011e4f6:	68 4c af 13 f0       	push   $0xf013af4c
f011e4fb:	68 31 04 00 00       	push   $0x431
f011e500:	68 76 a8 13 f0       	push   $0xf013a876
f011e505:	e8 9c 1c fe ff       	call   f01001a6 <_panic>

	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011e50a:	e8 7d 57 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011e50f:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011e512:	74 17                	je     f011e52b <test_kmalloc_worstfit+0x634>
f011e514:	83 ec 04             	sub    $0x4,%esp
f011e517:	68 90 a8 13 f0       	push   $0xf013a890
f011e51c:	68 33 04 00 00       	push   $0x433
f011e521:	68 76 a8 13 f0       	push   $0xf013a876
f011e526:	e8 7b 1c fe ff       	call   f01001a6 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) != (160*Mega - PAGE_SIZE - KERNEL_SHARES_ARR_INIT_SIZE - KERNEL_SEMAPHORES_ARR_INIT_SIZE)/(PAGE_SIZE) ) panic("Wrong allocation");
f011e52b:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f011e52e:	e8 8b de fe ff       	call   f010c3be <sys_calculate_free_frames>
f011e533:	29 c3                	sub    %eax,%ebx
f011e535:	89 d8                	mov    %ebx,%eax
f011e537:	3d fb 9f 00 00       	cmp    $0x9ffb,%eax
f011e53c:	74 17                	je     f011e555 <test_kmalloc_worstfit+0x65e>
f011e53e:	83 ec 04             	sub    $0x4,%esp
f011e541:	68 33 ab 13 f0       	push   $0xf013ab33
f011e546:	68 34 04 00 00       	push   $0x434
f011e54b:	68 76 a8 13 f0       	push   $0xf013a876
f011e550:	e8 51 1c fe ff       	call   f01001a6 <_panic>

	//make memory holes
	freeFrames = sys_calculate_free_frames() ;
f011e555:	e8 64 de fe ff       	call   f010c3be <sys_calculate_free_frames>
f011e55a:	89 45 f0             	mov    %eax,-0x10(%ebp)
	freeDiskFrames = pf_calculate_free_frames() ;
f011e55d:	e8 2a 57 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011e562:	89 45 ec             	mov    %eax,-0x14(%ebp)

	kfree(ptr_allocations[0]);		//Hole 1 = 2 M
f011e565:	8b 85 b4 fb ff ff    	mov    -0x44c(%ebp),%eax
f011e56b:	83 ec 0c             	sub    $0xc,%esp
f011e56e:	50                   	push   %eax
f011e56f:	e8 6a 90 fe ff       	call   f01075de <kfree>
f011e574:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[2]);		//Hole 2 = 4 M
f011e577:	8b 85 bc fb ff ff    	mov    -0x444(%ebp),%eax
f011e57d:	83 ec 0c             	sub    $0xc,%esp
f011e580:	50                   	push   %eax
f011e581:	e8 58 90 fe ff       	call   f01075de <kfree>
f011e586:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[3]);
f011e589:	8b 85 c0 fb ff ff    	mov    -0x440(%ebp),%eax
f011e58f:	83 ec 0c             	sub    $0xc,%esp
f011e592:	50                   	push   %eax
f011e593:	e8 46 90 fe ff       	call   f01075de <kfree>
f011e598:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[10]);		//Hole 3 = 6 M
f011e59b:	8b 85 dc fb ff ff    	mov    -0x424(%ebp),%eax
f011e5a1:	83 ec 0c             	sub    $0xc,%esp
f011e5a4:	50                   	push   %eax
f011e5a5:	e8 34 90 fe ff       	call   f01075de <kfree>
f011e5aa:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[12]);
f011e5ad:	8b 85 e4 fb ff ff    	mov    -0x41c(%ebp),%eax
f011e5b3:	83 ec 0c             	sub    $0xc,%esp
f011e5b6:	50                   	push   %eax
f011e5b7:	e8 22 90 fe ff       	call   f01075de <kfree>
f011e5bc:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[11]);
f011e5bf:	8b 85 e0 fb ff ff    	mov    -0x420(%ebp),%eax
f011e5c5:	83 ec 0c             	sub    $0xc,%esp
f011e5c8:	50                   	push   %eax
f011e5c9:	e8 10 90 fe ff       	call   f01075de <kfree>
f011e5ce:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[30]);		//Hole 4 = 10 M
f011e5d1:	8b 85 2c fc ff ff    	mov    -0x3d4(%ebp),%eax
f011e5d7:	83 ec 0c             	sub    $0xc,%esp
f011e5da:	50                   	push   %eax
f011e5db:	e8 fe 8f fe ff       	call   f01075de <kfree>
f011e5e0:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[31]);
f011e5e3:	8b 85 30 fc ff ff    	mov    -0x3d0(%ebp),%eax
f011e5e9:	83 ec 0c             	sub    $0xc,%esp
f011e5ec:	50                   	push   %eax
f011e5ed:	e8 ec 8f fe ff       	call   f01075de <kfree>
f011e5f2:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[32]);
f011e5f5:	8b 85 34 fc ff ff    	mov    -0x3cc(%ebp),%eax
f011e5fb:	83 ec 0c             	sub    $0xc,%esp
f011e5fe:	50                   	push   %eax
f011e5ff:	e8 da 8f fe ff       	call   f01075de <kfree>
f011e604:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[33]);
f011e607:	8b 85 38 fc ff ff    	mov    -0x3c8(%ebp),%eax
f011e60d:	83 ec 0c             	sub    $0xc,%esp
f011e610:	50                   	push   %eax
f011e611:	e8 c8 8f fe ff       	call   f01075de <kfree>
f011e616:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[34]);
f011e619:	8b 85 3c fc ff ff    	mov    -0x3c4(%ebp),%eax
f011e61f:	83 ec 0c             	sub    $0xc,%esp
f011e622:	50                   	push   %eax
f011e623:	e8 b6 8f fe ff       	call   f01075de <kfree>
f011e628:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[70]); 	//Hole 5 = 8 M
f011e62b:	8b 85 cc fc ff ff    	mov    -0x334(%ebp),%eax
f011e631:	83 ec 0c             	sub    $0xc,%esp
f011e634:	50                   	push   %eax
f011e635:	e8 a4 8f fe ff       	call   f01075de <kfree>
f011e63a:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[71]);
f011e63d:	8b 85 d0 fc ff ff    	mov    -0x330(%ebp),%eax
f011e643:	83 ec 0c             	sub    $0xc,%esp
f011e646:	50                   	push   %eax
f011e647:	e8 92 8f fe ff       	call   f01075de <kfree>
f011e64c:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[72]);
f011e64f:	8b 85 d4 fc ff ff    	mov    -0x32c(%ebp),%eax
f011e655:	83 ec 0c             	sub    $0xc,%esp
f011e658:	50                   	push   %eax
f011e659:	e8 80 8f fe ff       	call   f01075de <kfree>
f011e65e:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[73]);
f011e661:	8b 85 d8 fc ff ff    	mov    -0x328(%ebp),%eax
f011e667:	83 ec 0c             	sub    $0xc,%esp
f011e66a:	50                   	push   %eax
f011e66b:	e8 6e 8f fe ff       	call   f01075de <kfree>
f011e670:	83 c4 10             	add    $0x10,%esp

	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011e673:	e8 14 56 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011e678:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011e67b:	74 17                	je     f011e694 <test_kmalloc_worstfit+0x79d>
f011e67d:	83 ec 04             	sub    $0x4,%esp
f011e680:	68 90 a8 13 f0       	push   $0xf013a890
f011e685:	68 4a 04 00 00       	push   $0x44a
f011e68a:	68 76 a8 13 f0       	push   $0xf013a876
f011e68f:	e8 12 1b fe ff       	call   f01001a6 <_panic>
	if ((sys_calculate_free_frames() - freeFrames) != ((15*2*Mega))/PAGE_SIZE) panic("Wrong free: Extra or less pages are removed from main memory");
f011e694:	e8 25 dd fe ff       	call   f010c3be <sys_calculate_free_frames>
f011e699:	89 c2                	mov    %eax,%edx
f011e69b:	8b 45 f0             	mov    -0x10(%ebp),%eax
f011e69e:	29 c2                	sub    %eax,%edx
f011e6a0:	89 d0                	mov    %edx,%eax
f011e6a2:	3d 00 1e 00 00       	cmp    $0x1e00,%eax
f011e6a7:	74 17                	je     f011e6c0 <test_kmalloc_worstfit+0x7c9>
f011e6a9:	83 ec 04             	sub    $0x4,%esp
f011e6ac:	68 44 ab 13 f0       	push   $0xf013ab44
f011e6b1:	68 4b 04 00 00       	push   $0x44b
f011e6b6:	68 76 a8 13 f0       	push   $0xf013a876
f011e6bb:	e8 e6 1a fe ff       	call   f01001a6 <_panic>

	// Test worst fit
	freeFrames = sys_calculate_free_frames() ;
f011e6c0:	e8 f9 dc fe ff       	call   f010c3be <sys_calculate_free_frames>
f011e6c5:	89 45 f0             	mov    %eax,-0x10(%ebp)
	freeDiskFrames = pf_calculate_free_frames();
f011e6c8:	e8 bf 55 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011e6cd:	89 45 ec             	mov    %eax,-0x14(%ebp)
	void* tempAddress = kmalloc(Mega);		//Use Hole 4 -> Hole 4 = 9 M
f011e6d0:	83 ec 0c             	sub    $0xc,%esp
f011e6d3:	68 00 00 10 00       	push   $0x100000
f011e6d8:	e8 e7 8e fe ff       	call   f01075c4 <kmalloc>
f011e6dd:	83 c4 10             	add    $0x10,%esp
f011e6e0:	89 85 24 ff ff ff    	mov    %eax,-0xdc(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x03C00000)
f011e6e6:	c7 85 20 ff ff ff 00 	movl   $0x1000,-0xe0(%ebp)
f011e6ed:	10 00 00 
f011e6f0:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f011e6f6:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011e6fb:	89 85 1c ff ff ff    	mov    %eax,-0xe4(%ebp)
f011e701:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f011e707:	ba 00 00 00 00       	mov    $0x0,%edx
f011e70c:	f7 b5 20 ff ff ff    	divl   -0xe0(%ebp)
f011e712:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f011e718:	29 d0                	sub    %edx,%eax
f011e71a:	89 c1                	mov    %eax,%ecx
f011e71c:	c7 85 18 ff ff ff 00 	movl   $0x1000,-0xe8(%ebp)
f011e723:	10 00 00 
f011e726:	a0 bc 0e 6c f0       	mov    0xf06c0ebc,%al
f011e72b:	0f b6 d0             	movzbl %al,%edx
f011e72e:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f011e734:	01 d0                	add    %edx,%eax
f011e736:	48                   	dec    %eax
f011e737:	89 85 14 ff ff ff    	mov    %eax,-0xec(%ebp)
f011e73d:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f011e743:	ba 00 00 00 00       	mov    $0x0,%edx
f011e748:	f7 b5 18 ff ff ff    	divl   -0xe8(%ebp)
f011e74e:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f011e754:	29 d0                	sub    %edx,%eax
f011e756:	01 c1                	add    %eax,%ecx
f011e758:	c7 85 10 ff ff ff 00 	movl   $0x1000,-0xf0(%ebp)
f011e75f:	10 00 00 
f011e762:	a0 bc 0e 6c f0       	mov    0xf06c0ebc,%al
f011e767:	0f b6 c0             	movzbl %al,%eax
f011e76a:	c1 e0 04             	shl    $0x4,%eax
f011e76d:	89 c2                	mov    %eax,%edx
f011e76f:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f011e775:	01 d0                	add    %edx,%eax
f011e777:	48                   	dec    %eax
f011e778:	89 85 0c ff ff ff    	mov    %eax,-0xf4(%ebp)
f011e77e:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f011e784:	ba 00 00 00 00       	mov    $0x0,%edx
f011e789:	f7 b5 10 ff ff ff    	divl   -0xf0(%ebp)
f011e78f:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f011e795:	29 d0                	sub    %edx,%eax
f011e797:	01 c8                	add    %ecx,%eax
f011e799:	8d 90 00 40 c0 f9    	lea    -0x63fc000(%eax),%edx
f011e79f:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011e7a5:	39 c2                	cmp    %eax,%edx
f011e7a7:	74 17                	je     f011e7c0 <test_kmalloc_worstfit+0x8c9>
		panic("Worst Fit not working correctly");
f011e7a9:	83 ec 04             	sub    $0x4,%esp
f011e7ac:	68 90 af 13 f0       	push   $0xf013af90
f011e7b1:	68 52 04 00 00       	push   $0x452
f011e7b6:	68 76 a8 13 f0       	push   $0xf013a876
f011e7bb:	e8 e6 19 fe ff       	call   f01001a6 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011e7c0:	e8 c7 54 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011e7c5:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011e7c8:	74 17                	je     f011e7e1 <test_kmalloc_worstfit+0x8ea>
f011e7ca:	83 ec 04             	sub    $0x4,%esp
f011e7cd:	68 90 a8 13 f0       	push   $0xf013a890
f011e7d2:	68 53 04 00 00       	push   $0x453
f011e7d7:	68 76 a8 13 f0       	push   $0xf013a876
f011e7dc:	e8 c5 19 fe ff       	call   f01001a6 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) !=  1*Mega/PAGE_SIZE) panic("Wrong allocation:");
f011e7e1:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f011e7e4:	e8 d5 db fe ff       	call   f010c3be <sys_calculate_free_frames>
f011e7e9:	29 c3                	sub    %eax,%ebx
f011e7eb:	89 d8                	mov    %ebx,%eax
f011e7ed:	3d 00 01 00 00       	cmp    $0x100,%eax
f011e7f2:	74 17                	je     f011e80b <test_kmalloc_worstfit+0x914>
f011e7f4:	83 ec 04             	sub    $0x4,%esp
f011e7f7:	68 ae ad 13 f0       	push   $0xf013adae
f011e7fc:	68 54 04 00 00       	push   $0x454
f011e801:	68 76 a8 13 f0       	push   $0xf013a876
f011e806:	e8 9b 19 fe ff       	call   f01001a6 <_panic>
	cprintf("Test %d Passed \n", ++count);
f011e80b:	ff 45 e8             	incl   -0x18(%ebp)
f011e80e:	83 ec 08             	sub    $0x8,%esp
f011e811:	ff 75 e8             	pushl  -0x18(%ebp)
f011e814:	68 b0 af 13 f0       	push   $0xf013afb0
f011e819:	e8 0f 24 fe ff       	call   f0100c2d <cprintf>
f011e81e:	83 c4 10             	add    $0x10,%esp

	freeFrames = sys_calculate_free_frames() ;
f011e821:	e8 98 db fe ff       	call   f010c3be <sys_calculate_free_frames>
f011e826:	89 45 f0             	mov    %eax,-0x10(%ebp)
	freeDiskFrames = pf_calculate_free_frames();
f011e829:	e8 5e 54 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011e82e:	89 45 ec             	mov    %eax,-0x14(%ebp)
	tempAddress = kmalloc(4 * Mega);			//Use Hole 4 -> Hole 4 = 5 M
f011e831:	83 ec 0c             	sub    $0xc,%esp
f011e834:	68 00 00 40 00       	push   $0x400000
f011e839:	e8 86 8d fe ff       	call   f01075c4 <kmalloc>
f011e83e:	83 c4 10             	add    $0x10,%esp
f011e841:	89 85 24 ff ff ff    	mov    %eax,-0xdc(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x03D00000)
f011e847:	c7 85 08 ff ff ff 00 	movl   $0x1000,-0xf8(%ebp)
f011e84e:	10 00 00 
f011e851:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f011e857:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011e85c:	89 85 04 ff ff ff    	mov    %eax,-0xfc(%ebp)
f011e862:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f011e868:	ba 00 00 00 00       	mov    $0x0,%edx
f011e86d:	f7 b5 08 ff ff ff    	divl   -0xf8(%ebp)
f011e873:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f011e879:	29 d0                	sub    %edx,%eax
f011e87b:	89 c1                	mov    %eax,%ecx
f011e87d:	c7 85 00 ff ff ff 00 	movl   $0x1000,-0x100(%ebp)
f011e884:	10 00 00 
f011e887:	a0 bc 0e 6c f0       	mov    0xf06c0ebc,%al
f011e88c:	0f b6 d0             	movzbl %al,%edx
f011e88f:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f011e895:	01 d0                	add    %edx,%eax
f011e897:	48                   	dec    %eax
f011e898:	89 85 fc fe ff ff    	mov    %eax,-0x104(%ebp)
f011e89e:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f011e8a4:	ba 00 00 00 00       	mov    $0x0,%edx
f011e8a9:	f7 b5 00 ff ff ff    	divl   -0x100(%ebp)
f011e8af:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f011e8b5:	29 d0                	sub    %edx,%eax
f011e8b7:	01 c1                	add    %eax,%ecx
f011e8b9:	c7 85 f8 fe ff ff 00 	movl   $0x1000,-0x108(%ebp)
f011e8c0:	10 00 00 
f011e8c3:	a0 bc 0e 6c f0       	mov    0xf06c0ebc,%al
f011e8c8:	0f b6 c0             	movzbl %al,%eax
f011e8cb:	c1 e0 04             	shl    $0x4,%eax
f011e8ce:	89 c2                	mov    %eax,%edx
f011e8d0:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f011e8d6:	01 d0                	add    %edx,%eax
f011e8d8:	48                   	dec    %eax
f011e8d9:	89 85 f4 fe ff ff    	mov    %eax,-0x10c(%ebp)
f011e8df:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f011e8e5:	ba 00 00 00 00       	mov    $0x0,%edx
f011e8ea:	f7 b5 f8 fe ff ff    	divl   -0x108(%ebp)
f011e8f0:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f011e8f6:	29 d0                	sub    %edx,%eax
f011e8f8:	01 c8                	add    %ecx,%eax
f011e8fa:	8d 90 00 40 d0 f9    	lea    -0x62fc000(%eax),%edx
f011e900:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011e906:	39 c2                	cmp    %eax,%edx
f011e908:	74 17                	je     f011e921 <test_kmalloc_worstfit+0xa2a>
		panic("Worst Fit not working correctly");
f011e90a:	83 ec 04             	sub    $0x4,%esp
f011e90d:	68 90 af 13 f0       	push   $0xf013af90
f011e912:	68 5b 04 00 00       	push   $0x45b
f011e917:	68 76 a8 13 f0       	push   $0xf013a876
f011e91c:	e8 85 18 fe ff       	call   f01001a6 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011e921:	e8 66 53 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011e926:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011e929:	74 17                	je     f011e942 <test_kmalloc_worstfit+0xa4b>
f011e92b:	83 ec 04             	sub    $0x4,%esp
f011e92e:	68 90 a8 13 f0       	push   $0xf013a890
f011e933:	68 5c 04 00 00       	push   $0x45c
f011e938:	68 76 a8 13 f0       	push   $0xf013a876
f011e93d:	e8 64 18 fe ff       	call   f01001a6 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) !=  4*Mega/PAGE_SIZE) panic("Wrong allocation:");
f011e942:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f011e945:	e8 74 da fe ff       	call   f010c3be <sys_calculate_free_frames>
f011e94a:	29 c3                	sub    %eax,%ebx
f011e94c:	89 d8                	mov    %ebx,%eax
f011e94e:	3d 00 04 00 00       	cmp    $0x400,%eax
f011e953:	74 17                	je     f011e96c <test_kmalloc_worstfit+0xa75>
f011e955:	83 ec 04             	sub    $0x4,%esp
f011e958:	68 ae ad 13 f0       	push   $0xf013adae
f011e95d:	68 5d 04 00 00       	push   $0x45d
f011e962:	68 76 a8 13 f0       	push   $0xf013a876
f011e967:	e8 3a 18 fe ff       	call   f01001a6 <_panic>
	cprintf("Test %d Passed \n", ++count);
f011e96c:	ff 45 e8             	incl   -0x18(%ebp)
f011e96f:	83 ec 08             	sub    $0x8,%esp
f011e972:	ff 75 e8             	pushl  -0x18(%ebp)
f011e975:	68 b0 af 13 f0       	push   $0xf013afb0
f011e97a:	e8 ae 22 fe ff       	call   f0100c2d <cprintf>
f011e97f:	83 c4 10             	add    $0x10,%esp

	freeFrames = sys_calculate_free_frames() ;
f011e982:	e8 37 da fe ff       	call   f010c3be <sys_calculate_free_frames>
f011e987:	89 45 f0             	mov    %eax,-0x10(%ebp)
	freeDiskFrames = pf_calculate_free_frames();
f011e98a:	e8 fd 52 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011e98f:	89 45 ec             	mov    %eax,-0x14(%ebp)
	tempAddress = kmalloc(6*Mega); 			   //Use Hole 5 -> Hole 5 = 2 M
f011e992:	83 ec 0c             	sub    $0xc,%esp
f011e995:	68 00 00 60 00       	push   $0x600000
f011e99a:	e8 25 8c fe ff       	call   f01075c4 <kmalloc>
f011e99f:	83 c4 10             	add    $0x10,%esp
f011e9a2:	89 85 24 ff ff ff    	mov    %eax,-0xdc(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x08C00000)
f011e9a8:	c7 85 f0 fe ff ff 00 	movl   $0x1000,-0x110(%ebp)
f011e9af:	10 00 00 
f011e9b2:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f011e9b8:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011e9bd:	89 85 ec fe ff ff    	mov    %eax,-0x114(%ebp)
f011e9c3:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f011e9c9:	ba 00 00 00 00       	mov    $0x0,%edx
f011e9ce:	f7 b5 f0 fe ff ff    	divl   -0x110(%ebp)
f011e9d4:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f011e9da:	29 d0                	sub    %edx,%eax
f011e9dc:	89 c1                	mov    %eax,%ecx
f011e9de:	c7 85 e8 fe ff ff 00 	movl   $0x1000,-0x118(%ebp)
f011e9e5:	10 00 00 
f011e9e8:	a0 bc 0e 6c f0       	mov    0xf06c0ebc,%al
f011e9ed:	0f b6 d0             	movzbl %al,%edx
f011e9f0:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f011e9f6:	01 d0                	add    %edx,%eax
f011e9f8:	48                   	dec    %eax
f011e9f9:	89 85 e4 fe ff ff    	mov    %eax,-0x11c(%ebp)
f011e9ff:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f011ea05:	ba 00 00 00 00       	mov    $0x0,%edx
f011ea0a:	f7 b5 e8 fe ff ff    	divl   -0x118(%ebp)
f011ea10:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f011ea16:	29 d0                	sub    %edx,%eax
f011ea18:	01 c1                	add    %eax,%ecx
f011ea1a:	c7 85 e0 fe ff ff 00 	movl   $0x1000,-0x120(%ebp)
f011ea21:	10 00 00 
f011ea24:	a0 bc 0e 6c f0       	mov    0xf06c0ebc,%al
f011ea29:	0f b6 c0             	movzbl %al,%eax
f011ea2c:	c1 e0 04             	shl    $0x4,%eax
f011ea2f:	89 c2                	mov    %eax,%edx
f011ea31:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f011ea37:	01 d0                	add    %edx,%eax
f011ea39:	48                   	dec    %eax
f011ea3a:	89 85 dc fe ff ff    	mov    %eax,-0x124(%ebp)
f011ea40:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f011ea46:	ba 00 00 00 00       	mov    $0x0,%edx
f011ea4b:	f7 b5 e0 fe ff ff    	divl   -0x120(%ebp)
f011ea51:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f011ea57:	29 d0                	sub    %edx,%eax
f011ea59:	01 c8                	add    %ecx,%eax
f011ea5b:	8d 90 00 40 c0 fe    	lea    -0x13fc000(%eax),%edx
f011ea61:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011ea67:	39 c2                	cmp    %eax,%edx
f011ea69:	74 17                	je     f011ea82 <test_kmalloc_worstfit+0xb8b>
		panic("Worst Fit not working correctly");
f011ea6b:	83 ec 04             	sub    $0x4,%esp
f011ea6e:	68 90 af 13 f0       	push   $0xf013af90
f011ea73:	68 64 04 00 00       	push   $0x464
f011ea78:	68 76 a8 13 f0       	push   $0xf013a876
f011ea7d:	e8 24 17 fe ff       	call   f01001a6 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011ea82:	e8 05 52 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011ea87:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011ea8a:	74 17                	je     f011eaa3 <test_kmalloc_worstfit+0xbac>
f011ea8c:	83 ec 04             	sub    $0x4,%esp
f011ea8f:	68 90 a8 13 f0       	push   $0xf013a890
f011ea94:	68 65 04 00 00       	push   $0x465
f011ea99:	68 76 a8 13 f0       	push   $0xf013a876
f011ea9e:	e8 03 17 fe ff       	call   f01001a6 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) !=  6*Mega/PAGE_SIZE) panic("Wrong allocation:");
f011eaa3:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f011eaa6:	e8 13 d9 fe ff       	call   f010c3be <sys_calculate_free_frames>
f011eaab:	29 c3                	sub    %eax,%ebx
f011eaad:	89 d8                	mov    %ebx,%eax
f011eaaf:	3d 00 06 00 00       	cmp    $0x600,%eax
f011eab4:	74 17                	je     f011eacd <test_kmalloc_worstfit+0xbd6>
f011eab6:	83 ec 04             	sub    $0x4,%esp
f011eab9:	68 ae ad 13 f0       	push   $0xf013adae
f011eabe:	68 66 04 00 00       	push   $0x466
f011eac3:	68 76 a8 13 f0       	push   $0xf013a876
f011eac8:	e8 d9 16 fe ff       	call   f01001a6 <_panic>
	cprintf("Test %d Passed \n", ++count);
f011eacd:	ff 45 e8             	incl   -0x18(%ebp)
f011ead0:	83 ec 08             	sub    $0x8,%esp
f011ead3:	ff 75 e8             	pushl  -0x18(%ebp)
f011ead6:	68 b0 af 13 f0       	push   $0xf013afb0
f011eadb:	e8 4d 21 fe ff       	call   f0100c2d <cprintf>
f011eae0:	83 c4 10             	add    $0x10,%esp

	freeFrames = sys_calculate_free_frames() ;
f011eae3:	e8 d6 d8 fe ff       	call   f010c3be <sys_calculate_free_frames>
f011eae8:	89 45 f0             	mov    %eax,-0x10(%ebp)
	freeDiskFrames = pf_calculate_free_frames();
f011eaeb:	e8 9c 51 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011eaf0:	89 45 ec             	mov    %eax,-0x14(%ebp)
	tempAddress = kmalloc(5*Mega); 			   //Use Hole 3 -> Hole 3 = 1 M
f011eaf3:	83 ec 0c             	sub    $0xc,%esp
f011eaf6:	68 00 00 50 00       	push   $0x500000
f011eafb:	e8 c4 8a fe ff       	call   f01075c4 <kmalloc>
f011eb00:	83 c4 10             	add    $0x10,%esp
f011eb03:	89 85 24 ff ff ff    	mov    %eax,-0xdc(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x01400000)
f011eb09:	c7 85 d8 fe ff ff 00 	movl   $0x1000,-0x128(%ebp)
f011eb10:	10 00 00 
f011eb13:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f011eb19:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011eb1e:	89 85 d4 fe ff ff    	mov    %eax,-0x12c(%ebp)
f011eb24:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f011eb2a:	ba 00 00 00 00       	mov    $0x0,%edx
f011eb2f:	f7 b5 d8 fe ff ff    	divl   -0x128(%ebp)
f011eb35:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f011eb3b:	29 d0                	sub    %edx,%eax
f011eb3d:	89 c1                	mov    %eax,%ecx
f011eb3f:	c7 85 d0 fe ff ff 00 	movl   $0x1000,-0x130(%ebp)
f011eb46:	10 00 00 
f011eb49:	a0 bc 0e 6c f0       	mov    0xf06c0ebc,%al
f011eb4e:	0f b6 d0             	movzbl %al,%edx
f011eb51:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f011eb57:	01 d0                	add    %edx,%eax
f011eb59:	48                   	dec    %eax
f011eb5a:	89 85 cc fe ff ff    	mov    %eax,-0x134(%ebp)
f011eb60:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f011eb66:	ba 00 00 00 00       	mov    $0x0,%edx
f011eb6b:	f7 b5 d0 fe ff ff    	divl   -0x130(%ebp)
f011eb71:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f011eb77:	29 d0                	sub    %edx,%eax
f011eb79:	01 c1                	add    %eax,%ecx
f011eb7b:	c7 85 c8 fe ff ff 00 	movl   $0x1000,-0x138(%ebp)
f011eb82:	10 00 00 
f011eb85:	a0 bc 0e 6c f0       	mov    0xf06c0ebc,%al
f011eb8a:	0f b6 c0             	movzbl %al,%eax
f011eb8d:	c1 e0 04             	shl    $0x4,%eax
f011eb90:	89 c2                	mov    %eax,%edx
f011eb92:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f011eb98:	01 d0                	add    %edx,%eax
f011eb9a:	48                   	dec    %eax
f011eb9b:	89 85 c4 fe ff ff    	mov    %eax,-0x13c(%ebp)
f011eba1:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f011eba7:	ba 00 00 00 00       	mov    $0x0,%edx
f011ebac:	f7 b5 c8 fe ff ff    	divl   -0x138(%ebp)
f011ebb2:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f011ebb8:	29 d0                	sub    %edx,%eax
f011ebba:	01 c8                	add    %ecx,%eax
f011ebbc:	8d 90 00 40 40 f7    	lea    -0x8bfc000(%eax),%edx
f011ebc2:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011ebc8:	39 c2                	cmp    %eax,%edx
f011ebca:	74 17                	je     f011ebe3 <test_kmalloc_worstfit+0xcec>
		panic("Worst Fit not working correctly");
f011ebcc:	83 ec 04             	sub    $0x4,%esp
f011ebcf:	68 90 af 13 f0       	push   $0xf013af90
f011ebd4:	68 6d 04 00 00       	push   $0x46d
f011ebd9:	68 76 a8 13 f0       	push   $0xf013a876
f011ebde:	e8 c3 15 fe ff       	call   f01001a6 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011ebe3:	e8 a4 50 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011ebe8:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011ebeb:	74 17                	je     f011ec04 <test_kmalloc_worstfit+0xd0d>
f011ebed:	83 ec 04             	sub    $0x4,%esp
f011ebf0:	68 90 a8 13 f0       	push   $0xf013a890
f011ebf5:	68 6e 04 00 00       	push   $0x46e
f011ebfa:	68 76 a8 13 f0       	push   $0xf013a876
f011ebff:	e8 a2 15 fe ff       	call   f01001a6 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) !=  5*Mega/PAGE_SIZE) panic("Wrong allocation:");
f011ec04:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f011ec07:	e8 b2 d7 fe ff       	call   f010c3be <sys_calculate_free_frames>
f011ec0c:	29 c3                	sub    %eax,%ebx
f011ec0e:	89 d8                	mov    %ebx,%eax
f011ec10:	3d 00 05 00 00       	cmp    $0x500,%eax
f011ec15:	74 17                	je     f011ec2e <test_kmalloc_worstfit+0xd37>
f011ec17:	83 ec 04             	sub    $0x4,%esp
f011ec1a:	68 ae ad 13 f0       	push   $0xf013adae
f011ec1f:	68 6f 04 00 00       	push   $0x46f
f011ec24:	68 76 a8 13 f0       	push   $0xf013a876
f011ec29:	e8 78 15 fe ff       	call   f01001a6 <_panic>
	cprintf("Test %d Passed \n", ++count);
f011ec2e:	ff 45 e8             	incl   -0x18(%ebp)
f011ec31:	83 ec 08             	sub    $0x8,%esp
f011ec34:	ff 75 e8             	pushl  -0x18(%ebp)
f011ec37:	68 b0 af 13 f0       	push   $0xf013afb0
f011ec3c:	e8 ec 1f fe ff       	call   f0100c2d <cprintf>
f011ec41:	83 c4 10             	add    $0x10,%esp

	freeFrames = sys_calculate_free_frames() ;
f011ec44:	e8 75 d7 fe ff       	call   f010c3be <sys_calculate_free_frames>
f011ec49:	89 45 f0             	mov    %eax,-0x10(%ebp)
	freeDiskFrames = pf_calculate_free_frames();
f011ec4c:	e8 3b 50 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011ec51:	89 45 ec             	mov    %eax,-0x14(%ebp)
	tempAddress = kmalloc(4*Mega); 			   // Use Hole 4 -> Hole 4 = 1 M
f011ec54:	83 ec 0c             	sub    $0xc,%esp
f011ec57:	68 00 00 40 00       	push   $0x400000
f011ec5c:	e8 63 89 fe ff       	call   f01075c4 <kmalloc>
f011ec61:	83 c4 10             	add    $0x10,%esp
f011ec64:	89 85 24 ff ff ff    	mov    %eax,-0xdc(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x04100000)
f011ec6a:	c7 85 c0 fe ff ff 00 	movl   $0x1000,-0x140(%ebp)
f011ec71:	10 00 00 
f011ec74:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f011ec7a:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011ec7f:	89 85 bc fe ff ff    	mov    %eax,-0x144(%ebp)
f011ec85:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f011ec8b:	ba 00 00 00 00       	mov    $0x0,%edx
f011ec90:	f7 b5 c0 fe ff ff    	divl   -0x140(%ebp)
f011ec96:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f011ec9c:	29 d0                	sub    %edx,%eax
f011ec9e:	89 c1                	mov    %eax,%ecx
f011eca0:	c7 85 b8 fe ff ff 00 	movl   $0x1000,-0x148(%ebp)
f011eca7:	10 00 00 
f011ecaa:	a0 bc 0e 6c f0       	mov    0xf06c0ebc,%al
f011ecaf:	0f b6 d0             	movzbl %al,%edx
f011ecb2:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f011ecb8:	01 d0                	add    %edx,%eax
f011ecba:	48                   	dec    %eax
f011ecbb:	89 85 b4 fe ff ff    	mov    %eax,-0x14c(%ebp)
f011ecc1:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f011ecc7:	ba 00 00 00 00       	mov    $0x0,%edx
f011eccc:	f7 b5 b8 fe ff ff    	divl   -0x148(%ebp)
f011ecd2:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f011ecd8:	29 d0                	sub    %edx,%eax
f011ecda:	01 c1                	add    %eax,%ecx
f011ecdc:	c7 85 b0 fe ff ff 00 	movl   $0x1000,-0x150(%ebp)
f011ece3:	10 00 00 
f011ece6:	a0 bc 0e 6c f0       	mov    0xf06c0ebc,%al
f011eceb:	0f b6 c0             	movzbl %al,%eax
f011ecee:	c1 e0 04             	shl    $0x4,%eax
f011ecf1:	89 c2                	mov    %eax,%edx
f011ecf3:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f011ecf9:	01 d0                	add    %edx,%eax
f011ecfb:	48                   	dec    %eax
f011ecfc:	89 85 ac fe ff ff    	mov    %eax,-0x154(%ebp)
f011ed02:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f011ed08:	ba 00 00 00 00       	mov    $0x0,%edx
f011ed0d:	f7 b5 b0 fe ff ff    	divl   -0x150(%ebp)
f011ed13:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f011ed19:	29 d0                	sub    %edx,%eax
f011ed1b:	01 c8                	add    %ecx,%eax
f011ed1d:	8d 90 00 40 10 fa    	lea    -0x5efc000(%eax),%edx
f011ed23:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011ed29:	39 c2                	cmp    %eax,%edx
f011ed2b:	74 17                	je     f011ed44 <test_kmalloc_worstfit+0xe4d>
		panic("Worst Fit not working correctly");
f011ed2d:	83 ec 04             	sub    $0x4,%esp
f011ed30:	68 90 af 13 f0       	push   $0xf013af90
f011ed35:	68 76 04 00 00       	push   $0x476
f011ed3a:	68 76 a8 13 f0       	push   $0xf013a876
f011ed3f:	e8 62 14 fe ff       	call   f01001a6 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011ed44:	e8 43 4f fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011ed49:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011ed4c:	74 17                	je     f011ed65 <test_kmalloc_worstfit+0xe6e>
f011ed4e:	83 ec 04             	sub    $0x4,%esp
f011ed51:	68 90 a8 13 f0       	push   $0xf013a890
f011ed56:	68 77 04 00 00       	push   $0x477
f011ed5b:	68 76 a8 13 f0       	push   $0xf013a876
f011ed60:	e8 41 14 fe ff       	call   f01001a6 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) !=  4*Mega/PAGE_SIZE) panic("Wrong allocation:");
f011ed65:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f011ed68:	e8 51 d6 fe ff       	call   f010c3be <sys_calculate_free_frames>
f011ed6d:	29 c3                	sub    %eax,%ebx
f011ed6f:	89 d8                	mov    %ebx,%eax
f011ed71:	3d 00 04 00 00       	cmp    $0x400,%eax
f011ed76:	74 17                	je     f011ed8f <test_kmalloc_worstfit+0xe98>
f011ed78:	83 ec 04             	sub    $0x4,%esp
f011ed7b:	68 ae ad 13 f0       	push   $0xf013adae
f011ed80:	68 78 04 00 00       	push   $0x478
f011ed85:	68 76 a8 13 f0       	push   $0xf013a876
f011ed8a:	e8 17 14 fe ff       	call   f01001a6 <_panic>
	cprintf("Test %d Passed \n", ++count);
f011ed8f:	ff 45 e8             	incl   -0x18(%ebp)
f011ed92:	83 ec 08             	sub    $0x8,%esp
f011ed95:	ff 75 e8             	pushl  -0x18(%ebp)
f011ed98:	68 b0 af 13 f0       	push   $0xf013afb0
f011ed9d:	e8 8b 1e fe ff       	call   f0100c2d <cprintf>
f011eda2:	83 c4 10             	add    $0x10,%esp

	freeFrames = sys_calculate_free_frames() ;
f011eda5:	e8 14 d6 fe ff       	call   f010c3be <sys_calculate_free_frames>
f011edaa:	89 45 f0             	mov    %eax,-0x10(%ebp)
	freeDiskFrames = pf_calculate_free_frames();
f011edad:	e8 da 4e fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011edb2:	89 45 ec             	mov    %eax,-0x14(%ebp)
	tempAddress = kmalloc(2 * Mega); 			// Use Hole 2 -> Hole 2 = 2 M
f011edb5:	83 ec 0c             	sub    $0xc,%esp
f011edb8:	68 00 00 20 00       	push   $0x200000
f011edbd:	e8 02 88 fe ff       	call   f01075c4 <kmalloc>
f011edc2:	83 c4 10             	add    $0x10,%esp
f011edc5:	89 85 24 ff ff ff    	mov    %eax,-0xdc(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x00400000)
f011edcb:	c7 85 a8 fe ff ff 00 	movl   $0x1000,-0x158(%ebp)
f011edd2:	10 00 00 
f011edd5:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f011eddb:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011ede0:	89 85 a4 fe ff ff    	mov    %eax,-0x15c(%ebp)
f011ede6:	8b 85 a4 fe ff ff    	mov    -0x15c(%ebp),%eax
f011edec:	ba 00 00 00 00       	mov    $0x0,%edx
f011edf1:	f7 b5 a8 fe ff ff    	divl   -0x158(%ebp)
f011edf7:	8b 85 a4 fe ff ff    	mov    -0x15c(%ebp),%eax
f011edfd:	29 d0                	sub    %edx,%eax
f011edff:	89 c1                	mov    %eax,%ecx
f011ee01:	c7 85 a0 fe ff ff 00 	movl   $0x1000,-0x160(%ebp)
f011ee08:	10 00 00 
f011ee0b:	a0 bc 0e 6c f0       	mov    0xf06c0ebc,%al
f011ee10:	0f b6 d0             	movzbl %al,%edx
f011ee13:	8b 85 a0 fe ff ff    	mov    -0x160(%ebp),%eax
f011ee19:	01 d0                	add    %edx,%eax
f011ee1b:	48                   	dec    %eax
f011ee1c:	89 85 9c fe ff ff    	mov    %eax,-0x164(%ebp)
f011ee22:	8b 85 9c fe ff ff    	mov    -0x164(%ebp),%eax
f011ee28:	ba 00 00 00 00       	mov    $0x0,%edx
f011ee2d:	f7 b5 a0 fe ff ff    	divl   -0x160(%ebp)
f011ee33:	8b 85 9c fe ff ff    	mov    -0x164(%ebp),%eax
f011ee39:	29 d0                	sub    %edx,%eax
f011ee3b:	01 c1                	add    %eax,%ecx
f011ee3d:	c7 85 98 fe ff ff 00 	movl   $0x1000,-0x168(%ebp)
f011ee44:	10 00 00 
f011ee47:	a0 bc 0e 6c f0       	mov    0xf06c0ebc,%al
f011ee4c:	0f b6 c0             	movzbl %al,%eax
f011ee4f:	c1 e0 04             	shl    $0x4,%eax
f011ee52:	89 c2                	mov    %eax,%edx
f011ee54:	8b 85 98 fe ff ff    	mov    -0x168(%ebp),%eax
f011ee5a:	01 d0                	add    %edx,%eax
f011ee5c:	48                   	dec    %eax
f011ee5d:	89 85 94 fe ff ff    	mov    %eax,-0x16c(%ebp)
f011ee63:	8b 85 94 fe ff ff    	mov    -0x16c(%ebp),%eax
f011ee69:	ba 00 00 00 00       	mov    $0x0,%edx
f011ee6e:	f7 b5 98 fe ff ff    	divl   -0x168(%ebp)
f011ee74:	8b 85 94 fe ff ff    	mov    -0x16c(%ebp),%eax
f011ee7a:	29 d0                	sub    %edx,%eax
f011ee7c:	01 c8                	add    %ecx,%eax
f011ee7e:	8d 90 00 40 40 f6    	lea    -0x9bfc000(%eax),%edx
f011ee84:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011ee8a:	39 c2                	cmp    %eax,%edx
f011ee8c:	74 17                	je     f011eea5 <test_kmalloc_worstfit+0xfae>
		panic("Worst Fit not working correctly");
f011ee8e:	83 ec 04             	sub    $0x4,%esp
f011ee91:	68 90 af 13 f0       	push   $0xf013af90
f011ee96:	68 7f 04 00 00       	push   $0x47f
f011ee9b:	68 76 a8 13 f0       	push   $0xf013a876
f011eea0:	e8 01 13 fe ff       	call   f01001a6 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011eea5:	e8 e2 4d fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011eeaa:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011eead:	74 17                	je     f011eec6 <test_kmalloc_worstfit+0xfcf>
f011eeaf:	83 ec 04             	sub    $0x4,%esp
f011eeb2:	68 90 a8 13 f0       	push   $0xf013a890
f011eeb7:	68 80 04 00 00       	push   $0x480
f011eebc:	68 76 a8 13 f0       	push   $0xf013a876
f011eec1:	e8 e0 12 fe ff       	call   f01001a6 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) !=  2*Mega/PAGE_SIZE) panic("Wrong allocation:");
f011eec6:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f011eec9:	e8 f0 d4 fe ff       	call   f010c3be <sys_calculate_free_frames>
f011eece:	29 c3                	sub    %eax,%ebx
f011eed0:	89 d8                	mov    %ebx,%eax
f011eed2:	3d 00 02 00 00       	cmp    $0x200,%eax
f011eed7:	74 17                	je     f011eef0 <test_kmalloc_worstfit+0xff9>
f011eed9:	83 ec 04             	sub    $0x4,%esp
f011eedc:	68 ae ad 13 f0       	push   $0xf013adae
f011eee1:	68 81 04 00 00       	push   $0x481
f011eee6:	68 76 a8 13 f0       	push   $0xf013a876
f011eeeb:	e8 b6 12 fe ff       	call   f01001a6 <_panic>
	cprintf("Test %d Passed \n", ++count);
f011eef0:	ff 45 e8             	incl   -0x18(%ebp)
f011eef3:	83 ec 08             	sub    $0x8,%esp
f011eef6:	ff 75 e8             	pushl  -0x18(%ebp)
f011eef9:	68 b0 af 13 f0       	push   $0xf013afb0
f011eefe:	e8 2a 1d fe ff       	call   f0100c2d <cprintf>
f011ef03:	83 c4 10             	add    $0x10,%esp

	freeFrames = sys_calculate_free_frames() ;
f011ef06:	e8 b3 d4 fe ff       	call   f010c3be <sys_calculate_free_frames>
f011ef0b:	89 45 f0             	mov    %eax,-0x10(%ebp)
	freeDiskFrames = pf_calculate_free_frames();
f011ef0e:	e8 79 4d fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011ef13:	89 45 ec             	mov    %eax,-0x14(%ebp)
	tempAddress = kmalloc(1*Mega + 512*kilo);    // Use Hole 1 -> Hole 1 = 0.5 M
f011ef16:	83 ec 0c             	sub    $0xc,%esp
f011ef19:	68 00 00 18 00       	push   $0x180000
f011ef1e:	e8 a1 86 fe ff       	call   f01075c4 <kmalloc>
f011ef23:	83 c4 10             	add    $0x10,%esp
f011ef26:	89 85 24 ff ff ff    	mov    %eax,-0xdc(%ebp)
	if((uint32)tempAddress != ACTUAL_START)
f011ef2c:	c7 85 90 fe ff ff 00 	movl   $0x1000,-0x170(%ebp)
f011ef33:	10 00 00 
f011ef36:	8b 85 90 fe ff ff    	mov    -0x170(%ebp),%eax
f011ef3c:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011ef41:	89 85 8c fe ff ff    	mov    %eax,-0x174(%ebp)
f011ef47:	8b 85 8c fe ff ff    	mov    -0x174(%ebp),%eax
f011ef4d:	ba 00 00 00 00       	mov    $0x0,%edx
f011ef52:	f7 b5 90 fe ff ff    	divl   -0x170(%ebp)
f011ef58:	8b 85 8c fe ff ff    	mov    -0x174(%ebp),%eax
f011ef5e:	29 d0                	sub    %edx,%eax
f011ef60:	89 c1                	mov    %eax,%ecx
f011ef62:	c7 85 88 fe ff ff 00 	movl   $0x1000,-0x178(%ebp)
f011ef69:	10 00 00 
f011ef6c:	a0 bc 0e 6c f0       	mov    0xf06c0ebc,%al
f011ef71:	0f b6 d0             	movzbl %al,%edx
f011ef74:	8b 85 88 fe ff ff    	mov    -0x178(%ebp),%eax
f011ef7a:	01 d0                	add    %edx,%eax
f011ef7c:	48                   	dec    %eax
f011ef7d:	89 85 84 fe ff ff    	mov    %eax,-0x17c(%ebp)
f011ef83:	8b 85 84 fe ff ff    	mov    -0x17c(%ebp),%eax
f011ef89:	ba 00 00 00 00       	mov    $0x0,%edx
f011ef8e:	f7 b5 88 fe ff ff    	divl   -0x178(%ebp)
f011ef94:	8b 85 84 fe ff ff    	mov    -0x17c(%ebp),%eax
f011ef9a:	29 d0                	sub    %edx,%eax
f011ef9c:	01 c1                	add    %eax,%ecx
f011ef9e:	c7 85 80 fe ff ff 00 	movl   $0x1000,-0x180(%ebp)
f011efa5:	10 00 00 
f011efa8:	a0 bc 0e 6c f0       	mov    0xf06c0ebc,%al
f011efad:	0f b6 c0             	movzbl %al,%eax
f011efb0:	c1 e0 04             	shl    $0x4,%eax
f011efb3:	89 c2                	mov    %eax,%edx
f011efb5:	8b 85 80 fe ff ff    	mov    -0x180(%ebp),%eax
f011efbb:	01 d0                	add    %edx,%eax
f011efbd:	48                   	dec    %eax
f011efbe:	89 85 7c fe ff ff    	mov    %eax,-0x184(%ebp)
f011efc4:	8b 85 7c fe ff ff    	mov    -0x184(%ebp),%eax
f011efca:	ba 00 00 00 00       	mov    $0x0,%edx
f011efcf:	f7 b5 80 fe ff ff    	divl   -0x180(%ebp)
f011efd5:	8b 85 7c fe ff ff    	mov    -0x184(%ebp),%eax
f011efdb:	29 d0                	sub    %edx,%eax
f011efdd:	01 c8                	add    %ecx,%eax
f011efdf:	8d 90 00 40 00 f6    	lea    -0x9ffc000(%eax),%edx
f011efe5:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011efeb:	39 c2                	cmp    %eax,%edx
f011efed:	74 17                	je     f011f006 <test_kmalloc_worstfit+0x110f>
		panic("Worst Fit not working correctly");
f011efef:	83 ec 04             	sub    $0x4,%esp
f011eff2:	68 90 af 13 f0       	push   $0xf013af90
f011eff7:	68 88 04 00 00       	push   $0x488
f011effc:	68 76 a8 13 f0       	push   $0xf013a876
f011f001:	e8 a0 11 fe ff       	call   f01001a6 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011f006:	e8 81 4c fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011f00b:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011f00e:	74 17                	je     f011f027 <test_kmalloc_worstfit+0x1130>
f011f010:	83 ec 04             	sub    $0x4,%esp
f011f013:	68 90 a8 13 f0       	push   $0xf013a890
f011f018:	68 89 04 00 00       	push   $0x489
f011f01d:	68 76 a8 13 f0       	push   $0xf013a876
f011f022:	e8 7f 11 fe ff       	call   f01001a6 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) !=  (1*Mega + 512*kilo)/PAGE_SIZE) panic("Wrong allocation:");
f011f027:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f011f02a:	e8 8f d3 fe ff       	call   f010c3be <sys_calculate_free_frames>
f011f02f:	29 c3                	sub    %eax,%ebx
f011f031:	89 d8                	mov    %ebx,%eax
f011f033:	3d 80 01 00 00       	cmp    $0x180,%eax
f011f038:	74 17                	je     f011f051 <test_kmalloc_worstfit+0x115a>
f011f03a:	83 ec 04             	sub    $0x4,%esp
f011f03d:	68 ae ad 13 f0       	push   $0xf013adae
f011f042:	68 8a 04 00 00       	push   $0x48a
f011f047:	68 76 a8 13 f0       	push   $0xf013a876
f011f04c:	e8 55 11 fe ff       	call   f01001a6 <_panic>
	cprintf("Test %d Passed \n", ++count);
f011f051:	ff 45 e8             	incl   -0x18(%ebp)
f011f054:	83 ec 08             	sub    $0x8,%esp
f011f057:	ff 75 e8             	pushl  -0x18(%ebp)
f011f05a:	68 b0 af 13 f0       	push   $0xf013afb0
f011f05f:	e8 c9 1b fe ff       	call   f0100c2d <cprintf>
f011f064:	83 c4 10             	add    $0x10,%esp

	freeFrames = sys_calculate_free_frames() ;
f011f067:	e8 52 d3 fe ff       	call   f010c3be <sys_calculate_free_frames>
f011f06c:	89 45 f0             	mov    %eax,-0x10(%ebp)
	freeDiskFrames = pf_calculate_free_frames();
f011f06f:	e8 18 4c fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011f074:	89 45 ec             	mov    %eax,-0x14(%ebp)
	tempAddress = kmalloc(512*kilo); 			   // Use Hole 2 -> Hole 2 = 1.5 M
f011f077:	83 ec 0c             	sub    $0xc,%esp
f011f07a:	68 00 00 08 00       	push   $0x80000
f011f07f:	e8 40 85 fe ff       	call   f01075c4 <kmalloc>
f011f084:	83 c4 10             	add    $0x10,%esp
f011f087:	89 85 24 ff ff ff    	mov    %eax,-0xdc(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x00600000)
f011f08d:	c7 85 78 fe ff ff 00 	movl   $0x1000,-0x188(%ebp)
f011f094:	10 00 00 
f011f097:	8b 85 78 fe ff ff    	mov    -0x188(%ebp),%eax
f011f09d:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011f0a2:	89 85 74 fe ff ff    	mov    %eax,-0x18c(%ebp)
f011f0a8:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f011f0ae:	ba 00 00 00 00       	mov    $0x0,%edx
f011f0b3:	f7 b5 78 fe ff ff    	divl   -0x188(%ebp)
f011f0b9:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f011f0bf:	29 d0                	sub    %edx,%eax
f011f0c1:	89 c1                	mov    %eax,%ecx
f011f0c3:	c7 85 70 fe ff ff 00 	movl   $0x1000,-0x190(%ebp)
f011f0ca:	10 00 00 
f011f0cd:	a0 bc 0e 6c f0       	mov    0xf06c0ebc,%al
f011f0d2:	0f b6 d0             	movzbl %al,%edx
f011f0d5:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f011f0db:	01 d0                	add    %edx,%eax
f011f0dd:	48                   	dec    %eax
f011f0de:	89 85 6c fe ff ff    	mov    %eax,-0x194(%ebp)
f011f0e4:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f011f0ea:	ba 00 00 00 00       	mov    $0x0,%edx
f011f0ef:	f7 b5 70 fe ff ff    	divl   -0x190(%ebp)
f011f0f5:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f011f0fb:	29 d0                	sub    %edx,%eax
f011f0fd:	01 c1                	add    %eax,%ecx
f011f0ff:	c7 85 68 fe ff ff 00 	movl   $0x1000,-0x198(%ebp)
f011f106:	10 00 00 
f011f109:	a0 bc 0e 6c f0       	mov    0xf06c0ebc,%al
f011f10e:	0f b6 c0             	movzbl %al,%eax
f011f111:	c1 e0 04             	shl    $0x4,%eax
f011f114:	89 c2                	mov    %eax,%edx
f011f116:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f011f11c:	01 d0                	add    %edx,%eax
f011f11e:	48                   	dec    %eax
f011f11f:	89 85 64 fe ff ff    	mov    %eax,-0x19c(%ebp)
f011f125:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f011f12b:	ba 00 00 00 00       	mov    $0x0,%edx
f011f130:	f7 b5 68 fe ff ff    	divl   -0x198(%ebp)
f011f136:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f011f13c:	29 d0                	sub    %edx,%eax
f011f13e:	01 c8                	add    %ecx,%eax
f011f140:	8d 90 00 40 60 f6    	lea    -0x99fc000(%eax),%edx
f011f146:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011f14c:	39 c2                	cmp    %eax,%edx
f011f14e:	74 17                	je     f011f167 <test_kmalloc_worstfit+0x1270>
		panic("Worst Fit not working correctly");
f011f150:	83 ec 04             	sub    $0x4,%esp
f011f153:	68 90 af 13 f0       	push   $0xf013af90
f011f158:	68 91 04 00 00       	push   $0x491
f011f15d:	68 76 a8 13 f0       	push   $0xf013a876
f011f162:	e8 3f 10 fe ff       	call   f01001a6 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011f167:	e8 20 4b fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011f16c:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011f16f:	74 17                	je     f011f188 <test_kmalloc_worstfit+0x1291>
f011f171:	83 ec 04             	sub    $0x4,%esp
f011f174:	68 90 a8 13 f0       	push   $0xf013a890
f011f179:	68 92 04 00 00       	push   $0x492
f011f17e:	68 76 a8 13 f0       	push   $0xf013a876
f011f183:	e8 1e 10 fe ff       	call   f01001a6 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) !=  (512*kilo)/PAGE_SIZE) panic("Wrong allocation:");
f011f188:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f011f18b:	e8 2e d2 fe ff       	call   f010c3be <sys_calculate_free_frames>
f011f190:	29 c3                	sub    %eax,%ebx
f011f192:	89 d8                	mov    %ebx,%eax
f011f194:	3d 80 00 00 00       	cmp    $0x80,%eax
f011f199:	74 17                	je     f011f1b2 <test_kmalloc_worstfit+0x12bb>
f011f19b:	83 ec 04             	sub    $0x4,%esp
f011f19e:	68 ae ad 13 f0       	push   $0xf013adae
f011f1a3:	68 93 04 00 00       	push   $0x493
f011f1a8:	68 76 a8 13 f0       	push   $0xf013a876
f011f1ad:	e8 f4 0f fe ff       	call   f01001a6 <_panic>
	cprintf("Test %d Passed \n", ++count);
f011f1b2:	ff 45 e8             	incl   -0x18(%ebp)
f011f1b5:	83 ec 08             	sub    $0x8,%esp
f011f1b8:	ff 75 e8             	pushl  -0x18(%ebp)
f011f1bb:	68 b0 af 13 f0       	push   $0xf013afb0
f011f1c0:	e8 68 1a fe ff       	call   f0100c2d <cprintf>
f011f1c5:	83 c4 10             	add    $0x10,%esp

	freeFrames = sys_calculate_free_frames() ;
f011f1c8:	e8 f1 d1 fe ff       	call   f010c3be <sys_calculate_free_frames>
f011f1cd:	89 45 f0             	mov    %eax,-0x10(%ebp)
	freeDiskFrames = pf_calculate_free_frames();
f011f1d0:	e8 b7 4a fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011f1d5:	89 45 ec             	mov    %eax,-0x14(%ebp)
	tempAddress = kmalloc(kilo); 			   // Use Hole 5 -> Hole 5 = 2 M - K
f011f1d8:	83 ec 0c             	sub    $0xc,%esp
f011f1db:	68 00 04 00 00       	push   $0x400
f011f1e0:	e8 df 83 fe ff       	call   f01075c4 <kmalloc>
f011f1e5:	83 c4 10             	add    $0x10,%esp
f011f1e8:	89 85 24 ff ff ff    	mov    %eax,-0xdc(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x09200000)
f011f1ee:	c7 85 60 fe ff ff 00 	movl   $0x1000,-0x1a0(%ebp)
f011f1f5:	10 00 00 
f011f1f8:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f011f1fe:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011f203:	89 85 5c fe ff ff    	mov    %eax,-0x1a4(%ebp)
f011f209:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f011f20f:	ba 00 00 00 00       	mov    $0x0,%edx
f011f214:	f7 b5 60 fe ff ff    	divl   -0x1a0(%ebp)
f011f21a:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f011f220:	29 d0                	sub    %edx,%eax
f011f222:	89 c1                	mov    %eax,%ecx
f011f224:	c7 85 58 fe ff ff 00 	movl   $0x1000,-0x1a8(%ebp)
f011f22b:	10 00 00 
f011f22e:	a0 bc 0e 6c f0       	mov    0xf06c0ebc,%al
f011f233:	0f b6 d0             	movzbl %al,%edx
f011f236:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f011f23c:	01 d0                	add    %edx,%eax
f011f23e:	48                   	dec    %eax
f011f23f:	89 85 54 fe ff ff    	mov    %eax,-0x1ac(%ebp)
f011f245:	8b 85 54 fe ff ff    	mov    -0x1ac(%ebp),%eax
f011f24b:	ba 00 00 00 00       	mov    $0x0,%edx
f011f250:	f7 b5 58 fe ff ff    	divl   -0x1a8(%ebp)
f011f256:	8b 85 54 fe ff ff    	mov    -0x1ac(%ebp),%eax
f011f25c:	29 d0                	sub    %edx,%eax
f011f25e:	01 c1                	add    %eax,%ecx
f011f260:	c7 85 50 fe ff ff 00 	movl   $0x1000,-0x1b0(%ebp)
f011f267:	10 00 00 
f011f26a:	a0 bc 0e 6c f0       	mov    0xf06c0ebc,%al
f011f26f:	0f b6 c0             	movzbl %al,%eax
f011f272:	c1 e0 04             	shl    $0x4,%eax
f011f275:	89 c2                	mov    %eax,%edx
f011f277:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f011f27d:	01 d0                	add    %edx,%eax
f011f27f:	48                   	dec    %eax
f011f280:	89 85 4c fe ff ff    	mov    %eax,-0x1b4(%ebp)
f011f286:	8b 85 4c fe ff ff    	mov    -0x1b4(%ebp),%eax
f011f28c:	ba 00 00 00 00       	mov    $0x0,%edx
f011f291:	f7 b5 50 fe ff ff    	divl   -0x1b0(%ebp)
f011f297:	8b 85 4c fe ff ff    	mov    -0x1b4(%ebp),%eax
f011f29d:	29 d0                	sub    %edx,%eax
f011f29f:	01 c8                	add    %ecx,%eax
f011f2a1:	8d 90 00 40 20 ff    	lea    -0xdfc000(%eax),%edx
f011f2a7:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011f2ad:	39 c2                	cmp    %eax,%edx
f011f2af:	74 17                	je     f011f2c8 <test_kmalloc_worstfit+0x13d1>
		panic("Worst Fit not working correctly");
f011f2b1:	83 ec 04             	sub    $0x4,%esp
f011f2b4:	68 90 af 13 f0       	push   $0xf013af90
f011f2b9:	68 9a 04 00 00       	push   $0x49a
f011f2be:	68 76 a8 13 f0       	push   $0xf013a876
f011f2c3:	e8 de 0e fe ff       	call   f01001a6 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011f2c8:	e8 bf 49 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011f2cd:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011f2d0:	74 17                	je     f011f2e9 <test_kmalloc_worstfit+0x13f2>
f011f2d2:	83 ec 04             	sub    $0x4,%esp
f011f2d5:	68 90 a8 13 f0       	push   $0xf013a890
f011f2da:	68 9b 04 00 00       	push   $0x49b
f011f2df:	68 76 a8 13 f0       	push   $0xf013a876
f011f2e4:	e8 bd 0e fe ff       	call   f01001a6 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) !=  (4*kilo)/PAGE_SIZE) panic("Wrong allocation:");
f011f2e9:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f011f2ec:	e8 cd d0 fe ff       	call   f010c3be <sys_calculate_free_frames>
f011f2f1:	29 c3                	sub    %eax,%ebx
f011f2f3:	89 d8                	mov    %ebx,%eax
f011f2f5:	83 f8 01             	cmp    $0x1,%eax
f011f2f8:	74 17                	je     f011f311 <test_kmalloc_worstfit+0x141a>
f011f2fa:	83 ec 04             	sub    $0x4,%esp
f011f2fd:	68 ae ad 13 f0       	push   $0xf013adae
f011f302:	68 9c 04 00 00       	push   $0x49c
f011f307:	68 76 a8 13 f0       	push   $0xf013a876
f011f30c:	e8 95 0e fe ff       	call   f01001a6 <_panic>
	cprintf("Test %d Passed \n", ++count);
f011f311:	ff 45 e8             	incl   -0x18(%ebp)
f011f314:	83 ec 08             	sub    $0x8,%esp
f011f317:	ff 75 e8             	pushl  -0x18(%ebp)
f011f31a:	68 b0 af 13 f0       	push   $0xf013afb0
f011f31f:	e8 09 19 fe ff       	call   f0100c2d <cprintf>
f011f324:	83 c4 10             	add    $0x10,%esp

	freeFrames = sys_calculate_free_frames() ;
f011f327:	e8 92 d0 fe ff       	call   f010c3be <sys_calculate_free_frames>
f011f32c:	89 45 f0             	mov    %eax,-0x10(%ebp)
	freeDiskFrames = pf_calculate_free_frames();
f011f32f:	e8 58 49 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011f334:	89 45 ec             	mov    %eax,-0x14(%ebp)
	tempAddress = kmalloc(2*Mega - 4*kilo); 		// Use Hole 5 -> Hole 5 = 0
f011f337:	83 ec 0c             	sub    $0xc,%esp
f011f33a:	68 00 f0 1f 00       	push   $0x1ff000
f011f33f:	e8 80 82 fe ff       	call   f01075c4 <kmalloc>
f011f344:	83 c4 10             	add    $0x10,%esp
f011f347:	89 85 24 ff ff ff    	mov    %eax,-0xdc(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x09201000)
f011f34d:	c7 85 48 fe ff ff 00 	movl   $0x1000,-0x1b8(%ebp)
f011f354:	10 00 00 
f011f357:	8b 85 48 fe ff ff    	mov    -0x1b8(%ebp),%eax
f011f35d:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011f362:	89 85 44 fe ff ff    	mov    %eax,-0x1bc(%ebp)
f011f368:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f011f36e:	ba 00 00 00 00       	mov    $0x0,%edx
f011f373:	f7 b5 48 fe ff ff    	divl   -0x1b8(%ebp)
f011f379:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f011f37f:	29 d0                	sub    %edx,%eax
f011f381:	89 c1                	mov    %eax,%ecx
f011f383:	c7 85 40 fe ff ff 00 	movl   $0x1000,-0x1c0(%ebp)
f011f38a:	10 00 00 
f011f38d:	a0 bc 0e 6c f0       	mov    0xf06c0ebc,%al
f011f392:	0f b6 d0             	movzbl %al,%edx
f011f395:	8b 85 40 fe ff ff    	mov    -0x1c0(%ebp),%eax
f011f39b:	01 d0                	add    %edx,%eax
f011f39d:	48                   	dec    %eax
f011f39e:	89 85 3c fe ff ff    	mov    %eax,-0x1c4(%ebp)
f011f3a4:	8b 85 3c fe ff ff    	mov    -0x1c4(%ebp),%eax
f011f3aa:	ba 00 00 00 00       	mov    $0x0,%edx
f011f3af:	f7 b5 40 fe ff ff    	divl   -0x1c0(%ebp)
f011f3b5:	8b 85 3c fe ff ff    	mov    -0x1c4(%ebp),%eax
f011f3bb:	29 d0                	sub    %edx,%eax
f011f3bd:	01 c1                	add    %eax,%ecx
f011f3bf:	c7 85 38 fe ff ff 00 	movl   $0x1000,-0x1c8(%ebp)
f011f3c6:	10 00 00 
f011f3c9:	a0 bc 0e 6c f0       	mov    0xf06c0ebc,%al
f011f3ce:	0f b6 c0             	movzbl %al,%eax
f011f3d1:	c1 e0 04             	shl    $0x4,%eax
f011f3d4:	89 c2                	mov    %eax,%edx
f011f3d6:	8b 85 38 fe ff ff    	mov    -0x1c8(%ebp),%eax
f011f3dc:	01 d0                	add    %edx,%eax
f011f3de:	48                   	dec    %eax
f011f3df:	89 85 34 fe ff ff    	mov    %eax,-0x1cc(%ebp)
f011f3e5:	8b 85 34 fe ff ff    	mov    -0x1cc(%ebp),%eax
f011f3eb:	ba 00 00 00 00       	mov    $0x0,%edx
f011f3f0:	f7 b5 38 fe ff ff    	divl   -0x1c8(%ebp)
f011f3f6:	8b 85 34 fe ff ff    	mov    -0x1cc(%ebp),%eax
f011f3fc:	29 d0                	sub    %edx,%eax
f011f3fe:	01 c8                	add    %ecx,%eax
f011f400:	8d 90 00 50 20 ff    	lea    -0xdfb000(%eax),%edx
f011f406:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011f40c:	39 c2                	cmp    %eax,%edx
f011f40e:	74 17                	je     f011f427 <test_kmalloc_worstfit+0x1530>
		panic("Worst Fit not working correctly");
f011f410:	83 ec 04             	sub    $0x4,%esp
f011f413:	68 90 af 13 f0       	push   $0xf013af90
f011f418:	68 a3 04 00 00       	push   $0x4a3
f011f41d:	68 76 a8 13 f0       	push   $0xf013a876
f011f422:	e8 7f 0d fe ff       	call   f01001a6 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011f427:	e8 60 48 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011f42c:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011f42f:	74 17                	je     f011f448 <test_kmalloc_worstfit+0x1551>
f011f431:	83 ec 04             	sub    $0x4,%esp
f011f434:	68 90 a8 13 f0       	push   $0xf013a890
f011f439:	68 a4 04 00 00       	push   $0x4a4
f011f43e:	68 76 a8 13 f0       	push   $0xf013a876
f011f443:	e8 5e 0d fe ff       	call   f01001a6 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) !=  (2*Mega - 4*kilo)/PAGE_SIZE) panic("Wrong allocation:");
f011f448:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f011f44b:	e8 6e cf fe ff       	call   f010c3be <sys_calculate_free_frames>
f011f450:	29 c3                	sub    %eax,%ebx
f011f452:	89 d8                	mov    %ebx,%eax
f011f454:	3d ff 01 00 00       	cmp    $0x1ff,%eax
f011f459:	74 17                	je     f011f472 <test_kmalloc_worstfit+0x157b>
f011f45b:	83 ec 04             	sub    $0x4,%esp
f011f45e:	68 ae ad 13 f0       	push   $0xf013adae
f011f463:	68 a5 04 00 00       	push   $0x4a5
f011f468:	68 76 a8 13 f0       	push   $0xf013a876
f011f46d:	e8 34 0d fe ff       	call   f01001a6 <_panic>
	cprintf("Test %d Passed \n", ++count);
f011f472:	ff 45 e8             	incl   -0x18(%ebp)
f011f475:	83 ec 08             	sub    $0x8,%esp
f011f478:	ff 75 e8             	pushl  -0x18(%ebp)
f011f47b:	68 b0 af 13 f0       	push   $0xf013afb0
f011f480:	e8 a8 17 fe ff       	call   f0100c2d <cprintf>
f011f485:	83 c4 10             	add    $0x10,%esp

	// Check that worst fit returns null in case all holes are not free
	freeFrames = sys_calculate_free_frames() ;
f011f488:	e8 31 cf fe ff       	call   f010c3be <sys_calculate_free_frames>
f011f48d:	89 45 f0             	mov    %eax,-0x10(%ebp)
	freeDiskFrames = pf_calculate_free_frames();
f011f490:	e8 f7 47 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011f495:	89 45 ec             	mov    %eax,-0x14(%ebp)
	tempAddress = kmalloc(4*Mega); 		//No Suitable hole
f011f498:	83 ec 0c             	sub    $0xc,%esp
f011f49b:	68 00 00 40 00       	push   $0x400000
f011f4a0:	e8 1f 81 fe ff       	call   f01075c4 <kmalloc>
f011f4a5:	83 c4 10             	add    $0x10,%esp
f011f4a8:	89 85 24 ff ff ff    	mov    %eax,-0xdc(%ebp)
	if((uint32)tempAddress != 0x0)
f011f4ae:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011f4b4:	85 c0                	test   %eax,%eax
f011f4b6:	74 17                	je     f011f4cf <test_kmalloc_worstfit+0x15d8>
		panic("Worst Fit not working correctly");
f011f4b8:	83 ec 04             	sub    $0x4,%esp
f011f4bb:	68 90 af 13 f0       	push   $0xf013af90
f011f4c0:	68 ad 04 00 00       	push   $0x4ad
f011f4c5:	68 76 a8 13 f0       	push   $0xf013a876
f011f4ca:	e8 d7 0c fe ff       	call   f01001a6 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011f4cf:	e8 b8 47 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011f4d4:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011f4d7:	74 17                	je     f011f4f0 <test_kmalloc_worstfit+0x15f9>
f011f4d9:	83 ec 04             	sub    $0x4,%esp
f011f4dc:	68 90 a8 13 f0       	push   $0xf013a890
f011f4e1:	68 ae 04 00 00       	push   $0x4ae
f011f4e6:	68 76 a8 13 f0       	push   $0xf013a876
f011f4eb:	e8 b6 0c fe ff       	call   f01001a6 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) !=  0) panic("Wrong allocation:");
f011f4f0:	e8 c9 ce fe ff       	call   f010c3be <sys_calculate_free_frames>
f011f4f5:	89 c2                	mov    %eax,%edx
f011f4f7:	8b 45 f0             	mov    -0x10(%ebp),%eax
f011f4fa:	39 c2                	cmp    %eax,%edx
f011f4fc:	74 17                	je     f011f515 <test_kmalloc_worstfit+0x161e>
f011f4fe:	83 ec 04             	sub    $0x4,%esp
f011f501:	68 ae ad 13 f0       	push   $0xf013adae
f011f506:	68 af 04 00 00       	push   $0x4af
f011f50b:	68 76 a8 13 f0       	push   $0xf013a876
f011f510:	e8 91 0c fe ff       	call   f01001a6 <_panic>
	cprintf("Test %d Passed \n", ++count);
f011f515:	ff 45 e8             	incl   -0x18(%ebp)
f011f518:	83 ec 08             	sub    $0x8,%esp
f011f51b:	ff 75 e8             	pushl  -0x18(%ebp)
f011f51e:	68 b0 af 13 f0       	push   $0xf013afb0
f011f523:	e8 05 17 fe ff       	call   f0100c2d <cprintf>
f011f528:	83 c4 10             	add    $0x10,%esp

	cprintf("Congratulations!! test Worst Fit completed successfully.\n");
f011f52b:	83 ec 0c             	sub    $0xc,%esp
f011f52e:	68 c4 af 13 f0       	push   $0xf013afc4
f011f533:	e8 f5 16 fe ff       	call   f0100c2d <cprintf>
f011f538:	83 c4 10             	add    $0x10,%esp


	return 1;
f011f53b:	b8 01 00 00 00       	mov    $0x1,%eax
}
f011f540:	8d 65 f8             	lea    -0x8(%ebp),%esp
f011f543:	5b                   	pop    %ebx
f011f544:	5f                   	pop    %edi
f011f545:	5d                   	pop    %ebp
f011f546:	c3                   	ret    

f011f547 <test_kfree>:

int test_kfree()
{
f011f547:	55                   	push   %ebp
f011f548:	89 e5                	mov    %esp,%ebp
f011f54a:	57                   	push   %edi
f011f54b:	53                   	push   %ebx
f011f54c:	81 ec c0 02 00 00    	sub    $0x2c0,%esp
	cprintf("==============================================\n");
f011f552:	83 ec 0c             	sub    $0xc,%esp
f011f555:	68 b8 a7 13 f0       	push   $0xf013a7b8
f011f55a:	e8 ce 16 fe ff       	call   f0100c2d <cprintf>
f011f55f:	83 c4 10             	add    $0x10,%esp
	cprintf("MAKE SURE to have a FRESH RUN for this test\n(i.e. don't run any program/test before it)\n");
f011f562:	83 ec 0c             	sub    $0xc,%esp
f011f565:	68 e8 a7 13 f0       	push   $0xf013a7e8
f011f56a:	e8 be 16 fe ff       	call   f0100c2d <cprintf>
f011f56f:	83 c4 10             	add    $0x10,%esp
	cprintf("==============================================\n");
f011f572:	83 ec 0c             	sub    $0xc,%esp
f011f575:	68 b8 a7 13 f0       	push   $0xf013a7b8
f011f57a:	e8 ae 16 fe ff       	call   f0100c2d <cprintf>
f011f57f:	83 c4 10             	add    $0x10,%esp

	char minByte = 1<<7;
f011f582:	c6 45 e7 80          	movb   $0x80,-0x19(%ebp)
	char maxByte = 0x7F;
f011f586:	c6 45 e6 7f          	movb   $0x7f,-0x1a(%ebp)
	short minShort = 1<<15 ;
f011f58a:	66 c7 45 e4 00 80    	movw   $0x8000,-0x1c(%ebp)
	short maxShort = 0x7FFF;
f011f590:	66 c7 45 e2 ff 7f    	movw   $0x7fff,-0x1e(%ebp)
	int minInt = 1<<31 ;
f011f596:	c7 45 dc 00 00 00 80 	movl   $0x80000000,-0x24(%ebp)
	int maxInt = 0x7FFFFFFF;
f011f59d:	c7 45 d8 ff ff ff 7f 	movl   $0x7fffffff,-0x28(%ebp)
	char *byteArr, *byteArr2 ;
	short *shortArr, *shortArr2 ;
	int *intArr;
	struct MyStruct *structArr ;
	int lastIndexOfByte, lastIndexOfByte2, lastIndexOfShort, lastIndexOfShort2, lastIndexOfInt, lastIndexOfStruct;
	int start_freeFrames = sys_calculate_free_frames() ;
f011f5a4:	e8 15 ce fe ff       	call   f010c3be <sys_calculate_free_frames>
f011f5a9:	89 45 d4             	mov    %eax,-0x2c(%ebp)

	//malloc some spaces
	int i, freeFrames, freeDiskFrames ;
	char* ptr;
	int lastIndices[20] = {0};
f011f5ac:	8d 95 e8 fd ff ff    	lea    -0x218(%ebp),%edx
f011f5b2:	b9 14 00 00 00       	mov    $0x14,%ecx
f011f5b7:	b8 00 00 00 00       	mov    $0x0,%eax
f011f5bc:	89 d7                	mov    %edx,%edi
f011f5be:	f3 ab                	rep stos %eax,%es:(%edi)
	int sums[20] = {0};
f011f5c0:	8d 95 98 fd ff ff    	lea    -0x268(%ebp),%edx
f011f5c6:	b9 14 00 00 00       	mov    $0x14,%ecx
f011f5cb:	b8 00 00 00 00       	mov    $0x0,%eax
f011f5d0:	89 d7                	mov    %edx,%edi
f011f5d2:	f3 ab                	rep stos %eax,%es:(%edi)
	void* ptr_allocations[20] = {0};
f011f5d4:	8d 95 48 fd ff ff    	lea    -0x2b8(%ebp),%edx
f011f5da:	b9 14 00 00 00       	mov    $0x14,%ecx
f011f5df:	b8 00 00 00 00       	mov    $0x0,%eax
f011f5e4:	89 d7                	mov    %edx,%edi
f011f5e6:	f3 ab                	rep stos %eax,%es:(%edi)
	{
		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f011f5e8:	e8 d1 cd fe ff       	call   f010c3be <sys_calculate_free_frames>
f011f5ed:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011f5f0:	e8 97 46 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011f5f5:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[0] = kmalloc(2*Mega-kilo);
f011f5f8:	83 ec 0c             	sub    $0xc,%esp
f011f5fb:	68 00 fc 1f 00       	push   $0x1ffc00
f011f600:	e8 bf 7f fe ff       	call   f01075c4 <kmalloc>
f011f605:	83 c4 10             	add    $0x10,%esp
f011f608:	89 85 48 fd ff ff    	mov    %eax,-0x2b8(%ebp)
		if ((uint32) ptr_allocations[0] !=  (ACTUAL_START)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f011f60e:	8b 85 48 fd ff ff    	mov    -0x2b8(%ebp),%eax
f011f614:	89 c1                	mov    %eax,%ecx
f011f616:	c7 45 c8 00 10 00 00 	movl   $0x1000,-0x38(%ebp)
f011f61d:	8b 45 c8             	mov    -0x38(%ebp),%eax
f011f620:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011f625:	89 45 c4             	mov    %eax,-0x3c(%ebp)
f011f628:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f011f62b:	ba 00 00 00 00       	mov    $0x0,%edx
f011f630:	f7 75 c8             	divl   -0x38(%ebp)
f011f633:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f011f636:	29 d0                	sub    %edx,%eax
f011f638:	89 c3                	mov    %eax,%ebx
f011f63a:	c7 45 c0 00 10 00 00 	movl   $0x1000,-0x40(%ebp)
f011f641:	a0 bc 0e 6c f0       	mov    0xf06c0ebc,%al
f011f646:	0f b6 d0             	movzbl %al,%edx
f011f649:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011f64c:	01 d0                	add    %edx,%eax
f011f64e:	48                   	dec    %eax
f011f64f:	89 45 bc             	mov    %eax,-0x44(%ebp)
f011f652:	8b 45 bc             	mov    -0x44(%ebp),%eax
f011f655:	ba 00 00 00 00       	mov    $0x0,%edx
f011f65a:	f7 75 c0             	divl   -0x40(%ebp)
f011f65d:	8b 45 bc             	mov    -0x44(%ebp),%eax
f011f660:	29 d0                	sub    %edx,%eax
f011f662:	01 c3                	add    %eax,%ebx
f011f664:	c7 45 b8 00 10 00 00 	movl   $0x1000,-0x48(%ebp)
f011f66b:	a0 bc 0e 6c f0       	mov    0xf06c0ebc,%al
f011f670:	0f b6 c0             	movzbl %al,%eax
f011f673:	c1 e0 04             	shl    $0x4,%eax
f011f676:	89 c2                	mov    %eax,%edx
f011f678:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011f67b:	01 d0                	add    %edx,%eax
f011f67d:	48                   	dec    %eax
f011f67e:	89 45 b4             	mov    %eax,-0x4c(%ebp)
f011f681:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f011f684:	ba 00 00 00 00       	mov    $0x0,%edx
f011f689:	f7 75 b8             	divl   -0x48(%ebp)
f011f68c:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f011f68f:	29 d0                	sub    %edx,%eax
f011f691:	01 d8                	add    %ebx,%eax
f011f693:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f011f698:	39 c1                	cmp    %eax,%ecx
f011f69a:	74 17                	je     f011f6b3 <test_kfree+0x16c>
f011f69c:	83 ec 04             	sub    $0x4,%esp
f011f69f:	68 5c a9 13 f0       	push   $0xf013a95c
f011f6a4:	68 d7 04 00 00       	push   $0x4d7
f011f6a9:	68 76 a8 13 f0       	push   $0xf013a876
f011f6ae:	e8 f3 0a fe ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011f6b3:	e8 d4 45 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011f6b8:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f011f6bb:	74 17                	je     f011f6d4 <test_kfree+0x18d>
f011f6bd:	83 ec 04             	sub    $0x4,%esp
f011f6c0:	68 90 a8 13 f0       	push   $0xf013a890
f011f6c5:	68 d8 04 00 00       	push   $0x4d8
f011f6ca:	68 76 a8 13 f0       	push   $0xf013a876
f011f6cf:	e8 d2 0a fe ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f011f6d4:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f011f6d7:	e8 e2 cc fe ff       	call   f010c3be <sys_calculate_free_frames>
f011f6dc:	29 c3                	sub    %eax,%ebx
f011f6de:	89 d8                	mov    %ebx,%eax
f011f6e0:	3d 00 02 00 00       	cmp    $0x200,%eax
f011f6e5:	74 17                	je     f011f6fe <test_kfree+0x1b7>
f011f6e7:	83 ec 04             	sub    $0x4,%esp
f011f6ea:	68 f8 a8 13 f0       	push   $0xf013a8f8
f011f6ef:	68 d9 04 00 00       	push   $0x4d9
f011f6f4:	68 76 a8 13 f0       	push   $0xf013a876
f011f6f9:	e8 a8 0a fe ff       	call   f01001a6 <_panic>
		lastIndices[0] = (2*Mega-kilo)/sizeof(char) - 1;
f011f6fe:	c7 85 e8 fd ff ff ff 	movl   $0x1ffbff,-0x218(%ebp)
f011f705:	fb 1f 00 

		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f011f708:	e8 b1 cc fe ff       	call   f010c3be <sys_calculate_free_frames>
f011f70d:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011f710:	e8 77 45 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011f715:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[1] = kmalloc(2*Mega-kilo);
f011f718:	83 ec 0c             	sub    $0xc,%esp
f011f71b:	68 00 fc 1f 00       	push   $0x1ffc00
f011f720:	e8 9f 7e fe ff       	call   f01075c4 <kmalloc>
f011f725:	83 c4 10             	add    $0x10,%esp
f011f728:	89 85 4c fd ff ff    	mov    %eax,-0x2b4(%ebp)
		if ((uint32) ptr_allocations[1] != (ACTUAL_START + 2*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f011f72e:	8b 85 4c fd ff ff    	mov    -0x2b4(%ebp),%eax
f011f734:	89 c1                	mov    %eax,%ecx
f011f736:	c7 45 b0 00 10 00 00 	movl   $0x1000,-0x50(%ebp)
f011f73d:	8b 45 b0             	mov    -0x50(%ebp),%eax
f011f740:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011f745:	89 45 ac             	mov    %eax,-0x54(%ebp)
f011f748:	8b 45 ac             	mov    -0x54(%ebp),%eax
f011f74b:	ba 00 00 00 00       	mov    $0x0,%edx
f011f750:	f7 75 b0             	divl   -0x50(%ebp)
f011f753:	8b 45 ac             	mov    -0x54(%ebp),%eax
f011f756:	29 d0                	sub    %edx,%eax
f011f758:	89 c3                	mov    %eax,%ebx
f011f75a:	c7 45 a8 00 10 00 00 	movl   $0x1000,-0x58(%ebp)
f011f761:	a0 bc 0e 6c f0       	mov    0xf06c0ebc,%al
f011f766:	0f b6 d0             	movzbl %al,%edx
f011f769:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011f76c:	01 d0                	add    %edx,%eax
f011f76e:	48                   	dec    %eax
f011f76f:	89 45 a4             	mov    %eax,-0x5c(%ebp)
f011f772:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f011f775:	ba 00 00 00 00       	mov    $0x0,%edx
f011f77a:	f7 75 a8             	divl   -0x58(%ebp)
f011f77d:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f011f780:	29 d0                	sub    %edx,%eax
f011f782:	01 c3                	add    %eax,%ebx
f011f784:	c7 45 a0 00 10 00 00 	movl   $0x1000,-0x60(%ebp)
f011f78b:	a0 bc 0e 6c f0       	mov    0xf06c0ebc,%al
f011f790:	0f b6 c0             	movzbl %al,%eax
f011f793:	c1 e0 04             	shl    $0x4,%eax
f011f796:	89 c2                	mov    %eax,%edx
f011f798:	8b 45 a0             	mov    -0x60(%ebp),%eax
f011f79b:	01 d0                	add    %edx,%eax
f011f79d:	48                   	dec    %eax
f011f79e:	89 45 9c             	mov    %eax,-0x64(%ebp)
f011f7a1:	8b 45 9c             	mov    -0x64(%ebp),%eax
f011f7a4:	ba 00 00 00 00       	mov    $0x0,%edx
f011f7a9:	f7 75 a0             	divl   -0x60(%ebp)
f011f7ac:	8b 45 9c             	mov    -0x64(%ebp),%eax
f011f7af:	29 d0                	sub    %edx,%eax
f011f7b1:	01 d8                	add    %ebx,%eax
f011f7b3:	2d 00 c0 df 09       	sub    $0x9dfc000,%eax
f011f7b8:	39 c1                	cmp    %eax,%ecx
f011f7ba:	74 17                	je     f011f7d3 <test_kfree+0x28c>
f011f7bc:	83 ec 04             	sub    $0x4,%esp
f011f7bf:	68 5c a9 13 f0       	push   $0xf013a95c
f011f7c4:	68 e0 04 00 00       	push   $0x4e0
f011f7c9:	68 76 a8 13 f0       	push   $0xf013a876
f011f7ce:	e8 d3 09 fe ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011f7d3:	e8 b4 44 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011f7d8:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f011f7db:	74 17                	je     f011f7f4 <test_kfree+0x2ad>
f011f7dd:	83 ec 04             	sub    $0x4,%esp
f011f7e0:	68 90 a8 13 f0       	push   $0xf013a890
f011f7e5:	68 e1 04 00 00       	push   $0x4e1
f011f7ea:	68 76 a8 13 f0       	push   $0xf013a876
f011f7ef:	e8 b2 09 fe ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f011f7f4:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f011f7f7:	e8 c2 cb fe ff       	call   f010c3be <sys_calculate_free_frames>
f011f7fc:	29 c3                	sub    %eax,%ebx
f011f7fe:	89 d8                	mov    %ebx,%eax
f011f800:	3d 00 02 00 00       	cmp    $0x200,%eax
f011f805:	74 17                	je     f011f81e <test_kfree+0x2d7>
f011f807:	83 ec 04             	sub    $0x4,%esp
f011f80a:	68 f8 a8 13 f0       	push   $0xf013a8f8
f011f80f:	68 e2 04 00 00       	push   $0x4e2
f011f814:	68 76 a8 13 f0       	push   $0xf013a876
f011f819:	e8 88 09 fe ff       	call   f01001a6 <_panic>
		lastIndices[1] = (2*Mega-kilo)/sizeof(char) - 1;
f011f81e:	c7 85 ec fd ff ff ff 	movl   $0x1ffbff,-0x214(%ebp)
f011f825:	fb 1f 00 

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f011f828:	e8 91 cb fe ff       	call   f010c3be <sys_calculate_free_frames>
f011f82d:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011f830:	e8 57 44 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011f835:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[2] = kmalloc(2*kilo);
f011f838:	83 ec 0c             	sub    $0xc,%esp
f011f83b:	68 00 08 00 00       	push   $0x800
f011f840:	e8 7f 7d fe ff       	call   f01075c4 <kmalloc>
f011f845:	83 c4 10             	add    $0x10,%esp
f011f848:	89 85 50 fd ff ff    	mov    %eax,-0x2b0(%ebp)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f011f84e:	8b 85 50 fd ff ff    	mov    -0x2b0(%ebp),%eax
f011f854:	89 c1                	mov    %eax,%ecx
f011f856:	c7 45 98 00 10 00 00 	movl   $0x1000,-0x68(%ebp)
f011f85d:	8b 45 98             	mov    -0x68(%ebp),%eax
f011f860:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011f865:	89 45 94             	mov    %eax,-0x6c(%ebp)
f011f868:	8b 45 94             	mov    -0x6c(%ebp),%eax
f011f86b:	ba 00 00 00 00       	mov    $0x0,%edx
f011f870:	f7 75 98             	divl   -0x68(%ebp)
f011f873:	8b 45 94             	mov    -0x6c(%ebp),%eax
f011f876:	29 d0                	sub    %edx,%eax
f011f878:	89 c3                	mov    %eax,%ebx
f011f87a:	c7 45 90 00 10 00 00 	movl   $0x1000,-0x70(%ebp)
f011f881:	a0 bc 0e 6c f0       	mov    0xf06c0ebc,%al
f011f886:	0f b6 d0             	movzbl %al,%edx
f011f889:	8b 45 90             	mov    -0x70(%ebp),%eax
f011f88c:	01 d0                	add    %edx,%eax
f011f88e:	48                   	dec    %eax
f011f88f:	89 45 8c             	mov    %eax,-0x74(%ebp)
f011f892:	8b 45 8c             	mov    -0x74(%ebp),%eax
f011f895:	ba 00 00 00 00       	mov    $0x0,%edx
f011f89a:	f7 75 90             	divl   -0x70(%ebp)
f011f89d:	8b 45 8c             	mov    -0x74(%ebp),%eax
f011f8a0:	29 d0                	sub    %edx,%eax
f011f8a2:	01 c3                	add    %eax,%ebx
f011f8a4:	c7 45 88 00 10 00 00 	movl   $0x1000,-0x78(%ebp)
f011f8ab:	a0 bc 0e 6c f0       	mov    0xf06c0ebc,%al
f011f8b0:	0f b6 c0             	movzbl %al,%eax
f011f8b3:	c1 e0 04             	shl    $0x4,%eax
f011f8b6:	89 c2                	mov    %eax,%edx
f011f8b8:	8b 45 88             	mov    -0x78(%ebp),%eax
f011f8bb:	01 d0                	add    %edx,%eax
f011f8bd:	48                   	dec    %eax
f011f8be:	89 45 84             	mov    %eax,-0x7c(%ebp)
f011f8c1:	8b 45 84             	mov    -0x7c(%ebp),%eax
f011f8c4:	ba 00 00 00 00       	mov    $0x0,%edx
f011f8c9:	f7 75 88             	divl   -0x78(%ebp)
f011f8cc:	8b 45 84             	mov    -0x7c(%ebp),%eax
f011f8cf:	29 d0                	sub    %edx,%eax
f011f8d1:	01 d8                	add    %ebx,%eax
f011f8d3:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
f011f8d8:	39 c1                	cmp    %eax,%ecx
f011f8da:	74 17                	je     f011f8f3 <test_kfree+0x3ac>
f011f8dc:	83 ec 04             	sub    $0x4,%esp
f011f8df:	68 5c a9 13 f0       	push   $0xf013a95c
f011f8e4:	68 e9 04 00 00       	push   $0x4e9
f011f8e9:	68 76 a8 13 f0       	push   $0xf013a876
f011f8ee:	e8 b3 08 fe ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011f8f3:	e8 94 43 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011f8f8:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f011f8fb:	74 17                	je     f011f914 <test_kfree+0x3cd>
f011f8fd:	83 ec 04             	sub    $0x4,%esp
f011f900:	68 90 a8 13 f0       	push   $0xf013a890
f011f905:	68 ea 04 00 00       	push   $0x4ea
f011f90a:	68 76 a8 13 f0       	push   $0xf013a876
f011f90f:	e8 92 08 fe ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f011f914:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f011f917:	e8 a2 ca fe ff       	call   f010c3be <sys_calculate_free_frames>
f011f91c:	29 c3                	sub    %eax,%ebx
f011f91e:	89 d8                	mov    %ebx,%eax
f011f920:	83 f8 01             	cmp    $0x1,%eax
f011f923:	74 17                	je     f011f93c <test_kfree+0x3f5>
f011f925:	83 ec 04             	sub    $0x4,%esp
f011f928:	68 f8 a8 13 f0       	push   $0xf013a8f8
f011f92d:	68 eb 04 00 00       	push   $0x4eb
f011f932:	68 76 a8 13 f0       	push   $0xf013a876
f011f937:	e8 6a 08 fe ff       	call   f01001a6 <_panic>
		lastIndices[2] = (2*kilo)/sizeof(char) - 1;
f011f93c:	c7 85 f0 fd ff ff ff 	movl   $0x7ff,-0x210(%ebp)
f011f943:	07 00 00 
		ptr = (char*)ptr_allocations[2];
f011f946:	8b 85 50 fd ff ff    	mov    -0x2b0(%ebp),%eax
f011f94c:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[2]; ++i)
f011f94f:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f011f956:	eb 0e                	jmp    f011f966 <test_kfree+0x41f>
		{
			ptr[i] = 2 ;
f011f958:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011f95b:	8b 45 80             	mov    -0x80(%ebp),%eax
f011f95e:	01 d0                	add    %edx,%eax
f011f960:	c6 00 02             	movb   $0x2,(%eax)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[2] = (2*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[2];
		for (i = 0; i < lastIndices[2]; ++i)
f011f963:	ff 45 f4             	incl   -0xc(%ebp)
f011f966:	8b 85 f0 fd ff ff    	mov    -0x210(%ebp),%eax
f011f96c:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f011f96f:	7f e7                	jg     f011f958 <test_kfree+0x411>
		{
			ptr[i] = 2 ;
		}

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f011f971:	e8 48 ca fe ff       	call   f010c3be <sys_calculate_free_frames>
f011f976:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011f979:	e8 0e 43 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011f97e:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[3] = kmalloc(2*kilo);
f011f981:	83 ec 0c             	sub    $0xc,%esp
f011f984:	68 00 08 00 00       	push   $0x800
f011f989:	e8 36 7c fe ff       	call   f01075c4 <kmalloc>
f011f98e:	83 c4 10             	add    $0x10,%esp
f011f991:	89 85 54 fd ff ff    	mov    %eax,-0x2ac(%ebp)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f011f997:	8b 85 54 fd ff ff    	mov    -0x2ac(%ebp),%eax
f011f99d:	89 c1                	mov    %eax,%ecx
f011f99f:	c7 85 7c ff ff ff 00 	movl   $0x1000,-0x84(%ebp)
f011f9a6:	10 00 00 
f011f9a9:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f011f9af:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011f9b4:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)
f011f9ba:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f011f9c0:	ba 00 00 00 00       	mov    $0x0,%edx
f011f9c5:	f7 b5 7c ff ff ff    	divl   -0x84(%ebp)
f011f9cb:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f011f9d1:	29 d0                	sub    %edx,%eax
f011f9d3:	89 c3                	mov    %eax,%ebx
f011f9d5:	c7 85 74 ff ff ff 00 	movl   $0x1000,-0x8c(%ebp)
f011f9dc:	10 00 00 
f011f9df:	a0 bc 0e 6c f0       	mov    0xf06c0ebc,%al
f011f9e4:	0f b6 d0             	movzbl %al,%edx
f011f9e7:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f011f9ed:	01 d0                	add    %edx,%eax
f011f9ef:	48                   	dec    %eax
f011f9f0:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
f011f9f6:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f011f9fc:	ba 00 00 00 00       	mov    $0x0,%edx
f011fa01:	f7 b5 74 ff ff ff    	divl   -0x8c(%ebp)
f011fa07:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f011fa0d:	29 d0                	sub    %edx,%eax
f011fa0f:	01 c3                	add    %eax,%ebx
f011fa11:	c7 85 6c ff ff ff 00 	movl   $0x1000,-0x94(%ebp)
f011fa18:	10 00 00 
f011fa1b:	a0 bc 0e 6c f0       	mov    0xf06c0ebc,%al
f011fa20:	0f b6 c0             	movzbl %al,%eax
f011fa23:	c1 e0 04             	shl    $0x4,%eax
f011fa26:	89 c2                	mov    %eax,%edx
f011fa28:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f011fa2e:	01 d0                	add    %edx,%eax
f011fa30:	48                   	dec    %eax
f011fa31:	89 85 68 ff ff ff    	mov    %eax,-0x98(%ebp)
f011fa37:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f011fa3d:	ba 00 00 00 00       	mov    $0x0,%edx
f011fa42:	f7 b5 6c ff ff ff    	divl   -0x94(%ebp)
f011fa48:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f011fa4e:	29 d0                	sub    %edx,%eax
f011fa50:	01 d8                	add    %ebx,%eax
f011fa52:	2d 00 b0 bf 09       	sub    $0x9bfb000,%eax
f011fa57:	39 c1                	cmp    %eax,%ecx
f011fa59:	74 17                	je     f011fa72 <test_kfree+0x52b>
f011fa5b:	83 ec 04             	sub    $0x4,%esp
f011fa5e:	68 5c a9 13 f0       	push   $0xf013a95c
f011fa63:	68 f7 04 00 00       	push   $0x4f7
f011fa68:	68 76 a8 13 f0       	push   $0xf013a876
f011fa6d:	e8 34 07 fe ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011fa72:	e8 15 42 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011fa77:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f011fa7a:	74 17                	je     f011fa93 <test_kfree+0x54c>
f011fa7c:	83 ec 04             	sub    $0x4,%esp
f011fa7f:	68 90 a8 13 f0       	push   $0xf013a890
f011fa84:	68 f8 04 00 00       	push   $0x4f8
f011fa89:	68 76 a8 13 f0       	push   $0xf013a876
f011fa8e:	e8 13 07 fe ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f011fa93:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f011fa96:	e8 23 c9 fe ff       	call   f010c3be <sys_calculate_free_frames>
f011fa9b:	29 c3                	sub    %eax,%ebx
f011fa9d:	89 d8                	mov    %ebx,%eax
f011fa9f:	83 f8 01             	cmp    $0x1,%eax
f011faa2:	74 17                	je     f011fabb <test_kfree+0x574>
f011faa4:	83 ec 04             	sub    $0x4,%esp
f011faa7:	68 f8 a8 13 f0       	push   $0xf013a8f8
f011faac:	68 f9 04 00 00       	push   $0x4f9
f011fab1:	68 76 a8 13 f0       	push   $0xf013a876
f011fab6:	e8 eb 06 fe ff       	call   f01001a6 <_panic>
		lastIndices[3] = (2*kilo)/sizeof(char) - 1;
f011fabb:	c7 85 f4 fd ff ff ff 	movl   $0x7ff,-0x20c(%ebp)
f011fac2:	07 00 00 
		ptr = (char*)ptr_allocations[3];
f011fac5:	8b 85 54 fd ff ff    	mov    -0x2ac(%ebp),%eax
f011facb:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[3]; ++i)
f011face:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f011fad5:	eb 0e                	jmp    f011fae5 <test_kfree+0x59e>
		{
			ptr[i] = 3 ;
f011fad7:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011fada:	8b 45 80             	mov    -0x80(%ebp),%eax
f011fadd:	01 d0                	add    %edx,%eax
f011fadf:	c6 00 03             	movb   $0x3,(%eax)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[3] = (2*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[3];
		for (i = 0; i < lastIndices[3]; ++i)
f011fae2:	ff 45 f4             	incl   -0xc(%ebp)
f011fae5:	8b 85 f4 fd ff ff    	mov    -0x20c(%ebp),%eax
f011faeb:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f011faee:	7f e7                	jg     f011fad7 <test_kfree+0x590>
		{
			ptr[i] = 3 ;
		}

		//7 KB
		freeFrames = sys_calculate_free_frames() ;
f011faf0:	e8 c9 c8 fe ff       	call   f010c3be <sys_calculate_free_frames>
f011faf5:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011faf8:	e8 8f 41 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011fafd:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[4] = kmalloc(7*kilo);
f011fb00:	83 ec 0c             	sub    $0xc,%esp
f011fb03:	68 00 1c 00 00       	push   $0x1c00
f011fb08:	e8 b7 7a fe ff       	call   f01075c4 <kmalloc>
f011fb0d:	83 c4 10             	add    $0x10,%esp
f011fb10:	89 85 58 fd ff ff    	mov    %eax,-0x2a8(%ebp)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f011fb16:	8b 85 58 fd ff ff    	mov    -0x2a8(%ebp),%eax
f011fb1c:	89 c1                	mov    %eax,%ecx
f011fb1e:	c7 85 64 ff ff ff 00 	movl   $0x1000,-0x9c(%ebp)
f011fb25:	10 00 00 
f011fb28:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f011fb2e:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011fb33:	89 85 60 ff ff ff    	mov    %eax,-0xa0(%ebp)
f011fb39:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f011fb3f:	ba 00 00 00 00       	mov    $0x0,%edx
f011fb44:	f7 b5 64 ff ff ff    	divl   -0x9c(%ebp)
f011fb4a:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f011fb50:	29 d0                	sub    %edx,%eax
f011fb52:	89 c3                	mov    %eax,%ebx
f011fb54:	c7 85 5c ff ff ff 00 	movl   $0x1000,-0xa4(%ebp)
f011fb5b:	10 00 00 
f011fb5e:	a0 bc 0e 6c f0       	mov    0xf06c0ebc,%al
f011fb63:	0f b6 d0             	movzbl %al,%edx
f011fb66:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f011fb6c:	01 d0                	add    %edx,%eax
f011fb6e:	48                   	dec    %eax
f011fb6f:	89 85 58 ff ff ff    	mov    %eax,-0xa8(%ebp)
f011fb75:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f011fb7b:	ba 00 00 00 00       	mov    $0x0,%edx
f011fb80:	f7 b5 5c ff ff ff    	divl   -0xa4(%ebp)
f011fb86:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f011fb8c:	29 d0                	sub    %edx,%eax
f011fb8e:	01 c3                	add    %eax,%ebx
f011fb90:	c7 85 54 ff ff ff 00 	movl   $0x1000,-0xac(%ebp)
f011fb97:	10 00 00 
f011fb9a:	a0 bc 0e 6c f0       	mov    0xf06c0ebc,%al
f011fb9f:	0f b6 c0             	movzbl %al,%eax
f011fba2:	c1 e0 04             	shl    $0x4,%eax
f011fba5:	89 c2                	mov    %eax,%edx
f011fba7:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f011fbad:	01 d0                	add    %edx,%eax
f011fbaf:	48                   	dec    %eax
f011fbb0:	89 85 50 ff ff ff    	mov    %eax,-0xb0(%ebp)
f011fbb6:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f011fbbc:	ba 00 00 00 00       	mov    $0x0,%edx
f011fbc1:	f7 b5 54 ff ff ff    	divl   -0xac(%ebp)
f011fbc7:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f011fbcd:	29 d0                	sub    %edx,%eax
f011fbcf:	01 d8                	add    %ebx,%eax
f011fbd1:	2d 00 a0 bf 09       	sub    $0x9bfa000,%eax
f011fbd6:	39 c1                	cmp    %eax,%ecx
f011fbd8:	74 17                	je     f011fbf1 <test_kfree+0x6aa>
f011fbda:	83 ec 04             	sub    $0x4,%esp
f011fbdd:	68 5c a9 13 f0       	push   $0xf013a95c
f011fbe2:	68 05 05 00 00       	push   $0x505
f011fbe7:	68 76 a8 13 f0       	push   $0xf013a876
f011fbec:	e8 b5 05 fe ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011fbf1:	e8 96 40 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011fbf6:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f011fbf9:	74 17                	je     f011fc12 <test_kfree+0x6cb>
f011fbfb:	83 ec 04             	sub    $0x4,%esp
f011fbfe:	68 90 a8 13 f0       	push   $0xf013a890
f011fc03:	68 06 05 00 00       	push   $0x506
f011fc08:	68 76 a8 13 f0       	push   $0xf013a876
f011fc0d:	e8 94 05 fe ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: pages are not loaded successfully into memory");
f011fc12:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f011fc15:	e8 a4 c7 fe ff       	call   f010c3be <sys_calculate_free_frames>
f011fc1a:	29 c3                	sub    %eax,%ebx
f011fc1c:	89 d8                	mov    %ebx,%eax
f011fc1e:	83 f8 02             	cmp    $0x2,%eax
f011fc21:	74 17                	je     f011fc3a <test_kfree+0x6f3>
f011fc23:	83 ec 04             	sub    $0x4,%esp
f011fc26:	68 f8 a8 13 f0       	push   $0xf013a8f8
f011fc2b:	68 07 05 00 00       	push   $0x507
f011fc30:	68 76 a8 13 f0       	push   $0xf013a876
f011fc35:	e8 6c 05 fe ff       	call   f01001a6 <_panic>
		lastIndices[4] = (7*kilo)/sizeof(char) - 1;
f011fc3a:	c7 85 f8 fd ff ff ff 	movl   $0x1bff,-0x208(%ebp)
f011fc41:	1b 00 00 
		ptr = (char*)ptr_allocations[4];
f011fc44:	8b 85 58 fd ff ff    	mov    -0x2a8(%ebp),%eax
f011fc4a:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[4]; ++i)
f011fc4d:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f011fc54:	eb 0e                	jmp    f011fc64 <test_kfree+0x71d>
		{
			ptr[i] = 4 ;
f011fc56:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011fc59:	8b 45 80             	mov    -0x80(%ebp),%eax
f011fc5c:	01 d0                	add    %edx,%eax
f011fc5e:	c6 00 04             	movb   $0x4,(%eax)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[4] = (7*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[4];
		for (i = 0; i < lastIndices[4]; ++i)
f011fc61:	ff 45 f4             	incl   -0xc(%ebp)
f011fc64:	8b 85 f8 fd ff ff    	mov    -0x208(%ebp),%eax
f011fc6a:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f011fc6d:	7f e7                	jg     f011fc56 <test_kfree+0x70f>
		{
			ptr[i] = 4 ;
		}

		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f011fc6f:	e8 4a c7 fe ff       	call   f010c3be <sys_calculate_free_frames>
f011fc74:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011fc77:	e8 10 40 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011fc7c:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[5] = kmalloc(3*Mega-kilo);
f011fc7f:	83 ec 0c             	sub    $0xc,%esp
f011fc82:	68 00 fc 2f 00       	push   $0x2ffc00
f011fc87:	e8 38 79 fe ff       	call   f01075c4 <kmalloc>
f011fc8c:	83 c4 10             	add    $0x10,%esp
f011fc8f:	89 85 5c fd ff ff    	mov    %eax,-0x2a4(%ebp)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo) ) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f011fc95:	8b 85 5c fd ff ff    	mov    -0x2a4(%ebp),%eax
f011fc9b:	89 c1                	mov    %eax,%ecx
f011fc9d:	c7 85 4c ff ff ff 00 	movl   $0x1000,-0xb4(%ebp)
f011fca4:	10 00 00 
f011fca7:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f011fcad:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011fcb2:	89 85 48 ff ff ff    	mov    %eax,-0xb8(%ebp)
f011fcb8:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f011fcbe:	ba 00 00 00 00       	mov    $0x0,%edx
f011fcc3:	f7 b5 4c ff ff ff    	divl   -0xb4(%ebp)
f011fcc9:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f011fccf:	29 d0                	sub    %edx,%eax
f011fcd1:	89 c3                	mov    %eax,%ebx
f011fcd3:	c7 85 44 ff ff ff 00 	movl   $0x1000,-0xbc(%ebp)
f011fcda:	10 00 00 
f011fcdd:	a0 bc 0e 6c f0       	mov    0xf06c0ebc,%al
f011fce2:	0f b6 d0             	movzbl %al,%edx
f011fce5:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f011fceb:	01 d0                	add    %edx,%eax
f011fced:	48                   	dec    %eax
f011fcee:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%ebp)
f011fcf4:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f011fcfa:	ba 00 00 00 00       	mov    $0x0,%edx
f011fcff:	f7 b5 44 ff ff ff    	divl   -0xbc(%ebp)
f011fd05:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f011fd0b:	29 d0                	sub    %edx,%eax
f011fd0d:	01 c3                	add    %eax,%ebx
f011fd0f:	c7 85 3c ff ff ff 00 	movl   $0x1000,-0xc4(%ebp)
f011fd16:	10 00 00 
f011fd19:	a0 bc 0e 6c f0       	mov    0xf06c0ebc,%al
f011fd1e:	0f b6 c0             	movzbl %al,%eax
f011fd21:	c1 e0 04             	shl    $0x4,%eax
f011fd24:	89 c2                	mov    %eax,%edx
f011fd26:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f011fd2c:	01 d0                	add    %edx,%eax
f011fd2e:	48                   	dec    %eax
f011fd2f:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
f011fd35:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f011fd3b:	ba 00 00 00 00       	mov    $0x0,%edx
f011fd40:	f7 b5 3c ff ff ff    	divl   -0xc4(%ebp)
f011fd46:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f011fd4c:	29 d0                	sub    %edx,%eax
f011fd4e:	01 d8                	add    %ebx,%eax
f011fd50:	2d 00 80 bf 09       	sub    $0x9bf8000,%eax
f011fd55:	39 c1                	cmp    %eax,%ecx
f011fd57:	74 17                	je     f011fd70 <test_kfree+0x829>
f011fd59:	83 ec 04             	sub    $0x4,%esp
f011fd5c:	68 5c a9 13 f0       	push   $0xf013a95c
f011fd61:	68 13 05 00 00       	push   $0x513
f011fd66:	68 76 a8 13 f0       	push   $0xf013a876
f011fd6b:	e8 36 04 fe ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011fd70:	e8 17 3f fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011fd75:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f011fd78:	74 17                	je     f011fd91 <test_kfree+0x84a>
f011fd7a:	83 ec 04             	sub    $0x4,%esp
f011fd7d:	68 90 a8 13 f0       	push   $0xf013a890
f011fd82:	68 14 05 00 00       	push   $0x514
f011fd87:	68 76 a8 13 f0       	push   $0xf013a876
f011fd8c:	e8 15 04 fe ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
f011fd91:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f011fd94:	e8 25 c6 fe ff       	call   f010c3be <sys_calculate_free_frames>
f011fd99:	29 c3                	sub    %eax,%ebx
f011fd9b:	89 d8                	mov    %ebx,%eax
f011fd9d:	3d 00 03 00 00       	cmp    $0x300,%eax
f011fda2:	74 17                	je     f011fdbb <test_kfree+0x874>
f011fda4:	83 ec 04             	sub    $0x4,%esp
f011fda7:	68 f8 a8 13 f0       	push   $0xf013a8f8
f011fdac:	68 15 05 00 00       	push   $0x515
f011fdb1:	68 76 a8 13 f0       	push   $0xf013a876
f011fdb6:	e8 eb 03 fe ff       	call   f01001a6 <_panic>
		lastIndices[5] = (3*Mega-kilo)/sizeof(char) - 1;
f011fdbb:	c7 85 fc fd ff ff ff 	movl   $0x2ffbff,-0x204(%ebp)
f011fdc2:	fb 2f 00 
		ptr = (char*)ptr_allocations[5];
f011fdc5:	8b 85 5c fd ff ff    	mov    -0x2a4(%ebp),%eax
f011fdcb:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[5]; ++i)
f011fdce:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f011fdd5:	eb 0e                	jmp    f011fde5 <test_kfree+0x89e>
		{
			ptr[i] = 5 ;
f011fdd7:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011fdda:	8b 45 80             	mov    -0x80(%ebp),%eax
f011fddd:	01 d0                	add    %edx,%eax
f011fddf:	c6 00 05             	movb   $0x5,(%eax)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo) ) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[5] = (3*Mega-kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[5];
		for (i = 0; i < lastIndices[5]; ++i)
f011fde2:	ff 45 f4             	incl   -0xc(%ebp)
f011fde5:	8b 85 fc fd ff ff    	mov    -0x204(%ebp),%eax
f011fdeb:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f011fdee:	7f e7                	jg     f011fdd7 <test_kfree+0x890>
		{
			ptr[i] = 5 ;
		}

		//6 MB
		freeFrames = sys_calculate_free_frames() ;
f011fdf0:	e8 c9 c5 fe ff       	call   f010c3be <sys_calculate_free_frames>
f011fdf5:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011fdf8:	e8 8f 3e fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011fdfd:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[6] = kmalloc(6*Mega-kilo);
f011fe00:	83 ec 0c             	sub    $0xc,%esp
f011fe03:	68 00 fc 5f 00       	push   $0x5ffc00
f011fe08:	e8 b7 77 fe ff       	call   f01075c4 <kmalloc>
f011fe0d:	83 c4 10             	add    $0x10,%esp
f011fe10:	89 85 60 fd ff ff    	mov    %eax,-0x2a0(%ebp)
		if ((uint32) ptr_allocations[6] != (ACTUAL_START + 7*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f011fe16:	8b 85 60 fd ff ff    	mov    -0x2a0(%ebp),%eax
f011fe1c:	89 c1                	mov    %eax,%ecx
f011fe1e:	c7 85 34 ff ff ff 00 	movl   $0x1000,-0xcc(%ebp)
f011fe25:	10 00 00 
f011fe28:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f011fe2e:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011fe33:	89 85 30 ff ff ff    	mov    %eax,-0xd0(%ebp)
f011fe39:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f011fe3f:	ba 00 00 00 00       	mov    $0x0,%edx
f011fe44:	f7 b5 34 ff ff ff    	divl   -0xcc(%ebp)
f011fe4a:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f011fe50:	29 d0                	sub    %edx,%eax
f011fe52:	89 c3                	mov    %eax,%ebx
f011fe54:	c7 85 2c ff ff ff 00 	movl   $0x1000,-0xd4(%ebp)
f011fe5b:	10 00 00 
f011fe5e:	a0 bc 0e 6c f0       	mov    0xf06c0ebc,%al
f011fe63:	0f b6 d0             	movzbl %al,%edx
f011fe66:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f011fe6c:	01 d0                	add    %edx,%eax
f011fe6e:	48                   	dec    %eax
f011fe6f:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%ebp)
f011fe75:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f011fe7b:	ba 00 00 00 00       	mov    $0x0,%edx
f011fe80:	f7 b5 2c ff ff ff    	divl   -0xd4(%ebp)
f011fe86:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f011fe8c:	29 d0                	sub    %edx,%eax
f011fe8e:	01 c3                	add    %eax,%ebx
f011fe90:	c7 85 24 ff ff ff 00 	movl   $0x1000,-0xdc(%ebp)
f011fe97:	10 00 00 
f011fe9a:	a0 bc 0e 6c f0       	mov    0xf06c0ebc,%al
f011fe9f:	0f b6 c0             	movzbl %al,%eax
f011fea2:	c1 e0 04             	shl    $0x4,%eax
f011fea5:	89 c2                	mov    %eax,%edx
f011fea7:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011fead:	01 d0                	add    %edx,%eax
f011feaf:	48                   	dec    %eax
f011feb0:	89 85 20 ff ff ff    	mov    %eax,-0xe0(%ebp)
f011feb6:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f011febc:	ba 00 00 00 00       	mov    $0x0,%edx
f011fec1:	f7 b5 24 ff ff ff    	divl   -0xdc(%ebp)
f011fec7:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f011fecd:	29 d0                	sub    %edx,%eax
f011fecf:	01 d8                	add    %ebx,%eax
f011fed1:	2d 00 80 8f 09       	sub    $0x98f8000,%eax
f011fed6:	39 c1                	cmp    %eax,%ecx
f011fed8:	74 17                	je     f011fef1 <test_kfree+0x9aa>
f011feda:	83 ec 04             	sub    $0x4,%esp
f011fedd:	68 5c a9 13 f0       	push   $0xf013a95c
f011fee2:	68 21 05 00 00       	push   $0x521
f011fee7:	68 76 a8 13 f0       	push   $0xf013a876
f011feec:	e8 b5 02 fe ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011fef1:	e8 96 3d fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011fef6:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f011fef9:	74 17                	je     f011ff12 <test_kfree+0x9cb>
f011fefb:	83 ec 04             	sub    $0x4,%esp
f011fefe:	68 90 a8 13 f0       	push   $0xf013a890
f011ff03:	68 22 05 00 00       	push   $0x522
f011ff08:	68 76 a8 13 f0       	push   $0xf013a876
f011ff0d:	e8 94 02 fe ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1536) panic("Wrong allocation: pages are not loaded successfully into memory");
f011ff12:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f011ff15:	e8 a4 c4 fe ff       	call   f010c3be <sys_calculate_free_frames>
f011ff1a:	29 c3                	sub    %eax,%ebx
f011ff1c:	89 d8                	mov    %ebx,%eax
f011ff1e:	3d 00 06 00 00       	cmp    $0x600,%eax
f011ff23:	74 17                	je     f011ff3c <test_kfree+0x9f5>
f011ff25:	83 ec 04             	sub    $0x4,%esp
f011ff28:	68 f8 a8 13 f0       	push   $0xf013a8f8
f011ff2d:	68 23 05 00 00       	push   $0x523
f011ff32:	68 76 a8 13 f0       	push   $0xf013a876
f011ff37:	e8 6a 02 fe ff       	call   f01001a6 <_panic>
		lastIndices[6] = (6*Mega-kilo)/sizeof(char) - 1;
f011ff3c:	c7 85 00 fe ff ff ff 	movl   $0x5ffbff,-0x200(%ebp)
f011ff43:	fb 5f 00 

		//14 KB
		freeFrames = sys_calculate_free_frames() ;
f011ff46:	e8 73 c4 fe ff       	call   f010c3be <sys_calculate_free_frames>
f011ff4b:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011ff4e:	e8 39 3d fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011ff53:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[7] = kmalloc(14*kilo);
f011ff56:	83 ec 0c             	sub    $0xc,%esp
f011ff59:	68 00 38 00 00       	push   $0x3800
f011ff5e:	e8 61 76 fe ff       	call   f01075c4 <kmalloc>
f011ff63:	83 c4 10             	add    $0x10,%esp
f011ff66:	89 85 64 fd ff ff    	mov    %eax,-0x29c(%ebp)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 13*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f011ff6c:	8b 85 64 fd ff ff    	mov    -0x29c(%ebp),%eax
f011ff72:	89 c1                	mov    %eax,%ecx
f011ff74:	c7 85 1c ff ff ff 00 	movl   $0x1000,-0xe4(%ebp)
f011ff7b:	10 00 00 
f011ff7e:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f011ff84:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011ff89:	89 85 18 ff ff ff    	mov    %eax,-0xe8(%ebp)
f011ff8f:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f011ff95:	ba 00 00 00 00       	mov    $0x0,%edx
f011ff9a:	f7 b5 1c ff ff ff    	divl   -0xe4(%ebp)
f011ffa0:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f011ffa6:	29 d0                	sub    %edx,%eax
f011ffa8:	89 c3                	mov    %eax,%ebx
f011ffaa:	c7 85 14 ff ff ff 00 	movl   $0x1000,-0xec(%ebp)
f011ffb1:	10 00 00 
f011ffb4:	a0 bc 0e 6c f0       	mov    0xf06c0ebc,%al
f011ffb9:	0f b6 d0             	movzbl %al,%edx
f011ffbc:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f011ffc2:	01 d0                	add    %edx,%eax
f011ffc4:	48                   	dec    %eax
f011ffc5:	89 85 10 ff ff ff    	mov    %eax,-0xf0(%ebp)
f011ffcb:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f011ffd1:	ba 00 00 00 00       	mov    $0x0,%edx
f011ffd6:	f7 b5 14 ff ff ff    	divl   -0xec(%ebp)
f011ffdc:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f011ffe2:	29 d0                	sub    %edx,%eax
f011ffe4:	01 c3                	add    %eax,%ebx
f011ffe6:	c7 85 0c ff ff ff 00 	movl   $0x1000,-0xf4(%ebp)
f011ffed:	10 00 00 
f011fff0:	a0 bc 0e 6c f0       	mov    0xf06c0ebc,%al
f011fff5:	0f b6 c0             	movzbl %al,%eax
f011fff8:	c1 e0 04             	shl    $0x4,%eax
f011fffb:	89 c2                	mov    %eax,%edx
f011fffd:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f0120003:	01 d0                	add    %edx,%eax
f0120005:	48                   	dec    %eax
f0120006:	89 85 08 ff ff ff    	mov    %eax,-0xf8(%ebp)
f012000c:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f0120012:	ba 00 00 00 00       	mov    $0x0,%edx
f0120017:	f7 b5 0c ff ff ff    	divl   -0xf4(%ebp)
f012001d:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f0120023:	29 d0                	sub    %edx,%eax
f0120025:	01 d8                	add    %ebx,%eax
f0120027:	2d 00 80 2f 09       	sub    $0x92f8000,%eax
f012002c:	39 c1                	cmp    %eax,%ecx
f012002e:	74 17                	je     f0120047 <test_kfree+0xb00>
f0120030:	83 ec 04             	sub    $0x4,%esp
f0120033:	68 5c a9 13 f0       	push   $0xf013a95c
f0120038:	68 2a 05 00 00       	push   $0x52a
f012003d:	68 76 a8 13 f0       	push   $0xf013a876
f0120042:	e8 5f 01 fe ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0120047:	e8 40 3c fe ff       	call   f0103c8c <pf_calculate_free_frames>
f012004c:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f012004f:	74 17                	je     f0120068 <test_kfree+0xb21>
f0120051:	83 ec 04             	sub    $0x4,%esp
f0120054:	68 90 a8 13 f0       	push   $0xf013a890
f0120059:	68 2b 05 00 00       	push   $0x52b
f012005e:	68 76 a8 13 f0       	push   $0xf013a876
f0120063:	e8 3e 01 fe ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 4) panic("Wrong allocation: pages are not loaded successfully into memory");
f0120068:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f012006b:	e8 4e c3 fe ff       	call   f010c3be <sys_calculate_free_frames>
f0120070:	29 c3                	sub    %eax,%ebx
f0120072:	89 d8                	mov    %ebx,%eax
f0120074:	83 f8 04             	cmp    $0x4,%eax
f0120077:	74 17                	je     f0120090 <test_kfree+0xb49>
f0120079:	83 ec 04             	sub    $0x4,%esp
f012007c:	68 f8 a8 13 f0       	push   $0xf013a8f8
f0120081:	68 2c 05 00 00       	push   $0x52c
f0120086:	68 76 a8 13 f0       	push   $0xf013a876
f012008b:	e8 16 01 fe ff       	call   f01001a6 <_panic>
		lastIndices[7] = (14*kilo)/sizeof(char) - 1;
f0120090:	c7 85 04 fe ff ff ff 	movl   $0x37ff,-0x1fc(%ebp)
f0120097:	37 00 00 
		ptr = (char*)ptr_allocations[7];
f012009a:	8b 85 64 fd ff ff    	mov    -0x29c(%ebp),%eax
f01200a0:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[7]; ++i)
f01200a3:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01200aa:	eb 0e                	jmp    f01200ba <test_kfree+0xb73>
		{
			ptr[i] = 7 ;
f01200ac:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01200af:	8b 45 80             	mov    -0x80(%ebp),%eax
f01200b2:	01 d0                	add    %edx,%eax
f01200b4:	c6 00 07             	movb   $0x7,(%eax)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 13*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 4) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[7] = (14*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[7];
		for (i = 0; i < lastIndices[7]; ++i)
f01200b7:	ff 45 f4             	incl   -0xc(%ebp)
f01200ba:	8b 85 04 fe ff ff    	mov    -0x1fc(%ebp),%eax
f01200c0:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01200c3:	7f e7                	jg     f01200ac <test_kfree+0xb65>
	}

	//kfree some of the allocated spaces [15%]
	{
		//kfree 1st 2 MB
		int freeFrames = sys_calculate_free_frames() ;
f01200c5:	e8 f4 c2 fe ff       	call   f010c3be <sys_calculate_free_frames>
f01200ca:	89 85 04 ff ff ff    	mov    %eax,-0xfc(%ebp)
		int freeDiskFrames = pf_calculate_free_frames() ;
f01200d0:	e8 b7 3b fe ff       	call   f0103c8c <pf_calculate_free_frames>
f01200d5:	89 85 00 ff ff ff    	mov    %eax,-0x100(%ebp)
		kfree(ptr_allocations[0]);
f01200db:	8b 85 48 fd ff ff    	mov    -0x2b8(%ebp),%eax
f01200e1:	83 ec 0c             	sub    $0xc,%esp
f01200e4:	50                   	push   %eax
f01200e5:	e8 f4 74 fe ff       	call   f01075de <kfree>
f01200ea:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01200ed:	e8 9a 3b fe ff       	call   f0103c8c <pf_calculate_free_frames>
f01200f2:	3b 85 00 ff ff ff    	cmp    -0x100(%ebp),%eax
f01200f8:	74 17                	je     f0120111 <test_kfree+0xbca>
f01200fa:	83 ec 04             	sub    $0x4,%esp
f01200fd:	68 90 a8 13 f0       	push   $0xf013a890
f0120102:	68 3b 05 00 00       	push   $0x53b
f0120107:	68 76 a8 13 f0       	push   $0xf013a876
f012010c:	e8 95 00 fe ff       	call   f01001a6 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512 ) panic("Wrong kfree: pages in memory are not freed correctly");
f0120111:	e8 a8 c2 fe ff       	call   f010c3be <sys_calculate_free_frames>
f0120116:	89 c2                	mov    %eax,%edx
f0120118:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f012011e:	29 c2                	sub    %eax,%edx
f0120120:	89 d0                	mov    %edx,%eax
f0120122:	3d 00 02 00 00       	cmp    $0x200,%eax
f0120127:	74 17                	je     f0120140 <test_kfree+0xbf9>
f0120129:	83 ec 04             	sub    $0x4,%esp
f012012c:	68 00 b0 13 f0       	push   $0xf013b000
f0120131:	68 3c 05 00 00       	push   $0x53c
f0120136:	68 76 a8 13 f0       	push   $0xf013a876
f012013b:	e8 66 00 fe ff       	call   f01001a6 <_panic>

		//kfree 1st 2 KB
		freeFrames = sys_calculate_free_frames() ;
f0120140:	e8 79 c2 fe ff       	call   f010c3be <sys_calculate_free_frames>
f0120145:	89 85 04 ff ff ff    	mov    %eax,-0xfc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012014b:	e8 3c 3b fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0120150:	89 85 00 ff ff ff    	mov    %eax,-0x100(%ebp)
		kfree(ptr_allocations[2]);
f0120156:	8b 85 50 fd ff ff    	mov    -0x2b0(%ebp),%eax
f012015c:	83 ec 0c             	sub    $0xc,%esp
f012015f:	50                   	push   %eax
f0120160:	e8 79 74 fe ff       	call   f01075de <kfree>
f0120165:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0120168:	e8 1f 3b fe ff       	call   f0103c8c <pf_calculate_free_frames>
f012016d:	3b 85 00 ff ff ff    	cmp    -0x100(%ebp),%eax
f0120173:	74 17                	je     f012018c <test_kfree+0xc45>
f0120175:	83 ec 04             	sub    $0x4,%esp
f0120178:	68 90 a8 13 f0       	push   $0xf013a890
f012017d:	68 42 05 00 00       	push   $0x542
f0120182:	68 76 a8 13 f0       	push   $0xf013a876
f0120187:	e8 1a 00 fe ff       	call   f01001a6 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 1 ) panic("Wrong kfree: pages in memory are not freed correctly");
f012018c:	e8 2d c2 fe ff       	call   f010c3be <sys_calculate_free_frames>
f0120191:	89 c2                	mov    %eax,%edx
f0120193:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f0120199:	29 c2                	sub    %eax,%edx
f012019b:	89 d0                	mov    %edx,%eax
f012019d:	83 f8 01             	cmp    $0x1,%eax
f01201a0:	74 17                	je     f01201b9 <test_kfree+0xc72>
f01201a2:	83 ec 04             	sub    $0x4,%esp
f01201a5:	68 00 b0 13 f0       	push   $0xf013b000
f01201aa:	68 43 05 00 00       	push   $0x543
f01201af:	68 76 a8 13 f0       	push   $0xf013a876
f01201b4:	e8 ed ff fd ff       	call   f01001a6 <_panic>

		//kfree 2nd 2 MB
		freeFrames = sys_calculate_free_frames() ;
f01201b9:	e8 00 c2 fe ff       	call   f010c3be <sys_calculate_free_frames>
f01201be:	89 85 04 ff ff ff    	mov    %eax,-0xfc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01201c4:	e8 c3 3a fe ff       	call   f0103c8c <pf_calculate_free_frames>
f01201c9:	89 85 00 ff ff ff    	mov    %eax,-0x100(%ebp)
		kfree(ptr_allocations[1]);
f01201cf:	8b 85 4c fd ff ff    	mov    -0x2b4(%ebp),%eax
f01201d5:	83 ec 0c             	sub    $0xc,%esp
f01201d8:	50                   	push   %eax
f01201d9:	e8 00 74 fe ff       	call   f01075de <kfree>
f01201de:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01201e1:	e8 a6 3a fe ff       	call   f0103c8c <pf_calculate_free_frames>
f01201e6:	3b 85 00 ff ff ff    	cmp    -0x100(%ebp),%eax
f01201ec:	74 17                	je     f0120205 <test_kfree+0xcbe>
f01201ee:	83 ec 04             	sub    $0x4,%esp
f01201f1:	68 90 a8 13 f0       	push   $0xf013a890
f01201f6:	68 49 05 00 00       	push   $0x549
f01201fb:	68 76 a8 13 f0       	push   $0xf013a876
f0120200:	e8 a1 ff fd ff       	call   f01001a6 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512) panic("Wrong kfree: pages in memory are not freed correctly");
f0120205:	e8 b4 c1 fe ff       	call   f010c3be <sys_calculate_free_frames>
f012020a:	89 c2                	mov    %eax,%edx
f012020c:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f0120212:	29 c2                	sub    %eax,%edx
f0120214:	89 d0                	mov    %edx,%eax
f0120216:	3d 00 02 00 00       	cmp    $0x200,%eax
f012021b:	74 17                	je     f0120234 <test_kfree+0xced>
f012021d:	83 ec 04             	sub    $0x4,%esp
f0120220:	68 00 b0 13 f0       	push   $0xf013b000
f0120225:	68 4a 05 00 00       	push   $0x54a
f012022a:	68 76 a8 13 f0       	push   $0xf013a876
f012022f:	e8 72 ff fd ff       	call   f01001a6 <_panic>

		//kfree 6 MB
		freeFrames = sys_calculate_free_frames() ;
f0120234:	e8 85 c1 fe ff       	call   f010c3be <sys_calculate_free_frames>
f0120239:	89 85 04 ff ff ff    	mov    %eax,-0xfc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012023f:	e8 48 3a fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0120244:	89 85 00 ff ff ff    	mov    %eax,-0x100(%ebp)
		kfree(ptr_allocations[6]);
f012024a:	8b 85 60 fd ff ff    	mov    -0x2a0(%ebp),%eax
f0120250:	83 ec 0c             	sub    $0xc,%esp
f0120253:	50                   	push   %eax
f0120254:	e8 85 73 fe ff       	call   f01075de <kfree>
f0120259:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012025c:	e8 2b 3a fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0120261:	3b 85 00 ff ff ff    	cmp    -0x100(%ebp),%eax
f0120267:	74 17                	je     f0120280 <test_kfree+0xd39>
f0120269:	83 ec 04             	sub    $0x4,%esp
f012026c:	68 90 a8 13 f0       	push   $0xf013a890
f0120271:	68 50 05 00 00       	push   $0x550
f0120276:	68 76 a8 13 f0       	push   $0xf013a876
f012027b:	e8 26 ff fd ff       	call   f01001a6 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 6*Mega/4096) panic("Wrong kfree: pages in memory are not freed correctly");
f0120280:	e8 39 c1 fe ff       	call   f010c3be <sys_calculate_free_frames>
f0120285:	89 c2                	mov    %eax,%edx
f0120287:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f012028d:	29 c2                	sub    %eax,%edx
f012028f:	89 d0                	mov    %edx,%eax
f0120291:	3d 00 06 00 00       	cmp    $0x600,%eax
f0120296:	74 17                	je     f01202af <test_kfree+0xd68>
f0120298:	83 ec 04             	sub    $0x4,%esp
f012029b:	68 00 b0 13 f0       	push   $0xf013b000
f01202a0:	68 51 05 00 00       	push   $0x551
f01202a5:	68 76 a8 13 f0       	push   $0xf013a876
f01202aa:	e8 f7 fe fd ff       	call   f01001a6 <_panic>
	}

	cprintf("\nkfree: current evaluation = 15%");
f01202af:	83 ec 0c             	sub    $0xc,%esp
f01202b2:	68 38 b0 13 f0       	push   $0xf013b038
f01202b7:	e8 71 09 fe ff       	call   f0100c2d <cprintf>
f01202bc:	83 c4 10             	add    $0x10,%esp

	//Check memory access after kfree [15%]
	{
		//2 KB
		ptr = (char*)ptr_allocations[3];
f01202bf:	8b 85 54 fd ff ff    	mov    -0x2ac(%ebp),%eax
f01202c5:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[3]; ++i)
f01202c8:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01202cf:	eb 1e                	jmp    f01202ef <test_kfree+0xda8>
		{
			sums[3] += ptr[i] ;
f01202d1:	8b 95 a4 fd ff ff    	mov    -0x25c(%ebp),%edx
f01202d7:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f01202da:	8b 45 80             	mov    -0x80(%ebp),%eax
f01202dd:	01 c8                	add    %ecx,%eax
f01202df:	8a 00                	mov    (%eax),%al
f01202e1:	0f be c0             	movsbl %al,%eax
f01202e4:	01 d0                	add    %edx,%eax
f01202e6:	89 85 a4 fd ff ff    	mov    %eax,-0x25c(%ebp)

	//Check memory access after kfree [15%]
	{
		//2 KB
		ptr = (char*)ptr_allocations[3];
		for (i = 0; i < lastIndices[3]; ++i)
f01202ec:	ff 45 f4             	incl   -0xc(%ebp)
f01202ef:	8b 85 f4 fd ff ff    	mov    -0x20c(%ebp),%eax
f01202f5:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01202f8:	7f d7                	jg     f01202d1 <test_kfree+0xd8a>
		{
			sums[3] += ptr[i] ;
		}
		if (sums[3] != 3*lastIndices[3])	panic("kfree: invalid read after freeing some allocations");
f01202fa:	8b 95 a4 fd ff ff    	mov    -0x25c(%ebp),%edx
f0120300:	8b 85 f4 fd ff ff    	mov    -0x20c(%ebp),%eax
f0120306:	89 c1                	mov    %eax,%ecx
f0120308:	01 c9                	add    %ecx,%ecx
f012030a:	01 c8                	add    %ecx,%eax
f012030c:	39 c2                	cmp    %eax,%edx
f012030e:	74 17                	je     f0120327 <test_kfree+0xde0>
f0120310:	83 ec 04             	sub    $0x4,%esp
f0120313:	68 5c b0 13 f0       	push   $0xf013b05c
f0120318:	68 5e 05 00 00       	push   $0x55e
f012031d:	68 76 a8 13 f0       	push   $0xf013a876
f0120322:	e8 7f fe fd ff       	call   f01001a6 <_panic>

		//7 KB
		ptr = (char*)ptr_allocations[4];
f0120327:	8b 85 58 fd ff ff    	mov    -0x2a8(%ebp),%eax
f012032d:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[4]; ++i)
f0120330:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0120337:	eb 1e                	jmp    f0120357 <test_kfree+0xe10>
		{
			sums[4] += ptr[i] ;
f0120339:	8b 95 a8 fd ff ff    	mov    -0x258(%ebp),%edx
f012033f:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0120342:	8b 45 80             	mov    -0x80(%ebp),%eax
f0120345:	01 c8                	add    %ecx,%eax
f0120347:	8a 00                	mov    (%eax),%al
f0120349:	0f be c0             	movsbl %al,%eax
f012034c:	01 d0                	add    %edx,%eax
f012034e:	89 85 a8 fd ff ff    	mov    %eax,-0x258(%ebp)
		}
		if (sums[3] != 3*lastIndices[3])	panic("kfree: invalid read after freeing some allocations");

		//7 KB
		ptr = (char*)ptr_allocations[4];
		for (i = 0; i < lastIndices[4]; ++i)
f0120354:	ff 45 f4             	incl   -0xc(%ebp)
f0120357:	8b 85 f8 fd ff ff    	mov    -0x208(%ebp),%eax
f012035d:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0120360:	7f d7                	jg     f0120339 <test_kfree+0xdf2>
		{
			sums[4] += ptr[i] ;
		}
		if (sums[4] != 4*lastIndices[4])	panic("kfree: invalid read after freeing some allocations");
f0120362:	8b 85 a8 fd ff ff    	mov    -0x258(%ebp),%eax
f0120368:	8b 95 f8 fd ff ff    	mov    -0x208(%ebp),%edx
f012036e:	c1 e2 02             	shl    $0x2,%edx
f0120371:	39 d0                	cmp    %edx,%eax
f0120373:	74 17                	je     f012038c <test_kfree+0xe45>
f0120375:	83 ec 04             	sub    $0x4,%esp
f0120378:	68 5c b0 13 f0       	push   $0xf013b05c
f012037d:	68 66 05 00 00       	push   $0x566
f0120382:	68 76 a8 13 f0       	push   $0xf013a876
f0120387:	e8 1a fe fd ff       	call   f01001a6 <_panic>

		//3 MB
		ptr = (char*)ptr_allocations[5];
f012038c:	8b 85 5c fd ff ff    	mov    -0x2a4(%ebp),%eax
f0120392:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[5]; ++i)
f0120395:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012039c:	eb 1e                	jmp    f01203bc <test_kfree+0xe75>
		{
			sums[5] += ptr[i] ;
f012039e:	8b 95 ac fd ff ff    	mov    -0x254(%ebp),%edx
f01203a4:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f01203a7:	8b 45 80             	mov    -0x80(%ebp),%eax
f01203aa:	01 c8                	add    %ecx,%eax
f01203ac:	8a 00                	mov    (%eax),%al
f01203ae:	0f be c0             	movsbl %al,%eax
f01203b1:	01 d0                	add    %edx,%eax
f01203b3:	89 85 ac fd ff ff    	mov    %eax,-0x254(%ebp)
		}
		if (sums[4] != 4*lastIndices[4])	panic("kfree: invalid read after freeing some allocations");

		//3 MB
		ptr = (char*)ptr_allocations[5];
		for (i = 0; i < lastIndices[5]; ++i)
f01203b9:	ff 45 f4             	incl   -0xc(%ebp)
f01203bc:	8b 85 fc fd ff ff    	mov    -0x204(%ebp),%eax
f01203c2:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01203c5:	7f d7                	jg     f012039e <test_kfree+0xe57>
		{
			sums[5] += ptr[i] ;
		}
		if (sums[5] != 5*lastIndices[5])	panic("kfree: invalid read after freeing some allocations");
f01203c7:	8b 8d ac fd ff ff    	mov    -0x254(%ebp),%ecx
f01203cd:	8b 95 fc fd ff ff    	mov    -0x204(%ebp),%edx
f01203d3:	89 d0                	mov    %edx,%eax
f01203d5:	c1 e0 02             	shl    $0x2,%eax
f01203d8:	01 d0                	add    %edx,%eax
f01203da:	39 c1                	cmp    %eax,%ecx
f01203dc:	74 17                	je     f01203f5 <test_kfree+0xeae>
f01203de:	83 ec 04             	sub    $0x4,%esp
f01203e1:	68 5c b0 13 f0       	push   $0xf013b05c
f01203e6:	68 6e 05 00 00       	push   $0x56e
f01203eb:	68 76 a8 13 f0       	push   $0xf013a876
f01203f0:	e8 b1 fd fd ff       	call   f01001a6 <_panic>

		//14 KB
		ptr = (char*)ptr_allocations[7];
f01203f5:	8b 85 64 fd ff ff    	mov    -0x29c(%ebp),%eax
f01203fb:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[7]; ++i)
f01203fe:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0120405:	eb 1e                	jmp    f0120425 <test_kfree+0xede>
		{
			sums[7] += ptr[i] ;
f0120407:	8b 95 b4 fd ff ff    	mov    -0x24c(%ebp),%edx
f012040d:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0120410:	8b 45 80             	mov    -0x80(%ebp),%eax
f0120413:	01 c8                	add    %ecx,%eax
f0120415:	8a 00                	mov    (%eax),%al
f0120417:	0f be c0             	movsbl %al,%eax
f012041a:	01 d0                	add    %edx,%eax
f012041c:	89 85 b4 fd ff ff    	mov    %eax,-0x24c(%ebp)
		}
		if (sums[5] != 5*lastIndices[5])	panic("kfree: invalid read after freeing some allocations");

		//14 KB
		ptr = (char*)ptr_allocations[7];
		for (i = 0; i < lastIndices[7]; ++i)
f0120422:	ff 45 f4             	incl   -0xc(%ebp)
f0120425:	8b 85 04 fe ff ff    	mov    -0x1fc(%ebp),%eax
f012042b:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012042e:	7f d7                	jg     f0120407 <test_kfree+0xec0>
		{
			sums[7] += ptr[i] ;
		}
		if (sums[7] != 7*lastIndices[7])	panic("kfree: invalid read after freeing some allocations");
f0120430:	8b 8d b4 fd ff ff    	mov    -0x24c(%ebp),%ecx
f0120436:	8b 95 04 fe ff ff    	mov    -0x1fc(%ebp),%edx
f012043c:	89 d0                	mov    %edx,%eax
f012043e:	01 c0                	add    %eax,%eax
f0120440:	01 d0                	add    %edx,%eax
f0120442:	01 c0                	add    %eax,%eax
f0120444:	01 d0                	add    %edx,%eax
f0120446:	39 c1                	cmp    %eax,%ecx
f0120448:	74 17                	je     f0120461 <test_kfree+0xf1a>
f012044a:	83 ec 04             	sub    $0x4,%esp
f012044d:	68 5c b0 13 f0       	push   $0xf013b05c
f0120452:	68 76 05 00 00       	push   $0x576
f0120457:	68 76 a8 13 f0       	push   $0xf013a876
f012045c:	e8 45 fd fd ff       	call   f01001a6 <_panic>
	}
	cprintf("\b\b\b30%");
f0120461:	83 ec 0c             	sub    $0xc,%esp
f0120464:	68 8f b0 13 f0       	push   $0xf013b08f
f0120469:	e8 bf 07 fe ff       	call   f0100c2d <cprintf>
f012046e:	83 c4 10             	add    $0x10,%esp

	//Allocate after kfree [15%]
	{
		//20 KB
		freeFrames = sys_calculate_free_frames() ;
f0120471:	e8 48 bf fe ff       	call   f010c3be <sys_calculate_free_frames>
f0120476:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0120479:	e8 0e 38 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f012047e:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[8] = kmalloc(20*kilo);
f0120481:	83 ec 0c             	sub    $0xc,%esp
f0120484:	68 00 50 00 00       	push   $0x5000
f0120489:	e8 36 71 fe ff       	call   f01075c4 <kmalloc>
f012048e:	83 c4 10             	add    $0x10,%esp
f0120491:	89 85 68 fd ff ff    	mov    %eax,-0x298(%ebp)
		if ((uint32) ptr_allocations[8] != (ACTUAL_START + 13*Mega + 32*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0120497:	8b 85 68 fd ff ff    	mov    -0x298(%ebp),%eax
f012049d:	89 c1                	mov    %eax,%ecx
f012049f:	c7 85 fc fe ff ff 00 	movl   $0x1000,-0x104(%ebp)
f01204a6:	10 00 00 
f01204a9:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f01204af:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01204b4:	89 85 f8 fe ff ff    	mov    %eax,-0x108(%ebp)
f01204ba:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f01204c0:	ba 00 00 00 00       	mov    $0x0,%edx
f01204c5:	f7 b5 fc fe ff ff    	divl   -0x104(%ebp)
f01204cb:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f01204d1:	29 d0                	sub    %edx,%eax
f01204d3:	89 c3                	mov    %eax,%ebx
f01204d5:	c7 85 f4 fe ff ff 00 	movl   $0x1000,-0x10c(%ebp)
f01204dc:	10 00 00 
f01204df:	a0 bc 0e 6c f0       	mov    0xf06c0ebc,%al
f01204e4:	0f b6 d0             	movzbl %al,%edx
f01204e7:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f01204ed:	01 d0                	add    %edx,%eax
f01204ef:	48                   	dec    %eax
f01204f0:	89 85 f0 fe ff ff    	mov    %eax,-0x110(%ebp)
f01204f6:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f01204fc:	ba 00 00 00 00       	mov    $0x0,%edx
f0120501:	f7 b5 f4 fe ff ff    	divl   -0x10c(%ebp)
f0120507:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f012050d:	29 d0                	sub    %edx,%eax
f012050f:	01 c3                	add    %eax,%ebx
f0120511:	c7 85 ec fe ff ff 00 	movl   $0x1000,-0x114(%ebp)
f0120518:	10 00 00 
f012051b:	a0 bc 0e 6c f0       	mov    0xf06c0ebc,%al
f0120520:	0f b6 c0             	movzbl %al,%eax
f0120523:	c1 e0 04             	shl    $0x4,%eax
f0120526:	89 c2                	mov    %eax,%edx
f0120528:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f012052e:	01 d0                	add    %edx,%eax
f0120530:	48                   	dec    %eax
f0120531:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)
f0120537:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f012053d:	ba 00 00 00 00       	mov    $0x0,%edx
f0120542:	f7 b5 ec fe ff ff    	divl   -0x114(%ebp)
f0120548:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f012054e:	29 d0                	sub    %edx,%eax
f0120550:	01 d8                	add    %ebx,%eax
f0120552:	2d 00 40 2f 09       	sub    $0x92f4000,%eax
f0120557:	39 c1                	cmp    %eax,%ecx
f0120559:	74 17                	je     f0120572 <test_kfree+0x102b>
f012055b:	83 ec 04             	sub    $0x4,%esp
f012055e:	68 5c a9 13 f0       	push   $0xf013a95c
f0120563:	68 80 05 00 00       	push   $0x580
f0120568:	68 76 a8 13 f0       	push   $0xf013a876
f012056d:	e8 34 fc fd ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0120572:	e8 15 37 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0120577:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f012057a:	74 17                	je     f0120593 <test_kfree+0x104c>
f012057c:	83 ec 04             	sub    $0x4,%esp
f012057f:	68 90 a8 13 f0       	push   $0xf013a890
f0120584:	68 81 05 00 00       	push   $0x581
f0120589:	68 76 a8 13 f0       	push   $0xf013a876
f012058e:	e8 13 fc fd ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 5) panic("Wrong allocation: pages are not loaded successfully into memory");
f0120593:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0120596:	e8 23 be fe ff       	call   f010c3be <sys_calculate_free_frames>
f012059b:	29 c3                	sub    %eax,%ebx
f012059d:	89 d8                	mov    %ebx,%eax
f012059f:	83 f8 05             	cmp    $0x5,%eax
f01205a2:	74 17                	je     f01205bb <test_kfree+0x1074>
f01205a4:	83 ec 04             	sub    $0x4,%esp
f01205a7:	68 f8 a8 13 f0       	push   $0xf013a8f8
f01205ac:	68 82 05 00 00       	push   $0x582
f01205b1:	68 76 a8 13 f0       	push   $0xf013a876
f01205b6:	e8 eb fb fd ff       	call   f01001a6 <_panic>
		lastIndices[8] = (20*kilo)/sizeof(char) - 1;
f01205bb:	c7 85 08 fe ff ff ff 	movl   $0x4fff,-0x1f8(%ebp)
f01205c2:	4f 00 00 
		ptr = (char*)ptr_allocations[8];
f01205c5:	8b 85 68 fd ff ff    	mov    -0x298(%ebp),%eax
f01205cb:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[8]; ++i)
f01205ce:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01205d5:	eb 0e                	jmp    f01205e5 <test_kfree+0x109e>
		{
			ptr[i] = 8 ;
f01205d7:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01205da:	8b 45 80             	mov    -0x80(%ebp),%eax
f01205dd:	01 d0                	add    %edx,%eax
f01205df:	c6 00 08             	movb   $0x8,(%eax)
		if ((uint32) ptr_allocations[8] != (ACTUAL_START + 13*Mega + 32*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 5) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[8] = (20*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[8];
		for (i = 0; i < lastIndices[8]; ++i)
f01205e2:	ff 45 f4             	incl   -0xc(%ebp)
f01205e5:	8b 85 08 fe ff ff    	mov    -0x1f8(%ebp),%eax
f01205eb:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01205ee:	7f e7                	jg     f01205d7 <test_kfree+0x1090>
		{
			ptr[i] = 8 ;
		}

		//1 MB
		freeFrames = sys_calculate_free_frames() ;
f01205f0:	e8 c9 bd fe ff       	call   f010c3be <sys_calculate_free_frames>
f01205f5:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01205f8:	e8 8f 36 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f01205fd:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[9] = kmalloc(1*Mega);
f0120600:	83 ec 0c             	sub    $0xc,%esp
f0120603:	68 00 00 10 00       	push   $0x100000
f0120608:	e8 b7 6f fe ff       	call   f01075c4 <kmalloc>
f012060d:	83 c4 10             	add    $0x10,%esp
f0120610:	89 85 6c fd ff ff    	mov    %eax,-0x294(%ebp)
		if ((uint32) ptr_allocations[9] != (ACTUAL_START + 13*Mega + 52*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0120616:	8b 85 6c fd ff ff    	mov    -0x294(%ebp),%eax
f012061c:	89 c1                	mov    %eax,%ecx
f012061e:	c7 85 e4 fe ff ff 00 	movl   $0x1000,-0x11c(%ebp)
f0120625:	10 00 00 
f0120628:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f012062e:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0120633:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
f0120639:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012063f:	ba 00 00 00 00       	mov    $0x0,%edx
f0120644:	f7 b5 e4 fe ff ff    	divl   -0x11c(%ebp)
f012064a:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f0120650:	29 d0                	sub    %edx,%eax
f0120652:	89 c3                	mov    %eax,%ebx
f0120654:	c7 85 dc fe ff ff 00 	movl   $0x1000,-0x124(%ebp)
f012065b:	10 00 00 
f012065e:	a0 bc 0e 6c f0       	mov    0xf06c0ebc,%al
f0120663:	0f b6 d0             	movzbl %al,%edx
f0120666:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f012066c:	01 d0                	add    %edx,%eax
f012066e:	48                   	dec    %eax
f012066f:	89 85 d8 fe ff ff    	mov    %eax,-0x128(%ebp)
f0120675:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f012067b:	ba 00 00 00 00       	mov    $0x0,%edx
f0120680:	f7 b5 dc fe ff ff    	divl   -0x124(%ebp)
f0120686:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f012068c:	29 d0                	sub    %edx,%eax
f012068e:	01 c3                	add    %eax,%ebx
f0120690:	c7 85 d4 fe ff ff 00 	movl   $0x1000,-0x12c(%ebp)
f0120697:	10 00 00 
f012069a:	a0 bc 0e 6c f0       	mov    0xf06c0ebc,%al
f012069f:	0f b6 c0             	movzbl %al,%eax
f01206a2:	c1 e0 04             	shl    $0x4,%eax
f01206a5:	89 c2                	mov    %eax,%edx
f01206a7:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f01206ad:	01 d0                	add    %edx,%eax
f01206af:	48                   	dec    %eax
f01206b0:	89 85 d0 fe ff ff    	mov    %eax,-0x130(%ebp)
f01206b6:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f01206bc:	ba 00 00 00 00       	mov    $0x0,%edx
f01206c1:	f7 b5 d4 fe ff ff    	divl   -0x12c(%ebp)
f01206c7:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f01206cd:	29 d0                	sub    %edx,%eax
f01206cf:	01 d8                	add    %ebx,%eax
f01206d1:	2d 00 f0 2e 09       	sub    $0x92ef000,%eax
f01206d6:	39 c1                	cmp    %eax,%ecx
f01206d8:	74 17                	je     f01206f1 <test_kfree+0x11aa>
f01206da:	83 ec 04             	sub    $0x4,%esp
f01206dd:	68 5c a9 13 f0       	push   $0xf013a95c
f01206e2:	68 8e 05 00 00       	push   $0x58e
f01206e7:	68 76 a8 13 f0       	push   $0xf013a876
f01206ec:	e8 b5 fa fd ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01206f1:	e8 96 35 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f01206f6:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f01206f9:	74 17                	je     f0120712 <test_kfree+0x11cb>
f01206fb:	83 ec 04             	sub    $0x4,%esp
f01206fe:	68 90 a8 13 f0       	push   $0xf013a890
f0120703:	68 8f 05 00 00       	push   $0x58f
f0120708:	68 76 a8 13 f0       	push   $0xf013a876
f012070d:	e8 94 fa fd ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: pages are not loaded successfully into memory");
f0120712:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0120715:	e8 a4 bc fe ff       	call   f010c3be <sys_calculate_free_frames>
f012071a:	29 c3                	sub    %eax,%ebx
f012071c:	89 d8                	mov    %ebx,%eax
f012071e:	3d 00 01 00 00       	cmp    $0x100,%eax
f0120723:	74 17                	je     f012073c <test_kfree+0x11f5>
f0120725:	83 ec 04             	sub    $0x4,%esp
f0120728:	68 f8 a8 13 f0       	push   $0xf013a8f8
f012072d:	68 90 05 00 00       	push   $0x590
f0120732:	68 76 a8 13 f0       	push   $0xf013a876
f0120737:	e8 6a fa fd ff       	call   f01001a6 <_panic>
		lastIndices[9] = (1*Mega)/sizeof(char) - 1;
f012073c:	c7 85 0c fe ff ff ff 	movl   $0xfffff,-0x1f4(%ebp)
f0120743:	ff 0f 00 
		ptr = (char*)ptr_allocations[9];
f0120746:	8b 85 6c fd ff ff    	mov    -0x294(%ebp),%eax
f012074c:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[9]; ++i)
f012074f:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0120756:	eb 0e                	jmp    f0120766 <test_kfree+0x121f>
		{
			ptr[i] = 9 ;
f0120758:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012075b:	8b 45 80             	mov    -0x80(%ebp),%eax
f012075e:	01 d0                	add    %edx,%eax
f0120760:	c6 00 09             	movb   $0x9,(%eax)
		if ((uint32) ptr_allocations[9] != (ACTUAL_START + 13*Mega + 52*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[9] = (1*Mega)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[9];
		for (i = 0; i < lastIndices[9]; ++i)
f0120763:	ff 45 f4             	incl   -0xc(%ebp)
f0120766:	8b 85 0c fe ff ff    	mov    -0x1f4(%ebp),%eax
f012076c:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012076f:	7f e7                	jg     f0120758 <test_kfree+0x1211>
		{
			ptr[i] = 9 ;
		}

		if (isKHeapPlacementStrategyNEXTFIT())
f0120771:	e8 ac 66 ff ff       	call   f0116e22 <isKHeapPlacementStrategyNEXTFIT>
f0120776:	84 c0                	test   %al,%al
f0120778:	0f 84 ac 06 00 00    	je     f0120e2a <test_kfree+0x18e3>
		{
			//Allocate Remaining MBs
			freeFrames = sys_calculate_free_frames() ;
f012077e:	e8 3b bc fe ff       	call   f010c3be <sys_calculate_free_frames>
f0120783:	89 45 d0             	mov    %eax,-0x30(%ebp)
			freeDiskFrames = pf_calculate_free_frames() ;
f0120786:	e8 01 35 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f012078b:	89 45 cc             	mov    %eax,-0x34(%ebp)
			uint32 reqAllocatedSpace = KERNEL_HEAP_MAX - (ACTUAL_START + 13*Mega + 52*kilo + 1*Mega);
f012078e:	c7 85 cc fe ff ff 00 	movl   $0x1000,-0x134(%ebp)
f0120795:	10 00 00 
f0120798:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f012079e:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01207a3:	89 85 c8 fe ff ff    	mov    %eax,-0x138(%ebp)
f01207a9:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f01207af:	ba 00 00 00 00       	mov    $0x0,%edx
f01207b4:	f7 b5 cc fe ff ff    	divl   -0x134(%ebp)
f01207ba:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f01207c0:	29 d0                	sub    %edx,%eax
f01207c2:	89 c1                	mov    %eax,%ecx
f01207c4:	c7 85 c4 fe ff ff 00 	movl   $0x1000,-0x13c(%ebp)
f01207cb:	10 00 00 
f01207ce:	a0 bc 0e 6c f0       	mov    0xf06c0ebc,%al
f01207d3:	0f b6 d0             	movzbl %al,%edx
f01207d6:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f01207dc:	01 d0                	add    %edx,%eax
f01207de:	48                   	dec    %eax
f01207df:	89 85 c0 fe ff ff    	mov    %eax,-0x140(%ebp)
f01207e5:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f01207eb:	ba 00 00 00 00       	mov    $0x0,%edx
f01207f0:	f7 b5 c4 fe ff ff    	divl   -0x13c(%ebp)
f01207f6:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f01207fc:	29 d0                	sub    %edx,%eax
f01207fe:	01 c1                	add    %eax,%ecx
f0120800:	c7 85 bc fe ff ff 00 	movl   $0x1000,-0x144(%ebp)
f0120807:	10 00 00 
f012080a:	a0 bc 0e 6c f0       	mov    0xf06c0ebc,%al
f012080f:	0f b6 c0             	movzbl %al,%eax
f0120812:	c1 e0 04             	shl    $0x4,%eax
f0120815:	89 c2                	mov    %eax,%edx
f0120817:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f012081d:	01 d0                	add    %edx,%eax
f012081f:	48                   	dec    %eax
f0120820:	89 85 b8 fe ff ff    	mov    %eax,-0x148(%ebp)
f0120826:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f012082c:	ba 00 00 00 00       	mov    $0x0,%edx
f0120831:	f7 b5 bc fe ff ff    	divl   -0x144(%ebp)
f0120837:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f012083d:	29 d0                	sub    %edx,%eax
f012083f:	01 c8                	add    %ecx,%eax
f0120841:	ba 00 e0 1e 09       	mov    $0x91ee000,%edx
f0120846:	29 c2                	sub    %eax,%edx
f0120848:	89 d0                	mov    %edx,%eax
f012084a:	89 85 b4 fe ff ff    	mov    %eax,-0x14c(%ebp)
			ptr_allocations[10] = kmalloc(reqAllocatedSpace);
f0120850:	83 ec 0c             	sub    $0xc,%esp
f0120853:	ff b5 b4 fe ff ff    	pushl  -0x14c(%ebp)
f0120859:	e8 66 6d fe ff       	call   f01075c4 <kmalloc>
f012085e:	83 c4 10             	add    $0x10,%esp
f0120861:	89 85 70 fd ff ff    	mov    %eax,-0x290(%ebp)
			if ((uint32) ptr_allocations[10] != (ACTUAL_START + 13*Mega + 52*kilo + 1*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0120867:	8b 85 70 fd ff ff    	mov    -0x290(%ebp),%eax
f012086d:	89 c1                	mov    %eax,%ecx
f012086f:	c7 85 b0 fe ff ff 00 	movl   $0x1000,-0x150(%ebp)
f0120876:	10 00 00 
f0120879:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f012087f:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0120884:	89 85 ac fe ff ff    	mov    %eax,-0x154(%ebp)
f012088a:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f0120890:	ba 00 00 00 00       	mov    $0x0,%edx
f0120895:	f7 b5 b0 fe ff ff    	divl   -0x150(%ebp)
f012089b:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f01208a1:	29 d0                	sub    %edx,%eax
f01208a3:	89 c3                	mov    %eax,%ebx
f01208a5:	c7 85 a8 fe ff ff 00 	movl   $0x1000,-0x158(%ebp)
f01208ac:	10 00 00 
f01208af:	a0 bc 0e 6c f0       	mov    0xf06c0ebc,%al
f01208b4:	0f b6 d0             	movzbl %al,%edx
f01208b7:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f01208bd:	01 d0                	add    %edx,%eax
f01208bf:	48                   	dec    %eax
f01208c0:	89 85 a4 fe ff ff    	mov    %eax,-0x15c(%ebp)
f01208c6:	8b 85 a4 fe ff ff    	mov    -0x15c(%ebp),%eax
f01208cc:	ba 00 00 00 00       	mov    $0x0,%edx
f01208d1:	f7 b5 a8 fe ff ff    	divl   -0x158(%ebp)
f01208d7:	8b 85 a4 fe ff ff    	mov    -0x15c(%ebp),%eax
f01208dd:	29 d0                	sub    %edx,%eax
f01208df:	01 c3                	add    %eax,%ebx
f01208e1:	c7 85 a0 fe ff ff 00 	movl   $0x1000,-0x160(%ebp)
f01208e8:	10 00 00 
f01208eb:	a0 bc 0e 6c f0       	mov    0xf06c0ebc,%al
f01208f0:	0f b6 c0             	movzbl %al,%eax
f01208f3:	c1 e0 04             	shl    $0x4,%eax
f01208f6:	89 c2                	mov    %eax,%edx
f01208f8:	8b 85 a0 fe ff ff    	mov    -0x160(%ebp),%eax
f01208fe:	01 d0                	add    %edx,%eax
f0120900:	48                   	dec    %eax
f0120901:	89 85 9c fe ff ff    	mov    %eax,-0x164(%ebp)
f0120907:	8b 85 9c fe ff ff    	mov    -0x164(%ebp),%eax
f012090d:	ba 00 00 00 00       	mov    $0x0,%edx
f0120912:	f7 b5 a0 fe ff ff    	divl   -0x160(%ebp)
f0120918:	8b 85 9c fe ff ff    	mov    -0x164(%ebp),%eax
f012091e:	29 d0                	sub    %edx,%eax
f0120920:	01 d8                	add    %ebx,%eax
f0120922:	2d 00 f0 1e 09       	sub    $0x91ef000,%eax
f0120927:	39 c1                	cmp    %eax,%ecx
f0120929:	74 17                	je     f0120942 <test_kfree+0x13fb>
f012092b:	83 ec 04             	sub    $0x4,%esp
f012092e:	68 5c a9 13 f0       	push   $0xf013a95c
f0120933:	68 9f 05 00 00       	push   $0x59f
f0120938:	68 76 a8 13 f0       	push   $0xf013a876
f012093d:	e8 64 f8 fd ff       	call   f01001a6 <_panic>
			if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0120942:	e8 45 33 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0120947:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f012094a:	74 17                	je     f0120963 <test_kfree+0x141c>
f012094c:	83 ec 04             	sub    $0x4,%esp
f012094f:	68 90 a8 13 f0       	push   $0xf013a890
f0120954:	68 a0 05 00 00       	push   $0x5a0
f0120959:	68 76 a8 13 f0       	push   $0xf013a876
f012095e:	e8 43 f8 fd ff       	call   f01001a6 <_panic>
			if ((freeFrames - sys_calculate_free_frames()) != reqAllocatedSpace/PAGE_SIZE) panic("Wrong allocation: pages are not loaded successfully into memory");
f0120963:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0120966:	e8 53 ba fe ff       	call   f010c3be <sys_calculate_free_frames>
f012096b:	29 c3                	sub    %eax,%ebx
f012096d:	89 da                	mov    %ebx,%edx
f012096f:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f0120975:	c1 e8 0c             	shr    $0xc,%eax
f0120978:	39 c2                	cmp    %eax,%edx
f012097a:	74 17                	je     f0120993 <test_kfree+0x144c>
f012097c:	83 ec 04             	sub    $0x4,%esp
f012097f:	68 f8 a8 13 f0       	push   $0xf013a8f8
f0120984:	68 a1 05 00 00       	push   $0x5a1
f0120989:	68 76 a8 13 f0       	push   $0xf013a876
f012098e:	e8 13 f8 fd ff       	call   f01001a6 <_panic>
			lastIndices[10] = (reqAllocatedSpace)/sizeof(char) - 1;
f0120993:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f0120999:	48                   	dec    %eax
f012099a:	89 85 10 fe ff ff    	mov    %eax,-0x1f0(%ebp)
			ptr = (char*)ptr_allocations[10];
f01209a0:	8b 85 70 fd ff ff    	mov    -0x290(%ebp),%eax
f01209a6:	89 45 80             	mov    %eax,-0x80(%ebp)
//				ptr[i] = 10;
//			}

			//Allocate in merged freed space FROM the beginning
			//3 MB
			freeFrames = sys_calculate_free_frames() ;
f01209a9:	e8 10 ba fe ff       	call   f010c3be <sys_calculate_free_frames>
f01209ae:	89 45 d0             	mov    %eax,-0x30(%ebp)
			freeDiskFrames = pf_calculate_free_frames() ;
f01209b1:	e8 d6 32 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f01209b6:	89 45 cc             	mov    %eax,-0x34(%ebp)
			ptr_allocations[11] = kmalloc(3*Mega);
f01209b9:	83 ec 0c             	sub    $0xc,%esp
f01209bc:	68 00 00 30 00       	push   $0x300000
f01209c1:	e8 fe 6b fe ff       	call   f01075c4 <kmalloc>
f01209c6:	83 c4 10             	add    $0x10,%esp
f01209c9:	89 85 74 fd ff ff    	mov    %eax,-0x28c(%ebp)
			if ((uint32) ptr_allocations[11] != (ACTUAL_START)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01209cf:	8b 85 74 fd ff ff    	mov    -0x28c(%ebp),%eax
f01209d5:	89 c1                	mov    %eax,%ecx
f01209d7:	c7 85 98 fe ff ff 00 	movl   $0x1000,-0x168(%ebp)
f01209de:	10 00 00 
f01209e1:	8b 85 98 fe ff ff    	mov    -0x168(%ebp),%eax
f01209e7:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01209ec:	89 85 94 fe ff ff    	mov    %eax,-0x16c(%ebp)
f01209f2:	8b 85 94 fe ff ff    	mov    -0x16c(%ebp),%eax
f01209f8:	ba 00 00 00 00       	mov    $0x0,%edx
f01209fd:	f7 b5 98 fe ff ff    	divl   -0x168(%ebp)
f0120a03:	8b 85 94 fe ff ff    	mov    -0x16c(%ebp),%eax
f0120a09:	29 d0                	sub    %edx,%eax
f0120a0b:	89 c3                	mov    %eax,%ebx
f0120a0d:	c7 85 90 fe ff ff 00 	movl   $0x1000,-0x170(%ebp)
f0120a14:	10 00 00 
f0120a17:	a0 bc 0e 6c f0       	mov    0xf06c0ebc,%al
f0120a1c:	0f b6 d0             	movzbl %al,%edx
f0120a1f:	8b 85 90 fe ff ff    	mov    -0x170(%ebp),%eax
f0120a25:	01 d0                	add    %edx,%eax
f0120a27:	48                   	dec    %eax
f0120a28:	89 85 8c fe ff ff    	mov    %eax,-0x174(%ebp)
f0120a2e:	8b 85 8c fe ff ff    	mov    -0x174(%ebp),%eax
f0120a34:	ba 00 00 00 00       	mov    $0x0,%edx
f0120a39:	f7 b5 90 fe ff ff    	divl   -0x170(%ebp)
f0120a3f:	8b 85 8c fe ff ff    	mov    -0x174(%ebp),%eax
f0120a45:	29 d0                	sub    %edx,%eax
f0120a47:	01 c3                	add    %eax,%ebx
f0120a49:	c7 85 88 fe ff ff 00 	movl   $0x1000,-0x178(%ebp)
f0120a50:	10 00 00 
f0120a53:	a0 bc 0e 6c f0       	mov    0xf06c0ebc,%al
f0120a58:	0f b6 c0             	movzbl %al,%eax
f0120a5b:	c1 e0 04             	shl    $0x4,%eax
f0120a5e:	89 c2                	mov    %eax,%edx
f0120a60:	8b 85 88 fe ff ff    	mov    -0x178(%ebp),%eax
f0120a66:	01 d0                	add    %edx,%eax
f0120a68:	48                   	dec    %eax
f0120a69:	89 85 84 fe ff ff    	mov    %eax,-0x17c(%ebp)
f0120a6f:	8b 85 84 fe ff ff    	mov    -0x17c(%ebp),%eax
f0120a75:	ba 00 00 00 00       	mov    $0x0,%edx
f0120a7a:	f7 b5 88 fe ff ff    	divl   -0x178(%ebp)
f0120a80:	8b 85 84 fe ff ff    	mov    -0x17c(%ebp),%eax
f0120a86:	29 d0                	sub    %edx,%eax
f0120a88:	01 d8                	add    %ebx,%eax
f0120a8a:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f0120a8f:	39 c1                	cmp    %eax,%ecx
f0120a91:	74 17                	je     f0120aaa <test_kfree+0x1563>
f0120a93:	83 ec 04             	sub    $0x4,%esp
f0120a96:	68 5c a9 13 f0       	push   $0xf013a95c
f0120a9b:	68 ae 05 00 00       	push   $0x5ae
f0120aa0:	68 76 a8 13 f0       	push   $0xf013a876
f0120aa5:	e8 fc f6 fd ff       	call   f01001a6 <_panic>
			if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0120aaa:	e8 dd 31 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0120aaf:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0120ab2:	74 17                	je     f0120acb <test_kfree+0x1584>
f0120ab4:	83 ec 04             	sub    $0x4,%esp
f0120ab7:	68 90 a8 13 f0       	push   $0xf013a890
f0120abc:	68 af 05 00 00       	push   $0x5af
f0120ac1:	68 76 a8 13 f0       	push   $0xf013a876
f0120ac6:	e8 db f6 fd ff       	call   f01001a6 <_panic>
			if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
f0120acb:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0120ace:	e8 eb b8 fe ff       	call   f010c3be <sys_calculate_free_frames>
f0120ad3:	29 c3                	sub    %eax,%ebx
f0120ad5:	89 d8                	mov    %ebx,%eax
f0120ad7:	3d 00 03 00 00       	cmp    $0x300,%eax
f0120adc:	74 17                	je     f0120af5 <test_kfree+0x15ae>
f0120ade:	83 ec 04             	sub    $0x4,%esp
f0120ae1:	68 f8 a8 13 f0       	push   $0xf013a8f8
f0120ae6:	68 b0 05 00 00       	push   $0x5b0
f0120aeb:	68 76 a8 13 f0       	push   $0xf013a876
f0120af0:	e8 b1 f6 fd ff       	call   f01001a6 <_panic>
			lastIndices[11] = (3*Mega)/sizeof(char) - 1;
f0120af5:	c7 85 14 fe ff ff ff 	movl   $0x2fffff,-0x1ec(%ebp)
f0120afc:	ff 2f 00 
			ptr = (char*)ptr_allocations[11];
f0120aff:	8b 85 74 fd ff ff    	mov    -0x28c(%ebp),%eax
f0120b05:	89 45 80             	mov    %eax,-0x80(%ebp)
			for (i = 0; i < lastIndices[11]; ++i)
f0120b08:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0120b0f:	eb 0e                	jmp    f0120b1f <test_kfree+0x15d8>
			{
				ptr[i] = 8 ;
f0120b11:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0120b14:	8b 45 80             	mov    -0x80(%ebp),%eax
f0120b17:	01 d0                	add    %edx,%eax
f0120b19:	c6 00 08             	movb   $0x8,(%eax)
			if ((uint32) ptr_allocations[11] != (ACTUAL_START)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
			if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
			if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
			lastIndices[11] = (3*Mega)/sizeof(char) - 1;
			ptr = (char*)ptr_allocations[11];
			for (i = 0; i < lastIndices[11]; ++i)
f0120b1c:	ff 45 f4             	incl   -0xc(%ebp)
f0120b1f:	8b 85 14 fe ff ff    	mov    -0x1ec(%ebp),%eax
f0120b25:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0120b28:	7f e7                	jg     f0120b11 <test_kfree+0x15ca>
			{
				ptr[i] = 8 ;
			}

			//2 KB
			freeFrames = sys_calculate_free_frames() ;
f0120b2a:	e8 8f b8 fe ff       	call   f010c3be <sys_calculate_free_frames>
f0120b2f:	89 45 d0             	mov    %eax,-0x30(%ebp)
			freeDiskFrames = pf_calculate_free_frames() ;
f0120b32:	e8 55 31 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0120b37:	89 45 cc             	mov    %eax,-0x34(%ebp)
			ptr_allocations[12] = kmalloc(2*kilo);
f0120b3a:	83 ec 0c             	sub    $0xc,%esp
f0120b3d:	68 00 08 00 00       	push   $0x800
f0120b42:	e8 7d 6a fe ff       	call   f01075c4 <kmalloc>
f0120b47:	83 c4 10             	add    $0x10,%esp
f0120b4a:	89 85 78 fd ff ff    	mov    %eax,-0x288(%ebp)
			if ((uint32) ptr_allocations[12] != (ACTUAL_START + 3*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0120b50:	8b 85 78 fd ff ff    	mov    -0x288(%ebp),%eax
f0120b56:	89 c1                	mov    %eax,%ecx
f0120b58:	c7 85 80 fe ff ff 00 	movl   $0x1000,-0x180(%ebp)
f0120b5f:	10 00 00 
f0120b62:	8b 85 80 fe ff ff    	mov    -0x180(%ebp),%eax
f0120b68:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0120b6d:	89 85 7c fe ff ff    	mov    %eax,-0x184(%ebp)
f0120b73:	8b 85 7c fe ff ff    	mov    -0x184(%ebp),%eax
f0120b79:	ba 00 00 00 00       	mov    $0x0,%edx
f0120b7e:	f7 b5 80 fe ff ff    	divl   -0x180(%ebp)
f0120b84:	8b 85 7c fe ff ff    	mov    -0x184(%ebp),%eax
f0120b8a:	29 d0                	sub    %edx,%eax
f0120b8c:	89 c3                	mov    %eax,%ebx
f0120b8e:	c7 85 78 fe ff ff 00 	movl   $0x1000,-0x188(%ebp)
f0120b95:	10 00 00 
f0120b98:	a0 bc 0e 6c f0       	mov    0xf06c0ebc,%al
f0120b9d:	0f b6 d0             	movzbl %al,%edx
f0120ba0:	8b 85 78 fe ff ff    	mov    -0x188(%ebp),%eax
f0120ba6:	01 d0                	add    %edx,%eax
f0120ba8:	48                   	dec    %eax
f0120ba9:	89 85 74 fe ff ff    	mov    %eax,-0x18c(%ebp)
f0120baf:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f0120bb5:	ba 00 00 00 00       	mov    $0x0,%edx
f0120bba:	f7 b5 78 fe ff ff    	divl   -0x188(%ebp)
f0120bc0:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f0120bc6:	29 d0                	sub    %edx,%eax
f0120bc8:	01 c3                	add    %eax,%ebx
f0120bca:	c7 85 70 fe ff ff 00 	movl   $0x1000,-0x190(%ebp)
f0120bd1:	10 00 00 
f0120bd4:	a0 bc 0e 6c f0       	mov    0xf06c0ebc,%al
f0120bd9:	0f b6 c0             	movzbl %al,%eax
f0120bdc:	c1 e0 04             	shl    $0x4,%eax
f0120bdf:	89 c2                	mov    %eax,%edx
f0120be1:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f0120be7:	01 d0                	add    %edx,%eax
f0120be9:	48                   	dec    %eax
f0120bea:	89 85 6c fe ff ff    	mov    %eax,-0x194(%ebp)
f0120bf0:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f0120bf6:	ba 00 00 00 00       	mov    $0x0,%edx
f0120bfb:	f7 b5 70 fe ff ff    	divl   -0x190(%ebp)
f0120c01:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f0120c07:	29 d0                	sub    %edx,%eax
f0120c09:	01 d8                	add    %ebx,%eax
f0120c0b:	2d 00 c0 cf 09       	sub    $0x9cfc000,%eax
f0120c10:	39 c1                	cmp    %eax,%ecx
f0120c12:	74 17                	je     f0120c2b <test_kfree+0x16e4>
f0120c14:	83 ec 04             	sub    $0x4,%esp
f0120c17:	68 5c a9 13 f0       	push   $0xf013a95c
f0120c1c:	68 bc 05 00 00       	push   $0x5bc
f0120c21:	68 76 a8 13 f0       	push   $0xf013a876
f0120c26:	e8 7b f5 fd ff       	call   f01001a6 <_panic>
			if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0120c2b:	e8 5c 30 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0120c30:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0120c33:	74 17                	je     f0120c4c <test_kfree+0x1705>
f0120c35:	83 ec 04             	sub    $0x4,%esp
f0120c38:	68 90 a8 13 f0       	push   $0xf013a890
f0120c3d:	68 bd 05 00 00       	push   $0x5bd
f0120c42:	68 76 a8 13 f0       	push   $0xf013a876
f0120c47:	e8 5a f5 fd ff       	call   f01001a6 <_panic>
			if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f0120c4c:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0120c4f:	e8 6a b7 fe ff       	call   f010c3be <sys_calculate_free_frames>
f0120c54:	29 c3                	sub    %eax,%ebx
f0120c56:	89 d8                	mov    %ebx,%eax
f0120c58:	83 f8 01             	cmp    $0x1,%eax
f0120c5b:	74 17                	je     f0120c74 <test_kfree+0x172d>
f0120c5d:	83 ec 04             	sub    $0x4,%esp
f0120c60:	68 f8 a8 13 f0       	push   $0xf013a8f8
f0120c65:	68 be 05 00 00       	push   $0x5be
f0120c6a:	68 76 a8 13 f0       	push   $0xf013a876
f0120c6f:	e8 32 f5 fd ff       	call   f01001a6 <_panic>
			lastIndices[12] = (2*kilo)/sizeof(char) - 1;
f0120c74:	c7 85 18 fe ff ff ff 	movl   $0x7ff,-0x1e8(%ebp)
f0120c7b:	07 00 00 
			ptr = (char*)ptr_allocations[12];
f0120c7e:	8b 85 78 fd ff ff    	mov    -0x288(%ebp),%eax
f0120c84:	89 45 80             	mov    %eax,-0x80(%ebp)
			for (i = 0; i < lastIndices[12]; ++i)
f0120c87:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0120c8e:	eb 0e                	jmp    f0120c9e <test_kfree+0x1757>
			{
				ptr[i] = 9 ;
f0120c90:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0120c93:	8b 45 80             	mov    -0x80(%ebp),%eax
f0120c96:	01 d0                	add    %edx,%eax
f0120c98:	c6 00 09             	movb   $0x9,(%eax)
			if ((uint32) ptr_allocations[12] != (ACTUAL_START + 3*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
			if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
			if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
			lastIndices[12] = (2*kilo)/sizeof(char) - 1;
			ptr = (char*)ptr_allocations[12];
			for (i = 0; i < lastIndices[12]; ++i)
f0120c9b:	ff 45 f4             	incl   -0xc(%ebp)
f0120c9e:	8b 85 18 fe ff ff    	mov    -0x1e8(%ebp),%eax
f0120ca4:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0120ca7:	7f e7                	jg     f0120c90 <test_kfree+0x1749>
			{
				ptr[i] = 9 ;
			}

			//1 MB
			freeFrames = sys_calculate_free_frames() ;
f0120ca9:	e8 10 b7 fe ff       	call   f010c3be <sys_calculate_free_frames>
f0120cae:	89 45 d0             	mov    %eax,-0x30(%ebp)
			freeDiskFrames = pf_calculate_free_frames() ;
f0120cb1:	e8 d6 2f fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0120cb6:	89 45 cc             	mov    %eax,-0x34(%ebp)
			ptr_allocations[13] = kmalloc(1*Mega);
f0120cb9:	83 ec 0c             	sub    $0xc,%esp
f0120cbc:	68 00 00 10 00       	push   $0x100000
f0120cc1:	e8 fe 68 fe ff       	call   f01075c4 <kmalloc>
f0120cc6:	83 c4 10             	add    $0x10,%esp
f0120cc9:	89 85 7c fd ff ff    	mov    %eax,-0x284(%ebp)
			if ((uint32) ptr_allocations[13] != (ACTUAL_START + 3*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0120ccf:	8b 85 7c fd ff ff    	mov    -0x284(%ebp),%eax
f0120cd5:	89 c1                	mov    %eax,%ecx
f0120cd7:	c7 85 68 fe ff ff 00 	movl   $0x1000,-0x198(%ebp)
f0120cde:	10 00 00 
f0120ce1:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f0120ce7:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0120cec:	89 85 64 fe ff ff    	mov    %eax,-0x19c(%ebp)
f0120cf2:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f0120cf8:	ba 00 00 00 00       	mov    $0x0,%edx
f0120cfd:	f7 b5 68 fe ff ff    	divl   -0x198(%ebp)
f0120d03:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f0120d09:	29 d0                	sub    %edx,%eax
f0120d0b:	89 c3                	mov    %eax,%ebx
f0120d0d:	c7 85 60 fe ff ff 00 	movl   $0x1000,-0x1a0(%ebp)
f0120d14:	10 00 00 
f0120d17:	a0 bc 0e 6c f0       	mov    0xf06c0ebc,%al
f0120d1c:	0f b6 d0             	movzbl %al,%edx
f0120d1f:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f0120d25:	01 d0                	add    %edx,%eax
f0120d27:	48                   	dec    %eax
f0120d28:	89 85 5c fe ff ff    	mov    %eax,-0x1a4(%ebp)
f0120d2e:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f0120d34:	ba 00 00 00 00       	mov    $0x0,%edx
f0120d39:	f7 b5 60 fe ff ff    	divl   -0x1a0(%ebp)
f0120d3f:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f0120d45:	29 d0                	sub    %edx,%eax
f0120d47:	01 c3                	add    %eax,%ebx
f0120d49:	c7 85 58 fe ff ff 00 	movl   $0x1000,-0x1a8(%ebp)
f0120d50:	10 00 00 
f0120d53:	a0 bc 0e 6c f0       	mov    0xf06c0ebc,%al
f0120d58:	0f b6 c0             	movzbl %al,%eax
f0120d5b:	c1 e0 04             	shl    $0x4,%eax
f0120d5e:	89 c2                	mov    %eax,%edx
f0120d60:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f0120d66:	01 d0                	add    %edx,%eax
f0120d68:	48                   	dec    %eax
f0120d69:	89 85 54 fe ff ff    	mov    %eax,-0x1ac(%ebp)
f0120d6f:	8b 85 54 fe ff ff    	mov    -0x1ac(%ebp),%eax
f0120d75:	ba 00 00 00 00       	mov    $0x0,%edx
f0120d7a:	f7 b5 58 fe ff ff    	divl   -0x1a8(%ebp)
f0120d80:	8b 85 54 fe ff ff    	mov    -0x1ac(%ebp),%eax
f0120d86:	29 d0                	sub    %edx,%eax
f0120d88:	01 d8                	add    %ebx,%eax
f0120d8a:	2d 00 b0 cf 09       	sub    $0x9cfb000,%eax
f0120d8f:	39 c1                	cmp    %eax,%ecx
f0120d91:	74 17                	je     f0120daa <test_kfree+0x1863>
f0120d93:	83 ec 04             	sub    $0x4,%esp
f0120d96:	68 5c a9 13 f0       	push   $0xf013a95c
f0120d9b:	68 ca 05 00 00       	push   $0x5ca
f0120da0:	68 76 a8 13 f0       	push   $0xf013a876
f0120da5:	e8 fc f3 fd ff       	call   f01001a6 <_panic>
			if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0120daa:	e8 dd 2e fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0120daf:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0120db2:	74 17                	je     f0120dcb <test_kfree+0x1884>
f0120db4:	83 ec 04             	sub    $0x4,%esp
f0120db7:	68 90 a8 13 f0       	push   $0xf013a890
f0120dbc:	68 cb 05 00 00       	push   $0x5cb
f0120dc1:	68 76 a8 13 f0       	push   $0xf013a876
f0120dc6:	e8 db f3 fd ff       	call   f01001a6 <_panic>
			if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: pages are not loaded successfully into memory");
f0120dcb:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0120dce:	e8 eb b5 fe ff       	call   f010c3be <sys_calculate_free_frames>
f0120dd3:	29 c3                	sub    %eax,%ebx
f0120dd5:	89 d8                	mov    %ebx,%eax
f0120dd7:	3d 00 01 00 00       	cmp    $0x100,%eax
f0120ddc:	74 17                	je     f0120df5 <test_kfree+0x18ae>
f0120dde:	83 ec 04             	sub    $0x4,%esp
f0120de1:	68 f8 a8 13 f0       	push   $0xf013a8f8
f0120de6:	68 cc 05 00 00       	push   $0x5cc
f0120deb:	68 76 a8 13 f0       	push   $0xf013a876
f0120df0:	e8 b1 f3 fd ff       	call   f01001a6 <_panic>
			lastIndices[13] = (1*Mega)/sizeof(char) - 1;
f0120df5:	c7 85 1c fe ff ff ff 	movl   $0xfffff,-0x1e4(%ebp)
f0120dfc:	ff 0f 00 
			ptr = (char*)ptr_allocations[13];
f0120dff:	8b 85 7c fd ff ff    	mov    -0x284(%ebp),%eax
f0120e05:	89 45 80             	mov    %eax,-0x80(%ebp)
			for (i = 0; i < lastIndices[13]; ++i)
f0120e08:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0120e0f:	eb 0e                	jmp    f0120e1f <test_kfree+0x18d8>
			{
				ptr[i] = 10 ;
f0120e11:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0120e14:	8b 45 80             	mov    -0x80(%ebp),%eax
f0120e17:	01 d0                	add    %edx,%eax
f0120e19:	c6 00 0a             	movb   $0xa,(%eax)
			if ((uint32) ptr_allocations[13] != (ACTUAL_START + 3*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
			if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
			if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: pages are not loaded successfully into memory");
			lastIndices[13] = (1*Mega)/sizeof(char) - 1;
			ptr = (char*)ptr_allocations[13];
			for (i = 0; i < lastIndices[13]; ++i)
f0120e1c:	ff 45 f4             	incl   -0xc(%ebp)
f0120e1f:	8b 85 1c fe ff ff    	mov    -0x1e4(%ebp),%eax
f0120e25:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0120e28:	7f e7                	jg     f0120e11 <test_kfree+0x18ca>
			{
				ptr[i] = 10 ;
			}
		}
	}
	cprintf("\b\b\b45%");
f0120e2a:	83 ec 0c             	sub    $0xc,%esp
f0120e2d:	68 96 b0 13 f0       	push   $0xf013b096
f0120e32:	e8 f6 fd fd ff       	call   f0100c2d <cprintf>
f0120e37:	83 c4 10             	add    $0x10,%esp

	//kfree remaining allocated spaces [15%]
	{
		//kfree 7 KB
		freeFrames = sys_calculate_free_frames() ;
f0120e3a:	e8 7f b5 fe ff       	call   f010c3be <sys_calculate_free_frames>
f0120e3f:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0120e42:	e8 45 2e fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0120e47:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[4]);
f0120e4a:	8b 85 58 fd ff ff    	mov    -0x2a8(%ebp),%eax
f0120e50:	83 ec 0c             	sub    $0xc,%esp
f0120e53:	50                   	push   %eax
f0120e54:	e8 85 67 fe ff       	call   f01075de <kfree>
f0120e59:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0120e5c:	e8 2b 2e fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0120e61:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0120e64:	74 17                	je     f0120e7d <test_kfree+0x1936>
f0120e66:	83 ec 04             	sub    $0x4,%esp
f0120e69:	68 90 a8 13 f0       	push   $0xf013a890
f0120e6e:	68 dd 05 00 00       	push   $0x5dd
f0120e73:	68 76 a8 13 f0       	push   $0xf013a876
f0120e78:	e8 29 f3 fd ff       	call   f01001a6 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 2) panic("Wrong kfree: pages in memory are not freed correctly");
f0120e7d:	e8 3c b5 fe ff       	call   f010c3be <sys_calculate_free_frames>
f0120e82:	89 c2                	mov    %eax,%edx
f0120e84:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0120e87:	29 c2                	sub    %eax,%edx
f0120e89:	89 d0                	mov    %edx,%eax
f0120e8b:	83 f8 02             	cmp    $0x2,%eax
f0120e8e:	74 17                	je     f0120ea7 <test_kfree+0x1960>
f0120e90:	83 ec 04             	sub    $0x4,%esp
f0120e93:	68 00 b0 13 f0       	push   $0xf013b000
f0120e98:	68 de 05 00 00       	push   $0x5de
f0120e9d:	68 76 a8 13 f0       	push   $0xf013a876
f0120ea2:	e8 ff f2 fd ff       	call   f01001a6 <_panic>

		//kfree 3 MB
		freeFrames = sys_calculate_free_frames() ;
f0120ea7:	e8 12 b5 fe ff       	call   f010c3be <sys_calculate_free_frames>
f0120eac:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0120eaf:	e8 d8 2d fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0120eb4:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[5]);
f0120eb7:	8b 85 5c fd ff ff    	mov    -0x2a4(%ebp),%eax
f0120ebd:	83 ec 0c             	sub    $0xc,%esp
f0120ec0:	50                   	push   %eax
f0120ec1:	e8 18 67 fe ff       	call   f01075de <kfree>
f0120ec6:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0120ec9:	e8 be 2d fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0120ece:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0120ed1:	74 17                	je     f0120eea <test_kfree+0x19a3>
f0120ed3:	83 ec 04             	sub    $0x4,%esp
f0120ed6:	68 90 a8 13 f0       	push   $0xf013a890
f0120edb:	68 e4 05 00 00       	push   $0x5e4
f0120ee0:	68 76 a8 13 f0       	push   $0xf013a876
f0120ee5:	e8 bc f2 fd ff       	call   f01001a6 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 3*Mega/4096) panic("Wrong kfree: pages in memory are not freed correctly");
f0120eea:	e8 cf b4 fe ff       	call   f010c3be <sys_calculate_free_frames>
f0120eef:	89 c2                	mov    %eax,%edx
f0120ef1:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0120ef4:	29 c2                	sub    %eax,%edx
f0120ef6:	89 d0                	mov    %edx,%eax
f0120ef8:	3d 00 03 00 00       	cmp    $0x300,%eax
f0120efd:	74 17                	je     f0120f16 <test_kfree+0x19cf>
f0120eff:	83 ec 04             	sub    $0x4,%esp
f0120f02:	68 00 b0 13 f0       	push   $0xf013b000
f0120f07:	68 e5 05 00 00       	push   $0x5e5
f0120f0c:	68 76 a8 13 f0       	push   $0xf013a876
f0120f11:	e8 90 f2 fd ff       	call   f01001a6 <_panic>

		//kfree 2nd 2 KB
		freeFrames = sys_calculate_free_frames() ;
f0120f16:	e8 a3 b4 fe ff       	call   f010c3be <sys_calculate_free_frames>
f0120f1b:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0120f1e:	e8 69 2d fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0120f23:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[3]);
f0120f26:	8b 85 54 fd ff ff    	mov    -0x2ac(%ebp),%eax
f0120f2c:	83 ec 0c             	sub    $0xc,%esp
f0120f2f:	50                   	push   %eax
f0120f30:	e8 a9 66 fe ff       	call   f01075de <kfree>
f0120f35:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0120f38:	e8 4f 2d fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0120f3d:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0120f40:	74 17                	je     f0120f59 <test_kfree+0x1a12>
f0120f42:	83 ec 04             	sub    $0x4,%esp
f0120f45:	68 90 a8 13 f0       	push   $0xf013a890
f0120f4a:	68 eb 05 00 00       	push   $0x5eb
f0120f4f:	68 76 a8 13 f0       	push   $0xf013a876
f0120f54:	e8 4d f2 fd ff       	call   f01001a6 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 1) panic("Wrong kfree: pages in memory are not freed correctly");
f0120f59:	e8 60 b4 fe ff       	call   f010c3be <sys_calculate_free_frames>
f0120f5e:	89 c2                	mov    %eax,%edx
f0120f60:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0120f63:	29 c2                	sub    %eax,%edx
f0120f65:	89 d0                	mov    %edx,%eax
f0120f67:	83 f8 01             	cmp    $0x1,%eax
f0120f6a:	74 17                	je     f0120f83 <test_kfree+0x1a3c>
f0120f6c:	83 ec 04             	sub    $0x4,%esp
f0120f6f:	68 00 b0 13 f0       	push   $0xf013b000
f0120f74:	68 ec 05 00 00       	push   $0x5ec
f0120f79:	68 76 a8 13 f0       	push   $0xf013a876
f0120f7e:	e8 23 f2 fd ff       	call   f01001a6 <_panic>

		//kfree 14 KB
		freeFrames = sys_calculate_free_frames() ;
f0120f83:	e8 36 b4 fe ff       	call   f010c3be <sys_calculate_free_frames>
f0120f88:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0120f8b:	e8 fc 2c fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0120f90:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[7]);
f0120f93:	8b 85 64 fd ff ff    	mov    -0x29c(%ebp),%eax
f0120f99:	83 ec 0c             	sub    $0xc,%esp
f0120f9c:	50                   	push   %eax
f0120f9d:	e8 3c 66 fe ff       	call   f01075de <kfree>
f0120fa2:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0120fa5:	e8 e2 2c fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0120faa:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0120fad:	74 17                	je     f0120fc6 <test_kfree+0x1a7f>
f0120faf:	83 ec 04             	sub    $0x4,%esp
f0120fb2:	68 90 a8 13 f0       	push   $0xf013a890
f0120fb7:	68 f2 05 00 00       	push   $0x5f2
f0120fbc:	68 76 a8 13 f0       	push   $0xf013a876
f0120fc1:	e8 e0 f1 fd ff       	call   f01001a6 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 4) panic("Wrong kfree: pages in memory are not freed correctly");
f0120fc6:	e8 f3 b3 fe ff       	call   f010c3be <sys_calculate_free_frames>
f0120fcb:	89 c2                	mov    %eax,%edx
f0120fcd:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0120fd0:	29 c2                	sub    %eax,%edx
f0120fd2:	89 d0                	mov    %edx,%eax
f0120fd4:	83 f8 04             	cmp    $0x4,%eax
f0120fd7:	74 17                	je     f0120ff0 <test_kfree+0x1aa9>
f0120fd9:	83 ec 04             	sub    $0x4,%esp
f0120fdc:	68 00 b0 13 f0       	push   $0xf013b000
f0120fe1:	68 f3 05 00 00       	push   $0x5f3
f0120fe6:	68 76 a8 13 f0       	push   $0xf013a876
f0120feb:	e8 b6 f1 fd ff       	call   f01001a6 <_panic>

		//kfree 20 KB
		freeFrames = sys_calculate_free_frames() ;
f0120ff0:	e8 c9 b3 fe ff       	call   f010c3be <sys_calculate_free_frames>
f0120ff5:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0120ff8:	e8 8f 2c fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0120ffd:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[8]);
f0121000:	8b 85 68 fd ff ff    	mov    -0x298(%ebp),%eax
f0121006:	83 ec 0c             	sub    $0xc,%esp
f0121009:	50                   	push   %eax
f012100a:	e8 cf 65 fe ff       	call   f01075de <kfree>
f012100f:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0121012:	e8 75 2c fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0121017:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f012101a:	74 17                	je     f0121033 <test_kfree+0x1aec>
f012101c:	83 ec 04             	sub    $0x4,%esp
f012101f:	68 90 a8 13 f0       	push   $0xf013a890
f0121024:	68 f9 05 00 00       	push   $0x5f9
f0121029:	68 76 a8 13 f0       	push   $0xf013a876
f012102e:	e8 73 f1 fd ff       	call   f01001a6 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 5) panic("Wrong kfree: pages in memory are not freed correctly");
f0121033:	e8 86 b3 fe ff       	call   f010c3be <sys_calculate_free_frames>
f0121038:	89 c2                	mov    %eax,%edx
f012103a:	8b 45 d0             	mov    -0x30(%ebp),%eax
f012103d:	29 c2                	sub    %eax,%edx
f012103f:	89 d0                	mov    %edx,%eax
f0121041:	83 f8 05             	cmp    $0x5,%eax
f0121044:	74 17                	je     f012105d <test_kfree+0x1b16>
f0121046:	83 ec 04             	sub    $0x4,%esp
f0121049:	68 00 b0 13 f0       	push   $0xf013b000
f012104e:	68 fa 05 00 00       	push   $0x5fa
f0121053:	68 76 a8 13 f0       	push   $0xf013a876
f0121058:	e8 49 f1 fd ff       	call   f01001a6 <_panic>

		//kfree 1 MB
		freeFrames = sys_calculate_free_frames() ;
f012105d:	e8 5c b3 fe ff       	call   f010c3be <sys_calculate_free_frames>
f0121062:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0121065:	e8 22 2c fe ff       	call   f0103c8c <pf_calculate_free_frames>
f012106a:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[9]);
f012106d:	8b 85 6c fd ff ff    	mov    -0x294(%ebp),%eax
f0121073:	83 ec 0c             	sub    $0xc,%esp
f0121076:	50                   	push   %eax
f0121077:	e8 62 65 fe ff       	call   f01075de <kfree>
f012107c:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012107f:	e8 08 2c fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0121084:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0121087:	74 17                	je     f01210a0 <test_kfree+0x1b59>
f0121089:	83 ec 04             	sub    $0x4,%esp
f012108c:	68 90 a8 13 f0       	push   $0xf013a890
f0121091:	68 00 06 00 00       	push   $0x600
f0121096:	68 76 a8 13 f0       	push   $0xf013a876
f012109b:	e8 06 f1 fd ff       	call   f01001a6 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 256) panic("Wrong kfree: pages in memory are not freed correctly");
f01210a0:	e8 19 b3 fe ff       	call   f010c3be <sys_calculate_free_frames>
f01210a5:	89 c2                	mov    %eax,%edx
f01210a7:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01210aa:	29 c2                	sub    %eax,%edx
f01210ac:	89 d0                	mov    %edx,%eax
f01210ae:	3d 00 01 00 00       	cmp    $0x100,%eax
f01210b3:	74 17                	je     f01210cc <test_kfree+0x1b85>
f01210b5:	83 ec 04             	sub    $0x4,%esp
f01210b8:	68 00 b0 13 f0       	push   $0xf013b000
f01210bd:	68 01 06 00 00       	push   $0x601
f01210c2:	68 76 a8 13 f0       	push   $0xf013a876
f01210c7:	e8 da f0 fd ff       	call   f01001a6 <_panic>

		if (isKHeapPlacementStrategyNEXTFIT())
f01210cc:	e8 51 5d ff ff       	call   f0116e22 <isKHeapPlacementStrategyNEXTFIT>
f01210d1:	84 c0                	test   %al,%al
f01210d3:	0f 84 80 02 00 00    	je     f0121359 <test_kfree+0x1e12>
		{
			//cprintf("FREE in NEXT FIT\n");
			//kfree Remaining MBs
			freeFrames = sys_calculate_free_frames() ;
f01210d9:	e8 e0 b2 fe ff       	call   f010c3be <sys_calculate_free_frames>
f01210de:	89 45 d0             	mov    %eax,-0x30(%ebp)
			freeDiskFrames = pf_calculate_free_frames() ;
f01210e1:	e8 a6 2b fe ff       	call   f0103c8c <pf_calculate_free_frames>
f01210e6:	89 45 cc             	mov    %eax,-0x34(%ebp)
			kfree(ptr_allocations[10]);
f01210e9:	8b 85 70 fd ff ff    	mov    -0x290(%ebp),%eax
f01210ef:	83 ec 0c             	sub    $0xc,%esp
f01210f2:	50                   	push   %eax
f01210f3:	e8 e6 64 fe ff       	call   f01075de <kfree>
f01210f8:	83 c4 10             	add    $0x10,%esp
			uint32 reqAllocatedSpace = KERNEL_HEAP_MAX - (ACTUAL_START + 13*Mega + 52*kilo + 1*Mega);
f01210fb:	c7 85 50 fe ff ff 00 	movl   $0x1000,-0x1b0(%ebp)
f0121102:	10 00 00 
f0121105:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f012110b:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0121110:	89 85 4c fe ff ff    	mov    %eax,-0x1b4(%ebp)
f0121116:	8b 85 4c fe ff ff    	mov    -0x1b4(%ebp),%eax
f012111c:	ba 00 00 00 00       	mov    $0x0,%edx
f0121121:	f7 b5 50 fe ff ff    	divl   -0x1b0(%ebp)
f0121127:	8b 85 4c fe ff ff    	mov    -0x1b4(%ebp),%eax
f012112d:	29 d0                	sub    %edx,%eax
f012112f:	89 c1                	mov    %eax,%ecx
f0121131:	c7 85 48 fe ff ff 00 	movl   $0x1000,-0x1b8(%ebp)
f0121138:	10 00 00 
f012113b:	a0 bc 0e 6c f0       	mov    0xf06c0ebc,%al
f0121140:	0f b6 d0             	movzbl %al,%edx
f0121143:	8b 85 48 fe ff ff    	mov    -0x1b8(%ebp),%eax
f0121149:	01 d0                	add    %edx,%eax
f012114b:	48                   	dec    %eax
f012114c:	89 85 44 fe ff ff    	mov    %eax,-0x1bc(%ebp)
f0121152:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f0121158:	ba 00 00 00 00       	mov    $0x0,%edx
f012115d:	f7 b5 48 fe ff ff    	divl   -0x1b8(%ebp)
f0121163:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f0121169:	29 d0                	sub    %edx,%eax
f012116b:	01 c1                	add    %eax,%ecx
f012116d:	c7 85 40 fe ff ff 00 	movl   $0x1000,-0x1c0(%ebp)
f0121174:	10 00 00 
f0121177:	a0 bc 0e 6c f0       	mov    0xf06c0ebc,%al
f012117c:	0f b6 c0             	movzbl %al,%eax
f012117f:	c1 e0 04             	shl    $0x4,%eax
f0121182:	89 c2                	mov    %eax,%edx
f0121184:	8b 85 40 fe ff ff    	mov    -0x1c0(%ebp),%eax
f012118a:	01 d0                	add    %edx,%eax
f012118c:	48                   	dec    %eax
f012118d:	89 85 3c fe ff ff    	mov    %eax,-0x1c4(%ebp)
f0121193:	8b 85 3c fe ff ff    	mov    -0x1c4(%ebp),%eax
f0121199:	ba 00 00 00 00       	mov    $0x0,%edx
f012119e:	f7 b5 40 fe ff ff    	divl   -0x1c0(%ebp)
f01211a4:	8b 85 3c fe ff ff    	mov    -0x1c4(%ebp),%eax
f01211aa:	29 d0                	sub    %edx,%eax
f01211ac:	01 c8                	add    %ecx,%eax
f01211ae:	ba 00 e0 1e 09       	mov    $0x91ee000,%edx
f01211b3:	29 c2                	sub    %eax,%edx
f01211b5:	89 d0                	mov    %edx,%eax
f01211b7:	89 85 38 fe ff ff    	mov    %eax,-0x1c8(%ebp)
			if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01211bd:	e8 ca 2a fe ff       	call   f0103c8c <pf_calculate_free_frames>
f01211c2:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f01211c5:	74 17                	je     f01211de <test_kfree+0x1c97>
f01211c7:	83 ec 04             	sub    $0x4,%esp
f01211ca:	68 90 a8 13 f0       	push   $0xf013a890
f01211cf:	68 0b 06 00 00       	push   $0x60b
f01211d4:	68 76 a8 13 f0       	push   $0xf013a876
f01211d9:	e8 c8 ef fd ff       	call   f01001a6 <_panic>
			if ((sys_calculate_free_frames() - freeFrames) != reqAllocatedSpace/PAGE_SIZE) panic("Wrong kfree: pages in memory are not freed correctly");
f01211de:	e8 db b1 fe ff       	call   f010c3be <sys_calculate_free_frames>
f01211e3:	89 c2                	mov    %eax,%edx
f01211e5:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01211e8:	29 c2                	sub    %eax,%edx
f01211ea:	8b 85 38 fe ff ff    	mov    -0x1c8(%ebp),%eax
f01211f0:	c1 e8 0c             	shr    $0xc,%eax
f01211f3:	39 c2                	cmp    %eax,%edx
f01211f5:	74 17                	je     f012120e <test_kfree+0x1cc7>
f01211f7:	83 ec 04             	sub    $0x4,%esp
f01211fa:	68 00 b0 13 f0       	push   $0xf013b000
f01211ff:	68 0c 06 00 00       	push   $0x60c
f0121204:	68 76 a8 13 f0       	push   $0xf013a876
f0121209:	e8 98 ef fd ff       	call   f01001a6 <_panic>

			//kfree 3 MB
			freeFrames = sys_calculate_free_frames() ;
f012120e:	e8 ab b1 fe ff       	call   f010c3be <sys_calculate_free_frames>
f0121213:	89 45 d0             	mov    %eax,-0x30(%ebp)
			freeDiskFrames = pf_calculate_free_frames() ;
f0121216:	e8 71 2a fe ff       	call   f0103c8c <pf_calculate_free_frames>
f012121b:	89 45 cc             	mov    %eax,-0x34(%ebp)
			kfree(ptr_allocations[11]);
f012121e:	8b 85 74 fd ff ff    	mov    -0x28c(%ebp),%eax
f0121224:	83 ec 0c             	sub    $0xc,%esp
f0121227:	50                   	push   %eax
f0121228:	e8 b1 63 fe ff       	call   f01075de <kfree>
f012122d:	83 c4 10             	add    $0x10,%esp
			if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0121230:	e8 57 2a fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0121235:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0121238:	74 17                	je     f0121251 <test_kfree+0x1d0a>
f012123a:	83 ec 04             	sub    $0x4,%esp
f012123d:	68 90 a8 13 f0       	push   $0xf013a890
f0121242:	68 12 06 00 00       	push   $0x612
f0121247:	68 76 a8 13 f0       	push   $0xf013a876
f012124c:	e8 55 ef fd ff       	call   f01001a6 <_panic>
			if ((sys_calculate_free_frames() - freeFrames) != 3*Mega/4096) panic("Wrong kfree: pages in memory are not freed correctly");
f0121251:	e8 68 b1 fe ff       	call   f010c3be <sys_calculate_free_frames>
f0121256:	89 c2                	mov    %eax,%edx
f0121258:	8b 45 d0             	mov    -0x30(%ebp),%eax
f012125b:	29 c2                	sub    %eax,%edx
f012125d:	89 d0                	mov    %edx,%eax
f012125f:	3d 00 03 00 00       	cmp    $0x300,%eax
f0121264:	74 17                	je     f012127d <test_kfree+0x1d36>
f0121266:	83 ec 04             	sub    $0x4,%esp
f0121269:	68 00 b0 13 f0       	push   $0xf013b000
f012126e:	68 13 06 00 00       	push   $0x613
f0121273:	68 76 a8 13 f0       	push   $0xf013a876
f0121278:	e8 29 ef fd ff       	call   f01001a6 <_panic>

			//kfree 2 KB
			freeFrames = sys_calculate_free_frames() ;
f012127d:	e8 3c b1 fe ff       	call   f010c3be <sys_calculate_free_frames>
f0121282:	89 45 d0             	mov    %eax,-0x30(%ebp)
			freeDiskFrames = pf_calculate_free_frames() ;
f0121285:	e8 02 2a fe ff       	call   f0103c8c <pf_calculate_free_frames>
f012128a:	89 45 cc             	mov    %eax,-0x34(%ebp)
			kfree(ptr_allocations[12]);
f012128d:	8b 85 78 fd ff ff    	mov    -0x288(%ebp),%eax
f0121293:	83 ec 0c             	sub    $0xc,%esp
f0121296:	50                   	push   %eax
f0121297:	e8 42 63 fe ff       	call   f01075de <kfree>
f012129c:	83 c4 10             	add    $0x10,%esp
			if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012129f:	e8 e8 29 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f01212a4:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f01212a7:	74 17                	je     f01212c0 <test_kfree+0x1d79>
f01212a9:	83 ec 04             	sub    $0x4,%esp
f01212ac:	68 90 a8 13 f0       	push   $0xf013a890
f01212b1:	68 19 06 00 00       	push   $0x619
f01212b6:	68 76 a8 13 f0       	push   $0xf013a876
f01212bb:	e8 e6 ee fd ff       	call   f01001a6 <_panic>
			if ((sys_calculate_free_frames() - freeFrames) != 1) panic("Wrong kfree: pages in memory are not freed correctly");
f01212c0:	e8 f9 b0 fe ff       	call   f010c3be <sys_calculate_free_frames>
f01212c5:	89 c2                	mov    %eax,%edx
f01212c7:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01212ca:	29 c2                	sub    %eax,%edx
f01212cc:	89 d0                	mov    %edx,%eax
f01212ce:	83 f8 01             	cmp    $0x1,%eax
f01212d1:	74 17                	je     f01212ea <test_kfree+0x1da3>
f01212d3:	83 ec 04             	sub    $0x4,%esp
f01212d6:	68 00 b0 13 f0       	push   $0xf013b000
f01212db:	68 1a 06 00 00       	push   $0x61a
f01212e0:	68 76 a8 13 f0       	push   $0xf013a876
f01212e5:	e8 bc ee fd ff       	call   f01001a6 <_panic>

			//kfree 1 MB
			freeFrames = sys_calculate_free_frames() ;
f01212ea:	e8 cf b0 fe ff       	call   f010c3be <sys_calculate_free_frames>
f01212ef:	89 45 d0             	mov    %eax,-0x30(%ebp)
			freeDiskFrames = pf_calculate_free_frames() ;
f01212f2:	e8 95 29 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f01212f7:	89 45 cc             	mov    %eax,-0x34(%ebp)
			kfree(ptr_allocations[13]);
f01212fa:	8b 85 7c fd ff ff    	mov    -0x284(%ebp),%eax
f0121300:	83 ec 0c             	sub    $0xc,%esp
f0121303:	50                   	push   %eax
f0121304:	e8 d5 62 fe ff       	call   f01075de <kfree>
f0121309:	83 c4 10             	add    $0x10,%esp
			if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012130c:	e8 7b 29 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0121311:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0121314:	74 17                	je     f012132d <test_kfree+0x1de6>
f0121316:	83 ec 04             	sub    $0x4,%esp
f0121319:	68 90 a8 13 f0       	push   $0xf013a890
f012131e:	68 20 06 00 00       	push   $0x620
f0121323:	68 76 a8 13 f0       	push   $0xf013a876
f0121328:	e8 79 ee fd ff       	call   f01001a6 <_panic>
			if ((sys_calculate_free_frames() - freeFrames) != 1*Mega/4096) panic("Wrong kfree: pages in memory are not freed correctly");
f012132d:	e8 8c b0 fe ff       	call   f010c3be <sys_calculate_free_frames>
f0121332:	89 c2                	mov    %eax,%edx
f0121334:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0121337:	29 c2                	sub    %eax,%edx
f0121339:	89 d0                	mov    %edx,%eax
f012133b:	3d 00 01 00 00       	cmp    $0x100,%eax
f0121340:	74 17                	je     f0121359 <test_kfree+0x1e12>
f0121342:	83 ec 04             	sub    $0x4,%esp
f0121345:	68 00 b0 13 f0       	push   $0xf013b000
f012134a:	68 21 06 00 00       	push   $0x621
f012134f:	68 76 a8 13 f0       	push   $0xf013a876
f0121354:	e8 4d ee fd ff       	call   f01001a6 <_panic>

		}
		if(start_freeFrames != (sys_calculate_free_frames())) {panic("Wrong kfree: not all pages removed correctly at end");}
f0121359:	e8 60 b0 fe ff       	call   f010c3be <sys_calculate_free_frames>
f012135e:	89 c2                	mov    %eax,%edx
f0121360:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0121363:	39 c2                	cmp    %eax,%edx
f0121365:	74 17                	je     f012137e <test_kfree+0x1e37>
f0121367:	83 ec 04             	sub    $0x4,%esp
f012136a:	68 a0 b0 13 f0       	push   $0xf013b0a0
f012136f:	68 24 06 00 00       	push   $0x624
f0121374:	68 76 a8 13 f0       	push   $0xf013a876
f0121379:	e8 28 ee fd ff       	call   f01001a6 <_panic>
	}
	cprintf("\b\b\b60%");
f012137e:	83 ec 0c             	sub    $0xc,%esp
f0121381:	68 d4 b0 13 f0       	push   $0xf013b0d4
f0121386:	e8 a2 f8 fd ff       	call   f0100c2d <cprintf>
f012138b:	83 c4 10             	add    $0x10,%esp

	//Check memory access after kfree [15%]
	{
		//Bypass the PAGE FAULT on <MOVB immediate, reg> instruction by setting its length
		//and continue executing the remaining code
		sys_bypassPageFault(3);
f012138e:	83 ec 0c             	sub    $0xc,%esp
f0121391:	6a 03                	push   $0x3
f0121393:	e8 cf b4 fe ff       	call   f010c867 <sys_bypassPageFault>
f0121398:	83 c4 10             	add    $0x10,%esp

		for (i = 0; i < 10; ++i)
f012139b:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01213a2:	e9 82 00 00 00       	jmp    f0121429 <test_kfree+0x1ee2>
		{
			ptr = (char *) ptr_allocations[i];
f01213a7:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01213aa:	8b 84 85 48 fd ff ff 	mov    -0x2b8(%ebp,%eax,4),%eax
f01213b1:	89 45 80             	mov    %eax,-0x80(%ebp)
			ptr[0] = 10;
f01213b4:	8b 45 80             	mov    -0x80(%ebp),%eax
f01213b7:	c6 00 0a             	movb   $0xa,(%eax)
			//cprintf("\n\ncr2 = %x, faulted addr = %x", sys_rcr2(), (uint32)&(ptr[0]));
			if (sys_rcr2() != (uint32)&(ptr[0])) panic("kfree: successful access to freed space!! it should not be succeeded");
f01213ba:	e8 96 b4 fe ff       	call   f010c855 <sys_rcr2>
f01213bf:	89 c2                	mov    %eax,%edx
f01213c1:	8b 45 80             	mov    -0x80(%ebp),%eax
f01213c4:	39 c2                	cmp    %eax,%edx
f01213c6:	74 17                	je     f01213df <test_kfree+0x1e98>
f01213c8:	83 ec 04             	sub    $0x4,%esp
f01213cb:	68 dc b0 13 f0       	push   $0xf013b0dc
f01213d0:	68 33 06 00 00       	push   $0x633
f01213d5:	68 76 a8 13 f0       	push   $0xf013a876
f01213da:	e8 c7 ed fd ff       	call   f01001a6 <_panic>
			ptr[lastIndices[i]] = 10;
f01213df:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01213e2:	8b 84 85 e8 fd ff ff 	mov    -0x218(%ebp,%eax,4),%eax
f01213e9:	89 c2                	mov    %eax,%edx
f01213eb:	8b 45 80             	mov    -0x80(%ebp),%eax
f01213ee:	01 d0                	add    %edx,%eax
f01213f0:	c6 00 0a             	movb   $0xa,(%eax)
			if (sys_rcr2() != (uint32)&(ptr[lastIndices[i]])) panic("kfree: successful access to freed space!! it should not be succeeded");
f01213f3:	e8 5d b4 fe ff       	call   f010c855 <sys_rcr2>
f01213f8:	89 c2                	mov    %eax,%edx
f01213fa:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01213fd:	8b 84 85 e8 fd ff ff 	mov    -0x218(%ebp,%eax,4),%eax
f0121404:	89 c1                	mov    %eax,%ecx
f0121406:	8b 45 80             	mov    -0x80(%ebp),%eax
f0121409:	01 c8                	add    %ecx,%eax
f012140b:	39 c2                	cmp    %eax,%edx
f012140d:	74 17                	je     f0121426 <test_kfree+0x1edf>
f012140f:	83 ec 04             	sub    $0x4,%esp
f0121412:	68 dc b0 13 f0       	push   $0xf013b0dc
f0121417:	68 35 06 00 00       	push   $0x635
f012141c:	68 76 a8 13 f0       	push   $0xf013a876
f0121421:	e8 80 ed fd ff       	call   f01001a6 <_panic>
	{
		//Bypass the PAGE FAULT on <MOVB immediate, reg> instruction by setting its length
		//and continue executing the remaining code
		sys_bypassPageFault(3);

		for (i = 0; i < 10; ++i)
f0121426:	ff 45 f4             	incl   -0xc(%ebp)
f0121429:	83 7d f4 09          	cmpl   $0x9,-0xc(%ebp)
f012142d:	0f 8e 74 ff ff ff    	jle    f01213a7 <test_kfree+0x1e60>
			ptr[lastIndices[i]] = 10;
			if (sys_rcr2() != (uint32)&(ptr[lastIndices[i]])) panic("kfree: successful access to freed space!! it should not be succeeded");
		}

		//set it to 0 again to cancel the bypassing option
		sys_bypassPageFault(0);
f0121433:	83 ec 0c             	sub    $0xc,%esp
f0121436:	6a 00                	push   $0x0
f0121438:	e8 2a b4 fe ff       	call   f010c867 <sys_bypassPageFault>
f012143d:	83 c4 10             	add    $0x10,%esp
	}
	cprintf("\b\b\b75%");
f0121440:	83 ec 0c             	sub    $0xc,%esp
f0121443:	68 21 b1 13 f0       	push   $0xf013b121
f0121448:	e8 e0 f7 fd ff       	call   f0100c2d <cprintf>
f012144d:	83 c4 10             	add    $0x10,%esp

	//kfree non-exist item [10%]
	{
		//kfree 2 MB
		freeFrames = sys_calculate_free_frames() ;
f0121450:	e8 69 af fe ff       	call   f010c3be <sys_calculate_free_frames>
f0121455:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0121458:	e8 2f 28 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f012145d:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[0]);
f0121460:	8b 85 48 fd ff ff    	mov    -0x2b8(%ebp),%eax
f0121466:	83 ec 0c             	sub    $0xc,%esp
f0121469:	50                   	push   %eax
f012146a:	e8 6f 61 fe ff       	call   f01075de <kfree>
f012146f:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0121472:	e8 15 28 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0121477:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f012147a:	74 17                	je     f0121493 <test_kfree+0x1f4c>
f012147c:	83 ec 04             	sub    $0x4,%esp
f012147f:	68 90 a8 13 f0       	push   $0xf013a890
f0121484:	68 43 06 00 00       	push   $0x643
f0121489:	68 76 a8 13 f0       	push   $0xf013a876
f012148e:	e8 13 ed fd ff       	call   f01001a6 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 0) panic("Wrong kfree: attempt to kfree a non-existing ptr. It should do nothing");
f0121493:	e8 26 af fe ff       	call   f010c3be <sys_calculate_free_frames>
f0121498:	89 c2                	mov    %eax,%edx
f012149a:	8b 45 d0             	mov    -0x30(%ebp),%eax
f012149d:	39 c2                	cmp    %eax,%edx
f012149f:	74 17                	je     f01214b8 <test_kfree+0x1f71>
f01214a1:	83 ec 04             	sub    $0x4,%esp
f01214a4:	68 28 b1 13 f0       	push   $0xf013b128
f01214a9:	68 44 06 00 00       	push   $0x644
f01214ae:	68 76 a8 13 f0       	push   $0xf013a876
f01214b3:	e8 ee ec fd ff       	call   f01001a6 <_panic>

		//kfree 2 KB
		freeFrames = sys_calculate_free_frames() ;
f01214b8:	e8 01 af fe ff       	call   f010c3be <sys_calculate_free_frames>
f01214bd:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01214c0:	e8 c7 27 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f01214c5:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[2]);
f01214c8:	8b 85 50 fd ff ff    	mov    -0x2b0(%ebp),%eax
f01214ce:	83 ec 0c             	sub    $0xc,%esp
f01214d1:	50                   	push   %eax
f01214d2:	e8 07 61 fe ff       	call   f01075de <kfree>
f01214d7:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01214da:	e8 ad 27 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f01214df:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f01214e2:	74 17                	je     f01214fb <test_kfree+0x1fb4>
f01214e4:	83 ec 04             	sub    $0x4,%esp
f01214e7:	68 90 a8 13 f0       	push   $0xf013a890
f01214ec:	68 4a 06 00 00       	push   $0x64a
f01214f1:	68 76 a8 13 f0       	push   $0xf013a876
f01214f6:	e8 ab ec fd ff       	call   f01001a6 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 0) panic("Wrong kfree: attempt to kfree a non-existing ptr. It should do nothing");
f01214fb:	e8 be ae fe ff       	call   f010c3be <sys_calculate_free_frames>
f0121500:	89 c2                	mov    %eax,%edx
f0121502:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0121505:	39 c2                	cmp    %eax,%edx
f0121507:	74 17                	je     f0121520 <test_kfree+0x1fd9>
f0121509:	83 ec 04             	sub    $0x4,%esp
f012150c:	68 28 b1 13 f0       	push   $0xf013b128
f0121511:	68 4b 06 00 00       	push   $0x64b
f0121516:	68 76 a8 13 f0       	push   $0xf013a876
f012151b:	e8 86 ec fd ff       	call   f01001a6 <_panic>

		//kfree 20 KB
		freeFrames = sys_calculate_free_frames() ;
f0121520:	e8 99 ae fe ff       	call   f010c3be <sys_calculate_free_frames>
f0121525:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0121528:	e8 5f 27 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f012152d:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[8]);
f0121530:	8b 85 68 fd ff ff    	mov    -0x298(%ebp),%eax
f0121536:	83 ec 0c             	sub    $0xc,%esp
f0121539:	50                   	push   %eax
f012153a:	e8 9f 60 fe ff       	call   f01075de <kfree>
f012153f:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0121542:	e8 45 27 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0121547:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f012154a:	74 17                	je     f0121563 <test_kfree+0x201c>
f012154c:	83 ec 04             	sub    $0x4,%esp
f012154f:	68 90 a8 13 f0       	push   $0xf013a890
f0121554:	68 51 06 00 00       	push   $0x651
f0121559:	68 76 a8 13 f0       	push   $0xf013a876
f012155e:	e8 43 ec fd ff       	call   f01001a6 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 0) panic("Wrong kfree: attempt to kfree a non-existing ptr. It should do nothing");
f0121563:	e8 56 ae fe ff       	call   f010c3be <sys_calculate_free_frames>
f0121568:	89 c2                	mov    %eax,%edx
f012156a:	8b 45 d0             	mov    -0x30(%ebp),%eax
f012156d:	39 c2                	cmp    %eax,%edx
f012156f:	74 17                	je     f0121588 <test_kfree+0x2041>
f0121571:	83 ec 04             	sub    $0x4,%esp
f0121574:	68 28 b1 13 f0       	push   $0xf013b128
f0121579:	68 52 06 00 00       	push   $0x652
f012157e:	68 76 a8 13 f0       	push   $0xf013a876
f0121583:	e8 1e ec fd ff       	call   f01001a6 <_panic>

		//kfree 1 MB
		freeFrames = sys_calculate_free_frames() ;
f0121588:	e8 31 ae fe ff       	call   f010c3be <sys_calculate_free_frames>
f012158d:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0121590:	e8 f7 26 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0121595:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[9]);
f0121598:	8b 85 6c fd ff ff    	mov    -0x294(%ebp),%eax
f012159e:	83 ec 0c             	sub    $0xc,%esp
f01215a1:	50                   	push   %eax
f01215a2:	e8 37 60 fe ff       	call   f01075de <kfree>
f01215a7:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01215aa:	e8 dd 26 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f01215af:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f01215b2:	74 17                	je     f01215cb <test_kfree+0x2084>
f01215b4:	83 ec 04             	sub    $0x4,%esp
f01215b7:	68 90 a8 13 f0       	push   $0xf013a890
f01215bc:	68 58 06 00 00       	push   $0x658
f01215c1:	68 76 a8 13 f0       	push   $0xf013a876
f01215c6:	e8 db eb fd ff       	call   f01001a6 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 0) panic("Wrong kfree: attempt to kfree a non-existing ptr. It should do nothing");
f01215cb:	e8 ee ad fe ff       	call   f010c3be <sys_calculate_free_frames>
f01215d0:	89 c2                	mov    %eax,%edx
f01215d2:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01215d5:	39 c2                	cmp    %eax,%edx
f01215d7:	74 17                	je     f01215f0 <test_kfree+0x20a9>
f01215d9:	83 ec 04             	sub    $0x4,%esp
f01215dc:	68 28 b1 13 f0       	push   $0xf013b128
f01215e1:	68 59 06 00 00       	push   $0x659
f01215e6:	68 76 a8 13 f0       	push   $0xf013a876
f01215eb:	e8 b6 eb fd ff       	call   f01001a6 <_panic>

	}
	cprintf("\b\b\b85%");
f01215f0:	83 ec 0c             	sub    $0xc,%esp
f01215f3:	68 6f b1 13 f0       	push   $0xf013b16f
f01215f8:	e8 30 f6 fd ff       	call   f0100c2d <cprintf>
f01215fd:	83 c4 10             	add    $0x10,%esp

	//check tables	[15%]
	{
		long long va;
		for (va = KERNEL_HEAP_START; va < (long long)KERNEL_HEAP_MAX; va+=PTSIZE)
f0121600:	c7 45 e8 00 00 00 f6 	movl   $0xf6000000,-0x18(%ebp)
f0121607:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f012160e:	eb 48                	jmp    f0121658 <test_kfree+0x2111>
		{
			uint32 *ptr_table ;
			get_page_table(ptr_page_directory, (uint32)va, &ptr_table);
f0121610:	8b 55 e8             	mov    -0x18(%ebp),%edx
f0121613:	a1 b8 0e 6c f0       	mov    0xf06c0eb8,%eax
f0121618:	83 ec 04             	sub    $0x4,%esp
f012161b:	8d 8d 44 fd ff ff    	lea    -0x2bc(%ebp),%ecx
f0121621:	51                   	push   %ecx
f0121622:	52                   	push   %edx
f0121623:	50                   	push   %eax
f0121624:	e8 40 53 fe ff       	call   f0106969 <get_page_table>
f0121629:	83 c4 10             	add    $0x10,%esp
			if (ptr_table == NULL)
f012162c:	8b 85 44 fd ff ff    	mov    -0x2bc(%ebp),%eax
f0121632:	85 c0                	test   %eax,%eax
f0121634:	75 17                	jne    f012164d <test_kfree+0x2106>
			{
				panic("Wrong kfree: one of the kernel tables is wrongly removed! Tables should not be removed here in kfree");
f0121636:	83 ec 04             	sub    $0x4,%esp
f0121639:	68 78 b1 13 f0       	push   $0xf013b178
f012163e:	68 67 06 00 00       	push   $0x667
f0121643:	68 76 a8 13 f0       	push   $0xf013a876
f0121648:	e8 59 eb fd ff       	call   f01001a6 <_panic>
	cprintf("\b\b\b85%");

	//check tables	[15%]
	{
		long long va;
		for (va = KERNEL_HEAP_START; va < (long long)KERNEL_HEAP_MAX; va+=PTSIZE)
f012164d:	81 45 e8 00 00 40 00 	addl   $0x400000,-0x18(%ebp)
f0121654:	83 55 ec 00          	adcl   $0x0,-0x14(%ebp)
f0121658:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012165c:	78 b2                	js     f0121610 <test_kfree+0x20c9>
f012165e:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0121662:	7f 09                	jg     f012166d <test_kfree+0x2126>
f0121664:	81 7d e8 ff ef ff ff 	cmpl   $0xffffefff,-0x18(%ebp)
f012166b:	76 a3                	jbe    f0121610 <test_kfree+0x20c9>
				panic("Wrong kfree: one of the kernel tables is wrongly removed! Tables should not be removed here in kfree");
			}
		}
	}

	cprintf("\b\b\b100%\n");
f012166d:	83 ec 0c             	sub    $0xc,%esp
f0121670:	68 5a aa 13 f0       	push   $0xf013aa5a
f0121675:	e8 b3 f5 fd ff       	call   f0100c2d <cprintf>
f012167a:	83 c4 10             	add    $0x10,%esp



	cprintf("\nCongratulations!! test kfree completed successfully.\n");
f012167d:	83 ec 0c             	sub    $0xc,%esp
f0121680:	68 e0 b1 13 f0       	push   $0xf013b1e0
f0121685:	e8 a3 f5 fd ff       	call   f0100c2d <cprintf>
f012168a:	83 c4 10             	add    $0x10,%esp

	return 1;
f012168d:	b8 01 00 00 00       	mov    $0x1,%eax

}
f0121692:	8d 65 f8             	lea    -0x8(%ebp),%esp
f0121695:	5b                   	pop    %ebx
f0121696:	5f                   	pop    %edi
f0121697:	5d                   	pop    %ebp
f0121698:	c3                   	ret    

f0121699 <test_kfree_bestfirstfit>:

int test_kfree_bestfirstfit()
{
f0121699:	55                   	push   %ebp
f012169a:	89 e5                	mov    %esp,%ebp
f012169c:	57                   	push   %edi
f012169d:	53                   	push   %ebx
f012169e:	81 ec 40 02 00 00    	sub    $0x240,%esp
	cprintf("==============================================\n");
f01216a4:	83 ec 0c             	sub    $0xc,%esp
f01216a7:	68 b8 a7 13 f0       	push   $0xf013a7b8
f01216ac:	e8 7c f5 fd ff       	call   f0100c2d <cprintf>
f01216b1:	83 c4 10             	add    $0x10,%esp
	cprintf("MAKE SURE to have a FRESH RUN for this test\n(i.e. don't run any program/test before it)\n");
f01216b4:	83 ec 0c             	sub    $0xc,%esp
f01216b7:	68 e8 a7 13 f0       	push   $0xf013a7e8
f01216bc:	e8 6c f5 fd ff       	call   f0100c2d <cprintf>
f01216c1:	83 c4 10             	add    $0x10,%esp
	cprintf("==============================================\n");
f01216c4:	83 ec 0c             	sub    $0xc,%esp
f01216c7:	68 b8 a7 13 f0       	push   $0xf013a7b8
f01216cc:	e8 5c f5 fd ff       	call   f0100c2d <cprintf>
f01216d1:	83 c4 10             	add    $0x10,%esp

	char minByte = 1<<7;
f01216d4:	c6 45 e7 80          	movb   $0x80,-0x19(%ebp)
	char maxByte = 0x7F;
f01216d8:	c6 45 e6 7f          	movb   $0x7f,-0x1a(%ebp)
	short minShort = 1<<15 ;
f01216dc:	66 c7 45 e4 00 80    	movw   $0x8000,-0x1c(%ebp)
	short maxShort = 0x7FFF;
f01216e2:	66 c7 45 e2 ff 7f    	movw   $0x7fff,-0x1e(%ebp)
	int minInt = 1<<31 ;
f01216e8:	c7 45 dc 00 00 00 80 	movl   $0x80000000,-0x24(%ebp)
	int maxInt = 0x7FFFFFFF;
f01216ef:	c7 45 d8 ff ff ff 7f 	movl   $0x7fffffff,-0x28(%ebp)
	char *byteArr, *byteArr2 ;
	short *shortArr, *shortArr2 ;
	int *intArr;
	struct MyStruct *structArr ;
	int lastIndexOfByte, lastIndexOfByte2, lastIndexOfShort, lastIndexOfShort2, lastIndexOfInt, lastIndexOfStruct;
	int start_freeFrames = sys_calculate_free_frames() ;
f01216f6:	e8 c3 ac fe ff       	call   f010c3be <sys_calculate_free_frames>
f01216fb:	89 45 d4             	mov    %eax,-0x2c(%ebp)

	//malloc some spaces
	int i, freeFrames, freeDiskFrames ;
	char* ptr;
	int lastIndices[20] = {0};
f01216fe:	8d 95 68 fe ff ff    	lea    -0x198(%ebp),%edx
f0121704:	b9 14 00 00 00       	mov    $0x14,%ecx
f0121709:	b8 00 00 00 00       	mov    $0x0,%eax
f012170e:	89 d7                	mov    %edx,%edi
f0121710:	f3 ab                	rep stos %eax,%es:(%edi)
	int sums[20] = {0};
f0121712:	8d 95 18 fe ff ff    	lea    -0x1e8(%ebp),%edx
f0121718:	b9 14 00 00 00       	mov    $0x14,%ecx
f012171d:	b8 00 00 00 00       	mov    $0x0,%eax
f0121722:	89 d7                	mov    %edx,%edi
f0121724:	f3 ab                	rep stos %eax,%es:(%edi)
	void* ptr_allocations[20] = {0};
f0121726:	8d 95 c8 fd ff ff    	lea    -0x238(%ebp),%edx
f012172c:	b9 14 00 00 00       	mov    $0x14,%ecx
f0121731:	b8 00 00 00 00       	mov    $0x0,%eax
f0121736:	89 d7                	mov    %edx,%edi
f0121738:	f3 ab                	rep stos %eax,%es:(%edi)
	{
		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f012173a:	e8 7f ac fe ff       	call   f010c3be <sys_calculate_free_frames>
f012173f:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0121742:	e8 45 25 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0121747:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[0] = kmalloc(2*Mega-kilo);
f012174a:	83 ec 0c             	sub    $0xc,%esp
f012174d:	68 00 fc 1f 00       	push   $0x1ffc00
f0121752:	e8 6d 5e fe ff       	call   f01075c4 <kmalloc>
f0121757:	83 c4 10             	add    $0x10,%esp
f012175a:	89 85 c8 fd ff ff    	mov    %eax,-0x238(%ebp)
		if ((uint32) ptr_allocations[0] !=  (ACTUAL_START)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0121760:	8b 85 c8 fd ff ff    	mov    -0x238(%ebp),%eax
f0121766:	89 c1                	mov    %eax,%ecx
f0121768:	c7 45 c8 00 10 00 00 	movl   $0x1000,-0x38(%ebp)
f012176f:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0121772:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0121777:	89 45 c4             	mov    %eax,-0x3c(%ebp)
f012177a:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f012177d:	ba 00 00 00 00       	mov    $0x0,%edx
f0121782:	f7 75 c8             	divl   -0x38(%ebp)
f0121785:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0121788:	29 d0                	sub    %edx,%eax
f012178a:	89 c3                	mov    %eax,%ebx
f012178c:	c7 45 c0 00 10 00 00 	movl   $0x1000,-0x40(%ebp)
f0121793:	a0 bc 0e 6c f0       	mov    0xf06c0ebc,%al
f0121798:	0f b6 d0             	movzbl %al,%edx
f012179b:	8b 45 c0             	mov    -0x40(%ebp),%eax
f012179e:	01 d0                	add    %edx,%eax
f01217a0:	48                   	dec    %eax
f01217a1:	89 45 bc             	mov    %eax,-0x44(%ebp)
f01217a4:	8b 45 bc             	mov    -0x44(%ebp),%eax
f01217a7:	ba 00 00 00 00       	mov    $0x0,%edx
f01217ac:	f7 75 c0             	divl   -0x40(%ebp)
f01217af:	8b 45 bc             	mov    -0x44(%ebp),%eax
f01217b2:	29 d0                	sub    %edx,%eax
f01217b4:	01 c3                	add    %eax,%ebx
f01217b6:	c7 45 b8 00 10 00 00 	movl   $0x1000,-0x48(%ebp)
f01217bd:	a0 bc 0e 6c f0       	mov    0xf06c0ebc,%al
f01217c2:	0f b6 c0             	movzbl %al,%eax
f01217c5:	c1 e0 04             	shl    $0x4,%eax
f01217c8:	89 c2                	mov    %eax,%edx
f01217ca:	8b 45 b8             	mov    -0x48(%ebp),%eax
f01217cd:	01 d0                	add    %edx,%eax
f01217cf:	48                   	dec    %eax
f01217d0:	89 45 b4             	mov    %eax,-0x4c(%ebp)
f01217d3:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01217d6:	ba 00 00 00 00       	mov    $0x0,%edx
f01217db:	f7 75 b8             	divl   -0x48(%ebp)
f01217de:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01217e1:	29 d0                	sub    %edx,%eax
f01217e3:	01 d8                	add    %ebx,%eax
f01217e5:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f01217ea:	39 c1                	cmp    %eax,%ecx
f01217ec:	74 17                	je     f0121805 <test_kfree_bestfirstfit+0x16c>
f01217ee:	83 ec 04             	sub    $0x4,%esp
f01217f1:	68 5c a9 13 f0       	push   $0xf013a95c
f01217f6:	68 95 06 00 00       	push   $0x695
f01217fb:	68 76 a8 13 f0       	push   $0xf013a876
f0121800:	e8 a1 e9 fd ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0121805:	e8 82 24 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f012180a:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f012180d:	74 17                	je     f0121826 <test_kfree_bestfirstfit+0x18d>
f012180f:	83 ec 04             	sub    $0x4,%esp
f0121812:	68 90 a8 13 f0       	push   $0xf013a890
f0121817:	68 96 06 00 00       	push   $0x696
f012181c:	68 76 a8 13 f0       	push   $0xf013a876
f0121821:	e8 80 e9 fd ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f0121826:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0121829:	e8 90 ab fe ff       	call   f010c3be <sys_calculate_free_frames>
f012182e:	29 c3                	sub    %eax,%ebx
f0121830:	89 d8                	mov    %ebx,%eax
f0121832:	3d 00 02 00 00       	cmp    $0x200,%eax
f0121837:	74 17                	je     f0121850 <test_kfree_bestfirstfit+0x1b7>
f0121839:	83 ec 04             	sub    $0x4,%esp
f012183c:	68 f8 a8 13 f0       	push   $0xf013a8f8
f0121841:	68 97 06 00 00       	push   $0x697
f0121846:	68 76 a8 13 f0       	push   $0xf013a876
f012184b:	e8 56 e9 fd ff       	call   f01001a6 <_panic>
		lastIndices[0] = (2*Mega-kilo)/sizeof(char) - 1;
f0121850:	c7 85 68 fe ff ff ff 	movl   $0x1ffbff,-0x198(%ebp)
f0121857:	fb 1f 00 

		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f012185a:	e8 5f ab fe ff       	call   f010c3be <sys_calculate_free_frames>
f012185f:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0121862:	e8 25 24 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0121867:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[1] = kmalloc(2*Mega-kilo);
f012186a:	83 ec 0c             	sub    $0xc,%esp
f012186d:	68 00 fc 1f 00       	push   $0x1ffc00
f0121872:	e8 4d 5d fe ff       	call   f01075c4 <kmalloc>
f0121877:	83 c4 10             	add    $0x10,%esp
f012187a:	89 85 cc fd ff ff    	mov    %eax,-0x234(%ebp)
		if ((uint32) ptr_allocations[1] != (ACTUAL_START + 2*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0121880:	8b 85 cc fd ff ff    	mov    -0x234(%ebp),%eax
f0121886:	89 c1                	mov    %eax,%ecx
f0121888:	c7 45 b0 00 10 00 00 	movl   $0x1000,-0x50(%ebp)
f012188f:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0121892:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0121897:	89 45 ac             	mov    %eax,-0x54(%ebp)
f012189a:	8b 45 ac             	mov    -0x54(%ebp),%eax
f012189d:	ba 00 00 00 00       	mov    $0x0,%edx
f01218a2:	f7 75 b0             	divl   -0x50(%ebp)
f01218a5:	8b 45 ac             	mov    -0x54(%ebp),%eax
f01218a8:	29 d0                	sub    %edx,%eax
f01218aa:	89 c3                	mov    %eax,%ebx
f01218ac:	c7 45 a8 00 10 00 00 	movl   $0x1000,-0x58(%ebp)
f01218b3:	a0 bc 0e 6c f0       	mov    0xf06c0ebc,%al
f01218b8:	0f b6 d0             	movzbl %al,%edx
f01218bb:	8b 45 a8             	mov    -0x58(%ebp),%eax
f01218be:	01 d0                	add    %edx,%eax
f01218c0:	48                   	dec    %eax
f01218c1:	89 45 a4             	mov    %eax,-0x5c(%ebp)
f01218c4:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f01218c7:	ba 00 00 00 00       	mov    $0x0,%edx
f01218cc:	f7 75 a8             	divl   -0x58(%ebp)
f01218cf:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f01218d2:	29 d0                	sub    %edx,%eax
f01218d4:	01 c3                	add    %eax,%ebx
f01218d6:	c7 45 a0 00 10 00 00 	movl   $0x1000,-0x60(%ebp)
f01218dd:	a0 bc 0e 6c f0       	mov    0xf06c0ebc,%al
f01218e2:	0f b6 c0             	movzbl %al,%eax
f01218e5:	c1 e0 04             	shl    $0x4,%eax
f01218e8:	89 c2                	mov    %eax,%edx
f01218ea:	8b 45 a0             	mov    -0x60(%ebp),%eax
f01218ed:	01 d0                	add    %edx,%eax
f01218ef:	48                   	dec    %eax
f01218f0:	89 45 9c             	mov    %eax,-0x64(%ebp)
f01218f3:	8b 45 9c             	mov    -0x64(%ebp),%eax
f01218f6:	ba 00 00 00 00       	mov    $0x0,%edx
f01218fb:	f7 75 a0             	divl   -0x60(%ebp)
f01218fe:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0121901:	29 d0                	sub    %edx,%eax
f0121903:	01 d8                	add    %ebx,%eax
f0121905:	2d 00 c0 df 09       	sub    $0x9dfc000,%eax
f012190a:	39 c1                	cmp    %eax,%ecx
f012190c:	74 17                	je     f0121925 <test_kfree_bestfirstfit+0x28c>
f012190e:	83 ec 04             	sub    $0x4,%esp
f0121911:	68 5c a9 13 f0       	push   $0xf013a95c
f0121916:	68 9e 06 00 00       	push   $0x69e
f012191b:	68 76 a8 13 f0       	push   $0xf013a876
f0121920:	e8 81 e8 fd ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0121925:	e8 62 23 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f012192a:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f012192d:	74 17                	je     f0121946 <test_kfree_bestfirstfit+0x2ad>
f012192f:	83 ec 04             	sub    $0x4,%esp
f0121932:	68 90 a8 13 f0       	push   $0xf013a890
f0121937:	68 9f 06 00 00       	push   $0x69f
f012193c:	68 76 a8 13 f0       	push   $0xf013a876
f0121941:	e8 60 e8 fd ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f0121946:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0121949:	e8 70 aa fe ff       	call   f010c3be <sys_calculate_free_frames>
f012194e:	29 c3                	sub    %eax,%ebx
f0121950:	89 d8                	mov    %ebx,%eax
f0121952:	3d 00 02 00 00       	cmp    $0x200,%eax
f0121957:	74 17                	je     f0121970 <test_kfree_bestfirstfit+0x2d7>
f0121959:	83 ec 04             	sub    $0x4,%esp
f012195c:	68 f8 a8 13 f0       	push   $0xf013a8f8
f0121961:	68 a0 06 00 00       	push   $0x6a0
f0121966:	68 76 a8 13 f0       	push   $0xf013a876
f012196b:	e8 36 e8 fd ff       	call   f01001a6 <_panic>
		lastIndices[1] = (2*Mega-kilo)/sizeof(char) - 1;
f0121970:	c7 85 6c fe ff ff ff 	movl   $0x1ffbff,-0x194(%ebp)
f0121977:	fb 1f 00 

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f012197a:	e8 3f aa fe ff       	call   f010c3be <sys_calculate_free_frames>
f012197f:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0121982:	e8 05 23 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0121987:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[2] = kmalloc(2*kilo);
f012198a:	83 ec 0c             	sub    $0xc,%esp
f012198d:	68 00 08 00 00       	push   $0x800
f0121992:	e8 2d 5c fe ff       	call   f01075c4 <kmalloc>
f0121997:	83 c4 10             	add    $0x10,%esp
f012199a:	89 85 d0 fd ff ff    	mov    %eax,-0x230(%ebp)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01219a0:	8b 85 d0 fd ff ff    	mov    -0x230(%ebp),%eax
f01219a6:	89 c1                	mov    %eax,%ecx
f01219a8:	c7 45 98 00 10 00 00 	movl   $0x1000,-0x68(%ebp)
f01219af:	8b 45 98             	mov    -0x68(%ebp),%eax
f01219b2:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01219b7:	89 45 94             	mov    %eax,-0x6c(%ebp)
f01219ba:	8b 45 94             	mov    -0x6c(%ebp),%eax
f01219bd:	ba 00 00 00 00       	mov    $0x0,%edx
f01219c2:	f7 75 98             	divl   -0x68(%ebp)
f01219c5:	8b 45 94             	mov    -0x6c(%ebp),%eax
f01219c8:	29 d0                	sub    %edx,%eax
f01219ca:	89 c3                	mov    %eax,%ebx
f01219cc:	c7 45 90 00 10 00 00 	movl   $0x1000,-0x70(%ebp)
f01219d3:	a0 bc 0e 6c f0       	mov    0xf06c0ebc,%al
f01219d8:	0f b6 d0             	movzbl %al,%edx
f01219db:	8b 45 90             	mov    -0x70(%ebp),%eax
f01219de:	01 d0                	add    %edx,%eax
f01219e0:	48                   	dec    %eax
f01219e1:	89 45 8c             	mov    %eax,-0x74(%ebp)
f01219e4:	8b 45 8c             	mov    -0x74(%ebp),%eax
f01219e7:	ba 00 00 00 00       	mov    $0x0,%edx
f01219ec:	f7 75 90             	divl   -0x70(%ebp)
f01219ef:	8b 45 8c             	mov    -0x74(%ebp),%eax
f01219f2:	29 d0                	sub    %edx,%eax
f01219f4:	01 c3                	add    %eax,%ebx
f01219f6:	c7 45 88 00 10 00 00 	movl   $0x1000,-0x78(%ebp)
f01219fd:	a0 bc 0e 6c f0       	mov    0xf06c0ebc,%al
f0121a02:	0f b6 c0             	movzbl %al,%eax
f0121a05:	c1 e0 04             	shl    $0x4,%eax
f0121a08:	89 c2                	mov    %eax,%edx
f0121a0a:	8b 45 88             	mov    -0x78(%ebp),%eax
f0121a0d:	01 d0                	add    %edx,%eax
f0121a0f:	48                   	dec    %eax
f0121a10:	89 45 84             	mov    %eax,-0x7c(%ebp)
f0121a13:	8b 45 84             	mov    -0x7c(%ebp),%eax
f0121a16:	ba 00 00 00 00       	mov    $0x0,%edx
f0121a1b:	f7 75 88             	divl   -0x78(%ebp)
f0121a1e:	8b 45 84             	mov    -0x7c(%ebp),%eax
f0121a21:	29 d0                	sub    %edx,%eax
f0121a23:	01 d8                	add    %ebx,%eax
f0121a25:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
f0121a2a:	39 c1                	cmp    %eax,%ecx
f0121a2c:	74 17                	je     f0121a45 <test_kfree_bestfirstfit+0x3ac>
f0121a2e:	83 ec 04             	sub    $0x4,%esp
f0121a31:	68 5c a9 13 f0       	push   $0xf013a95c
f0121a36:	68 a7 06 00 00       	push   $0x6a7
f0121a3b:	68 76 a8 13 f0       	push   $0xf013a876
f0121a40:	e8 61 e7 fd ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0121a45:	e8 42 22 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0121a4a:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0121a4d:	74 17                	je     f0121a66 <test_kfree_bestfirstfit+0x3cd>
f0121a4f:	83 ec 04             	sub    $0x4,%esp
f0121a52:	68 90 a8 13 f0       	push   $0xf013a890
f0121a57:	68 a8 06 00 00       	push   $0x6a8
f0121a5c:	68 76 a8 13 f0       	push   $0xf013a876
f0121a61:	e8 40 e7 fd ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f0121a66:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0121a69:	e8 50 a9 fe ff       	call   f010c3be <sys_calculate_free_frames>
f0121a6e:	29 c3                	sub    %eax,%ebx
f0121a70:	89 d8                	mov    %ebx,%eax
f0121a72:	83 f8 01             	cmp    $0x1,%eax
f0121a75:	74 17                	je     f0121a8e <test_kfree_bestfirstfit+0x3f5>
f0121a77:	83 ec 04             	sub    $0x4,%esp
f0121a7a:	68 f8 a8 13 f0       	push   $0xf013a8f8
f0121a7f:	68 a9 06 00 00       	push   $0x6a9
f0121a84:	68 76 a8 13 f0       	push   $0xf013a876
f0121a89:	e8 18 e7 fd ff       	call   f01001a6 <_panic>
		lastIndices[2] = (2*kilo)/sizeof(char) - 1;
f0121a8e:	c7 85 70 fe ff ff ff 	movl   $0x7ff,-0x190(%ebp)
f0121a95:	07 00 00 
		ptr = (char*)ptr_allocations[2];
f0121a98:	8b 85 d0 fd ff ff    	mov    -0x230(%ebp),%eax
f0121a9e:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[2]; ++i)
f0121aa1:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0121aa8:	eb 0e                	jmp    f0121ab8 <test_kfree_bestfirstfit+0x41f>
		{
			ptr[i] = 2 ;
f0121aaa:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0121aad:	8b 45 80             	mov    -0x80(%ebp),%eax
f0121ab0:	01 d0                	add    %edx,%eax
f0121ab2:	c6 00 02             	movb   $0x2,(%eax)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[2] = (2*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[2];
		for (i = 0; i < lastIndices[2]; ++i)
f0121ab5:	ff 45 f4             	incl   -0xc(%ebp)
f0121ab8:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f0121abe:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0121ac1:	7f e7                	jg     f0121aaa <test_kfree_bestfirstfit+0x411>
		{
			ptr[i] = 2 ;
		}

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f0121ac3:	e8 f6 a8 fe ff       	call   f010c3be <sys_calculate_free_frames>
f0121ac8:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0121acb:	e8 bc 21 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0121ad0:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[3] = kmalloc(2*kilo);
f0121ad3:	83 ec 0c             	sub    $0xc,%esp
f0121ad6:	68 00 08 00 00       	push   $0x800
f0121adb:	e8 e4 5a fe ff       	call   f01075c4 <kmalloc>
f0121ae0:	83 c4 10             	add    $0x10,%esp
f0121ae3:	89 85 d4 fd ff ff    	mov    %eax,-0x22c(%ebp)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0121ae9:	8b 85 d4 fd ff ff    	mov    -0x22c(%ebp),%eax
f0121aef:	89 c1                	mov    %eax,%ecx
f0121af1:	c7 85 7c ff ff ff 00 	movl   $0x1000,-0x84(%ebp)
f0121af8:	10 00 00 
f0121afb:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f0121b01:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0121b06:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)
f0121b0c:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f0121b12:	ba 00 00 00 00       	mov    $0x0,%edx
f0121b17:	f7 b5 7c ff ff ff    	divl   -0x84(%ebp)
f0121b1d:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f0121b23:	29 d0                	sub    %edx,%eax
f0121b25:	89 c3                	mov    %eax,%ebx
f0121b27:	c7 85 74 ff ff ff 00 	movl   $0x1000,-0x8c(%ebp)
f0121b2e:	10 00 00 
f0121b31:	a0 bc 0e 6c f0       	mov    0xf06c0ebc,%al
f0121b36:	0f b6 d0             	movzbl %al,%edx
f0121b39:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f0121b3f:	01 d0                	add    %edx,%eax
f0121b41:	48                   	dec    %eax
f0121b42:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
f0121b48:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f0121b4e:	ba 00 00 00 00       	mov    $0x0,%edx
f0121b53:	f7 b5 74 ff ff ff    	divl   -0x8c(%ebp)
f0121b59:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f0121b5f:	29 d0                	sub    %edx,%eax
f0121b61:	01 c3                	add    %eax,%ebx
f0121b63:	c7 85 6c ff ff ff 00 	movl   $0x1000,-0x94(%ebp)
f0121b6a:	10 00 00 
f0121b6d:	a0 bc 0e 6c f0       	mov    0xf06c0ebc,%al
f0121b72:	0f b6 c0             	movzbl %al,%eax
f0121b75:	c1 e0 04             	shl    $0x4,%eax
f0121b78:	89 c2                	mov    %eax,%edx
f0121b7a:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f0121b80:	01 d0                	add    %edx,%eax
f0121b82:	48                   	dec    %eax
f0121b83:	89 85 68 ff ff ff    	mov    %eax,-0x98(%ebp)
f0121b89:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f0121b8f:	ba 00 00 00 00       	mov    $0x0,%edx
f0121b94:	f7 b5 6c ff ff ff    	divl   -0x94(%ebp)
f0121b9a:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f0121ba0:	29 d0                	sub    %edx,%eax
f0121ba2:	01 d8                	add    %ebx,%eax
f0121ba4:	2d 00 b0 bf 09       	sub    $0x9bfb000,%eax
f0121ba9:	39 c1                	cmp    %eax,%ecx
f0121bab:	74 17                	je     f0121bc4 <test_kfree_bestfirstfit+0x52b>
f0121bad:	83 ec 04             	sub    $0x4,%esp
f0121bb0:	68 5c a9 13 f0       	push   $0xf013a95c
f0121bb5:	68 b5 06 00 00       	push   $0x6b5
f0121bba:	68 76 a8 13 f0       	push   $0xf013a876
f0121bbf:	e8 e2 e5 fd ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0121bc4:	e8 c3 20 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0121bc9:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0121bcc:	74 17                	je     f0121be5 <test_kfree_bestfirstfit+0x54c>
f0121bce:	83 ec 04             	sub    $0x4,%esp
f0121bd1:	68 90 a8 13 f0       	push   $0xf013a890
f0121bd6:	68 b6 06 00 00       	push   $0x6b6
f0121bdb:	68 76 a8 13 f0       	push   $0xf013a876
f0121be0:	e8 c1 e5 fd ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f0121be5:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0121be8:	e8 d1 a7 fe ff       	call   f010c3be <sys_calculate_free_frames>
f0121bed:	29 c3                	sub    %eax,%ebx
f0121bef:	89 d8                	mov    %ebx,%eax
f0121bf1:	83 f8 01             	cmp    $0x1,%eax
f0121bf4:	74 17                	je     f0121c0d <test_kfree_bestfirstfit+0x574>
f0121bf6:	83 ec 04             	sub    $0x4,%esp
f0121bf9:	68 f8 a8 13 f0       	push   $0xf013a8f8
f0121bfe:	68 b7 06 00 00       	push   $0x6b7
f0121c03:	68 76 a8 13 f0       	push   $0xf013a876
f0121c08:	e8 99 e5 fd ff       	call   f01001a6 <_panic>
		lastIndices[3] = (2*kilo)/sizeof(char) - 1;
f0121c0d:	c7 85 74 fe ff ff ff 	movl   $0x7ff,-0x18c(%ebp)
f0121c14:	07 00 00 
		ptr = (char*)ptr_allocations[3];
f0121c17:	8b 85 d4 fd ff ff    	mov    -0x22c(%ebp),%eax
f0121c1d:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[3]; ++i)
f0121c20:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0121c27:	eb 0e                	jmp    f0121c37 <test_kfree_bestfirstfit+0x59e>
		{
			ptr[i] = 3 ;
f0121c29:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0121c2c:	8b 45 80             	mov    -0x80(%ebp),%eax
f0121c2f:	01 d0                	add    %edx,%eax
f0121c31:	c6 00 03             	movb   $0x3,(%eax)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[3] = (2*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[3];
		for (i = 0; i < lastIndices[3]; ++i)
f0121c34:	ff 45 f4             	incl   -0xc(%ebp)
f0121c37:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f0121c3d:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0121c40:	7f e7                	jg     f0121c29 <test_kfree_bestfirstfit+0x590>
		{
			ptr[i] = 3 ;
		}

		//7 KB
		freeFrames = sys_calculate_free_frames() ;
f0121c42:	e8 77 a7 fe ff       	call   f010c3be <sys_calculate_free_frames>
f0121c47:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0121c4a:	e8 3d 20 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0121c4f:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[4] = kmalloc(7*kilo);
f0121c52:	83 ec 0c             	sub    $0xc,%esp
f0121c55:	68 00 1c 00 00       	push   $0x1c00
f0121c5a:	e8 65 59 fe ff       	call   f01075c4 <kmalloc>
f0121c5f:	83 c4 10             	add    $0x10,%esp
f0121c62:	89 85 d8 fd ff ff    	mov    %eax,-0x228(%ebp)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0121c68:	8b 85 d8 fd ff ff    	mov    -0x228(%ebp),%eax
f0121c6e:	89 c1                	mov    %eax,%ecx
f0121c70:	c7 85 64 ff ff ff 00 	movl   $0x1000,-0x9c(%ebp)
f0121c77:	10 00 00 
f0121c7a:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f0121c80:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0121c85:	89 85 60 ff ff ff    	mov    %eax,-0xa0(%ebp)
f0121c8b:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f0121c91:	ba 00 00 00 00       	mov    $0x0,%edx
f0121c96:	f7 b5 64 ff ff ff    	divl   -0x9c(%ebp)
f0121c9c:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f0121ca2:	29 d0                	sub    %edx,%eax
f0121ca4:	89 c3                	mov    %eax,%ebx
f0121ca6:	c7 85 5c ff ff ff 00 	movl   $0x1000,-0xa4(%ebp)
f0121cad:	10 00 00 
f0121cb0:	a0 bc 0e 6c f0       	mov    0xf06c0ebc,%al
f0121cb5:	0f b6 d0             	movzbl %al,%edx
f0121cb8:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f0121cbe:	01 d0                	add    %edx,%eax
f0121cc0:	48                   	dec    %eax
f0121cc1:	89 85 58 ff ff ff    	mov    %eax,-0xa8(%ebp)
f0121cc7:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f0121ccd:	ba 00 00 00 00       	mov    $0x0,%edx
f0121cd2:	f7 b5 5c ff ff ff    	divl   -0xa4(%ebp)
f0121cd8:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f0121cde:	29 d0                	sub    %edx,%eax
f0121ce0:	01 c3                	add    %eax,%ebx
f0121ce2:	c7 85 54 ff ff ff 00 	movl   $0x1000,-0xac(%ebp)
f0121ce9:	10 00 00 
f0121cec:	a0 bc 0e 6c f0       	mov    0xf06c0ebc,%al
f0121cf1:	0f b6 c0             	movzbl %al,%eax
f0121cf4:	c1 e0 04             	shl    $0x4,%eax
f0121cf7:	89 c2                	mov    %eax,%edx
f0121cf9:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f0121cff:	01 d0                	add    %edx,%eax
f0121d01:	48                   	dec    %eax
f0121d02:	89 85 50 ff ff ff    	mov    %eax,-0xb0(%ebp)
f0121d08:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f0121d0e:	ba 00 00 00 00       	mov    $0x0,%edx
f0121d13:	f7 b5 54 ff ff ff    	divl   -0xac(%ebp)
f0121d19:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f0121d1f:	29 d0                	sub    %edx,%eax
f0121d21:	01 d8                	add    %ebx,%eax
f0121d23:	2d 00 a0 bf 09       	sub    $0x9bfa000,%eax
f0121d28:	39 c1                	cmp    %eax,%ecx
f0121d2a:	74 17                	je     f0121d43 <test_kfree_bestfirstfit+0x6aa>
f0121d2c:	83 ec 04             	sub    $0x4,%esp
f0121d2f:	68 5c a9 13 f0       	push   $0xf013a95c
f0121d34:	68 c3 06 00 00       	push   $0x6c3
f0121d39:	68 76 a8 13 f0       	push   $0xf013a876
f0121d3e:	e8 63 e4 fd ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0121d43:	e8 44 1f fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0121d48:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0121d4b:	74 17                	je     f0121d64 <test_kfree_bestfirstfit+0x6cb>
f0121d4d:	83 ec 04             	sub    $0x4,%esp
f0121d50:	68 90 a8 13 f0       	push   $0xf013a890
f0121d55:	68 c4 06 00 00       	push   $0x6c4
f0121d5a:	68 76 a8 13 f0       	push   $0xf013a876
f0121d5f:	e8 42 e4 fd ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: pages are not loaded successfully into memory");
f0121d64:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0121d67:	e8 52 a6 fe ff       	call   f010c3be <sys_calculate_free_frames>
f0121d6c:	29 c3                	sub    %eax,%ebx
f0121d6e:	89 d8                	mov    %ebx,%eax
f0121d70:	83 f8 02             	cmp    $0x2,%eax
f0121d73:	74 17                	je     f0121d8c <test_kfree_bestfirstfit+0x6f3>
f0121d75:	83 ec 04             	sub    $0x4,%esp
f0121d78:	68 f8 a8 13 f0       	push   $0xf013a8f8
f0121d7d:	68 c5 06 00 00       	push   $0x6c5
f0121d82:	68 76 a8 13 f0       	push   $0xf013a876
f0121d87:	e8 1a e4 fd ff       	call   f01001a6 <_panic>
		lastIndices[4] = (7*kilo)/sizeof(char) - 1;
f0121d8c:	c7 85 78 fe ff ff ff 	movl   $0x1bff,-0x188(%ebp)
f0121d93:	1b 00 00 
		ptr = (char*)ptr_allocations[4];
f0121d96:	8b 85 d8 fd ff ff    	mov    -0x228(%ebp),%eax
f0121d9c:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[4]; ++i)
f0121d9f:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0121da6:	eb 0e                	jmp    f0121db6 <test_kfree_bestfirstfit+0x71d>
		{
			ptr[i] = 4 ;
f0121da8:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0121dab:	8b 45 80             	mov    -0x80(%ebp),%eax
f0121dae:	01 d0                	add    %edx,%eax
f0121db0:	c6 00 04             	movb   $0x4,(%eax)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[4] = (7*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[4];
		for (i = 0; i < lastIndices[4]; ++i)
f0121db3:	ff 45 f4             	incl   -0xc(%ebp)
f0121db6:	8b 85 78 fe ff ff    	mov    -0x188(%ebp),%eax
f0121dbc:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0121dbf:	7f e7                	jg     f0121da8 <test_kfree_bestfirstfit+0x70f>
		{
			ptr[i] = 4 ;
		}

		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f0121dc1:	e8 f8 a5 fe ff       	call   f010c3be <sys_calculate_free_frames>
f0121dc6:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0121dc9:	e8 be 1e fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0121dce:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[5] = kmalloc(3*Mega-kilo);
f0121dd1:	83 ec 0c             	sub    $0xc,%esp
f0121dd4:	68 00 fc 2f 00       	push   $0x2ffc00
f0121dd9:	e8 e6 57 fe ff       	call   f01075c4 <kmalloc>
f0121dde:	83 c4 10             	add    $0x10,%esp
f0121de1:	89 85 dc fd ff ff    	mov    %eax,-0x224(%ebp)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo) ) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0121de7:	8b 85 dc fd ff ff    	mov    -0x224(%ebp),%eax
f0121ded:	89 c1                	mov    %eax,%ecx
f0121def:	c7 85 4c ff ff ff 00 	movl   $0x1000,-0xb4(%ebp)
f0121df6:	10 00 00 
f0121df9:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0121dff:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0121e04:	89 85 48 ff ff ff    	mov    %eax,-0xb8(%ebp)
f0121e0a:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f0121e10:	ba 00 00 00 00       	mov    $0x0,%edx
f0121e15:	f7 b5 4c ff ff ff    	divl   -0xb4(%ebp)
f0121e1b:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f0121e21:	29 d0                	sub    %edx,%eax
f0121e23:	89 c3                	mov    %eax,%ebx
f0121e25:	c7 85 44 ff ff ff 00 	movl   $0x1000,-0xbc(%ebp)
f0121e2c:	10 00 00 
f0121e2f:	a0 bc 0e 6c f0       	mov    0xf06c0ebc,%al
f0121e34:	0f b6 d0             	movzbl %al,%edx
f0121e37:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0121e3d:	01 d0                	add    %edx,%eax
f0121e3f:	48                   	dec    %eax
f0121e40:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%ebp)
f0121e46:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0121e4c:	ba 00 00 00 00       	mov    $0x0,%edx
f0121e51:	f7 b5 44 ff ff ff    	divl   -0xbc(%ebp)
f0121e57:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0121e5d:	29 d0                	sub    %edx,%eax
f0121e5f:	01 c3                	add    %eax,%ebx
f0121e61:	c7 85 3c ff ff ff 00 	movl   $0x1000,-0xc4(%ebp)
f0121e68:	10 00 00 
f0121e6b:	a0 bc 0e 6c f0       	mov    0xf06c0ebc,%al
f0121e70:	0f b6 c0             	movzbl %al,%eax
f0121e73:	c1 e0 04             	shl    $0x4,%eax
f0121e76:	89 c2                	mov    %eax,%edx
f0121e78:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f0121e7e:	01 d0                	add    %edx,%eax
f0121e80:	48                   	dec    %eax
f0121e81:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
f0121e87:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f0121e8d:	ba 00 00 00 00       	mov    $0x0,%edx
f0121e92:	f7 b5 3c ff ff ff    	divl   -0xc4(%ebp)
f0121e98:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f0121e9e:	29 d0                	sub    %edx,%eax
f0121ea0:	01 d8                	add    %ebx,%eax
f0121ea2:	2d 00 80 bf 09       	sub    $0x9bf8000,%eax
f0121ea7:	39 c1                	cmp    %eax,%ecx
f0121ea9:	74 17                	je     f0121ec2 <test_kfree_bestfirstfit+0x829>
f0121eab:	83 ec 04             	sub    $0x4,%esp
f0121eae:	68 5c a9 13 f0       	push   $0xf013a95c
f0121eb3:	68 d1 06 00 00       	push   $0x6d1
f0121eb8:	68 76 a8 13 f0       	push   $0xf013a876
f0121ebd:	e8 e4 e2 fd ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0121ec2:	e8 c5 1d fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0121ec7:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0121eca:	74 17                	je     f0121ee3 <test_kfree_bestfirstfit+0x84a>
f0121ecc:	83 ec 04             	sub    $0x4,%esp
f0121ecf:	68 90 a8 13 f0       	push   $0xf013a890
f0121ed4:	68 d2 06 00 00       	push   $0x6d2
f0121ed9:	68 76 a8 13 f0       	push   $0xf013a876
f0121ede:	e8 c3 e2 fd ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
f0121ee3:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0121ee6:	e8 d3 a4 fe ff       	call   f010c3be <sys_calculate_free_frames>
f0121eeb:	29 c3                	sub    %eax,%ebx
f0121eed:	89 d8                	mov    %ebx,%eax
f0121eef:	3d 00 03 00 00       	cmp    $0x300,%eax
f0121ef4:	74 17                	je     f0121f0d <test_kfree_bestfirstfit+0x874>
f0121ef6:	83 ec 04             	sub    $0x4,%esp
f0121ef9:	68 f8 a8 13 f0       	push   $0xf013a8f8
f0121efe:	68 d3 06 00 00       	push   $0x6d3
f0121f03:	68 76 a8 13 f0       	push   $0xf013a876
f0121f08:	e8 99 e2 fd ff       	call   f01001a6 <_panic>
		lastIndices[5] = (3*Mega-kilo)/sizeof(char) - 1;
f0121f0d:	c7 85 7c fe ff ff ff 	movl   $0x2ffbff,-0x184(%ebp)
f0121f14:	fb 2f 00 
		ptr = (char*)ptr_allocations[5];
f0121f17:	8b 85 dc fd ff ff    	mov    -0x224(%ebp),%eax
f0121f1d:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[5]; ++i)
f0121f20:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0121f27:	eb 0e                	jmp    f0121f37 <test_kfree_bestfirstfit+0x89e>
		{
			ptr[i] = 5 ;
f0121f29:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0121f2c:	8b 45 80             	mov    -0x80(%ebp),%eax
f0121f2f:	01 d0                	add    %edx,%eax
f0121f31:	c6 00 05             	movb   $0x5,(%eax)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo) ) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[5] = (3*Mega-kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[5];
		for (i = 0; i < lastIndices[5]; ++i)
f0121f34:	ff 45 f4             	incl   -0xc(%ebp)
f0121f37:	8b 85 7c fe ff ff    	mov    -0x184(%ebp),%eax
f0121f3d:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0121f40:	7f e7                	jg     f0121f29 <test_kfree_bestfirstfit+0x890>
		{
			ptr[i] = 5 ;
		}

		//6 MB
		freeFrames = sys_calculate_free_frames() ;
f0121f42:	e8 77 a4 fe ff       	call   f010c3be <sys_calculate_free_frames>
f0121f47:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0121f4a:	e8 3d 1d fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0121f4f:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[6] = kmalloc(6*Mega-kilo);
f0121f52:	83 ec 0c             	sub    $0xc,%esp
f0121f55:	68 00 fc 5f 00       	push   $0x5ffc00
f0121f5a:	e8 65 56 fe ff       	call   f01075c4 <kmalloc>
f0121f5f:	83 c4 10             	add    $0x10,%esp
f0121f62:	89 85 e0 fd ff ff    	mov    %eax,-0x220(%ebp)
		if ((uint32) ptr_allocations[6] != (ACTUAL_START + 7*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0121f68:	8b 85 e0 fd ff ff    	mov    -0x220(%ebp),%eax
f0121f6e:	89 c1                	mov    %eax,%ecx
f0121f70:	c7 85 34 ff ff ff 00 	movl   $0x1000,-0xcc(%ebp)
f0121f77:	10 00 00 
f0121f7a:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f0121f80:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0121f85:	89 85 30 ff ff ff    	mov    %eax,-0xd0(%ebp)
f0121f8b:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f0121f91:	ba 00 00 00 00       	mov    $0x0,%edx
f0121f96:	f7 b5 34 ff ff ff    	divl   -0xcc(%ebp)
f0121f9c:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f0121fa2:	29 d0                	sub    %edx,%eax
f0121fa4:	89 c3                	mov    %eax,%ebx
f0121fa6:	c7 85 2c ff ff ff 00 	movl   $0x1000,-0xd4(%ebp)
f0121fad:	10 00 00 
f0121fb0:	a0 bc 0e 6c f0       	mov    0xf06c0ebc,%al
f0121fb5:	0f b6 d0             	movzbl %al,%edx
f0121fb8:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f0121fbe:	01 d0                	add    %edx,%eax
f0121fc0:	48                   	dec    %eax
f0121fc1:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%ebp)
f0121fc7:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f0121fcd:	ba 00 00 00 00       	mov    $0x0,%edx
f0121fd2:	f7 b5 2c ff ff ff    	divl   -0xd4(%ebp)
f0121fd8:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f0121fde:	29 d0                	sub    %edx,%eax
f0121fe0:	01 c3                	add    %eax,%ebx
f0121fe2:	c7 85 24 ff ff ff 00 	movl   $0x1000,-0xdc(%ebp)
f0121fe9:	10 00 00 
f0121fec:	a0 bc 0e 6c f0       	mov    0xf06c0ebc,%al
f0121ff1:	0f b6 c0             	movzbl %al,%eax
f0121ff4:	c1 e0 04             	shl    $0x4,%eax
f0121ff7:	89 c2                	mov    %eax,%edx
f0121ff9:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0121fff:	01 d0                	add    %edx,%eax
f0122001:	48                   	dec    %eax
f0122002:	89 85 20 ff ff ff    	mov    %eax,-0xe0(%ebp)
f0122008:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012200e:	ba 00 00 00 00       	mov    $0x0,%edx
f0122013:	f7 b5 24 ff ff ff    	divl   -0xdc(%ebp)
f0122019:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012201f:	29 d0                	sub    %edx,%eax
f0122021:	01 d8                	add    %ebx,%eax
f0122023:	2d 00 80 8f 09       	sub    $0x98f8000,%eax
f0122028:	39 c1                	cmp    %eax,%ecx
f012202a:	74 17                	je     f0122043 <test_kfree_bestfirstfit+0x9aa>
f012202c:	83 ec 04             	sub    $0x4,%esp
f012202f:	68 5c a9 13 f0       	push   $0xf013a95c
f0122034:	68 df 06 00 00       	push   $0x6df
f0122039:	68 76 a8 13 f0       	push   $0xf013a876
f012203e:	e8 63 e1 fd ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0122043:	e8 44 1c fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0122048:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f012204b:	74 17                	je     f0122064 <test_kfree_bestfirstfit+0x9cb>
f012204d:	83 ec 04             	sub    $0x4,%esp
f0122050:	68 90 a8 13 f0       	push   $0xf013a890
f0122055:	68 e0 06 00 00       	push   $0x6e0
f012205a:	68 76 a8 13 f0       	push   $0xf013a876
f012205f:	e8 42 e1 fd ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1536) panic("Wrong allocation: pages are not loaded successfully into memory");
f0122064:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0122067:	e8 52 a3 fe ff       	call   f010c3be <sys_calculate_free_frames>
f012206c:	29 c3                	sub    %eax,%ebx
f012206e:	89 d8                	mov    %ebx,%eax
f0122070:	3d 00 06 00 00       	cmp    $0x600,%eax
f0122075:	74 17                	je     f012208e <test_kfree_bestfirstfit+0x9f5>
f0122077:	83 ec 04             	sub    $0x4,%esp
f012207a:	68 f8 a8 13 f0       	push   $0xf013a8f8
f012207f:	68 e1 06 00 00       	push   $0x6e1
f0122084:	68 76 a8 13 f0       	push   $0xf013a876
f0122089:	e8 18 e1 fd ff       	call   f01001a6 <_panic>
		lastIndices[6] = (6*Mega-kilo)/sizeof(char) - 1;
f012208e:	c7 85 80 fe ff ff ff 	movl   $0x5ffbff,-0x180(%ebp)
f0122095:	fb 5f 00 

		//14 KB
		freeFrames = sys_calculate_free_frames() ;
f0122098:	e8 21 a3 fe ff       	call   f010c3be <sys_calculate_free_frames>
f012209d:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01220a0:	e8 e7 1b fe ff       	call   f0103c8c <pf_calculate_free_frames>
f01220a5:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[7] = kmalloc(14*kilo);
f01220a8:	83 ec 0c             	sub    $0xc,%esp
f01220ab:	68 00 38 00 00       	push   $0x3800
f01220b0:	e8 0f 55 fe ff       	call   f01075c4 <kmalloc>
f01220b5:	83 c4 10             	add    $0x10,%esp
f01220b8:	89 85 e4 fd ff ff    	mov    %eax,-0x21c(%ebp)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 13*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01220be:	8b 85 e4 fd ff ff    	mov    -0x21c(%ebp),%eax
f01220c4:	89 c1                	mov    %eax,%ecx
f01220c6:	c7 85 1c ff ff ff 00 	movl   $0x1000,-0xe4(%ebp)
f01220cd:	10 00 00 
f01220d0:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f01220d6:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01220db:	89 85 18 ff ff ff    	mov    %eax,-0xe8(%ebp)
f01220e1:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f01220e7:	ba 00 00 00 00       	mov    $0x0,%edx
f01220ec:	f7 b5 1c ff ff ff    	divl   -0xe4(%ebp)
f01220f2:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f01220f8:	29 d0                	sub    %edx,%eax
f01220fa:	89 c3                	mov    %eax,%ebx
f01220fc:	c7 85 14 ff ff ff 00 	movl   $0x1000,-0xec(%ebp)
f0122103:	10 00 00 
f0122106:	a0 bc 0e 6c f0       	mov    0xf06c0ebc,%al
f012210b:	0f b6 d0             	movzbl %al,%edx
f012210e:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f0122114:	01 d0                	add    %edx,%eax
f0122116:	48                   	dec    %eax
f0122117:	89 85 10 ff ff ff    	mov    %eax,-0xf0(%ebp)
f012211d:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f0122123:	ba 00 00 00 00       	mov    $0x0,%edx
f0122128:	f7 b5 14 ff ff ff    	divl   -0xec(%ebp)
f012212e:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f0122134:	29 d0                	sub    %edx,%eax
f0122136:	01 c3                	add    %eax,%ebx
f0122138:	c7 85 0c ff ff ff 00 	movl   $0x1000,-0xf4(%ebp)
f012213f:	10 00 00 
f0122142:	a0 bc 0e 6c f0       	mov    0xf06c0ebc,%al
f0122147:	0f b6 c0             	movzbl %al,%eax
f012214a:	c1 e0 04             	shl    $0x4,%eax
f012214d:	89 c2                	mov    %eax,%edx
f012214f:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f0122155:	01 d0                	add    %edx,%eax
f0122157:	48                   	dec    %eax
f0122158:	89 85 08 ff ff ff    	mov    %eax,-0xf8(%ebp)
f012215e:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f0122164:	ba 00 00 00 00       	mov    $0x0,%edx
f0122169:	f7 b5 0c ff ff ff    	divl   -0xf4(%ebp)
f012216f:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f0122175:	29 d0                	sub    %edx,%eax
f0122177:	01 d8                	add    %ebx,%eax
f0122179:	2d 00 80 2f 09       	sub    $0x92f8000,%eax
f012217e:	39 c1                	cmp    %eax,%ecx
f0122180:	74 17                	je     f0122199 <test_kfree_bestfirstfit+0xb00>
f0122182:	83 ec 04             	sub    $0x4,%esp
f0122185:	68 5c a9 13 f0       	push   $0xf013a95c
f012218a:	68 e8 06 00 00       	push   $0x6e8
f012218f:	68 76 a8 13 f0       	push   $0xf013a876
f0122194:	e8 0d e0 fd ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0122199:	e8 ee 1a fe ff       	call   f0103c8c <pf_calculate_free_frames>
f012219e:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f01221a1:	74 17                	je     f01221ba <test_kfree_bestfirstfit+0xb21>
f01221a3:	83 ec 04             	sub    $0x4,%esp
f01221a6:	68 90 a8 13 f0       	push   $0xf013a890
f01221ab:	68 e9 06 00 00       	push   $0x6e9
f01221b0:	68 76 a8 13 f0       	push   $0xf013a876
f01221b5:	e8 ec df fd ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 4) panic("Wrong allocation: pages are not loaded successfully into memory");
f01221ba:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f01221bd:	e8 fc a1 fe ff       	call   f010c3be <sys_calculate_free_frames>
f01221c2:	29 c3                	sub    %eax,%ebx
f01221c4:	89 d8                	mov    %ebx,%eax
f01221c6:	83 f8 04             	cmp    $0x4,%eax
f01221c9:	74 17                	je     f01221e2 <test_kfree_bestfirstfit+0xb49>
f01221cb:	83 ec 04             	sub    $0x4,%esp
f01221ce:	68 f8 a8 13 f0       	push   $0xf013a8f8
f01221d3:	68 ea 06 00 00       	push   $0x6ea
f01221d8:	68 76 a8 13 f0       	push   $0xf013a876
f01221dd:	e8 c4 df fd ff       	call   f01001a6 <_panic>
		lastIndices[7] = (14*kilo)/sizeof(char) - 1;
f01221e2:	c7 85 84 fe ff ff ff 	movl   $0x37ff,-0x17c(%ebp)
f01221e9:	37 00 00 
		ptr = (char*)ptr_allocations[7];
f01221ec:	8b 85 e4 fd ff ff    	mov    -0x21c(%ebp),%eax
f01221f2:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[7]; ++i)
f01221f5:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01221fc:	eb 0e                	jmp    f012220c <test_kfree_bestfirstfit+0xb73>
		{
			ptr[i] = 7 ;
f01221fe:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0122201:	8b 45 80             	mov    -0x80(%ebp),%eax
f0122204:	01 d0                	add    %edx,%eax
f0122206:	c6 00 07             	movb   $0x7,(%eax)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 13*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 4) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[7] = (14*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[7];
		for (i = 0; i < lastIndices[7]; ++i)
f0122209:	ff 45 f4             	incl   -0xc(%ebp)
f012220c:	8b 85 84 fe ff ff    	mov    -0x17c(%ebp),%eax
f0122212:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0122215:	7f e7                	jg     f01221fe <test_kfree_bestfirstfit+0xb65>
	}

	//kfree some of the allocated spaces [15%]
	{
		//kfree 1st 2 MB
		int freeFrames = sys_calculate_free_frames() ;
f0122217:	e8 a2 a1 fe ff       	call   f010c3be <sys_calculate_free_frames>
f012221c:	89 85 04 ff ff ff    	mov    %eax,-0xfc(%ebp)
		int freeDiskFrames = pf_calculate_free_frames() ;
f0122222:	e8 65 1a fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0122227:	89 85 00 ff ff ff    	mov    %eax,-0x100(%ebp)
		kfree(ptr_allocations[0]);
f012222d:	8b 85 c8 fd ff ff    	mov    -0x238(%ebp),%eax
f0122233:	83 ec 0c             	sub    $0xc,%esp
f0122236:	50                   	push   %eax
f0122237:	e8 a2 53 fe ff       	call   f01075de <kfree>
f012223c:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012223f:	e8 48 1a fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0122244:	3b 85 00 ff ff ff    	cmp    -0x100(%ebp),%eax
f012224a:	74 17                	je     f0122263 <test_kfree_bestfirstfit+0xbca>
f012224c:	83 ec 04             	sub    $0x4,%esp
f012224f:	68 90 a8 13 f0       	push   $0xf013a890
f0122254:	68 f9 06 00 00       	push   $0x6f9
f0122259:	68 76 a8 13 f0       	push   $0xf013a876
f012225e:	e8 43 df fd ff       	call   f01001a6 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512 ) panic("Wrong kfree: pages in memory are not freed correctly");
f0122263:	e8 56 a1 fe ff       	call   f010c3be <sys_calculate_free_frames>
f0122268:	89 c2                	mov    %eax,%edx
f012226a:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f0122270:	29 c2                	sub    %eax,%edx
f0122272:	89 d0                	mov    %edx,%eax
f0122274:	3d 00 02 00 00       	cmp    $0x200,%eax
f0122279:	74 17                	je     f0122292 <test_kfree_bestfirstfit+0xbf9>
f012227b:	83 ec 04             	sub    $0x4,%esp
f012227e:	68 00 b0 13 f0       	push   $0xf013b000
f0122283:	68 fa 06 00 00       	push   $0x6fa
f0122288:	68 76 a8 13 f0       	push   $0xf013a876
f012228d:	e8 14 df fd ff       	call   f01001a6 <_panic>

		//kfree 1st 2 KB
		freeFrames = sys_calculate_free_frames() ;
f0122292:	e8 27 a1 fe ff       	call   f010c3be <sys_calculate_free_frames>
f0122297:	89 85 04 ff ff ff    	mov    %eax,-0xfc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012229d:	e8 ea 19 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f01222a2:	89 85 00 ff ff ff    	mov    %eax,-0x100(%ebp)
		kfree(ptr_allocations[2]);
f01222a8:	8b 85 d0 fd ff ff    	mov    -0x230(%ebp),%eax
f01222ae:	83 ec 0c             	sub    $0xc,%esp
f01222b1:	50                   	push   %eax
f01222b2:	e8 27 53 fe ff       	call   f01075de <kfree>
f01222b7:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01222ba:	e8 cd 19 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f01222bf:	3b 85 00 ff ff ff    	cmp    -0x100(%ebp),%eax
f01222c5:	74 17                	je     f01222de <test_kfree_bestfirstfit+0xc45>
f01222c7:	83 ec 04             	sub    $0x4,%esp
f01222ca:	68 90 a8 13 f0       	push   $0xf013a890
f01222cf:	68 00 07 00 00       	push   $0x700
f01222d4:	68 76 a8 13 f0       	push   $0xf013a876
f01222d9:	e8 c8 de fd ff       	call   f01001a6 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 1 ) panic("Wrong kfree: pages in memory are not freed correctly");
f01222de:	e8 db a0 fe ff       	call   f010c3be <sys_calculate_free_frames>
f01222e3:	89 c2                	mov    %eax,%edx
f01222e5:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f01222eb:	29 c2                	sub    %eax,%edx
f01222ed:	89 d0                	mov    %edx,%eax
f01222ef:	83 f8 01             	cmp    $0x1,%eax
f01222f2:	74 17                	je     f012230b <test_kfree_bestfirstfit+0xc72>
f01222f4:	83 ec 04             	sub    $0x4,%esp
f01222f7:	68 00 b0 13 f0       	push   $0xf013b000
f01222fc:	68 01 07 00 00       	push   $0x701
f0122301:	68 76 a8 13 f0       	push   $0xf013a876
f0122306:	e8 9b de fd ff       	call   f01001a6 <_panic>

		//kfree 2nd 2 MB
		freeFrames = sys_calculate_free_frames() ;
f012230b:	e8 ae a0 fe ff       	call   f010c3be <sys_calculate_free_frames>
f0122310:	89 85 04 ff ff ff    	mov    %eax,-0xfc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0122316:	e8 71 19 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f012231b:	89 85 00 ff ff ff    	mov    %eax,-0x100(%ebp)
		kfree(ptr_allocations[1]);
f0122321:	8b 85 cc fd ff ff    	mov    -0x234(%ebp),%eax
f0122327:	83 ec 0c             	sub    $0xc,%esp
f012232a:	50                   	push   %eax
f012232b:	e8 ae 52 fe ff       	call   f01075de <kfree>
f0122330:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0122333:	e8 54 19 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0122338:	3b 85 00 ff ff ff    	cmp    -0x100(%ebp),%eax
f012233e:	74 17                	je     f0122357 <test_kfree_bestfirstfit+0xcbe>
f0122340:	83 ec 04             	sub    $0x4,%esp
f0122343:	68 90 a8 13 f0       	push   $0xf013a890
f0122348:	68 07 07 00 00       	push   $0x707
f012234d:	68 76 a8 13 f0       	push   $0xf013a876
f0122352:	e8 4f de fd ff       	call   f01001a6 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512) panic("Wrong kfree: pages in memory are not freed correctly");
f0122357:	e8 62 a0 fe ff       	call   f010c3be <sys_calculate_free_frames>
f012235c:	89 c2                	mov    %eax,%edx
f012235e:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f0122364:	29 c2                	sub    %eax,%edx
f0122366:	89 d0                	mov    %edx,%eax
f0122368:	3d 00 02 00 00       	cmp    $0x200,%eax
f012236d:	74 17                	je     f0122386 <test_kfree_bestfirstfit+0xced>
f012236f:	83 ec 04             	sub    $0x4,%esp
f0122372:	68 00 b0 13 f0       	push   $0xf013b000
f0122377:	68 08 07 00 00       	push   $0x708
f012237c:	68 76 a8 13 f0       	push   $0xf013a876
f0122381:	e8 20 de fd ff       	call   f01001a6 <_panic>

		//kfree 6 MB
		freeFrames = sys_calculate_free_frames() ;
f0122386:	e8 33 a0 fe ff       	call   f010c3be <sys_calculate_free_frames>
f012238b:	89 85 04 ff ff ff    	mov    %eax,-0xfc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0122391:	e8 f6 18 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0122396:	89 85 00 ff ff ff    	mov    %eax,-0x100(%ebp)
		kfree(ptr_allocations[6]);
f012239c:	8b 85 e0 fd ff ff    	mov    -0x220(%ebp),%eax
f01223a2:	83 ec 0c             	sub    $0xc,%esp
f01223a5:	50                   	push   %eax
f01223a6:	e8 33 52 fe ff       	call   f01075de <kfree>
f01223ab:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01223ae:	e8 d9 18 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f01223b3:	3b 85 00 ff ff ff    	cmp    -0x100(%ebp),%eax
f01223b9:	74 17                	je     f01223d2 <test_kfree_bestfirstfit+0xd39>
f01223bb:	83 ec 04             	sub    $0x4,%esp
f01223be:	68 90 a8 13 f0       	push   $0xf013a890
f01223c3:	68 0e 07 00 00       	push   $0x70e
f01223c8:	68 76 a8 13 f0       	push   $0xf013a876
f01223cd:	e8 d4 dd fd ff       	call   f01001a6 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 6*Mega/4096) panic("Wrong kfree: pages in memory are not freed correctly");
f01223d2:	e8 e7 9f fe ff       	call   f010c3be <sys_calculate_free_frames>
f01223d7:	89 c2                	mov    %eax,%edx
f01223d9:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f01223df:	29 c2                	sub    %eax,%edx
f01223e1:	89 d0                	mov    %edx,%eax
f01223e3:	3d 00 06 00 00       	cmp    $0x600,%eax
f01223e8:	74 17                	je     f0122401 <test_kfree_bestfirstfit+0xd68>
f01223ea:	83 ec 04             	sub    $0x4,%esp
f01223ed:	68 00 b0 13 f0       	push   $0xf013b000
f01223f2:	68 0f 07 00 00       	push   $0x70f
f01223f7:	68 76 a8 13 f0       	push   $0xf013a876
f01223fc:	e8 a5 dd fd ff       	call   f01001a6 <_panic>
	}

	cprintf("\nkfree: current evaluation = 15%");
f0122401:	83 ec 0c             	sub    $0xc,%esp
f0122404:	68 38 b0 13 f0       	push   $0xf013b038
f0122409:	e8 1f e8 fd ff       	call   f0100c2d <cprintf>
f012240e:	83 c4 10             	add    $0x10,%esp

	//Check memory access after kfree [15%]
	{
		//2 KB
		ptr = (char*)ptr_allocations[3];
f0122411:	8b 85 d4 fd ff ff    	mov    -0x22c(%ebp),%eax
f0122417:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[3]; ++i)
f012241a:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0122421:	eb 1e                	jmp    f0122441 <test_kfree_bestfirstfit+0xda8>
		{
			sums[3] += ptr[i] ;
f0122423:	8b 95 24 fe ff ff    	mov    -0x1dc(%ebp),%edx
f0122429:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f012242c:	8b 45 80             	mov    -0x80(%ebp),%eax
f012242f:	01 c8                	add    %ecx,%eax
f0122431:	8a 00                	mov    (%eax),%al
f0122433:	0f be c0             	movsbl %al,%eax
f0122436:	01 d0                	add    %edx,%eax
f0122438:	89 85 24 fe ff ff    	mov    %eax,-0x1dc(%ebp)

	//Check memory access after kfree [15%]
	{
		//2 KB
		ptr = (char*)ptr_allocations[3];
		for (i = 0; i < lastIndices[3]; ++i)
f012243e:	ff 45 f4             	incl   -0xc(%ebp)
f0122441:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f0122447:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012244a:	7f d7                	jg     f0122423 <test_kfree_bestfirstfit+0xd8a>
		{
			sums[3] += ptr[i] ;
		}
		if (sums[3] != 3*lastIndices[3])	panic("kfree: invalid read after freeing some allocations");
f012244c:	8b 95 24 fe ff ff    	mov    -0x1dc(%ebp),%edx
f0122452:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f0122458:	89 c1                	mov    %eax,%ecx
f012245a:	01 c9                	add    %ecx,%ecx
f012245c:	01 c8                	add    %ecx,%eax
f012245e:	39 c2                	cmp    %eax,%edx
f0122460:	74 17                	je     f0122479 <test_kfree_bestfirstfit+0xde0>
f0122462:	83 ec 04             	sub    $0x4,%esp
f0122465:	68 5c b0 13 f0       	push   $0xf013b05c
f012246a:	68 1c 07 00 00       	push   $0x71c
f012246f:	68 76 a8 13 f0       	push   $0xf013a876
f0122474:	e8 2d dd fd ff       	call   f01001a6 <_panic>

		//7 KB
		ptr = (char*)ptr_allocations[4];
f0122479:	8b 85 d8 fd ff ff    	mov    -0x228(%ebp),%eax
f012247f:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[4]; ++i)
f0122482:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0122489:	eb 1e                	jmp    f01224a9 <test_kfree_bestfirstfit+0xe10>
		{
			sums[4] += ptr[i] ;
f012248b:	8b 95 28 fe ff ff    	mov    -0x1d8(%ebp),%edx
f0122491:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0122494:	8b 45 80             	mov    -0x80(%ebp),%eax
f0122497:	01 c8                	add    %ecx,%eax
f0122499:	8a 00                	mov    (%eax),%al
f012249b:	0f be c0             	movsbl %al,%eax
f012249e:	01 d0                	add    %edx,%eax
f01224a0:	89 85 28 fe ff ff    	mov    %eax,-0x1d8(%ebp)
		}
		if (sums[3] != 3*lastIndices[3])	panic("kfree: invalid read after freeing some allocations");

		//7 KB
		ptr = (char*)ptr_allocations[4];
		for (i = 0; i < lastIndices[4]; ++i)
f01224a6:	ff 45 f4             	incl   -0xc(%ebp)
f01224a9:	8b 85 78 fe ff ff    	mov    -0x188(%ebp),%eax
f01224af:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01224b2:	7f d7                	jg     f012248b <test_kfree_bestfirstfit+0xdf2>
		{
			sums[4] += ptr[i] ;
		}
		if (sums[4] != 4*lastIndices[4])	panic("kfree: invalid read after freeing some allocations");
f01224b4:	8b 85 28 fe ff ff    	mov    -0x1d8(%ebp),%eax
f01224ba:	8b 95 78 fe ff ff    	mov    -0x188(%ebp),%edx
f01224c0:	c1 e2 02             	shl    $0x2,%edx
f01224c3:	39 d0                	cmp    %edx,%eax
f01224c5:	74 17                	je     f01224de <test_kfree_bestfirstfit+0xe45>
f01224c7:	83 ec 04             	sub    $0x4,%esp
f01224ca:	68 5c b0 13 f0       	push   $0xf013b05c
f01224cf:	68 24 07 00 00       	push   $0x724
f01224d4:	68 76 a8 13 f0       	push   $0xf013a876
f01224d9:	e8 c8 dc fd ff       	call   f01001a6 <_panic>

		//3 MB
		ptr = (char*)ptr_allocations[5];
f01224de:	8b 85 dc fd ff ff    	mov    -0x224(%ebp),%eax
f01224e4:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[5]; ++i)
f01224e7:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01224ee:	eb 1e                	jmp    f012250e <test_kfree_bestfirstfit+0xe75>
		{
			sums[5] += ptr[i] ;
f01224f0:	8b 95 2c fe ff ff    	mov    -0x1d4(%ebp),%edx
f01224f6:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f01224f9:	8b 45 80             	mov    -0x80(%ebp),%eax
f01224fc:	01 c8                	add    %ecx,%eax
f01224fe:	8a 00                	mov    (%eax),%al
f0122500:	0f be c0             	movsbl %al,%eax
f0122503:	01 d0                	add    %edx,%eax
f0122505:	89 85 2c fe ff ff    	mov    %eax,-0x1d4(%ebp)
		}
		if (sums[4] != 4*lastIndices[4])	panic("kfree: invalid read after freeing some allocations");

		//3 MB
		ptr = (char*)ptr_allocations[5];
		for (i = 0; i < lastIndices[5]; ++i)
f012250b:	ff 45 f4             	incl   -0xc(%ebp)
f012250e:	8b 85 7c fe ff ff    	mov    -0x184(%ebp),%eax
f0122514:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0122517:	7f d7                	jg     f01224f0 <test_kfree_bestfirstfit+0xe57>
		{
			sums[5] += ptr[i] ;
		}
		if (sums[5] != 5*lastIndices[5])	panic("kfree: invalid read after freeing some allocations");
f0122519:	8b 8d 2c fe ff ff    	mov    -0x1d4(%ebp),%ecx
f012251f:	8b 95 7c fe ff ff    	mov    -0x184(%ebp),%edx
f0122525:	89 d0                	mov    %edx,%eax
f0122527:	c1 e0 02             	shl    $0x2,%eax
f012252a:	01 d0                	add    %edx,%eax
f012252c:	39 c1                	cmp    %eax,%ecx
f012252e:	74 17                	je     f0122547 <test_kfree_bestfirstfit+0xeae>
f0122530:	83 ec 04             	sub    $0x4,%esp
f0122533:	68 5c b0 13 f0       	push   $0xf013b05c
f0122538:	68 2c 07 00 00       	push   $0x72c
f012253d:	68 76 a8 13 f0       	push   $0xf013a876
f0122542:	e8 5f dc fd ff       	call   f01001a6 <_panic>

		//14 KB
		ptr = (char*)ptr_allocations[7];
f0122547:	8b 85 e4 fd ff ff    	mov    -0x21c(%ebp),%eax
f012254d:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[7]; ++i)
f0122550:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0122557:	eb 1e                	jmp    f0122577 <test_kfree_bestfirstfit+0xede>
		{
			sums[7] += ptr[i] ;
f0122559:	8b 95 34 fe ff ff    	mov    -0x1cc(%ebp),%edx
f012255f:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0122562:	8b 45 80             	mov    -0x80(%ebp),%eax
f0122565:	01 c8                	add    %ecx,%eax
f0122567:	8a 00                	mov    (%eax),%al
f0122569:	0f be c0             	movsbl %al,%eax
f012256c:	01 d0                	add    %edx,%eax
f012256e:	89 85 34 fe ff ff    	mov    %eax,-0x1cc(%ebp)
		}
		if (sums[5] != 5*lastIndices[5])	panic("kfree: invalid read after freeing some allocations");

		//14 KB
		ptr = (char*)ptr_allocations[7];
		for (i = 0; i < lastIndices[7]; ++i)
f0122574:	ff 45 f4             	incl   -0xc(%ebp)
f0122577:	8b 85 84 fe ff ff    	mov    -0x17c(%ebp),%eax
f012257d:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0122580:	7f d7                	jg     f0122559 <test_kfree_bestfirstfit+0xec0>
		{
			sums[7] += ptr[i] ;
		}
		if (sums[7] != 7*lastIndices[7])	panic("kfree: invalid read after freeing some allocations");
f0122582:	8b 8d 34 fe ff ff    	mov    -0x1cc(%ebp),%ecx
f0122588:	8b 95 84 fe ff ff    	mov    -0x17c(%ebp),%edx
f012258e:	89 d0                	mov    %edx,%eax
f0122590:	01 c0                	add    %eax,%eax
f0122592:	01 d0                	add    %edx,%eax
f0122594:	01 c0                	add    %eax,%eax
f0122596:	01 d0                	add    %edx,%eax
f0122598:	39 c1                	cmp    %eax,%ecx
f012259a:	74 17                	je     f01225b3 <test_kfree_bestfirstfit+0xf1a>
f012259c:	83 ec 04             	sub    $0x4,%esp
f012259f:	68 5c b0 13 f0       	push   $0xf013b05c
f01225a4:	68 34 07 00 00       	push   $0x734
f01225a9:	68 76 a8 13 f0       	push   $0xf013a876
f01225ae:	e8 f3 db fd ff       	call   f01001a6 <_panic>
	}
	cprintf("\b\b\b30%");
f01225b3:	83 ec 0c             	sub    $0xc,%esp
f01225b6:	68 8f b0 13 f0       	push   $0xf013b08f
f01225bb:	e8 6d e6 fd ff       	call   f0100c2d <cprintf>
f01225c0:	83 c4 10             	add    $0x10,%esp

	//Allocate after kfree [15%]
	{
		//Allocate in merged freed space
		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f01225c3:	e8 f6 9d fe ff       	call   f010c3be <sys_calculate_free_frames>
f01225c8:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01225cb:	e8 bc 16 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f01225d0:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[8] = kmalloc(3*Mega);
f01225d3:	83 ec 0c             	sub    $0xc,%esp
f01225d6:	68 00 00 30 00       	push   $0x300000
f01225db:	e8 e4 4f fe ff       	call   f01075c4 <kmalloc>
f01225e0:	83 c4 10             	add    $0x10,%esp
f01225e3:	89 85 e8 fd ff ff    	mov    %eax,-0x218(%ebp)
		if ((uint32) ptr_allocations[8] != (ACTUAL_START)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01225e9:	8b 85 e8 fd ff ff    	mov    -0x218(%ebp),%eax
f01225ef:	89 c1                	mov    %eax,%ecx
f01225f1:	c7 85 fc fe ff ff 00 	movl   $0x1000,-0x104(%ebp)
f01225f8:	10 00 00 
f01225fb:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f0122601:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0122606:	89 85 f8 fe ff ff    	mov    %eax,-0x108(%ebp)
f012260c:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f0122612:	ba 00 00 00 00       	mov    $0x0,%edx
f0122617:	f7 b5 fc fe ff ff    	divl   -0x104(%ebp)
f012261d:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f0122623:	29 d0                	sub    %edx,%eax
f0122625:	89 c3                	mov    %eax,%ebx
f0122627:	c7 85 f4 fe ff ff 00 	movl   $0x1000,-0x10c(%ebp)
f012262e:	10 00 00 
f0122631:	a0 bc 0e 6c f0       	mov    0xf06c0ebc,%al
f0122636:	0f b6 d0             	movzbl %al,%edx
f0122639:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f012263f:	01 d0                	add    %edx,%eax
f0122641:	48                   	dec    %eax
f0122642:	89 85 f0 fe ff ff    	mov    %eax,-0x110(%ebp)
f0122648:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f012264e:	ba 00 00 00 00       	mov    $0x0,%edx
f0122653:	f7 b5 f4 fe ff ff    	divl   -0x10c(%ebp)
f0122659:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f012265f:	29 d0                	sub    %edx,%eax
f0122661:	01 c3                	add    %eax,%ebx
f0122663:	c7 85 ec fe ff ff 00 	movl   $0x1000,-0x114(%ebp)
f012266a:	10 00 00 
f012266d:	a0 bc 0e 6c f0       	mov    0xf06c0ebc,%al
f0122672:	0f b6 c0             	movzbl %al,%eax
f0122675:	c1 e0 04             	shl    $0x4,%eax
f0122678:	89 c2                	mov    %eax,%edx
f012267a:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f0122680:	01 d0                	add    %edx,%eax
f0122682:	48                   	dec    %eax
f0122683:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)
f0122689:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f012268f:	ba 00 00 00 00       	mov    $0x0,%edx
f0122694:	f7 b5 ec fe ff ff    	divl   -0x114(%ebp)
f012269a:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f01226a0:	29 d0                	sub    %edx,%eax
f01226a2:	01 d8                	add    %ebx,%eax
f01226a4:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f01226a9:	39 c1                	cmp    %eax,%ecx
f01226ab:	74 17                	je     f01226c4 <test_kfree_bestfirstfit+0x102b>
f01226ad:	83 ec 04             	sub    $0x4,%esp
f01226b0:	68 5c a9 13 f0       	push   $0xf013a95c
f01226b5:	68 3f 07 00 00       	push   $0x73f
f01226ba:	68 76 a8 13 f0       	push   $0xf013a876
f01226bf:	e8 e2 da fd ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01226c4:	e8 c3 15 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f01226c9:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f01226cc:	74 17                	je     f01226e5 <test_kfree_bestfirstfit+0x104c>
f01226ce:	83 ec 04             	sub    $0x4,%esp
f01226d1:	68 90 a8 13 f0       	push   $0xf013a890
f01226d6:	68 40 07 00 00       	push   $0x740
f01226db:	68 76 a8 13 f0       	push   $0xf013a876
f01226e0:	e8 c1 da fd ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
f01226e5:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f01226e8:	e8 d1 9c fe ff       	call   f010c3be <sys_calculate_free_frames>
f01226ed:	29 c3                	sub    %eax,%ebx
f01226ef:	89 d8                	mov    %ebx,%eax
f01226f1:	3d 00 03 00 00       	cmp    $0x300,%eax
f01226f6:	74 17                	je     f012270f <test_kfree_bestfirstfit+0x1076>
f01226f8:	83 ec 04             	sub    $0x4,%esp
f01226fb:	68 f8 a8 13 f0       	push   $0xf013a8f8
f0122700:	68 41 07 00 00       	push   $0x741
f0122705:	68 76 a8 13 f0       	push   $0xf013a876
f012270a:	e8 97 da fd ff       	call   f01001a6 <_panic>
		lastIndices[8] = (3*Mega)/sizeof(char) - 1;
f012270f:	c7 85 88 fe ff ff ff 	movl   $0x2fffff,-0x178(%ebp)
f0122716:	ff 2f 00 
		ptr = (char*)ptr_allocations[8];
f0122719:	8b 85 e8 fd ff ff    	mov    -0x218(%ebp),%eax
f012271f:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[8]; ++i)
f0122722:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0122729:	eb 0e                	jmp    f0122739 <test_kfree_bestfirstfit+0x10a0>
		{
			ptr[i] = 8 ;
f012272b:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012272e:	8b 45 80             	mov    -0x80(%ebp),%eax
f0122731:	01 d0                	add    %edx,%eax
f0122733:	c6 00 08             	movb   $0x8,(%eax)
		if ((uint32) ptr_allocations[8] != (ACTUAL_START)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[8] = (3*Mega)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[8];
		for (i = 0; i < lastIndices[8]; ++i)
f0122736:	ff 45 f4             	incl   -0xc(%ebp)
f0122739:	8b 85 88 fe ff ff    	mov    -0x178(%ebp),%eax
f012273f:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0122742:	7f e7                	jg     f012272b <test_kfree_bestfirstfit+0x1092>
		{
			ptr[i] = 8 ;
		}

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f0122744:	e8 75 9c fe ff       	call   f010c3be <sys_calculate_free_frames>
f0122749:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012274c:	e8 3b 15 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0122751:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[9] = kmalloc(2*kilo);
f0122754:	83 ec 0c             	sub    $0xc,%esp
f0122757:	68 00 08 00 00       	push   $0x800
f012275c:	e8 63 4e fe ff       	call   f01075c4 <kmalloc>
f0122761:	83 c4 10             	add    $0x10,%esp
f0122764:	89 85 ec fd ff ff    	mov    %eax,-0x214(%ebp)
		if ((uint32) ptr_allocations[9] != (ACTUAL_START + 3*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f012276a:	8b 85 ec fd ff ff    	mov    -0x214(%ebp),%eax
f0122770:	89 c1                	mov    %eax,%ecx
f0122772:	c7 85 e4 fe ff ff 00 	movl   $0x1000,-0x11c(%ebp)
f0122779:	10 00 00 
f012277c:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f0122782:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0122787:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
f012278d:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f0122793:	ba 00 00 00 00       	mov    $0x0,%edx
f0122798:	f7 b5 e4 fe ff ff    	divl   -0x11c(%ebp)
f012279e:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f01227a4:	29 d0                	sub    %edx,%eax
f01227a6:	89 c3                	mov    %eax,%ebx
f01227a8:	c7 85 dc fe ff ff 00 	movl   $0x1000,-0x124(%ebp)
f01227af:	10 00 00 
f01227b2:	a0 bc 0e 6c f0       	mov    0xf06c0ebc,%al
f01227b7:	0f b6 d0             	movzbl %al,%edx
f01227ba:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f01227c0:	01 d0                	add    %edx,%eax
f01227c2:	48                   	dec    %eax
f01227c3:	89 85 d8 fe ff ff    	mov    %eax,-0x128(%ebp)
f01227c9:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f01227cf:	ba 00 00 00 00       	mov    $0x0,%edx
f01227d4:	f7 b5 dc fe ff ff    	divl   -0x124(%ebp)
f01227da:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f01227e0:	29 d0                	sub    %edx,%eax
f01227e2:	01 c3                	add    %eax,%ebx
f01227e4:	c7 85 d4 fe ff ff 00 	movl   $0x1000,-0x12c(%ebp)
f01227eb:	10 00 00 
f01227ee:	a0 bc 0e 6c f0       	mov    0xf06c0ebc,%al
f01227f3:	0f b6 c0             	movzbl %al,%eax
f01227f6:	c1 e0 04             	shl    $0x4,%eax
f01227f9:	89 c2                	mov    %eax,%edx
f01227fb:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f0122801:	01 d0                	add    %edx,%eax
f0122803:	48                   	dec    %eax
f0122804:	89 85 d0 fe ff ff    	mov    %eax,-0x130(%ebp)
f012280a:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f0122810:	ba 00 00 00 00       	mov    $0x0,%edx
f0122815:	f7 b5 d4 fe ff ff    	divl   -0x12c(%ebp)
f012281b:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f0122821:	29 d0                	sub    %edx,%eax
f0122823:	01 d8                	add    %ebx,%eax
f0122825:	2d 00 c0 cf 09       	sub    $0x9cfc000,%eax
f012282a:	39 c1                	cmp    %eax,%ecx
f012282c:	74 17                	je     f0122845 <test_kfree_bestfirstfit+0x11ac>
f012282e:	83 ec 04             	sub    $0x4,%esp
f0122831:	68 5c a9 13 f0       	push   $0xf013a95c
f0122836:	68 4d 07 00 00       	push   $0x74d
f012283b:	68 76 a8 13 f0       	push   $0xf013a876
f0122840:	e8 61 d9 fd ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0122845:	e8 42 14 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f012284a:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f012284d:	74 17                	je     f0122866 <test_kfree_bestfirstfit+0x11cd>
f012284f:	83 ec 04             	sub    $0x4,%esp
f0122852:	68 90 a8 13 f0       	push   $0xf013a890
f0122857:	68 4e 07 00 00       	push   $0x74e
f012285c:	68 76 a8 13 f0       	push   $0xf013a876
f0122861:	e8 40 d9 fd ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f0122866:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0122869:	e8 50 9b fe ff       	call   f010c3be <sys_calculate_free_frames>
f012286e:	29 c3                	sub    %eax,%ebx
f0122870:	89 d8                	mov    %ebx,%eax
f0122872:	83 f8 01             	cmp    $0x1,%eax
f0122875:	74 17                	je     f012288e <test_kfree_bestfirstfit+0x11f5>
f0122877:	83 ec 04             	sub    $0x4,%esp
f012287a:	68 f8 a8 13 f0       	push   $0xf013a8f8
f012287f:	68 4f 07 00 00       	push   $0x74f
f0122884:	68 76 a8 13 f0       	push   $0xf013a876
f0122889:	e8 18 d9 fd ff       	call   f01001a6 <_panic>
		lastIndices[9] = (2*kilo)/sizeof(char) - 1;
f012288e:	c7 85 8c fe ff ff ff 	movl   $0x7ff,-0x174(%ebp)
f0122895:	07 00 00 
		ptr = (char*)ptr_allocations[9];
f0122898:	8b 85 ec fd ff ff    	mov    -0x214(%ebp),%eax
f012289e:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[9]; ++i)
f01228a1:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01228a8:	eb 0e                	jmp    f01228b8 <test_kfree_bestfirstfit+0x121f>
		{
			ptr[i] = 9 ;
f01228aa:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01228ad:	8b 45 80             	mov    -0x80(%ebp),%eax
f01228b0:	01 d0                	add    %edx,%eax
f01228b2:	c6 00 09             	movb   $0x9,(%eax)
		if ((uint32) ptr_allocations[9] != (ACTUAL_START + 3*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[9] = (2*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[9];
		for (i = 0; i < lastIndices[9]; ++i)
f01228b5:	ff 45 f4             	incl   -0xc(%ebp)
f01228b8:	8b 85 8c fe ff ff    	mov    -0x174(%ebp),%eax
f01228be:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01228c1:	7f e7                	jg     f01228aa <test_kfree_bestfirstfit+0x1211>
		{
			ptr[i] = 9 ;
		}

		//1 MB
		freeFrames = sys_calculate_free_frames() ;
f01228c3:	e8 f6 9a fe ff       	call   f010c3be <sys_calculate_free_frames>
f01228c8:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01228cb:	e8 bc 13 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f01228d0:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[10] = kmalloc(1*Mega);
f01228d3:	83 ec 0c             	sub    $0xc,%esp
f01228d6:	68 00 00 10 00       	push   $0x100000
f01228db:	e8 e4 4c fe ff       	call   f01075c4 <kmalloc>
f01228e0:	83 c4 10             	add    $0x10,%esp
f01228e3:	89 85 f0 fd ff ff    	mov    %eax,-0x210(%ebp)
		if ((uint32) ptr_allocations[10] != (ACTUAL_START + 3*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01228e9:	8b 85 f0 fd ff ff    	mov    -0x210(%ebp),%eax
f01228ef:	89 c1                	mov    %eax,%ecx
f01228f1:	c7 85 cc fe ff ff 00 	movl   $0x1000,-0x134(%ebp)
f01228f8:	10 00 00 
f01228fb:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f0122901:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0122906:	89 85 c8 fe ff ff    	mov    %eax,-0x138(%ebp)
f012290c:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f0122912:	ba 00 00 00 00       	mov    $0x0,%edx
f0122917:	f7 b5 cc fe ff ff    	divl   -0x134(%ebp)
f012291d:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f0122923:	29 d0                	sub    %edx,%eax
f0122925:	89 c3                	mov    %eax,%ebx
f0122927:	c7 85 c4 fe ff ff 00 	movl   $0x1000,-0x13c(%ebp)
f012292e:	10 00 00 
f0122931:	a0 bc 0e 6c f0       	mov    0xf06c0ebc,%al
f0122936:	0f b6 d0             	movzbl %al,%edx
f0122939:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f012293f:	01 d0                	add    %edx,%eax
f0122941:	48                   	dec    %eax
f0122942:	89 85 c0 fe ff ff    	mov    %eax,-0x140(%ebp)
f0122948:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f012294e:	ba 00 00 00 00       	mov    $0x0,%edx
f0122953:	f7 b5 c4 fe ff ff    	divl   -0x13c(%ebp)
f0122959:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f012295f:	29 d0                	sub    %edx,%eax
f0122961:	01 c3                	add    %eax,%ebx
f0122963:	c7 85 bc fe ff ff 00 	movl   $0x1000,-0x144(%ebp)
f012296a:	10 00 00 
f012296d:	a0 bc 0e 6c f0       	mov    0xf06c0ebc,%al
f0122972:	0f b6 c0             	movzbl %al,%eax
f0122975:	c1 e0 04             	shl    $0x4,%eax
f0122978:	89 c2                	mov    %eax,%edx
f012297a:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f0122980:	01 d0                	add    %edx,%eax
f0122982:	48                   	dec    %eax
f0122983:	89 85 b8 fe ff ff    	mov    %eax,-0x148(%ebp)
f0122989:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f012298f:	ba 00 00 00 00       	mov    $0x0,%edx
f0122994:	f7 b5 bc fe ff ff    	divl   -0x144(%ebp)
f012299a:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f01229a0:	29 d0                	sub    %edx,%eax
f01229a2:	01 d8                	add    %ebx,%eax
f01229a4:	2d 00 b0 cf 09       	sub    $0x9cfb000,%eax
f01229a9:	39 c1                	cmp    %eax,%ecx
f01229ab:	74 17                	je     f01229c4 <test_kfree_bestfirstfit+0x132b>
f01229ad:	83 ec 04             	sub    $0x4,%esp
f01229b0:	68 5c a9 13 f0       	push   $0xf013a95c
f01229b5:	68 5b 07 00 00       	push   $0x75b
f01229ba:	68 76 a8 13 f0       	push   $0xf013a876
f01229bf:	e8 e2 d7 fd ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01229c4:	e8 c3 12 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f01229c9:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f01229cc:	74 17                	je     f01229e5 <test_kfree_bestfirstfit+0x134c>
f01229ce:	83 ec 04             	sub    $0x4,%esp
f01229d1:	68 90 a8 13 f0       	push   $0xf013a890
f01229d6:	68 5c 07 00 00       	push   $0x75c
f01229db:	68 76 a8 13 f0       	push   $0xf013a876
f01229e0:	e8 c1 d7 fd ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: pages are not loaded successfully into memory");
f01229e5:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f01229e8:	e8 d1 99 fe ff       	call   f010c3be <sys_calculate_free_frames>
f01229ed:	29 c3                	sub    %eax,%ebx
f01229ef:	89 d8                	mov    %ebx,%eax
f01229f1:	3d 00 01 00 00       	cmp    $0x100,%eax
f01229f6:	74 17                	je     f0122a0f <test_kfree_bestfirstfit+0x1376>
f01229f8:	83 ec 04             	sub    $0x4,%esp
f01229fb:	68 f8 a8 13 f0       	push   $0xf013a8f8
f0122a00:	68 5d 07 00 00       	push   $0x75d
f0122a05:	68 76 a8 13 f0       	push   $0xf013a876
f0122a0a:	e8 97 d7 fd ff       	call   f01001a6 <_panic>
		lastIndices[10] = (1*Mega)/sizeof(char) - 1;
f0122a0f:	c7 85 90 fe ff ff ff 	movl   $0xfffff,-0x170(%ebp)
f0122a16:	ff 0f 00 
		ptr = (char*)ptr_allocations[10];
f0122a19:	8b 85 f0 fd ff ff    	mov    -0x210(%ebp),%eax
f0122a1f:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[10]; ++i)
f0122a22:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0122a29:	eb 0e                	jmp    f0122a39 <test_kfree_bestfirstfit+0x13a0>
		{
			ptr[i] = 10 ;
f0122a2b:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0122a2e:	8b 45 80             	mov    -0x80(%ebp),%eax
f0122a31:	01 d0                	add    %edx,%eax
f0122a33:	c6 00 0a             	movb   $0xa,(%eax)
		if ((uint32) ptr_allocations[10] != (ACTUAL_START + 3*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[10] = (1*Mega)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[10];
		for (i = 0; i < lastIndices[10]; ++i)
f0122a36:	ff 45 f4             	incl   -0xc(%ebp)
f0122a39:	8b 85 90 fe ff ff    	mov    -0x170(%ebp),%eax
f0122a3f:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0122a42:	7f e7                	jg     f0122a2b <test_kfree_bestfirstfit+0x1392>
		{
			ptr[i] = 10 ;
		}
	}
	cprintf("\b\b\b45%");
f0122a44:	83 ec 0c             	sub    $0xc,%esp
f0122a47:	68 96 b0 13 f0       	push   $0xf013b096
f0122a4c:	e8 dc e1 fd ff       	call   f0100c2d <cprintf>
f0122a51:	83 c4 10             	add    $0x10,%esp

	//kfree remaining allocated spaces [15%]
	{
		//kfree 7 KB
		freeFrames = sys_calculate_free_frames() ;
f0122a54:	e8 65 99 fe ff       	call   f010c3be <sys_calculate_free_frames>
f0122a59:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0122a5c:	e8 2b 12 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0122a61:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[4]);
f0122a64:	8b 85 d8 fd ff ff    	mov    -0x228(%ebp),%eax
f0122a6a:	83 ec 0c             	sub    $0xc,%esp
f0122a6d:	50                   	push   %eax
f0122a6e:	e8 6b 4b fe ff       	call   f01075de <kfree>
f0122a73:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0122a76:	e8 11 12 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0122a7b:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0122a7e:	74 17                	je     f0122a97 <test_kfree_bestfirstfit+0x13fe>
f0122a80:	83 ec 04             	sub    $0x4,%esp
f0122a83:	68 90 a8 13 f0       	push   $0xf013a890
f0122a88:	68 6d 07 00 00       	push   $0x76d
f0122a8d:	68 76 a8 13 f0       	push   $0xf013a876
f0122a92:	e8 0f d7 fd ff       	call   f01001a6 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 2) panic("Wrong kfree: pages in memory are not freed correctly");
f0122a97:	e8 22 99 fe ff       	call   f010c3be <sys_calculate_free_frames>
f0122a9c:	89 c2                	mov    %eax,%edx
f0122a9e:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0122aa1:	29 c2                	sub    %eax,%edx
f0122aa3:	89 d0                	mov    %edx,%eax
f0122aa5:	83 f8 02             	cmp    $0x2,%eax
f0122aa8:	74 17                	je     f0122ac1 <test_kfree_bestfirstfit+0x1428>
f0122aaa:	83 ec 04             	sub    $0x4,%esp
f0122aad:	68 00 b0 13 f0       	push   $0xf013b000
f0122ab2:	68 6e 07 00 00       	push   $0x76e
f0122ab7:	68 76 a8 13 f0       	push   $0xf013a876
f0122abc:	e8 e5 d6 fd ff       	call   f01001a6 <_panic>

		//kfree 3 MB
		freeFrames = sys_calculate_free_frames() ;
f0122ac1:	e8 f8 98 fe ff       	call   f010c3be <sys_calculate_free_frames>
f0122ac6:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0122ac9:	e8 be 11 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0122ace:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[5]);
f0122ad1:	8b 85 dc fd ff ff    	mov    -0x224(%ebp),%eax
f0122ad7:	83 ec 0c             	sub    $0xc,%esp
f0122ada:	50                   	push   %eax
f0122adb:	e8 fe 4a fe ff       	call   f01075de <kfree>
f0122ae0:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0122ae3:	e8 a4 11 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0122ae8:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0122aeb:	74 17                	je     f0122b04 <test_kfree_bestfirstfit+0x146b>
f0122aed:	83 ec 04             	sub    $0x4,%esp
f0122af0:	68 90 a8 13 f0       	push   $0xf013a890
f0122af5:	68 74 07 00 00       	push   $0x774
f0122afa:	68 76 a8 13 f0       	push   $0xf013a876
f0122aff:	e8 a2 d6 fd ff       	call   f01001a6 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 3*Mega/4096) panic("Wrong kfree: pages in memory are not freed correctly");
f0122b04:	e8 b5 98 fe ff       	call   f010c3be <sys_calculate_free_frames>
f0122b09:	89 c2                	mov    %eax,%edx
f0122b0b:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0122b0e:	29 c2                	sub    %eax,%edx
f0122b10:	89 d0                	mov    %edx,%eax
f0122b12:	3d 00 03 00 00       	cmp    $0x300,%eax
f0122b17:	74 17                	je     f0122b30 <test_kfree_bestfirstfit+0x1497>
f0122b19:	83 ec 04             	sub    $0x4,%esp
f0122b1c:	68 00 b0 13 f0       	push   $0xf013b000
f0122b21:	68 75 07 00 00       	push   $0x775
f0122b26:	68 76 a8 13 f0       	push   $0xf013a876
f0122b2b:	e8 76 d6 fd ff       	call   f01001a6 <_panic>

		//kfree 2nd 2 KB
		freeFrames = sys_calculate_free_frames() ;
f0122b30:	e8 89 98 fe ff       	call   f010c3be <sys_calculate_free_frames>
f0122b35:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0122b38:	e8 4f 11 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0122b3d:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[3]);
f0122b40:	8b 85 d4 fd ff ff    	mov    -0x22c(%ebp),%eax
f0122b46:	83 ec 0c             	sub    $0xc,%esp
f0122b49:	50                   	push   %eax
f0122b4a:	e8 8f 4a fe ff       	call   f01075de <kfree>
f0122b4f:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0122b52:	e8 35 11 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0122b57:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0122b5a:	74 17                	je     f0122b73 <test_kfree_bestfirstfit+0x14da>
f0122b5c:	83 ec 04             	sub    $0x4,%esp
f0122b5f:	68 90 a8 13 f0       	push   $0xf013a890
f0122b64:	68 7b 07 00 00       	push   $0x77b
f0122b69:	68 76 a8 13 f0       	push   $0xf013a876
f0122b6e:	e8 33 d6 fd ff       	call   f01001a6 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 1) panic("Wrong kfree: pages in memory are not freed correctly");
f0122b73:	e8 46 98 fe ff       	call   f010c3be <sys_calculate_free_frames>
f0122b78:	89 c2                	mov    %eax,%edx
f0122b7a:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0122b7d:	29 c2                	sub    %eax,%edx
f0122b7f:	89 d0                	mov    %edx,%eax
f0122b81:	83 f8 01             	cmp    $0x1,%eax
f0122b84:	74 17                	je     f0122b9d <test_kfree_bestfirstfit+0x1504>
f0122b86:	83 ec 04             	sub    $0x4,%esp
f0122b89:	68 00 b0 13 f0       	push   $0xf013b000
f0122b8e:	68 7c 07 00 00       	push   $0x77c
f0122b93:	68 76 a8 13 f0       	push   $0xf013a876
f0122b98:	e8 09 d6 fd ff       	call   f01001a6 <_panic>

		//kfree 14 KB
		freeFrames = sys_calculate_free_frames() ;
f0122b9d:	e8 1c 98 fe ff       	call   f010c3be <sys_calculate_free_frames>
f0122ba2:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0122ba5:	e8 e2 10 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0122baa:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[7]);
f0122bad:	8b 85 e4 fd ff ff    	mov    -0x21c(%ebp),%eax
f0122bb3:	83 ec 0c             	sub    $0xc,%esp
f0122bb6:	50                   	push   %eax
f0122bb7:	e8 22 4a fe ff       	call   f01075de <kfree>
f0122bbc:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0122bbf:	e8 c8 10 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0122bc4:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0122bc7:	74 17                	je     f0122be0 <test_kfree_bestfirstfit+0x1547>
f0122bc9:	83 ec 04             	sub    $0x4,%esp
f0122bcc:	68 90 a8 13 f0       	push   $0xf013a890
f0122bd1:	68 82 07 00 00       	push   $0x782
f0122bd6:	68 76 a8 13 f0       	push   $0xf013a876
f0122bdb:	e8 c6 d5 fd ff       	call   f01001a6 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 4) panic("Wrong kfree: pages in memory are not freed correctly");
f0122be0:	e8 d9 97 fe ff       	call   f010c3be <sys_calculate_free_frames>
f0122be5:	89 c2                	mov    %eax,%edx
f0122be7:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0122bea:	29 c2                	sub    %eax,%edx
f0122bec:	89 d0                	mov    %edx,%eax
f0122bee:	83 f8 04             	cmp    $0x4,%eax
f0122bf1:	74 17                	je     f0122c0a <test_kfree_bestfirstfit+0x1571>
f0122bf3:	83 ec 04             	sub    $0x4,%esp
f0122bf6:	68 00 b0 13 f0       	push   $0xf013b000
f0122bfb:	68 83 07 00 00       	push   $0x783
f0122c00:	68 76 a8 13 f0       	push   $0xf013a876
f0122c05:	e8 9c d5 fd ff       	call   f01001a6 <_panic>

		//kfree 3 MB
		freeFrames = sys_calculate_free_frames() ;
f0122c0a:	e8 af 97 fe ff       	call   f010c3be <sys_calculate_free_frames>
f0122c0f:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0122c12:	e8 75 10 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0122c17:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[8]);
f0122c1a:	8b 85 e8 fd ff ff    	mov    -0x218(%ebp),%eax
f0122c20:	83 ec 0c             	sub    $0xc,%esp
f0122c23:	50                   	push   %eax
f0122c24:	e8 b5 49 fe ff       	call   f01075de <kfree>
f0122c29:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0122c2c:	e8 5b 10 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0122c31:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0122c34:	74 17                	je     f0122c4d <test_kfree_bestfirstfit+0x15b4>
f0122c36:	83 ec 04             	sub    $0x4,%esp
f0122c39:	68 90 a8 13 f0       	push   $0xf013a890
f0122c3e:	68 89 07 00 00       	push   $0x789
f0122c43:	68 76 a8 13 f0       	push   $0xf013a876
f0122c48:	e8 59 d5 fd ff       	call   f01001a6 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 3*Mega/4096) panic("Wrong kfree: pages in memory are not freed correctly");
f0122c4d:	e8 6c 97 fe ff       	call   f010c3be <sys_calculate_free_frames>
f0122c52:	89 c2                	mov    %eax,%edx
f0122c54:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0122c57:	29 c2                	sub    %eax,%edx
f0122c59:	89 d0                	mov    %edx,%eax
f0122c5b:	3d 00 03 00 00       	cmp    $0x300,%eax
f0122c60:	74 17                	je     f0122c79 <test_kfree_bestfirstfit+0x15e0>
f0122c62:	83 ec 04             	sub    $0x4,%esp
f0122c65:	68 00 b0 13 f0       	push   $0xf013b000
f0122c6a:	68 8a 07 00 00       	push   $0x78a
f0122c6f:	68 76 a8 13 f0       	push   $0xf013a876
f0122c74:	e8 2d d5 fd ff       	call   f01001a6 <_panic>

		//kfree 2 KB
		freeFrames = sys_calculate_free_frames() ;
f0122c79:	e8 40 97 fe ff       	call   f010c3be <sys_calculate_free_frames>
f0122c7e:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0122c81:	e8 06 10 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0122c86:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[9]);
f0122c89:	8b 85 ec fd ff ff    	mov    -0x214(%ebp),%eax
f0122c8f:	83 ec 0c             	sub    $0xc,%esp
f0122c92:	50                   	push   %eax
f0122c93:	e8 46 49 fe ff       	call   f01075de <kfree>
f0122c98:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0122c9b:	e8 ec 0f fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0122ca0:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0122ca3:	74 17                	je     f0122cbc <test_kfree_bestfirstfit+0x1623>
f0122ca5:	83 ec 04             	sub    $0x4,%esp
f0122ca8:	68 90 a8 13 f0       	push   $0xf013a890
f0122cad:	68 90 07 00 00       	push   $0x790
f0122cb2:	68 76 a8 13 f0       	push   $0xf013a876
f0122cb7:	e8 ea d4 fd ff       	call   f01001a6 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 1) panic("Wrong kfree: pages in memory are not freed correctly");
f0122cbc:	e8 fd 96 fe ff       	call   f010c3be <sys_calculate_free_frames>
f0122cc1:	89 c2                	mov    %eax,%edx
f0122cc3:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0122cc6:	29 c2                	sub    %eax,%edx
f0122cc8:	89 d0                	mov    %edx,%eax
f0122cca:	83 f8 01             	cmp    $0x1,%eax
f0122ccd:	74 17                	je     f0122ce6 <test_kfree_bestfirstfit+0x164d>
f0122ccf:	83 ec 04             	sub    $0x4,%esp
f0122cd2:	68 00 b0 13 f0       	push   $0xf013b000
f0122cd7:	68 91 07 00 00       	push   $0x791
f0122cdc:	68 76 a8 13 f0       	push   $0xf013a876
f0122ce1:	e8 c0 d4 fd ff       	call   f01001a6 <_panic>

		//kfree 1 MB
		freeFrames = sys_calculate_free_frames() ;
f0122ce6:	e8 d3 96 fe ff       	call   f010c3be <sys_calculate_free_frames>
f0122ceb:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0122cee:	e8 99 0f fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0122cf3:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[10]);
f0122cf6:	8b 85 f0 fd ff ff    	mov    -0x210(%ebp),%eax
f0122cfc:	83 ec 0c             	sub    $0xc,%esp
f0122cff:	50                   	push   %eax
f0122d00:	e8 d9 48 fe ff       	call   f01075de <kfree>
f0122d05:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0122d08:	e8 7f 0f fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0122d0d:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0122d10:	74 17                	je     f0122d29 <test_kfree_bestfirstfit+0x1690>
f0122d12:	83 ec 04             	sub    $0x4,%esp
f0122d15:	68 90 a8 13 f0       	push   $0xf013a890
f0122d1a:	68 97 07 00 00       	push   $0x797
f0122d1f:	68 76 a8 13 f0       	push   $0xf013a876
f0122d24:	e8 7d d4 fd ff       	call   f01001a6 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 1*Mega/4096) panic("Wrong kfree: pages in memory are not freed correctly");
f0122d29:	e8 90 96 fe ff       	call   f010c3be <sys_calculate_free_frames>
f0122d2e:	89 c2                	mov    %eax,%edx
f0122d30:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0122d33:	29 c2                	sub    %eax,%edx
f0122d35:	89 d0                	mov    %edx,%eax
f0122d37:	3d 00 01 00 00       	cmp    $0x100,%eax
f0122d3c:	74 17                	je     f0122d55 <test_kfree_bestfirstfit+0x16bc>
f0122d3e:	83 ec 04             	sub    $0x4,%esp
f0122d41:	68 00 b0 13 f0       	push   $0xf013b000
f0122d46:	68 98 07 00 00       	push   $0x798
f0122d4b:	68 76 a8 13 f0       	push   $0xf013a876
f0122d50:	e8 51 d4 fd ff       	call   f01001a6 <_panic>

		if(start_freeFrames != (sys_calculate_free_frames())) {panic("Wrong kfree: not all pages removed correctly at end");}
f0122d55:	e8 64 96 fe ff       	call   f010c3be <sys_calculate_free_frames>
f0122d5a:	89 c2                	mov    %eax,%edx
f0122d5c:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0122d5f:	39 c2                	cmp    %eax,%edx
f0122d61:	74 17                	je     f0122d7a <test_kfree_bestfirstfit+0x16e1>
f0122d63:	83 ec 04             	sub    $0x4,%esp
f0122d66:	68 a0 b0 13 f0       	push   $0xf013b0a0
f0122d6b:	68 9a 07 00 00       	push   $0x79a
f0122d70:	68 76 a8 13 f0       	push   $0xf013a876
f0122d75:	e8 2c d4 fd ff       	call   f01001a6 <_panic>
	}
	cprintf("\b\b\b60%");
f0122d7a:	83 ec 0c             	sub    $0xc,%esp
f0122d7d:	68 d4 b0 13 f0       	push   $0xf013b0d4
f0122d82:	e8 a6 de fd ff       	call   f0100c2d <cprintf>
f0122d87:	83 c4 10             	add    $0x10,%esp

	//Check memory access after kfree [15%]
	{
		//Bypass the PAGE FAULT on <MOVB immediate, reg> instruction by setting its length
		//and continue executing the remaining code
		sys_bypassPageFault(3);
f0122d8a:	83 ec 0c             	sub    $0xc,%esp
f0122d8d:	6a 03                	push   $0x3
f0122d8f:	e8 d3 9a fe ff       	call   f010c867 <sys_bypassPageFault>
f0122d94:	83 c4 10             	add    $0x10,%esp

		for (i = 0; i < 10; ++i)
f0122d97:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0122d9e:	e9 82 00 00 00       	jmp    f0122e25 <test_kfree_bestfirstfit+0x178c>
		{
			ptr = (char *) ptr_allocations[i];
f0122da3:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0122da6:	8b 84 85 c8 fd ff ff 	mov    -0x238(%ebp,%eax,4),%eax
f0122dad:	89 45 80             	mov    %eax,-0x80(%ebp)
			ptr[0] = 10;
f0122db0:	8b 45 80             	mov    -0x80(%ebp),%eax
f0122db3:	c6 00 0a             	movb   $0xa,(%eax)
			//cprintf("\n\ncr2 = %x, faulted addr = %x", sys_rcr2(), (uint32)&(ptr[0]));
			if (sys_rcr2() != (uint32)&(ptr[0])) panic("kfree: successful access to freed space!! it should not be succeeded");
f0122db6:	e8 9a 9a fe ff       	call   f010c855 <sys_rcr2>
f0122dbb:	89 c2                	mov    %eax,%edx
f0122dbd:	8b 45 80             	mov    -0x80(%ebp),%eax
f0122dc0:	39 c2                	cmp    %eax,%edx
f0122dc2:	74 17                	je     f0122ddb <test_kfree_bestfirstfit+0x1742>
f0122dc4:	83 ec 04             	sub    $0x4,%esp
f0122dc7:	68 dc b0 13 f0       	push   $0xf013b0dc
f0122dcc:	68 a9 07 00 00       	push   $0x7a9
f0122dd1:	68 76 a8 13 f0       	push   $0xf013a876
f0122dd6:	e8 cb d3 fd ff       	call   f01001a6 <_panic>
			ptr[lastIndices[i]] = 10;
f0122ddb:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0122dde:	8b 84 85 68 fe ff ff 	mov    -0x198(%ebp,%eax,4),%eax
f0122de5:	89 c2                	mov    %eax,%edx
f0122de7:	8b 45 80             	mov    -0x80(%ebp),%eax
f0122dea:	01 d0                	add    %edx,%eax
f0122dec:	c6 00 0a             	movb   $0xa,(%eax)
			if (sys_rcr2() != (uint32)&(ptr[lastIndices[i]])) panic("kfree: successful access to freed space!! it should not be succeeded");
f0122def:	e8 61 9a fe ff       	call   f010c855 <sys_rcr2>
f0122df4:	89 c2                	mov    %eax,%edx
f0122df6:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0122df9:	8b 84 85 68 fe ff ff 	mov    -0x198(%ebp,%eax,4),%eax
f0122e00:	89 c1                	mov    %eax,%ecx
f0122e02:	8b 45 80             	mov    -0x80(%ebp),%eax
f0122e05:	01 c8                	add    %ecx,%eax
f0122e07:	39 c2                	cmp    %eax,%edx
f0122e09:	74 17                	je     f0122e22 <test_kfree_bestfirstfit+0x1789>
f0122e0b:	83 ec 04             	sub    $0x4,%esp
f0122e0e:	68 dc b0 13 f0       	push   $0xf013b0dc
f0122e13:	68 ab 07 00 00       	push   $0x7ab
f0122e18:	68 76 a8 13 f0       	push   $0xf013a876
f0122e1d:	e8 84 d3 fd ff       	call   f01001a6 <_panic>
	{
		//Bypass the PAGE FAULT on <MOVB immediate, reg> instruction by setting its length
		//and continue executing the remaining code
		sys_bypassPageFault(3);

		for (i = 0; i < 10; ++i)
f0122e22:	ff 45 f4             	incl   -0xc(%ebp)
f0122e25:	83 7d f4 09          	cmpl   $0x9,-0xc(%ebp)
f0122e29:	0f 8e 74 ff ff ff    	jle    f0122da3 <test_kfree_bestfirstfit+0x170a>
			ptr[lastIndices[i]] = 10;
			if (sys_rcr2() != (uint32)&(ptr[lastIndices[i]])) panic("kfree: successful access to freed space!! it should not be succeeded");
		}

		//set it to 0 again to cancel the bypassing option
		sys_bypassPageFault(0);
f0122e2f:	83 ec 0c             	sub    $0xc,%esp
f0122e32:	6a 00                	push   $0x0
f0122e34:	e8 2e 9a fe ff       	call   f010c867 <sys_bypassPageFault>
f0122e39:	83 c4 10             	add    $0x10,%esp
	}
	cprintf("\b\b\b75%");
f0122e3c:	83 ec 0c             	sub    $0xc,%esp
f0122e3f:	68 21 b1 13 f0       	push   $0xf013b121
f0122e44:	e8 e4 dd fd ff       	call   f0100c2d <cprintf>
f0122e49:	83 c4 10             	add    $0x10,%esp

	//kfree non-exist item [10%]
	{
		//kfree 2 MB
		freeFrames = sys_calculate_free_frames() ;
f0122e4c:	e8 6d 95 fe ff       	call   f010c3be <sys_calculate_free_frames>
f0122e51:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0122e54:	e8 33 0e fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0122e59:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[0]);
f0122e5c:	8b 85 c8 fd ff ff    	mov    -0x238(%ebp),%eax
f0122e62:	83 ec 0c             	sub    $0xc,%esp
f0122e65:	50                   	push   %eax
f0122e66:	e8 73 47 fe ff       	call   f01075de <kfree>
f0122e6b:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0122e6e:	e8 19 0e fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0122e73:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0122e76:	74 17                	je     f0122e8f <test_kfree_bestfirstfit+0x17f6>
f0122e78:	83 ec 04             	sub    $0x4,%esp
f0122e7b:	68 90 a8 13 f0       	push   $0xf013a890
f0122e80:	68 b9 07 00 00       	push   $0x7b9
f0122e85:	68 76 a8 13 f0       	push   $0xf013a876
f0122e8a:	e8 17 d3 fd ff       	call   f01001a6 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 0) panic("Wrong kfree: attempt to kfree a non-existing ptr. It should do nothing");
f0122e8f:	e8 2a 95 fe ff       	call   f010c3be <sys_calculate_free_frames>
f0122e94:	89 c2                	mov    %eax,%edx
f0122e96:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0122e99:	39 c2                	cmp    %eax,%edx
f0122e9b:	74 17                	je     f0122eb4 <test_kfree_bestfirstfit+0x181b>
f0122e9d:	83 ec 04             	sub    $0x4,%esp
f0122ea0:	68 28 b1 13 f0       	push   $0xf013b128
f0122ea5:	68 ba 07 00 00       	push   $0x7ba
f0122eaa:	68 76 a8 13 f0       	push   $0xf013a876
f0122eaf:	e8 f2 d2 fd ff       	call   f01001a6 <_panic>

		//kfree 2 KB
		freeFrames = sys_calculate_free_frames() ;
f0122eb4:	e8 05 95 fe ff       	call   f010c3be <sys_calculate_free_frames>
f0122eb9:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0122ebc:	e8 cb 0d fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0122ec1:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[2]);
f0122ec4:	8b 85 d0 fd ff ff    	mov    -0x230(%ebp),%eax
f0122eca:	83 ec 0c             	sub    $0xc,%esp
f0122ecd:	50                   	push   %eax
f0122ece:	e8 0b 47 fe ff       	call   f01075de <kfree>
f0122ed3:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0122ed6:	e8 b1 0d fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0122edb:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0122ede:	74 17                	je     f0122ef7 <test_kfree_bestfirstfit+0x185e>
f0122ee0:	83 ec 04             	sub    $0x4,%esp
f0122ee3:	68 90 a8 13 f0       	push   $0xf013a890
f0122ee8:	68 c0 07 00 00       	push   $0x7c0
f0122eed:	68 76 a8 13 f0       	push   $0xf013a876
f0122ef2:	e8 af d2 fd ff       	call   f01001a6 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 0) panic("Wrong kfree: attempt to kfree a non-existing ptr. It should do nothing");
f0122ef7:	e8 c2 94 fe ff       	call   f010c3be <sys_calculate_free_frames>
f0122efc:	89 c2                	mov    %eax,%edx
f0122efe:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0122f01:	39 c2                	cmp    %eax,%edx
f0122f03:	74 17                	je     f0122f1c <test_kfree_bestfirstfit+0x1883>
f0122f05:	83 ec 04             	sub    $0x4,%esp
f0122f08:	68 28 b1 13 f0       	push   $0xf013b128
f0122f0d:	68 c1 07 00 00       	push   $0x7c1
f0122f12:	68 76 a8 13 f0       	push   $0xf013a876
f0122f17:	e8 8a d2 fd ff       	call   f01001a6 <_panic>

		//kfree 20 KB
		freeFrames = sys_calculate_free_frames() ;
f0122f1c:	e8 9d 94 fe ff       	call   f010c3be <sys_calculate_free_frames>
f0122f21:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0122f24:	e8 63 0d fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0122f29:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[8]);
f0122f2c:	8b 85 e8 fd ff ff    	mov    -0x218(%ebp),%eax
f0122f32:	83 ec 0c             	sub    $0xc,%esp
f0122f35:	50                   	push   %eax
f0122f36:	e8 a3 46 fe ff       	call   f01075de <kfree>
f0122f3b:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0122f3e:	e8 49 0d fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0122f43:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0122f46:	74 17                	je     f0122f5f <test_kfree_bestfirstfit+0x18c6>
f0122f48:	83 ec 04             	sub    $0x4,%esp
f0122f4b:	68 90 a8 13 f0       	push   $0xf013a890
f0122f50:	68 c7 07 00 00       	push   $0x7c7
f0122f55:	68 76 a8 13 f0       	push   $0xf013a876
f0122f5a:	e8 47 d2 fd ff       	call   f01001a6 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 0) panic("Wrong kfree: attempt to kfree a non-existing ptr. It should do nothing");
f0122f5f:	e8 5a 94 fe ff       	call   f010c3be <sys_calculate_free_frames>
f0122f64:	89 c2                	mov    %eax,%edx
f0122f66:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0122f69:	39 c2                	cmp    %eax,%edx
f0122f6b:	74 17                	je     f0122f84 <test_kfree_bestfirstfit+0x18eb>
f0122f6d:	83 ec 04             	sub    $0x4,%esp
f0122f70:	68 28 b1 13 f0       	push   $0xf013b128
f0122f75:	68 c8 07 00 00       	push   $0x7c8
f0122f7a:	68 76 a8 13 f0       	push   $0xf013a876
f0122f7f:	e8 22 d2 fd ff       	call   f01001a6 <_panic>

		//kfree 1 MB
		freeFrames = sys_calculate_free_frames() ;
f0122f84:	e8 35 94 fe ff       	call   f010c3be <sys_calculate_free_frames>
f0122f89:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0122f8c:	e8 fb 0c fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0122f91:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[9]);
f0122f94:	8b 85 ec fd ff ff    	mov    -0x214(%ebp),%eax
f0122f9a:	83 ec 0c             	sub    $0xc,%esp
f0122f9d:	50                   	push   %eax
f0122f9e:	e8 3b 46 fe ff       	call   f01075de <kfree>
f0122fa3:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0122fa6:	e8 e1 0c fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0122fab:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0122fae:	74 17                	je     f0122fc7 <test_kfree_bestfirstfit+0x192e>
f0122fb0:	83 ec 04             	sub    $0x4,%esp
f0122fb3:	68 90 a8 13 f0       	push   $0xf013a890
f0122fb8:	68 ce 07 00 00       	push   $0x7ce
f0122fbd:	68 76 a8 13 f0       	push   $0xf013a876
f0122fc2:	e8 df d1 fd ff       	call   f01001a6 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 0) panic("Wrong kfree: attempt to kfree a non-existing ptr. It should do nothing");
f0122fc7:	e8 f2 93 fe ff       	call   f010c3be <sys_calculate_free_frames>
f0122fcc:	89 c2                	mov    %eax,%edx
f0122fce:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0122fd1:	39 c2                	cmp    %eax,%edx
f0122fd3:	74 17                	je     f0122fec <test_kfree_bestfirstfit+0x1953>
f0122fd5:	83 ec 04             	sub    $0x4,%esp
f0122fd8:	68 28 b1 13 f0       	push   $0xf013b128
f0122fdd:	68 cf 07 00 00       	push   $0x7cf
f0122fe2:	68 76 a8 13 f0       	push   $0xf013a876
f0122fe7:	e8 ba d1 fd ff       	call   f01001a6 <_panic>

	}
	cprintf("\b\b\b85%");
f0122fec:	83 ec 0c             	sub    $0xc,%esp
f0122fef:	68 6f b1 13 f0       	push   $0xf013b16f
f0122ff4:	e8 34 dc fd ff       	call   f0100c2d <cprintf>
f0122ff9:	83 c4 10             	add    $0x10,%esp

	//check tables	[15%]
	{
		long long va;
		for (va = KERNEL_HEAP_START; va < (long long)KERNEL_HEAP_MAX; va+=PTSIZE)
f0122ffc:	c7 45 e8 00 00 00 f6 	movl   $0xf6000000,-0x18(%ebp)
f0123003:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f012300a:	eb 48                	jmp    f0123054 <test_kfree_bestfirstfit+0x19bb>
		{
			uint32 *ptr_table ;
			get_page_table(ptr_page_directory, (uint32)va, &ptr_table);
f012300c:	8b 55 e8             	mov    -0x18(%ebp),%edx
f012300f:	a1 b8 0e 6c f0       	mov    0xf06c0eb8,%eax
f0123014:	83 ec 04             	sub    $0x4,%esp
f0123017:	8d 8d c4 fd ff ff    	lea    -0x23c(%ebp),%ecx
f012301d:	51                   	push   %ecx
f012301e:	52                   	push   %edx
f012301f:	50                   	push   %eax
f0123020:	e8 44 39 fe ff       	call   f0106969 <get_page_table>
f0123025:	83 c4 10             	add    $0x10,%esp
			if (ptr_table == NULL)
f0123028:	8b 85 c4 fd ff ff    	mov    -0x23c(%ebp),%eax
f012302e:	85 c0                	test   %eax,%eax
f0123030:	75 17                	jne    f0123049 <test_kfree_bestfirstfit+0x19b0>
			{
				panic("Wrong kfree: one of the kernel tables is wrongly removed! Tables should not be removed here in kfree");
f0123032:	83 ec 04             	sub    $0x4,%esp
f0123035:	68 78 b1 13 f0       	push   $0xf013b178
f012303a:	68 dd 07 00 00       	push   $0x7dd
f012303f:	68 76 a8 13 f0       	push   $0xf013a876
f0123044:	e8 5d d1 fd ff       	call   f01001a6 <_panic>
	cprintf("\b\b\b85%");

	//check tables	[15%]
	{
		long long va;
		for (va = KERNEL_HEAP_START; va < (long long)KERNEL_HEAP_MAX; va+=PTSIZE)
f0123049:	81 45 e8 00 00 40 00 	addl   $0x400000,-0x18(%ebp)
f0123050:	83 55 ec 00          	adcl   $0x0,-0x14(%ebp)
f0123054:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0123058:	78 b2                	js     f012300c <test_kfree_bestfirstfit+0x1973>
f012305a:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012305e:	7f 09                	jg     f0123069 <test_kfree_bestfirstfit+0x19d0>
f0123060:	81 7d e8 ff ef ff ff 	cmpl   $0xffffefff,-0x18(%ebp)
f0123067:	76 a3                	jbe    f012300c <test_kfree_bestfirstfit+0x1973>
			{
				panic("Wrong kfree: one of the kernel tables is wrongly removed! Tables should not be removed here in kfree");
			}
		}
	}
	cprintf("\b\b\b100%\n");
f0123069:	83 ec 0c             	sub    $0xc,%esp
f012306c:	68 5a aa 13 f0       	push   $0xf013aa5a
f0123071:	e8 b7 db fd ff       	call   f0100c2d <cprintf>
f0123076:	83 c4 10             	add    $0x10,%esp



	cprintf("\nCongratulations!! test kfree completed successfully.\n");
f0123079:	83 ec 0c             	sub    $0xc,%esp
f012307c:	68 e0 b1 13 f0       	push   $0xf013b1e0
f0123081:	e8 a7 db fd ff       	call   f0100c2d <cprintf>
f0123086:	83 c4 10             	add    $0x10,%esp

	return 1;
f0123089:	b8 01 00 00 00       	mov    $0x1,%eax

}
f012308e:	8d 65 f8             	lea    -0x8(%ebp),%esp
f0123091:	5b                   	pop    %ebx
f0123092:	5f                   	pop    %edi
f0123093:	5d                   	pop    %ebp
f0123094:	c3                   	ret    

f0123095 <test_kheap_phys_addr>:

int test_kheap_phys_addr()
{
f0123095:	55                   	push   %ebp
f0123096:	89 e5                	mov    %esp,%ebp
f0123098:	57                   	push   %edi
f0123099:	56                   	push   %esi
f012309a:	53                   	push   %ebx
f012309b:	81 ec dc 02 00 00    	sub    $0x2dc,%esp
	cprintf("==============================================\n");
f01230a1:	83 ec 0c             	sub    $0xc,%esp
f01230a4:	68 b8 a7 13 f0       	push   $0xf013a7b8
f01230a9:	e8 7f db fd ff       	call   f0100c2d <cprintf>
f01230ae:	83 c4 10             	add    $0x10,%esp
	cprintf("MAKE SURE to have a FRESH RUN for this test\n(i.e. don't run any program/test before it)\n");
f01230b1:	83 ec 0c             	sub    $0xc,%esp
f01230b4:	68 e8 a7 13 f0       	push   $0xf013a7e8
f01230b9:	e8 6f db fd ff       	call   f0100c2d <cprintf>
f01230be:	83 c4 10             	add    $0x10,%esp
	cprintf("==============================================\n");
f01230c1:	83 ec 0c             	sub    $0xc,%esp
f01230c4:	68 b8 a7 13 f0       	push   $0xf013a7b8
f01230c9:	e8 5f db fd ff       	call   f0100c2d <cprintf>
f01230ce:	83 c4 10             	add    $0x10,%esp

	char minByte = 1<<7;
f01230d1:	c6 45 bf 80          	movb   $0x80,-0x41(%ebp)
	char maxByte = 0x7F;
f01230d5:	c6 45 be 7f          	movb   $0x7f,-0x42(%ebp)
	short minShort = 1<<15 ;
f01230d9:	66 c7 45 bc 00 80    	movw   $0x8000,-0x44(%ebp)
	short maxShort = 0x7FFF;
f01230df:	66 c7 45 ba ff 7f    	movw   $0x7fff,-0x46(%ebp)
	int minInt = 1<<31 ;
f01230e5:	c7 45 b4 00 00 00 80 	movl   $0x80000000,-0x4c(%ebp)
	int maxInt = 0x7FFFFFFF;
f01230ec:	c7 45 b0 ff ff ff 7f 	movl   $0x7fffffff,-0x50(%ebp)
	char *byteArr, *byteArr2 ;
	short *shortArr, *shortArr2 ;
	int *intArr;
	struct MyStruct *structArr ;
	int lastIndexOfByte, lastIndexOfByte2, lastIndexOfShort, lastIndexOfShort2, lastIndexOfInt, lastIndexOfStruct;
	int start_freeFrames = sys_calculate_free_frames() ;
f01230f3:	e8 c6 92 fe ff       	call   f010c3be <sys_calculate_free_frames>
f01230f8:	89 45 ac             	mov    %eax,-0x54(%ebp)

	//malloc some spaces
	int i, freeFrames, freeDiskFrames ;
	char* ptr;
	int lastIndices[20] = {0};
f01230fb:	8d 95 c4 fd ff ff    	lea    -0x23c(%ebp),%edx
f0123101:	b9 14 00 00 00       	mov    $0x14,%ecx
f0123106:	b8 00 00 00 00       	mov    $0x0,%eax
f012310b:	89 d7                	mov    %edx,%edi
f012310d:	f3 ab                	rep stos %eax,%es:(%edi)
	int sums[20] = {0};
f012310f:	8d 95 74 fd ff ff    	lea    -0x28c(%ebp),%edx
f0123115:	b9 14 00 00 00       	mov    $0x14,%ecx
f012311a:	b8 00 00 00 00       	mov    $0x0,%eax
f012311f:	89 d7                	mov    %edx,%edi
f0123121:	f3 ab                	rep stos %eax,%es:(%edi)
	void* ptr_allocations[20] = {0};
f0123123:	8d 95 24 fd ff ff    	lea    -0x2dc(%ebp),%edx
f0123129:	b9 14 00 00 00       	mov    $0x14,%ecx
f012312e:	b8 00 00 00 00       	mov    $0x0,%eax
f0123133:	89 d7                	mov    %edx,%edi
f0123135:	f3 ab                	rep stos %eax,%es:(%edi)
	{
		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f0123137:	e8 82 92 fe ff       	call   f010c3be <sys_calculate_free_frames>
f012313c:	89 45 a8             	mov    %eax,-0x58(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012313f:	e8 48 0b fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0123144:	89 45 a4             	mov    %eax,-0x5c(%ebp)
		ptr_allocations[0] = kmalloc(2*Mega-kilo);
f0123147:	83 ec 0c             	sub    $0xc,%esp
f012314a:	68 00 fc 1f 00       	push   $0x1ffc00
f012314f:	e8 70 44 fe ff       	call   f01075c4 <kmalloc>
f0123154:	83 c4 10             	add    $0x10,%esp
f0123157:	89 85 24 fd ff ff    	mov    %eax,-0x2dc(%ebp)
		if ((uint32) ptr_allocations[0] !=  (ACTUAL_START)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f012315d:	8b 85 24 fd ff ff    	mov    -0x2dc(%ebp),%eax
f0123163:	89 c1                	mov    %eax,%ecx
f0123165:	c7 45 a0 00 10 00 00 	movl   $0x1000,-0x60(%ebp)
f012316c:	8b 45 a0             	mov    -0x60(%ebp),%eax
f012316f:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0123174:	89 45 9c             	mov    %eax,-0x64(%ebp)
f0123177:	8b 45 9c             	mov    -0x64(%ebp),%eax
f012317a:	ba 00 00 00 00       	mov    $0x0,%edx
f012317f:	f7 75 a0             	divl   -0x60(%ebp)
f0123182:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0123185:	29 d0                	sub    %edx,%eax
f0123187:	89 c3                	mov    %eax,%ebx
f0123189:	c7 45 98 00 10 00 00 	movl   $0x1000,-0x68(%ebp)
f0123190:	a0 bc 0e 6c f0       	mov    0xf06c0ebc,%al
f0123195:	0f b6 d0             	movzbl %al,%edx
f0123198:	8b 45 98             	mov    -0x68(%ebp),%eax
f012319b:	01 d0                	add    %edx,%eax
f012319d:	48                   	dec    %eax
f012319e:	89 45 94             	mov    %eax,-0x6c(%ebp)
f01231a1:	8b 45 94             	mov    -0x6c(%ebp),%eax
f01231a4:	ba 00 00 00 00       	mov    $0x0,%edx
f01231a9:	f7 75 98             	divl   -0x68(%ebp)
f01231ac:	8b 45 94             	mov    -0x6c(%ebp),%eax
f01231af:	29 d0                	sub    %edx,%eax
f01231b1:	01 c3                	add    %eax,%ebx
f01231b3:	c7 45 90 00 10 00 00 	movl   $0x1000,-0x70(%ebp)
f01231ba:	a0 bc 0e 6c f0       	mov    0xf06c0ebc,%al
f01231bf:	0f b6 c0             	movzbl %al,%eax
f01231c2:	c1 e0 04             	shl    $0x4,%eax
f01231c5:	89 c2                	mov    %eax,%edx
f01231c7:	8b 45 90             	mov    -0x70(%ebp),%eax
f01231ca:	01 d0                	add    %edx,%eax
f01231cc:	48                   	dec    %eax
f01231cd:	89 45 8c             	mov    %eax,-0x74(%ebp)
f01231d0:	8b 45 8c             	mov    -0x74(%ebp),%eax
f01231d3:	ba 00 00 00 00       	mov    $0x0,%edx
f01231d8:	f7 75 90             	divl   -0x70(%ebp)
f01231db:	8b 45 8c             	mov    -0x74(%ebp),%eax
f01231de:	29 d0                	sub    %edx,%eax
f01231e0:	01 d8                	add    %ebx,%eax
f01231e2:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f01231e7:	39 c1                	cmp    %eax,%ecx
f01231e9:	74 17                	je     f0123202 <test_kheap_phys_addr+0x16d>
f01231eb:	83 ec 04             	sub    $0x4,%esp
f01231ee:	68 5c a9 13 f0       	push   $0xf013a95c
f01231f3:	68 0a 08 00 00       	push   $0x80a
f01231f8:	68 76 a8 13 f0       	push   $0xf013a876
f01231fd:	e8 a4 cf fd ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0123202:	e8 85 0a fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0123207:	3b 45 a4             	cmp    -0x5c(%ebp),%eax
f012320a:	74 17                	je     f0123223 <test_kheap_phys_addr+0x18e>
f012320c:	83 ec 04             	sub    $0x4,%esp
f012320f:	68 90 a8 13 f0       	push   $0xf013a890
f0123214:	68 0b 08 00 00       	push   $0x80b
f0123219:	68 76 a8 13 f0       	push   $0xf013a876
f012321e:	e8 83 cf fd ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f0123223:	8b 5d a8             	mov    -0x58(%ebp),%ebx
f0123226:	e8 93 91 fe ff       	call   f010c3be <sys_calculate_free_frames>
f012322b:	29 c3                	sub    %eax,%ebx
f012322d:	89 d8                	mov    %ebx,%eax
f012322f:	3d 00 02 00 00       	cmp    $0x200,%eax
f0123234:	74 17                	je     f012324d <test_kheap_phys_addr+0x1b8>
f0123236:	83 ec 04             	sub    $0x4,%esp
f0123239:	68 f8 a8 13 f0       	push   $0xf013a8f8
f012323e:	68 0c 08 00 00       	push   $0x80c
f0123243:	68 76 a8 13 f0       	push   $0xf013a876
f0123248:	e8 59 cf fd ff       	call   f01001a6 <_panic>

		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f012324d:	e8 6c 91 fe ff       	call   f010c3be <sys_calculate_free_frames>
f0123252:	89 45 a8             	mov    %eax,-0x58(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0123255:	e8 32 0a fe ff       	call   f0103c8c <pf_calculate_free_frames>
f012325a:	89 45 a4             	mov    %eax,-0x5c(%ebp)
		ptr_allocations[1] = kmalloc(2*Mega-kilo);
f012325d:	83 ec 0c             	sub    $0xc,%esp
f0123260:	68 00 fc 1f 00       	push   $0x1ffc00
f0123265:	e8 5a 43 fe ff       	call   f01075c4 <kmalloc>
f012326a:	83 c4 10             	add    $0x10,%esp
f012326d:	89 85 28 fd ff ff    	mov    %eax,-0x2d8(%ebp)
		if ((uint32) ptr_allocations[1] != (ACTUAL_START + 2*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0123273:	8b 85 28 fd ff ff    	mov    -0x2d8(%ebp),%eax
f0123279:	89 c1                	mov    %eax,%ecx
f012327b:	c7 45 88 00 10 00 00 	movl   $0x1000,-0x78(%ebp)
f0123282:	8b 45 88             	mov    -0x78(%ebp),%eax
f0123285:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012328a:	89 45 84             	mov    %eax,-0x7c(%ebp)
f012328d:	8b 45 84             	mov    -0x7c(%ebp),%eax
f0123290:	ba 00 00 00 00       	mov    $0x0,%edx
f0123295:	f7 75 88             	divl   -0x78(%ebp)
f0123298:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012329b:	29 d0                	sub    %edx,%eax
f012329d:	89 c3                	mov    %eax,%ebx
f012329f:	c7 45 80 00 10 00 00 	movl   $0x1000,-0x80(%ebp)
f01232a6:	a0 bc 0e 6c f0       	mov    0xf06c0ebc,%al
f01232ab:	0f b6 d0             	movzbl %al,%edx
f01232ae:	8b 45 80             	mov    -0x80(%ebp),%eax
f01232b1:	01 d0                	add    %edx,%eax
f01232b3:	48                   	dec    %eax
f01232b4:	89 85 7c ff ff ff    	mov    %eax,-0x84(%ebp)
f01232ba:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f01232c0:	ba 00 00 00 00       	mov    $0x0,%edx
f01232c5:	f7 75 80             	divl   -0x80(%ebp)
f01232c8:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f01232ce:	29 d0                	sub    %edx,%eax
f01232d0:	01 c3                	add    %eax,%ebx
f01232d2:	c7 85 78 ff ff ff 00 	movl   $0x1000,-0x88(%ebp)
f01232d9:	10 00 00 
f01232dc:	a0 bc 0e 6c f0       	mov    0xf06c0ebc,%al
f01232e1:	0f b6 c0             	movzbl %al,%eax
f01232e4:	c1 e0 04             	shl    $0x4,%eax
f01232e7:	89 c2                	mov    %eax,%edx
f01232e9:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f01232ef:	01 d0                	add    %edx,%eax
f01232f1:	48                   	dec    %eax
f01232f2:	89 85 74 ff ff ff    	mov    %eax,-0x8c(%ebp)
f01232f8:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f01232fe:	ba 00 00 00 00       	mov    $0x0,%edx
f0123303:	f7 b5 78 ff ff ff    	divl   -0x88(%ebp)
f0123309:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f012330f:	29 d0                	sub    %edx,%eax
f0123311:	01 d8                	add    %ebx,%eax
f0123313:	2d 00 c0 df 09       	sub    $0x9dfc000,%eax
f0123318:	39 c1                	cmp    %eax,%ecx
f012331a:	74 17                	je     f0123333 <test_kheap_phys_addr+0x29e>
f012331c:	83 ec 04             	sub    $0x4,%esp
f012331f:	68 5c a9 13 f0       	push   $0xf013a95c
f0123324:	68 12 08 00 00       	push   $0x812
f0123329:	68 76 a8 13 f0       	push   $0xf013a876
f012332e:	e8 73 ce fd ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0123333:	e8 54 09 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0123338:	3b 45 a4             	cmp    -0x5c(%ebp),%eax
f012333b:	74 17                	je     f0123354 <test_kheap_phys_addr+0x2bf>
f012333d:	83 ec 04             	sub    $0x4,%esp
f0123340:	68 90 a8 13 f0       	push   $0xf013a890
f0123345:	68 13 08 00 00       	push   $0x813
f012334a:	68 76 a8 13 f0       	push   $0xf013a876
f012334f:	e8 52 ce fd ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f0123354:	8b 5d a8             	mov    -0x58(%ebp),%ebx
f0123357:	e8 62 90 fe ff       	call   f010c3be <sys_calculate_free_frames>
f012335c:	29 c3                	sub    %eax,%ebx
f012335e:	89 d8                	mov    %ebx,%eax
f0123360:	3d 00 02 00 00       	cmp    $0x200,%eax
f0123365:	74 17                	je     f012337e <test_kheap_phys_addr+0x2e9>
f0123367:	83 ec 04             	sub    $0x4,%esp
f012336a:	68 f8 a8 13 f0       	push   $0xf013a8f8
f012336f:	68 14 08 00 00       	push   $0x814
f0123374:	68 76 a8 13 f0       	push   $0xf013a876
f0123379:	e8 28 ce fd ff       	call   f01001a6 <_panic>

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f012337e:	e8 3b 90 fe ff       	call   f010c3be <sys_calculate_free_frames>
f0123383:	89 45 a8             	mov    %eax,-0x58(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0123386:	e8 01 09 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f012338b:	89 45 a4             	mov    %eax,-0x5c(%ebp)
		ptr_allocations[2] = kmalloc(2*kilo);
f012338e:	83 ec 0c             	sub    $0xc,%esp
f0123391:	68 00 08 00 00       	push   $0x800
f0123396:	e8 29 42 fe ff       	call   f01075c4 <kmalloc>
f012339b:	83 c4 10             	add    $0x10,%esp
f012339e:	89 85 2c fd ff ff    	mov    %eax,-0x2d4(%ebp)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01233a4:	8b 85 2c fd ff ff    	mov    -0x2d4(%ebp),%eax
f01233aa:	89 c1                	mov    %eax,%ecx
f01233ac:	c7 85 70 ff ff ff 00 	movl   $0x1000,-0x90(%ebp)
f01233b3:	10 00 00 
f01233b6:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f01233bc:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01233c1:	89 85 6c ff ff ff    	mov    %eax,-0x94(%ebp)
f01233c7:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f01233cd:	ba 00 00 00 00       	mov    $0x0,%edx
f01233d2:	f7 b5 70 ff ff ff    	divl   -0x90(%ebp)
f01233d8:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f01233de:	29 d0                	sub    %edx,%eax
f01233e0:	89 c3                	mov    %eax,%ebx
f01233e2:	c7 85 68 ff ff ff 00 	movl   $0x1000,-0x98(%ebp)
f01233e9:	10 00 00 
f01233ec:	a0 bc 0e 6c f0       	mov    0xf06c0ebc,%al
f01233f1:	0f b6 d0             	movzbl %al,%edx
f01233f4:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f01233fa:	01 d0                	add    %edx,%eax
f01233fc:	48                   	dec    %eax
f01233fd:	89 85 64 ff ff ff    	mov    %eax,-0x9c(%ebp)
f0123403:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f0123409:	ba 00 00 00 00       	mov    $0x0,%edx
f012340e:	f7 b5 68 ff ff ff    	divl   -0x98(%ebp)
f0123414:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f012341a:	29 d0                	sub    %edx,%eax
f012341c:	01 c3                	add    %eax,%ebx
f012341e:	c7 85 60 ff ff ff 00 	movl   $0x1000,-0xa0(%ebp)
f0123425:	10 00 00 
f0123428:	a0 bc 0e 6c f0       	mov    0xf06c0ebc,%al
f012342d:	0f b6 c0             	movzbl %al,%eax
f0123430:	c1 e0 04             	shl    $0x4,%eax
f0123433:	89 c2                	mov    %eax,%edx
f0123435:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f012343b:	01 d0                	add    %edx,%eax
f012343d:	48                   	dec    %eax
f012343e:	89 85 5c ff ff ff    	mov    %eax,-0xa4(%ebp)
f0123444:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f012344a:	ba 00 00 00 00       	mov    $0x0,%edx
f012344f:	f7 b5 60 ff ff ff    	divl   -0xa0(%ebp)
f0123455:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f012345b:	29 d0                	sub    %edx,%eax
f012345d:	01 d8                	add    %ebx,%eax
f012345f:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
f0123464:	39 c1                	cmp    %eax,%ecx
f0123466:	74 17                	je     f012347f <test_kheap_phys_addr+0x3ea>
f0123468:	83 ec 04             	sub    $0x4,%esp
f012346b:	68 5c a9 13 f0       	push   $0xf013a95c
f0123470:	68 1a 08 00 00       	push   $0x81a
f0123475:	68 76 a8 13 f0       	push   $0xf013a876
f012347a:	e8 27 cd fd ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012347f:	e8 08 08 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0123484:	3b 45 a4             	cmp    -0x5c(%ebp),%eax
f0123487:	74 17                	je     f01234a0 <test_kheap_phys_addr+0x40b>
f0123489:	83 ec 04             	sub    $0x4,%esp
f012348c:	68 90 a8 13 f0       	push   $0xf013a890
f0123491:	68 1b 08 00 00       	push   $0x81b
f0123496:	68 76 a8 13 f0       	push   $0xf013a876
f012349b:	e8 06 cd fd ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f01234a0:	8b 5d a8             	mov    -0x58(%ebp),%ebx
f01234a3:	e8 16 8f fe ff       	call   f010c3be <sys_calculate_free_frames>
f01234a8:	29 c3                	sub    %eax,%ebx
f01234aa:	89 d8                	mov    %ebx,%eax
f01234ac:	83 f8 01             	cmp    $0x1,%eax
f01234af:	74 17                	je     f01234c8 <test_kheap_phys_addr+0x433>
f01234b1:	83 ec 04             	sub    $0x4,%esp
f01234b4:	68 f8 a8 13 f0       	push   $0xf013a8f8
f01234b9:	68 1c 08 00 00       	push   $0x81c
f01234be:	68 76 a8 13 f0       	push   $0xf013a876
f01234c3:	e8 de cc fd ff       	call   f01001a6 <_panic>

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f01234c8:	e8 f1 8e fe ff       	call   f010c3be <sys_calculate_free_frames>
f01234cd:	89 45 a8             	mov    %eax,-0x58(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01234d0:	e8 b7 07 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f01234d5:	89 45 a4             	mov    %eax,-0x5c(%ebp)
		ptr_allocations[3] = kmalloc(2*kilo);
f01234d8:	83 ec 0c             	sub    $0xc,%esp
f01234db:	68 00 08 00 00       	push   $0x800
f01234e0:	e8 df 40 fe ff       	call   f01075c4 <kmalloc>
f01234e5:	83 c4 10             	add    $0x10,%esp
f01234e8:	89 85 30 fd ff ff    	mov    %eax,-0x2d0(%ebp)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01234ee:	8b 85 30 fd ff ff    	mov    -0x2d0(%ebp),%eax
f01234f4:	89 c1                	mov    %eax,%ecx
f01234f6:	c7 85 58 ff ff ff 00 	movl   $0x1000,-0xa8(%ebp)
f01234fd:	10 00 00 
f0123500:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f0123506:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012350b:	89 85 54 ff ff ff    	mov    %eax,-0xac(%ebp)
f0123511:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f0123517:	ba 00 00 00 00       	mov    $0x0,%edx
f012351c:	f7 b5 58 ff ff ff    	divl   -0xa8(%ebp)
f0123522:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f0123528:	29 d0                	sub    %edx,%eax
f012352a:	89 c3                	mov    %eax,%ebx
f012352c:	c7 85 50 ff ff ff 00 	movl   $0x1000,-0xb0(%ebp)
f0123533:	10 00 00 
f0123536:	a0 bc 0e 6c f0       	mov    0xf06c0ebc,%al
f012353b:	0f b6 d0             	movzbl %al,%edx
f012353e:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f0123544:	01 d0                	add    %edx,%eax
f0123546:	48                   	dec    %eax
f0123547:	89 85 4c ff ff ff    	mov    %eax,-0xb4(%ebp)
f012354d:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0123553:	ba 00 00 00 00       	mov    $0x0,%edx
f0123558:	f7 b5 50 ff ff ff    	divl   -0xb0(%ebp)
f012355e:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0123564:	29 d0                	sub    %edx,%eax
f0123566:	01 c3                	add    %eax,%ebx
f0123568:	c7 85 48 ff ff ff 00 	movl   $0x1000,-0xb8(%ebp)
f012356f:	10 00 00 
f0123572:	a0 bc 0e 6c f0       	mov    0xf06c0ebc,%al
f0123577:	0f b6 c0             	movzbl %al,%eax
f012357a:	c1 e0 04             	shl    $0x4,%eax
f012357d:	89 c2                	mov    %eax,%edx
f012357f:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f0123585:	01 d0                	add    %edx,%eax
f0123587:	48                   	dec    %eax
f0123588:	89 85 44 ff ff ff    	mov    %eax,-0xbc(%ebp)
f012358e:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0123594:	ba 00 00 00 00       	mov    $0x0,%edx
f0123599:	f7 b5 48 ff ff ff    	divl   -0xb8(%ebp)
f012359f:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f01235a5:	29 d0                	sub    %edx,%eax
f01235a7:	01 d8                	add    %ebx,%eax
f01235a9:	2d 00 b0 bf 09       	sub    $0x9bfb000,%eax
f01235ae:	39 c1                	cmp    %eax,%ecx
f01235b0:	74 17                	je     f01235c9 <test_kheap_phys_addr+0x534>
f01235b2:	83 ec 04             	sub    $0x4,%esp
f01235b5:	68 5c a9 13 f0       	push   $0xf013a95c
f01235ba:	68 22 08 00 00       	push   $0x822
f01235bf:	68 76 a8 13 f0       	push   $0xf013a876
f01235c4:	e8 dd cb fd ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01235c9:	e8 be 06 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f01235ce:	3b 45 a4             	cmp    -0x5c(%ebp),%eax
f01235d1:	74 17                	je     f01235ea <test_kheap_phys_addr+0x555>
f01235d3:	83 ec 04             	sub    $0x4,%esp
f01235d6:	68 90 a8 13 f0       	push   $0xf013a890
f01235db:	68 23 08 00 00       	push   $0x823
f01235e0:	68 76 a8 13 f0       	push   $0xf013a876
f01235e5:	e8 bc cb fd ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f01235ea:	8b 5d a8             	mov    -0x58(%ebp),%ebx
f01235ed:	e8 cc 8d fe ff       	call   f010c3be <sys_calculate_free_frames>
f01235f2:	29 c3                	sub    %eax,%ebx
f01235f4:	89 d8                	mov    %ebx,%eax
f01235f6:	83 f8 01             	cmp    $0x1,%eax
f01235f9:	74 17                	je     f0123612 <test_kheap_phys_addr+0x57d>
f01235fb:	83 ec 04             	sub    $0x4,%esp
f01235fe:	68 f8 a8 13 f0       	push   $0xf013a8f8
f0123603:	68 24 08 00 00       	push   $0x824
f0123608:	68 76 a8 13 f0       	push   $0xf013a876
f012360d:	e8 94 cb fd ff       	call   f01001a6 <_panic>

		//7 KB
		freeFrames = sys_calculate_free_frames() ;
f0123612:	e8 a7 8d fe ff       	call   f010c3be <sys_calculate_free_frames>
f0123617:	89 45 a8             	mov    %eax,-0x58(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012361a:	e8 6d 06 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f012361f:	89 45 a4             	mov    %eax,-0x5c(%ebp)
		ptr_allocations[4] = kmalloc(7*kilo);
f0123622:	83 ec 0c             	sub    $0xc,%esp
f0123625:	68 00 1c 00 00       	push   $0x1c00
f012362a:	e8 95 3f fe ff       	call   f01075c4 <kmalloc>
f012362f:	83 c4 10             	add    $0x10,%esp
f0123632:	89 85 34 fd ff ff    	mov    %eax,-0x2cc(%ebp)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0123638:	8b 85 34 fd ff ff    	mov    -0x2cc(%ebp),%eax
f012363e:	89 c1                	mov    %eax,%ecx
f0123640:	c7 85 40 ff ff ff 00 	movl   $0x1000,-0xc0(%ebp)
f0123647:	10 00 00 
f012364a:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0123650:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0123655:	89 85 3c ff ff ff    	mov    %eax,-0xc4(%ebp)
f012365b:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f0123661:	ba 00 00 00 00       	mov    $0x0,%edx
f0123666:	f7 b5 40 ff ff ff    	divl   -0xc0(%ebp)
f012366c:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f0123672:	29 d0                	sub    %edx,%eax
f0123674:	89 c3                	mov    %eax,%ebx
f0123676:	c7 85 38 ff ff ff 00 	movl   $0x1000,-0xc8(%ebp)
f012367d:	10 00 00 
f0123680:	a0 bc 0e 6c f0       	mov    0xf06c0ebc,%al
f0123685:	0f b6 d0             	movzbl %al,%edx
f0123688:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f012368e:	01 d0                	add    %edx,%eax
f0123690:	48                   	dec    %eax
f0123691:	89 85 34 ff ff ff    	mov    %eax,-0xcc(%ebp)
f0123697:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f012369d:	ba 00 00 00 00       	mov    $0x0,%edx
f01236a2:	f7 b5 38 ff ff ff    	divl   -0xc8(%ebp)
f01236a8:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f01236ae:	29 d0                	sub    %edx,%eax
f01236b0:	01 c3                	add    %eax,%ebx
f01236b2:	c7 85 30 ff ff ff 00 	movl   $0x1000,-0xd0(%ebp)
f01236b9:	10 00 00 
f01236bc:	a0 bc 0e 6c f0       	mov    0xf06c0ebc,%al
f01236c1:	0f b6 c0             	movzbl %al,%eax
f01236c4:	c1 e0 04             	shl    $0x4,%eax
f01236c7:	89 c2                	mov    %eax,%edx
f01236c9:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f01236cf:	01 d0                	add    %edx,%eax
f01236d1:	48                   	dec    %eax
f01236d2:	89 85 2c ff ff ff    	mov    %eax,-0xd4(%ebp)
f01236d8:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f01236de:	ba 00 00 00 00       	mov    $0x0,%edx
f01236e3:	f7 b5 30 ff ff ff    	divl   -0xd0(%ebp)
f01236e9:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f01236ef:	29 d0                	sub    %edx,%eax
f01236f1:	01 d8                	add    %ebx,%eax
f01236f3:	2d 00 a0 bf 09       	sub    $0x9bfa000,%eax
f01236f8:	39 c1                	cmp    %eax,%ecx
f01236fa:	74 17                	je     f0123713 <test_kheap_phys_addr+0x67e>
f01236fc:	83 ec 04             	sub    $0x4,%esp
f01236ff:	68 5c a9 13 f0       	push   $0xf013a95c
f0123704:	68 2a 08 00 00       	push   $0x82a
f0123709:	68 76 a8 13 f0       	push   $0xf013a876
f012370e:	e8 93 ca fd ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0123713:	e8 74 05 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0123718:	3b 45 a4             	cmp    -0x5c(%ebp),%eax
f012371b:	74 17                	je     f0123734 <test_kheap_phys_addr+0x69f>
f012371d:	83 ec 04             	sub    $0x4,%esp
f0123720:	68 90 a8 13 f0       	push   $0xf013a890
f0123725:	68 2b 08 00 00       	push   $0x82b
f012372a:	68 76 a8 13 f0       	push   $0xf013a876
f012372f:	e8 72 ca fd ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: pages are not loaded successfully into memory");
f0123734:	8b 5d a8             	mov    -0x58(%ebp),%ebx
f0123737:	e8 82 8c fe ff       	call   f010c3be <sys_calculate_free_frames>
f012373c:	29 c3                	sub    %eax,%ebx
f012373e:	89 d8                	mov    %ebx,%eax
f0123740:	83 f8 02             	cmp    $0x2,%eax
f0123743:	74 17                	je     f012375c <test_kheap_phys_addr+0x6c7>
f0123745:	83 ec 04             	sub    $0x4,%esp
f0123748:	68 f8 a8 13 f0       	push   $0xf013a8f8
f012374d:	68 2c 08 00 00       	push   $0x82c
f0123752:	68 76 a8 13 f0       	push   $0xf013a876
f0123757:	e8 4a ca fd ff       	call   f01001a6 <_panic>

		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f012375c:	e8 5d 8c fe ff       	call   f010c3be <sys_calculate_free_frames>
f0123761:	89 45 a8             	mov    %eax,-0x58(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0123764:	e8 23 05 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0123769:	89 45 a4             	mov    %eax,-0x5c(%ebp)
		ptr_allocations[5] = kmalloc(3*Mega-kilo);
f012376c:	83 ec 0c             	sub    $0xc,%esp
f012376f:	68 00 fc 2f 00       	push   $0x2ffc00
f0123774:	e8 4b 3e fe ff       	call   f01075c4 <kmalloc>
f0123779:	83 c4 10             	add    $0x10,%esp
f012377c:	89 85 38 fd ff ff    	mov    %eax,-0x2c8(%ebp)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo) ) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0123782:	8b 85 38 fd ff ff    	mov    -0x2c8(%ebp),%eax
f0123788:	89 c1                	mov    %eax,%ecx
f012378a:	c7 85 28 ff ff ff 00 	movl   $0x1000,-0xd8(%ebp)
f0123791:	10 00 00 
f0123794:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f012379a:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012379f:	89 85 24 ff ff ff    	mov    %eax,-0xdc(%ebp)
f01237a5:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f01237ab:	ba 00 00 00 00       	mov    $0x0,%edx
f01237b0:	f7 b5 28 ff ff ff    	divl   -0xd8(%ebp)
f01237b6:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f01237bc:	29 d0                	sub    %edx,%eax
f01237be:	89 c3                	mov    %eax,%ebx
f01237c0:	c7 85 20 ff ff ff 00 	movl   $0x1000,-0xe0(%ebp)
f01237c7:	10 00 00 
f01237ca:	a0 bc 0e 6c f0       	mov    0xf06c0ebc,%al
f01237cf:	0f b6 d0             	movzbl %al,%edx
f01237d2:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f01237d8:	01 d0                	add    %edx,%eax
f01237da:	48                   	dec    %eax
f01237db:	89 85 1c ff ff ff    	mov    %eax,-0xe4(%ebp)
f01237e1:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f01237e7:	ba 00 00 00 00       	mov    $0x0,%edx
f01237ec:	f7 b5 20 ff ff ff    	divl   -0xe0(%ebp)
f01237f2:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f01237f8:	29 d0                	sub    %edx,%eax
f01237fa:	01 c3                	add    %eax,%ebx
f01237fc:	c7 85 18 ff ff ff 00 	movl   $0x1000,-0xe8(%ebp)
f0123803:	10 00 00 
f0123806:	a0 bc 0e 6c f0       	mov    0xf06c0ebc,%al
f012380b:	0f b6 c0             	movzbl %al,%eax
f012380e:	c1 e0 04             	shl    $0x4,%eax
f0123811:	89 c2                	mov    %eax,%edx
f0123813:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f0123819:	01 d0                	add    %edx,%eax
f012381b:	48                   	dec    %eax
f012381c:	89 85 14 ff ff ff    	mov    %eax,-0xec(%ebp)
f0123822:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f0123828:	ba 00 00 00 00       	mov    $0x0,%edx
f012382d:	f7 b5 18 ff ff ff    	divl   -0xe8(%ebp)
f0123833:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f0123839:	29 d0                	sub    %edx,%eax
f012383b:	01 d8                	add    %ebx,%eax
f012383d:	2d 00 80 bf 09       	sub    $0x9bf8000,%eax
f0123842:	39 c1                	cmp    %eax,%ecx
f0123844:	74 17                	je     f012385d <test_kheap_phys_addr+0x7c8>
f0123846:	83 ec 04             	sub    $0x4,%esp
f0123849:	68 5c a9 13 f0       	push   $0xf013a95c
f012384e:	68 32 08 00 00       	push   $0x832
f0123853:	68 76 a8 13 f0       	push   $0xf013a876
f0123858:	e8 49 c9 fd ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012385d:	e8 2a 04 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0123862:	3b 45 a4             	cmp    -0x5c(%ebp),%eax
f0123865:	74 17                	je     f012387e <test_kheap_phys_addr+0x7e9>
f0123867:	83 ec 04             	sub    $0x4,%esp
f012386a:	68 90 a8 13 f0       	push   $0xf013a890
f012386f:	68 33 08 00 00       	push   $0x833
f0123874:	68 76 a8 13 f0       	push   $0xf013a876
f0123879:	e8 28 c9 fd ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
f012387e:	8b 5d a8             	mov    -0x58(%ebp),%ebx
f0123881:	e8 38 8b fe ff       	call   f010c3be <sys_calculate_free_frames>
f0123886:	29 c3                	sub    %eax,%ebx
f0123888:	89 d8                	mov    %ebx,%eax
f012388a:	3d 00 03 00 00       	cmp    $0x300,%eax
f012388f:	74 17                	je     f01238a8 <test_kheap_phys_addr+0x813>
f0123891:	83 ec 04             	sub    $0x4,%esp
f0123894:	68 f8 a8 13 f0       	push   $0xf013a8f8
f0123899:	68 34 08 00 00       	push   $0x834
f012389e:	68 76 a8 13 f0       	push   $0xf013a876
f01238a3:	e8 fe c8 fd ff       	call   f01001a6 <_panic>

		//6 MB
		freeFrames = sys_calculate_free_frames() ;
f01238a8:	e8 11 8b fe ff       	call   f010c3be <sys_calculate_free_frames>
f01238ad:	89 45 a8             	mov    %eax,-0x58(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01238b0:	e8 d7 03 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f01238b5:	89 45 a4             	mov    %eax,-0x5c(%ebp)
		ptr_allocations[6] = kmalloc(6*Mega-kilo);
f01238b8:	83 ec 0c             	sub    $0xc,%esp
f01238bb:	68 00 fc 5f 00       	push   $0x5ffc00
f01238c0:	e8 ff 3c fe ff       	call   f01075c4 <kmalloc>
f01238c5:	83 c4 10             	add    $0x10,%esp
f01238c8:	89 85 3c fd ff ff    	mov    %eax,-0x2c4(%ebp)
		if ((uint32) ptr_allocations[6] != (ACTUAL_START + 7*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01238ce:	8b 85 3c fd ff ff    	mov    -0x2c4(%ebp),%eax
f01238d4:	89 c1                	mov    %eax,%ecx
f01238d6:	c7 85 10 ff ff ff 00 	movl   $0x1000,-0xf0(%ebp)
f01238dd:	10 00 00 
f01238e0:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f01238e6:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01238eb:	89 85 0c ff ff ff    	mov    %eax,-0xf4(%ebp)
f01238f1:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f01238f7:	ba 00 00 00 00       	mov    $0x0,%edx
f01238fc:	f7 b5 10 ff ff ff    	divl   -0xf0(%ebp)
f0123902:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f0123908:	29 d0                	sub    %edx,%eax
f012390a:	89 c3                	mov    %eax,%ebx
f012390c:	c7 85 08 ff ff ff 00 	movl   $0x1000,-0xf8(%ebp)
f0123913:	10 00 00 
f0123916:	a0 bc 0e 6c f0       	mov    0xf06c0ebc,%al
f012391b:	0f b6 d0             	movzbl %al,%edx
f012391e:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f0123924:	01 d0                	add    %edx,%eax
f0123926:	48                   	dec    %eax
f0123927:	89 85 04 ff ff ff    	mov    %eax,-0xfc(%ebp)
f012392d:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f0123933:	ba 00 00 00 00       	mov    $0x0,%edx
f0123938:	f7 b5 08 ff ff ff    	divl   -0xf8(%ebp)
f012393e:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f0123944:	29 d0                	sub    %edx,%eax
f0123946:	01 c3                	add    %eax,%ebx
f0123948:	c7 85 00 ff ff ff 00 	movl   $0x1000,-0x100(%ebp)
f012394f:	10 00 00 
f0123952:	a0 bc 0e 6c f0       	mov    0xf06c0ebc,%al
f0123957:	0f b6 c0             	movzbl %al,%eax
f012395a:	c1 e0 04             	shl    $0x4,%eax
f012395d:	89 c2                	mov    %eax,%edx
f012395f:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f0123965:	01 d0                	add    %edx,%eax
f0123967:	48                   	dec    %eax
f0123968:	89 85 fc fe ff ff    	mov    %eax,-0x104(%ebp)
f012396e:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f0123974:	ba 00 00 00 00       	mov    $0x0,%edx
f0123979:	f7 b5 00 ff ff ff    	divl   -0x100(%ebp)
f012397f:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f0123985:	29 d0                	sub    %edx,%eax
f0123987:	01 d8                	add    %ebx,%eax
f0123989:	2d 00 80 8f 09       	sub    $0x98f8000,%eax
f012398e:	39 c1                	cmp    %eax,%ecx
f0123990:	74 17                	je     f01239a9 <test_kheap_phys_addr+0x914>
f0123992:	83 ec 04             	sub    $0x4,%esp
f0123995:	68 5c a9 13 f0       	push   $0xf013a95c
f012399a:	68 3a 08 00 00       	push   $0x83a
f012399f:	68 76 a8 13 f0       	push   $0xf013a876
f01239a4:	e8 fd c7 fd ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01239a9:	e8 de 02 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f01239ae:	3b 45 a4             	cmp    -0x5c(%ebp),%eax
f01239b1:	74 17                	je     f01239ca <test_kheap_phys_addr+0x935>
f01239b3:	83 ec 04             	sub    $0x4,%esp
f01239b6:	68 90 a8 13 f0       	push   $0xf013a890
f01239bb:	68 3b 08 00 00       	push   $0x83b
f01239c0:	68 76 a8 13 f0       	push   $0xf013a876
f01239c5:	e8 dc c7 fd ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1536) panic("Wrong allocation: pages are not loaded successfully into memory");
f01239ca:	8b 5d a8             	mov    -0x58(%ebp),%ebx
f01239cd:	e8 ec 89 fe ff       	call   f010c3be <sys_calculate_free_frames>
f01239d2:	29 c3                	sub    %eax,%ebx
f01239d4:	89 d8                	mov    %ebx,%eax
f01239d6:	3d 00 06 00 00       	cmp    $0x600,%eax
f01239db:	74 17                	je     f01239f4 <test_kheap_phys_addr+0x95f>
f01239dd:	83 ec 04             	sub    $0x4,%esp
f01239e0:	68 f8 a8 13 f0       	push   $0xf013a8f8
f01239e5:	68 3c 08 00 00       	push   $0x83c
f01239ea:	68 76 a8 13 f0       	push   $0xf013a876
f01239ef:	e8 b2 c7 fd ff       	call   f01001a6 <_panic>

		//14 KB
		freeFrames = sys_calculate_free_frames() ;
f01239f4:	e8 c5 89 fe ff       	call   f010c3be <sys_calculate_free_frames>
f01239f9:	89 45 a8             	mov    %eax,-0x58(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01239fc:	e8 8b 02 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0123a01:	89 45 a4             	mov    %eax,-0x5c(%ebp)
		ptr_allocations[7] = kmalloc(14*kilo);
f0123a04:	83 ec 0c             	sub    $0xc,%esp
f0123a07:	68 00 38 00 00       	push   $0x3800
f0123a0c:	e8 b3 3b fe ff       	call   f01075c4 <kmalloc>
f0123a11:	83 c4 10             	add    $0x10,%esp
f0123a14:	89 85 40 fd ff ff    	mov    %eax,-0x2c0(%ebp)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 13*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0123a1a:	8b 85 40 fd ff ff    	mov    -0x2c0(%ebp),%eax
f0123a20:	89 c1                	mov    %eax,%ecx
f0123a22:	c7 85 f8 fe ff ff 00 	movl   $0x1000,-0x108(%ebp)
f0123a29:	10 00 00 
f0123a2c:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f0123a32:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0123a37:	89 85 f4 fe ff ff    	mov    %eax,-0x10c(%ebp)
f0123a3d:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f0123a43:	ba 00 00 00 00       	mov    $0x0,%edx
f0123a48:	f7 b5 f8 fe ff ff    	divl   -0x108(%ebp)
f0123a4e:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f0123a54:	29 d0                	sub    %edx,%eax
f0123a56:	89 c3                	mov    %eax,%ebx
f0123a58:	c7 85 f0 fe ff ff 00 	movl   $0x1000,-0x110(%ebp)
f0123a5f:	10 00 00 
f0123a62:	a0 bc 0e 6c f0       	mov    0xf06c0ebc,%al
f0123a67:	0f b6 d0             	movzbl %al,%edx
f0123a6a:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f0123a70:	01 d0                	add    %edx,%eax
f0123a72:	48                   	dec    %eax
f0123a73:	89 85 ec fe ff ff    	mov    %eax,-0x114(%ebp)
f0123a79:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f0123a7f:	ba 00 00 00 00       	mov    $0x0,%edx
f0123a84:	f7 b5 f0 fe ff ff    	divl   -0x110(%ebp)
f0123a8a:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f0123a90:	29 d0                	sub    %edx,%eax
f0123a92:	01 c3                	add    %eax,%ebx
f0123a94:	c7 85 e8 fe ff ff 00 	movl   $0x1000,-0x118(%ebp)
f0123a9b:	10 00 00 
f0123a9e:	a0 bc 0e 6c f0       	mov    0xf06c0ebc,%al
f0123aa3:	0f b6 c0             	movzbl %al,%eax
f0123aa6:	c1 e0 04             	shl    $0x4,%eax
f0123aa9:	89 c2                	mov    %eax,%edx
f0123aab:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f0123ab1:	01 d0                	add    %edx,%eax
f0123ab3:	48                   	dec    %eax
f0123ab4:	89 85 e4 fe ff ff    	mov    %eax,-0x11c(%ebp)
f0123aba:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f0123ac0:	ba 00 00 00 00       	mov    $0x0,%edx
f0123ac5:	f7 b5 e8 fe ff ff    	divl   -0x118(%ebp)
f0123acb:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f0123ad1:	29 d0                	sub    %edx,%eax
f0123ad3:	01 d8                	add    %ebx,%eax
f0123ad5:	2d 00 80 2f 09       	sub    $0x92f8000,%eax
f0123ada:	39 c1                	cmp    %eax,%ecx
f0123adc:	74 17                	je     f0123af5 <test_kheap_phys_addr+0xa60>
f0123ade:	83 ec 04             	sub    $0x4,%esp
f0123ae1:	68 5c a9 13 f0       	push   $0xf013a95c
f0123ae6:	68 42 08 00 00       	push   $0x842
f0123aeb:	68 76 a8 13 f0       	push   $0xf013a876
f0123af0:	e8 b1 c6 fd ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0123af5:	e8 92 01 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0123afa:	3b 45 a4             	cmp    -0x5c(%ebp),%eax
f0123afd:	74 17                	je     f0123b16 <test_kheap_phys_addr+0xa81>
f0123aff:	83 ec 04             	sub    $0x4,%esp
f0123b02:	68 90 a8 13 f0       	push   $0xf013a890
f0123b07:	68 43 08 00 00       	push   $0x843
f0123b0c:	68 76 a8 13 f0       	push   $0xf013a876
f0123b11:	e8 90 c6 fd ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 4) panic("Wrong allocation: pages are not loaded successfully into memory");
f0123b16:	8b 5d a8             	mov    -0x58(%ebp),%ebx
f0123b19:	e8 a0 88 fe ff       	call   f010c3be <sys_calculate_free_frames>
f0123b1e:	29 c3                	sub    %eax,%ebx
f0123b20:	89 d8                	mov    %ebx,%eax
f0123b22:	83 f8 04             	cmp    $0x4,%eax
f0123b25:	74 17                	je     f0123b3e <test_kheap_phys_addr+0xaa9>
f0123b27:	83 ec 04             	sub    $0x4,%esp
f0123b2a:	68 f8 a8 13 f0       	push   $0xf013a8f8
f0123b2f:	68 44 08 00 00       	push   $0x844
f0123b34:	68 76 a8 13 f0       	push   $0xf013a876
f0123b39:	e8 68 c6 fd ff       	call   f01001a6 <_panic>
	}

	//test kheap_physical_address after kmalloc only [40%]
	{
f0123b3e:	89 e0                	mov    %esp,%eax
f0123b40:	89 c6                	mov    %eax,%esi
		uint32 va;
		uint32 endVA = ACTUAL_START + 13*Mega + 32*kilo;
f0123b42:	c7 85 e0 fe ff ff 00 	movl   $0x1000,-0x120(%ebp)
f0123b49:	10 00 00 
f0123b4c:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f0123b52:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0123b57:	89 85 dc fe ff ff    	mov    %eax,-0x124(%ebp)
f0123b5d:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f0123b63:	ba 00 00 00 00       	mov    $0x0,%edx
f0123b68:	f7 b5 e0 fe ff ff    	divl   -0x120(%ebp)
f0123b6e:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f0123b74:	29 d0                	sub    %edx,%eax
f0123b76:	89 c1                	mov    %eax,%ecx
f0123b78:	c7 85 d8 fe ff ff 00 	movl   $0x1000,-0x128(%ebp)
f0123b7f:	10 00 00 
f0123b82:	a0 bc 0e 6c f0       	mov    0xf06c0ebc,%al
f0123b87:	0f b6 d0             	movzbl %al,%edx
f0123b8a:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f0123b90:	01 d0                	add    %edx,%eax
f0123b92:	48                   	dec    %eax
f0123b93:	89 85 d4 fe ff ff    	mov    %eax,-0x12c(%ebp)
f0123b99:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f0123b9f:	ba 00 00 00 00       	mov    $0x0,%edx
f0123ba4:	f7 b5 d8 fe ff ff    	divl   -0x128(%ebp)
f0123baa:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f0123bb0:	29 d0                	sub    %edx,%eax
f0123bb2:	01 c1                	add    %eax,%ecx
f0123bb4:	c7 85 d0 fe ff ff 00 	movl   $0x1000,-0x130(%ebp)
f0123bbb:	10 00 00 
f0123bbe:	a0 bc 0e 6c f0       	mov    0xf06c0ebc,%al
f0123bc3:	0f b6 c0             	movzbl %al,%eax
f0123bc6:	c1 e0 04             	shl    $0x4,%eax
f0123bc9:	89 c2                	mov    %eax,%edx
f0123bcb:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f0123bd1:	01 d0                	add    %edx,%eax
f0123bd3:	48                   	dec    %eax
f0123bd4:	89 85 cc fe ff ff    	mov    %eax,-0x134(%ebp)
f0123bda:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f0123be0:	ba 00 00 00 00       	mov    $0x0,%edx
f0123be5:	f7 b5 d0 fe ff ff    	divl   -0x130(%ebp)
f0123beb:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f0123bf1:	29 d0                	sub    %edx,%eax
f0123bf3:	01 c8                	add    %ecx,%eax
f0123bf5:	2d 00 40 2f 09       	sub    $0x92f4000,%eax
f0123bfa:	89 85 c8 fe ff ff    	mov    %eax,-0x138(%ebp)
		uint32 allPAs[(13*Mega + 32*kilo+INITIAL_KHEAP_ALLOCATIONS)/PAGE_SIZE] ;
f0123c00:	c7 85 c4 fe ff ff 00 	movl   $0x1000,-0x13c(%ebp)
f0123c07:	10 00 00 
f0123c0a:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f0123c10:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0123c15:	89 85 c0 fe ff ff    	mov    %eax,-0x140(%ebp)
f0123c1b:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f0123c21:	ba 00 00 00 00       	mov    $0x0,%edx
f0123c26:	f7 b5 c4 fe ff ff    	divl   -0x13c(%ebp)
f0123c2c:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f0123c32:	29 d0                	sub    %edx,%eax
f0123c34:	89 c1                	mov    %eax,%ecx
f0123c36:	c7 85 bc fe ff ff 00 	movl   $0x1000,-0x144(%ebp)
f0123c3d:	10 00 00 
f0123c40:	a0 bc 0e 6c f0       	mov    0xf06c0ebc,%al
f0123c45:	0f b6 d0             	movzbl %al,%edx
f0123c48:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f0123c4e:	01 d0                	add    %edx,%eax
f0123c50:	48                   	dec    %eax
f0123c51:	89 85 b8 fe ff ff    	mov    %eax,-0x148(%ebp)
f0123c57:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f0123c5d:	ba 00 00 00 00       	mov    $0x0,%edx
f0123c62:	f7 b5 bc fe ff ff    	divl   -0x144(%ebp)
f0123c68:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f0123c6e:	29 d0                	sub    %edx,%eax
f0123c70:	01 c1                	add    %eax,%ecx
f0123c72:	c7 85 b4 fe ff ff 00 	movl   $0x1000,-0x14c(%ebp)
f0123c79:	10 00 00 
f0123c7c:	a0 bc 0e 6c f0       	mov    0xf06c0ebc,%al
f0123c81:	0f b6 c0             	movzbl %al,%eax
f0123c84:	c1 e0 04             	shl    $0x4,%eax
f0123c87:	89 c2                	mov    %eax,%edx
f0123c89:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f0123c8f:	01 d0                	add    %edx,%eax
f0123c91:	48                   	dec    %eax
f0123c92:	89 85 b0 fe ff ff    	mov    %eax,-0x150(%ebp)
f0123c98:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f0123c9e:	ba 00 00 00 00       	mov    $0x0,%edx
f0123ca3:	f7 b5 b4 fe ff ff    	divl   -0x14c(%ebp)
f0123ca9:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f0123caf:	29 d0                	sub    %edx,%eax
f0123cb1:	01 c8                	add    %ecx,%eax
f0123cb3:	05 00 c0 d0 00       	add    $0xd0c000,%eax
f0123cb8:	c1 e8 0c             	shr    $0xc,%eax
f0123cbb:	89 c2                	mov    %eax,%edx
f0123cbd:	4a                   	dec    %edx
f0123cbe:	89 95 ac fe ff ff    	mov    %edx,-0x154(%ebp)
f0123cc4:	c1 e0 02             	shl    $0x2,%eax
f0123cc7:	8d 50 03             	lea    0x3(%eax),%edx
f0123cca:	b8 10 00 00 00       	mov    $0x10,%eax
f0123ccf:	48                   	dec    %eax
f0123cd0:	01 d0                	add    %edx,%eax
f0123cd2:	bf 10 00 00 00       	mov    $0x10,%edi
f0123cd7:	ba 00 00 00 00       	mov    $0x0,%edx
f0123cdc:	f7 f7                	div    %edi
f0123cde:	6b c0 10             	imul   $0x10,%eax,%eax
f0123ce1:	29 c4                	sub    %eax,%esp
f0123ce3:	89 e0                	mov    %esp,%eax
f0123ce5:	83 c0 03             	add    $0x3,%eax
f0123ce8:	c1 e8 02             	shr    $0x2,%eax
f0123ceb:	c1 e0 02             	shl    $0x2,%eax
f0123cee:	89 85 a8 fe ff ff    	mov    %eax,-0x158(%ebp)
		i = 0;
f0123cf4:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
		for (va = (KERNEL_HEAP_START + DYNAMIC_ALLOCATOR_DS); va < endVA; va+=PAGE_SIZE)
f0123cfb:	c7 85 a4 fe ff ff 00 	movl   $0x1000,-0x15c(%ebp)
f0123d02:	10 00 00 
f0123d05:	8b 85 a4 fe ff ff    	mov    -0x15c(%ebp),%eax
f0123d0b:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0123d10:	89 85 a0 fe ff ff    	mov    %eax,-0x160(%ebp)
f0123d16:	8b 85 a0 fe ff ff    	mov    -0x160(%ebp),%eax
f0123d1c:	ba 00 00 00 00       	mov    $0x0,%edx
f0123d21:	f7 b5 a4 fe ff ff    	divl   -0x15c(%ebp)
f0123d27:	8b 85 a0 fe ff ff    	mov    -0x160(%ebp),%eax
f0123d2d:	29 d0                	sub    %edx,%eax
f0123d2f:	2d 00 00 00 0a       	sub    $0xa000000,%eax
f0123d34:	89 45 e0             	mov    %eax,-0x20(%ebp)
f0123d37:	eb 29                	jmp    f0123d62 <test_kheap_phys_addr+0xccd>
		{
			allPAs[i++] = kheap_physical_address(va);
f0123d39:	8b 5d e4             	mov    -0x1c(%ebp),%ebx
f0123d3c:	8d 43 01             	lea    0x1(%ebx),%eax
f0123d3f:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f0123d42:	83 ec 0c             	sub    $0xc,%esp
f0123d45:	ff 75 e0             	pushl  -0x20(%ebp)
f0123d48:	e8 d7 38 fe ff       	call   f0107624 <kheap_physical_address>
f0123d4d:	83 c4 10             	add    $0x10,%esp
f0123d50:	89 c2                	mov    %eax,%edx
f0123d52:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f0123d58:	89 14 98             	mov    %edx,(%eax,%ebx,4)
	{
		uint32 va;
		uint32 endVA = ACTUAL_START + 13*Mega + 32*kilo;
		uint32 allPAs[(13*Mega + 32*kilo+INITIAL_KHEAP_ALLOCATIONS)/PAGE_SIZE] ;
		i = 0;
		for (va = (KERNEL_HEAP_START + DYNAMIC_ALLOCATOR_DS); va < endVA; va+=PAGE_SIZE)
f0123d5b:	81 45 e0 00 10 00 00 	addl   $0x1000,-0x20(%ebp)
f0123d62:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0123d65:	3b 85 c8 fe ff ff    	cmp    -0x138(%ebp),%eax
f0123d6b:	72 cc                	jb     f0123d39 <test_kheap_phys_addr+0xca4>
		{
			allPAs[i++] = kheap_physical_address(va);
		}
		int ii = i ;
f0123d6d:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0123d70:	89 85 9c fe ff ff    	mov    %eax,-0x164(%ebp)
		i = 0;
f0123d76:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
		int j;
		for (va = (KERNEL_HEAP_START + DYNAMIC_ALLOCATOR_DS); va < endVA; )
f0123d7d:	c7 85 98 fe ff ff 00 	movl   $0x1000,-0x168(%ebp)
f0123d84:	10 00 00 
f0123d87:	8b 85 98 fe ff ff    	mov    -0x168(%ebp),%eax
f0123d8d:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0123d92:	89 85 94 fe ff ff    	mov    %eax,-0x16c(%ebp)
f0123d98:	8b 85 94 fe ff ff    	mov    -0x16c(%ebp),%eax
f0123d9e:	ba 00 00 00 00       	mov    $0x0,%edx
f0123da3:	f7 b5 98 fe ff ff    	divl   -0x168(%ebp)
f0123da9:	8b 85 94 fe ff ff    	mov    -0x16c(%ebp),%eax
f0123daf:	29 d0                	sub    %edx,%eax
f0123db1:	2d 00 00 00 0a       	sub    $0xa000000,%eax
f0123db6:	89 45 e0             	mov    %eax,-0x20(%ebp)
f0123db9:	e9 ab 00 00 00       	jmp    f0123e69 <test_kheap_phys_addr+0xdd4>
		{
			uint32 *ptr_table ;
			get_page_table(ptr_page_directory, va, &ptr_table);
f0123dbe:	a1 b8 0e 6c f0       	mov    0xf06c0eb8,%eax
f0123dc3:	83 ec 04             	sub    $0x4,%esp
f0123dc6:	8d 95 20 fd ff ff    	lea    -0x2e0(%ebp),%edx
f0123dcc:	52                   	push   %edx
f0123dcd:	ff 75 e0             	pushl  -0x20(%ebp)
f0123dd0:	50                   	push   %eax
f0123dd1:	e8 93 2b fe ff       	call   f0106969 <get_page_table>
f0123dd6:	83 c4 10             	add    $0x10,%esp
			if (ptr_table == NULL)
f0123dd9:	8b 85 20 fd ff ff    	mov    -0x2e0(%ebp),%eax
f0123ddf:	85 c0                	test   %eax,%eax
f0123de1:	75 17                	jne    f0123dfa <test_kheap_phys_addr+0xd65>
				panic("one of the kernel tables is wrongly removed! Tables of Kernel Heap should not be removed");
f0123de3:	83 ec 04             	sub    $0x4,%esp
f0123de6:	68 18 b2 13 f0       	push   $0xf013b218
f0123deb:	68 59 08 00 00       	push   $0x859
f0123df0:	68 76 a8 13 f0       	push   $0xf013a876
f0123df5:	e8 ac c3 fd ff       	call   f01001a6 <_panic>

			for (j = PTX(va); i < ii && j < 1024; ++j, ++i)
f0123dfa:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0123dfd:	c1 e8 0c             	shr    $0xc,%eax
f0123e00:	25 ff 03 00 00       	and    $0x3ff,%eax
f0123e05:	89 45 dc             	mov    %eax,-0x24(%ebp)
f0123e08:	eb 4b                	jmp    f0123e55 <test_kheap_phys_addr+0xdc0>
			{
				if ((ptr_table[j] & 0xFFFFF000) != allPAs[i])
f0123e0a:	8b 85 20 fd ff ff    	mov    -0x2e0(%ebp),%eax
f0123e10:	8b 55 dc             	mov    -0x24(%ebp),%edx
f0123e13:	c1 e2 02             	shl    $0x2,%edx
f0123e16:	01 d0                	add    %edx,%eax
f0123e18:	8b 00                	mov    (%eax),%eax
f0123e1a:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0123e1f:	89 c1                	mov    %eax,%ecx
f0123e21:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f0123e27:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f0123e2a:	8b 04 90             	mov    (%eax,%edx,4),%eax
f0123e2d:	39 c1                	cmp    %eax,%ecx
f0123e2f:	74 17                	je     f0123e48 <test_kheap_phys_addr+0xdb3>
				{
					//cprintf("\nVA = %x, table entry = %x, khep_pa = %x\n",va + j*PAGE_SIZE, (ptr_table[j] & 0xFFFFF000) , allPAs[i]);
					panic("Wrong kheap_physical_address");
f0123e31:	83 ec 04             	sub    $0x4,%esp
f0123e34:	68 71 b2 13 f0       	push   $0xf013b271
f0123e39:	68 60 08 00 00       	push   $0x860
f0123e3e:	68 76 a8 13 f0       	push   $0xf013a876
f0123e43:	e8 5e c3 fd ff       	call   f01001a6 <_panic>
				}
				va+=PAGE_SIZE;
f0123e48:	81 45 e0 00 10 00 00 	addl   $0x1000,-0x20(%ebp)
			uint32 *ptr_table ;
			get_page_table(ptr_page_directory, va, &ptr_table);
			if (ptr_table == NULL)
				panic("one of the kernel tables is wrongly removed! Tables of Kernel Heap should not be removed");

			for (j = PTX(va); i < ii && j < 1024; ++j, ++i)
f0123e4f:	ff 45 dc             	incl   -0x24(%ebp)
f0123e52:	ff 45 e4             	incl   -0x1c(%ebp)
f0123e55:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0123e58:	3b 85 9c fe ff ff    	cmp    -0x164(%ebp),%eax
f0123e5e:	7d 09                	jge    f0123e69 <test_kheap_phys_addr+0xdd4>
f0123e60:	81 7d dc ff 03 00 00 	cmpl   $0x3ff,-0x24(%ebp)
f0123e67:	7e a1                	jle    f0123e0a <test_kheap_phys_addr+0xd75>
			allPAs[i++] = kheap_physical_address(va);
		}
		int ii = i ;
		i = 0;
		int j;
		for (va = (KERNEL_HEAP_START + DYNAMIC_ALLOCATOR_DS); va < endVA; )
f0123e69:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0123e6c:	3b 85 c8 fe ff ff    	cmp    -0x138(%ebp),%eax
f0123e72:	0f 82 46 ff ff ff    	jb     f0123dbe <test_kheap_phys_addr+0xd29>
f0123e78:	89 f4                	mov    %esi,%esp
				}
				va+=PAGE_SIZE;
			}
		}
	}
	cprintf("\nkheap_physical_address: current evaluation = 40%");
f0123e7a:	83 ec 0c             	sub    $0xc,%esp
f0123e7d:	68 90 b2 13 f0       	push   $0xf013b290
f0123e82:	e8 a6 cd fd ff       	call   f0100c2d <cprintf>
f0123e87:	83 c4 10             	add    $0x10,%esp

	//kfree some of the allocated spaces
	{
		//kfree 1st 2 MB
		int freeFrames = sys_calculate_free_frames() ;
f0123e8a:	e8 2f 85 fe ff       	call   f010c3be <sys_calculate_free_frames>
f0123e8f:	89 85 90 fe ff ff    	mov    %eax,-0x170(%ebp)
		int freeDiskFrames = pf_calculate_free_frames() ;
f0123e95:	e8 f2 fd fd ff       	call   f0103c8c <pf_calculate_free_frames>
f0123e9a:	89 85 8c fe ff ff    	mov    %eax,-0x174(%ebp)
		kfree(ptr_allocations[0]);
f0123ea0:	8b 85 24 fd ff ff    	mov    -0x2dc(%ebp),%eax
f0123ea6:	83 ec 0c             	sub    $0xc,%esp
f0123ea9:	50                   	push   %eax
f0123eaa:	e8 2f 37 fe ff       	call   f01075de <kfree>
f0123eaf:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0123eb2:	e8 d5 fd fd ff       	call   f0103c8c <pf_calculate_free_frames>
f0123eb7:	3b 85 8c fe ff ff    	cmp    -0x174(%ebp),%eax
f0123ebd:	74 17                	je     f0123ed6 <test_kheap_phys_addr+0xe41>
f0123ebf:	83 ec 04             	sub    $0x4,%esp
f0123ec2:	68 90 a8 13 f0       	push   $0xf013a890
f0123ec7:	68 6e 08 00 00       	push   $0x86e
f0123ecc:	68 76 a8 13 f0       	push   $0xf013a876
f0123ed1:	e8 d0 c2 fd ff       	call   f01001a6 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512 ) panic("Wrong kfree: pages in memory are not freed correctly");
f0123ed6:	e8 e3 84 fe ff       	call   f010c3be <sys_calculate_free_frames>
f0123edb:	89 c2                	mov    %eax,%edx
f0123edd:	8b 85 90 fe ff ff    	mov    -0x170(%ebp),%eax
f0123ee3:	29 c2                	sub    %eax,%edx
f0123ee5:	89 d0                	mov    %edx,%eax
f0123ee7:	3d 00 02 00 00       	cmp    $0x200,%eax
f0123eec:	74 17                	je     f0123f05 <test_kheap_phys_addr+0xe70>
f0123eee:	83 ec 04             	sub    $0x4,%esp
f0123ef1:	68 00 b0 13 f0       	push   $0xf013b000
f0123ef6:	68 6f 08 00 00       	push   $0x86f
f0123efb:	68 76 a8 13 f0       	push   $0xf013a876
f0123f00:	e8 a1 c2 fd ff       	call   f01001a6 <_panic>

		//kfree 2nd 2 MB
		freeFrames = sys_calculate_free_frames() ;
f0123f05:	e8 b4 84 fe ff       	call   f010c3be <sys_calculate_free_frames>
f0123f0a:	89 85 90 fe ff ff    	mov    %eax,-0x170(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0123f10:	e8 77 fd fd ff       	call   f0103c8c <pf_calculate_free_frames>
f0123f15:	89 85 8c fe ff ff    	mov    %eax,-0x174(%ebp)
		kfree(ptr_allocations[1]);
f0123f1b:	8b 85 28 fd ff ff    	mov    -0x2d8(%ebp),%eax
f0123f21:	83 ec 0c             	sub    $0xc,%esp
f0123f24:	50                   	push   %eax
f0123f25:	e8 b4 36 fe ff       	call   f01075de <kfree>
f0123f2a:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0123f2d:	e8 5a fd fd ff       	call   f0103c8c <pf_calculate_free_frames>
f0123f32:	3b 85 8c fe ff ff    	cmp    -0x174(%ebp),%eax
f0123f38:	74 17                	je     f0123f51 <test_kheap_phys_addr+0xebc>
f0123f3a:	83 ec 04             	sub    $0x4,%esp
f0123f3d:	68 90 a8 13 f0       	push   $0xf013a890
f0123f42:	68 75 08 00 00       	push   $0x875
f0123f47:	68 76 a8 13 f0       	push   $0xf013a876
f0123f4c:	e8 55 c2 fd ff       	call   f01001a6 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512) panic("Wrong kfree: pages in memory are not freed correctly");
f0123f51:	e8 68 84 fe ff       	call   f010c3be <sys_calculate_free_frames>
f0123f56:	89 c2                	mov    %eax,%edx
f0123f58:	8b 85 90 fe ff ff    	mov    -0x170(%ebp),%eax
f0123f5e:	29 c2                	sub    %eax,%edx
f0123f60:	89 d0                	mov    %edx,%eax
f0123f62:	3d 00 02 00 00       	cmp    $0x200,%eax
f0123f67:	74 17                	je     f0123f80 <test_kheap_phys_addr+0xeeb>
f0123f69:	83 ec 04             	sub    $0x4,%esp
f0123f6c:	68 00 b0 13 f0       	push   $0xf013b000
f0123f71:	68 76 08 00 00       	push   $0x876
f0123f76:	68 76 a8 13 f0       	push   $0xf013a876
f0123f7b:	e8 26 c2 fd ff       	call   f01001a6 <_panic>

		//kfree 6 MB
		freeFrames = sys_calculate_free_frames() ;
f0123f80:	e8 39 84 fe ff       	call   f010c3be <sys_calculate_free_frames>
f0123f85:	89 85 90 fe ff ff    	mov    %eax,-0x170(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0123f8b:	e8 fc fc fd ff       	call   f0103c8c <pf_calculate_free_frames>
f0123f90:	89 85 8c fe ff ff    	mov    %eax,-0x174(%ebp)
		kfree(ptr_allocations[6]);
f0123f96:	8b 85 3c fd ff ff    	mov    -0x2c4(%ebp),%eax
f0123f9c:	83 ec 0c             	sub    $0xc,%esp
f0123f9f:	50                   	push   %eax
f0123fa0:	e8 39 36 fe ff       	call   f01075de <kfree>
f0123fa5:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0123fa8:	e8 df fc fd ff       	call   f0103c8c <pf_calculate_free_frames>
f0123fad:	3b 85 8c fe ff ff    	cmp    -0x174(%ebp),%eax
f0123fb3:	74 17                	je     f0123fcc <test_kheap_phys_addr+0xf37>
f0123fb5:	83 ec 04             	sub    $0x4,%esp
f0123fb8:	68 90 a8 13 f0       	push   $0xf013a890
f0123fbd:	68 7c 08 00 00       	push   $0x87c
f0123fc2:	68 76 a8 13 f0       	push   $0xf013a876
f0123fc7:	e8 da c1 fd ff       	call   f01001a6 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 6*Mega/4096) panic("Wrong kfree: pages in memory are not freed correctly");
f0123fcc:	e8 ed 83 fe ff       	call   f010c3be <sys_calculate_free_frames>
f0123fd1:	89 c2                	mov    %eax,%edx
f0123fd3:	8b 85 90 fe ff ff    	mov    -0x170(%ebp),%eax
f0123fd9:	29 c2                	sub    %eax,%edx
f0123fdb:	89 d0                	mov    %edx,%eax
f0123fdd:	3d 00 06 00 00       	cmp    $0x600,%eax
f0123fe2:	74 17                	je     f0123ffb <test_kheap_phys_addr+0xf66>
f0123fe4:	83 ec 04             	sub    $0x4,%esp
f0123fe7:	68 00 b0 13 f0       	push   $0xf013b000
f0123fec:	68 7d 08 00 00       	push   $0x87d
f0123ff1:	68 76 a8 13 f0       	push   $0xf013a876
f0123ff6:	e8 ab c1 fd ff       	call   f01001a6 <_panic>
	}


	//test kheap_physical_address after kmalloc and kfree [40%]
	{
f0123ffb:	89 e0                	mov    %esp,%eax
f0123ffd:	89 c6                	mov    %eax,%esi
		uint32 va;
		uint32 endVA = ACTUAL_START + 13*Mega + 32*kilo;
f0123fff:	c7 85 88 fe ff ff 00 	movl   $0x1000,-0x178(%ebp)
f0124006:	10 00 00 
f0124009:	8b 85 88 fe ff ff    	mov    -0x178(%ebp),%eax
f012400f:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0124014:	89 85 84 fe ff ff    	mov    %eax,-0x17c(%ebp)
f012401a:	8b 85 84 fe ff ff    	mov    -0x17c(%ebp),%eax
f0124020:	ba 00 00 00 00       	mov    $0x0,%edx
f0124025:	f7 b5 88 fe ff ff    	divl   -0x178(%ebp)
f012402b:	8b 85 84 fe ff ff    	mov    -0x17c(%ebp),%eax
f0124031:	29 d0                	sub    %edx,%eax
f0124033:	89 c1                	mov    %eax,%ecx
f0124035:	c7 85 80 fe ff ff 00 	movl   $0x1000,-0x180(%ebp)
f012403c:	10 00 00 
f012403f:	a0 bc 0e 6c f0       	mov    0xf06c0ebc,%al
f0124044:	0f b6 d0             	movzbl %al,%edx
f0124047:	8b 85 80 fe ff ff    	mov    -0x180(%ebp),%eax
f012404d:	01 d0                	add    %edx,%eax
f012404f:	48                   	dec    %eax
f0124050:	89 85 7c fe ff ff    	mov    %eax,-0x184(%ebp)
f0124056:	8b 85 7c fe ff ff    	mov    -0x184(%ebp),%eax
f012405c:	ba 00 00 00 00       	mov    $0x0,%edx
f0124061:	f7 b5 80 fe ff ff    	divl   -0x180(%ebp)
f0124067:	8b 85 7c fe ff ff    	mov    -0x184(%ebp),%eax
f012406d:	29 d0                	sub    %edx,%eax
f012406f:	01 c1                	add    %eax,%ecx
f0124071:	c7 85 78 fe ff ff 00 	movl   $0x1000,-0x188(%ebp)
f0124078:	10 00 00 
f012407b:	a0 bc 0e 6c f0       	mov    0xf06c0ebc,%al
f0124080:	0f b6 c0             	movzbl %al,%eax
f0124083:	c1 e0 04             	shl    $0x4,%eax
f0124086:	89 c2                	mov    %eax,%edx
f0124088:	8b 85 78 fe ff ff    	mov    -0x188(%ebp),%eax
f012408e:	01 d0                	add    %edx,%eax
f0124090:	48                   	dec    %eax
f0124091:	89 85 74 fe ff ff    	mov    %eax,-0x18c(%ebp)
f0124097:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f012409d:	ba 00 00 00 00       	mov    $0x0,%edx
f01240a2:	f7 b5 78 fe ff ff    	divl   -0x188(%ebp)
f01240a8:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f01240ae:	29 d0                	sub    %edx,%eax
f01240b0:	01 c8                	add    %ecx,%eax
f01240b2:	2d 00 40 2f 09       	sub    $0x92f4000,%eax
f01240b7:	89 85 70 fe ff ff    	mov    %eax,-0x190(%ebp)
		uint32 allPAs[(13*Mega + 32*kilo+INITIAL_KHEAP_ALLOCATIONS)/PAGE_SIZE] ;
f01240bd:	c7 85 6c fe ff ff 00 	movl   $0x1000,-0x194(%ebp)
f01240c4:	10 00 00 
f01240c7:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f01240cd:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01240d2:	89 85 68 fe ff ff    	mov    %eax,-0x198(%ebp)
f01240d8:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f01240de:	ba 00 00 00 00       	mov    $0x0,%edx
f01240e3:	f7 b5 6c fe ff ff    	divl   -0x194(%ebp)
f01240e9:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f01240ef:	29 d0                	sub    %edx,%eax
f01240f1:	89 c1                	mov    %eax,%ecx
f01240f3:	c7 85 64 fe ff ff 00 	movl   $0x1000,-0x19c(%ebp)
f01240fa:	10 00 00 
f01240fd:	a0 bc 0e 6c f0       	mov    0xf06c0ebc,%al
f0124102:	0f b6 d0             	movzbl %al,%edx
f0124105:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f012410b:	01 d0                	add    %edx,%eax
f012410d:	48                   	dec    %eax
f012410e:	89 85 60 fe ff ff    	mov    %eax,-0x1a0(%ebp)
f0124114:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f012411a:	ba 00 00 00 00       	mov    $0x0,%edx
f012411f:	f7 b5 64 fe ff ff    	divl   -0x19c(%ebp)
f0124125:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f012412b:	29 d0                	sub    %edx,%eax
f012412d:	01 c1                	add    %eax,%ecx
f012412f:	c7 85 5c fe ff ff 00 	movl   $0x1000,-0x1a4(%ebp)
f0124136:	10 00 00 
f0124139:	a0 bc 0e 6c f0       	mov    0xf06c0ebc,%al
f012413e:	0f b6 c0             	movzbl %al,%eax
f0124141:	c1 e0 04             	shl    $0x4,%eax
f0124144:	89 c2                	mov    %eax,%edx
f0124146:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f012414c:	01 d0                	add    %edx,%eax
f012414e:	48                   	dec    %eax
f012414f:	89 85 58 fe ff ff    	mov    %eax,-0x1a8(%ebp)
f0124155:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f012415b:	ba 00 00 00 00       	mov    $0x0,%edx
f0124160:	f7 b5 5c fe ff ff    	divl   -0x1a4(%ebp)
f0124166:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f012416c:	29 d0                	sub    %edx,%eax
f012416e:	01 c8                	add    %ecx,%eax
f0124170:	05 00 c0 d0 00       	add    $0xd0c000,%eax
f0124175:	c1 e8 0c             	shr    $0xc,%eax
f0124178:	89 c2                	mov    %eax,%edx
f012417a:	4a                   	dec    %edx
f012417b:	89 95 54 fe ff ff    	mov    %edx,-0x1ac(%ebp)
f0124181:	c1 e0 02             	shl    $0x2,%eax
f0124184:	8d 50 03             	lea    0x3(%eax),%edx
f0124187:	b8 10 00 00 00       	mov    $0x10,%eax
f012418c:	48                   	dec    %eax
f012418d:	01 d0                	add    %edx,%eax
f012418f:	bf 10 00 00 00       	mov    $0x10,%edi
f0124194:	ba 00 00 00 00       	mov    $0x0,%edx
f0124199:	f7 f7                	div    %edi
f012419b:	6b c0 10             	imul   $0x10,%eax,%eax
f012419e:	29 c4                	sub    %eax,%esp
f01241a0:	89 e0                	mov    %esp,%eax
f01241a2:	83 c0 03             	add    $0x3,%eax
f01241a5:	c1 e8 02             	shr    $0x2,%eax
f01241a8:	c1 e0 02             	shl    $0x2,%eax
f01241ab:	89 85 50 fe ff ff    	mov    %eax,-0x1b0(%ebp)
		i = 0;
f01241b1:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
		for (va = (KERNEL_HEAP_START + DYNAMIC_ALLOCATOR_DS); va < endVA; va+=PAGE_SIZE)
f01241b8:	c7 85 4c fe ff ff 00 	movl   $0x1000,-0x1b4(%ebp)
f01241bf:	10 00 00 
f01241c2:	8b 85 4c fe ff ff    	mov    -0x1b4(%ebp),%eax
f01241c8:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01241cd:	89 85 48 fe ff ff    	mov    %eax,-0x1b8(%ebp)
f01241d3:	8b 85 48 fe ff ff    	mov    -0x1b8(%ebp),%eax
f01241d9:	ba 00 00 00 00       	mov    $0x0,%edx
f01241de:	f7 b5 4c fe ff ff    	divl   -0x1b4(%ebp)
f01241e4:	8b 85 48 fe ff ff    	mov    -0x1b8(%ebp),%eax
f01241ea:	29 d0                	sub    %edx,%eax
f01241ec:	2d 00 00 00 0a       	sub    $0xa000000,%eax
f01241f1:	89 45 d8             	mov    %eax,-0x28(%ebp)
f01241f4:	eb 29                	jmp    f012421f <test_kheap_phys_addr+0x118a>
		{
			allPAs[i++] = kheap_physical_address(va);
f01241f6:	8b 5d e4             	mov    -0x1c(%ebp),%ebx
f01241f9:	8d 43 01             	lea    0x1(%ebx),%eax
f01241fc:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f01241ff:	83 ec 0c             	sub    $0xc,%esp
f0124202:	ff 75 d8             	pushl  -0x28(%ebp)
f0124205:	e8 1a 34 fe ff       	call   f0107624 <kheap_physical_address>
f012420a:	83 c4 10             	add    $0x10,%esp
f012420d:	89 c2                	mov    %eax,%edx
f012420f:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f0124215:	89 14 98             	mov    %edx,(%eax,%ebx,4)
	{
		uint32 va;
		uint32 endVA = ACTUAL_START + 13*Mega + 32*kilo;
		uint32 allPAs[(13*Mega + 32*kilo+INITIAL_KHEAP_ALLOCATIONS)/PAGE_SIZE] ;
		i = 0;
		for (va = (KERNEL_HEAP_START + DYNAMIC_ALLOCATOR_DS); va < endVA; va+=PAGE_SIZE)
f0124218:	81 45 d8 00 10 00 00 	addl   $0x1000,-0x28(%ebp)
f012421f:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0124222:	3b 85 70 fe ff ff    	cmp    -0x190(%ebp),%eax
f0124228:	72 cc                	jb     f01241f6 <test_kheap_phys_addr+0x1161>
		{
			allPAs[i++] = kheap_physical_address(va);
		}
		int ii = i ;
f012422a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f012422d:	89 85 44 fe ff ff    	mov    %eax,-0x1bc(%ebp)
		i = 0;
f0124233:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
		int j;
		for (va = (KERNEL_HEAP_START + DYNAMIC_ALLOCATOR_DS); va < endVA; )
f012423a:	c7 85 40 fe ff ff 00 	movl   $0x1000,-0x1c0(%ebp)
f0124241:	10 00 00 
f0124244:	8b 85 40 fe ff ff    	mov    -0x1c0(%ebp),%eax
f012424a:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012424f:	89 85 3c fe ff ff    	mov    %eax,-0x1c4(%ebp)
f0124255:	8b 85 3c fe ff ff    	mov    -0x1c4(%ebp),%eax
f012425b:	ba 00 00 00 00       	mov    $0x0,%edx
f0124260:	f7 b5 40 fe ff ff    	divl   -0x1c0(%ebp)
f0124266:	8b 85 3c fe ff ff    	mov    -0x1c4(%ebp),%eax
f012426c:	29 d0                	sub    %edx,%eax
f012426e:	2d 00 00 00 0a       	sub    $0xa000000,%eax
f0124273:	89 45 d8             	mov    %eax,-0x28(%ebp)
f0124276:	e9 ab 00 00 00       	jmp    f0124326 <test_kheap_phys_addr+0x1291>
		{
			uint32 *ptr_table ;
			get_page_table(ptr_page_directory, va, &ptr_table);
f012427b:	a1 b8 0e 6c f0       	mov    0xf06c0eb8,%eax
f0124280:	83 ec 04             	sub    $0x4,%esp
f0124283:	8d 95 1c fd ff ff    	lea    -0x2e4(%ebp),%edx
f0124289:	52                   	push   %edx
f012428a:	ff 75 d8             	pushl  -0x28(%ebp)
f012428d:	50                   	push   %eax
f012428e:	e8 d6 26 fe ff       	call   f0106969 <get_page_table>
f0124293:	83 c4 10             	add    $0x10,%esp
			if (ptr_table == NULL)
f0124296:	8b 85 1c fd ff ff    	mov    -0x2e4(%ebp),%eax
f012429c:	85 c0                	test   %eax,%eax
f012429e:	75 17                	jne    f01242b7 <test_kheap_phys_addr+0x1222>
				panic("one of the kernel tables is wrongly removed! Tables of Kernel Heap should not be removed");
f01242a0:	83 ec 04             	sub    $0x4,%esp
f01242a3:	68 18 b2 13 f0       	push   $0xf013b218
f01242a8:	68 93 08 00 00       	push   $0x893
f01242ad:	68 76 a8 13 f0       	push   $0xf013a876
f01242b2:	e8 ef be fd ff       	call   f01001a6 <_panic>

			for (j = PTX(va); i < ii && j < 1024; ++j, ++i)
f01242b7:	8b 45 d8             	mov    -0x28(%ebp),%eax
f01242ba:	c1 e8 0c             	shr    $0xc,%eax
f01242bd:	25 ff 03 00 00       	and    $0x3ff,%eax
f01242c2:	89 45 d4             	mov    %eax,-0x2c(%ebp)
f01242c5:	eb 4b                	jmp    f0124312 <test_kheap_phys_addr+0x127d>
			{
				if ((ptr_table[j] & 0xFFFFF000) != allPAs[i])
f01242c7:	8b 85 1c fd ff ff    	mov    -0x2e4(%ebp),%eax
f01242cd:	8b 55 d4             	mov    -0x2c(%ebp),%edx
f01242d0:	c1 e2 02             	shl    $0x2,%edx
f01242d3:	01 d0                	add    %edx,%eax
f01242d5:	8b 00                	mov    (%eax),%eax
f01242d7:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f01242dc:	89 c1                	mov    %eax,%ecx
f01242de:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f01242e4:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f01242e7:	8b 04 90             	mov    (%eax,%edx,4),%eax
f01242ea:	39 c1                	cmp    %eax,%ecx
f01242ec:	74 17                	je     f0124305 <test_kheap_phys_addr+0x1270>
				{
					//cprintf("\nVA = %x, table entry = %x, khep_pa = %x\n",va + j*PAGE_SIZE, (ptr_table[j] & 0xFFFFF000) , allPAs[i]);
					panic("Wrong kheap_physical_address");
f01242ee:	83 ec 04             	sub    $0x4,%esp
f01242f1:	68 71 b2 13 f0       	push   $0xf013b271
f01242f6:	68 9a 08 00 00       	push   $0x89a
f01242fb:	68 76 a8 13 f0       	push   $0xf013a876
f0124300:	e8 a1 be fd ff       	call   f01001a6 <_panic>
				}
				va += PAGE_SIZE;
f0124305:	81 45 d8 00 10 00 00 	addl   $0x1000,-0x28(%ebp)
			uint32 *ptr_table ;
			get_page_table(ptr_page_directory, va, &ptr_table);
			if (ptr_table == NULL)
				panic("one of the kernel tables is wrongly removed! Tables of Kernel Heap should not be removed");

			for (j = PTX(va); i < ii && j < 1024; ++j, ++i)
f012430c:	ff 45 d4             	incl   -0x2c(%ebp)
f012430f:	ff 45 e4             	incl   -0x1c(%ebp)
f0124312:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0124315:	3b 85 44 fe ff ff    	cmp    -0x1bc(%ebp),%eax
f012431b:	7d 09                	jge    f0124326 <test_kheap_phys_addr+0x1291>
f012431d:	81 7d d4 ff 03 00 00 	cmpl   $0x3ff,-0x2c(%ebp)
f0124324:	7e a1                	jle    f01242c7 <test_kheap_phys_addr+0x1232>
			allPAs[i++] = kheap_physical_address(va);
		}
		int ii = i ;
		i = 0;
		int j;
		for (va = (KERNEL_HEAP_START + DYNAMIC_ALLOCATOR_DS); va < endVA; )
f0124326:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0124329:	3b 85 70 fe ff ff    	cmp    -0x190(%ebp),%eax
f012432f:	0f 82 46 ff ff ff    	jb     f012427b <test_kheap_phys_addr+0x11e6>
f0124335:	89 f4                	mov    %esi,%esp
				va += PAGE_SIZE;
			}
		}
	}

	cprintf("\b\b\b80%");
f0124337:	83 ec 0c             	sub    $0xc,%esp
f012433a:	68 01 aa 13 f0       	push   $0xf013aa01
f012433f:	e8 e9 c8 fd ff       	call   f0100c2d <cprintf>
f0124344:	83 c4 10             	add    $0x10,%esp

	//test kheap_physical_address on non-mapped area [20%]
	{
		uint32 va;
		uint32 startVA = ACTUAL_START + 16*Mega;
f0124347:	c7 85 38 fe ff ff 00 	movl   $0x1000,-0x1c8(%ebp)
f012434e:	10 00 00 
f0124351:	8b 85 38 fe ff ff    	mov    -0x1c8(%ebp),%eax
f0124357:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012435c:	89 85 34 fe ff ff    	mov    %eax,-0x1cc(%ebp)
f0124362:	8b 85 34 fe ff ff    	mov    -0x1cc(%ebp),%eax
f0124368:	ba 00 00 00 00       	mov    $0x0,%edx
f012436d:	f7 b5 38 fe ff ff    	divl   -0x1c8(%ebp)
f0124373:	8b 85 34 fe ff ff    	mov    -0x1cc(%ebp),%eax
f0124379:	29 d0                	sub    %edx,%eax
f012437b:	89 c1                	mov    %eax,%ecx
f012437d:	c7 85 30 fe ff ff 00 	movl   $0x1000,-0x1d0(%ebp)
f0124384:	10 00 00 
f0124387:	a0 bc 0e 6c f0       	mov    0xf06c0ebc,%al
f012438c:	0f b6 d0             	movzbl %al,%edx
f012438f:	8b 85 30 fe ff ff    	mov    -0x1d0(%ebp),%eax
f0124395:	01 d0                	add    %edx,%eax
f0124397:	48                   	dec    %eax
f0124398:	89 85 2c fe ff ff    	mov    %eax,-0x1d4(%ebp)
f012439e:	8b 85 2c fe ff ff    	mov    -0x1d4(%ebp),%eax
f01243a4:	ba 00 00 00 00       	mov    $0x0,%edx
f01243a9:	f7 b5 30 fe ff ff    	divl   -0x1d0(%ebp)
f01243af:	8b 85 2c fe ff ff    	mov    -0x1d4(%ebp),%eax
f01243b5:	29 d0                	sub    %edx,%eax
f01243b7:	01 c1                	add    %eax,%ecx
f01243b9:	c7 85 28 fe ff ff 00 	movl   $0x1000,-0x1d8(%ebp)
f01243c0:	10 00 00 
f01243c3:	a0 bc 0e 6c f0       	mov    0xf06c0ebc,%al
f01243c8:	0f b6 c0             	movzbl %al,%eax
f01243cb:	c1 e0 04             	shl    $0x4,%eax
f01243ce:	89 c2                	mov    %eax,%edx
f01243d0:	8b 85 28 fe ff ff    	mov    -0x1d8(%ebp),%eax
f01243d6:	01 d0                	add    %edx,%eax
f01243d8:	48                   	dec    %eax
f01243d9:	89 85 24 fe ff ff    	mov    %eax,-0x1dc(%ebp)
f01243df:	8b 85 24 fe ff ff    	mov    -0x1dc(%ebp),%eax
f01243e5:	ba 00 00 00 00       	mov    $0x0,%edx
f01243ea:	f7 b5 28 fe ff ff    	divl   -0x1d8(%ebp)
f01243f0:	8b 85 24 fe ff ff    	mov    -0x1dc(%ebp),%eax
f01243f6:	29 d0                	sub    %edx,%eax
f01243f8:	01 c8                	add    %ecx,%eax
f01243fa:	2d 00 c0 ff 08       	sub    $0x8ffc000,%eax
f01243ff:	89 85 20 fe ff ff    	mov    %eax,-0x1e0(%ebp)
		i = 0;
f0124405:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
		for (va = startVA; va < KERNEL_HEAP_MAX; va+=PAGE_SIZE)
f012440c:	8b 85 20 fe ff ff    	mov    -0x1e0(%ebp),%eax
f0124412:	89 45 d0             	mov    %eax,-0x30(%ebp)
f0124415:	eb 0a                	jmp    f0124421 <test_kheap_phys_addr+0x138c>
		{
			i++;
f0124417:	ff 45 e4             	incl   -0x1c(%ebp)
	//test kheap_physical_address on non-mapped area [20%]
	{
		uint32 va;
		uint32 startVA = ACTUAL_START + 16*Mega;
		i = 0;
		for (va = startVA; va < KERNEL_HEAP_MAX; va+=PAGE_SIZE)
f012441a:	81 45 d0 00 10 00 00 	addl   $0x1000,-0x30(%ebp)
f0124421:	81 7d d0 ff ef ff ff 	cmpl   $0xffffefff,-0x30(%ebp)
f0124428:	76 ed                	jbe    f0124417 <test_kheap_phys_addr+0x1382>
		{
			i++;
		}
		int ii = i ;
f012442a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f012442d:	89 85 1c fe ff ff    	mov    %eax,-0x1e4(%ebp)
		i = 0;
f0124433:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
		int j;
		long long va2;
		for (va2 = startVA; va2 < (long long)KERNEL_HEAP_MAX; va2+=PTSIZE)
f012443a:	8b 85 20 fe ff ff    	mov    -0x1e0(%ebp),%eax
f0124440:	89 45 c0             	mov    %eax,-0x40(%ebp)
f0124443:	c7 45 c4 00 00 00 00 	movl   $0x0,-0x3c(%ebp)
f012444a:	e9 cc 00 00 00       	jmp    f012451b <test_kheap_phys_addr+0x1486>
		{
			uint32 *ptr_table ;
			get_page_table(ptr_page_directory, (uint32)va2, &ptr_table);
f012444f:	8b 55 c0             	mov    -0x40(%ebp),%edx
f0124452:	a1 b8 0e 6c f0       	mov    0xf06c0eb8,%eax
f0124457:	83 ec 04             	sub    $0x4,%esp
f012445a:	8d 8d 18 fd ff ff    	lea    -0x2e8(%ebp),%ecx
f0124460:	51                   	push   %ecx
f0124461:	52                   	push   %edx
f0124462:	50                   	push   %eax
f0124463:	e8 01 25 fe ff       	call   f0106969 <get_page_table>
f0124468:	83 c4 10             	add    $0x10,%esp
			if (ptr_table == NULL)
f012446b:	8b 85 18 fd ff ff    	mov    -0x2e8(%ebp),%eax
f0124471:	85 c0                	test   %eax,%eax
f0124473:	75 17                	jne    f012448c <test_kheap_phys_addr+0x13f7>
			{
				panic("one of the kernel tables is wrongly removed! Tables of Kernel Heap should not be removed");
f0124475:	83 ec 04             	sub    $0x4,%esp
f0124478:	68 18 b2 13 f0       	push   $0xf013b218
f012447d:	68 b6 08 00 00       	push   $0x8b6
f0124482:	68 76 a8 13 f0       	push   $0xf013a876
f0124487:	e8 1a bd fd ff       	call   f01001a6 <_panic>
			}
			for (j = 0; i < ii && j < 1024; ++j, ++i)
f012448c:	c7 45 cc 00 00 00 00 	movl   $0x0,-0x34(%ebp)
f0124493:	eb 67                	jmp    f01244fc <test_kheap_phys_addr+0x1467>
			{
				//if ((ptr_table[j] & 0xFFFFF000) != allPAs[i])
				unsigned int page_va = startVA+i*PAGE_SIZE;
f0124495:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0124498:	c1 e0 0c             	shl    $0xc,%eax
f012449b:	89 c2                	mov    %eax,%edx
f012449d:	8b 85 20 fe ff ff    	mov    -0x1e0(%ebp),%eax
f01244a3:	01 d0                	add    %edx,%eax
f01244a5:	89 85 18 fe ff ff    	mov    %eax,-0x1e8(%ebp)
				unsigned int supposed_kheap_phys_add = kheap_physical_address(page_va);
f01244ab:	83 ec 0c             	sub    $0xc,%esp
f01244ae:	ff b5 18 fe ff ff    	pushl  -0x1e8(%ebp)
f01244b4:	e8 6b 31 fe ff       	call   f0107624 <kheap_physical_address>
f01244b9:	83 c4 10             	add    $0x10,%esp
f01244bc:	89 85 14 fe ff ff    	mov    %eax,-0x1ec(%ebp)
				if ((ptr_table[j] & 0xFFFFF000) != supposed_kheap_phys_add)
f01244c2:	8b 85 18 fd ff ff    	mov    -0x2e8(%ebp),%eax
f01244c8:	8b 55 cc             	mov    -0x34(%ebp),%edx
f01244cb:	c1 e2 02             	shl    $0x2,%edx
f01244ce:	01 d0                	add    %edx,%eax
f01244d0:	8b 00                	mov    (%eax),%eax
f01244d2:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f01244d7:	3b 85 14 fe ff ff    	cmp    -0x1ec(%ebp),%eax
f01244dd:	74 17                	je     f01244f6 <test_kheap_phys_addr+0x1461>
				{
					//cprintf("\nVA = %x, table entry = %x, khep_pa = %x\n",va2 + j*PAGE_SIZE, (ptr_table[j] & 0xFFFFF000) , allPAs[i]);
					panic("Wrong kheap_physical_address");
f01244df:	83 ec 04             	sub    $0x4,%esp
f01244e2:	68 71 b2 13 f0       	push   $0xf013b271
f01244e7:	68 c0 08 00 00       	push   $0x8c0
f01244ec:	68 76 a8 13 f0       	push   $0xf013a876
f01244f1:	e8 b0 bc fd ff       	call   f01001a6 <_panic>
			get_page_table(ptr_page_directory, (uint32)va2, &ptr_table);
			if (ptr_table == NULL)
			{
				panic("one of the kernel tables is wrongly removed! Tables of Kernel Heap should not be removed");
			}
			for (j = 0; i < ii && j < 1024; ++j, ++i)
f01244f6:	ff 45 cc             	incl   -0x34(%ebp)
f01244f9:	ff 45 e4             	incl   -0x1c(%ebp)
f01244fc:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01244ff:	3b 85 1c fe ff ff    	cmp    -0x1e4(%ebp),%eax
f0124505:	7d 09                	jge    f0124510 <test_kheap_phys_addr+0x147b>
f0124507:	81 7d cc ff 03 00 00 	cmpl   $0x3ff,-0x34(%ebp)
f012450e:	7e 85                	jle    f0124495 <test_kheap_phys_addr+0x1400>
		}
		int ii = i ;
		i = 0;
		int j;
		long long va2;
		for (va2 = startVA; va2 < (long long)KERNEL_HEAP_MAX; va2+=PTSIZE)
f0124510:	81 45 c0 00 00 40 00 	addl   $0x400000,-0x40(%ebp)
f0124517:	83 55 c4 00          	adcl   $0x0,-0x3c(%ebp)
f012451b:	83 7d c4 00          	cmpl   $0x0,-0x3c(%ebp)
f012451f:	0f 88 2a ff ff ff    	js     f012444f <test_kheap_phys_addr+0x13ba>
f0124525:	83 7d c4 00          	cmpl   $0x0,-0x3c(%ebp)
f0124529:	7f 0d                	jg     f0124538 <test_kheap_phys_addr+0x14a3>
f012452b:	81 7d c0 ff ef ff ff 	cmpl   $0xffffefff,-0x40(%ebp)
f0124532:	0f 86 17 ff ff ff    	jbe    f012444f <test_kheap_phys_addr+0x13ba>
				}
			}
		}
	}

	cprintf("\b\b\b100%\n");
f0124538:	83 ec 0c             	sub    $0xc,%esp
f012453b:	68 5a aa 13 f0       	push   $0xf013aa5a
f0124540:	e8 e8 c6 fd ff       	call   f0100c2d <cprintf>
f0124545:	83 c4 10             	add    $0x10,%esp

	cprintf("\nCongratulations!! test kheap_physical_address completed successfully.\n");
f0124548:	83 ec 0c             	sub    $0xc,%esp
f012454b:	68 c4 b2 13 f0       	push   $0xf013b2c4
f0124550:	e8 d8 c6 fd ff       	call   f0100c2d <cprintf>
f0124555:	83 c4 10             	add    $0x10,%esp

	return 1;
f0124558:	b8 01 00 00 00       	mov    $0x1,%eax

}
f012455d:	8d 65 f4             	lea    -0xc(%ebp),%esp
f0124560:	5b                   	pop    %ebx
f0124561:	5e                   	pop    %esi
f0124562:	5f                   	pop    %edi
f0124563:	5d                   	pop    %ebp
f0124564:	c3                   	ret    

f0124565 <test_kheap_virt_addr>:

int test_kheap_virt_addr()
{
f0124565:	55                   	push   %ebp
f0124566:	89 e5                	mov    %esp,%ebp
f0124568:	57                   	push   %edi
f0124569:	56                   	push   %esi
f012456a:	53                   	push   %ebx
f012456b:	81 ec dc 02 00 00    	sub    $0x2dc,%esp
f0124571:	89 e0                	mov    %esp,%eax
f0124573:	89 c6                	mov    %eax,%esi
	cprintf("==============================================\n");
f0124575:	83 ec 0c             	sub    $0xc,%esp
f0124578:	68 b8 a7 13 f0       	push   $0xf013a7b8
f012457d:	e8 ab c6 fd ff       	call   f0100c2d <cprintf>
f0124582:	83 c4 10             	add    $0x10,%esp
	cprintf("MAKE SURE to have a FRESH RUN for this test\n(i.e. don't run any program/test before it)\n");
f0124585:	83 ec 0c             	sub    $0xc,%esp
f0124588:	68 e8 a7 13 f0       	push   $0xf013a7e8
f012458d:	e8 9b c6 fd ff       	call   f0100c2d <cprintf>
f0124592:	83 c4 10             	add    $0x10,%esp
	cprintf("==============================================\n");
f0124595:	83 ec 0c             	sub    $0xc,%esp
f0124598:	68 b8 a7 13 f0       	push   $0xf013a7b8
f012459d:	e8 8b c6 fd ff       	call   f0100c2d <cprintf>
f01245a2:	83 c4 10             	add    $0x10,%esp

	char minByte = 1<<7;
f01245a5:	c6 45 d3 80          	movb   $0x80,-0x2d(%ebp)
	char maxByte = 0x7F;
f01245a9:	c6 45 d2 7f          	movb   $0x7f,-0x2e(%ebp)
	short minShort = 1<<15 ;
f01245ad:	66 c7 45 d0 00 80    	movw   $0x8000,-0x30(%ebp)
	short maxShort = 0x7FFF;
f01245b3:	66 c7 45 ce ff 7f    	movw   $0x7fff,-0x32(%ebp)
	int minInt = 1<<31 ;
f01245b9:	c7 45 c8 00 00 00 80 	movl   $0x80000000,-0x38(%ebp)
	int maxInt = 0x7FFFFFFF;
f01245c0:	c7 45 c4 ff ff ff 7f 	movl   $0x7fffffff,-0x3c(%ebp)
	char *byteArr, *byteArr2 ;
	short *shortArr, *shortArr2 ;
	int *intArr;
	struct MyStruct *structArr ;
	int lastIndexOfByte, lastIndexOfByte2, lastIndexOfShort, lastIndexOfShort2, lastIndexOfInt, lastIndexOfStruct;
	int start_freeFrames = sys_calculate_free_frames() ;
f01245c7:	e8 f2 7d fe ff       	call   f010c3be <sys_calculate_free_frames>
f01245cc:	89 45 c0             	mov    %eax,-0x40(%ebp)

	//malloc some spaces
	int i, freeFrames, freeDiskFrames ;
	char* ptr;
	int lastIndices[20] = {0};
f01245cf:	8d 95 c8 fd ff ff    	lea    -0x238(%ebp),%edx
f01245d5:	b9 14 00 00 00       	mov    $0x14,%ecx
f01245da:	b8 00 00 00 00       	mov    $0x0,%eax
f01245df:	89 d7                	mov    %edx,%edi
f01245e1:	f3 ab                	rep stos %eax,%es:(%edi)
	int sums[20] = {0};
f01245e3:	8d 95 78 fd ff ff    	lea    -0x288(%ebp),%edx
f01245e9:	b9 14 00 00 00       	mov    $0x14,%ecx
f01245ee:	b8 00 00 00 00       	mov    $0x0,%eax
f01245f3:	89 d7                	mov    %edx,%edi
f01245f5:	f3 ab                	rep stos %eax,%es:(%edi)
	void* ptr_allocations[20] = {0};
f01245f7:	8d 95 28 fd ff ff    	lea    -0x2d8(%ebp),%edx
f01245fd:	b9 14 00 00 00       	mov    $0x14,%ecx
f0124602:	b8 00 00 00 00       	mov    $0x0,%eax
f0124607:	89 d7                	mov    %edx,%edi
f0124609:	f3 ab                	rep stos %eax,%es:(%edi)
	{
		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f012460b:	e8 ae 7d fe ff       	call   f010c3be <sys_calculate_free_frames>
f0124610:	89 45 bc             	mov    %eax,-0x44(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0124613:	e8 74 f6 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f0124618:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[0] = kmalloc(2*Mega-kilo);
f012461b:	83 ec 0c             	sub    $0xc,%esp
f012461e:	68 00 fc 1f 00       	push   $0x1ffc00
f0124623:	e8 9c 2f fe ff       	call   f01075c4 <kmalloc>
f0124628:	83 c4 10             	add    $0x10,%esp
f012462b:	89 85 28 fd ff ff    	mov    %eax,-0x2d8(%ebp)
		if ((uint32) ptr_allocations[0] !=  (ACTUAL_START)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0124631:	8b 85 28 fd ff ff    	mov    -0x2d8(%ebp),%eax
f0124637:	89 c1                	mov    %eax,%ecx
f0124639:	c7 45 b4 00 10 00 00 	movl   $0x1000,-0x4c(%ebp)
f0124640:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0124643:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0124648:	89 45 b0             	mov    %eax,-0x50(%ebp)
f012464b:	8b 45 b0             	mov    -0x50(%ebp),%eax
f012464e:	ba 00 00 00 00       	mov    $0x0,%edx
f0124653:	f7 75 b4             	divl   -0x4c(%ebp)
f0124656:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0124659:	29 d0                	sub    %edx,%eax
f012465b:	89 c3                	mov    %eax,%ebx
f012465d:	c7 45 ac 00 10 00 00 	movl   $0x1000,-0x54(%ebp)
f0124664:	a0 bc 0e 6c f0       	mov    0xf06c0ebc,%al
f0124669:	0f b6 d0             	movzbl %al,%edx
f012466c:	8b 45 ac             	mov    -0x54(%ebp),%eax
f012466f:	01 d0                	add    %edx,%eax
f0124671:	48                   	dec    %eax
f0124672:	89 45 a8             	mov    %eax,-0x58(%ebp)
f0124675:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0124678:	ba 00 00 00 00       	mov    $0x0,%edx
f012467d:	f7 75 ac             	divl   -0x54(%ebp)
f0124680:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0124683:	29 d0                	sub    %edx,%eax
f0124685:	01 c3                	add    %eax,%ebx
f0124687:	c7 45 a4 00 10 00 00 	movl   $0x1000,-0x5c(%ebp)
f012468e:	a0 bc 0e 6c f0       	mov    0xf06c0ebc,%al
f0124693:	0f b6 c0             	movzbl %al,%eax
f0124696:	c1 e0 04             	shl    $0x4,%eax
f0124699:	89 c2                	mov    %eax,%edx
f012469b:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f012469e:	01 d0                	add    %edx,%eax
f01246a0:	48                   	dec    %eax
f01246a1:	89 45 a0             	mov    %eax,-0x60(%ebp)
f01246a4:	8b 45 a0             	mov    -0x60(%ebp),%eax
f01246a7:	ba 00 00 00 00       	mov    $0x0,%edx
f01246ac:	f7 75 a4             	divl   -0x5c(%ebp)
f01246af:	8b 45 a0             	mov    -0x60(%ebp),%eax
f01246b2:	29 d0                	sub    %edx,%eax
f01246b4:	01 d8                	add    %ebx,%eax
f01246b6:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f01246bb:	39 c1                	cmp    %eax,%ecx
f01246bd:	74 17                	je     f01246d6 <test_kheap_virt_addr+0x171>
f01246bf:	83 ec 04             	sub    $0x4,%esp
f01246c2:	68 5c a9 13 f0       	push   $0xf013a95c
f01246c7:	68 ed 08 00 00       	push   $0x8ed
f01246cc:	68 76 a8 13 f0       	push   $0xf013a876
f01246d1:	e8 d0 ba fd ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01246d6:	e8 b1 f5 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f01246db:	3b 45 b8             	cmp    -0x48(%ebp),%eax
f01246de:	74 17                	je     f01246f7 <test_kheap_virt_addr+0x192>
f01246e0:	83 ec 04             	sub    $0x4,%esp
f01246e3:	68 90 a8 13 f0       	push   $0xf013a890
f01246e8:	68 ee 08 00 00       	push   $0x8ee
f01246ed:	68 76 a8 13 f0       	push   $0xf013a876
f01246f2:	e8 af ba fd ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f01246f7:	8b 5d bc             	mov    -0x44(%ebp),%ebx
f01246fa:	e8 bf 7c fe ff       	call   f010c3be <sys_calculate_free_frames>
f01246ff:	29 c3                	sub    %eax,%ebx
f0124701:	89 d8                	mov    %ebx,%eax
f0124703:	3d 00 02 00 00       	cmp    $0x200,%eax
f0124708:	74 17                	je     f0124721 <test_kheap_virt_addr+0x1bc>
f012470a:	83 ec 04             	sub    $0x4,%esp
f012470d:	68 f8 a8 13 f0       	push   $0xf013a8f8
f0124712:	68 ef 08 00 00       	push   $0x8ef
f0124717:	68 76 a8 13 f0       	push   $0xf013a876
f012471c:	e8 85 ba fd ff       	call   f01001a6 <_panic>

		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f0124721:	e8 98 7c fe ff       	call   f010c3be <sys_calculate_free_frames>
f0124726:	89 45 bc             	mov    %eax,-0x44(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0124729:	e8 5e f5 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f012472e:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[1] = kmalloc(2*Mega-kilo);
f0124731:	83 ec 0c             	sub    $0xc,%esp
f0124734:	68 00 fc 1f 00       	push   $0x1ffc00
f0124739:	e8 86 2e fe ff       	call   f01075c4 <kmalloc>
f012473e:	83 c4 10             	add    $0x10,%esp
f0124741:	89 85 2c fd ff ff    	mov    %eax,-0x2d4(%ebp)
		if ((uint32) ptr_allocations[1] != (ACTUAL_START + 2*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0124747:	8b 85 2c fd ff ff    	mov    -0x2d4(%ebp),%eax
f012474d:	89 c1                	mov    %eax,%ecx
f012474f:	c7 45 9c 00 10 00 00 	movl   $0x1000,-0x64(%ebp)
f0124756:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0124759:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012475e:	89 45 98             	mov    %eax,-0x68(%ebp)
f0124761:	8b 45 98             	mov    -0x68(%ebp),%eax
f0124764:	ba 00 00 00 00       	mov    $0x0,%edx
f0124769:	f7 75 9c             	divl   -0x64(%ebp)
f012476c:	8b 45 98             	mov    -0x68(%ebp),%eax
f012476f:	29 d0                	sub    %edx,%eax
f0124771:	89 c3                	mov    %eax,%ebx
f0124773:	c7 45 94 00 10 00 00 	movl   $0x1000,-0x6c(%ebp)
f012477a:	a0 bc 0e 6c f0       	mov    0xf06c0ebc,%al
f012477f:	0f b6 d0             	movzbl %al,%edx
f0124782:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0124785:	01 d0                	add    %edx,%eax
f0124787:	48                   	dec    %eax
f0124788:	89 45 90             	mov    %eax,-0x70(%ebp)
f012478b:	8b 45 90             	mov    -0x70(%ebp),%eax
f012478e:	ba 00 00 00 00       	mov    $0x0,%edx
f0124793:	f7 75 94             	divl   -0x6c(%ebp)
f0124796:	8b 45 90             	mov    -0x70(%ebp),%eax
f0124799:	29 d0                	sub    %edx,%eax
f012479b:	01 c3                	add    %eax,%ebx
f012479d:	c7 45 8c 00 10 00 00 	movl   $0x1000,-0x74(%ebp)
f01247a4:	a0 bc 0e 6c f0       	mov    0xf06c0ebc,%al
f01247a9:	0f b6 c0             	movzbl %al,%eax
f01247ac:	c1 e0 04             	shl    $0x4,%eax
f01247af:	89 c2                	mov    %eax,%edx
f01247b1:	8b 45 8c             	mov    -0x74(%ebp),%eax
f01247b4:	01 d0                	add    %edx,%eax
f01247b6:	48                   	dec    %eax
f01247b7:	89 45 88             	mov    %eax,-0x78(%ebp)
f01247ba:	8b 45 88             	mov    -0x78(%ebp),%eax
f01247bd:	ba 00 00 00 00       	mov    $0x0,%edx
f01247c2:	f7 75 8c             	divl   -0x74(%ebp)
f01247c5:	8b 45 88             	mov    -0x78(%ebp),%eax
f01247c8:	29 d0                	sub    %edx,%eax
f01247ca:	01 d8                	add    %ebx,%eax
f01247cc:	2d 00 c0 df 09       	sub    $0x9dfc000,%eax
f01247d1:	39 c1                	cmp    %eax,%ecx
f01247d3:	74 17                	je     f01247ec <test_kheap_virt_addr+0x287>
f01247d5:	83 ec 04             	sub    $0x4,%esp
f01247d8:	68 5c a9 13 f0       	push   $0xf013a95c
f01247dd:	68 f5 08 00 00       	push   $0x8f5
f01247e2:	68 76 a8 13 f0       	push   $0xf013a876
f01247e7:	e8 ba b9 fd ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01247ec:	e8 9b f4 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f01247f1:	3b 45 b8             	cmp    -0x48(%ebp),%eax
f01247f4:	74 17                	je     f012480d <test_kheap_virt_addr+0x2a8>
f01247f6:	83 ec 04             	sub    $0x4,%esp
f01247f9:	68 90 a8 13 f0       	push   $0xf013a890
f01247fe:	68 f6 08 00 00       	push   $0x8f6
f0124803:	68 76 a8 13 f0       	push   $0xf013a876
f0124808:	e8 99 b9 fd ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f012480d:	8b 5d bc             	mov    -0x44(%ebp),%ebx
f0124810:	e8 a9 7b fe ff       	call   f010c3be <sys_calculate_free_frames>
f0124815:	29 c3                	sub    %eax,%ebx
f0124817:	89 d8                	mov    %ebx,%eax
f0124819:	3d 00 02 00 00       	cmp    $0x200,%eax
f012481e:	74 17                	je     f0124837 <test_kheap_virt_addr+0x2d2>
f0124820:	83 ec 04             	sub    $0x4,%esp
f0124823:	68 f8 a8 13 f0       	push   $0xf013a8f8
f0124828:	68 f7 08 00 00       	push   $0x8f7
f012482d:	68 76 a8 13 f0       	push   $0xf013a876
f0124832:	e8 6f b9 fd ff       	call   f01001a6 <_panic>

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f0124837:	e8 82 7b fe ff       	call   f010c3be <sys_calculate_free_frames>
f012483c:	89 45 bc             	mov    %eax,-0x44(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012483f:	e8 48 f4 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f0124844:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[2] = kmalloc(2*kilo);
f0124847:	83 ec 0c             	sub    $0xc,%esp
f012484a:	68 00 08 00 00       	push   $0x800
f012484f:	e8 70 2d fe ff       	call   f01075c4 <kmalloc>
f0124854:	83 c4 10             	add    $0x10,%esp
f0124857:	89 85 30 fd ff ff    	mov    %eax,-0x2d0(%ebp)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f012485d:	8b 85 30 fd ff ff    	mov    -0x2d0(%ebp),%eax
f0124863:	89 c1                	mov    %eax,%ecx
f0124865:	c7 45 84 00 10 00 00 	movl   $0x1000,-0x7c(%ebp)
f012486c:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012486f:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0124874:	89 45 80             	mov    %eax,-0x80(%ebp)
f0124877:	8b 45 80             	mov    -0x80(%ebp),%eax
f012487a:	ba 00 00 00 00       	mov    $0x0,%edx
f012487f:	f7 75 84             	divl   -0x7c(%ebp)
f0124882:	8b 45 80             	mov    -0x80(%ebp),%eax
f0124885:	29 d0                	sub    %edx,%eax
f0124887:	89 c3                	mov    %eax,%ebx
f0124889:	c7 85 7c ff ff ff 00 	movl   $0x1000,-0x84(%ebp)
f0124890:	10 00 00 
f0124893:	a0 bc 0e 6c f0       	mov    0xf06c0ebc,%al
f0124898:	0f b6 d0             	movzbl %al,%edx
f012489b:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f01248a1:	01 d0                	add    %edx,%eax
f01248a3:	48                   	dec    %eax
f01248a4:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)
f01248aa:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f01248b0:	ba 00 00 00 00       	mov    $0x0,%edx
f01248b5:	f7 b5 7c ff ff ff    	divl   -0x84(%ebp)
f01248bb:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f01248c1:	29 d0                	sub    %edx,%eax
f01248c3:	01 c3                	add    %eax,%ebx
f01248c5:	c7 85 74 ff ff ff 00 	movl   $0x1000,-0x8c(%ebp)
f01248cc:	10 00 00 
f01248cf:	a0 bc 0e 6c f0       	mov    0xf06c0ebc,%al
f01248d4:	0f b6 c0             	movzbl %al,%eax
f01248d7:	c1 e0 04             	shl    $0x4,%eax
f01248da:	89 c2                	mov    %eax,%edx
f01248dc:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f01248e2:	01 d0                	add    %edx,%eax
f01248e4:	48                   	dec    %eax
f01248e5:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
f01248eb:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f01248f1:	ba 00 00 00 00       	mov    $0x0,%edx
f01248f6:	f7 b5 74 ff ff ff    	divl   -0x8c(%ebp)
f01248fc:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f0124902:	29 d0                	sub    %edx,%eax
f0124904:	01 d8                	add    %ebx,%eax
f0124906:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
f012490b:	39 c1                	cmp    %eax,%ecx
f012490d:	74 17                	je     f0124926 <test_kheap_virt_addr+0x3c1>
f012490f:	83 ec 04             	sub    $0x4,%esp
f0124912:	68 5c a9 13 f0       	push   $0xf013a95c
f0124917:	68 fd 08 00 00       	push   $0x8fd
f012491c:	68 76 a8 13 f0       	push   $0xf013a876
f0124921:	e8 80 b8 fd ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0124926:	e8 61 f3 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f012492b:	3b 45 b8             	cmp    -0x48(%ebp),%eax
f012492e:	74 17                	je     f0124947 <test_kheap_virt_addr+0x3e2>
f0124930:	83 ec 04             	sub    $0x4,%esp
f0124933:	68 90 a8 13 f0       	push   $0xf013a890
f0124938:	68 fe 08 00 00       	push   $0x8fe
f012493d:	68 76 a8 13 f0       	push   $0xf013a876
f0124942:	e8 5f b8 fd ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f0124947:	8b 5d bc             	mov    -0x44(%ebp),%ebx
f012494a:	e8 6f 7a fe ff       	call   f010c3be <sys_calculate_free_frames>
f012494f:	29 c3                	sub    %eax,%ebx
f0124951:	89 d8                	mov    %ebx,%eax
f0124953:	83 f8 01             	cmp    $0x1,%eax
f0124956:	74 17                	je     f012496f <test_kheap_virt_addr+0x40a>
f0124958:	83 ec 04             	sub    $0x4,%esp
f012495b:	68 f8 a8 13 f0       	push   $0xf013a8f8
f0124960:	68 ff 08 00 00       	push   $0x8ff
f0124965:	68 76 a8 13 f0       	push   $0xf013a876
f012496a:	e8 37 b8 fd ff       	call   f01001a6 <_panic>

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f012496f:	e8 4a 7a fe ff       	call   f010c3be <sys_calculate_free_frames>
f0124974:	89 45 bc             	mov    %eax,-0x44(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0124977:	e8 10 f3 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f012497c:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[3] = kmalloc(2*kilo);
f012497f:	83 ec 0c             	sub    $0xc,%esp
f0124982:	68 00 08 00 00       	push   $0x800
f0124987:	e8 38 2c fe ff       	call   f01075c4 <kmalloc>
f012498c:	83 c4 10             	add    $0x10,%esp
f012498f:	89 85 34 fd ff ff    	mov    %eax,-0x2cc(%ebp)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0124995:	8b 85 34 fd ff ff    	mov    -0x2cc(%ebp),%eax
f012499b:	89 c1                	mov    %eax,%ecx
f012499d:	c7 85 6c ff ff ff 00 	movl   $0x1000,-0x94(%ebp)
f01249a4:	10 00 00 
f01249a7:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f01249ad:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01249b2:	89 85 68 ff ff ff    	mov    %eax,-0x98(%ebp)
f01249b8:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f01249be:	ba 00 00 00 00       	mov    $0x0,%edx
f01249c3:	f7 b5 6c ff ff ff    	divl   -0x94(%ebp)
f01249c9:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f01249cf:	29 d0                	sub    %edx,%eax
f01249d1:	89 c3                	mov    %eax,%ebx
f01249d3:	c7 85 64 ff ff ff 00 	movl   $0x1000,-0x9c(%ebp)
f01249da:	10 00 00 
f01249dd:	a0 bc 0e 6c f0       	mov    0xf06c0ebc,%al
f01249e2:	0f b6 d0             	movzbl %al,%edx
f01249e5:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f01249eb:	01 d0                	add    %edx,%eax
f01249ed:	48                   	dec    %eax
f01249ee:	89 85 60 ff ff ff    	mov    %eax,-0xa0(%ebp)
f01249f4:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f01249fa:	ba 00 00 00 00       	mov    $0x0,%edx
f01249ff:	f7 b5 64 ff ff ff    	divl   -0x9c(%ebp)
f0124a05:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f0124a0b:	29 d0                	sub    %edx,%eax
f0124a0d:	01 c3                	add    %eax,%ebx
f0124a0f:	c7 85 5c ff ff ff 00 	movl   $0x1000,-0xa4(%ebp)
f0124a16:	10 00 00 
f0124a19:	a0 bc 0e 6c f0       	mov    0xf06c0ebc,%al
f0124a1e:	0f b6 c0             	movzbl %al,%eax
f0124a21:	c1 e0 04             	shl    $0x4,%eax
f0124a24:	89 c2                	mov    %eax,%edx
f0124a26:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f0124a2c:	01 d0                	add    %edx,%eax
f0124a2e:	48                   	dec    %eax
f0124a2f:	89 85 58 ff ff ff    	mov    %eax,-0xa8(%ebp)
f0124a35:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f0124a3b:	ba 00 00 00 00       	mov    $0x0,%edx
f0124a40:	f7 b5 5c ff ff ff    	divl   -0xa4(%ebp)
f0124a46:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f0124a4c:	29 d0                	sub    %edx,%eax
f0124a4e:	01 d8                	add    %ebx,%eax
f0124a50:	2d 00 b0 bf 09       	sub    $0x9bfb000,%eax
f0124a55:	39 c1                	cmp    %eax,%ecx
f0124a57:	74 17                	je     f0124a70 <test_kheap_virt_addr+0x50b>
f0124a59:	83 ec 04             	sub    $0x4,%esp
f0124a5c:	68 5c a9 13 f0       	push   $0xf013a95c
f0124a61:	68 05 09 00 00       	push   $0x905
f0124a66:	68 76 a8 13 f0       	push   $0xf013a876
f0124a6b:	e8 36 b7 fd ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0124a70:	e8 17 f2 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f0124a75:	3b 45 b8             	cmp    -0x48(%ebp),%eax
f0124a78:	74 17                	je     f0124a91 <test_kheap_virt_addr+0x52c>
f0124a7a:	83 ec 04             	sub    $0x4,%esp
f0124a7d:	68 90 a8 13 f0       	push   $0xf013a890
f0124a82:	68 06 09 00 00       	push   $0x906
f0124a87:	68 76 a8 13 f0       	push   $0xf013a876
f0124a8c:	e8 15 b7 fd ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f0124a91:	8b 5d bc             	mov    -0x44(%ebp),%ebx
f0124a94:	e8 25 79 fe ff       	call   f010c3be <sys_calculate_free_frames>
f0124a99:	29 c3                	sub    %eax,%ebx
f0124a9b:	89 d8                	mov    %ebx,%eax
f0124a9d:	83 f8 01             	cmp    $0x1,%eax
f0124aa0:	74 17                	je     f0124ab9 <test_kheap_virt_addr+0x554>
f0124aa2:	83 ec 04             	sub    $0x4,%esp
f0124aa5:	68 f8 a8 13 f0       	push   $0xf013a8f8
f0124aaa:	68 07 09 00 00       	push   $0x907
f0124aaf:	68 76 a8 13 f0       	push   $0xf013a876
f0124ab4:	e8 ed b6 fd ff       	call   f01001a6 <_panic>

		//7 KB
		freeFrames = sys_calculate_free_frames() ;
f0124ab9:	e8 00 79 fe ff       	call   f010c3be <sys_calculate_free_frames>
f0124abe:	89 45 bc             	mov    %eax,-0x44(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0124ac1:	e8 c6 f1 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f0124ac6:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[4] = kmalloc(7*kilo);
f0124ac9:	83 ec 0c             	sub    $0xc,%esp
f0124acc:	68 00 1c 00 00       	push   $0x1c00
f0124ad1:	e8 ee 2a fe ff       	call   f01075c4 <kmalloc>
f0124ad6:	83 c4 10             	add    $0x10,%esp
f0124ad9:	89 85 38 fd ff ff    	mov    %eax,-0x2c8(%ebp)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0124adf:	8b 85 38 fd ff ff    	mov    -0x2c8(%ebp),%eax
f0124ae5:	89 c1                	mov    %eax,%ecx
f0124ae7:	c7 85 54 ff ff ff 00 	movl   $0x1000,-0xac(%ebp)
f0124aee:	10 00 00 
f0124af1:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f0124af7:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0124afc:	89 85 50 ff ff ff    	mov    %eax,-0xb0(%ebp)
f0124b02:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f0124b08:	ba 00 00 00 00       	mov    $0x0,%edx
f0124b0d:	f7 b5 54 ff ff ff    	divl   -0xac(%ebp)
f0124b13:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f0124b19:	29 d0                	sub    %edx,%eax
f0124b1b:	89 c3                	mov    %eax,%ebx
f0124b1d:	c7 85 4c ff ff ff 00 	movl   $0x1000,-0xb4(%ebp)
f0124b24:	10 00 00 
f0124b27:	a0 bc 0e 6c f0       	mov    0xf06c0ebc,%al
f0124b2c:	0f b6 d0             	movzbl %al,%edx
f0124b2f:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0124b35:	01 d0                	add    %edx,%eax
f0124b37:	48                   	dec    %eax
f0124b38:	89 85 48 ff ff ff    	mov    %eax,-0xb8(%ebp)
f0124b3e:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f0124b44:	ba 00 00 00 00       	mov    $0x0,%edx
f0124b49:	f7 b5 4c ff ff ff    	divl   -0xb4(%ebp)
f0124b4f:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f0124b55:	29 d0                	sub    %edx,%eax
f0124b57:	01 c3                	add    %eax,%ebx
f0124b59:	c7 85 44 ff ff ff 00 	movl   $0x1000,-0xbc(%ebp)
f0124b60:	10 00 00 
f0124b63:	a0 bc 0e 6c f0       	mov    0xf06c0ebc,%al
f0124b68:	0f b6 c0             	movzbl %al,%eax
f0124b6b:	c1 e0 04             	shl    $0x4,%eax
f0124b6e:	89 c2                	mov    %eax,%edx
f0124b70:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0124b76:	01 d0                	add    %edx,%eax
f0124b78:	48                   	dec    %eax
f0124b79:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%ebp)
f0124b7f:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0124b85:	ba 00 00 00 00       	mov    $0x0,%edx
f0124b8a:	f7 b5 44 ff ff ff    	divl   -0xbc(%ebp)
f0124b90:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0124b96:	29 d0                	sub    %edx,%eax
f0124b98:	01 d8                	add    %ebx,%eax
f0124b9a:	2d 00 a0 bf 09       	sub    $0x9bfa000,%eax
f0124b9f:	39 c1                	cmp    %eax,%ecx
f0124ba1:	74 17                	je     f0124bba <test_kheap_virt_addr+0x655>
f0124ba3:	83 ec 04             	sub    $0x4,%esp
f0124ba6:	68 5c a9 13 f0       	push   $0xf013a95c
f0124bab:	68 0d 09 00 00       	push   $0x90d
f0124bb0:	68 76 a8 13 f0       	push   $0xf013a876
f0124bb5:	e8 ec b5 fd ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0124bba:	e8 cd f0 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f0124bbf:	3b 45 b8             	cmp    -0x48(%ebp),%eax
f0124bc2:	74 17                	je     f0124bdb <test_kheap_virt_addr+0x676>
f0124bc4:	83 ec 04             	sub    $0x4,%esp
f0124bc7:	68 90 a8 13 f0       	push   $0xf013a890
f0124bcc:	68 0e 09 00 00       	push   $0x90e
f0124bd1:	68 76 a8 13 f0       	push   $0xf013a876
f0124bd6:	e8 cb b5 fd ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: pages are not loaded successfully into memory");
f0124bdb:	8b 5d bc             	mov    -0x44(%ebp),%ebx
f0124bde:	e8 db 77 fe ff       	call   f010c3be <sys_calculate_free_frames>
f0124be3:	29 c3                	sub    %eax,%ebx
f0124be5:	89 d8                	mov    %ebx,%eax
f0124be7:	83 f8 02             	cmp    $0x2,%eax
f0124bea:	74 17                	je     f0124c03 <test_kheap_virt_addr+0x69e>
f0124bec:	83 ec 04             	sub    $0x4,%esp
f0124bef:	68 f8 a8 13 f0       	push   $0xf013a8f8
f0124bf4:	68 0f 09 00 00       	push   $0x90f
f0124bf9:	68 76 a8 13 f0       	push   $0xf013a876
f0124bfe:	e8 a3 b5 fd ff       	call   f01001a6 <_panic>

		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f0124c03:	e8 b6 77 fe ff       	call   f010c3be <sys_calculate_free_frames>
f0124c08:	89 45 bc             	mov    %eax,-0x44(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0124c0b:	e8 7c f0 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f0124c10:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[5] = kmalloc(3*Mega-kilo);
f0124c13:	83 ec 0c             	sub    $0xc,%esp
f0124c16:	68 00 fc 2f 00       	push   $0x2ffc00
f0124c1b:	e8 a4 29 fe ff       	call   f01075c4 <kmalloc>
f0124c20:	83 c4 10             	add    $0x10,%esp
f0124c23:	89 85 3c fd ff ff    	mov    %eax,-0x2c4(%ebp)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo) ) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0124c29:	8b 85 3c fd ff ff    	mov    -0x2c4(%ebp),%eax
f0124c2f:	89 c1                	mov    %eax,%ecx
f0124c31:	c7 85 3c ff ff ff 00 	movl   $0x1000,-0xc4(%ebp)
f0124c38:	10 00 00 
f0124c3b:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f0124c41:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0124c46:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
f0124c4c:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f0124c52:	ba 00 00 00 00       	mov    $0x0,%edx
f0124c57:	f7 b5 3c ff ff ff    	divl   -0xc4(%ebp)
f0124c5d:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f0124c63:	29 d0                	sub    %edx,%eax
f0124c65:	89 c3                	mov    %eax,%ebx
f0124c67:	c7 85 34 ff ff ff 00 	movl   $0x1000,-0xcc(%ebp)
f0124c6e:	10 00 00 
f0124c71:	a0 bc 0e 6c f0       	mov    0xf06c0ebc,%al
f0124c76:	0f b6 d0             	movzbl %al,%edx
f0124c79:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f0124c7f:	01 d0                	add    %edx,%eax
f0124c81:	48                   	dec    %eax
f0124c82:	89 85 30 ff ff ff    	mov    %eax,-0xd0(%ebp)
f0124c88:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f0124c8e:	ba 00 00 00 00       	mov    $0x0,%edx
f0124c93:	f7 b5 34 ff ff ff    	divl   -0xcc(%ebp)
f0124c99:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f0124c9f:	29 d0                	sub    %edx,%eax
f0124ca1:	01 c3                	add    %eax,%ebx
f0124ca3:	c7 85 2c ff ff ff 00 	movl   $0x1000,-0xd4(%ebp)
f0124caa:	10 00 00 
f0124cad:	a0 bc 0e 6c f0       	mov    0xf06c0ebc,%al
f0124cb2:	0f b6 c0             	movzbl %al,%eax
f0124cb5:	c1 e0 04             	shl    $0x4,%eax
f0124cb8:	89 c2                	mov    %eax,%edx
f0124cba:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f0124cc0:	01 d0                	add    %edx,%eax
f0124cc2:	48                   	dec    %eax
f0124cc3:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%ebp)
f0124cc9:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f0124ccf:	ba 00 00 00 00       	mov    $0x0,%edx
f0124cd4:	f7 b5 2c ff ff ff    	divl   -0xd4(%ebp)
f0124cda:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f0124ce0:	29 d0                	sub    %edx,%eax
f0124ce2:	01 d8                	add    %ebx,%eax
f0124ce4:	2d 00 80 bf 09       	sub    $0x9bf8000,%eax
f0124ce9:	39 c1                	cmp    %eax,%ecx
f0124ceb:	74 17                	je     f0124d04 <test_kheap_virt_addr+0x79f>
f0124ced:	83 ec 04             	sub    $0x4,%esp
f0124cf0:	68 5c a9 13 f0       	push   $0xf013a95c
f0124cf5:	68 15 09 00 00       	push   $0x915
f0124cfa:	68 76 a8 13 f0       	push   $0xf013a876
f0124cff:	e8 a2 b4 fd ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0124d04:	e8 83 ef fd ff       	call   f0103c8c <pf_calculate_free_frames>
f0124d09:	3b 45 b8             	cmp    -0x48(%ebp),%eax
f0124d0c:	74 17                	je     f0124d25 <test_kheap_virt_addr+0x7c0>
f0124d0e:	83 ec 04             	sub    $0x4,%esp
f0124d11:	68 90 a8 13 f0       	push   $0xf013a890
f0124d16:	68 16 09 00 00       	push   $0x916
f0124d1b:	68 76 a8 13 f0       	push   $0xf013a876
f0124d20:	e8 81 b4 fd ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
f0124d25:	8b 5d bc             	mov    -0x44(%ebp),%ebx
f0124d28:	e8 91 76 fe ff       	call   f010c3be <sys_calculate_free_frames>
f0124d2d:	29 c3                	sub    %eax,%ebx
f0124d2f:	89 d8                	mov    %ebx,%eax
f0124d31:	3d 00 03 00 00       	cmp    $0x300,%eax
f0124d36:	74 17                	je     f0124d4f <test_kheap_virt_addr+0x7ea>
f0124d38:	83 ec 04             	sub    $0x4,%esp
f0124d3b:	68 f8 a8 13 f0       	push   $0xf013a8f8
f0124d40:	68 17 09 00 00       	push   $0x917
f0124d45:	68 76 a8 13 f0       	push   $0xf013a876
f0124d4a:	e8 57 b4 fd ff       	call   f01001a6 <_panic>

		//6 MB
		freeFrames = sys_calculate_free_frames() ;
f0124d4f:	e8 6a 76 fe ff       	call   f010c3be <sys_calculate_free_frames>
f0124d54:	89 45 bc             	mov    %eax,-0x44(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0124d57:	e8 30 ef fd ff       	call   f0103c8c <pf_calculate_free_frames>
f0124d5c:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[6] = kmalloc(6*Mega-kilo);
f0124d5f:	83 ec 0c             	sub    $0xc,%esp
f0124d62:	68 00 fc 5f 00       	push   $0x5ffc00
f0124d67:	e8 58 28 fe ff       	call   f01075c4 <kmalloc>
f0124d6c:	83 c4 10             	add    $0x10,%esp
f0124d6f:	89 85 40 fd ff ff    	mov    %eax,-0x2c0(%ebp)
		if ((uint32) ptr_allocations[6] != (ACTUAL_START + 7*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0124d75:	8b 85 40 fd ff ff    	mov    -0x2c0(%ebp),%eax
f0124d7b:	89 c1                	mov    %eax,%ecx
f0124d7d:	c7 85 24 ff ff ff 00 	movl   $0x1000,-0xdc(%ebp)
f0124d84:	10 00 00 
f0124d87:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0124d8d:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0124d92:	89 85 20 ff ff ff    	mov    %eax,-0xe0(%ebp)
f0124d98:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0124d9e:	ba 00 00 00 00       	mov    $0x0,%edx
f0124da3:	f7 b5 24 ff ff ff    	divl   -0xdc(%ebp)
f0124da9:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0124daf:	29 d0                	sub    %edx,%eax
f0124db1:	89 c3                	mov    %eax,%ebx
f0124db3:	c7 85 1c ff ff ff 00 	movl   $0x1000,-0xe4(%ebp)
f0124dba:	10 00 00 
f0124dbd:	a0 bc 0e 6c f0       	mov    0xf06c0ebc,%al
f0124dc2:	0f b6 d0             	movzbl %al,%edx
f0124dc5:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f0124dcb:	01 d0                	add    %edx,%eax
f0124dcd:	48                   	dec    %eax
f0124dce:	89 85 18 ff ff ff    	mov    %eax,-0xe8(%ebp)
f0124dd4:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f0124dda:	ba 00 00 00 00       	mov    $0x0,%edx
f0124ddf:	f7 b5 1c ff ff ff    	divl   -0xe4(%ebp)
f0124de5:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f0124deb:	29 d0                	sub    %edx,%eax
f0124ded:	01 c3                	add    %eax,%ebx
f0124def:	c7 85 14 ff ff ff 00 	movl   $0x1000,-0xec(%ebp)
f0124df6:	10 00 00 
f0124df9:	a0 bc 0e 6c f0       	mov    0xf06c0ebc,%al
f0124dfe:	0f b6 c0             	movzbl %al,%eax
f0124e01:	c1 e0 04             	shl    $0x4,%eax
f0124e04:	89 c2                	mov    %eax,%edx
f0124e06:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f0124e0c:	01 d0                	add    %edx,%eax
f0124e0e:	48                   	dec    %eax
f0124e0f:	89 85 10 ff ff ff    	mov    %eax,-0xf0(%ebp)
f0124e15:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f0124e1b:	ba 00 00 00 00       	mov    $0x0,%edx
f0124e20:	f7 b5 14 ff ff ff    	divl   -0xec(%ebp)
f0124e26:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f0124e2c:	29 d0                	sub    %edx,%eax
f0124e2e:	01 d8                	add    %ebx,%eax
f0124e30:	2d 00 80 8f 09       	sub    $0x98f8000,%eax
f0124e35:	39 c1                	cmp    %eax,%ecx
f0124e37:	74 17                	je     f0124e50 <test_kheap_virt_addr+0x8eb>
f0124e39:	83 ec 04             	sub    $0x4,%esp
f0124e3c:	68 5c a9 13 f0       	push   $0xf013a95c
f0124e41:	68 1d 09 00 00       	push   $0x91d
f0124e46:	68 76 a8 13 f0       	push   $0xf013a876
f0124e4b:	e8 56 b3 fd ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0124e50:	e8 37 ee fd ff       	call   f0103c8c <pf_calculate_free_frames>
f0124e55:	3b 45 b8             	cmp    -0x48(%ebp),%eax
f0124e58:	74 17                	je     f0124e71 <test_kheap_virt_addr+0x90c>
f0124e5a:	83 ec 04             	sub    $0x4,%esp
f0124e5d:	68 90 a8 13 f0       	push   $0xf013a890
f0124e62:	68 1e 09 00 00       	push   $0x91e
f0124e67:	68 76 a8 13 f0       	push   $0xf013a876
f0124e6c:	e8 35 b3 fd ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1536) panic("Wrong allocation: pages are not loaded successfully into memory");
f0124e71:	8b 5d bc             	mov    -0x44(%ebp),%ebx
f0124e74:	e8 45 75 fe ff       	call   f010c3be <sys_calculate_free_frames>
f0124e79:	29 c3                	sub    %eax,%ebx
f0124e7b:	89 d8                	mov    %ebx,%eax
f0124e7d:	3d 00 06 00 00       	cmp    $0x600,%eax
f0124e82:	74 17                	je     f0124e9b <test_kheap_virt_addr+0x936>
f0124e84:	83 ec 04             	sub    $0x4,%esp
f0124e87:	68 f8 a8 13 f0       	push   $0xf013a8f8
f0124e8c:	68 1f 09 00 00       	push   $0x91f
f0124e91:	68 76 a8 13 f0       	push   $0xf013a876
f0124e96:	e8 0b b3 fd ff       	call   f01001a6 <_panic>

		//14 KB
		freeFrames = sys_calculate_free_frames() ;
f0124e9b:	e8 1e 75 fe ff       	call   f010c3be <sys_calculate_free_frames>
f0124ea0:	89 45 bc             	mov    %eax,-0x44(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0124ea3:	e8 e4 ed fd ff       	call   f0103c8c <pf_calculate_free_frames>
f0124ea8:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[7] = kmalloc(14*kilo);
f0124eab:	83 ec 0c             	sub    $0xc,%esp
f0124eae:	68 00 38 00 00       	push   $0x3800
f0124eb3:	e8 0c 27 fe ff       	call   f01075c4 <kmalloc>
f0124eb8:	83 c4 10             	add    $0x10,%esp
f0124ebb:	89 85 44 fd ff ff    	mov    %eax,-0x2bc(%ebp)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 13*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0124ec1:	8b 85 44 fd ff ff    	mov    -0x2bc(%ebp),%eax
f0124ec7:	89 c1                	mov    %eax,%ecx
f0124ec9:	c7 85 0c ff ff ff 00 	movl   $0x1000,-0xf4(%ebp)
f0124ed0:	10 00 00 
f0124ed3:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f0124ed9:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0124ede:	89 85 08 ff ff ff    	mov    %eax,-0xf8(%ebp)
f0124ee4:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f0124eea:	ba 00 00 00 00       	mov    $0x0,%edx
f0124eef:	f7 b5 0c ff ff ff    	divl   -0xf4(%ebp)
f0124ef5:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f0124efb:	29 d0                	sub    %edx,%eax
f0124efd:	89 c3                	mov    %eax,%ebx
f0124eff:	c7 85 04 ff ff ff 00 	movl   $0x1000,-0xfc(%ebp)
f0124f06:	10 00 00 
f0124f09:	a0 bc 0e 6c f0       	mov    0xf06c0ebc,%al
f0124f0e:	0f b6 d0             	movzbl %al,%edx
f0124f11:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f0124f17:	01 d0                	add    %edx,%eax
f0124f19:	48                   	dec    %eax
f0124f1a:	89 85 00 ff ff ff    	mov    %eax,-0x100(%ebp)
f0124f20:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f0124f26:	ba 00 00 00 00       	mov    $0x0,%edx
f0124f2b:	f7 b5 04 ff ff ff    	divl   -0xfc(%ebp)
f0124f31:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f0124f37:	29 d0                	sub    %edx,%eax
f0124f39:	01 c3                	add    %eax,%ebx
f0124f3b:	c7 85 fc fe ff ff 00 	movl   $0x1000,-0x104(%ebp)
f0124f42:	10 00 00 
f0124f45:	a0 bc 0e 6c f0       	mov    0xf06c0ebc,%al
f0124f4a:	0f b6 c0             	movzbl %al,%eax
f0124f4d:	c1 e0 04             	shl    $0x4,%eax
f0124f50:	89 c2                	mov    %eax,%edx
f0124f52:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f0124f58:	01 d0                	add    %edx,%eax
f0124f5a:	48                   	dec    %eax
f0124f5b:	89 85 f8 fe ff ff    	mov    %eax,-0x108(%ebp)
f0124f61:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f0124f67:	ba 00 00 00 00       	mov    $0x0,%edx
f0124f6c:	f7 b5 fc fe ff ff    	divl   -0x104(%ebp)
f0124f72:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f0124f78:	29 d0                	sub    %edx,%eax
f0124f7a:	01 d8                	add    %ebx,%eax
f0124f7c:	2d 00 80 2f 09       	sub    $0x92f8000,%eax
f0124f81:	39 c1                	cmp    %eax,%ecx
f0124f83:	74 17                	je     f0124f9c <test_kheap_virt_addr+0xa37>
f0124f85:	83 ec 04             	sub    $0x4,%esp
f0124f88:	68 5c a9 13 f0       	push   $0xf013a95c
f0124f8d:	68 25 09 00 00       	push   $0x925
f0124f92:	68 76 a8 13 f0       	push   $0xf013a876
f0124f97:	e8 0a b2 fd ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0124f9c:	e8 eb ec fd ff       	call   f0103c8c <pf_calculate_free_frames>
f0124fa1:	3b 45 b8             	cmp    -0x48(%ebp),%eax
f0124fa4:	74 17                	je     f0124fbd <test_kheap_virt_addr+0xa58>
f0124fa6:	83 ec 04             	sub    $0x4,%esp
f0124fa9:	68 90 a8 13 f0       	push   $0xf013a890
f0124fae:	68 26 09 00 00       	push   $0x926
f0124fb3:	68 76 a8 13 f0       	push   $0xf013a876
f0124fb8:	e8 e9 b1 fd ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 4) panic("Wrong allocation: pages are not loaded successfully into memory");
f0124fbd:	8b 5d bc             	mov    -0x44(%ebp),%ebx
f0124fc0:	e8 f9 73 fe ff       	call   f010c3be <sys_calculate_free_frames>
f0124fc5:	29 c3                	sub    %eax,%ebx
f0124fc7:	89 d8                	mov    %ebx,%eax
f0124fc9:	83 f8 04             	cmp    $0x4,%eax
f0124fcc:	74 17                	je     f0124fe5 <test_kheap_virt_addr+0xa80>
f0124fce:	83 ec 04             	sub    $0x4,%esp
f0124fd1:	68 f8 a8 13 f0       	push   $0xf013a8f8
f0124fd6:	68 27 09 00 00       	push   $0x927
f0124fdb:	68 76 a8 13 f0       	push   $0xf013a876
f0124fe0:	e8 c1 b1 fd ff       	call   f01001a6 <_panic>
	}

	uint32 allPAs[(13*Mega + 32*kilo+ (INITIAL_KHEAP_ALLOCATIONS-DYNAMIC_ALLOCATOR_DS))/PAGE_SIZE] ;
f0124fe5:	c7 85 f4 fe ff ff 00 	movl   $0x1000,-0x10c(%ebp)
f0124fec:	10 00 00 
f0124fef:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f0124ff5:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0124ffa:	89 85 f0 fe ff ff    	mov    %eax,-0x110(%ebp)
f0125000:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f0125006:	ba 00 00 00 00       	mov    $0x0,%edx
f012500b:	f7 b5 f4 fe ff ff    	divl   -0x10c(%ebp)
f0125011:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f0125017:	29 d0                	sub    %edx,%eax
f0125019:	89 c1                	mov    %eax,%ecx
f012501b:	c7 85 ec fe ff ff 00 	movl   $0x1000,-0x114(%ebp)
f0125022:	10 00 00 
f0125025:	a0 bc 0e 6c f0       	mov    0xf06c0ebc,%al
f012502a:	0f b6 d0             	movzbl %al,%edx
f012502d:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f0125033:	01 d0                	add    %edx,%eax
f0125035:	48                   	dec    %eax
f0125036:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)
f012503c:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f0125042:	ba 00 00 00 00       	mov    $0x0,%edx
f0125047:	f7 b5 ec fe ff ff    	divl   -0x114(%ebp)
f012504d:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f0125053:	29 d0                	sub    %edx,%eax
f0125055:	01 c1                	add    %eax,%ecx
f0125057:	c7 85 e4 fe ff ff 00 	movl   $0x1000,-0x11c(%ebp)
f012505e:	10 00 00 
f0125061:	a0 bc 0e 6c f0       	mov    0xf06c0ebc,%al
f0125066:	0f b6 c0             	movzbl %al,%eax
f0125069:	c1 e0 04             	shl    $0x4,%eax
f012506c:	89 c2                	mov    %eax,%edx
f012506e:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f0125074:	01 d0                	add    %edx,%eax
f0125076:	48                   	dec    %eax
f0125077:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
f012507d:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f0125083:	ba 00 00 00 00       	mov    $0x0,%edx
f0125088:	f7 b5 e4 fe ff ff    	divl   -0x11c(%ebp)
f012508e:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f0125094:	29 d0                	sub    %edx,%eax
f0125096:	01 c1                	add    %eax,%ecx
f0125098:	c7 85 dc fe ff ff 00 	movl   $0x1000,-0x124(%ebp)
f012509f:	10 00 00 
f01250a2:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f01250a8:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01250ad:	89 85 d8 fe ff ff    	mov    %eax,-0x128(%ebp)
f01250b3:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f01250b9:	ba 00 00 00 00       	mov    $0x0,%edx
f01250be:	f7 b5 dc fe ff ff    	divl   -0x124(%ebp)
f01250c4:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f01250ca:	29 d0                	sub    %edx,%eax
f01250cc:	29 c1                	sub    %eax,%ecx
f01250ce:	89 c8                	mov    %ecx,%eax
f01250d0:	05 00 c0 d0 00       	add    $0xd0c000,%eax
f01250d5:	c1 e8 0c             	shr    $0xc,%eax
f01250d8:	89 c2                	mov    %eax,%edx
f01250da:	4a                   	dec    %edx
f01250db:	89 95 d4 fe ff ff    	mov    %edx,-0x12c(%ebp)
f01250e1:	c1 e0 02             	shl    $0x2,%eax
f01250e4:	8d 50 03             	lea    0x3(%eax),%edx
f01250e7:	b8 10 00 00 00       	mov    $0x10,%eax
f01250ec:	48                   	dec    %eax
f01250ed:	01 d0                	add    %edx,%eax
f01250ef:	bf 10 00 00 00       	mov    $0x10,%edi
f01250f4:	ba 00 00 00 00       	mov    $0x0,%edx
f01250f9:	f7 f7                	div    %edi
f01250fb:	6b c0 10             	imul   $0x10,%eax,%eax
f01250fe:	29 c4                	sub    %eax,%esp
f0125100:	89 e0                	mov    %esp,%eax
f0125102:	83 c0 03             	add    $0x3,%eax
f0125105:	c1 e8 02             	shr    $0x2,%eax
f0125108:	c1 e0 02             	shl    $0x2,%eax
f012510b:	89 85 d0 fe ff ff    	mov    %eax,-0x130(%ebp)
	int numOfFrames = (13*Mega + 32*kilo+(INITIAL_KHEAP_ALLOCATIONS-DYNAMIC_ALLOCATOR_DS))/PAGE_SIZE ;
f0125111:	c7 85 cc fe ff ff 00 	movl   $0x1000,-0x134(%ebp)
f0125118:	10 00 00 
f012511b:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f0125121:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0125126:	89 85 c8 fe ff ff    	mov    %eax,-0x138(%ebp)
f012512c:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f0125132:	ba 00 00 00 00       	mov    $0x0,%edx
f0125137:	f7 b5 cc fe ff ff    	divl   -0x134(%ebp)
f012513d:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f0125143:	29 d0                	sub    %edx,%eax
f0125145:	89 c1                	mov    %eax,%ecx
f0125147:	c7 85 c4 fe ff ff 00 	movl   $0x1000,-0x13c(%ebp)
f012514e:	10 00 00 
f0125151:	a0 bc 0e 6c f0       	mov    0xf06c0ebc,%al
f0125156:	0f b6 d0             	movzbl %al,%edx
f0125159:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f012515f:	01 d0                	add    %edx,%eax
f0125161:	48                   	dec    %eax
f0125162:	89 85 c0 fe ff ff    	mov    %eax,-0x140(%ebp)
f0125168:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f012516e:	ba 00 00 00 00       	mov    $0x0,%edx
f0125173:	f7 b5 c4 fe ff ff    	divl   -0x13c(%ebp)
f0125179:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f012517f:	29 d0                	sub    %edx,%eax
f0125181:	01 c1                	add    %eax,%ecx
f0125183:	c7 85 bc fe ff ff 00 	movl   $0x1000,-0x144(%ebp)
f012518a:	10 00 00 
f012518d:	a0 bc 0e 6c f0       	mov    0xf06c0ebc,%al
f0125192:	0f b6 c0             	movzbl %al,%eax
f0125195:	c1 e0 04             	shl    $0x4,%eax
f0125198:	89 c2                	mov    %eax,%edx
f012519a:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f01251a0:	01 d0                	add    %edx,%eax
f01251a2:	48                   	dec    %eax
f01251a3:	89 85 b8 fe ff ff    	mov    %eax,-0x148(%ebp)
f01251a9:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f01251af:	ba 00 00 00 00       	mov    $0x0,%edx
f01251b4:	f7 b5 bc fe ff ff    	divl   -0x144(%ebp)
f01251ba:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f01251c0:	29 d0                	sub    %edx,%eax
f01251c2:	01 c1                	add    %eax,%ecx
f01251c4:	c7 85 b4 fe ff ff 00 	movl   $0x1000,-0x14c(%ebp)
f01251cb:	10 00 00 
f01251ce:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f01251d4:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01251d9:	89 85 b0 fe ff ff    	mov    %eax,-0x150(%ebp)
f01251df:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f01251e5:	ba 00 00 00 00       	mov    $0x0,%edx
f01251ea:	f7 b5 b4 fe ff ff    	divl   -0x14c(%ebp)
f01251f0:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f01251f6:	29 d0                	sub    %edx,%eax
f01251f8:	29 c1                	sub    %eax,%ecx
f01251fa:	89 c8                	mov    %ecx,%eax
f01251fc:	05 00 c0 d0 00       	add    $0xd0c000,%eax
f0125201:	c1 e8 0c             	shr    $0xc,%eax
f0125204:	89 85 ac fe ff ff    	mov    %eax,-0x154(%ebp)

	//test kheap_virtual_address after kmalloc only [40%]
	{
		uint32 va;
		uint32 endVA = ACTUAL_START + 13*Mega + 32*kilo;
f012520a:	c7 85 a8 fe ff ff 00 	movl   $0x1000,-0x158(%ebp)
f0125211:	10 00 00 
f0125214:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f012521a:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012521f:	89 85 a4 fe ff ff    	mov    %eax,-0x15c(%ebp)
f0125225:	8b 85 a4 fe ff ff    	mov    -0x15c(%ebp),%eax
f012522b:	ba 00 00 00 00       	mov    $0x0,%edx
f0125230:	f7 b5 a8 fe ff ff    	divl   -0x158(%ebp)
f0125236:	8b 85 a4 fe ff ff    	mov    -0x15c(%ebp),%eax
f012523c:	29 d0                	sub    %edx,%eax
f012523e:	89 c1                	mov    %eax,%ecx
f0125240:	c7 85 a0 fe ff ff 00 	movl   $0x1000,-0x160(%ebp)
f0125247:	10 00 00 
f012524a:	a0 bc 0e 6c f0       	mov    0xf06c0ebc,%al
f012524f:	0f b6 d0             	movzbl %al,%edx
f0125252:	8b 85 a0 fe ff ff    	mov    -0x160(%ebp),%eax
f0125258:	01 d0                	add    %edx,%eax
f012525a:	48                   	dec    %eax
f012525b:	89 85 9c fe ff ff    	mov    %eax,-0x164(%ebp)
f0125261:	8b 85 9c fe ff ff    	mov    -0x164(%ebp),%eax
f0125267:	ba 00 00 00 00       	mov    $0x0,%edx
f012526c:	f7 b5 a0 fe ff ff    	divl   -0x160(%ebp)
f0125272:	8b 85 9c fe ff ff    	mov    -0x164(%ebp),%eax
f0125278:	29 d0                	sub    %edx,%eax
f012527a:	01 c1                	add    %eax,%ecx
f012527c:	c7 85 98 fe ff ff 00 	movl   $0x1000,-0x168(%ebp)
f0125283:	10 00 00 
f0125286:	a0 bc 0e 6c f0       	mov    0xf06c0ebc,%al
f012528b:	0f b6 c0             	movzbl %al,%eax
f012528e:	c1 e0 04             	shl    $0x4,%eax
f0125291:	89 c2                	mov    %eax,%edx
f0125293:	8b 85 98 fe ff ff    	mov    -0x168(%ebp),%eax
f0125299:	01 d0                	add    %edx,%eax
f012529b:	48                   	dec    %eax
f012529c:	89 85 94 fe ff ff    	mov    %eax,-0x16c(%ebp)
f01252a2:	8b 85 94 fe ff ff    	mov    -0x16c(%ebp),%eax
f01252a8:	ba 00 00 00 00       	mov    $0x0,%edx
f01252ad:	f7 b5 98 fe ff ff    	divl   -0x168(%ebp)
f01252b3:	8b 85 94 fe ff ff    	mov    -0x16c(%ebp),%eax
f01252b9:	29 d0                	sub    %edx,%eax
f01252bb:	01 c8                	add    %ecx,%eax
f01252bd:	2d 00 40 2f 09       	sub    $0x92f4000,%eax
f01252c2:	89 85 90 fe ff ff    	mov    %eax,-0x170(%ebp)
		int i = 0;
f01252c8:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		int j;
		for (va = (KERNEL_HEAP_START + DYNAMIC_ALLOCATOR_DS); va < endVA; )
f01252cf:	c7 85 8c fe ff ff 00 	movl   $0x1000,-0x174(%ebp)
f01252d6:	10 00 00 
f01252d9:	8b 85 8c fe ff ff    	mov    -0x174(%ebp),%eax
f01252df:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01252e4:	89 85 88 fe ff ff    	mov    %eax,-0x178(%ebp)
f01252ea:	8b 85 88 fe ff ff    	mov    -0x178(%ebp),%eax
f01252f0:	ba 00 00 00 00       	mov    $0x0,%edx
f01252f5:	f7 b5 8c fe ff ff    	divl   -0x174(%ebp)
f01252fb:	8b 85 88 fe ff ff    	mov    -0x178(%ebp),%eax
f0125301:	29 d0                	sub    %edx,%eax
f0125303:	2d 00 00 00 0a       	sub    $0xa000000,%eax
f0125308:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f012530b:	e9 21 01 00 00       	jmp    f0125431 <test_kheap_virt_addr+0xecc>
		{
			uint32 *ptr_table ;
			get_page_table(ptr_page_directory, va, &ptr_table);
f0125310:	a1 b8 0e 6c f0       	mov    0xf06c0eb8,%eax
f0125315:	83 ec 04             	sub    $0x4,%esp
f0125318:	8d 95 24 fd ff ff    	lea    -0x2dc(%ebp),%edx
f012531e:	52                   	push   %edx
f012531f:	ff 75 e4             	pushl  -0x1c(%ebp)
f0125322:	50                   	push   %eax
f0125323:	e8 41 16 fe ff       	call   f0106969 <get_page_table>
f0125328:	83 c4 10             	add    $0x10,%esp
			if (ptr_table == NULL)
f012532b:	8b 85 24 fd ff ff    	mov    -0x2dc(%ebp),%eax
f0125331:	85 c0                	test   %eax,%eax
f0125333:	75 17                	jne    f012534c <test_kheap_virt_addr+0xde7>
				panic("one of the kernel tables is wrongly removed! Tables of Kernel Heap should not be removed");
f0125335:	83 ec 04             	sub    $0x4,%esp
f0125338:	68 18 b2 13 f0       	push   $0xf013b218
f012533d:	68 38 09 00 00       	push   $0x938
f0125342:	68 76 a8 13 f0       	push   $0xf013a876
f0125347:	e8 5a ae fd ff       	call   f01001a6 <_panic>

			for (j = PTX(va); i < numOfFrames && j < 1024; ++j, ++i)
f012534c:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f012534f:	c1 e8 0c             	shr    $0xc,%eax
f0125352:	25 ff 03 00 00       	and    $0x3ff,%eax
f0125357:	89 45 dc             	mov    %eax,-0x24(%ebp)
f012535a:	e9 ba 00 00 00       	jmp    f0125419 <test_kheap_virt_addr+0xeb4>
			{
				allPAs[i] = (ptr_table[j] & 0xFFFFF000);
f012535f:	8b 85 24 fd ff ff    	mov    -0x2dc(%ebp),%eax
f0125365:	8b 55 dc             	mov    -0x24(%ebp),%edx
f0125368:	c1 e2 02             	shl    $0x2,%edx
f012536b:	01 d0                	add    %edx,%eax
f012536d:	8b 00                	mov    (%eax),%eax
f012536f:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0125374:	89 c1                	mov    %eax,%ecx
f0125376:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f012537c:	8b 55 e0             	mov    -0x20(%ebp),%edx
f012537f:	89 0c 90             	mov    %ecx,(%eax,%edx,4)
				uint32 retrievedVA = kheap_virtual_address(allPAs[i]);
f0125382:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f0125388:	8b 55 e0             	mov    -0x20(%ebp),%edx
f012538b:	8b 04 90             	mov    (%eax,%edx,4),%eax
f012538e:	83 ec 0c             	sub    $0xc,%esp
f0125391:	50                   	push   %eax
f0125392:	e8 61 22 fe ff       	call   f01075f8 <kheap_virtual_address>
f0125397:	83 c4 10             	add    $0x10,%esp
f012539a:	89 85 84 fe ff ff    	mov    %eax,-0x17c(%ebp)
				//cprintf("va to check = %x\n", va);
				if (retrievedVA != (va))
f01253a0:	8b 85 84 fe ff ff    	mov    -0x17c(%ebp),%eax
f01253a6:	3b 45 e4             	cmp    -0x1c(%ebp),%eax
f01253a9:	74 61                	je     f012540c <test_kheap_virt_addr+0xea7>
				{
					cprintf("\nretrievedVA = %x, Actual VA = %x, table entry = %x, khep_pa = %x\n",retrievedVA, va + j*PAGE_SIZE, (ptr_table[j] & 0xFFFFF000) , allPAs[i]);
f01253ab:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f01253b1:	8b 55 e0             	mov    -0x20(%ebp),%edx
f01253b4:	8b 04 90             	mov    (%eax,%edx,4),%eax
f01253b7:	8b 95 24 fd ff ff    	mov    -0x2dc(%ebp),%edx
f01253bd:	8b 4d dc             	mov    -0x24(%ebp),%ecx
f01253c0:	c1 e1 02             	shl    $0x2,%ecx
f01253c3:	01 ca                	add    %ecx,%edx
f01253c5:	8b 12                	mov    (%edx),%edx
f01253c7:	89 d1                	mov    %edx,%ecx
f01253c9:	81 e1 00 f0 ff ff    	and    $0xfffff000,%ecx
f01253cf:	8b 55 dc             	mov    -0x24(%ebp),%edx
f01253d2:	c1 e2 0c             	shl    $0xc,%edx
f01253d5:	89 d3                	mov    %edx,%ebx
f01253d7:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f01253da:	01 da                	add    %ebx,%edx
f01253dc:	83 ec 0c             	sub    $0xc,%esp
f01253df:	50                   	push   %eax
f01253e0:	51                   	push   %ecx
f01253e1:	52                   	push   %edx
f01253e2:	ff b5 84 fe ff ff    	pushl  -0x17c(%ebp)
f01253e8:	68 0c b3 13 f0       	push   $0xf013b30c
f01253ed:	e8 3b b8 fd ff       	call   f0100c2d <cprintf>
f01253f2:	83 c4 20             	add    $0x20,%esp
					panic("Wrong kheap_virtual_address");
f01253f5:	83 ec 04             	sub    $0x4,%esp
f01253f8:	68 4f b3 13 f0       	push   $0xf013b34f
f01253fd:	68 42 09 00 00       	push   $0x942
f0125402:	68 76 a8 13 f0       	push   $0xf013a876
f0125407:	e8 9a ad fd ff       	call   f01001a6 <_panic>
				}
				va+=PAGE_SIZE;
f012540c:	81 45 e4 00 10 00 00 	addl   $0x1000,-0x1c(%ebp)
			uint32 *ptr_table ;
			get_page_table(ptr_page_directory, va, &ptr_table);
			if (ptr_table == NULL)
				panic("one of the kernel tables is wrongly removed! Tables of Kernel Heap should not be removed");

			for (j = PTX(va); i < numOfFrames && j < 1024; ++j, ++i)
f0125413:	ff 45 dc             	incl   -0x24(%ebp)
f0125416:	ff 45 e0             	incl   -0x20(%ebp)
f0125419:	8b 45 e0             	mov    -0x20(%ebp),%eax
f012541c:	3b 85 ac fe ff ff    	cmp    -0x154(%ebp),%eax
f0125422:	7d 0d                	jge    f0125431 <test_kheap_virt_addr+0xecc>
f0125424:	81 7d dc ff 03 00 00 	cmpl   $0x3ff,-0x24(%ebp)
f012542b:	0f 8e 2e ff ff ff    	jle    f012535f <test_kheap_virt_addr+0xdfa>
	{
		uint32 va;
		uint32 endVA = ACTUAL_START + 13*Mega + 32*kilo;
		int i = 0;
		int j;
		for (va = (KERNEL_HEAP_START + DYNAMIC_ALLOCATOR_DS); va < endVA; )
f0125431:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0125434:	3b 85 90 fe ff ff    	cmp    -0x170(%ebp),%eax
f012543a:	0f 82 d0 fe ff ff    	jb     f0125310 <test_kheap_virt_addr+0xdab>
				}
				va+=PAGE_SIZE;
			}
		}
	}
	cprintf("\nkheap_virtual_address: current evaluation = 40%");
f0125440:	83 ec 0c             	sub    $0xc,%esp
f0125443:	68 6c b3 13 f0       	push   $0xf013b36c
f0125448:	e8 e0 b7 fd ff       	call   f0100c2d <cprintf>
f012544d:	83 c4 10             	add    $0x10,%esp

	//kfree some of the allocated spaces
	{
		//kfree 1st 2 MB
		int freeFrames = sys_calculate_free_frames() ;
f0125450:	e8 69 6f fe ff       	call   f010c3be <sys_calculate_free_frames>
f0125455:	89 85 80 fe ff ff    	mov    %eax,-0x180(%ebp)
		int freeDiskFrames = pf_calculate_free_frames() ;
f012545b:	e8 2c e8 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f0125460:	89 85 7c fe ff ff    	mov    %eax,-0x184(%ebp)
		kfree(ptr_allocations[0]);
f0125466:	8b 85 28 fd ff ff    	mov    -0x2d8(%ebp),%eax
f012546c:	83 ec 0c             	sub    $0xc,%esp
f012546f:	50                   	push   %eax
f0125470:	e8 69 21 fe ff       	call   f01075de <kfree>
f0125475:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0125478:	e8 0f e8 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f012547d:	3b 85 7c fe ff ff    	cmp    -0x184(%ebp),%eax
f0125483:	74 17                	je     f012549c <test_kheap_virt_addr+0xf37>
f0125485:	83 ec 04             	sub    $0x4,%esp
f0125488:	68 90 a8 13 f0       	push   $0xf013a890
f012548d:	68 50 09 00 00       	push   $0x950
f0125492:	68 76 a8 13 f0       	push   $0xf013a876
f0125497:	e8 0a ad fd ff       	call   f01001a6 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512 ) panic("Wrong kfree: pages in memory are not freed correctly");
f012549c:	e8 1d 6f fe ff       	call   f010c3be <sys_calculate_free_frames>
f01254a1:	89 c2                	mov    %eax,%edx
f01254a3:	8b 85 80 fe ff ff    	mov    -0x180(%ebp),%eax
f01254a9:	29 c2                	sub    %eax,%edx
f01254ab:	89 d0                	mov    %edx,%eax
f01254ad:	3d 00 02 00 00       	cmp    $0x200,%eax
f01254b2:	74 17                	je     f01254cb <test_kheap_virt_addr+0xf66>
f01254b4:	83 ec 04             	sub    $0x4,%esp
f01254b7:	68 00 b0 13 f0       	push   $0xf013b000
f01254bc:	68 51 09 00 00       	push   $0x951
f01254c1:	68 76 a8 13 f0       	push   $0xf013a876
f01254c6:	e8 db ac fd ff       	call   f01001a6 <_panic>

		//kfree 2nd 2 MB
		freeFrames = sys_calculate_free_frames() ;
f01254cb:	e8 ee 6e fe ff       	call   f010c3be <sys_calculate_free_frames>
f01254d0:	89 85 80 fe ff ff    	mov    %eax,-0x180(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01254d6:	e8 b1 e7 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f01254db:	89 85 7c fe ff ff    	mov    %eax,-0x184(%ebp)
		kfree(ptr_allocations[1]);
f01254e1:	8b 85 2c fd ff ff    	mov    -0x2d4(%ebp),%eax
f01254e7:	83 ec 0c             	sub    $0xc,%esp
f01254ea:	50                   	push   %eax
f01254eb:	e8 ee 20 fe ff       	call   f01075de <kfree>
f01254f0:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01254f3:	e8 94 e7 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f01254f8:	3b 85 7c fe ff ff    	cmp    -0x184(%ebp),%eax
f01254fe:	74 17                	je     f0125517 <test_kheap_virt_addr+0xfb2>
f0125500:	83 ec 04             	sub    $0x4,%esp
f0125503:	68 90 a8 13 f0       	push   $0xf013a890
f0125508:	68 57 09 00 00       	push   $0x957
f012550d:	68 76 a8 13 f0       	push   $0xf013a876
f0125512:	e8 8f ac fd ff       	call   f01001a6 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512) panic("Wrong kfree: pages in memory are not freed correctly");
f0125517:	e8 a2 6e fe ff       	call   f010c3be <sys_calculate_free_frames>
f012551c:	89 c2                	mov    %eax,%edx
f012551e:	8b 85 80 fe ff ff    	mov    -0x180(%ebp),%eax
f0125524:	29 c2                	sub    %eax,%edx
f0125526:	89 d0                	mov    %edx,%eax
f0125528:	3d 00 02 00 00       	cmp    $0x200,%eax
f012552d:	74 17                	je     f0125546 <test_kheap_virt_addr+0xfe1>
f012552f:	83 ec 04             	sub    $0x4,%esp
f0125532:	68 00 b0 13 f0       	push   $0xf013b000
f0125537:	68 58 09 00 00       	push   $0x958
f012553c:	68 76 a8 13 f0       	push   $0xf013a876
f0125541:	e8 60 ac fd ff       	call   f01001a6 <_panic>

		//kfree 6 MB
		freeFrames = sys_calculate_free_frames() ;
f0125546:	e8 73 6e fe ff       	call   f010c3be <sys_calculate_free_frames>
f012554b:	89 85 80 fe ff ff    	mov    %eax,-0x180(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0125551:	e8 36 e7 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f0125556:	89 85 7c fe ff ff    	mov    %eax,-0x184(%ebp)
		kfree(ptr_allocations[6]);
f012555c:	8b 85 40 fd ff ff    	mov    -0x2c0(%ebp),%eax
f0125562:	83 ec 0c             	sub    $0xc,%esp
f0125565:	50                   	push   %eax
f0125566:	e8 73 20 fe ff       	call   f01075de <kfree>
f012556b:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012556e:	e8 19 e7 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f0125573:	3b 85 7c fe ff ff    	cmp    -0x184(%ebp),%eax
f0125579:	74 17                	je     f0125592 <test_kheap_virt_addr+0x102d>
f012557b:	83 ec 04             	sub    $0x4,%esp
f012557e:	68 90 a8 13 f0       	push   $0xf013a890
f0125583:	68 5e 09 00 00       	push   $0x95e
f0125588:	68 76 a8 13 f0       	push   $0xf013a876
f012558d:	e8 14 ac fd ff       	call   f01001a6 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 6*Mega/4096) panic("Wrong kfree: pages in memory are not freed correctly");
f0125592:	e8 27 6e fe ff       	call   f010c3be <sys_calculate_free_frames>
f0125597:	89 c2                	mov    %eax,%edx
f0125599:	8b 85 80 fe ff ff    	mov    -0x180(%ebp),%eax
f012559f:	29 c2                	sub    %eax,%edx
f01255a1:	89 d0                	mov    %edx,%eax
f01255a3:	3d 00 06 00 00       	cmp    $0x600,%eax
f01255a8:	74 17                	je     f01255c1 <test_kheap_virt_addr+0x105c>
f01255aa:	83 ec 04             	sub    $0x4,%esp
f01255ad:	68 00 b0 13 f0       	push   $0xf013b000
f01255b2:	68 5f 09 00 00       	push   $0x95f
f01255b7:	68 76 a8 13 f0       	push   $0xf013a876
f01255bc:	e8 e5 ab fd ff       	call   f01001a6 <_panic>


	//test kheap_virtual_address after kmalloc and kfree [40%]
	{
		uint32 va;
		uint32 endVA = ACTUAL_START + 13*Mega + 32*kilo;
f01255c1:	c7 85 78 fe ff ff 00 	movl   $0x1000,-0x188(%ebp)
f01255c8:	10 00 00 
f01255cb:	8b 85 78 fe ff ff    	mov    -0x188(%ebp),%eax
f01255d1:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01255d6:	89 85 74 fe ff ff    	mov    %eax,-0x18c(%ebp)
f01255dc:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f01255e2:	ba 00 00 00 00       	mov    $0x0,%edx
f01255e7:	f7 b5 78 fe ff ff    	divl   -0x188(%ebp)
f01255ed:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f01255f3:	29 d0                	sub    %edx,%eax
f01255f5:	89 c1                	mov    %eax,%ecx
f01255f7:	c7 85 70 fe ff ff 00 	movl   $0x1000,-0x190(%ebp)
f01255fe:	10 00 00 
f0125601:	a0 bc 0e 6c f0       	mov    0xf06c0ebc,%al
f0125606:	0f b6 d0             	movzbl %al,%edx
f0125609:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f012560f:	01 d0                	add    %edx,%eax
f0125611:	48                   	dec    %eax
f0125612:	89 85 6c fe ff ff    	mov    %eax,-0x194(%ebp)
f0125618:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f012561e:	ba 00 00 00 00       	mov    $0x0,%edx
f0125623:	f7 b5 70 fe ff ff    	divl   -0x190(%ebp)
f0125629:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f012562f:	29 d0                	sub    %edx,%eax
f0125631:	01 c1                	add    %eax,%ecx
f0125633:	c7 85 68 fe ff ff 00 	movl   $0x1000,-0x198(%ebp)
f012563a:	10 00 00 
f012563d:	a0 bc 0e 6c f0       	mov    0xf06c0ebc,%al
f0125642:	0f b6 c0             	movzbl %al,%eax
f0125645:	c1 e0 04             	shl    $0x4,%eax
f0125648:	89 c2                	mov    %eax,%edx
f012564a:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f0125650:	01 d0                	add    %edx,%eax
f0125652:	48                   	dec    %eax
f0125653:	89 85 64 fe ff ff    	mov    %eax,-0x19c(%ebp)
f0125659:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f012565f:	ba 00 00 00 00       	mov    $0x0,%edx
f0125664:	f7 b5 68 fe ff ff    	divl   -0x198(%ebp)
f012566a:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f0125670:	29 d0                	sub    %edx,%eax
f0125672:	01 c8                	add    %ecx,%eax
f0125674:	2d 00 40 2f 09       	sub    $0x92f4000,%eax
f0125679:	89 85 60 fe ff ff    	mov    %eax,-0x1a0(%ebp)
		int i = 0;
f012567f:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
		int j;
		//frames of first 4 MB
		uint32 startIndex = (INITIAL_KHEAP_ALLOCATIONS - DYNAMIC_ALLOCATOR_DS) / PAGE_SIZE;
f0125686:	c7 85 5c fe ff ff 00 	movl   $0x1000,-0x1a4(%ebp)
f012568d:	10 00 00 
f0125690:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f0125696:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012569b:	89 85 58 fe ff ff    	mov    %eax,-0x1a8(%ebp)
f01256a1:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f01256a7:	ba 00 00 00 00       	mov    $0x0,%edx
f01256ac:	f7 b5 5c fe ff ff    	divl   -0x1a4(%ebp)
f01256b2:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f01256b8:	29 d0                	sub    %edx,%eax
f01256ba:	89 c1                	mov    %eax,%ecx
f01256bc:	c7 85 54 fe ff ff 00 	movl   $0x1000,-0x1ac(%ebp)
f01256c3:	10 00 00 
f01256c6:	a0 bc 0e 6c f0       	mov    0xf06c0ebc,%al
f01256cb:	0f b6 d0             	movzbl %al,%edx
f01256ce:	8b 85 54 fe ff ff    	mov    -0x1ac(%ebp),%eax
f01256d4:	01 d0                	add    %edx,%eax
f01256d6:	48                   	dec    %eax
f01256d7:	89 85 50 fe ff ff    	mov    %eax,-0x1b0(%ebp)
f01256dd:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f01256e3:	ba 00 00 00 00       	mov    $0x0,%edx
f01256e8:	f7 b5 54 fe ff ff    	divl   -0x1ac(%ebp)
f01256ee:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f01256f4:	29 d0                	sub    %edx,%eax
f01256f6:	01 c1                	add    %eax,%ecx
f01256f8:	c7 85 4c fe ff ff 00 	movl   $0x1000,-0x1b4(%ebp)
f01256ff:	10 00 00 
f0125702:	a0 bc 0e 6c f0       	mov    0xf06c0ebc,%al
f0125707:	0f b6 c0             	movzbl %al,%eax
f012570a:	c1 e0 04             	shl    $0x4,%eax
f012570d:	89 c2                	mov    %eax,%edx
f012570f:	8b 85 4c fe ff ff    	mov    -0x1b4(%ebp),%eax
f0125715:	01 d0                	add    %edx,%eax
f0125717:	48                   	dec    %eax
f0125718:	89 85 48 fe ff ff    	mov    %eax,-0x1b8(%ebp)
f012571e:	8b 85 48 fe ff ff    	mov    -0x1b8(%ebp),%eax
f0125724:	ba 00 00 00 00       	mov    $0x0,%edx
f0125729:	f7 b5 4c fe ff ff    	divl   -0x1b4(%ebp)
f012572f:	8b 85 48 fe ff ff    	mov    -0x1b8(%ebp),%eax
f0125735:	29 d0                	sub    %edx,%eax
f0125737:	01 c1                	add    %eax,%ecx
f0125739:	c7 85 44 fe ff ff 00 	movl   $0x1000,-0x1bc(%ebp)
f0125740:	10 00 00 
f0125743:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f0125749:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012574e:	89 85 40 fe ff ff    	mov    %eax,-0x1c0(%ebp)
f0125754:	8b 85 40 fe ff ff    	mov    -0x1c0(%ebp),%eax
f012575a:	ba 00 00 00 00       	mov    $0x0,%edx
f012575f:	f7 b5 44 fe ff ff    	divl   -0x1bc(%ebp)
f0125765:	8b 85 40 fe ff ff    	mov    -0x1c0(%ebp),%eax
f012576b:	29 d0                	sub    %edx,%eax
f012576d:	29 c1                	sub    %eax,%ecx
f012576f:	89 c8                	mov    %ecx,%eax
f0125771:	05 00 40 00 00       	add    $0x4000,%eax
f0125776:	c1 e8 0c             	shr    $0xc,%eax
f0125779:	89 85 3c fe ff ff    	mov    %eax,-0x1c4(%ebp)
		for (i = startIndex ; i < startIndex + 4*Mega/PAGE_SIZE; ++i)
f012577f:	8b 85 3c fe ff ff    	mov    -0x1c4(%ebp),%eax
f0125785:	89 45 d8             	mov    %eax,-0x28(%ebp)
f0125788:	eb 41                	jmp    f01257cb <test_kheap_virt_addr+0x1266>
		{
			uint32 retrievedVA = kheap_virtual_address(allPAs[i]);
f012578a:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f0125790:	8b 55 d8             	mov    -0x28(%ebp),%edx
f0125793:	8b 04 90             	mov    (%eax,%edx,4),%eax
f0125796:	83 ec 0c             	sub    $0xc,%esp
f0125799:	50                   	push   %eax
f012579a:	e8 59 1e fe ff       	call   f01075f8 <kheap_virtual_address>
f012579f:	83 c4 10             	add    $0x10,%esp
f01257a2:	89 85 38 fe ff ff    	mov    %eax,-0x1c8(%ebp)
			if (retrievedVA != 0)
f01257a8:	83 bd 38 fe ff ff 00 	cmpl   $0x0,-0x1c8(%ebp)
f01257af:	74 17                	je     f01257c8 <test_kheap_virt_addr+0x1263>
			{
				panic("Wrong kheap_virtual_address");
f01257b1:	83 ec 04             	sub    $0x4,%esp
f01257b4:	68 4f b3 13 f0       	push   $0xf013b34f
f01257b9:	68 70 09 00 00       	push   $0x970
f01257be:	68 76 a8 13 f0       	push   $0xf013a876
f01257c3:	e8 de a9 fd ff       	call   f01001a6 <_panic>
		uint32 endVA = ACTUAL_START + 13*Mega + 32*kilo;
		int i = 0;
		int j;
		//frames of first 4 MB
		uint32 startIndex = (INITIAL_KHEAP_ALLOCATIONS - DYNAMIC_ALLOCATOR_DS) / PAGE_SIZE;
		for (i = startIndex ; i < startIndex + 4*Mega/PAGE_SIZE; ++i)
f01257c8:	ff 45 d8             	incl   -0x28(%ebp)
f01257cb:	8b 85 3c fe ff ff    	mov    -0x1c4(%ebp),%eax
f01257d1:	8d 90 00 04 00 00    	lea    0x400(%eax),%edx
f01257d7:	8b 45 d8             	mov    -0x28(%ebp),%eax
f01257da:	39 c2                	cmp    %eax,%edx
f01257dc:	77 ac                	ja     f012578a <test_kheap_virt_addr+0x1225>
				panic("Wrong kheap_virtual_address");
			}

		}
		//next frames until 6 MB
		for (i = startIndex + 4*Mega/PAGE_SIZE; i < startIndex + (7*Mega + 16*kilo)/PAGE_SIZE; ++i)
f01257de:	8b 85 3c fe ff ff    	mov    -0x1c4(%ebp),%eax
f01257e4:	05 00 04 00 00       	add    $0x400,%eax
f01257e9:	89 45 d8             	mov    %eax,-0x28(%ebp)
f01257ec:	e9 83 00 00 00       	jmp    f0125874 <test_kheap_virt_addr+0x130f>
		{
			uint32 retrievedVA = kheap_virtual_address(allPAs[i]);
f01257f1:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f01257f7:	8b 55 d8             	mov    -0x28(%ebp),%edx
f01257fa:	8b 04 90             	mov    (%eax,%edx,4),%eax
f01257fd:	83 ec 0c             	sub    $0xc,%esp
f0125800:	50                   	push   %eax
f0125801:	e8 f2 1d fe ff       	call   f01075f8 <kheap_virtual_address>
f0125806:	83 c4 10             	add    $0x10,%esp
f0125809:	89 85 34 fe ff ff    	mov    %eax,-0x1cc(%ebp)
			if (retrievedVA != KERNEL_HEAP_START + DYNAMIC_ALLOCATOR_DS + i*PAGE_SIZE)
f012580f:	c7 85 30 fe ff ff 00 	movl   $0x1000,-0x1d0(%ebp)
f0125816:	10 00 00 
f0125819:	8b 85 30 fe ff ff    	mov    -0x1d0(%ebp),%eax
f012581f:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0125824:	89 85 2c fe ff ff    	mov    %eax,-0x1d4(%ebp)
f012582a:	8b 85 2c fe ff ff    	mov    -0x1d4(%ebp),%eax
f0125830:	ba 00 00 00 00       	mov    $0x0,%edx
f0125835:	f7 b5 30 fe ff ff    	divl   -0x1d0(%ebp)
f012583b:	8b 85 2c fe ff ff    	mov    -0x1d4(%ebp),%eax
f0125841:	29 d0                	sub    %edx,%eax
f0125843:	89 c2                	mov    %eax,%edx
f0125845:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0125848:	c1 e0 0c             	shl    $0xc,%eax
f012584b:	01 d0                	add    %edx,%eax
f012584d:	2d 00 00 00 0a       	sub    $0xa000000,%eax
f0125852:	3b 85 34 fe ff ff    	cmp    -0x1cc(%ebp),%eax
f0125858:	74 17                	je     f0125871 <test_kheap_virt_addr+0x130c>
			{
				panic("Wrong kheap_virtual_address");
f012585a:	83 ec 04             	sub    $0x4,%esp
f012585d:	68 4f b3 13 f0       	push   $0xf013b34f
f0125862:	68 7a 09 00 00       	push   $0x97a
f0125867:	68 76 a8 13 f0       	push   $0xf013a876
f012586c:	e8 35 a9 fd ff       	call   f01001a6 <_panic>
				panic("Wrong kheap_virtual_address");
			}

		}
		//next frames until 6 MB
		for (i = startIndex + 4*Mega/PAGE_SIZE; i < startIndex + (7*Mega + 16*kilo)/PAGE_SIZE; ++i)
f0125871:	ff 45 d8             	incl   -0x28(%ebp)
f0125874:	8b 85 3c fe ff ff    	mov    -0x1c4(%ebp),%eax
f012587a:	8d 90 04 07 00 00    	lea    0x704(%eax),%edx
f0125880:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0125883:	39 c2                	cmp    %eax,%edx
f0125885:	0f 87 66 ff ff ff    	ja     f01257f1 <test_kheap_virt_addr+0x128c>
			{
				panic("Wrong kheap_virtual_address");
			}
		}
		//frames of 6 MB
		for (i = startIndex + (7*Mega + 16*kilo)/PAGE_SIZE; i < startIndex + (13*Mega + 16*kilo)/PAGE_SIZE; ++i)
f012588b:	8b 85 3c fe ff ff    	mov    -0x1c4(%ebp),%eax
f0125891:	05 04 07 00 00       	add    $0x704,%eax
f0125896:	89 45 d8             	mov    %eax,-0x28(%ebp)
f0125899:	eb 41                	jmp    f01258dc <test_kheap_virt_addr+0x1377>
		{
			uint32 retrievedVA = kheap_virtual_address(allPAs[i]);
f012589b:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f01258a1:	8b 55 d8             	mov    -0x28(%ebp),%edx
f01258a4:	8b 04 90             	mov    (%eax,%edx,4),%eax
f01258a7:	83 ec 0c             	sub    $0xc,%esp
f01258aa:	50                   	push   %eax
f01258ab:	e8 48 1d fe ff       	call   f01075f8 <kheap_virtual_address>
f01258b0:	83 c4 10             	add    $0x10,%esp
f01258b3:	89 85 28 fe ff ff    	mov    %eax,-0x1d8(%ebp)
			if (retrievedVA != 0)
f01258b9:	83 bd 28 fe ff ff 00 	cmpl   $0x0,-0x1d8(%ebp)
f01258c0:	74 17                	je     f01258d9 <test_kheap_virt_addr+0x1374>
			{
				panic("Wrong kheap_virtual_address");
f01258c2:	83 ec 04             	sub    $0x4,%esp
f01258c5:	68 4f b3 13 f0       	push   $0xf013b34f
f01258ca:	68 83 09 00 00       	push   $0x983
f01258cf:	68 76 a8 13 f0       	push   $0xf013a876
f01258d4:	e8 cd a8 fd ff       	call   f01001a6 <_panic>
			{
				panic("Wrong kheap_virtual_address");
			}
		}
		//frames of 6 MB
		for (i = startIndex + (7*Mega + 16*kilo)/PAGE_SIZE; i < startIndex + (13*Mega + 16*kilo)/PAGE_SIZE; ++i)
f01258d9:	ff 45 d8             	incl   -0x28(%ebp)
f01258dc:	8b 85 3c fe ff ff    	mov    -0x1c4(%ebp),%eax
f01258e2:	8d 90 04 0d 00 00    	lea    0xd04(%eax),%edx
f01258e8:	8b 45 d8             	mov    -0x28(%ebp),%eax
f01258eb:	39 c2                	cmp    %eax,%edx
f01258ed:	77 ac                	ja     f012589b <test_kheap_virt_addr+0x1336>
			{
				panic("Wrong kheap_virtual_address");
			}
		}
		//frames of last allocation (14 KB)
		for (i = startIndex + (13*Mega + 16*kilo)/PAGE_SIZE; i < startIndex + (13*Mega + 32*kilo)/PAGE_SIZE; ++i)
f01258ef:	8b 85 3c fe ff ff    	mov    -0x1c4(%ebp),%eax
f01258f5:	05 04 0d 00 00       	add    $0xd04,%eax
f01258fa:	89 45 d8             	mov    %eax,-0x28(%ebp)
f01258fd:	e9 83 00 00 00       	jmp    f0125985 <test_kheap_virt_addr+0x1420>
		{
			uint32 retrievedVA = kheap_virtual_address(allPAs[i]);
f0125902:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f0125908:	8b 55 d8             	mov    -0x28(%ebp),%edx
f012590b:	8b 04 90             	mov    (%eax,%edx,4),%eax
f012590e:	83 ec 0c             	sub    $0xc,%esp
f0125911:	50                   	push   %eax
f0125912:	e8 e1 1c fe ff       	call   f01075f8 <kheap_virtual_address>
f0125917:	83 c4 10             	add    $0x10,%esp
f012591a:	89 85 24 fe ff ff    	mov    %eax,-0x1dc(%ebp)
			if (retrievedVA != KERNEL_HEAP_START + DYNAMIC_ALLOCATOR_DS + i*PAGE_SIZE)
f0125920:	c7 85 20 fe ff ff 00 	movl   $0x1000,-0x1e0(%ebp)
f0125927:	10 00 00 
f012592a:	8b 85 20 fe ff ff    	mov    -0x1e0(%ebp),%eax
f0125930:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0125935:	89 85 1c fe ff ff    	mov    %eax,-0x1e4(%ebp)
f012593b:	8b 85 1c fe ff ff    	mov    -0x1e4(%ebp),%eax
f0125941:	ba 00 00 00 00       	mov    $0x0,%edx
f0125946:	f7 b5 20 fe ff ff    	divl   -0x1e0(%ebp)
f012594c:	8b 85 1c fe ff ff    	mov    -0x1e4(%ebp),%eax
f0125952:	29 d0                	sub    %edx,%eax
f0125954:	89 c2                	mov    %eax,%edx
f0125956:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0125959:	c1 e0 0c             	shl    $0xc,%eax
f012595c:	01 d0                	add    %edx,%eax
f012595e:	2d 00 00 00 0a       	sub    $0xa000000,%eax
f0125963:	3b 85 24 fe ff ff    	cmp    -0x1dc(%ebp),%eax
f0125969:	74 17                	je     f0125982 <test_kheap_virt_addr+0x141d>
			{
				panic("Wrong kheap_virtual_address");
f012596b:	83 ec 04             	sub    $0x4,%esp
f012596e:	68 4f b3 13 f0       	push   $0xf013b34f
f0125973:	68 8c 09 00 00       	push   $0x98c
f0125978:	68 76 a8 13 f0       	push   $0xf013a876
f012597d:	e8 24 a8 fd ff       	call   f01001a6 <_panic>
			{
				panic("Wrong kheap_virtual_address");
			}
		}
		//frames of last allocation (14 KB)
		for (i = startIndex + (13*Mega + 16*kilo)/PAGE_SIZE; i < startIndex + (13*Mega + 32*kilo)/PAGE_SIZE; ++i)
f0125982:	ff 45 d8             	incl   -0x28(%ebp)
f0125985:	8b 85 3c fe ff ff    	mov    -0x1c4(%ebp),%eax
f012598b:	8d 90 08 0d 00 00    	lea    0xd08(%eax),%edx
f0125991:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0125994:	39 c2                	cmp    %eax,%edx
f0125996:	0f 87 66 ff ff ff    	ja     f0125902 <test_kheap_virt_addr+0x139d>
				panic("Wrong kheap_virtual_address");
			}
		}
	}

	cprintf("\b\b\b80%");
f012599c:	83 ec 0c             	sub    $0xc,%esp
f012599f:	68 01 aa 13 f0       	push   $0xf013aa01
f01259a4:	e8 84 b2 fd ff       	call   f0100c2d <cprintf>
f01259a9:	83 c4 10             	add    $0x10,%esp

	//test kheap_virtual_address on frames of KERNEL CODE [20%]
	{
		uint32 i;
		for (i = 1*Mega; i < (uint32)(end_of_kernel - KERNEL_BASE); i+=PAGE_SIZE)
f01259ac:	c7 45 d4 00 00 10 00 	movl   $0x100000,-0x2c(%ebp)
f01259b3:	eb 54                	jmp    f0125a09 <test_kheap_virt_addr+0x14a4>
		{
			uint32 retrievedVA = kheap_virtual_address(i);
f01259b5:	83 ec 0c             	sub    $0xc,%esp
f01259b8:	ff 75 d4             	pushl  -0x2c(%ebp)
f01259bb:	e8 38 1c fe ff       	call   f01075f8 <kheap_virtual_address>
f01259c0:	83 c4 10             	add    $0x10,%esp
f01259c3:	89 85 18 fe ff ff    	mov    %eax,-0x1e8(%ebp)
			if (retrievedVA != 0)
f01259c9:	83 bd 18 fe ff ff 00 	cmpl   $0x0,-0x1e8(%ebp)
f01259d0:	74 30                	je     f0125a02 <test_kheap_virt_addr+0x149d>
			{
				cprintf("\nPA = %x, retrievedVA = %x\n", i, retrievedVA);
f01259d2:	83 ec 04             	sub    $0x4,%esp
f01259d5:	ff b5 18 fe ff ff    	pushl  -0x1e8(%ebp)
f01259db:	ff 75 d4             	pushl  -0x2c(%ebp)
f01259de:	68 9d b3 13 f0       	push   $0xf013b39d
f01259e3:	e8 45 b2 fd ff       	call   f0100c2d <cprintf>
f01259e8:	83 c4 10             	add    $0x10,%esp
				panic("Wrong kheap_virtual_address");
f01259eb:	83 ec 04             	sub    $0x4,%esp
f01259ee:	68 4f b3 13 f0       	push   $0xf013b34f
f01259f3:	68 9c 09 00 00       	push   $0x99c
f01259f8:	68 76 a8 13 f0       	push   $0xf013a876
f01259fd:	e8 a4 a7 fd ff       	call   f01001a6 <_panic>
	cprintf("\b\b\b80%");

	//test kheap_virtual_address on frames of KERNEL CODE [20%]
	{
		uint32 i;
		for (i = 1*Mega; i < (uint32)(end_of_kernel - KERNEL_BASE); i+=PAGE_SIZE)
f0125a02:	81 45 d4 00 10 00 00 	addl   $0x1000,-0x2c(%ebp)
f0125a09:	b8 fc 0f 6c 00       	mov    $0x6c0ffc,%eax
f0125a0e:	39 45 d4             	cmp    %eax,-0x2c(%ebp)
f0125a11:	72 a2                	jb     f01259b5 <test_kheap_virt_addr+0x1450>
				panic("Wrong kheap_virtual_address");
			}
		}
	}

	cprintf("\b\b\b100%\n");
f0125a13:	83 ec 0c             	sub    $0xc,%esp
f0125a16:	68 5a aa 13 f0       	push   $0xf013aa5a
f0125a1b:	e8 0d b2 fd ff       	call   f0100c2d <cprintf>
f0125a20:	83 c4 10             	add    $0x10,%esp

	cprintf("\nCongratulations!! test kheap_virtual_address completed successfully.\n");
f0125a23:	83 ec 0c             	sub    $0xc,%esp
f0125a26:	68 bc b3 13 f0       	push   $0xf013b3bc
f0125a2b:	e8 fd b1 fd ff       	call   f0100c2d <cprintf>
f0125a30:	83 c4 10             	add    $0x10,%esp

	return 1;
f0125a33:	b8 01 00 00 00       	mov    $0x1,%eax
f0125a38:	89 f4                	mov    %esi,%esp

}
f0125a3a:	8d 65 f4             	lea    -0xc(%ebp),%esp
f0125a3d:	5b                   	pop    %ebx
f0125a3e:	5e                   	pop    %esi
f0125a3f:	5f                   	pop    %edi
f0125a40:	5d                   	pop    %ebp
f0125a41:	c3                   	ret    

f0125a42 <test_three_creation_functions>:

int initFreeFrames;
int initFreeDiskFrames ;
uint8 firstCall = 1 ;
int test_three_creation_functions()
{
f0125a42:	55                   	push   %ebp
f0125a43:	89 e5                	mov    %esp,%ebp
f0125a45:	57                   	push   %edi
f0125a46:	56                   	push   %esi
f0125a47:	53                   	push   %ebx
f0125a48:	81 ec ac 00 00 00    	sub    $0xac,%esp
	if (firstCall)
f0125a4e:	a0 cf 0c 19 f0       	mov    0xf0190ccf,%al
f0125a53:	84 c0                	test   %al,%al
f0125a55:	74 56                	je     f0125aad <test_three_creation_functions+0x6b>
	{
		firstCall = 0;
f0125a57:	c6 05 cf 0c 19 f0 00 	movb   $0x0,0xf0190ccf
		initFreeFrames = sys_calculate_free_frames() ;
f0125a5e:	e8 5b 69 fe ff       	call   f010c3be <sys_calculate_free_frames>
f0125a63:	a3 f8 0f 6c f0       	mov    %eax,0xf06c0ff8
		initFreeDiskFrames = pf_calculate_free_frames() ;
f0125a68:	e8 1f e2 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f0125a6d:	a3 f4 0f 6c f0       	mov    %eax,0xf06c0ff4
		//Run simple user program
		{
			char command[100] = "run fos_add 4096";
f0125a72:	8d 85 54 ff ff ff    	lea    -0xac(%ebp),%eax
f0125a78:	bb 19 b5 13 f0       	mov    $0xf013b519,%ebx
f0125a7d:	ba 11 00 00 00       	mov    $0x11,%edx
f0125a82:	89 c7                	mov    %eax,%edi
f0125a84:	89 de                	mov    %ebx,%esi
f0125a86:	89 d1                	mov    %edx,%ecx
f0125a88:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0125a8a:	8d 95 65 ff ff ff    	lea    -0x9b(%ebp),%edx
f0125a90:	b9 53 00 00 00       	mov    $0x53,%ecx
f0125a95:	b0 00                	mov    $0x0,%al
f0125a97:	89 d7                	mov    %edx,%edi
f0125a99:	f3 aa                	rep stos %al,%es:(%edi)
			execute_command(command) ;
f0125a9b:	83 ec 0c             	sub    $0xc,%esp
f0125a9e:	8d 85 54 ff ff ff    	lea    -0xac(%ebp),%eax
f0125aa4:	50                   	push   %eax
f0125aa5:	e8 e5 b1 fd ff       	call   f0100c8f <execute_command>
f0125aaa:	83 c4 10             	add    $0x10,%esp
		}
	}
	//Ensure that the user directory, page WS and page tables are allocated in KERNEL HEAP
	{
		struct Env * e = NULL;
f0125aad:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
		struct Env * ptr_env = NULL;
f0125ab4:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		LIST_FOREACH(ptr_env, &env_exit_queue)
f0125abb:	a1 44 ea 6b f0       	mov    0xf06bea44,%eax
f0125ac0:	89 45 e0             	mov    %eax,-0x20(%ebp)
f0125ac3:	eb 2d                	jmp    f0125af2 <test_three_creation_functions+0xb0>
		{
			if (strcmp(ptr_env->prog_name, "fos_add") == 0)
f0125ac5:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0125ac8:	05 18 da 01 00       	add    $0x1da18,%eax
f0125acd:	83 ec 08             	sub    $0x8,%esp
f0125ad0:	68 03 b4 13 f0       	push   $0xf013b403
f0125ad5:	50                   	push   %eax
f0125ad6:	e8 5c ad 00 00       	call   f0130837 <strcmp>
f0125adb:	83 c4 10             	add    $0x10,%esp
f0125ade:	85 c0                	test   %eax,%eax
f0125ae0:	75 08                	jne    f0125aea <test_three_creation_functions+0xa8>
			{
				e = ptr_env ;
f0125ae2:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0125ae5:	89 45 e4             	mov    %eax,-0x1c(%ebp)
				break;
f0125ae8:	eb 2f                	jmp    f0125b19 <test_three_creation_functions+0xd7>
	}
	//Ensure that the user directory, page WS and page tables are allocated in KERNEL HEAP
	{
		struct Env * e = NULL;
		struct Env * ptr_env = NULL;
		LIST_FOREACH(ptr_env, &env_exit_queue)
f0125aea:	a1 4c ea 6b f0       	mov    0xf06bea4c,%eax
f0125aef:	89 45 e0             	mov    %eax,-0x20(%ebp)
f0125af2:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0125af6:	74 08                	je     f0125b00 <test_three_creation_functions+0xbe>
f0125af8:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0125afb:	8b 40 44             	mov    0x44(%eax),%eax
f0125afe:	eb 05                	jmp    f0125b05 <test_three_creation_functions+0xc3>
f0125b00:	b8 00 00 00 00       	mov    $0x0,%eax
f0125b05:	a3 4c ea 6b f0       	mov    %eax,0xf06bea4c
f0125b0a:	a1 4c ea 6b f0       	mov    0xf06bea4c,%eax
f0125b0f:	85 c0                	test   %eax,%eax
f0125b11:	75 b2                	jne    f0125ac5 <test_three_creation_functions+0x83>
f0125b13:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0125b17:	75 ac                	jne    f0125ac5 <test_three_creation_functions+0x83>
			{
				e = ptr_env ;
				break;
			}
		}
		if (e->pageFaultsCounter != 0)
f0125b19:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0125b1c:	8b 80 f0 d9 01 00    	mov    0x1d9f0(%eax),%eax
f0125b22:	85 c0                	test   %eax,%eax
f0125b24:	74 17                	je     f0125b3d <test_three_creation_functions+0xfb>
			panic("Page fault is occur while not expected to. Review the three creation functions");
f0125b26:	83 ec 04             	sub    $0x4,%esp
f0125b29:	68 0c b4 13 f0       	push   $0xf013b40c
f0125b2e:	68 c6 09 00 00       	push   $0x9c6
f0125b33:	68 76 a8 13 f0       	push   $0xf013a876
f0125b38:	e8 69 a6 fd ff       	call   f01001a6 <_panic>

		int pagesInWS = env_page_ws_get_size(e);
f0125b3d:	83 ec 0c             	sub    $0xc,%esp
f0125b40:	ff 75 e4             	pushl  -0x1c(%ebp)
f0125b43:	e8 15 1e fe ff       	call   f010795d <env_page_ws_get_size>
f0125b48:	83 c4 10             	add    $0x10,%esp
f0125b4b:	89 45 dc             	mov    %eax,-0x24(%ebp)
		int curFreeFrames = sys_calculate_free_frames() ;
f0125b4e:	e8 6b 68 fe ff       	call   f010c3be <sys_calculate_free_frames>
f0125b53:	89 45 d8             	mov    %eax,-0x28(%ebp)
		int curFreeDiskFrames = pf_calculate_free_frames() ;
f0125b56:	e8 31 e1 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f0125b5b:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		//cprintf("\ndiff in page file = %d, pages in WS = %d\n", initFreeDiskFrames - curFreeDiskFrames, pagesInWS);
		if ((initFreeDiskFrames - curFreeDiskFrames) != pagesInWS) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0125b5e:	a1 f4 0f 6c f0       	mov    0xf06c0ff4,%eax
f0125b63:	2b 45 d4             	sub    -0x2c(%ebp),%eax
f0125b66:	3b 45 dc             	cmp    -0x24(%ebp),%eax
f0125b69:	74 17                	je     f0125b82 <test_three_creation_functions+0x140>
f0125b6b:	83 ec 04             	sub    $0x4,%esp
f0125b6e:	68 90 a8 13 f0       	push   $0xf013a890
f0125b73:	68 cc 09 00 00       	push   $0x9cc
f0125b78:	68 76 a8 13 f0       	push   $0xf013a876
f0125b7d:	e8 24 a6 fd ff       	call   f01001a6 <_panic>
		//cprintf("\ndiff in mem frames = %d, pages in WS = %d\n", initFreeFrames - curFreeFrames, pagesInWS);
		if ((initFreeFrames - curFreeFrames) != 12/*WS*/ + 2*1/*DIR*/ + 2*3/*Tables*/ + 1 /*user WS table*/ + pagesInWS) panic("Wrong allocation: pages are not loaded successfully into memory");
f0125b82:	a1 f8 0f 6c f0       	mov    0xf06c0ff8,%eax
f0125b87:	2b 45 d8             	sub    -0x28(%ebp),%eax
f0125b8a:	8b 55 dc             	mov    -0x24(%ebp),%edx
f0125b8d:	83 c2 15             	add    $0x15,%edx
f0125b90:	39 d0                	cmp    %edx,%eax
f0125b92:	74 17                	je     f0125bab <test_three_creation_functions+0x169>
f0125b94:	83 ec 04             	sub    $0x4,%esp
f0125b97:	68 f8 a8 13 f0       	push   $0xf013a8f8
f0125b9c:	68 ce 09 00 00       	push   $0x9ce
f0125ba1:	68 76 a8 13 f0       	push   $0xf013a876
f0125ba6:	e8 fb a5 fd ff       	call   f01001a6 <_panic>

		//allocate 4 KB
		char *ptr = kmalloc(4*kilo);
f0125bab:	83 ec 0c             	sub    $0xc,%esp
f0125bae:	68 00 10 00 00       	push   $0x1000
f0125bb3:	e8 0c 1a fe ff       	call   f01075c4 <kmalloc>
f0125bb8:	83 c4 10             	add    $0x10,%esp
f0125bbb:	89 45 d0             	mov    %eax,-0x30(%ebp)
		if ((uint32) ptr !=  (ACTUAL_START + (12+2*1+2*3+1)*PAGE_SIZE)) panic("Wrong start address for the allocated space... make sure you create the dir, table and page WS in KERNEL HEAP");
f0125bbe:	c7 45 cc 00 10 00 00 	movl   $0x1000,-0x34(%ebp)
f0125bc5:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0125bc8:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0125bcd:	89 45 c8             	mov    %eax,-0x38(%ebp)
f0125bd0:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0125bd3:	ba 00 00 00 00       	mov    $0x0,%edx
f0125bd8:	f7 75 cc             	divl   -0x34(%ebp)
f0125bdb:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0125bde:	29 d0                	sub    %edx,%eax
f0125be0:	89 c1                	mov    %eax,%ecx
f0125be2:	c7 45 c4 00 10 00 00 	movl   $0x1000,-0x3c(%ebp)
f0125be9:	a0 bc 0e 6c f0       	mov    0xf06c0ebc,%al
f0125bee:	0f b6 d0             	movzbl %al,%edx
f0125bf1:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0125bf4:	01 d0                	add    %edx,%eax
f0125bf6:	48                   	dec    %eax
f0125bf7:	89 45 c0             	mov    %eax,-0x40(%ebp)
f0125bfa:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0125bfd:	ba 00 00 00 00       	mov    $0x0,%edx
f0125c02:	f7 75 c4             	divl   -0x3c(%ebp)
f0125c05:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0125c08:	29 d0                	sub    %edx,%eax
f0125c0a:	01 c1                	add    %eax,%ecx
f0125c0c:	c7 45 bc 00 10 00 00 	movl   $0x1000,-0x44(%ebp)
f0125c13:	a0 bc 0e 6c f0       	mov    0xf06c0ebc,%al
f0125c18:	0f b6 c0             	movzbl %al,%eax
f0125c1b:	c1 e0 04             	shl    $0x4,%eax
f0125c1e:	89 c2                	mov    %eax,%edx
f0125c20:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0125c23:	01 d0                	add    %edx,%eax
f0125c25:	48                   	dec    %eax
f0125c26:	89 45 b8             	mov    %eax,-0x48(%ebp)
f0125c29:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0125c2c:	ba 00 00 00 00       	mov    $0x0,%edx
f0125c31:	f7 75 bc             	divl   -0x44(%ebp)
f0125c34:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0125c37:	29 d0                	sub    %edx,%eax
f0125c39:	01 c8                	add    %ecx,%eax
f0125c3b:	8d 90 00 90 01 f6    	lea    -0x9fe7000(%eax),%edx
f0125c41:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0125c44:	39 c2                	cmp    %eax,%edx
f0125c46:	74 17                	je     f0125c5f <test_three_creation_functions+0x21d>
f0125c48:	83 ec 04             	sub    $0x4,%esp
f0125c4b:	68 5c b4 13 f0       	push   $0xf013b45c
f0125c50:	68 d2 09 00 00       	push   $0x9d2
f0125c55:	68 76 a8 13 f0       	push   $0xf013a876
f0125c5a:	e8 47 a5 fd ff       	call   f01001a6 <_panic>
	}

	cprintf("\nCongratulations!! test the 3 creation functions is completed successfully.\n");
f0125c5f:	83 ec 0c             	sub    $0xc,%esp
f0125c62:	68 cc b4 13 f0       	push   $0xf013b4cc
f0125c67:	e8 c1 af fd ff       	call   f0100c2d <cprintf>
f0125c6c:	83 c4 10             	add    $0x10,%esp

	return 1;
f0125c6f:	b8 01 00 00 00       	mov    $0x1,%eax
}
f0125c74:	8d 65 f4             	lea    -0xc(%ebp),%esp
f0125c77:	5b                   	pop    %ebx
f0125c78:	5e                   	pop    %esi
f0125c79:	5f                   	pop    %edi
f0125c7a:	5d                   	pop    %ebp
f0125c7b:	c3                   	ret    

f0125c7c <test_kfreeall>:


extern void kfreeall() ;

int test_kfreeall()
{
f0125c7c:	55                   	push   %ebp
f0125c7d:	89 e5                	mov    %esp,%ebp
f0125c7f:	57                   	push   %edi
f0125c80:	53                   	push   %ebx
f0125c81:	81 ec 40 02 00 00    	sub    $0x240,%esp
	char minByte = 1<<7;
f0125c87:	c6 45 e7 80          	movb   $0x80,-0x19(%ebp)
	char maxByte = 0x7F;
f0125c8b:	c6 45 e6 7f          	movb   $0x7f,-0x1a(%ebp)
	short minShort = 1<<15 ;
f0125c8f:	66 c7 45 e4 00 80    	movw   $0x8000,-0x1c(%ebp)
	short maxShort = 0x7FFF;
f0125c95:	66 c7 45 e2 ff 7f    	movw   $0x7fff,-0x1e(%ebp)
	int minInt = 1<<31 ;
f0125c9b:	c7 45 dc 00 00 00 80 	movl   $0x80000000,-0x24(%ebp)
	int maxInt = 0x7FFFFFFF;
f0125ca2:	c7 45 d8 ff ff ff 7f 	movl   $0x7fffffff,-0x28(%ebp)
	char *byteArr, *byteArr2 ;
	short *shortArr, *shortArr2 ;
	int *intArr;
	struct MyStruct *structArr ;
	int lastIndexOfByte, lastIndexOfByte2, lastIndexOfShort, lastIndexOfShort2, lastIndexOfInt, lastIndexOfStruct;
	int start_freeFrames = sys_calculate_free_frames() ;
f0125ca9:	e8 10 67 fe ff       	call   f010c3be <sys_calculate_free_frames>
f0125cae:	89 45 d4             	mov    %eax,-0x2c(%ebp)

	//malloc some spaces
	int i, freeFrames, freeDiskFrames ;
	char* ptr;
	int lastIndices[20] = {0};
f0125cb1:	8d 95 68 fe ff ff    	lea    -0x198(%ebp),%edx
f0125cb7:	b9 14 00 00 00       	mov    $0x14,%ecx
f0125cbc:	b8 00 00 00 00       	mov    $0x0,%eax
f0125cc1:	89 d7                	mov    %edx,%edi
f0125cc3:	f3 ab                	rep stos %eax,%es:(%edi)
	int sums[20] = {0};
f0125cc5:	8d 95 18 fe ff ff    	lea    -0x1e8(%ebp),%edx
f0125ccb:	b9 14 00 00 00       	mov    $0x14,%ecx
f0125cd0:	b8 00 00 00 00       	mov    $0x0,%eax
f0125cd5:	89 d7                	mov    %edx,%edi
f0125cd7:	f3 ab                	rep stos %eax,%es:(%edi)
	void* ptr_allocations[20] = {0};
f0125cd9:	8d 95 c8 fd ff ff    	lea    -0x238(%ebp),%edx
f0125cdf:	b9 14 00 00 00       	mov    $0x14,%ecx
f0125ce4:	b8 00 00 00 00       	mov    $0x0,%eax
f0125ce9:	89 d7                	mov    %edx,%edi
f0125ceb:	f3 ab                	rep stos %eax,%es:(%edi)
	{
		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f0125ced:	e8 cc 66 fe ff       	call   f010c3be <sys_calculate_free_frames>
f0125cf2:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0125cf5:	e8 92 df fd ff       	call   f0103c8c <pf_calculate_free_frames>
f0125cfa:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[0] = kmalloc(2*Mega-kilo);
f0125cfd:	83 ec 0c             	sub    $0xc,%esp
f0125d00:	68 00 fc 1f 00       	push   $0x1ffc00
f0125d05:	e8 ba 18 fe ff       	call   f01075c4 <kmalloc>
f0125d0a:	83 c4 10             	add    $0x10,%esp
f0125d0d:	89 85 c8 fd ff ff    	mov    %eax,-0x238(%ebp)
		if ((uint32) ptr_allocations[0] !=  (ACTUAL_START)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0125d13:	8b 85 c8 fd ff ff    	mov    -0x238(%ebp),%eax
f0125d19:	89 c1                	mov    %eax,%ecx
f0125d1b:	c7 45 c8 00 10 00 00 	movl   $0x1000,-0x38(%ebp)
f0125d22:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0125d25:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0125d2a:	89 45 c4             	mov    %eax,-0x3c(%ebp)
f0125d2d:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0125d30:	ba 00 00 00 00       	mov    $0x0,%edx
f0125d35:	f7 75 c8             	divl   -0x38(%ebp)
f0125d38:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0125d3b:	29 d0                	sub    %edx,%eax
f0125d3d:	89 c3                	mov    %eax,%ebx
f0125d3f:	c7 45 c0 00 10 00 00 	movl   $0x1000,-0x40(%ebp)
f0125d46:	a0 bc 0e 6c f0       	mov    0xf06c0ebc,%al
f0125d4b:	0f b6 d0             	movzbl %al,%edx
f0125d4e:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0125d51:	01 d0                	add    %edx,%eax
f0125d53:	48                   	dec    %eax
f0125d54:	89 45 bc             	mov    %eax,-0x44(%ebp)
f0125d57:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0125d5a:	ba 00 00 00 00       	mov    $0x0,%edx
f0125d5f:	f7 75 c0             	divl   -0x40(%ebp)
f0125d62:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0125d65:	29 d0                	sub    %edx,%eax
f0125d67:	01 c3                	add    %eax,%ebx
f0125d69:	c7 45 b8 00 10 00 00 	movl   $0x1000,-0x48(%ebp)
f0125d70:	a0 bc 0e 6c f0       	mov    0xf06c0ebc,%al
f0125d75:	0f b6 c0             	movzbl %al,%eax
f0125d78:	c1 e0 04             	shl    $0x4,%eax
f0125d7b:	89 c2                	mov    %eax,%edx
f0125d7d:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0125d80:	01 d0                	add    %edx,%eax
f0125d82:	48                   	dec    %eax
f0125d83:	89 45 b4             	mov    %eax,-0x4c(%ebp)
f0125d86:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0125d89:	ba 00 00 00 00       	mov    $0x0,%edx
f0125d8e:	f7 75 b8             	divl   -0x48(%ebp)
f0125d91:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0125d94:	29 d0                	sub    %edx,%eax
f0125d96:	01 d8                	add    %ebx,%eax
f0125d98:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f0125d9d:	39 c1                	cmp    %eax,%ecx
f0125d9f:	74 17                	je     f0125db8 <test_kfreeall+0x13c>
f0125da1:	83 ec 04             	sub    $0x4,%esp
f0125da4:	68 5c a9 13 f0       	push   $0xf013a95c
f0125da9:	68 f9 09 00 00       	push   $0x9f9
f0125dae:	68 76 a8 13 f0       	push   $0xf013a876
f0125db3:	e8 ee a3 fd ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0125db8:	e8 cf de fd ff       	call   f0103c8c <pf_calculate_free_frames>
f0125dbd:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0125dc0:	74 17                	je     f0125dd9 <test_kfreeall+0x15d>
f0125dc2:	83 ec 04             	sub    $0x4,%esp
f0125dc5:	68 90 a8 13 f0       	push   $0xf013a890
f0125dca:	68 fa 09 00 00       	push   $0x9fa
f0125dcf:	68 76 a8 13 f0       	push   $0xf013a876
f0125dd4:	e8 cd a3 fd ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f0125dd9:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0125ddc:	e8 dd 65 fe ff       	call   f010c3be <sys_calculate_free_frames>
f0125de1:	29 c3                	sub    %eax,%ebx
f0125de3:	89 d8                	mov    %ebx,%eax
f0125de5:	3d 00 02 00 00       	cmp    $0x200,%eax
f0125dea:	74 17                	je     f0125e03 <test_kfreeall+0x187>
f0125dec:	83 ec 04             	sub    $0x4,%esp
f0125def:	68 f8 a8 13 f0       	push   $0xf013a8f8
f0125df4:	68 fb 09 00 00       	push   $0x9fb
f0125df9:	68 76 a8 13 f0       	push   $0xf013a876
f0125dfe:	e8 a3 a3 fd ff       	call   f01001a6 <_panic>
		lastIndices[0] = (2*Mega-kilo)/sizeof(char) - 1;
f0125e03:	c7 85 68 fe ff ff ff 	movl   $0x1ffbff,-0x198(%ebp)
f0125e0a:	fb 1f 00 

		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f0125e0d:	e8 ac 65 fe ff       	call   f010c3be <sys_calculate_free_frames>
f0125e12:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0125e15:	e8 72 de fd ff       	call   f0103c8c <pf_calculate_free_frames>
f0125e1a:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[1] = kmalloc(2*Mega-kilo);
f0125e1d:	83 ec 0c             	sub    $0xc,%esp
f0125e20:	68 00 fc 1f 00       	push   $0x1ffc00
f0125e25:	e8 9a 17 fe ff       	call   f01075c4 <kmalloc>
f0125e2a:	83 c4 10             	add    $0x10,%esp
f0125e2d:	89 85 cc fd ff ff    	mov    %eax,-0x234(%ebp)
		if ((uint32) ptr_allocations[1] != (ACTUAL_START + 2*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0125e33:	8b 85 cc fd ff ff    	mov    -0x234(%ebp),%eax
f0125e39:	89 c1                	mov    %eax,%ecx
f0125e3b:	c7 45 b0 00 10 00 00 	movl   $0x1000,-0x50(%ebp)
f0125e42:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0125e45:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0125e4a:	89 45 ac             	mov    %eax,-0x54(%ebp)
f0125e4d:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0125e50:	ba 00 00 00 00       	mov    $0x0,%edx
f0125e55:	f7 75 b0             	divl   -0x50(%ebp)
f0125e58:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0125e5b:	29 d0                	sub    %edx,%eax
f0125e5d:	89 c3                	mov    %eax,%ebx
f0125e5f:	c7 45 a8 00 10 00 00 	movl   $0x1000,-0x58(%ebp)
f0125e66:	a0 bc 0e 6c f0       	mov    0xf06c0ebc,%al
f0125e6b:	0f b6 d0             	movzbl %al,%edx
f0125e6e:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0125e71:	01 d0                	add    %edx,%eax
f0125e73:	48                   	dec    %eax
f0125e74:	89 45 a4             	mov    %eax,-0x5c(%ebp)
f0125e77:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0125e7a:	ba 00 00 00 00       	mov    $0x0,%edx
f0125e7f:	f7 75 a8             	divl   -0x58(%ebp)
f0125e82:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0125e85:	29 d0                	sub    %edx,%eax
f0125e87:	01 c3                	add    %eax,%ebx
f0125e89:	c7 45 a0 00 10 00 00 	movl   $0x1000,-0x60(%ebp)
f0125e90:	a0 bc 0e 6c f0       	mov    0xf06c0ebc,%al
f0125e95:	0f b6 c0             	movzbl %al,%eax
f0125e98:	c1 e0 04             	shl    $0x4,%eax
f0125e9b:	89 c2                	mov    %eax,%edx
f0125e9d:	8b 45 a0             	mov    -0x60(%ebp),%eax
f0125ea0:	01 d0                	add    %edx,%eax
f0125ea2:	48                   	dec    %eax
f0125ea3:	89 45 9c             	mov    %eax,-0x64(%ebp)
f0125ea6:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0125ea9:	ba 00 00 00 00       	mov    $0x0,%edx
f0125eae:	f7 75 a0             	divl   -0x60(%ebp)
f0125eb1:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0125eb4:	29 d0                	sub    %edx,%eax
f0125eb6:	01 d8                	add    %ebx,%eax
f0125eb8:	2d 00 c0 df 09       	sub    $0x9dfc000,%eax
f0125ebd:	39 c1                	cmp    %eax,%ecx
f0125ebf:	74 17                	je     f0125ed8 <test_kfreeall+0x25c>
f0125ec1:	83 ec 04             	sub    $0x4,%esp
f0125ec4:	68 5c a9 13 f0       	push   $0xf013a95c
f0125ec9:	68 02 0a 00 00       	push   $0xa02
f0125ece:	68 76 a8 13 f0       	push   $0xf013a876
f0125ed3:	e8 ce a2 fd ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0125ed8:	e8 af dd fd ff       	call   f0103c8c <pf_calculate_free_frames>
f0125edd:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0125ee0:	74 17                	je     f0125ef9 <test_kfreeall+0x27d>
f0125ee2:	83 ec 04             	sub    $0x4,%esp
f0125ee5:	68 90 a8 13 f0       	push   $0xf013a890
f0125eea:	68 03 0a 00 00       	push   $0xa03
f0125eef:	68 76 a8 13 f0       	push   $0xf013a876
f0125ef4:	e8 ad a2 fd ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f0125ef9:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0125efc:	e8 bd 64 fe ff       	call   f010c3be <sys_calculate_free_frames>
f0125f01:	29 c3                	sub    %eax,%ebx
f0125f03:	89 d8                	mov    %ebx,%eax
f0125f05:	3d 00 02 00 00       	cmp    $0x200,%eax
f0125f0a:	74 17                	je     f0125f23 <test_kfreeall+0x2a7>
f0125f0c:	83 ec 04             	sub    $0x4,%esp
f0125f0f:	68 f8 a8 13 f0       	push   $0xf013a8f8
f0125f14:	68 04 0a 00 00       	push   $0xa04
f0125f19:	68 76 a8 13 f0       	push   $0xf013a876
f0125f1e:	e8 83 a2 fd ff       	call   f01001a6 <_panic>
		lastIndices[1] = (2*Mega-kilo)/sizeof(char) - 1;
f0125f23:	c7 85 6c fe ff ff ff 	movl   $0x1ffbff,-0x194(%ebp)
f0125f2a:	fb 1f 00 

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f0125f2d:	e8 8c 64 fe ff       	call   f010c3be <sys_calculate_free_frames>
f0125f32:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0125f35:	e8 52 dd fd ff       	call   f0103c8c <pf_calculate_free_frames>
f0125f3a:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[2] = kmalloc(2*kilo);
f0125f3d:	83 ec 0c             	sub    $0xc,%esp
f0125f40:	68 00 08 00 00       	push   $0x800
f0125f45:	e8 7a 16 fe ff       	call   f01075c4 <kmalloc>
f0125f4a:	83 c4 10             	add    $0x10,%esp
f0125f4d:	89 85 d0 fd ff ff    	mov    %eax,-0x230(%ebp)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0125f53:	8b 85 d0 fd ff ff    	mov    -0x230(%ebp),%eax
f0125f59:	89 c1                	mov    %eax,%ecx
f0125f5b:	c7 45 98 00 10 00 00 	movl   $0x1000,-0x68(%ebp)
f0125f62:	8b 45 98             	mov    -0x68(%ebp),%eax
f0125f65:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0125f6a:	89 45 94             	mov    %eax,-0x6c(%ebp)
f0125f6d:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0125f70:	ba 00 00 00 00       	mov    $0x0,%edx
f0125f75:	f7 75 98             	divl   -0x68(%ebp)
f0125f78:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0125f7b:	29 d0                	sub    %edx,%eax
f0125f7d:	89 c3                	mov    %eax,%ebx
f0125f7f:	c7 45 90 00 10 00 00 	movl   $0x1000,-0x70(%ebp)
f0125f86:	a0 bc 0e 6c f0       	mov    0xf06c0ebc,%al
f0125f8b:	0f b6 d0             	movzbl %al,%edx
f0125f8e:	8b 45 90             	mov    -0x70(%ebp),%eax
f0125f91:	01 d0                	add    %edx,%eax
f0125f93:	48                   	dec    %eax
f0125f94:	89 45 8c             	mov    %eax,-0x74(%ebp)
f0125f97:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0125f9a:	ba 00 00 00 00       	mov    $0x0,%edx
f0125f9f:	f7 75 90             	divl   -0x70(%ebp)
f0125fa2:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0125fa5:	29 d0                	sub    %edx,%eax
f0125fa7:	01 c3                	add    %eax,%ebx
f0125fa9:	c7 45 88 00 10 00 00 	movl   $0x1000,-0x78(%ebp)
f0125fb0:	a0 bc 0e 6c f0       	mov    0xf06c0ebc,%al
f0125fb5:	0f b6 c0             	movzbl %al,%eax
f0125fb8:	c1 e0 04             	shl    $0x4,%eax
f0125fbb:	89 c2                	mov    %eax,%edx
f0125fbd:	8b 45 88             	mov    -0x78(%ebp),%eax
f0125fc0:	01 d0                	add    %edx,%eax
f0125fc2:	48                   	dec    %eax
f0125fc3:	89 45 84             	mov    %eax,-0x7c(%ebp)
f0125fc6:	8b 45 84             	mov    -0x7c(%ebp),%eax
f0125fc9:	ba 00 00 00 00       	mov    $0x0,%edx
f0125fce:	f7 75 88             	divl   -0x78(%ebp)
f0125fd1:	8b 45 84             	mov    -0x7c(%ebp),%eax
f0125fd4:	29 d0                	sub    %edx,%eax
f0125fd6:	01 d8                	add    %ebx,%eax
f0125fd8:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
f0125fdd:	39 c1                	cmp    %eax,%ecx
f0125fdf:	74 17                	je     f0125ff8 <test_kfreeall+0x37c>
f0125fe1:	83 ec 04             	sub    $0x4,%esp
f0125fe4:	68 5c a9 13 f0       	push   $0xf013a95c
f0125fe9:	68 0b 0a 00 00       	push   $0xa0b
f0125fee:	68 76 a8 13 f0       	push   $0xf013a876
f0125ff3:	e8 ae a1 fd ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0125ff8:	e8 8f dc fd ff       	call   f0103c8c <pf_calculate_free_frames>
f0125ffd:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0126000:	74 17                	je     f0126019 <test_kfreeall+0x39d>
f0126002:	83 ec 04             	sub    $0x4,%esp
f0126005:	68 90 a8 13 f0       	push   $0xf013a890
f012600a:	68 0c 0a 00 00       	push   $0xa0c
f012600f:	68 76 a8 13 f0       	push   $0xf013a876
f0126014:	e8 8d a1 fd ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f0126019:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f012601c:	e8 9d 63 fe ff       	call   f010c3be <sys_calculate_free_frames>
f0126021:	29 c3                	sub    %eax,%ebx
f0126023:	89 d8                	mov    %ebx,%eax
f0126025:	83 f8 01             	cmp    $0x1,%eax
f0126028:	74 17                	je     f0126041 <test_kfreeall+0x3c5>
f012602a:	83 ec 04             	sub    $0x4,%esp
f012602d:	68 f8 a8 13 f0       	push   $0xf013a8f8
f0126032:	68 0d 0a 00 00       	push   $0xa0d
f0126037:	68 76 a8 13 f0       	push   $0xf013a876
f012603c:	e8 65 a1 fd ff       	call   f01001a6 <_panic>
		lastIndices[2] = (2*kilo)/sizeof(char) - 1;
f0126041:	c7 85 70 fe ff ff ff 	movl   $0x7ff,-0x190(%ebp)
f0126048:	07 00 00 
		ptr = (char*)ptr_allocations[2];
f012604b:	8b 85 d0 fd ff ff    	mov    -0x230(%ebp),%eax
f0126051:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[2]; ++i)
f0126054:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012605b:	eb 0e                	jmp    f012606b <test_kfreeall+0x3ef>
		{
			ptr[i] = 2 ;
f012605d:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0126060:	8b 45 80             	mov    -0x80(%ebp),%eax
f0126063:	01 d0                	add    %edx,%eax
f0126065:	c6 00 02             	movb   $0x2,(%eax)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[2] = (2*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[2];
		for (i = 0; i < lastIndices[2]; ++i)
f0126068:	ff 45 f4             	incl   -0xc(%ebp)
f012606b:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f0126071:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0126074:	7f e7                	jg     f012605d <test_kfreeall+0x3e1>
		{
			ptr[i] = 2 ;
		}

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f0126076:	e8 43 63 fe ff       	call   f010c3be <sys_calculate_free_frames>
f012607b:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012607e:	e8 09 dc fd ff       	call   f0103c8c <pf_calculate_free_frames>
f0126083:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[3] = kmalloc(2*kilo);
f0126086:	83 ec 0c             	sub    $0xc,%esp
f0126089:	68 00 08 00 00       	push   $0x800
f012608e:	e8 31 15 fe ff       	call   f01075c4 <kmalloc>
f0126093:	83 c4 10             	add    $0x10,%esp
f0126096:	89 85 d4 fd ff ff    	mov    %eax,-0x22c(%ebp)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f012609c:	8b 85 d4 fd ff ff    	mov    -0x22c(%ebp),%eax
f01260a2:	89 c1                	mov    %eax,%ecx
f01260a4:	c7 85 7c ff ff ff 00 	movl   $0x1000,-0x84(%ebp)
f01260ab:	10 00 00 
f01260ae:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f01260b4:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01260b9:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)
f01260bf:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f01260c5:	ba 00 00 00 00       	mov    $0x0,%edx
f01260ca:	f7 b5 7c ff ff ff    	divl   -0x84(%ebp)
f01260d0:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f01260d6:	29 d0                	sub    %edx,%eax
f01260d8:	89 c3                	mov    %eax,%ebx
f01260da:	c7 85 74 ff ff ff 00 	movl   $0x1000,-0x8c(%ebp)
f01260e1:	10 00 00 
f01260e4:	a0 bc 0e 6c f0       	mov    0xf06c0ebc,%al
f01260e9:	0f b6 d0             	movzbl %al,%edx
f01260ec:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f01260f2:	01 d0                	add    %edx,%eax
f01260f4:	48                   	dec    %eax
f01260f5:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
f01260fb:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f0126101:	ba 00 00 00 00       	mov    $0x0,%edx
f0126106:	f7 b5 74 ff ff ff    	divl   -0x8c(%ebp)
f012610c:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f0126112:	29 d0                	sub    %edx,%eax
f0126114:	01 c3                	add    %eax,%ebx
f0126116:	c7 85 6c ff ff ff 00 	movl   $0x1000,-0x94(%ebp)
f012611d:	10 00 00 
f0126120:	a0 bc 0e 6c f0       	mov    0xf06c0ebc,%al
f0126125:	0f b6 c0             	movzbl %al,%eax
f0126128:	c1 e0 04             	shl    $0x4,%eax
f012612b:	89 c2                	mov    %eax,%edx
f012612d:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f0126133:	01 d0                	add    %edx,%eax
f0126135:	48                   	dec    %eax
f0126136:	89 85 68 ff ff ff    	mov    %eax,-0x98(%ebp)
f012613c:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f0126142:	ba 00 00 00 00       	mov    $0x0,%edx
f0126147:	f7 b5 6c ff ff ff    	divl   -0x94(%ebp)
f012614d:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f0126153:	29 d0                	sub    %edx,%eax
f0126155:	01 d8                	add    %ebx,%eax
f0126157:	2d 00 b0 bf 09       	sub    $0x9bfb000,%eax
f012615c:	39 c1                	cmp    %eax,%ecx
f012615e:	74 17                	je     f0126177 <test_kfreeall+0x4fb>
f0126160:	83 ec 04             	sub    $0x4,%esp
f0126163:	68 5c a9 13 f0       	push   $0xf013a95c
f0126168:	68 19 0a 00 00       	push   $0xa19
f012616d:	68 76 a8 13 f0       	push   $0xf013a876
f0126172:	e8 2f a0 fd ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0126177:	e8 10 db fd ff       	call   f0103c8c <pf_calculate_free_frames>
f012617c:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f012617f:	74 17                	je     f0126198 <test_kfreeall+0x51c>
f0126181:	83 ec 04             	sub    $0x4,%esp
f0126184:	68 90 a8 13 f0       	push   $0xf013a890
f0126189:	68 1a 0a 00 00       	push   $0xa1a
f012618e:	68 76 a8 13 f0       	push   $0xf013a876
f0126193:	e8 0e a0 fd ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f0126198:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f012619b:	e8 1e 62 fe ff       	call   f010c3be <sys_calculate_free_frames>
f01261a0:	29 c3                	sub    %eax,%ebx
f01261a2:	89 d8                	mov    %ebx,%eax
f01261a4:	83 f8 01             	cmp    $0x1,%eax
f01261a7:	74 17                	je     f01261c0 <test_kfreeall+0x544>
f01261a9:	83 ec 04             	sub    $0x4,%esp
f01261ac:	68 f8 a8 13 f0       	push   $0xf013a8f8
f01261b1:	68 1b 0a 00 00       	push   $0xa1b
f01261b6:	68 76 a8 13 f0       	push   $0xf013a876
f01261bb:	e8 e6 9f fd ff       	call   f01001a6 <_panic>
		lastIndices[3] = (2*kilo)/sizeof(char) - 1;
f01261c0:	c7 85 74 fe ff ff ff 	movl   $0x7ff,-0x18c(%ebp)
f01261c7:	07 00 00 
		ptr = (char*)ptr_allocations[3];
f01261ca:	8b 85 d4 fd ff ff    	mov    -0x22c(%ebp),%eax
f01261d0:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[3]; ++i)
f01261d3:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01261da:	eb 0e                	jmp    f01261ea <test_kfreeall+0x56e>
		{
			ptr[i] = 3 ;
f01261dc:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01261df:	8b 45 80             	mov    -0x80(%ebp),%eax
f01261e2:	01 d0                	add    %edx,%eax
f01261e4:	c6 00 03             	movb   $0x3,(%eax)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[3] = (2*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[3];
		for (i = 0; i < lastIndices[3]; ++i)
f01261e7:	ff 45 f4             	incl   -0xc(%ebp)
f01261ea:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f01261f0:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01261f3:	7f e7                	jg     f01261dc <test_kfreeall+0x560>
		{
			ptr[i] = 3 ;
		}

		//7 KB
		freeFrames = sys_calculate_free_frames() ;
f01261f5:	e8 c4 61 fe ff       	call   f010c3be <sys_calculate_free_frames>
f01261fa:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01261fd:	e8 8a da fd ff       	call   f0103c8c <pf_calculate_free_frames>
f0126202:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[4] = kmalloc(7*kilo);
f0126205:	83 ec 0c             	sub    $0xc,%esp
f0126208:	68 00 1c 00 00       	push   $0x1c00
f012620d:	e8 b2 13 fe ff       	call   f01075c4 <kmalloc>
f0126212:	83 c4 10             	add    $0x10,%esp
f0126215:	89 85 d8 fd ff ff    	mov    %eax,-0x228(%ebp)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f012621b:	8b 85 d8 fd ff ff    	mov    -0x228(%ebp),%eax
f0126221:	89 c1                	mov    %eax,%ecx
f0126223:	c7 85 64 ff ff ff 00 	movl   $0x1000,-0x9c(%ebp)
f012622a:	10 00 00 
f012622d:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f0126233:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0126238:	89 85 60 ff ff ff    	mov    %eax,-0xa0(%ebp)
f012623e:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f0126244:	ba 00 00 00 00       	mov    $0x0,%edx
f0126249:	f7 b5 64 ff ff ff    	divl   -0x9c(%ebp)
f012624f:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f0126255:	29 d0                	sub    %edx,%eax
f0126257:	89 c3                	mov    %eax,%ebx
f0126259:	c7 85 5c ff ff ff 00 	movl   $0x1000,-0xa4(%ebp)
f0126260:	10 00 00 
f0126263:	a0 bc 0e 6c f0       	mov    0xf06c0ebc,%al
f0126268:	0f b6 d0             	movzbl %al,%edx
f012626b:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f0126271:	01 d0                	add    %edx,%eax
f0126273:	48                   	dec    %eax
f0126274:	89 85 58 ff ff ff    	mov    %eax,-0xa8(%ebp)
f012627a:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f0126280:	ba 00 00 00 00       	mov    $0x0,%edx
f0126285:	f7 b5 5c ff ff ff    	divl   -0xa4(%ebp)
f012628b:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f0126291:	29 d0                	sub    %edx,%eax
f0126293:	01 c3                	add    %eax,%ebx
f0126295:	c7 85 54 ff ff ff 00 	movl   $0x1000,-0xac(%ebp)
f012629c:	10 00 00 
f012629f:	a0 bc 0e 6c f0       	mov    0xf06c0ebc,%al
f01262a4:	0f b6 c0             	movzbl %al,%eax
f01262a7:	c1 e0 04             	shl    $0x4,%eax
f01262aa:	89 c2                	mov    %eax,%edx
f01262ac:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f01262b2:	01 d0                	add    %edx,%eax
f01262b4:	48                   	dec    %eax
f01262b5:	89 85 50 ff ff ff    	mov    %eax,-0xb0(%ebp)
f01262bb:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f01262c1:	ba 00 00 00 00       	mov    $0x0,%edx
f01262c6:	f7 b5 54 ff ff ff    	divl   -0xac(%ebp)
f01262cc:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f01262d2:	29 d0                	sub    %edx,%eax
f01262d4:	01 d8                	add    %ebx,%eax
f01262d6:	2d 00 a0 bf 09       	sub    $0x9bfa000,%eax
f01262db:	39 c1                	cmp    %eax,%ecx
f01262dd:	74 17                	je     f01262f6 <test_kfreeall+0x67a>
f01262df:	83 ec 04             	sub    $0x4,%esp
f01262e2:	68 5c a9 13 f0       	push   $0xf013a95c
f01262e7:	68 27 0a 00 00       	push   $0xa27
f01262ec:	68 76 a8 13 f0       	push   $0xf013a876
f01262f1:	e8 b0 9e fd ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01262f6:	e8 91 d9 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f01262fb:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f01262fe:	74 17                	je     f0126317 <test_kfreeall+0x69b>
f0126300:	83 ec 04             	sub    $0x4,%esp
f0126303:	68 90 a8 13 f0       	push   $0xf013a890
f0126308:	68 28 0a 00 00       	push   $0xa28
f012630d:	68 76 a8 13 f0       	push   $0xf013a876
f0126312:	e8 8f 9e fd ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: pages are not loaded successfully into memory");
f0126317:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f012631a:	e8 9f 60 fe ff       	call   f010c3be <sys_calculate_free_frames>
f012631f:	29 c3                	sub    %eax,%ebx
f0126321:	89 d8                	mov    %ebx,%eax
f0126323:	83 f8 02             	cmp    $0x2,%eax
f0126326:	74 17                	je     f012633f <test_kfreeall+0x6c3>
f0126328:	83 ec 04             	sub    $0x4,%esp
f012632b:	68 f8 a8 13 f0       	push   $0xf013a8f8
f0126330:	68 29 0a 00 00       	push   $0xa29
f0126335:	68 76 a8 13 f0       	push   $0xf013a876
f012633a:	e8 67 9e fd ff       	call   f01001a6 <_panic>
		lastIndices[4] = (7*kilo)/sizeof(char) - 1;
f012633f:	c7 85 78 fe ff ff ff 	movl   $0x1bff,-0x188(%ebp)
f0126346:	1b 00 00 
		ptr = (char*)ptr_allocations[4];
f0126349:	8b 85 d8 fd ff ff    	mov    -0x228(%ebp),%eax
f012634f:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[4]; ++i)
f0126352:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0126359:	eb 0e                	jmp    f0126369 <test_kfreeall+0x6ed>
		{
			ptr[i] = 4 ;
f012635b:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012635e:	8b 45 80             	mov    -0x80(%ebp),%eax
f0126361:	01 d0                	add    %edx,%eax
f0126363:	c6 00 04             	movb   $0x4,(%eax)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[4] = (7*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[4];
		for (i = 0; i < lastIndices[4]; ++i)
f0126366:	ff 45 f4             	incl   -0xc(%ebp)
f0126369:	8b 85 78 fe ff ff    	mov    -0x188(%ebp),%eax
f012636f:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0126372:	7f e7                	jg     f012635b <test_kfreeall+0x6df>
		{
			ptr[i] = 4 ;
		}

		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f0126374:	e8 45 60 fe ff       	call   f010c3be <sys_calculate_free_frames>
f0126379:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012637c:	e8 0b d9 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f0126381:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[5] = kmalloc(3*Mega-kilo);
f0126384:	83 ec 0c             	sub    $0xc,%esp
f0126387:	68 00 fc 2f 00       	push   $0x2ffc00
f012638c:	e8 33 12 fe ff       	call   f01075c4 <kmalloc>
f0126391:	83 c4 10             	add    $0x10,%esp
f0126394:	89 85 dc fd ff ff    	mov    %eax,-0x224(%ebp)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo) ) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f012639a:	8b 85 dc fd ff ff    	mov    -0x224(%ebp),%eax
f01263a0:	89 c1                	mov    %eax,%ecx
f01263a2:	c7 85 4c ff ff ff 00 	movl   $0x1000,-0xb4(%ebp)
f01263a9:	10 00 00 
f01263ac:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f01263b2:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01263b7:	89 85 48 ff ff ff    	mov    %eax,-0xb8(%ebp)
f01263bd:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f01263c3:	ba 00 00 00 00       	mov    $0x0,%edx
f01263c8:	f7 b5 4c ff ff ff    	divl   -0xb4(%ebp)
f01263ce:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f01263d4:	29 d0                	sub    %edx,%eax
f01263d6:	89 c3                	mov    %eax,%ebx
f01263d8:	c7 85 44 ff ff ff 00 	movl   $0x1000,-0xbc(%ebp)
f01263df:	10 00 00 
f01263e2:	a0 bc 0e 6c f0       	mov    0xf06c0ebc,%al
f01263e7:	0f b6 d0             	movzbl %al,%edx
f01263ea:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f01263f0:	01 d0                	add    %edx,%eax
f01263f2:	48                   	dec    %eax
f01263f3:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%ebp)
f01263f9:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f01263ff:	ba 00 00 00 00       	mov    $0x0,%edx
f0126404:	f7 b5 44 ff ff ff    	divl   -0xbc(%ebp)
f012640a:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0126410:	29 d0                	sub    %edx,%eax
f0126412:	01 c3                	add    %eax,%ebx
f0126414:	c7 85 3c ff ff ff 00 	movl   $0x1000,-0xc4(%ebp)
f012641b:	10 00 00 
f012641e:	a0 bc 0e 6c f0       	mov    0xf06c0ebc,%al
f0126423:	0f b6 c0             	movzbl %al,%eax
f0126426:	c1 e0 04             	shl    $0x4,%eax
f0126429:	89 c2                	mov    %eax,%edx
f012642b:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f0126431:	01 d0                	add    %edx,%eax
f0126433:	48                   	dec    %eax
f0126434:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
f012643a:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f0126440:	ba 00 00 00 00       	mov    $0x0,%edx
f0126445:	f7 b5 3c ff ff ff    	divl   -0xc4(%ebp)
f012644b:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f0126451:	29 d0                	sub    %edx,%eax
f0126453:	01 d8                	add    %ebx,%eax
f0126455:	2d 00 80 bf 09       	sub    $0x9bf8000,%eax
f012645a:	39 c1                	cmp    %eax,%ecx
f012645c:	74 17                	je     f0126475 <test_kfreeall+0x7f9>
f012645e:	83 ec 04             	sub    $0x4,%esp
f0126461:	68 5c a9 13 f0       	push   $0xf013a95c
f0126466:	68 35 0a 00 00       	push   $0xa35
f012646b:	68 76 a8 13 f0       	push   $0xf013a876
f0126470:	e8 31 9d fd ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0126475:	e8 12 d8 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f012647a:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f012647d:	74 17                	je     f0126496 <test_kfreeall+0x81a>
f012647f:	83 ec 04             	sub    $0x4,%esp
f0126482:	68 90 a8 13 f0       	push   $0xf013a890
f0126487:	68 36 0a 00 00       	push   $0xa36
f012648c:	68 76 a8 13 f0       	push   $0xf013a876
f0126491:	e8 10 9d fd ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
f0126496:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0126499:	e8 20 5f fe ff       	call   f010c3be <sys_calculate_free_frames>
f012649e:	29 c3                	sub    %eax,%ebx
f01264a0:	89 d8                	mov    %ebx,%eax
f01264a2:	3d 00 03 00 00       	cmp    $0x300,%eax
f01264a7:	74 17                	je     f01264c0 <test_kfreeall+0x844>
f01264a9:	83 ec 04             	sub    $0x4,%esp
f01264ac:	68 f8 a8 13 f0       	push   $0xf013a8f8
f01264b1:	68 37 0a 00 00       	push   $0xa37
f01264b6:	68 76 a8 13 f0       	push   $0xf013a876
f01264bb:	e8 e6 9c fd ff       	call   f01001a6 <_panic>
		lastIndices[5] = (3*Mega-kilo)/sizeof(char) - 1;
f01264c0:	c7 85 7c fe ff ff ff 	movl   $0x2ffbff,-0x184(%ebp)
f01264c7:	fb 2f 00 
		ptr = (char*)ptr_allocations[5];
f01264ca:	8b 85 dc fd ff ff    	mov    -0x224(%ebp),%eax
f01264d0:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[5]; ++i)
f01264d3:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01264da:	eb 0e                	jmp    f01264ea <test_kfreeall+0x86e>
		{
			ptr[i] = 5 ;
f01264dc:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01264df:	8b 45 80             	mov    -0x80(%ebp),%eax
f01264e2:	01 d0                	add    %edx,%eax
f01264e4:	c6 00 05             	movb   $0x5,(%eax)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo) ) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[5] = (3*Mega-kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[5];
		for (i = 0; i < lastIndices[5]; ++i)
f01264e7:	ff 45 f4             	incl   -0xc(%ebp)
f01264ea:	8b 85 7c fe ff ff    	mov    -0x184(%ebp),%eax
f01264f0:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01264f3:	7f e7                	jg     f01264dc <test_kfreeall+0x860>
		{
			ptr[i] = 5 ;
		}

		//6 MB
		freeFrames = sys_calculate_free_frames() ;
f01264f5:	e8 c4 5e fe ff       	call   f010c3be <sys_calculate_free_frames>
f01264fa:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01264fd:	e8 8a d7 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f0126502:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[6] = kmalloc(6*Mega-kilo);
f0126505:	83 ec 0c             	sub    $0xc,%esp
f0126508:	68 00 fc 5f 00       	push   $0x5ffc00
f012650d:	e8 b2 10 fe ff       	call   f01075c4 <kmalloc>
f0126512:	83 c4 10             	add    $0x10,%esp
f0126515:	89 85 e0 fd ff ff    	mov    %eax,-0x220(%ebp)
		if ((uint32) ptr_allocations[6] != (ACTUAL_START + 7*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f012651b:	8b 85 e0 fd ff ff    	mov    -0x220(%ebp),%eax
f0126521:	89 c1                	mov    %eax,%ecx
f0126523:	c7 85 34 ff ff ff 00 	movl   $0x1000,-0xcc(%ebp)
f012652a:	10 00 00 
f012652d:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f0126533:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0126538:	89 85 30 ff ff ff    	mov    %eax,-0xd0(%ebp)
f012653e:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f0126544:	ba 00 00 00 00       	mov    $0x0,%edx
f0126549:	f7 b5 34 ff ff ff    	divl   -0xcc(%ebp)
f012654f:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f0126555:	29 d0                	sub    %edx,%eax
f0126557:	89 c3                	mov    %eax,%ebx
f0126559:	c7 85 2c ff ff ff 00 	movl   $0x1000,-0xd4(%ebp)
f0126560:	10 00 00 
f0126563:	a0 bc 0e 6c f0       	mov    0xf06c0ebc,%al
f0126568:	0f b6 d0             	movzbl %al,%edx
f012656b:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f0126571:	01 d0                	add    %edx,%eax
f0126573:	48                   	dec    %eax
f0126574:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%ebp)
f012657a:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f0126580:	ba 00 00 00 00       	mov    $0x0,%edx
f0126585:	f7 b5 2c ff ff ff    	divl   -0xd4(%ebp)
f012658b:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f0126591:	29 d0                	sub    %edx,%eax
f0126593:	01 c3                	add    %eax,%ebx
f0126595:	c7 85 24 ff ff ff 00 	movl   $0x1000,-0xdc(%ebp)
f012659c:	10 00 00 
f012659f:	a0 bc 0e 6c f0       	mov    0xf06c0ebc,%al
f01265a4:	0f b6 c0             	movzbl %al,%eax
f01265a7:	c1 e0 04             	shl    $0x4,%eax
f01265aa:	89 c2                	mov    %eax,%edx
f01265ac:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f01265b2:	01 d0                	add    %edx,%eax
f01265b4:	48                   	dec    %eax
f01265b5:	89 85 20 ff ff ff    	mov    %eax,-0xe0(%ebp)
f01265bb:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f01265c1:	ba 00 00 00 00       	mov    $0x0,%edx
f01265c6:	f7 b5 24 ff ff ff    	divl   -0xdc(%ebp)
f01265cc:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f01265d2:	29 d0                	sub    %edx,%eax
f01265d4:	01 d8                	add    %ebx,%eax
f01265d6:	2d 00 80 8f 09       	sub    $0x98f8000,%eax
f01265db:	39 c1                	cmp    %eax,%ecx
f01265dd:	74 17                	je     f01265f6 <test_kfreeall+0x97a>
f01265df:	83 ec 04             	sub    $0x4,%esp
f01265e2:	68 5c a9 13 f0       	push   $0xf013a95c
f01265e7:	68 43 0a 00 00       	push   $0xa43
f01265ec:	68 76 a8 13 f0       	push   $0xf013a876
f01265f1:	e8 b0 9b fd ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01265f6:	e8 91 d6 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f01265fb:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f01265fe:	74 17                	je     f0126617 <test_kfreeall+0x99b>
f0126600:	83 ec 04             	sub    $0x4,%esp
f0126603:	68 90 a8 13 f0       	push   $0xf013a890
f0126608:	68 44 0a 00 00       	push   $0xa44
f012660d:	68 76 a8 13 f0       	push   $0xf013a876
f0126612:	e8 8f 9b fd ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1536) panic("Wrong allocation: pages are not loaded successfully into memory");
f0126617:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f012661a:	e8 9f 5d fe ff       	call   f010c3be <sys_calculate_free_frames>
f012661f:	29 c3                	sub    %eax,%ebx
f0126621:	89 d8                	mov    %ebx,%eax
f0126623:	3d 00 06 00 00       	cmp    $0x600,%eax
f0126628:	74 17                	je     f0126641 <test_kfreeall+0x9c5>
f012662a:	83 ec 04             	sub    $0x4,%esp
f012662d:	68 f8 a8 13 f0       	push   $0xf013a8f8
f0126632:	68 45 0a 00 00       	push   $0xa45
f0126637:	68 76 a8 13 f0       	push   $0xf013a876
f012663c:	e8 65 9b fd ff       	call   f01001a6 <_panic>
		lastIndices[6] = (6*Mega-kilo)/sizeof(char) - 1;
f0126641:	c7 85 80 fe ff ff ff 	movl   $0x5ffbff,-0x180(%ebp)
f0126648:	fb 5f 00 

		//14 KB
		freeFrames = sys_calculate_free_frames() ;
f012664b:	e8 6e 5d fe ff       	call   f010c3be <sys_calculate_free_frames>
f0126650:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0126653:	e8 34 d6 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f0126658:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[7] = kmalloc(14*kilo);
f012665b:	83 ec 0c             	sub    $0xc,%esp
f012665e:	68 00 38 00 00       	push   $0x3800
f0126663:	e8 5c 0f fe ff       	call   f01075c4 <kmalloc>
f0126668:	83 c4 10             	add    $0x10,%esp
f012666b:	89 85 e4 fd ff ff    	mov    %eax,-0x21c(%ebp)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 13*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0126671:	8b 85 e4 fd ff ff    	mov    -0x21c(%ebp),%eax
f0126677:	89 c1                	mov    %eax,%ecx
f0126679:	c7 85 1c ff ff ff 00 	movl   $0x1000,-0xe4(%ebp)
f0126680:	10 00 00 
f0126683:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f0126689:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012668e:	89 85 18 ff ff ff    	mov    %eax,-0xe8(%ebp)
f0126694:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f012669a:	ba 00 00 00 00       	mov    $0x0,%edx
f012669f:	f7 b5 1c ff ff ff    	divl   -0xe4(%ebp)
f01266a5:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f01266ab:	29 d0                	sub    %edx,%eax
f01266ad:	89 c3                	mov    %eax,%ebx
f01266af:	c7 85 14 ff ff ff 00 	movl   $0x1000,-0xec(%ebp)
f01266b6:	10 00 00 
f01266b9:	a0 bc 0e 6c f0       	mov    0xf06c0ebc,%al
f01266be:	0f b6 d0             	movzbl %al,%edx
f01266c1:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f01266c7:	01 d0                	add    %edx,%eax
f01266c9:	48                   	dec    %eax
f01266ca:	89 85 10 ff ff ff    	mov    %eax,-0xf0(%ebp)
f01266d0:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f01266d6:	ba 00 00 00 00       	mov    $0x0,%edx
f01266db:	f7 b5 14 ff ff ff    	divl   -0xec(%ebp)
f01266e1:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f01266e7:	29 d0                	sub    %edx,%eax
f01266e9:	01 c3                	add    %eax,%ebx
f01266eb:	c7 85 0c ff ff ff 00 	movl   $0x1000,-0xf4(%ebp)
f01266f2:	10 00 00 
f01266f5:	a0 bc 0e 6c f0       	mov    0xf06c0ebc,%al
f01266fa:	0f b6 c0             	movzbl %al,%eax
f01266fd:	c1 e0 04             	shl    $0x4,%eax
f0126700:	89 c2                	mov    %eax,%edx
f0126702:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f0126708:	01 d0                	add    %edx,%eax
f012670a:	48                   	dec    %eax
f012670b:	89 85 08 ff ff ff    	mov    %eax,-0xf8(%ebp)
f0126711:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f0126717:	ba 00 00 00 00       	mov    $0x0,%edx
f012671c:	f7 b5 0c ff ff ff    	divl   -0xf4(%ebp)
f0126722:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f0126728:	29 d0                	sub    %edx,%eax
f012672a:	01 d8                	add    %ebx,%eax
f012672c:	2d 00 80 2f 09       	sub    $0x92f8000,%eax
f0126731:	39 c1                	cmp    %eax,%ecx
f0126733:	74 17                	je     f012674c <test_kfreeall+0xad0>
f0126735:	83 ec 04             	sub    $0x4,%esp
f0126738:	68 5c a9 13 f0       	push   $0xf013a95c
f012673d:	68 4c 0a 00 00       	push   $0xa4c
f0126742:	68 76 a8 13 f0       	push   $0xf013a876
f0126747:	e8 5a 9a fd ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012674c:	e8 3b d5 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f0126751:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0126754:	74 17                	je     f012676d <test_kfreeall+0xaf1>
f0126756:	83 ec 04             	sub    $0x4,%esp
f0126759:	68 90 a8 13 f0       	push   $0xf013a890
f012675e:	68 4d 0a 00 00       	push   $0xa4d
f0126763:	68 76 a8 13 f0       	push   $0xf013a876
f0126768:	e8 39 9a fd ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 4) panic("Wrong allocation: pages are not loaded successfully into memory");
f012676d:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0126770:	e8 49 5c fe ff       	call   f010c3be <sys_calculate_free_frames>
f0126775:	29 c3                	sub    %eax,%ebx
f0126777:	89 d8                	mov    %ebx,%eax
f0126779:	83 f8 04             	cmp    $0x4,%eax
f012677c:	74 17                	je     f0126795 <test_kfreeall+0xb19>
f012677e:	83 ec 04             	sub    $0x4,%esp
f0126781:	68 f8 a8 13 f0       	push   $0xf013a8f8
f0126786:	68 4e 0a 00 00       	push   $0xa4e
f012678b:	68 76 a8 13 f0       	push   $0xf013a876
f0126790:	e8 11 9a fd ff       	call   f01001a6 <_panic>
		lastIndices[7] = (14*kilo)/sizeof(char) - 1;
f0126795:	c7 85 84 fe ff ff ff 	movl   $0x37ff,-0x17c(%ebp)
f012679c:	37 00 00 
		ptr = (char*)ptr_allocations[7];
f012679f:	8b 85 e4 fd ff ff    	mov    -0x21c(%ebp),%eax
f01267a5:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[7]; ++i)
f01267a8:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01267af:	eb 0e                	jmp    f01267bf <test_kfreeall+0xb43>
		{
			ptr[i] = 7 ;
f01267b1:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01267b4:	8b 45 80             	mov    -0x80(%ebp),%eax
f01267b7:	01 d0                	add    %edx,%eax
f01267b9:	c6 00 07             	movb   $0x7,(%eax)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 13*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 4) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[7] = (14*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[7];
		for (i = 0; i < lastIndices[7]; ++i)
f01267bc:	ff 45 f4             	incl   -0xc(%ebp)
f01267bf:	8b 85 84 fe ff ff    	mov    -0x17c(%ebp),%eax
f01267c5:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01267c8:	7f e7                	jg     f01267b1 <test_kfreeall+0xb35>
	}

	//kfree some of the allocated spaces
	{
		//kfree 1st 2 MB
		int freeFrames = sys_calculate_free_frames() ;
f01267ca:	e8 ef 5b fe ff       	call   f010c3be <sys_calculate_free_frames>
f01267cf:	89 85 04 ff ff ff    	mov    %eax,-0xfc(%ebp)
		int freeDiskFrames = pf_calculate_free_frames() ;
f01267d5:	e8 b2 d4 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f01267da:	89 85 00 ff ff ff    	mov    %eax,-0x100(%ebp)
		kfree(ptr_allocations[0]);
f01267e0:	8b 85 c8 fd ff ff    	mov    -0x238(%ebp),%eax
f01267e6:	83 ec 0c             	sub    $0xc,%esp
f01267e9:	50                   	push   %eax
f01267ea:	e8 ef 0d fe ff       	call   f01075de <kfree>
f01267ef:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01267f2:	e8 95 d4 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f01267f7:	3b 85 00 ff ff ff    	cmp    -0x100(%ebp),%eax
f01267fd:	74 17                	je     f0126816 <test_kfreeall+0xb9a>
f01267ff:	83 ec 04             	sub    $0x4,%esp
f0126802:	68 90 a8 13 f0       	push   $0xf013a890
f0126807:	68 5d 0a 00 00       	push   $0xa5d
f012680c:	68 76 a8 13 f0       	push   $0xf013a876
f0126811:	e8 90 99 fd ff       	call   f01001a6 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512 ) panic("Wrong kfree: pages in memory are not freed correctly");
f0126816:	e8 a3 5b fe ff       	call   f010c3be <sys_calculate_free_frames>
f012681b:	89 c2                	mov    %eax,%edx
f012681d:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f0126823:	29 c2                	sub    %eax,%edx
f0126825:	89 d0                	mov    %edx,%eax
f0126827:	3d 00 02 00 00       	cmp    $0x200,%eax
f012682c:	74 17                	je     f0126845 <test_kfreeall+0xbc9>
f012682e:	83 ec 04             	sub    $0x4,%esp
f0126831:	68 00 b0 13 f0       	push   $0xf013b000
f0126836:	68 5e 0a 00 00       	push   $0xa5e
f012683b:	68 76 a8 13 f0       	push   $0xf013a876
f0126840:	e8 61 99 fd ff       	call   f01001a6 <_panic>

		//kfree 2nd 2 MB
		freeFrames = sys_calculate_free_frames() ;
f0126845:	e8 74 5b fe ff       	call   f010c3be <sys_calculate_free_frames>
f012684a:	89 85 04 ff ff ff    	mov    %eax,-0xfc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0126850:	e8 37 d4 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f0126855:	89 85 00 ff ff ff    	mov    %eax,-0x100(%ebp)
		kfree(ptr_allocations[1]);
f012685b:	8b 85 cc fd ff ff    	mov    -0x234(%ebp),%eax
f0126861:	83 ec 0c             	sub    $0xc,%esp
f0126864:	50                   	push   %eax
f0126865:	e8 74 0d fe ff       	call   f01075de <kfree>
f012686a:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012686d:	e8 1a d4 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f0126872:	3b 85 00 ff ff ff    	cmp    -0x100(%ebp),%eax
f0126878:	74 17                	je     f0126891 <test_kfreeall+0xc15>
f012687a:	83 ec 04             	sub    $0x4,%esp
f012687d:	68 90 a8 13 f0       	push   $0xf013a890
f0126882:	68 64 0a 00 00       	push   $0xa64
f0126887:	68 76 a8 13 f0       	push   $0xf013a876
f012688c:	e8 15 99 fd ff       	call   f01001a6 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512) panic("Wrong kfree: pages in memory are not freed correctly");
f0126891:	e8 28 5b fe ff       	call   f010c3be <sys_calculate_free_frames>
f0126896:	89 c2                	mov    %eax,%edx
f0126898:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f012689e:	29 c2                	sub    %eax,%edx
f01268a0:	89 d0                	mov    %edx,%eax
f01268a2:	3d 00 02 00 00       	cmp    $0x200,%eax
f01268a7:	74 17                	je     f01268c0 <test_kfreeall+0xc44>
f01268a9:	83 ec 04             	sub    $0x4,%esp
f01268ac:	68 00 b0 13 f0       	push   $0xf013b000
f01268b1:	68 65 0a 00 00       	push   $0xa65
f01268b6:	68 76 a8 13 f0       	push   $0xf013a876
f01268bb:	e8 e6 98 fd ff       	call   f01001a6 <_panic>

		//kfree 6 MB
		freeFrames = sys_calculate_free_frames() ;
f01268c0:	e8 f9 5a fe ff       	call   f010c3be <sys_calculate_free_frames>
f01268c5:	89 85 04 ff ff ff    	mov    %eax,-0xfc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01268cb:	e8 bc d3 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f01268d0:	89 85 00 ff ff ff    	mov    %eax,-0x100(%ebp)
		kfree(ptr_allocations[6]);
f01268d6:	8b 85 e0 fd ff ff    	mov    -0x220(%ebp),%eax
f01268dc:	83 ec 0c             	sub    $0xc,%esp
f01268df:	50                   	push   %eax
f01268e0:	e8 f9 0c fe ff       	call   f01075de <kfree>
f01268e5:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01268e8:	e8 9f d3 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f01268ed:	3b 85 00 ff ff ff    	cmp    -0x100(%ebp),%eax
f01268f3:	74 17                	je     f012690c <test_kfreeall+0xc90>
f01268f5:	83 ec 04             	sub    $0x4,%esp
f01268f8:	68 90 a8 13 f0       	push   $0xf013a890
f01268fd:	68 6b 0a 00 00       	push   $0xa6b
f0126902:	68 76 a8 13 f0       	push   $0xf013a876
f0126907:	e8 9a 98 fd ff       	call   f01001a6 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 6*Mega/4096) panic("Wrong kfree: pages in memory are not freed correctly");
f012690c:	e8 ad 5a fe ff       	call   f010c3be <sys_calculate_free_frames>
f0126911:	89 c2                	mov    %eax,%edx
f0126913:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f0126919:	29 c2                	sub    %eax,%edx
f012691b:	89 d0                	mov    %edx,%eax
f012691d:	3d 00 06 00 00       	cmp    $0x600,%eax
f0126922:	74 17                	je     f012693b <test_kfreeall+0xcbf>
f0126924:	83 ec 04             	sub    $0x4,%esp
f0126927:	68 00 b0 13 f0       	push   $0xf013b000
f012692c:	68 6c 0a 00 00       	push   $0xa6c
f0126931:	68 76 a8 13 f0       	push   $0xf013a876
f0126936:	e8 6b 98 fd ff       	call   f01001a6 <_panic>


	//Check memory access after kfree
	{
		//2 KB
		ptr = (char*)ptr_allocations[2];
f012693b:	8b 85 d0 fd ff ff    	mov    -0x230(%ebp),%eax
f0126941:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[2]; ++i)
f0126944:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012694b:	eb 1e                	jmp    f012696b <test_kfreeall+0xcef>
		{
			sums[2] += ptr[i] ;
f012694d:	8b 95 20 fe ff ff    	mov    -0x1e0(%ebp),%edx
f0126953:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0126956:	8b 45 80             	mov    -0x80(%ebp),%eax
f0126959:	01 c8                	add    %ecx,%eax
f012695b:	8a 00                	mov    (%eax),%al
f012695d:	0f be c0             	movsbl %al,%eax
f0126960:	01 d0                	add    %edx,%eax
f0126962:	89 85 20 fe ff ff    	mov    %eax,-0x1e0(%ebp)

	//Check memory access after kfree
	{
		//2 KB
		ptr = (char*)ptr_allocations[2];
		for (i = 0; i < lastIndices[2]; ++i)
f0126968:	ff 45 f4             	incl   -0xc(%ebp)
f012696b:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f0126971:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0126974:	7f d7                	jg     f012694d <test_kfreeall+0xcd1>
		{
			sums[2] += ptr[i] ;
		}
		if (sums[2] != 2*lastIndices[2])	panic("kfree: invalid read after freeing some allocations");
f0126976:	8b 95 20 fe ff ff    	mov    -0x1e0(%ebp),%edx
f012697c:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f0126982:	01 c0                	add    %eax,%eax
f0126984:	39 c2                	cmp    %eax,%edx
f0126986:	74 17                	je     f012699f <test_kfreeall+0xd23>
f0126988:	83 ec 04             	sub    $0x4,%esp
f012698b:	68 5c b0 13 f0       	push   $0xf013b05c
f0126990:	68 78 0a 00 00       	push   $0xa78
f0126995:	68 76 a8 13 f0       	push   $0xf013a876
f012699a:	e8 07 98 fd ff       	call   f01001a6 <_panic>

		//2 KB
		ptr = (char*)ptr_allocations[3];
f012699f:	8b 85 d4 fd ff ff    	mov    -0x22c(%ebp),%eax
f01269a5:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[3]; ++i)
f01269a8:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01269af:	eb 1e                	jmp    f01269cf <test_kfreeall+0xd53>
		{
			sums[3] += ptr[i] ;
f01269b1:	8b 95 24 fe ff ff    	mov    -0x1dc(%ebp),%edx
f01269b7:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f01269ba:	8b 45 80             	mov    -0x80(%ebp),%eax
f01269bd:	01 c8                	add    %ecx,%eax
f01269bf:	8a 00                	mov    (%eax),%al
f01269c1:	0f be c0             	movsbl %al,%eax
f01269c4:	01 d0                	add    %edx,%eax
f01269c6:	89 85 24 fe ff ff    	mov    %eax,-0x1dc(%ebp)
		}
		if (sums[2] != 2*lastIndices[2])	panic("kfree: invalid read after freeing some allocations");

		//2 KB
		ptr = (char*)ptr_allocations[3];
		for (i = 0; i < lastIndices[3]; ++i)
f01269cc:	ff 45 f4             	incl   -0xc(%ebp)
f01269cf:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f01269d5:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01269d8:	7f d7                	jg     f01269b1 <test_kfreeall+0xd35>
		{
			sums[3] += ptr[i] ;
		}
		if (sums[3] != 3*lastIndices[3])	panic("kfree: invalid read after freeing some allocations");
f01269da:	8b 95 24 fe ff ff    	mov    -0x1dc(%ebp),%edx
f01269e0:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f01269e6:	89 c1                	mov    %eax,%ecx
f01269e8:	01 c9                	add    %ecx,%ecx
f01269ea:	01 c8                	add    %ecx,%eax
f01269ec:	39 c2                	cmp    %eax,%edx
f01269ee:	74 17                	je     f0126a07 <test_kfreeall+0xd8b>
f01269f0:	83 ec 04             	sub    $0x4,%esp
f01269f3:	68 5c b0 13 f0       	push   $0xf013b05c
f01269f8:	68 80 0a 00 00       	push   $0xa80
f01269fd:	68 76 a8 13 f0       	push   $0xf013a876
f0126a02:	e8 9f 97 fd ff       	call   f01001a6 <_panic>

		//7 KB
		ptr = (char*)ptr_allocations[4];
f0126a07:	8b 85 d8 fd ff ff    	mov    -0x228(%ebp),%eax
f0126a0d:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[4]; ++i)
f0126a10:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0126a17:	eb 1e                	jmp    f0126a37 <test_kfreeall+0xdbb>
		{
			sums[4] += ptr[i] ;
f0126a19:	8b 95 28 fe ff ff    	mov    -0x1d8(%ebp),%edx
f0126a1f:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0126a22:	8b 45 80             	mov    -0x80(%ebp),%eax
f0126a25:	01 c8                	add    %ecx,%eax
f0126a27:	8a 00                	mov    (%eax),%al
f0126a29:	0f be c0             	movsbl %al,%eax
f0126a2c:	01 d0                	add    %edx,%eax
f0126a2e:	89 85 28 fe ff ff    	mov    %eax,-0x1d8(%ebp)
		}
		if (sums[3] != 3*lastIndices[3])	panic("kfree: invalid read after freeing some allocations");

		//7 KB
		ptr = (char*)ptr_allocations[4];
		for (i = 0; i < lastIndices[4]; ++i)
f0126a34:	ff 45 f4             	incl   -0xc(%ebp)
f0126a37:	8b 85 78 fe ff ff    	mov    -0x188(%ebp),%eax
f0126a3d:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0126a40:	7f d7                	jg     f0126a19 <test_kfreeall+0xd9d>
		{
			sums[4] += ptr[i] ;
		}
		if (sums[4] != 4*lastIndices[4])	panic("kfree: invalid read after freeing some allocations");
f0126a42:	8b 85 28 fe ff ff    	mov    -0x1d8(%ebp),%eax
f0126a48:	8b 95 78 fe ff ff    	mov    -0x188(%ebp),%edx
f0126a4e:	c1 e2 02             	shl    $0x2,%edx
f0126a51:	39 d0                	cmp    %edx,%eax
f0126a53:	74 17                	je     f0126a6c <test_kfreeall+0xdf0>
f0126a55:	83 ec 04             	sub    $0x4,%esp
f0126a58:	68 5c b0 13 f0       	push   $0xf013b05c
f0126a5d:	68 88 0a 00 00       	push   $0xa88
f0126a62:	68 76 a8 13 f0       	push   $0xf013a876
f0126a67:	e8 3a 97 fd ff       	call   f01001a6 <_panic>

		//3 MB
		ptr = (char*)ptr_allocations[5];
f0126a6c:	8b 85 dc fd ff ff    	mov    -0x224(%ebp),%eax
f0126a72:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[5]; ++i)
f0126a75:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0126a7c:	eb 1e                	jmp    f0126a9c <test_kfreeall+0xe20>
		{
			sums[5] += ptr[i] ;
f0126a7e:	8b 95 2c fe ff ff    	mov    -0x1d4(%ebp),%edx
f0126a84:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0126a87:	8b 45 80             	mov    -0x80(%ebp),%eax
f0126a8a:	01 c8                	add    %ecx,%eax
f0126a8c:	8a 00                	mov    (%eax),%al
f0126a8e:	0f be c0             	movsbl %al,%eax
f0126a91:	01 d0                	add    %edx,%eax
f0126a93:	89 85 2c fe ff ff    	mov    %eax,-0x1d4(%ebp)
		}
		if (sums[4] != 4*lastIndices[4])	panic("kfree: invalid read after freeing some allocations");

		//3 MB
		ptr = (char*)ptr_allocations[5];
		for (i = 0; i < lastIndices[5]; ++i)
f0126a99:	ff 45 f4             	incl   -0xc(%ebp)
f0126a9c:	8b 85 7c fe ff ff    	mov    -0x184(%ebp),%eax
f0126aa2:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0126aa5:	7f d7                	jg     f0126a7e <test_kfreeall+0xe02>
		{
			sums[5] += ptr[i] ;
		}
		if (sums[5] != 5*lastIndices[5])	panic("kfree: invalid read after freeing some allocations");
f0126aa7:	8b 8d 2c fe ff ff    	mov    -0x1d4(%ebp),%ecx
f0126aad:	8b 95 7c fe ff ff    	mov    -0x184(%ebp),%edx
f0126ab3:	89 d0                	mov    %edx,%eax
f0126ab5:	c1 e0 02             	shl    $0x2,%eax
f0126ab8:	01 d0                	add    %edx,%eax
f0126aba:	39 c1                	cmp    %eax,%ecx
f0126abc:	74 17                	je     f0126ad5 <test_kfreeall+0xe59>
f0126abe:	83 ec 04             	sub    $0x4,%esp
f0126ac1:	68 5c b0 13 f0       	push   $0xf013b05c
f0126ac6:	68 90 0a 00 00       	push   $0xa90
f0126acb:	68 76 a8 13 f0       	push   $0xf013a876
f0126ad0:	e8 d1 96 fd ff       	call   f01001a6 <_panic>

		//14 KB
		ptr = (char*)ptr_allocations[7];
f0126ad5:	8b 85 e4 fd ff ff    	mov    -0x21c(%ebp),%eax
f0126adb:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[7]; ++i)
f0126ade:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0126ae5:	eb 1e                	jmp    f0126b05 <test_kfreeall+0xe89>
		{
			sums[7] += ptr[i] ;
f0126ae7:	8b 95 34 fe ff ff    	mov    -0x1cc(%ebp),%edx
f0126aed:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0126af0:	8b 45 80             	mov    -0x80(%ebp),%eax
f0126af3:	01 c8                	add    %ecx,%eax
f0126af5:	8a 00                	mov    (%eax),%al
f0126af7:	0f be c0             	movsbl %al,%eax
f0126afa:	01 d0                	add    %edx,%eax
f0126afc:	89 85 34 fe ff ff    	mov    %eax,-0x1cc(%ebp)
		}
		if (sums[5] != 5*lastIndices[5])	panic("kfree: invalid read after freeing some allocations");

		//14 KB
		ptr = (char*)ptr_allocations[7];
		for (i = 0; i < lastIndices[7]; ++i)
f0126b02:	ff 45 f4             	incl   -0xc(%ebp)
f0126b05:	8b 85 84 fe ff ff    	mov    -0x17c(%ebp),%eax
f0126b0b:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0126b0e:	7f d7                	jg     f0126ae7 <test_kfreeall+0xe6b>
		{
			sums[7] += ptr[i] ;
		}
		if (sums[7] != 7*lastIndices[7])	panic("kfree: invalid read after freeing some allocations");
f0126b10:	8b 8d 34 fe ff ff    	mov    -0x1cc(%ebp),%ecx
f0126b16:	8b 95 84 fe ff ff    	mov    -0x17c(%ebp),%edx
f0126b1c:	89 d0                	mov    %edx,%eax
f0126b1e:	01 c0                	add    %eax,%eax
f0126b20:	01 d0                	add    %edx,%eax
f0126b22:	01 c0                	add    %eax,%eax
f0126b24:	01 d0                	add    %edx,%eax
f0126b26:	39 c1                	cmp    %eax,%ecx
f0126b28:	74 17                	je     f0126b41 <test_kfreeall+0xec5>
f0126b2a:	83 ec 04             	sub    $0x4,%esp
f0126b2d:	68 5c b0 13 f0       	push   $0xf013b05c
f0126b32:	68 98 0a 00 00       	push   $0xa98
f0126b37:	68 76 a8 13 f0       	push   $0xf013a876
f0126b3c:	e8 65 96 fd ff       	call   f01001a6 <_panic>
	}

	//Allocate after kfree
	{
		//20 KB
		freeFrames = sys_calculate_free_frames() ;
f0126b41:	e8 78 58 fe ff       	call   f010c3be <sys_calculate_free_frames>
f0126b46:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0126b49:	e8 3e d1 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f0126b4e:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[8] = kmalloc(20*kilo);
f0126b51:	83 ec 0c             	sub    $0xc,%esp
f0126b54:	68 00 50 00 00       	push   $0x5000
f0126b59:	e8 66 0a fe ff       	call   f01075c4 <kmalloc>
f0126b5e:	83 c4 10             	add    $0x10,%esp
f0126b61:	89 85 e8 fd ff ff    	mov    %eax,-0x218(%ebp)
		if ((uint32) ptr_allocations[8] != (ACTUAL_START + 13*Mega + 32*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0126b67:	8b 85 e8 fd ff ff    	mov    -0x218(%ebp),%eax
f0126b6d:	89 c1                	mov    %eax,%ecx
f0126b6f:	c7 85 fc fe ff ff 00 	movl   $0x1000,-0x104(%ebp)
f0126b76:	10 00 00 
f0126b79:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f0126b7f:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0126b84:	89 85 f8 fe ff ff    	mov    %eax,-0x108(%ebp)
f0126b8a:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f0126b90:	ba 00 00 00 00       	mov    $0x0,%edx
f0126b95:	f7 b5 fc fe ff ff    	divl   -0x104(%ebp)
f0126b9b:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f0126ba1:	29 d0                	sub    %edx,%eax
f0126ba3:	89 c3                	mov    %eax,%ebx
f0126ba5:	c7 85 f4 fe ff ff 00 	movl   $0x1000,-0x10c(%ebp)
f0126bac:	10 00 00 
f0126baf:	a0 bc 0e 6c f0       	mov    0xf06c0ebc,%al
f0126bb4:	0f b6 d0             	movzbl %al,%edx
f0126bb7:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f0126bbd:	01 d0                	add    %edx,%eax
f0126bbf:	48                   	dec    %eax
f0126bc0:	89 85 f0 fe ff ff    	mov    %eax,-0x110(%ebp)
f0126bc6:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f0126bcc:	ba 00 00 00 00       	mov    $0x0,%edx
f0126bd1:	f7 b5 f4 fe ff ff    	divl   -0x10c(%ebp)
f0126bd7:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f0126bdd:	29 d0                	sub    %edx,%eax
f0126bdf:	01 c3                	add    %eax,%ebx
f0126be1:	c7 85 ec fe ff ff 00 	movl   $0x1000,-0x114(%ebp)
f0126be8:	10 00 00 
f0126beb:	a0 bc 0e 6c f0       	mov    0xf06c0ebc,%al
f0126bf0:	0f b6 c0             	movzbl %al,%eax
f0126bf3:	c1 e0 04             	shl    $0x4,%eax
f0126bf6:	89 c2                	mov    %eax,%edx
f0126bf8:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f0126bfe:	01 d0                	add    %edx,%eax
f0126c00:	48                   	dec    %eax
f0126c01:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)
f0126c07:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f0126c0d:	ba 00 00 00 00       	mov    $0x0,%edx
f0126c12:	f7 b5 ec fe ff ff    	divl   -0x114(%ebp)
f0126c18:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f0126c1e:	29 d0                	sub    %edx,%eax
f0126c20:	01 d8                	add    %ebx,%eax
f0126c22:	2d 00 40 2f 09       	sub    $0x92f4000,%eax
f0126c27:	39 c1                	cmp    %eax,%ecx
f0126c29:	74 17                	je     f0126c42 <test_kfreeall+0xfc6>
f0126c2b:	83 ec 04             	sub    $0x4,%esp
f0126c2e:	68 5c a9 13 f0       	push   $0xf013a95c
f0126c33:	68 a1 0a 00 00       	push   $0xaa1
f0126c38:	68 76 a8 13 f0       	push   $0xf013a876
f0126c3d:	e8 64 95 fd ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0126c42:	e8 45 d0 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f0126c47:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0126c4a:	74 17                	je     f0126c63 <test_kfreeall+0xfe7>
f0126c4c:	83 ec 04             	sub    $0x4,%esp
f0126c4f:	68 90 a8 13 f0       	push   $0xf013a890
f0126c54:	68 a2 0a 00 00       	push   $0xaa2
f0126c59:	68 76 a8 13 f0       	push   $0xf013a876
f0126c5e:	e8 43 95 fd ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 5) panic("Wrong allocation: pages are not loaded successfully into memory");
f0126c63:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0126c66:	e8 53 57 fe ff       	call   f010c3be <sys_calculate_free_frames>
f0126c6b:	29 c3                	sub    %eax,%ebx
f0126c6d:	89 d8                	mov    %ebx,%eax
f0126c6f:	83 f8 05             	cmp    $0x5,%eax
f0126c72:	74 17                	je     f0126c8b <test_kfreeall+0x100f>
f0126c74:	83 ec 04             	sub    $0x4,%esp
f0126c77:	68 f8 a8 13 f0       	push   $0xf013a8f8
f0126c7c:	68 a3 0a 00 00       	push   $0xaa3
f0126c81:	68 76 a8 13 f0       	push   $0xf013a876
f0126c86:	e8 1b 95 fd ff       	call   f01001a6 <_panic>
		lastIndices[8] = (20*kilo)/sizeof(char) - 1;
f0126c8b:	c7 85 88 fe ff ff ff 	movl   $0x4fff,-0x178(%ebp)
f0126c92:	4f 00 00 
		ptr = (char*)ptr_allocations[8];
f0126c95:	8b 85 e8 fd ff ff    	mov    -0x218(%ebp),%eax
f0126c9b:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[8]; ++i)
f0126c9e:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0126ca5:	eb 0e                	jmp    f0126cb5 <test_kfreeall+0x1039>
		{
			ptr[i] = 8 ;
f0126ca7:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0126caa:	8b 45 80             	mov    -0x80(%ebp),%eax
f0126cad:	01 d0                	add    %edx,%eax
f0126caf:	c6 00 08             	movb   $0x8,(%eax)
		if ((uint32) ptr_allocations[8] != (ACTUAL_START + 13*Mega + 32*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 5) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[8] = (20*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[8];
		for (i = 0; i < lastIndices[8]; ++i)
f0126cb2:	ff 45 f4             	incl   -0xc(%ebp)
f0126cb5:	8b 85 88 fe ff ff    	mov    -0x178(%ebp),%eax
f0126cbb:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0126cbe:	7f e7                	jg     f0126ca7 <test_kfreeall+0x102b>
		{
			ptr[i] = 8 ;
		}

		//1 MB
		freeFrames = sys_calculate_free_frames() ;
f0126cc0:	e8 f9 56 fe ff       	call   f010c3be <sys_calculate_free_frames>
f0126cc5:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0126cc8:	e8 bf cf fd ff       	call   f0103c8c <pf_calculate_free_frames>
f0126ccd:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[9] = kmalloc(1*Mega);
f0126cd0:	83 ec 0c             	sub    $0xc,%esp
f0126cd3:	68 00 00 10 00       	push   $0x100000
f0126cd8:	e8 e7 08 fe ff       	call   f01075c4 <kmalloc>
f0126cdd:	83 c4 10             	add    $0x10,%esp
f0126ce0:	89 85 ec fd ff ff    	mov    %eax,-0x214(%ebp)
		if ((uint32) ptr_allocations[9] != (ACTUAL_START + 13*Mega + 52*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0126ce6:	8b 85 ec fd ff ff    	mov    -0x214(%ebp),%eax
f0126cec:	89 c1                	mov    %eax,%ecx
f0126cee:	c7 85 e4 fe ff ff 00 	movl   $0x1000,-0x11c(%ebp)
f0126cf5:	10 00 00 
f0126cf8:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f0126cfe:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0126d03:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
f0126d09:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f0126d0f:	ba 00 00 00 00       	mov    $0x0,%edx
f0126d14:	f7 b5 e4 fe ff ff    	divl   -0x11c(%ebp)
f0126d1a:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f0126d20:	29 d0                	sub    %edx,%eax
f0126d22:	89 c3                	mov    %eax,%ebx
f0126d24:	c7 85 dc fe ff ff 00 	movl   $0x1000,-0x124(%ebp)
f0126d2b:	10 00 00 
f0126d2e:	a0 bc 0e 6c f0       	mov    0xf06c0ebc,%al
f0126d33:	0f b6 d0             	movzbl %al,%edx
f0126d36:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f0126d3c:	01 d0                	add    %edx,%eax
f0126d3e:	48                   	dec    %eax
f0126d3f:	89 85 d8 fe ff ff    	mov    %eax,-0x128(%ebp)
f0126d45:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f0126d4b:	ba 00 00 00 00       	mov    $0x0,%edx
f0126d50:	f7 b5 dc fe ff ff    	divl   -0x124(%ebp)
f0126d56:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f0126d5c:	29 d0                	sub    %edx,%eax
f0126d5e:	01 c3                	add    %eax,%ebx
f0126d60:	c7 85 d4 fe ff ff 00 	movl   $0x1000,-0x12c(%ebp)
f0126d67:	10 00 00 
f0126d6a:	a0 bc 0e 6c f0       	mov    0xf06c0ebc,%al
f0126d6f:	0f b6 c0             	movzbl %al,%eax
f0126d72:	c1 e0 04             	shl    $0x4,%eax
f0126d75:	89 c2                	mov    %eax,%edx
f0126d77:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f0126d7d:	01 d0                	add    %edx,%eax
f0126d7f:	48                   	dec    %eax
f0126d80:	89 85 d0 fe ff ff    	mov    %eax,-0x130(%ebp)
f0126d86:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f0126d8c:	ba 00 00 00 00       	mov    $0x0,%edx
f0126d91:	f7 b5 d4 fe ff ff    	divl   -0x12c(%ebp)
f0126d97:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f0126d9d:	29 d0                	sub    %edx,%eax
f0126d9f:	01 d8                	add    %ebx,%eax
f0126da1:	2d 00 f0 2e 09       	sub    $0x92ef000,%eax
f0126da6:	39 c1                	cmp    %eax,%ecx
f0126da8:	74 17                	je     f0126dc1 <test_kfreeall+0x1145>
f0126daa:	83 ec 04             	sub    $0x4,%esp
f0126dad:	68 5c a9 13 f0       	push   $0xf013a95c
f0126db2:	68 af 0a 00 00       	push   $0xaaf
f0126db7:	68 76 a8 13 f0       	push   $0xf013a876
f0126dbc:	e8 e5 93 fd ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0126dc1:	e8 c6 ce fd ff       	call   f0103c8c <pf_calculate_free_frames>
f0126dc6:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0126dc9:	74 17                	je     f0126de2 <test_kfreeall+0x1166>
f0126dcb:	83 ec 04             	sub    $0x4,%esp
f0126dce:	68 90 a8 13 f0       	push   $0xf013a890
f0126dd3:	68 b0 0a 00 00       	push   $0xab0
f0126dd8:	68 76 a8 13 f0       	push   $0xf013a876
f0126ddd:	e8 c4 93 fd ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: pages are not loaded successfully into memory");
f0126de2:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0126de5:	e8 d4 55 fe ff       	call   f010c3be <sys_calculate_free_frames>
f0126dea:	29 c3                	sub    %eax,%ebx
f0126dec:	89 d8                	mov    %ebx,%eax
f0126dee:	3d 00 01 00 00       	cmp    $0x100,%eax
f0126df3:	74 17                	je     f0126e0c <test_kfreeall+0x1190>
f0126df5:	83 ec 04             	sub    $0x4,%esp
f0126df8:	68 f8 a8 13 f0       	push   $0xf013a8f8
f0126dfd:	68 b1 0a 00 00       	push   $0xab1
f0126e02:	68 76 a8 13 f0       	push   $0xf013a876
f0126e07:	e8 9a 93 fd ff       	call   f01001a6 <_panic>
		lastIndices[9] = (1*Mega)/sizeof(char) - 1;
f0126e0c:	c7 85 8c fe ff ff ff 	movl   $0xfffff,-0x174(%ebp)
f0126e13:	ff 0f 00 
		ptr = (char*)ptr_allocations[9];
f0126e16:	8b 85 ec fd ff ff    	mov    -0x214(%ebp),%eax
f0126e1c:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[9]; ++i)
f0126e1f:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0126e26:	eb 0e                	jmp    f0126e36 <test_kfreeall+0x11ba>
		{
			ptr[i] = 9 ;
f0126e28:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0126e2b:	8b 45 80             	mov    -0x80(%ebp),%eax
f0126e2e:	01 d0                	add    %edx,%eax
f0126e30:	c6 00 09             	movb   $0x9,(%eax)
		if ((uint32) ptr_allocations[9] != (ACTUAL_START + 13*Mega + 52*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[9] = (1*Mega)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[9];
		for (i = 0; i < lastIndices[9]; ++i)
f0126e33:	ff 45 f4             	incl   -0xc(%ebp)
f0126e36:	8b 85 8c fe ff ff    	mov    -0x174(%ebp),%eax
f0126e3c:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0126e3f:	7f e7                	jg     f0126e28 <test_kfreeall+0x11ac>
		}
	}

	//kfree entire kernel heap
	{
		freeFrames = sys_calculate_free_frames() ;
f0126e41:	e8 78 55 fe ff       	call   f010c3be <sys_calculate_free_frames>
f0126e46:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0126e49:	e8 3e ce fd ff       	call   f0103c8c <pf_calculate_free_frames>
f0126e4e:	89 45 cc             	mov    %eax,-0x34(%ebp)

		kfreeall();
f0126e51:	e8 e8 07 fe ff       	call   f010763e <kfreeall>

		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0126e56:	e8 31 ce fd ff       	call   f0103c8c <pf_calculate_free_frames>
f0126e5b:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0126e5e:	74 17                	je     f0126e77 <test_kfreeall+0x11fb>
f0126e60:	83 ec 04             	sub    $0x4,%esp
f0126e63:	68 90 a8 13 f0       	push   $0xf013a890
f0126e68:	68 c1 0a 00 00       	push   $0xac1
f0126e6d:	68 76 a8 13 f0       	push   $0xf013a876
f0126e72:	e8 2f 93 fd ff       	call   f01001a6 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != (INITIAL_KHEAP_ALLOCATIONS)/PAGE_SIZE+ 2 + 3*Mega/4096 + 1 + 1 + 4 + 5 + 256) panic("Wrong kfree: pages in memory are not freed correctly");
f0126e77:	e8 42 55 fe ff       	call   f010c3be <sys_calculate_free_frames>
f0126e7c:	89 c2                	mov    %eax,%edx
f0126e7e:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0126e81:	89 d1                	mov    %edx,%ecx
f0126e83:	29 c1                	sub    %eax,%ecx
f0126e85:	c7 85 cc fe ff ff 00 	movl   $0x1000,-0x134(%ebp)
f0126e8c:	10 00 00 
f0126e8f:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f0126e95:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0126e9a:	89 85 c8 fe ff ff    	mov    %eax,-0x138(%ebp)
f0126ea0:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f0126ea6:	ba 00 00 00 00       	mov    $0x0,%edx
f0126eab:	f7 b5 cc fe ff ff    	divl   -0x134(%ebp)
f0126eb1:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f0126eb7:	29 d0                	sub    %edx,%eax
f0126eb9:	89 c3                	mov    %eax,%ebx
f0126ebb:	c7 85 c4 fe ff ff 00 	movl   $0x1000,-0x13c(%ebp)
f0126ec2:	10 00 00 
f0126ec5:	a0 bc 0e 6c f0       	mov    0xf06c0ebc,%al
f0126eca:	0f b6 d0             	movzbl %al,%edx
f0126ecd:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f0126ed3:	01 d0                	add    %edx,%eax
f0126ed5:	48                   	dec    %eax
f0126ed6:	89 85 c0 fe ff ff    	mov    %eax,-0x140(%ebp)
f0126edc:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f0126ee2:	ba 00 00 00 00       	mov    $0x0,%edx
f0126ee7:	f7 b5 c4 fe ff ff    	divl   -0x13c(%ebp)
f0126eed:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f0126ef3:	29 d0                	sub    %edx,%eax
f0126ef5:	01 c3                	add    %eax,%ebx
f0126ef7:	c7 85 bc fe ff ff 00 	movl   $0x1000,-0x144(%ebp)
f0126efe:	10 00 00 
f0126f01:	a0 bc 0e 6c f0       	mov    0xf06c0ebc,%al
f0126f06:	0f b6 c0             	movzbl %al,%eax
f0126f09:	c1 e0 04             	shl    $0x4,%eax
f0126f0c:	89 c2                	mov    %eax,%edx
f0126f0e:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f0126f14:	01 d0                	add    %edx,%eax
f0126f16:	48                   	dec    %eax
f0126f17:	89 85 b8 fe ff ff    	mov    %eax,-0x148(%ebp)
f0126f1d:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f0126f23:	ba 00 00 00 00       	mov    $0x0,%edx
f0126f28:	f7 b5 bc fe ff ff    	divl   -0x144(%ebp)
f0126f2e:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f0126f34:	29 d0                	sub    %edx,%eax
f0126f36:	01 d8                	add    %ebx,%eax
f0126f38:	05 00 40 00 00       	add    $0x4000,%eax
f0126f3d:	c1 e8 0c             	shr    $0xc,%eax
f0126f40:	05 0d 04 00 00       	add    $0x40d,%eax
f0126f45:	39 c1                	cmp    %eax,%ecx
f0126f47:	74 17                	je     f0126f60 <test_kfreeall+0x12e4>
f0126f49:	83 ec 04             	sub    $0x4,%esp
f0126f4c:	68 00 b0 13 f0       	push   $0xf013b000
f0126f51:	68 c2 0a 00 00       	push   $0xac2
f0126f56:	68 76 a8 13 f0       	push   $0xf013a876
f0126f5b:	e8 46 92 fd ff       	call   f01001a6 <_panic>

	//Check memory access after kfreeall
	{
		//Bypass the PAGE FAULT on <MOVB immediate, reg> instruction by setting its length
		//and continue executing the remaining code
		sys_bypassPageFault(3);
f0126f60:	83 ec 0c             	sub    $0xc,%esp
f0126f63:	6a 03                	push   $0x3
f0126f65:	e8 fd 58 fe ff       	call   f010c867 <sys_bypassPageFault>
f0126f6a:	83 c4 10             	add    $0x10,%esp

		for (i = 0; i < 10; ++i)
f0126f6d:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0126f74:	e9 82 00 00 00       	jmp    f0126ffb <test_kfreeall+0x137f>
		{
			ptr = (char *) ptr_allocations[i];
f0126f79:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0126f7c:	8b 84 85 c8 fd ff ff 	mov    -0x238(%ebp,%eax,4),%eax
f0126f83:	89 45 80             	mov    %eax,-0x80(%ebp)
			ptr[0] = 10;
f0126f86:	8b 45 80             	mov    -0x80(%ebp),%eax
f0126f89:	c6 00 0a             	movb   $0xa,(%eax)
			//cprintf("\n\ncr2 = %x, faulted addr = %x", sys_rcr2(), (uint32)&(ptr[0]));
			if (sys_rcr2() != (uint32)&(ptr[0])) panic("kfree: successful access to freed space!! it should not be succeeded");
f0126f8c:	e8 c4 58 fe ff       	call   f010c855 <sys_rcr2>
f0126f91:	89 c2                	mov    %eax,%edx
f0126f93:	8b 45 80             	mov    -0x80(%ebp),%eax
f0126f96:	39 c2                	cmp    %eax,%edx
f0126f98:	74 17                	je     f0126fb1 <test_kfreeall+0x1335>
f0126f9a:	83 ec 04             	sub    $0x4,%esp
f0126f9d:	68 dc b0 13 f0       	push   $0xf013b0dc
f0126fa2:	68 d0 0a 00 00       	push   $0xad0
f0126fa7:	68 76 a8 13 f0       	push   $0xf013a876
f0126fac:	e8 f5 91 fd ff       	call   f01001a6 <_panic>
			ptr[lastIndices[i]] = 10;
f0126fb1:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0126fb4:	8b 84 85 68 fe ff ff 	mov    -0x198(%ebp,%eax,4),%eax
f0126fbb:	89 c2                	mov    %eax,%edx
f0126fbd:	8b 45 80             	mov    -0x80(%ebp),%eax
f0126fc0:	01 d0                	add    %edx,%eax
f0126fc2:	c6 00 0a             	movb   $0xa,(%eax)
			if (sys_rcr2() != (uint32)&(ptr[lastIndices[i]])) panic("kfree: successful access to freed space!! it should not be succeeded");
f0126fc5:	e8 8b 58 fe ff       	call   f010c855 <sys_rcr2>
f0126fca:	89 c2                	mov    %eax,%edx
f0126fcc:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0126fcf:	8b 84 85 68 fe ff ff 	mov    -0x198(%ebp,%eax,4),%eax
f0126fd6:	89 c1                	mov    %eax,%ecx
f0126fd8:	8b 45 80             	mov    -0x80(%ebp),%eax
f0126fdb:	01 c8                	add    %ecx,%eax
f0126fdd:	39 c2                	cmp    %eax,%edx
f0126fdf:	74 17                	je     f0126ff8 <test_kfreeall+0x137c>
f0126fe1:	83 ec 04             	sub    $0x4,%esp
f0126fe4:	68 dc b0 13 f0       	push   $0xf013b0dc
f0126fe9:	68 d2 0a 00 00       	push   $0xad2
f0126fee:	68 76 a8 13 f0       	push   $0xf013a876
f0126ff3:	e8 ae 91 fd ff       	call   f01001a6 <_panic>
	{
		//Bypass the PAGE FAULT on <MOVB immediate, reg> instruction by setting its length
		//and continue executing the remaining code
		sys_bypassPageFault(3);

		for (i = 0; i < 10; ++i)
f0126ff8:	ff 45 f4             	incl   -0xc(%ebp)
f0126ffb:	83 7d f4 09          	cmpl   $0x9,-0xc(%ebp)
f0126fff:	0f 8e 74 ff ff ff    	jle    f0126f79 <test_kfreeall+0x12fd>
			if (sys_rcr2() != (uint32)&(ptr[0])) panic("kfree: successful access to freed space!! it should not be succeeded");
			ptr[lastIndices[i]] = 10;
			if (sys_rcr2() != (uint32)&(ptr[lastIndices[i]])) panic("kfree: successful access to freed space!! it should not be succeeded");
		}
		//set it to 0 again to cancel the bypassing option
		sys_bypassPageFault(0);
f0127005:	83 ec 0c             	sub    $0xc,%esp
f0127008:	6a 00                	push   $0x0
f012700a:	e8 58 58 fe ff       	call   f010c867 <sys_bypassPageFault>
f012700f:	83 c4 10             	add    $0x10,%esp
	}

	//Allocate after kfreeall
	{
		//4 MB
		freeFrames = sys_calculate_free_frames() ;
f0127012:	e8 a7 53 fe ff       	call   f010c3be <sys_calculate_free_frames>
f0127017:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012701a:	e8 6d cc fd ff       	call   f0103c8c <pf_calculate_free_frames>
f012701f:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[10] = kmalloc(4*Mega);
f0127022:	83 ec 0c             	sub    $0xc,%esp
f0127025:	68 00 00 40 00       	push   $0x400000
f012702a:	e8 95 05 fe ff       	call   f01075c4 <kmalloc>
f012702f:	83 c4 10             	add    $0x10,%esp
f0127032:	89 85 f0 fd ff ff    	mov    %eax,-0x210(%ebp)
		if ((uint32) ptr_allocations[10] != (KERNEL_HEAP_START)) panic("Wrong start address after kfreeall()... check return address updating of heap ptr");
f0127038:	8b 85 f0 fd ff ff    	mov    -0x210(%ebp),%eax
f012703e:	3d 00 00 00 f6       	cmp    $0xf6000000,%eax
f0127043:	74 17                	je     f012705c <test_kfreeall+0x13e0>
f0127045:	83 ec 04             	sub    $0x4,%esp
f0127048:	68 80 b5 13 f0       	push   $0xf013b580
f012704d:	68 de 0a 00 00       	push   $0xade
f0127052:	68 76 a8 13 f0       	push   $0xf013a876
f0127057:	e8 4a 91 fd ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012705c:	e8 2b cc fd ff       	call   f0103c8c <pf_calculate_free_frames>
f0127061:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0127064:	74 17                	je     f012707d <test_kfreeall+0x1401>
f0127066:	83 ec 04             	sub    $0x4,%esp
f0127069:	68 90 a8 13 f0       	push   $0xf013a890
f012706e:	68 df 0a 00 00       	push   $0xadf
f0127073:	68 76 a8 13 f0       	push   $0xf013a876
f0127078:	e8 29 91 fd ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 4*Mega/PAGE_SIZE) panic("Wrong allocation: pages are not loaded successfully into memory");
f012707d:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0127080:	e8 39 53 fe ff       	call   f010c3be <sys_calculate_free_frames>
f0127085:	29 c3                	sub    %eax,%ebx
f0127087:	89 d8                	mov    %ebx,%eax
f0127089:	3d 00 04 00 00       	cmp    $0x400,%eax
f012708e:	74 17                	je     f01270a7 <test_kfreeall+0x142b>
f0127090:	83 ec 04             	sub    $0x4,%esp
f0127093:	68 f8 a8 13 f0       	push   $0xf013a8f8
f0127098:	68 e0 0a 00 00       	push   $0xae0
f012709d:	68 76 a8 13 f0       	push   $0xf013a876
f01270a2:	e8 ff 90 fd ff       	call   f01001a6 <_panic>

		//12 KB
		freeFrames = sys_calculate_free_frames() ;
f01270a7:	e8 12 53 fe ff       	call   f010c3be <sys_calculate_free_frames>
f01270ac:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01270af:	e8 d8 cb fd ff       	call   f0103c8c <pf_calculate_free_frames>
f01270b4:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[11] = kmalloc(12*kilo);
f01270b7:	83 ec 0c             	sub    $0xc,%esp
f01270ba:	68 00 30 00 00       	push   $0x3000
f01270bf:	e8 00 05 fe ff       	call   f01075c4 <kmalloc>
f01270c4:	83 c4 10             	add    $0x10,%esp
f01270c7:	89 85 f4 fd ff ff    	mov    %eax,-0x20c(%ebp)
		if ((uint32) ptr_allocations[11] != (KERNEL_HEAP_START + 4*Mega)) panic("Wrong start address after kfreeall()... check return address updating of heap ptr");
f01270cd:	8b 85 f4 fd ff ff    	mov    -0x20c(%ebp),%eax
f01270d3:	3d 00 00 40 f6       	cmp    $0xf6400000,%eax
f01270d8:	74 17                	je     f01270f1 <test_kfreeall+0x1475>
f01270da:	83 ec 04             	sub    $0x4,%esp
f01270dd:	68 80 b5 13 f0       	push   $0xf013b580
f01270e2:	68 e6 0a 00 00       	push   $0xae6
f01270e7:	68 76 a8 13 f0       	push   $0xf013a876
f01270ec:	e8 b5 90 fd ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01270f1:	e8 96 cb fd ff       	call   f0103c8c <pf_calculate_free_frames>
f01270f6:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f01270f9:	74 17                	je     f0127112 <test_kfreeall+0x1496>
f01270fb:	83 ec 04             	sub    $0x4,%esp
f01270fe:	68 90 a8 13 f0       	push   $0xf013a890
f0127103:	68 e7 0a 00 00       	push   $0xae7
f0127108:	68 76 a8 13 f0       	push   $0xf013a876
f012710d:	e8 94 90 fd ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 3) panic("Wrong allocation: pages are not loaded successfully into memory");
f0127112:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0127115:	e8 a4 52 fe ff       	call   f010c3be <sys_calculate_free_frames>
f012711a:	29 c3                	sub    %eax,%ebx
f012711c:	89 d8                	mov    %ebx,%eax
f012711e:	83 f8 03             	cmp    $0x3,%eax
f0127121:	74 17                	je     f012713a <test_kfreeall+0x14be>
f0127123:	83 ec 04             	sub    $0x4,%esp
f0127126:	68 f8 a8 13 f0       	push   $0xf013a8f8
f012712b:	68 e8 0a 00 00       	push   $0xae8
f0127130:	68 76 a8 13 f0       	push   $0xf013a876
f0127135:	e8 6c 90 fd ff       	call   f01001a6 <_panic>
	}

	//kfree one of the newly allocated space
	{
		//kfree 12 KB
		freeFrames = sys_calculate_free_frames() ;
f012713a:	e8 7f 52 fe ff       	call   f010c3be <sys_calculate_free_frames>
f012713f:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0127142:	e8 45 cb fd ff       	call   f0103c8c <pf_calculate_free_frames>
f0127147:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[11]);
f012714a:	8b 85 f4 fd ff ff    	mov    -0x20c(%ebp),%eax
f0127150:	83 ec 0c             	sub    $0xc,%esp
f0127153:	50                   	push   %eax
f0127154:	e8 85 04 fe ff       	call   f01075de <kfree>
f0127159:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012715c:	e8 2b cb fd ff       	call   f0103c8c <pf_calculate_free_frames>
f0127161:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0127164:	74 17                	je     f012717d <test_kfreeall+0x1501>
f0127166:	83 ec 04             	sub    $0x4,%esp
f0127169:	68 90 a8 13 f0       	push   $0xf013a890
f012716e:	68 f2 0a 00 00       	push   $0xaf2
f0127173:	68 76 a8 13 f0       	push   $0xf013a876
f0127178:	e8 29 90 fd ff       	call   f01001a6 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 3) panic("Wrong kfree: attempt to kfree a non-existing ptr. It should do nothing");
f012717d:	e8 3c 52 fe ff       	call   f010c3be <sys_calculate_free_frames>
f0127182:	89 c2                	mov    %eax,%edx
f0127184:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0127187:	29 c2                	sub    %eax,%edx
f0127189:	89 d0                	mov    %edx,%eax
f012718b:	83 f8 03             	cmp    $0x3,%eax
f012718e:	74 17                	je     f01271a7 <test_kfreeall+0x152b>
f0127190:	83 ec 04             	sub    $0x4,%esp
f0127193:	68 28 b1 13 f0       	push   $0xf013b128
f0127198:	68 f3 0a 00 00       	push   $0xaf3
f012719d:	68 76 a8 13 f0       	push   $0xf013a876
f01271a2:	e8 ff 8f fd ff       	call   f01001a6 <_panic>
	}

	//kfree non-exist item
	{
		//kfree 2 KB
		freeFrames = sys_calculate_free_frames() ;
f01271a7:	e8 12 52 fe ff       	call   f010c3be <sys_calculate_free_frames>
f01271ac:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01271af:	e8 d8 ca fd ff       	call   f0103c8c <pf_calculate_free_frames>
f01271b4:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[2]);
f01271b7:	8b 85 d0 fd ff ff    	mov    -0x230(%ebp),%eax
f01271bd:	83 ec 0c             	sub    $0xc,%esp
f01271c0:	50                   	push   %eax
f01271c1:	e8 18 04 fe ff       	call   f01075de <kfree>
f01271c6:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01271c9:	e8 be ca fd ff       	call   f0103c8c <pf_calculate_free_frames>
f01271ce:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f01271d1:	74 17                	je     f01271ea <test_kfreeall+0x156e>
f01271d3:	83 ec 04             	sub    $0x4,%esp
f01271d6:	68 90 a8 13 f0       	push   $0xf013a890
f01271db:	68 fc 0a 00 00       	push   $0xafc
f01271e0:	68 76 a8 13 f0       	push   $0xf013a876
f01271e5:	e8 bc 8f fd ff       	call   f01001a6 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 0) panic("Wrong kfree: attempt to kfree a non-existing ptr. It should do nothing");
f01271ea:	e8 cf 51 fe ff       	call   f010c3be <sys_calculate_free_frames>
f01271ef:	89 c2                	mov    %eax,%edx
f01271f1:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01271f4:	39 c2                	cmp    %eax,%edx
f01271f6:	74 17                	je     f012720f <test_kfreeall+0x1593>
f01271f8:	83 ec 04             	sub    $0x4,%esp
f01271fb:	68 28 b1 13 f0       	push   $0xf013b128
f0127200:	68 fd 0a 00 00       	push   $0xafd
f0127205:	68 76 a8 13 f0       	push   $0xf013a876
f012720a:	e8 97 8f fd ff       	call   f01001a6 <_panic>

		//kfree 20 KB
		freeFrames = sys_calculate_free_frames() ;
f012720f:	e8 aa 51 fe ff       	call   f010c3be <sys_calculate_free_frames>
f0127214:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0127217:	e8 70 ca fd ff       	call   f0103c8c <pf_calculate_free_frames>
f012721c:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[8]);
f012721f:	8b 85 e8 fd ff ff    	mov    -0x218(%ebp),%eax
f0127225:	83 ec 0c             	sub    $0xc,%esp
f0127228:	50                   	push   %eax
f0127229:	e8 b0 03 fe ff       	call   f01075de <kfree>
f012722e:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0127231:	e8 56 ca fd ff       	call   f0103c8c <pf_calculate_free_frames>
f0127236:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0127239:	74 17                	je     f0127252 <test_kfreeall+0x15d6>
f012723b:	83 ec 04             	sub    $0x4,%esp
f012723e:	68 90 a8 13 f0       	push   $0xf013a890
f0127243:	68 03 0b 00 00       	push   $0xb03
f0127248:	68 76 a8 13 f0       	push   $0xf013a876
f012724d:	e8 54 8f fd ff       	call   f01001a6 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 0) panic("Wrong kfree: attempt to kfree a non-existing ptr. It should do nothing");
f0127252:	e8 67 51 fe ff       	call   f010c3be <sys_calculate_free_frames>
f0127257:	89 c2                	mov    %eax,%edx
f0127259:	8b 45 d0             	mov    -0x30(%ebp),%eax
f012725c:	39 c2                	cmp    %eax,%edx
f012725e:	74 17                	je     f0127277 <test_kfreeall+0x15fb>
f0127260:	83 ec 04             	sub    $0x4,%esp
f0127263:	68 28 b1 13 f0       	push   $0xf013b128
f0127268:	68 04 0b 00 00       	push   $0xb04
f012726d:	68 76 a8 13 f0       	push   $0xf013a876
f0127272:	e8 2f 8f fd ff       	call   f01001a6 <_panic>

		//kfree 1 MB
		freeFrames = sys_calculate_free_frames() ;
f0127277:	e8 42 51 fe ff       	call   f010c3be <sys_calculate_free_frames>
f012727c:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012727f:	e8 08 ca fd ff       	call   f0103c8c <pf_calculate_free_frames>
f0127284:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[9]);
f0127287:	8b 85 ec fd ff ff    	mov    -0x214(%ebp),%eax
f012728d:	83 ec 0c             	sub    $0xc,%esp
f0127290:	50                   	push   %eax
f0127291:	e8 48 03 fe ff       	call   f01075de <kfree>
f0127296:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0127299:	e8 ee c9 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f012729e:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f01272a1:	74 17                	je     f01272ba <test_kfreeall+0x163e>
f01272a3:	83 ec 04             	sub    $0x4,%esp
f01272a6:	68 90 a8 13 f0       	push   $0xf013a890
f01272ab:	68 0a 0b 00 00       	push   $0xb0a
f01272b0:	68 76 a8 13 f0       	push   $0xf013a876
f01272b5:	e8 ec 8e fd ff       	call   f01001a6 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 0) panic("Wrong kfree: attempt to kfree a non-existing ptr. It should do nothing");
f01272ba:	e8 ff 50 fe ff       	call   f010c3be <sys_calculate_free_frames>
f01272bf:	89 c2                	mov    %eax,%edx
f01272c1:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01272c4:	39 c2                	cmp    %eax,%edx
f01272c6:	74 17                	je     f01272df <test_kfreeall+0x1663>
f01272c8:	83 ec 04             	sub    $0x4,%esp
f01272cb:	68 28 b1 13 f0       	push   $0xf013b128
f01272d0:	68 0b 0b 00 00       	push   $0xb0b
f01272d5:	68 76 a8 13 f0       	push   $0xf013a876
f01272da:	e8 c7 8e fd ff       	call   f01001a6 <_panic>
	}

	//check tables
	{
		long long va;
		for (va = KERNEL_HEAP_START; va < (long long)KERNEL_HEAP_MAX; va+=PTSIZE)
f01272df:	c7 45 e8 00 00 00 f6 	movl   $0xf6000000,-0x18(%ebp)
f01272e6:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f01272ed:	eb 48                	jmp    f0127337 <test_kfreeall+0x16bb>
		{
			uint32 *ptr_table ;
			get_page_table(ptr_page_directory, (uint32)va, &ptr_table);
f01272ef:	8b 55 e8             	mov    -0x18(%ebp),%edx
f01272f2:	a1 b8 0e 6c f0       	mov    0xf06c0eb8,%eax
f01272f7:	83 ec 04             	sub    $0x4,%esp
f01272fa:	8d 8d c4 fd ff ff    	lea    -0x23c(%ebp),%ecx
f0127300:	51                   	push   %ecx
f0127301:	52                   	push   %edx
f0127302:	50                   	push   %eax
f0127303:	e8 61 f6 fd ff       	call   f0106969 <get_page_table>
f0127308:	83 c4 10             	add    $0x10,%esp
			if (ptr_table == NULL)
f012730b:	8b 85 c4 fd ff ff    	mov    -0x23c(%ebp),%eax
f0127311:	85 c0                	test   %eax,%eax
f0127313:	75 17                	jne    f012732c <test_kfreeall+0x16b0>
			{
				panic("Wrong kfree: one of the kernel tables is wrongly removed! Tables should not be removed here in kfree");
f0127315:	83 ec 04             	sub    $0x4,%esp
f0127318:	68 78 b1 13 f0       	push   $0xf013b178
f012731d:	68 18 0b 00 00       	push   $0xb18
f0127322:	68 76 a8 13 f0       	push   $0xf013a876
f0127327:	e8 7a 8e fd ff       	call   f01001a6 <_panic>
	}

	//check tables
	{
		long long va;
		for (va = KERNEL_HEAP_START; va < (long long)KERNEL_HEAP_MAX; va+=PTSIZE)
f012732c:	81 45 e8 00 00 40 00 	addl   $0x400000,-0x18(%ebp)
f0127333:	83 55 ec 00          	adcl   $0x0,-0x14(%ebp)
f0127337:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012733b:	78 b2                	js     f01272ef <test_kfreeall+0x1673>
f012733d:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0127341:	7f 09                	jg     f012734c <test_kfreeall+0x16d0>
f0127343:	81 7d e8 ff ef ff ff 	cmpl   $0xffffefff,-0x18(%ebp)
f012734a:	76 a3                	jbe    f01272ef <test_kfreeall+0x1673>
			}
		}
	}


	cprintf("\nCongratulations!! your modification is run successfully.\n");
f012734c:	83 ec 0c             	sub    $0xc,%esp
f012734f:	68 d4 b5 13 f0       	push   $0xf013b5d4
f0127354:	e8 d4 98 fd ff       	call   f0100c2d <cprintf>
f0127359:	83 c4 10             	add    $0x10,%esp

	return 1;
f012735c:	b8 01 00 00 00       	mov    $0x1,%eax

}
f0127361:	8d 65 f8             	lea    -0x8(%ebp),%esp
f0127364:	5b                   	pop    %ebx
f0127365:	5f                   	pop    %edi
f0127366:	5d                   	pop    %ebp
f0127367:	c3                   	ret    

f0127368 <test_kexpand>:


extern void kexpand(uint32 newSize) ;

int test_kexpand()
{
f0127368:	55                   	push   %ebp
f0127369:	89 e5                	mov    %esp,%ebp
f012736b:	57                   	push   %edi
f012736c:	53                   	push   %ebx
f012736d:	81 ec 90 01 00 00    	sub    $0x190,%esp
	char minByte = 1<<7;
f0127373:	c6 45 f3 80          	movb   $0x80,-0xd(%ebp)
	char maxByte = 0x7F;
f0127377:	c6 45 f2 7f          	movb   $0x7f,-0xe(%ebp)
	short minShort = 1<<15 ;
f012737b:	66 c7 45 f0 00 80    	movw   $0x8000,-0x10(%ebp)
	short maxShort = 0x7FFF;
f0127381:	66 c7 45 ee ff 7f    	movw   $0x7fff,-0x12(%ebp)
	int minInt = 1<<31 ;
f0127387:	c7 45 e8 00 00 00 80 	movl   $0x80000000,-0x18(%ebp)
	int maxInt = 0x7FFFFFFF;
f012738e:	c7 45 e4 ff ff ff 7f 	movl   $0x7fffffff,-0x1c(%ebp)
	char *byteArr, *byteArr2 ;
	short *shortArr, *shortArr2 ;
	int *intArr;
	struct MyStruct *structArr ;
	int lastIndexOfByte, lastIndexOfByte2, lastIndexOfShort, lastIndexOfShort2, lastIndexOfInt, lastIndexOfStruct;
	int start_freeFrames = sys_calculate_free_frames() ;
f0127395:	e8 24 50 fe ff       	call   f010c3be <sys_calculate_free_frames>
f012739a:	89 45 e0             	mov    %eax,-0x20(%ebp)

	//malloc some spaces
	int i, freeFrames, freeDiskFrames ;
	char* ptr;
	int lastIndices[20] = {0};
f012739d:	8d 95 bc fe ff ff    	lea    -0x144(%ebp),%edx
f01273a3:	b9 14 00 00 00       	mov    $0x14,%ecx
f01273a8:	b8 00 00 00 00       	mov    $0x0,%eax
f01273ad:	89 d7                	mov    %edx,%edi
f01273af:	f3 ab                	rep stos %eax,%es:(%edi)

	uint32 *arr;
	void* ptr_allocations[20] = {0};
f01273b1:	8d 95 6c fe ff ff    	lea    -0x194(%ebp),%edx
f01273b7:	b9 14 00 00 00       	mov    $0x14,%ecx
f01273bc:	b8 00 00 00 00       	mov    $0x0,%eax
f01273c1:	89 d7                	mov    %edx,%edi
f01273c3:	f3 ab                	rep stos %eax,%es:(%edi)
	{
		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f01273c5:	e8 f4 4f fe ff       	call   f010c3be <sys_calculate_free_frames>
f01273ca:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01273cd:	e8 ba c8 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f01273d2:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[0] = kmalloc(2*Mega-kilo);
f01273d5:	83 ec 0c             	sub    $0xc,%esp
f01273d8:	68 00 fc 1f 00       	push   $0x1ffc00
f01273dd:	e8 e2 01 fe ff       	call   f01075c4 <kmalloc>
f01273e2:	83 c4 10             	add    $0x10,%esp
f01273e5:	89 85 6c fe ff ff    	mov    %eax,-0x194(%ebp)
		if ((uint32) ptr_allocations[0] !=  (ACTUAL_START)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01273eb:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f01273f1:	89 c1                	mov    %eax,%ecx
f01273f3:	c7 45 d4 00 10 00 00 	movl   $0x1000,-0x2c(%ebp)
f01273fa:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f01273fd:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0127402:	89 45 d0             	mov    %eax,-0x30(%ebp)
f0127405:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0127408:	ba 00 00 00 00       	mov    $0x0,%edx
f012740d:	f7 75 d4             	divl   -0x2c(%ebp)
f0127410:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0127413:	29 d0                	sub    %edx,%eax
f0127415:	89 c3                	mov    %eax,%ebx
f0127417:	c7 45 cc 00 10 00 00 	movl   $0x1000,-0x34(%ebp)
f012741e:	a0 bc 0e 6c f0       	mov    0xf06c0ebc,%al
f0127423:	0f b6 d0             	movzbl %al,%edx
f0127426:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0127429:	01 d0                	add    %edx,%eax
f012742b:	48                   	dec    %eax
f012742c:	89 45 c8             	mov    %eax,-0x38(%ebp)
f012742f:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0127432:	ba 00 00 00 00       	mov    $0x0,%edx
f0127437:	f7 75 cc             	divl   -0x34(%ebp)
f012743a:	8b 45 c8             	mov    -0x38(%ebp),%eax
f012743d:	29 d0                	sub    %edx,%eax
f012743f:	01 c3                	add    %eax,%ebx
f0127441:	c7 45 c4 00 10 00 00 	movl   $0x1000,-0x3c(%ebp)
f0127448:	a0 bc 0e 6c f0       	mov    0xf06c0ebc,%al
f012744d:	0f b6 c0             	movzbl %al,%eax
f0127450:	c1 e0 04             	shl    $0x4,%eax
f0127453:	89 c2                	mov    %eax,%edx
f0127455:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0127458:	01 d0                	add    %edx,%eax
f012745a:	48                   	dec    %eax
f012745b:	89 45 c0             	mov    %eax,-0x40(%ebp)
f012745e:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0127461:	ba 00 00 00 00       	mov    $0x0,%edx
f0127466:	f7 75 c4             	divl   -0x3c(%ebp)
f0127469:	8b 45 c0             	mov    -0x40(%ebp),%eax
f012746c:	29 d0                	sub    %edx,%eax
f012746e:	01 d8                	add    %ebx,%eax
f0127470:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f0127475:	39 c1                	cmp    %eax,%ecx
f0127477:	74 17                	je     f0127490 <test_kexpand+0x128>
f0127479:	83 ec 04             	sub    $0x4,%esp
f012747c:	68 5c a9 13 f0       	push   $0xf013a95c
f0127481:	68 43 0b 00 00       	push   $0xb43
f0127486:	68 76 a8 13 f0       	push   $0xf013a876
f012748b:	e8 16 8d fd ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0127490:	e8 f7 c7 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f0127495:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0127498:	74 17                	je     f01274b1 <test_kexpand+0x149>
f012749a:	83 ec 04             	sub    $0x4,%esp
f012749d:	68 90 a8 13 f0       	push   $0xf013a890
f01274a2:	68 44 0b 00 00       	push   $0xb44
f01274a7:	68 76 a8 13 f0       	push   $0xf013a876
f01274ac:	e8 f5 8c fd ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f01274b1:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f01274b4:	e8 05 4f fe ff       	call   f010c3be <sys_calculate_free_frames>
f01274b9:	29 c3                	sub    %eax,%ebx
f01274bb:	89 d8                	mov    %ebx,%eax
f01274bd:	3d 00 02 00 00       	cmp    $0x200,%eax
f01274c2:	74 17                	je     f01274db <test_kexpand+0x173>
f01274c4:	83 ec 04             	sub    $0x4,%esp
f01274c7:	68 f8 a8 13 f0       	push   $0xf013a8f8
f01274cc:	68 45 0b 00 00       	push   $0xb45
f01274d1:	68 76 a8 13 f0       	push   $0xf013a876
f01274d6:	e8 cb 8c fd ff       	call   f01001a6 <_panic>
		lastIndices[0] = (2*Mega-kilo)/sizeof(char) - 1;
f01274db:	c7 85 bc fe ff ff ff 	movl   $0x1ffbff,-0x144(%ebp)
f01274e2:	fb 1f 00 

		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f01274e5:	e8 d4 4e fe ff       	call   f010c3be <sys_calculate_free_frames>
f01274ea:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01274ed:	e8 9a c7 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f01274f2:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[1] = kmalloc(2*Mega-kilo);
f01274f5:	83 ec 0c             	sub    $0xc,%esp
f01274f8:	68 00 fc 1f 00       	push   $0x1ffc00
f01274fd:	e8 c2 00 fe ff       	call   f01075c4 <kmalloc>
f0127502:	83 c4 10             	add    $0x10,%esp
f0127505:	89 85 70 fe ff ff    	mov    %eax,-0x190(%ebp)
		if ((uint32) ptr_allocations[1] != (ACTUAL_START + 2*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f012750b:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f0127511:	89 c1                	mov    %eax,%ecx
f0127513:	c7 45 bc 00 10 00 00 	movl   $0x1000,-0x44(%ebp)
f012751a:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012751d:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0127522:	89 45 b8             	mov    %eax,-0x48(%ebp)
f0127525:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0127528:	ba 00 00 00 00       	mov    $0x0,%edx
f012752d:	f7 75 bc             	divl   -0x44(%ebp)
f0127530:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0127533:	29 d0                	sub    %edx,%eax
f0127535:	89 c3                	mov    %eax,%ebx
f0127537:	c7 45 b4 00 10 00 00 	movl   $0x1000,-0x4c(%ebp)
f012753e:	a0 bc 0e 6c f0       	mov    0xf06c0ebc,%al
f0127543:	0f b6 d0             	movzbl %al,%edx
f0127546:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0127549:	01 d0                	add    %edx,%eax
f012754b:	48                   	dec    %eax
f012754c:	89 45 b0             	mov    %eax,-0x50(%ebp)
f012754f:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0127552:	ba 00 00 00 00       	mov    $0x0,%edx
f0127557:	f7 75 b4             	divl   -0x4c(%ebp)
f012755a:	8b 45 b0             	mov    -0x50(%ebp),%eax
f012755d:	29 d0                	sub    %edx,%eax
f012755f:	01 c3                	add    %eax,%ebx
f0127561:	c7 45 ac 00 10 00 00 	movl   $0x1000,-0x54(%ebp)
f0127568:	a0 bc 0e 6c f0       	mov    0xf06c0ebc,%al
f012756d:	0f b6 c0             	movzbl %al,%eax
f0127570:	c1 e0 04             	shl    $0x4,%eax
f0127573:	89 c2                	mov    %eax,%edx
f0127575:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0127578:	01 d0                	add    %edx,%eax
f012757a:	48                   	dec    %eax
f012757b:	89 45 a8             	mov    %eax,-0x58(%ebp)
f012757e:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0127581:	ba 00 00 00 00       	mov    $0x0,%edx
f0127586:	f7 75 ac             	divl   -0x54(%ebp)
f0127589:	8b 45 a8             	mov    -0x58(%ebp),%eax
f012758c:	29 d0                	sub    %edx,%eax
f012758e:	01 d8                	add    %ebx,%eax
f0127590:	2d 00 c0 df 09       	sub    $0x9dfc000,%eax
f0127595:	39 c1                	cmp    %eax,%ecx
f0127597:	74 17                	je     f01275b0 <test_kexpand+0x248>
f0127599:	83 ec 04             	sub    $0x4,%esp
f012759c:	68 5c a9 13 f0       	push   $0xf013a95c
f01275a1:	68 4c 0b 00 00       	push   $0xb4c
f01275a6:	68 76 a8 13 f0       	push   $0xf013a876
f01275ab:	e8 f6 8b fd ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01275b0:	e8 d7 c6 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f01275b5:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f01275b8:	74 17                	je     f01275d1 <test_kexpand+0x269>
f01275ba:	83 ec 04             	sub    $0x4,%esp
f01275bd:	68 90 a8 13 f0       	push   $0xf013a890
f01275c2:	68 4d 0b 00 00       	push   $0xb4d
f01275c7:	68 76 a8 13 f0       	push   $0xf013a876
f01275cc:	e8 d5 8b fd ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f01275d1:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f01275d4:	e8 e5 4d fe ff       	call   f010c3be <sys_calculate_free_frames>
f01275d9:	29 c3                	sub    %eax,%ebx
f01275db:	89 d8                	mov    %ebx,%eax
f01275dd:	3d 00 02 00 00       	cmp    $0x200,%eax
f01275e2:	74 17                	je     f01275fb <test_kexpand+0x293>
f01275e4:	83 ec 04             	sub    $0x4,%esp
f01275e7:	68 f8 a8 13 f0       	push   $0xf013a8f8
f01275ec:	68 4e 0b 00 00       	push   $0xb4e
f01275f1:	68 76 a8 13 f0       	push   $0xf013a876
f01275f6:	e8 ab 8b fd ff       	call   f01001a6 <_panic>
		lastIndices[1] = (2*Mega-kilo)/sizeof(char) - 1;
f01275fb:	c7 85 c0 fe ff ff ff 	movl   $0x1ffbff,-0x140(%ebp)
f0127602:	fb 1f 00 

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f0127605:	e8 b4 4d fe ff       	call   f010c3be <sys_calculate_free_frames>
f012760a:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012760d:	e8 7a c6 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f0127612:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[2] = kmalloc(2*kilo);
f0127615:	83 ec 0c             	sub    $0xc,%esp
f0127618:	68 00 08 00 00       	push   $0x800
f012761d:	e8 a2 ff fd ff       	call   f01075c4 <kmalloc>
f0127622:	83 c4 10             	add    $0x10,%esp
f0127625:	89 85 74 fe ff ff    	mov    %eax,-0x18c(%ebp)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f012762b:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f0127631:	89 c1                	mov    %eax,%ecx
f0127633:	c7 45 a4 00 10 00 00 	movl   $0x1000,-0x5c(%ebp)
f012763a:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f012763d:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0127642:	89 45 a0             	mov    %eax,-0x60(%ebp)
f0127645:	8b 45 a0             	mov    -0x60(%ebp),%eax
f0127648:	ba 00 00 00 00       	mov    $0x0,%edx
f012764d:	f7 75 a4             	divl   -0x5c(%ebp)
f0127650:	8b 45 a0             	mov    -0x60(%ebp),%eax
f0127653:	29 d0                	sub    %edx,%eax
f0127655:	89 c3                	mov    %eax,%ebx
f0127657:	c7 45 9c 00 10 00 00 	movl   $0x1000,-0x64(%ebp)
f012765e:	a0 bc 0e 6c f0       	mov    0xf06c0ebc,%al
f0127663:	0f b6 d0             	movzbl %al,%edx
f0127666:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0127669:	01 d0                	add    %edx,%eax
f012766b:	48                   	dec    %eax
f012766c:	89 45 98             	mov    %eax,-0x68(%ebp)
f012766f:	8b 45 98             	mov    -0x68(%ebp),%eax
f0127672:	ba 00 00 00 00       	mov    $0x0,%edx
f0127677:	f7 75 9c             	divl   -0x64(%ebp)
f012767a:	8b 45 98             	mov    -0x68(%ebp),%eax
f012767d:	29 d0                	sub    %edx,%eax
f012767f:	01 c3                	add    %eax,%ebx
f0127681:	c7 45 94 00 10 00 00 	movl   $0x1000,-0x6c(%ebp)
f0127688:	a0 bc 0e 6c f0       	mov    0xf06c0ebc,%al
f012768d:	0f b6 c0             	movzbl %al,%eax
f0127690:	c1 e0 04             	shl    $0x4,%eax
f0127693:	89 c2                	mov    %eax,%edx
f0127695:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0127698:	01 d0                	add    %edx,%eax
f012769a:	48                   	dec    %eax
f012769b:	89 45 90             	mov    %eax,-0x70(%ebp)
f012769e:	8b 45 90             	mov    -0x70(%ebp),%eax
f01276a1:	ba 00 00 00 00       	mov    $0x0,%edx
f01276a6:	f7 75 94             	divl   -0x6c(%ebp)
f01276a9:	8b 45 90             	mov    -0x70(%ebp),%eax
f01276ac:	29 d0                	sub    %edx,%eax
f01276ae:	01 d8                	add    %ebx,%eax
f01276b0:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
f01276b5:	39 c1                	cmp    %eax,%ecx
f01276b7:	74 17                	je     f01276d0 <test_kexpand+0x368>
f01276b9:	83 ec 04             	sub    $0x4,%esp
f01276bc:	68 5c a9 13 f0       	push   $0xf013a95c
f01276c1:	68 55 0b 00 00       	push   $0xb55
f01276c6:	68 76 a8 13 f0       	push   $0xf013a876
f01276cb:	e8 d6 8a fd ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01276d0:	e8 b7 c5 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f01276d5:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f01276d8:	74 17                	je     f01276f1 <test_kexpand+0x389>
f01276da:	83 ec 04             	sub    $0x4,%esp
f01276dd:	68 90 a8 13 f0       	push   $0xf013a890
f01276e2:	68 56 0b 00 00       	push   $0xb56
f01276e7:	68 76 a8 13 f0       	push   $0xf013a876
f01276ec:	e8 b5 8a fd ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f01276f1:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f01276f4:	e8 c5 4c fe ff       	call   f010c3be <sys_calculate_free_frames>
f01276f9:	29 c3                	sub    %eax,%ebx
f01276fb:	89 d8                	mov    %ebx,%eax
f01276fd:	83 f8 01             	cmp    $0x1,%eax
f0127700:	74 17                	je     f0127719 <test_kexpand+0x3b1>
f0127702:	83 ec 04             	sub    $0x4,%esp
f0127705:	68 f8 a8 13 f0       	push   $0xf013a8f8
f012770a:	68 57 0b 00 00       	push   $0xb57
f012770f:	68 76 a8 13 f0       	push   $0xf013a876
f0127714:	e8 8d 8a fd ff       	call   f01001a6 <_panic>
		lastIndices[2] = (2*kilo)/sizeof(char) - 1;
f0127719:	c7 85 c4 fe ff ff ff 	movl   $0x7ff,-0x13c(%ebp)
f0127720:	07 00 00 
		ptr = (char*)ptr_allocations[2];
f0127723:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f0127729:	89 45 8c             	mov    %eax,-0x74(%ebp)
		for (i = 0; i < lastIndices[2]; ++i)
f012772c:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0127733:	eb 0e                	jmp    f0127743 <test_kexpand+0x3db>
		{
			ptr[i] = 2 ;
f0127735:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0127738:	8b 45 8c             	mov    -0x74(%ebp),%eax
f012773b:	01 d0                	add    %edx,%eax
f012773d:	c6 00 02             	movb   $0x2,(%eax)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[2] = (2*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[2];
		for (i = 0; i < lastIndices[2]; ++i)
f0127740:	ff 45 f4             	incl   -0xc(%ebp)
f0127743:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f0127749:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012774c:	7f e7                	jg     f0127735 <test_kexpand+0x3cd>
		{
			ptr[i] = 2 ;
		}

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f012774e:	e8 6b 4c fe ff       	call   f010c3be <sys_calculate_free_frames>
f0127753:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0127756:	e8 31 c5 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f012775b:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[3] = kmalloc(2*kilo);
f012775e:	83 ec 0c             	sub    $0xc,%esp
f0127761:	68 00 08 00 00       	push   $0x800
f0127766:	e8 59 fe fd ff       	call   f01075c4 <kmalloc>
f012776b:	83 c4 10             	add    $0x10,%esp
f012776e:	89 85 78 fe ff ff    	mov    %eax,-0x188(%ebp)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0127774:	8b 85 78 fe ff ff    	mov    -0x188(%ebp),%eax
f012777a:	89 c1                	mov    %eax,%ecx
f012777c:	c7 45 88 00 10 00 00 	movl   $0x1000,-0x78(%ebp)
f0127783:	8b 45 88             	mov    -0x78(%ebp),%eax
f0127786:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012778b:	89 45 84             	mov    %eax,-0x7c(%ebp)
f012778e:	8b 45 84             	mov    -0x7c(%ebp),%eax
f0127791:	ba 00 00 00 00       	mov    $0x0,%edx
f0127796:	f7 75 88             	divl   -0x78(%ebp)
f0127799:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012779c:	29 d0                	sub    %edx,%eax
f012779e:	89 c3                	mov    %eax,%ebx
f01277a0:	c7 45 80 00 10 00 00 	movl   $0x1000,-0x80(%ebp)
f01277a7:	a0 bc 0e 6c f0       	mov    0xf06c0ebc,%al
f01277ac:	0f b6 d0             	movzbl %al,%edx
f01277af:	8b 45 80             	mov    -0x80(%ebp),%eax
f01277b2:	01 d0                	add    %edx,%eax
f01277b4:	48                   	dec    %eax
f01277b5:	89 85 7c ff ff ff    	mov    %eax,-0x84(%ebp)
f01277bb:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f01277c1:	ba 00 00 00 00       	mov    $0x0,%edx
f01277c6:	f7 75 80             	divl   -0x80(%ebp)
f01277c9:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f01277cf:	29 d0                	sub    %edx,%eax
f01277d1:	01 c3                	add    %eax,%ebx
f01277d3:	c7 85 78 ff ff ff 00 	movl   $0x1000,-0x88(%ebp)
f01277da:	10 00 00 
f01277dd:	a0 bc 0e 6c f0       	mov    0xf06c0ebc,%al
f01277e2:	0f b6 c0             	movzbl %al,%eax
f01277e5:	c1 e0 04             	shl    $0x4,%eax
f01277e8:	89 c2                	mov    %eax,%edx
f01277ea:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f01277f0:	01 d0                	add    %edx,%eax
f01277f2:	48                   	dec    %eax
f01277f3:	89 85 74 ff ff ff    	mov    %eax,-0x8c(%ebp)
f01277f9:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f01277ff:	ba 00 00 00 00       	mov    $0x0,%edx
f0127804:	f7 b5 78 ff ff ff    	divl   -0x88(%ebp)
f012780a:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f0127810:	29 d0                	sub    %edx,%eax
f0127812:	01 d8                	add    %ebx,%eax
f0127814:	2d 00 b0 bf 09       	sub    $0x9bfb000,%eax
f0127819:	39 c1                	cmp    %eax,%ecx
f012781b:	74 17                	je     f0127834 <test_kexpand+0x4cc>
f012781d:	83 ec 04             	sub    $0x4,%esp
f0127820:	68 5c a9 13 f0       	push   $0xf013a95c
f0127825:	68 63 0b 00 00       	push   $0xb63
f012782a:	68 76 a8 13 f0       	push   $0xf013a876
f012782f:	e8 72 89 fd ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0127834:	e8 53 c4 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f0127839:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f012783c:	74 17                	je     f0127855 <test_kexpand+0x4ed>
f012783e:	83 ec 04             	sub    $0x4,%esp
f0127841:	68 90 a8 13 f0       	push   $0xf013a890
f0127846:	68 64 0b 00 00       	push   $0xb64
f012784b:	68 76 a8 13 f0       	push   $0xf013a876
f0127850:	e8 51 89 fd ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f0127855:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f0127858:	e8 61 4b fe ff       	call   f010c3be <sys_calculate_free_frames>
f012785d:	29 c3                	sub    %eax,%ebx
f012785f:	89 d8                	mov    %ebx,%eax
f0127861:	83 f8 01             	cmp    $0x1,%eax
f0127864:	74 17                	je     f012787d <test_kexpand+0x515>
f0127866:	83 ec 04             	sub    $0x4,%esp
f0127869:	68 f8 a8 13 f0       	push   $0xf013a8f8
f012786e:	68 65 0b 00 00       	push   $0xb65
f0127873:	68 76 a8 13 f0       	push   $0xf013a876
f0127878:	e8 29 89 fd ff       	call   f01001a6 <_panic>
		lastIndices[3] = (2*kilo)/sizeof(char) - 1;
f012787d:	c7 85 c8 fe ff ff ff 	movl   $0x7ff,-0x138(%ebp)
f0127884:	07 00 00 
		ptr = (char*)ptr_allocations[3];
f0127887:	8b 85 78 fe ff ff    	mov    -0x188(%ebp),%eax
f012788d:	89 45 8c             	mov    %eax,-0x74(%ebp)
		for (i = 0; i < lastIndices[3]; ++i)
f0127890:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0127897:	eb 0e                	jmp    f01278a7 <test_kexpand+0x53f>
		{
			ptr[i] = 3 ;
f0127899:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012789c:	8b 45 8c             	mov    -0x74(%ebp),%eax
f012789f:	01 d0                	add    %edx,%eax
f01278a1:	c6 00 03             	movb   $0x3,(%eax)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[3] = (2*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[3];
		for (i = 0; i < lastIndices[3]; ++i)
f01278a4:	ff 45 f4             	incl   -0xc(%ebp)
f01278a7:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f01278ad:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01278b0:	7f e7                	jg     f0127899 <test_kexpand+0x531>
		{
			ptr[i] = 3 ;
		}

		//7 KB
		freeFrames = sys_calculate_free_frames() ;
f01278b2:	e8 07 4b fe ff       	call   f010c3be <sys_calculate_free_frames>
f01278b7:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01278ba:	e8 cd c3 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f01278bf:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[4] = kmalloc(7*kilo);
f01278c2:	83 ec 0c             	sub    $0xc,%esp
f01278c5:	68 00 1c 00 00       	push   $0x1c00
f01278ca:	e8 f5 fc fd ff       	call   f01075c4 <kmalloc>
f01278cf:	83 c4 10             	add    $0x10,%esp
f01278d2:	89 85 7c fe ff ff    	mov    %eax,-0x184(%ebp)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01278d8:	8b 85 7c fe ff ff    	mov    -0x184(%ebp),%eax
f01278de:	89 c1                	mov    %eax,%ecx
f01278e0:	c7 85 70 ff ff ff 00 	movl   $0x1000,-0x90(%ebp)
f01278e7:	10 00 00 
f01278ea:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f01278f0:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01278f5:	89 85 6c ff ff ff    	mov    %eax,-0x94(%ebp)
f01278fb:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f0127901:	ba 00 00 00 00       	mov    $0x0,%edx
f0127906:	f7 b5 70 ff ff ff    	divl   -0x90(%ebp)
f012790c:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f0127912:	29 d0                	sub    %edx,%eax
f0127914:	89 c3                	mov    %eax,%ebx
f0127916:	c7 85 68 ff ff ff 00 	movl   $0x1000,-0x98(%ebp)
f012791d:	10 00 00 
f0127920:	a0 bc 0e 6c f0       	mov    0xf06c0ebc,%al
f0127925:	0f b6 d0             	movzbl %al,%edx
f0127928:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f012792e:	01 d0                	add    %edx,%eax
f0127930:	48                   	dec    %eax
f0127931:	89 85 64 ff ff ff    	mov    %eax,-0x9c(%ebp)
f0127937:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f012793d:	ba 00 00 00 00       	mov    $0x0,%edx
f0127942:	f7 b5 68 ff ff ff    	divl   -0x98(%ebp)
f0127948:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f012794e:	29 d0                	sub    %edx,%eax
f0127950:	01 c3                	add    %eax,%ebx
f0127952:	c7 85 60 ff ff ff 00 	movl   $0x1000,-0xa0(%ebp)
f0127959:	10 00 00 
f012795c:	a0 bc 0e 6c f0       	mov    0xf06c0ebc,%al
f0127961:	0f b6 c0             	movzbl %al,%eax
f0127964:	c1 e0 04             	shl    $0x4,%eax
f0127967:	89 c2                	mov    %eax,%edx
f0127969:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f012796f:	01 d0                	add    %edx,%eax
f0127971:	48                   	dec    %eax
f0127972:	89 85 5c ff ff ff    	mov    %eax,-0xa4(%ebp)
f0127978:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f012797e:	ba 00 00 00 00       	mov    $0x0,%edx
f0127983:	f7 b5 60 ff ff ff    	divl   -0xa0(%ebp)
f0127989:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f012798f:	29 d0                	sub    %edx,%eax
f0127991:	01 d8                	add    %ebx,%eax
f0127993:	2d 00 a0 bf 09       	sub    $0x9bfa000,%eax
f0127998:	39 c1                	cmp    %eax,%ecx
f012799a:	74 17                	je     f01279b3 <test_kexpand+0x64b>
f012799c:	83 ec 04             	sub    $0x4,%esp
f012799f:	68 5c a9 13 f0       	push   $0xf013a95c
f01279a4:	68 71 0b 00 00       	push   $0xb71
f01279a9:	68 76 a8 13 f0       	push   $0xf013a876
f01279ae:	e8 f3 87 fd ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01279b3:	e8 d4 c2 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f01279b8:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f01279bb:	74 17                	je     f01279d4 <test_kexpand+0x66c>
f01279bd:	83 ec 04             	sub    $0x4,%esp
f01279c0:	68 90 a8 13 f0       	push   $0xf013a890
f01279c5:	68 72 0b 00 00       	push   $0xb72
f01279ca:	68 76 a8 13 f0       	push   $0xf013a876
f01279cf:	e8 d2 87 fd ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: pages are not loaded successfully into memory");
f01279d4:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f01279d7:	e8 e2 49 fe ff       	call   f010c3be <sys_calculate_free_frames>
f01279dc:	29 c3                	sub    %eax,%ebx
f01279de:	89 d8                	mov    %ebx,%eax
f01279e0:	83 f8 02             	cmp    $0x2,%eax
f01279e3:	74 17                	je     f01279fc <test_kexpand+0x694>
f01279e5:	83 ec 04             	sub    $0x4,%esp
f01279e8:	68 f8 a8 13 f0       	push   $0xf013a8f8
f01279ed:	68 73 0b 00 00       	push   $0xb73
f01279f2:	68 76 a8 13 f0       	push   $0xf013a876
f01279f7:	e8 aa 87 fd ff       	call   f01001a6 <_panic>
		lastIndices[4] = (7*kilo)/sizeof(char) - 1;
f01279fc:	c7 85 cc fe ff ff ff 	movl   $0x1bff,-0x134(%ebp)
f0127a03:	1b 00 00 
		ptr = (char*)ptr_allocations[4];
f0127a06:	8b 85 7c fe ff ff    	mov    -0x184(%ebp),%eax
f0127a0c:	89 45 8c             	mov    %eax,-0x74(%ebp)
		for (i = 0; i < lastIndices[4]; ++i)
f0127a0f:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0127a16:	eb 0e                	jmp    f0127a26 <test_kexpand+0x6be>
		{
			ptr[i] = 4 ;
f0127a18:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0127a1b:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0127a1e:	01 d0                	add    %edx,%eax
f0127a20:	c6 00 04             	movb   $0x4,(%eax)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[4] = (7*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[4];
		for (i = 0; i < lastIndices[4]; ++i)
f0127a23:	ff 45 f4             	incl   -0xc(%ebp)
f0127a26:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f0127a2c:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0127a2f:	7f e7                	jg     f0127a18 <test_kexpand+0x6b0>
		{
			ptr[i] = 4 ;
		}

		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f0127a31:	e8 88 49 fe ff       	call   f010c3be <sys_calculate_free_frames>
f0127a36:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0127a39:	e8 4e c2 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f0127a3e:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[5] = kmalloc(3*Mega-kilo);
f0127a41:	83 ec 0c             	sub    $0xc,%esp
f0127a44:	68 00 fc 2f 00       	push   $0x2ffc00
f0127a49:	e8 76 fb fd ff       	call   f01075c4 <kmalloc>
f0127a4e:	83 c4 10             	add    $0x10,%esp
f0127a51:	89 85 80 fe ff ff    	mov    %eax,-0x180(%ebp)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo) ) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0127a57:	8b 85 80 fe ff ff    	mov    -0x180(%ebp),%eax
f0127a5d:	89 c1                	mov    %eax,%ecx
f0127a5f:	c7 85 58 ff ff ff 00 	movl   $0x1000,-0xa8(%ebp)
f0127a66:	10 00 00 
f0127a69:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f0127a6f:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0127a74:	89 85 54 ff ff ff    	mov    %eax,-0xac(%ebp)
f0127a7a:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f0127a80:	ba 00 00 00 00       	mov    $0x0,%edx
f0127a85:	f7 b5 58 ff ff ff    	divl   -0xa8(%ebp)
f0127a8b:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f0127a91:	29 d0                	sub    %edx,%eax
f0127a93:	89 c3                	mov    %eax,%ebx
f0127a95:	c7 85 50 ff ff ff 00 	movl   $0x1000,-0xb0(%ebp)
f0127a9c:	10 00 00 
f0127a9f:	a0 bc 0e 6c f0       	mov    0xf06c0ebc,%al
f0127aa4:	0f b6 d0             	movzbl %al,%edx
f0127aa7:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f0127aad:	01 d0                	add    %edx,%eax
f0127aaf:	48                   	dec    %eax
f0127ab0:	89 85 4c ff ff ff    	mov    %eax,-0xb4(%ebp)
f0127ab6:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0127abc:	ba 00 00 00 00       	mov    $0x0,%edx
f0127ac1:	f7 b5 50 ff ff ff    	divl   -0xb0(%ebp)
f0127ac7:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0127acd:	29 d0                	sub    %edx,%eax
f0127acf:	01 c3                	add    %eax,%ebx
f0127ad1:	c7 85 48 ff ff ff 00 	movl   $0x1000,-0xb8(%ebp)
f0127ad8:	10 00 00 
f0127adb:	a0 bc 0e 6c f0       	mov    0xf06c0ebc,%al
f0127ae0:	0f b6 c0             	movzbl %al,%eax
f0127ae3:	c1 e0 04             	shl    $0x4,%eax
f0127ae6:	89 c2                	mov    %eax,%edx
f0127ae8:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f0127aee:	01 d0                	add    %edx,%eax
f0127af0:	48                   	dec    %eax
f0127af1:	89 85 44 ff ff ff    	mov    %eax,-0xbc(%ebp)
f0127af7:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0127afd:	ba 00 00 00 00       	mov    $0x0,%edx
f0127b02:	f7 b5 48 ff ff ff    	divl   -0xb8(%ebp)
f0127b08:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0127b0e:	29 d0                	sub    %edx,%eax
f0127b10:	01 d8                	add    %ebx,%eax
f0127b12:	2d 00 80 bf 09       	sub    $0x9bf8000,%eax
f0127b17:	39 c1                	cmp    %eax,%ecx
f0127b19:	74 17                	je     f0127b32 <test_kexpand+0x7ca>
f0127b1b:	83 ec 04             	sub    $0x4,%esp
f0127b1e:	68 5c a9 13 f0       	push   $0xf013a95c
f0127b23:	68 7f 0b 00 00       	push   $0xb7f
f0127b28:	68 76 a8 13 f0       	push   $0xf013a876
f0127b2d:	e8 74 86 fd ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0127b32:	e8 55 c1 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f0127b37:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0127b3a:	74 17                	je     f0127b53 <test_kexpand+0x7eb>
f0127b3c:	83 ec 04             	sub    $0x4,%esp
f0127b3f:	68 90 a8 13 f0       	push   $0xf013a890
f0127b44:	68 80 0b 00 00       	push   $0xb80
f0127b49:	68 76 a8 13 f0       	push   $0xf013a876
f0127b4e:	e8 53 86 fd ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
f0127b53:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f0127b56:	e8 63 48 fe ff       	call   f010c3be <sys_calculate_free_frames>
f0127b5b:	29 c3                	sub    %eax,%ebx
f0127b5d:	89 d8                	mov    %ebx,%eax
f0127b5f:	3d 00 03 00 00       	cmp    $0x300,%eax
f0127b64:	74 17                	je     f0127b7d <test_kexpand+0x815>
f0127b66:	83 ec 04             	sub    $0x4,%esp
f0127b69:	68 f8 a8 13 f0       	push   $0xf013a8f8
f0127b6e:	68 81 0b 00 00       	push   $0xb81
f0127b73:	68 76 a8 13 f0       	push   $0xf013a876
f0127b78:	e8 29 86 fd ff       	call   f01001a6 <_panic>
		lastIndices[5] = (3*Mega-kilo)/sizeof(char) - 1;
f0127b7d:	c7 85 d0 fe ff ff ff 	movl   $0x2ffbff,-0x130(%ebp)
f0127b84:	fb 2f 00 
		ptr = (char*)ptr_allocations[5];
f0127b87:	8b 85 80 fe ff ff    	mov    -0x180(%ebp),%eax
f0127b8d:	89 45 8c             	mov    %eax,-0x74(%ebp)
		for (i = 0; i < lastIndices[5]; ++i)
f0127b90:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0127b97:	eb 0e                	jmp    f0127ba7 <test_kexpand+0x83f>
		{
			ptr[i] = 5 ;
f0127b99:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0127b9c:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0127b9f:	01 d0                	add    %edx,%eax
f0127ba1:	c6 00 05             	movb   $0x5,(%eax)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo) ) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[5] = (3*Mega-kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[5];
		for (i = 0; i < lastIndices[5]; ++i)
f0127ba4:	ff 45 f4             	incl   -0xc(%ebp)
f0127ba7:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f0127bad:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0127bb0:	7f e7                	jg     f0127b99 <test_kexpand+0x831>
		{
			ptr[i] = 5 ;
		}

		//6 MB
		freeFrames = sys_calculate_free_frames() ;
f0127bb2:	e8 07 48 fe ff       	call   f010c3be <sys_calculate_free_frames>
f0127bb7:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0127bba:	e8 cd c0 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f0127bbf:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[6] = kmalloc(6*Mega);
f0127bc2:	83 ec 0c             	sub    $0xc,%esp
f0127bc5:	68 00 00 60 00       	push   $0x600000
f0127bca:	e8 f5 f9 fd ff       	call   f01075c4 <kmalloc>
f0127bcf:	83 c4 10             	add    $0x10,%esp
f0127bd2:	89 85 84 fe ff ff    	mov    %eax,-0x17c(%ebp)
		if ((uint32) ptr_allocations[6] != (ACTUAL_START + 7*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0127bd8:	8b 85 84 fe ff ff    	mov    -0x17c(%ebp),%eax
f0127bde:	89 c1                	mov    %eax,%ecx
f0127be0:	c7 85 40 ff ff ff 00 	movl   $0x1000,-0xc0(%ebp)
f0127be7:	10 00 00 
f0127bea:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0127bf0:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0127bf5:	89 85 3c ff ff ff    	mov    %eax,-0xc4(%ebp)
f0127bfb:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f0127c01:	ba 00 00 00 00       	mov    $0x0,%edx
f0127c06:	f7 b5 40 ff ff ff    	divl   -0xc0(%ebp)
f0127c0c:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f0127c12:	29 d0                	sub    %edx,%eax
f0127c14:	89 c3                	mov    %eax,%ebx
f0127c16:	c7 85 38 ff ff ff 00 	movl   $0x1000,-0xc8(%ebp)
f0127c1d:	10 00 00 
f0127c20:	a0 bc 0e 6c f0       	mov    0xf06c0ebc,%al
f0127c25:	0f b6 d0             	movzbl %al,%edx
f0127c28:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f0127c2e:	01 d0                	add    %edx,%eax
f0127c30:	48                   	dec    %eax
f0127c31:	89 85 34 ff ff ff    	mov    %eax,-0xcc(%ebp)
f0127c37:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f0127c3d:	ba 00 00 00 00       	mov    $0x0,%edx
f0127c42:	f7 b5 38 ff ff ff    	divl   -0xc8(%ebp)
f0127c48:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f0127c4e:	29 d0                	sub    %edx,%eax
f0127c50:	01 c3                	add    %eax,%ebx
f0127c52:	c7 85 30 ff ff ff 00 	movl   $0x1000,-0xd0(%ebp)
f0127c59:	10 00 00 
f0127c5c:	a0 bc 0e 6c f0       	mov    0xf06c0ebc,%al
f0127c61:	0f b6 c0             	movzbl %al,%eax
f0127c64:	c1 e0 04             	shl    $0x4,%eax
f0127c67:	89 c2                	mov    %eax,%edx
f0127c69:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f0127c6f:	01 d0                	add    %edx,%eax
f0127c71:	48                   	dec    %eax
f0127c72:	89 85 2c ff ff ff    	mov    %eax,-0xd4(%ebp)
f0127c78:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f0127c7e:	ba 00 00 00 00       	mov    $0x0,%edx
f0127c83:	f7 b5 30 ff ff ff    	divl   -0xd0(%ebp)
f0127c89:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f0127c8f:	29 d0                	sub    %edx,%eax
f0127c91:	01 d8                	add    %ebx,%eax
f0127c93:	2d 00 80 8f 09       	sub    $0x98f8000,%eax
f0127c98:	39 c1                	cmp    %eax,%ecx
f0127c9a:	74 17                	je     f0127cb3 <test_kexpand+0x94b>
f0127c9c:	83 ec 04             	sub    $0x4,%esp
f0127c9f:	68 5c a9 13 f0       	push   $0xf013a95c
f0127ca4:	68 8d 0b 00 00       	push   $0xb8d
f0127ca9:	68 76 a8 13 f0       	push   $0xf013a876
f0127cae:	e8 f3 84 fd ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0127cb3:	e8 d4 bf fd ff       	call   f0103c8c <pf_calculate_free_frames>
f0127cb8:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0127cbb:	74 17                	je     f0127cd4 <test_kexpand+0x96c>
f0127cbd:	83 ec 04             	sub    $0x4,%esp
f0127cc0:	68 90 a8 13 f0       	push   $0xf013a890
f0127cc5:	68 8e 0b 00 00       	push   $0xb8e
f0127cca:	68 76 a8 13 f0       	push   $0xf013a876
f0127ccf:	e8 d2 84 fd ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1536) panic("Wrong allocation: pages are not loaded successfully into memory");
f0127cd4:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f0127cd7:	e8 e2 46 fe ff       	call   f010c3be <sys_calculate_free_frames>
f0127cdc:	29 c3                	sub    %eax,%ebx
f0127cde:	89 d8                	mov    %ebx,%eax
f0127ce0:	3d 00 06 00 00       	cmp    $0x600,%eax
f0127ce5:	74 17                	je     f0127cfe <test_kexpand+0x996>
f0127ce7:	83 ec 04             	sub    $0x4,%esp
f0127cea:	68 f8 a8 13 f0       	push   $0xf013a8f8
f0127cef:	68 8f 0b 00 00       	push   $0xb8f
f0127cf4:	68 76 a8 13 f0       	push   $0xf013a876
f0127cf9:	e8 a8 84 fd ff       	call   f01001a6 <_panic>
		lastIndices[6] = (6*Mega)/sizeof(uint32) - 1;
f0127cfe:	c7 85 d4 fe ff ff ff 	movl   $0x17ffff,-0x12c(%ebp)
f0127d05:	ff 17 00 
		arr = (uint32*)ptr_allocations[6];
f0127d08:	8b 85 84 fe ff ff    	mov    -0x17c(%ebp),%eax
f0127d0e:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%ebp)
		for (i = 0; i <= lastIndices[6]; ++i)
f0127d14:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0127d1b:	eb 1a                	jmp    f0127d37 <test_kexpand+0x9cf>
		{
			arr[i] = i ;
f0127d1d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0127d20:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0127d27:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f0127d2d:	01 c2                	add    %eax,%edx
f0127d2f:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0127d32:	89 02                	mov    %eax,(%edx)
		if ((uint32) ptr_allocations[6] != (ACTUAL_START + 7*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 1536) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[6] = (6*Mega)/sizeof(uint32) - 1;
		arr = (uint32*)ptr_allocations[6];
		for (i = 0; i <= lastIndices[6]; ++i)
f0127d34:	ff 45 f4             	incl   -0xc(%ebp)
f0127d37:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f0127d3d:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0127d40:	7d db                	jge    f0127d1d <test_kexpand+0x9b5>
			arr[i] = i ;
		}
	}

	//Expand last allocated variable to 7 MB instead of 6 MB
	int newLastIndex = (7*Mega)/sizeof(uint32) - 1;
f0127d42:	c7 85 24 ff ff ff ff 	movl   $0x1bffff,-0xdc(%ebp)
f0127d49:	ff 1b 00 
	{
		freeFrames = sys_calculate_free_frames() ;
f0127d4c:	e8 6d 46 fe ff       	call   f010c3be <sys_calculate_free_frames>
f0127d51:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0127d54:	e8 33 bf fd ff       	call   f0103c8c <pf_calculate_free_frames>
f0127d59:	89 45 d8             	mov    %eax,-0x28(%ebp)

		kexpand(7*Mega) ;
f0127d5c:	83 ec 0c             	sub    $0xc,%esp
f0127d5f:	68 00 00 70 00       	push   $0x700000
f0127d64:	e8 09 f9 fd ff       	call   f0107672 <kexpand>
f0127d69:	83 c4 10             	add    $0x10,%esp

		assert(pf_calculate_free_frames() - freeDiskFrames == 0) ;
f0127d6c:	e8 1b bf fd ff       	call   f0103c8c <pf_calculate_free_frames>
f0127d71:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0127d74:	74 19                	je     f0127d8f <test_kexpand+0xa27>
f0127d76:	68 10 b6 13 f0       	push   $0xf013b610
f0127d7b:	68 41 b6 13 f0       	push   $0xf013b641
f0127d80:	68 a0 0b 00 00       	push   $0xba0
f0127d85:	68 76 a8 13 f0       	push   $0xf013a876
f0127d8a:	e8 17 84 fd ff       	call   f01001a6 <_panic>
		assert(freeFrames - sys_calculate_free_frames() == 256) ;
f0127d8f:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f0127d92:	e8 27 46 fe ff       	call   f010c3be <sys_calculate_free_frames>
f0127d97:	29 c3                	sub    %eax,%ebx
f0127d99:	89 d8                	mov    %ebx,%eax
f0127d9b:	3d 00 01 00 00       	cmp    $0x100,%eax
f0127da0:	74 19                	je     f0127dbb <test_kexpand+0xa53>
f0127da2:	68 58 b6 13 f0       	push   $0xf013b658
f0127da7:	68 41 b6 13 f0       	push   $0xf013b641
f0127dac:	68 a1 0b 00 00       	push   $0xba1
f0127db1:	68 76 a8 13 f0       	push   $0xf013a876
f0127db6:	e8 eb 83 fd ff       	call   f01001a6 <_panic>

		for (i = lastIndices[6]; i < newLastIndex ; ++i)
f0127dbb:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f0127dc1:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0127dc4:	eb 1a                	jmp    f0127de0 <test_kexpand+0xa78>
		{
			arr[i] = i ;
f0127dc6:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0127dc9:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0127dd0:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f0127dd6:	01 c2                	add    %eax,%edx
f0127dd8:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0127ddb:	89 02                	mov    %eax,(%edx)
		kexpand(7*Mega) ;

		assert(pf_calculate_free_frames() - freeDiskFrames == 0) ;
		assert(freeFrames - sys_calculate_free_frames() == 256) ;

		for (i = lastIndices[6]; i < newLastIndex ; ++i)
f0127ddd:	ff 45 f4             	incl   -0xc(%ebp)
f0127de0:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0127de3:	3b 85 24 ff ff ff    	cmp    -0xdc(%ebp),%eax
f0127de9:	7c db                	jl     f0127dc6 <test_kexpand+0xa5e>
		}
	}

	//Access elements after expansion
	{
		for (i = 0; i < newLastIndex ; ++i)
f0127deb:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0127df2:	eb 37                	jmp    f0127e2b <test_kexpand+0xac3>
		{
			assert(arr[i] ==i);
f0127df4:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0127df7:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0127dfe:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f0127e04:	01 d0                	add    %edx,%eax
f0127e06:	8b 10                	mov    (%eax),%edx
f0127e08:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0127e0b:	39 c2                	cmp    %eax,%edx
f0127e0d:	74 19                	je     f0127e28 <test_kexpand+0xac0>
f0127e0f:	68 88 b6 13 f0       	push   $0xf013b688
f0127e14:	68 41 b6 13 f0       	push   $0xf013b641
f0127e19:	68 ad 0b 00 00       	push   $0xbad
f0127e1e:	68 76 a8 13 f0       	push   $0xf013a876
f0127e23:	e8 7e 83 fd ff       	call   f01001a6 <_panic>
		}
	}

	//Access elements after expansion
	{
		for (i = 0; i < newLastIndex ; ++i)
f0127e28:	ff 45 f4             	incl   -0xc(%ebp)
f0127e2b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0127e2e:	3b 85 24 ff ff ff    	cmp    -0xdc(%ebp),%eax
f0127e34:	7c be                	jl     f0127df4 <test_kexpand+0xa8c>
		}
	}

	//Expand it again to 10 MB instead of 7 MB
	{
		freeFrames = sys_calculate_free_frames() ;
f0127e36:	e8 83 45 fe ff       	call   f010c3be <sys_calculate_free_frames>
f0127e3b:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0127e3e:	e8 49 be fd ff       	call   f0103c8c <pf_calculate_free_frames>
f0127e43:	89 45 d8             	mov    %eax,-0x28(%ebp)

		kexpand(10*Mega) ;
f0127e46:	83 ec 0c             	sub    $0xc,%esp
f0127e49:	68 00 00 a0 00       	push   $0xa00000
f0127e4e:	e8 1f f8 fd ff       	call   f0107672 <kexpand>
f0127e53:	83 c4 10             	add    $0x10,%esp

		assert(pf_calculate_free_frames() - freeDiskFrames == 0) ;
f0127e56:	e8 31 be fd ff       	call   f0103c8c <pf_calculate_free_frames>
f0127e5b:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0127e5e:	74 19                	je     f0127e79 <test_kexpand+0xb11>
f0127e60:	68 10 b6 13 f0       	push   $0xf013b610
f0127e65:	68 41 b6 13 f0       	push   $0xf013b641
f0127e6a:	68 b8 0b 00 00       	push   $0xbb8
f0127e6f:	68 76 a8 13 f0       	push   $0xf013a876
f0127e74:	e8 2d 83 fd ff       	call   f01001a6 <_panic>
		assert(freeFrames - sys_calculate_free_frames() == 768) ;
f0127e79:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f0127e7c:	e8 3d 45 fe ff       	call   f010c3be <sys_calculate_free_frames>
f0127e81:	29 c3                	sub    %eax,%ebx
f0127e83:	89 d8                	mov    %ebx,%eax
f0127e85:	3d 00 03 00 00       	cmp    $0x300,%eax
f0127e8a:	74 19                	je     f0127ea5 <test_kexpand+0xb3d>
f0127e8c:	68 94 b6 13 f0       	push   $0xf013b694
f0127e91:	68 41 b6 13 f0       	push   $0xf013b641
f0127e96:	68 b9 0b 00 00       	push   $0xbb9
f0127e9b:	68 76 a8 13 f0       	push   $0xf013a876
f0127ea0:	e8 01 83 fd ff       	call   f01001a6 <_panic>


	//Allocate after expanding last var
	{
		//4 MB
		freeFrames = sys_calculate_free_frames() ;
f0127ea5:	e8 14 45 fe ff       	call   f010c3be <sys_calculate_free_frames>
f0127eaa:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0127ead:	e8 da bd fd ff       	call   f0103c8c <pf_calculate_free_frames>
f0127eb2:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[7] = kmalloc(4*Mega);
f0127eb5:	83 ec 0c             	sub    $0xc,%esp
f0127eb8:	68 00 00 40 00       	push   $0x400000
f0127ebd:	e8 02 f7 fd ff       	call   f01075c4 <kmalloc>
f0127ec2:	83 c4 10             	add    $0x10,%esp
f0127ec5:	89 85 88 fe ff ff    	mov    %eax,-0x178(%ebp)

		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 7*Mega + 16*kilo + 10*Mega)) panic("Wrong start address after kexpand()... ");
f0127ecb:	8b 85 88 fe ff ff    	mov    -0x178(%ebp),%eax
f0127ed1:	89 c1                	mov    %eax,%ecx
f0127ed3:	c7 85 20 ff ff ff 00 	movl   $0x1000,-0xe0(%ebp)
f0127eda:	10 00 00 
f0127edd:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0127ee3:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0127ee8:	89 85 1c ff ff ff    	mov    %eax,-0xe4(%ebp)
f0127eee:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f0127ef4:	ba 00 00 00 00       	mov    $0x0,%edx
f0127ef9:	f7 b5 20 ff ff ff    	divl   -0xe0(%ebp)
f0127eff:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f0127f05:	29 d0                	sub    %edx,%eax
f0127f07:	89 c3                	mov    %eax,%ebx
f0127f09:	c7 85 18 ff ff ff 00 	movl   $0x1000,-0xe8(%ebp)
f0127f10:	10 00 00 
f0127f13:	a0 bc 0e 6c f0       	mov    0xf06c0ebc,%al
f0127f18:	0f b6 d0             	movzbl %al,%edx
f0127f1b:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f0127f21:	01 d0                	add    %edx,%eax
f0127f23:	48                   	dec    %eax
f0127f24:	89 85 14 ff ff ff    	mov    %eax,-0xec(%ebp)
f0127f2a:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f0127f30:	ba 00 00 00 00       	mov    $0x0,%edx
f0127f35:	f7 b5 18 ff ff ff    	divl   -0xe8(%ebp)
f0127f3b:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f0127f41:	29 d0                	sub    %edx,%eax
f0127f43:	01 c3                	add    %eax,%ebx
f0127f45:	c7 85 10 ff ff ff 00 	movl   $0x1000,-0xf0(%ebp)
f0127f4c:	10 00 00 
f0127f4f:	a0 bc 0e 6c f0       	mov    0xf06c0ebc,%al
f0127f54:	0f b6 c0             	movzbl %al,%eax
f0127f57:	c1 e0 04             	shl    $0x4,%eax
f0127f5a:	89 c2                	mov    %eax,%edx
f0127f5c:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f0127f62:	01 d0                	add    %edx,%eax
f0127f64:	48                   	dec    %eax
f0127f65:	89 85 0c ff ff ff    	mov    %eax,-0xf4(%ebp)
f0127f6b:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f0127f71:	ba 00 00 00 00       	mov    $0x0,%edx
f0127f76:	f7 b5 10 ff ff ff    	divl   -0xf0(%ebp)
f0127f7c:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f0127f82:	29 d0                	sub    %edx,%eax
f0127f84:	01 d8                	add    %ebx,%eax
f0127f86:	2d 00 80 ef 08       	sub    $0x8ef8000,%eax
f0127f8b:	39 c1                	cmp    %eax,%ecx
f0127f8d:	74 17                	je     f0127fa6 <test_kexpand+0xc3e>
f0127f8f:	83 ec 04             	sub    $0x4,%esp
f0127f92:	68 c4 b6 13 f0       	push   $0xf013b6c4
f0127f97:	68 c4 0b 00 00       	push   $0xbc4
f0127f9c:	68 76 a8 13 f0       	push   $0xf013a876
f0127fa1:	e8 00 82 fd ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0127fa6:	e8 e1 bc fd ff       	call   f0103c8c <pf_calculate_free_frames>
f0127fab:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0127fae:	74 17                	je     f0127fc7 <test_kexpand+0xc5f>
f0127fb0:	83 ec 04             	sub    $0x4,%esp
f0127fb3:	68 90 a8 13 f0       	push   $0xf013a890
f0127fb8:	68 c5 0b 00 00       	push   $0xbc5
f0127fbd:	68 76 a8 13 f0       	push   $0xf013a876
f0127fc2:	e8 df 81 fd ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 4*Mega/PAGE_SIZE) panic("Wrong allocation: pages are not loaded successfully into memory");
f0127fc7:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f0127fca:	e8 ef 43 fe ff       	call   f010c3be <sys_calculate_free_frames>
f0127fcf:	29 c3                	sub    %eax,%ebx
f0127fd1:	89 d8                	mov    %ebx,%eax
f0127fd3:	3d 00 04 00 00       	cmp    $0x400,%eax
f0127fd8:	74 17                	je     f0127ff1 <test_kexpand+0xc89>
f0127fda:	83 ec 04             	sub    $0x4,%esp
f0127fdd:	68 f8 a8 13 f0       	push   $0xf013a8f8
f0127fe2:	68 c6 0b 00 00       	push   $0xbc6
f0127fe7:	68 76 a8 13 f0       	push   $0xf013a876
f0127fec:	e8 b5 81 fd ff       	call   f01001a6 <_panic>
	}

	//kfree the expanded variable
	{
		//kfree 10 MB (expanded)
		freeFrames = sys_calculate_free_frames() ;
f0127ff1:	e8 c8 43 fe ff       	call   f010c3be <sys_calculate_free_frames>
f0127ff6:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0127ff9:	e8 8e bc fd ff       	call   f0103c8c <pf_calculate_free_frames>
f0127ffe:	89 45 d8             	mov    %eax,-0x28(%ebp)
		kfree(ptr_allocations[6]);
f0128001:	8b 85 84 fe ff ff    	mov    -0x17c(%ebp),%eax
f0128007:	83 ec 0c             	sub    $0xc,%esp
f012800a:	50                   	push   %eax
f012800b:	e8 ce f5 fd ff       	call   f01075de <kfree>
f0128010:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0128013:	e8 74 bc fd ff       	call   f0103c8c <pf_calculate_free_frames>
f0128018:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f012801b:	74 17                	je     f0128034 <test_kexpand+0xccc>
f012801d:	83 ec 04             	sub    $0x4,%esp
f0128020:	68 90 a8 13 f0       	push   $0xf013a890
f0128025:	68 cf 0b 00 00       	push   $0xbcf
f012802a:	68 76 a8 13 f0       	push   $0xf013a876
f012802f:	e8 72 81 fd ff       	call   f01001a6 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 10*Mega/PAGE_SIZE) panic("Wrong kfree: attempt to kfree a non-existing ptr. It should do nothing");
f0128034:	e8 85 43 fe ff       	call   f010c3be <sys_calculate_free_frames>
f0128039:	89 c2                	mov    %eax,%edx
f012803b:	8b 45 dc             	mov    -0x24(%ebp),%eax
f012803e:	29 c2                	sub    %eax,%edx
f0128040:	89 d0                	mov    %edx,%eax
f0128042:	3d 00 0a 00 00       	cmp    $0xa00,%eax
f0128047:	74 17                	je     f0128060 <test_kexpand+0xcf8>
f0128049:	83 ec 04             	sub    $0x4,%esp
f012804c:	68 28 b1 13 f0       	push   $0xf013b128
f0128051:	68 d0 0b 00 00       	push   $0xbd0
f0128056:	68 76 a8 13 f0       	push   $0xf013a876
f012805b:	e8 46 81 fd ff       	call   f01001a6 <_panic>
	}

	//Expand last allocated variable to 4 MB + 20 kilo instead of 4 MB
	{
		freeFrames = sys_calculate_free_frames() ;
f0128060:	e8 59 43 fe ff       	call   f010c3be <sys_calculate_free_frames>
f0128065:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0128068:	e8 1f bc fd ff       	call   f0103c8c <pf_calculate_free_frames>
f012806d:	89 45 d8             	mov    %eax,-0x28(%ebp)

		kexpand(4*Mega + 20*kilo) ;
f0128070:	83 ec 0c             	sub    $0xc,%esp
f0128073:	68 00 50 40 00       	push   $0x405000
f0128078:	e8 f5 f5 fd ff       	call   f0107672 <kexpand>
f012807d:	83 c4 10             	add    $0x10,%esp

		assert(pf_calculate_free_frames() - freeDiskFrames == 0) ;
f0128080:	e8 07 bc fd ff       	call   f0103c8c <pf_calculate_free_frames>
f0128085:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0128088:	74 19                	je     f01280a3 <test_kexpand+0xd3b>
f012808a:	68 10 b6 13 f0       	push   $0xf013b610
f012808f:	68 41 b6 13 f0       	push   $0xf013b641
f0128094:	68 da 0b 00 00       	push   $0xbda
f0128099:	68 76 a8 13 f0       	push   $0xf013a876
f012809e:	e8 03 81 fd ff       	call   f01001a6 <_panic>
		assert(freeFrames - sys_calculate_free_frames()  == 5) ;
f01280a3:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f01280a6:	e8 13 43 fe ff       	call   f010c3be <sys_calculate_free_frames>
f01280ab:	29 c3                	sub    %eax,%ebx
f01280ad:	89 d8                	mov    %ebx,%eax
f01280af:	83 f8 05             	cmp    $0x5,%eax
f01280b2:	74 19                	je     f01280cd <test_kexpand+0xd65>
f01280b4:	68 ec b6 13 f0       	push   $0xf013b6ec
f01280b9:	68 41 b6 13 f0       	push   $0xf013b641
f01280be:	68 db 0b 00 00       	push   $0xbdb
f01280c3:	68 76 a8 13 f0       	push   $0xf013a876
f01280c8:	e8 d9 80 fd ff       	call   f01001a6 <_panic>
	}

	cprintf("\nCongratulations!! your modification is run successfully.\n");
f01280cd:	83 ec 0c             	sub    $0xc,%esp
f01280d0:	68 d4 b5 13 f0       	push   $0xf013b5d4
f01280d5:	e8 53 8b fd ff       	call   f0100c2d <cprintf>
f01280da:	83 c4 10             	add    $0x10,%esp

	return 1;
f01280dd:	b8 01 00 00 00       	mov    $0x1,%eax
}
f01280e2:	8d 65 f8             	lea    -0x8(%ebp),%esp
f01280e5:	5b                   	pop    %ebx
f01280e6:	5f                   	pop    %edi
f01280e7:	5d                   	pop    %ebp
f01280e8:	c3                   	ret    

f01280e9 <test_kshrink>:

extern void kshrink(uint32 newSize) ;

int test_kshrink()
{
f01280e9:	55                   	push   %ebp
f01280ea:	89 e5                	mov    %esp,%ebp
f01280ec:	57                   	push   %edi
f01280ed:	53                   	push   %ebx
f01280ee:	81 ec b0 01 00 00    	sub    $0x1b0,%esp
	char minByte = 1<<7;
f01280f4:	c6 45 f3 80          	movb   $0x80,-0xd(%ebp)
	char maxByte = 0x7F;
f01280f8:	c6 45 f2 7f          	movb   $0x7f,-0xe(%ebp)
	short minShort = 1<<15 ;
f01280fc:	66 c7 45 f0 00 80    	movw   $0x8000,-0x10(%ebp)
	short maxShort = 0x7FFF;
f0128102:	66 c7 45 ee ff 7f    	movw   $0x7fff,-0x12(%ebp)
	int minInt = 1<<31 ;
f0128108:	c7 45 e8 00 00 00 80 	movl   $0x80000000,-0x18(%ebp)
	int maxInt = 0x7FFFFFFF;
f012810f:	c7 45 e4 ff ff ff 7f 	movl   $0x7fffffff,-0x1c(%ebp)
	char *byteArr, *byteArr2 ;
	short *shortArr, *shortArr2 ;
	int *intArr;
	struct MyStruct *structArr ;
	int lastIndexOfByte, lastIndexOfByte2, lastIndexOfShort, lastIndexOfShort2, lastIndexOfInt, lastIndexOfStruct;
	int start_freeFrames = sys_calculate_free_frames() ;
f0128116:	e8 a3 42 fe ff       	call   f010c3be <sys_calculate_free_frames>
f012811b:	89 45 e0             	mov    %eax,-0x20(%ebp)

	//malloc some spaces
	int i, freeFrames, freeDiskFrames ;
	char* ptr;
	int lastIndices[20] = {0};
f012811e:	8d 95 a4 fe ff ff    	lea    -0x15c(%ebp),%edx
f0128124:	b9 14 00 00 00       	mov    $0x14,%ecx
f0128129:	b8 00 00 00 00       	mov    $0x0,%eax
f012812e:	89 d7                	mov    %edx,%edi
f0128130:	f3 ab                	rep stos %eax,%es:(%edi)

	uint32 *arr;
	void* ptr_allocations[20] = {0};
f0128132:	8d 95 54 fe ff ff    	lea    -0x1ac(%ebp),%edx
f0128138:	b9 14 00 00 00       	mov    $0x14,%ecx
f012813d:	b8 00 00 00 00       	mov    $0x0,%eax
f0128142:	89 d7                	mov    %edx,%edi
f0128144:	f3 ab                	rep stos %eax,%es:(%edi)
	{
		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f0128146:	e8 73 42 fe ff       	call   f010c3be <sys_calculate_free_frames>
f012814b:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012814e:	e8 39 bb fd ff       	call   f0103c8c <pf_calculate_free_frames>
f0128153:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[0] = kmalloc(2*Mega-kilo);
f0128156:	83 ec 0c             	sub    $0xc,%esp
f0128159:	68 00 fc 1f 00       	push   $0x1ffc00
f012815e:	e8 61 f4 fd ff       	call   f01075c4 <kmalloc>
f0128163:	83 c4 10             	add    $0x10,%esp
f0128166:	89 85 54 fe ff ff    	mov    %eax,-0x1ac(%ebp)
		if ((uint32) ptr_allocations[0] !=  (ACTUAL_START)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f012816c:	8b 85 54 fe ff ff    	mov    -0x1ac(%ebp),%eax
f0128172:	89 c1                	mov    %eax,%ecx
f0128174:	c7 45 d4 00 10 00 00 	movl   $0x1000,-0x2c(%ebp)
f012817b:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f012817e:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0128183:	89 45 d0             	mov    %eax,-0x30(%ebp)
f0128186:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0128189:	ba 00 00 00 00       	mov    $0x0,%edx
f012818e:	f7 75 d4             	divl   -0x2c(%ebp)
f0128191:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0128194:	29 d0                	sub    %edx,%eax
f0128196:	89 c3                	mov    %eax,%ebx
f0128198:	c7 45 cc 00 10 00 00 	movl   $0x1000,-0x34(%ebp)
f012819f:	a0 bc 0e 6c f0       	mov    0xf06c0ebc,%al
f01281a4:	0f b6 d0             	movzbl %al,%edx
f01281a7:	8b 45 cc             	mov    -0x34(%ebp),%eax
f01281aa:	01 d0                	add    %edx,%eax
f01281ac:	48                   	dec    %eax
f01281ad:	89 45 c8             	mov    %eax,-0x38(%ebp)
f01281b0:	8b 45 c8             	mov    -0x38(%ebp),%eax
f01281b3:	ba 00 00 00 00       	mov    $0x0,%edx
f01281b8:	f7 75 cc             	divl   -0x34(%ebp)
f01281bb:	8b 45 c8             	mov    -0x38(%ebp),%eax
f01281be:	29 d0                	sub    %edx,%eax
f01281c0:	01 c3                	add    %eax,%ebx
f01281c2:	c7 45 c4 00 10 00 00 	movl   $0x1000,-0x3c(%ebp)
f01281c9:	a0 bc 0e 6c f0       	mov    0xf06c0ebc,%al
f01281ce:	0f b6 c0             	movzbl %al,%eax
f01281d1:	c1 e0 04             	shl    $0x4,%eax
f01281d4:	89 c2                	mov    %eax,%edx
f01281d6:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f01281d9:	01 d0                	add    %edx,%eax
f01281db:	48                   	dec    %eax
f01281dc:	89 45 c0             	mov    %eax,-0x40(%ebp)
f01281df:	8b 45 c0             	mov    -0x40(%ebp),%eax
f01281e2:	ba 00 00 00 00       	mov    $0x0,%edx
f01281e7:	f7 75 c4             	divl   -0x3c(%ebp)
f01281ea:	8b 45 c0             	mov    -0x40(%ebp),%eax
f01281ed:	29 d0                	sub    %edx,%eax
f01281ef:	01 d8                	add    %ebx,%eax
f01281f1:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f01281f6:	39 c1                	cmp    %eax,%ecx
f01281f8:	74 17                	je     f0128211 <test_kshrink+0x128>
f01281fa:	83 ec 04             	sub    $0x4,%esp
f01281fd:	68 5c a9 13 f0       	push   $0xf013a95c
f0128202:	68 01 0c 00 00       	push   $0xc01
f0128207:	68 76 a8 13 f0       	push   $0xf013a876
f012820c:	e8 95 7f fd ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0128211:	e8 76 ba fd ff       	call   f0103c8c <pf_calculate_free_frames>
f0128216:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0128219:	74 17                	je     f0128232 <test_kshrink+0x149>
f012821b:	83 ec 04             	sub    $0x4,%esp
f012821e:	68 90 a8 13 f0       	push   $0xf013a890
f0128223:	68 02 0c 00 00       	push   $0xc02
f0128228:	68 76 a8 13 f0       	push   $0xf013a876
f012822d:	e8 74 7f fd ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f0128232:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f0128235:	e8 84 41 fe ff       	call   f010c3be <sys_calculate_free_frames>
f012823a:	29 c3                	sub    %eax,%ebx
f012823c:	89 d8                	mov    %ebx,%eax
f012823e:	3d 00 02 00 00       	cmp    $0x200,%eax
f0128243:	74 17                	je     f012825c <test_kshrink+0x173>
f0128245:	83 ec 04             	sub    $0x4,%esp
f0128248:	68 f8 a8 13 f0       	push   $0xf013a8f8
f012824d:	68 03 0c 00 00       	push   $0xc03
f0128252:	68 76 a8 13 f0       	push   $0xf013a876
f0128257:	e8 4a 7f fd ff       	call   f01001a6 <_panic>
		lastIndices[0] = (2*Mega-kilo)/sizeof(char) - 1;
f012825c:	c7 85 a4 fe ff ff ff 	movl   $0x1ffbff,-0x15c(%ebp)
f0128263:	fb 1f 00 

		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f0128266:	e8 53 41 fe ff       	call   f010c3be <sys_calculate_free_frames>
f012826b:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012826e:	e8 19 ba fd ff       	call   f0103c8c <pf_calculate_free_frames>
f0128273:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[1] = kmalloc(2*Mega-kilo);
f0128276:	83 ec 0c             	sub    $0xc,%esp
f0128279:	68 00 fc 1f 00       	push   $0x1ffc00
f012827e:	e8 41 f3 fd ff       	call   f01075c4 <kmalloc>
f0128283:	83 c4 10             	add    $0x10,%esp
f0128286:	89 85 58 fe ff ff    	mov    %eax,-0x1a8(%ebp)
		if ((uint32) ptr_allocations[1] != (ACTUAL_START + 2*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f012828c:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f0128292:	89 c1                	mov    %eax,%ecx
f0128294:	c7 45 bc 00 10 00 00 	movl   $0x1000,-0x44(%ebp)
f012829b:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012829e:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01282a3:	89 45 b8             	mov    %eax,-0x48(%ebp)
f01282a6:	8b 45 b8             	mov    -0x48(%ebp),%eax
f01282a9:	ba 00 00 00 00       	mov    $0x0,%edx
f01282ae:	f7 75 bc             	divl   -0x44(%ebp)
f01282b1:	8b 45 b8             	mov    -0x48(%ebp),%eax
f01282b4:	29 d0                	sub    %edx,%eax
f01282b6:	89 c3                	mov    %eax,%ebx
f01282b8:	c7 45 b4 00 10 00 00 	movl   $0x1000,-0x4c(%ebp)
f01282bf:	a0 bc 0e 6c f0       	mov    0xf06c0ebc,%al
f01282c4:	0f b6 d0             	movzbl %al,%edx
f01282c7:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01282ca:	01 d0                	add    %edx,%eax
f01282cc:	48                   	dec    %eax
f01282cd:	89 45 b0             	mov    %eax,-0x50(%ebp)
f01282d0:	8b 45 b0             	mov    -0x50(%ebp),%eax
f01282d3:	ba 00 00 00 00       	mov    $0x0,%edx
f01282d8:	f7 75 b4             	divl   -0x4c(%ebp)
f01282db:	8b 45 b0             	mov    -0x50(%ebp),%eax
f01282de:	29 d0                	sub    %edx,%eax
f01282e0:	01 c3                	add    %eax,%ebx
f01282e2:	c7 45 ac 00 10 00 00 	movl   $0x1000,-0x54(%ebp)
f01282e9:	a0 bc 0e 6c f0       	mov    0xf06c0ebc,%al
f01282ee:	0f b6 c0             	movzbl %al,%eax
f01282f1:	c1 e0 04             	shl    $0x4,%eax
f01282f4:	89 c2                	mov    %eax,%edx
f01282f6:	8b 45 ac             	mov    -0x54(%ebp),%eax
f01282f9:	01 d0                	add    %edx,%eax
f01282fb:	48                   	dec    %eax
f01282fc:	89 45 a8             	mov    %eax,-0x58(%ebp)
f01282ff:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0128302:	ba 00 00 00 00       	mov    $0x0,%edx
f0128307:	f7 75 ac             	divl   -0x54(%ebp)
f012830a:	8b 45 a8             	mov    -0x58(%ebp),%eax
f012830d:	29 d0                	sub    %edx,%eax
f012830f:	01 d8                	add    %ebx,%eax
f0128311:	2d 00 c0 df 09       	sub    $0x9dfc000,%eax
f0128316:	39 c1                	cmp    %eax,%ecx
f0128318:	74 17                	je     f0128331 <test_kshrink+0x248>
f012831a:	83 ec 04             	sub    $0x4,%esp
f012831d:	68 5c a9 13 f0       	push   $0xf013a95c
f0128322:	68 0a 0c 00 00       	push   $0xc0a
f0128327:	68 76 a8 13 f0       	push   $0xf013a876
f012832c:	e8 75 7e fd ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0128331:	e8 56 b9 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f0128336:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0128339:	74 17                	je     f0128352 <test_kshrink+0x269>
f012833b:	83 ec 04             	sub    $0x4,%esp
f012833e:	68 90 a8 13 f0       	push   $0xf013a890
f0128343:	68 0b 0c 00 00       	push   $0xc0b
f0128348:	68 76 a8 13 f0       	push   $0xf013a876
f012834d:	e8 54 7e fd ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f0128352:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f0128355:	e8 64 40 fe ff       	call   f010c3be <sys_calculate_free_frames>
f012835a:	29 c3                	sub    %eax,%ebx
f012835c:	89 d8                	mov    %ebx,%eax
f012835e:	3d 00 02 00 00       	cmp    $0x200,%eax
f0128363:	74 17                	je     f012837c <test_kshrink+0x293>
f0128365:	83 ec 04             	sub    $0x4,%esp
f0128368:	68 f8 a8 13 f0       	push   $0xf013a8f8
f012836d:	68 0c 0c 00 00       	push   $0xc0c
f0128372:	68 76 a8 13 f0       	push   $0xf013a876
f0128377:	e8 2a 7e fd ff       	call   f01001a6 <_panic>
		lastIndices[1] = (2*Mega-kilo)/sizeof(char) - 1;
f012837c:	c7 85 a8 fe ff ff ff 	movl   $0x1ffbff,-0x158(%ebp)
f0128383:	fb 1f 00 

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f0128386:	e8 33 40 fe ff       	call   f010c3be <sys_calculate_free_frames>
f012838b:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012838e:	e8 f9 b8 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f0128393:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[2] = kmalloc(2*kilo);
f0128396:	83 ec 0c             	sub    $0xc,%esp
f0128399:	68 00 08 00 00       	push   $0x800
f012839e:	e8 21 f2 fd ff       	call   f01075c4 <kmalloc>
f01283a3:	83 c4 10             	add    $0x10,%esp
f01283a6:	89 85 5c fe ff ff    	mov    %eax,-0x1a4(%ebp)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01283ac:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f01283b2:	89 c1                	mov    %eax,%ecx
f01283b4:	c7 45 a4 00 10 00 00 	movl   $0x1000,-0x5c(%ebp)
f01283bb:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f01283be:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01283c3:	89 45 a0             	mov    %eax,-0x60(%ebp)
f01283c6:	8b 45 a0             	mov    -0x60(%ebp),%eax
f01283c9:	ba 00 00 00 00       	mov    $0x0,%edx
f01283ce:	f7 75 a4             	divl   -0x5c(%ebp)
f01283d1:	8b 45 a0             	mov    -0x60(%ebp),%eax
f01283d4:	29 d0                	sub    %edx,%eax
f01283d6:	89 c3                	mov    %eax,%ebx
f01283d8:	c7 45 9c 00 10 00 00 	movl   $0x1000,-0x64(%ebp)
f01283df:	a0 bc 0e 6c f0       	mov    0xf06c0ebc,%al
f01283e4:	0f b6 d0             	movzbl %al,%edx
f01283e7:	8b 45 9c             	mov    -0x64(%ebp),%eax
f01283ea:	01 d0                	add    %edx,%eax
f01283ec:	48                   	dec    %eax
f01283ed:	89 45 98             	mov    %eax,-0x68(%ebp)
f01283f0:	8b 45 98             	mov    -0x68(%ebp),%eax
f01283f3:	ba 00 00 00 00       	mov    $0x0,%edx
f01283f8:	f7 75 9c             	divl   -0x64(%ebp)
f01283fb:	8b 45 98             	mov    -0x68(%ebp),%eax
f01283fe:	29 d0                	sub    %edx,%eax
f0128400:	01 c3                	add    %eax,%ebx
f0128402:	c7 45 94 00 10 00 00 	movl   $0x1000,-0x6c(%ebp)
f0128409:	a0 bc 0e 6c f0       	mov    0xf06c0ebc,%al
f012840e:	0f b6 c0             	movzbl %al,%eax
f0128411:	c1 e0 04             	shl    $0x4,%eax
f0128414:	89 c2                	mov    %eax,%edx
f0128416:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0128419:	01 d0                	add    %edx,%eax
f012841b:	48                   	dec    %eax
f012841c:	89 45 90             	mov    %eax,-0x70(%ebp)
f012841f:	8b 45 90             	mov    -0x70(%ebp),%eax
f0128422:	ba 00 00 00 00       	mov    $0x0,%edx
f0128427:	f7 75 94             	divl   -0x6c(%ebp)
f012842a:	8b 45 90             	mov    -0x70(%ebp),%eax
f012842d:	29 d0                	sub    %edx,%eax
f012842f:	01 d8                	add    %ebx,%eax
f0128431:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
f0128436:	39 c1                	cmp    %eax,%ecx
f0128438:	74 17                	je     f0128451 <test_kshrink+0x368>
f012843a:	83 ec 04             	sub    $0x4,%esp
f012843d:	68 5c a9 13 f0       	push   $0xf013a95c
f0128442:	68 13 0c 00 00       	push   $0xc13
f0128447:	68 76 a8 13 f0       	push   $0xf013a876
f012844c:	e8 55 7d fd ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0128451:	e8 36 b8 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f0128456:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0128459:	74 17                	je     f0128472 <test_kshrink+0x389>
f012845b:	83 ec 04             	sub    $0x4,%esp
f012845e:	68 90 a8 13 f0       	push   $0xf013a890
f0128463:	68 14 0c 00 00       	push   $0xc14
f0128468:	68 76 a8 13 f0       	push   $0xf013a876
f012846d:	e8 34 7d fd ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f0128472:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f0128475:	e8 44 3f fe ff       	call   f010c3be <sys_calculate_free_frames>
f012847a:	29 c3                	sub    %eax,%ebx
f012847c:	89 d8                	mov    %ebx,%eax
f012847e:	83 f8 01             	cmp    $0x1,%eax
f0128481:	74 17                	je     f012849a <test_kshrink+0x3b1>
f0128483:	83 ec 04             	sub    $0x4,%esp
f0128486:	68 f8 a8 13 f0       	push   $0xf013a8f8
f012848b:	68 15 0c 00 00       	push   $0xc15
f0128490:	68 76 a8 13 f0       	push   $0xf013a876
f0128495:	e8 0c 7d fd ff       	call   f01001a6 <_panic>
		lastIndices[2] = (2*kilo)/sizeof(char) - 1;
f012849a:	c7 85 ac fe ff ff ff 	movl   $0x7ff,-0x154(%ebp)
f01284a1:	07 00 00 
		ptr = (char*)ptr_allocations[2];
f01284a4:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f01284aa:	89 45 8c             	mov    %eax,-0x74(%ebp)
		for (i = 0; i < lastIndices[2]; ++i)
f01284ad:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01284b4:	eb 0e                	jmp    f01284c4 <test_kshrink+0x3db>
		{
			ptr[i] = 2 ;
f01284b6:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01284b9:	8b 45 8c             	mov    -0x74(%ebp),%eax
f01284bc:	01 d0                	add    %edx,%eax
f01284be:	c6 00 02             	movb   $0x2,(%eax)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[2] = (2*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[2];
		for (i = 0; i < lastIndices[2]; ++i)
f01284c1:	ff 45 f4             	incl   -0xc(%ebp)
f01284c4:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f01284ca:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01284cd:	7f e7                	jg     f01284b6 <test_kshrink+0x3cd>
		{
			ptr[i] = 2 ;
		}

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f01284cf:	e8 ea 3e fe ff       	call   f010c3be <sys_calculate_free_frames>
f01284d4:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01284d7:	e8 b0 b7 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f01284dc:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[3] = kmalloc(2*kilo);
f01284df:	83 ec 0c             	sub    $0xc,%esp
f01284e2:	68 00 08 00 00       	push   $0x800
f01284e7:	e8 d8 f0 fd ff       	call   f01075c4 <kmalloc>
f01284ec:	83 c4 10             	add    $0x10,%esp
f01284ef:	89 85 60 fe ff ff    	mov    %eax,-0x1a0(%ebp)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01284f5:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f01284fb:	89 c1                	mov    %eax,%ecx
f01284fd:	c7 45 88 00 10 00 00 	movl   $0x1000,-0x78(%ebp)
f0128504:	8b 45 88             	mov    -0x78(%ebp),%eax
f0128507:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012850c:	89 45 84             	mov    %eax,-0x7c(%ebp)
f012850f:	8b 45 84             	mov    -0x7c(%ebp),%eax
f0128512:	ba 00 00 00 00       	mov    $0x0,%edx
f0128517:	f7 75 88             	divl   -0x78(%ebp)
f012851a:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012851d:	29 d0                	sub    %edx,%eax
f012851f:	89 c3                	mov    %eax,%ebx
f0128521:	c7 45 80 00 10 00 00 	movl   $0x1000,-0x80(%ebp)
f0128528:	a0 bc 0e 6c f0       	mov    0xf06c0ebc,%al
f012852d:	0f b6 d0             	movzbl %al,%edx
f0128530:	8b 45 80             	mov    -0x80(%ebp),%eax
f0128533:	01 d0                	add    %edx,%eax
f0128535:	48                   	dec    %eax
f0128536:	89 85 7c ff ff ff    	mov    %eax,-0x84(%ebp)
f012853c:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f0128542:	ba 00 00 00 00       	mov    $0x0,%edx
f0128547:	f7 75 80             	divl   -0x80(%ebp)
f012854a:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f0128550:	29 d0                	sub    %edx,%eax
f0128552:	01 c3                	add    %eax,%ebx
f0128554:	c7 85 78 ff ff ff 00 	movl   $0x1000,-0x88(%ebp)
f012855b:	10 00 00 
f012855e:	a0 bc 0e 6c f0       	mov    0xf06c0ebc,%al
f0128563:	0f b6 c0             	movzbl %al,%eax
f0128566:	c1 e0 04             	shl    $0x4,%eax
f0128569:	89 c2                	mov    %eax,%edx
f012856b:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f0128571:	01 d0                	add    %edx,%eax
f0128573:	48                   	dec    %eax
f0128574:	89 85 74 ff ff ff    	mov    %eax,-0x8c(%ebp)
f012857a:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f0128580:	ba 00 00 00 00       	mov    $0x0,%edx
f0128585:	f7 b5 78 ff ff ff    	divl   -0x88(%ebp)
f012858b:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f0128591:	29 d0                	sub    %edx,%eax
f0128593:	01 d8                	add    %ebx,%eax
f0128595:	2d 00 b0 bf 09       	sub    $0x9bfb000,%eax
f012859a:	39 c1                	cmp    %eax,%ecx
f012859c:	74 17                	je     f01285b5 <test_kshrink+0x4cc>
f012859e:	83 ec 04             	sub    $0x4,%esp
f01285a1:	68 5c a9 13 f0       	push   $0xf013a95c
f01285a6:	68 21 0c 00 00       	push   $0xc21
f01285ab:	68 76 a8 13 f0       	push   $0xf013a876
f01285b0:	e8 f1 7b fd ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01285b5:	e8 d2 b6 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f01285ba:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f01285bd:	74 17                	je     f01285d6 <test_kshrink+0x4ed>
f01285bf:	83 ec 04             	sub    $0x4,%esp
f01285c2:	68 90 a8 13 f0       	push   $0xf013a890
f01285c7:	68 22 0c 00 00       	push   $0xc22
f01285cc:	68 76 a8 13 f0       	push   $0xf013a876
f01285d1:	e8 d0 7b fd ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f01285d6:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f01285d9:	e8 e0 3d fe ff       	call   f010c3be <sys_calculate_free_frames>
f01285de:	29 c3                	sub    %eax,%ebx
f01285e0:	89 d8                	mov    %ebx,%eax
f01285e2:	83 f8 01             	cmp    $0x1,%eax
f01285e5:	74 17                	je     f01285fe <test_kshrink+0x515>
f01285e7:	83 ec 04             	sub    $0x4,%esp
f01285ea:	68 f8 a8 13 f0       	push   $0xf013a8f8
f01285ef:	68 23 0c 00 00       	push   $0xc23
f01285f4:	68 76 a8 13 f0       	push   $0xf013a876
f01285f9:	e8 a8 7b fd ff       	call   f01001a6 <_panic>
		lastIndices[3] = (2*kilo)/sizeof(char) - 1;
f01285fe:	c7 85 b0 fe ff ff ff 	movl   $0x7ff,-0x150(%ebp)
f0128605:	07 00 00 
		ptr = (char*)ptr_allocations[3];
f0128608:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f012860e:	89 45 8c             	mov    %eax,-0x74(%ebp)
		for (i = 0; i < lastIndices[3]; ++i)
f0128611:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0128618:	eb 0e                	jmp    f0128628 <test_kshrink+0x53f>
		{
			ptr[i] = 3 ;
f012861a:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012861d:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0128620:	01 d0                	add    %edx,%eax
f0128622:	c6 00 03             	movb   $0x3,(%eax)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[3] = (2*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[3];
		for (i = 0; i < lastIndices[3]; ++i)
f0128625:	ff 45 f4             	incl   -0xc(%ebp)
f0128628:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f012862e:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0128631:	7f e7                	jg     f012861a <test_kshrink+0x531>
		{
			ptr[i] = 3 ;
		}

		//7 KB
		freeFrames = sys_calculate_free_frames() ;
f0128633:	e8 86 3d fe ff       	call   f010c3be <sys_calculate_free_frames>
f0128638:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012863b:	e8 4c b6 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f0128640:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[4] = kmalloc(7*kilo);
f0128643:	83 ec 0c             	sub    $0xc,%esp
f0128646:	68 00 1c 00 00       	push   $0x1c00
f012864b:	e8 74 ef fd ff       	call   f01075c4 <kmalloc>
f0128650:	83 c4 10             	add    $0x10,%esp
f0128653:	89 85 64 fe ff ff    	mov    %eax,-0x19c(%ebp)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0128659:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f012865f:	89 c1                	mov    %eax,%ecx
f0128661:	c7 85 70 ff ff ff 00 	movl   $0x1000,-0x90(%ebp)
f0128668:	10 00 00 
f012866b:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f0128671:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0128676:	89 85 6c ff ff ff    	mov    %eax,-0x94(%ebp)
f012867c:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f0128682:	ba 00 00 00 00       	mov    $0x0,%edx
f0128687:	f7 b5 70 ff ff ff    	divl   -0x90(%ebp)
f012868d:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f0128693:	29 d0                	sub    %edx,%eax
f0128695:	89 c3                	mov    %eax,%ebx
f0128697:	c7 85 68 ff ff ff 00 	movl   $0x1000,-0x98(%ebp)
f012869e:	10 00 00 
f01286a1:	a0 bc 0e 6c f0       	mov    0xf06c0ebc,%al
f01286a6:	0f b6 d0             	movzbl %al,%edx
f01286a9:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f01286af:	01 d0                	add    %edx,%eax
f01286b1:	48                   	dec    %eax
f01286b2:	89 85 64 ff ff ff    	mov    %eax,-0x9c(%ebp)
f01286b8:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f01286be:	ba 00 00 00 00       	mov    $0x0,%edx
f01286c3:	f7 b5 68 ff ff ff    	divl   -0x98(%ebp)
f01286c9:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f01286cf:	29 d0                	sub    %edx,%eax
f01286d1:	01 c3                	add    %eax,%ebx
f01286d3:	c7 85 60 ff ff ff 00 	movl   $0x1000,-0xa0(%ebp)
f01286da:	10 00 00 
f01286dd:	a0 bc 0e 6c f0       	mov    0xf06c0ebc,%al
f01286e2:	0f b6 c0             	movzbl %al,%eax
f01286e5:	c1 e0 04             	shl    $0x4,%eax
f01286e8:	89 c2                	mov    %eax,%edx
f01286ea:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f01286f0:	01 d0                	add    %edx,%eax
f01286f2:	48                   	dec    %eax
f01286f3:	89 85 5c ff ff ff    	mov    %eax,-0xa4(%ebp)
f01286f9:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f01286ff:	ba 00 00 00 00       	mov    $0x0,%edx
f0128704:	f7 b5 60 ff ff ff    	divl   -0xa0(%ebp)
f012870a:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f0128710:	29 d0                	sub    %edx,%eax
f0128712:	01 d8                	add    %ebx,%eax
f0128714:	2d 00 a0 bf 09       	sub    $0x9bfa000,%eax
f0128719:	39 c1                	cmp    %eax,%ecx
f012871b:	74 17                	je     f0128734 <test_kshrink+0x64b>
f012871d:	83 ec 04             	sub    $0x4,%esp
f0128720:	68 5c a9 13 f0       	push   $0xf013a95c
f0128725:	68 2f 0c 00 00       	push   $0xc2f
f012872a:	68 76 a8 13 f0       	push   $0xf013a876
f012872f:	e8 72 7a fd ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0128734:	e8 53 b5 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f0128739:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f012873c:	74 17                	je     f0128755 <test_kshrink+0x66c>
f012873e:	83 ec 04             	sub    $0x4,%esp
f0128741:	68 90 a8 13 f0       	push   $0xf013a890
f0128746:	68 30 0c 00 00       	push   $0xc30
f012874b:	68 76 a8 13 f0       	push   $0xf013a876
f0128750:	e8 51 7a fd ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: pages are not loaded successfully into memory");
f0128755:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f0128758:	e8 61 3c fe ff       	call   f010c3be <sys_calculate_free_frames>
f012875d:	29 c3                	sub    %eax,%ebx
f012875f:	89 d8                	mov    %ebx,%eax
f0128761:	83 f8 02             	cmp    $0x2,%eax
f0128764:	74 17                	je     f012877d <test_kshrink+0x694>
f0128766:	83 ec 04             	sub    $0x4,%esp
f0128769:	68 f8 a8 13 f0       	push   $0xf013a8f8
f012876e:	68 31 0c 00 00       	push   $0xc31
f0128773:	68 76 a8 13 f0       	push   $0xf013a876
f0128778:	e8 29 7a fd ff       	call   f01001a6 <_panic>
		lastIndices[4] = (7*kilo)/sizeof(char) - 1;
f012877d:	c7 85 b4 fe ff ff ff 	movl   $0x1bff,-0x14c(%ebp)
f0128784:	1b 00 00 
		ptr = (char*)ptr_allocations[4];
f0128787:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f012878d:	89 45 8c             	mov    %eax,-0x74(%ebp)
		for (i = 0; i < lastIndices[4]; ++i)
f0128790:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0128797:	eb 0e                	jmp    f01287a7 <test_kshrink+0x6be>
		{
			ptr[i] = 4 ;
f0128799:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012879c:	8b 45 8c             	mov    -0x74(%ebp),%eax
f012879f:	01 d0                	add    %edx,%eax
f01287a1:	c6 00 04             	movb   $0x4,(%eax)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[4] = (7*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[4];
		for (i = 0; i < lastIndices[4]; ++i)
f01287a4:	ff 45 f4             	incl   -0xc(%ebp)
f01287a7:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f01287ad:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01287b0:	7f e7                	jg     f0128799 <test_kshrink+0x6b0>
		{
			ptr[i] = 4 ;
		}

		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f01287b2:	e8 07 3c fe ff       	call   f010c3be <sys_calculate_free_frames>
f01287b7:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01287ba:	e8 cd b4 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f01287bf:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[5] = kmalloc(3*Mega-kilo);
f01287c2:	83 ec 0c             	sub    $0xc,%esp
f01287c5:	68 00 fc 2f 00       	push   $0x2ffc00
f01287ca:	e8 f5 ed fd ff       	call   f01075c4 <kmalloc>
f01287cf:	83 c4 10             	add    $0x10,%esp
f01287d2:	89 85 68 fe ff ff    	mov    %eax,-0x198(%ebp)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo) ) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01287d8:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f01287de:	89 c1                	mov    %eax,%ecx
f01287e0:	c7 85 58 ff ff ff 00 	movl   $0x1000,-0xa8(%ebp)
f01287e7:	10 00 00 
f01287ea:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f01287f0:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01287f5:	89 85 54 ff ff ff    	mov    %eax,-0xac(%ebp)
f01287fb:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f0128801:	ba 00 00 00 00       	mov    $0x0,%edx
f0128806:	f7 b5 58 ff ff ff    	divl   -0xa8(%ebp)
f012880c:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f0128812:	29 d0                	sub    %edx,%eax
f0128814:	89 c3                	mov    %eax,%ebx
f0128816:	c7 85 50 ff ff ff 00 	movl   $0x1000,-0xb0(%ebp)
f012881d:	10 00 00 
f0128820:	a0 bc 0e 6c f0       	mov    0xf06c0ebc,%al
f0128825:	0f b6 d0             	movzbl %al,%edx
f0128828:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f012882e:	01 d0                	add    %edx,%eax
f0128830:	48                   	dec    %eax
f0128831:	89 85 4c ff ff ff    	mov    %eax,-0xb4(%ebp)
f0128837:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f012883d:	ba 00 00 00 00       	mov    $0x0,%edx
f0128842:	f7 b5 50 ff ff ff    	divl   -0xb0(%ebp)
f0128848:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f012884e:	29 d0                	sub    %edx,%eax
f0128850:	01 c3                	add    %eax,%ebx
f0128852:	c7 85 48 ff ff ff 00 	movl   $0x1000,-0xb8(%ebp)
f0128859:	10 00 00 
f012885c:	a0 bc 0e 6c f0       	mov    0xf06c0ebc,%al
f0128861:	0f b6 c0             	movzbl %al,%eax
f0128864:	c1 e0 04             	shl    $0x4,%eax
f0128867:	89 c2                	mov    %eax,%edx
f0128869:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f012886f:	01 d0                	add    %edx,%eax
f0128871:	48                   	dec    %eax
f0128872:	89 85 44 ff ff ff    	mov    %eax,-0xbc(%ebp)
f0128878:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f012887e:	ba 00 00 00 00       	mov    $0x0,%edx
f0128883:	f7 b5 48 ff ff ff    	divl   -0xb8(%ebp)
f0128889:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f012888f:	29 d0                	sub    %edx,%eax
f0128891:	01 d8                	add    %ebx,%eax
f0128893:	2d 00 80 bf 09       	sub    $0x9bf8000,%eax
f0128898:	39 c1                	cmp    %eax,%ecx
f012889a:	74 17                	je     f01288b3 <test_kshrink+0x7ca>
f012889c:	83 ec 04             	sub    $0x4,%esp
f012889f:	68 5c a9 13 f0       	push   $0xf013a95c
f01288a4:	68 3d 0c 00 00       	push   $0xc3d
f01288a9:	68 76 a8 13 f0       	push   $0xf013a876
f01288ae:	e8 f3 78 fd ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01288b3:	e8 d4 b3 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f01288b8:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f01288bb:	74 17                	je     f01288d4 <test_kshrink+0x7eb>
f01288bd:	83 ec 04             	sub    $0x4,%esp
f01288c0:	68 90 a8 13 f0       	push   $0xf013a890
f01288c5:	68 3e 0c 00 00       	push   $0xc3e
f01288ca:	68 76 a8 13 f0       	push   $0xf013a876
f01288cf:	e8 d2 78 fd ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
f01288d4:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f01288d7:	e8 e2 3a fe ff       	call   f010c3be <sys_calculate_free_frames>
f01288dc:	29 c3                	sub    %eax,%ebx
f01288de:	89 d8                	mov    %ebx,%eax
f01288e0:	3d 00 03 00 00       	cmp    $0x300,%eax
f01288e5:	74 17                	je     f01288fe <test_kshrink+0x815>
f01288e7:	83 ec 04             	sub    $0x4,%esp
f01288ea:	68 f8 a8 13 f0       	push   $0xf013a8f8
f01288ef:	68 3f 0c 00 00       	push   $0xc3f
f01288f4:	68 76 a8 13 f0       	push   $0xf013a876
f01288f9:	e8 a8 78 fd ff       	call   f01001a6 <_panic>
		lastIndices[5] = (3*Mega-kilo)/sizeof(char) - 1;
f01288fe:	c7 85 b8 fe ff ff ff 	movl   $0x2ffbff,-0x148(%ebp)
f0128905:	fb 2f 00 
		ptr = (char*)ptr_allocations[5];
f0128908:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f012890e:	89 45 8c             	mov    %eax,-0x74(%ebp)
		for (i = 0; i < lastIndices[5]; ++i)
f0128911:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0128918:	eb 0e                	jmp    f0128928 <test_kshrink+0x83f>
		{
			ptr[i] = 5 ;
f012891a:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012891d:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0128920:	01 d0                	add    %edx,%eax
f0128922:	c6 00 05             	movb   $0x5,(%eax)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo) ) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[5] = (3*Mega-kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[5];
		for (i = 0; i < lastIndices[5]; ++i)
f0128925:	ff 45 f4             	incl   -0xc(%ebp)
f0128928:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f012892e:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0128931:	7f e7                	jg     f012891a <test_kshrink+0x831>
		{
			ptr[i] = 5 ;
		}

		//6 MB
		freeFrames = sys_calculate_free_frames() ;
f0128933:	e8 86 3a fe ff       	call   f010c3be <sys_calculate_free_frames>
f0128938:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012893b:	e8 4c b3 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f0128940:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[6] = kmalloc(6*Mega);
f0128943:	83 ec 0c             	sub    $0xc,%esp
f0128946:	68 00 00 60 00       	push   $0x600000
f012894b:	e8 74 ec fd ff       	call   f01075c4 <kmalloc>
f0128950:	83 c4 10             	add    $0x10,%esp
f0128953:	89 85 6c fe ff ff    	mov    %eax,-0x194(%ebp)
		if ((uint32) ptr_allocations[6] != (ACTUAL_START + 7*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0128959:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f012895f:	89 c1                	mov    %eax,%ecx
f0128961:	c7 85 40 ff ff ff 00 	movl   $0x1000,-0xc0(%ebp)
f0128968:	10 00 00 
f012896b:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0128971:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0128976:	89 85 3c ff ff ff    	mov    %eax,-0xc4(%ebp)
f012897c:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f0128982:	ba 00 00 00 00       	mov    $0x0,%edx
f0128987:	f7 b5 40 ff ff ff    	divl   -0xc0(%ebp)
f012898d:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f0128993:	29 d0                	sub    %edx,%eax
f0128995:	89 c3                	mov    %eax,%ebx
f0128997:	c7 85 38 ff ff ff 00 	movl   $0x1000,-0xc8(%ebp)
f012899e:	10 00 00 
f01289a1:	a0 bc 0e 6c f0       	mov    0xf06c0ebc,%al
f01289a6:	0f b6 d0             	movzbl %al,%edx
f01289a9:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f01289af:	01 d0                	add    %edx,%eax
f01289b1:	48                   	dec    %eax
f01289b2:	89 85 34 ff ff ff    	mov    %eax,-0xcc(%ebp)
f01289b8:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f01289be:	ba 00 00 00 00       	mov    $0x0,%edx
f01289c3:	f7 b5 38 ff ff ff    	divl   -0xc8(%ebp)
f01289c9:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f01289cf:	29 d0                	sub    %edx,%eax
f01289d1:	01 c3                	add    %eax,%ebx
f01289d3:	c7 85 30 ff ff ff 00 	movl   $0x1000,-0xd0(%ebp)
f01289da:	10 00 00 
f01289dd:	a0 bc 0e 6c f0       	mov    0xf06c0ebc,%al
f01289e2:	0f b6 c0             	movzbl %al,%eax
f01289e5:	c1 e0 04             	shl    $0x4,%eax
f01289e8:	89 c2                	mov    %eax,%edx
f01289ea:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f01289f0:	01 d0                	add    %edx,%eax
f01289f2:	48                   	dec    %eax
f01289f3:	89 85 2c ff ff ff    	mov    %eax,-0xd4(%ebp)
f01289f9:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f01289ff:	ba 00 00 00 00       	mov    $0x0,%edx
f0128a04:	f7 b5 30 ff ff ff    	divl   -0xd0(%ebp)
f0128a0a:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f0128a10:	29 d0                	sub    %edx,%eax
f0128a12:	01 d8                	add    %ebx,%eax
f0128a14:	2d 00 80 8f 09       	sub    $0x98f8000,%eax
f0128a19:	39 c1                	cmp    %eax,%ecx
f0128a1b:	74 17                	je     f0128a34 <test_kshrink+0x94b>
f0128a1d:	83 ec 04             	sub    $0x4,%esp
f0128a20:	68 5c a9 13 f0       	push   $0xf013a95c
f0128a25:	68 4b 0c 00 00       	push   $0xc4b
f0128a2a:	68 76 a8 13 f0       	push   $0xf013a876
f0128a2f:	e8 72 77 fd ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0128a34:	e8 53 b2 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f0128a39:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0128a3c:	74 17                	je     f0128a55 <test_kshrink+0x96c>
f0128a3e:	83 ec 04             	sub    $0x4,%esp
f0128a41:	68 90 a8 13 f0       	push   $0xf013a890
f0128a46:	68 4c 0c 00 00       	push   $0xc4c
f0128a4b:	68 76 a8 13 f0       	push   $0xf013a876
f0128a50:	e8 51 77 fd ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1536) panic("Wrong allocation: pages are not loaded successfully into memory");
f0128a55:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f0128a58:	e8 61 39 fe ff       	call   f010c3be <sys_calculate_free_frames>
f0128a5d:	29 c3                	sub    %eax,%ebx
f0128a5f:	89 d8                	mov    %ebx,%eax
f0128a61:	3d 00 06 00 00       	cmp    $0x600,%eax
f0128a66:	74 17                	je     f0128a7f <test_kshrink+0x996>
f0128a68:	83 ec 04             	sub    $0x4,%esp
f0128a6b:	68 f8 a8 13 f0       	push   $0xf013a8f8
f0128a70:	68 4d 0c 00 00       	push   $0xc4d
f0128a75:	68 76 a8 13 f0       	push   $0xf013a876
f0128a7a:	e8 27 77 fd ff       	call   f01001a6 <_panic>
		lastIndices[6] = (6*Mega)/sizeof(uint32) - 1;
f0128a7f:	c7 85 bc fe ff ff ff 	movl   $0x17ffff,-0x144(%ebp)
f0128a86:	ff 17 00 
		arr = (uint32*)ptr_allocations[6];
f0128a89:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f0128a8f:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%ebp)
		for (i = 0; i <= lastIndices[6]; ++i)
f0128a95:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0128a9c:	eb 1a                	jmp    f0128ab8 <test_kshrink+0x9cf>
		{
			arr[i] = i ;
f0128a9e:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0128aa1:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0128aa8:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f0128aae:	01 c2                	add    %eax,%edx
f0128ab0:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0128ab3:	89 02                	mov    %eax,(%edx)
		if ((uint32) ptr_allocations[6] != (ACTUAL_START + 7*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 1536) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[6] = (6*Mega)/sizeof(uint32) - 1;
		arr = (uint32*)ptr_allocations[6];
		for (i = 0; i <= lastIndices[6]; ++i)
f0128ab5:	ff 45 f4             	incl   -0xc(%ebp)
f0128ab8:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f0128abe:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0128ac1:	7d db                	jge    f0128a9e <test_kshrink+0x9b5>
		}
	}

	//Shrink last allocated variable to 5 MB instead of 6 MB
	{
		freeFrames = sys_calculate_free_frames() ;
f0128ac3:	e8 f6 38 fe ff       	call   f010c3be <sys_calculate_free_frames>
f0128ac8:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0128acb:	e8 bc b1 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f0128ad0:	89 45 d8             	mov    %eax,-0x28(%ebp)

		kshrink(5*Mega) ;
f0128ad3:	83 ec 0c             	sub    $0xc,%esp
f0128ad6:	68 00 00 50 00       	push   $0x500000
f0128adb:	e8 78 eb fd ff       	call   f0107658 <kshrink>
f0128ae0:	83 c4 10             	add    $0x10,%esp

		assert(pf_calculate_free_frames() - freeDiskFrames == 0) ;
f0128ae3:	e8 a4 b1 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f0128ae8:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0128aeb:	74 19                	je     f0128b06 <test_kshrink+0xa1d>
f0128aed:	68 10 b6 13 f0       	push   $0xf013b610
f0128af2:	68 41 b6 13 f0       	push   $0xf013b641
f0128af7:	68 5d 0c 00 00       	push   $0xc5d
f0128afc:	68 76 a8 13 f0       	push   $0xf013a876
f0128b01:	e8 a0 76 fd ff       	call   f01001a6 <_panic>
		assert(sys_calculate_free_frames() - freeFrames == 256) ;
f0128b06:	e8 b3 38 fe ff       	call   f010c3be <sys_calculate_free_frames>
f0128b0b:	89 c2                	mov    %eax,%edx
f0128b0d:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0128b10:	29 c2                	sub    %eax,%edx
f0128b12:	89 d0                	mov    %edx,%eax
f0128b14:	3d 00 01 00 00       	cmp    $0x100,%eax
f0128b19:	74 19                	je     f0128b34 <test_kshrink+0xa4b>
f0128b1b:	68 1c b7 13 f0       	push   $0xf013b71c
f0128b20:	68 41 b6 13 f0       	push   $0xf013b641
f0128b25:	68 5e 0c 00 00       	push   $0xc5e
f0128b2a:	68 76 a8 13 f0       	push   $0xf013a876
f0128b2f:	e8 72 76 fd ff       	call   f01001a6 <_panic>
	}

	//Access elements after shrink
	int newLastIndex = (5*Mega)/sizeof(uint32) - 1;
f0128b34:	c7 85 24 ff ff ff ff 	movl   $0x13ffff,-0xdc(%ebp)
f0128b3b:	ff 13 00 
	{
		for (i = 0; i <= newLastIndex ; ++i)
f0128b3e:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0128b45:	eb 37                	jmp    f0128b7e <test_kshrink+0xa95>
		{
			assert(arr[i] == i);
f0128b47:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0128b4a:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0128b51:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f0128b57:	01 d0                	add    %edx,%eax
f0128b59:	8b 10                	mov    (%eax),%edx
f0128b5b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0128b5e:	39 c2                	cmp    %eax,%edx
f0128b60:	74 19                	je     f0128b7b <test_kshrink+0xa92>
f0128b62:	68 4c b7 13 f0       	push   $0xf013b74c
f0128b67:	68 41 b6 13 f0       	push   $0xf013b641
f0128b6c:	68 66 0c 00 00       	push   $0xc66
f0128b71:	68 76 a8 13 f0       	push   $0xf013a876
f0128b76:	e8 2b 76 fd ff       	call   f01001a6 <_panic>
	}

	//Access elements after shrink
	int newLastIndex = (5*Mega)/sizeof(uint32) - 1;
	{
		for (i = 0; i <= newLastIndex ; ++i)
f0128b7b:	ff 45 f4             	incl   -0xc(%ebp)
f0128b7e:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0128b81:	3b 85 24 ff ff ff    	cmp    -0xdc(%ebp),%eax
f0128b87:	7e be                	jle    f0128b47 <test_kshrink+0xa5e>
			assert(arr[i] == i);
		}

		//Bypass the PAGE FAULT on <MOVB immediate, reg> instruction by setting its length
		//and continue executing the remaining code
		sys_bypassPageFault(3);
f0128b89:	83 ec 0c             	sub    $0xc,%esp
f0128b8c:	6a 03                	push   $0x3
f0128b8e:	e8 d4 3c fe ff       	call   f010c867 <sys_bypassPageFault>
f0128b93:	83 c4 10             	add    $0x10,%esp

		ptr = (char *) ptr_allocations[6];
f0128b96:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f0128b9c:	89 45 8c             	mov    %eax,-0x74(%ebp)
		ptr[5*Mega] = 10;
f0128b9f:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0128ba2:	05 00 00 50 00       	add    $0x500000,%eax
f0128ba7:	c6 00 0a             	movb   $0xa,(%eax)
		assert(sys_rcr2() == (uint32)&(ptr[5*Mega])) ;
f0128baa:	e8 a6 3c fe ff       	call   f010c855 <sys_rcr2>
f0128baf:	8b 55 8c             	mov    -0x74(%ebp),%edx
f0128bb2:	81 c2 00 00 50 00    	add    $0x500000,%edx
f0128bb8:	39 d0                	cmp    %edx,%eax
f0128bba:	74 19                	je     f0128bd5 <test_kshrink+0xaec>
f0128bbc:	68 58 b7 13 f0       	push   $0xf013b758
f0128bc1:	68 41 b6 13 f0       	push   $0xf013b641
f0128bc6:	68 6f 0c 00 00       	push   $0xc6f
f0128bcb:	68 76 a8 13 f0       	push   $0xf013a876
f0128bd0:	e8 d1 75 fd ff       	call   f01001a6 <_panic>

		ptr[5*Mega+4*kilo] = 10;
f0128bd5:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0128bd8:	05 00 10 50 00       	add    $0x501000,%eax
f0128bdd:	c6 00 0a             	movb   $0xa,(%eax)
		assert(sys_rcr2() == (uint32)&(ptr[5*Mega+4*kilo])) ;
f0128be0:	e8 70 3c fe ff       	call   f010c855 <sys_rcr2>
f0128be5:	8b 55 8c             	mov    -0x74(%ebp),%edx
f0128be8:	81 c2 00 10 50 00    	add    $0x501000,%edx
f0128bee:	39 d0                	cmp    %edx,%eax
f0128bf0:	74 19                	je     f0128c0b <test_kshrink+0xb22>
f0128bf2:	68 80 b7 13 f0       	push   $0xf013b780
f0128bf7:	68 41 b6 13 f0       	push   $0xf013b641
f0128bfc:	68 72 0c 00 00       	push   $0xc72
f0128c01:	68 76 a8 13 f0       	push   $0xf013a876
f0128c06:	e8 9b 75 fd ff       	call   f01001a6 <_panic>

		ptr[6*Mega - kilo] = 10;
f0128c0b:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0128c0e:	05 00 fc 5f 00       	add    $0x5ffc00,%eax
f0128c13:	c6 00 0a             	movb   $0xa,(%eax)
		assert(sys_rcr2() == (uint32)&(ptr[6*Mega - kilo])) ;
f0128c16:	e8 3a 3c fe ff       	call   f010c855 <sys_rcr2>
f0128c1b:	8b 55 8c             	mov    -0x74(%ebp),%edx
f0128c1e:	81 c2 00 fc 5f 00    	add    $0x5ffc00,%edx
f0128c24:	39 d0                	cmp    %edx,%eax
f0128c26:	74 19                	je     f0128c41 <test_kshrink+0xb58>
f0128c28:	68 ac b7 13 f0       	push   $0xf013b7ac
f0128c2d:	68 41 b6 13 f0       	push   $0xf013b641
f0128c32:	68 75 0c 00 00       	push   $0xc75
f0128c37:	68 76 a8 13 f0       	push   $0xf013a876
f0128c3c:	e8 65 75 fd ff       	call   f01001a6 <_panic>

		//set it to 0 again to cancel the bypassing option
		sys_bypassPageFault(0);
f0128c41:	83 ec 0c             	sub    $0xc,%esp
f0128c44:	6a 00                	push   $0x0
f0128c46:	e8 1c 3c fe ff       	call   f010c867 <sys_bypassPageFault>
f0128c4b:	83 c4 10             	add    $0x10,%esp
	}

	//Shrink it again to 2 MB instead of 5 MB
	{
		freeFrames = sys_calculate_free_frames() ;
f0128c4e:	e8 6b 37 fe ff       	call   f010c3be <sys_calculate_free_frames>
f0128c53:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0128c56:	e8 31 b0 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f0128c5b:	89 45 d8             	mov    %eax,-0x28(%ebp)

		kshrink(2*Mega) ;
f0128c5e:	83 ec 0c             	sub    $0xc,%esp
f0128c61:	68 00 00 20 00       	push   $0x200000
f0128c66:	e8 ed e9 fd ff       	call   f0107658 <kshrink>
f0128c6b:	83 c4 10             	add    $0x10,%esp

		assert(pf_calculate_free_frames() - freeDiskFrames == 0) ;
f0128c6e:	e8 19 b0 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f0128c73:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0128c76:	74 19                	je     f0128c91 <test_kshrink+0xba8>
f0128c78:	68 10 b6 13 f0       	push   $0xf013b610
f0128c7d:	68 41 b6 13 f0       	push   $0xf013b641
f0128c82:	68 82 0c 00 00       	push   $0xc82
f0128c87:	68 76 a8 13 f0       	push   $0xf013a876
f0128c8c:	e8 15 75 fd ff       	call   f01001a6 <_panic>
		assert(sys_calculate_free_frames() - freeFrames == 768) ;
f0128c91:	e8 28 37 fe ff       	call   f010c3be <sys_calculate_free_frames>
f0128c96:	89 c2                	mov    %eax,%edx
f0128c98:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0128c9b:	29 c2                	sub    %eax,%edx
f0128c9d:	89 d0                	mov    %edx,%eax
f0128c9f:	3d 00 03 00 00       	cmp    $0x300,%eax
f0128ca4:	74 19                	je     f0128cbf <test_kshrink+0xbd6>
f0128ca6:	68 d8 b7 13 f0       	push   $0xf013b7d8
f0128cab:	68 41 b6 13 f0       	push   $0xf013b641
f0128cb0:	68 83 0c 00 00       	push   $0xc83
f0128cb5:	68 76 a8 13 f0       	push   $0xf013a876
f0128cba:	e8 e7 74 fd ff       	call   f01001a6 <_panic>


	//Allocate after shrinking last var
	{
		//4 MB
		freeFrames = sys_calculate_free_frames() ;
f0128cbf:	e8 fa 36 fe ff       	call   f010c3be <sys_calculate_free_frames>
f0128cc4:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0128cc7:	e8 c0 af fd ff       	call   f0103c8c <pf_calculate_free_frames>
f0128ccc:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[7] = kmalloc(4*Mega);
f0128ccf:	83 ec 0c             	sub    $0xc,%esp
f0128cd2:	68 00 00 40 00       	push   $0x400000
f0128cd7:	e8 e8 e8 fd ff       	call   f01075c4 <kmalloc>
f0128cdc:	83 c4 10             	add    $0x10,%esp
f0128cdf:	89 85 70 fe ff ff    	mov    %eax,-0x190(%ebp)
		cprintf("ACTUAL = %x, DESIRED = %x\n", (uint32) ptr_allocations[7] ,(ACTUAL_START + 7*Mega + 16*kilo + 2*Mega));
f0128ce5:	c7 85 20 ff ff ff 00 	movl   $0x1000,-0xe0(%ebp)
f0128cec:	10 00 00 
f0128cef:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0128cf5:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0128cfa:	89 85 1c ff ff ff    	mov    %eax,-0xe4(%ebp)
f0128d00:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f0128d06:	ba 00 00 00 00       	mov    $0x0,%edx
f0128d0b:	f7 b5 20 ff ff ff    	divl   -0xe0(%ebp)
f0128d11:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f0128d17:	29 d0                	sub    %edx,%eax
f0128d19:	89 c1                	mov    %eax,%ecx
f0128d1b:	c7 85 18 ff ff ff 00 	movl   $0x1000,-0xe8(%ebp)
f0128d22:	10 00 00 
f0128d25:	a0 bc 0e 6c f0       	mov    0xf06c0ebc,%al
f0128d2a:	0f b6 d0             	movzbl %al,%edx
f0128d2d:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f0128d33:	01 d0                	add    %edx,%eax
f0128d35:	48                   	dec    %eax
f0128d36:	89 85 14 ff ff ff    	mov    %eax,-0xec(%ebp)
f0128d3c:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f0128d42:	ba 00 00 00 00       	mov    $0x0,%edx
f0128d47:	f7 b5 18 ff ff ff    	divl   -0xe8(%ebp)
f0128d4d:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f0128d53:	29 d0                	sub    %edx,%eax
f0128d55:	01 c1                	add    %eax,%ecx
f0128d57:	c7 85 10 ff ff ff 00 	movl   $0x1000,-0xf0(%ebp)
f0128d5e:	10 00 00 
f0128d61:	a0 bc 0e 6c f0       	mov    0xf06c0ebc,%al
f0128d66:	0f b6 c0             	movzbl %al,%eax
f0128d69:	c1 e0 04             	shl    $0x4,%eax
f0128d6c:	89 c2                	mov    %eax,%edx
f0128d6e:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f0128d74:	01 d0                	add    %edx,%eax
f0128d76:	48                   	dec    %eax
f0128d77:	89 85 0c ff ff ff    	mov    %eax,-0xf4(%ebp)
f0128d7d:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f0128d83:	ba 00 00 00 00       	mov    $0x0,%edx
f0128d88:	f7 b5 10 ff ff ff    	divl   -0xf0(%ebp)
f0128d8e:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f0128d94:	29 d0                	sub    %edx,%eax
f0128d96:	01 c8                	add    %ecx,%eax
f0128d98:	8d 90 00 80 90 f6    	lea    -0x96f8000(%eax),%edx
f0128d9e:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f0128da4:	83 ec 04             	sub    $0x4,%esp
f0128da7:	52                   	push   %edx
f0128da8:	50                   	push   %eax
f0128da9:	68 08 b8 13 f0       	push   $0xf013b808
f0128dae:	e8 7a 7e fd ff       	call   f0100c2d <cprintf>
f0128db3:	83 c4 10             	add    $0x10,%esp
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 7*Mega + 16*kilo + 2*Mega)) panic("Wrong start address after kshrink()... check the updating of your data structures");
f0128db6:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f0128dbc:	89 c1                	mov    %eax,%ecx
f0128dbe:	c7 85 08 ff ff ff 00 	movl   $0x1000,-0xf8(%ebp)
f0128dc5:	10 00 00 
f0128dc8:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f0128dce:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0128dd3:	89 85 04 ff ff ff    	mov    %eax,-0xfc(%ebp)
f0128dd9:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f0128ddf:	ba 00 00 00 00       	mov    $0x0,%edx
f0128de4:	f7 b5 08 ff ff ff    	divl   -0xf8(%ebp)
f0128dea:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f0128df0:	29 d0                	sub    %edx,%eax
f0128df2:	89 c3                	mov    %eax,%ebx
f0128df4:	c7 85 00 ff ff ff 00 	movl   $0x1000,-0x100(%ebp)
f0128dfb:	10 00 00 
f0128dfe:	a0 bc 0e 6c f0       	mov    0xf06c0ebc,%al
f0128e03:	0f b6 d0             	movzbl %al,%edx
f0128e06:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f0128e0c:	01 d0                	add    %edx,%eax
f0128e0e:	48                   	dec    %eax
f0128e0f:	89 85 fc fe ff ff    	mov    %eax,-0x104(%ebp)
f0128e15:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f0128e1b:	ba 00 00 00 00       	mov    $0x0,%edx
f0128e20:	f7 b5 00 ff ff ff    	divl   -0x100(%ebp)
f0128e26:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f0128e2c:	29 d0                	sub    %edx,%eax
f0128e2e:	01 c3                	add    %eax,%ebx
f0128e30:	c7 85 f8 fe ff ff 00 	movl   $0x1000,-0x108(%ebp)
f0128e37:	10 00 00 
f0128e3a:	a0 bc 0e 6c f0       	mov    0xf06c0ebc,%al
f0128e3f:	0f b6 c0             	movzbl %al,%eax
f0128e42:	c1 e0 04             	shl    $0x4,%eax
f0128e45:	89 c2                	mov    %eax,%edx
f0128e47:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f0128e4d:	01 d0                	add    %edx,%eax
f0128e4f:	48                   	dec    %eax
f0128e50:	89 85 f4 fe ff ff    	mov    %eax,-0x10c(%ebp)
f0128e56:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f0128e5c:	ba 00 00 00 00       	mov    $0x0,%edx
f0128e61:	f7 b5 f8 fe ff ff    	divl   -0x108(%ebp)
f0128e67:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f0128e6d:	29 d0                	sub    %edx,%eax
f0128e6f:	01 d8                	add    %ebx,%eax
f0128e71:	2d 00 80 6f 09       	sub    $0x96f8000,%eax
f0128e76:	39 c1                	cmp    %eax,%ecx
f0128e78:	74 17                	je     f0128e91 <test_kshrink+0xda8>
f0128e7a:	83 ec 04             	sub    $0x4,%esp
f0128e7d:	68 24 b8 13 f0       	push   $0xf013b824
f0128e82:	68 8e 0c 00 00       	push   $0xc8e
f0128e87:	68 76 a8 13 f0       	push   $0xf013a876
f0128e8c:	e8 15 73 fd ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0128e91:	e8 f6 ad fd ff       	call   f0103c8c <pf_calculate_free_frames>
f0128e96:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0128e99:	74 17                	je     f0128eb2 <test_kshrink+0xdc9>
f0128e9b:	83 ec 04             	sub    $0x4,%esp
f0128e9e:	68 90 a8 13 f0       	push   $0xf013a890
f0128ea3:	68 8f 0c 00 00       	push   $0xc8f
f0128ea8:	68 76 a8 13 f0       	push   $0xf013a876
f0128ead:	e8 f4 72 fd ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 4*Mega/PAGE_SIZE) panic("Wrong allocation: pages are not loaded successfully into memory");
f0128eb2:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f0128eb5:	e8 04 35 fe ff       	call   f010c3be <sys_calculate_free_frames>
f0128eba:	29 c3                	sub    %eax,%ebx
f0128ebc:	89 d8                	mov    %ebx,%eax
f0128ebe:	3d 00 04 00 00       	cmp    $0x400,%eax
f0128ec3:	74 17                	je     f0128edc <test_kshrink+0xdf3>
f0128ec5:	83 ec 04             	sub    $0x4,%esp
f0128ec8:	68 f8 a8 13 f0       	push   $0xf013a8f8
f0128ecd:	68 90 0c 00 00       	push   $0xc90
f0128ed2:	68 76 a8 13 f0       	push   $0xf013a876
f0128ed7:	e8 ca 72 fd ff       	call   f01001a6 <_panic>


	//kfree the shrunk variable
	{
		//kfree 2 MB (shrunk)
		freeFrames = sys_calculate_free_frames() ;
f0128edc:	e8 dd 34 fe ff       	call   f010c3be <sys_calculate_free_frames>
f0128ee1:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0128ee4:	e8 a3 ad fd ff       	call   f0103c8c <pf_calculate_free_frames>
f0128ee9:	89 45 d8             	mov    %eax,-0x28(%ebp)
		kfree(ptr_allocations[6]);
f0128eec:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f0128ef2:	83 ec 0c             	sub    $0xc,%esp
f0128ef5:	50                   	push   %eax
f0128ef6:	e8 e3 e6 fd ff       	call   f01075de <kfree>
f0128efb:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0128efe:	e8 89 ad fd ff       	call   f0103c8c <pf_calculate_free_frames>
f0128f03:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0128f06:	74 17                	je     f0128f1f <test_kshrink+0xe36>
f0128f08:	83 ec 04             	sub    $0x4,%esp
f0128f0b:	68 90 a8 13 f0       	push   $0xf013a890
f0128f10:	68 9a 0c 00 00       	push   $0xc9a
f0128f15:	68 76 a8 13 f0       	push   $0xf013a876
f0128f1a:	e8 87 72 fd ff       	call   f01001a6 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512) panic("Wrong kfree: attempt to kfree a non-existing ptr. It should do nothing");
f0128f1f:	e8 9a 34 fe ff       	call   f010c3be <sys_calculate_free_frames>
f0128f24:	89 c2                	mov    %eax,%edx
f0128f26:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0128f29:	29 c2                	sub    %eax,%edx
f0128f2b:	89 d0                	mov    %edx,%eax
f0128f2d:	3d 00 02 00 00       	cmp    $0x200,%eax
f0128f32:	74 17                	je     f0128f4b <test_kshrink+0xe62>
f0128f34:	83 ec 04             	sub    $0x4,%esp
f0128f37:	68 28 b1 13 f0       	push   $0xf013b128
f0128f3c:	68 9b 0c 00 00       	push   $0xc9b
f0128f41:	68 76 a8 13 f0       	push   $0xf013a876
f0128f46:	e8 5b 72 fd ff       	call   f01001a6 <_panic>
	}

	//Shrink last allocated variable to 4 MB - 20 kilo instead of 4 MB
	{
		freeFrames = sys_calculate_free_frames() ;
f0128f4b:	e8 6e 34 fe ff       	call   f010c3be <sys_calculate_free_frames>
f0128f50:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0128f53:	e8 34 ad fd ff       	call   f0103c8c <pf_calculate_free_frames>
f0128f58:	89 45 d8             	mov    %eax,-0x28(%ebp)

		kshrink(4*Mega - 20*kilo) ;
f0128f5b:	83 ec 0c             	sub    $0xc,%esp
f0128f5e:	68 00 b0 3f 00       	push   $0x3fb000
f0128f63:	e8 f0 e6 fd ff       	call   f0107658 <kshrink>
f0128f68:	83 c4 10             	add    $0x10,%esp

		assert(pf_calculate_free_frames() - freeDiskFrames == 0) ;
f0128f6b:	e8 1c ad fd ff       	call   f0103c8c <pf_calculate_free_frames>
f0128f70:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0128f73:	74 19                	je     f0128f8e <test_kshrink+0xea5>
f0128f75:	68 10 b6 13 f0       	push   $0xf013b610
f0128f7a:	68 41 b6 13 f0       	push   $0xf013b641
f0128f7f:	68 a5 0c 00 00       	push   $0xca5
f0128f84:	68 76 a8 13 f0       	push   $0xf013a876
f0128f89:	e8 18 72 fd ff       	call   f01001a6 <_panic>
		assert(sys_calculate_free_frames() - freeFrames == 5) ;
f0128f8e:	e8 2b 34 fe ff       	call   f010c3be <sys_calculate_free_frames>
f0128f93:	89 c2                	mov    %eax,%edx
f0128f95:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0128f98:	29 c2                	sub    %eax,%edx
f0128f9a:	89 d0                	mov    %edx,%eax
f0128f9c:	83 f8 05             	cmp    $0x5,%eax
f0128f9f:	74 19                	je     f0128fba <test_kshrink+0xed1>
f0128fa1:	68 78 b8 13 f0       	push   $0xf013b878
f0128fa6:	68 41 b6 13 f0       	push   $0xf013b641
f0128fab:	68 a6 0c 00 00       	push   $0xca6
f0128fb0:	68 76 a8 13 f0       	push   $0xf013a876
f0128fb5:	e8 ec 71 fd ff       	call   f01001a6 <_panic>
	}

	cprintf("\nCongratulations!! your modification is run successfully.\n");
f0128fba:	83 ec 0c             	sub    $0xc,%esp
f0128fbd:	68 d4 b5 13 f0       	push   $0xf013b5d4
f0128fc2:	e8 66 7c fd ff       	call   f0100c2d <cprintf>
f0128fc7:	83 c4 10             	add    $0x10,%esp

	return 1;
f0128fca:	b8 01 00 00 00       	mov    $0x1,%eax
}
f0128fcf:	8d 65 f8             	lea    -0x8(%ebp),%esp
f0128fd2:	5b                   	pop    %ebx
f0128fd3:	5f                   	pop    %edi
f0128fd4:	5d                   	pop    %ebp
f0128fd5:	c3                   	ret    

f0128fd6 <test_kfreelast>:


int test_kfreelast()
{
f0128fd6:	55                   	push   %ebp
f0128fd7:	89 e5                	mov    %esp,%ebp
f0128fd9:	57                   	push   %edi
f0128fda:	53                   	push   %ebx
f0128fdb:	81 ec 90 02 00 00    	sub    $0x290,%esp
	char minByte = 1<<7;
f0128fe1:	c6 45 eb 80          	movb   $0x80,-0x15(%ebp)
	char maxByte = 0x7F;
f0128fe5:	c6 45 ea 7f          	movb   $0x7f,-0x16(%ebp)
	short minShort = 1<<15 ;
f0128fe9:	66 c7 45 e8 00 80    	movw   $0x8000,-0x18(%ebp)
	short maxShort = 0x7FFF;
f0128fef:	66 c7 45 e6 ff 7f    	movw   $0x7fff,-0x1a(%ebp)
	int minInt = 1<<31 ;
f0128ff5:	c7 45 e0 00 00 00 80 	movl   $0x80000000,-0x20(%ebp)
	int maxInt = 0x7FFFFFFF;
f0128ffc:	c7 45 dc ff ff ff 7f 	movl   $0x7fffffff,-0x24(%ebp)
	char *byteArr, *byteArr2 ;
	short *shortArr, *shortArr2 ;
	int *intArr;
	struct MyStruct *structArr ;
	int lastIndexOfByte, lastIndexOfByte2, lastIndexOfShort, lastIndexOfShort2, lastIndexOfInt, lastIndexOfStruct;
	int start_freeFrames = sys_calculate_free_frames() ;
f0129003:	e8 b6 33 fe ff       	call   f010c3be <sys_calculate_free_frames>
f0129008:	89 45 d8             	mov    %eax,-0x28(%ebp)

	//malloc some spaces
	int i, ce, freeFrames, freeDiskFrames ;
	char* ptr;
	int lastIndices[20] = {0};
f012900b:	8d 95 0c fe ff ff    	lea    -0x1f4(%ebp),%edx
f0129011:	b9 14 00 00 00       	mov    $0x14,%ecx
f0129016:	b8 00 00 00 00       	mov    $0x0,%eax
f012901b:	89 d7                	mov    %edx,%edi
f012901d:	f3 ab                	rep stos %eax,%es:(%edi)
	int sums[20] = {0};
f012901f:	8d 95 bc fd ff ff    	lea    -0x244(%ebp),%edx
f0129025:	b9 14 00 00 00       	mov    $0x14,%ecx
f012902a:	b8 00 00 00 00       	mov    $0x0,%eax
f012902f:	89 d7                	mov    %edx,%edi
f0129031:	f3 ab                	rep stos %eax,%es:(%edi)
	void* ptr_allocations[20] = {0};
f0129033:	8d 95 6c fd ff ff    	lea    -0x294(%ebp),%edx
f0129039:	b9 14 00 00 00       	mov    $0x14,%ecx
f012903e:	b8 00 00 00 00       	mov    $0x0,%eax
f0129043:	89 d7                	mov    %edx,%edi
f0129045:	f3 ab                	rep stos %eax,%es:(%edi)
	{
		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f0129047:	e8 72 33 fe ff       	call   f010c3be <sys_calculate_free_frames>
f012904c:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012904f:	e8 38 ac fd ff       	call   f0103c8c <pf_calculate_free_frames>
f0129054:	89 45 d0             	mov    %eax,-0x30(%ebp)
		ptr_allocations[0] = kmalloc(2*Mega-kilo);
f0129057:	83 ec 0c             	sub    $0xc,%esp
f012905a:	68 00 fc 1f 00       	push   $0x1ffc00
f012905f:	e8 60 e5 fd ff       	call   f01075c4 <kmalloc>
f0129064:	83 c4 10             	add    $0x10,%esp
f0129067:	89 85 6c fd ff ff    	mov    %eax,-0x294(%ebp)
		if ((uint32) ptr_allocations[0] !=  (ACTUAL_START)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f012906d:	8b 85 6c fd ff ff    	mov    -0x294(%ebp),%eax
f0129073:	89 c1                	mov    %eax,%ecx
f0129075:	c7 45 cc 00 10 00 00 	movl   $0x1000,-0x34(%ebp)
f012907c:	8b 45 cc             	mov    -0x34(%ebp),%eax
f012907f:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0129084:	89 45 c8             	mov    %eax,-0x38(%ebp)
f0129087:	8b 45 c8             	mov    -0x38(%ebp),%eax
f012908a:	ba 00 00 00 00       	mov    $0x0,%edx
f012908f:	f7 75 cc             	divl   -0x34(%ebp)
f0129092:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0129095:	29 d0                	sub    %edx,%eax
f0129097:	89 c3                	mov    %eax,%ebx
f0129099:	c7 45 c4 00 10 00 00 	movl   $0x1000,-0x3c(%ebp)
f01290a0:	a0 bc 0e 6c f0       	mov    0xf06c0ebc,%al
f01290a5:	0f b6 d0             	movzbl %al,%edx
f01290a8:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f01290ab:	01 d0                	add    %edx,%eax
f01290ad:	48                   	dec    %eax
f01290ae:	89 45 c0             	mov    %eax,-0x40(%ebp)
f01290b1:	8b 45 c0             	mov    -0x40(%ebp),%eax
f01290b4:	ba 00 00 00 00       	mov    $0x0,%edx
f01290b9:	f7 75 c4             	divl   -0x3c(%ebp)
f01290bc:	8b 45 c0             	mov    -0x40(%ebp),%eax
f01290bf:	29 d0                	sub    %edx,%eax
f01290c1:	01 c3                	add    %eax,%ebx
f01290c3:	c7 45 bc 00 10 00 00 	movl   $0x1000,-0x44(%ebp)
f01290ca:	a0 bc 0e 6c f0       	mov    0xf06c0ebc,%al
f01290cf:	0f b6 c0             	movzbl %al,%eax
f01290d2:	c1 e0 04             	shl    $0x4,%eax
f01290d5:	89 c2                	mov    %eax,%edx
f01290d7:	8b 45 bc             	mov    -0x44(%ebp),%eax
f01290da:	01 d0                	add    %edx,%eax
f01290dc:	48                   	dec    %eax
f01290dd:	89 45 b8             	mov    %eax,-0x48(%ebp)
f01290e0:	8b 45 b8             	mov    -0x48(%ebp),%eax
f01290e3:	ba 00 00 00 00       	mov    $0x0,%edx
f01290e8:	f7 75 bc             	divl   -0x44(%ebp)
f01290eb:	8b 45 b8             	mov    -0x48(%ebp),%eax
f01290ee:	29 d0                	sub    %edx,%eax
f01290f0:	01 d8                	add    %ebx,%eax
f01290f2:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f01290f7:	39 c1                	cmp    %eax,%ecx
f01290f9:	74 17                	je     f0129112 <test_kfreelast+0x13c>
f01290fb:	83 ec 04             	sub    $0x4,%esp
f01290fe:	68 5c a9 13 f0       	push   $0xf013a95c
f0129103:	68 ca 0c 00 00       	push   $0xcca
f0129108:	68 76 a8 13 f0       	push   $0xf013a876
f012910d:	e8 94 70 fd ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0129112:	e8 75 ab fd ff       	call   f0103c8c <pf_calculate_free_frames>
f0129117:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012911a:	74 17                	je     f0129133 <test_kfreelast+0x15d>
f012911c:	83 ec 04             	sub    $0x4,%esp
f012911f:	68 90 a8 13 f0       	push   $0xf013a890
f0129124:	68 cb 0c 00 00       	push   $0xccb
f0129129:	68 76 a8 13 f0       	push   $0xf013a876
f012912e:	e8 73 70 fd ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f0129133:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
f0129136:	e8 83 32 fe ff       	call   f010c3be <sys_calculate_free_frames>
f012913b:	29 c3                	sub    %eax,%ebx
f012913d:	89 d8                	mov    %ebx,%eax
f012913f:	3d 00 02 00 00       	cmp    $0x200,%eax
f0129144:	74 17                	je     f012915d <test_kfreelast+0x187>
f0129146:	83 ec 04             	sub    $0x4,%esp
f0129149:	68 f8 a8 13 f0       	push   $0xf013a8f8
f012914e:	68 cc 0c 00 00       	push   $0xccc
f0129153:	68 76 a8 13 f0       	push   $0xf013a876
f0129158:	e8 49 70 fd ff       	call   f01001a6 <_panic>
		lastIndices[0] = (2*Mega-kilo)/sizeof(char) - 1;
f012915d:	c7 85 0c fe ff ff ff 	movl   $0x1ffbff,-0x1f4(%ebp)
f0129164:	fb 1f 00 

		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f0129167:	e8 52 32 fe ff       	call   f010c3be <sys_calculate_free_frames>
f012916c:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012916f:	e8 18 ab fd ff       	call   f0103c8c <pf_calculate_free_frames>
f0129174:	89 45 d0             	mov    %eax,-0x30(%ebp)
		ptr_allocations[1] = kmalloc(2*Mega-kilo);
f0129177:	83 ec 0c             	sub    $0xc,%esp
f012917a:	68 00 fc 1f 00       	push   $0x1ffc00
f012917f:	e8 40 e4 fd ff       	call   f01075c4 <kmalloc>
f0129184:	83 c4 10             	add    $0x10,%esp
f0129187:	89 85 70 fd ff ff    	mov    %eax,-0x290(%ebp)
		if ((uint32) ptr_allocations[1] != (ACTUAL_START + 2*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f012918d:	8b 85 70 fd ff ff    	mov    -0x290(%ebp),%eax
f0129193:	89 c1                	mov    %eax,%ecx
f0129195:	c7 45 b4 00 10 00 00 	movl   $0x1000,-0x4c(%ebp)
f012919c:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f012919f:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01291a4:	89 45 b0             	mov    %eax,-0x50(%ebp)
f01291a7:	8b 45 b0             	mov    -0x50(%ebp),%eax
f01291aa:	ba 00 00 00 00       	mov    $0x0,%edx
f01291af:	f7 75 b4             	divl   -0x4c(%ebp)
f01291b2:	8b 45 b0             	mov    -0x50(%ebp),%eax
f01291b5:	29 d0                	sub    %edx,%eax
f01291b7:	89 c3                	mov    %eax,%ebx
f01291b9:	c7 45 ac 00 10 00 00 	movl   $0x1000,-0x54(%ebp)
f01291c0:	a0 bc 0e 6c f0       	mov    0xf06c0ebc,%al
f01291c5:	0f b6 d0             	movzbl %al,%edx
f01291c8:	8b 45 ac             	mov    -0x54(%ebp),%eax
f01291cb:	01 d0                	add    %edx,%eax
f01291cd:	48                   	dec    %eax
f01291ce:	89 45 a8             	mov    %eax,-0x58(%ebp)
f01291d1:	8b 45 a8             	mov    -0x58(%ebp),%eax
f01291d4:	ba 00 00 00 00       	mov    $0x0,%edx
f01291d9:	f7 75 ac             	divl   -0x54(%ebp)
f01291dc:	8b 45 a8             	mov    -0x58(%ebp),%eax
f01291df:	29 d0                	sub    %edx,%eax
f01291e1:	01 c3                	add    %eax,%ebx
f01291e3:	c7 45 a4 00 10 00 00 	movl   $0x1000,-0x5c(%ebp)
f01291ea:	a0 bc 0e 6c f0       	mov    0xf06c0ebc,%al
f01291ef:	0f b6 c0             	movzbl %al,%eax
f01291f2:	c1 e0 04             	shl    $0x4,%eax
f01291f5:	89 c2                	mov    %eax,%edx
f01291f7:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f01291fa:	01 d0                	add    %edx,%eax
f01291fc:	48                   	dec    %eax
f01291fd:	89 45 a0             	mov    %eax,-0x60(%ebp)
f0129200:	8b 45 a0             	mov    -0x60(%ebp),%eax
f0129203:	ba 00 00 00 00       	mov    $0x0,%edx
f0129208:	f7 75 a4             	divl   -0x5c(%ebp)
f012920b:	8b 45 a0             	mov    -0x60(%ebp),%eax
f012920e:	29 d0                	sub    %edx,%eax
f0129210:	01 d8                	add    %ebx,%eax
f0129212:	2d 00 c0 df 09       	sub    $0x9dfc000,%eax
f0129217:	39 c1                	cmp    %eax,%ecx
f0129219:	74 17                	je     f0129232 <test_kfreelast+0x25c>
f012921b:	83 ec 04             	sub    $0x4,%esp
f012921e:	68 5c a9 13 f0       	push   $0xf013a95c
f0129223:	68 d3 0c 00 00       	push   $0xcd3
f0129228:	68 76 a8 13 f0       	push   $0xf013a876
f012922d:	e8 74 6f fd ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0129232:	e8 55 aa fd ff       	call   f0103c8c <pf_calculate_free_frames>
f0129237:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012923a:	74 17                	je     f0129253 <test_kfreelast+0x27d>
f012923c:	83 ec 04             	sub    $0x4,%esp
f012923f:	68 90 a8 13 f0       	push   $0xf013a890
f0129244:	68 d4 0c 00 00       	push   $0xcd4
f0129249:	68 76 a8 13 f0       	push   $0xf013a876
f012924e:	e8 53 6f fd ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f0129253:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
f0129256:	e8 63 31 fe ff       	call   f010c3be <sys_calculate_free_frames>
f012925b:	29 c3                	sub    %eax,%ebx
f012925d:	89 d8                	mov    %ebx,%eax
f012925f:	3d 00 02 00 00       	cmp    $0x200,%eax
f0129264:	74 17                	je     f012927d <test_kfreelast+0x2a7>
f0129266:	83 ec 04             	sub    $0x4,%esp
f0129269:	68 f8 a8 13 f0       	push   $0xf013a8f8
f012926e:	68 d5 0c 00 00       	push   $0xcd5
f0129273:	68 76 a8 13 f0       	push   $0xf013a876
f0129278:	e8 29 6f fd ff       	call   f01001a6 <_panic>
		lastIndices[1] = (2*Mega-kilo)/sizeof(char) - 1;
f012927d:	c7 85 10 fe ff ff ff 	movl   $0x1ffbff,-0x1f0(%ebp)
f0129284:	fb 1f 00 

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f0129287:	e8 32 31 fe ff       	call   f010c3be <sys_calculate_free_frames>
f012928c:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012928f:	e8 f8 a9 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f0129294:	89 45 d0             	mov    %eax,-0x30(%ebp)
		ptr_allocations[2] = kmalloc(2*kilo);
f0129297:	83 ec 0c             	sub    $0xc,%esp
f012929a:	68 00 08 00 00       	push   $0x800
f012929f:	e8 20 e3 fd ff       	call   f01075c4 <kmalloc>
f01292a4:	83 c4 10             	add    $0x10,%esp
f01292a7:	89 85 74 fd ff ff    	mov    %eax,-0x28c(%ebp)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01292ad:	8b 85 74 fd ff ff    	mov    -0x28c(%ebp),%eax
f01292b3:	89 c1                	mov    %eax,%ecx
f01292b5:	c7 45 9c 00 10 00 00 	movl   $0x1000,-0x64(%ebp)
f01292bc:	8b 45 9c             	mov    -0x64(%ebp),%eax
f01292bf:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01292c4:	89 45 98             	mov    %eax,-0x68(%ebp)
f01292c7:	8b 45 98             	mov    -0x68(%ebp),%eax
f01292ca:	ba 00 00 00 00       	mov    $0x0,%edx
f01292cf:	f7 75 9c             	divl   -0x64(%ebp)
f01292d2:	8b 45 98             	mov    -0x68(%ebp),%eax
f01292d5:	29 d0                	sub    %edx,%eax
f01292d7:	89 c3                	mov    %eax,%ebx
f01292d9:	c7 45 94 00 10 00 00 	movl   $0x1000,-0x6c(%ebp)
f01292e0:	a0 bc 0e 6c f0       	mov    0xf06c0ebc,%al
f01292e5:	0f b6 d0             	movzbl %al,%edx
f01292e8:	8b 45 94             	mov    -0x6c(%ebp),%eax
f01292eb:	01 d0                	add    %edx,%eax
f01292ed:	48                   	dec    %eax
f01292ee:	89 45 90             	mov    %eax,-0x70(%ebp)
f01292f1:	8b 45 90             	mov    -0x70(%ebp),%eax
f01292f4:	ba 00 00 00 00       	mov    $0x0,%edx
f01292f9:	f7 75 94             	divl   -0x6c(%ebp)
f01292fc:	8b 45 90             	mov    -0x70(%ebp),%eax
f01292ff:	29 d0                	sub    %edx,%eax
f0129301:	01 c3                	add    %eax,%ebx
f0129303:	c7 45 8c 00 10 00 00 	movl   $0x1000,-0x74(%ebp)
f012930a:	a0 bc 0e 6c f0       	mov    0xf06c0ebc,%al
f012930f:	0f b6 c0             	movzbl %al,%eax
f0129312:	c1 e0 04             	shl    $0x4,%eax
f0129315:	89 c2                	mov    %eax,%edx
f0129317:	8b 45 8c             	mov    -0x74(%ebp),%eax
f012931a:	01 d0                	add    %edx,%eax
f012931c:	48                   	dec    %eax
f012931d:	89 45 88             	mov    %eax,-0x78(%ebp)
f0129320:	8b 45 88             	mov    -0x78(%ebp),%eax
f0129323:	ba 00 00 00 00       	mov    $0x0,%edx
f0129328:	f7 75 8c             	divl   -0x74(%ebp)
f012932b:	8b 45 88             	mov    -0x78(%ebp),%eax
f012932e:	29 d0                	sub    %edx,%eax
f0129330:	01 d8                	add    %ebx,%eax
f0129332:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
f0129337:	39 c1                	cmp    %eax,%ecx
f0129339:	74 17                	je     f0129352 <test_kfreelast+0x37c>
f012933b:	83 ec 04             	sub    $0x4,%esp
f012933e:	68 5c a9 13 f0       	push   $0xf013a95c
f0129343:	68 dc 0c 00 00       	push   $0xcdc
f0129348:	68 76 a8 13 f0       	push   $0xf013a876
f012934d:	e8 54 6e fd ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0129352:	e8 35 a9 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f0129357:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012935a:	74 17                	je     f0129373 <test_kfreelast+0x39d>
f012935c:	83 ec 04             	sub    $0x4,%esp
f012935f:	68 90 a8 13 f0       	push   $0xf013a890
f0129364:	68 dd 0c 00 00       	push   $0xcdd
f0129369:	68 76 a8 13 f0       	push   $0xf013a876
f012936e:	e8 33 6e fd ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f0129373:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
f0129376:	e8 43 30 fe ff       	call   f010c3be <sys_calculate_free_frames>
f012937b:	29 c3                	sub    %eax,%ebx
f012937d:	89 d8                	mov    %ebx,%eax
f012937f:	83 f8 01             	cmp    $0x1,%eax
f0129382:	74 17                	je     f012939b <test_kfreelast+0x3c5>
f0129384:	83 ec 04             	sub    $0x4,%esp
f0129387:	68 f8 a8 13 f0       	push   $0xf013a8f8
f012938c:	68 de 0c 00 00       	push   $0xcde
f0129391:	68 76 a8 13 f0       	push   $0xf013a876
f0129396:	e8 0b 6e fd ff       	call   f01001a6 <_panic>
		lastIndices[2] = (2*kilo)/sizeof(char) - 1;
f012939b:	c7 85 14 fe ff ff ff 	movl   $0x7ff,-0x1ec(%ebp)
f01293a2:	07 00 00 
		ptr = (char*)ptr_allocations[2];
f01293a5:	8b 85 74 fd ff ff    	mov    -0x28c(%ebp),%eax
f01293ab:	89 45 84             	mov    %eax,-0x7c(%ebp)
		for (i = 0; i < lastIndices[2]; ++i)
f01293ae:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01293b5:	eb 0e                	jmp    f01293c5 <test_kfreelast+0x3ef>
		{
			ptr[i] = 2 ;
f01293b7:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01293ba:	8b 45 84             	mov    -0x7c(%ebp),%eax
f01293bd:	01 d0                	add    %edx,%eax
f01293bf:	c6 00 02             	movb   $0x2,(%eax)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[2] = (2*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[2];
		for (i = 0; i < lastIndices[2]; ++i)
f01293c2:	ff 45 f4             	incl   -0xc(%ebp)
f01293c5:	8b 85 14 fe ff ff    	mov    -0x1ec(%ebp),%eax
f01293cb:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01293ce:	7f e7                	jg     f01293b7 <test_kfreelast+0x3e1>
		{
			ptr[i] = 2 ;
		}

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f01293d0:	e8 e9 2f fe ff       	call   f010c3be <sys_calculate_free_frames>
f01293d5:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01293d8:	e8 af a8 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f01293dd:	89 45 d0             	mov    %eax,-0x30(%ebp)
		ptr_allocations[3] = kmalloc(2*kilo);
f01293e0:	83 ec 0c             	sub    $0xc,%esp
f01293e3:	68 00 08 00 00       	push   $0x800
f01293e8:	e8 d7 e1 fd ff       	call   f01075c4 <kmalloc>
f01293ed:	83 c4 10             	add    $0x10,%esp
f01293f0:	89 85 78 fd ff ff    	mov    %eax,-0x288(%ebp)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01293f6:	8b 85 78 fd ff ff    	mov    -0x288(%ebp),%eax
f01293fc:	89 c1                	mov    %eax,%ecx
f01293fe:	c7 45 80 00 10 00 00 	movl   $0x1000,-0x80(%ebp)
f0129405:	8b 45 80             	mov    -0x80(%ebp),%eax
f0129408:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012940d:	89 85 7c ff ff ff    	mov    %eax,-0x84(%ebp)
f0129413:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f0129419:	ba 00 00 00 00       	mov    $0x0,%edx
f012941e:	f7 75 80             	divl   -0x80(%ebp)
f0129421:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f0129427:	29 d0                	sub    %edx,%eax
f0129429:	89 c3                	mov    %eax,%ebx
f012942b:	c7 85 78 ff ff ff 00 	movl   $0x1000,-0x88(%ebp)
f0129432:	10 00 00 
f0129435:	a0 bc 0e 6c f0       	mov    0xf06c0ebc,%al
f012943a:	0f b6 d0             	movzbl %al,%edx
f012943d:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f0129443:	01 d0                	add    %edx,%eax
f0129445:	48                   	dec    %eax
f0129446:	89 85 74 ff ff ff    	mov    %eax,-0x8c(%ebp)
f012944c:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f0129452:	ba 00 00 00 00       	mov    $0x0,%edx
f0129457:	f7 b5 78 ff ff ff    	divl   -0x88(%ebp)
f012945d:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f0129463:	29 d0                	sub    %edx,%eax
f0129465:	01 c3                	add    %eax,%ebx
f0129467:	c7 85 70 ff ff ff 00 	movl   $0x1000,-0x90(%ebp)
f012946e:	10 00 00 
f0129471:	a0 bc 0e 6c f0       	mov    0xf06c0ebc,%al
f0129476:	0f b6 c0             	movzbl %al,%eax
f0129479:	c1 e0 04             	shl    $0x4,%eax
f012947c:	89 c2                	mov    %eax,%edx
f012947e:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f0129484:	01 d0                	add    %edx,%eax
f0129486:	48                   	dec    %eax
f0129487:	89 85 6c ff ff ff    	mov    %eax,-0x94(%ebp)
f012948d:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f0129493:	ba 00 00 00 00       	mov    $0x0,%edx
f0129498:	f7 b5 70 ff ff ff    	divl   -0x90(%ebp)
f012949e:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f01294a4:	29 d0                	sub    %edx,%eax
f01294a6:	01 d8                	add    %ebx,%eax
f01294a8:	2d 00 b0 bf 09       	sub    $0x9bfb000,%eax
f01294ad:	39 c1                	cmp    %eax,%ecx
f01294af:	74 17                	je     f01294c8 <test_kfreelast+0x4f2>
f01294b1:	83 ec 04             	sub    $0x4,%esp
f01294b4:	68 5c a9 13 f0       	push   $0xf013a95c
f01294b9:	68 ea 0c 00 00       	push   $0xcea
f01294be:	68 76 a8 13 f0       	push   $0xf013a876
f01294c3:	e8 de 6c fd ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01294c8:	e8 bf a7 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f01294cd:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f01294d0:	74 17                	je     f01294e9 <test_kfreelast+0x513>
f01294d2:	83 ec 04             	sub    $0x4,%esp
f01294d5:	68 90 a8 13 f0       	push   $0xf013a890
f01294da:	68 eb 0c 00 00       	push   $0xceb
f01294df:	68 76 a8 13 f0       	push   $0xf013a876
f01294e4:	e8 bd 6c fd ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f01294e9:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
f01294ec:	e8 cd 2e fe ff       	call   f010c3be <sys_calculate_free_frames>
f01294f1:	29 c3                	sub    %eax,%ebx
f01294f3:	89 d8                	mov    %ebx,%eax
f01294f5:	83 f8 01             	cmp    $0x1,%eax
f01294f8:	74 17                	je     f0129511 <test_kfreelast+0x53b>
f01294fa:	83 ec 04             	sub    $0x4,%esp
f01294fd:	68 f8 a8 13 f0       	push   $0xf013a8f8
f0129502:	68 ec 0c 00 00       	push   $0xcec
f0129507:	68 76 a8 13 f0       	push   $0xf013a876
f012950c:	e8 95 6c fd ff       	call   f01001a6 <_panic>
		lastIndices[3] = (2*kilo)/sizeof(char) - 1;
f0129511:	c7 85 18 fe ff ff ff 	movl   $0x7ff,-0x1e8(%ebp)
f0129518:	07 00 00 
		ptr = (char*)ptr_allocations[3];
f012951b:	8b 85 78 fd ff ff    	mov    -0x288(%ebp),%eax
f0129521:	89 45 84             	mov    %eax,-0x7c(%ebp)
		for (i = 0; i < lastIndices[3]; ++i)
f0129524:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012952b:	eb 0e                	jmp    f012953b <test_kfreelast+0x565>
		{
			ptr[i] = 3 ;
f012952d:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0129530:	8b 45 84             	mov    -0x7c(%ebp),%eax
f0129533:	01 d0                	add    %edx,%eax
f0129535:	c6 00 03             	movb   $0x3,(%eax)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[3] = (2*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[3];
		for (i = 0; i < lastIndices[3]; ++i)
f0129538:	ff 45 f4             	incl   -0xc(%ebp)
f012953b:	8b 85 18 fe ff ff    	mov    -0x1e8(%ebp),%eax
f0129541:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0129544:	7f e7                	jg     f012952d <test_kfreelast+0x557>
		{
			ptr[i] = 3 ;
		}

		//7 KB
		freeFrames = sys_calculate_free_frames() ;
f0129546:	e8 73 2e fe ff       	call   f010c3be <sys_calculate_free_frames>
f012954b:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012954e:	e8 39 a7 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f0129553:	89 45 d0             	mov    %eax,-0x30(%ebp)
		ptr_allocations[4] = kmalloc(7*kilo);
f0129556:	83 ec 0c             	sub    $0xc,%esp
f0129559:	68 00 1c 00 00       	push   $0x1c00
f012955e:	e8 61 e0 fd ff       	call   f01075c4 <kmalloc>
f0129563:	83 c4 10             	add    $0x10,%esp
f0129566:	89 85 7c fd ff ff    	mov    %eax,-0x284(%ebp)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f012956c:	8b 85 7c fd ff ff    	mov    -0x284(%ebp),%eax
f0129572:	89 c1                	mov    %eax,%ecx
f0129574:	c7 85 68 ff ff ff 00 	movl   $0x1000,-0x98(%ebp)
f012957b:	10 00 00 
f012957e:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f0129584:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0129589:	89 85 64 ff ff ff    	mov    %eax,-0x9c(%ebp)
f012958f:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f0129595:	ba 00 00 00 00       	mov    $0x0,%edx
f012959a:	f7 b5 68 ff ff ff    	divl   -0x98(%ebp)
f01295a0:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f01295a6:	29 d0                	sub    %edx,%eax
f01295a8:	89 c3                	mov    %eax,%ebx
f01295aa:	c7 85 60 ff ff ff 00 	movl   $0x1000,-0xa0(%ebp)
f01295b1:	10 00 00 
f01295b4:	a0 bc 0e 6c f0       	mov    0xf06c0ebc,%al
f01295b9:	0f b6 d0             	movzbl %al,%edx
f01295bc:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f01295c2:	01 d0                	add    %edx,%eax
f01295c4:	48                   	dec    %eax
f01295c5:	89 85 5c ff ff ff    	mov    %eax,-0xa4(%ebp)
f01295cb:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f01295d1:	ba 00 00 00 00       	mov    $0x0,%edx
f01295d6:	f7 b5 60 ff ff ff    	divl   -0xa0(%ebp)
f01295dc:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f01295e2:	29 d0                	sub    %edx,%eax
f01295e4:	01 c3                	add    %eax,%ebx
f01295e6:	c7 85 58 ff ff ff 00 	movl   $0x1000,-0xa8(%ebp)
f01295ed:	10 00 00 
f01295f0:	a0 bc 0e 6c f0       	mov    0xf06c0ebc,%al
f01295f5:	0f b6 c0             	movzbl %al,%eax
f01295f8:	c1 e0 04             	shl    $0x4,%eax
f01295fb:	89 c2                	mov    %eax,%edx
f01295fd:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f0129603:	01 d0                	add    %edx,%eax
f0129605:	48                   	dec    %eax
f0129606:	89 85 54 ff ff ff    	mov    %eax,-0xac(%ebp)
f012960c:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f0129612:	ba 00 00 00 00       	mov    $0x0,%edx
f0129617:	f7 b5 58 ff ff ff    	divl   -0xa8(%ebp)
f012961d:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f0129623:	29 d0                	sub    %edx,%eax
f0129625:	01 d8                	add    %ebx,%eax
f0129627:	2d 00 a0 bf 09       	sub    $0x9bfa000,%eax
f012962c:	39 c1                	cmp    %eax,%ecx
f012962e:	74 17                	je     f0129647 <test_kfreelast+0x671>
f0129630:	83 ec 04             	sub    $0x4,%esp
f0129633:	68 5c a9 13 f0       	push   $0xf013a95c
f0129638:	68 f8 0c 00 00       	push   $0xcf8
f012963d:	68 76 a8 13 f0       	push   $0xf013a876
f0129642:	e8 5f 6b fd ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0129647:	e8 40 a6 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f012964c:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012964f:	74 17                	je     f0129668 <test_kfreelast+0x692>
f0129651:	83 ec 04             	sub    $0x4,%esp
f0129654:	68 90 a8 13 f0       	push   $0xf013a890
f0129659:	68 f9 0c 00 00       	push   $0xcf9
f012965e:	68 76 a8 13 f0       	push   $0xf013a876
f0129663:	e8 3e 6b fd ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: pages are not loaded successfully into memory");
f0129668:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
f012966b:	e8 4e 2d fe ff       	call   f010c3be <sys_calculate_free_frames>
f0129670:	29 c3                	sub    %eax,%ebx
f0129672:	89 d8                	mov    %ebx,%eax
f0129674:	83 f8 02             	cmp    $0x2,%eax
f0129677:	74 17                	je     f0129690 <test_kfreelast+0x6ba>
f0129679:	83 ec 04             	sub    $0x4,%esp
f012967c:	68 f8 a8 13 f0       	push   $0xf013a8f8
f0129681:	68 fa 0c 00 00       	push   $0xcfa
f0129686:	68 76 a8 13 f0       	push   $0xf013a876
f012968b:	e8 16 6b fd ff       	call   f01001a6 <_panic>
		lastIndices[4] = (7*kilo)/sizeof(char) - 1;
f0129690:	c7 85 1c fe ff ff ff 	movl   $0x1bff,-0x1e4(%ebp)
f0129697:	1b 00 00 
		ptr = (char*)ptr_allocations[4];
f012969a:	8b 85 7c fd ff ff    	mov    -0x284(%ebp),%eax
f01296a0:	89 45 84             	mov    %eax,-0x7c(%ebp)
		for (i = 0; i < lastIndices[4]; ++i)
f01296a3:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01296aa:	eb 0e                	jmp    f01296ba <test_kfreelast+0x6e4>
		{
			ptr[i] = 4 ;
f01296ac:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01296af:	8b 45 84             	mov    -0x7c(%ebp),%eax
f01296b2:	01 d0                	add    %edx,%eax
f01296b4:	c6 00 04             	movb   $0x4,(%eax)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[4] = (7*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[4];
		for (i = 0; i < lastIndices[4]; ++i)
f01296b7:	ff 45 f4             	incl   -0xc(%ebp)
f01296ba:	8b 85 1c fe ff ff    	mov    -0x1e4(%ebp),%eax
f01296c0:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01296c3:	7f e7                	jg     f01296ac <test_kfreelast+0x6d6>
		{
			ptr[i] = 4 ;
		}

		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f01296c5:	e8 f4 2c fe ff       	call   f010c3be <sys_calculate_free_frames>
f01296ca:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01296cd:	e8 ba a5 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f01296d2:	89 45 d0             	mov    %eax,-0x30(%ebp)
		ptr_allocations[5] = kmalloc(3*Mega-kilo);
f01296d5:	83 ec 0c             	sub    $0xc,%esp
f01296d8:	68 00 fc 2f 00       	push   $0x2ffc00
f01296dd:	e8 e2 de fd ff       	call   f01075c4 <kmalloc>
f01296e2:	83 c4 10             	add    $0x10,%esp
f01296e5:	89 85 80 fd ff ff    	mov    %eax,-0x280(%ebp)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo) ) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01296eb:	8b 85 80 fd ff ff    	mov    -0x280(%ebp),%eax
f01296f1:	89 c1                	mov    %eax,%ecx
f01296f3:	c7 85 50 ff ff ff 00 	movl   $0x1000,-0xb0(%ebp)
f01296fa:	10 00 00 
f01296fd:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f0129703:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0129708:	89 85 4c ff ff ff    	mov    %eax,-0xb4(%ebp)
f012970e:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0129714:	ba 00 00 00 00       	mov    $0x0,%edx
f0129719:	f7 b5 50 ff ff ff    	divl   -0xb0(%ebp)
f012971f:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0129725:	29 d0                	sub    %edx,%eax
f0129727:	89 c3                	mov    %eax,%ebx
f0129729:	c7 85 48 ff ff ff 00 	movl   $0x1000,-0xb8(%ebp)
f0129730:	10 00 00 
f0129733:	a0 bc 0e 6c f0       	mov    0xf06c0ebc,%al
f0129738:	0f b6 d0             	movzbl %al,%edx
f012973b:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f0129741:	01 d0                	add    %edx,%eax
f0129743:	48                   	dec    %eax
f0129744:	89 85 44 ff ff ff    	mov    %eax,-0xbc(%ebp)
f012974a:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0129750:	ba 00 00 00 00       	mov    $0x0,%edx
f0129755:	f7 b5 48 ff ff ff    	divl   -0xb8(%ebp)
f012975b:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0129761:	29 d0                	sub    %edx,%eax
f0129763:	01 c3                	add    %eax,%ebx
f0129765:	c7 85 40 ff ff ff 00 	movl   $0x1000,-0xc0(%ebp)
f012976c:	10 00 00 
f012976f:	a0 bc 0e 6c f0       	mov    0xf06c0ebc,%al
f0129774:	0f b6 c0             	movzbl %al,%eax
f0129777:	c1 e0 04             	shl    $0x4,%eax
f012977a:	89 c2                	mov    %eax,%edx
f012977c:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0129782:	01 d0                	add    %edx,%eax
f0129784:	48                   	dec    %eax
f0129785:	89 85 3c ff ff ff    	mov    %eax,-0xc4(%ebp)
f012978b:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f0129791:	ba 00 00 00 00       	mov    $0x0,%edx
f0129796:	f7 b5 40 ff ff ff    	divl   -0xc0(%ebp)
f012979c:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f01297a2:	29 d0                	sub    %edx,%eax
f01297a4:	01 d8                	add    %ebx,%eax
f01297a6:	2d 00 80 bf 09       	sub    $0x9bf8000,%eax
f01297ab:	39 c1                	cmp    %eax,%ecx
f01297ad:	74 17                	je     f01297c6 <test_kfreelast+0x7f0>
f01297af:	83 ec 04             	sub    $0x4,%esp
f01297b2:	68 5c a9 13 f0       	push   $0xf013a95c
f01297b7:	68 06 0d 00 00       	push   $0xd06
f01297bc:	68 76 a8 13 f0       	push   $0xf013a876
f01297c1:	e8 e0 69 fd ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01297c6:	e8 c1 a4 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f01297cb:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f01297ce:	74 17                	je     f01297e7 <test_kfreelast+0x811>
f01297d0:	83 ec 04             	sub    $0x4,%esp
f01297d3:	68 90 a8 13 f0       	push   $0xf013a890
f01297d8:	68 07 0d 00 00       	push   $0xd07
f01297dd:	68 76 a8 13 f0       	push   $0xf013a876
f01297e2:	e8 bf 69 fd ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
f01297e7:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
f01297ea:	e8 cf 2b fe ff       	call   f010c3be <sys_calculate_free_frames>
f01297ef:	29 c3                	sub    %eax,%ebx
f01297f1:	89 d8                	mov    %ebx,%eax
f01297f3:	3d 00 03 00 00       	cmp    $0x300,%eax
f01297f8:	74 17                	je     f0129811 <test_kfreelast+0x83b>
f01297fa:	83 ec 04             	sub    $0x4,%esp
f01297fd:	68 f8 a8 13 f0       	push   $0xf013a8f8
f0129802:	68 08 0d 00 00       	push   $0xd08
f0129807:	68 76 a8 13 f0       	push   $0xf013a876
f012980c:	e8 95 69 fd ff       	call   f01001a6 <_panic>
		lastIndices[5] = (3*Mega-kilo)/sizeof(char) - 1;
f0129811:	c7 85 20 fe ff ff ff 	movl   $0x2ffbff,-0x1e0(%ebp)
f0129818:	fb 2f 00 
		ptr = (char*)ptr_allocations[5];
f012981b:	8b 85 80 fd ff ff    	mov    -0x280(%ebp),%eax
f0129821:	89 45 84             	mov    %eax,-0x7c(%ebp)
		for (i = 0; i < lastIndices[5]; ++i)
f0129824:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012982b:	eb 0e                	jmp    f012983b <test_kfreelast+0x865>
		{
			ptr[i] = 5 ;
f012982d:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0129830:	8b 45 84             	mov    -0x7c(%ebp),%eax
f0129833:	01 d0                	add    %edx,%eax
f0129835:	c6 00 05             	movb   $0x5,(%eax)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo) ) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[5] = (3*Mega-kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[5];
		for (i = 0; i < lastIndices[5]; ++i)
f0129838:	ff 45 f4             	incl   -0xc(%ebp)
f012983b:	8b 85 20 fe ff ff    	mov    -0x1e0(%ebp),%eax
f0129841:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0129844:	7f e7                	jg     f012982d <test_kfreelast+0x857>
		{
			ptr[i] = 5 ;
		}

		//6 MB
		freeFrames = sys_calculate_free_frames() ;
f0129846:	e8 73 2b fe ff       	call   f010c3be <sys_calculate_free_frames>
f012984b:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012984e:	e8 39 a4 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f0129853:	89 45 d0             	mov    %eax,-0x30(%ebp)
		ptr_allocations[6] = kmalloc(6*Mega-kilo);
f0129856:	83 ec 0c             	sub    $0xc,%esp
f0129859:	68 00 fc 5f 00       	push   $0x5ffc00
f012985e:	e8 61 dd fd ff       	call   f01075c4 <kmalloc>
f0129863:	83 c4 10             	add    $0x10,%esp
f0129866:	89 85 84 fd ff ff    	mov    %eax,-0x27c(%ebp)
		if ((uint32) ptr_allocations[6] != (ACTUAL_START + 7*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f012986c:	8b 85 84 fd ff ff    	mov    -0x27c(%ebp),%eax
f0129872:	89 c1                	mov    %eax,%ecx
f0129874:	c7 85 38 ff ff ff 00 	movl   $0x1000,-0xc8(%ebp)
f012987b:	10 00 00 
f012987e:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f0129884:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0129889:	89 85 34 ff ff ff    	mov    %eax,-0xcc(%ebp)
f012988f:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f0129895:	ba 00 00 00 00       	mov    $0x0,%edx
f012989a:	f7 b5 38 ff ff ff    	divl   -0xc8(%ebp)
f01298a0:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f01298a6:	29 d0                	sub    %edx,%eax
f01298a8:	89 c3                	mov    %eax,%ebx
f01298aa:	c7 85 30 ff ff ff 00 	movl   $0x1000,-0xd0(%ebp)
f01298b1:	10 00 00 
f01298b4:	a0 bc 0e 6c f0       	mov    0xf06c0ebc,%al
f01298b9:	0f b6 d0             	movzbl %al,%edx
f01298bc:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f01298c2:	01 d0                	add    %edx,%eax
f01298c4:	48                   	dec    %eax
f01298c5:	89 85 2c ff ff ff    	mov    %eax,-0xd4(%ebp)
f01298cb:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f01298d1:	ba 00 00 00 00       	mov    $0x0,%edx
f01298d6:	f7 b5 30 ff ff ff    	divl   -0xd0(%ebp)
f01298dc:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f01298e2:	29 d0                	sub    %edx,%eax
f01298e4:	01 c3                	add    %eax,%ebx
f01298e6:	c7 85 28 ff ff ff 00 	movl   $0x1000,-0xd8(%ebp)
f01298ed:	10 00 00 
f01298f0:	a0 bc 0e 6c f0       	mov    0xf06c0ebc,%al
f01298f5:	0f b6 c0             	movzbl %al,%eax
f01298f8:	c1 e0 04             	shl    $0x4,%eax
f01298fb:	89 c2                	mov    %eax,%edx
f01298fd:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f0129903:	01 d0                	add    %edx,%eax
f0129905:	48                   	dec    %eax
f0129906:	89 85 24 ff ff ff    	mov    %eax,-0xdc(%ebp)
f012990c:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0129912:	ba 00 00 00 00       	mov    $0x0,%edx
f0129917:	f7 b5 28 ff ff ff    	divl   -0xd8(%ebp)
f012991d:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0129923:	29 d0                	sub    %edx,%eax
f0129925:	01 d8                	add    %ebx,%eax
f0129927:	2d 00 80 8f 09       	sub    $0x98f8000,%eax
f012992c:	39 c1                	cmp    %eax,%ecx
f012992e:	74 17                	je     f0129947 <test_kfreelast+0x971>
f0129930:	83 ec 04             	sub    $0x4,%esp
f0129933:	68 5c a9 13 f0       	push   $0xf013a95c
f0129938:	68 14 0d 00 00       	push   $0xd14
f012993d:	68 76 a8 13 f0       	push   $0xf013a876
f0129942:	e8 5f 68 fd ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0129947:	e8 40 a3 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f012994c:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012994f:	74 17                	je     f0129968 <test_kfreelast+0x992>
f0129951:	83 ec 04             	sub    $0x4,%esp
f0129954:	68 90 a8 13 f0       	push   $0xf013a890
f0129959:	68 15 0d 00 00       	push   $0xd15
f012995e:	68 76 a8 13 f0       	push   $0xf013a876
f0129963:	e8 3e 68 fd ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1536) panic("Wrong allocation: pages are not loaded successfully into memory");
f0129968:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
f012996b:	e8 4e 2a fe ff       	call   f010c3be <sys_calculate_free_frames>
f0129970:	29 c3                	sub    %eax,%ebx
f0129972:	89 d8                	mov    %ebx,%eax
f0129974:	3d 00 06 00 00       	cmp    $0x600,%eax
f0129979:	74 17                	je     f0129992 <test_kfreelast+0x9bc>
f012997b:	83 ec 04             	sub    $0x4,%esp
f012997e:	68 f8 a8 13 f0       	push   $0xf013a8f8
f0129983:	68 16 0d 00 00       	push   $0xd16
f0129988:	68 76 a8 13 f0       	push   $0xf013a876
f012998d:	e8 14 68 fd ff       	call   f01001a6 <_panic>
		lastIndices[6] = (6*Mega-kilo)/sizeof(char) - 1;
f0129992:	c7 85 24 fe ff ff ff 	movl   $0x5ffbff,-0x1dc(%ebp)
f0129999:	fb 5f 00 

		//14 KB
		freeFrames = sys_calculate_free_frames() ;
f012999c:	e8 1d 2a fe ff       	call   f010c3be <sys_calculate_free_frames>
f01299a1:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01299a4:	e8 e3 a2 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f01299a9:	89 45 d0             	mov    %eax,-0x30(%ebp)
		ptr_allocations[7] = kmalloc(14*kilo);
f01299ac:	83 ec 0c             	sub    $0xc,%esp
f01299af:	68 00 38 00 00       	push   $0x3800
f01299b4:	e8 0b dc fd ff       	call   f01075c4 <kmalloc>
f01299b9:	83 c4 10             	add    $0x10,%esp
f01299bc:	89 85 88 fd ff ff    	mov    %eax,-0x278(%ebp)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 13*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01299c2:	8b 85 88 fd ff ff    	mov    -0x278(%ebp),%eax
f01299c8:	89 c1                	mov    %eax,%ecx
f01299ca:	c7 85 20 ff ff ff 00 	movl   $0x1000,-0xe0(%ebp)
f01299d1:	10 00 00 
f01299d4:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f01299da:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01299df:	89 85 1c ff ff ff    	mov    %eax,-0xe4(%ebp)
f01299e5:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f01299eb:	ba 00 00 00 00       	mov    $0x0,%edx
f01299f0:	f7 b5 20 ff ff ff    	divl   -0xe0(%ebp)
f01299f6:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f01299fc:	29 d0                	sub    %edx,%eax
f01299fe:	89 c3                	mov    %eax,%ebx
f0129a00:	c7 85 18 ff ff ff 00 	movl   $0x1000,-0xe8(%ebp)
f0129a07:	10 00 00 
f0129a0a:	a0 bc 0e 6c f0       	mov    0xf06c0ebc,%al
f0129a0f:	0f b6 d0             	movzbl %al,%edx
f0129a12:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f0129a18:	01 d0                	add    %edx,%eax
f0129a1a:	48                   	dec    %eax
f0129a1b:	89 85 14 ff ff ff    	mov    %eax,-0xec(%ebp)
f0129a21:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f0129a27:	ba 00 00 00 00       	mov    $0x0,%edx
f0129a2c:	f7 b5 18 ff ff ff    	divl   -0xe8(%ebp)
f0129a32:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f0129a38:	29 d0                	sub    %edx,%eax
f0129a3a:	01 c3                	add    %eax,%ebx
f0129a3c:	c7 85 10 ff ff ff 00 	movl   $0x1000,-0xf0(%ebp)
f0129a43:	10 00 00 
f0129a46:	a0 bc 0e 6c f0       	mov    0xf06c0ebc,%al
f0129a4b:	0f b6 c0             	movzbl %al,%eax
f0129a4e:	c1 e0 04             	shl    $0x4,%eax
f0129a51:	89 c2                	mov    %eax,%edx
f0129a53:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f0129a59:	01 d0                	add    %edx,%eax
f0129a5b:	48                   	dec    %eax
f0129a5c:	89 85 0c ff ff ff    	mov    %eax,-0xf4(%ebp)
f0129a62:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f0129a68:	ba 00 00 00 00       	mov    $0x0,%edx
f0129a6d:	f7 b5 10 ff ff ff    	divl   -0xf0(%ebp)
f0129a73:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f0129a79:	29 d0                	sub    %edx,%eax
f0129a7b:	01 d8                	add    %ebx,%eax
f0129a7d:	2d 00 80 2f 09       	sub    $0x92f8000,%eax
f0129a82:	39 c1                	cmp    %eax,%ecx
f0129a84:	74 17                	je     f0129a9d <test_kfreelast+0xac7>
f0129a86:	83 ec 04             	sub    $0x4,%esp
f0129a89:	68 5c a9 13 f0       	push   $0xf013a95c
f0129a8e:	68 1d 0d 00 00       	push   $0xd1d
f0129a93:	68 76 a8 13 f0       	push   $0xf013a876
f0129a98:	e8 09 67 fd ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0129a9d:	e8 ea a1 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f0129aa2:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f0129aa5:	74 17                	je     f0129abe <test_kfreelast+0xae8>
f0129aa7:	83 ec 04             	sub    $0x4,%esp
f0129aaa:	68 90 a8 13 f0       	push   $0xf013a890
f0129aaf:	68 1e 0d 00 00       	push   $0xd1e
f0129ab4:	68 76 a8 13 f0       	push   $0xf013a876
f0129ab9:	e8 e8 66 fd ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 4) panic("Wrong allocation: pages are not loaded successfully into memory");
f0129abe:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
f0129ac1:	e8 f8 28 fe ff       	call   f010c3be <sys_calculate_free_frames>
f0129ac6:	29 c3                	sub    %eax,%ebx
f0129ac8:	89 d8                	mov    %ebx,%eax
f0129aca:	83 f8 04             	cmp    $0x4,%eax
f0129acd:	74 17                	je     f0129ae6 <test_kfreelast+0xb10>
f0129acf:	83 ec 04             	sub    $0x4,%esp
f0129ad2:	68 f8 a8 13 f0       	push   $0xf013a8f8
f0129ad7:	68 1f 0d 00 00       	push   $0xd1f
f0129adc:	68 76 a8 13 f0       	push   $0xf013a876
f0129ae1:	e8 c0 66 fd ff       	call   f01001a6 <_panic>
		lastIndices[7] = (14*kilo)/sizeof(char) - 1;
f0129ae6:	c7 85 28 fe ff ff ff 	movl   $0x37ff,-0x1d8(%ebp)
f0129aed:	37 00 00 
		ptr = (char*)ptr_allocations[7];
f0129af0:	8b 85 88 fd ff ff    	mov    -0x278(%ebp),%eax
f0129af6:	89 45 84             	mov    %eax,-0x7c(%ebp)
		for (i = 0; i < lastIndices[7]; ++i)
f0129af9:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0129b00:	eb 0e                	jmp    f0129b10 <test_kfreelast+0xb3a>
		{
			ptr[i] = 7 ;
f0129b02:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0129b05:	8b 45 84             	mov    -0x7c(%ebp),%eax
f0129b08:	01 d0                	add    %edx,%eax
f0129b0a:	c6 00 07             	movb   $0x7,(%eax)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 13*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 4) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[7] = (14*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[7];
		for (i = 0; i < lastIndices[7]; ++i)
f0129b0d:	ff 45 f4             	incl   -0xc(%ebp)
f0129b10:	8b 85 28 fe ff ff    	mov    -0x1d8(%ebp),%eax
f0129b16:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0129b19:	7f e7                	jg     f0129b02 <test_kfreelast+0xb2c>
	}

	//kfree some of the allocated spaces
	{
		//kfree 1st 2 MB
		int freeFrames = sys_calculate_free_frames() ;
f0129b1b:	e8 9e 28 fe ff       	call   f010c3be <sys_calculate_free_frames>
f0129b20:	89 85 08 ff ff ff    	mov    %eax,-0xf8(%ebp)
		int freeDiskFrames = pf_calculate_free_frames() ;
f0129b26:	e8 61 a1 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f0129b2b:	89 85 04 ff ff ff    	mov    %eax,-0xfc(%ebp)
		kfree(ptr_allocations[0]);
f0129b31:	8b 85 6c fd ff ff    	mov    -0x294(%ebp),%eax
f0129b37:	83 ec 0c             	sub    $0xc,%esp
f0129b3a:	50                   	push   %eax
f0129b3b:	e8 9e da fd ff       	call   f01075de <kfree>
f0129b40:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0129b43:	e8 44 a1 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f0129b48:	3b 85 04 ff ff ff    	cmp    -0xfc(%ebp),%eax
f0129b4e:	74 17                	je     f0129b67 <test_kfreelast+0xb91>
f0129b50:	83 ec 04             	sub    $0x4,%esp
f0129b53:	68 90 a8 13 f0       	push   $0xf013a890
f0129b58:	68 2e 0d 00 00       	push   $0xd2e
f0129b5d:	68 76 a8 13 f0       	push   $0xf013a876
f0129b62:	e8 3f 66 fd ff       	call   f01001a6 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512 ) panic("Wrong kfree: pages in memory are not freed correctly");
f0129b67:	e8 52 28 fe ff       	call   f010c3be <sys_calculate_free_frames>
f0129b6c:	89 c2                	mov    %eax,%edx
f0129b6e:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f0129b74:	29 c2                	sub    %eax,%edx
f0129b76:	89 d0                	mov    %edx,%eax
f0129b78:	3d 00 02 00 00       	cmp    $0x200,%eax
f0129b7d:	74 17                	je     f0129b96 <test_kfreelast+0xbc0>
f0129b7f:	83 ec 04             	sub    $0x4,%esp
f0129b82:	68 00 b0 13 f0       	push   $0xf013b000
f0129b87:	68 2f 0d 00 00       	push   $0xd2f
f0129b8c:	68 76 a8 13 f0       	push   $0xf013a876
f0129b91:	e8 10 66 fd ff       	call   f01001a6 <_panic>

		//kfree 2nd 2 MB
		freeFrames = sys_calculate_free_frames() ;
f0129b96:	e8 23 28 fe ff       	call   f010c3be <sys_calculate_free_frames>
f0129b9b:	89 85 08 ff ff ff    	mov    %eax,-0xf8(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0129ba1:	e8 e6 a0 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f0129ba6:	89 85 04 ff ff ff    	mov    %eax,-0xfc(%ebp)
		kfree(ptr_allocations[1]);
f0129bac:	8b 85 70 fd ff ff    	mov    -0x290(%ebp),%eax
f0129bb2:	83 ec 0c             	sub    $0xc,%esp
f0129bb5:	50                   	push   %eax
f0129bb6:	e8 23 da fd ff       	call   f01075de <kfree>
f0129bbb:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0129bbe:	e8 c9 a0 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f0129bc3:	3b 85 04 ff ff ff    	cmp    -0xfc(%ebp),%eax
f0129bc9:	74 17                	je     f0129be2 <test_kfreelast+0xc0c>
f0129bcb:	83 ec 04             	sub    $0x4,%esp
f0129bce:	68 90 a8 13 f0       	push   $0xf013a890
f0129bd3:	68 35 0d 00 00       	push   $0xd35
f0129bd8:	68 76 a8 13 f0       	push   $0xf013a876
f0129bdd:	e8 c4 65 fd ff       	call   f01001a6 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512) panic("Wrong kfree: pages in memory are not freed correctly");
f0129be2:	e8 d7 27 fe ff       	call   f010c3be <sys_calculate_free_frames>
f0129be7:	89 c2                	mov    %eax,%edx
f0129be9:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f0129bef:	29 c2                	sub    %eax,%edx
f0129bf1:	89 d0                	mov    %edx,%eax
f0129bf3:	3d 00 02 00 00       	cmp    $0x200,%eax
f0129bf8:	74 17                	je     f0129c11 <test_kfreelast+0xc3b>
f0129bfa:	83 ec 04             	sub    $0x4,%esp
f0129bfd:	68 00 b0 13 f0       	push   $0xf013b000
f0129c02:	68 36 0d 00 00       	push   $0xd36
f0129c07:	68 76 a8 13 f0       	push   $0xf013a876
f0129c0c:	e8 95 65 fd ff       	call   f01001a6 <_panic>

		//kfree 6 MB
		freeFrames = sys_calculate_free_frames() ;
f0129c11:	e8 a8 27 fe ff       	call   f010c3be <sys_calculate_free_frames>
f0129c16:	89 85 08 ff ff ff    	mov    %eax,-0xf8(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0129c1c:	e8 6b a0 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f0129c21:	89 85 04 ff ff ff    	mov    %eax,-0xfc(%ebp)
		kfree(ptr_allocations[6]);
f0129c27:	8b 85 84 fd ff ff    	mov    -0x27c(%ebp),%eax
f0129c2d:	83 ec 0c             	sub    $0xc,%esp
f0129c30:	50                   	push   %eax
f0129c31:	e8 a8 d9 fd ff       	call   f01075de <kfree>
f0129c36:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0129c39:	e8 4e a0 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f0129c3e:	3b 85 04 ff ff ff    	cmp    -0xfc(%ebp),%eax
f0129c44:	74 17                	je     f0129c5d <test_kfreelast+0xc87>
f0129c46:	83 ec 04             	sub    $0x4,%esp
f0129c49:	68 90 a8 13 f0       	push   $0xf013a890
f0129c4e:	68 3c 0d 00 00       	push   $0xd3c
f0129c53:	68 76 a8 13 f0       	push   $0xf013a876
f0129c58:	e8 49 65 fd ff       	call   f01001a6 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 6*Mega/4096) panic("Wrong kfree: pages in memory are not freed correctly");
f0129c5d:	e8 5c 27 fe ff       	call   f010c3be <sys_calculate_free_frames>
f0129c62:	89 c2                	mov    %eax,%edx
f0129c64:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f0129c6a:	29 c2                	sub    %eax,%edx
f0129c6c:	89 d0                	mov    %edx,%eax
f0129c6e:	3d 00 06 00 00       	cmp    $0x600,%eax
f0129c73:	74 17                	je     f0129c8c <test_kfreelast+0xcb6>
f0129c75:	83 ec 04             	sub    $0x4,%esp
f0129c78:	68 00 b0 13 f0       	push   $0xf013b000
f0129c7d:	68 3d 0d 00 00       	push   $0xd3d
f0129c82:	68 76 a8 13 f0       	push   $0xf013a876
f0129c87:	e8 1a 65 fd ff       	call   f01001a6 <_panic>
	}

	//Check memory access after kfree
	{
		//2 KB
		ptr = (char*)ptr_allocations[2];
f0129c8c:	8b 85 74 fd ff ff    	mov    -0x28c(%ebp),%eax
f0129c92:	89 45 84             	mov    %eax,-0x7c(%ebp)
		for (i = 0; i < lastIndices[2]; ++i)
f0129c95:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0129c9c:	eb 1e                	jmp    f0129cbc <test_kfreelast+0xce6>
		{
			sums[2] += ptr[i] ;
f0129c9e:	8b 95 c4 fd ff ff    	mov    -0x23c(%ebp),%edx
f0129ca4:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0129ca7:	8b 45 84             	mov    -0x7c(%ebp),%eax
f0129caa:	01 c8                	add    %ecx,%eax
f0129cac:	8a 00                	mov    (%eax),%al
f0129cae:	0f be c0             	movsbl %al,%eax
f0129cb1:	01 d0                	add    %edx,%eax
f0129cb3:	89 85 c4 fd ff ff    	mov    %eax,-0x23c(%ebp)

	//Check memory access after kfree
	{
		//2 KB
		ptr = (char*)ptr_allocations[2];
		for (i = 0; i < lastIndices[2]; ++i)
f0129cb9:	ff 45 f4             	incl   -0xc(%ebp)
f0129cbc:	8b 85 14 fe ff ff    	mov    -0x1ec(%ebp),%eax
f0129cc2:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0129cc5:	7f d7                	jg     f0129c9e <test_kfreelast+0xcc8>
		{
			sums[2] += ptr[i] ;
		}
		if (sums[2] != 2*lastIndices[2])	panic("kfree: invalid read after freeing some allocations");
f0129cc7:	8b 95 c4 fd ff ff    	mov    -0x23c(%ebp),%edx
f0129ccd:	8b 85 14 fe ff ff    	mov    -0x1ec(%ebp),%eax
f0129cd3:	01 c0                	add    %eax,%eax
f0129cd5:	39 c2                	cmp    %eax,%edx
f0129cd7:	74 17                	je     f0129cf0 <test_kfreelast+0xd1a>
f0129cd9:	83 ec 04             	sub    $0x4,%esp
f0129cdc:	68 5c b0 13 f0       	push   $0xf013b05c
f0129ce1:	68 48 0d 00 00       	push   $0xd48
f0129ce6:	68 76 a8 13 f0       	push   $0xf013a876
f0129ceb:	e8 b6 64 fd ff       	call   f01001a6 <_panic>

		//2 KB
		ptr = (char*)ptr_allocations[3];
f0129cf0:	8b 85 78 fd ff ff    	mov    -0x288(%ebp),%eax
f0129cf6:	89 45 84             	mov    %eax,-0x7c(%ebp)
		for (i = 0; i < lastIndices[3]; ++i)
f0129cf9:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0129d00:	eb 1e                	jmp    f0129d20 <test_kfreelast+0xd4a>
		{
			sums[3] += ptr[i] ;
f0129d02:	8b 95 c8 fd ff ff    	mov    -0x238(%ebp),%edx
f0129d08:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0129d0b:	8b 45 84             	mov    -0x7c(%ebp),%eax
f0129d0e:	01 c8                	add    %ecx,%eax
f0129d10:	8a 00                	mov    (%eax),%al
f0129d12:	0f be c0             	movsbl %al,%eax
f0129d15:	01 d0                	add    %edx,%eax
f0129d17:	89 85 c8 fd ff ff    	mov    %eax,-0x238(%ebp)
		}
		if (sums[2] != 2*lastIndices[2])	panic("kfree: invalid read after freeing some allocations");

		//2 KB
		ptr = (char*)ptr_allocations[3];
		for (i = 0; i < lastIndices[3]; ++i)
f0129d1d:	ff 45 f4             	incl   -0xc(%ebp)
f0129d20:	8b 85 18 fe ff ff    	mov    -0x1e8(%ebp),%eax
f0129d26:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0129d29:	7f d7                	jg     f0129d02 <test_kfreelast+0xd2c>
		{
			sums[3] += ptr[i] ;
		}
		if (sums[3] != 3*lastIndices[3])	panic("kfree: invalid read after freeing some allocations");
f0129d2b:	8b 95 c8 fd ff ff    	mov    -0x238(%ebp),%edx
f0129d31:	8b 85 18 fe ff ff    	mov    -0x1e8(%ebp),%eax
f0129d37:	89 c1                	mov    %eax,%ecx
f0129d39:	01 c9                	add    %ecx,%ecx
f0129d3b:	01 c8                	add    %ecx,%eax
f0129d3d:	39 c2                	cmp    %eax,%edx
f0129d3f:	74 17                	je     f0129d58 <test_kfreelast+0xd82>
f0129d41:	83 ec 04             	sub    $0x4,%esp
f0129d44:	68 5c b0 13 f0       	push   $0xf013b05c
f0129d49:	68 50 0d 00 00       	push   $0xd50
f0129d4e:	68 76 a8 13 f0       	push   $0xf013a876
f0129d53:	e8 4e 64 fd ff       	call   f01001a6 <_panic>

		//7 KB
		ptr = (char*)ptr_allocations[4];
f0129d58:	8b 85 7c fd ff ff    	mov    -0x284(%ebp),%eax
f0129d5e:	89 45 84             	mov    %eax,-0x7c(%ebp)
		for (i = 0; i < lastIndices[4]; ++i)
f0129d61:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0129d68:	eb 1e                	jmp    f0129d88 <test_kfreelast+0xdb2>
		{
			sums[4] += ptr[i] ;
f0129d6a:	8b 95 cc fd ff ff    	mov    -0x234(%ebp),%edx
f0129d70:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0129d73:	8b 45 84             	mov    -0x7c(%ebp),%eax
f0129d76:	01 c8                	add    %ecx,%eax
f0129d78:	8a 00                	mov    (%eax),%al
f0129d7a:	0f be c0             	movsbl %al,%eax
f0129d7d:	01 d0                	add    %edx,%eax
f0129d7f:	89 85 cc fd ff ff    	mov    %eax,-0x234(%ebp)
		}
		if (sums[3] != 3*lastIndices[3])	panic("kfree: invalid read after freeing some allocations");

		//7 KB
		ptr = (char*)ptr_allocations[4];
		for (i = 0; i < lastIndices[4]; ++i)
f0129d85:	ff 45 f4             	incl   -0xc(%ebp)
f0129d88:	8b 85 1c fe ff ff    	mov    -0x1e4(%ebp),%eax
f0129d8e:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0129d91:	7f d7                	jg     f0129d6a <test_kfreelast+0xd94>
		{
			sums[4] += ptr[i] ;
		}
		if (sums[4] != 4*lastIndices[4])	panic("kfree: invalid read after freeing some allocations");
f0129d93:	8b 85 cc fd ff ff    	mov    -0x234(%ebp),%eax
f0129d99:	8b 95 1c fe ff ff    	mov    -0x1e4(%ebp),%edx
f0129d9f:	c1 e2 02             	shl    $0x2,%edx
f0129da2:	39 d0                	cmp    %edx,%eax
f0129da4:	74 17                	je     f0129dbd <test_kfreelast+0xde7>
f0129da6:	83 ec 04             	sub    $0x4,%esp
f0129da9:	68 5c b0 13 f0       	push   $0xf013b05c
f0129dae:	68 58 0d 00 00       	push   $0xd58
f0129db3:	68 76 a8 13 f0       	push   $0xf013a876
f0129db8:	e8 e9 63 fd ff       	call   f01001a6 <_panic>

		//3 MB
		ptr = (char*)ptr_allocations[5];
f0129dbd:	8b 85 80 fd ff ff    	mov    -0x280(%ebp),%eax
f0129dc3:	89 45 84             	mov    %eax,-0x7c(%ebp)
		for (i = 0; i < lastIndices[5]; ++i)
f0129dc6:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0129dcd:	eb 1e                	jmp    f0129ded <test_kfreelast+0xe17>
		{
			sums[5] += ptr[i] ;
f0129dcf:	8b 95 d0 fd ff ff    	mov    -0x230(%ebp),%edx
f0129dd5:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0129dd8:	8b 45 84             	mov    -0x7c(%ebp),%eax
f0129ddb:	01 c8                	add    %ecx,%eax
f0129ddd:	8a 00                	mov    (%eax),%al
f0129ddf:	0f be c0             	movsbl %al,%eax
f0129de2:	01 d0                	add    %edx,%eax
f0129de4:	89 85 d0 fd ff ff    	mov    %eax,-0x230(%ebp)
		}
		if (sums[4] != 4*lastIndices[4])	panic("kfree: invalid read after freeing some allocations");

		//3 MB
		ptr = (char*)ptr_allocations[5];
		for (i = 0; i < lastIndices[5]; ++i)
f0129dea:	ff 45 f4             	incl   -0xc(%ebp)
f0129ded:	8b 85 20 fe ff ff    	mov    -0x1e0(%ebp),%eax
f0129df3:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0129df6:	7f d7                	jg     f0129dcf <test_kfreelast+0xdf9>
		{
			sums[5] += ptr[i] ;
		}
		if (sums[5] != 5*lastIndices[5])	panic("kfree: invalid read after freeing some allocations");
f0129df8:	8b 8d d0 fd ff ff    	mov    -0x230(%ebp),%ecx
f0129dfe:	8b 95 20 fe ff ff    	mov    -0x1e0(%ebp),%edx
f0129e04:	89 d0                	mov    %edx,%eax
f0129e06:	c1 e0 02             	shl    $0x2,%eax
f0129e09:	01 d0                	add    %edx,%eax
f0129e0b:	39 c1                	cmp    %eax,%ecx
f0129e0d:	74 17                	je     f0129e26 <test_kfreelast+0xe50>
f0129e0f:	83 ec 04             	sub    $0x4,%esp
f0129e12:	68 5c b0 13 f0       	push   $0xf013b05c
f0129e17:	68 60 0d 00 00       	push   $0xd60
f0129e1c:	68 76 a8 13 f0       	push   $0xf013a876
f0129e21:	e8 80 63 fd ff       	call   f01001a6 <_panic>

		//14 KB
		ptr = (char*)ptr_allocations[7];
f0129e26:	8b 85 88 fd ff ff    	mov    -0x278(%ebp),%eax
f0129e2c:	89 45 84             	mov    %eax,-0x7c(%ebp)
		for (i = 0; i < lastIndices[7]; ++i)
f0129e2f:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0129e36:	eb 1e                	jmp    f0129e56 <test_kfreelast+0xe80>
		{
			sums[7] += ptr[i] ;
f0129e38:	8b 95 d8 fd ff ff    	mov    -0x228(%ebp),%edx
f0129e3e:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0129e41:	8b 45 84             	mov    -0x7c(%ebp),%eax
f0129e44:	01 c8                	add    %ecx,%eax
f0129e46:	8a 00                	mov    (%eax),%al
f0129e48:	0f be c0             	movsbl %al,%eax
f0129e4b:	01 d0                	add    %edx,%eax
f0129e4d:	89 85 d8 fd ff ff    	mov    %eax,-0x228(%ebp)
		}
		if (sums[5] != 5*lastIndices[5])	panic("kfree: invalid read after freeing some allocations");

		//14 KB
		ptr = (char*)ptr_allocations[7];
		for (i = 0; i < lastIndices[7]; ++i)
f0129e53:	ff 45 f4             	incl   -0xc(%ebp)
f0129e56:	8b 85 28 fe ff ff    	mov    -0x1d8(%ebp),%eax
f0129e5c:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0129e5f:	7f d7                	jg     f0129e38 <test_kfreelast+0xe62>
		{
			sums[7] += ptr[i] ;
		}
		if (sums[7] != 7*lastIndices[7])	panic("kfree: invalid read after freeing some allocations");
f0129e61:	8b 8d d8 fd ff ff    	mov    -0x228(%ebp),%ecx
f0129e67:	8b 95 28 fe ff ff    	mov    -0x1d8(%ebp),%edx
f0129e6d:	89 d0                	mov    %edx,%eax
f0129e6f:	01 c0                	add    %eax,%eax
f0129e71:	01 d0                	add    %edx,%eax
f0129e73:	01 c0                	add    %eax,%eax
f0129e75:	01 d0                	add    %edx,%eax
f0129e77:	39 c1                	cmp    %eax,%ecx
f0129e79:	74 17                	je     f0129e92 <test_kfreelast+0xebc>
f0129e7b:	83 ec 04             	sub    $0x4,%esp
f0129e7e:	68 5c b0 13 f0       	push   $0xf013b05c
f0129e83:	68 68 0d 00 00       	push   $0xd68
f0129e88:	68 76 a8 13 f0       	push   $0xf013a876
f0129e8d:	e8 14 63 fd ff       	call   f01001a6 <_panic>
	}

	//Allocate after kfree
	{
		//20 KB
		freeFrames = sys_calculate_free_frames() ;
f0129e92:	e8 27 25 fe ff       	call   f010c3be <sys_calculate_free_frames>
f0129e97:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0129e9a:	e8 ed 9d fd ff       	call   f0103c8c <pf_calculate_free_frames>
f0129e9f:	89 45 d0             	mov    %eax,-0x30(%ebp)
		ptr_allocations[8] = kmalloc(20*kilo);
f0129ea2:	83 ec 0c             	sub    $0xc,%esp
f0129ea5:	68 00 50 00 00       	push   $0x5000
f0129eaa:	e8 15 d7 fd ff       	call   f01075c4 <kmalloc>
f0129eaf:	83 c4 10             	add    $0x10,%esp
f0129eb2:	89 85 8c fd ff ff    	mov    %eax,-0x274(%ebp)
		if ((uint32) ptr_allocations[8] != (ACTUAL_START + 13*Mega + 32*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0129eb8:	8b 85 8c fd ff ff    	mov    -0x274(%ebp),%eax
f0129ebe:	89 c1                	mov    %eax,%ecx
f0129ec0:	c7 85 00 ff ff ff 00 	movl   $0x1000,-0x100(%ebp)
f0129ec7:	10 00 00 
f0129eca:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f0129ed0:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0129ed5:	89 85 fc fe ff ff    	mov    %eax,-0x104(%ebp)
f0129edb:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f0129ee1:	ba 00 00 00 00       	mov    $0x0,%edx
f0129ee6:	f7 b5 00 ff ff ff    	divl   -0x100(%ebp)
f0129eec:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f0129ef2:	29 d0                	sub    %edx,%eax
f0129ef4:	89 c3                	mov    %eax,%ebx
f0129ef6:	c7 85 f8 fe ff ff 00 	movl   $0x1000,-0x108(%ebp)
f0129efd:	10 00 00 
f0129f00:	a0 bc 0e 6c f0       	mov    0xf06c0ebc,%al
f0129f05:	0f b6 d0             	movzbl %al,%edx
f0129f08:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f0129f0e:	01 d0                	add    %edx,%eax
f0129f10:	48                   	dec    %eax
f0129f11:	89 85 f4 fe ff ff    	mov    %eax,-0x10c(%ebp)
f0129f17:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f0129f1d:	ba 00 00 00 00       	mov    $0x0,%edx
f0129f22:	f7 b5 f8 fe ff ff    	divl   -0x108(%ebp)
f0129f28:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f0129f2e:	29 d0                	sub    %edx,%eax
f0129f30:	01 c3                	add    %eax,%ebx
f0129f32:	c7 85 f0 fe ff ff 00 	movl   $0x1000,-0x110(%ebp)
f0129f39:	10 00 00 
f0129f3c:	a0 bc 0e 6c f0       	mov    0xf06c0ebc,%al
f0129f41:	0f b6 c0             	movzbl %al,%eax
f0129f44:	c1 e0 04             	shl    $0x4,%eax
f0129f47:	89 c2                	mov    %eax,%edx
f0129f49:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f0129f4f:	01 d0                	add    %edx,%eax
f0129f51:	48                   	dec    %eax
f0129f52:	89 85 ec fe ff ff    	mov    %eax,-0x114(%ebp)
f0129f58:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f0129f5e:	ba 00 00 00 00       	mov    $0x0,%edx
f0129f63:	f7 b5 f0 fe ff ff    	divl   -0x110(%ebp)
f0129f69:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f0129f6f:	29 d0                	sub    %edx,%eax
f0129f71:	01 d8                	add    %ebx,%eax
f0129f73:	2d 00 40 2f 09       	sub    $0x92f4000,%eax
f0129f78:	39 c1                	cmp    %eax,%ecx
f0129f7a:	74 17                	je     f0129f93 <test_kfreelast+0xfbd>
f0129f7c:	83 ec 04             	sub    $0x4,%esp
f0129f7f:	68 5c a9 13 f0       	push   $0xf013a95c
f0129f84:	68 71 0d 00 00       	push   $0xd71
f0129f89:	68 76 a8 13 f0       	push   $0xf013a876
f0129f8e:	e8 13 62 fd ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0129f93:	e8 f4 9c fd ff       	call   f0103c8c <pf_calculate_free_frames>
f0129f98:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f0129f9b:	74 17                	je     f0129fb4 <test_kfreelast+0xfde>
f0129f9d:	83 ec 04             	sub    $0x4,%esp
f0129fa0:	68 90 a8 13 f0       	push   $0xf013a890
f0129fa5:	68 72 0d 00 00       	push   $0xd72
f0129faa:	68 76 a8 13 f0       	push   $0xf013a876
f0129faf:	e8 f2 61 fd ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 5) panic("Wrong allocation: pages are not loaded successfully into memory");
f0129fb4:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
f0129fb7:	e8 02 24 fe ff       	call   f010c3be <sys_calculate_free_frames>
f0129fbc:	29 c3                	sub    %eax,%ebx
f0129fbe:	89 d8                	mov    %ebx,%eax
f0129fc0:	83 f8 05             	cmp    $0x5,%eax
f0129fc3:	74 17                	je     f0129fdc <test_kfreelast+0x1006>
f0129fc5:	83 ec 04             	sub    $0x4,%esp
f0129fc8:	68 f8 a8 13 f0       	push   $0xf013a8f8
f0129fcd:	68 73 0d 00 00       	push   $0xd73
f0129fd2:	68 76 a8 13 f0       	push   $0xf013a876
f0129fd7:	e8 ca 61 fd ff       	call   f01001a6 <_panic>
		lastIndices[8] = (20*kilo)/sizeof(char) - 1;
f0129fdc:	c7 85 2c fe ff ff ff 	movl   $0x4fff,-0x1d4(%ebp)
f0129fe3:	4f 00 00 
		ptr = (char*)ptr_allocations[8];
f0129fe6:	8b 85 8c fd ff ff    	mov    -0x274(%ebp),%eax
f0129fec:	89 45 84             	mov    %eax,-0x7c(%ebp)
		for (i = 0; i < lastIndices[8]; ++i)
f0129fef:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0129ff6:	eb 0e                	jmp    f012a006 <test_kfreelast+0x1030>
		{
			ptr[i] = 8 ;
f0129ff8:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0129ffb:	8b 45 84             	mov    -0x7c(%ebp),%eax
f0129ffe:	01 d0                	add    %edx,%eax
f012a000:	c6 00 08             	movb   $0x8,(%eax)
		if ((uint32) ptr_allocations[8] != (ACTUAL_START + 13*Mega + 32*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 5) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[8] = (20*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[8];
		for (i = 0; i < lastIndices[8]; ++i)
f012a003:	ff 45 f4             	incl   -0xc(%ebp)
f012a006:	8b 85 2c fe ff ff    	mov    -0x1d4(%ebp),%eax
f012a00c:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012a00f:	7f e7                	jg     f0129ff8 <test_kfreelast+0x1022>
		{
			ptr[i] = 8 ;
		}

		//1 MB
		freeFrames = sys_calculate_free_frames() ;
f012a011:	e8 a8 23 fe ff       	call   f010c3be <sys_calculate_free_frames>
f012a016:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012a019:	e8 6e 9c fd ff       	call   f0103c8c <pf_calculate_free_frames>
f012a01e:	89 45 d0             	mov    %eax,-0x30(%ebp)
		ptr_allocations[9] = kmalloc(1*Mega);
f012a021:	83 ec 0c             	sub    $0xc,%esp
f012a024:	68 00 00 10 00       	push   $0x100000
f012a029:	e8 96 d5 fd ff       	call   f01075c4 <kmalloc>
f012a02e:	83 c4 10             	add    $0x10,%esp
f012a031:	89 85 90 fd ff ff    	mov    %eax,-0x270(%ebp)
		if ((uint32) ptr_allocations[9] != (ACTUAL_START + 13*Mega + 52*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f012a037:	8b 85 90 fd ff ff    	mov    -0x270(%ebp),%eax
f012a03d:	89 c1                	mov    %eax,%ecx
f012a03f:	c7 85 e8 fe ff ff 00 	movl   $0x1000,-0x118(%ebp)
f012a046:	10 00 00 
f012a049:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f012a04f:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012a054:	89 85 e4 fe ff ff    	mov    %eax,-0x11c(%ebp)
f012a05a:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f012a060:	ba 00 00 00 00       	mov    $0x0,%edx
f012a065:	f7 b5 e8 fe ff ff    	divl   -0x118(%ebp)
f012a06b:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f012a071:	29 d0                	sub    %edx,%eax
f012a073:	89 c3                	mov    %eax,%ebx
f012a075:	c7 85 e0 fe ff ff 00 	movl   $0x1000,-0x120(%ebp)
f012a07c:	10 00 00 
f012a07f:	a0 bc 0e 6c f0       	mov    0xf06c0ebc,%al
f012a084:	0f b6 d0             	movzbl %al,%edx
f012a087:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012a08d:	01 d0                	add    %edx,%eax
f012a08f:	48                   	dec    %eax
f012a090:	89 85 dc fe ff ff    	mov    %eax,-0x124(%ebp)
f012a096:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f012a09c:	ba 00 00 00 00       	mov    $0x0,%edx
f012a0a1:	f7 b5 e0 fe ff ff    	divl   -0x120(%ebp)
f012a0a7:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f012a0ad:	29 d0                	sub    %edx,%eax
f012a0af:	01 c3                	add    %eax,%ebx
f012a0b1:	c7 85 d8 fe ff ff 00 	movl   $0x1000,-0x128(%ebp)
f012a0b8:	10 00 00 
f012a0bb:	a0 bc 0e 6c f0       	mov    0xf06c0ebc,%al
f012a0c0:	0f b6 c0             	movzbl %al,%eax
f012a0c3:	c1 e0 04             	shl    $0x4,%eax
f012a0c6:	89 c2                	mov    %eax,%edx
f012a0c8:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f012a0ce:	01 d0                	add    %edx,%eax
f012a0d0:	48                   	dec    %eax
f012a0d1:	89 85 d4 fe ff ff    	mov    %eax,-0x12c(%ebp)
f012a0d7:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f012a0dd:	ba 00 00 00 00       	mov    $0x0,%edx
f012a0e2:	f7 b5 d8 fe ff ff    	divl   -0x128(%ebp)
f012a0e8:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f012a0ee:	29 d0                	sub    %edx,%eax
f012a0f0:	01 d8                	add    %ebx,%eax
f012a0f2:	2d 00 f0 2e 09       	sub    $0x92ef000,%eax
f012a0f7:	39 c1                	cmp    %eax,%ecx
f012a0f9:	74 17                	je     f012a112 <test_kfreelast+0x113c>
f012a0fb:	83 ec 04             	sub    $0x4,%esp
f012a0fe:	68 5c a9 13 f0       	push   $0xf013a95c
f012a103:	68 7f 0d 00 00       	push   $0xd7f
f012a108:	68 76 a8 13 f0       	push   $0xf013a876
f012a10d:	e8 94 60 fd ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012a112:	e8 75 9b fd ff       	call   f0103c8c <pf_calculate_free_frames>
f012a117:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012a11a:	74 17                	je     f012a133 <test_kfreelast+0x115d>
f012a11c:	83 ec 04             	sub    $0x4,%esp
f012a11f:	68 90 a8 13 f0       	push   $0xf013a890
f012a124:	68 80 0d 00 00       	push   $0xd80
f012a129:	68 76 a8 13 f0       	push   $0xf013a876
f012a12e:	e8 73 60 fd ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: pages are not loaded successfully into memory");
f012a133:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
f012a136:	e8 83 22 fe ff       	call   f010c3be <sys_calculate_free_frames>
f012a13b:	29 c3                	sub    %eax,%ebx
f012a13d:	89 d8                	mov    %ebx,%eax
f012a13f:	3d 00 01 00 00       	cmp    $0x100,%eax
f012a144:	74 17                	je     f012a15d <test_kfreelast+0x1187>
f012a146:	83 ec 04             	sub    $0x4,%esp
f012a149:	68 f8 a8 13 f0       	push   $0xf013a8f8
f012a14e:	68 81 0d 00 00       	push   $0xd81
f012a153:	68 76 a8 13 f0       	push   $0xf013a876
f012a158:	e8 49 60 fd ff       	call   f01001a6 <_panic>
		lastIndices[9] = (1*Mega)/sizeof(char) - 1;
f012a15d:	c7 85 30 fe ff ff ff 	movl   $0xfffff,-0x1d0(%ebp)
f012a164:	ff 0f 00 
		ptr = (char*)ptr_allocations[9];
f012a167:	8b 85 90 fd ff ff    	mov    -0x270(%ebp),%eax
f012a16d:	89 45 84             	mov    %eax,-0x7c(%ebp)
		for (i = 0; i < lastIndices[9]; ++i)
f012a170:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012a177:	eb 0e                	jmp    f012a187 <test_kfreelast+0x11b1>
		{
			ptr[i] = 9 ;
f012a179:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012a17c:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012a17f:	01 d0                	add    %edx,%eax
f012a181:	c6 00 09             	movb   $0x9,(%eax)
		if ((uint32) ptr_allocations[9] != (ACTUAL_START + 13*Mega + 52*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[9] = (1*Mega)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[9];
		for (i = 0; i < lastIndices[9]; ++i)
f012a184:	ff 45 f4             	incl   -0xc(%ebp)
f012a187:	8b 85 30 fe ff ff    	mov    -0x1d0(%ebp),%eax
f012a18d:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012a190:	7f e7                	jg     f012a179 <test_kfreelast+0x11a3>
		{
			ptr[i] = 9 ;
		}
	}

	ce = 0;
f012a192:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	//kfree last allocated space
	{
		//kfree 1 MB
		freeFrames = sys_calculate_free_frames() ;
f012a199:	e8 20 22 fe ff       	call   f010c3be <sys_calculate_free_frames>
f012a19e:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012a1a1:	e8 e6 9a fd ff       	call   f0103c8c <pf_calculate_free_frames>
f012a1a6:	89 45 d0             	mov    %eax,-0x30(%ebp)
		kfree(ptr_allocations[9]);
f012a1a9:	8b 85 90 fd ff ff    	mov    -0x270(%ebp),%eax
f012a1af:	83 ec 0c             	sub    $0xc,%esp
f012a1b2:	50                   	push   %eax
f012a1b3:	e8 26 d4 fd ff       	call   f01075de <kfree>
f012a1b8:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012a1bb:	e8 cc 9a fd ff       	call   f0103c8c <pf_calculate_free_frames>
f012a1c0:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012a1c3:	74 17                	je     f012a1dc <test_kfreelast+0x1206>
f012a1c5:	83 ec 04             	sub    $0x4,%esp
f012a1c8:	68 90 a8 13 f0       	push   $0xf013a890
f012a1cd:	68 91 0d 00 00       	push   $0xd91
f012a1d2:	68 76 a8 13 f0       	push   $0xf013a876
f012a1d7:	e8 ca 5f fd ff       	call   f01001a6 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 256) panic("Wrong kfree: pages in memory are not freed correctly");
f012a1dc:	e8 dd 21 fe ff       	call   f010c3be <sys_calculate_free_frames>
f012a1e1:	89 c2                	mov    %eax,%edx
f012a1e3:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f012a1e6:	29 c2                	sub    %eax,%edx
f012a1e8:	89 d0                	mov    %edx,%eax
f012a1ea:	3d 00 01 00 00       	cmp    $0x100,%eax
f012a1ef:	74 17                	je     f012a208 <test_kfreelast+0x1232>
f012a1f1:	83 ec 04             	sub    $0x4,%esp
f012a1f4:	68 00 b0 13 f0       	push   $0xf013b000
f012a1f9:	68 92 0d 00 00       	push   $0xd92
f012a1fe:	68 76 a8 13 f0       	push   $0xf013a876
f012a203:	e8 9e 5f fd ff       	call   f01001a6 <_panic>
	}

	//Allocate after kfree last [25%]
	{
		//30 KB
		freeFrames = sys_calculate_free_frames() ;
f012a208:	e8 b1 21 fe ff       	call   f010c3be <sys_calculate_free_frames>
f012a20d:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012a210:	e8 77 9a fd ff       	call   f0103c8c <pf_calculate_free_frames>
f012a215:	89 45 d0             	mov    %eax,-0x30(%ebp)
		ptr_allocations[10] = kmalloc(30*kilo);
f012a218:	83 ec 0c             	sub    $0xc,%esp
f012a21b:	68 00 78 00 00       	push   $0x7800
f012a220:	e8 9f d3 fd ff       	call   f01075c4 <kmalloc>
f012a225:	83 c4 10             	add    $0x10,%esp
f012a228:	89 85 94 fd ff ff    	mov    %eax,-0x26c(%ebp)
		if ((uint32) ptr_allocations[10] != (ACTUAL_START + 13*Mega + 52*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f012a22e:	8b 85 94 fd ff ff    	mov    -0x26c(%ebp),%eax
f012a234:	89 c1                	mov    %eax,%ecx
f012a236:	c7 85 d0 fe ff ff 00 	movl   $0x1000,-0x130(%ebp)
f012a23d:	10 00 00 
f012a240:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f012a246:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012a24b:	89 85 cc fe ff ff    	mov    %eax,-0x134(%ebp)
f012a251:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f012a257:	ba 00 00 00 00       	mov    $0x0,%edx
f012a25c:	f7 b5 d0 fe ff ff    	divl   -0x130(%ebp)
f012a262:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f012a268:	29 d0                	sub    %edx,%eax
f012a26a:	89 c3                	mov    %eax,%ebx
f012a26c:	c7 85 c8 fe ff ff 00 	movl   $0x1000,-0x138(%ebp)
f012a273:	10 00 00 
f012a276:	a0 bc 0e 6c f0       	mov    0xf06c0ebc,%al
f012a27b:	0f b6 d0             	movzbl %al,%edx
f012a27e:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f012a284:	01 d0                	add    %edx,%eax
f012a286:	48                   	dec    %eax
f012a287:	89 85 c4 fe ff ff    	mov    %eax,-0x13c(%ebp)
f012a28d:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f012a293:	ba 00 00 00 00       	mov    $0x0,%edx
f012a298:	f7 b5 c8 fe ff ff    	divl   -0x138(%ebp)
f012a29e:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f012a2a4:	29 d0                	sub    %edx,%eax
f012a2a6:	01 c3                	add    %eax,%ebx
f012a2a8:	c7 85 c0 fe ff ff 00 	movl   $0x1000,-0x140(%ebp)
f012a2af:	10 00 00 
f012a2b2:	a0 bc 0e 6c f0       	mov    0xf06c0ebc,%al
f012a2b7:	0f b6 c0             	movzbl %al,%eax
f012a2ba:	c1 e0 04             	shl    $0x4,%eax
f012a2bd:	89 c2                	mov    %eax,%edx
f012a2bf:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f012a2c5:	01 d0                	add    %edx,%eax
f012a2c7:	48                   	dec    %eax
f012a2c8:	89 85 bc fe ff ff    	mov    %eax,-0x144(%ebp)
f012a2ce:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f012a2d4:	ba 00 00 00 00       	mov    $0x0,%edx
f012a2d9:	f7 b5 c0 fe ff ff    	divl   -0x140(%ebp)
f012a2df:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f012a2e5:	29 d0                	sub    %edx,%eax
f012a2e7:	01 d8                	add    %ebx,%eax
f012a2e9:	2d 00 f0 2e 09       	sub    $0x92ef000,%eax
f012a2ee:	39 c1                	cmp    %eax,%ecx
f012a2f0:	74 17                	je     f012a309 <test_kfreelast+0x1333>
f012a2f2:	83 ec 04             	sub    $0x4,%esp
f012a2f5:	68 5c a9 13 f0       	push   $0xf013a95c
f012a2fa:	68 9b 0d 00 00       	push   $0xd9b
f012a2ff:	68 76 a8 13 f0       	push   $0xf013a876
f012a304:	e8 9d 5e fd ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012a309:	e8 7e 99 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f012a30e:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012a311:	74 17                	je     f012a32a <test_kfreelast+0x1354>
f012a313:	83 ec 04             	sub    $0x4,%esp
f012a316:	68 90 a8 13 f0       	push   $0xf013a890
f012a31b:	68 9c 0d 00 00       	push   $0xd9c
f012a320:	68 76 a8 13 f0       	push   $0xf013a876
f012a325:	e8 7c 5e fd ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 8) panic("Wrong allocation: pages are not loaded successfully into memory");
f012a32a:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
f012a32d:	e8 8c 20 fe ff       	call   f010c3be <sys_calculate_free_frames>
f012a332:	29 c3                	sub    %eax,%ebx
f012a334:	89 d8                	mov    %ebx,%eax
f012a336:	83 f8 08             	cmp    $0x8,%eax
f012a339:	74 17                	je     f012a352 <test_kfreelast+0x137c>
f012a33b:	83 ec 04             	sub    $0x4,%esp
f012a33e:	68 f8 a8 13 f0       	push   $0xf013a8f8
f012a343:	68 9d 0d 00 00       	push   $0xd9d
f012a348:	68 76 a8 13 f0       	push   $0xf013a876
f012a34d:	e8 54 5e fd ff       	call   f01001a6 <_panic>
		lastIndices[10] = (30*kilo)/sizeof(char) - 1;
f012a352:	c7 85 34 fe ff ff ff 	movl   $0x77ff,-0x1cc(%ebp)
f012a359:	77 00 00 
		ptr = (char*)ptr_allocations[10];
f012a35c:	8b 85 94 fd ff ff    	mov    -0x26c(%ebp),%eax
f012a362:	89 45 84             	mov    %eax,-0x7c(%ebp)
		for (i = 0; i < lastIndices[10]; ++i)
f012a365:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012a36c:	eb 0e                	jmp    f012a37c <test_kfreelast+0x13a6>
		{
			ptr[i] = 10 ;
f012a36e:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012a371:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012a374:	01 d0                	add    %edx,%eax
f012a376:	c6 00 0a             	movb   $0xa,(%eax)
		if ((uint32) ptr_allocations[10] != (ACTUAL_START + 13*Mega + 52*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 8) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[10] = (30*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[10];
		for (i = 0; i < lastIndices[10]; ++i)
f012a379:	ff 45 f4             	incl   -0xc(%ebp)
f012a37c:	8b 85 34 fe ff ff    	mov    -0x1cc(%ebp),%eax
f012a382:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012a385:	7f e7                	jg     f012a36e <test_kfreelast+0x1398>
		{
			ptr[i] = 10 ;
		}

		//1 MB
		freeFrames = sys_calculate_free_frames() ;
f012a387:	e8 32 20 fe ff       	call   f010c3be <sys_calculate_free_frames>
f012a38c:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012a38f:	e8 f8 98 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f012a394:	89 45 d0             	mov    %eax,-0x30(%ebp)
		ptr_allocations[11] = kmalloc(1*Mega);
f012a397:	83 ec 0c             	sub    $0xc,%esp
f012a39a:	68 00 00 10 00       	push   $0x100000
f012a39f:	e8 20 d2 fd ff       	call   f01075c4 <kmalloc>
f012a3a4:	83 c4 10             	add    $0x10,%esp
f012a3a7:	89 85 98 fd ff ff    	mov    %eax,-0x268(%ebp)
		if ((uint32) ptr_allocations[11] != (ACTUAL_START + 13*Mega + 84*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f012a3ad:	8b 85 98 fd ff ff    	mov    -0x268(%ebp),%eax
f012a3b3:	89 c1                	mov    %eax,%ecx
f012a3b5:	c7 85 b8 fe ff ff 00 	movl   $0x1000,-0x148(%ebp)
f012a3bc:	10 00 00 
f012a3bf:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f012a3c5:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012a3ca:	89 85 b4 fe ff ff    	mov    %eax,-0x14c(%ebp)
f012a3d0:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f012a3d6:	ba 00 00 00 00       	mov    $0x0,%edx
f012a3db:	f7 b5 b8 fe ff ff    	divl   -0x148(%ebp)
f012a3e1:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f012a3e7:	29 d0                	sub    %edx,%eax
f012a3e9:	89 c3                	mov    %eax,%ebx
f012a3eb:	c7 85 b0 fe ff ff 00 	movl   $0x1000,-0x150(%ebp)
f012a3f2:	10 00 00 
f012a3f5:	a0 bc 0e 6c f0       	mov    0xf06c0ebc,%al
f012a3fa:	0f b6 d0             	movzbl %al,%edx
f012a3fd:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f012a403:	01 d0                	add    %edx,%eax
f012a405:	48                   	dec    %eax
f012a406:	89 85 ac fe ff ff    	mov    %eax,-0x154(%ebp)
f012a40c:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f012a412:	ba 00 00 00 00       	mov    $0x0,%edx
f012a417:	f7 b5 b0 fe ff ff    	divl   -0x150(%ebp)
f012a41d:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f012a423:	29 d0                	sub    %edx,%eax
f012a425:	01 c3                	add    %eax,%ebx
f012a427:	c7 85 a8 fe ff ff 00 	movl   $0x1000,-0x158(%ebp)
f012a42e:	10 00 00 
f012a431:	a0 bc 0e 6c f0       	mov    0xf06c0ebc,%al
f012a436:	0f b6 c0             	movzbl %al,%eax
f012a439:	c1 e0 04             	shl    $0x4,%eax
f012a43c:	89 c2                	mov    %eax,%edx
f012a43e:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f012a444:	01 d0                	add    %edx,%eax
f012a446:	48                   	dec    %eax
f012a447:	89 85 a4 fe ff ff    	mov    %eax,-0x15c(%ebp)
f012a44d:	8b 85 a4 fe ff ff    	mov    -0x15c(%ebp),%eax
f012a453:	ba 00 00 00 00       	mov    $0x0,%edx
f012a458:	f7 b5 a8 fe ff ff    	divl   -0x158(%ebp)
f012a45e:	8b 85 a4 fe ff ff    	mov    -0x15c(%ebp),%eax
f012a464:	29 d0                	sub    %edx,%eax
f012a466:	01 d8                	add    %ebx,%eax
f012a468:	2d 00 70 2e 09       	sub    $0x92e7000,%eax
f012a46d:	39 c1                	cmp    %eax,%ecx
f012a46f:	74 17                	je     f012a488 <test_kfreelast+0x14b2>
f012a471:	83 ec 04             	sub    $0x4,%esp
f012a474:	68 5c a9 13 f0       	push   $0xf013a95c
f012a479:	68 a9 0d 00 00       	push   $0xda9
f012a47e:	68 76 a8 13 f0       	push   $0xf013a876
f012a483:	e8 1e 5d fd ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012a488:	e8 ff 97 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f012a48d:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012a490:	74 17                	je     f012a4a9 <test_kfreelast+0x14d3>
f012a492:	83 ec 04             	sub    $0x4,%esp
f012a495:	68 90 a8 13 f0       	push   $0xf013a890
f012a49a:	68 aa 0d 00 00       	push   $0xdaa
f012a49f:	68 76 a8 13 f0       	push   $0xf013a876
f012a4a4:	e8 fd 5c fd ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: pages are not loaded successfully into memory");
f012a4a9:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
f012a4ac:	e8 0d 1f fe ff       	call   f010c3be <sys_calculate_free_frames>
f012a4b1:	29 c3                	sub    %eax,%ebx
f012a4b3:	89 d8                	mov    %ebx,%eax
f012a4b5:	3d 00 01 00 00       	cmp    $0x100,%eax
f012a4ba:	74 17                	je     f012a4d3 <test_kfreelast+0x14fd>
f012a4bc:	83 ec 04             	sub    $0x4,%esp
f012a4bf:	68 f8 a8 13 f0       	push   $0xf013a8f8
f012a4c4:	68 ab 0d 00 00       	push   $0xdab
f012a4c9:	68 76 a8 13 f0       	push   $0xf013a876
f012a4ce:	e8 d3 5c fd ff       	call   f01001a6 <_panic>
		lastIndices[11] = (1*Mega)/sizeof(char) - 1;
f012a4d3:	c7 85 38 fe ff ff ff 	movl   $0xfffff,-0x1c8(%ebp)
f012a4da:	ff 0f 00 
		ptr = (char*)ptr_allocations[11];
f012a4dd:	8b 85 98 fd ff ff    	mov    -0x268(%ebp),%eax
f012a4e3:	89 45 84             	mov    %eax,-0x7c(%ebp)
		for (i = 0; i < lastIndices[11]; ++i)
f012a4e6:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012a4ed:	eb 0e                	jmp    f012a4fd <test_kfreelast+0x1527>
		{
			ptr[i] = 11 ;
f012a4ef:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012a4f2:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012a4f5:	01 d0                	add    %edx,%eax
f012a4f7:	c6 00 0b             	movb   $0xb,(%eax)
		if ((uint32) ptr_allocations[11] != (ACTUAL_START + 13*Mega + 84*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[11] = (1*Mega)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[11];
		for (i = 0; i < lastIndices[11]; ++i)
f012a4fa:	ff 45 f4             	incl   -0xc(%ebp)
f012a4fd:	8b 85 38 fe ff ff    	mov    -0x1c8(%ebp),%eax
f012a503:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012a506:	7f e7                	jg     f012a4ef <test_kfreelast+0x1519>
		{
			ptr[i] = 11 ;
		}
	}
	ce += 25;
f012a508:	83 45 f0 19          	addl   $0x19,-0x10(%ebp)
	cprintf("\nkfreelast: current evaluation = %d%\n", ce);
f012a50c:	83 ec 08             	sub    $0x8,%esp
f012a50f:	ff 75 f0             	pushl  -0x10(%ebp)
f012a512:	68 a8 b8 13 f0       	push   $0xf013b8a8
f012a517:	e8 11 67 fd ff       	call   f0100c2d <cprintf>
f012a51c:	83 c4 10             	add    $0x10,%esp

	int f = 0;
f012a51f:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
	//kfree last allocated two spaces
	{
		//kfree 1 MB
		freeFrames = sys_calculate_free_frames() ;
f012a526:	e8 93 1e fe ff       	call   f010c3be <sys_calculate_free_frames>
f012a52b:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012a52e:	e8 59 97 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f012a533:	89 45 d0             	mov    %eax,-0x30(%ebp)
		kfree(ptr_allocations[11]);
f012a536:	8b 85 98 fd ff ff    	mov    -0x268(%ebp),%eax
f012a53c:	83 ec 0c             	sub    $0xc,%esp
f012a53f:	50                   	push   %eax
f012a540:	e8 99 d0 fd ff       	call   f01075de <kfree>
f012a545:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f012a548:	e8 3f 97 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f012a54d:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012a550:	74 1d                	je     f012a56f <test_kfreelast+0x1599>
f012a552:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012a556:	75 17                	jne    f012a56f <test_kfreelast+0x1599>
f012a558:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012a55f:	83 ec 0c             	sub    $0xc,%esp
f012a562:	68 d0 b8 13 f0       	push   $0xf013b8d0
f012a567:	e8 c1 66 fd ff       	call   f0100c2d <cprintf>
f012a56c:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 256) if (!f) {f=1; cprintf("\nWrong kfree: pages in memory are not freed correctly");}
f012a56f:	e8 4a 1e fe ff       	call   f010c3be <sys_calculate_free_frames>
f012a574:	89 c2                	mov    %eax,%edx
f012a576:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f012a579:	29 c2                	sub    %eax,%edx
f012a57b:	89 d0                	mov    %edx,%eax
f012a57d:	3d 00 01 00 00       	cmp    $0x100,%eax
f012a582:	74 1d                	je     f012a5a1 <test_kfreelast+0x15cb>
f012a584:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012a588:	75 17                	jne    f012a5a1 <test_kfreelast+0x15cb>
f012a58a:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012a591:	83 ec 0c             	sub    $0xc,%esp
f012a594:	68 3c b9 13 f0       	push   $0xf013b93c
f012a599:	e8 8f 66 fd ff       	call   f0100c2d <cprintf>
f012a59e:	83 c4 10             	add    $0x10,%esp

		//kfree 30 KB
		freeFrames = sys_calculate_free_frames() ;
f012a5a1:	e8 18 1e fe ff       	call   f010c3be <sys_calculate_free_frames>
f012a5a6:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012a5a9:	e8 de 96 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f012a5ae:	89 45 d0             	mov    %eax,-0x30(%ebp)
		kfree(ptr_allocations[10]);
f012a5b1:	8b 85 94 fd ff ff    	mov    -0x26c(%ebp),%eax
f012a5b7:	83 ec 0c             	sub    $0xc,%esp
f012a5ba:	50                   	push   %eax
f012a5bb:	e8 1e d0 fd ff       	call   f01075de <kfree>
f012a5c0:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f012a5c3:	e8 c4 96 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f012a5c8:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012a5cb:	74 1d                	je     f012a5ea <test_kfreelast+0x1614>
f012a5cd:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012a5d1:	75 17                	jne    f012a5ea <test_kfreelast+0x1614>
f012a5d3:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012a5da:	83 ec 0c             	sub    $0xc,%esp
f012a5dd:	68 d0 b8 13 f0       	push   $0xf013b8d0
f012a5e2:	e8 46 66 fd ff       	call   f0100c2d <cprintf>
f012a5e7:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 8) if (!f) {f=1; cprintf("\nWrong kfree: pages in memory are not freed correctly");}
f012a5ea:	e8 cf 1d fe ff       	call   f010c3be <sys_calculate_free_frames>
f012a5ef:	89 c2                	mov    %eax,%edx
f012a5f1:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f012a5f4:	29 c2                	sub    %eax,%edx
f012a5f6:	89 d0                	mov    %edx,%eax
f012a5f8:	83 f8 08             	cmp    $0x8,%eax
f012a5fb:	74 1d                	je     f012a61a <test_kfreelast+0x1644>
f012a5fd:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012a601:	75 17                	jne    f012a61a <test_kfreelast+0x1644>
f012a603:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012a60a:	83 ec 0c             	sub    $0xc,%esp
f012a60d:	68 3c b9 13 f0       	push   $0xf013b93c
f012a612:	e8 16 66 fd ff       	call   f0100c2d <cprintf>
f012a617:	83 c4 10             	add    $0x10,%esp
	}

	//Allocate after kfree last allocated two spaces (in order) [10%]
	{
		//10 KB
		freeFrames = sys_calculate_free_frames() ;
f012a61a:	e8 9f 1d fe ff       	call   f010c3be <sys_calculate_free_frames>
f012a61f:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012a622:	e8 65 96 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f012a627:	89 45 d0             	mov    %eax,-0x30(%ebp)
		ptr_allocations[12] = kmalloc(10*kilo);
f012a62a:	83 ec 0c             	sub    $0xc,%esp
f012a62d:	68 00 28 00 00       	push   $0x2800
f012a632:	e8 8d cf fd ff       	call   f01075c4 <kmalloc>
f012a637:	83 c4 10             	add    $0x10,%esp
f012a63a:	89 85 9c fd ff ff    	mov    %eax,-0x264(%ebp)
		if ((uint32) ptr_allocations[12] != (ACTUAL_START + 13*Mega + 52*kilo)) if (!f) {f=1; cprintf("\nWrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");}
f012a640:	8b 85 9c fd ff ff    	mov    -0x264(%ebp),%eax
f012a646:	89 c1                	mov    %eax,%ecx
f012a648:	c7 85 a0 fe ff ff 00 	movl   $0x1000,-0x160(%ebp)
f012a64f:	10 00 00 
f012a652:	8b 85 a0 fe ff ff    	mov    -0x160(%ebp),%eax
f012a658:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012a65d:	89 85 9c fe ff ff    	mov    %eax,-0x164(%ebp)
f012a663:	8b 85 9c fe ff ff    	mov    -0x164(%ebp),%eax
f012a669:	ba 00 00 00 00       	mov    $0x0,%edx
f012a66e:	f7 b5 a0 fe ff ff    	divl   -0x160(%ebp)
f012a674:	8b 85 9c fe ff ff    	mov    -0x164(%ebp),%eax
f012a67a:	29 d0                	sub    %edx,%eax
f012a67c:	89 c3                	mov    %eax,%ebx
f012a67e:	c7 85 98 fe ff ff 00 	movl   $0x1000,-0x168(%ebp)
f012a685:	10 00 00 
f012a688:	a0 bc 0e 6c f0       	mov    0xf06c0ebc,%al
f012a68d:	0f b6 d0             	movzbl %al,%edx
f012a690:	8b 85 98 fe ff ff    	mov    -0x168(%ebp),%eax
f012a696:	01 d0                	add    %edx,%eax
f012a698:	48                   	dec    %eax
f012a699:	89 85 94 fe ff ff    	mov    %eax,-0x16c(%ebp)
f012a69f:	8b 85 94 fe ff ff    	mov    -0x16c(%ebp),%eax
f012a6a5:	ba 00 00 00 00       	mov    $0x0,%edx
f012a6aa:	f7 b5 98 fe ff ff    	divl   -0x168(%ebp)
f012a6b0:	8b 85 94 fe ff ff    	mov    -0x16c(%ebp),%eax
f012a6b6:	29 d0                	sub    %edx,%eax
f012a6b8:	01 c3                	add    %eax,%ebx
f012a6ba:	c7 85 90 fe ff ff 00 	movl   $0x1000,-0x170(%ebp)
f012a6c1:	10 00 00 
f012a6c4:	a0 bc 0e 6c f0       	mov    0xf06c0ebc,%al
f012a6c9:	0f b6 c0             	movzbl %al,%eax
f012a6cc:	c1 e0 04             	shl    $0x4,%eax
f012a6cf:	89 c2                	mov    %eax,%edx
f012a6d1:	8b 85 90 fe ff ff    	mov    -0x170(%ebp),%eax
f012a6d7:	01 d0                	add    %edx,%eax
f012a6d9:	48                   	dec    %eax
f012a6da:	89 85 8c fe ff ff    	mov    %eax,-0x174(%ebp)
f012a6e0:	8b 85 8c fe ff ff    	mov    -0x174(%ebp),%eax
f012a6e6:	ba 00 00 00 00       	mov    $0x0,%edx
f012a6eb:	f7 b5 90 fe ff ff    	divl   -0x170(%ebp)
f012a6f1:	8b 85 8c fe ff ff    	mov    -0x174(%ebp),%eax
f012a6f7:	29 d0                	sub    %edx,%eax
f012a6f9:	01 d8                	add    %ebx,%eax
f012a6fb:	2d 00 f0 2e 09       	sub    $0x92ef000,%eax
f012a700:	39 c1                	cmp    %eax,%ecx
f012a702:	74 1d                	je     f012a721 <test_kfreelast+0x174b>
f012a704:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012a708:	75 17                	jne    f012a721 <test_kfreelast+0x174b>
f012a70a:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012a711:	83 ec 0c             	sub    $0xc,%esp
f012a714:	68 74 b9 13 f0       	push   $0xf013b974
f012a719:	e8 0f 65 fd ff       	call   f0100c2d <cprintf>
f012a71e:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f012a721:	e8 66 95 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f012a726:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012a729:	74 1d                	je     f012a748 <test_kfreelast+0x1772>
f012a72b:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012a72f:	75 17                	jne    f012a748 <test_kfreelast+0x1772>
f012a731:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012a738:	83 ec 0c             	sub    $0xc,%esp
f012a73b:	68 d0 b8 13 f0       	push   $0xf013b8d0
f012a740:	e8 e8 64 fd ff       	call   f0100c2d <cprintf>
f012a745:	83 c4 10             	add    $0x10,%esp
		if ((freeFrames - sys_calculate_free_frames()) != 3) if (!f) {f=1; cprintf("\nWrong allocation: pages are not loaded successfully into memory");}
f012a748:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
f012a74b:	e8 6e 1c fe ff       	call   f010c3be <sys_calculate_free_frames>
f012a750:	29 c3                	sub    %eax,%ebx
f012a752:	89 d8                	mov    %ebx,%eax
f012a754:	83 f8 03             	cmp    $0x3,%eax
f012a757:	74 1d                	je     f012a776 <test_kfreelast+0x17a0>
f012a759:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012a75d:	75 17                	jne    f012a776 <test_kfreelast+0x17a0>
f012a75f:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012a766:	83 ec 0c             	sub    $0xc,%esp
f012a769:	68 dc b9 13 f0       	push   $0xf013b9dc
f012a76e:	e8 ba 64 fd ff       	call   f0100c2d <cprintf>
f012a773:	83 c4 10             	add    $0x10,%esp
		lastIndices[12] = (10*kilo)/sizeof(char) - 1;
f012a776:	c7 85 3c fe ff ff ff 	movl   $0x27ff,-0x1c4(%ebp)
f012a77d:	27 00 00 
		ptr = (char*)ptr_allocations[12];
f012a780:	8b 85 9c fd ff ff    	mov    -0x264(%ebp),%eax
f012a786:	89 45 84             	mov    %eax,-0x7c(%ebp)
		for (i = 0; i < lastIndices[12]; ++i)
f012a789:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012a790:	eb 0e                	jmp    f012a7a0 <test_kfreelast+0x17ca>
		{
			ptr[i] = 12 ;
f012a792:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012a795:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012a798:	01 d0                	add    %edx,%eax
f012a79a:	c6 00 0c             	movb   $0xc,(%eax)
		if ((uint32) ptr_allocations[12] != (ACTUAL_START + 13*Mega + 52*kilo)) if (!f) {f=1; cprintf("\nWrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");}
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
		if ((freeFrames - sys_calculate_free_frames()) != 3) if (!f) {f=1; cprintf("\nWrong allocation: pages are not loaded successfully into memory");}
		lastIndices[12] = (10*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[12];
		for (i = 0; i < lastIndices[12]; ++i)
f012a79d:	ff 45 f4             	incl   -0xc(%ebp)
f012a7a0:	8b 85 3c fe ff ff    	mov    -0x1c4(%ebp),%eax
f012a7a6:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012a7a9:	7f e7                	jg     f012a792 <test_kfreelast+0x17bc>
		{
			ptr[i] = 12 ;
		}
	}

	if (!f) {ce += 10;cprintf("\nkfreelast: current evaluation = %d%\n", ce);} f=0;
f012a7ab:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012a7af:	75 17                	jne    f012a7c8 <test_kfreelast+0x17f2>
f012a7b1:	83 45 f0 0a          	addl   $0xa,-0x10(%ebp)
f012a7b5:	83 ec 08             	sub    $0x8,%esp
f012a7b8:	ff 75 f0             	pushl  -0x10(%ebp)
f012a7bb:	68 a8 b8 13 f0       	push   $0xf013b8a8
f012a7c0:	e8 68 64 fd ff       	call   f0100c2d <cprintf>
f012a7c5:	83 c4 10             	add    $0x10,%esp
f012a7c8:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)

	//Check memory access after kfree last and kalloc [15%]
	{
		//10 KB
		ptr = (char*)ptr_allocations[12];
f012a7cf:	8b 85 9c fd ff ff    	mov    -0x264(%ebp),%eax
f012a7d5:	89 45 84             	mov    %eax,-0x7c(%ebp)
		for (i = 0; i < lastIndices[12]; ++i)
f012a7d8:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012a7df:	eb 1e                	jmp    f012a7ff <test_kfreelast+0x1829>
		{
			sums[12] += ptr[i] ;
f012a7e1:	8b 95 ec fd ff ff    	mov    -0x214(%ebp),%edx
f012a7e7:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f012a7ea:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012a7ed:	01 c8                	add    %ecx,%eax
f012a7ef:	8a 00                	mov    (%eax),%al
f012a7f1:	0f be c0             	movsbl %al,%eax
f012a7f4:	01 d0                	add    %edx,%eax
f012a7f6:	89 85 ec fd ff ff    	mov    %eax,-0x214(%ebp)

	//Check memory access after kfree last and kalloc [15%]
	{
		//10 KB
		ptr = (char*)ptr_allocations[12];
		for (i = 0; i < lastIndices[12]; ++i)
f012a7fc:	ff 45 f4             	incl   -0xc(%ebp)
f012a7ff:	8b 85 3c fe ff ff    	mov    -0x1c4(%ebp),%eax
f012a805:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012a808:	7f d7                	jg     f012a7e1 <test_kfreelast+0x180b>
		{
			sums[12] += ptr[i] ;
		}
		if (sums[12] != 12*lastIndices[12])	if (!f) {f=1; cprintf("\nkfree: invalid read after freeing some allocations");}
f012a80a:	8b 8d ec fd ff ff    	mov    -0x214(%ebp),%ecx
f012a810:	8b 95 3c fe ff ff    	mov    -0x1c4(%ebp),%edx
f012a816:	89 d0                	mov    %edx,%eax
f012a818:	01 c0                	add    %eax,%eax
f012a81a:	01 d0                	add    %edx,%eax
f012a81c:	c1 e0 02             	shl    $0x2,%eax
f012a81f:	39 c1                	cmp    %eax,%ecx
f012a821:	74 1d                	je     f012a840 <test_kfreelast+0x186a>
f012a823:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012a827:	75 17                	jne    f012a840 <test_kfreelast+0x186a>
f012a829:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012a830:	83 ec 0c             	sub    $0xc,%esp
f012a833:	68 20 ba 13 f0       	push   $0xf013ba20
f012a838:	e8 f0 63 fd ff       	call   f0100c2d <cprintf>
f012a83d:	83 c4 10             	add    $0x10,%esp


		//Bypass the PAGE FAULT on <MOVB immediate, reg> instruction by setting its length
		//and continue executing the remaining code
		sys_bypassPageFault(3);
f012a840:	83 ec 0c             	sub    $0xc,%esp
f012a843:	6a 03                	push   $0x3
f012a845:	e8 1d 20 fe ff       	call   f010c867 <sys_bypassPageFault>
f012a84a:	83 c4 10             	add    $0x10,%esp

		ptr = (char *) ptr_allocations[12] + 12*kilo;
f012a84d:	8b 85 9c fd ff ff    	mov    -0x264(%ebp),%eax
f012a853:	05 00 30 00 00       	add    $0x3000,%eax
f012a858:	89 45 84             	mov    %eax,-0x7c(%ebp)

		for (i = 0; i < 30*kilo; ++i)
f012a85b:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012a862:	eb 3c                	jmp    f012a8a0 <test_kfreelast+0x18ca>
		{
			ptr[i] = 10;
f012a864:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012a867:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012a86a:	01 d0                	add    %edx,%eax
f012a86c:	c6 00 0a             	movb   $0xa,(%eax)
			//cprintf("\n\ncr2 = %x, faulted addr = %x", sys_rcr2(), (uint32)&(ptr[0]));
			if (sys_rcr2() != (uint32)&(ptr[i])) if (!f) {f=1; cprintf("\nkfree: successful access to freed space!! it should not be succeeded");}
f012a86f:	e8 e1 1f fe ff       	call   f010c855 <sys_rcr2>
f012a874:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f012a877:	8b 55 84             	mov    -0x7c(%ebp),%edx
f012a87a:	01 ca                	add    %ecx,%edx
f012a87c:	39 d0                	cmp    %edx,%eax
f012a87e:	74 1d                	je     f012a89d <test_kfreelast+0x18c7>
f012a880:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012a884:	75 17                	jne    f012a89d <test_kfreelast+0x18c7>
f012a886:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012a88d:	83 ec 0c             	sub    $0xc,%esp
f012a890:	68 54 ba 13 f0       	push   $0xf013ba54
f012a895:	e8 93 63 fd ff       	call   f0100c2d <cprintf>
f012a89a:	83 c4 10             	add    $0x10,%esp
		//and continue executing the remaining code
		sys_bypassPageFault(3);

		ptr = (char *) ptr_allocations[12] + 12*kilo;

		for (i = 0; i < 30*kilo; ++i)
f012a89d:	ff 45 f4             	incl   -0xc(%ebp)
f012a8a0:	81 7d f4 ff 77 00 00 	cmpl   $0x77ff,-0xc(%ebp)
f012a8a7:	7e bb                	jle    f012a864 <test_kfreelast+0x188e>
			//cprintf("\n\ncr2 = %x, faulted addr = %x", sys_rcr2(), (uint32)&(ptr[0]));
			if (sys_rcr2() != (uint32)&(ptr[i])) if (!f) {f=1; cprintf("\nkfree: successful access to freed space!! it should not be succeeded");}
		}

		//set it to 0 again to cancel the bypassing option
		sys_bypassPageFault(0);
f012a8a9:	83 ec 0c             	sub    $0xc,%esp
f012a8ac:	6a 00                	push   $0x0
f012a8ae:	e8 b4 1f fe ff       	call   f010c867 <sys_bypassPageFault>
f012a8b3:	83 c4 10             	add    $0x10,%esp

	}

	if (!f) {ce += 15;cprintf("\nkfreelast: current evaluation = %d%\n", ce);} f=0;
f012a8b6:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012a8ba:	75 17                	jne    f012a8d3 <test_kfreelast+0x18fd>
f012a8bc:	83 45 f0 0f          	addl   $0xf,-0x10(%ebp)
f012a8c0:	83 ec 08             	sub    $0x8,%esp
f012a8c3:	ff 75 f0             	pushl  -0x10(%ebp)
f012a8c6:	68 a8 b8 13 f0       	push   $0xf013b8a8
f012a8cb:	e8 5d 63 fd ff       	call   f0100c2d <cprintf>
f012a8d0:	83 c4 10             	add    $0x10,%esp
f012a8d3:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)

	//kfree last allocated three spaces [but with different order]
	{
		//kfree 10 KB
		freeFrames = sys_calculate_free_frames() ;
f012a8da:	e8 df 1a fe ff       	call   f010c3be <sys_calculate_free_frames>
f012a8df:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012a8e2:	e8 a5 93 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f012a8e7:	89 45 d0             	mov    %eax,-0x30(%ebp)
		kfree(ptr_allocations[12]);
f012a8ea:	8b 85 9c fd ff ff    	mov    -0x264(%ebp),%eax
f012a8f0:	83 ec 0c             	sub    $0xc,%esp
f012a8f3:	50                   	push   %eax
f012a8f4:	e8 e5 cc fd ff       	call   f01075de <kfree>
f012a8f9:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f012a8fc:	e8 8b 93 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f012a901:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012a904:	74 1d                	je     f012a923 <test_kfreelast+0x194d>
f012a906:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012a90a:	75 17                	jne    f012a923 <test_kfreelast+0x194d>
f012a90c:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012a913:	83 ec 0c             	sub    $0xc,%esp
f012a916:	68 d0 b8 13 f0       	push   $0xf013b8d0
f012a91b:	e8 0d 63 fd ff       	call   f0100c2d <cprintf>
f012a920:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 3) if (!f) {f=1; cprintf("\nWrong kfree: pages in memory are not freed correctly");}
f012a923:	e8 96 1a fe ff       	call   f010c3be <sys_calculate_free_frames>
f012a928:	89 c2                	mov    %eax,%edx
f012a92a:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f012a92d:	29 c2                	sub    %eax,%edx
f012a92f:	89 d0                	mov    %edx,%eax
f012a931:	83 f8 03             	cmp    $0x3,%eax
f012a934:	74 1d                	je     f012a953 <test_kfreelast+0x197d>
f012a936:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012a93a:	75 17                	jne    f012a953 <test_kfreelast+0x197d>
f012a93c:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012a943:	83 ec 0c             	sub    $0xc,%esp
f012a946:	68 3c b9 13 f0       	push   $0xf013b93c
f012a94b:	e8 dd 62 fd ff       	call   f0100c2d <cprintf>
f012a950:	83 c4 10             	add    $0x10,%esp

		//kfree 14 KB
		freeFrames = sys_calculate_free_frames() ;
f012a953:	e8 66 1a fe ff       	call   f010c3be <sys_calculate_free_frames>
f012a958:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012a95b:	e8 2c 93 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f012a960:	89 45 d0             	mov    %eax,-0x30(%ebp)
		kfree(ptr_allocations[7]);
f012a963:	8b 85 88 fd ff ff    	mov    -0x278(%ebp),%eax
f012a969:	83 ec 0c             	sub    $0xc,%esp
f012a96c:	50                   	push   %eax
f012a96d:	e8 6c cc fd ff       	call   f01075de <kfree>
f012a972:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f012a975:	e8 12 93 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f012a97a:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012a97d:	74 1d                	je     f012a99c <test_kfreelast+0x19c6>
f012a97f:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012a983:	75 17                	jne    f012a99c <test_kfreelast+0x19c6>
f012a985:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012a98c:	83 ec 0c             	sub    $0xc,%esp
f012a98f:	68 d0 b8 13 f0       	push   $0xf013b8d0
f012a994:	e8 94 62 fd ff       	call   f0100c2d <cprintf>
f012a999:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 4) if (!f) {f=1; cprintf("\nWrong kfree: pages in memory are not freed correctly");}
f012a99c:	e8 1d 1a fe ff       	call   f010c3be <sys_calculate_free_frames>
f012a9a1:	89 c2                	mov    %eax,%edx
f012a9a3:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f012a9a6:	29 c2                	sub    %eax,%edx
f012a9a8:	89 d0                	mov    %edx,%eax
f012a9aa:	83 f8 04             	cmp    $0x4,%eax
f012a9ad:	74 1d                	je     f012a9cc <test_kfreelast+0x19f6>
f012a9af:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012a9b3:	75 17                	jne    f012a9cc <test_kfreelast+0x19f6>
f012a9b5:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012a9bc:	83 ec 0c             	sub    $0xc,%esp
f012a9bf:	68 3c b9 13 f0       	push   $0xf013b93c
f012a9c4:	e8 64 62 fd ff       	call   f0100c2d <cprintf>
f012a9c9:	83 c4 10             	add    $0x10,%esp

		//kfree 20 KB
		freeFrames = sys_calculate_free_frames() ;
f012a9cc:	e8 ed 19 fe ff       	call   f010c3be <sys_calculate_free_frames>
f012a9d1:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012a9d4:	e8 b3 92 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f012a9d9:	89 45 d0             	mov    %eax,-0x30(%ebp)
		kfree(ptr_allocations[8]);
f012a9dc:	8b 85 8c fd ff ff    	mov    -0x274(%ebp),%eax
f012a9e2:	83 ec 0c             	sub    $0xc,%esp
f012a9e5:	50                   	push   %eax
f012a9e6:	e8 f3 cb fd ff       	call   f01075de <kfree>
f012a9eb:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f012a9ee:	e8 99 92 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f012a9f3:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012a9f6:	74 1d                	je     f012aa15 <test_kfreelast+0x1a3f>
f012a9f8:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012a9fc:	75 17                	jne    f012aa15 <test_kfreelast+0x1a3f>
f012a9fe:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012aa05:	83 ec 0c             	sub    $0xc,%esp
f012aa08:	68 d0 b8 13 f0       	push   $0xf013b8d0
f012aa0d:	e8 1b 62 fd ff       	call   f0100c2d <cprintf>
f012aa12:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 5) if (!f) {f=1; cprintf("\nWrong kfree: pages in memory are not freed correctly");}
f012aa15:	e8 a4 19 fe ff       	call   f010c3be <sys_calculate_free_frames>
f012aa1a:	89 c2                	mov    %eax,%edx
f012aa1c:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f012aa1f:	29 c2                	sub    %eax,%edx
f012aa21:	89 d0                	mov    %edx,%eax
f012aa23:	83 f8 05             	cmp    $0x5,%eax
f012aa26:	74 1d                	je     f012aa45 <test_kfreelast+0x1a6f>
f012aa28:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012aa2c:	75 17                	jne    f012aa45 <test_kfreelast+0x1a6f>
f012aa2e:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012aa35:	83 ec 0c             	sub    $0xc,%esp
f012aa38:	68 3c b9 13 f0       	push   $0xf013b93c
f012aa3d:	e8 eb 61 fd ff       	call   f0100c2d <cprintf>
f012aa42:	83 c4 10             	add    $0x10,%esp


	//Allocate after kfree last allocated 3 spaces with different order [25%]
	{
		//50 KB
		freeFrames = sys_calculate_free_frames() ;
f012aa45:	e8 74 19 fe ff       	call   f010c3be <sys_calculate_free_frames>
f012aa4a:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012aa4d:	e8 3a 92 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f012aa52:	89 45 d0             	mov    %eax,-0x30(%ebp)
		ptr_allocations[13] = kmalloc(50*kilo);
f012aa55:	83 ec 0c             	sub    $0xc,%esp
f012aa58:	68 00 c8 00 00       	push   $0xc800
f012aa5d:	e8 62 cb fd ff       	call   f01075c4 <kmalloc>
f012aa62:	83 c4 10             	add    $0x10,%esp
f012aa65:	89 85 a0 fd ff ff    	mov    %eax,-0x260(%ebp)
		if ((uint32) ptr_allocations[13] != (ACTUAL_START + 7*Mega + 16*kilo)) if (!f) {f=1; cprintf("\nWrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");}
f012aa6b:	8b 85 a0 fd ff ff    	mov    -0x260(%ebp),%eax
f012aa71:	89 c1                	mov    %eax,%ecx
f012aa73:	c7 85 88 fe ff ff 00 	movl   $0x1000,-0x178(%ebp)
f012aa7a:	10 00 00 
f012aa7d:	8b 85 88 fe ff ff    	mov    -0x178(%ebp),%eax
f012aa83:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012aa88:	89 85 84 fe ff ff    	mov    %eax,-0x17c(%ebp)
f012aa8e:	8b 85 84 fe ff ff    	mov    -0x17c(%ebp),%eax
f012aa94:	ba 00 00 00 00       	mov    $0x0,%edx
f012aa99:	f7 b5 88 fe ff ff    	divl   -0x178(%ebp)
f012aa9f:	8b 85 84 fe ff ff    	mov    -0x17c(%ebp),%eax
f012aaa5:	29 d0                	sub    %edx,%eax
f012aaa7:	89 c3                	mov    %eax,%ebx
f012aaa9:	c7 85 80 fe ff ff 00 	movl   $0x1000,-0x180(%ebp)
f012aab0:	10 00 00 
f012aab3:	a0 bc 0e 6c f0       	mov    0xf06c0ebc,%al
f012aab8:	0f b6 d0             	movzbl %al,%edx
f012aabb:	8b 85 80 fe ff ff    	mov    -0x180(%ebp),%eax
f012aac1:	01 d0                	add    %edx,%eax
f012aac3:	48                   	dec    %eax
f012aac4:	89 85 7c fe ff ff    	mov    %eax,-0x184(%ebp)
f012aaca:	8b 85 7c fe ff ff    	mov    -0x184(%ebp),%eax
f012aad0:	ba 00 00 00 00       	mov    $0x0,%edx
f012aad5:	f7 b5 80 fe ff ff    	divl   -0x180(%ebp)
f012aadb:	8b 85 7c fe ff ff    	mov    -0x184(%ebp),%eax
f012aae1:	29 d0                	sub    %edx,%eax
f012aae3:	01 c3                	add    %eax,%ebx
f012aae5:	c7 85 78 fe ff ff 00 	movl   $0x1000,-0x188(%ebp)
f012aaec:	10 00 00 
f012aaef:	a0 bc 0e 6c f0       	mov    0xf06c0ebc,%al
f012aaf4:	0f b6 c0             	movzbl %al,%eax
f012aaf7:	c1 e0 04             	shl    $0x4,%eax
f012aafa:	89 c2                	mov    %eax,%edx
f012aafc:	8b 85 78 fe ff ff    	mov    -0x188(%ebp),%eax
f012ab02:	01 d0                	add    %edx,%eax
f012ab04:	48                   	dec    %eax
f012ab05:	89 85 74 fe ff ff    	mov    %eax,-0x18c(%ebp)
f012ab0b:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f012ab11:	ba 00 00 00 00       	mov    $0x0,%edx
f012ab16:	f7 b5 78 fe ff ff    	divl   -0x188(%ebp)
f012ab1c:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f012ab22:	29 d0                	sub    %edx,%eax
f012ab24:	01 d8                	add    %ebx,%eax
f012ab26:	2d 00 80 8f 09       	sub    $0x98f8000,%eax
f012ab2b:	39 c1                	cmp    %eax,%ecx
f012ab2d:	74 1d                	je     f012ab4c <test_kfreelast+0x1b76>
f012ab2f:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012ab33:	75 17                	jne    f012ab4c <test_kfreelast+0x1b76>
f012ab35:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012ab3c:	83 ec 0c             	sub    $0xc,%esp
f012ab3f:	68 74 b9 13 f0       	push   $0xf013b974
f012ab44:	e8 e4 60 fd ff       	call   f0100c2d <cprintf>
f012ab49:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f012ab4c:	e8 3b 91 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f012ab51:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012ab54:	74 1d                	je     f012ab73 <test_kfreelast+0x1b9d>
f012ab56:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012ab5a:	75 17                	jne    f012ab73 <test_kfreelast+0x1b9d>
f012ab5c:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012ab63:	83 ec 0c             	sub    $0xc,%esp
f012ab66:	68 d0 b8 13 f0       	push   $0xf013b8d0
f012ab6b:	e8 bd 60 fd ff       	call   f0100c2d <cprintf>
f012ab70:	83 c4 10             	add    $0x10,%esp
		if ((freeFrames - sys_calculate_free_frames()) != 13) if (!f) {f=1; cprintf("\nWrong allocation: pages are not loaded successfully into memory");}
f012ab73:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
f012ab76:	e8 43 18 fe ff       	call   f010c3be <sys_calculate_free_frames>
f012ab7b:	29 c3                	sub    %eax,%ebx
f012ab7d:	89 d8                	mov    %ebx,%eax
f012ab7f:	83 f8 0d             	cmp    $0xd,%eax
f012ab82:	74 1d                	je     f012aba1 <test_kfreelast+0x1bcb>
f012ab84:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012ab88:	75 17                	jne    f012aba1 <test_kfreelast+0x1bcb>
f012ab8a:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012ab91:	83 ec 0c             	sub    $0xc,%esp
f012ab94:	68 dc b9 13 f0       	push   $0xf013b9dc
f012ab99:	e8 8f 60 fd ff       	call   f0100c2d <cprintf>
f012ab9e:	83 c4 10             	add    $0x10,%esp
		lastIndices[13] = (50*kilo)/sizeof(char) - 1;
f012aba1:	c7 85 40 fe ff ff ff 	movl   $0xc7ff,-0x1c0(%ebp)
f012aba8:	c7 00 00 
		ptr = (char*)ptr_allocations[13];
f012abab:	8b 85 a0 fd ff ff    	mov    -0x260(%ebp),%eax
f012abb1:	89 45 84             	mov    %eax,-0x7c(%ebp)
		for (i = 0; i < lastIndices[13]; ++i)
f012abb4:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012abbb:	eb 0e                	jmp    f012abcb <test_kfreelast+0x1bf5>
		{
			ptr[i] = 13 ;
f012abbd:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012abc0:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012abc3:	01 d0                	add    %edx,%eax
f012abc5:	c6 00 0d             	movb   $0xd,(%eax)
		if ((uint32) ptr_allocations[13] != (ACTUAL_START + 7*Mega + 16*kilo)) if (!f) {f=1; cprintf("\nWrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");}
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
		if ((freeFrames - sys_calculate_free_frames()) != 13) if (!f) {f=1; cprintf("\nWrong allocation: pages are not loaded successfully into memory");}
		lastIndices[13] = (50*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[13];
		for (i = 0; i < lastIndices[13]; ++i)
f012abc8:	ff 45 f4             	incl   -0xc(%ebp)
f012abcb:	8b 85 40 fe ff ff    	mov    -0x1c0(%ebp),%eax
f012abd1:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012abd4:	7f e7                	jg     f012abbd <test_kfreelast+0x1be7>
		{
			ptr[i] = 13 ;
		}

		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f012abd6:	e8 e3 17 fe ff       	call   f010c3be <sys_calculate_free_frames>
f012abdb:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012abde:	e8 a9 90 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f012abe3:	89 45 d0             	mov    %eax,-0x30(%ebp)
		ptr_allocations[14] = kmalloc(3*Mega-kilo);
f012abe6:	83 ec 0c             	sub    $0xc,%esp
f012abe9:	68 00 fc 2f 00       	push   $0x2ffc00
f012abee:	e8 d1 c9 fd ff       	call   f01075c4 <kmalloc>
f012abf3:	83 c4 10             	add    $0x10,%esp
f012abf6:	89 85 a4 fd ff ff    	mov    %eax,-0x25c(%ebp)
		if ((uint32) ptr_allocations[14] != (ACTUAL_START + 7*Mega + 68*kilo) ) if (!f) {f=1; cprintf("\nWrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");}
f012abfc:	8b 85 a4 fd ff ff    	mov    -0x25c(%ebp),%eax
f012ac02:	89 c1                	mov    %eax,%ecx
f012ac04:	c7 85 70 fe ff ff 00 	movl   $0x1000,-0x190(%ebp)
f012ac0b:	10 00 00 
f012ac0e:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f012ac14:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012ac19:	89 85 6c fe ff ff    	mov    %eax,-0x194(%ebp)
f012ac1f:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f012ac25:	ba 00 00 00 00       	mov    $0x0,%edx
f012ac2a:	f7 b5 70 fe ff ff    	divl   -0x190(%ebp)
f012ac30:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f012ac36:	29 d0                	sub    %edx,%eax
f012ac38:	89 c3                	mov    %eax,%ebx
f012ac3a:	c7 85 68 fe ff ff 00 	movl   $0x1000,-0x198(%ebp)
f012ac41:	10 00 00 
f012ac44:	a0 bc 0e 6c f0       	mov    0xf06c0ebc,%al
f012ac49:	0f b6 d0             	movzbl %al,%edx
f012ac4c:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f012ac52:	01 d0                	add    %edx,%eax
f012ac54:	48                   	dec    %eax
f012ac55:	89 85 64 fe ff ff    	mov    %eax,-0x19c(%ebp)
f012ac5b:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f012ac61:	ba 00 00 00 00       	mov    $0x0,%edx
f012ac66:	f7 b5 68 fe ff ff    	divl   -0x198(%ebp)
f012ac6c:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f012ac72:	29 d0                	sub    %edx,%eax
f012ac74:	01 c3                	add    %eax,%ebx
f012ac76:	c7 85 60 fe ff ff 00 	movl   $0x1000,-0x1a0(%ebp)
f012ac7d:	10 00 00 
f012ac80:	a0 bc 0e 6c f0       	mov    0xf06c0ebc,%al
f012ac85:	0f b6 c0             	movzbl %al,%eax
f012ac88:	c1 e0 04             	shl    $0x4,%eax
f012ac8b:	89 c2                	mov    %eax,%edx
f012ac8d:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f012ac93:	01 d0                	add    %edx,%eax
f012ac95:	48                   	dec    %eax
f012ac96:	89 85 5c fe ff ff    	mov    %eax,-0x1a4(%ebp)
f012ac9c:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f012aca2:	ba 00 00 00 00       	mov    $0x0,%edx
f012aca7:	f7 b5 60 fe ff ff    	divl   -0x1a0(%ebp)
f012acad:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f012acb3:	29 d0                	sub    %edx,%eax
f012acb5:	01 d8                	add    %ebx,%eax
f012acb7:	2d 00 b0 8e 09       	sub    $0x98eb000,%eax
f012acbc:	39 c1                	cmp    %eax,%ecx
f012acbe:	74 1d                	je     f012acdd <test_kfreelast+0x1d07>
f012acc0:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012acc4:	75 17                	jne    f012acdd <test_kfreelast+0x1d07>
f012acc6:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012accd:	83 ec 0c             	sub    $0xc,%esp
f012acd0:	68 74 b9 13 f0       	push   $0xf013b974
f012acd5:	e8 53 5f fd ff       	call   f0100c2d <cprintf>
f012acda:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f012acdd:	e8 aa 8f fd ff       	call   f0103c8c <pf_calculate_free_frames>
f012ace2:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012ace5:	74 1d                	je     f012ad04 <test_kfreelast+0x1d2e>
f012ace7:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012aceb:	75 17                	jne    f012ad04 <test_kfreelast+0x1d2e>
f012aced:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012acf4:	83 ec 0c             	sub    $0xc,%esp
f012acf7:	68 d0 b8 13 f0       	push   $0xf013b8d0
f012acfc:	e8 2c 5f fd ff       	call   f0100c2d <cprintf>
f012ad01:	83 c4 10             	add    $0x10,%esp
		if ((freeFrames - sys_calculate_free_frames()) != 768) if (!f) {f=1; cprintf("\nWrong allocation: pages are not loaded successfully into memory");}
f012ad04:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
f012ad07:	e8 b2 16 fe ff       	call   f010c3be <sys_calculate_free_frames>
f012ad0c:	29 c3                	sub    %eax,%ebx
f012ad0e:	89 d8                	mov    %ebx,%eax
f012ad10:	3d 00 03 00 00       	cmp    $0x300,%eax
f012ad15:	74 1d                	je     f012ad34 <test_kfreelast+0x1d5e>
f012ad17:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012ad1b:	75 17                	jne    f012ad34 <test_kfreelast+0x1d5e>
f012ad1d:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012ad24:	83 ec 0c             	sub    $0xc,%esp
f012ad27:	68 dc b9 13 f0       	push   $0xf013b9dc
f012ad2c:	e8 fc 5e fd ff       	call   f0100c2d <cprintf>
f012ad31:	83 c4 10             	add    $0x10,%esp
		lastIndices[14] = (3*Mega-kilo)/sizeof(char) - 1;
f012ad34:	c7 85 44 fe ff ff ff 	movl   $0x2ffbff,-0x1bc(%ebp)
f012ad3b:	fb 2f 00 
		ptr = (char*)ptr_allocations[14];
f012ad3e:	8b 85 a4 fd ff ff    	mov    -0x25c(%ebp),%eax
f012ad44:	89 45 84             	mov    %eax,-0x7c(%ebp)
		for (i = 0; i < lastIndices[14]; ++i)
f012ad47:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012ad4e:	eb 0e                	jmp    f012ad5e <test_kfreelast+0x1d88>
		{
			ptr[i] = 14 ;
f012ad50:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012ad53:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012ad56:	01 d0                	add    %edx,%eax
f012ad58:	c6 00 0e             	movb   $0xe,(%eax)
		if ((uint32) ptr_allocations[14] != (ACTUAL_START + 7*Mega + 68*kilo) ) if (!f) {f=1; cprintf("\nWrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");}
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
		if ((freeFrames - sys_calculate_free_frames()) != 768) if (!f) {f=1; cprintf("\nWrong allocation: pages are not loaded successfully into memory");}
		lastIndices[14] = (3*Mega-kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[14];
		for (i = 0; i < lastIndices[14]; ++i)
f012ad5b:	ff 45 f4             	incl   -0xc(%ebp)
f012ad5e:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f012ad64:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012ad67:	7f e7                	jg     f012ad50 <test_kfreelast+0x1d7a>
		{
			ptr[i] = 14 ;
		}
	}

	if (!f) {ce += 25;cprintf("\nkfreelast: current evaluation = %d%\n", ce);} f=0;
f012ad69:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012ad6d:	75 17                	jne    f012ad86 <test_kfreelast+0x1db0>
f012ad6f:	83 45 f0 19          	addl   $0x19,-0x10(%ebp)
f012ad73:	83 ec 08             	sub    $0x8,%esp
f012ad76:	ff 75 f0             	pushl  -0x10(%ebp)
f012ad79:	68 a8 b8 13 f0       	push   $0xf013b8a8
f012ad7e:	e8 aa 5e fd ff       	call   f0100c2d <cprintf>
f012ad83:	83 c4 10             	add    $0x10,%esp
f012ad86:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)

	//kfree one of the newly allocated space that override a previously allocated one
	{
		//kfree 50 KB
		freeFrames = sys_calculate_free_frames() ;
f012ad8d:	e8 2c 16 fe ff       	call   f010c3be <sys_calculate_free_frames>
f012ad92:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012ad95:	e8 f2 8e fd ff       	call   f0103c8c <pf_calculate_free_frames>
f012ad9a:	89 45 d0             	mov    %eax,-0x30(%ebp)
		kfree(ptr_allocations[13]);
f012ad9d:	8b 85 a0 fd ff ff    	mov    -0x260(%ebp),%eax
f012ada3:	83 ec 0c             	sub    $0xc,%esp
f012ada6:	50                   	push   %eax
f012ada7:	e8 32 c8 fd ff       	call   f01075de <kfree>
f012adac:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f012adaf:	e8 d8 8e fd ff       	call   f0103c8c <pf_calculate_free_frames>
f012adb4:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012adb7:	74 1d                	je     f012add6 <test_kfreelast+0x1e00>
f012adb9:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012adbd:	75 17                	jne    f012add6 <test_kfreelast+0x1e00>
f012adbf:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012adc6:	83 ec 0c             	sub    $0xc,%esp
f012adc9:	68 d0 b8 13 f0       	push   $0xf013b8d0
f012adce:	e8 5a 5e fd ff       	call   f0100c2d <cprintf>
f012add3:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 13) if (!f) {f=1; cprintf("\nWrong kfree: pages in memory are not freed correctly");}
f012add6:	e8 e3 15 fe ff       	call   f010c3be <sys_calculate_free_frames>
f012addb:	89 c2                	mov    %eax,%edx
f012addd:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f012ade0:	29 c2                	sub    %eax,%edx
f012ade2:	89 d0                	mov    %edx,%eax
f012ade4:	83 f8 0d             	cmp    $0xd,%eax
f012ade7:	74 1d                	je     f012ae06 <test_kfreelast+0x1e30>
f012ade9:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012aded:	75 17                	jne    f012ae06 <test_kfreelast+0x1e30>
f012adef:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012adf6:	83 ec 0c             	sub    $0xc,%esp
f012adf9:	68 3c b9 13 f0       	push   $0xf013b93c
f012adfe:	e8 2a 5e fd ff       	call   f0100c2d <cprintf>
f012ae03:	83 c4 10             	add    $0x10,%esp
	{
		//50 KB

		//Bypass the PAGE FAULT on <MOVB immediate, reg> instruction by setting its length
		//and continue executing the remaining code
		sys_bypassPageFault(3);
f012ae06:	83 ec 0c             	sub    $0xc,%esp
f012ae09:	6a 03                	push   $0x3
f012ae0b:	e8 57 1a fe ff       	call   f010c867 <sys_bypassPageFault>
f012ae10:	83 c4 10             	add    $0x10,%esp

		ptr = (char *) ptr_allocations[13];
f012ae13:	8b 85 a0 fd ff ff    	mov    -0x260(%ebp),%eax
f012ae19:	89 45 84             	mov    %eax,-0x7c(%ebp)

		for (i = 0; i < 50*kilo; ++i)
f012ae1c:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012ae23:	eb 3c                	jmp    f012ae61 <test_kfreelast+0x1e8b>
		{
			ptr[i] = 10;
f012ae25:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012ae28:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012ae2b:	01 d0                	add    %edx,%eax
f012ae2d:	c6 00 0a             	movb   $0xa,(%eax)
			//cprintf("\n\ncr2 = %x, faulted addr = %x", sys_rcr2(), (uint32)&(ptr[0]));
			if (sys_rcr2() != (uint32)&(ptr[i])) if (!f) {f=1; cprintf("\nkfree: successful access to freed space!! it should not be succeeded");}
f012ae30:	e8 20 1a fe ff       	call   f010c855 <sys_rcr2>
f012ae35:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f012ae38:	8b 55 84             	mov    -0x7c(%ebp),%edx
f012ae3b:	01 ca                	add    %ecx,%edx
f012ae3d:	39 d0                	cmp    %edx,%eax
f012ae3f:	74 1d                	je     f012ae5e <test_kfreelast+0x1e88>
f012ae41:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012ae45:	75 17                	jne    f012ae5e <test_kfreelast+0x1e88>
f012ae47:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012ae4e:	83 ec 0c             	sub    $0xc,%esp
f012ae51:	68 54 ba 13 f0       	push   $0xf013ba54
f012ae56:	e8 d2 5d fd ff       	call   f0100c2d <cprintf>
f012ae5b:	83 c4 10             	add    $0x10,%esp
		//and continue executing the remaining code
		sys_bypassPageFault(3);

		ptr = (char *) ptr_allocations[13];

		for (i = 0; i < 50*kilo; ++i)
f012ae5e:	ff 45 f4             	incl   -0xc(%ebp)
f012ae61:	81 7d f4 ff c7 00 00 	cmpl   $0xc7ff,-0xc(%ebp)
f012ae68:	7e bb                	jle    f012ae25 <test_kfreelast+0x1e4f>
			//cprintf("\n\ncr2 = %x, faulted addr = %x", sys_rcr2(), (uint32)&(ptr[0]));
			if (sys_rcr2() != (uint32)&(ptr[i])) if (!f) {f=1; cprintf("\nkfree: successful access to freed space!! it should not be succeeded");}
		}

		//set it to 0 again to cancel the bypassing option
		sys_bypassPageFault(0);
f012ae6a:	83 ec 0c             	sub    $0xc,%esp
f012ae6d:	6a 00                	push   $0x0
f012ae6f:	e8 f3 19 fe ff       	call   f010c867 <sys_bypassPageFault>
f012ae74:	83 c4 10             	add    $0x10,%esp


		//3 MB
		ptr = (char*)ptr_allocations[14];
f012ae77:	8b 85 a4 fd ff ff    	mov    -0x25c(%ebp),%eax
f012ae7d:	89 45 84             	mov    %eax,-0x7c(%ebp)
		for (i = 0; i < lastIndices[14]; ++i)
f012ae80:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012ae87:	eb 1e                	jmp    f012aea7 <test_kfreelast+0x1ed1>
		{
			sums[14] += ptr[i] ;
f012ae89:	8b 95 f4 fd ff ff    	mov    -0x20c(%ebp),%edx
f012ae8f:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f012ae92:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012ae95:	01 c8                	add    %ecx,%eax
f012ae97:	8a 00                	mov    (%eax),%al
f012ae99:	0f be c0             	movsbl %al,%eax
f012ae9c:	01 d0                	add    %edx,%eax
f012ae9e:	89 85 f4 fd ff ff    	mov    %eax,-0x20c(%ebp)
		sys_bypassPageFault(0);


		//3 MB
		ptr = (char*)ptr_allocations[14];
		for (i = 0; i < lastIndices[14]; ++i)
f012aea4:	ff 45 f4             	incl   -0xc(%ebp)
f012aea7:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f012aead:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012aeb0:	7f d7                	jg     f012ae89 <test_kfreelast+0x1eb3>
		{
			sums[14] += ptr[i] ;
		}
		if (sums[14] != 14*lastIndices[14])	if (!f) {f=1; cprintf("\nkfree: invalid read after freeing some allocations");}
f012aeb2:	8b 8d f4 fd ff ff    	mov    -0x20c(%ebp),%ecx
f012aeb8:	8b 95 44 fe ff ff    	mov    -0x1bc(%ebp),%edx
f012aebe:	89 d0                	mov    %edx,%eax
f012aec0:	01 c0                	add    %eax,%eax
f012aec2:	01 d0                	add    %edx,%eax
f012aec4:	01 c0                	add    %eax,%eax
f012aec6:	01 d0                	add    %edx,%eax
f012aec8:	01 c0                	add    %eax,%eax
f012aeca:	39 c1                	cmp    %eax,%ecx
f012aecc:	74 1d                	je     f012aeeb <test_kfreelast+0x1f15>
f012aece:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012aed2:	75 17                	jne    f012aeeb <test_kfreelast+0x1f15>
f012aed4:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012aedb:	83 ec 0c             	sub    $0xc,%esp
f012aede:	68 20 ba 13 f0       	push   $0xf013ba20
f012aee3:	e8 45 5d fd ff       	call   f0100c2d <cprintf>
f012aee8:	83 c4 10             	add    $0x10,%esp
	}

	if (!f) {ce += 15;cprintf("\nkfreelast: current evaluation = %d%\n", ce);} f=0;
f012aeeb:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012aeef:	75 17                	jne    f012af08 <test_kfreelast+0x1f32>
f012aef1:	83 45 f0 0f          	addl   $0xf,-0x10(%ebp)
f012aef5:	83 ec 08             	sub    $0x8,%esp
f012aef8:	ff 75 f0             	pushl  -0x10(%ebp)
f012aefb:	68 a8 b8 13 f0       	push   $0xf013b8a8
f012af00:	e8 28 5d fd ff       	call   f0100c2d <cprintf>
f012af05:	83 c4 10             	add    $0x10,%esp
f012af08:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)

	//kfree all remaining allocations
	{
		//kfree 7 KB
		freeFrames = sys_calculate_free_frames() ;
f012af0f:	e8 aa 14 fe ff       	call   f010c3be <sys_calculate_free_frames>
f012af14:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012af17:	e8 70 8d fd ff       	call   f0103c8c <pf_calculate_free_frames>
f012af1c:	89 45 d0             	mov    %eax,-0x30(%ebp)
		kfree(ptr_allocations[4]);
f012af1f:	8b 85 7c fd ff ff    	mov    -0x284(%ebp),%eax
f012af25:	83 ec 0c             	sub    $0xc,%esp
f012af28:	50                   	push   %eax
f012af29:	e8 b0 c6 fd ff       	call   f01075de <kfree>
f012af2e:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f012af31:	e8 56 8d fd ff       	call   f0103c8c <pf_calculate_free_frames>
f012af36:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012af39:	74 1d                	je     f012af58 <test_kfreelast+0x1f82>
f012af3b:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012af3f:	75 17                	jne    f012af58 <test_kfreelast+0x1f82>
f012af41:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012af48:	83 ec 0c             	sub    $0xc,%esp
f012af4b:	68 d0 b8 13 f0       	push   $0xf013b8d0
f012af50:	e8 d8 5c fd ff       	call   f0100c2d <cprintf>
f012af55:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 2) if (!f) {f=1; cprintf("\nWrong kfree: pages in memory are not freed correctly");}
f012af58:	e8 61 14 fe ff       	call   f010c3be <sys_calculate_free_frames>
f012af5d:	89 c2                	mov    %eax,%edx
f012af5f:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f012af62:	29 c2                	sub    %eax,%edx
f012af64:	89 d0                	mov    %edx,%eax
f012af66:	83 f8 02             	cmp    $0x2,%eax
f012af69:	74 1d                	je     f012af88 <test_kfreelast+0x1fb2>
f012af6b:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012af6f:	75 17                	jne    f012af88 <test_kfreelast+0x1fb2>
f012af71:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012af78:	83 ec 0c             	sub    $0xc,%esp
f012af7b:	68 3c b9 13 f0       	push   $0xf013b93c
f012af80:	e8 a8 5c fd ff       	call   f0100c2d <cprintf>
f012af85:	83 c4 10             	add    $0x10,%esp

		//kfree 2nd 3 MB
		freeFrames = sys_calculate_free_frames() ;
f012af88:	e8 31 14 fe ff       	call   f010c3be <sys_calculate_free_frames>
f012af8d:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012af90:	e8 f7 8c fd ff       	call   f0103c8c <pf_calculate_free_frames>
f012af95:	89 45 d0             	mov    %eax,-0x30(%ebp)
		kfree(ptr_allocations[14]);
f012af98:	8b 85 a4 fd ff ff    	mov    -0x25c(%ebp),%eax
f012af9e:	83 ec 0c             	sub    $0xc,%esp
f012afa1:	50                   	push   %eax
f012afa2:	e8 37 c6 fd ff       	call   f01075de <kfree>
f012afa7:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f012afaa:	e8 dd 8c fd ff       	call   f0103c8c <pf_calculate_free_frames>
f012afaf:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012afb2:	74 1d                	je     f012afd1 <test_kfreelast+0x1ffb>
f012afb4:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012afb8:	75 17                	jne    f012afd1 <test_kfreelast+0x1ffb>
f012afba:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012afc1:	83 ec 0c             	sub    $0xc,%esp
f012afc4:	68 d0 b8 13 f0       	push   $0xf013b8d0
f012afc9:	e8 5f 5c fd ff       	call   f0100c2d <cprintf>
f012afce:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 3*Mega/4096) if (!f) {f=1; cprintf("\nWrong kfree: pages in memory are not freed correctly");}
f012afd1:	e8 e8 13 fe ff       	call   f010c3be <sys_calculate_free_frames>
f012afd6:	89 c2                	mov    %eax,%edx
f012afd8:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f012afdb:	29 c2                	sub    %eax,%edx
f012afdd:	89 d0                	mov    %edx,%eax
f012afdf:	3d 00 03 00 00       	cmp    $0x300,%eax
f012afe4:	74 1d                	je     f012b003 <test_kfreelast+0x202d>
f012afe6:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012afea:	75 17                	jne    f012b003 <test_kfreelast+0x202d>
f012afec:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012aff3:	83 ec 0c             	sub    $0xc,%esp
f012aff6:	68 3c b9 13 f0       	push   $0xf013b93c
f012affb:	e8 2d 5c fd ff       	call   f0100c2d <cprintf>
f012b000:	83 c4 10             	add    $0x10,%esp

		//kfree 1st 3 MB
		freeFrames = sys_calculate_free_frames() ;
f012b003:	e8 b6 13 fe ff       	call   f010c3be <sys_calculate_free_frames>
f012b008:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012b00b:	e8 7c 8c fd ff       	call   f0103c8c <pf_calculate_free_frames>
f012b010:	89 45 d0             	mov    %eax,-0x30(%ebp)
		kfree(ptr_allocations[5]);
f012b013:	8b 85 80 fd ff ff    	mov    -0x280(%ebp),%eax
f012b019:	83 ec 0c             	sub    $0xc,%esp
f012b01c:	50                   	push   %eax
f012b01d:	e8 bc c5 fd ff       	call   f01075de <kfree>
f012b022:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f012b025:	e8 62 8c fd ff       	call   f0103c8c <pf_calculate_free_frames>
f012b02a:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012b02d:	74 1d                	je     f012b04c <test_kfreelast+0x2076>
f012b02f:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012b033:	75 17                	jne    f012b04c <test_kfreelast+0x2076>
f012b035:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012b03c:	83 ec 0c             	sub    $0xc,%esp
f012b03f:	68 d0 b8 13 f0       	push   $0xf013b8d0
f012b044:	e8 e4 5b fd ff       	call   f0100c2d <cprintf>
f012b049:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 3*Mega/4096) if (!f) {f=1; cprintf("\nWrong kfree: pages in memory are not freed correctly");}
f012b04c:	e8 6d 13 fe ff       	call   f010c3be <sys_calculate_free_frames>
f012b051:	89 c2                	mov    %eax,%edx
f012b053:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f012b056:	29 c2                	sub    %eax,%edx
f012b058:	89 d0                	mov    %edx,%eax
f012b05a:	3d 00 03 00 00       	cmp    $0x300,%eax
f012b05f:	74 1d                	je     f012b07e <test_kfreelast+0x20a8>
f012b061:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012b065:	75 17                	jne    f012b07e <test_kfreelast+0x20a8>
f012b067:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012b06e:	83 ec 0c             	sub    $0xc,%esp
f012b071:	68 3c b9 13 f0       	push   $0xf013b93c
f012b076:	e8 b2 5b fd ff       	call   f0100c2d <cprintf>
f012b07b:	83 c4 10             	add    $0x10,%esp

		//kfree 1st 2 KB
		freeFrames = sys_calculate_free_frames() ;
f012b07e:	e8 3b 13 fe ff       	call   f010c3be <sys_calculate_free_frames>
f012b083:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012b086:	e8 01 8c fd ff       	call   f0103c8c <pf_calculate_free_frames>
f012b08b:	89 45 d0             	mov    %eax,-0x30(%ebp)
		kfree(ptr_allocations[2]);
f012b08e:	8b 85 74 fd ff ff    	mov    -0x28c(%ebp),%eax
f012b094:	83 ec 0c             	sub    $0xc,%esp
f012b097:	50                   	push   %eax
f012b098:	e8 41 c5 fd ff       	call   f01075de <kfree>
f012b09d:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f012b0a0:	e8 e7 8b fd ff       	call   f0103c8c <pf_calculate_free_frames>
f012b0a5:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012b0a8:	74 1d                	je     f012b0c7 <test_kfreelast+0x20f1>
f012b0aa:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012b0ae:	75 17                	jne    f012b0c7 <test_kfreelast+0x20f1>
f012b0b0:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012b0b7:	83 ec 0c             	sub    $0xc,%esp
f012b0ba:	68 d0 b8 13 f0       	push   $0xf013b8d0
f012b0bf:	e8 69 5b fd ff       	call   f0100c2d <cprintf>
f012b0c4:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 1) if (!f) {f=1; cprintf("\nWrong kfree: pages in memory are not freed correctly");}
f012b0c7:	e8 f2 12 fe ff       	call   f010c3be <sys_calculate_free_frames>
f012b0cc:	89 c2                	mov    %eax,%edx
f012b0ce:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f012b0d1:	29 c2                	sub    %eax,%edx
f012b0d3:	89 d0                	mov    %edx,%eax
f012b0d5:	83 f8 01             	cmp    $0x1,%eax
f012b0d8:	74 1d                	je     f012b0f7 <test_kfreelast+0x2121>
f012b0da:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012b0de:	75 17                	jne    f012b0f7 <test_kfreelast+0x2121>
f012b0e0:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012b0e7:	83 ec 0c             	sub    $0xc,%esp
f012b0ea:	68 3c b9 13 f0       	push   $0xf013b93c
f012b0ef:	e8 39 5b fd ff       	call   f0100c2d <cprintf>
f012b0f4:	83 c4 10             	add    $0x10,%esp

		//kfree 2nd 2 KB
		freeFrames = sys_calculate_free_frames() ;
f012b0f7:	e8 c2 12 fe ff       	call   f010c3be <sys_calculate_free_frames>
f012b0fc:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012b0ff:	e8 88 8b fd ff       	call   f0103c8c <pf_calculate_free_frames>
f012b104:	89 45 d0             	mov    %eax,-0x30(%ebp)
		kfree(ptr_allocations[3]);
f012b107:	8b 85 78 fd ff ff    	mov    -0x288(%ebp),%eax
f012b10d:	83 ec 0c             	sub    $0xc,%esp
f012b110:	50                   	push   %eax
f012b111:	e8 c8 c4 fd ff       	call   f01075de <kfree>
f012b116:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f012b119:	e8 6e 8b fd ff       	call   f0103c8c <pf_calculate_free_frames>
f012b11e:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012b121:	74 1d                	je     f012b140 <test_kfreelast+0x216a>
f012b123:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012b127:	75 17                	jne    f012b140 <test_kfreelast+0x216a>
f012b129:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012b130:	83 ec 0c             	sub    $0xc,%esp
f012b133:	68 d0 b8 13 f0       	push   $0xf013b8d0
f012b138:	e8 f0 5a fd ff       	call   f0100c2d <cprintf>
f012b13d:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 1) if (!f) {f=1; cprintf("\nWrong kfree: pages in memory are not freed correctly");}
f012b140:	e8 79 12 fe ff       	call   f010c3be <sys_calculate_free_frames>
f012b145:	89 c2                	mov    %eax,%edx
f012b147:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f012b14a:	29 c2                	sub    %eax,%edx
f012b14c:	89 d0                	mov    %edx,%eax
f012b14e:	83 f8 01             	cmp    $0x1,%eax
f012b151:	74 1d                	je     f012b170 <test_kfreelast+0x219a>
f012b153:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012b157:	75 17                	jne    f012b170 <test_kfreelast+0x219a>
f012b159:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012b160:	83 ec 0c             	sub    $0xc,%esp
f012b163:	68 3c b9 13 f0       	push   $0xf013b93c
f012b168:	e8 c0 5a fd ff       	call   f0100c2d <cprintf>
f012b16d:	83 c4 10             	add    $0x10,%esp

		if(start_freeFrames != (sys_calculate_free_frames())) if (!f) {f=1; cprintf("\nWrong kfree: not all pages removed correctly at end");}
f012b170:	e8 49 12 fe ff       	call   f010c3be <sys_calculate_free_frames>
f012b175:	89 c2                	mov    %eax,%edx
f012b177:	8b 45 d8             	mov    -0x28(%ebp),%eax
f012b17a:	39 c2                	cmp    %eax,%edx
f012b17c:	74 1d                	je     f012b19b <test_kfreelast+0x21c5>
f012b17e:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012b182:	75 17                	jne    f012b19b <test_kfreelast+0x21c5>
f012b184:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012b18b:	83 ec 0c             	sub    $0xc,%esp
f012b18e:	68 9c ba 13 f0       	push   $0xf013ba9c
f012b193:	e8 95 5a fd ff       	call   f0100c2d <cprintf>
f012b198:	83 c4 10             	add    $0x10,%esp

	//Check memory access after kfree
	{
		//Bypass the PAGE FAULT on <MOVB immediate, reg> instruction by setting its length
		//and continue executing the remaining code
		sys_bypassPageFault(3);
f012b19b:	83 ec 0c             	sub    $0xc,%esp
f012b19e:	6a 03                	push   $0x3
f012b1a0:	e8 c2 16 fe ff       	call   f010c867 <sys_bypassPageFault>
f012b1a5:	83 c4 10             	add    $0x10,%esp

		for (i = 0; i < 15; ++i)
f012b1a8:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012b1af:	e9 8e 00 00 00       	jmp    f012b242 <test_kfreelast+0x226c>
		{
			ptr = (char *) ptr_allocations[i];
f012b1b4:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012b1b7:	8b 84 85 6c fd ff ff 	mov    -0x294(%ebp,%eax,4),%eax
f012b1be:	89 45 84             	mov    %eax,-0x7c(%ebp)
			ptr[0] = 10;
f012b1c1:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012b1c4:	c6 00 0a             	movb   $0xa,(%eax)
			//cprintf("\n\ncr2 = %x, faulted addr = %x", sys_rcr2(), (uint32)&(ptr[0]));
			if (sys_rcr2() != (uint32)&(ptr[0])) if (!f) {f=1; cprintf("\nkfree: successful access to freed space!! it should not be succeeded");}
f012b1c7:	e8 89 16 fe ff       	call   f010c855 <sys_rcr2>
f012b1cc:	89 c2                	mov    %eax,%edx
f012b1ce:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012b1d1:	39 c2                	cmp    %eax,%edx
f012b1d3:	74 1d                	je     f012b1f2 <test_kfreelast+0x221c>
f012b1d5:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012b1d9:	75 17                	jne    f012b1f2 <test_kfreelast+0x221c>
f012b1db:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012b1e2:	83 ec 0c             	sub    $0xc,%esp
f012b1e5:	68 54 ba 13 f0       	push   $0xf013ba54
f012b1ea:	e8 3e 5a fd ff       	call   f0100c2d <cprintf>
f012b1ef:	83 c4 10             	add    $0x10,%esp
			ptr[lastIndices[i]] = 10;
f012b1f2:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012b1f5:	8b 84 85 0c fe ff ff 	mov    -0x1f4(%ebp,%eax,4),%eax
f012b1fc:	89 c2                	mov    %eax,%edx
f012b1fe:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012b201:	01 d0                	add    %edx,%eax
f012b203:	c6 00 0a             	movb   $0xa,(%eax)
			if (sys_rcr2() != (uint32)&(ptr[lastIndices[i]])) if (!f) {f=1; cprintf("\nkfree: successful access to freed space!! it should not be succeeded");}
f012b206:	e8 4a 16 fe ff       	call   f010c855 <sys_rcr2>
f012b20b:	89 c2                	mov    %eax,%edx
f012b20d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012b210:	8b 84 85 0c fe ff ff 	mov    -0x1f4(%ebp,%eax,4),%eax
f012b217:	89 c1                	mov    %eax,%ecx
f012b219:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012b21c:	01 c8                	add    %ecx,%eax
f012b21e:	39 c2                	cmp    %eax,%edx
f012b220:	74 1d                	je     f012b23f <test_kfreelast+0x2269>
f012b222:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012b226:	75 17                	jne    f012b23f <test_kfreelast+0x2269>
f012b228:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012b22f:	83 ec 0c             	sub    $0xc,%esp
f012b232:	68 54 ba 13 f0       	push   $0xf013ba54
f012b237:	e8 f1 59 fd ff       	call   f0100c2d <cprintf>
f012b23c:	83 c4 10             	add    $0x10,%esp
	{
		//Bypass the PAGE FAULT on <MOVB immediate, reg> instruction by setting its length
		//and continue executing the remaining code
		sys_bypassPageFault(3);

		for (i = 0; i < 15; ++i)
f012b23f:	ff 45 f4             	incl   -0xc(%ebp)
f012b242:	83 7d f4 0e          	cmpl   $0xe,-0xc(%ebp)
f012b246:	0f 8e 68 ff ff ff    	jle    f012b1b4 <test_kfreelast+0x21de>
			ptr[lastIndices[i]] = 10;
			if (sys_rcr2() != (uint32)&(ptr[lastIndices[i]])) if (!f) {f=1; cprintf("\nkfree: successful access to freed space!! it should not be succeeded");}
		}

		//set it to 0 again to cancel the bypassing option
		sys_bypassPageFault(0);
f012b24c:	83 ec 0c             	sub    $0xc,%esp
f012b24f:	6a 00                	push   $0x0
f012b251:	e8 11 16 fe ff       	call   f010c867 <sys_bypassPageFault>
f012b256:	83 c4 10             	add    $0x10,%esp
	}

	//kfree non-exist item
	{
		//kfree 2 MB
		freeFrames = sys_calculate_free_frames() ;
f012b259:	e8 60 11 fe ff       	call   f010c3be <sys_calculate_free_frames>
f012b25e:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012b261:	e8 26 8a fd ff       	call   f0103c8c <pf_calculate_free_frames>
f012b266:	89 45 d0             	mov    %eax,-0x30(%ebp)
		kfree(ptr_allocations[0]);
f012b269:	8b 85 6c fd ff ff    	mov    -0x294(%ebp),%eax
f012b26f:	83 ec 0c             	sub    $0xc,%esp
f012b272:	50                   	push   %eax
f012b273:	e8 66 c3 fd ff       	call   f01075de <kfree>
f012b278:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f012b27b:	e8 0c 8a fd ff       	call   f0103c8c <pf_calculate_free_frames>
f012b280:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012b283:	74 1d                	je     f012b2a2 <test_kfreelast+0x22cc>
f012b285:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012b289:	75 17                	jne    f012b2a2 <test_kfreelast+0x22cc>
f012b28b:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012b292:	83 ec 0c             	sub    $0xc,%esp
f012b295:	68 d0 b8 13 f0       	push   $0xf013b8d0
f012b29a:	e8 8e 59 fd ff       	call   f0100c2d <cprintf>
f012b29f:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 0) if (!f) {f=1; cprintf("\nWrong kfree: attempt to kfree a non-existing ptr. It should do nothing");}
f012b2a2:	e8 17 11 fe ff       	call   f010c3be <sys_calculate_free_frames>
f012b2a7:	89 c2                	mov    %eax,%edx
f012b2a9:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f012b2ac:	39 c2                	cmp    %eax,%edx
f012b2ae:	74 1d                	je     f012b2cd <test_kfreelast+0x22f7>
f012b2b0:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012b2b4:	75 17                	jne    f012b2cd <test_kfreelast+0x22f7>
f012b2b6:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012b2bd:	83 ec 0c             	sub    $0xc,%esp
f012b2c0:	68 d4 ba 13 f0       	push   $0xf013bad4
f012b2c5:	e8 63 59 fd ff       	call   f0100c2d <cprintf>
f012b2ca:	83 c4 10             	add    $0x10,%esp

		//kfree 2 KB
		freeFrames = sys_calculate_free_frames() ;
f012b2cd:	e8 ec 10 fe ff       	call   f010c3be <sys_calculate_free_frames>
f012b2d2:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012b2d5:	e8 b2 89 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f012b2da:	89 45 d0             	mov    %eax,-0x30(%ebp)
		kfree(ptr_allocations[2]);
f012b2dd:	8b 85 74 fd ff ff    	mov    -0x28c(%ebp),%eax
f012b2e3:	83 ec 0c             	sub    $0xc,%esp
f012b2e6:	50                   	push   %eax
f012b2e7:	e8 f2 c2 fd ff       	call   f01075de <kfree>
f012b2ec:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f012b2ef:	e8 98 89 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f012b2f4:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012b2f7:	74 1d                	je     f012b316 <test_kfreelast+0x2340>
f012b2f9:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012b2fd:	75 17                	jne    f012b316 <test_kfreelast+0x2340>
f012b2ff:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012b306:	83 ec 0c             	sub    $0xc,%esp
f012b309:	68 d0 b8 13 f0       	push   $0xf013b8d0
f012b30e:	e8 1a 59 fd ff       	call   f0100c2d <cprintf>
f012b313:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 0) if (!f) {f=1; cprintf("\nWrong kfree: attempt to kfree a non-existing ptr. It should do nothing");}
f012b316:	e8 a3 10 fe ff       	call   f010c3be <sys_calculate_free_frames>
f012b31b:	89 c2                	mov    %eax,%edx
f012b31d:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f012b320:	39 c2                	cmp    %eax,%edx
f012b322:	74 1d                	je     f012b341 <test_kfreelast+0x236b>
f012b324:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012b328:	75 17                	jne    f012b341 <test_kfreelast+0x236b>
f012b32a:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012b331:	83 ec 0c             	sub    $0xc,%esp
f012b334:	68 d4 ba 13 f0       	push   $0xf013bad4
f012b339:	e8 ef 58 fd ff       	call   f0100c2d <cprintf>
f012b33e:	83 c4 10             	add    $0x10,%esp

		//kfree 20 KB
		freeFrames = sys_calculate_free_frames() ;
f012b341:	e8 78 10 fe ff       	call   f010c3be <sys_calculate_free_frames>
f012b346:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012b349:	e8 3e 89 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f012b34e:	89 45 d0             	mov    %eax,-0x30(%ebp)
		kfree(ptr_allocations[8]);
f012b351:	8b 85 8c fd ff ff    	mov    -0x274(%ebp),%eax
f012b357:	83 ec 0c             	sub    $0xc,%esp
f012b35a:	50                   	push   %eax
f012b35b:	e8 7e c2 fd ff       	call   f01075de <kfree>
f012b360:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f012b363:	e8 24 89 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f012b368:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012b36b:	74 1d                	je     f012b38a <test_kfreelast+0x23b4>
f012b36d:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012b371:	75 17                	jne    f012b38a <test_kfreelast+0x23b4>
f012b373:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012b37a:	83 ec 0c             	sub    $0xc,%esp
f012b37d:	68 d0 b8 13 f0       	push   $0xf013b8d0
f012b382:	e8 a6 58 fd ff       	call   f0100c2d <cprintf>
f012b387:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 0) if (!f) {f=1; cprintf("\nWrong kfree: attempt to kfree a non-existing ptr. It should do nothing");}
f012b38a:	e8 2f 10 fe ff       	call   f010c3be <sys_calculate_free_frames>
f012b38f:	89 c2                	mov    %eax,%edx
f012b391:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f012b394:	39 c2                	cmp    %eax,%edx
f012b396:	74 1d                	je     f012b3b5 <test_kfreelast+0x23df>
f012b398:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012b39c:	75 17                	jne    f012b3b5 <test_kfreelast+0x23df>
f012b39e:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012b3a5:	83 ec 0c             	sub    $0xc,%esp
f012b3a8:	68 d4 ba 13 f0       	push   $0xf013bad4
f012b3ad:	e8 7b 58 fd ff       	call   f0100c2d <cprintf>
f012b3b2:	83 c4 10             	add    $0x10,%esp

		//kfree 1 MB
		freeFrames = sys_calculate_free_frames() ;
f012b3b5:	e8 04 10 fe ff       	call   f010c3be <sys_calculate_free_frames>
f012b3ba:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012b3bd:	e8 ca 88 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f012b3c2:	89 45 d0             	mov    %eax,-0x30(%ebp)
		kfree(ptr_allocations[9]);
f012b3c5:	8b 85 90 fd ff ff    	mov    -0x270(%ebp),%eax
f012b3cb:	83 ec 0c             	sub    $0xc,%esp
f012b3ce:	50                   	push   %eax
f012b3cf:	e8 0a c2 fd ff       	call   f01075de <kfree>
f012b3d4:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f012b3d7:	e8 b0 88 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f012b3dc:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012b3df:	74 1d                	je     f012b3fe <test_kfreelast+0x2428>
f012b3e1:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012b3e5:	75 17                	jne    f012b3fe <test_kfreelast+0x2428>
f012b3e7:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012b3ee:	83 ec 0c             	sub    $0xc,%esp
f012b3f1:	68 d0 b8 13 f0       	push   $0xf013b8d0
f012b3f6:	e8 32 58 fd ff       	call   f0100c2d <cprintf>
f012b3fb:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 0) if (!f) {f=1; cprintf("\nWrong kfree: attempt to kfree a non-existing ptr. It should do nothing");}
f012b3fe:	e8 bb 0f fe ff       	call   f010c3be <sys_calculate_free_frames>
f012b403:	89 c2                	mov    %eax,%edx
f012b405:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f012b408:	39 c2                	cmp    %eax,%edx
f012b40a:	74 1d                	je     f012b429 <test_kfreelast+0x2453>
f012b40c:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012b410:	75 17                	jne    f012b429 <test_kfreelast+0x2453>
f012b412:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012b419:	83 ec 0c             	sub    $0xc,%esp
f012b41c:	68 d4 ba 13 f0       	push   $0xf013bad4
f012b421:	e8 07 58 fd ff       	call   f0100c2d <cprintf>
f012b426:	83 c4 10             	add    $0x10,%esp

	}

	if (!f) {ce += 10;cprintf("\nkfreelast: current evaluation = %d%\n", ce);} f=0;
f012b429:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012b42d:	75 17                	jne    f012b446 <test_kfreelast+0x2470>
f012b42f:	83 45 f0 0a          	addl   $0xa,-0x10(%ebp)
f012b433:	83 ec 08             	sub    $0x8,%esp
f012b436:	ff 75 f0             	pushl  -0x10(%ebp)
f012b439:	68 a8 b8 13 f0       	push   $0xf013b8a8
f012b43e:	e8 ea 57 fd ff       	call   f0100c2d <cprintf>
f012b443:	83 c4 10             	add    $0x10,%esp
f012b446:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)

	//cprintf("\nCongratulations!! your modification is run successfully.\n");

	return 1;
f012b44d:	b8 01 00 00 00       	mov    $0x1,%eax
}
f012b452:	8d 65 f8             	lea    -0x8(%ebp),%esp
f012b455:	5b                   	pop    %ebx
f012b456:	5f                   	pop    %edi
f012b457:	5d                   	pop    %ebp
f012b458:	c3                   	ret    

f012b459 <test_krealloc>:

int test_krealloc() {
f012b459:	55                   	push   %ebp
f012b45a:	89 e5                	mov    %esp,%ebp
f012b45c:	57                   	push   %edi
f012b45d:	53                   	push   %ebx
f012b45e:	81 ec 50 02 00 00    	sub    $0x250,%esp
	cprintf("==============================================\n");
f012b464:	83 ec 0c             	sub    $0xc,%esp
f012b467:	68 b8 a7 13 f0       	push   $0xf013a7b8
f012b46c:	e8 bc 57 fd ff       	call   f0100c2d <cprintf>
f012b471:	83 c4 10             	add    $0x10,%esp
	cprintf(
f012b474:	83 ec 0c             	sub    $0xc,%esp
f012b477:	68 e8 a7 13 f0       	push   $0xf013a7e8
f012b47c:	e8 ac 57 fd ff       	call   f0100c2d <cprintf>
f012b481:	83 c4 10             	add    $0x10,%esp
			"MAKE SURE to have a FRESH RUN for this test\n(i.e. don't run any program/test before it)\n");
	cprintf("==============================================\n");
f012b484:	83 ec 0c             	sub    $0xc,%esp
f012b487:	68 b8 a7 13 f0       	push   $0xf013a7b8
f012b48c:	e8 9c 57 fd ff       	call   f0100c2d <cprintf>
f012b491:	83 c4 10             	add    $0x10,%esp
	char minByte = 1 << 7;
f012b494:	c6 45 cf 80          	movb   $0x80,-0x31(%ebp)
	char maxByte = 0x7F;
f012b498:	c6 45 ce 7f          	movb   $0x7f,-0x32(%ebp)
	short minShort = 1 << 15;
f012b49c:	66 c7 45 cc 00 80    	movw   $0x8000,-0x34(%ebp)
	short maxShort = 0x7FFF;
f012b4a2:	66 c7 45 ca ff 7f    	movw   $0x7fff,-0x36(%ebp)
	int minInt = 1 << 31;
f012b4a8:	c7 45 c4 00 00 00 80 	movl   $0x80000000,-0x3c(%ebp)
	int maxInt = 0x7FFFFFFF;
f012b4af:	c7 45 c0 ff ff ff 7f 	movl   $0x7fffffff,-0x40(%ebp)
	int *intArr;
	struct MyStruct *structArr;
	int lastIndexOfByte, lastIndexOfByte2, lastIndexOfShort, lastIndexOfShort2,
			lastIndexOfInt, lastIndexOfStruct;
	//[1] Test calling krealloc with VA = NULL. It should call malloc
	void* ptr_allocations[20] = { 0 };
f012b4b6:	8d 95 58 fe ff ff    	lea    -0x1a8(%ebp),%edx
f012b4bc:	b9 14 00 00 00       	mov    $0x14,%ecx
f012b4c1:	b8 00 00 00 00       	mov    $0x0,%eax
f012b4c6:	89 d7                	mov    %edx,%edi
f012b4c8:	f3 ab                	rep stos %eax,%es:(%edi)
	char* ptr;
	void* newAddress = NULL;
f012b4ca:	c7 45 bc 00 00 00 00 	movl   $0x0,-0x44(%ebp)
	int freeDiskFrames;


	int lastIndices[20] = { 0 };
f012b4d1:	8d 95 08 fe ff ff    	lea    -0x1f8(%ebp),%edx
f012b4d7:	b9 14 00 00 00       	mov    $0x14,%ecx
f012b4dc:	b8 00 00 00 00       	mov    $0x0,%eax
f012b4e1:	89 d7                	mov    %edx,%edi
f012b4e3:	f3 ab                	rep stos %eax,%es:(%edi)
	int sums[20] = { 0 };
f012b4e5:	8d 95 b8 fd ff ff    	lea    -0x248(%ebp),%edx
f012b4eb:	b9 14 00 00 00       	mov    $0x14,%ecx
f012b4f0:	b8 00 00 00 00       	mov    $0x0,%eax
f012b4f5:	89 d7                	mov    %edx,%edi
f012b4f7:	f3 ab                	rep stos %eax,%es:(%edi)
	int freeFrames;
	//[1] Allocate all
	{
		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames();
f012b4f9:	e8 c0 0e fe ff       	call   f010c3be <sys_calculate_free_frames>
f012b4fe:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[0] = krealloc(NULL, 1 * Mega - kilo);
f012b501:	83 ec 08             	sub    $0x8,%esp
f012b504:	68 00 fc 0f 00       	push   $0xffc00
f012b509:	6a 00                	push   $0x0
f012b50b:	e8 7c c1 fd ff       	call   f010768c <krealloc>
f012b510:	83 c4 10             	add    $0x10,%esp
f012b513:	89 85 58 fe ff ff    	mov    %eax,-0x1a8(%ebp)
		if ((uint32) ptr_allocations[0] < (KERNEL_HEAP_START))
f012b519:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f012b51f:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012b524:	77 17                	ja     f012b53d <test_krealloc+0xe4>
			panic("krealloc: Wrong start address for the allocated space... ");
f012b526:	83 ec 04             	sub    $0x4,%esp
f012b529:	68 1c bb 13 f0       	push   $0xf013bb1c
f012b52e:	68 e2 0e 00 00       	push   $0xee2
f012b533:	68 76 a8 13 f0       	push   $0xf013a876
f012b538:	e8 69 4c fd ff       	call   f01001a6 <_panic>
		if ((uint32) ptr_allocations[0] != ACTUAL_START)
f012b53d:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f012b543:	89 c1                	mov    %eax,%ecx
f012b545:	c7 45 b4 00 10 00 00 	movl   $0x1000,-0x4c(%ebp)
f012b54c:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f012b54f:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012b554:	89 45 b0             	mov    %eax,-0x50(%ebp)
f012b557:	8b 45 b0             	mov    -0x50(%ebp),%eax
f012b55a:	ba 00 00 00 00       	mov    $0x0,%edx
f012b55f:	f7 75 b4             	divl   -0x4c(%ebp)
f012b562:	8b 45 b0             	mov    -0x50(%ebp),%eax
f012b565:	29 d0                	sub    %edx,%eax
f012b567:	89 c3                	mov    %eax,%ebx
f012b569:	c7 45 ac 00 10 00 00 	movl   $0x1000,-0x54(%ebp)
f012b570:	a0 bc 0e 6c f0       	mov    0xf06c0ebc,%al
f012b575:	0f b6 d0             	movzbl %al,%edx
f012b578:	8b 45 ac             	mov    -0x54(%ebp),%eax
f012b57b:	01 d0                	add    %edx,%eax
f012b57d:	48                   	dec    %eax
f012b57e:	89 45 a8             	mov    %eax,-0x58(%ebp)
f012b581:	8b 45 a8             	mov    -0x58(%ebp),%eax
f012b584:	ba 00 00 00 00       	mov    $0x0,%edx
f012b589:	f7 75 ac             	divl   -0x54(%ebp)
f012b58c:	8b 45 a8             	mov    -0x58(%ebp),%eax
f012b58f:	29 d0                	sub    %edx,%eax
f012b591:	01 c3                	add    %eax,%ebx
f012b593:	c7 45 a4 00 10 00 00 	movl   $0x1000,-0x5c(%ebp)
f012b59a:	a0 bc 0e 6c f0       	mov    0xf06c0ebc,%al
f012b59f:	0f b6 c0             	movzbl %al,%eax
f012b5a2:	c1 e0 04             	shl    $0x4,%eax
f012b5a5:	89 c2                	mov    %eax,%edx
f012b5a7:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f012b5aa:	01 d0                	add    %edx,%eax
f012b5ac:	48                   	dec    %eax
f012b5ad:	89 45 a0             	mov    %eax,-0x60(%ebp)
f012b5b0:	8b 45 a0             	mov    -0x60(%ebp),%eax
f012b5b3:	ba 00 00 00 00       	mov    $0x0,%edx
f012b5b8:	f7 75 a4             	divl   -0x5c(%ebp)
f012b5bb:	8b 45 a0             	mov    -0x60(%ebp),%eax
f012b5be:	29 d0                	sub    %edx,%eax
f012b5c0:	01 d8                	add    %ebx,%eax
f012b5c2:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f012b5c7:	39 c1                	cmp    %eax,%ecx
f012b5c9:	74 17                	je     f012b5e2 <test_krealloc+0x189>
			panic("krealloc: Wrong start address for allocated space");
f012b5cb:	83 ec 04             	sub    $0x4,%esp
f012b5ce:	68 58 bb 13 f0       	push   $0xf013bb58
f012b5d3:	68 e4 0e 00 00       	push   $0xee4
f012b5d8:	68 76 a8 13 f0       	push   $0xf013a876
f012b5dd:	e8 c4 4b fd ff       	call   f01001a6 <_panic>

		if ((freeFrames - sys_calculate_free_frames()) != 256)
f012b5e2:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012b5e5:	e8 d4 0d fe ff       	call   f010c3be <sys_calculate_free_frames>
f012b5ea:	29 c3                	sub    %eax,%ebx
f012b5ec:	89 d8                	mov    %ebx,%eax
f012b5ee:	3d 00 01 00 00       	cmp    $0x100,%eax
f012b5f3:	74 17                	je     f012b60c <test_krealloc+0x1b3>
			panic("krealloc: Wrong allocation: ");
f012b5f5:	83 ec 04             	sub    $0x4,%esp
f012b5f8:	68 8a bb 13 f0       	push   $0xf013bb8a
f012b5fd:	68 e7 0e 00 00       	push   $0xee7
f012b602:	68 76 a8 13 f0       	push   $0xf013a876
f012b607:	e8 9a 4b fd ff       	call   f01001a6 <_panic>

		lastIndices[0] = (1 * Mega - kilo) / sizeof(char) - 1;
f012b60c:	c7 85 08 fe ff ff ff 	movl   $0xffbff,-0x1f8(%ebp)
f012b613:	fb 0f 00 

		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames();
f012b616:	e8 a3 0d fe ff       	call   f010c3be <sys_calculate_free_frames>
f012b61b:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[1] = krealloc(NULL, 1 * Mega - kilo);
f012b61e:	83 ec 08             	sub    $0x8,%esp
f012b621:	68 00 fc 0f 00       	push   $0xffc00
f012b626:	6a 00                	push   $0x0
f012b628:	e8 5f c0 fd ff       	call   f010768c <krealloc>
f012b62d:	83 c4 10             	add    $0x10,%esp
f012b630:	89 85 5c fe ff ff    	mov    %eax,-0x1a4(%ebp)
		if ((uint32) ptr_allocations[1] < (KERNEL_HEAP_START + 1 * Mega))
f012b636:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f012b63c:	3d ff ff 0f f6       	cmp    $0xf60fffff,%eax
f012b641:	77 17                	ja     f012b65a <test_krealloc+0x201>
			panic("krealloc: Wrong start address for the allocated space... ");
f012b643:	83 ec 04             	sub    $0x4,%esp
f012b646:	68 1c bb 13 f0       	push   $0xf013bb1c
f012b64b:	68 ef 0e 00 00       	push   $0xeef
f012b650:	68 76 a8 13 f0       	push   $0xf013a876
f012b655:	e8 4c 4b fd ff       	call   f01001a6 <_panic>
		if ((uint32) ptr_allocations[1] != ACTUAL_START + (1 * Mega))
f012b65a:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f012b660:	89 c1                	mov    %eax,%ecx
f012b662:	c7 45 9c 00 10 00 00 	movl   $0x1000,-0x64(%ebp)
f012b669:	8b 45 9c             	mov    -0x64(%ebp),%eax
f012b66c:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012b671:	89 45 98             	mov    %eax,-0x68(%ebp)
f012b674:	8b 45 98             	mov    -0x68(%ebp),%eax
f012b677:	ba 00 00 00 00       	mov    $0x0,%edx
f012b67c:	f7 75 9c             	divl   -0x64(%ebp)
f012b67f:	8b 45 98             	mov    -0x68(%ebp),%eax
f012b682:	29 d0                	sub    %edx,%eax
f012b684:	89 c3                	mov    %eax,%ebx
f012b686:	c7 45 94 00 10 00 00 	movl   $0x1000,-0x6c(%ebp)
f012b68d:	a0 bc 0e 6c f0       	mov    0xf06c0ebc,%al
f012b692:	0f b6 d0             	movzbl %al,%edx
f012b695:	8b 45 94             	mov    -0x6c(%ebp),%eax
f012b698:	01 d0                	add    %edx,%eax
f012b69a:	48                   	dec    %eax
f012b69b:	89 45 90             	mov    %eax,-0x70(%ebp)
f012b69e:	8b 45 90             	mov    -0x70(%ebp),%eax
f012b6a1:	ba 00 00 00 00       	mov    $0x0,%edx
f012b6a6:	f7 75 94             	divl   -0x6c(%ebp)
f012b6a9:	8b 45 90             	mov    -0x70(%ebp),%eax
f012b6ac:	29 d0                	sub    %edx,%eax
f012b6ae:	01 c3                	add    %eax,%ebx
f012b6b0:	c7 45 8c 00 10 00 00 	movl   $0x1000,-0x74(%ebp)
f012b6b7:	a0 bc 0e 6c f0       	mov    0xf06c0ebc,%al
f012b6bc:	0f b6 c0             	movzbl %al,%eax
f012b6bf:	c1 e0 04             	shl    $0x4,%eax
f012b6c2:	89 c2                	mov    %eax,%edx
f012b6c4:	8b 45 8c             	mov    -0x74(%ebp),%eax
f012b6c7:	01 d0                	add    %edx,%eax
f012b6c9:	48                   	dec    %eax
f012b6ca:	89 45 88             	mov    %eax,-0x78(%ebp)
f012b6cd:	8b 45 88             	mov    -0x78(%ebp),%eax
f012b6d0:	ba 00 00 00 00       	mov    $0x0,%edx
f012b6d5:	f7 75 8c             	divl   -0x74(%ebp)
f012b6d8:	8b 45 88             	mov    -0x78(%ebp),%eax
f012b6db:	29 d0                	sub    %edx,%eax
f012b6dd:	01 d8                	add    %ebx,%eax
f012b6df:	2d 00 c0 ef 09       	sub    $0x9efc000,%eax
f012b6e4:	39 c1                	cmp    %eax,%ecx
f012b6e6:	74 17                	je     f012b6ff <test_krealloc+0x2a6>
			panic("krealloc: Wrong start address for allocated space");
f012b6e8:	83 ec 04             	sub    $0x4,%esp
f012b6eb:	68 58 bb 13 f0       	push   $0xf013bb58
f012b6f0:	68 f1 0e 00 00       	push   $0xef1
f012b6f5:	68 76 a8 13 f0       	push   $0xf013a876
f012b6fa:	e8 a7 4a fd ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256)
f012b6ff:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012b702:	e8 b7 0c fe ff       	call   f010c3be <sys_calculate_free_frames>
f012b707:	29 c3                	sub    %eax,%ebx
f012b709:	89 d8                	mov    %ebx,%eax
f012b70b:	3d 00 01 00 00       	cmp    $0x100,%eax
f012b710:	74 17                	je     f012b729 <test_krealloc+0x2d0>
			panic("krealloc: Wrong allocation: ");
f012b712:	83 ec 04             	sub    $0x4,%esp
f012b715:	68 8a bb 13 f0       	push   $0xf013bb8a
f012b71a:	68 f3 0e 00 00       	push   $0xef3
f012b71f:	68 76 a8 13 f0       	push   $0xf013a876
f012b724:	e8 7d 4a fd ff       	call   f01001a6 <_panic>

		lastIndices[1] = (1 * Mega - kilo) / sizeof(char) - 1;
f012b729:	c7 85 0c fe ff ff ff 	movl   $0xffbff,-0x1f4(%ebp)
f012b730:	fb 0f 00 

		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames();
f012b733:	e8 86 0c fe ff       	call   f010c3be <sys_calculate_free_frames>
f012b738:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[2] = krealloc(NULL, 1 * Mega - kilo);
f012b73b:	83 ec 08             	sub    $0x8,%esp
f012b73e:	68 00 fc 0f 00       	push   $0xffc00
f012b743:	6a 00                	push   $0x0
f012b745:	e8 42 bf fd ff       	call   f010768c <krealloc>
f012b74a:	83 c4 10             	add    $0x10,%esp
f012b74d:	89 85 60 fe ff ff    	mov    %eax,-0x1a0(%ebp)
		if ((uint32) ptr_allocations[2] < (KERNEL_HEAP_START + 2 * Mega))
f012b753:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f012b759:	3d ff ff 1f f6       	cmp    $0xf61fffff,%eax
f012b75e:	77 17                	ja     f012b777 <test_krealloc+0x31e>
			panic("krealloc: Wrong start address for the allocated space... ");
f012b760:	83 ec 04             	sub    $0x4,%esp
f012b763:	68 1c bb 13 f0       	push   $0xf013bb1c
f012b768:	68 fb 0e 00 00       	push   $0xefb
f012b76d:	68 76 a8 13 f0       	push   $0xf013a876
f012b772:	e8 2f 4a fd ff       	call   f01001a6 <_panic>
		if ((uint32) ptr_allocations[2] != ACTUAL_START + (2 * Mega))
f012b777:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f012b77d:	89 c1                	mov    %eax,%ecx
f012b77f:	c7 45 84 00 10 00 00 	movl   $0x1000,-0x7c(%ebp)
f012b786:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012b789:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012b78e:	89 45 80             	mov    %eax,-0x80(%ebp)
f012b791:	8b 45 80             	mov    -0x80(%ebp),%eax
f012b794:	ba 00 00 00 00       	mov    $0x0,%edx
f012b799:	f7 75 84             	divl   -0x7c(%ebp)
f012b79c:	8b 45 80             	mov    -0x80(%ebp),%eax
f012b79f:	29 d0                	sub    %edx,%eax
f012b7a1:	89 c3                	mov    %eax,%ebx
f012b7a3:	c7 85 7c ff ff ff 00 	movl   $0x1000,-0x84(%ebp)
f012b7aa:	10 00 00 
f012b7ad:	a0 bc 0e 6c f0       	mov    0xf06c0ebc,%al
f012b7b2:	0f b6 d0             	movzbl %al,%edx
f012b7b5:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f012b7bb:	01 d0                	add    %edx,%eax
f012b7bd:	48                   	dec    %eax
f012b7be:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)
f012b7c4:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f012b7ca:	ba 00 00 00 00       	mov    $0x0,%edx
f012b7cf:	f7 b5 7c ff ff ff    	divl   -0x84(%ebp)
f012b7d5:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f012b7db:	29 d0                	sub    %edx,%eax
f012b7dd:	01 c3                	add    %eax,%ebx
f012b7df:	c7 85 74 ff ff ff 00 	movl   $0x1000,-0x8c(%ebp)
f012b7e6:	10 00 00 
f012b7e9:	a0 bc 0e 6c f0       	mov    0xf06c0ebc,%al
f012b7ee:	0f b6 c0             	movzbl %al,%eax
f012b7f1:	c1 e0 04             	shl    $0x4,%eax
f012b7f4:	89 c2                	mov    %eax,%edx
f012b7f6:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f012b7fc:	01 d0                	add    %edx,%eax
f012b7fe:	48                   	dec    %eax
f012b7ff:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
f012b805:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f012b80b:	ba 00 00 00 00       	mov    $0x0,%edx
f012b810:	f7 b5 74 ff ff ff    	divl   -0x8c(%ebp)
f012b816:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f012b81c:	29 d0                	sub    %edx,%eax
f012b81e:	01 d8                	add    %ebx,%eax
f012b820:	2d 00 c0 df 09       	sub    $0x9dfc000,%eax
f012b825:	39 c1                	cmp    %eax,%ecx
f012b827:	74 17                	je     f012b840 <test_krealloc+0x3e7>
			panic("krealloc: Wrong start address for allocated space");
f012b829:	83 ec 04             	sub    $0x4,%esp
f012b82c:	68 58 bb 13 f0       	push   $0xf013bb58
f012b831:	68 fd 0e 00 00       	push   $0xefd
f012b836:	68 76 a8 13 f0       	push   $0xf013a876
f012b83b:	e8 66 49 fd ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256)
f012b840:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012b843:	e8 76 0b fe ff       	call   f010c3be <sys_calculate_free_frames>
f012b848:	29 c3                	sub    %eax,%ebx
f012b84a:	89 d8                	mov    %ebx,%eax
f012b84c:	3d 00 01 00 00       	cmp    $0x100,%eax
f012b851:	74 17                	je     f012b86a <test_krealloc+0x411>
			panic("krealloc: Wrong allocation: ");
f012b853:	83 ec 04             	sub    $0x4,%esp
f012b856:	68 8a bb 13 f0       	push   $0xf013bb8a
f012b85b:	68 ff 0e 00 00       	push   $0xeff
f012b860:	68 76 a8 13 f0       	push   $0xf013a876
f012b865:	e8 3c 49 fd ff       	call   f01001a6 <_panic>
		lastIndices[2] = (1 * Mega - kilo) / sizeof(int) - 1;
f012b86a:	c7 85 10 fe ff ff ff 	movl   $0x3feff,-0x1f0(%ebp)
f012b871:	fe 03 00 

		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames();
f012b874:	e8 45 0b fe ff       	call   f010c3be <sys_calculate_free_frames>
f012b879:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[3] = krealloc(NULL, 1 * Mega - kilo);
f012b87c:	83 ec 08             	sub    $0x8,%esp
f012b87f:	68 00 fc 0f 00       	push   $0xffc00
f012b884:	6a 00                	push   $0x0
f012b886:	e8 01 be fd ff       	call   f010768c <krealloc>
f012b88b:	83 c4 10             	add    $0x10,%esp
f012b88e:	89 85 64 fe ff ff    	mov    %eax,-0x19c(%ebp)
		if ((uint32) ptr_allocations[3] < (KERNEL_HEAP_START + 3 * Mega))
f012b894:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f012b89a:	3d ff ff 2f f6       	cmp    $0xf62fffff,%eax
f012b89f:	77 17                	ja     f012b8b8 <test_krealloc+0x45f>
			panic("krealloc: Wrong start address for the allocated space... ");
f012b8a1:	83 ec 04             	sub    $0x4,%esp
f012b8a4:	68 1c bb 13 f0       	push   $0xf013bb1c
f012b8a9:	68 06 0f 00 00       	push   $0xf06
f012b8ae:	68 76 a8 13 f0       	push   $0xf013a876
f012b8b3:	e8 ee 48 fd ff       	call   f01001a6 <_panic>
		if ((uint32) ptr_allocations[3] != ACTUAL_START + (3 * Mega))
f012b8b8:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f012b8be:	89 c1                	mov    %eax,%ecx
f012b8c0:	c7 85 6c ff ff ff 00 	movl   $0x1000,-0x94(%ebp)
f012b8c7:	10 00 00 
f012b8ca:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f012b8d0:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012b8d5:	89 85 68 ff ff ff    	mov    %eax,-0x98(%ebp)
f012b8db:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f012b8e1:	ba 00 00 00 00       	mov    $0x0,%edx
f012b8e6:	f7 b5 6c ff ff ff    	divl   -0x94(%ebp)
f012b8ec:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f012b8f2:	29 d0                	sub    %edx,%eax
f012b8f4:	89 c3                	mov    %eax,%ebx
f012b8f6:	c7 85 64 ff ff ff 00 	movl   $0x1000,-0x9c(%ebp)
f012b8fd:	10 00 00 
f012b900:	a0 bc 0e 6c f0       	mov    0xf06c0ebc,%al
f012b905:	0f b6 d0             	movzbl %al,%edx
f012b908:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f012b90e:	01 d0                	add    %edx,%eax
f012b910:	48                   	dec    %eax
f012b911:	89 85 60 ff ff ff    	mov    %eax,-0xa0(%ebp)
f012b917:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f012b91d:	ba 00 00 00 00       	mov    $0x0,%edx
f012b922:	f7 b5 64 ff ff ff    	divl   -0x9c(%ebp)
f012b928:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f012b92e:	29 d0                	sub    %edx,%eax
f012b930:	01 c3                	add    %eax,%ebx
f012b932:	c7 85 5c ff ff ff 00 	movl   $0x1000,-0xa4(%ebp)
f012b939:	10 00 00 
f012b93c:	a0 bc 0e 6c f0       	mov    0xf06c0ebc,%al
f012b941:	0f b6 c0             	movzbl %al,%eax
f012b944:	c1 e0 04             	shl    $0x4,%eax
f012b947:	89 c2                	mov    %eax,%edx
f012b949:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f012b94f:	01 d0                	add    %edx,%eax
f012b951:	48                   	dec    %eax
f012b952:	89 85 58 ff ff ff    	mov    %eax,-0xa8(%ebp)
f012b958:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f012b95e:	ba 00 00 00 00       	mov    $0x0,%edx
f012b963:	f7 b5 5c ff ff ff    	divl   -0xa4(%ebp)
f012b969:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f012b96f:	29 d0                	sub    %edx,%eax
f012b971:	01 d8                	add    %ebx,%eax
f012b973:	2d 00 c0 cf 09       	sub    $0x9cfc000,%eax
f012b978:	39 c1                	cmp    %eax,%ecx
f012b97a:	74 17                	je     f012b993 <test_krealloc+0x53a>
			panic("krealloc: Wrong start address for allocated space");
f012b97c:	83 ec 04             	sub    $0x4,%esp
f012b97f:	68 58 bb 13 f0       	push   $0xf013bb58
f012b984:	68 08 0f 00 00       	push   $0xf08
f012b989:	68 76 a8 13 f0       	push   $0xf013a876
f012b98e:	e8 13 48 fd ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256)
f012b993:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012b996:	e8 23 0a fe ff       	call   f010c3be <sys_calculate_free_frames>
f012b99b:	29 c3                	sub    %eax,%ebx
f012b99d:	89 d8                	mov    %ebx,%eax
f012b99f:	3d 00 01 00 00       	cmp    $0x100,%eax
f012b9a4:	74 17                	je     f012b9bd <test_krealloc+0x564>
			panic("krealloc: Wrong allocation: ");
f012b9a6:	83 ec 04             	sub    $0x4,%esp
f012b9a9:	68 8a bb 13 f0       	push   $0xf013bb8a
f012b9ae:	68 0a 0f 00 00       	push   $0xf0a
f012b9b3:	68 76 a8 13 f0       	push   $0xf013a876
f012b9b8:	e8 e9 47 fd ff       	call   f01001a6 <_panic>
		lastIndices[3] = (1 * Mega - kilo) / sizeof(int) - 1;
f012b9bd:	c7 85 14 fe ff ff ff 	movl   $0x3feff,-0x1ec(%ebp)
f012b9c4:	fe 03 00 

		//Allocate 2 MB
		freeFrames = sys_calculate_free_frames();
f012b9c7:	e8 f2 09 fe ff       	call   f010c3be <sys_calculate_free_frames>
f012b9cc:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[4] = krealloc(NULL, 2 * Mega - kilo);
f012b9cf:	83 ec 08             	sub    $0x8,%esp
f012b9d2:	68 00 fc 1f 00       	push   $0x1ffc00
f012b9d7:	6a 00                	push   $0x0
f012b9d9:	e8 ae bc fd ff       	call   f010768c <krealloc>
f012b9de:	83 c4 10             	add    $0x10,%esp
f012b9e1:	89 85 68 fe ff ff    	mov    %eax,-0x198(%ebp)
		if ((uint32) ptr_allocations[4] < (KERNEL_HEAP_START + 4 * Mega))
f012b9e7:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f012b9ed:	3d ff ff 3f f6       	cmp    $0xf63fffff,%eax
f012b9f2:	77 17                	ja     f012ba0b <test_krealloc+0x5b2>
			panic("krealloc: Wrong start address for the allocated space... ");
f012b9f4:	83 ec 04             	sub    $0x4,%esp
f012b9f7:	68 1c bb 13 f0       	push   $0xf013bb1c
f012b9fc:	68 11 0f 00 00       	push   $0xf11
f012ba01:	68 76 a8 13 f0       	push   $0xf013a876
f012ba06:	e8 9b 47 fd ff       	call   f01001a6 <_panic>
		if ((uint32) ptr_allocations[4] != ACTUAL_START + (4 * Mega))
f012ba0b:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f012ba11:	89 c1                	mov    %eax,%ecx
f012ba13:	c7 85 54 ff ff ff 00 	movl   $0x1000,-0xac(%ebp)
f012ba1a:	10 00 00 
f012ba1d:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f012ba23:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012ba28:	89 85 50 ff ff ff    	mov    %eax,-0xb0(%ebp)
f012ba2e:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f012ba34:	ba 00 00 00 00       	mov    $0x0,%edx
f012ba39:	f7 b5 54 ff ff ff    	divl   -0xac(%ebp)
f012ba3f:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f012ba45:	29 d0                	sub    %edx,%eax
f012ba47:	89 c3                	mov    %eax,%ebx
f012ba49:	c7 85 4c ff ff ff 00 	movl   $0x1000,-0xb4(%ebp)
f012ba50:	10 00 00 
f012ba53:	a0 bc 0e 6c f0       	mov    0xf06c0ebc,%al
f012ba58:	0f b6 d0             	movzbl %al,%edx
f012ba5b:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f012ba61:	01 d0                	add    %edx,%eax
f012ba63:	48                   	dec    %eax
f012ba64:	89 85 48 ff ff ff    	mov    %eax,-0xb8(%ebp)
f012ba6a:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f012ba70:	ba 00 00 00 00       	mov    $0x0,%edx
f012ba75:	f7 b5 4c ff ff ff    	divl   -0xb4(%ebp)
f012ba7b:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f012ba81:	29 d0                	sub    %edx,%eax
f012ba83:	01 c3                	add    %eax,%ebx
f012ba85:	c7 85 44 ff ff ff 00 	movl   $0x1000,-0xbc(%ebp)
f012ba8c:	10 00 00 
f012ba8f:	a0 bc 0e 6c f0       	mov    0xf06c0ebc,%al
f012ba94:	0f b6 c0             	movzbl %al,%eax
f012ba97:	c1 e0 04             	shl    $0x4,%eax
f012ba9a:	89 c2                	mov    %eax,%edx
f012ba9c:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f012baa2:	01 d0                	add    %edx,%eax
f012baa4:	48                   	dec    %eax
f012baa5:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%ebp)
f012baab:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f012bab1:	ba 00 00 00 00       	mov    $0x0,%edx
f012bab6:	f7 b5 44 ff ff ff    	divl   -0xbc(%ebp)
f012babc:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f012bac2:	29 d0                	sub    %edx,%eax
f012bac4:	01 d8                	add    %ebx,%eax
f012bac6:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
f012bacb:	39 c1                	cmp    %eax,%ecx
f012bacd:	74 17                	je     f012bae6 <test_krealloc+0x68d>
			panic("krealloc: Wrong start address for allocated space");
f012bacf:	83 ec 04             	sub    $0x4,%esp
f012bad2:	68 58 bb 13 f0       	push   $0xf013bb58
f012bad7:	68 13 0f 00 00       	push   $0xf13
f012badc:	68 76 a8 13 f0       	push   $0xf013a876
f012bae1:	e8 c0 46 fd ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512)
f012bae6:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012bae9:	e8 d0 08 fe ff       	call   f010c3be <sys_calculate_free_frames>
f012baee:	29 c3                	sub    %eax,%ebx
f012baf0:	89 d8                	mov    %ebx,%eax
f012baf2:	3d 00 02 00 00       	cmp    $0x200,%eax
f012baf7:	74 17                	je     f012bb10 <test_krealloc+0x6b7>
			panic("krealloc: Wrong allocation: ");
f012baf9:	83 ec 04             	sub    $0x4,%esp
f012bafc:	68 8a bb 13 f0       	push   $0xf013bb8a
f012bb01:	68 15 0f 00 00       	push   $0xf15
f012bb06:	68 76 a8 13 f0       	push   $0xf013a876
f012bb0b:	e8 96 46 fd ff       	call   f01001a6 <_panic>
		lastIndices[4] = (2 * Mega - kilo) / sizeof(short) - 1;
f012bb10:	c7 85 18 fe ff ff ff 	movl   $0xffdff,-0x1e8(%ebp)
f012bb17:	fd 0f 00 

		//Allocate 2 MB
		freeFrames = sys_calculate_free_frames();
f012bb1a:	e8 9f 08 fe ff       	call   f010c3be <sys_calculate_free_frames>
f012bb1f:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[5] = krealloc(NULL, 2 * Mega - kilo);
f012bb22:	83 ec 08             	sub    $0x8,%esp
f012bb25:	68 00 fc 1f 00       	push   $0x1ffc00
f012bb2a:	6a 00                	push   $0x0
f012bb2c:	e8 5b bb fd ff       	call   f010768c <krealloc>
f012bb31:	83 c4 10             	add    $0x10,%esp
f012bb34:	89 85 6c fe ff ff    	mov    %eax,-0x194(%ebp)
		if ((uint32) ptr_allocations[5] < (KERNEL_HEAP_START + 6 * Mega))
f012bb3a:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f012bb40:	3d ff ff 5f f6       	cmp    $0xf65fffff,%eax
f012bb45:	77 17                	ja     f012bb5e <test_krealloc+0x705>
			panic("krealloc: Wrong start address for the allocated space... ");
f012bb47:	83 ec 04             	sub    $0x4,%esp
f012bb4a:	68 1c bb 13 f0       	push   $0xf013bb1c
f012bb4f:	68 1c 0f 00 00       	push   $0xf1c
f012bb54:	68 76 a8 13 f0       	push   $0xf013a876
f012bb59:	e8 48 46 fd ff       	call   f01001a6 <_panic>
		if ((uint32) ptr_allocations[5] != ACTUAL_START + (6 * Mega))
f012bb5e:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f012bb64:	89 c1                	mov    %eax,%ecx
f012bb66:	c7 85 3c ff ff ff 00 	movl   $0x1000,-0xc4(%ebp)
f012bb6d:	10 00 00 
f012bb70:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f012bb76:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012bb7b:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
f012bb81:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f012bb87:	ba 00 00 00 00       	mov    $0x0,%edx
f012bb8c:	f7 b5 3c ff ff ff    	divl   -0xc4(%ebp)
f012bb92:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f012bb98:	29 d0                	sub    %edx,%eax
f012bb9a:	89 c3                	mov    %eax,%ebx
f012bb9c:	c7 85 34 ff ff ff 00 	movl   $0x1000,-0xcc(%ebp)
f012bba3:	10 00 00 
f012bba6:	a0 bc 0e 6c f0       	mov    0xf06c0ebc,%al
f012bbab:	0f b6 d0             	movzbl %al,%edx
f012bbae:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f012bbb4:	01 d0                	add    %edx,%eax
f012bbb6:	48                   	dec    %eax
f012bbb7:	89 85 30 ff ff ff    	mov    %eax,-0xd0(%ebp)
f012bbbd:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f012bbc3:	ba 00 00 00 00       	mov    $0x0,%edx
f012bbc8:	f7 b5 34 ff ff ff    	divl   -0xcc(%ebp)
f012bbce:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f012bbd4:	29 d0                	sub    %edx,%eax
f012bbd6:	01 c3                	add    %eax,%ebx
f012bbd8:	c7 85 2c ff ff ff 00 	movl   $0x1000,-0xd4(%ebp)
f012bbdf:	10 00 00 
f012bbe2:	a0 bc 0e 6c f0       	mov    0xf06c0ebc,%al
f012bbe7:	0f b6 c0             	movzbl %al,%eax
f012bbea:	c1 e0 04             	shl    $0x4,%eax
f012bbed:	89 c2                	mov    %eax,%edx
f012bbef:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f012bbf5:	01 d0                	add    %edx,%eax
f012bbf7:	48                   	dec    %eax
f012bbf8:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%ebp)
f012bbfe:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f012bc04:	ba 00 00 00 00       	mov    $0x0,%edx
f012bc09:	f7 b5 2c ff ff ff    	divl   -0xd4(%ebp)
f012bc0f:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f012bc15:	29 d0                	sub    %edx,%eax
f012bc17:	01 d8                	add    %ebx,%eax
f012bc19:	2d 00 c0 9f 09       	sub    $0x99fc000,%eax
f012bc1e:	39 c1                	cmp    %eax,%ecx
f012bc20:	74 17                	je     f012bc39 <test_krealloc+0x7e0>
			panic("krealloc: Wrong start address for allocated space");
f012bc22:	83 ec 04             	sub    $0x4,%esp
f012bc25:	68 58 bb 13 f0       	push   $0xf013bb58
f012bc2a:	68 1e 0f 00 00       	push   $0xf1e
f012bc2f:	68 76 a8 13 f0       	push   $0xf013a876
f012bc34:	e8 6d 45 fd ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512)
f012bc39:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012bc3c:	e8 7d 07 fe ff       	call   f010c3be <sys_calculate_free_frames>
f012bc41:	29 c3                	sub    %eax,%ebx
f012bc43:	89 d8                	mov    %ebx,%eax
f012bc45:	3d 00 02 00 00       	cmp    $0x200,%eax
f012bc4a:	74 17                	je     f012bc63 <test_krealloc+0x80a>
			panic("krealloc: Wrong allocation: ");
f012bc4c:	83 ec 04             	sub    $0x4,%esp
f012bc4f:	68 8a bb 13 f0       	push   $0xf013bb8a
f012bc54:	68 20 0f 00 00       	push   $0xf20
f012bc59:	68 76 a8 13 f0       	push   $0xf013a876
f012bc5e:	e8 43 45 fd ff       	call   f01001a6 <_panic>
		lastIndices[5] = (2 * Mega - kilo) / sizeof(short) - 1;
f012bc63:	c7 85 1c fe ff ff ff 	movl   $0xffdff,-0x1e4(%ebp)
f012bc6a:	fd 0f 00 

		//Allocate 3 MB
		freeFrames = sys_calculate_free_frames();
f012bc6d:	e8 4c 07 fe ff       	call   f010c3be <sys_calculate_free_frames>
f012bc72:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[6] = krealloc(NULL, 3 * Mega - kilo);
f012bc75:	83 ec 08             	sub    $0x8,%esp
f012bc78:	68 00 fc 2f 00       	push   $0x2ffc00
f012bc7d:	6a 00                	push   $0x0
f012bc7f:	e8 08 ba fd ff       	call   f010768c <krealloc>
f012bc84:	83 c4 10             	add    $0x10,%esp
f012bc87:	89 85 70 fe ff ff    	mov    %eax,-0x190(%ebp)
		if ((uint32) ptr_allocations[6] < (KERNEL_HEAP_START + 8 * Mega))
f012bc8d:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f012bc93:	3d ff ff 7f f6       	cmp    $0xf67fffff,%eax
f012bc98:	77 17                	ja     f012bcb1 <test_krealloc+0x858>
			panic("krealloc: Wrong start address for the allocated space... ");
f012bc9a:	83 ec 04             	sub    $0x4,%esp
f012bc9d:	68 1c bb 13 f0       	push   $0xf013bb1c
f012bca2:	68 27 0f 00 00       	push   $0xf27
f012bca7:	68 76 a8 13 f0       	push   $0xf013a876
f012bcac:	e8 f5 44 fd ff       	call   f01001a6 <_panic>
		if ((uint32) ptr_allocations[6] != ACTUAL_START + (8 * Mega))
f012bcb1:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f012bcb7:	89 c1                	mov    %eax,%ecx
f012bcb9:	c7 85 24 ff ff ff 00 	movl   $0x1000,-0xdc(%ebp)
f012bcc0:	10 00 00 
f012bcc3:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f012bcc9:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012bcce:	89 85 20 ff ff ff    	mov    %eax,-0xe0(%ebp)
f012bcd4:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012bcda:	ba 00 00 00 00       	mov    $0x0,%edx
f012bcdf:	f7 b5 24 ff ff ff    	divl   -0xdc(%ebp)
f012bce5:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012bceb:	29 d0                	sub    %edx,%eax
f012bced:	89 c3                	mov    %eax,%ebx
f012bcef:	c7 85 1c ff ff ff 00 	movl   $0x1000,-0xe4(%ebp)
f012bcf6:	10 00 00 
f012bcf9:	a0 bc 0e 6c f0       	mov    0xf06c0ebc,%al
f012bcfe:	0f b6 d0             	movzbl %al,%edx
f012bd01:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f012bd07:	01 d0                	add    %edx,%eax
f012bd09:	48                   	dec    %eax
f012bd0a:	89 85 18 ff ff ff    	mov    %eax,-0xe8(%ebp)
f012bd10:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f012bd16:	ba 00 00 00 00       	mov    $0x0,%edx
f012bd1b:	f7 b5 1c ff ff ff    	divl   -0xe4(%ebp)
f012bd21:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f012bd27:	29 d0                	sub    %edx,%eax
f012bd29:	01 c3                	add    %eax,%ebx
f012bd2b:	c7 85 14 ff ff ff 00 	movl   $0x1000,-0xec(%ebp)
f012bd32:	10 00 00 
f012bd35:	a0 bc 0e 6c f0       	mov    0xf06c0ebc,%al
f012bd3a:	0f b6 c0             	movzbl %al,%eax
f012bd3d:	c1 e0 04             	shl    $0x4,%eax
f012bd40:	89 c2                	mov    %eax,%edx
f012bd42:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f012bd48:	01 d0                	add    %edx,%eax
f012bd4a:	48                   	dec    %eax
f012bd4b:	89 85 10 ff ff ff    	mov    %eax,-0xf0(%ebp)
f012bd51:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f012bd57:	ba 00 00 00 00       	mov    $0x0,%edx
f012bd5c:	f7 b5 14 ff ff ff    	divl   -0xec(%ebp)
f012bd62:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f012bd68:	29 d0                	sub    %edx,%eax
f012bd6a:	01 d8                	add    %ebx,%eax
f012bd6c:	2d 00 c0 7f 09       	sub    $0x97fc000,%eax
f012bd71:	39 c1                	cmp    %eax,%ecx
f012bd73:	74 17                	je     f012bd8c <test_krealloc+0x933>
			panic("krealloc: Wrong start address for allocated space");
f012bd75:	83 ec 04             	sub    $0x4,%esp
f012bd78:	68 58 bb 13 f0       	push   $0xf013bb58
f012bd7d:	68 29 0f 00 00       	push   $0xf29
f012bd82:	68 76 a8 13 f0       	push   $0xf013a876
f012bd87:	e8 1a 44 fd ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768)
f012bd8c:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012bd8f:	e8 2a 06 fe ff       	call   f010c3be <sys_calculate_free_frames>
f012bd94:	29 c3                	sub    %eax,%ebx
f012bd96:	89 d8                	mov    %ebx,%eax
f012bd98:	3d 00 03 00 00       	cmp    $0x300,%eax
f012bd9d:	74 17                	je     f012bdb6 <test_krealloc+0x95d>
			panic("Wrong allocation: ");
f012bd9f:	83 ec 04             	sub    $0x4,%esp
f012bda2:	68 c0 ac 13 f0       	push   $0xf013acc0
f012bda7:	68 2b 0f 00 00       	push   $0xf2b
f012bdac:	68 76 a8 13 f0       	push   $0xf013a876
f012bdb1:	e8 f0 43 fd ff       	call   f01001a6 <_panic>
		lastIndices[6] = (3 * Mega - kilo) / sizeof(struct MyStruct) - 1;
f012bdb6:	c7 85 20 fe ff ff 7f 	movl   $0x5ff7f,-0x1e0(%ebp)
f012bdbd:	ff 05 00 

		//Allocate 3 MB
		freeFrames = sys_calculate_free_frames();
f012bdc0:	e8 f9 05 fe ff       	call   f010c3be <sys_calculate_free_frames>
f012bdc5:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[7] = krealloc(NULL, 3 * Mega - kilo);
f012bdc8:	83 ec 08             	sub    $0x8,%esp
f012bdcb:	68 00 fc 2f 00       	push   $0x2ffc00
f012bdd0:	6a 00                	push   $0x0
f012bdd2:	e8 b5 b8 fd ff       	call   f010768c <krealloc>
f012bdd7:	83 c4 10             	add    $0x10,%esp
f012bdda:	89 85 74 fe ff ff    	mov    %eax,-0x18c(%ebp)
		if ((uint32) ptr_allocations[7] < (KERNEL_HEAP_START + 11 * Mega))
f012bde0:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f012bde6:	3d ff ff af f6       	cmp    $0xf6afffff,%eax
f012bdeb:	77 17                	ja     f012be04 <test_krealloc+0x9ab>
			panic("krealloc: Wrong start address for the allocated space... ");
f012bded:	83 ec 04             	sub    $0x4,%esp
f012bdf0:	68 1c bb 13 f0       	push   $0xf013bb1c
f012bdf5:	68 32 0f 00 00       	push   $0xf32
f012bdfa:	68 76 a8 13 f0       	push   $0xf013a876
f012bdff:	e8 a2 43 fd ff       	call   f01001a6 <_panic>
		if ((uint32) ptr_allocations[7] != ACTUAL_START + (11 * Mega))
f012be04:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f012be0a:	89 c1                	mov    %eax,%ecx
f012be0c:	c7 85 0c ff ff ff 00 	movl   $0x1000,-0xf4(%ebp)
f012be13:	10 00 00 
f012be16:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f012be1c:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012be21:	89 85 08 ff ff ff    	mov    %eax,-0xf8(%ebp)
f012be27:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f012be2d:	ba 00 00 00 00       	mov    $0x0,%edx
f012be32:	f7 b5 0c ff ff ff    	divl   -0xf4(%ebp)
f012be38:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f012be3e:	29 d0                	sub    %edx,%eax
f012be40:	89 c3                	mov    %eax,%ebx
f012be42:	c7 85 04 ff ff ff 00 	movl   $0x1000,-0xfc(%ebp)
f012be49:	10 00 00 
f012be4c:	a0 bc 0e 6c f0       	mov    0xf06c0ebc,%al
f012be51:	0f b6 d0             	movzbl %al,%edx
f012be54:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f012be5a:	01 d0                	add    %edx,%eax
f012be5c:	48                   	dec    %eax
f012be5d:	89 85 00 ff ff ff    	mov    %eax,-0x100(%ebp)
f012be63:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f012be69:	ba 00 00 00 00       	mov    $0x0,%edx
f012be6e:	f7 b5 04 ff ff ff    	divl   -0xfc(%ebp)
f012be74:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f012be7a:	29 d0                	sub    %edx,%eax
f012be7c:	01 c3                	add    %eax,%ebx
f012be7e:	c7 85 fc fe ff ff 00 	movl   $0x1000,-0x104(%ebp)
f012be85:	10 00 00 
f012be88:	a0 bc 0e 6c f0       	mov    0xf06c0ebc,%al
f012be8d:	0f b6 c0             	movzbl %al,%eax
f012be90:	c1 e0 04             	shl    $0x4,%eax
f012be93:	89 c2                	mov    %eax,%edx
f012be95:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f012be9b:	01 d0                	add    %edx,%eax
f012be9d:	48                   	dec    %eax
f012be9e:	89 85 f8 fe ff ff    	mov    %eax,-0x108(%ebp)
f012bea4:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f012beaa:	ba 00 00 00 00       	mov    $0x0,%edx
f012beaf:	f7 b5 fc fe ff ff    	divl   -0x104(%ebp)
f012beb5:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f012bebb:	29 d0                	sub    %edx,%eax
f012bebd:	01 d8                	add    %ebx,%eax
f012bebf:	2d 00 c0 4f 09       	sub    $0x94fc000,%eax
f012bec4:	39 c1                	cmp    %eax,%ecx
f012bec6:	74 17                	je     f012bedf <test_krealloc+0xa86>
			panic("krealloc: Wrong start address for allocated space");
f012bec8:	83 ec 04             	sub    $0x4,%esp
f012becb:	68 58 bb 13 f0       	push   $0xf013bb58
f012bed0:	68 34 0f 00 00       	push   $0xf34
f012bed5:	68 76 a8 13 f0       	push   $0xf013a876
f012beda:	e8 c7 42 fd ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768)
f012bedf:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012bee2:	e8 d7 04 fe ff       	call   f010c3be <sys_calculate_free_frames>
f012bee7:	29 c3                	sub    %eax,%ebx
f012bee9:	89 d8                	mov    %ebx,%eax
f012beeb:	3d 00 03 00 00       	cmp    $0x300,%eax
f012bef0:	74 17                	je     f012bf09 <test_krealloc+0xab0>
			panic("krealloc: Wrong allocation: ");
f012bef2:	83 ec 04             	sub    $0x4,%esp
f012bef5:	68 8a bb 13 f0       	push   $0xf013bb8a
f012befa:	68 36 0f 00 00       	push   $0xf36
f012beff:	68 76 a8 13 f0       	push   $0xf013a876
f012bf04:	e8 9d 42 fd ff       	call   f01001a6 <_panic>
		lastIndices[7] = (3 * Mega - kilo) / sizeof(struct MyStruct) - 1;
f012bf09:	c7 85 24 fe ff ff 7f 	movl   $0x5ff7f,-0x1dc(%ebp)
f012bf10:	ff 05 00 
	char *byteArr1;
	//[3] Test read write access
	{
		//cprintf("\nTest read write access");
		//Test access for the first 1 MB
		freeFrames = sys_calculate_free_frames();
f012bf13:	e8 a6 04 fe ff       	call   f010c3be <sys_calculate_free_frames>
f012bf18:	89 45 b8             	mov    %eax,-0x48(%ebp)

		//Write values
		//In 1st 1 MB
		lastIndexOfByte = (1 * Mega - kilo) / sizeof(char) - 1;
f012bf1b:	c7 85 f4 fe ff ff ff 	movl   $0xffbff,-0x10c(%ebp)
f012bf22:	fb 0f 00 
		byteArr = (char *) ptr_allocations[0];
f012bf25:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f012bf2b:	89 85 f0 fe ff ff    	mov    %eax,-0x110(%ebp)
		byteArr[0] = minByte;
f012bf31:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f012bf37:	8a 55 cf             	mov    -0x31(%ebp),%dl
f012bf3a:	88 10                	mov    %dl,(%eax)
		byteArr[lastIndexOfByte] = maxByte;
f012bf3c:	8b 95 f4 fe ff ff    	mov    -0x10c(%ebp),%edx
f012bf42:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f012bf48:	01 c2                	add    %eax,%edx
f012bf4a:	8a 45 ce             	mov    -0x32(%ebp),%al
f012bf4d:	88 02                	mov    %al,(%edx)

		//In 2nd 1 MB
		ptr = (char*) ptr_allocations[1];
f012bf4f:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f012bf55:	89 85 ec fe ff ff    	mov    %eax,-0x114(%ebp)
		for (int i = 0; i <= lastIndices[1]; ++i) {
f012bf5b:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012bf62:	eb 11                	jmp    f012bf75 <test_krealloc+0xb1c>
			ptr[i] = 2;
f012bf64:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012bf67:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f012bf6d:	01 d0                	add    %edx,%eax
f012bf6f:	c6 00 02             	movb   $0x2,(%eax)
		byteArr[0] = minByte;
		byteArr[lastIndexOfByte] = maxByte;

		//In 2nd 1 MB
		ptr = (char*) ptr_allocations[1];
		for (int i = 0; i <= lastIndices[1]; ++i) {
f012bf72:	ff 45 f4             	incl   -0xc(%ebp)
f012bf75:	8b 85 0c fe ff ff    	mov    -0x1f4(%ebp),%eax
f012bf7b:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012bf7e:	7d e4                	jge    f012bf64 <test_krealloc+0xb0b>
			ptr[i] = 2;
		}

		//In 3rd 1 MB
		intArr = (int*) ptr_allocations[2];
f012bf80:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f012bf86:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)
		intArr[0] = 3;
f012bf8c:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f012bf92:	c7 00 03 00 00 00    	movl   $0x3,(%eax)
		intArr[lastIndices[2]] = 3;
f012bf98:	8b 85 10 fe ff ff    	mov    -0x1f0(%ebp),%eax
f012bf9e:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f012bfa5:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f012bfab:	01 d0                	add    %edx,%eax
f012bfad:	c7 00 03 00 00 00    	movl   $0x3,(%eax)

		//In 4th 1 MB
		intArr = (int*) ptr_allocations[3];
f012bfb3:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f012bfb9:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)
		for (int i = 0; i <= lastIndices[3]; ++i) {
f012bfbf:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f012bfc6:	eb 1b                	jmp    f012bfe3 <test_krealloc+0xb8a>
			intArr[i] = 4;
f012bfc8:	8b 45 f0             	mov    -0x10(%ebp),%eax
f012bfcb:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f012bfd2:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f012bfd8:	01 d0                	add    %edx,%eax
f012bfda:	c7 00 04 00 00 00    	movl   $0x4,(%eax)
		intArr[0] = 3;
		intArr[lastIndices[2]] = 3;

		//In 4th 1 MB
		intArr = (int*) ptr_allocations[3];
		for (int i = 0; i <= lastIndices[3]; ++i) {
f012bfe0:	ff 45 f0             	incl   -0x10(%ebp)
f012bfe3:	8b 85 14 fe ff ff    	mov    -0x1ec(%ebp),%eax
f012bfe9:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f012bfec:	7d da                	jge    f012bfc8 <test_krealloc+0xb6f>
			intArr[i] = 4;
		}

		//In 1st 2 MB
		shortArr = (short*) ptr_allocations[4];
f012bfee:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f012bff4:	89 85 e4 fe ff ff    	mov    %eax,-0x11c(%ebp)
		for (int i = 0; i <= lastIndices[4]; ++i) {
f012bffa:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f012c001:	eb 17                	jmp    f012c01a <test_krealloc+0xbc1>
			shortArr[i] = 5;
f012c003:	8b 45 ec             	mov    -0x14(%ebp),%eax
f012c006:	01 c0                	add    %eax,%eax
f012c008:	89 c2                	mov    %eax,%edx
f012c00a:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f012c010:	01 d0                	add    %edx,%eax
f012c012:	66 c7 00 05 00       	movw   $0x5,(%eax)
			intArr[i] = 4;
		}

		//In 1st 2 MB
		shortArr = (short*) ptr_allocations[4];
		for (int i = 0; i <= lastIndices[4]; ++i) {
f012c017:	ff 45 ec             	incl   -0x14(%ebp)
f012c01a:	8b 85 18 fe ff ff    	mov    -0x1e8(%ebp),%eax
f012c020:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f012c023:	7d de                	jge    f012c003 <test_krealloc+0xbaa>
			shortArr[i] = 5;
		}

		//In the 2nd 2 MB
		shortArr = (short*) ptr_allocations[5];
f012c025:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f012c02b:	89 85 e4 fe ff ff    	mov    %eax,-0x11c(%ebp)
		shortArr[0] = 6;
f012c031:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f012c037:	66 c7 00 06 00       	movw   $0x6,(%eax)
		shortArr[lastIndices[5]] = 6;
f012c03c:	8b 85 1c fe ff ff    	mov    -0x1e4(%ebp),%eax
f012c042:	01 c0                	add    %eax,%eax
f012c044:	89 c2                	mov    %eax,%edx
f012c046:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f012c04c:	01 d0                	add    %edx,%eax
f012c04e:	66 c7 00 06 00       	movw   $0x6,(%eax)

		//In the 1st 3 MB
		structArr = (struct MyStruct *) ptr_allocations[6];
f012c053:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f012c059:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
		for (int i = 0; i <= lastIndices[6]; i++) {
f012c05f:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
f012c066:	eb 49                	jmp    f012c0b1 <test_krealloc+0xc58>
			structArr[i].a = 7;
f012c068:	8b 45 e8             	mov    -0x18(%ebp),%eax
f012c06b:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012c072:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012c078:	01 d0                	add    %edx,%eax
f012c07a:	c6 00 07             	movb   $0x7,(%eax)
			structArr[i].b = 7;
f012c07d:	8b 45 e8             	mov    -0x18(%ebp),%eax
f012c080:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012c087:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012c08d:	01 d0                	add    %edx,%eax
f012c08f:	66 c7 40 02 07 00    	movw   $0x7,0x2(%eax)
			structArr[i].c = 7;
f012c095:	8b 45 e8             	mov    -0x18(%ebp),%eax
f012c098:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012c09f:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012c0a5:	01 d0                	add    %edx,%eax
f012c0a7:	c7 40 04 07 00 00 00 	movl   $0x7,0x4(%eax)
		shortArr[0] = 6;
		shortArr[lastIndices[5]] = 6;

		//In the 1st 3 MB
		structArr = (struct MyStruct *) ptr_allocations[6];
		for (int i = 0; i <= lastIndices[6]; i++) {
f012c0ae:	ff 45 e8             	incl   -0x18(%ebp)
f012c0b1:	8b 85 20 fe ff ff    	mov    -0x1e0(%ebp),%eax
f012c0b7:	3b 45 e8             	cmp    -0x18(%ebp),%eax
f012c0ba:	7d ac                	jge    f012c068 <test_krealloc+0xc0f>
			structArr[i].b = 7;
			structArr[i].c = 7;
		}

		//In the last 3 MB
		structArr = (struct MyStruct*) ptr_allocations[7];
f012c0bc:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f012c0c2:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
		structArr[0].a = 8;
f012c0c8:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012c0ce:	c6 00 08             	movb   $0x8,(%eax)
		structArr[0].b = 8;
f012c0d1:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012c0d7:	66 c7 40 02 08 00    	movw   $0x8,0x2(%eax)
		structArr[0].c = 8;
f012c0dd:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012c0e3:	c7 40 04 08 00 00 00 	movl   $0x8,0x4(%eax)
		structArr[lastIndices[7]].a = 8;
f012c0ea:	8b 85 24 fe ff ff    	mov    -0x1dc(%ebp),%eax
f012c0f0:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012c0f7:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012c0fd:	01 d0                	add    %edx,%eax
f012c0ff:	c6 00 08             	movb   $0x8,(%eax)
		structArr[lastIndices[7]].b = 8;
f012c102:	8b 85 24 fe ff ff    	mov    -0x1dc(%ebp),%eax
f012c108:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012c10f:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012c115:	01 d0                	add    %edx,%eax
f012c117:	66 c7 40 02 08 00    	movw   $0x8,0x2(%eax)
		structArr[lastIndices[7]].c = 8;
f012c11d:	8b 85 24 fe ff ff    	mov    -0x1dc(%ebp),%eax
f012c123:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012c12a:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012c130:	01 d0                	add    %edx,%eax
f012c132:	c7 40 04 08 00 00 00 	movl   $0x8,0x4(%eax)

		//Read values: check that the values are successfully written
		if (byteArr[0] != minByte || byteArr[lastIndices[0]] != maxByte)
f012c139:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f012c13f:	8a 00                	mov    (%eax),%al
f012c141:	3a 45 cf             	cmp    -0x31(%ebp),%al
f012c144:	75 17                	jne    f012c15d <test_krealloc+0xd04>
f012c146:	8b 85 08 fe ff ff    	mov    -0x1f8(%ebp),%eax
f012c14c:	89 c2                	mov    %eax,%edx
f012c14e:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f012c154:	01 d0                	add    %edx,%eax
f012c156:	8a 00                	mov    (%eax),%al
f012c158:	3a 45 ce             	cmp    -0x32(%ebp),%al
f012c15b:	74 17                	je     f012c174 <test_krealloc+0xd1b>
			panic(
f012c15d:	83 ec 04             	sub    $0x4,%esp
f012c160:	68 a8 bb 13 f0       	push   $0xf013bba8
f012c165:	68 79 0f 00 00       	push   $0xf79
f012c16a:	68 76 a8 13 f0       	push   $0xf013a876
f012c16f:	e8 32 40 fd ff       	call   f01001a6 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");

		ptr = (char*) ptr_allocations[1];
f012c174:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f012c17a:	89 85 ec fe ff ff    	mov    %eax,-0x114(%ebp)
		if (ptr[0] != 2 || ptr[lastIndices[1]] != 2)
f012c180:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f012c186:	8a 00                	mov    (%eax),%al
f012c188:	3c 02                	cmp    $0x2,%al
f012c18a:	75 16                	jne    f012c1a2 <test_krealloc+0xd49>
f012c18c:	8b 85 0c fe ff ff    	mov    -0x1f4(%ebp),%eax
f012c192:	89 c2                	mov    %eax,%edx
f012c194:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f012c19a:	01 d0                	add    %edx,%eax
f012c19c:	8a 00                	mov    (%eax),%al
f012c19e:	3c 02                	cmp    $0x2,%al
f012c1a0:	74 20                	je     f012c1c2 <test_krealloc+0xd69>
			panic(
f012c1a2:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f012c1a8:	8a 00                	mov    (%eax),%al
f012c1aa:	0f be c0             	movsbl %al,%eax
f012c1ad:	50                   	push   %eax
f012c1ae:	68 e8 bb 13 f0       	push   $0xf013bbe8
f012c1b3:	68 7f 0f 00 00       	push   $0xf7f
f012c1b8:	68 76 a8 13 f0       	push   $0xf013a876
f012c1bd:	e8 e4 3f fd ff       	call   f01001a6 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!, char = %c",
					ptr[0]);

		intArr = (int*) ptr_allocations[2];
f012c1c2:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f012c1c8:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)
		if (intArr[0] != 3 || intArr[lastIndices[2]] != 3)
f012c1ce:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f012c1d4:	8b 00                	mov    (%eax),%eax
f012c1d6:	83 f8 03             	cmp    $0x3,%eax
f012c1d9:	75 1c                	jne    f012c1f7 <test_krealloc+0xd9e>
f012c1db:	8b 85 10 fe ff ff    	mov    -0x1f0(%ebp),%eax
f012c1e1:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f012c1e8:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f012c1ee:	01 d0                	add    %edx,%eax
f012c1f0:	8b 00                	mov    (%eax),%eax
f012c1f2:	83 f8 03             	cmp    $0x3,%eax
f012c1f5:	74 17                	je     f012c20e <test_krealloc+0xdb5>
			panic("Wrong allocation stored values are wrongly changed!");
f012c1f7:	83 ec 04             	sub    $0x4,%esp
f012c1fa:	68 34 bc 13 f0       	push   $0xf013bc34
f012c1ff:	68 83 0f 00 00       	push   $0xf83
f012c204:	68 76 a8 13 f0       	push   $0xf013a876
f012c209:	e8 98 3f fd ff       	call   f01001a6 <_panic>

		intArr = (int*) ptr_allocations[3];
f012c20e:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f012c214:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)
		if (intArr[0] != 4 || intArr[lastIndices[3]] != 4)
f012c21a:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f012c220:	8b 00                	mov    (%eax),%eax
f012c222:	83 f8 04             	cmp    $0x4,%eax
f012c225:	75 1c                	jne    f012c243 <test_krealloc+0xdea>
f012c227:	8b 85 14 fe ff ff    	mov    -0x1ec(%ebp),%eax
f012c22d:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f012c234:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f012c23a:	01 d0                	add    %edx,%eax
f012c23c:	8b 00                	mov    (%eax),%eax
f012c23e:	83 f8 04             	cmp    $0x4,%eax
f012c241:	74 17                	je     f012c25a <test_krealloc+0xe01>
			panic(
f012c243:	83 ec 04             	sub    $0x4,%esp
f012c246:	68 a8 bb 13 f0       	push   $0xf013bba8
f012c24b:	68 88 0f 00 00       	push   $0xf88
f012c250:	68 76 a8 13 f0       	push   $0xf013a876
f012c255:	e8 4c 3f fd ff       	call   f01001a6 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");

		shortArr = (short*) ptr_allocations[4];
f012c25a:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f012c260:	89 85 e4 fe ff ff    	mov    %eax,-0x11c(%ebp)
		if (shortArr[0] != 5 || shortArr[lastIndices[4]] != 5)
f012c266:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f012c26c:	66 8b 00             	mov    (%eax),%ax
f012c26f:	66 83 f8 05          	cmp    $0x5,%ax
f012c273:	75 1b                	jne    f012c290 <test_krealloc+0xe37>
f012c275:	8b 85 18 fe ff ff    	mov    -0x1e8(%ebp),%eax
f012c27b:	01 c0                	add    %eax,%eax
f012c27d:	89 c2                	mov    %eax,%edx
f012c27f:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f012c285:	01 d0                	add    %edx,%eax
f012c287:	66 8b 00             	mov    (%eax),%ax
f012c28a:	66 83 f8 05          	cmp    $0x5,%ax
f012c28e:	74 17                	je     f012c2a7 <test_krealloc+0xe4e>
			panic(
f012c290:	83 ec 04             	sub    $0x4,%esp
f012c293:	68 a8 bb 13 f0       	push   $0xf013bba8
f012c298:	68 8d 0f 00 00       	push   $0xf8d
f012c29d:	68 76 a8 13 f0       	push   $0xf013a876
f012c2a2:	e8 ff 3e fd ff       	call   f01001a6 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");

		shortArr = (short*) ptr_allocations[5];
f012c2a7:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f012c2ad:	89 85 e4 fe ff ff    	mov    %eax,-0x11c(%ebp)
		if (shortArr[0] != 6 || shortArr[lastIndices[5]] != 6)
f012c2b3:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f012c2b9:	66 8b 00             	mov    (%eax),%ax
f012c2bc:	66 83 f8 06          	cmp    $0x6,%ax
f012c2c0:	75 1b                	jne    f012c2dd <test_krealloc+0xe84>
f012c2c2:	8b 85 1c fe ff ff    	mov    -0x1e4(%ebp),%eax
f012c2c8:	01 c0                	add    %eax,%eax
f012c2ca:	89 c2                	mov    %eax,%edx
f012c2cc:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f012c2d2:	01 d0                	add    %edx,%eax
f012c2d4:	66 8b 00             	mov    (%eax),%ax
f012c2d7:	66 83 f8 06          	cmp    $0x6,%ax
f012c2db:	74 17                	je     f012c2f4 <test_krealloc+0xe9b>
			panic(
f012c2dd:	83 ec 04             	sub    $0x4,%esp
f012c2e0:	68 a8 bb 13 f0       	push   $0xf013bba8
f012c2e5:	68 92 0f 00 00       	push   $0xf92
f012c2ea:	68 76 a8 13 f0       	push   $0xf013a876
f012c2ef:	e8 b2 3e fd ff       	call   f01001a6 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");

		structArr = (struct MyStruct*) ptr_allocations[6];
f012c2f4:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f012c2fa:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
		if (structArr[0].a != 7 || structArr[lastIndices[6]].a != 7)
f012c300:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012c306:	8a 00                	mov    (%eax),%al
f012c308:	3c 07                	cmp    $0x7,%al
f012c30a:	75 1b                	jne    f012c327 <test_krealloc+0xece>
f012c30c:	8b 85 20 fe ff ff    	mov    -0x1e0(%ebp),%eax
f012c312:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012c319:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012c31f:	01 d0                	add    %edx,%eax
f012c321:	8a 00                	mov    (%eax),%al
f012c323:	3c 07                	cmp    $0x7,%al
f012c325:	74 17                	je     f012c33e <test_krealloc+0xee5>
			panic(
f012c327:	83 ec 04             	sub    $0x4,%esp
f012c32a:	68 a8 bb 13 f0       	push   $0xf013bba8
f012c32f:	68 97 0f 00 00       	push   $0xf97
f012c334:	68 76 a8 13 f0       	push   $0xf013a876
f012c339:	e8 68 3e fd ff       	call   f01001a6 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");
		if (structArr[0].b != 7 || structArr[lastIndices[6]].b != 7)
f012c33e:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012c344:	66 8b 40 02          	mov    0x2(%eax),%ax
f012c348:	66 83 f8 07          	cmp    $0x7,%ax
f012c34c:	75 1f                	jne    f012c36d <test_krealloc+0xf14>
f012c34e:	8b 85 20 fe ff ff    	mov    -0x1e0(%ebp),%eax
f012c354:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012c35b:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012c361:	01 d0                	add    %edx,%eax
f012c363:	66 8b 40 02          	mov    0x2(%eax),%ax
f012c367:	66 83 f8 07          	cmp    $0x7,%ax
f012c36b:	74 17                	je     f012c384 <test_krealloc+0xf2b>
			panic(
f012c36d:	83 ec 04             	sub    $0x4,%esp
f012c370:	68 a8 bb 13 f0       	push   $0xf013bba8
f012c375:	68 9a 0f 00 00       	push   $0xf9a
f012c37a:	68 76 a8 13 f0       	push   $0xf013a876
f012c37f:	e8 22 3e fd ff       	call   f01001a6 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");
		if (structArr[0].c != 7 || structArr[lastIndices[6]].c != 7)
f012c384:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012c38a:	8b 40 04             	mov    0x4(%eax),%eax
f012c38d:	83 f8 07             	cmp    $0x7,%eax
f012c390:	75 1d                	jne    f012c3af <test_krealloc+0xf56>
f012c392:	8b 85 20 fe ff ff    	mov    -0x1e0(%ebp),%eax
f012c398:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012c39f:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012c3a5:	01 d0                	add    %edx,%eax
f012c3a7:	8b 40 04             	mov    0x4(%eax),%eax
f012c3aa:	83 f8 07             	cmp    $0x7,%eax
f012c3ad:	74 17                	je     f012c3c6 <test_krealloc+0xf6d>
			panic(
f012c3af:	83 ec 04             	sub    $0x4,%esp
f012c3b2:	68 a8 bb 13 f0       	push   $0xf013bba8
f012c3b7:	68 9d 0f 00 00       	push   $0xf9d
f012c3bc:	68 76 a8 13 f0       	push   $0xf013a876
f012c3c1:	e8 e0 3d fd ff       	call   f01001a6 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");

		structArr = (struct MyStruct*) ptr_allocations[7];
f012c3c6:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f012c3cc:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
		if (structArr[0].a != 8 || structArr[lastIndices[7]].a != 8)
f012c3d2:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012c3d8:	8a 00                	mov    (%eax),%al
f012c3da:	3c 08                	cmp    $0x8,%al
f012c3dc:	75 1b                	jne    f012c3f9 <test_krealloc+0xfa0>
f012c3de:	8b 85 24 fe ff ff    	mov    -0x1dc(%ebp),%eax
f012c3e4:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012c3eb:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012c3f1:	01 d0                	add    %edx,%eax
f012c3f3:	8a 00                	mov    (%eax),%al
f012c3f5:	3c 08                	cmp    $0x8,%al
f012c3f7:	74 17                	je     f012c410 <test_krealloc+0xfb7>
			panic(
f012c3f9:	83 ec 04             	sub    $0x4,%esp
f012c3fc:	68 a8 bb 13 f0       	push   $0xf013bba8
f012c401:	68 a2 0f 00 00       	push   $0xfa2
f012c406:	68 76 a8 13 f0       	push   $0xf013a876
f012c40b:	e8 96 3d fd ff       	call   f01001a6 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");
		if (structArr[0].b != 8 || structArr[lastIndices[7]].b != 8)
f012c410:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012c416:	66 8b 40 02          	mov    0x2(%eax),%ax
f012c41a:	66 83 f8 08          	cmp    $0x8,%ax
f012c41e:	75 1f                	jne    f012c43f <test_krealloc+0xfe6>
f012c420:	8b 85 24 fe ff ff    	mov    -0x1dc(%ebp),%eax
f012c426:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012c42d:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012c433:	01 d0                	add    %edx,%eax
f012c435:	66 8b 40 02          	mov    0x2(%eax),%ax
f012c439:	66 83 f8 08          	cmp    $0x8,%ax
f012c43d:	74 17                	je     f012c456 <test_krealloc+0xffd>
			panic(
f012c43f:	83 ec 04             	sub    $0x4,%esp
f012c442:	68 a8 bb 13 f0       	push   $0xf013bba8
f012c447:	68 a5 0f 00 00       	push   $0xfa5
f012c44c:	68 76 a8 13 f0       	push   $0xf013a876
f012c451:	e8 50 3d fd ff       	call   f01001a6 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");
		if (structArr[0].c != 8 || structArr[lastIndices[7]].c != 8)
f012c456:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012c45c:	8b 40 04             	mov    0x4(%eax),%eax
f012c45f:	83 f8 08             	cmp    $0x8,%eax
f012c462:	75 1d                	jne    f012c481 <test_krealloc+0x1028>
f012c464:	8b 85 24 fe ff ff    	mov    -0x1dc(%ebp),%eax
f012c46a:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012c471:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012c477:	01 d0                	add    %edx,%eax
f012c479:	8b 40 04             	mov    0x4(%eax),%eax
f012c47c:	83 f8 08             	cmp    $0x8,%eax
f012c47f:	74 17                	je     f012c498 <test_krealloc+0x103f>
			panic(
f012c481:	83 ec 04             	sub    $0x4,%esp
f012c484:	68 a8 bb 13 f0       	push   $0xf013bba8
f012c489:	68 a8 0f 00 00       	push   $0xfa8
f012c48e:	68 76 a8 13 f0       	push   $0xf013a876
f012c493:	e8 0e 3d fd ff       	call   f01001a6 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");

		if ((freeFrames - sys_calculate_free_frames()) != 0)
f012c498:	e8 21 ff fd ff       	call   f010c3be <sys_calculate_free_frames>
f012c49d:	89 c2                	mov    %eax,%edx
f012c49f:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012c4a2:	39 c2                	cmp    %eax,%edx
f012c4a4:	74 17                	je     f012c4bd <test_krealloc+0x1064>
			panic(
f012c4a6:	83 ec 04             	sub    $0x4,%esp
f012c4a9:	68 68 bc 13 f0       	push   $0xf013bc68
f012c4ae:	68 ac 0f 00 00       	push   $0xfac
f012c4b3:	68 76 a8 13 f0       	push   $0xf013a876
f012c4b8:	e8 e9 3c fd ff       	call   f01001a6 <_panic>
					"krealloc: Wrong allocation pages are not loaded successfully into memory");

	}
	cprintf("\nkrealloc: current evaluation = 10%");
f012c4bd:	83 ec 0c             	sub    $0xc,%esp
f012c4c0:	68 b4 bc 13 f0       	push   $0xf013bcb4
f012c4c5:	e8 63 47 fd ff       	call   f0100c2d <cprintf>
f012c4ca:	83 c4 10             	add    $0x10,%esp

	//[3] Test krealloc by passing size = 0
	{
		//kfree 1st 1 MB
		freeFrames = sys_calculate_free_frames();
f012c4cd:	e8 ec fe fd ff       	call   f010c3be <sys_calculate_free_frames>
f012c4d2:	89 45 b8             	mov    %eax,-0x48(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f012c4d5:	e8 b2 77 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f012c4da:	89 85 dc fe ff ff    	mov    %eax,-0x124(%ebp)
		krealloc(ptr_allocations[0], 0);
f012c4e0:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f012c4e6:	83 ec 08             	sub    $0x8,%esp
f012c4e9:	6a 00                	push   $0x0
f012c4eb:	50                   	push   %eax
f012c4ec:	e8 9b b1 fd ff       	call   f010768c <krealloc>
f012c4f1:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0)
f012c4f4:	e8 93 77 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f012c4f9:	3b 85 dc fe ff ff    	cmp    -0x124(%ebp),%eax
f012c4ff:	74 17                	je     f012c518 <test_krealloc+0x10bf>
			panic(
f012c501:	83 ec 04             	sub    $0x4,%esp
f012c504:	68 d8 bc 13 f0       	push   $0xf013bcd8
f012c509:	68 b9 0f 00 00       	push   $0xfb9
f012c50e:	68 76 a8 13 f0       	push   $0xf013a876
f012c513:	e8 8e 3c fd ff       	call   f01001a6 <_panic>
					"krealloc: Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((sys_calculate_free_frames() - freeFrames) != 256)
f012c518:	e8 a1 fe fd ff       	call   f010c3be <sys_calculate_free_frames>
f012c51d:	89 c2                	mov    %eax,%edx
f012c51f:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012c522:	29 c2                	sub    %eax,%edx
f012c524:	89 d0                	mov    %edx,%eax
f012c526:	3d 00 01 00 00       	cmp    $0x100,%eax
f012c52b:	74 17                	je     f012c544 <test_krealloc+0x10eb>
			panic("krealloc: pages in memory are not freed correctly");
f012c52d:	83 ec 04             	sub    $0x4,%esp
f012c530:	68 4c bd 13 f0       	push   $0xf013bd4c
f012c535:	68 bb 0f 00 00       	push   $0xfbb
f012c53a:	68 76 a8 13 f0       	push   $0xf013a876
f012c53f:	e8 62 3c fd ff       	call   f01001a6 <_panic>

		//kfree 3rd 1 MB
		freeFrames = sys_calculate_free_frames();
f012c544:	e8 75 fe fd ff       	call   f010c3be <sys_calculate_free_frames>
f012c549:	89 45 b8             	mov    %eax,-0x48(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f012c54c:	e8 3b 77 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f012c551:	89 85 dc fe ff ff    	mov    %eax,-0x124(%ebp)

		krealloc(ptr_allocations[2], 0);
f012c557:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f012c55d:	83 ec 08             	sub    $0x8,%esp
f012c560:	6a 00                	push   $0x0
f012c562:	50                   	push   %eax
f012c563:	e8 24 b1 fd ff       	call   f010768c <krealloc>
f012c568:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0)
f012c56b:	e8 1c 77 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f012c570:	3b 85 dc fe ff ff    	cmp    -0x124(%ebp),%eax
f012c576:	74 17                	je     f012c58f <test_krealloc+0x1136>
			panic(
f012c578:	83 ec 04             	sub    $0x4,%esp
f012c57b:	68 d8 bc 13 f0       	push   $0xf013bcd8
f012c580:	68 c4 0f 00 00       	push   $0xfc4
f012c585:	68 76 a8 13 f0       	push   $0xf013a876
f012c58a:	e8 17 3c fd ff       	call   f01001a6 <_panic>
					"krealloc: Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((sys_calculate_free_frames() - freeFrames) != 256)
f012c58f:	e8 2a fe fd ff       	call   f010c3be <sys_calculate_free_frames>
f012c594:	89 c2                	mov    %eax,%edx
f012c596:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012c599:	29 c2                	sub    %eax,%edx
f012c59b:	89 d0                	mov    %edx,%eax
f012c59d:	3d 00 01 00 00       	cmp    $0x100,%eax
f012c5a2:	74 17                	je     f012c5bb <test_krealloc+0x1162>
			panic("krealloc: pages in memory are not freed correctly");
f012c5a4:	83 ec 04             	sub    $0x4,%esp
f012c5a7:	68 4c bd 13 f0       	push   $0xf013bd4c
f012c5ac:	68 c6 0f 00 00       	push   $0xfc6
f012c5b1:	68 76 a8 13 f0       	push   $0xf013a876
f012c5b6:	e8 eb 3b fd ff       	call   f01001a6 <_panic>

		//kfree 2nd 2 MB
		freeFrames = sys_calculate_free_frames();
f012c5bb:	e8 fe fd fd ff       	call   f010c3be <sys_calculate_free_frames>
f012c5c0:	89 45 b8             	mov    %eax,-0x48(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f012c5c3:	e8 c4 76 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f012c5c8:	89 85 dc fe ff ff    	mov    %eax,-0x124(%ebp)
		krealloc(ptr_allocations[5], 0);
f012c5ce:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f012c5d4:	83 ec 08             	sub    $0x8,%esp
f012c5d7:	6a 00                	push   $0x0
f012c5d9:	50                   	push   %eax
f012c5da:	e8 ad b0 fd ff       	call   f010768c <krealloc>
f012c5df:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0)
f012c5e2:	e8 a5 76 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f012c5e7:	3b 85 dc fe ff ff    	cmp    -0x124(%ebp),%eax
f012c5ed:	74 17                	je     f012c606 <test_krealloc+0x11ad>
			panic(
f012c5ef:	83 ec 04             	sub    $0x4,%esp
f012c5f2:	68 90 a8 13 f0       	push   $0xf013a890
f012c5f7:	68 ce 0f 00 00       	push   $0xfce
f012c5fc:	68 76 a8 13 f0       	push   $0xf013a876
f012c601:	e8 a0 3b fd ff       	call   f01001a6 <_panic>
					"Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((sys_calculate_free_frames() - freeFrames) != 2 * Mega / PAGE_SIZE)
f012c606:	e8 b3 fd fd ff       	call   f010c3be <sys_calculate_free_frames>
f012c60b:	89 c2                	mov    %eax,%edx
f012c60d:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012c610:	29 c2                	sub    %eax,%edx
f012c612:	89 d0                	mov    %edx,%eax
f012c614:	3d 00 02 00 00       	cmp    $0x200,%eax
f012c619:	74 17                	je     f012c632 <test_krealloc+0x11d9>
			panic("krealloc: pages in memory are not freed correctly");
f012c61b:	83 ec 04             	sub    $0x4,%esp
f012c61e:	68 4c bd 13 f0       	push   $0xf013bd4c
f012c623:	68 d0 0f 00 00       	push   $0xfd0
f012c628:	68 76 a8 13 f0       	push   $0xf013a876
f012c62d:	e8 74 3b fd ff       	call   f01001a6 <_panic>

		//kfree last 3 MB
		freeFrames = sys_calculate_free_frames();
f012c632:	e8 87 fd fd ff       	call   f010c3be <sys_calculate_free_frames>
f012c637:	89 45 b8             	mov    %eax,-0x48(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f012c63a:	e8 4d 76 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f012c63f:	89 85 dc fe ff ff    	mov    %eax,-0x124(%ebp)
		krealloc(ptr_allocations[7], 0);
f012c645:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f012c64b:	83 ec 08             	sub    $0x8,%esp
f012c64e:	6a 00                	push   $0x0
f012c650:	50                   	push   %eax
f012c651:	e8 36 b0 fd ff       	call   f010768c <krealloc>
f012c656:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0)
f012c659:	e8 2e 76 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f012c65e:	3b 85 dc fe ff ff    	cmp    -0x124(%ebp),%eax
f012c664:	74 17                	je     f012c67d <test_krealloc+0x1224>
			panic(
f012c666:	83 ec 04             	sub    $0x4,%esp
f012c669:	68 d8 bc 13 f0       	push   $0xf013bcd8
f012c66e:	68 d8 0f 00 00       	push   $0xfd8
f012c673:	68 76 a8 13 f0       	push   $0xf013a876
f012c678:	e8 29 3b fd ff       	call   f01001a6 <_panic>
					"krealloc: Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((sys_calculate_free_frames() - freeFrames) != 3 * Mega / PAGE_SIZE)
f012c67d:	e8 3c fd fd ff       	call   f010c3be <sys_calculate_free_frames>
f012c682:	89 c2                	mov    %eax,%edx
f012c684:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012c687:	29 c2                	sub    %eax,%edx
f012c689:	89 d0                	mov    %edx,%eax
f012c68b:	3d 00 03 00 00       	cmp    $0x300,%eax
f012c690:	74 17                	je     f012c6a9 <test_krealloc+0x1250>
			panic(
f012c692:	83 ec 04             	sub    $0x4,%esp
f012c695:	68 80 bd 13 f0       	push   $0xf013bd80
f012c69a:	68 db 0f 00 00       	push   $0xfdb
f012c69f:	68 76 a8 13 f0       	push   $0xf013a876
f012c6a4:	e8 fd 3a fd ff       	call   f01001a6 <_panic>
					"krealloc: Wrong kfree: pages in memory are not freed correctly");
		//check tables	[15%]
		{
			long long va;
			for (va = KERNEL_HEAP_START; va < (long long) KERNEL_HEAP_MAX; va +=
f012c6a9:	c7 45 e0 00 00 00 f6 	movl   $0xf6000000,-0x20(%ebp)
f012c6b0:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
f012c6b7:	eb 48                	jmp    f012c701 <test_krealloc+0x12a8>
			PTSIZE)
			{
				uint32 *ptr_table;
				get_page_table(ptr_page_directory,  (uint32) va,
f012c6b9:	8b 55 e0             	mov    -0x20(%ebp),%edx
f012c6bc:	a1 b8 0e 6c f0       	mov    0xf06c0eb8,%eax
f012c6c1:	83 ec 04             	sub    $0x4,%esp
f012c6c4:	8d 8d b4 fd ff ff    	lea    -0x24c(%ebp),%ecx
f012c6ca:	51                   	push   %ecx
f012c6cb:	52                   	push   %edx
f012c6cc:	50                   	push   %eax
f012c6cd:	e8 97 a2 fd ff       	call   f0106969 <get_page_table>
f012c6d2:	83 c4 10             	add    $0x10,%esp
						&ptr_table);
				if (ptr_table == NULL) {
f012c6d5:	8b 85 b4 fd ff ff    	mov    -0x24c(%ebp),%eax
f012c6db:	85 c0                	test   %eax,%eax
f012c6dd:	75 17                	jne    f012c6f6 <test_krealloc+0x129d>
					panic(
f012c6df:	83 ec 04             	sub    $0x4,%esp
f012c6e2:	68 78 b1 13 f0       	push   $0xf013b178
f012c6e7:	68 e7 0f 00 00       	push   $0xfe7
f012c6ec:	68 76 a8 13 f0       	push   $0xf013a876
f012c6f1:	e8 b0 3a fd ff       	call   f01001a6 <_panic>
			panic(
					"krealloc: Wrong kfree: pages in memory are not freed correctly");
		//check tables	[15%]
		{
			long long va;
			for (va = KERNEL_HEAP_START; va < (long long) KERNEL_HEAP_MAX; va +=
f012c6f6:	81 45 e0 00 00 40 00 	addl   $0x400000,-0x20(%ebp)
f012c6fd:	83 55 e4 00          	adcl   $0x0,-0x1c(%ebp)
f012c701:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f012c705:	78 b2                	js     f012c6b9 <test_krealloc+0x1260>
f012c707:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f012c70b:	7f 09                	jg     f012c716 <test_krealloc+0x12bd>
f012c70d:	81 7d e0 ff ef ff ff 	cmpl   $0xffffefff,-0x20(%ebp)
f012c714:	76 a3                	jbe    f012c6b9 <test_krealloc+0x1260>
							"Wrong kfree: one of the kernel tables is wrongly removed! Tables should not be removed here in kfree");
				}
			}
		}
	}
	cprintf("\b\b\b20%");
f012c716:	83 ec 0c             	sub    $0xc,%esp
f012c719:	68 bf bd 13 f0       	push   $0xf013bdbf
f012c71e:	e8 0a 45 fd ff       	call   f0100c2d <cprintf>
f012c723:	83 c4 10             	add    $0x10,%esp
	//Check memory access after kfree by checking sum
	{
		//2nd 1 MB
		//cprintf("2nd 1 MB\n");
		ptr = (char*) ptr_allocations[1];
f012c726:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f012c72c:	89 85 ec fe ff ff    	mov    %eax,-0x114(%ebp)
		int i;
		for (i = 0; i <= lastIndices[1]; ++i) {
f012c732:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
f012c739:	eb 21                	jmp    f012c75c <test_krealloc+0x1303>
			sums[0] += ptr[i];
f012c73b:	8b 95 b8 fd ff ff    	mov    -0x248(%ebp),%edx
f012c741:	8b 4d dc             	mov    -0x24(%ebp),%ecx
f012c744:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f012c74a:	01 c8                	add    %ecx,%eax
f012c74c:	8a 00                	mov    (%eax),%al
f012c74e:	0f be c0             	movsbl %al,%eax
f012c751:	01 d0                	add    %edx,%eax
f012c753:	89 85 b8 fd ff ff    	mov    %eax,-0x248(%ebp)
	{
		//2nd 1 MB
		//cprintf("2nd 1 MB\n");
		ptr = (char*) ptr_allocations[1];
		int i;
		for (i = 0; i <= lastIndices[1]; ++i) {
f012c759:	ff 45 dc             	incl   -0x24(%ebp)
f012c75c:	8b 85 0c fe ff ff    	mov    -0x1f4(%ebp),%eax
f012c762:	3b 45 dc             	cmp    -0x24(%ebp),%eax
f012c765:	7d d4                	jge    f012c73b <test_krealloc+0x12e2>
			sums[0] += ptr[i];

		}
		//cprintf("sum for 2nd 1 MB = %d LIM1 = %d\n", sums[0], (lastIndices[1] - 1));
		if (sums[0] != (lastIndices[1] + 1) * 2)
f012c767:	8b 85 b8 fd ff ff    	mov    -0x248(%ebp),%eax
f012c76d:	8b 95 0c fe ff ff    	mov    -0x1f4(%ebp),%edx
f012c773:	42                   	inc    %edx
f012c774:	01 d2                	add    %edx,%edx
f012c776:	39 d0                	cmp    %edx,%eax
f012c778:	74 17                	je     f012c791 <test_krealloc+0x1338>
			panic("krealloc: invalid read after freeing some allocations");
f012c77a:	83 ec 04             	sub    $0x4,%esp
f012c77d:	68 c8 bd 13 f0       	push   $0xf013bdc8
f012c782:	68 f9 0f 00 00       	push   $0xff9
f012c787:	68 76 a8 13 f0       	push   $0xf013a876
f012c78c:	e8 15 3a fd ff       	call   f01001a6 <_panic>

		//4th 1 MB
		//cprintf("4th 1 MB\n");
		intArr = (int*) ptr_allocations[3];
f012c791:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f012c797:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)

		for (i = 0; i <= lastIndices[3]; ++i) {
f012c79d:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
f012c7a4:	eb 25                	jmp    f012c7cb <test_krealloc+0x1372>
			sums[1] += intArr[i];
f012c7a6:	8b 95 bc fd ff ff    	mov    -0x244(%ebp),%edx
f012c7ac:	8b 45 dc             	mov    -0x24(%ebp),%eax
f012c7af:	8d 0c 85 00 00 00 00 	lea    0x0(,%eax,4),%ecx
f012c7b6:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f012c7bc:	01 c8                	add    %ecx,%eax
f012c7be:	8b 00                	mov    (%eax),%eax
f012c7c0:	01 d0                	add    %edx,%eax
f012c7c2:	89 85 bc fd ff ff    	mov    %eax,-0x244(%ebp)

		//4th 1 MB
		//cprintf("4th 1 MB\n");
		intArr = (int*) ptr_allocations[3];

		for (i = 0; i <= lastIndices[3]; ++i) {
f012c7c8:	ff 45 dc             	incl   -0x24(%ebp)
f012c7cb:	8b 85 14 fe ff ff    	mov    -0x1ec(%ebp),%eax
f012c7d1:	3b 45 dc             	cmp    -0x24(%ebp),%eax
f012c7d4:	7d d0                	jge    f012c7a6 <test_krealloc+0x134d>
			sums[1] += intArr[i];
		}
		if (sums[1] != (lastIndices[3] + 1) * 4)
f012c7d6:	8b 85 bc fd ff ff    	mov    -0x244(%ebp),%eax
f012c7dc:	8b 95 14 fe ff ff    	mov    -0x1ec(%ebp),%edx
f012c7e2:	42                   	inc    %edx
f012c7e3:	c1 e2 02             	shl    $0x2,%edx
f012c7e6:	39 d0                	cmp    %edx,%eax
f012c7e8:	74 17                	je     f012c801 <test_krealloc+0x13a8>
			panic("krealloc: invalid read after freeing some allocations");
f012c7ea:	83 ec 04             	sub    $0x4,%esp
f012c7ed:	68 c8 bd 13 f0       	push   $0xf013bdc8
f012c7f2:	68 03 10 00 00       	push   $0x1003
f012c7f7:	68 76 a8 13 f0       	push   $0xf013a876
f012c7fc:	e8 a5 39 fd ff       	call   f01001a6 <_panic>

		//1st 2 MB
		//cprintf("1st 2 MB\n");
		shortArr = (short*) ptr_allocations[4];
f012c801:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f012c807:	89 85 e4 fe ff ff    	mov    %eax,-0x11c(%ebp)

		for (i = 0; i <= lastIndices[4]; ++i) {
f012c80d:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
f012c814:	eb 24                	jmp    f012c83a <test_krealloc+0x13e1>
			sums[2] += shortArr[i];
f012c816:	8b 95 c0 fd ff ff    	mov    -0x240(%ebp),%edx
f012c81c:	8b 45 dc             	mov    -0x24(%ebp),%eax
f012c81f:	01 c0                	add    %eax,%eax
f012c821:	89 c1                	mov    %eax,%ecx
f012c823:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f012c829:	01 c8                	add    %ecx,%eax
f012c82b:	66 8b 00             	mov    (%eax),%ax
f012c82e:	98                   	cwtl   
f012c82f:	01 d0                	add    %edx,%eax
f012c831:	89 85 c0 fd ff ff    	mov    %eax,-0x240(%ebp)

		//1st 2 MB
		//cprintf("1st 2 MB\n");
		shortArr = (short*) ptr_allocations[4];

		for (i = 0; i <= lastIndices[4]; ++i) {
f012c837:	ff 45 dc             	incl   -0x24(%ebp)
f012c83a:	8b 85 18 fe ff ff    	mov    -0x1e8(%ebp),%eax
f012c840:	3b 45 dc             	cmp    -0x24(%ebp),%eax
f012c843:	7d d1                	jge    f012c816 <test_krealloc+0x13bd>
			sums[2] += shortArr[i];
		}
		if (sums[2] != (lastIndices[4] + 1) * 5)
f012c845:	8b 95 c0 fd ff ff    	mov    -0x240(%ebp),%edx
f012c84b:	8b 85 18 fe ff ff    	mov    -0x1e8(%ebp),%eax
f012c851:	8d 48 01             	lea    0x1(%eax),%ecx
f012c854:	89 c8                	mov    %ecx,%eax
f012c856:	c1 e0 02             	shl    $0x2,%eax
f012c859:	01 c8                	add    %ecx,%eax
f012c85b:	39 c2                	cmp    %eax,%edx
f012c85d:	74 17                	je     f012c876 <test_krealloc+0x141d>
			panic("krealloc: invalid read after freeing some allocations");
f012c85f:	83 ec 04             	sub    $0x4,%esp
f012c862:	68 c8 bd 13 f0       	push   $0xf013bdc8
f012c867:	68 0d 10 00 00       	push   $0x100d
f012c86c:	68 76 a8 13 f0       	push   $0xf013a876
f012c871:	e8 30 39 fd ff       	call   f01001a6 <_panic>

		//1st 3 MB
		//cprintf("1st 3 MB\n");
		structArr = (struct MyStruct*) ptr_allocations[6];
f012c876:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f012c87c:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)

		for (i = 0; i <= lastIndices[6]; ++i) {
f012c882:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
f012c889:	eb 70                	jmp    f012c8fb <test_krealloc+0x14a2>
			sums[3] += structArr[i].a;
f012c88b:	8b 95 c4 fd ff ff    	mov    -0x23c(%ebp),%edx
f012c891:	8b 45 dc             	mov    -0x24(%ebp),%eax
f012c894:	8d 0c c5 00 00 00 00 	lea    0x0(,%eax,8),%ecx
f012c89b:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012c8a1:	01 c8                	add    %ecx,%eax
f012c8a3:	8a 00                	mov    (%eax),%al
f012c8a5:	0f be c0             	movsbl %al,%eax
f012c8a8:	01 d0                	add    %edx,%eax
f012c8aa:	89 85 c4 fd ff ff    	mov    %eax,-0x23c(%ebp)
			sums[4] += structArr[i].b;
f012c8b0:	8b 95 c8 fd ff ff    	mov    -0x238(%ebp),%edx
f012c8b6:	8b 45 dc             	mov    -0x24(%ebp),%eax
f012c8b9:	8d 0c c5 00 00 00 00 	lea    0x0(,%eax,8),%ecx
f012c8c0:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012c8c6:	01 c8                	add    %ecx,%eax
f012c8c8:	66 8b 40 02          	mov    0x2(%eax),%ax
f012c8cc:	98                   	cwtl   
f012c8cd:	01 d0                	add    %edx,%eax
f012c8cf:	89 85 c8 fd ff ff    	mov    %eax,-0x238(%ebp)
			sums[5] += structArr[i].c;
f012c8d5:	8b 95 cc fd ff ff    	mov    -0x234(%ebp),%edx
f012c8db:	8b 45 dc             	mov    -0x24(%ebp),%eax
f012c8de:	8d 0c c5 00 00 00 00 	lea    0x0(,%eax,8),%ecx
f012c8e5:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012c8eb:	01 c8                	add    %ecx,%eax
f012c8ed:	8b 40 04             	mov    0x4(%eax),%eax
f012c8f0:	01 d0                	add    %edx,%eax
f012c8f2:	89 85 cc fd ff ff    	mov    %eax,-0x234(%ebp)

		//1st 3 MB
		//cprintf("1st 3 MB\n");
		structArr = (struct MyStruct*) ptr_allocations[6];

		for (i = 0; i <= lastIndices[6]; ++i) {
f012c8f8:	ff 45 dc             	incl   -0x24(%ebp)
f012c8fb:	8b 85 20 fe ff ff    	mov    -0x1e0(%ebp),%eax
f012c901:	3b 45 dc             	cmp    -0x24(%ebp),%eax
f012c904:	7d 85                	jge    f012c88b <test_krealloc+0x1432>
			sums[3] += structArr[i].a;
			sums[4] += structArr[i].b;
			sums[5] += structArr[i].c;
		}
		if (sums[3] != (lastIndices[6] + 1) * 7
f012c906:	8b 8d c4 fd ff ff    	mov    -0x23c(%ebp),%ecx
f012c90c:	8b 85 20 fe ff ff    	mov    -0x1e0(%ebp),%eax
f012c912:	8d 50 01             	lea    0x1(%eax),%edx
f012c915:	89 d0                	mov    %edx,%eax
f012c917:	01 c0                	add    %eax,%eax
f012c919:	01 d0                	add    %edx,%eax
f012c91b:	01 c0                	add    %eax,%eax
f012c91d:	01 d0                	add    %edx,%eax
f012c91f:	39 c1                	cmp    %eax,%ecx
f012c921:	75 3a                	jne    f012c95d <test_krealloc+0x1504>
				|| sums[4] != (lastIndices[6] + 1) * 7
f012c923:	8b 8d c8 fd ff ff    	mov    -0x238(%ebp),%ecx
f012c929:	8b 85 20 fe ff ff    	mov    -0x1e0(%ebp),%eax
f012c92f:	8d 50 01             	lea    0x1(%eax),%edx
f012c932:	89 d0                	mov    %edx,%eax
f012c934:	01 c0                	add    %eax,%eax
f012c936:	01 d0                	add    %edx,%eax
f012c938:	01 c0                	add    %eax,%eax
f012c93a:	01 d0                	add    %edx,%eax
f012c93c:	39 c1                	cmp    %eax,%ecx
f012c93e:	75 1d                	jne    f012c95d <test_krealloc+0x1504>
				|| sums[5] != (lastIndices[6] + 1) * 7)
f012c940:	8b 8d cc fd ff ff    	mov    -0x234(%ebp),%ecx
f012c946:	8b 85 20 fe ff ff    	mov    -0x1e0(%ebp),%eax
f012c94c:	8d 50 01             	lea    0x1(%eax),%edx
f012c94f:	89 d0                	mov    %edx,%eax
f012c951:	01 c0                	add    %eax,%eax
f012c953:	01 d0                	add    %edx,%eax
f012c955:	01 c0                	add    %eax,%eax
f012c957:	01 d0                	add    %edx,%eax
f012c959:	39 c1                	cmp    %eax,%ecx
f012c95b:	74 17                	je     f012c974 <test_krealloc+0x151b>
			panic("krealloc: invalid read after freeing some allocations");
f012c95d:	83 ec 04             	sub    $0x4,%esp
f012c960:	68 c8 bd 13 f0       	push   $0xf013bdc8
f012c965:	68 1b 10 00 00       	push   $0x101b
f012c96a:	68 76 a8 13 f0       	push   $0xf013a876
f012c96f:	e8 32 38 fd ff       	call   f01001a6 <_panic>
	}

	//[4] Test krealloc reallocation with valid and invalid sizes
	{
		int freeDiskFrames;
		void* newAddress = NULL;
f012c974:	c7 85 d8 fe ff ff 00 	movl   $0x0,-0x128(%ebp)
f012c97b:	00 00 00 
		//Try to reallocate 2nd 1 MB with a size smaller than its current size (it should return the same VA and do nothing)
		freeFrames = sys_calculate_free_frames();
f012c97e:	e8 3b fa fd ff       	call   f010c3be <sys_calculate_free_frames>
f012c983:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[1], 15 * kilo);
f012c986:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f012c98c:	83 ec 08             	sub    $0x8,%esp
f012c98f:	68 00 3c 00 00       	push   $0x3c00
f012c994:	50                   	push   %eax
f012c995:	e8 f2 ac fd ff       	call   f010768c <krealloc>
f012c99a:	83 c4 10             	add    $0x10,%esp
f012c99d:	89 85 d8 fe ff ff    	mov    %eax,-0x128(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012c9a3:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f012c9a9:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012c9ae:	77 17                	ja     f012c9c7 <test_krealloc+0x156e>
			panic("krealloc: Wrong start address for the allocated space... ");
f012c9b0:	83 ec 04             	sub    $0x4,%esp
f012c9b3:	68 1c bb 13 f0       	push   $0xf013bb1c
f012c9b8:	68 27 10 00 00       	push   $0x1027
f012c9bd:	68 76 a8 13 f0       	push   $0xf013a876
f012c9c2:	e8 df 37 fd ff       	call   f01001a6 <_panic>
		if (newAddress != ptr_allocations[1])
f012c9c7:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f012c9cd:	3b 85 d8 fe ff ff    	cmp    -0x128(%ebp),%eax
f012c9d3:	74 17                	je     f012c9ec <test_krealloc+0x1593>
			panic(
f012c9d5:	83 ec 04             	sub    $0x4,%esp
f012c9d8:	68 00 be 13 f0       	push   $0xf013be00
f012c9dd:	68 2a 10 00 00       	push   $0x102a
f012c9e2:	68 76 a8 13 f0       	push   $0xf013a876
f012c9e7:	e8 ba 37 fd ff       	call   f01001a6 <_panic>
					"krealloc: Wrong allocation: krealloc reallocated an address with the same size (it should return same VA)");
		if (freeFrames != sys_calculate_free_frames())
f012c9ec:	e8 cd f9 fd ff       	call   f010c3be <sys_calculate_free_frames>
f012c9f1:	89 c2                	mov    %eax,%edx
f012c9f3:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012c9f6:	39 c2                	cmp    %eax,%edx
f012c9f8:	74 17                	je     f012ca11 <test_krealloc+0x15b8>
			panic(
f012c9fa:	83 ec 04             	sub    $0x4,%esp
f012c9fd:	68 6c be 13 f0       	push   $0xf013be6c
f012ca02:	68 2d 10 00 00       	push   $0x102d
f012ca07:	68 76 a8 13 f0       	push   $0xf013a876
f012ca0c:	e8 95 37 fd ff       	call   f01001a6 <_panic>
					"krealloc: Wrong number of frames after krealloc with the same size");

		//Try to reallocate 1st 2 MB with a size smaller than its current size (it should return the same VA and do nothing)
		freeFrames = sys_calculate_free_frames();
f012ca11:	e8 a8 f9 fd ff       	call   f010c3be <sys_calculate_free_frames>
f012ca16:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[4], 1 * Mega - kilo);
f012ca19:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f012ca1f:	83 ec 08             	sub    $0x8,%esp
f012ca22:	68 00 fc 0f 00       	push   $0xffc00
f012ca27:	50                   	push   %eax
f012ca28:	e8 5f ac fd ff       	call   f010768c <krealloc>
f012ca2d:	83 c4 10             	add    $0x10,%esp
f012ca30:	89 85 d8 fe ff ff    	mov    %eax,-0x128(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012ca36:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f012ca3c:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012ca41:	77 17                	ja     f012ca5a <test_krealloc+0x1601>
			panic("krealloc: Wrong start address for the allocated space... ");
f012ca43:	83 ec 04             	sub    $0x4,%esp
f012ca46:	68 1c bb 13 f0       	push   $0xf013bb1c
f012ca4b:	68 33 10 00 00       	push   $0x1033
f012ca50:	68 76 a8 13 f0       	push   $0xf013a876
f012ca55:	e8 4c 37 fd ff       	call   f01001a6 <_panic>
		if (newAddress != ptr_allocations[4])
f012ca5a:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f012ca60:	3b 85 d8 fe ff ff    	cmp    -0x128(%ebp),%eax
f012ca66:	74 17                	je     f012ca7f <test_krealloc+0x1626>
			panic(
f012ca68:	83 ec 04             	sub    $0x4,%esp
f012ca6b:	68 00 be 13 f0       	push   $0xf013be00
f012ca70:	68 36 10 00 00       	push   $0x1036
f012ca75:	68 76 a8 13 f0       	push   $0xf013a876
f012ca7a:	e8 27 37 fd ff       	call   f01001a6 <_panic>
					"krealloc: Wrong allocation: krealloc reallocated an address with the same size (it should return same VA)");
		if (freeFrames != sys_calculate_free_frames())
f012ca7f:	e8 3a f9 fd ff       	call   f010c3be <sys_calculate_free_frames>
f012ca84:	89 c2                	mov    %eax,%edx
f012ca86:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012ca89:	39 c2                	cmp    %eax,%edx
f012ca8b:	74 17                	je     f012caa4 <test_krealloc+0x164b>
			panic(
f012ca8d:	83 ec 04             	sub    $0x4,%esp
f012ca90:	68 6c be 13 f0       	push   $0xf013be6c
f012ca95:	68 39 10 00 00       	push   $0x1039
f012ca9a:	68 76 a8 13 f0       	push   $0xf013a876
f012ca9f:	e8 02 37 fd ff       	call   f01001a6 <_panic>
					"krealloc: Wrong number of frames after krealloc with the same size");

		//Try to reallocate 2nd 1 MB with the same size it should return the same VA
		freeFrames = sys_calculate_free_frames();
f012caa4:	e8 15 f9 fd ff       	call   f010c3be <sys_calculate_free_frames>
f012caa9:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[1], 1 * Mega - kilo);
f012caac:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f012cab2:	83 ec 08             	sub    $0x8,%esp
f012cab5:	68 00 fc 0f 00       	push   $0xffc00
f012caba:	50                   	push   %eax
f012cabb:	e8 cc ab fd ff       	call   f010768c <krealloc>
f012cac0:	83 c4 10             	add    $0x10,%esp
f012cac3:	89 85 d8 fe ff ff    	mov    %eax,-0x128(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012cac9:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f012cacf:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012cad4:	77 17                	ja     f012caed <test_krealloc+0x1694>
			panic("krealloc: Wrong start address for the allocated space... ");
f012cad6:	83 ec 04             	sub    $0x4,%esp
f012cad9:	68 1c bb 13 f0       	push   $0xf013bb1c
f012cade:	68 3f 10 00 00       	push   $0x103f
f012cae3:	68 76 a8 13 f0       	push   $0xf013a876
f012cae8:	e8 b9 36 fd ff       	call   f01001a6 <_panic>
		if (newAddress != ptr_allocations[1])
f012caed:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f012caf3:	3b 85 d8 fe ff ff    	cmp    -0x128(%ebp),%eax
f012caf9:	74 17                	je     f012cb12 <test_krealloc+0x16b9>
			panic(
f012cafb:	83 ec 04             	sub    $0x4,%esp
f012cafe:	68 00 be 13 f0       	push   $0xf013be00
f012cb03:	68 42 10 00 00       	push   $0x1042
f012cb08:	68 76 a8 13 f0       	push   $0xf013a876
f012cb0d:	e8 94 36 fd ff       	call   f01001a6 <_panic>
					"krealloc: Wrong allocation: krealloc reallocated an address with the same size (it should return same VA)");
		if (freeFrames != sys_calculate_free_frames())
f012cb12:	e8 a7 f8 fd ff       	call   f010c3be <sys_calculate_free_frames>
f012cb17:	89 c2                	mov    %eax,%edx
f012cb19:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012cb1c:	39 c2                	cmp    %eax,%edx
f012cb1e:	74 17                	je     f012cb37 <test_krealloc+0x16de>
			panic(
f012cb20:	83 ec 04             	sub    $0x4,%esp
f012cb23:	68 6c be 13 f0       	push   $0xf013be6c
f012cb28:	68 45 10 00 00       	push   $0x1045
f012cb2d:	68 76 a8 13 f0       	push   $0xf013a876
f012cb32:	e8 6f 36 fd ff       	call   f01001a6 <_panic>
					"krealloc: Wrong number of frames after krealloc with the same size");



		//Try to reallocate 4th 1 MB with the same size it should return the same VA
		freeFrames = sys_calculate_free_frames();
f012cb37:	e8 82 f8 fd ff       	call   f010c3be <sys_calculate_free_frames>
f012cb3c:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[3], 1 * Mega - kilo);
f012cb3f:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f012cb45:	83 ec 08             	sub    $0x8,%esp
f012cb48:	68 00 fc 0f 00       	push   $0xffc00
f012cb4d:	50                   	push   %eax
f012cb4e:	e8 39 ab fd ff       	call   f010768c <krealloc>
f012cb53:	83 c4 10             	add    $0x10,%esp
f012cb56:	89 85 d8 fe ff ff    	mov    %eax,-0x128(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012cb5c:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f012cb62:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012cb67:	77 17                	ja     f012cb80 <test_krealloc+0x1727>
			panic("krealloc: Wrong start address for the allocated space... ");
f012cb69:	83 ec 04             	sub    $0x4,%esp
f012cb6c:	68 1c bb 13 f0       	push   $0xf013bb1c
f012cb71:	68 4d 10 00 00       	push   $0x104d
f012cb76:	68 76 a8 13 f0       	push   $0xf013a876
f012cb7b:	e8 26 36 fd ff       	call   f01001a6 <_panic>
		if (newAddress != ptr_allocations[3])
f012cb80:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f012cb86:	3b 85 d8 fe ff ff    	cmp    -0x128(%ebp),%eax
f012cb8c:	74 17                	je     f012cba5 <test_krealloc+0x174c>
			panic(
f012cb8e:	83 ec 04             	sub    $0x4,%esp
f012cb91:	68 b0 be 13 f0       	push   $0xf013beb0
f012cb96:	68 50 10 00 00       	push   $0x1050
f012cb9b:	68 76 a8 13 f0       	push   $0xf013a876
f012cba0:	e8 01 36 fd ff       	call   f01001a6 <_panic>
					"Wrong allocation: krealloc reallocated an address with the same size (it should return same VA)");
		if (freeFrames != sys_calculate_free_frames())
f012cba5:	e8 14 f8 fd ff       	call   f010c3be <sys_calculate_free_frames>
f012cbaa:	89 c2                	mov    %eax,%edx
f012cbac:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012cbaf:	39 c2                	cmp    %eax,%edx
f012cbb1:	74 17                	je     f012cbca <test_krealloc+0x1771>
			panic(
f012cbb3:	83 ec 04             	sub    $0x4,%esp
f012cbb6:	68 6c be 13 f0       	push   $0xf013be6c
f012cbbb:	68 53 10 00 00       	push   $0x1053
f012cbc0:	68 76 a8 13 f0       	push   $0xf013a876
f012cbc5:	e8 dc 35 fd ff       	call   f01001a6 <_panic>
					"krealloc: Wrong number of frames after krealloc with the same size");
	}
	cprintf("\b\b\b30%");
f012cbca:	83 ec 0c             	sub    $0xc,%esp
f012cbcd:	68 8f b0 13 f0       	push   $0xf013b08f
f012cbd2:	e8 56 40 fd ff       	call   f0100c2d <cprintf>
f012cbd7:	83 c4 10             	add    $0x10,%esp
    {
		//Reallocate 2nd 1 MB to 1 MB + 7 KB
		freeFrames = sys_calculate_free_frames();
f012cbda:	e8 df f7 fd ff       	call   f010c3be <sys_calculate_free_frames>
f012cbdf:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[1],
f012cbe2:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f012cbe8:	83 ec 08             	sub    $0x8,%esp
f012cbeb:	68 00 18 10 00       	push   $0x101800
f012cbf0:	50                   	push   %eax
f012cbf1:	e8 96 aa fd ff       	call   f010768c <krealloc>
f012cbf6:	83 c4 10             	add    $0x10,%esp
f012cbf9:	89 45 bc             	mov    %eax,-0x44(%ebp)
				(1 * Mega - kilo) + (7 * kilo));
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012cbfc:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012cbff:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012cc04:	77 17                	ja     f012cc1d <test_krealloc+0x17c4>
			panic("krealloc: Wrong start address for the allocated space... ");
f012cc06:	83 ec 04             	sub    $0x4,%esp
f012cc09:	68 1c bb 13 f0       	push   $0xf013bb1c
f012cc0e:	68 5c 10 00 00       	push   $0x105c
f012cc13:	68 76 a8 13 f0       	push   $0xf013a876
f012cc18:	e8 89 35 fd ff       	call   f01001a6 <_panic>
		if (newAddress != ptr_allocations[1])
f012cc1d:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f012cc23:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f012cc26:	74 17                	je     f012cc3f <test_krealloc+0x17e6>
			panic(
f012cc28:	83 ec 04             	sub    $0x4,%esp
f012cc2b:	68 10 bf 13 f0       	push   $0xf013bf10
f012cc30:	68 5f 10 00 00       	push   $0x105f
f012cc35:	68 76 a8 13 f0       	push   $0xf013a876
f012cc3a:	e8 67 35 fd ff       	call   f01001a6 <_panic>
					"Wrong allocation: krealloc reallocated a new address while there is a sufficient space after it (it should return same VA)");
		if (freeFrames - sys_calculate_free_frames() != 2)
f012cc3f:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012cc42:	e8 77 f7 fd ff       	call   f010c3be <sys_calculate_free_frames>
f012cc47:	29 c3                	sub    %eax,%ebx
f012cc49:	89 d8                	mov    %ebx,%eax
f012cc4b:	83 f8 02             	cmp    $0x2,%eax
f012cc4e:	74 17                	je     f012cc67 <test_krealloc+0x180e>
			panic("krealloc: pages in memory are not loaded correctly");
f012cc50:	83 ec 04             	sub    $0x4,%esp
f012cc53:	68 8c bf 13 f0       	push   $0xf013bf8c
f012cc58:	68 61 10 00 00       	push   $0x1061
f012cc5d:	68 76 a8 13 f0       	push   $0xf013a876
f012cc62:	e8 3f 35 fd ff       	call   f01001a6 <_panic>

		//Reallocate 1st 2 MB to 2 MB + 2 MB
		freeFrames = sys_calculate_free_frames();
f012cc67:	e8 52 f7 fd ff       	call   f010c3be <sys_calculate_free_frames>
f012cc6c:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[4], (4 * Mega - kilo));
f012cc6f:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f012cc75:	83 ec 08             	sub    $0x8,%esp
f012cc78:	68 00 fc 3f 00       	push   $0x3ffc00
f012cc7d:	50                   	push   %eax
f012cc7e:	e8 09 aa fd ff       	call   f010768c <krealloc>
f012cc83:	83 c4 10             	add    $0x10,%esp
f012cc86:	89 45 bc             	mov    %eax,-0x44(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012cc89:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012cc8c:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012cc91:	77 17                	ja     f012ccaa <test_krealloc+0x1851>
			panic("krealloc: Wrong start address for the allocated space... ");
f012cc93:	83 ec 04             	sub    $0x4,%esp
f012cc96:	68 1c bb 13 f0       	push   $0xf013bb1c
f012cc9b:	68 67 10 00 00       	push   $0x1067
f012cca0:	68 76 a8 13 f0       	push   $0xf013a876
f012cca5:	e8 fc 34 fd ff       	call   f01001a6 <_panic>
		if (newAddress != ptr_allocations[4])
f012ccaa:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f012ccb0:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f012ccb3:	74 17                	je     f012cccc <test_krealloc+0x1873>
			panic(
f012ccb5:	83 ec 04             	sub    $0x4,%esp
f012ccb8:	68 10 bf 13 f0       	push   $0xf013bf10
f012ccbd:	68 6a 10 00 00       	push   $0x106a
f012ccc2:	68 76 a8 13 f0       	push   $0xf013a876
f012ccc7:	e8 da 34 fd ff       	call   f01001a6 <_panic>
					"Wrong allocation: krealloc reallocated a new address while there is a sufficient space after it (it should return same VA)");
		//2 MB only for the new size
		if (freeFrames - sys_calculate_free_frames() != 512)
f012cccc:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012cccf:	e8 ea f6 fd ff       	call   f010c3be <sys_calculate_free_frames>
f012ccd4:	29 c3                	sub    %eax,%ebx
f012ccd6:	89 d8                	mov    %ebx,%eax
f012ccd8:	3d 00 02 00 00       	cmp    $0x200,%eax
f012ccdd:	74 17                	je     f012ccf6 <test_krealloc+0x189d>
			panic("krealloc: pages in memory are not loaded correctly");
f012ccdf:	83 ec 04             	sub    $0x4,%esp
f012cce2:	68 8c bf 13 f0       	push   $0xf013bf8c
f012cce7:	68 6d 10 00 00       	push   $0x106d
f012ccec:	68 76 a8 13 f0       	push   $0xf013a876
f012ccf1:	e8 b0 34 fd ff       	call   f01001a6 <_panic>


	}
	cprintf("\b\b\b60%");
f012ccf6:	83 ec 0c             	sub    $0xc,%esp
f012ccf9:	68 d4 b0 13 f0       	push   $0xf013b0d4
f012ccfe:	e8 2a 3f fd ff       	call   f0100c2d <cprintf>
f012cd03:	83 c4 10             	add    $0x10,%esp
	//Test krealloc: Cut & paste
	{
		//Reallocate 1st 2 MB (already reallocated to 4 MB) to 10 MB. It should return new VA
		freeFrames = sys_calculate_free_frames();
f012cd06:	e8 b3 f6 fd ff       	call   f010c3be <sys_calculate_free_frames>
f012cd0b:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[4], (10 * Mega - kilo));
f012cd0e:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f012cd14:	83 ec 08             	sub    $0x8,%esp
f012cd17:	68 00 fc 9f 00       	push   $0x9ffc00
f012cd1c:	50                   	push   %eax
f012cd1d:	e8 6a a9 fd ff       	call   f010768c <krealloc>
f012cd22:	83 c4 10             	add    $0x10,%esp
f012cd25:	89 45 bc             	mov    %eax,-0x44(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012cd28:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012cd2b:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012cd30:	77 17                	ja     f012cd49 <test_krealloc+0x18f0>
			panic("krealloc: Wrong start address for the allocated space... ");
f012cd32:	83 ec 04             	sub    $0x4,%esp
f012cd35:	68 1c bb 13 f0       	push   $0xf013bb1c
f012cd3a:	68 78 10 00 00       	push   $0x1078
f012cd3f:	68 76 a8 13 f0       	push   $0xf013a876
f012cd44:	e8 5d 34 fd ff       	call   f01001a6 <_panic>
		if ((uint32) newAddress != ACTUAL_START + (14 * Mega))
f012cd49:	c7 85 d4 fe ff ff 00 	movl   $0x1000,-0x12c(%ebp)
f012cd50:	10 00 00 
f012cd53:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f012cd59:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012cd5e:	89 85 d0 fe ff ff    	mov    %eax,-0x130(%ebp)
f012cd64:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f012cd6a:	ba 00 00 00 00       	mov    $0x0,%edx
f012cd6f:	f7 b5 d4 fe ff ff    	divl   -0x12c(%ebp)
f012cd75:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f012cd7b:	29 d0                	sub    %edx,%eax
f012cd7d:	89 c1                	mov    %eax,%ecx
f012cd7f:	c7 85 cc fe ff ff 00 	movl   $0x1000,-0x134(%ebp)
f012cd86:	10 00 00 
f012cd89:	a0 bc 0e 6c f0       	mov    0xf06c0ebc,%al
f012cd8e:	0f b6 d0             	movzbl %al,%edx
f012cd91:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f012cd97:	01 d0                	add    %edx,%eax
f012cd99:	48                   	dec    %eax
f012cd9a:	89 85 c8 fe ff ff    	mov    %eax,-0x138(%ebp)
f012cda0:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f012cda6:	ba 00 00 00 00       	mov    $0x0,%edx
f012cdab:	f7 b5 cc fe ff ff    	divl   -0x134(%ebp)
f012cdb1:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f012cdb7:	29 d0                	sub    %edx,%eax
f012cdb9:	01 c1                	add    %eax,%ecx
f012cdbb:	c7 85 c4 fe ff ff 00 	movl   $0x1000,-0x13c(%ebp)
f012cdc2:	10 00 00 
f012cdc5:	a0 bc 0e 6c f0       	mov    0xf06c0ebc,%al
f012cdca:	0f b6 c0             	movzbl %al,%eax
f012cdcd:	c1 e0 04             	shl    $0x4,%eax
f012cdd0:	89 c2                	mov    %eax,%edx
f012cdd2:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f012cdd8:	01 d0                	add    %edx,%eax
f012cdda:	48                   	dec    %eax
f012cddb:	89 85 c0 fe ff ff    	mov    %eax,-0x140(%ebp)
f012cde1:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f012cde7:	ba 00 00 00 00       	mov    $0x0,%edx
f012cdec:	f7 b5 c4 fe ff ff    	divl   -0x13c(%ebp)
f012cdf2:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f012cdf8:	29 d0                	sub    %edx,%eax
f012cdfa:	01 c8                	add    %ecx,%eax
f012cdfc:	8d 90 00 40 e0 f6    	lea    -0x91fc000(%eax),%edx
f012ce02:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012ce05:	39 c2                	cmp    %eax,%edx
f012ce07:	74 18                	je     f012ce21 <test_krealloc+0x19c8>
			panic(
f012ce09:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012ce0c:	50                   	push   %eax
f012ce0d:	68 c0 bf 13 f0       	push   $0xf013bfc0
f012ce12:	68 7c 10 00 00       	push   $0x107c
f012ce17:	68 76 a8 13 f0       	push   $0xf013a876
f012ce1c:	e8 85 33 fd ff       	call   f01001a6 <_panic>
					"krealloc: Wrong start address for reallocated space, NSA = %x\nbbb",
					(uint32 )newAddress);
		if (newAddress == ptr_allocations[4])
f012ce21:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f012ce27:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f012ce2a:	75 17                	jne    f012ce43 <test_krealloc+0x19ea>
			panic(
f012ce2c:	83 ec 04             	sub    $0x4,%esp
f012ce2f:	68 04 c0 13 f0       	push   $0xf013c004
f012ce34:	68 7f 10 00 00       	push   $0x107f
f012ce39:	68 76 a8 13 f0       	push   $0xf013a876
f012ce3e:	e8 63 33 fd ff       	call   f01001a6 <_panic>
					"Wrong allocation: krealloc reallocated at the same address while there is NO sufficient space after it (it should return new VA)");
		//6 MB only for the new size
		if (freeFrames - sys_calculate_free_frames() != 1536)
f012ce43:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012ce46:	e8 73 f5 fd ff       	call   f010c3be <sys_calculate_free_frames>
f012ce4b:	29 c3                	sub    %eax,%ebx
f012ce4d:	89 d8                	mov    %ebx,%eax
f012ce4f:	3d 00 06 00 00       	cmp    $0x600,%eax
f012ce54:	74 17                	je     f012ce6d <test_krealloc+0x1a14>
			panic("krealloc: pages in memory are not loaded correctly");
f012ce56:	83 ec 04             	sub    $0x4,%esp
f012ce59:	68 8c bf 13 f0       	push   $0xf013bf8c
f012ce5e:	68 82 10 00 00       	push   $0x1082
f012ce63:	68 76 a8 13 f0       	push   $0xf013a876
f012ce68:	e8 39 33 fd ff       	call   f01001a6 <_panic>

		ptr_allocations[4] = newAddress;
f012ce6d:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012ce70:	89 85 68 fe ff ff    	mov    %eax,-0x198(%ebp)
		//lastIndices[4] = (10 * Mega - kilo) / sizeof(short) - 1;

		//Reallocate 1st 3 MB to 6 MB
		freeFrames = sys_calculate_free_frames();
f012ce76:	e8 43 f5 fd ff       	call   f010c3be <sys_calculate_free_frames>
f012ce7b:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[6], (6 * Mega - kilo));
f012ce7e:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f012ce84:	83 ec 08             	sub    $0x8,%esp
f012ce87:	68 00 fc 5f 00       	push   $0x5ffc00
f012ce8c:	50                   	push   %eax
f012ce8d:	e8 fa a7 fd ff       	call   f010768c <krealloc>
f012ce92:	83 c4 10             	add    $0x10,%esp
f012ce95:	89 45 bc             	mov    %eax,-0x44(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012ce98:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012ce9b:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012cea0:	77 17                	ja     f012ceb9 <test_krealloc+0x1a60>
			panic("krealloc: Wrong start address for the allocated space... ");
f012cea2:	83 ec 04             	sub    $0x4,%esp
f012cea5:	68 1c bb 13 f0       	push   $0xf013bb1c
f012ceaa:	68 8b 10 00 00       	push   $0x108b
f012ceaf:	68 76 a8 13 f0       	push   $0xf013a876
f012ceb4:	e8 ed 32 fd ff       	call   f01001a6 <_panic>
		if (newAddress != ptr_allocations[6])
f012ceb9:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f012cebf:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f012cec2:	74 17                	je     f012cedb <test_krealloc+0x1a82>
			panic(
f012cec4:	83 ec 04             	sub    $0x4,%esp
f012cec7:	68 10 bf 13 f0       	push   $0xf013bf10
f012cecc:	68 8e 10 00 00       	push   $0x108e
f012ced1:	68 76 a8 13 f0       	push   $0xf013a876
f012ced6:	e8 cb 32 fd ff       	call   f01001a6 <_panic>
					"Wrong allocation: krealloc reallocated a new address while there is a sufficient space after it (it should return same VA)");
		//3 MB only for the new size
		if (freeFrames - sys_calculate_free_frames() != 768)
f012cedb:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012cede:	e8 db f4 fd ff       	call   f010c3be <sys_calculate_free_frames>
f012cee3:	29 c3                	sub    %eax,%ebx
f012cee5:	89 d8                	mov    %ebx,%eax
f012cee7:	3d 00 03 00 00       	cmp    $0x300,%eax
f012ceec:	74 17                	je     f012cf05 <test_krealloc+0x1aac>
			panic("krealloc: pages in memory are not loaded correctly");
f012ceee:	83 ec 04             	sub    $0x4,%esp
f012cef1:	68 8c bf 13 f0       	push   $0xf013bf8c
f012cef6:	68 91 10 00 00       	push   $0x1091
f012cefb:	68 76 a8 13 f0       	push   $0xf013a876
f012cf00:	e8 a1 32 fd ff       	call   f01001a6 <_panic>

		//Reallocate 1st 3 MB (already reallocated to 6 MB) to 20 MB. It should return new VA

		freeFrames = sys_calculate_free_frames();
f012cf05:	e8 b4 f4 fd ff       	call   f010c3be <sys_calculate_free_frames>
f012cf0a:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[6], (20 * Mega - kilo));
f012cf0d:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f012cf13:	83 ec 08             	sub    $0x8,%esp
f012cf16:	68 00 fc 3f 01       	push   $0x13ffc00
f012cf1b:	50                   	push   %eax
f012cf1c:	e8 6b a7 fd ff       	call   f010768c <krealloc>
f012cf21:	83 c4 10             	add    $0x10,%esp
f012cf24:	89 45 bc             	mov    %eax,-0x44(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012cf27:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012cf2a:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012cf2f:	77 17                	ja     f012cf48 <test_krealloc+0x1aef>
			panic("krealloc: Wrong start address for the allocated space... ");
f012cf31:	83 ec 04             	sub    $0x4,%esp
f012cf34:	68 1c bb 13 f0       	push   $0xf013bb1c
f012cf39:	68 98 10 00 00       	push   $0x1098
f012cf3e:	68 76 a8 13 f0       	push   $0xf013a876
f012cf43:	e8 5e 32 fd ff       	call   f01001a6 <_panic>
		if (newAddress == ptr_allocations[6])
f012cf48:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f012cf4e:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f012cf51:	75 17                	jne    f012cf6a <test_krealloc+0x1b11>
			panic(
f012cf53:	83 ec 04             	sub    $0x4,%esp
f012cf56:	68 04 c0 13 f0       	push   $0xf013c004
f012cf5b:	68 9b 10 00 00       	push   $0x109b
f012cf60:	68 76 a8 13 f0       	push   $0xf013a876
f012cf65:	e8 3c 32 fd ff       	call   f01001a6 <_panic>
					"Wrong allocation: krealloc reallocated at the same address while there is NO sufficient space after it (it should return new VA)");
		if ((uint32) newAddress != ACTUAL_START + (24 * Mega))
f012cf6a:	c7 85 bc fe ff ff 00 	movl   $0x1000,-0x144(%ebp)
f012cf71:	10 00 00 
f012cf74:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f012cf7a:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012cf7f:	89 85 b8 fe ff ff    	mov    %eax,-0x148(%ebp)
f012cf85:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f012cf8b:	ba 00 00 00 00       	mov    $0x0,%edx
f012cf90:	f7 b5 bc fe ff ff    	divl   -0x144(%ebp)
f012cf96:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f012cf9c:	29 d0                	sub    %edx,%eax
f012cf9e:	89 c1                	mov    %eax,%ecx
f012cfa0:	c7 85 b4 fe ff ff 00 	movl   $0x1000,-0x14c(%ebp)
f012cfa7:	10 00 00 
f012cfaa:	a0 bc 0e 6c f0       	mov    0xf06c0ebc,%al
f012cfaf:	0f b6 d0             	movzbl %al,%edx
f012cfb2:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f012cfb8:	01 d0                	add    %edx,%eax
f012cfba:	48                   	dec    %eax
f012cfbb:	89 85 b0 fe ff ff    	mov    %eax,-0x150(%ebp)
f012cfc1:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f012cfc7:	ba 00 00 00 00       	mov    $0x0,%edx
f012cfcc:	f7 b5 b4 fe ff ff    	divl   -0x14c(%ebp)
f012cfd2:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f012cfd8:	29 d0                	sub    %edx,%eax
f012cfda:	01 c1                	add    %eax,%ecx
f012cfdc:	c7 85 ac fe ff ff 00 	movl   $0x1000,-0x154(%ebp)
f012cfe3:	10 00 00 
f012cfe6:	a0 bc 0e 6c f0       	mov    0xf06c0ebc,%al
f012cfeb:	0f b6 c0             	movzbl %al,%eax
f012cfee:	c1 e0 04             	shl    $0x4,%eax
f012cff1:	89 c2                	mov    %eax,%edx
f012cff3:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f012cff9:	01 d0                	add    %edx,%eax
f012cffb:	48                   	dec    %eax
f012cffc:	89 85 a8 fe ff ff    	mov    %eax,-0x158(%ebp)
f012d002:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f012d008:	ba 00 00 00 00       	mov    $0x0,%edx
f012d00d:	f7 b5 ac fe ff ff    	divl   -0x154(%ebp)
f012d013:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f012d019:	29 d0                	sub    %edx,%eax
f012d01b:	01 c8                	add    %ecx,%eax
f012d01d:	8d 90 00 40 80 f7    	lea    -0x87fc000(%eax),%edx
f012d023:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012d026:	39 c2                	cmp    %eax,%edx
f012d028:	74 17                	je     f012d041 <test_krealloc+0x1be8>
			panic("krealloc: Wrong start address for reallocated space");
f012d02a:	83 ec 04             	sub    $0x4,%esp
f012d02d:	68 88 c0 13 f0       	push   $0xf013c088
f012d032:	68 9d 10 00 00       	push   $0x109d
f012d037:	68 76 a8 13 f0       	push   $0xf013a876
f012d03c:	e8 65 31 fd ff       	call   f01001a6 <_panic>
		//3 MB only for the new size
		if (freeFrames - sys_calculate_free_frames() != 3584)
f012d041:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012d044:	e8 75 f3 fd ff       	call   f010c3be <sys_calculate_free_frames>
f012d049:	29 c3                	sub    %eax,%ebx
f012d04b:	89 d8                	mov    %ebx,%eax
f012d04d:	3d 00 0e 00 00       	cmp    $0xe00,%eax
f012d052:	74 17                	je     f012d06b <test_krealloc+0x1c12>
			panic("krealloc: pages in memory are not loaded correctly");
f012d054:	83 ec 04             	sub    $0x4,%esp
f012d057:	68 8c bf 13 f0       	push   $0xf013bf8c
f012d05c:	68 a0 10 00 00       	push   $0x10a0
f012d061:	68 76 a8 13 f0       	push   $0xf013a876
f012d066:	e8 3b 31 fd ff       	call   f01001a6 <_panic>

		ptr_allocations[6] = newAddress;
f012d06b:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012d06e:	89 85 70 fe ff ff    	mov    %eax,-0x190(%ebp)

		//Test read write access for the new allocated size of 2nd 1 MB
		ptr = (char*) ptr_allocations[1];
f012d074:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f012d07a:	89 85 ec fe ff ff    	mov    %eax,-0x114(%ebp)
		int i;
		sums[0] = 0;
f012d080:	c7 85 b8 fd ff ff 00 	movl   $0x0,-0x248(%ebp)
f012d087:	00 00 00 
		for (i = 0; i <= lastIndices[1]; ++i) {
f012d08a:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
f012d091:	eb 21                	jmp    f012d0b4 <test_krealloc+0x1c5b>
			sums[0] += ptr[i];
f012d093:	8b 95 b8 fd ff ff    	mov    -0x248(%ebp),%edx
f012d099:	8b 4d d8             	mov    -0x28(%ebp),%ecx
f012d09c:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f012d0a2:	01 c8                	add    %ecx,%eax
f012d0a4:	8a 00                	mov    (%eax),%al
f012d0a6:	0f be c0             	movsbl %al,%eax
f012d0a9:	01 d0                	add    %edx,%eax
f012d0ab:	89 85 b8 fd ff ff    	mov    %eax,-0x248(%ebp)

		//Test read write access for the new allocated size of 2nd 1 MB
		ptr = (char*) ptr_allocations[1];
		int i;
		sums[0] = 0;
		for (i = 0; i <= lastIndices[1]; ++i) {
f012d0b1:	ff 45 d8             	incl   -0x28(%ebp)
f012d0b4:	8b 85 0c fe ff ff    	mov    -0x1f4(%ebp),%eax
f012d0ba:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f012d0bd:	7d d4                	jge    f012d093 <test_krealloc+0x1c3a>
			sums[0] += ptr[i];

		}
		//cprintf("sum for 2nd 1 MB = %d LIM1 = %d\n", sums[0], (lastIndices[1] - 1));
		if (sums[0] != (lastIndices[1] + 1) * 2)
f012d0bf:	8b 85 b8 fd ff ff    	mov    -0x248(%ebp),%eax
f012d0c5:	8b 95 0c fe ff ff    	mov    -0x1f4(%ebp),%edx
f012d0cb:	42                   	inc    %edx
f012d0cc:	01 d2                	add    %edx,%edx
f012d0ce:	39 d0                	cmp    %edx,%eax
f012d0d0:	74 17                	je     f012d0e9 <test_krealloc+0x1c90>
			panic("krealloc: invalid read after re-allocations");
f012d0d2:	83 ec 04             	sub    $0x4,%esp
f012d0d5:	68 bc c0 13 f0       	push   $0xf013c0bc
f012d0da:	68 ae 10 00 00       	push   $0x10ae
f012d0df:	68 76 a8 13 f0       	push   $0xf013a876
f012d0e4:	e8 bd 30 fd ff       	call   f01001a6 <_panic>

		//Test read write access for the new allocated size of 1st 3 MB
		structArr = (struct MyStruct*) ptr_allocations[6];
f012d0e9:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f012d0ef:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)

		sums[0] = 0;
f012d0f5:	c7 85 b8 fd ff ff 00 	movl   $0x0,-0x248(%ebp)
f012d0fc:	00 00 00 
		sums[1] = 0;
f012d0ff:	c7 85 bc fd ff ff 00 	movl   $0x0,-0x244(%ebp)
f012d106:	00 00 00 
		sums[2] = 0;
f012d109:	c7 85 c0 fd ff ff 00 	movl   $0x0,-0x240(%ebp)
f012d110:	00 00 00 
		for (i = 0; i <= lastIndices[6]; ++i) {
f012d113:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
f012d11a:	eb 70                	jmp    f012d18c <test_krealloc+0x1d33>
			sums[0] += structArr[i].a;
f012d11c:	8b 95 b8 fd ff ff    	mov    -0x248(%ebp),%edx
f012d122:	8b 45 d8             	mov    -0x28(%ebp),%eax
f012d125:	8d 0c c5 00 00 00 00 	lea    0x0(,%eax,8),%ecx
f012d12c:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012d132:	01 c8                	add    %ecx,%eax
f012d134:	8a 00                	mov    (%eax),%al
f012d136:	0f be c0             	movsbl %al,%eax
f012d139:	01 d0                	add    %edx,%eax
f012d13b:	89 85 b8 fd ff ff    	mov    %eax,-0x248(%ebp)
			sums[1] += structArr[i].b;
f012d141:	8b 95 bc fd ff ff    	mov    -0x244(%ebp),%edx
f012d147:	8b 45 d8             	mov    -0x28(%ebp),%eax
f012d14a:	8d 0c c5 00 00 00 00 	lea    0x0(,%eax,8),%ecx
f012d151:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012d157:	01 c8                	add    %ecx,%eax
f012d159:	66 8b 40 02          	mov    0x2(%eax),%ax
f012d15d:	98                   	cwtl   
f012d15e:	01 d0                	add    %edx,%eax
f012d160:	89 85 bc fd ff ff    	mov    %eax,-0x244(%ebp)
			sums[2] += structArr[i].c;
f012d166:	8b 95 c0 fd ff ff    	mov    -0x240(%ebp),%edx
f012d16c:	8b 45 d8             	mov    -0x28(%ebp),%eax
f012d16f:	8d 0c c5 00 00 00 00 	lea    0x0(,%eax,8),%ecx
f012d176:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012d17c:	01 c8                	add    %ecx,%eax
f012d17e:	8b 40 04             	mov    0x4(%eax),%eax
f012d181:	01 d0                	add    %edx,%eax
f012d183:	89 85 c0 fd ff ff    	mov    %eax,-0x240(%ebp)
		structArr = (struct MyStruct*) ptr_allocations[6];

		sums[0] = 0;
		sums[1] = 0;
		sums[2] = 0;
		for (i = 0; i <= lastIndices[6]; ++i) {
f012d189:	ff 45 d8             	incl   -0x28(%ebp)
f012d18c:	8b 85 20 fe ff ff    	mov    -0x1e0(%ebp),%eax
f012d192:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f012d195:	7d 85                	jge    f012d11c <test_krealloc+0x1cc3>
			sums[1] += structArr[i].b;
			sums[2] += structArr[i].c;

		}
		//cprintf("sum for 2nd 1 MB = %d LIM1 = %d\n", sums[0], (lastIndices[1] - 1));
		if (sums[0] != (lastIndices[6] + 1) * 7
f012d197:	8b 8d b8 fd ff ff    	mov    -0x248(%ebp),%ecx
f012d19d:	8b 85 20 fe ff ff    	mov    -0x1e0(%ebp),%eax
f012d1a3:	8d 50 01             	lea    0x1(%eax),%edx
f012d1a6:	89 d0                	mov    %edx,%eax
f012d1a8:	01 c0                	add    %eax,%eax
f012d1aa:	01 d0                	add    %edx,%eax
f012d1ac:	01 c0                	add    %eax,%eax
f012d1ae:	01 d0                	add    %edx,%eax
f012d1b0:	39 c1                	cmp    %eax,%ecx
f012d1b2:	75 3a                	jne    f012d1ee <test_krealloc+0x1d95>
				|| sums[1] != (lastIndices[6] + 1) * 7
f012d1b4:	8b 8d bc fd ff ff    	mov    -0x244(%ebp),%ecx
f012d1ba:	8b 85 20 fe ff ff    	mov    -0x1e0(%ebp),%eax
f012d1c0:	8d 50 01             	lea    0x1(%eax),%edx
f012d1c3:	89 d0                	mov    %edx,%eax
f012d1c5:	01 c0                	add    %eax,%eax
f012d1c7:	01 d0                	add    %edx,%eax
f012d1c9:	01 c0                	add    %eax,%eax
f012d1cb:	01 d0                	add    %edx,%eax
f012d1cd:	39 c1                	cmp    %eax,%ecx
f012d1cf:	75 1d                	jne    f012d1ee <test_krealloc+0x1d95>
				|| sums[2] != (lastIndices[6] + 1) * 7)
f012d1d1:	8b 8d c0 fd ff ff    	mov    -0x240(%ebp),%ecx
f012d1d7:	8b 85 20 fe ff ff    	mov    -0x1e0(%ebp),%eax
f012d1dd:	8d 50 01             	lea    0x1(%eax),%edx
f012d1e0:	89 d0                	mov    %edx,%eax
f012d1e2:	01 c0                	add    %eax,%eax
f012d1e4:	01 d0                	add    %edx,%eax
f012d1e6:	01 c0                	add    %eax,%eax
f012d1e8:	01 d0                	add    %edx,%eax
f012d1ea:	39 c1                	cmp    %eax,%ecx
f012d1ec:	74 17                	je     f012d205 <test_krealloc+0x1dac>
			panic("krealloc: invalid read after re-allocations");
f012d1ee:	83 ec 04             	sub    $0x4,%esp
f012d1f1:	68 bc c0 13 f0       	push   $0xf013c0bc
f012d1f6:	68 c0 10 00 00       	push   $0x10c0
f012d1fb:	68 76 a8 13 f0       	push   $0xf013a876
f012d200:	e8 a1 2f fd ff       	call   f01001a6 <_panic>

		//Test read write access for the new allocated size of 1st 2 MB
		shortArr = (short*) ptr_allocations[4];
f012d205:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f012d20b:	89 85 e4 fe ff ff    	mov    %eax,-0x11c(%ebp)

		sums[0] = 0;
f012d211:	c7 85 b8 fd ff ff 00 	movl   $0x0,-0x248(%ebp)
f012d218:	00 00 00 
		for (i = 0; i <= lastIndices[4]; ++i) {
f012d21b:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
f012d222:	eb 24                	jmp    f012d248 <test_krealloc+0x1def>
			sums[0] += shortArr[i];
f012d224:	8b 95 b8 fd ff ff    	mov    -0x248(%ebp),%edx
f012d22a:	8b 45 d8             	mov    -0x28(%ebp),%eax
f012d22d:	01 c0                	add    %eax,%eax
f012d22f:	89 c1                	mov    %eax,%ecx
f012d231:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f012d237:	01 c8                	add    %ecx,%eax
f012d239:	66 8b 00             	mov    (%eax),%ax
f012d23c:	98                   	cwtl   
f012d23d:	01 d0                	add    %edx,%eax
f012d23f:	89 85 b8 fd ff ff    	mov    %eax,-0x248(%ebp)

		//Test read write access for the new allocated size of 1st 2 MB
		shortArr = (short*) ptr_allocations[4];

		sums[0] = 0;
		for (i = 0; i <= lastIndices[4]; ++i) {
f012d245:	ff 45 d8             	incl   -0x28(%ebp)
f012d248:	8b 85 18 fe ff ff    	mov    -0x1e8(%ebp),%eax
f012d24e:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f012d251:	7d d1                	jge    f012d224 <test_krealloc+0x1dcb>
			sums[0] += shortArr[i];
		}
		if (sums[0] != (lastIndices[4] + 1) * 5)
f012d253:	8b 95 b8 fd ff ff    	mov    -0x248(%ebp),%edx
f012d259:	8b 85 18 fe ff ff    	mov    -0x1e8(%ebp),%eax
f012d25f:	8d 48 01             	lea    0x1(%eax),%ecx
f012d262:	89 c8                	mov    %ecx,%eax
f012d264:	c1 e0 02             	shl    $0x2,%eax
f012d267:	01 c8                	add    %ecx,%eax
f012d269:	39 c2                	cmp    %eax,%edx
f012d26b:	74 17                	je     f012d284 <test_krealloc+0x1e2b>
			panic("krealloc: invalid read after re-allocations");
f012d26d:	83 ec 04             	sub    $0x4,%esp
f012d270:	68 bc c0 13 f0       	push   $0xf013c0bc
f012d275:	68 ca 10 00 00       	push   $0x10ca
f012d27a:	68 76 a8 13 f0       	push   $0xf013a876
f012d27f:	e8 22 2f fd ff       	call   f01001a6 <_panic>

		//Test krealloc with size = 0 after krealloc 1st 3 MB to 20 MB
		freeFrames = sys_calculate_free_frames();
f012d284:	e8 35 f1 fd ff       	call   f010c3be <sys_calculate_free_frames>
f012d289:	89 45 b8             	mov    %eax,-0x48(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f012d28c:	e8 fb 69 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f012d291:	89 85 dc fe ff ff    	mov    %eax,-0x124(%ebp)
		krealloc(ptr_allocations[6], 0);
f012d297:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f012d29d:	83 ec 08             	sub    $0x8,%esp
f012d2a0:	6a 00                	push   $0x0
f012d2a2:	50                   	push   %eax
f012d2a3:	e8 e4 a3 fd ff       	call   f010768c <krealloc>
f012d2a8:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0)
f012d2ab:	e8 dc 69 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f012d2b0:	3b 85 dc fe ff ff    	cmp    -0x124(%ebp),%eax
f012d2b6:	74 17                	je     f012d2cf <test_krealloc+0x1e76>
			panic(
f012d2b8:	83 ec 04             	sub    $0x4,%esp
f012d2bb:	68 90 a8 13 f0       	push   $0xf013a890
f012d2c0:	68 d2 10 00 00       	push   $0x10d2
f012d2c5:	68 76 a8 13 f0       	push   $0xf013a876
f012d2ca:	e8 d7 2e fd ff       	call   f01001a6 <_panic>
					"Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((sys_calculate_free_frames() - freeFrames) != 20 * Mega / PAGE_SIZE)
f012d2cf:	e8 ea f0 fd ff       	call   f010c3be <sys_calculate_free_frames>
f012d2d4:	89 c2                	mov    %eax,%edx
f012d2d6:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012d2d9:	29 c2                	sub    %eax,%edx
f012d2db:	89 d0                	mov    %edx,%eax
f012d2dd:	3d 00 14 00 00       	cmp    $0x1400,%eax
f012d2e2:	74 17                	je     f012d2fb <test_krealloc+0x1ea2>
			panic("krealloc: pages in memory are not freed correctly");
f012d2e4:	83 ec 04             	sub    $0x4,%esp
f012d2e7:	68 4c bd 13 f0       	push   $0xf013bd4c
f012d2ec:	68 d4 10 00 00       	push   $0x10d4
f012d2f1:	68 76 a8 13 f0       	push   $0xf013a876
f012d2f6:	e8 ab 2e fd ff       	call   f01001a6 <_panic>

		//Test kfree after krealloc 1st 2 MB to 10 MB
		freeFrames = sys_calculate_free_frames();
f012d2fb:	e8 be f0 fd ff       	call   f010c3be <sys_calculate_free_frames>
f012d300:	89 45 b8             	mov    %eax,-0x48(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f012d303:	e8 84 69 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f012d308:	89 85 dc fe ff ff    	mov    %eax,-0x124(%ebp)
		kfree(ptr_allocations[4]);
f012d30e:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f012d314:	83 ec 0c             	sub    $0xc,%esp
f012d317:	50                   	push   %eax
f012d318:	e8 c1 a2 fd ff       	call   f01075de <kfree>
f012d31d:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0)
f012d320:	e8 67 69 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f012d325:	3b 85 dc fe ff ff    	cmp    -0x124(%ebp),%eax
f012d32b:	74 17                	je     f012d344 <test_krealloc+0x1eeb>
			panic(
f012d32d:	83 ec 04             	sub    $0x4,%esp
f012d330:	68 90 a8 13 f0       	push   $0xf013a890
f012d335:	68 dc 10 00 00       	push   $0x10dc
f012d33a:	68 76 a8 13 f0       	push   $0xf013a876
f012d33f:	e8 62 2e fd ff       	call   f01001a6 <_panic>
					"Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((sys_calculate_free_frames() - freeFrames) != 10 * Mega / PAGE_SIZE)
f012d344:	e8 75 f0 fd ff       	call   f010c3be <sys_calculate_free_frames>
f012d349:	89 c2                	mov    %eax,%edx
f012d34b:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012d34e:	29 c2                	sub    %eax,%edx
f012d350:	89 d0                	mov    %edx,%eax
f012d352:	3d 00 0a 00 00       	cmp    $0xa00,%eax
f012d357:	74 17                	je     f012d370 <test_krealloc+0x1f17>
			panic("krealloc: pages in memory are not freed correctly");
f012d359:	83 ec 04             	sub    $0x4,%esp
f012d35c:	68 4c bd 13 f0       	push   $0xf013bd4c
f012d361:	68 de 10 00 00       	push   $0x10de
f012d366:	68 76 a8 13 f0       	push   $0xf013a876
f012d36b:	e8 36 2e fd ff       	call   f01001a6 <_panic>

		//check tables	[15%]
		{
			long long va;
			for (va = KERNEL_HEAP_START; va < (long long) KERNEL_HEAP_MAX; va +=
f012d370:	c7 45 d0 00 00 00 f6 	movl   $0xf6000000,-0x30(%ebp)
f012d377:	c7 45 d4 00 00 00 00 	movl   $0x0,-0x2c(%ebp)
f012d37e:	eb 48                	jmp    f012d3c8 <test_krealloc+0x1f6f>
			PTSIZE)
			{
				uint32 *ptr_table;
				get_page_table(ptr_page_directory,  (uint32) va,
f012d380:	8b 55 d0             	mov    -0x30(%ebp),%edx
f012d383:	a1 b8 0e 6c f0       	mov    0xf06c0eb8,%eax
f012d388:	83 ec 04             	sub    $0x4,%esp
f012d38b:	8d 8d b0 fd ff ff    	lea    -0x250(%ebp),%ecx
f012d391:	51                   	push   %ecx
f012d392:	52                   	push   %edx
f012d393:	50                   	push   %eax
f012d394:	e8 d0 95 fd ff       	call   f0106969 <get_page_table>
f012d399:	83 c4 10             	add    $0x10,%esp
						&ptr_table);
				if (ptr_table == NULL) {
f012d39c:	8b 85 b0 fd ff ff    	mov    -0x250(%ebp),%eax
f012d3a2:	85 c0                	test   %eax,%eax
f012d3a4:	75 17                	jne    f012d3bd <test_krealloc+0x1f64>
					panic(
f012d3a6:	83 ec 04             	sub    $0x4,%esp
f012d3a9:	68 78 b1 13 f0       	push   $0xf013b178
f012d3ae:	68 eb 10 00 00       	push   $0x10eb
f012d3b3:	68 76 a8 13 f0       	push   $0xf013a876
f012d3b8:	e8 e9 2d fd ff       	call   f01001a6 <_panic>
			panic("krealloc: pages in memory are not freed correctly");

		//check tables	[15%]
		{
			long long va;
			for (va = KERNEL_HEAP_START; va < (long long) KERNEL_HEAP_MAX; va +=
f012d3bd:	81 45 d0 00 00 40 00 	addl   $0x400000,-0x30(%ebp)
f012d3c4:	83 55 d4 00          	adcl   $0x0,-0x2c(%ebp)
f012d3c8:	83 7d d4 00          	cmpl   $0x0,-0x2c(%ebp)
f012d3cc:	78 b2                	js     f012d380 <test_krealloc+0x1f27>
f012d3ce:	83 7d d4 00          	cmpl   $0x0,-0x2c(%ebp)
f012d3d2:	7f 09                	jg     f012d3dd <test_krealloc+0x1f84>
f012d3d4:	81 7d d0 ff ef ff ff 	cmpl   $0xffffefff,-0x30(%ebp)
f012d3db:	76 a3                	jbe    f012d380 <test_krealloc+0x1f27>
			}
		}

	}

	cprintf("\b\b\b100%\n");
f012d3dd:	83 ec 0c             	sub    $0xc,%esp
f012d3e0:	68 5a aa 13 f0       	push   $0xf013aa5a
f012d3e5:	e8 43 38 fd ff       	call   f0100c2d <cprintf>
f012d3ea:	83 c4 10             	add    $0x10,%esp

	cprintf("\nCongratulations!! test krealloc completed successfully.\n");
f012d3ed:	83 ec 0c             	sub    $0xc,%esp
f012d3f0:	68 e8 c0 13 f0       	push   $0xf013c0e8
f012d3f5:	e8 33 38 fd ff       	call   f0100c2d <cprintf>
f012d3fa:	83 c4 10             	add    $0x10,%esp
	return 0;
f012d3fd:	b8 00 00 00 00       	mov    $0x0,%eax
}
f012d402:	8d 65 f8             	lea    -0x8(%ebp),%esp
f012d405:	5b                   	pop    %ebx
f012d406:	5f                   	pop    %edi
f012d407:	5d                   	pop    %ebp
f012d408:	c3                   	ret    

f012d409 <test_krealloc_BF>:


int test_krealloc_BF() {
f012d409:	55                   	push   %ebp
f012d40a:	89 e5                	mov    %esp,%ebp
f012d40c:	57                   	push   %edi
f012d40d:	53                   	push   %ebx
f012d40e:	81 ec 60 02 00 00    	sub    $0x260,%esp
	cprintf("==============================================\n");
f012d414:	83 ec 0c             	sub    $0xc,%esp
f012d417:	68 b8 a7 13 f0       	push   $0xf013a7b8
f012d41c:	e8 0c 38 fd ff       	call   f0100c2d <cprintf>
f012d421:	83 c4 10             	add    $0x10,%esp
	cprintf(
f012d424:	83 ec 0c             	sub    $0xc,%esp
f012d427:	68 e8 a7 13 f0       	push   $0xf013a7e8
f012d42c:	e8 fc 37 fd ff       	call   f0100c2d <cprintf>
f012d431:	83 c4 10             	add    $0x10,%esp
			"MAKE SURE to have a FRESH RUN for this test\n(i.e. don't run any program/test before it)\n");
	cprintf("==============================================\n");
f012d434:	83 ec 0c             	sub    $0xc,%esp
f012d437:	68 b8 a7 13 f0       	push   $0xf013a7b8
f012d43c:	e8 ec 37 fd ff       	call   f0100c2d <cprintf>
f012d441:	83 c4 10             	add    $0x10,%esp
	char minByte = 1 << 7;
f012d444:	c6 45 cf 80          	movb   $0x80,-0x31(%ebp)
	char maxByte = 0x7F;
f012d448:	c6 45 ce 7f          	movb   $0x7f,-0x32(%ebp)
	short minShort = 1 << 15;
f012d44c:	66 c7 45 cc 00 80    	movw   $0x8000,-0x34(%ebp)
	short maxShort = 0x7FFF;
f012d452:	66 c7 45 ca ff 7f    	movw   $0x7fff,-0x36(%ebp)
	int minInt = 1 << 31;
f012d458:	c7 45 c4 00 00 00 80 	movl   $0x80000000,-0x3c(%ebp)
	int maxInt = 0x7FFFFFFF;
f012d45f:	c7 45 c0 ff ff ff 7f 	movl   $0x7fffffff,-0x40(%ebp)
	int *intArr;
	struct MyStruct *structArr;
	int lastIndexOfByte, lastIndexOfByte2, lastIndexOfShort, lastIndexOfShort2,
			lastIndexOfInt, lastIndexOfStruct;
	//[1] Test calling krealloc with VA = NULL. It should call malloc
	void* ptr_allocations[20] = { 0 };
f012d466:	8d 95 40 fe ff ff    	lea    -0x1c0(%ebp),%edx
f012d46c:	b9 14 00 00 00       	mov    $0x14,%ecx
f012d471:	b8 00 00 00 00       	mov    $0x0,%eax
f012d476:	89 d7                	mov    %edx,%edi
f012d478:	f3 ab                	rep stos %eax,%es:(%edi)
	char* ptr;
	void* newAddress = NULL;
f012d47a:	c7 45 bc 00 00 00 00 	movl   $0x0,-0x44(%ebp)
	int freeDiskFrames;


	int lastIndices[20] = { 0 };
f012d481:	8d 95 f0 fd ff ff    	lea    -0x210(%ebp),%edx
f012d487:	b9 14 00 00 00       	mov    $0x14,%ecx
f012d48c:	b8 00 00 00 00       	mov    $0x0,%eax
f012d491:	89 d7                	mov    %edx,%edi
f012d493:	f3 ab                	rep stos %eax,%es:(%edi)
	int sums[20] = { 0 };
f012d495:	8d 95 a0 fd ff ff    	lea    -0x260(%ebp),%edx
f012d49b:	b9 14 00 00 00       	mov    $0x14,%ecx
f012d4a0:	b8 00 00 00 00       	mov    $0x0,%eax
f012d4a5:	89 d7                	mov    %edx,%edi
f012d4a7:	f3 ab                	rep stos %eax,%es:(%edi)
	int freeFrames;
	//[1] Allocate all
	{
		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames();
f012d4a9:	e8 10 ef fd ff       	call   f010c3be <sys_calculate_free_frames>
f012d4ae:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[0] = krealloc(NULL, 1 * Mega - kilo);
f012d4b1:	83 ec 08             	sub    $0x8,%esp
f012d4b4:	68 00 fc 0f 00       	push   $0xffc00
f012d4b9:	6a 00                	push   $0x0
f012d4bb:	e8 cc a1 fd ff       	call   f010768c <krealloc>
f012d4c0:	83 c4 10             	add    $0x10,%esp
f012d4c3:	89 85 40 fe ff ff    	mov    %eax,-0x1c0(%ebp)
		if ((uint32) ptr_allocations[0] < (KERNEL_HEAP_START))
f012d4c9:	8b 85 40 fe ff ff    	mov    -0x1c0(%ebp),%eax
f012d4cf:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012d4d4:	77 17                	ja     f012d4ed <test_krealloc_BF+0xe4>
			panic("krealloc: Wrong start address for the allocated space... ");
f012d4d6:	83 ec 04             	sub    $0x4,%esp
f012d4d9:	68 1c bb 13 f0       	push   $0xf013bb1c
f012d4de:	68 1a 11 00 00       	push   $0x111a
f012d4e3:	68 76 a8 13 f0       	push   $0xf013a876
f012d4e8:	e8 b9 2c fd ff       	call   f01001a6 <_panic>
		if ((uint32) ptr_allocations[0] != ACTUAL_START)
f012d4ed:	8b 85 40 fe ff ff    	mov    -0x1c0(%ebp),%eax
f012d4f3:	89 c1                	mov    %eax,%ecx
f012d4f5:	c7 45 b4 00 10 00 00 	movl   $0x1000,-0x4c(%ebp)
f012d4fc:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f012d4ff:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012d504:	89 45 b0             	mov    %eax,-0x50(%ebp)
f012d507:	8b 45 b0             	mov    -0x50(%ebp),%eax
f012d50a:	ba 00 00 00 00       	mov    $0x0,%edx
f012d50f:	f7 75 b4             	divl   -0x4c(%ebp)
f012d512:	8b 45 b0             	mov    -0x50(%ebp),%eax
f012d515:	29 d0                	sub    %edx,%eax
f012d517:	89 c3                	mov    %eax,%ebx
f012d519:	c7 45 ac 00 10 00 00 	movl   $0x1000,-0x54(%ebp)
f012d520:	a0 bc 0e 6c f0       	mov    0xf06c0ebc,%al
f012d525:	0f b6 d0             	movzbl %al,%edx
f012d528:	8b 45 ac             	mov    -0x54(%ebp),%eax
f012d52b:	01 d0                	add    %edx,%eax
f012d52d:	48                   	dec    %eax
f012d52e:	89 45 a8             	mov    %eax,-0x58(%ebp)
f012d531:	8b 45 a8             	mov    -0x58(%ebp),%eax
f012d534:	ba 00 00 00 00       	mov    $0x0,%edx
f012d539:	f7 75 ac             	divl   -0x54(%ebp)
f012d53c:	8b 45 a8             	mov    -0x58(%ebp),%eax
f012d53f:	29 d0                	sub    %edx,%eax
f012d541:	01 c3                	add    %eax,%ebx
f012d543:	c7 45 a4 00 10 00 00 	movl   $0x1000,-0x5c(%ebp)
f012d54a:	a0 bc 0e 6c f0       	mov    0xf06c0ebc,%al
f012d54f:	0f b6 c0             	movzbl %al,%eax
f012d552:	c1 e0 04             	shl    $0x4,%eax
f012d555:	89 c2                	mov    %eax,%edx
f012d557:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f012d55a:	01 d0                	add    %edx,%eax
f012d55c:	48                   	dec    %eax
f012d55d:	89 45 a0             	mov    %eax,-0x60(%ebp)
f012d560:	8b 45 a0             	mov    -0x60(%ebp),%eax
f012d563:	ba 00 00 00 00       	mov    $0x0,%edx
f012d568:	f7 75 a4             	divl   -0x5c(%ebp)
f012d56b:	8b 45 a0             	mov    -0x60(%ebp),%eax
f012d56e:	29 d0                	sub    %edx,%eax
f012d570:	01 d8                	add    %ebx,%eax
f012d572:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f012d577:	39 c1                	cmp    %eax,%ecx
f012d579:	74 17                	je     f012d592 <test_krealloc_BF+0x189>
			panic("krealloc: Wrong start address for allocated space");
f012d57b:	83 ec 04             	sub    $0x4,%esp
f012d57e:	68 58 bb 13 f0       	push   $0xf013bb58
f012d583:	68 1c 11 00 00       	push   $0x111c
f012d588:	68 76 a8 13 f0       	push   $0xf013a876
f012d58d:	e8 14 2c fd ff       	call   f01001a6 <_panic>

		if ((freeFrames - sys_calculate_free_frames()) != 256)
f012d592:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012d595:	e8 24 ee fd ff       	call   f010c3be <sys_calculate_free_frames>
f012d59a:	29 c3                	sub    %eax,%ebx
f012d59c:	89 d8                	mov    %ebx,%eax
f012d59e:	3d 00 01 00 00       	cmp    $0x100,%eax
f012d5a3:	74 17                	je     f012d5bc <test_krealloc_BF+0x1b3>
			panic("krealloc: Wrong allocation: ");
f012d5a5:	83 ec 04             	sub    $0x4,%esp
f012d5a8:	68 8a bb 13 f0       	push   $0xf013bb8a
f012d5ad:	68 1f 11 00 00       	push   $0x111f
f012d5b2:	68 76 a8 13 f0       	push   $0xf013a876
f012d5b7:	e8 ea 2b fd ff       	call   f01001a6 <_panic>

		lastIndices[0] = (1 * Mega - kilo) / sizeof(char) - 1;
f012d5bc:	c7 85 f0 fd ff ff ff 	movl   $0xffbff,-0x210(%ebp)
f012d5c3:	fb 0f 00 

		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames();
f012d5c6:	e8 f3 ed fd ff       	call   f010c3be <sys_calculate_free_frames>
f012d5cb:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[1] = krealloc(NULL, 1 * Mega - kilo);
f012d5ce:	83 ec 08             	sub    $0x8,%esp
f012d5d1:	68 00 fc 0f 00       	push   $0xffc00
f012d5d6:	6a 00                	push   $0x0
f012d5d8:	e8 af a0 fd ff       	call   f010768c <krealloc>
f012d5dd:	83 c4 10             	add    $0x10,%esp
f012d5e0:	89 85 44 fe ff ff    	mov    %eax,-0x1bc(%ebp)
		if ((uint32) ptr_allocations[1] < (KERNEL_HEAP_START + 1 * Mega))
f012d5e6:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f012d5ec:	3d ff ff 0f f6       	cmp    $0xf60fffff,%eax
f012d5f1:	77 17                	ja     f012d60a <test_krealloc_BF+0x201>
			panic("krealloc: Wrong start address for the allocated space... ");
f012d5f3:	83 ec 04             	sub    $0x4,%esp
f012d5f6:	68 1c bb 13 f0       	push   $0xf013bb1c
f012d5fb:	68 27 11 00 00       	push   $0x1127
f012d600:	68 76 a8 13 f0       	push   $0xf013a876
f012d605:	e8 9c 2b fd ff       	call   f01001a6 <_panic>
		if ((uint32) ptr_allocations[1] != ACTUAL_START + (1 * Mega))
f012d60a:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f012d610:	89 c1                	mov    %eax,%ecx
f012d612:	c7 45 9c 00 10 00 00 	movl   $0x1000,-0x64(%ebp)
f012d619:	8b 45 9c             	mov    -0x64(%ebp),%eax
f012d61c:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012d621:	89 45 98             	mov    %eax,-0x68(%ebp)
f012d624:	8b 45 98             	mov    -0x68(%ebp),%eax
f012d627:	ba 00 00 00 00       	mov    $0x0,%edx
f012d62c:	f7 75 9c             	divl   -0x64(%ebp)
f012d62f:	8b 45 98             	mov    -0x68(%ebp),%eax
f012d632:	29 d0                	sub    %edx,%eax
f012d634:	89 c3                	mov    %eax,%ebx
f012d636:	c7 45 94 00 10 00 00 	movl   $0x1000,-0x6c(%ebp)
f012d63d:	a0 bc 0e 6c f0       	mov    0xf06c0ebc,%al
f012d642:	0f b6 d0             	movzbl %al,%edx
f012d645:	8b 45 94             	mov    -0x6c(%ebp),%eax
f012d648:	01 d0                	add    %edx,%eax
f012d64a:	48                   	dec    %eax
f012d64b:	89 45 90             	mov    %eax,-0x70(%ebp)
f012d64e:	8b 45 90             	mov    -0x70(%ebp),%eax
f012d651:	ba 00 00 00 00       	mov    $0x0,%edx
f012d656:	f7 75 94             	divl   -0x6c(%ebp)
f012d659:	8b 45 90             	mov    -0x70(%ebp),%eax
f012d65c:	29 d0                	sub    %edx,%eax
f012d65e:	01 c3                	add    %eax,%ebx
f012d660:	c7 45 8c 00 10 00 00 	movl   $0x1000,-0x74(%ebp)
f012d667:	a0 bc 0e 6c f0       	mov    0xf06c0ebc,%al
f012d66c:	0f b6 c0             	movzbl %al,%eax
f012d66f:	c1 e0 04             	shl    $0x4,%eax
f012d672:	89 c2                	mov    %eax,%edx
f012d674:	8b 45 8c             	mov    -0x74(%ebp),%eax
f012d677:	01 d0                	add    %edx,%eax
f012d679:	48                   	dec    %eax
f012d67a:	89 45 88             	mov    %eax,-0x78(%ebp)
f012d67d:	8b 45 88             	mov    -0x78(%ebp),%eax
f012d680:	ba 00 00 00 00       	mov    $0x0,%edx
f012d685:	f7 75 8c             	divl   -0x74(%ebp)
f012d688:	8b 45 88             	mov    -0x78(%ebp),%eax
f012d68b:	29 d0                	sub    %edx,%eax
f012d68d:	01 d8                	add    %ebx,%eax
f012d68f:	2d 00 c0 ef 09       	sub    $0x9efc000,%eax
f012d694:	39 c1                	cmp    %eax,%ecx
f012d696:	74 17                	je     f012d6af <test_krealloc_BF+0x2a6>
			panic("krealloc: Wrong start address for allocated space");
f012d698:	83 ec 04             	sub    $0x4,%esp
f012d69b:	68 58 bb 13 f0       	push   $0xf013bb58
f012d6a0:	68 29 11 00 00       	push   $0x1129
f012d6a5:	68 76 a8 13 f0       	push   $0xf013a876
f012d6aa:	e8 f7 2a fd ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256)
f012d6af:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012d6b2:	e8 07 ed fd ff       	call   f010c3be <sys_calculate_free_frames>
f012d6b7:	29 c3                	sub    %eax,%ebx
f012d6b9:	89 d8                	mov    %ebx,%eax
f012d6bb:	3d 00 01 00 00       	cmp    $0x100,%eax
f012d6c0:	74 17                	je     f012d6d9 <test_krealloc_BF+0x2d0>
			panic("krealloc: Wrong allocation: ");
f012d6c2:	83 ec 04             	sub    $0x4,%esp
f012d6c5:	68 8a bb 13 f0       	push   $0xf013bb8a
f012d6ca:	68 2b 11 00 00       	push   $0x112b
f012d6cf:	68 76 a8 13 f0       	push   $0xf013a876
f012d6d4:	e8 cd 2a fd ff       	call   f01001a6 <_panic>

		lastIndices[1] = (1 * Mega - kilo) / sizeof(char) - 1;
f012d6d9:	c7 85 f4 fd ff ff ff 	movl   $0xffbff,-0x20c(%ebp)
f012d6e0:	fb 0f 00 

		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames();
f012d6e3:	e8 d6 ec fd ff       	call   f010c3be <sys_calculate_free_frames>
f012d6e8:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[2] = krealloc(NULL, 1 * Mega - kilo);
f012d6eb:	83 ec 08             	sub    $0x8,%esp
f012d6ee:	68 00 fc 0f 00       	push   $0xffc00
f012d6f3:	6a 00                	push   $0x0
f012d6f5:	e8 92 9f fd ff       	call   f010768c <krealloc>
f012d6fa:	83 c4 10             	add    $0x10,%esp
f012d6fd:	89 85 48 fe ff ff    	mov    %eax,-0x1b8(%ebp)
		if ((uint32) ptr_allocations[2] < (KERNEL_HEAP_START + 2 * Mega))
f012d703:	8b 85 48 fe ff ff    	mov    -0x1b8(%ebp),%eax
f012d709:	3d ff ff 1f f6       	cmp    $0xf61fffff,%eax
f012d70e:	77 17                	ja     f012d727 <test_krealloc_BF+0x31e>
			panic("krealloc: Wrong start address for the allocated space... ");
f012d710:	83 ec 04             	sub    $0x4,%esp
f012d713:	68 1c bb 13 f0       	push   $0xf013bb1c
f012d718:	68 33 11 00 00       	push   $0x1133
f012d71d:	68 76 a8 13 f0       	push   $0xf013a876
f012d722:	e8 7f 2a fd ff       	call   f01001a6 <_panic>
		if ((uint32) ptr_allocations[2] != ACTUAL_START + (2 * Mega))
f012d727:	8b 85 48 fe ff ff    	mov    -0x1b8(%ebp),%eax
f012d72d:	89 c1                	mov    %eax,%ecx
f012d72f:	c7 45 84 00 10 00 00 	movl   $0x1000,-0x7c(%ebp)
f012d736:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012d739:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012d73e:	89 45 80             	mov    %eax,-0x80(%ebp)
f012d741:	8b 45 80             	mov    -0x80(%ebp),%eax
f012d744:	ba 00 00 00 00       	mov    $0x0,%edx
f012d749:	f7 75 84             	divl   -0x7c(%ebp)
f012d74c:	8b 45 80             	mov    -0x80(%ebp),%eax
f012d74f:	29 d0                	sub    %edx,%eax
f012d751:	89 c3                	mov    %eax,%ebx
f012d753:	c7 85 7c ff ff ff 00 	movl   $0x1000,-0x84(%ebp)
f012d75a:	10 00 00 
f012d75d:	a0 bc 0e 6c f0       	mov    0xf06c0ebc,%al
f012d762:	0f b6 d0             	movzbl %al,%edx
f012d765:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f012d76b:	01 d0                	add    %edx,%eax
f012d76d:	48                   	dec    %eax
f012d76e:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)
f012d774:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f012d77a:	ba 00 00 00 00       	mov    $0x0,%edx
f012d77f:	f7 b5 7c ff ff ff    	divl   -0x84(%ebp)
f012d785:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f012d78b:	29 d0                	sub    %edx,%eax
f012d78d:	01 c3                	add    %eax,%ebx
f012d78f:	c7 85 74 ff ff ff 00 	movl   $0x1000,-0x8c(%ebp)
f012d796:	10 00 00 
f012d799:	a0 bc 0e 6c f0       	mov    0xf06c0ebc,%al
f012d79e:	0f b6 c0             	movzbl %al,%eax
f012d7a1:	c1 e0 04             	shl    $0x4,%eax
f012d7a4:	89 c2                	mov    %eax,%edx
f012d7a6:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f012d7ac:	01 d0                	add    %edx,%eax
f012d7ae:	48                   	dec    %eax
f012d7af:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
f012d7b5:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f012d7bb:	ba 00 00 00 00       	mov    $0x0,%edx
f012d7c0:	f7 b5 74 ff ff ff    	divl   -0x8c(%ebp)
f012d7c6:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f012d7cc:	29 d0                	sub    %edx,%eax
f012d7ce:	01 d8                	add    %ebx,%eax
f012d7d0:	2d 00 c0 df 09       	sub    $0x9dfc000,%eax
f012d7d5:	39 c1                	cmp    %eax,%ecx
f012d7d7:	74 17                	je     f012d7f0 <test_krealloc_BF+0x3e7>
			panic("krealloc: Wrong start address for allocated space");
f012d7d9:	83 ec 04             	sub    $0x4,%esp
f012d7dc:	68 58 bb 13 f0       	push   $0xf013bb58
f012d7e1:	68 35 11 00 00       	push   $0x1135
f012d7e6:	68 76 a8 13 f0       	push   $0xf013a876
f012d7eb:	e8 b6 29 fd ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256)
f012d7f0:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012d7f3:	e8 c6 eb fd ff       	call   f010c3be <sys_calculate_free_frames>
f012d7f8:	29 c3                	sub    %eax,%ebx
f012d7fa:	89 d8                	mov    %ebx,%eax
f012d7fc:	3d 00 01 00 00       	cmp    $0x100,%eax
f012d801:	74 17                	je     f012d81a <test_krealloc_BF+0x411>
			panic("krealloc: Wrong allocation: ");
f012d803:	83 ec 04             	sub    $0x4,%esp
f012d806:	68 8a bb 13 f0       	push   $0xf013bb8a
f012d80b:	68 37 11 00 00       	push   $0x1137
f012d810:	68 76 a8 13 f0       	push   $0xf013a876
f012d815:	e8 8c 29 fd ff       	call   f01001a6 <_panic>
		lastIndices[2] = (1 * Mega - kilo) / sizeof(int) - 1;
f012d81a:	c7 85 f8 fd ff ff ff 	movl   $0x3feff,-0x208(%ebp)
f012d821:	fe 03 00 

		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames();
f012d824:	e8 95 eb fd ff       	call   f010c3be <sys_calculate_free_frames>
f012d829:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[3] = krealloc(NULL, 1 * Mega - kilo);
f012d82c:	83 ec 08             	sub    $0x8,%esp
f012d82f:	68 00 fc 0f 00       	push   $0xffc00
f012d834:	6a 00                	push   $0x0
f012d836:	e8 51 9e fd ff       	call   f010768c <krealloc>
f012d83b:	83 c4 10             	add    $0x10,%esp
f012d83e:	89 85 4c fe ff ff    	mov    %eax,-0x1b4(%ebp)
		if ((uint32) ptr_allocations[3] < (KERNEL_HEAP_START + 3 * Mega))
f012d844:	8b 85 4c fe ff ff    	mov    -0x1b4(%ebp),%eax
f012d84a:	3d ff ff 2f f6       	cmp    $0xf62fffff,%eax
f012d84f:	77 17                	ja     f012d868 <test_krealloc_BF+0x45f>
			panic("krealloc: Wrong start address for the allocated space... ");
f012d851:	83 ec 04             	sub    $0x4,%esp
f012d854:	68 1c bb 13 f0       	push   $0xf013bb1c
f012d859:	68 3e 11 00 00       	push   $0x113e
f012d85e:	68 76 a8 13 f0       	push   $0xf013a876
f012d863:	e8 3e 29 fd ff       	call   f01001a6 <_panic>
		if ((uint32) ptr_allocations[3] != ACTUAL_START + (3 * Mega))
f012d868:	8b 85 4c fe ff ff    	mov    -0x1b4(%ebp),%eax
f012d86e:	89 c1                	mov    %eax,%ecx
f012d870:	c7 85 6c ff ff ff 00 	movl   $0x1000,-0x94(%ebp)
f012d877:	10 00 00 
f012d87a:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f012d880:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012d885:	89 85 68 ff ff ff    	mov    %eax,-0x98(%ebp)
f012d88b:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f012d891:	ba 00 00 00 00       	mov    $0x0,%edx
f012d896:	f7 b5 6c ff ff ff    	divl   -0x94(%ebp)
f012d89c:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f012d8a2:	29 d0                	sub    %edx,%eax
f012d8a4:	89 c3                	mov    %eax,%ebx
f012d8a6:	c7 85 64 ff ff ff 00 	movl   $0x1000,-0x9c(%ebp)
f012d8ad:	10 00 00 
f012d8b0:	a0 bc 0e 6c f0       	mov    0xf06c0ebc,%al
f012d8b5:	0f b6 d0             	movzbl %al,%edx
f012d8b8:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f012d8be:	01 d0                	add    %edx,%eax
f012d8c0:	48                   	dec    %eax
f012d8c1:	89 85 60 ff ff ff    	mov    %eax,-0xa0(%ebp)
f012d8c7:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f012d8cd:	ba 00 00 00 00       	mov    $0x0,%edx
f012d8d2:	f7 b5 64 ff ff ff    	divl   -0x9c(%ebp)
f012d8d8:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f012d8de:	29 d0                	sub    %edx,%eax
f012d8e0:	01 c3                	add    %eax,%ebx
f012d8e2:	c7 85 5c ff ff ff 00 	movl   $0x1000,-0xa4(%ebp)
f012d8e9:	10 00 00 
f012d8ec:	a0 bc 0e 6c f0       	mov    0xf06c0ebc,%al
f012d8f1:	0f b6 c0             	movzbl %al,%eax
f012d8f4:	c1 e0 04             	shl    $0x4,%eax
f012d8f7:	89 c2                	mov    %eax,%edx
f012d8f9:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f012d8ff:	01 d0                	add    %edx,%eax
f012d901:	48                   	dec    %eax
f012d902:	89 85 58 ff ff ff    	mov    %eax,-0xa8(%ebp)
f012d908:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f012d90e:	ba 00 00 00 00       	mov    $0x0,%edx
f012d913:	f7 b5 5c ff ff ff    	divl   -0xa4(%ebp)
f012d919:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f012d91f:	29 d0                	sub    %edx,%eax
f012d921:	01 d8                	add    %ebx,%eax
f012d923:	2d 00 c0 cf 09       	sub    $0x9cfc000,%eax
f012d928:	39 c1                	cmp    %eax,%ecx
f012d92a:	74 17                	je     f012d943 <test_krealloc_BF+0x53a>
			panic("krealloc: Wrong start address for allocated space");
f012d92c:	83 ec 04             	sub    $0x4,%esp
f012d92f:	68 58 bb 13 f0       	push   $0xf013bb58
f012d934:	68 40 11 00 00       	push   $0x1140
f012d939:	68 76 a8 13 f0       	push   $0xf013a876
f012d93e:	e8 63 28 fd ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256)
f012d943:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012d946:	e8 73 ea fd ff       	call   f010c3be <sys_calculate_free_frames>
f012d94b:	29 c3                	sub    %eax,%ebx
f012d94d:	89 d8                	mov    %ebx,%eax
f012d94f:	3d 00 01 00 00       	cmp    $0x100,%eax
f012d954:	74 17                	je     f012d96d <test_krealloc_BF+0x564>
			panic("krealloc: Wrong allocation: ");
f012d956:	83 ec 04             	sub    $0x4,%esp
f012d959:	68 8a bb 13 f0       	push   $0xf013bb8a
f012d95e:	68 42 11 00 00       	push   $0x1142
f012d963:	68 76 a8 13 f0       	push   $0xf013a876
f012d968:	e8 39 28 fd ff       	call   f01001a6 <_panic>
		lastIndices[3] = (1 * Mega - kilo) / sizeof(int) - 1;
f012d96d:	c7 85 fc fd ff ff ff 	movl   $0x3feff,-0x204(%ebp)
f012d974:	fe 03 00 

		//Allocate 2 MB
		freeFrames = sys_calculate_free_frames();
f012d977:	e8 42 ea fd ff       	call   f010c3be <sys_calculate_free_frames>
f012d97c:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[4] = krealloc(NULL, 2 * Mega - kilo);
f012d97f:	83 ec 08             	sub    $0x8,%esp
f012d982:	68 00 fc 1f 00       	push   $0x1ffc00
f012d987:	6a 00                	push   $0x0
f012d989:	e8 fe 9c fd ff       	call   f010768c <krealloc>
f012d98e:	83 c4 10             	add    $0x10,%esp
f012d991:	89 85 50 fe ff ff    	mov    %eax,-0x1b0(%ebp)
		if ((uint32) ptr_allocations[4] < (KERNEL_HEAP_START + 4 * Mega))
f012d997:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f012d99d:	3d ff ff 3f f6       	cmp    $0xf63fffff,%eax
f012d9a2:	77 17                	ja     f012d9bb <test_krealloc_BF+0x5b2>
			panic("krealloc: Wrong start address for the allocated space... ");
f012d9a4:	83 ec 04             	sub    $0x4,%esp
f012d9a7:	68 1c bb 13 f0       	push   $0xf013bb1c
f012d9ac:	68 49 11 00 00       	push   $0x1149
f012d9b1:	68 76 a8 13 f0       	push   $0xf013a876
f012d9b6:	e8 eb 27 fd ff       	call   f01001a6 <_panic>
		if ((uint32) ptr_allocations[4] != ACTUAL_START + (4 * Mega))
f012d9bb:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f012d9c1:	89 c1                	mov    %eax,%ecx
f012d9c3:	c7 85 54 ff ff ff 00 	movl   $0x1000,-0xac(%ebp)
f012d9ca:	10 00 00 
f012d9cd:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f012d9d3:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012d9d8:	89 85 50 ff ff ff    	mov    %eax,-0xb0(%ebp)
f012d9de:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f012d9e4:	ba 00 00 00 00       	mov    $0x0,%edx
f012d9e9:	f7 b5 54 ff ff ff    	divl   -0xac(%ebp)
f012d9ef:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f012d9f5:	29 d0                	sub    %edx,%eax
f012d9f7:	89 c3                	mov    %eax,%ebx
f012d9f9:	c7 85 4c ff ff ff 00 	movl   $0x1000,-0xb4(%ebp)
f012da00:	10 00 00 
f012da03:	a0 bc 0e 6c f0       	mov    0xf06c0ebc,%al
f012da08:	0f b6 d0             	movzbl %al,%edx
f012da0b:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f012da11:	01 d0                	add    %edx,%eax
f012da13:	48                   	dec    %eax
f012da14:	89 85 48 ff ff ff    	mov    %eax,-0xb8(%ebp)
f012da1a:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f012da20:	ba 00 00 00 00       	mov    $0x0,%edx
f012da25:	f7 b5 4c ff ff ff    	divl   -0xb4(%ebp)
f012da2b:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f012da31:	29 d0                	sub    %edx,%eax
f012da33:	01 c3                	add    %eax,%ebx
f012da35:	c7 85 44 ff ff ff 00 	movl   $0x1000,-0xbc(%ebp)
f012da3c:	10 00 00 
f012da3f:	a0 bc 0e 6c f0       	mov    0xf06c0ebc,%al
f012da44:	0f b6 c0             	movzbl %al,%eax
f012da47:	c1 e0 04             	shl    $0x4,%eax
f012da4a:	89 c2                	mov    %eax,%edx
f012da4c:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f012da52:	01 d0                	add    %edx,%eax
f012da54:	48                   	dec    %eax
f012da55:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%ebp)
f012da5b:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f012da61:	ba 00 00 00 00       	mov    $0x0,%edx
f012da66:	f7 b5 44 ff ff ff    	divl   -0xbc(%ebp)
f012da6c:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f012da72:	29 d0                	sub    %edx,%eax
f012da74:	01 d8                	add    %ebx,%eax
f012da76:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
f012da7b:	39 c1                	cmp    %eax,%ecx
f012da7d:	74 17                	je     f012da96 <test_krealloc_BF+0x68d>
			panic("krealloc: Wrong start address for allocated space");
f012da7f:	83 ec 04             	sub    $0x4,%esp
f012da82:	68 58 bb 13 f0       	push   $0xf013bb58
f012da87:	68 4b 11 00 00       	push   $0x114b
f012da8c:	68 76 a8 13 f0       	push   $0xf013a876
f012da91:	e8 10 27 fd ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512)
f012da96:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012da99:	e8 20 e9 fd ff       	call   f010c3be <sys_calculate_free_frames>
f012da9e:	29 c3                	sub    %eax,%ebx
f012daa0:	89 d8                	mov    %ebx,%eax
f012daa2:	3d 00 02 00 00       	cmp    $0x200,%eax
f012daa7:	74 17                	je     f012dac0 <test_krealloc_BF+0x6b7>
			panic("krealloc: Wrong allocation: ");
f012daa9:	83 ec 04             	sub    $0x4,%esp
f012daac:	68 8a bb 13 f0       	push   $0xf013bb8a
f012dab1:	68 4d 11 00 00       	push   $0x114d
f012dab6:	68 76 a8 13 f0       	push   $0xf013a876
f012dabb:	e8 e6 26 fd ff       	call   f01001a6 <_panic>
		lastIndices[4] = (2 * Mega - kilo) / sizeof(short) - 1;
f012dac0:	c7 85 00 fe ff ff ff 	movl   $0xffdff,-0x200(%ebp)
f012dac7:	fd 0f 00 

		//Allocate 2 MB
		freeFrames = sys_calculate_free_frames();
f012daca:	e8 ef e8 fd ff       	call   f010c3be <sys_calculate_free_frames>
f012dacf:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[5] = krealloc(NULL, 2 * Mega - kilo);
f012dad2:	83 ec 08             	sub    $0x8,%esp
f012dad5:	68 00 fc 1f 00       	push   $0x1ffc00
f012dada:	6a 00                	push   $0x0
f012dadc:	e8 ab 9b fd ff       	call   f010768c <krealloc>
f012dae1:	83 c4 10             	add    $0x10,%esp
f012dae4:	89 85 54 fe ff ff    	mov    %eax,-0x1ac(%ebp)
		if ((uint32) ptr_allocations[5] < (KERNEL_HEAP_START + 6 * Mega))
f012daea:	8b 85 54 fe ff ff    	mov    -0x1ac(%ebp),%eax
f012daf0:	3d ff ff 5f f6       	cmp    $0xf65fffff,%eax
f012daf5:	77 17                	ja     f012db0e <test_krealloc_BF+0x705>
			panic("krealloc: Wrong start address for the allocated space... ");
f012daf7:	83 ec 04             	sub    $0x4,%esp
f012dafa:	68 1c bb 13 f0       	push   $0xf013bb1c
f012daff:	68 54 11 00 00       	push   $0x1154
f012db04:	68 76 a8 13 f0       	push   $0xf013a876
f012db09:	e8 98 26 fd ff       	call   f01001a6 <_panic>
		if ((uint32) ptr_allocations[5] != ACTUAL_START + (6 * Mega))
f012db0e:	8b 85 54 fe ff ff    	mov    -0x1ac(%ebp),%eax
f012db14:	89 c1                	mov    %eax,%ecx
f012db16:	c7 85 3c ff ff ff 00 	movl   $0x1000,-0xc4(%ebp)
f012db1d:	10 00 00 
f012db20:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f012db26:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012db2b:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
f012db31:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f012db37:	ba 00 00 00 00       	mov    $0x0,%edx
f012db3c:	f7 b5 3c ff ff ff    	divl   -0xc4(%ebp)
f012db42:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f012db48:	29 d0                	sub    %edx,%eax
f012db4a:	89 c3                	mov    %eax,%ebx
f012db4c:	c7 85 34 ff ff ff 00 	movl   $0x1000,-0xcc(%ebp)
f012db53:	10 00 00 
f012db56:	a0 bc 0e 6c f0       	mov    0xf06c0ebc,%al
f012db5b:	0f b6 d0             	movzbl %al,%edx
f012db5e:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f012db64:	01 d0                	add    %edx,%eax
f012db66:	48                   	dec    %eax
f012db67:	89 85 30 ff ff ff    	mov    %eax,-0xd0(%ebp)
f012db6d:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f012db73:	ba 00 00 00 00       	mov    $0x0,%edx
f012db78:	f7 b5 34 ff ff ff    	divl   -0xcc(%ebp)
f012db7e:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f012db84:	29 d0                	sub    %edx,%eax
f012db86:	01 c3                	add    %eax,%ebx
f012db88:	c7 85 2c ff ff ff 00 	movl   $0x1000,-0xd4(%ebp)
f012db8f:	10 00 00 
f012db92:	a0 bc 0e 6c f0       	mov    0xf06c0ebc,%al
f012db97:	0f b6 c0             	movzbl %al,%eax
f012db9a:	c1 e0 04             	shl    $0x4,%eax
f012db9d:	89 c2                	mov    %eax,%edx
f012db9f:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f012dba5:	01 d0                	add    %edx,%eax
f012dba7:	48                   	dec    %eax
f012dba8:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%ebp)
f012dbae:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f012dbb4:	ba 00 00 00 00       	mov    $0x0,%edx
f012dbb9:	f7 b5 2c ff ff ff    	divl   -0xd4(%ebp)
f012dbbf:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f012dbc5:	29 d0                	sub    %edx,%eax
f012dbc7:	01 d8                	add    %ebx,%eax
f012dbc9:	2d 00 c0 9f 09       	sub    $0x99fc000,%eax
f012dbce:	39 c1                	cmp    %eax,%ecx
f012dbd0:	74 17                	je     f012dbe9 <test_krealloc_BF+0x7e0>
			panic("krealloc: Wrong start address for allocated space");
f012dbd2:	83 ec 04             	sub    $0x4,%esp
f012dbd5:	68 58 bb 13 f0       	push   $0xf013bb58
f012dbda:	68 56 11 00 00       	push   $0x1156
f012dbdf:	68 76 a8 13 f0       	push   $0xf013a876
f012dbe4:	e8 bd 25 fd ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512)
f012dbe9:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012dbec:	e8 cd e7 fd ff       	call   f010c3be <sys_calculate_free_frames>
f012dbf1:	29 c3                	sub    %eax,%ebx
f012dbf3:	89 d8                	mov    %ebx,%eax
f012dbf5:	3d 00 02 00 00       	cmp    $0x200,%eax
f012dbfa:	74 17                	je     f012dc13 <test_krealloc_BF+0x80a>
			panic("krealloc: Wrong allocation: ");
f012dbfc:	83 ec 04             	sub    $0x4,%esp
f012dbff:	68 8a bb 13 f0       	push   $0xf013bb8a
f012dc04:	68 58 11 00 00       	push   $0x1158
f012dc09:	68 76 a8 13 f0       	push   $0xf013a876
f012dc0e:	e8 93 25 fd ff       	call   f01001a6 <_panic>
		lastIndices[5] = (2 * Mega - kilo) / sizeof(short) - 1;
f012dc13:	c7 85 04 fe ff ff ff 	movl   $0xffdff,-0x1fc(%ebp)
f012dc1a:	fd 0f 00 

		//Allocate 3 MB
		freeFrames = sys_calculate_free_frames();
f012dc1d:	e8 9c e7 fd ff       	call   f010c3be <sys_calculate_free_frames>
f012dc22:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[6] = krealloc(NULL, 3 * Mega - kilo);
f012dc25:	83 ec 08             	sub    $0x8,%esp
f012dc28:	68 00 fc 2f 00       	push   $0x2ffc00
f012dc2d:	6a 00                	push   $0x0
f012dc2f:	e8 58 9a fd ff       	call   f010768c <krealloc>
f012dc34:	83 c4 10             	add    $0x10,%esp
f012dc37:	89 85 58 fe ff ff    	mov    %eax,-0x1a8(%ebp)
		if ((uint32) ptr_allocations[6] < (KERNEL_HEAP_START + 8 * Mega))
f012dc3d:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f012dc43:	3d ff ff 7f f6       	cmp    $0xf67fffff,%eax
f012dc48:	77 17                	ja     f012dc61 <test_krealloc_BF+0x858>
			panic("krealloc: Wrong start address for the allocated space... ");
f012dc4a:	83 ec 04             	sub    $0x4,%esp
f012dc4d:	68 1c bb 13 f0       	push   $0xf013bb1c
f012dc52:	68 5f 11 00 00       	push   $0x115f
f012dc57:	68 76 a8 13 f0       	push   $0xf013a876
f012dc5c:	e8 45 25 fd ff       	call   f01001a6 <_panic>
		if ((uint32) ptr_allocations[6] != ACTUAL_START + (8 * Mega))
f012dc61:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f012dc67:	89 c1                	mov    %eax,%ecx
f012dc69:	c7 85 24 ff ff ff 00 	movl   $0x1000,-0xdc(%ebp)
f012dc70:	10 00 00 
f012dc73:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f012dc79:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012dc7e:	89 85 20 ff ff ff    	mov    %eax,-0xe0(%ebp)
f012dc84:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012dc8a:	ba 00 00 00 00       	mov    $0x0,%edx
f012dc8f:	f7 b5 24 ff ff ff    	divl   -0xdc(%ebp)
f012dc95:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012dc9b:	29 d0                	sub    %edx,%eax
f012dc9d:	89 c3                	mov    %eax,%ebx
f012dc9f:	c7 85 1c ff ff ff 00 	movl   $0x1000,-0xe4(%ebp)
f012dca6:	10 00 00 
f012dca9:	a0 bc 0e 6c f0       	mov    0xf06c0ebc,%al
f012dcae:	0f b6 d0             	movzbl %al,%edx
f012dcb1:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f012dcb7:	01 d0                	add    %edx,%eax
f012dcb9:	48                   	dec    %eax
f012dcba:	89 85 18 ff ff ff    	mov    %eax,-0xe8(%ebp)
f012dcc0:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f012dcc6:	ba 00 00 00 00       	mov    $0x0,%edx
f012dccb:	f7 b5 1c ff ff ff    	divl   -0xe4(%ebp)
f012dcd1:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f012dcd7:	29 d0                	sub    %edx,%eax
f012dcd9:	01 c3                	add    %eax,%ebx
f012dcdb:	c7 85 14 ff ff ff 00 	movl   $0x1000,-0xec(%ebp)
f012dce2:	10 00 00 
f012dce5:	a0 bc 0e 6c f0       	mov    0xf06c0ebc,%al
f012dcea:	0f b6 c0             	movzbl %al,%eax
f012dced:	c1 e0 04             	shl    $0x4,%eax
f012dcf0:	89 c2                	mov    %eax,%edx
f012dcf2:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f012dcf8:	01 d0                	add    %edx,%eax
f012dcfa:	48                   	dec    %eax
f012dcfb:	89 85 10 ff ff ff    	mov    %eax,-0xf0(%ebp)
f012dd01:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f012dd07:	ba 00 00 00 00       	mov    $0x0,%edx
f012dd0c:	f7 b5 14 ff ff ff    	divl   -0xec(%ebp)
f012dd12:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f012dd18:	29 d0                	sub    %edx,%eax
f012dd1a:	01 d8                	add    %ebx,%eax
f012dd1c:	2d 00 c0 7f 09       	sub    $0x97fc000,%eax
f012dd21:	39 c1                	cmp    %eax,%ecx
f012dd23:	74 17                	je     f012dd3c <test_krealloc_BF+0x933>
			panic("krealloc: Wrong start address for allocated space");
f012dd25:	83 ec 04             	sub    $0x4,%esp
f012dd28:	68 58 bb 13 f0       	push   $0xf013bb58
f012dd2d:	68 61 11 00 00       	push   $0x1161
f012dd32:	68 76 a8 13 f0       	push   $0xf013a876
f012dd37:	e8 6a 24 fd ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768)
f012dd3c:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012dd3f:	e8 7a e6 fd ff       	call   f010c3be <sys_calculate_free_frames>
f012dd44:	29 c3                	sub    %eax,%ebx
f012dd46:	89 d8                	mov    %ebx,%eax
f012dd48:	3d 00 03 00 00       	cmp    $0x300,%eax
f012dd4d:	74 17                	je     f012dd66 <test_krealloc_BF+0x95d>
			panic("Wrong allocation: ");
f012dd4f:	83 ec 04             	sub    $0x4,%esp
f012dd52:	68 c0 ac 13 f0       	push   $0xf013acc0
f012dd57:	68 63 11 00 00       	push   $0x1163
f012dd5c:	68 76 a8 13 f0       	push   $0xf013a876
f012dd61:	e8 40 24 fd ff       	call   f01001a6 <_panic>
		lastIndices[6] = (3 * Mega - kilo) / sizeof(struct MyStruct) - 1;
f012dd66:	c7 85 08 fe ff ff 7f 	movl   $0x5ff7f,-0x1f8(%ebp)
f012dd6d:	ff 05 00 

		//Allocate 3 MB
		freeFrames = sys_calculate_free_frames();
f012dd70:	e8 49 e6 fd ff       	call   f010c3be <sys_calculate_free_frames>
f012dd75:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[7] = krealloc(NULL, 3 * Mega - kilo);
f012dd78:	83 ec 08             	sub    $0x8,%esp
f012dd7b:	68 00 fc 2f 00       	push   $0x2ffc00
f012dd80:	6a 00                	push   $0x0
f012dd82:	e8 05 99 fd ff       	call   f010768c <krealloc>
f012dd87:	83 c4 10             	add    $0x10,%esp
f012dd8a:	89 85 5c fe ff ff    	mov    %eax,-0x1a4(%ebp)
		if ((uint32) ptr_allocations[7] < (KERNEL_HEAP_START + 11 * Mega))
f012dd90:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f012dd96:	3d ff ff af f6       	cmp    $0xf6afffff,%eax
f012dd9b:	77 17                	ja     f012ddb4 <test_krealloc_BF+0x9ab>
			panic("krealloc: Wrong start address for the allocated space... ");
f012dd9d:	83 ec 04             	sub    $0x4,%esp
f012dda0:	68 1c bb 13 f0       	push   $0xf013bb1c
f012dda5:	68 6a 11 00 00       	push   $0x116a
f012ddaa:	68 76 a8 13 f0       	push   $0xf013a876
f012ddaf:	e8 f2 23 fd ff       	call   f01001a6 <_panic>
		if ((uint32) ptr_allocations[7] != ACTUAL_START + (11 * Mega))
f012ddb4:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f012ddba:	89 c1                	mov    %eax,%ecx
f012ddbc:	c7 85 0c ff ff ff 00 	movl   $0x1000,-0xf4(%ebp)
f012ddc3:	10 00 00 
f012ddc6:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f012ddcc:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012ddd1:	89 85 08 ff ff ff    	mov    %eax,-0xf8(%ebp)
f012ddd7:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f012dddd:	ba 00 00 00 00       	mov    $0x0,%edx
f012dde2:	f7 b5 0c ff ff ff    	divl   -0xf4(%ebp)
f012dde8:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f012ddee:	29 d0                	sub    %edx,%eax
f012ddf0:	89 c3                	mov    %eax,%ebx
f012ddf2:	c7 85 04 ff ff ff 00 	movl   $0x1000,-0xfc(%ebp)
f012ddf9:	10 00 00 
f012ddfc:	a0 bc 0e 6c f0       	mov    0xf06c0ebc,%al
f012de01:	0f b6 d0             	movzbl %al,%edx
f012de04:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f012de0a:	01 d0                	add    %edx,%eax
f012de0c:	48                   	dec    %eax
f012de0d:	89 85 00 ff ff ff    	mov    %eax,-0x100(%ebp)
f012de13:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f012de19:	ba 00 00 00 00       	mov    $0x0,%edx
f012de1e:	f7 b5 04 ff ff ff    	divl   -0xfc(%ebp)
f012de24:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f012de2a:	29 d0                	sub    %edx,%eax
f012de2c:	01 c3                	add    %eax,%ebx
f012de2e:	c7 85 fc fe ff ff 00 	movl   $0x1000,-0x104(%ebp)
f012de35:	10 00 00 
f012de38:	a0 bc 0e 6c f0       	mov    0xf06c0ebc,%al
f012de3d:	0f b6 c0             	movzbl %al,%eax
f012de40:	c1 e0 04             	shl    $0x4,%eax
f012de43:	89 c2                	mov    %eax,%edx
f012de45:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f012de4b:	01 d0                	add    %edx,%eax
f012de4d:	48                   	dec    %eax
f012de4e:	89 85 f8 fe ff ff    	mov    %eax,-0x108(%ebp)
f012de54:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f012de5a:	ba 00 00 00 00       	mov    $0x0,%edx
f012de5f:	f7 b5 fc fe ff ff    	divl   -0x104(%ebp)
f012de65:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f012de6b:	29 d0                	sub    %edx,%eax
f012de6d:	01 d8                	add    %ebx,%eax
f012de6f:	2d 00 c0 4f 09       	sub    $0x94fc000,%eax
f012de74:	39 c1                	cmp    %eax,%ecx
f012de76:	74 17                	je     f012de8f <test_krealloc_BF+0xa86>
			panic("krealloc: Wrong start address for allocated space");
f012de78:	83 ec 04             	sub    $0x4,%esp
f012de7b:	68 58 bb 13 f0       	push   $0xf013bb58
f012de80:	68 6c 11 00 00       	push   $0x116c
f012de85:	68 76 a8 13 f0       	push   $0xf013a876
f012de8a:	e8 17 23 fd ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768)
f012de8f:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012de92:	e8 27 e5 fd ff       	call   f010c3be <sys_calculate_free_frames>
f012de97:	29 c3                	sub    %eax,%ebx
f012de99:	89 d8                	mov    %ebx,%eax
f012de9b:	3d 00 03 00 00       	cmp    $0x300,%eax
f012dea0:	74 17                	je     f012deb9 <test_krealloc_BF+0xab0>
			panic("krealloc: Wrong allocation: ");
f012dea2:	83 ec 04             	sub    $0x4,%esp
f012dea5:	68 8a bb 13 f0       	push   $0xf013bb8a
f012deaa:	68 6e 11 00 00       	push   $0x116e
f012deaf:	68 76 a8 13 f0       	push   $0xf013a876
f012deb4:	e8 ed 22 fd ff       	call   f01001a6 <_panic>
		lastIndices[7] = (3 * Mega - kilo) / sizeof(struct MyStruct) - 1;
f012deb9:	c7 85 0c fe ff ff 7f 	movl   $0x5ff7f,-0x1f4(%ebp)
f012dec0:	ff 05 00 
	char *byteArr1;
	//[3] Test read write access
	{
		//cprintf("\nTest read write access");
		//Test access for the first 1 MB
		freeFrames = sys_calculate_free_frames();
f012dec3:	e8 f6 e4 fd ff       	call   f010c3be <sys_calculate_free_frames>
f012dec8:	89 45 b8             	mov    %eax,-0x48(%ebp)

		//Write values
		//In 1st 1 MB
		lastIndexOfByte = (1 * Mega - kilo) / sizeof(char) - 1;
f012decb:	c7 85 f4 fe ff ff ff 	movl   $0xffbff,-0x10c(%ebp)
f012ded2:	fb 0f 00 
		byteArr = (char *) ptr_allocations[0];
f012ded5:	8b 85 40 fe ff ff    	mov    -0x1c0(%ebp),%eax
f012dedb:	89 85 f0 fe ff ff    	mov    %eax,-0x110(%ebp)
		byteArr[0] = minByte;
f012dee1:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f012dee7:	8a 55 cf             	mov    -0x31(%ebp),%dl
f012deea:	88 10                	mov    %dl,(%eax)
		byteArr[lastIndexOfByte] = maxByte;
f012deec:	8b 95 f4 fe ff ff    	mov    -0x10c(%ebp),%edx
f012def2:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f012def8:	01 c2                	add    %eax,%edx
f012defa:	8a 45 ce             	mov    -0x32(%ebp),%al
f012defd:	88 02                	mov    %al,(%edx)

		//In 2nd 1 MB
		ptr = (char*) ptr_allocations[1];
f012deff:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f012df05:	89 85 ec fe ff ff    	mov    %eax,-0x114(%ebp)
		for (int i = 0; i <= lastIndices[1]; ++i) {
f012df0b:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012df12:	eb 11                	jmp    f012df25 <test_krealloc_BF+0xb1c>
			ptr[i] = 2;
f012df14:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012df17:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f012df1d:	01 d0                	add    %edx,%eax
f012df1f:	c6 00 02             	movb   $0x2,(%eax)
		byteArr[0] = minByte;
		byteArr[lastIndexOfByte] = maxByte;

		//In 2nd 1 MB
		ptr = (char*) ptr_allocations[1];
		for (int i = 0; i <= lastIndices[1]; ++i) {
f012df22:	ff 45 f4             	incl   -0xc(%ebp)
f012df25:	8b 85 f4 fd ff ff    	mov    -0x20c(%ebp),%eax
f012df2b:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012df2e:	7d e4                	jge    f012df14 <test_krealloc_BF+0xb0b>
			ptr[i] = 2;
		}

		//In 3rd 1 MB
		intArr = (int*) ptr_allocations[2];
f012df30:	8b 85 48 fe ff ff    	mov    -0x1b8(%ebp),%eax
f012df36:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)
		intArr[0] = 3;
f012df3c:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f012df42:	c7 00 03 00 00 00    	movl   $0x3,(%eax)
		intArr[lastIndices[2]] = 3;
f012df48:	8b 85 f8 fd ff ff    	mov    -0x208(%ebp),%eax
f012df4e:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f012df55:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f012df5b:	01 d0                	add    %edx,%eax
f012df5d:	c7 00 03 00 00 00    	movl   $0x3,(%eax)

		//In 4th 1 MB
		intArr = (int*) ptr_allocations[3];
f012df63:	8b 85 4c fe ff ff    	mov    -0x1b4(%ebp),%eax
f012df69:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)
		for (int i = 0; i <= lastIndices[3]; ++i) {
f012df6f:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f012df76:	eb 1b                	jmp    f012df93 <test_krealloc_BF+0xb8a>
			intArr[i] = 4;
f012df78:	8b 45 f0             	mov    -0x10(%ebp),%eax
f012df7b:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f012df82:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f012df88:	01 d0                	add    %edx,%eax
f012df8a:	c7 00 04 00 00 00    	movl   $0x4,(%eax)
		intArr[0] = 3;
		intArr[lastIndices[2]] = 3;

		//In 4th 1 MB
		intArr = (int*) ptr_allocations[3];
		for (int i = 0; i <= lastIndices[3]; ++i) {
f012df90:	ff 45 f0             	incl   -0x10(%ebp)
f012df93:	8b 85 fc fd ff ff    	mov    -0x204(%ebp),%eax
f012df99:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f012df9c:	7d da                	jge    f012df78 <test_krealloc_BF+0xb6f>
			intArr[i] = 4;
		}

		//In 1st 2 MB
		shortArr = (short*) ptr_allocations[4];
f012df9e:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f012dfa4:	89 85 e4 fe ff ff    	mov    %eax,-0x11c(%ebp)
		for (int i = 0; i <= lastIndices[4]; ++i) {
f012dfaa:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f012dfb1:	eb 17                	jmp    f012dfca <test_krealloc_BF+0xbc1>
			shortArr[i] = 5;
f012dfb3:	8b 45 ec             	mov    -0x14(%ebp),%eax
f012dfb6:	01 c0                	add    %eax,%eax
f012dfb8:	89 c2                	mov    %eax,%edx
f012dfba:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f012dfc0:	01 d0                	add    %edx,%eax
f012dfc2:	66 c7 00 05 00       	movw   $0x5,(%eax)
			intArr[i] = 4;
		}

		//In 1st 2 MB
		shortArr = (short*) ptr_allocations[4];
		for (int i = 0; i <= lastIndices[4]; ++i) {
f012dfc7:	ff 45 ec             	incl   -0x14(%ebp)
f012dfca:	8b 85 00 fe ff ff    	mov    -0x200(%ebp),%eax
f012dfd0:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f012dfd3:	7d de                	jge    f012dfb3 <test_krealloc_BF+0xbaa>
			shortArr[i] = 5;
		}

		//In the 2nd 2 MB
		shortArr = (short*) ptr_allocations[5];
f012dfd5:	8b 85 54 fe ff ff    	mov    -0x1ac(%ebp),%eax
f012dfdb:	89 85 e4 fe ff ff    	mov    %eax,-0x11c(%ebp)
		shortArr[0] = 6;
f012dfe1:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f012dfe7:	66 c7 00 06 00       	movw   $0x6,(%eax)
		shortArr[lastIndices[5]] = 6;
f012dfec:	8b 85 04 fe ff ff    	mov    -0x1fc(%ebp),%eax
f012dff2:	01 c0                	add    %eax,%eax
f012dff4:	89 c2                	mov    %eax,%edx
f012dff6:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f012dffc:	01 d0                	add    %edx,%eax
f012dffe:	66 c7 00 06 00       	movw   $0x6,(%eax)

		//In the 1st 3 MB
		structArr = (struct MyStruct *) ptr_allocations[6];
f012e003:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f012e009:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
		for (int i = 0; i <= lastIndices[6]; i++) {
f012e00f:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
f012e016:	eb 49                	jmp    f012e061 <test_krealloc_BF+0xc58>
			structArr[i].a = 7;
f012e018:	8b 45 e8             	mov    -0x18(%ebp),%eax
f012e01b:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012e022:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012e028:	01 d0                	add    %edx,%eax
f012e02a:	c6 00 07             	movb   $0x7,(%eax)
			structArr[i].b = 7;
f012e02d:	8b 45 e8             	mov    -0x18(%ebp),%eax
f012e030:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012e037:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012e03d:	01 d0                	add    %edx,%eax
f012e03f:	66 c7 40 02 07 00    	movw   $0x7,0x2(%eax)
			structArr[i].c = 7;
f012e045:	8b 45 e8             	mov    -0x18(%ebp),%eax
f012e048:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012e04f:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012e055:	01 d0                	add    %edx,%eax
f012e057:	c7 40 04 07 00 00 00 	movl   $0x7,0x4(%eax)
		shortArr[0] = 6;
		shortArr[lastIndices[5]] = 6;

		//In the 1st 3 MB
		structArr = (struct MyStruct *) ptr_allocations[6];
		for (int i = 0; i <= lastIndices[6]; i++) {
f012e05e:	ff 45 e8             	incl   -0x18(%ebp)
f012e061:	8b 85 08 fe ff ff    	mov    -0x1f8(%ebp),%eax
f012e067:	3b 45 e8             	cmp    -0x18(%ebp),%eax
f012e06a:	7d ac                	jge    f012e018 <test_krealloc_BF+0xc0f>
			structArr[i].b = 7;
			structArr[i].c = 7;
		}

		//In the last 3 MB
		structArr = (struct MyStruct*) ptr_allocations[7];
f012e06c:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f012e072:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
		structArr[0].a = 8;
f012e078:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012e07e:	c6 00 08             	movb   $0x8,(%eax)
		structArr[0].b = 8;
f012e081:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012e087:	66 c7 40 02 08 00    	movw   $0x8,0x2(%eax)
		structArr[0].c = 8;
f012e08d:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012e093:	c7 40 04 08 00 00 00 	movl   $0x8,0x4(%eax)
		structArr[lastIndices[7]].a = 8;
f012e09a:	8b 85 0c fe ff ff    	mov    -0x1f4(%ebp),%eax
f012e0a0:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012e0a7:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012e0ad:	01 d0                	add    %edx,%eax
f012e0af:	c6 00 08             	movb   $0x8,(%eax)
		structArr[lastIndices[7]].b = 8;
f012e0b2:	8b 85 0c fe ff ff    	mov    -0x1f4(%ebp),%eax
f012e0b8:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012e0bf:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012e0c5:	01 d0                	add    %edx,%eax
f012e0c7:	66 c7 40 02 08 00    	movw   $0x8,0x2(%eax)
		structArr[lastIndices[7]].c = 8;
f012e0cd:	8b 85 0c fe ff ff    	mov    -0x1f4(%ebp),%eax
f012e0d3:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012e0da:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012e0e0:	01 d0                	add    %edx,%eax
f012e0e2:	c7 40 04 08 00 00 00 	movl   $0x8,0x4(%eax)

		//Read values: check that the values are successfully written
		if (byteArr[0] != minByte || byteArr[lastIndices[0]] != maxByte)
f012e0e9:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f012e0ef:	8a 00                	mov    (%eax),%al
f012e0f1:	3a 45 cf             	cmp    -0x31(%ebp),%al
f012e0f4:	75 17                	jne    f012e10d <test_krealloc_BF+0xd04>
f012e0f6:	8b 85 f0 fd ff ff    	mov    -0x210(%ebp),%eax
f012e0fc:	89 c2                	mov    %eax,%edx
f012e0fe:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f012e104:	01 d0                	add    %edx,%eax
f012e106:	8a 00                	mov    (%eax),%al
f012e108:	3a 45 ce             	cmp    -0x32(%ebp),%al
f012e10b:	74 17                	je     f012e124 <test_krealloc_BF+0xd1b>
			panic(
f012e10d:	83 ec 04             	sub    $0x4,%esp
f012e110:	68 a8 bb 13 f0       	push   $0xf013bba8
f012e115:	68 b1 11 00 00       	push   $0x11b1
f012e11a:	68 76 a8 13 f0       	push   $0xf013a876
f012e11f:	e8 82 20 fd ff       	call   f01001a6 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");

		ptr = (char*) ptr_allocations[1];
f012e124:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f012e12a:	89 85 ec fe ff ff    	mov    %eax,-0x114(%ebp)
		if (ptr[0] != 2 || ptr[lastIndices[1]] != 2)
f012e130:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f012e136:	8a 00                	mov    (%eax),%al
f012e138:	3c 02                	cmp    $0x2,%al
f012e13a:	75 16                	jne    f012e152 <test_krealloc_BF+0xd49>
f012e13c:	8b 85 f4 fd ff ff    	mov    -0x20c(%ebp),%eax
f012e142:	89 c2                	mov    %eax,%edx
f012e144:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f012e14a:	01 d0                	add    %edx,%eax
f012e14c:	8a 00                	mov    (%eax),%al
f012e14e:	3c 02                	cmp    $0x2,%al
f012e150:	74 20                	je     f012e172 <test_krealloc_BF+0xd69>
			panic(
f012e152:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f012e158:	8a 00                	mov    (%eax),%al
f012e15a:	0f be c0             	movsbl %al,%eax
f012e15d:	50                   	push   %eax
f012e15e:	68 e8 bb 13 f0       	push   $0xf013bbe8
f012e163:	68 b7 11 00 00       	push   $0x11b7
f012e168:	68 76 a8 13 f0       	push   $0xf013a876
f012e16d:	e8 34 20 fd ff       	call   f01001a6 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!, char = %c",
					ptr[0]);

		intArr = (int*) ptr_allocations[2];
f012e172:	8b 85 48 fe ff ff    	mov    -0x1b8(%ebp),%eax
f012e178:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)
		if (intArr[0] != 3 || intArr[lastIndices[2]] != 3)
f012e17e:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f012e184:	8b 00                	mov    (%eax),%eax
f012e186:	83 f8 03             	cmp    $0x3,%eax
f012e189:	75 1c                	jne    f012e1a7 <test_krealloc_BF+0xd9e>
f012e18b:	8b 85 f8 fd ff ff    	mov    -0x208(%ebp),%eax
f012e191:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f012e198:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f012e19e:	01 d0                	add    %edx,%eax
f012e1a0:	8b 00                	mov    (%eax),%eax
f012e1a2:	83 f8 03             	cmp    $0x3,%eax
f012e1a5:	74 17                	je     f012e1be <test_krealloc_BF+0xdb5>
			panic("Wrong allocation stored values are wrongly changed!");
f012e1a7:	83 ec 04             	sub    $0x4,%esp
f012e1aa:	68 34 bc 13 f0       	push   $0xf013bc34
f012e1af:	68 bb 11 00 00       	push   $0x11bb
f012e1b4:	68 76 a8 13 f0       	push   $0xf013a876
f012e1b9:	e8 e8 1f fd ff       	call   f01001a6 <_panic>

		intArr = (int*) ptr_allocations[3];
f012e1be:	8b 85 4c fe ff ff    	mov    -0x1b4(%ebp),%eax
f012e1c4:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)
		if (intArr[0] != 4 || intArr[lastIndices[3]] != 4)
f012e1ca:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f012e1d0:	8b 00                	mov    (%eax),%eax
f012e1d2:	83 f8 04             	cmp    $0x4,%eax
f012e1d5:	75 1c                	jne    f012e1f3 <test_krealloc_BF+0xdea>
f012e1d7:	8b 85 fc fd ff ff    	mov    -0x204(%ebp),%eax
f012e1dd:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f012e1e4:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f012e1ea:	01 d0                	add    %edx,%eax
f012e1ec:	8b 00                	mov    (%eax),%eax
f012e1ee:	83 f8 04             	cmp    $0x4,%eax
f012e1f1:	74 17                	je     f012e20a <test_krealloc_BF+0xe01>
			panic(
f012e1f3:	83 ec 04             	sub    $0x4,%esp
f012e1f6:	68 a8 bb 13 f0       	push   $0xf013bba8
f012e1fb:	68 c0 11 00 00       	push   $0x11c0
f012e200:	68 76 a8 13 f0       	push   $0xf013a876
f012e205:	e8 9c 1f fd ff       	call   f01001a6 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");

		shortArr = (short*) ptr_allocations[4];
f012e20a:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f012e210:	89 85 e4 fe ff ff    	mov    %eax,-0x11c(%ebp)
		if (shortArr[0] != 5 || shortArr[lastIndices[4]] != 5)
f012e216:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f012e21c:	66 8b 00             	mov    (%eax),%ax
f012e21f:	66 83 f8 05          	cmp    $0x5,%ax
f012e223:	75 1b                	jne    f012e240 <test_krealloc_BF+0xe37>
f012e225:	8b 85 00 fe ff ff    	mov    -0x200(%ebp),%eax
f012e22b:	01 c0                	add    %eax,%eax
f012e22d:	89 c2                	mov    %eax,%edx
f012e22f:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f012e235:	01 d0                	add    %edx,%eax
f012e237:	66 8b 00             	mov    (%eax),%ax
f012e23a:	66 83 f8 05          	cmp    $0x5,%ax
f012e23e:	74 17                	je     f012e257 <test_krealloc_BF+0xe4e>
			panic(
f012e240:	83 ec 04             	sub    $0x4,%esp
f012e243:	68 a8 bb 13 f0       	push   $0xf013bba8
f012e248:	68 c5 11 00 00       	push   $0x11c5
f012e24d:	68 76 a8 13 f0       	push   $0xf013a876
f012e252:	e8 4f 1f fd ff       	call   f01001a6 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");

		shortArr = (short*) ptr_allocations[5];
f012e257:	8b 85 54 fe ff ff    	mov    -0x1ac(%ebp),%eax
f012e25d:	89 85 e4 fe ff ff    	mov    %eax,-0x11c(%ebp)
		if (shortArr[0] != 6 || shortArr[lastIndices[5]] != 6)
f012e263:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f012e269:	66 8b 00             	mov    (%eax),%ax
f012e26c:	66 83 f8 06          	cmp    $0x6,%ax
f012e270:	75 1b                	jne    f012e28d <test_krealloc_BF+0xe84>
f012e272:	8b 85 04 fe ff ff    	mov    -0x1fc(%ebp),%eax
f012e278:	01 c0                	add    %eax,%eax
f012e27a:	89 c2                	mov    %eax,%edx
f012e27c:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f012e282:	01 d0                	add    %edx,%eax
f012e284:	66 8b 00             	mov    (%eax),%ax
f012e287:	66 83 f8 06          	cmp    $0x6,%ax
f012e28b:	74 17                	je     f012e2a4 <test_krealloc_BF+0xe9b>
			panic(
f012e28d:	83 ec 04             	sub    $0x4,%esp
f012e290:	68 a8 bb 13 f0       	push   $0xf013bba8
f012e295:	68 ca 11 00 00       	push   $0x11ca
f012e29a:	68 76 a8 13 f0       	push   $0xf013a876
f012e29f:	e8 02 1f fd ff       	call   f01001a6 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");

		structArr = (struct MyStruct*) ptr_allocations[6];
f012e2a4:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f012e2aa:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
		if (structArr[0].a != 7 || structArr[lastIndices[6]].a != 7)
f012e2b0:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012e2b6:	8a 00                	mov    (%eax),%al
f012e2b8:	3c 07                	cmp    $0x7,%al
f012e2ba:	75 1b                	jne    f012e2d7 <test_krealloc_BF+0xece>
f012e2bc:	8b 85 08 fe ff ff    	mov    -0x1f8(%ebp),%eax
f012e2c2:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012e2c9:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012e2cf:	01 d0                	add    %edx,%eax
f012e2d1:	8a 00                	mov    (%eax),%al
f012e2d3:	3c 07                	cmp    $0x7,%al
f012e2d5:	74 17                	je     f012e2ee <test_krealloc_BF+0xee5>
			panic(
f012e2d7:	83 ec 04             	sub    $0x4,%esp
f012e2da:	68 a8 bb 13 f0       	push   $0xf013bba8
f012e2df:	68 cf 11 00 00       	push   $0x11cf
f012e2e4:	68 76 a8 13 f0       	push   $0xf013a876
f012e2e9:	e8 b8 1e fd ff       	call   f01001a6 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");
		if (structArr[0].b != 7 || structArr[lastIndices[6]].b != 7)
f012e2ee:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012e2f4:	66 8b 40 02          	mov    0x2(%eax),%ax
f012e2f8:	66 83 f8 07          	cmp    $0x7,%ax
f012e2fc:	75 1f                	jne    f012e31d <test_krealloc_BF+0xf14>
f012e2fe:	8b 85 08 fe ff ff    	mov    -0x1f8(%ebp),%eax
f012e304:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012e30b:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012e311:	01 d0                	add    %edx,%eax
f012e313:	66 8b 40 02          	mov    0x2(%eax),%ax
f012e317:	66 83 f8 07          	cmp    $0x7,%ax
f012e31b:	74 17                	je     f012e334 <test_krealloc_BF+0xf2b>
			panic(
f012e31d:	83 ec 04             	sub    $0x4,%esp
f012e320:	68 a8 bb 13 f0       	push   $0xf013bba8
f012e325:	68 d2 11 00 00       	push   $0x11d2
f012e32a:	68 76 a8 13 f0       	push   $0xf013a876
f012e32f:	e8 72 1e fd ff       	call   f01001a6 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");
		if (structArr[0].c != 7 || structArr[lastIndices[6]].c != 7)
f012e334:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012e33a:	8b 40 04             	mov    0x4(%eax),%eax
f012e33d:	83 f8 07             	cmp    $0x7,%eax
f012e340:	75 1d                	jne    f012e35f <test_krealloc_BF+0xf56>
f012e342:	8b 85 08 fe ff ff    	mov    -0x1f8(%ebp),%eax
f012e348:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012e34f:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012e355:	01 d0                	add    %edx,%eax
f012e357:	8b 40 04             	mov    0x4(%eax),%eax
f012e35a:	83 f8 07             	cmp    $0x7,%eax
f012e35d:	74 17                	je     f012e376 <test_krealloc_BF+0xf6d>
			panic(
f012e35f:	83 ec 04             	sub    $0x4,%esp
f012e362:	68 a8 bb 13 f0       	push   $0xf013bba8
f012e367:	68 d5 11 00 00       	push   $0x11d5
f012e36c:	68 76 a8 13 f0       	push   $0xf013a876
f012e371:	e8 30 1e fd ff       	call   f01001a6 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");

		structArr = (struct MyStruct*) ptr_allocations[7];
f012e376:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f012e37c:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
		if (structArr[0].a != 8 || structArr[lastIndices[7]].a != 8)
f012e382:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012e388:	8a 00                	mov    (%eax),%al
f012e38a:	3c 08                	cmp    $0x8,%al
f012e38c:	75 1b                	jne    f012e3a9 <test_krealloc_BF+0xfa0>
f012e38e:	8b 85 0c fe ff ff    	mov    -0x1f4(%ebp),%eax
f012e394:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012e39b:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012e3a1:	01 d0                	add    %edx,%eax
f012e3a3:	8a 00                	mov    (%eax),%al
f012e3a5:	3c 08                	cmp    $0x8,%al
f012e3a7:	74 17                	je     f012e3c0 <test_krealloc_BF+0xfb7>
			panic(
f012e3a9:	83 ec 04             	sub    $0x4,%esp
f012e3ac:	68 a8 bb 13 f0       	push   $0xf013bba8
f012e3b1:	68 da 11 00 00       	push   $0x11da
f012e3b6:	68 76 a8 13 f0       	push   $0xf013a876
f012e3bb:	e8 e6 1d fd ff       	call   f01001a6 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");
		if (structArr[0].b != 8 || structArr[lastIndices[7]].b != 8)
f012e3c0:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012e3c6:	66 8b 40 02          	mov    0x2(%eax),%ax
f012e3ca:	66 83 f8 08          	cmp    $0x8,%ax
f012e3ce:	75 1f                	jne    f012e3ef <test_krealloc_BF+0xfe6>
f012e3d0:	8b 85 0c fe ff ff    	mov    -0x1f4(%ebp),%eax
f012e3d6:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012e3dd:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012e3e3:	01 d0                	add    %edx,%eax
f012e3e5:	66 8b 40 02          	mov    0x2(%eax),%ax
f012e3e9:	66 83 f8 08          	cmp    $0x8,%ax
f012e3ed:	74 17                	je     f012e406 <test_krealloc_BF+0xffd>
			panic(
f012e3ef:	83 ec 04             	sub    $0x4,%esp
f012e3f2:	68 a8 bb 13 f0       	push   $0xf013bba8
f012e3f7:	68 dd 11 00 00       	push   $0x11dd
f012e3fc:	68 76 a8 13 f0       	push   $0xf013a876
f012e401:	e8 a0 1d fd ff       	call   f01001a6 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");
		if (structArr[0].c != 8 || structArr[lastIndices[7]].c != 8)
f012e406:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012e40c:	8b 40 04             	mov    0x4(%eax),%eax
f012e40f:	83 f8 08             	cmp    $0x8,%eax
f012e412:	75 1d                	jne    f012e431 <test_krealloc_BF+0x1028>
f012e414:	8b 85 0c fe ff ff    	mov    -0x1f4(%ebp),%eax
f012e41a:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012e421:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012e427:	01 d0                	add    %edx,%eax
f012e429:	8b 40 04             	mov    0x4(%eax),%eax
f012e42c:	83 f8 08             	cmp    $0x8,%eax
f012e42f:	74 17                	je     f012e448 <test_krealloc_BF+0x103f>
			panic(
f012e431:	83 ec 04             	sub    $0x4,%esp
f012e434:	68 a8 bb 13 f0       	push   $0xf013bba8
f012e439:	68 e0 11 00 00       	push   $0x11e0
f012e43e:	68 76 a8 13 f0       	push   $0xf013a876
f012e443:	e8 5e 1d fd ff       	call   f01001a6 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");

		if ((freeFrames - sys_calculate_free_frames()) != 0)
f012e448:	e8 71 df fd ff       	call   f010c3be <sys_calculate_free_frames>
f012e44d:	89 c2                	mov    %eax,%edx
f012e44f:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012e452:	39 c2                	cmp    %eax,%edx
f012e454:	74 17                	je     f012e46d <test_krealloc_BF+0x1064>
			panic(
f012e456:	83 ec 04             	sub    $0x4,%esp
f012e459:	68 68 bc 13 f0       	push   $0xf013bc68
f012e45e:	68 e4 11 00 00       	push   $0x11e4
f012e463:	68 76 a8 13 f0       	push   $0xf013a876
f012e468:	e8 39 1d fd ff       	call   f01001a6 <_panic>
					"krealloc: Wrong allocation pages are not loaded successfully into memory");

	}
	cprintf("\nkrealloc: current evaluation = 10%");
f012e46d:	83 ec 0c             	sub    $0xc,%esp
f012e470:	68 b4 bc 13 f0       	push   $0xf013bcb4
f012e475:	e8 b3 27 fd ff       	call   f0100c2d <cprintf>
f012e47a:	83 c4 10             	add    $0x10,%esp

	//[3] Test krealloc by passing size = 0
	{
		//kfree 1st 1 MB
		freeFrames = sys_calculate_free_frames();
f012e47d:	e8 3c df fd ff       	call   f010c3be <sys_calculate_free_frames>
f012e482:	89 45 b8             	mov    %eax,-0x48(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f012e485:	e8 02 58 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f012e48a:	89 85 dc fe ff ff    	mov    %eax,-0x124(%ebp)
		krealloc(ptr_allocations[0], 0);
f012e490:	8b 85 40 fe ff ff    	mov    -0x1c0(%ebp),%eax
f012e496:	83 ec 08             	sub    $0x8,%esp
f012e499:	6a 00                	push   $0x0
f012e49b:	50                   	push   %eax
f012e49c:	e8 eb 91 fd ff       	call   f010768c <krealloc>
f012e4a1:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0)
f012e4a4:	e8 e3 57 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f012e4a9:	3b 85 dc fe ff ff    	cmp    -0x124(%ebp),%eax
f012e4af:	74 17                	je     f012e4c8 <test_krealloc_BF+0x10bf>
			panic(
f012e4b1:	83 ec 04             	sub    $0x4,%esp
f012e4b4:	68 d8 bc 13 f0       	push   $0xf013bcd8
f012e4b9:	68 f1 11 00 00       	push   $0x11f1
f012e4be:	68 76 a8 13 f0       	push   $0xf013a876
f012e4c3:	e8 de 1c fd ff       	call   f01001a6 <_panic>
					"krealloc: Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((sys_calculate_free_frames() - freeFrames) != 256)
f012e4c8:	e8 f1 de fd ff       	call   f010c3be <sys_calculate_free_frames>
f012e4cd:	89 c2                	mov    %eax,%edx
f012e4cf:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012e4d2:	29 c2                	sub    %eax,%edx
f012e4d4:	89 d0                	mov    %edx,%eax
f012e4d6:	3d 00 01 00 00       	cmp    $0x100,%eax
f012e4db:	74 17                	je     f012e4f4 <test_krealloc_BF+0x10eb>
			panic("krealloc: pages in memory are not freed correctly");
f012e4dd:	83 ec 04             	sub    $0x4,%esp
f012e4e0:	68 4c bd 13 f0       	push   $0xf013bd4c
f012e4e5:	68 f3 11 00 00       	push   $0x11f3
f012e4ea:	68 76 a8 13 f0       	push   $0xf013a876
f012e4ef:	e8 b2 1c fd ff       	call   f01001a6 <_panic>

		//kfree 3rd 1 MB
		freeFrames = sys_calculate_free_frames();
f012e4f4:	e8 c5 de fd ff       	call   f010c3be <sys_calculate_free_frames>
f012e4f9:	89 45 b8             	mov    %eax,-0x48(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f012e4fc:	e8 8b 57 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f012e501:	89 85 dc fe ff ff    	mov    %eax,-0x124(%ebp)

		krealloc(ptr_allocations[2], 0);
f012e507:	8b 85 48 fe ff ff    	mov    -0x1b8(%ebp),%eax
f012e50d:	83 ec 08             	sub    $0x8,%esp
f012e510:	6a 00                	push   $0x0
f012e512:	50                   	push   %eax
f012e513:	e8 74 91 fd ff       	call   f010768c <krealloc>
f012e518:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0)
f012e51b:	e8 6c 57 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f012e520:	3b 85 dc fe ff ff    	cmp    -0x124(%ebp),%eax
f012e526:	74 17                	je     f012e53f <test_krealloc_BF+0x1136>
			panic(
f012e528:	83 ec 04             	sub    $0x4,%esp
f012e52b:	68 d8 bc 13 f0       	push   $0xf013bcd8
f012e530:	68 fc 11 00 00       	push   $0x11fc
f012e535:	68 76 a8 13 f0       	push   $0xf013a876
f012e53a:	e8 67 1c fd ff       	call   f01001a6 <_panic>
					"krealloc: Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((sys_calculate_free_frames() - freeFrames) != 256)
f012e53f:	e8 7a de fd ff       	call   f010c3be <sys_calculate_free_frames>
f012e544:	89 c2                	mov    %eax,%edx
f012e546:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012e549:	29 c2                	sub    %eax,%edx
f012e54b:	89 d0                	mov    %edx,%eax
f012e54d:	3d 00 01 00 00       	cmp    $0x100,%eax
f012e552:	74 17                	je     f012e56b <test_krealloc_BF+0x1162>
			panic("krealloc: pages in memory are not freed correctly");
f012e554:	83 ec 04             	sub    $0x4,%esp
f012e557:	68 4c bd 13 f0       	push   $0xf013bd4c
f012e55c:	68 fe 11 00 00       	push   $0x11fe
f012e561:	68 76 a8 13 f0       	push   $0xf013a876
f012e566:	e8 3b 1c fd ff       	call   f01001a6 <_panic>

		//kfree 2nd 2 MB
		freeFrames = sys_calculate_free_frames();
f012e56b:	e8 4e de fd ff       	call   f010c3be <sys_calculate_free_frames>
f012e570:	89 45 b8             	mov    %eax,-0x48(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f012e573:	e8 14 57 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f012e578:	89 85 dc fe ff ff    	mov    %eax,-0x124(%ebp)
		krealloc(ptr_allocations[5], 0);
f012e57e:	8b 85 54 fe ff ff    	mov    -0x1ac(%ebp),%eax
f012e584:	83 ec 08             	sub    $0x8,%esp
f012e587:	6a 00                	push   $0x0
f012e589:	50                   	push   %eax
f012e58a:	e8 fd 90 fd ff       	call   f010768c <krealloc>
f012e58f:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0)
f012e592:	e8 f5 56 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f012e597:	3b 85 dc fe ff ff    	cmp    -0x124(%ebp),%eax
f012e59d:	74 17                	je     f012e5b6 <test_krealloc_BF+0x11ad>
			panic(
f012e59f:	83 ec 04             	sub    $0x4,%esp
f012e5a2:	68 90 a8 13 f0       	push   $0xf013a890
f012e5a7:	68 06 12 00 00       	push   $0x1206
f012e5ac:	68 76 a8 13 f0       	push   $0xf013a876
f012e5b1:	e8 f0 1b fd ff       	call   f01001a6 <_panic>
					"Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((sys_calculate_free_frames() - freeFrames) != 2 * Mega / PAGE_SIZE)
f012e5b6:	e8 03 de fd ff       	call   f010c3be <sys_calculate_free_frames>
f012e5bb:	89 c2                	mov    %eax,%edx
f012e5bd:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012e5c0:	29 c2                	sub    %eax,%edx
f012e5c2:	89 d0                	mov    %edx,%eax
f012e5c4:	3d 00 02 00 00       	cmp    $0x200,%eax
f012e5c9:	74 17                	je     f012e5e2 <test_krealloc_BF+0x11d9>
			panic("krealloc: pages in memory are not freed correctly");
f012e5cb:	83 ec 04             	sub    $0x4,%esp
f012e5ce:	68 4c bd 13 f0       	push   $0xf013bd4c
f012e5d3:	68 08 12 00 00       	push   $0x1208
f012e5d8:	68 76 a8 13 f0       	push   $0xf013a876
f012e5dd:	e8 c4 1b fd ff       	call   f01001a6 <_panic>

		//kfree last 3 MB
		freeFrames = sys_calculate_free_frames();
f012e5e2:	e8 d7 dd fd ff       	call   f010c3be <sys_calculate_free_frames>
f012e5e7:	89 45 b8             	mov    %eax,-0x48(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f012e5ea:	e8 9d 56 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f012e5ef:	89 85 dc fe ff ff    	mov    %eax,-0x124(%ebp)
		krealloc(ptr_allocations[7], 0);
f012e5f5:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f012e5fb:	83 ec 08             	sub    $0x8,%esp
f012e5fe:	6a 00                	push   $0x0
f012e600:	50                   	push   %eax
f012e601:	e8 86 90 fd ff       	call   f010768c <krealloc>
f012e606:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0)
f012e609:	e8 7e 56 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f012e60e:	3b 85 dc fe ff ff    	cmp    -0x124(%ebp),%eax
f012e614:	74 17                	je     f012e62d <test_krealloc_BF+0x1224>
			panic(
f012e616:	83 ec 04             	sub    $0x4,%esp
f012e619:	68 d8 bc 13 f0       	push   $0xf013bcd8
f012e61e:	68 10 12 00 00       	push   $0x1210
f012e623:	68 76 a8 13 f0       	push   $0xf013a876
f012e628:	e8 79 1b fd ff       	call   f01001a6 <_panic>
					"krealloc: Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((sys_calculate_free_frames() - freeFrames) != 3 * Mega / PAGE_SIZE)
f012e62d:	e8 8c dd fd ff       	call   f010c3be <sys_calculate_free_frames>
f012e632:	89 c2                	mov    %eax,%edx
f012e634:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012e637:	29 c2                	sub    %eax,%edx
f012e639:	89 d0                	mov    %edx,%eax
f012e63b:	3d 00 03 00 00       	cmp    $0x300,%eax
f012e640:	74 17                	je     f012e659 <test_krealloc_BF+0x1250>
			panic(
f012e642:	83 ec 04             	sub    $0x4,%esp
f012e645:	68 80 bd 13 f0       	push   $0xf013bd80
f012e64a:	68 13 12 00 00       	push   $0x1213
f012e64f:	68 76 a8 13 f0       	push   $0xf013a876
f012e654:	e8 4d 1b fd ff       	call   f01001a6 <_panic>
					"krealloc: Wrong kfree: pages in memory are not freed correctly");
		//check tables	[15%]
		{
			long long va;
			for (va = KERNEL_HEAP_START; va < (long long) KERNEL_HEAP_MAX; va +=
f012e659:	c7 45 e0 00 00 00 f6 	movl   $0xf6000000,-0x20(%ebp)
f012e660:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
f012e667:	eb 48                	jmp    f012e6b1 <test_krealloc_BF+0x12a8>
			PTSIZE)
			{
				uint32 *ptr_table;
				get_page_table(ptr_page_directory,  (uint32) va,
f012e669:	8b 55 e0             	mov    -0x20(%ebp),%edx
f012e66c:	a1 b8 0e 6c f0       	mov    0xf06c0eb8,%eax
f012e671:	83 ec 04             	sub    $0x4,%esp
f012e674:	8d 8d 9c fd ff ff    	lea    -0x264(%ebp),%ecx
f012e67a:	51                   	push   %ecx
f012e67b:	52                   	push   %edx
f012e67c:	50                   	push   %eax
f012e67d:	e8 e7 82 fd ff       	call   f0106969 <get_page_table>
f012e682:	83 c4 10             	add    $0x10,%esp
						&ptr_table);
				if (ptr_table == NULL) {
f012e685:	8b 85 9c fd ff ff    	mov    -0x264(%ebp),%eax
f012e68b:	85 c0                	test   %eax,%eax
f012e68d:	75 17                	jne    f012e6a6 <test_krealloc_BF+0x129d>
					panic(
f012e68f:	83 ec 04             	sub    $0x4,%esp
f012e692:	68 78 b1 13 f0       	push   $0xf013b178
f012e697:	68 1f 12 00 00       	push   $0x121f
f012e69c:	68 76 a8 13 f0       	push   $0xf013a876
f012e6a1:	e8 00 1b fd ff       	call   f01001a6 <_panic>
			panic(
					"krealloc: Wrong kfree: pages in memory are not freed correctly");
		//check tables	[15%]
		{
			long long va;
			for (va = KERNEL_HEAP_START; va < (long long) KERNEL_HEAP_MAX; va +=
f012e6a6:	81 45 e0 00 00 40 00 	addl   $0x400000,-0x20(%ebp)
f012e6ad:	83 55 e4 00          	adcl   $0x0,-0x1c(%ebp)
f012e6b1:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f012e6b5:	78 b2                	js     f012e669 <test_krealloc_BF+0x1260>
f012e6b7:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f012e6bb:	7f 09                	jg     f012e6c6 <test_krealloc_BF+0x12bd>
f012e6bd:	81 7d e0 ff ef ff ff 	cmpl   $0xffffefff,-0x20(%ebp)
f012e6c4:	76 a3                	jbe    f012e669 <test_krealloc_BF+0x1260>
							"Wrong kfree: one of the kernel tables is wrongly removed! Tables should not be removed here in kfree");
				}
			}
		}
	}
	cprintf("\b\b\b20%");
f012e6c6:	83 ec 0c             	sub    $0xc,%esp
f012e6c9:	68 bf bd 13 f0       	push   $0xf013bdbf
f012e6ce:	e8 5a 25 fd ff       	call   f0100c2d <cprintf>
f012e6d3:	83 c4 10             	add    $0x10,%esp
	//Check memory access after kfree by checking sum
	{
		//2nd 1 MB
		//cprintf("2nd 1 MB\n");
		ptr = (char*) ptr_allocations[1];
f012e6d6:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f012e6dc:	89 85 ec fe ff ff    	mov    %eax,-0x114(%ebp)
		int i;
		for (i = 0; i <= lastIndices[1]; ++i) {
f012e6e2:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
f012e6e9:	eb 21                	jmp    f012e70c <test_krealloc_BF+0x1303>
			sums[0] += ptr[i];
f012e6eb:	8b 95 a0 fd ff ff    	mov    -0x260(%ebp),%edx
f012e6f1:	8b 4d dc             	mov    -0x24(%ebp),%ecx
f012e6f4:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f012e6fa:	01 c8                	add    %ecx,%eax
f012e6fc:	8a 00                	mov    (%eax),%al
f012e6fe:	0f be c0             	movsbl %al,%eax
f012e701:	01 d0                	add    %edx,%eax
f012e703:	89 85 a0 fd ff ff    	mov    %eax,-0x260(%ebp)
	{
		//2nd 1 MB
		//cprintf("2nd 1 MB\n");
		ptr = (char*) ptr_allocations[1];
		int i;
		for (i = 0; i <= lastIndices[1]; ++i) {
f012e709:	ff 45 dc             	incl   -0x24(%ebp)
f012e70c:	8b 85 f4 fd ff ff    	mov    -0x20c(%ebp),%eax
f012e712:	3b 45 dc             	cmp    -0x24(%ebp),%eax
f012e715:	7d d4                	jge    f012e6eb <test_krealloc_BF+0x12e2>
			sums[0] += ptr[i];

		}
		//cprintf("sum for 2nd 1 MB = %d LIM1 = %d\n", sums[0], (lastIndices[1] - 1));
		if (sums[0] != (lastIndices[1] + 1) * 2)
f012e717:	8b 85 a0 fd ff ff    	mov    -0x260(%ebp),%eax
f012e71d:	8b 95 f4 fd ff ff    	mov    -0x20c(%ebp),%edx
f012e723:	42                   	inc    %edx
f012e724:	01 d2                	add    %edx,%edx
f012e726:	39 d0                	cmp    %edx,%eax
f012e728:	74 17                	je     f012e741 <test_krealloc_BF+0x1338>
			panic("krealloc: invalid read after freeing some allocations");
f012e72a:	83 ec 04             	sub    $0x4,%esp
f012e72d:	68 c8 bd 13 f0       	push   $0xf013bdc8
f012e732:	68 31 12 00 00       	push   $0x1231
f012e737:	68 76 a8 13 f0       	push   $0xf013a876
f012e73c:	e8 65 1a fd ff       	call   f01001a6 <_panic>

		//4th 1 MB
		//cprintf("4th 1 MB\n");
		intArr = (int*) ptr_allocations[3];
f012e741:	8b 85 4c fe ff ff    	mov    -0x1b4(%ebp),%eax
f012e747:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)

		for (i = 0; i <= lastIndices[3]; ++i) {
f012e74d:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
f012e754:	eb 25                	jmp    f012e77b <test_krealloc_BF+0x1372>
			sums[1] += intArr[i];
f012e756:	8b 95 a4 fd ff ff    	mov    -0x25c(%ebp),%edx
f012e75c:	8b 45 dc             	mov    -0x24(%ebp),%eax
f012e75f:	8d 0c 85 00 00 00 00 	lea    0x0(,%eax,4),%ecx
f012e766:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f012e76c:	01 c8                	add    %ecx,%eax
f012e76e:	8b 00                	mov    (%eax),%eax
f012e770:	01 d0                	add    %edx,%eax
f012e772:	89 85 a4 fd ff ff    	mov    %eax,-0x25c(%ebp)

		//4th 1 MB
		//cprintf("4th 1 MB\n");
		intArr = (int*) ptr_allocations[3];

		for (i = 0; i <= lastIndices[3]; ++i) {
f012e778:	ff 45 dc             	incl   -0x24(%ebp)
f012e77b:	8b 85 fc fd ff ff    	mov    -0x204(%ebp),%eax
f012e781:	3b 45 dc             	cmp    -0x24(%ebp),%eax
f012e784:	7d d0                	jge    f012e756 <test_krealloc_BF+0x134d>
			sums[1] += intArr[i];
		}
		if (sums[1] != (lastIndices[3] + 1) * 4)
f012e786:	8b 85 a4 fd ff ff    	mov    -0x25c(%ebp),%eax
f012e78c:	8b 95 fc fd ff ff    	mov    -0x204(%ebp),%edx
f012e792:	42                   	inc    %edx
f012e793:	c1 e2 02             	shl    $0x2,%edx
f012e796:	39 d0                	cmp    %edx,%eax
f012e798:	74 17                	je     f012e7b1 <test_krealloc_BF+0x13a8>
			panic("krealloc: invalid read after freeing some allocations");
f012e79a:	83 ec 04             	sub    $0x4,%esp
f012e79d:	68 c8 bd 13 f0       	push   $0xf013bdc8
f012e7a2:	68 3b 12 00 00       	push   $0x123b
f012e7a7:	68 76 a8 13 f0       	push   $0xf013a876
f012e7ac:	e8 f5 19 fd ff       	call   f01001a6 <_panic>

		//1st 2 MB
		//cprintf("1st 2 MB\n");
		shortArr = (short*) ptr_allocations[4];
f012e7b1:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f012e7b7:	89 85 e4 fe ff ff    	mov    %eax,-0x11c(%ebp)

		for (i = 0; i <= lastIndices[4]; ++i) {
f012e7bd:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
f012e7c4:	eb 24                	jmp    f012e7ea <test_krealloc_BF+0x13e1>
			sums[2] += shortArr[i];
f012e7c6:	8b 95 a8 fd ff ff    	mov    -0x258(%ebp),%edx
f012e7cc:	8b 45 dc             	mov    -0x24(%ebp),%eax
f012e7cf:	01 c0                	add    %eax,%eax
f012e7d1:	89 c1                	mov    %eax,%ecx
f012e7d3:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f012e7d9:	01 c8                	add    %ecx,%eax
f012e7db:	66 8b 00             	mov    (%eax),%ax
f012e7de:	98                   	cwtl   
f012e7df:	01 d0                	add    %edx,%eax
f012e7e1:	89 85 a8 fd ff ff    	mov    %eax,-0x258(%ebp)

		//1st 2 MB
		//cprintf("1st 2 MB\n");
		shortArr = (short*) ptr_allocations[4];

		for (i = 0; i <= lastIndices[4]; ++i) {
f012e7e7:	ff 45 dc             	incl   -0x24(%ebp)
f012e7ea:	8b 85 00 fe ff ff    	mov    -0x200(%ebp),%eax
f012e7f0:	3b 45 dc             	cmp    -0x24(%ebp),%eax
f012e7f3:	7d d1                	jge    f012e7c6 <test_krealloc_BF+0x13bd>
			sums[2] += shortArr[i];
		}
		if (sums[2] != (lastIndices[4] + 1) * 5)
f012e7f5:	8b 95 a8 fd ff ff    	mov    -0x258(%ebp),%edx
f012e7fb:	8b 85 00 fe ff ff    	mov    -0x200(%ebp),%eax
f012e801:	8d 48 01             	lea    0x1(%eax),%ecx
f012e804:	89 c8                	mov    %ecx,%eax
f012e806:	c1 e0 02             	shl    $0x2,%eax
f012e809:	01 c8                	add    %ecx,%eax
f012e80b:	39 c2                	cmp    %eax,%edx
f012e80d:	74 17                	je     f012e826 <test_krealloc_BF+0x141d>
			panic("krealloc: invalid read after freeing some allocations");
f012e80f:	83 ec 04             	sub    $0x4,%esp
f012e812:	68 c8 bd 13 f0       	push   $0xf013bdc8
f012e817:	68 45 12 00 00       	push   $0x1245
f012e81c:	68 76 a8 13 f0       	push   $0xf013a876
f012e821:	e8 80 19 fd ff       	call   f01001a6 <_panic>

		//1st 3 MB
		//cprintf("1st 3 MB\n");
		structArr = (struct MyStruct*) ptr_allocations[6];
f012e826:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f012e82c:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)

		for (i = 0; i <= lastIndices[6]; ++i) {
f012e832:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
f012e839:	eb 70                	jmp    f012e8ab <test_krealloc_BF+0x14a2>
			sums[3] += structArr[i].a;
f012e83b:	8b 95 ac fd ff ff    	mov    -0x254(%ebp),%edx
f012e841:	8b 45 dc             	mov    -0x24(%ebp),%eax
f012e844:	8d 0c c5 00 00 00 00 	lea    0x0(,%eax,8),%ecx
f012e84b:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012e851:	01 c8                	add    %ecx,%eax
f012e853:	8a 00                	mov    (%eax),%al
f012e855:	0f be c0             	movsbl %al,%eax
f012e858:	01 d0                	add    %edx,%eax
f012e85a:	89 85 ac fd ff ff    	mov    %eax,-0x254(%ebp)
			sums[4] += structArr[i].b;
f012e860:	8b 95 b0 fd ff ff    	mov    -0x250(%ebp),%edx
f012e866:	8b 45 dc             	mov    -0x24(%ebp),%eax
f012e869:	8d 0c c5 00 00 00 00 	lea    0x0(,%eax,8),%ecx
f012e870:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012e876:	01 c8                	add    %ecx,%eax
f012e878:	66 8b 40 02          	mov    0x2(%eax),%ax
f012e87c:	98                   	cwtl   
f012e87d:	01 d0                	add    %edx,%eax
f012e87f:	89 85 b0 fd ff ff    	mov    %eax,-0x250(%ebp)
			sums[5] += structArr[i].c;
f012e885:	8b 95 b4 fd ff ff    	mov    -0x24c(%ebp),%edx
f012e88b:	8b 45 dc             	mov    -0x24(%ebp),%eax
f012e88e:	8d 0c c5 00 00 00 00 	lea    0x0(,%eax,8),%ecx
f012e895:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012e89b:	01 c8                	add    %ecx,%eax
f012e89d:	8b 40 04             	mov    0x4(%eax),%eax
f012e8a0:	01 d0                	add    %edx,%eax
f012e8a2:	89 85 b4 fd ff ff    	mov    %eax,-0x24c(%ebp)

		//1st 3 MB
		//cprintf("1st 3 MB\n");
		structArr = (struct MyStruct*) ptr_allocations[6];

		for (i = 0; i <= lastIndices[6]; ++i) {
f012e8a8:	ff 45 dc             	incl   -0x24(%ebp)
f012e8ab:	8b 85 08 fe ff ff    	mov    -0x1f8(%ebp),%eax
f012e8b1:	3b 45 dc             	cmp    -0x24(%ebp),%eax
f012e8b4:	7d 85                	jge    f012e83b <test_krealloc_BF+0x1432>
			sums[3] += structArr[i].a;
			sums[4] += structArr[i].b;
			sums[5] += structArr[i].c;
		}
		if (sums[3] != (lastIndices[6] + 1) * 7
f012e8b6:	8b 8d ac fd ff ff    	mov    -0x254(%ebp),%ecx
f012e8bc:	8b 85 08 fe ff ff    	mov    -0x1f8(%ebp),%eax
f012e8c2:	8d 50 01             	lea    0x1(%eax),%edx
f012e8c5:	89 d0                	mov    %edx,%eax
f012e8c7:	01 c0                	add    %eax,%eax
f012e8c9:	01 d0                	add    %edx,%eax
f012e8cb:	01 c0                	add    %eax,%eax
f012e8cd:	01 d0                	add    %edx,%eax
f012e8cf:	39 c1                	cmp    %eax,%ecx
f012e8d1:	75 3a                	jne    f012e90d <test_krealloc_BF+0x1504>
				|| sums[4] != (lastIndices[6] + 1) * 7
f012e8d3:	8b 8d b0 fd ff ff    	mov    -0x250(%ebp),%ecx
f012e8d9:	8b 85 08 fe ff ff    	mov    -0x1f8(%ebp),%eax
f012e8df:	8d 50 01             	lea    0x1(%eax),%edx
f012e8e2:	89 d0                	mov    %edx,%eax
f012e8e4:	01 c0                	add    %eax,%eax
f012e8e6:	01 d0                	add    %edx,%eax
f012e8e8:	01 c0                	add    %eax,%eax
f012e8ea:	01 d0                	add    %edx,%eax
f012e8ec:	39 c1                	cmp    %eax,%ecx
f012e8ee:	75 1d                	jne    f012e90d <test_krealloc_BF+0x1504>
				|| sums[5] != (lastIndices[6] + 1) * 7)
f012e8f0:	8b 8d b4 fd ff ff    	mov    -0x24c(%ebp),%ecx
f012e8f6:	8b 85 08 fe ff ff    	mov    -0x1f8(%ebp),%eax
f012e8fc:	8d 50 01             	lea    0x1(%eax),%edx
f012e8ff:	89 d0                	mov    %edx,%eax
f012e901:	01 c0                	add    %eax,%eax
f012e903:	01 d0                	add    %edx,%eax
f012e905:	01 c0                	add    %eax,%eax
f012e907:	01 d0                	add    %edx,%eax
f012e909:	39 c1                	cmp    %eax,%ecx
f012e90b:	74 17                	je     f012e924 <test_krealloc_BF+0x151b>
			panic("krealloc: invalid read after freeing some allocations");
f012e90d:	83 ec 04             	sub    $0x4,%esp
f012e910:	68 c8 bd 13 f0       	push   $0xf013bdc8
f012e915:	68 53 12 00 00       	push   $0x1253
f012e91a:	68 76 a8 13 f0       	push   $0xf013a876
f012e91f:	e8 82 18 fd ff       	call   f01001a6 <_panic>
	}

	//[4] Test krealloc reallocation with valid and invalid sizes
	{
		int freeDiskFrames;
		void* newAddress = NULL;
f012e924:	c7 85 d8 fe ff ff 00 	movl   $0x0,-0x128(%ebp)
f012e92b:	00 00 00 
		//Try to reallocate 2nd 1 MB with a size smaller than its current size (it should return the same VA and do nothing)
		freeFrames = sys_calculate_free_frames();
f012e92e:	e8 8b da fd ff       	call   f010c3be <sys_calculate_free_frames>
f012e933:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[1], 15 * kilo);
f012e936:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f012e93c:	83 ec 08             	sub    $0x8,%esp
f012e93f:	68 00 3c 00 00       	push   $0x3c00
f012e944:	50                   	push   %eax
f012e945:	e8 42 8d fd ff       	call   f010768c <krealloc>
f012e94a:	83 c4 10             	add    $0x10,%esp
f012e94d:	89 85 d8 fe ff ff    	mov    %eax,-0x128(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012e953:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f012e959:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012e95e:	77 17                	ja     f012e977 <test_krealloc_BF+0x156e>
			panic("krealloc: Wrong start address for the allocated space... ");
f012e960:	83 ec 04             	sub    $0x4,%esp
f012e963:	68 1c bb 13 f0       	push   $0xf013bb1c
f012e968:	68 5f 12 00 00       	push   $0x125f
f012e96d:	68 76 a8 13 f0       	push   $0xf013a876
f012e972:	e8 2f 18 fd ff       	call   f01001a6 <_panic>
		if (newAddress != ptr_allocations[1])
f012e977:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f012e97d:	3b 85 d8 fe ff ff    	cmp    -0x128(%ebp),%eax
f012e983:	74 17                	je     f012e99c <test_krealloc_BF+0x1593>
			panic(
f012e985:	83 ec 04             	sub    $0x4,%esp
f012e988:	68 00 be 13 f0       	push   $0xf013be00
f012e98d:	68 62 12 00 00       	push   $0x1262
f012e992:	68 76 a8 13 f0       	push   $0xf013a876
f012e997:	e8 0a 18 fd ff       	call   f01001a6 <_panic>
					"krealloc: Wrong allocation: krealloc reallocated an address with the same size (it should return same VA)");
		if (freeFrames != sys_calculate_free_frames())
f012e99c:	e8 1d da fd ff       	call   f010c3be <sys_calculate_free_frames>
f012e9a1:	89 c2                	mov    %eax,%edx
f012e9a3:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012e9a6:	39 c2                	cmp    %eax,%edx
f012e9a8:	74 17                	je     f012e9c1 <test_krealloc_BF+0x15b8>
			panic(
f012e9aa:	83 ec 04             	sub    $0x4,%esp
f012e9ad:	68 6c be 13 f0       	push   $0xf013be6c
f012e9b2:	68 65 12 00 00       	push   $0x1265
f012e9b7:	68 76 a8 13 f0       	push   $0xf013a876
f012e9bc:	e8 e5 17 fd ff       	call   f01001a6 <_panic>
					"krealloc: Wrong number of frames after krealloc with the same size");

		//Try to reallocate 1st 2 MB with a size smaller than its current size (it should return the same VA and do nothing)
		freeFrames = sys_calculate_free_frames();
f012e9c1:	e8 f8 d9 fd ff       	call   f010c3be <sys_calculate_free_frames>
f012e9c6:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[4], 1 * Mega - kilo);
f012e9c9:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f012e9cf:	83 ec 08             	sub    $0x8,%esp
f012e9d2:	68 00 fc 0f 00       	push   $0xffc00
f012e9d7:	50                   	push   %eax
f012e9d8:	e8 af 8c fd ff       	call   f010768c <krealloc>
f012e9dd:	83 c4 10             	add    $0x10,%esp
f012e9e0:	89 85 d8 fe ff ff    	mov    %eax,-0x128(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012e9e6:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f012e9ec:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012e9f1:	77 17                	ja     f012ea0a <test_krealloc_BF+0x1601>
			panic("krealloc: Wrong start address for the allocated space... ");
f012e9f3:	83 ec 04             	sub    $0x4,%esp
f012e9f6:	68 1c bb 13 f0       	push   $0xf013bb1c
f012e9fb:	68 6b 12 00 00       	push   $0x126b
f012ea00:	68 76 a8 13 f0       	push   $0xf013a876
f012ea05:	e8 9c 17 fd ff       	call   f01001a6 <_panic>
		if (newAddress != ptr_allocations[4])
f012ea0a:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f012ea10:	3b 85 d8 fe ff ff    	cmp    -0x128(%ebp),%eax
f012ea16:	74 17                	je     f012ea2f <test_krealloc_BF+0x1626>
			panic(
f012ea18:	83 ec 04             	sub    $0x4,%esp
f012ea1b:	68 00 be 13 f0       	push   $0xf013be00
f012ea20:	68 6e 12 00 00       	push   $0x126e
f012ea25:	68 76 a8 13 f0       	push   $0xf013a876
f012ea2a:	e8 77 17 fd ff       	call   f01001a6 <_panic>
					"krealloc: Wrong allocation: krealloc reallocated an address with the same size (it should return same VA)");
		if (freeFrames != sys_calculate_free_frames())
f012ea2f:	e8 8a d9 fd ff       	call   f010c3be <sys_calculate_free_frames>
f012ea34:	89 c2                	mov    %eax,%edx
f012ea36:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012ea39:	39 c2                	cmp    %eax,%edx
f012ea3b:	74 17                	je     f012ea54 <test_krealloc_BF+0x164b>
			panic(
f012ea3d:	83 ec 04             	sub    $0x4,%esp
f012ea40:	68 6c be 13 f0       	push   $0xf013be6c
f012ea45:	68 71 12 00 00       	push   $0x1271
f012ea4a:	68 76 a8 13 f0       	push   $0xf013a876
f012ea4f:	e8 52 17 fd ff       	call   f01001a6 <_panic>
					"krealloc: Wrong number of frames after krealloc with the same size");

		//Try to reallocate 2nd 1 MB with the same size it should return the same VA
		freeFrames = sys_calculate_free_frames();
f012ea54:	e8 65 d9 fd ff       	call   f010c3be <sys_calculate_free_frames>
f012ea59:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[1], 1 * Mega - kilo);
f012ea5c:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f012ea62:	83 ec 08             	sub    $0x8,%esp
f012ea65:	68 00 fc 0f 00       	push   $0xffc00
f012ea6a:	50                   	push   %eax
f012ea6b:	e8 1c 8c fd ff       	call   f010768c <krealloc>
f012ea70:	83 c4 10             	add    $0x10,%esp
f012ea73:	89 85 d8 fe ff ff    	mov    %eax,-0x128(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012ea79:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f012ea7f:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012ea84:	77 17                	ja     f012ea9d <test_krealloc_BF+0x1694>
			panic("krealloc: Wrong start address for the allocated space... ");
f012ea86:	83 ec 04             	sub    $0x4,%esp
f012ea89:	68 1c bb 13 f0       	push   $0xf013bb1c
f012ea8e:	68 77 12 00 00       	push   $0x1277
f012ea93:	68 76 a8 13 f0       	push   $0xf013a876
f012ea98:	e8 09 17 fd ff       	call   f01001a6 <_panic>
		if (newAddress != ptr_allocations[1])
f012ea9d:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f012eaa3:	3b 85 d8 fe ff ff    	cmp    -0x128(%ebp),%eax
f012eaa9:	74 17                	je     f012eac2 <test_krealloc_BF+0x16b9>
			panic(
f012eaab:	83 ec 04             	sub    $0x4,%esp
f012eaae:	68 00 be 13 f0       	push   $0xf013be00
f012eab3:	68 7a 12 00 00       	push   $0x127a
f012eab8:	68 76 a8 13 f0       	push   $0xf013a876
f012eabd:	e8 e4 16 fd ff       	call   f01001a6 <_panic>
					"krealloc: Wrong allocation: krealloc reallocated an address with the same size (it should return same VA)");
		if (freeFrames != sys_calculate_free_frames())
f012eac2:	e8 f7 d8 fd ff       	call   f010c3be <sys_calculate_free_frames>
f012eac7:	89 c2                	mov    %eax,%edx
f012eac9:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012eacc:	39 c2                	cmp    %eax,%edx
f012eace:	74 17                	je     f012eae7 <test_krealloc_BF+0x16de>
			panic(
f012ead0:	83 ec 04             	sub    $0x4,%esp
f012ead3:	68 6c be 13 f0       	push   $0xf013be6c
f012ead8:	68 7d 12 00 00       	push   $0x127d
f012eadd:	68 76 a8 13 f0       	push   $0xf013a876
f012eae2:	e8 bf 16 fd ff       	call   f01001a6 <_panic>
					"krealloc: Wrong number of frames after krealloc with the same size");



		//Try to reallocate 4th 1 MB with the same size it should return the same VA
		freeFrames = sys_calculate_free_frames();
f012eae7:	e8 d2 d8 fd ff       	call   f010c3be <sys_calculate_free_frames>
f012eaec:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[3], 1 * Mega - kilo);
f012eaef:	8b 85 4c fe ff ff    	mov    -0x1b4(%ebp),%eax
f012eaf5:	83 ec 08             	sub    $0x8,%esp
f012eaf8:	68 00 fc 0f 00       	push   $0xffc00
f012eafd:	50                   	push   %eax
f012eafe:	e8 89 8b fd ff       	call   f010768c <krealloc>
f012eb03:	83 c4 10             	add    $0x10,%esp
f012eb06:	89 85 d8 fe ff ff    	mov    %eax,-0x128(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012eb0c:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f012eb12:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012eb17:	77 17                	ja     f012eb30 <test_krealloc_BF+0x1727>
			panic("krealloc: Wrong start address for the allocated space... ");
f012eb19:	83 ec 04             	sub    $0x4,%esp
f012eb1c:	68 1c bb 13 f0       	push   $0xf013bb1c
f012eb21:	68 85 12 00 00       	push   $0x1285
f012eb26:	68 76 a8 13 f0       	push   $0xf013a876
f012eb2b:	e8 76 16 fd ff       	call   f01001a6 <_panic>
		if (newAddress != ptr_allocations[3])
f012eb30:	8b 85 4c fe ff ff    	mov    -0x1b4(%ebp),%eax
f012eb36:	3b 85 d8 fe ff ff    	cmp    -0x128(%ebp),%eax
f012eb3c:	74 17                	je     f012eb55 <test_krealloc_BF+0x174c>
			panic(
f012eb3e:	83 ec 04             	sub    $0x4,%esp
f012eb41:	68 b0 be 13 f0       	push   $0xf013beb0
f012eb46:	68 88 12 00 00       	push   $0x1288
f012eb4b:	68 76 a8 13 f0       	push   $0xf013a876
f012eb50:	e8 51 16 fd ff       	call   f01001a6 <_panic>
					"Wrong allocation: krealloc reallocated an address with the same size (it should return same VA)");
		if (freeFrames != sys_calculate_free_frames())
f012eb55:	e8 64 d8 fd ff       	call   f010c3be <sys_calculate_free_frames>
f012eb5a:	89 c2                	mov    %eax,%edx
f012eb5c:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012eb5f:	39 c2                	cmp    %eax,%edx
f012eb61:	74 17                	je     f012eb7a <test_krealloc_BF+0x1771>
			panic(
f012eb63:	83 ec 04             	sub    $0x4,%esp
f012eb66:	68 6c be 13 f0       	push   $0xf013be6c
f012eb6b:	68 8b 12 00 00       	push   $0x128b
f012eb70:	68 76 a8 13 f0       	push   $0xf013a876
f012eb75:	e8 2c 16 fd ff       	call   f01001a6 <_panic>
					"krealloc: Wrong number of frames after krealloc with the same size");
	}
	cprintf("\b\b\b30%");
f012eb7a:	83 ec 0c             	sub    $0xc,%esp
f012eb7d:	68 8f b0 13 f0       	push   $0xf013b08f
f012eb82:	e8 a6 20 fd ff       	call   f0100c2d <cprintf>
f012eb87:	83 c4 10             	add    $0x10,%esp
    {
		//Reallocate 2nd 1 MB to 1 MB + 7 KB
		freeFrames = sys_calculate_free_frames();
f012eb8a:	e8 2f d8 fd ff       	call   f010c3be <sys_calculate_free_frames>
f012eb8f:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[1], (1 * Mega - kilo) + (7 * kilo));
f012eb92:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f012eb98:	83 ec 08             	sub    $0x8,%esp
f012eb9b:	68 00 18 10 00       	push   $0x101800
f012eba0:	50                   	push   %eax
f012eba1:	e8 e6 8a fd ff       	call   f010768c <krealloc>
f012eba6:	83 c4 10             	add    $0x10,%esp
f012eba9:	89 45 bc             	mov    %eax,-0x44(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012ebac:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012ebaf:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012ebb4:	77 17                	ja     f012ebcd <test_krealloc_BF+0x17c4>
			panic("krealloc: Wrong start address for the allocated space... ");
f012ebb6:	83 ec 04             	sub    $0x4,%esp
f012ebb9:	68 1c bb 13 f0       	push   $0xf013bb1c
f012ebbe:	68 93 12 00 00       	push   $0x1293
f012ebc3:	68 76 a8 13 f0       	push   $0xf013a876
f012ebc8:	e8 d9 15 fd ff       	call   f01001a6 <_panic>
		if (newAddress != ptr_allocations[1])
f012ebcd:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f012ebd3:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f012ebd6:	74 17                	je     f012ebef <test_krealloc_BF+0x17e6>
			panic(
f012ebd8:	83 ec 04             	sub    $0x4,%esp
f012ebdb:	68 10 bf 13 f0       	push   $0xf013bf10
f012ebe0:	68 96 12 00 00       	push   $0x1296
f012ebe5:	68 76 a8 13 f0       	push   $0xf013a876
f012ebea:	e8 b7 15 fd ff       	call   f01001a6 <_panic>
					"Wrong allocation: krealloc reallocated a new address while there is a sufficient space after it (it should return same VA)");
		if (freeFrames - sys_calculate_free_frames() != 2)
f012ebef:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012ebf2:	e8 c7 d7 fd ff       	call   f010c3be <sys_calculate_free_frames>
f012ebf7:	29 c3                	sub    %eax,%ebx
f012ebf9:	89 d8                	mov    %ebx,%eax
f012ebfb:	83 f8 02             	cmp    $0x2,%eax
f012ebfe:	74 17                	je     f012ec17 <test_krealloc_BF+0x180e>
			panic("krealloc: pages in memory are not loaded correctly");
f012ec00:	83 ec 04             	sub    $0x4,%esp
f012ec03:	68 8c bf 13 f0       	push   $0xf013bf8c
f012ec08:	68 98 12 00 00       	push   $0x1298
f012ec0d:	68 76 a8 13 f0       	push   $0xf013a876
f012ec12:	e8 8f 15 fd ff       	call   f01001a6 <_panic>

		//Reallocate 1st 2 MB to 2 MB + 2 MB
		freeFrames = sys_calculate_free_frames();
f012ec17:	e8 a2 d7 fd ff       	call   f010c3be <sys_calculate_free_frames>
f012ec1c:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[4], (4 * Mega - kilo));
f012ec1f:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f012ec25:	83 ec 08             	sub    $0x8,%esp
f012ec28:	68 00 fc 3f 00       	push   $0x3ffc00
f012ec2d:	50                   	push   %eax
f012ec2e:	e8 59 8a fd ff       	call   f010768c <krealloc>
f012ec33:	83 c4 10             	add    $0x10,%esp
f012ec36:	89 45 bc             	mov    %eax,-0x44(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012ec39:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012ec3c:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012ec41:	77 17                	ja     f012ec5a <test_krealloc_BF+0x1851>
			panic("krealloc: Wrong start address for the allocated space... ");
f012ec43:	83 ec 04             	sub    $0x4,%esp
f012ec46:	68 1c bb 13 f0       	push   $0xf013bb1c
f012ec4b:	68 9e 12 00 00       	push   $0x129e
f012ec50:	68 76 a8 13 f0       	push   $0xf013a876
f012ec55:	e8 4c 15 fd ff       	call   f01001a6 <_panic>
		if (newAddress != ptr_allocations[4])
f012ec5a:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f012ec60:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f012ec63:	74 17                	je     f012ec7c <test_krealloc_BF+0x1873>
			panic(
f012ec65:	83 ec 04             	sub    $0x4,%esp
f012ec68:	68 10 bf 13 f0       	push   $0xf013bf10
f012ec6d:	68 a1 12 00 00       	push   $0x12a1
f012ec72:	68 76 a8 13 f0       	push   $0xf013a876
f012ec77:	e8 2a 15 fd ff       	call   f01001a6 <_panic>
					"Wrong allocation: krealloc reallocated a new address while there is a sufficient space after it (it should return same VA)");
		//2 MB only for the new size
		if (freeFrames - sys_calculate_free_frames() != 512)
f012ec7c:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012ec7f:	e8 3a d7 fd ff       	call   f010c3be <sys_calculate_free_frames>
f012ec84:	29 c3                	sub    %eax,%ebx
f012ec86:	89 d8                	mov    %ebx,%eax
f012ec88:	3d 00 02 00 00       	cmp    $0x200,%eax
f012ec8d:	74 17                	je     f012eca6 <test_krealloc_BF+0x189d>
			panic("krealloc: pages in memory are not loaded correctly");
f012ec8f:	83 ec 04             	sub    $0x4,%esp
f012ec92:	68 8c bf 13 f0       	push   $0xf013bf8c
f012ec97:	68 a4 12 00 00       	push   $0x12a4
f012ec9c:	68 76 a8 13 f0       	push   $0xf013a876
f012eca1:	e8 00 15 fd ff       	call   f01001a6 <_panic>


	}
	cprintf("\b\b\b60%");
f012eca6:	83 ec 0c             	sub    $0xc,%esp
f012eca9:	68 d4 b0 13 f0       	push   $0xf013b0d4
f012ecae:	e8 7a 1f fd ff       	call   f0100c2d <cprintf>
f012ecb3:	83 c4 10             	add    $0x10,%esp
	//Test krealloc: Cut & paste
	{
		//Reallocate 1st 2 MB (already reallocated to 4 MB) to 10 MB. It should return new VA
		freeFrames = sys_calculate_free_frames();
f012ecb6:	e8 03 d7 fd ff       	call   f010c3be <sys_calculate_free_frames>
f012ecbb:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[4], (10 * Mega - kilo));
f012ecbe:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f012ecc4:	83 ec 08             	sub    $0x8,%esp
f012ecc7:	68 00 fc 9f 00       	push   $0x9ffc00
f012eccc:	50                   	push   %eax
f012eccd:	e8 ba 89 fd ff       	call   f010768c <krealloc>
f012ecd2:	83 c4 10             	add    $0x10,%esp
f012ecd5:	89 45 bc             	mov    %eax,-0x44(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012ecd8:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012ecdb:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012ece0:	77 17                	ja     f012ecf9 <test_krealloc_BF+0x18f0>
			panic("krealloc: Wrong start address for the allocated space... ");
f012ece2:	83 ec 04             	sub    $0x4,%esp
f012ece5:	68 1c bb 13 f0       	push   $0xf013bb1c
f012ecea:	68 af 12 00 00       	push   $0x12af
f012ecef:	68 76 a8 13 f0       	push   $0xf013a876
f012ecf4:	e8 ad 14 fd ff       	call   f01001a6 <_panic>
		if ((uint32) newAddress != ACTUAL_START + (11 * Mega))
f012ecf9:	c7 85 d4 fe ff ff 00 	movl   $0x1000,-0x12c(%ebp)
f012ed00:	10 00 00 
f012ed03:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f012ed09:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012ed0e:	89 85 d0 fe ff ff    	mov    %eax,-0x130(%ebp)
f012ed14:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f012ed1a:	ba 00 00 00 00       	mov    $0x0,%edx
f012ed1f:	f7 b5 d4 fe ff ff    	divl   -0x12c(%ebp)
f012ed25:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f012ed2b:	29 d0                	sub    %edx,%eax
f012ed2d:	89 c1                	mov    %eax,%ecx
f012ed2f:	c7 85 cc fe ff ff 00 	movl   $0x1000,-0x134(%ebp)
f012ed36:	10 00 00 
f012ed39:	a0 bc 0e 6c f0       	mov    0xf06c0ebc,%al
f012ed3e:	0f b6 d0             	movzbl %al,%edx
f012ed41:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f012ed47:	01 d0                	add    %edx,%eax
f012ed49:	48                   	dec    %eax
f012ed4a:	89 85 c8 fe ff ff    	mov    %eax,-0x138(%ebp)
f012ed50:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f012ed56:	ba 00 00 00 00       	mov    $0x0,%edx
f012ed5b:	f7 b5 cc fe ff ff    	divl   -0x134(%ebp)
f012ed61:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f012ed67:	29 d0                	sub    %edx,%eax
f012ed69:	01 c1                	add    %eax,%ecx
f012ed6b:	c7 85 c4 fe ff ff 00 	movl   $0x1000,-0x13c(%ebp)
f012ed72:	10 00 00 
f012ed75:	a0 bc 0e 6c f0       	mov    0xf06c0ebc,%al
f012ed7a:	0f b6 c0             	movzbl %al,%eax
f012ed7d:	c1 e0 04             	shl    $0x4,%eax
f012ed80:	89 c2                	mov    %eax,%edx
f012ed82:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f012ed88:	01 d0                	add    %edx,%eax
f012ed8a:	48                   	dec    %eax
f012ed8b:	89 85 c0 fe ff ff    	mov    %eax,-0x140(%ebp)
f012ed91:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f012ed97:	ba 00 00 00 00       	mov    $0x0,%edx
f012ed9c:	f7 b5 c4 fe ff ff    	divl   -0x13c(%ebp)
f012eda2:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f012eda8:	29 d0                	sub    %edx,%eax
f012edaa:	01 c8                	add    %ecx,%eax
f012edac:	8d 90 00 40 b0 f6    	lea    -0x94fc000(%eax),%edx
f012edb2:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012edb5:	39 c2                	cmp    %eax,%edx
f012edb7:	74 18                	je     f012edd1 <test_krealloc_BF+0x19c8>
			panic(
f012edb9:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012edbc:	50                   	push   %eax
f012edbd:	68 c0 bf 13 f0       	push   $0xf013bfc0
f012edc2:	68 b3 12 00 00       	push   $0x12b3
f012edc7:	68 76 a8 13 f0       	push   $0xf013a876
f012edcc:	e8 d5 13 fd ff       	call   f01001a6 <_panic>
					"krealloc: Wrong start address for reallocated space, NSA = %x\nbbb",
					(uint32 )newAddress);
		if (newAddress == ptr_allocations[4])
f012edd1:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f012edd7:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f012edda:	75 17                	jne    f012edf3 <test_krealloc_BF+0x19ea>
			panic(
f012eddc:	83 ec 04             	sub    $0x4,%esp
f012eddf:	68 04 c0 13 f0       	push   $0xf013c004
f012ede4:	68 b6 12 00 00       	push   $0x12b6
f012ede9:	68 76 a8 13 f0       	push   $0xf013a876
f012edee:	e8 b3 13 fd ff       	call   f01001a6 <_panic>
					"Wrong allocation: krealloc reallocated at the same address while there is NO sufficient space after it (it should return new VA)");
		//6 MB only for the new size
		if (freeFrames - sys_calculate_free_frames() != 1536)
f012edf3:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012edf6:	e8 c3 d5 fd ff       	call   f010c3be <sys_calculate_free_frames>
f012edfb:	29 c3                	sub    %eax,%ebx
f012edfd:	89 d8                	mov    %ebx,%eax
f012edff:	3d 00 06 00 00       	cmp    $0x600,%eax
f012ee04:	74 17                	je     f012ee1d <test_krealloc_BF+0x1a14>
			panic("krealloc: pages in memory are not loaded correctly");
f012ee06:	83 ec 04             	sub    $0x4,%esp
f012ee09:	68 8c bf 13 f0       	push   $0xf013bf8c
f012ee0e:	68 b9 12 00 00       	push   $0x12b9
f012ee13:	68 76 a8 13 f0       	push   $0xf013a876
f012ee18:	e8 89 13 fd ff       	call   f01001a6 <_panic>

		ptr_allocations[4] = newAddress;
f012ee1d:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012ee20:	89 85 50 fe ff ff    	mov    %eax,-0x1b0(%ebp)
		//lastIndices[4] = (10 * Mega - kilo) / sizeof(short) - 1;

		//Reallocate 1st 3 MB to 4 MB
		freeFrames = sys_calculate_free_frames();
f012ee26:	e8 93 d5 fd ff       	call   f010c3be <sys_calculate_free_frames>
f012ee2b:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[6], (4 * Mega - kilo));
f012ee2e:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f012ee34:	83 ec 08             	sub    $0x8,%esp
f012ee37:	68 00 fc 3f 00       	push   $0x3ffc00
f012ee3c:	50                   	push   %eax
f012ee3d:	e8 4a 88 fd ff       	call   f010768c <krealloc>
f012ee42:	83 c4 10             	add    $0x10,%esp
f012ee45:	89 45 bc             	mov    %eax,-0x44(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012ee48:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012ee4b:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012ee50:	77 17                	ja     f012ee69 <test_krealloc_BF+0x1a60>
			panic("krealloc: Wrong start address for the allocated space... ");
f012ee52:	83 ec 04             	sub    $0x4,%esp
f012ee55:	68 1c bb 13 f0       	push   $0xf013bb1c
f012ee5a:	68 c2 12 00 00       	push   $0x12c2
f012ee5f:	68 76 a8 13 f0       	push   $0xf013a876
f012ee64:	e8 3d 13 fd ff       	call   f01001a6 <_panic>
		if (newAddress == ptr_allocations[6])
f012ee69:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f012ee6f:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f012ee72:	75 17                	jne    f012ee8b <test_krealloc_BF+0x1a82>
			panic("Wrong allocation: krealloc reallocated at the same address while there is NO sufficient space after it (it should return new VA)");
f012ee74:	83 ec 04             	sub    $0x4,%esp
f012ee77:	68 04 c0 13 f0       	push   $0xf013c004
f012ee7c:	68 c4 12 00 00       	push   $0x12c4
f012ee81:	68 76 a8 13 f0       	push   $0xf013a876
f012ee86:	e8 1b 13 fd ff       	call   f01001a6 <_panic>
		if ((uint32)newAddress != ACTUAL_START + 4 * Mega) panic("krealloc: Wrong start address for allocated space");
f012ee8b:	c7 85 bc fe ff ff 00 	movl   $0x1000,-0x144(%ebp)
f012ee92:	10 00 00 
f012ee95:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f012ee9b:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012eea0:	89 85 b8 fe ff ff    	mov    %eax,-0x148(%ebp)
f012eea6:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f012eeac:	ba 00 00 00 00       	mov    $0x0,%edx
f012eeb1:	f7 b5 bc fe ff ff    	divl   -0x144(%ebp)
f012eeb7:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f012eebd:	29 d0                	sub    %edx,%eax
f012eebf:	89 c1                	mov    %eax,%ecx
f012eec1:	c7 85 b4 fe ff ff 00 	movl   $0x1000,-0x14c(%ebp)
f012eec8:	10 00 00 
f012eecb:	a0 bc 0e 6c f0       	mov    0xf06c0ebc,%al
f012eed0:	0f b6 d0             	movzbl %al,%edx
f012eed3:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f012eed9:	01 d0                	add    %edx,%eax
f012eedb:	48                   	dec    %eax
f012eedc:	89 85 b0 fe ff ff    	mov    %eax,-0x150(%ebp)
f012eee2:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f012eee8:	ba 00 00 00 00       	mov    $0x0,%edx
f012eeed:	f7 b5 b4 fe ff ff    	divl   -0x14c(%ebp)
f012eef3:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f012eef9:	29 d0                	sub    %edx,%eax
f012eefb:	01 c1                	add    %eax,%ecx
f012eefd:	c7 85 ac fe ff ff 00 	movl   $0x1000,-0x154(%ebp)
f012ef04:	10 00 00 
f012ef07:	a0 bc 0e 6c f0       	mov    0xf06c0ebc,%al
f012ef0c:	0f b6 c0             	movzbl %al,%eax
f012ef0f:	c1 e0 04             	shl    $0x4,%eax
f012ef12:	89 c2                	mov    %eax,%edx
f012ef14:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f012ef1a:	01 d0                	add    %edx,%eax
f012ef1c:	48                   	dec    %eax
f012ef1d:	89 85 a8 fe ff ff    	mov    %eax,-0x158(%ebp)
f012ef23:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f012ef29:	ba 00 00 00 00       	mov    $0x0,%edx
f012ef2e:	f7 b5 ac fe ff ff    	divl   -0x154(%ebp)
f012ef34:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f012ef3a:	29 d0                	sub    %edx,%eax
f012ef3c:	01 c8                	add    %ecx,%eax
f012ef3e:	8d 90 00 40 40 f6    	lea    -0x9bfc000(%eax),%edx
f012ef44:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012ef47:	39 c2                	cmp    %eax,%edx
f012ef49:	74 17                	je     f012ef62 <test_krealloc_BF+0x1b59>
f012ef4b:	83 ec 04             	sub    $0x4,%esp
f012ef4e:	68 58 bb 13 f0       	push   $0xf013bb58
f012ef53:	68 c5 12 00 00       	push   $0x12c5
f012ef58:	68 76 a8 13 f0       	push   $0xf013a876
f012ef5d:	e8 44 12 fd ff       	call   f01001a6 <_panic>

		//1 MB only for the new size
		if (freeFrames - sys_calculate_free_frames() != 256)
f012ef62:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012ef65:	e8 54 d4 fd ff       	call   f010c3be <sys_calculate_free_frames>
f012ef6a:	29 c3                	sub    %eax,%ebx
f012ef6c:	89 d8                	mov    %ebx,%eax
f012ef6e:	3d 00 01 00 00       	cmp    $0x100,%eax
f012ef73:	74 17                	je     f012ef8c <test_krealloc_BF+0x1b83>
			panic("krealloc: pages in memory are not loaded correctly");
f012ef75:	83 ec 04             	sub    $0x4,%esp
f012ef78:	68 8c bf 13 f0       	push   $0xf013bf8c
f012ef7d:	68 c9 12 00 00       	push   $0x12c9
f012ef82:	68 76 a8 13 f0       	push   $0xf013a876
f012ef87:	e8 1a 12 fd ff       	call   f01001a6 <_panic>
		ptr_allocations[6] = newAddress;
f012ef8c:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012ef8f:	89 85 58 fe ff ff    	mov    %eax,-0x1a8(%ebp)
		//Reallocate 1st 3 MB (already reallocated to 4 MB) to 20 MB. It should return new VA
		freeFrames = sys_calculate_free_frames();
f012ef95:	e8 24 d4 fd ff       	call   f010c3be <sys_calculate_free_frames>
f012ef9a:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[6], (20 * Mega - kilo));
f012ef9d:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f012efa3:	83 ec 08             	sub    $0x8,%esp
f012efa6:	68 00 fc 3f 01       	push   $0x13ffc00
f012efab:	50                   	push   %eax
f012efac:	e8 db 86 fd ff       	call   f010768c <krealloc>
f012efb1:	83 c4 10             	add    $0x10,%esp
f012efb4:	89 45 bc             	mov    %eax,-0x44(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012efb7:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012efba:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012efbf:	77 17                	ja     f012efd8 <test_krealloc_BF+0x1bcf>
			panic("krealloc: Wrong start address for the allocated space... ");
f012efc1:	83 ec 04             	sub    $0x4,%esp
f012efc4:	68 1c bb 13 f0       	push   $0xf013bb1c
f012efc9:	68 cf 12 00 00       	push   $0x12cf
f012efce:	68 76 a8 13 f0       	push   $0xf013a876
f012efd3:	e8 ce 11 fd ff       	call   f01001a6 <_panic>
		if (newAddress == ptr_allocations[6])
f012efd8:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f012efde:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f012efe1:	75 17                	jne    f012effa <test_krealloc_BF+0x1bf1>
			panic("Wrong allocation: krealloc reallocated at the same address while there is NO sufficient space after it (it should return new VA)");
f012efe3:	83 ec 04             	sub    $0x4,%esp
f012efe6:	68 04 c0 13 f0       	push   $0xf013c004
f012efeb:	68 d1 12 00 00       	push   $0x12d1
f012eff0:	68 76 a8 13 f0       	push   $0xf013a876
f012eff5:	e8 ac 11 fd ff       	call   f01001a6 <_panic>
		if ((uint32) newAddress != ACTUAL_START + (21 * Mega))
f012effa:	c7 85 a4 fe ff ff 00 	movl   $0x1000,-0x15c(%ebp)
f012f001:	10 00 00 
f012f004:	8b 85 a4 fe ff ff    	mov    -0x15c(%ebp),%eax
f012f00a:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012f00f:	89 85 a0 fe ff ff    	mov    %eax,-0x160(%ebp)
f012f015:	8b 85 a0 fe ff ff    	mov    -0x160(%ebp),%eax
f012f01b:	ba 00 00 00 00       	mov    $0x0,%edx
f012f020:	f7 b5 a4 fe ff ff    	divl   -0x15c(%ebp)
f012f026:	8b 85 a0 fe ff ff    	mov    -0x160(%ebp),%eax
f012f02c:	29 d0                	sub    %edx,%eax
f012f02e:	89 c1                	mov    %eax,%ecx
f012f030:	c7 85 9c fe ff ff 00 	movl   $0x1000,-0x164(%ebp)
f012f037:	10 00 00 
f012f03a:	a0 bc 0e 6c f0       	mov    0xf06c0ebc,%al
f012f03f:	0f b6 d0             	movzbl %al,%edx
f012f042:	8b 85 9c fe ff ff    	mov    -0x164(%ebp),%eax
f012f048:	01 d0                	add    %edx,%eax
f012f04a:	48                   	dec    %eax
f012f04b:	89 85 98 fe ff ff    	mov    %eax,-0x168(%ebp)
f012f051:	8b 85 98 fe ff ff    	mov    -0x168(%ebp),%eax
f012f057:	ba 00 00 00 00       	mov    $0x0,%edx
f012f05c:	f7 b5 9c fe ff ff    	divl   -0x164(%ebp)
f012f062:	8b 85 98 fe ff ff    	mov    -0x168(%ebp),%eax
f012f068:	29 d0                	sub    %edx,%eax
f012f06a:	01 c1                	add    %eax,%ecx
f012f06c:	c7 85 94 fe ff ff 00 	movl   $0x1000,-0x16c(%ebp)
f012f073:	10 00 00 
f012f076:	a0 bc 0e 6c f0       	mov    0xf06c0ebc,%al
f012f07b:	0f b6 c0             	movzbl %al,%eax
f012f07e:	c1 e0 04             	shl    $0x4,%eax
f012f081:	89 c2                	mov    %eax,%edx
f012f083:	8b 85 94 fe ff ff    	mov    -0x16c(%ebp),%eax
f012f089:	01 d0                	add    %edx,%eax
f012f08b:	48                   	dec    %eax
f012f08c:	89 85 90 fe ff ff    	mov    %eax,-0x170(%ebp)
f012f092:	8b 85 90 fe ff ff    	mov    -0x170(%ebp),%eax
f012f098:	ba 00 00 00 00       	mov    $0x0,%edx
f012f09d:	f7 b5 94 fe ff ff    	divl   -0x16c(%ebp)
f012f0a3:	8b 85 90 fe ff ff    	mov    -0x170(%ebp),%eax
f012f0a9:	29 d0                	sub    %edx,%eax
f012f0ab:	01 c8                	add    %ecx,%eax
f012f0ad:	8d 90 00 40 50 f7    	lea    -0x8afc000(%eax),%edx
f012f0b3:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012f0b6:	39 c2                	cmp    %eax,%edx
f012f0b8:	74 17                	je     f012f0d1 <test_krealloc_BF+0x1cc8>
			panic("krealloc: Wrong start address for reallocated space\n");
f012f0ba:	83 ec 04             	sub    $0x4,%esp
f012f0bd:	68 24 c1 13 f0       	push   $0xf013c124
f012f0c2:	68 d3 12 00 00       	push   $0x12d3
f012f0c7:	68 76 a8 13 f0       	push   $0xf013a876
f012f0cc:	e8 d5 10 fd ff       	call   f01001a6 <_panic>
		//3 MB only for the new size
		if (freeFrames - sys_calculate_free_frames() != (16 * Mega) / PAGE_SIZE)
f012f0d1:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012f0d4:	e8 e5 d2 fd ff       	call   f010c3be <sys_calculate_free_frames>
f012f0d9:	29 c3                	sub    %eax,%ebx
f012f0db:	89 d8                	mov    %ebx,%eax
f012f0dd:	3d 00 10 00 00       	cmp    $0x1000,%eax
f012f0e2:	74 17                	je     f012f0fb <test_krealloc_BF+0x1cf2>
			panic("krealloc: pages in memory are not loaded correctly");
f012f0e4:	83 ec 04             	sub    $0x4,%esp
f012f0e7:	68 8c bf 13 f0       	push   $0xf013bf8c
f012f0ec:	68 d6 12 00 00       	push   $0x12d6
f012f0f1:	68 76 a8 13 f0       	push   $0xf013a876
f012f0f6:	e8 ab 10 fd ff       	call   f01001a6 <_panic>

		ptr_allocations[6] = newAddress;
f012f0fb:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012f0fe:	89 85 58 fe ff ff    	mov    %eax,-0x1a8(%ebp)

		//Test read write access for the new allocated size of 2nd 1 MB
		ptr = (char*) ptr_allocations[1];
f012f104:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f012f10a:	89 85 ec fe ff ff    	mov    %eax,-0x114(%ebp)
		int i;
		sums[0] = 0;
f012f110:	c7 85 a0 fd ff ff 00 	movl   $0x0,-0x260(%ebp)
f012f117:	00 00 00 
		for (i = 0; i <= lastIndices[1]; ++i) {
f012f11a:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
f012f121:	eb 21                	jmp    f012f144 <test_krealloc_BF+0x1d3b>
			sums[0] += ptr[i];
f012f123:	8b 95 a0 fd ff ff    	mov    -0x260(%ebp),%edx
f012f129:	8b 4d d8             	mov    -0x28(%ebp),%ecx
f012f12c:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f012f132:	01 c8                	add    %ecx,%eax
f012f134:	8a 00                	mov    (%eax),%al
f012f136:	0f be c0             	movsbl %al,%eax
f012f139:	01 d0                	add    %edx,%eax
f012f13b:	89 85 a0 fd ff ff    	mov    %eax,-0x260(%ebp)

		//Test read write access for the new allocated size of 2nd 1 MB
		ptr = (char*) ptr_allocations[1];
		int i;
		sums[0] = 0;
		for (i = 0; i <= lastIndices[1]; ++i) {
f012f141:	ff 45 d8             	incl   -0x28(%ebp)
f012f144:	8b 85 f4 fd ff ff    	mov    -0x20c(%ebp),%eax
f012f14a:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f012f14d:	7d d4                	jge    f012f123 <test_krealloc_BF+0x1d1a>
			sums[0] += ptr[i];

		}
		//cprintf("sum for 2nd 1 MB = %d LIM1 = %d\n", sums[0], (lastIndices[1] - 1));
		if (sums[0] != (lastIndices[1] + 1) * 2)
f012f14f:	8b 85 a0 fd ff ff    	mov    -0x260(%ebp),%eax
f012f155:	8b 95 f4 fd ff ff    	mov    -0x20c(%ebp),%edx
f012f15b:	42                   	inc    %edx
f012f15c:	01 d2                	add    %edx,%edx
f012f15e:	39 d0                	cmp    %edx,%eax
f012f160:	74 17                	je     f012f179 <test_krealloc_BF+0x1d70>
			panic("krealloc: invalid read after re-allocations");
f012f162:	83 ec 04             	sub    $0x4,%esp
f012f165:	68 bc c0 13 f0       	push   $0xf013c0bc
f012f16a:	68 e4 12 00 00       	push   $0x12e4
f012f16f:	68 76 a8 13 f0       	push   $0xf013a876
f012f174:	e8 2d 10 fd ff       	call   f01001a6 <_panic>

		//Test read write access for the new allocated size of 1st 3 MB
		structArr = (struct MyStruct*) ptr_allocations[6];
f012f179:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f012f17f:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)

		sums[0] = 0;
f012f185:	c7 85 a0 fd ff ff 00 	movl   $0x0,-0x260(%ebp)
f012f18c:	00 00 00 
		sums[1] = 0;
f012f18f:	c7 85 a4 fd ff ff 00 	movl   $0x0,-0x25c(%ebp)
f012f196:	00 00 00 
		sums[2] = 0;
f012f199:	c7 85 a8 fd ff ff 00 	movl   $0x0,-0x258(%ebp)
f012f1a0:	00 00 00 
		for (i = 0; i <= lastIndices[6]; ++i) {
f012f1a3:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
f012f1aa:	eb 70                	jmp    f012f21c <test_krealloc_BF+0x1e13>
			sums[0] += structArr[i].a;
f012f1ac:	8b 95 a0 fd ff ff    	mov    -0x260(%ebp),%edx
f012f1b2:	8b 45 d8             	mov    -0x28(%ebp),%eax
f012f1b5:	8d 0c c5 00 00 00 00 	lea    0x0(,%eax,8),%ecx
f012f1bc:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012f1c2:	01 c8                	add    %ecx,%eax
f012f1c4:	8a 00                	mov    (%eax),%al
f012f1c6:	0f be c0             	movsbl %al,%eax
f012f1c9:	01 d0                	add    %edx,%eax
f012f1cb:	89 85 a0 fd ff ff    	mov    %eax,-0x260(%ebp)
			sums[1] += structArr[i].b;
f012f1d1:	8b 95 a4 fd ff ff    	mov    -0x25c(%ebp),%edx
f012f1d7:	8b 45 d8             	mov    -0x28(%ebp),%eax
f012f1da:	8d 0c c5 00 00 00 00 	lea    0x0(,%eax,8),%ecx
f012f1e1:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012f1e7:	01 c8                	add    %ecx,%eax
f012f1e9:	66 8b 40 02          	mov    0x2(%eax),%ax
f012f1ed:	98                   	cwtl   
f012f1ee:	01 d0                	add    %edx,%eax
f012f1f0:	89 85 a4 fd ff ff    	mov    %eax,-0x25c(%ebp)
			sums[2] += structArr[i].c;
f012f1f6:	8b 95 a8 fd ff ff    	mov    -0x258(%ebp),%edx
f012f1fc:	8b 45 d8             	mov    -0x28(%ebp),%eax
f012f1ff:	8d 0c c5 00 00 00 00 	lea    0x0(,%eax,8),%ecx
f012f206:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012f20c:	01 c8                	add    %ecx,%eax
f012f20e:	8b 40 04             	mov    0x4(%eax),%eax
f012f211:	01 d0                	add    %edx,%eax
f012f213:	89 85 a8 fd ff ff    	mov    %eax,-0x258(%ebp)
		structArr = (struct MyStruct*) ptr_allocations[6];

		sums[0] = 0;
		sums[1] = 0;
		sums[2] = 0;
		for (i = 0; i <= lastIndices[6]; ++i) {
f012f219:	ff 45 d8             	incl   -0x28(%ebp)
f012f21c:	8b 85 08 fe ff ff    	mov    -0x1f8(%ebp),%eax
f012f222:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f012f225:	7d 85                	jge    f012f1ac <test_krealloc_BF+0x1da3>
			sums[1] += structArr[i].b;
			sums[2] += structArr[i].c;

		}
		//cprintf("sum for 2nd 1 MB = %d LIM1 = %d\n", sums[0], (lastIndices[1] - 1));
		if (sums[0] != (lastIndices[6] + 1) * 7
f012f227:	8b 8d a0 fd ff ff    	mov    -0x260(%ebp),%ecx
f012f22d:	8b 85 08 fe ff ff    	mov    -0x1f8(%ebp),%eax
f012f233:	8d 50 01             	lea    0x1(%eax),%edx
f012f236:	89 d0                	mov    %edx,%eax
f012f238:	01 c0                	add    %eax,%eax
f012f23a:	01 d0                	add    %edx,%eax
f012f23c:	01 c0                	add    %eax,%eax
f012f23e:	01 d0                	add    %edx,%eax
f012f240:	39 c1                	cmp    %eax,%ecx
f012f242:	75 3a                	jne    f012f27e <test_krealloc_BF+0x1e75>
				|| sums[1] != (lastIndices[6] + 1) * 7
f012f244:	8b 8d a4 fd ff ff    	mov    -0x25c(%ebp),%ecx
f012f24a:	8b 85 08 fe ff ff    	mov    -0x1f8(%ebp),%eax
f012f250:	8d 50 01             	lea    0x1(%eax),%edx
f012f253:	89 d0                	mov    %edx,%eax
f012f255:	01 c0                	add    %eax,%eax
f012f257:	01 d0                	add    %edx,%eax
f012f259:	01 c0                	add    %eax,%eax
f012f25b:	01 d0                	add    %edx,%eax
f012f25d:	39 c1                	cmp    %eax,%ecx
f012f25f:	75 1d                	jne    f012f27e <test_krealloc_BF+0x1e75>
				|| sums[2] != (lastIndices[6] + 1) * 7)
f012f261:	8b 8d a8 fd ff ff    	mov    -0x258(%ebp),%ecx
f012f267:	8b 85 08 fe ff ff    	mov    -0x1f8(%ebp),%eax
f012f26d:	8d 50 01             	lea    0x1(%eax),%edx
f012f270:	89 d0                	mov    %edx,%eax
f012f272:	01 c0                	add    %eax,%eax
f012f274:	01 d0                	add    %edx,%eax
f012f276:	01 c0                	add    %eax,%eax
f012f278:	01 d0                	add    %edx,%eax
f012f27a:	39 c1                	cmp    %eax,%ecx
f012f27c:	74 17                	je     f012f295 <test_krealloc_BF+0x1e8c>
			panic("krealloc: invalid read after re-allocations");
f012f27e:	83 ec 04             	sub    $0x4,%esp
f012f281:	68 bc c0 13 f0       	push   $0xf013c0bc
f012f286:	68 f6 12 00 00       	push   $0x12f6
f012f28b:	68 76 a8 13 f0       	push   $0xf013a876
f012f290:	e8 11 0f fd ff       	call   f01001a6 <_panic>

		//Test read write access for the new allocated size of 1st 2 MB
		shortArr = (short*) ptr_allocations[4];
f012f295:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f012f29b:	89 85 e4 fe ff ff    	mov    %eax,-0x11c(%ebp)

		sums[0] = 0;
f012f2a1:	c7 85 a0 fd ff ff 00 	movl   $0x0,-0x260(%ebp)
f012f2a8:	00 00 00 
		for (i = 0; i <= lastIndices[4]; ++i) {
f012f2ab:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
f012f2b2:	eb 24                	jmp    f012f2d8 <test_krealloc_BF+0x1ecf>
			sums[0] += shortArr[i];
f012f2b4:	8b 95 a0 fd ff ff    	mov    -0x260(%ebp),%edx
f012f2ba:	8b 45 d8             	mov    -0x28(%ebp),%eax
f012f2bd:	01 c0                	add    %eax,%eax
f012f2bf:	89 c1                	mov    %eax,%ecx
f012f2c1:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f012f2c7:	01 c8                	add    %ecx,%eax
f012f2c9:	66 8b 00             	mov    (%eax),%ax
f012f2cc:	98                   	cwtl   
f012f2cd:	01 d0                	add    %edx,%eax
f012f2cf:	89 85 a0 fd ff ff    	mov    %eax,-0x260(%ebp)

		//Test read write access for the new allocated size of 1st 2 MB
		shortArr = (short*) ptr_allocations[4];

		sums[0] = 0;
		for (i = 0; i <= lastIndices[4]; ++i) {
f012f2d5:	ff 45 d8             	incl   -0x28(%ebp)
f012f2d8:	8b 85 00 fe ff ff    	mov    -0x200(%ebp),%eax
f012f2de:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f012f2e1:	7d d1                	jge    f012f2b4 <test_krealloc_BF+0x1eab>
			sums[0] += shortArr[i];
		}
		if (sums[0] != (lastIndices[4] + 1) * 5)
f012f2e3:	8b 95 a0 fd ff ff    	mov    -0x260(%ebp),%edx
f012f2e9:	8b 85 00 fe ff ff    	mov    -0x200(%ebp),%eax
f012f2ef:	8d 48 01             	lea    0x1(%eax),%ecx
f012f2f2:	89 c8                	mov    %ecx,%eax
f012f2f4:	c1 e0 02             	shl    $0x2,%eax
f012f2f7:	01 c8                	add    %ecx,%eax
f012f2f9:	39 c2                	cmp    %eax,%edx
f012f2fb:	74 17                	je     f012f314 <test_krealloc_BF+0x1f0b>
			panic("krealloc: invalid read after re-allocations");
f012f2fd:	83 ec 04             	sub    $0x4,%esp
f012f300:	68 bc c0 13 f0       	push   $0xf013c0bc
f012f305:	68 00 13 00 00       	push   $0x1300
f012f30a:	68 76 a8 13 f0       	push   $0xf013a876
f012f30f:	e8 92 0e fd ff       	call   f01001a6 <_panic>

		//Test krealloc with size = 0 after krealloc 1st 3 MB to 20 MB
		freeFrames = sys_calculate_free_frames();
f012f314:	e8 a5 d0 fd ff       	call   f010c3be <sys_calculate_free_frames>
f012f319:	89 45 b8             	mov    %eax,-0x48(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f012f31c:	e8 6b 49 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f012f321:	89 85 dc fe ff ff    	mov    %eax,-0x124(%ebp)
		krealloc(ptr_allocations[6], 0);
f012f327:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f012f32d:	83 ec 08             	sub    $0x8,%esp
f012f330:	6a 00                	push   $0x0
f012f332:	50                   	push   %eax
f012f333:	e8 54 83 fd ff       	call   f010768c <krealloc>
f012f338:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0)
f012f33b:	e8 4c 49 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f012f340:	3b 85 dc fe ff ff    	cmp    -0x124(%ebp),%eax
f012f346:	74 17                	je     f012f35f <test_krealloc_BF+0x1f56>
			panic(
f012f348:	83 ec 04             	sub    $0x4,%esp
f012f34b:	68 90 a8 13 f0       	push   $0xf013a890
f012f350:	68 08 13 00 00       	push   $0x1308
f012f355:	68 76 a8 13 f0       	push   $0xf013a876
f012f35a:	e8 47 0e fd ff       	call   f01001a6 <_panic>
					"Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((sys_calculate_free_frames() - freeFrames) != 20 * Mega / PAGE_SIZE)
f012f35f:	e8 5a d0 fd ff       	call   f010c3be <sys_calculate_free_frames>
f012f364:	89 c2                	mov    %eax,%edx
f012f366:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012f369:	29 c2                	sub    %eax,%edx
f012f36b:	89 d0                	mov    %edx,%eax
f012f36d:	3d 00 14 00 00       	cmp    $0x1400,%eax
f012f372:	74 17                	je     f012f38b <test_krealloc_BF+0x1f82>
			panic("krealloc: pages in memory are not freed correctly");
f012f374:	83 ec 04             	sub    $0x4,%esp
f012f377:	68 4c bd 13 f0       	push   $0xf013bd4c
f012f37c:	68 0a 13 00 00       	push   $0x130a
f012f381:	68 76 a8 13 f0       	push   $0xf013a876
f012f386:	e8 1b 0e fd ff       	call   f01001a6 <_panic>

		//Test kfree after krealloc 1st 2 MB to 10 MB
		freeFrames = sys_calculate_free_frames();
f012f38b:	e8 2e d0 fd ff       	call   f010c3be <sys_calculate_free_frames>
f012f390:	89 45 b8             	mov    %eax,-0x48(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f012f393:	e8 f4 48 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f012f398:	89 85 dc fe ff ff    	mov    %eax,-0x124(%ebp)
		kfree(ptr_allocations[4]);
f012f39e:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f012f3a4:	83 ec 0c             	sub    $0xc,%esp
f012f3a7:	50                   	push   %eax
f012f3a8:	e8 31 82 fd ff       	call   f01075de <kfree>
f012f3ad:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0)
f012f3b0:	e8 d7 48 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f012f3b5:	3b 85 dc fe ff ff    	cmp    -0x124(%ebp),%eax
f012f3bb:	74 17                	je     f012f3d4 <test_krealloc_BF+0x1fcb>
			panic(
f012f3bd:	83 ec 04             	sub    $0x4,%esp
f012f3c0:	68 90 a8 13 f0       	push   $0xf013a890
f012f3c5:	68 12 13 00 00       	push   $0x1312
f012f3ca:	68 76 a8 13 f0       	push   $0xf013a876
f012f3cf:	e8 d2 0d fd ff       	call   f01001a6 <_panic>
					"Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((sys_calculate_free_frames() - freeFrames) != 10 * Mega / PAGE_SIZE)
f012f3d4:	e8 e5 cf fd ff       	call   f010c3be <sys_calculate_free_frames>
f012f3d9:	89 c2                	mov    %eax,%edx
f012f3db:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012f3de:	29 c2                	sub    %eax,%edx
f012f3e0:	89 d0                	mov    %edx,%eax
f012f3e2:	3d 00 0a 00 00       	cmp    $0xa00,%eax
f012f3e7:	74 17                	je     f012f400 <test_krealloc_BF+0x1ff7>
			panic("krealloc: pages in memory are not freed correctly");
f012f3e9:	83 ec 04             	sub    $0x4,%esp
f012f3ec:	68 4c bd 13 f0       	push   $0xf013bd4c
f012f3f1:	68 14 13 00 00       	push   $0x1314
f012f3f6:	68 76 a8 13 f0       	push   $0xf013a876
f012f3fb:	e8 a6 0d fd ff       	call   f01001a6 <_panic>

		//check tables	[15%]
		{
			long long va;
			for (va = KERNEL_HEAP_START; va < (long long) KERNEL_HEAP_MAX; va +=
f012f400:	c7 45 d0 00 00 00 f6 	movl   $0xf6000000,-0x30(%ebp)
f012f407:	c7 45 d4 00 00 00 00 	movl   $0x0,-0x2c(%ebp)
f012f40e:	eb 48                	jmp    f012f458 <test_krealloc_BF+0x204f>
			PTSIZE)
			{
				uint32 *ptr_table;
				get_page_table(ptr_page_directory,  (uint32) va,
f012f410:	8b 55 d0             	mov    -0x30(%ebp),%edx
f012f413:	a1 b8 0e 6c f0       	mov    0xf06c0eb8,%eax
f012f418:	83 ec 04             	sub    $0x4,%esp
f012f41b:	8d 8d 98 fd ff ff    	lea    -0x268(%ebp),%ecx
f012f421:	51                   	push   %ecx
f012f422:	52                   	push   %edx
f012f423:	50                   	push   %eax
f012f424:	e8 40 75 fd ff       	call   f0106969 <get_page_table>
f012f429:	83 c4 10             	add    $0x10,%esp
						&ptr_table);
				if (ptr_table == NULL) {
f012f42c:	8b 85 98 fd ff ff    	mov    -0x268(%ebp),%eax
f012f432:	85 c0                	test   %eax,%eax
f012f434:	75 17                	jne    f012f44d <test_krealloc_BF+0x2044>
					panic(
f012f436:	83 ec 04             	sub    $0x4,%esp
f012f439:	68 78 b1 13 f0       	push   $0xf013b178
f012f43e:	68 21 13 00 00       	push   $0x1321
f012f443:	68 76 a8 13 f0       	push   $0xf013a876
f012f448:	e8 59 0d fd ff       	call   f01001a6 <_panic>
			panic("krealloc: pages in memory are not freed correctly");

		//check tables	[15%]
		{
			long long va;
			for (va = KERNEL_HEAP_START; va < (long long) KERNEL_HEAP_MAX; va +=
f012f44d:	81 45 d0 00 00 40 00 	addl   $0x400000,-0x30(%ebp)
f012f454:	83 55 d4 00          	adcl   $0x0,-0x2c(%ebp)
f012f458:	83 7d d4 00          	cmpl   $0x0,-0x2c(%ebp)
f012f45c:	78 b2                	js     f012f410 <test_krealloc_BF+0x2007>
f012f45e:	83 7d d4 00          	cmpl   $0x0,-0x2c(%ebp)
f012f462:	7f 09                	jg     f012f46d <test_krealloc_BF+0x2064>
f012f464:	81 7d d0 ff ef ff ff 	cmpl   $0xffffefff,-0x30(%ebp)
f012f46b:	76 a3                	jbe    f012f410 <test_krealloc_BF+0x2007>
			}
		}

	}

	cprintf("\b\b\b100%\n");
f012f46d:	83 ec 0c             	sub    $0xc,%esp
f012f470:	68 5a aa 13 f0       	push   $0xf013aa5a
f012f475:	e8 b3 17 fd ff       	call   f0100c2d <cprintf>
f012f47a:	83 c4 10             	add    $0x10,%esp

	cprintf("\nCongratulations!! test krealloc BF completed successfully.\n");
f012f47d:	83 ec 0c             	sub    $0xc,%esp
f012f480:	68 5c c1 13 f0       	push   $0xf013c15c
f012f485:	e8 a3 17 fd ff       	call   f0100c2d <cprintf>
f012f48a:	83 c4 10             	add    $0x10,%esp
	return 0;
f012f48d:	b8 00 00 00 00       	mov    $0x0,%eax
}
f012f492:	8d 65 f8             	lea    -0x8(%ebp),%esp
f012f495:	5b                   	pop    %ebx
f012f496:	5f                   	pop    %edi
f012f497:	5d                   	pop    %ebp
f012f498:	c3                   	ret    

f012f499 <test_initialize_dyn_block_system>:

//2022
int test_initialize_dyn_block_system(int freeFrames_before, int freeDiskFrames_before, int freeFrames_after, int freeDiskFrames_after)
{
f012f499:	55                   	push   %ebp
f012f49a:	89 e5                	mov    %esp,%ebp
f012f49c:	83 ec 08             	sub    $0x8,%esp
	if(USE_KHEAP != 1)
		panic("USE_KHEAP = 0 & it shall be 1. Go to 'inc/memlayout.h' and set USE_KHEAP by 1. Then, repeat the test again.");
f012f49f:	83 ec 04             	sub    $0x4,%esp
f012f4a2:	68 9c c1 13 f0       	push   $0xf013c19c
f012f4a7:	68 32 13 00 00       	push   $0x1332
f012f4ac:	68 76 a8 13 f0       	push   $0xf013a876
f012f4b1:	e8 f0 0c fd ff       	call   f01001a6 <_panic>

f012f4b6 <nearest_pow2_ceil>:
#include <kern/cpu/sched.h>
#include <kern/disk/pagefile_manager.h>
#include <kern/mem/memory_manager.h>
#include "../cons/console.h"

inline unsigned int nearest_pow2_ceil(unsigned int x) {
f012f4b6:	55                   	push   %ebp
f012f4b7:	89 e5                	mov    %esp,%ebp
f012f4b9:	83 ec 10             	sub    $0x10,%esp
    if (x <= 1) return 1;
f012f4bc:	83 7d 08 01          	cmpl   $0x1,0x8(%ebp)
f012f4c0:	77 07                	ja     f012f4c9 <nearest_pow2_ceil+0x13>
f012f4c2:	b8 01 00 00 00       	mov    $0x1,%eax
f012f4c7:	eb 20                	jmp    f012f4e9 <nearest_pow2_ceil+0x33>
    int power = 2;
f012f4c9:	c7 45 fc 02 00 00 00 	movl   $0x2,-0x4(%ebp)
    x--;
f012f4d0:	ff 4d 08             	decl   0x8(%ebp)
    while (x >>= 1) {
f012f4d3:	eb 08                	jmp    f012f4dd <nearest_pow2_ceil+0x27>
    	power <<= 1;
f012f4d5:	8b 45 fc             	mov    -0x4(%ebp),%eax
f012f4d8:	01 c0                	add    %eax,%eax
f012f4da:	89 45 fc             	mov    %eax,-0x4(%ebp)

inline unsigned int nearest_pow2_ceil(unsigned int x) {
    if (x <= 1) return 1;
    int power = 2;
    x--;
    while (x >>= 1) {
f012f4dd:	d1 6d 08             	shrl   0x8(%ebp)
f012f4e0:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f012f4e4:	75 ef                	jne    f012f4d5 <nearest_pow2_ceil+0x1f>
    	power <<= 1;
    }
    return power;
f012f4e6:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
f012f4e9:	c9                   	leave  
f012f4ea:	c3                   	ret    

f012f4eb <log2_ceil>:
inline unsigned int log2_ceil(unsigned int x) {
f012f4eb:	55                   	push   %ebp
f012f4ec:	89 e5                	mov    %esp,%ebp
f012f4ee:	83 ec 10             	sub    $0x10,%esp
    if (x <= 1) return 1;
f012f4f1:	83 7d 08 01          	cmpl   $0x1,0x8(%ebp)
f012f4f5:	77 07                	ja     f012f4fe <log2_ceil+0x13>
f012f4f7:	b8 01 00 00 00       	mov    $0x1,%eax
f012f4fc:	eb 1b                	jmp    f012f519 <log2_ceil+0x2e>
    //int power = 2;
    int bits_cnt = 2 ;
f012f4fe:	c7 45 fc 02 00 00 00 	movl   $0x2,-0x4(%ebp)
    x--;
f012f505:	ff 4d 08             	decl   0x8(%ebp)
    while (x >>= 1) {
f012f508:	eb 03                	jmp    f012f50d <log2_ceil+0x22>
    	//power <<= 1;
    	bits_cnt++ ;
f012f50a:	ff 45 fc             	incl   -0x4(%ebp)
inline unsigned int log2_ceil(unsigned int x) {
    if (x <= 1) return 1;
    //int power = 2;
    int bits_cnt = 2 ;
    x--;
    while (x >>= 1) {
f012f50d:	d1 6d 08             	shrl   0x8(%ebp)
f012f510:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f012f514:	75 f4                	jne    f012f50a <log2_ceil+0x1f>
    	//power <<= 1;
    	bits_cnt++ ;
    }
    return bits_cnt;
f012f516:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
f012f519:	c9                   	leave  
f012f51a:	c3                   	ret    

f012f51b <detect_loop_in_FrameInfo_list>:
void detect_loop_in_FrameInfo_list(struct FrameInfo_List* fi_list)
{
f012f51b:	55                   	push   %ebp
f012f51c:	89 e5                	mov    %esp,%ebp
f012f51e:	83 ec 18             	sub    $0x18,%esp
	struct  FrameInfo * slowPtr = LIST_FIRST(fi_list);
f012f521:	8b 45 08             	mov    0x8(%ebp),%eax
f012f524:	8b 00                	mov    (%eax),%eax
f012f526:	89 45 f4             	mov    %eax,-0xc(%ebp)
	struct  FrameInfo * fastPtr = LIST_FIRST(fi_list);
f012f529:	8b 45 08             	mov    0x8(%ebp),%eax
f012f52c:	8b 00                	mov    (%eax),%eax
f012f52e:	89 45 f0             	mov    %eax,-0x10(%ebp)


	while (slowPtr && fastPtr) {
f012f531:	eb 52                	jmp    f012f585 <detect_loop_in_FrameInfo_list+0x6a>
		fastPtr = LIST_NEXT(fastPtr); // advance the fast pointer
f012f533:	8b 45 f0             	mov    -0x10(%ebp),%eax
f012f536:	8b 00                	mov    (%eax),%eax
f012f538:	89 45 f0             	mov    %eax,-0x10(%ebp)
		if (fastPtr == slowPtr) // and check if its equal to the slow pointer
f012f53b:	8b 45 f0             	mov    -0x10(%ebp),%eax
f012f53e:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012f541:	75 12                	jne    f012f555 <detect_loop_in_FrameInfo_list+0x3a>
		{
			cprintf("loop detected in modiflist\n");
f012f543:	83 ec 0c             	sub    $0xc,%esp
f012f546:	68 08 c2 13 f0       	push   $0xf013c208
f012f54b:	e8 dd 16 fd ff       	call   f0100c2d <cprintf>
f012f550:	83 c4 10             	add    $0x10,%esp
			break;
f012f553:	eb 3f                	jmp    f012f594 <detect_loop_in_FrameInfo_list+0x79>
		}

		if (fastPtr == NULL) {
f012f555:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f012f559:	74 38                	je     f012f593 <detect_loop_in_FrameInfo_list+0x78>
			break; // since fastPtr is NULL we reached the tail
		}

		fastPtr = LIST_NEXT(fastPtr); //advance and check again
f012f55b:	8b 45 f0             	mov    -0x10(%ebp),%eax
f012f55e:	8b 00                	mov    (%eax),%eax
f012f560:	89 45 f0             	mov    %eax,-0x10(%ebp)
		if (fastPtr == slowPtr) {
f012f563:	8b 45 f0             	mov    -0x10(%ebp),%eax
f012f566:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012f569:	75 12                	jne    f012f57d <detect_loop_in_FrameInfo_list+0x62>
			cprintf("loop detected in list\n");
f012f56b:	83 ec 0c             	sub    $0xc,%esp
f012f56e:	68 24 c2 13 f0       	push   $0xf013c224
f012f573:	e8 b5 16 fd ff       	call   f0100c2d <cprintf>
f012f578:	83 c4 10             	add    $0x10,%esp
			break;
f012f57b:	eb 17                	jmp    f012f594 <detect_loop_in_FrameInfo_list+0x79>
		}

		slowPtr = LIST_NEXT(slowPtr); // advance the slow pointer only once
f012f57d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012f580:	8b 00                	mov    (%eax),%eax
f012f582:	89 45 f4             	mov    %eax,-0xc(%ebp)
{
	struct  FrameInfo * slowPtr = LIST_FIRST(fi_list);
	struct  FrameInfo * fastPtr = LIST_FIRST(fi_list);


	while (slowPtr && fastPtr) {
f012f585:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f012f589:	74 09                	je     f012f594 <detect_loop_in_FrameInfo_list+0x79>
f012f58b:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f012f58f:	75 a2                	jne    f012f533 <detect_loop_in_FrameInfo_list+0x18>
f012f591:	eb 01                	jmp    f012f594 <detect_loop_in_FrameInfo_list+0x79>
			cprintf("loop detected in modiflist\n");
			break;
		}

		if (fastPtr == NULL) {
			break; // since fastPtr is NULL we reached the tail
f012f593:	90                   	nop
			break;
		}

		slowPtr = LIST_NEXT(slowPtr); // advance the slow pointer only once
	}
	cprintf("finished  loop detection\n");
f012f594:	83 ec 0c             	sub    $0xc,%esp
f012f597:	68 3b c2 13 f0       	push   $0xf013c23b
f012f59c:	e8 8c 16 fd ff       	call   f0100c2d <cprintf>
f012f5a1:	83 c4 10             	add    $0x10,%esp
}
f012f5a4:	90                   	nop
f012f5a5:	c9                   	leave  
f012f5a6:	c3                   	ret    

f012f5a7 <scarce_memory>:

void scarce_memory()
{
f012f5a7:	55                   	push   %ebp
f012f5a8:	89 e5                	mov    %esp,%ebp
f012f5aa:	83 ec 28             	sub    $0x28,%esp
	uint32 total_size_tobe_allocated = ((100 - memory_scarce_threshold_percentage)*number_of_frames)/100;
f012f5ad:	a1 40 ea 6b f0       	mov    0xf06bea40,%eax
f012f5b2:	ba 64 00 00 00       	mov    $0x64,%edx
f012f5b7:	29 c2                	sub    %eax,%edx
f012f5b9:	a1 50 0e 6c f0       	mov    0xf06c0e50,%eax
f012f5be:	0f af c2             	imul   %edx,%eax
f012f5c1:	ba 1f 85 eb 51       	mov    $0x51eb851f,%edx
f012f5c6:	f7 e2                	mul    %edx
f012f5c8:	89 d0                	mov    %edx,%eax
f012f5ca:	c1 e8 05             	shr    $0x5,%eax
f012f5cd:	89 45 f4             	mov    %eax,-0xc(%ebp)
//	cprintf("total_size_tobe_allocated %d\n", number_of_frames);
	if (((100 - memory_scarce_threshold_percentage)*number_of_frames) % 100 > 0)
f012f5d0:	a1 40 ea 6b f0       	mov    0xf06bea40,%eax
f012f5d5:	ba 64 00 00 00       	mov    $0x64,%edx
f012f5da:	29 c2                	sub    %eax,%edx
f012f5dc:	a1 50 0e 6c f0       	mov    0xf06c0e50,%eax
f012f5e1:	89 d1                	mov    %edx,%ecx
f012f5e3:	0f af c8             	imul   %eax,%ecx
f012f5e6:	b8 1f 85 eb 51       	mov    $0x51eb851f,%eax
f012f5eb:	f7 e1                	mul    %ecx
f012f5ed:	c1 ea 05             	shr    $0x5,%edx
f012f5f0:	89 d0                	mov    %edx,%eax
f012f5f2:	c1 e0 02             	shl    $0x2,%eax
f012f5f5:	01 d0                	add    %edx,%eax
f012f5f7:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f012f5fe:	01 d0                	add    %edx,%eax
f012f600:	c1 e0 02             	shl    $0x2,%eax
f012f603:	29 c1                	sub    %eax,%ecx
f012f605:	89 ca                	mov    %ecx,%edx
f012f607:	85 d2                	test   %edx,%edx
f012f609:	74 03                	je     f012f60e <scarce_memory+0x67>
		total_size_tobe_allocated++;
f012f60b:	ff 45 f4             	incl   -0xc(%ebp)

	uint32 size_of_already_allocated = number_of_frames - LIST_SIZE(&free_frame_list) ;
f012f60e:	8b 15 50 0e 6c f0    	mov    0xf06c0e50,%edx
f012f614:	a1 64 0e 6c f0       	mov    0xf06c0e64,%eax
f012f619:	29 c2                	sub    %eax,%edx
f012f61b:	89 d0                	mov    %edx,%eax
f012f61d:	89 45 ec             	mov    %eax,-0x14(%ebp)
	uint32 size_tobe_allocated = total_size_tobe_allocated - size_of_already_allocated;
f012f620:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012f623:	2b 45 ec             	sub    -0x14(%ebp),%eax
f012f626:	89 45 e8             	mov    %eax,-0x18(%ebp)
//	cprintf("size_of_already_allocated %d\n", size_of_already_allocated);
//	cprintf("size to be allocated %d\n", size_tobe_allocated);
	int i = 0 ;
f012f629:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	struct FrameInfo* ptr_tmp_FI ;
	for (; i <= size_tobe_allocated ; i++)
f012f630:	eb 12                	jmp    f012f644 <scarce_memory+0x9d>
	{
		allocate_frame(&ptr_tmp_FI) ;
f012f632:	83 ec 0c             	sub    $0xc,%esp
f012f635:	8d 45 e4             	lea    -0x1c(%ebp),%eax
f012f638:	50                   	push   %eax
f012f639:	e8 6c 71 fd ff       	call   f01067aa <allocate_frame>
f012f63e:	83 c4 10             	add    $0x10,%esp
	uint32 size_tobe_allocated = total_size_tobe_allocated - size_of_already_allocated;
//	cprintf("size_of_already_allocated %d\n", size_of_already_allocated);
//	cprintf("size to be allocated %d\n", size_tobe_allocated);
	int i = 0 ;
	struct FrameInfo* ptr_tmp_FI ;
	for (; i <= size_tobe_allocated ; i++)
f012f641:	ff 45 f0             	incl   -0x10(%ebp)
f012f644:	8b 45 f0             	mov    -0x10(%ebp),%eax
f012f647:	3b 45 e8             	cmp    -0x18(%ebp),%eax
f012f64a:	76 e6                	jbe    f012f632 <scarce_memory+0x8b>
	{
		allocate_frame(&ptr_tmp_FI) ;
	}
}
f012f64c:	90                   	nop
f012f64d:	c9                   	leave  
f012f64e:	c3                   	ret    

f012f64f <calc_no_pages_tobe_removed_from_ready_exit_queues>:

uint32 calc_no_pages_tobe_removed_from_ready_exit_queues(uint32 WS_or_MEMORY_flag)
{
f012f64f:	55                   	push   %ebp
f012f650:	89 e5                	mov    %esp,%ebp
f012f652:	83 ec 38             	sub    $0x38,%esp
	uint32 no_of_pages_tobe_removed_from_ready = 0;
f012f655:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	uint32 no_of_pages_tobe_removed_from_exit = 0;
f012f65c:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	uint32 no_of_pages_tobe_removed_from_curenv = 0;
f012f663:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
	if(WS_or_MEMORY_flag == 1)	// THEN MEMORY SHALL BE FREED
f012f66a:	83 7d 08 01          	cmpl   $0x1,0x8(%ebp)
f012f66e:	0f 85 d3 01 00 00    	jne    f012f847 <calc_no_pages_tobe_removed_from_ready_exit_queues+0x1f8>
	{
		for(int i = 0; i < num_of_ready_queues; i++)
f012f674:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
f012f67b:	e9 e1 00 00 00       	jmp    f012f761 <calc_no_pages_tobe_removed_from_ready_exit_queues+0x112>
		{
			struct Env * ptr_ready_env = NULL;
f012f680:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
			LIST_FOREACH(ptr_ready_env, &(env_ready_queues[i]))
f012f687:	8b 45 e8             	mov    -0x18(%ebp),%eax
f012f68a:	c1 e0 04             	shl    $0x4,%eax
f012f68d:	05 f0 8a 65 f0       	add    $0xf0658af0,%eax
f012f692:	8b 00                	mov    (%eax),%eax
f012f694:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f012f697:	e9 82 00 00 00       	jmp    f012f71e <calc_no_pages_tobe_removed_from_ready_exit_queues+0xcf>
			{
				int num_of_pages_in_WS = env_page_ws_get_size(ptr_ready_env);
f012f69c:	83 ec 0c             	sub    $0xc,%esp
f012f69f:	ff 75 e4             	pushl  -0x1c(%ebp)
f012f6a2:	e8 b6 82 fd ff       	call   f010795d <env_page_ws_get_size>
f012f6a7:	83 c4 10             	add    $0x10,%esp
f012f6aa:	89 45 d0             	mov    %eax,-0x30(%ebp)
				int num_of_pages_to_be_removed = curenv->percentage_of_WS_pages_to_be_removed * num_of_pages_in_WS / 100;
f012f6ad:	a1 14 82 65 f0       	mov    0xf0658214,%eax
f012f6b2:	8b 90 5c da 01 00    	mov    0x1da5c(%eax),%edx
f012f6b8:	8b 45 d0             	mov    -0x30(%ebp),%eax
f012f6bb:	0f af c2             	imul   %edx,%eax
f012f6be:	ba 1f 85 eb 51       	mov    $0x51eb851f,%edx
f012f6c3:	f7 e2                	mul    %edx
f012f6c5:	89 d0                	mov    %edx,%eax
f012f6c7:	c1 e8 05             	shr    $0x5,%eax
f012f6ca:	89 45 e0             	mov    %eax,-0x20(%ebp)
				if ((curenv->percentage_of_WS_pages_to_be_removed * num_of_pages_in_WS) % 100 > 0)
f012f6cd:	a1 14 82 65 f0       	mov    0xf0658214,%eax
f012f6d2:	8b 90 5c da 01 00    	mov    0x1da5c(%eax),%edx
f012f6d8:	8b 45 d0             	mov    -0x30(%ebp),%eax
f012f6db:	89 d1                	mov    %edx,%ecx
f012f6dd:	0f af c8             	imul   %eax,%ecx
f012f6e0:	b8 1f 85 eb 51       	mov    $0x51eb851f,%eax
f012f6e5:	f7 e1                	mul    %ecx
f012f6e7:	c1 ea 05             	shr    $0x5,%edx
f012f6ea:	89 d0                	mov    %edx,%eax
f012f6ec:	c1 e0 02             	shl    $0x2,%eax
f012f6ef:	01 d0                	add    %edx,%eax
f012f6f1:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f012f6f8:	01 d0                	add    %edx,%eax
f012f6fa:	c1 e0 02             	shl    $0x2,%eax
f012f6fd:	29 c1                	sub    %eax,%ecx
f012f6ff:	89 ca                	mov    %ecx,%edx
f012f701:	85 d2                	test   %edx,%edx
f012f703:	74 03                	je     f012f708 <calc_no_pages_tobe_removed_from_ready_exit_queues+0xb9>
					num_of_pages_to_be_removed++;
f012f705:	ff 45 e0             	incl   -0x20(%ebp)
				no_of_pages_tobe_removed_from_ready += num_of_pages_to_be_removed;
f012f708:	8b 45 e0             	mov    -0x20(%ebp),%eax
f012f70b:	01 45 f4             	add    %eax,-0xc(%ebp)
	if(WS_or_MEMORY_flag == 1)	// THEN MEMORY SHALL BE FREED
	{
		for(int i = 0; i < num_of_ready_queues; i++)
		{
			struct Env * ptr_ready_env = NULL;
			LIST_FOREACH(ptr_ready_env, &(env_ready_queues[i]))
f012f70e:	8b 45 e8             	mov    -0x18(%ebp),%eax
f012f711:	c1 e0 04             	shl    $0x4,%eax
f012f714:	05 f8 8a 65 f0       	add    $0xf0658af8,%eax
f012f719:	8b 00                	mov    (%eax),%eax
f012f71b:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f012f71e:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f012f722:	74 08                	je     f012f72c <calc_no_pages_tobe_removed_from_ready_exit_queues+0xdd>
f012f724:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f012f727:	8b 40 44             	mov    0x44(%eax),%eax
f012f72a:	eb 05                	jmp    f012f731 <calc_no_pages_tobe_removed_from_ready_exit_queues+0xe2>
f012f72c:	b8 00 00 00 00       	mov    $0x0,%eax
f012f731:	8b 55 e8             	mov    -0x18(%ebp),%edx
f012f734:	c1 e2 04             	shl    $0x4,%edx
f012f737:	81 c2 f8 8a 65 f0    	add    $0xf0658af8,%edx
f012f73d:	89 02                	mov    %eax,(%edx)
f012f73f:	8b 45 e8             	mov    -0x18(%ebp),%eax
f012f742:	c1 e0 04             	shl    $0x4,%eax
f012f745:	05 f8 8a 65 f0       	add    $0xf0658af8,%eax
f012f74a:	8b 00                	mov    (%eax),%eax
f012f74c:	85 c0                	test   %eax,%eax
f012f74e:	0f 85 48 ff ff ff    	jne    f012f69c <calc_no_pages_tobe_removed_from_ready_exit_queues+0x4d>
f012f754:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f012f758:	0f 85 3e ff ff ff    	jne    f012f69c <calc_no_pages_tobe_removed_from_ready_exit_queues+0x4d>
	uint32 no_of_pages_tobe_removed_from_ready = 0;
	uint32 no_of_pages_tobe_removed_from_exit = 0;
	uint32 no_of_pages_tobe_removed_from_curenv = 0;
	if(WS_or_MEMORY_flag == 1)	// THEN MEMORY SHALL BE FREED
	{
		for(int i = 0; i < num_of_ready_queues; i++)
f012f75e:	ff 45 e8             	incl   -0x18(%ebp)
f012f761:	a0 bc 0e 6c f0       	mov    0xf06c0ebc,%al
f012f766:	0f b6 c0             	movzbl %al,%eax
f012f769:	3b 45 e8             	cmp    -0x18(%ebp),%eax
f012f76c:	0f 8f 0e ff ff ff    	jg     f012f680 <calc_no_pages_tobe_removed_from_ready_exit_queues+0x31>
					num_of_pages_to_be_removed++;
				no_of_pages_tobe_removed_from_ready += num_of_pages_to_be_removed;
			}
		}

		struct Env * ptr_exit_env = NULL;
f012f772:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
		LIST_FOREACH(ptr_exit_env, &env_exit_queue)
f012f779:	a1 44 ea 6b f0       	mov    0xf06bea44,%eax
f012f77e:	89 45 dc             	mov    %eax,-0x24(%ebp)
f012f781:	eb 19                	jmp    f012f79c <calc_no_pages_tobe_removed_from_ready_exit_queues+0x14d>
		{
			no_of_pages_tobe_removed_from_exit += env_page_ws_get_size(ptr_exit_env);
f012f783:	83 ec 0c             	sub    $0xc,%esp
f012f786:	ff 75 dc             	pushl  -0x24(%ebp)
f012f789:	e8 cf 81 fd ff       	call   f010795d <env_page_ws_get_size>
f012f78e:	83 c4 10             	add    $0x10,%esp
f012f791:	01 45 f0             	add    %eax,-0x10(%ebp)
				no_of_pages_tobe_removed_from_ready += num_of_pages_to_be_removed;
			}
		}

		struct Env * ptr_exit_env = NULL;
		LIST_FOREACH(ptr_exit_env, &env_exit_queue)
f012f794:	a1 4c ea 6b f0       	mov    0xf06bea4c,%eax
f012f799:	89 45 dc             	mov    %eax,-0x24(%ebp)
f012f79c:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f012f7a0:	74 08                	je     f012f7aa <calc_no_pages_tobe_removed_from_ready_exit_queues+0x15b>
f012f7a2:	8b 45 dc             	mov    -0x24(%ebp),%eax
f012f7a5:	8b 40 44             	mov    0x44(%eax),%eax
f012f7a8:	eb 05                	jmp    f012f7af <calc_no_pages_tobe_removed_from_ready_exit_queues+0x160>
f012f7aa:	b8 00 00 00 00       	mov    $0x0,%eax
f012f7af:	a3 4c ea 6b f0       	mov    %eax,0xf06bea4c
f012f7b4:	a1 4c ea 6b f0       	mov    0xf06bea4c,%eax
f012f7b9:	85 c0                	test   %eax,%eax
f012f7bb:	75 c6                	jne    f012f783 <calc_no_pages_tobe_removed_from_ready_exit_queues+0x134>
f012f7bd:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f012f7c1:	75 c0                	jne    f012f783 <calc_no_pages_tobe_removed_from_ready_exit_queues+0x134>
		{
			no_of_pages_tobe_removed_from_exit += env_page_ws_get_size(ptr_exit_env);
		}

		if(curenv != NULL)
f012f7c3:	a1 14 82 65 f0       	mov    0xf0658214,%eax
f012f7c8:	85 c0                	test   %eax,%eax
f012f7ca:	0f 84 ec 00 00 00    	je     f012f8bc <calc_no_pages_tobe_removed_from_ready_exit_queues+0x26d>
		{
			int num_of_pages_in_WS = env_page_ws_get_size(curenv);
f012f7d0:	a1 14 82 65 f0       	mov    0xf0658214,%eax
f012f7d5:	83 ec 0c             	sub    $0xc,%esp
f012f7d8:	50                   	push   %eax
f012f7d9:	e8 7f 81 fd ff       	call   f010795d <env_page_ws_get_size>
f012f7de:	83 c4 10             	add    $0x10,%esp
f012f7e1:	89 45 cc             	mov    %eax,-0x34(%ebp)
			int num_of_pages_to_be_removed = curenv->percentage_of_WS_pages_to_be_removed * num_of_pages_in_WS / 100;
f012f7e4:	a1 14 82 65 f0       	mov    0xf0658214,%eax
f012f7e9:	8b 90 5c da 01 00    	mov    0x1da5c(%eax),%edx
f012f7ef:	8b 45 cc             	mov    -0x34(%ebp),%eax
f012f7f2:	0f af c2             	imul   %edx,%eax
f012f7f5:	ba 1f 85 eb 51       	mov    $0x51eb851f,%edx
f012f7fa:	f7 e2                	mul    %edx
f012f7fc:	89 d0                	mov    %edx,%eax
f012f7fe:	c1 e8 05             	shr    $0x5,%eax
f012f801:	89 45 d8             	mov    %eax,-0x28(%ebp)
			if ((curenv->percentage_of_WS_pages_to_be_removed * num_of_pages_in_WS) % 100 > 0)
f012f804:	a1 14 82 65 f0       	mov    0xf0658214,%eax
f012f809:	8b 90 5c da 01 00    	mov    0x1da5c(%eax),%edx
f012f80f:	8b 45 cc             	mov    -0x34(%ebp),%eax
f012f812:	89 d1                	mov    %edx,%ecx
f012f814:	0f af c8             	imul   %eax,%ecx
f012f817:	b8 1f 85 eb 51       	mov    $0x51eb851f,%eax
f012f81c:	f7 e1                	mul    %ecx
f012f81e:	c1 ea 05             	shr    $0x5,%edx
f012f821:	89 d0                	mov    %edx,%eax
f012f823:	c1 e0 02             	shl    $0x2,%eax
f012f826:	01 d0                	add    %edx,%eax
f012f828:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f012f82f:	01 d0                	add    %edx,%eax
f012f831:	c1 e0 02             	shl    $0x2,%eax
f012f834:	29 c1                	sub    %eax,%ecx
f012f836:	89 ca                	mov    %ecx,%edx
f012f838:	85 d2                	test   %edx,%edx
f012f83a:	74 03                	je     f012f83f <calc_no_pages_tobe_removed_from_ready_exit_queues+0x1f0>
				num_of_pages_to_be_removed++;
f012f83c:	ff 45 d8             	incl   -0x28(%ebp)
			no_of_pages_tobe_removed_from_curenv = num_of_pages_to_be_removed;
f012f83f:	8b 45 d8             	mov    -0x28(%ebp),%eax
f012f842:	89 45 ec             	mov    %eax,-0x14(%ebp)
f012f845:	eb 75                	jmp    f012f8bc <calc_no_pages_tobe_removed_from_ready_exit_queues+0x26d>
		}
	}
	else	// THEN RAPID PROCESS SHALL BE FREED ONLY
	{
		int num_of_pages_in_WS = env_page_ws_get_size(curenv);
f012f847:	a1 14 82 65 f0       	mov    0xf0658214,%eax
f012f84c:	83 ec 0c             	sub    $0xc,%esp
f012f84f:	50                   	push   %eax
f012f850:	e8 08 81 fd ff       	call   f010795d <env_page_ws_get_size>
f012f855:	83 c4 10             	add    $0x10,%esp
f012f858:	89 45 c8             	mov    %eax,-0x38(%ebp)
		int num_of_pages_to_be_removed = curenv->percentage_of_WS_pages_to_be_removed * num_of_pages_in_WS / 100;
f012f85b:	a1 14 82 65 f0       	mov    0xf0658214,%eax
f012f860:	8b 90 5c da 01 00    	mov    0x1da5c(%eax),%edx
f012f866:	8b 45 c8             	mov    -0x38(%ebp),%eax
f012f869:	0f af c2             	imul   %edx,%eax
f012f86c:	ba 1f 85 eb 51       	mov    $0x51eb851f,%edx
f012f871:	f7 e2                	mul    %edx
f012f873:	89 d0                	mov    %edx,%eax
f012f875:	c1 e8 05             	shr    $0x5,%eax
f012f878:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		if ((curenv->percentage_of_WS_pages_to_be_removed * num_of_pages_in_WS) % 100 > 0)
f012f87b:	a1 14 82 65 f0       	mov    0xf0658214,%eax
f012f880:	8b 90 5c da 01 00    	mov    0x1da5c(%eax),%edx
f012f886:	8b 45 c8             	mov    -0x38(%ebp),%eax
f012f889:	89 d1                	mov    %edx,%ecx
f012f88b:	0f af c8             	imul   %eax,%ecx
f012f88e:	b8 1f 85 eb 51       	mov    $0x51eb851f,%eax
f012f893:	f7 e1                	mul    %ecx
f012f895:	c1 ea 05             	shr    $0x5,%edx
f012f898:	89 d0                	mov    %edx,%eax
f012f89a:	c1 e0 02             	shl    $0x2,%eax
f012f89d:	01 d0                	add    %edx,%eax
f012f89f:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f012f8a6:	01 d0                	add    %edx,%eax
f012f8a8:	c1 e0 02             	shl    $0x2,%eax
f012f8ab:	29 c1                	sub    %eax,%ecx
f012f8ad:	89 ca                	mov    %ecx,%edx
f012f8af:	85 d2                	test   %edx,%edx
f012f8b1:	74 03                	je     f012f8b6 <calc_no_pages_tobe_removed_from_ready_exit_queues+0x267>
			num_of_pages_to_be_removed++;
f012f8b3:	ff 45 d4             	incl   -0x2c(%ebp)
		no_of_pages_tobe_removed_from_curenv = num_of_pages_to_be_removed;
f012f8b6:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f012f8b9:	89 45 ec             	mov    %eax,-0x14(%ebp)
	}

	return no_of_pages_tobe_removed_from_curenv + no_of_pages_tobe_removed_from_ready + no_of_pages_tobe_removed_from_exit;
f012f8bc:	8b 55 ec             	mov    -0x14(%ebp),%edx
f012f8bf:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012f8c2:	01 c2                	add    %eax,%edx
f012f8c4:	8b 45 f0             	mov    -0x10(%ebp),%eax
f012f8c7:	01 d0                	add    %edx,%eax
}
f012f8c9:	c9                   	leave  
f012f8ca:	c3                   	ret    

f012f8cb <schenv>:


void schenv()
{
f012f8cb:	55                   	push   %ebp
f012f8cc:	89 e5                	mov    %esp,%ebp
f012f8ce:	83 ec 18             	sub    $0x18,%esp
	__nl = 0;
f012f8d1:	c6 05 e4 0e 6c f0 00 	movb   $0x0,0xf06c0ee4
	__ne = NULL;
f012f8d8:	c7 05 74 0e 6c f0 00 	movl   $0x0,0xf06c0e74
f012f8df:	00 00 00 
	for (int i = 0; i < num_of_ready_queues; ++i)
f012f8e2:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012f8e9:	eb 3a                	jmp    f012f925 <schenv+0x5a>
	{
		if (queue_size(&(env_ready_queues[i])))
f012f8eb:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012f8ee:	c1 e0 04             	shl    $0x4,%eax
f012f8f1:	05 f0 8a 65 f0       	add    $0xf0658af0,%eax
f012f8f6:	83 ec 0c             	sub    $0xc,%esp
f012f8f9:	50                   	push   %eax
f012f8fa:	e8 a0 4a fd ff       	call   f010439f <queue_size>
f012f8ff:	83 c4 10             	add    $0x10,%esp
f012f902:	85 c0                	test   %eax,%eax
f012f904:	74 1c                	je     f012f922 <schenv+0x57>
		{
			__ne = LIST_LAST(&(env_ready_queues[i]));
f012f906:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012f909:	c1 e0 04             	shl    $0x4,%eax
f012f90c:	05 f4 8a 65 f0       	add    $0xf0658af4,%eax
f012f911:	8b 00                	mov    (%eax),%eax
f012f913:	a3 74 0e 6c f0       	mov    %eax,0xf06c0e74
			__nl = i;
f012f918:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012f91b:	a2 e4 0e 6c f0       	mov    %al,0xf06c0ee4
			break;
f012f920:	eb 10                	jmp    f012f932 <schenv+0x67>

void schenv()
{
	__nl = 0;
	__ne = NULL;
	for (int i = 0; i < num_of_ready_queues; ++i)
f012f922:	ff 45 f4             	incl   -0xc(%ebp)
f012f925:	a0 bc 0e 6c f0       	mov    0xf06c0ebc,%al
f012f92a:	0f b6 c0             	movzbl %al,%eax
f012f92d:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012f930:	7f b9                	jg     f012f8eb <schenv+0x20>
			__ne = LIST_LAST(&(env_ready_queues[i]));
			__nl = i;
			break;
		}
	}
	if (curenv != NULL)
f012f932:	a1 14 82 65 f0       	mov    0xf0658214,%eax
f012f937:	85 c0                	test   %eax,%eax
f012f939:	0f 84 86 00 00 00    	je     f012f9c5 <schenv+0xfa>
	{
		if (__ne != NULL)
f012f93f:	a1 74 0e 6c f0       	mov    0xf06c0e74,%eax
f012f944:	85 c0                	test   %eax,%eax
f012f946:	74 4b                	je     f012f993 <schenv+0xc8>
		{
			if ((__pl + 1) < __nl)
f012f948:	a0 e8 8a 65 f0       	mov    0xf0658ae8,%al
f012f94d:	0f b6 c0             	movzbl %al,%eax
f012f950:	8d 50 01             	lea    0x1(%eax),%edx
f012f953:	a0 e4 0e 6c f0       	mov    0xf06c0ee4,%al
f012f958:	0f b6 c0             	movzbl %al,%eax
f012f95b:	39 c2                	cmp    %eax,%edx
f012f95d:	7d 66                	jge    f012f9c5 <schenv+0xfa>
			{
				__ne = curenv;
f012f95f:	a1 14 82 65 f0       	mov    0xf0658214,%eax
f012f964:	a3 74 0e 6c f0       	mov    %eax,0xf06c0e74
				__nl = __pl < num_of_ready_queues-1? __pl + 1 : __pl ;
f012f969:	a0 e8 8a 65 f0       	mov    0xf0658ae8,%al
f012f96e:	0f b6 c0             	movzbl %al,%eax
f012f971:	8a 15 bc 0e 6c f0    	mov    0xf06c0ebc,%dl
f012f977:	0f b6 d2             	movzbl %dl,%edx
f012f97a:	4a                   	dec    %edx
f012f97b:	39 d0                	cmp    %edx,%eax
f012f97d:	7d 08                	jge    f012f987 <schenv+0xbc>
f012f97f:	a0 e8 8a 65 f0       	mov    0xf0658ae8,%al
f012f984:	40                   	inc    %eax
f012f985:	eb 05                	jmp    f012f98c <schenv+0xc1>
f012f987:	a0 e8 8a 65 f0       	mov    0xf0658ae8,%al
f012f98c:	a2 e4 0e 6c f0       	mov    %al,0xf06c0ee4
		{
			__ne = curenv;
			__nl = __pl < num_of_ready_queues-1? __pl + 1 : __pl ;
		}
	}
}
f012f991:	eb 32                	jmp    f012f9c5 <schenv+0xfa>
				__nl = __pl < num_of_ready_queues-1? __pl + 1 : __pl ;
			}
		}
		else
		{
			__ne = curenv;
f012f993:	a1 14 82 65 f0       	mov    0xf0658214,%eax
f012f998:	a3 74 0e 6c f0       	mov    %eax,0xf06c0e74
			__nl = __pl < num_of_ready_queues-1? __pl + 1 : __pl ;
f012f99d:	a0 e8 8a 65 f0       	mov    0xf0658ae8,%al
f012f9a2:	0f b6 c0             	movzbl %al,%eax
f012f9a5:	8a 15 bc 0e 6c f0    	mov    0xf06c0ebc,%dl
f012f9ab:	0f b6 d2             	movzbl %dl,%edx
f012f9ae:	4a                   	dec    %edx
f012f9af:	39 d0                	cmp    %edx,%eax
f012f9b1:	7d 08                	jge    f012f9bb <schenv+0xf0>
f012f9b3:	a0 e8 8a 65 f0       	mov    0xf0658ae8,%al
f012f9b8:	40                   	inc    %eax
f012f9b9:	eb 05                	jmp    f012f9c0 <schenv+0xf5>
f012f9bb:	a0 e8 8a 65 f0       	mov    0xf0658ae8,%al
f012f9c0:	a2 e4 0e 6c f0       	mov    %al,0xf06c0ee4
		}
	}
}
f012f9c5:	90                   	nop
f012f9c6:	c9                   	leave  
f012f9c7:	c3                   	ret    

f012f9c8 <chksch>:

void chksch(uint8 onoff)
{
f012f9c8:	55                   	push   %ebp
f012f9c9:	89 e5                	mov    %esp,%ebp
f012f9cb:	83 ec 04             	sub    $0x4,%esp
f012f9ce:	8b 45 08             	mov    0x8(%ebp),%eax
f012f9d1:	88 45 fc             	mov    %al,-0x4(%ebp)
	__pe = NULL;
f012f9d4:	c7 05 d0 0e 6c f0 00 	movl   $0x0,0xf06c0ed0
f012f9db:	00 00 00 
	__ne = NULL;
f012f9de:	c7 05 74 0e 6c f0 00 	movl   $0x0,0xf06c0e74
f012f9e5:	00 00 00 
	__pl = 0 ;
f012f9e8:	c6 05 e8 8a 65 f0 00 	movb   $0x0,0xf0658ae8
	__nl = 0 ;
f012f9ef:	c6 05 e4 0e 6c f0 00 	movb   $0x0,0xf06c0ee4
	__chkstatus = onoff;
f012f9f6:	8a 45 fc             	mov    -0x4(%ebp),%al
f012f9f9:	a2 70 0e 6c f0       	mov    %al,0xf06c0e70
}
f012f9fe:	90                   	nop
f012f9ff:	c9                   	leave  
f012fa00:	c3                   	ret    

f012fa01 <chk1>:
void chk1()
{
f012fa01:	55                   	push   %ebp
f012fa02:	89 e5                	mov    %esp,%ebp
f012fa04:	83 ec 08             	sub    $0x8,%esp
	if (__chkstatus == 0)
f012fa07:	a0 70 0e 6c f0       	mov    0xf06c0e70,%al
f012fa0c:	84 c0                	test   %al,%al
f012fa0e:	74 2b                	je     f012fa3b <chk1+0x3a>
		return ;
	__pe = curenv;
f012fa10:	a1 14 82 65 f0       	mov    0xf0658214,%eax
f012fa15:	a3 d0 0e 6c f0       	mov    %eax,0xf06c0ed0
	__pl = __nl ;
f012fa1a:	a0 e4 0e 6c f0       	mov    0xf06c0ee4,%al
f012fa1f:	a2 e8 8a 65 f0       	mov    %al,0xf0658ae8
	if (__pe == NULL)
f012fa24:	a1 d0 0e 6c f0       	mov    0xf06c0ed0,%eax
f012fa29:	85 c0                	test   %eax,%eax
f012fa2b:	75 07                	jne    f012fa34 <chk1+0x33>
	{
		__pl = 0;
f012fa2d:	c6 05 e8 8a 65 f0 00 	movb   $0x0,0xf0658ae8
	}
	//cprintf("chk1: current = %s @ level %d\n", __pe == NULL? "NULL" : __pe->prog_name, __pl);
	schenv();
f012fa34:	e8 92 fe ff ff       	call   f012f8cb <schenv>
f012fa39:	eb 01                	jmp    f012fa3c <chk1+0x3b>
	__chkstatus = onoff;
}
void chk1()
{
	if (__chkstatus == 0)
		return ;
f012fa3b:	90                   	nop
	{
		__pl = 0;
	}
	//cprintf("chk1: current = %s @ level %d\n", __pe == NULL? "NULL" : __pe->prog_name, __pl);
	schenv();
}
f012fa3c:	c9                   	leave  
f012fa3d:	c3                   	ret    

f012fa3e <chk2>:
void chk2(struct Env* __se)
{
f012fa3e:	55                   	push   %ebp
f012fa3f:	89 e5                	mov    %esp,%ebp
f012fa41:	53                   	push   %ebx
f012fa42:	83 ec 14             	sub    $0x14,%esp
	if (__chkstatus == 0)
f012fa45:	a0 70 0e 6c f0       	mov    0xf06c0e70,%al
f012fa4a:	84 c0                	test   %al,%al
f012fa4c:	0f 84 35 02 00 00    	je     f012fc87 <chk2+0x249>
		return ;

	//cprintf("chk2: next = %s @ level %d\n", __ne == NULL? "NULL" : __ne->prog_name, __nl);

	assert_endall(__se == __ne);
f012fa52:	a1 74 0e 6c f0       	mov    0xf06c0e74,%eax
f012fa57:	39 45 08             	cmp    %eax,0x8(%ebp)
f012fa5a:	74 19                	je     f012fa75 <chk2+0x37>
f012fa5c:	68 55 c2 13 f0       	push   $0xf013c255
f012fa61:	68 62 c2 13 f0       	push   $0xf013c262
f012fa66:	68 c0 00 00 00       	push   $0xc0
f012fa6b:	68 77 c2 13 f0       	push   $0xf013c277
f012fa70:	e8 a0 07 fd ff       	call   f0100215 <_panic_all>
	//cprintf("%d - %d\n", kclock_read_cnt0_latch() , TIMER_DIV((1000/quantums[__nl])));

	if (__ne != NULL)
f012fa75:	a1 74 0e 6c f0       	mov    0xf06c0e74,%eax
f012fa7a:	85 c0                	test   %eax,%eax
f012fa7c:	0f 84 1b 01 00 00    	je     f012fb9d <chk2+0x15f>
	{
		uint16 upper = TIMER_DIV((1000/quantums[__nl])) ;
f012fa82:	a0 e4 0e 6c f0       	mov    0xf06c0ee4,%al
f012fa87:	0f b6 c0             	movzbl %al,%eax
f012fa8a:	8a 80 68 0e 6c f0    	mov    -0xf93f198(%eax),%al
f012fa90:	0f b6 d8             	movzbl %al,%ebx
f012fa93:	b8 f4 01 00 00       	mov    $0x1f4,%eax
f012fa98:	99                   	cltd   
f012fa99:	f7 fb                	idiv   %ebx
f012fa9b:	8d 88 de 34 12 00    	lea    0x1234de(%eax),%ecx
f012faa1:	a0 e4 0e 6c f0       	mov    0xf06c0ee4,%al
f012faa6:	0f b6 c0             	movzbl %al,%eax
f012faa9:	8a 80 68 0e 6c f0    	mov    -0xf93f198(%eax),%al
f012faaf:	0f b6 d8             	movzbl %al,%ebx
f012fab2:	b8 e8 03 00 00       	mov    $0x3e8,%eax
f012fab7:	99                   	cltd   
f012fab8:	f7 fb                	idiv   %ebx
f012faba:	89 c3                	mov    %eax,%ebx
f012fabc:	89 c8                	mov    %ecx,%eax
f012fabe:	99                   	cltd   
f012fabf:	f7 fb                	idiv   %ebx
f012fac1:	66 89 45 ee          	mov    %ax,-0x12(%ebp)
		upper = upper % 2 == 1? upper+1 : upper ;
f012fac5:	66 8b 45 ee          	mov    -0x12(%ebp),%ax
f012fac9:	83 e0 01             	and    $0x1,%eax
f012facc:	66 85 c0             	test   %ax,%ax
f012facf:	74 07                	je     f012fad8 <chk2+0x9a>
f012fad1:	66 8b 45 ee          	mov    -0x12(%ebp),%ax
f012fad5:	40                   	inc    %eax
f012fad6:	eb 04                	jmp    f012fadc <chk2+0x9e>
f012fad8:	66 8b 45 ee          	mov    -0x12(%ebp),%ax
f012fadc:	66 89 45 ee          	mov    %ax,-0x12(%ebp)
		uint16 lower = 90 * upper / 100 ;
f012fae0:	0f b7 55 ee          	movzwl -0x12(%ebp),%edx
f012fae4:	89 d0                	mov    %edx,%eax
f012fae6:	c1 e0 02             	shl    $0x2,%eax
f012fae9:	01 d0                	add    %edx,%eax
f012faeb:	01 c0                	add    %eax,%eax
f012faed:	01 d0                	add    %edx,%eax
f012faef:	c1 e0 02             	shl    $0x2,%eax
f012faf2:	01 d0                	add    %edx,%eax
f012faf4:	01 c0                	add    %eax,%eax
f012faf6:	89 c1                	mov    %eax,%ecx
f012faf8:	b8 1f 85 eb 51       	mov    $0x51eb851f,%eax
f012fafd:	f7 e9                	imul   %ecx
f012faff:	c1 fa 05             	sar    $0x5,%edx
f012fb02:	89 c8                	mov    %ecx,%eax
f012fb04:	c1 f8 1f             	sar    $0x1f,%eax
f012fb07:	29 c2                	sub    %eax,%edx
f012fb09:	89 d0                	mov    %edx,%eax
f012fb0b:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
		uint16 current = kclock_read_cnt0();
f012fb0f:	e8 5c 47 fd ff       	call   f0104270 <kclock_read_cnt0>
f012fb14:	66 89 45 ea          	mov    %ax,-0x16(%ebp)
		//cprintf("current = %d, lower = %d, upper = %d\n", current, lower, upper);
		assert_endall(current > lower && current <= upper) ;
f012fb18:	66 8b 45 ea          	mov    -0x16(%ebp),%ax
f012fb1c:	66 3b 45 ec          	cmp    -0x14(%ebp),%ax
f012fb20:	76 0a                	jbe    f012fb2c <chk2+0xee>
f012fb22:	66 8b 45 ea          	mov    -0x16(%ebp),%ax
f012fb26:	66 3b 45 ee          	cmp    -0x12(%ebp),%ax
f012fb2a:	76 19                	jbe    f012fb45 <chk2+0x107>
f012fb2c:	68 90 c2 13 f0       	push   $0xf013c290
f012fb31:	68 62 c2 13 f0       	push   $0xf013c262
f012fb36:	68 ca 00 00 00       	push   $0xca
f012fb3b:	68 77 c2 13 f0       	push   $0xf013c277
f012fb40:	e8 d0 06 fd ff       	call   f0100215 <_panic_all>

		for (int i = 0; i < num_of_ready_queues; ++i)
f012fb45:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012fb4c:	eb 42                	jmp    f012fb90 <chk2+0x152>
		{
			assert_endall(find_env_in_queue(&(env_ready_queues[i]), __ne->env_id) == NULL);
f012fb4e:	a1 74 0e 6c f0       	mov    0xf06c0e74,%eax
f012fb53:	8b 40 4c             	mov    0x4c(%eax),%eax
f012fb56:	89 c2                	mov    %eax,%edx
f012fb58:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012fb5b:	c1 e0 04             	shl    $0x4,%eax
f012fb5e:	05 f0 8a 65 f0       	add    $0xf0658af0,%eax
f012fb63:	83 ec 08             	sub    $0x8,%esp
f012fb66:	52                   	push   %edx
f012fb67:	50                   	push   %eax
f012fb68:	e8 04 4a fd ff       	call   f0104571 <find_env_in_queue>
f012fb6d:	83 c4 10             	add    $0x10,%esp
f012fb70:	85 c0                	test   %eax,%eax
f012fb72:	74 19                	je     f012fb8d <chk2+0x14f>
f012fb74:	68 b4 c2 13 f0       	push   $0xf013c2b4
f012fb79:	68 62 c2 13 f0       	push   $0xf013c262
f012fb7e:	68 ce 00 00 00       	push   $0xce
f012fb83:	68 77 c2 13 f0       	push   $0xf013c277
f012fb88:	e8 88 06 fd ff       	call   f0100215 <_panic_all>
		uint16 lower = 90 * upper / 100 ;
		uint16 current = kclock_read_cnt0();
		//cprintf("current = %d, lower = %d, upper = %d\n", current, lower, upper);
		assert_endall(current > lower && current <= upper) ;

		for (int i = 0; i < num_of_ready_queues; ++i)
f012fb8d:	ff 45 f4             	incl   -0xc(%ebp)
f012fb90:	a0 bc 0e 6c f0       	mov    0xf06c0ebc,%al
f012fb95:	0f b6 c0             	movzbl %al,%eax
f012fb98:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012fb9b:	7f b1                	jg     f012fb4e <chk2+0x110>
		{
			assert_endall(find_env_in_queue(&(env_ready_queues[i]), __ne->env_id) == NULL);
		}
	}
	if (__pe != NULL && __pe != __ne)
f012fb9d:	a1 d0 0e 6c f0       	mov    0xf06c0ed0,%eax
f012fba2:	85 c0                	test   %eax,%eax
f012fba4:	0f 84 de 00 00 00    	je     f012fc88 <chk2+0x24a>
f012fbaa:	8b 15 d0 0e 6c f0    	mov    0xf06c0ed0,%edx
f012fbb0:	a1 74 0e 6c f0       	mov    0xf06c0e74,%eax
f012fbb5:	39 c2                	cmp    %eax,%edx
f012fbb7:	0f 84 cb 00 00 00    	je     f012fc88 <chk2+0x24a>
	{
		uint8 __tl = __pl == num_of_ready_queues-1 ? __pl : __pl + 1 ;
f012fbbd:	a0 e8 8a 65 f0       	mov    0xf0658ae8,%al
f012fbc2:	0f b6 c0             	movzbl %al,%eax
f012fbc5:	8a 15 bc 0e 6c f0    	mov    0xf06c0ebc,%dl
f012fbcb:	0f b6 d2             	movzbl %dl,%edx
f012fbce:	4a                   	dec    %edx
f012fbcf:	39 d0                	cmp    %edx,%eax
f012fbd1:	74 08                	je     f012fbdb <chk2+0x19d>
f012fbd3:	a0 e8 8a 65 f0       	mov    0xf0658ae8,%al
f012fbd8:	40                   	inc    %eax
f012fbd9:	eb 05                	jmp    f012fbe0 <chk2+0x1a2>
f012fbdb:	a0 e8 8a 65 f0       	mov    0xf0658ae8,%al
f012fbe0:	88 45 e9             	mov    %al,-0x17(%ebp)
		assert_endall(find_env_in_queue(&(env_ready_queues[__tl]), __pe->env_id) != NULL);
f012fbe3:	a1 d0 0e 6c f0       	mov    0xf06c0ed0,%eax
f012fbe8:	8b 40 4c             	mov    0x4c(%eax),%eax
f012fbeb:	89 c2                	mov    %eax,%edx
f012fbed:	0f b6 45 e9          	movzbl -0x17(%ebp),%eax
f012fbf1:	c1 e0 04             	shl    $0x4,%eax
f012fbf4:	05 f0 8a 65 f0       	add    $0xf0658af0,%eax
f012fbf9:	83 ec 08             	sub    $0x8,%esp
f012fbfc:	52                   	push   %edx
f012fbfd:	50                   	push   %eax
f012fbfe:	e8 6e 49 fd ff       	call   f0104571 <find_env_in_queue>
f012fc03:	83 c4 10             	add    $0x10,%esp
f012fc06:	85 c0                	test   %eax,%eax
f012fc08:	75 19                	jne    f012fc23 <chk2+0x1e5>
f012fc0a:	68 f4 c2 13 f0       	push   $0xf013c2f4
f012fc0f:	68 62 c2 13 f0       	push   $0xf013c262
f012fc14:	68 d4 00 00 00       	push   $0xd4
f012fc19:	68 77 c2 13 f0       	push   $0xf013c277
f012fc1e:	e8 f2 05 fd ff       	call   f0100215 <_panic_all>
		for (int i = 0; i < num_of_ready_queues; ++i)
f012fc23:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f012fc2a:	eb 4c                	jmp    f012fc78 <chk2+0x23a>
		{
			if (i == __tl) continue;
f012fc2c:	0f b6 45 e9          	movzbl -0x17(%ebp),%eax
f012fc30:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f012fc33:	74 3f                	je     f012fc74 <chk2+0x236>
			assert_endall(find_env_in_queue(&(env_ready_queues[i]), __pe->env_id) == NULL) ;
f012fc35:	a1 d0 0e 6c f0       	mov    0xf06c0ed0,%eax
f012fc3a:	8b 40 4c             	mov    0x4c(%eax),%eax
f012fc3d:	89 c2                	mov    %eax,%edx
f012fc3f:	8b 45 f0             	mov    -0x10(%ebp),%eax
f012fc42:	c1 e0 04             	shl    $0x4,%eax
f012fc45:	05 f0 8a 65 f0       	add    $0xf0658af0,%eax
f012fc4a:	83 ec 08             	sub    $0x8,%esp
f012fc4d:	52                   	push   %edx
f012fc4e:	50                   	push   %eax
f012fc4f:	e8 1d 49 fd ff       	call   f0104571 <find_env_in_queue>
f012fc54:	83 c4 10             	add    $0x10,%esp
f012fc57:	85 c0                	test   %eax,%eax
f012fc59:	74 1a                	je     f012fc75 <chk2+0x237>
f012fc5b:	68 38 c3 13 f0       	push   $0xf013c338
f012fc60:	68 62 c2 13 f0       	push   $0xf013c262
f012fc65:	68 d8 00 00 00       	push   $0xd8
f012fc6a:	68 77 c2 13 f0       	push   $0xf013c277
f012fc6f:	e8 a1 05 fd ff       	call   f0100215 <_panic_all>
	{
		uint8 __tl = __pl == num_of_ready_queues-1 ? __pl : __pl + 1 ;
		assert_endall(find_env_in_queue(&(env_ready_queues[__tl]), __pe->env_id) != NULL);
		for (int i = 0; i < num_of_ready_queues; ++i)
		{
			if (i == __tl) continue;
f012fc74:	90                   	nop
	}
	if (__pe != NULL && __pe != __ne)
	{
		uint8 __tl = __pl == num_of_ready_queues-1 ? __pl : __pl + 1 ;
		assert_endall(find_env_in_queue(&(env_ready_queues[__tl]), __pe->env_id) != NULL);
		for (int i = 0; i < num_of_ready_queues; ++i)
f012fc75:	ff 45 f0             	incl   -0x10(%ebp)
f012fc78:	a0 bc 0e 6c f0       	mov    0xf06c0ebc,%al
f012fc7d:	0f b6 c0             	movzbl %al,%eax
f012fc80:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f012fc83:	7f a7                	jg     f012fc2c <chk2+0x1ee>
f012fc85:	eb 01                	jmp    f012fc88 <chk2+0x24a>
	schenv();
}
void chk2(struct Env* __se)
{
	if (__chkstatus == 0)
		return ;
f012fc87:	90                   	nop
		{
			if (i == __tl) continue;
			assert_endall(find_env_in_queue(&(env_ready_queues[i]), __pe->env_id) == NULL) ;
		}
	}
}
f012fc88:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f012fc8b:	c9                   	leave  
f012fc8c:	c3                   	ret    

f012fc8d <check_boot_pgdir>:
// but it is a pretty good check.
//
uint32 check_va2pa(uint32 *ptr_page_directory, uint32 va);

void check_boot_pgdir()
{
f012fc8d:	55                   	push   %ebp
f012fc8e:	89 e5                	mov    %esp,%ebp
f012fc90:	83 ec 18             	sub    $0x18,%esp
		for (i = 0; KERNEL_BASE + i < (uint32)ptr_free_mem; i += PAGE_SIZE)
			assert(check_va2pa(ptr_page_directory, KERNEL_BASE + i) == i);
	}
	#else
	{
		for (i = 0; KERNEL_BASE + i != 0; i += PAGE_SIZE)
f012fc93:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012fc9a:	eb 40                	jmp    f012fcdc <check_boot_pgdir+0x4f>
			assert(check_va2pa(ptr_page_directory, KERNEL_BASE + i) == i);
f012fc9c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012fc9f:	8d 90 00 00 00 f0    	lea    -0x10000000(%eax),%edx
f012fca5:	a1 b8 0e 6c f0       	mov    0xf06c0eb8,%eax
f012fcaa:	83 ec 08             	sub    $0x8,%esp
f012fcad:	52                   	push   %edx
f012fcae:	50                   	push   %eax
f012fcaf:	e8 92 01 00 00       	call   f012fe46 <check_va2pa>
f012fcb4:	83 c4 10             	add    $0x10,%esp
f012fcb7:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012fcba:	74 19                	je     f012fcd5 <check_boot_pgdir+0x48>
f012fcbc:	68 78 c3 13 f0       	push   $0xf013c378
f012fcc1:	68 62 c2 13 f0       	push   $0xf013c262
f012fcc6:	68 ff 00 00 00       	push   $0xff
f012fccb:	68 77 c2 13 f0       	push   $0xf013c277
f012fcd0:	e8 d1 04 fd ff       	call   f01001a6 <_panic>
		for (i = 0; KERNEL_BASE + i < (uint32)ptr_free_mem; i += PAGE_SIZE)
			assert(check_va2pa(ptr_page_directory, KERNEL_BASE + i) == i);
	}
	#else
	{
		for (i = 0; KERNEL_BASE + i != 0; i += PAGE_SIZE)
f012fcd5:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
f012fcdc:	81 7d f4 00 00 00 10 	cmpl   $0x10000000,-0xc(%ebp)
f012fce3:	75 b7                	jne    f012fc9c <check_boot_pgdir+0xf>
			assert(check_va2pa(ptr_page_directory, KERNEL_BASE + i) == i);
	}
	#endif
	// check kernel stack
	for (i = 0; i < KERNEL_STACK_SIZE; i += PAGE_SIZE)
f012fce5:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012fcec:	eb 74                	jmp    f012fd62 <check_boot_pgdir+0xd5>
		assert(check_va2pa(ptr_page_directory, KERNEL_STACK_TOP - KERNEL_STACK_SIZE + i) == STATIC_KERNEL_PHYSICAL_ADDRESS(ptr_stack_bottom) + i);
f012fcee:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012fcf1:	8d 90 00 80 bf ef    	lea    -0x10408000(%eax),%edx
f012fcf7:	a1 b8 0e 6c f0       	mov    0xf06c0eb8,%eax
f012fcfc:	83 ec 08             	sub    $0x8,%esp
f012fcff:	52                   	push   %edx
f012fd00:	50                   	push   %eax
f012fd01:	e8 40 01 00 00       	call   f012fe46 <check_va2pa>
f012fd06:	83 c4 10             	add    $0x10,%esp
f012fd09:	c7 45 f0 00 80 18 f0 	movl   $0xf0188000,-0x10(%ebp)
f012fd10:	81 7d f0 ff ff ff ef 	cmpl   $0xefffffff,-0x10(%ebp)
f012fd17:	77 17                	ja     f012fd30 <check_boot_pgdir+0xa3>
f012fd19:	ff 75 f0             	pushl  -0x10(%ebp)
f012fd1c:	68 b0 c3 13 f0       	push   $0xf013c3b0
f012fd21:	68 04 01 00 00       	push   $0x104
f012fd26:	68 77 c2 13 f0       	push   $0xf013c277
f012fd2b:	e8 76 04 fd ff       	call   f01001a6 <_panic>
f012fd30:	8b 55 f0             	mov    -0x10(%ebp),%edx
f012fd33:	8d 8a 00 00 00 10    	lea    0x10000000(%edx),%ecx
f012fd39:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012fd3c:	01 ca                	add    %ecx,%edx
f012fd3e:	39 d0                	cmp    %edx,%eax
f012fd40:	74 19                	je     f012fd5b <check_boot_pgdir+0xce>
f012fd42:	68 e4 c3 13 f0       	push   $0xf013c3e4
f012fd47:	68 62 c2 13 f0       	push   $0xf013c262
f012fd4c:	68 04 01 00 00       	push   $0x104
f012fd51:	68 77 c2 13 f0       	push   $0xf013c277
f012fd56:	e8 4b 04 fd ff       	call   f01001a6 <_panic>
		for (i = 0; KERNEL_BASE + i != 0; i += PAGE_SIZE)
			assert(check_va2pa(ptr_page_directory, KERNEL_BASE + i) == i);
	}
	#endif
	// check kernel stack
	for (i = 0; i < KERNEL_STACK_SIZE; i += PAGE_SIZE)
f012fd5b:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
f012fd62:	81 7d f4 ff 7f 00 00 	cmpl   $0x7fff,-0xc(%ebp)
f012fd69:	76 83                	jbe    f012fcee <check_boot_pgdir+0x61>
		assert(check_va2pa(ptr_page_directory, KERNEL_STACK_TOP - KERNEL_STACK_SIZE + i) == STATIC_KERNEL_PHYSICAL_ADDRESS(ptr_stack_bottom) + i);

	// check for zero/non-zero in PDEs
	for (i = 0; i < NPDENTRIES; i++) {
f012fd6b:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012fd72:	e9 af 00 00 00       	jmp    f012fe26 <check_boot_pgdir+0x199>
		switch (i) {
f012fd77:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012fd7a:	3d bb 03 00 00       	cmp    $0x3bb,%eax
f012fd7f:	74 11                	je     f012fd92 <check_boot_pgdir+0x105>
f012fd81:	3d bb 03 00 00       	cmp    $0x3bb,%eax
f012fd86:	72 36                	jb     f012fdbe <check_boot_pgdir+0x131>
f012fd88:	2d bd 03 00 00       	sub    $0x3bd,%eax
f012fd8d:	83 f8 02             	cmp    $0x2,%eax
f012fd90:	77 2c                	ja     f012fdbe <check_boot_pgdir+0x131>
		case PDX(UVPT):
		case PDX(KERNEL_STACK_TOP-1):
		case PDX(UENVS):
		//2016: READ_ONLY_FRAMES_INFO not valid any more since it can't fit in 4 MB space
		//case PDX(READ_ONLY_FRAMES_INFO):
		assert(ptr_page_directory[i]);
f012fd92:	a1 b8 0e 6c f0       	mov    0xf06c0eb8,%eax
f012fd97:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012fd9a:	c1 e2 02             	shl    $0x2,%edx
f012fd9d:	01 d0                	add    %edx,%eax
f012fd9f:	8b 00                	mov    (%eax),%eax
f012fda1:	85 c0                	test   %eax,%eax
f012fda3:	75 7a                	jne    f012fe1f <check_boot_pgdir+0x192>
f012fda5:	68 66 c4 13 f0       	push   $0xf013c466
f012fdaa:	68 62 c2 13 f0       	push   $0xf013c262
f012fdaf:	68 0f 01 00 00       	push   $0x10f
f012fdb4:	68 77 c2 13 f0       	push   $0xf013c277
f012fdb9:	e8 e8 03 fd ff       	call   f01001a6 <_panic>
		break;
		default:
			if (i >= PDX(KERNEL_BASE))
f012fdbe:	81 7d f4 bf 03 00 00 	cmpl   $0x3bf,-0xc(%ebp)
f012fdc5:	76 2c                	jbe    f012fdf3 <check_boot_pgdir+0x166>
				assert(ptr_page_directory[i]);
f012fdc7:	a1 b8 0e 6c f0       	mov    0xf06c0eb8,%eax
f012fdcc:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012fdcf:	c1 e2 02             	shl    $0x2,%edx
f012fdd2:	01 d0                	add    %edx,%eax
f012fdd4:	8b 00                	mov    (%eax),%eax
f012fdd6:	85 c0                	test   %eax,%eax
f012fdd8:	75 48                	jne    f012fe22 <check_boot_pgdir+0x195>
f012fdda:	68 66 c4 13 f0       	push   $0xf013c466
f012fddf:	68 62 c2 13 f0       	push   $0xf013c262
f012fde4:	68 13 01 00 00       	push   $0x113
f012fde9:	68 77 c2 13 f0       	push   $0xf013c277
f012fdee:	e8 b3 03 fd ff       	call   f01001a6 <_panic>
			else
				assert(ptr_page_directory[i] == 0);
f012fdf3:	a1 b8 0e 6c f0       	mov    0xf06c0eb8,%eax
f012fdf8:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012fdfb:	c1 e2 02             	shl    $0x2,%edx
f012fdfe:	01 d0                	add    %edx,%eax
f012fe00:	8b 00                	mov    (%eax),%eax
f012fe02:	85 c0                	test   %eax,%eax
f012fe04:	74 1c                	je     f012fe22 <check_boot_pgdir+0x195>
f012fe06:	68 7c c4 13 f0       	push   $0xf013c47c
f012fe0b:	68 62 c2 13 f0       	push   $0xf013c262
f012fe10:	68 15 01 00 00       	push   $0x115
f012fe15:	68 77 c2 13 f0       	push   $0xf013c277
f012fe1a:	e8 87 03 fd ff       	call   f01001a6 <_panic>
		case PDX(KERNEL_STACK_TOP-1):
		case PDX(UENVS):
		//2016: READ_ONLY_FRAMES_INFO not valid any more since it can't fit in 4 MB space
		//case PDX(READ_ONLY_FRAMES_INFO):
		assert(ptr_page_directory[i]);
		break;
f012fe1f:	90                   	nop
f012fe20:	eb 01                	jmp    f012fe23 <check_boot_pgdir+0x196>
		default:
			if (i >= PDX(KERNEL_BASE))
				assert(ptr_page_directory[i]);
			else
				assert(ptr_page_directory[i] == 0);
			break;
f012fe22:	90                   	nop
	// check kernel stack
	for (i = 0; i < KERNEL_STACK_SIZE; i += PAGE_SIZE)
		assert(check_va2pa(ptr_page_directory, KERNEL_STACK_TOP - KERNEL_STACK_SIZE + i) == STATIC_KERNEL_PHYSICAL_ADDRESS(ptr_stack_bottom) + i);

	// check for zero/non-zero in PDEs
	for (i = 0; i < NPDENTRIES; i++) {
f012fe23:	ff 45 f4             	incl   -0xc(%ebp)
f012fe26:	81 7d f4 ff 03 00 00 	cmpl   $0x3ff,-0xc(%ebp)
f012fe2d:	0f 86 44 ff ff ff    	jbe    f012fd77 <check_boot_pgdir+0xea>
			else
				assert(ptr_page_directory[i] == 0);
			break;
		}
	}
	cprintf("check_boot_pgdir() succeeded!\n");
f012fe33:	83 ec 0c             	sub    $0xc,%esp
f012fe36:	68 98 c4 13 f0       	push   $0xf013c498
f012fe3b:	e8 ed 0d fd ff       	call   f0100c2d <cprintf>
f012fe40:	83 c4 10             	add    $0x10,%esp
}
f012fe43:	90                   	nop
f012fe44:	c9                   	leave  
f012fe45:	c3                   	ret    

f012fe46 <check_va2pa>:
// defined by the page directory 'ptr_page_directory'.  The hardware normally performs
// this functionality for us!  We define our own version to help check
// the check_boot_pgdir() function; it shouldn't be used elsewhere.

uint32 check_va2pa(uint32 *ptr_page_directory, uint32 va)
{
f012fe46:	55                   	push   %ebp
f012fe47:	89 e5                	mov    %esp,%ebp
f012fe49:	83 ec 18             	sub    $0x18,%esp
	uint32 *p;

	uint32* dirEntry = &(ptr_page_directory[PDX(va)]);
f012fe4c:	8b 45 0c             	mov    0xc(%ebp),%eax
f012fe4f:	c1 e8 16             	shr    $0x16,%eax
f012fe52:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f012fe59:	8b 45 08             	mov    0x8(%ebp),%eax
f012fe5c:	01 d0                	add    %edx,%eax
f012fe5e:	89 45 f4             	mov    %eax,-0xc(%ebp)

	//LOG_VARS("dir table entry %x", *dirEntry);

	if (!(*dirEntry & PERM_PRESENT))
f012fe61:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012fe64:	8b 00                	mov    (%eax),%eax
f012fe66:	83 e0 01             	and    $0x1,%eax
f012fe69:	85 c0                	test   %eax,%eax
f012fe6b:	75 0a                	jne    f012fe77 <check_va2pa+0x31>
		return ~0;
f012fe6d:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
f012fe72:	e9 87 00 00 00       	jmp    f012fefe <check_va2pa+0xb8>
	p = (uint32*) STATIC_KERNEL_VIRTUAL_ADDRESS(EXTRACT_ADDRESS(*dirEntry));
f012fe77:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012fe7a:	8b 00                	mov    (%eax),%eax
f012fe7c:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f012fe81:	89 45 f0             	mov    %eax,-0x10(%ebp)
f012fe84:	8b 45 f0             	mov    -0x10(%ebp),%eax
f012fe87:	c1 e8 0c             	shr    $0xc,%eax
f012fe8a:	89 45 ec             	mov    %eax,-0x14(%ebp)
f012fe8d:	a1 50 0e 6c f0       	mov    0xf06c0e50,%eax
f012fe92:	39 45 ec             	cmp    %eax,-0x14(%ebp)
f012fe95:	72 17                	jb     f012feae <check_va2pa+0x68>
f012fe97:	ff 75 f0             	pushl  -0x10(%ebp)
f012fe9a:	68 b8 c4 13 f0       	push   $0xf013c4b8
f012fe9f:	68 2b 01 00 00       	push   $0x12b
f012fea4:	68 77 c2 13 f0       	push   $0xf013c277
f012fea9:	e8 f8 02 fd ff       	call   f01001a6 <_panic>
f012feae:	8b 45 f0             	mov    -0x10(%ebp),%eax
f012feb1:	2d 00 00 00 10       	sub    $0x10000000,%eax
f012feb6:	89 45 e8             	mov    %eax,-0x18(%ebp)

	//LOG_VARS("ptr to page table  = %x", p);

	if (!(p[PTX(va)] & PERM_PRESENT))
f012feb9:	8b 45 0c             	mov    0xc(%ebp),%eax
f012febc:	c1 e8 0c             	shr    $0xc,%eax
f012febf:	25 ff 03 00 00       	and    $0x3ff,%eax
f012fec4:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f012fecb:	8b 45 e8             	mov    -0x18(%ebp),%eax
f012fece:	01 d0                	add    %edx,%eax
f012fed0:	8b 00                	mov    (%eax),%eax
f012fed2:	83 e0 01             	and    $0x1,%eax
f012fed5:	85 c0                	test   %eax,%eax
f012fed7:	75 07                	jne    f012fee0 <check_va2pa+0x9a>
		return ~0;
f012fed9:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
f012fede:	eb 1e                	jmp    f012fefe <check_va2pa+0xb8>

	//LOG_VARS("page phys addres = %x",EXTRACT_ADDRESS(p[PTX(va)]));
	return EXTRACT_ADDRESS(p[PTX(va)]);
f012fee0:	8b 45 0c             	mov    0xc(%ebp),%eax
f012fee3:	c1 e8 0c             	shr    $0xc,%eax
f012fee6:	25 ff 03 00 00       	and    $0x3ff,%eax
f012feeb:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f012fef2:	8b 45 e8             	mov    -0x18(%ebp),%eax
f012fef5:	01 d0                	add    %edx,%eax
f012fef7:	8b 00                	mov    (%eax),%eax
f012fef9:	25 00 f0 ff ff       	and    $0xfffff000,%eax
}
f012fefe:	c9                   	leave  
f012feff:	c3                   	ret    

f012ff00 <printnum>:
 * using specified putch function and associated pointer putdat.
 */
static void
printnum(void (*putch)(int, void*), void *putdat,
	 unsigned long long num, unsigned base, int width, int padc)
{
f012ff00:	55                   	push   %ebp
f012ff01:	89 e5                	mov    %esp,%ebp
f012ff03:	53                   	push   %ebx
f012ff04:	83 ec 14             	sub    $0x14,%esp
f012ff07:	8b 45 10             	mov    0x10(%ebp),%eax
f012ff0a:	89 45 f0             	mov    %eax,-0x10(%ebp)
f012ff0d:	8b 45 14             	mov    0x14(%ebp),%eax
f012ff10:	89 45 f4             	mov    %eax,-0xc(%ebp)
	// first recursively print all preceding (more significant) digits
	if (num >= base) {
f012ff13:	8b 45 18             	mov    0x18(%ebp),%eax
f012ff16:	ba 00 00 00 00       	mov    $0x0,%edx
f012ff1b:	3b 55 f4             	cmp    -0xc(%ebp),%edx
f012ff1e:	77 55                	ja     f012ff75 <printnum+0x75>
f012ff20:	3b 55 f4             	cmp    -0xc(%ebp),%edx
f012ff23:	72 05                	jb     f012ff2a <printnum+0x2a>
f012ff25:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f012ff28:	77 4b                	ja     f012ff75 <printnum+0x75>
		printnum(putch, putdat, num / base, base, width - 1, padc);
f012ff2a:	8b 45 1c             	mov    0x1c(%ebp),%eax
f012ff2d:	8d 58 ff             	lea    -0x1(%eax),%ebx
f012ff30:	8b 45 18             	mov    0x18(%ebp),%eax
f012ff33:	ba 00 00 00 00       	mov    $0x0,%edx
f012ff38:	52                   	push   %edx
f012ff39:	50                   	push   %eax
f012ff3a:	ff 75 f4             	pushl  -0xc(%ebp)
f012ff3d:	ff 75 f0             	pushl  -0x10(%ebp)
f012ff40:	e8 0b 28 00 00       	call   f0132750 <__udivdi3>
f012ff45:	83 c4 10             	add    $0x10,%esp
f012ff48:	83 ec 04             	sub    $0x4,%esp
f012ff4b:	ff 75 20             	pushl  0x20(%ebp)
f012ff4e:	53                   	push   %ebx
f012ff4f:	ff 75 18             	pushl  0x18(%ebp)
f012ff52:	52                   	push   %edx
f012ff53:	50                   	push   %eax
f012ff54:	ff 75 0c             	pushl  0xc(%ebp)
f012ff57:	ff 75 08             	pushl  0x8(%ebp)
f012ff5a:	e8 a1 ff ff ff       	call   f012ff00 <printnum>
f012ff5f:	83 c4 20             	add    $0x20,%esp
f012ff62:	eb 1a                	jmp    f012ff7e <printnum+0x7e>
	} else {
		// print any needed pad characters before first digit
		while (--width > 0)
			putch(padc, putdat);
f012ff64:	83 ec 08             	sub    $0x8,%esp
f012ff67:	ff 75 0c             	pushl  0xc(%ebp)
f012ff6a:	ff 75 20             	pushl  0x20(%ebp)
f012ff6d:	8b 45 08             	mov    0x8(%ebp),%eax
f012ff70:	ff d0                	call   *%eax
f012ff72:	83 c4 10             	add    $0x10,%esp
	// first recursively print all preceding (more significant) digits
	if (num >= base) {
		printnum(putch, putdat, num / base, base, width - 1, padc);
	} else {
		// print any needed pad characters before first digit
		while (--width > 0)
f012ff75:	ff 4d 1c             	decl   0x1c(%ebp)
f012ff78:	83 7d 1c 00          	cmpl   $0x0,0x1c(%ebp)
f012ff7c:	7f e6                	jg     f012ff64 <printnum+0x64>
			putch(padc, putdat);
	}

	// then print this (the least significant) digit
	putch("0123456789abcdef"[num % base], putdat);
f012ff7e:	8b 4d 18             	mov    0x18(%ebp),%ecx
f012ff81:	bb 00 00 00 00       	mov    $0x0,%ebx
f012ff86:	8b 45 f0             	mov    -0x10(%ebp),%eax
f012ff89:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012ff8c:	53                   	push   %ebx
f012ff8d:	51                   	push   %ecx
f012ff8e:	52                   	push   %edx
f012ff8f:	50                   	push   %eax
f012ff90:	e8 cb 28 00 00       	call   f0132860 <__umoddi3>
f012ff95:	83 c4 10             	add    $0x10,%esp
f012ff98:	05 14 c7 13 f0       	add    $0xf013c714,%eax
f012ff9d:	8a 00                	mov    (%eax),%al
f012ff9f:	0f be c0             	movsbl %al,%eax
f012ffa2:	83 ec 08             	sub    $0x8,%esp
f012ffa5:	ff 75 0c             	pushl  0xc(%ebp)
f012ffa8:	50                   	push   %eax
f012ffa9:	8b 45 08             	mov    0x8(%ebp),%eax
f012ffac:	ff d0                	call   *%eax
f012ffae:	83 c4 10             	add    $0x10,%esp
}
f012ffb1:	90                   	nop
f012ffb2:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f012ffb5:	c9                   	leave  
f012ffb6:	c3                   	ret    

f012ffb7 <getuint>:

// Get an unsigned int of various possible sizes from a varargs list,
// depending on the lflag parameter.
static unsigned long long
getuint(va_list *ap, int lflag)
{
f012ffb7:	55                   	push   %ebp
f012ffb8:	89 e5                	mov    %esp,%ebp
	if (lflag >= 2)
f012ffba:	83 7d 0c 01          	cmpl   $0x1,0xc(%ebp)
f012ffbe:	7e 1c                	jle    f012ffdc <getuint+0x25>
		return va_arg(*ap, unsigned long long);
f012ffc0:	8b 45 08             	mov    0x8(%ebp),%eax
f012ffc3:	8b 00                	mov    (%eax),%eax
f012ffc5:	8d 50 08             	lea    0x8(%eax),%edx
f012ffc8:	8b 45 08             	mov    0x8(%ebp),%eax
f012ffcb:	89 10                	mov    %edx,(%eax)
f012ffcd:	8b 45 08             	mov    0x8(%ebp),%eax
f012ffd0:	8b 00                	mov    (%eax),%eax
f012ffd2:	83 e8 08             	sub    $0x8,%eax
f012ffd5:	8b 50 04             	mov    0x4(%eax),%edx
f012ffd8:	8b 00                	mov    (%eax),%eax
f012ffda:	eb 40                	jmp    f013001c <getuint+0x65>
	else if (lflag)
f012ffdc:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
f012ffe0:	74 1e                	je     f0130000 <getuint+0x49>
		return va_arg(*ap, unsigned long);
f012ffe2:	8b 45 08             	mov    0x8(%ebp),%eax
f012ffe5:	8b 00                	mov    (%eax),%eax
f012ffe7:	8d 50 04             	lea    0x4(%eax),%edx
f012ffea:	8b 45 08             	mov    0x8(%ebp),%eax
f012ffed:	89 10                	mov    %edx,(%eax)
f012ffef:	8b 45 08             	mov    0x8(%ebp),%eax
f012fff2:	8b 00                	mov    (%eax),%eax
f012fff4:	83 e8 04             	sub    $0x4,%eax
f012fff7:	8b 00                	mov    (%eax),%eax
f012fff9:	ba 00 00 00 00       	mov    $0x0,%edx
f012fffe:	eb 1c                	jmp    f013001c <getuint+0x65>
	else
		return va_arg(*ap, unsigned int);
f0130000:	8b 45 08             	mov    0x8(%ebp),%eax
f0130003:	8b 00                	mov    (%eax),%eax
f0130005:	8d 50 04             	lea    0x4(%eax),%edx
f0130008:	8b 45 08             	mov    0x8(%ebp),%eax
f013000b:	89 10                	mov    %edx,(%eax)
f013000d:	8b 45 08             	mov    0x8(%ebp),%eax
f0130010:	8b 00                	mov    (%eax),%eax
f0130012:	83 e8 04             	sub    $0x4,%eax
f0130015:	8b 00                	mov    (%eax),%eax
f0130017:	ba 00 00 00 00       	mov    $0x0,%edx
}
f013001c:	5d                   	pop    %ebp
f013001d:	c3                   	ret    

f013001e <getint>:

// Same as getuint but signed - can't use getuint
// because of sign extension
static long long
getint(va_list *ap, int lflag)
{
f013001e:	55                   	push   %ebp
f013001f:	89 e5                	mov    %esp,%ebp
	if (lflag >= 2)
f0130021:	83 7d 0c 01          	cmpl   $0x1,0xc(%ebp)
f0130025:	7e 1c                	jle    f0130043 <getint+0x25>
		return va_arg(*ap, long long);
f0130027:	8b 45 08             	mov    0x8(%ebp),%eax
f013002a:	8b 00                	mov    (%eax),%eax
f013002c:	8d 50 08             	lea    0x8(%eax),%edx
f013002f:	8b 45 08             	mov    0x8(%ebp),%eax
f0130032:	89 10                	mov    %edx,(%eax)
f0130034:	8b 45 08             	mov    0x8(%ebp),%eax
f0130037:	8b 00                	mov    (%eax),%eax
f0130039:	83 e8 08             	sub    $0x8,%eax
f013003c:	8b 50 04             	mov    0x4(%eax),%edx
f013003f:	8b 00                	mov    (%eax),%eax
f0130041:	eb 38                	jmp    f013007b <getint+0x5d>
	else if (lflag)
f0130043:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
f0130047:	74 1a                	je     f0130063 <getint+0x45>
		return va_arg(*ap, long);
f0130049:	8b 45 08             	mov    0x8(%ebp),%eax
f013004c:	8b 00                	mov    (%eax),%eax
f013004e:	8d 50 04             	lea    0x4(%eax),%edx
f0130051:	8b 45 08             	mov    0x8(%ebp),%eax
f0130054:	89 10                	mov    %edx,(%eax)
f0130056:	8b 45 08             	mov    0x8(%ebp),%eax
f0130059:	8b 00                	mov    (%eax),%eax
f013005b:	83 e8 04             	sub    $0x4,%eax
f013005e:	8b 00                	mov    (%eax),%eax
f0130060:	99                   	cltd   
f0130061:	eb 18                	jmp    f013007b <getint+0x5d>
	else
		return va_arg(*ap, int);
f0130063:	8b 45 08             	mov    0x8(%ebp),%eax
f0130066:	8b 00                	mov    (%eax),%eax
f0130068:	8d 50 04             	lea    0x4(%eax),%edx
f013006b:	8b 45 08             	mov    0x8(%ebp),%eax
f013006e:	89 10                	mov    %edx,(%eax)
f0130070:	8b 45 08             	mov    0x8(%ebp),%eax
f0130073:	8b 00                	mov    (%eax),%eax
f0130075:	83 e8 04             	sub    $0x4,%eax
f0130078:	8b 00                	mov    (%eax),%eax
f013007a:	99                   	cltd   
}
f013007b:	5d                   	pop    %ebp
f013007c:	c3                   	ret    

f013007d <vprintfmt>:
// Main function to format and print a string.
void printfmt(void (*putch)(int, void*), void *putdat, const char *fmt, ...);

void
vprintfmt(void (*putch)(int, void*), void *putdat, const char *fmt, va_list ap)
{
f013007d:	55                   	push   %ebp
f013007e:	89 e5                	mov    %esp,%ebp
f0130080:	56                   	push   %esi
f0130081:	53                   	push   %ebx
f0130082:	83 ec 20             	sub    $0x20,%esp
	unsigned long long num;
	int base, lflag, width, precision, altflag;
	char padc;

	while (1) {
		while ((ch = *(unsigned char *) fmt++) != '%') {
f0130085:	eb 17                	jmp    f013009e <vprintfmt+0x21>
			if (ch == '\0')
f0130087:	85 db                	test   %ebx,%ebx
f0130089:	0f 84 af 03 00 00    	je     f013043e <vprintfmt+0x3c1>
				return;
			putch(ch, putdat);
f013008f:	83 ec 08             	sub    $0x8,%esp
f0130092:	ff 75 0c             	pushl  0xc(%ebp)
f0130095:	53                   	push   %ebx
f0130096:	8b 45 08             	mov    0x8(%ebp),%eax
f0130099:	ff d0                	call   *%eax
f013009b:	83 c4 10             	add    $0x10,%esp
	unsigned long long num;
	int base, lflag, width, precision, altflag;
	char padc;

	while (1) {
		while ((ch = *(unsigned char *) fmt++) != '%') {
f013009e:	8b 45 10             	mov    0x10(%ebp),%eax
f01300a1:	8d 50 01             	lea    0x1(%eax),%edx
f01300a4:	89 55 10             	mov    %edx,0x10(%ebp)
f01300a7:	8a 00                	mov    (%eax),%al
f01300a9:	0f b6 d8             	movzbl %al,%ebx
f01300ac:	83 fb 25             	cmp    $0x25,%ebx
f01300af:	75 d6                	jne    f0130087 <vprintfmt+0xa>
				return;
			putch(ch, putdat);
		}

		// Process a %-escape sequence
		padc = ' ';
f01300b1:	c6 45 db 20          	movb   $0x20,-0x25(%ebp)
		width = -1;
f01300b5:	c7 45 e4 ff ff ff ff 	movl   $0xffffffff,-0x1c(%ebp)
		precision = -1;
f01300bc:	c7 45 e0 ff ff ff ff 	movl   $0xffffffff,-0x20(%ebp)
		lflag = 0;
f01300c3:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
		altflag = 0;
f01300ca:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
	reswitch:
		switch (ch = *(unsigned char *) fmt++) {
f01300d1:	8b 45 10             	mov    0x10(%ebp),%eax
f01300d4:	8d 50 01             	lea    0x1(%eax),%edx
f01300d7:	89 55 10             	mov    %edx,0x10(%ebp)
f01300da:	8a 00                	mov    (%eax),%al
f01300dc:	0f b6 d8             	movzbl %al,%ebx
f01300df:	8d 43 dd             	lea    -0x23(%ebx),%eax
f01300e2:	83 f8 55             	cmp    $0x55,%eax
f01300e5:	0f 87 2b 03 00 00    	ja     f0130416 <vprintfmt+0x399>
f01300eb:	8b 04 85 38 c7 13 f0 	mov    -0xfec38c8(,%eax,4),%eax
f01300f2:	ff e0                	jmp    *%eax

		// flag to pad on the right
		case '-':
			padc = '-';
f01300f4:	c6 45 db 2d          	movb   $0x2d,-0x25(%ebp)
			goto reswitch;
f01300f8:	eb d7                	jmp    f01300d1 <vprintfmt+0x54>

		// flag to pad with 0's instead of spaces
		case '0':
			padc = '0';
f01300fa:	c6 45 db 30          	movb   $0x30,-0x25(%ebp)
			goto reswitch;
f01300fe:	eb d1                	jmp    f01300d1 <vprintfmt+0x54>
		case '5':
		case '6':
		case '7':
		case '8':
		case '9':
			for (precision = 0; ; ++fmt) {
f0130100:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
				precision = precision * 10 + ch - '0';
f0130107:	8b 55 e0             	mov    -0x20(%ebp),%edx
f013010a:	89 d0                	mov    %edx,%eax
f013010c:	c1 e0 02             	shl    $0x2,%eax
f013010f:	01 d0                	add    %edx,%eax
f0130111:	01 c0                	add    %eax,%eax
f0130113:	01 d8                	add    %ebx,%eax
f0130115:	83 e8 30             	sub    $0x30,%eax
f0130118:	89 45 e0             	mov    %eax,-0x20(%ebp)
				ch = *fmt;
f013011b:	8b 45 10             	mov    0x10(%ebp),%eax
f013011e:	8a 00                	mov    (%eax),%al
f0130120:	0f be d8             	movsbl %al,%ebx
				if (ch < '0' || ch > '9')
f0130123:	83 fb 2f             	cmp    $0x2f,%ebx
f0130126:	7e 3e                	jle    f0130166 <vprintfmt+0xe9>
f0130128:	83 fb 39             	cmp    $0x39,%ebx
f013012b:	7f 39                	jg     f0130166 <vprintfmt+0xe9>
		case '5':
		case '6':
		case '7':
		case '8':
		case '9':
			for (precision = 0; ; ++fmt) {
f013012d:	ff 45 10             	incl   0x10(%ebp)
				precision = precision * 10 + ch - '0';
				ch = *fmt;
				if (ch < '0' || ch > '9')
					break;
			}
f0130130:	eb d5                	jmp    f0130107 <vprintfmt+0x8a>
			goto process_precision;

		case '*':
			precision = va_arg(ap, int);
f0130132:	8b 45 14             	mov    0x14(%ebp),%eax
f0130135:	83 c0 04             	add    $0x4,%eax
f0130138:	89 45 14             	mov    %eax,0x14(%ebp)
f013013b:	8b 45 14             	mov    0x14(%ebp),%eax
f013013e:	83 e8 04             	sub    $0x4,%eax
f0130141:	8b 00                	mov    (%eax),%eax
f0130143:	89 45 e0             	mov    %eax,-0x20(%ebp)
			goto process_precision;
f0130146:	eb 1f                	jmp    f0130167 <vprintfmt+0xea>

		case '.':
			if (width < 0)
f0130148:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f013014c:	79 83                	jns    f01300d1 <vprintfmt+0x54>
				width = 0;
f013014e:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
			goto reswitch;
f0130155:	e9 77 ff ff ff       	jmp    f01300d1 <vprintfmt+0x54>

		case '#':
			altflag = 1;
f013015a:	c7 45 dc 01 00 00 00 	movl   $0x1,-0x24(%ebp)
			goto reswitch;
f0130161:	e9 6b ff ff ff       	jmp    f01300d1 <vprintfmt+0x54>
				precision = precision * 10 + ch - '0';
				ch = *fmt;
				if (ch < '0' || ch > '9')
					break;
			}
			goto process_precision;
f0130166:	90                   	nop
		case '#':
			altflag = 1;
			goto reswitch;

		process_precision:
			if (width < 0)
f0130167:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f013016b:	0f 89 60 ff ff ff    	jns    f01300d1 <vprintfmt+0x54>
				width = precision, precision = -1;
f0130171:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0130174:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f0130177:	c7 45 e0 ff ff ff ff 	movl   $0xffffffff,-0x20(%ebp)
			goto reswitch;
f013017e:	e9 4e ff ff ff       	jmp    f01300d1 <vprintfmt+0x54>

		// long flag (doubled for long long)
		case 'l':
			lflag++;
f0130183:	ff 45 e8             	incl   -0x18(%ebp)
			goto reswitch;
f0130186:	e9 46 ff ff ff       	jmp    f01300d1 <vprintfmt+0x54>

		// character
		case 'c':
			putch(va_arg(ap, int), putdat);
f013018b:	8b 45 14             	mov    0x14(%ebp),%eax
f013018e:	83 c0 04             	add    $0x4,%eax
f0130191:	89 45 14             	mov    %eax,0x14(%ebp)
f0130194:	8b 45 14             	mov    0x14(%ebp),%eax
f0130197:	83 e8 04             	sub    $0x4,%eax
f013019a:	8b 00                	mov    (%eax),%eax
f013019c:	83 ec 08             	sub    $0x8,%esp
f013019f:	ff 75 0c             	pushl  0xc(%ebp)
f01301a2:	50                   	push   %eax
f01301a3:	8b 45 08             	mov    0x8(%ebp),%eax
f01301a6:	ff d0                	call   *%eax
f01301a8:	83 c4 10             	add    $0x10,%esp
			break;
f01301ab:	e9 89 02 00 00       	jmp    f0130439 <vprintfmt+0x3bc>

		// error message
		case 'e':
			err = va_arg(ap, int);
f01301b0:	8b 45 14             	mov    0x14(%ebp),%eax
f01301b3:	83 c0 04             	add    $0x4,%eax
f01301b6:	89 45 14             	mov    %eax,0x14(%ebp)
f01301b9:	8b 45 14             	mov    0x14(%ebp),%eax
f01301bc:	83 e8 04             	sub    $0x4,%eax
f01301bf:	8b 18                	mov    (%eax),%ebx
			if (err < 0)
f01301c1:	85 db                	test   %ebx,%ebx
f01301c3:	79 02                	jns    f01301c7 <vprintfmt+0x14a>
				err = -err;
f01301c5:	f7 db                	neg    %ebx
			if (err > MAXERROR || (p = error_string[err]) == NULL)
f01301c7:	83 fb 64             	cmp    $0x64,%ebx
f01301ca:	7f 0b                	jg     f01301d7 <vprintfmt+0x15a>
f01301cc:	8b 34 9d 80 c5 13 f0 	mov    -0xfec3a80(,%ebx,4),%esi
f01301d3:	85 f6                	test   %esi,%esi
f01301d5:	75 19                	jne    f01301f0 <vprintfmt+0x173>
				printfmt(putch, putdat, "error %d", err);
f01301d7:	53                   	push   %ebx
f01301d8:	68 25 c7 13 f0       	push   $0xf013c725
f01301dd:	ff 75 0c             	pushl  0xc(%ebp)
f01301e0:	ff 75 08             	pushl  0x8(%ebp)
f01301e3:	e8 5e 02 00 00       	call   f0130446 <printfmt>
f01301e8:	83 c4 10             	add    $0x10,%esp
			else
				printfmt(putch, putdat, "%s", p);
			break;
f01301eb:	e9 49 02 00 00       	jmp    f0130439 <vprintfmt+0x3bc>
			if (err < 0)
				err = -err;
			if (err > MAXERROR || (p = error_string[err]) == NULL)
				printfmt(putch, putdat, "error %d", err);
			else
				printfmt(putch, putdat, "%s", p);
f01301f0:	56                   	push   %esi
f01301f1:	68 2e c7 13 f0       	push   $0xf013c72e
f01301f6:	ff 75 0c             	pushl  0xc(%ebp)
f01301f9:	ff 75 08             	pushl  0x8(%ebp)
f01301fc:	e8 45 02 00 00       	call   f0130446 <printfmt>
f0130201:	83 c4 10             	add    $0x10,%esp
			break;
f0130204:	e9 30 02 00 00       	jmp    f0130439 <vprintfmt+0x3bc>

		// string
		case 's':
			if ((p = va_arg(ap, char *)) == NULL)
f0130209:	8b 45 14             	mov    0x14(%ebp),%eax
f013020c:	83 c0 04             	add    $0x4,%eax
f013020f:	89 45 14             	mov    %eax,0x14(%ebp)
f0130212:	8b 45 14             	mov    0x14(%ebp),%eax
f0130215:	83 e8 04             	sub    $0x4,%eax
f0130218:	8b 30                	mov    (%eax),%esi
f013021a:	85 f6                	test   %esi,%esi
f013021c:	75 05                	jne    f0130223 <vprintfmt+0x1a6>
				p = "(null)";
f013021e:	be 31 c7 13 f0       	mov    $0xf013c731,%esi
			if (width > 0 && padc != '-')
f0130223:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f0130227:	7e 6d                	jle    f0130296 <vprintfmt+0x219>
f0130229:	80 7d db 2d          	cmpb   $0x2d,-0x25(%ebp)
f013022d:	74 67                	je     f0130296 <vprintfmt+0x219>
				for (width -= strnlen(p, precision); width > 0; width--)
f013022f:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0130232:	83 ec 08             	sub    $0x8,%esp
f0130235:	50                   	push   %eax
f0130236:	56                   	push   %esi
f0130237:	e8 12 05 00 00       	call   f013074e <strnlen>
f013023c:	83 c4 10             	add    $0x10,%esp
f013023f:	29 45 e4             	sub    %eax,-0x1c(%ebp)
f0130242:	eb 16                	jmp    f013025a <vprintfmt+0x1dd>
					putch(padc, putdat);
f0130244:	0f be 45 db          	movsbl -0x25(%ebp),%eax
f0130248:	83 ec 08             	sub    $0x8,%esp
f013024b:	ff 75 0c             	pushl  0xc(%ebp)
f013024e:	50                   	push   %eax
f013024f:	8b 45 08             	mov    0x8(%ebp),%eax
f0130252:	ff d0                	call   *%eax
f0130254:	83 c4 10             	add    $0x10,%esp
		// string
		case 's':
			if ((p = va_arg(ap, char *)) == NULL)
				p = "(null)";
			if (width > 0 && padc != '-')
				for (width -= strnlen(p, precision); width > 0; width--)
f0130257:	ff 4d e4             	decl   -0x1c(%ebp)
f013025a:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f013025e:	7f e4                	jg     f0130244 <vprintfmt+0x1c7>
					putch(padc, putdat);
			for (; (ch = *p++) != '\0' && (precision < 0 || --precision >= 0); width--)
f0130260:	eb 34                	jmp    f0130296 <vprintfmt+0x219>
				if (altflag && (ch < ' ' || ch > '~'))
f0130262:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f0130266:	74 1c                	je     f0130284 <vprintfmt+0x207>
f0130268:	83 fb 1f             	cmp    $0x1f,%ebx
f013026b:	7e 05                	jle    f0130272 <vprintfmt+0x1f5>
f013026d:	83 fb 7e             	cmp    $0x7e,%ebx
f0130270:	7e 12                	jle    f0130284 <vprintfmt+0x207>
					putch('?', putdat);
f0130272:	83 ec 08             	sub    $0x8,%esp
f0130275:	ff 75 0c             	pushl  0xc(%ebp)
f0130278:	6a 3f                	push   $0x3f
f013027a:	8b 45 08             	mov    0x8(%ebp),%eax
f013027d:	ff d0                	call   *%eax
f013027f:	83 c4 10             	add    $0x10,%esp
f0130282:	eb 0f                	jmp    f0130293 <vprintfmt+0x216>
				else
					putch(ch, putdat);
f0130284:	83 ec 08             	sub    $0x8,%esp
f0130287:	ff 75 0c             	pushl  0xc(%ebp)
f013028a:	53                   	push   %ebx
f013028b:	8b 45 08             	mov    0x8(%ebp),%eax
f013028e:	ff d0                	call   *%eax
f0130290:	83 c4 10             	add    $0x10,%esp
			if ((p = va_arg(ap, char *)) == NULL)
				p = "(null)";
			if (width > 0 && padc != '-')
				for (width -= strnlen(p, precision); width > 0; width--)
					putch(padc, putdat);
			for (; (ch = *p++) != '\0' && (precision < 0 || --precision >= 0); width--)
f0130293:	ff 4d e4             	decl   -0x1c(%ebp)
f0130296:	89 f0                	mov    %esi,%eax
f0130298:	8d 70 01             	lea    0x1(%eax),%esi
f013029b:	8a 00                	mov    (%eax),%al
f013029d:	0f be d8             	movsbl %al,%ebx
f01302a0:	85 db                	test   %ebx,%ebx
f01302a2:	74 24                	je     f01302c8 <vprintfmt+0x24b>
f01302a4:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f01302a8:	78 b8                	js     f0130262 <vprintfmt+0x1e5>
f01302aa:	ff 4d e0             	decl   -0x20(%ebp)
f01302ad:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f01302b1:	79 af                	jns    f0130262 <vprintfmt+0x1e5>
				if (altflag && (ch < ' ' || ch > '~'))
					putch('?', putdat);
				else
					putch(ch, putdat);
			for (; width > 0; width--)
f01302b3:	eb 13                	jmp    f01302c8 <vprintfmt+0x24b>
				putch(' ', putdat);
f01302b5:	83 ec 08             	sub    $0x8,%esp
f01302b8:	ff 75 0c             	pushl  0xc(%ebp)
f01302bb:	6a 20                	push   $0x20
f01302bd:	8b 45 08             	mov    0x8(%ebp),%eax
f01302c0:	ff d0                	call   *%eax
f01302c2:	83 c4 10             	add    $0x10,%esp
			for (; (ch = *p++) != '\0' && (precision < 0 || --precision >= 0); width--)
				if (altflag && (ch < ' ' || ch > '~'))
					putch('?', putdat);
				else
					putch(ch, putdat);
			for (; width > 0; width--)
f01302c5:	ff 4d e4             	decl   -0x1c(%ebp)
f01302c8:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f01302cc:	7f e7                	jg     f01302b5 <vprintfmt+0x238>
				putch(' ', putdat);
			break;
f01302ce:	e9 66 01 00 00       	jmp    f0130439 <vprintfmt+0x3bc>

		// (signed) decimal
		case 'd':
			num = getint(&ap, lflag);
f01302d3:	83 ec 08             	sub    $0x8,%esp
f01302d6:	ff 75 e8             	pushl  -0x18(%ebp)
f01302d9:	8d 45 14             	lea    0x14(%ebp),%eax
f01302dc:	50                   	push   %eax
f01302dd:	e8 3c fd ff ff       	call   f013001e <getint>
f01302e2:	83 c4 10             	add    $0x10,%esp
f01302e5:	89 45 f0             	mov    %eax,-0x10(%ebp)
f01302e8:	89 55 f4             	mov    %edx,-0xc(%ebp)
			if ((long long) num < 0) {
f01302eb:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01302ee:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01302f1:	85 d2                	test   %edx,%edx
f01302f3:	79 23                	jns    f0130318 <vprintfmt+0x29b>
				putch('-', putdat);
f01302f5:	83 ec 08             	sub    $0x8,%esp
f01302f8:	ff 75 0c             	pushl  0xc(%ebp)
f01302fb:	6a 2d                	push   $0x2d
f01302fd:	8b 45 08             	mov    0x8(%ebp),%eax
f0130300:	ff d0                	call   *%eax
f0130302:	83 c4 10             	add    $0x10,%esp
				num = -(long long) num;
f0130305:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0130308:	8b 55 f4             	mov    -0xc(%ebp),%edx
f013030b:	f7 d8                	neg    %eax
f013030d:	83 d2 00             	adc    $0x0,%edx
f0130310:	f7 da                	neg    %edx
f0130312:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0130315:	89 55 f4             	mov    %edx,-0xc(%ebp)
			}
			base = 10;
f0130318:	c7 45 ec 0a 00 00 00 	movl   $0xa,-0x14(%ebp)
			goto number;
f013031f:	e9 bc 00 00 00       	jmp    f01303e0 <vprintfmt+0x363>

		// unsigned decimal
		case 'u':
			num = getuint(&ap, lflag);
f0130324:	83 ec 08             	sub    $0x8,%esp
f0130327:	ff 75 e8             	pushl  -0x18(%ebp)
f013032a:	8d 45 14             	lea    0x14(%ebp),%eax
f013032d:	50                   	push   %eax
f013032e:	e8 84 fc ff ff       	call   f012ffb7 <getuint>
f0130333:	83 c4 10             	add    $0x10,%esp
f0130336:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0130339:	89 55 f4             	mov    %edx,-0xc(%ebp)
			base = 10;
f013033c:	c7 45 ec 0a 00 00 00 	movl   $0xa,-0x14(%ebp)
			goto number;
f0130343:	e9 98 00 00 00       	jmp    f01303e0 <vprintfmt+0x363>

		// (unsigned) octal
		case 'o':
			// Replace this with your code.
			putch('X', putdat);
f0130348:	83 ec 08             	sub    $0x8,%esp
f013034b:	ff 75 0c             	pushl  0xc(%ebp)
f013034e:	6a 58                	push   $0x58
f0130350:	8b 45 08             	mov    0x8(%ebp),%eax
f0130353:	ff d0                	call   *%eax
f0130355:	83 c4 10             	add    $0x10,%esp
			putch('X', putdat);
f0130358:	83 ec 08             	sub    $0x8,%esp
f013035b:	ff 75 0c             	pushl  0xc(%ebp)
f013035e:	6a 58                	push   $0x58
f0130360:	8b 45 08             	mov    0x8(%ebp),%eax
f0130363:	ff d0                	call   *%eax
f0130365:	83 c4 10             	add    $0x10,%esp
			putch('X', putdat);
f0130368:	83 ec 08             	sub    $0x8,%esp
f013036b:	ff 75 0c             	pushl  0xc(%ebp)
f013036e:	6a 58                	push   $0x58
f0130370:	8b 45 08             	mov    0x8(%ebp),%eax
f0130373:	ff d0                	call   *%eax
f0130375:	83 c4 10             	add    $0x10,%esp
			break;
f0130378:	e9 bc 00 00 00       	jmp    f0130439 <vprintfmt+0x3bc>

		// pointer
		case 'p':
			putch('0', putdat);
f013037d:	83 ec 08             	sub    $0x8,%esp
f0130380:	ff 75 0c             	pushl  0xc(%ebp)
f0130383:	6a 30                	push   $0x30
f0130385:	8b 45 08             	mov    0x8(%ebp),%eax
f0130388:	ff d0                	call   *%eax
f013038a:	83 c4 10             	add    $0x10,%esp
			putch('x', putdat);
f013038d:	83 ec 08             	sub    $0x8,%esp
f0130390:	ff 75 0c             	pushl  0xc(%ebp)
f0130393:	6a 78                	push   $0x78
f0130395:	8b 45 08             	mov    0x8(%ebp),%eax
f0130398:	ff d0                	call   *%eax
f013039a:	83 c4 10             	add    $0x10,%esp
			num = (unsigned long long)
				(uint32) va_arg(ap, void *);
f013039d:	8b 45 14             	mov    0x14(%ebp),%eax
f01303a0:	83 c0 04             	add    $0x4,%eax
f01303a3:	89 45 14             	mov    %eax,0x14(%ebp)
f01303a6:	8b 45 14             	mov    0x14(%ebp),%eax
f01303a9:	83 e8 04             	sub    $0x4,%eax
f01303ac:	8b 00                	mov    (%eax),%eax

		// pointer
		case 'p':
			putch('0', putdat);
			putch('x', putdat);
			num = (unsigned long long)
f01303ae:	89 45 f0             	mov    %eax,-0x10(%ebp)
f01303b1:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
				(uint32) va_arg(ap, void *);
			base = 16;
f01303b8:	c7 45 ec 10 00 00 00 	movl   $0x10,-0x14(%ebp)
			goto number;
f01303bf:	eb 1f                	jmp    f01303e0 <vprintfmt+0x363>

		// (unsigned) hexadecimal
		case 'x':
			num = getuint(&ap, lflag);
f01303c1:	83 ec 08             	sub    $0x8,%esp
f01303c4:	ff 75 e8             	pushl  -0x18(%ebp)
f01303c7:	8d 45 14             	lea    0x14(%ebp),%eax
f01303ca:	50                   	push   %eax
f01303cb:	e8 e7 fb ff ff       	call   f012ffb7 <getuint>
f01303d0:	83 c4 10             	add    $0x10,%esp
f01303d3:	89 45 f0             	mov    %eax,-0x10(%ebp)
f01303d6:	89 55 f4             	mov    %edx,-0xc(%ebp)
			base = 16;
f01303d9:	c7 45 ec 10 00 00 00 	movl   $0x10,-0x14(%ebp)
		number:
			printnum(putch, putdat, num, base, width, padc);
f01303e0:	0f be 55 db          	movsbl -0x25(%ebp),%edx
f01303e4:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01303e7:	83 ec 04             	sub    $0x4,%esp
f01303ea:	52                   	push   %edx
f01303eb:	ff 75 e4             	pushl  -0x1c(%ebp)
f01303ee:	50                   	push   %eax
f01303ef:	ff 75 f4             	pushl  -0xc(%ebp)
f01303f2:	ff 75 f0             	pushl  -0x10(%ebp)
f01303f5:	ff 75 0c             	pushl  0xc(%ebp)
f01303f8:	ff 75 08             	pushl  0x8(%ebp)
f01303fb:	e8 00 fb ff ff       	call   f012ff00 <printnum>
f0130400:	83 c4 20             	add    $0x20,%esp
			break;
f0130403:	eb 34                	jmp    f0130439 <vprintfmt+0x3bc>

		// escaped '%' character
		case '%':
			putch(ch, putdat);
f0130405:	83 ec 08             	sub    $0x8,%esp
f0130408:	ff 75 0c             	pushl  0xc(%ebp)
f013040b:	53                   	push   %ebx
f013040c:	8b 45 08             	mov    0x8(%ebp),%eax
f013040f:	ff d0                	call   *%eax
f0130411:	83 c4 10             	add    $0x10,%esp
			break;
f0130414:	eb 23                	jmp    f0130439 <vprintfmt+0x3bc>

		// unrecognized escape sequence - just print it literally
		default:
			putch('%', putdat);
f0130416:	83 ec 08             	sub    $0x8,%esp
f0130419:	ff 75 0c             	pushl  0xc(%ebp)
f013041c:	6a 25                	push   $0x25
f013041e:	8b 45 08             	mov    0x8(%ebp),%eax
f0130421:	ff d0                	call   *%eax
f0130423:	83 c4 10             	add    $0x10,%esp
			for (fmt--; fmt[-1] != '%'; fmt--)
f0130426:	ff 4d 10             	decl   0x10(%ebp)
f0130429:	eb 03                	jmp    f013042e <vprintfmt+0x3b1>
f013042b:	ff 4d 10             	decl   0x10(%ebp)
f013042e:	8b 45 10             	mov    0x10(%ebp),%eax
f0130431:	48                   	dec    %eax
f0130432:	8a 00                	mov    (%eax),%al
f0130434:	3c 25                	cmp    $0x25,%al
f0130436:	75 f3                	jne    f013042b <vprintfmt+0x3ae>
				/* do nothing */;
			break;
f0130438:	90                   	nop
		}
	}
f0130439:	e9 47 fc ff ff       	jmp    f0130085 <vprintfmt+0x8>
	char padc;

	while (1) {
		while ((ch = *(unsigned char *) fmt++) != '%') {
			if (ch == '\0')
				return;
f013043e:	90                   	nop
			for (fmt--; fmt[-1] != '%'; fmt--)
				/* do nothing */;
			break;
		}
	}
}
f013043f:	8d 65 f8             	lea    -0x8(%ebp),%esp
f0130442:	5b                   	pop    %ebx
f0130443:	5e                   	pop    %esi
f0130444:	5d                   	pop    %ebp
f0130445:	c3                   	ret    

f0130446 <printfmt>:

void
printfmt(void (*putch)(int, void*), void *putdat, const char *fmt, ...)
{
f0130446:	55                   	push   %ebp
f0130447:	89 e5                	mov    %esp,%ebp
f0130449:	83 ec 18             	sub    $0x18,%esp
	va_list ap;

	va_start(ap, fmt);
f013044c:	8d 45 10             	lea    0x10(%ebp),%eax
f013044f:	83 c0 04             	add    $0x4,%eax
f0130452:	89 45 f4             	mov    %eax,-0xc(%ebp)
	vprintfmt(putch, putdat, fmt, ap);
f0130455:	8b 45 10             	mov    0x10(%ebp),%eax
f0130458:	ff 75 f4             	pushl  -0xc(%ebp)
f013045b:	50                   	push   %eax
f013045c:	ff 75 0c             	pushl  0xc(%ebp)
f013045f:	ff 75 08             	pushl  0x8(%ebp)
f0130462:	e8 16 fc ff ff       	call   f013007d <vprintfmt>
f0130467:	83 c4 10             	add    $0x10,%esp
	va_end(ap);
}
f013046a:	90                   	nop
f013046b:	c9                   	leave  
f013046c:	c3                   	ret    

f013046d <sprintputch>:
	int cnt;
};

static void
sprintputch(int ch, struct sprintbuf *b)
{
f013046d:	55                   	push   %ebp
f013046e:	89 e5                	mov    %esp,%ebp
	b->cnt++;
f0130470:	8b 45 0c             	mov    0xc(%ebp),%eax
f0130473:	8b 40 08             	mov    0x8(%eax),%eax
f0130476:	8d 50 01             	lea    0x1(%eax),%edx
f0130479:	8b 45 0c             	mov    0xc(%ebp),%eax
f013047c:	89 50 08             	mov    %edx,0x8(%eax)
	if (b->buf < b->ebuf)
f013047f:	8b 45 0c             	mov    0xc(%ebp),%eax
f0130482:	8b 10                	mov    (%eax),%edx
f0130484:	8b 45 0c             	mov    0xc(%ebp),%eax
f0130487:	8b 40 04             	mov    0x4(%eax),%eax
f013048a:	39 c2                	cmp    %eax,%edx
f013048c:	73 12                	jae    f01304a0 <sprintputch+0x33>
		*b->buf++ = ch;
f013048e:	8b 45 0c             	mov    0xc(%ebp),%eax
f0130491:	8b 00                	mov    (%eax),%eax
f0130493:	8d 48 01             	lea    0x1(%eax),%ecx
f0130496:	8b 55 0c             	mov    0xc(%ebp),%edx
f0130499:	89 0a                	mov    %ecx,(%edx)
f013049b:	8b 55 08             	mov    0x8(%ebp),%edx
f013049e:	88 10                	mov    %dl,(%eax)
}
f01304a0:	90                   	nop
f01304a1:	5d                   	pop    %ebp
f01304a2:	c3                   	ret    

f01304a3 <vsnprintf>:

int
vsnprintf(char *buf, int n, const char *fmt, va_list ap)
{
f01304a3:	55                   	push   %ebp
f01304a4:	89 e5                	mov    %esp,%ebp
f01304a6:	83 ec 18             	sub    $0x18,%esp
	struct sprintbuf b = {buf, buf+n-1, 0};
f01304a9:	8b 45 08             	mov    0x8(%ebp),%eax
f01304ac:	89 45 ec             	mov    %eax,-0x14(%ebp)
f01304af:	8b 45 0c             	mov    0xc(%ebp),%eax
f01304b2:	8d 50 ff             	lea    -0x1(%eax),%edx
f01304b5:	8b 45 08             	mov    0x8(%ebp),%eax
f01304b8:	01 d0                	add    %edx,%eax
f01304ba:	89 45 f0             	mov    %eax,-0x10(%ebp)
f01304bd:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

	if (buf == NULL || n < 1)
f01304c4:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f01304c8:	74 06                	je     f01304d0 <vsnprintf+0x2d>
f01304ca:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
f01304ce:	7f 07                	jg     f01304d7 <vsnprintf+0x34>
		return -E_INVAL;
f01304d0:	b8 03 00 00 00       	mov    $0x3,%eax
f01304d5:	eb 20                	jmp    f01304f7 <vsnprintf+0x54>

	// print the string to the buffer
	vprintfmt((void*)sprintputch, &b, fmt, ap);
f01304d7:	ff 75 14             	pushl  0x14(%ebp)
f01304da:	ff 75 10             	pushl  0x10(%ebp)
f01304dd:	8d 45 ec             	lea    -0x14(%ebp),%eax
f01304e0:	50                   	push   %eax
f01304e1:	68 6d 04 13 f0       	push   $0xf013046d
f01304e6:	e8 92 fb ff ff       	call   f013007d <vprintfmt>
f01304eb:	83 c4 10             	add    $0x10,%esp

	// null terminate the buffer
	*b.buf = '\0';
f01304ee:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01304f1:	c6 00 00             	movb   $0x0,(%eax)

	return b.cnt;
f01304f4:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f01304f7:	c9                   	leave  
f01304f8:	c3                   	ret    

f01304f9 <snprintf>:

int
snprintf(char *buf, int n, const char *fmt, ...)
{
f01304f9:	55                   	push   %ebp
f01304fa:	89 e5                	mov    %esp,%ebp
f01304fc:	83 ec 18             	sub    $0x18,%esp
	va_list ap;
	int rc;

	va_start(ap, fmt);
f01304ff:	8d 45 10             	lea    0x10(%ebp),%eax
f0130502:	83 c0 04             	add    $0x4,%eax
f0130505:	89 45 f4             	mov    %eax,-0xc(%ebp)
	rc = vsnprintf(buf, n, fmt, ap);
f0130508:	8b 45 10             	mov    0x10(%ebp),%eax
f013050b:	ff 75 f4             	pushl  -0xc(%ebp)
f013050e:	50                   	push   %eax
f013050f:	ff 75 0c             	pushl  0xc(%ebp)
f0130512:	ff 75 08             	pushl  0x8(%ebp)
f0130515:	e8 89 ff ff ff       	call   f01304a3 <vsnprintf>
f013051a:	83 c4 10             	add    $0x10,%esp
f013051d:	89 45 f0             	mov    %eax,-0x10(%ebp)
	va_end(ap);

	return rc;
f0130520:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
f0130523:	c9                   	leave  
f0130524:	c3                   	ret    

f0130525 <readline>:
#include <inc/lib.h>

//static char buf[BUFLEN];

void readline(const char *prompt, char* buf)
{
f0130525:	55                   	push   %ebp
f0130526:	89 e5                	mov    %esp,%ebp
f0130528:	83 ec 18             	sub    $0x18,%esp
		int i, c, echoing;

	if (prompt != NULL)
f013052b:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f013052f:	74 13                	je     f0130544 <readline+0x1f>
		cprintf("%s", prompt);
f0130531:	83 ec 08             	sub    $0x8,%esp
f0130534:	ff 75 08             	pushl  0x8(%ebp)
f0130537:	68 90 c8 13 f0       	push   $0xf013c890
f013053c:	e8 ec 06 fd ff       	call   f0100c2d <cprintf>
f0130541:	83 c4 10             	add    $0x10,%esp

	i = 0;
f0130544:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	echoing = iscons(0);
f013054b:	83 ec 0c             	sub    $0xc,%esp
f013054e:	6a 00                	push   $0x0
f0130550:	e8 85 06 fd ff       	call   f0100bda <iscons>
f0130555:	83 c4 10             	add    $0x10,%esp
f0130558:	89 45 f0             	mov    %eax,-0x10(%ebp)
	while (1) {
		c = getchar();
f013055b:	e8 61 06 fd ff       	call   f0100bc1 <getchar>
f0130560:	89 45 ec             	mov    %eax,-0x14(%ebp)
		if (c < 0) {
f0130563:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0130567:	79 22                	jns    f013058b <readline+0x66>
			if (c != -E_EOF)
f0130569:	83 7d ec 07          	cmpl   $0x7,-0x14(%ebp)
f013056d:	0f 84 ad 00 00 00    	je     f0130620 <readline+0xfb>
				cprintf("read error: %e\n", c);
f0130573:	83 ec 08             	sub    $0x8,%esp
f0130576:	ff 75 ec             	pushl  -0x14(%ebp)
f0130579:	68 93 c8 13 f0       	push   $0xf013c893
f013057e:	e8 aa 06 fd ff       	call   f0100c2d <cprintf>
f0130583:	83 c4 10             	add    $0x10,%esp
			return;
f0130586:	e9 95 00 00 00       	jmp    f0130620 <readline+0xfb>
		} else if (c >= ' ' && i < BUFLEN-1) {
f013058b:	83 7d ec 1f          	cmpl   $0x1f,-0x14(%ebp)
f013058f:	7e 34                	jle    f01305c5 <readline+0xa0>
f0130591:	81 7d f4 fe 03 00 00 	cmpl   $0x3fe,-0xc(%ebp)
f0130598:	7f 2b                	jg     f01305c5 <readline+0xa0>
			if (echoing)
f013059a:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f013059e:	74 0e                	je     f01305ae <readline+0x89>
				cputchar(c);
f01305a0:	83 ec 0c             	sub    $0xc,%esp
f01305a3:	ff 75 ec             	pushl  -0x14(%ebp)
f01305a6:	e8 ff 05 fd ff       	call   f0100baa <cputchar>
f01305ab:	83 c4 10             	add    $0x10,%esp
			buf[i++] = c;
f01305ae:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01305b1:	8d 50 01             	lea    0x1(%eax),%edx
f01305b4:	89 55 f4             	mov    %edx,-0xc(%ebp)
f01305b7:	89 c2                	mov    %eax,%edx
f01305b9:	8b 45 0c             	mov    0xc(%ebp),%eax
f01305bc:	01 d0                	add    %edx,%eax
f01305be:	8b 55 ec             	mov    -0x14(%ebp),%edx
f01305c1:	88 10                	mov    %dl,(%eax)
f01305c3:	eb 56                	jmp    f013061b <readline+0xf6>
		} else if (c == '\b' && i > 0) {
f01305c5:	83 7d ec 08          	cmpl   $0x8,-0x14(%ebp)
f01305c9:	75 1f                	jne    f01305ea <readline+0xc5>
f01305cb:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01305cf:	7e 19                	jle    f01305ea <readline+0xc5>
			if (echoing)
f01305d1:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f01305d5:	74 0e                	je     f01305e5 <readline+0xc0>
				cputchar(c);
f01305d7:	83 ec 0c             	sub    $0xc,%esp
f01305da:	ff 75 ec             	pushl  -0x14(%ebp)
f01305dd:	e8 c8 05 fd ff       	call   f0100baa <cputchar>
f01305e2:	83 c4 10             	add    $0x10,%esp

			i--;
f01305e5:	ff 4d f4             	decl   -0xc(%ebp)
f01305e8:	eb 31                	jmp    f013061b <readline+0xf6>
		} else if (c == '\n' || c == '\r') {
f01305ea:	83 7d ec 0a          	cmpl   $0xa,-0x14(%ebp)
f01305ee:	74 0a                	je     f01305fa <readline+0xd5>
f01305f0:	83 7d ec 0d          	cmpl   $0xd,-0x14(%ebp)
f01305f4:	0f 85 61 ff ff ff    	jne    f013055b <readline+0x36>
			if (echoing)
f01305fa:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f01305fe:	74 0e                	je     f013060e <readline+0xe9>
				cputchar(c);
f0130600:	83 ec 0c             	sub    $0xc,%esp
f0130603:	ff 75 ec             	pushl  -0x14(%ebp)
f0130606:	e8 9f 05 fd ff       	call   f0100baa <cputchar>
f013060b:	83 c4 10             	add    $0x10,%esp

			buf[i] = 0;
f013060e:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0130611:	8b 45 0c             	mov    0xc(%ebp),%eax
f0130614:	01 d0                	add    %edx,%eax
f0130616:	c6 00 00             	movb   $0x0,(%eax)
			return;
f0130619:	eb 06                	jmp    f0130621 <readline+0xfc>
		}
	}
f013061b:	e9 3b ff ff ff       	jmp    f013055b <readline+0x36>
	while (1) {
		c = getchar();
		if (c < 0) {
			if (c != -E_EOF)
				cprintf("read error: %e\n", c);
			return;
f0130620:	90                   	nop
			buf[i] = 0;
			return;
		}
	}

}
f0130621:	c9                   	leave  
f0130622:	c3                   	ret    

f0130623 <atomic_readline>:

void atomic_readline(const char *prompt, char* buf)
{
f0130623:	55                   	push   %ebp
f0130624:	89 e5                	mov    %esp,%ebp
f0130626:	83 ec 18             	sub    $0x18,%esp
	sys_disable_interrupt();
f0130629:	e8 11 bf fd ff       	call   f010c53f <sys_disable_interrupt>
	int i, c, echoing;

	if (prompt != NULL)
f013062e:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0130632:	74 13                	je     f0130647 <atomic_readline+0x24>
		cprintf("%s", prompt);
f0130634:	83 ec 08             	sub    $0x8,%esp
f0130637:	ff 75 08             	pushl  0x8(%ebp)
f013063a:	68 90 c8 13 f0       	push   $0xf013c890
f013063f:	e8 e9 05 fd ff       	call   f0100c2d <cprintf>
f0130644:	83 c4 10             	add    $0x10,%esp

	i = 0;
f0130647:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	echoing = iscons(0);
f013064e:	83 ec 0c             	sub    $0xc,%esp
f0130651:	6a 00                	push   $0x0
f0130653:	e8 82 05 fd ff       	call   f0100bda <iscons>
f0130658:	83 c4 10             	add    $0x10,%esp
f013065b:	89 45 f0             	mov    %eax,-0x10(%ebp)
	while (1) {
		c = getchar();
f013065e:	e8 5e 05 fd ff       	call   f0100bc1 <getchar>
f0130663:	89 45 ec             	mov    %eax,-0x14(%ebp)
		if (c < 0) {
f0130666:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f013066a:	79 23                	jns    f013068f <atomic_readline+0x6c>
			if (c != -E_EOF)
f013066c:	83 7d ec 07          	cmpl   $0x7,-0x14(%ebp)
f0130670:	74 13                	je     f0130685 <atomic_readline+0x62>
				cprintf("read error: %e\n", c);
f0130672:	83 ec 08             	sub    $0x8,%esp
f0130675:	ff 75 ec             	pushl  -0x14(%ebp)
f0130678:	68 93 c8 13 f0       	push   $0xf013c893
f013067d:	e8 ab 05 fd ff       	call   f0100c2d <cprintf>
f0130682:	83 c4 10             	add    $0x10,%esp
			sys_enable_interrupt();
f0130685:	e8 cf be fd ff       	call   f010c559 <sys_enable_interrupt>
			return;
f013068a:	e9 9a 00 00 00       	jmp    f0130729 <atomic_readline+0x106>
		} else if (c >= ' ' && i < BUFLEN-1) {
f013068f:	83 7d ec 1f          	cmpl   $0x1f,-0x14(%ebp)
f0130693:	7e 34                	jle    f01306c9 <atomic_readline+0xa6>
f0130695:	81 7d f4 fe 03 00 00 	cmpl   $0x3fe,-0xc(%ebp)
f013069c:	7f 2b                	jg     f01306c9 <atomic_readline+0xa6>
			if (echoing)
f013069e:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f01306a2:	74 0e                	je     f01306b2 <atomic_readline+0x8f>
				cputchar(c);
f01306a4:	83 ec 0c             	sub    $0xc,%esp
f01306a7:	ff 75 ec             	pushl  -0x14(%ebp)
f01306aa:	e8 fb 04 fd ff       	call   f0100baa <cputchar>
f01306af:	83 c4 10             	add    $0x10,%esp
			buf[i++] = c;
f01306b2:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01306b5:	8d 50 01             	lea    0x1(%eax),%edx
f01306b8:	89 55 f4             	mov    %edx,-0xc(%ebp)
f01306bb:	89 c2                	mov    %eax,%edx
f01306bd:	8b 45 0c             	mov    0xc(%ebp),%eax
f01306c0:	01 d0                	add    %edx,%eax
f01306c2:	8b 55 ec             	mov    -0x14(%ebp),%edx
f01306c5:	88 10                	mov    %dl,(%eax)
f01306c7:	eb 5b                	jmp    f0130724 <atomic_readline+0x101>
		} else if (c == '\b' && i > 0) {
f01306c9:	83 7d ec 08          	cmpl   $0x8,-0x14(%ebp)
f01306cd:	75 1f                	jne    f01306ee <atomic_readline+0xcb>
f01306cf:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01306d3:	7e 19                	jle    f01306ee <atomic_readline+0xcb>
			if (echoing)
f01306d5:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f01306d9:	74 0e                	je     f01306e9 <atomic_readline+0xc6>
				cputchar(c);
f01306db:	83 ec 0c             	sub    $0xc,%esp
f01306de:	ff 75 ec             	pushl  -0x14(%ebp)
f01306e1:	e8 c4 04 fd ff       	call   f0100baa <cputchar>
f01306e6:	83 c4 10             	add    $0x10,%esp
			i--;
f01306e9:	ff 4d f4             	decl   -0xc(%ebp)
f01306ec:	eb 36                	jmp    f0130724 <atomic_readline+0x101>
		} else if (c == '\n' || c == '\r') {
f01306ee:	83 7d ec 0a          	cmpl   $0xa,-0x14(%ebp)
f01306f2:	74 0a                	je     f01306fe <atomic_readline+0xdb>
f01306f4:	83 7d ec 0d          	cmpl   $0xd,-0x14(%ebp)
f01306f8:	0f 85 60 ff ff ff    	jne    f013065e <atomic_readline+0x3b>
			if (echoing)
f01306fe:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0130702:	74 0e                	je     f0130712 <atomic_readline+0xef>
				cputchar(c);
f0130704:	83 ec 0c             	sub    $0xc,%esp
f0130707:	ff 75 ec             	pushl  -0x14(%ebp)
f013070a:	e8 9b 04 fd ff       	call   f0100baa <cputchar>
f013070f:	83 c4 10             	add    $0x10,%esp
			buf[i] = 0;
f0130712:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0130715:	8b 45 0c             	mov    0xc(%ebp),%eax
f0130718:	01 d0                	add    %edx,%eax
f013071a:	c6 00 00             	movb   $0x0,(%eax)
			sys_enable_interrupt();
f013071d:	e8 37 be fd ff       	call   f010c559 <sys_enable_interrupt>
			return;
f0130722:	eb 05                	jmp    f0130729 <atomic_readline+0x106>
		}
	}
f0130724:	e9 35 ff ff ff       	jmp    f013065e <atomic_readline+0x3b>
}
f0130729:	c9                   	leave  
f013072a:	c3                   	ret    

f013072b <strlen>:

#include <inc/string.h>

int
strlen(const char *s)
{
f013072b:	55                   	push   %ebp
f013072c:	89 e5                	mov    %esp,%ebp
f013072e:	83 ec 10             	sub    $0x10,%esp
	int n;

	for (n = 0; *s != '\0'; s++)
f0130731:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
f0130738:	eb 06                	jmp    f0130740 <strlen+0x15>
		n++;
f013073a:	ff 45 fc             	incl   -0x4(%ebp)
int
strlen(const char *s)
{
	int n;

	for (n = 0; *s != '\0'; s++)
f013073d:	ff 45 08             	incl   0x8(%ebp)
f0130740:	8b 45 08             	mov    0x8(%ebp),%eax
f0130743:	8a 00                	mov    (%eax),%al
f0130745:	84 c0                	test   %al,%al
f0130747:	75 f1                	jne    f013073a <strlen+0xf>
		n++;
	return n;
f0130749:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
f013074c:	c9                   	leave  
f013074d:	c3                   	ret    

f013074e <strnlen>:

int
strnlen(const char *s, uint32 size)
{
f013074e:	55                   	push   %ebp
f013074f:	89 e5                	mov    %esp,%ebp
f0130751:	83 ec 10             	sub    $0x10,%esp
	int n;

	for (n = 0; size > 0 && *s != '\0'; s++, size--)
f0130754:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
f013075b:	eb 09                	jmp    f0130766 <strnlen+0x18>
		n++;
f013075d:	ff 45 fc             	incl   -0x4(%ebp)
int
strnlen(const char *s, uint32 size)
{
	int n;

	for (n = 0; size > 0 && *s != '\0'; s++, size--)
f0130760:	ff 45 08             	incl   0x8(%ebp)
f0130763:	ff 4d 0c             	decl   0xc(%ebp)
f0130766:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
f013076a:	74 09                	je     f0130775 <strnlen+0x27>
f013076c:	8b 45 08             	mov    0x8(%ebp),%eax
f013076f:	8a 00                	mov    (%eax),%al
f0130771:	84 c0                	test   %al,%al
f0130773:	75 e8                	jne    f013075d <strnlen+0xf>
		n++;
	return n;
f0130775:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
f0130778:	c9                   	leave  
f0130779:	c3                   	ret    

f013077a <strcpy>:

char *
strcpy(char *dst, const char *src)
{
f013077a:	55                   	push   %ebp
f013077b:	89 e5                	mov    %esp,%ebp
f013077d:	83 ec 10             	sub    $0x10,%esp
	char *ret;

	ret = dst;
f0130780:	8b 45 08             	mov    0x8(%ebp),%eax
f0130783:	89 45 fc             	mov    %eax,-0x4(%ebp)
	while ((*dst++ = *src++) != '\0')
f0130786:	90                   	nop
f0130787:	8b 45 08             	mov    0x8(%ebp),%eax
f013078a:	8d 50 01             	lea    0x1(%eax),%edx
f013078d:	89 55 08             	mov    %edx,0x8(%ebp)
f0130790:	8b 55 0c             	mov    0xc(%ebp),%edx
f0130793:	8d 4a 01             	lea    0x1(%edx),%ecx
f0130796:	89 4d 0c             	mov    %ecx,0xc(%ebp)
f0130799:	8a 12                	mov    (%edx),%dl
f013079b:	88 10                	mov    %dl,(%eax)
f013079d:	8a 00                	mov    (%eax),%al
f013079f:	84 c0                	test   %al,%al
f01307a1:	75 e4                	jne    f0130787 <strcpy+0xd>
		/* do nothing */;
	return ret;
f01307a3:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
f01307a6:	c9                   	leave  
f01307a7:	c3                   	ret    

f01307a8 <strncpy>:

char *
strncpy(char *dst, const char *src, uint32 size) {
f01307a8:	55                   	push   %ebp
f01307a9:	89 e5                	mov    %esp,%ebp
f01307ab:	83 ec 10             	sub    $0x10,%esp
	uint32 i;
	char *ret;

	ret = dst;
f01307ae:	8b 45 08             	mov    0x8(%ebp),%eax
f01307b1:	89 45 f8             	mov    %eax,-0x8(%ebp)
	for (i = 0; i < size; i++) {
f01307b4:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
f01307bb:	eb 1f                	jmp    f01307dc <strncpy+0x34>
		*dst++ = *src;
f01307bd:	8b 45 08             	mov    0x8(%ebp),%eax
f01307c0:	8d 50 01             	lea    0x1(%eax),%edx
f01307c3:	89 55 08             	mov    %edx,0x8(%ebp)
f01307c6:	8b 55 0c             	mov    0xc(%ebp),%edx
f01307c9:	8a 12                	mov    (%edx),%dl
f01307cb:	88 10                	mov    %dl,(%eax)
		// If strlen(src) < size, null-pad 'dst' out to 'size' chars
		if (*src != '\0')
f01307cd:	8b 45 0c             	mov    0xc(%ebp),%eax
f01307d0:	8a 00                	mov    (%eax),%al
f01307d2:	84 c0                	test   %al,%al
f01307d4:	74 03                	je     f01307d9 <strncpy+0x31>
			src++;
f01307d6:	ff 45 0c             	incl   0xc(%ebp)
strncpy(char *dst, const char *src, uint32 size) {
	uint32 i;
	char *ret;

	ret = dst;
	for (i = 0; i < size; i++) {
f01307d9:	ff 45 fc             	incl   -0x4(%ebp)
f01307dc:	8b 45 fc             	mov    -0x4(%ebp),%eax
f01307df:	3b 45 10             	cmp    0x10(%ebp),%eax
f01307e2:	72 d9                	jb     f01307bd <strncpy+0x15>
		*dst++ = *src;
		// If strlen(src) < size, null-pad 'dst' out to 'size' chars
		if (*src != '\0')
			src++;
	}
	return ret;
f01307e4:	8b 45 f8             	mov    -0x8(%ebp),%eax
}
f01307e7:	c9                   	leave  
f01307e8:	c3                   	ret    

f01307e9 <strlcpy>:

uint32
strlcpy(char *dst, const char *src, uint32 size)
{
f01307e9:	55                   	push   %ebp
f01307ea:	89 e5                	mov    %esp,%ebp
f01307ec:	83 ec 10             	sub    $0x10,%esp
	char *dst_in;

	dst_in = dst;
f01307ef:	8b 45 08             	mov    0x8(%ebp),%eax
f01307f2:	89 45 fc             	mov    %eax,-0x4(%ebp)
	if (size > 0) {
f01307f5:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
f01307f9:	74 30                	je     f013082b <strlcpy+0x42>
		while (--size > 0 && *src != '\0')
f01307fb:	eb 16                	jmp    f0130813 <strlcpy+0x2a>
			*dst++ = *src++;
f01307fd:	8b 45 08             	mov    0x8(%ebp),%eax
f0130800:	8d 50 01             	lea    0x1(%eax),%edx
f0130803:	89 55 08             	mov    %edx,0x8(%ebp)
f0130806:	8b 55 0c             	mov    0xc(%ebp),%edx
f0130809:	8d 4a 01             	lea    0x1(%edx),%ecx
f013080c:	89 4d 0c             	mov    %ecx,0xc(%ebp)
f013080f:	8a 12                	mov    (%edx),%dl
f0130811:	88 10                	mov    %dl,(%eax)
{
	char *dst_in;

	dst_in = dst;
	if (size > 0) {
		while (--size > 0 && *src != '\0')
f0130813:	ff 4d 10             	decl   0x10(%ebp)
f0130816:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
f013081a:	74 09                	je     f0130825 <strlcpy+0x3c>
f013081c:	8b 45 0c             	mov    0xc(%ebp),%eax
f013081f:	8a 00                	mov    (%eax),%al
f0130821:	84 c0                	test   %al,%al
f0130823:	75 d8                	jne    f01307fd <strlcpy+0x14>
			*dst++ = *src++;
		*dst = '\0';
f0130825:	8b 45 08             	mov    0x8(%ebp),%eax
f0130828:	c6 00 00             	movb   $0x0,(%eax)
	}
	return dst - dst_in;
f013082b:	8b 55 08             	mov    0x8(%ebp),%edx
f013082e:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0130831:	29 c2                	sub    %eax,%edx
f0130833:	89 d0                	mov    %edx,%eax
}
f0130835:	c9                   	leave  
f0130836:	c3                   	ret    

f0130837 <strcmp>:

int
strcmp(const char *p, const char *q)
{
f0130837:	55                   	push   %ebp
f0130838:	89 e5                	mov    %esp,%ebp
	while (*p && *p == *q)
f013083a:	eb 06                	jmp    f0130842 <strcmp+0xb>
		p++, q++;
f013083c:	ff 45 08             	incl   0x8(%ebp)
f013083f:	ff 45 0c             	incl   0xc(%ebp)
}

int
strcmp(const char *p, const char *q)
{
	while (*p && *p == *q)
f0130842:	8b 45 08             	mov    0x8(%ebp),%eax
f0130845:	8a 00                	mov    (%eax),%al
f0130847:	84 c0                	test   %al,%al
f0130849:	74 0e                	je     f0130859 <strcmp+0x22>
f013084b:	8b 45 08             	mov    0x8(%ebp),%eax
f013084e:	8a 10                	mov    (%eax),%dl
f0130850:	8b 45 0c             	mov    0xc(%ebp),%eax
f0130853:	8a 00                	mov    (%eax),%al
f0130855:	38 c2                	cmp    %al,%dl
f0130857:	74 e3                	je     f013083c <strcmp+0x5>
		p++, q++;
	return (int) ((unsigned char) *p - (unsigned char) *q);
f0130859:	8b 45 08             	mov    0x8(%ebp),%eax
f013085c:	8a 00                	mov    (%eax),%al
f013085e:	0f b6 d0             	movzbl %al,%edx
f0130861:	8b 45 0c             	mov    0xc(%ebp),%eax
f0130864:	8a 00                	mov    (%eax),%al
f0130866:	0f b6 c0             	movzbl %al,%eax
f0130869:	29 c2                	sub    %eax,%edx
f013086b:	89 d0                	mov    %edx,%eax
}
f013086d:	5d                   	pop    %ebp
f013086e:	c3                   	ret    

f013086f <strncmp>:

int
strncmp(const char *p, const char *q, uint32 n)
{
f013086f:	55                   	push   %ebp
f0130870:	89 e5                	mov    %esp,%ebp
	while (n > 0 && *p && *p == *q)
f0130872:	eb 09                	jmp    f013087d <strncmp+0xe>
		n--, p++, q++;
f0130874:	ff 4d 10             	decl   0x10(%ebp)
f0130877:	ff 45 08             	incl   0x8(%ebp)
f013087a:	ff 45 0c             	incl   0xc(%ebp)
}

int
strncmp(const char *p, const char *q, uint32 n)
{
	while (n > 0 && *p && *p == *q)
f013087d:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
f0130881:	74 17                	je     f013089a <strncmp+0x2b>
f0130883:	8b 45 08             	mov    0x8(%ebp),%eax
f0130886:	8a 00                	mov    (%eax),%al
f0130888:	84 c0                	test   %al,%al
f013088a:	74 0e                	je     f013089a <strncmp+0x2b>
f013088c:	8b 45 08             	mov    0x8(%ebp),%eax
f013088f:	8a 10                	mov    (%eax),%dl
f0130891:	8b 45 0c             	mov    0xc(%ebp),%eax
f0130894:	8a 00                	mov    (%eax),%al
f0130896:	38 c2                	cmp    %al,%dl
f0130898:	74 da                	je     f0130874 <strncmp+0x5>
		n--, p++, q++;
	if (n == 0)
f013089a:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
f013089e:	75 07                	jne    f01308a7 <strncmp+0x38>
		return 0;
f01308a0:	b8 00 00 00 00       	mov    $0x0,%eax
f01308a5:	eb 14                	jmp    f01308bb <strncmp+0x4c>
	else
		return (int) ((unsigned char) *p - (unsigned char) *q);
f01308a7:	8b 45 08             	mov    0x8(%ebp),%eax
f01308aa:	8a 00                	mov    (%eax),%al
f01308ac:	0f b6 d0             	movzbl %al,%edx
f01308af:	8b 45 0c             	mov    0xc(%ebp),%eax
f01308b2:	8a 00                	mov    (%eax),%al
f01308b4:	0f b6 c0             	movzbl %al,%eax
f01308b7:	29 c2                	sub    %eax,%edx
f01308b9:	89 d0                	mov    %edx,%eax
}
f01308bb:	5d                   	pop    %ebp
f01308bc:	c3                   	ret    

f01308bd <strchr>:

// Return a pointer to the first occurrence of 'c' in 's',
// or a null pointer if the string has no 'c'.
char *
strchr(const char *s, char c)
{
f01308bd:	55                   	push   %ebp
f01308be:	89 e5                	mov    %esp,%ebp
f01308c0:	83 ec 04             	sub    $0x4,%esp
f01308c3:	8b 45 0c             	mov    0xc(%ebp),%eax
f01308c6:	88 45 fc             	mov    %al,-0x4(%ebp)
	for (; *s; s++)
f01308c9:	eb 12                	jmp    f01308dd <strchr+0x20>
		if (*s == c)
f01308cb:	8b 45 08             	mov    0x8(%ebp),%eax
f01308ce:	8a 00                	mov    (%eax),%al
f01308d0:	3a 45 fc             	cmp    -0x4(%ebp),%al
f01308d3:	75 05                	jne    f01308da <strchr+0x1d>
			return (char *) s;
f01308d5:	8b 45 08             	mov    0x8(%ebp),%eax
f01308d8:	eb 11                	jmp    f01308eb <strchr+0x2e>
// Return a pointer to the first occurrence of 'c' in 's',
// or a null pointer if the string has no 'c'.
char *
strchr(const char *s, char c)
{
	for (; *s; s++)
f01308da:	ff 45 08             	incl   0x8(%ebp)
f01308dd:	8b 45 08             	mov    0x8(%ebp),%eax
f01308e0:	8a 00                	mov    (%eax),%al
f01308e2:	84 c0                	test   %al,%al
f01308e4:	75 e5                	jne    f01308cb <strchr+0xe>
		if (*s == c)
			return (char *) s;
	return 0;
f01308e6:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01308eb:	c9                   	leave  
f01308ec:	c3                   	ret    

f01308ed <strfind>:

// Return a pointer to the first occurrence of 'c' in 's',
// or a pointer to the string-ending null character if the string has no 'c'.
char *
strfind(const char *s, char c)
{
f01308ed:	55                   	push   %ebp
f01308ee:	89 e5                	mov    %esp,%ebp
f01308f0:	83 ec 04             	sub    $0x4,%esp
f01308f3:	8b 45 0c             	mov    0xc(%ebp),%eax
f01308f6:	88 45 fc             	mov    %al,-0x4(%ebp)
	for (; *s; s++)
f01308f9:	eb 0d                	jmp    f0130908 <strfind+0x1b>
		if (*s == c)
f01308fb:	8b 45 08             	mov    0x8(%ebp),%eax
f01308fe:	8a 00                	mov    (%eax),%al
f0130900:	3a 45 fc             	cmp    -0x4(%ebp),%al
f0130903:	74 0e                	je     f0130913 <strfind+0x26>
// Return a pointer to the first occurrence of 'c' in 's',
// or a pointer to the string-ending null character if the string has no 'c'.
char *
strfind(const char *s, char c)
{
	for (; *s; s++)
f0130905:	ff 45 08             	incl   0x8(%ebp)
f0130908:	8b 45 08             	mov    0x8(%ebp),%eax
f013090b:	8a 00                	mov    (%eax),%al
f013090d:	84 c0                	test   %al,%al
f013090f:	75 ea                	jne    f01308fb <strfind+0xe>
f0130911:	eb 01                	jmp    f0130914 <strfind+0x27>
		if (*s == c)
			break;
f0130913:	90                   	nop
	return (char *) s;
f0130914:	8b 45 08             	mov    0x8(%ebp),%eax
}
f0130917:	c9                   	leave  
f0130918:	c3                   	ret    

f0130919 <memset>:


void *
memset(void *v, int c, uint32 n)
{
f0130919:	55                   	push   %ebp
f013091a:	89 e5                	mov    %esp,%ebp
f013091c:	83 ec 10             	sub    $0x10,%esp
	char *p;
	int m;

	p = v;
f013091f:	8b 45 08             	mov    0x8(%ebp),%eax
f0130922:	89 45 fc             	mov    %eax,-0x4(%ebp)
	m = n;
f0130925:	8b 45 10             	mov    0x10(%ebp),%eax
f0130928:	89 45 f8             	mov    %eax,-0x8(%ebp)
	while (--m >= 0)
f013092b:	eb 0e                	jmp    f013093b <memset+0x22>
		*p++ = c;
f013092d:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0130930:	8d 50 01             	lea    0x1(%eax),%edx
f0130933:	89 55 fc             	mov    %edx,-0x4(%ebp)
f0130936:	8b 55 0c             	mov    0xc(%ebp),%edx
f0130939:	88 10                	mov    %dl,(%eax)
	char *p;
	int m;

	p = v;
	m = n;
	while (--m >= 0)
f013093b:	ff 4d f8             	decl   -0x8(%ebp)
f013093e:	83 7d f8 00          	cmpl   $0x0,-0x8(%ebp)
f0130942:	79 e9                	jns    f013092d <memset+0x14>
		*p++ = c;

	return v;
f0130944:	8b 45 08             	mov    0x8(%ebp),%eax
}
f0130947:	c9                   	leave  
f0130948:	c3                   	ret    

f0130949 <memcpy>:

void *
memcpy(void *dst, const void *src, uint32 n)
{
f0130949:	55                   	push   %ebp
f013094a:	89 e5                	mov    %esp,%ebp
f013094c:	83 ec 10             	sub    $0x10,%esp
	const char *s;
	char *d;

	s = src;
f013094f:	8b 45 0c             	mov    0xc(%ebp),%eax
f0130952:	89 45 fc             	mov    %eax,-0x4(%ebp)
	d = dst;
f0130955:	8b 45 08             	mov    0x8(%ebp),%eax
f0130958:	89 45 f8             	mov    %eax,-0x8(%ebp)
	while (n-- > 0)
f013095b:	eb 16                	jmp    f0130973 <memcpy+0x2a>
		*d++ = *s++;
f013095d:	8b 45 f8             	mov    -0x8(%ebp),%eax
f0130960:	8d 50 01             	lea    0x1(%eax),%edx
f0130963:	89 55 f8             	mov    %edx,-0x8(%ebp)
f0130966:	8b 55 fc             	mov    -0x4(%ebp),%edx
f0130969:	8d 4a 01             	lea    0x1(%edx),%ecx
f013096c:	89 4d fc             	mov    %ecx,-0x4(%ebp)
f013096f:	8a 12                	mov    (%edx),%dl
f0130971:	88 10                	mov    %dl,(%eax)
	const char *s;
	char *d;

	s = src;
	d = dst;
	while (n-- > 0)
f0130973:	8b 45 10             	mov    0x10(%ebp),%eax
f0130976:	8d 50 ff             	lea    -0x1(%eax),%edx
f0130979:	89 55 10             	mov    %edx,0x10(%ebp)
f013097c:	85 c0                	test   %eax,%eax
f013097e:	75 dd                	jne    f013095d <memcpy+0x14>
		*d++ = *s++;

	return dst;
f0130980:	8b 45 08             	mov    0x8(%ebp),%eax
}
f0130983:	c9                   	leave  
f0130984:	c3                   	ret    

f0130985 <memmove>:

void *
memmove(void *dst, const void *src, uint32 n)
{
f0130985:	55                   	push   %ebp
f0130986:	89 e5                	mov    %esp,%ebp
f0130988:	83 ec 10             	sub    $0x10,%esp
	const char *s;
	char *d;

	s = src;
f013098b:	8b 45 0c             	mov    0xc(%ebp),%eax
f013098e:	89 45 fc             	mov    %eax,-0x4(%ebp)
	d = dst;
f0130991:	8b 45 08             	mov    0x8(%ebp),%eax
f0130994:	89 45 f8             	mov    %eax,-0x8(%ebp)
	if (s < d && s + n > d) {
f0130997:	8b 45 fc             	mov    -0x4(%ebp),%eax
f013099a:	3b 45 f8             	cmp    -0x8(%ebp),%eax
f013099d:	73 50                	jae    f01309ef <memmove+0x6a>
f013099f:	8b 55 fc             	mov    -0x4(%ebp),%edx
f01309a2:	8b 45 10             	mov    0x10(%ebp),%eax
f01309a5:	01 d0                	add    %edx,%eax
f01309a7:	3b 45 f8             	cmp    -0x8(%ebp),%eax
f01309aa:	76 43                	jbe    f01309ef <memmove+0x6a>
		s += n;
f01309ac:	8b 45 10             	mov    0x10(%ebp),%eax
f01309af:	01 45 fc             	add    %eax,-0x4(%ebp)
		d += n;
f01309b2:	8b 45 10             	mov    0x10(%ebp),%eax
f01309b5:	01 45 f8             	add    %eax,-0x8(%ebp)
		while (n-- > 0)
f01309b8:	eb 10                	jmp    f01309ca <memmove+0x45>
			*--d = *--s;
f01309ba:	ff 4d f8             	decl   -0x8(%ebp)
f01309bd:	ff 4d fc             	decl   -0x4(%ebp)
f01309c0:	8b 45 fc             	mov    -0x4(%ebp),%eax
f01309c3:	8a 10                	mov    (%eax),%dl
f01309c5:	8b 45 f8             	mov    -0x8(%ebp),%eax
f01309c8:	88 10                	mov    %dl,(%eax)
	s = src;
	d = dst;
	if (s < d && s + n > d) {
		s += n;
		d += n;
		while (n-- > 0)
f01309ca:	8b 45 10             	mov    0x10(%ebp),%eax
f01309cd:	8d 50 ff             	lea    -0x1(%eax),%edx
f01309d0:	89 55 10             	mov    %edx,0x10(%ebp)
f01309d3:	85 c0                	test   %eax,%eax
f01309d5:	75 e3                	jne    f01309ba <memmove+0x35>
	const char *s;
	char *d;

	s = src;
	d = dst;
	if (s < d && s + n > d) {
f01309d7:	eb 23                	jmp    f01309fc <memmove+0x77>
		d += n;
		while (n-- > 0)
			*--d = *--s;
	} else
		while (n-- > 0)
			*d++ = *s++;
f01309d9:	8b 45 f8             	mov    -0x8(%ebp),%eax
f01309dc:	8d 50 01             	lea    0x1(%eax),%edx
f01309df:	89 55 f8             	mov    %edx,-0x8(%ebp)
f01309e2:	8b 55 fc             	mov    -0x4(%ebp),%edx
f01309e5:	8d 4a 01             	lea    0x1(%edx),%ecx
f01309e8:	89 4d fc             	mov    %ecx,-0x4(%ebp)
f01309eb:	8a 12                	mov    (%edx),%dl
f01309ed:	88 10                	mov    %dl,(%eax)
		s += n;
		d += n;
		while (n-- > 0)
			*--d = *--s;
	} else
		while (n-- > 0)
f01309ef:	8b 45 10             	mov    0x10(%ebp),%eax
f01309f2:	8d 50 ff             	lea    -0x1(%eax),%edx
f01309f5:	89 55 10             	mov    %edx,0x10(%ebp)
f01309f8:	85 c0                	test   %eax,%eax
f01309fa:	75 dd                	jne    f01309d9 <memmove+0x54>
			*d++ = *s++;

	return dst;
f01309fc:	8b 45 08             	mov    0x8(%ebp),%eax
}
f01309ff:	c9                   	leave  
f0130a00:	c3                   	ret    

f0130a01 <memcmp>:

int
memcmp(const void *v1, const void *v2, uint32 n)
{
f0130a01:	55                   	push   %ebp
f0130a02:	89 e5                	mov    %esp,%ebp
f0130a04:	83 ec 10             	sub    $0x10,%esp
	const uint8 *s1 = (const uint8 *) v1;
f0130a07:	8b 45 08             	mov    0x8(%ebp),%eax
f0130a0a:	89 45 fc             	mov    %eax,-0x4(%ebp)
	const uint8 *s2 = (const uint8 *) v2;
f0130a0d:	8b 45 0c             	mov    0xc(%ebp),%eax
f0130a10:	89 45 f8             	mov    %eax,-0x8(%ebp)

	while (n-- > 0) {
f0130a13:	eb 2a                	jmp    f0130a3f <memcmp+0x3e>
		if (*s1 != *s2)
f0130a15:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0130a18:	8a 10                	mov    (%eax),%dl
f0130a1a:	8b 45 f8             	mov    -0x8(%ebp),%eax
f0130a1d:	8a 00                	mov    (%eax),%al
f0130a1f:	38 c2                	cmp    %al,%dl
f0130a21:	74 16                	je     f0130a39 <memcmp+0x38>
			return (int) *s1 - (int) *s2;
f0130a23:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0130a26:	8a 00                	mov    (%eax),%al
f0130a28:	0f b6 d0             	movzbl %al,%edx
f0130a2b:	8b 45 f8             	mov    -0x8(%ebp),%eax
f0130a2e:	8a 00                	mov    (%eax),%al
f0130a30:	0f b6 c0             	movzbl %al,%eax
f0130a33:	29 c2                	sub    %eax,%edx
f0130a35:	89 d0                	mov    %edx,%eax
f0130a37:	eb 18                	jmp    f0130a51 <memcmp+0x50>
		s1++, s2++;
f0130a39:	ff 45 fc             	incl   -0x4(%ebp)
f0130a3c:	ff 45 f8             	incl   -0x8(%ebp)
memcmp(const void *v1, const void *v2, uint32 n)
{
	const uint8 *s1 = (const uint8 *) v1;
	const uint8 *s2 = (const uint8 *) v2;

	while (n-- > 0) {
f0130a3f:	8b 45 10             	mov    0x10(%ebp),%eax
f0130a42:	8d 50 ff             	lea    -0x1(%eax),%edx
f0130a45:	89 55 10             	mov    %edx,0x10(%ebp)
f0130a48:	85 c0                	test   %eax,%eax
f0130a4a:	75 c9                	jne    f0130a15 <memcmp+0x14>
		if (*s1 != *s2)
			return (int) *s1 - (int) *s2;
		s1++, s2++;
	}

	return 0;
f0130a4c:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0130a51:	c9                   	leave  
f0130a52:	c3                   	ret    

f0130a53 <memfind>:

void *
memfind(const void *s, int c, uint32 n)
{
f0130a53:	55                   	push   %ebp
f0130a54:	89 e5                	mov    %esp,%ebp
f0130a56:	83 ec 10             	sub    $0x10,%esp
	const void *ends = (const char *) s + n;
f0130a59:	8b 55 08             	mov    0x8(%ebp),%edx
f0130a5c:	8b 45 10             	mov    0x10(%ebp),%eax
f0130a5f:	01 d0                	add    %edx,%eax
f0130a61:	89 45 fc             	mov    %eax,-0x4(%ebp)
	for (; s < ends; s++)
f0130a64:	eb 15                	jmp    f0130a7b <memfind+0x28>
		if (*(const unsigned char *) s == (unsigned char) c)
f0130a66:	8b 45 08             	mov    0x8(%ebp),%eax
f0130a69:	8a 00                	mov    (%eax),%al
f0130a6b:	0f b6 d0             	movzbl %al,%edx
f0130a6e:	8b 45 0c             	mov    0xc(%ebp),%eax
f0130a71:	0f b6 c0             	movzbl %al,%eax
f0130a74:	39 c2                	cmp    %eax,%edx
f0130a76:	74 0d                	je     f0130a85 <memfind+0x32>

void *
memfind(const void *s, int c, uint32 n)
{
	const void *ends = (const char *) s + n;
	for (; s < ends; s++)
f0130a78:	ff 45 08             	incl   0x8(%ebp)
f0130a7b:	8b 45 08             	mov    0x8(%ebp),%eax
f0130a7e:	3b 45 fc             	cmp    -0x4(%ebp),%eax
f0130a81:	72 e3                	jb     f0130a66 <memfind+0x13>
f0130a83:	eb 01                	jmp    f0130a86 <memfind+0x33>
		if (*(const unsigned char *) s == (unsigned char) c)
			break;
f0130a85:	90                   	nop
	return (void *) s;
f0130a86:	8b 45 08             	mov    0x8(%ebp),%eax
}
f0130a89:	c9                   	leave  
f0130a8a:	c3                   	ret    

f0130a8b <strtol>:

long
strtol(const char *s, char **endptr, int base)
{
f0130a8b:	55                   	push   %ebp
f0130a8c:	89 e5                	mov    %esp,%ebp
f0130a8e:	83 ec 10             	sub    $0x10,%esp
	int neg = 0;
f0130a91:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
	long val = 0;
f0130a98:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)

	// gobble initial whitespace
	while (*s == ' ' || *s == '\t')
f0130a9f:	eb 03                	jmp    f0130aa4 <strtol+0x19>
		s++;
f0130aa1:	ff 45 08             	incl   0x8(%ebp)
{
	int neg = 0;
	long val = 0;

	// gobble initial whitespace
	while (*s == ' ' || *s == '\t')
f0130aa4:	8b 45 08             	mov    0x8(%ebp),%eax
f0130aa7:	8a 00                	mov    (%eax),%al
f0130aa9:	3c 20                	cmp    $0x20,%al
f0130aab:	74 f4                	je     f0130aa1 <strtol+0x16>
f0130aad:	8b 45 08             	mov    0x8(%ebp),%eax
f0130ab0:	8a 00                	mov    (%eax),%al
f0130ab2:	3c 09                	cmp    $0x9,%al
f0130ab4:	74 eb                	je     f0130aa1 <strtol+0x16>
		s++;

	// plus/minus sign
	if (*s == '+')
f0130ab6:	8b 45 08             	mov    0x8(%ebp),%eax
f0130ab9:	8a 00                	mov    (%eax),%al
f0130abb:	3c 2b                	cmp    $0x2b,%al
f0130abd:	75 05                	jne    f0130ac4 <strtol+0x39>
		s++;
f0130abf:	ff 45 08             	incl   0x8(%ebp)
f0130ac2:	eb 13                	jmp    f0130ad7 <strtol+0x4c>
	else if (*s == '-')
f0130ac4:	8b 45 08             	mov    0x8(%ebp),%eax
f0130ac7:	8a 00                	mov    (%eax),%al
f0130ac9:	3c 2d                	cmp    $0x2d,%al
f0130acb:	75 0a                	jne    f0130ad7 <strtol+0x4c>
		s++, neg = 1;
f0130acd:	ff 45 08             	incl   0x8(%ebp)
f0130ad0:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%ebp)

	// hex or octal base prefix
	if ((base == 0 || base == 16) && (s[0] == '0' && s[1] == 'x'))
f0130ad7:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
f0130adb:	74 06                	je     f0130ae3 <strtol+0x58>
f0130add:	83 7d 10 10          	cmpl   $0x10,0x10(%ebp)
f0130ae1:	75 20                	jne    f0130b03 <strtol+0x78>
f0130ae3:	8b 45 08             	mov    0x8(%ebp),%eax
f0130ae6:	8a 00                	mov    (%eax),%al
f0130ae8:	3c 30                	cmp    $0x30,%al
f0130aea:	75 17                	jne    f0130b03 <strtol+0x78>
f0130aec:	8b 45 08             	mov    0x8(%ebp),%eax
f0130aef:	40                   	inc    %eax
f0130af0:	8a 00                	mov    (%eax),%al
f0130af2:	3c 78                	cmp    $0x78,%al
f0130af4:	75 0d                	jne    f0130b03 <strtol+0x78>
		s += 2, base = 16;
f0130af6:	83 45 08 02          	addl   $0x2,0x8(%ebp)
f0130afa:	c7 45 10 10 00 00 00 	movl   $0x10,0x10(%ebp)
f0130b01:	eb 28                	jmp    f0130b2b <strtol+0xa0>
	else if (base == 0 && s[0] == '0')
f0130b03:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
f0130b07:	75 15                	jne    f0130b1e <strtol+0x93>
f0130b09:	8b 45 08             	mov    0x8(%ebp),%eax
f0130b0c:	8a 00                	mov    (%eax),%al
f0130b0e:	3c 30                	cmp    $0x30,%al
f0130b10:	75 0c                	jne    f0130b1e <strtol+0x93>
		s++, base = 8;
f0130b12:	ff 45 08             	incl   0x8(%ebp)
f0130b15:	c7 45 10 08 00 00 00 	movl   $0x8,0x10(%ebp)
f0130b1c:	eb 0d                	jmp    f0130b2b <strtol+0xa0>
	else if (base == 0)
f0130b1e:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
f0130b22:	75 07                	jne    f0130b2b <strtol+0xa0>
		base = 10;
f0130b24:	c7 45 10 0a 00 00 00 	movl   $0xa,0x10(%ebp)

	// digits
	while (1) {
		int dig;

		if (*s >= '0' && *s <= '9')
f0130b2b:	8b 45 08             	mov    0x8(%ebp),%eax
f0130b2e:	8a 00                	mov    (%eax),%al
f0130b30:	3c 2f                	cmp    $0x2f,%al
f0130b32:	7e 19                	jle    f0130b4d <strtol+0xc2>
f0130b34:	8b 45 08             	mov    0x8(%ebp),%eax
f0130b37:	8a 00                	mov    (%eax),%al
f0130b39:	3c 39                	cmp    $0x39,%al
f0130b3b:	7f 10                	jg     f0130b4d <strtol+0xc2>
			dig = *s - '0';
f0130b3d:	8b 45 08             	mov    0x8(%ebp),%eax
f0130b40:	8a 00                	mov    (%eax),%al
f0130b42:	0f be c0             	movsbl %al,%eax
f0130b45:	83 e8 30             	sub    $0x30,%eax
f0130b48:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0130b4b:	eb 42                	jmp    f0130b8f <strtol+0x104>
		else if (*s >= 'a' && *s <= 'z')
f0130b4d:	8b 45 08             	mov    0x8(%ebp),%eax
f0130b50:	8a 00                	mov    (%eax),%al
f0130b52:	3c 60                	cmp    $0x60,%al
f0130b54:	7e 19                	jle    f0130b6f <strtol+0xe4>
f0130b56:	8b 45 08             	mov    0x8(%ebp),%eax
f0130b59:	8a 00                	mov    (%eax),%al
f0130b5b:	3c 7a                	cmp    $0x7a,%al
f0130b5d:	7f 10                	jg     f0130b6f <strtol+0xe4>
			dig = *s - 'a' + 10;
f0130b5f:	8b 45 08             	mov    0x8(%ebp),%eax
f0130b62:	8a 00                	mov    (%eax),%al
f0130b64:	0f be c0             	movsbl %al,%eax
f0130b67:	83 e8 57             	sub    $0x57,%eax
f0130b6a:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0130b6d:	eb 20                	jmp    f0130b8f <strtol+0x104>
		else if (*s >= 'A' && *s <= 'Z')
f0130b6f:	8b 45 08             	mov    0x8(%ebp),%eax
f0130b72:	8a 00                	mov    (%eax),%al
f0130b74:	3c 40                	cmp    $0x40,%al
f0130b76:	7e 39                	jle    f0130bb1 <strtol+0x126>
f0130b78:	8b 45 08             	mov    0x8(%ebp),%eax
f0130b7b:	8a 00                	mov    (%eax),%al
f0130b7d:	3c 5a                	cmp    $0x5a,%al
f0130b7f:	7f 30                	jg     f0130bb1 <strtol+0x126>
			dig = *s - 'A' + 10;
f0130b81:	8b 45 08             	mov    0x8(%ebp),%eax
f0130b84:	8a 00                	mov    (%eax),%al
f0130b86:	0f be c0             	movsbl %al,%eax
f0130b89:	83 e8 37             	sub    $0x37,%eax
f0130b8c:	89 45 f4             	mov    %eax,-0xc(%ebp)
		else
			break;
		if (dig >= base)
f0130b8f:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0130b92:	3b 45 10             	cmp    0x10(%ebp),%eax
f0130b95:	7d 19                	jge    f0130bb0 <strtol+0x125>
			break;
		s++, val = (val * base) + dig;
f0130b97:	ff 45 08             	incl   0x8(%ebp)
f0130b9a:	8b 45 f8             	mov    -0x8(%ebp),%eax
f0130b9d:	0f af 45 10          	imul   0x10(%ebp),%eax
f0130ba1:	89 c2                	mov    %eax,%edx
f0130ba3:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0130ba6:	01 d0                	add    %edx,%eax
f0130ba8:	89 45 f8             	mov    %eax,-0x8(%ebp)
		// we don't properly detect overflow!
	}
f0130bab:	e9 7b ff ff ff       	jmp    f0130b2b <strtol+0xa0>
		else if (*s >= 'A' && *s <= 'Z')
			dig = *s - 'A' + 10;
		else
			break;
		if (dig >= base)
			break;
f0130bb0:	90                   	nop
		s++, val = (val * base) + dig;
		// we don't properly detect overflow!
	}

	if (endptr)
f0130bb1:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
f0130bb5:	74 08                	je     f0130bbf <strtol+0x134>
		*endptr = (char *) s;
f0130bb7:	8b 45 0c             	mov    0xc(%ebp),%eax
f0130bba:	8b 55 08             	mov    0x8(%ebp),%edx
f0130bbd:	89 10                	mov    %edx,(%eax)
	return (neg ? -val : val);
f0130bbf:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
f0130bc3:	74 07                	je     f0130bcc <strtol+0x141>
f0130bc5:	8b 45 f8             	mov    -0x8(%ebp),%eax
f0130bc8:	f7 d8                	neg    %eax
f0130bca:	eb 03                	jmp    f0130bcf <strtol+0x144>
f0130bcc:	8b 45 f8             	mov    -0x8(%ebp),%eax
}
f0130bcf:	c9                   	leave  
f0130bd0:	c3                   	ret    

f0130bd1 <ltostr>:

void
ltostr(long value, char *str)
{
f0130bd1:	55                   	push   %ebp
f0130bd2:	89 e5                	mov    %esp,%ebp
f0130bd4:	83 ec 20             	sub    $0x20,%esp
	int neg = 0;
f0130bd7:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
	int s = 0 ;
f0130bde:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)

	// plus/minus sign
	if (value < 0)
f0130be5:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0130be9:	79 13                	jns    f0130bfe <ltostr+0x2d>
	{
		neg = 1;
f0130beb:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%ebp)
		str[0] = '-';
f0130bf2:	8b 45 0c             	mov    0xc(%ebp),%eax
f0130bf5:	c6 00 2d             	movb   $0x2d,(%eax)
		value = value * -1 ;
f0130bf8:	f7 5d 08             	negl   0x8(%ebp)
		s++ ;
f0130bfb:	ff 45 f8             	incl   -0x8(%ebp)
	}
	do
	{
		int mod = value % 10 ;
f0130bfe:	8b 45 08             	mov    0x8(%ebp),%eax
f0130c01:	b9 0a 00 00 00       	mov    $0xa,%ecx
f0130c06:	99                   	cltd   
f0130c07:	f7 f9                	idiv   %ecx
f0130c09:	89 55 ec             	mov    %edx,-0x14(%ebp)
		str[s++] = mod + '0' ;
f0130c0c:	8b 45 f8             	mov    -0x8(%ebp),%eax
f0130c0f:	8d 50 01             	lea    0x1(%eax),%edx
f0130c12:	89 55 f8             	mov    %edx,-0x8(%ebp)
f0130c15:	89 c2                	mov    %eax,%edx
f0130c17:	8b 45 0c             	mov    0xc(%ebp),%eax
f0130c1a:	01 d0                	add    %edx,%eax
f0130c1c:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0130c1f:	83 c2 30             	add    $0x30,%edx
f0130c22:	88 10                	mov    %dl,(%eax)
		value = value / 10 ;
f0130c24:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0130c27:	b8 67 66 66 66       	mov    $0x66666667,%eax
f0130c2c:	f7 e9                	imul   %ecx
f0130c2e:	c1 fa 02             	sar    $0x2,%edx
f0130c31:	89 c8                	mov    %ecx,%eax
f0130c33:	c1 f8 1f             	sar    $0x1f,%eax
f0130c36:	29 c2                	sub    %eax,%edx
f0130c38:	89 d0                	mov    %edx,%eax
f0130c3a:	89 45 08             	mov    %eax,0x8(%ebp)
	} while (value % 10 != 0);
f0130c3d:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0130c40:	b8 67 66 66 66       	mov    $0x66666667,%eax
f0130c45:	f7 e9                	imul   %ecx
f0130c47:	c1 fa 02             	sar    $0x2,%edx
f0130c4a:	89 c8                	mov    %ecx,%eax
f0130c4c:	c1 f8 1f             	sar    $0x1f,%eax
f0130c4f:	29 c2                	sub    %eax,%edx
f0130c51:	89 d0                	mov    %edx,%eax
f0130c53:	c1 e0 02             	shl    $0x2,%eax
f0130c56:	01 d0                	add    %edx,%eax
f0130c58:	01 c0                	add    %eax,%eax
f0130c5a:	29 c1                	sub    %eax,%ecx
f0130c5c:	89 ca                	mov    %ecx,%edx
f0130c5e:	85 d2                	test   %edx,%edx
f0130c60:	75 9c                	jne    f0130bfe <ltostr+0x2d>

	//reverse the string
	int start = 0 ;
f0130c62:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	int end = s-1 ;
f0130c69:	8b 45 f8             	mov    -0x8(%ebp),%eax
f0130c6c:	48                   	dec    %eax
f0130c6d:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (neg)
f0130c70:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
f0130c74:	74 3d                	je     f0130cb3 <ltostr+0xe2>
		start = 1 ;
f0130c76:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
	while(start<end)
f0130c7d:	eb 34                	jmp    f0130cb3 <ltostr+0xe2>
	{
		char tmp = str[start] ;
f0130c7f:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0130c82:	8b 45 0c             	mov    0xc(%ebp),%eax
f0130c85:	01 d0                	add    %edx,%eax
f0130c87:	8a 00                	mov    (%eax),%al
f0130c89:	88 45 eb             	mov    %al,-0x15(%ebp)
		str[start] = str[end] ;
f0130c8c:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0130c8f:	8b 45 0c             	mov    0xc(%ebp),%eax
f0130c92:	01 c2                	add    %eax,%edx
f0130c94:	8b 4d f0             	mov    -0x10(%ebp),%ecx
f0130c97:	8b 45 0c             	mov    0xc(%ebp),%eax
f0130c9a:	01 c8                	add    %ecx,%eax
f0130c9c:	8a 00                	mov    (%eax),%al
f0130c9e:	88 02                	mov    %al,(%edx)
		str[end] = tmp;
f0130ca0:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0130ca3:	8b 45 0c             	mov    0xc(%ebp),%eax
f0130ca6:	01 c2                	add    %eax,%edx
f0130ca8:	8a 45 eb             	mov    -0x15(%ebp),%al
f0130cab:	88 02                	mov    %al,(%edx)
		start++ ;
f0130cad:	ff 45 f4             	incl   -0xc(%ebp)
		end-- ;
f0130cb0:	ff 4d f0             	decl   -0x10(%ebp)
	//reverse the string
	int start = 0 ;
	int end = s-1 ;
	if (neg)
		start = 1 ;
	while(start<end)
f0130cb3:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0130cb6:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0130cb9:	7c c4                	jl     f0130c7f <ltostr+0xae>
		str[end] = tmp;
		start++ ;
		end-- ;
	}

	str[s] = 0 ;
f0130cbb:	8b 55 f8             	mov    -0x8(%ebp),%edx
f0130cbe:	8b 45 0c             	mov    0xc(%ebp),%eax
f0130cc1:	01 d0                	add    %edx,%eax
f0130cc3:	c6 00 00             	movb   $0x0,(%eax)
	// we don't properly detect overflow!

}
f0130cc6:	90                   	nop
f0130cc7:	c9                   	leave  
f0130cc8:	c3                   	ret    

f0130cc9 <strcconcat>:

void
strcconcat(const char *str1, const char *str2, char *final)
{
f0130cc9:	55                   	push   %ebp
f0130cca:	89 e5                	mov    %esp,%ebp
f0130ccc:	83 ec 10             	sub    $0x10,%esp
	int len1 = strlen(str1);
f0130ccf:	ff 75 08             	pushl  0x8(%ebp)
f0130cd2:	e8 54 fa ff ff       	call   f013072b <strlen>
f0130cd7:	83 c4 04             	add    $0x4,%esp
f0130cda:	89 45 f4             	mov    %eax,-0xc(%ebp)
	int len2 = strlen(str2);
f0130cdd:	ff 75 0c             	pushl  0xc(%ebp)
f0130ce0:	e8 46 fa ff ff       	call   f013072b <strlen>
f0130ce5:	83 c4 04             	add    $0x4,%esp
f0130ce8:	89 45 f0             	mov    %eax,-0x10(%ebp)
	int s = 0 ;
f0130ceb:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
	for (s=0 ; s < len1 ; s++)
f0130cf2:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
f0130cf9:	eb 17                	jmp    f0130d12 <strcconcat+0x49>
		final[s] = str1[s] ;
f0130cfb:	8b 55 fc             	mov    -0x4(%ebp),%edx
f0130cfe:	8b 45 10             	mov    0x10(%ebp),%eax
f0130d01:	01 c2                	add    %eax,%edx
f0130d03:	8b 4d fc             	mov    -0x4(%ebp),%ecx
f0130d06:	8b 45 08             	mov    0x8(%ebp),%eax
f0130d09:	01 c8                	add    %ecx,%eax
f0130d0b:	8a 00                	mov    (%eax),%al
f0130d0d:	88 02                	mov    %al,(%edx)
strcconcat(const char *str1, const char *str2, char *final)
{
	int len1 = strlen(str1);
	int len2 = strlen(str2);
	int s = 0 ;
	for (s=0 ; s < len1 ; s++)
f0130d0f:	ff 45 fc             	incl   -0x4(%ebp)
f0130d12:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0130d15:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0130d18:	7c e1                	jl     f0130cfb <strcconcat+0x32>
		final[s] = str1[s] ;

	int i = 0 ;
f0130d1a:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
	for (i=0 ; i < len2 ; i++)
f0130d21:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
f0130d28:	eb 1f                	jmp    f0130d49 <strcconcat+0x80>
		final[s++] = str2[i] ;
f0130d2a:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0130d2d:	8d 50 01             	lea    0x1(%eax),%edx
f0130d30:	89 55 fc             	mov    %edx,-0x4(%ebp)
f0130d33:	89 c2                	mov    %eax,%edx
f0130d35:	8b 45 10             	mov    0x10(%ebp),%eax
f0130d38:	01 c2                	add    %eax,%edx
f0130d3a:	8b 4d f8             	mov    -0x8(%ebp),%ecx
f0130d3d:	8b 45 0c             	mov    0xc(%ebp),%eax
f0130d40:	01 c8                	add    %ecx,%eax
f0130d42:	8a 00                	mov    (%eax),%al
f0130d44:	88 02                	mov    %al,(%edx)
	int s = 0 ;
	for (s=0 ; s < len1 ; s++)
		final[s] = str1[s] ;

	int i = 0 ;
	for (i=0 ; i < len2 ; i++)
f0130d46:	ff 45 f8             	incl   -0x8(%ebp)
f0130d49:	8b 45 f8             	mov    -0x8(%ebp),%eax
f0130d4c:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0130d4f:	7c d9                	jl     f0130d2a <strcconcat+0x61>
		final[s++] = str2[i] ;

	final[s] = 0;
f0130d51:	8b 55 fc             	mov    -0x4(%ebp),%edx
f0130d54:	8b 45 10             	mov    0x10(%ebp),%eax
f0130d57:	01 d0                	add    %edx,%eax
f0130d59:	c6 00 00             	movb   $0x0,(%eax)
}
f0130d5c:	90                   	nop
f0130d5d:	c9                   	leave  
f0130d5e:	c3                   	ret    

f0130d5f <strsplit>:
int strsplit(char *string, char *SPLIT_CHARS, char **argv, int * argc)
{
f0130d5f:	55                   	push   %ebp
f0130d60:	89 e5                	mov    %esp,%ebp
	// Parse the command string into splitchars-separated arguments
	*argc = 0;
f0130d62:	8b 45 14             	mov    0x14(%ebp),%eax
f0130d65:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	(argv)[*argc] = 0;
f0130d6b:	8b 45 14             	mov    0x14(%ebp),%eax
f0130d6e:	8b 00                	mov    (%eax),%eax
f0130d70:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0130d77:	8b 45 10             	mov    0x10(%ebp),%eax
f0130d7a:	01 d0                	add    %edx,%eax
f0130d7c:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	while (1)
	{
		// trim splitchars
		while (*string && strchr(SPLIT_CHARS, *string))
f0130d82:	eb 0c                	jmp    f0130d90 <strsplit+0x31>
			*string++ = 0;
f0130d84:	8b 45 08             	mov    0x8(%ebp),%eax
f0130d87:	8d 50 01             	lea    0x1(%eax),%edx
f0130d8a:	89 55 08             	mov    %edx,0x8(%ebp)
f0130d8d:	c6 00 00             	movb   $0x0,(%eax)
	*argc = 0;
	(argv)[*argc] = 0;
	while (1)
	{
		// trim splitchars
		while (*string && strchr(SPLIT_CHARS, *string))
f0130d90:	8b 45 08             	mov    0x8(%ebp),%eax
f0130d93:	8a 00                	mov    (%eax),%al
f0130d95:	84 c0                	test   %al,%al
f0130d97:	74 18                	je     f0130db1 <strsplit+0x52>
f0130d99:	8b 45 08             	mov    0x8(%ebp),%eax
f0130d9c:	8a 00                	mov    (%eax),%al
f0130d9e:	0f be c0             	movsbl %al,%eax
f0130da1:	50                   	push   %eax
f0130da2:	ff 75 0c             	pushl  0xc(%ebp)
f0130da5:	e8 13 fb ff ff       	call   f01308bd <strchr>
f0130daa:	83 c4 08             	add    $0x8,%esp
f0130dad:	85 c0                	test   %eax,%eax
f0130daf:	75 d3                	jne    f0130d84 <strsplit+0x25>
			*string++ = 0;

		//if the command string is finished, then break the loop
		if (*string == 0)
f0130db1:	8b 45 08             	mov    0x8(%ebp),%eax
f0130db4:	8a 00                	mov    (%eax),%al
f0130db6:	84 c0                	test   %al,%al
f0130db8:	74 5a                	je     f0130e14 <strsplit+0xb5>
			break;

		//check current number of arguments
		if (*argc == MAX_ARGUMENTS-1)
f0130dba:	8b 45 14             	mov    0x14(%ebp),%eax
f0130dbd:	8b 00                	mov    (%eax),%eax
f0130dbf:	83 f8 0f             	cmp    $0xf,%eax
f0130dc2:	75 07                	jne    f0130dcb <strsplit+0x6c>
		{
			return 0;
f0130dc4:	b8 00 00 00 00       	mov    $0x0,%eax
f0130dc9:	eb 66                	jmp    f0130e31 <strsplit+0xd2>
		}

		// save the previous argument and scan past next arg
		(argv)[(*argc)++] = string;
f0130dcb:	8b 45 14             	mov    0x14(%ebp),%eax
f0130dce:	8b 00                	mov    (%eax),%eax
f0130dd0:	8d 48 01             	lea    0x1(%eax),%ecx
f0130dd3:	8b 55 14             	mov    0x14(%ebp),%edx
f0130dd6:	89 0a                	mov    %ecx,(%edx)
f0130dd8:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0130ddf:	8b 45 10             	mov    0x10(%ebp),%eax
f0130de2:	01 c2                	add    %eax,%edx
f0130de4:	8b 45 08             	mov    0x8(%ebp),%eax
f0130de7:	89 02                	mov    %eax,(%edx)
		while (*string && !strchr(SPLIT_CHARS, *string))
f0130de9:	eb 03                	jmp    f0130dee <strsplit+0x8f>
			string++;
f0130deb:	ff 45 08             	incl   0x8(%ebp)
			return 0;
		}

		// save the previous argument and scan past next arg
		(argv)[(*argc)++] = string;
		while (*string && !strchr(SPLIT_CHARS, *string))
f0130dee:	8b 45 08             	mov    0x8(%ebp),%eax
f0130df1:	8a 00                	mov    (%eax),%al
f0130df3:	84 c0                	test   %al,%al
f0130df5:	74 8b                	je     f0130d82 <strsplit+0x23>
f0130df7:	8b 45 08             	mov    0x8(%ebp),%eax
f0130dfa:	8a 00                	mov    (%eax),%al
f0130dfc:	0f be c0             	movsbl %al,%eax
f0130dff:	50                   	push   %eax
f0130e00:	ff 75 0c             	pushl  0xc(%ebp)
f0130e03:	e8 b5 fa ff ff       	call   f01308bd <strchr>
f0130e08:	83 c4 08             	add    $0x8,%esp
f0130e0b:	85 c0                	test   %eax,%eax
f0130e0d:	74 dc                	je     f0130deb <strsplit+0x8c>
			string++;
	}
f0130e0f:	e9 6e ff ff ff       	jmp    f0130d82 <strsplit+0x23>
		while (*string && strchr(SPLIT_CHARS, *string))
			*string++ = 0;

		//if the command string is finished, then break the loop
		if (*string == 0)
			break;
f0130e14:	90                   	nop
		// save the previous argument and scan past next arg
		(argv)[(*argc)++] = string;
		while (*string && !strchr(SPLIT_CHARS, *string))
			string++;
	}
	(argv)[*argc] = 0;
f0130e15:	8b 45 14             	mov    0x14(%ebp),%eax
f0130e18:	8b 00                	mov    (%eax),%eax
f0130e1a:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0130e21:	8b 45 10             	mov    0x10(%ebp),%eax
f0130e24:	01 d0                	add    %edx,%eax
f0130e26:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	return 1 ;
f0130e2c:	b8 01 00 00 00       	mov    $0x1,%eax
}
f0130e31:	c9                   	leave  
f0130e32:	c3                   	ret    

f0130e33 <ide_wait_ready>:
#define IDE_ERR		0x01

static int diskno = 0;

static int ide_wait_ready(bool check_error)
{
f0130e33:	55                   	push   %ebp
f0130e34:	89 e5                	mov    %esp,%ebp
f0130e36:	83 ec 10             	sub    $0x10,%esp
	int r;

	while (((r = inb(0x1F7)) & (IDE_BSY|IDE_DRDY)) != IDE_DRDY)
f0130e39:	90                   	nop
f0130e3a:	c7 45 f8 f7 01 00 00 	movl   $0x1f7,-0x8(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f0130e41:	8b 45 f8             	mov    -0x8(%ebp),%eax
f0130e44:	89 c2                	mov    %eax,%edx
f0130e46:	ec                   	in     (%dx),%al
f0130e47:	88 45 f7             	mov    %al,-0x9(%ebp)
	return data;
f0130e4a:	8a 45 f7             	mov    -0x9(%ebp),%al
f0130e4d:	0f b6 c0             	movzbl %al,%eax
f0130e50:	89 45 fc             	mov    %eax,-0x4(%ebp)
f0130e53:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0130e56:	25 c0 00 00 00       	and    $0xc0,%eax
f0130e5b:	83 f8 40             	cmp    $0x40,%eax
f0130e5e:	75 da                	jne    f0130e3a <ide_wait_ready+0x7>
		/* do nothing */;


	if (check_error && (r & (IDE_DF|IDE_ERR)) != 0)
f0130e60:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0130e64:	74 11                	je     f0130e77 <ide_wait_ready+0x44>
f0130e66:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0130e69:	83 e0 21             	and    $0x21,%eax
f0130e6c:	85 c0                	test   %eax,%eax
f0130e6e:	74 07                	je     f0130e77 <ide_wait_ready+0x44>
	{
 		LOG_STATMENT(cprintf("ERROR @ ide_wait_ready() = %x(%d)\n",r,r););
		return -1;
f0130e70:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
f0130e75:	eb 05                	jmp    f0130e7c <ide_wait_ready+0x49>
	}
	return 0;
f0130e77:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0130e7c:	c9                   	leave  
f0130e7d:	c3                   	ret    

f0130e7e <ide_read>:

int	ide_read(uint32 secno, void *dst, uint32 nsecs)
{
f0130e7e:	55                   	push   %ebp
f0130e7f:	89 e5                	mov    %esp,%ebp
f0130e81:	57                   	push   %edi
f0130e82:	53                   	push   %ebx
f0130e83:	83 ec 30             	sub    $0x30,%esp
	int r;

	assert(nsecs <= 256);
f0130e86:	81 7d 10 00 01 00 00 	cmpl   $0x100,0x10(%ebp)
f0130e8d:	76 16                	jbe    f0130ea5 <ide_read+0x27>
f0130e8f:	68 a3 c8 13 f0       	push   $0xf013c8a3
f0130e94:	68 b0 c8 13 f0       	push   $0xf013c8b0
f0130e99:	6a 25                	push   $0x25
f0130e9b:	68 c5 c8 13 f0       	push   $0xf013c8c5
f0130ea0:	e8 01 f3 fc ff       	call   f01001a6 <_panic>

	ide_wait_ready(0);
f0130ea5:	83 ec 0c             	sub    $0xc,%esp
f0130ea8:	6a 00                	push   $0x0
f0130eaa:	e8 84 ff ff ff       	call   f0130e33 <ide_wait_ready>
f0130eaf:	83 c4 10             	add    $0x10,%esp

	outb(0x1F2, nsecs);
f0130eb2:	8b 45 10             	mov    0x10(%ebp),%eax
f0130eb5:	0f b6 c0             	movzbl %al,%eax
f0130eb8:	c7 45 f0 f2 01 00 00 	movl   $0x1f2,-0x10(%ebp)
f0130ebf:	88 45 d2             	mov    %al,-0x2e(%ebp)
}

static __inline void
outb(int port, uint8 data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
f0130ec2:	8a 45 d2             	mov    -0x2e(%ebp),%al
f0130ec5:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0130ec8:	ee                   	out    %al,(%dx)
	outb(0x1F3, secno & 0xFF);
f0130ec9:	8b 45 08             	mov    0x8(%ebp),%eax
f0130ecc:	0f b6 c0             	movzbl %al,%eax
f0130ecf:	c7 45 ec f3 01 00 00 	movl   $0x1f3,-0x14(%ebp)
f0130ed6:	88 45 d3             	mov    %al,-0x2d(%ebp)
f0130ed9:	8a 45 d3             	mov    -0x2d(%ebp),%al
f0130edc:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0130edf:	ee                   	out    %al,(%dx)
	outb(0x1F4, (secno >> 8) & 0xFF);
f0130ee0:	8b 45 08             	mov    0x8(%ebp),%eax
f0130ee3:	c1 e8 08             	shr    $0x8,%eax
f0130ee6:	0f b6 c0             	movzbl %al,%eax
f0130ee9:	c7 45 e8 f4 01 00 00 	movl   $0x1f4,-0x18(%ebp)
f0130ef0:	88 45 d4             	mov    %al,-0x2c(%ebp)
f0130ef3:	8a 45 d4             	mov    -0x2c(%ebp),%al
f0130ef6:	8b 55 e8             	mov    -0x18(%ebp),%edx
f0130ef9:	ee                   	out    %al,(%dx)
	outb(0x1F5, (secno >> 16) & 0xFF);
f0130efa:	8b 45 08             	mov    0x8(%ebp),%eax
f0130efd:	c1 e8 10             	shr    $0x10,%eax
f0130f00:	0f b6 c0             	movzbl %al,%eax
f0130f03:	c7 45 e4 f5 01 00 00 	movl   $0x1f5,-0x1c(%ebp)
f0130f0a:	88 45 d5             	mov    %al,-0x2b(%ebp)
f0130f0d:	8a 45 d5             	mov    -0x2b(%ebp),%al
f0130f10:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f0130f13:	ee                   	out    %al,(%dx)
	outb(0x1F6, 0xE0 | ((diskno&1)<<4) | ((secno>>24)&0x0F));
f0130f14:	a1 ac 8a 65 f0       	mov    0xf0658aac,%eax
f0130f19:	83 e0 01             	and    $0x1,%eax
f0130f1c:	c1 e0 04             	shl    $0x4,%eax
f0130f1f:	88 c2                	mov    %al,%dl
f0130f21:	8b 45 08             	mov    0x8(%ebp),%eax
f0130f24:	c1 e8 18             	shr    $0x18,%eax
f0130f27:	83 e0 0f             	and    $0xf,%eax
f0130f2a:	09 d0                	or     %edx,%eax
f0130f2c:	83 c8 e0             	or     $0xffffffe0,%eax
f0130f2f:	0f b6 c0             	movzbl %al,%eax
f0130f32:	c7 45 e0 f6 01 00 00 	movl   $0x1f6,-0x20(%ebp)
f0130f39:	88 45 d6             	mov    %al,-0x2a(%ebp)
f0130f3c:	8a 45 d6             	mov    -0x2a(%ebp),%al
f0130f3f:	8b 55 e0             	mov    -0x20(%ebp),%edx
f0130f42:	ee                   	out    %al,(%dx)
f0130f43:	c7 45 d8 f7 01 00 00 	movl   $0x1f7,-0x28(%ebp)
f0130f4a:	c6 45 d7 20          	movb   $0x20,-0x29(%ebp)
f0130f4e:	8a 45 d7             	mov    -0x29(%ebp),%al
f0130f51:	8b 55 d8             	mov    -0x28(%ebp),%edx
f0130f54:	ee                   	out    %al,(%dx)
	outb(0x1F7, 0x20);	// CMD 0x20 means read sector

	for (; nsecs > 0; nsecs--, dst += SECTSIZE) {
f0130f55:	eb 55                	jmp    f0130fac <ide_read+0x12e>
		if ((r = ide_wait_ready(1)) < 0)
f0130f57:	83 ec 0c             	sub    $0xc,%esp
f0130f5a:	6a 01                	push   $0x1
f0130f5c:	e8 d2 fe ff ff       	call   f0130e33 <ide_wait_ready>
f0130f61:	83 c4 10             	add    $0x10,%esp
f0130f64:	89 45 dc             	mov    %eax,-0x24(%ebp)
f0130f67:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f0130f6b:	79 05                	jns    f0130f72 <ide_read+0xf4>
			return r;
f0130f6d:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0130f70:	eb 45                	jmp    f0130fb7 <ide_read+0x139>
f0130f72:	c7 45 f4 f0 01 00 00 	movl   $0x1f0,-0xc(%ebp)
f0130f79:	8b 45 0c             	mov    0xc(%ebp),%eax
f0130f7c:	89 45 cc             	mov    %eax,-0x34(%ebp)
f0130f7f:	c7 45 c8 80 00 00 00 	movl   $0x80,-0x38(%ebp)
}

static __inline void
insl(int port, void *addr, int cnt)
{
	__asm __volatile("cld\n\trepne\n\tinsl"			:
f0130f86:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0130f89:	8b 4d cc             	mov    -0x34(%ebp),%ecx
f0130f8c:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0130f8f:	89 cb                	mov    %ecx,%ebx
f0130f91:	89 df                	mov    %ebx,%edi
f0130f93:	89 c1                	mov    %eax,%ecx
f0130f95:	fc                   	cld    
f0130f96:	f2 6d                	repnz insl (%dx),%es:(%edi)
f0130f98:	89 c8                	mov    %ecx,%eax
f0130f9a:	89 fb                	mov    %edi,%ebx
f0130f9c:	89 5d cc             	mov    %ebx,-0x34(%ebp)
f0130f9f:	89 45 c8             	mov    %eax,-0x38(%ebp)
	outb(0x1F4, (secno >> 8) & 0xFF);
	outb(0x1F5, (secno >> 16) & 0xFF);
	outb(0x1F6, 0xE0 | ((diskno&1)<<4) | ((secno>>24)&0x0F));
	outb(0x1F7, 0x20);	// CMD 0x20 means read sector

	for (; nsecs > 0; nsecs--, dst += SECTSIZE) {
f0130fa2:	ff 4d 10             	decl   0x10(%ebp)
f0130fa5:	81 45 0c 00 02 00 00 	addl   $0x200,0xc(%ebp)
f0130fac:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
f0130fb0:	75 a5                	jne    f0130f57 <ide_read+0xd9>
		if ((r = ide_wait_ready(1)) < 0)
			return r;
		insl(0x1F0, dst, SECTSIZE/4);
	}

	return 0;
f0130fb2:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0130fb7:	8d 65 f8             	lea    -0x8(%ebp),%esp
f0130fba:	5b                   	pop    %ebx
f0130fbb:	5f                   	pop    %edi
f0130fbc:	5d                   	pop    %ebp
f0130fbd:	c3                   	ret    

f0130fbe <ide_write>:

int ide_write(uint32 secno, const void *src, uint32 nsecs)
{
f0130fbe:	55                   	push   %ebp
f0130fbf:	89 e5                	mov    %esp,%ebp
f0130fc1:	56                   	push   %esi
f0130fc2:	53                   	push   %ebx
f0130fc3:	83 ec 30             	sub    $0x30,%esp
	int r;

	//LOG_STATMENT(cprintf("1 ==> nsecs = %d\n",nsecs);)
	assert(nsecs <= 256);
f0130fc6:	81 7d 10 00 01 00 00 	cmpl   $0x100,0x10(%ebp)
f0130fcd:	76 16                	jbe    f0130fe5 <ide_write+0x27>
f0130fcf:	68 a3 c8 13 f0       	push   $0xf013c8a3
f0130fd4:	68 b0 c8 13 f0       	push   $0xf013c8b0
f0130fd9:	6a 3e                	push   $0x3e
f0130fdb:	68 c5 c8 13 f0       	push   $0xf013c8c5
f0130fe0:	e8 c1 f1 fc ff       	call   f01001a6 <_panic>

	//LOG_STATMENT(cprintf("2\n");)
	ide_wait_ready(0);
f0130fe5:	83 ec 0c             	sub    $0xc,%esp
f0130fe8:	6a 00                	push   $0x0
f0130fea:	e8 44 fe ff ff       	call   f0130e33 <ide_wait_ready>
f0130fef:	83 c4 10             	add    $0x10,%esp

	//LOG_STATMENT(cprintf("3 ==> nsecs = %d\n",nsecs);)
	outb(0x1F2, nsecs);
f0130ff2:	8b 45 10             	mov    0x10(%ebp),%eax
f0130ff5:	0f b6 c0             	movzbl %al,%eax
f0130ff8:	c7 45 f0 f2 01 00 00 	movl   $0x1f2,-0x10(%ebp)
f0130fff:	88 45 d2             	mov    %al,-0x2e(%ebp)
}

static __inline void
outb(int port, uint8 data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
f0131002:	8a 45 d2             	mov    -0x2e(%ebp),%al
f0131005:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0131008:	ee                   	out    %al,(%dx)
	outb(0x1F3, secno & 0xFF);
f0131009:	8b 45 08             	mov    0x8(%ebp),%eax
f013100c:	0f b6 c0             	movzbl %al,%eax
f013100f:	c7 45 ec f3 01 00 00 	movl   $0x1f3,-0x14(%ebp)
f0131016:	88 45 d3             	mov    %al,-0x2d(%ebp)
f0131019:	8a 45 d3             	mov    -0x2d(%ebp),%al
f013101c:	8b 55 ec             	mov    -0x14(%ebp),%edx
f013101f:	ee                   	out    %al,(%dx)
	outb(0x1F4, (secno >> 8) & 0xFF);
f0131020:	8b 45 08             	mov    0x8(%ebp),%eax
f0131023:	c1 e8 08             	shr    $0x8,%eax
f0131026:	0f b6 c0             	movzbl %al,%eax
f0131029:	c7 45 e8 f4 01 00 00 	movl   $0x1f4,-0x18(%ebp)
f0131030:	88 45 d4             	mov    %al,-0x2c(%ebp)
f0131033:	8a 45 d4             	mov    -0x2c(%ebp),%al
f0131036:	8b 55 e8             	mov    -0x18(%ebp),%edx
f0131039:	ee                   	out    %al,(%dx)
	outb(0x1F5, (secno >> 16) & 0xFF);
f013103a:	8b 45 08             	mov    0x8(%ebp),%eax
f013103d:	c1 e8 10             	shr    $0x10,%eax
f0131040:	0f b6 c0             	movzbl %al,%eax
f0131043:	c7 45 e4 f5 01 00 00 	movl   $0x1f5,-0x1c(%ebp)
f013104a:	88 45 d5             	mov    %al,-0x2b(%ebp)
f013104d:	8a 45 d5             	mov    -0x2b(%ebp),%al
f0131050:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f0131053:	ee                   	out    %al,(%dx)
	outb(0x1F6, 0xE0 | ((diskno&1)<<4) | ((secno>>24)&0x0F));
f0131054:	a1 ac 8a 65 f0       	mov    0xf0658aac,%eax
f0131059:	83 e0 01             	and    $0x1,%eax
f013105c:	c1 e0 04             	shl    $0x4,%eax
f013105f:	88 c2                	mov    %al,%dl
f0131061:	8b 45 08             	mov    0x8(%ebp),%eax
f0131064:	c1 e8 18             	shr    $0x18,%eax
f0131067:	83 e0 0f             	and    $0xf,%eax
f013106a:	09 d0                	or     %edx,%eax
f013106c:	83 c8 e0             	or     $0xffffffe0,%eax
f013106f:	0f b6 c0             	movzbl %al,%eax
f0131072:	c7 45 e0 f6 01 00 00 	movl   $0x1f6,-0x20(%ebp)
f0131079:	88 45 d6             	mov    %al,-0x2a(%ebp)
f013107c:	8a 45 d6             	mov    -0x2a(%ebp),%al
f013107f:	8b 55 e0             	mov    -0x20(%ebp),%edx
f0131082:	ee                   	out    %al,(%dx)
f0131083:	c7 45 d8 f7 01 00 00 	movl   $0x1f7,-0x28(%ebp)
f013108a:	c6 45 d7 30          	movb   $0x30,-0x29(%ebp)
f013108e:	8a 45 d7             	mov    -0x29(%ebp),%al
f0131091:	8b 55 d8             	mov    -0x28(%ebp),%edx
f0131094:	ee                   	out    %al,(%dx)
	outb(0x1F7, 0x30);	// CMD 0x30 means write sector


	for (; nsecs > 0; nsecs--, src += SECTSIZE) {
f0131095:	eb 55                	jmp    f01310ec <ide_write+0x12e>
		if ((r = ide_wait_ready(1)) < 0)
f0131097:	83 ec 0c             	sub    $0xc,%esp
f013109a:	6a 01                	push   $0x1
f013109c:	e8 92 fd ff ff       	call   f0130e33 <ide_wait_ready>
f01310a1:	83 c4 10             	add    $0x10,%esp
f01310a4:	89 45 dc             	mov    %eax,-0x24(%ebp)
f01310a7:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f01310ab:	79 05                	jns    f01310b2 <ide_write+0xf4>
		{
			LOG_STATMENT(cprintf("FAILURE to write %d sectors to disk\n",nsecs););
			return r;
f01310ad:	8b 45 dc             	mov    -0x24(%ebp),%eax
f01310b0:	eb 45                	jmp    f01310f7 <ide_write+0x139>
f01310b2:	c7 45 f4 f0 01 00 00 	movl   $0x1f0,-0xc(%ebp)
f01310b9:	8b 45 0c             	mov    0xc(%ebp),%eax
f01310bc:	89 45 cc             	mov    %eax,-0x34(%ebp)
f01310bf:	c7 45 c8 80 00 00 00 	movl   $0x80,-0x38(%ebp)
}

static __inline void
outsl(int port, const void *addr, int cnt)
{
	__asm __volatile("cld\n\trepne\n\toutsl"		:
f01310c6:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01310c9:	8b 4d cc             	mov    -0x34(%ebp),%ecx
f01310cc:	8b 45 c8             	mov    -0x38(%ebp),%eax
f01310cf:	89 cb                	mov    %ecx,%ebx
f01310d1:	89 de                	mov    %ebx,%esi
f01310d3:	89 c1                	mov    %eax,%ecx
f01310d5:	fc                   	cld    
f01310d6:	f2 6f                	repnz outsl %ds:(%esi),(%dx)
f01310d8:	89 c8                	mov    %ecx,%eax
f01310da:	89 f3                	mov    %esi,%ebx
f01310dc:	89 5d cc             	mov    %ebx,-0x34(%ebp)
f01310df:	89 45 c8             	mov    %eax,-0x38(%ebp)
	outb(0x1F5, (secno >> 16) & 0xFF);
	outb(0x1F6, 0xE0 | ((diskno&1)<<4) | ((secno>>24)&0x0F));
	outb(0x1F7, 0x30);	// CMD 0x30 means write sector


	for (; nsecs > 0; nsecs--, src += SECTSIZE) {
f01310e2:	ff 4d 10             	decl   0x10(%ebp)
f01310e5:	81 45 0c 00 02 00 00 	addl   $0x200,0xc(%ebp)
f01310ec:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
f01310f0:	75 a5                	jne    f0131097 <ide_write+0xd9>
		}
	}
	//LOG_STATMENT(cprintf("5\n");)
	//cprintf("returning from ide_write \n");

	return 0;
f01310f2:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01310f7:	8d 65 f8             	lea    -0x8(%ebp),%esp
f01310fa:	5b                   	pop    %ebx
f01310fb:	5e                   	pop    %esi
f01310fc:	5d                   	pop    %ebp
f01310fd:	c3                   	ret    

f01310fe <print_mem_block_lists>:
//===========================
// PRINT MEM BLOCK LISTS:
//===========================

void print_mem_block_lists()
{
f01310fe:	55                   	push   %ebp
f01310ff:	89 e5                	mov    %esp,%ebp
f0131101:	83 ec 18             	sub    $0x18,%esp
	cprintf("\n=========================================\n");
f0131104:	83 ec 0c             	sub    $0xc,%esp
f0131107:	68 d0 c8 13 f0       	push   $0xf013c8d0
f013110c:	e8 1c fb fc ff       	call   f0100c2d <cprintf>
f0131111:	83 c4 10             	add    $0x10,%esp
	struct MemBlock* blk ;
	struct MemBlock* lastBlk = NULL ;
f0131114:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	cprintf("\nFreeMemBlocksList:\n");
f013111b:	83 ec 0c             	sub    $0xc,%esp
f013111e:	68 fc c8 13 f0       	push   $0xf013c8fc
f0131123:	e8 05 fb fc ff       	call   f0100c2d <cprintf>
f0131128:	83 c4 10             	add    $0x10,%esp
	uint8 sorted = 1 ;
f013112b:	c6 45 ef 01          	movb   $0x1,-0x11(%ebp)
	LIST_FOREACH(blk, &FreeMemBlocksList)
f013112f:	a1 a0 0e 6c f0       	mov    0xf06c0ea0,%eax
f0131134:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0131137:	eb 56                	jmp    f013118f <print_mem_block_lists+0x91>
	{
		if (lastBlk && blk->sva < lastBlk->sva + lastBlk->size)
f0131139:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f013113d:	74 1c                	je     f013115b <print_mem_block_lists+0x5d>
f013113f:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131142:	8b 50 08             	mov    0x8(%eax),%edx
f0131145:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0131148:	8b 48 08             	mov    0x8(%eax),%ecx
f013114b:	8b 45 f0             	mov    -0x10(%ebp),%eax
f013114e:	8b 40 0c             	mov    0xc(%eax),%eax
f0131151:	01 c8                	add    %ecx,%eax
f0131153:	39 c2                	cmp    %eax,%edx
f0131155:	73 04                	jae    f013115b <print_mem_block_lists+0x5d>
			sorted = 0 ;
f0131157:	c6 45 ef 00          	movb   $0x0,-0x11(%ebp)
		cprintf("[%x, %x)-->", blk->sva, blk->sva + blk->size) ;
f013115b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f013115e:	8b 50 08             	mov    0x8(%eax),%edx
f0131161:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131164:	8b 40 0c             	mov    0xc(%eax),%eax
f0131167:	01 c2                	add    %eax,%edx
f0131169:	8b 45 f4             	mov    -0xc(%ebp),%eax
f013116c:	8b 40 08             	mov    0x8(%eax),%eax
f013116f:	83 ec 04             	sub    $0x4,%esp
f0131172:	52                   	push   %edx
f0131173:	50                   	push   %eax
f0131174:	68 11 c9 13 f0       	push   $0xf013c911
f0131179:	e8 af fa fc ff       	call   f0100c2d <cprintf>
f013117e:	83 c4 10             	add    $0x10,%esp
		lastBlk = blk;
f0131181:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131184:	89 45 f0             	mov    %eax,-0x10(%ebp)
	cprintf("\n=========================================\n");
	struct MemBlock* blk ;
	struct MemBlock* lastBlk = NULL ;
	cprintf("\nFreeMemBlocksList:\n");
	uint8 sorted = 1 ;
	LIST_FOREACH(blk, &FreeMemBlocksList)
f0131187:	a1 a8 0e 6c f0       	mov    0xf06c0ea8,%eax
f013118c:	89 45 f4             	mov    %eax,-0xc(%ebp)
f013118f:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0131193:	74 07                	je     f013119c <print_mem_block_lists+0x9e>
f0131195:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131198:	8b 00                	mov    (%eax),%eax
f013119a:	eb 05                	jmp    f01311a1 <print_mem_block_lists+0xa3>
f013119c:	b8 00 00 00 00       	mov    $0x0,%eax
f01311a1:	a3 a8 0e 6c f0       	mov    %eax,0xf06c0ea8
f01311a6:	a1 a8 0e 6c f0       	mov    0xf06c0ea8,%eax
f01311ab:	85 c0                	test   %eax,%eax
f01311ad:	75 8a                	jne    f0131139 <print_mem_block_lists+0x3b>
f01311af:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01311b3:	75 84                	jne    f0131139 <print_mem_block_lists+0x3b>
		if (lastBlk && blk->sva < lastBlk->sva + lastBlk->size)
			sorted = 0 ;
		cprintf("[%x, %x)-->", blk->sva, blk->sva + blk->size) ;
		lastBlk = blk;
	}
	if (!sorted)	cprintf("\nFreeMemBlocksList is NOT SORTED!!\n") ;
f01311b5:	80 7d ef 00          	cmpb   $0x0,-0x11(%ebp)
f01311b9:	75 10                	jne    f01311cb <print_mem_block_lists+0xcd>
f01311bb:	83 ec 0c             	sub    $0xc,%esp
f01311be:	68 20 c9 13 f0       	push   $0xf013c920
f01311c3:	e8 65 fa fc ff       	call   f0100c2d <cprintf>
f01311c8:	83 c4 10             	add    $0x10,%esp

	lastBlk = NULL ;
f01311cb:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	cprintf("\nAllocMemBlocksList:\n");
f01311d2:	83 ec 0c             	sub    $0xc,%esp
f01311d5:	68 44 c9 13 f0       	push   $0xf013c944
f01311da:	e8 4e fa fc ff       	call   f0100c2d <cprintf>
f01311df:	83 c4 10             	add    $0x10,%esp
	sorted = 1 ;
f01311e2:	c6 45 ef 01          	movb   $0x1,-0x11(%ebp)
	LIST_FOREACH(blk, &AllocMemBlocksList)
f01311e6:	a1 d0 8a 65 f0       	mov    0xf0658ad0,%eax
f01311eb:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01311ee:	eb 56                	jmp    f0131246 <print_mem_block_lists+0x148>
	{
		if (lastBlk && blk->sva < lastBlk->sva + lastBlk->size)
f01311f0:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f01311f4:	74 1c                	je     f0131212 <print_mem_block_lists+0x114>
f01311f6:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01311f9:	8b 50 08             	mov    0x8(%eax),%edx
f01311fc:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01311ff:	8b 48 08             	mov    0x8(%eax),%ecx
f0131202:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0131205:	8b 40 0c             	mov    0xc(%eax),%eax
f0131208:	01 c8                	add    %ecx,%eax
f013120a:	39 c2                	cmp    %eax,%edx
f013120c:	73 04                	jae    f0131212 <print_mem_block_lists+0x114>
			sorted = 0 ;
f013120e:	c6 45 ef 00          	movb   $0x0,-0x11(%ebp)
		cprintf("[%x, %x)-->", blk->sva, blk->sva + blk->size) ;
f0131212:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131215:	8b 50 08             	mov    0x8(%eax),%edx
f0131218:	8b 45 f4             	mov    -0xc(%ebp),%eax
f013121b:	8b 40 0c             	mov    0xc(%eax),%eax
f013121e:	01 c2                	add    %eax,%edx
f0131220:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131223:	8b 40 08             	mov    0x8(%eax),%eax
f0131226:	83 ec 04             	sub    $0x4,%esp
f0131229:	52                   	push   %edx
f013122a:	50                   	push   %eax
f013122b:	68 11 c9 13 f0       	push   $0xf013c911
f0131230:	e8 f8 f9 fc ff       	call   f0100c2d <cprintf>
f0131235:	83 c4 10             	add    $0x10,%esp
		lastBlk = blk;
f0131238:	8b 45 f4             	mov    -0xc(%ebp),%eax
f013123b:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (!sorted)	cprintf("\nFreeMemBlocksList is NOT SORTED!!\n") ;

	lastBlk = NULL ;
	cprintf("\nAllocMemBlocksList:\n");
	sorted = 1 ;
	LIST_FOREACH(blk, &AllocMemBlocksList)
f013123e:	a1 d8 8a 65 f0       	mov    0xf0658ad8,%eax
f0131243:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0131246:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f013124a:	74 07                	je     f0131253 <print_mem_block_lists+0x155>
f013124c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f013124f:	8b 00                	mov    (%eax),%eax
f0131251:	eb 05                	jmp    f0131258 <print_mem_block_lists+0x15a>
f0131253:	b8 00 00 00 00       	mov    $0x0,%eax
f0131258:	a3 d8 8a 65 f0       	mov    %eax,0xf0658ad8
f013125d:	a1 d8 8a 65 f0       	mov    0xf0658ad8,%eax
f0131262:	85 c0                	test   %eax,%eax
f0131264:	75 8a                	jne    f01311f0 <print_mem_block_lists+0xf2>
f0131266:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f013126a:	75 84                	jne    f01311f0 <print_mem_block_lists+0xf2>
		if (lastBlk && blk->sva < lastBlk->sva + lastBlk->size)
			sorted = 0 ;
		cprintf("[%x, %x)-->", blk->sva, blk->sva + blk->size) ;
		lastBlk = blk;
	}
	if (!sorted)	cprintf("\nAllocMemBlocksList is NOT SORTED!!\n") ;
f013126c:	80 7d ef 00          	cmpb   $0x0,-0x11(%ebp)
f0131270:	75 10                	jne    f0131282 <print_mem_block_lists+0x184>
f0131272:	83 ec 0c             	sub    $0xc,%esp
f0131275:	68 5c c9 13 f0       	push   $0xf013c95c
f013127a:	e8 ae f9 fc ff       	call   f0100c2d <cprintf>
f013127f:	83 c4 10             	add    $0x10,%esp
	cprintf("\n=========================================\n");
f0131282:	83 ec 0c             	sub    $0xc,%esp
f0131285:	68 d0 c8 13 f0       	push   $0xf013c8d0
f013128a:	e8 9e f9 fc ff       	call   f0100c2d <cprintf>
f013128f:	83 c4 10             	add    $0x10,%esp

}
f0131292:	90                   	nop
f0131293:	c9                   	leave  
f0131294:	c3                   	ret    

f0131295 <initialize_MemBlocksList>:

//===============================
// [1] INITIALIZE AVAILABLE LIST:
//===============================
void initialize_MemBlocksList(uint32 numOfBlocks)
{
f0131295:	55                   	push   %ebp
f0131296:	89 e5                	mov    %esp,%ebp
f0131298:	83 ec 18             	sub    $0x18,%esp
	//TODO: [PROJECT MS1] [DYNAMIC ALLOCATOR] initialize_MemBlocksList
	// Write your code here, remove the panic and write your code
	//panic("initialize_MemBlocksList() is not implemented yet...!!");
	LIST_INIT(&AvailableMemBlocksList);
f013129b:	c7 05 d4 0e 6c f0 00 	movl   $0x0,0xf06c0ed4
f01312a2:	00 00 00 
f01312a5:	c7 05 d8 0e 6c f0 00 	movl   $0x0,0xf06c0ed8
f01312ac:	00 00 00 
f01312af:	c7 05 e0 0e 6c f0 00 	movl   $0x0,0xf06c0ee0
f01312b6:	00 00 00 

	for(int y=0;y<numOfBlocks;y++)
f01312b9:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01312c0:	e9 9e 00 00 00       	jmp    f0131363 <initialize_MemBlocksList+0xce>
	{
		LIST_INSERT_HEAD(&AvailableMemBlocksList, &(MemBlockNodes[y]));
f01312c5:	a1 e0 8a 65 f0       	mov    0xf0658ae0,%eax
f01312ca:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01312cd:	c1 e2 04             	shl    $0x4,%edx
f01312d0:	01 d0                	add    %edx,%eax
f01312d2:	85 c0                	test   %eax,%eax
f01312d4:	75 14                	jne    f01312ea <initialize_MemBlocksList+0x55>
f01312d6:	83 ec 04             	sub    $0x4,%esp
f01312d9:	68 84 c9 13 f0       	push   $0xf013c984
f01312de:	6a 46                	push   $0x46
f01312e0:	68 a7 c9 13 f0       	push   $0xf013c9a7
f01312e5:	e8 bc ee fc ff       	call   f01001a6 <_panic>
f01312ea:	a1 e0 8a 65 f0       	mov    0xf0658ae0,%eax
f01312ef:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01312f2:	c1 e2 04             	shl    $0x4,%edx
f01312f5:	01 d0                	add    %edx,%eax
f01312f7:	8b 15 d4 0e 6c f0    	mov    0xf06c0ed4,%edx
f01312fd:	89 10                	mov    %edx,(%eax)
f01312ff:	8b 00                	mov    (%eax),%eax
f0131301:	85 c0                	test   %eax,%eax
f0131303:	74 18                	je     f013131d <initialize_MemBlocksList+0x88>
f0131305:	a1 d4 0e 6c f0       	mov    0xf06c0ed4,%eax
f013130a:	8b 15 e0 8a 65 f0    	mov    0xf0658ae0,%edx
f0131310:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0131313:	c1 e1 04             	shl    $0x4,%ecx
f0131316:	01 ca                	add    %ecx,%edx
f0131318:	89 50 04             	mov    %edx,0x4(%eax)
f013131b:	eb 12                	jmp    f013132f <initialize_MemBlocksList+0x9a>
f013131d:	a1 e0 8a 65 f0       	mov    0xf0658ae0,%eax
f0131322:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0131325:	c1 e2 04             	shl    $0x4,%edx
f0131328:	01 d0                	add    %edx,%eax
f013132a:	a3 d8 0e 6c f0       	mov    %eax,0xf06c0ed8
f013132f:	a1 e0 8a 65 f0       	mov    0xf0658ae0,%eax
f0131334:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0131337:	c1 e2 04             	shl    $0x4,%edx
f013133a:	01 d0                	add    %edx,%eax
f013133c:	a3 d4 0e 6c f0       	mov    %eax,0xf06c0ed4
f0131341:	a1 e0 8a 65 f0       	mov    0xf0658ae0,%eax
f0131346:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0131349:	c1 e2 04             	shl    $0x4,%edx
f013134c:	01 d0                	add    %edx,%eax
f013134e:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f0131355:	a1 e0 0e 6c f0       	mov    0xf06c0ee0,%eax
f013135a:	40                   	inc    %eax
f013135b:	a3 e0 0e 6c f0       	mov    %eax,0xf06c0ee0
	//TODO: [PROJECT MS1] [DYNAMIC ALLOCATOR] initialize_MemBlocksList
	// Write your code here, remove the panic and write your code
	//panic("initialize_MemBlocksList() is not implemented yet...!!");
	LIST_INIT(&AvailableMemBlocksList);

	for(int y=0;y<numOfBlocks;y++)
f0131360:	ff 45 f4             	incl   -0xc(%ebp)
f0131363:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131366:	3b 45 08             	cmp    0x8(%ebp),%eax
f0131369:	0f 82 56 ff ff ff    	jb     f01312c5 <initialize_MemBlocksList+0x30>
	{
		LIST_INSERT_HEAD(&AvailableMemBlocksList, &(MemBlockNodes[y]));
	}
}
f013136f:	90                   	nop
f0131370:	c9                   	leave  
f0131371:	c3                   	ret    

f0131372 <find_block>:

//===============================
// [2] FIND BLOCK:
//===============================
struct MemBlock *find_block(struct MemBlock_List *blockList, uint32 va)
{
f0131372:	55                   	push   %ebp
f0131373:	89 e5                	mov    %esp,%ebp
f0131375:	83 ec 10             	sub    $0x10,%esp
	//TODO: [PROJECT MS1] [DYNAMIC ALLOCATOR] find_block
	// Write your code here, remove the panic and write your code
	//panic("find_block() is not implemented yet...!!");
	struct MemBlock *point;

	LIST_FOREACH(point,blockList)
f0131378:	8b 45 08             	mov    0x8(%ebp),%eax
f013137b:	8b 00                	mov    (%eax),%eax
f013137d:	89 45 fc             	mov    %eax,-0x4(%ebp)
f0131380:	eb 19                	jmp    f013139b <find_block+0x29>
	{
		if(va==point->sva)
f0131382:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0131385:	8b 40 08             	mov    0x8(%eax),%eax
f0131388:	3b 45 0c             	cmp    0xc(%ebp),%eax
f013138b:	75 05                	jne    f0131392 <find_block+0x20>
		   return point;
f013138d:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0131390:	eb 36                	jmp    f01313c8 <find_block+0x56>
	//TODO: [PROJECT MS1] [DYNAMIC ALLOCATOR] find_block
	// Write your code here, remove the panic and write your code
	//panic("find_block() is not implemented yet...!!");
	struct MemBlock *point;

	LIST_FOREACH(point,blockList)
f0131392:	8b 45 08             	mov    0x8(%ebp),%eax
f0131395:	8b 40 08             	mov    0x8(%eax),%eax
f0131398:	89 45 fc             	mov    %eax,-0x4(%ebp)
f013139b:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
f013139f:	74 07                	je     f01313a8 <find_block+0x36>
f01313a1:	8b 45 fc             	mov    -0x4(%ebp),%eax
f01313a4:	8b 00                	mov    (%eax),%eax
f01313a6:	eb 05                	jmp    f01313ad <find_block+0x3b>
f01313a8:	b8 00 00 00 00       	mov    $0x0,%eax
f01313ad:	8b 55 08             	mov    0x8(%ebp),%edx
f01313b0:	89 42 08             	mov    %eax,0x8(%edx)
f01313b3:	8b 45 08             	mov    0x8(%ebp),%eax
f01313b6:	8b 40 08             	mov    0x8(%eax),%eax
f01313b9:	85 c0                	test   %eax,%eax
f01313bb:	75 c5                	jne    f0131382 <find_block+0x10>
f01313bd:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
f01313c1:	75 bf                	jne    f0131382 <find_block+0x10>
	{
		if(va==point->sva)
		   return point;
	}
	return NULL;
f01313c3:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01313c8:	c9                   	leave  
f01313c9:	c3                   	ret    

f01313ca <insert_sorted_allocList>:

//=========================================
// [3] INSERT BLOCK IN ALLOC LIST [SORTED]:
//=========================================
void insert_sorted_allocList(struct MemBlock *blockToInsert)
{
f01313ca:	55                   	push   %ebp
f01313cb:	89 e5                	mov    %esp,%ebp
f01313cd:	83 ec 18             	sub    $0x18,%esp
	//TODO: [PROJECT MS1] [DYNAMIC ALLOCATOR] insert_sorted_allocList
	// Write your code here, remove the panic and write your code
	//panic("insert_sorted_allocList() is not implemented yet...!!");
	struct MemBlock *head = LIST_FIRST(&AllocMemBlocksList) ;
f01313d0:	a1 d0 8a 65 f0       	mov    0xf0658ad0,%eax
f01313d5:	89 45 f0             	mov    %eax,-0x10(%ebp)
	struct MemBlock *tail = LIST_LAST(&AllocMemBlocksList) ;
f01313d8:	a1 d4 8a 65 f0       	mov    0xf0658ad4,%eax
f01313dd:	89 45 ec             	mov    %eax,-0x14(%ebp)

	if (head == tail || blockToInsert->sva <= head->sva || blockToInsert->sva >= tail->sva )
f01313e0:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01313e3:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f01313e6:	74 24                	je     f013140c <insert_sorted_allocList+0x42>
f01313e8:	8b 45 08             	mov    0x8(%ebp),%eax
f01313eb:	8b 50 08             	mov    0x8(%eax),%edx
f01313ee:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01313f1:	8b 40 08             	mov    0x8(%eax),%eax
f01313f4:	39 c2                	cmp    %eax,%edx
f01313f6:	76 14                	jbe    f013140c <insert_sorted_allocList+0x42>
f01313f8:	8b 45 08             	mov    0x8(%ebp),%eax
f01313fb:	8b 50 08             	mov    0x8(%eax),%edx
f01313fe:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0131401:	8b 40 08             	mov    0x8(%eax),%eax
f0131404:	39 c2                	cmp    %eax,%edx
f0131406:	0f 82 60 01 00 00    	jb     f013156c <insert_sorted_allocList+0x1a2>
	{
		if(head == NULL )
f013140c:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0131410:	75 65                	jne    f0131477 <insert_sorted_allocList+0xad>
		{
			LIST_INSERT_HEAD(&AllocMemBlocksList, blockToInsert);
f0131412:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0131416:	75 14                	jne    f013142c <insert_sorted_allocList+0x62>
f0131418:	83 ec 04             	sub    $0x4,%esp
f013141b:	68 84 c9 13 f0       	push   $0xf013c984
f0131420:	6a 6b                	push   $0x6b
f0131422:	68 a7 c9 13 f0       	push   $0xf013c9a7
f0131427:	e8 7a ed fc ff       	call   f01001a6 <_panic>
f013142c:	8b 15 d0 8a 65 f0    	mov    0xf0658ad0,%edx
f0131432:	8b 45 08             	mov    0x8(%ebp),%eax
f0131435:	89 10                	mov    %edx,(%eax)
f0131437:	8b 45 08             	mov    0x8(%ebp),%eax
f013143a:	8b 00                	mov    (%eax),%eax
f013143c:	85 c0                	test   %eax,%eax
f013143e:	74 0d                	je     f013144d <insert_sorted_allocList+0x83>
f0131440:	a1 d0 8a 65 f0       	mov    0xf0658ad0,%eax
f0131445:	8b 55 08             	mov    0x8(%ebp),%edx
f0131448:	89 50 04             	mov    %edx,0x4(%eax)
f013144b:	eb 08                	jmp    f0131455 <insert_sorted_allocList+0x8b>
f013144d:	8b 45 08             	mov    0x8(%ebp),%eax
f0131450:	a3 d4 8a 65 f0       	mov    %eax,0xf0658ad4
f0131455:	8b 45 08             	mov    0x8(%ebp),%eax
f0131458:	a3 d0 8a 65 f0       	mov    %eax,0xf0658ad0
f013145d:	8b 45 08             	mov    0x8(%ebp),%eax
f0131460:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f0131467:	a1 dc 8a 65 f0       	mov    0xf0658adc,%eax
f013146c:	40                   	inc    %eax
f013146d:	a3 dc 8a 65 f0       	mov    %eax,0xf0658adc
	struct MemBlock *head = LIST_FIRST(&AllocMemBlocksList) ;
	struct MemBlock *tail = LIST_LAST(&AllocMemBlocksList) ;

	if (head == tail || blockToInsert->sva <= head->sva || blockToInsert->sva >= tail->sva )
	{
		if(head == NULL )
f0131472:	e9 dc 01 00 00       	jmp    f0131653 <insert_sorted_allocList+0x289>
		{
			LIST_INSERT_HEAD(&AllocMemBlocksList, blockToInsert);
		}
		else if (blockToInsert->sva <= head->sva)
f0131477:	8b 45 08             	mov    0x8(%ebp),%eax
f013147a:	8b 50 08             	mov    0x8(%eax),%edx
f013147d:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0131480:	8b 40 08             	mov    0x8(%eax),%eax
f0131483:	39 c2                	cmp    %eax,%edx
f0131485:	77 6c                	ja     f01314f3 <insert_sorted_allocList+0x129>
		{
			LIST_INSERT_BEFORE(&AllocMemBlocksList,head, blockToInsert);
f0131487:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f013148b:	74 06                	je     f0131493 <insert_sorted_allocList+0xc9>
f013148d:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0131491:	75 14                	jne    f01314a7 <insert_sorted_allocList+0xdd>
f0131493:	83 ec 04             	sub    $0x4,%esp
f0131496:	68 c0 c9 13 f0       	push   $0xf013c9c0
f013149b:	6a 6f                	push   $0x6f
f013149d:	68 a7 c9 13 f0       	push   $0xf013c9a7
f01314a2:	e8 ff ec fc ff       	call   f01001a6 <_panic>
f01314a7:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01314aa:	8b 50 04             	mov    0x4(%eax),%edx
f01314ad:	8b 45 08             	mov    0x8(%ebp),%eax
f01314b0:	89 50 04             	mov    %edx,0x4(%eax)
f01314b3:	8b 45 08             	mov    0x8(%ebp),%eax
f01314b6:	8b 55 f0             	mov    -0x10(%ebp),%edx
f01314b9:	89 10                	mov    %edx,(%eax)
f01314bb:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01314be:	8b 40 04             	mov    0x4(%eax),%eax
f01314c1:	85 c0                	test   %eax,%eax
f01314c3:	74 0d                	je     f01314d2 <insert_sorted_allocList+0x108>
f01314c5:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01314c8:	8b 40 04             	mov    0x4(%eax),%eax
f01314cb:	8b 55 08             	mov    0x8(%ebp),%edx
f01314ce:	89 10                	mov    %edx,(%eax)
f01314d0:	eb 08                	jmp    f01314da <insert_sorted_allocList+0x110>
f01314d2:	8b 45 08             	mov    0x8(%ebp),%eax
f01314d5:	a3 d0 8a 65 f0       	mov    %eax,0xf0658ad0
f01314da:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01314dd:	8b 55 08             	mov    0x8(%ebp),%edx
f01314e0:	89 50 04             	mov    %edx,0x4(%eax)
f01314e3:	a1 dc 8a 65 f0       	mov    0xf0658adc,%eax
f01314e8:	40                   	inc    %eax
f01314e9:	a3 dc 8a 65 f0       	mov    %eax,0xf0658adc
	struct MemBlock *head = LIST_FIRST(&AllocMemBlocksList) ;
	struct MemBlock *tail = LIST_LAST(&AllocMemBlocksList) ;

	if (head == tail || blockToInsert->sva <= head->sva || blockToInsert->sva >= tail->sva )
	{
		if(head == NULL )
f01314ee:	e9 60 01 00 00       	jmp    f0131653 <insert_sorted_allocList+0x289>
		}
		else if (blockToInsert->sva <= head->sva)
		{
			LIST_INSERT_BEFORE(&AllocMemBlocksList,head, blockToInsert);
		}
		else if (blockToInsert->sva >= tail->sva )
f01314f3:	8b 45 08             	mov    0x8(%ebp),%eax
f01314f6:	8b 50 08             	mov    0x8(%eax),%edx
f01314f9:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01314fc:	8b 40 08             	mov    0x8(%eax),%eax
f01314ff:	39 c2                	cmp    %eax,%edx
f0131501:	0f 82 4c 01 00 00    	jb     f0131653 <insert_sorted_allocList+0x289>
		{
			LIST_INSERT_TAIL(&AllocMemBlocksList, blockToInsert);
f0131507:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f013150b:	75 14                	jne    f0131521 <insert_sorted_allocList+0x157>
f013150d:	83 ec 04             	sub    $0x4,%esp
f0131510:	68 f8 c9 13 f0       	push   $0xf013c9f8
f0131515:	6a 73                	push   $0x73
f0131517:	68 a7 c9 13 f0       	push   $0xf013c9a7
f013151c:	e8 85 ec fc ff       	call   f01001a6 <_panic>
f0131521:	8b 15 d4 8a 65 f0    	mov    0xf0658ad4,%edx
f0131527:	8b 45 08             	mov    0x8(%ebp),%eax
f013152a:	89 50 04             	mov    %edx,0x4(%eax)
f013152d:	8b 45 08             	mov    0x8(%ebp),%eax
f0131530:	8b 40 04             	mov    0x4(%eax),%eax
f0131533:	85 c0                	test   %eax,%eax
f0131535:	74 0c                	je     f0131543 <insert_sorted_allocList+0x179>
f0131537:	a1 d4 8a 65 f0       	mov    0xf0658ad4,%eax
f013153c:	8b 55 08             	mov    0x8(%ebp),%edx
f013153f:	89 10                	mov    %edx,(%eax)
f0131541:	eb 08                	jmp    f013154b <insert_sorted_allocList+0x181>
f0131543:	8b 45 08             	mov    0x8(%ebp),%eax
f0131546:	a3 d0 8a 65 f0       	mov    %eax,0xf0658ad0
f013154b:	8b 45 08             	mov    0x8(%ebp),%eax
f013154e:	a3 d4 8a 65 f0       	mov    %eax,0xf0658ad4
f0131553:	8b 45 08             	mov    0x8(%ebp),%eax
f0131556:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f013155c:	a1 dc 8a 65 f0       	mov    0xf0658adc,%eax
f0131561:	40                   	inc    %eax
f0131562:	a3 dc 8a 65 f0       	mov    %eax,0xf0658adc
	struct MemBlock *head = LIST_FIRST(&AllocMemBlocksList) ;
	struct MemBlock *tail = LIST_LAST(&AllocMemBlocksList) ;

	if (head == tail || blockToInsert->sva <= head->sva || blockToInsert->sva >= tail->sva )
	{
		if(head == NULL )
f0131567:	e9 e7 00 00 00       	jmp    f0131653 <insert_sorted_allocList+0x289>
			LIST_INSERT_TAIL(&AllocMemBlocksList, blockToInsert);
		}
	}
	else
	{
		struct MemBlock *current_block = head;
f013156c:	8b 45 f0             	mov    -0x10(%ebp),%eax
f013156f:	89 45 f4             	mov    %eax,-0xc(%ebp)
		struct MemBlock *next_block = NULL;
f0131572:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
		LIST_FOREACH (current_block, &AllocMemBlocksList)
f0131579:	a1 d0 8a 65 f0       	mov    0xf0658ad0,%eax
f013157e:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0131581:	e9 9d 00 00 00       	jmp    f0131623 <insert_sorted_allocList+0x259>
		{
			next_block = LIST_NEXT(current_block);
f0131586:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131589:	8b 00                	mov    (%eax),%eax
f013158b:	89 45 e8             	mov    %eax,-0x18(%ebp)
			if (blockToInsert->sva > current_block->sva && blockToInsert->sva < next_block->sva)
f013158e:	8b 45 08             	mov    0x8(%ebp),%eax
f0131591:	8b 50 08             	mov    0x8(%eax),%edx
f0131594:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131597:	8b 40 08             	mov    0x8(%eax),%eax
f013159a:	39 c2                	cmp    %eax,%edx
f013159c:	76 7d                	jbe    f013161b <insert_sorted_allocList+0x251>
f013159e:	8b 45 08             	mov    0x8(%ebp),%eax
f01315a1:	8b 50 08             	mov    0x8(%eax),%edx
f01315a4:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01315a7:	8b 40 08             	mov    0x8(%eax),%eax
f01315aa:	39 c2                	cmp    %eax,%edx
f01315ac:	73 6d                	jae    f013161b <insert_sorted_allocList+0x251>
			{
				LIST_INSERT_AFTER(&AllocMemBlocksList,current_block,blockToInsert);
f01315ae:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01315b2:	74 06                	je     f01315ba <insert_sorted_allocList+0x1f0>
f01315b4:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f01315b8:	75 14                	jne    f01315ce <insert_sorted_allocList+0x204>
f01315ba:	83 ec 04             	sub    $0x4,%esp
f01315bd:	68 1c ca 13 f0       	push   $0xf013ca1c
f01315c2:	6a 7f                	push   $0x7f
f01315c4:	68 a7 c9 13 f0       	push   $0xf013c9a7
f01315c9:	e8 d8 eb fc ff       	call   f01001a6 <_panic>
f01315ce:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01315d1:	8b 10                	mov    (%eax),%edx
f01315d3:	8b 45 08             	mov    0x8(%ebp),%eax
f01315d6:	89 10                	mov    %edx,(%eax)
f01315d8:	8b 45 08             	mov    0x8(%ebp),%eax
f01315db:	8b 00                	mov    (%eax),%eax
f01315dd:	85 c0                	test   %eax,%eax
f01315df:	74 0b                	je     f01315ec <insert_sorted_allocList+0x222>
f01315e1:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01315e4:	8b 00                	mov    (%eax),%eax
f01315e6:	8b 55 08             	mov    0x8(%ebp),%edx
f01315e9:	89 50 04             	mov    %edx,0x4(%eax)
f01315ec:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01315ef:	8b 55 08             	mov    0x8(%ebp),%edx
f01315f2:	89 10                	mov    %edx,(%eax)
f01315f4:	8b 45 08             	mov    0x8(%ebp),%eax
f01315f7:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01315fa:	89 50 04             	mov    %edx,0x4(%eax)
f01315fd:	8b 45 08             	mov    0x8(%ebp),%eax
f0131600:	8b 00                	mov    (%eax),%eax
f0131602:	85 c0                	test   %eax,%eax
f0131604:	75 08                	jne    f013160e <insert_sorted_allocList+0x244>
f0131606:	8b 45 08             	mov    0x8(%ebp),%eax
f0131609:	a3 d4 8a 65 f0       	mov    %eax,0xf0658ad4
f013160e:	a1 dc 8a 65 f0       	mov    0xf0658adc,%eax
f0131613:	40                   	inc    %eax
f0131614:	a3 dc 8a 65 f0       	mov    %eax,0xf0658adc
				break;
f0131619:	eb 39                	jmp    f0131654 <insert_sorted_allocList+0x28a>
	}
	else
	{
		struct MemBlock *current_block = head;
		struct MemBlock *next_block = NULL;
		LIST_FOREACH (current_block, &AllocMemBlocksList)
f013161b:	a1 d8 8a 65 f0       	mov    0xf0658ad8,%eax
f0131620:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0131623:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0131627:	74 07                	je     f0131630 <insert_sorted_allocList+0x266>
f0131629:	8b 45 f4             	mov    -0xc(%ebp),%eax
f013162c:	8b 00                	mov    (%eax),%eax
f013162e:	eb 05                	jmp    f0131635 <insert_sorted_allocList+0x26b>
f0131630:	b8 00 00 00 00       	mov    $0x0,%eax
f0131635:	a3 d8 8a 65 f0       	mov    %eax,0xf0658ad8
f013163a:	a1 d8 8a 65 f0       	mov    0xf0658ad8,%eax
f013163f:	85 c0                	test   %eax,%eax
f0131641:	0f 85 3f ff ff ff    	jne    f0131586 <insert_sorted_allocList+0x1bc>
f0131647:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f013164b:	0f 85 35 ff ff ff    	jne    f0131586 <insert_sorted_allocList+0x1bc>
				LIST_INSERT_AFTER(&AllocMemBlocksList,current_block,blockToInsert);
				break;
			}
		}
	}
}
f0131651:	eb 01                	jmp    f0131654 <insert_sorted_allocList+0x28a>
	struct MemBlock *head = LIST_FIRST(&AllocMemBlocksList) ;
	struct MemBlock *tail = LIST_LAST(&AllocMemBlocksList) ;

	if (head == tail || blockToInsert->sva <= head->sva || blockToInsert->sva >= tail->sva )
	{
		if(head == NULL )
f0131653:	90                   	nop
				LIST_INSERT_AFTER(&AllocMemBlocksList,current_block,blockToInsert);
				break;
			}
		}
	}
}
f0131654:	90                   	nop
f0131655:	c9                   	leave  
f0131656:	c3                   	ret    

f0131657 <alloc_block_FF>:

//=========================================
// [4] ALLOCATE BLOCK BY FIRST FIT:
//=========================================
struct MemBlock *alloc_block_FF(uint32 size)
{
f0131657:	55                   	push   %ebp
f0131658:	89 e5                	mov    %esp,%ebp
f013165a:	83 ec 18             	sub    $0x18,%esp
	//TODO: [PROJECT MS1] [DYNAMIC ALLOCATOR] alloc_block_FF
	// Write your code here, remove the panic and write your code
	struct MemBlock *point;
	LIST_FOREACH(point,&FreeMemBlocksList)
f013165d:	a1 a0 0e 6c f0       	mov    0xf06c0ea0,%eax
f0131662:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0131665:	e9 85 01 00 00       	jmp    f01317ef <alloc_block_FF+0x198>
	{
		if(size <= point->size)
f013166a:	8b 45 f4             	mov    -0xc(%ebp),%eax
f013166d:	8b 40 0c             	mov    0xc(%eax),%eax
f0131670:	3b 45 08             	cmp    0x8(%ebp),%eax
f0131673:	0f 82 6e 01 00 00    	jb     f01317e7 <alloc_block_FF+0x190>
		{
		   if(size == point->size){
f0131679:	8b 45 f4             	mov    -0xc(%ebp),%eax
f013167c:	8b 40 0c             	mov    0xc(%eax),%eax
f013167f:	3b 45 08             	cmp    0x8(%ebp),%eax
f0131682:	0f 85 8a 00 00 00    	jne    f0131712 <alloc_block_FF+0xbb>
			   LIST_REMOVE(&FreeMemBlocksList,point);
f0131688:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f013168c:	75 17                	jne    f01316a5 <alloc_block_FF+0x4e>
f013168e:	83 ec 04             	sub    $0x4,%esp
f0131691:	68 50 ca 13 f0       	push   $0xf013ca50
f0131696:	68 93 00 00 00       	push   $0x93
f013169b:	68 a7 c9 13 f0       	push   $0xf013c9a7
f01316a0:	e8 01 eb fc ff       	call   f01001a6 <_panic>
f01316a5:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01316a8:	8b 00                	mov    (%eax),%eax
f01316aa:	85 c0                	test   %eax,%eax
f01316ac:	74 10                	je     f01316be <alloc_block_FF+0x67>
f01316ae:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01316b1:	8b 00                	mov    (%eax),%eax
f01316b3:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01316b6:	8b 52 04             	mov    0x4(%edx),%edx
f01316b9:	89 50 04             	mov    %edx,0x4(%eax)
f01316bc:	eb 0b                	jmp    f01316c9 <alloc_block_FF+0x72>
f01316be:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01316c1:	8b 40 04             	mov    0x4(%eax),%eax
f01316c4:	a3 a4 0e 6c f0       	mov    %eax,0xf06c0ea4
f01316c9:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01316cc:	8b 40 04             	mov    0x4(%eax),%eax
f01316cf:	85 c0                	test   %eax,%eax
f01316d1:	74 0f                	je     f01316e2 <alloc_block_FF+0x8b>
f01316d3:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01316d6:	8b 40 04             	mov    0x4(%eax),%eax
f01316d9:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01316dc:	8b 12                	mov    (%edx),%edx
f01316de:	89 10                	mov    %edx,(%eax)
f01316e0:	eb 0a                	jmp    f01316ec <alloc_block_FF+0x95>
f01316e2:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01316e5:	8b 00                	mov    (%eax),%eax
f01316e7:	a3 a0 0e 6c f0       	mov    %eax,0xf06c0ea0
f01316ec:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01316ef:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f01316f5:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01316f8:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f01316ff:	a1 ac 0e 6c f0       	mov    0xf06c0eac,%eax
f0131704:	48                   	dec    %eax
f0131705:	a3 ac 0e 6c f0       	mov    %eax,0xf06c0eac
			   return  point;
f013170a:	8b 45 f4             	mov    -0xc(%ebp),%eax
f013170d:	e9 10 01 00 00       	jmp    f0131822 <alloc_block_FF+0x1cb>
			   break;
		   }
		   else if (size < point->size){
f0131712:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131715:	8b 40 0c             	mov    0xc(%eax),%eax
f0131718:	3b 45 08             	cmp    0x8(%ebp),%eax
f013171b:	0f 86 c6 00 00 00    	jbe    f01317e7 <alloc_block_FF+0x190>
			   struct MemBlock * ReturnedBlock = LIST_FIRST(&AvailableMemBlocksList);
f0131721:	a1 d4 0e 6c f0       	mov    0xf06c0ed4,%eax
f0131726:	89 45 f0             	mov    %eax,-0x10(%ebp)
			   ReturnedBlock->sva = point->sva;
f0131729:	8b 45 f4             	mov    -0xc(%ebp),%eax
f013172c:	8b 50 08             	mov    0x8(%eax),%edx
f013172f:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0131732:	89 50 08             	mov    %edx,0x8(%eax)
			   ReturnedBlock->size = size;
f0131735:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0131738:	8b 55 08             	mov    0x8(%ebp),%edx
f013173b:	89 50 0c             	mov    %edx,0xc(%eax)
			   LIST_REMOVE(&AvailableMemBlocksList,ReturnedBlock);
f013173e:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0131742:	75 17                	jne    f013175b <alloc_block_FF+0x104>
f0131744:	83 ec 04             	sub    $0x4,%esp
f0131747:	68 50 ca 13 f0       	push   $0xf013ca50
f013174c:	68 9b 00 00 00       	push   $0x9b
f0131751:	68 a7 c9 13 f0       	push   $0xf013c9a7
f0131756:	e8 4b ea fc ff       	call   f01001a6 <_panic>
f013175b:	8b 45 f0             	mov    -0x10(%ebp),%eax
f013175e:	8b 00                	mov    (%eax),%eax
f0131760:	85 c0                	test   %eax,%eax
f0131762:	74 10                	je     f0131774 <alloc_block_FF+0x11d>
f0131764:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0131767:	8b 00                	mov    (%eax),%eax
f0131769:	8b 55 f0             	mov    -0x10(%ebp),%edx
f013176c:	8b 52 04             	mov    0x4(%edx),%edx
f013176f:	89 50 04             	mov    %edx,0x4(%eax)
f0131772:	eb 0b                	jmp    f013177f <alloc_block_FF+0x128>
f0131774:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0131777:	8b 40 04             	mov    0x4(%eax),%eax
f013177a:	a3 d8 0e 6c f0       	mov    %eax,0xf06c0ed8
f013177f:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0131782:	8b 40 04             	mov    0x4(%eax),%eax
f0131785:	85 c0                	test   %eax,%eax
f0131787:	74 0f                	je     f0131798 <alloc_block_FF+0x141>
f0131789:	8b 45 f0             	mov    -0x10(%ebp),%eax
f013178c:	8b 40 04             	mov    0x4(%eax),%eax
f013178f:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0131792:	8b 12                	mov    (%edx),%edx
f0131794:	89 10                	mov    %edx,(%eax)
f0131796:	eb 0a                	jmp    f01317a2 <alloc_block_FF+0x14b>
f0131798:	8b 45 f0             	mov    -0x10(%ebp),%eax
f013179b:	8b 00                	mov    (%eax),%eax
f013179d:	a3 d4 0e 6c f0       	mov    %eax,0xf06c0ed4
f01317a2:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01317a5:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f01317ab:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01317ae:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f01317b5:	a1 e0 0e 6c f0       	mov    0xf06c0ee0,%eax
f01317ba:	48                   	dec    %eax
f01317bb:	a3 e0 0e 6c f0       	mov    %eax,0xf06c0ee0
			   point->sva += size;
f01317c0:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01317c3:	8b 50 08             	mov    0x8(%eax),%edx
f01317c6:	8b 45 08             	mov    0x8(%ebp),%eax
f01317c9:	01 c2                	add    %eax,%edx
f01317cb:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01317ce:	89 50 08             	mov    %edx,0x8(%eax)
			   point->size -= size;
f01317d1:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01317d4:	8b 40 0c             	mov    0xc(%eax),%eax
f01317d7:	2b 45 08             	sub    0x8(%ebp),%eax
f01317da:	89 c2                	mov    %eax,%edx
f01317dc:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01317df:	89 50 0c             	mov    %edx,0xc(%eax)
			   return ReturnedBlock;
f01317e2:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01317e5:	eb 3b                	jmp    f0131822 <alloc_block_FF+0x1cb>
struct MemBlock *alloc_block_FF(uint32 size)
{
	//TODO: [PROJECT MS1] [DYNAMIC ALLOCATOR] alloc_block_FF
	// Write your code here, remove the panic and write your code
	struct MemBlock *point;
	LIST_FOREACH(point,&FreeMemBlocksList)
f01317e7:	a1 a8 0e 6c f0       	mov    0xf06c0ea8,%eax
f01317ec:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01317ef:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01317f3:	74 07                	je     f01317fc <alloc_block_FF+0x1a5>
f01317f5:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01317f8:	8b 00                	mov    (%eax),%eax
f01317fa:	eb 05                	jmp    f0131801 <alloc_block_FF+0x1aa>
f01317fc:	b8 00 00 00 00       	mov    $0x0,%eax
f0131801:	a3 a8 0e 6c f0       	mov    %eax,0xf06c0ea8
f0131806:	a1 a8 0e 6c f0       	mov    0xf06c0ea8,%eax
f013180b:	85 c0                	test   %eax,%eax
f013180d:	0f 85 57 fe ff ff    	jne    f013166a <alloc_block_FF+0x13>
f0131813:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0131817:	0f 85 4d fe ff ff    	jne    f013166a <alloc_block_FF+0x13>
			   return ReturnedBlock;
			   break;
		   }
		}
	}
	return NULL;
f013181d:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0131822:	c9                   	leave  
f0131823:	c3                   	ret    

f0131824 <alloc_block_BF>:

//=========================================
// [5] ALLOCATE BLOCK BY BEST FIT:
//=========================================
struct MemBlock *alloc_block_BF(uint32 size)
{
f0131824:	55                   	push   %ebp
f0131825:	89 e5                	mov    %esp,%ebp
f0131827:	83 ec 28             	sub    $0x28,%esp
	//TODO: [PROJECT MS1] [DYNAMIC ALLOCATOR] alloc_block_BF
	// Write your code here, remove the panic and write your code
	struct MemBlock *currentMemBlock;
	uint32 minSize;
	uint32 svaOfMinSize;
	bool isFound = 1==0;
f013182a:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
	LIST_FOREACH(currentMemBlock,&FreeMemBlocksList)
f0131831:	a1 a0 0e 6c f0       	mov    0xf06c0ea0,%eax
f0131836:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0131839:	e9 df 00 00 00       	jmp    f013191d <alloc_block_BF+0xf9>
	{
		if(size <= currentMemBlock->size)
f013183e:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131841:	8b 40 0c             	mov    0xc(%eax),%eax
f0131844:	3b 45 08             	cmp    0x8(%ebp),%eax
f0131847:	0f 82 c8 00 00 00    	jb     f0131915 <alloc_block_BF+0xf1>
		{
		   if(size == currentMemBlock->size)
f013184d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131850:	8b 40 0c             	mov    0xc(%eax),%eax
f0131853:	3b 45 08             	cmp    0x8(%ebp),%eax
f0131856:	0f 85 8a 00 00 00    	jne    f01318e6 <alloc_block_BF+0xc2>
		   {
			   LIST_REMOVE(&FreeMemBlocksList,currentMemBlock);
f013185c:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0131860:	75 17                	jne    f0131879 <alloc_block_BF+0x55>
f0131862:	83 ec 04             	sub    $0x4,%esp
f0131865:	68 50 ca 13 f0       	push   $0xf013ca50
f013186a:	68 b7 00 00 00       	push   $0xb7
f013186f:	68 a7 c9 13 f0       	push   $0xf013c9a7
f0131874:	e8 2d e9 fc ff       	call   f01001a6 <_panic>
f0131879:	8b 45 f4             	mov    -0xc(%ebp),%eax
f013187c:	8b 00                	mov    (%eax),%eax
f013187e:	85 c0                	test   %eax,%eax
f0131880:	74 10                	je     f0131892 <alloc_block_BF+0x6e>
f0131882:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131885:	8b 00                	mov    (%eax),%eax
f0131887:	8b 55 f4             	mov    -0xc(%ebp),%edx
f013188a:	8b 52 04             	mov    0x4(%edx),%edx
f013188d:	89 50 04             	mov    %edx,0x4(%eax)
f0131890:	eb 0b                	jmp    f013189d <alloc_block_BF+0x79>
f0131892:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131895:	8b 40 04             	mov    0x4(%eax),%eax
f0131898:	a3 a4 0e 6c f0       	mov    %eax,0xf06c0ea4
f013189d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01318a0:	8b 40 04             	mov    0x4(%eax),%eax
f01318a3:	85 c0                	test   %eax,%eax
f01318a5:	74 0f                	je     f01318b6 <alloc_block_BF+0x92>
f01318a7:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01318aa:	8b 40 04             	mov    0x4(%eax),%eax
f01318ad:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01318b0:	8b 12                	mov    (%edx),%edx
f01318b2:	89 10                	mov    %edx,(%eax)
f01318b4:	eb 0a                	jmp    f01318c0 <alloc_block_BF+0x9c>
f01318b6:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01318b9:	8b 00                	mov    (%eax),%eax
f01318bb:	a3 a0 0e 6c f0       	mov    %eax,0xf06c0ea0
f01318c0:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01318c3:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f01318c9:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01318cc:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f01318d3:	a1 ac 0e 6c f0       	mov    0xf06c0eac,%eax
f01318d8:	48                   	dec    %eax
f01318d9:	a3 ac 0e 6c f0       	mov    %eax,0xf06c0eac
			   return currentMemBlock;
f01318de:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01318e1:	e9 4d 01 00 00       	jmp    f0131a33 <alloc_block_BF+0x20f>
		   }
		   else if (size < currentMemBlock->size && currentMemBlock->size < minSize)
f01318e6:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01318e9:	8b 40 0c             	mov    0xc(%eax),%eax
f01318ec:	3b 45 08             	cmp    0x8(%ebp),%eax
f01318ef:	76 24                	jbe    f0131915 <alloc_block_BF+0xf1>
f01318f1:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01318f4:	8b 40 0c             	mov    0xc(%eax),%eax
f01318f7:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f01318fa:	73 19                	jae    f0131915 <alloc_block_BF+0xf1>
		   {
			   isFound = 1==1;
f01318fc:	c7 45 e8 01 00 00 00 	movl   $0x1,-0x18(%ebp)
			   minSize = currentMemBlock->size;
f0131903:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131906:	8b 40 0c             	mov    0xc(%eax),%eax
f0131909:	89 45 f0             	mov    %eax,-0x10(%ebp)
			   svaOfMinSize = currentMemBlock->sva;
f013190c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f013190f:	8b 40 08             	mov    0x8(%eax),%eax
f0131912:	89 45 ec             	mov    %eax,-0x14(%ebp)
	// Write your code here, remove the panic and write your code
	struct MemBlock *currentMemBlock;
	uint32 minSize;
	uint32 svaOfMinSize;
	bool isFound = 1==0;
	LIST_FOREACH(currentMemBlock,&FreeMemBlocksList)
f0131915:	a1 a8 0e 6c f0       	mov    0xf06c0ea8,%eax
f013191a:	89 45 f4             	mov    %eax,-0xc(%ebp)
f013191d:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0131921:	74 07                	je     f013192a <alloc_block_BF+0x106>
f0131923:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131926:	8b 00                	mov    (%eax),%eax
f0131928:	eb 05                	jmp    f013192f <alloc_block_BF+0x10b>
f013192a:	b8 00 00 00 00       	mov    $0x0,%eax
f013192f:	a3 a8 0e 6c f0       	mov    %eax,0xf06c0ea8
f0131934:	a1 a8 0e 6c f0       	mov    0xf06c0ea8,%eax
f0131939:	85 c0                	test   %eax,%eax
f013193b:	0f 85 fd fe ff ff    	jne    f013183e <alloc_block_BF+0x1a>
f0131941:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0131945:	0f 85 f3 fe ff ff    	jne    f013183e <alloc_block_BF+0x1a>
			   minSize = currentMemBlock->size;
			   svaOfMinSize = currentMemBlock->sva;
		   }
		}
	}
	if(isFound)
f013194b:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
f013194f:	0f 84 d9 00 00 00    	je     f0131a2e <alloc_block_BF+0x20a>
	{
		struct MemBlock * foundBlock = LIST_FIRST(&AvailableMemBlocksList);
f0131955:	a1 d4 0e 6c f0       	mov    0xf06c0ed4,%eax
f013195a:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		foundBlock->sva = svaOfMinSize;
f013195d:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0131960:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0131963:	89 50 08             	mov    %edx,0x8(%eax)
		foundBlock->size = size;
f0131966:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0131969:	8b 55 08             	mov    0x8(%ebp),%edx
f013196c:	89 50 0c             	mov    %edx,0xc(%eax)
		LIST_REMOVE(&AvailableMemBlocksList,foundBlock);
f013196f:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f0131973:	75 17                	jne    f013198c <alloc_block_BF+0x168>
f0131975:	83 ec 04             	sub    $0x4,%esp
f0131978:	68 50 ca 13 f0       	push   $0xf013ca50
f013197d:	68 c7 00 00 00       	push   $0xc7
f0131982:	68 a7 c9 13 f0       	push   $0xf013c9a7
f0131987:	e8 1a e8 fc ff       	call   f01001a6 <_panic>
f013198c:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f013198f:	8b 00                	mov    (%eax),%eax
f0131991:	85 c0                	test   %eax,%eax
f0131993:	74 10                	je     f01319a5 <alloc_block_BF+0x181>
f0131995:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0131998:	8b 00                	mov    (%eax),%eax
f013199a:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f013199d:	8b 52 04             	mov    0x4(%edx),%edx
f01319a0:	89 50 04             	mov    %edx,0x4(%eax)
f01319a3:	eb 0b                	jmp    f01319b0 <alloc_block_BF+0x18c>
f01319a5:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01319a8:	8b 40 04             	mov    0x4(%eax),%eax
f01319ab:	a3 d8 0e 6c f0       	mov    %eax,0xf06c0ed8
f01319b0:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01319b3:	8b 40 04             	mov    0x4(%eax),%eax
f01319b6:	85 c0                	test   %eax,%eax
f01319b8:	74 0f                	je     f01319c9 <alloc_block_BF+0x1a5>
f01319ba:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01319bd:	8b 40 04             	mov    0x4(%eax),%eax
f01319c0:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f01319c3:	8b 12                	mov    (%edx),%edx
f01319c5:	89 10                	mov    %edx,(%eax)
f01319c7:	eb 0a                	jmp    f01319d3 <alloc_block_BF+0x1af>
f01319c9:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01319cc:	8b 00                	mov    (%eax),%eax
f01319ce:	a3 d4 0e 6c f0       	mov    %eax,0xf06c0ed4
f01319d3:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01319d6:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f01319dc:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01319df:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f01319e6:	a1 e0 0e 6c f0       	mov    0xf06c0ee0,%eax
f01319eb:	48                   	dec    %eax
f01319ec:	a3 e0 0e 6c f0       	mov    %eax,0xf06c0ee0
		struct MemBlock *cMemBlock = find_block(&FreeMemBlocksList, svaOfMinSize);
f01319f1:	83 ec 08             	sub    $0x8,%esp
f01319f4:	ff 75 ec             	pushl  -0x14(%ebp)
f01319f7:	68 a0 0e 6c f0       	push   $0xf06c0ea0
f01319fc:	e8 71 f9 ff ff       	call   f0131372 <find_block>
f0131a01:	83 c4 10             	add    $0x10,%esp
f0131a04:	89 45 e0             	mov    %eax,-0x20(%ebp)
		cMemBlock->sva += size;
f0131a07:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0131a0a:	8b 50 08             	mov    0x8(%eax),%edx
f0131a0d:	8b 45 08             	mov    0x8(%ebp),%eax
f0131a10:	01 c2                	add    %eax,%edx
f0131a12:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0131a15:	89 50 08             	mov    %edx,0x8(%eax)
		cMemBlock->size -= size;
f0131a18:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0131a1b:	8b 40 0c             	mov    0xc(%eax),%eax
f0131a1e:	2b 45 08             	sub    0x8(%ebp),%eax
f0131a21:	89 c2                	mov    %eax,%edx
f0131a23:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0131a26:	89 50 0c             	mov    %edx,0xc(%eax)
		return foundBlock;
f0131a29:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0131a2c:	eb 05                	jmp    f0131a33 <alloc_block_BF+0x20f>
	}
	return NULL;
f0131a2e:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0131a33:	c9                   	leave  
f0131a34:	c3                   	ret    

f0131a35 <alloc_block_NF>:
uint32 svaOfNF = 0;
//=========================================
// [7] ALLOCATE BLOCK BY NEXT FIT:
//=========================================
struct MemBlock *alloc_block_NF(uint32 size)
{
f0131a35:	55                   	push   %ebp
f0131a36:	89 e5                	mov    %esp,%ebp
f0131a38:	83 ec 18             	sub    $0x18,%esp
	//TODO: [PROJECT MS1 - BONUS] [DYNAMIC ALLOCATOR] alloc_block_NF
	// Write your code here, remove the panic and write your codestruct MemBlock *point;
	struct MemBlock *point;
	if(svaOfNF == 0)
f0131a3b:	a1 b0 8a 65 f0       	mov    0xf0658ab0,%eax
f0131a40:	85 c0                	test   %eax,%eax
f0131a42:	0f 85 de 01 00 00    	jne    f0131c26 <alloc_block_NF+0x1f1>
	{
		LIST_FOREACH(point,&FreeMemBlocksList)
f0131a48:	a1 a0 0e 6c f0       	mov    0xf06c0ea0,%eax
f0131a4d:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0131a50:	e9 9e 01 00 00       	jmp    f0131bf3 <alloc_block_NF+0x1be>
		{
			if(size <= point->size)
f0131a55:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131a58:	8b 40 0c             	mov    0xc(%eax),%eax
f0131a5b:	3b 45 08             	cmp    0x8(%ebp),%eax
f0131a5e:	0f 82 87 01 00 00    	jb     f0131beb <alloc_block_NF+0x1b6>
			{
			   if(size == point->size){
f0131a64:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131a67:	8b 40 0c             	mov    0xc(%eax),%eax
f0131a6a:	3b 45 08             	cmp    0x8(%ebp),%eax
f0131a6d:	0f 85 95 00 00 00    	jne    f0131b08 <alloc_block_NF+0xd3>
				   LIST_REMOVE(&FreeMemBlocksList,point);
f0131a73:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0131a77:	75 17                	jne    f0131a90 <alloc_block_NF+0x5b>
f0131a79:	83 ec 04             	sub    $0x4,%esp
f0131a7c:	68 50 ca 13 f0       	push   $0xf013ca50
f0131a81:	68 e0 00 00 00       	push   $0xe0
f0131a86:	68 a7 c9 13 f0       	push   $0xf013c9a7
f0131a8b:	e8 16 e7 fc ff       	call   f01001a6 <_panic>
f0131a90:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131a93:	8b 00                	mov    (%eax),%eax
f0131a95:	85 c0                	test   %eax,%eax
f0131a97:	74 10                	je     f0131aa9 <alloc_block_NF+0x74>
f0131a99:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131a9c:	8b 00                	mov    (%eax),%eax
f0131a9e:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0131aa1:	8b 52 04             	mov    0x4(%edx),%edx
f0131aa4:	89 50 04             	mov    %edx,0x4(%eax)
f0131aa7:	eb 0b                	jmp    f0131ab4 <alloc_block_NF+0x7f>
f0131aa9:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131aac:	8b 40 04             	mov    0x4(%eax),%eax
f0131aaf:	a3 a4 0e 6c f0       	mov    %eax,0xf06c0ea4
f0131ab4:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131ab7:	8b 40 04             	mov    0x4(%eax),%eax
f0131aba:	85 c0                	test   %eax,%eax
f0131abc:	74 0f                	je     f0131acd <alloc_block_NF+0x98>
f0131abe:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131ac1:	8b 40 04             	mov    0x4(%eax),%eax
f0131ac4:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0131ac7:	8b 12                	mov    (%edx),%edx
f0131ac9:	89 10                	mov    %edx,(%eax)
f0131acb:	eb 0a                	jmp    f0131ad7 <alloc_block_NF+0xa2>
f0131acd:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131ad0:	8b 00                	mov    (%eax),%eax
f0131ad2:	a3 a0 0e 6c f0       	mov    %eax,0xf06c0ea0
f0131ad7:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131ada:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f0131ae0:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131ae3:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f0131aea:	a1 ac 0e 6c f0       	mov    0xf06c0eac,%eax
f0131aef:	48                   	dec    %eax
f0131af0:	a3 ac 0e 6c f0       	mov    %eax,0xf06c0eac
				   svaOfNF = point->sva;
f0131af5:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131af8:	8b 40 08             	mov    0x8(%eax),%eax
f0131afb:	a3 b0 8a 65 f0       	mov    %eax,0xf0658ab0
				   return  point;
f0131b00:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131b03:	e9 f8 04 00 00       	jmp    f0132000 <alloc_block_NF+0x5cb>
				   break;
			   }
			   else if (size < point->size){
f0131b08:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131b0b:	8b 40 0c             	mov    0xc(%eax),%eax
f0131b0e:	3b 45 08             	cmp    0x8(%ebp),%eax
f0131b11:	0f 86 d4 00 00 00    	jbe    f0131beb <alloc_block_NF+0x1b6>
				   struct MemBlock * ReturnedBlock = LIST_FIRST(&AvailableMemBlocksList);
f0131b17:	a1 d4 0e 6c f0       	mov    0xf06c0ed4,%eax
f0131b1c:	89 45 f0             	mov    %eax,-0x10(%ebp)
				   ReturnedBlock->sva = point->sva;
f0131b1f:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131b22:	8b 50 08             	mov    0x8(%eax),%edx
f0131b25:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0131b28:	89 50 08             	mov    %edx,0x8(%eax)
				   ReturnedBlock->size = size;
f0131b2b:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0131b2e:	8b 55 08             	mov    0x8(%ebp),%edx
f0131b31:	89 50 0c             	mov    %edx,0xc(%eax)
				   LIST_REMOVE(&AvailableMemBlocksList,ReturnedBlock);
f0131b34:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0131b38:	75 17                	jne    f0131b51 <alloc_block_NF+0x11c>
f0131b3a:	83 ec 04             	sub    $0x4,%esp
f0131b3d:	68 50 ca 13 f0       	push   $0xf013ca50
f0131b42:	68 e9 00 00 00       	push   $0xe9
f0131b47:	68 a7 c9 13 f0       	push   $0xf013c9a7
f0131b4c:	e8 55 e6 fc ff       	call   f01001a6 <_panic>
f0131b51:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0131b54:	8b 00                	mov    (%eax),%eax
f0131b56:	85 c0                	test   %eax,%eax
f0131b58:	74 10                	je     f0131b6a <alloc_block_NF+0x135>
f0131b5a:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0131b5d:	8b 00                	mov    (%eax),%eax
f0131b5f:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0131b62:	8b 52 04             	mov    0x4(%edx),%edx
f0131b65:	89 50 04             	mov    %edx,0x4(%eax)
f0131b68:	eb 0b                	jmp    f0131b75 <alloc_block_NF+0x140>
f0131b6a:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0131b6d:	8b 40 04             	mov    0x4(%eax),%eax
f0131b70:	a3 d8 0e 6c f0       	mov    %eax,0xf06c0ed8
f0131b75:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0131b78:	8b 40 04             	mov    0x4(%eax),%eax
f0131b7b:	85 c0                	test   %eax,%eax
f0131b7d:	74 0f                	je     f0131b8e <alloc_block_NF+0x159>
f0131b7f:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0131b82:	8b 40 04             	mov    0x4(%eax),%eax
f0131b85:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0131b88:	8b 12                	mov    (%edx),%edx
f0131b8a:	89 10                	mov    %edx,(%eax)
f0131b8c:	eb 0a                	jmp    f0131b98 <alloc_block_NF+0x163>
f0131b8e:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0131b91:	8b 00                	mov    (%eax),%eax
f0131b93:	a3 d4 0e 6c f0       	mov    %eax,0xf06c0ed4
f0131b98:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0131b9b:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f0131ba1:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0131ba4:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f0131bab:	a1 e0 0e 6c f0       	mov    0xf06c0ee0,%eax
f0131bb0:	48                   	dec    %eax
f0131bb1:	a3 e0 0e 6c f0       	mov    %eax,0xf06c0ee0
				   svaOfNF = ReturnedBlock->sva;
f0131bb6:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0131bb9:	8b 40 08             	mov    0x8(%eax),%eax
f0131bbc:	a3 b0 8a 65 f0       	mov    %eax,0xf0658ab0
				   point->sva += size;
f0131bc1:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131bc4:	8b 50 08             	mov    0x8(%eax),%edx
f0131bc7:	8b 45 08             	mov    0x8(%ebp),%eax
f0131bca:	01 c2                	add    %eax,%edx
f0131bcc:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131bcf:	89 50 08             	mov    %edx,0x8(%eax)
				   point->size -= size;
f0131bd2:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131bd5:	8b 40 0c             	mov    0xc(%eax),%eax
f0131bd8:	2b 45 08             	sub    0x8(%ebp),%eax
f0131bdb:	89 c2                	mov    %eax,%edx
f0131bdd:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131be0:	89 50 0c             	mov    %edx,0xc(%eax)
				   return ReturnedBlock;
f0131be3:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0131be6:	e9 15 04 00 00       	jmp    f0132000 <alloc_block_NF+0x5cb>
	//TODO: [PROJECT MS1 - BONUS] [DYNAMIC ALLOCATOR] alloc_block_NF
	// Write your code here, remove the panic and write your codestruct MemBlock *point;
	struct MemBlock *point;
	if(svaOfNF == 0)
	{
		LIST_FOREACH(point,&FreeMemBlocksList)
f0131beb:	a1 a8 0e 6c f0       	mov    0xf06c0ea8,%eax
f0131bf0:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0131bf3:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0131bf7:	74 07                	je     f0131c00 <alloc_block_NF+0x1cb>
f0131bf9:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131bfc:	8b 00                	mov    (%eax),%eax
f0131bfe:	eb 05                	jmp    f0131c05 <alloc_block_NF+0x1d0>
f0131c00:	b8 00 00 00 00       	mov    $0x0,%eax
f0131c05:	a3 a8 0e 6c f0       	mov    %eax,0xf06c0ea8
f0131c0a:	a1 a8 0e 6c f0       	mov    0xf06c0ea8,%eax
f0131c0f:	85 c0                	test   %eax,%eax
f0131c11:	0f 85 3e fe ff ff    	jne    f0131a55 <alloc_block_NF+0x20>
f0131c17:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0131c1b:	0f 85 34 fe ff ff    	jne    f0131a55 <alloc_block_NF+0x20>
f0131c21:	e9 d5 03 00 00       	jmp    f0131ffb <alloc_block_NF+0x5c6>
			}
		}
	}
	else
	{
		LIST_FOREACH(point, &FreeMemBlocksList)
f0131c26:	a1 a0 0e 6c f0       	mov    0xf06c0ea0,%eax
f0131c2b:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0131c2e:	e9 b1 01 00 00       	jmp    f0131de4 <alloc_block_NF+0x3af>
		{
			if(point->sva >= svaOfNF)
f0131c33:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131c36:	8b 50 08             	mov    0x8(%eax),%edx
f0131c39:	a1 b0 8a 65 f0       	mov    0xf0658ab0,%eax
f0131c3e:	39 c2                	cmp    %eax,%edx
f0131c40:	0f 82 96 01 00 00    	jb     f0131ddc <alloc_block_NF+0x3a7>
			{
				if(size <= point->size)
f0131c46:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131c49:	8b 40 0c             	mov    0xc(%eax),%eax
f0131c4c:	3b 45 08             	cmp    0x8(%ebp),%eax
f0131c4f:	0f 82 87 01 00 00    	jb     f0131ddc <alloc_block_NF+0x3a7>
				{
				   if(size == point->size){
f0131c55:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131c58:	8b 40 0c             	mov    0xc(%eax),%eax
f0131c5b:	3b 45 08             	cmp    0x8(%ebp),%eax
f0131c5e:	0f 85 95 00 00 00    	jne    f0131cf9 <alloc_block_NF+0x2c4>
					   LIST_REMOVE(&FreeMemBlocksList,point);
f0131c64:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0131c68:	75 17                	jne    f0131c81 <alloc_block_NF+0x24c>
f0131c6a:	83 ec 04             	sub    $0x4,%esp
f0131c6d:	68 50 ca 13 f0       	push   $0xf013ca50
f0131c72:	68 fc 00 00 00       	push   $0xfc
f0131c77:	68 a7 c9 13 f0       	push   $0xf013c9a7
f0131c7c:	e8 25 e5 fc ff       	call   f01001a6 <_panic>
f0131c81:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131c84:	8b 00                	mov    (%eax),%eax
f0131c86:	85 c0                	test   %eax,%eax
f0131c88:	74 10                	je     f0131c9a <alloc_block_NF+0x265>
f0131c8a:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131c8d:	8b 00                	mov    (%eax),%eax
f0131c8f:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0131c92:	8b 52 04             	mov    0x4(%edx),%edx
f0131c95:	89 50 04             	mov    %edx,0x4(%eax)
f0131c98:	eb 0b                	jmp    f0131ca5 <alloc_block_NF+0x270>
f0131c9a:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131c9d:	8b 40 04             	mov    0x4(%eax),%eax
f0131ca0:	a3 a4 0e 6c f0       	mov    %eax,0xf06c0ea4
f0131ca5:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131ca8:	8b 40 04             	mov    0x4(%eax),%eax
f0131cab:	85 c0                	test   %eax,%eax
f0131cad:	74 0f                	je     f0131cbe <alloc_block_NF+0x289>
f0131caf:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131cb2:	8b 40 04             	mov    0x4(%eax),%eax
f0131cb5:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0131cb8:	8b 12                	mov    (%edx),%edx
f0131cba:	89 10                	mov    %edx,(%eax)
f0131cbc:	eb 0a                	jmp    f0131cc8 <alloc_block_NF+0x293>
f0131cbe:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131cc1:	8b 00                	mov    (%eax),%eax
f0131cc3:	a3 a0 0e 6c f0       	mov    %eax,0xf06c0ea0
f0131cc8:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131ccb:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f0131cd1:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131cd4:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f0131cdb:	a1 ac 0e 6c f0       	mov    0xf06c0eac,%eax
f0131ce0:	48                   	dec    %eax
f0131ce1:	a3 ac 0e 6c f0       	mov    %eax,0xf06c0eac
					   svaOfNF = point->sva;
f0131ce6:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131ce9:	8b 40 08             	mov    0x8(%eax),%eax
f0131cec:	a3 b0 8a 65 f0       	mov    %eax,0xf0658ab0
					   return  point;
f0131cf1:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131cf4:	e9 07 03 00 00       	jmp    f0132000 <alloc_block_NF+0x5cb>
				   }
				   else if (size < point->size){
f0131cf9:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131cfc:	8b 40 0c             	mov    0xc(%eax),%eax
f0131cff:	3b 45 08             	cmp    0x8(%ebp),%eax
f0131d02:	0f 86 d4 00 00 00    	jbe    f0131ddc <alloc_block_NF+0x3a7>
					   struct MemBlock * ReturnedBlock = LIST_FIRST(&AvailableMemBlocksList);
f0131d08:	a1 d4 0e 6c f0       	mov    0xf06c0ed4,%eax
f0131d0d:	89 45 e8             	mov    %eax,-0x18(%ebp)
					   ReturnedBlock->sva = point->sva;
f0131d10:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131d13:	8b 50 08             	mov    0x8(%eax),%edx
f0131d16:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0131d19:	89 50 08             	mov    %edx,0x8(%eax)
					   ReturnedBlock->size = size;
f0131d1c:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0131d1f:	8b 55 08             	mov    0x8(%ebp),%edx
f0131d22:	89 50 0c             	mov    %edx,0xc(%eax)
					   LIST_REMOVE(&AvailableMemBlocksList,ReturnedBlock);
f0131d25:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
f0131d29:	75 17                	jne    f0131d42 <alloc_block_NF+0x30d>
f0131d2b:	83 ec 04             	sub    $0x4,%esp
f0131d2e:	68 50 ca 13 f0       	push   $0xf013ca50
f0131d33:	68 04 01 00 00       	push   $0x104
f0131d38:	68 a7 c9 13 f0       	push   $0xf013c9a7
f0131d3d:	e8 64 e4 fc ff       	call   f01001a6 <_panic>
f0131d42:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0131d45:	8b 00                	mov    (%eax),%eax
f0131d47:	85 c0                	test   %eax,%eax
f0131d49:	74 10                	je     f0131d5b <alloc_block_NF+0x326>
f0131d4b:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0131d4e:	8b 00                	mov    (%eax),%eax
f0131d50:	8b 55 e8             	mov    -0x18(%ebp),%edx
f0131d53:	8b 52 04             	mov    0x4(%edx),%edx
f0131d56:	89 50 04             	mov    %edx,0x4(%eax)
f0131d59:	eb 0b                	jmp    f0131d66 <alloc_block_NF+0x331>
f0131d5b:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0131d5e:	8b 40 04             	mov    0x4(%eax),%eax
f0131d61:	a3 d8 0e 6c f0       	mov    %eax,0xf06c0ed8
f0131d66:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0131d69:	8b 40 04             	mov    0x4(%eax),%eax
f0131d6c:	85 c0                	test   %eax,%eax
f0131d6e:	74 0f                	je     f0131d7f <alloc_block_NF+0x34a>
f0131d70:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0131d73:	8b 40 04             	mov    0x4(%eax),%eax
f0131d76:	8b 55 e8             	mov    -0x18(%ebp),%edx
f0131d79:	8b 12                	mov    (%edx),%edx
f0131d7b:	89 10                	mov    %edx,(%eax)
f0131d7d:	eb 0a                	jmp    f0131d89 <alloc_block_NF+0x354>
f0131d7f:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0131d82:	8b 00                	mov    (%eax),%eax
f0131d84:	a3 d4 0e 6c f0       	mov    %eax,0xf06c0ed4
f0131d89:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0131d8c:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f0131d92:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0131d95:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f0131d9c:	a1 e0 0e 6c f0       	mov    0xf06c0ee0,%eax
f0131da1:	48                   	dec    %eax
f0131da2:	a3 e0 0e 6c f0       	mov    %eax,0xf06c0ee0
					   svaOfNF = ReturnedBlock->sva;
f0131da7:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0131daa:	8b 40 08             	mov    0x8(%eax),%eax
f0131dad:	a3 b0 8a 65 f0       	mov    %eax,0xf0658ab0
					   point->sva += size;
f0131db2:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131db5:	8b 50 08             	mov    0x8(%eax),%edx
f0131db8:	8b 45 08             	mov    0x8(%ebp),%eax
f0131dbb:	01 c2                	add    %eax,%edx
f0131dbd:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131dc0:	89 50 08             	mov    %edx,0x8(%eax)
					   point->size -= size;
f0131dc3:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131dc6:	8b 40 0c             	mov    0xc(%eax),%eax
f0131dc9:	2b 45 08             	sub    0x8(%ebp),%eax
f0131dcc:	89 c2                	mov    %eax,%edx
f0131dce:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131dd1:	89 50 0c             	mov    %edx,0xc(%eax)
					   return ReturnedBlock;
f0131dd4:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0131dd7:	e9 24 02 00 00       	jmp    f0132000 <alloc_block_NF+0x5cb>
			}
		}
	}
	else
	{
		LIST_FOREACH(point, &FreeMemBlocksList)
f0131ddc:	a1 a8 0e 6c f0       	mov    0xf06c0ea8,%eax
f0131de1:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0131de4:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0131de8:	74 07                	je     f0131df1 <alloc_block_NF+0x3bc>
f0131dea:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131ded:	8b 00                	mov    (%eax),%eax
f0131def:	eb 05                	jmp    f0131df6 <alloc_block_NF+0x3c1>
f0131df1:	b8 00 00 00 00       	mov    $0x0,%eax
f0131df6:	a3 a8 0e 6c f0       	mov    %eax,0xf06c0ea8
f0131dfb:	a1 a8 0e 6c f0       	mov    0xf06c0ea8,%eax
f0131e00:	85 c0                	test   %eax,%eax
f0131e02:	0f 85 2b fe ff ff    	jne    f0131c33 <alloc_block_NF+0x1fe>
f0131e08:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0131e0c:	0f 85 21 fe ff ff    	jne    f0131c33 <alloc_block_NF+0x1fe>
					   return ReturnedBlock;
				   }
				}
			}
		}
		LIST_FOREACH(point, &FreeMemBlocksList)
f0131e12:	a1 a0 0e 6c f0       	mov    0xf06c0ea0,%eax
f0131e17:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0131e1a:	e9 ae 01 00 00       	jmp    f0131fcd <alloc_block_NF+0x598>
		{
			if(point->sva < svaOfNF)
f0131e1f:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131e22:	8b 50 08             	mov    0x8(%eax),%edx
f0131e25:	a1 b0 8a 65 f0       	mov    0xf0658ab0,%eax
f0131e2a:	39 c2                	cmp    %eax,%edx
f0131e2c:	0f 83 93 01 00 00    	jae    f0131fc5 <alloc_block_NF+0x590>
			{
				if(size <= point->size)
f0131e32:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131e35:	8b 40 0c             	mov    0xc(%eax),%eax
f0131e38:	3b 45 08             	cmp    0x8(%ebp),%eax
f0131e3b:	0f 82 84 01 00 00    	jb     f0131fc5 <alloc_block_NF+0x590>
				{
				   if(size == point->size){
f0131e41:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131e44:	8b 40 0c             	mov    0xc(%eax),%eax
f0131e47:	3b 45 08             	cmp    0x8(%ebp),%eax
f0131e4a:	0f 85 95 00 00 00    	jne    f0131ee5 <alloc_block_NF+0x4b0>
					   LIST_REMOVE(&FreeMemBlocksList,point);
f0131e50:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0131e54:	75 17                	jne    f0131e6d <alloc_block_NF+0x438>
f0131e56:	83 ec 04             	sub    $0x4,%esp
f0131e59:	68 50 ca 13 f0       	push   $0xf013ca50
f0131e5e:	68 14 01 00 00       	push   $0x114
f0131e63:	68 a7 c9 13 f0       	push   $0xf013c9a7
f0131e68:	e8 39 e3 fc ff       	call   f01001a6 <_panic>
f0131e6d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131e70:	8b 00                	mov    (%eax),%eax
f0131e72:	85 c0                	test   %eax,%eax
f0131e74:	74 10                	je     f0131e86 <alloc_block_NF+0x451>
f0131e76:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131e79:	8b 00                	mov    (%eax),%eax
f0131e7b:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0131e7e:	8b 52 04             	mov    0x4(%edx),%edx
f0131e81:	89 50 04             	mov    %edx,0x4(%eax)
f0131e84:	eb 0b                	jmp    f0131e91 <alloc_block_NF+0x45c>
f0131e86:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131e89:	8b 40 04             	mov    0x4(%eax),%eax
f0131e8c:	a3 a4 0e 6c f0       	mov    %eax,0xf06c0ea4
f0131e91:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131e94:	8b 40 04             	mov    0x4(%eax),%eax
f0131e97:	85 c0                	test   %eax,%eax
f0131e99:	74 0f                	je     f0131eaa <alloc_block_NF+0x475>
f0131e9b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131e9e:	8b 40 04             	mov    0x4(%eax),%eax
f0131ea1:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0131ea4:	8b 12                	mov    (%edx),%edx
f0131ea6:	89 10                	mov    %edx,(%eax)
f0131ea8:	eb 0a                	jmp    f0131eb4 <alloc_block_NF+0x47f>
f0131eaa:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131ead:	8b 00                	mov    (%eax),%eax
f0131eaf:	a3 a0 0e 6c f0       	mov    %eax,0xf06c0ea0
f0131eb4:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131eb7:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f0131ebd:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131ec0:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f0131ec7:	a1 ac 0e 6c f0       	mov    0xf06c0eac,%eax
f0131ecc:	48                   	dec    %eax
f0131ecd:	a3 ac 0e 6c f0       	mov    %eax,0xf06c0eac
					   svaOfNF = point->sva;
f0131ed2:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131ed5:	8b 40 08             	mov    0x8(%eax),%eax
f0131ed8:	a3 b0 8a 65 f0       	mov    %eax,0xf0658ab0
					   return  point;
f0131edd:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131ee0:	e9 1b 01 00 00       	jmp    f0132000 <alloc_block_NF+0x5cb>
				   }
				   else if (size < point->size){
f0131ee5:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131ee8:	8b 40 0c             	mov    0xc(%eax),%eax
f0131eeb:	3b 45 08             	cmp    0x8(%ebp),%eax
f0131eee:	0f 86 d1 00 00 00    	jbe    f0131fc5 <alloc_block_NF+0x590>
					   struct MemBlock * ReturnedBlock = LIST_FIRST(&AvailableMemBlocksList);
f0131ef4:	a1 d4 0e 6c f0       	mov    0xf06c0ed4,%eax
f0131ef9:	89 45 ec             	mov    %eax,-0x14(%ebp)
					   ReturnedBlock->sva = point->sva;
f0131efc:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131eff:	8b 50 08             	mov    0x8(%eax),%edx
f0131f02:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0131f05:	89 50 08             	mov    %edx,0x8(%eax)
					   ReturnedBlock->size = size;
f0131f08:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0131f0b:	8b 55 08             	mov    0x8(%ebp),%edx
f0131f0e:	89 50 0c             	mov    %edx,0xc(%eax)
					   LIST_REMOVE(&AvailableMemBlocksList,ReturnedBlock);
f0131f11:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0131f15:	75 17                	jne    f0131f2e <alloc_block_NF+0x4f9>
f0131f17:	83 ec 04             	sub    $0x4,%esp
f0131f1a:	68 50 ca 13 f0       	push   $0xf013ca50
f0131f1f:	68 1c 01 00 00       	push   $0x11c
f0131f24:	68 a7 c9 13 f0       	push   $0xf013c9a7
f0131f29:	e8 78 e2 fc ff       	call   f01001a6 <_panic>
f0131f2e:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0131f31:	8b 00                	mov    (%eax),%eax
f0131f33:	85 c0                	test   %eax,%eax
f0131f35:	74 10                	je     f0131f47 <alloc_block_NF+0x512>
f0131f37:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0131f3a:	8b 00                	mov    (%eax),%eax
f0131f3c:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0131f3f:	8b 52 04             	mov    0x4(%edx),%edx
f0131f42:	89 50 04             	mov    %edx,0x4(%eax)
f0131f45:	eb 0b                	jmp    f0131f52 <alloc_block_NF+0x51d>
f0131f47:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0131f4a:	8b 40 04             	mov    0x4(%eax),%eax
f0131f4d:	a3 d8 0e 6c f0       	mov    %eax,0xf06c0ed8
f0131f52:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0131f55:	8b 40 04             	mov    0x4(%eax),%eax
f0131f58:	85 c0                	test   %eax,%eax
f0131f5a:	74 0f                	je     f0131f6b <alloc_block_NF+0x536>
f0131f5c:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0131f5f:	8b 40 04             	mov    0x4(%eax),%eax
f0131f62:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0131f65:	8b 12                	mov    (%edx),%edx
f0131f67:	89 10                	mov    %edx,(%eax)
f0131f69:	eb 0a                	jmp    f0131f75 <alloc_block_NF+0x540>
f0131f6b:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0131f6e:	8b 00                	mov    (%eax),%eax
f0131f70:	a3 d4 0e 6c f0       	mov    %eax,0xf06c0ed4
f0131f75:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0131f78:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f0131f7e:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0131f81:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f0131f88:	a1 e0 0e 6c f0       	mov    0xf06c0ee0,%eax
f0131f8d:	48                   	dec    %eax
f0131f8e:	a3 e0 0e 6c f0       	mov    %eax,0xf06c0ee0
					   svaOfNF = ReturnedBlock->sva;
f0131f93:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0131f96:	8b 40 08             	mov    0x8(%eax),%eax
f0131f99:	a3 b0 8a 65 f0       	mov    %eax,0xf0658ab0
					   point->sva += size;
f0131f9e:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131fa1:	8b 50 08             	mov    0x8(%eax),%edx
f0131fa4:	8b 45 08             	mov    0x8(%ebp),%eax
f0131fa7:	01 c2                	add    %eax,%edx
f0131fa9:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131fac:	89 50 08             	mov    %edx,0x8(%eax)
					   point->size -= size;
f0131faf:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131fb2:	8b 40 0c             	mov    0xc(%eax),%eax
f0131fb5:	2b 45 08             	sub    0x8(%ebp),%eax
f0131fb8:	89 c2                	mov    %eax,%edx
f0131fba:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131fbd:	89 50 0c             	mov    %edx,0xc(%eax)
					   return ReturnedBlock;
f0131fc0:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0131fc3:	eb 3b                	jmp    f0132000 <alloc_block_NF+0x5cb>
					   return ReturnedBlock;
				   }
				}
			}
		}
		LIST_FOREACH(point, &FreeMemBlocksList)
f0131fc5:	a1 a8 0e 6c f0       	mov    0xf06c0ea8,%eax
f0131fca:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0131fcd:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0131fd1:	74 07                	je     f0131fda <alloc_block_NF+0x5a5>
f0131fd3:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131fd6:	8b 00                	mov    (%eax),%eax
f0131fd8:	eb 05                	jmp    f0131fdf <alloc_block_NF+0x5aa>
f0131fda:	b8 00 00 00 00       	mov    $0x0,%eax
f0131fdf:	a3 a8 0e 6c f0       	mov    %eax,0xf06c0ea8
f0131fe4:	a1 a8 0e 6c f0       	mov    0xf06c0ea8,%eax
f0131fe9:	85 c0                	test   %eax,%eax
f0131feb:	0f 85 2e fe ff ff    	jne    f0131e1f <alloc_block_NF+0x3ea>
f0131ff1:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0131ff5:	0f 85 24 fe ff ff    	jne    f0131e1f <alloc_block_NF+0x3ea>
				   }
				}
			}
		}
	}
	return NULL;
f0131ffb:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0132000:	c9                   	leave  
f0132001:	c3                   	ret    

f0132002 <insert_sorted_with_merge_freeList>:

//===================================================
// [8] INSERT BLOCK (SORTED WITH MERGE) IN FREE LIST:
//===================================================
void insert_sorted_with_merge_freeList(struct MemBlock *blockToInsert)
{
f0132002:	55                   	push   %ebp
f0132003:	89 e5                	mov    %esp,%ebp
f0132005:	83 ec 18             	sub    $0x18,%esp
	//cprintf("BEFORE INSERT with MERGE: insert [%x, %x)\n=====================\n", blockToInsert->sva, blockToInsert->sva + blockToInsert->size);
	//print_mem_block_lists() ;

	//TODO: [PROJECT MS1] [DYNAMIC ALLOCATOR] insert_sorted_with_merge_freeList
	// Write your code here, remove the panic and write your code
	struct MemBlock *head = LIST_FIRST(&FreeMemBlocksList) ;
f0132008:	a1 a0 0e 6c f0       	mov    0xf06c0ea0,%eax
f013200d:	89 45 f0             	mov    %eax,-0x10(%ebp)
	struct MemBlock *tail = LIST_LAST(&FreeMemBlocksList) ;
f0132010:	a1 a4 0e 6c f0       	mov    0xf06c0ea4,%eax
f0132015:	89 45 ec             	mov    %eax,-0x14(%ebp)

	if (LIST_EMPTY(&FreeMemBlocksList) || blockToInsert->sva <= head->sva)
f0132018:	a1 a0 0e 6c f0       	mov    0xf06c0ea0,%eax
f013201d:	85 c0                	test   %eax,%eax
f013201f:	74 14                	je     f0132035 <insert_sorted_with_merge_freeList+0x33>
f0132021:	8b 45 08             	mov    0x8(%ebp),%eax
f0132024:	8b 50 08             	mov    0x8(%eax),%edx
f0132027:	8b 45 f0             	mov    -0x10(%ebp),%eax
f013202a:	8b 40 08             	mov    0x8(%eax),%eax
f013202d:	39 c2                	cmp    %eax,%edx
f013202f:	0f 87 9b 01 00 00    	ja     f01321d0 <insert_sorted_with_merge_freeList+0x1ce>
	{
		LIST_INSERT_HEAD(&FreeMemBlocksList, blockToInsert);
f0132035:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0132039:	75 17                	jne    f0132052 <insert_sorted_with_merge_freeList+0x50>
f013203b:	83 ec 04             	sub    $0x4,%esp
f013203e:	68 84 c9 13 f0       	push   $0xf013c984
f0132043:	68 38 01 00 00       	push   $0x138
f0132048:	68 a7 c9 13 f0       	push   $0xf013c9a7
f013204d:	e8 54 e1 fc ff       	call   f01001a6 <_panic>
f0132052:	8b 15 a0 0e 6c f0    	mov    0xf06c0ea0,%edx
f0132058:	8b 45 08             	mov    0x8(%ebp),%eax
f013205b:	89 10                	mov    %edx,(%eax)
f013205d:	8b 45 08             	mov    0x8(%ebp),%eax
f0132060:	8b 00                	mov    (%eax),%eax
f0132062:	85 c0                	test   %eax,%eax
f0132064:	74 0d                	je     f0132073 <insert_sorted_with_merge_freeList+0x71>
f0132066:	a1 a0 0e 6c f0       	mov    0xf06c0ea0,%eax
f013206b:	8b 55 08             	mov    0x8(%ebp),%edx
f013206e:	89 50 04             	mov    %edx,0x4(%eax)
f0132071:	eb 08                	jmp    f013207b <insert_sorted_with_merge_freeList+0x79>
f0132073:	8b 45 08             	mov    0x8(%ebp),%eax
f0132076:	a3 a4 0e 6c f0       	mov    %eax,0xf06c0ea4
f013207b:	8b 45 08             	mov    0x8(%ebp),%eax
f013207e:	a3 a0 0e 6c f0       	mov    %eax,0xf06c0ea0
f0132083:	8b 45 08             	mov    0x8(%ebp),%eax
f0132086:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f013208d:	a1 ac 0e 6c f0       	mov    0xf06c0eac,%eax
f0132092:	40                   	inc    %eax
f0132093:	a3 ac 0e 6c f0       	mov    %eax,0xf06c0eac
		if(head != NULL && blockToInsert->sva + blockToInsert->size == head->sva)
f0132098:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f013209c:	0f 84 a8 06 00 00    	je     f013274a <insert_sorted_with_merge_freeList+0x748>
f01320a2:	8b 45 08             	mov    0x8(%ebp),%eax
f01320a5:	8b 50 08             	mov    0x8(%eax),%edx
f01320a8:	8b 45 08             	mov    0x8(%ebp),%eax
f01320ab:	8b 40 0c             	mov    0xc(%eax),%eax
f01320ae:	01 c2                	add    %eax,%edx
f01320b0:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01320b3:	8b 40 08             	mov    0x8(%eax),%eax
f01320b6:	39 c2                	cmp    %eax,%edx
f01320b8:	0f 85 8c 06 00 00    	jne    f013274a <insert_sorted_with_merge_freeList+0x748>
		{
			blockToInsert->size += head->size;
f01320be:	8b 45 08             	mov    0x8(%ebp),%eax
f01320c1:	8b 50 0c             	mov    0xc(%eax),%edx
f01320c4:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01320c7:	8b 40 0c             	mov    0xc(%eax),%eax
f01320ca:	01 c2                	add    %eax,%edx
f01320cc:	8b 45 08             	mov    0x8(%ebp),%eax
f01320cf:	89 50 0c             	mov    %edx,0xc(%eax)
			LIST_REMOVE(&FreeMemBlocksList, head);
f01320d2:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f01320d6:	75 17                	jne    f01320ef <insert_sorted_with_merge_freeList+0xed>
f01320d8:	83 ec 04             	sub    $0x4,%esp
f01320db:	68 50 ca 13 f0       	push   $0xf013ca50
f01320e0:	68 3c 01 00 00       	push   $0x13c
f01320e5:	68 a7 c9 13 f0       	push   $0xf013c9a7
f01320ea:	e8 b7 e0 fc ff       	call   f01001a6 <_panic>
f01320ef:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01320f2:	8b 00                	mov    (%eax),%eax
f01320f4:	85 c0                	test   %eax,%eax
f01320f6:	74 10                	je     f0132108 <insert_sorted_with_merge_freeList+0x106>
f01320f8:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01320fb:	8b 00                	mov    (%eax),%eax
f01320fd:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0132100:	8b 52 04             	mov    0x4(%edx),%edx
f0132103:	89 50 04             	mov    %edx,0x4(%eax)
f0132106:	eb 0b                	jmp    f0132113 <insert_sorted_with_merge_freeList+0x111>
f0132108:	8b 45 f0             	mov    -0x10(%ebp),%eax
f013210b:	8b 40 04             	mov    0x4(%eax),%eax
f013210e:	a3 a4 0e 6c f0       	mov    %eax,0xf06c0ea4
f0132113:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0132116:	8b 40 04             	mov    0x4(%eax),%eax
f0132119:	85 c0                	test   %eax,%eax
f013211b:	74 0f                	je     f013212c <insert_sorted_with_merge_freeList+0x12a>
f013211d:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0132120:	8b 40 04             	mov    0x4(%eax),%eax
f0132123:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0132126:	8b 12                	mov    (%edx),%edx
f0132128:	89 10                	mov    %edx,(%eax)
f013212a:	eb 0a                	jmp    f0132136 <insert_sorted_with_merge_freeList+0x134>
f013212c:	8b 45 f0             	mov    -0x10(%ebp),%eax
f013212f:	8b 00                	mov    (%eax),%eax
f0132131:	a3 a0 0e 6c f0       	mov    %eax,0xf06c0ea0
f0132136:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0132139:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f013213f:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0132142:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f0132149:	a1 ac 0e 6c f0       	mov    0xf06c0eac,%eax
f013214e:	48                   	dec    %eax
f013214f:	a3 ac 0e 6c f0       	mov    %eax,0xf06c0eac
			head->size = 0;
f0132154:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0132157:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
			head->sva = 0;
f013215e:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0132161:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
			LIST_INSERT_HEAD(&AvailableMemBlocksList, head);
f0132168:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f013216c:	75 17                	jne    f0132185 <insert_sorted_with_merge_freeList+0x183>
f013216e:	83 ec 04             	sub    $0x4,%esp
f0132171:	68 84 c9 13 f0       	push   $0xf013c984
f0132176:	68 3f 01 00 00       	push   $0x13f
f013217b:	68 a7 c9 13 f0       	push   $0xf013c9a7
f0132180:	e8 21 e0 fc ff       	call   f01001a6 <_panic>
f0132185:	8b 15 d4 0e 6c f0    	mov    0xf06c0ed4,%edx
f013218b:	8b 45 f0             	mov    -0x10(%ebp),%eax
f013218e:	89 10                	mov    %edx,(%eax)
f0132190:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0132193:	8b 00                	mov    (%eax),%eax
f0132195:	85 c0                	test   %eax,%eax
f0132197:	74 0d                	je     f01321a6 <insert_sorted_with_merge_freeList+0x1a4>
f0132199:	a1 d4 0e 6c f0       	mov    0xf06c0ed4,%eax
f013219e:	8b 55 f0             	mov    -0x10(%ebp),%edx
f01321a1:	89 50 04             	mov    %edx,0x4(%eax)
f01321a4:	eb 08                	jmp    f01321ae <insert_sorted_with_merge_freeList+0x1ac>
f01321a6:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01321a9:	a3 d8 0e 6c f0       	mov    %eax,0xf06c0ed8
f01321ae:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01321b1:	a3 d4 0e 6c f0       	mov    %eax,0xf06c0ed4
f01321b6:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01321b9:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f01321c0:	a1 e0 0e 6c f0       	mov    0xf06c0ee0,%eax
f01321c5:	40                   	inc    %eax
f01321c6:	a3 e0 0e 6c f0       	mov    %eax,0xf06c0ee0
	struct MemBlock *tail = LIST_LAST(&FreeMemBlocksList) ;

	if (LIST_EMPTY(&FreeMemBlocksList) || blockToInsert->sva <= head->sva)
	{
		LIST_INSERT_HEAD(&FreeMemBlocksList, blockToInsert);
		if(head != NULL && blockToInsert->sva + blockToInsert->size == head->sva)
f01321cb:	e9 7a 05 00 00       	jmp    f013274a <insert_sorted_with_merge_freeList+0x748>
			head->size = 0;
			head->sva = 0;
			LIST_INSERT_HEAD(&AvailableMemBlocksList, head);
		}
	}
	else if (blockToInsert->sva >= tail->sva)
f01321d0:	8b 45 08             	mov    0x8(%ebp),%eax
f01321d3:	8b 50 08             	mov    0x8(%eax),%edx
f01321d6:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01321d9:	8b 40 08             	mov    0x8(%eax),%eax
f01321dc:	39 c2                	cmp    %eax,%edx
f01321de:	0f 82 14 01 00 00    	jb     f01322f8 <insert_sorted_with_merge_freeList+0x2f6>
	{
		if(tail->sva + tail->size == blockToInsert->sva)
f01321e4:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01321e7:	8b 50 08             	mov    0x8(%eax),%edx
f01321ea:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01321ed:	8b 40 0c             	mov    0xc(%eax),%eax
f01321f0:	01 c2                	add    %eax,%edx
f01321f2:	8b 45 08             	mov    0x8(%ebp),%eax
f01321f5:	8b 40 08             	mov    0x8(%eax),%eax
f01321f8:	39 c2                	cmp    %eax,%edx
f01321fa:	0f 85 90 00 00 00    	jne    f0132290 <insert_sorted_with_merge_freeList+0x28e>
		{
			tail->size += blockToInsert->size;
f0132200:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0132203:	8b 50 0c             	mov    0xc(%eax),%edx
f0132206:	8b 45 08             	mov    0x8(%ebp),%eax
f0132209:	8b 40 0c             	mov    0xc(%eax),%eax
f013220c:	01 c2                	add    %eax,%edx
f013220e:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0132211:	89 50 0c             	mov    %edx,0xc(%eax)
			blockToInsert->size = 0;
f0132214:	8b 45 08             	mov    0x8(%ebp),%eax
f0132217:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
			blockToInsert->sva = 0;
f013221e:	8b 45 08             	mov    0x8(%ebp),%eax
f0132221:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
			LIST_INSERT_HEAD(&AvailableMemBlocksList, blockToInsert);
f0132228:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f013222c:	75 17                	jne    f0132245 <insert_sorted_with_merge_freeList+0x243>
f013222e:	83 ec 04             	sub    $0x4,%esp
f0132231:	68 84 c9 13 f0       	push   $0xf013c984
f0132236:	68 49 01 00 00       	push   $0x149
f013223b:	68 a7 c9 13 f0       	push   $0xf013c9a7
f0132240:	e8 61 df fc ff       	call   f01001a6 <_panic>
f0132245:	8b 15 d4 0e 6c f0    	mov    0xf06c0ed4,%edx
f013224b:	8b 45 08             	mov    0x8(%ebp),%eax
f013224e:	89 10                	mov    %edx,(%eax)
f0132250:	8b 45 08             	mov    0x8(%ebp),%eax
f0132253:	8b 00                	mov    (%eax),%eax
f0132255:	85 c0                	test   %eax,%eax
f0132257:	74 0d                	je     f0132266 <insert_sorted_with_merge_freeList+0x264>
f0132259:	a1 d4 0e 6c f0       	mov    0xf06c0ed4,%eax
f013225e:	8b 55 08             	mov    0x8(%ebp),%edx
f0132261:	89 50 04             	mov    %edx,0x4(%eax)
f0132264:	eb 08                	jmp    f013226e <insert_sorted_with_merge_freeList+0x26c>
f0132266:	8b 45 08             	mov    0x8(%ebp),%eax
f0132269:	a3 d8 0e 6c f0       	mov    %eax,0xf06c0ed8
f013226e:	8b 45 08             	mov    0x8(%ebp),%eax
f0132271:	a3 d4 0e 6c f0       	mov    %eax,0xf06c0ed4
f0132276:	8b 45 08             	mov    0x8(%ebp),%eax
f0132279:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f0132280:	a1 e0 0e 6c f0       	mov    0xf06c0ee0,%eax
f0132285:	40                   	inc    %eax
f0132286:	a3 e0 0e 6c f0       	mov    %eax,0xf06c0ee0
			}
		}
	}
	//cprintf("\nAFTER INSERT with MERGE:\n=====================\n");
	//print_mem_block_lists();
}
f013228b:	e9 bb 04 00 00       	jmp    f013274b <insert_sorted_with_merge_freeList+0x749>
			blockToInsert->size = 0;
			blockToInsert->sva = 0;
			LIST_INSERT_HEAD(&AvailableMemBlocksList, blockToInsert);
		}
		else
			LIST_INSERT_TAIL(&FreeMemBlocksList, blockToInsert);
f0132290:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0132294:	75 17                	jne    f01322ad <insert_sorted_with_merge_freeList+0x2ab>
f0132296:	83 ec 04             	sub    $0x4,%esp
f0132299:	68 f8 c9 13 f0       	push   $0xf013c9f8
f013229e:	68 4c 01 00 00       	push   $0x14c
f01322a3:	68 a7 c9 13 f0       	push   $0xf013c9a7
f01322a8:	e8 f9 de fc ff       	call   f01001a6 <_panic>
f01322ad:	8b 15 a4 0e 6c f0    	mov    0xf06c0ea4,%edx
f01322b3:	8b 45 08             	mov    0x8(%ebp),%eax
f01322b6:	89 50 04             	mov    %edx,0x4(%eax)
f01322b9:	8b 45 08             	mov    0x8(%ebp),%eax
f01322bc:	8b 40 04             	mov    0x4(%eax),%eax
f01322bf:	85 c0                	test   %eax,%eax
f01322c1:	74 0c                	je     f01322cf <insert_sorted_with_merge_freeList+0x2cd>
f01322c3:	a1 a4 0e 6c f0       	mov    0xf06c0ea4,%eax
f01322c8:	8b 55 08             	mov    0x8(%ebp),%edx
f01322cb:	89 10                	mov    %edx,(%eax)
f01322cd:	eb 08                	jmp    f01322d7 <insert_sorted_with_merge_freeList+0x2d5>
f01322cf:	8b 45 08             	mov    0x8(%ebp),%eax
f01322d2:	a3 a0 0e 6c f0       	mov    %eax,0xf06c0ea0
f01322d7:	8b 45 08             	mov    0x8(%ebp),%eax
f01322da:	a3 a4 0e 6c f0       	mov    %eax,0xf06c0ea4
f01322df:	8b 45 08             	mov    0x8(%ebp),%eax
f01322e2:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f01322e8:	a1 ac 0e 6c f0       	mov    0xf06c0eac,%eax
f01322ed:	40                   	inc    %eax
f01322ee:	a3 ac 0e 6c f0       	mov    %eax,0xf06c0eac
			}
		}
	}
	//cprintf("\nAFTER INSERT with MERGE:\n=====================\n");
	//print_mem_block_lists();
}
f01322f3:	e9 53 04 00 00       	jmp    f013274b <insert_sorted_with_merge_freeList+0x749>
	}
	else
	{
		struct MemBlock *currentBlock;
		struct MemBlock *nextBlock;
		LIST_FOREACH(currentBlock, &FreeMemBlocksList)
f01322f8:	a1 a0 0e 6c f0       	mov    0xf06c0ea0,%eax
f01322fd:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0132300:	e9 15 04 00 00       	jmp    f013271a <insert_sorted_with_merge_freeList+0x718>
		{
			nextBlock = LIST_NEXT(currentBlock);
f0132305:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132308:	8b 00                	mov    (%eax),%eax
f013230a:	89 45 e8             	mov    %eax,-0x18(%ebp)
			if(blockToInsert->sva > currentBlock->sva && blockToInsert->sva < nextBlock->sva)
f013230d:	8b 45 08             	mov    0x8(%ebp),%eax
f0132310:	8b 50 08             	mov    0x8(%eax),%edx
f0132313:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132316:	8b 40 08             	mov    0x8(%eax),%eax
f0132319:	39 c2                	cmp    %eax,%edx
f013231b:	0f 86 f1 03 00 00    	jbe    f0132712 <insert_sorted_with_merge_freeList+0x710>
f0132321:	8b 45 08             	mov    0x8(%ebp),%eax
f0132324:	8b 50 08             	mov    0x8(%eax),%edx
f0132327:	8b 45 e8             	mov    -0x18(%ebp),%eax
f013232a:	8b 40 08             	mov    0x8(%eax),%eax
f013232d:	39 c2                	cmp    %eax,%edx
f013232f:	0f 83 dd 03 00 00    	jae    f0132712 <insert_sorted_with_merge_freeList+0x710>
			{
				if(currentBlock->sva + currentBlock->size == blockToInsert->sva)
f0132335:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132338:	8b 50 08             	mov    0x8(%eax),%edx
f013233b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f013233e:	8b 40 0c             	mov    0xc(%eax),%eax
f0132341:	01 c2                	add    %eax,%edx
f0132343:	8b 45 08             	mov    0x8(%ebp),%eax
f0132346:	8b 40 08             	mov    0x8(%eax),%eax
f0132349:	39 c2                	cmp    %eax,%edx
f013234b:	0f 85 b9 01 00 00    	jne    f013250a <insert_sorted_with_merge_freeList+0x508>
				{
					if(blockToInsert->sva + blockToInsert->size == nextBlock->sva)
f0132351:	8b 45 08             	mov    0x8(%ebp),%eax
f0132354:	8b 50 08             	mov    0x8(%eax),%edx
f0132357:	8b 45 08             	mov    0x8(%ebp),%eax
f013235a:	8b 40 0c             	mov    0xc(%eax),%eax
f013235d:	01 c2                	add    %eax,%edx
f013235f:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0132362:	8b 40 08             	mov    0x8(%eax),%eax
f0132365:	39 c2                	cmp    %eax,%edx
f0132367:	0f 85 0d 01 00 00    	jne    f013247a <insert_sorted_with_merge_freeList+0x478>
					{
						currentBlock->size += nextBlock->size;
f013236d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132370:	8b 50 0c             	mov    0xc(%eax),%edx
f0132373:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0132376:	8b 40 0c             	mov    0xc(%eax),%eax
f0132379:	01 c2                	add    %eax,%edx
f013237b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f013237e:	89 50 0c             	mov    %edx,0xc(%eax)
						LIST_REMOVE(&FreeMemBlocksList, nextBlock);
f0132381:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
f0132385:	75 17                	jne    f013239e <insert_sorted_with_merge_freeList+0x39c>
f0132387:	83 ec 04             	sub    $0x4,%esp
f013238a:	68 50 ca 13 f0       	push   $0xf013ca50
f013238f:	68 5c 01 00 00       	push   $0x15c
f0132394:	68 a7 c9 13 f0       	push   $0xf013c9a7
f0132399:	e8 08 de fc ff       	call   f01001a6 <_panic>
f013239e:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01323a1:	8b 00                	mov    (%eax),%eax
f01323a3:	85 c0                	test   %eax,%eax
f01323a5:	74 10                	je     f01323b7 <insert_sorted_with_merge_freeList+0x3b5>
f01323a7:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01323aa:	8b 00                	mov    (%eax),%eax
f01323ac:	8b 55 e8             	mov    -0x18(%ebp),%edx
f01323af:	8b 52 04             	mov    0x4(%edx),%edx
f01323b2:	89 50 04             	mov    %edx,0x4(%eax)
f01323b5:	eb 0b                	jmp    f01323c2 <insert_sorted_with_merge_freeList+0x3c0>
f01323b7:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01323ba:	8b 40 04             	mov    0x4(%eax),%eax
f01323bd:	a3 a4 0e 6c f0       	mov    %eax,0xf06c0ea4
f01323c2:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01323c5:	8b 40 04             	mov    0x4(%eax),%eax
f01323c8:	85 c0                	test   %eax,%eax
f01323ca:	74 0f                	je     f01323db <insert_sorted_with_merge_freeList+0x3d9>
f01323cc:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01323cf:	8b 40 04             	mov    0x4(%eax),%eax
f01323d2:	8b 55 e8             	mov    -0x18(%ebp),%edx
f01323d5:	8b 12                	mov    (%edx),%edx
f01323d7:	89 10                	mov    %edx,(%eax)
f01323d9:	eb 0a                	jmp    f01323e5 <insert_sorted_with_merge_freeList+0x3e3>
f01323db:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01323de:	8b 00                	mov    (%eax),%eax
f01323e0:	a3 a0 0e 6c f0       	mov    %eax,0xf06c0ea0
f01323e5:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01323e8:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f01323ee:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01323f1:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f01323f8:	a1 ac 0e 6c f0       	mov    0xf06c0eac,%eax
f01323fd:	48                   	dec    %eax
f01323fe:	a3 ac 0e 6c f0       	mov    %eax,0xf06c0eac
						nextBlock->sva = 0;
f0132403:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0132406:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
						nextBlock->size = 0;
f013240d:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0132410:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
						LIST_INSERT_HEAD(&AvailableMemBlocksList, nextBlock);
f0132417:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
f013241b:	75 17                	jne    f0132434 <insert_sorted_with_merge_freeList+0x432>
f013241d:	83 ec 04             	sub    $0x4,%esp
f0132420:	68 84 c9 13 f0       	push   $0xf013c984
f0132425:	68 5f 01 00 00       	push   $0x15f
f013242a:	68 a7 c9 13 f0       	push   $0xf013c9a7
f013242f:	e8 72 dd fc ff       	call   f01001a6 <_panic>
f0132434:	8b 15 d4 0e 6c f0    	mov    0xf06c0ed4,%edx
f013243a:	8b 45 e8             	mov    -0x18(%ebp),%eax
f013243d:	89 10                	mov    %edx,(%eax)
f013243f:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0132442:	8b 00                	mov    (%eax),%eax
f0132444:	85 c0                	test   %eax,%eax
f0132446:	74 0d                	je     f0132455 <insert_sorted_with_merge_freeList+0x453>
f0132448:	a1 d4 0e 6c f0       	mov    0xf06c0ed4,%eax
f013244d:	8b 55 e8             	mov    -0x18(%ebp),%edx
f0132450:	89 50 04             	mov    %edx,0x4(%eax)
f0132453:	eb 08                	jmp    f013245d <insert_sorted_with_merge_freeList+0x45b>
f0132455:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0132458:	a3 d8 0e 6c f0       	mov    %eax,0xf06c0ed8
f013245d:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0132460:	a3 d4 0e 6c f0       	mov    %eax,0xf06c0ed4
f0132465:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0132468:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f013246f:	a1 e0 0e 6c f0       	mov    0xf06c0ee0,%eax
f0132474:	40                   	inc    %eax
f0132475:	a3 e0 0e 6c f0       	mov    %eax,0xf06c0ee0
					}
					currentBlock->size += blockToInsert->size;
f013247a:	8b 45 f4             	mov    -0xc(%ebp),%eax
f013247d:	8b 50 0c             	mov    0xc(%eax),%edx
f0132480:	8b 45 08             	mov    0x8(%ebp),%eax
f0132483:	8b 40 0c             	mov    0xc(%eax),%eax
f0132486:	01 c2                	add    %eax,%edx
f0132488:	8b 45 f4             	mov    -0xc(%ebp),%eax
f013248b:	89 50 0c             	mov    %edx,0xc(%eax)
					blockToInsert->sva = 0;
f013248e:	8b 45 08             	mov    0x8(%ebp),%eax
f0132491:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
					blockToInsert->size = 0;
f0132498:	8b 45 08             	mov    0x8(%ebp),%eax
f013249b:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
					LIST_INSERT_HEAD(&AvailableMemBlocksList, blockToInsert);
f01324a2:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f01324a6:	75 17                	jne    f01324bf <insert_sorted_with_merge_freeList+0x4bd>
f01324a8:	83 ec 04             	sub    $0x4,%esp
f01324ab:	68 84 c9 13 f0       	push   $0xf013c984
f01324b0:	68 64 01 00 00       	push   $0x164
f01324b5:	68 a7 c9 13 f0       	push   $0xf013c9a7
f01324ba:	e8 e7 dc fc ff       	call   f01001a6 <_panic>
f01324bf:	8b 15 d4 0e 6c f0    	mov    0xf06c0ed4,%edx
f01324c5:	8b 45 08             	mov    0x8(%ebp),%eax
f01324c8:	89 10                	mov    %edx,(%eax)
f01324ca:	8b 45 08             	mov    0x8(%ebp),%eax
f01324cd:	8b 00                	mov    (%eax),%eax
f01324cf:	85 c0                	test   %eax,%eax
f01324d1:	74 0d                	je     f01324e0 <insert_sorted_with_merge_freeList+0x4de>
f01324d3:	a1 d4 0e 6c f0       	mov    0xf06c0ed4,%eax
f01324d8:	8b 55 08             	mov    0x8(%ebp),%edx
f01324db:	89 50 04             	mov    %edx,0x4(%eax)
f01324de:	eb 08                	jmp    f01324e8 <insert_sorted_with_merge_freeList+0x4e6>
f01324e0:	8b 45 08             	mov    0x8(%ebp),%eax
f01324e3:	a3 d8 0e 6c f0       	mov    %eax,0xf06c0ed8
f01324e8:	8b 45 08             	mov    0x8(%ebp),%eax
f01324eb:	a3 d4 0e 6c f0       	mov    %eax,0xf06c0ed4
f01324f0:	8b 45 08             	mov    0x8(%ebp),%eax
f01324f3:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f01324fa:	a1 e0 0e 6c f0       	mov    0xf06c0ee0,%eax
f01324ff:	40                   	inc    %eax
f0132500:	a3 e0 0e 6c f0       	mov    %eax,0xf06c0ee0
					break;
f0132505:	e9 41 02 00 00       	jmp    f013274b <insert_sorted_with_merge_freeList+0x749>
				}
				else if(blockToInsert->sva + blockToInsert->size == nextBlock->sva)
f013250a:	8b 45 08             	mov    0x8(%ebp),%eax
f013250d:	8b 50 08             	mov    0x8(%eax),%edx
f0132510:	8b 45 08             	mov    0x8(%ebp),%eax
f0132513:	8b 40 0c             	mov    0xc(%eax),%eax
f0132516:	01 c2                	add    %eax,%edx
f0132518:	8b 45 e8             	mov    -0x18(%ebp),%eax
f013251b:	8b 40 08             	mov    0x8(%eax),%eax
f013251e:	39 c2                	cmp    %eax,%edx
f0132520:	0f 85 7c 01 00 00    	jne    f01326a2 <insert_sorted_with_merge_freeList+0x6a0>
				{
					LIST_INSERT_BEFORE(&FreeMemBlocksList, nextBlock, blockToInsert);
f0132526:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
f013252a:	74 06                	je     f0132532 <insert_sorted_with_merge_freeList+0x530>
f013252c:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0132530:	75 17                	jne    f0132549 <insert_sorted_with_merge_freeList+0x547>
f0132532:	83 ec 04             	sub    $0x4,%esp
f0132535:	68 c0 c9 13 f0       	push   $0xf013c9c0
f013253a:	68 69 01 00 00       	push   $0x169
f013253f:	68 a7 c9 13 f0       	push   $0xf013c9a7
f0132544:	e8 5d dc fc ff       	call   f01001a6 <_panic>
f0132549:	8b 45 e8             	mov    -0x18(%ebp),%eax
f013254c:	8b 50 04             	mov    0x4(%eax),%edx
f013254f:	8b 45 08             	mov    0x8(%ebp),%eax
f0132552:	89 50 04             	mov    %edx,0x4(%eax)
f0132555:	8b 45 08             	mov    0x8(%ebp),%eax
f0132558:	8b 55 e8             	mov    -0x18(%ebp),%edx
f013255b:	89 10                	mov    %edx,(%eax)
f013255d:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0132560:	8b 40 04             	mov    0x4(%eax),%eax
f0132563:	85 c0                	test   %eax,%eax
f0132565:	74 0d                	je     f0132574 <insert_sorted_with_merge_freeList+0x572>
f0132567:	8b 45 e8             	mov    -0x18(%ebp),%eax
f013256a:	8b 40 04             	mov    0x4(%eax),%eax
f013256d:	8b 55 08             	mov    0x8(%ebp),%edx
f0132570:	89 10                	mov    %edx,(%eax)
f0132572:	eb 08                	jmp    f013257c <insert_sorted_with_merge_freeList+0x57a>
f0132574:	8b 45 08             	mov    0x8(%ebp),%eax
f0132577:	a3 a0 0e 6c f0       	mov    %eax,0xf06c0ea0
f013257c:	8b 45 e8             	mov    -0x18(%ebp),%eax
f013257f:	8b 55 08             	mov    0x8(%ebp),%edx
f0132582:	89 50 04             	mov    %edx,0x4(%eax)
f0132585:	a1 ac 0e 6c f0       	mov    0xf06c0eac,%eax
f013258a:	40                   	inc    %eax
f013258b:	a3 ac 0e 6c f0       	mov    %eax,0xf06c0eac
					blockToInsert->size += nextBlock->size;
f0132590:	8b 45 08             	mov    0x8(%ebp),%eax
f0132593:	8b 50 0c             	mov    0xc(%eax),%edx
f0132596:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0132599:	8b 40 0c             	mov    0xc(%eax),%eax
f013259c:	01 c2                	add    %eax,%edx
f013259e:	8b 45 08             	mov    0x8(%ebp),%eax
f01325a1:	89 50 0c             	mov    %edx,0xc(%eax)
					LIST_REMOVE(&FreeMemBlocksList, nextBlock);
f01325a4:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
f01325a8:	75 17                	jne    f01325c1 <insert_sorted_with_merge_freeList+0x5bf>
f01325aa:	83 ec 04             	sub    $0x4,%esp
f01325ad:	68 50 ca 13 f0       	push   $0xf013ca50
f01325b2:	68 6b 01 00 00       	push   $0x16b
f01325b7:	68 a7 c9 13 f0       	push   $0xf013c9a7
f01325bc:	e8 e5 db fc ff       	call   f01001a6 <_panic>
f01325c1:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01325c4:	8b 00                	mov    (%eax),%eax
f01325c6:	85 c0                	test   %eax,%eax
f01325c8:	74 10                	je     f01325da <insert_sorted_with_merge_freeList+0x5d8>
f01325ca:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01325cd:	8b 00                	mov    (%eax),%eax
f01325cf:	8b 55 e8             	mov    -0x18(%ebp),%edx
f01325d2:	8b 52 04             	mov    0x4(%edx),%edx
f01325d5:	89 50 04             	mov    %edx,0x4(%eax)
f01325d8:	eb 0b                	jmp    f01325e5 <insert_sorted_with_merge_freeList+0x5e3>
f01325da:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01325dd:	8b 40 04             	mov    0x4(%eax),%eax
f01325e0:	a3 a4 0e 6c f0       	mov    %eax,0xf06c0ea4
f01325e5:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01325e8:	8b 40 04             	mov    0x4(%eax),%eax
f01325eb:	85 c0                	test   %eax,%eax
f01325ed:	74 0f                	je     f01325fe <insert_sorted_with_merge_freeList+0x5fc>
f01325ef:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01325f2:	8b 40 04             	mov    0x4(%eax),%eax
f01325f5:	8b 55 e8             	mov    -0x18(%ebp),%edx
f01325f8:	8b 12                	mov    (%edx),%edx
f01325fa:	89 10                	mov    %edx,(%eax)
f01325fc:	eb 0a                	jmp    f0132608 <insert_sorted_with_merge_freeList+0x606>
f01325fe:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0132601:	8b 00                	mov    (%eax),%eax
f0132603:	a3 a0 0e 6c f0       	mov    %eax,0xf06c0ea0
f0132608:	8b 45 e8             	mov    -0x18(%ebp),%eax
f013260b:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f0132611:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0132614:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f013261b:	a1 ac 0e 6c f0       	mov    0xf06c0eac,%eax
f0132620:	48                   	dec    %eax
f0132621:	a3 ac 0e 6c f0       	mov    %eax,0xf06c0eac
					nextBlock->sva = 0;
f0132626:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0132629:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
					nextBlock->size = 0;
f0132630:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0132633:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
					LIST_INSERT_HEAD(&AvailableMemBlocksList, nextBlock);
f013263a:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
f013263e:	75 17                	jne    f0132657 <insert_sorted_with_merge_freeList+0x655>
f0132640:	83 ec 04             	sub    $0x4,%esp
f0132643:	68 84 c9 13 f0       	push   $0xf013c984
f0132648:	68 6e 01 00 00       	push   $0x16e
f013264d:	68 a7 c9 13 f0       	push   $0xf013c9a7
f0132652:	e8 4f db fc ff       	call   f01001a6 <_panic>
f0132657:	8b 15 d4 0e 6c f0    	mov    0xf06c0ed4,%edx
f013265d:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0132660:	89 10                	mov    %edx,(%eax)
f0132662:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0132665:	8b 00                	mov    (%eax),%eax
f0132667:	85 c0                	test   %eax,%eax
f0132669:	74 0d                	je     f0132678 <insert_sorted_with_merge_freeList+0x676>
f013266b:	a1 d4 0e 6c f0       	mov    0xf06c0ed4,%eax
f0132670:	8b 55 e8             	mov    -0x18(%ebp),%edx
f0132673:	89 50 04             	mov    %edx,0x4(%eax)
f0132676:	eb 08                	jmp    f0132680 <insert_sorted_with_merge_freeList+0x67e>
f0132678:	8b 45 e8             	mov    -0x18(%ebp),%eax
f013267b:	a3 d8 0e 6c f0       	mov    %eax,0xf06c0ed8
f0132680:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0132683:	a3 d4 0e 6c f0       	mov    %eax,0xf06c0ed4
f0132688:	8b 45 e8             	mov    -0x18(%ebp),%eax
f013268b:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f0132692:	a1 e0 0e 6c f0       	mov    0xf06c0ee0,%eax
f0132697:	40                   	inc    %eax
f0132698:	a3 e0 0e 6c f0       	mov    %eax,0xf06c0ee0
					break;
f013269d:	e9 a9 00 00 00       	jmp    f013274b <insert_sorted_with_merge_freeList+0x749>
				}
				else
				{
					LIST_INSERT_AFTER(&FreeMemBlocksList, currentBlock, blockToInsert);
f01326a2:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01326a6:	74 06                	je     f01326ae <insert_sorted_with_merge_freeList+0x6ac>
f01326a8:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f01326ac:	75 17                	jne    f01326c5 <insert_sorted_with_merge_freeList+0x6c3>
f01326ae:	83 ec 04             	sub    $0x4,%esp
f01326b1:	68 1c ca 13 f0       	push   $0xf013ca1c
f01326b6:	68 73 01 00 00       	push   $0x173
f01326bb:	68 a7 c9 13 f0       	push   $0xf013c9a7
f01326c0:	e8 e1 da fc ff       	call   f01001a6 <_panic>
f01326c5:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01326c8:	8b 10                	mov    (%eax),%edx
f01326ca:	8b 45 08             	mov    0x8(%ebp),%eax
f01326cd:	89 10                	mov    %edx,(%eax)
f01326cf:	8b 45 08             	mov    0x8(%ebp),%eax
f01326d2:	8b 00                	mov    (%eax),%eax
f01326d4:	85 c0                	test   %eax,%eax
f01326d6:	74 0b                	je     f01326e3 <insert_sorted_with_merge_freeList+0x6e1>
f01326d8:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01326db:	8b 00                	mov    (%eax),%eax
f01326dd:	8b 55 08             	mov    0x8(%ebp),%edx
f01326e0:	89 50 04             	mov    %edx,0x4(%eax)
f01326e3:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01326e6:	8b 55 08             	mov    0x8(%ebp),%edx
f01326e9:	89 10                	mov    %edx,(%eax)
f01326eb:	8b 45 08             	mov    0x8(%ebp),%eax
f01326ee:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01326f1:	89 50 04             	mov    %edx,0x4(%eax)
f01326f4:	8b 45 08             	mov    0x8(%ebp),%eax
f01326f7:	8b 00                	mov    (%eax),%eax
f01326f9:	85 c0                	test   %eax,%eax
f01326fb:	75 08                	jne    f0132705 <insert_sorted_with_merge_freeList+0x703>
f01326fd:	8b 45 08             	mov    0x8(%ebp),%eax
f0132700:	a3 a4 0e 6c f0       	mov    %eax,0xf06c0ea4
f0132705:	a1 ac 0e 6c f0       	mov    0xf06c0eac,%eax
f013270a:	40                   	inc    %eax
f013270b:	a3 ac 0e 6c f0       	mov    %eax,0xf06c0eac
					break;
f0132710:	eb 39                	jmp    f013274b <insert_sorted_with_merge_freeList+0x749>
	}
	else
	{
		struct MemBlock *currentBlock;
		struct MemBlock *nextBlock;
		LIST_FOREACH(currentBlock, &FreeMemBlocksList)
f0132712:	a1 a8 0e 6c f0       	mov    0xf06c0ea8,%eax
f0132717:	89 45 f4             	mov    %eax,-0xc(%ebp)
f013271a:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f013271e:	74 07                	je     f0132727 <insert_sorted_with_merge_freeList+0x725>
f0132720:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132723:	8b 00                	mov    (%eax),%eax
f0132725:	eb 05                	jmp    f013272c <insert_sorted_with_merge_freeList+0x72a>
f0132727:	b8 00 00 00 00       	mov    $0x0,%eax
f013272c:	a3 a8 0e 6c f0       	mov    %eax,0xf06c0ea8
f0132731:	a1 a8 0e 6c f0       	mov    0xf06c0ea8,%eax
f0132736:	85 c0                	test   %eax,%eax
f0132738:	0f 85 c7 fb ff ff    	jne    f0132305 <insert_sorted_with_merge_freeList+0x303>
f013273e:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0132742:	0f 85 bd fb ff ff    	jne    f0132305 <insert_sorted_with_merge_freeList+0x303>
			}
		}
	}
	//cprintf("\nAFTER INSERT with MERGE:\n=====================\n");
	//print_mem_block_lists();
}
f0132748:	eb 01                	jmp    f013274b <insert_sorted_with_merge_freeList+0x749>
	struct MemBlock *tail = LIST_LAST(&FreeMemBlocksList) ;

	if (LIST_EMPTY(&FreeMemBlocksList) || blockToInsert->sva <= head->sva)
	{
		LIST_INSERT_HEAD(&FreeMemBlocksList, blockToInsert);
		if(head != NULL && blockToInsert->sva + blockToInsert->size == head->sva)
f013274a:	90                   	nop
			}
		}
	}
	//cprintf("\nAFTER INSERT with MERGE:\n=====================\n");
	//print_mem_block_lists();
}
f013274b:	90                   	nop
f013274c:	c9                   	leave  
f013274d:	c3                   	ret    
f013274e:	66 90                	xchg   %ax,%ax

f0132750 <__udivdi3>:
f0132750:	55                   	push   %ebp
f0132751:	57                   	push   %edi
f0132752:	56                   	push   %esi
f0132753:	53                   	push   %ebx
f0132754:	83 ec 1c             	sub    $0x1c,%esp
f0132757:	8b 5c 24 30          	mov    0x30(%esp),%ebx
f013275b:	8b 4c 24 34          	mov    0x34(%esp),%ecx
f013275f:	8b 7c 24 38          	mov    0x38(%esp),%edi
f0132763:	89 5c 24 08          	mov    %ebx,0x8(%esp)
f0132767:	89 ca                	mov    %ecx,%edx
f0132769:	89 f8                	mov    %edi,%eax
f013276b:	8b 74 24 3c          	mov    0x3c(%esp),%esi
f013276f:	85 f6                	test   %esi,%esi
f0132771:	75 2d                	jne    f01327a0 <__udivdi3+0x50>
f0132773:	39 cf                	cmp    %ecx,%edi
f0132775:	77 65                	ja     f01327dc <__udivdi3+0x8c>
f0132777:	89 fd                	mov    %edi,%ebp
f0132779:	85 ff                	test   %edi,%edi
f013277b:	75 0b                	jne    f0132788 <__udivdi3+0x38>
f013277d:	b8 01 00 00 00       	mov    $0x1,%eax
f0132782:	31 d2                	xor    %edx,%edx
f0132784:	f7 f7                	div    %edi
f0132786:	89 c5                	mov    %eax,%ebp
f0132788:	31 d2                	xor    %edx,%edx
f013278a:	89 c8                	mov    %ecx,%eax
f013278c:	f7 f5                	div    %ebp
f013278e:	89 c1                	mov    %eax,%ecx
f0132790:	89 d8                	mov    %ebx,%eax
f0132792:	f7 f5                	div    %ebp
f0132794:	89 cf                	mov    %ecx,%edi
f0132796:	89 fa                	mov    %edi,%edx
f0132798:	83 c4 1c             	add    $0x1c,%esp
f013279b:	5b                   	pop    %ebx
f013279c:	5e                   	pop    %esi
f013279d:	5f                   	pop    %edi
f013279e:	5d                   	pop    %ebp
f013279f:	c3                   	ret    
f01327a0:	39 ce                	cmp    %ecx,%esi
f01327a2:	77 28                	ja     f01327cc <__udivdi3+0x7c>
f01327a4:	0f bd fe             	bsr    %esi,%edi
f01327a7:	83 f7 1f             	xor    $0x1f,%edi
f01327aa:	75 40                	jne    f01327ec <__udivdi3+0x9c>
f01327ac:	39 ce                	cmp    %ecx,%esi
f01327ae:	72 0a                	jb     f01327ba <__udivdi3+0x6a>
f01327b0:	3b 44 24 08          	cmp    0x8(%esp),%eax
f01327b4:	0f 87 9e 00 00 00    	ja     f0132858 <__udivdi3+0x108>
f01327ba:	b8 01 00 00 00       	mov    $0x1,%eax
f01327bf:	89 fa                	mov    %edi,%edx
f01327c1:	83 c4 1c             	add    $0x1c,%esp
f01327c4:	5b                   	pop    %ebx
f01327c5:	5e                   	pop    %esi
f01327c6:	5f                   	pop    %edi
f01327c7:	5d                   	pop    %ebp
f01327c8:	c3                   	ret    
f01327c9:	8d 76 00             	lea    0x0(%esi),%esi
f01327cc:	31 ff                	xor    %edi,%edi
f01327ce:	31 c0                	xor    %eax,%eax
f01327d0:	89 fa                	mov    %edi,%edx
f01327d2:	83 c4 1c             	add    $0x1c,%esp
f01327d5:	5b                   	pop    %ebx
f01327d6:	5e                   	pop    %esi
f01327d7:	5f                   	pop    %edi
f01327d8:	5d                   	pop    %ebp
f01327d9:	c3                   	ret    
f01327da:	66 90                	xchg   %ax,%ax
f01327dc:	89 d8                	mov    %ebx,%eax
f01327de:	f7 f7                	div    %edi
f01327e0:	31 ff                	xor    %edi,%edi
f01327e2:	89 fa                	mov    %edi,%edx
f01327e4:	83 c4 1c             	add    $0x1c,%esp
f01327e7:	5b                   	pop    %ebx
f01327e8:	5e                   	pop    %esi
f01327e9:	5f                   	pop    %edi
f01327ea:	5d                   	pop    %ebp
f01327eb:	c3                   	ret    
f01327ec:	bd 20 00 00 00       	mov    $0x20,%ebp
f01327f1:	89 eb                	mov    %ebp,%ebx
f01327f3:	29 fb                	sub    %edi,%ebx
f01327f5:	89 f9                	mov    %edi,%ecx
f01327f7:	d3 e6                	shl    %cl,%esi
f01327f9:	89 c5                	mov    %eax,%ebp
f01327fb:	88 d9                	mov    %bl,%cl
f01327fd:	d3 ed                	shr    %cl,%ebp
f01327ff:	89 e9                	mov    %ebp,%ecx
f0132801:	09 f1                	or     %esi,%ecx
f0132803:	89 4c 24 0c          	mov    %ecx,0xc(%esp)
f0132807:	89 f9                	mov    %edi,%ecx
f0132809:	d3 e0                	shl    %cl,%eax
f013280b:	89 c5                	mov    %eax,%ebp
f013280d:	89 d6                	mov    %edx,%esi
f013280f:	88 d9                	mov    %bl,%cl
f0132811:	d3 ee                	shr    %cl,%esi
f0132813:	89 f9                	mov    %edi,%ecx
f0132815:	d3 e2                	shl    %cl,%edx
f0132817:	8b 44 24 08          	mov    0x8(%esp),%eax
f013281b:	88 d9                	mov    %bl,%cl
f013281d:	d3 e8                	shr    %cl,%eax
f013281f:	09 c2                	or     %eax,%edx
f0132821:	89 d0                	mov    %edx,%eax
f0132823:	89 f2                	mov    %esi,%edx
f0132825:	f7 74 24 0c          	divl   0xc(%esp)
f0132829:	89 d6                	mov    %edx,%esi
f013282b:	89 c3                	mov    %eax,%ebx
f013282d:	f7 e5                	mul    %ebp
f013282f:	39 d6                	cmp    %edx,%esi
f0132831:	72 19                	jb     f013284c <__udivdi3+0xfc>
f0132833:	74 0b                	je     f0132840 <__udivdi3+0xf0>
f0132835:	89 d8                	mov    %ebx,%eax
f0132837:	31 ff                	xor    %edi,%edi
f0132839:	e9 58 ff ff ff       	jmp    f0132796 <__udivdi3+0x46>
f013283e:	66 90                	xchg   %ax,%ax
f0132840:	8b 54 24 08          	mov    0x8(%esp),%edx
f0132844:	89 f9                	mov    %edi,%ecx
f0132846:	d3 e2                	shl    %cl,%edx
f0132848:	39 c2                	cmp    %eax,%edx
f013284a:	73 e9                	jae    f0132835 <__udivdi3+0xe5>
f013284c:	8d 43 ff             	lea    -0x1(%ebx),%eax
f013284f:	31 ff                	xor    %edi,%edi
f0132851:	e9 40 ff ff ff       	jmp    f0132796 <__udivdi3+0x46>
f0132856:	66 90                	xchg   %ax,%ax
f0132858:	31 c0                	xor    %eax,%eax
f013285a:	e9 37 ff ff ff       	jmp    f0132796 <__udivdi3+0x46>
f013285f:	90                   	nop

f0132860 <__umoddi3>:
f0132860:	55                   	push   %ebp
f0132861:	57                   	push   %edi
f0132862:	56                   	push   %esi
f0132863:	53                   	push   %ebx
f0132864:	83 ec 1c             	sub    $0x1c,%esp
f0132867:	8b 4c 24 30          	mov    0x30(%esp),%ecx
f013286b:	8b 74 24 34          	mov    0x34(%esp),%esi
f013286f:	8b 7c 24 38          	mov    0x38(%esp),%edi
f0132873:	8b 44 24 3c          	mov    0x3c(%esp),%eax
f0132877:	89 44 24 0c          	mov    %eax,0xc(%esp)
f013287b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
f013287f:	89 f3                	mov    %esi,%ebx
f0132881:	89 fa                	mov    %edi,%edx
f0132883:	89 4c 24 04          	mov    %ecx,0x4(%esp)
f0132887:	89 34 24             	mov    %esi,(%esp)
f013288a:	85 c0                	test   %eax,%eax
f013288c:	75 1a                	jne    f01328a8 <__umoddi3+0x48>
f013288e:	39 f7                	cmp    %esi,%edi
f0132890:	0f 86 a2 00 00 00    	jbe    f0132938 <__umoddi3+0xd8>
f0132896:	89 c8                	mov    %ecx,%eax
f0132898:	89 f2                	mov    %esi,%edx
f013289a:	f7 f7                	div    %edi
f013289c:	89 d0                	mov    %edx,%eax
f013289e:	31 d2                	xor    %edx,%edx
f01328a0:	83 c4 1c             	add    $0x1c,%esp
f01328a3:	5b                   	pop    %ebx
f01328a4:	5e                   	pop    %esi
f01328a5:	5f                   	pop    %edi
f01328a6:	5d                   	pop    %ebp
f01328a7:	c3                   	ret    
f01328a8:	39 f0                	cmp    %esi,%eax
f01328aa:	0f 87 ac 00 00 00    	ja     f013295c <__umoddi3+0xfc>
f01328b0:	0f bd e8             	bsr    %eax,%ebp
f01328b3:	83 f5 1f             	xor    $0x1f,%ebp
f01328b6:	0f 84 ac 00 00 00    	je     f0132968 <__umoddi3+0x108>
f01328bc:	bf 20 00 00 00       	mov    $0x20,%edi
f01328c1:	29 ef                	sub    %ebp,%edi
f01328c3:	89 fe                	mov    %edi,%esi
f01328c5:	89 7c 24 0c          	mov    %edi,0xc(%esp)
f01328c9:	89 e9                	mov    %ebp,%ecx
f01328cb:	d3 e0                	shl    %cl,%eax
f01328cd:	89 d7                	mov    %edx,%edi
f01328cf:	89 f1                	mov    %esi,%ecx
f01328d1:	d3 ef                	shr    %cl,%edi
f01328d3:	09 c7                	or     %eax,%edi
f01328d5:	89 e9                	mov    %ebp,%ecx
f01328d7:	d3 e2                	shl    %cl,%edx
f01328d9:	89 14 24             	mov    %edx,(%esp)
f01328dc:	89 d8                	mov    %ebx,%eax
f01328de:	d3 e0                	shl    %cl,%eax
f01328e0:	89 c2                	mov    %eax,%edx
f01328e2:	8b 44 24 08          	mov    0x8(%esp),%eax
f01328e6:	d3 e0                	shl    %cl,%eax
f01328e8:	89 44 24 04          	mov    %eax,0x4(%esp)
f01328ec:	8b 44 24 08          	mov    0x8(%esp),%eax
f01328f0:	89 f1                	mov    %esi,%ecx
f01328f2:	d3 e8                	shr    %cl,%eax
f01328f4:	09 d0                	or     %edx,%eax
f01328f6:	d3 eb                	shr    %cl,%ebx
f01328f8:	89 da                	mov    %ebx,%edx
f01328fa:	f7 f7                	div    %edi
f01328fc:	89 d3                	mov    %edx,%ebx
f01328fe:	f7 24 24             	mull   (%esp)
f0132901:	89 c6                	mov    %eax,%esi
f0132903:	89 d1                	mov    %edx,%ecx
f0132905:	39 d3                	cmp    %edx,%ebx
f0132907:	0f 82 87 00 00 00    	jb     f0132994 <__umoddi3+0x134>
f013290d:	0f 84 91 00 00 00    	je     f01329a4 <__umoddi3+0x144>
f0132913:	8b 54 24 04          	mov    0x4(%esp),%edx
f0132917:	29 f2                	sub    %esi,%edx
f0132919:	19 cb                	sbb    %ecx,%ebx
f013291b:	89 d8                	mov    %ebx,%eax
f013291d:	8a 4c 24 0c          	mov    0xc(%esp),%cl
f0132921:	d3 e0                	shl    %cl,%eax
f0132923:	89 e9                	mov    %ebp,%ecx
f0132925:	d3 ea                	shr    %cl,%edx
f0132927:	09 d0                	or     %edx,%eax
f0132929:	89 e9                	mov    %ebp,%ecx
f013292b:	d3 eb                	shr    %cl,%ebx
f013292d:	89 da                	mov    %ebx,%edx
f013292f:	83 c4 1c             	add    $0x1c,%esp
f0132932:	5b                   	pop    %ebx
f0132933:	5e                   	pop    %esi
f0132934:	5f                   	pop    %edi
f0132935:	5d                   	pop    %ebp
f0132936:	c3                   	ret    
f0132937:	90                   	nop
f0132938:	89 fd                	mov    %edi,%ebp
f013293a:	85 ff                	test   %edi,%edi
f013293c:	75 0b                	jne    f0132949 <__umoddi3+0xe9>
f013293e:	b8 01 00 00 00       	mov    $0x1,%eax
f0132943:	31 d2                	xor    %edx,%edx
f0132945:	f7 f7                	div    %edi
f0132947:	89 c5                	mov    %eax,%ebp
f0132949:	89 f0                	mov    %esi,%eax
f013294b:	31 d2                	xor    %edx,%edx
f013294d:	f7 f5                	div    %ebp
f013294f:	89 c8                	mov    %ecx,%eax
f0132951:	f7 f5                	div    %ebp
f0132953:	89 d0                	mov    %edx,%eax
f0132955:	e9 44 ff ff ff       	jmp    f013289e <__umoddi3+0x3e>
f013295a:	66 90                	xchg   %ax,%ax
f013295c:	89 c8                	mov    %ecx,%eax
f013295e:	89 f2                	mov    %esi,%edx
f0132960:	83 c4 1c             	add    $0x1c,%esp
f0132963:	5b                   	pop    %ebx
f0132964:	5e                   	pop    %esi
f0132965:	5f                   	pop    %edi
f0132966:	5d                   	pop    %ebp
f0132967:	c3                   	ret    
f0132968:	3b 04 24             	cmp    (%esp),%eax
f013296b:	72 06                	jb     f0132973 <__umoddi3+0x113>
f013296d:	3b 7c 24 04          	cmp    0x4(%esp),%edi
f0132971:	77 0f                	ja     f0132982 <__umoddi3+0x122>
f0132973:	89 f2                	mov    %esi,%edx
f0132975:	29 f9                	sub    %edi,%ecx
f0132977:	1b 54 24 0c          	sbb    0xc(%esp),%edx
f013297b:	89 14 24             	mov    %edx,(%esp)
f013297e:	89 4c 24 04          	mov    %ecx,0x4(%esp)
f0132982:	8b 44 24 04          	mov    0x4(%esp),%eax
f0132986:	8b 14 24             	mov    (%esp),%edx
f0132989:	83 c4 1c             	add    $0x1c,%esp
f013298c:	5b                   	pop    %ebx
f013298d:	5e                   	pop    %esi
f013298e:	5f                   	pop    %edi
f013298f:	5d                   	pop    %ebp
f0132990:	c3                   	ret    
f0132991:	8d 76 00             	lea    0x0(%esi),%esi
f0132994:	2b 04 24             	sub    (%esp),%eax
f0132997:	19 fa                	sbb    %edi,%edx
f0132999:	89 d1                	mov    %edx,%ecx
f013299b:	89 c6                	mov    %eax,%esi
f013299d:	e9 71 ff ff ff       	jmp    f0132913 <__umoddi3+0xb3>
f01329a2:	66 90                	xchg   %ax,%ax
f01329a4:	39 44 24 04          	cmp    %eax,0x4(%esp)
f01329a8:	72 ea                	jb     f0132994 <__umoddi3+0x134>
f01329aa:	89 d9                	mov    %ebx,%ecx
f01329ac:	e9 62 ff ff ff       	jmp    f0132913 <__umoddi3+0xb3>
